=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 745473.288 ops/s
# Warmup Iteration   2: 1920953.703 ops/s
# Warmup Iteration   3: 1981464.129 ops/s
# Warmup Iteration   4: 1629717.935 ops/s
# Warmup Iteration   5: 2017542.890 ops/s
# Warmup Iteration   6: 1993553.690 ops/s
# Warmup Iteration   7: 1986887.329 ops/s
# Warmup Iteration   8: 2068324.936 ops/s
# Warmup Iteration   9: 2053205.980 ops/s
# Warmup Iteration  10: 2069029.424 ops/s
# Warmup Iteration  11: 1981377.390 ops/s
# Warmup Iteration  12: 2038542.411 ops/s
# Warmup Iteration  13: 2037348.964 ops/s
# Warmup Iteration  14: 1991363.568 ops/s
# Warmup Iteration  15: 2016061.988 ops/s
# Warmup Iteration  16: 2068975.390 ops/s
# Warmup Iteration  17: 2050983.470 ops/s
# Warmup Iteration  18: 1982759.417 ops/s
# Warmup Iteration  19: 2060012.255 ops/s
# Warmup Iteration  20: 2038223.755 ops/s
# Warmup Iteration  21: 2037085.881 ops/s
# Warmup Iteration  22: 2152967.076 ops/s
# Warmup Iteration  23: 2155599.243 ops/s
# Warmup Iteration  24: 2046121.613 ops/s
# Warmup Iteration  25: 2008868.197 ops/s
# Warmup Iteration  26: 2106833.698 ops/s
# Warmup Iteration  27: 1992175.655 ops/s
# Warmup Iteration  28: 1987548.769 ops/s
# Warmup Iteration  29: 1986320.790 ops/s
# Warmup Iteration  30: 2017561.419 ops/s
Iteration   1: 2035327.694 ops/s
Iteration   2: 2074092.837 ops/s
Iteration   3: 2004690.866 ops/s
Iteration   4: 1962607.625 ops/s
Iteration   5: 1935435.913 ops/s
Iteration   6: 2096883.909 ops/s
Iteration   7: 1961042.343 ops/s
Iteration   8: 2062832.186 ops/s
Iteration   9: 2045679.551 ops/s
Iteration  10: 2048037.499 ops/s
Iteration  11: 1958957.752 ops/s
Iteration  12: 2024655.079 ops/s
Iteration  13: 1971758.200 ops/s
Iteration  14: 2109210.404 ops/s
Iteration  15: 2058130.870 ops/s
Iteration  16: 2023667.930 ops/s
Iteration  17: 1987517.483 ops/s
Iteration  18: 1985604.568 ops/s
Iteration  19: 2030087.797 ops/s
Iteration  20: 1991121.828 ops/s
Iteration  21: 2038950.317 ops/s
Iteration  22: 2033131.821 ops/s
Iteration  23: 2062808.664 ops/s
Iteration  24: 2106957.492 ops/s
Iteration  25: 2078217.760 ops/s
Iteration  26: 2100535.102 ops/s
Iteration  27: 2067295.865 ops/s
Iteration  28: 2111779.374 ops/s
Iteration  29: 2080327.771 ops/s
Iteration  30: 2049814.088 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterable":
  2036572.020 ±(99.9%) 33274.794 ops/s [Average]
  (min, avg, max) = (1935435.913, 2036572.020, 2111779.374), stdev = 49804.150
  CI (99.9%): [2003297.225, 2069846.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterable  thrpt   30  2036572.020 ± 33274.794  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 918964.480 ops/s
# Warmup Iteration   2: 2739287.117 ops/s
# Warmup Iteration   3: 2197932.074 ops/s
# Warmup Iteration   4: 2663552.837 ops/s
# Warmup Iteration   5: 2795784.510 ops/s
# Warmup Iteration   6: 2731735.741 ops/s
# Warmup Iteration   7: 2661064.319 ops/s
# Warmup Iteration   8: 2619884.534 ops/s
# Warmup Iteration   9: 2796023.679 ops/s
# Warmup Iteration  10: 2696804.441 ops/s
# Warmup Iteration  11: 2595929.311 ops/s
# Warmup Iteration  12: 2687820.635 ops/s
# Warmup Iteration  13: 2647799.203 ops/s
# Warmup Iteration  14: 2616649.394 ops/s
# Warmup Iteration  15: 2627003.097 ops/s
# Warmup Iteration  16: 2566353.861 ops/s
# Warmup Iteration  17: 2627975.983 ops/s
# Warmup Iteration  18: 2615531.617 ops/s
# Warmup Iteration  19: 2642311.655 ops/s
# Warmup Iteration  20: 2671732.039 ops/s
# Warmup Iteration  21: 2626031.832 ops/s
# Warmup Iteration  22: 2653910.791 ops/s
# Warmup Iteration  23: 2710768.584 ops/s
# Warmup Iteration  24: 2659686.757 ops/s
# Warmup Iteration  25: 2676532.105 ops/s
# Warmup Iteration  26: 2641101.430 ops/s
# Warmup Iteration  27: 2660283.031 ops/s
# Warmup Iteration  28: 2666254.459 ops/s
# Warmup Iteration  29: 2748080.491 ops/s
# Warmup Iteration  30: 2653083.646 ops/s
Iteration   1: 2652804.899 ops/s
Iteration   2: 2736142.857 ops/s
Iteration   3: 2711935.811 ops/s
Iteration   4: 2569230.292 ops/s
Iteration   5: 2730244.882 ops/s
Iteration   6: 2641098.072 ops/s
Iteration   7: 2714206.522 ops/s
Iteration   8: 2703725.158 ops/s
Iteration   9: 2730869.740 ops/s
Iteration  10: 2738650.824 ops/s
Iteration  11: 2633938.995 ops/s
Iteration  12: 2677485.791 ops/s
Iteration  13: 2690753.118 ops/s
Iteration  14: 2650619.553 ops/s
Iteration  15: 2644603.304 ops/s
Iteration  16: 2604125.745 ops/s
Iteration  17: 2596797.123 ops/s
Iteration  18: 2664277.841 ops/s
Iteration  19: 2871441.441 ops/s
Iteration  20: 2858292.106 ops/s
Iteration  21: 2635216.204 ops/s
Iteration  22: 2561927.880 ops/s
Iteration  23: 2591184.565 ops/s
Iteration  24: 2647234.983 ops/s
Iteration  25: 2711744.055 ops/s
Iteration  26: 2622819.216 ops/s
Iteration  27: 2617844.005 ops/s
Iteration  28: 2613788.340 ops/s
Iteration  29: 2604508.453 ops/s
Iteration  30: 2660637.428 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableEmpty":
  2669604.973 ±(99.9%) 48839.820 ops/s [Average]
  (min, avg, max) = (2561927.880, 2669604.973, 2871441.441), stdev = 73101.149
  CI (99.9%): [2620765.153, 2718444.794] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableEmpty  thrpt   30  2669604.973 ± 48839.820  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1278531.616 ops/s
# Warmup Iteration   2: 3175301.406 ops/s
# Warmup Iteration   3: 2761001.559 ops/s
# Warmup Iteration   4: 3156454.217 ops/s
# Warmup Iteration   5: 3174832.155 ops/s
# Warmup Iteration   6: 3128815.614 ops/s
# Warmup Iteration   7: 3240176.152 ops/s
# Warmup Iteration   8: 3351162.034 ops/s
# Warmup Iteration   9: 3292100.711 ops/s
# Warmup Iteration  10: 3162124.193 ops/s
# Warmup Iteration  11: 3176148.002 ops/s
# Warmup Iteration  12: 3183871.294 ops/s
# Warmup Iteration  13: 3267128.552 ops/s
# Warmup Iteration  14: 3241660.040 ops/s
# Warmup Iteration  15: 3190819.297 ops/s
# Warmup Iteration  16: 3245253.667 ops/s
# Warmup Iteration  17: 3208299.956 ops/s
# Warmup Iteration  18: 3372590.157 ops/s
# Warmup Iteration  19: 3473221.011 ops/s
# Warmup Iteration  20: 3282289.791 ops/s
# Warmup Iteration  21: 3270053.486 ops/s
# Warmup Iteration  22: 3344096.279 ops/s
# Warmup Iteration  23: 3268898.154 ops/s
# Warmup Iteration  24: 3253002.296 ops/s
# Warmup Iteration  25: 3434237.370 ops/s
# Warmup Iteration  26: 3150669.115 ops/s
# Warmup Iteration  27: 3204961.793 ops/s
# Warmup Iteration  28: 3367076.405 ops/s
# Warmup Iteration  29: 3440311.780 ops/s
# Warmup Iteration  30: 3307850.735 ops/s
Iteration   1: 3170799.218 ops/s
Iteration   2: 3192475.764 ops/s
Iteration   3: 3207165.691 ops/s
Iteration   4: 3187051.201 ops/s
Iteration   5: 3286379.342 ops/s
Iteration   6: 3263624.853 ops/s
Iteration   7: 3216159.487 ops/s
Iteration   8: 3202744.736 ops/s
Iteration   9: 3157637.073 ops/s
Iteration  10: 3146037.327 ops/s
Iteration  11: 3156651.015 ops/s
Iteration  12: 3164942.618 ops/s
Iteration  13: 3274802.372 ops/s
Iteration  14: 3236693.969 ops/s
Iteration  15: 3105700.645 ops/s
Iteration  16: 3198940.507 ops/s
Iteration  17: 3215133.931 ops/s
Iteration  18: 3263221.911 ops/s
Iteration  19: 3189702.772 ops/s
Iteration  20: 3135442.623 ops/s
Iteration  21: 3173813.195 ops/s
Iteration  22: 3281957.471 ops/s
Iteration  23: 3346342.209 ops/s
Iteration  24: 3177441.875 ops/s
Iteration  25: 3269518.988 ops/s
Iteration  26: 3151082.136 ops/s
Iteration  27: 3262551.864 ops/s
Iteration  28: 3328656.367 ops/s
Iteration  29: 3209245.303 ops/s
Iteration  30: 3162724.479 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty":
  3211154.698 ±(99.9%) 39197.056 ops/s [Average]
  (min, avg, max) = (3105700.645, 3211154.698, 3346342.209), stdev = 58668.312
  CI (99.9%): [3171957.642, 3250351.754] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty  thrpt   30  3211154.698 ± 39197.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48062.797 ops/s
# Warmup Iteration   2: 47952.816 ops/s
# Warmup Iteration   3: 47858.134 ops/s
# Warmup Iteration   4: 47474.988 ops/s
# Warmup Iteration   5: 45544.672 ops/s
# Warmup Iteration   6: 45448.080 ops/s
# Warmup Iteration   7: 46026.159 ops/s
# Warmup Iteration   8: 45147.769 ops/s
# Warmup Iteration   9: 45449.035 ops/s
# Warmup Iteration  10: 44963.576 ops/s
# Warmup Iteration  11: 48929.219 ops/s
# Warmup Iteration  12: 47282.692 ops/s
# Warmup Iteration  13: 45654.049 ops/s
# Warmup Iteration  14: 46058.000 ops/s
# Warmup Iteration  15: 45188.418 ops/s
# Warmup Iteration  16: 45624.399 ops/s
# Warmup Iteration  17: 48539.492 ops/s
# Warmup Iteration  18: 47463.234 ops/s
# Warmup Iteration  19: 48848.443 ops/s
# Warmup Iteration  20: 49211.825 ops/s
# Warmup Iteration  21: 49197.782 ops/s
# Warmup Iteration  22: 49284.534 ops/s
# Warmup Iteration  23: 47506.964 ops/s
# Warmup Iteration  24: 50252.711 ops/s
# Warmup Iteration  25: 51984.521 ops/s
# Warmup Iteration  26: 51782.496 ops/s
# Warmup Iteration  27: 49461.479 ops/s
# Warmup Iteration  28: 46561.305 ops/s
# Warmup Iteration  29: 47123.263 ops/s
# Warmup Iteration  30: 46732.793 ops/s
Iteration   1: 47453.210 ops/s
Iteration   2: 48888.774 ops/s
Iteration   3: 49016.291 ops/s
Iteration   4: 47999.061 ops/s
Iteration   5: 48740.624 ops/s
Iteration   6: 47932.827 ops/s
Iteration   7: 47436.243 ops/s
Iteration   8: 47519.744 ops/s
Iteration   9: 46957.432 ops/s
Iteration  10: 46698.367 ops/s
Iteration  11: 46745.771 ops/s
Iteration  12: 47665.790 ops/s
Iteration  13: 47393.813 ops/s
Iteration  14: 47000.349 ops/s
Iteration  15: 47874.481 ops/s
Iteration  16: 47341.989 ops/s
Iteration  17: 48556.525 ops/s
Iteration  18: 48931.037 ops/s
Iteration  19: 49139.416 ops/s
Iteration  20: 49477.622 ops/s
Iteration  21: 48716.282 ops/s
Iteration  22: 49136.961 ops/s
Iteration  23: 49151.320 ops/s
Iteration  24: 49215.801 ops/s
Iteration  25: 49280.631 ops/s
Iteration  26: 50300.871 ops/s
Iteration  27: 49455.735 ops/s
Iteration  28: 49313.439 ops/s
Iteration  29: 49220.030 ops/s
Iteration  30: 49244.290 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableNull":
  48393.491 ±(99.9%) 655.817 ops/s [Average]
  (min, avg, max) = (46698.367, 48393.491, 50300.871), stdev = 981.595
  CI (99.9%): [47737.674, 49049.307] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt      Score     Error  Units
HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableNull  thrpt   30  48393.491 ± 655.817  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 901965.776 ops/s
# Warmup Iteration   2: 2340016.930 ops/s
# Warmup Iteration   3: 1928844.626 ops/s
# Warmup Iteration   4: 2384708.573 ops/s
# Warmup Iteration   5: 2373974.819 ops/s
# Warmup Iteration   6: 2368107.678 ops/s
# Warmup Iteration   7: 2422778.767 ops/s
# Warmup Iteration   8: 2385795.266 ops/s
# Warmup Iteration   9: 2372435.310 ops/s
# Warmup Iteration  10: 2353148.398 ops/s
# Warmup Iteration  11: 2326018.377 ops/s
# Warmup Iteration  12: 2341872.085 ops/s
# Warmup Iteration  13: 2357324.668 ops/s
# Warmup Iteration  14: 2340466.105 ops/s
# Warmup Iteration  15: 2416672.284 ops/s
# Warmup Iteration  16: 2326771.409 ops/s
# Warmup Iteration  17: 2352010.447 ops/s
# Warmup Iteration  18: 2386942.985 ops/s
# Warmup Iteration  19: 2395805.245 ops/s
# Warmup Iteration  20: 2459291.582 ops/s
# Warmup Iteration  21: 2467840.825 ops/s
# Warmup Iteration  22: 2384955.424 ops/s
# Warmup Iteration  23: 2363150.868 ops/s
# Warmup Iteration  24: 2348870.309 ops/s
# Warmup Iteration  25: 2415149.092 ops/s
# Warmup Iteration  26: 2395560.143 ops/s
# Warmup Iteration  27: 2342857.542 ops/s
# Warmup Iteration  28: 2365781.964 ops/s
# Warmup Iteration  29: 2328845.533 ops/s
# Warmup Iteration  30: 2321360.236 ops/s
Iteration   1: 2351330.965 ops/s
Iteration   2: 2367527.711 ops/s
Iteration   3: 2408733.410 ops/s
Iteration   4: 2418518.814 ops/s
Iteration   5: 2354452.974 ops/s
Iteration   6: 2345214.426 ops/s
Iteration   7: 2336567.128 ops/s
Iteration   8: 2355365.230 ops/s
Iteration   9: 2335622.493 ops/s
Iteration  10: 2346471.478 ops/s
Iteration  11: 2434971.321 ops/s
Iteration  12: 2382184.027 ops/s
Iteration  13: 2349213.729 ops/s
Iteration  14: 2433756.228 ops/s
Iteration  15: 2457461.335 ops/s
Iteration  16: 2487270.052 ops/s
Iteration  17: 2385081.912 ops/s
Iteration  18: 2402432.010 ops/s
Iteration  19: 2379430.534 ops/s
Iteration  20: 2404355.855 ops/s
Iteration  21: 2387796.139 ops/s
Iteration  22: 2373827.935 ops/s
Iteration  23: 2411969.211 ops/s
Iteration  24: 2356109.714 ops/s
Iteration  25: 2340103.609 ops/s
Iteration  26: 2371307.102 ops/s
Iteration  27: 2366799.442 ops/s
Iteration  28: 2358926.731 ops/s
Iteration  29: 2323579.762 ops/s
Iteration  30: 2326595.391 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableTargetEmpty":
  2378432.556 ±(99.9%) 26657.898 ops/s [Average]
  (min, avg, max) = (2323579.762, 2378432.556, 2487270.052), stdev = 39900.290
  CI (99.9%): [2351774.658, 2405090.454] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_putAllMapIterableTargetEmpty  thrpt   30  2378432.556 ± 26657.898  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putPair$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putPair

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1024810.869 ops/s
# Warmup Iteration   2: 2876833.508 ops/s
# Warmup Iteration   3: 2283084.404 ops/s
# Warmup Iteration   4: 2653406.691 ops/s
# Warmup Iteration   5: 2700376.213 ops/s
# Warmup Iteration   6: 2695109.654 ops/s
# Warmup Iteration   7: 2681969.954 ops/s
# Warmup Iteration   8: 2625029.978 ops/s
# Warmup Iteration   9: 2658971.815 ops/s
# Warmup Iteration  10: 2634236.146 ops/s
# Warmup Iteration  11: 2718007.003 ops/s
# Warmup Iteration  12: 2761683.560 ops/s
# Warmup Iteration  13: 2675101.011 ops/s
# Warmup Iteration  14: 2851643.373 ops/s
# Warmup Iteration  15: 2692435.201 ops/s
# Warmup Iteration  16: 2680779.184 ops/s
# Warmup Iteration  17: 2702559.215 ops/s
# Warmup Iteration  18: 2628631.830 ops/s
# Warmup Iteration  19: 2668938.885 ops/s
# Warmup Iteration  20: 2710164.262 ops/s
# Warmup Iteration  21: 2686678.233 ops/s
# Warmup Iteration  22: 2685179.239 ops/s
# Warmup Iteration  23: 2664752.381 ops/s
# Warmup Iteration  24: 2774596.059 ops/s
# Warmup Iteration  25: 2723443.755 ops/s
# Warmup Iteration  26: 2725002.987 ops/s
# Warmup Iteration  27: 2728480.160 ops/s
# Warmup Iteration  28: 2780839.360 ops/s
# Warmup Iteration  29: 2693088.534 ops/s
# Warmup Iteration  30: 2665001.359 ops/s
Iteration   1: 2737605.100 ops/s
Iteration   2: 2650358.581 ops/s
Iteration   3: 2649293.288 ops/s
Iteration   4: 2787222.318 ops/s
Iteration   5: 2804186.850 ops/s
Iteration   6: 2685939.594 ops/s
Iteration   7: 2645447.441 ops/s
Iteration   8: 2845338.957 ops/s
Iteration   9: 2750414.942 ops/s
Iteration  10: 2712889.533 ops/s
Iteration  11: 2717005.066 ops/s
Iteration  12: 2867828.173 ops/s
Iteration  13: 2820605.997 ops/s
Iteration  14: 2697770.629 ops/s
Iteration  15: 2634179.659 ops/s
Iteration  16: 2669417.780 ops/s
Iteration  17: 2708687.273 ops/s
Iteration  18: 2603340.784 ops/s
Iteration  19: 2698599.754 ops/s
Iteration  20: 2736902.668 ops/s
Iteration  21: 2837203.880 ops/s
Iteration  22: 2910967.164 ops/s
Iteration  23: 2866189.446 ops/s
Iteration  24: 2687918.527 ops/s
Iteration  25: 2816786.125 ops/s
Iteration  26: 2849016.867 ops/s
Iteration  27: 2669306.933 ops/s
Iteration  28: 2630030.091 ops/s
Iteration  29: 2613626.109 ops/s
Iteration  30: 2772526.180 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putPair":
  2735886.857 ±(99.9%) 57905.149 ops/s [Average]
  (min, avg, max) = (2603340.784, 2735886.857, 2910967.164), stdev = 86669.708
  CI (99.9%): [2677981.708, 2793792.006] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_putPair  thrpt   30  2735886.857 ± 57905.149  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_rehash_null_collision$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_rehash_null_collision

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20856.894 ops/s
# Warmup Iteration   2: 34340.093 ops/s
# Warmup Iteration   3: 38870.313 ops/s
# Warmup Iteration   4: 36312.494 ops/s
# Warmup Iteration   5: 36370.442 ops/s
# Warmup Iteration   6: 31449.882 ops/s
# Warmup Iteration   7: 36336.110 ops/s
# Warmup Iteration   8: 35942.908 ops/s
# Warmup Iteration   9: 35581.806 ops/s
# Warmup Iteration  10: 36154.565 ops/s
# Warmup Iteration  11: 37641.747 ops/s
# Warmup Iteration  12: 37954.925 ops/s
# Warmup Iteration  13: 37618.990 ops/s
# Warmup Iteration  14: 38129.260 ops/s
# Warmup Iteration  15: 36632.803 ops/s
# Warmup Iteration  16: 37449.513 ops/s
# Warmup Iteration  17: 36676.521 ops/s
# Warmup Iteration  18: 35903.725 ops/s
# Warmup Iteration  19: 35823.564 ops/s
# Warmup Iteration  20: 36852.923 ops/s
# Warmup Iteration  21: 36579.098 ops/s
# Warmup Iteration  22: 36472.836 ops/s
# Warmup Iteration  23: 35783.547 ops/s
# Warmup Iteration  24: 36408.846 ops/s
# Warmup Iteration  25: 36500.109 ops/s
# Warmup Iteration  26: 37904.017 ops/s
# Warmup Iteration  27: 37567.563 ops/s
# Warmup Iteration  28: 37449.285 ops/s
# Warmup Iteration  29: 37177.706 ops/s
# Warmup Iteration  30: 35866.186 ops/s
Iteration   1: 36179.633 ops/s
Iteration   2: 37174.325 ops/s
Iteration   3: 35641.653 ops/s
Iteration   4: 37287.147 ops/s
Iteration   5: 36911.367 ops/s
Iteration   6: 37549.064 ops/s
Iteration   7: 35949.521 ops/s
Iteration   8: 36545.865 ops/s
Iteration   9: 36537.419 ops/s
Iteration  10: 36440.586 ops/s
Iteration  11: 36005.178 ops/s
Iteration  12: 37471.134 ops/s
Iteration  13: 36365.318 ops/s
Iteration  14: 35765.806 ops/s
Iteration  15: 35762.014 ops/s
Iteration  16: 35490.383 ops/s
Iteration  17: 35706.627 ops/s
Iteration  18: 36458.498 ops/s
Iteration  19: 36072.252 ops/s
Iteration  20: 35707.507 ops/s
Iteration  21: 36415.967 ops/s
Iteration  22: 36566.059 ops/s
Iteration  23: 36590.545 ops/s
Iteration  24: 36258.071 ops/s
Iteration  25: 36148.455 ops/s
Iteration  26: 36023.279 ops/s
Iteration  27: 36323.240 ops/s
Iteration  28: 35815.053 ops/s
Iteration  29: 35764.007 ops/s
Iteration  30: 36194.446 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_rehash_null_collision":
  36304.014 ±(99.9%) 365.033 ops/s [Average]
  (min, avg, max) = (35490.383, 36304.014, 37549.064), stdev = 546.365
  CI (99.9%): [35938.981, 36669.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt      Score     Error  Units
HashBiMapInverseTest._Benchmark.benchmark_rehash_null_collision  thrpt   30  36304.014 ± 365.033  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 878309.260 ops/s
# Warmup Iteration   2: 1957148.027 ops/s
# Warmup Iteration   3: 2025832.598 ops/s
# Warmup Iteration   4: 2032207.339 ops/s
# Warmup Iteration   5: 2009571.828 ops/s
# Warmup Iteration   6: 2111450.512 ops/s
# Warmup Iteration   7: 2196577.978 ops/s
# Warmup Iteration   8: 2113841.106 ops/s
# Warmup Iteration   9: 2077372.339 ops/s
# Warmup Iteration  10: 2103443.628 ops/s
# Warmup Iteration  11: 2048479.505 ops/s
# Warmup Iteration  12: 2061348.286 ops/s
# Warmup Iteration  13: 2034020.478 ops/s
# Warmup Iteration  14: 2037303.680 ops/s
# Warmup Iteration  15: 2053662.298 ops/s
# Warmup Iteration  16: 2068821.245 ops/s
# Warmup Iteration  17: 2067637.307 ops/s
# Warmup Iteration  18: 2127763.304 ops/s
# Warmup Iteration  19: 2106299.461 ops/s
# Warmup Iteration  20: 2081360.986 ops/s
# Warmup Iteration  21: 2210425.851 ops/s
# Warmup Iteration  22: 2053884.842 ops/s
# Warmup Iteration  23: 2040486.512 ops/s
# Warmup Iteration  24: 2092670.152 ops/s
# Warmup Iteration  25: 2096538.227 ops/s
# Warmup Iteration  26: 2065718.041 ops/s
# Warmup Iteration  27: 2082536.132 ops/s
# Warmup Iteration  28: 2012338.548 ops/s
# Warmup Iteration  29: 2061296.137 ops/s
# Warmup Iteration  30: 2085163.075 ops/s
Iteration   1: 2135490.174 ops/s
Iteration   2: 2042060.959 ops/s
Iteration   3: 2092151.448 ops/s
Iteration   4: 2072814.866 ops/s
Iteration   5: 2126383.147 ops/s
Iteration   6: 2117056.123 ops/s
Iteration   7: 2159495.859 ops/s
Iteration   8: 2166527.581 ops/s
Iteration   9: 2060888.268 ops/s
Iteration  10: 2045619.490 ops/s
Iteration  11: 2099578.866 ops/s
Iteration  12: 2122047.728 ops/s
Iteration  13: 2149654.609 ops/s
Iteration  14: 2012585.293 ops/s
Iteration  15: 2062083.227 ops/s
Iteration  16: 2079469.913 ops/s
Iteration  17: 2126765.905 ops/s
Iteration  18: 2069013.312 ops/s
Iteration  19: 2048033.184 ops/s
Iteration  20: 2094719.876 ops/s
Iteration  21: 2098107.051 ops/s
Iteration  22: 2132544.130 ops/s
Iteration  23: 2172997.253 ops/s
Iteration  24: 2074280.027 ops/s
Iteration  25: 2059101.736 ops/s
Iteration  26: 2134083.655 ops/s
Iteration  27: 2064077.212 ops/s
Iteration  28: 2041038.208 ops/s
Iteration  29: 2227079.431 ops/s
Iteration  30: 2195111.778 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_reject":
  2102695.344 ±(99.9%) 34054.943 ops/s [Average]
  (min, avg, max) = (2012585.293, 2102695.344, 2227079.431), stdev = 50971.840
  CI (99.9%): [2068640.400, 2136750.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_reject  thrpt   30  2102695.344 ± 34054.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_rejectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_rejectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1278454.478 ops/s
# Warmup Iteration   2: 2790870.887 ops/s
# Warmup Iteration   3: 2163235.403 ops/s
# Warmup Iteration   4: 2677060.561 ops/s
# Warmup Iteration   5: 2649767.798 ops/s
# Warmup Iteration   6: 2643676.911 ops/s
# Warmup Iteration   7: 2669321.444 ops/s
# Warmup Iteration   8: 2562939.092 ops/s
# Warmup Iteration   9: 2614403.815 ops/s
# Warmup Iteration  10: 2596343.496 ops/s
# Warmup Iteration  11: 2596890.377 ops/s
# Warmup Iteration  12: 2660766.142 ops/s
# Warmup Iteration  13: 2570070.830 ops/s
# Warmup Iteration  14: 2583899.442 ops/s
# Warmup Iteration  15: 2671494.839 ops/s
# Warmup Iteration  16: 2678654.950 ops/s
# Warmup Iteration  17: 2604202.824 ops/s
# Warmup Iteration  18: 2677532.820 ops/s
# Warmup Iteration  19: 2817834.521 ops/s
# Warmup Iteration  20: 2617081.130 ops/s
# Warmup Iteration  21: 2713518.704 ops/s
# Warmup Iteration  22: 2719689.045 ops/s
# Warmup Iteration  23: 2720486.980 ops/s
# Warmup Iteration  24: 2671065.714 ops/s
# Warmup Iteration  25: 2632989.599 ops/s
# Warmup Iteration  26: 2696720.756 ops/s
# Warmup Iteration  27: 2764117.499 ops/s
# Warmup Iteration  28: 2571266.644 ops/s
# Warmup Iteration  29: 2640967.783 ops/s
# Warmup Iteration  30: 2604479.224 ops/s
Iteration   1: 2591118.125 ops/s
Iteration   2: 2810111.747 ops/s
Iteration   3: 2683621.431 ops/s
Iteration   4: 2682531.862 ops/s
Iteration   5: 2605849.604 ops/s
Iteration   6: 2709360.526 ops/s
Iteration   7: 2590514.125 ops/s
Iteration   8: 2606583.819 ops/s
Iteration   9: 2581763.632 ops/s
Iteration  10: 2563063.238 ops/s
Iteration  11: 2524730.849 ops/s
Iteration  12: 2577436.460 ops/s
Iteration  13: 2580067.373 ops/s
Iteration  14: 2573749.336 ops/s
Iteration  15: 2635992.835 ops/s
Iteration  16: 2576486.460 ops/s
Iteration  17: 2680190.290 ops/s
Iteration  18: 2558095.805 ops/s
Iteration  19: 2560788.798 ops/s
Iteration  20: 2624108.498 ops/s
Iteration  21: 2657529.864 ops/s
Iteration  22: 2698844.867 ops/s
Iteration  23: 2623138.956 ops/s
Iteration  24: 2675805.158 ops/s
Iteration  25: 2619266.000 ops/s
Iteration  26: 2603573.926 ops/s
Iteration  27: 2579192.196 ops/s
Iteration  28: 2634817.193 ops/s
Iteration  29: 2608699.087 ops/s
Iteration  30: 2523815.223 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_rejectMap":
  2618028.243 ±(99.9%) 40920.692 ops/s [Average]
  (min, avg, max) = (2523815.223, 2618028.243, 2810111.747), stdev = 61248.170
  CI (99.9%): [2577107.551, 2658948.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_rejectMap  thrpt   30  2618028.243 ± 40920.692  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 856146.479 ops/s
# Warmup Iteration   2: 1944169.140 ops/s
# Warmup Iteration   3: 2128751.819 ops/s
# Warmup Iteration   4: 1913005.826 ops/s
# Warmup Iteration   5: 1799377.102 ops/s
# Warmup Iteration   6: 2050936.062 ops/s
# Warmup Iteration   7: 2011475.795 ops/s
# Warmup Iteration   8: 2011439.481 ops/s
# Warmup Iteration   9: 2021369.637 ops/s
# Warmup Iteration  10: 2022637.616 ops/s
# Warmup Iteration  11: 2069690.277 ops/s
# Warmup Iteration  12: 2023518.498 ops/s
# Warmup Iteration  13: 2114845.756 ops/s
# Warmup Iteration  14: 2114935.711 ops/s
# Warmup Iteration  15: 2063893.540 ops/s
# Warmup Iteration  16: 2177525.227 ops/s
# Warmup Iteration  17: 2111680.071 ops/s
# Warmup Iteration  18: 2084712.922 ops/s
# Warmup Iteration  19: 2109778.261 ops/s
# Warmup Iteration  20: 2117467.117 ops/s
# Warmup Iteration  21: 2132819.045 ops/s
# Warmup Iteration  22: 2051498.561 ops/s
# Warmup Iteration  23: 2138319.291 ops/s
# Warmup Iteration  24: 2116098.669 ops/s
# Warmup Iteration  25: 2140307.382 ops/s
# Warmup Iteration  26: 2066478.309 ops/s
# Warmup Iteration  27: 2018443.969 ops/s
# Warmup Iteration  28: 2053027.458 ops/s
# Warmup Iteration  29: 2132819.607 ops/s
# Warmup Iteration  30: 2140105.794 ops/s
Iteration   1: 2071482.719 ops/s
Iteration   2: 2191284.197 ops/s
Iteration   3: 2034532.905 ops/s
Iteration   4: 2141432.976 ops/s
Iteration   5: 2014920.067 ops/s
Iteration   6: 2145870.142 ops/s
Iteration   7: 2169143.260 ops/s
Iteration   8: 2130170.330 ops/s
Iteration   9: 1994795.349 ops/s
Iteration  10: 2159651.550 ops/s
Iteration  11: 2166556.987 ops/s
Iteration  12: 2164100.294 ops/s
Iteration  13: 2228511.362 ops/s
Iteration  14: 2225160.266 ops/s
Iteration  15: 2232863.913 ops/s
Iteration  16: 2078498.897 ops/s
Iteration  17: 2099708.093 ops/s
Iteration  18: 2115815.573 ops/s
Iteration  19: 2194139.915 ops/s
Iteration  20: 2137952.149 ops/s
Iteration  21: 2066473.024 ops/s
Iteration  22: 2099490.037 ops/s
Iteration  23: 2090028.454 ops/s
Iteration  24: 2070553.170 ops/s
Iteration  25: 2112741.837 ops/s
Iteration  26: 2098147.712 ops/s
Iteration  27: 2048469.249 ops/s
Iteration  28: 2130506.192 ops/s
Iteration  29: 2118358.264 ops/s
Iteration  30: 2111162.545 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_rejectWith":
  2121417.381 ±(99.9%) 40533.317 ops/s [Average]
  (min, avg, max) = (1994795.349, 2121417.381, 2232863.913), stdev = 60668.366
  CI (99.9%): [2080884.064, 2161950.698] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_rejectWith  thrpt   30  2121417.381 ± 40533.317  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_rejectWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_rejectWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1556392.726 ops/s
# Warmup Iteration   2: 3500519.933 ops/s
# Warmup Iteration   3: 2878519.573 ops/s
# Warmup Iteration   4: 3508500.272 ops/s
# Warmup Iteration   5: 3633354.066 ops/s
# Warmup Iteration   6: 3460347.514 ops/s
# Warmup Iteration   7: 3545043.145 ops/s
# Warmup Iteration   8: 3587089.442 ops/s
# Warmup Iteration   9: 3519009.310 ops/s
# Warmup Iteration  10: 3551779.216 ops/s
# Warmup Iteration  11: 3449755.913 ops/s
# Warmup Iteration  12: 3639610.266 ops/s
# Warmup Iteration  13: 3549378.398 ops/s
# Warmup Iteration  14: 3465870.073 ops/s
# Warmup Iteration  15: 3478468.142 ops/s
# Warmup Iteration  16: 3703708.241 ops/s
# Warmup Iteration  17: 3644874.175 ops/s
# Warmup Iteration  18: 3505136.754 ops/s
# Warmup Iteration  19: 3446541.001 ops/s
# Warmup Iteration  20: 3496668.724 ops/s
# Warmup Iteration  21: 3531443.753 ops/s
# Warmup Iteration  22: 3485101.686 ops/s
# Warmup Iteration  23: 3585516.583 ops/s
# Warmup Iteration  24: 3479431.241 ops/s
# Warmup Iteration  25: 3594391.815 ops/s
# Warmup Iteration  26: 3537713.296 ops/s
# Warmup Iteration  27: 3486043.895 ops/s
# Warmup Iteration  28: 3477552.218 ops/s
# Warmup Iteration  29: 3519946.983 ops/s
# Warmup Iteration  30: 3497762.100 ops/s
Iteration   1: 3575850.987 ops/s
Iteration   2: 3493810.797 ops/s
Iteration   3: 3455648.138 ops/s
Iteration   4: 3521877.931 ops/s
Iteration   5: 3498498.969 ops/s
Iteration   6: 3662634.774 ops/s
Iteration   7: 3544841.160 ops/s
Iteration   8: 3632027.705 ops/s
Iteration   9: 3558986.584 ops/s
Iteration  10: 3525461.611 ops/s
Iteration  11: 3489999.983 ops/s
Iteration  12: 3501604.010 ops/s
Iteration  13: 3460232.280 ops/s
Iteration  14: 3436004.652 ops/s
Iteration  15: 3477583.208 ops/s
Iteration  16: 3565904.478 ops/s
Iteration  17: 3522605.665 ops/s
Iteration  18: 3548052.221 ops/s
Iteration  19: 3468548.489 ops/s
Iteration  20: 3529370.596 ops/s
Iteration  21: 3548657.444 ops/s
Iteration  22: 3648638.378 ops/s
Iteration  23: 3478250.476 ops/s
Iteration  24: 3586939.616 ops/s
Iteration  25: 3621459.847 ops/s
Iteration  26: 3524576.023 ops/s
Iteration  27: 3444948.985 ops/s
Iteration  28: 3523164.181 ops/s
Iteration  29: 3391124.637 ops/s
Iteration  30: 3504001.587 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_rejectWith_value":
  3524710.180 ±(99.9%) 42712.565 ops/s [Average]
  (min, avg, max) = (3391124.637, 3524710.180, 3662634.774), stdev = 63930.161
  CI (99.9%): [3481997.615, 3567422.745] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_rejectWith_value  thrpt   30  3524710.180 ± 42712.565  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_reject_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_reject_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1060628.590 ops/s
# Warmup Iteration   2: 2350134.483 ops/s
# Warmup Iteration   3: 1980175.327 ops/s
# Warmup Iteration   4: 2303735.748 ops/s
# Warmup Iteration   5: 2364622.530 ops/s
# Warmup Iteration   6: 2306063.042 ops/s
# Warmup Iteration   7: 2344054.348 ops/s
# Warmup Iteration   8: 2324384.266 ops/s
# Warmup Iteration   9: 2330930.129 ops/s
# Warmup Iteration  10: 2324216.854 ops/s
# Warmup Iteration  11: 2337279.811 ops/s
# Warmup Iteration  12: 2384156.281 ops/s
# Warmup Iteration  13: 2398240.517 ops/s
# Warmup Iteration  14: 2371767.998 ops/s
# Warmup Iteration  15: 2408246.627 ops/s
# Warmup Iteration  16: 2320373.809 ops/s
# Warmup Iteration  17: 2344586.410 ops/s
# Warmup Iteration  18: 2328194.473 ops/s
# Warmup Iteration  19: 2331034.164 ops/s
# Warmup Iteration  20: 2317404.555 ops/s
# Warmup Iteration  21: 2293210.986 ops/s
# Warmup Iteration  22: 2401667.355 ops/s
# Warmup Iteration  23: 2360956.326 ops/s
# Warmup Iteration  24: 2376640.414 ops/s
# Warmup Iteration  25: 2362026.474 ops/s
# Warmup Iteration  26: 2337014.843 ops/s
# Warmup Iteration  27: 2280889.066 ops/s
# Warmup Iteration  28: 2368050.599 ops/s
# Warmup Iteration  29: 2404807.686 ops/s
# Warmup Iteration  30: 2337070.266 ops/s
Iteration   1: 2286728.931 ops/s
Iteration   2: 2456685.908 ops/s
Iteration   3: 2334639.503 ops/s
Iteration   4: 2300156.099 ops/s
Iteration   5: 2399021.895 ops/s
Iteration   6: 2278619.834 ops/s
Iteration   7: 2486345.246 ops/s
Iteration   8: 2421917.186 ops/s
Iteration   9: 2465691.600 ops/s
Iteration  10: 2246311.333 ops/s
Iteration  11: 2332616.213 ops/s
Iteration  12: 2295103.090 ops/s
Iteration  13: 2288772.858 ops/s
Iteration  14: 2307621.476 ops/s
Iteration  15: 2363117.075 ops/s
Iteration  16: 2333026.322 ops/s
Iteration  17: 2396011.966 ops/s
Iteration  18: 2370933.614 ops/s
Iteration  19: 2402555.010 ops/s
Iteration  20: 2370553.532 ops/s
Iteration  21: 2401745.136 ops/s
Iteration  22: 2410764.901 ops/s
Iteration  23: 2453260.665 ops/s
Iteration  24: 2427459.347 ops/s
Iteration  25: 2345783.591 ops/s
Iteration  26: 2429383.740 ops/s
Iteration  27: 2303365.156 ops/s
Iteration  28: 2365435.031 ops/s
Iteration  29: 2399678.550 ops/s
Iteration  30: 2290017.942 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_reject_value":
  2365444.092 ±(99.9%) 42840.812 ops/s [Average]
  (min, avg, max) = (2246311.333, 2365444.092, 2486345.246), stdev = 64122.115
  CI (99.9%): [2322603.280, 2408284.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_reject_value  thrpt   30  2365444.092 ± 42840.812  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 388806.763 ops/s
# Warmup Iteration   2: 935282.083 ops/s
# Warmup Iteration   3: 920861.332 ops/s
# Warmup Iteration   4: 805679.284 ops/s
# Warmup Iteration   5: 903794.018 ops/s
# Warmup Iteration   6: 918043.610 ops/s
# Warmup Iteration   7: 920002.833 ops/s
# Warmup Iteration   8: 923759.617 ops/s
# Warmup Iteration   9: 959405.125 ops/s
# Warmup Iteration  10: 916721.339 ops/s
# Warmup Iteration  11: 923770.011 ops/s
# Warmup Iteration  12: 928504.779 ops/s
# Warmup Iteration  13: 916374.691 ops/s
# Warmup Iteration  14: 938828.903 ops/s
# Warmup Iteration  15: 915405.721 ops/s
# Warmup Iteration  16: 916206.530 ops/s
# Warmup Iteration  17: 910361.465 ops/s
# Warmup Iteration  18: 908972.483 ops/s
# Warmup Iteration  19: 941229.745 ops/s
# Warmup Iteration  20: 894841.877 ops/s
# Warmup Iteration  21: 906130.785 ops/s
# Warmup Iteration  22: 912799.760 ops/s
# Warmup Iteration  23: 919168.198 ops/s
# Warmup Iteration  24: 922463.997 ops/s
# Warmup Iteration  25: 912969.284 ops/s
# Warmup Iteration  26: 943585.417 ops/s
# Warmup Iteration  27: 970410.667 ops/s
# Warmup Iteration  28: 917941.279 ops/s
# Warmup Iteration  29: 915500.563 ops/s
# Warmup Iteration  30: 970747.455 ops/s
Iteration   1: 932515.499 ops/s
Iteration   2: 987739.834 ops/s
Iteration   3: 992636.145 ops/s
Iteration   4: 994396.848 ops/s
Iteration   5: 992844.565 ops/s
Iteration   6: 991303.706 ops/s
Iteration   7: 950025.188 ops/s
Iteration   8: 961657.346 ops/s
Iteration   9: 994382.536 ops/s
Iteration  10: 990953.747 ops/s
Iteration  11: 993961.859 ops/s
Iteration  12: 911866.415 ops/s
Iteration  13: 906600.763 ops/s
Iteration  14: 937642.505 ops/s
Iteration  15: 990410.088 ops/s
Iteration  16: 914416.141 ops/s
Iteration  17: 916452.399 ops/s
Iteration  18: 942142.214 ops/s
Iteration  19: 939111.683 ops/s
Iteration  20: 907508.255 ops/s
Iteration  21: 955161.200 ops/s
Iteration  22: 993771.781 ops/s
Iteration  23: 944717.791 ops/s
Iteration  24: 916600.311 ops/s
Iteration  25: 924998.659 ops/s
Iteration  26: 926602.401 ops/s
Iteration  27: 915569.127 ops/s
Iteration  28: 903059.465 ops/s
Iteration  29: 909428.394 ops/s
Iteration  30: 921899.795 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_remove":
  948679.222 ±(99.9%) 22979.851 ops/s [Average]
  (min, avg, max) = (903059.465, 948679.222, 994396.848), stdev = 34395.162
  CI (99.9%): [925699.371, 971659.073] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_remove  thrpt   30  948679.222 ± 22979.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeAllFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeAllFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687670.663 ops/s
# Warmup Iteration   2: 1751999.412 ops/s
# Warmup Iteration   3: 1911002.559 ops/s
# Warmup Iteration   4: 1502125.185 ops/s
# Warmup Iteration   5: 1879589.700 ops/s
# Warmup Iteration   6: 1960155.499 ops/s
# Warmup Iteration   7: 1919529.664 ops/s
# Warmup Iteration   8: 1917588.187 ops/s
# Warmup Iteration   9: 1816523.653 ops/s
# Warmup Iteration  10: 1784669.092 ops/s
# Warmup Iteration  11: 1952307.671 ops/s
# Warmup Iteration  12: 1881625.850 ops/s
# Warmup Iteration  13: 1809566.653 ops/s
# Warmup Iteration  14: 1782117.369 ops/s
# Warmup Iteration  15: 1805462.437 ops/s
# Warmup Iteration  16: 1784607.935 ops/s
# Warmup Iteration  17: 1925384.577 ops/s
# Warmup Iteration  18: 1877418.217 ops/s
# Warmup Iteration  19: 1822861.521 ops/s
# Warmup Iteration  20: 1823047.566 ops/s
# Warmup Iteration  21: 1820335.005 ops/s
# Warmup Iteration  22: 1850132.963 ops/s
# Warmup Iteration  23: 1808413.809 ops/s
# Warmup Iteration  24: 1780291.609 ops/s
# Warmup Iteration  25: 1808218.083 ops/s
# Warmup Iteration  26: 1871360.502 ops/s
# Warmup Iteration  27: 1844079.071 ops/s
# Warmup Iteration  28: 1797217.145 ops/s
# Warmup Iteration  29: 1789456.136 ops/s
# Warmup Iteration  30: 1789498.211 ops/s
Iteration   1: 1802316.137 ops/s
Iteration   2: 1807253.497 ops/s
Iteration   3: 1764021.357 ops/s
Iteration   4: 1757337.841 ops/s
Iteration   5: 1795059.914 ops/s
Iteration   6: 1786755.765 ops/s
Iteration   7: 1859252.163 ops/s
Iteration   8: 1802874.713 ops/s
Iteration   9: 1787184.544 ops/s
Iteration  10: 1773648.292 ops/s
Iteration  11: 1807232.051 ops/s
Iteration  12: 1811263.273 ops/s
Iteration  13: 1925177.271 ops/s
Iteration  14: 1891713.061 ops/s
Iteration  15: 1848327.535 ops/s
Iteration  16: 1970538.224 ops/s
Iteration  17: 1894538.147 ops/s
Iteration  18: 1798244.384 ops/s
Iteration  19: 1782733.684 ops/s
Iteration  20: 1782240.717 ops/s
Iteration  21: 1795389.956 ops/s
Iteration  22: 1788408.390 ops/s
Iteration  23: 1771638.900 ops/s
Iteration  24: 1808951.672 ops/s
Iteration  25: 1832506.416 ops/s
Iteration  26: 1822534.618 ops/s
Iteration  27: 1864196.187 ops/s
Iteration  28: 1815479.822 ops/s
Iteration  29: 1803520.844 ops/s
Iteration  30: 1804154.267 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeAllFromEntrySet":
  1818483.121 ±(99.9%) 32761.026 ops/s [Average]
  (min, avg, max) = (1757337.841, 1818483.121, 1970538.224), stdev = 49035.166
  CI (99.9%): [1785722.095, 1851244.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_removeAllFromEntrySet  thrpt   30  1818483.121 ± 32761.026  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeAllFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeAllFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1568601.989 ops/s
# Warmup Iteration   2: 3804177.920 ops/s
# Warmup Iteration   3: 3705534.445 ops/s
# Warmup Iteration   4: 3015809.571 ops/s
# Warmup Iteration   5: 3679881.376 ops/s
# Warmup Iteration   6: 3905766.388 ops/s
# Warmup Iteration   7: 3907198.520 ops/s
# Warmup Iteration   8: 3840805.276 ops/s
# Warmup Iteration   9: 3747248.641 ops/s
# Warmup Iteration  10: 3841543.793 ops/s
# Warmup Iteration  11: 3808369.920 ops/s
# Warmup Iteration  12: 3822921.800 ops/s
# Warmup Iteration  13: 3802255.771 ops/s
# Warmup Iteration  14: 3819094.307 ops/s
# Warmup Iteration  15: 3757277.290 ops/s
# Warmup Iteration  16: 3729256.213 ops/s
# Warmup Iteration  17: 3714510.149 ops/s
# Warmup Iteration  18: 3634446.925 ops/s
# Warmup Iteration  19: 3765216.442 ops/s
# Warmup Iteration  20: 3820384.329 ops/s
# Warmup Iteration  21: 3767194.393 ops/s
# Warmup Iteration  22: 3718379.112 ops/s
# Warmup Iteration  23: 3702576.180 ops/s
# Warmup Iteration  24: 3720119.177 ops/s
# Warmup Iteration  25: 3669615.118 ops/s
# Warmup Iteration  26: 3696172.614 ops/s
# Warmup Iteration  27: 3700750.653 ops/s
# Warmup Iteration  28: 3771455.826 ops/s
# Warmup Iteration  29: 3785131.242 ops/s
# Warmup Iteration  30: 3767541.015 ops/s
Iteration   1: 3751952.694 ops/s
Iteration   2: 3874985.782 ops/s
Iteration   3: 3974059.874 ops/s
Iteration   4: 3749171.342 ops/s
Iteration   5: 3654947.942 ops/s
Iteration   6: 3859352.304 ops/s
Iteration   7: 3634944.264 ops/s
Iteration   8: 3638725.234 ops/s
Iteration   9: 3747485.079 ops/s
Iteration  10: 3793402.863 ops/s
Iteration  11: 3751059.338 ops/s
Iteration  12: 4003115.107 ops/s
Iteration  13: 4064886.627 ops/s
Iteration  14: 3880932.023 ops/s
Iteration  15: 3946278.659 ops/s
Iteration  16: 4062465.051 ops/s
Iteration  17: 3996702.019 ops/s
Iteration  18: 3734807.016 ops/s
Iteration  19: 3725556.310 ops/s
Iteration  20: 3825661.474 ops/s
Iteration  21: 3863319.107 ops/s
Iteration  22: 3835883.875 ops/s
Iteration  23: 3911781.301 ops/s
Iteration  24: 4052064.549 ops/s
Iteration  25: 3986470.929 ops/s
Iteration  26: 3662432.525 ops/s
Iteration  27: 3690732.763 ops/s
Iteration  28: 3777756.005 ops/s
Iteration  29: 3852325.198 ops/s
Iteration  30: 3800209.298 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeAllFromKeySet":
  3836782.219 ±(99.9%) 86919.442 ops/s [Average]
  (min, avg, max) = (3634944.264, 3836782.219, 4064886.627), stdev = 130096.939
  CI (99.9%): [3749862.776, 3923701.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_removeAllFromKeySet  thrpt   30  3836782.219 ± 86919.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeAllFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeAllFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1461583.201 ops/s
# Warmup Iteration   2: 3838581.523 ops/s
# Warmup Iteration   3: 3801656.960 ops/s
# Warmup Iteration   4: 3266593.366 ops/s
# Warmup Iteration   5: 3831870.145 ops/s
# Warmup Iteration   6: 3792438.898 ops/s
# Warmup Iteration   7: 3955424.964 ops/s
# Warmup Iteration   8: 4080057.349 ops/s
# Warmup Iteration   9: 3949147.521 ops/s
# Warmup Iteration  10: 4003723.243 ops/s
# Warmup Iteration  11: 3785624.292 ops/s
# Warmup Iteration  12: 3873405.285 ops/s
# Warmup Iteration  13: 3953864.333 ops/s
# Warmup Iteration  14: 3962909.768 ops/s
# Warmup Iteration  15: 3934724.821 ops/s
# Warmup Iteration  16: 3800883.595 ops/s
# Warmup Iteration  17: 3807503.037 ops/s
# Warmup Iteration  18: 3788663.133 ops/s
# Warmup Iteration  19: 3746054.863 ops/s
# Warmup Iteration  20: 3768887.034 ops/s
# Warmup Iteration  21: 3778908.648 ops/s
# Warmup Iteration  22: 3884514.724 ops/s
# Warmup Iteration  23: 3901445.536 ops/s
# Warmup Iteration  24: 3937006.780 ops/s
# Warmup Iteration  25: 3815737.646 ops/s
# Warmup Iteration  26: 3802277.742 ops/s
# Warmup Iteration  27: 3804402.629 ops/s
# Warmup Iteration  28: 3831957.937 ops/s
# Warmup Iteration  29: 3814984.337 ops/s
# Warmup Iteration  30: 3870537.654 ops/s
Iteration   1: 3852860.981 ops/s
Iteration   2: 3762187.859 ops/s
Iteration   3: 3818430.578 ops/s
Iteration   4: 4019235.330 ops/s
Iteration   5: 3909897.628 ops/s
Iteration   6: 3915947.017 ops/s
Iteration   7: 3845397.167 ops/s
Iteration   8: 4152538.858 ops/s
Iteration   9: 3893793.986 ops/s
Iteration  10: 4130884.380 ops/s
Iteration  11: 3939633.463 ops/s
Iteration  12: 3772000.647 ops/s
Iteration  13: 3831478.352 ops/s
Iteration  14: 3883491.436 ops/s
Iteration  15: 3825448.387 ops/s
Iteration  16: 3965731.327 ops/s
Iteration  17: 3832930.417 ops/s
Iteration  18: 3836542.430 ops/s
Iteration  19: 3848573.576 ops/s
Iteration  20: 3811370.513 ops/s
Iteration  21: 3856393.250 ops/s
Iteration  22: 3731398.306 ops/s
Iteration  23: 3856450.803 ops/s
Iteration  24: 3853661.630 ops/s
Iteration  25: 3755456.463 ops/s
Iteration  26: 3840524.393 ops/s
Iteration  27: 4059223.755 ops/s
Iteration  28: 4164128.729 ops/s
Iteration  29: 4144468.610 ops/s
Iteration  30: 4055694.801 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeAllFromValues":
  3905525.836 ±(99.9%) 83352.649 ops/s [Average]
  (min, avg, max) = (3731398.306, 3905525.836, 4164128.729), stdev = 124758.330
  CI (99.9%): [3822173.187, 3988878.485] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_removeAllFromValues  thrpt   30  3905525.836 ± 83352.649  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeAllKeys$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeAllKeys

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 246009.856 ops/s
# Warmup Iteration   2: 294041.520 ops/s
# Warmup Iteration   3: 418551.276 ops/s
# Warmup Iteration   4: 399031.024 ops/s
# Warmup Iteration   5: 398409.223 ops/s
# Warmup Iteration   6: 403766.653 ops/s
# Warmup Iteration   7: 394963.706 ops/s
# Warmup Iteration   8: 398300.843 ops/s
# Warmup Iteration   9: 332523.693 ops/s
# Warmup Iteration  10: 391478.502 ops/s
# Warmup Iteration  11: 395379.188 ops/s
# Warmup Iteration  12: 409434.446 ops/s
# Warmup Iteration  13: 411956.918 ops/s
# Warmup Iteration  14: 430533.542 ops/s
# Warmup Iteration  15: 425047.185 ops/s
# Warmup Iteration  16: 385148.258 ops/s
# Warmup Iteration  17: 405226.754 ops/s
# Warmup Iteration  18: 419466.628 ops/s
# Warmup Iteration  19: 397643.284 ops/s
# Warmup Iteration  20: 401481.902 ops/s
# Warmup Iteration  21: 411693.743 ops/s
# Warmup Iteration  22: 400265.605 ops/s
# Warmup Iteration  23: 394804.248 ops/s
# Warmup Iteration  24: 410761.423 ops/s
# Warmup Iteration  25: 414758.313 ops/s
# Warmup Iteration  26: 432330.074 ops/s
# Warmup Iteration  27: 419992.660 ops/s
# Warmup Iteration  28: 401616.542 ops/s
# Warmup Iteration  29: 402703.247 ops/s
# Warmup Iteration  30: 403845.005 ops/s
Iteration   1: 408511.857 ops/s
Iteration   2: 439146.890 ops/s
Iteration   3: 423575.492 ops/s
Iteration   4: 402812.617 ops/s
Iteration   5: 424126.419 ops/s
Iteration   6: 426356.513 ops/s
Iteration   7: 441282.847 ops/s
Iteration   8: 431535.577 ops/s
Iteration   9: 393077.052 ops/s
Iteration  10: 395296.737 ops/s
Iteration  11: 422083.216 ops/s
Iteration  12: 404680.353 ops/s
Iteration  13: 403353.250 ops/s
Iteration  14: 412675.070 ops/s
Iteration  15: 439666.580 ops/s
Iteration  16: 427306.868 ops/s
Iteration  17: 406798.685 ops/s
Iteration  18: 415256.115 ops/s
Iteration  19: 402497.820 ops/s
Iteration  20: 405453.117 ops/s
Iteration  21: 397612.015 ops/s
Iteration  22: 405537.984 ops/s
Iteration  23: 402169.181 ops/s
Iteration  24: 398638.663 ops/s
Iteration  25: 389995.697 ops/s
Iteration  26: 402960.243 ops/s
Iteration  27: 407590.872 ops/s
Iteration  28: 396385.799 ops/s
Iteration  29: 407094.369 ops/s
Iteration  30: 400177.626 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeAllKeys":
  411121.851 ±(99.9%) 9683.221 ops/s [Average]
  (min, avg, max) = (389995.697, 411121.851, 441282.847), stdev = 14493.390
  CI (99.9%): [401438.630, 420805.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_removeAllKeys  thrpt   30  411121.851 ± 9683.221  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 751443.357 ops/s
# Warmup Iteration   2: 1960962.926 ops/s
# Warmup Iteration   3: 1870121.104 ops/s
# Warmup Iteration   4: 1544476.279 ops/s
# Warmup Iteration   5: 1899555.516 ops/s
# Warmup Iteration   6: 1913990.972 ops/s
# Warmup Iteration   7: 1958611.822 ops/s
# Warmup Iteration   8: 1955128.075 ops/s
# Warmup Iteration   9: 1955686.022 ops/s
# Warmup Iteration  10: 1926249.500 ops/s
# Warmup Iteration  11: 1972131.190 ops/s
# Warmup Iteration  12: 1981563.601 ops/s
# Warmup Iteration  13: 1939050.826 ops/s
# Warmup Iteration  14: 1902009.688 ops/s
# Warmup Iteration  15: 1906390.324 ops/s
# Warmup Iteration  16: 1924973.979 ops/s
# Warmup Iteration  17: 1933084.623 ops/s
# Warmup Iteration  18: 1960053.878 ops/s
# Warmup Iteration  19: 2034774.413 ops/s
# Warmup Iteration  20: 2027775.242 ops/s
# Warmup Iteration  21: 1985499.498 ops/s
# Warmup Iteration  22: 1948193.273 ops/s
# Warmup Iteration  23: 1952595.839 ops/s
# Warmup Iteration  24: 1959155.544 ops/s
# Warmup Iteration  25: 1880627.418 ops/s
# Warmup Iteration  26: 1945990.154 ops/s
# Warmup Iteration  27: 1911677.155 ops/s
# Warmup Iteration  28: 2033595.180 ops/s
# Warmup Iteration  29: 2055935.936 ops/s
# Warmup Iteration  30: 2015841.130 ops/s
Iteration   1: 2074795.244 ops/s
Iteration   2: 2008058.277 ops/s
Iteration   3: 1881983.508 ops/s
Iteration   4: 1904383.284 ops/s
Iteration   5: 1935066.023 ops/s
Iteration   6: 2068909.133 ops/s
Iteration   7: 2082074.067 ops/s
Iteration   8: 1973312.436 ops/s
Iteration   9: 2013818.152 ops/s
Iteration  10: 1995596.183 ops/s
Iteration  11: 2081164.418 ops/s
Iteration  12: 1937930.592 ops/s
Iteration  13: 1929368.404 ops/s
Iteration  14: 1943246.649 ops/s
Iteration  15: 1898739.400 ops/s
Iteration  16: 1975535.118 ops/s
Iteration  17: 2005341.647 ops/s
Iteration  18: 2049742.815 ops/s
Iteration  19: 1935479.986 ops/s
Iteration  20: 1926205.506 ops/s
Iteration  21: 1911181.301 ops/s
Iteration  22: 1986912.613 ops/s
Iteration  23: 2067481.234 ops/s
Iteration  24: 2008436.186 ops/s
Iteration  25: 1950538.673 ops/s
Iteration  26: 1921729.383 ops/s
Iteration  27: 1892090.080 ops/s
Iteration  28: 1988880.550 ops/s
Iteration  29: 1880622.206 ops/s
Iteration  30: 1932837.941 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeFromEntrySet":
  1972048.700 ±(99.9%) 42130.463 ops/s [Average]
  (min, avg, max) = (1880622.206, 1972048.700, 2082074.067), stdev = 63058.898
  CI (99.9%): [1929918.238, 2014179.163] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_removeFromEntrySet  thrpt   30  1972048.700 ± 42130.463  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1737446.026 ops/s
# Warmup Iteration   2: 4350279.044 ops/s
# Warmup Iteration   3: 4365639.656 ops/s
# Warmup Iteration   4: 3648557.677 ops/s
# Warmup Iteration   5: 4533018.537 ops/s
# Warmup Iteration   6: 4550023.931 ops/s
# Warmup Iteration   7: 4424847.546 ops/s
# Warmup Iteration   8: 4263609.739 ops/s
# Warmup Iteration   9: 4334542.116 ops/s
# Warmup Iteration  10: 4495530.288 ops/s
# Warmup Iteration  11: 4306858.824 ops/s
# Warmup Iteration  12: 4344382.091 ops/s
# Warmup Iteration  13: 4505448.883 ops/s
# Warmup Iteration  14: 4615902.643 ops/s
# Warmup Iteration  15: 4269318.127 ops/s
# Warmup Iteration  16: 4218829.273 ops/s
# Warmup Iteration  17: 4338780.389 ops/s
# Warmup Iteration  18: 4431604.351 ops/s
# Warmup Iteration  19: 4329560.918 ops/s
# Warmup Iteration  20: 4431265.726 ops/s
# Warmup Iteration  21: 4470351.166 ops/s
# Warmup Iteration  22: 4403139.316 ops/s
# Warmup Iteration  23: 4425632.492 ops/s
# Warmup Iteration  24: 4271465.188 ops/s
# Warmup Iteration  25: 4427511.918 ops/s
# Warmup Iteration  26: 4441028.930 ops/s
# Warmup Iteration  27: 4311049.180 ops/s
# Warmup Iteration  28: 4289049.727 ops/s
# Warmup Iteration  29: 4399883.009 ops/s
# Warmup Iteration  30: 4360644.738 ops/s
Iteration   1: 4533310.316 ops/s
Iteration   2: 4390972.186 ops/s
Iteration   3: 4367569.589 ops/s
Iteration   4: 4299388.893 ops/s
Iteration   5: 4247045.837 ops/s
Iteration   6: 4166674.972 ops/s
Iteration   7: 4237394.320 ops/s
Iteration   8: 4207382.333 ops/s
Iteration   9: 4237990.657 ops/s
Iteration  10: 4416756.905 ops/s
Iteration  11: 4257036.484 ops/s
Iteration  12: 4547529.220 ops/s
Iteration  13: 4469785.367 ops/s
Iteration  14: 4424081.155 ops/s
Iteration  15: 4236544.349 ops/s
Iteration  16: 4111980.370 ops/s
Iteration  17: 4389806.216 ops/s
Iteration  18: 4482690.341 ops/s
Iteration  19: 4318671.928 ops/s
Iteration  20: 4261748.817 ops/s
Iteration  21: 4212851.749 ops/s
Iteration  22: 4301614.762 ops/s
Iteration  23: 4600917.008 ops/s
Iteration  24: 4284297.555 ops/s
Iteration  25: 4296146.794 ops/s
Iteration  26: 4246756.200 ops/s
Iteration  27: 4247998.061 ops/s
Iteration  28: 4260020.413 ops/s
Iteration  29: 4264345.036 ops/s
Iteration  30: 4610537.032 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeFromKeySet":
  4330994.829 ±(99.9%) 86154.696 ops/s [Average]
  (min, avg, max) = (4111980.370, 4330994.829, 4610537.032), stdev = 128952.304
  CI (99.9%): [4244840.132, 4417149.525] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_removeFromKeySet  thrpt   30  4330994.829 ± 86154.696  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1832479.274 ops/s
# Warmup Iteration   2: 4484791.261 ops/s
# Warmup Iteration   3: 4591116.527 ops/s
# Warmup Iteration   4: 3758310.683 ops/s
# Warmup Iteration   5: 4650246.347 ops/s
# Warmup Iteration   6: 4671543.076 ops/s
# Warmup Iteration   7: 4478461.194 ops/s
# Warmup Iteration   8: 4340243.431 ops/s
# Warmup Iteration   9: 4379873.780 ops/s
# Warmup Iteration  10: 4346767.729 ops/s
# Warmup Iteration  11: 4557733.198 ops/s
# Warmup Iteration  12: 4504017.670 ops/s
# Warmup Iteration  13: 4543052.272 ops/s
# Warmup Iteration  14: 4431634.150 ops/s
# Warmup Iteration  15: 4449650.140 ops/s
# Warmup Iteration  16: 4346255.320 ops/s
# Warmup Iteration  17: 4415674.115 ops/s
# Warmup Iteration  18: 4572692.074 ops/s
# Warmup Iteration  19: 4555030.709 ops/s
# Warmup Iteration  20: 4401761.573 ops/s
# Warmup Iteration  21: 4448298.752 ops/s
# Warmup Iteration  22: 4524904.036 ops/s
# Warmup Iteration  23: 4588755.065 ops/s
# Warmup Iteration  24: 4262342.850 ops/s
# Warmup Iteration  25: 4518377.760 ops/s
# Warmup Iteration  26: 4427983.529 ops/s
# Warmup Iteration  27: 4370475.729 ops/s
# Warmup Iteration  28: 4351610.193 ops/s
# Warmup Iteration  29: 4225742.533 ops/s
# Warmup Iteration  30: 4210722.308 ops/s
Iteration   1: 4228262.797 ops/s
Iteration   2: 4216054.053 ops/s
Iteration   3: 4348210.580 ops/s
Iteration   4: 4434745.623 ops/s
Iteration   5: 4254713.048 ops/s
Iteration   6: 4330132.985 ops/s
Iteration   7: 4179516.682 ops/s
Iteration   8: 4224692.191 ops/s
Iteration   9: 4385454.099 ops/s
Iteration  10: 4347710.951 ops/s
Iteration  11: 4204396.705 ops/s
Iteration  12: 4259565.450 ops/s
Iteration  13: 4239958.677 ops/s
Iteration  14: 4594550.901 ops/s
Iteration  15: 4286588.449 ops/s
Iteration  16: 4242943.694 ops/s
Iteration  17: 4667207.836 ops/s
Iteration  18: 4482252.874 ops/s
Iteration  19: 4422638.425 ops/s
Iteration  20: 4564089.572 ops/s
Iteration  21: 4307380.635 ops/s
Iteration  22: 4228613.849 ops/s
Iteration  23: 4374631.479 ops/s
Iteration  24: 4241796.164 ops/s
Iteration  25: 4321804.712 ops/s
Iteration  26: 4195828.503 ops/s
Iteration  27: 4303154.256 ops/s
Iteration  28: 4429915.092 ops/s
Iteration  29: 4277139.268 ops/s
Iteration  30: 4289906.064 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeFromValues":
  4329461.854 ±(99.9%) 82269.805 ops/s [Average]
  (min, avg, max) = (4179516.682, 4329461.854, 4667207.836), stdev = 123137.581
  CI (99.9%): [4247192.048, 4411731.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_removeFromValues  thrpt   30  4329461.854 ± 82269.805  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 242433.701 ops/s
# Warmup Iteration   2: 427642.990 ops/s
# Warmup Iteration   3: 471103.507 ops/s
# Warmup Iteration   4: 479709.199 ops/s
# Warmup Iteration   5: 503477.638 ops/s
# Warmup Iteration   6: 394526.836 ops/s
# Warmup Iteration   7: 474448.697 ops/s
# Warmup Iteration   8: 480112.354 ops/s
# Warmup Iteration   9: 478874.827 ops/s
# Warmup Iteration  10: 481372.385 ops/s
# Warmup Iteration  11: 479126.333 ops/s
# Warmup Iteration  12: 488761.108 ops/s
# Warmup Iteration  13: 482318.544 ops/s
# Warmup Iteration  14: 479438.986 ops/s
# Warmup Iteration  15: 475712.673 ops/s
# Warmup Iteration  16: 482131.145 ops/s
# Warmup Iteration  17: 498177.495 ops/s
# Warmup Iteration  18: 483210.219 ops/s
# Warmup Iteration  19: 484418.687 ops/s
# Warmup Iteration  20: 486952.614 ops/s
# Warmup Iteration  21: 480946.196 ops/s
# Warmup Iteration  22: 482115.013 ops/s
# Warmup Iteration  23: 474825.296 ops/s
# Warmup Iteration  24: 481019.529 ops/s
# Warmup Iteration  25: 489308.053 ops/s
# Warmup Iteration  26: 483197.946 ops/s
# Warmup Iteration  27: 505264.395 ops/s
# Warmup Iteration  28: 491608.116 ops/s
# Warmup Iteration  29: 483704.240 ops/s
# Warmup Iteration  30: 485759.850 ops/s
Iteration   1: 479824.837 ops/s
Iteration   2: 489395.882 ops/s
Iteration   3: 485275.898 ops/s
Iteration   4: 469134.796 ops/s
Iteration   5: 496540.482 ops/s
Iteration   6: 499020.761 ops/s
Iteration   7: 496879.311 ops/s
Iteration   8: 482751.492 ops/s
Iteration   9: 483600.615 ops/s
Iteration  10: 491255.605 ops/s
Iteration  11: 472633.869 ops/s
Iteration  12: 478784.781 ops/s
Iteration  13: 479694.776 ops/s
Iteration  14: 475405.471 ops/s
Iteration  15: 499594.368 ops/s
Iteration  16: 477804.999 ops/s
Iteration  17: 484491.146 ops/s
Iteration  18: 479142.257 ops/s
Iteration  19: 475936.452 ops/s
Iteration  20: 469856.496 ops/s
Iteration  21: 480839.645 ops/s
Iteration  22: 482781.988 ops/s
Iteration  23: 483959.704 ops/s
Iteration  24: 486483.186 ops/s
Iteration  25: 493900.731 ops/s
Iteration  26: 487640.021 ops/s
Iteration  27: 486817.774 ops/s
Iteration  28: 476535.198 ops/s
Iteration  29: 499798.383 ops/s
Iteration  30: 480507.767 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeIf":
  484209.623 ±(99.9%) 5745.406 ops/s [Average]
  (min, avg, max) = (469134.796, 484209.623, 499798.383), stdev = 8599.454
  CI (99.9%): [478464.217, 489955.029] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_removeIf  thrpt   30  484209.623 ± 5745.406  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2138824.578 ops/s
# Warmup Iteration   2: 5335146.972 ops/s
# Warmup Iteration   3: 4676417.534 ops/s
# Warmup Iteration   4: 5431037.575 ops/s
# Warmup Iteration   5: 5572065.249 ops/s
# Warmup Iteration   6: 5356828.276 ops/s
# Warmup Iteration   7: 5431278.024 ops/s
# Warmup Iteration   8: 5521697.072 ops/s
# Warmup Iteration   9: 5604398.125 ops/s
# Warmup Iteration  10: 5525630.245 ops/s
# Warmup Iteration  11: 5555282.814 ops/s
# Warmup Iteration  12: 5327147.588 ops/s
# Warmup Iteration  13: 5439224.772 ops/s
# Warmup Iteration  14: 5389896.693 ops/s
# Warmup Iteration  15: 5315447.607 ops/s
# Warmup Iteration  16: 5310383.361 ops/s
# Warmup Iteration  17: 5369428.990 ops/s
# Warmup Iteration  18: 5237491.707 ops/s
# Warmup Iteration  19: 5331223.648 ops/s
# Warmup Iteration  20: 5400127.761 ops/s
# Warmup Iteration  21: 5392760.457 ops/s
# Warmup Iteration  22: 5328279.281 ops/s
# Warmup Iteration  23: 5100620.638 ops/s
# Warmup Iteration  24: 5171327.916 ops/s
# Warmup Iteration  25: 5172257.740 ops/s
# Warmup Iteration  26: 5383641.628 ops/s
# Warmup Iteration  27: 5359692.267 ops/s
# Warmup Iteration  28: 5299920.565 ops/s
# Warmup Iteration  29: 5634282.564 ops/s
# Warmup Iteration  30: 5505675.907 ops/s
Iteration   1: 5669417.948 ops/s
Iteration   2: 5686292.412 ops/s
Iteration   3: 5312708.187 ops/s
Iteration   4: 5027974.085 ops/s
Iteration   5: 5127640.382 ops/s
Iteration   6: 5078548.920 ops/s
Iteration   7: 5473654.634 ops/s
Iteration   8: 5608727.656 ops/s
Iteration   9: 5599033.205 ops/s
Iteration  10: 5404768.677 ops/s
Iteration  11: 5065432.902 ops/s
Iteration  12: 5426608.388 ops/s
Iteration  13: 5530772.474 ops/s
Iteration  14: 5435880.087 ops/s
Iteration  15: 5249954.612 ops/s
Iteration  16: 5444461.413 ops/s
Iteration  17: 5220927.279 ops/s
Iteration  18: 5198515.420 ops/s
Iteration  19: 5234488.406 ops/s
Iteration  20: 5189531.507 ops/s
Iteration  21: 5136312.334 ops/s
Iteration  22: 5389074.718 ops/s
Iteration  23: 5484739.131 ops/s
Iteration  24: 5450731.246 ops/s
Iteration  25: 5561676.435 ops/s
Iteration  26: 5391165.226 ops/s
Iteration  27: 5153596.248 ops/s
Iteration  28: 5166785.093 ops/s
Iteration  29: 5295291.739 ops/s
Iteration  30: 5320733.874 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeKey":
  5344514.821 ±(99.9%) 124820.193 ops/s [Average]
  (min, avg, max) = (5027974.085, 5344514.821, 5686292.412), stdev = 186825.003
  CI (99.9%): [5219694.628, 5469335.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
HashBiMapInverseTest._Benchmark.benchmark_removeKey  thrpt   30  5344514.821 ± 124820.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeNullFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeNullFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 515192.332 ops/s
# Warmup Iteration   2: 1153082.825 ops/s
# Warmup Iteration   3: 1187394.023 ops/s
# Warmup Iteration   4: 1022735.815 ops/s
# Warmup Iteration   5: 1156168.646 ops/s
# Warmup Iteration   6: 1125202.588 ops/s
# Warmup Iteration   7: 1144738.819 ops/s
# Warmup Iteration   8: 1122762.472 ops/s
# Warmup Iteration   9: 1119083.414 ops/s
# Warmup Iteration  10: 1173873.651 ops/s
# Warmup Iteration  11: 1169165.965 ops/s
# Warmup Iteration  12: 1211919.037 ops/s
# Warmup Iteration  13: 1183417.250 ops/s
# Warmup Iteration  14: 1156806.709 ops/s
# Warmup Iteration  15: 1121257.273 ops/s
# Warmup Iteration  16: 1154861.770 ops/s
# Warmup Iteration  17: 1172830.869 ops/s
# Warmup Iteration  18: 1190136.353 ops/s
# Warmup Iteration  19: 1172309.072 ops/s
# Warmup Iteration  20: 1235836.735 ops/s
# Warmup Iteration  21: 1233757.501 ops/s
# Warmup Iteration  22: 1144947.009 ops/s
# Warmup Iteration  23: 1166805.526 ops/s
# Warmup Iteration  24: 1190869.526 ops/s
# Warmup Iteration  25: 1165937.301 ops/s
# Warmup Iteration  26: 1189565.785 ops/s
# Warmup Iteration  27: 1183063.416 ops/s
# Warmup Iteration  28: 1150333.602 ops/s
# Warmup Iteration  29: 1147892.082 ops/s
# Warmup Iteration  30: 1141804.080 ops/s
Iteration   1: 1148393.946 ops/s
Iteration   2: 1177387.629 ops/s
Iteration   3: 1149508.701 ops/s
Iteration   4: 1117959.737 ops/s
Iteration   5: 1137852.479 ops/s
Iteration   6: 1143640.138 ops/s
Iteration   7: 1157889.861 ops/s
Iteration   8: 1158173.253 ops/s
Iteration   9: 1130099.272 ops/s
Iteration  10: 1134433.572 ops/s
Iteration  11: 1181896.935 ops/s
Iteration  12: 1135881.799 ops/s
Iteration  13: 1145356.921 ops/s
Iteration  14: 1117410.296 ops/s
Iteration  15: 1164463.292 ops/s
Iteration  16: 1168255.156 ops/s
Iteration  17: 1165740.770 ops/s
Iteration  18: 1136520.151 ops/s
Iteration  19: 1159515.966 ops/s
Iteration  20: 1175856.350 ops/s
Iteration  21: 1178571.393 ops/s
Iteration  22: 1143895.426 ops/s
Iteration  23: 1148493.734 ops/s
Iteration  24: 1166770.685 ops/s
Iteration  25: 1144743.458 ops/s
Iteration  26: 1151831.257 ops/s
Iteration  27: 1169790.814 ops/s
Iteration  28: 1139296.234 ops/s
Iteration  29: 1238157.564 ops/s
Iteration  30: 1242426.710 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeNullFromKeySet":
  1157673.783 ±(99.9%) 18810.749 ops/s [Average]
  (min, avg, max) = (1117410.296, 1157673.783, 1242426.710), stdev = 28155.046
  CI (99.9%): [1138863.034, 1176484.533] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_removeNullFromKeySet  thrpt   30  1157673.783 ± 18810.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeNullFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeNullFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 649588.487 ops/s
# Warmup Iteration   2: 1545927.877 ops/s
# Warmup Iteration   3: 1548870.257 ops/s
# Warmup Iteration   4: 1247595.121 ops/s
# Warmup Iteration   5: 1547057.270 ops/s
# Warmup Iteration   6: 1536182.851 ops/s
# Warmup Iteration   7: 1539277.985 ops/s
# Warmup Iteration   8: 1526061.230 ops/s
# Warmup Iteration   9: 1544404.539 ops/s
# Warmup Iteration  10: 1575520.133 ops/s
# Warmup Iteration  11: 1599724.232 ops/s
# Warmup Iteration  12: 1554723.477 ops/s
# Warmup Iteration  13: 1587421.308 ops/s
# Warmup Iteration  14: 1522248.303 ops/s
# Warmup Iteration  15: 1538360.111 ops/s
# Warmup Iteration  16: 1625511.647 ops/s
# Warmup Iteration  17: 1594467.180 ops/s
# Warmup Iteration  18: 1546088.806 ops/s
# Warmup Iteration  19: 1581908.033 ops/s
# Warmup Iteration  20: 1522868.544 ops/s
# Warmup Iteration  21: 1526582.315 ops/s
# Warmup Iteration  22: 1512313.546 ops/s
# Warmup Iteration  23: 1552601.490 ops/s
# Warmup Iteration  24: 1525706.846 ops/s
# Warmup Iteration  25: 1550062.930 ops/s
# Warmup Iteration  26: 1587419.700 ops/s
# Warmup Iteration  27: 1594974.234 ops/s
# Warmup Iteration  28: 1549577.943 ops/s
# Warmup Iteration  29: 1558002.526 ops/s
# Warmup Iteration  30: 1594007.481 ops/s
Iteration   1: 1595440.886 ops/s
Iteration   2: 1544102.942 ops/s
Iteration   3: 1516384.206 ops/s
Iteration   4: 1576590.295 ops/s
Iteration   5: 1592189.169 ops/s
Iteration   6: 1594315.133 ops/s
Iteration   7: 1537693.457 ops/s
Iteration   8: 1594877.228 ops/s
Iteration   9: 1602793.803 ops/s
Iteration  10: 1587881.551 ops/s
Iteration  11: 1574211.314 ops/s
Iteration  12: 1528149.449 ops/s
Iteration  13: 1540124.294 ops/s
Iteration  14: 1524711.863 ops/s
Iteration  15: 1599081.416 ops/s
Iteration  16: 1577993.652 ops/s
Iteration  17: 1595088.382 ops/s
Iteration  18: 1503595.680 ops/s
Iteration  19: 1544977.213 ops/s
Iteration  20: 1593077.975 ops/s
Iteration  21: 1559802.959 ops/s
Iteration  22: 1622749.786 ops/s
Iteration  23: 1552072.195 ops/s
Iteration  24: 1552692.074 ops/s
Iteration  25: 1541802.323 ops/s
Iteration  26: 1639148.352 ops/s
Iteration  27: 1580243.346 ops/s
Iteration  28: 1538301.299 ops/s
Iteration  29: 1534060.995 ops/s
Iteration  30: 1530194.226 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeNullFromValues":
  1565811.582 ±(99.9%) 22449.022 ops/s [Average]
  (min, avg, max) = (1503595.680, 1565811.582, 1639148.352), stdev = 33600.642
  CI (99.9%): [1543362.560, 1588260.604] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_removeNullFromValues  thrpt   30  1565811.582 ± 22449.022  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 933912.224 ops/s
# Warmup Iteration   2: 2618488.596 ops/s
# Warmup Iteration   3: 2437396.798 ops/s
# Warmup Iteration   4: 2500143.923 ops/s
# Warmup Iteration   5: 2681809.126 ops/s
# Warmup Iteration   6: 2680906.228 ops/s
# Warmup Iteration   7: 2687966.827 ops/s
# Warmup Iteration   8: 2649321.345 ops/s
# Warmup Iteration   9: 2630422.300 ops/s
# Warmup Iteration  10: 2640324.400 ops/s
# Warmup Iteration  11: 2601390.225 ops/s
# Warmup Iteration  12: 2630549.255 ops/s
# Warmup Iteration  13: 2623116.959 ops/s
# Warmup Iteration  14: 2694404.367 ops/s
# Warmup Iteration  15: 2622414.027 ops/s
# Warmup Iteration  16: 2630708.051 ops/s
# Warmup Iteration  17: 2735576.735 ops/s
# Warmup Iteration  18: 2700893.063 ops/s
# Warmup Iteration  19: 2664867.996 ops/s
# Warmup Iteration  20: 2673875.311 ops/s
# Warmup Iteration  21: 2632774.583 ops/s
# Warmup Iteration  22: 2696981.098 ops/s
# Warmup Iteration  23: 2622801.876 ops/s
# Warmup Iteration  24: 2622681.795 ops/s
# Warmup Iteration  25: 2667173.641 ops/s
# Warmup Iteration  26: 2710229.510 ops/s
# Warmup Iteration  27: 2681104.679 ops/s
# Warmup Iteration  28: 2603731.085 ops/s
# Warmup Iteration  29: 2597984.872 ops/s
# Warmup Iteration  30: 2637631.833 ops/s
Iteration   1: 2612683.639 ops/s
Iteration   2: 2704402.435 ops/s
Iteration   3: 2603541.606 ops/s
Iteration   4: 2633956.563 ops/s
Iteration   5: 2697162.400 ops/s
Iteration   6: 2659918.837 ops/s
Iteration   7: 2641451.388 ops/s
Iteration   8: 2682210.579 ops/s
Iteration   9: 2651263.843 ops/s
Iteration  10: 2654820.459 ops/s
Iteration  11: 2664958.248 ops/s
Iteration  12: 2611193.533 ops/s
Iteration  13: 2681515.671 ops/s
Iteration  14: 2724148.838 ops/s
Iteration  15: 2636468.148 ops/s
Iteration  16: 2647541.449 ops/s
Iteration  17: 2623873.246 ops/s
Iteration  18: 2642290.548 ops/s
Iteration  19: 2665452.832 ops/s
Iteration  20: 2694196.228 ops/s
Iteration  21: 2682542.480 ops/s
Iteration  22: 2644863.064 ops/s
Iteration  23: 2712176.319 ops/s
Iteration  24: 2755025.000 ops/s
Iteration  25: 2612388.343 ops/s
Iteration  26: 2643714.414 ops/s
Iteration  27: 2626296.036 ops/s
Iteration  28: 2694794.592 ops/s
Iteration  29: 2733929.500 ops/s
Iteration  30: 2651129.125 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_removeObject":
  2662996.979 ±(99.9%) 25891.425 ops/s [Average]
  (min, avg, max) = (2603541.606, 2662996.979, 2755025.000), stdev = 38753.069
  CI (99.9%): [2637105.554, 2688888.404] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_removeObject  thrpt   30  2662996.979 ± 25891.425  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_retainAllFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_retainAllFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 430192.667 ops/s
# Warmup Iteration   2: 1095773.284 ops/s
# Warmup Iteration   3: 1107972.035 ops/s
# Warmup Iteration   4: 1017555.229 ops/s
# Warmup Iteration   5: 1191481.689 ops/s
# Warmup Iteration   6: 1132777.845 ops/s
# Warmup Iteration   7: 1131659.386 ops/s
# Warmup Iteration   8: 1132191.048 ops/s
# Warmup Iteration   9: 1103599.230 ops/s
# Warmup Iteration  10: 1128134.777 ops/s
# Warmup Iteration  11: 1123520.146 ops/s
# Warmup Iteration  12: 1117061.954 ops/s
# Warmup Iteration  13: 1153437.904 ops/s
# Warmup Iteration  14: 1114007.031 ops/s
# Warmup Iteration  15: 1138189.408 ops/s
# Warmup Iteration  16: 1136157.834 ops/s
# Warmup Iteration  17: 1160202.968 ops/s
# Warmup Iteration  18: 1132323.088 ops/s
# Warmup Iteration  19: 1206383.833 ops/s
# Warmup Iteration  20: 1130162.661 ops/s
# Warmup Iteration  21: 1124450.168 ops/s
# Warmup Iteration  22: 1161769.724 ops/s
# Warmup Iteration  23: 1133050.016 ops/s
# Warmup Iteration  24: 1149977.252 ops/s
# Warmup Iteration  25: 1204380.355 ops/s
# Warmup Iteration  26: 1113595.252 ops/s
# Warmup Iteration  27: 1115601.329 ops/s
# Warmup Iteration  28: 1179206.514 ops/s
# Warmup Iteration  29: 1192843.342 ops/s
# Warmup Iteration  30: 1163487.193 ops/s
Iteration   1: 1120281.470 ops/s
Iteration   2: 1220561.305 ops/s
Iteration   3: 1217398.975 ops/s
Iteration   4: 1220013.656 ops/s
Iteration   5: 1198016.920 ops/s
Iteration   6: 1160242.371 ops/s
Iteration   7: 1168772.319 ops/s
Iteration   8: 1194333.649 ops/s
Iteration   9: 1217766.317 ops/s
Iteration  10: 1176344.830 ops/s
Iteration  11: 1136347.059 ops/s
Iteration  12: 1218865.785 ops/s
Iteration  13: 1216573.062 ops/s
Iteration  14: 1218336.403 ops/s
Iteration  15: 1110268.129 ops/s
Iteration  16: 1126966.797 ops/s
Iteration  17: 1104820.651 ops/s
Iteration  18: 1135946.958 ops/s
Iteration  19: 1131659.054 ops/s
Iteration  20: 1134675.550 ops/s
Iteration  21: 1114112.164 ops/s
Iteration  22: 1106650.206 ops/s
Iteration  23: 1120645.888 ops/s
Iteration  24: 1114970.425 ops/s
Iteration  25: 1100563.634 ops/s
Iteration  26: 1091012.277 ops/s
Iteration  27: 1101591.118 ops/s
Iteration  28: 1118302.919 ops/s
Iteration  29: 1123921.277 ops/s
Iteration  30: 1101913.219 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_retainAllFromEntrySet":
  1150729.146 ±(99.9%) 30835.973 ops/s [Average]
  (min, avg, max) = (1091012.277, 1150729.146, 1220561.305), stdev = 46153.836
  CI (99.9%): [1119893.173, 1181565.119] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_retainAllFromEntrySet  thrpt   30  1150729.146 ± 30835.973  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_retainAllFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_retainAllFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1158151.211 ops/s
# Warmup Iteration   2: 3001854.501 ops/s
# Warmup Iteration   3: 3015420.934 ops/s
# Warmup Iteration   4: 2506465.913 ops/s
# Warmup Iteration   5: 3031651.080 ops/s
# Warmup Iteration   6: 3214633.034 ops/s
# Warmup Iteration   7: 3160094.292 ops/s
# Warmup Iteration   8: 3138087.528 ops/s
# Warmup Iteration   9: 3086554.845 ops/s
# Warmup Iteration  10: 3036787.309 ops/s
# Warmup Iteration  11: 2999712.928 ops/s
# Warmup Iteration  12: 3014495.073 ops/s
# Warmup Iteration  13: 3045973.730 ops/s
# Warmup Iteration  14: 3035853.453 ops/s
# Warmup Iteration  15: 3024235.384 ops/s
# Warmup Iteration  16: 3034480.733 ops/s
# Warmup Iteration  17: 3219845.265 ops/s
# Warmup Iteration  18: 3002234.548 ops/s
# Warmup Iteration  19: 3144743.233 ops/s
# Warmup Iteration  20: 3058777.860 ops/s
# Warmup Iteration  21: 3012586.542 ops/s
# Warmup Iteration  22: 3121266.374 ops/s
# Warmup Iteration  23: 3056992.226 ops/s
# Warmup Iteration  24: 3038547.351 ops/s
# Warmup Iteration  25: 3104173.003 ops/s
# Warmup Iteration  26: 3094291.528 ops/s
# Warmup Iteration  27: 3075590.205 ops/s
# Warmup Iteration  28: 3107188.690 ops/s
# Warmup Iteration  29: 3023351.473 ops/s
# Warmup Iteration  30: 3036905.032 ops/s
Iteration   1: 3077264.298 ops/s
Iteration   2: 3130589.862 ops/s
Iteration   3: 3080076.717 ops/s
Iteration   4: 3085977.710 ops/s
Iteration   5: 3166170.620 ops/s
Iteration   6: 3022980.600 ops/s
Iteration   7: 3014302.581 ops/s
Iteration   8: 3044371.463 ops/s
Iteration   9: 3137198.781 ops/s
Iteration  10: 3170613.409 ops/s
Iteration  11: 3055438.915 ops/s
Iteration  12: 3036166.509 ops/s
Iteration  13: 3119525.742 ops/s
Iteration  14: 3264973.811 ops/s
Iteration  15: 3165158.368 ops/s
Iteration  16: 3111619.868 ops/s
Iteration  17: 3087283.415 ops/s
Iteration  18: 3179304.824 ops/s
Iteration  19: 3092574.490 ops/s
Iteration  20: 3075405.018 ops/s
Iteration  21: 3074599.493 ops/s
Iteration  22: 3158694.892 ops/s
Iteration  23: 3121354.766 ops/s
Iteration  24: 3155264.560 ops/s
Iteration  25: 3107090.922 ops/s
Iteration  26: 3130582.946 ops/s
Iteration  27: 3072662.377 ops/s
Iteration  28: 3058358.275 ops/s
Iteration  29: 3175089.759 ops/s
Iteration  30: 3330167.786 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_retainAllFromKeySet":
  3116695.426 ±(99.9%) 45691.811 ops/s [Average]
  (min, avg, max) = (3014302.581, 3116695.426, 3330167.786), stdev = 68389.357
  CI (99.9%): [3071003.615, 3162387.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_retainAllFromKeySet  thrpt   30  3116695.426 ± 45691.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_retainAllFromKeySet_null_collision$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_retainAllFromKeySet_null_collision

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 510488.077 ops/s
# Warmup Iteration   2: 1117765.634 ops/s
# Warmup Iteration   3: 1044407.159 ops/s
# Warmup Iteration   4: 1006216.477 ops/s
# Warmup Iteration   5: 1126398.655 ops/s
# Warmup Iteration   6: 1124634.536 ops/s
# Warmup Iteration   7: 1113851.615 ops/s
# Warmup Iteration   8: 1105090.512 ops/s
# Warmup Iteration   9: 1128627.745 ops/s
# Warmup Iteration  10: 1126071.179 ops/s
# Warmup Iteration  11: 1101730.061 ops/s
# Warmup Iteration  12: 1098912.373 ops/s
# Warmup Iteration  13: 1105711.615 ops/s
# Warmup Iteration  14: 1114229.578 ops/s
# Warmup Iteration  15: 1115350.164 ops/s
# Warmup Iteration  16: 1168758.274 ops/s
# Warmup Iteration  17: 1133199.572 ops/s
# Warmup Iteration  18: 1125432.052 ops/s
# Warmup Iteration  19: 1130379.277 ops/s
# Warmup Iteration  20: 1140948.391 ops/s
# Warmup Iteration  21: 1151096.635 ops/s
# Warmup Iteration  22: 1161145.867 ops/s
# Warmup Iteration  23: 1156066.313 ops/s
# Warmup Iteration  24: 1162753.783 ops/s
# Warmup Iteration  25: 1130932.303 ops/s
# Warmup Iteration  26: 1146928.789 ops/s
# Warmup Iteration  27: 1142728.860 ops/s
# Warmup Iteration  28: 1115805.536 ops/s
# Warmup Iteration  29: 1134762.908 ops/s
# Warmup Iteration  30: 1111392.302 ops/s
Iteration   1: 1124212.502 ops/s
Iteration   2: 1149360.439 ops/s
Iteration   3: 1176274.805 ops/s
Iteration   4: 1227242.713 ops/s
Iteration   5: 1136824.176 ops/s
Iteration   6: 1170687.984 ops/s
Iteration   7: 1117874.810 ops/s
Iteration   8: 1103275.297 ops/s
Iteration   9: 1107982.484 ops/s
Iteration  10: 1093451.089 ops/s
Iteration  11: 1113731.029 ops/s
Iteration  12: 1165752.286 ops/s
Iteration  13: 1126772.938 ops/s
Iteration  14: 1130603.904 ops/s
Iteration  15: 1108346.061 ops/s
Iteration  16: 1126273.292 ops/s
Iteration  17: 1127777.554 ops/s
Iteration  18: 1112149.570 ops/s
Iteration  19: 1143398.570 ops/s
Iteration  20: 1104643.509 ops/s
Iteration  21: 1115046.887 ops/s
Iteration  22: 1123400.373 ops/s
Iteration  23: 1120893.036 ops/s
Iteration  24: 1148758.485 ops/s
Iteration  25: 1141143.044 ops/s
Iteration  26: 1168958.829 ops/s
Iteration  27: 1122273.288 ops/s
Iteration  28: 1133074.234 ops/s
Iteration  29: 1114948.300 ops/s
Iteration  30: 1117090.487 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_retainAllFromKeySet_null_collision":
  1132407.399 ±(99.9%) 18487.279 ops/s [Average]
  (min, avg, max) = (1093451.089, 1132407.399, 1227242.713), stdev = 27670.890
  CI (99.9%): [1113920.121, 1150894.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_retainAllFromKeySet_null_collision  thrpt   30  1132407.399 ± 18487.279  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_retainAllFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_retainAllFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1146509.338 ops/s
# Warmup Iteration   2: 2735158.871 ops/s
# Warmup Iteration   3: 2812025.276 ops/s
# Warmup Iteration   4: 2270639.632 ops/s
# Warmup Iteration   5: 2791106.437 ops/s
# Warmup Iteration   6: 2841126.737 ops/s
# Warmup Iteration   7: 2799475.675 ops/s
# Warmup Iteration   8: 3025865.681 ops/s
# Warmup Iteration   9: 2950533.859 ops/s
# Warmup Iteration  10: 2928544.627 ops/s
# Warmup Iteration  11: 2806379.434 ops/s
# Warmup Iteration  12: 2857889.790 ops/s
# Warmup Iteration  13: 2889889.847 ops/s
# Warmup Iteration  14: 2846621.308 ops/s
# Warmup Iteration  15: 2826731.927 ops/s
# Warmup Iteration  16: 2810973.146 ops/s
# Warmup Iteration  17: 2840050.649 ops/s
# Warmup Iteration  18: 2859774.310 ops/s
# Warmup Iteration  19: 2884742.346 ops/s
# Warmup Iteration  20: 2876310.142 ops/s
# Warmup Iteration  21: 3013649.892 ops/s
# Warmup Iteration  22: 2804556.212 ops/s
# Warmup Iteration  23: 2888113.578 ops/s
# Warmup Iteration  24: 2866444.317 ops/s
# Warmup Iteration  25: 2840982.780 ops/s
# Warmup Iteration  26: 2753216.918 ops/s
# Warmup Iteration  27: 2832502.732 ops/s
# Warmup Iteration  28: 2782712.358 ops/s
# Warmup Iteration  29: 2930549.498 ops/s
# Warmup Iteration  30: 2863888.852 ops/s
Iteration   1: 3058955.182 ops/s
Iteration   2: 3060440.423 ops/s
Iteration   3: 3065336.465 ops/s
Iteration   4: 2963414.244 ops/s
Iteration   5: 2812058.619 ops/s
Iteration   6: 2813063.888 ops/s
Iteration   7: 2847861.029 ops/s
Iteration   8: 3047707.114 ops/s
Iteration   9: 3065444.816 ops/s
Iteration  10: 3060839.240 ops/s
Iteration  11: 3051462.686 ops/s
Iteration  12: 3057426.567 ops/s
Iteration  13: 3056174.080 ops/s
Iteration  14: 3013214.026 ops/s
Iteration  15: 2764564.114 ops/s
Iteration  16: 2881049.888 ops/s
Iteration  17: 2840811.354 ops/s
Iteration  18: 2816896.916 ops/s
Iteration  19: 2848362.825 ops/s
Iteration  20: 2749674.238 ops/s
Iteration  21: 2860274.478 ops/s
Iteration  22: 2763587.094 ops/s
Iteration  23: 2811076.572 ops/s
Iteration  24: 2780327.352 ops/s
Iteration  25: 2789130.665 ops/s
Iteration  26: 2834456.397 ops/s
Iteration  27: 2844959.770 ops/s
Iteration  28: 2891558.742 ops/s
Iteration  29: 3062731.353 ops/s
Iteration  30: 2996533.318 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_retainAllFromValues":
  2916979.782 ±(99.9%) 78856.892 ops/s [Average]
  (min, avg, max) = (2749674.238, 2916979.782, 3065444.816), stdev = 118029.292
  CI (99.9%): [2838122.890, 2995836.673] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_retainAllFromValues  thrpt   30  2916979.782 ± 78856.892  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 879972.152 ops/s
# Warmup Iteration   2: 2179002.634 ops/s
# Warmup Iteration   3: 2284455.500 ops/s
# Warmup Iteration   4: 1919327.729 ops/s
# Warmup Iteration   5: 2287269.225 ops/s
# Warmup Iteration   6: 2265016.145 ops/s
# Warmup Iteration   7: 2493937.638 ops/s
# Warmup Iteration   8: 2384786.138 ops/s
# Warmup Iteration   9: 2300005.430 ops/s
# Warmup Iteration  10: 2289310.458 ops/s
# Warmup Iteration  11: 2286594.825 ops/s
# Warmup Iteration  12: 2292786.244 ops/s
# Warmup Iteration  13: 2387531.213 ops/s
# Warmup Iteration  14: 2335157.016 ops/s
# Warmup Iteration  15: 2376019.425 ops/s
# Warmup Iteration  16: 2388827.905 ops/s
# Warmup Iteration  17: 2493757.148 ops/s
# Warmup Iteration  18: 2430956.185 ops/s
# Warmup Iteration  19: 2410816.271 ops/s
# Warmup Iteration  20: 2395901.072 ops/s
# Warmup Iteration  21: 2270237.489 ops/s
# Warmup Iteration  22: 2486674.261 ops/s
# Warmup Iteration  23: 2501919.673 ops/s
# Warmup Iteration  24: 2353843.298 ops/s
# Warmup Iteration  25: 2337749.331 ops/s
# Warmup Iteration  26: 2380086.724 ops/s
# Warmup Iteration  27: 2398111.219 ops/s
# Warmup Iteration  28: 2477442.895 ops/s
# Warmup Iteration  29: 2505327.006 ops/s
# Warmup Iteration  30: 2501548.883 ops/s
Iteration   1: 2493105.883 ops/s
Iteration   2: 2497501.258 ops/s
Iteration   3: 2455835.116 ops/s
Iteration   4: 2310590.952 ops/s
Iteration   5: 2267941.247 ops/s
Iteration   6: 2496140.093 ops/s
Iteration   7: 2508047.784 ops/s
Iteration   8: 2502086.204 ops/s
Iteration   9: 2429130.441 ops/s
Iteration  10: 2317200.659 ops/s
Iteration  11: 2416166.032 ops/s
Iteration  12: 2326608.379 ops/s
Iteration  13: 2273768.658 ops/s
Iteration  14: 2389162.959 ops/s
Iteration  15: 2504256.105 ops/s
Iteration  16: 2477050.251 ops/s
Iteration  17: 2333921.167 ops/s
Iteration  18: 2291149.402 ops/s
Iteration  19: 2346559.645 ops/s
Iteration  20: 2504606.523 ops/s
Iteration  21: 2505344.771 ops/s
Iteration  22: 2499647.145 ops/s
Iteration  23: 2483501.346 ops/s
Iteration  24: 2504609.666 ops/s
Iteration  25: 2414765.296 ops/s
Iteration  26: 2357340.437 ops/s
Iteration  27: 2329731.262 ops/s
Iteration  28: 2468440.319 ops/s
Iteration  29: 2352043.847 ops/s
Iteration  30: 2367733.512 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_select":
  2414132.879 ±(99.9%) 55793.507 ops/s [Average]
  (min, avg, max) = (2267941.247, 2414132.879, 2508047.784), stdev = 83509.101
  CI (99.9%): [2358339.372, 2469926.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_select  thrpt   30  2414132.879 ± 55793.507  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_selectInstancesOf_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_selectInstancesOf_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 723568.582 ops/s
# Warmup Iteration   2: 1448414.445 ops/s
# Warmup Iteration   3: 1496942.481 ops/s
# Warmup Iteration   4: 1571161.790 ops/s
# Warmup Iteration   5: 1266010.286 ops/s
# Warmup Iteration   6: 1542730.129 ops/s
# Warmup Iteration   7: 1613529.792 ops/s
# Warmup Iteration   8: 1604367.192 ops/s
# Warmup Iteration   9: 1534949.117 ops/s
# Warmup Iteration  10: 1519401.987 ops/s
# Warmup Iteration  11: 1517837.430 ops/s
# Warmup Iteration  12: 1551603.581 ops/s
# Warmup Iteration  13: 1534271.024 ops/s
# Warmup Iteration  14: 1560830.519 ops/s
# Warmup Iteration  15: 1504816.900 ops/s
# Warmup Iteration  16: 1532336.689 ops/s
# Warmup Iteration  17: 1544403.792 ops/s
# Warmup Iteration  18: 1528428.797 ops/s
# Warmup Iteration  19: 1514199.344 ops/s
# Warmup Iteration  20: 1527225.550 ops/s
# Warmup Iteration  21: 1520761.717 ops/s
# Warmup Iteration  22: 1507549.683 ops/s
# Warmup Iteration  23: 1551983.727 ops/s
# Warmup Iteration  24: 1539579.836 ops/s
# Warmup Iteration  25: 1508161.659 ops/s
# Warmup Iteration  26: 1516935.772 ops/s
# Warmup Iteration  27: 1516163.413 ops/s
# Warmup Iteration  28: 1525033.072 ops/s
# Warmup Iteration  29: 1543849.311 ops/s
# Warmup Iteration  30: 1530621.544 ops/s
Iteration   1: 1583324.836 ops/s
Iteration   2: 1652083.955 ops/s
Iteration   3: 1606242.224 ops/s
Iteration   4: 1491692.837 ops/s
Iteration   5: 1538360.469 ops/s
Iteration   6: 1518795.756 ops/s
Iteration   7: 1502298.669 ops/s
Iteration   8: 1544297.239 ops/s
Iteration   9: 1516545.101 ops/s
Iteration  10: 1529572.486 ops/s
Iteration  11: 1489426.426 ops/s
Iteration  12: 1519658.855 ops/s
Iteration  13: 1586686.209 ops/s
Iteration  14: 1536621.988 ops/s
Iteration  15: 1530095.536 ops/s
Iteration  16: 1554698.121 ops/s
Iteration  17: 1539899.975 ops/s
Iteration  18: 1553174.340 ops/s
Iteration  19: 1573061.906 ops/s
Iteration  20: 1516291.343 ops/s
Iteration  21: 1508079.221 ops/s
Iteration  22: 1486561.449 ops/s
Iteration  23: 1559594.605 ops/s
Iteration  24: 1568268.520 ops/s
Iteration  25: 1561326.675 ops/s
Iteration  26: 1581880.883 ops/s
Iteration  27: 1536571.057 ops/s
Iteration  28: 1564777.057 ops/s
Iteration  29: 1624050.358 ops/s
Iteration  30: 1660017.752 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_selectInstancesOf_value":
  1551131.862 ±(99.9%) 29532.059 ops/s [Average]
  (min, avg, max) = (1486561.449, 1551131.862, 1660017.752), stdev = 44202.199
  CI (99.9%): [1521599.802, 1580663.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_selectInstancesOf_value  thrpt   30  1551131.862 ± 29532.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_selectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_selectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 561389.343 ops/s
# Warmup Iteration   2: 1097632.842 ops/s
# Warmup Iteration   3: 1219087.286 ops/s
# Warmup Iteration   4: 1182156.210 ops/s
# Warmup Iteration   5: 1015976.583 ops/s
# Warmup Iteration   6: 1295500.126 ops/s
# Warmup Iteration   7: 1218594.115 ops/s
# Warmup Iteration   8: 1260988.750 ops/s
# Warmup Iteration   9: 1254910.238 ops/s
# Warmup Iteration  10: 1279046.300 ops/s
# Warmup Iteration  11: 1221295.204 ops/s
# Warmup Iteration  12: 1232639.422 ops/s
# Warmup Iteration  13: 1222852.770 ops/s
# Warmup Iteration  14: 1243208.846 ops/s
# Warmup Iteration  15: 1278302.107 ops/s
# Warmup Iteration  16: 1198695.189 ops/s
# Warmup Iteration  17: 1236600.700 ops/s
# Warmup Iteration  18: 1234143.185 ops/s
# Warmup Iteration  19: 1218621.026 ops/s
# Warmup Iteration  20: 1231161.155 ops/s
# Warmup Iteration  21: 1222764.462 ops/s
# Warmup Iteration  22: 1233477.173 ops/s
# Warmup Iteration  23: 1282118.249 ops/s
# Warmup Iteration  24: 1167530.050 ops/s
# Warmup Iteration  25: 1223015.052 ops/s
# Warmup Iteration  26: 1189513.482 ops/s
# Warmup Iteration  27: 1283885.399 ops/s
# Warmup Iteration  28: 1296446.669 ops/s
# Warmup Iteration  29: 1212526.428 ops/s
# Warmup Iteration  30: 1191782.229 ops/s
Iteration   1: 1200632.349 ops/s
Iteration   2: 1214110.765 ops/s
Iteration   3: 1282733.814 ops/s
Iteration   4: 1283270.626 ops/s
Iteration   5: 1237709.680 ops/s
Iteration   6: 1196148.269 ops/s
Iteration   7: 1170661.663 ops/s
Iteration   8: 1186827.108 ops/s
Iteration   9: 1238362.653 ops/s
Iteration  10: 1235272.427 ops/s
Iteration  11: 1219362.562 ops/s
Iteration  12: 1292490.409 ops/s
Iteration  13: 1257199.562 ops/s
Iteration  14: 1215236.989 ops/s
Iteration  15: 1218129.195 ops/s
Iteration  16: 1238913.915 ops/s
Iteration  17: 1205048.122 ops/s
Iteration  18: 1231581.377 ops/s
Iteration  19: 1211340.272 ops/s
Iteration  20: 1229906.323 ops/s
Iteration  21: 1232808.228 ops/s
Iteration  22: 1217912.274 ops/s
Iteration  23: 1288633.968 ops/s
Iteration  24: 1294351.716 ops/s
Iteration  25: 1283090.996 ops/s
Iteration  26: 1186801.226 ops/s
Iteration  27: 1209648.795 ops/s
Iteration  28: 1214155.465 ops/s
Iteration  29: 1210797.869 ops/s
Iteration  30: 1191283.682 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_selectMap":
  1229814.077 ±(99.9%) 23057.808 ops/s [Average]
  (min, avg, max) = (1170661.663, 1229814.077, 1294351.716), stdev = 34511.845
  CI (99.9%): [1206756.268, 1252871.885] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_selectMap  thrpt   30  1229814.077 ± 23057.808  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 930402.087 ops/s
# Warmup Iteration   2: 2398302.634 ops/s
# Warmup Iteration   3: 2451681.461 ops/s
# Warmup Iteration   4: 1912772.950 ops/s
# Warmup Iteration   5: 2376060.381 ops/s
# Warmup Iteration   6: 2530558.001 ops/s
# Warmup Iteration   7: 2417322.708 ops/s
# Warmup Iteration   8: 2423180.994 ops/s
# Warmup Iteration   9: 2453436.906 ops/s
# Warmup Iteration  10: 2360295.221 ops/s
# Warmup Iteration  11: 2374896.666 ops/s
# Warmup Iteration  12: 2405781.037 ops/s
# Warmup Iteration  13: 2529452.916 ops/s
# Warmup Iteration  14: 2418648.960 ops/s
# Warmup Iteration  15: 2441883.623 ops/s
# Warmup Iteration  16: 2461720.038 ops/s
# Warmup Iteration  17: 2369374.489 ops/s
# Warmup Iteration  18: 2431457.997 ops/s
# Warmup Iteration  19: 2423153.965 ops/s
# Warmup Iteration  20: 2515160.596 ops/s
# Warmup Iteration  21: 2593086.160 ops/s
# Warmup Iteration  22: 2441465.041 ops/s
# Warmup Iteration  23: 2494573.207 ops/s
# Warmup Iteration  24: 2482697.082 ops/s
# Warmup Iteration  25: 2416294.150 ops/s
# Warmup Iteration  26: 2359114.400 ops/s
# Warmup Iteration  27: 2455568.922 ops/s
# Warmup Iteration  28: 2445565.768 ops/s
# Warmup Iteration  29: 2445689.503 ops/s
# Warmup Iteration  30: 2412794.857 ops/s
Iteration   1: 2529921.763 ops/s
Iteration   2: 2466434.541 ops/s
Iteration   3: 2423276.000 ops/s
Iteration   4: 2527425.857 ops/s
Iteration   5: 2362623.039 ops/s
Iteration   6: 2372195.954 ops/s
Iteration   7: 2385593.477 ops/s
Iteration   8: 2470259.599 ops/s
Iteration   9: 2591312.322 ops/s
Iteration  10: 2544643.419 ops/s
Iteration  11: 2392558.365 ops/s
Iteration  12: 2391501.495 ops/s
Iteration  13: 2427217.037 ops/s
Iteration  14: 2589928.796 ops/s
Iteration  15: 2562072.499 ops/s
Iteration  16: 2364435.386 ops/s
Iteration  17: 2491941.634 ops/s
Iteration  18: 2503125.561 ops/s
Iteration  19: 2522948.164 ops/s
Iteration  20: 2449207.038 ops/s
Iteration  21: 2411316.756 ops/s
Iteration  22: 2379454.484 ops/s
Iteration  23: 2498365.660 ops/s
Iteration  24: 2599403.317 ops/s
Iteration  25: 2541228.599 ops/s
Iteration  26: 2567052.303 ops/s
Iteration  27: 2536855.929 ops/s
Iteration  28: 2394197.731 ops/s
Iteration  29: 2358367.438 ops/s
Iteration  30: 2345692.682 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_selectWith":
  2466685.228 ±(99.9%) 54346.578 ops/s [Average]
  (min, avg, max) = (2345692.682, 2466685.228, 2599403.317), stdev = 81343.406
  CI (99.9%): [2412338.650, 2521031.806] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_selectWith  thrpt   30  2466685.228 ± 54346.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_selectWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_selectWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1466005.692 ops/s
# Warmup Iteration   2: 3418327.844 ops/s
# Warmup Iteration   3: 2903008.092 ops/s
# Warmup Iteration   4: 3709948.020 ops/s
# Warmup Iteration   5: 3510412.960 ops/s
# Warmup Iteration   6: 3491675.122 ops/s
# Warmup Iteration   7: 3548752.667 ops/s
# Warmup Iteration   8: 3453139.492 ops/s
# Warmup Iteration   9: 3523442.937 ops/s
# Warmup Iteration  10: 3568428.519 ops/s
# Warmup Iteration  11: 3528776.791 ops/s
# Warmup Iteration  12: 3525544.208 ops/s
# Warmup Iteration  13: 3538575.907 ops/s
# Warmup Iteration  14: 3495578.116 ops/s
# Warmup Iteration  15: 3481061.200 ops/s
# Warmup Iteration  16: 3395702.629 ops/s
# Warmup Iteration  17: 3413728.326 ops/s
# Warmup Iteration  18: 3526588.458 ops/s
# Warmup Iteration  19: 3511294.748 ops/s
# Warmup Iteration  20: 3451757.763 ops/s
# Warmup Iteration  21: 3456781.286 ops/s
# Warmup Iteration  22: 3402525.757 ops/s
# Warmup Iteration  23: 3550621.855 ops/s
# Warmup Iteration  24: 3469142.773 ops/s
# Warmup Iteration  25: 3519210.455 ops/s
# Warmup Iteration  26: 3396447.853 ops/s
# Warmup Iteration  27: 3398544.566 ops/s
# Warmup Iteration  28: 3445937.071 ops/s
# Warmup Iteration  29: 3375994.506 ops/s
# Warmup Iteration  30: 3374937.721 ops/s
Iteration   1: 3358051.607 ops/s
Iteration   2: 3437648.879 ops/s
Iteration   3: 3359292.056 ops/s
Iteration   4: 3434111.199 ops/s
Iteration   5: 3458260.469 ops/s
Iteration   6: 3489101.101 ops/s
Iteration   7: 3497733.427 ops/s
Iteration   8: 3350167.454 ops/s
Iteration   9: 3483561.869 ops/s
Iteration  10: 3421059.591 ops/s
Iteration  11: 3450116.342 ops/s
Iteration  12: 3705229.510 ops/s
Iteration  13: 3548061.478 ops/s
Iteration  14: 3442827.222 ops/s
Iteration  15: 3397840.780 ops/s
Iteration  16: 3410230.999 ops/s
Iteration  17: 3394328.067 ops/s
Iteration  18: 3362380.888 ops/s
Iteration  19: 3363877.473 ops/s
Iteration  20: 3376796.277 ops/s
Iteration  21: 3422624.242 ops/s
Iteration  22: 3354712.162 ops/s
Iteration  23: 3393842.477 ops/s
Iteration  24: 3493497.937 ops/s
Iteration  25: 3428011.069 ops/s
Iteration  26: 3592383.159 ops/s
Iteration  27: 3433917.441 ops/s
Iteration  28: 3469388.830 ops/s
Iteration  29: 3433189.490 ops/s
Iteration  30: 3445405.797 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_selectWith_value":
  3440254.976 ±(99.9%) 51044.813 ops/s [Average]
  (min, avg, max) = (3350167.454, 3440254.976, 3705229.510), stdev = 76401.478
  CI (99.9%): [3389210.164, 3491299.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_selectWith_value  thrpt   30  3440254.976 ± 51044.813  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_select_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_select_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 940682.299 ops/s
# Warmup Iteration   2: 2341818.352 ops/s
# Warmup Iteration   3: 1962451.587 ops/s
# Warmup Iteration   4: 2395274.219 ops/s
# Warmup Iteration   5: 2440602.091 ops/s
# Warmup Iteration   6: 2378681.927 ops/s
# Warmup Iteration   7: 2355344.091 ops/s
# Warmup Iteration   8: 2312777.334 ops/s
# Warmup Iteration   9: 2391787.852 ops/s
# Warmup Iteration  10: 2354320.257 ops/s
# Warmup Iteration  11: 2360326.911 ops/s
# Warmup Iteration  12: 2353321.582 ops/s
# Warmup Iteration  13: 2390577.245 ops/s
# Warmup Iteration  14: 2361059.566 ops/s
# Warmup Iteration  15: 2317246.799 ops/s
# Warmup Iteration  16: 2320744.840 ops/s
# Warmup Iteration  17: 2295089.540 ops/s
# Warmup Iteration  18: 2312203.214 ops/s
# Warmup Iteration  19: 2302085.608 ops/s
# Warmup Iteration  20: 2313813.509 ops/s
# Warmup Iteration  21: 2393412.455 ops/s
# Warmup Iteration  22: 2399149.966 ops/s
# Warmup Iteration  23: 2359794.749 ops/s
# Warmup Iteration  24: 2301202.661 ops/s
# Warmup Iteration  25: 2306419.065 ops/s
# Warmup Iteration  26: 2385279.456 ops/s
# Warmup Iteration  27: 2388318.745 ops/s
# Warmup Iteration  28: 2388639.480 ops/s
# Warmup Iteration  29: 2338850.195 ops/s
# Warmup Iteration  30: 2276698.425 ops/s
Iteration   1: 2307147.030 ops/s
Iteration   2: 2360764.653 ops/s
Iteration   3: 2423427.688 ops/s
Iteration   4: 2418717.925 ops/s
Iteration   5: 2421948.604 ops/s
Iteration   6: 2459488.328 ops/s
Iteration   7: 2536543.968 ops/s
Iteration   8: 2528650.736 ops/s
Iteration   9: 2336012.153 ops/s
Iteration  10: 2373027.294 ops/s
Iteration  11: 2389302.106 ops/s
Iteration  12: 2334485.684 ops/s
Iteration  13: 2301792.111 ops/s
Iteration  14: 2325368.566 ops/s
Iteration  15: 2247406.390 ops/s
Iteration  16: 2309511.868 ops/s
Iteration  17: 2299111.530 ops/s
Iteration  18: 2276958.931 ops/s
Iteration  19: 2333300.730 ops/s
Iteration  20: 2319890.387 ops/s
Iteration  21: 2349113.301 ops/s
Iteration  22: 2389766.209 ops/s
Iteration  23: 2424003.005 ops/s
Iteration  24: 2331293.906 ops/s
Iteration  25: 2485333.538 ops/s
Iteration  26: 2533620.416 ops/s
Iteration  27: 2529359.512 ops/s
Iteration  28: 2417967.737 ops/s
Iteration  29: 2399266.441 ops/s
Iteration  30: 2402007.133 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_select_value":
  2385486.263 ±(99.9%) 53541.841 ops/s [Average]
  (min, avg, max) = (2247406.390, 2385486.263, 2536543.968), stdev = 80138.913
  CI (99.9%): [2331944.422, 2439028.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_select_value  thrpt   30  2385486.263 ± 53541.841  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50667.279 ops/s
# Warmup Iteration   2: 69273.725 ops/s
# Warmup Iteration   3: 97754.378 ops/s
# Warmup Iteration   4: 103244.738 ops/s
# Warmup Iteration   5: 93780.911 ops/s
# Warmup Iteration   6: 95284.991 ops/s
# Warmup Iteration   7: 94546.238 ops/s
# Warmup Iteration   8: 91411.735 ops/s
# Warmup Iteration   9: 93946.099 ops/s
# Warmup Iteration  10: 93828.443 ops/s
# Warmup Iteration  11: 95385.573 ops/s
# Warmup Iteration  12: 103776.355 ops/s
# Warmup Iteration  13: 103643.926 ops/s
# Warmup Iteration  14: 95398.581 ops/s
# Warmup Iteration  15: 94248.324 ops/s
# Warmup Iteration  16: 96985.396 ops/s
# Warmup Iteration  17: 100631.835 ops/s
# Warmup Iteration  18: 98825.532 ops/s
# Warmup Iteration  19: 99977.061 ops/s
# Warmup Iteration  20: 100077.562 ops/s
# Warmup Iteration  21: 102791.239 ops/s
# Warmup Iteration  22: 102923.429 ops/s
# Warmup Iteration  23: 98773.396 ops/s
# Warmup Iteration  24: 97058.460 ops/s
# Warmup Iteration  25: 103378.554 ops/s
# Warmup Iteration  26: 94925.918 ops/s
# Warmup Iteration  27: 101260.952 ops/s
# Warmup Iteration  28: 102389.912 ops/s
# Warmup Iteration  29: 97799.983 ops/s
# Warmup Iteration  30: 100779.831 ops/s
Iteration   1: 95194.954 ops/s
Iteration   2: 94123.502 ops/s
Iteration   3: 95251.423 ops/s
Iteration   4: 101460.906 ops/s
Iteration   5: 97635.514 ops/s
Iteration   6: 102061.561 ops/s
Iteration   7: 101423.654 ops/s
Iteration   8: 103541.447 ops/s
Iteration   9: 99465.753 ops/s
Iteration  10: 96468.151 ops/s
Iteration  11: 94625.228 ops/s
Iteration  12: 92969.903 ops/s
Iteration  13: 94843.923 ops/s
Iteration  14: 98759.384 ops/s
Iteration  15: 98611.048 ops/s
Iteration  16: 97676.547 ops/s
Iteration  17: 96014.076 ops/s
Iteration  18: 93797.536 ops/s
Iteration  19: 93571.895 ops/s
Iteration  20: 95141.790 ops/s
Iteration  21: 93038.776 ops/s
Iteration  22: 93911.207 ops/s
Iteration  23: 94313.681 ops/s
Iteration  24: 98228.730 ops/s
Iteration  25: 98505.245 ops/s
Iteration  26: 102577.630 ops/s
Iteration  27: 103931.587 ops/s
Iteration  28: 98495.049 ops/s
Iteration  29: 98189.370 ops/s
Iteration  30: 98400.860 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_serialization":
  97407.678 ±(99.9%) 2164.410 ops/s [Average]
  (min, avg, max) = (92969.903, 97407.678, 103931.587), stdev = 3239.588
  CI (99.9%): [95243.267, 99572.088] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt      Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_serialization  thrpt   30  97407.678 ± 2164.410  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1551196.169 ops/s
# Warmup Iteration   2: 3199360.133 ops/s
# Warmup Iteration   3: 2657220.785 ops/s
# Warmup Iteration   4: 3267604.923 ops/s
# Warmup Iteration   5: 3300392.502 ops/s
# Warmup Iteration   6: 3365316.324 ops/s
# Warmup Iteration   7: 3329808.486 ops/s
# Warmup Iteration   8: 3179624.557 ops/s
# Warmup Iteration   9: 3226024.011 ops/s
# Warmup Iteration  10: 3411188.956 ops/s
# Warmup Iteration  11: 3170925.497 ops/s
# Warmup Iteration  12: 3385209.156 ops/s
# Warmup Iteration  13: 3256646.344 ops/s
# Warmup Iteration  14: 3162327.136 ops/s
# Warmup Iteration  15: 3225450.779 ops/s
# Warmup Iteration  16: 3170712.489 ops/s
# Warmup Iteration  17: 3169830.774 ops/s
# Warmup Iteration  18: 3173237.652 ops/s
# Warmup Iteration  19: 3213574.975 ops/s
# Warmup Iteration  20: 3345529.218 ops/s
# Warmup Iteration  21: 3134023.148 ops/s
# Warmup Iteration  22: 3393511.638 ops/s
# Warmup Iteration  23: 3474975.235 ops/s
# Warmup Iteration  24: 3402969.046 ops/s
# Warmup Iteration  25: 3285806.685 ops/s
# Warmup Iteration  26: 3201582.388 ops/s
# Warmup Iteration  27: 3204078.482 ops/s
# Warmup Iteration  28: 3213362.600 ops/s
# Warmup Iteration  29: 3382350.162 ops/s
# Warmup Iteration  30: 3275373.209 ops/s
Iteration   1: 3448114.585 ops/s
Iteration   2: 3178580.461 ops/s
Iteration   3: 3121395.978 ops/s
Iteration   4: 3189883.230 ops/s
Iteration   5: 3179999.110 ops/s
Iteration   6: 3216084.865 ops/s
Iteration   7: 3188600.190 ops/s
Iteration   8: 3301601.575 ops/s
Iteration   9: 3148220.799 ops/s
Iteration  10: 3179930.123 ops/s
Iteration  11: 3265545.042 ops/s
Iteration  12: 3176594.979 ops/s
Iteration  13: 3472385.954 ops/s
Iteration  14: 3288087.781 ops/s
Iteration  15: 3160104.348 ops/s
Iteration  16: 3308401.867 ops/s
Iteration  17: 3145163.739 ops/s
Iteration  18: 3223971.555 ops/s
Iteration  19: 3141911.442 ops/s
Iteration  20: 3144203.074 ops/s
Iteration  21: 3187442.020 ops/s
Iteration  22: 3184102.175 ops/s
Iteration  23: 3235014.254 ops/s
Iteration  24: 3189387.208 ops/s
Iteration  25: 3165947.798 ops/s
Iteration  26: 3165985.633 ops/s
Iteration  27: 3215576.533 ops/s
Iteration  28: 3191878.609 ops/s
Iteration  29: 3179681.972 ops/s
Iteration  30: 3194768.173 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_size":
  3212952.169 ±(99.9%) 54431.665 ops/s [Average]
  (min, avg, max) = (3121395.978, 3212952.169, 3472385.954), stdev = 81470.760
  CI (99.9%): [3158520.504, 3267383.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_size  thrpt   30  3212952.169 ± 54431.665  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 597974.163 ops/s
# Warmup Iteration   2: 1329886.264 ops/s
# Warmup Iteration   3: 1432308.815 ops/s
# Warmup Iteration   4: 1345103.803 ops/s
# Warmup Iteration   5: 1249949.857 ops/s
# Warmup Iteration   6: 1440120.693 ops/s
# Warmup Iteration   7: 1421745.256 ops/s
# Warmup Iteration   8: 1428996.786 ops/s
# Warmup Iteration   9: 1417093.606 ops/s
# Warmup Iteration  10: 1418817.865 ops/s
# Warmup Iteration  11: 1455555.737 ops/s
# Warmup Iteration  12: 1433694.528 ops/s
# Warmup Iteration  13: 1450947.812 ops/s
# Warmup Iteration  14: 1459816.589 ops/s
# Warmup Iteration  15: 1483510.055 ops/s
# Warmup Iteration  16: 1417136.813 ops/s
# Warmup Iteration  17: 1439252.854 ops/s
# Warmup Iteration  18: 1484618.641 ops/s
# Warmup Iteration  19: 1512064.768 ops/s
# Warmup Iteration  20: 1437907.507 ops/s
# Warmup Iteration  21: 1422085.411 ops/s
# Warmup Iteration  22: 1410049.247 ops/s
# Warmup Iteration  23: 1461913.165 ops/s
# Warmup Iteration  24: 1420604.163 ops/s
# Warmup Iteration  25: 1412228.469 ops/s
# Warmup Iteration  26: 1442260.109 ops/s
# Warmup Iteration  27: 1449360.989 ops/s
# Warmup Iteration  28: 1418928.349 ops/s
# Warmup Iteration  29: 1417526.376 ops/s
# Warmup Iteration  30: 1418234.827 ops/s
Iteration   1: 1415813.122 ops/s
Iteration   2: 1465878.842 ops/s
Iteration   3: 1396698.539 ops/s
Iteration   4: 1395875.625 ops/s
Iteration   5: 1405606.129 ops/s
Iteration   6: 1436672.357 ops/s
Iteration   7: 1429981.807 ops/s
Iteration   8: 1425570.032 ops/s
Iteration   9: 1411304.217 ops/s
Iteration  10: 1423154.912 ops/s
Iteration  11: 1439022.088 ops/s
Iteration  12: 1452994.913 ops/s
Iteration  13: 1438052.035 ops/s
Iteration  14: 1408194.309 ops/s
Iteration  15: 1437356.375 ops/s
Iteration  16: 1442936.323 ops/s
Iteration  17: 1410170.948 ops/s
Iteration  18: 1420304.045 ops/s
Iteration  19: 1417100.667 ops/s
Iteration  20: 1429760.290 ops/s
Iteration  21: 1446229.715 ops/s
Iteration  22: 1491431.377 ops/s
Iteration  23: 1412803.090 ops/s
Iteration  24: 1403973.956 ops/s
Iteration  25: 1458507.689 ops/s
Iteration  26: 1415597.676 ops/s
Iteration  27: 1443692.615 ops/s
Iteration  28: 1413611.975 ops/s
Iteration  29: 1466978.298 ops/s
Iteration  30: 1426395.716 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_stream":
  1429388.989 ±(99.9%) 15041.563 ops/s [Average]
  (min, avg, max) = (1395875.625, 1429388.989, 1491431.377), stdev = 22513.506
  CI (99.9%): [1414347.426, 1444430.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_stream  thrpt   30  1429388.989 ± 15041.563  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 834284.297 ops/s
# Warmup Iteration   2: 1879728.410 ops/s
# Warmup Iteration   3: 2010908.325 ops/s
# Warmup Iteration   4: 1958073.903 ops/s
# Warmup Iteration   5: 1586264.985 ops/s
# Warmup Iteration   6: 2003151.077 ops/s
# Warmup Iteration   7: 2136182.034 ops/s
# Warmup Iteration   8: 2060587.913 ops/s
# Warmup Iteration   9: 2035101.917 ops/s
# Warmup Iteration  10: 1947772.051 ops/s
# Warmup Iteration  11: 2052854.928 ops/s
# Warmup Iteration  12: 1971001.236 ops/s
# Warmup Iteration  13: 2082163.308 ops/s
# Warmup Iteration  14: 1959161.075 ops/s
# Warmup Iteration  15: 1948362.126 ops/s
# Warmup Iteration  16: 1997759.821 ops/s
# Warmup Iteration  17: 1954554.665 ops/s
# Warmup Iteration  18: 1973267.611 ops/s
# Warmup Iteration  19: 1903369.361 ops/s
# Warmup Iteration  20: 1941257.848 ops/s
# Warmup Iteration  21: 1968230.104 ops/s
# Warmup Iteration  22: 1933753.612 ops/s
# Warmup Iteration  23: 1998227.843 ops/s
# Warmup Iteration  24: 1947487.560 ops/s
# Warmup Iteration  25: 1982084.466 ops/s
# Warmup Iteration  26: 1997987.861 ops/s
# Warmup Iteration  27: 2004546.003 ops/s
# Warmup Iteration  28: 2008250.152 ops/s
# Warmup Iteration  29: 2014574.418 ops/s
# Warmup Iteration  30: 1958565.978 ops/s
Iteration   1: 1963943.848 ops/s
Iteration   2: 1911968.044 ops/s
Iteration   3: 1956764.000 ops/s
Iteration   4: 1904922.646 ops/s
Iteration   5: 2032126.580 ops/s
Iteration   6: 2122312.409 ops/s
Iteration   7: 2023332.745 ops/s
Iteration   8: 2054418.568 ops/s
Iteration   9: 2041157.966 ops/s
Iteration  10: 1992100.160 ops/s
Iteration  11: 2034430.926 ops/s
Iteration  12: 1974649.137 ops/s
Iteration  13: 1946598.311 ops/s
Iteration  14: 1925086.312 ops/s
Iteration  15: 2001939.095 ops/s
Iteration  16: 1976850.616 ops/s
Iteration  17: 2023641.641 ops/s
Iteration  18: 2035107.106 ops/s
Iteration  19: 2042630.995 ops/s
Iteration  20: 2050910.603 ops/s
Iteration  21: 2023300.474 ops/s
Iteration  22: 1982578.193 ops/s
Iteration  23: 2039425.882 ops/s
Iteration  24: 2007733.962 ops/s
Iteration  25: 1995037.515 ops/s
Iteration  26: 1910107.794 ops/s
Iteration  27: 1937230.162 ops/s
Iteration  28: 1958698.907 ops/s
Iteration  29: 1972427.228 ops/s
Iteration  30: 1935182.006 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumByDouble":
  1992553.794 ±(99.9%) 34595.279 ops/s [Average]
  (min, avg, max) = (1904922.646, 1992553.794, 2122312.409), stdev = 51780.589
  CI (99.9%): [1957958.515, 2027149.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_sumByDouble  thrpt   30  1992553.794 ± 34595.279  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 824444.027 ops/s
# Warmup Iteration   2: 1707233.495 ops/s
# Warmup Iteration   3: 1916194.874 ops/s
# Warmup Iteration   4: 1860810.340 ops/s
# Warmup Iteration   5: 1558041.830 ops/s
# Warmup Iteration   6: 1878155.865 ops/s
# Warmup Iteration   7: 1853856.554 ops/s
# Warmup Iteration   8: 2031327.959 ops/s
# Warmup Iteration   9: 1951623.303 ops/s
# Warmup Iteration  10: 1985353.048 ops/s
# Warmup Iteration  11: 1885457.863 ops/s
# Warmup Iteration  12: 1841184.796 ops/s
# Warmup Iteration  13: 1868767.007 ops/s
# Warmup Iteration  14: 1859936.788 ops/s
# Warmup Iteration  15: 1852277.278 ops/s
# Warmup Iteration  16: 1884692.084 ops/s
# Warmup Iteration  17: 1892619.849 ops/s
# Warmup Iteration  18: 1847852.038 ops/s
# Warmup Iteration  19: 1875962.953 ops/s
# Warmup Iteration  20: 1844444.336 ops/s
# Warmup Iteration  21: 1845838.038 ops/s
# Warmup Iteration  22: 1860953.229 ops/s
# Warmup Iteration  23: 1842102.756 ops/s
# Warmup Iteration  24: 1872828.205 ops/s
# Warmup Iteration  25: 1883424.679 ops/s
# Warmup Iteration  26: 1863941.730 ops/s
# Warmup Iteration  27: 1869693.226 ops/s
# Warmup Iteration  28: 1968768.760 ops/s
# Warmup Iteration  29: 1897045.578 ops/s
# Warmup Iteration  30: 2029135.661 ops/s
Iteration   1: 2026134.441 ops/s
Iteration   2: 2026751.785 ops/s
Iteration   3: 2025653.108 ops/s
Iteration   4: 1975617.786 ops/s
Iteration   5: 1958660.363 ops/s
Iteration   6: 1937360.479 ops/s
Iteration   7: 1876562.046 ops/s
Iteration   8: 1904964.557 ops/s
Iteration   9: 1850956.358 ops/s
Iteration  10: 1820601.812 ops/s
Iteration  11: 1813673.732 ops/s
Iteration  12: 1853914.561 ops/s
Iteration  13: 1861007.853 ops/s
Iteration  14: 1860991.986 ops/s
Iteration  15: 1948914.305 ops/s
Iteration  16: 1865349.264 ops/s
Iteration  17: 1890154.519 ops/s
Iteration  18: 1911059.073 ops/s
Iteration  19: 1946182.110 ops/s
Iteration  20: 2022555.810 ops/s
Iteration  21: 1902135.715 ops/s
Iteration  22: 1870265.122 ops/s
Iteration  23: 1839792.276 ops/s
Iteration  24: 1863953.536 ops/s
Iteration  25: 1860022.368 ops/s
Iteration  26: 1900067.634 ops/s
Iteration  27: 1992533.770 ops/s
Iteration  28: 1868281.686 ops/s
Iteration  29: 1859728.463 ops/s
Iteration  30: 2003072.785 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumByFloat":
  1911230.643 ±(99.9%) 44148.471 ops/s [Average]
  (min, avg, max) = (1813673.732, 1911230.643, 2026751.785), stdev = 66079.358
  CI (99.9%): [1867082.172, 1955379.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_sumByFloat  thrpt   30  1911230.643 ± 44148.471  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1301958.631 ops/s
# Warmup Iteration   2: 3095990.749 ops/s
# Warmup Iteration   3: 3068248.198 ops/s
# Warmup Iteration   4: 2528504.529 ops/s
# Warmup Iteration   5: 2999425.114 ops/s
# Warmup Iteration   6: 2972120.723 ops/s
# Warmup Iteration   7: 3044280.046 ops/s
# Warmup Iteration   8: 2977333.290 ops/s
# Warmup Iteration   9: 3045163.036 ops/s
# Warmup Iteration  10: 3032177.825 ops/s
# Warmup Iteration  11: 3068135.870 ops/s
# Warmup Iteration  12: 3002923.309 ops/s
# Warmup Iteration  13: 2948430.649 ops/s
# Warmup Iteration  14: 2991549.358 ops/s
# Warmup Iteration  15: 2953366.148 ops/s
# Warmup Iteration  16: 2979748.358 ops/s
# Warmup Iteration  17: 3081589.045 ops/s
# Warmup Iteration  18: 3078161.410 ops/s
# Warmup Iteration  19: 3095636.746 ops/s
# Warmup Iteration  20: 3256075.906 ops/s
# Warmup Iteration  21: 3268320.168 ops/s
# Warmup Iteration  22: 3116859.677 ops/s
# Warmup Iteration  23: 3059535.330 ops/s
# Warmup Iteration  24: 3194031.165 ops/s
# Warmup Iteration  25: 3221457.814 ops/s
# Warmup Iteration  26: 3282192.955 ops/s
# Warmup Iteration  27: 3089690.910 ops/s
# Warmup Iteration  28: 3075613.920 ops/s
# Warmup Iteration  29: 3275695.003 ops/s
# Warmup Iteration  30: 3267388.862 ops/s
Iteration   1: 3270938.076 ops/s
Iteration   2: 2994112.694 ops/s
Iteration   3: 3026991.545 ops/s
Iteration   4: 3138968.188 ops/s
Iteration   5: 3202064.354 ops/s
Iteration   6: 3104013.687 ops/s
Iteration   7: 3149975.567 ops/s
Iteration   8: 3088627.102 ops/s
Iteration   9: 3117623.804 ops/s
Iteration  10: 3151319.771 ops/s
Iteration  11: 3106598.716 ops/s
Iteration  12: 3224344.486 ops/s
Iteration  13: 3131463.308 ops/s
Iteration  14: 2986642.515 ops/s
Iteration  15: 2981427.615 ops/s
Iteration  16: 3156578.482 ops/s
Iteration  17: 3032783.545 ops/s
Iteration  18: 3067699.142 ops/s
Iteration  19: 3019543.995 ops/s
Iteration  20: 3040152.513 ops/s
Iteration  21: 3010213.318 ops/s
Iteration  22: 3023275.109 ops/s
Iteration  23: 3251473.403 ops/s
Iteration  24: 3273288.325 ops/s
Iteration  25: 3252236.194 ops/s
Iteration  26: 3049963.394 ops/s
Iteration  27: 3012706.207 ops/s
Iteration  28: 3039048.171 ops/s
Iteration  29: 3018333.657 ops/s
Iteration  30: 3120407.400 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumByInt":
  3101427.143 ±(99.9%) 60330.508 ops/s [Average]
  (min, avg, max) = (2981427.615, 3101427.143, 3273288.325), stdev = 90299.871
  CI (99.9%): [3041096.635, 3161757.651] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_sumByInt  thrpt   30  3101427.143 ± 60330.508  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1260651.722 ops/s
# Warmup Iteration   2: 3042777.149 ops/s
# Warmup Iteration   3: 3171787.900 ops/s
# Warmup Iteration   4: 2749782.858 ops/s
# Warmup Iteration   5: 3366502.322 ops/s
# Warmup Iteration   6: 3069776.944 ops/s
# Warmup Iteration   7: 3062802.994 ops/s
# Warmup Iteration   8: 3075060.137 ops/s
# Warmup Iteration   9: 3293690.448 ops/s
# Warmup Iteration  10: 3264992.567 ops/s
# Warmup Iteration  11: 3246512.104 ops/s
# Warmup Iteration  12: 3083646.003 ops/s
# Warmup Iteration  13: 3253318.368 ops/s
# Warmup Iteration  14: 3062526.036 ops/s
# Warmup Iteration  15: 3185647.016 ops/s
# Warmup Iteration  16: 3095077.636 ops/s
# Warmup Iteration  17: 3294171.363 ops/s
# Warmup Iteration  18: 3174909.216 ops/s
# Warmup Iteration  19: 3075715.639 ops/s
# Warmup Iteration  20: 3082565.079 ops/s
# Warmup Iteration  21: 3125829.888 ops/s
# Warmup Iteration  22: 3318062.187 ops/s
# Warmup Iteration  23: 3224720.735 ops/s
# Warmup Iteration  24: 3117683.724 ops/s
# Warmup Iteration  25: 3155696.535 ops/s
# Warmup Iteration  26: 3098998.421 ops/s
# Warmup Iteration  27: 3101616.799 ops/s
# Warmup Iteration  28: 3064102.584 ops/s
# Warmup Iteration  29: 3167843.223 ops/s
# Warmup Iteration  30: 3214362.374 ops/s
Iteration   1: 3104120.923 ops/s
Iteration   2: 3213928.454 ops/s
Iteration   3: 3378228.781 ops/s
Iteration   4: 3370598.281 ops/s
Iteration   5: 3366531.019 ops/s
Iteration   6: 3337340.257 ops/s
Iteration   7: 3113772.188 ops/s
Iteration   8: 3066957.302 ops/s
Iteration   9: 3059169.184 ops/s
Iteration  10: 3140921.002 ops/s
Iteration  11: 3080161.263 ops/s
Iteration  12: 3125470.228 ops/s
Iteration  13: 3102920.219 ops/s
Iteration  14: 3055695.565 ops/s
Iteration  15: 3079038.890 ops/s
Iteration  16: 3072865.295 ops/s
Iteration  17: 3212018.716 ops/s
Iteration  18: 3097056.311 ops/s
Iteration  19: 3198464.902 ops/s
Iteration  20: 3380277.608 ops/s
Iteration  21: 3384157.637 ops/s
Iteration  22: 3352922.475 ops/s
Iteration  23: 3129778.810 ops/s
Iteration  24: 3085114.045 ops/s
Iteration  25: 3140647.905 ops/s
Iteration  26: 3154132.732 ops/s
Iteration  27: 3252497.246 ops/s
Iteration  28: 3218578.494 ops/s
Iteration  29: 3206103.268 ops/s
Iteration  30: 3325601.613 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumByLong":
  3193502.354 ±(99.9%) 77301.507 ops/s [Average]
  (min, avg, max) = (3055695.565, 3193502.354, 3384157.637), stdev = 115701.265
  CI (99.9%): [3116200.847, 3270803.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_sumByLong  thrpt   30  3193502.354 ± 77301.507  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumOfDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumOfDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2293524.279 ops/s
# Warmup Iteration   2: 4897830.096 ops/s
# Warmup Iteration   3: 4599192.602 ops/s
# Warmup Iteration   4: 4334731.292 ops/s
# Warmup Iteration   5: 4986062.785 ops/s
# Warmup Iteration   6: 4901928.102 ops/s
# Warmup Iteration   7: 4927121.053 ops/s
# Warmup Iteration   8: 4910865.557 ops/s
# Warmup Iteration   9: 4999082.558 ops/s
# Warmup Iteration  10: 5015182.477 ops/s
# Warmup Iteration  11: 4905773.990 ops/s
# Warmup Iteration  12: 4884498.501 ops/s
# Warmup Iteration  13: 4828853.135 ops/s
# Warmup Iteration  14: 4905107.844 ops/s
# Warmup Iteration  15: 4866219.059 ops/s
# Warmup Iteration  16: 4905164.819 ops/s
# Warmup Iteration  17: 5000900.149 ops/s
# Warmup Iteration  18: 4817069.131 ops/s
# Warmup Iteration  19: 5014150.836 ops/s
# Warmup Iteration  20: 4887792.978 ops/s
# Warmup Iteration  21: 4835268.197 ops/s
# Warmup Iteration  22: 4883621.454 ops/s
# Warmup Iteration  23: 4902427.850 ops/s
# Warmup Iteration  24: 4899678.485 ops/s
# Warmup Iteration  25: 4834700.002 ops/s
# Warmup Iteration  26: 4904419.116 ops/s
# Warmup Iteration  27: 5043521.052 ops/s
# Warmup Iteration  28: 4931551.708 ops/s
# Warmup Iteration  29: 4853132.844 ops/s
# Warmup Iteration  30: 4915854.913 ops/s
Iteration   1: 4916555.467 ops/s
Iteration   2: 4852912.721 ops/s
Iteration   3: 5012590.232 ops/s
Iteration   4: 5076215.064 ops/s
Iteration   5: 4766956.134 ops/s
Iteration   6: 5019888.381 ops/s
Iteration   7: 5028671.936 ops/s
Iteration   8: 4964328.273 ops/s
Iteration   9: 4827860.054 ops/s
Iteration  10: 4835275.141 ops/s
Iteration  11: 4878550.328 ops/s
Iteration  12: 4854728.953 ops/s
Iteration  13: 4867588.559 ops/s
Iteration  14: 4804628.076 ops/s
Iteration  15: 4916672.304 ops/s
Iteration  16: 5042298.086 ops/s
Iteration  17: 5004792.410 ops/s
Iteration  18: 5285301.545 ops/s
Iteration  19: 4811240.291 ops/s
Iteration  20: 4955239.358 ops/s
Iteration  21: 5014751.378 ops/s
Iteration  22: 5058388.711 ops/s
Iteration  23: 4757928.505 ops/s
Iteration  24: 4795507.262 ops/s
Iteration  25: 4846396.935 ops/s
Iteration  26: 4875859.605 ops/s
Iteration  27: 4779642.140 ops/s
Iteration  28: 5043684.521 ops/s
Iteration  29: 5279998.240 ops/s
Iteration  30: 5138650.423 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumOfDouble":
  4943770.034 ±(99.9%) 93152.910 ops/s [Average]
  (min, avg, max) = (4757928.505, 4943770.034, 5285301.545), stdev = 139426.901
  CI (99.9%): [4850617.124, 5036922.945] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_sumOfDouble  thrpt   30  4943770.034 ± 93152.910  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumOfFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumOfFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1885040.811 ops/s
# Warmup Iteration   2: 4318537.436 ops/s
# Warmup Iteration   3: 4183906.943 ops/s
# Warmup Iteration   4: 3579377.818 ops/s
# Warmup Iteration   5: 4473104.067 ops/s
# Warmup Iteration   6: 4326906.713 ops/s
# Warmup Iteration   7: 4372201.147 ops/s
# Warmup Iteration   8: 4488032.210 ops/s
# Warmup Iteration   9: 4251832.466 ops/s
# Warmup Iteration  10: 4238952.436 ops/s
# Warmup Iteration  11: 4189915.278 ops/s
# Warmup Iteration  12: 4153509.989 ops/s
# Warmup Iteration  13: 4173487.100 ops/s
# Warmup Iteration  14: 4150237.187 ops/s
# Warmup Iteration  15: 4190275.994 ops/s
# Warmup Iteration  16: 4419218.164 ops/s
# Warmup Iteration  17: 4493506.887 ops/s
# Warmup Iteration  18: 4247238.207 ops/s
# Warmup Iteration  19: 4297149.533 ops/s
# Warmup Iteration  20: 4229940.039 ops/s
# Warmup Iteration  21: 4223039.623 ops/s
# Warmup Iteration  22: 4273406.508 ops/s
# Warmup Iteration  23: 4184229.963 ops/s
# Warmup Iteration  24: 4185990.966 ops/s
# Warmup Iteration  25: 4529729.355 ops/s
# Warmup Iteration  26: 4241160.504 ops/s
# Warmup Iteration  27: 4177561.677 ops/s
# Warmup Iteration  28: 4290801.410 ops/s
# Warmup Iteration  29: 4169574.644 ops/s
# Warmup Iteration  30: 4227128.120 ops/s
Iteration   1: 4306230.889 ops/s
Iteration   2: 4173610.260 ops/s
Iteration   3: 4242399.698 ops/s
Iteration   4: 4150953.951 ops/s
Iteration   5: 4268449.567 ops/s
Iteration   6: 4302739.830 ops/s
Iteration   7: 4099610.290 ops/s
Iteration   8: 4355750.058 ops/s
Iteration   9: 4308680.727 ops/s
Iteration  10: 4256987.037 ops/s
Iteration  11: 4347066.752 ops/s
Iteration  12: 4336691.953 ops/s
Iteration  13: 4501065.653 ops/s
Iteration  14: 4539116.364 ops/s
Iteration  15: 4537548.755 ops/s
Iteration  16: 4456856.703 ops/s
Iteration  17: 4349232.584 ops/s
Iteration  18: 4315513.100 ops/s
Iteration  19: 4195317.543 ops/s
Iteration  20: 4115623.398 ops/s
Iteration  21: 4159788.112 ops/s
Iteration  22: 4175467.101 ops/s
Iteration  23: 4105551.414 ops/s
Iteration  24: 4168936.024 ops/s
Iteration  25: 4183899.888 ops/s
Iteration  26: 4204594.060 ops/s
Iteration  27: 4525179.913 ops/s
Iteration  28: 4548952.134 ops/s
Iteration  29: 4405135.884 ops/s
Iteration  30: 4109750.069 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumOfFloat":
  4291556.657 ±(99.9%) 95141.726 ops/s [Average]
  (min, avg, max) = (4099610.290, 4291556.657, 4548952.134), stdev = 142403.668
  CI (99.9%): [4196414.931, 4386698.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_sumOfFloat  thrpt   30  4291556.657 ± 95141.726  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumOfInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumOfInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1858166.271 ops/s
# Warmup Iteration   2: 4358987.686 ops/s
# Warmup Iteration   3: 4315019.240 ops/s
# Warmup Iteration   4: 3517977.595 ops/s
# Warmup Iteration   5: 4407832.329 ops/s
# Warmup Iteration   6: 4319576.649 ops/s
# Warmup Iteration   7: 4193429.715 ops/s
# Warmup Iteration   8: 4534069.296 ops/s
# Warmup Iteration   9: 4327188.971 ops/s
# Warmup Iteration  10: 4291691.982 ops/s
# Warmup Iteration  11: 4432112.653 ops/s
# Warmup Iteration  12: 4563882.214 ops/s
# Warmup Iteration  13: 4387615.533 ops/s
# Warmup Iteration  14: 4243095.347 ops/s
# Warmup Iteration  15: 4347882.674 ops/s
# Warmup Iteration  16: 4191450.746 ops/s
# Warmup Iteration  17: 4336763.332 ops/s
# Warmup Iteration  18: 4441964.316 ops/s
# Warmup Iteration  19: 4180735.127 ops/s
# Warmup Iteration  20: 4169543.750 ops/s
# Warmup Iteration  21: 4309506.772 ops/s
# Warmup Iteration  22: 4238136.278 ops/s
# Warmup Iteration  23: 4345004.682 ops/s
# Warmup Iteration  24: 4229390.411 ops/s
# Warmup Iteration  25: 4218103.096 ops/s
# Warmup Iteration  26: 4181660.150 ops/s
# Warmup Iteration  27: 4411490.561 ops/s
# Warmup Iteration  28: 4568890.469 ops/s
# Warmup Iteration  29: 4356963.301 ops/s
# Warmup Iteration  30: 4249296.962 ops/s
Iteration   1: 4219520.527 ops/s
Iteration   2: 4423329.104 ops/s
Iteration   3: 4564550.387 ops/s
Iteration   4: 4215314.810 ops/s
Iteration   5: 4349451.338 ops/s
Iteration   6: 4158815.186 ops/s
Iteration   7: 4211069.453 ops/s
Iteration   8: 4461023.690 ops/s
Iteration   9: 4574978.888 ops/s
Iteration  10: 4558898.503 ops/s
Iteration  11: 4548236.093 ops/s
Iteration  12: 4290564.373 ops/s
Iteration  13: 4212445.559 ops/s
Iteration  14: 4414269.580 ops/s
Iteration  15: 4553691.427 ops/s
Iteration  16: 4562453.606 ops/s
Iteration  17: 4577948.974 ops/s
Iteration  18: 4549180.252 ops/s
Iteration  19: 4542711.217 ops/s
Iteration  20: 4454194.566 ops/s
Iteration  21: 4190817.850 ops/s
Iteration  22: 4310260.216 ops/s
Iteration  23: 4062971.416 ops/s
Iteration  24: 4165173.663 ops/s
Iteration  25: 4258321.526 ops/s
Iteration  26: 4565855.599 ops/s
Iteration  27: 4558124.133 ops/s
Iteration  28: 4546587.474 ops/s
Iteration  29: 4368669.801 ops/s
Iteration  30: 4417143.293 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumOfInt":
  4396219.083 ±(99.9%) 108324.146 ops/s [Average]
  (min, avg, max) = (4062971.416, 4396219.083, 4577948.974), stdev = 162134.495
  CI (99.9%): [4287894.937, 4504543.230] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score        Error  Units
HashBiMapInverseTest._Benchmark.benchmark_sumOfInt  thrpt   30  4396219.083 ± 108324.146  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumOfLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumOfLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1852963.696 ops/s
# Warmup Iteration   2: 4845066.412 ops/s
# Warmup Iteration   3: 4981251.152 ops/s
# Warmup Iteration   4: 4098619.930 ops/s
# Warmup Iteration   5: 4828342.273 ops/s
# Warmup Iteration   6: 4801717.070 ops/s
# Warmup Iteration   7: 4811600.378 ops/s
# Warmup Iteration   8: 4701868.887 ops/s
# Warmup Iteration   9: 4723742.538 ops/s
# Warmup Iteration  10: 4789446.851 ops/s
# Warmup Iteration  11: 4688913.837 ops/s
# Warmup Iteration  12: 4858434.554 ops/s
# Warmup Iteration  13: 4760248.417 ops/s
# Warmup Iteration  14: 4802842.646 ops/s
# Warmup Iteration  15: 4940643.501 ops/s
# Warmup Iteration  16: 4832399.477 ops/s
# Warmup Iteration  17: 5034208.820 ops/s
# Warmup Iteration  18: 5034133.644 ops/s
# Warmup Iteration  19: 5130159.832 ops/s
# Warmup Iteration  20: 4892914.433 ops/s
# Warmup Iteration  21: 4799849.630 ops/s
# Warmup Iteration  22: 5054659.843 ops/s
# Warmup Iteration  23: 4953032.940 ops/s
# Warmup Iteration  24: 5140643.165 ops/s
# Warmup Iteration  25: 4759890.032 ops/s
# Warmup Iteration  26: 4749654.419 ops/s
# Warmup Iteration  27: 4694721.906 ops/s
# Warmup Iteration  28: 4927331.980 ops/s
# Warmup Iteration  29: 4796878.880 ops/s
# Warmup Iteration  30: 4737555.987 ops/s
Iteration   1: 4568265.828 ops/s
Iteration   2: 4701158.645 ops/s
Iteration   3: 4918601.815 ops/s
Iteration   4: 4961634.103 ops/s
Iteration   5: 4900468.019 ops/s
Iteration   6: 5160285.904 ops/s
Iteration   7: 4776870.263 ops/s
Iteration   8: 5159222.433 ops/s
Iteration   9: 4799108.288 ops/s
Iteration  10: 4933671.330 ops/s
Iteration  11: 4859574.421 ops/s
Iteration  12: 4685887.009 ops/s
Iteration  13: 4897040.635 ops/s
Iteration  14: 4777318.531 ops/s
Iteration  15: 4691126.434 ops/s
Iteration  16: 4796324.308 ops/s
Iteration  17: 4683511.679 ops/s
Iteration  18: 4907524.197 ops/s
Iteration  19: 4757647.108 ops/s
Iteration  20: 4751839.771 ops/s
Iteration  21: 4692091.599 ops/s
Iteration  22: 4693002.776 ops/s
Iteration  23: 4726688.722 ops/s
Iteration  24: 4933409.552 ops/s
Iteration  25: 4694692.893 ops/s
Iteration  26: 4803432.079 ops/s
Iteration  27: 4790869.814 ops/s
Iteration  28: 4750166.519 ops/s
Iteration  29: 4717933.120 ops/s
Iteration  30: 4878381.340 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_sumOfLong":
  4812258.304 ±(99.9%) 90058.526 ops/s [Average]
  (min, avg, max) = (4568265.828, 4812258.304, 5160285.904), stdev = 134795.372
  CI (99.9%): [4722199.778, 4902316.831] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_sumOfLong  thrpt   30  4812258.304 ± 90058.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1389404.620 ops/s
# Warmup Iteration   2: 3215939.941 ops/s
# Warmup Iteration   3: 3288524.446 ops/s
# Warmup Iteration   4: 2672887.980 ops/s
# Warmup Iteration   5: 3252839.464 ops/s
# Warmup Iteration   6: 3300688.326 ops/s
# Warmup Iteration   7: 3249920.992 ops/s
# Warmup Iteration   8: 3222178.832 ops/s
# Warmup Iteration   9: 3370638.323 ops/s
# Warmup Iteration  10: 3302281.860 ops/s
# Warmup Iteration  11: 3271537.141 ops/s
# Warmup Iteration  12: 3234632.796 ops/s
# Warmup Iteration  13: 3249711.701 ops/s
# Warmup Iteration  14: 3293854.745 ops/s
# Warmup Iteration  15: 3350346.357 ops/s
# Warmup Iteration  16: 3316020.249 ops/s
# Warmup Iteration  17: 3216564.999 ops/s
# Warmup Iteration  18: 3294350.883 ops/s
# Warmup Iteration  19: 3369047.175 ops/s
# Warmup Iteration  20: 3294463.253 ops/s
# Warmup Iteration  21: 3277288.768 ops/s
# Warmup Iteration  22: 3281549.343 ops/s
# Warmup Iteration  23: 3276663.495 ops/s
# Warmup Iteration  24: 3337641.328 ops/s
# Warmup Iteration  25: 3243122.934 ops/s
# Warmup Iteration  26: 3240606.359 ops/s
# Warmup Iteration  27: 3242501.702 ops/s
# Warmup Iteration  28: 3251014.291 ops/s
# Warmup Iteration  29: 3250583.219 ops/s
# Warmup Iteration  30: 3262787.328 ops/s
Iteration   1: 3180736.822 ops/s
Iteration   2: 3274894.394 ops/s
Iteration   3: 3279173.202 ops/s
Iteration   4: 3312760.781 ops/s
Iteration   5: 3305600.063 ops/s
Iteration   6: 3286504.084 ops/s
Iteration   7: 3342258.488 ops/s
Iteration   8: 3427747.548 ops/s
Iteration   9: 3285505.146 ops/s
Iteration  10: 3277254.264 ops/s
Iteration  11: 3286340.814 ops/s
Iteration  12: 3380608.696 ops/s
Iteration  13: 3392351.255 ops/s
Iteration  14: 3247029.363 ops/s
Iteration  15: 3291432.158 ops/s
Iteration  16: 3313896.069 ops/s
Iteration  17: 3246098.036 ops/s
Iteration  18: 3259132.509 ops/s
Iteration  19: 3203359.577 ops/s
Iteration  20: 3179978.289 ops/s
Iteration  21: 3224746.933 ops/s
Iteration  22: 3284920.413 ops/s
Iteration  23: 3212106.301 ops/s
Iteration  24: 3188332.655 ops/s
Iteration  25: 3201183.589 ops/s
Iteration  26: 3216098.155 ops/s
Iteration  27: 3254863.283 ops/s
Iteration  28: 3272834.999 ops/s
Iteration  29: 3401904.723 ops/s
Iteration  30: 3359686.015 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_tap":
  3279644.621 ±(99.9%) 44436.210 ops/s [Average]
  (min, avg, max) = (3179978.289, 3279644.621, 3427747.548), stdev = 66510.032
  CI (99.9%): [3235208.411, 3324080.831] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_tap  thrpt   30  3279644.621 ± 44436.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testAggregateBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testAggregateBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1029375.903 ops/s
# Warmup Iteration   2: 1781048.021 ops/s
# Warmup Iteration   3: 1959600.385 ops/s
# Warmup Iteration   4: 1990237.049 ops/s
# Warmup Iteration   5: 2071585.940 ops/s
# Warmup Iteration   6: 1720267.814 ops/s
# Warmup Iteration   7: 2039596.749 ops/s
# Warmup Iteration   8: 2050591.709 ops/s
# Warmup Iteration   9: 2010002.024 ops/s
# Warmup Iteration  10: 1983882.656 ops/s
# Warmup Iteration  11: 2057782.167 ops/s
# Warmup Iteration  12: 2035351.733 ops/s
# Warmup Iteration  13: 2070463.988 ops/s
# Warmup Iteration  14: 2058358.819 ops/s
# Warmup Iteration  15: 1958962.662 ops/s
# Warmup Iteration  16: 2011000.701 ops/s
# Warmup Iteration  17: 2040621.519 ops/s
# Warmup Iteration  18: 2073329.277 ops/s
# Warmup Iteration  19: 2075438.750 ops/s
# Warmup Iteration  20: 2071286.774 ops/s
# Warmup Iteration  21: 2065854.293 ops/s
# Warmup Iteration  22: 2047609.143 ops/s
# Warmup Iteration  23: 1999968.890 ops/s
# Warmup Iteration  24: 2092466.450 ops/s
# Warmup Iteration  25: 1965840.546 ops/s
# Warmup Iteration  26: 2070647.967 ops/s
# Warmup Iteration  27: 1976518.977 ops/s
# Warmup Iteration  28: 2106988.888 ops/s
# Warmup Iteration  29: 1977915.224 ops/s
# Warmup Iteration  30: 2055628.545 ops/s
Iteration   1: 2171885.881 ops/s
Iteration   2: 2023286.180 ops/s
Iteration   3: 2069956.104 ops/s
Iteration   4: 1930539.771 ops/s
Iteration   5: 2027770.254 ops/s
Iteration   6: 1954165.502 ops/s
Iteration   7: 1972398.514 ops/s
Iteration   8: 1970355.198 ops/s
Iteration   9: 1997628.492 ops/s
Iteration  10: 1980088.729 ops/s
Iteration  11: 1987804.147 ops/s
Iteration  12: 1982697.174 ops/s
Iteration  13: 1954843.170 ops/s
Iteration  14: 1949693.380 ops/s
Iteration  15: 1977279.863 ops/s
Iteration  16: 2068908.114 ops/s
Iteration  17: 1981974.282 ops/s
Iteration  18: 1977125.355 ops/s
Iteration  19: 1988068.263 ops/s
Iteration  20: 2004871.300 ops/s
Iteration  21: 1979590.598 ops/s
Iteration  22: 2019653.749 ops/s
Iteration  23: 1980757.739 ops/s
Iteration  24: 1972070.632 ops/s
Iteration  25: 1974738.829 ops/s
Iteration  26: 1966679.911 ops/s
Iteration  27: 2009663.766 ops/s
Iteration  28: 1990134.847 ops/s
Iteration  29: 1981650.292 ops/s
Iteration  30: 1985858.883 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testAggregateBy":
  1994404.631 ±(99.9%) 30264.537 ops/s [Average]
  (min, avg, max) = (1930539.771, 1994404.631, 2171885.881), stdev = 45298.537
  CI (99.9%): [1964140.094, 2024669.167] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_testAggregateBy  thrpt   30  1994404.631 ± 30264.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 672967.456 ops/s
# Warmup Iteration   2: 1538880.669 ops/s
# Warmup Iteration   3: 1546194.495 ops/s
# Warmup Iteration   4: 1280518.135 ops/s
# Warmup Iteration   5: 1489638.384 ops/s
# Warmup Iteration   6: 1493628.821 ops/s
# Warmup Iteration   7: 1459764.559 ops/s
# Warmup Iteration   8: 1525396.048 ops/s
# Warmup Iteration   9: 1538165.994 ops/s
# Warmup Iteration  10: 1510031.843 ops/s
# Warmup Iteration  11: 1538221.068 ops/s
# Warmup Iteration  12: 1613246.948 ops/s
# Warmup Iteration  13: 1613706.746 ops/s
# Warmup Iteration  14: 1607930.169 ops/s
# Warmup Iteration  15: 1505277.275 ops/s
# Warmup Iteration  16: 1590363.596 ops/s
# Warmup Iteration  17: 1553984.417 ops/s
# Warmup Iteration  18: 1584294.974 ops/s
# Warmup Iteration  19: 1515962.037 ops/s
# Warmup Iteration  20: 1498958.859 ops/s
# Warmup Iteration  21: 1542673.751 ops/s
# Warmup Iteration  22: 1610463.664 ops/s
# Warmup Iteration  23: 1535183.911 ops/s
# Warmup Iteration  24: 1502908.730 ops/s
# Warmup Iteration  25: 1580099.157 ops/s
# Warmup Iteration  26: 1578039.534 ops/s
# Warmup Iteration  27: 1602467.820 ops/s
# Warmup Iteration  28: 1595201.255 ops/s
# Warmup Iteration  29: 1573456.731 ops/s
# Warmup Iteration  30: 1561260.867 ops/s
Iteration   1: 1573979.679 ops/s
Iteration   2: 1603504.972 ops/s
Iteration   3: 1611086.649 ops/s
Iteration   4: 1571019.274 ops/s
Iteration   5: 1585211.919 ops/s
Iteration   6: 1582783.588 ops/s
Iteration   7: 1603954.658 ops/s
Iteration   8: 1575369.279 ops/s
Iteration   9: 1593379.516 ops/s
Iteration  10: 1591819.577 ops/s
Iteration  11: 1565927.278 ops/s
Iteration  12: 1569295.866 ops/s
Iteration  13: 1582222.219 ops/s
Iteration  14: 1567524.258 ops/s
Iteration  15: 1551664.573 ops/s
Iteration  16: 1553630.176 ops/s
Iteration  17: 1578317.310 ops/s
Iteration  18: 1581131.963 ops/s
Iteration  19: 1562203.097 ops/s
Iteration  20: 1569804.022 ops/s
Iteration  21: 1553596.966 ops/s
Iteration  22: 1567760.803 ops/s
Iteration  23: 1588061.997 ops/s
Iteration  24: 1599228.591 ops/s
Iteration  25: 1587044.301 ops/s
Iteration  26: 1570986.008 ops/s
Iteration  27: 1589591.815 ops/s
Iteration  28: 1615868.522 ops/s
Iteration  29: 1590849.183 ops/s
Iteration  30: 1568042.007 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testClone":
  1580162.002 ±(99.9%) 11118.864 ops/s [Average]
  (min, avg, max) = (1551664.573, 1580162.002, 1615868.522), stdev = 16642.193
  CI (99.9%): [1569043.138, 1591280.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_testClone  thrpt   30  1580162.002 ± 11118.864  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testNewMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testNewMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2132069.580 ops/s
# Warmup Iteration   2: 4671872.281 ops/s
# Warmup Iteration   3: 3867078.432 ops/s
# Warmup Iteration   4: 4650532.830 ops/s
# Warmup Iteration   5: 4688572.949 ops/s
# Warmup Iteration   6: 4587251.716 ops/s
# Warmup Iteration   7: 4666856.068 ops/s
# Warmup Iteration   8: 4605380.411 ops/s
# Warmup Iteration   9: 4658801.058 ops/s
# Warmup Iteration  10: 4710110.465 ops/s
# Warmup Iteration  11: 4576546.530 ops/s
# Warmup Iteration  12: 4641226.321 ops/s
# Warmup Iteration  13: 4624471.661 ops/s
# Warmup Iteration  14: 4613319.431 ops/s
# Warmup Iteration  15: 4577465.584 ops/s
# Warmup Iteration  16: 4629348.791 ops/s
# Warmup Iteration  17: 4610647.983 ops/s
# Warmup Iteration  18: 4673213.119 ops/s
# Warmup Iteration  19: 4668688.940 ops/s
# Warmup Iteration  20: 4653855.527 ops/s
# Warmup Iteration  21: 4680481.623 ops/s
# Warmup Iteration  22: 4672997.266 ops/s
# Warmup Iteration  23: 4648994.793 ops/s
# Warmup Iteration  24: 4695799.496 ops/s
# Warmup Iteration  25: 4633711.948 ops/s
# Warmup Iteration  26: 4630406.584 ops/s
# Warmup Iteration  27: 4659970.263 ops/s
# Warmup Iteration  28: 4635177.036 ops/s
# Warmup Iteration  29: 4613519.662 ops/s
# Warmup Iteration  30: 4605389.857 ops/s
Iteration   1: 4664259.369 ops/s
Iteration   2: 4612954.505 ops/s
Iteration   3: 4638517.549 ops/s
Iteration   4: 4660534.770 ops/s
Iteration   5: 4704882.298 ops/s
Iteration   6: 4642233.742 ops/s
Iteration   7: 4713550.501 ops/s
Iteration   8: 4679923.302 ops/s
Iteration   9: 4656193.392 ops/s
Iteration  10: 4629205.439 ops/s
Iteration  11: 4614784.390 ops/s
Iteration  12: 4655692.481 ops/s
Iteration  13: 4722164.097 ops/s
Iteration  14: 4688642.710 ops/s
Iteration  15: 4618479.279 ops/s
Iteration  16: 4636461.288 ops/s
Iteration  17: 4734048.998 ops/s
Iteration  18: 4742945.178 ops/s
Iteration  19: 4578388.327 ops/s
Iteration  20: 4650033.313 ops/s
Iteration  21: 4697244.553 ops/s
Iteration  22: 4655755.102 ops/s
Iteration  23: 4658671.329 ops/s
Iteration  24: 4649279.778 ops/s
Iteration  25: 4653979.109 ops/s
Iteration  26: 4636165.699 ops/s
Iteration  27: 4691219.276 ops/s
Iteration  28: 4685426.650 ops/s
Iteration  29: 4734181.185 ops/s
Iteration  30: 4753780.395 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testNewMap":
  4668653.267 ±(99.9%) 28615.320 ops/s [Average]
  (min, avg, max) = (4578388.327, 4668653.267, 4753780.395), stdev = 42830.067
  CI (99.9%): [4640037.947, 4697268.586] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_testNewMap  thrpt   30  4668653.267 ± 28615.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testNewMapWithKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testNewMapWithKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2039848.349 ops/s
# Warmup Iteration   2: 4211293.202 ops/s
# Warmup Iteration   3: 3581407.619 ops/s
# Warmup Iteration   4: 4214715.635 ops/s
# Warmup Iteration   5: 4216245.699 ops/s
# Warmup Iteration   6: 4234456.674 ops/s
# Warmup Iteration   7: 4203072.112 ops/s
# Warmup Iteration   8: 4187005.442 ops/s
# Warmup Iteration   9: 4169033.597 ops/s
# Warmup Iteration  10: 4169266.093 ops/s
# Warmup Iteration  11: 4171298.637 ops/s
# Warmup Iteration  12: 4209651.405 ops/s
# Warmup Iteration  13: 4269589.787 ops/s
# Warmup Iteration  14: 4315717.732 ops/s
# Warmup Iteration  15: 4201545.145 ops/s
# Warmup Iteration  16: 4187294.683 ops/s
# Warmup Iteration  17: 4213617.974 ops/s
# Warmup Iteration  18: 4269273.519 ops/s
# Warmup Iteration  19: 4272536.873 ops/s
# Warmup Iteration  20: 4283577.263 ops/s
# Warmup Iteration  21: 4305003.834 ops/s
# Warmup Iteration  22: 4149273.920 ops/s
# Warmup Iteration  23: 3986143.543 ops/s
# Warmup Iteration  24: 3990421.708 ops/s
# Warmup Iteration  25: 4035908.778 ops/s
# Warmup Iteration  26: 4129348.438 ops/s
# Warmup Iteration  27: 4122303.433 ops/s
# Warmup Iteration  28: 4043323.123 ops/s
# Warmup Iteration  29: 4131604.893 ops/s
# Warmup Iteration  30: 4060810.349 ops/s
Iteration   1: 4081358.471 ops/s
Iteration   2: 4123722.184 ops/s
Iteration   3: 4024799.583 ops/s
Iteration   4: 3953306.059 ops/s
Iteration   5: 3905932.027 ops/s
Iteration   6: 3972942.565 ops/s
Iteration   7: 4046982.145 ops/s
Iteration   8: 4098077.063 ops/s
Iteration   9: 4306942.575 ops/s
Iteration  10: 4317381.828 ops/s
Iteration  11: 4076985.868 ops/s
Iteration  12: 3910906.210 ops/s
Iteration  13: 3960809.319 ops/s
Iteration  14: 3986200.516 ops/s
Iteration  15: 4004017.734 ops/s
Iteration  16: 4082914.200 ops/s
Iteration  17: 3952684.376 ops/s
Iteration  18: 4284491.361 ops/s
Iteration  19: 4022406.693 ops/s
Iteration  20: 4077265.625 ops/s
Iteration  21: 4171053.764 ops/s
Iteration  22: 4007530.663 ops/s
Iteration  23: 4082207.928 ops/s
Iteration  24: 4307640.687 ops/s
Iteration  25: 4299613.294 ops/s
Iteration  26: 4308117.230 ops/s
Iteration  27: 4076471.899 ops/s
Iteration  28: 3890267.354 ops/s
Iteration  29: 4249070.334 ops/s
Iteration  30: 4209581.100 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testNewMapWithKeyValue":
  4093056.022 ±(99.9%) 90549.939 ops/s [Average]
  (min, avg, max) = (3890267.354, 4093056.022, 4317381.828), stdev = 135530.896
  CI (99.9%): [4002506.083, 4183605.961] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_testNewMapWithKeyValue  thrpt   30  4093056.022 ± 90549.939  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 969060.295 ops/s
# Warmup Iteration   2: 2071712.315 ops/s
# Warmup Iteration   3: 1676608.521 ops/s
# Warmup Iteration   4: 2107315.993 ops/s
# Warmup Iteration   5: 2096076.832 ops/s
# Warmup Iteration   6: 2025143.478 ops/s
# Warmup Iteration   7: 2087723.546 ops/s
# Warmup Iteration   8: 2090247.108 ops/s
# Warmup Iteration   9: 2220902.939 ops/s
# Warmup Iteration  10: 2192444.582 ops/s
# Warmup Iteration  11: 2185189.109 ops/s
# Warmup Iteration  12: 2207973.475 ops/s
# Warmup Iteration  13: 2020289.803 ops/s
# Warmup Iteration  14: 2107432.784 ops/s
# Warmup Iteration  15: 2158646.085 ops/s
# Warmup Iteration  16: 2240042.034 ops/s
# Warmup Iteration  17: 2134084.202 ops/s
# Warmup Iteration  18: 2196072.265 ops/s
# Warmup Iteration  19: 2053036.319 ops/s
# Warmup Iteration  20: 2182129.964 ops/s
# Warmup Iteration  21: 2213723.092 ops/s
# Warmup Iteration  22: 2054274.838 ops/s
# Warmup Iteration  23: 2056460.761 ops/s
# Warmup Iteration  24: 2036074.778 ops/s
# Warmup Iteration  25: 2167826.808 ops/s
# Warmup Iteration  26: 2060342.077 ops/s
# Warmup Iteration  27: 2053805.259 ops/s
# Warmup Iteration  28: 2106455.290 ops/s
# Warmup Iteration  29: 2191365.470 ops/s
# Warmup Iteration  30: 2054376.342 ops/s
Iteration   1: 2104276.011 ops/s
Iteration   2: 2163277.598 ops/s
Iteration   3: 2137522.260 ops/s
Iteration   4: 2172828.425 ops/s
Iteration   5: 2178008.424 ops/s
Iteration   6: 2073981.391 ops/s
Iteration   7: 2142305.356 ops/s
Iteration   8: 2109229.749 ops/s
Iteration   9: 2173892.386 ops/s
Iteration  10: 2121606.538 ops/s
Iteration  11: 2026568.732 ops/s
Iteration  12: 2085410.209 ops/s
Iteration  13: 1997684.430 ops/s
Iteration  14: 2154753.860 ops/s
Iteration  15: 2181735.683 ops/s
Iteration  16: 2145026.330 ops/s
Iteration  17: 2110208.106 ops/s
Iteration  18: 2164621.987 ops/s
Iteration  19: 2084009.122 ops/s
Iteration  20: 2242125.880 ops/s
Iteration  21: 2242630.559 ops/s
Iteration  22: 2172158.942 ops/s
Iteration  23: 2198272.788 ops/s
Iteration  24: 2098663.517 ops/s
Iteration  25: 2049440.346 ops/s
Iteration  26: 2050673.964 ops/s
Iteration  27: 2019076.913 ops/s
Iteration  28: 2080281.137 ops/s
Iteration  29: 2055899.510 ops/s
Iteration  30: 2014575.277 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_testToString":
  2118358.181 ±(99.9%) 43702.327 ops/s [Average]
  (min, avg, max) = (1997684.430, 2118358.181, 2242630.559), stdev = 65411.591
  CI (99.9%): [2074655.854, 2162060.508] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_testToString  thrpt   30  2118358.181 ± 43702.327  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_test_toString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_test_toString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1090504.289 ops/s
# Warmup Iteration   2: 2774418.411 ops/s
# Warmup Iteration   3: 2855587.977 ops/s
# Warmup Iteration   4: 2156036.738 ops/s
# Warmup Iteration   5: 2668058.195 ops/s
# Warmup Iteration   6: 2682498.336 ops/s
# Warmup Iteration   7: 2765015.285 ops/s
# Warmup Iteration   8: 2763300.473 ops/s
# Warmup Iteration   9: 2900217.376 ops/s
# Warmup Iteration  10: 2849651.751 ops/s
# Warmup Iteration  11: 2843645.839 ops/s
# Warmup Iteration  12: 2681777.070 ops/s
# Warmup Iteration  13: 2674260.361 ops/s
# Warmup Iteration  14: 2747338.076 ops/s
# Warmup Iteration  15: 2726019.149 ops/s
# Warmup Iteration  16: 2689679.315 ops/s
# Warmup Iteration  17: 2664550.121 ops/s
# Warmup Iteration  18: 2698652.548 ops/s
# Warmup Iteration  19: 2673201.472 ops/s
# Warmup Iteration  20: 2705160.872 ops/s
# Warmup Iteration  21: 2780178.394 ops/s
# Warmup Iteration  22: 2789455.478 ops/s
# Warmup Iteration  23: 2641255.023 ops/s
# Warmup Iteration  24: 2654937.432 ops/s
# Warmup Iteration  25: 2666066.182 ops/s
# Warmup Iteration  26: 2714666.437 ops/s
# Warmup Iteration  27: 2652167.677 ops/s
# Warmup Iteration  28: 2639900.713 ops/s
# Warmup Iteration  29: 2642509.931 ops/s
# Warmup Iteration  30: 2644339.316 ops/s
Iteration   1: 2656857.333 ops/s
Iteration   2: 2711528.636 ops/s
Iteration   3: 2695038.953 ops/s
Iteration   4: 2667858.319 ops/s
Iteration   5: 2783017.922 ops/s
Iteration   6: 2663218.777 ops/s
Iteration   7: 2681877.163 ops/s
Iteration   8: 2715946.720 ops/s
Iteration   9: 2630895.136 ops/s
Iteration  10: 2706809.793 ops/s
Iteration  11: 2672836.779 ops/s
Iteration  12: 2692011.257 ops/s
Iteration  13: 2724349.356 ops/s
Iteration  14: 2654545.050 ops/s
Iteration  15: 2685280.710 ops/s
Iteration  16: 2606145.904 ops/s
Iteration  17: 2690604.126 ops/s
Iteration  18: 2762757.621 ops/s
Iteration  19: 2746164.782 ops/s
Iteration  20: 2719272.897 ops/s
Iteration  21: 2685906.191 ops/s
Iteration  22: 2766246.549 ops/s
Iteration  23: 2820575.827 ops/s
Iteration  24: 2727114.418 ops/s
Iteration  25: 2612759.139 ops/s
Iteration  26: 2661100.223 ops/s
Iteration  27: 2880159.814 ops/s
Iteration  28: 2720815.251 ops/s
Iteration  29: 2691370.693 ops/s
Iteration  30: 2869057.584 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_test_toString":
  2710070.764 ±(99.9%) 43547.678 ops/s [Average]
  (min, avg, max) = (2606145.904, 2710070.764, 2880159.814), stdev = 65180.119
  CI (99.9%): [2666523.086, 2753618.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_test_toString  thrpt   30  2710070.764 ± 43547.678  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748087.894 ops/s
# Warmup Iteration   2: 1679696.346 ops/s
# Warmup Iteration   3: 1785260.788 ops/s
# Warmup Iteration   4: 1599511.345 ops/s
# Warmup Iteration   5: 1587264.848 ops/s
# Warmup Iteration   6: 1749138.285 ops/s
# Warmup Iteration   7: 1760535.201 ops/s
# Warmup Iteration   8: 1740693.005 ops/s
# Warmup Iteration   9: 1745864.165 ops/s
# Warmup Iteration  10: 1766037.163 ops/s
# Warmup Iteration  11: 1765879.210 ops/s
# Warmup Iteration  12: 1762947.603 ops/s
# Warmup Iteration  13: 1750701.239 ops/s
# Warmup Iteration  14: 1765503.878 ops/s
# Warmup Iteration  15: 1757160.202 ops/s
# Warmup Iteration  16: 1775151.602 ops/s
# Warmup Iteration  17: 1771929.796 ops/s
# Warmup Iteration  18: 1737643.469 ops/s
# Warmup Iteration  19: 1734838.665 ops/s
# Warmup Iteration  20: 1783182.783 ops/s
# Warmup Iteration  21: 1735018.023 ops/s
# Warmup Iteration  22: 1808618.592 ops/s
# Warmup Iteration  23: 1743358.255 ops/s
# Warmup Iteration  24: 1732714.926 ops/s
# Warmup Iteration  25: 1781512.971 ops/s
# Warmup Iteration  26: 1821139.429 ops/s
# Warmup Iteration  27: 1745929.574 ops/s
# Warmup Iteration  28: 1809792.354 ops/s
# Warmup Iteration  29: 1781033.763 ops/s
# Warmup Iteration  30: 1874050.307 ops/s
Iteration   1: 1758555.027 ops/s
Iteration   2: 1892559.061 ops/s
Iteration   3: 1917655.864 ops/s
Iteration   4: 1915347.599 ops/s
Iteration   5: 1924846.563 ops/s
Iteration   6: 1898021.245 ops/s
Iteration   7: 1915987.379 ops/s
Iteration   8: 1880467.540 ops/s
Iteration   9: 1753593.186 ops/s
Iteration  10: 1785306.246 ops/s
Iteration  11: 1836970.606 ops/s
Iteration  12: 1875660.881 ops/s
Iteration  13: 1759442.827 ops/s
Iteration  14: 1737152.917 ops/s
Iteration  15: 1812789.514 ops/s
Iteration  16: 1720485.357 ops/s
Iteration  17: 1735631.279 ops/s
Iteration  18: 1752464.703 ops/s
Iteration  19: 1760892.687 ops/s
Iteration  20: 1781733.730 ops/s
Iteration  21: 1770910.902 ops/s
Iteration  22: 1775220.491 ops/s
Iteration  23: 1834370.780 ops/s
Iteration  24: 1758464.581 ops/s
Iteration  25: 1911006.154 ops/s
Iteration  26: 1733853.662 ops/s
Iteration  27: 1759875.731 ops/s
Iteration  28: 1781239.881 ops/s
Iteration  29: 1812087.954 ops/s
Iteration  30: 1737111.107 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toArray":
  1809656.849 ±(99.9%) 45869.541 ops/s [Average]
  (min, avg, max) = (1720485.357, 1809656.849, 1924846.563), stdev = 68655.375
  CI (99.9%): [1763787.307, 1855526.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_toArray  thrpt   30  1809656.849 ± 45869.541  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690049.667 ops/s
# Warmup Iteration   2: 1360901.156 ops/s
# Warmup Iteration   3: 1507256.719 ops/s
# Warmup Iteration   4: 1592130.443 ops/s
# Warmup Iteration   5: 1354564.474 ops/s
# Warmup Iteration   6: 1538188.715 ops/s
# Warmup Iteration   7: 1492480.077 ops/s
# Warmup Iteration   8: 1508198.824 ops/s
# Warmup Iteration   9: 1636566.416 ops/s
# Warmup Iteration  10: 1550715.292 ops/s
# Warmup Iteration  11: 1570759.568 ops/s
# Warmup Iteration  12: 1528533.492 ops/s
# Warmup Iteration  13: 1487962.254 ops/s
# Warmup Iteration  14: 1536603.890 ops/s
# Warmup Iteration  15: 1543304.831 ops/s
# Warmup Iteration  16: 1516525.835 ops/s
# Warmup Iteration  17: 1527351.772 ops/s
# Warmup Iteration  18: 1517824.091 ops/s
# Warmup Iteration  19: 1572519.998 ops/s
# Warmup Iteration  20: 1520501.297 ops/s
# Warmup Iteration  21: 1497897.937 ops/s
# Warmup Iteration  22: 1507280.752 ops/s
# Warmup Iteration  23: 1536346.805 ops/s
# Warmup Iteration  24: 1532743.046 ops/s
# Warmup Iteration  25: 1548846.191 ops/s
# Warmup Iteration  26: 1546065.805 ops/s
# Warmup Iteration  27: 1489890.154 ops/s
# Warmup Iteration  28: 1568985.894 ops/s
# Warmup Iteration  29: 1515080.029 ops/s
# Warmup Iteration  30: 1526971.951 ops/s
Iteration   1: 1638302.704 ops/s
Iteration   2: 1526726.224 ops/s
Iteration   3: 1513765.523 ops/s
Iteration   4: 1602595.033 ops/s
Iteration   5: 1539586.772 ops/s
Iteration   6: 1633669.673 ops/s
Iteration   7: 1579152.419 ops/s
Iteration   8: 1588001.796 ops/s
Iteration   9: 1538697.184 ops/s
Iteration  10: 1528557.283 ops/s
Iteration  11: 1577665.270 ops/s
Iteration  12: 1526452.075 ops/s
Iteration  13: 1495118.757 ops/s
Iteration  14: 1639341.448 ops/s
Iteration  15: 1496515.393 ops/s
Iteration  16: 1542776.795 ops/s
Iteration  17: 1577294.748 ops/s
Iteration  18: 1527409.830 ops/s
Iteration  19: 1538680.635 ops/s
Iteration  20: 1534227.341 ops/s
Iteration  21: 1562240.154 ops/s
Iteration  22: 1526457.860 ops/s
Iteration  23: 1487344.813 ops/s
Iteration  24: 1502413.750 ops/s
Iteration  25: 1523113.838 ops/s
Iteration  26: 1557022.509 ops/s
Iteration  27: 1556600.115 ops/s
Iteration  28: 1527656.680 ops/s
Iteration  29: 1506093.624 ops/s
Iteration  30: 1508177.567 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toBag":
  1546721.927 ±(99.9%) 27971.512 ops/s [Average]
  (min, avg, max) = (1487344.813, 1546721.927, 1639341.448), stdev = 41866.446
  CI (99.9%): [1518750.415, 1574693.440] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_toBag  thrpt   30  1546721.927 ± 27971.512  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 808993.849 ops/s
# Warmup Iteration   2: 1918836.950 ops/s
# Warmup Iteration   3: 1915500.627 ops/s
# Warmup Iteration   4: 1622997.921 ops/s
# Warmup Iteration   5: 1932791.371 ops/s
# Warmup Iteration   6: 1956639.951 ops/s
# Warmup Iteration   7: 1895678.367 ops/s
# Warmup Iteration   8: 1941441.946 ops/s
# Warmup Iteration   9: 2046868.031 ops/s
# Warmup Iteration  10: 1970711.799 ops/s
# Warmup Iteration  11: 2027276.425 ops/s
# Warmup Iteration  12: 1931099.183 ops/s
# Warmup Iteration  13: 1963336.818 ops/s
# Warmup Iteration  14: 1930957.191 ops/s
# Warmup Iteration  15: 1923110.437 ops/s
# Warmup Iteration  16: 1970258.038 ops/s
# Warmup Iteration  17: 1933094.494 ops/s
# Warmup Iteration  18: 1930571.468 ops/s
# Warmup Iteration  19: 1986708.802 ops/s
# Warmup Iteration  20: 1968428.404 ops/s
# Warmup Iteration  21: 1908311.378 ops/s
# Warmup Iteration  22: 1927659.329 ops/s
# Warmup Iteration  23: 1963498.904 ops/s
# Warmup Iteration  24: 1980498.793 ops/s
# Warmup Iteration  25: 1897737.574 ops/s
# Warmup Iteration  26: 1909998.739 ops/s
# Warmup Iteration  27: 1911904.891 ops/s
# Warmup Iteration  28: 1926055.341 ops/s
# Warmup Iteration  29: 1963870.713 ops/s
# Warmup Iteration  30: 1952398.869 ops/s
Iteration   1: 1913894.795 ops/s
Iteration   2: 1923325.968 ops/s
Iteration   3: 1935155.759 ops/s
Iteration   4: 2000484.388 ops/s
Iteration   5: 1993548.459 ops/s
Iteration   6: 1974420.702 ops/s
Iteration   7: 2030440.582 ops/s
Iteration   8: 1913788.625 ops/s
Iteration   9: 1889672.617 ops/s
Iteration  10: 2093547.057 ops/s
Iteration  11: 2090280.731 ops/s
Iteration  12: 1976816.290 ops/s
Iteration  13: 1958673.680 ops/s
Iteration  14: 1928699.001 ops/s
Iteration  15: 1917343.872 ops/s
Iteration  16: 1933555.856 ops/s
Iteration  17: 2015038.153 ops/s
Iteration  18: 2094392.215 ops/s
Iteration  19: 2039232.985 ops/s
Iteration  20: 1904887.794 ops/s
Iteration  21: 1927524.731 ops/s
Iteration  22: 1924731.873 ops/s
Iteration  23: 1917006.714 ops/s
Iteration  24: 1911496.970 ops/s
Iteration  25: 1887371.378 ops/s
Iteration  26: 1904770.019 ops/s
Iteration  27: 1918808.853 ops/s
Iteration  28: 2012107.758 ops/s
Iteration  29: 1991479.981 ops/s
Iteration  30: 1971517.788 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toImmutable":
  1963133.853 ±(99.9%) 40803.396 ops/s [Average]
  (min, avg, max) = (1887371.378, 1963133.853, 2094392.215), stdev = 61072.606
  CI (99.9%): [1922330.457, 2003937.249] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_toImmutable  thrpt   30  1963133.853 ± 40803.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1335670.499 ops/s
# Warmup Iteration   2: 3660476.677 ops/s
# Warmup Iteration   3: 3604927.874 ops/s
# Warmup Iteration   4: 3332378.787 ops/s
# Warmup Iteration   5: 3752024.628 ops/s
# Warmup Iteration   6: 3729646.589 ops/s
# Warmup Iteration   7: 3932670.525 ops/s
# Warmup Iteration   8: 4054486.467 ops/s
# Warmup Iteration   9: 4058515.340 ops/s
# Warmup Iteration  10: 3900028.624 ops/s
# Warmup Iteration  11: 3693812.585 ops/s
# Warmup Iteration  12: 3938066.302 ops/s
# Warmup Iteration  13: 3783804.640 ops/s
# Warmup Iteration  14: 3853335.520 ops/s
# Warmup Iteration  15: 3751459.311 ops/s
# Warmup Iteration  16: 3850018.859 ops/s
# Warmup Iteration  17: 3819304.286 ops/s
# Warmup Iteration  18: 3858278.535 ops/s
# Warmup Iteration  19: 3743271.987 ops/s
# Warmup Iteration  20: 3669028.388 ops/s
# Warmup Iteration  21: 3671842.951 ops/s
# Warmup Iteration  22: 3664857.378 ops/s
# Warmup Iteration  23: 3735524.334 ops/s
# Warmup Iteration  24: 3756431.396 ops/s
# Warmup Iteration  25: 3743027.050 ops/s
# Warmup Iteration  26: 3812116.691 ops/s
# Warmup Iteration  27: 3677594.005 ops/s
# Warmup Iteration  28: 3657043.001 ops/s
# Warmup Iteration  29: 3740948.160 ops/s
# Warmup Iteration  30: 3679217.618 ops/s
Iteration   1: 3789985.419 ops/s
Iteration   2: 3756857.362 ops/s
Iteration   3: 3758959.880 ops/s
Iteration   4: 3635811.034 ops/s
Iteration   5: 3747488.381 ops/s
Iteration   6: 3711110.753 ops/s
Iteration   7: 3841570.729 ops/s
Iteration   8: 3827393.191 ops/s
Iteration   9: 3703975.754 ops/s
Iteration  10: 3762218.966 ops/s
Iteration  11: 4058043.947 ops/s
Iteration  12: 4064743.120 ops/s
Iteration  13: 4055192.636 ops/s
Iteration  14: 3911588.973 ops/s
Iteration  15: 3708093.773 ops/s
Iteration  16: 3799515.174 ops/s
Iteration  17: 3679262.511 ops/s
Iteration  18: 3776664.836 ops/s
Iteration  19: 3670207.031 ops/s
Iteration  20: 3650286.452 ops/s
Iteration  21: 3748635.390 ops/s
Iteration  22: 3712088.213 ops/s
Iteration  23: 3640953.505 ops/s
Iteration  24: 3718175.242 ops/s
Iteration  25: 3679391.760 ops/s
Iteration  26: 3771256.876 ops/s
Iteration  27: 3756580.359 ops/s
Iteration  28: 3765254.323 ops/s
Iteration  29: 3888178.565 ops/s
Iteration  30: 3669265.653 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toList":
  3775291.660 ±(99.9%) 78352.456 ops/s [Average]
  (min, avg, max) = (3635811.034, 3775291.660, 4064743.120), stdev = 117274.277
  CI (99.9%): [3696939.204, 3853644.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_toList  thrpt   30  3775291.660 ± 78352.456  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1444878.034 ops/s
# Warmup Iteration   2: 3878190.826 ops/s
# Warmup Iteration   3: 3736609.983 ops/s
# Warmup Iteration   4: 3162972.795 ops/s
# Warmup Iteration   5: 3615199.042 ops/s
# Warmup Iteration   6: 3701902.761 ops/s
# Warmup Iteration   7: 3783657.380 ops/s
# Warmup Iteration   8: 3811621.027 ops/s
# Warmup Iteration   9: 3786839.178 ops/s
# Warmup Iteration  10: 3779491.215 ops/s
# Warmup Iteration  11: 3657472.335 ops/s
# Warmup Iteration  12: 3596480.865 ops/s
# Warmup Iteration  13: 3614011.849 ops/s
# Warmup Iteration  14: 3812019.183 ops/s
# Warmup Iteration  15: 3675357.012 ops/s
# Warmup Iteration  16: 3722404.003 ops/s
# Warmup Iteration  17: 3636804.792 ops/s
# Warmup Iteration  18: 3614080.755 ops/s
# Warmup Iteration  19: 3665914.434 ops/s
# Warmup Iteration  20: 3738544.503 ops/s
# Warmup Iteration  21: 3773388.610 ops/s
# Warmup Iteration  22: 3712810.498 ops/s
# Warmup Iteration  23: 3705247.619 ops/s
# Warmup Iteration  24: 3697361.855 ops/s
# Warmup Iteration  25: 3696053.358 ops/s
# Warmup Iteration  26: 3795222.690 ops/s
# Warmup Iteration  27: 3802669.602 ops/s
# Warmup Iteration  28: 3825891.855 ops/s
# Warmup Iteration  29: 3924657.132 ops/s
# Warmup Iteration  30: 3943781.235 ops/s
Iteration   1: 3932132.724 ops/s
Iteration   2: 3910876.774 ops/s
Iteration   3: 3910701.074 ops/s
Iteration   4: 3894120.560 ops/s
Iteration   5: 3818542.187 ops/s
Iteration   6: 3856239.672 ops/s
Iteration   7: 3826524.522 ops/s
Iteration   8: 3822374.541 ops/s
Iteration   9: 3872755.951 ops/s
Iteration  10: 3827301.045 ops/s
Iteration  11: 3843989.921 ops/s
Iteration  12: 3886421.588 ops/s
Iteration  13: 3858628.884 ops/s
Iteration  14: 3839459.335 ops/s
Iteration  15: 3880790.925 ops/s
Iteration  16: 3830293.352 ops/s
Iteration  17: 3816963.263 ops/s
Iteration  18: 3847508.005 ops/s
Iteration  19: 3860193.979 ops/s
Iteration  20: 3908529.580 ops/s
Iteration  21: 3825872.742 ops/s
Iteration  22: 3810784.939 ops/s
Iteration  23: 3828440.673 ops/s
Iteration  24: 3799569.015 ops/s
Iteration  25: 3869685.753 ops/s
Iteration  26: 3820440.136 ops/s
Iteration  27: 3761623.913 ops/s
Iteration  28: 3913825.452 ops/s
Iteration  29: 3811238.365 ops/s
Iteration  30: 3827885.304 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toMap":
  3850457.139 ±(99.9%) 26962.313 ops/s [Average]
  (min, avg, max) = (3761623.913, 3850457.139, 3932132.724), stdev = 40355.924
  CI (99.9%): [3823494.826, 3877419.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_toMap  thrpt   30  3850457.139 ± 26962.313  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1911165.624 ops/s
# Warmup Iteration   2: 4225687.778 ops/s
# Warmup Iteration   3: 3551844.046 ops/s
# Warmup Iteration   4: 4198060.620 ops/s
# Warmup Iteration   5: 4186560.181 ops/s
# Warmup Iteration   6: 4146092.793 ops/s
# Warmup Iteration   7: 4153772.119 ops/s
# Warmup Iteration   8: 4190321.753 ops/s
# Warmup Iteration   9: 4101124.009 ops/s
# Warmup Iteration  10: 4189088.891 ops/s
# Warmup Iteration  11: 4171346.247 ops/s
# Warmup Iteration  12: 4161934.842 ops/s
# Warmup Iteration  13: 4120228.088 ops/s
# Warmup Iteration  14: 4161475.343 ops/s
# Warmup Iteration  15: 4218029.155 ops/s
# Warmup Iteration  16: 4118236.379 ops/s
# Warmup Iteration  17: 4221307.381 ops/s
# Warmup Iteration  18: 4132217.879 ops/s
# Warmup Iteration  19: 4230917.569 ops/s
# Warmup Iteration  20: 4154494.225 ops/s
# Warmup Iteration  21: 4140873.503 ops/s
# Warmup Iteration  22: 4105645.215 ops/s
# Warmup Iteration  23: 4129462.109 ops/s
# Warmup Iteration  24: 4111236.475 ops/s
# Warmup Iteration  25: 4135165.788 ops/s
# Warmup Iteration  26: 4209165.586 ops/s
# Warmup Iteration  27: 4176749.820 ops/s
# Warmup Iteration  28: 4156667.366 ops/s
# Warmup Iteration  29: 4093528.214 ops/s
# Warmup Iteration  30: 4122253.040 ops/s
Iteration   1: 4157185.542 ops/s
Iteration   2: 4105627.139 ops/s
Iteration   3: 4186130.844 ops/s
Iteration   4: 4216801.732 ops/s
Iteration   5: 4237646.371 ops/s
Iteration   6: 4234727.297 ops/s
Iteration   7: 4209156.580 ops/s
Iteration   8: 4172719.333 ops/s
Iteration   9: 4187901.663 ops/s
Iteration  10: 4241312.515 ops/s
Iteration  11: 4092749.149 ops/s
Iteration  12: 4103316.126 ops/s
Iteration  13: 4099463.355 ops/s
Iteration  14: 4113005.713 ops/s
Iteration  15: 4216268.610 ops/s
Iteration  16: 4184849.187 ops/s
Iteration  17: 4090251.422 ops/s
Iteration  18: 4235181.625 ops/s
Iteration  19: 4115301.631 ops/s
Iteration  20: 4176605.703 ops/s
Iteration  21: 4112213.505 ops/s
Iteration  22: 4173832.630 ops/s
Iteration  23: 4132532.986 ops/s
Iteration  24: 4155448.950 ops/s
Iteration  25: 4096781.440 ops/s
Iteration  26: 4254478.002 ops/s
Iteration  27: 4176424.593 ops/s
Iteration  28: 4112737.171 ops/s
Iteration  29: 4163055.518 ops/s
Iteration  30: 4178003.160 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSet":
  4164390.316 ±(99.9%) 34442.392 ops/s [Average]
  (min, avg, max) = (4090251.422, 4164390.316, 4254478.002), stdev = 51551.754
  CI (99.9%): [4129947.925, 4198832.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_toSet  thrpt   30  4164390.316 ± 34442.392  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 259166.125 ops/s
# Warmup Iteration   2: 457256.017 ops/s
# Warmup Iteration   3: 528170.357 ops/s
# Warmup Iteration   4: 543263.884 ops/s
# Warmup Iteration   5: 545456.335 ops/s
# Warmup Iteration   6: 458997.754 ops/s
# Warmup Iteration   7: 545846.158 ops/s
# Warmup Iteration   8: 544841.932 ops/s
# Warmup Iteration   9: 544504.172 ops/s
# Warmup Iteration  10: 546536.066 ops/s
# Warmup Iteration  11: 540663.802 ops/s
# Warmup Iteration  12: 540721.653 ops/s
# Warmup Iteration  13: 540987.261 ops/s
# Warmup Iteration  14: 541244.934 ops/s
# Warmup Iteration  15: 539537.026 ops/s
# Warmup Iteration  16: 538883.289 ops/s
# Warmup Iteration  17: 536914.743 ops/s
# Warmup Iteration  18: 539498.186 ops/s
# Warmup Iteration  19: 536643.339 ops/s
# Warmup Iteration  20: 540300.935 ops/s
# Warmup Iteration  21: 537977.489 ops/s
# Warmup Iteration  22: 537180.955 ops/s
# Warmup Iteration  23: 541388.614 ops/s
# Warmup Iteration  24: 541686.289 ops/s
# Warmup Iteration  25: 542064.811 ops/s
# Warmup Iteration  26: 543179.912 ops/s
# Warmup Iteration  27: 536666.906 ops/s
# Warmup Iteration  28: 533396.247 ops/s
# Warmup Iteration  29: 537179.984 ops/s
# Warmup Iteration  30: 530477.303 ops/s
Iteration   1: 527717.715 ops/s
Iteration   2: 524125.373 ops/s
Iteration   3: 529445.873 ops/s
Iteration   4: 535913.649 ops/s
Iteration   5: 527574.931 ops/s
Iteration   6: 540744.916 ops/s
Iteration   7: 538149.904 ops/s
Iteration   8: 527981.124 ops/s
Iteration   9: 529787.064 ops/s
Iteration  10: 543648.346 ops/s
Iteration  11: 534017.685 ops/s
Iteration  12: 527345.054 ops/s
Iteration  13: 536284.884 ops/s
Iteration  14: 536920.778 ops/s
Iteration  15: 516541.265 ops/s
Iteration  16: 525281.339 ops/s
Iteration  17: 543637.813 ops/s
Iteration  18: 542853.496 ops/s
Iteration  19: 542634.911 ops/s
Iteration  20: 528426.145 ops/s
Iteration  21: 531706.103 ops/s
Iteration  22: 524520.543 ops/s
Iteration  23: 534702.563 ops/s
Iteration  24: 522380.846 ops/s
Iteration  25: 525937.486 ops/s
Iteration  26: 532678.646 ops/s
Iteration  27: 537160.419 ops/s
Iteration  28: 529230.182 ops/s
Iteration  29: 539050.988 ops/s
Iteration  30: 543187.728 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedBag":
  532652.926 ±(99.9%) 4827.092 ops/s [Average]
  (min, avg, max) = (516541.265, 532652.926, 543648.346), stdev = 7224.965
  CI (99.9%): [527825.833, 537480.018] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_toSortedBag  thrpt   30  532652.926 ± 4827.092  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 291839.031 ops/s
# Warmup Iteration   2: 680847.576 ops/s
# Warmup Iteration   3: 718784.836 ops/s
# Warmup Iteration   4: 688238.375 ops/s
# Warmup Iteration   5: 646112.694 ops/s
# Warmup Iteration   6: 721359.031 ops/s
# Warmup Iteration   7: 731290.887 ops/s
# Warmup Iteration   8: 719068.473 ops/s
# Warmup Iteration   9: 724843.129 ops/s
# Warmup Iteration  10: 732255.133 ops/s
# Warmup Iteration  11: 701634.236 ops/s
# Warmup Iteration  12: 683104.397 ops/s
# Warmup Iteration  13: 679256.894 ops/s
# Warmup Iteration  14: 705081.529 ops/s
# Warmup Iteration  15: 713225.736 ops/s
# Warmup Iteration  16: 672024.159 ops/s
# Warmup Iteration  17: 677943.930 ops/s
# Warmup Iteration  18: 704369.600 ops/s
# Warmup Iteration  19: 699830.652 ops/s
# Warmup Iteration  20: 680071.993 ops/s
# Warmup Iteration  21: 672665.187 ops/s
# Warmup Iteration  22: 700587.165 ops/s
# Warmup Iteration  23: 715157.601 ops/s
# Warmup Iteration  24: 720139.600 ops/s
# Warmup Iteration  25: 687730.965 ops/s
# Warmup Iteration  26: 692198.161 ops/s
# Warmup Iteration  27: 681384.244 ops/s
# Warmup Iteration  28: 732539.560 ops/s
# Warmup Iteration  29: 703697.033 ops/s
# Warmup Iteration  30: 698641.945 ops/s
Iteration   1: 700494.830 ops/s
Iteration   2: 688592.610 ops/s
Iteration   3: 686907.571 ops/s
Iteration   4: 687317.166 ops/s
Iteration   5: 692236.915 ops/s
Iteration   6: 733673.486 ops/s
Iteration   7: 732276.692 ops/s
Iteration   8: 733291.720 ops/s
Iteration   9: 733282.587 ops/s
Iteration  10: 735735.376 ops/s
Iteration  11: 726531.440 ops/s
Iteration  12: 714557.301 ops/s
Iteration  13: 680404.162 ops/s
Iteration  14: 669464.535 ops/s
Iteration  15: 682616.282 ops/s
Iteration  16: 674672.713 ops/s
Iteration  17: 663402.425 ops/s
Iteration  18: 659612.142 ops/s
Iteration  19: 675599.490 ops/s
Iteration  20: 673577.670 ops/s
Iteration  21: 681009.252 ops/s
Iteration  22: 678719.227 ops/s
Iteration  23: 668177.031 ops/s
Iteration  24: 670604.839 ops/s
Iteration  25: 666897.516 ops/s
Iteration  26: 699278.959 ops/s
Iteration  27: 674519.475 ops/s
Iteration  28: 677124.627 ops/s
Iteration  29: 681118.403 ops/s
Iteration  30: 673031.888 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedBagBy":
  690490.944 ±(99.9%) 16158.035 ops/s [Average]
  (min, avg, max) = (659612.142, 690490.944, 735735.376), stdev = 24184.588
  CI (99.9%): [674332.909, 706648.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  690490.944 ± 16158.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1196446.207 ops/s
# Warmup Iteration   2: 2729524.536 ops/s
# Warmup Iteration   3: 2897039.215 ops/s
# Warmup Iteration   4: 2283897.600 ops/s
# Warmup Iteration   5: 2765533.751 ops/s
# Warmup Iteration   6: 2851380.453 ops/s
# Warmup Iteration   7: 2719163.295 ops/s
# Warmup Iteration   8: 2983721.968 ops/s
# Warmup Iteration   9: 2925456.242 ops/s
# Warmup Iteration  10: 2711836.362 ops/s
# Warmup Iteration  11: 2924198.929 ops/s
# Warmup Iteration  12: 2773723.340 ops/s
# Warmup Iteration  13: 2849725.753 ops/s
# Warmup Iteration  14: 2984516.770 ops/s
# Warmup Iteration  15: 2829299.786 ops/s
# Warmup Iteration  16: 2725310.746 ops/s
# Warmup Iteration  17: 2692506.313 ops/s
# Warmup Iteration  18: 2766737.219 ops/s
# Warmup Iteration  19: 2711702.419 ops/s
# Warmup Iteration  20: 2725207.289 ops/s
# Warmup Iteration  21: 2772873.557 ops/s
# Warmup Iteration  22: 2741165.375 ops/s
# Warmup Iteration  23: 2719372.138 ops/s
# Warmup Iteration  24: 2727716.198 ops/s
# Warmup Iteration  25: 2730891.279 ops/s
# Warmup Iteration  26: 2736261.914 ops/s
# Warmup Iteration  27: 2693252.848 ops/s
# Warmup Iteration  28: 2762585.238 ops/s
# Warmup Iteration  29: 2742591.416 ops/s
# Warmup Iteration  30: 2769231.775 ops/s
Iteration   1: 2735286.829 ops/s
Iteration   2: 2752729.108 ops/s
Iteration   3: 2744072.784 ops/s
Iteration   4: 2834986.650 ops/s
Iteration   5: 2817623.681 ops/s
Iteration   6: 2811524.818 ops/s
Iteration   7: 2791950.426 ops/s
Iteration   8: 2770479.749 ops/s
Iteration   9: 2715017.131 ops/s
Iteration  10: 2780727.865 ops/s
Iteration  11: 2739468.015 ops/s
Iteration  12: 2779955.114 ops/s
Iteration  13: 2710206.385 ops/s
Iteration  14: 2758693.523 ops/s
Iteration  15: 2709494.467 ops/s
Iteration  16: 2788109.994 ops/s
Iteration  17: 2825886.992 ops/s
Iteration  18: 2775157.774 ops/s
Iteration  19: 2723195.900 ops/s
Iteration  20: 2739531.633 ops/s
Iteration  21: 2741893.041 ops/s
Iteration  22: 2697818.870 ops/s
Iteration  23: 2773243.719 ops/s
Iteration  24: 2725784.907 ops/s
Iteration  25: 2831653.097 ops/s
Iteration  26: 2968984.642 ops/s
Iteration  27: 2994082.470 ops/s
Iteration  28: 2869285.894 ops/s
Iteration  29: 2849830.298 ops/s
Iteration  30: 2831277.781 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedList":
  2786265.119 ±(99.9%) 46854.551 ops/s [Average]
  (min, avg, max) = (2697818.870, 2786265.119, 2994082.470), stdev = 70129.691
  CI (99.9%): [2739410.568, 2833119.669] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_toSortedList  thrpt   30  2786265.119 ± 46854.551  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1033731.240 ops/s
# Warmup Iteration   2: 2423933.355 ops/s
# Warmup Iteration   3: 2455238.982 ops/s
# Warmup Iteration   4: 2018129.489 ops/s
# Warmup Iteration   5: 2510295.608 ops/s
# Warmup Iteration   6: 2464292.397 ops/s
# Warmup Iteration   7: 2485373.548 ops/s
# Warmup Iteration   8: 2434266.446 ops/s
# Warmup Iteration   9: 2485225.519 ops/s
# Warmup Iteration  10: 2471896.576 ops/s
# Warmup Iteration  11: 2458993.342 ops/s
# Warmup Iteration  12: 2519876.336 ops/s
# Warmup Iteration  13: 2531877.690 ops/s
# Warmup Iteration  14: 2528048.939 ops/s
# Warmup Iteration  15: 2632502.486 ops/s
# Warmup Iteration  16: 2470961.041 ops/s
# Warmup Iteration  17: 2523574.952 ops/s
# Warmup Iteration  18: 2416508.051 ops/s
# Warmup Iteration  19: 2555820.854 ops/s
# Warmup Iteration  20: 2650786.431 ops/s
# Warmup Iteration  21: 2420177.242 ops/s
# Warmup Iteration  22: 2424632.452 ops/s
# Warmup Iteration  23: 2423360.993 ops/s
# Warmup Iteration  24: 2372842.554 ops/s
# Warmup Iteration  25: 2392100.138 ops/s
# Warmup Iteration  26: 2424957.939 ops/s
# Warmup Iteration  27: 2493237.277 ops/s
# Warmup Iteration  28: 2631259.640 ops/s
# Warmup Iteration  29: 2594373.002 ops/s
# Warmup Iteration  30: 2443313.204 ops/s
Iteration   1: 2436405.591 ops/s
Iteration   2: 2393555.101 ops/s
Iteration   3: 2394228.983 ops/s
Iteration   4: 2422128.656 ops/s
Iteration   5: 2404143.657 ops/s
Iteration   6: 2395714.457 ops/s
Iteration   7: 2634774.808 ops/s
Iteration   8: 2687772.375 ops/s
Iteration   9: 2649255.033 ops/s
Iteration  10: 2530526.562 ops/s
Iteration  11: 2480993.506 ops/s
Iteration  12: 2469939.226 ops/s
Iteration  13: 2438655.993 ops/s
Iteration  14: 2460198.104 ops/s
Iteration  15: 2507321.944 ops/s
Iteration  16: 2505804.638 ops/s
Iteration  17: 2530804.473 ops/s
Iteration  18: 2503839.779 ops/s
Iteration  19: 2520856.201 ops/s
Iteration  20: 2474964.031 ops/s
Iteration  21: 2455107.661 ops/s
Iteration  22: 2426444.053 ops/s
Iteration  23: 2420753.702 ops/s
Iteration  24: 2430700.059 ops/s
Iteration  25: 2531545.358 ops/s
Iteration  26: 2527913.991 ops/s
Iteration  27: 2425886.348 ops/s
Iteration  28: 2546724.081 ops/s
Iteration  29: 2475243.926 ops/s
Iteration  30: 2569182.480 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedListBy":
  2488379.493 ±(99.9%) 50753.722 ops/s [Average]
  (min, avg, max) = (2393555.101, 2488379.493, 2687772.375), stdev = 75965.788
  CI (99.9%): [2437625.770, 2539133.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_toSortedListBy  thrpt   30  2488379.493 ± 50753.722  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 258929.165 ops/s
# Warmup Iteration   2: 413718.338 ops/s
# Warmup Iteration   3: 485708.249 ops/s
# Warmup Iteration   4: 488373.027 ops/s
# Warmup Iteration   5: 480397.779 ops/s
# Warmup Iteration   6: 458685.433 ops/s
# Warmup Iteration   7: 434166.031 ops/s
# Warmup Iteration   8: 492542.777 ops/s
# Warmup Iteration   9: 475710.457 ops/s
# Warmup Iteration  10: 480881.790 ops/s
# Warmup Iteration  11: 486901.667 ops/s
# Warmup Iteration  12: 481566.401 ops/s
# Warmup Iteration  13: 480986.145 ops/s
# Warmup Iteration  14: 468042.419 ops/s
# Warmup Iteration  15: 478386.635 ops/s
# Warmup Iteration  16: 479990.550 ops/s
# Warmup Iteration  17: 472177.542 ops/s
# Warmup Iteration  18: 502755.874 ops/s
# Warmup Iteration  19: 524495.862 ops/s
# Warmup Iteration  20: 491719.418 ops/s
# Warmup Iteration  21: 474560.390 ops/s
# Warmup Iteration  22: 474366.554 ops/s
# Warmup Iteration  23: 482681.205 ops/s
# Warmup Iteration  24: 492433.982 ops/s
# Warmup Iteration  25: 490040.626 ops/s
# Warmup Iteration  26: 492309.206 ops/s
# Warmup Iteration  27: 493539.377 ops/s
# Warmup Iteration  28: 496644.303 ops/s
# Warmup Iteration  29: 496524.709 ops/s
# Warmup Iteration  30: 496263.842 ops/s
Iteration   1: 525105.674 ops/s
Iteration   2: 523729.631 ops/s
Iteration   3: 496564.730 ops/s
Iteration   4: 506560.396 ops/s
Iteration   5: 493399.713 ops/s
Iteration   6: 478260.482 ops/s
Iteration   7: 486071.393 ops/s
Iteration   8: 472818.136 ops/s
Iteration   9: 477181.850 ops/s
Iteration  10: 477703.146 ops/s
Iteration  11: 474512.430 ops/s
Iteration  12: 482335.796 ops/s
Iteration  13: 495633.880 ops/s
Iteration  14: 479291.189 ops/s
Iteration  15: 484928.103 ops/s
Iteration  16: 469807.399 ops/s
Iteration  17: 480538.249 ops/s
Iteration  18: 481700.599 ops/s
Iteration  19: 473130.004 ops/s
Iteration  20: 490767.960 ops/s
Iteration  21: 479633.994 ops/s
Iteration  22: 479404.841 ops/s
Iteration  23: 482031.455 ops/s
Iteration  24: 486600.833 ops/s
Iteration  25: 478483.252 ops/s
Iteration  26: 472981.701 ops/s
Iteration  27: 475487.411 ops/s
Iteration  28: 499534.655 ops/s
Iteration  29: 523894.940 ops/s
Iteration  30: 472712.022 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedMap":
  486693.529 ±(99.9%) 10323.085 ops/s [Average]
  (min, avg, max) = (469807.399, 486693.529, 525105.674), stdev = 15451.109
  CI (99.9%): [476370.443, 497016.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_toSortedMap  thrpt   30  486693.529 ± 10323.085  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 396283.774 ops/s
# Warmup Iteration   2: 855553.335 ops/s
# Warmup Iteration   3: 846649.459 ops/s
# Warmup Iteration   4: 852790.142 ops/s
# Warmup Iteration   5: 759547.926 ops/s
# Warmup Iteration   6: 875899.976 ops/s
# Warmup Iteration   7: 899658.408 ops/s
# Warmup Iteration   8: 847838.500 ops/s
# Warmup Iteration   9: 841906.702 ops/s
# Warmup Iteration  10: 878619.048 ops/s
# Warmup Iteration  11: 858904.663 ops/s
# Warmup Iteration  12: 919813.434 ops/s
# Warmup Iteration  13: 866308.880 ops/s
# Warmup Iteration  14: 884925.045 ops/s
# Warmup Iteration  15: 848207.085 ops/s
# Warmup Iteration  16: 872239.357 ops/s
# Warmup Iteration  17: 859832.729 ops/s
# Warmup Iteration  18: 866931.268 ops/s
# Warmup Iteration  19: 903066.270 ops/s
# Warmup Iteration  20: 864817.243 ops/s
# Warmup Iteration  21: 866078.985 ops/s
# Warmup Iteration  22: 855427.735 ops/s
# Warmup Iteration  23: 904858.164 ops/s
# Warmup Iteration  24: 924283.702 ops/s
# Warmup Iteration  25: 914830.605 ops/s
# Warmup Iteration  26: 862533.654 ops/s
# Warmup Iteration  27: 883180.974 ops/s
# Warmup Iteration  28: 852084.246 ops/s
# Warmup Iteration  29: 846664.035 ops/s
# Warmup Iteration  30: 843128.631 ops/s
Iteration   1: 877627.872 ops/s
Iteration   2: 842112.286 ops/s
Iteration   3: 851019.112 ops/s
Iteration   4: 848674.497 ops/s
Iteration   5: 834869.345 ops/s
Iteration   6: 846396.591 ops/s
Iteration   7: 848024.396 ops/s
Iteration   8: 854073.880 ops/s
Iteration   9: 856337.145 ops/s
Iteration  10: 851375.778 ops/s
Iteration  11: 844670.272 ops/s
Iteration  12: 849265.276 ops/s
Iteration  13: 838747.584 ops/s
Iteration  14: 852211.516 ops/s
Iteration  15: 873182.778 ops/s
Iteration  16: 867523.057 ops/s
Iteration  17: 883706.703 ops/s
Iteration  18: 844537.036 ops/s
Iteration  19: 883038.130 ops/s
Iteration  20: 861958.014 ops/s
Iteration  21: 847175.248 ops/s
Iteration  22: 853016.986 ops/s
Iteration  23: 855977.430 ops/s
Iteration  24: 852570.652 ops/s
Iteration  25: 874168.530 ops/s
Iteration  26: 888151.955 ops/s
Iteration  27: 838460.484 ops/s
Iteration  28: 839817.770 ops/s
Iteration  29: 847097.029 ops/s
Iteration  30: 852014.788 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedSet":
  855260.071 ±(99.9%) 9655.303 ops/s [Average]
  (min, avg, max) = (834869.345, 855260.071, 888151.955), stdev = 14451.604
  CI (99.9%): [845604.768, 864915.375] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_toSortedSet  thrpt   30  855260.071 ± 9655.303  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 522042.220 ops/s
# Warmup Iteration   2: 1284899.090 ops/s
# Warmup Iteration   3: 1336492.040 ops/s
# Warmup Iteration   4: 1112560.191 ops/s
# Warmup Iteration   5: 1357150.453 ops/s
# Warmup Iteration   6: 1330846.000 ops/s
# Warmup Iteration   7: 1359494.487 ops/s
# Warmup Iteration   8: 1343428.542 ops/s
# Warmup Iteration   9: 1340659.618 ops/s
# Warmup Iteration  10: 1339272.124 ops/s
# Warmup Iteration  11: 1369203.084 ops/s
# Warmup Iteration  12: 1395837.712 ops/s
# Warmup Iteration  13: 1354811.359 ops/s
# Warmup Iteration  14: 1388504.229 ops/s
# Warmup Iteration  15: 1388306.146 ops/s
# Warmup Iteration  16: 1468928.422 ops/s
# Warmup Iteration  17: 1382456.838 ops/s
# Warmup Iteration  18: 1359493.949 ops/s
# Warmup Iteration  19: 1365319.934 ops/s
# Warmup Iteration  20: 1352385.769 ops/s
# Warmup Iteration  21: 1344685.887 ops/s
# Warmup Iteration  22: 1388945.475 ops/s
# Warmup Iteration  23: 1417674.962 ops/s
# Warmup Iteration  24: 1467472.074 ops/s
# Warmup Iteration  25: 1353530.041 ops/s
# Warmup Iteration  26: 1385916.629 ops/s
# Warmup Iteration  27: 1359587.430 ops/s
# Warmup Iteration  28: 1416299.014 ops/s
# Warmup Iteration  29: 1335117.442 ops/s
# Warmup Iteration  30: 1366657.611 ops/s
Iteration   1: 1406690.766 ops/s
Iteration   2: 1442556.535 ops/s
Iteration   3: 1369604.259 ops/s
Iteration   4: 1459020.753 ops/s
Iteration   5: 1381042.478 ops/s
Iteration   6: 1370362.709 ops/s
Iteration   7: 1358871.839 ops/s
Iteration   8: 1342809.857 ops/s
Iteration   9: 1397060.043 ops/s
Iteration  10: 1408726.333 ops/s
Iteration  11: 1390267.119 ops/s
Iteration  12: 1412375.354 ops/s
Iteration  13: 1410730.091 ops/s
Iteration  14: 1338732.423 ops/s
Iteration  15: 1370169.565 ops/s
Iteration  16: 1360138.034 ops/s
Iteration  17: 1343504.199 ops/s
Iteration  18: 1341703.921 ops/s
Iteration  19: 1334335.743 ops/s
Iteration  20: 1397668.611 ops/s
Iteration  21: 1383169.991 ops/s
Iteration  22: 1415857.050 ops/s
Iteration  23: 1410137.363 ops/s
Iteration  24: 1382745.512 ops/s
Iteration  25: 1410584.292 ops/s
Iteration  26: 1351872.672 ops/s
Iteration  27: 1319423.682 ops/s
Iteration  28: 1329151.260 ops/s
Iteration  29: 1329490.046 ops/s
Iteration  30: 1395165.958 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_toSortedSetBy":
  1378798.949 ±(99.9%) 23682.199 ops/s [Average]
  (min, avg, max) = (1319423.682, 1378798.949, 1459020.753), stdev = 35446.403
  CI (99.9%): [1355116.749, 1402481.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1378798.949 ± 23682.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_updateValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_updateValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 437362.948 ops/s
# Warmup Iteration   2: 830934.186 ops/s
# Warmup Iteration   3: 884093.649 ops/s
# Warmup Iteration   4: 860810.142 ops/s
# Warmup Iteration   5: 775070.578 ops/s
# Warmup Iteration   6: 858595.905 ops/s
# Warmup Iteration   7: 843824.702 ops/s
# Warmup Iteration   8: 878557.205 ops/s
# Warmup Iteration   9: 902775.161 ops/s
# Warmup Iteration  10: 928770.357 ops/s
# Warmup Iteration  11: 870210.195 ops/s
# Warmup Iteration  12: 854965.361 ops/s
# Warmup Iteration  13: 871501.496 ops/s
# Warmup Iteration  14: 862795.546 ops/s
# Warmup Iteration  15: 843832.293 ops/s
# Warmup Iteration  16: 869635.178 ops/s
# Warmup Iteration  17: 867577.580 ops/s
# Warmup Iteration  18: 873647.200 ops/s
# Warmup Iteration  19: 895709.003 ops/s
# Warmup Iteration  20: 871964.396 ops/s
# Warmup Iteration  21: 882296.533 ops/s
# Warmup Iteration  22: 854812.939 ops/s
# Warmup Iteration  23: 851368.337 ops/s
# Warmup Iteration  24: 887811.576 ops/s
# Warmup Iteration  25: 851420.405 ops/s
# Warmup Iteration  26: 883561.054 ops/s
# Warmup Iteration  27: 868243.965 ops/s
# Warmup Iteration  28: 873784.756 ops/s
# Warmup Iteration  29: 890493.231 ops/s
# Warmup Iteration  30: 845190.473 ops/s
Iteration   1: 870342.476 ops/s
Iteration   2: 886208.418 ops/s
Iteration   3: 867487.335 ops/s
Iteration   4: 853045.602 ops/s
Iteration   5: 921371.482 ops/s
Iteration   6: 878028.818 ops/s
Iteration   7: 901636.296 ops/s
Iteration   8: 884218.754 ops/s
Iteration   9: 844911.936 ops/s
Iteration  10: 858591.163 ops/s
Iteration  11: 885579.948 ops/s
Iteration  12: 933017.597 ops/s
Iteration  13: 938319.394 ops/s
Iteration  14: 932076.812 ops/s
Iteration  15: 923368.946 ops/s
Iteration  16: 855289.041 ops/s
Iteration  17: 842590.904 ops/s
Iteration  18: 843319.946 ops/s
Iteration  19: 876104.216 ops/s
Iteration  20: 922307.957 ops/s
Iteration  21: 874349.946 ops/s
Iteration  22: 885535.003 ops/s
Iteration  23: 872776.727 ops/s
Iteration  24: 893028.330 ops/s
Iteration  25: 888245.668 ops/s
Iteration  26: 875080.183 ops/s
Iteration  27: 847957.965 ops/s
Iteration  28: 869372.166 ops/s
Iteration  29: 859621.829 ops/s
Iteration  30: 853290.063 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_updateValue":
  881235.831 ±(99.9%) 19019.551 ops/s [Average]
  (min, avg, max) = (842590.904, 881235.831, 938319.394), stdev = 28467.571
  CI (99.9%): [862216.279, 900255.382] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_updateValue  thrpt   30  881235.831 ± 19019.551  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_updateValueWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_updateValueWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 320205.297 ops/s
# Warmup Iteration   2: 582235.970 ops/s
# Warmup Iteration   3: 652491.236 ops/s
# Warmup Iteration   4: 663306.512 ops/s
# Warmup Iteration   5: 559249.733 ops/s
# Warmup Iteration   6: 600374.832 ops/s
# Warmup Iteration   7: 627897.769 ops/s
# Warmup Iteration   8: 614376.826 ops/s
# Warmup Iteration   9: 672200.232 ops/s
# Warmup Iteration  10: 622051.131 ops/s
# Warmup Iteration  11: 632627.937 ops/s
# Warmup Iteration  12: 654670.460 ops/s
# Warmup Iteration  13: 637795.096 ops/s
# Warmup Iteration  14: 660040.940 ops/s
# Warmup Iteration  15: 618617.034 ops/s
# Warmup Iteration  16: 605595.188 ops/s
# Warmup Iteration  17: 628143.358 ops/s
# Warmup Iteration  18: 610725.818 ops/s
# Warmup Iteration  19: 615498.417 ops/s
# Warmup Iteration  20: 633623.749 ops/s
# Warmup Iteration  21: 635417.019 ops/s
# Warmup Iteration  22: 643835.298 ops/s
# Warmup Iteration  23: 628534.126 ops/s
# Warmup Iteration  24: 617189.854 ops/s
# Warmup Iteration  25: 645031.896 ops/s
# Warmup Iteration  26: 643861.519 ops/s
# Warmup Iteration  27: 629369.169 ops/s
# Warmup Iteration  28: 628919.450 ops/s
# Warmup Iteration  29: 616403.121 ops/s
# Warmup Iteration  30: 633008.949 ops/s
Iteration   1: 628913.926 ops/s
Iteration   2: 609646.273 ops/s
Iteration   3: 614169.521 ops/s
Iteration   4: 624592.474 ops/s
Iteration   5: 620328.196 ops/s
Iteration   6: 616929.459 ops/s
Iteration   7: 624446.450 ops/s
Iteration   8: 621416.148 ops/s
Iteration   9: 616157.706 ops/s
Iteration  10: 608089.923 ops/s
Iteration  11: 608699.992 ops/s
Iteration  12: 627377.377 ops/s
Iteration  13: 634280.606 ops/s
Iteration  14: 627309.762 ops/s
Iteration  15: 618096.383 ops/s
Iteration  16: 615592.427 ops/s
Iteration  17: 619789.097 ops/s
Iteration  18: 629973.971 ops/s
Iteration  19: 626642.836 ops/s
Iteration  20: 618302.979 ops/s
Iteration  21: 617910.599 ops/s
Iteration  22: 607996.614 ops/s
Iteration  23: 626846.451 ops/s
Iteration  24: 620354.830 ops/s
Iteration  25: 643103.167 ops/s
Iteration  26: 616367.227 ops/s
Iteration  27: 633664.751 ops/s
Iteration  28: 666998.149 ops/s
Iteration  29: 673877.173 ops/s
Iteration  30: 653714.107 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_updateValueWith":
  625719.619 ±(99.9%) 10552.608 ops/s [Average]
  (min, avg, max) = (607996.614, 625719.619, 673877.173), stdev = 15794.648
  CI (99.9%): [615167.011, 636272.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_updateValueWith  thrpt   30  625719.619 ± 10552.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_updateValueWith_collisions$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_updateValueWith_collisions

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149489879.167 ops/s
# Warmup Iteration   2: 288451168.422 ops/s
# Warmup Iteration   3: 245558697.839 ops/s
# Warmup Iteration   4: 288297753.288 ops/s
# Warmup Iteration   5: 291695961.240 ops/s
# Warmup Iteration   6: 292010318.205 ops/s
# Warmup Iteration   7: 292819537.237 ops/s
# Warmup Iteration   8: 286493853.626 ops/s
# Warmup Iteration   9: 297794324.955 ops/s
# Warmup Iteration  10: 291079185.702 ops/s
# Warmup Iteration  11: 299792617.074 ops/s
# Warmup Iteration  12: 295003677.402 ops/s
# Warmup Iteration  13: 305525537.737 ops/s
# Warmup Iteration  14: 289454847.230 ops/s
# Warmup Iteration  15: 302574501.707 ops/s
# Warmup Iteration  16: 299134230.182 ops/s
# Warmup Iteration  17: 292512902.973 ops/s
# Warmup Iteration  18: 308876935.046 ops/s
# Warmup Iteration  19: 301188738.490 ops/s
# Warmup Iteration  20: 295394438.704 ops/s
# Warmup Iteration  21: 291875428.722 ops/s
# Warmup Iteration  22: 296180889.823 ops/s
# Warmup Iteration  23: 307725494.678 ops/s
# Warmup Iteration  24: 300877105.985 ops/s
# Warmup Iteration  25: 289959407.992 ops/s
# Warmup Iteration  26: 284986538.668 ops/s
# Warmup Iteration  27: 297304756.489 ops/s
# Warmup Iteration  28: 300940975.325 ops/s
# Warmup Iteration  29: 294615875.740 ops/s
# Warmup Iteration  30: 289682733.646 ops/s
Iteration   1: 293325997.234 ops/s
Iteration   2: 300728899.423 ops/s
Iteration   3: 282764608.263 ops/s
Iteration   4: 289469827.248 ops/s
Iteration   5: 294834607.773 ops/s
Iteration   6: 287387943.420 ops/s
Iteration   7: 288039300.680 ops/s
Iteration   8: 292815035.702 ops/s
Iteration   9: 284567039.215 ops/s
Iteration  10: 288712965.823 ops/s
Iteration  11: 311755684.384 ops/s
Iteration  12: 284636031.626 ops/s
Iteration  13: 287703760.025 ops/s
Iteration  14: 288426870.097 ops/s
Iteration  15: 282474227.631 ops/s
Iteration  16: 293115642.064 ops/s
Iteration  17: 294254100.582 ops/s
Iteration  18: 290599916.130 ops/s
Iteration  19: 281582238.366 ops/s
Iteration  20: 295795052.258 ops/s
Iteration  21: 307707319.705 ops/s
Iteration  22: 312264960.195 ops/s
Iteration  23: 299065518.749 ops/s
Iteration  24: 288308868.452 ops/s
Iteration  25: 289234315.103 ops/s
Iteration  26: 286194954.111 ops/s
Iteration  27: 287636164.203 ops/s
Iteration  28: 283108756.028 ops/s
Iteration  29: 303407532.972 ops/s
Iteration  30: 284091558.739 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_updateValueWith_collisions":
  291800323.207 ±(99.9%) 5591091.869 ops/s [Average]
  (min, avg, max) = (281582238.366, 291800323.207, 312264960.195), stdev = 8368483.733
  CI (99.9%): [286209231.338, 297391415.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt          Score         Error  Units
HashBiMapInverseTest._Benchmark.benchmark_updateValueWith_collisions  thrpt   30  291800323.207 ± 5591091.869  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_updateValue_collisions$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_updateValue_collisions

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164303031.950 ops/s
# Warmup Iteration   2: 300171064.324 ops/s
# Warmup Iteration   3: 257416314.227 ops/s
# Warmup Iteration   4: 293336612.139 ops/s
# Warmup Iteration   5: 290322316.316 ops/s
# Warmup Iteration   6: 292758086.607 ops/s
# Warmup Iteration   7: 295409511.035 ops/s
# Warmup Iteration   8: 292012039.101 ops/s
# Warmup Iteration   9: 300380442.504 ops/s
# Warmup Iteration  10: 295502882.877 ops/s
# Warmup Iteration  11: 313239899.310 ops/s
# Warmup Iteration  12: 306740212.675 ops/s
# Warmup Iteration  13: 291920433.855 ops/s
# Warmup Iteration  14: 290588172.759 ops/s
# Warmup Iteration  15: 286041382.072 ops/s
# Warmup Iteration  16: 304404225.223 ops/s
# Warmup Iteration  17: 312777502.273 ops/s
# Warmup Iteration  18: 309802423.599 ops/s
# Warmup Iteration  19: 290356214.000 ops/s
# Warmup Iteration  20: 289653384.821 ops/s
# Warmup Iteration  21: 296217200.474 ops/s
# Warmup Iteration  22: 296879635.154 ops/s
# Warmup Iteration  23: 296337240.769 ops/s
# Warmup Iteration  24: 302558974.999 ops/s
# Warmup Iteration  25: 292039638.083 ops/s
# Warmup Iteration  26: 290624109.051 ops/s
# Warmup Iteration  27: 292540712.508 ops/s
# Warmup Iteration  28: 290443452.255 ops/s
# Warmup Iteration  29: 299547165.613 ops/s
# Warmup Iteration  30: 293742765.837 ops/s
Iteration   1: 299880735.415 ops/s
Iteration   2: 311442683.346 ops/s
Iteration   3: 300157630.497 ops/s
Iteration   4: 304034061.276 ops/s
Iteration   5: 302729733.199 ops/s
Iteration   6: 288749176.309 ops/s
Iteration   7: 285798457.609 ops/s
Iteration   8: 289156015.583 ops/s
Iteration   9: 291685449.390 ops/s
Iteration  10: 313544312.668 ops/s
Iteration  11: 290973142.091 ops/s
Iteration  12: 292973306.811 ops/s
Iteration  13: 293273707.179 ops/s
Iteration  14: 291727527.095 ops/s
Iteration  15: 300123079.379 ops/s
Iteration  16: 302252163.699 ops/s
Iteration  17: 293908787.228 ops/s
Iteration  18: 305204078.830 ops/s
Iteration  19: 296499291.205 ops/s
Iteration  20: 298198041.403 ops/s
Iteration  21: 308661673.786 ops/s
Iteration  22: 312518620.558 ops/s
Iteration  23: 300466799.122 ops/s
Iteration  24: 301260905.551 ops/s
Iteration  25: 304373779.797 ops/s
Iteration  26: 316301343.953 ops/s
Iteration  27: 300737969.117 ops/s
Iteration  28: 292080200.220 ops/s
Iteration  29: 304703866.255 ops/s
Iteration  30: 291338340.783 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_updateValue_collisions":
  299491829.312 ±(99.9%) 5341344.952 ops/s [Average]
  (min, avg, max) = (285798457.609, 299491829.312, 316301343.953), stdev = 7994674.276
  CI (99.9%): [294150484.360, 304833174.264] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt          Score         Error  Units
HashBiMapInverseTest._Benchmark.benchmark_updateValue_collisions  thrpt   30  299491829.312 ± 5341344.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_valuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_valuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1636663.111 ops/s
# Warmup Iteration   2: 4256909.336 ops/s
# Warmup Iteration   3: 4237413.983 ops/s
# Warmup Iteration   4: 3476649.612 ops/s
# Warmup Iteration   5: 4405820.680 ops/s
# Warmup Iteration   6: 4287874.293 ops/s
# Warmup Iteration   7: 4450780.002 ops/s
# Warmup Iteration   8: 4220070.297 ops/s
# Warmup Iteration   9: 4297338.705 ops/s
# Warmup Iteration  10: 4366964.666 ops/s
# Warmup Iteration  11: 4297395.226 ops/s
# Warmup Iteration  12: 4358530.923 ops/s
# Warmup Iteration  13: 4321256.630 ops/s
# Warmup Iteration  14: 4247910.946 ops/s
# Warmup Iteration  15: 4248238.958 ops/s
# Warmup Iteration  16: 4264385.574 ops/s
# Warmup Iteration  17: 4335889.367 ops/s
# Warmup Iteration  18: 4442418.261 ops/s
# Warmup Iteration  19: 4229045.693 ops/s
# Warmup Iteration  20: 4242340.490 ops/s
# Warmup Iteration  21: 4268913.291 ops/s
# Warmup Iteration  22: 4283586.844 ops/s
# Warmup Iteration  23: 4264518.027 ops/s
# Warmup Iteration  24: 4274836.417 ops/s
# Warmup Iteration  25: 4228569.673 ops/s
# Warmup Iteration  26: 4231030.647 ops/s
# Warmup Iteration  27: 4383690.138 ops/s
# Warmup Iteration  28: 4264817.247 ops/s
# Warmup Iteration  29: 4279136.564 ops/s
# Warmup Iteration  30: 4235651.441 ops/s
Iteration   1: 4350888.733 ops/s
Iteration   2: 4424655.695 ops/s
Iteration   3: 4248455.836 ops/s
Iteration   4: 4215425.757 ops/s
Iteration   5: 4267138.020 ops/s
Iteration   6: 4273146.975 ops/s
Iteration   7: 4252848.786 ops/s
Iteration   8: 4398583.018 ops/s
Iteration   9: 4480177.422 ops/s
Iteration  10: 4320086.462 ops/s
Iteration  11: 4477780.781 ops/s
Iteration  12: 4396505.825 ops/s
Iteration  13: 4409851.673 ops/s
Iteration  14: 4327423.300 ops/s
Iteration  15: 4313214.036 ops/s
Iteration  16: 4334499.960 ops/s
Iteration  17: 4350422.871 ops/s
Iteration  18: 4402690.135 ops/s
Iteration  19: 4467065.154 ops/s
Iteration  20: 4408828.482 ops/s
Iteration  21: 4404430.944 ops/s
Iteration  22: 4473791.994 ops/s
Iteration  23: 4410601.376 ops/s
Iteration  24: 4247659.735 ops/s
Iteration  25: 4322213.895 ops/s
Iteration  26: 4344807.415 ops/s
Iteration  27: 4371120.603 ops/s
Iteration  28: 4398985.675 ops/s
Iteration  29: 4324132.051 ops/s
Iteration  30: 4353254.192 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_valuesView":
  4359022.893 ±(99.9%) 48819.516 ops/s [Average]
  (min, avg, max) = (4215425.757, 4359022.893, 4480177.422), stdev = 73070.759
  CI (99.9%): [4310203.377, 4407842.410] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_valuesView  thrpt   30  4359022.893 ± 48819.516  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withAllKeyValueArguments$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withAllKeyValueArguments

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 739340.177 ops/s
# Warmup Iteration   2: 2107021.782 ops/s
# Warmup Iteration   3: 2223681.314 ops/s
# Warmup Iteration   4: 1731951.260 ops/s
# Warmup Iteration   5: 2212147.204 ops/s
# Warmup Iteration   6: 2210300.443 ops/s
# Warmup Iteration   7: 2259963.423 ops/s
# Warmup Iteration   8: 2240499.827 ops/s
# Warmup Iteration   9: 2227474.883 ops/s
# Warmup Iteration  10: 2214498.893 ops/s
# Warmup Iteration  11: 2261174.839 ops/s
# Warmup Iteration  12: 2201999.782 ops/s
# Warmup Iteration  13: 2252250.135 ops/s
# Warmup Iteration  14: 2235946.741 ops/s
# Warmup Iteration  15: 2162100.034 ops/s
# Warmup Iteration  16: 2167660.541 ops/s
# Warmup Iteration  17: 2214092.740 ops/s
# Warmup Iteration  18: 2148050.425 ops/s
# Warmup Iteration  19: 2258753.588 ops/s
# Warmup Iteration  20: 2240035.592 ops/s
# Warmup Iteration  21: 2199183.449 ops/s
# Warmup Iteration  22: 2174350.122 ops/s
# Warmup Iteration  23: 2206129.393 ops/s
# Warmup Iteration  24: 2180481.810 ops/s
# Warmup Iteration  25: 2182419.535 ops/s
# Warmup Iteration  26: 2169918.054 ops/s
# Warmup Iteration  27: 2214407.826 ops/s
# Warmup Iteration  28: 2188098.197 ops/s
# Warmup Iteration  29: 2209013.819 ops/s
# Warmup Iteration  30: 2183627.565 ops/s
Iteration   1: 2166399.621 ops/s
Iteration   2: 2143787.562 ops/s
Iteration   3: 2151626.866 ops/s
Iteration   4: 2133861.521 ops/s
Iteration   5: 2295886.389 ops/s
Iteration   6: 2121944.561 ops/s
Iteration   7: 2195974.762 ops/s
Iteration   8: 2130257.796 ops/s
Iteration   9: 2164886.874 ops/s
Iteration  10: 2177093.477 ops/s
Iteration  11: 2153311.470 ops/s
Iteration  12: 2163597.273 ops/s
Iteration  13: 2150954.188 ops/s
Iteration  14: 2189583.334 ops/s
Iteration  15: 2153171.123 ops/s
Iteration  16: 2173913.702 ops/s
Iteration  17: 2168566.767 ops/s
Iteration  18: 2189762.896 ops/s
Iteration  19: 2188592.264 ops/s
Iteration  20: 2136707.860 ops/s
Iteration  21: 2095719.390 ops/s
Iteration  22: 2144922.351 ops/s
Iteration  23: 2184410.576 ops/s
Iteration  24: 2144721.597 ops/s
Iteration  25: 2149797.351 ops/s
Iteration  26: 2134335.426 ops/s
Iteration  27: 2126941.345 ops/s
Iteration  28: 2215965.672 ops/s
Iteration  29: 2241669.004 ops/s
Iteration  30: 2212351.964 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withAllKeyValueArguments":
  2166690.499 ±(99.9%) 26401.050 ops/s [Average]
  (min, avg, max) = (2095719.390, 2166690.499, 2295886.389), stdev = 39515.851
  CI (99.9%): [2140289.450, 2193091.549] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withAllKeyValueArguments  thrpt   30  2166690.499 ± 26401.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withAllKeyValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withAllKeyValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 776192.406 ops/s
# Warmup Iteration   2: 1994684.326 ops/s
# Warmup Iteration   3: 2104917.672 ops/s
# Warmup Iteration   4: 1676233.246 ops/s
# Warmup Iteration   5: 2109009.417 ops/s
# Warmup Iteration   6: 2061019.738 ops/s
# Warmup Iteration   7: 2064728.934 ops/s
# Warmup Iteration   8: 2059788.685 ops/s
# Warmup Iteration   9: 2076216.293 ops/s
# Warmup Iteration  10: 2024406.833 ops/s
# Warmup Iteration  11: 2083047.856 ops/s
# Warmup Iteration  12: 2089162.640 ops/s
# Warmup Iteration  13: 2094710.186 ops/s
# Warmup Iteration  14: 2136840.822 ops/s
# Warmup Iteration  15: 2100128.055 ops/s
# Warmup Iteration  16: 2063570.172 ops/s
# Warmup Iteration  17: 2092301.386 ops/s
# Warmup Iteration  18: 2048141.053 ops/s
# Warmup Iteration  19: 2142277.485 ops/s
# Warmup Iteration  20: 2074749.598 ops/s
# Warmup Iteration  21: 2099011.860 ops/s
# Warmup Iteration  22: 2070839.429 ops/s
# Warmup Iteration  23: 2069331.985 ops/s
# Warmup Iteration  24: 2053987.024 ops/s
# Warmup Iteration  25: 2056004.231 ops/s
# Warmup Iteration  26: 2060971.162 ops/s
# Warmup Iteration  27: 2062374.543 ops/s
# Warmup Iteration  28: 2042398.396 ops/s
# Warmup Iteration  29: 2030793.590 ops/s
# Warmup Iteration  30: 2065682.947 ops/s
Iteration   1: 2102874.075 ops/s
Iteration   2: 2126565.451 ops/s
Iteration   3: 2112315.957 ops/s
Iteration   4: 2092711.021 ops/s
Iteration   5: 2000077.957 ops/s
Iteration   6: 2074349.425 ops/s
Iteration   7: 2028020.186 ops/s
Iteration   8: 2088020.949 ops/s
Iteration   9: 2102428.324 ops/s
Iteration  10: 2088949.692 ops/s
Iteration  11: 2130738.333 ops/s
Iteration  12: 2129560.421 ops/s
Iteration  13: 2086992.345 ops/s
Iteration  14: 2055677.796 ops/s
Iteration  15: 2145476.232 ops/s
Iteration  16: 2150447.133 ops/s
Iteration  17: 2129629.834 ops/s
Iteration  18: 2119189.757 ops/s
Iteration  19: 2132049.724 ops/s
Iteration  20: 2108128.070 ops/s
Iteration  21: 2134143.029 ops/s
Iteration  22: 2146030.335 ops/s
Iteration  23: 2137025.176 ops/s
Iteration  24: 2123937.870 ops/s
Iteration  25: 2124487.960 ops/s
Iteration  26: 2048594.948 ops/s
Iteration  27: 2045429.860 ops/s
Iteration  28: 2022151.140 ops/s
Iteration  29: 2153772.829 ops/s
Iteration  30: 2069637.946 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withAllKeyValues":
  2100313.792 ±(99.9%) 27529.626 ops/s [Average]
  (min, avg, max) = (2000077.957, 2100313.792, 2153772.829), stdev = 41205.051
  CI (99.9%): [2072784.167, 2127843.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withAllKeyValues  thrpt   30  2100313.792 ± 27529.626  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 618791.015 ops/s
# Warmup Iteration   2: 1677872.103 ops/s
# Warmup Iteration   3: 1765490.230 ops/s
# Warmup Iteration   4: 1422231.607 ops/s
# Warmup Iteration   5: 1733055.279 ops/s
# Warmup Iteration   6: 1731178.505 ops/s
# Warmup Iteration   7: 1726247.641 ops/s
# Warmup Iteration   8: 1744324.281 ops/s
# Warmup Iteration   9: 1695571.772 ops/s
# Warmup Iteration  10: 1760741.129 ops/s
# Warmup Iteration  11: 1716320.943 ops/s
# Warmup Iteration  12: 1714682.774 ops/s
# Warmup Iteration  13: 1833890.185 ops/s
# Warmup Iteration  14: 1732044.783 ops/s
# Warmup Iteration  15: 1739304.373 ops/s
# Warmup Iteration  16: 1737378.395 ops/s
# Warmup Iteration  17: 1806843.925 ops/s
# Warmup Iteration  18: 1750998.935 ops/s
# Warmup Iteration  19: 1721297.895 ops/s
# Warmup Iteration  20: 1728561.817 ops/s
# Warmup Iteration  21: 1728162.987 ops/s
# Warmup Iteration  22: 1704715.497 ops/s
# Warmup Iteration  23: 1755323.810 ops/s
# Warmup Iteration  24: 1702055.416 ops/s
# Warmup Iteration  25: 1701339.939 ops/s
# Warmup Iteration  26: 1702747.635 ops/s
# Warmup Iteration  27: 1687205.776 ops/s
# Warmup Iteration  28: 1719757.010 ops/s
# Warmup Iteration  29: 1683580.829 ops/s
# Warmup Iteration  30: 1718670.284 ops/s
Iteration   1: 1683416.204 ops/s
Iteration   2: 1697181.771 ops/s
Iteration   3: 1673751.686 ops/s
Iteration   4: 1703358.032 ops/s
Iteration   5: 1679938.484 ops/s
Iteration   6: 1691184.041 ops/s
Iteration   7: 1759878.582 ops/s
Iteration   8: 1769461.997 ops/s
Iteration   9: 1776481.039 ops/s
Iteration  10: 1747009.017 ops/s
Iteration  11: 1715625.033 ops/s
Iteration  12: 1714800.749 ops/s
Iteration  13: 1774816.337 ops/s
Iteration  14: 1775823.941 ops/s
Iteration  15: 1692261.900 ops/s
Iteration  16: 1726346.639 ops/s
Iteration  17: 1693417.286 ops/s
Iteration  18: 1720446.365 ops/s
Iteration  19: 1682557.640 ops/s
Iteration  20: 1736886.982 ops/s
Iteration  21: 1743856.426 ops/s
Iteration  22: 1708027.368 ops/s
Iteration  23: 1686759.610 ops/s
Iteration  24: 1698819.732 ops/s
Iteration  25: 1721072.468 ops/s
Iteration  26: 1719487.815 ops/s
Iteration  27: 1761840.539 ops/s
Iteration  28: 1762467.729 ops/s
Iteration  29: 1760456.289 ops/s
Iteration  30: 1691671.245 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withKeyValue":
  1722303.432 ±(99.9%) 22241.694 ops/s [Average]
  (min, avg, max) = (1673751.686, 1722303.432, 1776481.039), stdev = 33290.323
  CI (99.9%): [1700061.737, 1744545.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withKeyValue  thrpt   30  1722303.432 ± 22241.694  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688301.275 ops/s
# Warmup Iteration   2: 1646235.606 ops/s
# Warmup Iteration   3: 1770687.400 ops/s
# Warmup Iteration   4: 1475960.668 ops/s
# Warmup Iteration   5: 1698369.862 ops/s
# Warmup Iteration   6: 1821886.503 ops/s
# Warmup Iteration   7: 1817976.379 ops/s
# Warmup Iteration   8: 1810662.286 ops/s
# Warmup Iteration   9: 1781117.246 ops/s
# Warmup Iteration  10: 1743493.010 ops/s
# Warmup Iteration  11: 1820370.812 ops/s
# Warmup Iteration  12: 1802320.191 ops/s
# Warmup Iteration  13: 1771501.233 ops/s
# Warmup Iteration  14: 1791297.569 ops/s
# Warmup Iteration  15: 1783576.213 ops/s
# Warmup Iteration  16: 1770464.724 ops/s
# Warmup Iteration  17: 1736432.237 ops/s
# Warmup Iteration  18: 1795717.907 ops/s
# Warmup Iteration  19: 1799726.954 ops/s
# Warmup Iteration  20: 1788972.467 ops/s
# Warmup Iteration  21: 1794339.782 ops/s
# Warmup Iteration  22: 1883192.836 ops/s
# Warmup Iteration  23: 1790512.905 ops/s
# Warmup Iteration  24: 1744573.196 ops/s
# Warmup Iteration  25: 1774106.357 ops/s
# Warmup Iteration  26: 1770934.894 ops/s
# Warmup Iteration  27: 1797378.590 ops/s
# Warmup Iteration  28: 1739463.807 ops/s
# Warmup Iteration  29: 1802059.581 ops/s
# Warmup Iteration  30: 1779154.951 ops/s
Iteration   1: 1728460.966 ops/s
Iteration   2: 1763160.834 ops/s
Iteration   3: 1707630.458 ops/s
Iteration   4: 1722531.476 ops/s
Iteration   5: 1772064.933 ops/s
Iteration   6: 1852184.781 ops/s
Iteration   7: 1875081.852 ops/s
Iteration   8: 1878176.181 ops/s
Iteration   9: 1833030.115 ops/s
Iteration  10: 1783268.550 ops/s
Iteration  11: 1741946.207 ops/s
Iteration  12: 1785960.778 ops/s
Iteration  13: 1826900.480 ops/s
Iteration  14: 1826799.635 ops/s
Iteration  15: 1807679.660 ops/s
Iteration  16: 1729477.703 ops/s
Iteration  17: 1771437.652 ops/s
Iteration  18: 1795513.369 ops/s
Iteration  19: 1908480.393 ops/s
Iteration  20: 1837643.660 ops/s
Iteration  21: 1708066.259 ops/s
Iteration  22: 1762626.997 ops/s
Iteration  23: 1721157.059 ops/s
Iteration  24: 1749457.971 ops/s
Iteration  25: 1842780.900 ops/s
Iteration  26: 1734200.146 ops/s
Iteration  27: 1777103.035 ops/s
Iteration  28: 1729348.040 ops/s
Iteration  29: 1749799.550 ops/s
Iteration  30: 1739785.256 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMap":
  1782058.497 ±(99.9%) 36903.662 ops/s [Average]
  (min, avg, max) = (1707630.458, 1782058.497, 1908480.393), stdev = 55235.668
  CI (99.9%): [1745154.835, 1818962.158] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withMap  thrpt   30  1782058.497 ± 36903.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 885418.490 ops/s
# Warmup Iteration   2: 2446468.513 ops/s
# Warmup Iteration   3: 2011202.289 ops/s
# Warmup Iteration   4: 2478859.551 ops/s
# Warmup Iteration   5: 2464382.812 ops/s
# Warmup Iteration   6: 2441534.271 ops/s
# Warmup Iteration   7: 2430338.259 ops/s
# Warmup Iteration   8: 2450899.374 ops/s
# Warmup Iteration   9: 2425204.935 ops/s
# Warmup Iteration  10: 2469337.007 ops/s
# Warmup Iteration  11: 2456947.264 ops/s
# Warmup Iteration  12: 2440238.411 ops/s
# Warmup Iteration  13: 2471132.187 ops/s
# Warmup Iteration  14: 2457813.792 ops/s
# Warmup Iteration  15: 2449475.385 ops/s
# Warmup Iteration  16: 2507511.551 ops/s
# Warmup Iteration  17: 2401343.630 ops/s
# Warmup Iteration  18: 2442181.777 ops/s
# Warmup Iteration  19: 2458541.696 ops/s
# Warmup Iteration  20: 2446747.449 ops/s
# Warmup Iteration  21: 2471865.517 ops/s
# Warmup Iteration  22: 2510945.700 ops/s
# Warmup Iteration  23: 2456408.073 ops/s
# Warmup Iteration  24: 2651822.959 ops/s
# Warmup Iteration  25: 2604918.506 ops/s
# Warmup Iteration  26: 2477860.712 ops/s
# Warmup Iteration  27: 2487661.649 ops/s
# Warmup Iteration  28: 2492613.552 ops/s
# Warmup Iteration  29: 2507445.996 ops/s
# Warmup Iteration  30: 2478659.153 ops/s
Iteration   1: 2491678.772 ops/s
Iteration   2: 2624014.296 ops/s
Iteration   3: 2441799.905 ops/s
Iteration   4: 2512266.261 ops/s
Iteration   5: 2391815.716 ops/s
Iteration   6: 2462730.811 ops/s
Iteration   7: 2424160.336 ops/s
Iteration   8: 2411481.855 ops/s
Iteration   9: 2409485.699 ops/s
Iteration  10: 2461439.472 ops/s
Iteration  11: 2461765.263 ops/s
Iteration  12: 2449547.711 ops/s
Iteration  13: 2406240.185 ops/s
Iteration  14: 2427178.745 ops/s
Iteration  15: 2432506.685 ops/s
Iteration  16: 2460364.661 ops/s
Iteration  17: 2421962.334 ops/s
Iteration  18: 2468248.740 ops/s
Iteration  19: 2424133.537 ops/s
Iteration  20: 2450870.492 ops/s
Iteration  21: 2403445.769 ops/s
Iteration  22: 2405986.030 ops/s
Iteration  23: 2444449.430 ops/s
Iteration  24: 2454615.393 ops/s
Iteration  25: 2400594.098 ops/s
Iteration  26: 2452689.406 ops/s
Iteration  27: 2437985.966 ops/s
Iteration  28: 2460940.027 ops/s
Iteration  29: 2471162.551 ops/s
Iteration  30: 2519437.534 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapEmpty":
  2449499.923 ±(99.9%) 30475.947 ops/s [Average]
  (min, avg, max) = (2391815.716, 2449499.923, 2624014.296), stdev = 45614.966
  CI (99.9%): [2419023.976, 2479975.870] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withMapEmpty  thrpt   30  2449499.923 ± 30475.947  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1424994.791 ops/s
# Warmup Iteration   2: 2882297.161 ops/s
# Warmup Iteration   3: 3004107.634 ops/s
# Warmup Iteration   4: 3143166.465 ops/s
# Warmup Iteration   5: 3260606.368 ops/s
# Warmup Iteration   6: 3138563.124 ops/s
# Warmup Iteration   7: 3177055.367 ops/s
# Warmup Iteration   8: 3146669.781 ops/s
# Warmup Iteration   9: 3117182.252 ops/s
# Warmup Iteration  10: 3283484.806 ops/s
# Warmup Iteration  11: 3229255.481 ops/s
# Warmup Iteration  12: 3239228.202 ops/s
# Warmup Iteration  13: 3173204.442 ops/s
# Warmup Iteration  14: 3169745.118 ops/s
# Warmup Iteration  15: 3228456.674 ops/s
# Warmup Iteration  16: 3186159.539 ops/s
# Warmup Iteration  17: 3245870.566 ops/s
# Warmup Iteration  18: 3219584.471 ops/s
# Warmup Iteration  19: 3156964.691 ops/s
# Warmup Iteration  20: 3230555.619 ops/s
# Warmup Iteration  21: 3206935.299 ops/s
# Warmup Iteration  22: 3242757.554 ops/s
# Warmup Iteration  23: 3248656.724 ops/s
# Warmup Iteration  24: 3141424.903 ops/s
# Warmup Iteration  25: 3130080.181 ops/s
# Warmup Iteration  26: 3130043.131 ops/s
# Warmup Iteration  27: 3115070.558 ops/s
# Warmup Iteration  28: 3144337.530 ops/s
# Warmup Iteration  29: 3213046.415 ops/s
# Warmup Iteration  30: 3140594.634 ops/s
Iteration   1: 3135883.476 ops/s
Iteration   2: 3139283.273 ops/s
Iteration   3: 3155353.297 ops/s
Iteration   4: 3083868.278 ops/s
Iteration   5: 3079827.235 ops/s
Iteration   6: 3121304.054 ops/s
Iteration   7: 3244415.863 ops/s
Iteration   8: 3174222.540 ops/s
Iteration   9: 3243300.902 ops/s
Iteration  10: 3220900.269 ops/s
Iteration  11: 3234356.013 ops/s
Iteration  12: 3199196.635 ops/s
Iteration  13: 3320459.815 ops/s
Iteration  14: 3172051.824 ops/s
Iteration  15: 3131522.431 ops/s
Iteration  16: 3145617.188 ops/s
Iteration  17: 3127288.304 ops/s
Iteration  18: 3082285.786 ops/s
Iteration  19: 3118944.335 ops/s
Iteration  20: 3106300.739 ops/s
Iteration  21: 3141228.094 ops/s
Iteration  22: 3126472.287 ops/s
Iteration  23: 3145446.625 ops/s
Iteration  24: 3056764.925 ops/s
Iteration  25: 3092421.342 ops/s
Iteration  26: 3209293.941 ops/s
Iteration  27: 3159203.760 ops/s
Iteration  28: 3152234.460 ops/s
Iteration  29: 3118724.681 ops/s
Iteration  30: 3106530.759 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty":
  3151490.104 ±(99.9%) 39267.758 ops/s [Average]
  (min, avg, max) = (3056764.925, 3151490.104, 3320459.815), stdev = 58774.136
  CI (99.9%): [3112222.346, 3190757.862] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty  thrpt   30  3151490.104 ± 39267.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 717253.423 ops/s
# Warmup Iteration   2: 1792282.038 ops/s
# Warmup Iteration   3: 1890758.076 ops/s
# Warmup Iteration   4: 1619810.800 ops/s
# Warmup Iteration   5: 1848159.376 ops/s
# Warmup Iteration   6: 1812739.435 ops/s
# Warmup Iteration   7: 1868380.946 ops/s
# Warmup Iteration   8: 1844755.768 ops/s
# Warmup Iteration   9: 1974083.922 ops/s
# Warmup Iteration  10: 1822013.802 ops/s
# Warmup Iteration  11: 1821013.626 ops/s
# Warmup Iteration  12: 1812931.816 ops/s
# Warmup Iteration  13: 1875434.619 ops/s
# Warmup Iteration  14: 1890201.652 ops/s
# Warmup Iteration  15: 1811625.099 ops/s
# Warmup Iteration  16: 1820988.043 ops/s
# Warmup Iteration  17: 1821910.280 ops/s
# Warmup Iteration  18: 1920979.520 ops/s
# Warmup Iteration  19: 1889618.239 ops/s
# Warmup Iteration  20: 1857233.345 ops/s
# Warmup Iteration  21: 1889335.025 ops/s
# Warmup Iteration  22: 1815621.640 ops/s
# Warmup Iteration  23: 1825359.551 ops/s
# Warmup Iteration  24: 1828863.716 ops/s
# Warmup Iteration  25: 1872236.291 ops/s
# Warmup Iteration  26: 1832995.082 ops/s
# Warmup Iteration  27: 1861765.864 ops/s
# Warmup Iteration  28: 1905610.862 ops/s
# Warmup Iteration  29: 1841916.302 ops/s
# Warmup Iteration  30: 1815022.274 ops/s
Iteration   1: 1834946.522 ops/s
Iteration   2: 1848851.561 ops/s
Iteration   3: 1839149.283 ops/s
Iteration   4: 1836980.351 ops/s
Iteration   5: 1828259.896 ops/s
Iteration   6: 1831346.025 ops/s
Iteration   7: 1879634.344 ops/s
Iteration   8: 1863480.999 ops/s
Iteration   9: 1836216.296 ops/s
Iteration  10: 1833000.871 ops/s
Iteration  11: 1863626.631 ops/s
Iteration  12: 1802099.702 ops/s
Iteration  13: 1855680.562 ops/s
Iteration  14: 1856163.232 ops/s
Iteration  15: 1858842.506 ops/s
Iteration  16: 1861914.955 ops/s
Iteration  17: 1898765.735 ops/s
Iteration  18: 1841692.330 ops/s
Iteration  19: 1818130.229 ops/s
Iteration  20: 1807419.926 ops/s
Iteration  21: 1816117.195 ops/s
Iteration  22: 1821554.748 ops/s
Iteration  23: 1861964.266 ops/s
Iteration  24: 1809968.367 ops/s
Iteration  25: 1848428.104 ops/s
Iteration  26: 1850318.989 ops/s
Iteration  27: 1833109.282 ops/s
Iteration  28: 1818380.509 ops/s
Iteration  29: 1803331.385 ops/s
Iteration  30: 1815061.233 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterable":
  1839147.868 ±(99.9%) 15583.525 ops/s [Average]
  (min, avg, max) = (1802099.702, 1839147.868, 1898765.735), stdev = 23324.688
  CI (99.9%): [1823564.343, 1854731.393] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withMapIterable  thrpt   30  1839147.868 ± 15583.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterableEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterableEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 990207.957 ops/s
# Warmup Iteration   2: 2707282.717 ops/s
# Warmup Iteration   3: 2182984.596 ops/s
# Warmup Iteration   4: 2679673.648 ops/s
# Warmup Iteration   5: 2739029.955 ops/s
# Warmup Iteration   6: 2743940.536 ops/s
# Warmup Iteration   7: 2723714.565 ops/s
# Warmup Iteration   8: 2660324.692 ops/s
# Warmup Iteration   9: 2748527.496 ops/s
# Warmup Iteration  10: 2723491.838 ops/s
# Warmup Iteration  11: 2688396.610 ops/s
# Warmup Iteration  12: 2678984.100 ops/s
# Warmup Iteration  13: 2626473.138 ops/s
# Warmup Iteration  14: 2662431.909 ops/s
# Warmup Iteration  15: 2676514.786 ops/s
# Warmup Iteration  16: 2680569.469 ops/s
# Warmup Iteration  17: 2655001.924 ops/s
# Warmup Iteration  18: 2651531.812 ops/s
# Warmup Iteration  19: 2706610.691 ops/s
# Warmup Iteration  20: 2699740.346 ops/s
# Warmup Iteration  21: 2731382.643 ops/s
# Warmup Iteration  22: 2691152.434 ops/s
# Warmup Iteration  23: 2695458.081 ops/s
# Warmup Iteration  24: 2669959.992 ops/s
# Warmup Iteration  25: 2670726.815 ops/s
# Warmup Iteration  26: 2628830.031 ops/s
# Warmup Iteration  27: 2657073.339 ops/s
# Warmup Iteration  28: 2655939.386 ops/s
# Warmup Iteration  29: 2639252.947 ops/s
# Warmup Iteration  30: 2654668.750 ops/s
Iteration   1: 2675899.770 ops/s
Iteration   2: 2678189.547 ops/s
Iteration   3: 2713155.187 ops/s
Iteration   4: 2689462.268 ops/s
Iteration   5: 2670825.694 ops/s
Iteration   6: 2706445.133 ops/s
Iteration   7: 2663627.698 ops/s
Iteration   8: 2746670.699 ops/s
Iteration   9: 2668741.544 ops/s
Iteration  10: 2768450.421 ops/s
Iteration  11: 2677692.658 ops/s
Iteration  12: 2620504.733 ops/s
Iteration  13: 2712370.211 ops/s
Iteration  14: 2684563.116 ops/s
Iteration  15: 2649722.775 ops/s
Iteration  16: 2661317.612 ops/s
Iteration  17: 2640319.712 ops/s
Iteration  18: 2735946.687 ops/s
Iteration  19: 2753332.291 ops/s
Iteration  20: 2706140.969 ops/s
Iteration  21: 2739533.279 ops/s
Iteration  22: 2665386.673 ops/s
Iteration  23: 2662698.884 ops/s
Iteration  24: 2746739.484 ops/s
Iteration  25: 2731732.087 ops/s
Iteration  26: 2647731.145 ops/s
Iteration  27: 2640830.845 ops/s
Iteration  28: 2687290.109 ops/s
Iteration  29: 2650054.242 ops/s
Iteration  30: 2713033.139 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterableEmpty":
  2690280.287 ±(99.9%) 26004.697 ops/s [Average]
  (min, avg, max) = (2620504.733, 2690280.287, 2768450.421), stdev = 38922.610
  CI (99.9%): [2664275.590, 2716284.984] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withMapIterableEmpty  thrpt   30  2690280.287 ± 26004.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1251018.367 ops/s
# Warmup Iteration   2: 3118620.927 ops/s
# Warmup Iteration   3: 2603114.334 ops/s
# Warmup Iteration   4: 3247264.523 ops/s
# Warmup Iteration   5: 3150019.377 ops/s
# Warmup Iteration   6: 3192479.297 ops/s
# Warmup Iteration   7: 3171259.568 ops/s
# Warmup Iteration   8: 3201406.953 ops/s
# Warmup Iteration   9: 3143559.048 ops/s
# Warmup Iteration  10: 3149612.141 ops/s
# Warmup Iteration  11: 3167456.923 ops/s
# Warmup Iteration  12: 3248480.989 ops/s
# Warmup Iteration  13: 3193181.083 ops/s
# Warmup Iteration  14: 3106629.414 ops/s
# Warmup Iteration  15: 3209870.520 ops/s
# Warmup Iteration  16: 3188788.987 ops/s
# Warmup Iteration  17: 3104735.962 ops/s
# Warmup Iteration  18: 3106828.824 ops/s
# Warmup Iteration  19: 3152602.153 ops/s
# Warmup Iteration  20: 3182733.097 ops/s
# Warmup Iteration  21: 3162369.603 ops/s
# Warmup Iteration  22: 3116127.134 ops/s
# Warmup Iteration  23: 3112165.112 ops/s
# Warmup Iteration  24: 3135102.539 ops/s
# Warmup Iteration  25: 3133501.801 ops/s
# Warmup Iteration  26: 3171833.490 ops/s
# Warmup Iteration  27: 3192956.764 ops/s
# Warmup Iteration  28: 3197346.413 ops/s
# Warmup Iteration  29: 3134698.481 ops/s
# Warmup Iteration  30: 3146686.482 ops/s
Iteration   1: 3132699.046 ops/s
Iteration   2: 3154124.374 ops/s
Iteration   3: 3127760.968 ops/s
Iteration   4: 3123093.152 ops/s
Iteration   5: 3116499.433 ops/s
Iteration   6: 3138595.665 ops/s
Iteration   7: 3160914.784 ops/s
Iteration   8: 3168097.701 ops/s
Iteration   9: 3167372.952 ops/s
Iteration  10: 3169757.796 ops/s
Iteration  11: 3107160.801 ops/s
Iteration  12: 3169862.689 ops/s
Iteration  13: 3135081.597 ops/s
Iteration  14: 3061733.514 ops/s
Iteration  15: 3258317.691 ops/s
Iteration  16: 3201337.718 ops/s
Iteration  17: 3107720.282 ops/s
Iteration  18: 3133415.379 ops/s
Iteration  19: 3078439.716 ops/s
Iteration  20: 3176389.628 ops/s
Iteration  21: 3160135.663 ops/s
Iteration  22: 3232176.012 ops/s
Iteration  23: 3233019.187 ops/s
Iteration  24: 3157793.486 ops/s
Iteration  25: 3113025.686 ops/s
Iteration  26: 3172511.593 ops/s
Iteration  27: 3162380.603 ops/s
Iteration  28: 3125773.046 ops/s
Iteration  29: 3068325.742 ops/s
Iteration  30: 3140304.210 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty":
  3148460.670 ±(99.9%) 30271.407 ops/s [Average]
  (min, avg, max) = (3061733.514, 3148460.670, 3258317.691), stdev = 45308.821
  CI (99.9%): [3118189.263, 3178732.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty  thrpt   30  3148460.670 ± 30271.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterableNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterableNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46652.226 ops/s
# Warmup Iteration   2: 119209.548 ops/s
# Warmup Iteration   3: 139265.658 ops/s
# Warmup Iteration   4: 137918.923 ops/s
# Warmup Iteration   5: 137445.618 ops/s
# Warmup Iteration   6: 138761.521 ops/s
# Warmup Iteration   7: 135659.755 ops/s
# Warmup Iteration   8: 151061.478 ops/s
# Warmup Iteration   9: 151588.224 ops/s
# Warmup Iteration  10: 156157.912 ops/s
# Warmup Iteration  11: 152527.793 ops/s
# Warmup Iteration  12: 149372.551 ops/s
# Warmup Iteration  13: 155028.468 ops/s
# Warmup Iteration  14: 156186.325 ops/s
# Warmup Iteration  15: 156870.622 ops/s
# Warmup Iteration  16: 154992.816 ops/s
# Warmup Iteration  17: 159480.285 ops/s
# Warmup Iteration  18: 160566.661 ops/s
# Warmup Iteration  19: 160803.890 ops/s
# Warmup Iteration  20: 158979.928 ops/s
# Warmup Iteration  21: 160232.878 ops/s
# Warmup Iteration  22: 161134.337 ops/s
# Warmup Iteration  23: 160789.151 ops/s
# Warmup Iteration  24: 159757.562 ops/s
# Warmup Iteration  25: 161441.452 ops/s
# Warmup Iteration  26: 160564.393 ops/s
# Warmup Iteration  27: 154521.038 ops/s
# Warmup Iteration  28: 155899.273 ops/s
# Warmup Iteration  29: 153804.788 ops/s
# Warmup Iteration  30: 155117.498 ops/s
Iteration   1: 153094.098 ops/s
Iteration   2: 154056.885 ops/s
Iteration   3: 154376.910 ops/s
Iteration   4: 154640.880 ops/s
Iteration   5: 160869.720 ops/s
Iteration   6: 157449.411 ops/s
Iteration   7: 152890.148 ops/s
Iteration   8: 151876.790 ops/s
Iteration   9: 155907.464 ops/s
Iteration  10: 154643.726 ops/s
Iteration  11: 158549.013 ops/s
Iteration  12: 152001.610 ops/s
Iteration  13: 153513.081 ops/s
Iteration  14: 154770.601 ops/s
Iteration  15: 162479.278 ops/s
Iteration  16: 153897.588 ops/s
Iteration  17: 154301.706 ops/s
Iteration  18: 152079.090 ops/s
Iteration  19: 153892.415 ops/s
Iteration  20: 148605.201 ops/s
Iteration  21: 140657.070 ops/s
Iteration  22: 139608.024 ops/s
Iteration  23: 141540.142 ops/s
Iteration  24: 152335.665 ops/s
Iteration  25: 161456.557 ops/s
Iteration  26: 161387.441 ops/s
Iteration  27: 159440.973 ops/s
Iteration  28: 160020.920 ops/s
Iteration  29: 161811.236 ops/s
Iteration  30: 158853.537 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterableNull":
  154366.906 ±(99.9%) 3923.938 ops/s [Average]
  (min, avg, max) = (139608.024, 154366.906, 162479.278), stdev = 5873.166
  CI (99.9%): [150442.968, 158290.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withMapIterableNull  thrpt   30  154366.906 ± 3923.938  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterableTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterableTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 846022.495 ops/s
# Warmup Iteration   2: 2309417.326 ops/s
# Warmup Iteration   3: 1911820.515 ops/s
# Warmup Iteration   4: 2299079.643 ops/s
# Warmup Iteration   5: 2342064.216 ops/s
# Warmup Iteration   6: 2302930.937 ops/s
# Warmup Iteration   7: 2386391.341 ops/s
# Warmup Iteration   8: 2305795.583 ops/s
# Warmup Iteration   9: 2266581.526 ops/s
# Warmup Iteration  10: 2329907.651 ops/s
# Warmup Iteration  11: 2316011.504 ops/s
# Warmup Iteration  12: 2393474.535 ops/s
# Warmup Iteration  13: 2335906.515 ops/s
# Warmup Iteration  14: 2362682.228 ops/s
# Warmup Iteration  15: 2384381.584 ops/s
# Warmup Iteration  16: 2289240.743 ops/s
# Warmup Iteration  17: 2361994.582 ops/s
# Warmup Iteration  18: 2524750.049 ops/s
# Warmup Iteration  19: 2526121.330 ops/s
# Warmup Iteration  20: 2425689.447 ops/s
# Warmup Iteration  21: 2312742.909 ops/s
# Warmup Iteration  22: 2358643.063 ops/s
# Warmup Iteration  23: 2329880.270 ops/s
# Warmup Iteration  24: 2309180.804 ops/s
# Warmup Iteration  25: 2455053.113 ops/s
# Warmup Iteration  26: 2397623.950 ops/s
# Warmup Iteration  27: 2421981.644 ops/s
# Warmup Iteration  28: 2374051.746 ops/s
# Warmup Iteration  29: 2518994.391 ops/s
# Warmup Iteration  30: 2403225.112 ops/s
Iteration   1: 2324554.887 ops/s
Iteration   2: 2358735.870 ops/s
Iteration   3: 2306847.058 ops/s
Iteration   4: 2345492.044 ops/s
Iteration   5: 2425692.813 ops/s
Iteration   6: 2322617.011 ops/s
Iteration   7: 2492875.713 ops/s
Iteration   8: 2351143.369 ops/s
Iteration   9: 2268615.426 ops/s
Iteration  10: 2329504.029 ops/s
Iteration  11: 2326768.336 ops/s
Iteration  12: 2358396.521 ops/s
Iteration  13: 2323770.385 ops/s
Iteration  14: 2283452.553 ops/s
Iteration  15: 2337211.312 ops/s
Iteration  16: 2282737.347 ops/s
Iteration  17: 2370423.911 ops/s
Iteration  18: 2307136.709 ops/s
Iteration  19: 2307640.129 ops/s
Iteration  20: 2308185.341 ops/s
Iteration  21: 2355902.517 ops/s
Iteration  22: 2311707.159 ops/s
Iteration  23: 2295455.009 ops/s
Iteration  24: 2301258.179 ops/s
Iteration  25: 2509245.262 ops/s
Iteration  26: 2523341.718 ops/s
Iteration  27: 2506305.401 ops/s
Iteration  28: 2329291.788 ops/s
Iteration  29: 2290558.289 ops/s
Iteration  30: 2317907.641 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapIterableTargetEmpty":
  2349092.458 ±(99.9%) 47146.969 ops/s [Average]
  (min, avg, max) = (2268615.426, 2349092.458, 2523341.718), stdev = 70567.369
  CI (99.9%): [2301945.488, 2396239.427] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withMapIterableTargetEmpty  thrpt   30  2349092.458 ± 47146.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 51918.561 ops/s
# Warmup Iteration   2: 59286.040 ops/s
# Warmup Iteration   3: 54895.489 ops/s
# Warmup Iteration   4: 54337.933 ops/s
# Warmup Iteration   5: 56409.793 ops/s
# Warmup Iteration   6: 54200.775 ops/s
# Warmup Iteration   7: 55384.435 ops/s
# Warmup Iteration   8: 54533.602 ops/s
# Warmup Iteration   9: 57745.769 ops/s
# Warmup Iteration  10: 57285.047 ops/s
# Warmup Iteration  11: 55598.972 ops/s
# Warmup Iteration  12: 59201.072 ops/s
# Warmup Iteration  13: 54546.302 ops/s
# Warmup Iteration  14: 54044.933 ops/s
# Warmup Iteration  15: 55707.309 ops/s
# Warmup Iteration  16: 56186.143 ops/s
# Warmup Iteration  17: 56753.466 ops/s
# Warmup Iteration  18: 57417.220 ops/s
# Warmup Iteration  19: 56735.500 ops/s
# Warmup Iteration  20: 55863.625 ops/s
# Warmup Iteration  21: 59911.943 ops/s
# Warmup Iteration  22: 60277.597 ops/s
# Warmup Iteration  23: 59410.787 ops/s
# Warmup Iteration  24: 60080.151 ops/s
# Warmup Iteration  25: 59784.788 ops/s
# Warmup Iteration  26: 59586.329 ops/s
# Warmup Iteration  27: 59412.970 ops/s
# Warmup Iteration  28: 59604.105 ops/s
# Warmup Iteration  29: 56632.728 ops/s
# Warmup Iteration  30: 57325.288 ops/s
Iteration   1: 59893.120 ops/s
Iteration   2: 56131.959 ops/s
Iteration   3: 58528.293 ops/s
Iteration   4: 56568.866 ops/s
Iteration   5: 57572.568 ops/s
Iteration   6: 56852.140 ops/s
Iteration   7: 57713.635 ops/s
Iteration   8: 56975.773 ops/s
Iteration   9: 57372.954 ops/s
Iteration  10: 56869.860 ops/s
Iteration  11: 57011.880 ops/s
Iteration  12: 56647.196 ops/s
Iteration  13: 57099.762 ops/s
Iteration  14: 58987.377 ops/s
Iteration  15: 59379.170 ops/s
Iteration  16: 55600.245 ops/s
Iteration  17: 56451.156 ops/s
Iteration  18: 59793.388 ops/s
Iteration  19: 59348.705 ops/s
Iteration  20: 59671.388 ops/s
Iteration  21: 58716.727 ops/s
Iteration  22: 59238.770 ops/s
Iteration  23: 59294.135 ops/s
Iteration  24: 57404.134 ops/s
Iteration  25: 57110.069 ops/s
Iteration  26: 56224.863 ops/s
Iteration  27: 57234.657 ops/s
Iteration  28: 56494.776 ops/s
Iteration  29: 56876.611 ops/s
Iteration  30: 56569.377 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapNull":
  57654.452 ±(99.9%) 848.576 ops/s [Average]
  (min, avg, max) = (55600.245, 57654.452, 59893.120), stdev = 1270.109
  CI (99.9%): [56805.876, 58503.028] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt      Score     Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withMapNull  thrpt   30  57654.452 ± 848.576  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 813745.681 ops/s
# Warmup Iteration   2: 2311347.963 ops/s
# Warmup Iteration   3: 1839778.671 ops/s
# Warmup Iteration   4: 2239254.336 ops/s
# Warmup Iteration   5: 2309187.583 ops/s
# Warmup Iteration   6: 2280475.862 ops/s
# Warmup Iteration   7: 2310063.939 ops/s
# Warmup Iteration   8: 2231882.750 ops/s
# Warmup Iteration   9: 2304846.588 ops/s
# Warmup Iteration  10: 2336579.850 ops/s
# Warmup Iteration  11: 2265346.009 ops/s
# Warmup Iteration  12: 2271064.277 ops/s
# Warmup Iteration  13: 2243855.206 ops/s
# Warmup Iteration  14: 2273625.178 ops/s
# Warmup Iteration  15: 2264865.898 ops/s
# Warmup Iteration  16: 2271345.164 ops/s
# Warmup Iteration  17: 2312727.734 ops/s
# Warmup Iteration  18: 2370588.978 ops/s
# Warmup Iteration  19: 2278976.448 ops/s
# Warmup Iteration  20: 2343878.564 ops/s
# Warmup Iteration  21: 2307583.250 ops/s
# Warmup Iteration  22: 2349749.314 ops/s
# Warmup Iteration  23: 2314744.187 ops/s
# Warmup Iteration  24: 2302678.860 ops/s
# Warmup Iteration  25: 2384649.655 ops/s
# Warmup Iteration  26: 2380191.192 ops/s
# Warmup Iteration  27: 2351037.040 ops/s
# Warmup Iteration  28: 2295363.539 ops/s
# Warmup Iteration  29: 2383910.313 ops/s
# Warmup Iteration  30: 2349130.444 ops/s
Iteration   1: 2291840.415 ops/s
Iteration   2: 2286002.337 ops/s
Iteration   3: 2344688.862 ops/s
Iteration   4: 2322072.350 ops/s
Iteration   5: 2343625.088 ops/s
Iteration   6: 2352445.906 ops/s
Iteration   7: 2379013.024 ops/s
Iteration   8: 2267720.038 ops/s
Iteration   9: 2269102.150 ops/s
Iteration  10: 2346420.240 ops/s
Iteration  11: 2273353.952 ops/s
Iteration  12: 2276320.571 ops/s
Iteration  13: 2327902.341 ops/s
Iteration  14: 2367495.211 ops/s
Iteration  15: 2333836.753 ops/s
Iteration  16: 2308553.896 ops/s
Iteration  17: 2373842.743 ops/s
Iteration  18: 2291597.008 ops/s
Iteration  19: 2289938.642 ops/s
Iteration  20: 2354186.786 ops/s
Iteration  21: 2350199.362 ops/s
Iteration  22: 2306063.294 ops/s
Iteration  23: 2235814.615 ops/s
Iteration  24: 2290656.673 ops/s
Iteration  25: 2397700.562 ops/s
Iteration  26: 2245898.222 ops/s
Iteration  27: 2265020.034 ops/s
Iteration  28: 2283093.702 ops/s
Iteration  29: 2295540.707 ops/s
Iteration  30: 2316461.152 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withMapTargetEmpty":
  2312880.221 ±(99.9%) 27807.916 ops/s [Average]
  (min, avg, max) = (2235814.615, 2312880.221, 2397700.562), stdev = 41621.583
  CI (99.9%): [2285072.305, 2340688.137] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withMapTargetEmpty  thrpt   30  2312880.221 ± 27807.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withoutAllKeys$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withoutAllKeys

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1062854.463 ops/s
# Warmup Iteration   2: 2893081.408 ops/s
# Warmup Iteration   3: 2467075.960 ops/s
# Warmup Iteration   4: 2732905.891 ops/s
# Warmup Iteration   5: 2856019.888 ops/s
# Warmup Iteration   6: 2834442.349 ops/s
# Warmup Iteration   7: 2818452.085 ops/s
# Warmup Iteration   8: 2890127.072 ops/s
# Warmup Iteration   9: 2830660.880 ops/s
# Warmup Iteration  10: 2809883.391 ops/s
# Warmup Iteration  11: 2779163.229 ops/s
# Warmup Iteration  12: 2834791.076 ops/s
# Warmup Iteration  13: 2852040.796 ops/s
# Warmup Iteration  14: 2850898.093 ops/s
# Warmup Iteration  15: 2820644.830 ops/s
# Warmup Iteration  16: 2871813.072 ops/s
# Warmup Iteration  17: 2831166.992 ops/s
# Warmup Iteration  18: 2830143.665 ops/s
# Warmup Iteration  19: 2804752.880 ops/s
# Warmup Iteration  20: 2820812.124 ops/s
# Warmup Iteration  21: 2868322.293 ops/s
# Warmup Iteration  22: 2840421.447 ops/s
# Warmup Iteration  23: 2848044.343 ops/s
# Warmup Iteration  24: 2838544.232 ops/s
# Warmup Iteration  25: 2798192.900 ops/s
# Warmup Iteration  26: 2818084.601 ops/s
# Warmup Iteration  27: 2880439.279 ops/s
# Warmup Iteration  28: 2836507.153 ops/s
# Warmup Iteration  29: 2828914.898 ops/s
# Warmup Iteration  30: 2869832.317 ops/s
Iteration   1: 2802616.485 ops/s
Iteration   2: 2931737.172 ops/s
Iteration   3: 2911356.792 ops/s
Iteration   4: 2819433.043 ops/s
Iteration   5: 2793730.981 ops/s
Iteration   6: 2866564.697 ops/s
Iteration   7: 2851909.205 ops/s
Iteration   8: 2803070.769 ops/s
Iteration   9: 2797302.303 ops/s
Iteration  10: 2822331.930 ops/s
Iteration  11: 2875249.328 ops/s
Iteration  12: 2843972.833 ops/s
Iteration  13: 2932181.450 ops/s
Iteration  14: 2824653.800 ops/s
Iteration  15: 2798023.174 ops/s
Iteration  16: 2803432.274 ops/s
Iteration  17: 2833926.471 ops/s
Iteration  18: 2918570.701 ops/s
Iteration  19: 2830522.301 ops/s
Iteration  20: 2830394.130 ops/s
Iteration  21: 2831801.566 ops/s
Iteration  22: 2871101.689 ops/s
Iteration  23: 2787881.134 ops/s
Iteration  24: 2862659.387 ops/s
Iteration  25: 2771272.269 ops/s
Iteration  26: 2806606.475 ops/s
Iteration  27: 2804765.745 ops/s
Iteration  28: 2798789.961 ops/s
Iteration  29: 2841045.125 ops/s
Iteration  30: 2803153.485 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withoutAllKeys":
  2835668.556 ±(99.9%) 29132.095 ops/s [Average]
  (min, avg, max) = (2771272.269, 2835668.556, 2932181.450), stdev = 43603.551
  CI (99.9%): [2806536.461, 2864800.651] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withoutAllKeys  thrpt   30  2835668.556 ± 29132.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withoutKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withoutKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1212976.293 ops/s
# Warmup Iteration   2: 3155425.102 ops/s
# Warmup Iteration   3: 2650588.350 ops/s
# Warmup Iteration   4: 3211777.525 ops/s
# Warmup Iteration   5: 3267414.604 ops/s
# Warmup Iteration   6: 3292635.491 ops/s
# Warmup Iteration   7: 3209378.949 ops/s
# Warmup Iteration   8: 3305085.562 ops/s
# Warmup Iteration   9: 3210268.191 ops/s
# Warmup Iteration  10: 3184806.181 ops/s
# Warmup Iteration  11: 3164073.470 ops/s
# Warmup Iteration  12: 3203031.283 ops/s
# Warmup Iteration  13: 3211159.954 ops/s
# Warmup Iteration  14: 3193499.069 ops/s
# Warmup Iteration  15: 3268452.408 ops/s
# Warmup Iteration  16: 3278685.292 ops/s
# Warmup Iteration  17: 3270928.074 ops/s
# Warmup Iteration  18: 3222451.821 ops/s
# Warmup Iteration  19: 3215618.655 ops/s
# Warmup Iteration  20: 3173798.218 ops/s
# Warmup Iteration  21: 3197855.220 ops/s
# Warmup Iteration  22: 3171966.630 ops/s
# Warmup Iteration  23: 3194462.253 ops/s
# Warmup Iteration  24: 3235544.520 ops/s
# Warmup Iteration  25: 3189547.495 ops/s
# Warmup Iteration  26: 3141481.257 ops/s
# Warmup Iteration  27: 3225502.663 ops/s
# Warmup Iteration  28: 3159928.941 ops/s
# Warmup Iteration  29: 3117631.137 ops/s
# Warmup Iteration  30: 3211747.720 ops/s
Iteration   1: 3150750.552 ops/s
Iteration   2: 3237931.412 ops/s
Iteration   3: 3255301.633 ops/s
Iteration   4: 3465038.115 ops/s
Iteration   5: 3180328.591 ops/s
Iteration   6: 3189663.201 ops/s
Iteration   7: 3206271.917 ops/s
Iteration   8: 3313151.634 ops/s
Iteration   9: 3301378.385 ops/s
Iteration  10: 3236658.588 ops/s
Iteration  11: 3281895.096 ops/s
Iteration  12: 3180207.788 ops/s
Iteration  13: 3163452.019 ops/s
Iteration  14: 3199353.152 ops/s
Iteration  15: 3311379.854 ops/s
Iteration  16: 3174949.439 ops/s
Iteration  17: 3212795.164 ops/s
Iteration  18: 3132593.520 ops/s
Iteration  19: 3222624.438 ops/s
Iteration  20: 3167744.925 ops/s
Iteration  21: 3406037.872 ops/s
Iteration  22: 3420544.931 ops/s
Iteration  23: 3115888.545 ops/s
Iteration  24: 3178274.764 ops/s
Iteration  25: 3174748.934 ops/s
Iteration  26: 3211762.277 ops/s
Iteration  27: 3220173.044 ops/s
Iteration  28: 3179685.748 ops/s
Iteration  29: 3319743.255 ops/s
Iteration  30: 3474386.445 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_withoutKey":
  3242823.841 ±(99.9%) 63830.061 ops/s [Average]
  (min, avg, max) = (3115888.545, 3242823.841, 3474386.445), stdev = 95537.837
  CI (99.9%): [3178993.780, 3306653.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_withoutKey  thrpt   30  3242823.841 ± 63830.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 226300.308 ops/s
# Warmup Iteration   2: 357989.902 ops/s
# Warmup Iteration   3: 432321.144 ops/s
# Warmup Iteration   4: 429444.764 ops/s
# Warmup Iteration   5: 436102.601 ops/s
# Warmup Iteration   6: 432376.970 ops/s
# Warmup Iteration   7: 357804.781 ops/s
# Warmup Iteration   8: 437864.881 ops/s
# Warmup Iteration   9: 449594.898 ops/s
# Warmup Iteration  10: 439884.771 ops/s
# Warmup Iteration  11: 438284.832 ops/s
# Warmup Iteration  12: 448842.505 ops/s
# Warmup Iteration  13: 449418.117 ops/s
# Warmup Iteration  14: 443791.442 ops/s
# Warmup Iteration  15: 441872.885 ops/s
# Warmup Iteration  16: 449923.234 ops/s
# Warmup Iteration  17: 431021.684 ops/s
# Warmup Iteration  18: 443203.760 ops/s
# Warmup Iteration  19: 446425.008 ops/s
# Warmup Iteration  20: 445551.863 ops/s
# Warmup Iteration  21: 443349.815 ops/s
# Warmup Iteration  22: 447371.069 ops/s
# Warmup Iteration  23: 453028.024 ops/s
# Warmup Iteration  24: 430454.800 ops/s
# Warmup Iteration  25: 437640.710 ops/s
# Warmup Iteration  26: 432658.540 ops/s
# Warmup Iteration  27: 433676.425 ops/s
# Warmup Iteration  28: 431087.146 ops/s
# Warmup Iteration  29: 425552.798 ops/s
# Warmup Iteration  30: 447323.486 ops/s
Iteration   1: 431013.803 ops/s
Iteration   2: 442852.879 ops/s
Iteration   3: 429511.137 ops/s
Iteration   4: 429454.390 ops/s
Iteration   5: 433379.718 ops/s
Iteration   6: 432686.386 ops/s
Iteration   7: 435238.104 ops/s
Iteration   8: 430491.537 ops/s
Iteration   9: 427774.643 ops/s
Iteration  10: 427814.982 ops/s
Iteration  11: 434543.564 ops/s
Iteration  12: 433430.862 ops/s
Iteration  13: 430135.217 ops/s
Iteration  14: 436369.558 ops/s
Iteration  15: 430501.657 ops/s
Iteration  16: 434637.598 ops/s
Iteration  17: 432287.007 ops/s
Iteration  18: 423673.788 ops/s
Iteration  19: 426805.579 ops/s
Iteration  20: 418129.096 ops/s
Iteration  21: 428689.371 ops/s
Iteration  22: 447629.118 ops/s
Iteration  23: 439648.160 ops/s
Iteration  24: 443479.274 ops/s
Iteration  25: 446410.729 ops/s
Iteration  26: 426163.469 ops/s
Iteration  27: 447883.420 ops/s
Iteration  28: 445901.989 ops/s
Iteration  29: 448831.966 ops/s
Iteration  30: 441689.669 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_zip":
  434568.622 ±(99.9%) 5297.272 ops/s [Average]
  (min, avg, max) = (418129.096, 434568.622, 448831.966), stdev = 7928.708
  CI (99.9%): [429271.351, 439865.894] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_zip  thrpt   30  434568.622 ± 5297.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 485584.480 ops/s
# Warmup Iteration   2: 864006.631 ops/s
# Warmup Iteration   3: 1003283.942 ops/s
# Warmup Iteration   4: 982305.984 ops/s
# Warmup Iteration   5: 1001598.430 ops/s
# Warmup Iteration   6: 816528.294 ops/s
# Warmup Iteration   7: 982366.671 ops/s
# Warmup Iteration   8: 981136.747 ops/s
# Warmup Iteration   9: 986239.430 ops/s
# Warmup Iteration  10: 968716.083 ops/s
# Warmup Iteration  11: 987519.560 ops/s
# Warmup Iteration  12: 989396.386 ops/s
# Warmup Iteration  13: 973839.599 ops/s
# Warmup Iteration  14: 988431.648 ops/s
# Warmup Iteration  15: 1029544.936 ops/s
# Warmup Iteration  16: 1032616.681 ops/s
# Warmup Iteration  17: 1020407.731 ops/s
# Warmup Iteration  18: 995547.236 ops/s
# Warmup Iteration  19: 1046943.051 ops/s
# Warmup Iteration  20: 1020405.977 ops/s
# Warmup Iteration  21: 1033594.370 ops/s
# Warmup Iteration  22: 1004855.648 ops/s
# Warmup Iteration  23: 1012734.541 ops/s
# Warmup Iteration  24: 1004120.413 ops/s
# Warmup Iteration  25: 978427.683 ops/s
# Warmup Iteration  26: 989722.052 ops/s
# Warmup Iteration  27: 993216.614 ops/s
# Warmup Iteration  28: 970212.910 ops/s
# Warmup Iteration  29: 1003378.849 ops/s
# Warmup Iteration  30: 998992.040 ops/s
Iteration   1: 1015770.039 ops/s
Iteration   2: 1027779.886 ops/s
Iteration   3: 1038510.221 ops/s
Iteration   4: 1024809.738 ops/s
Iteration   5: 979734.421 ops/s
Iteration   6: 1001277.799 ops/s
Iteration   7: 982694.121 ops/s
Iteration   8: 1004393.001 ops/s
Iteration   9: 966816.322 ops/s
Iteration  10: 975996.148 ops/s
Iteration  11: 954988.126 ops/s
Iteration  12: 1028931.899 ops/s
Iteration  13: 1024138.089 ops/s
Iteration  14: 1016826.598 ops/s
Iteration  15: 988003.768 ops/s
Iteration  16: 985418.195 ops/s
Iteration  17: 993227.904 ops/s
Iteration  18: 999420.182 ops/s
Iteration  19: 998685.746 ops/s
Iteration  20: 1016113.534 ops/s
Iteration  21: 970528.141 ops/s
Iteration  22: 1005229.713 ops/s
Iteration  23: 982713.737 ops/s
Iteration  24: 988839.889 ops/s
Iteration  25: 978605.449 ops/s
Iteration  26: 960778.706 ops/s
Iteration  27: 973116.264 ops/s
Iteration  28: 1000023.189 ops/s
Iteration  29: 995908.523 ops/s
Iteration  30: 1008317.758 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_zipWithIndex":
  996253.237 ±(99.9%) 14480.785 ops/s [Average]
  (min, avg, max) = (954988.126, 996253.237, 1038510.221), stdev = 21674.158
  CI (99.9%): [981772.452, 1010734.021] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_zipWithIndex  thrpt   30  996253.237 ± 14480.785  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 502933.580 ops/s
# Warmup Iteration   2: 618127.733 ops/s
# Warmup Iteration   3: 817744.943 ops/s
# Warmup Iteration   4: 827807.246 ops/s
# Warmup Iteration   5: 778417.914 ops/s
# Warmup Iteration   6: 815809.342 ops/s
# Warmup Iteration   7: 784688.165 ops/s
# Warmup Iteration   8: 750198.996 ops/s
# Warmup Iteration   9: 647565.079 ops/s
# Warmup Iteration  10: 762176.783 ops/s
# Warmup Iteration  11: 803028.652 ops/s
# Warmup Iteration  12: 792282.726 ops/s
# Warmup Iteration  13: 796624.072 ops/s
# Warmup Iteration  14: 809184.129 ops/s
# Warmup Iteration  15: 802570.446 ops/s
# Warmup Iteration  16: 791970.784 ops/s
# Warmup Iteration  17: 845911.979 ops/s
# Warmup Iteration  18: 851018.997 ops/s
# Warmup Iteration  19: 820117.370 ops/s
# Warmup Iteration  20: 839612.371 ops/s
# Warmup Iteration  21: 839433.055 ops/s
# Warmup Iteration  22: 815821.995 ops/s
# Warmup Iteration  23: 847587.276 ops/s
# Warmup Iteration  24: 841720.556 ops/s
# Warmup Iteration  25: 842765.558 ops/s
# Warmup Iteration  26: 843127.100 ops/s
# Warmup Iteration  27: 821224.967 ops/s
# Warmup Iteration  28: 803331.889 ops/s
# Warmup Iteration  29: 819302.948 ops/s
# Warmup Iteration  30: 807182.658 ops/s
Iteration   1: 848877.112 ops/s
Iteration   2: 809652.500 ops/s
Iteration   3: 813693.412 ops/s
Iteration   4: 800029.879 ops/s
Iteration   5: 835277.136 ops/s
Iteration   6: 855218.282 ops/s
Iteration   7: 842075.964 ops/s
Iteration   8: 812951.802 ops/s
Iteration   9: 808463.971 ops/s
Iteration  10: 817311.894 ops/s
Iteration  11: 850230.803 ops/s
Iteration  12: 854836.726 ops/s
Iteration  13: 860492.925 ops/s
Iteration  14: 877446.639 ops/s
Iteration  15: 838816.936 ops/s
Iteration  16: 806341.328 ops/s
Iteration  17: 803214.027 ops/s
Iteration  18: 809772.764 ops/s
Iteration  19: 799506.836 ops/s
Iteration  20: 815767.205 ops/s
Iteration  21: 835285.416 ops/s
Iteration  22: 838403.622 ops/s
Iteration  23: 813273.198 ops/s
Iteration  24: 807555.148 ops/s
Iteration  25: 795854.322 ops/s
Iteration  26: 815915.633 ops/s
Iteration  27: 818347.472 ops/s
Iteration  28: 816625.051 ops/s
Iteration  29: 820309.022 ops/s
Iteration  30: 813671.891 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_add":
  824507.297 ±(99.9%) 14025.276 ops/s [Average]
  (min, avg, max) = (795854.322, 824507.297, 877446.639), stdev = 20992.375
  CI (99.9%): [810482.021, 838532.573] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
HashBiMapInverseValuesTest._Benchmark.benchmark_add  thrpt   30  824507.297 ± 14025.276  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 478354.835 ops/s
# Warmup Iteration   2: 601543.772 ops/s
# Warmup Iteration   3: 773580.458 ops/s
# Warmup Iteration   4: 765029.563 ops/s
# Warmup Iteration   5: 759257.237 ops/s
# Warmup Iteration   6: 802381.749 ops/s
# Warmup Iteration   7: 796884.993 ops/s
# Warmup Iteration   8: 785091.474 ops/s
# Warmup Iteration   9: 647792.730 ops/s
# Warmup Iteration  10: 750969.845 ops/s
# Warmup Iteration  11: 760683.628 ops/s
# Warmup Iteration  12: 754911.515 ops/s
# Warmup Iteration  13: 780939.207 ops/s
# Warmup Iteration  14: 781177.741 ops/s
# Warmup Iteration  15: 784224.425 ops/s
# Warmup Iteration  16: 767180.170 ops/s
# Warmup Iteration  17: 843213.638 ops/s
# Warmup Iteration  18: 838397.400 ops/s
# Warmup Iteration  19: 859211.952 ops/s
# Warmup Iteration  20: 825749.223 ops/s
# Warmup Iteration  21: 802512.937 ops/s
# Warmup Iteration  22: 811717.992 ops/s
# Warmup Iteration  23: 812891.167 ops/s
# Warmup Iteration  24: 823130.831 ops/s
# Warmup Iteration  25: 829704.647 ops/s
# Warmup Iteration  26: 831104.766 ops/s
# Warmup Iteration  27: 792763.426 ops/s
# Warmup Iteration  28: 805455.966 ops/s
# Warmup Iteration  29: 799420.498 ops/s
# Warmup Iteration  30: 782779.917 ops/s
Iteration   1: 801467.341 ops/s
Iteration   2: 783715.855 ops/s
Iteration   3: 800443.916 ops/s
Iteration   4: 794787.638 ops/s
Iteration   5: 825332.173 ops/s
Iteration   6: 826825.425 ops/s
Iteration   7: 853308.198 ops/s
Iteration   8: 862790.174 ops/s
Iteration   9: 781551.404 ops/s
Iteration  10: 829385.120 ops/s
Iteration  11: 839797.939 ops/s
Iteration  12: 804128.054 ops/s
Iteration  13: 814200.338 ops/s
Iteration  14: 799785.802 ops/s
Iteration  15: 802235.548 ops/s
Iteration  16: 820085.952 ops/s
Iteration  17: 799861.370 ops/s
Iteration  18: 812888.496 ops/s
Iteration  19: 788697.526 ops/s
Iteration  20: 813653.325 ops/s
Iteration  21: 800703.010 ops/s
Iteration  22: 797328.215 ops/s
Iteration  23: 808365.246 ops/s
Iteration  24: 799697.014 ops/s
Iteration  25: 797807.329 ops/s
Iteration  26: 816688.053 ops/s
Iteration  27: 841479.485 ops/s
Iteration  28: 822960.135 ops/s
Iteration  29: 805754.131 ops/s
Iteration  30: 810209.442 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_addAll":
  811864.455 ±(99.9%) 12928.232 ops/s [Average]
  (min, avg, max) = (781551.404, 811864.455, 862790.174), stdev = 19350.370
  CI (99.9%): [798936.223, 824792.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
HashBiMapInverseValuesTest._Benchmark.benchmark_addAll  thrpt   30  811864.455 ± 12928.232  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1168005.626 ops/s
# Warmup Iteration   2: 2820944.348 ops/s
# Warmup Iteration   3: 2806107.017 ops/s
# Warmup Iteration   4: 2281314.963 ops/s
# Warmup Iteration   5: 2793464.392 ops/s
# Warmup Iteration   6: 2955982.709 ops/s
# Warmup Iteration   7: 2856362.655 ops/s
# Warmup Iteration   8: 2824660.640 ops/s
# Warmup Iteration   9: 2749621.802 ops/s
# Warmup Iteration  10: 2777646.841 ops/s
# Warmup Iteration  11: 2767532.308 ops/s
# Warmup Iteration  12: 2741664.638 ops/s
# Warmup Iteration  13: 2781660.725 ops/s
# Warmup Iteration  14: 2802750.331 ops/s
# Warmup Iteration  15: 2772605.270 ops/s
# Warmup Iteration  16: 2780255.731 ops/s
# Warmup Iteration  17: 2795775.120 ops/s
# Warmup Iteration  18: 2812941.502 ops/s
# Warmup Iteration  19: 2866901.785 ops/s
# Warmup Iteration  20: 2801003.163 ops/s
# Warmup Iteration  21: 2809546.242 ops/s
# Warmup Iteration  22: 2880670.889 ops/s
# Warmup Iteration  23: 2763008.692 ops/s
# Warmup Iteration  24: 2860885.337 ops/s
# Warmup Iteration  25: 2826654.264 ops/s
# Warmup Iteration  26: 2887237.208 ops/s
# Warmup Iteration  27: 2832825.571 ops/s
# Warmup Iteration  28: 2797376.600 ops/s
# Warmup Iteration  29: 2835838.308 ops/s
# Warmup Iteration  30: 2811978.682 ops/s
Iteration   1: 2800460.014 ops/s
Iteration   2: 2755713.984 ops/s
Iteration   3: 2771263.317 ops/s
Iteration   4: 2815680.826 ops/s
Iteration   5: 2794423.664 ops/s
Iteration   6: 2750079.743 ops/s
Iteration   7: 2800846.565 ops/s
Iteration   8: 2789511.949 ops/s
Iteration   9: 2769464.342 ops/s
Iteration  10: 2798203.662 ops/s
Iteration  11: 2911509.876 ops/s
Iteration  12: 2866626.470 ops/s
Iteration  13: 2777146.955 ops/s
Iteration  14: 2879614.336 ops/s
Iteration  15: 2891615.115 ops/s
Iteration  16: 2758329.552 ops/s
Iteration  17: 2879997.231 ops/s
Iteration  18: 2897053.316 ops/s
Iteration  19: 2804584.159 ops/s
Iteration  20: 2881323.019 ops/s
Iteration  21: 2821174.559 ops/s
Iteration  22: 2726400.499 ops/s
Iteration  23: 2762218.334 ops/s
Iteration  24: 2760263.936 ops/s
Iteration  25: 2761989.654 ops/s
Iteration  26: 2740610.317 ops/s
Iteration  27: 2782867.119 ops/s
Iteration  28: 2764263.201 ops/s
Iteration  29: 2810563.713 ops/s
Iteration  30: 2888181.558 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_clear":
  2807066.033 ±(99.9%) 36112.199 ops/s [Average]
  (min, avg, max) = (2726400.499, 2807066.033, 2911509.876), stdev = 54051.043
  CI (99.9%): [2770953.834, 2843178.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapInverseValuesTest._Benchmark.benchmark_clear  thrpt   30  2807066.033 ± 36112.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1733816.128 ops/s
# Warmup Iteration   2: 4330963.663 ops/s
# Warmup Iteration   3: 4619529.080 ops/s
# Warmup Iteration   4: 3506813.623 ops/s
# Warmup Iteration   5: 4363958.507 ops/s
# Warmup Iteration   6: 4355023.580 ops/s
# Warmup Iteration   7: 4609162.534 ops/s
# Warmup Iteration   8: 4594395.487 ops/s
# Warmup Iteration   9: 4487769.145 ops/s
# Warmup Iteration  10: 4301836.027 ops/s
# Warmup Iteration  11: 4287937.834 ops/s
# Warmup Iteration  12: 4489539.769 ops/s
# Warmup Iteration  13: 4466274.020 ops/s
# Warmup Iteration  14: 4592097.955 ops/s
# Warmup Iteration  15: 4588992.722 ops/s
# Warmup Iteration  16: 4546065.304 ops/s
# Warmup Iteration  17: 4365274.121 ops/s
# Warmup Iteration  18: 4338114.486 ops/s
# Warmup Iteration  19: 4534241.185 ops/s
# Warmup Iteration  20: 4398986.466 ops/s
# Warmup Iteration  21: 4416796.475 ops/s
# Warmup Iteration  22: 4533767.437 ops/s
# Warmup Iteration  23: 4450699.284 ops/s
# Warmup Iteration  24: 4417353.495 ops/s
# Warmup Iteration  25: 4479033.141 ops/s
# Warmup Iteration  26: 4370476.851 ops/s
# Warmup Iteration  27: 4363804.396 ops/s
# Warmup Iteration  28: 4515137.721 ops/s
# Warmup Iteration  29: 4472904.160 ops/s
# Warmup Iteration  30: 4586141.073 ops/s
Iteration   1: 4583817.737 ops/s
Iteration   2: 4634769.246 ops/s
Iteration   3: 4689922.332 ops/s
Iteration   4: 4731892.737 ops/s
Iteration   5: 4648633.208 ops/s
Iteration   6: 4267156.184 ops/s
Iteration   7: 4411604.841 ops/s
Iteration   8: 4352142.589 ops/s
Iteration   9: 4501613.778 ops/s
Iteration  10: 4371358.494 ops/s
Iteration  11: 4335196.286 ops/s
Iteration  12: 4439007.680 ops/s
Iteration  13: 4499997.338 ops/s
Iteration  14: 4686352.693 ops/s
Iteration  15: 4475470.521 ops/s
Iteration  16: 4288002.510 ops/s
Iteration  17: 4289333.483 ops/s
Iteration  18: 4706118.569 ops/s
Iteration  19: 4290274.176 ops/s
Iteration  20: 4395578.526 ops/s
Iteration  21: 4467106.902 ops/s
Iteration  22: 4362552.289 ops/s
Iteration  23: 4375814.018 ops/s
Iteration  24: 4437049.486 ops/s
Iteration  25: 4362726.592 ops/s
Iteration  26: 4352033.752 ops/s
Iteration  27: 4378004.378 ops/s
Iteration  28: 4596964.679 ops/s
Iteration  29: 4467534.100 ops/s
Iteration  30: 4325444.000 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_contains":
  4457449.104 ±(99.9%) 93836.657 ops/s [Average]
  (min, avg, max) = (4267156.184, 4457449.104, 4731892.737), stdev = 140450.302
  CI (99.9%): [4363612.447, 4551285.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapInverseValuesTest._Benchmark.benchmark_contains  thrpt   30  4457449.104 ± 93836.657  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1011361.432 ops/s
# Warmup Iteration   2: 2502319.172 ops/s
# Warmup Iteration   3: 2484522.378 ops/s
# Warmup Iteration   4: 2004007.223 ops/s
# Warmup Iteration   5: 2468251.752 ops/s
# Warmup Iteration   6: 2509829.280 ops/s
# Warmup Iteration   7: 2418860.211 ops/s
# Warmup Iteration   8: 2450394.486 ops/s
# Warmup Iteration   9: 2442778.541 ops/s
# Warmup Iteration  10: 2433444.030 ops/s
# Warmup Iteration  11: 2557053.287 ops/s
# Warmup Iteration  12: 2503479.243 ops/s
# Warmup Iteration  13: 2526010.782 ops/s
# Warmup Iteration  14: 2517588.957 ops/s
# Warmup Iteration  15: 2459520.040 ops/s
# Warmup Iteration  16: 2430744.848 ops/s
# Warmup Iteration  17: 2473350.783 ops/s
# Warmup Iteration  18: 2562692.095 ops/s
# Warmup Iteration  19: 2488839.980 ops/s
# Warmup Iteration  20: 2492430.694 ops/s
# Warmup Iteration  21: 2580752.237 ops/s
# Warmup Iteration  22: 2549153.525 ops/s
# Warmup Iteration  23: 2533406.211 ops/s
# Warmup Iteration  24: 2448247.430 ops/s
# Warmup Iteration  25: 2490619.649 ops/s
# Warmup Iteration  26: 2493648.813 ops/s
# Warmup Iteration  27: 2502085.996 ops/s
# Warmup Iteration  28: 2473331.822 ops/s
# Warmup Iteration  29: 2503849.490 ops/s
# Warmup Iteration  30: 2406213.957 ops/s
Iteration   1: 2480525.111 ops/s
Iteration   2: 2487520.635 ops/s
Iteration   3: 2512902.529 ops/s
Iteration   4: 2427546.991 ops/s
Iteration   5: 2529642.260 ops/s
Iteration   6: 2465772.763 ops/s
Iteration   7: 2589410.998 ops/s
Iteration   8: 2476614.829 ops/s
Iteration   9: 2498523.086 ops/s
Iteration  10: 2591472.618 ops/s
Iteration  11: 2623788.968 ops/s
Iteration  12: 2578974.292 ops/s
Iteration  13: 2367256.790 ops/s
Iteration  14: 2527262.682 ops/s
Iteration  15: 2639199.277 ops/s
Iteration  16: 2630353.256 ops/s
Iteration  17: 2615292.921 ops/s
Iteration  18: 2576720.857 ops/s
Iteration  19: 2483119.080 ops/s
Iteration  20: 2462525.552 ops/s
Iteration  21: 2628429.036 ops/s
Iteration  22: 2510449.832 ops/s
Iteration  23: 2425340.738 ops/s
Iteration  24: 2513760.689 ops/s
Iteration  25: 2508632.437 ops/s
Iteration  26: 2560908.252 ops/s
Iteration  27: 2406449.730 ops/s
Iteration  28: 2420796.438 ops/s
Iteration  29: 2409735.176 ops/s
Iteration  30: 2447063.276 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_containsAll":
  2513199.703 ±(99.9%) 50998.515 ops/s [Average]
  (min, avg, max) = (2367256.790, 2513199.703, 2639199.277), stdev = 76332.182
  CI (99.9%): [2462201.188, 2564198.218] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
HashBiMapInverseValuesTest._Benchmark.benchmark_containsAll  thrpt   30  2513199.703 ± 50998.515  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1717486.448 ops/s
# Warmup Iteration   2: 3552073.435 ops/s
# Warmup Iteration   3: 3072035.629 ops/s
# Warmup Iteration   4: 3496516.826 ops/s
# Warmup Iteration   5: 3456553.611 ops/s
# Warmup Iteration   6: 3547172.079 ops/s
# Warmup Iteration   7: 3484802.556 ops/s
# Warmup Iteration   8: 3361133.099 ops/s
# Warmup Iteration   9: 3477696.393 ops/s
# Warmup Iteration  10: 3480977.872 ops/s
# Warmup Iteration  11: 3463244.861 ops/s
# Warmup Iteration  12: 3489497.675 ops/s
# Warmup Iteration  13: 3424012.806 ops/s
# Warmup Iteration  14: 3601044.344 ops/s
# Warmup Iteration  15: 3511499.058 ops/s
# Warmup Iteration  16: 3631158.624 ops/s
# Warmup Iteration  17: 3445466.979 ops/s
# Warmup Iteration  18: 3435508.381 ops/s
# Warmup Iteration  19: 3510886.677 ops/s
# Warmup Iteration  20: 3482282.837 ops/s
# Warmup Iteration  21: 3482227.625 ops/s
# Warmup Iteration  22: 3533153.350 ops/s
# Warmup Iteration  23: 3422042.162 ops/s
# Warmup Iteration  24: 3452421.583 ops/s
# Warmup Iteration  25: 3405864.925 ops/s
# Warmup Iteration  26: 3472237.265 ops/s
# Warmup Iteration  27: 3411331.682 ops/s
# Warmup Iteration  28: 3414316.937 ops/s
# Warmup Iteration  29: 3470782.529 ops/s
# Warmup Iteration  30: 3507366.944 ops/s
Iteration   1: 3493825.942 ops/s
Iteration   2: 3449867.337 ops/s
Iteration   3: 3625158.176 ops/s
Iteration   4: 3707197.796 ops/s
Iteration   5: 3664719.166 ops/s
Iteration   6: 3474402.608 ops/s
Iteration   7: 3531476.331 ops/s
Iteration   8: 3373202.766 ops/s
Iteration   9: 3566339.481 ops/s
Iteration  10: 3430051.293 ops/s
Iteration  11: 3413645.107 ops/s
Iteration  12: 3546099.660 ops/s
Iteration  13: 3468935.668 ops/s
Iteration  14: 3409868.149 ops/s
Iteration  15: 3516061.681 ops/s
Iteration  16: 3467197.642 ops/s
Iteration  17: 3465126.935 ops/s
Iteration  18: 3715341.233 ops/s
Iteration  19: 3449351.124 ops/s
Iteration  20: 3382067.273 ops/s
Iteration  21: 3345424.211 ops/s
Iteration  22: 3424729.417 ops/s
Iteration  23: 3382383.967 ops/s
Iteration  24: 3437887.033 ops/s
Iteration  25: 3668745.637 ops/s
Iteration  26: 3644384.610 ops/s
Iteration  27: 3495340.918 ops/s
Iteration  28: 3422300.611 ops/s
Iteration  29: 3463799.990 ops/s
Iteration  30: 3409516.280 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_isEmpty":
  3494814.935 ±(99.9%) 69153.111 ops/s [Average]
  (min, avg, max) = (3345424.211, 3494814.935, 3715341.233), stdev = 103505.129
  CI (99.9%): [3425661.823, 3563968.046] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBiMapInverseValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  3494814.935 ± 69153.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48971.519 ops/s
# Warmup Iteration   2: 71533.309 ops/s
# Warmup Iteration   3: 90941.522 ops/s
# Warmup Iteration   4: 96031.315 ops/s
# Warmup Iteration   5: 92066.070 ops/s
# Warmup Iteration   6: 91430.808 ops/s
# Warmup Iteration   7: 84336.212 ops/s
# Warmup Iteration   8: 86499.170 ops/s
# Warmup Iteration   9: 91089.066 ops/s
# Warmup Iteration  10: 90050.559 ops/s
# Warmup Iteration  11: 90427.517 ops/s
# Warmup Iteration  12: 88313.528 ops/s
# Warmup Iteration  13: 92214.519 ops/s
# Warmup Iteration  14: 89895.135 ops/s
# Warmup Iteration  15: 89187.347 ops/s
# Warmup Iteration  16: 89330.637 ops/s
# Warmup Iteration  17: 91044.237 ops/s
# Warmup Iteration  18: 93411.808 ops/s
# Warmup Iteration  19: 92745.309 ops/s
# Warmup Iteration  20: 98477.822 ops/s
# Warmup Iteration  21: 95595.786 ops/s
# Warmup Iteration  22: 94268.971 ops/s
# Warmup Iteration  23: 94565.356 ops/s
# Warmup Iteration  24: 92330.856 ops/s
# Warmup Iteration  25: 91954.644 ops/s
# Warmup Iteration  26: 92895.208 ops/s
# Warmup Iteration  27: 91698.926 ops/s
# Warmup Iteration  28: 95760.862 ops/s
# Warmup Iteration  29: 92113.478 ops/s
# Warmup Iteration  30: 90928.589 ops/s
Iteration   1: 92648.528 ops/s
Iteration   2: 93458.656 ops/s
Iteration   3: 91294.656 ops/s
Iteration   4: 90818.365 ops/s
Iteration   5: 90112.941 ops/s
Iteration   6: 92721.907 ops/s
Iteration   7: 93288.574 ops/s
Iteration   8: 92841.519 ops/s
Iteration   9: 92472.244 ops/s
Iteration  10: 91768.557 ops/s
Iteration  11: 91337.856 ops/s
Iteration  12: 91037.330 ops/s
Iteration  13: 91284.612 ops/s
Iteration  14: 90825.676 ops/s
Iteration  15: 91830.055 ops/s
Iteration  16: 92041.302 ops/s
Iteration  17: 93649.674 ops/s
Iteration  18: 90031.444 ops/s
Iteration  19: 91928.421 ops/s
Iteration  20: 91093.541 ops/s
Iteration  21: 93149.292 ops/s
Iteration  22: 93667.164 ops/s
Iteration  23: 91908.479 ops/s
Iteration  24: 91479.652 ops/s
Iteration  25: 89905.407 ops/s
Iteration  26: 92018.736 ops/s
Iteration  27: 91389.667 ops/s
Iteration  28: 91435.578 ops/s
Iteration  29: 92483.093 ops/s
Iteration  30: 92333.143 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_iterator":
  91875.202 ±(99.9%) 693.155 ops/s [Average]
  (min, avg, max) = (89905.407, 91875.202, 93667.164), stdev = 1037.481
  CI (99.9%): [91182.048, 92568.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt      Score     Error  Units
HashBiMapInverseValuesTest._Benchmark.benchmark_iterator  thrpt   30  91875.202 ± 693.155  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_removeAllFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_removeAllFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 564262.609 ops/s
# Warmup Iteration   2: 1471184.470 ops/s
# Warmup Iteration   3: 1534508.313 ops/s
# Warmup Iteration   4: 1226848.686 ops/s
# Warmup Iteration   5: 1479937.735 ops/s
# Warmup Iteration   6: 1486495.645 ops/s
# Warmup Iteration   7: 1486845.405 ops/s
# Warmup Iteration   8: 1487277.725 ops/s
# Warmup Iteration   9: 1493947.365 ops/s
# Warmup Iteration  10: 1477347.848 ops/s
# Warmup Iteration  11: 1515648.716 ops/s
# Warmup Iteration  12: 1519084.785 ops/s
# Warmup Iteration  13: 1477871.624 ops/s
# Warmup Iteration  14: 1529710.956 ops/s
# Warmup Iteration  15: 1523854.415 ops/s
# Warmup Iteration  16: 1485444.905 ops/s
# Warmup Iteration  17: 1462039.686 ops/s
# Warmup Iteration  18: 1502178.412 ops/s
# Warmup Iteration  19: 1502733.376 ops/s
# Warmup Iteration  20: 1504978.846 ops/s
# Warmup Iteration  21: 1513164.419 ops/s
# Warmup Iteration  22: 1500251.288 ops/s
# Warmup Iteration  23: 1495397.520 ops/s
# Warmup Iteration  24: 1534564.223 ops/s
# Warmup Iteration  25: 1498378.537 ops/s
# Warmup Iteration  26: 1504665.331 ops/s
# Warmup Iteration  27: 1529322.581 ops/s
# Warmup Iteration  28: 1476199.649 ops/s
# Warmup Iteration  29: 1504859.393 ops/s
# Warmup Iteration  30: 1495614.325 ops/s
Iteration   1: 1530513.051 ops/s
Iteration   2: 1502286.489 ops/s
Iteration   3: 1479053.105 ops/s
Iteration   4: 1465532.501 ops/s
Iteration   5: 1474061.388 ops/s
Iteration   6: 1484577.710 ops/s
Iteration   7: 1489145.677 ops/s
Iteration   8: 1515617.022 ops/s
Iteration   9: 1480021.839 ops/s
Iteration  10: 1519196.192 ops/s
Iteration  11: 1448460.184 ops/s
Iteration  12: 1537767.966 ops/s
Iteration  13: 1508979.381 ops/s
Iteration  14: 1481357.817 ops/s
Iteration  15: 1487455.063 ops/s
Iteration  16: 1464665.696 ops/s
Iteration  17: 1537295.287 ops/s
Iteration  18: 1497995.155 ops/s
Iteration  19: 1490541.789 ops/s
Iteration  20: 1489679.521 ops/s
Iteration  21: 1491339.561 ops/s
Iteration  22: 1527612.705 ops/s
Iteration  23: 1505475.846 ops/s
Iteration  24: 1453742.025 ops/s
Iteration  25: 1481423.920 ops/s
Iteration  26: 1471220.797 ops/s
Iteration  27: 1467682.151 ops/s
Iteration  28: 1503131.798 ops/s
Iteration  29: 1474589.937 ops/s
Iteration  30: 1480170.380 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_removeAllFromValues":
  1491353.065 ±(99.9%) 15762.371 ops/s [Average]
  (min, avg, max) = (1448460.184, 1491353.065, 1537767.966), stdev = 23592.376
  CI (99.9%): [1475590.695, 1507115.436] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
HashBiMapInverseValuesTest._Benchmark.benchmark_removeAllFromValues  thrpt   30  1491353.065 ± 15762.371  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_removeFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_removeFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 591224.970 ops/s
# Warmup Iteration   2: 1488231.412 ops/s
# Warmup Iteration   3: 1493640.012 ops/s
# Warmup Iteration   4: 1242047.392 ops/s
# Warmup Iteration   5: 1467636.835 ops/s
# Warmup Iteration   6: 1459257.791 ops/s
# Warmup Iteration   7: 1479105.734 ops/s
# Warmup Iteration   8: 1484579.104 ops/s
# Warmup Iteration   9: 1530651.255 ops/s
# Warmup Iteration  10: 1514673.821 ops/s
# Warmup Iteration  11: 1508951.285 ops/s
# Warmup Iteration  12: 1540018.285 ops/s
# Warmup Iteration  13: 1533769.886 ops/s
# Warmup Iteration  14: 1526887.294 ops/s
# Warmup Iteration  15: 1542142.176 ops/s
# Warmup Iteration  16: 1494288.754 ops/s
# Warmup Iteration  17: 1525839.970 ops/s
# Warmup Iteration  18: 1546966.792 ops/s
# Warmup Iteration  19: 1488072.553 ops/s
# Warmup Iteration  20: 1486081.882 ops/s
# Warmup Iteration  21: 1483105.605 ops/s
# Warmup Iteration  22: 1531614.534 ops/s
# Warmup Iteration  23: 1496582.992 ops/s
# Warmup Iteration  24: 1481123.746 ops/s
# Warmup Iteration  25: 1495241.325 ops/s
# Warmup Iteration  26: 1480773.814 ops/s
# Warmup Iteration  27: 1473225.533 ops/s
# Warmup Iteration  28: 1470170.846 ops/s
# Warmup Iteration  29: 1493891.638 ops/s
# Warmup Iteration  30: 1545131.363 ops/s
Iteration   1: 1521807.276 ops/s
Iteration   2: 1512966.217 ops/s
Iteration   3: 1540091.350 ops/s
Iteration   4: 1557617.542 ops/s
Iteration   5: 1560096.586 ops/s
Iteration   6: 1528549.853 ops/s
Iteration   7: 1551599.160 ops/s
Iteration   8: 1514342.895 ops/s
Iteration   9: 1518911.382 ops/s
Iteration  10: 1467488.085 ops/s
Iteration  11: 1475976.372 ops/s
Iteration  12: 1461652.757 ops/s
Iteration  13: 1470171.651 ops/s
Iteration  14: 1508081.210 ops/s
Iteration  15: 1502045.499 ops/s
Iteration  16: 1459672.438 ops/s
Iteration  17: 1478657.944 ops/s
Iteration  18: 1605401.863 ops/s
Iteration  19: 1605562.664 ops/s
Iteration  20: 1614261.625 ops/s
Iteration  21: 1609052.303 ops/s
Iteration  22: 1573183.737 ops/s
Iteration  23: 1545933.283 ops/s
Iteration  24: 1527642.973 ops/s
Iteration  25: 1471711.877 ops/s
Iteration  26: 1440854.449 ops/s
Iteration  27: 1483414.891 ops/s
Iteration  28: 1499278.298 ops/s
Iteration  29: 1466963.502 ops/s
Iteration  30: 1454533.717 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_removeFromValues":
  1517584.113 ±(99.9%) 33579.493 ops/s [Average]
  (min, avg, max) = (1440854.449, 1517584.113, 1614261.625), stdev = 50260.207
  CI (99.9%): [1484004.621, 1551163.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBiMapInverseValuesTest._Benchmark.benchmark_removeFromValues  thrpt   30  1517584.113 ± 33579.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_removeNullFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_removeNullFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 351852.539 ops/s
# Warmup Iteration   2: 800197.745 ops/s
# Warmup Iteration   3: 827369.796 ops/s
# Warmup Iteration   4: 738098.751 ops/s
# Warmup Iteration   5: 761450.408 ops/s
# Warmup Iteration   6: 850803.808 ops/s
# Warmup Iteration   7: 856840.057 ops/s
# Warmup Iteration   8: 843584.301 ops/s
# Warmup Iteration   9: 900235.952 ops/s
# Warmup Iteration  10: 865389.563 ops/s
# Warmup Iteration  11: 831077.445 ops/s
# Warmup Iteration  12: 831701.718 ops/s
# Warmup Iteration  13: 825059.701 ops/s
# Warmup Iteration  14: 817239.151 ops/s
# Warmup Iteration  15: 834954.112 ops/s
# Warmup Iteration  16: 834007.327 ops/s
# Warmup Iteration  17: 820975.802 ops/s
# Warmup Iteration  18: 826094.373 ops/s
# Warmup Iteration  19: 810441.916 ops/s
# Warmup Iteration  20: 839643.870 ops/s
# Warmup Iteration  21: 862051.824 ops/s
# Warmup Iteration  22: 826969.871 ops/s
# Warmup Iteration  23: 826755.088 ops/s
# Warmup Iteration  24: 829022.720 ops/s
# Warmup Iteration  25: 835563.283 ops/s
# Warmup Iteration  26: 859434.720 ops/s
# Warmup Iteration  27: 852151.007 ops/s
# Warmup Iteration  28: 855403.602 ops/s
# Warmup Iteration  29: 837714.002 ops/s
# Warmup Iteration  30: 857892.212 ops/s
Iteration   1: 850984.926 ops/s
Iteration   2: 838732.083 ops/s
Iteration   3: 832472.874 ops/s
Iteration   4: 820925.989 ops/s
Iteration   5: 871830.717 ops/s
Iteration   6: 887799.189 ops/s
Iteration   7: 870069.149 ops/s
Iteration   8: 872364.921 ops/s
Iteration   9: 879692.904 ops/s
Iteration  10: 856641.603 ops/s
Iteration  11: 882309.568 ops/s
Iteration  12: 836590.679 ops/s
Iteration  13: 811643.960 ops/s
Iteration  14: 826777.353 ops/s
Iteration  15: 850916.298 ops/s
Iteration  16: 814121.441 ops/s
Iteration  17: 842792.696 ops/s
Iteration  18: 865718.899 ops/s
Iteration  19: 863451.728 ops/s
Iteration  20: 844808.093 ops/s
Iteration  21: 826878.225 ops/s
Iteration  22: 835487.851 ops/s
Iteration  23: 820468.397 ops/s
Iteration  24: 843591.077 ops/s
Iteration  25: 822797.791 ops/s
Iteration  26: 888075.128 ops/s
Iteration  27: 890468.750 ops/s
Iteration  28: 820290.398 ops/s
Iteration  29: 803398.992 ops/s
Iteration  30: 888021.184 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_removeNullFromValues":
  848670.762 ±(99.9%) 17535.191 ops/s [Average]
  (min, avg, max) = (803398.992, 848670.762, 890468.750), stdev = 26245.850
  CI (99.9%): [831135.571, 866205.953] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
HashBiMapInverseValuesTest._Benchmark.benchmark_removeNullFromValues  thrpt   30  848670.762 ± 17535.191  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_retainAllFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_retainAllFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 509008.455 ops/s
# Warmup Iteration   2: 1277081.308 ops/s
# Warmup Iteration   3: 1256798.632 ops/s
# Warmup Iteration   4: 1035620.106 ops/s
# Warmup Iteration   5: 1304771.697 ops/s
# Warmup Iteration   6: 1316223.383 ops/s
# Warmup Iteration   7: 1256265.252 ops/s
# Warmup Iteration   8: 1279124.812 ops/s
# Warmup Iteration   9: 1349408.257 ops/s
# Warmup Iteration  10: 1289850.553 ops/s
# Warmup Iteration  11: 1289717.798 ops/s
# Warmup Iteration  12: 1272559.275 ops/s
# Warmup Iteration  13: 1269528.780 ops/s
# Warmup Iteration  14: 1322245.577 ops/s
# Warmup Iteration  15: 1277483.921 ops/s
# Warmup Iteration  16: 1263801.548 ops/s
# Warmup Iteration  17: 1282917.721 ops/s
# Warmup Iteration  18: 1293632.021 ops/s
# Warmup Iteration  19: 1261754.077 ops/s
# Warmup Iteration  20: 1285392.232 ops/s
# Warmup Iteration  21: 1331377.229 ops/s
# Warmup Iteration  22: 1334291.683 ops/s
# Warmup Iteration  23: 1309685.594 ops/s
# Warmup Iteration  24: 1301718.449 ops/s
# Warmup Iteration  25: 1370004.862 ops/s
# Warmup Iteration  26: 1267995.823 ops/s
# Warmup Iteration  27: 1305891.175 ops/s
# Warmup Iteration  28: 1313271.120 ops/s
# Warmup Iteration  29: 1334613.517 ops/s
# Warmup Iteration  30: 1295743.464 ops/s
Iteration   1: 1297074.176 ops/s
Iteration   2: 1288548.123 ops/s
Iteration   3: 1308445.703 ops/s
Iteration   4: 1305941.537 ops/s
Iteration   5: 1306233.580 ops/s
Iteration   6: 1326064.040 ops/s
Iteration   7: 1317193.167 ops/s
Iteration   8: 1303919.719 ops/s
Iteration   9: 1261141.729 ops/s
Iteration  10: 1315398.249 ops/s
Iteration  11: 1256207.726 ops/s
Iteration  12: 1302943.300 ops/s
Iteration  13: 1305741.832 ops/s
Iteration  14: 1286978.966 ops/s
Iteration  15: 1290319.284 ops/s
Iteration  16: 1292881.547 ops/s
Iteration  17: 1307886.184 ops/s
Iteration  18: 1302482.971 ops/s
Iteration  19: 1291041.751 ops/s
Iteration  20: 1323216.098 ops/s
Iteration  21: 1299156.324 ops/s
Iteration  22: 1317314.433 ops/s
Iteration  23: 1247723.955 ops/s
Iteration  24: 1255396.173 ops/s
Iteration  25: 1251108.430 ops/s
Iteration  26: 1267553.706 ops/s
Iteration  27: 1257859.089 ops/s
Iteration  28: 1323147.979 ops/s
Iteration  29: 1268625.418 ops/s
Iteration  30: 1253410.210 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_retainAllFromValues":
  1291031.847 ±(99.9%) 16413.843 ops/s [Average]
  (min, avg, max) = (1247723.955, 1291031.847, 1326064.040), stdev = 24567.469
  CI (99.9%): [1274618.004, 1307445.689] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
HashBiMapInverseValuesTest._Benchmark.benchmark_retainAllFromValues  thrpt   30  1291031.847 ± 16413.843  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 834005.743 ops/s
# Warmup Iteration   2: 1887235.288 ops/s
# Warmup Iteration   3: 1509265.959 ops/s
# Warmup Iteration   4: 1831813.161 ops/s
# Warmup Iteration   5: 1886618.388 ops/s
# Warmup Iteration   6: 1945506.065 ops/s
# Warmup Iteration   7: 1958364.778 ops/s
# Warmup Iteration   8: 1969491.698 ops/s
# Warmup Iteration   9: 1965957.198 ops/s
# Warmup Iteration  10: 1998394.210 ops/s
# Warmup Iteration  11: 1975547.366 ops/s
# Warmup Iteration  12: 1974777.720 ops/s
# Warmup Iteration  13: 1966024.801 ops/s
# Warmup Iteration  14: 2006745.811 ops/s
# Warmup Iteration  15: 1978370.755 ops/s
# Warmup Iteration  16: 2001560.667 ops/s
# Warmup Iteration  17: 1959122.876 ops/s
# Warmup Iteration  18: 1986860.222 ops/s
# Warmup Iteration  19: 2009400.374 ops/s
# Warmup Iteration  20: 1953806.675 ops/s
# Warmup Iteration  21: 1905692.303 ops/s
# Warmup Iteration  22: 1834806.292 ops/s
# Warmup Iteration  23: 1992962.853 ops/s
# Warmup Iteration  24: 2012670.775 ops/s
# Warmup Iteration  25: 1971916.078 ops/s
# Warmup Iteration  26: 1922150.152 ops/s
# Warmup Iteration  27: 1897773.613 ops/s
# Warmup Iteration  28: 1951993.306 ops/s
# Warmup Iteration  29: 1879637.470 ops/s
# Warmup Iteration  30: 1954550.682 ops/s
Iteration   1: 1861754.498 ops/s
Iteration   2: 1981131.021 ops/s
Iteration   3: 2002975.786 ops/s
Iteration   4: 1991714.332 ops/s
Iteration   5: 1961186.261 ops/s
Iteration   6: 1853181.333 ops/s
Iteration   7: 1846375.339 ops/s
Iteration   8: 1809027.389 ops/s
Iteration   9: 1821367.379 ops/s
Iteration  10: 1842077.022 ops/s
Iteration  11: 1852068.874 ops/s
Iteration  12: 1941860.350 ops/s
Iteration  13: 1957220.728 ops/s
Iteration  14: 1918324.129 ops/s
Iteration  15: 1963757.296 ops/s
Iteration  16: 1976650.396 ops/s
Iteration  17: 1925451.977 ops/s
Iteration  18: 2004061.502 ops/s
Iteration  19: 2025448.788 ops/s
Iteration  20: 2008894.979 ops/s
Iteration  21: 1962593.868 ops/s
Iteration  22: 1902395.260 ops/s
Iteration  23: 1841765.348 ops/s
Iteration  24: 1831571.666 ops/s
Iteration  25: 1816596.789 ops/s
Iteration  26: 1926439.826 ops/s
Iteration  27: 1928882.410 ops/s
Iteration  28: 1848684.920 ops/s
Iteration  29: 1841309.788 ops/s
Iteration  30: 1847668.996 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_size":
  1909747.942 ±(99.9%) 45889.211 ops/s [Average]
  (min, avg, max) = (1809027.389, 1909747.942, 2025448.788), stdev = 68684.815
  CI (99.9%): [1863858.731, 1955637.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseValuesTest._Benchmark.benchmark_size  thrpt   30  1909747.942 ± 45889.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_values$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_values

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1920859.114 ops/s
# Warmup Iteration   2: 4615429.780 ops/s
# Warmup Iteration   3: 3830202.152 ops/s
# Warmup Iteration   4: 4610397.052 ops/s
# Warmup Iteration   5: 4575850.205 ops/s
# Warmup Iteration   6: 4587538.212 ops/s
# Warmup Iteration   7: 4574891.946 ops/s
# Warmup Iteration   8: 4572538.883 ops/s
# Warmup Iteration   9: 4552440.407 ops/s
# Warmup Iteration  10: 4552142.627 ops/s
# Warmup Iteration  11: 4618279.955 ops/s
# Warmup Iteration  12: 4547867.426 ops/s
# Warmup Iteration  13: 4542013.723 ops/s
# Warmup Iteration  14: 4555967.350 ops/s
# Warmup Iteration  15: 4553596.955 ops/s
# Warmup Iteration  16: 4652121.673 ops/s
# Warmup Iteration  17: 4674598.562 ops/s
# Warmup Iteration  18: 4617004.432 ops/s
# Warmup Iteration  19: 4657398.712 ops/s
# Warmup Iteration  20: 4607582.043 ops/s
# Warmup Iteration  21: 4605256.851 ops/s
# Warmup Iteration  22: 4608403.364 ops/s
# Warmup Iteration  23: 4586474.219 ops/s
# Warmup Iteration  24: 4576475.613 ops/s
# Warmup Iteration  25: 4601988.910 ops/s
# Warmup Iteration  26: 4590233.070 ops/s
# Warmup Iteration  27: 4645853.317 ops/s
# Warmup Iteration  28: 4660094.501 ops/s
# Warmup Iteration  29: 4599201.685 ops/s
# Warmup Iteration  30: 4531940.031 ops/s
Iteration   1: 4580350.705 ops/s
Iteration   2: 4566647.188 ops/s
Iteration   3: 4544032.673 ops/s
Iteration   4: 4567326.264 ops/s
Iteration   5: 4557258.106 ops/s
Iteration   6: 4563117.514 ops/s
Iteration   7: 4574858.431 ops/s
Iteration   8: 4612955.702 ops/s
Iteration   9: 4581299.544 ops/s
Iteration  10: 4560998.016 ops/s
Iteration  11: 4623241.714 ops/s
Iteration  12: 4567090.966 ops/s
Iteration  13: 4552754.810 ops/s
Iteration  14: 4570018.937 ops/s
Iteration  15: 4567497.586 ops/s
Iteration  16: 4671981.499 ops/s
Iteration  17: 4613101.870 ops/s
Iteration  18: 4532999.973 ops/s
Iteration  19: 4649199.484 ops/s
Iteration  20: 4527277.694 ops/s
Iteration  21: 4575158.600 ops/s
Iteration  22: 4581729.790 ops/s
Iteration  23: 4550314.315 ops/s
Iteration  24: 4572583.504 ops/s
Iteration  25: 4368562.150 ops/s
Iteration  26: 4341822.354 ops/s
Iteration  27: 4239878.646 ops/s
Iteration  28: 4392818.086 ops/s
Iteration  29: 4601915.194 ops/s
Iteration  30: 4600015.318 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_values":
  4546960.221 ±(99.9%) 61725.193 ops/s [Average]
  (min, avg, max) = (4239878.646, 4546960.221, 4671981.499), stdev = 92387.371
  CI (99.9%): [4485235.028, 4608685.414] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapInverseValuesTest._Benchmark.benchmark_values  thrpt   30  4546960.221 ± 61725.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_valuesToArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_valuesToArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 352911.576 ops/s
# Warmup Iteration   2: 641815.752 ops/s
# Warmup Iteration   3: 723378.823 ops/s
# Warmup Iteration   4: 726138.997 ops/s
# Warmup Iteration   5: 740614.769 ops/s
# Warmup Iteration   6: 599804.077 ops/s
# Warmup Iteration   7: 737936.122 ops/s
# Warmup Iteration   8: 741619.447 ops/s
# Warmup Iteration   9: 735651.775 ops/s
# Warmup Iteration  10: 742118.611 ops/s
# Warmup Iteration  11: 742142.614 ops/s
# Warmup Iteration  12: 744359.610 ops/s
# Warmup Iteration  13: 739364.082 ops/s
# Warmup Iteration  14: 736649.821 ops/s
# Warmup Iteration  15: 748234.113 ops/s
# Warmup Iteration  16: 740892.278 ops/s
# Warmup Iteration  17: 695257.544 ops/s
# Warmup Iteration  18: 710161.469 ops/s
# Warmup Iteration  19: 689888.216 ops/s
# Warmup Iteration  20: 705157.300 ops/s
# Warmup Iteration  21: 696250.202 ops/s
# Warmup Iteration  22: 739823.423 ops/s
# Warmup Iteration  23: 740128.254 ops/s
# Warmup Iteration  24: 742685.294 ops/s
# Warmup Iteration  25: 720537.845 ops/s
# Warmup Iteration  26: 694176.533 ops/s
# Warmup Iteration  27: 697338.874 ops/s
# Warmup Iteration  28: 698488.495 ops/s
# Warmup Iteration  29: 694147.253 ops/s
# Warmup Iteration  30: 700174.644 ops/s
Iteration   1: 707962.239 ops/s
Iteration   2: 749836.055 ops/s
Iteration   3: 733590.030 ops/s
Iteration   4: 741751.427 ops/s
Iteration   5: 727150.732 ops/s
Iteration   6: 695742.842 ops/s
Iteration   7: 675421.609 ops/s
Iteration   8: 694258.052 ops/s
Iteration   9: 699828.817 ops/s
Iteration  10: 696651.839 ops/s
Iteration  11: 703971.505 ops/s
Iteration  12: 689686.088 ops/s
Iteration  13: 691122.062 ops/s
Iteration  14: 694512.456 ops/s
Iteration  15: 733685.378 ops/s
Iteration  16: 732442.274 ops/s
Iteration  17: 689512.897 ops/s
Iteration  18: 687099.491 ops/s
Iteration  19: 694286.840 ops/s
Iteration  20: 701367.594 ops/s
Iteration  21: 706343.782 ops/s
Iteration  22: 693702.224 ops/s
Iteration  23: 701646.057 ops/s
Iteration  24: 708773.271 ops/s
Iteration  25: 691183.139 ops/s
Iteration  26: 708082.711 ops/s
Iteration  27: 725025.879 ops/s
Iteration  28: 717448.312 ops/s
Iteration  29: 710109.390 ops/s
Iteration  30: 694137.832 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseValuesTest._Benchmark.benchmark_valuesToArray":
  706544.427 ±(99.9%) 12178.882 ops/s [Average]
  (min, avg, max) = (675421.609, 706544.427, 749836.055), stdev = 18228.779
  CI (99.9%): [694365.545, 718723.310] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
HashBiMapInverseValuesTest._Benchmark.benchmark_valuesToArray  thrpt   30  706544.427 ± 12178.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 510864.538 ops/s
# Warmup Iteration   2: 620315.835 ops/s
# Warmup Iteration   3: 827345.075 ops/s
# Warmup Iteration   4: 791571.463 ops/s
# Warmup Iteration   5: 823210.657 ops/s
# Warmup Iteration   6: 822491.206 ops/s
# Warmup Iteration   7: 824828.047 ops/s
# Warmup Iteration   8: 824240.703 ops/s
# Warmup Iteration   9: 684137.771 ops/s
# Warmup Iteration  10: 811005.419 ops/s
# Warmup Iteration  11: 805644.500 ops/s
# Warmup Iteration  12: 799833.647 ops/s
# Warmup Iteration  13: 771823.250 ops/s
# Warmup Iteration  14: 833763.978 ops/s
# Warmup Iteration  15: 791303.611 ops/s
# Warmup Iteration  16: 801343.266 ops/s
# Warmup Iteration  17: 846008.525 ops/s
# Warmup Iteration  18: 843080.422 ops/s
# Warmup Iteration  19: 838940.600 ops/s
# Warmup Iteration  20: 837751.571 ops/s
# Warmup Iteration  21: 833120.891 ops/s
# Warmup Iteration  22: 853033.627 ops/s
# Warmup Iteration  23: 835643.174 ops/s
# Warmup Iteration  24: 868330.903 ops/s
# Warmup Iteration  25: 857503.694 ops/s
# Warmup Iteration  26: 841029.748 ops/s
# Warmup Iteration  27: 831462.875 ops/s
# Warmup Iteration  28: 831383.110 ops/s
# Warmup Iteration  29: 830560.022 ops/s
# Warmup Iteration  30: 830333.721 ops/s
Iteration   1: 840145.093 ops/s
Iteration   2: 867927.024 ops/s
Iteration   3: 826831.153 ops/s
Iteration   4: 863734.729 ops/s
Iteration   5: 822438.786 ops/s
Iteration   6: 833071.290 ops/s
Iteration   7: 866016.850 ops/s
Iteration   8: 832044.734 ops/s
Iteration   9: 871893.113 ops/s
Iteration  10: 874532.247 ops/s
Iteration  11: 866029.915 ops/s
Iteration  12: 871207.196 ops/s
Iteration  13: 872538.648 ops/s
Iteration  14: 865609.685 ops/s
Iteration  15: 833020.823 ops/s
Iteration  16: 843960.773 ops/s
Iteration  17: 825910.866 ops/s
Iteration  18: 840089.390 ops/s
Iteration  19: 825855.819 ops/s
Iteration  20: 830364.303 ops/s
Iteration  21: 854587.579 ops/s
Iteration  22: 874833.012 ops/s
Iteration  23: 873209.341 ops/s
Iteration  24: 868582.353 ops/s
Iteration  25: 869098.172 ops/s
Iteration  26: 868811.754 ops/s
Iteration  27: 843320.502 ops/s
Iteration  28: 838774.284 ops/s
Iteration  29: 829336.931 ops/s
Iteration  30: 876524.589 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_add":
  852343.365 ±(99.9%) 12807.659 ops/s [Average]
  (min, avg, max) = (822438.786, 852343.365, 876524.589), stdev = 19169.902
  CI (99.9%): [839535.706, 865151.024] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score       Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_add  thrpt   30  852343.365 ± 12807.659  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 477728.106 ops/s
# Warmup Iteration   2: 558421.298 ops/s
# Warmup Iteration   3: 724261.135 ops/s
# Warmup Iteration   4: 730964.649 ops/s
# Warmup Iteration   5: 740768.939 ops/s
# Warmup Iteration   6: 749317.485 ops/s
# Warmup Iteration   7: 735154.250 ops/s
# Warmup Iteration   8: 735960.378 ops/s
# Warmup Iteration   9: 710610.963 ops/s
# Warmup Iteration  10: 670425.215 ops/s
# Warmup Iteration  11: 724210.906 ops/s
# Warmup Iteration  12: 723958.904 ops/s
# Warmup Iteration  13: 731655.531 ops/s
# Warmup Iteration  14: 732325.060 ops/s
# Warmup Iteration  15: 732952.094 ops/s
# Warmup Iteration  16: 722475.031 ops/s
# Warmup Iteration  17: 763791.502 ops/s
# Warmup Iteration  18: 759506.322 ops/s
# Warmup Iteration  19: 752772.890 ops/s
# Warmup Iteration  20: 764724.670 ops/s
# Warmup Iteration  21: 758400.111 ops/s
# Warmup Iteration  22: 790468.650 ops/s
# Warmup Iteration  23: 757047.767 ops/s
# Warmup Iteration  24: 765971.040 ops/s
# Warmup Iteration  25: 760305.717 ops/s
# Warmup Iteration  26: 755951.295 ops/s
# Warmup Iteration  27: 782558.228 ops/s
# Warmup Iteration  28: 761235.518 ops/s
# Warmup Iteration  29: 792518.323 ops/s
# Warmup Iteration  30: 788794.646 ops/s
Iteration   1: 769062.330 ops/s
Iteration   2: 760088.626 ops/s
Iteration   3: 765259.523 ops/s
Iteration   4: 767896.696 ops/s
Iteration   5: 794487.813 ops/s
Iteration   6: 770944.920 ops/s
Iteration   7: 758982.619 ops/s
Iteration   8: 755053.761 ops/s
Iteration   9: 762084.860 ops/s
Iteration  10: 773390.439 ops/s
Iteration  11: 763888.507 ops/s
Iteration  12: 774924.327 ops/s
Iteration  13: 759522.980 ops/s
Iteration  14: 797970.385 ops/s
Iteration  15: 787402.626 ops/s
Iteration  16: 768787.893 ops/s
Iteration  17: 767742.306 ops/s
Iteration  18: 767925.691 ops/s
Iteration  19: 761307.595 ops/s
Iteration  20: 775049.413 ops/s
Iteration  21: 772710.457 ops/s
Iteration  22: 760684.081 ops/s
Iteration  23: 759129.151 ops/s
Iteration  24: 757619.198 ops/s
Iteration  25: 796360.318 ops/s
Iteration  26: 836686.228 ops/s
Iteration  27: 803552.274 ops/s
Iteration  28: 803085.171 ops/s
Iteration  29: 794624.828 ops/s
Iteration  30: 804757.600 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_addAll":
  776366.087 ±(99.9%) 12917.421 ops/s [Average]
  (min, avg, max) = (755053.761, 776366.087, 836686.228), stdev = 19334.189
  CI (99.9%): [763448.666, 789283.508] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_addAll  thrpt   30  776366.087 ± 12917.421  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_clearKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_clearKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1225864.790 ops/s
# Warmup Iteration   2: 3061122.991 ops/s
# Warmup Iteration   3: 3074772.382 ops/s
# Warmup Iteration   4: 2504481.029 ops/s
# Warmup Iteration   5: 3179350.868 ops/s
# Warmup Iteration   6: 3078373.274 ops/s
# Warmup Iteration   7: 3078111.090 ops/s
# Warmup Iteration   8: 3152044.598 ops/s
# Warmup Iteration   9: 3076264.293 ops/s
# Warmup Iteration  10: 3158559.517 ops/s
# Warmup Iteration  11: 3063194.593 ops/s
# Warmup Iteration  12: 3053580.380 ops/s
# Warmup Iteration  13: 3115061.183 ops/s
# Warmup Iteration  14: 3095498.970 ops/s
# Warmup Iteration  15: 3141213.186 ops/s
# Warmup Iteration  16: 3038478.370 ops/s
# Warmup Iteration  17: 3053887.102 ops/s
# Warmup Iteration  18: 3051593.930 ops/s
# Warmup Iteration  19: 3054257.271 ops/s
# Warmup Iteration  20: 3076078.334 ops/s
# Warmup Iteration  21: 3120666.682 ops/s
# Warmup Iteration  22: 3103047.217 ops/s
# Warmup Iteration  23: 3154461.048 ops/s
# Warmup Iteration  24: 3131410.066 ops/s
# Warmup Iteration  25: 3073685.023 ops/s
# Warmup Iteration  26: 3077382.977 ops/s
# Warmup Iteration  27: 3005609.535 ops/s
# Warmup Iteration  28: 3091181.502 ops/s
# Warmup Iteration  29: 3040712.527 ops/s
# Warmup Iteration  30: 3107757.020 ops/s
Iteration   1: 3072922.780 ops/s
Iteration   2: 3057007.499 ops/s
Iteration   3: 3067940.157 ops/s
Iteration   4: 3078512.576 ops/s
Iteration   5: 3098569.503 ops/s
Iteration   6: 3055805.971 ops/s
Iteration   7: 3123590.040 ops/s
Iteration   8: 3053714.953 ops/s
Iteration   9: 3189097.881 ops/s
Iteration  10: 3076076.502 ops/s
Iteration  11: 3158838.157 ops/s
Iteration  12: 3058691.428 ops/s
Iteration  13: 3181983.085 ops/s
Iteration  14: 3218887.404 ops/s
Iteration  15: 3016551.240 ops/s
Iteration  16: 3068689.753 ops/s
Iteration  17: 3027878.215 ops/s
Iteration  18: 3058976.657 ops/s
Iteration  19: 3054466.805 ops/s
Iteration  20: 3089807.899 ops/s
Iteration  21: 3072077.226 ops/s
Iteration  22: 3019571.459 ops/s
Iteration  23: 3018610.672 ops/s
Iteration  24: 3177538.118 ops/s
Iteration  25: 3212325.520 ops/s
Iteration  26: 3140659.825 ops/s
Iteration  27: 3104202.017 ops/s
Iteration  28: 3184160.582 ops/s
Iteration  29: 3219380.513 ops/s
Iteration  30: 3171680.829 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_clearKeySet":
  3104273.842 ±(99.9%) 43042.451 ops/s [Average]
  (min, avg, max) = (3016551.240, 3104273.842, 3219380.513), stdev = 64423.920
  CI (99.9%): [3061231.391, 3147316.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_clearKeySet  thrpt   30  3104273.842 ± 43042.451  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1599402.620 ops/s
# Warmup Iteration   2: 3801650.087 ops/s
# Warmup Iteration   3: 3867813.541 ops/s
# Warmup Iteration   4: 3140111.665 ops/s
# Warmup Iteration   5: 3838506.566 ops/s
# Warmup Iteration   6: 3832675.564 ops/s
# Warmup Iteration   7: 3918469.857 ops/s
# Warmup Iteration   8: 3947231.521 ops/s
# Warmup Iteration   9: 3877274.937 ops/s
# Warmup Iteration  10: 3855610.420 ops/s
# Warmup Iteration  11: 3843250.476 ops/s
# Warmup Iteration  12: 3854450.972 ops/s
# Warmup Iteration  13: 3898768.304 ops/s
# Warmup Iteration  14: 3837059.093 ops/s
# Warmup Iteration  15: 3920058.670 ops/s
# Warmup Iteration  16: 3885335.190 ops/s
# Warmup Iteration  17: 3965801.694 ops/s
# Warmup Iteration  18: 3851787.665 ops/s
# Warmup Iteration  19: 3933807.707 ops/s
# Warmup Iteration  20: 3868886.479 ops/s
# Warmup Iteration  21: 3835358.368 ops/s
# Warmup Iteration  22: 3847510.659 ops/s
# Warmup Iteration  23: 3864365.833 ops/s
# Warmup Iteration  24: 3848236.562 ops/s
# Warmup Iteration  25: 3875361.154 ops/s
# Warmup Iteration  26: 3816822.269 ops/s
# Warmup Iteration  27: 4021808.863 ops/s
# Warmup Iteration  28: 3869085.780 ops/s
# Warmup Iteration  29: 3909766.921 ops/s
# Warmup Iteration  30: 3865937.175 ops/s
Iteration   1: 3837897.376 ops/s
Iteration   2: 4019946.011 ops/s
Iteration   3: 3992980.442 ops/s
Iteration   4: 3858572.333 ops/s
Iteration   5: 3796846.121 ops/s
Iteration   6: 3914320.425 ops/s
Iteration   7: 3850795.108 ops/s
Iteration   8: 3875877.597 ops/s
Iteration   9: 3749049.158 ops/s
Iteration  10: 3857423.099 ops/s
Iteration  11: 3957950.542 ops/s
Iteration  12: 3860742.726 ops/s
Iteration  13: 3792904.366 ops/s
Iteration  14: 3870681.423 ops/s
Iteration  15: 4041209.080 ops/s
Iteration  16: 3906509.640 ops/s
Iteration  17: 4006929.685 ops/s
Iteration  18: 4028938.920 ops/s
Iteration  19: 4025900.241 ops/s
Iteration  20: 3861107.995 ops/s
Iteration  21: 3856469.614 ops/s
Iteration  22: 3824142.374 ops/s
Iteration  23: 3836716.150 ops/s
Iteration  24: 3776444.666 ops/s
Iteration  25: 4031571.007 ops/s
Iteration  26: 4023371.753 ops/s
Iteration  27: 4058483.669 ops/s
Iteration  28: 4013786.764 ops/s
Iteration  29: 3999668.822 ops/s
Iteration  30: 3973726.141 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_contains":
  3916698.775 ±(99.9%) 62552.448 ops/s [Average]
  (min, avg, max) = (3749049.158, 3916698.775, 4058483.669), stdev = 93625.566
  CI (99.9%): [3854146.327, 3979251.223] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_contains  thrpt   30  3916698.775 ± 62552.448  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 856999.867 ops/s
# Warmup Iteration   2: 2483293.815 ops/s
# Warmup Iteration   3: 2612246.663 ops/s
# Warmup Iteration   4: 2085426.483 ops/s
# Warmup Iteration   5: 2561253.437 ops/s
# Warmup Iteration   6: 2588534.787 ops/s
# Warmup Iteration   7: 2576605.661 ops/s
# Warmup Iteration   8: 2524605.447 ops/s
# Warmup Iteration   9: 2516065.707 ops/s
# Warmup Iteration  10: 2554305.261 ops/s
# Warmup Iteration  11: 2479960.149 ops/s
# Warmup Iteration  12: 2549207.092 ops/s
# Warmup Iteration  13: 2534805.160 ops/s
# Warmup Iteration  14: 2525484.178 ops/s
# Warmup Iteration  15: 2544437.723 ops/s
# Warmup Iteration  16: 2517946.290 ops/s
# Warmup Iteration  17: 2608738.645 ops/s
# Warmup Iteration  18: 2515324.371 ops/s
# Warmup Iteration  19: 2532589.710 ops/s
# Warmup Iteration  20: 2557903.669 ops/s
# Warmup Iteration  21: 2594984.696 ops/s
# Warmup Iteration  22: 2536742.082 ops/s
# Warmup Iteration  23: 2529351.211 ops/s
# Warmup Iteration  24: 2546481.810 ops/s
# Warmup Iteration  25: 2570016.717 ops/s
# Warmup Iteration  26: 2515209.318 ops/s
# Warmup Iteration  27: 2531643.498 ops/s
# Warmup Iteration  28: 2582522.888 ops/s
# Warmup Iteration  29: 2557092.293 ops/s
# Warmup Iteration  30: 2542046.886 ops/s
Iteration   1: 2530573.545 ops/s
Iteration   2: 2653037.925 ops/s
Iteration   3: 2641759.808 ops/s
Iteration   4: 2575682.197 ops/s
Iteration   5: 2509522.544 ops/s
Iteration   6: 2619319.568 ops/s
Iteration   7: 2630606.711 ops/s
Iteration   8: 2511026.085 ops/s
Iteration   9: 2522595.807 ops/s
Iteration  10: 2547069.463 ops/s
Iteration  11: 2540302.194 ops/s
Iteration  12: 2527371.590 ops/s
Iteration  13: 2517292.722 ops/s
Iteration  14: 2516088.073 ops/s
Iteration  15: 2553704.412 ops/s
Iteration  16: 2650020.665 ops/s
Iteration  17: 2638273.893 ops/s
Iteration  18: 2631855.034 ops/s
Iteration  19: 2641124.527 ops/s
Iteration  20: 2502227.662 ops/s
Iteration  21: 2521760.408 ops/s
Iteration  22: 2492550.035 ops/s
Iteration  23: 2535199.617 ops/s
Iteration  24: 2584576.070 ops/s
Iteration  25: 2532950.101 ops/s
Iteration  26: 2577568.733 ops/s
Iteration  27: 2499621.083 ops/s
Iteration  28: 2504992.207 ops/s
Iteration  29: 2494821.282 ops/s
Iteration  30: 2507658.217 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_containsAll":
  2557038.406 ±(99.9%) 36739.659 ops/s [Average]
  (min, avg, max) = (2492550.035, 2557038.406, 2653037.925), stdev = 54990.197
  CI (99.9%): [2520298.747, 2593778.065] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_containsAll  thrpt   30  2557038.406 ± 36739.659  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1260183.724 ops/s
# Warmup Iteration   2: 2993167.924 ops/s
# Warmup Iteration   3: 2409097.089 ops/s
# Warmup Iteration   4: 2955119.269 ops/s
# Warmup Iteration   5: 2989185.978 ops/s
# Warmup Iteration   6: 3017886.544 ops/s
# Warmup Iteration   7: 3008315.535 ops/s
# Warmup Iteration   8: 3045921.085 ops/s
# Warmup Iteration   9: 3032765.343 ops/s
# Warmup Iteration  10: 3026333.097 ops/s
# Warmup Iteration  11: 2970887.960 ops/s
# Warmup Iteration  12: 3005629.527 ops/s
# Warmup Iteration  13: 3009908.094 ops/s
# Warmup Iteration  14: 2980577.348 ops/s
# Warmup Iteration  15: 2966590.178 ops/s
# Warmup Iteration  16: 2938161.830 ops/s
# Warmup Iteration  17: 2978338.381 ops/s
# Warmup Iteration  18: 2950162.679 ops/s
# Warmup Iteration  19: 2927946.605 ops/s
# Warmup Iteration  20: 2964994.432 ops/s
# Warmup Iteration  21: 2965046.289 ops/s
# Warmup Iteration  22: 3039790.308 ops/s
# Warmup Iteration  23: 2988114.725 ops/s
# Warmup Iteration  24: 2967984.239 ops/s
# Warmup Iteration  25: 3075070.846 ops/s
# Warmup Iteration  26: 2971024.142 ops/s
# Warmup Iteration  27: 3005821.287 ops/s
# Warmup Iteration  28: 2980969.088 ops/s
# Warmup Iteration  29: 2957208.231 ops/s
# Warmup Iteration  30: 2998581.566 ops/s
Iteration   1: 2936753.896 ops/s
Iteration   2: 2994080.276 ops/s
Iteration   3: 2955635.469 ops/s
Iteration   4: 2983356.488 ops/s
Iteration   5: 3035824.084 ops/s
Iteration   6: 3033648.307 ops/s
Iteration   7: 3072547.203 ops/s
Iteration   8: 3053879.536 ops/s
Iteration   9: 3004481.085 ops/s
Iteration  10: 3004282.694 ops/s
Iteration  11: 3022075.865 ops/s
Iteration  12: 2934515.505 ops/s
Iteration  13: 2976559.754 ops/s
Iteration  14: 2980647.511 ops/s
Iteration  15: 2986579.131 ops/s
Iteration  16: 2982409.181 ops/s
Iteration  17: 2962580.276 ops/s
Iteration  18: 2948367.745 ops/s
Iteration  19: 3033815.063 ops/s
Iteration  20: 3069158.590 ops/s
Iteration  21: 2997806.489 ops/s
Iteration  22: 2976923.737 ops/s
Iteration  23: 2987466.463 ops/s
Iteration  24: 3008980.393 ops/s
Iteration  25: 3090125.534 ops/s
Iteration  26: 3033864.478 ops/s
Iteration  27: 3066911.222 ops/s
Iteration  28: 3081673.485 ops/s
Iteration  29: 3063784.964 ops/s
Iteration  30: 2959525.659 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_isEmpty":
  3007942.003 ±(99.9%) 29901.725 ops/s [Average]
  (min, avg, max) = (2934515.505, 3007942.003, 3090125.534), stdev = 44755.498
  CI (99.9%): [2978040.278, 3037843.728] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_isEmpty  thrpt   30  3007942.003 ± 29901.725  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 75976.465 ops/s
# Warmup Iteration   2: 89286.192 ops/s
# Warmup Iteration   3: 113298.685 ops/s
# Warmup Iteration   4: 120705.601 ops/s
# Warmup Iteration   5: 122960.041 ops/s
# Warmup Iteration   6: 121809.665 ops/s
# Warmup Iteration   7: 122319.981 ops/s
# Warmup Iteration   8: 122914.331 ops/s
# Warmup Iteration   9: 124944.657 ops/s
# Warmup Iteration  10: 126150.847 ops/s
# Warmup Iteration  11: 126630.843 ops/s
# Warmup Iteration  12: 107447.648 ops/s
# Warmup Iteration  13: 121500.924 ops/s
# Warmup Iteration  14: 120028.558 ops/s
# Warmup Iteration  15: 121704.652 ops/s
# Warmup Iteration  16: 120329.633 ops/s
# Warmup Iteration  17: 126643.421 ops/s
# Warmup Iteration  18: 125421.838 ops/s
# Warmup Iteration  19: 127357.541 ops/s
# Warmup Iteration  20: 127111.331 ops/s
# Warmup Iteration  21: 125381.502 ops/s
# Warmup Iteration  22: 126800.459 ops/s
# Warmup Iteration  23: 125737.824 ops/s
# Warmup Iteration  24: 125367.302 ops/s
# Warmup Iteration  25: 126526.424 ops/s
# Warmup Iteration  26: 127917.150 ops/s
# Warmup Iteration  27: 127894.322 ops/s
# Warmup Iteration  28: 125921.367 ops/s
# Warmup Iteration  29: 130939.787 ops/s
# Warmup Iteration  30: 132190.277 ops/s
Iteration   1: 126816.836 ops/s
Iteration   2: 127702.335 ops/s
Iteration   3: 125514.530 ops/s
Iteration   4: 126139.984 ops/s
Iteration   5: 126968.750 ops/s
Iteration   6: 126031.378 ops/s
Iteration   7: 125781.058 ops/s
Iteration   8: 126308.955 ops/s
Iteration   9: 126573.892 ops/s
Iteration  10: 128411.131 ops/s
Iteration  11: 129139.692 ops/s
Iteration  12: 127863.611 ops/s
Iteration  13: 127978.758 ops/s
Iteration  14: 129604.034 ops/s
Iteration  15: 126803.381 ops/s
Iteration  16: 131844.556 ops/s
Iteration  17: 127891.318 ops/s
Iteration  18: 125481.533 ops/s
Iteration  19: 127201.752 ops/s
Iteration  20: 126449.807 ops/s
Iteration  21: 127242.616 ops/s
Iteration  22: 127385.081 ops/s
Iteration  23: 128974.231 ops/s
Iteration  24: 130275.719 ops/s
Iteration  25: 127913.791 ops/s
Iteration  26: 125352.996 ops/s
Iteration  27: 127064.314 ops/s
Iteration  28: 125096.367 ops/s
Iteration  29: 129684.086 ops/s
Iteration  30: 126648.900 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_iterator":
  127404.846 ±(99.9%) 1059.905 ops/s [Average]
  (min, avg, max) = (125096.367, 127404.846, 131844.556), stdev = 1586.416
  CI (99.9%): [126344.941, 128464.752] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_iterator  thrpt   30  127404.846 ± 1059.905  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_keySetEqualsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_keySetEqualsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 535919.542 ops/s
# Warmup Iteration   2: 1108089.136 ops/s
# Warmup Iteration   3: 1257157.692 ops/s
# Warmup Iteration   4: 1247396.542 ops/s
# Warmup Iteration   5: 1014283.090 ops/s
# Warmup Iteration   6: 1282431.080 ops/s
# Warmup Iteration   7: 1231050.139 ops/s
# Warmup Iteration   8: 1219660.748 ops/s
# Warmup Iteration   9: 1277621.676 ops/s
# Warmup Iteration  10: 1203831.993 ops/s
# Warmup Iteration  11: 1231157.758 ops/s
# Warmup Iteration  12: 1250838.780 ops/s
# Warmup Iteration  13: 1219587.247 ops/s
# Warmup Iteration  14: 1224058.578 ops/s
# Warmup Iteration  15: 1215749.470 ops/s
# Warmup Iteration  16: 1244995.684 ops/s
# Warmup Iteration  17: 1239396.336 ops/s
# Warmup Iteration  18: 1207407.800 ops/s
# Warmup Iteration  19: 1227806.042 ops/s
# Warmup Iteration  20: 1213615.453 ops/s
# Warmup Iteration  21: 1226732.763 ops/s
# Warmup Iteration  22: 1275568.757 ops/s
# Warmup Iteration  23: 1239666.200 ops/s
# Warmup Iteration  24: 1257150.843 ops/s
# Warmup Iteration  25: 1221577.522 ops/s
# Warmup Iteration  26: 1239856.500 ops/s
# Warmup Iteration  27: 1239772.152 ops/s
# Warmup Iteration  28: 1255516.637 ops/s
# Warmup Iteration  29: 1222609.664 ops/s
# Warmup Iteration  30: 1221473.361 ops/s
Iteration   1: 1228561.054 ops/s
Iteration   2: 1264659.022 ops/s
Iteration   3: 1258090.517 ops/s
Iteration   4: 1291821.985 ops/s
Iteration   5: 1261693.375 ops/s
Iteration   6: 1240315.262 ops/s
Iteration   7: 1221014.296 ops/s
Iteration   8: 1242619.643 ops/s
Iteration   9: 1241776.061 ops/s
Iteration  10: 1196697.034 ops/s
Iteration  11: 1224480.318 ops/s
Iteration  12: 1248886.554 ops/s
Iteration  13: 1254111.096 ops/s
Iteration  14: 1240092.530 ops/s
Iteration  15: 1242711.573 ops/s
Iteration  16: 1223540.509 ops/s
Iteration  17: 1223553.704 ops/s
Iteration  18: 1212226.308 ops/s
Iteration  19: 1237789.136 ops/s
Iteration  20: 1227203.925 ops/s
Iteration  21: 1222920.674 ops/s
Iteration  22: 1229545.617 ops/s
Iteration  23: 1237020.360 ops/s
Iteration  24: 1237540.771 ops/s
Iteration  25: 1231900.474 ops/s
Iteration  26: 1228565.643 ops/s
Iteration  27: 1203201.951 ops/s
Iteration  28: 1217940.075 ops/s
Iteration  29: 1229462.688 ops/s
Iteration  30: 1233196.305 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_keySetEqualsAndHashCode":
  1235104.615 ±(99.9%) 12632.233 ops/s [Average]
  (min, avg, max) = (1196697.034, 1235104.615, 1291821.985), stdev = 18907.333
  CI (99.9%): [1222472.383, 1247736.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_keySetEqualsAndHashCode  thrpt   30  1235104.615 ± 12632.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_keySetToArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_keySetToArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 312681.855 ops/s
# Warmup Iteration   2: 507492.658 ops/s
# Warmup Iteration   3: 616034.693 ops/s
# Warmup Iteration   4: 626943.003 ops/s
# Warmup Iteration   5: 642695.131 ops/s
# Warmup Iteration   6: 587586.612 ops/s
# Warmup Iteration   7: 602778.324 ops/s
# Warmup Iteration   8: 669109.542 ops/s
# Warmup Iteration   9: 610877.830 ops/s
# Warmup Iteration  10: 639154.784 ops/s
# Warmup Iteration  11: 639781.106 ops/s
# Warmup Iteration  12: 639501.526 ops/s
# Warmup Iteration  13: 612819.953 ops/s
# Warmup Iteration  14: 638946.554 ops/s
# Warmup Iteration  15: 625553.947 ops/s
# Warmup Iteration  16: 614466.667 ops/s
# Warmup Iteration  17: 650547.901 ops/s
# Warmup Iteration  18: 621297.644 ops/s
# Warmup Iteration  19: 638451.370 ops/s
# Warmup Iteration  20: 637195.853 ops/s
# Warmup Iteration  21: 622226.896 ops/s
# Warmup Iteration  22: 614393.078 ops/s
# Warmup Iteration  23: 642777.816 ops/s
# Warmup Iteration  24: 625385.963 ops/s
# Warmup Iteration  25: 619455.475 ops/s
# Warmup Iteration  26: 638828.448 ops/s
# Warmup Iteration  27: 637659.440 ops/s
# Warmup Iteration  28: 630506.212 ops/s
# Warmup Iteration  29: 617675.462 ops/s
# Warmup Iteration  30: 614095.715 ops/s
Iteration   1: 621936.003 ops/s
Iteration   2: 648343.063 ops/s
Iteration   3: 615816.126 ops/s
Iteration   4: 620253.732 ops/s
Iteration   5: 610520.889 ops/s
Iteration   6: 648149.086 ops/s
Iteration   7: 632284.980 ops/s
Iteration   8: 656074.973 ops/s
Iteration   9: 661029.519 ops/s
Iteration  10: 605976.420 ops/s
Iteration  11: 617790.878 ops/s
Iteration  12: 614540.198 ops/s
Iteration  13: 610685.833 ops/s
Iteration  14: 634177.659 ops/s
Iteration  15: 618411.334 ops/s
Iteration  16: 635875.053 ops/s
Iteration  17: 633464.305 ops/s
Iteration  18: 630349.130 ops/s
Iteration  19: 609407.850 ops/s
Iteration  20: 612331.906 ops/s
Iteration  21: 663275.836 ops/s
Iteration  22: 652389.781 ops/s
Iteration  23: 634554.088 ops/s
Iteration  24: 623568.824 ops/s
Iteration  25: 611319.981 ops/s
Iteration  26: 598282.576 ops/s
Iteration  27: 607623.141 ops/s
Iteration  28: 619051.054 ops/s
Iteration  29: 638792.649 ops/s
Iteration  30: 617882.014 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_keySetToArray":
  626805.296 ±(99.9%) 11698.702 ops/s [Average]
  (min, avg, max) = (598282.576, 626805.296, 663275.836), stdev = 17510.068
  CI (99.9%): [615106.594, 638503.998] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_keySetToArray  thrpt   30  626805.296 ± 11698.702  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_removeAllFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_removeAllFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 418196.336 ops/s
# Warmup Iteration   2: 926703.915 ops/s
# Warmup Iteration   3: 1007966.804 ops/s
# Warmup Iteration   4: 974153.011 ops/s
# Warmup Iteration   5: 843513.202 ops/s
# Warmup Iteration   6: 986492.873 ops/s
# Warmup Iteration   7: 993004.932 ops/s
# Warmup Iteration   8: 985486.798 ops/s
# Warmup Iteration   9: 990274.465 ops/s
# Warmup Iteration  10: 1000299.897 ops/s
# Warmup Iteration  11: 1033029.601 ops/s
# Warmup Iteration  12: 999037.987 ops/s
# Warmup Iteration  13: 993514.235 ops/s
# Warmup Iteration  14: 1017874.133 ops/s
# Warmup Iteration  15: 1036758.046 ops/s
# Warmup Iteration  16: 972571.862 ops/s
# Warmup Iteration  17: 983266.749 ops/s
# Warmup Iteration  18: 986187.844 ops/s
# Warmup Iteration  19: 993122.137 ops/s
# Warmup Iteration  20: 981926.569 ops/s
# Warmup Iteration  21: 988413.567 ops/s
# Warmup Iteration  22: 990570.430 ops/s
# Warmup Iteration  23: 973607.262 ops/s
# Warmup Iteration  24: 984154.055 ops/s
# Warmup Iteration  25: 996647.150 ops/s
# Warmup Iteration  26: 1025291.214 ops/s
# Warmup Iteration  27: 1027887.768 ops/s
# Warmup Iteration  28: 1008903.003 ops/s
# Warmup Iteration  29: 983252.867 ops/s
# Warmup Iteration  30: 983457.397 ops/s
Iteration   1: 1025073.032 ops/s
Iteration   2: 978933.391 ops/s
Iteration   3: 980883.545 ops/s
Iteration   4: 998286.223 ops/s
Iteration   5: 1002112.107 ops/s
Iteration   6: 985583.249 ops/s
Iteration   7: 993275.778 ops/s
Iteration   8: 989330.483 ops/s
Iteration   9: 967118.050 ops/s
Iteration  10: 982624.062 ops/s
Iteration  11: 974126.731 ops/s
Iteration  12: 966832.567 ops/s
Iteration  13: 1010165.193 ops/s
Iteration  14: 988290.456 ops/s
Iteration  15: 976886.427 ops/s
Iteration  16: 1019155.864 ops/s
Iteration  17: 1012780.330 ops/s
Iteration  18: 1007810.748 ops/s
Iteration  19: 1018006.820 ops/s
Iteration  20: 1034424.933 ops/s
Iteration  21: 1035400.497 ops/s
Iteration  22: 1024161.202 ops/s
Iteration  23: 1015439.320 ops/s
Iteration  24: 1015793.008 ops/s
Iteration  25: 1012887.284 ops/s
Iteration  26: 1026624.536 ops/s
Iteration  27: 985219.294 ops/s
Iteration  28: 999761.285 ops/s
Iteration  29: 1008897.327 ops/s
Iteration  30: 991265.566 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_removeAllFromKeySet":
  1000904.977 ±(99.9%) 13240.316 ops/s [Average]
  (min, avg, max) = (966832.567, 1000904.977, 1035400.497), stdev = 19817.483
  CI (99.9%): [987664.661, 1014145.293] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_removeAllFromKeySet  thrpt   30  1000904.977 ± 13240.316  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_removeFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_removeFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 529183.335 ops/s
# Warmup Iteration   2: 1263824.503 ops/s
# Warmup Iteration   3: 1293187.924 ops/s
# Warmup Iteration   4: 1056984.689 ops/s
# Warmup Iteration   5: 1285070.399 ops/s
# Warmup Iteration   6: 1299796.220 ops/s
# Warmup Iteration   7: 1305074.124 ops/s
# Warmup Iteration   8: 1308604.723 ops/s
# Warmup Iteration   9: 1297250.913 ops/s
# Warmup Iteration  10: 1313668.583 ops/s
# Warmup Iteration  11: 1341698.264 ops/s
# Warmup Iteration  12: 1330152.706 ops/s
# Warmup Iteration  13: 1331835.647 ops/s
# Warmup Iteration  14: 1285937.210 ops/s
# Warmup Iteration  15: 1303023.902 ops/s
# Warmup Iteration  16: 1279842.724 ops/s
# Warmup Iteration  17: 1353209.615 ops/s
# Warmup Iteration  18: 1309809.298 ops/s
# Warmup Iteration  19: 1344277.465 ops/s
# Warmup Iteration  20: 1340950.288 ops/s
# Warmup Iteration  21: 1306091.325 ops/s
# Warmup Iteration  22: 1321719.768 ops/s
# Warmup Iteration  23: 1323077.778 ops/s
# Warmup Iteration  24: 1326713.366 ops/s
# Warmup Iteration  25: 1319687.070 ops/s
# Warmup Iteration  26: 1289301.881 ops/s
# Warmup Iteration  27: 1293319.985 ops/s
# Warmup Iteration  28: 1357011.131 ops/s
# Warmup Iteration  29: 1310645.617 ops/s
# Warmup Iteration  30: 1301637.357 ops/s
Iteration   1: 1295383.127 ops/s
Iteration   2: 1340497.061 ops/s
Iteration   3: 1293491.431 ops/s
Iteration   4: 1285508.278 ops/s
Iteration   5: 1298281.534 ops/s
Iteration   6: 1304339.020 ops/s
Iteration   7: 1336900.007 ops/s
Iteration   8: 1329612.313 ops/s
Iteration   9: 1304229.209 ops/s
Iteration  10: 1286130.500 ops/s
Iteration  11: 1346449.642 ops/s
Iteration  12: 1291592.886 ops/s
Iteration  13: 1278910.517 ops/s
Iteration  14: 1286794.450 ops/s
Iteration  15: 1276669.502 ops/s
Iteration  16: 1334519.571 ops/s
Iteration  17: 1327488.882 ops/s
Iteration  18: 1361621.052 ops/s
Iteration  19: 1358334.008 ops/s
Iteration  20: 1329852.223 ops/s
Iteration  21: 1358812.473 ops/s
Iteration  22: 1334259.937 ops/s
Iteration  23: 1316245.054 ops/s
Iteration  24: 1284165.675 ops/s
Iteration  25: 1282036.335 ops/s
Iteration  26: 1321054.149 ops/s
Iteration  27: 1328088.004 ops/s
Iteration  28: 1308048.420 ops/s
Iteration  29: 1321037.948 ops/s
Iteration  30: 1267403.122 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_removeFromKeySet":
  1312925.211 ±(99.9%) 18010.709 ops/s [Average]
  (min, avg, max) = (1267403.122, 1312925.211, 1361621.052), stdev = 26957.583
  CI (99.9%): [1294914.502, 1330935.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_removeFromKeySet  thrpt   30  1312925.211 ± 18010.709  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_removeNullFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_removeNullFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 282047.608 ops/s
# Warmup Iteration   2: 558317.673 ops/s
# Warmup Iteration   3: 602999.886 ops/s
# Warmup Iteration   4: 630146.672 ops/s
# Warmup Iteration   5: 520507.097 ops/s
# Warmup Iteration   6: 616131.624 ops/s
# Warmup Iteration   7: 605043.049 ops/s
# Warmup Iteration   8: 600491.334 ops/s
# Warmup Iteration   9: 618931.249 ops/s
# Warmup Iteration  10: 619363.188 ops/s
# Warmup Iteration  11: 613023.154 ops/s
# Warmup Iteration  12: 602208.820 ops/s
# Warmup Iteration  13: 611223.557 ops/s
# Warmup Iteration  14: 626684.935 ops/s
# Warmup Iteration  15: 619056.607 ops/s
# Warmup Iteration  16: 612638.503 ops/s
# Warmup Iteration  17: 615313.702 ops/s
# Warmup Iteration  18: 598610.378 ops/s
# Warmup Iteration  19: 605915.094 ops/s
# Warmup Iteration  20: 607204.987 ops/s
# Warmup Iteration  21: 606063.745 ops/s
# Warmup Iteration  22: 605639.366 ops/s
# Warmup Iteration  23: 615132.796 ops/s
# Warmup Iteration  24: 607095.537 ops/s
# Warmup Iteration  25: 612839.924 ops/s
# Warmup Iteration  26: 603504.810 ops/s
# Warmup Iteration  27: 621980.701 ops/s
# Warmup Iteration  28: 624787.131 ops/s
# Warmup Iteration  29: 616946.947 ops/s
# Warmup Iteration  30: 638410.802 ops/s
Iteration   1: 598735.999 ops/s
Iteration   2: 632486.310 ops/s
Iteration   3: 639295.180 ops/s
Iteration   4: 606418.876 ops/s
Iteration   5: 618064.556 ops/s
Iteration   6: 608391.052 ops/s
Iteration   7: 616871.741 ops/s
Iteration   8: 624106.368 ops/s
Iteration   9: 608222.231 ops/s
Iteration  10: 610426.009 ops/s
Iteration  11: 615708.974 ops/s
Iteration  12: 619042.765 ops/s
Iteration  13: 638003.272 ops/s
Iteration  14: 608507.903 ops/s
Iteration  15: 607191.719 ops/s
Iteration  16: 603889.918 ops/s
Iteration  17: 613642.776 ops/s
Iteration  18: 631938.080 ops/s
Iteration  19: 642864.348 ops/s
Iteration  20: 645380.461 ops/s
Iteration  21: 634780.873 ops/s
Iteration  22: 631026.461 ops/s
Iteration  23: 644063.912 ops/s
Iteration  24: 629487.199 ops/s
Iteration  25: 621684.550 ops/s
Iteration  26: 609487.768 ops/s
Iteration  27: 600880.187 ops/s
Iteration  28: 618174.566 ops/s
Iteration  29: 614927.251 ops/s
Iteration  30: 626401.960 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_removeNullFromKeySet":
  620670.109 ±(99.9%) 9077.965 ops/s [Average]
  (min, avg, max) = (598735.999, 620670.109, 645380.461), stdev = 13587.472
  CI (99.9%): [611592.144, 629748.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_removeNullFromKeySet  thrpt   30  620670.109 ± 9077.965  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_retainAllFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_retainAllFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 410817.624 ops/s
# Warmup Iteration   2: 889121.356 ops/s
# Warmup Iteration   3: 881687.453 ops/s
# Warmup Iteration   4: 892085.153 ops/s
# Warmup Iteration   5: 729836.357 ops/s
# Warmup Iteration   6: 896593.087 ops/s
# Warmup Iteration   7: 882724.659 ops/s
# Warmup Iteration   8: 884803.726 ops/s
# Warmup Iteration   9: 914016.819 ops/s
# Warmup Iteration  10: 912438.813 ops/s
# Warmup Iteration  11: 906726.647 ops/s
# Warmup Iteration  12: 923062.979 ops/s
# Warmup Iteration  13: 908966.337 ops/s
# Warmup Iteration  14: 901700.507 ops/s
# Warmup Iteration  15: 912664.394 ops/s
# Warmup Iteration  16: 897981.576 ops/s
# Warmup Iteration  17: 931225.114 ops/s
# Warmup Iteration  18: 896061.841 ops/s
# Warmup Iteration  19: 931356.147 ops/s
# Warmup Iteration  20: 889713.785 ops/s
# Warmup Iteration  21: 898957.501 ops/s
# Warmup Iteration  22: 889023.111 ops/s
# Warmup Iteration  23: 884035.506 ops/s
# Warmup Iteration  24: 901000.239 ops/s
# Warmup Iteration  25: 903430.796 ops/s
# Warmup Iteration  26: 896078.740 ops/s
# Warmup Iteration  27: 896487.052 ops/s
# Warmup Iteration  28: 889544.834 ops/s
# Warmup Iteration  29: 897287.674 ops/s
# Warmup Iteration  30: 895204.978 ops/s
Iteration   1: 891545.148 ops/s
Iteration   2: 907182.847 ops/s
Iteration   3: 891969.775 ops/s
Iteration   4: 879152.054 ops/s
Iteration   5: 895322.088 ops/s
Iteration   6: 884602.294 ops/s
Iteration   7: 892137.054 ops/s
Iteration   8: 901442.717 ops/s
Iteration   9: 891279.162 ops/s
Iteration  10: 873875.215 ops/s
Iteration  11: 889451.556 ops/s
Iteration  12: 886981.415 ops/s
Iteration  13: 893172.133 ops/s
Iteration  14: 890213.817 ops/s
Iteration  15: 892593.153 ops/s
Iteration  16: 886840.073 ops/s
Iteration  17: 917050.063 ops/s
Iteration  18: 933894.935 ops/s
Iteration  19: 907871.197 ops/s
Iteration  20: 905773.249 ops/s
Iteration  21: 885537.799 ops/s
Iteration  22: 883584.378 ops/s
Iteration  23: 889176.564 ops/s
Iteration  24: 883662.769 ops/s
Iteration  25: 890978.574 ops/s
Iteration  26: 905084.512 ops/s
Iteration  27: 889415.773 ops/s
Iteration  28: 890739.649 ops/s
Iteration  29: 901272.454 ops/s
Iteration  30: 884742.498 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_retainAllFromKeySet":
  893884.831 ±(99.9%) 8011.526 ops/s [Average]
  (min, avg, max) = (873875.215, 893884.831, 933894.935), stdev = 11991.277
  CI (99.9%): [885873.304, 901896.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_retainAllFromKeySet  thrpt   30  893884.831 ± 8011.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48799.423 ops/s
# Warmup Iteration   2: 67986.998 ops/s
# Warmup Iteration   3: 94913.596 ops/s
# Warmup Iteration   4: 97024.899 ops/s
# Warmup Iteration   5: 95615.338 ops/s
# Warmup Iteration   6: 93976.130 ops/s
# Warmup Iteration   7: 93645.559 ops/s
# Warmup Iteration   8: 88469.779 ops/s
# Warmup Iteration   9: 86249.668 ops/s
# Warmup Iteration  10: 94953.830 ops/s
# Warmup Iteration  11: 93582.224 ops/s
# Warmup Iteration  12: 93684.080 ops/s
# Warmup Iteration  13: 96485.500 ops/s
# Warmup Iteration  14: 97330.139 ops/s
# Warmup Iteration  15: 96902.185 ops/s
# Warmup Iteration  16: 96206.191 ops/s
# Warmup Iteration  17: 94793.267 ops/s
# Warmup Iteration  18: 97025.847 ops/s
# Warmup Iteration  19: 99424.470 ops/s
# Warmup Iteration  20: 98609.119 ops/s
# Warmup Iteration  21: 96904.412 ops/s
# Warmup Iteration  22: 95007.588 ops/s
# Warmup Iteration  23: 98756.722 ops/s
# Warmup Iteration  24: 96783.911 ops/s
# Warmup Iteration  25: 96168.565 ops/s
# Warmup Iteration  26: 95769.518 ops/s
# Warmup Iteration  27: 97562.884 ops/s
# Warmup Iteration  28: 97499.076 ops/s
# Warmup Iteration  29: 97370.083 ops/s
# Warmup Iteration  30: 97345.745 ops/s
Iteration   1: 98669.454 ops/s
Iteration   2: 96469.648 ops/s
Iteration   3: 98646.201 ops/s
Iteration   4: 98024.131 ops/s
Iteration   5: 97501.614 ops/s
Iteration   6: 94309.320 ops/s
Iteration   7: 93225.945 ops/s
Iteration   8: 94808.637 ops/s
Iteration   9: 94943.984 ops/s
Iteration  10: 94660.433 ops/s
Iteration  11: 95024.343 ops/s
Iteration  12: 96058.167 ops/s
Iteration  13: 94196.972 ops/s
Iteration  14: 98019.767 ops/s
Iteration  15: 95665.112 ops/s
Iteration  16: 94757.205 ops/s
Iteration  17: 97316.110 ops/s
Iteration  18: 101391.573 ops/s
Iteration  19: 99113.735 ops/s
Iteration  20: 94338.272 ops/s
Iteration  21: 94927.065 ops/s
Iteration  22: 95559.210 ops/s
Iteration  23: 95195.809 ops/s
Iteration  24: 95820.906 ops/s
Iteration  25: 94958.211 ops/s
Iteration  26: 95254.269 ops/s
Iteration  27: 98275.017 ops/s
Iteration  28: 94153.250 ops/s
Iteration  29: 95997.534 ops/s
Iteration  30: 95470.454 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_serialization":
  96091.745 ±(99.9%) 1247.235 ops/s [Average]
  (min, avg, max) = (93225.945, 96091.745, 101391.573), stdev = 1866.803
  CI (99.9%): [94844.510, 97338.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt      Score      Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_serialization  thrpt   30  96091.745 ± 1247.235  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 877227.283 ops/s
# Warmup Iteration   2: 2046487.555 ops/s
# Warmup Iteration   3: 1684341.765 ops/s
# Warmup Iteration   4: 2149376.311 ops/s
# Warmup Iteration   5: 2094033.300 ops/s
# Warmup Iteration   6: 2062893.825 ops/s
# Warmup Iteration   7: 2077362.294 ops/s
# Warmup Iteration   8: 2088716.427 ops/s
# Warmup Iteration   9: 2122577.694 ops/s
# Warmup Iteration  10: 2057037.407 ops/s
# Warmup Iteration  11: 2033749.394 ops/s
# Warmup Iteration  12: 2101516.323 ops/s
# Warmup Iteration  13: 2066898.261 ops/s
# Warmup Iteration  14: 2084125.357 ops/s
# Warmup Iteration  15: 2051243.575 ops/s
# Warmup Iteration  16: 2083468.954 ops/s
# Warmup Iteration  17: 2069913.398 ops/s
# Warmup Iteration  18: 2080354.509 ops/s
# Warmup Iteration  19: 2108784.260 ops/s
# Warmup Iteration  20: 2069191.169 ops/s
# Warmup Iteration  21: 2079544.938 ops/s
# Warmup Iteration  22: 2101303.314 ops/s
# Warmup Iteration  23: 2073529.093 ops/s
# Warmup Iteration  24: 2128289.376 ops/s
# Warmup Iteration  25: 2121718.709 ops/s
# Warmup Iteration  26: 2080993.829 ops/s
# Warmup Iteration  27: 2093169.079 ops/s
# Warmup Iteration  28: 2101095.215 ops/s
# Warmup Iteration  29: 2111172.105 ops/s
# Warmup Iteration  30: 2103655.016 ops/s
Iteration   1: 2094773.868 ops/s
Iteration   2: 2152575.088 ops/s
Iteration   3: 2080605.436 ops/s
Iteration   4: 2082989.789 ops/s
Iteration   5: 2047007.248 ops/s
Iteration   6: 2123189.374 ops/s
Iteration   7: 2083386.789 ops/s
Iteration   8: 2026906.558 ops/s
Iteration   9: 2126592.744 ops/s
Iteration  10: 2136741.427 ops/s
Iteration  11: 2096334.462 ops/s
Iteration  12: 2125765.682 ops/s
Iteration  13: 2143119.234 ops/s
Iteration  14: 2253990.340 ops/s
Iteration  15: 2261850.816 ops/s
Iteration  16: 2132065.537 ops/s
Iteration  17: 2249821.347 ops/s
Iteration  18: 2214806.047 ops/s
Iteration  19: 2171285.363 ops/s
Iteration  20: 2124350.899 ops/s
Iteration  21: 2122078.671 ops/s
Iteration  22: 2143978.494 ops/s
Iteration  23: 2111954.381 ops/s
Iteration  24: 2056715.857 ops/s
Iteration  25: 2140576.951 ops/s
Iteration  26: 2136456.338 ops/s
Iteration  27: 2151548.215 ops/s
Iteration  28: 2110934.906 ops/s
Iteration  29: 2155241.422 ops/s
Iteration  30: 2141714.228 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapKeySetTest._Benchmark.benchmark_size":
  2133311.917 ±(99.9%) 37414.553 ops/s [Average]
  (min, avg, max) = (2026906.558, 2133311.917, 2261850.816), stdev = 56000.346
  CI (99.9%): [2095897.364, 2170726.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapKeySetTest._Benchmark.benchmark_size  thrpt   30  2133311.917 ± 37414.553  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 976060.435 ops/s
# Warmup Iteration   2: 2715662.433 ops/s
# Warmup Iteration   3: 2369703.151 ops/s
# Warmup Iteration   4: 2496351.695 ops/s
# Warmup Iteration   5: 2696509.432 ops/s
# Warmup Iteration   6: 2675753.710 ops/s
# Warmup Iteration   7: 2722351.893 ops/s
# Warmup Iteration   8: 2750449.074 ops/s
# Warmup Iteration   9: 2691174.696 ops/s
# Warmup Iteration  10: 2692464.713 ops/s
# Warmup Iteration  11: 2646558.289 ops/s
# Warmup Iteration  12: 2631070.689 ops/s
# Warmup Iteration  13: 2696106.341 ops/s
# Warmup Iteration  14: 2680901.415 ops/s
# Warmup Iteration  15: 2669102.050 ops/s
# Warmup Iteration  16: 2627364.407 ops/s
# Warmup Iteration  17: 2699758.816 ops/s
# Warmup Iteration  18: 2660127.573 ops/s
# Warmup Iteration  19: 2723326.737 ops/s
# Warmup Iteration  20: 2723508.527 ops/s
# Warmup Iteration  21: 2679775.740 ops/s
# Warmup Iteration  22: 2692628.888 ops/s
# Warmup Iteration  23: 2712386.598 ops/s
# Warmup Iteration  24: 2702178.965 ops/s
# Warmup Iteration  25: 2688033.474 ops/s
# Warmup Iteration  26: 2647034.136 ops/s
# Warmup Iteration  27: 2630495.228 ops/s
# Warmup Iteration  28: 2689509.405 ops/s
# Warmup Iteration  29: 2734307.264 ops/s
# Warmup Iteration  30: 2715653.811 ops/s
Iteration   1: 2715317.210 ops/s
Iteration   2: 2614372.745 ops/s
Iteration   3: 2611039.511 ops/s
Iteration   4: 2701715.683 ops/s
Iteration   5: 2602839.077 ops/s
Iteration   6: 2725933.297 ops/s
Iteration   7: 2741893.242 ops/s
Iteration   8: 2732730.020 ops/s
Iteration   9: 2716628.854 ops/s
Iteration  10: 2873690.417 ops/s
Iteration  11: 2867580.844 ops/s
Iteration  12: 2866053.965 ops/s
Iteration  13: 2874311.587 ops/s
Iteration  14: 2864791.002 ops/s
Iteration  15: 2792736.255 ops/s
Iteration  16: 2687266.602 ops/s
Iteration  17: 2874532.699 ops/s
Iteration  18: 2870045.193 ops/s
Iteration  19: 2703512.246 ops/s
Iteration  20: 2621914.442 ops/s
Iteration  21: 2605961.840 ops/s
Iteration  22: 2651226.969 ops/s
Iteration  23: 2625833.255 ops/s
Iteration  24: 2628794.915 ops/s
Iteration  25: 2620506.727 ops/s
Iteration  26: 2565596.868 ops/s
Iteration  27: 2646285.819 ops/s
Iteration  28: 2648527.370 ops/s
Iteration  29: 2609181.603 ops/s
Iteration  30: 2631595.163 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_add":
  2709747.181 ±(99.9%) 68864.942 ops/s [Average]
  (min, avg, max) = (2565596.868, 2709747.181, 2874532.699), stdev = 103073.812
  CI (99.9%): [2640882.238, 2778612.123] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_add  thrpt   30  2709747.181 ± 68864.942  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1278792.621 ops/s
# Warmup Iteration   2: 3114148.737 ops/s
# Warmup Iteration   3: 3224065.185 ops/s
# Warmup Iteration   4: 2672230.470 ops/s
# Warmup Iteration   5: 3117678.093 ops/s
# Warmup Iteration   6: 3268138.718 ops/s
# Warmup Iteration   7: 3222038.751 ops/s
# Warmup Iteration   8: 3165277.508 ops/s
# Warmup Iteration   9: 3072093.743 ops/s
# Warmup Iteration  10: 3038542.647 ops/s
# Warmup Iteration  11: 3054660.154 ops/s
# Warmup Iteration  12: 3131467.849 ops/s
# Warmup Iteration  13: 3029767.940 ops/s
# Warmup Iteration  14: 3061085.725 ops/s
# Warmup Iteration  15: 3069269.953 ops/s
# Warmup Iteration  16: 3157383.986 ops/s
# Warmup Iteration  17: 3049209.199 ops/s
# Warmup Iteration  18: 3124346.137 ops/s
# Warmup Iteration  19: 3263776.308 ops/s
# Warmup Iteration  20: 3081660.074 ops/s
# Warmup Iteration  21: 3099737.134 ops/s
# Warmup Iteration  22: 3059998.518 ops/s
# Warmup Iteration  23: 3112370.067 ops/s
# Warmup Iteration  24: 3012070.220 ops/s
# Warmup Iteration  25: 3038721.962 ops/s
# Warmup Iteration  26: 3098175.297 ops/s
# Warmup Iteration  27: 3030902.618 ops/s
# Warmup Iteration  28: 3039942.323 ops/s
# Warmup Iteration  29: 3059716.613 ops/s
# Warmup Iteration  30: 3028082.722 ops/s
Iteration   1: 2989266.627 ops/s
Iteration   2: 3013020.610 ops/s
Iteration   3: 3024869.106 ops/s
Iteration   4: 3048255.573 ops/s
Iteration   5: 3075488.834 ops/s
Iteration   6: 3058081.036 ops/s
Iteration   7: 3042486.559 ops/s
Iteration   8: 3009585.519 ops/s
Iteration   9: 3127307.058 ops/s
Iteration  10: 3081431.119 ops/s
Iteration  11: 3017961.687 ops/s
Iteration  12: 2952133.829 ops/s
Iteration  13: 3003610.265 ops/s
Iteration  14: 3073848.075 ops/s
Iteration  15: 3085337.420 ops/s
Iteration  16: 3086105.806 ops/s
Iteration  17: 3003863.563 ops/s
Iteration  18: 3077785.978 ops/s
Iteration  19: 3035441.479 ops/s
Iteration  20: 3057774.647 ops/s
Iteration  21: 3011250.517 ops/s
Iteration  22: 2995595.343 ops/s
Iteration  23: 3030367.146 ops/s
Iteration  24: 3020794.582 ops/s
Iteration  25: 3073789.885 ops/s
Iteration  26: 3040227.640 ops/s
Iteration  27: 3075483.642 ops/s
Iteration  28: 3040947.887 ops/s
Iteration  29: 3162618.836 ops/s
Iteration  30: 3019806.875 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_aggregateByMutating":
  3044484.571 ±(99.9%) 28799.407 ops/s [Average]
  (min, avg, max) = (2952133.829, 3044484.571, 3162618.836), stdev = 43105.600
  CI (99.9%): [3015685.164, 3073283.979] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  3044484.571 ± 28799.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1601778.182 ops/s
# Warmup Iteration   2: 3533613.764 ops/s
# Warmup Iteration   3: 3152279.075 ops/s
# Warmup Iteration   4: 3436880.641 ops/s
# Warmup Iteration   5: 3584617.979 ops/s
# Warmup Iteration   6: 3590444.776 ops/s
# Warmup Iteration   7: 3564579.186 ops/s
# Warmup Iteration   8: 3598009.410 ops/s
# Warmup Iteration   9: 3608013.692 ops/s
# Warmup Iteration  10: 3601277.714 ops/s
# Warmup Iteration  11: 3609109.216 ops/s
# Warmup Iteration  12: 3697933.563 ops/s
# Warmup Iteration  13: 3601126.258 ops/s
# Warmup Iteration  14: 3693816.896 ops/s
# Warmup Iteration  15: 3595547.014 ops/s
# Warmup Iteration  16: 3589093.841 ops/s
# Warmup Iteration  17: 3512113.798 ops/s
# Warmup Iteration  18: 3725346.084 ops/s
# Warmup Iteration  19: 3605182.597 ops/s
# Warmup Iteration  20: 3573540.947 ops/s
# Warmup Iteration  21: 3707183.849 ops/s
# Warmup Iteration  22: 3586537.778 ops/s
# Warmup Iteration  23: 3573636.586 ops/s
# Warmup Iteration  24: 3540871.117 ops/s
# Warmup Iteration  25: 3573684.889 ops/s
# Warmup Iteration  26: 3593476.449 ops/s
# Warmup Iteration  27: 3669364.306 ops/s
# Warmup Iteration  28: 3648364.453 ops/s
# Warmup Iteration  29: 3735597.489 ops/s
# Warmup Iteration  30: 3614740.753 ops/s
Iteration   1: 3672662.971 ops/s
Iteration   2: 3591170.284 ops/s
Iteration   3: 3603388.036 ops/s
Iteration   4: 3713427.290 ops/s
Iteration   5: 3687853.718 ops/s
Iteration   6: 3671521.563 ops/s
Iteration   7: 3670404.358 ops/s
Iteration   8: 3667836.485 ops/s
Iteration   9: 3784380.210 ops/s
Iteration  10: 3647738.233 ops/s
Iteration  11: 3727913.381 ops/s
Iteration  12: 3741905.339 ops/s
Iteration  13: 3787273.408 ops/s
Iteration  14: 3711279.207 ops/s
Iteration  15: 3611026.147 ops/s
Iteration  16: 3596715.927 ops/s
Iteration  17: 3607220.967 ops/s
Iteration  18: 3568985.505 ops/s
Iteration  19: 3558629.698 ops/s
Iteration  20: 3490833.856 ops/s
Iteration  21: 3530216.762 ops/s
Iteration  22: 3766346.195 ops/s
Iteration  23: 3552558.171 ops/s
Iteration  24: 3595518.629 ops/s
Iteration  25: 3524700.365 ops/s
Iteration  26: 3553307.890 ops/s
Iteration  27: 3587683.287 ops/s
Iteration  28: 3573615.514 ops/s
Iteration  29: 3636709.647 ops/s
Iteration  30: 3533106.944 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_aggregateByNonMutating":
  3632197.666 ±(99.9%) 54625.717 ops/s [Average]
  (min, avg, max) = (3490833.856, 3632197.666, 3787273.408), stdev = 81761.208
  CI (99.9%): [3577571.949, 3686823.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  3632197.666 ± 54625.717  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1680209.444 ops/s
# Warmup Iteration   2: 4227221.037 ops/s
# Warmup Iteration   3: 4218464.618 ops/s
# Warmup Iteration   4: 3385268.642 ops/s
# Warmup Iteration   5: 4074805.323 ops/s
# Warmup Iteration   6: 4091880.622 ops/s
# Warmup Iteration   7: 4298320.316 ops/s
# Warmup Iteration   8: 4141221.380 ops/s
# Warmup Iteration   9: 4109628.650 ops/s
# Warmup Iteration  10: 4140749.969 ops/s
# Warmup Iteration  11: 4134656.790 ops/s
# Warmup Iteration  12: 4332968.520 ops/s
# Warmup Iteration  13: 4362303.220 ops/s
# Warmup Iteration  14: 4108060.459 ops/s
# Warmup Iteration  15: 4094356.762 ops/s
# Warmup Iteration  16: 4132763.299 ops/s
# Warmup Iteration  17: 4087523.419 ops/s
# Warmup Iteration  18: 3996006.167 ops/s
# Warmup Iteration  19: 4016076.617 ops/s
# Warmup Iteration  20: 4038089.737 ops/s
# Warmup Iteration  21: 4099124.399 ops/s
# Warmup Iteration  22: 4158793.636 ops/s
# Warmup Iteration  23: 4133225.572 ops/s
# Warmup Iteration  24: 4098436.517 ops/s
# Warmup Iteration  25: 4011431.767 ops/s
# Warmup Iteration  26: 4231585.291 ops/s
# Warmup Iteration  27: 4236519.641 ops/s
# Warmup Iteration  28: 4214178.876 ops/s
# Warmup Iteration  29: 4145826.937 ops/s
# Warmup Iteration  30: 4072479.410 ops/s
Iteration   1: 4038115.194 ops/s
Iteration   2: 4217720.333 ops/s
Iteration   3: 4006412.855 ops/s
Iteration   4: 4147817.664 ops/s
Iteration   5: 4051060.739 ops/s
Iteration   6: 4086451.129 ops/s
Iteration   7: 4193657.153 ops/s
Iteration   8: 4118190.999 ops/s
Iteration   9: 4225300.718 ops/s
Iteration  10: 4033438.303 ops/s
Iteration  11: 4124643.695 ops/s
Iteration  12: 4099378.057 ops/s
Iteration  13: 4037546.361 ops/s
Iteration  14: 4090267.668 ops/s
Iteration  15: 4111662.689 ops/s
Iteration  16: 3996778.178 ops/s
Iteration  17: 4054787.026 ops/s
Iteration  18: 4064717.178 ops/s
Iteration  19: 4071150.886 ops/s
Iteration  20: 4025930.959 ops/s
Iteration  21: 4007316.209 ops/s
Iteration  22: 4048516.341 ops/s
Iteration  23: 4007802.554 ops/s
Iteration  24: 4089131.533 ops/s
Iteration  25: 4099715.922 ops/s
Iteration  26: 4068963.267 ops/s
Iteration  27: 4126672.192 ops/s
Iteration  28: 4083783.784 ops/s
Iteration  29: 4059578.387 ops/s
Iteration  30: 4102649.047 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_allSatisfy":
  4082971.901 ±(99.9%) 39288.876 ops/s [Average]
  (min, avg, max) = (3996778.178, 4082971.901, 4225300.718), stdev = 58805.745
  CI (99.9%): [4043683.025, 4122260.777] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_allSatisfy  thrpt   30  4082971.901 ± 39288.876  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2241668.531 ops/s
# Warmup Iteration   2: 5409211.478 ops/s
# Warmup Iteration   3: 5292084.642 ops/s
# Warmup Iteration   4: 4465023.858 ops/s
# Warmup Iteration   5: 5448773.911 ops/s
# Warmup Iteration   6: 5524234.945 ops/s
# Warmup Iteration   7: 5423716.236 ops/s
# Warmup Iteration   8: 5477023.682 ops/s
# Warmup Iteration   9: 5352072.388 ops/s
# Warmup Iteration  10: 5427891.538 ops/s
# Warmup Iteration  11: 5411748.491 ops/s
# Warmup Iteration  12: 5449092.173 ops/s
# Warmup Iteration  13: 5454597.296 ops/s
# Warmup Iteration  14: 5458993.539 ops/s
# Warmup Iteration  15: 5556309.145 ops/s
# Warmup Iteration  16: 5493115.913 ops/s
# Warmup Iteration  17: 5422690.309 ops/s
# Warmup Iteration  18: 5477933.675 ops/s
# Warmup Iteration  19: 5407862.060 ops/s
# Warmup Iteration  20: 5442510.182 ops/s
# Warmup Iteration  21: 5402820.225 ops/s
# Warmup Iteration  22: 5420915.292 ops/s
# Warmup Iteration  23: 5458122.403 ops/s
# Warmup Iteration  24: 5545626.771 ops/s
# Warmup Iteration  25: 5406102.981 ops/s
# Warmup Iteration  26: 5321985.720 ops/s
# Warmup Iteration  27: 5469034.439 ops/s
# Warmup Iteration  28: 5653195.201 ops/s
# Warmup Iteration  29: 5452481.955 ops/s
# Warmup Iteration  30: 5650244.870 ops/s
Iteration   1: 5445323.348 ops/s
Iteration   2: 5604775.134 ops/s
Iteration   3: 5393161.364 ops/s
Iteration   4: 5399125.939 ops/s
Iteration   5: 5355827.652 ops/s
Iteration   6: 5391622.074 ops/s
Iteration   7: 5427551.827 ops/s
Iteration   8: 5403031.012 ops/s
Iteration   9: 5432515.799 ops/s
Iteration  10: 5351808.562 ops/s
Iteration  11: 5543657.199 ops/s
Iteration  12: 5512570.192 ops/s
Iteration  13: 5372117.045 ops/s
Iteration  14: 5631209.209 ops/s
Iteration  15: 5377493.369 ops/s
Iteration  16: 5437940.904 ops/s
Iteration  17: 5419284.423 ops/s
Iteration  18: 5465979.015 ops/s
Iteration  19: 5628639.873 ops/s
Iteration  20: 5370486.252 ops/s
Iteration  21: 5418796.237 ops/s
Iteration  22: 5436576.228 ops/s
Iteration  23: 5584557.308 ops/s
Iteration  24: 5431194.853 ops/s
Iteration  25: 5549118.538 ops/s
Iteration  26: 5590391.301 ops/s
Iteration  27: 5487293.693 ops/s
Iteration  28: 5425684.346 ops/s
Iteration  29: 5421948.407 ops/s
Iteration  30: 5333302.172 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_allSatisfyWith":
  5454766.109 ±(99.9%) 57661.507 ops/s [Average]
  (min, avg, max) = (5333302.172, 5454766.109, 5631209.209), stdev = 86305.036
  CI (99.9%): [5397104.602, 5512427.616] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  5454766.109 ± 57661.507  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1673712.315 ops/s
# Warmup Iteration   2: 3988224.560 ops/s
# Warmup Iteration   3: 3971399.133 ops/s
# Warmup Iteration   4: 3141059.597 ops/s
# Warmup Iteration   5: 4006532.595 ops/s
# Warmup Iteration   6: 3842383.258 ops/s
# Warmup Iteration   7: 3858106.949 ops/s
# Warmup Iteration   8: 3844317.239 ops/s
# Warmup Iteration   9: 3796438.308 ops/s
# Warmup Iteration  10: 3846885.007 ops/s
# Warmup Iteration  11: 3832308.658 ops/s
# Warmup Iteration  12: 3869687.489 ops/s
# Warmup Iteration  13: 3909060.352 ops/s
# Warmup Iteration  14: 3854064.055 ops/s
# Warmup Iteration  15: 3800134.544 ops/s
# Warmup Iteration  16: 3936034.378 ops/s
# Warmup Iteration  17: 3885664.316 ops/s
# Warmup Iteration  18: 3822604.644 ops/s
# Warmup Iteration  19: 3851894.396 ops/s
# Warmup Iteration  20: 3835238.440 ops/s
# Warmup Iteration  21: 3854211.880 ops/s
# Warmup Iteration  22: 3835214.730 ops/s
# Warmup Iteration  23: 3835449.042 ops/s
# Warmup Iteration  24: 3813046.628 ops/s
# Warmup Iteration  25: 3873971.281 ops/s
# Warmup Iteration  26: 3829554.740 ops/s
# Warmup Iteration  27: 3879057.631 ops/s
# Warmup Iteration  28: 3871236.183 ops/s
# Warmup Iteration  29: 3837990.816 ops/s
# Warmup Iteration  30: 3846059.001 ops/s
Iteration   1: 3727449.737 ops/s
Iteration   2: 3945860.518 ops/s
Iteration   3: 3891525.607 ops/s
Iteration   4: 3782518.636 ops/s
Iteration   5: 3847751.406 ops/s
Iteration   6: 3792127.023 ops/s
Iteration   7: 3841775.772 ops/s
Iteration   8: 3964847.539 ops/s
Iteration   9: 3898505.889 ops/s
Iteration  10: 3875166.450 ops/s
Iteration  11: 3892409.526 ops/s
Iteration  12: 3858937.535 ops/s
Iteration  13: 3843038.840 ops/s
Iteration  14: 3793800.976 ops/s
Iteration  15: 3989221.382 ops/s
Iteration  16: 3838767.375 ops/s
Iteration  17: 3915451.123 ops/s
Iteration  18: 4040252.521 ops/s
Iteration  19: 3888480.913 ops/s
Iteration  20: 3982200.751 ops/s
Iteration  21: 3988491.793 ops/s
Iteration  22: 3991844.503 ops/s
Iteration  23: 3998190.799 ops/s
Iteration  24: 4018126.359 ops/s
Iteration  25: 3832605.734 ops/s
Iteration  26: 3843661.763 ops/s
Iteration  27: 3888666.469 ops/s
Iteration  28: 3903402.629 ops/s
Iteration  29: 3793781.464 ops/s
Iteration  30: 3798261.758 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_anySatisfy":
  3888904.093 ±(99.9%) 53902.650 ops/s [Average]
  (min, avg, max) = (3727449.737, 3888904.093, 4040252.521), stdev = 80678.956
  CI (99.9%): [3835001.443, 3942806.744] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_anySatisfy  thrpt   30  3888904.093 ± 53902.650  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1942328.310 ops/s
# Warmup Iteration   2: 4828764.252 ops/s
# Warmup Iteration   3: 4827139.347 ops/s
# Warmup Iteration   4: 3995865.405 ops/s
# Warmup Iteration   5: 4903204.305 ops/s
# Warmup Iteration   6: 5020924.162 ops/s
# Warmup Iteration   7: 4840668.179 ops/s
# Warmup Iteration   8: 4806806.128 ops/s
# Warmup Iteration   9: 4920630.877 ops/s
# Warmup Iteration  10: 4960148.218 ops/s
# Warmup Iteration  11: 4946306.672 ops/s
# Warmup Iteration  12: 4977820.937 ops/s
# Warmup Iteration  13: 4865659.665 ops/s
# Warmup Iteration  14: 4886550.911 ops/s
# Warmup Iteration  15: 4811765.942 ops/s
# Warmup Iteration  16: 4816767.770 ops/s
# Warmup Iteration  17: 4879481.386 ops/s
# Warmup Iteration  18: 4940543.381 ops/s
# Warmup Iteration  19: 4721919.306 ops/s
# Warmup Iteration  20: 4722941.234 ops/s
# Warmup Iteration  21: 4810307.429 ops/s
# Warmup Iteration  22: 4934746.790 ops/s
# Warmup Iteration  23: 4755483.602 ops/s
# Warmup Iteration  24: 4898451.914 ops/s
# Warmup Iteration  25: 4784585.190 ops/s
# Warmup Iteration  26: 4804960.803 ops/s
# Warmup Iteration  27: 4922250.731 ops/s
# Warmup Iteration  28: 4785017.727 ops/s
# Warmup Iteration  29: 4716542.394 ops/s
# Warmup Iteration  30: 4899363.560 ops/s
Iteration   1: 4904388.003 ops/s
Iteration   2: 4848870.820 ops/s
Iteration   3: 5297782.265 ops/s
Iteration   4: 5241637.916 ops/s
Iteration   5: 4892243.324 ops/s
Iteration   6: 4781849.738 ops/s
Iteration   7: 4683584.889 ops/s
Iteration   8: 4746148.775 ops/s
Iteration   9: 4897856.533 ops/s
Iteration  10: 4372481.895 ops/s
Iteration  11: 4469579.043 ops/s
Iteration  12: 4819224.783 ops/s
Iteration  13: 4931270.095 ops/s
Iteration  14: 4802036.731 ops/s
Iteration  15: 4842457.243 ops/s
Iteration  16: 4958554.123 ops/s
Iteration  17: 4787241.505 ops/s
Iteration  18: 4765684.058 ops/s
Iteration  19: 4903620.904 ops/s
Iteration  20: 4814261.121 ops/s
Iteration  21: 4954861.540 ops/s
Iteration  22: 4972437.152 ops/s
Iteration  23: 4999676.540 ops/s
Iteration  24: 4931886.224 ops/s
Iteration  25: 4993552.130 ops/s
Iteration  26: 4823458.626 ops/s
Iteration  27: 4697683.964 ops/s
Iteration  28: 4833253.461 ops/s
Iteration  29: 4790335.995 ops/s
Iteration  30: 4732058.945 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_anySatisfyWith":
  4849665.945 ±(99.9%) 119711.142 ops/s [Average]
  (min, avg, max) = (4372481.895, 4849665.945, 5297782.265), stdev = 179178.016
  CI (99.9%): [4729954.802, 4969377.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
HashBiMapTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  4849665.945 ± 119711.142  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1008917.032 ops/s
# Warmup Iteration   2: 2261555.162 ops/s
# Warmup Iteration   3: 2321751.024 ops/s
# Warmup Iteration   4: 2021428.891 ops/s
# Warmup Iteration   5: 2199450.425 ops/s
# Warmup Iteration   6: 2317318.918 ops/s
# Warmup Iteration   7: 2288230.016 ops/s
# Warmup Iteration   8: 2344967.351 ops/s
# Warmup Iteration   9: 2300886.562 ops/s
# Warmup Iteration  10: 2319028.687 ops/s
# Warmup Iteration  11: 2324666.013 ops/s
# Warmup Iteration  12: 2354623.705 ops/s
# Warmup Iteration  13: 2306723.743 ops/s
# Warmup Iteration  14: 2280738.866 ops/s
# Warmup Iteration  15: 2307982.285 ops/s
# Warmup Iteration  16: 2308063.190 ops/s
# Warmup Iteration  17: 2295374.828 ops/s
# Warmup Iteration  18: 2314921.318 ops/s
# Warmup Iteration  19: 2319364.831 ops/s
# Warmup Iteration  20: 2323287.046 ops/s
# Warmup Iteration  21: 2342858.865 ops/s
# Warmup Iteration  22: 2288841.781 ops/s
# Warmup Iteration  23: 2329720.519 ops/s
# Warmup Iteration  24: 2291956.424 ops/s
# Warmup Iteration  25: 2289766.076 ops/s
# Warmup Iteration  26: 2362707.470 ops/s
# Warmup Iteration  27: 2342334.353 ops/s
# Warmup Iteration  28: 2336270.308 ops/s
# Warmup Iteration  29: 2298528.105 ops/s
# Warmup Iteration  30: 2336705.650 ops/s
Iteration   1: 2405436.766 ops/s
Iteration   2: 2399988.814 ops/s
Iteration   3: 2398034.120 ops/s
Iteration   4: 2304477.906 ops/s
Iteration   5: 2318712.576 ops/s
Iteration   6: 2359067.054 ops/s
Iteration   7: 2294866.105 ops/s
Iteration   8: 2313933.576 ops/s
Iteration   9: 2312417.606 ops/s
Iteration  10: 2381861.824 ops/s
Iteration  11: 2307077.603 ops/s
Iteration  12: 2477405.116 ops/s
Iteration  13: 2437839.965 ops/s
Iteration  14: 2268171.089 ops/s
Iteration  15: 2447475.506 ops/s
Iteration  16: 2506910.483 ops/s
Iteration  17: 2512681.864 ops/s
Iteration  18: 2379418.982 ops/s
Iteration  19: 2520516.257 ops/s
Iteration  20: 2454399.688 ops/s
Iteration  21: 2311024.132 ops/s
Iteration  22: 2372607.169 ops/s
Iteration  23: 2341309.447 ops/s
Iteration  24: 2313699.554 ops/s
Iteration  25: 2364512.066 ops/s
Iteration  26: 2325611.876 ops/s
Iteration  27: 2320814.701 ops/s
Iteration  28: 2304812.467 ops/s
Iteration  29: 2279403.741 ops/s
Iteration  30: 2490776.128 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_appendString":
  2374175.473 ±(99.9%) 50561.220 ops/s [Average]
  (min, avg, max) = (2268171.089, 2374175.473, 2520516.257), stdev = 75677.660
  CI (99.9%): [2323614.252, 2424736.693] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_appendString  thrpt   30  2374175.473 ± 50561.220  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1273848.033 ops/s
# Warmup Iteration   2: 3169308.717 ops/s
# Warmup Iteration   3: 3264093.533 ops/s
# Warmup Iteration   4: 2669877.838 ops/s
# Warmup Iteration   5: 3160882.697 ops/s
# Warmup Iteration   6: 3196565.245 ops/s
# Warmup Iteration   7: 3253474.910 ops/s
# Warmup Iteration   8: 3299423.966 ops/s
# Warmup Iteration   9: 3182214.036 ops/s
# Warmup Iteration  10: 3297021.420 ops/s
# Warmup Iteration  11: 3431667.801 ops/s
# Warmup Iteration  12: 3188055.159 ops/s
# Warmup Iteration  13: 3414918.948 ops/s
# Warmup Iteration  14: 3155709.166 ops/s
# Warmup Iteration  15: 3114851.724 ops/s
# Warmup Iteration  16: 3219576.887 ops/s
# Warmup Iteration  17: 3179770.558 ops/s
# Warmup Iteration  18: 3298618.593 ops/s
# Warmup Iteration  19: 3282857.153 ops/s
# Warmup Iteration  20: 3139392.237 ops/s
# Warmup Iteration  21: 3215778.610 ops/s
# Warmup Iteration  22: 3181381.265 ops/s
# Warmup Iteration  23: 3305406.028 ops/s
# Warmup Iteration  24: 3197228.387 ops/s
# Warmup Iteration  25: 3187450.874 ops/s
# Warmup Iteration  26: 3201320.734 ops/s
# Warmup Iteration  27: 3304720.158 ops/s
# Warmup Iteration  28: 3244077.455 ops/s
# Warmup Iteration  29: 3170873.521 ops/s
# Warmup Iteration  30: 3235412.635 ops/s
Iteration   1: 3182316.454 ops/s
Iteration   2: 3183145.760 ops/s
Iteration   3: 3155353.179 ops/s
Iteration   4: 3203926.340 ops/s
Iteration   5: 3192011.816 ops/s
Iteration   6: 3177363.362 ops/s
Iteration   7: 3207934.487 ops/s
Iteration   8: 3170223.978 ops/s
Iteration   9: 3179046.198 ops/s
Iteration  10: 3153141.939 ops/s
Iteration  11: 3212419.000 ops/s
Iteration  12: 3184818.881 ops/s
Iteration  13: 3202694.873 ops/s
Iteration  14: 3192737.283 ops/s
Iteration  15: 3263143.600 ops/s
Iteration  16: 3242083.130 ops/s
Iteration  17: 3225809.912 ops/s
Iteration  18: 3253168.836 ops/s
Iteration  19: 3353668.642 ops/s
Iteration  20: 3271895.764 ops/s
Iteration  21: 3344259.771 ops/s
Iteration  22: 3318849.136 ops/s
Iteration  23: 3188873.325 ops/s
Iteration  24: 3287589.226 ops/s
Iteration  25: 3212655.721 ops/s
Iteration  26: 3168455.754 ops/s
Iteration  27: 3157266.074 ops/s
Iteration  28: 3197568.995 ops/s
Iteration  29: 3271920.291 ops/s
Iteration  30: 3207446.023 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_asLazy":
  3218726.258 ±(99.9%) 36313.635 ops/s [Average]
  (min, avg, max) = (3153141.939, 3218726.258, 3353668.642), stdev = 54352.544
  CI (99.9%): [3182412.623, 3255039.894] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_asLazy  thrpt   30  3218726.258 ± 36313.635  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3104663.936 ops/s
# Warmup Iteration   2: 6708210.248 ops/s
# Warmup Iteration   3: 5680241.390 ops/s
# Warmup Iteration   4: 6549764.839 ops/s
# Warmup Iteration   5: 6674899.546 ops/s
# Warmup Iteration   6: 6671165.508 ops/s
# Warmup Iteration   7: 6799531.521 ops/s
# Warmup Iteration   8: 6685720.886 ops/s
# Warmup Iteration   9: 6646162.108 ops/s
# Warmup Iteration  10: 6742586.513 ops/s
# Warmup Iteration  11: 6770851.489 ops/s
# Warmup Iteration  12: 6692582.049 ops/s
# Warmup Iteration  13: 6759547.920 ops/s
# Warmup Iteration  14: 6664459.282 ops/s
# Warmup Iteration  15: 6605925.964 ops/s
# Warmup Iteration  16: 6764558.343 ops/s
# Warmup Iteration  17: 6902421.370 ops/s
# Warmup Iteration  18: 6753071.186 ops/s
# Warmup Iteration  19: 6638139.227 ops/s
# Warmup Iteration  20: 6643911.954 ops/s
# Warmup Iteration  21: 6571094.682 ops/s
# Warmup Iteration  22: 6770720.457 ops/s
# Warmup Iteration  23: 6692984.080 ops/s
# Warmup Iteration  24: 6629615.774 ops/s
# Warmup Iteration  25: 6785498.106 ops/s
# Warmup Iteration  26: 6749492.980 ops/s
# Warmup Iteration  27: 6646564.146 ops/s
# Warmup Iteration  28: 6747351.617 ops/s
# Warmup Iteration  29: 6845439.534 ops/s
# Warmup Iteration  30: 6967062.936 ops/s
Iteration   1: 6795021.894 ops/s
Iteration   2: 6484076.250 ops/s
Iteration   3: 6926147.158 ops/s
Iteration   4: 6723922.673 ops/s
Iteration   5: 6793209.073 ops/s
Iteration   6: 6878425.708 ops/s
Iteration   7: 6700275.755 ops/s
Iteration   8: 6809043.235 ops/s
Iteration   9: 6565046.116 ops/s
Iteration  10: 6869123.685 ops/s
Iteration  11: 6884284.647 ops/s
Iteration  12: 6914850.812 ops/s
Iteration  13: 6555927.613 ops/s
Iteration  14: 6531473.250 ops/s
Iteration  15: 6606623.233 ops/s
Iteration  16: 6555654.509 ops/s
Iteration  17: 6769610.711 ops/s
Iteration  18: 6643916.661 ops/s
Iteration  19: 6826938.019 ops/s
Iteration  20: 6673503.819 ops/s
Iteration  21: 6791023.742 ops/s
Iteration  22: 6629843.332 ops/s
Iteration  23: 6576641.457 ops/s
Iteration  24: 6761601.190 ops/s
Iteration  25: 6663327.054 ops/s
Iteration  26: 6586938.491 ops/s
Iteration  27: 6647686.938 ops/s
Iteration  28: 6603538.007 ops/s
Iteration  29: 6609833.349 ops/s
Iteration  30: 6663240.723 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_asSynchronized":
  6701358.303 ±(99.9%) 83966.941 ops/s [Average]
  (min, avg, max) = (6484076.250, 6701358.303, 6926147.158), stdev = 125677.773
  CI (99.9%): [6617391.363, 6785325.244] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_asSynchronized  thrpt   30  6701358.303 ± 83966.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 474250.257 ops/s
# Warmup Iteration   2: 615004.862 ops/s
# Warmup Iteration   3: 739632.718 ops/s
# Warmup Iteration   4: 739575.049 ops/s
# Warmup Iteration   5: 742260.922 ops/s
# Warmup Iteration   6: 772104.014 ops/s
# Warmup Iteration   7: 737513.582 ops/s
# Warmup Iteration   8: 603183.815 ops/s
# Warmup Iteration   9: 746464.264 ops/s
# Warmup Iteration  10: 803747.480 ops/s
# Warmup Iteration  11: 768482.643 ops/s
# Warmup Iteration  12: 780217.318 ops/s
# Warmup Iteration  13: 761010.351 ops/s
# Warmup Iteration  14: 761480.167 ops/s
# Warmup Iteration  15: 728254.692 ops/s
# Warmup Iteration  16: 747979.757 ops/s
# Warmup Iteration  17: 781089.942 ops/s
# Warmup Iteration  18: 773043.360 ops/s
# Warmup Iteration  19: 800396.723 ops/s
# Warmup Iteration  20: 788413.414 ops/s
# Warmup Iteration  21: 780624.646 ops/s
# Warmup Iteration  22: 779757.184 ops/s
# Warmup Iteration  23: 774509.741 ops/s
# Warmup Iteration  24: 775659.952 ops/s
# Warmup Iteration  25: 815167.826 ops/s
# Warmup Iteration  26: 779335.745 ops/s
# Warmup Iteration  27: 782606.402 ops/s
# Warmup Iteration  28: 820443.022 ops/s
# Warmup Iteration  29: 831111.326 ops/s
# Warmup Iteration  30: 781511.614 ops/s
Iteration   1: 783602.784 ops/s
Iteration   2: 803994.434 ops/s
Iteration   3: 807092.815 ops/s
Iteration   4: 790562.750 ops/s
Iteration   5: 778562.865 ops/s
Iteration   6: 788663.965 ops/s
Iteration   7: 819179.093 ops/s
Iteration   8: 765890.290 ops/s
Iteration   9: 787032.599 ops/s
Iteration  10: 797897.368 ops/s
Iteration  11: 779329.904 ops/s
Iteration  12: 775642.483 ops/s
Iteration  13: 770837.832 ops/s
Iteration  14: 787409.176 ops/s
Iteration  15: 773923.408 ops/s
Iteration  16: 773382.968 ops/s
Iteration  17: 779908.459 ops/s
Iteration  18: 767023.951 ops/s
Iteration  19: 799749.151 ops/s
Iteration  20: 790940.210 ops/s
Iteration  21: 782599.853 ops/s
Iteration  22: 775583.370 ops/s
Iteration  23: 771873.850 ops/s
Iteration  24: 785514.451 ops/s
Iteration  25: 762549.491 ops/s
Iteration  26: 756522.000 ops/s
Iteration  27: 775955.612 ops/s
Iteration  28: 776402.321 ops/s
Iteration  29: 783524.144 ops/s
Iteration  30: 784679.336 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_asUnmodifiable":
  782527.698 ±(99.9%) 9102.355 ops/s [Average]
  (min, avg, max) = (756522.000, 782527.698, 819179.093), stdev = 13623.977
  CI (99.9%): [773425.343, 791630.052] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  782527.698 ± 9102.355  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1151023.553 ops/s
# Warmup Iteration   2: 3215147.370 ops/s
# Warmup Iteration   3: 3020625.753 ops/s
# Warmup Iteration   4: 2880617.445 ops/s
# Warmup Iteration   5: 3254585.431 ops/s
# Warmup Iteration   6: 3162378.322 ops/s
# Warmup Iteration   7: 3146373.475 ops/s
# Warmup Iteration   8: 3115558.233 ops/s
# Warmup Iteration   9: 3176081.997 ops/s
# Warmup Iteration  10: 3328008.964 ops/s
# Warmup Iteration  11: 3259438.148 ops/s
# Warmup Iteration  12: 3177653.239 ops/s
# Warmup Iteration  13: 3145315.330 ops/s
# Warmup Iteration  14: 3181666.391 ops/s
# Warmup Iteration  15: 3229911.494 ops/s
# Warmup Iteration  16: 3253609.131 ops/s
# Warmup Iteration  17: 3284813.402 ops/s
# Warmup Iteration  18: 3225688.758 ops/s
# Warmup Iteration  19: 3243413.184 ops/s
# Warmup Iteration  20: 3322897.925 ops/s
# Warmup Iteration  21: 3160121.502 ops/s
# Warmup Iteration  22: 3200871.051 ops/s
# Warmup Iteration  23: 3208166.968 ops/s
# Warmup Iteration  24: 3207516.112 ops/s
# Warmup Iteration  25: 3197441.862 ops/s
# Warmup Iteration  26: 3406412.404 ops/s
# Warmup Iteration  27: 3251055.281 ops/s
# Warmup Iteration  28: 3200385.853 ops/s
# Warmup Iteration  29: 3256540.366 ops/s
# Warmup Iteration  30: 3267262.462 ops/s
Iteration   1: 3277359.625 ops/s
Iteration   2: 3180852.288 ops/s
Iteration   3: 3187442.328 ops/s
Iteration   4: 3195476.837 ops/s
Iteration   5: 3204993.919 ops/s
Iteration   6: 3282052.250 ops/s
Iteration   7: 3243270.956 ops/s
Iteration   8: 3089111.742 ops/s
Iteration   9: 3190781.293 ops/s
Iteration  10: 3237949.082 ops/s
Iteration  11: 3155306.739 ops/s
Iteration  12: 3132960.997 ops/s
Iteration  13: 3250952.056 ops/s
Iteration  14: 3165615.574 ops/s
Iteration  15: 3200611.393 ops/s
Iteration  16: 3294507.512 ops/s
Iteration  17: 3186593.462 ops/s
Iteration  18: 3202455.078 ops/s
Iteration  19: 3345831.464 ops/s
Iteration  20: 3323979.789 ops/s
Iteration  21: 3231432.804 ops/s
Iteration  22: 3235750.147 ops/s
Iteration  23: 3280545.972 ops/s
Iteration  24: 3319278.020 ops/s
Iteration  25: 3244648.367 ops/s
Iteration  26: 3293658.714 ops/s
Iteration  27: 3188835.984 ops/s
Iteration  28: 3196590.902 ops/s
Iteration  29: 3157092.977 ops/s
Iteration  30: 3240229.962 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_chunk":
  3224538.941 ±(99.9%) 40064.419 ops/s [Average]
  (min, avg, max) = (3089111.742, 3224538.941, 3345831.464), stdev = 59966.540
  CI (99.9%): [3184474.523, 3264603.360] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_chunk  thrpt   30  3224538.941 ± 40064.419  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1189217.906 ops/s
# Warmup Iteration   2: 2671412.673 ops/s
# Warmup Iteration   3: 2217028.835 ops/s
# Warmup Iteration   4: 2680480.862 ops/s
# Warmup Iteration   5: 2803796.446 ops/s
# Warmup Iteration   6: 2762378.897 ops/s
# Warmup Iteration   7: 2691963.771 ops/s
# Warmup Iteration   8: 2692838.539 ops/s
# Warmup Iteration   9: 2696537.293 ops/s
# Warmup Iteration  10: 2670949.039 ops/s
# Warmup Iteration  11: 2687623.548 ops/s
# Warmup Iteration  12: 2700732.448 ops/s
# Warmup Iteration  13: 2689704.647 ops/s
# Warmup Iteration  14: 2663700.676 ops/s
# Warmup Iteration  15: 2702700.098 ops/s
# Warmup Iteration  16: 2728450.621 ops/s
# Warmup Iteration  17: 2687658.860 ops/s
# Warmup Iteration  18: 2736428.280 ops/s
# Warmup Iteration  19: 2738413.770 ops/s
# Warmup Iteration  20: 2833659.915 ops/s
# Warmup Iteration  21: 2767970.498 ops/s
# Warmup Iteration  22: 2708628.289 ops/s
# Warmup Iteration  23: 2660092.751 ops/s
# Warmup Iteration  24: 2737357.972 ops/s
# Warmup Iteration  25: 2701463.716 ops/s
# Warmup Iteration  26: 2699992.391 ops/s
# Warmup Iteration  27: 2702381.635 ops/s
# Warmup Iteration  28: 2669547.377 ops/s
# Warmup Iteration  29: 2710284.340 ops/s
# Warmup Iteration  30: 2707149.291 ops/s
Iteration   1: 2765805.693 ops/s
Iteration   2: 2759478.812 ops/s
Iteration   3: 2790803.142 ops/s
Iteration   4: 2720140.419 ops/s
Iteration   5: 2693062.719 ops/s
Iteration   6: 2687423.432 ops/s
Iteration   7: 2786679.785 ops/s
Iteration   8: 2735183.234 ops/s
Iteration   9: 2690647.092 ops/s
Iteration  10: 2719215.932 ops/s
Iteration  11: 2775757.955 ops/s
Iteration  12: 2718413.022 ops/s
Iteration  13: 2696852.777 ops/s
Iteration  14: 2658160.547 ops/s
Iteration  15: 2725572.281 ops/s
Iteration  16: 2817604.814 ops/s
Iteration  17: 2683090.203 ops/s
Iteration  18: 2725138.053 ops/s
Iteration  19: 2722755.115 ops/s
Iteration  20: 2690637.807 ops/s
Iteration  21: 2685560.987 ops/s
Iteration  22: 2682372.716 ops/s
Iteration  23: 2734542.609 ops/s
Iteration  24: 2729254.624 ops/s
Iteration  25: 2701728.470 ops/s
Iteration  26: 2672491.907 ops/s
Iteration  27: 2819450.330 ops/s
Iteration  28: 2707786.483 ops/s
Iteration  29: 2722817.715 ops/s
Iteration  30: 2689150.110 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_clear":
  2723585.960 ±(99.9%) 28123.888 ops/s [Average]
  (min, avg, max) = (2658160.547, 2723585.960, 2819450.330), stdev = 42094.515
  CI (99.9%): [2695462.071, 2751709.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_clear  thrpt   30  2723585.960 ± 28123.888  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_clearEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_clearEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2179368.904 ops/s
# Warmup Iteration   2: 4555521.928 ops/s
# Warmup Iteration   3: 4392121.024 ops/s
# Warmup Iteration   4: 3878694.433 ops/s
# Warmup Iteration   5: 4518997.609 ops/s
# Warmup Iteration   6: 4438031.427 ops/s
# Warmup Iteration   7: 4466844.420 ops/s
# Warmup Iteration   8: 4466192.104 ops/s
# Warmup Iteration   9: 4554329.195 ops/s
# Warmup Iteration  10: 4319169.772 ops/s
# Warmup Iteration  11: 4520330.337 ops/s
# Warmup Iteration  12: 4512468.971 ops/s
# Warmup Iteration  13: 4332063.531 ops/s
# Warmup Iteration  14: 4292218.009 ops/s
# Warmup Iteration  15: 4520307.771 ops/s
# Warmup Iteration  16: 4374510.862 ops/s
# Warmup Iteration  17: 4357119.557 ops/s
# Warmup Iteration  18: 4373784.670 ops/s
# Warmup Iteration  19: 4418536.725 ops/s
# Warmup Iteration  20: 4495179.121 ops/s
# Warmup Iteration  21: 4279989.401 ops/s
# Warmup Iteration  22: 4309585.130 ops/s
# Warmup Iteration  23: 4420469.540 ops/s
# Warmup Iteration  24: 4331897.921 ops/s
# Warmup Iteration  25: 4328380.011 ops/s
# Warmup Iteration  26: 4318995.929 ops/s
# Warmup Iteration  27: 4292693.033 ops/s
# Warmup Iteration  28: 4345331.948 ops/s
# Warmup Iteration  29: 4344254.394 ops/s
# Warmup Iteration  30: 4375676.779 ops/s
Iteration   1: 4340665.028 ops/s
Iteration   2: 4327724.297 ops/s
Iteration   3: 4312251.904 ops/s
Iteration   4: 4354214.760 ops/s
Iteration   5: 4366579.202 ops/s
Iteration   6: 4436666.631 ops/s
Iteration   7: 4344667.702 ops/s
Iteration   8: 4455616.799 ops/s
Iteration   9: 4442438.938 ops/s
Iteration  10: 4377536.829 ops/s
Iteration  11: 4308588.981 ops/s
Iteration  12: 4397880.163 ops/s
Iteration  13: 4401985.936 ops/s
Iteration  14: 4369579.596 ops/s
Iteration  15: 4388326.235 ops/s
Iteration  16: 4296010.727 ops/s
Iteration  17: 4419205.505 ops/s
Iteration  18: 4318522.350 ops/s
Iteration  19: 4337648.756 ops/s
Iteration  20: 4366555.354 ops/s
Iteration  21: 4297493.878 ops/s
Iteration  22: 4320519.567 ops/s
Iteration  23: 4593428.747 ops/s
Iteration  24: 4338251.039 ops/s
Iteration  25: 4336207.646 ops/s
Iteration  26: 4266250.701 ops/s
Iteration  27: 4360655.163 ops/s
Iteration  28: 4253009.841 ops/s
Iteration  29: 4392858.927 ops/s
Iteration  30: 4505037.776 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_clearEntrySet":
  4367545.966 ±(99.9%) 47139.424 ops/s [Average]
  (min, avg, max) = (4253009.841, 4367545.966, 4593428.747), stdev = 70556.075
  CI (99.9%): [4320406.542, 4414685.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_clearEntrySet  thrpt   30  4367545.966 ± 47139.424  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_clearKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_clearKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2169821.282 ops/s
# Warmup Iteration   2: 4553978.430 ops/s
# Warmup Iteration   3: 4446135.652 ops/s
# Warmup Iteration   4: 4128385.005 ops/s
# Warmup Iteration   5: 4507645.257 ops/s
# Warmup Iteration   6: 4523454.139 ops/s
# Warmup Iteration   7: 4432325.541 ops/s
# Warmup Iteration   8: 4413645.520 ops/s
# Warmup Iteration   9: 4638062.592 ops/s
# Warmup Iteration  10: 4449897.905 ops/s
# Warmup Iteration  11: 4476729.507 ops/s
# Warmup Iteration  12: 4504976.397 ops/s
# Warmup Iteration  13: 4506204.351 ops/s
# Warmup Iteration  14: 4523644.054 ops/s
# Warmup Iteration  15: 4567992.259 ops/s
# Warmup Iteration  16: 4608201.977 ops/s
# Warmup Iteration  17: 4462343.311 ops/s
# Warmup Iteration  18: 4518314.424 ops/s
# Warmup Iteration  19: 4704971.716 ops/s
# Warmup Iteration  20: 4548124.260 ops/s
# Warmup Iteration  21: 4586008.569 ops/s
# Warmup Iteration  22: 4526511.662 ops/s
# Warmup Iteration  23: 4602050.862 ops/s
# Warmup Iteration  24: 4496099.712 ops/s
# Warmup Iteration  25: 4497497.252 ops/s
# Warmup Iteration  26: 4525301.198 ops/s
# Warmup Iteration  27: 4541299.460 ops/s
# Warmup Iteration  28: 4555266.031 ops/s
# Warmup Iteration  29: 4556844.728 ops/s
# Warmup Iteration  30: 4891857.132 ops/s
Iteration   1: 4662693.735 ops/s
Iteration   2: 4532852.033 ops/s
Iteration   3: 4596184.358 ops/s
Iteration   4: 4658228.527 ops/s
Iteration   5: 4561317.408 ops/s
Iteration   6: 4504879.198 ops/s
Iteration   7: 4558758.360 ops/s
Iteration   8: 4613480.266 ops/s
Iteration   9: 4533977.308 ops/s
Iteration  10: 4482231.075 ops/s
Iteration  11: 4431148.468 ops/s
Iteration  12: 4505258.595 ops/s
Iteration  13: 4598247.343 ops/s
Iteration  14: 4609145.723 ops/s
Iteration  15: 4553998.689 ops/s
Iteration  16: 4592743.710 ops/s
Iteration  17: 4572714.063 ops/s
Iteration  18: 4617557.979 ops/s
Iteration  19: 4597444.162 ops/s
Iteration  20: 4617603.311 ops/s
Iteration  21: 4582270.539 ops/s
Iteration  22: 4468657.397 ops/s
Iteration  23: 4417032.849 ops/s
Iteration  24: 4521360.795 ops/s
Iteration  25: 4645367.587 ops/s
Iteration  26: 4650372.866 ops/s
Iteration  27: 4706782.537 ops/s
Iteration  28: 4775025.776 ops/s
Iteration  29: 4668428.896 ops/s
Iteration  30: 4587357.875 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_clearKeySet":
  4580770.714 ±(99.9%) 52814.479 ops/s [Average]
  (min, avg, max) = (4417032.849, 4580770.714, 4775025.776), stdev = 79050.232
  CI (99.9%): [4527956.235, 4633585.193] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_clearKeySet  thrpt   30  4580770.714 ± 52814.479  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 476498.046 ops/s
# Warmup Iteration   2: 859092.149 ops/s
# Warmup Iteration   3: 1017717.201 ops/s
# Warmup Iteration   4: 1063592.111 ops/s
# Warmup Iteration   5: 1069420.673 ops/s
# Warmup Iteration   6: 866097.160 ops/s
# Warmup Iteration   7: 1032480.693 ops/s
# Warmup Iteration   8: 1019098.527 ops/s
# Warmup Iteration   9: 1070325.949 ops/s
# Warmup Iteration  10: 1066822.300 ops/s
# Warmup Iteration  11: 1037055.295 ops/s
# Warmup Iteration  12: 1025561.290 ops/s
# Warmup Iteration  13: 1015212.581 ops/s
# Warmup Iteration  14: 1024242.268 ops/s
# Warmup Iteration  15: 1033825.350 ops/s
# Warmup Iteration  16: 1023558.635 ops/s
# Warmup Iteration  17: 1035649.662 ops/s
# Warmup Iteration  18: 1062316.180 ops/s
# Warmup Iteration  19: 1054850.656 ops/s
# Warmup Iteration  20: 1036984.266 ops/s
# Warmup Iteration  21: 1055121.411 ops/s
# Warmup Iteration  22: 1045029.205 ops/s
# Warmup Iteration  23: 1060582.278 ops/s
# Warmup Iteration  24: 1069388.029 ops/s
# Warmup Iteration  25: 1024992.762 ops/s
# Warmup Iteration  26: 1052752.529 ops/s
# Warmup Iteration  27: 1024112.087 ops/s
# Warmup Iteration  28: 1047587.530 ops/s
# Warmup Iteration  29: 1040508.492 ops/s
# Warmup Iteration  30: 1074450.185 ops/s
Iteration   1: 1087372.849 ops/s
Iteration   2: 1024623.181 ops/s
Iteration   3: 1016131.870 ops/s
Iteration   4: 1015706.982 ops/s
Iteration   5: 1026455.550 ops/s
Iteration   6: 1062434.552 ops/s
Iteration   7: 1043978.554 ops/s
Iteration   8: 1076235.206 ops/s
Iteration   9: 1071033.952 ops/s
Iteration  10: 1052154.673 ops/s
Iteration  11: 1030744.003 ops/s
Iteration  12: 1061186.059 ops/s
Iteration  13: 1025044.372 ops/s
Iteration  14: 1022721.356 ops/s
Iteration  15: 1057862.962 ops/s
Iteration  16: 1051616.239 ops/s
Iteration  17: 1071635.979 ops/s
Iteration  18: 1096851.786 ops/s
Iteration  19: 1102588.249 ops/s
Iteration  20: 1086935.207 ops/s
Iteration  21: 1070200.878 ops/s
Iteration  22: 1050935.826 ops/s
Iteration  23: 1104301.020 ops/s
Iteration  24: 1049240.603 ops/s
Iteration  25: 1042504.423 ops/s
Iteration  26: 1106190.913 ops/s
Iteration  27: 1054692.477 ops/s
Iteration  28: 1054134.763 ops/s
Iteration  29: 1041196.551 ops/s
Iteration  30: 1035055.051 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collect":
  1056392.203 ±(99.9%) 17828.531 ops/s [Average]
  (min, avg, max) = (1015706.982, 1056392.203, 1106190.913), stdev = 26684.908
  CI (99.9%): [1038563.672, 1074220.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collect  thrpt   30  1056392.203 ± 17828.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1907637.413 ops/s
# Warmup Iteration   2: 4970415.012 ops/s
# Warmup Iteration   3: 4672205.527 ops/s
# Warmup Iteration   4: 4147616.446 ops/s
# Warmup Iteration   5: 4869485.151 ops/s
# Warmup Iteration   6: 4780791.702 ops/s
# Warmup Iteration   7: 4830264.910 ops/s
# Warmup Iteration   8: 4938070.476 ops/s
# Warmup Iteration   9: 4885675.930 ops/s
# Warmup Iteration  10: 4815932.875 ops/s
# Warmup Iteration  11: 4852337.164 ops/s
# Warmup Iteration  12: 4799781.006 ops/s
# Warmup Iteration  13: 4887981.293 ops/s
# Warmup Iteration  14: 4924015.745 ops/s
# Warmup Iteration  15: 4923836.695 ops/s
# Warmup Iteration  16: 4948079.270 ops/s
# Warmup Iteration  17: 4844627.391 ops/s
# Warmup Iteration  18: 4855790.837 ops/s
# Warmup Iteration  19: 4914396.850 ops/s
# Warmup Iteration  20: 5004428.240 ops/s
# Warmup Iteration  21: 4901806.323 ops/s
# Warmup Iteration  22: 4810561.905 ops/s
# Warmup Iteration  23: 4886606.565 ops/s
# Warmup Iteration  24: 4828508.714 ops/s
# Warmup Iteration  25: 4829564.028 ops/s
# Warmup Iteration  26: 4778144.338 ops/s
# Warmup Iteration  27: 4723397.661 ops/s
# Warmup Iteration  28: 4874917.247 ops/s
# Warmup Iteration  29: 4824795.173 ops/s
# Warmup Iteration  30: 5023793.402 ops/s
Iteration   1: 5144394.204 ops/s
Iteration   2: 4802006.576 ops/s
Iteration   3: 4780312.504 ops/s
Iteration   4: 4809297.669 ops/s
Iteration   5: 4717373.291 ops/s
Iteration   6: 4851300.176 ops/s
Iteration   7: 4934144.768 ops/s
Iteration   8: 5045674.462 ops/s
Iteration   9: 4991504.109 ops/s
Iteration  10: 4968583.368 ops/s
Iteration  11: 4900164.688 ops/s
Iteration  12: 4960340.876 ops/s
Iteration  13: 5042747.035 ops/s
Iteration  14: 4934180.321 ops/s
Iteration  15: 4997195.446 ops/s
Iteration  16: 4864263.398 ops/s
Iteration  17: 4920003.235 ops/s
Iteration  18: 5078056.115 ops/s
Iteration  19: 4996840.193 ops/s
Iteration  20: 4945356.684 ops/s
Iteration  21: 4967827.125 ops/s
Iteration  22: 4945568.879 ops/s
Iteration  23: 5006608.930 ops/s
Iteration  24: 5004462.064 ops/s
Iteration  25: 5034962.103 ops/s
Iteration  26: 4942789.836 ops/s
Iteration  27: 4782271.909 ops/s
Iteration  28: 4833368.367 ops/s
Iteration  29: 5035330.715 ops/s
Iteration  30: 4902472.465 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectBoolean":
  4937980.050 ±(99.9%) 66217.340 ops/s [Average]
  (min, avg, max) = (4717373.291, 4937980.050, 5144394.204), stdev = 99111.004
  CI (99.9%): [4871762.711, 5004197.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectBoolean  thrpt   30  4937980.050 ± 66217.340  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1695046.621 ops/s
# Warmup Iteration   2: 4526249.022 ops/s
# Warmup Iteration   3: 4526466.837 ops/s
# Warmup Iteration   4: 3688088.205 ops/s
# Warmup Iteration   5: 4221280.574 ops/s
# Warmup Iteration   6: 4256202.436 ops/s
# Warmup Iteration   7: 4291678.071 ops/s
# Warmup Iteration   8: 4251514.757 ops/s
# Warmup Iteration   9: 4271407.507 ops/s
# Warmup Iteration  10: 4210408.234 ops/s
# Warmup Iteration  11: 4213105.024 ops/s
# Warmup Iteration  12: 4267816.742 ops/s
# Warmup Iteration  13: 4311610.952 ops/s
# Warmup Iteration  14: 4301973.136 ops/s
# Warmup Iteration  15: 4193818.472 ops/s
# Warmup Iteration  16: 4236919.584 ops/s
# Warmup Iteration  17: 4321977.452 ops/s
# Warmup Iteration  18: 4275881.353 ops/s
# Warmup Iteration  19: 4399585.686 ops/s
# Warmup Iteration  20: 4339675.781 ops/s
# Warmup Iteration  21: 4219152.934 ops/s
# Warmup Iteration  22: 4352072.594 ops/s
# Warmup Iteration  23: 4419786.291 ops/s
# Warmup Iteration  24: 4336030.053 ops/s
# Warmup Iteration  25: 4476197.608 ops/s
# Warmup Iteration  26: 4270863.937 ops/s
# Warmup Iteration  27: 4379661.676 ops/s
# Warmup Iteration  28: 4417731.589 ops/s
# Warmup Iteration  29: 4372439.664 ops/s
# Warmup Iteration  30: 4423606.076 ops/s
Iteration   1: 4337541.275 ops/s
Iteration   2: 4212303.314 ops/s
Iteration   3: 4281063.280 ops/s
Iteration   4: 4261466.450 ops/s
Iteration   5: 4426189.691 ops/s
Iteration   6: 4339748.831 ops/s
Iteration   7: 4325572.331 ops/s
Iteration   8: 4255587.525 ops/s
Iteration   9: 4195442.982 ops/s
Iteration  10: 4399315.867 ops/s
Iteration  11: 4302389.557 ops/s
Iteration  12: 4254820.397 ops/s
Iteration  13: 4223497.676 ops/s
Iteration  14: 4263451.272 ops/s
Iteration  15: 4444750.230 ops/s
Iteration  16: 4271528.981 ops/s
Iteration  17: 4501953.930 ops/s
Iteration  18: 4396509.518 ops/s
Iteration  19: 4268021.750 ops/s
Iteration  20: 4292492.584 ops/s
Iteration  21: 4403882.411 ops/s
Iteration  22: 4335210.656 ops/s
Iteration  23: 4284304.045 ops/s
Iteration  24: 4279761.261 ops/s
Iteration  25: 4468444.867 ops/s
Iteration  26: 4414177.596 ops/s
Iteration  27: 4409310.873 ops/s
Iteration  28: 4381983.066 ops/s
Iteration  29: 4410669.605 ops/s
Iteration  30: 4349884.772 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectBooleanWithTarget":
  4333042.553 ±(99.9%) 53907.267 ops/s [Average]
  (min, avg, max) = (4195442.982, 4333042.553, 4501953.930), stdev = 80685.866
  CI (99.9%): [4279135.286, 4386949.821] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  4333042.553 ± 53907.267  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 781569.354 ops/s
# Warmup Iteration   2: 2163445.813 ops/s
# Warmup Iteration   3: 2157507.684 ops/s
# Warmup Iteration   4: 1778336.647 ops/s
# Warmup Iteration   5: 2121738.626 ops/s
# Warmup Iteration   6: 2151704.275 ops/s
# Warmup Iteration   7: 2209921.170 ops/s
# Warmup Iteration   8: 2147746.889 ops/s
# Warmup Iteration   9: 2140850.740 ops/s
# Warmup Iteration  10: 2143265.387 ops/s
# Warmup Iteration  11: 2134768.548 ops/s
# Warmup Iteration  12: 2153372.170 ops/s
# Warmup Iteration  13: 2166373.633 ops/s
# Warmup Iteration  14: 2210807.472 ops/s
# Warmup Iteration  15: 2240441.850 ops/s
# Warmup Iteration  16: 2104359.087 ops/s
# Warmup Iteration  17: 2155059.434 ops/s
# Warmup Iteration  18: 2155786.343 ops/s
# Warmup Iteration  19: 2104574.755 ops/s
# Warmup Iteration  20: 2149810.092 ops/s
# Warmup Iteration  21: 2192626.379 ops/s
# Warmup Iteration  22: 2163050.752 ops/s
# Warmup Iteration  23: 2172257.684 ops/s
# Warmup Iteration  24: 2187406.837 ops/s
# Warmup Iteration  25: 2175365.354 ops/s
# Warmup Iteration  26: 2212310.168 ops/s
# Warmup Iteration  27: 2164090.902 ops/s
# Warmup Iteration  28: 2215176.078 ops/s
# Warmup Iteration  29: 2151976.714 ops/s
# Warmup Iteration  30: 2192391.522 ops/s
Iteration   1: 2122967.449 ops/s
Iteration   2: 2162064.741 ops/s
Iteration   3: 2160421.118 ops/s
Iteration   4: 2158387.209 ops/s
Iteration   5: 2132244.221 ops/s
Iteration   6: 2189988.428 ops/s
Iteration   7: 2129505.853 ops/s
Iteration   8: 2171411.730 ops/s
Iteration   9: 2130777.316 ops/s
Iteration  10: 2228295.310 ops/s
Iteration  11: 2116847.004 ops/s
Iteration  12: 2184797.195 ops/s
Iteration  13: 2254241.383 ops/s
Iteration  14: 2301149.110 ops/s
Iteration  15: 2143849.211 ops/s
Iteration  16: 2164609.251 ops/s
Iteration  17: 2147075.772 ops/s
Iteration  18: 2158878.759 ops/s
Iteration  19: 2122284.660 ops/s
Iteration  20: 2154962.985 ops/s
Iteration  21: 2142017.727 ops/s
Iteration  22: 2142321.067 ops/s
Iteration  23: 2151285.882 ops/s
Iteration  24: 2224018.516 ops/s
Iteration  25: 2209965.963 ops/s
Iteration  26: 2242958.779 ops/s
Iteration  27: 2169349.232 ops/s
Iteration  28: 2211574.524 ops/s
Iteration  29: 2230382.680 ops/s
Iteration  30: 2131121.399 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectByte":
  2172991.816 ±(99.9%) 30507.656 ops/s [Average]
  (min, avg, max) = (2116847.004, 2172991.816, 2301149.110), stdev = 45662.426
  CI (99.9%): [2142484.160, 2203499.471] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectByte  thrpt   30  2172991.816 ± 30507.656  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 863396.507 ops/s
# Warmup Iteration   2: 2243168.773 ops/s
# Warmup Iteration   3: 2218599.269 ops/s
# Warmup Iteration   4: 1794693.523 ops/s
# Warmup Iteration   5: 2245358.451 ops/s
# Warmup Iteration   6: 2264809.317 ops/s
# Warmup Iteration   7: 2212424.222 ops/s
# Warmup Iteration   8: 2216859.330 ops/s
# Warmup Iteration   9: 2242176.602 ops/s
# Warmup Iteration  10: 2276310.474 ops/s
# Warmup Iteration  11: 2237334.970 ops/s
# Warmup Iteration  12: 2221226.114 ops/s
# Warmup Iteration  13: 2235723.402 ops/s
# Warmup Iteration  14: 2185213.637 ops/s
# Warmup Iteration  15: 2196364.140 ops/s
# Warmup Iteration  16: 2215797.857 ops/s
# Warmup Iteration  17: 2210820.200 ops/s
# Warmup Iteration  18: 2232389.624 ops/s
# Warmup Iteration  19: 2333552.646 ops/s
# Warmup Iteration  20: 2284767.863 ops/s
# Warmup Iteration  21: 2299876.867 ops/s
# Warmup Iteration  22: 2255697.702 ops/s
# Warmup Iteration  23: 2227947.007 ops/s
# Warmup Iteration  24: 2207488.781 ops/s
# Warmup Iteration  25: 2199966.202 ops/s
# Warmup Iteration  26: 2199997.420 ops/s
# Warmup Iteration  27: 2301097.970 ops/s
# Warmup Iteration  28: 2301471.764 ops/s
# Warmup Iteration  29: 2280543.447 ops/s
# Warmup Iteration  30: 2222695.575 ops/s
Iteration   1: 2304752.883 ops/s
Iteration   2: 2220817.771 ops/s
Iteration   3: 2254880.228 ops/s
Iteration   4: 2223491.114 ops/s
Iteration   5: 2250377.890 ops/s
Iteration   6: 2227303.603 ops/s
Iteration   7: 2228514.433 ops/s
Iteration   8: 2269179.993 ops/s
Iteration   9: 2231647.953 ops/s
Iteration  10: 2248998.986 ops/s
Iteration  11: 2293025.271 ops/s
Iteration  12: 2261831.471 ops/s
Iteration  13: 2237570.531 ops/s
Iteration  14: 2242175.550 ops/s
Iteration  15: 2298236.211 ops/s
Iteration  16: 2253951.257 ops/s
Iteration  17: 2204631.755 ops/s
Iteration  18: 2216523.392 ops/s
Iteration  19: 2286754.750 ops/s
Iteration  20: 2237499.733 ops/s
Iteration  21: 2268440.694 ops/s
Iteration  22: 2237450.747 ops/s
Iteration  23: 2262953.543 ops/s
Iteration  24: 2314524.667 ops/s
Iteration  25: 2276510.993 ops/s
Iteration  26: 2215943.428 ops/s
Iteration  27: 2202369.945 ops/s
Iteration  28: 2239573.054 ops/s
Iteration  29: 2242852.225 ops/s
Iteration  30: 2221565.330 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectByteWithTarget":
  2249144.980 ±(99.9%) 19772.942 ops/s [Average]
  (min, avg, max) = (2202369.945, 2249144.980, 2314524.667), stdev = 29595.211
  CI (99.9%): [2229372.038, 2268917.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  2249144.980 ± 19772.942  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 886235.317 ops/s
# Warmup Iteration   2: 2280495.965 ops/s
# Warmup Iteration   3: 2222515.243 ops/s
# Warmup Iteration   4: 1864986.989 ops/s
# Warmup Iteration   5: 2226106.923 ops/s
# Warmup Iteration   6: 2211021.236 ops/s
# Warmup Iteration   7: 2234727.162 ops/s
# Warmup Iteration   8: 2218481.070 ops/s
# Warmup Iteration   9: 2190208.937 ops/s
# Warmup Iteration  10: 2205291.830 ops/s
# Warmup Iteration  11: 2220999.998 ops/s
# Warmup Iteration  12: 2251805.924 ops/s
# Warmup Iteration  13: 2258672.767 ops/s
# Warmup Iteration  14: 2205887.709 ops/s
# Warmup Iteration  15: 2182922.441 ops/s
# Warmup Iteration  16: 2248462.504 ops/s
# Warmup Iteration  17: 2227017.869 ops/s
# Warmup Iteration  18: 2210756.906 ops/s
# Warmup Iteration  19: 2214011.018 ops/s
# Warmup Iteration  20: 2255094.315 ops/s
# Warmup Iteration  21: 2264318.405 ops/s
# Warmup Iteration  22: 2329739.024 ops/s
# Warmup Iteration  23: 2329591.760 ops/s
# Warmup Iteration  24: 2199240.685 ops/s
# Warmup Iteration  25: 2226034.221 ops/s
# Warmup Iteration  26: 2220244.048 ops/s
# Warmup Iteration  27: 2238250.339 ops/s
# Warmup Iteration  28: 2259511.968 ops/s
# Warmup Iteration  29: 2313213.398 ops/s
# Warmup Iteration  30: 2220352.042 ops/s
Iteration   1: 2299391.791 ops/s
Iteration   2: 2248229.288 ops/s
Iteration   3: 2225597.904 ops/s
Iteration   4: 2307540.495 ops/s
Iteration   5: 2231523.667 ops/s
Iteration   6: 2220372.425 ops/s
Iteration   7: 2200561.780 ops/s
Iteration   8: 2303457.319 ops/s
Iteration   9: 2290617.647 ops/s
Iteration  10: 2225448.085 ops/s
Iteration  11: 2282997.612 ops/s
Iteration  12: 2282814.093 ops/s
Iteration  13: 2237014.760 ops/s
Iteration  14: 2247901.817 ops/s
Iteration  15: 2275148.959 ops/s
Iteration  16: 2381708.116 ops/s
Iteration  17: 2207744.972 ops/s
Iteration  18: 2150444.347 ops/s
Iteration  19: 2198998.412 ops/s
Iteration  20: 2172094.365 ops/s
Iteration  21: 2190694.926 ops/s
Iteration  22: 2207348.056 ops/s
Iteration  23: 2183172.609 ops/s
Iteration  24: 2227025.268 ops/s
Iteration  25: 2217647.946 ops/s
Iteration  26: 2230527.867 ops/s
Iteration  27: 2196485.597 ops/s
Iteration  28: 2186032.514 ops/s
Iteration  29: 2193818.605 ops/s
Iteration  30: 2202682.898 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectChar":
  2234168.138 ±(99.9%) 33381.518 ops/s [Average]
  (min, avg, max) = (2150444.347, 2234168.138, 2381708.116), stdev = 49963.889
  CI (99.9%): [2200786.620, 2267549.656] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectChar  thrpt   30  2234168.138 ± 33381.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 849358.301 ops/s
# Warmup Iteration   2: 2229126.601 ops/s
# Warmup Iteration   3: 2225023.255 ops/s
# Warmup Iteration   4: 1863764.684 ops/s
# Warmup Iteration   5: 2182192.510 ops/s
# Warmup Iteration   6: 2307098.328 ops/s
# Warmup Iteration   7: 2206396.666 ops/s
# Warmup Iteration   8: 2229628.435 ops/s
# Warmup Iteration   9: 2198529.706 ops/s
# Warmup Iteration  10: 2203937.740 ops/s
# Warmup Iteration  11: 2217424.956 ops/s
# Warmup Iteration  12: 2240821.550 ops/s
# Warmup Iteration  13: 2213471.169 ops/s
# Warmup Iteration  14: 2185431.504 ops/s
# Warmup Iteration  15: 2209847.257 ops/s
# Warmup Iteration  16: 2224330.055 ops/s
# Warmup Iteration  17: 2243459.790 ops/s
# Warmup Iteration  18: 2295258.845 ops/s
# Warmup Iteration  19: 2247744.159 ops/s
# Warmup Iteration  20: 2414454.418 ops/s
# Warmup Iteration  21: 2209467.677 ops/s
# Warmup Iteration  22: 2209807.638 ops/s
# Warmup Iteration  23: 2212809.938 ops/s
# Warmup Iteration  24: 2210852.225 ops/s
# Warmup Iteration  25: 2189459.602 ops/s
# Warmup Iteration  26: 2192404.451 ops/s
# Warmup Iteration  27: 2300863.294 ops/s
# Warmup Iteration  28: 2276188.184 ops/s
# Warmup Iteration  29: 2296815.846 ops/s
# Warmup Iteration  30: 2248343.004 ops/s
Iteration   1: 2182138.212 ops/s
Iteration   2: 2222459.108 ops/s
Iteration   3: 2247156.861 ops/s
Iteration   4: 2202071.263 ops/s
Iteration   5: 2266176.618 ops/s
Iteration   6: 2244250.370 ops/s
Iteration   7: 2271776.020 ops/s
Iteration   8: 2249119.020 ops/s
Iteration   9: 2205808.151 ops/s
Iteration  10: 2200952.981 ops/s
Iteration  11: 2233262.230 ops/s
Iteration  12: 2180399.216 ops/s
Iteration  13: 2257773.281 ops/s
Iteration  14: 2236323.944 ops/s
Iteration  15: 2212955.288 ops/s
Iteration  16: 2181621.262 ops/s
Iteration  17: 2202756.667 ops/s
Iteration  18: 2173538.910 ops/s
Iteration  19: 2252190.941 ops/s
Iteration  20: 2218323.924 ops/s
Iteration  21: 2272353.411 ops/s
Iteration  22: 2191048.888 ops/s
Iteration  23: 2317025.946 ops/s
Iteration  24: 2296307.147 ops/s
Iteration  25: 2275006.112 ops/s
Iteration  26: 2231321.874 ops/s
Iteration  27: 2256231.484 ops/s
Iteration  28: 2230157.884 ops/s
Iteration  29: 2200385.512 ops/s
Iteration  30: 2231896.904 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectCharWithTarget":
  2231426.314 ±(99.9%) 24108.883 ops/s [Average]
  (min, avg, max) = (2173538.910, 2231426.314, 2317025.946), stdev = 36085.044
  CI (99.9%): [2207317.431, 2255535.198] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  2231426.314 ± 24108.883  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 615502.484 ops/s
# Warmup Iteration   2: 1546439.267 ops/s
# Warmup Iteration   3: 1533527.880 ops/s
# Warmup Iteration   4: 1221487.549 ops/s
# Warmup Iteration   5: 1511449.312 ops/s
# Warmup Iteration   6: 1498431.980 ops/s
# Warmup Iteration   7: 1522354.946 ops/s
# Warmup Iteration   8: 1478442.400 ops/s
# Warmup Iteration   9: 1508754.953 ops/s
# Warmup Iteration  10: 1547529.285 ops/s
# Warmup Iteration  11: 1600578.788 ops/s
# Warmup Iteration  12: 1527182.276 ops/s
# Warmup Iteration  13: 1482015.260 ops/s
# Warmup Iteration  14: 1504079.703 ops/s
# Warmup Iteration  15: 1529104.352 ops/s
# Warmup Iteration  16: 1531112.617 ops/s
# Warmup Iteration  17: 1519857.214 ops/s
# Warmup Iteration  18: 1543717.145 ops/s
# Warmup Iteration  19: 1579850.957 ops/s
# Warmup Iteration  20: 1512523.729 ops/s
# Warmup Iteration  21: 1505011.761 ops/s
# Warmup Iteration  22: 1548905.460 ops/s
# Warmup Iteration  23: 1487904.273 ops/s
# Warmup Iteration  24: 1480443.941 ops/s
# Warmup Iteration  25: 1500740.673 ops/s
# Warmup Iteration  26: 1498401.684 ops/s
# Warmup Iteration  27: 1481558.213 ops/s
# Warmup Iteration  28: 1523702.620 ops/s
# Warmup Iteration  29: 1506208.070 ops/s
# Warmup Iteration  30: 1519207.591 ops/s
Iteration   1: 1510315.520 ops/s
Iteration   2: 1501576.595 ops/s
Iteration   3: 1499469.670 ops/s
Iteration   4: 1502011.856 ops/s
Iteration   5: 1505341.727 ops/s
Iteration   6: 1490699.214 ops/s
Iteration   7: 1497679.842 ops/s
Iteration   8: 1503853.914 ops/s
Iteration   9: 1463337.315 ops/s
Iteration  10: 1524724.690 ops/s
Iteration  11: 1487799.241 ops/s
Iteration  12: 1563807.948 ops/s
Iteration  13: 1490234.901 ops/s
Iteration  14: 1504901.623 ops/s
Iteration  15: 1562441.060 ops/s
Iteration  16: 1543783.529 ops/s
Iteration  17: 1492415.817 ops/s
Iteration  18: 1466141.829 ops/s
Iteration  19: 1525009.864 ops/s
Iteration  20: 1515063.945 ops/s
Iteration  21: 1509183.331 ops/s
Iteration  22: 1524671.259 ops/s
Iteration  23: 1547784.213 ops/s
Iteration  24: 1476696.745 ops/s
Iteration  25: 1481942.967 ops/s
Iteration  26: 1493017.749 ops/s
Iteration  27: 1519393.278 ops/s
Iteration  28: 1508243.218 ops/s
Iteration  29: 1604766.248 ops/s
Iteration  30: 1569498.575 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectDouble":
  1512860.256 ±(99.9%) 21344.494 ops/s [Average]
  (min, avg, max) = (1463337.315, 1512860.256, 1604766.248), stdev = 31947.436
  CI (99.9%): [1491515.762, 1534204.750] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectDouble  thrpt   30  1512860.256 ± 21344.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 577981.698 ops/s
# Warmup Iteration   2: 1507352.395 ops/s
# Warmup Iteration   3: 1535998.694 ops/s
# Warmup Iteration   4: 1232973.352 ops/s
# Warmup Iteration   5: 1592732.646 ops/s
# Warmup Iteration   6: 1543850.483 ops/s
# Warmup Iteration   7: 1529769.039 ops/s
# Warmup Iteration   8: 1548106.259 ops/s
# Warmup Iteration   9: 1530766.159 ops/s
# Warmup Iteration  10: 1511195.464 ops/s
# Warmup Iteration  11: 1512864.940 ops/s
# Warmup Iteration  12: 1503574.399 ops/s
# Warmup Iteration  13: 1504309.125 ops/s
# Warmup Iteration  14: 1530699.437 ops/s
# Warmup Iteration  15: 1545394.207 ops/s
# Warmup Iteration  16: 1500312.134 ops/s
# Warmup Iteration  17: 1518141.593 ops/s
# Warmup Iteration  18: 1521001.996 ops/s
# Warmup Iteration  19: 1498076.776 ops/s
# Warmup Iteration  20: 1525216.321 ops/s
# Warmup Iteration  21: 1571474.629 ops/s
# Warmup Iteration  22: 1560312.091 ops/s
# Warmup Iteration  23: 1571566.829 ops/s
# Warmup Iteration  24: 1515316.109 ops/s
# Warmup Iteration  25: 1558372.067 ops/s
# Warmup Iteration  26: 1603111.947 ops/s
# Warmup Iteration  27: 1482416.988 ops/s
# Warmup Iteration  28: 1532768.458 ops/s
# Warmup Iteration  29: 1584188.559 ops/s
# Warmup Iteration  30: 1519595.449 ops/s
Iteration   1: 1515772.084 ops/s
Iteration   2: 1575782.456 ops/s
Iteration   3: 1590740.322 ops/s
Iteration   4: 1522100.448 ops/s
Iteration   5: 1535045.691 ops/s
Iteration   6: 1525570.313 ops/s
Iteration   7: 1557733.952 ops/s
Iteration   8: 1618761.138 ops/s
Iteration   9: 1530882.810 ops/s
Iteration  10: 1513850.467 ops/s
Iteration  11: 1514053.445 ops/s
Iteration  12: 1563293.520 ops/s
Iteration  13: 1517473.826 ops/s
Iteration  14: 1517652.460 ops/s
Iteration  15: 1593367.363 ops/s
Iteration  16: 1569848.546 ops/s
Iteration  17: 1539448.952 ops/s
Iteration  18: 1577942.202 ops/s
Iteration  19: 1526427.345 ops/s
Iteration  20: 1520842.168 ops/s
Iteration  21: 1522021.132 ops/s
Iteration  22: 1531446.107 ops/s
Iteration  23: 1515334.918 ops/s
Iteration  24: 1501337.861 ops/s
Iteration  25: 1514433.091 ops/s
Iteration  26: 1503549.565 ops/s
Iteration  27: 1501567.910 ops/s
Iteration  28: 1547730.240 ops/s
Iteration  29: 1484503.980 ops/s
Iteration  30: 1494686.006 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectDoubleWithTarget":
  1534773.344 ±(99.9%) 21690.142 ops/s [Average]
  (min, avg, max) = (1484503.980, 1534773.344, 1618761.138), stdev = 32464.786
  CI (99.9%): [1513083.202, 1556463.486] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  1534773.344 ± 21690.142  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 646681.297 ops/s
# Warmup Iteration   2: 1558125.174 ops/s
# Warmup Iteration   3: 1591199.216 ops/s
# Warmup Iteration   4: 1292718.477 ops/s
# Warmup Iteration   5: 1579508.572 ops/s
# Warmup Iteration   6: 1603358.622 ops/s
# Warmup Iteration   7: 1605080.422 ops/s
# Warmup Iteration   8: 1601844.695 ops/s
# Warmup Iteration   9: 1593019.972 ops/s
# Warmup Iteration  10: 1590463.118 ops/s
# Warmup Iteration  11: 1590859.096 ops/s
# Warmup Iteration  12: 1581656.346 ops/s
# Warmup Iteration  13: 1579640.785 ops/s
# Warmup Iteration  14: 1625569.013 ops/s
# Warmup Iteration  15: 1581754.438 ops/s
# Warmup Iteration  16: 1614063.301 ops/s
# Warmup Iteration  17: 1620936.341 ops/s
# Warmup Iteration  18: 1623414.661 ops/s
# Warmup Iteration  19: 1666923.066 ops/s
# Warmup Iteration  20: 1661835.966 ops/s
# Warmup Iteration  21: 1634367.400 ops/s
# Warmup Iteration  22: 1592090.623 ops/s
# Warmup Iteration  23: 1580807.328 ops/s
# Warmup Iteration  24: 1588807.597 ops/s
# Warmup Iteration  25: 1600662.912 ops/s
# Warmup Iteration  26: 1591601.515 ops/s
# Warmup Iteration  27: 1585661.375 ops/s
# Warmup Iteration  28: 1582024.707 ops/s
# Warmup Iteration  29: 1586616.261 ops/s
# Warmup Iteration  30: 1616420.202 ops/s
Iteration   1: 1583328.259 ops/s
Iteration   2: 1602074.872 ops/s
Iteration   3: 1577293.869 ops/s
Iteration   4: 1623490.673 ops/s
Iteration   5: 1624843.747 ops/s
Iteration   6: 1612429.853 ops/s
Iteration   7: 1572764.188 ops/s
Iteration   8: 1569263.986 ops/s
Iteration   9: 1586390.474 ops/s
Iteration  10: 1609053.337 ops/s
Iteration  11: 1668788.533 ops/s
Iteration  12: 1657009.827 ops/s
Iteration  13: 1559646.001 ops/s
Iteration  14: 1559295.813 ops/s
Iteration  15: 1679119.101 ops/s
Iteration  16: 1611056.389 ops/s
Iteration  17: 1613849.302 ops/s
Iteration  18: 1608029.487 ops/s
Iteration  19: 1572333.833 ops/s
Iteration  20: 1618636.358 ops/s
Iteration  21: 1662963.163 ops/s
Iteration  22: 1671873.730 ops/s
Iteration  23: 1585742.525 ops/s
Iteration  24: 1581206.166 ops/s
Iteration  25: 1627620.553 ops/s
Iteration  26: 1579245.300 ops/s
Iteration  27: 1574455.248 ops/s
Iteration  28: 1588792.754 ops/s
Iteration  29: 1595147.077 ops/s
Iteration  30: 1658400.194 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectFloat":
  1607804.820 ±(99.9%) 23656.683 ops/s [Average]
  (min, avg, max) = (1559295.813, 1607804.820, 1679119.101), stdev = 35408.212
  CI (99.9%): [1584148.137, 1631461.503] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectFloat  thrpt   30  1607804.820 ± 23656.683  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 663948.782 ops/s
# Warmup Iteration   2: 1720156.893 ops/s
# Warmup Iteration   3: 1679998.939 ops/s
# Warmup Iteration   4: 1350439.597 ops/s
# Warmup Iteration   5: 1677702.101 ops/s
# Warmup Iteration   6: 1702712.459 ops/s
# Warmup Iteration   7: 1697987.001 ops/s
# Warmup Iteration   8: 1694564.449 ops/s
# Warmup Iteration   9: 1671048.072 ops/s
# Warmup Iteration  10: 1704499.431 ops/s
# Warmup Iteration  11: 1725463.094 ops/s
# Warmup Iteration  12: 1717613.027 ops/s
# Warmup Iteration  13: 1669137.968 ops/s
# Warmup Iteration  14: 1678481.961 ops/s
# Warmup Iteration  15: 1687833.708 ops/s
# Warmup Iteration  16: 1680703.322 ops/s
# Warmup Iteration  17: 1700945.684 ops/s
# Warmup Iteration  18: 1696306.347 ops/s
# Warmup Iteration  19: 1690683.694 ops/s
# Warmup Iteration  20: 1761667.989 ops/s
# Warmup Iteration  21: 1743229.559 ops/s
# Warmup Iteration  22: 1692304.931 ops/s
# Warmup Iteration  23: 1747112.578 ops/s
# Warmup Iteration  24: 1680081.437 ops/s
# Warmup Iteration  25: 1696549.183 ops/s
# Warmup Iteration  26: 1715741.011 ops/s
# Warmup Iteration  27: 1667945.971 ops/s
# Warmup Iteration  28: 1692117.833 ops/s
# Warmup Iteration  29: 1697056.063 ops/s
# Warmup Iteration  30: 1705516.224 ops/s
Iteration   1: 1698905.446 ops/s
Iteration   2: 1741882.632 ops/s
Iteration   3: 1734706.312 ops/s
Iteration   4: 1714457.813 ops/s
Iteration   5: 1692275.024 ops/s
Iteration   6: 1736267.521 ops/s
Iteration   7: 1732093.121 ops/s
Iteration   8: 1740532.384 ops/s
Iteration   9: 1681319.254 ops/s
Iteration  10: 1772361.983 ops/s
Iteration  11: 1751813.532 ops/s
Iteration  12: 1630120.540 ops/s
Iteration  13: 1697176.666 ops/s
Iteration  14: 1718269.791 ops/s
Iteration  15: 1653088.093 ops/s
Iteration  16: 1688180.301 ops/s
Iteration  17: 1710077.292 ops/s
Iteration  18: 1752054.256 ops/s
Iteration  19: 1744547.362 ops/s
Iteration  20: 1742412.245 ops/s
Iteration  21: 1722400.498 ops/s
Iteration  22: 1675203.320 ops/s
Iteration  23: 1693587.211 ops/s
Iteration  24: 1685906.594 ops/s
Iteration  25: 1680634.951 ops/s
Iteration  26: 1744705.352 ops/s
Iteration  27: 1673108.532 ops/s
Iteration  28: 1704901.279 ops/s
Iteration  29: 1700125.936 ops/s
Iteration  30: 1698688.458 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectFloatWithTarget":
  1710393.457 ±(99.9%) 21803.277 ops/s [Average]
  (min, avg, max) = (1630120.540, 1710393.457, 1772361.983), stdev = 32634.121
  CI (99.9%): [1688590.179, 1732196.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  1710393.457 ± 21803.277  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 442965.219 ops/s
# Warmup Iteration   2: 932539.540 ops/s
# Warmup Iteration   3: 1037369.345 ops/s
# Warmup Iteration   4: 1046918.053 ops/s
# Warmup Iteration   5: 856262.595 ops/s
# Warmup Iteration   6: 1046218.275 ops/s
# Warmup Iteration   7: 1008323.654 ops/s
# Warmup Iteration   8: 1037606.704 ops/s
# Warmup Iteration   9: 1014460.382 ops/s
# Warmup Iteration  10: 1013854.471 ops/s
# Warmup Iteration  11: 990937.110 ops/s
# Warmup Iteration  12: 1013069.218 ops/s
# Warmup Iteration  13: 1005878.542 ops/s
# Warmup Iteration  14: 1013019.336 ops/s
# Warmup Iteration  15: 1049131.033 ops/s
# Warmup Iteration  16: 1014632.983 ops/s
# Warmup Iteration  17: 1043013.045 ops/s
# Warmup Iteration  18: 1029181.718 ops/s
# Warmup Iteration  19: 1006282.945 ops/s
# Warmup Iteration  20: 1038063.845 ops/s
# Warmup Iteration  21: 1021840.764 ops/s
# Warmup Iteration  22: 1012018.948 ops/s
# Warmup Iteration  23: 1013749.205 ops/s
# Warmup Iteration  24: 1017754.815 ops/s
# Warmup Iteration  25: 1057251.783 ops/s
# Warmup Iteration  26: 1012910.227 ops/s
# Warmup Iteration  27: 1063809.353 ops/s
# Warmup Iteration  28: 1074411.312 ops/s
# Warmup Iteration  29: 1006959.835 ops/s
# Warmup Iteration  30: 1018857.637 ops/s
Iteration   1: 1024213.694 ops/s
Iteration   2: 1049040.512 ops/s
Iteration   3: 1005041.561 ops/s
Iteration   4: 1009212.537 ops/s
Iteration   5: 1030970.657 ops/s
Iteration   6: 1010791.713 ops/s
Iteration   7: 1021060.793 ops/s
Iteration   8: 1050578.131 ops/s
Iteration   9: 1015858.659 ops/s
Iteration  10: 1043375.038 ops/s
Iteration  11: 1054377.823 ops/s
Iteration  12: 1017233.904 ops/s
Iteration  13: 1006736.212 ops/s
Iteration  14: 987638.101 ops/s
Iteration  15: 1001981.763 ops/s
Iteration  16: 1047478.953 ops/s
Iteration  17: 1022839.110 ops/s
Iteration  18: 1005341.723 ops/s
Iteration  19: 1070046.125 ops/s
Iteration  20: 1012686.740 ops/s
Iteration  21: 1011507.319 ops/s
Iteration  22: 1046668.780 ops/s
Iteration  23: 1044334.681 ops/s
Iteration  24: 1046884.837 ops/s
Iteration  25: 998345.354 ops/s
Iteration  26: 1026602.896 ops/s
Iteration  27: 992060.172 ops/s
Iteration  28: 1025420.127 ops/s
Iteration  29: 1014559.521 ops/s
Iteration  30: 1011001.793 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectIf":
  1023462.974 ±(99.9%) 13788.135 ops/s [Average]
  (min, avg, max) = (987638.101, 1023462.974, 1070046.125), stdev = 20637.432
  CI (99.9%): [1009674.840, 1037251.109] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectIf  thrpt   30  1023462.974 ± 13788.135  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 835292.977 ops/s
# Warmup Iteration   2: 2091179.607 ops/s
# Warmup Iteration   3: 2166828.658 ops/s
# Warmup Iteration   4: 1759473.752 ops/s
# Warmup Iteration   5: 2164085.963 ops/s
# Warmup Iteration   6: 2141887.134 ops/s
# Warmup Iteration   7: 2121263.718 ops/s
# Warmup Iteration   8: 2168364.517 ops/s
# Warmup Iteration   9: 2184816.615 ops/s
# Warmup Iteration  10: 2213013.230 ops/s
# Warmup Iteration  11: 2157074.970 ops/s
# Warmup Iteration  12: 2122691.993 ops/s
# Warmup Iteration  13: 2133997.254 ops/s
# Warmup Iteration  14: 2177293.136 ops/s
# Warmup Iteration  15: 2144209.752 ops/s
# Warmup Iteration  16: 2165628.361 ops/s
# Warmup Iteration  17: 2164593.586 ops/s
# Warmup Iteration  18: 2135480.343 ops/s
# Warmup Iteration  19: 2154055.601 ops/s
# Warmup Iteration  20: 2157951.786 ops/s
# Warmup Iteration  21: 2161586.066 ops/s
# Warmup Iteration  22: 2145209.649 ops/s
# Warmup Iteration  23: 2166592.239 ops/s
# Warmup Iteration  24: 2152054.405 ops/s
# Warmup Iteration  25: 2136850.998 ops/s
# Warmup Iteration  26: 2149132.051 ops/s
# Warmup Iteration  27: 2129264.941 ops/s
# Warmup Iteration  28: 2146336.446 ops/s
# Warmup Iteration  29: 2175614.096 ops/s
# Warmup Iteration  30: 2162593.372 ops/s
Iteration   1: 2157281.588 ops/s
Iteration   2: 2202220.665 ops/s
Iteration   3: 2141143.830 ops/s
Iteration   4: 2184442.893 ops/s
Iteration   5: 2146956.936 ops/s
Iteration   6: 2132123.510 ops/s
Iteration   7: 2189764.412 ops/s
Iteration   8: 2164630.188 ops/s
Iteration   9: 2193992.202 ops/s
Iteration  10: 2160717.418 ops/s
Iteration  11: 2153281.516 ops/s
Iteration  12: 2254062.866 ops/s
Iteration  13: 2142387.059 ops/s
Iteration  14: 2282898.841 ops/s
Iteration  15: 2352659.328 ops/s
Iteration  16: 2254819.619 ops/s
Iteration  17: 2264443.014 ops/s
Iteration  18: 2328907.864 ops/s
Iteration  19: 2181082.967 ops/s
Iteration  20: 2124700.486 ops/s
Iteration  21: 2163688.260 ops/s
Iteration  22: 2227903.611 ops/s
Iteration  23: 2178044.028 ops/s
Iteration  24: 2343248.158 ops/s
Iteration  25: 2167149.564 ops/s
Iteration  26: 2164739.907 ops/s
Iteration  27: 2190499.971 ops/s
Iteration  28: 2165936.866 ops/s
Iteration  29: 2206008.996 ops/s
Iteration  30: 2193898.454 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectInt":
  2200454.501 ±(99.9%) 41341.164 ops/s [Average]
  (min, avg, max) = (2124700.486, 2200454.501, 2352659.328), stdev = 61877.513
  CI (99.9%): [2159113.336, 2241795.665] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectInt  thrpt   30  2200454.501 ± 41341.164  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 765645.157 ops/s
# Warmup Iteration   2: 2078780.951 ops/s
# Warmup Iteration   3: 2117500.912 ops/s
# Warmup Iteration   4: 1765756.217 ops/s
# Warmup Iteration   5: 2116884.662 ops/s
# Warmup Iteration   6: 2168174.258 ops/s
# Warmup Iteration   7: 2130995.167 ops/s
# Warmup Iteration   8: 2197876.473 ops/s
# Warmup Iteration   9: 2168377.423 ops/s
# Warmup Iteration  10: 2123147.058 ops/s
# Warmup Iteration  11: 2200367.675 ops/s
# Warmup Iteration  12: 2094668.224 ops/s
# Warmup Iteration  13: 2117720.641 ops/s
# Warmup Iteration  14: 2129297.333 ops/s
# Warmup Iteration  15: 2116351.342 ops/s
# Warmup Iteration  16: 2121287.771 ops/s
# Warmup Iteration  17: 2156083.810 ops/s
# Warmup Iteration  18: 2116402.085 ops/s
# Warmup Iteration  19: 2131273.103 ops/s
# Warmup Iteration  20: 2099909.737 ops/s
# Warmup Iteration  21: 2099087.311 ops/s
# Warmup Iteration  22: 2154866.761 ops/s
# Warmup Iteration  23: 2141236.231 ops/s
# Warmup Iteration  24: 2170936.533 ops/s
# Warmup Iteration  25: 2089802.406 ops/s
# Warmup Iteration  26: 2108323.452 ops/s
# Warmup Iteration  27: 2127397.919 ops/s
# Warmup Iteration  28: 2151551.757 ops/s
# Warmup Iteration  29: 2200009.940 ops/s
# Warmup Iteration  30: 2207347.429 ops/s
Iteration   1: 2230208.268 ops/s
Iteration   2: 2087054.874 ops/s
Iteration   3: 2125359.340 ops/s
Iteration   4: 2132499.820 ops/s
Iteration   5: 2150201.410 ops/s
Iteration   6: 2130455.016 ops/s
Iteration   7: 2196125.072 ops/s
Iteration   8: 2128215.925 ops/s
Iteration   9: 2125112.344 ops/s
Iteration  10: 2124145.085 ops/s
Iteration  11: 2118599.736 ops/s
Iteration  12: 2085460.873 ops/s
Iteration  13: 2117258.365 ops/s
Iteration  14: 2211101.892 ops/s
Iteration  15: 2200446.569 ops/s
Iteration  16: 2184247.531 ops/s
Iteration  17: 2096652.192 ops/s
Iteration  18: 2104032.192 ops/s
Iteration  19: 2194165.839 ops/s
Iteration  20: 2169950.047 ops/s
Iteration  21: 2204148.354 ops/s
Iteration  22: 2175807.963 ops/s
Iteration  23: 2191813.532 ops/s
Iteration  24: 2210792.917 ops/s
Iteration  25: 2143185.135 ops/s
Iteration  26: 2065128.113 ops/s
Iteration  27: 2121687.624 ops/s
Iteration  28: 2190574.074 ops/s
Iteration  29: 2134540.536 ops/s
Iteration  30: 2129116.207 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectIntWithTarget":
  2149269.562 ±(99.9%) 29349.252 ops/s [Average]
  (min, avg, max) = (2065128.113, 2149269.562, 2230208.268), stdev = 43928.582
  CI (99.9%): [2119920.310, 2178618.813] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  2149269.562 ± 29349.252  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 744250.262 ops/s
# Warmup Iteration   2: 1997343.927 ops/s
# Warmup Iteration   3: 1906470.998 ops/s
# Warmup Iteration   4: 1816431.157 ops/s
# Warmup Iteration   5: 2051039.469 ops/s
# Warmup Iteration   6: 1961849.749 ops/s
# Warmup Iteration   7: 2027476.500 ops/s
# Warmup Iteration   8: 2056066.524 ops/s
# Warmup Iteration   9: 2004604.825 ops/s
# Warmup Iteration  10: 2051066.321 ops/s
# Warmup Iteration  11: 1972868.989 ops/s
# Warmup Iteration  12: 2026273.109 ops/s
# Warmup Iteration  13: 2065852.614 ops/s
# Warmup Iteration  14: 2040857.010 ops/s
# Warmup Iteration  15: 2012210.140 ops/s
# Warmup Iteration  16: 1988797.409 ops/s
# Warmup Iteration  17: 2056203.940 ops/s
# Warmup Iteration  18: 1977755.478 ops/s
# Warmup Iteration  19: 1996524.511 ops/s
# Warmup Iteration  20: 2033705.086 ops/s
# Warmup Iteration  21: 2015426.791 ops/s
# Warmup Iteration  22: 2001813.990 ops/s
# Warmup Iteration  23: 2034023.273 ops/s
# Warmup Iteration  24: 1989050.637 ops/s
# Warmup Iteration  25: 2003120.977 ops/s
# Warmup Iteration  26: 1998161.154 ops/s
# Warmup Iteration  27: 1984335.375 ops/s
# Warmup Iteration  28: 2015686.067 ops/s
# Warmup Iteration  29: 1991590.091 ops/s
# Warmup Iteration  30: 1990723.986 ops/s
Iteration   1: 1918496.993 ops/s
Iteration   2: 1966332.626 ops/s
Iteration   3: 1986048.620 ops/s
Iteration   4: 1943815.737 ops/s
Iteration   5: 1966978.305 ops/s
Iteration   6: 2024781.955 ops/s
Iteration   7: 1959910.836 ops/s
Iteration   8: 2073425.389 ops/s
Iteration   9: 2143113.810 ops/s
Iteration  10: 2147486.146 ops/s
Iteration  11: 2006007.129 ops/s
Iteration  12: 1963044.945 ops/s
Iteration  13: 1970835.877 ops/s
Iteration  14: 1990691.181 ops/s
Iteration  15: 2021125.049 ops/s
Iteration  16: 2051173.031 ops/s
Iteration  17: 1949322.913 ops/s
Iteration  18: 2024489.804 ops/s
Iteration  19: 2040773.039 ops/s
Iteration  20: 1977847.895 ops/s
Iteration  21: 2024734.714 ops/s
Iteration  22: 2085961.939 ops/s
Iteration  23: 2017887.035 ops/s
Iteration  24: 2079659.560 ops/s
Iteration  25: 1972035.556 ops/s
Iteration  26: 2070437.940 ops/s
Iteration  27: 1937247.029 ops/s
Iteration  28: 1958353.947 ops/s
Iteration  29: 1983718.939 ops/s
Iteration  30: 2010178.099 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectLong":
  2008863.868 ±(99.9%) 38616.769 ops/s [Average]
  (min, avg, max) = (1918496.993, 2008863.868, 2147486.146), stdev = 57799.766
  CI (99.9%): [1970247.099, 2047480.637] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectLong  thrpt   30  2008863.868 ± 38616.769  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 716063.432 ops/s
# Warmup Iteration   2: 1927498.764 ops/s
# Warmup Iteration   3: 1950634.345 ops/s
# Warmup Iteration   4: 1656068.121 ops/s
# Warmup Iteration   5: 1976199.432 ops/s
# Warmup Iteration   6: 2001526.899 ops/s
# Warmup Iteration   7: 1977021.694 ops/s
# Warmup Iteration   8: 2004734.431 ops/s
# Warmup Iteration   9: 1964724.069 ops/s
# Warmup Iteration  10: 1969944.060 ops/s
# Warmup Iteration  11: 1967344.330 ops/s
# Warmup Iteration  12: 1957181.787 ops/s
# Warmup Iteration  13: 2010096.109 ops/s
# Warmup Iteration  14: 1960511.565 ops/s
# Warmup Iteration  15: 1982690.542 ops/s
# Warmup Iteration  16: 1954210.514 ops/s
# Warmup Iteration  17: 1983220.464 ops/s
# Warmup Iteration  18: 1970607.897 ops/s
# Warmup Iteration  19: 1961358.808 ops/s
# Warmup Iteration  20: 1957559.034 ops/s
# Warmup Iteration  21: 1960883.264 ops/s
# Warmup Iteration  22: 2045490.734 ops/s
# Warmup Iteration  23: 1958369.025 ops/s
# Warmup Iteration  24: 1976189.654 ops/s
# Warmup Iteration  25: 1966867.600 ops/s
# Warmup Iteration  26: 1955342.464 ops/s
# Warmup Iteration  27: 1966023.611 ops/s
# Warmup Iteration  28: 2002036.032 ops/s
# Warmup Iteration  29: 2106026.480 ops/s
# Warmup Iteration  30: 2003190.785 ops/s
Iteration   1: 2069791.958 ops/s
Iteration   2: 1999516.885 ops/s
Iteration   3: 1993499.388 ops/s
Iteration   4: 1942415.084 ops/s
Iteration   5: 1955828.106 ops/s
Iteration   6: 2007451.050 ops/s
Iteration   7: 1982840.297 ops/s
Iteration   8: 2008456.124 ops/s
Iteration   9: 2143496.273 ops/s
Iteration  10: 2131974.458 ops/s
Iteration  11: 1964694.246 ops/s
Iteration  12: 1956853.143 ops/s
Iteration  13: 2004816.284 ops/s
Iteration  14: 1975028.072 ops/s
Iteration  15: 1981733.174 ops/s
Iteration  16: 1959946.623 ops/s
Iteration  17: 1947026.525 ops/s
Iteration  18: 1986171.132 ops/s
Iteration  19: 2035650.103 ops/s
Iteration  20: 1953077.679 ops/s
Iteration  21: 1963125.745 ops/s
Iteration  22: 2034391.168 ops/s
Iteration  23: 2076811.562 ops/s
Iteration  24: 1957053.344 ops/s
Iteration  25: 1988329.745 ops/s
Iteration  26: 2072436.817 ops/s
Iteration  27: 1968288.809 ops/s
Iteration  28: 1971072.188 ops/s
Iteration  29: 2003818.858 ops/s
Iteration  30: 1975280.259 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectLongWithTarget":
  2000362.503 ±(99.9%) 34850.637 ops/s [Average]
  (min, avg, max) = (1942415.084, 2000362.503, 2143496.273), stdev = 52162.797
  CI (99.9%): [1965511.866, 2035213.140] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  2000362.503 ± 34850.637  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 574616.179 ops/s
# Warmup Iteration   2: 1391396.084 ops/s
# Warmup Iteration   3: 1342494.039 ops/s
# Warmup Iteration   4: 1079132.352 ops/s
# Warmup Iteration   5: 1345058.505 ops/s
# Warmup Iteration   6: 1342624.655 ops/s
# Warmup Iteration   7: 1388198.971 ops/s
# Warmup Iteration   8: 1441395.789 ops/s
# Warmup Iteration   9: 1420490.550 ops/s
# Warmup Iteration  10: 1376146.085 ops/s
# Warmup Iteration  11: 1326683.395 ops/s
# Warmup Iteration  12: 1293635.156 ops/s
# Warmup Iteration  13: 1365747.808 ops/s
# Warmup Iteration  14: 1332664.999 ops/s
# Warmup Iteration  15: 1326489.935 ops/s
# Warmup Iteration  16: 1310005.106 ops/s
# Warmup Iteration  17: 1320522.251 ops/s
# Warmup Iteration  18: 1359617.505 ops/s
# Warmup Iteration  19: 1337460.115 ops/s
# Warmup Iteration  20: 1346718.851 ops/s
# Warmup Iteration  21: 1310065.124 ops/s
# Warmup Iteration  22: 1318584.008 ops/s
# Warmup Iteration  23: 1286936.763 ops/s
# Warmup Iteration  24: 1298670.626 ops/s
# Warmup Iteration  25: 1299804.174 ops/s
# Warmup Iteration  26: 1314742.918 ops/s
# Warmup Iteration  27: 1286663.359 ops/s
# Warmup Iteration  28: 1310214.094 ops/s
# Warmup Iteration  29: 1334755.692 ops/s
# Warmup Iteration  30: 1315480.148 ops/s
Iteration   1: 1301802.180 ops/s
Iteration   2: 1338298.602 ops/s
Iteration   3: 1302092.004 ops/s
Iteration   4: 1313719.503 ops/s
Iteration   5: 1377396.739 ops/s
Iteration   6: 1306479.537 ops/s
Iteration   7: 1361101.471 ops/s
Iteration   8: 1305367.699 ops/s
Iteration   9: 1298813.404 ops/s
Iteration  10: 1321631.641 ops/s
Iteration  11: 1272162.197 ops/s
Iteration  12: 1300086.427 ops/s
Iteration  13: 1297731.262 ops/s
Iteration  14: 1315976.162 ops/s
Iteration  15: 1346225.465 ops/s
Iteration  16: 1328813.364 ops/s
Iteration  17: 1302064.370 ops/s
Iteration  18: 1336946.740 ops/s
Iteration  19: 1298579.403 ops/s
Iteration  20: 1328210.049 ops/s
Iteration  21: 1310242.130 ops/s
Iteration  22: 1272849.855 ops/s
Iteration  23: 1393700.272 ops/s
Iteration  24: 1328107.793 ops/s
Iteration  25: 1315580.730 ops/s
Iteration  26: 1309446.969 ops/s
Iteration  27: 1311026.149 ops/s
Iteration  28: 1333953.036 ops/s
Iteration  29: 1309719.623 ops/s
Iteration  30: 1319961.103 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectMap":
  1318602.863 ±(99.9%) 17643.934 ops/s [Average]
  (min, avg, max) = (1272162.197, 1318602.863, 1393700.272), stdev = 26408.612
  CI (99.9%): [1300958.929, 1336246.796] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectMap  thrpt   30  1318602.863 ± 17643.934  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 789530.221 ops/s
# Warmup Iteration   2: 2224936.788 ops/s
# Warmup Iteration   3: 2197682.757 ops/s
# Warmup Iteration   4: 1785475.277 ops/s
# Warmup Iteration   5: 2221069.773 ops/s
# Warmup Iteration   6: 2230479.733 ops/s
# Warmup Iteration   7: 2269611.467 ops/s
# Warmup Iteration   8: 2314445.091 ops/s
# Warmup Iteration   9: 2221499.107 ops/s
# Warmup Iteration  10: 2162578.356 ops/s
# Warmup Iteration  11: 2232245.523 ops/s
# Warmup Iteration  12: 2228872.978 ops/s
# Warmup Iteration  13: 2267873.156 ops/s
# Warmup Iteration  14: 2282895.391 ops/s
# Warmup Iteration  15: 2299742.366 ops/s
# Warmup Iteration  16: 2174949.433 ops/s
# Warmup Iteration  17: 2241157.916 ops/s
# Warmup Iteration  18: 2245638.711 ops/s
# Warmup Iteration  19: 2223111.678 ops/s
# Warmup Iteration  20: 2184394.847 ops/s
# Warmup Iteration  21: 2219188.503 ops/s
# Warmup Iteration  22: 2207905.431 ops/s
# Warmup Iteration  23: 2300933.143 ops/s
# Warmup Iteration  24: 2199160.146 ops/s
# Warmup Iteration  25: 2160061.609 ops/s
# Warmup Iteration  26: 2169227.071 ops/s
# Warmup Iteration  27: 2178588.954 ops/s
# Warmup Iteration  28: 2207426.475 ops/s
# Warmup Iteration  29: 2209157.618 ops/s
# Warmup Iteration  30: 2176972.354 ops/s
Iteration   1: 2200100.052 ops/s
Iteration   2: 2205628.817 ops/s
Iteration   3: 2253277.620 ops/s
Iteration   4: 2166278.461 ops/s
Iteration   5: 2196796.348 ops/s
Iteration   6: 2230721.251 ops/s
Iteration   7: 2224360.202 ops/s
Iteration   8: 2275205.461 ops/s
Iteration   9: 2228281.913 ops/s
Iteration  10: 2220015.691 ops/s
Iteration  11: 2202088.140 ops/s
Iteration  12: 2296295.706 ops/s
Iteration  13: 2199706.498 ops/s
Iteration  14: 2182649.719 ops/s
Iteration  15: 2213726.019 ops/s
Iteration  16: 2225893.258 ops/s
Iteration  17: 2231341.795 ops/s
Iteration  18: 2219664.217 ops/s
Iteration  19: 2253762.892 ops/s
Iteration  20: 2167080.144 ops/s
Iteration  21: 2195979.028 ops/s
Iteration  22: 2163430.190 ops/s
Iteration  23: 2225935.872 ops/s
Iteration  24: 2193240.450 ops/s
Iteration  25: 2213946.362 ops/s
Iteration  26: 2214722.256 ops/s
Iteration  27: 2320958.667 ops/s
Iteration  28: 2213301.608 ops/s
Iteration  29: 2292506.166 ops/s
Iteration  30: 2196535.784 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectShort":
  2220781.020 ±(99.9%) 25150.873 ops/s [Average]
  (min, avg, max) = (2163430.190, 2220781.020, 2320958.667), stdev = 37644.646
  CI (99.9%): [2195630.146, 2245931.893] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectShort  thrpt   30  2220781.020 ± 25150.873  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 817044.229 ops/s
# Warmup Iteration   2: 2196570.454 ops/s
# Warmup Iteration   3: 2160655.236 ops/s
# Warmup Iteration   4: 1799086.595 ops/s
# Warmup Iteration   5: 2185588.766 ops/s
# Warmup Iteration   6: 2252262.929 ops/s
# Warmup Iteration   7: 2166780.823 ops/s
# Warmup Iteration   8: 2161651.069 ops/s
# Warmup Iteration   9: 2167604.306 ops/s
# Warmup Iteration  10: 2169913.287 ops/s
# Warmup Iteration  11: 2200638.765 ops/s
# Warmup Iteration  12: 2165776.445 ops/s
# Warmup Iteration  13: 2239891.364 ops/s
# Warmup Iteration  14: 2182985.723 ops/s
# Warmup Iteration  15: 2150428.431 ops/s
# Warmup Iteration  16: 2197169.064 ops/s
# Warmup Iteration  17: 2243980.400 ops/s
# Warmup Iteration  18: 2219640.170 ops/s
# Warmup Iteration  19: 2154054.859 ops/s
# Warmup Iteration  20: 2227079.185 ops/s
# Warmup Iteration  21: 2178641.827 ops/s
# Warmup Iteration  22: 2162845.702 ops/s
# Warmup Iteration  23: 2167492.163 ops/s
# Warmup Iteration  24: 2210689.702 ops/s
# Warmup Iteration  25: 2167425.078 ops/s
# Warmup Iteration  26: 2169886.613 ops/s
# Warmup Iteration  27: 2189042.339 ops/s
# Warmup Iteration  28: 2227256.684 ops/s
# Warmup Iteration  29: 2188940.828 ops/s
# Warmup Iteration  30: 2229253.772 ops/s
Iteration   1: 2175414.264 ops/s
Iteration   2: 2174163.379 ops/s
Iteration   3: 2166429.812 ops/s
Iteration   4: 2153028.571 ops/s
Iteration   5: 2249192.638 ops/s
Iteration   6: 2292702.001 ops/s
Iteration   7: 2277795.134 ops/s
Iteration   8: 2158211.637 ops/s
Iteration   9: 2163503.342 ops/s
Iteration  10: 2217340.515 ops/s
Iteration  11: 2156215.738 ops/s
Iteration  12: 2282055.966 ops/s
Iteration  13: 2149324.956 ops/s
Iteration  14: 2156517.108 ops/s
Iteration  15: 2192986.471 ops/s
Iteration  16: 2249381.353 ops/s
Iteration  17: 2185682.414 ops/s
Iteration  18: 2144495.389 ops/s
Iteration  19: 2169324.971 ops/s
Iteration  20: 2199056.193 ops/s
Iteration  21: 2158164.426 ops/s
Iteration  22: 2134730.126 ops/s
Iteration  23: 2246829.702 ops/s
Iteration  24: 2183853.137 ops/s
Iteration  25: 2228482.811 ops/s
Iteration  26: 2189453.602 ops/s
Iteration  27: 2173674.185 ops/s
Iteration  28: 2171964.944 ops/s
Iteration  29: 2234780.535 ops/s
Iteration  30: 2314489.435 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectShortWithTarget":
  2198308.158 ±(99.9%) 32817.934 ops/s [Average]
  (min, avg, max) = (2134730.126, 2198308.158, 2314489.435), stdev = 49120.343
  CI (99.9%): [2165490.224, 2231126.093] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  2198308.158 ± 32817.934  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 743067.597 ops/s
# Warmup Iteration   2: 1647095.231 ops/s
# Warmup Iteration   3: 1614437.487 ops/s
# Warmup Iteration   4: 1327191.001 ops/s
# Warmup Iteration   5: 1707997.655 ops/s
# Warmup Iteration   6: 1641456.574 ops/s
# Warmup Iteration   7: 1600589.998 ops/s
# Warmup Iteration   8: 1677458.044 ops/s
# Warmup Iteration   9: 1627127.278 ops/s
# Warmup Iteration  10: 1625773.549 ops/s
# Warmup Iteration  11: 1624670.383 ops/s
# Warmup Iteration  12: 1625569.911 ops/s
# Warmup Iteration  13: 1641155.370 ops/s
# Warmup Iteration  14: 1677888.414 ops/s
# Warmup Iteration  15: 1640643.212 ops/s
# Warmup Iteration  16: 1630883.193 ops/s
# Warmup Iteration  17: 1638224.222 ops/s
# Warmup Iteration  18: 1631724.736 ops/s
# Warmup Iteration  19: 1594299.810 ops/s
# Warmup Iteration  20: 1623077.281 ops/s
# Warmup Iteration  21: 1603989.295 ops/s
# Warmup Iteration  22: 1611588.257 ops/s
# Warmup Iteration  23: 1619045.242 ops/s
# Warmup Iteration  24: 1679284.259 ops/s
# Warmup Iteration  25: 1648950.555 ops/s
# Warmup Iteration  26: 1634671.637 ops/s
# Warmup Iteration  27: 1636033.786 ops/s
# Warmup Iteration  28: 1636559.676 ops/s
# Warmup Iteration  29: 1671418.182 ops/s
# Warmup Iteration  30: 1677141.132 ops/s
Iteration   1: 1670494.342 ops/s
Iteration   2: 1601702.642 ops/s
Iteration   3: 1611654.532 ops/s
Iteration   4: 1597470.550 ops/s
Iteration   5: 1596916.331 ops/s
Iteration   6: 1627924.782 ops/s
Iteration   7: 1637468.241 ops/s
Iteration   8: 1602489.170 ops/s
Iteration   9: 1654272.274 ops/s
Iteration  10: 1613652.133 ops/s
Iteration  11: 1615525.440 ops/s
Iteration  12: 1674885.221 ops/s
Iteration  13: 1630111.908 ops/s
Iteration  14: 1734252.510 ops/s
Iteration  15: 1611365.655 ops/s
Iteration  16: 1696986.412 ops/s
Iteration  17: 1645236.856 ops/s
Iteration  18: 1604822.111 ops/s
Iteration  19: 1630027.837 ops/s
Iteration  20: 1608283.073 ops/s
Iteration  21: 1612802.683 ops/s
Iteration  22: 1643737.192 ops/s
Iteration  23: 1627934.589 ops/s
Iteration  24: 1651578.902 ops/s
Iteration  25: 1637724.339 ops/s
Iteration  26: 1680630.398 ops/s
Iteration  27: 1678423.461 ops/s
Iteration  28: 1650167.622 ops/s
Iteration  29: 1676760.118 ops/s
Iteration  30: 1612477.536 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectValues":
  1637925.962 ±(99.9%) 22471.260 ops/s [Average]
  (min, avg, max) = (1596916.331, 1637925.962, 1734252.510), stdev = 33633.927
  CI (99.9%): [1615454.702, 1660397.223] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectValues  thrpt   30  1637925.962 ± 22471.260  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 792933.615 ops/s
# Warmup Iteration   2: 1793374.426 ops/s
# Warmup Iteration   3: 1904310.715 ops/s
# Warmup Iteration   4: 1882441.466 ops/s
# Warmup Iteration   5: 1553692.345 ops/s
# Warmup Iteration   6: 1893123.570 ops/s
# Warmup Iteration   7: 1890284.315 ops/s
# Warmup Iteration   8: 1895332.338 ops/s
# Warmup Iteration   9: 1936260.634 ops/s
# Warmup Iteration  10: 2053727.547 ops/s
# Warmup Iteration  11: 1956362.378 ops/s
# Warmup Iteration  12: 1938409.150 ops/s
# Warmup Iteration  13: 1940912.938 ops/s
# Warmup Iteration  14: 1981573.748 ops/s
# Warmup Iteration  15: 2067725.959 ops/s
# Warmup Iteration  16: 2004516.125 ops/s
# Warmup Iteration  17: 1940495.718 ops/s
# Warmup Iteration  18: 1930652.149 ops/s
# Warmup Iteration  19: 1974622.285 ops/s
# Warmup Iteration  20: 1910962.202 ops/s
# Warmup Iteration  21: 1921481.202 ops/s
# Warmup Iteration  22: 1934150.831 ops/s
# Warmup Iteration  23: 1990563.299 ops/s
# Warmup Iteration  24: 1945215.352 ops/s
# Warmup Iteration  25: 1929416.706 ops/s
# Warmup Iteration  26: 1917711.846 ops/s
# Warmup Iteration  27: 2025528.033 ops/s
# Warmup Iteration  28: 1991237.704 ops/s
# Warmup Iteration  29: 1906983.324 ops/s
# Warmup Iteration  30: 1896080.029 ops/s
Iteration   1: 1920386.453 ops/s
Iteration   2: 2052122.636 ops/s
Iteration   3: 2008170.488 ops/s
Iteration   4: 1950171.223 ops/s
Iteration   5: 1937551.079 ops/s
Iteration   6: 1947262.956 ops/s
Iteration   7: 1886941.299 ops/s
Iteration   8: 1876791.111 ops/s
Iteration   9: 1932455.714 ops/s
Iteration  10: 1877439.601 ops/s
Iteration  11: 1913290.267 ops/s
Iteration  12: 1871464.259 ops/s
Iteration  13: 1878877.200 ops/s
Iteration  14: 1935697.806 ops/s
Iteration  15: 1924122.320 ops/s
Iteration  16: 1936304.828 ops/s
Iteration  17: 2082433.069 ops/s
Iteration  18: 2034844.024 ops/s
Iteration  19: 1968733.294 ops/s
Iteration  20: 1938929.804 ops/s
Iteration  21: 1897254.002 ops/s
Iteration  22: 1869316.345 ops/s
Iteration  23: 1925152.916 ops/s
Iteration  24: 1943831.100 ops/s
Iteration  25: 1884446.015 ops/s
Iteration  26: 1933749.058 ops/s
Iteration  27: 1935628.682 ops/s
Iteration  28: 2034436.586 ops/s
Iteration  29: 2070770.567 ops/s
Iteration  30: 2021466.794 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectWith":
  1946334.717 ±(99.9%) 41099.602 ops/s [Average]
  (min, avg, max) = (1869316.345, 1946334.717, 2082433.069), stdev = 61515.954
  CI (99.9%): [1905235.114, 1987434.319] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectWith  thrpt   30  1946334.717 ± 41099.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectWithToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectWithToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1466924.190 ops/s
# Warmup Iteration   2: 3135947.594 ops/s
# Warmup Iteration   3: 3007145.792 ops/s
# Warmup Iteration   4: 2732597.062 ops/s
# Warmup Iteration   5: 3173861.809 ops/s
# Warmup Iteration   6: 3242122.544 ops/s
# Warmup Iteration   7: 3174341.473 ops/s
# Warmup Iteration   8: 3164462.377 ops/s
# Warmup Iteration   9: 3164561.971 ops/s
# Warmup Iteration  10: 3197761.874 ops/s
# Warmup Iteration  11: 3217011.196 ops/s
# Warmup Iteration  12: 3256579.821 ops/s
# Warmup Iteration  13: 3183161.290 ops/s
# Warmup Iteration  14: 3180980.391 ops/s
# Warmup Iteration  15: 3208058.604 ops/s
# Warmup Iteration  16: 3208389.096 ops/s
# Warmup Iteration  17: 3107010.176 ops/s
# Warmup Iteration  18: 3311765.417 ops/s
# Warmup Iteration  19: 3203913.816 ops/s
# Warmup Iteration  20: 3158000.965 ops/s
# Warmup Iteration  21: 3322292.031 ops/s
# Warmup Iteration  22: 3151858.641 ops/s
# Warmup Iteration  23: 3168202.580 ops/s
# Warmup Iteration  24: 3120452.134 ops/s
# Warmup Iteration  25: 3204014.936 ops/s
# Warmup Iteration  26: 3247671.833 ops/s
# Warmup Iteration  27: 3159525.885 ops/s
# Warmup Iteration  28: 3202570.750 ops/s
# Warmup Iteration  29: 3247564.766 ops/s
# Warmup Iteration  30: 3200288.152 ops/s
Iteration   1: 3128631.612 ops/s
Iteration   2: 3235778.281 ops/s
Iteration   3: 3306219.132 ops/s
Iteration   4: 3173742.347 ops/s
Iteration   5: 3175805.825 ops/s
Iteration   6: 3202190.360 ops/s
Iteration   7: 3233077.937 ops/s
Iteration   8: 3253458.262 ops/s
Iteration   9: 3185621.497 ops/s
Iteration  10: 3110372.399 ops/s
Iteration  11: 3149712.092 ops/s
Iteration  12: 3166997.095 ops/s
Iteration  13: 3152128.274 ops/s
Iteration  14: 3202254.561 ops/s
Iteration  15: 3185309.125 ops/s
Iteration  16: 3234874.345 ops/s
Iteration  17: 3265550.178 ops/s
Iteration  18: 3230422.284 ops/s
Iteration  19: 3181029.656 ops/s
Iteration  20: 3170071.954 ops/s
Iteration  21: 3193245.429 ops/s
Iteration  22: 3196148.547 ops/s
Iteration  23: 3196045.232 ops/s
Iteration  24: 3173704.332 ops/s
Iteration  25: 3141615.996 ops/s
Iteration  26: 3111422.203 ops/s
Iteration  27: 3096907.547 ops/s
Iteration  28: 3171210.725 ops/s
Iteration  29: 3183830.961 ops/s
Iteration  30: 3272028.169 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collectWithToTarget":
  3189313.545 ±(99.9%) 32931.111 ops/s [Average]
  (min, avg, max) = (3096907.547, 3189313.545, 3306219.132), stdev = 49289.740
  CI (99.9%): [3156382.434, 3222244.656] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collectWithToTarget  thrpt   30  3189313.545 ± 32931.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collect_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collect_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 504612.800 ops/s
# Warmup Iteration   2: 1173470.439 ops/s
# Warmup Iteration   3: 1309005.947 ops/s
# Warmup Iteration   4: 1124355.828 ops/s
# Warmup Iteration   5: 1280231.075 ops/s
# Warmup Iteration   6: 1240034.677 ops/s
# Warmup Iteration   7: 1286505.979 ops/s
# Warmup Iteration   8: 1235748.551 ops/s
# Warmup Iteration   9: 1238291.197 ops/s
# Warmup Iteration  10: 1233480.063 ops/s
# Warmup Iteration  11: 1234802.174 ops/s
# Warmup Iteration  12: 1233990.199 ops/s
# Warmup Iteration  13: 1262163.362 ops/s
# Warmup Iteration  14: 1249994.118 ops/s
# Warmup Iteration  15: 1326475.886 ops/s
# Warmup Iteration  16: 1342341.015 ops/s
# Warmup Iteration  17: 1247021.462 ops/s
# Warmup Iteration  18: 1230438.992 ops/s
# Warmup Iteration  19: 1248407.979 ops/s
# Warmup Iteration  20: 1292133.669 ops/s
# Warmup Iteration  21: 1274498.440 ops/s
# Warmup Iteration  22: 1246515.329 ops/s
# Warmup Iteration  23: 1218995.473 ops/s
# Warmup Iteration  24: 1233609.224 ops/s
# Warmup Iteration  25: 1292362.177 ops/s
# Warmup Iteration  26: 1297879.925 ops/s
# Warmup Iteration  27: 1237324.123 ops/s
# Warmup Iteration  28: 1234305.373 ops/s
# Warmup Iteration  29: 1217905.067 ops/s
# Warmup Iteration  30: 1309287.744 ops/s
Iteration   1: 1224001.879 ops/s
Iteration   2: 1276644.757 ops/s
Iteration   3: 1255374.955 ops/s
Iteration   4: 1267491.846 ops/s
Iteration   5: 1273145.638 ops/s
Iteration   6: 1261868.766 ops/s
Iteration   7: 1249615.029 ops/s
Iteration   8: 1249317.110 ops/s
Iteration   9: 1281911.174 ops/s
Iteration  10: 1248417.032 ops/s
Iteration  11: 1296503.553 ops/s
Iteration  12: 1235267.973 ops/s
Iteration  13: 1224446.371 ops/s
Iteration  14: 1268953.006 ops/s
Iteration  15: 1313668.174 ops/s
Iteration  16: 1315301.203 ops/s
Iteration  17: 1344424.585 ops/s
Iteration  18: 1342949.016 ops/s
Iteration  19: 1342891.008 ops/s
Iteration  20: 1259738.035 ops/s
Iteration  21: 1258676.619 ops/s
Iteration  22: 1233894.002 ops/s
Iteration  23: 1334435.787 ops/s
Iteration  24: 1332987.152 ops/s
Iteration  25: 1276073.796 ops/s
Iteration  26: 1229625.211 ops/s
Iteration  27: 1287521.290 ops/s
Iteration  28: 1231072.295 ops/s
Iteration  29: 1228067.616 ops/s
Iteration  30: 1227328.973 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_collect_value":
  1272387.128 ±(99.9%) 26194.873 ops/s [Average]
  (min, avg, max) = (1224001.879, 1272387.128, 1344424.585), stdev = 39207.256
  CI (99.9%): [1246192.255, 1298582.002] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_collect_value  thrpt   30  1272387.128 ± 26194.873  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3095902.550 ops/s
# Warmup Iteration   2: 6503212.076 ops/s
# Warmup Iteration   3: 5354455.062 ops/s
# Warmup Iteration   4: 6502518.522 ops/s
# Warmup Iteration   5: 6562668.574 ops/s
# Warmup Iteration   6: 6508058.089 ops/s
# Warmup Iteration   7: 6362711.668 ops/s
# Warmup Iteration   8: 6608486.365 ops/s
# Warmup Iteration   9: 6401830.497 ops/s
# Warmup Iteration  10: 6581768.360 ops/s
# Warmup Iteration  11: 6428485.757 ops/s
# Warmup Iteration  12: 6443526.492 ops/s
# Warmup Iteration  13: 6415742.908 ops/s
# Warmup Iteration  14: 6585999.025 ops/s
# Warmup Iteration  15: 6380355.495 ops/s
# Warmup Iteration  16: 6460087.686 ops/s
# Warmup Iteration  17: 6630471.491 ops/s
# Warmup Iteration  18: 6448754.767 ops/s
# Warmup Iteration  19: 6368096.621 ops/s
# Warmup Iteration  20: 6507701.249 ops/s
# Warmup Iteration  21: 6524976.702 ops/s
# Warmup Iteration  22: 6368932.935 ops/s
# Warmup Iteration  23: 6452970.770 ops/s
# Warmup Iteration  24: 6249334.293 ops/s
# Warmup Iteration  25: 6593786.896 ops/s
# Warmup Iteration  26: 6488914.426 ops/s
# Warmup Iteration  27: 6531526.762 ops/s
# Warmup Iteration  28: 6430646.000 ops/s
# Warmup Iteration  29: 6359235.345 ops/s
# Warmup Iteration  30: 6393880.682 ops/s
Iteration   1: 6435996.400 ops/s
Iteration   2: 6380136.407 ops/s
Iteration   3: 6305183.547 ops/s
Iteration   4: 6453088.387 ops/s
Iteration   5: 6484730.658 ops/s
Iteration   6: 6569347.992 ops/s
Iteration   7: 6310320.054 ops/s
Iteration   8: 6572788.880 ops/s
Iteration   9: 6632015.059 ops/s
Iteration  10: 6617779.198 ops/s
Iteration  11: 6441851.906 ops/s
Iteration  12: 6397372.945 ops/s
Iteration  13: 6400173.966 ops/s
Iteration  14: 6453452.754 ops/s
Iteration  15: 6285058.405 ops/s
Iteration  16: 6564962.543 ops/s
Iteration  17: 6376381.872 ops/s
Iteration  18: 6429633.752 ops/s
Iteration  19: 6428377.743 ops/s
Iteration  20: 6654206.881 ops/s
Iteration  21: 6602332.409 ops/s
Iteration  22: 6321602.031 ops/s
Iteration  23: 6377135.582 ops/s
Iteration  24: 6641946.956 ops/s
Iteration  25: 6415083.071 ops/s
Iteration  26: 6654386.079 ops/s
Iteration  27: 6560878.292 ops/s
Iteration  28: 6930584.875 ops/s
Iteration  29: 6396076.741 ops/s
Iteration  30: 6362044.855 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_contains":
  6481831.008 ±(99.9%) 94442.308 ops/s [Average]
  (min, avg, max) = (6285058.405, 6481831.008, 6930584.875), stdev = 141356.811
  CI (99.9%): [6387388.700, 6576273.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_contains  thrpt   30  6481831.008 ± 94442.308  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 497631.475 ops/s
# Warmup Iteration   2: 582697.362 ops/s
# Warmup Iteration   3: 786015.119 ops/s
# Warmup Iteration   4: 765478.963 ops/s
# Warmup Iteration   5: 813699.824 ops/s
# Warmup Iteration   6: 787766.947 ops/s
# Warmup Iteration   7: 794657.249 ops/s
# Warmup Iteration   8: 776856.050 ops/s
# Warmup Iteration   9: 785240.741 ops/s
# Warmup Iteration  10: 644856.078 ops/s
# Warmup Iteration  11: 781796.320 ops/s
# Warmup Iteration  12: 774095.552 ops/s
# Warmup Iteration  13: 772742.624 ops/s
# Warmup Iteration  14: 776611.999 ops/s
# Warmup Iteration  15: 782907.739 ops/s
# Warmup Iteration  16: 781122.805 ops/s
# Warmup Iteration  17: 790302.123 ops/s
# Warmup Iteration  18: 771741.553 ops/s
# Warmup Iteration  19: 774568.829 ops/s
# Warmup Iteration  20: 782277.900 ops/s
# Warmup Iteration  21: 780610.044 ops/s
# Warmup Iteration  22: 782576.813 ops/s
# Warmup Iteration  23: 776837.399 ops/s
# Warmup Iteration  24: 813463.659 ops/s
# Warmup Iteration  25: 818798.883 ops/s
# Warmup Iteration  26: 805057.925 ops/s
# Warmup Iteration  27: 785553.380 ops/s
# Warmup Iteration  28: 780335.920 ops/s
# Warmup Iteration  29: 781611.588 ops/s
# Warmup Iteration  30: 809330.794 ops/s
Iteration   1: 816416.785 ops/s
Iteration   2: 790709.446 ops/s
Iteration   3: 773581.193 ops/s
Iteration   4: 779869.814 ops/s
Iteration   5: 803185.484 ops/s
Iteration   6: 777880.466 ops/s
Iteration   7: 766008.857 ops/s
Iteration   8: 782380.186 ops/s
Iteration   9: 778400.796 ops/s
Iteration  10: 787839.459 ops/s
Iteration  11: 779049.380 ops/s
Iteration  12: 782236.384 ops/s
Iteration  13: 774906.620 ops/s
Iteration  14: 778504.046 ops/s
Iteration  15: 794819.528 ops/s
Iteration  16: 790149.085 ops/s
Iteration  17: 774228.692 ops/s
Iteration  18: 786487.709 ops/s
Iteration  19: 802770.165 ops/s
Iteration  20: 777922.101 ops/s
Iteration  21: 774995.892 ops/s
Iteration  22: 778476.696 ops/s
Iteration  23: 778725.155 ops/s
Iteration  24: 789465.344 ops/s
Iteration  25: 783345.134 ops/s
Iteration  26: 772931.474 ops/s
Iteration  27: 755062.189 ops/s
Iteration  28: 781295.462 ops/s
Iteration  29: 781520.986 ops/s
Iteration  30: 767815.308 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAll":
  782032.661 ±(99.9%) 7919.441 ops/s [Average]
  (min, avg, max) = (755062.189, 782032.661, 816416.785), stdev = 11853.448
  CI (99.9%): [774113.220, 789952.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_containsAll  thrpt   30  782032.661 ± 7919.441  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAllArguments$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAllArguments

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 871875.224 ops/s
# Warmup Iteration   2: 1252456.344 ops/s
# Warmup Iteration   3: 1462856.954 ops/s
# Warmup Iteration   4: 1483235.213 ops/s
# Warmup Iteration   5: 1474776.340 ops/s
# Warmup Iteration   6: 1481845.109 ops/s
# Warmup Iteration   7: 1251493.502 ops/s
# Warmup Iteration   8: 1481567.891 ops/s
# Warmup Iteration   9: 1486783.174 ops/s
# Warmup Iteration  10: 1545928.733 ops/s
# Warmup Iteration  11: 1490672.006 ops/s
# Warmup Iteration  12: 1511967.956 ops/s
# Warmup Iteration  13: 1519688.082 ops/s
# Warmup Iteration  14: 1457128.255 ops/s
# Warmup Iteration  15: 1489084.087 ops/s
# Warmup Iteration  16: 1484961.196 ops/s
# Warmup Iteration  17: 1499042.336 ops/s
# Warmup Iteration  18: 1455284.102 ops/s
# Warmup Iteration  19: 1463909.288 ops/s
# Warmup Iteration  20: 1470751.724 ops/s
# Warmup Iteration  21: 1468499.540 ops/s
# Warmup Iteration  22: 1460874.487 ops/s
# Warmup Iteration  23: 1468388.192 ops/s
# Warmup Iteration  24: 1484450.429 ops/s
# Warmup Iteration  25: 1485931.959 ops/s
# Warmup Iteration  26: 1484938.984 ops/s
# Warmup Iteration  27: 1469790.775 ops/s
# Warmup Iteration  28: 1481525.691 ops/s
# Warmup Iteration  29: 1508698.506 ops/s
# Warmup Iteration  30: 1514918.675 ops/s
Iteration   1: 1461492.109 ops/s
Iteration   2: 1491067.764 ops/s
Iteration   3: 1494139.456 ops/s
Iteration   4: 1479343.866 ops/s
Iteration   5: 1503544.250 ops/s
Iteration   6: 1454937.534 ops/s
Iteration   7: 1491274.054 ops/s
Iteration   8: 1534149.638 ops/s
Iteration   9: 1550445.141 ops/s
Iteration  10: 1548187.145 ops/s
Iteration  11: 1540689.146 ops/s
Iteration  12: 1544646.388 ops/s
Iteration  13: 1510018.231 ops/s
Iteration  14: 1535306.273 ops/s
Iteration  15: 1518489.076 ops/s
Iteration  16: 1534112.290 ops/s
Iteration  17: 1530406.790 ops/s
Iteration  18: 1573470.874 ops/s
Iteration  19: 1538152.866 ops/s
Iteration  20: 1538211.349 ops/s
Iteration  21: 1546277.665 ops/s
Iteration  22: 1541880.971 ops/s
Iteration  23: 1525942.517 ops/s
Iteration  24: 1542575.200 ops/s
Iteration  25: 1482616.729 ops/s
Iteration  26: 1496294.978 ops/s
Iteration  27: 1462589.388 ops/s
Iteration  28: 1476546.026 ops/s
Iteration  29: 1540204.848 ops/s
Iteration  30: 1546112.490 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAllArguments":
  1517770.835 ±(99.9%) 21065.954 ops/s [Average]
  (min, avg, max) = (1454937.534, 1517770.835, 1573470.874), stdev = 31530.531
  CI (99.9%): [1496704.881, 1538836.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_containsAllArguments  thrpt   30  1517770.835 ± 21065.954  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 860054.963 ops/s
# Warmup Iteration   2: 1301674.126 ops/s
# Warmup Iteration   3: 1495407.622 ops/s
# Warmup Iteration   4: 1493315.812 ops/s
# Warmup Iteration   5: 1529237.817 ops/s
# Warmup Iteration   6: 1516949.881 ops/s
# Warmup Iteration   7: 1239795.404 ops/s
# Warmup Iteration   8: 1513922.656 ops/s
# Warmup Iteration   9: 1536191.482 ops/s
# Warmup Iteration  10: 1503511.728 ops/s
# Warmup Iteration  11: 1565329.132 ops/s
# Warmup Iteration  12: 1522474.540 ops/s
# Warmup Iteration  13: 1507347.145 ops/s
# Warmup Iteration  14: 1539182.447 ops/s
# Warmup Iteration  15: 1503924.294 ops/s
# Warmup Iteration  16: 1524934.394 ops/s
# Warmup Iteration  17: 1528007.933 ops/s
# Warmup Iteration  18: 1493329.395 ops/s
# Warmup Iteration  19: 1516178.824 ops/s
# Warmup Iteration  20: 1519260.429 ops/s
# Warmup Iteration  21: 1501152.593 ops/s
# Warmup Iteration  22: 1505113.295 ops/s
# Warmup Iteration  23: 1529458.880 ops/s
# Warmup Iteration  24: 1545503.966 ops/s
# Warmup Iteration  25: 1549819.707 ops/s
# Warmup Iteration  26: 1526807.419 ops/s
# Warmup Iteration  27: 1507195.912 ops/s
# Warmup Iteration  28: 1511359.855 ops/s
# Warmup Iteration  29: 1534706.268 ops/s
# Warmup Iteration  30: 1527503.541 ops/s
Iteration   1: 1581390.051 ops/s
Iteration   2: 1551725.336 ops/s
Iteration   3: 1508907.551 ops/s
Iteration   4: 1528909.781 ops/s
Iteration   5: 1565993.511 ops/s
Iteration   6: 1521214.822 ops/s
Iteration   7: 1542292.020 ops/s
Iteration   8: 1524853.945 ops/s
Iteration   9: 1525704.659 ops/s
Iteration  10: 1535608.322 ops/s
Iteration  11: 1512167.630 ops/s
Iteration  12: 1536149.680 ops/s
Iteration  13: 1501125.515 ops/s
Iteration  14: 1532787.263 ops/s
Iteration  15: 1515928.194 ops/s
Iteration  16: 1486999.755 ops/s
Iteration  17: 1574883.314 ops/s
Iteration  18: 1544991.878 ops/s
Iteration  19: 1512540.608 ops/s
Iteration  20: 1496747.515 ops/s
Iteration  21: 1501399.454 ops/s
Iteration  22: 1519101.408 ops/s
Iteration  23: 1509120.955 ops/s
Iteration  24: 1504997.809 ops/s
Iteration  25: 1557563.892 ops/s
Iteration  26: 1516103.369 ops/s
Iteration  27: 1548168.018 ops/s
Iteration  28: 1588419.159 ops/s
Iteration  29: 1560574.377 ops/s
Iteration  30: 1580222.145 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAllIterable":
  1532886.398 ±(99.9%) 18382.661 ops/s [Average]
  (min, avg, max) = (1486999.755, 1532886.398, 1588419.159), stdev = 27514.304
  CI (99.9%): [1514503.737, 1551269.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_containsAllIterable  thrpt   30  1532886.398 ± 18382.661  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 498655.659 ops/s
# Warmup Iteration   2: 631914.458 ops/s
# Warmup Iteration   3: 823660.031 ops/s
# Warmup Iteration   4: 803046.192 ops/s
# Warmup Iteration   5: 837514.616 ops/s
# Warmup Iteration   6: 828598.154 ops/s
# Warmup Iteration   7: 806224.937 ops/s
# Warmup Iteration   8: 749065.444 ops/s
# Warmup Iteration   9: 734813.934 ops/s
# Warmup Iteration  10: 815496.884 ops/s
# Warmup Iteration  11: 805186.471 ops/s
# Warmup Iteration  12: 831141.482 ops/s
# Warmup Iteration  13: 790492.749 ops/s
# Warmup Iteration  14: 811122.110 ops/s
# Warmup Iteration  15: 834508.942 ops/s
# Warmup Iteration  16: 840864.955 ops/s
# Warmup Iteration  17: 791793.118 ops/s
# Warmup Iteration  18: 789335.249 ops/s
# Warmup Iteration  19: 797923.080 ops/s
# Warmup Iteration  20: 806401.134 ops/s
# Warmup Iteration  21: 802099.781 ops/s
# Warmup Iteration  22: 805487.310 ops/s
# Warmup Iteration  23: 799439.623 ops/s
# Warmup Iteration  24: 802778.420 ops/s
# Warmup Iteration  25: 793739.436 ops/s
# Warmup Iteration  26: 805331.744 ops/s
# Warmup Iteration  27: 807429.752 ops/s
# Warmup Iteration  28: 801113.933 ops/s
# Warmup Iteration  29: 802674.603 ops/s
# Warmup Iteration  30: 828111.970 ops/s
Iteration   1: 811658.750 ops/s
Iteration   2: 856962.867 ops/s
Iteration   3: 809779.263 ops/s
Iteration   4: 793228.461 ops/s
Iteration   5: 835027.596 ops/s
Iteration   6: 806386.976 ops/s
Iteration   7: 800646.371 ops/s
Iteration   8: 781151.812 ops/s
Iteration   9: 810319.534 ops/s
Iteration  10: 784329.746 ops/s
Iteration  11: 791881.148 ops/s
Iteration  12: 807964.722 ops/s
Iteration  13: 794187.128 ops/s
Iteration  14: 808613.903 ops/s
Iteration  15: 799107.535 ops/s
Iteration  16: 790794.942 ops/s
Iteration  17: 802893.966 ops/s
Iteration  18: 804623.102 ops/s
Iteration  19: 805714.125 ops/s
Iteration  20: 793348.708 ops/s
Iteration  21: 810670.556 ops/s
Iteration  22: 798165.840 ops/s
Iteration  23: 798951.944 ops/s
Iteration  24: 790462.079 ops/s
Iteration  25: 796558.884 ops/s
Iteration  26: 788231.046 ops/s
Iteration  27: 803263.957 ops/s
Iteration  28: 793573.330 ops/s
Iteration  29: 798038.117 ops/s
Iteration  30: 808622.783 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAnyCollection":
  802505.306 ±(99.9%) 9791.464 ops/s [Average]
  (min, avg, max) = (781151.812, 802505.306, 856962.867), stdev = 14655.404
  CI (99.9%): [792713.842, 812296.770] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  802505.306 ± 9791.464  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 363465.126 ops/s
# Warmup Iteration   2: 398034.640 ops/s
# Warmup Iteration   3: 542722.977 ops/s
# Warmup Iteration   4: 583131.283 ops/s
# Warmup Iteration   5: 574731.481 ops/s
# Warmup Iteration   6: 547456.121 ops/s
# Warmup Iteration   7: 551220.519 ops/s
# Warmup Iteration   8: 560688.550 ops/s
# Warmup Iteration   9: 554706.404 ops/s
# Warmup Iteration  10: 569469.541 ops/s
# Warmup Iteration  11: 507702.434 ops/s
# Warmup Iteration  12: 493091.915 ops/s
# Warmup Iteration  13: 554920.171 ops/s
# Warmup Iteration  14: 562722.493 ops/s
# Warmup Iteration  15: 561736.809 ops/s
# Warmup Iteration  16: 578800.672 ops/s
# Warmup Iteration  17: 555349.980 ops/s
# Warmup Iteration  18: 555079.081 ops/s
# Warmup Iteration  19: 553593.303 ops/s
# Warmup Iteration  20: 560680.334 ops/s
# Warmup Iteration  21: 562118.549 ops/s
# Warmup Iteration  22: 560334.319 ops/s
# Warmup Iteration  23: 565027.239 ops/s
# Warmup Iteration  24: 564604.657 ops/s
# Warmup Iteration  25: 558293.135 ops/s
# Warmup Iteration  26: 564930.358 ops/s
# Warmup Iteration  27: 554224.433 ops/s
# Warmup Iteration  28: 562784.574 ops/s
# Warmup Iteration  29: 564682.415 ops/s
# Warmup Iteration  30: 569192.511 ops/s
Iteration   1: 572855.613 ops/s
Iteration   2: 579548.019 ops/s
Iteration   3: 586743.299 ops/s
Iteration   4: 586098.062 ops/s
Iteration   5: 561524.868 ops/s
Iteration   6: 578761.325 ops/s
Iteration   7: 583172.370 ops/s
Iteration   8: 590180.580 ops/s
Iteration   9: 589373.724 ops/s
Iteration  10: 587077.614 ops/s
Iteration  11: 584980.546 ops/s
Iteration  12: 583647.971 ops/s
Iteration  13: 573497.252 ops/s
Iteration  14: 557259.324 ops/s
Iteration  15: 566383.972 ops/s
Iteration  16: 562293.165 ops/s
Iteration  17: 560524.214 ops/s
Iteration  18: 569213.802 ops/s
Iteration  19: 558724.601 ops/s
Iteration  20: 548477.220 ops/s
Iteration  21: 552678.067 ops/s
Iteration  22: 551899.881 ops/s
Iteration  23: 564615.836 ops/s
Iteration  24: 557201.125 ops/s
Iteration  25: 551009.913 ops/s
Iteration  26: 553385.682 ops/s
Iteration  27: 563766.929 ops/s
Iteration  28: 576429.622 ops/s
Iteration  29: 585031.667 ops/s
Iteration  30: 559006.014 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsAnyIterable":
  569845.409 ±(99.9%) 8995.427 ops/s [Average]
  (min, avg, max) = (548477.220, 569845.409, 590180.580), stdev = 13463.932
  CI (99.9%): [560849.983, 578840.836] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  569845.409 ± 8995.427  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 469876.243 ops/s
# Warmup Iteration   2: 849973.469 ops/s
# Warmup Iteration   3: 919792.682 ops/s
# Warmup Iteration   4: 950964.411 ops/s
# Warmup Iteration   5: 803659.088 ops/s
# Warmup Iteration   6: 956715.109 ops/s
# Warmup Iteration   7: 942778.736 ops/s
# Warmup Iteration   8: 927107.238 ops/s
# Warmup Iteration   9: 922222.846 ops/s
# Warmup Iteration  10: 919169.685 ops/s
# Warmup Iteration  11: 927124.491 ops/s
# Warmup Iteration  12: 949976.075 ops/s
# Warmup Iteration  13: 962203.434 ops/s
# Warmup Iteration  14: 928498.158 ops/s
# Warmup Iteration  15: 975428.462 ops/s
# Warmup Iteration  16: 951555.115 ops/s
# Warmup Iteration  17: 922898.326 ops/s
# Warmup Iteration  18: 918296.226 ops/s
# Warmup Iteration  19: 921477.683 ops/s
# Warmup Iteration  20: 927364.123 ops/s
# Warmup Iteration  21: 916765.469 ops/s
# Warmup Iteration  22: 934693.822 ops/s
# Warmup Iteration  23: 922980.834 ops/s
# Warmup Iteration  24: 923622.447 ops/s
# Warmup Iteration  25: 923021.028 ops/s
# Warmup Iteration  26: 920797.066 ops/s
# Warmup Iteration  27: 929592.221 ops/s
# Warmup Iteration  28: 922876.670 ops/s
# Warmup Iteration  29: 917215.991 ops/s
# Warmup Iteration  30: 934202.883 ops/s
Iteration   1: 907852.858 ops/s
Iteration   2: 965332.278 ops/s
Iteration   3: 960082.650 ops/s
Iteration   4: 969381.310 ops/s
Iteration   5: 949537.810 ops/s
Iteration   6: 960627.484 ops/s
Iteration   7: 958913.639 ops/s
Iteration   8: 923120.060 ops/s
Iteration   9: 963979.147 ops/s
Iteration  10: 962831.680 ops/s
Iteration  11: 927049.885 ops/s
Iteration  12: 959560.966 ops/s
Iteration  13: 961112.554 ops/s
Iteration  14: 941719.669 ops/s
Iteration  15: 934259.482 ops/s
Iteration  16: 917099.964 ops/s
Iteration  17: 950998.295 ops/s
Iteration  18: 935898.196 ops/s
Iteration  19: 916649.651 ops/s
Iteration  20: 938811.221 ops/s
Iteration  21: 909782.094 ops/s
Iteration  22: 914325.157 ops/s
Iteration  23: 902196.160 ops/s
Iteration  24: 924251.836 ops/s
Iteration  25: 924398.437 ops/s
Iteration  26: 934305.791 ops/s
Iteration  27: 916818.412 ops/s
Iteration  28: 910972.592 ops/s
Iteration  29: 917016.821 ops/s
Iteration  30: 943578.499 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsKey":
  936748.820 ±(99.9%) 13908.159 ops/s [Average]
  (min, avg, max) = (902196.160, 936748.820, 969381.310), stdev = 20817.079
  CI (99.9%): [922840.661, 950656.979] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_containsKey  thrpt   30  936748.820 ± 13908.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 460779.800 ops/s
# Warmup Iteration   2: 585471.035 ops/s
# Warmup Iteration   3: 773958.826 ops/s
# Warmup Iteration   4: 765511.955 ops/s
# Warmup Iteration   5: 766199.057 ops/s
# Warmup Iteration   6: 794105.188 ops/s
# Warmup Iteration   7: 778488.755 ops/s
# Warmup Iteration   8: 773787.055 ops/s
# Warmup Iteration   9: 633748.096 ops/s
# Warmup Iteration  10: 777807.375 ops/s
# Warmup Iteration  11: 761505.932 ops/s
# Warmup Iteration  12: 763489.054 ops/s
# Warmup Iteration  13: 765858.459 ops/s
# Warmup Iteration  14: 766895.369 ops/s
# Warmup Iteration  15: 758754.005 ops/s
# Warmup Iteration  16: 757617.334 ops/s
# Warmup Iteration  17: 760881.769 ops/s
# Warmup Iteration  18: 768377.866 ops/s
# Warmup Iteration  19: 760982.491 ops/s
# Warmup Iteration  20: 760894.811 ops/s
# Warmup Iteration  21: 753628.742 ops/s
# Warmup Iteration  22: 763615.395 ops/s
# Warmup Iteration  23: 765042.572 ops/s
# Warmup Iteration  24: 753082.271 ops/s
# Warmup Iteration  25: 778992.514 ops/s
# Warmup Iteration  26: 755552.716 ops/s
# Warmup Iteration  27: 758175.981 ops/s
# Warmup Iteration  28: 765938.205 ops/s
# Warmup Iteration  29: 764376.096 ops/s
# Warmup Iteration  30: 765677.226 ops/s
Iteration   1: 773816.719 ops/s
Iteration   2: 763651.426 ops/s
Iteration   3: 761874.464 ops/s
Iteration   4: 757337.780 ops/s
Iteration   5: 760255.181 ops/s
Iteration   6: 769137.170 ops/s
Iteration   7: 755646.639 ops/s
Iteration   8: 755070.381 ops/s
Iteration   9: 778965.965 ops/s
Iteration  10: 790312.470 ops/s
Iteration  11: 810761.358 ops/s
Iteration  12: 790950.814 ops/s
Iteration  13: 779219.660 ops/s
Iteration  14: 800488.740 ops/s
Iteration  15: 780624.517 ops/s
Iteration  16: 762961.575 ops/s
Iteration  17: 799131.414 ops/s
Iteration  18: 782468.484 ops/s
Iteration  19: 761999.248 ops/s
Iteration  20: 765841.080 ops/s
Iteration  21: 764909.965 ops/s
Iteration  22: 768900.136 ops/s
Iteration  23: 769346.306 ops/s
Iteration  24: 783072.938 ops/s
Iteration  25: 794960.814 ops/s
Iteration  26: 793460.267 ops/s
Iteration  27: 800302.752 ops/s
Iteration  28: 804930.599 ops/s
Iteration  29: 793641.558 ops/s
Iteration  30: 803337.130 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsNoneCollection":
  779245.918 ±(99.9%) 11287.643 ops/s [Average]
  (min, avg, max) = (755070.381, 779245.918, 810761.358), stdev = 16894.813
  CI (99.9%): [767958.276, 790533.561] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  779245.918 ± 11287.643  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 340061.885 ops/s
# Warmup Iteration   2: 368902.017 ops/s
# Warmup Iteration   3: 494456.098 ops/s
# Warmup Iteration   4: 498356.886 ops/s
# Warmup Iteration   5: 523094.022 ops/s
# Warmup Iteration   6: 516842.669 ops/s
# Warmup Iteration   7: 514810.974 ops/s
# Warmup Iteration   8: 510483.074 ops/s
# Warmup Iteration   9: 507887.795 ops/s
# Warmup Iteration  10: 505867.399 ops/s
# Warmup Iteration  11: 468127.860 ops/s
# Warmup Iteration  12: 448353.926 ops/s
# Warmup Iteration  13: 504032.945 ops/s
# Warmup Iteration  14: 509640.842 ops/s
# Warmup Iteration  15: 501806.499 ops/s
# Warmup Iteration  16: 506691.290 ops/s
# Warmup Iteration  17: 504018.734 ops/s
# Warmup Iteration  18: 507313.594 ops/s
# Warmup Iteration  19: 510214.990 ops/s
# Warmup Iteration  20: 507982.419 ops/s
# Warmup Iteration  21: 511771.191 ops/s
# Warmup Iteration  22: 526078.775 ops/s
# Warmup Iteration  23: 512296.184 ops/s
# Warmup Iteration  24: 530333.789 ops/s
# Warmup Iteration  25: 508175.383 ops/s
# Warmup Iteration  26: 507463.560 ops/s
# Warmup Iteration  27: 511918.131 ops/s
# Warmup Iteration  28: 507339.385 ops/s
# Warmup Iteration  29: 511466.628 ops/s
# Warmup Iteration  30: 501787.273 ops/s
Iteration   1: 509301.124 ops/s
Iteration   2: 510286.331 ops/s
Iteration   3: 514059.840 ops/s
Iteration   4: 506493.224 ops/s
Iteration   5: 531677.126 ops/s
Iteration   6: 512775.291 ops/s
Iteration   7: 504264.934 ops/s
Iteration   8: 508958.863 ops/s
Iteration   9: 518656.561 ops/s
Iteration  10: 515437.706 ops/s
Iteration  11: 519587.321 ops/s
Iteration  12: 502519.923 ops/s
Iteration  13: 519206.397 ops/s
Iteration  14: 531484.874 ops/s
Iteration  15: 496479.279 ops/s
Iteration  16: 506869.635 ops/s
Iteration  17: 514108.139 ops/s
Iteration  18: 511592.666 ops/s
Iteration  19: 533410.399 ops/s
Iteration  20: 504615.701 ops/s
Iteration  21: 516944.986 ops/s
Iteration  22: 505463.249 ops/s
Iteration  23: 513771.404 ops/s
Iteration  24: 522731.717 ops/s
Iteration  25: 545219.954 ops/s
Iteration  26: 539131.772 ops/s
Iteration  27: 529214.651 ops/s
Iteration  28: 531390.712 ops/s
Iteration  29: 530828.460 ops/s
Iteration  30: 528852.709 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsNoneIterable":
  517844.498 ±(99.9%) 8071.777 ops/s [Average]
  (min, avg, max) = (496479.279, 517844.498, 545219.954), stdev = 12081.456
  CI (99.9%): [509772.721, 525916.275] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  517844.498 ± 8071.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 344497.034 ops/s
# Warmup Iteration   2: 648474.616 ops/s
# Warmup Iteration   3: 693991.804 ops/s
# Warmup Iteration   4: 693615.014 ops/s
# Warmup Iteration   5: 609627.807 ops/s
# Warmup Iteration   6: 692073.070 ops/s
# Warmup Iteration   7: 696673.934 ops/s
# Warmup Iteration   8: 696730.401 ops/s
# Warmup Iteration   9: 714896.375 ops/s
# Warmup Iteration  10: 685477.348 ops/s
# Warmup Iteration  11: 685246.408 ops/s
# Warmup Iteration  12: 692694.852 ops/s
# Warmup Iteration  13: 686505.999 ops/s
# Warmup Iteration  14: 717041.034 ops/s
# Warmup Iteration  15: 706707.522 ops/s
# Warmup Iteration  16: 693118.388 ops/s
# Warmup Iteration  17: 683401.636 ops/s
# Warmup Iteration  18: 682621.022 ops/s
# Warmup Iteration  19: 690062.485 ops/s
# Warmup Iteration  20: 694520.220 ops/s
# Warmup Iteration  21: 693245.750 ops/s
# Warmup Iteration  22: 687226.316 ops/s
# Warmup Iteration  23: 694490.970 ops/s
# Warmup Iteration  24: 686821.471 ops/s
# Warmup Iteration  25: 684478.724 ops/s
# Warmup Iteration  26: 681595.973 ops/s
# Warmup Iteration  27: 717086.120 ops/s
# Warmup Iteration  28: 731516.625 ops/s
# Warmup Iteration  29: 753109.921 ops/s
# Warmup Iteration  30: 707890.502 ops/s
Iteration   1: 713107.632 ops/s
Iteration   2: 732409.647 ops/s
Iteration   3: 696061.901 ops/s
Iteration   4: 724133.147 ops/s
Iteration   5: 725772.724 ops/s
Iteration   6: 729695.779 ops/s
Iteration   7: 727283.252 ops/s
Iteration   8: 688509.450 ops/s
Iteration   9: 703634.541 ops/s
Iteration  10: 703563.144 ops/s
Iteration  11: 691663.547 ops/s
Iteration  12: 694070.272 ops/s
Iteration  13: 694807.539 ops/s
Iteration  14: 710565.336 ops/s
Iteration  15: 690048.885 ops/s
Iteration  16: 720941.110 ops/s
Iteration  17: 706837.165 ops/s
Iteration  18: 689548.308 ops/s
Iteration  19: 714874.399 ops/s
Iteration  20: 720161.716 ops/s
Iteration  21: 715692.635 ops/s
Iteration  22: 717093.547 ops/s
Iteration  23: 694424.092 ops/s
Iteration  24: 686292.003 ops/s
Iteration  25: 701551.050 ops/s
Iteration  26: 700212.970 ops/s
Iteration  27: 693657.727 ops/s
Iteration  28: 749562.342 ops/s
Iteration  29: 713373.834 ops/s
Iteration  30: 676130.220 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_containsValue":
  707522.664 ±(99.9%) 11193.763 ops/s [Average]
  (min, avg, max) = (676130.220, 707522.664, 749562.342), stdev = 16754.298
  CI (99.9%): [696328.901, 718716.426] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_containsValue  thrpt   30  707522.664 ± 11193.763  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2206145.637 ops/s
# Warmup Iteration   2: 5005983.121 ops/s
# Warmup Iteration   3: 4504547.100 ops/s
# Warmup Iteration   4: 5114502.215 ops/s
# Warmup Iteration   5: 5232307.794 ops/s
# Warmup Iteration   6: 5412310.620 ops/s
# Warmup Iteration   7: 5142829.548 ops/s
# Warmup Iteration   8: 5238130.053 ops/s
# Warmup Iteration   9: 5198561.396 ops/s
# Warmup Iteration  10: 5130846.852 ops/s
# Warmup Iteration  11: 5342995.570 ops/s
# Warmup Iteration  12: 5170954.844 ops/s
# Warmup Iteration  13: 5330097.572 ops/s
# Warmup Iteration  14: 5278491.297 ops/s
# Warmup Iteration  15: 5195342.290 ops/s
# Warmup Iteration  16: 5155985.861 ops/s
# Warmup Iteration  17: 5349800.791 ops/s
# Warmup Iteration  18: 5141201.455 ops/s
# Warmup Iteration  19: 5184264.318 ops/s
# Warmup Iteration  20: 5200952.913 ops/s
# Warmup Iteration  21: 5157345.926 ops/s
# Warmup Iteration  22: 5140895.044 ops/s
# Warmup Iteration  23: 5148235.521 ops/s
# Warmup Iteration  24: 5191517.787 ops/s
# Warmup Iteration  25: 5160017.812 ops/s
# Warmup Iteration  26: 5179895.424 ops/s
# Warmup Iteration  27: 5445871.726 ops/s
# Warmup Iteration  28: 5476240.162 ops/s
# Warmup Iteration  29: 5314908.634 ops/s
# Warmup Iteration  30: 5121195.603 ops/s
Iteration   1: 5348353.358 ops/s
Iteration   2: 5403921.853 ops/s
Iteration   3: 5349845.688 ops/s
Iteration   4: 5237950.439 ops/s
Iteration   5: 4985710.305 ops/s
Iteration   6: 5270210.765 ops/s
Iteration   7: 5152294.726 ops/s
Iteration   8: 5211564.823 ops/s
Iteration   9: 5262866.478 ops/s
Iteration  10: 5183335.570 ops/s
Iteration  11: 5132347.690 ops/s
Iteration  12: 5245094.779 ops/s
Iteration  13: 5119151.965 ops/s
Iteration  14: 5191119.432 ops/s
Iteration  15: 5063284.965 ops/s
Iteration  16: 5166649.590 ops/s
Iteration  17: 5346985.301 ops/s
Iteration  18: 5335294.776 ops/s
Iteration  19: 5423388.029 ops/s
Iteration  20: 5338207.181 ops/s
Iteration  21: 5191593.232 ops/s
Iteration  22: 5174334.690 ops/s
Iteration  23: 5155185.066 ops/s
Iteration  24: 5263941.822 ops/s
Iteration  25: 5268295.617 ops/s
Iteration  26: 5177991.715 ops/s
Iteration  27: 5077505.126 ops/s
Iteration  28: 5181689.913 ops/s
Iteration  29: 5191344.884 ops/s
Iteration  30: 5136475.378 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_count":
  5219531.172 ±(99.9%) 68730.363 ops/s [Average]
  (min, avg, max) = (4985710.305, 5219531.172, 5423388.029), stdev = 102872.379
  CI (99.9%): [5150800.809, 5288261.535] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_count  thrpt   30  5219531.172 ± 68730.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 770868.048 ops/s
# Warmup Iteration   2: 1596053.753 ops/s
# Warmup Iteration   3: 1751896.842 ops/s
# Warmup Iteration   4: 1864376.065 ops/s
# Warmup Iteration   5: 1541709.950 ops/s
# Warmup Iteration   6: 1830302.070 ops/s
# Warmup Iteration   7: 1813156.555 ops/s
# Warmup Iteration   8: 1777501.857 ops/s
# Warmup Iteration   9: 1805689.042 ops/s
# Warmup Iteration  10: 1849102.845 ops/s
# Warmup Iteration  11: 1808514.526 ops/s
# Warmup Iteration  12: 1840943.335 ops/s
# Warmup Iteration  13: 1797914.181 ops/s
# Warmup Iteration  14: 1807099.856 ops/s
# Warmup Iteration  15: 1798121.665 ops/s
# Warmup Iteration  16: 1777151.715 ops/s
# Warmup Iteration  17: 1778347.135 ops/s
# Warmup Iteration  18: 1776387.467 ops/s
# Warmup Iteration  19: 1777688.831 ops/s
# Warmup Iteration  20: 1799987.440 ops/s
# Warmup Iteration  21: 1846720.628 ops/s
# Warmup Iteration  22: 1860753.274 ops/s
# Warmup Iteration  23: 1836631.606 ops/s
# Warmup Iteration  24: 1779709.133 ops/s
# Warmup Iteration  25: 1845955.219 ops/s
# Warmup Iteration  26: 1818792.083 ops/s
# Warmup Iteration  27: 1787277.301 ops/s
# Warmup Iteration  28: 1776203.353 ops/s
# Warmup Iteration  29: 1783205.225 ops/s
# Warmup Iteration  30: 1791428.329 ops/s
Iteration   1: 1799650.577 ops/s
Iteration   2: 1777809.418 ops/s
Iteration   3: 1758017.149 ops/s
Iteration   4: 1760701.357 ops/s
Iteration   5: 1838372.824 ops/s
Iteration   6: 1821430.209 ops/s
Iteration   7: 1790432.255 ops/s
Iteration   8: 1814752.406 ops/s
Iteration   9: 1839257.784 ops/s
Iteration  10: 1879704.938 ops/s
Iteration  11: 1781062.038 ops/s
Iteration  12: 1791779.748 ops/s
Iteration  13: 1797197.316 ops/s
Iteration  14: 1779505.133 ops/s
Iteration  15: 1785148.614 ops/s
Iteration  16: 1873931.562 ops/s
Iteration  17: 1856904.856 ops/s
Iteration  18: 1797993.434 ops/s
Iteration  19: 1818786.150 ops/s
Iteration  20: 1867414.865 ops/s
Iteration  21: 1847790.960 ops/s
Iteration  22: 1844079.542 ops/s
Iteration  23: 1865537.714 ops/s
Iteration  24: 1875006.054 ops/s
Iteration  25: 1817662.660 ops/s
Iteration  26: 1787076.469 ops/s
Iteration  27: 1798756.884 ops/s
Iteration  28: 1789088.692 ops/s
Iteration  29: 1862148.464 ops/s
Iteration  30: 1854067.982 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_countBy":
  1819035.602 ±(99.9%) 24588.035 ops/s [Average]
  (min, avg, max) = (1758017.149, 1819035.602, 1879704.938), stdev = 36802.217
  CI (99.9%): [1794447.566, 1843623.637] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_countBy  thrpt   30  1819035.602 ± 24588.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 219875.045 ops/s
# Warmup Iteration   2: 358950.395 ops/s
# Warmup Iteration   3: 443593.319 ops/s
# Warmup Iteration   4: 455517.983 ops/s
# Warmup Iteration   5: 442619.381 ops/s
# Warmup Iteration   6: 418674.445 ops/s
# Warmup Iteration   7: 379973.063 ops/s
# Warmup Iteration   8: 477470.395 ops/s
# Warmup Iteration   9: 447842.963 ops/s
# Warmup Iteration  10: 461866.534 ops/s
# Warmup Iteration  11: 458408.732 ops/s
# Warmup Iteration  12: 460493.389 ops/s
# Warmup Iteration  13: 439955.063 ops/s
# Warmup Iteration  14: 435797.903 ops/s
# Warmup Iteration  15: 443071.778 ops/s
# Warmup Iteration  16: 458905.302 ops/s
# Warmup Iteration  17: 452715.748 ops/s
# Warmup Iteration  18: 436957.883 ops/s
# Warmup Iteration  19: 456782.467 ops/s
# Warmup Iteration  20: 447148.289 ops/s
# Warmup Iteration  21: 453835.187 ops/s
# Warmup Iteration  22: 433798.325 ops/s
# Warmup Iteration  23: 435261.991 ops/s
# Warmup Iteration  24: 437770.226 ops/s
# Warmup Iteration  25: 455947.470 ops/s
# Warmup Iteration  26: 456960.121 ops/s
# Warmup Iteration  27: 456490.499 ops/s
# Warmup Iteration  28: 451555.798 ops/s
# Warmup Iteration  29: 438418.615 ops/s
# Warmup Iteration  30: 457140.931 ops/s
Iteration   1: 435849.509 ops/s
Iteration   2: 436312.691 ops/s
Iteration   3: 464537.996 ops/s
Iteration   4: 478799.048 ops/s
Iteration   5: 470207.446 ops/s
Iteration   6: 434317.765 ops/s
Iteration   7: 438499.586 ops/s
Iteration   8: 440144.734 ops/s
Iteration   9: 437996.888 ops/s
Iteration  10: 440938.067 ops/s
Iteration  11: 441671.433 ops/s
Iteration  12: 437148.998 ops/s
Iteration  13: 437925.393 ops/s
Iteration  14: 430027.042 ops/s
Iteration  15: 435609.735 ops/s
Iteration  16: 437074.412 ops/s
Iteration  17: 438338.330 ops/s
Iteration  18: 445130.741 ops/s
Iteration  19: 436245.830 ops/s
Iteration  20: 439804.777 ops/s
Iteration  21: 438389.994 ops/s
Iteration  22: 444598.122 ops/s
Iteration  23: 455181.013 ops/s
Iteration  24: 454338.325 ops/s
Iteration  25: 460193.066 ops/s
Iteration  26: 454750.933 ops/s
Iteration  27: 438481.385 ops/s
Iteration  28: 447134.923 ops/s
Iteration  29: 455417.663 ops/s
Iteration  30: 455732.010 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_countByEach":
  445359.928 ±(99.9%) 7883.445 ops/s [Average]
  (min, avg, max) = (430027.042, 445359.928, 478799.048), stdev = 11799.570
  CI (99.9%): [437476.484, 453243.373] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_countByEach  thrpt   30  445359.928 ± 7883.445  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 745430.304 ops/s
# Warmup Iteration   2: 1515968.706 ops/s
# Warmup Iteration   3: 1749318.791 ops/s
# Warmup Iteration   4: 1706339.830 ops/s
# Warmup Iteration   5: 1423691.647 ops/s
# Warmup Iteration   6: 1618984.201 ops/s
# Warmup Iteration   7: 1665318.326 ops/s
# Warmup Iteration   8: 1733100.987 ops/s
# Warmup Iteration   9: 1816844.358 ops/s
# Warmup Iteration  10: 1794859.899 ops/s
# Warmup Iteration  11: 1805407.055 ops/s
# Warmup Iteration  12: 1746743.041 ops/s
# Warmup Iteration  13: 1691731.761 ops/s
# Warmup Iteration  14: 1718173.386 ops/s
# Warmup Iteration  15: 1690853.380 ops/s
# Warmup Iteration  16: 1776789.379 ops/s
# Warmup Iteration  17: 1727277.816 ops/s
# Warmup Iteration  18: 1723722.458 ops/s
# Warmup Iteration  19: 1710811.737 ops/s
# Warmup Iteration  20: 1741118.453 ops/s
# Warmup Iteration  21: 1693078.536 ops/s
# Warmup Iteration  22: 1689932.653 ops/s
# Warmup Iteration  23: 1702575.334 ops/s
# Warmup Iteration  24: 1683468.559 ops/s
# Warmup Iteration  25: 1756795.940 ops/s
# Warmup Iteration  26: 1775590.114 ops/s
# Warmup Iteration  27: 1690216.777 ops/s
# Warmup Iteration  28: 1703508.725 ops/s
# Warmup Iteration  29: 1779384.009 ops/s
# Warmup Iteration  30: 1817042.504 ops/s
Iteration   1: 1704514.451 ops/s
Iteration   2: 1702104.375 ops/s
Iteration   3: 1829889.567 ops/s
Iteration   4: 1785727.380 ops/s
Iteration   5: 1701513.623 ops/s
Iteration   6: 1712507.387 ops/s
Iteration   7: 1689427.599 ops/s
Iteration   8: 1705092.223 ops/s
Iteration   9: 1709913.803 ops/s
Iteration  10: 1733717.595 ops/s
Iteration  11: 1663093.503 ops/s
Iteration  12: 1693060.013 ops/s
Iteration  13: 1691300.780 ops/s
Iteration  14: 1656823.521 ops/s
Iteration  15: 1712989.605 ops/s
Iteration  16: 1681865.340 ops/s
Iteration  17: 1682103.655 ops/s
Iteration  18: 1663412.883 ops/s
Iteration  19: 1661794.093 ops/s
Iteration  20: 1702413.297 ops/s
Iteration  21: 1681216.590 ops/s
Iteration  22: 1689326.265 ops/s
Iteration  23: 1674178.949 ops/s
Iteration  24: 1682033.952 ops/s
Iteration  25: 1765930.675 ops/s
Iteration  26: 1738772.777 ops/s
Iteration  27: 1720808.567 ops/s
Iteration  28: 1702200.803 ops/s
Iteration  29: 1717782.885 ops/s
Iteration  30: 1743492.402 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_countByWith":
  1706633.619 ±(99.9%) 25237.784 ops/s [Average]
  (min, avg, max) = (1656823.521, 1706633.619, 1829889.567), stdev = 37774.729
  CI (99.9%): [1681395.835, 1731871.402] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_countByWith  thrpt   30  1706633.619 ± 25237.784  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2327483.888 ops/s
# Warmup Iteration   2: 5695437.764 ops/s
# Warmup Iteration   3: 4870625.308 ops/s
# Warmup Iteration   4: 5511670.968 ops/s
# Warmup Iteration   5: 5759713.828 ops/s
# Warmup Iteration   6: 5696690.937 ops/s
# Warmup Iteration   7: 5510773.000 ops/s
# Warmup Iteration   8: 5510349.937 ops/s
# Warmup Iteration   9: 5565284.650 ops/s
# Warmup Iteration  10: 5625944.859 ops/s
# Warmup Iteration  11: 5607980.135 ops/s
# Warmup Iteration  12: 5469927.353 ops/s
# Warmup Iteration  13: 5547958.903 ops/s
# Warmup Iteration  14: 5687524.794 ops/s
# Warmup Iteration  15: 5485204.785 ops/s
# Warmup Iteration  16: 5702178.200 ops/s
# Warmup Iteration  17: 5506121.176 ops/s
# Warmup Iteration  18: 5600270.222 ops/s
# Warmup Iteration  19: 5713895.468 ops/s
# Warmup Iteration  20: 5723311.183 ops/s
# Warmup Iteration  21: 5540517.561 ops/s
# Warmup Iteration  22: 5694857.044 ops/s
# Warmup Iteration  23: 5707828.440 ops/s
# Warmup Iteration  24: 5509207.263 ops/s
# Warmup Iteration  25: 5556304.178 ops/s
# Warmup Iteration  26: 5697144.740 ops/s
# Warmup Iteration  27: 5676603.887 ops/s
# Warmup Iteration  28: 5625792.882 ops/s
# Warmup Iteration  29: 5510364.426 ops/s
# Warmup Iteration  30: 5737182.384 ops/s
Iteration   1: 6017156.946 ops/s
Iteration   2: 5584838.949 ops/s
Iteration   3: 5511071.275 ops/s
Iteration   4: 5559488.939 ops/s
Iteration   5: 5657714.955 ops/s
Iteration   6: 5642631.517 ops/s
Iteration   7: 5506177.999 ops/s
Iteration   8: 5605648.282 ops/s
Iteration   9: 5403112.884 ops/s
Iteration  10: 5709303.592 ops/s
Iteration  11: 5829383.558 ops/s
Iteration  12: 5733199.348 ops/s
Iteration  13: 5494364.945 ops/s
Iteration  14: 5665556.291 ops/s
Iteration  15: 5462718.948 ops/s
Iteration  16: 5601924.517 ops/s
Iteration  17: 5728291.608 ops/s
Iteration  18: 5591160.806 ops/s
Iteration  19: 5651321.763 ops/s
Iteration  20: 5826890.249 ops/s
Iteration  21: 5847561.192 ops/s
Iteration  22: 5639981.893 ops/s
Iteration  23: 5501073.714 ops/s
Iteration  24: 5599112.658 ops/s
Iteration  25: 5639455.934 ops/s
Iteration  26: 5596505.594 ops/s
Iteration  27: 5567454.175 ops/s
Iteration  28: 5529793.605 ops/s
Iteration  29: 5580302.117 ops/s
Iteration  30: 5453002.201 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_countWith":
  5624540.015 ±(99.9%) 88423.811 ops/s [Average]
  (min, avg, max) = (5403112.884, 5624540.015, 6017156.946), stdev = 132348.607
  CI (99.9%): [5536116.205, 5712963.826] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_countWith  thrpt   30  5624540.015 ± 88423.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1922669.559 ops/s
# Warmup Iteration   2: 4799818.069 ops/s
# Warmup Iteration   3: 4854912.978 ops/s
# Warmup Iteration   4: 3903919.183 ops/s
# Warmup Iteration   5: 4722848.040 ops/s
# Warmup Iteration   6: 4722152.495 ops/s
# Warmup Iteration   7: 4651524.770 ops/s
# Warmup Iteration   8: 4746985.207 ops/s
# Warmup Iteration   9: 4592503.166 ops/s
# Warmup Iteration  10: 4720111.965 ops/s
# Warmup Iteration  11: 4784852.951 ops/s
# Warmup Iteration  12: 4675062.538 ops/s
# Warmup Iteration  13: 4605847.492 ops/s
# Warmup Iteration  14: 4868755.819 ops/s
# Warmup Iteration  15: 5058040.541 ops/s
# Warmup Iteration  16: 4921990.876 ops/s
# Warmup Iteration  17: 4887809.077 ops/s
# Warmup Iteration  18: 5007264.783 ops/s
# Warmup Iteration  19: 4743820.130 ops/s
# Warmup Iteration  20: 5073496.203 ops/s
# Warmup Iteration  21: 4837985.731 ops/s
# Warmup Iteration  22: 4900998.663 ops/s
# Warmup Iteration  23: 4904107.622 ops/s
# Warmup Iteration  24: 5005751.964 ops/s
# Warmup Iteration  25: 4967105.090 ops/s
# Warmup Iteration  26: 4992703.564 ops/s
# Warmup Iteration  27: 4746623.907 ops/s
# Warmup Iteration  28: 4987928.128 ops/s
# Warmup Iteration  29: 5040219.965 ops/s
# Warmup Iteration  30: 4942910.683 ops/s
Iteration   1: 4965034.381 ops/s
Iteration   2: 4766167.024 ops/s
Iteration   3: 5043089.034 ops/s
Iteration   4: 4684154.838 ops/s
Iteration   5: 4650269.125 ops/s
Iteration   6: 4608034.789 ops/s
Iteration   7: 4644355.442 ops/s
Iteration   8: 4567817.065 ops/s
Iteration   9: 4629648.426 ops/s
Iteration  10: 4642193.250 ops/s
Iteration  11: 4637660.832 ops/s
Iteration  12: 4561628.663 ops/s
Iteration  13: 4563906.369 ops/s
Iteration  14: 4736442.239 ops/s
Iteration  15: 4728064.260 ops/s
Iteration  16: 4844452.864 ops/s
Iteration  17: 4900186.129 ops/s
Iteration  18: 4859390.908 ops/s
Iteration  19: 4912942.442 ops/s
Iteration  20: 4913078.407 ops/s
Iteration  21: 4976243.450 ops/s
Iteration  22: 5033790.791 ops/s
Iteration  23: 4812063.320 ops/s
Iteration  24: 4593048.774 ops/s
Iteration  25: 4742300.929 ops/s
Iteration  26: 4614970.641 ops/s
Iteration  27: 4586563.947 ops/s
Iteration  28: 4574840.949 ops/s
Iteration  29: 4663737.684 ops/s
Iteration  30: 4767637.179 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detect":
  4740790.472 ±(99.9%) 100667.890 ops/s [Average]
  (min, avg, max) = (4561628.663, 4740790.472, 5043089.034), stdev = 150674.970
  CI (99.9%): [4640122.582, 4841458.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score        Error  Units
HashBiMapTest._Benchmark.benchmark_detect  thrpt   30  4740790.472 ± 100667.890  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectIfNone_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectIfNone_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1897839.806 ops/s
# Warmup Iteration   2: 4543912.505 ops/s
# Warmup Iteration   3: 4459353.410 ops/s
# Warmup Iteration   4: 3673969.914 ops/s
# Warmup Iteration   5: 4518126.446 ops/s
# Warmup Iteration   6: 4500419.160 ops/s
# Warmup Iteration   7: 4447850.381 ops/s
# Warmup Iteration   8: 4503528.797 ops/s
# Warmup Iteration   9: 4496884.007 ops/s
# Warmup Iteration  10: 4555113.286 ops/s
# Warmup Iteration  11: 4418706.162 ops/s
# Warmup Iteration  12: 4745846.102 ops/s
# Warmup Iteration  13: 4517461.938 ops/s
# Warmup Iteration  14: 4655003.100 ops/s
# Warmup Iteration  15: 4671462.993 ops/s
# Warmup Iteration  16: 4762857.428 ops/s
# Warmup Iteration  17: 4736023.301 ops/s
# Warmup Iteration  18: 4539886.518 ops/s
# Warmup Iteration  19: 4504250.300 ops/s
# Warmup Iteration  20: 4592699.735 ops/s
# Warmup Iteration  21: 4660264.318 ops/s
# Warmup Iteration  22: 4668037.989 ops/s
# Warmup Iteration  23: 4667241.827 ops/s
# Warmup Iteration  24: 4553535.123 ops/s
# Warmup Iteration  25: 4591038.424 ops/s
# Warmup Iteration  26: 4460515.984 ops/s
# Warmup Iteration  27: 4449739.769 ops/s
# Warmup Iteration  28: 4476936.470 ops/s
# Warmup Iteration  29: 4568177.027 ops/s
# Warmup Iteration  30: 4577067.501 ops/s
Iteration   1: 4665905.544 ops/s
Iteration   2: 4522251.190 ops/s
Iteration   3: 4460869.955 ops/s
Iteration   4: 4471067.729 ops/s
Iteration   5: 4450474.390 ops/s
Iteration   6: 4546818.948 ops/s
Iteration   7: 4473815.419 ops/s
Iteration   8: 4543478.660 ops/s
Iteration   9: 4523607.482 ops/s
Iteration  10: 4484804.879 ops/s
Iteration  11: 4469875.253 ops/s
Iteration  12: 4535080.247 ops/s
Iteration  13: 4458673.439 ops/s
Iteration  14: 4519295.227 ops/s
Iteration  15: 4574102.038 ops/s
Iteration  16: 4535091.878 ops/s
Iteration  17: 4518007.346 ops/s
Iteration  18: 4610217.631 ops/s
Iteration  19: 4546069.906 ops/s
Iteration  20: 4887125.948 ops/s
Iteration  21: 4908798.236 ops/s
Iteration  22: 4697486.602 ops/s
Iteration  23: 4441939.098 ops/s
Iteration  24: 4498920.983 ops/s
Iteration  25: 4411344.857 ops/s
Iteration  26: 4465176.600 ops/s
Iteration  27: 4476412.717 ops/s
Iteration  28: 4495365.576 ops/s
Iteration  29: 4488547.570 ops/s
Iteration  30: 4467558.680 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectIfNone_value":
  4538272.801 ±(99.9%) 77496.511 ops/s [Average]
  (min, avg, max) = (4411344.857, 4538272.801, 4908798.236), stdev = 115993.138
  CI (99.9%): [4460776.290, 4615769.312] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_detectIfNone_value  thrpt   30  4538272.801 ± 77496.511  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1832517.343 ops/s
# Warmup Iteration   2: 4347130.102 ops/s
# Warmup Iteration   3: 4348177.142 ops/s
# Warmup Iteration   4: 3557724.044 ops/s
# Warmup Iteration   5: 4314311.098 ops/s
# Warmup Iteration   6: 4269434.140 ops/s
# Warmup Iteration   7: 4332526.704 ops/s
# Warmup Iteration   8: 4398316.556 ops/s
# Warmup Iteration   9: 4416310.602 ops/s
# Warmup Iteration  10: 4393821.110 ops/s
# Warmup Iteration  11: 4291310.650 ops/s
# Warmup Iteration  12: 4307655.216 ops/s
# Warmup Iteration  13: 4343395.769 ops/s
# Warmup Iteration  14: 4308681.745 ops/s
# Warmup Iteration  15: 4274167.177 ops/s
# Warmup Iteration  16: 4415509.572 ops/s
# Warmup Iteration  17: 4504488.002 ops/s
# Warmup Iteration  18: 4472704.906 ops/s
# Warmup Iteration  19: 4294393.706 ops/s
# Warmup Iteration  20: 4449208.868 ops/s
# Warmup Iteration  21: 4264250.683 ops/s
# Warmup Iteration  22: 4322951.109 ops/s
# Warmup Iteration  23: 4296852.554 ops/s
# Warmup Iteration  24: 4403146.801 ops/s
# Warmup Iteration  25: 4505474.048 ops/s
# Warmup Iteration  26: 4381823.188 ops/s
# Warmup Iteration  27: 4330921.643 ops/s
# Warmup Iteration  28: 4475242.572 ops/s
# Warmup Iteration  29: 4333053.429 ops/s
# Warmup Iteration  30: 4303179.837 ops/s
Iteration   1: 4601704.183 ops/s
Iteration   2: 4515109.179 ops/s
Iteration   3: 4458437.472 ops/s
Iteration   4: 4491185.448 ops/s
Iteration   5: 4326211.035 ops/s
Iteration   6: 4548702.162 ops/s
Iteration   7: 4474784.268 ops/s
Iteration   8: 4480674.696 ops/s
Iteration   9: 4430582.196 ops/s
Iteration  10: 4519987.304 ops/s
Iteration  11: 4488656.091 ops/s
Iteration  12: 4610515.726 ops/s
Iteration  13: 4545305.845 ops/s
Iteration  14: 4555909.430 ops/s
Iteration  15: 4403871.783 ops/s
Iteration  16: 4520676.278 ops/s
Iteration  17: 4519011.896 ops/s
Iteration  18: 4507176.406 ops/s
Iteration  19: 4338790.243 ops/s
Iteration  20: 4314203.043 ops/s
Iteration  21: 4283011.012 ops/s
Iteration  22: 4283718.942 ops/s
Iteration  23: 4347325.870 ops/s
Iteration  24: 4343270.069 ops/s
Iteration  25: 4334652.336 ops/s
Iteration  26: 4333996.779 ops/s
Iteration  27: 4341278.157 ops/s
Iteration  28: 4273847.241 ops/s
Iteration  29: 4300159.950 ops/s
Iteration  30: 4410853.253 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectOptional":
  4430120.276 ±(99.9%) 69482.000 ops/s [Average]
  (min, avg, max) = (4273847.241, 4430120.276, 4610515.726), stdev = 103997.395
  CI (99.9%): [4360638.276, 4499602.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_detectOptional  thrpt   30  4430120.276 ± 69482.000  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectOptional_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectOptional_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2057912.585 ops/s
# Warmup Iteration   2: 4883495.023 ops/s
# Warmup Iteration   3: 4870152.613 ops/s
# Warmup Iteration   4: 4063110.789 ops/s
# Warmup Iteration   5: 4910406.065 ops/s
# Warmup Iteration   6: 4767042.152 ops/s
# Warmup Iteration   7: 4873510.649 ops/s
# Warmup Iteration   8: 4813496.744 ops/s
# Warmup Iteration   9: 4883188.083 ops/s
# Warmup Iteration  10: 4870276.190 ops/s
# Warmup Iteration  11: 4939134.181 ops/s
# Warmup Iteration  12: 4918607.930 ops/s
# Warmup Iteration  13: 5113471.960 ops/s
# Warmup Iteration  14: 4899159.164 ops/s
# Warmup Iteration  15: 4934229.951 ops/s
# Warmup Iteration  16: 4938524.988 ops/s
# Warmup Iteration  17: 4905527.025 ops/s
# Warmup Iteration  18: 4803575.699 ops/s
# Warmup Iteration  19: 4939016.473 ops/s
# Warmup Iteration  20: 4986026.677 ops/s
# Warmup Iteration  21: 4841602.318 ops/s
# Warmup Iteration  22: 4986545.059 ops/s
# Warmup Iteration  23: 4867473.637 ops/s
# Warmup Iteration  24: 4869152.793 ops/s
# Warmup Iteration  25: 4998607.975 ops/s
# Warmup Iteration  26: 4904412.851 ops/s
# Warmup Iteration  27: 4947159.586 ops/s
# Warmup Iteration  28: 4934947.115 ops/s
# Warmup Iteration  29: 4855502.521 ops/s
# Warmup Iteration  30: 4895816.485 ops/s
Iteration   1: 4914837.403 ops/s
Iteration   2: 4816877.243 ops/s
Iteration   3: 4780935.226 ops/s
Iteration   4: 4770445.587 ops/s
Iteration   5: 4808641.971 ops/s
Iteration   6: 4954090.879 ops/s
Iteration   7: 5082411.029 ops/s
Iteration   8: 4772258.340 ops/s
Iteration   9: 4986881.901 ops/s
Iteration  10: 4797453.548 ops/s
Iteration  11: 4836836.154 ops/s
Iteration  12: 4836645.934 ops/s
Iteration  13: 4884964.196 ops/s
Iteration  14: 4737664.065 ops/s
Iteration  15: 4906531.139 ops/s
Iteration  16: 4860338.246 ops/s
Iteration  17: 5018358.522 ops/s
Iteration  18: 4890104.773 ops/s
Iteration  19: 4902432.801 ops/s
Iteration  20: 4778793.085 ops/s
Iteration  21: 4850729.782 ops/s
Iteration  22: 4850393.972 ops/s
Iteration  23: 4786470.394 ops/s
Iteration  24: 4787345.142 ops/s
Iteration  25: 4671247.677 ops/s
Iteration  26: 4888714.409 ops/s
Iteration  27: 4851722.265 ops/s
Iteration  28: 4891720.290 ops/s
Iteration  29: 4999815.566 ops/s
Iteration  30: 4612772.870 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectOptional_value":
  4850947.814 ±(99.9%) 66536.795 ops/s [Average]
  (min, avg, max) = (4612772.870, 4850947.814, 5082411.029), stdev = 99589.149
  CI (99.9%): [4784411.019, 4917484.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_detectOptional_value  thrpt   30  4850947.814 ± 66536.795  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1825553.885 ops/s
# Warmup Iteration   2: 4445765.999 ops/s
# Warmup Iteration   3: 4448159.789 ops/s
# Warmup Iteration   4: 3660455.285 ops/s
# Warmup Iteration   5: 4674279.523 ops/s
# Warmup Iteration   6: 4564930.691 ops/s
# Warmup Iteration   7: 4581171.060 ops/s
# Warmup Iteration   8: 4526897.412 ops/s
# Warmup Iteration   9: 4593773.676 ops/s
# Warmup Iteration  10: 4513135.027 ops/s
# Warmup Iteration  11: 4595449.012 ops/s
# Warmup Iteration  12: 4531664.918 ops/s
# Warmup Iteration  13: 4464580.142 ops/s
# Warmup Iteration  14: 4484115.704 ops/s
# Warmup Iteration  15: 4690161.386 ops/s
# Warmup Iteration  16: 4685354.176 ops/s
# Warmup Iteration  17: 4479010.447 ops/s
# Warmup Iteration  18: 4492497.149 ops/s
# Warmup Iteration  19: 4603368.378 ops/s
# Warmup Iteration  20: 4484299.451 ops/s
# Warmup Iteration  21: 4534523.291 ops/s
# Warmup Iteration  22: 4599794.047 ops/s
# Warmup Iteration  23: 4617211.798 ops/s
# Warmup Iteration  24: 4641563.103 ops/s
# Warmup Iteration  25: 4497737.168 ops/s
# Warmup Iteration  26: 4716151.469 ops/s
# Warmup Iteration  27: 4530425.509 ops/s
# Warmup Iteration  28: 4593423.583 ops/s
# Warmup Iteration  29: 4519648.181 ops/s
# Warmup Iteration  30: 4589678.626 ops/s
Iteration   1: 4665375.991 ops/s
Iteration   2: 4352257.011 ops/s
Iteration   3: 4523903.976 ops/s
Iteration   4: 4490884.184 ops/s
Iteration   5: 4595577.347 ops/s
Iteration   6: 4573298.821 ops/s
Iteration   7: 4466466.265 ops/s
Iteration   8: 4595279.865 ops/s
Iteration   9: 4446244.528 ops/s
Iteration  10: 4446906.935 ops/s
Iteration  11: 4539508.868 ops/s
Iteration  12: 4465834.360 ops/s
Iteration  13: 4494883.738 ops/s
Iteration  14: 4560685.820 ops/s
Iteration  15: 4725570.287 ops/s
Iteration  16: 4497925.077 ops/s
Iteration  17: 4555231.343 ops/s
Iteration  18: 4443878.611 ops/s
Iteration  19: 4754932.291 ops/s
Iteration  20: 4498587.935 ops/s
Iteration  21: 4657794.432 ops/s
Iteration  22: 4853067.042 ops/s
Iteration  23: 4766162.378 ops/s
Iteration  24: 4652731.524 ops/s
Iteration  25: 4695501.777 ops/s
Iteration  26: 4680657.518 ops/s
Iteration  27: 4651333.449 ops/s
Iteration  28: 4776092.538 ops/s
Iteration  29: 4675324.215 ops/s
Iteration  30: 4619246.370 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectWith":
  4590704.817 ±(99.9%) 80462.529 ops/s [Average]
  (min, avg, max) = (4352257.011, 4590704.817, 4853067.042), stdev = 120432.535
  CI (99.9%): [4510242.288, 4671167.346] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_detectWith  thrpt   30  4590704.817 ± 80462.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2088256.590 ops/s
# Warmup Iteration   2: 4751307.809 ops/s
# Warmup Iteration   3: 4859242.130 ops/s
# Warmup Iteration   4: 3880256.704 ops/s
# Warmup Iteration   5: 4823637.466 ops/s
# Warmup Iteration   6: 4663462.942 ops/s
# Warmup Iteration   7: 4860877.778 ops/s
# Warmup Iteration   8: 4740731.251 ops/s
# Warmup Iteration   9: 4621802.988 ops/s
# Warmup Iteration  10: 4731390.763 ops/s
# Warmup Iteration  11: 4786291.650 ops/s
# Warmup Iteration  12: 4727526.773 ops/s
# Warmup Iteration  13: 4801226.017 ops/s
# Warmup Iteration  14: 4831719.504 ops/s
# Warmup Iteration  15: 4828798.835 ops/s
# Warmup Iteration  16: 4738169.963 ops/s
# Warmup Iteration  17: 4688772.502 ops/s
# Warmup Iteration  18: 4701886.656 ops/s
# Warmup Iteration  19: 4709049.598 ops/s
# Warmup Iteration  20: 4716142.275 ops/s
# Warmup Iteration  21: 4684664.799 ops/s
# Warmup Iteration  22: 4764590.660 ops/s
# Warmup Iteration  23: 4638033.674 ops/s
# Warmup Iteration  24: 4711969.271 ops/s
# Warmup Iteration  25: 4767443.657 ops/s
# Warmup Iteration  26: 4637269.250 ops/s
# Warmup Iteration  27: 4687058.409 ops/s
# Warmup Iteration  28: 4659645.152 ops/s
# Warmup Iteration  29: 5008664.586 ops/s
# Warmup Iteration  30: 4746269.395 ops/s
Iteration   1: 4765701.170 ops/s
Iteration   2: 4674291.059 ops/s
Iteration   3: 4680163.493 ops/s
Iteration   4: 4838492.500 ops/s
Iteration   5: 4903920.319 ops/s
Iteration   6: 5020332.755 ops/s
Iteration   7: 4688081.750 ops/s
Iteration   8: 4771084.902 ops/s
Iteration   9: 4968094.308 ops/s
Iteration  10: 4849468.055 ops/s
Iteration  11: 4622526.517 ops/s
Iteration  12: 4584186.581 ops/s
Iteration  13: 4787423.243 ops/s
Iteration  14: 4746290.432 ops/s
Iteration  15: 4879691.424 ops/s
Iteration  16: 4639871.656 ops/s
Iteration  17: 4675328.935 ops/s
Iteration  18: 4954871.216 ops/s
Iteration  19: 5096429.614 ops/s
Iteration  20: 5012079.601 ops/s
Iteration  21: 4779520.571 ops/s
Iteration  22: 4727839.226 ops/s
Iteration  23: 4958170.410 ops/s
Iteration  24: 4796239.238 ops/s
Iteration  25: 4743094.671 ops/s
Iteration  26: 4729648.606 ops/s
Iteration  27: 4732099.474 ops/s
Iteration  28: 4887958.803 ops/s
Iteration  29: 4887431.898 ops/s
Iteration  30: 4691047.682 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectWithIfNone":
  4803046.004 ±(99.9%) 87035.721 ops/s [Average]
  (min, avg, max) = (4584186.581, 4803046.004, 5096429.614), stdev = 130270.979
  CI (99.9%): [4716010.283, 4890081.724] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  4803046.004 ± 87035.721  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2312275.345 ops/s
# Warmup Iteration   2: 4923826.522 ops/s
# Warmup Iteration   3: 4765411.599 ops/s
# Warmup Iteration   4: 4125288.373 ops/s
# Warmup Iteration   5: 4836143.646 ops/s
# Warmup Iteration   6: 4964524.055 ops/s
# Warmup Iteration   7: 4939511.042 ops/s
# Warmup Iteration   8: 4764720.031 ops/s
# Warmup Iteration   9: 4846343.659 ops/s
# Warmup Iteration  10: 4907921.853 ops/s
# Warmup Iteration  11: 4882971.004 ops/s
# Warmup Iteration  12: 4857255.296 ops/s
# Warmup Iteration  13: 4816717.619 ops/s
# Warmup Iteration  14: 4860449.041 ops/s
# Warmup Iteration  15: 4910471.981 ops/s
# Warmup Iteration  16: 4787774.063 ops/s
# Warmup Iteration  17: 4912155.807 ops/s
# Warmup Iteration  18: 4878257.695 ops/s
# Warmup Iteration  19: 4829741.677 ops/s
# Warmup Iteration  20: 4826290.546 ops/s
# Warmup Iteration  21: 4959858.524 ops/s
# Warmup Iteration  22: 4969711.425 ops/s
# Warmup Iteration  23: 4846838.101 ops/s
# Warmup Iteration  24: 4776333.922 ops/s
# Warmup Iteration  25: 4918665.315 ops/s
# Warmup Iteration  26: 4935557.289 ops/s
# Warmup Iteration  27: 4974765.847 ops/s
# Warmup Iteration  28: 4967119.706 ops/s
# Warmup Iteration  29: 4980204.667 ops/s
# Warmup Iteration  30: 4972071.673 ops/s
Iteration   1: 4995233.598 ops/s
Iteration   2: 4896807.834 ops/s
Iteration   3: 4849308.236 ops/s
Iteration   4: 4880369.629 ops/s
Iteration   5: 4811180.632 ops/s
Iteration   6: 4777961.167 ops/s
Iteration   7: 4854505.647 ops/s
Iteration   8: 4823302.630 ops/s
Iteration   9: 4830723.465 ops/s
Iteration  10: 4774618.490 ops/s
Iteration  11: 4844419.812 ops/s
Iteration  12: 5033926.543 ops/s
Iteration  13: 4857915.227 ops/s
Iteration  14: 4942158.960 ops/s
Iteration  15: 4776460.940 ops/s
Iteration  16: 4816108.304 ops/s
Iteration  17: 4843123.198 ops/s
Iteration  18: 4865058.615 ops/s
Iteration  19: 4887661.471 ops/s
Iteration  20: 4925217.332 ops/s
Iteration  21: 4910211.440 ops/s
Iteration  22: 4842611.340 ops/s
Iteration  23: 4909273.977 ops/s
Iteration  24: 4891734.294 ops/s
Iteration  25: 4830091.227 ops/s
Iteration  26: 4909929.183 ops/s
Iteration  27: 4893546.460 ops/s
Iteration  28: 4924624.912 ops/s
Iteration  29: 4862191.693 ops/s
Iteration  30: 4856154.411 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detectWithOptional":
  4870547.689 ±(99.9%) 39608.050 ops/s [Average]
  (min, avg, max) = (4774618.490, 4870547.689, 5033926.543), stdev = 59283.469
  CI (99.9%): [4830939.639, 4910155.739] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_detectWithOptional  thrpt   30  4870547.689 ± 39608.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detect_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detect_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2364718.406 ops/s
# Warmup Iteration   2: 5114298.973 ops/s
# Warmup Iteration   3: 4948933.126 ops/s
# Warmup Iteration   4: 4639264.245 ops/s
# Warmup Iteration   5: 5066405.417 ops/s
# Warmup Iteration   6: 5237572.368 ops/s
# Warmup Iteration   7: 5155455.299 ops/s
# Warmup Iteration   8: 4994711.156 ops/s
# Warmup Iteration   9: 5130427.138 ops/s
# Warmup Iteration  10: 5168332.104 ops/s
# Warmup Iteration  11: 5184442.015 ops/s
# Warmup Iteration  12: 5047370.744 ops/s
# Warmup Iteration  13: 5110834.009 ops/s
# Warmup Iteration  14: 5218535.090 ops/s
# Warmup Iteration  15: 5120441.025 ops/s
# Warmup Iteration  16: 5252725.793 ops/s
# Warmup Iteration  17: 5079669.574 ops/s
# Warmup Iteration  18: 5118928.263 ops/s
# Warmup Iteration  19: 5238035.021 ops/s
# Warmup Iteration  20: 5130150.559 ops/s
# Warmup Iteration  21: 5081998.394 ops/s
# Warmup Iteration  22: 5112566.862 ops/s
# Warmup Iteration  23: 5196259.788 ops/s
# Warmup Iteration  24: 5135523.750 ops/s
# Warmup Iteration  25: 5150932.202 ops/s
# Warmup Iteration  26: 5067215.745 ops/s
# Warmup Iteration  27: 5141384.413 ops/s
# Warmup Iteration  28: 5300866.298 ops/s
# Warmup Iteration  29: 5187461.643 ops/s
# Warmup Iteration  30: 5092228.447 ops/s
Iteration   1: 5228975.692 ops/s
Iteration   2: 5347399.190 ops/s
Iteration   3: 5456660.902 ops/s
Iteration   4: 5370386.138 ops/s
Iteration   5: 5062467.558 ops/s
Iteration   6: 5024202.184 ops/s
Iteration   7: 5046591.445 ops/s
Iteration   8: 5091354.612 ops/s
Iteration   9: 5146695.882 ops/s
Iteration  10: 5012185.113 ops/s
Iteration  11: 5108220.394 ops/s
Iteration  12: 5340327.662 ops/s
Iteration  13: 5093544.165 ops/s
Iteration  14: 5367659.011 ops/s
Iteration  15: 5194901.658 ops/s
Iteration  16: 5069230.911 ops/s
Iteration  17: 5035783.001 ops/s
Iteration  18: 5133541.672 ops/s
Iteration  19: 5112889.103 ops/s
Iteration  20: 5032975.097 ops/s
Iteration  21: 5251423.602 ops/s
Iteration  22: 5047794.347 ops/s
Iteration  23: 5155854.631 ops/s
Iteration  24: 5193255.005 ops/s
Iteration  25: 4992022.328 ops/s
Iteration  26: 5070914.211 ops/s
Iteration  27: 5105642.698 ops/s
Iteration  28: 5137768.562 ops/s
Iteration  29: 5114537.835 ops/s
Iteration  30: 5099999.326 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_detect_value":
  5148173.464 ±(99.9%) 81310.058 ops/s [Average]
  (min, avg, max) = (4992022.328, 5148173.464, 5456660.902), stdev = 121701.076
  CI (99.9%): [5066863.407, 5229483.522] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_detect_value  thrpt   30  5148173.464 ± 81310.058  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_entrySetEqualsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_entrySetEqualsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 536158.655 ops/s
# Warmup Iteration   2: 1107068.846 ops/s
# Warmup Iteration   3: 1235480.149 ops/s
# Warmup Iteration   4: 1197104.705 ops/s
# Warmup Iteration   5: 992072.449 ops/s
# Warmup Iteration   6: 1224874.115 ops/s
# Warmup Iteration   7: 1199335.255 ops/s
# Warmup Iteration   8: 1175412.407 ops/s
# Warmup Iteration   9: 1194047.377 ops/s
# Warmup Iteration  10: 1209754.378 ops/s
# Warmup Iteration  11: 1189570.076 ops/s
# Warmup Iteration  12: 1221534.676 ops/s
# Warmup Iteration  13: 1212603.225 ops/s
# Warmup Iteration  14: 1231977.506 ops/s
# Warmup Iteration  15: 1235989.599 ops/s
# Warmup Iteration  16: 1234607.357 ops/s
# Warmup Iteration  17: 1189949.134 ops/s
# Warmup Iteration  18: 1175848.353 ops/s
# Warmup Iteration  19: 1178254.507 ops/s
# Warmup Iteration  20: 1190524.209 ops/s
# Warmup Iteration  21: 1197185.274 ops/s
# Warmup Iteration  22: 1175851.636 ops/s
# Warmup Iteration  23: 1218020.877 ops/s
# Warmup Iteration  24: 1193379.928 ops/s
# Warmup Iteration  25: 1189819.018 ops/s
# Warmup Iteration  26: 1228088.774 ops/s
# Warmup Iteration  27: 1214829.797 ops/s
# Warmup Iteration  28: 1187620.211 ops/s
# Warmup Iteration  29: 1181355.821 ops/s
# Warmup Iteration  30: 1179376.691 ops/s
Iteration   1: 1181771.832 ops/s
Iteration   2: 1193636.348 ops/s
Iteration   3: 1184396.432 ops/s
Iteration   4: 1193127.829 ops/s
Iteration   5: 1181882.704 ops/s
Iteration   6: 1177070.954 ops/s
Iteration   7: 1175183.989 ops/s
Iteration   8: 1205354.959 ops/s
Iteration   9: 1184183.068 ops/s
Iteration  10: 1237579.112 ops/s
Iteration  11: 1216362.019 ops/s
Iteration  12: 1190924.655 ops/s
Iteration  13: 1181376.337 ops/s
Iteration  14: 1186506.631 ops/s
Iteration  15: 1196335.460 ops/s
Iteration  16: 1186087.069 ops/s
Iteration  17: 1158644.979 ops/s
Iteration  18: 1143498.397 ops/s
Iteration  19: 1192576.439 ops/s
Iteration  20: 1176940.496 ops/s
Iteration  21: 1171752.760 ops/s
Iteration  22: 1185231.276 ops/s
Iteration  23: 1177031.587 ops/s
Iteration  24: 1175195.450 ops/s
Iteration  25: 1178011.731 ops/s
Iteration  26: 1208661.184 ops/s
Iteration  27: 1185843.902 ops/s
Iteration  28: 1191961.080 ops/s
Iteration  29: 1169737.556 ops/s
Iteration  30: 1175061.212 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_entrySetEqualsAndHashCode":
  1185397.582 ±(99.9%) 11453.744 ops/s [Average]
  (min, avg, max) = (1143498.397, 1185397.582, 1237579.112), stdev = 17143.426
  CI (99.9%): [1173943.838, 1196851.325] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_entrySetEqualsAndHashCode  thrpt   30  1185397.582 ± 11453.744  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28923.321 ops/s
# Warmup Iteration   2: 43589.641 ops/s
# Warmup Iteration   3: 57767.284 ops/s
# Warmup Iteration   4: 58316.472 ops/s
# Warmup Iteration   5: 58319.512 ops/s
# Warmup Iteration   6: 58509.918 ops/s
# Warmup Iteration   7: 47783.107 ops/s
# Warmup Iteration   8: 57274.848 ops/s
# Warmup Iteration   9: 57969.232 ops/s
# Warmup Iteration  10: 57628.574 ops/s
# Warmup Iteration  11: 58474.588 ops/s
# Warmup Iteration  12: 58499.855 ops/s
# Warmup Iteration  13: 59843.394 ops/s
# Warmup Iteration  14: 58047.265 ops/s
# Warmup Iteration  15: 57361.607 ops/s
# Warmup Iteration  16: 59264.835 ops/s
# Warmup Iteration  17: 57963.459 ops/s
# Warmup Iteration  18: 58168.432 ops/s
# Warmup Iteration  19: 58365.431 ops/s
# Warmup Iteration  20: 59136.900 ops/s
# Warmup Iteration  21: 58702.876 ops/s
# Warmup Iteration  22: 59604.949 ops/s
# Warmup Iteration  23: 58402.816 ops/s
# Warmup Iteration  24: 59268.950 ops/s
# Warmup Iteration  25: 58243.480 ops/s
# Warmup Iteration  26: 58465.265 ops/s
# Warmup Iteration  27: 58814.086 ops/s
# Warmup Iteration  28: 58354.143 ops/s
# Warmup Iteration  29: 59618.995 ops/s
# Warmup Iteration  30: 60465.890 ops/s
Iteration   1: 59954.716 ops/s
Iteration   2: 61551.827 ops/s
Iteration   3: 60719.840 ops/s
Iteration   4: 57757.941 ops/s
Iteration   5: 57720.596 ops/s
Iteration   6: 58089.859 ops/s
Iteration   7: 58148.000 ops/s
Iteration   8: 58498.620 ops/s
Iteration   9: 58810.975 ops/s
Iteration  10: 58531.453 ops/s
Iteration  11: 57431.151 ops/s
Iteration  12: 58619.705 ops/s
Iteration  13: 59607.164 ops/s
Iteration  14: 57711.619 ops/s
Iteration  15: 58942.208 ops/s
Iteration  16: 58228.519 ops/s
Iteration  17: 59243.830 ops/s
Iteration  18: 58735.492 ops/s
Iteration  19: 58395.312 ops/s
Iteration  20: 57591.603 ops/s
Iteration  21: 59229.211 ops/s
Iteration  22: 61862.563 ops/s
Iteration  23: 61487.274 ops/s
Iteration  24: 61950.781 ops/s
Iteration  25: 61480.077 ops/s
Iteration  26: 61493.478 ops/s
Iteration  27: 61273.772 ops/s
Iteration  28: 61476.563 ops/s
Iteration  29: 61619.893 ops/s
Iteration  30: 57688.192 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_equalsAndHashCode":
  59461.741 ±(99.9%) 1055.168 ops/s [Average]
  (min, avg, max) = (57431.151, 59461.741, 61950.781), stdev = 1579.327
  CI (99.9%): [58406.573, 60516.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt      Score      Error  Units
HashBiMapTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  59461.741 ± 1055.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 405612.477 ops/s
# Warmup Iteration   2: 686132.411 ops/s
# Warmup Iteration   3: 843328.543 ops/s
# Warmup Iteration   4: 855350.150 ops/s
# Warmup Iteration   5: 855163.739 ops/s
# Warmup Iteration   6: 701318.206 ops/s
# Warmup Iteration   7: 844177.038 ops/s
# Warmup Iteration   8: 812616.809 ops/s
# Warmup Iteration   9: 819350.442 ops/s
# Warmup Iteration  10: 859124.255 ops/s
# Warmup Iteration  11: 853514.543 ops/s
# Warmup Iteration  12: 862283.652 ops/s
# Warmup Iteration  13: 842438.059 ops/s
# Warmup Iteration  14: 818908.119 ops/s
# Warmup Iteration  15: 823903.152 ops/s
# Warmup Iteration  16: 838917.924 ops/s
# Warmup Iteration  17: 850998.383 ops/s
# Warmup Iteration  18: 812351.190 ops/s
# Warmup Iteration  19: 820753.908 ops/s
# Warmup Iteration  20: 821508.320 ops/s
# Warmup Iteration  21: 809747.952 ops/s
# Warmup Iteration  22: 822265.915 ops/s
# Warmup Iteration  23: 816307.792 ops/s
# Warmup Iteration  24: 823713.345 ops/s
# Warmup Iteration  25: 822820.082 ops/s
# Warmup Iteration  26: 817940.393 ops/s
# Warmup Iteration  27: 819512.051 ops/s
# Warmup Iteration  28: 823181.993 ops/s
# Warmup Iteration  29: 830434.119 ops/s
# Warmup Iteration  30: 858103.918 ops/s
Iteration   1: 860357.757 ops/s
Iteration   2: 860898.714 ops/s
Iteration   3: 877362.270 ops/s
Iteration   4: 901997.203 ops/s
Iteration   5: 848115.540 ops/s
Iteration   6: 816029.576 ops/s
Iteration   7: 820101.267 ops/s
Iteration   8: 821875.855 ops/s
Iteration   9: 830911.084 ops/s
Iteration  10: 820621.204 ops/s
Iteration  11: 815464.148 ops/s
Iteration  12: 819914.532 ops/s
Iteration  13: 818401.050 ops/s
Iteration  14: 854995.641 ops/s
Iteration  15: 862602.153 ops/s
Iteration  16: 863539.314 ops/s
Iteration  17: 851586.581 ops/s
Iteration  18: 814148.481 ops/s
Iteration  19: 816732.625 ops/s
Iteration  20: 805619.808 ops/s
Iteration  21: 815392.310 ops/s
Iteration  22: 835862.729 ops/s
Iteration  23: 824154.219 ops/s
Iteration  24: 826944.268 ops/s
Iteration  25: 868613.538 ops/s
Iteration  26: 857784.276 ops/s
Iteration  27: 821231.871 ops/s
Iteration  28: 821837.517 ops/s
Iteration  29: 819590.800 ops/s
Iteration  30: 821912.068 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flatCollect":
  836486.613 ±(99.9%) 15905.672 ops/s [Average]
  (min, avg, max) = (805619.808, 836486.613, 901997.203), stdev = 23806.863
  CI (99.9%): [820580.941, 852392.285] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_flatCollect  thrpt   30  836486.613 ± 15905.672  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 180360.278 ops/s
# Warmup Iteration   2: 301956.891 ops/s
# Warmup Iteration   3: 369482.427 ops/s
# Warmup Iteration   4: 371371.331 ops/s
# Warmup Iteration   5: 366279.563 ops/s
# Warmup Iteration   6: 361511.114 ops/s
# Warmup Iteration   7: 302327.805 ops/s
# Warmup Iteration   8: 361912.282 ops/s
# Warmup Iteration   9: 374088.365 ops/s
# Warmup Iteration  10: 365238.595 ops/s
# Warmup Iteration  11: 367755.844 ops/s
# Warmup Iteration  12: 385159.071 ops/s
# Warmup Iteration  13: 374284.558 ops/s
# Warmup Iteration  14: 371273.418 ops/s
# Warmup Iteration  15: 376656.321 ops/s
# Warmup Iteration  16: 381490.895 ops/s
# Warmup Iteration  17: 366916.943 ops/s
# Warmup Iteration  18: 384736.720 ops/s
# Warmup Iteration  19: 379499.834 ops/s
# Warmup Iteration  20: 366193.746 ops/s
# Warmup Iteration  21: 373800.564 ops/s
# Warmup Iteration  22: 374017.003 ops/s
# Warmup Iteration  23: 364555.172 ops/s
# Warmup Iteration  24: 373839.336 ops/s
# Warmup Iteration  25: 367342.087 ops/s
# Warmup Iteration  26: 369517.162 ops/s
# Warmup Iteration  27: 368821.956 ops/s
# Warmup Iteration  28: 364923.714 ops/s
# Warmup Iteration  29: 371145.313 ops/s
# Warmup Iteration  30: 362427.759 ops/s
Iteration   1: 371944.769 ops/s
Iteration   2: 366758.161 ops/s
Iteration   3: 368495.367 ops/s
Iteration   4: 367021.675 ops/s
Iteration   5: 364487.831 ops/s
Iteration   6: 369341.327 ops/s
Iteration   7: 373797.632 ops/s
Iteration   8: 366074.185 ops/s
Iteration   9: 372254.335 ops/s
Iteration  10: 371849.074 ops/s
Iteration  11: 364311.538 ops/s
Iteration  12: 365532.682 ops/s
Iteration  13: 365991.695 ops/s
Iteration  14: 364202.174 ops/s
Iteration  15: 360970.863 ops/s
Iteration  16: 379004.431 ops/s
Iteration  17: 382919.375 ops/s
Iteration  18: 385518.761 ops/s
Iteration  19: 382679.115 ops/s
Iteration  20: 377902.988 ops/s
Iteration  21: 381564.796 ops/s
Iteration  22: 376466.073 ops/s
Iteration  23: 401180.161 ops/s
Iteration  24: 390152.517 ops/s
Iteration  25: 382186.137 ops/s
Iteration  26: 376393.487 ops/s
Iteration  27: 385613.518 ops/s
Iteration  28: 385593.667 ops/s
Iteration  29: 376610.712 ops/s
Iteration  30: 379522.927 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flatCollectWith":
  375211.399 ±(99.9%) 6252.667 ops/s [Average]
  (min, avg, max) = (360970.863, 375211.399, 401180.161), stdev = 9358.698
  CI (99.9%): [368958.733, 381464.066] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_flatCollectWith  thrpt   30  375211.399 ± 6252.667  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flatten_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flatten_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 305356.426 ops/s
# Warmup Iteration   2: 340215.472 ops/s
# Warmup Iteration   3: 488566.947 ops/s
# Warmup Iteration   4: 488551.376 ops/s
# Warmup Iteration   5: 476058.902 ops/s
# Warmup Iteration   6: 481580.082 ops/s
# Warmup Iteration   7: 487038.851 ops/s
# Warmup Iteration   8: 484119.936 ops/s
# Warmup Iteration   9: 481157.074 ops/s
# Warmup Iteration  10: 478602.111 ops/s
# Warmup Iteration  11: 417415.994 ops/s
# Warmup Iteration  12: 505069.921 ops/s
# Warmup Iteration  13: 489737.808 ops/s
# Warmup Iteration  14: 480620.683 ops/s
# Warmup Iteration  15: 517965.410 ops/s
# Warmup Iteration  16: 527459.403 ops/s
# Warmup Iteration  17: 523055.076 ops/s
# Warmup Iteration  18: 490035.135 ops/s
# Warmup Iteration  19: 502189.437 ops/s
# Warmup Iteration  20: 486805.336 ops/s
# Warmup Iteration  21: 492263.940 ops/s
# Warmup Iteration  22: 486167.436 ops/s
# Warmup Iteration  23: 486661.425 ops/s
# Warmup Iteration  24: 504577.316 ops/s
# Warmup Iteration  25: 502276.240 ops/s
# Warmup Iteration  26: 501704.049 ops/s
# Warmup Iteration  27: 526437.864 ops/s
# Warmup Iteration  28: 527727.259 ops/s
# Warmup Iteration  29: 528240.134 ops/s
# Warmup Iteration  30: 517465.778 ops/s
Iteration   1: 528399.894 ops/s
Iteration   2: 477102.413 ops/s
Iteration   3: 478305.903 ops/s
Iteration   4: 472803.357 ops/s
Iteration   5: 478350.076 ops/s
Iteration   6: 479092.575 ops/s
Iteration   7: 482068.486 ops/s
Iteration   8: 481619.836 ops/s
Iteration   9: 477351.873 ops/s
Iteration  10: 487905.312 ops/s
Iteration  11: 482040.056 ops/s
Iteration  12: 487188.149 ops/s
Iteration  13: 484173.313 ops/s
Iteration  14: 485214.569 ops/s
Iteration  15: 509561.699 ops/s
Iteration  16: 496953.006 ops/s
Iteration  17: 490546.479 ops/s
Iteration  18: 489490.440 ops/s
Iteration  19: 480918.176 ops/s
Iteration  20: 517844.592 ops/s
Iteration  21: 529261.951 ops/s
Iteration  22: 529674.790 ops/s
Iteration  23: 503228.303 ops/s
Iteration  24: 484314.814 ops/s
Iteration  25: 516652.230 ops/s
Iteration  26: 500393.796 ops/s
Iteration  27: 502006.365 ops/s
Iteration  28: 524897.897 ops/s
Iteration  29: 500173.900 ops/s
Iteration  30: 508893.843 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flatten_value":
  495547.603 ±(99.9%) 11824.384 ops/s [Average]
  (min, avg, max) = (472803.357, 495547.603, 529674.790), stdev = 17698.183
  CI (99.9%): [483723.219, 507371.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_flatten_value  thrpt   30  495547.603 ± 11824.384  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 226385.369 ops/s
# Warmup Iteration   2: 568706.093 ops/s
# Warmup Iteration   3: 634287.178 ops/s
# Warmup Iteration   4: 520963.308 ops/s
# Warmup Iteration   5: 613001.043 ops/s
# Warmup Iteration   6: 598945.382 ops/s
# Warmup Iteration   7: 596442.891 ops/s
# Warmup Iteration   8: 632106.824 ops/s
# Warmup Iteration   9: 641011.417 ops/s
# Warmup Iteration  10: 652139.165 ops/s
# Warmup Iteration  11: 646669.169 ops/s
# Warmup Iteration  12: 643409.734 ops/s
# Warmup Iteration  13: 637853.646 ops/s
# Warmup Iteration  14: 607813.365 ops/s
# Warmup Iteration  15: 648606.102 ops/s
# Warmup Iteration  16: 642767.836 ops/s
# Warmup Iteration  17: 589159.927 ops/s
# Warmup Iteration  18: 603740.553 ops/s
# Warmup Iteration  19: 615582.350 ops/s
# Warmup Iteration  20: 626237.116 ops/s
# Warmup Iteration  21: 610422.282 ops/s
# Warmup Iteration  22: 622653.295 ops/s
# Warmup Iteration  23: 644328.359 ops/s
# Warmup Iteration  24: 639396.772 ops/s
# Warmup Iteration  25: 608210.953 ops/s
# Warmup Iteration  26: 599392.441 ops/s
# Warmup Iteration  27: 603885.086 ops/s
# Warmup Iteration  28: 637741.339 ops/s
# Warmup Iteration  29: 636763.238 ops/s
# Warmup Iteration  30: 629855.677 ops/s
Iteration   1: 642607.640 ops/s
Iteration   2: 649791.232 ops/s
Iteration   3: 610397.110 ops/s
Iteration   4: 636006.489 ops/s
Iteration   5: 612189.843 ops/s
Iteration   6: 597359.783 ops/s
Iteration   7: 612586.544 ops/s
Iteration   8: 587729.986 ops/s
Iteration   9: 603104.133 ops/s
Iteration  10: 610112.961 ops/s
Iteration  11: 621469.208 ops/s
Iteration  12: 644885.499 ops/s
Iteration  13: 614323.516 ops/s
Iteration  14: 619708.582 ops/s
Iteration  15: 593670.680 ops/s
Iteration  16: 599123.008 ops/s
Iteration  17: 605368.596 ops/s
Iteration  18: 613958.421 ops/s
Iteration  19: 625728.169 ops/s
Iteration  20: 638651.080 ops/s
Iteration  21: 650211.360 ops/s
Iteration  22: 650805.443 ops/s
Iteration  23: 653464.577 ops/s
Iteration  24: 645939.286 ops/s
Iteration  25: 651797.714 ops/s
Iteration  26: 649194.098 ops/s
Iteration  27: 647127.643 ops/s
Iteration  28: 629994.287 ops/s
Iteration  29: 618552.989 ops/s
Iteration  30: 614007.088 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flip":
  624995.566 ±(99.9%) 13509.582 ops/s [Average]
  (min, avg, max) = (587729.986, 624995.566, 653464.577), stdev = 20220.508
  CI (99.9%): [611485.983, 638505.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_flip  thrpt   30  624995.566 ± 13509.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flipUniqueValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flipUniqueValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 589152.559 ops/s
# Warmup Iteration   2: 1288117.056 ops/s
# Warmup Iteration   3: 1277377.165 ops/s
# Warmup Iteration   4: 1151436.850 ops/s
# Warmup Iteration   5: 1350793.576 ops/s
# Warmup Iteration   6: 1291621.696 ops/s
# Warmup Iteration   7: 1284460.736 ops/s
# Warmup Iteration   8: 1300379.308 ops/s
# Warmup Iteration   9: 1303602.129 ops/s
# Warmup Iteration  10: 1332017.096 ops/s
# Warmup Iteration  11: 1372116.285 ops/s
# Warmup Iteration  12: 1311498.669 ops/s
# Warmup Iteration  13: 1299682.654 ops/s
# Warmup Iteration  14: 1313341.641 ops/s
# Warmup Iteration  15: 1306983.268 ops/s
# Warmup Iteration  16: 1306851.399 ops/s
# Warmup Iteration  17: 1354468.434 ops/s
# Warmup Iteration  18: 1308121.967 ops/s
# Warmup Iteration  19: 1317966.918 ops/s
# Warmup Iteration  20: 1345318.057 ops/s
# Warmup Iteration  21: 1336774.975 ops/s
# Warmup Iteration  22: 1301225.107 ops/s
# Warmup Iteration  23: 1295144.269 ops/s
# Warmup Iteration  24: 1288661.956 ops/s
# Warmup Iteration  25: 1296420.184 ops/s
# Warmup Iteration  26: 1287365.810 ops/s
# Warmup Iteration  27: 1282722.259 ops/s
# Warmup Iteration  28: 1293471.407 ops/s
# Warmup Iteration  29: 1300098.023 ops/s
# Warmup Iteration  30: 1301311.158 ops/s
Iteration   1: 1285791.025 ops/s
Iteration   2: 1277811.757 ops/s
Iteration   3: 1299880.243 ops/s
Iteration   4: 1308567.223 ops/s
Iteration   5: 1340046.553 ops/s
Iteration   6: 1408648.939 ops/s
Iteration   7: 1412060.205 ops/s
Iteration   8: 1405170.050 ops/s
Iteration   9: 1374878.223 ops/s
Iteration  10: 1288748.655 ops/s
Iteration  11: 1271485.631 ops/s
Iteration  12: 1286728.922 ops/s
Iteration  13: 1290840.700 ops/s
Iteration  14: 1275406.573 ops/s
Iteration  15: 1313874.394 ops/s
Iteration  16: 1284524.683 ops/s
Iteration  17: 1283608.702 ops/s
Iteration  18: 1288688.954 ops/s
Iteration  19: 1395241.802 ops/s
Iteration  20: 1383868.858 ops/s
Iteration  21: 1401834.540 ops/s
Iteration  22: 1318734.412 ops/s
Iteration  23: 1299515.706 ops/s
Iteration  24: 1291715.129 ops/s
Iteration  25: 1307049.600 ops/s
Iteration  26: 1298171.637 ops/s
Iteration  27: 1275789.061 ops/s
Iteration  28: 1300122.742 ops/s
Iteration  29: 1302827.250 ops/s
Iteration  30: 1306667.983 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_flipUniqueValues":
  1319276.672 ±(99.9%) 31009.692 ops/s [Average]
  (min, avg, max) = (1271485.631, 1319276.672, 1412060.205), stdev = 46413.851
  CI (99.9%): [1288266.980, 1350286.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_flipUniqueValues  thrpt   30  1319276.672 ± 31009.692  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 632532.127 ops/s
# Warmup Iteration   2: 1092863.814 ops/s
# Warmup Iteration   3: 1218585.757 ops/s
# Warmup Iteration   4: 1259412.734 ops/s
# Warmup Iteration   5: 1283328.631 ops/s
# Warmup Iteration   6: 1058966.503 ops/s
# Warmup Iteration   7: 1243680.875 ops/s
# Warmup Iteration   8: 1252098.399 ops/s
# Warmup Iteration   9: 1227124.897 ops/s
# Warmup Iteration  10: 1239169.265 ops/s
# Warmup Iteration  11: 1231005.043 ops/s
# Warmup Iteration  12: 1242933.498 ops/s
# Warmup Iteration  13: 1240129.492 ops/s
# Warmup Iteration  14: 1229136.874 ops/s
# Warmup Iteration  15: 1225079.637 ops/s
# Warmup Iteration  16: 1236747.286 ops/s
# Warmup Iteration  17: 1238154.665 ops/s
# Warmup Iteration  18: 1230448.358 ops/s
# Warmup Iteration  19: 1240464.233 ops/s
# Warmup Iteration  20: 1259469.683 ops/s
# Warmup Iteration  21: 1239852.181 ops/s
# Warmup Iteration  22: 1225012.090 ops/s
# Warmup Iteration  23: 1254223.937 ops/s
# Warmup Iteration  24: 1239193.696 ops/s
# Warmup Iteration  25: 1252838.513 ops/s
# Warmup Iteration  26: 1237494.894 ops/s
# Warmup Iteration  27: 1228851.973 ops/s
# Warmup Iteration  28: 1260917.332 ops/s
# Warmup Iteration  29: 1265942.611 ops/s
# Warmup Iteration  30: 1221829.797 ops/s
Iteration   1: 1243026.449 ops/s
Iteration   2: 1323033.422 ops/s
Iteration   3: 1261149.220 ops/s
Iteration   4: 1244261.341 ops/s
Iteration   5: 1296885.299 ops/s
Iteration   6: 1277129.891 ops/s
Iteration   7: 1278582.756 ops/s
Iteration   8: 1232550.102 ops/s
Iteration   9: 1221826.491 ops/s
Iteration  10: 1242381.031 ops/s
Iteration  11: 1229250.276 ops/s
Iteration  12: 1238170.549 ops/s
Iteration  13: 1232674.033 ops/s
Iteration  14: 1228275.574 ops/s
Iteration  15: 1237411.114 ops/s
Iteration  16: 1234757.926 ops/s
Iteration  17: 1261610.027 ops/s
Iteration  18: 1249186.910 ops/s
Iteration  19: 1226243.673 ops/s
Iteration  20: 1245960.009 ops/s
Iteration  21: 1257653.819 ops/s
Iteration  22: 1214797.544 ops/s
Iteration  23: 1254987.449 ops/s
Iteration  24: 1229473.734 ops/s
Iteration  25: 1244919.573 ops/s
Iteration  26: 1242267.091 ops/s
Iteration  27: 1268228.146 ops/s
Iteration  28: 1266855.372 ops/s
Iteration  29: 1229719.955 ops/s
Iteration  30: 1236818.400 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEach":
  1248336.239 ±(99.9%) 15616.884 ops/s [Average]
  (min, avg, max) = (1214797.544, 1248336.239, 1323033.422), stdev = 23374.618
  CI (99.9%): [1232719.356, 1263953.123] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_forEach  thrpt   30  1248336.239 ± 15616.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1546786.706 ops/s
# Warmup Iteration   2: 3746997.937 ops/s
# Warmup Iteration   3: 3180617.894 ops/s
# Warmup Iteration   4: 3740143.893 ops/s
# Warmup Iteration   5: 3887006.573 ops/s
# Warmup Iteration   6: 3816220.855 ops/s
# Warmup Iteration   7: 3761274.318 ops/s
# Warmup Iteration   8: 3794531.556 ops/s
# Warmup Iteration   9: 3821354.261 ops/s
# Warmup Iteration  10: 3804645.729 ops/s
# Warmup Iteration  11: 3850707.134 ops/s
# Warmup Iteration  12: 3823516.516 ops/s
# Warmup Iteration  13: 3854041.771 ops/s
# Warmup Iteration  14: 3831249.779 ops/s
# Warmup Iteration  15: 3771910.439 ops/s
# Warmup Iteration  16: 3827238.252 ops/s
# Warmup Iteration  17: 4108846.910 ops/s
# Warmup Iteration  18: 4122511.350 ops/s
# Warmup Iteration  19: 4131154.438 ops/s
# Warmup Iteration  20: 3909054.102 ops/s
# Warmup Iteration  21: 3780953.871 ops/s
# Warmup Iteration  22: 3766120.648 ops/s
# Warmup Iteration  23: 3901756.872 ops/s
# Warmup Iteration  24: 3791620.006 ops/s
# Warmup Iteration  25: 3857369.235 ops/s
# Warmup Iteration  26: 3801276.317 ops/s
# Warmup Iteration  27: 3835109.337 ops/s
# Warmup Iteration  28: 3803905.565 ops/s
# Warmup Iteration  29: 3801922.365 ops/s
# Warmup Iteration  30: 3834045.419 ops/s
Iteration   1: 3928698.714 ops/s
Iteration   2: 3887697.181 ops/s
Iteration   3: 3861072.113 ops/s
Iteration   4: 3981160.523 ops/s
Iteration   5: 3974635.686 ops/s
Iteration   6: 3916282.497 ops/s
Iteration   7: 3951096.705 ops/s
Iteration   8: 3934757.859 ops/s
Iteration   9: 3915245.796 ops/s
Iteration  10: 4012748.531 ops/s
Iteration  11: 3819425.492 ops/s
Iteration  12: 3775051.004 ops/s
Iteration  13: 3795601.404 ops/s
Iteration  14: 3880153.727 ops/s
Iteration  15: 3819535.219 ops/s
Iteration  16: 3985930.927 ops/s
Iteration  17: 4171225.541 ops/s
Iteration  18: 3912795.480 ops/s
Iteration  19: 3849183.722 ops/s
Iteration  20: 3800040.942 ops/s
Iteration  21: 3884062.089 ops/s
Iteration  22: 3821066.112 ops/s
Iteration  23: 3807917.886 ops/s
Iteration  24: 3794453.635 ops/s
Iteration  25: 3842987.146 ops/s
Iteration  26: 3891538.427 ops/s
Iteration  27: 3825686.549 ops/s
Iteration  28: 3817028.743 ops/s
Iteration  29: 3771202.480 ops/s
Iteration  30: 3792151.116 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachKey":
  3880681.108 ±(99.9%) 58730.285 ops/s [Average]
  (min, avg, max) = (3771202.480, 3880681.108, 4171225.541), stdev = 87904.733
  CI (99.9%): [3821950.823, 3939411.393] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_forEachKey  thrpt   30  3880681.108 ± 58730.285  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 358552.677 ops/s
# Warmup Iteration   2: 732870.777 ops/s
# Warmup Iteration   3: 825811.217 ops/s
# Warmup Iteration   4: 783643.293 ops/s
# Warmup Iteration   5: 660756.073 ops/s
# Warmup Iteration   6: 798347.731 ops/s
# Warmup Iteration   7: 824908.374 ops/s
# Warmup Iteration   8: 806658.221 ops/s
# Warmup Iteration   9: 791539.386 ops/s
# Warmup Iteration  10: 798785.441 ops/s
# Warmup Iteration  11: 808277.886 ops/s
# Warmup Iteration  12: 791070.244 ops/s
# Warmup Iteration  13: 808556.921 ops/s
# Warmup Iteration  14: 819136.955 ops/s
# Warmup Iteration  15: 830693.080 ops/s
# Warmup Iteration  16: 858865.305 ops/s
# Warmup Iteration  17: 807329.746 ops/s
# Warmup Iteration  18: 829036.622 ops/s
# Warmup Iteration  19: 844163.506 ops/s
# Warmup Iteration  20: 839848.526 ops/s
# Warmup Iteration  21: 809062.255 ops/s
# Warmup Iteration  22: 792838.510 ops/s
# Warmup Iteration  23: 837434.047 ops/s
# Warmup Iteration  24: 865507.712 ops/s
# Warmup Iteration  25: 828373.814 ops/s
# Warmup Iteration  26: 806018.290 ops/s
# Warmup Iteration  27: 793899.251 ops/s
# Warmup Iteration  28: 811775.254 ops/s
# Warmup Iteration  29: 825930.183 ops/s
# Warmup Iteration  30: 802871.375 ops/s
Iteration   1: 802981.173 ops/s
Iteration   2: 814640.821 ops/s
Iteration   3: 788218.454 ops/s
Iteration   4: 800011.034 ops/s
Iteration   5: 799088.327 ops/s
Iteration   6: 812512.926 ops/s
Iteration   7: 836928.588 ops/s
Iteration   8: 808135.524 ops/s
Iteration   9: 807387.500 ops/s
Iteration  10: 812100.517 ops/s
Iteration  11: 866180.633 ops/s
Iteration  12: 857840.148 ops/s
Iteration  13: 788796.697 ops/s
Iteration  14: 808632.911 ops/s
Iteration  15: 797557.515 ops/s
Iteration  16: 825173.196 ops/s
Iteration  17: 806736.797 ops/s
Iteration  18: 799774.797 ops/s
Iteration  19: 797356.801 ops/s
Iteration  20: 790911.888 ops/s
Iteration  21: 803366.458 ops/s
Iteration  22: 798894.087 ops/s
Iteration  23: 868454.234 ops/s
Iteration  24: 829383.542 ops/s
Iteration  25: 804401.002 ops/s
Iteration  26: 838629.583 ops/s
Iteration  27: 840398.159 ops/s
Iteration  28: 810731.906 ops/s
Iteration  29: 784910.186 ops/s
Iteration  30: 811526.855 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachKeyValue":
  813722.075 ±(99.9%) 14878.994 ops/s [Average]
  (min, avg, max) = (784910.186, 813722.075, 868454.234), stdev = 22270.180
  CI (99.9%): [798843.081, 828601.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_forEachKeyValue  thrpt   30  813722.075 ± 14878.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1264830.465 ops/s
# Warmup Iteration   2: 3338257.280 ops/s
# Warmup Iteration   3: 3564879.535 ops/s
# Warmup Iteration   4: 2836533.978 ops/s
# Warmup Iteration   5: 3487029.412 ops/s
# Warmup Iteration   6: 3699341.661 ops/s
# Warmup Iteration   7: 3456956.655 ops/s
# Warmup Iteration   8: 3518853.046 ops/s
# Warmup Iteration   9: 3388124.347 ops/s
# Warmup Iteration  10: 3396274.799 ops/s
# Warmup Iteration  11: 3580128.200 ops/s
# Warmup Iteration  12: 3618957.657 ops/s
# Warmup Iteration  13: 3471999.317 ops/s
# Warmup Iteration  14: 3455163.781 ops/s
# Warmup Iteration  15: 3386676.600 ops/s
# Warmup Iteration  16: 3502679.982 ops/s
# Warmup Iteration  17: 3440384.411 ops/s
# Warmup Iteration  18: 3395919.330 ops/s
# Warmup Iteration  19: 3447604.102 ops/s
# Warmup Iteration  20: 3565388.120 ops/s
# Warmup Iteration  21: 3461662.871 ops/s
# Warmup Iteration  22: 3596127.272 ops/s
# Warmup Iteration  23: 3505337.065 ops/s
# Warmup Iteration  24: 3448370.840 ops/s
# Warmup Iteration  25: 3516671.090 ops/s
# Warmup Iteration  26: 3413436.384 ops/s
# Warmup Iteration  27: 3485874.726 ops/s
# Warmup Iteration  28: 3407427.978 ops/s
# Warmup Iteration  29: 3674303.361 ops/s
# Warmup Iteration  30: 3521783.606 ops/s
Iteration   1: 3441460.727 ops/s
Iteration   2: 3418351.189 ops/s
Iteration   3: 3503340.942 ops/s
Iteration   4: 3707436.111 ops/s
Iteration   5: 3583536.927 ops/s
Iteration   6: 3498283.016 ops/s
Iteration   7: 3406650.675 ops/s
Iteration   8: 3404110.723 ops/s
Iteration   9: 3418608.456 ops/s
Iteration  10: 3382220.485 ops/s
Iteration  11: 3406957.317 ops/s
Iteration  12: 3529728.741 ops/s
Iteration  13: 3526400.746 ops/s
Iteration  14: 3449112.413 ops/s
Iteration  15: 3443029.895 ops/s
Iteration  16: 3618576.515 ops/s
Iteration  17: 3603280.931 ops/s
Iteration  18: 3366229.709 ops/s
Iteration  19: 3404257.612 ops/s
Iteration  20: 3541663.389 ops/s
Iteration  21: 3367172.508 ops/s
Iteration  22: 3371326.042 ops/s
Iteration  23: 3327210.040 ops/s
Iteration  24: 3373244.555 ops/s
Iteration  25: 3607005.331 ops/s
Iteration  26: 3665625.851 ops/s
Iteration  27: 3676665.448 ops/s
Iteration  28: 3703022.087 ops/s
Iteration  29: 3480310.800 ops/s
Iteration  30: 3534089.314 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachValue":
  3491963.616 ±(99.9%) 74352.853 ops/s [Average]
  (min, avg, max) = (3327210.040, 3491963.616, 3707436.111), stdev = 111287.859
  CI (99.9%): [3417610.763, 3566316.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_forEachValue  thrpt   30  3491963.616 ± 74352.853  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1110537.479 ops/s
# Warmup Iteration   2: 2844486.546 ops/s
# Warmup Iteration   3: 2827543.749 ops/s
# Warmup Iteration   4: 2310259.219 ops/s
# Warmup Iteration   5: 2811334.173 ops/s
# Warmup Iteration   6: 2783061.610 ops/s
# Warmup Iteration   7: 2833530.507 ops/s
# Warmup Iteration   8: 2753882.249 ops/s
# Warmup Iteration   9: 2786218.517 ops/s
# Warmup Iteration  10: 2780944.327 ops/s
# Warmup Iteration  11: 2714006.471 ops/s
# Warmup Iteration  12: 2737506.599 ops/s
# Warmup Iteration  13: 2733360.001 ops/s
# Warmup Iteration  14: 2705089.396 ops/s
# Warmup Iteration  15: 2788859.298 ops/s
# Warmup Iteration  16: 2722646.964 ops/s
# Warmup Iteration  17: 2720039.078 ops/s
# Warmup Iteration  18: 2755487.775 ops/s
# Warmup Iteration  19: 2742713.178 ops/s
# Warmup Iteration  20: 2752063.236 ops/s
# Warmup Iteration  21: 2949920.651 ops/s
# Warmup Iteration  22: 2924157.344 ops/s
# Warmup Iteration  23: 2787756.403 ops/s
# Warmup Iteration  24: 2746785.598 ops/s
# Warmup Iteration  25: 2827032.714 ops/s
# Warmup Iteration  26: 2697203.806 ops/s
# Warmup Iteration  27: 2822766.832 ops/s
# Warmup Iteration  28: 2838918.989 ops/s
# Warmup Iteration  29: 2861640.441 ops/s
# Warmup Iteration  30: 2891614.501 ops/s
Iteration   1: 2918827.164 ops/s
Iteration   2: 2743672.955 ops/s
Iteration   3: 2699838.766 ops/s
Iteration   4: 2689733.161 ops/s
Iteration   5: 2710890.100 ops/s
Iteration   6: 2786551.305 ops/s
Iteration   7: 2808803.836 ops/s
Iteration   8: 2725374.286 ops/s
Iteration   9: 2884023.380 ops/s
Iteration  10: 2817673.572 ops/s
Iteration  11: 2836672.139 ops/s
Iteration  12: 2823799.933 ops/s
Iteration  13: 2832121.684 ops/s
Iteration  14: 2818035.013 ops/s
Iteration  15: 2877171.609 ops/s
Iteration  16: 2760556.751 ops/s
Iteration  17: 2800485.370 ops/s
Iteration  18: 2697398.387 ops/s
Iteration  19: 2670765.736 ops/s
Iteration  20: 2756284.277 ops/s
Iteration  21: 2666617.221 ops/s
Iteration  22: 2742696.603 ops/s
Iteration  23: 2691744.432 ops/s
Iteration  24: 2742499.955 ops/s
Iteration  25: 2778197.365 ops/s
Iteration  26: 2702609.408 ops/s
Iteration  27: 2737082.465 ops/s
Iteration  28: 2749856.148 ops/s
Iteration  29: 2744144.865 ops/s
Iteration  30: 2732335.939 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachWith":
  2764882.127 ±(99.9%) 43648.671 ops/s [Average]
  (min, avg, max) = (2666617.221, 2764882.127, 2918827.164), stdev = 65331.281
  CI (99.9%): [2721233.456, 2808530.799] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_forEachWith  thrpt   30  2764882.127 ± 43648.671  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 814603.666 ops/s
# Warmup Iteration   2: 1996380.724 ops/s
# Warmup Iteration   3: 2050984.315 ops/s
# Warmup Iteration   4: 1698400.293 ops/s
# Warmup Iteration   5: 2081578.524 ops/s
# Warmup Iteration   6: 2095157.146 ops/s
# Warmup Iteration   7: 2140477.205 ops/s
# Warmup Iteration   8: 2111578.727 ops/s
# Warmup Iteration   9: 2072560.864 ops/s
# Warmup Iteration  10: 2065953.660 ops/s
# Warmup Iteration  11: 2139343.371 ops/s
# Warmup Iteration  12: 2128868.950 ops/s
# Warmup Iteration  13: 2117901.647 ops/s
# Warmup Iteration  14: 2099611.235 ops/s
# Warmup Iteration  15: 2116997.433 ops/s
# Warmup Iteration  16: 2036053.880 ops/s
# Warmup Iteration  17: 2092038.404 ops/s
# Warmup Iteration  18: 2065455.279 ops/s
# Warmup Iteration  19: 2106932.756 ops/s
# Warmup Iteration  20: 2131229.240 ops/s
# Warmup Iteration  21: 2147588.900 ops/s
# Warmup Iteration  22: 2136934.326 ops/s
# Warmup Iteration  23: 2132856.172 ops/s
# Warmup Iteration  24: 2125275.150 ops/s
# Warmup Iteration  25: 2065682.888 ops/s
# Warmup Iteration  26: 2097914.576 ops/s
# Warmup Iteration  27: 2112286.336 ops/s
# Warmup Iteration  28: 2105840.079 ops/s
# Warmup Iteration  29: 2104181.347 ops/s
# Warmup Iteration  30: 2136699.312 ops/s
Iteration   1: 2064982.088 ops/s
Iteration   2: 2090506.318 ops/s
Iteration   3: 2101260.691 ops/s
Iteration   4: 2074252.968 ops/s
Iteration   5: 2047868.786 ops/s
Iteration   6: 2059488.112 ops/s
Iteration   7: 2128868.348 ops/s
Iteration   8: 2161476.941 ops/s
Iteration   9: 2187238.375 ops/s
Iteration  10: 2139506.895 ops/s
Iteration  11: 2091879.354 ops/s
Iteration  12: 2124788.592 ops/s
Iteration  13: 2181666.733 ops/s
Iteration  14: 2126967.080 ops/s
Iteration  15: 2162060.133 ops/s
Iteration  16: 2041063.735 ops/s
Iteration  17: 2083707.801 ops/s
Iteration  18: 2085179.256 ops/s
Iteration  19: 2044459.031 ops/s
Iteration  20: 2059870.642 ops/s
Iteration  21: 2031083.639 ops/s
Iteration  22: 2066908.826 ops/s
Iteration  23: 2119167.731 ops/s
Iteration  24: 2107549.103 ops/s
Iteration  25: 2250481.145 ops/s
Iteration  26: 2257151.254 ops/s
Iteration  27: 2241286.798 ops/s
Iteration  28: 2164116.075 ops/s
Iteration  29: 2176117.411 ops/s
Iteration  30: 2150710.352 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forEachWithIndex":
  2120722.140 ±(99.9%) 41865.825 ops/s [Average]
  (min, avg, max) = (2031083.639, 2120722.140, 2257151.254), stdev = 62662.801
  CI (99.9%): [2078856.316, 2162587.965] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  2120722.140 ± 41865.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forcePut$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forcePut

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 198681.559 ops/s
# Warmup Iteration   2: 394506.856 ops/s
# Warmup Iteration   3: 440816.940 ops/s
# Warmup Iteration   4: 444625.276 ops/s
# Warmup Iteration   5: 352613.863 ops/s
# Warmup Iteration   6: 418947.495 ops/s
# Warmup Iteration   7: 427927.863 ops/s
# Warmup Iteration   8: 420176.430 ops/s
# Warmup Iteration   9: 426596.910 ops/s
# Warmup Iteration  10: 440870.150 ops/s
# Warmup Iteration  11: 423455.816 ops/s
# Warmup Iteration  12: 438209.339 ops/s
# Warmup Iteration  13: 418943.482 ops/s
# Warmup Iteration  14: 450601.104 ops/s
# Warmup Iteration  15: 438682.659 ops/s
# Warmup Iteration  16: 435911.089 ops/s
# Warmup Iteration  17: 427006.499 ops/s
# Warmup Iteration  18: 415547.366 ops/s
# Warmup Iteration  19: 418087.618 ops/s
# Warmup Iteration  20: 415781.896 ops/s
# Warmup Iteration  21: 428391.567 ops/s
# Warmup Iteration  22: 416562.247 ops/s
# Warmup Iteration  23: 416598.013 ops/s
# Warmup Iteration  24: 416964.736 ops/s
# Warmup Iteration  25: 422078.929 ops/s
# Warmup Iteration  26: 432293.898 ops/s
# Warmup Iteration  27: 420335.473 ops/s
# Warmup Iteration  28: 425487.199 ops/s
# Warmup Iteration  29: 437181.880 ops/s
# Warmup Iteration  30: 441205.891 ops/s
Iteration   1: 432759.930 ops/s
Iteration   2: 431092.565 ops/s
Iteration   3: 415962.284 ops/s
Iteration   4: 421986.082 ops/s
Iteration   5: 425569.253 ops/s
Iteration   6: 436384.742 ops/s
Iteration   7: 426877.897 ops/s
Iteration   8: 434482.099 ops/s
Iteration   9: 436608.572 ops/s
Iteration  10: 439166.921 ops/s
Iteration  11: 429142.730 ops/s
Iteration  12: 421614.789 ops/s
Iteration  13: 420790.280 ops/s
Iteration  14: 415193.364 ops/s
Iteration  15: 414685.197 ops/s
Iteration  16: 420201.009 ops/s
Iteration  17: 417612.246 ops/s
Iteration  18: 434791.781 ops/s
Iteration  19: 435652.298 ops/s
Iteration  20: 419639.094 ops/s
Iteration  21: 416748.822 ops/s
Iteration  22: 411792.695 ops/s
Iteration  23: 441693.464 ops/s
Iteration  24: 452278.224 ops/s
Iteration  25: 454902.704 ops/s
Iteration  26: 425852.193 ops/s
Iteration  27: 426897.309 ops/s
Iteration  28: 434510.571 ops/s
Iteration  29: 430212.727 ops/s
Iteration  30: 424704.156 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forcePut":
  428326.867 ±(99.9%) 7084.775 ops/s [Average]
  (min, avg, max) = (411792.695, 428326.867, 454902.704), stdev = 10604.158
  CI (99.9%): [421242.092, 435411.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_forcePut  thrpt   30  428326.867 ± 7084.775  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forcePut_inverseKeyAndValuePreservation$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forcePut_inverseKeyAndValuePreservation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 621317.133 ops/s
# Warmup Iteration   2: 893798.903 ops/s
# Warmup Iteration   3: 1332098.669 ops/s
# Warmup Iteration   4: 1340637.944 ops/s
# Warmup Iteration   5: 1267367.496 ops/s
# Warmup Iteration   6: 1247796.097 ops/s
# Warmup Iteration   7: 1079895.944 ops/s
# Warmup Iteration   8: 1318682.345 ops/s
# Warmup Iteration   9: 1303089.158 ops/s
# Warmup Iteration  10: 1276401.304 ops/s
# Warmup Iteration  11: 1286696.230 ops/s
# Warmup Iteration  12: 1271547.909 ops/s
# Warmup Iteration  13: 1256781.044 ops/s
# Warmup Iteration  14: 1239244.415 ops/s
# Warmup Iteration  15: 1238584.837 ops/s
# Warmup Iteration  16: 1304186.316 ops/s
# Warmup Iteration  17: 1272957.921 ops/s
# Warmup Iteration  18: 1211863.590 ops/s
# Warmup Iteration  19: 1215049.984 ops/s
# Warmup Iteration  20: 1244495.192 ops/s
# Warmup Iteration  21: 1293634.342 ops/s
# Warmup Iteration  22: 1263169.510 ops/s
# Warmup Iteration  23: 1271235.175 ops/s
# Warmup Iteration  24: 1219092.381 ops/s
# Warmup Iteration  25: 1210589.923 ops/s
# Warmup Iteration  26: 1222898.432 ops/s
# Warmup Iteration  27: 1287531.617 ops/s
# Warmup Iteration  28: 1256156.524 ops/s
# Warmup Iteration  29: 1239897.428 ops/s
# Warmup Iteration  30: 1226102.263 ops/s
Iteration   1: 1221608.168 ops/s
Iteration   2: 1281965.894 ops/s
Iteration   3: 1276996.213 ops/s
Iteration   4: 1279845.962 ops/s
Iteration   5: 1347730.303 ops/s
Iteration   6: 1265457.467 ops/s
Iteration   7: 1216487.060 ops/s
Iteration   8: 1213677.836 ops/s
Iteration   9: 1240135.715 ops/s
Iteration  10: 1216475.276 ops/s
Iteration  11: 1249976.641 ops/s
Iteration  12: 1233421.637 ops/s
Iteration  13: 1245882.184 ops/s
Iteration  14: 1316977.206 ops/s
Iteration  15: 1275211.413 ops/s
Iteration  16: 1207140.639 ops/s
Iteration  17: 1231141.416 ops/s
Iteration  18: 1222569.011 ops/s
Iteration  19: 1223241.437 ops/s
Iteration  20: 1213908.021 ops/s
Iteration  21: 1208893.271 ops/s
Iteration  22: 1237146.402 ops/s
Iteration  23: 1270846.648 ops/s
Iteration  24: 1233952.214 ops/s
Iteration  25: 1237502.497 ops/s
Iteration  26: 1203628.881 ops/s
Iteration  27: 1231418.873 ops/s
Iteration  28: 1234207.346 ops/s
Iteration  29: 1216869.048 ops/s
Iteration  30: 1207425.648 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_forcePut_inverseKeyAndValuePreservation":
  1242058.011 ±(99.9%) 22790.426 ops/s [Average]
  (min, avg, max) = (1203628.881, 1242058.011, 1347730.303), stdev = 34111.639
  CI (99.9%): [1219267.585, 1264848.437] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_forcePut_inverseKeyAndValuePreservation  thrpt   30  1242058.011 ± 22790.426  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 653990.516 ops/s
# Warmup Iteration   2: 1380228.826 ops/s
# Warmup Iteration   3: 1442985.298 ops/s
# Warmup Iteration   4: 1444522.508 ops/s
# Warmup Iteration   5: 1181429.624 ops/s
# Warmup Iteration   6: 1436054.286 ops/s
# Warmup Iteration   7: 1427211.386 ops/s
# Warmup Iteration   8: 1435560.560 ops/s
# Warmup Iteration   9: 1475876.397 ops/s
# Warmup Iteration  10: 1478144.745 ops/s
# Warmup Iteration  11: 1421261.803 ops/s
# Warmup Iteration  12: 1434888.983 ops/s
# Warmup Iteration  13: 1439654.121 ops/s
# Warmup Iteration  14: 1433313.572 ops/s
# Warmup Iteration  15: 1418718.062 ops/s
# Warmup Iteration  16: 1425837.365 ops/s
# Warmup Iteration  17: 1446197.743 ops/s
# Warmup Iteration  18: 1430084.977 ops/s
# Warmup Iteration  19: 1430030.218 ops/s
# Warmup Iteration  20: 1450133.954 ops/s
# Warmup Iteration  21: 1448361.667 ops/s
# Warmup Iteration  22: 1454253.791 ops/s
# Warmup Iteration  23: 1437523.375 ops/s
# Warmup Iteration  24: 1414181.926 ops/s
# Warmup Iteration  25: 1446112.868 ops/s
# Warmup Iteration  26: 1463575.384 ops/s
# Warmup Iteration  27: 1451139.225 ops/s
# Warmup Iteration  28: 1438299.690 ops/s
# Warmup Iteration  29: 1413805.705 ops/s
# Warmup Iteration  30: 1437159.077 ops/s
Iteration   1: 1419624.523 ops/s
Iteration   2: 1402734.264 ops/s
Iteration   3: 1440357.162 ops/s
Iteration   4: 1506690.538 ops/s
Iteration   5: 1495963.849 ops/s
Iteration   6: 1461157.485 ops/s
Iteration   7: 1489177.220 ops/s
Iteration   8: 1426651.168 ops/s
Iteration   9: 1470800.965 ops/s
Iteration  10: 1513023.283 ops/s
Iteration  11: 1494089.795 ops/s
Iteration  12: 1436317.780 ops/s
Iteration  13: 1460488.264 ops/s
Iteration  14: 1436595.287 ops/s
Iteration  15: 1427984.798 ops/s
Iteration  16: 1407666.221 ops/s
Iteration  17: 1432512.754 ops/s
Iteration  18: 1434502.828 ops/s
Iteration  19: 1412108.117 ops/s
Iteration  20: 1427374.131 ops/s
Iteration  21: 1434153.582 ops/s
Iteration  22: 1481702.544 ops/s
Iteration  23: 1496135.750 ops/s
Iteration  24: 1470177.806 ops/s
Iteration  25: 1496651.906 ops/s
Iteration  26: 1476100.664 ops/s
Iteration  27: 1470729.055 ops/s
Iteration  28: 1441373.681 ops/s
Iteration  29: 1410683.814 ops/s
Iteration  30: 1423175.431 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_get":
  1453223.489 ±(99.9%) 22013.767 ops/s [Average]
  (min, avg, max) = (1402734.264, 1453223.489, 1513023.283), stdev = 32949.173
  CI (99.9%): [1431209.722, 1475237.256] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_get  thrpt   30  1453223.489 ± 22013.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 953837.577 ops/s
# Warmup Iteration   2: 2452600.475 ops/s
# Warmup Iteration   3: 2270527.896 ops/s
# Warmup Iteration   4: 2348561.077 ops/s
# Warmup Iteration   5: 2511486.852 ops/s
# Warmup Iteration   6: 2503759.038 ops/s
# Warmup Iteration   7: 2532862.024 ops/s
# Warmup Iteration   8: 2472303.675 ops/s
# Warmup Iteration   9: 2465774.815 ops/s
# Warmup Iteration  10: 2483689.280 ops/s
# Warmup Iteration  11: 2512159.450 ops/s
# Warmup Iteration  12: 2519611.916 ops/s
# Warmup Iteration  13: 2489250.976 ops/s
# Warmup Iteration  14: 2565983.287 ops/s
# Warmup Iteration  15: 2644308.447 ops/s
# Warmup Iteration  16: 2500957.842 ops/s
# Warmup Iteration  17: 2468466.530 ops/s
# Warmup Iteration  18: 2586381.073 ops/s
# Warmup Iteration  19: 2551069.028 ops/s
# Warmup Iteration  20: 2573943.446 ops/s
# Warmup Iteration  21: 2503055.202 ops/s
# Warmup Iteration  22: 2530920.954 ops/s
# Warmup Iteration  23: 2487668.331 ops/s
# Warmup Iteration  24: 2648055.121 ops/s
# Warmup Iteration  25: 2570824.832 ops/s
# Warmup Iteration  26: 2604328.904 ops/s
# Warmup Iteration  27: 2511735.804 ops/s
# Warmup Iteration  28: 2493660.161 ops/s
# Warmup Iteration  29: 2625240.811 ops/s
# Warmup Iteration  30: 2705317.987 ops/s
Iteration   1: 2661426.159 ops/s
Iteration   2: 2650392.991 ops/s
Iteration   3: 2502022.758 ops/s
Iteration   4: 2617179.704 ops/s
Iteration   5: 2579551.161 ops/s
Iteration   6: 2428503.162 ops/s
Iteration   7: 2566397.186 ops/s
Iteration   8: 2471341.078 ops/s
Iteration   9: 2596595.647 ops/s
Iteration  10: 2505908.871 ops/s
Iteration  11: 2456295.289 ops/s
Iteration  12: 2510815.682 ops/s
Iteration  13: 2471681.755 ops/s
Iteration  14: 2439089.319 ops/s
Iteration  15: 2445156.506 ops/s
Iteration  16: 2443544.104 ops/s
Iteration  17: 2455884.807 ops/s
Iteration  18: 2467005.557 ops/s
Iteration  19: 2449484.734 ops/s
Iteration  20: 2477100.992 ops/s
Iteration  21: 2449278.297 ops/s
Iteration  22: 2465859.358 ops/s
Iteration  23: 2487458.058 ops/s
Iteration  24: 2474844.111 ops/s
Iteration  25: 2505206.967 ops/s
Iteration  26: 2426955.334 ops/s
Iteration  27: 2505664.009 ops/s
Iteration  28: 2461256.601 ops/s
Iteration  29: 2469640.360 ops/s
Iteration  30: 2501763.237 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getFirst":
  2498110.127 ±(99.9%) 42894.063 ops/s [Average]
  (min, avg, max) = (2426955.334, 2498110.127, 2661426.159), stdev = 64201.818
  CI (99.9%): [2455216.064, 2541004.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_getFirst  thrpt   30  2498110.127 ± 42894.063  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsent$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsent

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2715661.838 ops/s
# Warmup Iteration   2: 5886252.080 ops/s
# Warmup Iteration   3: 5294598.139 ops/s
# Warmup Iteration   4: 6051192.774 ops/s
# Warmup Iteration   5: 6208179.577 ops/s
# Warmup Iteration   6: 5999741.244 ops/s
# Warmup Iteration   7: 6149715.911 ops/s
# Warmup Iteration   8: 5936832.077 ops/s
# Warmup Iteration   9: 6245206.455 ops/s
# Warmup Iteration  10: 6033033.187 ops/s
# Warmup Iteration  11: 6191858.994 ops/s
# Warmup Iteration  12: 6274994.589 ops/s
# Warmup Iteration  13: 5986379.174 ops/s
# Warmup Iteration  14: 6076851.781 ops/s
# Warmup Iteration  15: 6212889.491 ops/s
# Warmup Iteration  16: 6115436.016 ops/s
# Warmup Iteration  17: 6076908.679 ops/s
# Warmup Iteration  18: 5983391.836 ops/s
# Warmup Iteration  19: 6000926.320 ops/s
# Warmup Iteration  20: 6036739.932 ops/s
# Warmup Iteration  21: 5947021.011 ops/s
# Warmup Iteration  22: 6144603.608 ops/s
# Warmup Iteration  23: 6004743.340 ops/s
# Warmup Iteration  24: 6189268.393 ops/s
# Warmup Iteration  25: 6233644.668 ops/s
# Warmup Iteration  26: 6133909.482 ops/s
# Warmup Iteration  27: 6173883.767 ops/s
# Warmup Iteration  28: 5979103.287 ops/s
# Warmup Iteration  29: 6169537.868 ops/s
# Warmup Iteration  30: 6231451.335 ops/s
Iteration   1: 6186765.686 ops/s
Iteration   2: 5988274.066 ops/s
Iteration   3: 6055891.868 ops/s
Iteration   4: 6052771.891 ops/s
Iteration   5: 6196292.885 ops/s
Iteration   6: 6086396.309 ops/s
Iteration   7: 6201635.894 ops/s
Iteration   8: 6590769.289 ops/s
Iteration   9: 6581747.940 ops/s
Iteration  10: 6541660.678 ops/s
Iteration  11: 6265405.148 ops/s
Iteration  12: 6579485.783 ops/s
Iteration  13: 6581416.649 ops/s
Iteration  14: 6413288.051 ops/s
Iteration  15: 6408571.904 ops/s
Iteration  16: 6276236.899 ops/s
Iteration  17: 6237233.107 ops/s
Iteration  18: 6619897.613 ops/s
Iteration  19: 6411322.766 ops/s
Iteration  20: 6131561.449 ops/s
Iteration  21: 6107122.276 ops/s
Iteration  22: 6157151.635 ops/s
Iteration  23: 6470608.827 ops/s
Iteration  24: 6430089.305 ops/s
Iteration  25: 6017089.889 ops/s
Iteration  26: 5979453.371 ops/s
Iteration  27: 6252697.400 ops/s
Iteration  28: 6314728.930 ops/s
Iteration  29: 6365113.913 ops/s
Iteration  30: 6467154.898 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsent":
  6298927.877 ±(99.9%) 134245.920 ops/s [Average]
  (min, avg, max) = (5979453.371, 6298927.877, 6619897.613), stdev = 200932.988
  CI (99.9%): [6164681.958, 6433173.797] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score        Error  Units
HashBiMapTest._Benchmark.benchmark_getIfAbsent  thrpt   30  6298927.877 ± 134245.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPut$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPut

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1976504.310 ops/s
# Warmup Iteration   2: 5371134.394 ops/s
# Warmup Iteration   3: 5567394.325 ops/s
# Warmup Iteration   4: 4412516.485 ops/s
# Warmup Iteration   5: 5295789.153 ops/s
# Warmup Iteration   6: 5108641.927 ops/s
# Warmup Iteration   7: 5422510.522 ops/s
# Warmup Iteration   8: 5106468.502 ops/s
# Warmup Iteration   9: 5378174.841 ops/s
# Warmup Iteration  10: 5389242.914 ops/s
# Warmup Iteration  11: 5175261.096 ops/s
# Warmup Iteration  12: 5239068.938 ops/s
# Warmup Iteration  13: 5190813.137 ops/s
# Warmup Iteration  14: 5214328.184 ops/s
# Warmup Iteration  15: 5174961.575 ops/s
# Warmup Iteration  16: 5142658.896 ops/s
# Warmup Iteration  17: 5368910.796 ops/s
# Warmup Iteration  18: 5323005.257 ops/s
# Warmup Iteration  19: 5355677.164 ops/s
# Warmup Iteration  20: 5235611.815 ops/s
# Warmup Iteration  21: 5147616.999 ops/s
# Warmup Iteration  22: 5417452.789 ops/s
# Warmup Iteration  23: 5180491.676 ops/s
# Warmup Iteration  24: 5253954.801 ops/s
# Warmup Iteration  25: 5149775.844 ops/s
# Warmup Iteration  26: 5184957.087 ops/s
# Warmup Iteration  27: 5179700.264 ops/s
# Warmup Iteration  28: 5097260.294 ops/s
# Warmup Iteration  29: 5184532.510 ops/s
# Warmup Iteration  30: 5352858.056 ops/s
Iteration   1: 5166779.976 ops/s
Iteration   2: 5142789.121 ops/s
Iteration   3: 5212241.355 ops/s
Iteration   4: 5135795.095 ops/s
Iteration   5: 5125800.744 ops/s
Iteration   6: 5172979.119 ops/s
Iteration   7: 5249980.297 ops/s
Iteration   8: 5210271.482 ops/s
Iteration   9: 5273723.365 ops/s
Iteration  10: 5328512.421 ops/s
Iteration  11: 5111687.591 ops/s
Iteration  12: 5179084.428 ops/s
Iteration  13: 5264485.842 ops/s
Iteration  14: 5213770.654 ops/s
Iteration  15: 5631039.905 ops/s
Iteration  16: 5645131.133 ops/s
Iteration  17: 5556573.283 ops/s
Iteration  18: 5621537.368 ops/s
Iteration  19: 5523630.430 ops/s
Iteration  20: 5213794.507 ops/s
Iteration  21: 5186248.493 ops/s
Iteration  22: 5211414.502 ops/s
Iteration  23: 5228675.920 ops/s
Iteration  24: 5147210.224 ops/s
Iteration  25: 5252406.468 ops/s
Iteration  26: 5133134.232 ops/s
Iteration  27: 5147889.663 ops/s
Iteration  28: 5207076.405 ops/s
Iteration  29: 5197124.410 ops/s
Iteration  30: 5128393.190 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPut":
  5260639.387 ±(99.9%) 107762.731 ops/s [Average]
  (min, avg, max) = (5111687.591, 5260639.387, 5645131.133), stdev = 161294.196
  CI (99.9%): [5152876.656, 5368402.119] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
HashBiMapTest._Benchmark.benchmark_getIfAbsentPut  thrpt   30  5260639.387 ± 107762.731  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPutValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPutValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2371511.829 ops/s
# Warmup Iteration   2: 4845886.230 ops/s
# Warmup Iteration   3: 4903955.230 ops/s
# Warmup Iteration   4: 4126927.595 ops/s
# Warmup Iteration   5: 4928533.868 ops/s
# Warmup Iteration   6: 4949994.933 ops/s
# Warmup Iteration   7: 4897121.365 ops/s
# Warmup Iteration   8: 4721717.935 ops/s
# Warmup Iteration   9: 5063335.483 ops/s
# Warmup Iteration  10: 5053771.927 ops/s
# Warmup Iteration  11: 5020482.918 ops/s
# Warmup Iteration  12: 4911870.539 ops/s
# Warmup Iteration  13: 4808250.603 ops/s
# Warmup Iteration  14: 4833071.970 ops/s
# Warmup Iteration  15: 4773145.180 ops/s
# Warmup Iteration  16: 4740290.280 ops/s
# Warmup Iteration  17: 4725150.872 ops/s
# Warmup Iteration  18: 5017189.322 ops/s
# Warmup Iteration  19: 4893595.240 ops/s
# Warmup Iteration  20: 5086146.622 ops/s
# Warmup Iteration  21: 4748340.993 ops/s
# Warmup Iteration  22: 4720881.081 ops/s
# Warmup Iteration  23: 4778238.873 ops/s
# Warmup Iteration  24: 4856548.877 ops/s
# Warmup Iteration  25: 4813716.000 ops/s
# Warmup Iteration  26: 4822068.405 ops/s
# Warmup Iteration  27: 4842250.926 ops/s
# Warmup Iteration  28: 5001545.061 ops/s
# Warmup Iteration  29: 5012847.453 ops/s
# Warmup Iteration  30: 4787926.296 ops/s
Iteration   1: 5003551.044 ops/s
Iteration   2: 4775791.967 ops/s
Iteration   3: 4898578.766 ops/s
Iteration   4: 5105406.943 ops/s
Iteration   5: 4843453.163 ops/s
Iteration   6: 4997152.276 ops/s
Iteration   7: 4849504.072 ops/s
Iteration   8: 4988965.796 ops/s
Iteration   9: 4950888.187 ops/s
Iteration  10: 4946068.276 ops/s
Iteration  11: 4831448.863 ops/s
Iteration  12: 5157154.886 ops/s
Iteration  13: 4848229.633 ops/s
Iteration  14: 4984204.940 ops/s
Iteration  15: 4588724.832 ops/s
Iteration  16: 4893986.632 ops/s
Iteration  17: 4944553.131 ops/s
Iteration  18: 5048792.867 ops/s
Iteration  19: 4966328.932 ops/s
Iteration  20: 4992269.614 ops/s
Iteration  21: 5007535.289 ops/s
Iteration  22: 5270919.152 ops/s
Iteration  23: 4749648.601 ops/s
Iteration  24: 5000259.593 ops/s
Iteration  25: 4828410.782 ops/s
Iteration  26: 4830648.892 ops/s
Iteration  27: 4736390.322 ops/s
Iteration  28: 4818399.679 ops/s
Iteration  29: 4996122.373 ops/s
Iteration  30: 4755664.074 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPutValue":
  4920301.786 ±(99.9%) 92309.437 ops/s [Average]
  (min, avg, max) = (4588724.832, 4920301.786, 5270919.152), stdev = 138164.431
  CI (99.9%): [4827992.349, 5012611.223] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_getIfAbsentPutValue  thrpt   30  4920301.786 ± 92309.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPutWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPutWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1778551.790 ops/s
# Warmup Iteration   2: 4438894.687 ops/s
# Warmup Iteration   3: 4519472.095 ops/s
# Warmup Iteration   4: 3760283.120 ops/s
# Warmup Iteration   5: 4438720.906 ops/s
# Warmup Iteration   6: 4464560.757 ops/s
# Warmup Iteration   7: 4427420.335 ops/s
# Warmup Iteration   8: 4484662.309 ops/s
# Warmup Iteration   9: 4522322.239 ops/s
# Warmup Iteration  10: 4639389.410 ops/s
# Warmup Iteration  11: 4567606.904 ops/s
# Warmup Iteration  12: 4695717.408 ops/s
# Warmup Iteration  13: 4461702.639 ops/s
# Warmup Iteration  14: 4661912.432 ops/s
# Warmup Iteration  15: 4483883.222 ops/s
# Warmup Iteration  16: 4509498.728 ops/s
# Warmup Iteration  17: 4512994.058 ops/s
# Warmup Iteration  18: 4500014.274 ops/s
# Warmup Iteration  19: 4454296.535 ops/s
# Warmup Iteration  20: 4494256.101 ops/s
# Warmup Iteration  21: 4669400.127 ops/s
# Warmup Iteration  22: 4481426.308 ops/s
# Warmup Iteration  23: 4486741.810 ops/s
# Warmup Iteration  24: 4505024.257 ops/s
# Warmup Iteration  25: 4515032.243 ops/s
# Warmup Iteration  26: 4481211.592 ops/s
# Warmup Iteration  27: 4455828.683 ops/s
# Warmup Iteration  28: 4512812.188 ops/s
# Warmup Iteration  29: 4538336.625 ops/s
# Warmup Iteration  30: 4404155.161 ops/s
Iteration   1: 4625124.664 ops/s
Iteration   2: 4419060.702 ops/s
Iteration   3: 4418163.651 ops/s
Iteration   4: 4483479.324 ops/s
Iteration   5: 4643524.846 ops/s
Iteration   6: 4511588.059 ops/s
Iteration   7: 4478821.399 ops/s
Iteration   8: 4409237.804 ops/s
Iteration   9: 4408562.632 ops/s
Iteration  10: 4342828.590 ops/s
Iteration  11: 4447721.817 ops/s
Iteration  12: 4614321.551 ops/s
Iteration  13: 4422467.542 ops/s
Iteration  14: 4639086.522 ops/s
Iteration  15: 4473047.825 ops/s
Iteration  16: 4545258.539 ops/s
Iteration  17: 4421682.716 ops/s
Iteration  18: 4460905.401 ops/s
Iteration  19: 4546938.984 ops/s
Iteration  20: 4481696.746 ops/s
Iteration  21: 4533490.804 ops/s
Iteration  22: 4556387.811 ops/s
Iteration  23: 4668065.816 ops/s
Iteration  24: 4538074.643 ops/s
Iteration  25: 4483795.042 ops/s
Iteration  26: 4627032.693 ops/s
Iteration  27: 4488361.589 ops/s
Iteration  28: 4640997.414 ops/s
Iteration  29: 4488380.494 ops/s
Iteration  30: 4445224.906 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPutWith":
  4508777.684 ±(99.9%) 57797.912 ops/s [Average]
  (min, avg, max) = (4342828.590, 4508777.684, 4668065.816), stdev = 86509.201
  CI (99.9%): [4450979.772, 4566575.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_getIfAbsentPutWith  thrpt   30  4508777.684 ± 57797.912  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPutWithKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPutWithKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2094014.599 ops/s
# Warmup Iteration   2: 5178029.116 ops/s
# Warmup Iteration   3: 5066567.119 ops/s
# Warmup Iteration   4: 4130004.437 ops/s
# Warmup Iteration   5: 5289138.124 ops/s
# Warmup Iteration   6: 5198911.494 ops/s
# Warmup Iteration   7: 5205893.071 ops/s
# Warmup Iteration   8: 5075684.112 ops/s
# Warmup Iteration   9: 5111155.481 ops/s
# Warmup Iteration  10: 5178917.753 ops/s
# Warmup Iteration  11: 5246433.039 ops/s
# Warmup Iteration  12: 5145761.135 ops/s
# Warmup Iteration  13: 5247139.710 ops/s
# Warmup Iteration  14: 5174172.702 ops/s
# Warmup Iteration  15: 4979443.223 ops/s
# Warmup Iteration  16: 5035023.755 ops/s
# Warmup Iteration  17: 5283561.131 ops/s
# Warmup Iteration  18: 5178364.376 ops/s
# Warmup Iteration  19: 5045839.558 ops/s
# Warmup Iteration  20: 5116765.098 ops/s
# Warmup Iteration  21: 5029975.553 ops/s
# Warmup Iteration  22: 5125643.162 ops/s
# Warmup Iteration  23: 5046698.630 ops/s
# Warmup Iteration  24: 5131833.688 ops/s
# Warmup Iteration  25: 5086934.653 ops/s
# Warmup Iteration  26: 5126348.709 ops/s
# Warmup Iteration  27: 5117145.925 ops/s
# Warmup Iteration  28: 5142439.714 ops/s
# Warmup Iteration  29: 5208386.651 ops/s
# Warmup Iteration  30: 5110652.584 ops/s
Iteration   1: 5121947.447 ops/s
Iteration   2: 5320731.704 ops/s
Iteration   3: 5075652.497 ops/s
Iteration   4: 5125825.479 ops/s
Iteration   5: 5149929.854 ops/s
Iteration   6: 5111914.329 ops/s
Iteration   7: 5150614.891 ops/s
Iteration   8: 5050045.239 ops/s
Iteration   9: 5287177.956 ops/s
Iteration  10: 5110187.954 ops/s
Iteration  11: 5111576.433 ops/s
Iteration  12: 5204972.671 ops/s
Iteration  13: 5199236.094 ops/s
Iteration  14: 5413630.325 ops/s
Iteration  15: 5331145.538 ops/s
Iteration  16: 5485887.117 ops/s
Iteration  17: 5196079.107 ops/s
Iteration  18: 5149498.268 ops/s
Iteration  19: 5298678.140 ops/s
Iteration  20: 5213200.596 ops/s
Iteration  21: 5067759.084 ops/s
Iteration  22: 5073118.660 ops/s
Iteration  23: 5085963.536 ops/s
Iteration  24: 5189532.644 ops/s
Iteration  25: 5122151.123 ops/s
Iteration  26: 5033214.063 ops/s
Iteration  27: 5147377.303 ops/s
Iteration  28: 5085558.014 ops/s
Iteration  29: 5017584.292 ops/s
Iteration  30: 5173747.553 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPutWithKey":
  5170131.264 ±(99.9%) 74545.175 ops/s [Average]
  (min, avg, max) = (5017584.292, 5170131.264, 5485887.117), stdev = 111575.717
  CI (99.9%): [5095586.089, 5244676.438] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_getIfAbsentPutWithKey  thrpt   30  5170131.264 ± 74545.175  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 474124.858 ops/s
# Warmup Iteration   2: 518973.404 ops/s
# Warmup Iteration   3: 707237.122 ops/s
# Warmup Iteration   4: 691019.097 ops/s
# Warmup Iteration   5: 706191.720 ops/s
# Warmup Iteration   6: 704973.418 ops/s
# Warmup Iteration   7: 705808.234 ops/s
# Warmup Iteration   8: 702246.066 ops/s
# Warmup Iteration   9: 710341.030 ops/s
# Warmup Iteration  10: 662563.452 ops/s
# Warmup Iteration  11: 629638.819 ops/s
# Warmup Iteration  12: 727290.068 ops/s
# Warmup Iteration  13: 729326.505 ops/s
# Warmup Iteration  14: 734276.046 ops/s
# Warmup Iteration  15: 730355.438 ops/s
# Warmup Iteration  16: 725027.992 ops/s
# Warmup Iteration  17: 736050.429 ops/s
# Warmup Iteration  18: 730392.137 ops/s
# Warmup Iteration  19: 756449.150 ops/s
# Warmup Iteration  20: 780330.976 ops/s
# Warmup Iteration  21: 754288.306 ops/s
# Warmup Iteration  22: 734763.187 ops/s
# Warmup Iteration  23: 753845.235 ops/s
# Warmup Iteration  24: 766221.460 ops/s
# Warmup Iteration  25: 753470.400 ops/s
# Warmup Iteration  26: 744916.667 ops/s
# Warmup Iteration  27: 780944.254 ops/s
# Warmup Iteration  28: 738816.949 ops/s
# Warmup Iteration  29: 737640.349 ops/s
# Warmup Iteration  30: 745114.693 ops/s
Iteration   1: 743935.860 ops/s
Iteration   2: 730340.062 ops/s
Iteration   3: 773620.370 ops/s
Iteration   4: 772563.837 ops/s
Iteration   5: 743622.282 ops/s
Iteration   6: 738668.663 ops/s
Iteration   7: 740654.201 ops/s
Iteration   8: 760120.309 ops/s
Iteration   9: 724324.635 ops/s
Iteration  10: 734944.306 ops/s
Iteration  11: 743356.283 ops/s
Iteration  12: 736216.224 ops/s
Iteration  13: 734855.370 ops/s
Iteration  14: 721794.024 ops/s
Iteration  15: 741374.586 ops/s
Iteration  16: 751740.038 ops/s
Iteration  17: 752440.545 ops/s
Iteration  18: 745874.366 ops/s
Iteration  19: 738731.697 ops/s
Iteration  20: 735661.332 ops/s
Iteration  21: 742392.061 ops/s
Iteration  22: 737895.674 ops/s
Iteration  23: 741232.349 ops/s
Iteration  24: 734037.345 ops/s
Iteration  25: 723068.405 ops/s
Iteration  26: 727721.450 ops/s
Iteration  27: 745267.719 ops/s
Iteration  28: 736290.030 ops/s
Iteration  29: 746143.846 ops/s
Iteration  30: 782710.200 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws":
  742719.936 ±(99.9%) 9521.600 ops/s [Average]
  (min, avg, max) = (721794.024, 742719.936, 782710.200), stdev = 14251.484
  CI (99.9%): [733198.336, 752241.535] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws  thrpt   30  742719.936 ± 9521.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPut_block_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPut_block_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 501956.066 ops/s
# Warmup Iteration   2: 530811.667 ops/s
# Warmup Iteration   3: 728398.373 ops/s
# Warmup Iteration   4: 705473.535 ops/s
# Warmup Iteration   5: 710171.611 ops/s
# Warmup Iteration   6: 709413.760 ops/s
# Warmup Iteration   7: 723592.035 ops/s
# Warmup Iteration   8: 705698.616 ops/s
# Warmup Iteration   9: 709253.667 ops/s
# Warmup Iteration  10: 634243.020 ops/s
# Warmup Iteration  11: 683020.636 ops/s
# Warmup Iteration  12: 705724.280 ops/s
# Warmup Iteration  13: 717267.585 ops/s
# Warmup Iteration  14: 708419.416 ops/s
# Warmup Iteration  15: 705496.394 ops/s
# Warmup Iteration  16: 726074.728 ops/s
# Warmup Iteration  17: 751171.919 ops/s
# Warmup Iteration  18: 740957.777 ops/s
# Warmup Iteration  19: 751133.276 ops/s
# Warmup Iteration  20: 737419.642 ops/s
# Warmup Iteration  21: 749706.307 ops/s
# Warmup Iteration  22: 742690.907 ops/s
# Warmup Iteration  23: 746830.838 ops/s
# Warmup Iteration  24: 752081.715 ops/s
# Warmup Iteration  25: 737084.344 ops/s
# Warmup Iteration  26: 740780.846 ops/s
# Warmup Iteration  27: 770642.286 ops/s
# Warmup Iteration  28: 806132.798 ops/s
# Warmup Iteration  29: 764998.733 ops/s
# Warmup Iteration  30: 787144.489 ops/s
Iteration   1: 807176.302 ops/s
Iteration   2: 813623.557 ops/s
Iteration   3: 751244.469 ops/s
Iteration   4: 737302.628 ops/s
Iteration   5: 741336.564 ops/s
Iteration   6: 782362.972 ops/s
Iteration   7: 782015.165 ops/s
Iteration   8: 733637.636 ops/s
Iteration   9: 743814.627 ops/s
Iteration  10: 731904.607 ops/s
Iteration  11: 746195.196 ops/s
Iteration  12: 744014.936 ops/s
Iteration  13: 750015.029 ops/s
Iteration  14: 754863.203 ops/s
Iteration  15: 771321.436 ops/s
Iteration  16: 774886.204 ops/s
Iteration  17: 769532.986 ops/s
Iteration  18: 758352.195 ops/s
Iteration  19: 752328.243 ops/s
Iteration  20: 737552.840 ops/s
Iteration  21: 755115.544 ops/s
Iteration  22: 781458.762 ops/s
Iteration  23: 767770.734 ops/s
Iteration  24: 763610.824 ops/s
Iteration  25: 742045.256 ops/s
Iteration  26: 769366.073 ops/s
Iteration  27: 768679.957 ops/s
Iteration  28: 766690.036 ops/s
Iteration  29: 767107.050 ops/s
Iteration  30: 778952.414 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentPut_block_throws":
  761475.915 ±(99.9%) 13467.184 ops/s [Average]
  (min, avg, max) = (731904.607, 761475.915, 813623.557), stdev = 20157.048
  CI (99.9%): [748008.731, 774943.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_getIfAbsentPut_block_throws  thrpt   30  761475.915 ± 13467.184  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2002482.432 ops/s
# Warmup Iteration   2: 4759856.086 ops/s
# Warmup Iteration   3: 4761421.173 ops/s
# Warmup Iteration   4: 3790547.624 ops/s
# Warmup Iteration   5: 4721164.294 ops/s
# Warmup Iteration   6: 4715377.358 ops/s
# Warmup Iteration   7: 4891473.135 ops/s
# Warmup Iteration   8: 4806706.750 ops/s
# Warmup Iteration   9: 4830341.294 ops/s
# Warmup Iteration  10: 4717802.900 ops/s
# Warmup Iteration  11: 4695339.695 ops/s
# Warmup Iteration  12: 4680341.840 ops/s
# Warmup Iteration  13: 4802762.259 ops/s
# Warmup Iteration  14: 4813092.550 ops/s
# Warmup Iteration  15: 4731040.867 ops/s
# Warmup Iteration  16: 4760888.514 ops/s
# Warmup Iteration  17: 4680170.738 ops/s
# Warmup Iteration  18: 4814902.762 ops/s
# Warmup Iteration  19: 4825717.186 ops/s
# Warmup Iteration  20: 4908130.076 ops/s
# Warmup Iteration  21: 4715694.422 ops/s
# Warmup Iteration  22: 4730002.795 ops/s
# Warmup Iteration  23: 4929464.697 ops/s
# Warmup Iteration  24: 4710881.920 ops/s
# Warmup Iteration  25: 4656511.518 ops/s
# Warmup Iteration  26: 4889724.032 ops/s
# Warmup Iteration  27: 4697203.446 ops/s
# Warmup Iteration  28: 4788140.035 ops/s
# Warmup Iteration  29: 4856824.324 ops/s
# Warmup Iteration  30: 4952273.977 ops/s
Iteration   1: 4969196.394 ops/s
Iteration   2: 4820434.864 ops/s
Iteration   3: 4785224.959 ops/s
Iteration   4: 4710212.572 ops/s
Iteration   5: 4882268.211 ops/s
Iteration   6: 4713134.076 ops/s
Iteration   7: 4905890.960 ops/s
Iteration   8: 4592671.408 ops/s
Iteration   9: 4904931.075 ops/s
Iteration  10: 4719439.749 ops/s
Iteration  11: 5068992.775 ops/s
Iteration  12: 5153456.287 ops/s
Iteration  13: 4968955.860 ops/s
Iteration  14: 4929938.406 ops/s
Iteration  15: 4888308.518 ops/s
Iteration  16: 4822993.900 ops/s
Iteration  17: 4848163.610 ops/s
Iteration  18: 4665463.351 ops/s
Iteration  19: 4900771.138 ops/s
Iteration  20: 5097638.043 ops/s
Iteration  21: 4740718.294 ops/s
Iteration  22: 4879163.784 ops/s
Iteration  23: 4824338.833 ops/s
Iteration  24: 4882805.407 ops/s
Iteration  25: 4817841.062 ops/s
Iteration  26: 4798780.332 ops/s
Iteration  27: 4743978.389 ops/s
Iteration  28: 4743693.792 ops/s
Iteration  29: 4771047.883 ops/s
Iteration  30: 4764433.996 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsentWith":
  4843829.598 ±(99.9%) 84316.797 ops/s [Average]
  (min, avg, max) = (4592671.408, 4843829.598, 5153456.287), stdev = 126201.423
  CI (99.9%): [4759512.800, 4928146.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_getIfAbsentWith  thrpt   30  4843829.598 ± 84316.797  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsent_function$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsent_function

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2532538.703 ops/s
# Warmup Iteration   2: 5985665.262 ops/s
# Warmup Iteration   3: 5000832.233 ops/s
# Warmup Iteration   4: 6023772.585 ops/s
# Warmup Iteration   5: 6010521.492 ops/s
# Warmup Iteration   6: 6272454.031 ops/s
# Warmup Iteration   7: 6000013.764 ops/s
# Warmup Iteration   8: 6163987.757 ops/s
# Warmup Iteration   9: 6213414.292 ops/s
# Warmup Iteration  10: 6286520.846 ops/s
# Warmup Iteration  11: 6143061.178 ops/s
# Warmup Iteration  12: 5989168.450 ops/s
# Warmup Iteration  13: 6227865.775 ops/s
# Warmup Iteration  14: 6228112.661 ops/s
# Warmup Iteration  15: 6178071.883 ops/s
# Warmup Iteration  16: 6019019.079 ops/s
# Warmup Iteration  17: 6248415.560 ops/s
# Warmup Iteration  18: 6156139.246 ops/s
# Warmup Iteration  19: 6053077.486 ops/s
# Warmup Iteration  20: 6105017.381 ops/s
# Warmup Iteration  21: 6248674.334 ops/s
# Warmup Iteration  22: 5941523.764 ops/s
# Warmup Iteration  23: 6090340.639 ops/s
# Warmup Iteration  24: 5903389.901 ops/s
# Warmup Iteration  25: 6083836.204 ops/s
# Warmup Iteration  26: 6091422.640 ops/s
# Warmup Iteration  27: 5920870.631 ops/s
# Warmup Iteration  28: 6029384.554 ops/s
# Warmup Iteration  29: 6151150.151 ops/s
# Warmup Iteration  30: 6282621.194 ops/s
Iteration   1: 6185668.605 ops/s
Iteration   2: 6188953.602 ops/s
Iteration   3: 6059710.022 ops/s
Iteration   4: 6209358.478 ops/s
Iteration   5: 6274823.925 ops/s
Iteration   6: 6101091.379 ops/s
Iteration   7: 6035447.961 ops/s
Iteration   8: 6007667.010 ops/s
Iteration   9: 5957381.187 ops/s
Iteration  10: 6128002.156 ops/s
Iteration  11: 6225673.465 ops/s
Iteration  12: 6038777.519 ops/s
Iteration  13: 6108753.019 ops/s
Iteration  14: 6067078.575 ops/s
Iteration  15: 6286386.471 ops/s
Iteration  16: 6116209.977 ops/s
Iteration  17: 5939982.411 ops/s
Iteration  18: 6108968.539 ops/s
Iteration  19: 6067016.212 ops/s
Iteration  20: 6150077.591 ops/s
Iteration  21: 5946953.391 ops/s
Iteration  22: 6101447.133 ops/s
Iteration  23: 6170919.867 ops/s
Iteration  24: 5802536.595 ops/s
Iteration  25: 6127855.563 ops/s
Iteration  26: 6089095.234 ops/s
Iteration  27: 6135190.622 ops/s
Iteration  28: 6062361.478 ops/s
Iteration  29: 6105499.916 ops/s
Iteration  30: 6152709.055 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getIfAbsent_function":
  6098386.565 ±(99.9%) 68114.331 ops/s [Average]
  (min, avg, max) = (5802536.595, 6098386.565, 6286386.471), stdev = 101950.332
  CI (99.9%): [6030272.234, 6166500.896] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_getIfAbsent_function  thrpt   30  6098386.565 ± 68114.331  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getKeysAndGetValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getKeysAndGetValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1580855.258 ops/s
# Warmup Iteration   2: 3298411.881 ops/s
# Warmup Iteration   3: 2715661.195 ops/s
# Warmup Iteration   4: 3209468.716 ops/s
# Warmup Iteration   5: 3178793.776 ops/s
# Warmup Iteration   6: 3142182.641 ops/s
# Warmup Iteration   7: 3253416.203 ops/s
# Warmup Iteration   8: 3195436.000 ops/s
# Warmup Iteration   9: 3168818.681 ops/s
# Warmup Iteration  10: 3146098.864 ops/s
# Warmup Iteration  11: 3172416.088 ops/s
# Warmup Iteration  12: 3180975.144 ops/s
# Warmup Iteration  13: 3181620.381 ops/s
# Warmup Iteration  14: 3267496.917 ops/s
# Warmup Iteration  15: 3165056.972 ops/s
# Warmup Iteration  16: 3201317.858 ops/s
# Warmup Iteration  17: 3226734.360 ops/s
# Warmup Iteration  18: 3144393.794 ops/s
# Warmup Iteration  19: 3160615.695 ops/s
# Warmup Iteration  20: 3196522.194 ops/s
# Warmup Iteration  21: 3188213.806 ops/s
# Warmup Iteration  22: 3207157.858 ops/s
# Warmup Iteration  23: 3154187.163 ops/s
# Warmup Iteration  24: 3200070.374 ops/s
# Warmup Iteration  25: 3231721.221 ops/s
# Warmup Iteration  26: 3257247.365 ops/s
# Warmup Iteration  27: 3174283.318 ops/s
# Warmup Iteration  28: 3240896.473 ops/s
# Warmup Iteration  29: 3268876.005 ops/s
# Warmup Iteration  30: 3282594.271 ops/s
Iteration   1: 3158386.018 ops/s
Iteration   2: 3106922.560 ops/s
Iteration   3: 3163442.955 ops/s
Iteration   4: 3238111.059 ops/s
Iteration   5: 3112725.899 ops/s
Iteration   6: 3165039.468 ops/s
Iteration   7: 3143427.669 ops/s
Iteration   8: 3211285.629 ops/s
Iteration   9: 3299860.998 ops/s
Iteration  10: 3185841.155 ops/s
Iteration  11: 3163637.155 ops/s
Iteration  12: 3153510.377 ops/s
Iteration  13: 3181483.044 ops/s
Iteration  14: 3198055.165 ops/s
Iteration  15: 3193684.463 ops/s
Iteration  16: 3142218.580 ops/s
Iteration  17: 3171321.252 ops/s
Iteration  18: 3269492.938 ops/s
Iteration  19: 3176558.666 ops/s
Iteration  20: 3145140.646 ops/s
Iteration  21: 3139597.854 ops/s
Iteration  22: 3229130.249 ops/s
Iteration  23: 3238034.344 ops/s
Iteration  24: 3187804.740 ops/s
Iteration  25: 3196842.444 ops/s
Iteration  26: 3151530.000 ops/s
Iteration  27: 3135765.201 ops/s
Iteration  28: 3172905.411 ops/s
Iteration  29: 3264974.017 ops/s
Iteration  30: 3239117.331 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getKeysAndGetValues":
  3184528.243 ±(99.9%) 31343.523 ops/s [Average]
  (min, avg, max) = (3106922.560, 3184528.243, 3299860.998), stdev = 46913.514
  CI (99.9%): [3153184.720, 3215871.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_getKeysAndGetValues  thrpt   30  3184528.243 ± 31343.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703190.909 ops/s
# Warmup Iteration   2: 1657699.416 ops/s
# Warmup Iteration   3: 1691416.912 ops/s
# Warmup Iteration   4: 1520552.016 ops/s
# Warmup Iteration   5: 1864091.373 ops/s
# Warmup Iteration   6: 1732131.664 ops/s
# Warmup Iteration   7: 1770490.011 ops/s
# Warmup Iteration   8: 1798045.354 ops/s
# Warmup Iteration   9: 1745903.650 ops/s
# Warmup Iteration  10: 1747174.995 ops/s
# Warmup Iteration  11: 1781164.420 ops/s
# Warmup Iteration  12: 1725764.069 ops/s
# Warmup Iteration  13: 1748199.847 ops/s
# Warmup Iteration  14: 1726292.645 ops/s
# Warmup Iteration  15: 1714411.745 ops/s
# Warmup Iteration  16: 1731617.745 ops/s
# Warmup Iteration  17: 1862959.418 ops/s
# Warmup Iteration  18: 1726583.047 ops/s
# Warmup Iteration  19: 1794333.457 ops/s
# Warmup Iteration  20: 1799821.311 ops/s
# Warmup Iteration  21: 1824639.047 ops/s
# Warmup Iteration  22: 1735649.927 ops/s
# Warmup Iteration  23: 1693925.714 ops/s
# Warmup Iteration  24: 1694857.657 ops/s
# Warmup Iteration  25: 1727725.255 ops/s
# Warmup Iteration  26: 1773986.059 ops/s
# Warmup Iteration  27: 1772806.046 ops/s
# Warmup Iteration  28: 1709997.335 ops/s
# Warmup Iteration  29: 1766019.132 ops/s
# Warmup Iteration  30: 1736754.565 ops/s
Iteration   1: 1711543.536 ops/s
Iteration   2: 1694658.780 ops/s
Iteration   3: 1805038.553 ops/s
Iteration   4: 1717555.584 ops/s
Iteration   5: 1697561.014 ops/s
Iteration   6: 1761371.504 ops/s
Iteration   7: 1742070.860 ops/s
Iteration   8: 1794430.408 ops/s
Iteration   9: 1696297.386 ops/s
Iteration  10: 1707132.711 ops/s
Iteration  11: 1733262.147 ops/s
Iteration  12: 1709830.473 ops/s
Iteration  13: 1748398.613 ops/s
Iteration  14: 1732841.099 ops/s
Iteration  15: 1768707.175 ops/s
Iteration  16: 1688948.985 ops/s
Iteration  17: 1710529.626 ops/s
Iteration  18: 1731646.553 ops/s
Iteration  19: 1697232.070 ops/s
Iteration  20: 1705403.609 ops/s
Iteration  21: 1736371.502 ops/s
Iteration  22: 1831373.886 ops/s
Iteration  23: 1806225.878 ops/s
Iteration  24: 1691517.977 ops/s
Iteration  25: 1713434.983 ops/s
Iteration  26: 1705820.874 ops/s
Iteration  27: 1707747.791 ops/s
Iteration  28: 1744649.896 ops/s
Iteration  29: 1740634.722 ops/s
Iteration  30: 1697162.844 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getLast":
  1730980.035 ±(99.9%) 25339.555 ops/s [Average]
  (min, avg, max) = (1688948.985, 1730980.035, 1831373.886), stdev = 37927.056
  CI (99.9%): [1705640.480, 1756319.590] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_getLast  thrpt   30  1730980.035 ± 25339.555  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3295205.824 ops/s
# Warmup Iteration   2: 8137187.867 ops/s
# Warmup Iteration   3: 6702184.711 ops/s
# Warmup Iteration   4: 8217934.690 ops/s
# Warmup Iteration   5: 8163259.202 ops/s
# Warmup Iteration   6: 8251921.119 ops/s
# Warmup Iteration   7: 8202057.332 ops/s
# Warmup Iteration   8: 8164791.313 ops/s
# Warmup Iteration   9: 8308034.101 ops/s
# Warmup Iteration  10: 8253334.513 ops/s
# Warmup Iteration  11: 8365886.320 ops/s
# Warmup Iteration  12: 8283586.887 ops/s
# Warmup Iteration  13: 8229331.742 ops/s
# Warmup Iteration  14: 8240169.302 ops/s
# Warmup Iteration  15: 8068055.269 ops/s
# Warmup Iteration  16: 8257582.274 ops/s
# Warmup Iteration  17: 8284486.882 ops/s
# Warmup Iteration  18: 8078461.544 ops/s
# Warmup Iteration  19: 8237777.505 ops/s
# Warmup Iteration  20: 8211235.879 ops/s
# Warmup Iteration  21: 8245788.881 ops/s
# Warmup Iteration  22: 8261281.411 ops/s
# Warmup Iteration  23: 8228597.363 ops/s
# Warmup Iteration  24: 8180296.935 ops/s
# Warmup Iteration  25: 8097024.188 ops/s
# Warmup Iteration  26: 8269755.001 ops/s
# Warmup Iteration  27: 8335343.336 ops/s
# Warmup Iteration  28: 8329092.339 ops/s
# Warmup Iteration  29: 8405377.902 ops/s
# Warmup Iteration  30: 8353719.226 ops/s
Iteration   1: 8195976.091 ops/s
Iteration   2: 8443778.403 ops/s
Iteration   3: 8072902.743 ops/s
Iteration   4: 8369747.257 ops/s
Iteration   5: 8058574.856 ops/s
Iteration   6: 8165474.807 ops/s
Iteration   7: 8133819.468 ops/s
Iteration   8: 8067707.000 ops/s
Iteration   9: 8168128.119 ops/s
Iteration  10: 8125110.730 ops/s
Iteration  11: 8177564.296 ops/s
Iteration  12: 8155980.430 ops/s
Iteration  13: 8250335.880 ops/s
Iteration  14: 8248017.690 ops/s
Iteration  15: 8354164.881 ops/s
Iteration  16: 8212593.314 ops/s
Iteration  17: 8372323.889 ops/s
Iteration  18: 8365144.499 ops/s
Iteration  19: 8283075.486 ops/s
Iteration  20: 8201080.996 ops/s
Iteration  21: 8153091.845 ops/s
Iteration  22: 8180155.480 ops/s
Iteration  23: 8129149.483 ops/s
Iteration  24: 8052438.714 ops/s
Iteration  25: 8241337.418 ops/s
Iteration  26: 8252931.340 ops/s
Iteration  27: 8403563.345 ops/s
Iteration  28: 8362739.799 ops/s
Iteration  29: 8070508.681 ops/s
Iteration  30: 8193555.198 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getOnly":
  8215365.738 ±(99.9%) 74515.200 ops/s [Average]
  (min, avg, max) = (8052438.714, 8215365.738, 8443778.403), stdev = 111530.852
  CI (99.9%): [8140850.538, 8289880.938] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_getOnly  thrpt   30  8215365.738 ± 74515.200  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getOnly_throws_when_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getOnly_throws_when_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 506516.475 ops/s
# Warmup Iteration   2: 652637.459 ops/s
# Warmup Iteration   3: 806118.933 ops/s
# Warmup Iteration   4: 794305.799 ops/s
# Warmup Iteration   5: 839953.829 ops/s
# Warmup Iteration   6: 807872.881 ops/s
# Warmup Iteration   7: 822783.442 ops/s
# Warmup Iteration   8: 671830.030 ops/s
# Warmup Iteration   9: 805286.741 ops/s
# Warmup Iteration  10: 808183.650 ops/s
# Warmup Iteration  11: 812160.320 ops/s
# Warmup Iteration  12: 800418.783 ops/s
# Warmup Iteration  13: 815249.726 ops/s
# Warmup Iteration  14: 815530.128 ops/s
# Warmup Iteration  15: 812478.262 ops/s
# Warmup Iteration  16: 799351.080 ops/s
# Warmup Iteration  17: 853985.605 ops/s
# Warmup Iteration  18: 896335.852 ops/s
# Warmup Iteration  19: 845476.154 ops/s
# Warmup Iteration  20: 864386.271 ops/s
# Warmup Iteration  21: 851626.500 ops/s
# Warmup Iteration  22: 848666.888 ops/s
# Warmup Iteration  23: 858246.862 ops/s
# Warmup Iteration  24: 844250.410 ops/s
# Warmup Iteration  25: 846588.288 ops/s
# Warmup Iteration  26: 848588.766 ops/s
# Warmup Iteration  27: 848346.323 ops/s
# Warmup Iteration  28: 863380.135 ops/s
# Warmup Iteration  29: 855198.771 ops/s
# Warmup Iteration  30: 865510.078 ops/s
Iteration   1: 887845.100 ops/s
Iteration   2: 858912.011 ops/s
Iteration   3: 885830.174 ops/s
Iteration   4: 834652.704 ops/s
Iteration   5: 863646.338 ops/s
Iteration   6: 838719.459 ops/s
Iteration   7: 847893.833 ops/s
Iteration   8: 842136.975 ops/s
Iteration   9: 836786.950 ops/s
Iteration  10: 864177.048 ops/s
Iteration  11: 850972.337 ops/s
Iteration  12: 871884.566 ops/s
Iteration  13: 853860.767 ops/s
Iteration  14: 831052.330 ops/s
Iteration  15: 858966.119 ops/s
Iteration  16: 852030.582 ops/s
Iteration  17: 858362.059 ops/s
Iteration  18: 844458.748 ops/s
Iteration  19: 836694.474 ops/s
Iteration  20: 840310.826 ops/s
Iteration  21: 871120.187 ops/s
Iteration  22: 836612.845 ops/s
Iteration  23: 855355.099 ops/s
Iteration  24: 864476.567 ops/s
Iteration  25: 855790.602 ops/s
Iteration  26: 870774.918 ops/s
Iteration  27: 851337.666 ops/s
Iteration  28: 847100.082 ops/s
Iteration  29: 842940.226 ops/s
Iteration  30: 850153.041 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getOnly_throws_when_empty":
  853495.155 ±(99.9%) 9704.441 ops/s [Average]
  (min, avg, max) = (831052.330, 853495.155, 887845.100), stdev = 14525.151
  CI (99.9%): [843790.714, 863199.595] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_getOnly_throws_when_empty  thrpt   30  853495.155 ± 9704.441  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getOnly_throws_when_multiple_values$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getOnly_throws_when_multiple_values

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 510486.720 ops/s
# Warmup Iteration   2: 583871.885 ops/s
# Warmup Iteration   3: 785877.356 ops/s
# Warmup Iteration   4: 784939.474 ops/s
# Warmup Iteration   5: 784035.197 ops/s
# Warmup Iteration   6: 806233.430 ops/s
# Warmup Iteration   7: 809581.362 ops/s
# Warmup Iteration   8: 794454.569 ops/s
# Warmup Iteration   9: 713004.412 ops/s
# Warmup Iteration  10: 716199.562 ops/s
# Warmup Iteration  11: 806876.955 ops/s
# Warmup Iteration  12: 781543.501 ops/s
# Warmup Iteration  13: 799154.059 ops/s
# Warmup Iteration  14: 817145.842 ops/s
# Warmup Iteration  15: 777227.440 ops/s
# Warmup Iteration  16: 798006.225 ops/s
# Warmup Iteration  17: 815773.734 ops/s
# Warmup Iteration  18: 828585.095 ops/s
# Warmup Iteration  19: 804852.357 ops/s
# Warmup Iteration  20: 828908.483 ops/s
# Warmup Iteration  21: 821082.233 ops/s
# Warmup Iteration  22: 832395.519 ops/s
# Warmup Iteration  23: 817873.278 ops/s
# Warmup Iteration  24: 857273.823 ops/s
# Warmup Iteration  25: 830079.172 ops/s
# Warmup Iteration  26: 865185.690 ops/s
# Warmup Iteration  27: 849512.413 ops/s
# Warmup Iteration  28: 856249.778 ops/s
# Warmup Iteration  29: 821847.332 ops/s
# Warmup Iteration  30: 853608.657 ops/s
Iteration   1: 824985.278 ops/s
Iteration   2: 817746.679 ops/s
Iteration   3: 801574.404 ops/s
Iteration   4: 815193.021 ops/s
Iteration   5: 830282.893 ops/s
Iteration   6: 827391.471 ops/s
Iteration   7: 825713.098 ops/s
Iteration   8: 846137.953 ops/s
Iteration   9: 836338.469 ops/s
Iteration  10: 839806.194 ops/s
Iteration  11: 822296.954 ops/s
Iteration  12: 834627.780 ops/s
Iteration  13: 810519.316 ops/s
Iteration  14: 824543.580 ops/s
Iteration  15: 826042.141 ops/s
Iteration  16: 820295.074 ops/s
Iteration  17: 818858.928 ops/s
Iteration  18: 811166.323 ops/s
Iteration  19: 804103.024 ops/s
Iteration  20: 833861.451 ops/s
Iteration  21: 822075.559 ops/s
Iteration  22: 850140.820 ops/s
Iteration  23: 861668.998 ops/s
Iteration  24: 865879.598 ops/s
Iteration  25: 891697.579 ops/s
Iteration  26: 901513.655 ops/s
Iteration  27: 871847.351 ops/s
Iteration  28: 811418.162 ops/s
Iteration  29: 815683.682 ops/s
Iteration  30: 876871.403 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getOnly_throws_when_multiple_values":
  834676.028 ±(99.9%) 17061.044 ops/s [Average]
  (min, avg, max) = (801574.404, 834676.028, 901513.655), stdev = 25536.169
  CI (99.9%): [817614.984, 851737.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_getOnly_throws_when_multiple_values  thrpt   30  834676.028 ± 17061.044  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getOrDefault$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getOrDefault

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2888194.541 ops/s
# Warmup Iteration   2: 6178385.208 ops/s
# Warmup Iteration   3: 5210865.096 ops/s
# Warmup Iteration   4: 6175228.451 ops/s
# Warmup Iteration   5: 6130237.675 ops/s
# Warmup Iteration   6: 6200876.241 ops/s
# Warmup Iteration   7: 6116550.457 ops/s
# Warmup Iteration   8: 6130080.335 ops/s
# Warmup Iteration   9: 6218075.818 ops/s
# Warmup Iteration  10: 6264388.164 ops/s
# Warmup Iteration  11: 6279315.028 ops/s
# Warmup Iteration  12: 6321336.501 ops/s
# Warmup Iteration  13: 6313890.789 ops/s
# Warmup Iteration  14: 6290182.160 ops/s
# Warmup Iteration  15: 6266098.469 ops/s
# Warmup Iteration  16: 6060168.497 ops/s
# Warmup Iteration  17: 6176844.538 ops/s
# Warmup Iteration  18: 6488042.786 ops/s
# Warmup Iteration  19: 6440891.260 ops/s
# Warmup Iteration  20: 6595352.635 ops/s
# Warmup Iteration  21: 6374986.960 ops/s
# Warmup Iteration  22: 6344920.190 ops/s
# Warmup Iteration  23: 6269632.370 ops/s
# Warmup Iteration  24: 6309167.382 ops/s
# Warmup Iteration  25: 6028591.515 ops/s
# Warmup Iteration  26: 6143129.415 ops/s
# Warmup Iteration  27: 6233700.944 ops/s
# Warmup Iteration  28: 6291602.723 ops/s
# Warmup Iteration  29: 6168099.416 ops/s
# Warmup Iteration  30: 6220467.156 ops/s
Iteration   1: 6195875.826 ops/s
Iteration   2: 6055008.675 ops/s
Iteration   3: 6134759.034 ops/s
Iteration   4: 6223823.085 ops/s
Iteration   5: 6357726.283 ops/s
Iteration   6: 6390286.279 ops/s
Iteration   7: 6131358.818 ops/s
Iteration   8: 6200694.278 ops/s
Iteration   9: 6163851.354 ops/s
Iteration  10: 6134548.490 ops/s
Iteration  11: 6270669.537 ops/s
Iteration  12: 6120250.211 ops/s
Iteration  13: 6122176.607 ops/s
Iteration  14: 6382512.203 ops/s
Iteration  15: 6176940.684 ops/s
Iteration  16: 6199097.241 ops/s
Iteration  17: 6301099.014 ops/s
Iteration  18: 6183742.738 ops/s
Iteration  19: 6192646.793 ops/s
Iteration  20: 6280403.157 ops/s
Iteration  21: 6085984.655 ops/s
Iteration  22: 6186362.899 ops/s
Iteration  23: 6129149.142 ops/s
Iteration  24: 6109256.707 ops/s
Iteration  25: 6261652.303 ops/s
Iteration  26: 6119633.948 ops/s
Iteration  27: 6171164.432 ops/s
Iteration  28: 6119580.373 ops/s
Iteration  29: 6035910.356 ops/s
Iteration  30: 6153332.228 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_getOrDefault":
  6186316.578 ±(99.9%) 59885.836 ops/s [Average]
  (min, avg, max) = (6035910.356, 6186316.578, 6390286.279), stdev = 89634.307
  CI (99.9%): [6126430.743, 6246202.414] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_getOrDefault  thrpt   30  6186316.578 ± 59885.836  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 246547.553 ops/s
# Warmup Iteration   2: 544270.082 ops/s
# Warmup Iteration   3: 583990.533 ops/s
# Warmup Iteration   4: 574302.146 ops/s
# Warmup Iteration   5: 489597.276 ops/s
# Warmup Iteration   6: 584364.178 ops/s
# Warmup Iteration   7: 595252.539 ops/s
# Warmup Iteration   8: 573576.779 ops/s
# Warmup Iteration   9: 565722.011 ops/s
# Warmup Iteration  10: 569758.286 ops/s
# Warmup Iteration  11: 569449.123 ops/s
# Warmup Iteration  12: 590332.471 ops/s
# Warmup Iteration  13: 594940.302 ops/s
# Warmup Iteration  14: 573072.683 ops/s
# Warmup Iteration  15: 567570.653 ops/s
# Warmup Iteration  16: 567292.724 ops/s
# Warmup Iteration  17: 576371.419 ops/s
# Warmup Iteration  18: 570855.001 ops/s
# Warmup Iteration  19: 582186.987 ops/s
# Warmup Iteration  20: 589789.243 ops/s
# Warmup Iteration  21: 565930.312 ops/s
# Warmup Iteration  22: 567828.468 ops/s
# Warmup Iteration  23: 580182.694 ops/s
# Warmup Iteration  24: 571705.904 ops/s
# Warmup Iteration  25: 568459.229 ops/s
# Warmup Iteration  26: 571372.580 ops/s
# Warmup Iteration  27: 586157.605 ops/s
# Warmup Iteration  28: 565489.177 ops/s
# Warmup Iteration  29: 582788.888 ops/s
# Warmup Iteration  30: 597365.796 ops/s
Iteration   1: 557595.517 ops/s
Iteration   2: 563469.265 ops/s
Iteration   3: 577882.004 ops/s
Iteration   4: 599866.380 ops/s
Iteration   5: 586326.950 ops/s
Iteration   6: 573583.258 ops/s
Iteration   7: 611482.528 ops/s
Iteration   8: 585128.400 ops/s
Iteration   9: 562868.983 ops/s
Iteration  10: 566403.585 ops/s
Iteration  11: 583528.624 ops/s
Iteration  12: 613396.773 ops/s
Iteration  13: 569084.788 ops/s
Iteration  14: 564420.944 ops/s
Iteration  15: 563112.245 ops/s
Iteration  16: 569482.820 ops/s
Iteration  17: 548172.780 ops/s
Iteration  18: 567437.707 ops/s
Iteration  19: 571142.365 ops/s
Iteration  20: 560727.921 ops/s
Iteration  21: 596132.975 ops/s
Iteration  22: 589337.066 ops/s
Iteration  23: 590794.698 ops/s
Iteration  24: 572786.432 ops/s
Iteration  25: 581951.937 ops/s
Iteration  26: 585384.728 ops/s
Iteration  27: 563334.826 ops/s
Iteration  28: 568835.046 ops/s
Iteration  29: 584596.444 ops/s
Iteration  30: 592052.960 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupBy":
  577344.032 ±(99.9%) 10500.556 ops/s [Average]
  (min, avg, max) = (548172.780, 577344.032, 613396.773), stdev = 15716.739
  CI (99.9%): [566843.476, 587844.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_groupBy  thrpt   30  577344.032 ± 10500.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 134562.956 ops/s
# Warmup Iteration   2: 281436.016 ops/s
# Warmup Iteration   3: 313203.761 ops/s
# Warmup Iteration   4: 316020.417 ops/s
# Warmup Iteration   5: 265709.365 ops/s
# Warmup Iteration   6: 305770.838 ops/s
# Warmup Iteration   7: 318346.200 ops/s
# Warmup Iteration   8: 311637.862 ops/s
# Warmup Iteration   9: 312692.718 ops/s
# Warmup Iteration  10: 328813.152 ops/s
# Warmup Iteration  11: 316598.025 ops/s
# Warmup Iteration  12: 324953.353 ops/s
# Warmup Iteration  13: 320660.283 ops/s
# Warmup Iteration  14: 314149.810 ops/s
# Warmup Iteration  15: 318376.700 ops/s
# Warmup Iteration  16: 319752.086 ops/s
# Warmup Iteration  17: 320167.608 ops/s
# Warmup Iteration  18: 316626.720 ops/s
# Warmup Iteration  19: 312126.690 ops/s
# Warmup Iteration  20: 319342.448 ops/s
# Warmup Iteration  21: 320522.060 ops/s
# Warmup Iteration  22: 320669.322 ops/s
# Warmup Iteration  23: 315760.709 ops/s
# Warmup Iteration  24: 323634.565 ops/s
# Warmup Iteration  25: 323791.056 ops/s
# Warmup Iteration  26: 316932.346 ops/s
# Warmup Iteration  27: 312969.811 ops/s
# Warmup Iteration  28: 315086.848 ops/s
# Warmup Iteration  29: 312073.981 ops/s
# Warmup Iteration  30: 321602.540 ops/s
Iteration   1: 323605.708 ops/s
Iteration   2: 324598.809 ops/s
Iteration   3: 322746.696 ops/s
Iteration   4: 322579.297 ops/s
Iteration   5: 324708.868 ops/s
Iteration   6: 320043.807 ops/s
Iteration   7: 310556.735 ops/s
Iteration   8: 323465.812 ops/s
Iteration   9: 337422.961 ops/s
Iteration  10: 319258.706 ops/s
Iteration  11: 311371.010 ops/s
Iteration  12: 311091.037 ops/s
Iteration  13: 319225.860 ops/s
Iteration  14: 328433.621 ops/s
Iteration  15: 318647.673 ops/s
Iteration  16: 323268.914 ops/s
Iteration  17: 325140.765 ops/s
Iteration  18: 310703.805 ops/s
Iteration  19: 319958.825 ops/s
Iteration  20: 322620.467 ops/s
Iteration  21: 319403.123 ops/s
Iteration  22: 320962.171 ops/s
Iteration  23: 312168.065 ops/s
Iteration  24: 314965.935 ops/s
Iteration  25: 319554.631 ops/s
Iteration  26: 319832.094 ops/s
Iteration  27: 315437.328 ops/s
Iteration  28: 312719.165 ops/s
Iteration  29: 310204.768 ops/s
Iteration  30: 317462.918 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByEach":
  319405.319 ±(99.9%) 4091.142 ops/s [Average]
  (min, avg, max) = (310204.768, 319405.319, 337422.961), stdev = 6123.429
  CI (99.9%): [315314.177, 323496.461] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_groupByEach  thrpt   30  319405.319 ± 4091.142  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 969274.014 ops/s
# Warmup Iteration   2: 2286419.870 ops/s
# Warmup Iteration   3: 2224871.480 ops/s
# Warmup Iteration   4: 1968950.972 ops/s
# Warmup Iteration   5: 2350509.823 ops/s
# Warmup Iteration   6: 2348004.312 ops/s
# Warmup Iteration   7: 2260203.485 ops/s
# Warmup Iteration   8: 2345932.642 ops/s
# Warmup Iteration   9: 2392657.754 ops/s
# Warmup Iteration  10: 2321798.007 ops/s
# Warmup Iteration  11: 2300583.798 ops/s
# Warmup Iteration  12: 2340821.054 ops/s
# Warmup Iteration  13: 2319352.117 ops/s
# Warmup Iteration  14: 2321424.195 ops/s
# Warmup Iteration  15: 2338326.595 ops/s
# Warmup Iteration  16: 2340818.137 ops/s
# Warmup Iteration  17: 2346891.608 ops/s
# Warmup Iteration  18: 2304145.702 ops/s
# Warmup Iteration  19: 2338869.854 ops/s
# Warmup Iteration  20: 2271270.696 ops/s
# Warmup Iteration  21: 2361127.018 ops/s
# Warmup Iteration  22: 2278232.402 ops/s
# Warmup Iteration  23: 2306939.892 ops/s
# Warmup Iteration  24: 2233331.226 ops/s
# Warmup Iteration  25: 2349502.177 ops/s
# Warmup Iteration  26: 2328411.967 ops/s
# Warmup Iteration  27: 2358556.952 ops/s
# Warmup Iteration  28: 2250406.944 ops/s
# Warmup Iteration  29: 2301230.822 ops/s
# Warmup Iteration  30: 2246704.330 ops/s
Iteration   1: 2237679.361 ops/s
Iteration   2: 2269366.914 ops/s
Iteration   3: 2356693.957 ops/s
Iteration   4: 2271740.128 ops/s
Iteration   5: 2273007.134 ops/s
Iteration   6: 2270848.865 ops/s
Iteration   7: 2327845.772 ops/s
Iteration   8: 2238417.782 ops/s
Iteration   9: 2351068.691 ops/s
Iteration  10: 2234543.378 ops/s
Iteration  11: 2310273.388 ops/s
Iteration  12: 2362089.883 ops/s
Iteration  13: 2272107.887 ops/s
Iteration  14: 2291159.515 ops/s
Iteration  15: 2270971.862 ops/s
Iteration  16: 2279966.943 ops/s
Iteration  17: 2320377.377 ops/s
Iteration  18: 2241169.757 ops/s
Iteration  19: 2269312.322 ops/s
Iteration  20: 2371458.516 ops/s
Iteration  21: 2364432.894 ops/s
Iteration  22: 2333554.863 ops/s
Iteration  23: 2236021.356 ops/s
Iteration  24: 2354038.951 ops/s
Iteration  25: 2334181.759 ops/s
Iteration  26: 2256140.026 ops/s
Iteration  27: 2253649.564 ops/s
Iteration  28: 2234961.702 ops/s
Iteration  29: 2324196.669 ops/s
Iteration  30: 2262739.730 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByUniqueKey":
  2292467.232 ±(99.9%) 30362.301 ops/s [Average]
  (min, avg, max) = (2234543.378, 2292467.232, 2371458.516), stdev = 45444.867
  CI (99.9%): [2262104.930, 2322829.533] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  2292467.232 ± 30362.301  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1110348.859 ops/s
# Warmup Iteration   2: 2498093.396 ops/s
# Warmup Iteration   3: 2517313.080 ops/s
# Warmup Iteration   4: 2343577.031 ops/s
# Warmup Iteration   5: 2438954.926 ops/s
# Warmup Iteration   6: 2532788.456 ops/s
# Warmup Iteration   7: 2582653.076 ops/s
# Warmup Iteration   8: 2604446.034 ops/s
# Warmup Iteration   9: 2634696.347 ops/s
# Warmup Iteration  10: 2623468.867 ops/s
# Warmup Iteration  11: 2533494.621 ops/s
# Warmup Iteration  12: 2532162.431 ops/s
# Warmup Iteration  13: 2481056.323 ops/s
# Warmup Iteration  14: 2507079.042 ops/s
# Warmup Iteration  15: 2553954.596 ops/s
# Warmup Iteration  16: 2510665.622 ops/s
# Warmup Iteration  17: 2610947.443 ops/s
# Warmup Iteration  18: 2548567.272 ops/s
# Warmup Iteration  19: 2531890.764 ops/s
# Warmup Iteration  20: 2594670.941 ops/s
# Warmup Iteration  21: 2579599.641 ops/s
# Warmup Iteration  22: 2611781.511 ops/s
# Warmup Iteration  23: 2535917.909 ops/s
# Warmup Iteration  24: 2543659.953 ops/s
# Warmup Iteration  25: 2556058.936 ops/s
# Warmup Iteration  26: 2523358.634 ops/s
# Warmup Iteration  27: 2517533.648 ops/s
# Warmup Iteration  28: 2526121.151 ops/s
# Warmup Iteration  29: 2482914.080 ops/s
# Warmup Iteration  30: 2521427.141 ops/s
Iteration   1: 2548419.146 ops/s
Iteration   2: 2468652.956 ops/s
Iteration   3: 2548248.469 ops/s
Iteration   4: 2568773.337 ops/s
Iteration   5: 2506232.709 ops/s
Iteration   6: 2508364.033 ops/s
Iteration   7: 2519163.469 ops/s
Iteration   8: 2608999.223 ops/s
Iteration   9: 2630286.882 ops/s
Iteration  10: 2636265.500 ops/s
Iteration  11: 2541921.070 ops/s
Iteration  12: 2554599.212 ops/s
Iteration  13: 2543891.641 ops/s
Iteration  14: 2529004.060 ops/s
Iteration  15: 2522767.809 ops/s
Iteration  16: 2508065.090 ops/s
Iteration  17: 2448978.064 ops/s
Iteration  18: 2534817.859 ops/s
Iteration  19: 2581792.545 ops/s
Iteration  20: 2600169.589 ops/s
Iteration  21: 2491045.489 ops/s
Iteration  22: 2547996.913 ops/s
Iteration  23: 2532421.154 ops/s
Iteration  24: 2582404.759 ops/s
Iteration  25: 2483018.678 ops/s
Iteration  26: 2518675.724 ops/s
Iteration  27: 2576640.042 ops/s
Iteration  28: 2527240.505 ops/s
Iteration  29: 2555882.677 ops/s
Iteration  30: 2534774.042 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByUniqueKey_target":
  2541983.755 ±(99.9%) 29318.618 ops/s [Average]
  (min, avg, max) = (2448978.064, 2541983.755, 2636265.500), stdev = 43882.730
  CI (99.9%): [2512665.137, 2571302.373] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  2541983.755 ± 29318.618  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByUniqueKey_target_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByUniqueKey_target_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 391592.786 ops/s
# Warmup Iteration   2: 454937.706 ops/s
# Warmup Iteration   3: 624328.848 ops/s
# Warmup Iteration   4: 610870.139 ops/s
# Warmup Iteration   5: 629688.534 ops/s
# Warmup Iteration   6: 634098.980 ops/s
# Warmup Iteration   7: 601340.826 ops/s
# Warmup Iteration   8: 597022.899 ops/s
# Warmup Iteration   9: 555953.507 ops/s
# Warmup Iteration  10: 554742.314 ops/s
# Warmup Iteration  11: 603790.145 ops/s
# Warmup Iteration  12: 600751.232 ops/s
# Warmup Iteration  13: 605185.463 ops/s
# Warmup Iteration  14: 607932.027 ops/s
# Warmup Iteration  15: 603190.077 ops/s
# Warmup Iteration  16: 610645.812 ops/s
# Warmup Iteration  17: 670338.830 ops/s
# Warmup Iteration  18: 664275.816 ops/s
# Warmup Iteration  19: 639513.117 ops/s
# Warmup Iteration  20: 640992.720 ops/s
# Warmup Iteration  21: 640305.875 ops/s
# Warmup Iteration  22: 641771.723 ops/s
# Warmup Iteration  23: 639345.138 ops/s
# Warmup Iteration  24: 646886.610 ops/s
# Warmup Iteration  25: 635301.792 ops/s
# Warmup Iteration  26: 667181.120 ops/s
# Warmup Iteration  27: 665855.821 ops/s
# Warmup Iteration  28: 672704.677 ops/s
# Warmup Iteration  29: 670995.881 ops/s
# Warmup Iteration  30: 667065.251 ops/s
Iteration   1: 663357.572 ops/s
Iteration   2: 644971.566 ops/s
Iteration   3: 640481.475 ops/s
Iteration   4: 653774.926 ops/s
Iteration   5: 669902.666 ops/s
Iteration   6: 628807.934 ops/s
Iteration   7: 670695.309 ops/s
Iteration   8: 677767.082 ops/s
Iteration   9: 665432.811 ops/s
Iteration  10: 645518.168 ops/s
Iteration  11: 669597.955 ops/s
Iteration  12: 642810.104 ops/s
Iteration  13: 663777.306 ops/s
Iteration  14: 627429.986 ops/s
Iteration  15: 643374.614 ops/s
Iteration  16: 657078.205 ops/s
Iteration  17: 667785.320 ops/s
Iteration  18: 663114.810 ops/s
Iteration  19: 675831.107 ops/s
Iteration  20: 642842.615 ops/s
Iteration  21: 628712.746 ops/s
Iteration  22: 661937.710 ops/s
Iteration  23: 642985.665 ops/s
Iteration  24: 637636.878 ops/s
Iteration  25: 636691.358 ops/s
Iteration  26: 638242.363 ops/s
Iteration  27: 622618.291 ops/s
Iteration  28: 645286.612 ops/s
Iteration  29: 638220.936 ops/s
Iteration  30: 625615.202 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByUniqueKey_target_throws":
  649743.310 ±(99.9%) 10860.905 ops/s [Average]
  (min, avg, max) = (622618.291, 649743.310, 677767.082), stdev = 16256.093
  CI (99.9%): [638882.405, 660604.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_groupByUniqueKey_target_throws  thrpt   30  649743.310 ± 10860.905  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByUniqueKey_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByUniqueKey_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 391019.002 ops/s
# Warmup Iteration   2: 433038.644 ops/s
# Warmup Iteration   3: 574605.265 ops/s
# Warmup Iteration   4: 589355.974 ops/s
# Warmup Iteration   5: 573154.033 ops/s
# Warmup Iteration   6: 570697.017 ops/s
# Warmup Iteration   7: 578208.399 ops/s
# Warmup Iteration   8: 600394.088 ops/s
# Warmup Iteration   9: 613166.583 ops/s
# Warmup Iteration  10: 506126.890 ops/s
# Warmup Iteration  11: 617210.342 ops/s
# Warmup Iteration  12: 598887.347 ops/s
# Warmup Iteration  13: 597922.899 ops/s
# Warmup Iteration  14: 605577.520 ops/s
# Warmup Iteration  15: 613343.340 ops/s
# Warmup Iteration  16: 603736.933 ops/s
# Warmup Iteration  17: 599526.309 ops/s
# Warmup Iteration  18: 591571.678 ops/s
# Warmup Iteration  19: 627092.220 ops/s
# Warmup Iteration  20: 616912.566 ops/s
# Warmup Iteration  21: 620109.770 ops/s
# Warmup Iteration  22: 596802.854 ops/s
# Warmup Iteration  23: 615724.379 ops/s
# Warmup Iteration  24: 606616.100 ops/s
# Warmup Iteration  25: 599639.426 ops/s
# Warmup Iteration  26: 593629.588 ops/s
# Warmup Iteration  27: 614526.187 ops/s
# Warmup Iteration  28: 637433.477 ops/s
# Warmup Iteration  29: 632754.108 ops/s
# Warmup Iteration  30: 640117.116 ops/s
Iteration   1: 611795.548 ops/s
Iteration   2: 626152.517 ops/s
Iteration   3: 625544.624 ops/s
Iteration   4: 595982.804 ops/s
Iteration   5: 598331.304 ops/s
Iteration   6: 602382.165 ops/s
Iteration   7: 627571.272 ops/s
Iteration   8: 604670.008 ops/s
Iteration   9: 630838.992 ops/s
Iteration  10: 611457.955 ops/s
Iteration  11: 608340.486 ops/s
Iteration  12: 600170.661 ops/s
Iteration  13: 601226.283 ops/s
Iteration  14: 596214.808 ops/s
Iteration  15: 620652.502 ops/s
Iteration  16: 633804.695 ops/s
Iteration  17: 613524.656 ops/s
Iteration  18: 617008.188 ops/s
Iteration  19: 595222.515 ops/s
Iteration  20: 587272.159 ops/s
Iteration  21: 593014.193 ops/s
Iteration  22: 601094.386 ops/s
Iteration  23: 597867.687 ops/s
Iteration  24: 601866.122 ops/s
Iteration  25: 591184.945 ops/s
Iteration  26: 594270.598 ops/s
Iteration  27: 597577.400 ops/s
Iteration  28: 601194.494 ops/s
Iteration  29: 594312.967 ops/s
Iteration  30: 598736.264 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_groupByUniqueKey_throws":
  605976.107 ±(99.9%) 8608.596 ops/s [Average]
  (min, avg, max) = (587272.159, 605976.107, 633804.695), stdev = 12884.942
  CI (99.9%): [597367.511, 614584.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_groupByUniqueKey_throws  thrpt   30  605976.107 ± 8608.596  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_ifPresentApply$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_ifPresentApply

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2516477.720 ops/s
# Warmup Iteration   2: 5574940.507 ops/s
# Warmup Iteration   3: 4564970.584 ops/s
# Warmup Iteration   4: 5810193.586 ops/s
# Warmup Iteration   5: 5762139.289 ops/s
# Warmup Iteration   6: 5552350.192 ops/s
# Warmup Iteration   7: 5554752.243 ops/s
# Warmup Iteration   8: 5672179.502 ops/s
# Warmup Iteration   9: 5703109.807 ops/s
# Warmup Iteration  10: 5773247.871 ops/s
# Warmup Iteration  11: 5735477.607 ops/s
# Warmup Iteration  12: 5756160.778 ops/s
# Warmup Iteration  13: 5506396.281 ops/s
# Warmup Iteration  14: 5602608.479 ops/s
# Warmup Iteration  15: 5556551.857 ops/s
# Warmup Iteration  16: 5658175.186 ops/s
# Warmup Iteration  17: 5695059.046 ops/s
# Warmup Iteration  18: 5600564.412 ops/s
# Warmup Iteration  19: 5629469.244 ops/s
# Warmup Iteration  20: 5537873.095 ops/s
# Warmup Iteration  21: 5652708.102 ops/s
# Warmup Iteration  22: 5806251.646 ops/s
# Warmup Iteration  23: 5759323.509 ops/s
# Warmup Iteration  24: 5704941.286 ops/s
# Warmup Iteration  25: 5533689.434 ops/s
# Warmup Iteration  26: 5808913.157 ops/s
# Warmup Iteration  27: 5630439.332 ops/s
# Warmup Iteration  28: 5537564.221 ops/s
# Warmup Iteration  29: 5765030.976 ops/s
# Warmup Iteration  30: 5791989.470 ops/s
Iteration   1: 5706573.721 ops/s
Iteration   2: 5824798.739 ops/s
Iteration   3: 5786166.494 ops/s
Iteration   4: 5533952.116 ops/s
Iteration   5: 5458935.311 ops/s
Iteration   6: 5672590.609 ops/s
Iteration   7: 5668830.257 ops/s
Iteration   8: 5643579.558 ops/s
Iteration   9: 5730556.897 ops/s
Iteration  10: 5559560.973 ops/s
Iteration  11: 5550924.618 ops/s
Iteration  12: 5723508.842 ops/s
Iteration  13: 5767011.544 ops/s
Iteration  14: 5758013.768 ops/s
Iteration  15: 5827585.007 ops/s
Iteration  16: 5636094.131 ops/s
Iteration  17: 5814475.695 ops/s
Iteration  18: 5488123.383 ops/s
Iteration  19: 5789924.051 ops/s
Iteration  20: 5780641.998 ops/s
Iteration  21: 5776618.610 ops/s
Iteration  22: 5563700.820 ops/s
Iteration  23: 5830550.734 ops/s
Iteration  24: 5691258.318 ops/s
Iteration  25: 5580281.429 ops/s
Iteration  26: 5514043.290 ops/s
Iteration  27: 5641087.945 ops/s
Iteration  28: 5737182.741 ops/s
Iteration  29: 5605510.431 ops/s
Iteration  30: 5754897.491 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_ifPresentApply":
  5680565.984 ±(99.9%) 73797.008 ops/s [Average]
  (min, avg, max) = (5458935.311, 5680565.984, 5830550.734), stdev = 110455.896
  CI (99.9%): [5606768.976, 5754362.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_ifPresentApply  thrpt   30  5680565.984 ± 73797.008  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1616801.233 ops/s
# Warmup Iteration   2: 3903077.061 ops/s
# Warmup Iteration   3: 3963174.532 ops/s
# Warmup Iteration   4: 3256557.740 ops/s
# Warmup Iteration   5: 4009708.340 ops/s
# Warmup Iteration   6: 4075978.117 ops/s
# Warmup Iteration   7: 4123007.601 ops/s
# Warmup Iteration   8: 4242744.583 ops/s
# Warmup Iteration   9: 4043561.503 ops/s
# Warmup Iteration  10: 3962319.724 ops/s
# Warmup Iteration  11: 4183282.520 ops/s
# Warmup Iteration  12: 4137796.756 ops/s
# Warmup Iteration  13: 3999944.435 ops/s
# Warmup Iteration  14: 3950170.907 ops/s
# Warmup Iteration  15: 4102292.816 ops/s
# Warmup Iteration  16: 3984016.390 ops/s
# Warmup Iteration  17: 4209090.039 ops/s
# Warmup Iteration  18: 4062635.864 ops/s
# Warmup Iteration  19: 4027811.178 ops/s
# Warmup Iteration  20: 4099700.706 ops/s
# Warmup Iteration  21: 3987141.882 ops/s
# Warmup Iteration  22: 4041951.338 ops/s
# Warmup Iteration  23: 3991419.297 ops/s
# Warmup Iteration  24: 4122783.833 ops/s
# Warmup Iteration  25: 4089127.229 ops/s
# Warmup Iteration  26: 4098334.431 ops/s
# Warmup Iteration  27: 4181501.875 ops/s
# Warmup Iteration  28: 4006563.595 ops/s
# Warmup Iteration  29: 4093825.470 ops/s
# Warmup Iteration  30: 4063500.667 ops/s
Iteration   1: 3900457.841 ops/s
Iteration   2: 4021852.949 ops/s
Iteration   3: 3991528.517 ops/s
Iteration   4: 3980471.078 ops/s
Iteration   5: 3964089.440 ops/s
Iteration   6: 3994023.715 ops/s
Iteration   7: 3966993.940 ops/s
Iteration   8: 3900048.110 ops/s
Iteration   9: 3950283.870 ops/s
Iteration  10: 4169797.581 ops/s
Iteration  11: 4128728.110 ops/s
Iteration  12: 3950718.212 ops/s
Iteration  13: 4003342.627 ops/s
Iteration  14: 3946095.746 ops/s
Iteration  15: 3969606.134 ops/s
Iteration  16: 4002415.218 ops/s
Iteration  17: 3953121.440 ops/s
Iteration  18: 3967729.188 ops/s
Iteration  19: 3942352.946 ops/s
Iteration  20: 3967583.835 ops/s
Iteration  21: 3892603.820 ops/s
Iteration  22: 3960514.098 ops/s
Iteration  23: 3962262.456 ops/s
Iteration  24: 3984432.449 ops/s
Iteration  25: 3992396.910 ops/s
Iteration  26: 3959720.078 ops/s
Iteration  27: 4254841.762 ops/s
Iteration  28: 3988515.878 ops/s
Iteration  29: 3929302.321 ops/s
Iteration  30: 3989059.396 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectInto":
  3986162.989 ±(99.9%) 50532.331 ops/s [Average]
  (min, avg, max) = (3892603.820, 3986162.989, 4254841.762), stdev = 75634.420
  CI (99.9%): [3935630.658, 4036695.320] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_injectInto  thrpt   30  3986162.989 ± 50532.331  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2388056.838 ops/s
# Warmup Iteration   2: 5307861.039 ops/s
# Warmup Iteration   3: 4307744.286 ops/s
# Warmup Iteration   4: 4980433.348 ops/s
# Warmup Iteration   5: 4930284.880 ops/s
# Warmup Iteration   6: 5208005.878 ops/s
# Warmup Iteration   7: 4970621.245 ops/s
# Warmup Iteration   8: 4985231.480 ops/s
# Warmup Iteration   9: 4976222.206 ops/s
# Warmup Iteration  10: 4977588.623 ops/s
# Warmup Iteration  11: 5051816.239 ops/s
# Warmup Iteration  12: 5218616.800 ops/s
# Warmup Iteration  13: 5026020.776 ops/s
# Warmup Iteration  14: 5225545.303 ops/s
# Warmup Iteration  15: 5010725.276 ops/s
# Warmup Iteration  16: 4943641.943 ops/s
# Warmup Iteration  17: 4984987.863 ops/s
# Warmup Iteration  18: 5009572.610 ops/s
# Warmup Iteration  19: 4910485.660 ops/s
# Warmup Iteration  20: 4975251.666 ops/s
# Warmup Iteration  21: 5023049.759 ops/s
# Warmup Iteration  22: 4975863.950 ops/s
# Warmup Iteration  23: 5048468.798 ops/s
# Warmup Iteration  24: 4913813.524 ops/s
# Warmup Iteration  25: 5150875.362 ops/s
# Warmup Iteration  26: 5102347.752 ops/s
# Warmup Iteration  27: 4991856.650 ops/s
# Warmup Iteration  28: 4986324.806 ops/s
# Warmup Iteration  29: 5041037.431 ops/s
# Warmup Iteration  30: 5069495.018 ops/s
Iteration   1: 5034157.439 ops/s
Iteration   2: 5159199.714 ops/s
Iteration   3: 5043140.360 ops/s
Iteration   4: 4958176.770 ops/s
Iteration   5: 5123333.738 ops/s
Iteration   6: 5328974.201 ops/s
Iteration   7: 5051642.707 ops/s
Iteration   8: 4810735.784 ops/s
Iteration   9: 4974608.036 ops/s
Iteration  10: 4818407.075 ops/s
Iteration  11: 5504955.108 ops/s
Iteration  12: 4846634.520 ops/s
Iteration  13: 4961535.132 ops/s
Iteration  14: 4849540.346 ops/s
Iteration  15: 5308364.977 ops/s
Iteration  16: 5316815.855 ops/s
Iteration  17: 5182375.757 ops/s
Iteration  18: 5083117.478 ops/s
Iteration  19: 5184736.170 ops/s
Iteration  20: 4807999.012 ops/s
Iteration  21: 4905877.502 ops/s
Iteration  22: 4996659.663 ops/s
Iteration  23: 5083213.548 ops/s
Iteration  24: 5037687.891 ops/s
Iteration  25: 4827097.897 ops/s
Iteration  26: 5210302.477 ops/s
Iteration  27: 5374440.946 ops/s
Iteration  28: 5219629.249 ops/s
Iteration  29: 4915598.133 ops/s
Iteration  30: 4931742.885 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoDouble":
  5061690.012 ±(99.9%) 124826.095 ops/s [Average]
  (min, avg, max) = (4807999.012, 5061690.012, 5504955.108), stdev = 186833.836
  CI (99.9%): [4936863.918, 5186516.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
HashBiMapTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  5061690.012 ± 124826.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2133012.821 ops/s
# Warmup Iteration   2: 4844031.405 ops/s
# Warmup Iteration   3: 4705304.259 ops/s
# Warmup Iteration   4: 4485180.508 ops/s
# Warmup Iteration   5: 5059753.774 ops/s
# Warmup Iteration   6: 5142015.990 ops/s
# Warmup Iteration   7: 5030481.609 ops/s
# Warmup Iteration   8: 4831694.030 ops/s
# Warmup Iteration   9: 4936176.514 ops/s
# Warmup Iteration  10: 4920591.154 ops/s
# Warmup Iteration  11: 4826238.509 ops/s
# Warmup Iteration  12: 4745496.866 ops/s
# Warmup Iteration  13: 4853441.501 ops/s
# Warmup Iteration  14: 4827233.360 ops/s
# Warmup Iteration  15: 4817140.415 ops/s
# Warmup Iteration  16: 4849327.727 ops/s
# Warmup Iteration  17: 4776009.418 ops/s
# Warmup Iteration  18: 4817360.934 ops/s
# Warmup Iteration  19: 4818458.316 ops/s
# Warmup Iteration  20: 4794911.215 ops/s
# Warmup Iteration  21: 4828616.355 ops/s
# Warmup Iteration  22: 4780145.191 ops/s
# Warmup Iteration  23: 4830864.049 ops/s
# Warmup Iteration  24: 4800825.451 ops/s
# Warmup Iteration  25: 4758110.338 ops/s
# Warmup Iteration  26: 4812518.582 ops/s
# Warmup Iteration  27: 4909093.030 ops/s
# Warmup Iteration  28: 4735997.335 ops/s
# Warmup Iteration  29: 4820134.801 ops/s
# Warmup Iteration  30: 4813731.149 ops/s
Iteration   1: 4884169.998 ops/s
Iteration   2: 4702246.070 ops/s
Iteration   3: 4757347.480 ops/s
Iteration   4: 4863463.403 ops/s
Iteration   5: 4811723.303 ops/s
Iteration   6: 4811911.662 ops/s
Iteration   7: 4791082.548 ops/s
Iteration   8: 4846367.180 ops/s
Iteration   9: 4707891.271 ops/s
Iteration  10: 4954669.009 ops/s
Iteration  11: 4874903.319 ops/s
Iteration  12: 4726162.750 ops/s
Iteration  13: 4829510.050 ops/s
Iteration  14: 4793833.323 ops/s
Iteration  15: 4852089.527 ops/s
Iteration  16: 4754136.757 ops/s
Iteration  17: 5153689.985 ops/s
Iteration  18: 5033376.664 ops/s
Iteration  19: 4872060.020 ops/s
Iteration  20: 4909321.144 ops/s
Iteration  21: 4914665.928 ops/s
Iteration  22: 5012471.085 ops/s
Iteration  23: 4952850.041 ops/s
Iteration  24: 5260178.002 ops/s
Iteration  25: 5174250.001 ops/s
Iteration  26: 4807070.726 ops/s
Iteration  27: 4923922.068 ops/s
Iteration  28: 4985274.806 ops/s
Iteration  29: 4844321.598 ops/s
Iteration  30: 4960207.661 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoFloat":
  4892172.246 ±(99.9%) 90053.957 ops/s [Average]
  (min, avg, max) = (4702246.070, 4892172.246, 5260178.002), stdev = 134788.533
  CI (99.9%): [4802118.289, 4982226.203] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  4892172.246 ± 90053.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2151788.790 ops/s
# Warmup Iteration   2: 5009698.874 ops/s
# Warmup Iteration   3: 4607398.541 ops/s
# Warmup Iteration   4: 4483112.884 ops/s
# Warmup Iteration   5: 4934198.891 ops/s
# Warmup Iteration   6: 5012431.793 ops/s
# Warmup Iteration   7: 5000235.299 ops/s
# Warmup Iteration   8: 4998483.472 ops/s
# Warmup Iteration   9: 4875323.082 ops/s
# Warmup Iteration  10: 4894264.845 ops/s
# Warmup Iteration  11: 4804579.777 ops/s
# Warmup Iteration  12: 4861826.821 ops/s
# Warmup Iteration  13: 4915707.177 ops/s
# Warmup Iteration  14: 4868412.961 ops/s
# Warmup Iteration  15: 4855009.353 ops/s
# Warmup Iteration  16: 4853103.287 ops/s
# Warmup Iteration  17: 4814746.286 ops/s
# Warmup Iteration  18: 4886271.318 ops/s
# Warmup Iteration  19: 4906603.918 ops/s
# Warmup Iteration  20: 4993494.807 ops/s
# Warmup Iteration  21: 4921956.515 ops/s
# Warmup Iteration  22: 4938596.233 ops/s
# Warmup Iteration  23: 4947977.308 ops/s
# Warmup Iteration  24: 4899207.006 ops/s
# Warmup Iteration  25: 4868179.151 ops/s
# Warmup Iteration  26: 5044114.642 ops/s
# Warmup Iteration  27: 4862305.023 ops/s
# Warmup Iteration  28: 4896561.201 ops/s
# Warmup Iteration  29: 4914555.712 ops/s
# Warmup Iteration  30: 4804332.197 ops/s
Iteration   1: 4981385.460 ops/s
Iteration   2: 4839772.058 ops/s
Iteration   3: 4819017.773 ops/s
Iteration   4: 4883827.890 ops/s
Iteration   5: 4813208.073 ops/s
Iteration   6: 4808085.355 ops/s
Iteration   7: 4982321.119 ops/s
Iteration   8: 4722590.763 ops/s
Iteration   9: 4887655.733 ops/s
Iteration  10: 4891361.590 ops/s
Iteration  11: 4933541.657 ops/s
Iteration  12: 4975508.976 ops/s
Iteration  13: 4975192.712 ops/s
Iteration  14: 4970859.068 ops/s
Iteration  15: 4998260.467 ops/s
Iteration  16: 4854420.648 ops/s
Iteration  17: 4980914.011 ops/s
Iteration  18: 4836542.861 ops/s
Iteration  19: 4845637.443 ops/s
Iteration  20: 4748927.780 ops/s
Iteration  21: 4918323.638 ops/s
Iteration  22: 4900724.038 ops/s
Iteration  23: 4801738.741 ops/s
Iteration  24: 4905954.901 ops/s
Iteration  25: 4921293.606 ops/s
Iteration  26: 4915736.104 ops/s
Iteration  27: 5136260.105 ops/s
Iteration  28: 5013090.304 ops/s
Iteration  29: 4967171.244 ops/s
Iteration  30: 4857118.086 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoInt":
  4902881.407 ±(99.9%) 58528.638 ops/s [Average]
  (min, avg, max) = (4722590.763, 4902881.407, 5136260.105), stdev = 87602.917
  CI (99.9%): [4844352.769, 4961410.045] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_injectIntoInt  thrpt   30  4902881.407 ± 58528.638  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1067448.250 ops/s
# Warmup Iteration   2: 2553990.691 ops/s
# Warmup Iteration   3: 2619938.588 ops/s
# Warmup Iteration   4: 2018269.699 ops/s
# Warmup Iteration   5: 2517023.836 ops/s
# Warmup Iteration   6: 2467816.662 ops/s
# Warmup Iteration   7: 2479297.212 ops/s
# Warmup Iteration   8: 2492063.178 ops/s
# Warmup Iteration   9: 2472302.201 ops/s
# Warmup Iteration  10: 2573658.507 ops/s
# Warmup Iteration  11: 2577817.921 ops/s
# Warmup Iteration  12: 2581892.684 ops/s
# Warmup Iteration  13: 2535621.119 ops/s
# Warmup Iteration  14: 2549865.181 ops/s
# Warmup Iteration  15: 2624759.502 ops/s
# Warmup Iteration  16: 2714934.598 ops/s
# Warmup Iteration  17: 2702885.368 ops/s
# Warmup Iteration  18: 2546560.474 ops/s
# Warmup Iteration  19: 2441833.191 ops/s
# Warmup Iteration  20: 2518306.996 ops/s
# Warmup Iteration  21: 2554923.401 ops/s
# Warmup Iteration  22: 2542798.382 ops/s
# Warmup Iteration  23: 2670033.576 ops/s
# Warmup Iteration  24: 2609955.211 ops/s
# Warmup Iteration  25: 2559233.169 ops/s
# Warmup Iteration  26: 2475107.192 ops/s
# Warmup Iteration  27: 2494841.541 ops/s
# Warmup Iteration  28: 2607088.827 ops/s
# Warmup Iteration  29: 2459788.889 ops/s
# Warmup Iteration  30: 2544606.243 ops/s
Iteration   1: 2506275.428 ops/s
Iteration   2: 2584873.464 ops/s
Iteration   3: 2559330.716 ops/s
Iteration   4: 2488075.682 ops/s
Iteration   5: 2699107.251 ops/s
Iteration   6: 2562637.311 ops/s
Iteration   7: 2621673.839 ops/s
Iteration   8: 2428020.933 ops/s
Iteration   9: 2516512.368 ops/s
Iteration  10: 2506198.884 ops/s
Iteration  11: 2499917.782 ops/s
Iteration  12: 2512018.325 ops/s
Iteration  13: 2466520.282 ops/s
Iteration  14: 2521926.995 ops/s
Iteration  15: 2487182.763 ops/s
Iteration  16: 2481127.957 ops/s
Iteration  17: 2479484.598 ops/s
Iteration  18: 2477624.941 ops/s
Iteration  19: 2487843.053 ops/s
Iteration  20: 2451737.371 ops/s
Iteration  21: 2449953.877 ops/s
Iteration  22: 2469413.186 ops/s
Iteration  23: 2426727.683 ops/s
Iteration  24: 2510770.147 ops/s
Iteration  25: 2450505.191 ops/s
Iteration  26: 2515458.616 ops/s
Iteration  27: 2501295.721 ops/s
Iteration  28: 2469974.604 ops/s
Iteration  29: 2490347.995 ops/s
Iteration  30: 2468521.556 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoKeyValue":
  2503035.284 ±(99.9%) 37988.887 ops/s [Average]
  (min, avg, max) = (2426727.683, 2503035.284, 2699107.251), stdev = 56859.981
  CI (99.9%): [2465046.397, 2541024.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_injectIntoKeyValue  thrpt   30  2503035.284 ± 37988.887  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2401423.117 ops/s
# Warmup Iteration   2: 5026110.001 ops/s
# Warmup Iteration   3: 4481594.877 ops/s
# Warmup Iteration   4: 4766591.718 ops/s
# Warmup Iteration   5: 5087821.387 ops/s
# Warmup Iteration   6: 5125209.637 ops/s
# Warmup Iteration   7: 5066810.969 ops/s
# Warmup Iteration   8: 5008516.365 ops/s
# Warmup Iteration   9: 4990704.666 ops/s
# Warmup Iteration  10: 5047600.200 ops/s
# Warmup Iteration  11: 5200711.275 ops/s
# Warmup Iteration  12: 5188675.749 ops/s
# Warmup Iteration  13: 5314613.511 ops/s
# Warmup Iteration  14: 4991017.468 ops/s
# Warmup Iteration  15: 5006066.521 ops/s
# Warmup Iteration  16: 5212341.911 ops/s
# Warmup Iteration  17: 4962134.915 ops/s
# Warmup Iteration  18: 5216013.594 ops/s
# Warmup Iteration  19: 5188615.013 ops/s
# Warmup Iteration  20: 5146282.834 ops/s
# Warmup Iteration  21: 5201187.346 ops/s
# Warmup Iteration  22: 5142712.943 ops/s
# Warmup Iteration  23: 5062221.046 ops/s
# Warmup Iteration  24: 5258159.148 ops/s
# Warmup Iteration  25: 5015940.875 ops/s
# Warmup Iteration  26: 5229223.517 ops/s
# Warmup Iteration  27: 5094661.644 ops/s
# Warmup Iteration  28: 5288911.246 ops/s
# Warmup Iteration  29: 4951855.364 ops/s
# Warmup Iteration  30: 5003757.513 ops/s
Iteration   1: 5086599.980 ops/s
Iteration   2: 5091074.010 ops/s
Iteration   3: 5090512.050 ops/s
Iteration   4: 5008964.295 ops/s
Iteration   5: 4999322.765 ops/s
Iteration   6: 5110275.381 ops/s
Iteration   7: 5041341.122 ops/s
Iteration   8: 5011487.187 ops/s
Iteration   9: 5075919.692 ops/s
Iteration  10: 5040171.557 ops/s
Iteration  11: 5216655.671 ops/s
Iteration  12: 5324910.144 ops/s
Iteration  13: 5316882.978 ops/s
Iteration  14: 5057879.274 ops/s
Iteration  15: 4971552.244 ops/s
Iteration  16: 5105329.198 ops/s
Iteration  17: 5125374.091 ops/s
Iteration  18: 4962072.684 ops/s
Iteration  19: 5055045.023 ops/s
Iteration  20: 5047107.312 ops/s
Iteration  21: 5059579.406 ops/s
Iteration  22: 5169521.444 ops/s
Iteration  23: 5201992.483 ops/s
Iteration  24: 5158668.294 ops/s
Iteration  25: 5308637.283 ops/s
Iteration  26: 5166931.977 ops/s
Iteration  27: 5205192.655 ops/s
Iteration  28: 5161599.265 ops/s
Iteration  29: 5196732.749 ops/s
Iteration  30: 5247421.424 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_injectIntoLong":
  5120491.788 ±(99.9%) 66811.956 ops/s [Average]
  (min, avg, max) = (4962072.684, 5120491.788, 5324910.144), stdev = 100000.999
  CI (99.9%): [5053679.832, 5187303.744] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_injectIntoLong  thrpt   30  5120491.788 ± 66811.956  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_into$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_into

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 986189.814 ops/s
# Warmup Iteration   2: 2390671.733 ops/s
# Warmup Iteration   3: 2436616.988 ops/s
# Warmup Iteration   4: 1997280.811 ops/s
# Warmup Iteration   5: 2500725.530 ops/s
# Warmup Iteration   6: 2609215.530 ops/s
# Warmup Iteration   7: 2508289.826 ops/s
# Warmup Iteration   8: 2443774.529 ops/s
# Warmup Iteration   9: 2515552.710 ops/s
# Warmup Iteration  10: 2444870.764 ops/s
# Warmup Iteration  11: 2468508.910 ops/s
# Warmup Iteration  12: 2451751.658 ops/s
# Warmup Iteration  13: 2530638.871 ops/s
# Warmup Iteration  14: 2433546.343 ops/s
# Warmup Iteration  15: 2420414.418 ops/s
# Warmup Iteration  16: 2458977.288 ops/s
# Warmup Iteration  17: 2458794.350 ops/s
# Warmup Iteration  18: 2514512.619 ops/s
# Warmup Iteration  19: 2453181.987 ops/s
# Warmup Iteration  20: 2495679.909 ops/s
# Warmup Iteration  21: 2499956.045 ops/s
# Warmup Iteration  22: 2476800.123 ops/s
# Warmup Iteration  23: 2419148.806 ops/s
# Warmup Iteration  24: 2422050.202 ops/s
# Warmup Iteration  25: 2396504.170 ops/s
# Warmup Iteration  26: 2439207.673 ops/s
# Warmup Iteration  27: 2487715.329 ops/s
# Warmup Iteration  28: 2509752.456 ops/s
# Warmup Iteration  29: 2420009.253 ops/s
# Warmup Iteration  30: 2566493.659 ops/s
Iteration   1: 2533831.763 ops/s
Iteration   2: 2418254.906 ops/s
Iteration   3: 2436137.717 ops/s
Iteration   4: 2497526.869 ops/s
Iteration   5: 2464431.077 ops/s
Iteration   6: 2420898.796 ops/s
Iteration   7: 2456096.448 ops/s
Iteration   8: 2453136.969 ops/s
Iteration   9: 2523242.384 ops/s
Iteration  10: 2439452.011 ops/s
Iteration  11: 2445780.326 ops/s
Iteration  12: 2410623.524 ops/s
Iteration  13: 2468621.611 ops/s
Iteration  14: 2450073.605 ops/s
Iteration  15: 2483622.119 ops/s
Iteration  16: 2486299.625 ops/s
Iteration  17: 2420515.450 ops/s
Iteration  18: 2410955.977 ops/s
Iteration  19: 2440065.127 ops/s
Iteration  20: 2466502.438 ops/s
Iteration  21: 2412426.397 ops/s
Iteration  22: 2439274.653 ops/s
Iteration  23: 2441720.352 ops/s
Iteration  24: 2417491.407 ops/s
Iteration  25: 2501800.117 ops/s
Iteration  26: 2476670.096 ops/s
Iteration  27: 2409718.352 ops/s
Iteration  28: 2443173.076 ops/s
Iteration  29: 2399935.074 ops/s
Iteration  30: 2448357.794 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_into":
  2450554.535 ±(99.9%) 23013.466 ops/s [Average]
  (min, avg, max) = (2399935.074, 2450554.535, 2533831.763), stdev = 34445.476
  CI (99.9%): [2427541.069, 2473568.002] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_into  thrpt   30  2450554.535 ± 23013.466  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_inverseKeyPreservation$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_inverseKeyPreservation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1082354.085 ops/s
# Warmup Iteration   2: 1970986.833 ops/s
# Warmup Iteration   3: 2220450.230 ops/s
# Warmup Iteration   4: 2235057.698 ops/s
# Warmup Iteration   5: 2127907.166 ops/s
# Warmup Iteration   6: 2045080.253 ops/s
# Warmup Iteration   7: 2197925.701 ops/s
# Warmup Iteration   8: 2189389.482 ops/s
# Warmup Iteration   9: 2282857.183 ops/s
# Warmup Iteration  10: 2268951.026 ops/s
# Warmup Iteration  11: 2360015.456 ops/s
# Warmup Iteration  12: 2258056.524 ops/s
# Warmup Iteration  13: 2268026.050 ops/s
# Warmup Iteration  14: 2298173.869 ops/s
# Warmup Iteration  15: 2303875.272 ops/s
# Warmup Iteration  16: 2265975.815 ops/s
# Warmup Iteration  17: 2242945.785 ops/s
# Warmup Iteration  18: 2221529.275 ops/s
# Warmup Iteration  19: 2308290.546 ops/s
# Warmup Iteration  20: 2270125.063 ops/s
# Warmup Iteration  21: 2210095.212 ops/s
# Warmup Iteration  22: 2400105.260 ops/s
# Warmup Iteration  23: 2362850.438 ops/s
# Warmup Iteration  24: 2400236.434 ops/s
# Warmup Iteration  25: 2227409.036 ops/s
# Warmup Iteration  26: 2235315.643 ops/s
# Warmup Iteration  27: 2200663.481 ops/s
# Warmup Iteration  28: 2298288.730 ops/s
# Warmup Iteration  29: 2305947.651 ops/s
# Warmup Iteration  30: 2342363.879 ops/s
Iteration   1: 2400622.291 ops/s
Iteration   2: 2371545.496 ops/s
Iteration   3: 2147903.969 ops/s
Iteration   4: 2295424.394 ops/s
Iteration   5: 2194634.051 ops/s
Iteration   6: 2252589.184 ops/s
Iteration   7: 2210035.090 ops/s
Iteration   8: 2232190.800 ops/s
Iteration   9: 2197765.117 ops/s
Iteration  10: 2250024.929 ops/s
Iteration  11: 2288588.360 ops/s
Iteration  12: 2271311.663 ops/s
Iteration  13: 2207719.383 ops/s
Iteration  14: 2172579.293 ops/s
Iteration  15: 2229443.601 ops/s
Iteration  16: 2204813.687 ops/s
Iteration  17: 2162937.251 ops/s
Iteration  18: 2177696.174 ops/s
Iteration  19: 2224804.188 ops/s
Iteration  20: 2406557.579 ops/s
Iteration  21: 2418057.295 ops/s
Iteration  22: 2258287.245 ops/s
Iteration  23: 2201121.376 ops/s
Iteration  24: 2199971.790 ops/s
Iteration  25: 2183334.981 ops/s
Iteration  26: 2165248.708 ops/s
Iteration  27: 2203296.312 ops/s
Iteration  28: 2160420.516 ops/s
Iteration  29: 2214299.527 ops/s
Iteration  30: 2229636.312 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_inverseKeyPreservation":
  2237762.019 ±(99.9%) 49631.942 ops/s [Average]
  (min, avg, max) = (2147903.969, 2237762.019, 2418057.295), stdev = 74286.759
  CI (99.9%): [2188130.077, 2287393.960] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_inverseKeyPreservation  thrpt   30  2237762.019 ± 49631.942  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1478142.063 ops/s
# Warmup Iteration   2: 3244694.308 ops/s
# Warmup Iteration   3: 2741083.202 ops/s
# Warmup Iteration   4: 3269395.472 ops/s
# Warmup Iteration   5: 3248008.352 ops/s
# Warmup Iteration   6: 3308814.210 ops/s
# Warmup Iteration   7: 3266039.609 ops/s
# Warmup Iteration   8: 3332140.436 ops/s
# Warmup Iteration   9: 3407673.026 ops/s
# Warmup Iteration  10: 3497577.664 ops/s
# Warmup Iteration  11: 3343759.576 ops/s
# Warmup Iteration  12: 3282343.580 ops/s
# Warmup Iteration  13: 3488148.083 ops/s
# Warmup Iteration  14: 3296535.309 ops/s
# Warmup Iteration  15: 3254601.642 ops/s
# Warmup Iteration  16: 3362124.046 ops/s
# Warmup Iteration  17: 3336815.158 ops/s
# Warmup Iteration  18: 3331403.644 ops/s
# Warmup Iteration  19: 3382120.800 ops/s
# Warmup Iteration  20: 3316509.769 ops/s
# Warmup Iteration  21: 3404706.280 ops/s
# Warmup Iteration  22: 3355640.193 ops/s
# Warmup Iteration  23: 3378672.328 ops/s
# Warmup Iteration  24: 3354351.243 ops/s
# Warmup Iteration  25: 3399548.558 ops/s
# Warmup Iteration  26: 3394730.677 ops/s
# Warmup Iteration  27: 3416610.820 ops/s
# Warmup Iteration  28: 3322386.188 ops/s
# Warmup Iteration  29: 3519128.336 ops/s
# Warmup Iteration  30: 3450633.657 ops/s
Iteration   1: 3235880.040 ops/s
Iteration   2: 3251879.953 ops/s
Iteration   3: 3341724.355 ops/s
Iteration   4: 3354331.831 ops/s
Iteration   5: 3566948.430 ops/s
Iteration   6: 3465319.727 ops/s
Iteration   7: 3330017.675 ops/s
Iteration   8: 3249651.104 ops/s
Iteration   9: 3257437.852 ops/s
Iteration  10: 3281372.446 ops/s
Iteration  11: 3328214.614 ops/s
Iteration  12: 3360969.760 ops/s
Iteration  13: 3345646.769 ops/s
Iteration  14: 3373285.987 ops/s
Iteration  15: 3327659.395 ops/s
Iteration  16: 3213779.037 ops/s
Iteration  17: 3368615.662 ops/s
Iteration  18: 3548745.929 ops/s
Iteration  19: 3536063.934 ops/s
Iteration  20: 3446652.652 ops/s
Iteration  21: 3391427.056 ops/s
Iteration  22: 3325001.753 ops/s
Iteration  23: 3509843.347 ops/s
Iteration  24: 3563214.154 ops/s
Iteration  25: 3430913.583 ops/s
Iteration  26: 3414616.668 ops/s
Iteration  27: 3347110.519 ops/s
Iteration  28: 3502372.944 ops/s
Iteration  29: 3392575.619 ops/s
Iteration  30: 3316630.927 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_isEmpty":
  3379263.457 ±(99.9%) 67430.987 ops/s [Average]
  (min, avg, max) = (3213779.037, 3379263.457, 3566948.430), stdev = 100927.534
  CI (99.9%): [3311832.471, 3446694.444] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_isEmpty  thrpt   30  3379263.457 ± 67430.987  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 120551.072 ops/s
# Warmup Iteration   2: 141605.325 ops/s
# Warmup Iteration   3: 198841.652 ops/s
# Warmup Iteration   4: 198064.472 ops/s
# Warmup Iteration   5: 194979.357 ops/s
# Warmup Iteration   6: 195817.821 ops/s
# Warmup Iteration   7: 196532.552 ops/s
# Warmup Iteration   8: 198300.678 ops/s
# Warmup Iteration   9: 191668.201 ops/s
# Warmup Iteration  10: 198068.851 ops/s
# Warmup Iteration  11: 163298.967 ops/s
# Warmup Iteration  12: 197266.942 ops/s
# Warmup Iteration  13: 197656.557 ops/s
# Warmup Iteration  14: 197299.484 ops/s
# Warmup Iteration  15: 190011.333 ops/s
# Warmup Iteration  16: 188962.876 ops/s
# Warmup Iteration  17: 194532.152 ops/s
# Warmup Iteration  18: 196849.904 ops/s
# Warmup Iteration  19: 194633.454 ops/s
# Warmup Iteration  20: 196229.822 ops/s
# Warmup Iteration  21: 193932.148 ops/s
# Warmup Iteration  22: 193682.396 ops/s
# Warmup Iteration  23: 197137.384 ops/s
# Warmup Iteration  24: 194075.252 ops/s
# Warmup Iteration  25: 197655.403 ops/s
# Warmup Iteration  26: 195527.260 ops/s
# Warmup Iteration  27: 194357.451 ops/s
# Warmup Iteration  28: 195689.254 ops/s
# Warmup Iteration  29: 198868.478 ops/s
# Warmup Iteration  30: 209660.654 ops/s
Iteration   1: 201599.201 ops/s
Iteration   2: 191557.909 ops/s
Iteration   3: 194409.232 ops/s
Iteration   4: 205912.013 ops/s
Iteration   5: 199516.181 ops/s
Iteration   6: 207496.359 ops/s
Iteration   7: 210831.720 ops/s
Iteration   8: 200783.357 ops/s
Iteration   9: 203262.849 ops/s
Iteration  10: 204160.909 ops/s
Iteration  11: 208269.983 ops/s
Iteration  12: 196826.224 ops/s
Iteration  13: 197467.163 ops/s
Iteration  14: 196686.194 ops/s
Iteration  15: 202848.256 ops/s
Iteration  16: 201545.063 ops/s
Iteration  17: 196654.403 ops/s
Iteration  18: 194862.142 ops/s
Iteration  19: 197098.292 ops/s
Iteration  20: 194751.976 ops/s
Iteration  21: 202498.048 ops/s
Iteration  22: 194367.565 ops/s
Iteration  23: 199066.444 ops/s
Iteration  24: 201765.470 ops/s
Iteration  25: 197152.746 ops/s
Iteration  26: 199614.589 ops/s
Iteration  27: 196059.804 ops/s
Iteration  28: 193282.254 ops/s
Iteration  29: 196149.386 ops/s
Iteration  30: 196291.717 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_iterator":
  199426.248 ±(99.9%) 3167.540 ops/s [Average]
  (min, avg, max) = (191557.909, 199426.248, 210831.720), stdev = 4741.025
  CI (99.9%): [196258.709, 202593.788] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_iterator  thrpt   30  199426.248 ± 3167.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keyPreservation$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keyPreservation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 131408.739 ops/s
# Warmup Iteration   2: 235958.879 ops/s
# Warmup Iteration   3: 263554.615 ops/s
# Warmup Iteration   4: 261516.072 ops/s
# Warmup Iteration   5: 262123.135 ops/s
# Warmup Iteration   6: 214031.394 ops/s
# Warmup Iteration   7: 265098.952 ops/s
# Warmup Iteration   8: 272348.310 ops/s
# Warmup Iteration   9: 270901.503 ops/s
# Warmup Iteration  10: 264679.408 ops/s
# Warmup Iteration  11: 257535.159 ops/s
# Warmup Iteration  12: 260580.339 ops/s
# Warmup Iteration  13: 261285.988 ops/s
# Warmup Iteration  14: 260862.678 ops/s
# Warmup Iteration  15: 260450.122 ops/s
# Warmup Iteration  16: 257698.084 ops/s
# Warmup Iteration  17: 276378.002 ops/s
# Warmup Iteration  18: 268375.706 ops/s
# Warmup Iteration  19: 273344.900 ops/s
# Warmup Iteration  20: 267548.775 ops/s
# Warmup Iteration  21: 271685.953 ops/s
# Warmup Iteration  22: 276950.080 ops/s
# Warmup Iteration  23: 278329.427 ops/s
# Warmup Iteration  24: 278898.552 ops/s
# Warmup Iteration  25: 278471.371 ops/s
# Warmup Iteration  26: 265850.748 ops/s
# Warmup Iteration  27: 282346.187 ops/s
# Warmup Iteration  28: 278746.538 ops/s
# Warmup Iteration  29: 267182.879 ops/s
# Warmup Iteration  30: 283033.905 ops/s
Iteration   1: 274651.241 ops/s
Iteration   2: 285997.304 ops/s
Iteration   3: 263407.505 ops/s
Iteration   4: 283000.495 ops/s
Iteration   5: 274622.683 ops/s
Iteration   6: 264527.290 ops/s
Iteration   7: 256415.301 ops/s
Iteration   8: 269008.395 ops/s
Iteration   9: 280548.596 ops/s
Iteration  10: 274889.253 ops/s
Iteration  11: 271183.305 ops/s
Iteration  12: 278282.066 ops/s
Iteration  13: 272462.922 ops/s
Iteration  14: 266201.165 ops/s
Iteration  15: 272484.083 ops/s
Iteration  16: 262765.209 ops/s
Iteration  17: 265700.373 ops/s
Iteration  18: 259275.382 ops/s
Iteration  19: 276345.667 ops/s
Iteration  20: 272853.911 ops/s
Iteration  21: 269867.940 ops/s
Iteration  22: 273405.533 ops/s
Iteration  23: 275083.877 ops/s
Iteration  24: 264519.016 ops/s
Iteration  25: 271215.998 ops/s
Iteration  26: 284870.303 ops/s
Iteration  27: 277734.900 ops/s
Iteration  28: 277446.147 ops/s
Iteration  29: 260944.047 ops/s
Iteration  30: 262197.408 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keyPreservation":
  271396.911 ±(99.9%) 5089.249 ops/s [Average]
  (min, avg, max) = (256415.301, 271396.911, 285997.304), stdev = 7617.349
  CI (99.9%): [266307.661, 276486.160] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_keyPreservation  thrpt   30  271396.911 ± 5089.249  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keySetEqualsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keySetEqualsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 660274.498 ops/s
# Warmup Iteration   2: 1484236.839 ops/s
# Warmup Iteration   3: 1612127.641 ops/s
# Warmup Iteration   4: 1536331.804 ops/s
# Warmup Iteration   5: 1344785.579 ops/s
# Warmup Iteration   6: 1629906.778 ops/s
# Warmup Iteration   7: 1578536.322 ops/s
# Warmup Iteration   8: 1646976.199 ops/s
# Warmup Iteration   9: 1676336.357 ops/s
# Warmup Iteration  10: 1663022.346 ops/s
# Warmup Iteration  11: 1665280.570 ops/s
# Warmup Iteration  12: 1640505.016 ops/s
# Warmup Iteration  13: 1619439.233 ops/s
# Warmup Iteration  14: 1618828.289 ops/s
# Warmup Iteration  15: 1605105.327 ops/s
# Warmup Iteration  16: 1549022.633 ops/s
# Warmup Iteration  17: 1550917.977 ops/s
# Warmup Iteration  18: 1553068.485 ops/s
# Warmup Iteration  19: 1642455.902 ops/s
# Warmup Iteration  20: 1582517.127 ops/s
# Warmup Iteration  21: 1669476.035 ops/s
# Warmup Iteration  22: 1608551.121 ops/s
# Warmup Iteration  23: 1595328.280 ops/s
# Warmup Iteration  24: 1655635.993 ops/s
# Warmup Iteration  25: 1570000.329 ops/s
# Warmup Iteration  26: 1583549.404 ops/s
# Warmup Iteration  27: 1621886.368 ops/s
# Warmup Iteration  28: 1608635.110 ops/s
# Warmup Iteration  29: 1662345.945 ops/s
# Warmup Iteration  30: 1589776.817 ops/s
Iteration   1: 1549560.654 ops/s
Iteration   2: 1564564.703 ops/s
Iteration   3: 1606739.028 ops/s
Iteration   4: 1630673.249 ops/s
Iteration   5: 1590314.748 ops/s
Iteration   6: 1549178.448 ops/s
Iteration   7: 1615204.407 ops/s
Iteration   8: 1582818.092 ops/s
Iteration   9: 1665701.500 ops/s
Iteration  10: 1575475.767 ops/s
Iteration  11: 1547937.794 ops/s
Iteration  12: 1494390.071 ops/s
Iteration  13: 1537687.827 ops/s
Iteration  14: 1565473.316 ops/s
Iteration  15: 1516868.299 ops/s
Iteration  16: 1673845.783 ops/s
Iteration  17: 1548434.870 ops/s
Iteration  18: 1563378.024 ops/s
Iteration  19: 1666218.918 ops/s
Iteration  20: 1620487.775 ops/s
Iteration  21: 1659740.469 ops/s
Iteration  22: 1585358.612 ops/s
Iteration  23: 1610892.499 ops/s
Iteration  24: 1638039.017 ops/s
Iteration  25: 1589303.072 ops/s
Iteration  26: 1572441.633 ops/s
Iteration  27: 1626043.493 ops/s
Iteration  28: 1679932.048 ops/s
Iteration  29: 1649445.776 ops/s
Iteration  30: 1678078.836 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keySetEqualsAndHashCode":
  1598474.291 ±(99.9%) 33926.056 ops/s [Average]
  (min, avg, max) = (1494390.071, 1598474.291, 1679932.048), stdev = 50778.927
  CI (99.9%): [1564548.235, 1632400.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_keySetEqualsAndHashCode  thrpt   30  1598474.291 ± 33926.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keySetToArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keySetToArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1192502.439 ops/s
# Warmup Iteration   2: 2780660.519 ops/s
# Warmup Iteration   3: 2897313.285 ops/s
# Warmup Iteration   4: 2360742.442 ops/s
# Warmup Iteration   5: 2745308.742 ops/s
# Warmup Iteration   6: 2884923.692 ops/s
# Warmup Iteration   7: 2717394.591 ops/s
# Warmup Iteration   8: 2909705.608 ops/s
# Warmup Iteration   9: 2828204.067 ops/s
# Warmup Iteration  10: 2830574.275 ops/s
# Warmup Iteration  11: 2951711.287 ops/s
# Warmup Iteration  12: 2930861.350 ops/s
# Warmup Iteration  13: 2728373.340 ops/s
# Warmup Iteration  14: 2906331.121 ops/s
# Warmup Iteration  15: 2970787.515 ops/s
# Warmup Iteration  16: 2901625.469 ops/s
# Warmup Iteration  17: 2847652.540 ops/s
# Warmup Iteration  18: 2747421.470 ops/s
# Warmup Iteration  19: 2933744.031 ops/s
# Warmup Iteration  20: 2945747.776 ops/s
# Warmup Iteration  21: 2843259.495 ops/s
# Warmup Iteration  22: 2926173.135 ops/s
# Warmup Iteration  23: 2774857.167 ops/s
# Warmup Iteration  24: 2763603.578 ops/s
# Warmup Iteration  25: 2736203.528 ops/s
# Warmup Iteration  26: 2930243.847 ops/s
# Warmup Iteration  27: 2755245.265 ops/s
# Warmup Iteration  28: 2843808.589 ops/s
# Warmup Iteration  29: 2798658.281 ops/s
# Warmup Iteration  30: 2899282.651 ops/s
Iteration   1: 2968608.969 ops/s
Iteration   2: 2951199.629 ops/s
Iteration   3: 2855063.612 ops/s
Iteration   4: 2741892.699 ops/s
Iteration   5: 2827299.119 ops/s
Iteration   6: 2785271.932 ops/s
Iteration   7: 2870596.574 ops/s
Iteration   8: 2968150.063 ops/s
Iteration   9: 2911154.456 ops/s
Iteration  10: 2970941.072 ops/s
Iteration  11: 2902728.200 ops/s
Iteration  12: 2765207.128 ops/s
Iteration  13: 2868124.442 ops/s
Iteration  14: 2718081.657 ops/s
Iteration  15: 2769148.072 ops/s
Iteration  16: 2867261.737 ops/s
Iteration  17: 2749874.382 ops/s
Iteration  18: 2810392.477 ops/s
Iteration  19: 2970145.329 ops/s
Iteration  20: 2972101.277 ops/s
Iteration  21: 2953071.539 ops/s
Iteration  22: 2905069.596 ops/s
Iteration  23: 2819411.324 ops/s
Iteration  24: 2825561.190 ops/s
Iteration  25: 2888230.812 ops/s
Iteration  26: 2885548.924 ops/s
Iteration  27: 2886297.962 ops/s
Iteration  28: 2951342.195 ops/s
Iteration  29: 2847978.509 ops/s
Iteration  30: 2737201.679 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keySetToArray":
  2864765.219 ±(99.9%) 53310.735 ops/s [Average]
  (min, avg, max) = (2718081.657, 2864765.219, 2972101.277), stdev = 79793.005
  CI (99.9%): [2811454.483, 2918075.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_keySetToArray  thrpt   30  2864765.219 ± 53310.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keyValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keyValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 758944.919 ops/s
# Warmup Iteration   2: 1897047.280 ops/s
# Warmup Iteration   3: 1936404.378 ops/s
# Warmup Iteration   4: 1567182.012 ops/s
# Warmup Iteration   5: 1905227.672 ops/s
# Warmup Iteration   6: 1896697.984 ops/s
# Warmup Iteration   7: 1962587.661 ops/s
# Warmup Iteration   8: 1854565.012 ops/s
# Warmup Iteration   9: 1909950.913 ops/s
# Warmup Iteration  10: 1935553.762 ops/s
# Warmup Iteration  11: 1925991.642 ops/s
# Warmup Iteration  12: 1911615.681 ops/s
# Warmup Iteration  13: 1916090.847 ops/s
# Warmup Iteration  14: 1864137.971 ops/s
# Warmup Iteration  15: 1894989.161 ops/s
# Warmup Iteration  16: 1868793.237 ops/s
# Warmup Iteration  17: 1824638.660 ops/s
# Warmup Iteration  18: 1832717.800 ops/s
# Warmup Iteration  19: 1828185.236 ops/s
# Warmup Iteration  20: 1819269.648 ops/s
# Warmup Iteration  21: 1826923.183 ops/s
# Warmup Iteration  22: 1810911.989 ops/s
# Warmup Iteration  23: 1890772.358 ops/s
# Warmup Iteration  24: 1865013.095 ops/s
# Warmup Iteration  25: 1863190.508 ops/s
# Warmup Iteration  26: 1896446.077 ops/s
# Warmup Iteration  27: 1865190.762 ops/s
# Warmup Iteration  28: 1877883.749 ops/s
# Warmup Iteration  29: 1959642.395 ops/s
# Warmup Iteration  30: 1832541.785 ops/s
Iteration   1: 1924684.821 ops/s
Iteration   2: 1895469.909 ops/s
Iteration   3: 1969074.993 ops/s
Iteration   4: 1938552.895 ops/s
Iteration   5: 1992458.114 ops/s
Iteration   6: 1902496.224 ops/s
Iteration   7: 1820425.461 ops/s
Iteration   8: 1827191.285 ops/s
Iteration   9: 1831201.089 ops/s
Iteration  10: 1823659.219 ops/s
Iteration  11: 1822063.147 ops/s
Iteration  12: 1840011.498 ops/s
Iteration  13: 1827415.693 ops/s
Iteration  14: 1900306.577 ops/s
Iteration  15: 1818759.498 ops/s
Iteration  16: 1895531.761 ops/s
Iteration  17: 1835113.239 ops/s
Iteration  18: 1828539.197 ops/s
Iteration  19: 1823221.676 ops/s
Iteration  20: 1829005.442 ops/s
Iteration  21: 1849913.746 ops/s
Iteration  22: 1832154.691 ops/s
Iteration  23: 1821336.187 ops/s
Iteration  24: 1843941.214 ops/s
Iteration  25: 1848534.862 ops/s
Iteration  26: 1845196.411 ops/s
Iteration  27: 1876778.895 ops/s
Iteration  28: 1874719.254 ops/s
Iteration  29: 1874479.490 ops/s
Iteration  30: 1825346.068 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keyValuesView":
  1861252.752 ±(99.9%) 31363.483 ops/s [Average]
  (min, avg, max) = (1818759.498, 1861252.752, 1992458.114), stdev = 46943.388
  CI (99.9%): [1829889.269, 1892616.234] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_keyValuesView  thrpt   30  1861252.752 ± 31363.483  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keysAndValues_toString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keysAndValues_toString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 620118.789 ops/s
# Warmup Iteration   2: 1526252.070 ops/s
# Warmup Iteration   3: 1531783.057 ops/s
# Warmup Iteration   4: 1330712.073 ops/s
# Warmup Iteration   5: 1518605.598 ops/s
# Warmup Iteration   6: 1549128.613 ops/s
# Warmup Iteration   7: 1533586.069 ops/s
# Warmup Iteration   8: 1593836.516 ops/s
# Warmup Iteration   9: 1560791.831 ops/s
# Warmup Iteration  10: 1567753.729 ops/s
# Warmup Iteration  11: 1580748.099 ops/s
# Warmup Iteration  12: 1573679.172 ops/s
# Warmup Iteration  13: 1518975.859 ops/s
# Warmup Iteration  14: 1540835.774 ops/s
# Warmup Iteration  15: 1518373.269 ops/s
# Warmup Iteration  16: 1566022.819 ops/s
# Warmup Iteration  17: 1539714.956 ops/s
# Warmup Iteration  18: 1529034.324 ops/s
# Warmup Iteration  19: 1509134.416 ops/s
# Warmup Iteration  20: 1494302.753 ops/s
# Warmup Iteration  21: 1490099.866 ops/s
# Warmup Iteration  22: 1542955.210 ops/s
# Warmup Iteration  23: 1514000.896 ops/s
# Warmup Iteration  24: 1552764.058 ops/s
# Warmup Iteration  25: 1506289.602 ops/s
# Warmup Iteration  26: 1508782.232 ops/s
# Warmup Iteration  27: 1513382.990 ops/s
# Warmup Iteration  28: 1533596.950 ops/s
# Warmup Iteration  29: 1508396.955 ops/s
# Warmup Iteration  30: 1524421.041 ops/s
Iteration   1: 1551008.052 ops/s
Iteration   2: 1499733.888 ops/s
Iteration   3: 1520661.904 ops/s
Iteration   4: 1520455.349 ops/s
Iteration   5: 1523265.966 ops/s
Iteration   6: 1507331.831 ops/s
Iteration   7: 1496043.553 ops/s
Iteration   8: 1525952.911 ops/s
Iteration   9: 1509501.010 ops/s
Iteration  10: 1485459.496 ops/s
Iteration  11: 1494527.762 ops/s
Iteration  12: 1521527.049 ops/s
Iteration  13: 1505855.498 ops/s
Iteration  14: 1542568.563 ops/s
Iteration  15: 1589493.020 ops/s
Iteration  16: 1520419.726 ops/s
Iteration  17: 1503762.805 ops/s
Iteration  18: 1529930.633 ops/s
Iteration  19: 1538367.472 ops/s
Iteration  20: 1510089.998 ops/s
Iteration  21: 1510302.437 ops/s
Iteration  22: 1548710.891 ops/s
Iteration  23: 1522106.506 ops/s
Iteration  24: 1522978.112 ops/s
Iteration  25: 1523139.157 ops/s
Iteration  26: 1498821.054 ops/s
Iteration  27: 1510034.380 ops/s
Iteration  28: 1523472.947 ops/s
Iteration  29: 1525890.781 ops/s
Iteration  30: 1511144.664 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keysAndValues_toString":
  1519751.914 ±(99.9%) 13623.048 ops/s [Average]
  (min, avg, max) = (1485459.496, 1519751.914, 1589493.020), stdev = 20390.339
  CI (99.9%): [1506128.865, 1533374.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_keysAndValues_toString  thrpt   30  1519751.914 ± 13623.048  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keysView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keysView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1640201.282 ops/s
# Warmup Iteration   2: 4280558.201 ops/s
# Warmup Iteration   3: 4348650.273 ops/s
# Warmup Iteration   4: 3734389.009 ops/s
# Warmup Iteration   5: 4386930.200 ops/s
# Warmup Iteration   6: 4310766.835 ops/s
# Warmup Iteration   7: 4498381.157 ops/s
# Warmup Iteration   8: 4379995.549 ops/s
# Warmup Iteration   9: 4318806.265 ops/s
# Warmup Iteration  10: 4322015.319 ops/s
# Warmup Iteration  11: 4400595.608 ops/s
# Warmup Iteration  12: 4368888.628 ops/s
# Warmup Iteration  13: 4325273.228 ops/s
# Warmup Iteration  14: 4322541.554 ops/s
# Warmup Iteration  15: 4388322.259 ops/s
# Warmup Iteration  16: 4263507.672 ops/s
# Warmup Iteration  17: 4272780.388 ops/s
# Warmup Iteration  18: 4326477.280 ops/s
# Warmup Iteration  19: 4320700.941 ops/s
# Warmup Iteration  20: 4375904.910 ops/s
# Warmup Iteration  21: 4295422.944 ops/s
# Warmup Iteration  22: 4331943.699 ops/s
# Warmup Iteration  23: 4315872.132 ops/s
# Warmup Iteration  24: 4359709.534 ops/s
# Warmup Iteration  25: 4453647.337 ops/s
# Warmup Iteration  26: 4267883.698 ops/s
# Warmup Iteration  27: 4262995.986 ops/s
# Warmup Iteration  28: 4355477.842 ops/s
# Warmup Iteration  29: 4373382.857 ops/s
# Warmup Iteration  30: 4449000.665 ops/s
Iteration   1: 4293542.365 ops/s
Iteration   2: 4327661.873 ops/s
Iteration   3: 4315052.665 ops/s
Iteration   4: 4352436.973 ops/s
Iteration   5: 4538834.176 ops/s
Iteration   6: 4279953.062 ops/s
Iteration   7: 4302432.328 ops/s
Iteration   8: 4564679.416 ops/s
Iteration   9: 4460907.318 ops/s
Iteration  10: 4732909.586 ops/s
Iteration  11: 4656869.805 ops/s
Iteration  12: 4374005.178 ops/s
Iteration  13: 4399895.506 ops/s
Iteration  14: 4441674.200 ops/s
Iteration  15: 4332567.671 ops/s
Iteration  16: 4350205.834 ops/s
Iteration  17: 4308558.903 ops/s
Iteration  18: 4332713.238 ops/s
Iteration  19: 4406592.614 ops/s
Iteration  20: 4444588.763 ops/s
Iteration  21: 4488262.006 ops/s
Iteration  22: 4506873.143 ops/s
Iteration  23: 4568120.903 ops/s
Iteration  24: 4476891.442 ops/s
Iteration  25: 4382118.730 ops/s
Iteration  26: 4437643.766 ops/s
Iteration  27: 4366472.168 ops/s
Iteration  28: 4336231.130 ops/s
Iteration  29: 4495355.230 ops/s
Iteration  30: 4433392.342 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_keysView":
  4423581.411 ±(99.9%) 73930.004 ops/s [Average]
  (min, avg, max) = (4279953.062, 4423581.411, 4732909.586), stdev = 110654.958
  CI (99.9%): [4349651.407, 4497511.415] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_keysView  thrpt   30  4423581.411 ± 73930.004  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 965775.432 ops/s
# Warmup Iteration   2: 2243528.172 ops/s
# Warmup Iteration   3: 2294692.447 ops/s
# Warmup Iteration   4: 1740839.065 ops/s
# Warmup Iteration   5: 2208731.700 ops/s
# Warmup Iteration   6: 2158585.770 ops/s
# Warmup Iteration   7: 2165667.794 ops/s
# Warmup Iteration   8: 2169893.687 ops/s
# Warmup Iteration   9: 2229185.477 ops/s
# Warmup Iteration  10: 2127636.966 ops/s
# Warmup Iteration  11: 2157002.672 ops/s
# Warmup Iteration  12: 2182074.056 ops/s
# Warmup Iteration  13: 2234323.483 ops/s
# Warmup Iteration  14: 2149219.920 ops/s
# Warmup Iteration  15: 2219013.663 ops/s
# Warmup Iteration  16: 2192466.068 ops/s
# Warmup Iteration  17: 2156914.861 ops/s
# Warmup Iteration  18: 2158069.435 ops/s
# Warmup Iteration  19: 2148636.981 ops/s
# Warmup Iteration  20: 2207965.150 ops/s
# Warmup Iteration  21: 2187272.082 ops/s
# Warmup Iteration  22: 2263513.585 ops/s
# Warmup Iteration  23: 2163973.031 ops/s
# Warmup Iteration  24: 2249529.470 ops/s
# Warmup Iteration  25: 2149082.342 ops/s
# Warmup Iteration  26: 2163663.895 ops/s
# Warmup Iteration  27: 2249674.045 ops/s
# Warmup Iteration  28: 2172007.867 ops/s
# Warmup Iteration  29: 2265870.523 ops/s
# Warmup Iteration  30: 2238469.456 ops/s
Iteration   1: 2238849.858 ops/s
Iteration   2: 2150999.725 ops/s
Iteration   3: 2216444.772 ops/s
Iteration   4: 2148331.390 ops/s
Iteration   5: 2146106.573 ops/s
Iteration   6: 2136191.295 ops/s
Iteration   7: 2135578.736 ops/s
Iteration   8: 2159359.075 ops/s
Iteration   9: 2160775.779 ops/s
Iteration  10: 2193113.837 ops/s
Iteration  11: 2265517.158 ops/s
Iteration  12: 2235104.958 ops/s
Iteration  13: 2271673.677 ops/s
Iteration  14: 2249624.856 ops/s
Iteration  15: 2155948.099 ops/s
Iteration  16: 2188817.429 ops/s
Iteration  17: 2252524.779 ops/s
Iteration  18: 2194403.477 ops/s
Iteration  19: 2141905.540 ops/s
Iteration  20: 2233060.129 ops/s
Iteration  21: 2162421.969 ops/s
Iteration  22: 2142674.076 ops/s
Iteration  23: 2180055.895 ops/s
Iteration  24: 2263104.902 ops/s
Iteration  25: 2257148.750 ops/s
Iteration  26: 2157692.898 ops/s
Iteration  27: 2135038.793 ops/s
Iteration  28: 2212358.885 ops/s
Iteration  29: 2170924.232 ops/s
Iteration  30: 2232925.666 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_makeString":
  2192955.907 ±(99.9%) 31043.744 ops/s [Average]
  (min, avg, max) = (2135038.793, 2192955.907, 2271673.677), stdev = 46464.817
  CI (99.9%): [2161912.163, 2223999.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_makeString  thrpt   30  2192955.907 ± 31043.744  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1835733.520 ops/s
# Warmup Iteration   2: 4160146.526 ops/s
# Warmup Iteration   3: 4120802.430 ops/s
# Warmup Iteration   4: 3355239.362 ops/s
# Warmup Iteration   5: 4139834.463 ops/s
# Warmup Iteration   6: 4155841.066 ops/s
# Warmup Iteration   7: 4285599.487 ops/s
# Warmup Iteration   8: 4257818.430 ops/s
# Warmup Iteration   9: 4243253.633 ops/s
# Warmup Iteration  10: 4062916.790 ops/s
# Warmup Iteration  11: 4235218.283 ops/s
# Warmup Iteration  12: 4315743.665 ops/s
# Warmup Iteration  13: 4249734.708 ops/s
# Warmup Iteration  14: 4326781.760 ops/s
# Warmup Iteration  15: 4245638.492 ops/s
# Warmup Iteration  16: 4167614.413 ops/s
# Warmup Iteration  17: 4105100.016 ops/s
# Warmup Iteration  18: 4066983.875 ops/s
# Warmup Iteration  19: 4116543.544 ops/s
# Warmup Iteration  20: 4144892.617 ops/s
# Warmup Iteration  21: 4130444.603 ops/s
# Warmup Iteration  22: 4174189.815 ops/s
# Warmup Iteration  23: 4175910.582 ops/s
# Warmup Iteration  24: 4163545.624 ops/s
# Warmup Iteration  25: 4257935.248 ops/s
# Warmup Iteration  26: 4139981.667 ops/s
# Warmup Iteration  27: 4151741.659 ops/s
# Warmup Iteration  28: 4135125.295 ops/s
# Warmup Iteration  29: 4172924.792 ops/s
# Warmup Iteration  30: 4153140.737 ops/s
Iteration   1: 4127978.080 ops/s
Iteration   2: 4114229.381 ops/s
Iteration   3: 4092666.294 ops/s
Iteration   4: 4094654.502 ops/s
Iteration   5: 4162119.756 ops/s
Iteration   6: 4185349.143 ops/s
Iteration   7: 4129593.717 ops/s
Iteration   8: 4245443.039 ops/s
Iteration   9: 4202608.617 ops/s
Iteration  10: 4117203.779 ops/s
Iteration  11: 4135161.313 ops/s
Iteration  12: 4168262.643 ops/s
Iteration  13: 4078931.312 ops/s
Iteration  14: 4072146.150 ops/s
Iteration  15: 4216407.044 ops/s
Iteration  16: 4196864.867 ops/s
Iteration  17: 4074495.181 ops/s
Iteration  18: 4198114.058 ops/s
Iteration  19: 4292724.577 ops/s
Iteration  20: 4324594.206 ops/s
Iteration  21: 4205218.728 ops/s
Iteration  22: 4233787.717 ops/s
Iteration  23: 4257259.654 ops/s
Iteration  24: 4113564.935 ops/s
Iteration  25: 4095669.602 ops/s
Iteration  26: 4184181.549 ops/s
Iteration  27: 4188944.411 ops/s
Iteration  28: 4165265.870 ops/s
Iteration  29: 4112486.220 ops/s
Iteration  30: 4092112.175 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_max":
  4162601.284 ±(99.9%) 44523.354 ops/s [Average]
  (min, avg, max) = (4072146.150, 4162601.284, 4324594.206), stdev = 66640.466
  CI (99.9%): [4118077.930, 4207124.638] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_max  thrpt   30  4162601.284 ± 44523.354  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1464459.603 ops/s
# Warmup Iteration   2: 3650993.472 ops/s
# Warmup Iteration   3: 3549508.785 ops/s
# Warmup Iteration   4: 3089093.083 ops/s
# Warmup Iteration   5: 3690884.888 ops/s
# Warmup Iteration   6: 3738302.495 ops/s
# Warmup Iteration   7: 3588871.391 ops/s
# Warmup Iteration   8: 3641501.981 ops/s
# Warmup Iteration   9: 3729647.259 ops/s
# Warmup Iteration  10: 3626921.702 ops/s
# Warmup Iteration  11: 3671189.201 ops/s
# Warmup Iteration  12: 3721089.057 ops/s
# Warmup Iteration  13: 3692047.281 ops/s
# Warmup Iteration  14: 3709075.499 ops/s
# Warmup Iteration  15: 3596391.787 ops/s
# Warmup Iteration  16: 3626188.034 ops/s
# Warmup Iteration  17: 3575655.786 ops/s
# Warmup Iteration  18: 3699889.930 ops/s
# Warmup Iteration  19: 3731229.922 ops/s
# Warmup Iteration  20: 3804149.851 ops/s
# Warmup Iteration  21: 3803110.675 ops/s
# Warmup Iteration  22: 3783459.350 ops/s
# Warmup Iteration  23: 3780311.797 ops/s
# Warmup Iteration  24: 3710559.076 ops/s
# Warmup Iteration  25: 3618936.935 ops/s
# Warmup Iteration  26: 3811794.899 ops/s
# Warmup Iteration  27: 3653924.441 ops/s
# Warmup Iteration  28: 3735993.483 ops/s
# Warmup Iteration  29: 3647111.041 ops/s
# Warmup Iteration  30: 3617400.903 ops/s
Iteration   1: 3680424.342 ops/s
Iteration   2: 3631446.392 ops/s
Iteration   3: 3783960.562 ops/s
Iteration   4: 3577570.495 ops/s
Iteration   5: 3637494.217 ops/s
Iteration   6: 3620986.715 ops/s
Iteration   7: 3570126.337 ops/s
Iteration   8: 3585353.545 ops/s
Iteration   9: 3758228.024 ops/s
Iteration  10: 3601265.472 ops/s
Iteration  11: 3597136.654 ops/s
Iteration  12: 3667042.566 ops/s
Iteration  13: 3590822.106 ops/s
Iteration  14: 3668400.264 ops/s
Iteration  15: 3568091.881 ops/s
Iteration  16: 3622183.843 ops/s
Iteration  17: 3617109.515 ops/s
Iteration  18: 3691237.171 ops/s
Iteration  19: 3731703.289 ops/s
Iteration  20: 3630553.190 ops/s
Iteration  21: 3526284.460 ops/s
Iteration  22: 3659532.781 ops/s
Iteration  23: 3639313.768 ops/s
Iteration  24: 3642807.718 ops/s
Iteration  25: 3617026.086 ops/s
Iteration  26: 3673289.669 ops/s
Iteration  27: 3664813.576 ops/s
Iteration  28: 3623430.585 ops/s
Iteration  29: 3635169.449 ops/s
Iteration  30: 3590325.948 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_maxBy":
  3636771.021 ±(99.9%) 37425.662 ops/s [Average]
  (min, avg, max) = (3526284.460, 3636771.021, 3783960.562), stdev = 56016.974
  CI (99.9%): [3599345.358, 3674196.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_maxBy  thrpt   30  3636771.021 ± 37425.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1756525.246 ops/s
# Warmup Iteration   2: 4016988.902 ops/s
# Warmup Iteration   3: 4126276.431 ops/s
# Warmup Iteration   4: 3277803.707 ops/s
# Warmup Iteration   5: 3980131.798 ops/s
# Warmup Iteration   6: 3975283.038 ops/s
# Warmup Iteration   7: 3993150.546 ops/s
# Warmup Iteration   8: 3975451.825 ops/s
# Warmup Iteration   9: 4036920.625 ops/s
# Warmup Iteration  10: 4190141.332 ops/s
# Warmup Iteration  11: 4116523.234 ops/s
# Warmup Iteration  12: 4164453.589 ops/s
# Warmup Iteration  13: 4140398.015 ops/s
# Warmup Iteration  14: 4068510.541 ops/s
# Warmup Iteration  15: 4045855.746 ops/s
# Warmup Iteration  16: 4116545.924 ops/s
# Warmup Iteration  17: 3993189.770 ops/s
# Warmup Iteration  18: 4075531.591 ops/s
# Warmup Iteration  19: 4097869.905 ops/s
# Warmup Iteration  20: 4069349.707 ops/s
# Warmup Iteration  21: 4018431.575 ops/s
# Warmup Iteration  22: 4051893.916 ops/s
# Warmup Iteration  23: 4005156.256 ops/s
# Warmup Iteration  24: 4031081.538 ops/s
# Warmup Iteration  25: 3974218.015 ops/s
# Warmup Iteration  26: 4003449.623 ops/s
# Warmup Iteration  27: 4023067.501 ops/s
# Warmup Iteration  28: 4080949.231 ops/s
# Warmup Iteration  29: 4104682.854 ops/s
# Warmup Iteration  30: 4135596.901 ops/s
Iteration   1: 4162082.239 ops/s
Iteration   2: 4074008.725 ops/s
Iteration   3: 3907621.041 ops/s
Iteration   4: 3891983.321 ops/s
Iteration   5: 4003968.039 ops/s
Iteration   6: 3991357.534 ops/s
Iteration   7: 4006824.415 ops/s
Iteration   8: 4133633.154 ops/s
Iteration   9: 4147380.056 ops/s
Iteration  10: 4151805.681 ops/s
Iteration  11: 4069380.892 ops/s
Iteration  12: 4039764.267 ops/s
Iteration  13: 4030304.351 ops/s
Iteration  14: 4009877.784 ops/s
Iteration  15: 4021455.259 ops/s
Iteration  16: 3996028.802 ops/s
Iteration  17: 3957866.226 ops/s
Iteration  18: 4046118.863 ops/s
Iteration  19: 3949113.831 ops/s
Iteration  20: 4066971.942 ops/s
Iteration  21: 3963964.300 ops/s
Iteration  22: 3981189.209 ops/s
Iteration  23: 4110109.053 ops/s
Iteration  24: 3994745.871 ops/s
Iteration  25: 4038971.205 ops/s
Iteration  26: 4128310.160 ops/s
Iteration  27: 3983509.332 ops/s
Iteration  28: 4078735.619 ops/s
Iteration  29: 4108895.109 ops/s
Iteration  30: 4012370.993 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_min":
  4035278.242 ±(99.9%) 47487.409 ops/s [Average]
  (min, avg, max) = (3891983.321, 4035278.242, 4162082.239), stdev = 71076.924
  CI (99.9%): [3987790.834, 4082765.651] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_min  thrpt   30  4035278.242 ± 47487.409  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1621061.061 ops/s
# Warmup Iteration   2: 3545932.419 ops/s
# Warmup Iteration   3: 3461857.873 ops/s
# Warmup Iteration   4: 3039850.648 ops/s
# Warmup Iteration   5: 3633741.145 ops/s
# Warmup Iteration   6: 3541617.194 ops/s
# Warmup Iteration   7: 3546319.451 ops/s
# Warmup Iteration   8: 3478689.900 ops/s
# Warmup Iteration   9: 3494779.285 ops/s
# Warmup Iteration  10: 3589202.314 ops/s
# Warmup Iteration  11: 3657757.295 ops/s
# Warmup Iteration  12: 3562239.736 ops/s
# Warmup Iteration  13: 3499338.840 ops/s
# Warmup Iteration  14: 3514509.542 ops/s
# Warmup Iteration  15: 3502427.752 ops/s
# Warmup Iteration  16: 3433755.152 ops/s
# Warmup Iteration  17: 3538529.716 ops/s
# Warmup Iteration  18: 3595073.737 ops/s
# Warmup Iteration  19: 3494327.539 ops/s
# Warmup Iteration  20: 3512847.759 ops/s
# Warmup Iteration  21: 3463221.237 ops/s
# Warmup Iteration  22: 3604838.067 ops/s
# Warmup Iteration  23: 3820061.707 ops/s
# Warmup Iteration  24: 3709889.992 ops/s
# Warmup Iteration  25: 3541975.409 ops/s
# Warmup Iteration  26: 3526158.008 ops/s
# Warmup Iteration  27: 3643877.330 ops/s
# Warmup Iteration  28: 3555517.652 ops/s
# Warmup Iteration  29: 3488404.711 ops/s
# Warmup Iteration  30: 3471001.798 ops/s
Iteration   1: 3497149.200 ops/s
Iteration   2: 3511271.645 ops/s
Iteration   3: 3457149.130 ops/s
Iteration   4: 3541635.528 ops/s
Iteration   5: 3486303.371 ops/s
Iteration   6: 3530193.711 ops/s
Iteration   7: 3526263.685 ops/s
Iteration   8: 3549602.651 ops/s
Iteration   9: 3632235.359 ops/s
Iteration  10: 3596553.875 ops/s
Iteration  11: 3533026.368 ops/s
Iteration  12: 3512378.651 ops/s
Iteration  13: 3507391.088 ops/s
Iteration  14: 3506954.981 ops/s
Iteration  15: 3611357.698 ops/s
Iteration  16: 3459822.833 ops/s
Iteration  17: 3462312.600 ops/s
Iteration  18: 3544264.614 ops/s
Iteration  19: 3505162.780 ops/s
Iteration  20: 3448414.793 ops/s
Iteration  21: 3515610.887 ops/s
Iteration  22: 3455016.644 ops/s
Iteration  23: 3508701.655 ops/s
Iteration  24: 3473987.913 ops/s
Iteration  25: 3618310.031 ops/s
Iteration  26: 3468519.581 ops/s
Iteration  27: 3462344.854 ops/s
Iteration  28: 3471311.327 ops/s
Iteration  29: 3418019.369 ops/s
Iteration  30: 3495423.055 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_minBy":
  3510222.996 ±(99.9%) 35101.436 ops/s [Average]
  (min, avg, max) = (3418019.369, 3510222.996, 3632235.359), stdev = 52538.181
  CI (99.9%): [3475121.560, 3545324.432] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_minBy  thrpt   30  3510222.996 ± 35101.436  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1311733.975 ops/s
# Warmup Iteration   2: 3194756.163 ops/s
# Warmup Iteration   3: 2641366.803 ops/s
# Warmup Iteration   4: 3134003.340 ops/s
# Warmup Iteration   5: 3247721.426 ops/s
# Warmup Iteration   6: 3102679.731 ops/s
# Warmup Iteration   7: 3125738.056 ops/s
# Warmup Iteration   8: 3183642.470 ops/s
# Warmup Iteration   9: 3277538.863 ops/s
# Warmup Iteration  10: 3395523.525 ops/s
# Warmup Iteration  11: 3314083.964 ops/s
# Warmup Iteration  12: 3180612.023 ops/s
# Warmup Iteration  13: 3228173.105 ops/s
# Warmup Iteration  14: 3365305.512 ops/s
# Warmup Iteration  15: 3226484.537 ops/s
# Warmup Iteration  16: 3339346.949 ops/s
# Warmup Iteration  17: 3292632.537 ops/s
# Warmup Iteration  18: 3201197.078 ops/s
# Warmup Iteration  19: 3153331.436 ops/s
# Warmup Iteration  20: 3182343.480 ops/s
# Warmup Iteration  21: 3247275.947 ops/s
# Warmup Iteration  22: 3240474.577 ops/s
# Warmup Iteration  23: 3247866.705 ops/s
# Warmup Iteration  24: 3223802.513 ops/s
# Warmup Iteration  25: 3147104.117 ops/s
# Warmup Iteration  26: 3167584.485 ops/s
# Warmup Iteration  27: 3191049.344 ops/s
# Warmup Iteration  28: 3162790.216 ops/s
# Warmup Iteration  29: 3152884.253 ops/s
# Warmup Iteration  30: 3146227.484 ops/s
Iteration   1: 3082324.984 ops/s
Iteration   2: 3182764.205 ops/s
Iteration   3: 3120246.167 ops/s
Iteration   4: 3145752.458 ops/s
Iteration   5: 3143727.537 ops/s
Iteration   6: 3190890.347 ops/s
Iteration   7: 3183847.085 ops/s
Iteration   8: 3229002.773 ops/s
Iteration   9: 3153239.338 ops/s
Iteration  10: 3116731.486 ops/s
Iteration  11: 3147554.895 ops/s
Iteration  12: 3153965.431 ops/s
Iteration  13: 3178813.861 ops/s
Iteration  14: 3184714.767 ops/s
Iteration  15: 3137962.654 ops/s
Iteration  16: 3141582.597 ops/s
Iteration  17: 3140458.815 ops/s
Iteration  18: 3165060.748 ops/s
Iteration  19: 3146377.078 ops/s
Iteration  20: 3185191.632 ops/s
Iteration  21: 3233302.966 ops/s
Iteration  22: 3127729.136 ops/s
Iteration  23: 3307964.743 ops/s
Iteration  24: 3181989.506 ops/s
Iteration  25: 3099988.582 ops/s
Iteration  26: 3252299.516 ops/s
Iteration  27: 3135397.049 ops/s
Iteration  28: 3174645.959 ops/s
Iteration  29: 3078003.540 ops/s
Iteration  30: 3107266.679 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newEmpty":
  3160959.884 ±(99.9%) 33109.281 ops/s [Average]
  (min, avg, max) = (3078003.540, 3160959.884, 3307964.743), stdev = 49556.416
  CI (99.9%): [3127850.604, 3194069.165] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_newEmpty  thrpt   30  3160959.884 ± 33109.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newMapWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newMapWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 396912.189 ops/s
# Warmup Iteration   2: 908766.465 ops/s
# Warmup Iteration   3: 954567.388 ops/s
# Warmup Iteration   4: 888212.125 ops/s
# Warmup Iteration   5: 876136.364 ops/s
# Warmup Iteration   6: 951213.653 ops/s
# Warmup Iteration   7: 947097.995 ops/s
# Warmup Iteration   8: 942753.825 ops/s
# Warmup Iteration   9: 947425.845 ops/s
# Warmup Iteration  10: 956911.064 ops/s
# Warmup Iteration  11: 953525.631 ops/s
# Warmup Iteration  12: 950587.387 ops/s
# Warmup Iteration  13: 943973.484 ops/s
# Warmup Iteration  14: 952264.862 ops/s
# Warmup Iteration  15: 974672.234 ops/s
# Warmup Iteration  16: 953573.914 ops/s
# Warmup Iteration  17: 954786.139 ops/s
# Warmup Iteration  18: 969561.907 ops/s
# Warmup Iteration  19: 959424.049 ops/s
# Warmup Iteration  20: 976587.484 ops/s
# Warmup Iteration  21: 959792.587 ops/s
# Warmup Iteration  22: 943764.984 ops/s
# Warmup Iteration  23: 979388.171 ops/s
# Warmup Iteration  24: 959726.905 ops/s
# Warmup Iteration  25: 962886.142 ops/s
# Warmup Iteration  26: 961837.906 ops/s
# Warmup Iteration  27: 959717.657 ops/s
# Warmup Iteration  28: 951264.437 ops/s
# Warmup Iteration  29: 947091.328 ops/s
# Warmup Iteration  30: 945332.812 ops/s
Iteration   1: 956684.630 ops/s
Iteration   2: 973345.239 ops/s
Iteration   3: 947575.478 ops/s
Iteration   4: 985507.096 ops/s
Iteration   5: 969356.817 ops/s
Iteration   6: 966535.152 ops/s
Iteration   7: 998347.450 ops/s
Iteration   8: 941094.025 ops/s
Iteration   9: 956565.512 ops/s
Iteration  10: 983719.355 ops/s
Iteration  11: 974500.697 ops/s
Iteration  12: 965781.068 ops/s
Iteration  13: 955562.499 ops/s
Iteration  14: 976741.075 ops/s
Iteration  15: 954545.035 ops/s
Iteration  16: 955645.711 ops/s
Iteration  17: 922317.471 ops/s
Iteration  18: 938927.698 ops/s
Iteration  19: 938475.046 ops/s
Iteration  20: 969320.781 ops/s
Iteration  21: 947440.808 ops/s
Iteration  22: 951143.568 ops/s
Iteration  23: 952326.923 ops/s
Iteration  24: 933946.295 ops/s
Iteration  25: 955192.851 ops/s
Iteration  26: 950220.405 ops/s
Iteration  27: 951656.252 ops/s
Iteration  28: 944770.427 ops/s
Iteration  29: 942612.253 ops/s
Iteration  30: 945930.294 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newMapWithWith":
  956859.597 ±(99.9%) 11187.818 ops/s [Average]
  (min, avg, max) = (922317.471, 956859.597, 998347.450), stdev = 16745.401
  CI (99.9%): [945671.779, 968047.415] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_newMapWithWith  thrpt   30  956859.597 ± 11187.818  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newMapWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newMapWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 350528.894 ops/s
# Warmup Iteration   2: 734827.587 ops/s
# Warmup Iteration   3: 790589.171 ops/s
# Warmup Iteration   4: 795126.817 ops/s
# Warmup Iteration   5: 661978.792 ops/s
# Warmup Iteration   6: 800785.846 ops/s
# Warmup Iteration   7: 776888.776 ops/s
# Warmup Iteration   8: 811514.835 ops/s
# Warmup Iteration   9: 803285.961 ops/s
# Warmup Iteration  10: 795915.385 ops/s
# Warmup Iteration  11: 784386.538 ops/s
# Warmup Iteration  12: 803623.715 ops/s
# Warmup Iteration  13: 797802.400 ops/s
# Warmup Iteration  14: 798664.320 ops/s
# Warmup Iteration  15: 812388.099 ops/s
# Warmup Iteration  16: 796559.805 ops/s
# Warmup Iteration  17: 806496.959 ops/s
# Warmup Iteration  18: 807353.565 ops/s
# Warmup Iteration  19: 801791.062 ops/s
# Warmup Iteration  20: 817409.962 ops/s
# Warmup Iteration  21: 811047.255 ops/s
# Warmup Iteration  22: 785642.130 ops/s
# Warmup Iteration  23: 779843.792 ops/s
# Warmup Iteration  24: 769636.233 ops/s
# Warmup Iteration  25: 803638.508 ops/s
# Warmup Iteration  26: 795811.535 ops/s
# Warmup Iteration  27: 791013.668 ops/s
# Warmup Iteration  28: 778319.287 ops/s
# Warmup Iteration  29: 780764.493 ops/s
# Warmup Iteration  30: 775060.551 ops/s
Iteration   1: 777185.308 ops/s
Iteration   2: 775499.118 ops/s
Iteration   3: 768931.685 ops/s
Iteration   4: 777168.701 ops/s
Iteration   5: 776325.828 ops/s
Iteration   6: 781337.667 ops/s
Iteration   7: 774925.586 ops/s
Iteration   8: 787010.018 ops/s
Iteration   9: 797825.327 ops/s
Iteration  10: 772255.440 ops/s
Iteration  11: 772302.081 ops/s
Iteration  12: 775041.627 ops/s
Iteration  13: 783639.120 ops/s
Iteration  14: 769692.127 ops/s
Iteration  15: 778903.471 ops/s
Iteration  16: 776153.201 ops/s
Iteration  17: 821507.440 ops/s
Iteration  18: 782975.661 ops/s
Iteration  19: 790627.000 ops/s
Iteration  20: 811737.029 ops/s
Iteration  21: 780533.117 ops/s
Iteration  22: 807441.875 ops/s
Iteration  23: 788635.486 ops/s
Iteration  24: 773438.023 ops/s
Iteration  25: 785070.856 ops/s
Iteration  26: 770170.352 ops/s
Iteration  27: 787279.343 ops/s
Iteration  28: 760900.730 ops/s
Iteration  29: 773085.313 ops/s
Iteration  30: 770444.116 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newMapWithWithWith":
  781601.422 ±(99.9%) 8921.597 ops/s [Average]
  (min, avg, max) = (760900.730, 781601.422, 821507.440), stdev = 13353.428
  CI (99.9%): [772679.824, 790523.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_newMapWithWithWith  thrpt   30  781601.422 ± 8921.597  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newMapWithWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newMapWithWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 306074.953 ops/s
# Warmup Iteration   2: 547621.950 ops/s
# Warmup Iteration   3: 619735.158 ops/s
# Warmup Iteration   4: 606152.389 ops/s
# Warmup Iteration   5: 616005.701 ops/s
# Warmup Iteration   6: 505904.673 ops/s
# Warmup Iteration   7: 632703.536 ops/s
# Warmup Iteration   8: 612019.725 ops/s
# Warmup Iteration   9: 622172.147 ops/s
# Warmup Iteration  10: 624911.760 ops/s
# Warmup Iteration  11: 626562.047 ops/s
# Warmup Iteration  12: 612225.898 ops/s
# Warmup Iteration  13: 615661.589 ops/s
# Warmup Iteration  14: 617107.269 ops/s
# Warmup Iteration  15: 612557.824 ops/s
# Warmup Iteration  16: 615003.439 ops/s
# Warmup Iteration  17: 615212.809 ops/s
# Warmup Iteration  18: 615493.416 ops/s
# Warmup Iteration  19: 617911.446 ops/s
# Warmup Iteration  20: 618065.636 ops/s
# Warmup Iteration  21: 611587.779 ops/s
# Warmup Iteration  22: 610465.696 ops/s
# Warmup Iteration  23: 623359.093 ops/s
# Warmup Iteration  24: 620529.948 ops/s
# Warmup Iteration  25: 620176.758 ops/s
# Warmup Iteration  26: 609084.315 ops/s
# Warmup Iteration  27: 635137.507 ops/s
# Warmup Iteration  28: 617496.941 ops/s
# Warmup Iteration  29: 639923.492 ops/s
# Warmup Iteration  30: 632292.495 ops/s
Iteration   1: 602614.344 ops/s
Iteration   2: 644459.522 ops/s
Iteration   3: 603202.171 ops/s
Iteration   4: 625307.213 ops/s
Iteration   5: 613886.891 ops/s
Iteration   6: 611828.727 ops/s
Iteration   7: 613376.186 ops/s
Iteration   8: 635124.618 ops/s
Iteration   9: 656622.134 ops/s
Iteration  10: 627810.492 ops/s
Iteration  11: 666209.652 ops/s
Iteration  12: 620971.526 ops/s
Iteration  13: 604090.497 ops/s
Iteration  14: 620230.890 ops/s
Iteration  15: 617121.828 ops/s
Iteration  16: 606196.380 ops/s
Iteration  17: 603415.302 ops/s
Iteration  18: 619529.145 ops/s
Iteration  19: 619890.266 ops/s
Iteration  20: 625221.346 ops/s
Iteration  21: 616058.543 ops/s
Iteration  22: 616728.696 ops/s
Iteration  23: 603431.738 ops/s
Iteration  24: 616358.672 ops/s
Iteration  25: 626908.793 ops/s
Iteration  26: 616094.084 ops/s
Iteration  27: 615121.233 ops/s
Iteration  28: 641417.499 ops/s
Iteration  29: 619425.640 ops/s
Iteration  30: 626931.752 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newMapWithWithWithWith":
  621186.193 ±(99.9%) 10190.222 ops/s [Average]
  (min, avg, max) = (602614.344, 621186.193, 666209.652), stdev = 15252.246
  CI (99.9%): [610995.970, 631376.415] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_newMapWithWithWithWith  thrpt   30  621186.193 ± 10190.222  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newMap_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newMap_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 154020.752 ops/s
# Warmup Iteration   2: 156979.979 ops/s
# Warmup Iteration   3: 179077.987 ops/s
# Warmup Iteration   4: 199917.124 ops/s
# Warmup Iteration   5: 201338.184 ops/s
# Warmup Iteration   6: 200378.731 ops/s
# Warmup Iteration   7: 197288.481 ops/s
# Warmup Iteration   8: 190105.491 ops/s
# Warmup Iteration   9: 195373.350 ops/s
# Warmup Iteration  10: 194810.492 ops/s
# Warmup Iteration  11: 192978.191 ops/s
# Warmup Iteration  12: 191884.479 ops/s
# Warmup Iteration  13: 197353.536 ops/s
# Warmup Iteration  14: 188985.630 ops/s
# Warmup Iteration  15: 171252.814 ops/s
# Warmup Iteration  16: 180102.273 ops/s
# Warmup Iteration  17: 202310.836 ops/s
# Warmup Iteration  18: 203306.344 ops/s
# Warmup Iteration  19: 197867.758 ops/s
# Warmup Iteration  20: 201874.918 ops/s
# Warmup Iteration  21: 200219.522 ops/s
# Warmup Iteration  22: 200498.361 ops/s
# Warmup Iteration  23: 201455.537 ops/s
# Warmup Iteration  24: 202938.439 ops/s
# Warmup Iteration  25: 203086.365 ops/s
# Warmup Iteration  26: 201614.620 ops/s
# Warmup Iteration  27: 202391.710 ops/s
# Warmup Iteration  28: 203796.684 ops/s
# Warmup Iteration  29: 201728.862 ops/s
# Warmup Iteration  30: 200323.092 ops/s
Iteration   1: 203289.110 ops/s
Iteration   2: 204721.892 ops/s
Iteration   3: 204745.110 ops/s
Iteration   4: 203507.567 ops/s
Iteration   5: 201214.463 ops/s
Iteration   6: 199805.180 ops/s
Iteration   7: 201016.540 ops/s
Iteration   8: 211618.865 ops/s
Iteration   9: 210854.954 ops/s
Iteration  10: 208720.021 ops/s
Iteration  11: 210628.422 ops/s
Iteration  12: 207971.839 ops/s
Iteration  13: 211202.294 ops/s
Iteration  14: 210397.349 ops/s
Iteration  15: 198192.447 ops/s
Iteration  16: 202226.914 ops/s
Iteration  17: 210502.012 ops/s
Iteration  18: 204716.925 ops/s
Iteration  19: 203361.768 ops/s
Iteration  20: 199644.259 ops/s
Iteration  21: 203362.659 ops/s
Iteration  22: 200144.977 ops/s
Iteration  23: 208412.785 ops/s
Iteration  24: 210082.479 ops/s
Iteration  25: 198496.521 ops/s
Iteration  26: 199620.183 ops/s
Iteration  27: 203359.208 ops/s
Iteration  28: 209501.150 ops/s
Iteration  29: 210803.644 ops/s
Iteration  30: 201686.921 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_newMap_throws":
  205126.949 ±(99.9%) 2988.844 ops/s [Average]
  (min, avg, max) = (198192.447, 205126.949, 211618.865), stdev = 4473.561
  CI (99.9%): [202138.105, 208115.792] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_newMap_throws  thrpt   30  205126.949 ± 2988.844  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1475455.553 ops/s
# Warmup Iteration   2: 3578891.319 ops/s
# Warmup Iteration   3: 3629084.631 ops/s
# Warmup Iteration   4: 3003030.365 ops/s
# Warmup Iteration   5: 3599087.723 ops/s
# Warmup Iteration   6: 3544427.975 ops/s
# Warmup Iteration   7: 3529010.675 ops/s
# Warmup Iteration   8: 3608123.136 ops/s
# Warmup Iteration   9: 3554399.745 ops/s
# Warmup Iteration  10: 3502206.235 ops/s
# Warmup Iteration  11: 3666500.813 ops/s
# Warmup Iteration  12: 3683400.181 ops/s
# Warmup Iteration  13: 3676632.011 ops/s
# Warmup Iteration  14: 3614398.259 ops/s
# Warmup Iteration  15: 3580028.688 ops/s
# Warmup Iteration  16: 3695785.537 ops/s
# Warmup Iteration  17: 3675285.610 ops/s
# Warmup Iteration  18: 3678660.846 ops/s
# Warmup Iteration  19: 3545404.201 ops/s
# Warmup Iteration  20: 3525418.811 ops/s
# Warmup Iteration  21: 3587524.854 ops/s
# Warmup Iteration  22: 3512170.806 ops/s
# Warmup Iteration  23: 3637740.161 ops/s
# Warmup Iteration  24: 3683227.569 ops/s
# Warmup Iteration  25: 3620569.415 ops/s
# Warmup Iteration  26: 3623933.013 ops/s
# Warmup Iteration  27: 3642338.851 ops/s
# Warmup Iteration  28: 3632702.451 ops/s
# Warmup Iteration  29: 3701208.137 ops/s
# Warmup Iteration  30: 3675106.007 ops/s
Iteration   1: 3586688.384 ops/s
Iteration   2: 3563706.313 ops/s
Iteration   3: 3493576.671 ops/s
Iteration   4: 3700029.555 ops/s
Iteration   5: 3462984.949 ops/s
Iteration   6: 3585252.825 ops/s
Iteration   7: 3510037.598 ops/s
Iteration   8: 3618040.820 ops/s
Iteration   9: 3713634.159 ops/s
Iteration  10: 3615145.422 ops/s
Iteration  11: 3546854.007 ops/s
Iteration  12: 3481760.375 ops/s
Iteration  13: 3598362.569 ops/s
Iteration  14: 3510681.678 ops/s
Iteration  15: 3541897.119 ops/s
Iteration  16: 3669932.970 ops/s
Iteration  17: 3698333.654 ops/s
Iteration  18: 3542049.880 ops/s
Iteration  19: 3498107.624 ops/s
Iteration  20: 3602288.201 ops/s
Iteration  21: 3592228.273 ops/s
Iteration  22: 3570807.828 ops/s
Iteration  23: 3495532.565 ops/s
Iteration  24: 3694861.023 ops/s
Iteration  25: 3518970.267 ops/s
Iteration  26: 3509356.269 ops/s
Iteration  27: 3474911.639 ops/s
Iteration  28: 3701745.883 ops/s
Iteration  29: 3567928.525 ops/s
Iteration  30: 3583825.236 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_noneSatisfy":
  3574984.409 ±(99.9%) 50237.728 ops/s [Average]
  (min, avg, max) = (3462984.949, 3574984.409, 3713634.159), stdev = 75193.472
  CI (99.9%): [3524746.681, 3625222.138] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_noneSatisfy  thrpt   30  3574984.409 ± 50237.728  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2297617.020 ops/s
# Warmup Iteration   2: 5250482.733 ops/s
# Warmup Iteration   3: 5343387.064 ops/s
# Warmup Iteration   4: 4220362.710 ops/s
# Warmup Iteration   5: 5369046.842 ops/s
# Warmup Iteration   6: 5150809.246 ops/s
# Warmup Iteration   7: 5233558.311 ops/s
# Warmup Iteration   8: 5176936.014 ops/s
# Warmup Iteration   9: 5150801.049 ops/s
# Warmup Iteration  10: 5146491.809 ops/s
# Warmup Iteration  11: 5130735.742 ops/s
# Warmup Iteration  12: 5013224.323 ops/s
# Warmup Iteration  13: 5379104.949 ops/s
# Warmup Iteration  14: 5052538.149 ops/s
# Warmup Iteration  15: 5117799.574 ops/s
# Warmup Iteration  16: 5136023.216 ops/s
# Warmup Iteration  17: 5192700.323 ops/s
# Warmup Iteration  18: 5410666.575 ops/s
# Warmup Iteration  19: 5182716.255 ops/s
# Warmup Iteration  20: 5067357.102 ops/s
# Warmup Iteration  21: 5187755.187 ops/s
# Warmup Iteration  22: 5147634.024 ops/s
# Warmup Iteration  23: 5222716.079 ops/s
# Warmup Iteration  24: 5237844.565 ops/s
# Warmup Iteration  25: 5357134.924 ops/s
# Warmup Iteration  26: 5251198.291 ops/s
# Warmup Iteration  27: 5300391.215 ops/s
# Warmup Iteration  28: 5280038.938 ops/s
# Warmup Iteration  29: 5185721.598 ops/s
# Warmup Iteration  30: 5196474.816 ops/s
Iteration   1: 5239430.343 ops/s
Iteration   2: 5107079.775 ops/s
Iteration   3: 5091803.612 ops/s
Iteration   4: 5248600.377 ops/s
Iteration   5: 5158433.802 ops/s
Iteration   6: 5123422.434 ops/s
Iteration   7: 5166383.139 ops/s
Iteration   8: 5201290.275 ops/s
Iteration   9: 5164132.263 ops/s
Iteration  10: 5259731.968 ops/s
Iteration  11: 5036389.203 ops/s
Iteration  12: 5029714.002 ops/s
Iteration  13: 4993088.535 ops/s
Iteration  14: 5164836.616 ops/s
Iteration  15: 5119598.407 ops/s
Iteration  16: 5235505.627 ops/s
Iteration  17: 5245428.863 ops/s
Iteration  18: 5390506.630 ops/s
Iteration  19: 5289666.834 ops/s
Iteration  20: 5395180.310 ops/s
Iteration  21: 5234736.459 ops/s
Iteration  22: 5102154.301 ops/s
Iteration  23: 5023705.202 ops/s
Iteration  24: 5111929.577 ops/s
Iteration  25: 5324944.147 ops/s
Iteration  26: 5111809.740 ops/s
Iteration  27: 5360742.525 ops/s
Iteration  28: 5599229.998 ops/s
Iteration  29: 5562433.481 ops/s
Iteration  30: 5588897.079 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_noneSatisfyWith":
  5222693.517 ±(99.9%) 107818.816 ops/s [Average]
  (min, avg, max) = (4993088.535, 5222693.517, 5599229.998), stdev = 161378.140
  CI (99.9%): [5114874.701, 5330512.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score        Error  Units
HashBiMapTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  5222693.517 ± 107818.816  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1500790.822 ops/s
# Warmup Iteration   2: 3382027.470 ops/s
# Warmup Iteration   3: 2831897.636 ops/s
# Warmup Iteration   4: 3514951.165 ops/s
# Warmup Iteration   5: 3483238.827 ops/s
# Warmup Iteration   6: 3403468.456 ops/s
# Warmup Iteration   7: 3385860.156 ops/s
# Warmup Iteration   8: 3451477.517 ops/s
# Warmup Iteration   9: 3429895.898 ops/s
# Warmup Iteration  10: 3465013.322 ops/s
# Warmup Iteration  11: 3390369.890 ops/s
# Warmup Iteration  12: 3332528.127 ops/s
# Warmup Iteration  13: 3369304.763 ops/s
# Warmup Iteration  14: 3312630.841 ops/s
# Warmup Iteration  15: 3356149.023 ops/s
# Warmup Iteration  16: 3360829.601 ops/s
# Warmup Iteration  17: 3356559.381 ops/s
# Warmup Iteration  18: 3397524.816 ops/s
# Warmup Iteration  19: 3397676.937 ops/s
# Warmup Iteration  20: 3342013.876 ops/s
# Warmup Iteration  21: 3431046.380 ops/s
# Warmup Iteration  22: 3404028.626 ops/s
# Warmup Iteration  23: 3354375.601 ops/s
# Warmup Iteration  24: 3314497.716 ops/s
# Warmup Iteration  25: 3383340.993 ops/s
# Warmup Iteration  26: 3423747.354 ops/s
# Warmup Iteration  27: 3434589.927 ops/s
# Warmup Iteration  28: 3509575.867 ops/s
# Warmup Iteration  29: 3395549.710 ops/s
# Warmup Iteration  30: 3512470.237 ops/s
Iteration   1: 3511360.012 ops/s
Iteration   2: 3452933.916 ops/s
Iteration   3: 3463650.280 ops/s
Iteration   4: 3357246.894 ops/s
Iteration   5: 3423369.711 ops/s
Iteration   6: 3368431.316 ops/s
Iteration   7: 3508298.102 ops/s
Iteration   8: 3402891.447 ops/s
Iteration   9: 3467589.945 ops/s
Iteration  10: 3461094.467 ops/s
Iteration  11: 3344270.268 ops/s
Iteration  12: 3434332.468 ops/s
Iteration  13: 3338114.376 ops/s
Iteration  14: 3328948.604 ops/s
Iteration  15: 3373820.538 ops/s
Iteration  16: 3497737.675 ops/s
Iteration  17: 3387593.384 ops/s
Iteration  18: 3417442.925 ops/s
Iteration  19: 3464710.531 ops/s
Iteration  20: 3512897.362 ops/s
Iteration  21: 3460573.736 ops/s
Iteration  22: 3397528.938 ops/s
Iteration  23: 3492515.409 ops/s
Iteration  24: 3505366.234 ops/s
Iteration  25: 3418480.052 ops/s
Iteration  26: 3438381.994 ops/s
Iteration  27: 3423126.743 ops/s
Iteration  28: 3430163.469 ops/s
Iteration  29: 3452554.836 ops/s
Iteration  30: 3440999.321 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_notEmpty":
  3432547.498 ±(99.9%) 35681.150 ops/s [Average]
  (min, avg, max) = (3328948.604, 3432547.498, 3512897.362), stdev = 53405.869
  CI (99.9%): [3396866.349, 3468228.648] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_notEmpty  thrpt   30  3432547.498 ± 35681.150  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_nullCollisionWithCastInEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_nullCollisionWithCastInEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 863216.297 ops/s
# Warmup Iteration   2: 2254247.188 ops/s
# Warmup Iteration   3: 2100016.029 ops/s
# Warmup Iteration   4: 1928570.934 ops/s
# Warmup Iteration   5: 2234705.836 ops/s
# Warmup Iteration   6: 2217578.175 ops/s
# Warmup Iteration   7: 2249090.744 ops/s
# Warmup Iteration   8: 2205518.378 ops/s
# Warmup Iteration   9: 2209275.074 ops/s
# Warmup Iteration  10: 2258076.325 ops/s
# Warmup Iteration  11: 2201363.862 ops/s
# Warmup Iteration  12: 2242728.127 ops/s
# Warmup Iteration  13: 2199962.008 ops/s
# Warmup Iteration  14: 2208561.785 ops/s
# Warmup Iteration  15: 2233673.705 ops/s
# Warmup Iteration  16: 2178881.177 ops/s
# Warmup Iteration  17: 2197381.929 ops/s
# Warmup Iteration  18: 2200625.391 ops/s
# Warmup Iteration  19: 2174082.104 ops/s
# Warmup Iteration  20: 2235927.744 ops/s
# Warmup Iteration  21: 2199096.857 ops/s
# Warmup Iteration  22: 2219384.557 ops/s
# Warmup Iteration  23: 2224784.198 ops/s
# Warmup Iteration  24: 2246735.904 ops/s
# Warmup Iteration  25: 2274034.200 ops/s
# Warmup Iteration  26: 2193983.803 ops/s
# Warmup Iteration  27: 2241838.906 ops/s
# Warmup Iteration  28: 2208917.809 ops/s
# Warmup Iteration  29: 2228827.327 ops/s
# Warmup Iteration  30: 2259799.373 ops/s
Iteration   1: 2179573.722 ops/s
Iteration   2: 2193122.606 ops/s
Iteration   3: 2249053.374 ops/s
Iteration   4: 2212382.738 ops/s
Iteration   5: 2245171.688 ops/s
Iteration   6: 2259604.853 ops/s
Iteration   7: 2299497.468 ops/s
Iteration   8: 2270664.910 ops/s
Iteration   9: 2294896.402 ops/s
Iteration  10: 2281435.383 ops/s
Iteration  11: 2246273.806 ops/s
Iteration  12: 2280152.146 ops/s
Iteration  13: 2280560.786 ops/s
Iteration  14: 2271767.772 ops/s
Iteration  15: 2317383.683 ops/s
Iteration  16: 2296974.994 ops/s
Iteration  17: 2247458.769 ops/s
Iteration  18: 2265558.500 ops/s
Iteration  19: 2262886.000 ops/s
Iteration  20: 2305487.725 ops/s
Iteration  21: 2247084.003 ops/s
Iteration  22: 2251872.680 ops/s
Iteration  23: 2262064.512 ops/s
Iteration  24: 2212224.968 ops/s
Iteration  25: 2188639.994 ops/s
Iteration  26: 2207792.405 ops/s
Iteration  27: 2254234.624 ops/s
Iteration  28: 2238897.886 ops/s
Iteration  29: 2248715.893 ops/s
Iteration  30: 2211796.483 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_nullCollisionWithCastInEquals":
  2252774.359 ±(99.9%) 23761.470 ops/s [Average]
  (min, avg, max) = (2179573.722, 2252774.359, 2317383.683), stdev = 35565.052
  CI (99.9%): [2229012.889, 2276535.829] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_nullCollisionWithCastInEquals  thrpt   30  2252774.359 ± 23761.470  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 643981.562 ops/s
# Warmup Iteration   2: 1394322.592 ops/s
# Warmup Iteration   3: 1442592.737 ops/s
# Warmup Iteration   4: 1269787.402 ops/s
# Warmup Iteration   5: 1316486.630 ops/s
# Warmup Iteration   6: 1418521.294 ops/s
# Warmup Iteration   7: 1437940.807 ops/s
# Warmup Iteration   8: 1428169.080 ops/s
# Warmup Iteration   9: 1460853.025 ops/s
# Warmup Iteration  10: 1412903.492 ops/s
# Warmup Iteration  11: 1416555.826 ops/s
# Warmup Iteration  12: 1411802.615 ops/s
# Warmup Iteration  13: 1446772.898 ops/s
# Warmup Iteration  14: 1432382.303 ops/s
# Warmup Iteration  15: 1445632.809 ops/s
# Warmup Iteration  16: 1455339.990 ops/s
# Warmup Iteration  17: 1412221.702 ops/s
# Warmup Iteration  18: 1433451.965 ops/s
# Warmup Iteration  19: 1453368.077 ops/s
# Warmup Iteration  20: 1401214.782 ops/s
# Warmup Iteration  21: 1422866.876 ops/s
# Warmup Iteration  22: 1455555.712 ops/s
# Warmup Iteration  23: 1424699.022 ops/s
# Warmup Iteration  24: 1420398.955 ops/s
# Warmup Iteration  25: 1409365.896 ops/s
# Warmup Iteration  26: 1414355.837 ops/s
# Warmup Iteration  27: 1403477.325 ops/s
# Warmup Iteration  28: 1391069.637 ops/s
# Warmup Iteration  29: 1462209.402 ops/s
# Warmup Iteration  30: 1423786.226 ops/s
Iteration   1: 1464742.021 ops/s
Iteration   2: 1424814.354 ops/s
Iteration   3: 1437617.287 ops/s
Iteration   4: 1407346.499 ops/s
Iteration   5: 1406883.978 ops/s
Iteration   6: 1408133.932 ops/s
Iteration   7: 1400006.148 ops/s
Iteration   8: 1439896.876 ops/s
Iteration   9: 1468211.096 ops/s
Iteration  10: 1443715.555 ops/s
Iteration  11: 1392416.043 ops/s
Iteration  12: 1407102.473 ops/s
Iteration  13: 1415590.582 ops/s
Iteration  14: 1451037.847 ops/s
Iteration  15: 1462275.112 ops/s
Iteration  16: 1451473.466 ops/s
Iteration  17: 1459000.170 ops/s
Iteration  18: 1488176.818 ops/s
Iteration  19: 1462677.232 ops/s
Iteration  20: 1440473.454 ops/s
Iteration  21: 1456501.724 ops/s
Iteration  22: 1435527.503 ops/s
Iteration  23: 1462533.333 ops/s
Iteration  24: 1411308.212 ops/s
Iteration  25: 1436793.293 ops/s
Iteration  26: 1462235.401 ops/s
Iteration  27: 1488265.836 ops/s
Iteration  28: 1478926.218 ops/s
Iteration  29: 1398605.808 ops/s
Iteration  30: 1400106.336 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_parallelStream":
  1438746.487 ±(99.9%) 19041.164 ops/s [Average]
  (min, avg, max) = (1392416.043, 1438746.487, 1488265.836), stdev = 28499.920
  CI (99.9%): [1419705.323, 1457787.651] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_parallelStream  thrpt   30  1438746.487 ± 19041.164  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_partitionWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_partitionWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 896037.843 ops/s
# Warmup Iteration   2: 2305357.581 ops/s
# Warmup Iteration   3: 2346873.660 ops/s
# Warmup Iteration   4: 1903617.877 ops/s
# Warmup Iteration   5: 2315604.877 ops/s
# Warmup Iteration   6: 2361232.031 ops/s
# Warmup Iteration   7: 2346616.344 ops/s
# Warmup Iteration   8: 2329808.688 ops/s
# Warmup Iteration   9: 2277337.673 ops/s
# Warmup Iteration  10: 2354992.444 ops/s
# Warmup Iteration  11: 2322662.662 ops/s
# Warmup Iteration  12: 2482209.450 ops/s
# Warmup Iteration  13: 2309956.340 ops/s
# Warmup Iteration  14: 2330822.536 ops/s
# Warmup Iteration  15: 2280681.242 ops/s
# Warmup Iteration  16: 2268949.586 ops/s
# Warmup Iteration  17: 2304526.616 ops/s
# Warmup Iteration  18: 2341381.717 ops/s
# Warmup Iteration  19: 2342575.685 ops/s
# Warmup Iteration  20: 2262854.485 ops/s
# Warmup Iteration  21: 2351397.735 ops/s
# Warmup Iteration  22: 2315947.256 ops/s
# Warmup Iteration  23: 2303839.376 ops/s
# Warmup Iteration  24: 2297406.582 ops/s
# Warmup Iteration  25: 2290079.265 ops/s
# Warmup Iteration  26: 2347588.633 ops/s
# Warmup Iteration  27: 2292683.164 ops/s
# Warmup Iteration  28: 2369441.464 ops/s
# Warmup Iteration  29: 2314295.390 ops/s
# Warmup Iteration  30: 2280139.421 ops/s
Iteration   1: 2340952.139 ops/s
Iteration   2: 2283832.883 ops/s
Iteration   3: 2295261.340 ops/s
Iteration   4: 2266065.270 ops/s
Iteration   5: 2262064.680 ops/s
Iteration   6: 2270453.180 ops/s
Iteration   7: 2326516.059 ops/s
Iteration   8: 2347158.357 ops/s
Iteration   9: 2317261.438 ops/s
Iteration  10: 2311113.539 ops/s
Iteration  11: 2336185.540 ops/s
Iteration  12: 2313512.401 ops/s
Iteration  13: 2311115.539 ops/s
Iteration  14: 2216020.242 ops/s
Iteration  15: 2274459.214 ops/s
Iteration  16: 2281169.397 ops/s
Iteration  17: 2334408.369 ops/s
Iteration  18: 2282992.580 ops/s
Iteration  19: 2290919.129 ops/s
Iteration  20: 2262987.680 ops/s
Iteration  21: 2350700.707 ops/s
Iteration  22: 2272653.282 ops/s
Iteration  23: 2241539.104 ops/s
Iteration  24: 2260233.249 ops/s
Iteration  25: 2315027.510 ops/s
Iteration  26: 2375698.356 ops/s
Iteration  27: 2358269.830 ops/s
Iteration  28: 2368210.381 ops/s
Iteration  29: 2386843.230 ops/s
Iteration  30: 2304753.974 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_partitionWith_value":
  2305279.287 ±(99.9%) 27859.108 ops/s [Average]
  (min, avg, max) = (2216020.242, 2305279.287, 2386843.230), stdev = 41698.205
  CI (99.9%): [2277420.178, 2333138.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_partitionWith_value  thrpt   30  2305279.287 ± 27859.108  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_partition_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_partition_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1095432.560 ops/s
# Warmup Iteration   2: 2862926.543 ops/s
# Warmup Iteration   3: 2680328.861 ops/s
# Warmup Iteration   4: 2509910.732 ops/s
# Warmup Iteration   5: 2824975.651 ops/s
# Warmup Iteration   6: 2912832.177 ops/s
# Warmup Iteration   7: 2852286.547 ops/s
# Warmup Iteration   8: 2844137.712 ops/s
# Warmup Iteration   9: 2895627.578 ops/s
# Warmup Iteration  10: 2817961.168 ops/s
# Warmup Iteration  11: 2831545.006 ops/s
# Warmup Iteration  12: 2867005.983 ops/s
# Warmup Iteration  13: 2845951.204 ops/s
# Warmup Iteration  14: 2865336.873 ops/s
# Warmup Iteration  15: 2869240.029 ops/s
# Warmup Iteration  16: 2837950.379 ops/s
# Warmup Iteration  17: 2841554.345 ops/s
# Warmup Iteration  18: 2821838.261 ops/s
# Warmup Iteration  19: 2902542.502 ops/s
# Warmup Iteration  20: 2927162.578 ops/s
# Warmup Iteration  21: 2935317.741 ops/s
# Warmup Iteration  22: 2906301.510 ops/s
# Warmup Iteration  23: 3015809.042 ops/s
# Warmup Iteration  24: 2930242.879 ops/s
# Warmup Iteration  25: 2853122.348 ops/s
# Warmup Iteration  26: 2879717.736 ops/s
# Warmup Iteration  27: 2953923.644 ops/s
# Warmup Iteration  28: 2831244.825 ops/s
# Warmup Iteration  29: 2842610.293 ops/s
# Warmup Iteration  30: 2882243.503 ops/s
Iteration   1: 2814381.838 ops/s
Iteration   2: 2877985.615 ops/s
Iteration   3: 2817332.211 ops/s
Iteration   4: 2817008.462 ops/s
Iteration   5: 2811356.824 ops/s
Iteration   6: 2831036.796 ops/s
Iteration   7: 2807311.099 ops/s
Iteration   8: 2881423.859 ops/s
Iteration   9: 2848065.309 ops/s
Iteration  10: 2878954.329 ops/s
Iteration  11: 2803347.551 ops/s
Iteration  12: 2851344.820 ops/s
Iteration  13: 3019156.760 ops/s
Iteration  14: 3004386.639 ops/s
Iteration  15: 2988368.204 ops/s
Iteration  16: 2912503.906 ops/s
Iteration  17: 2998253.282 ops/s
Iteration  18: 2946776.298 ops/s
Iteration  19: 2922040.640 ops/s
Iteration  20: 2931066.363 ops/s
Iteration  21: 2880286.407 ops/s
Iteration  22: 2945227.155 ops/s
Iteration  23: 3043982.807 ops/s
Iteration  24: 3062593.500 ops/s
Iteration  25: 2824084.921 ops/s
Iteration  26: 2864412.940 ops/s
Iteration  27: 2864390.072 ops/s
Iteration  28: 2888642.696 ops/s
Iteration  29: 2833036.031 ops/s
Iteration  30: 2879035.293 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_partition_value":
  2894926.421 ±(99.9%) 50619.365 ops/s [Average]
  (min, avg, max) = (2803347.551, 2894926.421, 3062593.500), stdev = 75764.689
  CI (99.9%): [2844307.056, 2945545.786] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_partition_value  thrpt   30  2894926.421 ± 50619.365  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_put$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_put

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 105196.107 ops/s
# Warmup Iteration   2: 146378.045 ops/s
# Warmup Iteration   3: 174891.888 ops/s
# Warmup Iteration   4: 175862.192 ops/s
# Warmup Iteration   5: 175365.017 ops/s
# Warmup Iteration   6: 175608.600 ops/s
# Warmup Iteration   7: 173760.570 ops/s
# Warmup Iteration   8: 142675.374 ops/s
# Warmup Iteration   9: 173068.423 ops/s
# Warmup Iteration  10: 177260.749 ops/s
# Warmup Iteration  11: 174150.664 ops/s
# Warmup Iteration  12: 175252.615 ops/s
# Warmup Iteration  13: 174759.443 ops/s
# Warmup Iteration  14: 173876.784 ops/s
# Warmup Iteration  15: 176114.827 ops/s
# Warmup Iteration  16: 174569.493 ops/s
# Warmup Iteration  17: 175768.606 ops/s
# Warmup Iteration  18: 181186.007 ops/s
# Warmup Iteration  19: 178097.298 ops/s
# Warmup Iteration  20: 179027.218 ops/s
# Warmup Iteration  21: 181304.908 ops/s
# Warmup Iteration  22: 181385.047 ops/s
# Warmup Iteration  23: 177585.200 ops/s
# Warmup Iteration  24: 176861.471 ops/s
# Warmup Iteration  25: 177073.340 ops/s
# Warmup Iteration  26: 177508.101 ops/s
# Warmup Iteration  27: 181809.823 ops/s
# Warmup Iteration  28: 189365.377 ops/s
# Warmup Iteration  29: 180757.480 ops/s
# Warmup Iteration  30: 177799.967 ops/s
Iteration   1: 181399.379 ops/s
Iteration   2: 178822.662 ops/s
Iteration   3: 179015.281 ops/s
Iteration   4: 176652.535 ops/s
Iteration   5: 180350.577 ops/s
Iteration   6: 182462.634 ops/s
Iteration   7: 181770.297 ops/s
Iteration   8: 177688.723 ops/s
Iteration   9: 181087.382 ops/s
Iteration  10: 182008.629 ops/s
Iteration  11: 186134.530 ops/s
Iteration  12: 189618.446 ops/s
Iteration  13: 179068.290 ops/s
Iteration  14: 177635.081 ops/s
Iteration  15: 180907.206 ops/s
Iteration  16: 186393.524 ops/s
Iteration  17: 182469.949 ops/s
Iteration  18: 180126.665 ops/s
Iteration  19: 177448.365 ops/s
Iteration  20: 179735.400 ops/s
Iteration  21: 180181.757 ops/s
Iteration  22: 178844.844 ops/s
Iteration  23: 180777.431 ops/s
Iteration  24: 178909.438 ops/s
Iteration  25: 180484.609 ops/s
Iteration  26: 185361.858 ops/s
Iteration  27: 186416.140 ops/s
Iteration  28: 187043.745 ops/s
Iteration  29: 182544.922 ops/s
Iteration  30: 186160.617 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_put":
  181584.030 ±(99.9%) 2214.099 ops/s [Average]
  (min, avg, max) = (176652.535, 181584.030, 189618.446), stdev = 3313.960
  CI (99.9%): [179369.931, 183798.130] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_put  thrpt   30  181584.030 ± 2214.099  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 395812.031 ops/s
# Warmup Iteration   2: 786424.541 ops/s
# Warmup Iteration   3: 844655.771 ops/s
# Warmup Iteration   4: 849864.600 ops/s
# Warmup Iteration   5: 713027.199 ops/s
# Warmup Iteration   6: 862454.567 ops/s
# Warmup Iteration   7: 837855.502 ops/s
# Warmup Iteration   8: 873637.743 ops/s
# Warmup Iteration   9: 849475.832 ops/s
# Warmup Iteration  10: 843578.139 ops/s
# Warmup Iteration  11: 853276.471 ops/s
# Warmup Iteration  12: 866285.611 ops/s
# Warmup Iteration  13: 854403.389 ops/s
# Warmup Iteration  14: 845268.094 ops/s
# Warmup Iteration  15: 837150.330 ops/s
# Warmup Iteration  16: 870000.076 ops/s
# Warmup Iteration  17: 861495.695 ops/s
# Warmup Iteration  18: 851547.907 ops/s
# Warmup Iteration  19: 864527.409 ops/s
# Warmup Iteration  20: 854774.713 ops/s
# Warmup Iteration  21: 860690.544 ops/s
# Warmup Iteration  22: 861024.962 ops/s
# Warmup Iteration  23: 846477.889 ops/s
# Warmup Iteration  24: 850879.239 ops/s
# Warmup Iteration  25: 884693.210 ops/s
# Warmup Iteration  26: 861747.476 ops/s
# Warmup Iteration  27: 846022.728 ops/s
# Warmup Iteration  28: 875929.527 ops/s
# Warmup Iteration  29: 844734.457 ops/s
# Warmup Iteration  30: 836136.327 ops/s
Iteration   1: 829500.933 ops/s
Iteration   2: 842740.820 ops/s
Iteration   3: 828285.472 ops/s
Iteration   4: 867828.976 ops/s
Iteration   5: 866114.041 ops/s
Iteration   6: 837702.056 ops/s
Iteration   7: 829858.274 ops/s
Iteration   8: 840684.304 ops/s
Iteration   9: 859499.396 ops/s
Iteration  10: 839914.031 ops/s
Iteration  11: 836762.193 ops/s
Iteration  12: 828261.031 ops/s
Iteration  13: 836611.243 ops/s
Iteration  14: 841989.727 ops/s
Iteration  15: 846388.970 ops/s
Iteration  16: 862893.724 ops/s
Iteration  17: 846811.453 ops/s
Iteration  18: 837898.236 ops/s
Iteration  19: 874611.301 ops/s
Iteration  20: 896158.782 ops/s
Iteration  21: 831650.119 ops/s
Iteration  22: 835895.512 ops/s
Iteration  23: 839811.513 ops/s
Iteration  24: 846123.647 ops/s
Iteration  25: 838469.146 ops/s
Iteration  26: 878869.950 ops/s
Iteration  27: 852509.154 ops/s
Iteration  28: 867430.883 ops/s
Iteration  29: 846758.948 ops/s
Iteration  30: 840578.451 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAll":
  847620.410 ±(99.9%) 11221.985 ops/s [Average]
  (min, avg, max) = (828261.031, 847620.410, 896158.782), stdev = 16796.541
  CI (99.9%): [836398.424, 858842.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_putAll  thrpt   30  847620.410 ± 11221.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 740352.645 ops/s
# Warmup Iteration   2: 1997093.942 ops/s
# Warmup Iteration   3: 2121635.040 ops/s
# Warmup Iteration   4: 1725830.324 ops/s
# Warmup Iteration   5: 2133964.048 ops/s
# Warmup Iteration   6: 2084309.826 ops/s
# Warmup Iteration   7: 2097148.352 ops/s
# Warmup Iteration   8: 2105535.034 ops/s
# Warmup Iteration   9: 2143972.977 ops/s
# Warmup Iteration  10: 2100591.660 ops/s
# Warmup Iteration  11: 2238104.490 ops/s
# Warmup Iteration  12: 2118627.851 ops/s
# Warmup Iteration  13: 2100329.706 ops/s
# Warmup Iteration  14: 2201877.646 ops/s
# Warmup Iteration  15: 2100960.734 ops/s
# Warmup Iteration  16: 2073654.797 ops/s
# Warmup Iteration  17: 2095991.359 ops/s
# Warmup Iteration  18: 2098367.933 ops/s
# Warmup Iteration  19: 2146923.840 ops/s
# Warmup Iteration  20: 2195660.271 ops/s
# Warmup Iteration  21: 2091295.174 ops/s
# Warmup Iteration  22: 2097670.179 ops/s
# Warmup Iteration  23: 2146888.057 ops/s
# Warmup Iteration  24: 2088965.060 ops/s
# Warmup Iteration  25: 2086644.043 ops/s
# Warmup Iteration  26: 2184172.744 ops/s
# Warmup Iteration  27: 2099293.934 ops/s
# Warmup Iteration  28: 2085885.082 ops/s
# Warmup Iteration  29: 2079689.632 ops/s
# Warmup Iteration  30: 2097298.038 ops/s
Iteration   1: 2045621.044 ops/s
Iteration   2: 2088153.163 ops/s
Iteration   3: 2105470.925 ops/s
Iteration   4: 2077774.184 ops/s
Iteration   5: 2108189.620 ops/s
Iteration   6: 2140300.318 ops/s
Iteration   7: 2110939.079 ops/s
Iteration   8: 2113666.646 ops/s
Iteration   9: 2110368.073 ops/s
Iteration  10: 2235473.716 ops/s
Iteration  11: 2126820.126 ops/s
Iteration  12: 2185708.388 ops/s
Iteration  13: 2161635.241 ops/s
Iteration  14: 2113437.563 ops/s
Iteration  15: 2094510.460 ops/s
Iteration  16: 2173050.883 ops/s
Iteration  17: 2099297.548 ops/s
Iteration  18: 2068136.912 ops/s
Iteration  19: 2081221.282 ops/s
Iteration  20: 2062428.305 ops/s
Iteration  21: 2180005.708 ops/s
Iteration  22: 2154184.307 ops/s
Iteration  23: 2160465.369 ops/s
Iteration  24: 2064239.050 ops/s
Iteration  25: 2054260.261 ops/s
Iteration  26: 2196091.466 ops/s
Iteration  27: 2236077.693 ops/s
Iteration  28: 2166680.949 ops/s
Iteration  29: 2091368.273 ops/s
Iteration  30: 2091855.656 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterable":
  2123247.740 ±(99.9%) 34372.836 ops/s [Average]
  (min, avg, max) = (2045621.044, 2123247.740, 2236077.693), stdev = 51447.646
  CI (99.9%): [2088874.905, 2157620.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_putAllMapIterable  thrpt   30  2123247.740 ± 34372.836  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterableEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterableEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 978939.399 ops/s
# Warmup Iteration   2: 2670124.818 ops/s
# Warmup Iteration   3: 2196464.085 ops/s
# Warmup Iteration   4: 2603363.559 ops/s
# Warmup Iteration   5: 2682946.311 ops/s
# Warmup Iteration   6: 2657267.111 ops/s
# Warmup Iteration   7: 2575525.483 ops/s
# Warmup Iteration   8: 2588207.134 ops/s
# Warmup Iteration   9: 2606376.417 ops/s
# Warmup Iteration  10: 2670556.540 ops/s
# Warmup Iteration  11: 2632822.762 ops/s
# Warmup Iteration  12: 2578972.439 ops/s
# Warmup Iteration  13: 2653131.458 ops/s
# Warmup Iteration  14: 2579919.932 ops/s
# Warmup Iteration  15: 2616006.031 ops/s
# Warmup Iteration  16: 2574908.494 ops/s
# Warmup Iteration  17: 2590681.176 ops/s
# Warmup Iteration  18: 2613511.922 ops/s
# Warmup Iteration  19: 2583641.727 ops/s
# Warmup Iteration  20: 2586993.100 ops/s
# Warmup Iteration  21: 2626033.106 ops/s
# Warmup Iteration  22: 2575758.333 ops/s
# Warmup Iteration  23: 2587562.687 ops/s
# Warmup Iteration  24: 2588903.017 ops/s
# Warmup Iteration  25: 2599277.934 ops/s
# Warmup Iteration  26: 2613665.688 ops/s
# Warmup Iteration  27: 2633036.570 ops/s
# Warmup Iteration  28: 2647558.502 ops/s
# Warmup Iteration  29: 2624417.705 ops/s
# Warmup Iteration  30: 2625424.352 ops/s
Iteration   1: 2756235.345 ops/s
Iteration   2: 2806194.826 ops/s
Iteration   3: 2555631.411 ops/s
Iteration   4: 2541692.872 ops/s
Iteration   5: 2557018.065 ops/s
Iteration   6: 2702881.434 ops/s
Iteration   7: 2596145.747 ops/s
Iteration   8: 2652430.251 ops/s
Iteration   9: 2629965.113 ops/s
Iteration  10: 2566719.245 ops/s
Iteration  11: 2556846.899 ops/s
Iteration  12: 2648710.420 ops/s
Iteration  13: 2623376.865 ops/s
Iteration  14: 2566176.920 ops/s
Iteration  15: 2552222.050 ops/s
Iteration  16: 2552545.703 ops/s
Iteration  17: 2570897.823 ops/s
Iteration  18: 2597158.714 ops/s
Iteration  19: 2637332.421 ops/s
Iteration  20: 2524955.269 ops/s
Iteration  21: 2596433.129 ops/s
Iteration  22: 2673884.242 ops/s
Iteration  23: 2580585.207 ops/s
Iteration  24: 2532024.556 ops/s
Iteration  25: 2588071.931 ops/s
Iteration  26: 2685072.946 ops/s
Iteration  27: 2618014.798 ops/s
Iteration  28: 2589854.195 ops/s
Iteration  29: 2577605.304 ops/s
Iteration  30: 2696199.419 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterableEmpty":
  2611096.104 ±(99.9%) 45104.978 ops/s [Average]
  (min, avg, max) = (2524955.269, 2611096.104, 2806194.826), stdev = 67511.013
  CI (99.9%): [2565991.126, 2656201.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_putAllMapIterableEmpty  thrpt   30  2611096.104 ± 45104.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1513474.922 ops/s
# Warmup Iteration   2: 3169761.873 ops/s
# Warmup Iteration   3: 2770378.718 ops/s
# Warmup Iteration   4: 3274617.837 ops/s
# Warmup Iteration   5: 3244759.586 ops/s
# Warmup Iteration   6: 3247702.931 ops/s
# Warmup Iteration   7: 3281764.043 ops/s
# Warmup Iteration   8: 3185955.383 ops/s
# Warmup Iteration   9: 3141083.156 ops/s
# Warmup Iteration  10: 3230836.222 ops/s
# Warmup Iteration  11: 3166003.425 ops/s
# Warmup Iteration  12: 3149613.792 ops/s
# Warmup Iteration  13: 3111151.247 ops/s
# Warmup Iteration  14: 3167771.810 ops/s
# Warmup Iteration  15: 3142071.755 ops/s
# Warmup Iteration  16: 3123221.283 ops/s
# Warmup Iteration  17: 3183037.577 ops/s
# Warmup Iteration  18: 3133767.727 ops/s
# Warmup Iteration  19: 3134163.111 ops/s
# Warmup Iteration  20: 3118379.011 ops/s
# Warmup Iteration  21: 3142744.731 ops/s
# Warmup Iteration  22: 3171478.572 ops/s
# Warmup Iteration  23: 3153793.981 ops/s
# Warmup Iteration  24: 3145976.318 ops/s
# Warmup Iteration  25: 3192098.961 ops/s
# Warmup Iteration  26: 3186864.448 ops/s
# Warmup Iteration  27: 3185380.724 ops/s
# Warmup Iteration  28: 3206634.431 ops/s
# Warmup Iteration  29: 3233629.950 ops/s
# Warmup Iteration  30: 3169253.776 ops/s
Iteration   1: 3228917.456 ops/s
Iteration   2: 3103335.222 ops/s
Iteration   3: 3168177.653 ops/s
Iteration   4: 3256575.718 ops/s
Iteration   5: 3253541.421 ops/s
Iteration   6: 3294883.017 ops/s
Iteration   7: 3311410.228 ops/s
Iteration   8: 3215756.026 ops/s
Iteration   9: 3254958.176 ops/s
Iteration  10: 3204941.380 ops/s
Iteration  11: 3096270.311 ops/s
Iteration  12: 3155402.695 ops/s
Iteration  13: 3062840.972 ops/s
Iteration  14: 3119471.017 ops/s
Iteration  15: 3130342.339 ops/s
Iteration  16: 3255609.261 ops/s
Iteration  17: 3210684.182 ops/s
Iteration  18: 3215957.196 ops/s
Iteration  19: 3234333.039 ops/s
Iteration  20: 3196443.563 ops/s
Iteration  21: 3170475.933 ops/s
Iteration  22: 3135694.960 ops/s
Iteration  23: 3166958.738 ops/s
Iteration  24: 3200123.788 ops/s
Iteration  25: 3221760.367 ops/s
Iteration  26: 3178539.116 ops/s
Iteration  27: 3099444.839 ops/s
Iteration  28: 3078822.767 ops/s
Iteration  29: 3054611.777 ops/s
Iteration  30: 3111150.781 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty":
  3179581.131 ±(99.9%) 46066.808 ops/s [Average]
  (min, avg, max) = (3054611.777, 3179581.131, 3311410.228), stdev = 68950.635
  CI (99.9%): [3133514.323, 3225647.940] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty  thrpt   30  3179581.131 ± 46066.808  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterableNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterableNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50853.338 ops/s
# Warmup Iteration   2: 46045.605 ops/s
# Warmup Iteration   3: 45963.232 ops/s
# Warmup Iteration   4: 47305.804 ops/s
# Warmup Iteration   5: 46231.083 ops/s
# Warmup Iteration   6: 45483.291 ops/s
# Warmup Iteration   7: 46682.596 ops/s
# Warmup Iteration   8: 49193.700 ops/s
# Warmup Iteration   9: 45556.374 ops/s
# Warmup Iteration  10: 47584.408 ops/s
# Warmup Iteration  11: 48692.014 ops/s
# Warmup Iteration  12: 47417.388 ops/s
# Warmup Iteration  13: 45399.766 ops/s
# Warmup Iteration  14: 45212.097 ops/s
# Warmup Iteration  15: 45047.880 ops/s
# Warmup Iteration  16: 45171.764 ops/s
# Warmup Iteration  17: 47986.075 ops/s
# Warmup Iteration  18: 47889.745 ops/s
# Warmup Iteration  19: 47742.560 ops/s
# Warmup Iteration  20: 46533.710 ops/s
# Warmup Iteration  21: 46665.009 ops/s
# Warmup Iteration  22: 47118.363 ops/s
# Warmup Iteration  23: 46884.314 ops/s
# Warmup Iteration  24: 46795.891 ops/s
# Warmup Iteration  25: 47110.533 ops/s
# Warmup Iteration  26: 47546.660 ops/s
# Warmup Iteration  27: 47443.871 ops/s
# Warmup Iteration  28: 46956.201 ops/s
# Warmup Iteration  29: 46385.843 ops/s
# Warmup Iteration  30: 46887.744 ops/s
Iteration   1: 51661.836 ops/s
Iteration   2: 51341.869 ops/s
Iteration   3: 50906.801 ops/s
Iteration   4: 47638.833 ops/s
Iteration   5: 47217.769 ops/s
Iteration   6: 47487.617 ops/s
Iteration   7: 47216.215 ops/s
Iteration   8: 47455.368 ops/s
Iteration   9: 46825.596 ops/s
Iteration  10: 47872.721 ops/s
Iteration  11: 50623.010 ops/s
Iteration  12: 47741.131 ops/s
Iteration  13: 46323.167 ops/s
Iteration  14: 47234.353 ops/s
Iteration  15: 47039.230 ops/s
Iteration  16: 47505.020 ops/s
Iteration  17: 47260.488 ops/s
Iteration  18: 46988.586 ops/s
Iteration  19: 47020.651 ops/s
Iteration  20: 46875.766 ops/s
Iteration  21: 47396.457 ops/s
Iteration  22: 48460.008 ops/s
Iteration  23: 47411.352 ops/s
Iteration  24: 47151.288 ops/s
Iteration  25: 47681.850 ops/s
Iteration  26: 47204.641 ops/s
Iteration  27: 47356.500 ops/s
Iteration  28: 47598.525 ops/s
Iteration  29: 46692.355 ops/s
Iteration  30: 46951.374 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterableNull":
  47804.679 ±(99.9%) 930.580 ops/s [Average]
  (min, avg, max) = (46323.167, 47804.679, 51661.836), stdev = 1392.849
  CI (99.9%): [46874.099, 48735.259] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt      Score     Error  Units
HashBiMapTest._Benchmark.benchmark_putAllMapIterableNull  thrpt   30  47804.679 ± 930.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterableTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterableTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 838944.351 ops/s
# Warmup Iteration   2: 2297257.324 ops/s
# Warmup Iteration   3: 1848867.701 ops/s
# Warmup Iteration   4: 2310473.149 ops/s
# Warmup Iteration   5: 2355204.815 ops/s
# Warmup Iteration   6: 2422078.142 ops/s
# Warmup Iteration   7: 2377714.201 ops/s
# Warmup Iteration   8: 2344425.931 ops/s
# Warmup Iteration   9: 2326773.378 ops/s
# Warmup Iteration  10: 2283218.490 ops/s
# Warmup Iteration  11: 2354990.448 ops/s
# Warmup Iteration  12: 2350242.585 ops/s
# Warmup Iteration  13: 2264372.726 ops/s
# Warmup Iteration  14: 2288907.681 ops/s
# Warmup Iteration  15: 2276265.951 ops/s
# Warmup Iteration  16: 2295748.257 ops/s
# Warmup Iteration  17: 2316892.723 ops/s
# Warmup Iteration  18: 2294322.536 ops/s
# Warmup Iteration  19: 2290860.573 ops/s
# Warmup Iteration  20: 2282539.251 ops/s
# Warmup Iteration  21: 2314890.804 ops/s
# Warmup Iteration  22: 2305468.090 ops/s
# Warmup Iteration  23: 2277320.079 ops/s
# Warmup Iteration  24: 2291120.999 ops/s
# Warmup Iteration  25: 2293421.073 ops/s
# Warmup Iteration  26: 2316762.532 ops/s
# Warmup Iteration  27: 2310832.420 ops/s
# Warmup Iteration  28: 2274997.261 ops/s
# Warmup Iteration  29: 2289079.518 ops/s
# Warmup Iteration  30: 2282394.856 ops/s
Iteration   1: 2300031.970 ops/s
Iteration   2: 2347480.859 ops/s
Iteration   3: 2306515.893 ops/s
Iteration   4: 2325690.659 ops/s
Iteration   5: 2357064.534 ops/s
Iteration   6: 2331906.747 ops/s
Iteration   7: 2291633.896 ops/s
Iteration   8: 2306809.257 ops/s
Iteration   9: 2328966.048 ops/s
Iteration  10: 2288228.517 ops/s
Iteration  11: 2285678.200 ops/s
Iteration  12: 2325263.110 ops/s
Iteration  13: 2307497.420 ops/s
Iteration  14: 2347488.593 ops/s
Iteration  15: 2288523.075 ops/s
Iteration  16: 2252762.906 ops/s
Iteration  17: 2282106.785 ops/s
Iteration  18: 2297403.153 ops/s
Iteration  19: 2322853.120 ops/s
Iteration  20: 2387866.415 ops/s
Iteration  21: 2270175.961 ops/s
Iteration  22: 2280602.423 ops/s
Iteration  23: 2297866.959 ops/s
Iteration  24: 2281571.031 ops/s
Iteration  25: 2358909.101 ops/s
Iteration  26: 2307700.143 ops/s
Iteration  27: 2259306.516 ops/s
Iteration  28: 2349671.634 ops/s
Iteration  29: 2252959.301 ops/s
Iteration  30: 2309882.365 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putAllMapIterableTargetEmpty":
  2308347.220 ±(99.9%) 22157.286 ops/s [Average]
  (min, avg, max) = (2252762.906, 2308347.220, 2387866.415), stdev = 33163.986
  CI (99.9%): [2286189.933, 2330504.506] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_putAllMapIterableTargetEmpty  thrpt   30  2308347.220 ± 22157.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putPair$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putPair

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 982286.725 ops/s
# Warmup Iteration   2: 2662470.842 ops/s
# Warmup Iteration   3: 2406928.514 ops/s
# Warmup Iteration   4: 2414899.971 ops/s
# Warmup Iteration   5: 2662691.787 ops/s
# Warmup Iteration   6: 2723743.075 ops/s
# Warmup Iteration   7: 2673054.921 ops/s
# Warmup Iteration   8: 2666601.292 ops/s
# Warmup Iteration   9: 2741772.829 ops/s
# Warmup Iteration  10: 2800990.492 ops/s
# Warmup Iteration  11: 2655608.329 ops/s
# Warmup Iteration  12: 2645016.704 ops/s
# Warmup Iteration  13: 2661155.675 ops/s
# Warmup Iteration  14: 2675810.030 ops/s
# Warmup Iteration  15: 2671961.758 ops/s
# Warmup Iteration  16: 2816074.850 ops/s
# Warmup Iteration  17: 2760534.044 ops/s
# Warmup Iteration  18: 2760815.449 ops/s
# Warmup Iteration  19: 2652539.169 ops/s
# Warmup Iteration  20: 2661420.206 ops/s
# Warmup Iteration  21: 2707108.307 ops/s
# Warmup Iteration  22: 2651046.289 ops/s
# Warmup Iteration  23: 2695526.666 ops/s
# Warmup Iteration  24: 2675043.451 ops/s
# Warmup Iteration  25: 2865627.028 ops/s
# Warmup Iteration  26: 2722661.608 ops/s
# Warmup Iteration  27: 2707114.292 ops/s
# Warmup Iteration  28: 2727570.084 ops/s
# Warmup Iteration  29: 2812681.604 ops/s
# Warmup Iteration  30: 2804457.368 ops/s
Iteration   1: 2659488.384 ops/s
Iteration   2: 2674951.035 ops/s
Iteration   3: 2648322.989 ops/s
Iteration   4: 2664274.102 ops/s
Iteration   5: 2730433.987 ops/s
Iteration   6: 2770215.531 ops/s
Iteration   7: 2676169.420 ops/s
Iteration   8: 2647792.746 ops/s
Iteration   9: 2633258.943 ops/s
Iteration  10: 2675443.459 ops/s
Iteration  11: 2668368.393 ops/s
Iteration  12: 2661002.177 ops/s
Iteration  13: 2645950.167 ops/s
Iteration  14: 2617292.949 ops/s
Iteration  15: 2640535.411 ops/s
Iteration  16: 2671079.869 ops/s
Iteration  17: 2657110.944 ops/s
Iteration  18: 2774026.263 ops/s
Iteration  19: 2654896.668 ops/s
Iteration  20: 2759509.626 ops/s
Iteration  21: 2879166.528 ops/s
Iteration  22: 2828615.939 ops/s
Iteration  23: 2749540.763 ops/s
Iteration  24: 2646311.906 ops/s
Iteration  25: 2629157.778 ops/s
Iteration  26: 2897441.321 ops/s
Iteration  27: 2684598.070 ops/s
Iteration  28: 2637148.660 ops/s
Iteration  29: 2770066.925 ops/s
Iteration  30: 2716471.007 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_putPair":
  2698954.732 ±(99.9%) 49204.119 ops/s [Average]
  (min, avg, max) = (2617292.949, 2698954.732, 2897441.321), stdev = 73646.414
  CI (99.9%): [2649750.613, 2748158.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_putPair  thrpt   30  2698954.732 ± 49204.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_rehash_null_collision$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_rehash_null_collision

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20851.052 ops/s
# Warmup Iteration   2: 31205.900 ops/s
# Warmup Iteration   3: 36522.564 ops/s
# Warmup Iteration   4: 35035.107 ops/s
# Warmup Iteration   5: 36033.682 ops/s
# Warmup Iteration   6: 33295.802 ops/s
# Warmup Iteration   7: 33340.532 ops/s
# Warmup Iteration   8: 37510.872 ops/s
# Warmup Iteration   9: 36018.040 ops/s
# Warmup Iteration  10: 36774.689 ops/s
# Warmup Iteration  11: 36372.889 ops/s
# Warmup Iteration  12: 38092.480 ops/s
# Warmup Iteration  13: 36210.380 ops/s
# Warmup Iteration  14: 37000.870 ops/s
# Warmup Iteration  15: 35496.136 ops/s
# Warmup Iteration  16: 38536.900 ops/s
# Warmup Iteration  17: 38188.616 ops/s
# Warmup Iteration  18: 35572.841 ops/s
# Warmup Iteration  19: 37045.012 ops/s
# Warmup Iteration  20: 37170.194 ops/s
# Warmup Iteration  21: 35910.185 ops/s
# Warmup Iteration  22: 36962.645 ops/s
# Warmup Iteration  23: 37964.812 ops/s
# Warmup Iteration  24: 37763.555 ops/s
# Warmup Iteration  25: 37191.313 ops/s
# Warmup Iteration  26: 37355.134 ops/s
# Warmup Iteration  27: 37404.470 ops/s
# Warmup Iteration  28: 37003.688 ops/s
# Warmup Iteration  29: 36816.004 ops/s
# Warmup Iteration  30: 37217.354 ops/s
Iteration   1: 37685.970 ops/s
Iteration   2: 36575.184 ops/s
Iteration   3: 37709.598 ops/s
Iteration   4: 37155.060 ops/s
Iteration   5: 36893.179 ops/s
Iteration   6: 37308.198 ops/s
Iteration   7: 36455.530 ops/s
Iteration   8: 35861.080 ops/s
Iteration   9: 36399.988 ops/s
Iteration  10: 36181.878 ops/s
Iteration  11: 36851.025 ops/s
Iteration  12: 38411.774 ops/s
Iteration  13: 38593.381 ops/s
Iteration  14: 38244.822 ops/s
Iteration  15: 37790.534 ops/s
Iteration  16: 38543.330 ops/s
Iteration  17: 37215.502 ops/s
Iteration  18: 36475.598 ops/s
Iteration  19: 35824.902 ops/s
Iteration  20: 35625.659 ops/s
Iteration  21: 35823.252 ops/s
Iteration  22: 35425.076 ops/s
Iteration  23: 36022.567 ops/s
Iteration  24: 35617.636 ops/s
Iteration  25: 35618.847 ops/s
Iteration  26: 35106.016 ops/s
Iteration  27: 35688.866 ops/s
Iteration  28: 35563.562 ops/s
Iteration  29: 37980.368 ops/s
Iteration  30: 35459.714 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_rehash_null_collision":
  36670.270 ±(99.9%) 709.348 ops/s [Average]
  (min, avg, max) = (35106.016, 36670.270, 38593.381), stdev = 1061.718
  CI (99.9%): [35960.922, 37379.618] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt      Score     Error  Units
HashBiMapTest._Benchmark.benchmark_rehash_null_collision  thrpt   30  36670.270 ± 709.348  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 877480.357 ops/s
# Warmup Iteration   2: 2045871.945 ops/s
# Warmup Iteration   3: 2052229.711 ops/s
# Warmup Iteration   4: 2003873.127 ops/s
# Warmup Iteration   5: 1860101.398 ops/s
# Warmup Iteration   6: 2083963.335 ops/s
# Warmup Iteration   7: 2091783.651 ops/s
# Warmup Iteration   8: 2087834.572 ops/s
# Warmup Iteration   9: 2108065.972 ops/s
# Warmup Iteration  10: 2092446.719 ops/s
# Warmup Iteration  11: 2080245.735 ops/s
# Warmup Iteration  12: 2098310.467 ops/s
# Warmup Iteration  13: 2061701.523 ops/s
# Warmup Iteration  14: 2081005.718 ops/s
# Warmup Iteration  15: 2082479.825 ops/s
# Warmup Iteration  16: 2113846.420 ops/s
# Warmup Iteration  17: 2083931.232 ops/s
# Warmup Iteration  18: 2073298.350 ops/s
# Warmup Iteration  19: 2061524.495 ops/s
# Warmup Iteration  20: 2067734.551 ops/s
# Warmup Iteration  21: 2056340.920 ops/s
# Warmup Iteration  22: 2050403.848 ops/s
# Warmup Iteration  23: 2132538.030 ops/s
# Warmup Iteration  24: 2197076.489 ops/s
# Warmup Iteration  25: 2224218.833 ops/s
# Warmup Iteration  26: 2242244.976 ops/s
# Warmup Iteration  27: 2218162.206 ops/s
# Warmup Iteration  28: 2217110.103 ops/s
# Warmup Iteration  29: 2230020.454 ops/s
# Warmup Iteration  30: 2232881.935 ops/s
Iteration   1: 2219078.292 ops/s
Iteration   2: 2232363.465 ops/s
Iteration   3: 2169251.420 ops/s
Iteration   4: 2197267.389 ops/s
Iteration   5: 2244697.687 ops/s
Iteration   6: 2203339.799 ops/s
Iteration   7: 2193490.576 ops/s
Iteration   8: 2207334.035 ops/s
Iteration   9: 2177137.236 ops/s
Iteration  10: 2199649.813 ops/s
Iteration  11: 2215145.983 ops/s
Iteration  12: 2215824.848 ops/s
Iteration  13: 2204164.244 ops/s
Iteration  14: 2189424.788 ops/s
Iteration  15: 2218584.522 ops/s
Iteration  16: 2240365.704 ops/s
Iteration  17: 2222664.246 ops/s
Iteration  18: 2173638.208 ops/s
Iteration  19: 2211139.919 ops/s
Iteration  20: 2237779.192 ops/s
Iteration  21: 2202296.820 ops/s
Iteration  22: 2179458.471 ops/s
Iteration  23: 2190732.218 ops/s
Iteration  24: 2211491.334 ops/s
Iteration  25: 2195295.168 ops/s
Iteration  26: 2205904.246 ops/s
Iteration  27: 2189124.370 ops/s
Iteration  28: 2199828.245 ops/s
Iteration  29: 2228266.926 ops/s
Iteration  30: 2227763.278 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_reject":
  2206750.081 ±(99.9%) 13223.006 ops/s [Average]
  (min, avg, max) = (2169251.420, 2206750.081, 2244697.687), stdev = 19791.574
  CI (99.9%): [2193527.075, 2219973.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_reject  thrpt   30  2206750.081 ± 13223.006  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_rejectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_rejectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1211285.547 ops/s
# Warmup Iteration   2: 2759581.921 ops/s
# Warmup Iteration   3: 2259876.549 ops/s
# Warmup Iteration   4: 2748365.061 ops/s
# Warmup Iteration   5: 2729091.785 ops/s
# Warmup Iteration   6: 2708525.069 ops/s
# Warmup Iteration   7: 2728981.906 ops/s
# Warmup Iteration   8: 2725771.633 ops/s
# Warmup Iteration   9: 2704358.850 ops/s
# Warmup Iteration  10: 2719303.866 ops/s
# Warmup Iteration  11: 2727894.910 ops/s
# Warmup Iteration  12: 2767339.469 ops/s
# Warmup Iteration  13: 2744163.341 ops/s
# Warmup Iteration  14: 2720234.216 ops/s
# Warmup Iteration  15: 2723720.880 ops/s
# Warmup Iteration  16: 2734105.389 ops/s
# Warmup Iteration  17: 2727282.129 ops/s
# Warmup Iteration  18: 2722762.819 ops/s
# Warmup Iteration  19: 2721757.849 ops/s
# Warmup Iteration  20: 2618993.754 ops/s
# Warmup Iteration  21: 2655843.812 ops/s
# Warmup Iteration  22: 2736721.049 ops/s
# Warmup Iteration  23: 2743110.924 ops/s
# Warmup Iteration  24: 2701028.867 ops/s
# Warmup Iteration  25: 2708152.910 ops/s
# Warmup Iteration  26: 2727988.579 ops/s
# Warmup Iteration  27: 2729641.133 ops/s
# Warmup Iteration  28: 2723865.700 ops/s
# Warmup Iteration  29: 2728361.588 ops/s
# Warmup Iteration  30: 2712819.856 ops/s
Iteration   1: 2721720.441 ops/s
Iteration   2: 2750077.066 ops/s
Iteration   3: 2801020.821 ops/s
Iteration   4: 2720167.131 ops/s
Iteration   5: 2740539.827 ops/s
Iteration   6: 2793102.504 ops/s
Iteration   7: 2750916.470 ops/s
Iteration   8: 2781135.412 ops/s
Iteration   9: 2745217.497 ops/s
Iteration  10: 2772179.078 ops/s
Iteration  11: 2759744.432 ops/s
Iteration  12: 2771367.917 ops/s
Iteration  13: 2737113.380 ops/s
Iteration  14: 2751670.822 ops/s
Iteration  15: 2735766.878 ops/s
Iteration  16: 2711055.913 ops/s
Iteration  17: 2620839.042 ops/s
Iteration  18: 2601418.006 ops/s
Iteration  19: 2617582.245 ops/s
Iteration  20: 2624276.141 ops/s
Iteration  21: 2548237.905 ops/s
Iteration  22: 2593134.012 ops/s
Iteration  23: 2591326.013 ops/s
Iteration  24: 2564311.672 ops/s
Iteration  25: 2644789.327 ops/s
Iteration  26: 2693091.034 ops/s
Iteration  27: 2761282.708 ops/s
Iteration  28: 2771058.551 ops/s
Iteration  29: 2722077.631 ops/s
Iteration  30: 2729197.649 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_rejectMap":
  2704180.584 ±(99.9%) 49679.799 ops/s [Average]
  (min, avg, max) = (2548237.905, 2704180.584, 2801020.821), stdev = 74358.390
  CI (99.9%): [2654500.785, 2753860.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_rejectMap  thrpt   30  2704180.584 ± 49679.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 849246.130 ops/s
# Warmup Iteration   2: 2026328.276 ops/s
# Warmup Iteration   3: 2144284.973 ops/s
# Warmup Iteration   4: 1878624.148 ops/s
# Warmup Iteration   5: 1922199.157 ops/s
# Warmup Iteration   6: 2184635.276 ops/s
# Warmup Iteration   7: 2081894.267 ops/s
# Warmup Iteration   8: 2077434.365 ops/s
# Warmup Iteration   9: 2154610.314 ops/s
# Warmup Iteration  10: 2265724.228 ops/s
# Warmup Iteration  11: 2101749.639 ops/s
# Warmup Iteration  12: 2116769.673 ops/s
# Warmup Iteration  13: 2066454.622 ops/s
# Warmup Iteration  14: 2152640.296 ops/s
# Warmup Iteration  15: 2093086.238 ops/s
# Warmup Iteration  16: 2054666.959 ops/s
# Warmup Iteration  17: 2082395.006 ops/s
# Warmup Iteration  18: 2078021.310 ops/s
# Warmup Iteration  19: 2241803.586 ops/s
# Warmup Iteration  20: 2075005.463 ops/s
# Warmup Iteration  21: 2040387.922 ops/s
# Warmup Iteration  22: 2129807.366 ops/s
# Warmup Iteration  23: 2059328.359 ops/s
# Warmup Iteration  24: 2160161.088 ops/s
# Warmup Iteration  25: 2086597.841 ops/s
# Warmup Iteration  26: 2056840.415 ops/s
# Warmup Iteration  27: 2085559.831 ops/s
# Warmup Iteration  28: 2135983.014 ops/s
# Warmup Iteration  29: 2089234.694 ops/s
# Warmup Iteration  30: 2062454.895 ops/s
Iteration   1: 2079508.338 ops/s
Iteration   2: 2136031.705 ops/s
Iteration   3: 2057305.396 ops/s
Iteration   4: 2129671.981 ops/s
Iteration   5: 2105828.165 ops/s
Iteration   6: 2016461.729 ops/s
Iteration   7: 2052165.253 ops/s
Iteration   8: 2112935.525 ops/s
Iteration   9: 2136253.840 ops/s
Iteration  10: 2115856.116 ops/s
Iteration  11: 2053806.467 ops/s
Iteration  12: 2084968.286 ops/s
Iteration  13: 2069445.171 ops/s
Iteration  14: 2114108.510 ops/s
Iteration  15: 2158127.284 ops/s
Iteration  16: 2071243.771 ops/s
Iteration  17: 2145588.408 ops/s
Iteration  18: 2034406.958 ops/s
Iteration  19: 2120193.976 ops/s
Iteration  20: 2092090.352 ops/s
Iteration  21: 2098407.084 ops/s
Iteration  22: 2100829.802 ops/s
Iteration  23: 2074528.054 ops/s
Iteration  24: 2065069.338 ops/s
Iteration  25: 2070360.097 ops/s
Iteration  26: 2062388.674 ops/s
Iteration  27: 2059696.136 ops/s
Iteration  28: 2122339.403 ops/s
Iteration  29: 2097664.837 ops/s
Iteration  30: 2115241.977 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_rejectWith":
  2091750.754 ±(99.9%) 23040.665 ops/s [Average]
  (min, avg, max) = (2016461.729, 2091750.754, 2158127.284), stdev = 34486.185
  CI (99.9%): [2068710.090, 2114791.419] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_rejectWith  thrpt   30  2091750.754 ± 23040.665  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_rejectWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_rejectWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1303106.897 ops/s
# Warmup Iteration   2: 3361798.448 ops/s
# Warmup Iteration   3: 2914363.035 ops/s
# Warmup Iteration   4: 3111598.400 ops/s
# Warmup Iteration   5: 3357159.638 ops/s
# Warmup Iteration   6: 3463890.376 ops/s
# Warmup Iteration   7: 3374514.379 ops/s
# Warmup Iteration   8: 3424265.794 ops/s
# Warmup Iteration   9: 3397944.561 ops/s
# Warmup Iteration  10: 3383164.617 ops/s
# Warmup Iteration  11: 3322971.072 ops/s
# Warmup Iteration  12: 3310237.693 ops/s
# Warmup Iteration  13: 3345909.891 ops/s
# Warmup Iteration  14: 3389070.006 ops/s
# Warmup Iteration  15: 3447292.888 ops/s
# Warmup Iteration  16: 3365507.344 ops/s
# Warmup Iteration  17: 3375837.617 ops/s
# Warmup Iteration  18: 3459717.058 ops/s
# Warmup Iteration  19: 3433747.385 ops/s
# Warmup Iteration  20: 3334282.200 ops/s
# Warmup Iteration  21: 3332857.337 ops/s
# Warmup Iteration  22: 3432692.226 ops/s
# Warmup Iteration  23: 3445549.614 ops/s
# Warmup Iteration  24: 3397154.475 ops/s
# Warmup Iteration  25: 3378416.209 ops/s
# Warmup Iteration  26: 3373835.507 ops/s
# Warmup Iteration  27: 3324669.762 ops/s
# Warmup Iteration  28: 3320883.175 ops/s
# Warmup Iteration  29: 3374758.045 ops/s
# Warmup Iteration  30: 3353247.818 ops/s
Iteration   1: 3343610.645 ops/s
Iteration   2: 3354391.238 ops/s
Iteration   3: 3398625.151 ops/s
Iteration   4: 3345166.499 ops/s
Iteration   5: 3314243.440 ops/s
Iteration   6: 3304821.992 ops/s
Iteration   7: 3355644.715 ops/s
Iteration   8: 3341325.841 ops/s
Iteration   9: 3332296.217 ops/s
Iteration  10: 3306036.319 ops/s
Iteration  11: 3435203.497 ops/s
Iteration  12: 3482129.345 ops/s
Iteration  13: 3375163.403 ops/s
Iteration  14: 3392973.861 ops/s
Iteration  15: 3302967.593 ops/s
Iteration  16: 3363952.195 ops/s
Iteration  17: 3405824.111 ops/s
Iteration  18: 3367673.702 ops/s
Iteration  19: 3317760.905 ops/s
Iteration  20: 3328869.921 ops/s
Iteration  21: 3328689.305 ops/s
Iteration  22: 3319012.188 ops/s
Iteration  23: 3321908.315 ops/s
Iteration  24: 3291450.483 ops/s
Iteration  25: 3361293.010 ops/s
Iteration  26: 3311336.190 ops/s
Iteration  27: 3577920.988 ops/s
Iteration  28: 3335369.694 ops/s
Iteration  29: 3448254.231 ops/s
Iteration  30: 3297914.517 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_rejectWith_value":
  3358727.650 ±(99.9%) 41545.709 ops/s [Average]
  (min, avg, max) = (3291450.483, 3358727.650, 3577920.988), stdev = 62183.666
  CI (99.9%): [3317181.941, 3400273.359] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_rejectWith_value  thrpt   30  3358727.650 ± 41545.709  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_reject_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_reject_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 920998.598 ops/s
# Warmup Iteration   2: 2349858.474 ops/s
# Warmup Iteration   3: 2020174.477 ops/s
# Warmup Iteration   4: 2375010.874 ops/s
# Warmup Iteration   5: 2352238.868 ops/s
# Warmup Iteration   6: 2414337.374 ops/s
# Warmup Iteration   7: 2349426.472 ops/s
# Warmup Iteration   8: 2404525.894 ops/s
# Warmup Iteration   9: 2372305.989 ops/s
# Warmup Iteration  10: 2422100.879 ops/s
# Warmup Iteration  11: 2346015.701 ops/s
# Warmup Iteration  12: 2355513.996 ops/s
# Warmup Iteration  13: 2453087.541 ops/s
# Warmup Iteration  14: 2369645.433 ops/s
# Warmup Iteration  15: 2430928.766 ops/s
# Warmup Iteration  16: 2438745.713 ops/s
# Warmup Iteration  17: 2486373.985 ops/s
# Warmup Iteration  18: 2449976.959 ops/s
# Warmup Iteration  19: 2374022.221 ops/s
# Warmup Iteration  20: 2377895.697 ops/s
# Warmup Iteration  21: 2326379.537 ops/s
# Warmup Iteration  22: 2455433.260 ops/s
# Warmup Iteration  23: 2376644.803 ops/s
# Warmup Iteration  24: 2441770.446 ops/s
# Warmup Iteration  25: 2374671.711 ops/s
# Warmup Iteration  26: 2373962.753 ops/s
# Warmup Iteration  27: 2476814.029 ops/s
# Warmup Iteration  28: 2462997.270 ops/s
# Warmup Iteration  29: 2569146.651 ops/s
# Warmup Iteration  30: 2548674.001 ops/s
Iteration   1: 2577495.193 ops/s
Iteration   2: 2559028.560 ops/s
Iteration   3: 2529431.402 ops/s
Iteration   4: 2568424.512 ops/s
Iteration   5: 2554655.356 ops/s
Iteration   6: 2530312.393 ops/s
Iteration   7: 2553114.857 ops/s
Iteration   8: 2561600.697 ops/s
Iteration   9: 2540504.887 ops/s
Iteration  10: 2533353.309 ops/s
Iteration  11: 2583322.488 ops/s
Iteration  12: 2579149.501 ops/s
Iteration  13: 2577993.676 ops/s
Iteration  14: 2571724.869 ops/s
Iteration  15: 2575918.693 ops/s
Iteration  16: 2577759.627 ops/s
Iteration  17: 2571596.220 ops/s
Iteration  18: 2558347.439 ops/s
Iteration  19: 2572640.019 ops/s
Iteration  20: 2577882.762 ops/s
Iteration  21: 2567704.590 ops/s
Iteration  22: 2561309.050 ops/s
Iteration  23: 2554466.816 ops/s
Iteration  24: 2563272.157 ops/s
Iteration  25: 2560456.481 ops/s
Iteration  26: 2581554.244 ops/s
Iteration  27: 2573951.920 ops/s
Iteration  28: 2538490.501 ops/s
Iteration  29: 2561127.551 ops/s
Iteration  30: 2485089.774 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_reject_value":
  2560055.985 ±(99.9%) 14012.871 ops/s [Average]
  (min, avg, max) = (2485089.774, 2560055.985, 2583322.488), stdev = 20973.807
  CI (99.9%): [2546043.114, 2574068.856] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_reject_value  thrpt   30  2560055.985 ± 14012.871  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 427071.352 ops/s
# Warmup Iteration   2: 995711.508 ops/s
# Warmup Iteration   3: 877585.052 ops/s
# Warmup Iteration   4: 932246.700 ops/s
# Warmup Iteration   5: 994914.422 ops/s
# Warmup Iteration   6: 957685.769 ops/s
# Warmup Iteration   7: 999882.826 ops/s
# Warmup Iteration   8: 943119.326 ops/s
# Warmup Iteration   9: 957570.711 ops/s
# Warmup Iteration  10: 942911.531 ops/s
# Warmup Iteration  11: 926445.012 ops/s
# Warmup Iteration  12: 954069.714 ops/s
# Warmup Iteration  13: 955062.581 ops/s
# Warmup Iteration  14: 944354.637 ops/s
# Warmup Iteration  15: 943163.653 ops/s
# Warmup Iteration  16: 971022.399 ops/s
# Warmup Iteration  17: 999004.226 ops/s
# Warmup Iteration  18: 995561.845 ops/s
# Warmup Iteration  19: 989365.882 ops/s
# Warmup Iteration  20: 988006.957 ops/s
# Warmup Iteration  21: 991696.770 ops/s
# Warmup Iteration  22: 990330.271 ops/s
# Warmup Iteration  23: 1003735.746 ops/s
# Warmup Iteration  24: 1004791.651 ops/s
# Warmup Iteration  25: 994381.440 ops/s
# Warmup Iteration  26: 996076.917 ops/s
# Warmup Iteration  27: 999658.252 ops/s
# Warmup Iteration  28: 1000290.553 ops/s
# Warmup Iteration  29: 999267.787 ops/s
# Warmup Iteration  30: 998976.207 ops/s
Iteration   1: 989710.695 ops/s
Iteration   2: 999803.605 ops/s
Iteration   3: 991504.522 ops/s
Iteration   4: 999638.474 ops/s
Iteration   5: 997171.682 ops/s
Iteration   6: 1009970.580 ops/s
Iteration   7: 1010518.355 ops/s
Iteration   8: 1001995.357 ops/s
Iteration   9: 997442.239 ops/s
Iteration  10: 1002167.489 ops/s
Iteration  11: 992592.557 ops/s
Iteration  12: 1008527.838 ops/s
Iteration  13: 1011538.546 ops/s
Iteration  14: 1003490.972 ops/s
Iteration  15: 1004508.541 ops/s
Iteration  16: 996659.579 ops/s
Iteration  17: 987470.471 ops/s
Iteration  18: 988947.201 ops/s
Iteration  19: 950519.331 ops/s
Iteration  20: 958647.533 ops/s
Iteration  21: 957219.077 ops/s
Iteration  22: 950763.886 ops/s
Iteration  23: 986889.954 ops/s
Iteration  24: 999656.214 ops/s
Iteration  25: 994986.956 ops/s
Iteration  26: 1004643.689 ops/s
Iteration  27: 994824.549 ops/s
Iteration  28: 1001040.276 ops/s
Iteration  29: 995587.335 ops/s
Iteration  30: 999233.996 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_remove":
  992922.383 ±(99.9%) 11215.158 ops/s [Average]
  (min, avg, max) = (950519.331, 992922.383, 1011538.546), stdev = 16786.321
  CI (99.9%): [981707.226, 1004137.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_remove  thrpt   30  992922.383 ± 11215.158  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeAllFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeAllFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 836709.758 ops/s
# Warmup Iteration   2: 1901572.547 ops/s
# Warmup Iteration   3: 1921014.474 ops/s
# Warmup Iteration   4: 1599641.250 ops/s
# Warmup Iteration   5: 1931863.860 ops/s
# Warmup Iteration   6: 1934580.301 ops/s
# Warmup Iteration   7: 1932967.108 ops/s
# Warmup Iteration   8: 1934672.534 ops/s
# Warmup Iteration   9: 1918032.544 ops/s
# Warmup Iteration  10: 1913824.046 ops/s
# Warmup Iteration  11: 1890467.130 ops/s
# Warmup Iteration  12: 1892089.244 ops/s
# Warmup Iteration  13: 1926484.931 ops/s
# Warmup Iteration  14: 1917890.725 ops/s
# Warmup Iteration  15: 1918180.810 ops/s
# Warmup Iteration  16: 1872046.935 ops/s
# Warmup Iteration  17: 1855627.908 ops/s
# Warmup Iteration  18: 1860400.212 ops/s
# Warmup Iteration  19: 1817673.228 ops/s
# Warmup Iteration  20: 1819113.895 ops/s
# Warmup Iteration  21: 1765654.197 ops/s
# Warmup Iteration  22: 1778501.128 ops/s
# Warmup Iteration  23: 1766328.423 ops/s
# Warmup Iteration  24: 1764957.795 ops/s
# Warmup Iteration  25: 1769208.605 ops/s
# Warmup Iteration  26: 1786987.638 ops/s
# Warmup Iteration  27: 1789800.460 ops/s
# Warmup Iteration  28: 1789782.059 ops/s
# Warmup Iteration  29: 1895319.769 ops/s
# Warmup Iteration  30: 1905988.231 ops/s
Iteration   1: 1876944.536 ops/s
Iteration   2: 1771914.880 ops/s
Iteration   3: 1770716.203 ops/s
Iteration   4: 1813836.811 ops/s
Iteration   5: 1821551.389 ops/s
Iteration   6: 1842810.501 ops/s
Iteration   7: 1792689.503 ops/s
Iteration   8: 1806915.966 ops/s
Iteration   9: 1801775.478 ops/s
Iteration  10: 1794652.470 ops/s
Iteration  11: 1791504.489 ops/s
Iteration  12: 1764491.503 ops/s
Iteration  13: 1786287.173 ops/s
Iteration  14: 1830696.884 ops/s
Iteration  15: 1799750.676 ops/s
Iteration  16: 1809304.837 ops/s
Iteration  17: 1753472.473 ops/s
Iteration  18: 1757952.704 ops/s
Iteration  19: 1744911.832 ops/s
Iteration  20: 1797585.224 ops/s
Iteration  21: 1775288.410 ops/s
Iteration  22: 1783390.252 ops/s
Iteration  23: 1799116.917 ops/s
Iteration  24: 1818784.315 ops/s
Iteration  25: 1822539.688 ops/s
Iteration  26: 1934789.846 ops/s
Iteration  27: 1876883.441 ops/s
Iteration  28: 1771017.146 ops/s
Iteration  29: 1771394.890 ops/s
Iteration  30: 1790477.873 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeAllFromEntrySet":
  1802448.277 ±(99.9%) 26927.770 ops/s [Average]
  (min, avg, max) = (1744911.832, 1802448.277, 1934789.846), stdev = 40304.221
  CI (99.9%): [1775520.507, 1829376.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_removeAllFromEntrySet  thrpt   30  1802448.277 ± 26927.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeAllFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeAllFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1451621.198 ops/s
# Warmup Iteration   2: 3672858.060 ops/s
# Warmup Iteration   3: 3790217.547 ops/s
# Warmup Iteration   4: 3283133.620 ops/s
# Warmup Iteration   5: 3668538.628 ops/s
# Warmup Iteration   6: 3805157.570 ops/s
# Warmup Iteration   7: 3831043.585 ops/s
# Warmup Iteration   8: 3682587.247 ops/s
# Warmup Iteration   9: 3704221.075 ops/s
# Warmup Iteration  10: 3772055.550 ops/s
# Warmup Iteration  11: 3702276.152 ops/s
# Warmup Iteration  12: 3728265.950 ops/s
# Warmup Iteration  13: 3592922.617 ops/s
# Warmup Iteration  14: 3579408.654 ops/s
# Warmup Iteration  15: 3573133.040 ops/s
# Warmup Iteration  16: 3571161.288 ops/s
# Warmup Iteration  17: 3578776.306 ops/s
# Warmup Iteration  18: 3616650.437 ops/s
# Warmup Iteration  19: 3608840.785 ops/s
# Warmup Iteration  20: 3587823.796 ops/s
# Warmup Iteration  21: 3518247.611 ops/s
# Warmup Iteration  22: 3556662.331 ops/s
# Warmup Iteration  23: 3689302.264 ops/s
# Warmup Iteration  24: 3748922.911 ops/s
# Warmup Iteration  25: 3541714.431 ops/s
# Warmup Iteration  26: 3632453.337 ops/s
# Warmup Iteration  27: 3670660.286 ops/s
# Warmup Iteration  28: 3721440.452 ops/s
# Warmup Iteration  29: 3668942.820 ops/s
# Warmup Iteration  30: 3705362.030 ops/s
Iteration   1: 3676475.221 ops/s
Iteration   2: 3552981.894 ops/s
Iteration   3: 3600544.432 ops/s
Iteration   4: 3645462.367 ops/s
Iteration   5: 3695431.582 ops/s
Iteration   6: 3697520.232 ops/s
Iteration   7: 3712892.521 ops/s
Iteration   8: 3839048.465 ops/s
Iteration   9: 3834824.201 ops/s
Iteration  10: 3612481.792 ops/s
Iteration  11: 3722983.848 ops/s
Iteration  12: 3548437.301 ops/s
Iteration  13: 3590638.064 ops/s
Iteration  14: 3534830.817 ops/s
Iteration  15: 3733630.840 ops/s
Iteration  16: 3560032.473 ops/s
Iteration  17: 3517517.141 ops/s
Iteration  18: 3509389.408 ops/s
Iteration  19: 3590813.534 ops/s
Iteration  20: 3771646.689 ops/s
Iteration  21: 3775148.660 ops/s
Iteration  22: 3602558.041 ops/s
Iteration  23: 3597517.444 ops/s
Iteration  24: 3632386.385 ops/s
Iteration  25: 3597307.358 ops/s
Iteration  26: 3544160.690 ops/s
Iteration  27: 3569905.983 ops/s
Iteration  28: 3582493.324 ops/s
Iteration  29: 3546307.253 ops/s
Iteration  30: 3600717.337 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeAllFromKeySet":
  3633202.843 ±(99.9%) 61528.341 ops/s [Average]
  (min, avg, max) = (3509389.408, 3633202.843, 3839048.465), stdev = 92092.731
  CI (99.9%): [3571674.503, 3694731.184] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_removeAllFromKeySet  thrpt   30  3633202.843 ± 61528.341  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeAllFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeAllFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1496550.228 ops/s
# Warmup Iteration   2: 3988074.530 ops/s
# Warmup Iteration   3: 3976831.758 ops/s
# Warmup Iteration   4: 3182317.381 ops/s
# Warmup Iteration   5: 3882393.640 ops/s
# Warmup Iteration   6: 3858654.195 ops/s
# Warmup Iteration   7: 3912033.744 ops/s
# Warmup Iteration   8: 3870553.512 ops/s
# Warmup Iteration   9: 3898255.365 ops/s
# Warmup Iteration  10: 3934105.045 ops/s
# Warmup Iteration  11: 3925161.703 ops/s
# Warmup Iteration  12: 3885434.053 ops/s
# Warmup Iteration  13: 3984585.614 ops/s
# Warmup Iteration  14: 4077496.853 ops/s
# Warmup Iteration  15: 4026211.275 ops/s
# Warmup Iteration  16: 3857598.438 ops/s
# Warmup Iteration  17: 3973107.869 ops/s
# Warmup Iteration  18: 3840429.111 ops/s
# Warmup Iteration  19: 3934164.103 ops/s
# Warmup Iteration  20: 3846025.310 ops/s
# Warmup Iteration  21: 4006351.015 ops/s
# Warmup Iteration  22: 3908451.711 ops/s
# Warmup Iteration  23: 3928481.659 ops/s
# Warmup Iteration  24: 4168970.807 ops/s
# Warmup Iteration  25: 4105008.672 ops/s
# Warmup Iteration  26: 4050335.681 ops/s
# Warmup Iteration  27: 4138190.290 ops/s
# Warmup Iteration  28: 4162740.310 ops/s
# Warmup Iteration  29: 3959328.263 ops/s
# Warmup Iteration  30: 3880906.135 ops/s
Iteration   1: 3922551.744 ops/s
Iteration   2: 3938616.009 ops/s
Iteration   3: 4035996.249 ops/s
Iteration   4: 3907150.302 ops/s
Iteration   5: 3948933.617 ops/s
Iteration   6: 3929849.381 ops/s
Iteration   7: 3928875.756 ops/s
Iteration   8: 3986622.718 ops/s
Iteration   9: 4041886.389 ops/s
Iteration  10: 3916522.841 ops/s
Iteration  11: 4030457.981 ops/s
Iteration  12: 4091060.757 ops/s
Iteration  13: 4017248.295 ops/s
Iteration  14: 3843383.181 ops/s
Iteration  15: 3828968.335 ops/s
Iteration  16: 3932989.903 ops/s
Iteration  17: 3930260.717 ops/s
Iteration  18: 3901036.185 ops/s
Iteration  19: 3852644.664 ops/s
Iteration  20: 3862787.619 ops/s
Iteration  21: 3877473.647 ops/s
Iteration  22: 3941974.597 ops/s
Iteration  23: 3891783.779 ops/s
Iteration  24: 3900963.250 ops/s
Iteration  25: 4021260.985 ops/s
Iteration  26: 3992207.080 ops/s
Iteration  27: 4023646.854 ops/s
Iteration  28: 4020194.166 ops/s
Iteration  29: 4020843.946 ops/s
Iteration  30: 4117533.091 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeAllFromValues":
  3955190.801 ±(99.9%) 49556.330 ops/s [Average]
  (min, avg, max) = (3828968.335, 3955190.801, 4117533.091), stdev = 74173.588
  CI (99.9%): [3905634.471, 4004747.132] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_removeAllFromValues  thrpt   30  3955190.801 ± 49556.330  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeAllKeys$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeAllKeys

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 249610.573 ops/s
# Warmup Iteration   2: 303705.208 ops/s
# Warmup Iteration   3: 390681.479 ops/s
# Warmup Iteration   4: 394308.892 ops/s
# Warmup Iteration   5: 394433.371 ops/s
# Warmup Iteration   6: 398127.404 ops/s
# Warmup Iteration   7: 398944.376 ops/s
# Warmup Iteration   8: 400999.264 ops/s
# Warmup Iteration   9: 348932.159 ops/s
# Warmup Iteration  10: 386727.285 ops/s
# Warmup Iteration  11: 403924.597 ops/s
# Warmup Iteration  12: 403224.560 ops/s
# Warmup Iteration  13: 402435.429 ops/s
# Warmup Iteration  14: 393109.314 ops/s
# Warmup Iteration  15: 401533.217 ops/s
# Warmup Iteration  16: 402980.813 ops/s
# Warmup Iteration  17: 411087.791 ops/s
# Warmup Iteration  18: 401834.147 ops/s
# Warmup Iteration  19: 398743.149 ops/s
# Warmup Iteration  20: 405622.369 ops/s
# Warmup Iteration  21: 405318.210 ops/s
# Warmup Iteration  22: 395294.808 ops/s
# Warmup Iteration  23: 401750.556 ops/s
# Warmup Iteration  24: 408346.093 ops/s
# Warmup Iteration  25: 404399.225 ops/s
# Warmup Iteration  26: 407477.979 ops/s
# Warmup Iteration  27: 407890.977 ops/s
# Warmup Iteration  28: 405256.460 ops/s
# Warmup Iteration  29: 406152.182 ops/s
# Warmup Iteration  30: 404386.791 ops/s
Iteration   1: 404622.992 ops/s
Iteration   2: 401380.903 ops/s
Iteration   3: 401388.666 ops/s
Iteration   4: 410111.024 ops/s
Iteration   5: 410897.610 ops/s
Iteration   6: 411684.799 ops/s
Iteration   7: 411233.599 ops/s
Iteration   8: 411885.157 ops/s
Iteration   9: 405512.101 ops/s
Iteration  10: 409317.953 ops/s
Iteration  11: 409382.831 ops/s
Iteration  12: 405984.456 ops/s
Iteration  13: 406960.066 ops/s
Iteration  14: 412027.387 ops/s
Iteration  15: 411974.062 ops/s
Iteration  16: 411420.202 ops/s
Iteration  17: 409106.959 ops/s
Iteration  18: 412489.603 ops/s
Iteration  19: 405787.784 ops/s
Iteration  20: 407139.530 ops/s
Iteration  21: 410453.569 ops/s
Iteration  22: 411422.921 ops/s
Iteration  23: 408443.921 ops/s
Iteration  24: 411281.174 ops/s
Iteration  25: 406405.886 ops/s
Iteration  26: 411975.606 ops/s
Iteration  27: 412047.404 ops/s
Iteration  28: 411301.712 ops/s
Iteration  29: 411760.846 ops/s
Iteration  30: 409859.687 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeAllKeys":
  409175.347 ±(99.9%) 2102.187 ops/s [Average]
  (min, avg, max) = (401380.903, 409175.347, 412489.603), stdev = 3146.455
  CI (99.9%): [407073.160, 411277.534] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_removeAllKeys  thrpt   30  409175.347 ± 2102.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 889518.348 ops/s
# Warmup Iteration   2: 2032502.871 ops/s
# Warmup Iteration   3: 2038402.936 ops/s
# Warmup Iteration   4: 1664121.389 ops/s
# Warmup Iteration   5: 2029495.267 ops/s
# Warmup Iteration   6: 2033595.628 ops/s
# Warmup Iteration   7: 2046821.018 ops/s
# Warmup Iteration   8: 2038290.165 ops/s
# Warmup Iteration   9: 2029500.696 ops/s
# Warmup Iteration  10: 2014106.971 ops/s
# Warmup Iteration  11: 2002697.463 ops/s
# Warmup Iteration  12: 2015492.749 ops/s
# Warmup Iteration  13: 1986344.903 ops/s
# Warmup Iteration  14: 2011065.923 ops/s
# Warmup Iteration  15: 2041220.596 ops/s
# Warmup Iteration  16: 2038010.181 ops/s
# Warmup Iteration  17: 2017087.643 ops/s
# Warmup Iteration  18: 2041583.436 ops/s
# Warmup Iteration  19: 2030775.167 ops/s
# Warmup Iteration  20: 2011042.649 ops/s
# Warmup Iteration  21: 2028915.494 ops/s
# Warmup Iteration  22: 2022023.351 ops/s
# Warmup Iteration  23: 2037397.099 ops/s
# Warmup Iteration  24: 2027726.579 ops/s
# Warmup Iteration  25: 2028847.690 ops/s
# Warmup Iteration  26: 2020528.177 ops/s
# Warmup Iteration  27: 2023992.266 ops/s
# Warmup Iteration  28: 2024419.741 ops/s
# Warmup Iteration  29: 2034839.641 ops/s
# Warmup Iteration  30: 2029175.907 ops/s
Iteration   1: 2031358.802 ops/s
Iteration   2: 2041665.723 ops/s
Iteration   3: 2045089.036 ops/s
Iteration   4: 2045870.158 ops/s
Iteration   5: 2031627.256 ops/s
Iteration   6: 2030973.045 ops/s
Iteration   7: 2034680.881 ops/s
Iteration   8: 2041110.188 ops/s
Iteration   9: 2040710.584 ops/s
Iteration  10: 2047025.439 ops/s
Iteration  11: 2042340.165 ops/s
Iteration  12: 2037436.116 ops/s
Iteration  13: 2049674.003 ops/s
Iteration  14: 2049591.474 ops/s
Iteration  15: 2046919.774 ops/s
Iteration  16: 2042104.646 ops/s
Iteration  17: 2024111.927 ops/s
Iteration  18: 2027048.879 ops/s
Iteration  19: 2040407.891 ops/s
Iteration  20: 2045531.051 ops/s
Iteration  21: 2044965.893 ops/s
Iteration  22: 2051905.176 ops/s
Iteration  23: 2050699.893 ops/s
Iteration  24: 2043698.994 ops/s
Iteration  25: 2038879.257 ops/s
Iteration  26: 2031895.088 ops/s
Iteration  27: 2036393.375 ops/s
Iteration  28: 2027874.048 ops/s
Iteration  29: 2044235.673 ops/s
Iteration  30: 2018779.844 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeFromEntrySet":
  2039486.809 ±(99.9%) 5619.405 ops/s [Average]
  (min, avg, max) = (2018779.844, 2039486.809, 2051905.176), stdev = 8410.862
  CI (99.9%): [2033867.404, 2045106.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
HashBiMapTest._Benchmark.benchmark_removeFromEntrySet  thrpt   30  2039486.809 ± 5619.405  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2011949.742 ops/s
# Warmup Iteration   2: 4515413.544 ops/s
# Warmup Iteration   3: 4394185.957 ops/s
# Warmup Iteration   4: 4016219.344 ops/s
# Warmup Iteration   5: 4580803.301 ops/s
# Warmup Iteration   6: 4603780.543 ops/s
# Warmup Iteration   7: 4592487.234 ops/s
# Warmup Iteration   8: 4599248.438 ops/s
# Warmup Iteration   9: 4613400.713 ops/s
# Warmup Iteration  10: 4602592.137 ops/s
# Warmup Iteration  11: 4605945.695 ops/s
# Warmup Iteration  12: 4555036.871 ops/s
# Warmup Iteration  13: 4506014.179 ops/s
# Warmup Iteration  14: 4443887.995 ops/s
# Warmup Iteration  15: 4510459.924 ops/s
# Warmup Iteration  16: 4569248.873 ops/s
# Warmup Iteration  17: 4607447.277 ops/s
# Warmup Iteration  18: 4583415.381 ops/s
# Warmup Iteration  19: 4585498.147 ops/s
# Warmup Iteration  20: 4583842.240 ops/s
# Warmup Iteration  21: 4614590.346 ops/s
# Warmup Iteration  22: 4592958.772 ops/s
# Warmup Iteration  23: 4618732.037 ops/s
# Warmup Iteration  24: 4623979.874 ops/s
# Warmup Iteration  25: 4621985.003 ops/s
# Warmup Iteration  26: 4599394.263 ops/s
# Warmup Iteration  27: 4624016.641 ops/s
# Warmup Iteration  28: 4605751.462 ops/s
# Warmup Iteration  29: 4608659.234 ops/s
# Warmup Iteration  30: 4608376.215 ops/s
Iteration   1: 4617877.646 ops/s
Iteration   2: 4619437.545 ops/s
Iteration   3: 4601907.236 ops/s
Iteration   4: 4604229.434 ops/s
Iteration   5: 4564977.634 ops/s
Iteration   6: 4603844.139 ops/s
Iteration   7: 4297328.470 ops/s
Iteration   8: 4259253.316 ops/s
Iteration   9: 4406455.703 ops/s
Iteration  10: 4545000.268 ops/s
Iteration  11: 4111256.408 ops/s
Iteration  12: 4288586.030 ops/s
Iteration  13: 4258978.061 ops/s
Iteration  14: 4473042.172 ops/s
Iteration  15: 4465630.716 ops/s
Iteration  16: 4449020.710 ops/s
Iteration  17: 4271221.809 ops/s
Iteration  18: 4302588.144 ops/s
Iteration  19: 4282434.829 ops/s
Iteration  20: 4249467.131 ops/s
Iteration  21: 4212547.409 ops/s
Iteration  22: 4260304.877 ops/s
Iteration  23: 4315794.660 ops/s
Iteration  24: 4206287.014 ops/s
Iteration  25: 4292039.244 ops/s
Iteration  26: 4239003.908 ops/s
Iteration  27: 4230048.703 ops/s
Iteration  28: 4153012.575 ops/s
Iteration  29: 4153157.521 ops/s
Iteration  30: 4152275.389 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeFromKeySet":
  4349566.957 ±(99.9%) 108249.133 ops/s [Average]
  (min, avg, max) = (4111256.408, 4349566.957, 4619437.545), stdev = 162022.219
  CI (99.9%): [4241317.824, 4457816.090] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
HashBiMapTest._Benchmark.benchmark_removeFromKeySet  thrpt   30  4349566.957 ± 108249.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1885753.565 ops/s
# Warmup Iteration   2: 4602896.460 ops/s
# Warmup Iteration   3: 4545232.390 ops/s
# Warmup Iteration   4: 3897868.385 ops/s
# Warmup Iteration   5: 4723599.604 ops/s
# Warmup Iteration   6: 4695116.217 ops/s
# Warmup Iteration   7: 4697981.771 ops/s
# Warmup Iteration   8: 4670394.032 ops/s
# Warmup Iteration   9: 4703846.136 ops/s
# Warmup Iteration  10: 4650214.888 ops/s
# Warmup Iteration  11: 4615059.096 ops/s
# Warmup Iteration  12: 4437132.504 ops/s
# Warmup Iteration  13: 4381012.380 ops/s
# Warmup Iteration  14: 4537905.615 ops/s
# Warmup Iteration  15: 4372534.839 ops/s
# Warmup Iteration  16: 4382312.751 ops/s
# Warmup Iteration  17: 4432628.007 ops/s
# Warmup Iteration  18: 4545601.106 ops/s
# Warmup Iteration  19: 4511154.715 ops/s
# Warmup Iteration  20: 4371712.574 ops/s
# Warmup Iteration  21: 4364544.457 ops/s
# Warmup Iteration  22: 4401679.743 ops/s
# Warmup Iteration  23: 4486526.860 ops/s
# Warmup Iteration  24: 4549316.820 ops/s
# Warmup Iteration  25: 4498026.471 ops/s
# Warmup Iteration  26: 4373070.080 ops/s
# Warmup Iteration  27: 4550379.234 ops/s
# Warmup Iteration  28: 4439411.827 ops/s
# Warmup Iteration  29: 4357617.532 ops/s
# Warmup Iteration  30: 4393324.499 ops/s
Iteration   1: 4396351.437 ops/s
Iteration   2: 4488199.523 ops/s
Iteration   3: 4430450.567 ops/s
Iteration   4: 4427667.195 ops/s
Iteration   5: 4384856.692 ops/s
Iteration   6: 4375980.165 ops/s
Iteration   7: 4414647.561 ops/s
Iteration   8: 4537621.821 ops/s
Iteration   9: 4360977.140 ops/s
Iteration  10: 4398857.793 ops/s
Iteration  11: 4391839.120 ops/s
Iteration  12: 4504500.578 ops/s
Iteration  13: 4499758.716 ops/s
Iteration  14: 4441158.258 ops/s
Iteration  15: 4487728.171 ops/s
Iteration  16: 4394067.044 ops/s
Iteration  17: 4416502.490 ops/s
Iteration  18: 4432787.080 ops/s
Iteration  19: 4439468.215 ops/s
Iteration  20: 4439564.764 ops/s
Iteration  21: 4475189.010 ops/s
Iteration  22: 4427399.437 ops/s
Iteration  23: 4406728.501 ops/s
Iteration  24: 4360033.743 ops/s
Iteration  25: 4343255.049 ops/s
Iteration  26: 4360164.808 ops/s
Iteration  27: 4369269.463 ops/s
Iteration  28: 4355803.106 ops/s
Iteration  29: 4258358.008 ops/s
Iteration  30: 4408003.958 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeFromValues":
  4414239.647 ±(99.9%) 38359.954 ops/s [Average]
  (min, avg, max) = (4258358.008, 4414239.647, 4537621.821), stdev = 57415.378
  CI (99.9%): [4375879.693, 4452599.601] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_removeFromValues  thrpt   30  4414239.647 ± 38359.954  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 242047.345 ops/s
# Warmup Iteration   2: 440055.977 ops/s
# Warmup Iteration   3: 505772.961 ops/s
# Warmup Iteration   4: 485953.885 ops/s
# Warmup Iteration   5: 497102.443 ops/s
# Warmup Iteration   6: 412189.997 ops/s
# Warmup Iteration   7: 507988.425 ops/s
# Warmup Iteration   8: 510633.131 ops/s
# Warmup Iteration   9: 503613.868 ops/s
# Warmup Iteration  10: 510166.557 ops/s
# Warmup Iteration  11: 479987.577 ops/s
# Warmup Iteration  12: 505256.208 ops/s
# Warmup Iteration  13: 507171.113 ops/s
# Warmup Iteration  14: 504476.359 ops/s
# Warmup Iteration  15: 500260.888 ops/s
# Warmup Iteration  16: 510572.798 ops/s
# Warmup Iteration  17: 489603.192 ops/s
# Warmup Iteration  18: 491324.279 ops/s
# Warmup Iteration  19: 507943.424 ops/s
# Warmup Iteration  20: 506568.449 ops/s
# Warmup Iteration  21: 493873.388 ops/s
# Warmup Iteration  22: 492233.173 ops/s
# Warmup Iteration  23: 496924.586 ops/s
# Warmup Iteration  24: 504476.215 ops/s
# Warmup Iteration  25: 491025.897 ops/s
# Warmup Iteration  26: 489078.998 ops/s
# Warmup Iteration  27: 498336.548 ops/s
# Warmup Iteration  28: 506442.368 ops/s
# Warmup Iteration  29: 488953.101 ops/s
# Warmup Iteration  30: 481608.591 ops/s
Iteration   1: 495352.469 ops/s
Iteration   2: 489568.766 ops/s
Iteration   3: 492685.325 ops/s
Iteration   4: 496585.035 ops/s
Iteration   5: 490470.547 ops/s
Iteration   6: 497840.938 ops/s
Iteration   7: 494769.929 ops/s
Iteration   8: 487431.223 ops/s
Iteration   9: 497391.209 ops/s
Iteration  10: 487054.213 ops/s
Iteration  11: 494148.092 ops/s
Iteration  12: 489762.512 ops/s
Iteration  13: 484983.895 ops/s
Iteration  14: 490080.006 ops/s
Iteration  15: 494997.390 ops/s
Iteration  16: 510399.840 ops/s
Iteration  17: 514608.551 ops/s
Iteration  18: 508734.728 ops/s
Iteration  19: 503619.129 ops/s
Iteration  20: 507784.294 ops/s
Iteration  21: 492017.848 ops/s
Iteration  22: 498211.577 ops/s
Iteration  23: 505771.835 ops/s
Iteration  24: 512786.715 ops/s
Iteration  25: 502368.232 ops/s
Iteration  26: 509065.824 ops/s
Iteration  27: 510903.070 ops/s
Iteration  28: 497950.542 ops/s
Iteration  29: 493301.489 ops/s
Iteration  30: 502811.720 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeIf":
  498448.565 ±(99.9%) 5638.454 ops/s [Average]
  (min, avg, max) = (484983.895, 498448.565, 514608.551), stdev = 8439.373
  CI (99.9%): [492810.111, 504087.018] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_removeIf  thrpt   30  498448.565 ± 5638.454  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2153492.201 ops/s
# Warmup Iteration   2: 5226435.877 ops/s
# Warmup Iteration   3: 4338162.675 ops/s
# Warmup Iteration   4: 5404478.213 ops/s
# Warmup Iteration   5: 5372849.708 ops/s
# Warmup Iteration   6: 5464114.011 ops/s
# Warmup Iteration   7: 5369574.464 ops/s
# Warmup Iteration   8: 5351419.433 ops/s
# Warmup Iteration   9: 5267440.286 ops/s
# Warmup Iteration  10: 5234674.685 ops/s
# Warmup Iteration  11: 5176149.151 ops/s
# Warmup Iteration  12: 5264522.825 ops/s
# Warmup Iteration  13: 5219263.761 ops/s
# Warmup Iteration  14: 5268118.077 ops/s
# Warmup Iteration  15: 5389194.108 ops/s
# Warmup Iteration  16: 5292273.863 ops/s
# Warmup Iteration  17: 5253408.968 ops/s
# Warmup Iteration  18: 5395669.982 ops/s
# Warmup Iteration  19: 5173769.609 ops/s
# Warmup Iteration  20: 5189171.903 ops/s
# Warmup Iteration  21: 5193163.382 ops/s
# Warmup Iteration  22: 5174336.957 ops/s
# Warmup Iteration  23: 5283851.285 ops/s
# Warmup Iteration  24: 5277529.798 ops/s
# Warmup Iteration  25: 5291876.320 ops/s
# Warmup Iteration  26: 5440148.417 ops/s
# Warmup Iteration  27: 5280204.800 ops/s
# Warmup Iteration  28: 5246402.515 ops/s
# Warmup Iteration  29: 5245219.391 ops/s
# Warmup Iteration  30: 5357382.201 ops/s
Iteration   1: 5203131.502 ops/s
Iteration   2: 5448090.952 ops/s
Iteration   3: 5292919.165 ops/s
Iteration   4: 5439798.603 ops/s
Iteration   5: 5422759.522 ops/s
Iteration   6: 5434903.698 ops/s
Iteration   7: 5158051.003 ops/s
Iteration   8: 5473958.526 ops/s
Iteration   9: 5484088.156 ops/s
Iteration  10: 5343404.934 ops/s
Iteration  11: 5467461.387 ops/s
Iteration  12: 5490837.769 ops/s
Iteration  13: 5316516.402 ops/s
Iteration  14: 5306735.346 ops/s
Iteration  15: 5275974.034 ops/s
Iteration  16: 5587817.829 ops/s
Iteration  17: 5463789.567 ops/s
Iteration  18: 5202291.698 ops/s
Iteration  19: 5399666.734 ops/s
Iteration  20: 5464773.335 ops/s
Iteration  21: 5464732.575 ops/s
Iteration  22: 5247490.061 ops/s
Iteration  23: 5423754.401 ops/s
Iteration  24: 5348341.985 ops/s
Iteration  25: 5375433.838 ops/s
Iteration  26: 5250446.730 ops/s
Iteration  27: 5135623.677 ops/s
Iteration  28: 5108310.140 ops/s
Iteration  29: 5267042.613 ops/s
Iteration  30: 5452346.499 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeKey":
  5358349.756 ±(99.9%) 81697.507 ops/s [Average]
  (min, avg, max) = (5108310.140, 5358349.756, 5587817.829), stdev = 122280.991
  CI (99.9%): [5276652.249, 5440047.263] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_removeKey  thrpt   30  5358349.756 ± 81697.507  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeNullFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeNullFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 549436.337 ops/s
# Warmup Iteration   2: 1187140.302 ops/s
# Warmup Iteration   3: 1235300.958 ops/s
# Warmup Iteration   4: 979841.743 ops/s
# Warmup Iteration   5: 1185500.499 ops/s
# Warmup Iteration   6: 1162068.772 ops/s
# Warmup Iteration   7: 1179717.785 ops/s
# Warmup Iteration   8: 1178342.334 ops/s
# Warmup Iteration   9: 1180845.601 ops/s
# Warmup Iteration  10: 1245579.257 ops/s
# Warmup Iteration  11: 1196722.647 ops/s
# Warmup Iteration  12: 1223807.902 ops/s
# Warmup Iteration  13: 1166087.097 ops/s
# Warmup Iteration  14: 1215252.133 ops/s
# Warmup Iteration  15: 1194720.908 ops/s
# Warmup Iteration  16: 1164476.191 ops/s
# Warmup Iteration  17: 1192461.084 ops/s
# Warmup Iteration  18: 1210607.045 ops/s
# Warmup Iteration  19: 1175216.084 ops/s
# Warmup Iteration  20: 1195007.706 ops/s
# Warmup Iteration  21: 1204793.053 ops/s
# Warmup Iteration  22: 1211922.927 ops/s
# Warmup Iteration  23: 1248118.343 ops/s
# Warmup Iteration  24: 1169179.299 ops/s
# Warmup Iteration  25: 1184370.058 ops/s
# Warmup Iteration  26: 1206100.387 ops/s
# Warmup Iteration  27: 1197214.031 ops/s
# Warmup Iteration  28: 1190497.435 ops/s
# Warmup Iteration  29: 1175239.922 ops/s
# Warmup Iteration  30: 1197714.300 ops/s
Iteration   1: 1199804.914 ops/s
Iteration   2: 1239293.197 ops/s
Iteration   3: 1240097.660 ops/s
Iteration   4: 1205278.274 ops/s
Iteration   5: 1245207.332 ops/s
Iteration   6: 1234057.242 ops/s
Iteration   7: 1222479.602 ops/s
Iteration   8: 1178326.592 ops/s
Iteration   9: 1186030.094 ops/s
Iteration  10: 1182438.901 ops/s
Iteration  11: 1221357.135 ops/s
Iteration  12: 1245855.332 ops/s
Iteration  13: 1210699.268 ops/s
Iteration  14: 1189442.574 ops/s
Iteration  15: 1196194.410 ops/s
Iteration  16: 1201012.228 ops/s
Iteration  17: 1185371.783 ops/s
Iteration  18: 1186413.712 ops/s
Iteration  19: 1175518.242 ops/s
Iteration  20: 1171681.219 ops/s
Iteration  21: 1189625.599 ops/s
Iteration  22: 1189962.371 ops/s
Iteration  23: 1183363.770 ops/s
Iteration  24: 1169280.356 ops/s
Iteration  25: 1207009.670 ops/s
Iteration  26: 1240539.837 ops/s
Iteration  27: 1227345.941 ops/s
Iteration  28: 1175633.753 ops/s
Iteration  29: 1249340.059 ops/s
Iteration  30: 1231187.852 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeNullFromKeySet":
  1205994.964 ±(99.9%) 17215.154 ops/s [Average]
  (min, avg, max) = (1169280.356, 1205994.964, 1249340.059), stdev = 25766.834
  CI (99.9%): [1188779.810, 1223210.118] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_removeNullFromKeySet  thrpt   30  1205994.964 ± 17215.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeNullFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeNullFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 642665.498 ops/s
# Warmup Iteration   2: 1497572.217 ops/s
# Warmup Iteration   3: 1523258.840 ops/s
# Warmup Iteration   4: 1263467.409 ops/s
# Warmup Iteration   5: 1522253.242 ops/s
# Warmup Iteration   6: 1524917.677 ops/s
# Warmup Iteration   7: 1547338.300 ops/s
# Warmup Iteration   8: 1540467.081 ops/s
# Warmup Iteration   9: 1560966.328 ops/s
# Warmup Iteration  10: 1507922.062 ops/s
# Warmup Iteration  11: 1513122.649 ops/s
# Warmup Iteration  12: 1526882.996 ops/s
# Warmup Iteration  13: 1520414.207 ops/s
# Warmup Iteration  14: 1521913.671 ops/s
# Warmup Iteration  15: 1568142.704 ops/s
# Warmup Iteration  16: 1526311.994 ops/s
# Warmup Iteration  17: 1530553.861 ops/s
# Warmup Iteration  18: 1495878.529 ops/s
# Warmup Iteration  19: 1529551.491 ops/s
# Warmup Iteration  20: 1521192.641 ops/s
# Warmup Iteration  21: 1526690.392 ops/s
# Warmup Iteration  22: 1564745.900 ops/s
# Warmup Iteration  23: 1524974.136 ops/s
# Warmup Iteration  24: 1504861.260 ops/s
# Warmup Iteration  25: 1564143.821 ops/s
# Warmup Iteration  26: 1500437.192 ops/s
# Warmup Iteration  27: 1527899.204 ops/s
# Warmup Iteration  28: 1517449.925 ops/s
# Warmup Iteration  29: 1512765.244 ops/s
# Warmup Iteration  30: 1526526.349 ops/s
Iteration   1: 1516128.177 ops/s
Iteration   2: 1575238.945 ops/s
Iteration   3: 1601061.431 ops/s
Iteration   4: 1554027.773 ops/s
Iteration   5: 1560216.243 ops/s
Iteration   6: 1535429.704 ops/s
Iteration   7: 1563999.384 ops/s
Iteration   8: 1526683.821 ops/s
Iteration   9: 1527133.807 ops/s
Iteration  10: 1501428.189 ops/s
Iteration  11: 1496893.380 ops/s
Iteration  12: 1536463.340 ops/s
Iteration  13: 1621377.807 ops/s
Iteration  14: 1571527.721 ops/s
Iteration  15: 1531599.777 ops/s
Iteration  16: 1610272.860 ops/s
Iteration  17: 1589957.670 ops/s
Iteration  18: 1518726.991 ops/s
Iteration  19: 1577867.450 ops/s
Iteration  20: 1530562.137 ops/s
Iteration  21: 1549547.374 ops/s
Iteration  22: 1553377.376 ops/s
Iteration  23: 1540656.686 ops/s
Iteration  24: 1532258.616 ops/s
Iteration  25: 1547094.682 ops/s
Iteration  26: 1515992.089 ops/s
Iteration  27: 1593307.917 ops/s
Iteration  28: 1533696.485 ops/s
Iteration  29: 1612070.769 ops/s
Iteration  30: 1588009.635 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeNullFromValues":
  1553753.608 ±(99.9%) 22606.904 ops/s [Average]
  (min, avg, max) = (1496893.380, 1553753.608, 1621377.807), stdev = 33836.952
  CI (99.9%): [1531146.704, 1576360.511] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_removeNullFromValues  thrpt   30  1553753.608 ± 22606.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 980235.479 ops/s
# Warmup Iteration   2: 2554156.478 ops/s
# Warmup Iteration   3: 2383812.041 ops/s
# Warmup Iteration   4: 2244015.791 ops/s
# Warmup Iteration   5: 2438791.722 ops/s
# Warmup Iteration   6: 2583815.516 ops/s
# Warmup Iteration   7: 2585867.794 ops/s
# Warmup Iteration   8: 2670391.909 ops/s
# Warmup Iteration   9: 2563634.697 ops/s
# Warmup Iteration  10: 2576262.319 ops/s
# Warmup Iteration  11: 2640916.320 ops/s
# Warmup Iteration  12: 2499084.219 ops/s
# Warmup Iteration  13: 2461266.045 ops/s
# Warmup Iteration  14: 2467721.521 ops/s
# Warmup Iteration  15: 2478171.425 ops/s
# Warmup Iteration  16: 2487364.230 ops/s
# Warmup Iteration  17: 2488158.924 ops/s
# Warmup Iteration  18: 2481718.458 ops/s
# Warmup Iteration  19: 2492933.635 ops/s
# Warmup Iteration  20: 2565926.975 ops/s
# Warmup Iteration  21: 2481599.066 ops/s
# Warmup Iteration  22: 2555742.923 ops/s
# Warmup Iteration  23: 2629671.265 ops/s
# Warmup Iteration  24: 2665131.620 ops/s
# Warmup Iteration  25: 2633670.046 ops/s
# Warmup Iteration  26: 2677301.252 ops/s
# Warmup Iteration  27: 2654717.521 ops/s
# Warmup Iteration  28: 2643429.221 ops/s
# Warmup Iteration  29: 2626321.732 ops/s
# Warmup Iteration  30: 2692846.568 ops/s
Iteration   1: 2691461.148 ops/s
Iteration   2: 2683606.679 ops/s
Iteration   3: 2696332.652 ops/s
Iteration   4: 2686028.383 ops/s
Iteration   5: 2682683.383 ops/s
Iteration   6: 2691596.560 ops/s
Iteration   7: 2673970.925 ops/s
Iteration   8: 2687319.804 ops/s
Iteration   9: 2688347.614 ops/s
Iteration  10: 2654275.754 ops/s
Iteration  11: 2680604.500 ops/s
Iteration  12: 2671869.522 ops/s
Iteration  13: 2671449.608 ops/s
Iteration  14: 2695147.586 ops/s
Iteration  15: 2687246.837 ops/s
Iteration  16: 2592395.735 ops/s
Iteration  17: 2632729.194 ops/s
Iteration  18: 2537772.316 ops/s
Iteration  19: 2644117.376 ops/s
Iteration  20: 2670482.017 ops/s
Iteration  21: 2673358.840 ops/s
Iteration  22: 2672213.383 ops/s
Iteration  23: 2637007.993 ops/s
Iteration  24: 2644068.323 ops/s
Iteration  25: 2635122.902 ops/s
Iteration  26: 2663405.714 ops/s
Iteration  27: 2667270.409 ops/s
Iteration  28: 2669552.088 ops/s
Iteration  29: 2677930.771 ops/s
Iteration  30: 2634567.306 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_removeObject":
  2663131.177 ±(99.9%) 22429.544 ops/s [Average]
  (min, avg, max) = (2537772.316, 2663131.177, 2696332.652), stdev = 33571.488
  CI (99.9%): [2640701.634, 2685560.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_removeObject  thrpt   30  2663131.177 ± 22429.544  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_retainAllFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_retainAllFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 448482.545 ops/s
# Warmup Iteration   2: 1212869.831 ops/s
# Warmup Iteration   3: 1210661.109 ops/s
# Warmup Iteration   4: 1013095.885 ops/s
# Warmup Iteration   5: 1220304.594 ops/s
# Warmup Iteration   6: 1211948.813 ops/s
# Warmup Iteration   7: 1230191.009 ops/s
# Warmup Iteration   8: 1239733.693 ops/s
# Warmup Iteration   9: 1192567.560 ops/s
# Warmup Iteration  10: 1218588.742 ops/s
# Warmup Iteration  11: 1220321.680 ops/s
# Warmup Iteration  12: 1216744.555 ops/s
# Warmup Iteration  13: 1207655.574 ops/s
# Warmup Iteration  14: 1219205.122 ops/s
# Warmup Iteration  15: 1221500.678 ops/s
# Warmup Iteration  16: 1219360.279 ops/s
# Warmup Iteration  17: 1223128.987 ops/s
# Warmup Iteration  18: 1212705.020 ops/s
# Warmup Iteration  19: 1215287.157 ops/s
# Warmup Iteration  20: 1224316.659 ops/s
# Warmup Iteration  21: 1226896.957 ops/s
# Warmup Iteration  22: 1208887.325 ops/s
# Warmup Iteration  23: 1213257.567 ops/s
# Warmup Iteration  24: 1172421.675 ops/s
# Warmup Iteration  25: 1201853.518 ops/s
# Warmup Iteration  26: 1234399.569 ops/s
# Warmup Iteration  27: 1220951.968 ops/s
# Warmup Iteration  28: 1218945.541 ops/s
# Warmup Iteration  29: 1219544.219 ops/s
# Warmup Iteration  30: 1217968.162 ops/s
Iteration   1: 1227360.312 ops/s
Iteration   2: 1224515.869 ops/s
Iteration   3: 1219204.784 ops/s
Iteration   4: 1214658.644 ops/s
Iteration   5: 1214237.245 ops/s
Iteration   6: 1205701.796 ops/s
Iteration   7: 1195619.218 ops/s
Iteration   8: 1199748.851 ops/s
Iteration   9: 1207591.627 ops/s
Iteration  10: 1210368.321 ops/s
Iteration  11: 1198906.490 ops/s
Iteration  12: 1218138.880 ops/s
Iteration  13: 1217663.438 ops/s
Iteration  14: 1216790.166 ops/s
Iteration  15: 1241201.125 ops/s
Iteration  16: 1218080.905 ops/s
Iteration  17: 1225631.029 ops/s
Iteration  18: 1236403.750 ops/s
Iteration  19: 1225079.112 ops/s
Iteration  20: 1222808.362 ops/s
Iteration  21: 1217720.077 ops/s
Iteration  22: 1214718.914 ops/s
Iteration  23: 1219197.729 ops/s
Iteration  24: 1227253.208 ops/s
Iteration  25: 1227546.813 ops/s
Iteration  26: 1230343.199 ops/s
Iteration  27: 1224231.905 ops/s
Iteration  28: 1233969.517 ops/s
Iteration  29: 1225566.683 ops/s
Iteration  30: 1235634.767 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_retainAllFromEntrySet":
  1219863.091 ±(99.9%) 7425.978 ops/s [Average]
  (min, avg, max) = (1195619.218, 1219863.091, 1241201.125), stdev = 11114.855
  CI (99.9%): [1212437.113, 1227289.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
HashBiMapTest._Benchmark.benchmark_retainAllFromEntrySet  thrpt   30  1219863.091 ± 7425.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_retainAllFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_retainAllFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1210250.001 ops/s
# Warmup Iteration   2: 3031061.349 ops/s
# Warmup Iteration   3: 3095017.507 ops/s
# Warmup Iteration   4: 2376632.794 ops/s
# Warmup Iteration   5: 3053355.233 ops/s
# Warmup Iteration   6: 2974031.722 ops/s
# Warmup Iteration   7: 2913450.920 ops/s
# Warmup Iteration   8: 2919924.613 ops/s
# Warmup Iteration   9: 2887487.252 ops/s
# Warmup Iteration  10: 2967731.794 ops/s
# Warmup Iteration  11: 2890456.251 ops/s
# Warmup Iteration  12: 2960707.687 ops/s
# Warmup Iteration  13: 3177484.329 ops/s
# Warmup Iteration  14: 3046402.233 ops/s
# Warmup Iteration  15: 3081128.880 ops/s
# Warmup Iteration  16: 2970224.662 ops/s
# Warmup Iteration  17: 3103257.693 ops/s
# Warmup Iteration  18: 3125484.054 ops/s
# Warmup Iteration  19: 3133273.487 ops/s
# Warmup Iteration  20: 3121737.145 ops/s
# Warmup Iteration  21: 3146665.932 ops/s
# Warmup Iteration  22: 3150745.744 ops/s
# Warmup Iteration  23: 3046088.226 ops/s
# Warmup Iteration  24: 2982601.485 ops/s
# Warmup Iteration  25: 2891153.499 ops/s
# Warmup Iteration  26: 2997462.529 ops/s
# Warmup Iteration  27: 2938005.481 ops/s
# Warmup Iteration  28: 2980390.743 ops/s
# Warmup Iteration  29: 2940932.749 ops/s
# Warmup Iteration  30: 2937579.999 ops/s
Iteration   1: 2942975.211 ops/s
Iteration   2: 2919424.579 ops/s
Iteration   3: 2893171.889 ops/s
Iteration   4: 2867139.608 ops/s
Iteration   5: 2840011.308 ops/s
Iteration   6: 2845302.413 ops/s
Iteration   7: 2875442.339 ops/s
Iteration   8: 2924152.351 ops/s
Iteration   9: 2953594.218 ops/s
Iteration  10: 2909353.464 ops/s
Iteration  11: 2885932.517 ops/s
Iteration  12: 2866557.407 ops/s
Iteration  13: 2891525.360 ops/s
Iteration  14: 2861922.551 ops/s
Iteration  15: 2970313.862 ops/s
Iteration  16: 2873866.085 ops/s
Iteration  17: 2853535.525 ops/s
Iteration  18: 2905432.279 ops/s
Iteration  19: 2885739.518 ops/s
Iteration  20: 2924709.906 ops/s
Iteration  21: 2888602.788 ops/s
Iteration  22: 2942583.034 ops/s
Iteration  23: 2916059.759 ops/s
Iteration  24: 2919655.281 ops/s
Iteration  25: 2868789.769 ops/s
Iteration  26: 2875818.049 ops/s
Iteration  27: 2885640.603 ops/s
Iteration  28: 2913592.187 ops/s
Iteration  29: 2894112.730 ops/s
Iteration  30: 2958340.919 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_retainAllFromKeySet":
  2898443.250 ±(99.9%) 22693.336 ops/s [Average]
  (min, avg, max) = (2840011.308, 2898443.250, 2970313.862), stdev = 33966.320
  CI (99.9%): [2875749.914, 2921136.586] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_retainAllFromKeySet  thrpt   30  2898443.250 ± 22693.336  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_retainAllFromKeySet_null_collision$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_retainAllFromKeySet_null_collision

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 506570.139 ops/s
# Warmup Iteration   2: 1171484.658 ops/s
# Warmup Iteration   3: 1022251.475 ops/s
# Warmup Iteration   4: 1058518.268 ops/s
# Warmup Iteration   5: 1143671.791 ops/s
# Warmup Iteration   6: 1135405.551 ops/s
# Warmup Iteration   7: 1134041.127 ops/s
# Warmup Iteration   8: 1120816.177 ops/s
# Warmup Iteration   9: 1137481.676 ops/s
# Warmup Iteration  10: 1142153.934 ops/s
# Warmup Iteration  11: 1154426.213 ops/s
# Warmup Iteration  12: 1137392.254 ops/s
# Warmup Iteration  13: 1138936.902 ops/s
# Warmup Iteration  14: 1141763.874 ops/s
# Warmup Iteration  15: 1147618.598 ops/s
# Warmup Iteration  16: 1143780.628 ops/s
# Warmup Iteration  17: 1147179.913 ops/s
# Warmup Iteration  18: 1129114.483 ops/s
# Warmup Iteration  19: 1133601.536 ops/s
# Warmup Iteration  20: 1150621.664 ops/s
# Warmup Iteration  21: 1136370.922 ops/s
# Warmup Iteration  22: 1182127.710 ops/s
# Warmup Iteration  23: 1172759.018 ops/s
# Warmup Iteration  24: 1173051.281 ops/s
# Warmup Iteration  25: 1143487.211 ops/s
# Warmup Iteration  26: 1125476.986 ops/s
# Warmup Iteration  27: 1144572.255 ops/s
# Warmup Iteration  28: 1140555.854 ops/s
# Warmup Iteration  29: 1152957.945 ops/s
# Warmup Iteration  30: 1211123.748 ops/s
Iteration   1: 1175026.763 ops/s
Iteration   2: 1144182.514 ops/s
Iteration   3: 1153534.511 ops/s
Iteration   4: 1143046.841 ops/s
Iteration   5: 1150795.026 ops/s
Iteration   6: 1146517.443 ops/s
Iteration   7: 1139567.894 ops/s
Iteration   8: 1189268.921 ops/s
Iteration   9: 1149086.085 ops/s
Iteration  10: 1236773.294 ops/s
Iteration  11: 1217488.892 ops/s
Iteration  12: 1139234.442 ops/s
Iteration  13: 1138615.223 ops/s
Iteration  14: 1130207.807 ops/s
Iteration  15: 1152253.307 ops/s
Iteration  16: 1160936.118 ops/s
Iteration  17: 1144337.281 ops/s
Iteration  18: 1178085.154 ops/s
Iteration  19: 1181848.159 ops/s
Iteration  20: 1181198.014 ops/s
Iteration  21: 1168432.664 ops/s
Iteration  22: 1137079.475 ops/s
Iteration  23: 1148053.728 ops/s
Iteration  24: 1148432.106 ops/s
Iteration  25: 1164178.326 ops/s
Iteration  26: 1172651.796 ops/s
Iteration  27: 1132550.245 ops/s
Iteration  28: 1134641.926 ops/s
Iteration  29: 1143662.182 ops/s
Iteration  30: 1120902.184 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_retainAllFromKeySet_null_collision":
  1157419.611 ±(99.9%) 17120.584 ops/s [Average]
  (min, avg, max) = (1120902.184, 1157419.611, 1236773.294), stdev = 25625.287
  CI (99.9%): [1140299.026, 1174540.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_retainAllFromKeySet_null_collision  thrpt   30  1157419.611 ± 17120.584  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_retainAllFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_retainAllFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1150973.356 ops/s
# Warmup Iteration   2: 2813542.462 ops/s
# Warmup Iteration   3: 2875572.661 ops/s
# Warmup Iteration   4: 2391245.426 ops/s
# Warmup Iteration   5: 2908785.095 ops/s
# Warmup Iteration   6: 2853812.625 ops/s
# Warmup Iteration   7: 2905493.428 ops/s
# Warmup Iteration   8: 2952969.177 ops/s
# Warmup Iteration   9: 2937566.996 ops/s
# Warmup Iteration  10: 2893152.042 ops/s
# Warmup Iteration  11: 2915366.523 ops/s
# Warmup Iteration  12: 2892065.334 ops/s
# Warmup Iteration  13: 2873112.011 ops/s
# Warmup Iteration  14: 2945941.101 ops/s
# Warmup Iteration  15: 2951863.034 ops/s
# Warmup Iteration  16: 2866341.324 ops/s
# Warmup Iteration  17: 2912183.966 ops/s
# Warmup Iteration  18: 2867898.244 ops/s
# Warmup Iteration  19: 3002703.703 ops/s
# Warmup Iteration  20: 2864132.870 ops/s
# Warmup Iteration  21: 2899253.030 ops/s
# Warmup Iteration  22: 3097998.470 ops/s
# Warmup Iteration  23: 3074963.903 ops/s
# Warmup Iteration  24: 2902666.824 ops/s
# Warmup Iteration  25: 2957595.023 ops/s
# Warmup Iteration  26: 2966622.345 ops/s
# Warmup Iteration  27: 2980010.741 ops/s
# Warmup Iteration  28: 2931072.504 ops/s
# Warmup Iteration  29: 2992751.740 ops/s
# Warmup Iteration  30: 2981818.541 ops/s
Iteration   1: 2889652.986 ops/s
Iteration   2: 2885526.378 ops/s
Iteration   3: 2918527.342 ops/s
Iteration   4: 2873613.750 ops/s
Iteration   5: 2820133.093 ops/s
Iteration   6: 2783970.565 ops/s
Iteration   7: 2922125.031 ops/s
Iteration   8: 2842668.501 ops/s
Iteration   9: 2911738.848 ops/s
Iteration  10: 2863556.822 ops/s
Iteration  11: 2891118.544 ops/s
Iteration  12: 2916114.831 ops/s
Iteration  13: 2818018.923 ops/s
Iteration  14: 2841623.970 ops/s
Iteration  15: 2839950.764 ops/s
Iteration  16: 2942974.269 ops/s
Iteration  17: 2898372.277 ops/s
Iteration  18: 2871728.450 ops/s
Iteration  19: 2890342.390 ops/s
Iteration  20: 2981914.498 ops/s
Iteration  21: 2874190.206 ops/s
Iteration  22: 3005368.853 ops/s
Iteration  23: 2890712.710 ops/s
Iteration  24: 2817751.788 ops/s
Iteration  25: 2853925.966 ops/s
Iteration  26: 2875942.989 ops/s
Iteration  27: 2897954.478 ops/s
Iteration  28: 2842765.102 ops/s
Iteration  29: 2965330.041 ops/s
Iteration  30: 2847251.408 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_retainAllFromValues":
  2882495.526 ±(99.9%) 33388.268 ops/s [Average]
  (min, avg, max) = (2783970.565, 2882495.526, 3005368.853), stdev = 49973.991
  CI (99.9%): [2849107.258, 2915883.794] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_retainAllFromValues  thrpt   30  2882495.526 ± 33388.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 899160.446 ops/s
# Warmup Iteration   2: 2206991.423 ops/s
# Warmup Iteration   3: 2328244.604 ops/s
# Warmup Iteration   4: 1932711.360 ops/s
# Warmup Iteration   5: 2379179.262 ops/s
# Warmup Iteration   6: 2423777.363 ops/s
# Warmup Iteration   7: 2312775.848 ops/s
# Warmup Iteration   8: 2306814.956 ops/s
# Warmup Iteration   9: 2390986.840 ops/s
# Warmup Iteration  10: 2328837.790 ops/s
# Warmup Iteration  11: 2321990.105 ops/s
# Warmup Iteration  12: 2346974.858 ops/s
# Warmup Iteration  13: 2389368.567 ops/s
# Warmup Iteration  14: 2421491.955 ops/s
# Warmup Iteration  15: 2400411.618 ops/s
# Warmup Iteration  16: 2384651.321 ops/s
# Warmup Iteration  17: 2324843.051 ops/s
# Warmup Iteration  18: 2338562.272 ops/s
# Warmup Iteration  19: 2346951.353 ops/s
# Warmup Iteration  20: 2375655.794 ops/s
# Warmup Iteration  21: 2403019.133 ops/s
# Warmup Iteration  22: 2332246.695 ops/s
# Warmup Iteration  23: 2328392.295 ops/s
# Warmup Iteration  24: 2315913.308 ops/s
# Warmup Iteration  25: 2355956.172 ops/s
# Warmup Iteration  26: 2362263.413 ops/s
# Warmup Iteration  27: 2333756.043 ops/s
# Warmup Iteration  28: 2319894.342 ops/s
# Warmup Iteration  29: 2373215.531 ops/s
# Warmup Iteration  30: 2334396.775 ops/s
Iteration   1: 2322772.097 ops/s
Iteration   2: 2359362.008 ops/s
Iteration   3: 2367447.744 ops/s
Iteration   4: 2453841.368 ops/s
Iteration   5: 2324308.290 ops/s
Iteration   6: 2380440.406 ops/s
Iteration   7: 2396380.921 ops/s
Iteration   8: 2365136.132 ops/s
Iteration   9: 2317731.686 ops/s
Iteration  10: 2329727.451 ops/s
Iteration  11: 2321620.396 ops/s
Iteration  12: 2382270.607 ops/s
Iteration  13: 2338882.212 ops/s
Iteration  14: 2296745.209 ops/s
Iteration  15: 2402675.250 ops/s
Iteration  16: 2305781.450 ops/s
Iteration  17: 2327399.417 ops/s
Iteration  18: 2346417.096 ops/s
Iteration  19: 2354582.769 ops/s
Iteration  20: 2409361.000 ops/s
Iteration  21: 2386963.084 ops/s
Iteration  22: 2425854.757 ops/s
Iteration  23: 2415466.679 ops/s
Iteration  24: 2387063.568 ops/s
Iteration  25: 2395416.237 ops/s
Iteration  26: 2347906.875 ops/s
Iteration  27: 2418507.619 ops/s
Iteration  28: 2316273.690 ops/s
Iteration  29: 2428013.259 ops/s
Iteration  30: 2415822.779 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_select":
  2368005.735 ±(99.9%) 28375.625 ops/s [Average]
  (min, avg, max) = (2296745.209, 2368005.735, 2453841.368), stdev = 42471.303
  CI (99.9%): [2339630.110, 2396381.360] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_select  thrpt   30  2368005.735 ± 28375.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_selectInstancesOf_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_selectInstancesOf_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709563.950 ops/s
# Warmup Iteration   2: 1374710.495 ops/s
# Warmup Iteration   3: 1540796.268 ops/s
# Warmup Iteration   4: 1519413.384 ops/s
# Warmup Iteration   5: 1213961.815 ops/s
# Warmup Iteration   6: 1522074.695 ops/s
# Warmup Iteration   7: 1516248.437 ops/s
# Warmup Iteration   8: 1571342.513 ops/s
# Warmup Iteration   9: 1543264.411 ops/s
# Warmup Iteration  10: 1589860.615 ops/s
# Warmup Iteration  11: 1593444.427 ops/s
# Warmup Iteration  12: 1563236.802 ops/s
# Warmup Iteration  13: 1525189.555 ops/s
# Warmup Iteration  14: 1524438.372 ops/s
# Warmup Iteration  15: 1502914.720 ops/s
# Warmup Iteration  16: 1530309.307 ops/s
# Warmup Iteration  17: 1515262.589 ops/s
# Warmup Iteration  18: 1553011.179 ops/s
# Warmup Iteration  19: 1585599.942 ops/s
# Warmup Iteration  20: 1511182.374 ops/s
# Warmup Iteration  21: 1526814.331 ops/s
# Warmup Iteration  22: 1507172.292 ops/s
# Warmup Iteration  23: 1519553.149 ops/s
# Warmup Iteration  24: 1534745.752 ops/s
# Warmup Iteration  25: 1526945.273 ops/s
# Warmup Iteration  26: 1544344.053 ops/s
# Warmup Iteration  27: 1502424.711 ops/s
# Warmup Iteration  28: 1516447.474 ops/s
# Warmup Iteration  29: 1554289.262 ops/s
# Warmup Iteration  30: 1573239.845 ops/s
Iteration   1: 1498841.992 ops/s
Iteration   2: 1517943.584 ops/s
Iteration   3: 1497320.905 ops/s
Iteration   4: 1487764.164 ops/s
Iteration   5: 1543187.462 ops/s
Iteration   6: 1564011.029 ops/s
Iteration   7: 1589073.684 ops/s
Iteration   8: 1541744.081 ops/s
Iteration   9: 1527378.019 ops/s
Iteration  10: 1560127.101 ops/s
Iteration  11: 1518145.025 ops/s
Iteration  12: 1578305.391 ops/s
Iteration  13: 1624709.336 ops/s
Iteration  14: 1582767.201 ops/s
Iteration  15: 1593870.456 ops/s
Iteration  16: 1622691.975 ops/s
Iteration  17: 1523027.860 ops/s
Iteration  18: 1563409.071 ops/s
Iteration  19: 1501375.034 ops/s
Iteration  20: 1517289.143 ops/s
Iteration  21: 1624143.458 ops/s
Iteration  22: 1598980.196 ops/s
Iteration  23: 1534631.208 ops/s
Iteration  24: 1506573.659 ops/s
Iteration  25: 1522944.124 ops/s
Iteration  26: 1533459.522 ops/s
Iteration  27: 1490715.712 ops/s
Iteration  28: 1524850.512 ops/s
Iteration  29: 1542804.514 ops/s
Iteration  30: 1580455.847 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_selectInstancesOf_value":
  1547084.709 ±(99.9%) 27368.197 ops/s [Average]
  (min, avg, max) = (1487764.164, 1547084.709, 1624709.336), stdev = 40963.432
  CI (99.9%): [1519716.512, 1574452.906] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_selectInstancesOf_value  thrpt   30  1547084.709 ± 27368.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_selectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_selectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 568125.533 ops/s
# Warmup Iteration   2: 1125175.461 ops/s
# Warmup Iteration   3: 1204369.331 ops/s
# Warmup Iteration   4: 1292558.562 ops/s
# Warmup Iteration   5: 983343.715 ops/s
# Warmup Iteration   6: 1171862.807 ops/s
# Warmup Iteration   7: 1226808.326 ops/s
# Warmup Iteration   8: 1242843.643 ops/s
# Warmup Iteration   9: 1226325.856 ops/s
# Warmup Iteration  10: 1212111.178 ops/s
# Warmup Iteration  11: 1199113.015 ops/s
# Warmup Iteration  12: 1218945.576 ops/s
# Warmup Iteration  13: 1217263.555 ops/s
# Warmup Iteration  14: 1189205.912 ops/s
# Warmup Iteration  15: 1196381.477 ops/s
# Warmup Iteration  16: 1209254.885 ops/s
# Warmup Iteration  17: 1194213.953 ops/s
# Warmup Iteration  18: 1214075.466 ops/s
# Warmup Iteration  19: 1190914.353 ops/s
# Warmup Iteration  20: 1178288.121 ops/s
# Warmup Iteration  21: 1219402.446 ops/s
# Warmup Iteration  22: 1205750.089 ops/s
# Warmup Iteration  23: 1188170.433 ops/s
# Warmup Iteration  24: 1191629.085 ops/s
# Warmup Iteration  25: 1196897.552 ops/s
# Warmup Iteration  26: 1190614.032 ops/s
# Warmup Iteration  27: 1181361.381 ops/s
# Warmup Iteration  28: 1161983.352 ops/s
# Warmup Iteration  29: 1184320.173 ops/s
# Warmup Iteration  30: 1188124.547 ops/s
Iteration   1: 1204418.777 ops/s
Iteration   2: 1209744.905 ops/s
Iteration   3: 1229720.858 ops/s
Iteration   4: 1196666.898 ops/s
Iteration   5: 1208633.121 ops/s
Iteration   6: 1201721.236 ops/s
Iteration   7: 1195024.370 ops/s
Iteration   8: 1162866.943 ops/s
Iteration   9: 1196483.830 ops/s
Iteration  10: 1205028.246 ops/s
Iteration  11: 1186995.407 ops/s
Iteration  12: 1226009.466 ops/s
Iteration  13: 1227249.502 ops/s
Iteration  14: 1192394.614 ops/s
Iteration  15: 1182475.919 ops/s
Iteration  16: 1234681.791 ops/s
Iteration  17: 1203080.460 ops/s
Iteration  18: 1197588.732 ops/s
Iteration  19: 1183913.378 ops/s
Iteration  20: 1180015.617 ops/s
Iteration  21: 1195340.364 ops/s
Iteration  22: 1196929.304 ops/s
Iteration  23: 1167512.210 ops/s
Iteration  24: 1202325.920 ops/s
Iteration  25: 1186216.506 ops/s
Iteration  26: 1180068.294 ops/s
Iteration  27: 1183846.856 ops/s
Iteration  28: 1188410.714 ops/s
Iteration  29: 1159735.191 ops/s
Iteration  30: 1180445.697 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_selectMap":
  1195518.171 ±(99.9%) 12302.251 ops/s [Average]
  (min, avg, max) = (1159735.191, 1195518.171, 1234681.791), stdev = 18413.431
  CI (99.9%): [1183215.920, 1207820.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_selectMap  thrpt   30  1195518.171 ± 12302.251  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 882931.780 ops/s
# Warmup Iteration   2: 2222033.467 ops/s
# Warmup Iteration   3: 2327005.480 ops/s
# Warmup Iteration   4: 1860941.941 ops/s
# Warmup Iteration   5: 2356084.611 ops/s
# Warmup Iteration   6: 2402342.902 ops/s
# Warmup Iteration   7: 2386583.894 ops/s
# Warmup Iteration   8: 2329391.197 ops/s
# Warmup Iteration   9: 2394348.495 ops/s
# Warmup Iteration  10: 2414695.505 ops/s
# Warmup Iteration  11: 2331624.419 ops/s
# Warmup Iteration  12: 2405974.196 ops/s
# Warmup Iteration  13: 2332613.296 ops/s
# Warmup Iteration  14: 2406252.734 ops/s
# Warmup Iteration  15: 2352316.937 ops/s
# Warmup Iteration  16: 2397387.453 ops/s
# Warmup Iteration  17: 2338531.899 ops/s
# Warmup Iteration  18: 2424792.029 ops/s
# Warmup Iteration  19: 2354827.810 ops/s
# Warmup Iteration  20: 2329352.696 ops/s
# Warmup Iteration  21: 2387271.548 ops/s
# Warmup Iteration  22: 2393503.951 ops/s
# Warmup Iteration  23: 2419995.805 ops/s
# Warmup Iteration  24: 2411983.764 ops/s
# Warmup Iteration  25: 2421378.641 ops/s
# Warmup Iteration  26: 2400588.603 ops/s
# Warmup Iteration  27: 2331924.777 ops/s
# Warmup Iteration  28: 2339635.434 ops/s
# Warmup Iteration  29: 2317744.162 ops/s
# Warmup Iteration  30: 2352321.317 ops/s
Iteration   1: 2401637.485 ops/s
Iteration   2: 2335287.582 ops/s
Iteration   3: 2299870.191 ops/s
Iteration   4: 2303301.514 ops/s
Iteration   5: 2468041.131 ops/s
Iteration   6: 2431770.012 ops/s
Iteration   7: 2407933.873 ops/s
Iteration   8: 2336997.084 ops/s
Iteration   9: 2280629.921 ops/s
Iteration  10: 2312898.942 ops/s
Iteration  11: 2396472.595 ops/s
Iteration  12: 2388508.269 ops/s
Iteration  13: 2381474.548 ops/s
Iteration  14: 2312277.574 ops/s
Iteration  15: 2408165.435 ops/s
Iteration  16: 2429314.536 ops/s
Iteration  17: 2339471.116 ops/s
Iteration  18: 2327019.685 ops/s
Iteration  19: 2521904.814 ops/s
Iteration  20: 2402800.885 ops/s
Iteration  21: 2373483.352 ops/s
Iteration  22: 2544444.039 ops/s
Iteration  23: 2534025.227 ops/s
Iteration  24: 2323392.820 ops/s
Iteration  25: 2292316.702 ops/s
Iteration  26: 2324715.468 ops/s
Iteration  27: 2303928.644 ops/s
Iteration  28: 2431884.866 ops/s
Iteration  29: 2417300.411 ops/s
Iteration  30: 2395849.863 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_selectWith":
  2380903.953 ±(99.9%) 48102.630 ops/s [Average]
  (min, avg, max) = (2280629.921, 2380903.953, 2544444.039), stdev = 71997.758
  CI (99.9%): [2332801.322, 2429006.583] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_selectWith  thrpt   30  2380903.953 ± 48102.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_selectWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_selectWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1361944.596 ops/s
# Warmup Iteration   2: 3339027.547 ops/s
# Warmup Iteration   3: 2910287.147 ops/s
# Warmup Iteration   4: 3176074.087 ops/s
# Warmup Iteration   5: 3428868.244 ops/s
# Warmup Iteration   6: 3425496.098 ops/s
# Warmup Iteration   7: 3414466.976 ops/s
# Warmup Iteration   8: 3498518.765 ops/s
# Warmup Iteration   9: 3551760.204 ops/s
# Warmup Iteration  10: 3484509.292 ops/s
# Warmup Iteration  11: 3618690.977 ops/s
# Warmup Iteration  12: 3373803.584 ops/s
# Warmup Iteration  13: 3388065.760 ops/s
# Warmup Iteration  14: 3426889.983 ops/s
# Warmup Iteration  15: 3315082.564 ops/s
# Warmup Iteration  16: 3409242.371 ops/s
# Warmup Iteration  17: 3428814.876 ops/s
# Warmup Iteration  18: 3363932.309 ops/s
# Warmup Iteration  19: 3372282.436 ops/s
# Warmup Iteration  20: 3350523.793 ops/s
# Warmup Iteration  21: 3353606.728 ops/s
# Warmup Iteration  22: 3355540.688 ops/s
# Warmup Iteration  23: 3352998.938 ops/s
# Warmup Iteration  24: 3457887.069 ops/s
# Warmup Iteration  25: 3355927.568 ops/s
# Warmup Iteration  26: 3351263.461 ops/s
# Warmup Iteration  27: 3451301.741 ops/s
# Warmup Iteration  28: 3426435.852 ops/s
# Warmup Iteration  29: 3509099.424 ops/s
# Warmup Iteration  30: 3371428.729 ops/s
Iteration   1: 3428407.068 ops/s
Iteration   2: 3494616.935 ops/s
Iteration   3: 3489791.658 ops/s
Iteration   4: 3417986.378 ops/s
Iteration   5: 3341936.337 ops/s
Iteration   6: 3301772.292 ops/s
Iteration   7: 3431035.014 ops/s
Iteration   8: 3343849.656 ops/s
Iteration   9: 3395933.603 ops/s
Iteration  10: 3360572.664 ops/s
Iteration  11: 3336707.608 ops/s
Iteration  12: 3338920.156 ops/s
Iteration  13: 3321116.757 ops/s
Iteration  14: 3332629.641 ops/s
Iteration  15: 3334595.669 ops/s
Iteration  16: 3360720.079 ops/s
Iteration  17: 3453732.782 ops/s
Iteration  18: 3407303.482 ops/s
Iteration  19: 3525041.899 ops/s
Iteration  20: 3380203.031 ops/s
Iteration  21: 3338908.603 ops/s
Iteration  22: 3350349.638 ops/s
Iteration  23: 3332181.824 ops/s
Iteration  24: 3355270.791 ops/s
Iteration  25: 3348591.902 ops/s
Iteration  26: 3430825.108 ops/s
Iteration  27: 3354007.956 ops/s
Iteration  28: 3353615.325 ops/s
Iteration  29: 3320926.444 ops/s
Iteration  30: 3389505.872 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_selectWith_value":
  3379035.206 ±(99.9%) 38032.346 ops/s [Average]
  (min, avg, max) = (3301772.292, 3379035.206, 3525041.899), stdev = 56925.030
  CI (99.9%): [3341002.859, 3417067.552] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_selectWith_value  thrpt   30  3379035.206 ± 38032.346  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_select_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_select_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 905156.443 ops/s
# Warmup Iteration   2: 2371839.098 ops/s
# Warmup Iteration   3: 1974898.927 ops/s
# Warmup Iteration   4: 2283507.914 ops/s
# Warmup Iteration   5: 2372150.457 ops/s
# Warmup Iteration   6: 2315948.757 ops/s
# Warmup Iteration   7: 2317797.656 ops/s
# Warmup Iteration   8: 2396214.154 ops/s
# Warmup Iteration   9: 2387813.062 ops/s
# Warmup Iteration  10: 2401657.689 ops/s
# Warmup Iteration  11: 2433423.445 ops/s
# Warmup Iteration  12: 2366897.973 ops/s
# Warmup Iteration  13: 2313338.020 ops/s
# Warmup Iteration  14: 2357232.636 ops/s
# Warmup Iteration  15: 2428634.261 ops/s
# Warmup Iteration  16: 2412726.076 ops/s
# Warmup Iteration  17: 2343318.345 ops/s
# Warmup Iteration  18: 2364345.741 ops/s
# Warmup Iteration  19: 2331810.482 ops/s
# Warmup Iteration  20: 2359111.255 ops/s
# Warmup Iteration  21: 2337453.373 ops/s
# Warmup Iteration  22: 2322560.011 ops/s
# Warmup Iteration  23: 2397026.880 ops/s
# Warmup Iteration  24: 2317675.342 ops/s
# Warmup Iteration  25: 2331441.067 ops/s
# Warmup Iteration  26: 2387018.656 ops/s
# Warmup Iteration  27: 2422541.103 ops/s
# Warmup Iteration  28: 2420016.252 ops/s
# Warmup Iteration  29: 2355138.919 ops/s
# Warmup Iteration  30: 2342866.759 ops/s
Iteration   1: 2374563.611 ops/s
Iteration   2: 2428575.682 ops/s
Iteration   3: 2463494.024 ops/s
Iteration   4: 2349064.751 ops/s
Iteration   5: 2393309.421 ops/s
Iteration   6: 2365546.900 ops/s
Iteration   7: 2360958.721 ops/s
Iteration   8: 2433239.535 ops/s
Iteration   9: 2464542.756 ops/s
Iteration  10: 2436275.988 ops/s
Iteration  11: 2465141.869 ops/s
Iteration  12: 2377820.010 ops/s
Iteration  13: 2313924.392 ops/s
Iteration  14: 2330386.007 ops/s
Iteration  15: 2359400.092 ops/s
Iteration  16: 2452267.891 ops/s
Iteration  17: 2341167.585 ops/s
Iteration  18: 2394981.592 ops/s
Iteration  19: 2332966.736 ops/s
Iteration  20: 2314591.067 ops/s
Iteration  21: 2333413.694 ops/s
Iteration  22: 2351284.360 ops/s
Iteration  23: 2374334.703 ops/s
Iteration  24: 2335047.885 ops/s
Iteration  25: 2330506.968 ops/s
Iteration  26: 2372001.954 ops/s
Iteration  27: 2392563.913 ops/s
Iteration  28: 2338062.162 ops/s
Iteration  29: 2485730.674 ops/s
Iteration  30: 2566173.183 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_select_value":
  2387711.271 ±(99.9%) 40335.496 ops/s [Average]
  (min, avg, max) = (2313924.392, 2387711.271, 2566173.183), stdev = 60372.276
  CI (99.9%): [2347375.775, 2428046.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_select_value  thrpt   30  2387711.271 ± 40335.496  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 52990.165 ops/s
# Warmup Iteration   2: 72914.508 ops/s
# Warmup Iteration   3: 99855.581 ops/s
# Warmup Iteration   4: 99867.237 ops/s
# Warmup Iteration   5: 101144.512 ops/s
# Warmup Iteration   6: 102446.161 ops/s
# Warmup Iteration   7: 100155.909 ops/s
# Warmup Iteration   8: 91508.372 ops/s
# Warmup Iteration   9: 93459.703 ops/s
# Warmup Iteration  10: 101445.797 ops/s
# Warmup Iteration  11: 102077.474 ops/s
# Warmup Iteration  12: 101966.121 ops/s
# Warmup Iteration  13: 101890.042 ops/s
# Warmup Iteration  14: 102440.272 ops/s
# Warmup Iteration  15: 101552.403 ops/s
# Warmup Iteration  16: 98566.435 ops/s
# Warmup Iteration  17: 101394.332 ops/s
# Warmup Iteration  18: 98109.018 ops/s
# Warmup Iteration  19: 98194.811 ops/s
# Warmup Iteration  20: 98242.864 ops/s
# Warmup Iteration  21: 98331.307 ops/s
# Warmup Iteration  22: 99156.445 ops/s
# Warmup Iteration  23: 100820.730 ops/s
# Warmup Iteration  24: 98155.549 ops/s
# Warmup Iteration  25: 99007.099 ops/s
# Warmup Iteration  26: 98228.588 ops/s
# Warmup Iteration  27: 98293.165 ops/s
# Warmup Iteration  28: 98238.282 ops/s
# Warmup Iteration  29: 96672.600 ops/s
# Warmup Iteration  30: 97494.212 ops/s
Iteration   1: 100213.867 ops/s
Iteration   2: 97546.994 ops/s
Iteration   3: 97804.512 ops/s
Iteration   4: 98016.805 ops/s
Iteration   5: 98366.314 ops/s
Iteration   6: 98438.686 ops/s
Iteration   7: 97686.329 ops/s
Iteration   8: 98704.765 ops/s
Iteration   9: 97032.965 ops/s
Iteration  10: 100122.320 ops/s
Iteration  11: 97716.214 ops/s
Iteration  12: 97788.298 ops/s
Iteration  13: 97828.426 ops/s
Iteration  14: 98264.022 ops/s
Iteration  15: 100114.055 ops/s
Iteration  16: 97313.118 ops/s
Iteration  17: 100240.210 ops/s
Iteration  18: 98137.373 ops/s
Iteration  19: 98644.970 ops/s
Iteration  20: 95866.498 ops/s
Iteration  21: 96345.526 ops/s
Iteration  22: 97293.204 ops/s
Iteration  23: 96732.096 ops/s
Iteration  24: 97686.186 ops/s
Iteration  25: 97551.277 ops/s
Iteration  26: 96230.014 ops/s
Iteration  27: 97352.700 ops/s
Iteration  28: 96759.241 ops/s
Iteration  29: 101159.674 ops/s
Iteration  30: 100961.496 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_serialization":
  98130.605 ±(99.9%) 921.387 ops/s [Average]
  (min, avg, max) = (95866.498, 98130.605, 101159.674), stdev = 1379.088
  CI (99.9%): [97209.219, 99051.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt      Score     Error  Units
HashBiMapTest._Benchmark.benchmark_serialization  thrpt   30  98130.605 ± 921.387  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1393567.849 ops/s
# Warmup Iteration   2: 3389038.612 ops/s
# Warmup Iteration   3: 2795901.045 ops/s
# Warmup Iteration   4: 3251811.827 ops/s
# Warmup Iteration   5: 3298751.440 ops/s
# Warmup Iteration   6: 3287477.969 ops/s
# Warmup Iteration   7: 3320825.480 ops/s
# Warmup Iteration   8: 3422281.692 ops/s
# Warmup Iteration   9: 3288130.667 ops/s
# Warmup Iteration  10: 3309254.248 ops/s
# Warmup Iteration  11: 3252922.534 ops/s
# Warmup Iteration  12: 3296376.631 ops/s
# Warmup Iteration  13: 3254920.784 ops/s
# Warmup Iteration  14: 3292984.131 ops/s
# Warmup Iteration  15: 3287810.023 ops/s
# Warmup Iteration  16: 3267774.480 ops/s
# Warmup Iteration  17: 3322958.515 ops/s
# Warmup Iteration  18: 3312325.522 ops/s
# Warmup Iteration  19: 3237258.683 ops/s
# Warmup Iteration  20: 3499284.124 ops/s
# Warmup Iteration  21: 3531976.702 ops/s
# Warmup Iteration  22: 3446489.836 ops/s
# Warmup Iteration  23: 3325400.968 ops/s
# Warmup Iteration  24: 3276636.737 ops/s
# Warmup Iteration  25: 3380831.807 ops/s
# Warmup Iteration  26: 3284487.165 ops/s
# Warmup Iteration  27: 3254885.752 ops/s
# Warmup Iteration  28: 3235204.255 ops/s
# Warmup Iteration  29: 3216658.227 ops/s
# Warmup Iteration  30: 3275030.444 ops/s
Iteration   1: 3288655.656 ops/s
Iteration   2: 3214231.564 ops/s
Iteration   3: 3269378.250 ops/s
Iteration   4: 3209921.293 ops/s
Iteration   5: 3303617.423 ops/s
Iteration   6: 3292315.582 ops/s
Iteration   7: 3285846.948 ops/s
Iteration   8: 3243189.440 ops/s
Iteration   9: 3298822.552 ops/s
Iteration  10: 3287535.127 ops/s
Iteration  11: 3370818.969 ops/s
Iteration  12: 3254293.445 ops/s
Iteration  13: 3201077.138 ops/s
Iteration  14: 3306741.679 ops/s
Iteration  15: 3316084.981 ops/s
Iteration  16: 3332077.627 ops/s
Iteration  17: 3247832.534 ops/s
Iteration  18: 3389926.832 ops/s
Iteration  19: 3287923.717 ops/s
Iteration  20: 3244327.220 ops/s
Iteration  21: 3367702.957 ops/s
Iteration  22: 3297421.583 ops/s
Iteration  23: 3204537.238 ops/s
Iteration  24: 3342083.313 ops/s
Iteration  25: 3279547.467 ops/s
Iteration  26: 3244655.129 ops/s
Iteration  27: 3240561.148 ops/s
Iteration  28: 3275163.671 ops/s
Iteration  29: 3344757.340 ops/s
Iteration  30: 3372338.138 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_size":
  3287112.865 ±(99.9%) 34611.735 ops/s [Average]
  (min, avg, max) = (3201077.138, 3287112.865, 3389926.832), stdev = 51805.220
  CI (99.9%): [3252501.130, 3321724.601] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_size  thrpt   30  3287112.865 ± 34611.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623240.362 ops/s
# Warmup Iteration   2: 1335931.144 ops/s
# Warmup Iteration   3: 1380790.990 ops/s
# Warmup Iteration   4: 1339405.353 ops/s
# Warmup Iteration   5: 1162170.724 ops/s
# Warmup Iteration   6: 1417744.068 ops/s
# Warmup Iteration   7: 1463793.883 ops/s
# Warmup Iteration   8: 1397603.008 ops/s
# Warmup Iteration   9: 1443219.192 ops/s
# Warmup Iteration  10: 1457020.119 ops/s
# Warmup Iteration  11: 1395443.944 ops/s
# Warmup Iteration  12: 1385256.782 ops/s
# Warmup Iteration  13: 1403667.026 ops/s
# Warmup Iteration  14: 1401526.786 ops/s
# Warmup Iteration  15: 1395993.424 ops/s
# Warmup Iteration  16: 1397449.716 ops/s
# Warmup Iteration  17: 1390948.005 ops/s
# Warmup Iteration  18: 1447798.606 ops/s
# Warmup Iteration  19: 1460952.966 ops/s
# Warmup Iteration  20: 1414312.060 ops/s
# Warmup Iteration  21: 1408491.080 ops/s
# Warmup Iteration  22: 1427239.354 ops/s
# Warmup Iteration  23: 1404135.615 ops/s
# Warmup Iteration  24: 1396962.702 ops/s
# Warmup Iteration  25: 1381195.214 ops/s
# Warmup Iteration  26: 1385838.591 ops/s
# Warmup Iteration  27: 1375389.243 ops/s
# Warmup Iteration  28: 1400965.372 ops/s
# Warmup Iteration  29: 1394198.287 ops/s
# Warmup Iteration  30: 1423492.512 ops/s
Iteration   1: 1445257.780 ops/s
Iteration   2: 1403712.291 ops/s
Iteration   3: 1500200.892 ops/s
Iteration   4: 1401931.642 ops/s
Iteration   5: 1424434.731 ops/s
Iteration   6: 1380790.402 ops/s
Iteration   7: 1459935.379 ops/s
Iteration   8: 1394468.564 ops/s
Iteration   9: 1374708.742 ops/s
Iteration  10: 1366574.140 ops/s
Iteration  11: 1408168.954 ops/s
Iteration  12: 1383132.275 ops/s
Iteration  13: 1405889.021 ops/s
Iteration  14: 1397948.303 ops/s
Iteration  15: 1390511.909 ops/s
Iteration  16: 1389819.287 ops/s
Iteration  17: 1390584.676 ops/s
Iteration  18: 1530624.169 ops/s
Iteration  19: 1483202.184 ops/s
Iteration  20: 1369653.932 ops/s
Iteration  21: 1398831.330 ops/s
Iteration  22: 1373355.369 ops/s
Iteration  23: 1396698.549 ops/s
Iteration  24: 1396474.089 ops/s
Iteration  25: 1469455.517 ops/s
Iteration  26: 1434742.530 ops/s
Iteration  27: 1363826.949 ops/s
Iteration  28: 1391828.499 ops/s
Iteration  29: 1398829.642 ops/s
Iteration  30: 1398815.814 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_stream":
  1410813.585 ±(99.9%) 27369.366 ops/s [Average]
  (min, avg, max) = (1363826.949, 1410813.585, 1530624.169), stdev = 40965.182
  CI (99.9%): [1383444.219, 1438182.952] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_stream  thrpt   30  1410813.585 ± 27369.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 833481.840 ops/s
# Warmup Iteration   2: 1854868.626 ops/s
# Warmup Iteration   3: 1892702.924 ops/s
# Warmup Iteration   4: 1917575.423 ops/s
# Warmup Iteration   5: 1564483.271 ops/s
# Warmup Iteration   6: 1930383.926 ops/s
# Warmup Iteration   7: 2026898.533 ops/s
# Warmup Iteration   8: 1936122.569 ops/s
# Warmup Iteration   9: 2073890.989 ops/s
# Warmup Iteration  10: 2035239.452 ops/s
# Warmup Iteration  11: 2032373.962 ops/s
# Warmup Iteration  12: 2021066.073 ops/s
# Warmup Iteration  13: 2115951.289 ops/s
# Warmup Iteration  14: 1934440.854 ops/s
# Warmup Iteration  15: 1978063.553 ops/s
# Warmup Iteration  16: 1959789.780 ops/s
# Warmup Iteration  17: 2093202.447 ops/s
# Warmup Iteration  18: 1998936.562 ops/s
# Warmup Iteration  19: 2026030.950 ops/s
# Warmup Iteration  20: 1967764.202 ops/s
# Warmup Iteration  21: 1896316.776 ops/s
# Warmup Iteration  22: 1951171.464 ops/s
# Warmup Iteration  23: 1988581.542 ops/s
# Warmup Iteration  24: 1992959.826 ops/s
# Warmup Iteration  25: 1915420.545 ops/s
# Warmup Iteration  26: 1935846.702 ops/s
# Warmup Iteration  27: 1909050.133 ops/s
# Warmup Iteration  28: 1983255.285 ops/s
# Warmup Iteration  29: 1936209.158 ops/s
# Warmup Iteration  30: 1927553.314 ops/s
Iteration   1: 1915534.881 ops/s
Iteration   2: 1988761.819 ops/s
Iteration   3: 2020578.141 ops/s
Iteration   4: 1935258.355 ops/s
Iteration   5: 1988298.516 ops/s
Iteration   6: 1921360.370 ops/s
Iteration   7: 1919036.722 ops/s
Iteration   8: 1883027.721 ops/s
Iteration   9: 1876105.683 ops/s
Iteration  10: 1887819.427 ops/s
Iteration  11: 1915686.541 ops/s
Iteration  12: 1911813.374 ops/s
Iteration  13: 1960494.160 ops/s
Iteration  14: 1915068.157 ops/s
Iteration  15: 1899567.372 ops/s
Iteration  16: 1960032.302 ops/s
Iteration  17: 1978074.978 ops/s
Iteration  18: 1885757.136 ops/s
Iteration  19: 1887316.161 ops/s
Iteration  20: 1903897.126 ops/s
Iteration  21: 1914068.252 ops/s
Iteration  22: 1930078.815 ops/s
Iteration  23: 1898678.450 ops/s
Iteration  24: 1911028.211 ops/s
Iteration  25: 1913618.701 ops/s
Iteration  26: 1926301.627 ops/s
Iteration  27: 1930955.174 ops/s
Iteration  28: 1925667.774 ops/s
Iteration  29: 1926273.633 ops/s
Iteration  30: 1902710.473 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumByDouble":
  1924429.002 ±(99.9%) 23007.529 ops/s [Average]
  (min, avg, max) = (1876105.683, 1924429.002, 2020578.141), stdev = 34436.590
  CI (99.9%): [1901421.472, 1947436.531] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_sumByDouble  thrpt   30  1924429.002 ± 23007.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 822614.009 ops/s
# Warmup Iteration   2: 1669705.042 ops/s
# Warmup Iteration   3: 1869596.130 ops/s
# Warmup Iteration   4: 1876913.059 ops/s
# Warmup Iteration   5: 1494194.848 ops/s
# Warmup Iteration   6: 1930394.935 ops/s
# Warmup Iteration   7: 1893137.935 ops/s
# Warmup Iteration   8: 1889649.038 ops/s
# Warmup Iteration   9: 1876921.920 ops/s
# Warmup Iteration  10: 1838905.829 ops/s
# Warmup Iteration  11: 1847819.348 ops/s
# Warmup Iteration  12: 1876790.200 ops/s
# Warmup Iteration  13: 1871420.916 ops/s
# Warmup Iteration  14: 1880223.813 ops/s
# Warmup Iteration  15: 1838463.363 ops/s
# Warmup Iteration  16: 1857634.587 ops/s
# Warmup Iteration  17: 1820992.822 ops/s
# Warmup Iteration  18: 1846358.467 ops/s
# Warmup Iteration  19: 1828923.128 ops/s
# Warmup Iteration  20: 1837642.080 ops/s
# Warmup Iteration  21: 1927282.748 ops/s
# Warmup Iteration  22: 1884815.873 ops/s
# Warmup Iteration  23: 1865142.562 ops/s
# Warmup Iteration  24: 1903865.637 ops/s
# Warmup Iteration  25: 1878125.469 ops/s
# Warmup Iteration  26: 1886727.782 ops/s
# Warmup Iteration  27: 1917794.829 ops/s
# Warmup Iteration  28: 1900217.902 ops/s
# Warmup Iteration  29: 1874006.648 ops/s
# Warmup Iteration  30: 1826730.089 ops/s
Iteration   1: 1841244.836 ops/s
Iteration   2: 1842162.965 ops/s
Iteration   3: 1878532.406 ops/s
Iteration   4: 1847274.444 ops/s
Iteration   5: 1859118.095 ops/s
Iteration   6: 1846987.510 ops/s
Iteration   7: 1918733.654 ops/s
Iteration   8: 1866971.687 ops/s
Iteration   9: 1843767.422 ops/s
Iteration  10: 1832046.189 ops/s
Iteration  11: 1872340.143 ops/s
Iteration  12: 1889075.545 ops/s
Iteration  13: 1845442.136 ops/s
Iteration  14: 1854863.828 ops/s
Iteration  15: 1938414.154 ops/s
Iteration  16: 1905917.692 ops/s
Iteration  17: 1872936.391 ops/s
Iteration  18: 1839020.845 ops/s
Iteration  19: 1858528.030 ops/s
Iteration  20: 1880793.478 ops/s
Iteration  21: 1873890.426 ops/s
Iteration  22: 1848578.151 ops/s
Iteration  23: 1846878.283 ops/s
Iteration  24: 1839009.207 ops/s
Iteration  25: 1852512.157 ops/s
Iteration  26: 1854446.798 ops/s
Iteration  27: 1866797.954 ops/s
Iteration  28: 1873572.663 ops/s
Iteration  29: 1844856.306 ops/s
Iteration  30: 1825860.981 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumByFloat":
  1862019.146 ±(99.9%) 17078.634 ops/s [Average]
  (min, avg, max) = (1825860.981, 1862019.146, 1938414.154), stdev = 25562.497
  CI (99.9%): [1844940.512, 1879097.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_sumByFloat  thrpt   30  1862019.146 ± 17078.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1226992.180 ops/s
# Warmup Iteration   2: 2650543.648 ops/s
# Warmup Iteration   3: 2848902.639 ops/s
# Warmup Iteration   4: 2787893.807 ops/s
# Warmup Iteration   5: 2390797.918 ops/s
# Warmup Iteration   6: 2910936.389 ops/s
# Warmup Iteration   7: 2837746.470 ops/s
# Warmup Iteration   8: 2917403.415 ops/s
# Warmup Iteration   9: 2949091.764 ops/s
# Warmup Iteration  10: 2910947.456 ops/s
# Warmup Iteration  11: 2999150.188 ops/s
# Warmup Iteration  12: 2952398.639 ops/s
# Warmup Iteration  13: 3044948.701 ops/s
# Warmup Iteration  14: 2951716.501 ops/s
# Warmup Iteration  15: 2915903.283 ops/s
# Warmup Iteration  16: 2865342.823 ops/s
# Warmup Iteration  17: 2889401.041 ops/s
# Warmup Iteration  18: 2880717.218 ops/s
# Warmup Iteration  19: 2869736.287 ops/s
# Warmup Iteration  20: 2912267.409 ops/s
# Warmup Iteration  21: 2937045.875 ops/s
# Warmup Iteration  22: 2876814.092 ops/s
# Warmup Iteration  23: 2872159.913 ops/s
# Warmup Iteration  24: 2842950.883 ops/s
# Warmup Iteration  25: 2933393.145 ops/s
# Warmup Iteration  26: 2867157.113 ops/s
# Warmup Iteration  27: 2866783.895 ops/s
# Warmup Iteration  28: 2887857.987 ops/s
# Warmup Iteration  29: 2843068.973 ops/s
# Warmup Iteration  30: 2884605.693 ops/s
Iteration   1: 2888181.721 ops/s
Iteration   2: 2833474.382 ops/s
Iteration   3: 2880611.557 ops/s
Iteration   4: 2850592.161 ops/s
Iteration   5: 2878152.515 ops/s
Iteration   6: 2864289.073 ops/s
Iteration   7: 2977828.976 ops/s
Iteration   8: 2844708.641 ops/s
Iteration   9: 2915265.110 ops/s
Iteration  10: 2890783.107 ops/s
Iteration  11: 2900658.952 ops/s
Iteration  12: 2909564.474 ops/s
Iteration  13: 2851279.381 ops/s
Iteration  14: 3002741.538 ops/s
Iteration  15: 2986250.558 ops/s
Iteration  16: 2868575.544 ops/s
Iteration  17: 2900852.074 ops/s
Iteration  18: 2990952.325 ops/s
Iteration  19: 2954735.601 ops/s
Iteration  20: 2993278.803 ops/s
Iteration  21: 2987892.709 ops/s
Iteration  22: 2866441.015 ops/s
Iteration  23: 2947189.701 ops/s
Iteration  24: 2952929.378 ops/s
Iteration  25: 3044268.626 ops/s
Iteration  26: 3031226.793 ops/s
Iteration  27: 2942142.502 ops/s
Iteration  28: 2950568.413 ops/s
Iteration  29: 3064786.725 ops/s
Iteration  30: 3075347.983 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumByInt":
  2934852.345 ±(99.9%) 46037.020 ops/s [Average]
  (min, avg, max) = (2833474.382, 2934852.345, 3075347.983), stdev = 68906.050
  CI (99.9%): [2888815.325, 2980889.365] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_sumByInt  thrpt   30  2934852.345 ± 46037.020  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1335348.543 ops/s
# Warmup Iteration   2: 3075131.468 ops/s
# Warmup Iteration   3: 3055487.838 ops/s
# Warmup Iteration   4: 2608435.053 ops/s
# Warmup Iteration   5: 3095184.733 ops/s
# Warmup Iteration   6: 3334047.114 ops/s
# Warmup Iteration   7: 3280301.124 ops/s
# Warmup Iteration   8: 3163233.933 ops/s
# Warmup Iteration   9: 3308529.129 ops/s
# Warmup Iteration  10: 3288134.480 ops/s
# Warmup Iteration  11: 3075440.288 ops/s
# Warmup Iteration  12: 3067590.250 ops/s
# Warmup Iteration  13: 3101055.169 ops/s
# Warmup Iteration  14: 3074737.003 ops/s
# Warmup Iteration  15: 3116418.723 ops/s
# Warmup Iteration  16: 3329633.267 ops/s
# Warmup Iteration  17: 3300382.962 ops/s
# Warmup Iteration  18: 3255092.463 ops/s
# Warmup Iteration  19: 3286832.767 ops/s
# Warmup Iteration  20: 3154154.709 ops/s
# Warmup Iteration  21: 3114824.737 ops/s
# Warmup Iteration  22: 3221461.270 ops/s
# Warmup Iteration  23: 3209565.122 ops/s
# Warmup Iteration  24: 3122607.171 ops/s
# Warmup Iteration  25: 3240184.340 ops/s
# Warmup Iteration  26: 3236939.622 ops/s
# Warmup Iteration  27: 3304599.407 ops/s
# Warmup Iteration  28: 3164490.365 ops/s
# Warmup Iteration  29: 3158102.043 ops/s
# Warmup Iteration  30: 3381863.888 ops/s
Iteration   1: 3368513.114 ops/s
Iteration   2: 3296770.632 ops/s
Iteration   3: 3382894.302 ops/s
Iteration   4: 3187442.969 ops/s
Iteration   5: 3109734.012 ops/s
Iteration   6: 3088054.748 ops/s
Iteration   7: 3103337.407 ops/s
Iteration   8: 3064119.343 ops/s
Iteration   9: 3167687.231 ops/s
Iteration  10: 3145636.135 ops/s
Iteration  11: 3163181.271 ops/s
Iteration  12: 3083646.542 ops/s
Iteration  13: 3054868.246 ops/s
Iteration  14: 3231868.255 ops/s
Iteration  15: 3262220.949 ops/s
Iteration  16: 3377053.905 ops/s
Iteration  17: 3290995.220 ops/s
Iteration  18: 3207056.438 ops/s
Iteration  19: 3242771.948 ops/s
Iteration  20: 3383325.182 ops/s
Iteration  21: 3276043.813 ops/s
Iteration  22: 3212158.497 ops/s
Iteration  23: 3123145.716 ops/s
Iteration  24: 3249267.316 ops/s
Iteration  25: 3113024.693 ops/s
Iteration  26: 3123672.186 ops/s
Iteration  27: 3336671.941 ops/s
Iteration  28: 3290849.162 ops/s
Iteration  29: 3254638.377 ops/s
Iteration  30: 3203864.432 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumByLong":
  3213150.466 ±(99.9%) 67065.984 ops/s [Average]
  (min, avg, max) = (3054868.246, 3213150.466, 3383325.182), stdev = 100381.215
  CI (99.9%): [3146084.482, 3280216.450] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_sumByLong  thrpt   30  3213150.466 ± 67065.984  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumOfDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumOfDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2453202.630 ops/s
# Warmup Iteration   2: 4667164.506 ops/s
# Warmup Iteration   3: 4550809.912 ops/s
# Warmup Iteration   4: 4049262.986 ops/s
# Warmup Iteration   5: 4611511.937 ops/s
# Warmup Iteration   6: 4643203.864 ops/s
# Warmup Iteration   7: 4734745.606 ops/s
# Warmup Iteration   8: 4635134.644 ops/s
# Warmup Iteration   9: 4628532.206 ops/s
# Warmup Iteration  10: 4702961.708 ops/s
# Warmup Iteration  11: 4621087.680 ops/s
# Warmup Iteration  12: 4667105.226 ops/s
# Warmup Iteration  13: 4603847.920 ops/s
# Warmup Iteration  14: 4580357.368 ops/s
# Warmup Iteration  15: 4564153.616 ops/s
# Warmup Iteration  16: 4473191.489 ops/s
# Warmup Iteration  17: 4946275.994 ops/s
# Warmup Iteration  18: 4663567.359 ops/s
# Warmup Iteration  19: 4812855.276 ops/s
# Warmup Iteration  20: 4926779.683 ops/s
# Warmup Iteration  21: 4939737.890 ops/s
# Warmup Iteration  22: 4938846.644 ops/s
# Warmup Iteration  23: 4632966.689 ops/s
# Warmup Iteration  24: 4684755.475 ops/s
# Warmup Iteration  25: 4878612.337 ops/s
# Warmup Iteration  26: 4635824.189 ops/s
# Warmup Iteration  27: 4875243.806 ops/s
# Warmup Iteration  28: 4599305.481 ops/s
# Warmup Iteration  29: 4563347.634 ops/s
# Warmup Iteration  30: 4526218.267 ops/s
Iteration   1: 4530915.881 ops/s
Iteration   2: 4624263.136 ops/s
Iteration   3: 4576483.726 ops/s
Iteration   4: 4663400.958 ops/s
Iteration   5: 4817937.154 ops/s
Iteration   6: 4960665.327 ops/s
Iteration   7: 4910969.137 ops/s
Iteration   8: 4911262.008 ops/s
Iteration   9: 4826748.432 ops/s
Iteration  10: 4685016.184 ops/s
Iteration  11: 4528005.435 ops/s
Iteration  12: 4589764.736 ops/s
Iteration  13: 4647573.603 ops/s
Iteration  14: 4609728.166 ops/s
Iteration  15: 4634756.706 ops/s
Iteration  16: 4658803.932 ops/s
Iteration  17: 4761607.509 ops/s
Iteration  18: 4798473.718 ops/s
Iteration  19: 4742872.013 ops/s
Iteration  20: 4798246.353 ops/s
Iteration  21: 4713220.239 ops/s
Iteration  22: 4555127.809 ops/s
Iteration  23: 4632689.164 ops/s
Iteration  24: 4696520.957 ops/s
Iteration  25: 4635400.001 ops/s
Iteration  26: 4797140.896 ops/s
Iteration  27: 4668710.404 ops/s
Iteration  28: 4512615.042 ops/s
Iteration  29: 4548375.715 ops/s
Iteration  30: 4602597.353 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumOfDouble":
  4687996.390 ±(99.9%) 80912.762 ops/s [Average]
  (min, avg, max) = (4512615.042, 4687996.390, 4960665.327), stdev = 121106.422
  CI (99.9%): [4607083.628, 4768909.151] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_sumOfDouble  thrpt   30  4687996.390 ± 80912.762  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumOfFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumOfFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2051785.003 ops/s
# Warmup Iteration   2: 4323068.070 ops/s
# Warmup Iteration   3: 4305098.297 ops/s
# Warmup Iteration   4: 3725202.935 ops/s
# Warmup Iteration   5: 4436584.406 ops/s
# Warmup Iteration   6: 4492006.378 ops/s
# Warmup Iteration   7: 4353411.420 ops/s
# Warmup Iteration   8: 4313407.462 ops/s
# Warmup Iteration   9: 4424719.800 ops/s
# Warmup Iteration  10: 4489567.241 ops/s
# Warmup Iteration  11: 4435861.450 ops/s
# Warmup Iteration  12: 4368595.953 ops/s
# Warmup Iteration  13: 4248407.913 ops/s
# Warmup Iteration  14: 4250196.269 ops/s
# Warmup Iteration  15: 4486369.812 ops/s
# Warmup Iteration  16: 4259483.900 ops/s
# Warmup Iteration  17: 4250668.057 ops/s
# Warmup Iteration  18: 4245072.004 ops/s
# Warmup Iteration  19: 4321270.062 ops/s
# Warmup Iteration  20: 4321868.570 ops/s
# Warmup Iteration  21: 4295291.928 ops/s
# Warmup Iteration  22: 4328460.922 ops/s
# Warmup Iteration  23: 4225466.917 ops/s
# Warmup Iteration  24: 4402283.642 ops/s
# Warmup Iteration  25: 4496118.025 ops/s
# Warmup Iteration  26: 4429213.276 ops/s
# Warmup Iteration  27: 4344062.517 ops/s
# Warmup Iteration  28: 4389775.899 ops/s
# Warmup Iteration  29: 4379382.631 ops/s
# Warmup Iteration  30: 4134597.960 ops/s
Iteration   1: 4344169.154 ops/s
Iteration   2: 4292975.213 ops/s
Iteration   3: 4310763.299 ops/s
Iteration   4: 4231809.179 ops/s
Iteration   5: 4270462.500 ops/s
Iteration   6: 4317349.812 ops/s
Iteration   7: 4226366.918 ops/s
Iteration   8: 4328021.851 ops/s
Iteration   9: 4255508.980 ops/s
Iteration  10: 4277960.408 ops/s
Iteration  11: 4324758.995 ops/s
Iteration  12: 4336622.014 ops/s
Iteration  13: 4222245.508 ops/s
Iteration  14: 4463998.497 ops/s
Iteration  15: 4245933.155 ops/s
Iteration  16: 4283209.917 ops/s
Iteration  17: 4386840.872 ops/s
Iteration  18: 4170499.706 ops/s
Iteration  19: 4235673.895 ops/s
Iteration  20: 4293429.205 ops/s
Iteration  21: 4295290.227 ops/s
Iteration  22: 4321904.854 ops/s
Iteration  23: 4305798.494 ops/s
Iteration  24: 4296124.568 ops/s
Iteration  25: 4111234.137 ops/s
Iteration  26: 4255019.635 ops/s
Iteration  27: 4239205.154 ops/s
Iteration  28: 4230480.964 ops/s
Iteration  29: 4418610.484 ops/s
Iteration  30: 4334153.841 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumOfFloat":
  4287547.381 ±(99.9%) 46507.723 ops/s [Average]
  (min, avg, max) = (4111234.137, 4287547.381, 4463998.497), stdev = 69610.575
  CI (99.9%): [4241039.659, 4334055.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_sumOfFloat  thrpt   30  4287547.381 ± 46507.723  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumOfInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumOfInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2069089.252 ops/s
# Warmup Iteration   2: 4418360.743 ops/s
# Warmup Iteration   3: 4442622.419 ops/s
# Warmup Iteration   4: 3743451.070 ops/s
# Warmup Iteration   5: 4496324.194 ops/s
# Warmup Iteration   6: 4416806.128 ops/s
# Warmup Iteration   7: 4575179.780 ops/s
# Warmup Iteration   8: 4534001.634 ops/s
# Warmup Iteration   9: 4548208.029 ops/s
# Warmup Iteration  10: 4425760.026 ops/s
# Warmup Iteration  11: 4602848.449 ops/s
# Warmup Iteration  12: 4584096.419 ops/s
# Warmup Iteration  13: 4663437.481 ops/s
# Warmup Iteration  14: 4640432.370 ops/s
# Warmup Iteration  15: 4727904.087 ops/s
# Warmup Iteration  16: 4664860.693 ops/s
# Warmup Iteration  17: 4396684.092 ops/s
# Warmup Iteration  18: 4385238.275 ops/s
# Warmup Iteration  19: 4765545.564 ops/s
# Warmup Iteration  20: 4849792.905 ops/s
# Warmup Iteration  21: 4471384.538 ops/s
# Warmup Iteration  22: 4455923.514 ops/s
# Warmup Iteration  23: 4426956.711 ops/s
# Warmup Iteration  24: 4478051.261 ops/s
# Warmup Iteration  25: 4571160.757 ops/s
# Warmup Iteration  26: 4479409.702 ops/s
# Warmup Iteration  27: 4526671.203 ops/s
# Warmup Iteration  28: 4551934.435 ops/s
# Warmup Iteration  29: 4573068.976 ops/s
# Warmup Iteration  30: 4606808.750 ops/s
Iteration   1: 4670036.319 ops/s
Iteration   2: 4856783.322 ops/s
Iteration   3: 4458934.583 ops/s
Iteration   4: 4656125.836 ops/s
Iteration   5: 4718070.890 ops/s
Iteration   6: 4693813.245 ops/s
Iteration   7: 4392565.236 ops/s
Iteration   8: 4630242.360 ops/s
Iteration   9: 4708936.013 ops/s
Iteration  10: 4901467.507 ops/s
Iteration  11: 4872839.507 ops/s
Iteration  12: 4909885.252 ops/s
Iteration  13: 4771660.358 ops/s
Iteration  14: 4846290.015 ops/s
Iteration  15: 4665552.935 ops/s
Iteration  16: 4539773.196 ops/s
Iteration  17: 4386484.534 ops/s
Iteration  18: 4642094.764 ops/s
Iteration  19: 4784696.620 ops/s
Iteration  20: 4634553.996 ops/s
Iteration  21: 4531194.696 ops/s
Iteration  22: 4723390.193 ops/s
Iteration  23: 4661294.369 ops/s
Iteration  24: 4664387.245 ops/s
Iteration  25: 4474934.817 ops/s
Iteration  26: 4374968.557 ops/s
Iteration  27: 4171837.502 ops/s
Iteration  28: 4625140.913 ops/s
Iteration  29: 4430004.693 ops/s
Iteration  30: 4578120.062 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumOfInt":
  4632535.985 ±(99.9%) 117058.430 ops/s [Average]
  (min, avg, max) = (4171837.502, 4632535.985, 4909885.252), stdev = 175207.560
  CI (99.9%): [4515477.555, 4749594.414] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score        Error  Units
HashBiMapTest._Benchmark.benchmark_sumOfInt  thrpt   30  4632535.985 ± 117058.430  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumOfLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumOfLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2009804.788 ops/s
# Warmup Iteration   2: 4893913.799 ops/s
# Warmup Iteration   3: 4775294.865 ops/s
# Warmup Iteration   4: 4252589.463 ops/s
# Warmup Iteration   5: 4876416.444 ops/s
# Warmup Iteration   6: 4949213.300 ops/s
# Warmup Iteration   7: 4859356.176 ops/s
# Warmup Iteration   8: 5070845.455 ops/s
# Warmup Iteration   9: 4784948.075 ops/s
# Warmup Iteration  10: 4746346.174 ops/s
# Warmup Iteration  11: 5090477.757 ops/s
# Warmup Iteration  12: 4743300.017 ops/s
# Warmup Iteration  13: 4680827.880 ops/s
# Warmup Iteration  14: 4712339.724 ops/s
# Warmup Iteration  15: 4717291.508 ops/s
# Warmup Iteration  16: 4756557.689 ops/s
# Warmup Iteration  17: 4731492.691 ops/s
# Warmup Iteration  18: 4738629.813 ops/s
# Warmup Iteration  19: 4796840.264 ops/s
# Warmup Iteration  20: 4833359.737 ops/s
# Warmup Iteration  21: 4704671.252 ops/s
# Warmup Iteration  22: 4714537.397 ops/s
# Warmup Iteration  23: 4703114.110 ops/s
# Warmup Iteration  24: 4705878.311 ops/s
# Warmup Iteration  25: 4802505.140 ops/s
# Warmup Iteration  26: 4998137.109 ops/s
# Warmup Iteration  27: 4758440.294 ops/s
# Warmup Iteration  28: 4688924.672 ops/s
# Warmup Iteration  29: 4774710.570 ops/s
# Warmup Iteration  30: 4833087.269 ops/s
Iteration   1: 4726696.100 ops/s
Iteration   2: 4919138.475 ops/s
Iteration   3: 4744477.022 ops/s
Iteration   4: 4929320.945 ops/s
Iteration   5: 4861338.463 ops/s
Iteration   6: 4817589.386 ops/s
Iteration   7: 4752383.045 ops/s
Iteration   8: 4891727.953 ops/s
Iteration   9: 4937652.849 ops/s
Iteration  10: 4910566.586 ops/s
Iteration  11: 4906822.098 ops/s
Iteration  12: 4816212.259 ops/s
Iteration  13: 4735672.396 ops/s
Iteration  14: 4860501.002 ops/s
Iteration  15: 4710132.251 ops/s
Iteration  16: 4687536.642 ops/s
Iteration  17: 4629921.489 ops/s
Iteration  18: 4686805.653 ops/s
Iteration  19: 4825356.934 ops/s
Iteration  20: 4677351.762 ops/s
Iteration  21: 4777413.150 ops/s
Iteration  22: 4725095.550 ops/s
Iteration  23: 4798665.362 ops/s
Iteration  24: 4750594.036 ops/s
Iteration  25: 4746864.102 ops/s
Iteration  26: 4747137.201 ops/s
Iteration  27: 4714874.335 ops/s
Iteration  28: 4796510.610 ops/s
Iteration  29: 5031252.188 ops/s
Iteration  30: 4647634.630 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_sumOfLong":
  4792108.149 ±(99.9%) 65553.844 ops/s [Average]
  (min, avg, max) = (4629921.489, 4792108.149, 5031252.188), stdev = 98117.915
  CI (99.9%): [4726554.305, 4857661.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_sumOfLong  thrpt   30  4792108.149 ± 65553.844  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1335128.818 ops/s
# Warmup Iteration   2: 3026428.706 ops/s
# Warmup Iteration   3: 3059182.282 ops/s
# Warmup Iteration   4: 2548687.920 ops/s
# Warmup Iteration   5: 3088495.184 ops/s
# Warmup Iteration   6: 3157888.864 ops/s
# Warmup Iteration   7: 3110592.892 ops/s
# Warmup Iteration   8: 3096188.382 ops/s
# Warmup Iteration   9: 3047344.863 ops/s
# Warmup Iteration  10: 3089394.917 ops/s
# Warmup Iteration  11: 3062328.376 ops/s
# Warmup Iteration  12: 3074738.099 ops/s
# Warmup Iteration  13: 3044484.343 ops/s
# Warmup Iteration  14: 3124389.886 ops/s
# Warmup Iteration  15: 3025204.433 ops/s
# Warmup Iteration  16: 3100450.905 ops/s
# Warmup Iteration  17: 3017364.020 ops/s
# Warmup Iteration  18: 3118864.432 ops/s
# Warmup Iteration  19: 3189124.767 ops/s
# Warmup Iteration  20: 3024350.926 ops/s
# Warmup Iteration  21: 3074844.701 ops/s
# Warmup Iteration  22: 3010059.132 ops/s
# Warmup Iteration  23: 3000391.294 ops/s
# Warmup Iteration  24: 3099655.195 ops/s
# Warmup Iteration  25: 3122942.066 ops/s
# Warmup Iteration  26: 3136431.263 ops/s
# Warmup Iteration  27: 3066696.286 ops/s
# Warmup Iteration  28: 3087088.240 ops/s
# Warmup Iteration  29: 3053576.291 ops/s
# Warmup Iteration  30: 3011178.322 ops/s
Iteration   1: 3041056.683 ops/s
Iteration   2: 3062883.205 ops/s
Iteration   3: 3180259.223 ops/s
Iteration   4: 3049091.570 ops/s
Iteration   5: 3138095.655 ops/s
Iteration   6: 3228184.837 ops/s
Iteration   7: 3034183.677 ops/s
Iteration   8: 3254305.619 ops/s
Iteration   9: 3322008.818 ops/s
Iteration  10: 3185551.429 ops/s
Iteration  11: 3143665.775 ops/s
Iteration  12: 3061487.515 ops/s
Iteration  13: 3128087.716 ops/s
Iteration  14: 3088395.815 ops/s
Iteration  15: 3172563.515 ops/s
Iteration  16: 2994722.642 ops/s
Iteration  17: 3317421.581 ops/s
Iteration  18: 3291103.470 ops/s
Iteration  19: 3066529.026 ops/s
Iteration  20: 3043622.383 ops/s
Iteration  21: 3043819.369 ops/s
Iteration  22: 3011577.558 ops/s
Iteration  23: 3116516.166 ops/s
Iteration  24: 3035826.471 ops/s
Iteration  25: 3144665.848 ops/s
Iteration  26: 3062123.758 ops/s
Iteration  27: 3026143.486 ops/s
Iteration  28: 3104458.912 ops/s
Iteration  29: 3089539.354 ops/s
Iteration  30: 2940100.584 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_tap":
  3112599.722 ±(99.9%) 64520.627 ops/s [Average]
  (min, avg, max) = (2940100.584, 3112599.722, 3322008.818), stdev = 96571.445
  CI (99.9%): [3048079.095, 3177120.349] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_tap  thrpt   30  3112599.722 ± 64520.627  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testAggregateBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testAggregateBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 975516.180 ops/s
# Warmup Iteration   2: 1679245.370 ops/s
# Warmup Iteration   3: 1935500.730 ops/s
# Warmup Iteration   4: 1972978.229 ops/s
# Warmup Iteration   5: 1883980.609 ops/s
# Warmup Iteration   6: 1603277.579 ops/s
# Warmup Iteration   7: 1913204.601 ops/s
# Warmup Iteration   8: 1872241.532 ops/s
# Warmup Iteration   9: 1905021.620 ops/s
# Warmup Iteration  10: 1863929.738 ops/s
# Warmup Iteration  11: 1851195.693 ops/s
# Warmup Iteration  12: 1883972.699 ops/s
# Warmup Iteration  13: 1845676.213 ops/s
# Warmup Iteration  14: 1871627.580 ops/s
# Warmup Iteration  15: 1866543.688 ops/s
# Warmup Iteration  16: 1839278.361 ops/s
# Warmup Iteration  17: 1949134.487 ops/s
# Warmup Iteration  18: 1871974.308 ops/s
# Warmup Iteration  19: 1860569.006 ops/s
# Warmup Iteration  20: 1850345.804 ops/s
# Warmup Iteration  21: 1869171.227 ops/s
# Warmup Iteration  22: 1860184.525 ops/s
# Warmup Iteration  23: 1850755.481 ops/s
# Warmup Iteration  24: 1946863.479 ops/s
# Warmup Iteration  25: 1867783.758 ops/s
# Warmup Iteration  26: 1882989.165 ops/s
# Warmup Iteration  27: 1898444.732 ops/s
# Warmup Iteration  28: 1834500.288 ops/s
# Warmup Iteration  29: 1888115.456 ops/s
# Warmup Iteration  30: 1853662.945 ops/s
Iteration   1: 1845705.938 ops/s
Iteration   2: 1884955.884 ops/s
Iteration   3: 1876703.645 ops/s
Iteration   4: 1859517.843 ops/s
Iteration   5: 1876917.725 ops/s
Iteration   6: 1853455.430 ops/s
Iteration   7: 1920702.917 ops/s
Iteration   8: 1896211.492 ops/s
Iteration   9: 1860448.217 ops/s
Iteration  10: 1876556.470 ops/s
Iteration  11: 1799528.167 ops/s
Iteration  12: 1870006.240 ops/s
Iteration  13: 1855961.585 ops/s
Iteration  14: 1848438.770 ops/s
Iteration  15: 1890263.021 ops/s
Iteration  16: 1838713.146 ops/s
Iteration  17: 1877829.306 ops/s
Iteration  18: 1870073.069 ops/s
Iteration  19: 1879070.852 ops/s
Iteration  20: 1879461.491 ops/s
Iteration  21: 1866029.839 ops/s
Iteration  22: 1887716.193 ops/s
Iteration  23: 1856072.228 ops/s
Iteration  24: 1871555.058 ops/s
Iteration  25: 1858147.862 ops/s
Iteration  26: 1822325.371 ops/s
Iteration  27: 1858021.804 ops/s
Iteration  28: 1867274.868 ops/s
Iteration  29: 1844224.925 ops/s
Iteration  30: 1874633.747 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testAggregateBy":
  1865550.770 ±(99.9%) 15253.169 ops/s [Average]
  (min, avg, max) = (1799528.167, 1865550.770, 1920702.917), stdev = 22830.227
  CI (99.9%): [1850297.601, 1880803.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_testAggregateBy  thrpt   30  1865550.770 ± 15253.169  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 671686.476 ops/s
# Warmup Iteration   2: 1573305.244 ops/s
# Warmup Iteration   3: 1616950.223 ops/s
# Warmup Iteration   4: 1337098.228 ops/s
# Warmup Iteration   5: 1564611.241 ops/s
# Warmup Iteration   6: 1581843.719 ops/s
# Warmup Iteration   7: 1567239.041 ops/s
# Warmup Iteration   8: 1613348.889 ops/s
# Warmup Iteration   9: 1583579.935 ops/s
# Warmup Iteration  10: 1567651.945 ops/s
# Warmup Iteration  11: 1550335.496 ops/s
# Warmup Iteration  12: 1552639.662 ops/s
# Warmup Iteration  13: 1561128.558 ops/s
# Warmup Iteration  14: 1560200.049 ops/s
# Warmup Iteration  15: 1556729.697 ops/s
# Warmup Iteration  16: 1582767.100 ops/s
# Warmup Iteration  17: 1572955.485 ops/s
# Warmup Iteration  18: 1562623.514 ops/s
# Warmup Iteration  19: 1567594.145 ops/s
# Warmup Iteration  20: 1550973.249 ops/s
# Warmup Iteration  21: 1579865.353 ops/s
# Warmup Iteration  22: 1615786.602 ops/s
# Warmup Iteration  23: 1562798.366 ops/s
# Warmup Iteration  24: 1631470.062 ops/s
# Warmup Iteration  25: 1576065.599 ops/s
# Warmup Iteration  26: 1637807.790 ops/s
# Warmup Iteration  27: 1619070.620 ops/s
# Warmup Iteration  28: 1592670.032 ops/s
# Warmup Iteration  29: 1589023.731 ops/s
# Warmup Iteration  30: 1601982.883 ops/s
Iteration   1: 1583330.454 ops/s
Iteration   2: 1553617.964 ops/s
Iteration   3: 1600970.314 ops/s
Iteration   4: 1576445.994 ops/s
Iteration   5: 1560606.214 ops/s
Iteration   6: 1629993.721 ops/s
Iteration   7: 1699242.351 ops/s
Iteration   8: 1689537.833 ops/s
Iteration   9: 1670220.702 ops/s
Iteration  10: 1562430.023 ops/s
Iteration  11: 1666658.515 ops/s
Iteration  12: 1669040.529 ops/s
Iteration  13: 1634478.254 ops/s
Iteration  14: 1626134.528 ops/s
Iteration  15: 1592935.412 ops/s
Iteration  16: 1522731.694 ops/s
Iteration  17: 1577639.282 ops/s
Iteration  18: 1580901.835 ops/s
Iteration  19: 1585080.508 ops/s
Iteration  20: 1665081.768 ops/s
Iteration  21: 1588478.538 ops/s
Iteration  22: 1620277.019 ops/s
Iteration  23: 1569973.368 ops/s
Iteration  24: 1540424.439 ops/s
Iteration  25: 1548349.721 ops/s
Iteration  26: 1577411.585 ops/s
Iteration  27: 1599897.202 ops/s
Iteration  28: 1569374.776 ops/s
Iteration  29: 1545951.352 ops/s
Iteration  30: 1505800.939 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testClone":
  1597100.561 ±(99.9%) 33456.995 ops/s [Average]
  (min, avg, max) = (1505800.939, 1597100.561, 1699242.351), stdev = 50076.859
  CI (99.9%): [1563643.566, 1630557.556] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_testClone  thrpt   30  1597100.561 ± 33456.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testNewMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testNewMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2046975.212 ops/s
# Warmup Iteration   2: 4321510.692 ops/s
# Warmup Iteration   3: 3631395.343 ops/s
# Warmup Iteration   4: 4540487.170 ops/s
# Warmup Iteration   5: 4574645.172 ops/s
# Warmup Iteration   6: 4546237.114 ops/s
# Warmup Iteration   7: 4536456.707 ops/s
# Warmup Iteration   8: 4693768.326 ops/s
# Warmup Iteration   9: 4453931.347 ops/s
# Warmup Iteration  10: 4359980.959 ops/s
# Warmup Iteration  11: 4355145.015 ops/s
# Warmup Iteration  12: 4363557.762 ops/s
# Warmup Iteration  13: 4365726.628 ops/s
# Warmup Iteration  14: 4366626.747 ops/s
# Warmup Iteration  15: 4353915.100 ops/s
# Warmup Iteration  16: 4658897.683 ops/s
# Warmup Iteration  17: 4368441.447 ops/s
# Warmup Iteration  18: 4377314.246 ops/s
# Warmup Iteration  19: 4390688.232 ops/s
# Warmup Iteration  20: 4474264.117 ops/s
# Warmup Iteration  21: 4377147.042 ops/s
# Warmup Iteration  22: 4562255.734 ops/s
# Warmup Iteration  23: 4606929.905 ops/s
# Warmup Iteration  24: 4526373.878 ops/s
# Warmup Iteration  25: 4465915.914 ops/s
# Warmup Iteration  26: 4439792.230 ops/s
# Warmup Iteration  27: 4416879.881 ops/s
# Warmup Iteration  28: 4552264.496 ops/s
# Warmup Iteration  29: 4486246.378 ops/s
# Warmup Iteration  30: 4409001.125 ops/s
Iteration   1: 4411143.122 ops/s
Iteration   2: 4467573.824 ops/s
Iteration   3: 4389518.244 ops/s
Iteration   4: 4412126.447 ops/s
Iteration   5: 4418671.519 ops/s
Iteration   6: 4425420.119 ops/s
Iteration   7: 4510711.712 ops/s
Iteration   8: 4454495.022 ops/s
Iteration   9: 4465646.218 ops/s
Iteration  10: 4415042.434 ops/s
Iteration  11: 4378209.606 ops/s
Iteration  12: 4520762.548 ops/s
Iteration  13: 4403529.417 ops/s
Iteration  14: 4497064.901 ops/s
Iteration  15: 4421578.604 ops/s
Iteration  16: 4435510.392 ops/s
Iteration  17: 4443253.046 ops/s
Iteration  18: 4481820.402 ops/s
Iteration  19: 4368580.918 ops/s
Iteration  20: 4633396.478 ops/s
Iteration  21: 4705494.086 ops/s
Iteration  22: 4539338.228 ops/s
Iteration  23: 4436552.227 ops/s
Iteration  24: 4558627.252 ops/s
Iteration  25: 4496611.215 ops/s
Iteration  26: 4495476.436 ops/s
Iteration  27: 4543079.321 ops/s
Iteration  28: 4431280.710 ops/s
Iteration  29: 4595983.068 ops/s
Iteration  30: 4649692.469 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testNewMap":
  4480206.333 ±(99.9%) 55878.271 ops/s [Average]
  (min, avg, max) = (4368580.918, 4480206.333, 4705494.086), stdev = 83635.971
  CI (99.9%): [4424328.062, 4536084.603] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_testNewMap  thrpt   30  4480206.333 ± 55878.271  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testNewMapWithKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testNewMapWithKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1665459.509 ops/s
# Warmup Iteration   2: 3806159.152 ops/s
# Warmup Iteration   3: 3122184.841 ops/s
# Warmup Iteration   4: 3698838.271 ops/s
# Warmup Iteration   5: 3725693.790 ops/s
# Warmup Iteration   6: 3669002.825 ops/s
# Warmup Iteration   7: 3655683.130 ops/s
# Warmup Iteration   8: 3743833.851 ops/s
# Warmup Iteration   9: 3804463.156 ops/s
# Warmup Iteration  10: 3702231.191 ops/s
# Warmup Iteration  11: 3767550.947 ops/s
# Warmup Iteration  12: 3663638.795 ops/s
# Warmup Iteration  13: 3759084.443 ops/s
# Warmup Iteration  14: 3676140.897 ops/s
# Warmup Iteration  15: 3791902.106 ops/s
# Warmup Iteration  16: 3784294.386 ops/s
# Warmup Iteration  17: 3722542.640 ops/s
# Warmup Iteration  18: 3729165.827 ops/s
# Warmup Iteration  19: 3724924.760 ops/s
# Warmup Iteration  20: 3682731.968 ops/s
# Warmup Iteration  21: 3700953.130 ops/s
# Warmup Iteration  22: 3629126.256 ops/s
# Warmup Iteration  23: 3746553.425 ops/s
# Warmup Iteration  24: 3721134.827 ops/s
# Warmup Iteration  25: 3643223.186 ops/s
# Warmup Iteration  26: 3616419.913 ops/s
# Warmup Iteration  27: 3650454.125 ops/s
# Warmup Iteration  28: 3636867.152 ops/s
# Warmup Iteration  29: 3692592.580 ops/s
# Warmup Iteration  30: 3742492.214 ops/s
Iteration   1: 3687207.782 ops/s
Iteration   2: 3734151.482 ops/s
Iteration   3: 3762681.312 ops/s
Iteration   4: 3826337.877 ops/s
Iteration   5: 3685242.869 ops/s
Iteration   6: 3735174.736 ops/s
Iteration   7: 3784381.719 ops/s
Iteration   8: 3810850.053 ops/s
Iteration   9: 3783196.917 ops/s
Iteration  10: 3773444.380 ops/s
Iteration  11: 3736424.239 ops/s
Iteration  12: 3838156.294 ops/s
Iteration  13: 3724699.528 ops/s
Iteration  14: 3676303.298 ops/s
Iteration  15: 3820193.327 ops/s
Iteration  16: 3842107.850 ops/s
Iteration  17: 3848281.549 ops/s
Iteration  18: 3800529.711 ops/s
Iteration  19: 3802436.069 ops/s
Iteration  20: 3821083.281 ops/s
Iteration  21: 3646274.329 ops/s
Iteration  22: 3738086.350 ops/s
Iteration  23: 3620983.827 ops/s
Iteration  24: 3612791.573 ops/s
Iteration  25: 3581335.058 ops/s
Iteration  26: 3621171.275 ops/s
Iteration  27: 3677514.855 ops/s
Iteration  28: 3675151.654 ops/s
Iteration  29: 3613963.578 ops/s
Iteration  30: 3669336.807 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testNewMapWithKeyValue":
  3731649.786 ±(99.9%) 53473.360 ops/s [Average]
  (min, avg, max) = (3581335.058, 3731649.786, 3848281.549), stdev = 80036.415
  CI (99.9%): [3678176.426, 3785123.146] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_testNewMapWithKeyValue  thrpt   30  3731649.786 ± 53473.360  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 927782.895 ops/s
# Warmup Iteration   2: 2262050.390 ops/s
# Warmup Iteration   3: 1925996.463 ops/s
# Warmup Iteration   4: 2190625.207 ops/s
# Warmup Iteration   5: 2180398.888 ops/s
# Warmup Iteration   6: 2255443.738 ops/s
# Warmup Iteration   7: 2221088.924 ops/s
# Warmup Iteration   8: 2275021.165 ops/s
# Warmup Iteration   9: 2191178.977 ops/s
# Warmup Iteration  10: 2351745.424 ops/s
# Warmup Iteration  11: 2213284.350 ops/s
# Warmup Iteration  12: 2215025.378 ops/s
# Warmup Iteration  13: 2267884.026 ops/s
# Warmup Iteration  14: 2236648.440 ops/s
# Warmup Iteration  15: 2204733.609 ops/s
# Warmup Iteration  16: 2246818.965 ops/s
# Warmup Iteration  17: 2269958.680 ops/s
# Warmup Iteration  18: 2247046.464 ops/s
# Warmup Iteration  19: 2249550.944 ops/s
# Warmup Iteration  20: 2300862.678 ops/s
# Warmup Iteration  21: 2238937.665 ops/s
# Warmup Iteration  22: 2224905.135 ops/s
# Warmup Iteration  23: 2216305.754 ops/s
# Warmup Iteration  24: 2243901.632 ops/s
# Warmup Iteration  25: 2211835.932 ops/s
# Warmup Iteration  26: 2205953.015 ops/s
# Warmup Iteration  27: 2231635.887 ops/s
# Warmup Iteration  28: 2258512.622 ops/s
# Warmup Iteration  29: 2216314.658 ops/s
# Warmup Iteration  30: 2216612.269 ops/s
Iteration   1: 2228991.436 ops/s
Iteration   2: 2279450.078 ops/s
Iteration   3: 2214440.210 ops/s
Iteration   4: 2313812.281 ops/s
Iteration   5: 2249281.331 ops/s
Iteration   6: 2283123.426 ops/s
Iteration   7: 2250076.883 ops/s
Iteration   8: 2180476.388 ops/s
Iteration   9: 2198753.370 ops/s
Iteration  10: 2147925.645 ops/s
Iteration  11: 2207059.186 ops/s
Iteration  12: 2183958.246 ops/s
Iteration  13: 2199281.173 ops/s
Iteration  14: 2222200.729 ops/s
Iteration  15: 2264379.550 ops/s
Iteration  16: 2193621.923 ops/s
Iteration  17: 2221133.983 ops/s
Iteration  18: 2180063.886 ops/s
Iteration  19: 2193276.457 ops/s
Iteration  20: 2203924.128 ops/s
Iteration  21: 2204903.666 ops/s
Iteration  22: 2199512.973 ops/s
Iteration  23: 2178385.079 ops/s
Iteration  24: 2205930.963 ops/s
Iteration  25: 2193759.070 ops/s
Iteration  26: 2224648.004 ops/s
Iteration  27: 2218965.399 ops/s
Iteration  28: 2198867.791 ops/s
Iteration  29: 2195377.242 ops/s
Iteration  30: 2225880.707 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_testToString":
  2215382.040 ±(99.9%) 23628.727 ops/s [Average]
  (min, avg, max) = (2147925.645, 2215382.040, 2313812.281), stdev = 35366.369
  CI (99.9%): [2191753.313, 2239010.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_testToString  thrpt   30  2215382.040 ± 23628.727  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_test_toString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_test_toString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1046398.928 ops/s
# Warmup Iteration   2: 2441364.407 ops/s
# Warmup Iteration   3: 2507847.147 ops/s
# Warmup Iteration   4: 2090702.003 ops/s
# Warmup Iteration   5: 2532520.157 ops/s
# Warmup Iteration   6: 2486988.752 ops/s
# Warmup Iteration   7: 2552315.071 ops/s
# Warmup Iteration   8: 2567325.618 ops/s
# Warmup Iteration   9: 2511053.263 ops/s
# Warmup Iteration  10: 2485024.901 ops/s
# Warmup Iteration  11: 2482820.902 ops/s
# Warmup Iteration  12: 2453914.837 ops/s
# Warmup Iteration  13: 2504330.234 ops/s
# Warmup Iteration  14: 2582894.893 ops/s
# Warmup Iteration  15: 2580302.265 ops/s
# Warmup Iteration  16: 2517043.264 ops/s
# Warmup Iteration  17: 2537642.420 ops/s
# Warmup Iteration  18: 2491891.692 ops/s
# Warmup Iteration  19: 2583133.756 ops/s
# Warmup Iteration  20: 2473641.681 ops/s
# Warmup Iteration  21: 2498397.461 ops/s
# Warmup Iteration  22: 2561990.388 ops/s
# Warmup Iteration  23: 2619424.077 ops/s
# Warmup Iteration  24: 2537731.928 ops/s
# Warmup Iteration  25: 2588169.861 ops/s
# Warmup Iteration  26: 2683300.231 ops/s
# Warmup Iteration  27: 2710482.790 ops/s
# Warmup Iteration  28: 2685676.337 ops/s
# Warmup Iteration  29: 2680089.025 ops/s
# Warmup Iteration  30: 2719600.667 ops/s
Iteration   1: 2698649.886 ops/s
Iteration   2: 2707239.901 ops/s
Iteration   3: 2683354.162 ops/s
Iteration   4: 2729750.830 ops/s
Iteration   5: 2730552.392 ops/s
Iteration   6: 2727461.481 ops/s
Iteration   7: 2716708.775 ops/s
Iteration   8: 2714457.500 ops/s
Iteration   9: 2712470.538 ops/s
Iteration  10: 2705880.011 ops/s
Iteration  11: 2723507.255 ops/s
Iteration  12: 2721077.204 ops/s
Iteration  13: 2721914.197 ops/s
Iteration  14: 2715141.197 ops/s
Iteration  15: 2701046.930 ops/s
Iteration  16: 2703359.369 ops/s
Iteration  17: 2723730.006 ops/s
Iteration  18: 2725438.787 ops/s
Iteration  19: 2725761.265 ops/s
Iteration  20: 2706532.754 ops/s
Iteration  21: 2700846.586 ops/s
Iteration  22: 2680790.769 ops/s
Iteration  23: 2643542.785 ops/s
Iteration  24: 2592002.834 ops/s
Iteration  25: 2561903.290 ops/s
Iteration  26: 2698793.975 ops/s
Iteration  27: 2701372.034 ops/s
Iteration  28: 2696504.755 ops/s
Iteration  29: 2685238.721 ops/s
Iteration  30: 2581699.679 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_test_toString":
  2694557.662 ±(99.9%) 29055.864 ops/s [Average]
  (min, avg, max) = (2561903.290, 2694557.662, 2730552.392), stdev = 43489.453
  CI (99.9%): [2665501.798, 2723613.526] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_test_toString  thrpt   30  2694557.662 ± 29055.864  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 774484.504 ops/s
# Warmup Iteration   2: 1771448.668 ops/s
# Warmup Iteration   3: 1791472.003 ops/s
# Warmup Iteration   4: 1544113.565 ops/s
# Warmup Iteration   5: 1664881.619 ops/s
# Warmup Iteration   6: 1779684.103 ops/s
# Warmup Iteration   7: 1798786.345 ops/s
# Warmup Iteration   8: 1863809.120 ops/s
# Warmup Iteration   9: 1866845.031 ops/s
# Warmup Iteration  10: 1863232.453 ops/s
# Warmup Iteration  11: 1855189.150 ops/s
# Warmup Iteration  12: 1855871.121 ops/s
# Warmup Iteration  13: 1873919.248 ops/s
# Warmup Iteration  14: 1887266.059 ops/s
# Warmup Iteration  15: 1886559.032 ops/s
# Warmup Iteration  16: 1860794.167 ops/s
# Warmup Iteration  17: 1869442.005 ops/s
# Warmup Iteration  18: 1874983.219 ops/s
# Warmup Iteration  19: 1878335.936 ops/s
# Warmup Iteration  20: 1862399.818 ops/s
# Warmup Iteration  21: 1878922.218 ops/s
# Warmup Iteration  22: 1871514.303 ops/s
# Warmup Iteration  23: 1871198.084 ops/s
# Warmup Iteration  24: 1875182.088 ops/s
# Warmup Iteration  25: 1869238.531 ops/s
# Warmup Iteration  26: 1870144.604 ops/s
# Warmup Iteration  27: 1878040.094 ops/s
# Warmup Iteration  28: 1876710.402 ops/s
# Warmup Iteration  29: 1872108.651 ops/s
# Warmup Iteration  30: 1856540.300 ops/s
Iteration   1: 1820899.407 ops/s
Iteration   2: 1823928.658 ops/s
Iteration   3: 1816851.542 ops/s
Iteration   4: 1849507.925 ops/s
Iteration   5: 1858268.235 ops/s
Iteration   6: 1877457.654 ops/s
Iteration   7: 1849771.779 ops/s
Iteration   8: 1882661.479 ops/s
Iteration   9: 1877426.362 ops/s
Iteration  10: 1869567.043 ops/s
Iteration  11: 1879587.939 ops/s
Iteration  12: 1873175.145 ops/s
Iteration  13: 1871662.943 ops/s
Iteration  14: 1878917.247 ops/s
Iteration  15: 1874844.197 ops/s
Iteration  16: 1875085.682 ops/s
Iteration  17: 1864777.155 ops/s
Iteration  18: 1859075.749 ops/s
Iteration  19: 1874357.291 ops/s
Iteration  20: 1878558.399 ops/s
Iteration  21: 1875670.045 ops/s
Iteration  22: 1881793.854 ops/s
Iteration  23: 1873962.947 ops/s
Iteration  24: 1886155.930 ops/s
Iteration  25: 1875364.789 ops/s
Iteration  26: 1880533.124 ops/s
Iteration  27: 1883480.744 ops/s
Iteration  28: 1884475.760 ops/s
Iteration  29: 1884901.483 ops/s
Iteration  30: 1887578.229 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toArray":
  1869009.958 ±(99.9%) 12742.729 ops/s [Average]
  (min, avg, max) = (1816851.542, 1869009.958, 1887578.229), stdev = 19072.718
  CI (99.9%): [1856267.229, 1881752.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_toArray  thrpt   30  1869009.958 ± 12742.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 718411.772 ops/s
# Warmup Iteration   2: 1483369.953 ops/s
# Warmup Iteration   3: 1585030.935 ops/s
# Warmup Iteration   4: 1591541.749 ops/s
# Warmup Iteration   5: 1314747.204 ops/s
# Warmup Iteration   6: 1589307.855 ops/s
# Warmup Iteration   7: 1502027.553 ops/s
# Warmup Iteration   8: 1574232.201 ops/s
# Warmup Iteration   9: 1503987.973 ops/s
# Warmup Iteration  10: 1470729.544 ops/s
# Warmup Iteration  11: 1489796.077 ops/s
# Warmup Iteration  12: 1499451.902 ops/s
# Warmup Iteration  13: 1495851.489 ops/s
# Warmup Iteration  14: 1470438.245 ops/s
# Warmup Iteration  15: 1445218.389 ops/s
# Warmup Iteration  16: 1457216.367 ops/s
# Warmup Iteration  17: 1534624.599 ops/s
# Warmup Iteration  18: 1442245.897 ops/s
# Warmup Iteration  19: 1457098.622 ops/s
# Warmup Iteration  20: 1445521.237 ops/s
# Warmup Iteration  21: 1477478.686 ops/s
# Warmup Iteration  22: 1464081.949 ops/s
# Warmup Iteration  23: 1454562.302 ops/s
# Warmup Iteration  24: 1487640.504 ops/s
# Warmup Iteration  25: 1511248.803 ops/s
# Warmup Iteration  26: 1510473.030 ops/s
# Warmup Iteration  27: 1525866.196 ops/s
# Warmup Iteration  28: 1471733.441 ops/s
# Warmup Iteration  29: 1481847.495 ops/s
# Warmup Iteration  30: 1534999.899 ops/s
Iteration   1: 1601766.235 ops/s
Iteration   2: 1495376.820 ops/s
Iteration   3: 1520024.384 ops/s
Iteration   4: 1597205.733 ops/s
Iteration   5: 1595938.666 ops/s
Iteration   6: 1602955.724 ops/s
Iteration   7: 1600969.473 ops/s
Iteration   8: 1542717.219 ops/s
Iteration   9: 1480389.401 ops/s
Iteration  10: 1539616.997 ops/s
Iteration  11: 1534105.618 ops/s
Iteration  12: 1531310.982 ops/s
Iteration  13: 1495974.138 ops/s
Iteration  14: 1529092.367 ops/s
Iteration  15: 1593667.952 ops/s
Iteration  16: 1508548.610 ops/s
Iteration  17: 1582750.771 ops/s
Iteration  18: 1573044.302 ops/s
Iteration  19: 1465728.071 ops/s
Iteration  20: 1514858.244 ops/s
Iteration  21: 1528432.924 ops/s
Iteration  22: 1575547.075 ops/s
Iteration  23: 1554663.821 ops/s
Iteration  24: 1593417.726 ops/s
Iteration  25: 1485726.826 ops/s
Iteration  26: 1476724.292 ops/s
Iteration  27: 1513875.872 ops/s
Iteration  28: 1464148.660 ops/s
Iteration  29: 1474585.913 ops/s
Iteration  30: 1531600.955 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toBag":
  1536825.526 ±(99.9%) 30604.688 ops/s [Average]
  (min, avg, max) = (1464148.660, 1536825.526, 1602955.724), stdev = 45807.660
  CI (99.9%): [1506220.837, 1567430.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_toBag  thrpt   30  1536825.526 ± 30604.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 883237.755 ops/s
# Warmup Iteration   2: 1999392.214 ops/s
# Warmup Iteration   3: 1848314.717 ops/s
# Warmup Iteration   4: 1781928.354 ops/s
# Warmup Iteration   5: 2077780.191 ops/s
# Warmup Iteration   6: 2131673.490 ops/s
# Warmup Iteration   7: 2012222.124 ops/s
# Warmup Iteration   8: 2102587.296 ops/s
# Warmup Iteration   9: 2101642.088 ops/s
# Warmup Iteration  10: 2027198.771 ops/s
# Warmup Iteration  11: 2080453.921 ops/s
# Warmup Iteration  12: 2142490.864 ops/s
# Warmup Iteration  13: 2051245.060 ops/s
# Warmup Iteration  14: 2020363.741 ops/s
# Warmup Iteration  15: 1955373.933 ops/s
# Warmup Iteration  16: 1992906.764 ops/s
# Warmup Iteration  17: 2136750.436 ops/s
# Warmup Iteration  18: 2050045.078 ops/s
# Warmup Iteration  19: 2041748.643 ops/s
# Warmup Iteration  20: 2033263.236 ops/s
# Warmup Iteration  21: 1988537.768 ops/s
# Warmup Iteration  22: 1971648.738 ops/s
# Warmup Iteration  23: 2028041.580 ops/s
# Warmup Iteration  24: 2066348.929 ops/s
# Warmup Iteration  25: 2146630.527 ops/s
# Warmup Iteration  26: 2092889.321 ops/s
# Warmup Iteration  27: 2082285.944 ops/s
# Warmup Iteration  28: 1977974.072 ops/s
# Warmup Iteration  29: 1952181.625 ops/s
# Warmup Iteration  30: 2022769.308 ops/s
Iteration   1: 2101098.575 ops/s
Iteration   2: 2025091.947 ops/s
Iteration   3: 2060933.392 ops/s
Iteration   4: 1948085.932 ops/s
Iteration   5: 2133872.767 ops/s
Iteration   6: 2017620.634 ops/s
Iteration   7: 1960619.226 ops/s
Iteration   8: 1949371.965 ops/s
Iteration   9: 2023991.851 ops/s
Iteration  10: 2031998.567 ops/s
Iteration  11: 2060763.571 ops/s
Iteration  12: 2038228.770 ops/s
Iteration  13: 2063381.346 ops/s
Iteration  14: 1995852.002 ops/s
Iteration  15: 1927748.503 ops/s
Iteration  16: 2002034.898 ops/s
Iteration  17: 2007864.828 ops/s
Iteration  18: 2012826.586 ops/s
Iteration  19: 2002961.117 ops/s
Iteration  20: 1998904.612 ops/s
Iteration  21: 2107700.635 ops/s
Iteration  22: 2029375.247 ops/s
Iteration  23: 2014007.484 ops/s
Iteration  24: 1964907.627 ops/s
Iteration  25: 1991967.725 ops/s
Iteration  26: 2077955.552 ops/s
Iteration  27: 1955280.691 ops/s
Iteration  28: 1984576.980 ops/s
Iteration  29: 1985028.844 ops/s
Iteration  30: 1990376.019 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toImmutable":
  2015480.930 ±(99.9%) 33116.303 ops/s [Average]
  (min, avg, max) = (1927748.503, 2015480.930, 2133872.767), stdev = 49566.927
  CI (99.9%): [1982364.627, 2048597.232] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_toImmutable  thrpt   30  2015480.930 ± 33116.303  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1583243.724 ops/s
# Warmup Iteration   2: 4105625.743 ops/s
# Warmup Iteration   3: 3468951.286 ops/s
# Warmup Iteration   4: 4026396.501 ops/s
# Warmup Iteration   5: 4103478.810 ops/s
# Warmup Iteration   6: 4102652.132 ops/s
# Warmup Iteration   7: 4093516.073 ops/s
# Warmup Iteration   8: 3960307.675 ops/s
# Warmup Iteration   9: 4070235.981 ops/s
# Warmup Iteration  10: 4089834.928 ops/s
# Warmup Iteration  11: 4055746.556 ops/s
# Warmup Iteration  12: 4015042.197 ops/s
# Warmup Iteration  13: 4134110.440 ops/s
# Warmup Iteration  14: 4065772.911 ops/s
# Warmup Iteration  15: 4131233.892 ops/s
# Warmup Iteration  16: 4047034.835 ops/s
# Warmup Iteration  17: 4083201.996 ops/s
# Warmup Iteration  18: 4043106.143 ops/s
# Warmup Iteration  19: 4039656.540 ops/s
# Warmup Iteration  20: 4049150.715 ops/s
# Warmup Iteration  21: 4101719.779 ops/s
# Warmup Iteration  22: 4099816.755 ops/s
# Warmup Iteration  23: 3988361.458 ops/s
# Warmup Iteration  24: 3953221.230 ops/s
# Warmup Iteration  25: 4061244.768 ops/s
# Warmup Iteration  26: 4160343.445 ops/s
# Warmup Iteration  27: 3987659.963 ops/s
# Warmup Iteration  28: 4062513.352 ops/s
# Warmup Iteration  29: 4045300.350 ops/s
# Warmup Iteration  30: 4049001.187 ops/s
Iteration   1: 4055242.569 ops/s
Iteration   2: 3974703.439 ops/s
Iteration   3: 4113589.375 ops/s
Iteration   4: 3938648.853 ops/s
Iteration   5: 4206634.140 ops/s
Iteration   6: 4182307.028 ops/s
Iteration   7: 3947419.135 ops/s
Iteration   8: 4006622.027 ops/s
Iteration   9: 3925895.315 ops/s
Iteration  10: 4134742.186 ops/s
Iteration  11: 4044923.719 ops/s
Iteration  12: 4024428.644 ops/s
Iteration  13: 4103132.696 ops/s
Iteration  14: 3936398.110 ops/s
Iteration  15: 3920183.456 ops/s
Iteration  16: 3976731.168 ops/s
Iteration  17: 4092455.411 ops/s
Iteration  18: 4121536.876 ops/s
Iteration  19: 3933187.554 ops/s
Iteration  20: 4014639.126 ops/s
Iteration  21: 3944796.465 ops/s
Iteration  22: 4098193.264 ops/s
Iteration  23: 3974401.900 ops/s
Iteration  24: 3966807.607 ops/s
Iteration  25: 4078759.026 ops/s
Iteration  26: 3991064.246 ops/s
Iteration  27: 4006016.142 ops/s
Iteration  28: 4012993.222 ops/s
Iteration  29: 3988957.435 ops/s
Iteration  30: 4171890.721 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toList":
  4029576.695 ±(99.9%) 55388.292 ops/s [Average]
  (min, avg, max) = (3920183.456, 4029576.695, 4206634.140), stdev = 82902.595
  CI (99.9%): [3974188.403, 4084964.988] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_toList  thrpt   30  4029576.695 ± 55388.292  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1438666.700 ops/s
# Warmup Iteration   2: 3686102.090 ops/s
# Warmup Iteration   3: 3865176.699 ops/s
# Warmup Iteration   4: 3169842.242 ops/s
# Warmup Iteration   5: 3802531.332 ops/s
# Warmup Iteration   6: 3907952.981 ops/s
# Warmup Iteration   7: 3747179.338 ops/s
# Warmup Iteration   8: 3851653.550 ops/s
# Warmup Iteration   9: 3790730.865 ops/s
# Warmup Iteration  10: 3962041.239 ops/s
# Warmup Iteration  11: 3950684.019 ops/s
# Warmup Iteration  12: 3895703.134 ops/s
# Warmup Iteration  13: 3891325.604 ops/s
# Warmup Iteration  14: 3846727.028 ops/s
# Warmup Iteration  15: 3893008.073 ops/s
# Warmup Iteration  16: 3824903.818 ops/s
# Warmup Iteration  17: 3915636.544 ops/s
# Warmup Iteration  18: 3854620.989 ops/s
# Warmup Iteration  19: 3771486.446 ops/s
# Warmup Iteration  20: 3876583.833 ops/s
# Warmup Iteration  21: 3853221.402 ops/s
# Warmup Iteration  22: 3905913.360 ops/s
# Warmup Iteration  23: 3856530.677 ops/s
# Warmup Iteration  24: 3775545.165 ops/s
# Warmup Iteration  25: 3744916.271 ops/s
# Warmup Iteration  26: 3769337.979 ops/s
# Warmup Iteration  27: 3791551.175 ops/s
# Warmup Iteration  28: 3721729.329 ops/s
# Warmup Iteration  29: 3741517.516 ops/s
# Warmup Iteration  30: 3772141.403 ops/s
Iteration   1: 3784939.882 ops/s
Iteration   2: 3750908.695 ops/s
Iteration   3: 3915973.653 ops/s
Iteration   4: 3709207.496 ops/s
Iteration   5: 3777052.135 ops/s
Iteration   6: 3912788.586 ops/s
Iteration   7: 3883937.995 ops/s
Iteration   8: 3823250.706 ops/s
Iteration   9: 3810173.240 ops/s
Iteration  10: 3893309.240 ops/s
Iteration  11: 3898807.683 ops/s
Iteration  12: 3881122.377 ops/s
Iteration  13: 3843351.118 ops/s
Iteration  14: 3797086.822 ops/s
Iteration  15: 3756423.099 ops/s
Iteration  16: 3810029.582 ops/s
Iteration  17: 3736045.916 ops/s
Iteration  18: 3731381.897 ops/s
Iteration  19: 3804711.644 ops/s
Iteration  20: 3738406.929 ops/s
Iteration  21: 3786404.762 ops/s
Iteration  22: 3833270.615 ops/s
Iteration  23: 3787246.039 ops/s
Iteration  24: 3763425.725 ops/s
Iteration  25: 3753514.996 ops/s
Iteration  26: 3737884.838 ops/s
Iteration  27: 3768618.679 ops/s
Iteration  28: 3730387.121 ops/s
Iteration  29: 3755651.067 ops/s
Iteration  30: 3786984.671 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toMap":
  3798743.240 ±(99.9%) 39923.357 ops/s [Average]
  (min, avg, max) = (3709207.496, 3798743.240, 3915973.653), stdev = 59755.406
  CI (99.9%): [3758819.883, 3838666.597] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_toMap  thrpt   30  3798743.240 ± 39923.357  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1568200.573 ops/s
# Warmup Iteration   2: 4051835.924 ops/s
# Warmup Iteration   3: 3422978.351 ops/s
# Warmup Iteration   4: 4234084.673 ops/s
# Warmup Iteration   5: 4169326.280 ops/s
# Warmup Iteration   6: 4012682.356 ops/s
# Warmup Iteration   7: 4093006.212 ops/s
# Warmup Iteration   8: 4077294.837 ops/s
# Warmup Iteration   9: 4002893.239 ops/s
# Warmup Iteration  10: 4063837.638 ops/s
# Warmup Iteration  11: 4064239.170 ops/s
# Warmup Iteration  12: 4234017.059 ops/s
# Warmup Iteration  13: 4061389.938 ops/s
# Warmup Iteration  14: 4022589.579 ops/s
# Warmup Iteration  15: 4098787.457 ops/s
# Warmup Iteration  16: 4196469.193 ops/s
# Warmup Iteration  17: 4032580.540 ops/s
# Warmup Iteration  18: 4213268.106 ops/s
# Warmup Iteration  19: 4070572.203 ops/s
# Warmup Iteration  20: 4032355.949 ops/s
# Warmup Iteration  21: 4015503.904 ops/s
# Warmup Iteration  22: 4117265.059 ops/s
# Warmup Iteration  23: 4060796.076 ops/s
# Warmup Iteration  24: 4050229.612 ops/s
# Warmup Iteration  25: 4092998.285 ops/s
# Warmup Iteration  26: 4032990.660 ops/s
# Warmup Iteration  27: 4009193.265 ops/s
# Warmup Iteration  28: 4090820.247 ops/s
# Warmup Iteration  29: 4015238.358 ops/s
# Warmup Iteration  30: 4084450.526 ops/s
Iteration   1: 4023677.940 ops/s
Iteration   2: 4101092.135 ops/s
Iteration   3: 4055200.392 ops/s
Iteration   4: 4088415.627 ops/s
Iteration   5: 4074616.856 ops/s
Iteration   6: 4108190.518 ops/s
Iteration   7: 4127975.024 ops/s
Iteration   8: 4237930.685 ops/s
Iteration   9: 4167246.602 ops/s
Iteration  10: 4196726.843 ops/s
Iteration  11: 4258874.430 ops/s
Iteration  12: 4446118.145 ops/s
Iteration  13: 4326238.156 ops/s
Iteration  14: 4308999.329 ops/s
Iteration  15: 4224552.292 ops/s
Iteration  16: 4067583.578 ops/s
Iteration  17: 4234970.935 ops/s
Iteration  18: 4224886.955 ops/s
Iteration  19: 4033901.478 ops/s
Iteration  20: 4101490.850 ops/s
Iteration  21: 4370106.766 ops/s
Iteration  22: 4072190.093 ops/s
Iteration  23: 4203524.394 ops/s
Iteration  24: 4226666.978 ops/s
Iteration  25: 4220529.437 ops/s
Iteration  26: 4252707.684 ops/s
Iteration  27: 4091782.067 ops/s
Iteration  28: 4135824.687 ops/s
Iteration  29: 4406028.669 ops/s
Iteration  30: 4275321.562 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSet":
  4188779.037 ±(99.9%) 74918.224 ops/s [Average]
  (min, avg, max) = (4023677.940, 4188779.037, 4446118.145), stdev = 112134.079
  CI (99.9%): [4113860.813, 4263697.261] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_toSet  thrpt   30  4188779.037 ± 74918.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 238814.720 ops/s
# Warmup Iteration   2: 421740.473 ops/s
# Warmup Iteration   3: 500368.049 ops/s
# Warmup Iteration   4: 502824.881 ops/s
# Warmup Iteration   5: 515303.505 ops/s
# Warmup Iteration   6: 457121.353 ops/s
# Warmup Iteration   7: 473081.574 ops/s
# Warmup Iteration   8: 515081.256 ops/s
# Warmup Iteration   9: 520040.489 ops/s
# Warmup Iteration  10: 504045.377 ops/s
# Warmup Iteration  11: 523634.894 ops/s
# Warmup Iteration  12: 500307.355 ops/s
# Warmup Iteration  13: 510650.322 ops/s
# Warmup Iteration  14: 516027.124 ops/s
# Warmup Iteration  15: 502784.167 ops/s
# Warmup Iteration  16: 496929.395 ops/s
# Warmup Iteration  17: 506545.151 ops/s
# Warmup Iteration  18: 502244.648 ops/s
# Warmup Iteration  19: 502352.498 ops/s
# Warmup Iteration  20: 503883.541 ops/s
# Warmup Iteration  21: 499795.698 ops/s
# Warmup Iteration  22: 505044.904 ops/s
# Warmup Iteration  23: 502610.596 ops/s
# Warmup Iteration  24: 498905.938 ops/s
# Warmup Iteration  25: 503671.846 ops/s
# Warmup Iteration  26: 499009.226 ops/s
# Warmup Iteration  27: 503636.345 ops/s
# Warmup Iteration  28: 509259.807 ops/s
# Warmup Iteration  29: 517419.667 ops/s
# Warmup Iteration  30: 495178.568 ops/s
Iteration   1: 501047.892 ops/s
Iteration   2: 494158.598 ops/s
Iteration   3: 496797.435 ops/s
Iteration   4: 504060.687 ops/s
Iteration   5: 506201.871 ops/s
Iteration   6: 502286.838 ops/s
Iteration   7: 505906.542 ops/s
Iteration   8: 519438.030 ops/s
Iteration   9: 526951.359 ops/s
Iteration  10: 525563.655 ops/s
Iteration  11: 493734.456 ops/s
Iteration  12: 491267.625 ops/s
Iteration  13: 496460.325 ops/s
Iteration  14: 497802.554 ops/s
Iteration  15: 498180.703 ops/s
Iteration  16: 498427.600 ops/s
Iteration  17: 497357.601 ops/s
Iteration  18: 499141.677 ops/s
Iteration  19: 493806.325 ops/s
Iteration  20: 521472.457 ops/s
Iteration  21: 505615.641 ops/s
Iteration  22: 493895.988 ops/s
Iteration  23: 504345.366 ops/s
Iteration  24: 502346.344 ops/s
Iteration  25: 507044.136 ops/s
Iteration  26: 495818.988 ops/s
Iteration  27: 516073.572 ops/s
Iteration  28: 520920.626 ops/s
Iteration  29: 510064.006 ops/s
Iteration  30: 499030.187 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedBag":
  504173.969 ±(99.9%) 6772.584 ops/s [Average]
  (min, avg, max) = (491267.625, 504173.969, 526951.359), stdev = 10136.885
  CI (99.9%): [497401.386, 510946.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_toSortedBag  thrpt   30  504173.969 ± 6772.584  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 288337.152 ops/s
# Warmup Iteration   2: 662463.325 ops/s
# Warmup Iteration   3: 695312.039 ops/s
# Warmup Iteration   4: 678249.063 ops/s
# Warmup Iteration   5: 567487.659 ops/s
# Warmup Iteration   6: 698950.071 ops/s
# Warmup Iteration   7: 676917.632 ops/s
# Warmup Iteration   8: 679800.367 ops/s
# Warmup Iteration   9: 693649.641 ops/s
# Warmup Iteration  10: 702069.148 ops/s
# Warmup Iteration  11: 704927.779 ops/s
# Warmup Iteration  12: 707963.391 ops/s
# Warmup Iteration  13: 697769.075 ops/s
# Warmup Iteration  14: 710084.845 ops/s
# Warmup Iteration  15: 701127.165 ops/s
# Warmup Iteration  16: 675289.081 ops/s
# Warmup Iteration  17: 694502.266 ops/s
# Warmup Iteration  18: 688328.921 ops/s
# Warmup Iteration  19: 696175.848 ops/s
# Warmup Iteration  20: 688943.040 ops/s
# Warmup Iteration  21: 689786.523 ops/s
# Warmup Iteration  22: 688007.763 ops/s
# Warmup Iteration  23: 683945.171 ops/s
# Warmup Iteration  24: 675710.641 ops/s
# Warmup Iteration  25: 700151.288 ops/s
# Warmup Iteration  26: 700884.660 ops/s
# Warmup Iteration  27: 708756.637 ops/s
# Warmup Iteration  28: 682090.943 ops/s
# Warmup Iteration  29: 698318.607 ops/s
# Warmup Iteration  30: 713257.941 ops/s
Iteration   1: 708148.047 ops/s
Iteration   2: 690957.459 ops/s
Iteration   3: 716561.298 ops/s
Iteration   4: 719712.234 ops/s
Iteration   5: 701632.141 ops/s
Iteration   6: 690863.166 ops/s
Iteration   7: 705962.906 ops/s
Iteration   8: 685601.596 ops/s
Iteration   9: 715555.128 ops/s
Iteration  10: 699731.756 ops/s
Iteration  11: 686737.458 ops/s
Iteration  12: 684901.913 ops/s
Iteration  13: 683243.433 ops/s
Iteration  14: 693482.880 ops/s
Iteration  15: 695309.716 ops/s
Iteration  16: 686644.847 ops/s
Iteration  17: 673618.555 ops/s
Iteration  18: 691256.804 ops/s
Iteration  19: 697176.878 ops/s
Iteration  20: 697009.028 ops/s
Iteration  21: 679194.981 ops/s
Iteration  22: 685615.222 ops/s
Iteration  23: 681130.929 ops/s
Iteration  24: 681081.733 ops/s
Iteration  25: 703579.998 ops/s
Iteration  26: 691073.582 ops/s
Iteration  27: 685946.217 ops/s
Iteration  28: 687530.902 ops/s
Iteration  29: 680765.361 ops/s
Iteration  30: 691141.615 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedBagBy":
  693038.926 ±(99.9%) 7740.732 ops/s [Average]
  (min, avg, max) = (673618.555, 693038.926, 719712.234), stdev = 11585.964
  CI (99.9%): [685298.194, 700779.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  693038.926 ± 7740.732  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1168295.431 ops/s
# Warmup Iteration   2: 2731106.805 ops/s
# Warmup Iteration   3: 2674289.433 ops/s
# Warmup Iteration   4: 2362879.350 ops/s
# Warmup Iteration   5: 2621844.508 ops/s
# Warmup Iteration   6: 2683470.445 ops/s
# Warmup Iteration   7: 2739941.503 ops/s
# Warmup Iteration   8: 2752878.063 ops/s
# Warmup Iteration   9: 2735256.057 ops/s
# Warmup Iteration  10: 2736643.975 ops/s
# Warmup Iteration  11: 2694337.741 ops/s
# Warmup Iteration  12: 2772073.332 ops/s
# Warmup Iteration  13: 2703639.127 ops/s
# Warmup Iteration  14: 2673638.024 ops/s
# Warmup Iteration  15: 2724208.352 ops/s
# Warmup Iteration  16: 2737806.890 ops/s
# Warmup Iteration  17: 2784330.678 ops/s
# Warmup Iteration  18: 2824935.026 ops/s
# Warmup Iteration  19: 2812807.174 ops/s
# Warmup Iteration  20: 2645040.556 ops/s
# Warmup Iteration  21: 2730350.016 ops/s
# Warmup Iteration  22: 2674308.659 ops/s
# Warmup Iteration  23: 2672884.285 ops/s
# Warmup Iteration  24: 2661804.031 ops/s
# Warmup Iteration  25: 2699358.926 ops/s
# Warmup Iteration  26: 2667089.823 ops/s
# Warmup Iteration  27: 2662970.304 ops/s
# Warmup Iteration  28: 2762123.768 ops/s
# Warmup Iteration  29: 2767793.576 ops/s
# Warmup Iteration  30: 2714424.425 ops/s
Iteration   1: 2775050.917 ops/s
Iteration   2: 2695607.284 ops/s
Iteration   3: 2706171.444 ops/s
Iteration   4: 2683880.641 ops/s
Iteration   5: 2632226.856 ops/s
Iteration   6: 2649615.202 ops/s
Iteration   7: 2704607.420 ops/s
Iteration   8: 2653101.596 ops/s
Iteration   9: 2663839.217 ops/s
Iteration  10: 2617939.481 ops/s
Iteration  11: 2613705.934 ops/s
Iteration  12: 2666662.310 ops/s
Iteration  13: 2767413.270 ops/s
Iteration  14: 2677349.468 ops/s
Iteration  15: 2750074.235 ops/s
Iteration  16: 2710753.562 ops/s
Iteration  17: 2705433.621 ops/s
Iteration  18: 2727005.668 ops/s
Iteration  19: 2738090.372 ops/s
Iteration  20: 2714894.252 ops/s
Iteration  21: 2641642.967 ops/s
Iteration  22: 2676964.020 ops/s
Iteration  23: 2691135.614 ops/s
Iteration  24: 2765132.710 ops/s
Iteration  25: 2650739.000 ops/s
Iteration  26: 2639196.953 ops/s
Iteration  27: 2721137.757 ops/s
Iteration  28: 2649506.060 ops/s
Iteration  29: 2676540.701 ops/s
Iteration  30: 2660945.280 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedList":
  2687545.460 ±(99.9%) 29571.715 ops/s [Average]
  (min, avg, max) = (2613705.934, 2687545.460, 2775050.917), stdev = 44261.554
  CI (99.9%): [2657973.746, 2717117.175] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_toSortedList  thrpt   30  2687545.460 ± 29571.715  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1031974.376 ops/s
# Warmup Iteration   2: 2709175.368 ops/s
# Warmup Iteration   3: 2709278.115 ops/s
# Warmup Iteration   4: 2246984.088 ops/s
# Warmup Iteration   5: 2719148.462 ops/s
# Warmup Iteration   6: 2846158.632 ops/s
# Warmup Iteration   7: 2767849.200 ops/s
# Warmup Iteration   8: 2741996.014 ops/s
# Warmup Iteration   9: 2829924.227 ops/s
# Warmup Iteration  10: 2844379.870 ops/s
# Warmup Iteration  11: 2911928.622 ops/s
# Warmup Iteration  12: 2808777.410 ops/s
# Warmup Iteration  13: 2740594.761 ops/s
# Warmup Iteration  14: 2765860.003 ops/s
# Warmup Iteration  15: 2754082.488 ops/s
# Warmup Iteration  16: 2738302.608 ops/s
# Warmup Iteration  17: 2795622.358 ops/s
# Warmup Iteration  18: 2748579.325 ops/s
# Warmup Iteration  19: 2769185.893 ops/s
# Warmup Iteration  20: 2744201.044 ops/s
# Warmup Iteration  21: 2739780.248 ops/s
# Warmup Iteration  22: 2754848.929 ops/s
# Warmup Iteration  23: 2718754.839 ops/s
# Warmup Iteration  24: 2779415.045 ops/s
# Warmup Iteration  25: 2784935.362 ops/s
# Warmup Iteration  26: 2714459.628 ops/s
# Warmup Iteration  27: 2753328.149 ops/s
# Warmup Iteration  28: 2812800.015 ops/s
# Warmup Iteration  29: 2843435.707 ops/s
# Warmup Iteration  30: 2775659.369 ops/s
Iteration   1: 2772922.811 ops/s
Iteration   2: 2722819.124 ops/s
Iteration   3: 2788002.816 ops/s
Iteration   4: 2824554.973 ops/s
Iteration   5: 2814914.972 ops/s
Iteration   6: 2849743.000 ops/s
Iteration   7: 2784657.718 ops/s
Iteration   8: 2858088.638 ops/s
Iteration   9: 2835009.720 ops/s
Iteration  10: 2830733.083 ops/s
Iteration  11: 2739501.161 ops/s
Iteration  12: 2708353.303 ops/s
Iteration  13: 2884842.860 ops/s
Iteration  14: 2752683.535 ops/s
Iteration  15: 2767722.264 ops/s
Iteration  16: 2743801.835 ops/s
Iteration  17: 2770664.963 ops/s
Iteration  18: 2761753.279 ops/s
Iteration  19: 2854446.820 ops/s
Iteration  20: 2855302.975 ops/s
Iteration  21: 2804787.593 ops/s
Iteration  22: 2724439.178 ops/s
Iteration  23: 2850987.103 ops/s
Iteration  24: 2760378.723 ops/s
Iteration  25: 2871676.756 ops/s
Iteration  26: 2794129.318 ops/s
Iteration  27: 2855787.471 ops/s
Iteration  28: 2843951.649 ops/s
Iteration  29: 2751911.679 ops/s
Iteration  30: 2865861.231 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedListBy":
  2801481.018 ±(99.9%) 34350.367 ops/s [Average]
  (min, avg, max) = (2708353.303, 2801481.018, 2884842.860), stdev = 51414.016
  CI (99.9%): [2767130.651, 2835831.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_toSortedListBy  thrpt   30  2801481.018 ± 34350.367  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 248921.317 ops/s
# Warmup Iteration   2: 401231.869 ops/s
# Warmup Iteration   3: 464244.009 ops/s
# Warmup Iteration   4: 469046.519 ops/s
# Warmup Iteration   5: 467549.342 ops/s
# Warmup Iteration   6: 469832.834 ops/s
# Warmup Iteration   7: 387108.148 ops/s
# Warmup Iteration   8: 476850.430 ops/s
# Warmup Iteration   9: 480396.795 ops/s
# Warmup Iteration  10: 479021.743 ops/s
# Warmup Iteration  11: 472688.060 ops/s
# Warmup Iteration  12: 489681.914 ops/s
# Warmup Iteration  13: 473088.756 ops/s
# Warmup Iteration  14: 470906.961 ops/s
# Warmup Iteration  15: 468184.478 ops/s
# Warmup Iteration  16: 474724.291 ops/s
# Warmup Iteration  17: 471528.321 ops/s
# Warmup Iteration  18: 466290.994 ops/s
# Warmup Iteration  19: 468261.251 ops/s
# Warmup Iteration  20: 466127.038 ops/s
# Warmup Iteration  21: 467720.199 ops/s
# Warmup Iteration  22: 469889.801 ops/s
# Warmup Iteration  23: 471519.989 ops/s
# Warmup Iteration  24: 474742.035 ops/s
# Warmup Iteration  25: 464817.156 ops/s
# Warmup Iteration  26: 481787.238 ops/s
# Warmup Iteration  27: 472457.494 ops/s
# Warmup Iteration  28: 474999.906 ops/s
# Warmup Iteration  29: 473516.993 ops/s
# Warmup Iteration  30: 464354.644 ops/s
Iteration   1: 461951.176 ops/s
Iteration   2: 477259.639 ops/s
Iteration   3: 475460.167 ops/s
Iteration   4: 484109.814 ops/s
Iteration   5: 472923.313 ops/s
Iteration   6: 466153.022 ops/s
Iteration   7: 474488.493 ops/s
Iteration   8: 472984.831 ops/s
Iteration   9: 470425.924 ops/s
Iteration  10: 470156.360 ops/s
Iteration  11: 462414.400 ops/s
Iteration  12: 471914.116 ops/s
Iteration  13: 467719.099 ops/s
Iteration  14: 477025.868 ops/s
Iteration  15: 467259.807 ops/s
Iteration  16: 473947.795 ops/s
Iteration  17: 478339.165 ops/s
Iteration  18: 480797.198 ops/s
Iteration  19: 467874.073 ops/s
Iteration  20: 466193.437 ops/s
Iteration  21: 466586.342 ops/s
Iteration  22: 488598.796 ops/s
Iteration  23: 490297.502 ops/s
Iteration  24: 471008.330 ops/s
Iteration  25: 480317.699 ops/s
Iteration  26: 462978.929 ops/s
Iteration  27: 491909.172 ops/s
Iteration  28: 497644.493 ops/s
Iteration  29: 468561.177 ops/s
Iteration  30: 486510.646 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedMap":
  474793.693 ±(99.9%) 6201.819 ops/s [Average]
  (min, avg, max) = (461951.176, 474793.693, 497644.493), stdev = 9282.591
  CI (99.9%): [468591.874, 480995.511] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_toSortedMap  thrpt   30  474793.693 ± 6201.819  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 390630.389 ops/s
# Warmup Iteration   2: 825210.992 ops/s
# Warmup Iteration   3: 848695.623 ops/s
# Warmup Iteration   4: 862472.967 ops/s
# Warmup Iteration   5: 742337.398 ops/s
# Warmup Iteration   6: 856900.953 ops/s
# Warmup Iteration   7: 894136.830 ops/s
# Warmup Iteration   8: 927626.632 ops/s
# Warmup Iteration   9: 909084.930 ops/s
# Warmup Iteration  10: 879185.835 ops/s
# Warmup Iteration  11: 881275.883 ops/s
# Warmup Iteration  12: 884081.008 ops/s
# Warmup Iteration  13: 897229.320 ops/s
# Warmup Iteration  14: 931918.126 ops/s
# Warmup Iteration  15: 929469.563 ops/s
# Warmup Iteration  16: 902689.931 ops/s
# Warmup Iteration  17: 910465.223 ops/s
# Warmup Iteration  18: 890839.529 ops/s
# Warmup Iteration  19: 853042.112 ops/s
# Warmup Iteration  20: 856245.037 ops/s
# Warmup Iteration  21: 889279.188 ops/s
# Warmup Iteration  22: 862678.350 ops/s
# Warmup Iteration  23: 886133.123 ops/s
# Warmup Iteration  24: 877193.934 ops/s
# Warmup Iteration  25: 897434.951 ops/s
# Warmup Iteration  26: 859331.692 ops/s
# Warmup Iteration  27: 900576.180 ops/s
# Warmup Iteration  28: 859975.249 ops/s
# Warmup Iteration  29: 855550.661 ops/s
# Warmup Iteration  30: 877920.069 ops/s
Iteration   1: 902499.357 ops/s
Iteration   2: 930188.874 ops/s
Iteration   3: 864742.931 ops/s
Iteration   4: 906702.696 ops/s
Iteration   5: 887686.035 ops/s
Iteration   6: 912216.660 ops/s
Iteration   7: 933756.119 ops/s
Iteration   8: 920628.443 ops/s
Iteration   9: 853210.347 ops/s
Iteration  10: 848901.195 ops/s
Iteration  11: 891803.564 ops/s
Iteration  12: 835209.544 ops/s
Iteration  13: 864441.638 ops/s
Iteration  14: 851024.277 ops/s
Iteration  15: 866168.742 ops/s
Iteration  16: 859007.867 ops/s
Iteration  17: 861344.351 ops/s
Iteration  18: 864171.451 ops/s
Iteration  19: 851162.108 ops/s
Iteration  20: 859516.569 ops/s
Iteration  21: 845411.529 ops/s
Iteration  22: 847567.737 ops/s
Iteration  23: 861463.963 ops/s
Iteration  24: 912337.565 ops/s
Iteration  25: 937032.083 ops/s
Iteration  26: 842066.070 ops/s
Iteration  27: 845019.673 ops/s
Iteration  28: 914858.910 ops/s
Iteration  29: 930291.201 ops/s
Iteration  30: 939371.011 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedSet":
  881326.750 ±(99.9%) 22799.471 ops/s [Average]
  (min, avg, max) = (835209.544, 881326.750, 939371.011), stdev = 34125.177
  CI (99.9%): [858527.279, 904126.221] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_toSortedSet  thrpt   30  881326.750 ± 22799.471  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 552695.343 ops/s
# Warmup Iteration   2: 1342959.203 ops/s
# Warmup Iteration   3: 1378116.259 ops/s
# Warmup Iteration   4: 1107830.073 ops/s
# Warmup Iteration   5: 1354373.714 ops/s
# Warmup Iteration   6: 1343297.352 ops/s
# Warmup Iteration   7: 1360170.126 ops/s
# Warmup Iteration   8: 1364170.203 ops/s
# Warmup Iteration   9: 1355698.353 ops/s
# Warmup Iteration  10: 1359299.808 ops/s
# Warmup Iteration  11: 1352053.585 ops/s
# Warmup Iteration  12: 1379036.303 ops/s
# Warmup Iteration  13: 1386127.511 ops/s
# Warmup Iteration  14: 1398309.682 ops/s
# Warmup Iteration  15: 1346578.156 ops/s
# Warmup Iteration  16: 1348746.603 ops/s
# Warmup Iteration  17: 1367963.182 ops/s
# Warmup Iteration  18: 1371255.928 ops/s
# Warmup Iteration  19: 1359846.608 ops/s
# Warmup Iteration  20: 1360995.304 ops/s
# Warmup Iteration  21: 1364293.877 ops/s
# Warmup Iteration  22: 1383838.448 ops/s
# Warmup Iteration  23: 1364502.613 ops/s
# Warmup Iteration  24: 1366910.117 ops/s
# Warmup Iteration  25: 1355246.127 ops/s
# Warmup Iteration  26: 1380254.297 ops/s
# Warmup Iteration  27: 1363583.355 ops/s
# Warmup Iteration  28: 1369849.280 ops/s
# Warmup Iteration  29: 1397108.556 ops/s
# Warmup Iteration  30: 1360380.789 ops/s
Iteration   1: 1388706.461 ops/s
Iteration   2: 1412283.096 ops/s
Iteration   3: 1391895.068 ops/s
Iteration   4: 1341292.018 ops/s
Iteration   5: 1375253.246 ops/s
Iteration   6: 1366851.209 ops/s
Iteration   7: 1361390.070 ops/s
Iteration   8: 1359574.412 ops/s
Iteration   9: 1348420.696 ops/s
Iteration  10: 1346551.894 ops/s
Iteration  11: 1334752.974 ops/s
Iteration  12: 1395920.263 ops/s
Iteration  13: 1386336.585 ops/s
Iteration  14: 1377621.110 ops/s
Iteration  15: 1366164.541 ops/s
Iteration  16: 1416068.093 ops/s
Iteration  17: 1419434.124 ops/s
Iteration  18: 1387288.379 ops/s
Iteration  19: 1384114.409 ops/s
Iteration  20: 1357634.765 ops/s
Iteration  21: 1385825.893 ops/s
Iteration  22: 1368860.465 ops/s
Iteration  23: 1368808.936 ops/s
Iteration  24: 1367568.527 ops/s
Iteration  25: 1371608.492 ops/s
Iteration  26: 1343066.092 ops/s
Iteration  27: 1365671.121 ops/s
Iteration  28: 1398869.341 ops/s
Iteration  29: 1365155.899 ops/s
Iteration  30: 1371716.624 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_toSortedSetBy":
  1374156.827 ±(99.9%) 14412.630 ops/s [Average]
  (min, avg, max) = (1334752.974, 1374156.827, 1419434.124), stdev = 21572.147
  CI (99.9%): [1359744.197, 1388569.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1374156.827 ± 14412.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_updateValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_updateValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 425709.240 ops/s
# Warmup Iteration   2: 808040.991 ops/s
# Warmup Iteration   3: 880044.271 ops/s
# Warmup Iteration   4: 917378.815 ops/s
# Warmup Iteration   5: 713253.836 ops/s
# Warmup Iteration   6: 897962.656 ops/s
# Warmup Iteration   7: 880762.328 ops/s
# Warmup Iteration   8: 870910.575 ops/s
# Warmup Iteration   9: 884791.025 ops/s
# Warmup Iteration  10: 882101.007 ops/s
# Warmup Iteration  11: 873974.099 ops/s
# Warmup Iteration  12: 878608.640 ops/s
# Warmup Iteration  13: 879019.979 ops/s
# Warmup Iteration  14: 874487.037 ops/s
# Warmup Iteration  15: 880762.510 ops/s
# Warmup Iteration  16: 871914.513 ops/s
# Warmup Iteration  17: 893954.217 ops/s
# Warmup Iteration  18: 939177.860 ops/s
# Warmup Iteration  19: 892460.970 ops/s
# Warmup Iteration  20: 883465.564 ops/s
# Warmup Iteration  21: 869091.289 ops/s
# Warmup Iteration  22: 881518.354 ops/s
# Warmup Iteration  23: 876473.015 ops/s
# Warmup Iteration  24: 892040.261 ops/s
# Warmup Iteration  25: 870876.120 ops/s
# Warmup Iteration  26: 879835.422 ops/s
# Warmup Iteration  27: 885372.933 ops/s
# Warmup Iteration  28: 877281.626 ops/s
# Warmup Iteration  29: 890664.711 ops/s
# Warmup Iteration  30: 877485.821 ops/s
Iteration   1: 859741.815 ops/s
Iteration   2: 879753.629 ops/s
Iteration   3: 893303.276 ops/s
Iteration   4: 856210.500 ops/s
Iteration   5: 873224.008 ops/s
Iteration   6: 866052.222 ops/s
Iteration   7: 869610.480 ops/s
Iteration   8: 870504.723 ops/s
Iteration   9: 877210.596 ops/s
Iteration  10: 869881.130 ops/s
Iteration  11: 862721.872 ops/s
Iteration  12: 907843.528 ops/s
Iteration  13: 900826.422 ops/s
Iteration  14: 913234.915 ops/s
Iteration  15: 876202.581 ops/s
Iteration  16: 879644.925 ops/s
Iteration  17: 886303.252 ops/s
Iteration  18: 928902.636 ops/s
Iteration  19: 914112.933 ops/s
Iteration  20: 864034.419 ops/s
Iteration  21: 879596.984 ops/s
Iteration  22: 869196.340 ops/s
Iteration  23: 890751.873 ops/s
Iteration  24: 874455.235 ops/s
Iteration  25: 882957.843 ops/s
Iteration  26: 870426.170 ops/s
Iteration  27: 871120.111 ops/s
Iteration  28: 872000.349 ops/s
Iteration  29: 897673.965 ops/s
Iteration  30: 881524.005 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_updateValue":
  881300.758 ±(99.9%) 11736.453 ops/s [Average]
  (min, avg, max) = (856210.500, 881300.758, 928902.636), stdev = 17566.572
  CI (99.9%): [869564.305, 893037.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_updateValue  thrpt   30  881300.758 ± 11736.453  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_updateValueWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_updateValueWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 320726.279 ops/s
# Warmup Iteration   2: 575893.273 ops/s
# Warmup Iteration   3: 619134.700 ops/s
# Warmup Iteration   4: 620060.225 ops/s
# Warmup Iteration   5: 604531.378 ops/s
# Warmup Iteration   6: 535647.155 ops/s
# Warmup Iteration   7: 623590.372 ops/s
# Warmup Iteration   8: 620507.601 ops/s
# Warmup Iteration   9: 627694.041 ops/s
# Warmup Iteration  10: 627393.231 ops/s
# Warmup Iteration  11: 626317.792 ops/s
# Warmup Iteration  12: 612464.034 ops/s
# Warmup Iteration  13: 625081.788 ops/s
# Warmup Iteration  14: 629585.660 ops/s
# Warmup Iteration  15: 627387.983 ops/s
# Warmup Iteration  16: 639080.842 ops/s
# Warmup Iteration  17: 627869.328 ops/s
# Warmup Iteration  18: 624739.793 ops/s
# Warmup Iteration  19: 618880.686 ops/s
# Warmup Iteration  20: 618059.390 ops/s
# Warmup Iteration  21: 626235.856 ops/s
# Warmup Iteration  22: 625158.191 ops/s
# Warmup Iteration  23: 625563.609 ops/s
# Warmup Iteration  24: 635697.327 ops/s
# Warmup Iteration  25: 618778.968 ops/s
# Warmup Iteration  26: 626452.807 ops/s
# Warmup Iteration  27: 621246.425 ops/s
# Warmup Iteration  28: 623768.765 ops/s
# Warmup Iteration  29: 625688.317 ops/s
# Warmup Iteration  30: 622358.662 ops/s
Iteration   1: 642785.520 ops/s
Iteration   2: 649384.772 ops/s
Iteration   3: 629535.470 ops/s
Iteration   4: 612461.146 ops/s
Iteration   5: 617193.007 ops/s
Iteration   6: 634246.805 ops/s
Iteration   7: 630323.301 ops/s
Iteration   8: 623900.274 ops/s
Iteration   9: 616862.471 ops/s
Iteration  10: 649790.068 ops/s
Iteration  11: 635999.718 ops/s
Iteration  12: 631792.434 ops/s
Iteration  13: 632698.380 ops/s
Iteration  14: 615132.234 ops/s
Iteration  15: 650061.728 ops/s
Iteration  16: 642065.753 ops/s
Iteration  17: 626900.622 ops/s
Iteration  18: 614582.246 ops/s
Iteration  19: 625190.152 ops/s
Iteration  20: 647471.560 ops/s
Iteration  21: 649514.987 ops/s
Iteration  22: 658011.350 ops/s
Iteration  23: 652026.782 ops/s
Iteration  24: 654298.045 ops/s
Iteration  25: 632387.990 ops/s
Iteration  26: 639259.838 ops/s
Iteration  27: 633904.454 ops/s
Iteration  28: 633828.319 ops/s
Iteration  29: 622785.892 ops/s
Iteration  30: 619226.868 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_updateValueWith":
  634120.740 ±(99.9%) 8810.442 ops/s [Average]
  (min, avg, max) = (612461.146, 634120.740, 658011.350), stdev = 13187.055
  CI (99.9%): [625310.298, 642931.181] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_updateValueWith  thrpt   30  634120.740 ± 8810.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_updateValueWith_collisions$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_updateValueWith_collisions

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 146237146.371 ops/s
# Warmup Iteration   2: 287447721.762 ops/s
# Warmup Iteration   3: 253812296.820 ops/s
# Warmup Iteration   4: 288396234.020 ops/s
# Warmup Iteration   5: 284332425.055 ops/s
# Warmup Iteration   6: 289736470.409 ops/s
# Warmup Iteration   7: 288524081.264 ops/s
# Warmup Iteration   8: 288736915.174 ops/s
# Warmup Iteration   9: 292188936.856 ops/s
# Warmup Iteration  10: 287308544.495 ops/s
# Warmup Iteration  11: 295339631.207 ops/s
# Warmup Iteration  12: 289643801.298 ops/s
# Warmup Iteration  13: 295742376.781 ops/s
# Warmup Iteration  14: 293640158.646 ops/s
# Warmup Iteration  15: 298175501.489 ops/s
# Warmup Iteration  16: 288826518.190 ops/s
# Warmup Iteration  17: 290616709.474 ops/s
# Warmup Iteration  18: 287031417.309 ops/s
# Warmup Iteration  19: 292971259.412 ops/s
# Warmup Iteration  20: 289359588.191 ops/s
# Warmup Iteration  21: 288471946.067 ops/s
# Warmup Iteration  22: 286349521.000 ops/s
# Warmup Iteration  23: 289215899.064 ops/s
# Warmup Iteration  24: 291075214.420 ops/s
# Warmup Iteration  25: 289200711.460 ops/s
# Warmup Iteration  26: 292458357.387 ops/s
# Warmup Iteration  27: 288980795.693 ops/s
# Warmup Iteration  28: 293538031.545 ops/s
# Warmup Iteration  29: 301884762.455 ops/s
# Warmup Iteration  30: 296424776.409 ops/s
Iteration   1: 292843941.021 ops/s
Iteration   2: 285655864.125 ops/s
Iteration   3: 290184219.240 ops/s
Iteration   4: 295283048.682 ops/s
Iteration   5: 308528621.567 ops/s
Iteration   6: 287177908.705 ops/s
Iteration   7: 290201166.274 ops/s
Iteration   8: 290714577.090 ops/s
Iteration   9: 297691704.838 ops/s
Iteration  10: 288361336.237 ops/s
Iteration  11: 292052078.192 ops/s
Iteration  12: 308672956.283 ops/s
Iteration  13: 297136090.928 ops/s
Iteration  14: 301453514.310 ops/s
Iteration  15: 294438179.760 ops/s
Iteration  16: 289971329.558 ops/s
Iteration  17: 292372561.621 ops/s
Iteration  18: 287402242.793 ops/s
Iteration  19: 292499869.845 ops/s
Iteration  20: 284453285.435 ops/s
Iteration  21: 291257013.932 ops/s
Iteration  22: 291131146.275 ops/s
Iteration  23: 284002095.562 ops/s
Iteration  24: 287886124.139 ops/s
Iteration  25: 294741521.506 ops/s
Iteration  26: 287807770.510 ops/s
Iteration  27: 285289569.610 ops/s
Iteration  28: 296305879.004 ops/s
Iteration  29: 286046705.191 ops/s
Iteration  30: 279660655.139 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_updateValueWith_collisions":
  291707432.579 ±(99.9%) 4369286.282 ops/s [Average]
  (min, avg, max) = (279660655.139, 291707432.579, 308672956.283), stdev = 6539742.510
  CI (99.9%): [287338146.297, 296076718.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt          Score         Error  Units
HashBiMapTest._Benchmark.benchmark_updateValueWith_collisions  thrpt   30  291707432.579 ± 4369286.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_updateValue_collisions$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_updateValue_collisions

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149105636.132 ops/s
# Warmup Iteration   2: 284040556.869 ops/s
# Warmup Iteration   3: 241685424.951 ops/s
# Warmup Iteration   4: 292244606.627 ops/s
# Warmup Iteration   5: 287720019.679 ops/s
# Warmup Iteration   6: 298266399.260 ops/s
# Warmup Iteration   7: 294436368.275 ops/s
# Warmup Iteration   8: 289743429.676 ops/s
# Warmup Iteration   9: 296913481.730 ops/s
# Warmup Iteration  10: 295818574.840 ops/s
# Warmup Iteration  11: 295493209.843 ops/s
# Warmup Iteration  12: 298571239.064 ops/s
# Warmup Iteration  13: 294801272.352 ops/s
# Warmup Iteration  14: 292334226.056 ops/s
# Warmup Iteration  15: 293483234.535 ops/s
# Warmup Iteration  16: 294208015.915 ops/s
# Warmup Iteration  17: 289112481.611 ops/s
# Warmup Iteration  18: 295001530.216 ops/s
# Warmup Iteration  19: 294789436.343 ops/s
# Warmup Iteration  20: 297030625.842 ops/s
# Warmup Iteration  21: 286912353.113 ops/s
# Warmup Iteration  22: 288709215.554 ops/s
# Warmup Iteration  23: 287519306.250 ops/s
# Warmup Iteration  24: 288337354.669 ops/s
# Warmup Iteration  25: 290598209.286 ops/s
# Warmup Iteration  26: 294874268.782 ops/s
# Warmup Iteration  27: 288084603.762 ops/s
# Warmup Iteration  28: 291081949.584 ops/s
# Warmup Iteration  29: 288187566.704 ops/s
# Warmup Iteration  30: 285352086.046 ops/s
Iteration   1: 287387625.939 ops/s
Iteration   2: 289062797.291 ops/s
Iteration   3: 285619954.063 ops/s
Iteration   4: 289309831.505 ops/s
Iteration   5: 294202179.057 ops/s
Iteration   6: 287694222.568 ops/s
Iteration   7: 295630522.544 ops/s
Iteration   8: 283748003.641 ops/s
Iteration   9: 287657766.426 ops/s
Iteration  10: 286777890.894 ops/s
Iteration  11: 288303152.169 ops/s
Iteration  12: 292739992.720 ops/s
Iteration  13: 286806796.976 ops/s
Iteration  14: 289400349.080 ops/s
Iteration  15: 295065050.942 ops/s
Iteration  16: 298588725.938 ops/s
Iteration  17: 287344919.678 ops/s
Iteration  18: 289100658.895 ops/s
Iteration  19: 290071126.799 ops/s
Iteration  20: 289945830.489 ops/s
Iteration  21: 296392186.348 ops/s
Iteration  22: 288251786.819 ops/s
Iteration  23: 282956157.421 ops/s
Iteration  24: 296568684.489 ops/s
Iteration  25: 293858494.937 ops/s
Iteration  26: 291691471.238 ops/s
Iteration  27: 290152318.388 ops/s
Iteration  28: 285347629.950 ops/s
Iteration  29: 281026239.805 ops/s
Iteration  30: 283793554.922 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_updateValue_collisions":
  289483197.398 ±(99.9%) 2915827.363 ops/s [Average]
  (min, avg, max) = (281026239.805, 289483197.398, 298588725.938), stdev = 4364273.459
  CI (99.9%): [286567370.035, 292399024.760] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt          Score         Error  Units
HashBiMapTest._Benchmark.benchmark_updateValue_collisions  thrpt   30  289483197.398 ± 2915827.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_valuePreservation$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_valuePreservation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1179357.760 ops/s
# Warmup Iteration   2: 2238151.509 ops/s
# Warmup Iteration   3: 2443116.120 ops/s
# Warmup Iteration   4: 2400415.231 ops/s
# Warmup Iteration   5: 2003622.452 ops/s
# Warmup Iteration   6: 2377233.647 ops/s
# Warmup Iteration   7: 2375229.179 ops/s
# Warmup Iteration   8: 2441853.388 ops/s
# Warmup Iteration   9: 2376972.830 ops/s
# Warmup Iteration  10: 2486472.755 ops/s
# Warmup Iteration  11: 2486480.178 ops/s
# Warmup Iteration  12: 2405590.953 ops/s
# Warmup Iteration  13: 2479110.495 ops/s
# Warmup Iteration  14: 2442663.842 ops/s
# Warmup Iteration  15: 2431039.575 ops/s
# Warmup Iteration  16: 2501615.403 ops/s
# Warmup Iteration  17: 2365298.717 ops/s
# Warmup Iteration  18: 2440166.853 ops/s
# Warmup Iteration  19: 2503901.025 ops/s
# Warmup Iteration  20: 2489655.654 ops/s
# Warmup Iteration  21: 2522897.801 ops/s
# Warmup Iteration  22: 2454217.957 ops/s
# Warmup Iteration  23: 2380679.894 ops/s
# Warmup Iteration  24: 2493136.945 ops/s
# Warmup Iteration  25: 2444760.222 ops/s
# Warmup Iteration  26: 2407811.499 ops/s
# Warmup Iteration  27: 2468105.637 ops/s
# Warmup Iteration  28: 2496828.388 ops/s
# Warmup Iteration  29: 2474034.409 ops/s
# Warmup Iteration  30: 2534745.754 ops/s
Iteration   1: 2567040.366 ops/s
Iteration   2: 2483585.914 ops/s
Iteration   3: 2460213.931 ops/s
Iteration   4: 2489369.693 ops/s
Iteration   5: 2482709.400 ops/s
Iteration   6: 2371798.999 ops/s
Iteration   7: 2471890.095 ops/s
Iteration   8: 2461793.351 ops/s
Iteration   9: 2504628.187 ops/s
Iteration  10: 2380109.752 ops/s
Iteration  11: 2496975.239 ops/s
Iteration  12: 2407243.626 ops/s
Iteration  13: 2572656.239 ops/s
Iteration  14: 2562660.775 ops/s
Iteration  15: 2368715.485 ops/s
Iteration  16: 2522319.672 ops/s
Iteration  17: 2437911.247 ops/s
Iteration  18: 2473002.705 ops/s
Iteration  19: 2464416.711 ops/s
Iteration  20: 2494775.662 ops/s
Iteration  21: 2569329.054 ops/s
Iteration  22: 2365602.199 ops/s
Iteration  23: 2341783.315 ops/s
Iteration  24: 2459483.840 ops/s
Iteration  25: 2459119.176 ops/s
Iteration  26: 2346998.928 ops/s
Iteration  27: 2333769.221 ops/s
Iteration  28: 2420641.200 ops/s
Iteration  29: 2358291.906 ops/s
Iteration  30: 2460334.921 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_valuePreservation":
  2452972.360 ±(99.9%) 47263.810 ops/s [Average]
  (min, avg, max) = (2333769.221, 2452972.360, 2572656.239), stdev = 70742.251
  CI (99.9%): [2405708.550, 2500236.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_valuePreservation  thrpt   30  2452972.360 ± 47263.810  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_valuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_valuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1526836.380 ops/s
# Warmup Iteration   2: 4380240.433 ops/s
# Warmup Iteration   3: 4320991.660 ops/s
# Warmup Iteration   4: 3503296.325 ops/s
# Warmup Iteration   5: 4244587.391 ops/s
# Warmup Iteration   6: 4251082.160 ops/s
# Warmup Iteration   7: 4337487.505 ops/s
# Warmup Iteration   8: 4326269.480 ops/s
# Warmup Iteration   9: 4210604.059 ops/s
# Warmup Iteration  10: 4249402.594 ops/s
# Warmup Iteration  11: 4382165.582 ops/s
# Warmup Iteration  12: 4277038.613 ops/s
# Warmup Iteration  13: 4337291.452 ops/s
# Warmup Iteration  14: 4393350.436 ops/s
# Warmup Iteration  15: 4272423.984 ops/s
# Warmup Iteration  16: 4322032.749 ops/s
# Warmup Iteration  17: 4267342.086 ops/s
# Warmup Iteration  18: 4234072.803 ops/s
# Warmup Iteration  19: 4194868.790 ops/s
# Warmup Iteration  20: 4221124.294 ops/s
# Warmup Iteration  21: 4180883.600 ops/s
# Warmup Iteration  22: 4376985.105 ops/s
# Warmup Iteration  23: 4172592.683 ops/s
# Warmup Iteration  24: 4378132.804 ops/s
# Warmup Iteration  25: 4215079.460 ops/s
# Warmup Iteration  26: 4260973.954 ops/s
# Warmup Iteration  27: 4303276.156 ops/s
# Warmup Iteration  28: 4225144.993 ops/s
# Warmup Iteration  29: 4216133.507 ops/s
# Warmup Iteration  30: 4204152.604 ops/s
Iteration   1: 4326002.260 ops/s
Iteration   2: 4311410.880 ops/s
Iteration   3: 4319410.737 ops/s
Iteration   4: 4267942.190 ops/s
Iteration   5: 4311349.843 ops/s
Iteration   6: 4340105.059 ops/s
Iteration   7: 4403282.017 ops/s
Iteration   8: 4378400.892 ops/s
Iteration   9: 4272083.042 ops/s
Iteration  10: 4386422.932 ops/s
Iteration  11: 4272447.453 ops/s
Iteration  12: 4255465.061 ops/s
Iteration  13: 4148559.610 ops/s
Iteration  14: 4221833.981 ops/s
Iteration  15: 4257503.643 ops/s
Iteration  16: 4252618.595 ops/s
Iteration  17: 4240217.752 ops/s
Iteration  18: 4181211.091 ops/s
Iteration  19: 4219382.840 ops/s
Iteration  20: 4303343.472 ops/s
Iteration  21: 4206886.115 ops/s
Iteration  22: 4274694.499 ops/s
Iteration  23: 4281170.589 ops/s
Iteration  24: 4247189.041 ops/s
Iteration  25: 4188778.152 ops/s
Iteration  26: 4344830.661 ops/s
Iteration  27: 4258069.103 ops/s
Iteration  28: 4164375.537 ops/s
Iteration  29: 4152286.310 ops/s
Iteration  30: 4156689.785 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_valuesView":
  4264798.771 ±(99.9%) 46621.632 ops/s [Average]
  (min, avg, max) = (4148559.610, 4264798.771, 4403282.017), stdev = 69781.069
  CI (99.9%): [4218177.140, 4311420.403] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_valuesView  thrpt   30  4264798.771 ± 46621.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withAllKeyValueArguments$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withAllKeyValueArguments

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 770034.143 ops/s
# Warmup Iteration   2: 2035559.451 ops/s
# Warmup Iteration   3: 2076567.620 ops/s
# Warmup Iteration   4: 1779048.892 ops/s
# Warmup Iteration   5: 2206279.454 ops/s
# Warmup Iteration   6: 2126714.420 ops/s
# Warmup Iteration   7: 2100976.093 ops/s
# Warmup Iteration   8: 2066257.703 ops/s
# Warmup Iteration   9: 2126956.182 ops/s
# Warmup Iteration  10: 2184853.420 ops/s
# Warmup Iteration  11: 2091056.015 ops/s
# Warmup Iteration  12: 2108528.949 ops/s
# Warmup Iteration  13: 2140807.695 ops/s
# Warmup Iteration  14: 2253935.568 ops/s
# Warmup Iteration  15: 2118142.607 ops/s
# Warmup Iteration  16: 2075621.223 ops/s
# Warmup Iteration  17: 2057020.386 ops/s
# Warmup Iteration  18: 2053436.045 ops/s
# Warmup Iteration  19: 2133854.604 ops/s
# Warmup Iteration  20: 2059107.085 ops/s
# Warmup Iteration  21: 2070973.996 ops/s
# Warmup Iteration  22: 2078318.793 ops/s
# Warmup Iteration  23: 2091063.862 ops/s
# Warmup Iteration  24: 2028136.517 ops/s
# Warmup Iteration  25: 2081988.719 ops/s
# Warmup Iteration  26: 2100009.651 ops/s
# Warmup Iteration  27: 2073167.715 ops/s
# Warmup Iteration  28: 2109615.643 ops/s
# Warmup Iteration  29: 2088345.522 ops/s
# Warmup Iteration  30: 2102714.877 ops/s
Iteration   1: 2256612.944 ops/s
Iteration   2: 2252974.164 ops/s
Iteration   3: 2042933.671 ops/s
Iteration   4: 2044843.168 ops/s
Iteration   5: 2026137.483 ops/s
Iteration   6: 2071662.915 ops/s
Iteration   7: 2067159.464 ops/s
Iteration   8: 2108509.920 ops/s
Iteration   9: 2083514.227 ops/s
Iteration  10: 2134489.792 ops/s
Iteration  11: 2186943.973 ops/s
Iteration  12: 2088955.160 ops/s
Iteration  13: 2073505.119 ops/s
Iteration  14: 2056443.410 ops/s
Iteration  15: 2114115.213 ops/s
Iteration  16: 2237252.959 ops/s
Iteration  17: 2047824.369 ops/s
Iteration  18: 2212650.625 ops/s
Iteration  19: 2207750.501 ops/s
Iteration  20: 2261379.627 ops/s
Iteration  21: 2255483.560 ops/s
Iteration  22: 2253382.944 ops/s
Iteration  23: 2090123.483 ops/s
Iteration  24: 2063807.551 ops/s
Iteration  25: 2227615.840 ops/s
Iteration  26: 2251610.999 ops/s
Iteration  27: 2031399.071 ops/s
Iteration  28: 2257967.276 ops/s
Iteration  29: 2241507.466 ops/s
Iteration  30: 2221836.362 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withAllKeyValueArguments":
  2149013.109 ±(99.9%) 59022.141 ops/s [Average]
  (min, avg, max) = (2026137.483, 2149013.109, 2261379.627), stdev = 88341.569
  CI (99.9%): [2089990.967, 2208035.250] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_withAllKeyValueArguments  thrpt   30  2149013.109 ± 59022.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withAllKeyValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withAllKeyValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 809337.612 ops/s
# Warmup Iteration   2: 2221375.396 ops/s
# Warmup Iteration   3: 2162353.176 ops/s
# Warmup Iteration   4: 1732837.858 ops/s
# Warmup Iteration   5: 2117936.026 ops/s
# Warmup Iteration   6: 2153542.571 ops/s
# Warmup Iteration   7: 2189365.000 ops/s
# Warmup Iteration   8: 2236342.062 ops/s
# Warmup Iteration   9: 2143398.852 ops/s
# Warmup Iteration  10: 2128260.203 ops/s
# Warmup Iteration  11: 2184909.094 ops/s
# Warmup Iteration  12: 2262002.808 ops/s
# Warmup Iteration  13: 2235173.569 ops/s
# Warmup Iteration  14: 2209644.373 ops/s
# Warmup Iteration  15: 2103539.642 ops/s
# Warmup Iteration  16: 2106130.626 ops/s
# Warmup Iteration  17: 2109713.309 ops/s
# Warmup Iteration  18: 2134225.948 ops/s
# Warmup Iteration  19: 2238813.422 ops/s
# Warmup Iteration  20: 2119539.968 ops/s
# Warmup Iteration  21: 2215475.342 ops/s
# Warmup Iteration  22: 2152965.535 ops/s
# Warmup Iteration  23: 2246935.966 ops/s
# Warmup Iteration  24: 2153541.208 ops/s
# Warmup Iteration  25: 2153826.490 ops/s
# Warmup Iteration  26: 2139110.729 ops/s
# Warmup Iteration  27: 2127351.886 ops/s
# Warmup Iteration  28: 2101734.584 ops/s
# Warmup Iteration  29: 2093677.240 ops/s
# Warmup Iteration  30: 2199288.695 ops/s
Iteration   1: 2198845.398 ops/s
Iteration   2: 2164569.379 ops/s
Iteration   3: 2240279.825 ops/s
Iteration   4: 2122653.940 ops/s
Iteration   5: 2122891.382 ops/s
Iteration   6: 2277067.977 ops/s
Iteration   7: 2290760.721 ops/s
Iteration   8: 2095537.328 ops/s
Iteration   9: 2163031.809 ops/s
Iteration  10: 2301201.099 ops/s
Iteration  11: 2304532.218 ops/s
Iteration  12: 2209628.766 ops/s
Iteration  13: 2086971.389 ops/s
Iteration  14: 2215197.481 ops/s
Iteration  15: 2224741.121 ops/s
Iteration  16: 2122396.921 ops/s
Iteration  17: 2089433.485 ops/s
Iteration  18: 2131029.525 ops/s
Iteration  19: 2194151.311 ops/s
Iteration  20: 2156679.179 ops/s
Iteration  21: 2129885.536 ops/s
Iteration  22: 2129027.700 ops/s
Iteration  23: 2072000.972 ops/s
Iteration  24: 2200953.555 ops/s
Iteration  25: 2309569.416 ops/s
Iteration  26: 2307155.021 ops/s
Iteration  27: 2262033.525 ops/s
Iteration  28: 2070537.904 ops/s
Iteration  29: 2110329.797 ops/s
Iteration  30: 2129172.178 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withAllKeyValues":
  2181075.529 ±(99.9%) 51722.879 ops/s [Average]
  (min, avg, max) = (2070537.904, 2181075.529, 2309569.416), stdev = 77416.375
  CI (99.9%): [2129352.650, 2232798.407] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_withAllKeyValues  thrpt   30  2181075.529 ± 51722.879  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 615093.607 ops/s
# Warmup Iteration   2: 1713993.658 ops/s
# Warmup Iteration   3: 1748563.483 ops/s
# Warmup Iteration   4: 1430794.092 ops/s
# Warmup Iteration   5: 1716508.063 ops/s
# Warmup Iteration   6: 1702154.429 ops/s
# Warmup Iteration   7: 1689770.294 ops/s
# Warmup Iteration   8: 1684527.452 ops/s
# Warmup Iteration   9: 1715798.803 ops/s
# Warmup Iteration  10: 1775062.746 ops/s
# Warmup Iteration  11: 1775878.904 ops/s
# Warmup Iteration  12: 1706682.250 ops/s
# Warmup Iteration  13: 1778966.354 ops/s
# Warmup Iteration  14: 1804521.470 ops/s
# Warmup Iteration  15: 1800375.882 ops/s
# Warmup Iteration  16: 1815684.675 ops/s
# Warmup Iteration  17: 1685052.788 ops/s
# Warmup Iteration  18: 1752612.739 ops/s
# Warmup Iteration  19: 1685087.499 ops/s
# Warmup Iteration  20: 1716391.912 ops/s
# Warmup Iteration  21: 1793019.612 ops/s
# Warmup Iteration  22: 1694709.399 ops/s
# Warmup Iteration  23: 1763885.547 ops/s
# Warmup Iteration  24: 1739271.396 ops/s
# Warmup Iteration  25: 1800688.877 ops/s
# Warmup Iteration  26: 1828240.464 ops/s
# Warmup Iteration  27: 1840638.669 ops/s
# Warmup Iteration  28: 1798377.130 ops/s
# Warmup Iteration  29: 1804534.577 ops/s
# Warmup Iteration  30: 1703860.855 ops/s
Iteration   1: 1747543.443 ops/s
Iteration   2: 1697995.745 ops/s
Iteration   3: 1817468.962 ops/s
Iteration   4: 1834794.376 ops/s
Iteration   5: 1838692.805 ops/s
Iteration   6: 1861895.014 ops/s
Iteration   7: 1866099.487 ops/s
Iteration   8: 1736271.499 ops/s
Iteration   9: 1744321.930 ops/s
Iteration  10: 1721012.866 ops/s
Iteration  11: 1705850.362 ops/s
Iteration  12: 1736905.559 ops/s
Iteration  13: 1787889.127 ops/s
Iteration  14: 1765733.769 ops/s
Iteration  15: 1734104.229 ops/s
Iteration  16: 1681461.542 ops/s
Iteration  17: 1798811.662 ops/s
Iteration  18: 1706430.711 ops/s
Iteration  19: 1714208.279 ops/s
Iteration  20: 1725834.460 ops/s
Iteration  21: 1692807.762 ops/s
Iteration  22: 1675095.675 ops/s
Iteration  23: 1745801.979 ops/s
Iteration  24: 1788757.088 ops/s
Iteration  25: 1711375.196 ops/s
Iteration  26: 1673336.160 ops/s
Iteration  27: 1761131.807 ops/s
Iteration  28: 1749295.372 ops/s
Iteration  29: 1694408.395 ops/s
Iteration  30: 1688081.531 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withKeyValue":
  1746780.560 ±(99.9%) 36968.135 ops/s [Average]
  (min, avg, max) = (1673336.160, 1746780.560, 1866099.487), stdev = 55332.169
  CI (99.9%): [1709812.425, 1783748.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_withKeyValue  thrpt   30  1746780.560 ± 36968.135  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 228555.380 ops/s
# Warmup Iteration   2: 507964.676 ops/s
# Warmup Iteration   3: 532634.877 ops/s
# Warmup Iteration   4: 497156.202 ops/s
# Warmup Iteration   5: 478858.727 ops/s
# Warmup Iteration   6: 532730.723 ops/s
# Warmup Iteration   7: 522608.097 ops/s
# Warmup Iteration   8: 524797.632 ops/s
# Warmup Iteration   9: 550083.845 ops/s
# Warmup Iteration  10: 527084.551 ops/s
# Warmup Iteration  11: 527492.476 ops/s
# Warmup Iteration  12: 522033.249 ops/s
# Warmup Iteration  13: 541571.828 ops/s
# Warmup Iteration  14: 549990.692 ops/s
# Warmup Iteration  15: 532047.807 ops/s
# Warmup Iteration  16: 528874.357 ops/s
# Warmup Iteration  17: 534301.387 ops/s
# Warmup Iteration  18: 528198.668 ops/s
# Warmup Iteration  19: 532326.080 ops/s
# Warmup Iteration  20: 543269.994 ops/s
# Warmup Iteration  21: 513758.523 ops/s
# Warmup Iteration  22: 534969.406 ops/s
# Warmup Iteration  23: 517543.584 ops/s
# Warmup Iteration  24: 540689.838 ops/s
# Warmup Iteration  25: 550881.863 ops/s
# Warmup Iteration  26: 515995.523 ops/s
# Warmup Iteration  27: 511369.617 ops/s
# Warmup Iteration  28: 512716.351 ops/s
# Warmup Iteration  29: 520760.144 ops/s
# Warmup Iteration  30: 517583.272 ops/s
Iteration   1: 516392.437 ops/s
Iteration   2: 520329.952 ops/s
Iteration   3: 521843.520 ops/s
Iteration   4: 540323.808 ops/s
Iteration   5: 524644.922 ops/s
Iteration   6: 519169.246 ops/s
Iteration   7: 525854.166 ops/s
Iteration   8: 515766.303 ops/s
Iteration   9: 513753.221 ops/s
Iteration  10: 521665.733 ops/s
Iteration  11: 528133.988 ops/s
Iteration  12: 517366.289 ops/s
Iteration  13: 515464.350 ops/s
Iteration  14: 519177.246 ops/s
Iteration  15: 538904.660 ops/s
Iteration  16: 525522.964 ops/s
Iteration  17: 543702.489 ops/s
Iteration  18: 556459.518 ops/s
Iteration  19: 559449.752 ops/s
Iteration  20: 562857.199 ops/s
Iteration  21: 559990.364 ops/s
Iteration  22: 538192.963 ops/s
Iteration  23: 532846.115 ops/s
Iteration  24: 517476.111 ops/s
Iteration  25: 512833.066 ops/s
Iteration  26: 521102.835 ops/s
Iteration  27: 534999.702 ops/s
Iteration  28: 542351.966 ops/s
Iteration  29: 517959.319 ops/s
Iteration  30: 521814.062 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withKeysValues":
  529544.942 ±(99.9%) 9975.716 ops/s [Average]
  (min, avg, max) = (512833.066, 529544.942, 562857.199), stdev = 14931.183
  CI (99.9%): [519569.227, 539520.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_withKeysValues  thrpt   30  529544.942 ± 9975.716  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 643041.940 ops/s
# Warmup Iteration   2: 1806517.986 ops/s
# Warmup Iteration   3: 1854954.280 ops/s
# Warmup Iteration   4: 1569230.992 ops/s
# Warmup Iteration   5: 1847072.076 ops/s
# Warmup Iteration   6: 1821096.560 ops/s
# Warmup Iteration   7: 1850984.649 ops/s
# Warmup Iteration   8: 1852920.915 ops/s
# Warmup Iteration   9: 1847903.090 ops/s
# Warmup Iteration  10: 1859952.837 ops/s
# Warmup Iteration  11: 1855074.500 ops/s
# Warmup Iteration  12: 1840135.152 ops/s
# Warmup Iteration  13: 1816495.759 ops/s
# Warmup Iteration  14: 1812434.884 ops/s
# Warmup Iteration  15: 1842558.782 ops/s
# Warmup Iteration  16: 1861736.635 ops/s
# Warmup Iteration  17: 1877643.296 ops/s
# Warmup Iteration  18: 1828584.815 ops/s
# Warmup Iteration  19: 1889655.330 ops/s
# Warmup Iteration  20: 1914944.544 ops/s
# Warmup Iteration  21: 1814335.777 ops/s
# Warmup Iteration  22: 1865911.902 ops/s
# Warmup Iteration  23: 1926127.206 ops/s
# Warmup Iteration  24: 1916979.698 ops/s
# Warmup Iteration  25: 1856952.668 ops/s
# Warmup Iteration  26: 1850554.543 ops/s
# Warmup Iteration  27: 1876015.213 ops/s
# Warmup Iteration  28: 1929820.365 ops/s
# Warmup Iteration  29: 1803086.799 ops/s
# Warmup Iteration  30: 1867199.155 ops/s
Iteration   1: 1897456.933 ops/s
Iteration   2: 1829388.388 ops/s
Iteration   3: 1814440.505 ops/s
Iteration   4: 1832386.865 ops/s
Iteration   5: 1832525.514 ops/s
Iteration   6: 1860029.988 ops/s
Iteration   7: 1833821.990 ops/s
Iteration   8: 1792700.213 ops/s
Iteration   9: 1798361.446 ops/s
Iteration  10: 1820233.739 ops/s
Iteration  11: 1828239.570 ops/s
Iteration  12: 1865334.211 ops/s
Iteration  13: 1867829.533 ops/s
Iteration  14: 1927619.852 ops/s
Iteration  15: 1913835.096 ops/s
Iteration  16: 1927015.131 ops/s
Iteration  17: 1869724.787 ops/s
Iteration  18: 1864749.959 ops/s
Iteration  19: 1916627.136 ops/s
Iteration  20: 1928516.362 ops/s
Iteration  21: 1842723.742 ops/s
Iteration  22: 1904620.223 ops/s
Iteration  23: 1826027.324 ops/s
Iteration  24: 1893941.685 ops/s
Iteration  25: 1906091.163 ops/s
Iteration  26: 1821019.656 ops/s
Iteration  27: 1840691.378 ops/s
Iteration  28: 1802279.637 ops/s
Iteration  29: 1835047.561 ops/s
Iteration  30: 1827545.032 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMap":
  1857360.821 ±(99.9%) 28022.776 ops/s [Average]
  (min, avg, max) = (1792700.213, 1857360.821, 1928516.362), stdev = 41943.175
  CI (99.9%): [1829338.044, 1885383.597] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_withMap  thrpt   30  1857360.821 ± 28022.776  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 860302.419 ops/s
# Warmup Iteration   2: 2448099.273 ops/s
# Warmup Iteration   3: 2083645.501 ops/s
# Warmup Iteration   4: 2504029.792 ops/s
# Warmup Iteration   5: 2533252.846 ops/s
# Warmup Iteration   6: 2469551.689 ops/s
# Warmup Iteration   7: 2466017.150 ops/s
# Warmup Iteration   8: 2562214.770 ops/s
# Warmup Iteration   9: 2511520.095 ops/s
# Warmup Iteration  10: 2464699.760 ops/s
# Warmup Iteration  11: 2519168.433 ops/s
# Warmup Iteration  12: 2483497.261 ops/s
# Warmup Iteration  13: 2456980.286 ops/s
# Warmup Iteration  14: 2487723.285 ops/s
# Warmup Iteration  15: 2514031.996 ops/s
# Warmup Iteration  16: 2548990.266 ops/s
# Warmup Iteration  17: 2494128.868 ops/s
# Warmup Iteration  18: 2444894.839 ops/s
# Warmup Iteration  19: 2526706.258 ops/s
# Warmup Iteration  20: 2542949.339 ops/s
# Warmup Iteration  21: 2562190.602 ops/s
# Warmup Iteration  22: 2557434.263 ops/s
# Warmup Iteration  23: 2654920.085 ops/s
# Warmup Iteration  24: 2502008.717 ops/s
# Warmup Iteration  25: 2467840.768 ops/s
# Warmup Iteration  26: 2430530.891 ops/s
# Warmup Iteration  27: 2433002.447 ops/s
# Warmup Iteration  28: 2443942.305 ops/s
# Warmup Iteration  29: 2484210.172 ops/s
# Warmup Iteration  30: 2467782.797 ops/s
Iteration   1: 2505825.929 ops/s
Iteration   2: 2465021.393 ops/s
Iteration   3: 2564623.457 ops/s
Iteration   4: 2483689.614 ops/s
Iteration   5: 2486188.431 ops/s
Iteration   6: 2444220.123 ops/s
Iteration   7: 2493600.211 ops/s
Iteration   8: 2531177.489 ops/s
Iteration   9: 2563888.482 ops/s
Iteration  10: 2505156.625 ops/s
Iteration  11: 2497442.667 ops/s
Iteration  12: 2477151.861 ops/s
Iteration  13: 2548385.465 ops/s
Iteration  14: 2535208.066 ops/s
Iteration  15: 2540557.515 ops/s
Iteration  16: 2572662.670 ops/s
Iteration  17: 2575709.445 ops/s
Iteration  18: 2482837.486 ops/s
Iteration  19: 2544798.797 ops/s
Iteration  20: 2513306.386 ops/s
Iteration  21: 2432483.815 ops/s
Iteration  22: 2461994.714 ops/s
Iteration  23: 2544566.781 ops/s
Iteration  24: 2475573.049 ops/s
Iteration  25: 2522780.936 ops/s
Iteration  26: 2452820.485 ops/s
Iteration  27: 2473646.577 ops/s
Iteration  28: 2478059.341 ops/s
Iteration  29: 2515940.087 ops/s
Iteration  30: 2459224.243 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapEmpty":
  2504951.405 ±(99.9%) 26912.613 ops/s [Average]
  (min, avg, max) = (2432483.815, 2504951.405, 2575709.445), stdev = 40281.535
  CI (99.9%): [2478038.792, 2531864.017] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_withMapEmpty  thrpt   30  2504951.405 ± 26912.613  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1379428.717 ops/s
# Warmup Iteration   2: 2824378.112 ops/s
# Warmup Iteration   3: 2482926.512 ops/s
# Warmup Iteration   4: 2972187.094 ops/s
# Warmup Iteration   5: 2995244.754 ops/s
# Warmup Iteration   6: 2829725.168 ops/s
# Warmup Iteration   7: 2879074.149 ops/s
# Warmup Iteration   8: 2896612.879 ops/s
# Warmup Iteration   9: 3018942.350 ops/s
# Warmup Iteration  10: 3022900.327 ops/s
# Warmup Iteration  11: 2897181.844 ops/s
# Warmup Iteration  12: 2912591.740 ops/s
# Warmup Iteration  13: 2868911.541 ops/s
# Warmup Iteration  14: 2907897.012 ops/s
# Warmup Iteration  15: 2923170.683 ops/s
# Warmup Iteration  16: 2944597.735 ops/s
# Warmup Iteration  17: 2911685.095 ops/s
# Warmup Iteration  18: 2901170.374 ops/s
# Warmup Iteration  19: 2891137.291 ops/s
# Warmup Iteration  20: 2999399.286 ops/s
# Warmup Iteration  21: 2951632.318 ops/s
# Warmup Iteration  22: 2953895.236 ops/s
# Warmup Iteration  23: 2957338.717 ops/s
# Warmup Iteration  24: 2999669.464 ops/s
# Warmup Iteration  25: 2934194.934 ops/s
# Warmup Iteration  26: 2868907.900 ops/s
# Warmup Iteration  27: 2939012.132 ops/s
# Warmup Iteration  28: 2924322.987 ops/s
# Warmup Iteration  29: 2884319.326 ops/s
# Warmup Iteration  30: 2934717.943 ops/s
Iteration   1: 2943727.268 ops/s
Iteration   2: 2945476.191 ops/s
Iteration   3: 2880670.338 ops/s
Iteration   4: 2953729.152 ops/s
Iteration   5: 2984974.282 ops/s
Iteration   6: 3122096.936 ops/s
Iteration   7: 3128157.429 ops/s
Iteration   8: 3017963.848 ops/s
Iteration   9: 2890920.762 ops/s
Iteration  10: 2952459.505 ops/s
Iteration  11: 2917427.636 ops/s
Iteration  12: 2920483.232 ops/s
Iteration  13: 2858725.657 ops/s
Iteration  14: 2918663.018 ops/s
Iteration  15: 2970421.825 ops/s
Iteration  16: 2989232.988 ops/s
Iteration  17: 2913708.901 ops/s
Iteration  18: 2845913.721 ops/s
Iteration  19: 2898924.321 ops/s
Iteration  20: 2918244.255 ops/s
Iteration  21: 2850849.665 ops/s
Iteration  22: 2870313.795 ops/s
Iteration  23: 2841506.472 ops/s
Iteration  24: 2910871.848 ops/s
Iteration  25: 2960355.878 ops/s
Iteration  26: 2889349.270 ops/s
Iteration  27: 2895412.206 ops/s
Iteration  28: 2847857.008 ops/s
Iteration  29: 2890058.298 ops/s
Iteration  30: 2994161.211 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty":
  2930755.231 ±(99.9%) 47350.074 ops/s [Average]
  (min, avg, max) = (2841506.472, 2930755.231, 3128157.429), stdev = 70871.368
  CI (99.9%): [2883405.156, 2978105.305] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty  thrpt   30  2930755.231 ± 47350.074  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750483.249 ops/s
# Warmup Iteration   2: 1880855.091 ops/s
# Warmup Iteration   3: 1875310.468 ops/s
# Warmup Iteration   4: 1536987.298 ops/s
# Warmup Iteration   5: 1824600.765 ops/s
# Warmup Iteration   6: 1908595.950 ops/s
# Warmup Iteration   7: 1930968.090 ops/s
# Warmup Iteration   8: 1906124.926 ops/s
# Warmup Iteration   9: 1860874.359 ops/s
# Warmup Iteration  10: 1903040.165 ops/s
# Warmup Iteration  11: 1877799.055 ops/s
# Warmup Iteration  12: 1924832.250 ops/s
# Warmup Iteration  13: 1843062.238 ops/s
# Warmup Iteration  14: 1833552.000 ops/s
# Warmup Iteration  15: 1847619.448 ops/s
# Warmup Iteration  16: 1836834.238 ops/s
# Warmup Iteration  17: 1850551.693 ops/s
# Warmup Iteration  18: 1856670.511 ops/s
# Warmup Iteration  19: 1820661.823 ops/s
# Warmup Iteration  20: 1849625.639 ops/s
# Warmup Iteration  21: 1904457.045 ops/s
# Warmup Iteration  22: 1920937.883 ops/s
# Warmup Iteration  23: 1973540.661 ops/s
# Warmup Iteration  24: 1893695.134 ops/s
# Warmup Iteration  25: 1849026.275 ops/s
# Warmup Iteration  26: 1815770.079 ops/s
# Warmup Iteration  27: 1901005.941 ops/s
# Warmup Iteration  28: 1871785.116 ops/s
# Warmup Iteration  29: 1931010.727 ops/s
# Warmup Iteration  30: 1847127.404 ops/s
Iteration   1: 1836511.722 ops/s
Iteration   2: 1830762.112 ops/s
Iteration   3: 1839516.075 ops/s
Iteration   4: 1879482.366 ops/s
Iteration   5: 1915878.837 ops/s
Iteration   6: 1905400.078 ops/s
Iteration   7: 1878706.063 ops/s
Iteration   8: 1868304.434 ops/s
Iteration   9: 1818831.584 ops/s
Iteration  10: 1852871.013 ops/s
Iteration  11: 1883512.452 ops/s
Iteration  12: 1811327.986 ops/s
Iteration  13: 1860590.882 ops/s
Iteration  14: 1879400.901 ops/s
Iteration  15: 1910535.087 ops/s
Iteration  16: 1851944.523 ops/s
Iteration  17: 1919028.720 ops/s
Iteration  18: 1939986.742 ops/s
Iteration  19: 1907952.699 ops/s
Iteration  20: 1830609.488 ops/s
Iteration  21: 1801986.840 ops/s
Iteration  22: 1849062.062 ops/s
Iteration  23: 1859368.002 ops/s
Iteration  24: 1844186.252 ops/s
Iteration  25: 1820452.899 ops/s
Iteration  26: 1830957.047 ops/s
Iteration  27: 1828003.267 ops/s
Iteration  28: 1890262.764 ops/s
Iteration  29: 1851865.487 ops/s
Iteration  30: 1879796.619 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterable":
  1862569.833 ±(99.9%) 23819.051 ops/s [Average]
  (min, avg, max) = (1801986.840, 1862569.833, 1939986.742), stdev = 35651.236
  CI (99.9%): [1838750.783, 1886388.884] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_withMapIterable  thrpt   30  1862569.833 ± 23819.051  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterableEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterableEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 979460.012 ops/s
# Warmup Iteration   2: 2690391.069 ops/s
# Warmup Iteration   3: 2165199.075 ops/s
# Warmup Iteration   4: 2710571.193 ops/s
# Warmup Iteration   5: 2672216.480 ops/s
# Warmup Iteration   6: 2634806.637 ops/s
# Warmup Iteration   7: 2698870.878 ops/s
# Warmup Iteration   8: 2793847.802 ops/s
# Warmup Iteration   9: 2637816.053 ops/s
# Warmup Iteration  10: 2685357.922 ops/s
# Warmup Iteration  11: 2724792.642 ops/s
# Warmup Iteration  12: 2696142.166 ops/s
# Warmup Iteration  13: 2656221.901 ops/s
# Warmup Iteration  14: 2824411.496 ops/s
# Warmup Iteration  15: 2800238.047 ops/s
# Warmup Iteration  16: 2774999.064 ops/s
# Warmup Iteration  17: 2674120.903 ops/s
# Warmup Iteration  18: 2789230.253 ops/s
# Warmup Iteration  19: 2647729.948 ops/s
# Warmup Iteration  20: 2628522.825 ops/s
# Warmup Iteration  21: 2782372.224 ops/s
# Warmup Iteration  22: 2863893.583 ops/s
# Warmup Iteration  23: 2642899.757 ops/s
# Warmup Iteration  24: 2686069.783 ops/s
# Warmup Iteration  25: 2626889.453 ops/s
# Warmup Iteration  26: 2667864.313 ops/s
# Warmup Iteration  27: 2773074.122 ops/s
# Warmup Iteration  28: 2598961.125 ops/s
# Warmup Iteration  29: 2630381.232 ops/s
# Warmup Iteration  30: 2669110.414 ops/s
Iteration   1: 2629363.930 ops/s
Iteration   2: 2661453.166 ops/s
Iteration   3: 2638600.324 ops/s
Iteration   4: 2772013.370 ops/s
Iteration   5: 2853985.552 ops/s
Iteration   6: 2662923.583 ops/s
Iteration   7: 2623598.364 ops/s
Iteration   8: 2870818.768 ops/s
Iteration   9: 2762676.395 ops/s
Iteration  10: 2665924.836 ops/s
Iteration  11: 2662591.208 ops/s
Iteration  12: 2774986.490 ops/s
Iteration  13: 2825182.139 ops/s
Iteration  14: 2641805.564 ops/s
Iteration  15: 2712778.444 ops/s
Iteration  16: 2646097.391 ops/s
Iteration  17: 2605841.534 ops/s
Iteration  18: 2618626.876 ops/s
Iteration  19: 2663546.582 ops/s
Iteration  20: 2642464.799 ops/s
Iteration  21: 2600399.393 ops/s
Iteration  22: 2860392.697 ops/s
Iteration  23: 2859907.010 ops/s
Iteration  24: 2874578.714 ops/s
Iteration  25: 2644515.437 ops/s
Iteration  26: 2657652.045 ops/s
Iteration  27: 2615077.248 ops/s
Iteration  28: 2608964.704 ops/s
Iteration  29: 2617518.863 ops/s
Iteration  30: 2670923.946 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterableEmpty":
  2698173.646 ±(99.9%) 61972.115 ops/s [Average]
  (min, avg, max) = (2600399.393, 2698173.646, 2874578.714), stdev = 92756.952
  CI (99.9%): [2636201.530, 2760145.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_withMapIterableEmpty  thrpt   30  2698173.646 ± 61972.115  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1404654.468 ops/s
# Warmup Iteration   2: 3083207.800 ops/s
# Warmup Iteration   3: 2544571.519 ops/s
# Warmup Iteration   4: 3117740.680 ops/s
# Warmup Iteration   5: 3065042.613 ops/s
# Warmup Iteration   6: 3102839.079 ops/s
# Warmup Iteration   7: 3104175.983 ops/s
# Warmup Iteration   8: 3140959.471 ops/s
# Warmup Iteration   9: 3076845.546 ops/s
# Warmup Iteration  10: 3101067.758 ops/s
# Warmup Iteration  11: 3077091.760 ops/s
# Warmup Iteration  12: 3085758.120 ops/s
# Warmup Iteration  13: 3083620.143 ops/s
# Warmup Iteration  14: 3114882.518 ops/s
# Warmup Iteration  15: 3104926.714 ops/s
# Warmup Iteration  16: 3198334.201 ops/s
# Warmup Iteration  17: 3113723.285 ops/s
# Warmup Iteration  18: 3068060.206 ops/s
# Warmup Iteration  19: 3032549.131 ops/s
# Warmup Iteration  20: 3026284.326 ops/s
# Warmup Iteration  21: 3085864.989 ops/s
# Warmup Iteration  22: 3052926.292 ops/s
# Warmup Iteration  23: 3047536.056 ops/s
# Warmup Iteration  24: 3058545.966 ops/s
# Warmup Iteration  25: 3087418.625 ops/s
# Warmup Iteration  26: 3080023.857 ops/s
# Warmup Iteration  27: 3079315.717 ops/s
# Warmup Iteration  28: 3052301.025 ops/s
# Warmup Iteration  29: 3120772.186 ops/s
# Warmup Iteration  30: 3093310.758 ops/s
Iteration   1: 3082174.602 ops/s
Iteration   2: 3096790.400 ops/s
Iteration   3: 3076643.929 ops/s
Iteration   4: 3063704.588 ops/s
Iteration   5: 3093800.281 ops/s
Iteration   6: 3052239.964 ops/s
Iteration   7: 3064645.874 ops/s
Iteration   8: 3049339.104 ops/s
Iteration   9: 3049316.243 ops/s
Iteration  10: 3061474.579 ops/s
Iteration  11: 3084798.855 ops/s
Iteration  12: 3214249.351 ops/s
Iteration  13: 3211360.282 ops/s
Iteration  14: 3091073.984 ops/s
Iteration  15: 3102755.428 ops/s
Iteration  16: 3028151.574 ops/s
Iteration  17: 3151237.757 ops/s
Iteration  18: 3041800.699 ops/s
Iteration  19: 3065100.530 ops/s
Iteration  20: 3035490.907 ops/s
Iteration  21: 3090711.654 ops/s
Iteration  22: 3011825.849 ops/s
Iteration  23: 3107484.958 ops/s
Iteration  24: 3090038.500 ops/s
Iteration  25: 3034445.081 ops/s
Iteration  26: 3116706.642 ops/s
Iteration  27: 3021465.235 ops/s
Iteration  28: 3132549.806 ops/s
Iteration  29: 3108149.924 ops/s
Iteration  30: 3114082.898 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty":
  3084786.983 ±(99.9%) 32316.115 ops/s [Average]
  (min, avg, max) = (3011825.849, 3084786.983, 3214249.351), stdev = 48369.243
  CI (99.9%): [3052470.868, 3117103.097] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty  thrpt   30  3084786.983 ± 32316.115  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterableNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterableNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 45463.424 ops/s
# Warmup Iteration   2: 116591.075 ops/s
# Warmup Iteration   3: 142890.845 ops/s
# Warmup Iteration   4: 145139.118 ops/s
# Warmup Iteration   5: 143573.227 ops/s
# Warmup Iteration   6: 141233.735 ops/s
# Warmup Iteration   7: 139704.888 ops/s
# Warmup Iteration   8: 150855.000 ops/s
# Warmup Iteration   9: 158248.627 ops/s
# Warmup Iteration  10: 150018.140 ops/s
# Warmup Iteration  11: 153530.753 ops/s
# Warmup Iteration  12: 151727.275 ops/s
# Warmup Iteration  13: 151332.239 ops/s
# Warmup Iteration  14: 152999.373 ops/s
# Warmup Iteration  15: 152736.285 ops/s
# Warmup Iteration  16: 150327.961 ops/s
# Warmup Iteration  17: 153521.130 ops/s
# Warmup Iteration  18: 159966.461 ops/s
# Warmup Iteration  19: 160982.242 ops/s
# Warmup Iteration  20: 161374.430 ops/s
# Warmup Iteration  21: 161736.101 ops/s
# Warmup Iteration  22: 161016.506 ops/s
# Warmup Iteration  23: 151808.055 ops/s
# Warmup Iteration  24: 152569.422 ops/s
# Warmup Iteration  25: 152430.241 ops/s
# Warmup Iteration  26: 153001.183 ops/s
# Warmup Iteration  27: 152907.849 ops/s
# Warmup Iteration  28: 152600.423 ops/s
# Warmup Iteration  29: 150879.213 ops/s
# Warmup Iteration  30: 152851.083 ops/s
Iteration   1: 152554.653 ops/s
Iteration   2: 160461.184 ops/s
Iteration   3: 160724.052 ops/s
Iteration   4: 152884.541 ops/s
Iteration   5: 159389.494 ops/s
Iteration   6: 161616.643 ops/s
Iteration   7: 161356.432 ops/s
Iteration   8: 152750.152 ops/s
Iteration   9: 154536.515 ops/s
Iteration  10: 156759.440 ops/s
Iteration  11: 154488.373 ops/s
Iteration  12: 155977.584 ops/s
Iteration  13: 155305.077 ops/s
Iteration  14: 154563.734 ops/s
Iteration  15: 154129.289 ops/s
Iteration  16: 154012.858 ops/s
Iteration  17: 159799.603 ops/s
Iteration  18: 158323.869 ops/s
Iteration  19: 160032.481 ops/s
Iteration  20: 158911.853 ops/s
Iteration  21: 146242.661 ops/s
Iteration  22: 150056.328 ops/s
Iteration  23: 145341.791 ops/s
Iteration  24: 153690.499 ops/s
Iteration  25: 158242.237 ops/s
Iteration  26: 159626.287 ops/s
Iteration  27: 161124.019 ops/s
Iteration  28: 159749.146 ops/s
Iteration  29: 160658.475 ops/s
Iteration  30: 159644.175 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterableNull":
  156431.782 ±(99.9%) 2891.019 ops/s [Average]
  (min, avg, max) = (145341.791, 156431.782, 161616.643), stdev = 4327.142
  CI (99.9%): [153540.762, 159322.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_withMapIterableNull  thrpt   30  156431.782 ± 2891.019  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterableTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterableTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 910625.626 ops/s
# Warmup Iteration   2: 2315025.906 ops/s
# Warmup Iteration   3: 1905247.461 ops/s
# Warmup Iteration   4: 2362983.831 ops/s
# Warmup Iteration   5: 2321073.032 ops/s
# Warmup Iteration   6: 2343450.114 ops/s
# Warmup Iteration   7: 2324089.100 ops/s
# Warmup Iteration   8: 2322457.130 ops/s
# Warmup Iteration   9: 2301558.806 ops/s
# Warmup Iteration  10: 2352768.854 ops/s
# Warmup Iteration  11: 2390509.070 ops/s
# Warmup Iteration  12: 2351143.692 ops/s
# Warmup Iteration  13: 2315242.007 ops/s
# Warmup Iteration  14: 2382558.074 ops/s
# Warmup Iteration  15: 2419631.863 ops/s
# Warmup Iteration  16: 2383506.309 ops/s
# Warmup Iteration  17: 2372249.587 ops/s
# Warmup Iteration  18: 2529346.756 ops/s
# Warmup Iteration  19: 2325585.295 ops/s
# Warmup Iteration  20: 2302781.414 ops/s
# Warmup Iteration  21: 2367792.168 ops/s
# Warmup Iteration  22: 2302975.797 ops/s
# Warmup Iteration  23: 2458388.295 ops/s
# Warmup Iteration  24: 2329923.822 ops/s
# Warmup Iteration  25: 2395367.902 ops/s
# Warmup Iteration  26: 2346117.844 ops/s
# Warmup Iteration  27: 2433405.977 ops/s
# Warmup Iteration  28: 2338495.862 ops/s
# Warmup Iteration  29: 2345556.602 ops/s
# Warmup Iteration  30: 2308557.760 ops/s
Iteration   1: 2347851.830 ops/s
Iteration   2: 2300946.206 ops/s
Iteration   3: 2329413.768 ops/s
Iteration   4: 2437915.774 ops/s
Iteration   5: 2375373.647 ops/s
Iteration   6: 2320319.016 ops/s
Iteration   7: 2340639.037 ops/s
Iteration   8: 2357803.371 ops/s
Iteration   9: 2364201.390 ops/s
Iteration  10: 2292555.500 ops/s
Iteration  11: 2345480.642 ops/s
Iteration  12: 2449429.933 ops/s
Iteration  13: 2367325.944 ops/s
Iteration  14: 2409839.180 ops/s
Iteration  15: 2289837.083 ops/s
Iteration  16: 2289627.745 ops/s
Iteration  17: 2306590.608 ops/s
Iteration  18: 2342868.397 ops/s
Iteration  19: 2321295.557 ops/s
Iteration  20: 2272754.819 ops/s
Iteration  21: 2400872.200 ops/s
Iteration  22: 2546303.671 ops/s
Iteration  23: 2477307.684 ops/s
Iteration  24: 2537957.664 ops/s
Iteration  25: 2358520.354 ops/s
Iteration  26: 2343923.789 ops/s
Iteration  27: 2313233.956 ops/s
Iteration  28: 2397775.941 ops/s
Iteration  29: 2332902.745 ops/s
Iteration  30: 2277403.416 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapIterableTargetEmpty":
  2361609.029 ±(99.9%) 46987.648 ops/s [Average]
  (min, avg, max) = (2272754.819, 2361609.029, 2546303.671), stdev = 70328.904
  CI (99.9%): [2314621.381, 2408596.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_withMapIterableTargetEmpty  thrpt   30  2361609.029 ± 46987.648  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 45231.560 ops/s
# Warmup Iteration   2: 122546.563 ops/s
# Warmup Iteration   3: 136957.359 ops/s
# Warmup Iteration   4: 136842.940 ops/s
# Warmup Iteration   5: 135915.446 ops/s
# Warmup Iteration   6: 135122.230 ops/s
# Warmup Iteration   7: 136108.046 ops/s
# Warmup Iteration   8: 147120.155 ops/s
# Warmup Iteration   9: 149678.790 ops/s
# Warmup Iteration  10: 147806.266 ops/s
# Warmup Iteration  11: 149458.830 ops/s
# Warmup Iteration  12: 148761.536 ops/s
# Warmup Iteration  13: 150674.477 ops/s
# Warmup Iteration  14: 148553.303 ops/s
# Warmup Iteration  15: 147841.992 ops/s
# Warmup Iteration  16: 149257.952 ops/s
# Warmup Iteration  17: 152012.595 ops/s
# Warmup Iteration  18: 149550.042 ops/s
# Warmup Iteration  19: 150775.759 ops/s
# Warmup Iteration  20: 152297.301 ops/s
# Warmup Iteration  21: 151480.333 ops/s
# Warmup Iteration  22: 148528.766 ops/s
# Warmup Iteration  23: 157355.218 ops/s
# Warmup Iteration  24: 151328.516 ops/s
# Warmup Iteration  25: 150809.421 ops/s
# Warmup Iteration  26: 164152.089 ops/s
# Warmup Iteration  27: 157597.614 ops/s
# Warmup Iteration  28: 152708.179 ops/s
# Warmup Iteration  29: 153007.176 ops/s
# Warmup Iteration  30: 150303.845 ops/s
Iteration   1: 149966.030 ops/s
Iteration   2: 158126.646 ops/s
Iteration   3: 158054.262 ops/s
Iteration   4: 151816.665 ops/s
Iteration   5: 153992.843 ops/s
Iteration   6: 150983.002 ops/s
Iteration   7: 152012.106 ops/s
Iteration   8: 152821.772 ops/s
Iteration   9: 151027.684 ops/s
Iteration  10: 154967.735 ops/s
Iteration  11: 153418.228 ops/s
Iteration  12: 153339.750 ops/s
Iteration  13: 165879.400 ops/s
Iteration  14: 151372.007 ops/s
Iteration  15: 155135.196 ops/s
Iteration  16: 149529.309 ops/s
Iteration  17: 151153.519 ops/s
Iteration  18: 151552.703 ops/s
Iteration  19: 150748.087 ops/s
Iteration  20: 151863.949 ops/s
Iteration  21: 152272.112 ops/s
Iteration  22: 150512.294 ops/s
Iteration  23: 150503.225 ops/s
Iteration  24: 145189.230 ops/s
Iteration  25: 147076.143 ops/s
Iteration  26: 151125.436 ops/s
Iteration  27: 159551.220 ops/s
Iteration  28: 165369.655 ops/s
Iteration  29: 165056.855 ops/s
Iteration  30: 153765.741 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapNull":
  153606.093 ±(99.9%) 3322.023 ops/s [Average]
  (min, avg, max) = (145189.230, 153606.093, 165879.400), stdev = 4972.249
  CI (99.9%): [150284.070, 156928.117] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_withMapNull  thrpt   30  153606.093 ± 3322.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 934351.831 ops/s
# Warmup Iteration   2: 2328093.479 ops/s
# Warmup Iteration   3: 1781742.993 ops/s
# Warmup Iteration   4: 2200032.063 ops/s
# Warmup Iteration   5: 2205198.372 ops/s
# Warmup Iteration   6: 2221458.097 ops/s
# Warmup Iteration   7: 2193351.704 ops/s
# Warmup Iteration   8: 2158462.690 ops/s
# Warmup Iteration   9: 2359162.388 ops/s
# Warmup Iteration  10: 2353990.088 ops/s
# Warmup Iteration  11: 2196862.964 ops/s
# Warmup Iteration  12: 2206797.208 ops/s
# Warmup Iteration  13: 2240326.265 ops/s
# Warmup Iteration  14: 2264710.285 ops/s
# Warmup Iteration  15: 2237994.057 ops/s
# Warmup Iteration  16: 2172478.217 ops/s
# Warmup Iteration  17: 2162157.992 ops/s
# Warmup Iteration  18: 2261923.296 ops/s
# Warmup Iteration  19: 2258223.453 ops/s
# Warmup Iteration  20: 2180845.996 ops/s
# Warmup Iteration  21: 2208651.311 ops/s
# Warmup Iteration  22: 2163543.762 ops/s
# Warmup Iteration  23: 2172590.412 ops/s
# Warmup Iteration  24: 2194959.832 ops/s
# Warmup Iteration  25: 2160569.929 ops/s
# Warmup Iteration  26: 2184349.721 ops/s
# Warmup Iteration  27: 2176402.927 ops/s
# Warmup Iteration  28: 2171816.839 ops/s
# Warmup Iteration  29: 2202425.161 ops/s
# Warmup Iteration  30: 2275238.270 ops/s
Iteration   1: 2340811.925 ops/s
Iteration   2: 2260529.233 ops/s
Iteration   3: 2249872.529 ops/s
Iteration   4: 2140375.563 ops/s
Iteration   5: 2176782.442 ops/s
Iteration   6: 2167187.255 ops/s
Iteration   7: 2213357.456 ops/s
Iteration   8: 2205450.285 ops/s
Iteration   9: 2202685.962 ops/s
Iteration  10: 2201064.184 ops/s
Iteration  11: 2178369.300 ops/s
Iteration  12: 2167788.549 ops/s
Iteration  13: 2188053.628 ops/s
Iteration  14: 2127427.922 ops/s
Iteration  15: 2162210.823 ops/s
Iteration  16: 2195442.931 ops/s
Iteration  17: 2146436.370 ops/s
Iteration  18: 2177919.071 ops/s
Iteration  19: 2227885.794 ops/s
Iteration  20: 2375148.053 ops/s
Iteration  21: 2285048.805 ops/s
Iteration  22: 2281611.040 ops/s
Iteration  23: 2238370.581 ops/s
Iteration  24: 2230376.798 ops/s
Iteration  25: 2173797.236 ops/s
Iteration  26: 2172340.954 ops/s
Iteration  27: 2186606.331 ops/s
Iteration  28: 2169563.698 ops/s
Iteration  29: 2173297.530 ops/s
Iteration  30: 2143959.890 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withMapTargetEmpty":
  2205325.738 ±(99.9%) 38518.234 ops/s [Average]
  (min, avg, max) = (2127427.922, 2205325.738, 2375148.053), stdev = 57652.284
  CI (99.9%): [2166807.504, 2243843.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_withMapTargetEmpty  thrpt   30  2205325.738 ± 38518.234  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withoutAllKeys$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withoutAllKeys

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 919300.601 ops/s
# Warmup Iteration   2: 2659690.120 ops/s
# Warmup Iteration   3: 2314328.494 ops/s
# Warmup Iteration   4: 2591785.971 ops/s
# Warmup Iteration   5: 2823269.437 ops/s
# Warmup Iteration   6: 2826397.275 ops/s
# Warmup Iteration   7: 2672910.547 ops/s
# Warmup Iteration   8: 2677429.371 ops/s
# Warmup Iteration   9: 2798906.450 ops/s
# Warmup Iteration  10: 2664025.808 ops/s
# Warmup Iteration  11: 2674387.829 ops/s
# Warmup Iteration  12: 2692601.332 ops/s
# Warmup Iteration  13: 2695195.362 ops/s
# Warmup Iteration  14: 2632890.188 ops/s
# Warmup Iteration  15: 2781760.144 ops/s
# Warmup Iteration  16: 2794068.764 ops/s
# Warmup Iteration  17: 2741090.258 ops/s
# Warmup Iteration  18: 2666209.499 ops/s
# Warmup Iteration  19: 2913672.445 ops/s
# Warmup Iteration  20: 2886005.795 ops/s
# Warmup Iteration  21: 2747360.564 ops/s
# Warmup Iteration  22: 2674060.441 ops/s
# Warmup Iteration  23: 2675945.397 ops/s
# Warmup Iteration  24: 2726022.645 ops/s
# Warmup Iteration  25: 2765336.771 ops/s
# Warmup Iteration  26: 2717893.775 ops/s
# Warmup Iteration  27: 2720355.528 ops/s
# Warmup Iteration  28: 2647403.084 ops/s
# Warmup Iteration  29: 2684951.074 ops/s
# Warmup Iteration  30: 2697159.532 ops/s
Iteration   1: 2649111.318 ops/s
Iteration   2: 2732444.020 ops/s
Iteration   3: 2685265.187 ops/s
Iteration   4: 2752012.876 ops/s
Iteration   5: 2662694.799 ops/s
Iteration   6: 2637978.627 ops/s
Iteration   7: 2885514.198 ops/s
Iteration   8: 2780583.231 ops/s
Iteration   9: 2760925.776 ops/s
Iteration  10: 2717680.391 ops/s
Iteration  11: 2700989.326 ops/s
Iteration  12: 2680829.353 ops/s
Iteration  13: 2647335.012 ops/s
Iteration  14: 2645349.908 ops/s
Iteration  15: 2698672.563 ops/s
Iteration  16: 2663726.383 ops/s
Iteration  17: 2687482.381 ops/s
Iteration  18: 2670600.415 ops/s
Iteration  19: 2670811.848 ops/s
Iteration  20: 2695661.170 ops/s
Iteration  21: 2656128.206 ops/s
Iteration  22: 2692001.891 ops/s
Iteration  23: 2752102.893 ops/s
Iteration  24: 2693547.404 ops/s
Iteration  25: 2705492.809 ops/s
Iteration  26: 2676151.277 ops/s
Iteration  27: 2687865.859 ops/s
Iteration  28: 2656542.854 ops/s
Iteration  29: 2687208.253 ops/s
Iteration  30: 2712505.191 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withoutAllKeys":
  2698173.847 ±(99.9%) 33675.154 ops/s [Average]
  (min, avg, max) = (2637978.627, 2698173.847, 2885514.198), stdev = 50403.389
  CI (99.9%): [2664498.693, 2731849.002] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_withoutAllKeys  thrpt   30  2698173.847 ± 33675.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withoutKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withoutKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1144312.812 ops/s
# Warmup Iteration   2: 3183079.043 ops/s
# Warmup Iteration   3: 2572814.500 ops/s
# Warmup Iteration   4: 3191901.203 ops/s
# Warmup Iteration   5: 3192390.346 ops/s
# Warmup Iteration   6: 3395617.002 ops/s
# Warmup Iteration   7: 3421462.894 ops/s
# Warmup Iteration   8: 3259754.681 ops/s
# Warmup Iteration   9: 3191721.728 ops/s
# Warmup Iteration  10: 3140878.973 ops/s
# Warmup Iteration  11: 3192815.660 ops/s
# Warmup Iteration  12: 3162738.200 ops/s
# Warmup Iteration  13: 3289396.726 ops/s
# Warmup Iteration  14: 3257222.799 ops/s
# Warmup Iteration  15: 3238444.059 ops/s
# Warmup Iteration  16: 3256388.136 ops/s
# Warmup Iteration  17: 3190405.784 ops/s
# Warmup Iteration  18: 3229741.077 ops/s
# Warmup Iteration  19: 3221478.286 ops/s
# Warmup Iteration  20: 3146340.960 ops/s
# Warmup Iteration  21: 3125556.020 ops/s
# Warmup Iteration  22: 3135375.258 ops/s
# Warmup Iteration  23: 3185724.628 ops/s
# Warmup Iteration  24: 3179448.470 ops/s
# Warmup Iteration  25: 3258778.673 ops/s
# Warmup Iteration  26: 3176400.677 ops/s
# Warmup Iteration  27: 3157810.449 ops/s
# Warmup Iteration  28: 3128806.534 ops/s
# Warmup Iteration  29: 3133983.335 ops/s
# Warmup Iteration  30: 3078781.262 ops/s
Iteration   1: 3213526.856 ops/s
Iteration   2: 3133186.506 ops/s
Iteration   3: 3150135.845 ops/s
Iteration   4: 3110895.260 ops/s
Iteration   5: 3140305.047 ops/s
Iteration   6: 3199114.219 ops/s
Iteration   7: 3156904.854 ops/s
Iteration   8: 3244383.512 ops/s
Iteration   9: 3137538.452 ops/s
Iteration  10: 3067157.658 ops/s
Iteration  11: 3164912.328 ops/s
Iteration  12: 3103537.625 ops/s
Iteration  13: 3146570.399 ops/s
Iteration  14: 3177380.840 ops/s
Iteration  15: 3133287.763 ops/s
Iteration  16: 3139079.507 ops/s
Iteration  17: 3143556.188 ops/s
Iteration  18: 3202586.947 ops/s
Iteration  19: 3397832.664 ops/s
Iteration  20: 3361679.648 ops/s
Iteration  21: 3174040.226 ops/s
Iteration  22: 3131038.850 ops/s
Iteration  23: 3179254.596 ops/s
Iteration  24: 3140581.911 ops/s
Iteration  25: 3173445.614 ops/s
Iteration  26: 3169660.209 ops/s
Iteration  27: 3195626.760 ops/s
Iteration  28: 3150288.678 ops/s
Iteration  29: 3146087.294 ops/s
Iteration  30: 3104307.607 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_withoutKey":
  3169596.795 ±(99.9%) 45141.305 ops/s [Average]
  (min, avg, max) = (3067157.658, 3169596.795, 3397832.664), stdev = 67565.386
  CI (99.9%): [3124455.490, 3214738.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapTest._Benchmark.benchmark_withoutKey  thrpt   30  3169596.795 ± 45141.305  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 224611.536 ops/s
# Warmup Iteration   2: 355988.643 ops/s
# Warmup Iteration   3: 445152.918 ops/s
# Warmup Iteration   4: 428859.539 ops/s
# Warmup Iteration   5: 442950.026 ops/s
# Warmup Iteration   6: 433197.522 ops/s
# Warmup Iteration   7: 365863.947 ops/s
# Warmup Iteration   8: 457683.004 ops/s
# Warmup Iteration   9: 439806.651 ops/s
# Warmup Iteration  10: 430885.380 ops/s
# Warmup Iteration  11: 426816.175 ops/s
# Warmup Iteration  12: 426231.264 ops/s
# Warmup Iteration  13: 440550.251 ops/s
# Warmup Iteration  14: 456633.641 ops/s
# Warmup Iteration  15: 447224.920 ops/s
# Warmup Iteration  16: 427724.938 ops/s
# Warmup Iteration  17: 431221.247 ops/s
# Warmup Iteration  18: 427709.030 ops/s
# Warmup Iteration  19: 435081.400 ops/s
# Warmup Iteration  20: 440925.483 ops/s
# Warmup Iteration  21: 463691.133 ops/s
# Warmup Iteration  22: 463880.343 ops/s
# Warmup Iteration  23: 438992.653 ops/s
# Warmup Iteration  24: 425399.064 ops/s
# Warmup Iteration  25: 421601.783 ops/s
# Warmup Iteration  26: 425875.209 ops/s
# Warmup Iteration  27: 427499.000 ops/s
# Warmup Iteration  28: 427919.869 ops/s
# Warmup Iteration  29: 424117.330 ops/s
# Warmup Iteration  30: 430822.229 ops/s
Iteration   1: 457868.894 ops/s
Iteration   2: 420981.470 ops/s
Iteration   3: 443215.712 ops/s
Iteration   4: 437039.475 ops/s
Iteration   5: 427225.843 ops/s
Iteration   6: 425812.327 ops/s
Iteration   7: 440968.798 ops/s
Iteration   8: 428090.809 ops/s
Iteration   9: 421153.710 ops/s
Iteration  10: 441084.754 ops/s
Iteration  11: 429958.271 ops/s
Iteration  12: 454471.548 ops/s
Iteration  13: 467565.081 ops/s
Iteration  14: 466677.209 ops/s
Iteration  15: 463417.113 ops/s
Iteration  16: 457236.980 ops/s
Iteration  17: 430394.290 ops/s
Iteration  18: 452105.409 ops/s
Iteration  19: 446930.706 ops/s
Iteration  20: 433840.344 ops/s
Iteration  21: 430616.096 ops/s
Iteration  22: 425056.694 ops/s
Iteration  23: 427015.315 ops/s
Iteration  24: 425331.192 ops/s
Iteration  25: 425311.241 ops/s
Iteration  26: 419733.170 ops/s
Iteration  27: 427963.383 ops/s
Iteration  28: 430899.041 ops/s
Iteration  29: 420943.894 ops/s
Iteration  30: 432547.831 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_zip":
  437048.553 ±(99.9%) 9786.570 ops/s [Average]
  (min, avg, max) = (419733.170, 437048.553, 467565.081), stdev = 14648.079
  CI (99.9%): [427261.983, 446835.124] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt       Score      Error  Units
HashBiMapTest._Benchmark.benchmark_zip  thrpt   30  437048.553 ± 9786.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 483300.793 ops/s
# Warmup Iteration   2: 878675.601 ops/s
# Warmup Iteration   3: 981763.464 ops/s
# Warmup Iteration   4: 1042541.419 ops/s
# Warmup Iteration   5: 980392.103 ops/s
# Warmup Iteration   6: 794299.909 ops/s
# Warmup Iteration   7: 950610.898 ops/s
# Warmup Iteration   8: 959594.167 ops/s
# Warmup Iteration   9: 964797.983 ops/s
# Warmup Iteration  10: 964476.250 ops/s
# Warmup Iteration  11: 967652.064 ops/s
# Warmup Iteration  12: 953567.889 ops/s
# Warmup Iteration  13: 952476.111 ops/s
# Warmup Iteration  14: 956460.656 ops/s
# Warmup Iteration  15: 967315.990 ops/s
# Warmup Iteration  16: 963432.554 ops/s
# Warmup Iteration  17: 1004654.892 ops/s
# Warmup Iteration  18: 969873.939 ops/s
# Warmup Iteration  19: 962239.082 ops/s
# Warmup Iteration  20: 948158.894 ops/s
# Warmup Iteration  21: 957826.584 ops/s
# Warmup Iteration  22: 940426.092 ops/s
# Warmup Iteration  23: 959840.937 ops/s
# Warmup Iteration  24: 1045557.676 ops/s
# Warmup Iteration  25: 1005461.135 ops/s
# Warmup Iteration  26: 991287.967 ops/s
# Warmup Iteration  27: 1026173.677 ops/s
# Warmup Iteration  28: 1015824.110 ops/s
# Warmup Iteration  29: 961334.454 ops/s
# Warmup Iteration  30: 992075.452 ops/s
Iteration   1: 965822.123 ops/s
Iteration   2: 988055.339 ops/s
Iteration   3: 956431.620 ops/s
Iteration   4: 999070.150 ops/s
Iteration   5: 970838.053 ops/s
Iteration   6: 976884.619 ops/s
Iteration   7: 971841.533 ops/s
Iteration   8: 993183.955 ops/s
Iteration   9: 998467.311 ops/s
Iteration  10: 1001213.052 ops/s
Iteration  11: 999034.711 ops/s
Iteration  12: 1010901.052 ops/s
Iteration  13: 954008.063 ops/s
Iteration  14: 987859.407 ops/s
Iteration  15: 960060.668 ops/s
Iteration  16: 964140.916 ops/s
Iteration  17: 973380.423 ops/s
Iteration  18: 949100.747 ops/s
Iteration  19: 958878.487 ops/s
Iteration  20: 969903.100 ops/s
Iteration  21: 951803.263 ops/s
Iteration  22: 969454.609 ops/s
Iteration  23: 964118.671 ops/s
Iteration  24: 954035.511 ops/s
Iteration  25: 990533.010 ops/s
Iteration  26: 1008578.635 ops/s
Iteration  27: 980401.319 ops/s
Iteration  28: 995362.543 ops/s
Iteration  29: 992831.155 ops/s
Iteration  30: 991168.508 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapTest._Benchmark.benchmark_zipWithIndex":
  978245.418 ±(99.9%) 12252.921 ops/s [Average]
  (min, avg, max) = (949100.747, 978245.418, 1010901.052), stdev = 18339.596
  CI (99.9%): [965992.498, 990498.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
HashBiMapTest._Benchmark.benchmark_zipWithIndex  thrpt   30  978245.418 ± 12252.921  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 498854.948 ops/s
# Warmup Iteration   2: 603488.841 ops/s
# Warmup Iteration   3: 771102.268 ops/s
# Warmup Iteration   4: 790047.987 ops/s
# Warmup Iteration   5: 788606.169 ops/s
# Warmup Iteration   6: 768092.706 ops/s
# Warmup Iteration   7: 749974.938 ops/s
# Warmup Iteration   8: 758204.103 ops/s
# Warmup Iteration   9: 669273.856 ops/s
# Warmup Iteration  10: 758919.165 ops/s
# Warmup Iteration  11: 765248.501 ops/s
# Warmup Iteration  12: 758704.958 ops/s
# Warmup Iteration  13: 796971.393 ops/s
# Warmup Iteration  14: 794376.718 ops/s
# Warmup Iteration  15: 782339.794 ops/s
# Warmup Iteration  16: 768040.092 ops/s
# Warmup Iteration  17: 799600.433 ops/s
# Warmup Iteration  18: 806533.886 ops/s
# Warmup Iteration  19: 803183.264 ops/s
# Warmup Iteration  20: 788118.068 ops/s
# Warmup Iteration  21: 794165.570 ops/s
# Warmup Iteration  22: 802394.686 ops/s
# Warmup Iteration  23: 790572.354 ops/s
# Warmup Iteration  24: 798361.671 ops/s
# Warmup Iteration  25: 808615.450 ops/s
# Warmup Iteration  26: 785921.822 ops/s
# Warmup Iteration  27: 826876.516 ops/s
# Warmup Iteration  28: 813678.439 ops/s
# Warmup Iteration  29: 818403.034 ops/s
# Warmup Iteration  30: 818736.403 ops/s
Iteration   1: 826747.302 ops/s
Iteration   2: 797875.577 ops/s
Iteration   3: 831923.244 ops/s
Iteration   4: 802479.903 ops/s
Iteration   5: 804561.015 ops/s
Iteration   6: 807854.455 ops/s
Iteration   7: 791283.217 ops/s
Iteration   8: 785843.040 ops/s
Iteration   9: 814438.691 ops/s
Iteration  10: 821804.945 ops/s
Iteration  11: 825688.600 ops/s
Iteration  12: 834263.374 ops/s
Iteration  13: 834809.253 ops/s
Iteration  14: 791896.307 ops/s
Iteration  15: 823178.520 ops/s
Iteration  16: 786869.169 ops/s
Iteration  17: 822169.531 ops/s
Iteration  18: 792432.726 ops/s
Iteration  19: 820131.594 ops/s
Iteration  20: 804265.216 ops/s
Iteration  21: 870983.048 ops/s
Iteration  22: 874905.449 ops/s
Iteration  23: 809017.001 ops/s
Iteration  24: 801719.600 ops/s
Iteration  25: 798813.902 ops/s
Iteration  26: 804173.298 ops/s
Iteration  27: 802573.796 ops/s
Iteration  28: 853179.124 ops/s
Iteration  29: 793213.521 ops/s
Iteration  30: 791264.210 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_add":
  814011.954 ±(99.9%) 15396.418 ops/s [Average]
  (min, avg, max) = (785843.040, 814011.954, 874905.449), stdev = 23044.636
  CI (99.9%): [798615.536, 829408.372] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score       Error  Units
HashBiMapValuesTest._Benchmark.benchmark_add  thrpt   30  814011.954 ± 15396.418  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 472453.152 ops/s
# Warmup Iteration   2: 585329.377 ops/s
# Warmup Iteration   3: 783337.730 ops/s
# Warmup Iteration   4: 775965.071 ops/s
# Warmup Iteration   5: 760980.131 ops/s
# Warmup Iteration   6: 761226.150 ops/s
# Warmup Iteration   7: 756013.416 ops/s
# Warmup Iteration   8: 748910.101 ops/s
# Warmup Iteration   9: 610465.291 ops/s
# Warmup Iteration  10: 747907.243 ops/s
# Warmup Iteration  11: 757973.927 ops/s
# Warmup Iteration  12: 798016.809 ops/s
# Warmup Iteration  13: 797995.877 ops/s
# Warmup Iteration  14: 765565.857 ops/s
# Warmup Iteration  15: 753583.022 ops/s
# Warmup Iteration  16: 755871.113 ops/s
# Warmup Iteration  17: 794841.468 ops/s
# Warmup Iteration  18: 803308.679 ops/s
# Warmup Iteration  19: 787707.447 ops/s
# Warmup Iteration  20: 791238.323 ops/s
# Warmup Iteration  21: 820154.382 ops/s
# Warmup Iteration  22: 790266.951 ops/s
# Warmup Iteration  23: 795311.926 ops/s
# Warmup Iteration  24: 797157.818 ops/s
# Warmup Iteration  25: 802267.332 ops/s
# Warmup Iteration  26: 844288.657 ops/s
# Warmup Iteration  27: 794777.564 ops/s
# Warmup Iteration  28: 807643.355 ops/s
# Warmup Iteration  29: 805767.021 ops/s
# Warmup Iteration  30: 822627.631 ops/s
Iteration   1: 827480.180 ops/s
Iteration   2: 798316.897 ops/s
Iteration   3: 799117.861 ops/s
Iteration   4: 795655.847 ops/s
Iteration   5: 793021.300 ops/s
Iteration   6: 819208.999 ops/s
Iteration   7: 779814.742 ops/s
Iteration   8: 793276.108 ops/s
Iteration   9: 781987.144 ops/s
Iteration  10: 801631.282 ops/s
Iteration  11: 801148.929 ops/s
Iteration  12: 784338.327 ops/s
Iteration  13: 773426.521 ops/s
Iteration  14: 812103.328 ops/s
Iteration  15: 828006.474 ops/s
Iteration  16: 814781.341 ops/s
Iteration  17: 808287.686 ops/s
Iteration  18: 828718.398 ops/s
Iteration  19: 789488.514 ops/s
Iteration  20: 821370.638 ops/s
Iteration  21: 848157.464 ops/s
Iteration  22: 846794.899 ops/s
Iteration  23: 819925.912 ops/s
Iteration  24: 826865.910 ops/s
Iteration  25: 793459.435 ops/s
Iteration  26: 781106.390 ops/s
Iteration  27: 814525.392 ops/s
Iteration  28: 812745.491 ops/s
Iteration  29: 816633.295 ops/s
Iteration  30: 825534.113 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_addAll":
  807897.627 ±(99.9%) 13009.860 ops/s [Average]
  (min, avg, max) = (773426.521, 807897.627, 848157.464), stdev = 19472.548
  CI (99.9%): [794887.767, 820907.488] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
HashBiMapValuesTest._Benchmark.benchmark_addAll  thrpt   30  807897.627 ± 13009.860  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1188931.652 ops/s
# Warmup Iteration   2: 2520524.305 ops/s
# Warmup Iteration   3: 2856792.168 ops/s
# Warmup Iteration   4: 2436341.278 ops/s
# Warmup Iteration   5: 2629438.574 ops/s
# Warmup Iteration   6: 2624556.056 ops/s
# Warmup Iteration   7: 2750034.325 ops/s
# Warmup Iteration   8: 2869515.997 ops/s
# Warmup Iteration   9: 2666730.747 ops/s
# Warmup Iteration  10: 2727868.064 ops/s
# Warmup Iteration  11: 2629460.729 ops/s
# Warmup Iteration  12: 2610892.361 ops/s
# Warmup Iteration  13: 2630874.488 ops/s
# Warmup Iteration  14: 2614874.922 ops/s
# Warmup Iteration  15: 2630078.620 ops/s
# Warmup Iteration  16: 2624789.860 ops/s
# Warmup Iteration  17: 2636504.969 ops/s
# Warmup Iteration  18: 2680748.418 ops/s
# Warmup Iteration  19: 2609140.811 ops/s
# Warmup Iteration  20: 2622060.796 ops/s
# Warmup Iteration  21: 2652447.155 ops/s
# Warmup Iteration  22: 2671796.344 ops/s
# Warmup Iteration  23: 2610292.627 ops/s
# Warmup Iteration  24: 2730491.480 ops/s
# Warmup Iteration  25: 2727109.363 ops/s
# Warmup Iteration  26: 2615384.131 ops/s
# Warmup Iteration  27: 2611028.731 ops/s
# Warmup Iteration  28: 2609655.801 ops/s
# Warmup Iteration  29: 2597393.037 ops/s
# Warmup Iteration  30: 2641595.059 ops/s
Iteration   1: 2646198.895 ops/s
Iteration   2: 2643792.488 ops/s
Iteration   3: 2667751.723 ops/s
Iteration   4: 2599626.652 ops/s
Iteration   5: 2661205.883 ops/s
Iteration   6: 2556452.385 ops/s
Iteration   7: 2748844.553 ops/s
Iteration   8: 2839471.303 ops/s
Iteration   9: 2640763.318 ops/s
Iteration  10: 2662915.837 ops/s
Iteration  11: 2690868.085 ops/s
Iteration  12: 2719557.544 ops/s
Iteration  13: 2697531.626 ops/s
Iteration  14: 2659448.382 ops/s
Iteration  15: 2727998.339 ops/s
Iteration  16: 2724037.600 ops/s
Iteration  17: 2741646.651 ops/s
Iteration  18: 2733132.856 ops/s
Iteration  19: 2717201.589 ops/s
Iteration  20: 2644258.620 ops/s
Iteration  21: 2727306.812 ops/s
Iteration  22: 2711824.961 ops/s
Iteration  23: 2751722.668 ops/s
Iteration  24: 2759252.326 ops/s
Iteration  25: 2603685.542 ops/s
Iteration  26: 2641529.815 ops/s
Iteration  27: 2579619.405 ops/s
Iteration  28: 2737064.000 ops/s
Iteration  29: 2768041.387 ops/s
Iteration  30: 2714200.414 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_clear":
  2690565.055 ±(99.9%) 41798.804 ops/s [Average]
  (min, avg, max) = (2556452.385, 2690565.055, 2839471.303), stdev = 62562.487
  CI (99.9%): [2648766.251, 2732363.860] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
HashBiMapValuesTest._Benchmark.benchmark_clear  thrpt   30  2690565.055 ± 41798.804  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1901953.179 ops/s
# Warmup Iteration   2: 4725290.389 ops/s
# Warmup Iteration   3: 4850293.410 ops/s
# Warmup Iteration   4: 3836358.217 ops/s
# Warmup Iteration   5: 4932546.450 ops/s
# Warmup Iteration   6: 4770937.569 ops/s
# Warmup Iteration   7: 4761835.141 ops/s
# Warmup Iteration   8: 4771464.746 ops/s
# Warmup Iteration   9: 4765223.232 ops/s
# Warmup Iteration  10: 4741480.544 ops/s
# Warmup Iteration  11: 4716849.680 ops/s
# Warmup Iteration  12: 4860948.185 ops/s
# Warmup Iteration  13: 5122360.020 ops/s
# Warmup Iteration  14: 4998915.601 ops/s
# Warmup Iteration  15: 4984796.092 ops/s
# Warmup Iteration  16: 5074502.645 ops/s
# Warmup Iteration  17: 4801633.622 ops/s
# Warmup Iteration  18: 4781101.086 ops/s
# Warmup Iteration  19: 4765384.641 ops/s
# Warmup Iteration  20: 4918244.624 ops/s
# Warmup Iteration  21: 4747038.357 ops/s
# Warmup Iteration  22: 4706091.954 ops/s
# Warmup Iteration  23: 4954156.170 ops/s
# Warmup Iteration  24: 4721153.967 ops/s
# Warmup Iteration  25: 4896504.020 ops/s
# Warmup Iteration  26: 4694342.515 ops/s
# Warmup Iteration  27: 4851796.025 ops/s
# Warmup Iteration  28: 5099155.341 ops/s
# Warmup Iteration  29: 5039875.438 ops/s
# Warmup Iteration  30: 4794312.425 ops/s
Iteration   1: 4829135.153 ops/s
Iteration   2: 4818298.379 ops/s
Iteration   3: 4912201.497 ops/s
Iteration   4: 4914737.723 ops/s
Iteration   5: 4766283.417 ops/s
Iteration   6: 5110982.171 ops/s
Iteration   7: 4650042.655 ops/s
Iteration   8: 4696334.579 ops/s
Iteration   9: 4659929.004 ops/s
Iteration  10: 4628541.144 ops/s
Iteration  11: 5049210.590 ops/s
Iteration  12: 4964240.500 ops/s
Iteration  13: 4706311.079 ops/s
Iteration  14: 4716787.925 ops/s
Iteration  15: 4946019.433 ops/s
Iteration  16: 5158238.235 ops/s
Iteration  17: 5162802.014 ops/s
Iteration  18: 5017194.023 ops/s
Iteration  19: 4638523.861 ops/s
Iteration  20: 4920924.631 ops/s
Iteration  21: 5144769.279 ops/s
Iteration  22: 5003497.695 ops/s
Iteration  23: 4641583.545 ops/s
Iteration  24: 4903128.933 ops/s
Iteration  25: 5148357.928 ops/s
Iteration  26: 4981263.043 ops/s
Iteration  27: 4938329.576 ops/s
Iteration  28: 4881858.959 ops/s
Iteration  29: 5121339.289 ops/s
Iteration  30: 4801132.044 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_contains":
  4894399.944 ±(99.9%) 117236.580 ops/s [Average]
  (min, avg, max) = (4628541.144, 4894399.944, 5162802.014), stdev = 175474.207
  CI (99.9%): [4777163.364, 5011636.523] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
HashBiMapValuesTest._Benchmark.benchmark_contains  thrpt   30  4894399.944 ± 117236.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 958716.357 ops/s
# Warmup Iteration   2: 2451514.014 ops/s
# Warmup Iteration   3: 2524084.967 ops/s
# Warmup Iteration   4: 2057530.483 ops/s
# Warmup Iteration   5: 2550187.464 ops/s
# Warmup Iteration   6: 2535127.212 ops/s
# Warmup Iteration   7: 2470150.699 ops/s
# Warmup Iteration   8: 2467920.380 ops/s
# Warmup Iteration   9: 2462853.607 ops/s
# Warmup Iteration  10: 2490495.189 ops/s
# Warmup Iteration  11: 2561713.058 ops/s
# Warmup Iteration  12: 2535848.134 ops/s
# Warmup Iteration  13: 2480497.254 ops/s
# Warmup Iteration  14: 2481472.155 ops/s
# Warmup Iteration  15: 2572550.395 ops/s
# Warmup Iteration  16: 2701932.633 ops/s
# Warmup Iteration  17: 2615784.407 ops/s
# Warmup Iteration  18: 2532919.058 ops/s
# Warmup Iteration  19: 2462919.293 ops/s
# Warmup Iteration  20: 2450886.940 ops/s
# Warmup Iteration  21: 2495826.292 ops/s
# Warmup Iteration  22: 2547688.576 ops/s
# Warmup Iteration  23: 2622818.536 ops/s
# Warmup Iteration  24: 2435441.648 ops/s
# Warmup Iteration  25: 2558208.076 ops/s
# Warmup Iteration  26: 2523346.253 ops/s
# Warmup Iteration  27: 2505544.644 ops/s
# Warmup Iteration  28: 2677455.585 ops/s
# Warmup Iteration  29: 2569374.604 ops/s
# Warmup Iteration  30: 2623121.146 ops/s
Iteration   1: 2523268.310 ops/s
Iteration   2: 2665056.077 ops/s
Iteration   3: 2666165.092 ops/s
Iteration   4: 2674218.832 ops/s
Iteration   5: 2679410.984 ops/s
Iteration   6: 2653564.428 ops/s
Iteration   7: 2567419.906 ops/s
Iteration   8: 2608501.248 ops/s
Iteration   9: 2467909.312 ops/s
Iteration  10: 2479588.623 ops/s
Iteration  11: 2469317.691 ops/s
Iteration  12: 2668152.313 ops/s
Iteration  13: 2574792.931 ops/s
Iteration  14: 2511036.077 ops/s
Iteration  15: 2588012.929 ops/s
Iteration  16: 2482268.390 ops/s
Iteration  17: 2590450.974 ops/s
Iteration  18: 2691879.880 ops/s
Iteration  19: 2529848.483 ops/s
Iteration  20: 2540323.610 ops/s
Iteration  21: 2595079.380 ops/s
Iteration  22: 2514408.985 ops/s
Iteration  23: 2447380.259 ops/s
Iteration  24: 2588899.344 ops/s
Iteration  25: 2474937.273 ops/s
Iteration  26: 2564266.596 ops/s
Iteration  27: 2585361.955 ops/s
Iteration  28: 2579935.920 ops/s
Iteration  29: 2502894.131 ops/s
Iteration  30: 2608756.293 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_containsAll":
  2569770.208 ±(99.9%) 48678.293 ops/s [Average]
  (min, avg, max) = (2447380.259, 2569770.208, 2691879.880), stdev = 72859.382
  CI (99.9%): [2521091.915, 2618448.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapValuesTest._Benchmark.benchmark_containsAll  thrpt   30  2569770.208 ± 48678.293  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1241939.346 ops/s
# Warmup Iteration   2: 3183021.433 ops/s
# Warmup Iteration   3: 2678654.670 ops/s
# Warmup Iteration   4: 3188901.669 ops/s
# Warmup Iteration   5: 3137071.746 ops/s
# Warmup Iteration   6: 3221918.660 ops/s
# Warmup Iteration   7: 3116968.782 ops/s
# Warmup Iteration   8: 3160008.111 ops/s
# Warmup Iteration   9: 3125365.303 ops/s
# Warmup Iteration  10: 3115837.712 ops/s
# Warmup Iteration  11: 3096978.322 ops/s
# Warmup Iteration  12: 3117154.693 ops/s
# Warmup Iteration  13: 3098921.490 ops/s
# Warmup Iteration  14: 3091067.107 ops/s
# Warmup Iteration  15: 3131714.346 ops/s
# Warmup Iteration  16: 3169496.634 ops/s
# Warmup Iteration  17: 3197596.494 ops/s
# Warmup Iteration  18: 3138650.464 ops/s
# Warmup Iteration  19: 3062118.581 ops/s
# Warmup Iteration  20: 3111836.261 ops/s
# Warmup Iteration  21: 3099725.400 ops/s
# Warmup Iteration  22: 3138783.047 ops/s
# Warmup Iteration  23: 3178182.944 ops/s
# Warmup Iteration  24: 3223065.594 ops/s
# Warmup Iteration  25: 3136830.819 ops/s
# Warmup Iteration  26: 3231842.485 ops/s
# Warmup Iteration  27: 3265598.251 ops/s
# Warmup Iteration  28: 3271847.667 ops/s
# Warmup Iteration  29: 3098438.586 ops/s
# Warmup Iteration  30: 3233709.655 ops/s
Iteration   1: 3114358.641 ops/s
Iteration   2: 3068445.718 ops/s
Iteration   3: 3160300.835 ops/s
Iteration   4: 3070485.964 ops/s
Iteration   5: 3152457.993 ops/s
Iteration   6: 3117773.535 ops/s
Iteration   7: 3156836.920 ops/s
Iteration   8: 3156082.884 ops/s
Iteration   9: 3093923.548 ops/s
Iteration  10: 3106987.956 ops/s
Iteration  11: 3153562.339 ops/s
Iteration  12: 3108933.942 ops/s
Iteration  13: 3094223.142 ops/s
Iteration  14: 3213175.177 ops/s
Iteration  15: 3129564.169 ops/s
Iteration  16: 3167267.826 ops/s
Iteration  17: 3099116.188 ops/s
Iteration  18: 3036404.511 ops/s
Iteration  19: 3110096.540 ops/s
Iteration  20: 3127783.233 ops/s
Iteration  21: 3134185.197 ops/s
Iteration  22: 3064043.740 ops/s
Iteration  23: 3218335.044 ops/s
Iteration  24: 3056854.837 ops/s
Iteration  25: 3072253.920 ops/s
Iteration  26: 3221457.329 ops/s
Iteration  27: 3123962.867 ops/s
Iteration  28: 3078501.782 ops/s
Iteration  29: 3110997.868 ops/s
Iteration  30: 3185538.328 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_isEmpty":
  3123463.732 ±(99.9%) 32150.126 ops/s [Average]
  (min, avg, max) = (3036404.511, 3123463.732, 3221457.329), stdev = 48120.798
  CI (99.9%): [3091313.607, 3155613.858] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  3123463.732 ± 32150.126  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 49946.499 ops/s
# Warmup Iteration   2: 71576.218 ops/s
# Warmup Iteration   3: 88950.649 ops/s
# Warmup Iteration   4: 87098.045 ops/s
# Warmup Iteration   5: 87995.569 ops/s
# Warmup Iteration   6: 89007.838 ops/s
# Warmup Iteration   7: 87589.962 ops/s
# Warmup Iteration   8: 78756.935 ops/s
# Warmup Iteration   9: 87866.441 ops/s
# Warmup Iteration  10: 87905.539 ops/s
# Warmup Iteration  11: 88599.595 ops/s
# Warmup Iteration  12: 87325.670 ops/s
# Warmup Iteration  13: 88967.210 ops/s
# Warmup Iteration  14: 89473.317 ops/s
# Warmup Iteration  15: 88220.455 ops/s
# Warmup Iteration  16: 89026.614 ops/s
# Warmup Iteration  17: 89585.508 ops/s
# Warmup Iteration  18: 90330.188 ops/s
# Warmup Iteration  19: 91346.744 ops/s
# Warmup Iteration  20: 90471.400 ops/s
# Warmup Iteration  21: 90699.578 ops/s
# Warmup Iteration  22: 91030.468 ops/s
# Warmup Iteration  23: 94515.918 ops/s
# Warmup Iteration  24: 95030.951 ops/s
# Warmup Iteration  25: 93631.771 ops/s
# Warmup Iteration  26: 91001.521 ops/s
# Warmup Iteration  27: 91253.766 ops/s
# Warmup Iteration  28: 94275.395 ops/s
# Warmup Iteration  29: 92774.506 ops/s
# Warmup Iteration  30: 90969.862 ops/s
Iteration   1: 90788.880 ops/s
Iteration   2: 91461.524 ops/s
Iteration   3: 90268.581 ops/s
Iteration   4: 90475.410 ops/s
Iteration   5: 90353.001 ops/s
Iteration   6: 90510.966 ops/s
Iteration   7: 90530.406 ops/s
Iteration   8: 89870.726 ops/s
Iteration   9: 91255.651 ops/s
Iteration  10: 91646.262 ops/s
Iteration  11: 91223.426 ops/s
Iteration  12: 90612.706 ops/s
Iteration  13: 92254.486 ops/s
Iteration  14: 89586.660 ops/s
Iteration  15: 90588.704 ops/s
Iteration  16: 90159.010 ops/s
Iteration  17: 89496.239 ops/s
Iteration  18: 90023.150 ops/s
Iteration  19: 91936.010 ops/s
Iteration  20: 90662.464 ops/s
Iteration  21: 90491.309 ops/s
Iteration  22: 91631.973 ops/s
Iteration  23: 92153.761 ops/s
Iteration  24: 92278.683 ops/s
Iteration  25: 90332.766 ops/s
Iteration  26: 90850.511 ops/s
Iteration  27: 90476.664 ops/s
Iteration  28: 93095.569 ops/s
Iteration  29: 92371.024 ops/s
Iteration  30: 90613.470 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_iterator":
  90933.333 ±(99.9%) 597.713 ops/s [Average]
  (min, avg, max) = (89496.239, 90933.333, 93095.569), stdev = 894.629
  CI (99.9%): [90335.620, 91531.046] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt      Score     Error  Units
HashBiMapValuesTest._Benchmark.benchmark_iterator  thrpt   30  90933.333 ± 597.713  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_removeAllFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_removeAllFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 572593.198 ops/s
# Warmup Iteration   2: 1487111.978 ops/s
# Warmup Iteration   3: 1489046.453 ops/s
# Warmup Iteration   4: 1180327.317 ops/s
# Warmup Iteration   5: 1494015.136 ops/s
# Warmup Iteration   6: 1453172.081 ops/s
# Warmup Iteration   7: 1460531.531 ops/s
# Warmup Iteration   8: 1482275.934 ops/s
# Warmup Iteration   9: 1456383.233 ops/s
# Warmup Iteration  10: 1480233.769 ops/s
# Warmup Iteration  11: 1498439.520 ops/s
# Warmup Iteration  12: 1478025.438 ops/s
# Warmup Iteration  13: 1475446.471 ops/s
# Warmup Iteration  14: 1486265.777 ops/s
# Warmup Iteration  15: 1466299.927 ops/s
# Warmup Iteration  16: 1520510.180 ops/s
# Warmup Iteration  17: 1496246.769 ops/s
# Warmup Iteration  18: 1435713.874 ops/s
# Warmup Iteration  19: 1449958.328 ops/s
# Warmup Iteration  20: 1471988.463 ops/s
# Warmup Iteration  21: 1478855.240 ops/s
# Warmup Iteration  22: 1461253.766 ops/s
# Warmup Iteration  23: 1455008.695 ops/s
# Warmup Iteration  24: 1474309.528 ops/s
# Warmup Iteration  25: 1455563.066 ops/s
# Warmup Iteration  26: 1466585.852 ops/s
# Warmup Iteration  27: 1488418.608 ops/s
# Warmup Iteration  28: 1467262.532 ops/s
# Warmup Iteration  29: 1474821.306 ops/s
# Warmup Iteration  30: 1487273.969 ops/s
Iteration   1: 1485490.089 ops/s
Iteration   2: 1404926.813 ops/s
Iteration   3: 1438282.023 ops/s
Iteration   4: 1470959.371 ops/s
Iteration   5: 1435882.184 ops/s
Iteration   6: 1500009.839 ops/s
Iteration   7: 1497904.390 ops/s
Iteration   8: 1464627.876 ops/s
Iteration   9: 1512489.283 ops/s
Iteration  10: 1507135.183 ops/s
Iteration  11: 1508964.165 ops/s
Iteration  12: 1458030.517 ops/s
Iteration  13: 1454846.164 ops/s
Iteration  14: 1453432.179 ops/s
Iteration  15: 1482479.834 ops/s
Iteration  16: 1472980.062 ops/s
Iteration  17: 1432452.301 ops/s
Iteration  18: 1503750.326 ops/s
Iteration  19: 1499408.386 ops/s
Iteration  20: 1432043.156 ops/s
Iteration  21: 1503521.404 ops/s
Iteration  22: 1564301.988 ops/s
Iteration  23: 1491569.866 ops/s
Iteration  24: 1508269.642 ops/s
Iteration  25: 1569840.870 ops/s
Iteration  26: 1466342.291 ops/s
Iteration  27: 1511280.845 ops/s
Iteration  28: 1477310.232 ops/s
Iteration  29: 1450512.191 ops/s
Iteration  30: 1430816.117 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_removeAllFromValues":
  1479661.986 ±(99.9%) 25280.952 ops/s [Average]
  (min, avg, max) = (1404926.813, 1479661.986, 1569840.870), stdev = 37839.342
  CI (99.9%): [1454381.034, 1504942.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
HashBiMapValuesTest._Benchmark.benchmark_removeAllFromValues  thrpt   30  1479661.986 ± 25280.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_removeFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_removeFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 606320.896 ops/s
# Warmup Iteration   2: 1545447.001 ops/s
# Warmup Iteration   3: 1526918.228 ops/s
# Warmup Iteration   4: 1247426.846 ops/s
# Warmup Iteration   5: 1531073.857 ops/s
# Warmup Iteration   6: 1540787.332 ops/s
# Warmup Iteration   7: 1523658.917 ops/s
# Warmup Iteration   8: 1514993.158 ops/s
# Warmup Iteration   9: 1548115.388 ops/s
# Warmup Iteration  10: 1518608.327 ops/s
# Warmup Iteration  11: 1541328.116 ops/s
# Warmup Iteration  12: 1523927.039 ops/s
# Warmup Iteration  13: 1538800.737 ops/s
# Warmup Iteration  14: 1526521.153 ops/s
# Warmup Iteration  15: 1515255.159 ops/s
# Warmup Iteration  16: 1546284.442 ops/s
# Warmup Iteration  17: 1505190.131 ops/s
# Warmup Iteration  18: 1536078.237 ops/s
# Warmup Iteration  19: 1549331.772 ops/s
# Warmup Iteration  20: 1563186.145 ops/s
# Warmup Iteration  21: 1563924.090 ops/s
# Warmup Iteration  22: 1549795.550 ops/s
# Warmup Iteration  23: 1559091.732 ops/s
# Warmup Iteration  24: 1531952.495 ops/s
# Warmup Iteration  25: 1564519.256 ops/s
# Warmup Iteration  26: 1551024.906 ops/s
# Warmup Iteration  27: 1540811.305 ops/s
# Warmup Iteration  28: 1546975.172 ops/s
# Warmup Iteration  29: 1539285.258 ops/s
# Warmup Iteration  30: 1529316.922 ops/s
Iteration   1: 1539340.187 ops/s
Iteration   2: 1578793.664 ops/s
Iteration   3: 1559825.611 ops/s
Iteration   4: 1531016.162 ops/s
Iteration   5: 1505883.757 ops/s
Iteration   6: 1542427.802 ops/s
Iteration   7: 1514968.012 ops/s
Iteration   8: 1535920.748 ops/s
Iteration   9: 1512193.741 ops/s
Iteration  10: 1544526.805 ops/s
Iteration  11: 1538834.570 ops/s
Iteration  12: 1532259.275 ops/s
Iteration  13: 1547791.261 ops/s
Iteration  14: 1551208.344 ops/s
Iteration  15: 1538740.708 ops/s
Iteration  16: 1589579.220 ops/s
Iteration  17: 1510769.354 ops/s
Iteration  18: 1581386.466 ops/s
Iteration  19: 1558896.634 ops/s
Iteration  20: 1509364.919 ops/s
Iteration  21: 1521510.507 ops/s
Iteration  22: 1477958.848 ops/s
Iteration  23: 1546691.175 ops/s
Iteration  24: 1533904.457 ops/s
Iteration  25: 1539946.643 ops/s
Iteration  26: 1533344.007 ops/s
Iteration  27: 1528479.527 ops/s
Iteration  28: 1539501.120 ops/s
Iteration  29: 1533195.985 ops/s
Iteration  30: 1508528.953 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_removeFromValues":
  1536226.282 ±(99.9%) 15798.602 ops/s [Average]
  (min, avg, max) = (1477958.848, 1536226.282, 1589579.220), stdev = 23646.605
  CI (99.9%): [1520427.680, 1552024.884] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapValuesTest._Benchmark.benchmark_removeFromValues  thrpt   30  1536226.282 ± 15798.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_removeNullFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_removeNullFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 335010.691 ops/s
# Warmup Iteration   2: 741195.167 ops/s
# Warmup Iteration   3: 705791.340 ops/s
# Warmup Iteration   4: 658492.259 ops/s
# Warmup Iteration   5: 675205.966 ops/s
# Warmup Iteration   6: 712821.312 ops/s
# Warmup Iteration   7: 726529.410 ops/s
# Warmup Iteration   8: 743406.210 ops/s
# Warmup Iteration   9: 728379.580 ops/s
# Warmup Iteration  10: 722262.538 ops/s
# Warmup Iteration  11: 743245.903 ops/s
# Warmup Iteration  12: 714340.977 ops/s
# Warmup Iteration  13: 741485.402 ops/s
# Warmup Iteration  14: 718825.078 ops/s
# Warmup Iteration  15: 733910.349 ops/s
# Warmup Iteration  16: 704828.183 ops/s
# Warmup Iteration  17: 715501.804 ops/s
# Warmup Iteration  18: 736364.039 ops/s
# Warmup Iteration  19: 744325.364 ops/s
# Warmup Iteration  20: 731148.132 ops/s
# Warmup Iteration  21: 729759.382 ops/s
# Warmup Iteration  22: 723765.147 ops/s
# Warmup Iteration  23: 737166.859 ops/s
# Warmup Iteration  24: 733433.102 ops/s
# Warmup Iteration  25: 717684.138 ops/s
# Warmup Iteration  26: 733132.034 ops/s
# Warmup Iteration  27: 743363.368 ops/s
# Warmup Iteration  28: 740389.957 ops/s
# Warmup Iteration  29: 762179.575 ops/s
# Warmup Iteration  30: 751361.027 ops/s
Iteration   1: 706567.072 ops/s
Iteration   2: 712011.598 ops/s
Iteration   3: 765813.417 ops/s
Iteration   4: 738525.957 ops/s
Iteration   5: 740359.375 ops/s
Iteration   6: 735849.628 ops/s
Iteration   7: 718220.020 ops/s
Iteration   8: 748329.023 ops/s
Iteration   9: 721330.390 ops/s
Iteration  10: 719648.832 ops/s
Iteration  11: 717773.085 ops/s
Iteration  12: 709587.313 ops/s
Iteration  13: 739429.708 ops/s
Iteration  14: 744574.883 ops/s
Iteration  15: 716636.883 ops/s
Iteration  16: 707999.072 ops/s
Iteration  17: 713006.597 ops/s
Iteration  18: 724537.583 ops/s
Iteration  19: 707633.351 ops/s
Iteration  20: 736916.330 ops/s
Iteration  21: 712988.790 ops/s
Iteration  22: 720152.975 ops/s
Iteration  23: 717986.825 ops/s
Iteration  24: 711676.491 ops/s
Iteration  25: 724941.066 ops/s
Iteration  26: 717645.105 ops/s
Iteration  27: 716861.954 ops/s
Iteration  28: 716919.273 ops/s
Iteration  29: 729635.802 ops/s
Iteration  30: 734516.079 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_removeNullFromValues":
  724269.149 ±(99.9%) 9486.753 ops/s [Average]
  (min, avg, max) = (706567.072, 724269.149, 765813.417), stdev = 14199.326
  CI (99.9%): [714782.397, 733755.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
HashBiMapValuesTest._Benchmark.benchmark_removeNullFromValues  thrpt   30  724269.149 ± 9486.753  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_retainAllFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_retainAllFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 562714.762 ops/s
# Warmup Iteration   2: 1410683.071 ops/s
# Warmup Iteration   3: 1427639.366 ops/s
# Warmup Iteration   4: 1157746.465 ops/s
# Warmup Iteration   5: 1481008.652 ops/s
# Warmup Iteration   6: 1423104.168 ops/s
# Warmup Iteration   7: 1453210.260 ops/s
# Warmup Iteration   8: 1441678.183 ops/s
# Warmup Iteration   9: 1434860.038 ops/s
# Warmup Iteration  10: 1438675.710 ops/s
# Warmup Iteration  11: 1423854.712 ops/s
# Warmup Iteration  12: 1425911.231 ops/s
# Warmup Iteration  13: 1432989.965 ops/s
# Warmup Iteration  14: 1463479.186 ops/s
# Warmup Iteration  15: 1510689.399 ops/s
# Warmup Iteration  16: 1441139.006 ops/s
# Warmup Iteration  17: 1391534.893 ops/s
# Warmup Iteration  18: 1473848.026 ops/s
# Warmup Iteration  19: 1458882.050 ops/s
# Warmup Iteration  20: 1466283.188 ops/s
# Warmup Iteration  21: 1449401.566 ops/s
# Warmup Iteration  22: 1407102.686 ops/s
# Warmup Iteration  23: 1426473.728 ops/s
# Warmup Iteration  24: 1403226.513 ops/s
# Warmup Iteration  25: 1421839.922 ops/s
# Warmup Iteration  26: 1423573.545 ops/s
# Warmup Iteration  27: 1415633.991 ops/s
# Warmup Iteration  28: 1440722.856 ops/s
# Warmup Iteration  29: 1472959.895 ops/s
# Warmup Iteration  30: 1407965.698 ops/s
Iteration   1: 1480710.203 ops/s
Iteration   2: 1397210.787 ops/s
Iteration   3: 1463224.978 ops/s
Iteration   4: 1464377.777 ops/s
Iteration   5: 1454974.228 ops/s
Iteration   6: 1547005.099 ops/s
Iteration   7: 1500586.204 ops/s
Iteration   8: 1518064.897 ops/s
Iteration   9: 1443715.282 ops/s
Iteration  10: 1474737.028 ops/s
Iteration  11: 1486544.958 ops/s
Iteration  12: 1454498.101 ops/s
Iteration  13: 1434400.381 ops/s
Iteration  14: 1405471.419 ops/s
Iteration  15: 1407062.414 ops/s
Iteration  16: 1468275.262 ops/s
Iteration  17: 1426135.081 ops/s
Iteration  18: 1375240.064 ops/s
Iteration  19: 1448819.872 ops/s
Iteration  20: 1411540.726 ops/s
Iteration  21: 1426477.247 ops/s
Iteration  22: 1431862.031 ops/s
Iteration  23: 1445776.397 ops/s
Iteration  24: 1477573.816 ops/s
Iteration  25: 1446592.828 ops/s
Iteration  26: 1471804.377 ops/s
Iteration  27: 1435435.305 ops/s
Iteration  28: 1465160.233 ops/s
Iteration  29: 1407358.336 ops/s
Iteration  30: 1431724.745 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_retainAllFromValues":
  1450078.669 ±(99.9%) 24666.751 ops/s [Average]
  (min, avg, max) = (1375240.064, 1450078.669, 1547005.099), stdev = 36920.034
  CI (99.9%): [1425411.919, 1474745.420] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
HashBiMapValuesTest._Benchmark.benchmark_retainAllFromValues  thrpt   30  1450078.669 ± 24666.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 861523.278 ops/s
# Warmup Iteration   2: 1960131.753 ops/s
# Warmup Iteration   3: 1653457.367 ops/s
# Warmup Iteration   4: 1964595.739 ops/s
# Warmup Iteration   5: 1987386.587 ops/s
# Warmup Iteration   6: 1971813.849 ops/s
# Warmup Iteration   7: 2038232.700 ops/s
# Warmup Iteration   8: 2018736.149 ops/s
# Warmup Iteration   9: 2001807.319 ops/s
# Warmup Iteration  10: 1948842.754 ops/s
# Warmup Iteration  11: 2031168.130 ops/s
# Warmup Iteration  12: 1972537.188 ops/s
# Warmup Iteration  13: 1998899.296 ops/s
# Warmup Iteration  14: 1945524.382 ops/s
# Warmup Iteration  15: 1972800.681 ops/s
# Warmup Iteration  16: 1959440.928 ops/s
# Warmup Iteration  17: 2006300.455 ops/s
# Warmup Iteration  18: 1975360.600 ops/s
# Warmup Iteration  19: 2054020.724 ops/s
# Warmup Iteration  20: 2010413.099 ops/s
# Warmup Iteration  21: 1949431.787 ops/s
# Warmup Iteration  22: 1933000.270 ops/s
# Warmup Iteration  23: 1994808.744 ops/s
# Warmup Iteration  24: 1963313.985 ops/s
# Warmup Iteration  25: 1939459.729 ops/s
# Warmup Iteration  26: 2019735.822 ops/s
# Warmup Iteration  27: 1963561.727 ops/s
# Warmup Iteration  28: 1974424.987 ops/s
# Warmup Iteration  29: 2016499.202 ops/s
# Warmup Iteration  30: 2007147.404 ops/s
Iteration   1: 1936846.743 ops/s
Iteration   2: 2020577.381 ops/s
Iteration   3: 1944582.610 ops/s
Iteration   4: 1944391.878 ops/s
Iteration   5: 1953151.122 ops/s
Iteration   6: 1971778.565 ops/s
Iteration   7: 1943154.399 ops/s
Iteration   8: 1984657.747 ops/s
Iteration   9: 1942644.602 ops/s
Iteration  10: 1995135.623 ops/s
Iteration  11: 1916117.546 ops/s
Iteration  12: 1917913.670 ops/s
Iteration  13: 1935278.262 ops/s
Iteration  14: 1994273.690 ops/s
Iteration  15: 1991744.218 ops/s
Iteration  16: 2001624.570 ops/s
Iteration  17: 2044891.917 ops/s
Iteration  18: 1992818.263 ops/s
Iteration  19: 2012703.124 ops/s
Iteration  20: 1967296.063 ops/s
Iteration  21: 1976897.307 ops/s
Iteration  22: 1993384.285 ops/s
Iteration  23: 2037829.358 ops/s
Iteration  24: 1951129.550 ops/s
Iteration  25: 1997847.305 ops/s
Iteration  26: 1968271.566 ops/s
Iteration  27: 1924632.304 ops/s
Iteration  28: 2018325.577 ops/s
Iteration  29: 1949565.007 ops/s
Iteration  30: 2023241.470 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_size":
  1975090.191 ±(99.9%) 24058.596 ops/s [Average]
  (min, avg, max) = (1916117.546, 1975090.191, 2044891.917), stdev = 36009.776
  CI (99.9%): [1951031.595, 1999148.786] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapValuesTest._Benchmark.benchmark_size  thrpt   30  1975090.191 ± 24058.596  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_values$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_values

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1829411.116 ops/s
# Warmup Iteration   2: 4336722.808 ops/s
# Warmup Iteration   3: 3706865.867 ops/s
# Warmup Iteration   4: 4648108.584 ops/s
# Warmup Iteration   5: 4541930.937 ops/s
# Warmup Iteration   6: 4318160.165 ops/s
# Warmup Iteration   7: 4349220.258 ops/s
# Warmup Iteration   8: 4390754.067 ops/s
# Warmup Iteration   9: 4377800.728 ops/s
# Warmup Iteration  10: 4379001.897 ops/s
# Warmup Iteration  11: 4391064.770 ops/s
# Warmup Iteration  12: 4394676.387 ops/s
# Warmup Iteration  13: 4682892.576 ops/s
# Warmup Iteration  14: 4443289.342 ops/s
# Warmup Iteration  15: 4551172.020 ops/s
# Warmup Iteration  16: 4393164.969 ops/s
# Warmup Iteration  17: 4422524.590 ops/s
# Warmup Iteration  18: 4565246.992 ops/s
# Warmup Iteration  19: 4382284.445 ops/s
# Warmup Iteration  20: 4447831.332 ops/s
# Warmup Iteration  21: 4539324.124 ops/s
# Warmup Iteration  22: 4339642.796 ops/s
# Warmup Iteration  23: 4464171.229 ops/s
# Warmup Iteration  24: 4484570.008 ops/s
# Warmup Iteration  25: 4363945.597 ops/s
# Warmup Iteration  26: 4603543.577 ops/s
# Warmup Iteration  27: 4661203.971 ops/s
# Warmup Iteration  28: 4574616.439 ops/s
# Warmup Iteration  29: 4399513.175 ops/s
# Warmup Iteration  30: 4393118.224 ops/s
Iteration   1: 4331676.744 ops/s
Iteration   2: 4451414.285 ops/s
Iteration   3: 4372128.017 ops/s
Iteration   4: 4404584.778 ops/s
Iteration   5: 4378263.147 ops/s
Iteration   6: 4306811.775 ops/s
Iteration   7: 4401946.712 ops/s
Iteration   8: 4467910.823 ops/s
Iteration   9: 4357829.536 ops/s
Iteration  10: 4350919.717 ops/s
Iteration  11: 4413614.251 ops/s
Iteration  12: 4707884.826 ops/s
Iteration  13: 4743787.875 ops/s
Iteration  14: 4518876.083 ops/s
Iteration  15: 4607471.072 ops/s
Iteration  16: 4558691.363 ops/s
Iteration  17: 4657262.964 ops/s
Iteration  18: 4399080.463 ops/s
Iteration  19: 4359428.125 ops/s
Iteration  20: 4384793.575 ops/s
Iteration  21: 4459925.583 ops/s
Iteration  22: 4416957.725 ops/s
Iteration  23: 4478035.867 ops/s
Iteration  24: 4344004.760 ops/s
Iteration  25: 4590632.933 ops/s
Iteration  26: 4512773.605 ops/s
Iteration  27: 4280870.123 ops/s
Iteration  28: 4491069.664 ops/s
Iteration  29: 4366270.811 ops/s
Iteration  30: 4299297.777 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_values":
  4447140.499 ±(99.9%) 80299.998 ops/s [Average]
  (min, avg, max) = (4280870.123, 4447140.499, 4743787.875), stdev = 120189.266
  CI (99.9%): [4366840.501, 4527440.497] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapValuesTest._Benchmark.benchmark_values  thrpt   30  4447140.499 ± 80299.998  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_valuesToArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_valuesToArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 330967.682 ops/s
# Warmup Iteration   2: 576297.873 ops/s
# Warmup Iteration   3: 666796.278 ops/s
# Warmup Iteration   4: 669103.734 ops/s
# Warmup Iteration   5: 674868.707 ops/s
# Warmup Iteration   6: 533533.433 ops/s
# Warmup Iteration   7: 660874.870 ops/s
# Warmup Iteration   8: 659036.315 ops/s
# Warmup Iteration   9: 669046.584 ops/s
# Warmup Iteration  10: 682298.905 ops/s
# Warmup Iteration  11: 666490.354 ops/s
# Warmup Iteration  12: 695354.566 ops/s
# Warmup Iteration  13: 675748.003 ops/s
# Warmup Iteration  14: 669070.425 ops/s
# Warmup Iteration  15: 661909.271 ops/s
# Warmup Iteration  16: 668937.895 ops/s
# Warmup Iteration  17: 711602.082 ops/s
# Warmup Iteration  18: 696716.765 ops/s
# Warmup Iteration  19: 704152.801 ops/s
# Warmup Iteration  20: 713605.103 ops/s
# Warmup Iteration  21: 664112.476 ops/s
# Warmup Iteration  22: 687457.966 ops/s
# Warmup Iteration  23: 715600.985 ops/s
# Warmup Iteration  24: 678086.894 ops/s
# Warmup Iteration  25: 682757.679 ops/s
# Warmup Iteration  26: 677692.523 ops/s
# Warmup Iteration  27: 706405.631 ops/s
# Warmup Iteration  28: 688339.801 ops/s
# Warmup Iteration  29: 685824.148 ops/s
# Warmup Iteration  30: 664078.645 ops/s
Iteration   1: 652355.876 ops/s
Iteration   2: 668244.137 ops/s
Iteration   3: 672715.021 ops/s
Iteration   4: 655714.632 ops/s
Iteration   5: 675250.337 ops/s
Iteration   6: 671705.397 ops/s
Iteration   7: 674241.047 ops/s
Iteration   8: 673297.886 ops/s
Iteration   9: 650752.593 ops/s
Iteration  10: 671170.837 ops/s
Iteration  11: 654896.299 ops/s
Iteration  12: 662052.337 ops/s
Iteration  13: 672004.268 ops/s
Iteration  14: 659896.380 ops/s
Iteration  15: 671171.960 ops/s
Iteration  16: 667982.004 ops/s
Iteration  17: 658773.103 ops/s
Iteration  18: 674629.939 ops/s
Iteration  19: 665480.495 ops/s
Iteration  20: 670667.389 ops/s
Iteration  21: 664223.731 ops/s
Iteration  22: 659281.616 ops/s
Iteration  23: 697141.285 ops/s
Iteration  24: 717872.109 ops/s
Iteration  25: 683507.706 ops/s
Iteration  26: 712745.613 ops/s
Iteration  27: 725574.218 ops/s
Iteration  28: 700642.880 ops/s
Iteration  29: 662373.099 ops/s
Iteration  30: 718094.217 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapValuesTest._Benchmark.benchmark_valuesToArray":
  675481.947 ±(99.9%) 13710.006 ops/s [Average]
  (min, avg, max) = (650752.593, 675481.947, 725574.218), stdev = 20520.494
  CI (99.9%): [661771.940, 689191.953] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
HashBiMapValuesTest._Benchmark.benchmark_valuesToArray  thrpt   30  675481.947 ± 13710.006  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 684856.000 ops/s
# Warmup Iteration   2: 1434249.809 ops/s
# Warmup Iteration   3: 1511596.733 ops/s
# Warmup Iteration   4: 1527467.666 ops/s
# Warmup Iteration   5: 1236647.908 ops/s
# Warmup Iteration   6: 1538941.004 ops/s
# Warmup Iteration   7: 1506968.693 ops/s
# Warmup Iteration   8: 1490064.747 ops/s
# Warmup Iteration   9: 1476478.611 ops/s
# Warmup Iteration  10: 1531252.928 ops/s
# Warmup Iteration  11: 1530879.340 ops/s
# Warmup Iteration  12: 1602326.761 ops/s
# Warmup Iteration  13: 1492473.812 ops/s
# Warmup Iteration  14: 1469558.085 ops/s
# Warmup Iteration  15: 1550385.568 ops/s
# Warmup Iteration  16: 1538917.047 ops/s
# Warmup Iteration  17: 1496808.549 ops/s
# Warmup Iteration  18: 1477629.173 ops/s
# Warmup Iteration  19: 1489033.289 ops/s
# Warmup Iteration  20: 1487573.220 ops/s
# Warmup Iteration  21: 1546427.565 ops/s
# Warmup Iteration  22: 1485982.631 ops/s
# Warmup Iteration  23: 1468393.233 ops/s
# Warmup Iteration  24: 1476246.913 ops/s
# Warmup Iteration  25: 1468359.401 ops/s
# Warmup Iteration  26: 1480804.031 ops/s
# Warmup Iteration  27: 1471562.052 ops/s
# Warmup Iteration  28: 1461060.663 ops/s
# Warmup Iteration  29: 1465217.972 ops/s
# Warmup Iteration  30: 1455655.941 ops/s
Iteration   1: 1474141.888 ops/s
Iteration   2: 1484607.183 ops/s
Iteration   3: 1526671.642 ops/s
Iteration   4: 1480197.191 ops/s
Iteration   5: 1484868.234 ops/s
Iteration   6: 1531726.976 ops/s
Iteration   7: 1537192.811 ops/s
Iteration   8: 1528015.559 ops/s
Iteration   9: 1484693.824 ops/s
Iteration  10: 1455624.129 ops/s
Iteration  11: 1497211.214 ops/s
Iteration  12: 1499523.181 ops/s
Iteration  13: 1461577.383 ops/s
Iteration  14: 1455342.423 ops/s
Iteration  15: 1447357.723 ops/s
Iteration  16: 1466812.291 ops/s
Iteration  17: 1484419.364 ops/s
Iteration  18: 1518415.523 ops/s
Iteration  19: 1549453.038 ops/s
Iteration  20: 1532294.006 ops/s
Iteration  21: 1559237.297 ops/s
Iteration  22: 1497342.772 ops/s
Iteration  23: 1454435.175 ops/s
Iteration  24: 1441287.824 ops/s
Iteration  25: 1537370.176 ops/s
Iteration  26: 1479541.692 ops/s
Iteration  27: 1530305.905 ops/s
Iteration  28: 1501023.331 ops/s
Iteration  29: 1464124.879 ops/s
Iteration  30: 1446902.863 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_add":
  1493723.917 ±(99.9%) 22787.751 ops/s [Average]
  (min, avg, max) = (1441287.824, 1493723.917, 1559237.297), stdev = 34107.636
  CI (99.9%): [1470936.165, 1516511.668] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_add  thrpt   30  1493723.917 ± 22787.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1248347.172 ops/s
# Warmup Iteration   2: 2938419.840 ops/s
# Warmup Iteration   3: 2935554.790 ops/s
# Warmup Iteration   4: 2424073.724 ops/s
# Warmup Iteration   5: 2989526.055 ops/s
# Warmup Iteration   6: 2919686.359 ops/s
# Warmup Iteration   7: 2916464.217 ops/s
# Warmup Iteration   8: 2918523.788 ops/s
# Warmup Iteration   9: 2973863.837 ops/s
# Warmup Iteration  10: 2991157.625 ops/s
# Warmup Iteration  11: 2984761.617 ops/s
# Warmup Iteration  12: 2877368.988 ops/s
# Warmup Iteration  13: 2898336.322 ops/s
# Warmup Iteration  14: 2899700.154 ops/s
# Warmup Iteration  15: 2875670.606 ops/s
# Warmup Iteration  16: 3009027.279 ops/s
# Warmup Iteration  17: 2947584.892 ops/s
# Warmup Iteration  18: 2953697.934 ops/s
# Warmup Iteration  19: 2895773.224 ops/s
# Warmup Iteration  20: 2934247.741 ops/s
# Warmup Iteration  21: 2906412.344 ops/s
# Warmup Iteration  22: 2996635.469 ops/s
# Warmup Iteration  23: 2913940.239 ops/s
# Warmup Iteration  24: 2931849.834 ops/s
# Warmup Iteration  25: 2915270.301 ops/s
# Warmup Iteration  26: 2874478.108 ops/s
# Warmup Iteration  27: 2901132.239 ops/s
# Warmup Iteration  28: 2936960.482 ops/s
# Warmup Iteration  29: 2900710.599 ops/s
# Warmup Iteration  30: 2931322.059 ops/s
Iteration   1: 2853110.442 ops/s
Iteration   2: 2881790.992 ops/s
Iteration   3: 2898514.048 ops/s
Iteration   4: 3034651.543 ops/s
Iteration   5: 2877033.254 ops/s
Iteration   6: 2922105.324 ops/s
Iteration   7: 2909926.133 ops/s
Iteration   8: 2892909.872 ops/s
Iteration   9: 3003981.896 ops/s
Iteration  10: 2983271.316 ops/s
Iteration  11: 3008559.930 ops/s
Iteration  12: 2885172.197 ops/s
Iteration  13: 2808460.847 ops/s
Iteration  14: 2987699.241 ops/s
Iteration  15: 2880333.461 ops/s
Iteration  16: 2933747.647 ops/s
Iteration  17: 2925622.272 ops/s
Iteration  18: 2970028.141 ops/s
Iteration  19: 3050734.260 ops/s
Iteration  20: 2996873.505 ops/s
Iteration  21: 2973804.258 ops/s
Iteration  22: 2887088.088 ops/s
Iteration  23: 2878600.134 ops/s
Iteration  24: 2915268.730 ops/s
Iteration  25: 2982674.032 ops/s
Iteration  26: 2945217.006 ops/s
Iteration  27: 2969111.458 ops/s
Iteration  28: 2942941.590 ops/s
Iteration  29: 2938856.316 ops/s
Iteration  30: 2922171.158 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_aggregateByMutating":
  2935341.970 ±(99.9%) 37870.735 ops/s [Average]
  (min, avg, max) = (2808460.847, 2935341.970, 3050734.260), stdev = 56683.137
  CI (99.9%): [2897471.235, 2973212.704] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  2935341.970 ± 37870.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1376249.267 ops/s
# Warmup Iteration   2: 3623679.305 ops/s
# Warmup Iteration   3: 3220837.794 ops/s
# Warmup Iteration   4: 3294046.721 ops/s
# Warmup Iteration   5: 3578644.038 ops/s
# Warmup Iteration   6: 3599918.213 ops/s
# Warmup Iteration   7: 3588589.425 ops/s
# Warmup Iteration   8: 3617060.340 ops/s
# Warmup Iteration   9: 3631666.452 ops/s
# Warmup Iteration  10: 3618071.921 ops/s
# Warmup Iteration  11: 3538945.453 ops/s
# Warmup Iteration  12: 3532202.795 ops/s
# Warmup Iteration  13: 3562259.414 ops/s
# Warmup Iteration  14: 3524410.185 ops/s
# Warmup Iteration  15: 3618100.423 ops/s
# Warmup Iteration  16: 3523487.356 ops/s
# Warmup Iteration  17: 3567755.668 ops/s
# Warmup Iteration  18: 3560657.383 ops/s
# Warmup Iteration  19: 3727153.184 ops/s
# Warmup Iteration  20: 3524686.800 ops/s
# Warmup Iteration  21: 3500670.611 ops/s
# Warmup Iteration  22: 3525665.219 ops/s
# Warmup Iteration  23: 3567231.626 ops/s
# Warmup Iteration  24: 3488998.501 ops/s
# Warmup Iteration  25: 3529672.026 ops/s
# Warmup Iteration  26: 3537247.829 ops/s
# Warmup Iteration  27: 3537567.937 ops/s
# Warmup Iteration  28: 3577269.786 ops/s
# Warmup Iteration  29: 3645051.977 ops/s
# Warmup Iteration  30: 3578981.578 ops/s
Iteration   1: 3502881.076 ops/s
Iteration   2: 3599971.412 ops/s
Iteration   3: 3530628.552 ops/s
Iteration   4: 3559174.549 ops/s
Iteration   5: 3536322.195 ops/s
Iteration   6: 3600306.383 ops/s
Iteration   7: 3857654.997 ops/s
Iteration   8: 3842395.799 ops/s
Iteration   9: 3863725.398 ops/s
Iteration  10: 3851925.869 ops/s
Iteration  11: 3594668.879 ops/s
Iteration  12: 3535663.863 ops/s
Iteration  13: 3483363.493 ops/s
Iteration  14: 3616054.696 ops/s
Iteration  15: 3540717.368 ops/s
Iteration  16: 3561521.701 ops/s
Iteration  17: 3586343.631 ops/s
Iteration  18: 3534040.766 ops/s
Iteration  19: 3469257.701 ops/s
Iteration  20: 3506735.889 ops/s
Iteration  21: 3506043.630 ops/s
Iteration  22: 3632707.141 ops/s
Iteration  23: 3487085.586 ops/s
Iteration  24: 3505748.246 ops/s
Iteration  25: 3572602.131 ops/s
Iteration  26: 3509474.874 ops/s
Iteration  27: 3554808.151 ops/s
Iteration  28: 3540117.756 ops/s
Iteration  29: 3472114.152 ops/s
Iteration  30: 3498444.512 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_aggregateByNonMutating":
  3581750.013 ±(99.9%) 77900.819 ops/s [Average]
  (min, avg, max) = (3469257.701, 3581750.013, 3863725.398), stdev = 116598.287
  CI (99.9%): [3503849.195, 3659650.832] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  3581750.013 ± 77900.819  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1237998.074 ops/s
# Warmup Iteration   2: 2484137.779 ops/s
# Warmup Iteration   3: 2656845.746 ops/s
# Warmup Iteration   4: 2656420.297 ops/s
# Warmup Iteration   5: 2175945.134 ops/s
# Warmup Iteration   6: 2654272.572 ops/s
# Warmup Iteration   7: 2727982.064 ops/s
# Warmup Iteration   8: 2675015.289 ops/s
# Warmup Iteration   9: 2681953.118 ops/s
# Warmup Iteration  10: 2660080.365 ops/s
# Warmup Iteration  11: 2657023.181 ops/s
# Warmup Iteration  12: 2659273.324 ops/s
# Warmup Iteration  13: 2681544.863 ops/s
# Warmup Iteration  14: 2797203.088 ops/s
# Warmup Iteration  15: 2779153.940 ops/s
# Warmup Iteration  16: 2693780.878 ops/s
# Warmup Iteration  17: 2758169.270 ops/s
# Warmup Iteration  18: 2654390.607 ops/s
# Warmup Iteration  19: 2640674.349 ops/s
# Warmup Iteration  20: 2670987.728 ops/s
# Warmup Iteration  21: 2653867.794 ops/s
# Warmup Iteration  22: 2691786.411 ops/s
# Warmup Iteration  23: 2663806.308 ops/s
# Warmup Iteration  24: 2697192.253 ops/s
# Warmup Iteration  25: 2662416.629 ops/s
# Warmup Iteration  26: 2632117.371 ops/s
# Warmup Iteration  27: 2654321.645 ops/s
# Warmup Iteration  28: 2747590.468 ops/s
# Warmup Iteration  29: 2732090.212 ops/s
# Warmup Iteration  30: 2662356.901 ops/s
Iteration   1: 2665924.459 ops/s
Iteration   2: 2693704.963 ops/s
Iteration   3: 2696806.364 ops/s
Iteration   4: 2688568.877 ops/s
Iteration   5: 2676174.427 ops/s
Iteration   6: 2656202.960 ops/s
Iteration   7: 2662739.525 ops/s
Iteration   8: 2627803.182 ops/s
Iteration   9: 2666276.108 ops/s
Iteration  10: 2641755.824 ops/s
Iteration  11: 2660245.002 ops/s
Iteration  12: 2652650.614 ops/s
Iteration  13: 2640326.588 ops/s
Iteration  14: 2787521.598 ops/s
Iteration  15: 2637402.349 ops/s
Iteration  16: 2631757.933 ops/s
Iteration  17: 2670350.830 ops/s
Iteration  18: 2634723.901 ops/s
Iteration  19: 2692289.788 ops/s
Iteration  20: 2665280.441 ops/s
Iteration  21: 2658463.988 ops/s
Iteration  22: 2722084.622 ops/s
Iteration  23: 2763605.703 ops/s
Iteration  24: 2764367.703 ops/s
Iteration  25: 2900315.968 ops/s
Iteration  26: 2893204.914 ops/s
Iteration  27: 2903672.269 ops/s
Iteration  28: 2910930.102 ops/s
Iteration  29: 2776492.497 ops/s
Iteration  30: 2637459.458 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_allSatisfy":
  2709303.432 ±(99.9%) 58977.148 ops/s [Average]
  (min, avg, max) = (2627803.182, 2709303.432, 2910930.102), stdev = 88274.226
  CI (99.9%): [2650326.283, 2768280.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_allSatisfy  thrpt   30  2709303.432 ± 58977.148  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2061544.022 ops/s
# Warmup Iteration   2: 4569567.994 ops/s
# Warmup Iteration   3: 4350255.128 ops/s
# Warmup Iteration   4: 3609489.578 ops/s
# Warmup Iteration   5: 4274091.220 ops/s
# Warmup Iteration   6: 4261093.914 ops/s
# Warmup Iteration   7: 4340124.908 ops/s
# Warmup Iteration   8: 4246854.014 ops/s
# Warmup Iteration   9: 4245514.066 ops/s
# Warmup Iteration  10: 4274383.424 ops/s
# Warmup Iteration  11: 4244376.543 ops/s
# Warmup Iteration  12: 4393000.663 ops/s
# Warmup Iteration  13: 4210593.764 ops/s
# Warmup Iteration  14: 4234219.633 ops/s
# Warmup Iteration  15: 4316981.757 ops/s
# Warmup Iteration  16: 4311944.845 ops/s
# Warmup Iteration  17: 4271845.076 ops/s
# Warmup Iteration  18: 4230684.393 ops/s
# Warmup Iteration  19: 4164624.891 ops/s
# Warmup Iteration  20: 4261348.896 ops/s
# Warmup Iteration  21: 4282132.032 ops/s
# Warmup Iteration  22: 4285837.945 ops/s
# Warmup Iteration  23: 4266412.748 ops/s
# Warmup Iteration  24: 4232903.764 ops/s
# Warmup Iteration  25: 4282022.608 ops/s
# Warmup Iteration  26: 4443772.962 ops/s
# Warmup Iteration  27: 4275793.090 ops/s
# Warmup Iteration  28: 4281005.641 ops/s
# Warmup Iteration  29: 4260394.601 ops/s
# Warmup Iteration  30: 4478609.727 ops/s
Iteration   1: 4402221.257 ops/s
Iteration   2: 4556229.622 ops/s
Iteration   3: 4501256.471 ops/s
Iteration   4: 4191547.996 ops/s
Iteration   5: 4237545.243 ops/s
Iteration   6: 4445646.164 ops/s
Iteration   7: 4233824.900 ops/s
Iteration   8: 4457478.961 ops/s
Iteration   9: 4311998.767 ops/s
Iteration  10: 4199012.640 ops/s
Iteration  11: 4454680.479 ops/s
Iteration  12: 4267117.056 ops/s
Iteration  13: 4252592.932 ops/s
Iteration  14: 4413572.087 ops/s
Iteration  15: 4189023.260 ops/s
Iteration  16: 4369176.590 ops/s
Iteration  17: 4272536.643 ops/s
Iteration  18: 4345961.997 ops/s
Iteration  19: 4616288.526 ops/s
Iteration  20: 5101666.307 ops/s
Iteration  21: 4601534.133 ops/s
Iteration  22: 4509080.426 ops/s
Iteration  23: 4138704.248 ops/s
Iteration  24: 4593473.905 ops/s
Iteration  25: 4581961.177 ops/s
Iteration  26: 4321037.686 ops/s
Iteration  27: 4372845.318 ops/s
Iteration  28: 4555599.929 ops/s
Iteration  29: 4563409.307 ops/s
Iteration  30: 4465983.414 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_allSatisfyWith":
  4417433.581 ±(99.9%) 128718.176 ops/s [Average]
  (min, avg, max) = (4138704.248, 4417433.581, 5101666.307), stdev = 192659.321
  CI (99.9%): [4288715.405, 4546151.757] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  4417433.581 ± 128718.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1291096.344 ops/s
# Warmup Iteration   2: 2589429.049 ops/s
# Warmup Iteration   3: 2557176.031 ops/s
# Warmup Iteration   4: 2675818.864 ops/s
# Warmup Iteration   5: 2152323.358 ops/s
# Warmup Iteration   6: 2678051.973 ops/s
# Warmup Iteration   7: 2708616.271 ops/s
# Warmup Iteration   8: 2709440.269 ops/s
# Warmup Iteration   9: 2724288.590 ops/s
# Warmup Iteration  10: 2719626.664 ops/s
# Warmup Iteration  11: 2589097.438 ops/s
# Warmup Iteration  12: 2682443.305 ops/s
# Warmup Iteration  13: 2589474.684 ops/s
# Warmup Iteration  14: 2699116.500 ops/s
# Warmup Iteration  15: 2646750.056 ops/s
# Warmup Iteration  16: 2606630.542 ops/s
# Warmup Iteration  17: 2629205.893 ops/s
# Warmup Iteration  18: 2672727.608 ops/s
# Warmup Iteration  19: 2639970.066 ops/s
# Warmup Iteration  20: 2579972.976 ops/s
# Warmup Iteration  21: 2636280.923 ops/s
# Warmup Iteration  22: 2660254.057 ops/s
# Warmup Iteration  23: 2576659.670 ops/s
# Warmup Iteration  24: 2495675.963 ops/s
# Warmup Iteration  25: 2480862.562 ops/s
# Warmup Iteration  26: 2624261.738 ops/s
# Warmup Iteration  27: 2612508.162 ops/s
# Warmup Iteration  28: 2614920.781 ops/s
# Warmup Iteration  29: 2626374.457 ops/s
# Warmup Iteration  30: 2574960.541 ops/s
Iteration   1: 2749172.408 ops/s
Iteration   2: 2590862.264 ops/s
Iteration   3: 2721647.888 ops/s
Iteration   4: 2673118.389 ops/s
Iteration   5: 2487166.266 ops/s
Iteration   6: 2598587.550 ops/s
Iteration   7: 2695995.198 ops/s
Iteration   8: 2764960.242 ops/s
Iteration   9: 2735447.452 ops/s
Iteration  10: 2686129.446 ops/s
Iteration  11: 2728212.713 ops/s
Iteration  12: 2747013.186 ops/s
Iteration  13: 2761548.728 ops/s
Iteration  14: 2548960.320 ops/s
Iteration  15: 2504798.738 ops/s
Iteration  16: 2726235.677 ops/s
Iteration  17: 2756514.496 ops/s
Iteration  18: 2585749.801 ops/s
Iteration  19: 2508975.620 ops/s
Iteration  20: 2471944.182 ops/s
Iteration  21: 2535002.918 ops/s
Iteration  22: 2560496.470 ops/s
Iteration  23: 2563260.392 ops/s
Iteration  24: 2652197.358 ops/s
Iteration  25: 2705579.715 ops/s
Iteration  26: 2633980.748 ops/s
Iteration  27: 2611974.872 ops/s
Iteration  28: 2624728.106 ops/s
Iteration  29: 2677927.898 ops/s
Iteration  30: 2625567.184 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_anySatisfy":
  2641125.208 ±(99.9%) 60455.142 ops/s [Average]
  (min, avg, max) = (2471944.182, 2641125.208, 2764960.242), stdev = 90486.417
  CI (99.9%): [2580670.066, 2701580.349] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_anySatisfy  thrpt   30  2641125.208 ± 60455.142  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2016125.581 ops/s
# Warmup Iteration   2: 4237307.638 ops/s
# Warmup Iteration   3: 4310147.191 ops/s
# Warmup Iteration   4: 3660654.660 ops/s
# Warmup Iteration   5: 4322895.868 ops/s
# Warmup Iteration   6: 4474754.594 ops/s
# Warmup Iteration   7: 4401548.141 ops/s
# Warmup Iteration   8: 4415854.161 ops/s
# Warmup Iteration   9: 4529918.851 ops/s
# Warmup Iteration  10: 4455047.532 ops/s
# Warmup Iteration  11: 4321655.088 ops/s
# Warmup Iteration  12: 4542194.236 ops/s
# Warmup Iteration  13: 4468021.591 ops/s
# Warmup Iteration  14: 4395990.460 ops/s
# Warmup Iteration  15: 4468230.158 ops/s
# Warmup Iteration  16: 4320536.033 ops/s
# Warmup Iteration  17: 4363609.842 ops/s
# Warmup Iteration  18: 4532872.545 ops/s
# Warmup Iteration  19: 4423142.779 ops/s
# Warmup Iteration  20: 4433100.228 ops/s
# Warmup Iteration  21: 4341814.535 ops/s
# Warmup Iteration  22: 4307704.882 ops/s
# Warmup Iteration  23: 4342081.900 ops/s
# Warmup Iteration  24: 4293380.774 ops/s
# Warmup Iteration  25: 4360213.323 ops/s
# Warmup Iteration  26: 4317188.332 ops/s
# Warmup Iteration  27: 4254896.696 ops/s
# Warmup Iteration  28: 4432058.948 ops/s
# Warmup Iteration  29: 4677367.019 ops/s
# Warmup Iteration  30: 4371139.279 ops/s
Iteration   1: 4313418.783 ops/s
Iteration   2: 4237272.718 ops/s
Iteration   3: 4119524.645 ops/s
Iteration   4: 4162350.617 ops/s
Iteration   5: 4282950.061 ops/s
Iteration   6: 4286611.996 ops/s
Iteration   7: 4366731.900 ops/s
Iteration   8: 4325975.924 ops/s
Iteration   9: 4378858.826 ops/s
Iteration  10: 4466374.630 ops/s
Iteration  11: 4735222.646 ops/s
Iteration  12: 4294308.627 ops/s
Iteration  13: 4599499.923 ops/s
Iteration  14: 4452990.301 ops/s
Iteration  15: 4720798.102 ops/s
Iteration  16: 4471254.088 ops/s
Iteration  17: 4355599.740 ops/s
Iteration  18: 4367912.607 ops/s
Iteration  19: 4365679.490 ops/s
Iteration  20: 4497640.585 ops/s
Iteration  21: 4624994.670 ops/s
Iteration  22: 4621624.087 ops/s
Iteration  23: 4427535.686 ops/s
Iteration  24: 4223755.516 ops/s
Iteration  25: 4330607.742 ops/s
Iteration  26: 4347763.549 ops/s
Iteration  27: 4651907.511 ops/s
Iteration  28: 4571027.762 ops/s
Iteration  29: 4635965.933 ops/s
Iteration  30: 4385578.352 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_anySatisfyWith":
  4420724.567 ±(99.9%) 108851.819 ops/s [Average]
  (min, avg, max) = (4119524.645, 4420724.567, 4735222.646), stdev = 162924.290
  CI (99.9%): [4311872.748, 4529576.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  4420724.567 ± 108851.819  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 918143.527 ops/s
# Warmup Iteration   2: 1965657.696 ops/s
# Warmup Iteration   3: 2125725.911 ops/s
# Warmup Iteration   4: 2142094.562 ops/s
# Warmup Iteration   5: 1820780.439 ops/s
# Warmup Iteration   6: 2230751.578 ops/s
# Warmup Iteration   7: 2095972.991 ops/s
# Warmup Iteration   8: 2115232.197 ops/s
# Warmup Iteration   9: 2086080.492 ops/s
# Warmup Iteration  10: 2106961.197 ops/s
# Warmup Iteration  11: 2186407.205 ops/s
# Warmup Iteration  12: 2134569.747 ops/s
# Warmup Iteration  13: 2181856.328 ops/s
# Warmup Iteration  14: 2097191.088 ops/s
# Warmup Iteration  15: 2122990.686 ops/s
# Warmup Iteration  16: 2100851.385 ops/s
# Warmup Iteration  17: 2117385.466 ops/s
# Warmup Iteration  18: 2126616.417 ops/s
# Warmup Iteration  19: 2111793.378 ops/s
# Warmup Iteration  20: 2131835.823 ops/s
# Warmup Iteration  21: 2119457.572 ops/s
# Warmup Iteration  22: 2215687.300 ops/s
# Warmup Iteration  23: 2102584.255 ops/s
# Warmup Iteration  24: 2131478.999 ops/s
# Warmup Iteration  25: 2177945.175 ops/s
# Warmup Iteration  26: 2127649.122 ops/s
# Warmup Iteration  27: 2089443.933 ops/s
# Warmup Iteration  28: 2136604.277 ops/s
# Warmup Iteration  29: 2206250.780 ops/s
# Warmup Iteration  30: 2282877.460 ops/s
Iteration   1: 2240526.929 ops/s
Iteration   2: 2235315.365 ops/s
Iteration   3: 2198110.620 ops/s
Iteration   4: 2232791.735 ops/s
Iteration   5: 2275115.350 ops/s
Iteration   6: 2149923.716 ops/s
Iteration   7: 2174161.110 ops/s
Iteration   8: 2090126.076 ops/s
Iteration   9: 2133439.245 ops/s
Iteration  10: 2145062.480 ops/s
Iteration  11: 2190632.286 ops/s
Iteration  12: 2125984.678 ops/s
Iteration  13: 2146711.901 ops/s
Iteration  14: 2143616.127 ops/s
Iteration  15: 2118561.087 ops/s
Iteration  16: 2153287.676 ops/s
Iteration  17: 2083843.463 ops/s
Iteration  18: 2278401.115 ops/s
Iteration  19: 2315431.678 ops/s
Iteration  20: 2212072.254 ops/s
Iteration  21: 2133513.147 ops/s
Iteration  22: 2137897.550 ops/s
Iteration  23: 2196523.580 ops/s
Iteration  24: 2072457.490 ops/s
Iteration  25: 2134401.423 ops/s
Iteration  26: 2093776.598 ops/s
Iteration  27: 2117102.446 ops/s
Iteration  28: 2204340.176 ops/s
Iteration  29: 2326054.853 ops/s
Iteration  30: 2327293.001 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_appendString":
  2179549.172 ±(99.9%) 48432.471 ops/s [Average]
  (min, avg, max) = (2072457.490, 2179549.172, 2327293.001), stdev = 72491.448
  CI (99.9%): [2131116.701, 2227981.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_appendString  thrpt   30  2179549.172 ± 48432.471  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1276430.764 ops/s
# Warmup Iteration   2: 3378658.864 ops/s
# Warmup Iteration   3: 3616727.283 ops/s
# Warmup Iteration   4: 3049831.304 ops/s
# Warmup Iteration   5: 3446874.611 ops/s
# Warmup Iteration   6: 3440128.583 ops/s
# Warmup Iteration   7: 3308573.697 ops/s
# Warmup Iteration   8: 3372085.462 ops/s
# Warmup Iteration   9: 3553209.524 ops/s
# Warmup Iteration  10: 3355710.177 ops/s
# Warmup Iteration  11: 3333203.886 ops/s
# Warmup Iteration  12: 3319163.944 ops/s
# Warmup Iteration  13: 3326867.298 ops/s
# Warmup Iteration  14: 3393914.592 ops/s
# Warmup Iteration  15: 3386424.655 ops/s
# Warmup Iteration  16: 3319817.767 ops/s
# Warmup Iteration  17: 3406205.511 ops/s
# Warmup Iteration  18: 3395244.750 ops/s
# Warmup Iteration  19: 3417736.196 ops/s
# Warmup Iteration  20: 3389654.966 ops/s
# Warmup Iteration  21: 3413823.979 ops/s
# Warmup Iteration  22: 3449270.037 ops/s
# Warmup Iteration  23: 3551708.191 ops/s
# Warmup Iteration  24: 3659904.019 ops/s
# Warmup Iteration  25: 3680245.125 ops/s
# Warmup Iteration  26: 3434277.857 ops/s
# Warmup Iteration  27: 3369935.685 ops/s
# Warmup Iteration  28: 3483744.477 ops/s
# Warmup Iteration  29: 3442461.053 ops/s
# Warmup Iteration  30: 3397599.484 ops/s
Iteration   1: 3320341.615 ops/s
Iteration   2: 3399983.224 ops/s
Iteration   3: 3574459.036 ops/s
Iteration   4: 3680859.745 ops/s
Iteration   5: 3666326.710 ops/s
Iteration   6: 3685177.712 ops/s
Iteration   7: 3678868.939 ops/s
Iteration   8: 3460947.952 ops/s
Iteration   9: 3420362.034 ops/s
Iteration  10: 3417998.343 ops/s
Iteration  11: 3423540.403 ops/s
Iteration  12: 3392664.503 ops/s
Iteration  13: 3358788.879 ops/s
Iteration  14: 3518528.630 ops/s
Iteration  15: 3597648.837 ops/s
Iteration  16: 3570961.885 ops/s
Iteration  17: 3385873.270 ops/s
Iteration  18: 3437327.856 ops/s
Iteration  19: 3664782.455 ops/s
Iteration  20: 3583343.905 ops/s
Iteration  21: 3329424.334 ops/s
Iteration  22: 3618613.804 ops/s
Iteration  23: 3668512.599 ops/s
Iteration  24: 3382035.416 ops/s
Iteration  25: 3554005.054 ops/s
Iteration  26: 3453209.033 ops/s
Iteration  27: 3678068.562 ops/s
Iteration  28: 3684213.852 ops/s
Iteration  29: 3677923.136 ops/s
Iteration  30: 3678501.938 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_asLazy":
  3532109.789 ±(99.9%) 86059.291 ops/s [Average]
  (min, avg, max) = (3320341.615, 3532109.789, 3685177.712), stdev = 128809.505
  CI (99.9%): [3446050.498, 3618169.079] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_asLazy  thrpt   30  3532109.789 ± 86059.291  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3215140.427 ops/s
# Warmup Iteration   2: 6710932.309 ops/s
# Warmup Iteration   3: 5552022.211 ops/s
# Warmup Iteration   4: 6897305.889 ops/s
# Warmup Iteration   5: 7084529.114 ops/s
# Warmup Iteration   6: 7136139.042 ops/s
# Warmup Iteration   7: 7031188.250 ops/s
# Warmup Iteration   8: 7047441.849 ops/s
# Warmup Iteration   9: 7085296.922 ops/s
# Warmup Iteration  10: 6969564.369 ops/s
# Warmup Iteration  11: 6994938.629 ops/s
# Warmup Iteration  12: 6886924.355 ops/s
# Warmup Iteration  13: 6844381.669 ops/s
# Warmup Iteration  14: 6793091.511 ops/s
# Warmup Iteration  15: 6767301.623 ops/s
# Warmup Iteration  16: 6776096.128 ops/s
# Warmup Iteration  17: 6757400.423 ops/s
# Warmup Iteration  18: 6785970.504 ops/s
# Warmup Iteration  19: 6830503.518 ops/s
# Warmup Iteration  20: 6795912.734 ops/s
# Warmup Iteration  21: 6848686.992 ops/s
# Warmup Iteration  22: 6762187.998 ops/s
# Warmup Iteration  23: 6905382.007 ops/s
# Warmup Iteration  24: 7006281.138 ops/s
# Warmup Iteration  25: 6807192.781 ops/s
# Warmup Iteration  26: 6851424.198 ops/s
# Warmup Iteration  27: 6976284.074 ops/s
# Warmup Iteration  28: 6948225.479 ops/s
# Warmup Iteration  29: 6795262.693 ops/s
# Warmup Iteration  30: 6821280.184 ops/s
Iteration   1: 6894142.469 ops/s
Iteration   2: 6720780.091 ops/s
Iteration   3: 6855579.639 ops/s
Iteration   4: 6897171.081 ops/s
Iteration   5: 6731510.766 ops/s
Iteration   6: 6765832.789 ops/s
Iteration   7: 6816390.544 ops/s
Iteration   8: 6678194.902 ops/s
Iteration   9: 6961875.038 ops/s
Iteration  10: 6780729.298 ops/s
Iteration  11: 6796053.480 ops/s
Iteration  12: 7030258.679 ops/s
Iteration  13: 6877764.845 ops/s
Iteration  14: 6719383.090 ops/s
Iteration  15: 6772622.720 ops/s
Iteration  16: 6560912.152 ops/s
Iteration  17: 6910413.477 ops/s
Iteration  18: 6793534.269 ops/s
Iteration  19: 6806728.565 ops/s
Iteration  20: 6799947.045 ops/s
Iteration  21: 6818704.542 ops/s
Iteration  22: 6845741.955 ops/s
Iteration  23: 6764072.777 ops/s
Iteration  24: 6861081.041 ops/s
Iteration  25: 6826152.388 ops/s
Iteration  26: 6903332.592 ops/s
Iteration  27: 6855831.512 ops/s
Iteration  28: 6625639.166 ops/s
Iteration  29: 6932636.770 ops/s
Iteration  30: 6686223.504 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_asSynchronized":
  6809641.373 ±(99.9%) 66934.791 ops/s [Average]
  (min, avg, max) = (6560912.152, 6809641.373, 7030258.679), stdev = 100184.851
  CI (99.9%): [6742706.582, 6876576.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_asSynchronized  thrpt   30  6809641.373 ± 66934.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 455386.971 ops/s
# Warmup Iteration   2: 616334.942 ops/s
# Warmup Iteration   3: 749547.574 ops/s
# Warmup Iteration   4: 745304.872 ops/s
# Warmup Iteration   5: 720230.564 ops/s
# Warmup Iteration   6: 769860.172 ops/s
# Warmup Iteration   7: 671043.123 ops/s
# Warmup Iteration   8: 618498.910 ops/s
# Warmup Iteration   9: 713866.005 ops/s
# Warmup Iteration  10: 708342.001 ops/s
# Warmup Iteration  11: 712628.738 ops/s
# Warmup Iteration  12: 714526.361 ops/s
# Warmup Iteration  13: 744384.348 ops/s
# Warmup Iteration  14: 722795.417 ops/s
# Warmup Iteration  15: 708687.907 ops/s
# Warmup Iteration  16: 715815.532 ops/s
# Warmup Iteration  17: 751476.903 ops/s
# Warmup Iteration  18: 747357.627 ops/s
# Warmup Iteration  19: 747359.767 ops/s
# Warmup Iteration  20: 750687.707 ops/s
# Warmup Iteration  21: 740261.146 ops/s
# Warmup Iteration  22: 745483.260 ops/s
# Warmup Iteration  23: 748203.172 ops/s
# Warmup Iteration  24: 786711.427 ops/s
# Warmup Iteration  25: 820213.802 ops/s
# Warmup Iteration  26: 789720.433 ops/s
# Warmup Iteration  27: 799268.235 ops/s
# Warmup Iteration  28: 779964.502 ops/s
# Warmup Iteration  29: 756571.290 ops/s
# Warmup Iteration  30: 746329.084 ops/s
Iteration   1: 778356.267 ops/s
Iteration   2: 759121.139 ops/s
Iteration   3: 778107.962 ops/s
Iteration   4: 792498.609 ops/s
Iteration   5: 774716.712 ops/s
Iteration   6: 811774.277 ops/s
Iteration   7: 786488.034 ops/s
Iteration   8: 801179.343 ops/s
Iteration   9: 792108.118 ops/s
Iteration  10: 763664.356 ops/s
Iteration  11: 774537.244 ops/s
Iteration  12: 788886.080 ops/s
Iteration  13: 782044.711 ops/s
Iteration  14: 790593.096 ops/s
Iteration  15: 762745.861 ops/s
Iteration  16: 782786.664 ops/s
Iteration  17: 751639.901 ops/s
Iteration  18: 746505.602 ops/s
Iteration  19: 793204.194 ops/s
Iteration  20: 753967.491 ops/s
Iteration  21: 757666.371 ops/s
Iteration  22: 750564.412 ops/s
Iteration  23: 758437.862 ops/s
Iteration  24: 757599.549 ops/s
Iteration  25: 769739.756 ops/s
Iteration  26: 771447.009 ops/s
Iteration  27: 777504.259 ops/s
Iteration  28: 779229.974 ops/s
Iteration  29: 737582.567 ops/s
Iteration  30: 762738.449 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_asUnmodifiable":
  772914.529 ±(99.9%) 11741.878 ops/s [Average]
  (min, avg, max) = (737582.567, 772914.529, 811774.277), stdev = 17574.691
  CI (99.9%): [761172.651, 784656.407] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  772914.529 ± 11741.878  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1103873.436 ops/s
# Warmup Iteration   2: 3048756.251 ops/s
# Warmup Iteration   3: 2983545.430 ops/s
# Warmup Iteration   4: 2507007.580 ops/s
# Warmup Iteration   5: 3066815.010 ops/s
# Warmup Iteration   6: 2999072.158 ops/s
# Warmup Iteration   7: 3022662.514 ops/s
# Warmup Iteration   8: 3112521.874 ops/s
# Warmup Iteration   9: 3089101.581 ops/s
# Warmup Iteration  10: 3007894.164 ops/s
# Warmup Iteration  11: 3062504.625 ops/s
# Warmup Iteration  12: 3029986.010 ops/s
# Warmup Iteration  13: 3073974.778 ops/s
# Warmup Iteration  14: 3085052.193 ops/s
# Warmup Iteration  15: 3020991.110 ops/s
# Warmup Iteration  16: 3149522.300 ops/s
# Warmup Iteration  17: 3300071.944 ops/s
# Warmup Iteration  18: 3153677.473 ops/s
# Warmup Iteration  19: 3128467.880 ops/s
# Warmup Iteration  20: 3011984.868 ops/s
# Warmup Iteration  21: 3037276.691 ops/s
# Warmup Iteration  22: 3037323.826 ops/s
# Warmup Iteration  23: 3028446.036 ops/s
# Warmup Iteration  24: 2979616.722 ops/s
# Warmup Iteration  25: 3091084.141 ops/s
# Warmup Iteration  26: 3055672.952 ops/s
# Warmup Iteration  27: 3122009.444 ops/s
# Warmup Iteration  28: 3126413.324 ops/s
# Warmup Iteration  29: 3027925.764 ops/s
# Warmup Iteration  30: 3076745.421 ops/s
Iteration   1: 3078400.679 ops/s
Iteration   2: 3065322.930 ops/s
Iteration   3: 2957753.976 ops/s
Iteration   4: 3019333.010 ops/s
Iteration   5: 2986051.807 ops/s
Iteration   6: 3094879.112 ops/s
Iteration   7: 3062766.389 ops/s
Iteration   8: 2993654.234 ops/s
Iteration   9: 3034964.296 ops/s
Iteration  10: 3000445.548 ops/s
Iteration  11: 3013014.206 ops/s
Iteration  12: 2946784.387 ops/s
Iteration  13: 3027111.037 ops/s
Iteration  14: 3065511.630 ops/s
Iteration  15: 3028317.802 ops/s
Iteration  16: 3030931.102 ops/s
Iteration  17: 2986366.161 ops/s
Iteration  18: 2974024.706 ops/s
Iteration  19: 3117597.555 ops/s
Iteration  20: 2976430.392 ops/s
Iteration  21: 3097789.504 ops/s
Iteration  22: 3022501.221 ops/s
Iteration  23: 3057874.004 ops/s
Iteration  24: 3086540.868 ops/s
Iteration  25: 3079643.633 ops/s
Iteration  26: 3021250.298 ops/s
Iteration  27: 3103551.145 ops/s
Iteration  28: 3082116.405 ops/s
Iteration  29: 3039223.014 ops/s
Iteration  30: 2982566.557 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_chunk":
  3034423.920 ±(99.9%) 31254.656 ops/s [Average]
  (min, avg, max) = (2946784.387, 3034423.920, 3117597.555), stdev = 46780.502
  CI (99.9%): [3003169.264, 3065678.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_chunk  thrpt   30  3034423.920 ± 31254.656  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 540933.903 ops/s
# Warmup Iteration   2: 1059138.469 ops/s
# Warmup Iteration   3: 1139918.426 ops/s
# Warmup Iteration   4: 1152958.540 ops/s
# Warmup Iteration   5: 933303.383 ops/s
# Warmup Iteration   6: 1156470.514 ops/s
# Warmup Iteration   7: 1154029.651 ops/s
# Warmup Iteration   8: 1143346.806 ops/s
# Warmup Iteration   9: 1157429.870 ops/s
# Warmup Iteration  10: 1143119.656 ops/s
# Warmup Iteration  11: 1157203.067 ops/s
# Warmup Iteration  12: 1149211.877 ops/s
# Warmup Iteration  13: 1148659.751 ops/s
# Warmup Iteration  14: 1139082.978 ops/s
# Warmup Iteration  15: 1137149.657 ops/s
# Warmup Iteration  16: 1129030.889 ops/s
# Warmup Iteration  17: 1189156.244 ops/s
# Warmup Iteration  18: 1179244.884 ops/s
# Warmup Iteration  19: 1160491.115 ops/s
# Warmup Iteration  20: 1137620.515 ops/s
# Warmup Iteration  21: 1160673.323 ops/s
# Warmup Iteration  22: 1125469.729 ops/s
# Warmup Iteration  23: 1136281.134 ops/s
# Warmup Iteration  24: 1157560.133 ops/s
# Warmup Iteration  25: 1146036.484 ops/s
# Warmup Iteration  26: 1150029.605 ops/s
# Warmup Iteration  27: 1158072.177 ops/s
# Warmup Iteration  28: 1158961.151 ops/s
# Warmup Iteration  29: 1229253.236 ops/s
# Warmup Iteration  30: 1196782.815 ops/s
Iteration   1: 1133408.338 ops/s
Iteration   2: 1149488.664 ops/s
Iteration   3: 1174212.335 ops/s
Iteration   4: 1147961.201 ops/s
Iteration   5: 1157615.043 ops/s
Iteration   6: 1150986.055 ops/s
Iteration   7: 1153741.470 ops/s
Iteration   8: 1146601.344 ops/s
Iteration   9: 1192033.200 ops/s
Iteration  10: 1152949.610 ops/s
Iteration  11: 1142861.247 ops/s
Iteration  12: 1134247.346 ops/s
Iteration  13: 1180852.481 ops/s
Iteration  14: 1192874.611 ops/s
Iteration  15: 1170508.769 ops/s
Iteration  16: 1185419.090 ops/s
Iteration  17: 1215361.158 ops/s
Iteration  18: 1249278.147 ops/s
Iteration  19: 1259212.465 ops/s
Iteration  20: 1168608.166 ops/s
Iteration  21: 1182034.502 ops/s
Iteration  22: 1209522.344 ops/s
Iteration  23: 1205942.715 ops/s
Iteration  24: 1199128.181 ops/s
Iteration  25: 1170031.879 ops/s
Iteration  26: 1256906.282 ops/s
Iteration  27: 1230629.089 ops/s
Iteration  28: 1135935.198 ops/s
Iteration  29: 1151714.807 ops/s
Iteration  30: 1247901.498 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_clear":
  1181598.908 ±(99.9%) 25476.178 ops/s [Average]
  (min, avg, max) = (1133408.338, 1181598.908, 1259212.465), stdev = 38131.547
  CI (99.9%): [1156122.730, 1207075.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_clear  thrpt   30  1181598.908 ± 25476.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_clearEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_clearEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 862793.432 ops/s
# Warmup Iteration   2: 1248285.522 ops/s
# Warmup Iteration   3: 1444840.772 ops/s
# Warmup Iteration   4: 1523647.656 ops/s
# Warmup Iteration   5: 1494759.569 ops/s
# Warmup Iteration   6: 1401448.905 ops/s
# Warmup Iteration   7: 1291312.452 ops/s
# Warmup Iteration   8: 1320246.016 ops/s
# Warmup Iteration   9: 1473086.077 ops/s
# Warmup Iteration  10: 1545024.577 ops/s
# Warmup Iteration  11: 1447936.731 ops/s
# Warmup Iteration  12: 1415823.859 ops/s
# Warmup Iteration  13: 1430624.835 ops/s
# Warmup Iteration  14: 1546790.400 ops/s
# Warmup Iteration  15: 1429195.418 ops/s
# Warmup Iteration  16: 1397179.634 ops/s
# Warmup Iteration  17: 1416509.056 ops/s
# Warmup Iteration  18: 1421991.282 ops/s
# Warmup Iteration  19: 1415335.425 ops/s
# Warmup Iteration  20: 1405387.093 ops/s
# Warmup Iteration  21: 1404819.547 ops/s
# Warmup Iteration  22: 1406957.697 ops/s
# Warmup Iteration  23: 1422915.949 ops/s
# Warmup Iteration  24: 1427893.180 ops/s
# Warmup Iteration  25: 1396849.060 ops/s
# Warmup Iteration  26: 1425178.227 ops/s
# Warmup Iteration  27: 1388777.451 ops/s
# Warmup Iteration  28: 1415016.304 ops/s
# Warmup Iteration  29: 1403950.561 ops/s
# Warmup Iteration  30: 1405533.162 ops/s
Iteration   1: 1414351.766 ops/s
Iteration   2: 1473471.470 ops/s
Iteration   3: 1481791.794 ops/s
Iteration   4: 1382750.585 ops/s
Iteration   5: 1427397.738 ops/s
Iteration   6: 1451089.878 ops/s
Iteration   7: 1519740.634 ops/s
Iteration   8: 1424012.724 ops/s
Iteration   9: 1409420.461 ops/s
Iteration  10: 1427969.865 ops/s
Iteration  11: 1397521.725 ops/s
Iteration  12: 1441872.460 ops/s
Iteration  13: 1417539.156 ops/s
Iteration  14: 1409283.836 ops/s
Iteration  15: 1405690.828 ops/s
Iteration  16: 1421480.483 ops/s
Iteration  17: 1401628.382 ops/s
Iteration  18: 1443054.734 ops/s
Iteration  19: 1414956.958 ops/s
Iteration  20: 1411892.123 ops/s
Iteration  21: 1434438.734 ops/s
Iteration  22: 1426362.866 ops/s
Iteration  23: 1404150.533 ops/s
Iteration  24: 1415769.176 ops/s
Iteration  25: 1444424.111 ops/s
Iteration  26: 1481526.913 ops/s
Iteration  27: 1462753.974 ops/s
Iteration  28: 1452351.555 ops/s
Iteration  29: 1422080.405 ops/s
Iteration  30: 1383225.165 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_clearEntrySet":
  1430133.368 ±(99.9%) 20604.006 ops/s [Average]
  (min, avg, max) = (1382750.585, 1430133.368, 1519740.634), stdev = 30839.109
  CI (99.9%): [1409529.361, 1450737.374] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_clearEntrySet  thrpt   30  1430133.368 ± 20604.006  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_clearKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_clearKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 865349.982 ops/s
# Warmup Iteration   2: 1262544.663 ops/s
# Warmup Iteration   3: 1484333.472 ops/s
# Warmup Iteration   4: 1490516.145 ops/s
# Warmup Iteration   5: 1446912.022 ops/s
# Warmup Iteration   6: 1445577.263 ops/s
# Warmup Iteration   7: 1261784.679 ops/s
# Warmup Iteration   8: 1354850.010 ops/s
# Warmup Iteration   9: 1471036.820 ops/s
# Warmup Iteration  10: 1446360.715 ops/s
# Warmup Iteration  11: 1453669.783 ops/s
# Warmup Iteration  12: 1443333.003 ops/s
# Warmup Iteration  13: 1438379.317 ops/s
# Warmup Iteration  14: 1415909.340 ops/s
# Warmup Iteration  15: 1462050.354 ops/s
# Warmup Iteration  16: 1430794.609 ops/s
# Warmup Iteration  17: 1426362.671 ops/s
# Warmup Iteration  18: 1508191.384 ops/s
# Warmup Iteration  19: 1499275.442 ops/s
# Warmup Iteration  20: 1493088.931 ops/s
# Warmup Iteration  21: 1454741.854 ops/s
# Warmup Iteration  22: 1471534.963 ops/s
# Warmup Iteration  23: 1439015.739 ops/s
# Warmup Iteration  24: 1444581.506 ops/s
# Warmup Iteration  25: 1472168.440 ops/s
# Warmup Iteration  26: 1453066.078 ops/s
# Warmup Iteration  27: 1430889.197 ops/s
# Warmup Iteration  28: 1499124.714 ops/s
# Warmup Iteration  29: 1439801.757 ops/s
# Warmup Iteration  30: 1429596.956 ops/s
Iteration   1: 1421680.130 ops/s
Iteration   2: 1470654.254 ops/s
Iteration   3: 1447431.635 ops/s
Iteration   4: 1439583.274 ops/s
Iteration   5: 1468638.560 ops/s
Iteration   6: 1443144.931 ops/s
Iteration   7: 1428825.813 ops/s
Iteration   8: 1452138.750 ops/s
Iteration   9: 1577029.245 ops/s
Iteration  10: 1576510.904 ops/s
Iteration  11: 1576362.404 ops/s
Iteration  12: 1501446.503 ops/s
Iteration  13: 1431492.965 ops/s
Iteration  14: 1431660.174 ops/s
Iteration  15: 1493756.082 ops/s
Iteration  16: 1497935.761 ops/s
Iteration  17: 1479258.157 ops/s
Iteration  18: 1421722.441 ops/s
Iteration  19: 1418705.151 ops/s
Iteration  20: 1441494.848 ops/s
Iteration  21: 1438372.391 ops/s
Iteration  22: 1426155.898 ops/s
Iteration  23: 1435734.462 ops/s
Iteration  24: 1486235.367 ops/s
Iteration  25: 1477846.775 ops/s
Iteration  26: 1480384.520 ops/s
Iteration  27: 1490597.833 ops/s
Iteration  28: 1494908.313 ops/s
Iteration  29: 1523006.018 ops/s
Iteration  30: 1498881.538 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_clearKeySet":
  1472386.503 ±(99.9%) 30595.101 ops/s [Average]
  (min, avg, max) = (1418705.151, 1472386.503, 1577029.245), stdev = 45793.310
  CI (99.9%): [1441791.402, 1502981.604] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_clearKeySet  thrpt   30  1472386.503 ± 30595.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 473872.006 ops/s
# Warmup Iteration   2: 837924.456 ops/s
# Warmup Iteration   3: 1080038.187 ops/s
# Warmup Iteration   4: 998294.724 ops/s
# Warmup Iteration   5: 1044274.108 ops/s
# Warmup Iteration   6: 801851.073 ops/s
# Warmup Iteration   7: 991642.076 ops/s
# Warmup Iteration   8: 1005126.041 ops/s
# Warmup Iteration   9: 1001490.048 ops/s
# Warmup Iteration  10: 1049896.630 ops/s
# Warmup Iteration  11: 1055590.940 ops/s
# Warmup Iteration  12: 1038719.198 ops/s
# Warmup Iteration  13: 1027308.709 ops/s
# Warmup Iteration  14: 1053449.201 ops/s
# Warmup Iteration  15: 1014787.219 ops/s
# Warmup Iteration  16: 1012579.495 ops/s
# Warmup Iteration  17: 1040883.400 ops/s
# Warmup Iteration  18: 1017477.624 ops/s
# Warmup Iteration  19: 1093297.312 ops/s
# Warmup Iteration  20: 1026981.566 ops/s
# Warmup Iteration  21: 1000798.096 ops/s
# Warmup Iteration  22: 1008053.131 ops/s
# Warmup Iteration  23: 1011283.633 ops/s
# Warmup Iteration  24: 1005373.196 ops/s
# Warmup Iteration  25: 1032598.625 ops/s
# Warmup Iteration  26: 1047085.440 ops/s
# Warmup Iteration  27: 1041671.505 ops/s
# Warmup Iteration  28: 1052767.339 ops/s
# Warmup Iteration  29: 1030100.002 ops/s
# Warmup Iteration  30: 1049548.624 ops/s
Iteration   1: 1051714.857 ops/s
Iteration   2: 996753.842 ops/s
Iteration   3: 1011713.490 ops/s
Iteration   4: 1008365.804 ops/s
Iteration   5: 1028699.101 ops/s
Iteration   6: 990358.100 ops/s
Iteration   7: 1008620.575 ops/s
Iteration   8: 1000002.076 ops/s
Iteration   9: 992596.571 ops/s
Iteration  10: 1009312.036 ops/s
Iteration  11: 1004019.944 ops/s
Iteration  12: 983951.609 ops/s
Iteration  13: 1015402.596 ops/s
Iteration  14: 1024504.458 ops/s
Iteration  15: 1012455.224 ops/s
Iteration  16: 1016444.038 ops/s
Iteration  17: 1000806.057 ops/s
Iteration  18: 1010252.256 ops/s
Iteration  19: 1021829.139 ops/s
Iteration  20: 997621.037 ops/s
Iteration  21: 1033414.146 ops/s
Iteration  22: 1072787.808 ops/s
Iteration  23: 1027628.396 ops/s
Iteration  24: 990357.005 ops/s
Iteration  25: 1025752.180 ops/s
Iteration  26: 1007829.864 ops/s
Iteration  27: 1017602.740 ops/s
Iteration  28: 1056671.221 ops/s
Iteration  29: 1092968.425 ops/s
Iteration  30: 1007729.712 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collect":
  1017272.144 ±(99.9%) 16374.481 ops/s [Average]
  (min, avg, max) = (983951.609, 1017272.144, 1092968.425), stdev = 24508.554
  CI (99.9%): [1000897.663, 1033646.624] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collect  thrpt   30  1017272.144 ± 16374.481  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2021437.079 ops/s
# Warmup Iteration   2: 4766272.621 ops/s
# Warmup Iteration   3: 4748927.411 ops/s
# Warmup Iteration   4: 4160252.183 ops/s
# Warmup Iteration   5: 4876876.887 ops/s
# Warmup Iteration   6: 4845691.120 ops/s
# Warmup Iteration   7: 4829334.693 ops/s
# Warmup Iteration   8: 4681170.627 ops/s
# Warmup Iteration   9: 4651414.107 ops/s
# Warmup Iteration  10: 4719712.607 ops/s
# Warmup Iteration  11: 4665487.487 ops/s
# Warmup Iteration  12: 5074941.377 ops/s
# Warmup Iteration  13: 4704629.309 ops/s
# Warmup Iteration  14: 4891776.945 ops/s
# Warmup Iteration  15: 4669777.385 ops/s
# Warmup Iteration  16: 4994173.072 ops/s
# Warmup Iteration  17: 4881800.290 ops/s
# Warmup Iteration  18: 4867965.897 ops/s
# Warmup Iteration  19: 4766743.904 ops/s
# Warmup Iteration  20: 4855929.750 ops/s
# Warmup Iteration  21: 4899703.166 ops/s
# Warmup Iteration  22: 4763453.913 ops/s
# Warmup Iteration  23: 4841325.033 ops/s
# Warmup Iteration  24: 4898342.891 ops/s
# Warmup Iteration  25: 4641417.987 ops/s
# Warmup Iteration  26: 4735543.654 ops/s
# Warmup Iteration  27: 4712017.579 ops/s
# Warmup Iteration  28: 4830108.911 ops/s
# Warmup Iteration  29: 4712947.928 ops/s
# Warmup Iteration  30: 4834223.637 ops/s
Iteration   1: 4684314.462 ops/s
Iteration   2: 4813469.756 ops/s
Iteration   3: 4895111.313 ops/s
Iteration   4: 4817282.098 ops/s
Iteration   5: 4846121.622 ops/s
Iteration   6: 4703520.702 ops/s
Iteration   7: 4784809.962 ops/s
Iteration   8: 4744411.366 ops/s
Iteration   9: 4826922.305 ops/s
Iteration  10: 4592170.923 ops/s
Iteration  11: 4653091.523 ops/s
Iteration  12: 4567010.664 ops/s
Iteration  13: 4688327.143 ops/s
Iteration  14: 4656711.004 ops/s
Iteration  15: 4766355.643 ops/s
Iteration  16: 4645534.576 ops/s
Iteration  17: 4637202.442 ops/s
Iteration  18: 5009231.764 ops/s
Iteration  19: 5046147.998 ops/s
Iteration  20: 5088645.315 ops/s
Iteration  21: 4966532.993 ops/s
Iteration  22: 4672886.709 ops/s
Iteration  23: 4785223.868 ops/s
Iteration  24: 4787954.754 ops/s
Iteration  25: 4709531.531 ops/s
Iteration  26: 4689066.903 ops/s
Iteration  27: 4664296.173 ops/s
Iteration  28: 4654089.309 ops/s
Iteration  29: 4633621.034 ops/s
Iteration  30: 4655765.390 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectBoolean":
  4756178.708 ±(99.9%) 89890.242 ops/s [Average]
  (min, avg, max) = (4567010.664, 4756178.708, 5088645.315), stdev = 134543.493
  CI (99.9%): [4666288.466, 4846068.950] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectBoolean  thrpt   30  4756178.708 ± 89890.242  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2018948.251 ops/s
# Warmup Iteration   2: 4605779.599 ops/s
# Warmup Iteration   3: 4480370.108 ops/s
# Warmup Iteration   4: 3668719.933 ops/s
# Warmup Iteration   5: 4592122.230 ops/s
# Warmup Iteration   6: 4428789.656 ops/s
# Warmup Iteration   7: 4554591.943 ops/s
# Warmup Iteration   8: 4553092.111 ops/s
# Warmup Iteration   9: 4536334.770 ops/s
# Warmup Iteration  10: 4712024.437 ops/s
# Warmup Iteration  11: 4552122.442 ops/s
# Warmup Iteration  12: 4443698.566 ops/s
# Warmup Iteration  13: 4422577.821 ops/s
# Warmup Iteration  14: 4462798.855 ops/s
# Warmup Iteration  15: 4542131.463 ops/s
# Warmup Iteration  16: 4454489.493 ops/s
# Warmup Iteration  17: 4454076.903 ops/s
# Warmup Iteration  18: 4391300.280 ops/s
# Warmup Iteration  19: 4449685.062 ops/s
# Warmup Iteration  20: 4460325.025 ops/s
# Warmup Iteration  21: 4548090.827 ops/s
# Warmup Iteration  22: 4455374.427 ops/s
# Warmup Iteration  23: 4436075.152 ops/s
# Warmup Iteration  24: 4591668.222 ops/s
# Warmup Iteration  25: 4480047.399 ops/s
# Warmup Iteration  26: 4429163.552 ops/s
# Warmup Iteration  27: 4450043.338 ops/s
# Warmup Iteration  28: 4488531.337 ops/s
# Warmup Iteration  29: 4406897.726 ops/s
# Warmup Iteration  30: 4434226.800 ops/s
Iteration   1: 4391862.499 ops/s
Iteration   2: 4644618.098 ops/s
Iteration   3: 4515306.432 ops/s
Iteration   4: 4486514.006 ops/s
Iteration   5: 4388862.788 ops/s
Iteration   6: 4781711.951 ops/s
Iteration   7: 4483948.828 ops/s
Iteration   8: 4774861.673 ops/s
Iteration   9: 4481740.768 ops/s
Iteration  10: 4432966.781 ops/s
Iteration  11: 4537242.377 ops/s
Iteration  12: 4594944.619 ops/s
Iteration  13: 4535602.213 ops/s
Iteration  14: 4476592.823 ops/s
Iteration  15: 4659304.410 ops/s
Iteration  16: 4547461.827 ops/s
Iteration  17: 4543682.769 ops/s
Iteration  18: 4666468.334 ops/s
Iteration  19: 4562574.708 ops/s
Iteration  20: 4613196.209 ops/s
Iteration  21: 4467179.033 ops/s
Iteration  22: 4563649.408 ops/s
Iteration  23: 4421399.239 ops/s
Iteration  24: 4518798.744 ops/s
Iteration  25: 4622633.417 ops/s
Iteration  26: 4588174.377 ops/s
Iteration  27: 4399307.042 ops/s
Iteration  28: 4410750.853 ops/s
Iteration  29: 4528859.632 ops/s
Iteration  30: 4485494.451 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectBooleanWithTarget":
  4537523.677 ±(99.9%) 68286.470 ops/s [Average]
  (min, avg, max) = (4388862.788, 4537523.677, 4781711.951), stdev = 102207.982
  CI (99.9%): [4469237.207, 4605810.147] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  4537523.677 ± 68286.470  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 860368.955 ops/s
# Warmup Iteration   2: 2188419.154 ops/s
# Warmup Iteration   3: 2208703.488 ops/s
# Warmup Iteration   4: 1774729.717 ops/s
# Warmup Iteration   5: 2176568.378 ops/s
# Warmup Iteration   6: 2161383.196 ops/s
# Warmup Iteration   7: 2206154.990 ops/s
# Warmup Iteration   8: 2168186.308 ops/s
# Warmup Iteration   9: 2208720.415 ops/s
# Warmup Iteration  10: 2179491.126 ops/s
# Warmup Iteration  11: 2156479.538 ops/s
# Warmup Iteration  12: 2230801.711 ops/s
# Warmup Iteration  13: 2197741.011 ops/s
# Warmup Iteration  14: 2157044.401 ops/s
# Warmup Iteration  15: 2168139.176 ops/s
# Warmup Iteration  16: 2179972.505 ops/s
# Warmup Iteration  17: 2164524.500 ops/s
# Warmup Iteration  18: 2153980.552 ops/s
# Warmup Iteration  19: 2281316.694 ops/s
# Warmup Iteration  20: 2150383.863 ops/s
# Warmup Iteration  21: 2172005.610 ops/s
# Warmup Iteration  22: 2216545.214 ops/s
# Warmup Iteration  23: 2230532.446 ops/s
# Warmup Iteration  24: 2271945.002 ops/s
# Warmup Iteration  25: 2192561.285 ops/s
# Warmup Iteration  26: 2130273.712 ops/s
# Warmup Iteration  27: 2200301.492 ops/s
# Warmup Iteration  28: 2199273.611 ops/s
# Warmup Iteration  29: 2279232.134 ops/s
# Warmup Iteration  30: 2278434.097 ops/s
Iteration   1: 2218176.058 ops/s
Iteration   2: 2209783.712 ops/s
Iteration   3: 2244324.806 ops/s
Iteration   4: 2145214.131 ops/s
Iteration   5: 2212926.728 ops/s
Iteration   6: 2233988.847 ops/s
Iteration   7: 2177232.209 ops/s
Iteration   8: 2173639.368 ops/s
Iteration   9: 2292863.439 ops/s
Iteration  10: 2241482.276 ops/s
Iteration  11: 2150589.076 ops/s
Iteration  12: 2217601.247 ops/s
Iteration  13: 2362539.097 ops/s
Iteration  14: 2374953.990 ops/s
Iteration  15: 2377431.235 ops/s
Iteration  16: 2317464.075 ops/s
Iteration  17: 2223996.144 ops/s
Iteration  18: 2246911.260 ops/s
Iteration  19: 2204472.583 ops/s
Iteration  20: 2223594.721 ops/s
Iteration  21: 2218866.816 ops/s
Iteration  22: 2211333.950 ops/s
Iteration  23: 2275519.910 ops/s
Iteration  24: 2218342.686 ops/s
Iteration  25: 2227918.107 ops/s
Iteration  26: 2154510.069 ops/s
Iteration  27: 2236755.052 ops/s
Iteration  28: 2221723.789 ops/s
Iteration  29: 2218106.380 ops/s
Iteration  30: 2360376.108 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectByte":
  2239754.596 ±(99.9%) 42348.947 ops/s [Average]
  (min, avg, max) = (2145214.131, 2239754.596, 2377431.235), stdev = 63385.915
  CI (99.9%): [2197405.649, 2282103.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectByte  thrpt   30  2239754.596 ± 42348.947  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 808632.022 ops/s
# Warmup Iteration   2: 2247022.025 ops/s
# Warmup Iteration   3: 2224549.580 ops/s
# Warmup Iteration   4: 1740169.525 ops/s
# Warmup Iteration   5: 2197544.361 ops/s
# Warmup Iteration   6: 2120607.964 ops/s
# Warmup Iteration   7: 2190769.146 ops/s
# Warmup Iteration   8: 2204937.071 ops/s
# Warmup Iteration   9: 2255640.386 ops/s
# Warmup Iteration  10: 2135672.847 ops/s
# Warmup Iteration  11: 2227253.059 ops/s
# Warmup Iteration  12: 2269261.041 ops/s
# Warmup Iteration  13: 2179471.720 ops/s
# Warmup Iteration  14: 2084146.548 ops/s
# Warmup Iteration  15: 2118270.062 ops/s
# Warmup Iteration  16: 2288671.006 ops/s
# Warmup Iteration  17: 2127073.359 ops/s
# Warmup Iteration  18: 2169231.811 ops/s
# Warmup Iteration  19: 2286101.964 ops/s
# Warmup Iteration  20: 2153924.398 ops/s
# Warmup Iteration  21: 2247817.913 ops/s
# Warmup Iteration  22: 2208064.919 ops/s
# Warmup Iteration  23: 2147081.647 ops/s
# Warmup Iteration  24: 2226886.469 ops/s
# Warmup Iteration  25: 2134805.043 ops/s
# Warmup Iteration  26: 2150756.608 ops/s
# Warmup Iteration  27: 2117823.374 ops/s
# Warmup Iteration  28: 2196358.485 ops/s
# Warmup Iteration  29: 2171957.724 ops/s
# Warmup Iteration  30: 2234389.021 ops/s
Iteration   1: 2234010.320 ops/s
Iteration   2: 2146934.063 ops/s
Iteration   3: 2246810.682 ops/s
Iteration   4: 2292583.783 ops/s
Iteration   5: 2056959.119 ops/s
Iteration   6: 2095629.906 ops/s
Iteration   7: 2107780.434 ops/s
Iteration   8: 2092845.941 ops/s
Iteration   9: 2159896.455 ops/s
Iteration  10: 2167177.137 ops/s
Iteration  11: 2093776.520 ops/s
Iteration  12: 2127346.409 ops/s
Iteration  13: 2132780.859 ops/s
Iteration  14: 2111676.469 ops/s
Iteration  15: 2133457.629 ops/s
Iteration  16: 2123928.714 ops/s
Iteration  17: 2101061.727 ops/s
Iteration  18: 2080935.709 ops/s
Iteration  19: 2094961.556 ops/s
Iteration  20: 2097732.196 ops/s
Iteration  21: 2097941.067 ops/s
Iteration  22: 2065790.163 ops/s
Iteration  23: 2069646.643 ops/s
Iteration  24: 2084504.967 ops/s
Iteration  25: 2076384.873 ops/s
Iteration  26: 2090476.890 ops/s
Iteration  27: 2088011.233 ops/s
Iteration  28: 2072814.527 ops/s
Iteration  29: 2111491.884 ops/s
Iteration  30: 2172499.469 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectByteWithTarget":
  2120928.245 ±(99.9%) 37030.438 ops/s [Average]
  (min, avg, max) = (2056959.119, 2120928.245, 2292583.783), stdev = 55425.421
  CI (99.9%): [2083897.807, 2157958.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  2120928.245 ± 37030.438  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 898710.314 ops/s
# Warmup Iteration   2: 2204522.683 ops/s
# Warmup Iteration   3: 2205466.156 ops/s
# Warmup Iteration   4: 1792330.470 ops/s
# Warmup Iteration   5: 2178757.194 ops/s
# Warmup Iteration   6: 2166967.424 ops/s
# Warmup Iteration   7: 2235560.967 ops/s
# Warmup Iteration   8: 2295581.461 ops/s
# Warmup Iteration   9: 2235825.700 ops/s
# Warmup Iteration  10: 2178895.651 ops/s
# Warmup Iteration  11: 2201899.830 ops/s
# Warmup Iteration  12: 2211662.174 ops/s
# Warmup Iteration  13: 2200446.141 ops/s
# Warmup Iteration  14: 2207439.913 ops/s
# Warmup Iteration  15: 2291818.383 ops/s
# Warmup Iteration  16: 2213015.998 ops/s
# Warmup Iteration  17: 2190602.142 ops/s
# Warmup Iteration  18: 2199071.121 ops/s
# Warmup Iteration  19: 2168828.253 ops/s
# Warmup Iteration  20: 2247812.276 ops/s
# Warmup Iteration  21: 2239532.244 ops/s
# Warmup Iteration  22: 2234662.681 ops/s
# Warmup Iteration  23: 2340847.394 ops/s
# Warmup Iteration  24: 2186825.410 ops/s
# Warmup Iteration  25: 2268206.499 ops/s
# Warmup Iteration  26: 2352162.666 ops/s
# Warmup Iteration  27: 2359468.872 ops/s
# Warmup Iteration  28: 2266915.732 ops/s
# Warmup Iteration  29: 2261339.240 ops/s
# Warmup Iteration  30: 2229218.446 ops/s
Iteration   1: 2215195.843 ops/s
Iteration   2: 2235011.044 ops/s
Iteration   3: 2241759.117 ops/s
Iteration   4: 2317044.989 ops/s
Iteration   5: 2235598.430 ops/s
Iteration   6: 2207771.142 ops/s
Iteration   7: 2119488.338 ops/s
Iteration   8: 2221956.169 ops/s
Iteration   9: 2302106.132 ops/s
Iteration  10: 2203005.714 ops/s
Iteration  11: 2228594.152 ops/s
Iteration  12: 2250635.434 ops/s
Iteration  13: 2274903.960 ops/s
Iteration  14: 2205384.245 ops/s
Iteration  15: 2184462.904 ops/s
Iteration  16: 2193182.515 ops/s
Iteration  17: 2273485.714 ops/s
Iteration  18: 2185920.553 ops/s
Iteration  19: 2257603.555 ops/s
Iteration  20: 2228513.840 ops/s
Iteration  21: 2268126.115 ops/s
Iteration  22: 2166105.934 ops/s
Iteration  23: 2230646.014 ops/s
Iteration  24: 2197150.443 ops/s
Iteration  25: 2119632.096 ops/s
Iteration  26: 2243184.317 ops/s
Iteration  27: 2266205.657 ops/s
Iteration  28: 2232469.533 ops/s
Iteration  29: 2236626.572 ops/s
Iteration  30: 2237939.743 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectChar":
  2225990.341 ±(99.9%) 29796.333 ops/s [Average]
  (min, avg, max) = (2119488.338, 2225990.341, 2317044.989), stdev = 44597.752
  CI (99.9%): [2196194.007, 2255786.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectChar  thrpt   30  2225990.341 ± 29796.333  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 845456.793 ops/s
# Warmup Iteration   2: 2230768.656 ops/s
# Warmup Iteration   3: 2216182.413 ops/s
# Warmup Iteration   4: 1829375.236 ops/s
# Warmup Iteration   5: 2394682.440 ops/s
# Warmup Iteration   6: 2379279.771 ops/s
# Warmup Iteration   7: 2326010.108 ops/s
# Warmup Iteration   8: 2288747.562 ops/s
# Warmup Iteration   9: 2303673.391 ops/s
# Warmup Iteration  10: 2212988.058 ops/s
# Warmup Iteration  11: 2289331.295 ops/s
# Warmup Iteration  12: 2219560.879 ops/s
# Warmup Iteration  13: 2310300.232 ops/s
# Warmup Iteration  14: 2293526.702 ops/s
# Warmup Iteration  15: 2289747.699 ops/s
# Warmup Iteration  16: 2289896.736 ops/s
# Warmup Iteration  17: 2233695.386 ops/s
# Warmup Iteration  18: 2263388.878 ops/s
# Warmup Iteration  19: 2241371.852 ops/s
# Warmup Iteration  20: 2260630.648 ops/s
# Warmup Iteration  21: 2438155.397 ops/s
# Warmup Iteration  22: 2348667.511 ops/s
# Warmup Iteration  23: 2276042.451 ops/s
# Warmup Iteration  24: 2238205.344 ops/s
# Warmup Iteration  25: 2229655.041 ops/s
# Warmup Iteration  26: 2253884.268 ops/s
# Warmup Iteration  27: 2348978.846 ops/s
# Warmup Iteration  28: 2317726.648 ops/s
# Warmup Iteration  29: 2444796.232 ops/s
# Warmup Iteration  30: 2438354.488 ops/s
Iteration   1: 2258815.278 ops/s
Iteration   2: 2324251.375 ops/s
Iteration   3: 2318041.329 ops/s
Iteration   4: 2290337.759 ops/s
Iteration   5: 2298902.870 ops/s
Iteration   6: 2231351.684 ops/s
Iteration   7: 2302045.925 ops/s
Iteration   8: 2283897.434 ops/s
Iteration   9: 2265697.286 ops/s
Iteration  10: 2197251.465 ops/s
Iteration  11: 2300677.589 ops/s
Iteration  12: 2351967.857 ops/s
Iteration  13: 2421831.114 ops/s
Iteration  14: 2266432.804 ops/s
Iteration  15: 2261748.108 ops/s
Iteration  16: 2250535.064 ops/s
Iteration  17: 2244298.976 ops/s
Iteration  18: 2245458.343 ops/s
Iteration  19: 2257446.720 ops/s
Iteration  20: 2362833.658 ops/s
Iteration  21: 2382853.477 ops/s
Iteration  22: 2415115.604 ops/s
Iteration  23: 2231788.376 ops/s
Iteration  24: 2201826.921 ops/s
Iteration  25: 2267583.618 ops/s
Iteration  26: 2243476.048 ops/s
Iteration  27: 2271759.265 ops/s
Iteration  28: 2314691.288 ops/s
Iteration  29: 2442340.681 ops/s
Iteration  30: 2447340.566 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectCharWithTarget":
  2298419.949 ±(99.9%) 45650.817 ops/s [Average]
  (min, avg, max) = (2197251.465, 2298419.949, 2447340.566), stdev = 68327.998
  CI (99.9%): [2252769.133, 2344070.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  2298419.949 ± 45650.817  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623785.573 ops/s
# Warmup Iteration   2: 1554965.239 ops/s
# Warmup Iteration   3: 1579398.053 ops/s
# Warmup Iteration   4: 1288900.335 ops/s
# Warmup Iteration   5: 1482975.201 ops/s
# Warmup Iteration   6: 1501146.142 ops/s
# Warmup Iteration   7: 1501306.020 ops/s
# Warmup Iteration   8: 1472607.818 ops/s
# Warmup Iteration   9: 1478537.208 ops/s
# Warmup Iteration  10: 1474390.317 ops/s
# Warmup Iteration  11: 1461692.719 ops/s
# Warmup Iteration  12: 1472529.396 ops/s
# Warmup Iteration  13: 1521030.741 ops/s
# Warmup Iteration  14: 1475681.319 ops/s
# Warmup Iteration  15: 1475674.140 ops/s
# Warmup Iteration  16: 1457345.153 ops/s
# Warmup Iteration  17: 1471317.711 ops/s
# Warmup Iteration  18: 1447582.160 ops/s
# Warmup Iteration  19: 1481104.618 ops/s
# Warmup Iteration  20: 1462557.061 ops/s
# Warmup Iteration  21: 1533235.850 ops/s
# Warmup Iteration  22: 1588247.588 ops/s
# Warmup Iteration  23: 1488818.967 ops/s
# Warmup Iteration  24: 1488313.228 ops/s
# Warmup Iteration  25: 1474498.372 ops/s
# Warmup Iteration  26: 1562365.191 ops/s
# Warmup Iteration  27: 1492433.032 ops/s
# Warmup Iteration  28: 1567331.977 ops/s
# Warmup Iteration  29: 1486001.653 ops/s
# Warmup Iteration  30: 1469635.035 ops/s
Iteration   1: 1492439.925 ops/s
Iteration   2: 1452120.168 ops/s
Iteration   3: 1443288.269 ops/s
Iteration   4: 1481903.635 ops/s
Iteration   5: 1592086.210 ops/s
Iteration   6: 1472648.168 ops/s
Iteration   7: 1452557.025 ops/s
Iteration   8: 1524101.339 ops/s
Iteration   9: 1471392.959 ops/s
Iteration  10: 1455319.772 ops/s
Iteration  11: 1497161.818 ops/s
Iteration  12: 1485519.802 ops/s
Iteration  13: 1506139.612 ops/s
Iteration  14: 1499672.932 ops/s
Iteration  15: 1521735.308 ops/s
Iteration  16: 1484837.321 ops/s
Iteration  17: 1485156.695 ops/s
Iteration  18: 1522249.657 ops/s
Iteration  19: 1466734.715 ops/s
Iteration  20: 1518516.612 ops/s
Iteration  21: 1481010.932 ops/s
Iteration  22: 1516540.898 ops/s
Iteration  23: 1476634.208 ops/s
Iteration  24: 1510166.019 ops/s
Iteration  25: 1548259.449 ops/s
Iteration  26: 1501938.107 ops/s
Iteration  27: 1491117.465 ops/s
Iteration  28: 1531353.498 ops/s
Iteration  29: 1536191.096 ops/s
Iteration  30: 1552996.157 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectDouble":
  1499059.659 ±(99.9%) 22421.351 ops/s [Average]
  (min, avg, max) = (1443288.269, 1499059.659, 1592086.210), stdev = 33559.225
  CI (99.9%): [1476638.308, 1521481.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectDouble  thrpt   30  1499059.659 ± 22421.351  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 615455.349 ops/s
# Warmup Iteration   2: 1549110.510 ops/s
# Warmup Iteration   3: 1636013.828 ops/s
# Warmup Iteration   4: 1241947.496 ops/s
# Warmup Iteration   5: 1542800.004 ops/s
# Warmup Iteration   6: 1521992.031 ops/s
# Warmup Iteration   7: 1536112.909 ops/s
# Warmup Iteration   8: 1531556.641 ops/s
# Warmup Iteration   9: 1545440.179 ops/s
# Warmup Iteration  10: 1592814.496 ops/s
# Warmup Iteration  11: 1526938.001 ops/s
# Warmup Iteration  12: 1595817.651 ops/s
# Warmup Iteration  13: 1639833.696 ops/s
# Warmup Iteration  14: 1637917.008 ops/s
# Warmup Iteration  15: 1648279.965 ops/s
# Warmup Iteration  16: 1627507.603 ops/s
# Warmup Iteration  17: 1633923.489 ops/s
# Warmup Iteration  18: 1637344.322 ops/s
# Warmup Iteration  19: 1640534.145 ops/s
# Warmup Iteration  20: 1650205.357 ops/s
# Warmup Iteration  21: 1653710.410 ops/s
# Warmup Iteration  22: 1655809.297 ops/s
# Warmup Iteration  23: 1653584.568 ops/s
# Warmup Iteration  24: 1634890.938 ops/s
# Warmup Iteration  25: 1646172.038 ops/s
# Warmup Iteration  26: 1649441.323 ops/s
# Warmup Iteration  27: 1654937.477 ops/s
# Warmup Iteration  28: 1602863.956 ops/s
# Warmup Iteration  29: 1576338.084 ops/s
# Warmup Iteration  30: 1603744.971 ops/s
Iteration   1: 1643824.711 ops/s
Iteration   2: 1641300.410 ops/s
Iteration   3: 1609581.346 ops/s
Iteration   4: 1629218.548 ops/s
Iteration   5: 1638223.782 ops/s
Iteration   6: 1643016.465 ops/s
Iteration   7: 1589217.122 ops/s
Iteration   8: 1613252.047 ops/s
Iteration   9: 1551567.903 ops/s
Iteration  10: 1555968.506 ops/s
Iteration  11: 1553333.636 ops/s
Iteration  12: 1575213.084 ops/s
Iteration  13: 1586881.118 ops/s
Iteration  14: 1649447.532 ops/s
Iteration  15: 1657214.518 ops/s
Iteration  16: 1649390.627 ops/s
Iteration  17: 1581537.944 ops/s
Iteration  18: 1604228.138 ops/s
Iteration  19: 1591389.847 ops/s
Iteration  20: 1639857.319 ops/s
Iteration  21: 1616056.342 ops/s
Iteration  22: 1596992.162 ops/s
Iteration  23: 1609624.791 ops/s
Iteration  24: 1611434.095 ops/s
Iteration  25: 1605750.286 ops/s
Iteration  26: 1590643.527 ops/s
Iteration  27: 1587875.402 ops/s
Iteration  28: 1618504.931 ops/s
Iteration  29: 1656129.639 ops/s
Iteration  30: 1629920.944 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectDoubleWithTarget":
  1610886.558 ±(99.9%) 20459.112 ops/s [Average]
  (min, avg, max) = (1551567.903, 1610886.558, 1657214.518), stdev = 30622.238
  CI (99.9%): [1590427.446, 1631345.669] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  1610886.558 ± 20459.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 735201.129 ops/s
# Warmup Iteration   2: 1767184.981 ops/s
# Warmup Iteration   3: 1784623.787 ops/s
# Warmup Iteration   4: 1475707.989 ops/s
# Warmup Iteration   5: 1782855.749 ops/s
# Warmup Iteration   6: 1790410.114 ops/s
# Warmup Iteration   7: 1791644.025 ops/s
# Warmup Iteration   8: 1793528.095 ops/s
# Warmup Iteration   9: 1788395.025 ops/s
# Warmup Iteration  10: 1797483.176 ops/s
# Warmup Iteration  11: 1794550.274 ops/s
# Warmup Iteration  12: 1798558.570 ops/s
# Warmup Iteration  13: 1790393.912 ops/s
# Warmup Iteration  14: 1798004.492 ops/s
# Warmup Iteration  15: 1790091.361 ops/s
# Warmup Iteration  16: 1788242.981 ops/s
# Warmup Iteration  17: 1796717.591 ops/s
# Warmup Iteration  18: 1791076.590 ops/s
# Warmup Iteration  19: 1777426.341 ops/s
# Warmup Iteration  20: 1785103.943 ops/s
# Warmup Iteration  21: 1773107.330 ops/s
# Warmup Iteration  22: 1791626.489 ops/s
# Warmup Iteration  23: 1794469.885 ops/s
# Warmup Iteration  24: 1778134.010 ops/s
# Warmup Iteration  25: 1774754.388 ops/s
# Warmup Iteration  26: 1715403.564 ops/s
# Warmup Iteration  27: 1765055.191 ops/s
# Warmup Iteration  28: 1681137.061 ops/s
# Warmup Iteration  29: 1732502.187 ops/s
# Warmup Iteration  30: 1772371.865 ops/s
Iteration   1: 1773219.704 ops/s
Iteration   2: 1794911.695 ops/s
Iteration   3: 1777653.818 ops/s
Iteration   4: 1753818.918 ops/s
Iteration   5: 1751508.536 ops/s
Iteration   6: 1759208.223 ops/s
Iteration   7: 1720283.745 ops/s
Iteration   8: 1717507.800 ops/s
Iteration   9: 1773243.115 ops/s
Iteration  10: 1792996.267 ops/s
Iteration  11: 1718567.048 ops/s
Iteration  12: 1719201.184 ops/s
Iteration  13: 1670666.775 ops/s
Iteration  14: 1646584.899 ops/s
Iteration  15: 1632766.719 ops/s
Iteration  16: 1669031.473 ops/s
Iteration  17: 1734510.659 ops/s
Iteration  18: 1653140.269 ops/s
Iteration  19: 1656607.164 ops/s
Iteration  20: 1794405.301 ops/s
Iteration  21: 1788972.140 ops/s
Iteration  22: 1777817.537 ops/s
Iteration  23: 1785412.801 ops/s
Iteration  24: 1776201.328 ops/s
Iteration  25: 1771929.275 ops/s
Iteration  26: 1775839.777 ops/s
Iteration  27: 1780905.160 ops/s
Iteration  28: 1764383.987 ops/s
Iteration  29: 1764320.123 ops/s
Iteration  30: 1749091.220 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectFloat":
  1741490.222 ±(99.9%) 33259.705 ops/s [Average]
  (min, avg, max) = (1632766.719, 1741490.222, 1794911.695), stdev = 49781.565
  CI (99.9%): [1708230.517, 1774749.927] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectFloat  thrpt   30  1741490.222 ± 33259.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698196.804 ops/s
# Warmup Iteration   2: 1749512.804 ops/s
# Warmup Iteration   3: 1761282.948 ops/s
# Warmup Iteration   4: 1464100.153 ops/s
# Warmup Iteration   5: 1762502.389 ops/s
# Warmup Iteration   6: 1760542.587 ops/s
# Warmup Iteration   7: 1761168.622 ops/s
# Warmup Iteration   8: 1754950.758 ops/s
# Warmup Iteration   9: 1753885.381 ops/s
# Warmup Iteration  10: 1764755.937 ops/s
# Warmup Iteration  11: 1692603.544 ops/s
# Warmup Iteration  12: 1685563.676 ops/s
# Warmup Iteration  13: 1719273.435 ops/s
# Warmup Iteration  14: 1745811.876 ops/s
# Warmup Iteration  15: 1701168.540 ops/s
# Warmup Iteration  16: 1711904.296 ops/s
# Warmup Iteration  17: 1737262.743 ops/s
# Warmup Iteration  18: 1661336.201 ops/s
# Warmup Iteration  19: 1678705.546 ops/s
# Warmup Iteration  20: 1699513.555 ops/s
# Warmup Iteration  21: 1629261.941 ops/s
# Warmup Iteration  22: 1621418.482 ops/s
# Warmup Iteration  23: 1622865.681 ops/s
# Warmup Iteration  24: 1630005.416 ops/s
# Warmup Iteration  25: 1643868.344 ops/s
# Warmup Iteration  26: 1669785.134 ops/s
# Warmup Iteration  27: 1754052.809 ops/s
# Warmup Iteration  28: 1748866.705 ops/s
# Warmup Iteration  29: 1742940.201 ops/s
# Warmup Iteration  30: 1742857.027 ops/s
Iteration   1: 1759341.765 ops/s
Iteration   2: 1743614.077 ops/s
Iteration   3: 1747192.546 ops/s
Iteration   4: 1765293.033 ops/s
Iteration   5: 1764420.583 ops/s
Iteration   6: 1768637.721 ops/s
Iteration   7: 1768248.543 ops/s
Iteration   8: 1767703.005 ops/s
Iteration   9: 1728453.758 ops/s
Iteration  10: 1759411.409 ops/s
Iteration  11: 1763232.844 ops/s
Iteration  12: 1731253.655 ops/s
Iteration  13: 1763305.511 ops/s
Iteration  14: 1764418.762 ops/s
Iteration  15: 1765924.342 ops/s
Iteration  16: 1751514.505 ops/s
Iteration  17: 1746812.737 ops/s
Iteration  18: 1768502.115 ops/s
Iteration  19: 1738282.582 ops/s
Iteration  20: 1749129.149 ops/s
Iteration  21: 1760832.577 ops/s
Iteration  22: 1758953.414 ops/s
Iteration  23: 1739528.355 ops/s
Iteration  24: 1765841.916 ops/s
Iteration  25: 1726828.491 ops/s
Iteration  26: 1743485.962 ops/s
Iteration  27: 1760822.552 ops/s
Iteration  28: 1768036.342 ops/s
Iteration  29: 1765146.092 ops/s
Iteration  30: 1746481.487 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectFloatWithTarget":
  1755021.661 ±(99.9%) 8637.868 ops/s [Average]
  (min, avg, max) = (1726828.491, 1755021.661, 1768637.721), stdev = 12928.756
  CI (99.9%): [1746383.793, 1763659.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  1755021.661 ± 8637.868  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 473877.866 ops/s
# Warmup Iteration   2: 1008347.636 ops/s
# Warmup Iteration   3: 1080300.146 ops/s
# Warmup Iteration   4: 1090233.811 ops/s
# Warmup Iteration   5: 864316.333 ops/s
# Warmup Iteration   6: 1099166.060 ops/s
# Warmup Iteration   7: 1093564.536 ops/s
# Warmup Iteration   8: 1116995.875 ops/s
# Warmup Iteration   9: 1115097.815 ops/s
# Warmup Iteration  10: 1113876.458 ops/s
# Warmup Iteration  11: 1110376.320 ops/s
# Warmup Iteration  12: 1110156.263 ops/s
# Warmup Iteration  13: 1104375.023 ops/s
# Warmup Iteration  14: 1085926.997 ops/s
# Warmup Iteration  15: 1088796.516 ops/s
# Warmup Iteration  16: 1108134.033 ops/s
# Warmup Iteration  17: 1117146.199 ops/s
# Warmup Iteration  18: 1103116.235 ops/s
# Warmup Iteration  19: 1107022.118 ops/s
# Warmup Iteration  20: 1099153.326 ops/s
# Warmup Iteration  21: 1095539.384 ops/s
# Warmup Iteration  22: 1099120.012 ops/s
# Warmup Iteration  23: 1105638.164 ops/s
# Warmup Iteration  24: 1111924.158 ops/s
# Warmup Iteration  25: 1113176.859 ops/s
# Warmup Iteration  26: 1111024.663 ops/s
# Warmup Iteration  27: 1056005.143 ops/s
# Warmup Iteration  28: 1078294.268 ops/s
# Warmup Iteration  29: 1060511.976 ops/s
# Warmup Iteration  30: 1008228.065 ops/s
Iteration   1: 1020238.470 ops/s
Iteration   2: 1007249.050 ops/s
Iteration   3: 1021664.345 ops/s
Iteration   4: 1017886.002 ops/s
Iteration   5: 1023452.728 ops/s
Iteration   6: 1073048.465 ops/s
Iteration   7: 1080020.633 ops/s
Iteration   8: 1061386.367 ops/s
Iteration   9: 1019497.569 ops/s
Iteration  10: 1010299.512 ops/s
Iteration  11: 1008786.085 ops/s
Iteration  12: 1016480.983 ops/s
Iteration  13: 1016484.685 ops/s
Iteration  14: 1064832.859 ops/s
Iteration  15: 1010611.112 ops/s
Iteration  16: 1042764.426 ops/s
Iteration  17: 1014368.446 ops/s
Iteration  18: 1010679.779 ops/s
Iteration  19: 1041408.143 ops/s
Iteration  20: 1011960.211 ops/s
Iteration  21: 1013118.074 ops/s
Iteration  22: 1026377.984 ops/s
Iteration  23: 1038961.041 ops/s
Iteration  24: 1050555.748 ops/s
Iteration  25: 1065261.928 ops/s
Iteration  26: 1011734.300 ops/s
Iteration  27: 1081837.591 ops/s
Iteration  28: 1094198.699 ops/s
Iteration  29: 1096344.285 ops/s
Iteration  30: 1108642.710 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectIf":
  1038671.741 ±(99.9%) 20711.297 ops/s [Average]
  (min, avg, max) = (1007249.050, 1038671.741, 1108642.710), stdev = 30999.697
  CI (99.9%): [1017960.444, 1059383.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectIf  thrpt   30  1038671.741 ± 20711.297  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 936869.196 ops/s
# Warmup Iteration   2: 2276800.648 ops/s
# Warmup Iteration   3: 2225125.710 ops/s
# Warmup Iteration   4: 2002322.481 ops/s
# Warmup Iteration   5: 2292312.341 ops/s
# Warmup Iteration   6: 2221147.323 ops/s
# Warmup Iteration   7: 2143751.199 ops/s
# Warmup Iteration   8: 2133783.594 ops/s
# Warmup Iteration   9: 2178838.151 ops/s
# Warmup Iteration  10: 2158152.045 ops/s
# Warmup Iteration  11: 2153044.402 ops/s
# Warmup Iteration  12: 2135198.464 ops/s
# Warmup Iteration  13: 2123509.291 ops/s
# Warmup Iteration  14: 2123533.672 ops/s
# Warmup Iteration  15: 2140971.066 ops/s
# Warmup Iteration  16: 2128113.119 ops/s
# Warmup Iteration  17: 2141155.565 ops/s
# Warmup Iteration  18: 2172797.369 ops/s
# Warmup Iteration  19: 2139370.540 ops/s
# Warmup Iteration  20: 2128651.982 ops/s
# Warmup Iteration  21: 2127143.749 ops/s
# Warmup Iteration  22: 2132268.708 ops/s
# Warmup Iteration  23: 2218256.539 ops/s
# Warmup Iteration  24: 2214559.460 ops/s
# Warmup Iteration  25: 2201421.358 ops/s
# Warmup Iteration  26: 2194342.475 ops/s
# Warmup Iteration  27: 2208408.557 ops/s
# Warmup Iteration  28: 2161274.424 ops/s
# Warmup Iteration  29: 2133632.281 ops/s
# Warmup Iteration  30: 2171637.867 ops/s
Iteration   1: 2194296.751 ops/s
Iteration   2: 2118092.636 ops/s
Iteration   3: 2168196.649 ops/s
Iteration   4: 2135138.255 ops/s
Iteration   5: 2145536.190 ops/s
Iteration   6: 2169728.646 ops/s
Iteration   7: 2120000.340 ops/s
Iteration   8: 2172134.311 ops/s
Iteration   9: 2137654.077 ops/s
Iteration  10: 2265276.431 ops/s
Iteration  11: 2349498.350 ops/s
Iteration  12: 2338344.590 ops/s
Iteration  13: 2259262.059 ops/s
Iteration  14: 2114224.760 ops/s
Iteration  15: 2131640.123 ops/s
Iteration  16: 2143193.027 ops/s
Iteration  17: 2303225.179 ops/s
Iteration  18: 2218832.627 ops/s
Iteration  19: 2187244.677 ops/s
Iteration  20: 2190072.869 ops/s
Iteration  21: 2228306.815 ops/s
Iteration  22: 2199240.721 ops/s
Iteration  23: 2262304.713 ops/s
Iteration  24: 2328556.316 ops/s
Iteration  25: 2233724.280 ops/s
Iteration  26: 2193437.049 ops/s
Iteration  27: 2187150.384 ops/s
Iteration  28: 2173952.855 ops/s
Iteration  29: 2163685.136 ops/s
Iteration  30: 2142222.143 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectInt":
  2199139.099 ±(99.9%) 44829.713 ops/s [Average]
  (min, avg, max) = (2114224.760, 2199139.099, 2349498.350), stdev = 67099.009
  CI (99.9%): [2154309.386, 2243968.811] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectInt  thrpt   30  2199139.099 ± 44829.713  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 802293.595 ops/s
# Warmup Iteration   2: 2196324.500 ops/s
# Warmup Iteration   3: 2189350.297 ops/s
# Warmup Iteration   4: 1797140.444 ops/s
# Warmup Iteration   5: 2320816.645 ops/s
# Warmup Iteration   6: 2200076.959 ops/s
# Warmup Iteration   7: 2148396.626 ops/s
# Warmup Iteration   8: 2158425.520 ops/s
# Warmup Iteration   9: 2171090.847 ops/s
# Warmup Iteration  10: 2207016.306 ops/s
# Warmup Iteration  11: 2199256.303 ops/s
# Warmup Iteration  12: 2155350.306 ops/s
# Warmup Iteration  13: 2142192.096 ops/s
# Warmup Iteration  14: 2214046.362 ops/s
# Warmup Iteration  15: 2198771.110 ops/s
# Warmup Iteration  16: 2169862.366 ops/s
# Warmup Iteration  17: 2249271.901 ops/s
# Warmup Iteration  18: 2164127.581 ops/s
# Warmup Iteration  19: 2242596.843 ops/s
# Warmup Iteration  20: 2252597.296 ops/s
# Warmup Iteration  21: 2314195.365 ops/s
# Warmup Iteration  22: 2307684.252 ops/s
# Warmup Iteration  23: 2370467.356 ops/s
# Warmup Iteration  24: 2286114.170 ops/s
# Warmup Iteration  25: 2169170.983 ops/s
# Warmup Iteration  26: 2330712.711 ops/s
# Warmup Iteration  27: 2334811.709 ops/s
# Warmup Iteration  28: 2333575.402 ops/s
# Warmup Iteration  29: 2335151.626 ops/s
# Warmup Iteration  30: 2367953.941 ops/s
Iteration   1: 2373924.331 ops/s
Iteration   2: 2358917.895 ops/s
Iteration   3: 2353278.531 ops/s
Iteration   4: 2335096.381 ops/s
Iteration   5: 2309520.552 ops/s
Iteration   6: 2330269.013 ops/s
Iteration   7: 2329540.479 ops/s
Iteration   8: 2306296.400 ops/s
Iteration   9: 2341869.673 ops/s
Iteration  10: 2349468.162 ops/s
Iteration  11: 2358586.446 ops/s
Iteration  12: 2351726.005 ops/s
Iteration  13: 2370011.582 ops/s
Iteration  14: 2346811.523 ops/s
Iteration  15: 2375873.331 ops/s
Iteration  16: 2352153.164 ops/s
Iteration  17: 2340644.761 ops/s
Iteration  18: 2329055.116 ops/s
Iteration  19: 2355045.944 ops/s
Iteration  20: 2341640.192 ops/s
Iteration  21: 2358768.592 ops/s
Iteration  22: 2337022.358 ops/s
Iteration  23: 2361516.727 ops/s
Iteration  24: 2354877.096 ops/s
Iteration  25: 2362451.544 ops/s
Iteration  26: 2352578.606 ops/s
Iteration  27: 2320551.089 ops/s
Iteration  28: 2334375.123 ops/s
Iteration  29: 2299063.481 ops/s
Iteration  30: 2325580.770 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectIntWithTarget":
  2343883.829 ±(99.9%) 12913.540 ops/s [Average]
  (min, avg, max) = (2299063.481, 2343883.829, 2375873.331), stdev = 19328.380
  CI (99.9%): [2330970.289, 2356797.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  2343883.829 ± 12913.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 868542.758 ops/s
# Warmup Iteration   2: 2152009.851 ops/s
# Warmup Iteration   3: 1779281.299 ops/s
# Warmup Iteration   4: 2094738.251 ops/s
# Warmup Iteration   5: 2112852.257 ops/s
# Warmup Iteration   6: 2078108.405 ops/s
# Warmup Iteration   7: 2006105.793 ops/s
# Warmup Iteration   8: 2160045.168 ops/s
# Warmup Iteration   9: 1995070.828 ops/s
# Warmup Iteration  10: 2002662.448 ops/s
# Warmup Iteration  11: 1973254.261 ops/s
# Warmup Iteration  12: 2044570.985 ops/s
# Warmup Iteration  13: 2001407.377 ops/s
# Warmup Iteration  14: 1984876.322 ops/s
# Warmup Iteration  15: 2067863.080 ops/s
# Warmup Iteration  16: 1971715.897 ops/s
# Warmup Iteration  17: 1987742.009 ops/s
# Warmup Iteration  18: 1998587.562 ops/s
# Warmup Iteration  19: 2015962.698 ops/s
# Warmup Iteration  20: 1965754.856 ops/s
# Warmup Iteration  21: 1978935.865 ops/s
# Warmup Iteration  22: 2005711.351 ops/s
# Warmup Iteration  23: 2010465.145 ops/s
# Warmup Iteration  24: 2036626.481 ops/s
# Warmup Iteration  25: 2019220.570 ops/s
# Warmup Iteration  26: 1966705.488 ops/s
# Warmup Iteration  27: 2027446.034 ops/s
# Warmup Iteration  28: 2076924.442 ops/s
# Warmup Iteration  29: 2102746.720 ops/s
# Warmup Iteration  30: 2130731.671 ops/s
Iteration   1: 2038495.409 ops/s
Iteration   2: 1988190.202 ops/s
Iteration   3: 1977470.700 ops/s
Iteration   4: 1997299.917 ops/s
Iteration   5: 2066242.482 ops/s
Iteration   6: 2065134.168 ops/s
Iteration   7: 1980953.459 ops/s
Iteration   8: 1967671.022 ops/s
Iteration   9: 1995822.117 ops/s
Iteration  10: 1994561.586 ops/s
Iteration  11: 1974905.407 ops/s
Iteration  12: 1988182.783 ops/s
Iteration  13: 1942083.612 ops/s
Iteration  14: 2098155.780 ops/s
Iteration  15: 1999641.412 ops/s
Iteration  16: 1995109.070 ops/s
Iteration  17: 2000267.185 ops/s
Iteration  18: 1943216.612 ops/s
Iteration  19: 1971626.797 ops/s
Iteration  20: 2013102.975 ops/s
Iteration  21: 1972288.325 ops/s
Iteration  22: 1962085.276 ops/s
Iteration  23: 1972864.638 ops/s
Iteration  24: 1972970.886 ops/s
Iteration  25: 1965299.305 ops/s
Iteration  26: 2002850.655 ops/s
Iteration  27: 1988883.324 ops/s
Iteration  28: 2042996.054 ops/s
Iteration  29: 2026135.148 ops/s
Iteration  30: 2034433.621 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectLong":
  1997964.664 ±(99.9%) 24440.101 ops/s [Average]
  (min, avg, max) = (1942083.612, 1997964.664, 2098155.780), stdev = 36580.795
  CI (99.9%): [1973524.564, 2022404.765] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectLong  thrpt   30  1997964.664 ± 24440.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 731982.541 ops/s
# Warmup Iteration   2: 2010841.852 ops/s
# Warmup Iteration   3: 1935271.653 ops/s
# Warmup Iteration   4: 1750902.144 ops/s
# Warmup Iteration   5: 2032190.394 ops/s
# Warmup Iteration   6: 2004249.642 ops/s
# Warmup Iteration   7: 2004650.488 ops/s
# Warmup Iteration   8: 2038340.003 ops/s
# Warmup Iteration   9: 2034760.050 ops/s
# Warmup Iteration  10: 2036367.167 ops/s
# Warmup Iteration  11: 2005449.171 ops/s
# Warmup Iteration  12: 2009338.401 ops/s
# Warmup Iteration  13: 2024903.912 ops/s
# Warmup Iteration  14: 2024994.377 ops/s
# Warmup Iteration  15: 2034705.790 ops/s
# Warmup Iteration  16: 2020761.280 ops/s
# Warmup Iteration  17: 2103373.959 ops/s
# Warmup Iteration  18: 2032343.099 ops/s
# Warmup Iteration  19: 2009592.043 ops/s
# Warmup Iteration  20: 2013675.415 ops/s
# Warmup Iteration  21: 2024622.467 ops/s
# Warmup Iteration  22: 2038798.119 ops/s
# Warmup Iteration  23: 2099442.720 ops/s
# Warmup Iteration  24: 2040431.899 ops/s
# Warmup Iteration  25: 2053867.432 ops/s
# Warmup Iteration  26: 2010382.499 ops/s
# Warmup Iteration  27: 2033546.737 ops/s
# Warmup Iteration  28: 2015549.493 ops/s
# Warmup Iteration  29: 2040173.831 ops/s
# Warmup Iteration  30: 2028883.989 ops/s
Iteration   1: 1996241.120 ops/s
Iteration   2: 2094978.726 ops/s
Iteration   3: 2057652.150 ops/s
Iteration   4: 2018709.406 ops/s
Iteration   5: 2102743.806 ops/s
Iteration   6: 2112072.128 ops/s
Iteration   7: 2076302.045 ops/s
Iteration   8: 2068723.181 ops/s
Iteration   9: 2060095.388 ops/s
Iteration  10: 2100527.204 ops/s
Iteration  11: 2015360.390 ops/s
Iteration  12: 2022769.250 ops/s
Iteration  13: 2011265.554 ops/s
Iteration  14: 2079039.042 ops/s
Iteration  15: 2186757.153 ops/s
Iteration  16: 2204316.106 ops/s
Iteration  17: 2076821.948 ops/s
Iteration  18: 2113518.537 ops/s
Iteration  19: 2092190.347 ops/s
Iteration  20: 2110097.363 ops/s
Iteration  21: 2012275.360 ops/s
Iteration  22: 2052886.074 ops/s
Iteration  23: 2020384.574 ops/s
Iteration  24: 2105313.714 ops/s
Iteration  25: 2057489.055 ops/s
Iteration  26: 2101825.507 ops/s
Iteration  27: 2108136.385 ops/s
Iteration  28: 2131509.514 ops/s
Iteration  29: 2096614.096 ops/s
Iteration  30: 2165908.617 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectLongWithTarget":
  2081750.791 ±(99.9%) 34365.841 ops/s [Average]
  (min, avg, max) = (1996241.120, 2081750.791, 2204316.106), stdev = 51437.177
  CI (99.9%): [2047384.950, 2116116.633] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  2081750.791 ± 34365.841  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 558069.914 ops/s
# Warmup Iteration   2: 1251138.285 ops/s
# Warmup Iteration   3: 1242124.743 ops/s
# Warmup Iteration   4: 1054932.359 ops/s
# Warmup Iteration   5: 1253371.927 ops/s
# Warmup Iteration   6: 1248391.168 ops/s
# Warmup Iteration   7: 1255878.146 ops/s
# Warmup Iteration   8: 1246090.371 ops/s
# Warmup Iteration   9: 1247107.403 ops/s
# Warmup Iteration  10: 1262529.787 ops/s
# Warmup Iteration  11: 1238509.189 ops/s
# Warmup Iteration  12: 1281606.954 ops/s
# Warmup Iteration  13: 1237806.910 ops/s
# Warmup Iteration  14: 1249999.036 ops/s
# Warmup Iteration  15: 1227548.390 ops/s
# Warmup Iteration  16: 1241212.393 ops/s
# Warmup Iteration  17: 1245653.410 ops/s
# Warmup Iteration  18: 1228213.621 ops/s
# Warmup Iteration  19: 1233507.138 ops/s
# Warmup Iteration  20: 1231476.405 ops/s
# Warmup Iteration  21: 1281579.687 ops/s
# Warmup Iteration  22: 1238333.648 ops/s
# Warmup Iteration  23: 1237367.897 ops/s
# Warmup Iteration  24: 1238274.510 ops/s
# Warmup Iteration  25: 1223678.778 ops/s
# Warmup Iteration  26: 1234647.914 ops/s
# Warmup Iteration  27: 1246851.252 ops/s
# Warmup Iteration  28: 1286043.657 ops/s
# Warmup Iteration  29: 1226453.742 ops/s
# Warmup Iteration  30: 1224690.337 ops/s
Iteration   1: 1215597.945 ops/s
Iteration   2: 1252701.051 ops/s
Iteration   3: 1277299.132 ops/s
Iteration   4: 1270487.178 ops/s
Iteration   5: 1261303.164 ops/s
Iteration   6: 1222427.703 ops/s
Iteration   7: 1293776.490 ops/s
Iteration   8: 1345918.329 ops/s
Iteration   9: 1233189.191 ops/s
Iteration  10: 1232161.724 ops/s
Iteration  11: 1232911.616 ops/s
Iteration  12: 1269915.885 ops/s
Iteration  13: 1320644.435 ops/s
Iteration  14: 1329695.573 ops/s
Iteration  15: 1245587.436 ops/s
Iteration  16: 1301350.216 ops/s
Iteration  17: 1305163.285 ops/s
Iteration  18: 1277059.888 ops/s
Iteration  19: 1268148.007 ops/s
Iteration  20: 1246740.866 ops/s
Iteration  21: 1218628.192 ops/s
Iteration  22: 1226552.111 ops/s
Iteration  23: 1243181.114 ops/s
Iteration  24: 1238372.810 ops/s
Iteration  25: 1231679.917 ops/s
Iteration  26: 1262127.059 ops/s
Iteration  27: 1286158.514 ops/s
Iteration  28: 1229984.478 ops/s
Iteration  29: 1237422.303 ops/s
Iteration  30: 1347933.682 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectMap":
  1264137.310 ±(99.9%) 25250.654 ops/s [Average]
  (min, avg, max) = (1215597.945, 1264137.310, 1347933.682), stdev = 37793.993
  CI (99.9%): [1238886.656, 1289387.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectMap  thrpt   30  1264137.310 ± 25250.654  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 812796.313 ops/s
# Warmup Iteration   2: 2187467.279 ops/s
# Warmup Iteration   3: 2190861.948 ops/s
# Warmup Iteration   4: 1766301.171 ops/s
# Warmup Iteration   5: 2199395.567 ops/s
# Warmup Iteration   6: 2242863.461 ops/s
# Warmup Iteration   7: 2236017.799 ops/s
# Warmup Iteration   8: 2268755.297 ops/s
# Warmup Iteration   9: 2168074.387 ops/s
# Warmup Iteration  10: 2194957.273 ops/s
# Warmup Iteration  11: 2200705.189 ops/s
# Warmup Iteration  12: 2177653.066 ops/s
# Warmup Iteration  13: 2280834.508 ops/s
# Warmup Iteration  14: 2169703.899 ops/s
# Warmup Iteration  15: 2217733.342 ops/s
# Warmup Iteration  16: 2173668.266 ops/s
# Warmup Iteration  17: 2179751.099 ops/s
# Warmup Iteration  18: 2160444.621 ops/s
# Warmup Iteration  19: 2187430.119 ops/s
# Warmup Iteration  20: 2208540.370 ops/s
# Warmup Iteration  21: 2237879.961 ops/s
# Warmup Iteration  22: 2196369.431 ops/s
# Warmup Iteration  23: 2176753.431 ops/s
# Warmup Iteration  24: 2202557.580 ops/s
# Warmup Iteration  25: 2321853.192 ops/s
# Warmup Iteration  26: 2279959.318 ops/s
# Warmup Iteration  27: 2189361.968 ops/s
# Warmup Iteration  28: 2289156.586 ops/s
# Warmup Iteration  29: 2204037.387 ops/s
# Warmup Iteration  30: 2254431.575 ops/s
Iteration   1: 2230250.024 ops/s
Iteration   2: 2265351.217 ops/s
Iteration   3: 2283309.749 ops/s
Iteration   4: 2249874.623 ops/s
Iteration   5: 2276294.730 ops/s
Iteration   6: 2154824.651 ops/s
Iteration   7: 2244474.494 ops/s
Iteration   8: 2282540.031 ops/s
Iteration   9: 2286568.603 ops/s
Iteration  10: 2233105.334 ops/s
Iteration  11: 2270861.413 ops/s
Iteration  12: 2244400.717 ops/s
Iteration  13: 2263316.189 ops/s
Iteration  14: 2137326.549 ops/s
Iteration  15: 2128971.724 ops/s
Iteration  16: 2170611.209 ops/s
Iteration  17: 2178382.748 ops/s
Iteration  18: 2215663.952 ops/s
Iteration  19: 2352468.393 ops/s
Iteration  20: 2276608.987 ops/s
Iteration  21: 2279518.560 ops/s
Iteration  22: 2360790.425 ops/s
Iteration  23: 2238168.040 ops/s
Iteration  24: 2179715.040 ops/s
Iteration  25: 2138413.087 ops/s
Iteration  26: 2229451.336 ops/s
Iteration  27: 2205442.503 ops/s
Iteration  28: 2219573.188 ops/s
Iteration  29: 2203702.649 ops/s
Iteration  30: 2132196.770 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectShort":
  2231072.565 ±(99.9%) 40256.708 ops/s [Average]
  (min, avg, max) = (2128971.724, 2231072.565, 2360790.425), stdev = 60254.350
  CI (99.9%): [2190815.856, 2271329.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectShort  thrpt   30  2231072.565 ± 40256.708  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 919958.162 ops/s
# Warmup Iteration   2: 2163620.992 ops/s
# Warmup Iteration   3: 2138349.218 ops/s
# Warmup Iteration   4: 1721093.188 ops/s
# Warmup Iteration   5: 2142619.989 ops/s
# Warmup Iteration   6: 2094674.042 ops/s
# Warmup Iteration   7: 2127670.162 ops/s
# Warmup Iteration   8: 2166535.706 ops/s
# Warmup Iteration   9: 2129188.380 ops/s
# Warmup Iteration  10: 2091114.216 ops/s
# Warmup Iteration  11: 2120573.886 ops/s
# Warmup Iteration  12: 2182560.483 ops/s
# Warmup Iteration  13: 2190182.318 ops/s
# Warmup Iteration  14: 2163542.944 ops/s
# Warmup Iteration  15: 2156625.442 ops/s
# Warmup Iteration  16: 2217348.281 ops/s
# Warmup Iteration  17: 2141491.781 ops/s
# Warmup Iteration  18: 2123579.329 ops/s
# Warmup Iteration  19: 2133532.228 ops/s
# Warmup Iteration  20: 2153243.615 ops/s
# Warmup Iteration  21: 2268364.412 ops/s
# Warmup Iteration  22: 2240142.259 ops/s
# Warmup Iteration  23: 2195784.003 ops/s
# Warmup Iteration  24: 2180290.236 ops/s
# Warmup Iteration  25: 2308111.218 ops/s
# Warmup Iteration  26: 2118637.943 ops/s
# Warmup Iteration  27: 2191931.028 ops/s
# Warmup Iteration  28: 2170748.965 ops/s
# Warmup Iteration  29: 2160472.981 ops/s
# Warmup Iteration  30: 2168935.959 ops/s
Iteration   1: 2236800.407 ops/s
Iteration   2: 2131047.878 ops/s
Iteration   3: 2209254.972 ops/s
Iteration   4: 2157039.432 ops/s
Iteration   5: 2113655.109 ops/s
Iteration   6: 2182036.938 ops/s
Iteration   7: 2200051.523 ops/s
Iteration   8: 2157313.283 ops/s
Iteration   9: 2173801.061 ops/s
Iteration  10: 2220677.473 ops/s
Iteration  11: 2163311.523 ops/s
Iteration  12: 2171624.186 ops/s
Iteration  13: 2152493.322 ops/s
Iteration  14: 2248561.246 ops/s
Iteration  15: 2285095.689 ops/s
Iteration  16: 2178076.223 ops/s
Iteration  17: 2113615.286 ops/s
Iteration  18: 2102455.133 ops/s
Iteration  19: 2230527.055 ops/s
Iteration  20: 2128740.434 ops/s
Iteration  21: 2109630.520 ops/s
Iteration  22: 2213557.510 ops/s
Iteration  23: 2299899.311 ops/s
Iteration  24: 2078375.518 ops/s
Iteration  25: 2111723.507 ops/s
Iteration  26: 2221500.462 ops/s
Iteration  27: 2095734.262 ops/s
Iteration  28: 2136972.875 ops/s
Iteration  29: 2109859.181 ops/s
Iteration  30: 2107267.041 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectShortWithTarget":
  2168023.279 ±(99.9%) 38937.696 ops/s [Average]
  (min, avg, max) = (2078375.518, 2168023.279, 2299899.311), stdev = 58280.115
  CI (99.9%): [2129085.582, 2206960.975] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  2168023.279 ± 38937.696  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 659190.565 ops/s
# Warmup Iteration   2: 1547543.992 ops/s
# Warmup Iteration   3: 1521060.546 ops/s
# Warmup Iteration   4: 1288733.001 ops/s
# Warmup Iteration   5: 1531960.245 ops/s
# Warmup Iteration   6: 1526887.987 ops/s
# Warmup Iteration   7: 1493052.755 ops/s
# Warmup Iteration   8: 1501571.003 ops/s
# Warmup Iteration   9: 1470722.751 ops/s
# Warmup Iteration  10: 1508989.391 ops/s
# Warmup Iteration  11: 1495650.869 ops/s
# Warmup Iteration  12: 1480600.234 ops/s
# Warmup Iteration  13: 1495009.547 ops/s
# Warmup Iteration  14: 1558697.780 ops/s
# Warmup Iteration  15: 1505538.889 ops/s
# Warmup Iteration  16: 1537342.213 ops/s
# Warmup Iteration  17: 1559863.509 ops/s
# Warmup Iteration  18: 1585907.536 ops/s
# Warmup Iteration  19: 1504572.928 ops/s
# Warmup Iteration  20: 1504760.126 ops/s
# Warmup Iteration  21: 1583686.708 ops/s
# Warmup Iteration  22: 1603681.833 ops/s
# Warmup Iteration  23: 1541826.713 ops/s
# Warmup Iteration  24: 1600813.490 ops/s
# Warmup Iteration  25: 1603630.458 ops/s
# Warmup Iteration  26: 1549113.636 ops/s
# Warmup Iteration  27: 1498419.060 ops/s
# Warmup Iteration  28: 1597904.662 ops/s
# Warmup Iteration  29: 1570597.106 ops/s
# Warmup Iteration  30: 1500347.314 ops/s
Iteration   1: 1521644.175 ops/s
Iteration   2: 1483602.325 ops/s
Iteration   3: 1493912.581 ops/s
Iteration   4: 1560032.544 ops/s
Iteration   5: 1535866.977 ops/s
Iteration   6: 1509506.709 ops/s
Iteration   7: 1532584.205 ops/s
Iteration   8: 1472626.617 ops/s
Iteration   9: 1539406.168 ops/s
Iteration  10: 1552149.675 ops/s
Iteration  11: 1477078.781 ops/s
Iteration  12: 1497476.692 ops/s
Iteration  13: 1487052.546 ops/s
Iteration  14: 1503132.464 ops/s
Iteration  15: 1569315.692 ops/s
Iteration  16: 1538763.461 ops/s
Iteration  17: 1548968.983 ops/s
Iteration  18: 1509846.504 ops/s
Iteration  19: 1458273.987 ops/s
Iteration  20: 1477433.060 ops/s
Iteration  21: 1523005.713 ops/s
Iteration  22: 1515234.954 ops/s
Iteration  23: 1502604.032 ops/s
Iteration  24: 1497181.429 ops/s
Iteration  25: 1489362.345 ops/s
Iteration  26: 1496235.901 ops/s
Iteration  27: 1492126.588 ops/s
Iteration  28: 1499288.957 ops/s
Iteration  29: 1488753.471 ops/s
Iteration  30: 1482695.462 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectValues":
  1508505.433 ±(99.9%) 18742.462 ops/s [Average]
  (min, avg, max) = (1458273.987, 1508505.433, 1569315.692), stdev = 28052.838
  CI (99.9%): [1489762.971, 1527247.896] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectValues  thrpt   30  1508505.433 ± 18742.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 866782.248 ops/s
# Warmup Iteration   2: 1920697.800 ops/s
# Warmup Iteration   3: 2095200.139 ops/s
# Warmup Iteration   4: 1746097.961 ops/s
# Warmup Iteration   5: 2101197.143 ops/s
# Warmup Iteration   6: 2113835.477 ops/s
# Warmup Iteration   7: 2115018.672 ops/s
# Warmup Iteration   8: 1994559.506 ops/s
# Warmup Iteration   9: 2051436.228 ops/s
# Warmup Iteration  10: 2032139.037 ops/s
# Warmup Iteration  11: 2034441.020 ops/s
# Warmup Iteration  12: 2001393.958 ops/s
# Warmup Iteration  13: 1967980.237 ops/s
# Warmup Iteration  14: 2112535.185 ops/s
# Warmup Iteration  15: 2087490.583 ops/s
# Warmup Iteration  16: 1992675.158 ops/s
# Warmup Iteration  17: 2014443.156 ops/s
# Warmup Iteration  18: 1993482.280 ops/s
# Warmup Iteration  19: 2144458.420 ops/s
# Warmup Iteration  20: 2198585.820 ops/s
# Warmup Iteration  21: 2111582.235 ops/s
# Warmup Iteration  22: 2017391.902 ops/s
# Warmup Iteration  23: 2024743.163 ops/s
# Warmup Iteration  24: 2028121.603 ops/s
# Warmup Iteration  25: 2013116.031 ops/s
# Warmup Iteration  26: 1989080.499 ops/s
# Warmup Iteration  27: 2022717.560 ops/s
# Warmup Iteration  28: 2063323.450 ops/s
# Warmup Iteration  29: 2087646.770 ops/s
# Warmup Iteration  30: 2044738.554 ops/s
Iteration   1: 2017072.205 ops/s
Iteration   2: 2086682.021 ops/s
Iteration   3: 2022001.521 ops/s
Iteration   4: 2024390.570 ops/s
Iteration   5: 1971922.306 ops/s
Iteration   6: 2070298.249 ops/s
Iteration   7: 2042375.684 ops/s
Iteration   8: 2094547.377 ops/s
Iteration   9: 2081627.510 ops/s
Iteration  10: 2110956.258 ops/s
Iteration  11: 2089856.733 ops/s
Iteration  12: 2092930.599 ops/s
Iteration  13: 2073651.848 ops/s
Iteration  14: 2024026.681 ops/s
Iteration  15: 2007744.282 ops/s
Iteration  16: 2017349.594 ops/s
Iteration  17: 2010992.381 ops/s
Iteration  18: 2023306.400 ops/s
Iteration  19: 2034134.878 ops/s
Iteration  20: 2030227.560 ops/s
Iteration  21: 1992737.410 ops/s
Iteration  22: 2004191.740 ops/s
Iteration  23: 2005750.110 ops/s
Iteration  24: 2029665.226 ops/s
Iteration  25: 2020783.949 ops/s
Iteration  26: 1987630.964 ops/s
Iteration  27: 2005454.984 ops/s
Iteration  28: 1997316.934 ops/s
Iteration  29: 2007272.351 ops/s
Iteration  30: 2072947.430 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectWith":
  2034994.858 ±(99.9%) 24930.701 ops/s [Average]
  (min, avg, max) = (1971922.306, 2034994.858, 2110956.258), stdev = 37315.102
  CI (99.9%): [2010064.158, 2059925.559] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectWith  thrpt   30  2034994.858 ± 24930.701  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectWithToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectWithToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1468727.954 ops/s
# Warmup Iteration   2: 3097386.768 ops/s
# Warmup Iteration   3: 3057130.346 ops/s
# Warmup Iteration   4: 2655634.225 ops/s
# Warmup Iteration   5: 3071927.441 ops/s
# Warmup Iteration   6: 3090784.361 ops/s
# Warmup Iteration   7: 3215857.416 ops/s
# Warmup Iteration   8: 3214855.462 ops/s
# Warmup Iteration   9: 3225352.223 ops/s
# Warmup Iteration  10: 3249435.993 ops/s
# Warmup Iteration  11: 3242377.667 ops/s
# Warmup Iteration  12: 3186988.480 ops/s
# Warmup Iteration  13: 3166739.808 ops/s
# Warmup Iteration  14: 3205502.576 ops/s
# Warmup Iteration  15: 3228181.018 ops/s
# Warmup Iteration  16: 3229043.320 ops/s
# Warmup Iteration  17: 3237839.725 ops/s
# Warmup Iteration  18: 3223169.255 ops/s
# Warmup Iteration  19: 3216971.800 ops/s
# Warmup Iteration  20: 3226778.006 ops/s
# Warmup Iteration  21: 3235111.323 ops/s
# Warmup Iteration  22: 3222101.558 ops/s
# Warmup Iteration  23: 3212789.584 ops/s
# Warmup Iteration  24: 3192392.657 ops/s
# Warmup Iteration  25: 3247756.867 ops/s
# Warmup Iteration  26: 3207179.112 ops/s
# Warmup Iteration  27: 3117538.318 ops/s
# Warmup Iteration  28: 3019745.972 ops/s
# Warmup Iteration  29: 3122890.009 ops/s
# Warmup Iteration  30: 3040313.730 ops/s
Iteration   1: 2979523.181 ops/s
Iteration   2: 2945325.356 ops/s
Iteration   3: 3039809.947 ops/s
Iteration   4: 2960163.558 ops/s
Iteration   5: 3058969.729 ops/s
Iteration   6: 2993552.702 ops/s
Iteration   7: 2992161.370 ops/s
Iteration   8: 3080989.129 ops/s
Iteration   9: 3081058.243 ops/s
Iteration  10: 2950458.951 ops/s
Iteration  11: 2995047.637 ops/s
Iteration  12: 2970519.143 ops/s
Iteration  13: 2979966.433 ops/s
Iteration  14: 3078151.605 ops/s
Iteration  15: 3020287.602 ops/s
Iteration  16: 2937824.624 ops/s
Iteration  17: 3021294.407 ops/s
Iteration  18: 2919415.178 ops/s
Iteration  19: 3040609.284 ops/s
Iteration  20: 2900148.959 ops/s
Iteration  21: 3214788.245 ops/s
Iteration  22: 3220383.307 ops/s
Iteration  23: 3228023.473 ops/s
Iteration  24: 3041284.402 ops/s
Iteration  25: 3235022.798 ops/s
Iteration  26: 3229934.183 ops/s
Iteration  27: 3051657.325 ops/s
Iteration  28: 3023500.019 ops/s
Iteration  29: 2952568.042 ops/s
Iteration  30: 3052206.154 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectWithToTarget":
  3039821.499 ±(99.9%) 64837.980 ops/s [Average]
  (min, avg, max) = (2900148.959, 3039821.499, 3235022.798), stdev = 97046.444
  CI (99.9%): [2974983.519, 3104659.480] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collectWithToTarget  thrpt   30  3039821.499 ± 64837.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collect_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collect_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 475835.402 ops/s
# Warmup Iteration   2: 1123455.833 ops/s
# Warmup Iteration   3: 1184947.601 ops/s
# Warmup Iteration   4: 1097887.346 ops/s
# Warmup Iteration   5: 1099224.567 ops/s
# Warmup Iteration   6: 1204816.784 ops/s
# Warmup Iteration   7: 1169632.869 ops/s
# Warmup Iteration   8: 1248686.588 ops/s
# Warmup Iteration   9: 1219897.779 ops/s
# Warmup Iteration  10: 1199300.109 ops/s
# Warmup Iteration  11: 1190906.989 ops/s
# Warmup Iteration  12: 1146190.236 ops/s
# Warmup Iteration  13: 1164614.138 ops/s
# Warmup Iteration  14: 1193318.750 ops/s
# Warmup Iteration  15: 1193926.988 ops/s
# Warmup Iteration  16: 1157246.130 ops/s
# Warmup Iteration  17: 1151369.828 ops/s
# Warmup Iteration  18: 1205321.200 ops/s
# Warmup Iteration  19: 1187135.717 ops/s
# Warmup Iteration  20: 1145641.554 ops/s
# Warmup Iteration  21: 1165852.992 ops/s
# Warmup Iteration  22: 1151243.810 ops/s
# Warmup Iteration  23: 1143374.473 ops/s
# Warmup Iteration  24: 1145057.545 ops/s
# Warmup Iteration  25: 1176170.826 ops/s
# Warmup Iteration  26: 1228563.417 ops/s
# Warmup Iteration  27: 1162156.196 ops/s
# Warmup Iteration  28: 1233079.789 ops/s
# Warmup Iteration  29: 1187542.930 ops/s
# Warmup Iteration  30: 1158147.912 ops/s
Iteration   1: 1158843.352 ops/s
Iteration   2: 1167442.272 ops/s
Iteration   3: 1154419.454 ops/s
Iteration   4: 1166681.144 ops/s
Iteration   5: 1208314.962 ops/s
Iteration   6: 1162947.595 ops/s
Iteration   7: 1154163.416 ops/s
Iteration   8: 1155125.722 ops/s
Iteration   9: 1166929.075 ops/s
Iteration  10: 1162606.221 ops/s
Iteration  11: 1169043.363 ops/s
Iteration  12: 1211749.963 ops/s
Iteration  13: 1148823.762 ops/s
Iteration  14: 1162863.177 ops/s
Iteration  15: 1211581.211 ops/s
Iteration  16: 1156835.495 ops/s
Iteration  17: 1142205.898 ops/s
Iteration  18: 1246115.883 ops/s
Iteration  19: 1261073.255 ops/s
Iteration  20: 1252988.787 ops/s
Iteration  21: 1267749.862 ops/s
Iteration  22: 1258870.526 ops/s
Iteration  23: 1250040.621 ops/s
Iteration  24: 1160414.740 ops/s
Iteration  25: 1147661.672 ops/s
Iteration  26: 1152988.542 ops/s
Iteration  27: 1172393.309 ops/s
Iteration  28: 1242944.020 ops/s
Iteration  29: 1256883.745 ops/s
Iteration  30: 1256183.052 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collect_value":
  1192896.137 ±(99.9%) 29788.008 ops/s [Average]
  (min, avg, max) = (1142205.898, 1192896.137, 1267749.862), stdev = 44585.291
  CI (99.9%): [1163108.129, 1222684.144] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_collect_value  thrpt   30  1192896.137 ± 29788.008  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2873614.764 ops/s
# Warmup Iteration   2: 5847611.125 ops/s
# Warmup Iteration   3: 4835649.799 ops/s
# Warmup Iteration   4: 5803711.513 ops/s
# Warmup Iteration   5: 5954959.292 ops/s
# Warmup Iteration   6: 5842660.159 ops/s
# Warmup Iteration   7: 5843662.601 ops/s
# Warmup Iteration   8: 5838974.128 ops/s
# Warmup Iteration   9: 5545403.959 ops/s
# Warmup Iteration  10: 5767106.787 ops/s
# Warmup Iteration  11: 5859047.508 ops/s
# Warmup Iteration  12: 6276004.416 ops/s
# Warmup Iteration  13: 5870762.857 ops/s
# Warmup Iteration  14: 5766284.844 ops/s
# Warmup Iteration  15: 5960884.590 ops/s
# Warmup Iteration  16: 5828808.811 ops/s
# Warmup Iteration  17: 5789420.123 ops/s
# Warmup Iteration  18: 5855347.128 ops/s
# Warmup Iteration  19: 5849510.218 ops/s
# Warmup Iteration  20: 5955490.074 ops/s
# Warmup Iteration  21: 5943330.746 ops/s
# Warmup Iteration  22: 6097068.470 ops/s
# Warmup Iteration  23: 5853864.166 ops/s
# Warmup Iteration  24: 6194121.685 ops/s
# Warmup Iteration  25: 5925043.166 ops/s
# Warmup Iteration  26: 5802659.583 ops/s
# Warmup Iteration  27: 5882488.916 ops/s
# Warmup Iteration  28: 6225201.901 ops/s
# Warmup Iteration  29: 5907347.935 ops/s
# Warmup Iteration  30: 6090609.405 ops/s
Iteration   1: 6206609.068 ops/s
Iteration   2: 6292895.778 ops/s
Iteration   3: 6314947.190 ops/s
Iteration   4: 6003317.977 ops/s
Iteration   5: 5935057.079 ops/s
Iteration   6: 5940068.955 ops/s
Iteration   7: 6191788.014 ops/s
Iteration   8: 6142985.229 ops/s
Iteration   9: 6012704.145 ops/s
Iteration  10: 6362186.654 ops/s
Iteration  11: 6050283.567 ops/s
Iteration  12: 5759522.697 ops/s
Iteration  13: 5707402.829 ops/s
Iteration  14: 5764191.829 ops/s
Iteration  15: 5967202.683 ops/s
Iteration  16: 5831578.241 ops/s
Iteration  17: 6257463.182 ops/s
Iteration  18: 5884216.399 ops/s
Iteration  19: 6339919.711 ops/s
Iteration  20: 6015486.161 ops/s
Iteration  21: 5821149.782 ops/s
Iteration  22: 5852520.454 ops/s
Iteration  23: 5827556.523 ops/s
Iteration  24: 5735838.985 ops/s
Iteration  25: 6023189.006 ops/s
Iteration  26: 6354948.359 ops/s
Iteration  27: 6008648.292 ops/s
Iteration  28: 5785680.522 ops/s
Iteration  29: 5853811.873 ops/s
Iteration  30: 5844921.712 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_contains":
  6002936.430 ±(99.9%) 137119.111 ops/s [Average]
  (min, avg, max) = (5707402.829, 6002936.430, 6362186.654), stdev = 205233.445
  CI (99.9%): [5865817.319, 6140055.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_contains  thrpt   30  6002936.430 ± 137119.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 479029.938 ops/s
# Warmup Iteration   2: 567394.230 ops/s
# Warmup Iteration   3: 773741.444 ops/s
# Warmup Iteration   4: 763206.826 ops/s
# Warmup Iteration   5: 737362.873 ops/s
# Warmup Iteration   6: 773744.311 ops/s
# Warmup Iteration   7: 750596.527 ops/s
# Warmup Iteration   8: 741120.373 ops/s
# Warmup Iteration   9: 741989.220 ops/s
# Warmup Iteration  10: 675114.036 ops/s
# Warmup Iteration  11: 755535.156 ops/s
# Warmup Iteration  12: 748199.646 ops/s
# Warmup Iteration  13: 748410.254 ops/s
# Warmup Iteration  14: 728893.576 ops/s
# Warmup Iteration  15: 739938.336 ops/s
# Warmup Iteration  16: 747806.489 ops/s
# Warmup Iteration  17: 735828.025 ops/s
# Warmup Iteration  18: 745128.420 ops/s
# Warmup Iteration  19: 739299.267 ops/s
# Warmup Iteration  20: 741543.616 ops/s
# Warmup Iteration  21: 743292.248 ops/s
# Warmup Iteration  22: 732645.357 ops/s
# Warmup Iteration  23: 747545.754 ops/s
# Warmup Iteration  24: 780709.453 ops/s
# Warmup Iteration  25: 773887.713 ops/s
# Warmup Iteration  26: 788625.016 ops/s
# Warmup Iteration  27: 792330.920 ops/s
# Warmup Iteration  28: 770827.242 ops/s
# Warmup Iteration  29: 764288.715 ops/s
# Warmup Iteration  30: 784707.002 ops/s
Iteration   1: 802475.249 ops/s
Iteration   2: 758273.291 ops/s
Iteration   3: 770124.381 ops/s
Iteration   4: 776331.003 ops/s
Iteration   5: 740396.812 ops/s
Iteration   6: 741744.219 ops/s
Iteration   7: 733844.105 ops/s
Iteration   8: 744027.037 ops/s
Iteration   9: 738958.147 ops/s
Iteration  10: 746736.258 ops/s
Iteration  11: 745726.219 ops/s
Iteration  12: 740811.792 ops/s
Iteration  13: 762815.252 ops/s
Iteration  14: 743629.576 ops/s
Iteration  15: 775418.745 ops/s
Iteration  16: 732867.998 ops/s
Iteration  17: 755851.669 ops/s
Iteration  18: 763194.654 ops/s
Iteration  19: 762955.289 ops/s
Iteration  20: 766339.952 ops/s
Iteration  21: 744648.255 ops/s
Iteration  22: 780147.756 ops/s
Iteration  23: 807580.070 ops/s
Iteration  24: 803195.390 ops/s
Iteration  25: 803562.421 ops/s
Iteration  26: 777090.279 ops/s
Iteration  27: 765547.205 ops/s
Iteration  28: 722738.013 ops/s
Iteration  29: 768997.495 ops/s
Iteration  30: 734150.074 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAll":
  760339.287 ±(99.9%) 15434.030 ops/s [Average]
  (min, avg, max) = (722738.013, 760339.287, 807580.070), stdev = 23100.931
  CI (99.9%): [744905.257, 775773.317] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAll  thrpt   30  760339.287 ± 15434.030  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAllArguments$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAllArguments

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 837032.347 ops/s
# Warmup Iteration   2: 1164920.904 ops/s
# Warmup Iteration   3: 1416930.830 ops/s
# Warmup Iteration   4: 1466874.097 ops/s
# Warmup Iteration   5: 1437469.109 ops/s
# Warmup Iteration   6: 1408794.373 ops/s
# Warmup Iteration   7: 1251919.249 ops/s
# Warmup Iteration   8: 1303052.408 ops/s
# Warmup Iteration   9: 1411804.457 ops/s
# Warmup Iteration  10: 1498961.577 ops/s
# Warmup Iteration  11: 1417409.528 ops/s
# Warmup Iteration  12: 1458186.093 ops/s
# Warmup Iteration  13: 1511952.746 ops/s
# Warmup Iteration  14: 1516338.716 ops/s
# Warmup Iteration  15: 1463063.318 ops/s
# Warmup Iteration  16: 1532633.297 ops/s
# Warmup Iteration  17: 1425398.843 ops/s
# Warmup Iteration  18: 1473975.796 ops/s
# Warmup Iteration  19: 1432953.288 ops/s
# Warmup Iteration  20: 1493837.854 ops/s
# Warmup Iteration  21: 1476089.085 ops/s
# Warmup Iteration  22: 1483105.570 ops/s
# Warmup Iteration  23: 1418530.524 ops/s
# Warmup Iteration  24: 1483894.607 ops/s
# Warmup Iteration  25: 1439071.243 ops/s
# Warmup Iteration  26: 1422150.100 ops/s
# Warmup Iteration  27: 1429174.624 ops/s
# Warmup Iteration  28: 1457944.069 ops/s
# Warmup Iteration  29: 1513752.706 ops/s
# Warmup Iteration  30: 1462792.742 ops/s
Iteration   1: 1441633.965 ops/s
Iteration   2: 1416961.042 ops/s
Iteration   3: 1396945.696 ops/s
Iteration   4: 1410213.146 ops/s
Iteration   5: 1438933.209 ops/s
Iteration   6: 1469516.300 ops/s
Iteration   7: 1466777.431 ops/s
Iteration   8: 1417601.076 ops/s
Iteration   9: 1418080.082 ops/s
Iteration  10: 1437856.625 ops/s
Iteration  11: 1431244.374 ops/s
Iteration  12: 1403077.041 ops/s
Iteration  13: 1462754.685 ops/s
Iteration  14: 1439006.429 ops/s
Iteration  15: 1498897.300 ops/s
Iteration  16: 1489619.269 ops/s
Iteration  17: 1556312.318 ops/s
Iteration  18: 1507888.920 ops/s
Iteration  19: 1443891.139 ops/s
Iteration  20: 1564572.215 ops/s
Iteration  21: 1453672.918 ops/s
Iteration  22: 1412269.996 ops/s
Iteration  23: 1417933.563 ops/s
Iteration  24: 1483355.073 ops/s
Iteration  25: 1558171.916 ops/s
Iteration  26: 1529740.455 ops/s
Iteration  27: 1412492.064 ops/s
Iteration  28: 1434740.637 ops/s
Iteration  29: 1423385.186 ops/s
Iteration  30: 1410651.790 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAllArguments":
  1454939.862 ±(99.9%) 32346.903 ops/s [Average]
  (min, avg, max) = (1396945.696, 1454939.862, 1564572.215), stdev = 48415.326
  CI (99.9%): [1422592.959, 1487286.765] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAllArguments  thrpt   30  1454939.862 ± 32346.903  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 788653.184 ops/s
# Warmup Iteration   2: 1215326.898 ops/s
# Warmup Iteration   3: 1439996.528 ops/s
# Warmup Iteration   4: 1470364.254 ops/s
# Warmup Iteration   5: 1449475.491 ops/s
# Warmup Iteration   6: 1411343.780 ops/s
# Warmup Iteration   7: 1268700.892 ops/s
# Warmup Iteration   8: 1456792.150 ops/s
# Warmup Iteration   9: 1437380.340 ops/s
# Warmup Iteration  10: 1555476.090 ops/s
# Warmup Iteration  11: 1566082.161 ops/s
# Warmup Iteration  12: 1451861.021 ops/s
# Warmup Iteration  13: 1469623.692 ops/s
# Warmup Iteration  14: 1498152.563 ops/s
# Warmup Iteration  15: 1572106.470 ops/s
# Warmup Iteration  16: 1522679.324 ops/s
# Warmup Iteration  17: 1575086.835 ops/s
# Warmup Iteration  18: 1509636.422 ops/s
# Warmup Iteration  19: 1571191.139 ops/s
# Warmup Iteration  20: 1449595.011 ops/s
# Warmup Iteration  21: 1435925.485 ops/s
# Warmup Iteration  22: 1445559.780 ops/s
# Warmup Iteration  23: 1506977.685 ops/s
# Warmup Iteration  24: 1484576.492 ops/s
# Warmup Iteration  25: 1448674.853 ops/s
# Warmup Iteration  26: 1512735.563 ops/s
# Warmup Iteration  27: 1438040.325 ops/s
# Warmup Iteration  28: 1472596.369 ops/s
# Warmup Iteration  29: 1533421.049 ops/s
# Warmup Iteration  30: 1459946.337 ops/s
Iteration   1: 1499525.280 ops/s
Iteration   2: 1488444.346 ops/s
Iteration   3: 1493196.508 ops/s
Iteration   4: 1465999.537 ops/s
Iteration   5: 1514499.845 ops/s
Iteration   6: 1511372.386 ops/s
Iteration   7: 1513238.100 ops/s
Iteration   8: 1508440.048 ops/s
Iteration   9: 1551400.900 ops/s
Iteration  10: 1506353.136 ops/s
Iteration  11: 1454518.762 ops/s
Iteration  12: 1495169.556 ops/s
Iteration  13: 1504434.259 ops/s
Iteration  14: 1501918.155 ops/s
Iteration  15: 1467187.149 ops/s
Iteration  16: 1539808.575 ops/s
Iteration  17: 1435520.385 ops/s
Iteration  18: 1528825.151 ops/s
Iteration  19: 1480796.445 ops/s
Iteration  20: 1457793.214 ops/s
Iteration  21: 1450333.086 ops/s
Iteration  22: 1441113.715 ops/s
Iteration  23: 1460593.127 ops/s
Iteration  24: 1476499.930 ops/s
Iteration  25: 1431330.632 ops/s
Iteration  26: 1445315.230 ops/s
Iteration  27: 1461025.977 ops/s
Iteration  28: 1486897.854 ops/s
Iteration  29: 1466615.927 ops/s
Iteration  30: 1436100.950 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAllIterable":
  1482475.605 ±(99.9%) 21467.419 ops/s [Average]
  (min, avg, max) = (1431330.632, 1482475.605, 1551400.900), stdev = 32131.425
  CI (99.9%): [1461008.186, 1503943.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAllIterable  thrpt   30  1482475.605 ± 21467.419  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 425719.357 ops/s
# Warmup Iteration   2: 535558.002 ops/s
# Warmup Iteration   3: 760600.350 ops/s
# Warmup Iteration   4: 732722.281 ops/s
# Warmup Iteration   5: 751919.114 ops/s
# Warmup Iteration   6: 768795.130 ops/s
# Warmup Iteration   7: 735611.915 ops/s
# Warmup Iteration   8: 737610.375 ops/s
# Warmup Iteration   9: 607651.535 ops/s
# Warmup Iteration  10: 767369.125 ops/s
# Warmup Iteration  11: 726254.648 ops/s
# Warmup Iteration  12: 759619.094 ops/s
# Warmup Iteration  13: 714949.397 ops/s
# Warmup Iteration  14: 731085.812 ops/s
# Warmup Iteration  15: 774698.073 ops/s
# Warmup Iteration  16: 710986.421 ops/s
# Warmup Iteration  17: 758502.753 ops/s
# Warmup Iteration  18: 762914.285 ops/s
# Warmup Iteration  19: 748764.399 ops/s
# Warmup Iteration  20: 784099.773 ops/s
# Warmup Iteration  21: 782115.068 ops/s
# Warmup Iteration  22: 713730.637 ops/s
# Warmup Iteration  23: 741618.026 ops/s
# Warmup Iteration  24: 743267.520 ops/s
# Warmup Iteration  25: 740173.007 ops/s
# Warmup Iteration  26: 775108.120 ops/s
# Warmup Iteration  27: 715467.618 ops/s
# Warmup Iteration  28: 718541.685 ops/s
# Warmup Iteration  29: 735926.919 ops/s
# Warmup Iteration  30: 729014.511 ops/s
Iteration   1: 708558.430 ops/s
Iteration   2: 773441.837 ops/s
Iteration   3: 712181.882 ops/s
Iteration   4: 730396.741 ops/s
Iteration   5: 775956.814 ops/s
Iteration   6: 736139.689 ops/s
Iteration   7: 716702.181 ops/s
Iteration   8: 708391.655 ops/s
Iteration   9: 727834.813 ops/s
Iteration  10: 743032.958 ops/s
Iteration  11: 736982.543 ops/s
Iteration  12: 724860.480 ops/s
Iteration  13: 710569.766 ops/s
Iteration  14: 766480.729 ops/s
Iteration  15: 784985.427 ops/s
Iteration  16: 753763.173 ops/s
Iteration  17: 747967.238 ops/s
Iteration  18: 743493.813 ops/s
Iteration  19: 773547.578 ops/s
Iteration  20: 751668.377 ops/s
Iteration  21: 736568.786 ops/s
Iteration  22: 748676.208 ops/s
Iteration  23: 748819.817 ops/s
Iteration  24: 736766.387 ops/s
Iteration  25: 744251.402 ops/s
Iteration  26: 706035.839 ops/s
Iteration  27: 743207.316 ops/s
Iteration  28: 707064.274 ops/s
Iteration  29: 728986.715 ops/s
Iteration  30: 728303.737 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAnyCollection":
  738521.220 ±(99.9%) 14664.095 ops/s [Average]
  (min, avg, max) = (706035.839, 738521.220, 784985.427), stdev = 21948.529
  CI (99.9%): [723857.125, 753185.315] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  738521.220 ± 14664.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 176619.869 ops/s
# Warmup Iteration   2: 197590.251 ops/s
# Warmup Iteration   3: 198670.728 ops/s
# Warmup Iteration   4: 192147.475 ops/s
# Warmup Iteration   5: 207035.609 ops/s
# Warmup Iteration   6: 215004.216 ops/s
# Warmup Iteration   7: 210068.104 ops/s
# Warmup Iteration   8: 210964.905 ops/s
# Warmup Iteration   9: 216127.716 ops/s
# Warmup Iteration  10: 218099.247 ops/s
# Warmup Iteration  11: 210385.932 ops/s
# Warmup Iteration  12: 207712.876 ops/s
# Warmup Iteration  13: 207741.045 ops/s
# Warmup Iteration  14: 206497.483 ops/s
# Warmup Iteration  15: 209240.650 ops/s
# Warmup Iteration  16: 208211.070 ops/s
# Warmup Iteration  17: 216612.270 ops/s
# Warmup Iteration  18: 225068.741 ops/s
# Warmup Iteration  19: 226319.910 ops/s
# Warmup Iteration  20: 227613.883 ops/s
# Warmup Iteration  21: 214818.159 ops/s
# Warmup Iteration  22: 208265.405 ops/s
# Warmup Iteration  23: 209211.111 ops/s
# Warmup Iteration  24: 206727.293 ops/s
# Warmup Iteration  25: 211330.468 ops/s
# Warmup Iteration  26: 195096.568 ops/s
# Warmup Iteration  27: 191562.878 ops/s
# Warmup Iteration  28: 216640.637 ops/s
# Warmup Iteration  29: 214948.375 ops/s
# Warmup Iteration  30: 214876.544 ops/s
Iteration   1: 221057.306 ops/s
Iteration   2: 221697.588 ops/s
Iteration   3: 212595.263 ops/s
Iteration   4: 218683.358 ops/s
Iteration   5: 212932.459 ops/s
Iteration   6: 217790.646 ops/s
Iteration   7: 207357.894 ops/s
Iteration   8: 222877.386 ops/s
Iteration   9: 218149.368 ops/s
Iteration  10: 215767.187 ops/s
Iteration  11: 225901.325 ops/s
Iteration  12: 212567.666 ops/s
Iteration  13: 206988.964 ops/s
Iteration  14: 213819.236 ops/s
Iteration  15: 222736.106 ops/s
Iteration  16: 227555.556 ops/s
Iteration  17: 214756.844 ops/s
Iteration  18: 217109.745 ops/s
Iteration  19: 215620.606 ops/s
Iteration  20: 215532.620 ops/s
Iteration  21: 216608.031 ops/s
Iteration  22: 213731.776 ops/s
Iteration  23: 212808.234 ops/s
Iteration  24: 213946.540 ops/s
Iteration  25: 214580.949 ops/s
Iteration  26: 216355.620 ops/s
Iteration  27: 213542.747 ops/s
Iteration  28: 215230.268 ops/s
Iteration  29: 208413.049 ops/s
Iteration  30: 201460.109 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAnyIterable":
  215605.815 ±(99.9%) 3694.821 ops/s [Average]
  (min, avg, max) = (201460.109, 215605.815, 227555.556), stdev = 5530.235
  CI (99.9%): [211910.994, 219300.636] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  215605.815 ± 3694.821  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 350248.404 ops/s
# Warmup Iteration   2: 461510.041 ops/s
# Warmup Iteration   3: 573242.904 ops/s
# Warmup Iteration   4: 568647.790 ops/s
# Warmup Iteration   5: 580590.471 ops/s
# Warmup Iteration   6: 564298.255 ops/s
# Warmup Iteration   7: 557090.651 ops/s
# Warmup Iteration   8: 466939.486 ops/s
# Warmup Iteration   9: 554238.193 ops/s
# Warmup Iteration  10: 582156.361 ops/s
# Warmup Iteration  11: 560945.246 ops/s
# Warmup Iteration  12: 556862.928 ops/s
# Warmup Iteration  13: 558905.947 ops/s
# Warmup Iteration  14: 559700.954 ops/s
# Warmup Iteration  15: 581963.656 ops/s
# Warmup Iteration  16: 583520.607 ops/s
# Warmup Iteration  17: 585117.976 ops/s
# Warmup Iteration  18: 567976.436 ops/s
# Warmup Iteration  19: 566122.770 ops/s
# Warmup Iteration  20: 579720.755 ops/s
# Warmup Iteration  21: 579848.881 ops/s
# Warmup Iteration  22: 562455.116 ops/s
# Warmup Iteration  23: 584116.012 ops/s
# Warmup Iteration  24: 578842.713 ops/s
# Warmup Iteration  25: 560317.258 ops/s
# Warmup Iteration  26: 565884.994 ops/s
# Warmup Iteration  27: 555181.828 ops/s
# Warmup Iteration  28: 547591.809 ops/s
# Warmup Iteration  29: 557334.441 ops/s
# Warmup Iteration  30: 560101.786 ops/s
Iteration   1: 575810.081 ops/s
Iteration   2: 564830.254 ops/s
Iteration   3: 572946.842 ops/s
Iteration   4: 563339.314 ops/s
Iteration   5: 563908.482 ops/s
Iteration   6: 578321.483 ops/s
Iteration   7: 583379.438 ops/s
Iteration   8: 580421.697 ops/s
Iteration   9: 583108.352 ops/s
Iteration  10: 583059.109 ops/s
Iteration  11: 575161.224 ops/s
Iteration  12: 563462.099 ops/s
Iteration  13: 559080.901 ops/s
Iteration  14: 549983.830 ops/s
Iteration  15: 565546.783 ops/s
Iteration  16: 543302.797 ops/s
Iteration  17: 556057.806 ops/s
Iteration  18: 569915.982 ops/s
Iteration  19: 570817.381 ops/s
Iteration  20: 565655.950 ops/s
Iteration  21: 562016.194 ops/s
Iteration  22: 556169.236 ops/s
Iteration  23: 565402.532 ops/s
Iteration  24: 557859.228 ops/s
Iteration  25: 550078.863 ops/s
Iteration  26: 557394.592 ops/s
Iteration  27: 561211.052 ops/s
Iteration  28: 569048.477 ops/s
Iteration  29: 590125.532 ops/s
Iteration  30: 581020.494 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsKey":
  567281.200 ±(99.9%) 7595.230 ops/s [Average]
  (min, avg, max) = (543302.797, 567281.200, 590125.532), stdev = 11368.183
  CI (99.9%): [559685.970, 574876.430] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsKey  thrpt   30  567281.200 ± 7595.230  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 449734.141 ops/s
# Warmup Iteration   2: 555698.399 ops/s
# Warmup Iteration   3: 692285.712 ops/s
# Warmup Iteration   4: 686382.954 ops/s
# Warmup Iteration   5: 724413.386 ops/s
# Warmup Iteration   6: 691132.300 ops/s
# Warmup Iteration   7: 712748.516 ops/s
# Warmup Iteration   8: 720217.284 ops/s
# Warmup Iteration   9: 582120.668 ops/s
# Warmup Iteration  10: 695635.905 ops/s
# Warmup Iteration  11: 691692.343 ops/s
# Warmup Iteration  12: 698373.325 ops/s
# Warmup Iteration  13: 702222.382 ops/s
# Warmup Iteration  14: 713802.112 ops/s
# Warmup Iteration  15: 700341.209 ops/s
# Warmup Iteration  16: 695367.031 ops/s
# Warmup Iteration  17: 704359.277 ops/s
# Warmup Iteration  18: 687511.239 ops/s
# Warmup Iteration  19: 686193.180 ops/s
# Warmup Iteration  20: 696212.149 ops/s
# Warmup Iteration  21: 683384.663 ops/s
# Warmup Iteration  22: 696826.365 ops/s
# Warmup Iteration  23: 695042.996 ops/s
# Warmup Iteration  24: 712628.295 ops/s
# Warmup Iteration  25: 698216.551 ops/s
# Warmup Iteration  26: 687569.067 ops/s
# Warmup Iteration  27: 695454.084 ops/s
# Warmup Iteration  28: 693772.074 ops/s
# Warmup Iteration  29: 704606.743 ops/s
# Warmup Iteration  30: 696611.554 ops/s
Iteration   1: 690468.844 ops/s
Iteration   2: 720845.293 ops/s
Iteration   3: 721795.080 ops/s
Iteration   4: 702774.946 ops/s
Iteration   5: 735581.074 ops/s
Iteration   6: 756531.766 ops/s
Iteration   7: 717343.289 ops/s
Iteration   8: 732550.144 ops/s
Iteration   9: 724930.454 ops/s
Iteration  10: 739845.998 ops/s
Iteration  11: 686939.382 ops/s
Iteration  12: 684333.667 ops/s
Iteration  13: 737788.847 ops/s
Iteration  14: 761025.970 ops/s
Iteration  15: 717944.710 ops/s
Iteration  16: 690320.717 ops/s
Iteration  17: 692421.861 ops/s
Iteration  18: 694579.075 ops/s
Iteration  19: 748487.931 ops/s
Iteration  20: 730780.072 ops/s
Iteration  21: 756865.523 ops/s
Iteration  22: 736624.406 ops/s
Iteration  23: 728185.293 ops/s
Iteration  24: 688608.925 ops/s
Iteration  25: 703078.416 ops/s
Iteration  26: 684752.057 ops/s
Iteration  27: 698670.599 ops/s
Iteration  28: 690782.281 ops/s
Iteration  29: 695585.728 ops/s
Iteration  30: 759867.868 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsNoneCollection":
  717677.007 ±(99.9%) 16859.180 ops/s [Average]
  (min, avg, max) = (684333.667, 717677.007, 761025.970), stdev = 25234.029
  CI (99.9%): [700817.827, 734536.188] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  717677.007 ± 16859.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169421.702 ops/s
# Warmup Iteration   2: 195799.497 ops/s
# Warmup Iteration   3: 195713.012 ops/s
# Warmup Iteration   4: 182772.628 ops/s
# Warmup Iteration   5: 202235.351 ops/s
# Warmup Iteration   6: 202487.975 ops/s
# Warmup Iteration   7: 201487.990 ops/s
# Warmup Iteration   8: 214419.709 ops/s
# Warmup Iteration   9: 222285.068 ops/s
# Warmup Iteration  10: 203923.904 ops/s
# Warmup Iteration  11: 211691.930 ops/s
# Warmup Iteration  12: 208040.422 ops/s
# Warmup Iteration  13: 203187.665 ops/s
# Warmup Iteration  14: 206364.286 ops/s
# Warmup Iteration  15: 210043.118 ops/s
# Warmup Iteration  16: 210667.415 ops/s
# Warmup Iteration  17: 203187.133 ops/s
# Warmup Iteration  18: 204335.879 ops/s
# Warmup Iteration  19: 209473.855 ops/s
# Warmup Iteration  20: 215063.308 ops/s
# Warmup Iteration  21: 202846.647 ops/s
# Warmup Iteration  22: 202061.435 ops/s
# Warmup Iteration  23: 213642.278 ops/s
# Warmup Iteration  24: 206459.155 ops/s
# Warmup Iteration  25: 202214.574 ops/s
# Warmup Iteration  26: 196918.983 ops/s
# Warmup Iteration  27: 197514.765 ops/s
# Warmup Iteration  28: 215714.583 ops/s
# Warmup Iteration  29: 221870.128 ops/s
# Warmup Iteration  30: 214090.531 ops/s
Iteration   1: 203746.532 ops/s
Iteration   2: 205500.888 ops/s
Iteration   3: 204259.289 ops/s
Iteration   4: 202489.945 ops/s
Iteration   5: 213220.666 ops/s
Iteration   6: 204514.379 ops/s
Iteration   7: 204410.826 ops/s
Iteration   8: 216163.009 ops/s
Iteration   9: 222902.609 ops/s
Iteration  10: 222636.871 ops/s
Iteration  11: 212578.537 ops/s
Iteration  12: 203786.164 ops/s
Iteration  13: 202325.130 ops/s
Iteration  14: 199903.640 ops/s
Iteration  15: 203208.513 ops/s
Iteration  16: 209310.270 ops/s
Iteration  17: 211571.175 ops/s
Iteration  18: 208988.910 ops/s
Iteration  19: 219846.945 ops/s
Iteration  20: 209911.328 ops/s
Iteration  21: 202909.303 ops/s
Iteration  22: 210405.529 ops/s
Iteration  23: 203902.539 ops/s
Iteration  24: 203753.040 ops/s
Iteration  25: 197986.248 ops/s
Iteration  26: 210866.540 ops/s
Iteration  27: 220342.824 ops/s
Iteration  28: 206633.634 ops/s
Iteration  29: 198779.116 ops/s
Iteration  30: 203678.192 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsNoneIterable":
  208017.753 ±(99.9%) 4601.722 ops/s [Average]
  (min, avg, max) = (197986.248, 208017.753, 222902.609), stdev = 6887.641
  CI (99.9%): [203416.031, 212619.475] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  208017.753 ± 4601.722  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 285278.480 ops/s
# Warmup Iteration   2: 384736.649 ops/s
# Warmup Iteration   3: 453930.829 ops/s
# Warmup Iteration   4: 471864.709 ops/s
# Warmup Iteration   5: 466495.553 ops/s
# Warmup Iteration   6: 468048.831 ops/s
# Warmup Iteration   7: 402924.784 ops/s
# Warmup Iteration   8: 443172.094 ops/s
# Warmup Iteration   9: 465061.150 ops/s
# Warmup Iteration  10: 462500.593 ops/s
# Warmup Iteration  11: 476097.519 ops/s
# Warmup Iteration  12: 477738.150 ops/s
# Warmup Iteration  13: 467648.114 ops/s
# Warmup Iteration  14: 472623.616 ops/s
# Warmup Iteration  15: 463792.443 ops/s
# Warmup Iteration  16: 468424.694 ops/s
# Warmup Iteration  17: 486162.630 ops/s
# Warmup Iteration  18: 509304.922 ops/s
# Warmup Iteration  19: 469334.642 ops/s
# Warmup Iteration  20: 497946.596 ops/s
# Warmup Iteration  21: 491488.246 ops/s
# Warmup Iteration  22: 479185.895 ops/s
# Warmup Iteration  23: 477633.029 ops/s
# Warmup Iteration  24: 464710.532 ops/s
# Warmup Iteration  25: 498793.201 ops/s
# Warmup Iteration  26: 475879.651 ops/s
# Warmup Iteration  27: 495038.348 ops/s
# Warmup Iteration  28: 492249.262 ops/s
# Warmup Iteration  29: 466778.429 ops/s
# Warmup Iteration  30: 483816.626 ops/s
Iteration   1: 482379.950 ops/s
Iteration   2: 461867.836 ops/s
Iteration   3: 465139.341 ops/s
Iteration   4: 472486.145 ops/s
Iteration   5: 509984.447 ops/s
Iteration   6: 497794.787 ops/s
Iteration   7: 457067.490 ops/s
Iteration   8: 478759.105 ops/s
Iteration   9: 490798.849 ops/s
Iteration  10: 510339.404 ops/s
Iteration  11: 509673.677 ops/s
Iteration  12: 457471.759 ops/s
Iteration  13: 462287.161 ops/s
Iteration  14: 470847.738 ops/s
Iteration  15: 459140.073 ops/s
Iteration  16: 474493.124 ops/s
Iteration  17: 479315.777 ops/s
Iteration  18: 463386.806 ops/s
Iteration  19: 475491.042 ops/s
Iteration  20: 461808.139 ops/s
Iteration  21: 456374.896 ops/s
Iteration  22: 459240.593 ops/s
Iteration  23: 462602.847 ops/s
Iteration  24: 507448.346 ops/s
Iteration  25: 504406.791 ops/s
Iteration  26: 478435.990 ops/s
Iteration  27: 484611.880 ops/s
Iteration  28: 474432.202 ops/s
Iteration  29: 493777.178 ops/s
Iteration  30: 509359.759 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsValue":
  479040.771 ±(99.9%) 12400.672 ops/s [Average]
  (min, avg, max) = (456374.896, 479040.771, 510339.404), stdev = 18560.743
  CI (99.9%): [466640.100, 491441.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_containsValue  thrpt   30  479040.771 ± 12400.672  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2068528.879 ops/s
# Warmup Iteration   2: 4626310.960 ops/s
# Warmup Iteration   3: 4655465.798 ops/s
# Warmup Iteration   4: 3851525.832 ops/s
# Warmup Iteration   5: 4705745.487 ops/s
# Warmup Iteration   6: 5001478.353 ops/s
# Warmup Iteration   7: 4750967.263 ops/s
# Warmup Iteration   8: 4807842.293 ops/s
# Warmup Iteration   9: 4730392.530 ops/s
# Warmup Iteration  10: 4809086.361 ops/s
# Warmup Iteration  11: 4867150.082 ops/s
# Warmup Iteration  12: 5077196.182 ops/s
# Warmup Iteration  13: 4717627.017 ops/s
# Warmup Iteration  14: 4815487.601 ops/s
# Warmup Iteration  15: 4922962.222 ops/s
# Warmup Iteration  16: 4666438.588 ops/s
# Warmup Iteration  17: 4719440.281 ops/s
# Warmup Iteration  18: 4910930.235 ops/s
# Warmup Iteration  19: 4812801.837 ops/s
# Warmup Iteration  20: 4734995.312 ops/s
# Warmup Iteration  21: 4792010.932 ops/s
# Warmup Iteration  22: 4694999.263 ops/s
# Warmup Iteration  23: 4891744.922 ops/s
# Warmup Iteration  24: 4612044.000 ops/s
# Warmup Iteration  25: 4664882.474 ops/s
# Warmup Iteration  26: 4938776.258 ops/s
# Warmup Iteration  27: 5011214.048 ops/s
# Warmup Iteration  28: 4651868.175 ops/s
# Warmup Iteration  29: 4895369.173 ops/s
# Warmup Iteration  30: 4684018.382 ops/s
Iteration   1: 4638922.420 ops/s
Iteration   2: 4613264.599 ops/s
Iteration   3: 4547868.983 ops/s
Iteration   4: 4557548.873 ops/s
Iteration   5: 4646006.098 ops/s
Iteration   6: 4678202.864 ops/s
Iteration   7: 4555728.752 ops/s
Iteration   8: 4632258.834 ops/s
Iteration   9: 4622203.090 ops/s
Iteration  10: 4652524.109 ops/s
Iteration  11: 4618032.728 ops/s
Iteration  12: 4592769.530 ops/s
Iteration  13: 4721490.785 ops/s
Iteration  14: 4714209.698 ops/s
Iteration  15: 4697557.817 ops/s
Iteration  16: 4662658.424 ops/s
Iteration  17: 4631602.084 ops/s
Iteration  18: 4672090.752 ops/s
Iteration  19: 4664623.169 ops/s
Iteration  20: 4631600.142 ops/s
Iteration  21: 4574065.317 ops/s
Iteration  22: 4642829.242 ops/s
Iteration  23: 4756642.434 ops/s
Iteration  24: 5027880.993 ops/s
Iteration  25: 4812055.608 ops/s
Iteration  26: 4648349.687 ops/s
Iteration  27: 4747744.111 ops/s
Iteration  28: 4586480.076 ops/s
Iteration  29: 4610464.801 ops/s
Iteration  30: 4781082.755 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_count":
  4664625.293 ±(99.9%) 63351.250 ops/s [Average]
  (min, avg, max) = (4547868.983, 4664625.293, 5027880.993), stdev = 94821.176
  CI (99.9%): [4601274.042, 4727976.543] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_count  thrpt   30  4664625.293 ± 63351.250  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 728833.711 ops/s
# Warmup Iteration   2: 1408254.215 ops/s
# Warmup Iteration   3: 1682518.685 ops/s
# Warmup Iteration   4: 1707568.465 ops/s
# Warmup Iteration   5: 1463277.235 ops/s
# Warmup Iteration   6: 1560467.141 ops/s
# Warmup Iteration   7: 1643289.767 ops/s
# Warmup Iteration   8: 1659691.398 ops/s
# Warmup Iteration   9: 1803706.219 ops/s
# Warmup Iteration  10: 1806161.009 ops/s
# Warmup Iteration  11: 1805229.383 ops/s
# Warmup Iteration  12: 1697267.419 ops/s
# Warmup Iteration  13: 1684775.829 ops/s
# Warmup Iteration  14: 1687977.981 ops/s
# Warmup Iteration  15: 1657818.906 ops/s
# Warmup Iteration  16: 1709915.650 ops/s
# Warmup Iteration  17: 1653319.491 ops/s
# Warmup Iteration  18: 1707768.943 ops/s
# Warmup Iteration  19: 1705410.461 ops/s
# Warmup Iteration  20: 1694304.867 ops/s
# Warmup Iteration  21: 1715816.248 ops/s
# Warmup Iteration  22: 1662157.850 ops/s
# Warmup Iteration  23: 1695809.861 ops/s
# Warmup Iteration  24: 1709602.323 ops/s
# Warmup Iteration  25: 1693430.178 ops/s
# Warmup Iteration  26: 1709335.210 ops/s
# Warmup Iteration  27: 1636191.955 ops/s
# Warmup Iteration  28: 1744160.485 ops/s
# Warmup Iteration  29: 1698212.778 ops/s
# Warmup Iteration  30: 1647847.112 ops/s
Iteration   1: 1788964.533 ops/s
Iteration   2: 1751225.725 ops/s
Iteration   3: 1667910.244 ops/s
Iteration   4: 1738084.949 ops/s
Iteration   5: 1732779.940 ops/s
Iteration   6: 1745926.127 ops/s
Iteration   7: 1675932.886 ops/s
Iteration   8: 1730952.906 ops/s
Iteration   9: 1667222.971 ops/s
Iteration  10: 1711987.472 ops/s
Iteration  11: 1614188.543 ops/s
Iteration  12: 1667392.878 ops/s
Iteration  13: 1713947.471 ops/s
Iteration  14: 1739156.035 ops/s
Iteration  15: 1768341.081 ops/s
Iteration  16: 1808463.336 ops/s
Iteration  17: 1807072.203 ops/s
Iteration  18: 1796788.969 ops/s
Iteration  19: 1775592.482 ops/s
Iteration  20: 1807000.686 ops/s
Iteration  21: 1774485.413 ops/s
Iteration  22: 1801358.958 ops/s
Iteration  23: 1788143.882 ops/s
Iteration  24: 1809166.638 ops/s
Iteration  25: 1789069.313 ops/s
Iteration  26: 1807728.247 ops/s
Iteration  27: 1790930.652 ops/s
Iteration  28: 1801960.993 ops/s
Iteration  29: 1795047.031 ops/s
Iteration  30: 1753127.102 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countBy":
  1753998.322 ±(99.9%) 35448.164 ops/s [Average]
  (min, avg, max) = (1614188.543, 1753998.322, 1809166.638), stdev = 53057.147
  CI (99.9%): [1718550.159, 1789446.486] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countBy  thrpt   30  1753998.322 ± 35448.164  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 221810.360 ops/s
# Warmup Iteration   2: 361276.058 ops/s
# Warmup Iteration   3: 431740.968 ops/s
# Warmup Iteration   4: 434085.073 ops/s
# Warmup Iteration   5: 434610.884 ops/s
# Warmup Iteration   6: 419945.295 ops/s
# Warmup Iteration   7: 365276.105 ops/s
# Warmup Iteration   8: 431581.855 ops/s
# Warmup Iteration   9: 426875.097 ops/s
# Warmup Iteration  10: 409163.019 ops/s
# Warmup Iteration  11: 429203.258 ops/s
# Warmup Iteration  12: 430503.979 ops/s
# Warmup Iteration  13: 421999.958 ops/s
# Warmup Iteration  14: 425034.008 ops/s
# Warmup Iteration  15: 431916.337 ops/s
# Warmup Iteration  16: 421276.269 ops/s
# Warmup Iteration  17: 426480.160 ops/s
# Warmup Iteration  18: 412750.548 ops/s
# Warmup Iteration  19: 425919.779 ops/s
# Warmup Iteration  20: 432086.165 ops/s
# Warmup Iteration  21: 431845.109 ops/s
# Warmup Iteration  22: 430051.389 ops/s
# Warmup Iteration  23: 428166.157 ops/s
# Warmup Iteration  24: 430547.651 ops/s
# Warmup Iteration  25: 431435.233 ops/s
# Warmup Iteration  26: 434477.918 ops/s
# Warmup Iteration  27: 431282.019 ops/s
# Warmup Iteration  28: 427456.006 ops/s
# Warmup Iteration  29: 434779.032 ops/s
# Warmup Iteration  30: 432726.834 ops/s
Iteration   1: 427795.415 ops/s
Iteration   2: 434283.586 ops/s
Iteration   3: 435100.797 ops/s
Iteration   4: 434921.184 ops/s
Iteration   5: 435452.383 ops/s
Iteration   6: 434796.258 ops/s
Iteration   7: 434126.843 ops/s
Iteration   8: 430894.368 ops/s
Iteration   9: 426945.190 ops/s
Iteration  10: 434169.355 ops/s
Iteration  11: 432083.870 ops/s
Iteration  12: 435695.251 ops/s
Iteration  13: 435119.587 ops/s
Iteration  14: 435614.551 ops/s
Iteration  15: 431901.094 ops/s
Iteration  16: 431882.474 ops/s
Iteration  17: 433104.882 ops/s
Iteration  18: 434548.581 ops/s
Iteration  19: 432888.684 ops/s
Iteration  20: 430706.103 ops/s
Iteration  21: 435903.836 ops/s
Iteration  22: 433335.779 ops/s
Iteration  23: 426752.881 ops/s
Iteration  24: 428323.322 ops/s
Iteration  25: 422958.644 ops/s
Iteration  26: 427826.639 ops/s
Iteration  27: 425083.734 ops/s
Iteration  28: 433493.370 ops/s
Iteration  29: 432920.232 ops/s
Iteration  30: 435888.476 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countByEach":
  432150.579 ±(99.9%) 2373.623 ops/s [Average]
  (min, avg, max) = (422958.644, 432150.579, 435903.836), stdev = 3552.727
  CI (99.9%): [429776.956, 434524.202] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countByEach  thrpt   30  432150.579 ± 2373.623  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 784106.271 ops/s
# Warmup Iteration   2: 1558110.928 ops/s
# Warmup Iteration   3: 1697770.513 ops/s
# Warmup Iteration   4: 1706753.300 ops/s
# Warmup Iteration   5: 1404816.864 ops/s
# Warmup Iteration   6: 1710461.942 ops/s
# Warmup Iteration   7: 1708657.078 ops/s
# Warmup Iteration   8: 1709165.454 ops/s
# Warmup Iteration   9: 1711445.808 ops/s
# Warmup Iteration  10: 1714200.686 ops/s
# Warmup Iteration  11: 1707130.510 ops/s
# Warmup Iteration  12: 1709392.556 ops/s
# Warmup Iteration  13: 1711895.413 ops/s
# Warmup Iteration  14: 1710661.875 ops/s
# Warmup Iteration  15: 1708864.669 ops/s
# Warmup Iteration  16: 1702609.682 ops/s
# Warmup Iteration  17: 1602184.650 ops/s
# Warmup Iteration  18: 1685268.481 ops/s
# Warmup Iteration  19: 1579817.491 ops/s
# Warmup Iteration  20: 1571557.094 ops/s
# Warmup Iteration  21: 1629412.228 ops/s
# Warmup Iteration  22: 1583979.294 ops/s
# Warmup Iteration  23: 1617530.585 ops/s
# Warmup Iteration  24: 1624499.992 ops/s
# Warmup Iteration  25: 1600131.643 ops/s
# Warmup Iteration  26: 1570498.324 ops/s
# Warmup Iteration  27: 1603027.026 ops/s
# Warmup Iteration  28: 1586597.078 ops/s
# Warmup Iteration  29: 1587810.527 ops/s
# Warmup Iteration  30: 1540307.798 ops/s
Iteration   1: 1619632.147 ops/s
Iteration   2: 1616382.386 ops/s
Iteration   3: 1614803.059 ops/s
Iteration   4: 1540580.443 ops/s
Iteration   5: 1587336.992 ops/s
Iteration   6: 1631354.026 ops/s
Iteration   7: 1688140.265 ops/s
Iteration   8: 1709094.270 ops/s
Iteration   9: 1612510.794 ops/s
Iteration  10: 1534428.772 ops/s
Iteration  11: 1576400.761 ops/s
Iteration  12: 1612615.062 ops/s
Iteration  13: 1595335.636 ops/s
Iteration  14: 1562178.887 ops/s
Iteration  15: 1538753.558 ops/s
Iteration  16: 1615858.471 ops/s
Iteration  17: 1574367.863 ops/s
Iteration  18: 1561554.423 ops/s
Iteration  19: 1551993.669 ops/s
Iteration  20: 1555978.485 ops/s
Iteration  21: 1637339.323 ops/s
Iteration  22: 1697025.742 ops/s
Iteration  23: 1697542.226 ops/s
Iteration  24: 1711799.572 ops/s
Iteration  25: 1628569.116 ops/s
Iteration  26: 1700495.303 ops/s
Iteration  27: 1709783.891 ops/s
Iteration  28: 1699447.759 ops/s
Iteration  29: 1524694.868 ops/s
Iteration  30: 1530997.077 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countByWith":
  1614566.495 ±(99.9%) 41514.375 ops/s [Average]
  (min, avg, max) = (1524694.868, 1614566.495, 1711799.572), stdev = 62136.766
  CI (99.9%): [1573052.120, 1656080.870] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countByWith  thrpt   30  1614566.495 ± 41514.375  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2344020.152 ops/s
# Warmup Iteration   2: 4691784.646 ops/s
# Warmup Iteration   3: 4713191.366 ops/s
# Warmup Iteration   4: 3691392.601 ops/s
# Warmup Iteration   5: 4477746.906 ops/s
# Warmup Iteration   6: 4714529.185 ops/s
# Warmup Iteration   7: 4581105.731 ops/s
# Warmup Iteration   8: 4782090.682 ops/s
# Warmup Iteration   9: 4930258.198 ops/s
# Warmup Iteration  10: 4570464.749 ops/s
# Warmup Iteration  11: 4568883.671 ops/s
# Warmup Iteration  12: 4624087.649 ops/s
# Warmup Iteration  13: 4601994.840 ops/s
# Warmup Iteration  14: 4603834.435 ops/s
# Warmup Iteration  15: 4547255.802 ops/s
# Warmup Iteration  16: 4644412.990 ops/s
# Warmup Iteration  17: 4513662.053 ops/s
# Warmup Iteration  18: 4615994.842 ops/s
# Warmup Iteration  19: 4750319.746 ops/s
# Warmup Iteration  20: 4664769.220 ops/s
# Warmup Iteration  21: 4566623.722 ops/s
# Warmup Iteration  22: 4515182.153 ops/s
# Warmup Iteration  23: 4549873.307 ops/s
# Warmup Iteration  24: 4575961.580 ops/s
# Warmup Iteration  25: 4782821.553 ops/s
# Warmup Iteration  26: 4655592.403 ops/s
# Warmup Iteration  27: 4645315.794 ops/s
# Warmup Iteration  28: 4703140.108 ops/s
# Warmup Iteration  29: 4565355.681 ops/s
# Warmup Iteration  30: 4429869.998 ops/s
Iteration   1: 4690587.954 ops/s
Iteration   2: 4461258.203 ops/s
Iteration   3: 4413230.404 ops/s
Iteration   4: 4495324.408 ops/s
Iteration   5: 4483312.596 ops/s
Iteration   6: 4666473.040 ops/s
Iteration   7: 4517254.087 ops/s
Iteration   8: 4408733.308 ops/s
Iteration   9: 4467859.856 ops/s
Iteration  10: 4574961.823 ops/s
Iteration  11: 4510520.786 ops/s
Iteration  12: 4639265.596 ops/s
Iteration  13: 4685668.435 ops/s
Iteration  14: 4610261.518 ops/s
Iteration  15: 4586799.428 ops/s
Iteration  16: 4626424.552 ops/s
Iteration  17: 4750773.976 ops/s
Iteration  18: 4862832.374 ops/s
Iteration  19: 4918340.932 ops/s
Iteration  20: 4907132.441 ops/s
Iteration  21: 4950657.000 ops/s
Iteration  22: 4819451.497 ops/s
Iteration  23: 4842288.904 ops/s
Iteration  24: 4883141.056 ops/s
Iteration  25: 4876349.219 ops/s
Iteration  26: 4892383.321 ops/s
Iteration  27: 4844767.406 ops/s
Iteration  28: 4793303.034 ops/s
Iteration  29: 4822187.126 ops/s
Iteration  30: 4833105.372 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countWith":
  4694488.322 ±(99.9%) 115266.611 ops/s [Average]
  (min, avg, max) = (4408733.308, 4694488.322, 4950657.000), stdev = 172525.650
  CI (99.9%): [4579221.711, 4809754.932] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_countWith  thrpt   30  4694488.322 ± 115266.611  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1986414.922 ops/s
# Warmup Iteration   2: 4126981.035 ops/s
# Warmup Iteration   3: 4104360.647 ops/s
# Warmup Iteration   4: 3491091.879 ops/s
# Warmup Iteration   5: 4166493.949 ops/s
# Warmup Iteration   6: 4133564.996 ops/s
# Warmup Iteration   7: 4152822.962 ops/s
# Warmup Iteration   8: 4118952.943 ops/s
# Warmup Iteration   9: 4068049.530 ops/s
# Warmup Iteration  10: 3996456.280 ops/s
# Warmup Iteration  11: 4138420.464 ops/s
# Warmup Iteration  12: 4108639.569 ops/s
# Warmup Iteration  13: 4116090.666 ops/s
# Warmup Iteration  14: 4136817.832 ops/s
# Warmup Iteration  15: 4167228.070 ops/s
# Warmup Iteration  16: 4156268.201 ops/s
# Warmup Iteration  17: 3944694.872 ops/s
# Warmup Iteration  18: 4060693.205 ops/s
# Warmup Iteration  19: 4101292.251 ops/s
# Warmup Iteration  20: 4159638.529 ops/s
# Warmup Iteration  21: 4146129.156 ops/s
# Warmup Iteration  22: 4128906.769 ops/s
# Warmup Iteration  23: 4176171.275 ops/s
# Warmup Iteration  24: 4125930.961 ops/s
# Warmup Iteration  25: 4158706.838 ops/s
# Warmup Iteration  26: 4159515.019 ops/s
# Warmup Iteration  27: 4099930.230 ops/s
# Warmup Iteration  28: 4128377.155 ops/s
# Warmup Iteration  29: 4097399.003 ops/s
# Warmup Iteration  30: 4156616.658 ops/s
Iteration   1: 4140402.991 ops/s
Iteration   2: 4115329.034 ops/s
Iteration   3: 4137162.648 ops/s
Iteration   4: 4166403.794 ops/s
Iteration   5: 4097034.056 ops/s
Iteration   6: 4107044.014 ops/s
Iteration   7: 4180950.229 ops/s
Iteration   8: 4157678.946 ops/s
Iteration   9: 4176280.258 ops/s
Iteration  10: 4153006.190 ops/s
Iteration  11: 4187701.688 ops/s
Iteration  12: 4200157.605 ops/s
Iteration  13: 4168526.279 ops/s
Iteration  14: 4152392.669 ops/s
Iteration  15: 4066638.462 ops/s
Iteration  16: 4106674.787 ops/s
Iteration  17: 4127409.867 ops/s
Iteration  18: 4089352.171 ops/s
Iteration  19: 4158210.469 ops/s
Iteration  20: 4134676.661 ops/s
Iteration  21: 4181231.546 ops/s
Iteration  22: 4070189.499 ops/s
Iteration  23: 4077035.646 ops/s
Iteration  24: 4055649.042 ops/s
Iteration  25: 3925412.473 ops/s
Iteration  26: 3966710.008 ops/s
Iteration  27: 4002032.101 ops/s
Iteration  28: 4093364.851 ops/s
Iteration  29: 4123748.150 ops/s
Iteration  30: 4160984.819 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detect":
  4115979.698 ±(99.9%) 43421.940 ops/s [Average]
  (min, avg, max) = (3925412.473, 4115979.698, 4200157.605), stdev = 64991.921
  CI (99.9%): [4072557.758, 4159401.639] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detect  thrpt   30  4115979.698 ± 43421.940  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectIfNone_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectIfNone_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2172682.930 ops/s
# Warmup Iteration   2: 4727491.987 ops/s
# Warmup Iteration   3: 4773840.592 ops/s
# Warmup Iteration   4: 3975795.066 ops/s
# Warmup Iteration   5: 4763097.893 ops/s
# Warmup Iteration   6: 4758194.217 ops/s
# Warmup Iteration   7: 4746552.025 ops/s
# Warmup Iteration   8: 4765090.140 ops/s
# Warmup Iteration   9: 4816692.212 ops/s
# Warmup Iteration  10: 4798256.064 ops/s
# Warmup Iteration  11: 4794304.760 ops/s
# Warmup Iteration  12: 4794528.896 ops/s
# Warmup Iteration  13: 4801875.480 ops/s
# Warmup Iteration  14: 4779595.959 ops/s
# Warmup Iteration  15: 4802336.879 ops/s
# Warmup Iteration  16: 4805615.252 ops/s
# Warmup Iteration  17: 4771913.828 ops/s
# Warmup Iteration  18: 4782726.366 ops/s
# Warmup Iteration  19: 4797663.001 ops/s
# Warmup Iteration  20: 4646894.138 ops/s
# Warmup Iteration  21: 4782232.861 ops/s
# Warmup Iteration  22: 4732505.771 ops/s
# Warmup Iteration  23: 4389559.228 ops/s
# Warmup Iteration  24: 4460539.735 ops/s
# Warmup Iteration  25: 4607130.658 ops/s
# Warmup Iteration  26: 4465904.295 ops/s
# Warmup Iteration  27: 4378958.708 ops/s
# Warmup Iteration  28: 4408507.428 ops/s
# Warmup Iteration  29: 4641028.669 ops/s
# Warmup Iteration  30: 4733640.606 ops/s
Iteration   1: 4804654.435 ops/s
Iteration   2: 4356586.688 ops/s
Iteration   3: 4365107.074 ops/s
Iteration   4: 4374124.434 ops/s
Iteration   5: 4313109.965 ops/s
Iteration   6: 4349499.174 ops/s
Iteration   7: 4422154.881 ops/s
Iteration   8: 4658548.664 ops/s
Iteration   9: 4517991.448 ops/s
Iteration  10: 4399146.164 ops/s
Iteration  11: 4587647.866 ops/s
Iteration  12: 4633725.430 ops/s
Iteration  13: 4723952.430 ops/s
Iteration  14: 4754605.964 ops/s
Iteration  15: 4801310.180 ops/s
Iteration  16: 4747886.016 ops/s
Iteration  17: 4641703.443 ops/s
Iteration  18: 4779166.501 ops/s
Iteration  19: 4733762.853 ops/s
Iteration  20: 4704953.828 ops/s
Iteration  21: 4733369.793 ops/s
Iteration  22: 4789462.856 ops/s
Iteration  23: 4809528.796 ops/s
Iteration  24: 4806760.538 ops/s
Iteration  25: 4814401.459 ops/s
Iteration  26: 4803290.306 ops/s
Iteration  27: 4586320.296 ops/s
Iteration  28: 4421290.608 ops/s
Iteration  29: 4409905.915 ops/s
Iteration  30: 4399637.818 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectIfNone_value":
  4608120.194 ±(99.9%) 119918.581 ops/s [Average]
  (min, avg, max) = (4313109.965, 4608120.194, 4814401.459), stdev = 179488.500
  CI (99.9%): [4488201.613, 4728038.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectIfNone_value  thrpt   30  4608120.194 ± 119918.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1765374.524 ops/s
# Warmup Iteration   2: 3780410.997 ops/s
# Warmup Iteration   3: 3959403.338 ops/s
# Warmup Iteration   4: 3172950.141 ops/s
# Warmup Iteration   5: 3872336.124 ops/s
# Warmup Iteration   6: 3952509.605 ops/s
# Warmup Iteration   7: 3853924.288 ops/s
# Warmup Iteration   8: 3842253.764 ops/s
# Warmup Iteration   9: 3881569.258 ops/s
# Warmup Iteration  10: 3971788.497 ops/s
# Warmup Iteration  11: 3999623.782 ops/s
# Warmup Iteration  12: 3894775.122 ops/s
# Warmup Iteration  13: 3874656.015 ops/s
# Warmup Iteration  14: 3814535.664 ops/s
# Warmup Iteration  15: 3871842.000 ops/s
# Warmup Iteration  16: 3901041.596 ops/s
# Warmup Iteration  17: 3879469.125 ops/s
# Warmup Iteration  18: 3985731.691 ops/s
# Warmup Iteration  19: 3862678.280 ops/s
# Warmup Iteration  20: 3937366.229 ops/s
# Warmup Iteration  21: 3845405.817 ops/s
# Warmup Iteration  22: 3918275.018 ops/s
# Warmup Iteration  23: 3885968.516 ops/s
# Warmup Iteration  24: 3929423.901 ops/s
# Warmup Iteration  25: 3962890.459 ops/s
# Warmup Iteration  26: 4057893.037 ops/s
# Warmup Iteration  27: 3868815.519 ops/s
# Warmup Iteration  28: 3868477.096 ops/s
# Warmup Iteration  29: 3847055.100 ops/s
# Warmup Iteration  30: 3811682.615 ops/s
Iteration   1: 3915890.664 ops/s
Iteration   2: 3880447.472 ops/s
Iteration   3: 3876644.255 ops/s
Iteration   4: 3844052.318 ops/s
Iteration   5: 3800715.210 ops/s
Iteration   6: 3955953.290 ops/s
Iteration   7: 3866501.866 ops/s
Iteration   8: 4009153.803 ops/s
Iteration   9: 3888940.819 ops/s
Iteration  10: 3961161.800 ops/s
Iteration  11: 3986833.213 ops/s
Iteration  12: 4038029.248 ops/s
Iteration  13: 3952532.657 ops/s
Iteration  14: 3838382.823 ops/s
Iteration  15: 3876084.892 ops/s
Iteration  16: 3857428.603 ops/s
Iteration  17: 3804834.225 ops/s
Iteration  18: 3897182.569 ops/s
Iteration  19: 3792797.700 ops/s
Iteration  20: 3862543.614 ops/s
Iteration  21: 4110631.035 ops/s
Iteration  22: 4045375.054 ops/s
Iteration  23: 3840711.974 ops/s
Iteration  24: 3913892.815 ops/s
Iteration  25: 3832093.505 ops/s
Iteration  26: 3901463.751 ops/s
Iteration  27: 3875648.677 ops/s
Iteration  28: 3859736.943 ops/s
Iteration  29: 3830297.246 ops/s
Iteration  30: 3885713.318 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectOptional":
  3900055.845 ±(99.9%) 51571.301 ops/s [Average]
  (min, avg, max) = (3792797.700, 3900055.845, 4110631.035), stdev = 77189.501
  CI (99.9%): [3848484.545, 3951627.146] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectOptional  thrpt   30  3900055.845 ± 51571.301  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectOptional_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectOptional_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2004309.810 ops/s
# Warmup Iteration   2: 4725681.968 ops/s
# Warmup Iteration   3: 4625383.139 ops/s
# Warmup Iteration   4: 3777719.292 ops/s
# Warmup Iteration   5: 4383640.583 ops/s
# Warmup Iteration   6: 4527720.704 ops/s
# Warmup Iteration   7: 4750151.061 ops/s
# Warmup Iteration   8: 4710857.397 ops/s
# Warmup Iteration   9: 4520931.373 ops/s
# Warmup Iteration  10: 4691880.701 ops/s
# Warmup Iteration  11: 4496776.238 ops/s
# Warmup Iteration  12: 4475613.166 ops/s
# Warmup Iteration  13: 4477964.339 ops/s
# Warmup Iteration  14: 4492743.821 ops/s
# Warmup Iteration  15: 4860533.097 ops/s
# Warmup Iteration  16: 4570235.560 ops/s
# Warmup Iteration  17: 4605279.942 ops/s
# Warmup Iteration  18: 4412530.105 ops/s
# Warmup Iteration  19: 4592301.160 ops/s
# Warmup Iteration  20: 4776525.632 ops/s
# Warmup Iteration  21: 4589890.359 ops/s
# Warmup Iteration  22: 4438313.859 ops/s
# Warmup Iteration  23: 4351029.681 ops/s
# Warmup Iteration  24: 4549151.155 ops/s
# Warmup Iteration  25: 4548780.969 ops/s
# Warmup Iteration  26: 4543122.762 ops/s
# Warmup Iteration  27: 4463947.376 ops/s
# Warmup Iteration  28: 4583741.463 ops/s
# Warmup Iteration  29: 4639041.780 ops/s
# Warmup Iteration  30: 4680655.647 ops/s
Iteration   1: 4437444.976 ops/s
Iteration   2: 4400238.528 ops/s
Iteration   3: 4383316.614 ops/s
Iteration   4: 4397386.744 ops/s
Iteration   5: 4582889.867 ops/s
Iteration   6: 4642158.332 ops/s
Iteration   7: 4434055.642 ops/s
Iteration   8: 4537896.399 ops/s
Iteration   9: 4481920.862 ops/s
Iteration  10: 4644854.177 ops/s
Iteration  11: 4551857.416 ops/s
Iteration  12: 4499124.253 ops/s
Iteration  13: 4509431.087 ops/s
Iteration  14: 4610049.216 ops/s
Iteration  15: 4452651.333 ops/s
Iteration  16: 4581077.979 ops/s
Iteration  17: 4617184.129 ops/s
Iteration  18: 4560511.621 ops/s
Iteration  19: 4414128.541 ops/s
Iteration  20: 4456788.295 ops/s
Iteration  21: 4428603.859 ops/s
Iteration  22: 4229869.411 ops/s
Iteration  23: 4494520.747 ops/s
Iteration  24: 4645050.171 ops/s
Iteration  25: 4489314.781 ops/s
Iteration  26: 4501221.341 ops/s
Iteration  27: 4615826.979 ops/s
Iteration  28: 4652532.593 ops/s
Iteration  29: 4583221.982 ops/s
Iteration  30: 4476233.099 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectOptional_value":
  4510378.699 ±(99.9%) 65967.221 ops/s [Average]
  (min, avg, max) = (4229869.411, 4510378.699, 4652532.593), stdev = 98736.639
  CI (99.9%): [4444411.478, 4576345.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectOptional_value  thrpt   30  4510378.699 ± 65967.221  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2082252.106 ops/s
# Warmup Iteration   2: 4302496.597 ops/s
# Warmup Iteration   3: 4301482.607 ops/s
# Warmup Iteration   4: 3499131.382 ops/s
# Warmup Iteration   5: 4220453.384 ops/s
# Warmup Iteration   6: 4275850.849 ops/s
# Warmup Iteration   7: 4391182.099 ops/s
# Warmup Iteration   8: 4293283.383 ops/s
# Warmup Iteration   9: 4290845.300 ops/s
# Warmup Iteration  10: 4263785.598 ops/s
# Warmup Iteration  11: 4255037.591 ops/s
# Warmup Iteration  12: 4428881.046 ops/s
# Warmup Iteration  13: 4639353.299 ops/s
# Warmup Iteration  14: 4270568.720 ops/s
# Warmup Iteration  15: 4232157.467 ops/s
# Warmup Iteration  16: 4320927.674 ops/s
# Warmup Iteration  17: 4303011.254 ops/s
# Warmup Iteration  18: 4246916.504 ops/s
# Warmup Iteration  19: 4258631.630 ops/s
# Warmup Iteration  20: 4255313.971 ops/s
# Warmup Iteration  21: 4286772.987 ops/s
# Warmup Iteration  22: 4437086.781 ops/s
# Warmup Iteration  23: 4271114.730 ops/s
# Warmup Iteration  24: 4567721.294 ops/s
# Warmup Iteration  25: 4604920.985 ops/s
# Warmup Iteration  26: 4286011.227 ops/s
# Warmup Iteration  27: 4283979.303 ops/s
# Warmup Iteration  28: 4385384.014 ops/s
# Warmup Iteration  29: 4288582.064 ops/s
# Warmup Iteration  30: 4157161.242 ops/s
Iteration   1: 4254802.515 ops/s
Iteration   2: 4258083.906 ops/s
Iteration   3: 4277910.189 ops/s
Iteration   4: 4283221.769 ops/s
Iteration   5: 3987010.566 ops/s
Iteration   6: 4279043.394 ops/s
Iteration   7: 4297674.533 ops/s
Iteration   8: 4198332.518 ops/s
Iteration   9: 4276771.231 ops/s
Iteration  10: 4289730.353 ops/s
Iteration  11: 4260268.096 ops/s
Iteration  12: 4328200.139 ops/s
Iteration  13: 4345746.453 ops/s
Iteration  14: 4400565.138 ops/s
Iteration  15: 4275362.981 ops/s
Iteration  16: 4445259.512 ops/s
Iteration  17: 4258939.622 ops/s
Iteration  18: 4260930.211 ops/s
Iteration  19: 4308064.577 ops/s
Iteration  20: 4442074.937 ops/s
Iteration  21: 4379520.676 ops/s
Iteration  22: 4368003.820 ops/s
Iteration  23: 4256233.557 ops/s
Iteration  24: 4284849.699 ops/s
Iteration  25: 4326329.714 ops/s
Iteration  26: 4465446.195 ops/s
Iteration  27: 4480856.962 ops/s
Iteration  28: 4351681.407 ops/s
Iteration  29: 4333837.037 ops/s
Iteration  30: 4349345.407 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectWith":
  4310803.237 ±(99.9%) 62073.050 ops/s [Average]
  (min, avg, max) = (3987010.566, 4310803.237, 4480856.962), stdev = 92908.026
  CI (99.9%): [4248730.187, 4372876.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectWith  thrpt   30  4310803.237 ± 62073.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2263547.323 ops/s
# Warmup Iteration   2: 4236604.629 ops/s
# Warmup Iteration   3: 4235688.604 ops/s
# Warmup Iteration   4: 3503303.321 ops/s
# Warmup Iteration   5: 4252233.720 ops/s
# Warmup Iteration   6: 4305101.439 ops/s
# Warmup Iteration   7: 4395036.356 ops/s
# Warmup Iteration   8: 4502478.732 ops/s
# Warmup Iteration   9: 4271834.344 ops/s
# Warmup Iteration  10: 4291688.269 ops/s
# Warmup Iteration  11: 4480712.546 ops/s
# Warmup Iteration  12: 4283586.664 ops/s
# Warmup Iteration  13: 4443315.707 ops/s
# Warmup Iteration  14: 4240436.466 ops/s
# Warmup Iteration  15: 4258437.959 ops/s
# Warmup Iteration  16: 4415534.088 ops/s
# Warmup Iteration  17: 4380757.840 ops/s
# Warmup Iteration  18: 4322593.817 ops/s
# Warmup Iteration  19: 4448806.313 ops/s
# Warmup Iteration  20: 4247892.078 ops/s
# Warmup Iteration  21: 4242967.099 ops/s
# Warmup Iteration  22: 4189165.109 ops/s
# Warmup Iteration  23: 4224380.103 ops/s
# Warmup Iteration  24: 4348717.775 ops/s
# Warmup Iteration  25: 4566528.657 ops/s
# Warmup Iteration  26: 4198514.045 ops/s
# Warmup Iteration  27: 4485860.704 ops/s
# Warmup Iteration  28: 4624637.761 ops/s
# Warmup Iteration  29: 4616072.271 ops/s
# Warmup Iteration  30: 4347852.457 ops/s
Iteration   1: 4208641.338 ops/s
Iteration   2: 4173197.343 ops/s
Iteration   3: 4194356.592 ops/s
Iteration   4: 4292314.493 ops/s
Iteration   5: 4295934.297 ops/s
Iteration   6: 4298645.024 ops/s
Iteration   7: 4554019.500 ops/s
Iteration   8: 4252297.660 ops/s
Iteration   9: 4176098.398 ops/s
Iteration  10: 4352490.977 ops/s
Iteration  11: 4077016.653 ops/s
Iteration  12: 4480366.669 ops/s
Iteration  13: 4259016.268 ops/s
Iteration  14: 4546824.469 ops/s
Iteration  15: 4513351.618 ops/s
Iteration  16: 4351199.176 ops/s
Iteration  17: 4277216.228 ops/s
Iteration  18: 4347729.622 ops/s
Iteration  19: 4464057.659 ops/s
Iteration  20: 4276403.910 ops/s
Iteration  21: 4226915.079 ops/s
Iteration  22: 4237470.842 ops/s
Iteration  23: 4300554.271 ops/s
Iteration  24: 4474222.981 ops/s
Iteration  25: 4542846.541 ops/s
Iteration  26: 4374204.102 ops/s
Iteration  27: 4363564.960 ops/s
Iteration  28: 4239272.939 ops/s
Iteration  29: 4548558.056 ops/s
Iteration  30: 4369679.649 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectWithIfNone":
  4335615.577 ±(99.9%) 86333.240 ops/s [Average]
  (min, avg, max) = (4077016.653, 4335615.577, 4554019.500), stdev = 129219.539
  CI (99.9%): [4249282.337, 4421948.817] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  4335615.577 ± 86333.240  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2062278.406 ops/s
# Warmup Iteration   2: 4619133.071 ops/s
# Warmup Iteration   3: 4527299.334 ops/s
# Warmup Iteration   4: 4014041.036 ops/s
# Warmup Iteration   5: 4705069.418 ops/s
# Warmup Iteration   6: 4685895.076 ops/s
# Warmup Iteration   7: 4882340.359 ops/s
# Warmup Iteration   8: 4654008.216 ops/s
# Warmup Iteration   9: 4744802.849 ops/s
# Warmup Iteration  10: 4707205.517 ops/s
# Warmup Iteration  11: 4883949.549 ops/s
# Warmup Iteration  12: 4781555.654 ops/s
# Warmup Iteration  13: 4871068.161 ops/s
# Warmup Iteration  14: 4462819.899 ops/s
# Warmup Iteration  15: 4515755.924 ops/s
# Warmup Iteration  16: 4687192.497 ops/s
# Warmup Iteration  17: 4552930.691 ops/s
# Warmup Iteration  18: 4521974.263 ops/s
# Warmup Iteration  19: 4571333.200 ops/s
# Warmup Iteration  20: 4689415.933 ops/s
# Warmup Iteration  21: 4455483.526 ops/s
# Warmup Iteration  22: 4580936.977 ops/s
# Warmup Iteration  23: 4528648.712 ops/s
# Warmup Iteration  24: 4511073.760 ops/s
# Warmup Iteration  25: 4558115.942 ops/s
# Warmup Iteration  26: 4484803.547 ops/s
# Warmup Iteration  27: 4483220.581 ops/s
# Warmup Iteration  28: 4546126.121 ops/s
# Warmup Iteration  29: 4500407.509 ops/s
# Warmup Iteration  30: 4513384.389 ops/s
Iteration   1: 4472304.920 ops/s
Iteration   2: 4506331.644 ops/s
Iteration   3: 4597223.451 ops/s
Iteration   4: 4629705.616 ops/s
Iteration   5: 4651027.950 ops/s
Iteration   6: 4591946.810 ops/s
Iteration   7: 4549431.830 ops/s
Iteration   8: 4457462.515 ops/s
Iteration   9: 4524880.508 ops/s
Iteration  10: 4634162.088 ops/s
Iteration  11: 4625482.481 ops/s
Iteration  12: 4517175.971 ops/s
Iteration  13: 4500689.945 ops/s
Iteration  14: 4519723.152 ops/s
Iteration  15: 4625412.552 ops/s
Iteration  16: 4496399.401 ops/s
Iteration  17: 4590033.840 ops/s
Iteration  18: 4483054.676 ops/s
Iteration  19: 4521679.845 ops/s
Iteration  20: 4586730.576 ops/s
Iteration  21: 4565178.246 ops/s
Iteration  22: 4587807.568 ops/s
Iteration  23: 4496678.659 ops/s
Iteration  24: 4572258.969 ops/s
Iteration  25: 4551773.531 ops/s
Iteration  26: 4557977.639 ops/s
Iteration  27: 4642564.656 ops/s
Iteration  28: 4528740.542 ops/s
Iteration  29: 4686568.249 ops/s
Iteration  30: 4704902.315 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectWithOptional":
  4565843.671 ±(99.9%) 43136.540 ops/s [Average]
  (min, avg, max) = (4457462.515, 4565843.671, 4704902.315), stdev = 64564.747
  CI (99.9%): [4522707.132, 4608980.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detectWithOptional  thrpt   30  4565843.671 ± 43136.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detect_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detect_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1729972.246 ops/s
# Warmup Iteration   2: 4276973.883 ops/s
# Warmup Iteration   3: 4318237.644 ops/s
# Warmup Iteration   4: 3412563.971 ops/s
# Warmup Iteration   5: 4375276.187 ops/s
# Warmup Iteration   6: 4416391.674 ops/s
# Warmup Iteration   7: 4361979.146 ops/s
# Warmup Iteration   8: 4268096.203 ops/s
# Warmup Iteration   9: 4384226.744 ops/s
# Warmup Iteration  10: 4265574.445 ops/s
# Warmup Iteration  11: 4276841.367 ops/s
# Warmup Iteration  12: 4234593.414 ops/s
# Warmup Iteration  13: 4373136.010 ops/s
# Warmup Iteration  14: 4476007.391 ops/s
# Warmup Iteration  15: 4436028.586 ops/s
# Warmup Iteration  16: 4352923.099 ops/s
# Warmup Iteration  17: 4312939.220 ops/s
# Warmup Iteration  18: 4403357.379 ops/s
# Warmup Iteration  19: 4319687.926 ops/s
# Warmup Iteration  20: 4428971.622 ops/s
# Warmup Iteration  21: 4579661.491 ops/s
# Warmup Iteration  22: 4251220.731 ops/s
# Warmup Iteration  23: 4258185.766 ops/s
# Warmup Iteration  24: 4238524.185 ops/s
# Warmup Iteration  25: 4261066.836 ops/s
# Warmup Iteration  26: 4240457.550 ops/s
# Warmup Iteration  27: 4285980.050 ops/s
# Warmup Iteration  28: 4254140.162 ops/s
# Warmup Iteration  29: 4264844.018 ops/s
# Warmup Iteration  30: 4251977.879 ops/s
Iteration   1: 4232976.492 ops/s
Iteration   2: 4331019.246 ops/s
Iteration   3: 4479735.453 ops/s
Iteration   4: 4443490.016 ops/s
Iteration   5: 4396911.173 ops/s
Iteration   6: 4219482.593 ops/s
Iteration   7: 4220981.764 ops/s
Iteration   8: 4296466.223 ops/s
Iteration   9: 4308998.001 ops/s
Iteration  10: 4250519.707 ops/s
Iteration  11: 4282322.071 ops/s
Iteration  12: 4422022.348 ops/s
Iteration  13: 4261987.777 ops/s
Iteration  14: 4366085.213 ops/s
Iteration  15: 4393749.631 ops/s
Iteration  16: 4270820.800 ops/s
Iteration  17: 4298785.164 ops/s
Iteration  18: 4326712.635 ops/s
Iteration  19: 4273088.836 ops/s
Iteration  20: 4287984.441 ops/s
Iteration  21: 4305656.882 ops/s
Iteration  22: 4218389.027 ops/s
Iteration  23: 4295064.429 ops/s
Iteration  24: 4293200.128 ops/s
Iteration  25: 4330319.132 ops/s
Iteration  26: 4390664.877 ops/s
Iteration  27: 4503592.373 ops/s
Iteration  28: 4634139.744 ops/s
Iteration  29: 4283820.453 ops/s
Iteration  30: 4330149.099 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detect_value":
  4331637.858 ±(99.9%) 62697.980 ops/s [Average]
  (min, avg, max) = (4218389.027, 4331637.858, 4634139.744), stdev = 93843.391
  CI (99.9%): [4268939.878, 4394335.837] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_detect_value  thrpt   30  4331637.858 ± 62697.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_entrySetEqualsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_entrySetEqualsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 564917.131 ops/s
# Warmup Iteration   2: 1065746.217 ops/s
# Warmup Iteration   3: 1154279.080 ops/s
# Warmup Iteration   4: 1165646.086 ops/s
# Warmup Iteration   5: 1150733.774 ops/s
# Warmup Iteration   6: 1006593.601 ops/s
# Warmup Iteration   7: 1181652.045 ops/s
# Warmup Iteration   8: 1181073.503 ops/s
# Warmup Iteration   9: 1193697.357 ops/s
# Warmup Iteration  10: 1205051.474 ops/s
# Warmup Iteration  11: 1200121.603 ops/s
# Warmup Iteration  12: 1176875.654 ops/s
# Warmup Iteration  13: 1164502.771 ops/s
# Warmup Iteration  14: 1161847.051 ops/s
# Warmup Iteration  15: 1172347.837 ops/s
# Warmup Iteration  16: 1172679.104 ops/s
# Warmup Iteration  17: 1176473.207 ops/s
# Warmup Iteration  18: 1168392.039 ops/s
# Warmup Iteration  19: 1176477.204 ops/s
# Warmup Iteration  20: 1186129.001 ops/s
# Warmup Iteration  21: 1173455.354 ops/s
# Warmup Iteration  22: 1182964.426 ops/s
# Warmup Iteration  23: 1176851.413 ops/s
# Warmup Iteration  24: 1179361.235 ops/s
# Warmup Iteration  25: 1200509.892 ops/s
# Warmup Iteration  26: 1182310.750 ops/s
# Warmup Iteration  27: 1207519.780 ops/s
# Warmup Iteration  28: 1156059.523 ops/s
# Warmup Iteration  29: 1165356.957 ops/s
# Warmup Iteration  30: 1177746.525 ops/s
Iteration   1: 1176525.718 ops/s
Iteration   2: 1169891.797 ops/s
Iteration   3: 1136987.225 ops/s
Iteration   4: 1181582.720 ops/s
Iteration   5: 1163391.481 ops/s
Iteration   6: 1168554.309 ops/s
Iteration   7: 1164500.357 ops/s
Iteration   8: 1171517.287 ops/s
Iteration   9: 1178855.947 ops/s
Iteration  10: 1190852.539 ops/s
Iteration  11: 1199254.144 ops/s
Iteration  12: 1198725.210 ops/s
Iteration  13: 1179245.425 ops/s
Iteration  14: 1190295.513 ops/s
Iteration  15: 1182346.132 ops/s
Iteration  16: 1182919.577 ops/s
Iteration  17: 1185426.901 ops/s
Iteration  18: 1154087.173 ops/s
Iteration  19: 1204238.680 ops/s
Iteration  20: 1186883.815 ops/s
Iteration  21: 1156830.050 ops/s
Iteration  22: 1167076.135 ops/s
Iteration  23: 1158838.476 ops/s
Iteration  24: 1183422.115 ops/s
Iteration  25: 1163409.892 ops/s
Iteration  26: 1164551.542 ops/s
Iteration  27: 1163617.029 ops/s
Iteration  28: 1154665.785 ops/s
Iteration  29: 1168255.254 ops/s
Iteration  30: 1190604.801 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_entrySetEqualsAndHashCode":
  1174578.434 ±(99.9%) 10334.630 ops/s [Average]
  (min, avg, max) = (1136987.225, 1174578.434, 1204238.680), stdev = 15468.388
  CI (99.9%): [1164243.805, 1184913.064] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_entrySetEqualsAndHashCode  thrpt   30  1174578.434 ± 10334.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21042.826 ops/s
# Warmup Iteration   2: 30550.952 ops/s
# Warmup Iteration   3: 41723.986 ops/s
# Warmup Iteration   4: 41185.258 ops/s
# Warmup Iteration   5: 41355.759 ops/s
# Warmup Iteration   6: 41717.156 ops/s
# Warmup Iteration   7: 41480.928 ops/s
# Warmup Iteration   8: 42063.755 ops/s
# Warmup Iteration   9: 34552.308 ops/s
# Warmup Iteration  10: 41492.851 ops/s
# Warmup Iteration  11: 41244.009 ops/s
# Warmup Iteration  12: 41548.713 ops/s
# Warmup Iteration  13: 41935.862 ops/s
# Warmup Iteration  14: 41396.368 ops/s
# Warmup Iteration  15: 42094.852 ops/s
# Warmup Iteration  16: 41793.062 ops/s
# Warmup Iteration  17: 41330.168 ops/s
# Warmup Iteration  18: 42549.440 ops/s
# Warmup Iteration  19: 42846.918 ops/s
# Warmup Iteration  20: 43046.659 ops/s
# Warmup Iteration  21: 41327.597 ops/s
# Warmup Iteration  22: 43167.866 ops/s
# Warmup Iteration  23: 41924.057 ops/s
# Warmup Iteration  24: 41521.459 ops/s
# Warmup Iteration  25: 41237.671 ops/s
# Warmup Iteration  26: 41206.089 ops/s
# Warmup Iteration  27: 41286.837 ops/s
# Warmup Iteration  28: 40843.383 ops/s
# Warmup Iteration  29: 41975.472 ops/s
# Warmup Iteration  30: 41981.031 ops/s
Iteration   1: 41487.887 ops/s
Iteration   2: 42965.546 ops/s
Iteration   3: 43158.001 ops/s
Iteration   4: 41176.512 ops/s
Iteration   5: 41964.753 ops/s
Iteration   6: 41143.233 ops/s
Iteration   7: 41565.682 ops/s
Iteration   8: 41918.839 ops/s
Iteration   9: 41972.258 ops/s
Iteration  10: 41332.397 ops/s
Iteration  11: 41374.173 ops/s
Iteration  12: 41694.277 ops/s
Iteration  13: 41893.772 ops/s
Iteration  14: 41260.015 ops/s
Iteration  15: 42774.812 ops/s
Iteration  16: 41733.168 ops/s
Iteration  17: 41957.911 ops/s
Iteration  18: 44010.605 ops/s
Iteration  19: 42636.275 ops/s
Iteration  20: 45190.364 ops/s
Iteration  21: 42623.512 ops/s
Iteration  22: 41302.781 ops/s
Iteration  23: 45459.624 ops/s
Iteration  24: 43227.749 ops/s
Iteration  25: 41395.208 ops/s
Iteration  26: 42707.908 ops/s
Iteration  27: 41726.565 ops/s
Iteration  28: 45161.951 ops/s
Iteration  29: 42072.542 ops/s
Iteration  30: 41870.550 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_equalsAndHashCode":
  42358.629 ±(99.9%) 807.743 ops/s [Average]
  (min, avg, max) = (41143.233, 42358.629, 45459.624), stdev = 1208.991
  CI (99.9%): [41550.886, 43166.372] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt      Score     Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  42358.629 ± 807.743  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 414988.601 ops/s
# Warmup Iteration   2: 750405.192 ops/s
# Warmup Iteration   3: 848690.476 ops/s
# Warmup Iteration   4: 845018.619 ops/s
# Warmup Iteration   5: 855089.652 ops/s
# Warmup Iteration   6: 713126.295 ops/s
# Warmup Iteration   7: 862981.993 ops/s
# Warmup Iteration   8: 849270.269 ops/s
# Warmup Iteration   9: 863566.020 ops/s
# Warmup Iteration  10: 849310.986 ops/s
# Warmup Iteration  11: 839298.060 ops/s
# Warmup Iteration  12: 847889.542 ops/s
# Warmup Iteration  13: 852576.066 ops/s
# Warmup Iteration  14: 840349.890 ops/s
# Warmup Iteration  15: 846554.550 ops/s
# Warmup Iteration  16: 850459.269 ops/s
# Warmup Iteration  17: 849303.644 ops/s
# Warmup Iteration  18: 842608.605 ops/s
# Warmup Iteration  19: 845881.288 ops/s
# Warmup Iteration  20: 850653.545 ops/s
# Warmup Iteration  21: 846385.143 ops/s
# Warmup Iteration  22: 842696.658 ops/s
# Warmup Iteration  23: 846592.093 ops/s
# Warmup Iteration  24: 846643.831 ops/s
# Warmup Iteration  25: 845181.060 ops/s
# Warmup Iteration  26: 845095.885 ops/s
# Warmup Iteration  27: 851515.876 ops/s
# Warmup Iteration  28: 845396.743 ops/s
# Warmup Iteration  29: 844285.675 ops/s
# Warmup Iteration  30: 855013.050 ops/s
Iteration   1: 871744.602 ops/s
Iteration   2: 847560.237 ops/s
Iteration   3: 833358.821 ops/s
Iteration   4: 858364.308 ops/s
Iteration   5: 870859.513 ops/s
Iteration   6: 848099.746 ops/s
Iteration   7: 856145.067 ops/s
Iteration   8: 859316.906 ops/s
Iteration   9: 868146.885 ops/s
Iteration  10: 863442.613 ops/s
Iteration  11: 867998.670 ops/s
Iteration  12: 873043.737 ops/s
Iteration  13: 850938.236 ops/s
Iteration  14: 868201.800 ops/s
Iteration  15: 845882.021 ops/s
Iteration  16: 845175.482 ops/s
Iteration  17: 862555.526 ops/s
Iteration  18: 851749.158 ops/s
Iteration  19: 854700.864 ops/s
Iteration  20: 844736.094 ops/s
Iteration  21: 842610.076 ops/s
Iteration  22: 811420.954 ops/s
Iteration  23: 802537.545 ops/s
Iteration  24: 804495.160 ops/s
Iteration  25: 848724.355 ops/s
Iteration  26: 846344.870 ops/s
Iteration  27: 850230.332 ops/s
Iteration  28: 857531.643 ops/s
Iteration  29: 873524.593 ops/s
Iteration  30: 872384.093 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flatCollect":
  851727.464 ±(99.9%) 12554.479 ops/s [Average]
  (min, avg, max) = (802537.545, 851727.464, 873524.593), stdev = 18790.954
  CI (99.9%): [839172.985, 864281.942] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flatCollect  thrpt   30  851727.464 ± 12554.479  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 187052.587 ops/s
# Warmup Iteration   2: 322125.353 ops/s
# Warmup Iteration   3: 384076.942 ops/s
# Warmup Iteration   4: 379706.884 ops/s
# Warmup Iteration   5: 380279.903 ops/s
# Warmup Iteration   6: 346029.822 ops/s
# Warmup Iteration   7: 360519.343 ops/s
# Warmup Iteration   8: 387890.931 ops/s
# Warmup Iteration   9: 382607.967 ops/s
# Warmup Iteration  10: 386891.519 ops/s
# Warmup Iteration  11: 375922.566 ops/s
# Warmup Iteration  12: 387956.953 ops/s
# Warmup Iteration  13: 383366.662 ops/s
# Warmup Iteration  14: 379545.883 ops/s
# Warmup Iteration  15: 364831.987 ops/s
# Warmup Iteration  16: 374170.766 ops/s
# Warmup Iteration  17: 356618.945 ops/s
# Warmup Iteration  18: 356764.592 ops/s
# Warmup Iteration  19: 357911.704 ops/s
# Warmup Iteration  20: 377916.504 ops/s
# Warmup Iteration  21: 373957.344 ops/s
# Warmup Iteration  22: 373161.623 ops/s
# Warmup Iteration  23: 351792.440 ops/s
# Warmup Iteration  24: 355602.278 ops/s
# Warmup Iteration  25: 356156.398 ops/s
# Warmup Iteration  26: 354001.251 ops/s
# Warmup Iteration  27: 357483.471 ops/s
# Warmup Iteration  28: 377017.107 ops/s
# Warmup Iteration  29: 363739.870 ops/s
# Warmup Iteration  30: 357077.632 ops/s
Iteration   1: 357725.188 ops/s
Iteration   2: 386461.652 ops/s
Iteration   3: 377283.579 ops/s
Iteration   4: 382578.374 ops/s
Iteration   5: 367984.184 ops/s
Iteration   6: 356059.061 ops/s
Iteration   7: 359378.417 ops/s
Iteration   8: 354263.390 ops/s
Iteration   9: 358655.170 ops/s
Iteration  10: 361618.751 ops/s
Iteration  11: 364366.592 ops/s
Iteration  12: 358378.197 ops/s
Iteration  13: 370828.477 ops/s
Iteration  14: 356540.613 ops/s
Iteration  15: 354504.785 ops/s
Iteration  16: 353267.262 ops/s
Iteration  17: 353873.100 ops/s
Iteration  18: 358013.565 ops/s
Iteration  19: 354139.111 ops/s
Iteration  20: 356737.763 ops/s
Iteration  21: 355043.277 ops/s
Iteration  22: 349107.232 ops/s
Iteration  23: 350012.251 ops/s
Iteration  24: 354170.443 ops/s
Iteration  25: 347044.540 ops/s
Iteration  26: 358259.644 ops/s
Iteration  27: 357495.859 ops/s
Iteration  28: 354143.031 ops/s
Iteration  29: 361496.257 ops/s
Iteration  30: 352118.680 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flatCollectWith":
  359384.948 ±(99.9%) 6184.932 ops/s [Average]
  (min, avg, max) = (347044.540, 359384.948, 386461.652), stdev = 9257.316
  CI (99.9%): [353200.016, 365569.880] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flatCollectWith  thrpt   30  359384.948 ± 6184.932  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flatten_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flatten_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 303354.614 ops/s
# Warmup Iteration   2: 342652.733 ops/s
# Warmup Iteration   3: 496759.568 ops/s
# Warmup Iteration   4: 492308.005 ops/s
# Warmup Iteration   5: 471245.173 ops/s
# Warmup Iteration   6: 480075.786 ops/s
# Warmup Iteration   7: 485894.253 ops/s
# Warmup Iteration   8: 504411.159 ops/s
# Warmup Iteration   9: 502926.210 ops/s
# Warmup Iteration  10: 470253.474 ops/s
# Warmup Iteration  11: 429572.172 ops/s
# Warmup Iteration  12: 491058.692 ops/s
# Warmup Iteration  13: 483195.548 ops/s
# Warmup Iteration  14: 477832.404 ops/s
# Warmup Iteration  15: 475114.731 ops/s
# Warmup Iteration  16: 500649.796 ops/s
# Warmup Iteration  17: 469218.215 ops/s
# Warmup Iteration  18: 472447.279 ops/s
# Warmup Iteration  19: 476375.888 ops/s
# Warmup Iteration  20: 476714.853 ops/s
# Warmup Iteration  21: 475007.300 ops/s
# Warmup Iteration  22: 486056.547 ops/s
# Warmup Iteration  23: 473575.345 ops/s
# Warmup Iteration  24: 474138.273 ops/s
# Warmup Iteration  25: 475983.336 ops/s
# Warmup Iteration  26: 466811.174 ops/s
# Warmup Iteration  27: 507678.132 ops/s
# Warmup Iteration  28: 504650.220 ops/s
# Warmup Iteration  29: 492808.981 ops/s
# Warmup Iteration  30: 492172.463 ops/s
Iteration   1: 473675.379 ops/s
Iteration   2: 463834.819 ops/s
Iteration   3: 475726.277 ops/s
Iteration   4: 480020.144 ops/s
Iteration   5: 518532.467 ops/s
Iteration   6: 511359.868 ops/s
Iteration   7: 492413.468 ops/s
Iteration   8: 471965.525 ops/s
Iteration   9: 475305.479 ops/s
Iteration  10: 482597.681 ops/s
Iteration  11: 474611.592 ops/s
Iteration  12: 478157.969 ops/s
Iteration  13: 480672.373 ops/s
Iteration  14: 474494.908 ops/s
Iteration  15: 477785.819 ops/s
Iteration  16: 478037.367 ops/s
Iteration  17: 474805.310 ops/s
Iteration  18: 486880.015 ops/s
Iteration  19: 472519.702 ops/s
Iteration  20: 472496.339 ops/s
Iteration  21: 473632.604 ops/s
Iteration  22: 469134.460 ops/s
Iteration  23: 472656.863 ops/s
Iteration  24: 471854.897 ops/s
Iteration  25: 476100.007 ops/s
Iteration  26: 476578.654 ops/s
Iteration  27: 474576.199 ops/s
Iteration  28: 479122.989 ops/s
Iteration  29: 468768.347 ops/s
Iteration  30: 479361.136 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flatten_value":
  478589.289 ±(99.9%) 7543.088 ops/s [Average]
  (min, avg, max) = (463834.819, 478589.289, 518532.467), stdev = 11290.139
  CI (99.9%): [471046.201, 486132.376] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flatten_value  thrpt   30  478589.289 ± 7543.088  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 224825.897 ops/s
# Warmup Iteration   2: 558477.342 ops/s
# Warmup Iteration   3: 584831.173 ops/s
# Warmup Iteration   4: 507991.574 ops/s
# Warmup Iteration   5: 600727.584 ops/s
# Warmup Iteration   6: 608757.080 ops/s
# Warmup Iteration   7: 583280.030 ops/s
# Warmup Iteration   8: 577882.933 ops/s
# Warmup Iteration   9: 582482.561 ops/s
# Warmup Iteration  10: 593376.824 ops/s
# Warmup Iteration  11: 584385.693 ops/s
# Warmup Iteration  12: 584449.088 ops/s
# Warmup Iteration  13: 591558.077 ops/s
# Warmup Iteration  14: 591491.362 ops/s
# Warmup Iteration  15: 592720.056 ops/s
# Warmup Iteration  16: 590740.915 ops/s
# Warmup Iteration  17: 586973.260 ops/s
# Warmup Iteration  18: 604303.614 ops/s
# Warmup Iteration  19: 605309.938 ops/s
# Warmup Iteration  20: 607782.042 ops/s
# Warmup Iteration  21: 590401.447 ops/s
# Warmup Iteration  22: 616722.158 ops/s
# Warmup Iteration  23: 601306.750 ops/s
# Warmup Iteration  24: 594496.693 ops/s
# Warmup Iteration  25: 594878.423 ops/s
# Warmup Iteration  26: 591763.468 ops/s
# Warmup Iteration  27: 586819.036 ops/s
# Warmup Iteration  28: 596030.353 ops/s
# Warmup Iteration  29: 592235.337 ops/s
# Warmup Iteration  30: 591667.409 ops/s
Iteration   1: 586751.782 ops/s
Iteration   2: 595785.479 ops/s
Iteration   3: 603960.132 ops/s
Iteration   4: 596701.299 ops/s
Iteration   5: 596274.590 ops/s
Iteration   6: 585199.105 ops/s
Iteration   7: 589289.715 ops/s
Iteration   8: 590174.355 ops/s
Iteration   9: 596037.136 ops/s
Iteration  10: 607658.306 ops/s
Iteration  11: 609424.692 ops/s
Iteration  12: 602572.373 ops/s
Iteration  13: 605102.278 ops/s
Iteration  14: 569386.596 ops/s
Iteration  15: 592854.298 ops/s
Iteration  16: 584100.031 ops/s
Iteration  17: 591727.439 ops/s
Iteration  18: 598584.427 ops/s
Iteration  19: 584525.591 ops/s
Iteration  20: 607148.950 ops/s
Iteration  21: 620524.892 ops/s
Iteration  22: 629012.006 ops/s
Iteration  23: 616315.075 ops/s
Iteration  24: 635438.224 ops/s
Iteration  25: 624229.203 ops/s
Iteration  26: 609686.134 ops/s
Iteration  27: 601459.063 ops/s
Iteration  28: 590833.180 ops/s
Iteration  29: 603101.088 ops/s
Iteration  30: 587728.626 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flip":
  600386.202 ±(99.9%) 9745.027 ops/s [Average]
  (min, avg, max) = (569386.596, 600386.202, 635438.224), stdev = 14585.899
  CI (99.9%): [590641.175, 610131.229] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flip  thrpt   30  600386.202 ± 9745.027  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flipUniqueValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flipUniqueValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 465106.727 ops/s
# Warmup Iteration   2: 1064852.453 ops/s
# Warmup Iteration   3: 1056934.040 ops/s
# Warmup Iteration   4: 904217.916 ops/s
# Warmup Iteration   5: 1141819.878 ops/s
# Warmup Iteration   6: 1081242.789 ops/s
# Warmup Iteration   7: 1103920.010 ops/s
# Warmup Iteration   8: 1119546.736 ops/s
# Warmup Iteration   9: 1106444.706 ops/s
# Warmup Iteration  10: 1045703.650 ops/s
# Warmup Iteration  11: 1101981.122 ops/s
# Warmup Iteration  12: 1066573.624 ops/s
# Warmup Iteration  13: 1132296.026 ops/s
# Warmup Iteration  14: 1112696.386 ops/s
# Warmup Iteration  15: 1052325.060 ops/s
# Warmup Iteration  16: 1054891.141 ops/s
# Warmup Iteration  17: 1132363.962 ops/s
# Warmup Iteration  18: 1100964.291 ops/s
# Warmup Iteration  19: 1056379.530 ops/s
# Warmup Iteration  20: 1076348.604 ops/s
# Warmup Iteration  21: 1053946.458 ops/s
# Warmup Iteration  22: 1046161.098 ops/s
# Warmup Iteration  23: 1074528.621 ops/s
# Warmup Iteration  24: 1071751.404 ops/s
# Warmup Iteration  25: 1045306.251 ops/s
# Warmup Iteration  26: 1080672.368 ops/s
# Warmup Iteration  27: 1092732.778 ops/s
# Warmup Iteration  28: 1084068.547 ops/s
# Warmup Iteration  29: 1102651.951 ops/s
# Warmup Iteration  30: 1044222.848 ops/s
Iteration   1: 1049449.146 ops/s
Iteration   2: 1075262.480 ops/s
Iteration   3: 1119938.877 ops/s
Iteration   4: 1044435.659 ops/s
Iteration   5: 1106677.081 ops/s
Iteration   6: 1112448.178 ops/s
Iteration   7: 1088208.891 ops/s
Iteration   8: 1086849.935 ops/s
Iteration   9: 1065032.484 ops/s
Iteration  10: 1070698.147 ops/s
Iteration  11: 1074381.296 ops/s
Iteration  12: 1049550.491 ops/s
Iteration  13: 1061305.090 ops/s
Iteration  14: 1066367.025 ops/s
Iteration  15: 1041852.091 ops/s
Iteration  16: 1036217.433 ops/s
Iteration  17: 1054409.889 ops/s
Iteration  18: 1087745.867 ops/s
Iteration  19: 1131100.439 ops/s
Iteration  20: 1147381.231 ops/s
Iteration  21: 1141751.780 ops/s
Iteration  22: 1068161.701 ops/s
Iteration  23: 1068180.067 ops/s
Iteration  24: 1056282.706 ops/s
Iteration  25: 1059045.320 ops/s
Iteration  26: 1050769.922 ops/s
Iteration  27: 1049755.202 ops/s
Iteration  28: 1055547.820 ops/s
Iteration  29: 1073224.105 ops/s
Iteration  30: 1057210.883 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flipUniqueValues":
  1074974.708 ±(99.9%) 20007.726 ops/s [Average]
  (min, avg, max) = (1036217.433, 1074974.708, 1147381.231), stdev = 29946.625
  CI (99.9%): [1054966.982, 1094982.434] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_flipUniqueValues  thrpt   30  1074974.708 ± 20007.726  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651748.538 ops/s
# Warmup Iteration   2: 1199914.328 ops/s
# Warmup Iteration   3: 1256063.595 ops/s
# Warmup Iteration   4: 1312916.783 ops/s
# Warmup Iteration   5: 1324704.558 ops/s
# Warmup Iteration   6: 1103977.076 ops/s
# Warmup Iteration   7: 1295440.505 ops/s
# Warmup Iteration   8: 1245239.362 ops/s
# Warmup Iteration   9: 1244730.288 ops/s
# Warmup Iteration  10: 1289735.265 ops/s
# Warmup Iteration  11: 1307084.823 ops/s
# Warmup Iteration  12: 1357984.189 ops/s
# Warmup Iteration  13: 1359499.375 ops/s
# Warmup Iteration  14: 1316870.192 ops/s
# Warmup Iteration  15: 1261199.670 ops/s
# Warmup Iteration  16: 1240404.275 ops/s
# Warmup Iteration  17: 1345702.178 ops/s
# Warmup Iteration  18: 1238012.857 ops/s
# Warmup Iteration  19: 1300891.741 ops/s
# Warmup Iteration  20: 1283827.886 ops/s
# Warmup Iteration  21: 1292153.517 ops/s
# Warmup Iteration  22: 1274290.968 ops/s
# Warmup Iteration  23: 1240471.137 ops/s
# Warmup Iteration  24: 1251159.663 ops/s
# Warmup Iteration  25: 1294366.399 ops/s
# Warmup Iteration  26: 1235314.682 ops/s
# Warmup Iteration  27: 1249600.437 ops/s
# Warmup Iteration  28: 1243368.963 ops/s
# Warmup Iteration  29: 1358180.866 ops/s
# Warmup Iteration  30: 1302243.476 ops/s
Iteration   1: 1356920.341 ops/s
Iteration   2: 1364450.057 ops/s
Iteration   3: 1301363.673 ops/s
Iteration   4: 1360165.619 ops/s
Iteration   5: 1275851.981 ops/s
Iteration   6: 1243503.659 ops/s
Iteration   7: 1244037.431 ops/s
Iteration   8: 1265016.462 ops/s
Iteration   9: 1263350.383 ops/s
Iteration  10: 1364012.048 ops/s
Iteration  11: 1231467.610 ops/s
Iteration  12: 1222439.891 ops/s
Iteration  13: 1229904.154 ops/s
Iteration  14: 1232559.650 ops/s
Iteration  15: 1309599.657 ops/s
Iteration  16: 1250643.690 ops/s
Iteration  17: 1236919.868 ops/s
Iteration  18: 1217190.111 ops/s
Iteration  19: 1227599.448 ops/s
Iteration  20: 1230545.777 ops/s
Iteration  21: 1222503.922 ops/s
Iteration  22: 1261147.794 ops/s
Iteration  23: 1244111.933 ops/s
Iteration  24: 1256611.337 ops/s
Iteration  25: 1249345.610 ops/s
Iteration  26: 1236139.943 ops/s
Iteration  27: 1258623.697 ops/s
Iteration  28: 1221967.869 ops/s
Iteration  29: 1240680.991 ops/s
Iteration  30: 1232573.892 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEach":
  1261708.283 ±(99.9%) 30195.293 ops/s [Average]
  (min, avg, max) = (1217190.111, 1261708.283, 1364450.057), stdev = 45194.896
  CI (99.9%): [1231512.990, 1291903.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEach  thrpt   30  1261708.283 ± 30195.293  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1487457.803 ops/s
# Warmup Iteration   2: 3565875.990 ops/s
# Warmup Iteration   3: 3253281.106 ops/s
# Warmup Iteration   4: 3234915.192 ops/s
# Warmup Iteration   5: 3570544.818 ops/s
# Warmup Iteration   6: 3538596.871 ops/s
# Warmup Iteration   7: 3499779.917 ops/s
# Warmup Iteration   8: 3577078.819 ops/s
# Warmup Iteration   9: 3490010.457 ops/s
# Warmup Iteration  10: 3675427.384 ops/s
# Warmup Iteration  11: 3542717.879 ops/s
# Warmup Iteration  12: 3546724.348 ops/s
# Warmup Iteration  13: 3651685.936 ops/s
# Warmup Iteration  14: 3703758.588 ops/s
# Warmup Iteration  15: 3491286.285 ops/s
# Warmup Iteration  16: 3608118.256 ops/s
# Warmup Iteration  17: 3627971.298 ops/s
# Warmup Iteration  18: 3610447.882 ops/s
# Warmup Iteration  19: 3572268.229 ops/s
# Warmup Iteration  20: 3708649.283 ops/s
# Warmup Iteration  21: 3532246.143 ops/s
# Warmup Iteration  22: 3548645.832 ops/s
# Warmup Iteration  23: 3607138.285 ops/s
# Warmup Iteration  24: 3501810.306 ops/s
# Warmup Iteration  25: 3475721.215 ops/s
# Warmup Iteration  26: 3581593.014 ops/s
# Warmup Iteration  27: 3569434.758 ops/s
# Warmup Iteration  28: 3569189.027 ops/s
# Warmup Iteration  29: 3691386.669 ops/s
# Warmup Iteration  30: 3602882.094 ops/s
Iteration   1: 3473599.544 ops/s
Iteration   2: 3781685.494 ops/s
Iteration   3: 3569324.587 ops/s
Iteration   4: 3529251.373 ops/s
Iteration   5: 3547426.730 ops/s
Iteration   6: 3501012.987 ops/s
Iteration   7: 3606292.684 ops/s
Iteration   8: 3801644.727 ops/s
Iteration   9: 3853841.617 ops/s
Iteration  10: 3839516.153 ops/s
Iteration  11: 3838820.354 ops/s
Iteration  12: 3726538.800 ops/s
Iteration  13: 3590959.766 ops/s
Iteration  14: 3514581.528 ops/s
Iteration  15: 3515042.117 ops/s
Iteration  16: 3581644.065 ops/s
Iteration  17: 3851411.017 ops/s
Iteration  18: 3593114.559 ops/s
Iteration  19: 3774145.687 ops/s
Iteration  20: 3453997.260 ops/s
Iteration  21: 3530410.811 ops/s
Iteration  22: 3581918.847 ops/s
Iteration  23: 3622165.086 ops/s
Iteration  24: 3613454.944 ops/s
Iteration  25: 3715363.121 ops/s
Iteration  26: 3836184.085 ops/s
Iteration  27: 3668166.220 ops/s
Iteration  28: 3551416.655 ops/s
Iteration  29: 3671720.481 ops/s
Iteration  30: 3604515.796 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachKey":
  3644638.903 ±(99.9%) 84163.881 ops/s [Average]
  (min, avg, max) = (3453997.260, 3644638.903, 3853841.617), stdev = 125972.544
  CI (99.9%): [3560475.022, 3728802.784] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachKey  thrpt   30  3644638.903 ± 84163.881  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 376221.189 ops/s
# Warmup Iteration   2: 779850.110 ops/s
# Warmup Iteration   3: 831246.747 ops/s
# Warmup Iteration   4: 849357.694 ops/s
# Warmup Iteration   5: 699388.939 ops/s
# Warmup Iteration   6: 810937.957 ops/s
# Warmup Iteration   7: 806518.113 ops/s
# Warmup Iteration   8: 821014.866 ops/s
# Warmup Iteration   9: 833322.838 ops/s
# Warmup Iteration  10: 805544.705 ops/s
# Warmup Iteration  11: 865395.581 ops/s
# Warmup Iteration  12: 837152.258 ops/s
# Warmup Iteration  13: 854908.952 ops/s
# Warmup Iteration  14: 834887.526 ops/s
# Warmup Iteration  15: 858232.237 ops/s
# Warmup Iteration  16: 830118.963 ops/s
# Warmup Iteration  17: 855728.865 ops/s
# Warmup Iteration  18: 876120.961 ops/s
# Warmup Iteration  19: 860481.165 ops/s
# Warmup Iteration  20: 825780.415 ops/s
# Warmup Iteration  21: 875115.244 ops/s
# Warmup Iteration  22: 859953.228 ops/s
# Warmup Iteration  23: 842971.933 ops/s
# Warmup Iteration  24: 841232.943 ops/s
# Warmup Iteration  25: 839039.354 ops/s
# Warmup Iteration  26: 881037.013 ops/s
# Warmup Iteration  27: 870928.696 ops/s
# Warmup Iteration  28: 816918.559 ops/s
# Warmup Iteration  29: 802821.077 ops/s
# Warmup Iteration  30: 836486.552 ops/s
Iteration   1: 797742.642 ops/s
Iteration   2: 841100.357 ops/s
Iteration   3: 852027.290 ops/s
Iteration   4: 844940.815 ops/s
Iteration   5: 811398.853 ops/s
Iteration   6: 808109.637 ops/s
Iteration   7: 869913.339 ops/s
Iteration   8: 875557.026 ops/s
Iteration   9: 880167.929 ops/s
Iteration  10: 845624.993 ops/s
Iteration  11: 804126.095 ops/s
Iteration  12: 808239.665 ops/s
Iteration  13: 807005.096 ops/s
Iteration  14: 838021.699 ops/s
Iteration  15: 803075.217 ops/s
Iteration  16: 822351.247 ops/s
Iteration  17: 842993.993 ops/s
Iteration  18: 812884.130 ops/s
Iteration  19: 789838.938 ops/s
Iteration  20: 851722.194 ops/s
Iteration  21: 802301.289 ops/s
Iteration  22: 866684.846 ops/s
Iteration  23: 820978.930 ops/s
Iteration  24: 827597.732 ops/s
Iteration  25: 819046.455 ops/s
Iteration  26: 790344.913 ops/s
Iteration  27: 803268.748 ops/s
Iteration  28: 801745.230 ops/s
Iteration  29: 790272.975 ops/s
Iteration  30: 813891.499 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachKeyValue":
  824765.792 ±(99.9%) 17812.923 ops/s [Average]
  (min, avg, max) = (789838.938, 824765.792, 880167.929), stdev = 26661.547
  CI (99.9%): [806952.869, 842578.716] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachKeyValue  thrpt   30  824765.792 ± 17812.923  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1384054.657 ops/s
# Warmup Iteration   2: 3190098.010 ops/s
# Warmup Iteration   3: 3344544.978 ops/s
# Warmup Iteration   4: 2680160.718 ops/s
# Warmup Iteration   5: 3323893.398 ops/s
# Warmup Iteration   6: 3323320.321 ops/s
# Warmup Iteration   7: 3289950.002 ops/s
# Warmup Iteration   8: 3319978.971 ops/s
# Warmup Iteration   9: 3272679.585 ops/s
# Warmup Iteration  10: 3293428.476 ops/s
# Warmup Iteration  11: 3345961.941 ops/s
# Warmup Iteration  12: 3245919.210 ops/s
# Warmup Iteration  13: 3303240.234 ops/s
# Warmup Iteration  14: 3266007.837 ops/s
# Warmup Iteration  15: 3230444.860 ops/s
# Warmup Iteration  16: 3289228.420 ops/s
# Warmup Iteration  17: 3305044.915 ops/s
# Warmup Iteration  18: 3307138.533 ops/s
# Warmup Iteration  19: 3261582.449 ops/s
# Warmup Iteration  20: 3153181.507 ops/s
# Warmup Iteration  21: 3208020.542 ops/s
# Warmup Iteration  22: 3188777.931 ops/s
# Warmup Iteration  23: 3305384.075 ops/s
# Warmup Iteration  24: 3244241.382 ops/s
# Warmup Iteration  25: 3174414.216 ops/s
# Warmup Iteration  26: 3373896.622 ops/s
# Warmup Iteration  27: 3337578.399 ops/s
# Warmup Iteration  28: 3244381.708 ops/s
# Warmup Iteration  29: 3308605.760 ops/s
# Warmup Iteration  30: 3400041.949 ops/s
Iteration   1: 3465204.828 ops/s
Iteration   2: 3293912.764 ops/s
Iteration   3: 3249159.779 ops/s
Iteration   4: 3272419.652 ops/s
Iteration   5: 3243941.698 ops/s
Iteration   6: 3296093.143 ops/s
Iteration   7: 3283895.161 ops/s
Iteration   8: 3426820.625 ops/s
Iteration   9: 3562660.297 ops/s
Iteration  10: 3519327.757 ops/s
Iteration  11: 3263920.154 ops/s
Iteration  12: 3282981.137 ops/s
Iteration  13: 3143121.770 ops/s
Iteration  14: 3172097.321 ops/s
Iteration  15: 3322464.910 ops/s
Iteration  16: 3273062.282 ops/s
Iteration  17: 3308331.186 ops/s
Iteration  18: 3239232.487 ops/s
Iteration  19: 3330930.095 ops/s
Iteration  20: 3418980.912 ops/s
Iteration  21: 3324693.304 ops/s
Iteration  22: 3398368.414 ops/s
Iteration  23: 3415360.721 ops/s
Iteration  24: 3349119.735 ops/s
Iteration  25: 3401679.449 ops/s
Iteration  26: 3445895.578 ops/s
Iteration  27: 3395507.114 ops/s
Iteration  28: 3260383.942 ops/s
Iteration  29: 3254030.201 ops/s
Iteration  30: 3129189.410 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachValue":
  3324759.528 ±(99.9%) 69205.650 ops/s [Average]
  (min, avg, max) = (3129189.410, 3324759.528, 3562660.297), stdev = 103583.767
  CI (99.9%): [3255553.877, 3393965.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachValue  thrpt   30  3324759.528 ± 69205.650  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1295874.225 ops/s
# Warmup Iteration   2: 3219681.273 ops/s
# Warmup Iteration   3: 2882631.862 ops/s
# Warmup Iteration   4: 3034833.749 ops/s
# Warmup Iteration   5: 3177869.905 ops/s
# Warmup Iteration   6: 3234030.896 ops/s
# Warmup Iteration   7: 3185172.361 ops/s
# Warmup Iteration   8: 3120954.261 ops/s
# Warmup Iteration   9: 3165396.002 ops/s
# Warmup Iteration  10: 3136941.198 ops/s
# Warmup Iteration  11: 3246239.486 ops/s
# Warmup Iteration  12: 3157883.034 ops/s
# Warmup Iteration  13: 3116955.338 ops/s
# Warmup Iteration  14: 3093871.963 ops/s
# Warmup Iteration  15: 3178346.189 ops/s
# Warmup Iteration  16: 3182803.338 ops/s
# Warmup Iteration  17: 3260586.031 ops/s
# Warmup Iteration  18: 3259164.241 ops/s
# Warmup Iteration  19: 3180024.636 ops/s
# Warmup Iteration  20: 3122604.488 ops/s
# Warmup Iteration  21: 3216790.706 ops/s
# Warmup Iteration  22: 3181349.099 ops/s
# Warmup Iteration  23: 3136137.059 ops/s
# Warmup Iteration  24: 3325931.455 ops/s
# Warmup Iteration  25: 3252014.665 ops/s
# Warmup Iteration  26: 3233099.389 ops/s
# Warmup Iteration  27: 3273000.898 ops/s
# Warmup Iteration  28: 3263017.490 ops/s
# Warmup Iteration  29: 3133279.258 ops/s
# Warmup Iteration  30: 3292653.458 ops/s
Iteration   1: 3277893.649 ops/s
Iteration   2: 3105066.670 ops/s
Iteration   3: 3261423.000 ops/s
Iteration   4: 3281134.826 ops/s
Iteration   5: 3152446.128 ops/s
Iteration   6: 3212021.728 ops/s
Iteration   7: 3171001.631 ops/s
Iteration   8: 3234979.105 ops/s
Iteration   9: 3233736.411 ops/s
Iteration  10: 3257907.183 ops/s
Iteration  11: 3191448.651 ops/s
Iteration  12: 3111259.832 ops/s
Iteration  13: 3119499.853 ops/s
Iteration  14: 3039917.644 ops/s
Iteration  15: 3170670.988 ops/s
Iteration  16: 3151869.949 ops/s
Iteration  17: 3053692.885 ops/s
Iteration  18: 3149609.634 ops/s
Iteration  19: 3197774.321 ops/s
Iteration  20: 3146384.015 ops/s
Iteration  21: 3213101.921 ops/s
Iteration  22: 3157620.561 ops/s
Iteration  23: 3115529.084 ops/s
Iteration  24: 3200780.929 ops/s
Iteration  25: 3171065.071 ops/s
Iteration  26: 3119697.089 ops/s
Iteration  27: 3107749.287 ops/s
Iteration  28: 3090353.245 ops/s
Iteration  29: 3134815.908 ops/s
Iteration  30: 3147012.801 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachWith":
  3165915.467 ±(99.9%) 41811.887 ops/s [Average]
  (min, avg, max) = (3039917.644, 3165915.467, 3281134.826), stdev = 62582.069
  CI (99.9%): [3124103.579, 3207727.354] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachWith  thrpt   30  3165915.467 ± 41811.887  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 843207.074 ops/s
# Warmup Iteration   2: 1992815.199 ops/s
# Warmup Iteration   3: 1977290.628 ops/s
# Warmup Iteration   4: 1662924.663 ops/s
# Warmup Iteration   5: 1988755.209 ops/s
# Warmup Iteration   6: 1977808.378 ops/s
# Warmup Iteration   7: 2097035.114 ops/s
# Warmup Iteration   8: 1987040.745 ops/s
# Warmup Iteration   9: 2077212.591 ops/s
# Warmup Iteration  10: 1990177.725 ops/s
# Warmup Iteration  11: 1938091.594 ops/s
# Warmup Iteration  12: 1961603.608 ops/s
# Warmup Iteration  13: 1964629.777 ops/s
# Warmup Iteration  14: 1962011.319 ops/s
# Warmup Iteration  15: 1963689.857 ops/s
# Warmup Iteration  16: 1928421.786 ops/s
# Warmup Iteration  17: 1985500.044 ops/s
# Warmup Iteration  18: 2081980.706 ops/s
# Warmup Iteration  19: 1946989.406 ops/s
# Warmup Iteration  20: 2034277.545 ops/s
# Warmup Iteration  21: 2014427.301 ops/s
# Warmup Iteration  22: 2014898.665 ops/s
# Warmup Iteration  23: 1982573.030 ops/s
# Warmup Iteration  24: 2033949.122 ops/s
# Warmup Iteration  25: 1959084.318 ops/s
# Warmup Iteration  26: 1988624.186 ops/s
# Warmup Iteration  27: 1960976.063 ops/s
# Warmup Iteration  28: 2008308.953 ops/s
# Warmup Iteration  29: 1929053.908 ops/s
# Warmup Iteration  30: 2058144.689 ops/s
Iteration   1: 1936173.855 ops/s
Iteration   2: 1947446.763 ops/s
Iteration   3: 2010754.160 ops/s
Iteration   4: 2018540.360 ops/s
Iteration   5: 2138946.725 ops/s
Iteration   6: 1966648.211 ops/s
Iteration   7: 1937064.591 ops/s
Iteration   8: 2105050.808 ops/s
Iteration   9: 2002153.676 ops/s
Iteration  10: 1985470.892 ops/s
Iteration  11: 1980457.872 ops/s
Iteration  12: 1978065.328 ops/s
Iteration  13: 1985004.792 ops/s
Iteration  14: 1955806.445 ops/s
Iteration  15: 2012890.147 ops/s
Iteration  16: 1978670.239 ops/s
Iteration  17: 2050094.262 ops/s
Iteration  18: 2053528.795 ops/s
Iteration  19: 1972406.778 ops/s
Iteration  20: 1981703.315 ops/s
Iteration  21: 2035871.470 ops/s
Iteration  22: 2017288.079 ops/s
Iteration  23: 2025896.664 ops/s
Iteration  24: 1994340.776 ops/s
Iteration  25: 2038285.691 ops/s
Iteration  26: 2039737.904 ops/s
Iteration  27: 2071540.539 ops/s
Iteration  28: 1954728.279 ops/s
Iteration  29: 2051426.344 ops/s
Iteration  30: 1962316.347 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachWithIndex":
  2006277.004 ±(99.9%) 32457.354 ops/s [Average]
  (min, avg, max) = (1936173.855, 2006277.004, 2138946.725), stdev = 48580.644
  CI (99.9%): [1973819.649, 2038734.358] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  2006277.004 ± 32457.354  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forcePut$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forcePut

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 93261.258 ops/s
# Warmup Iteration   2: 100326.940 ops/s
# Warmup Iteration   3: 120568.023 ops/s
# Warmup Iteration   4: 128675.079 ops/s
# Warmup Iteration   5: 128896.142 ops/s
# Warmup Iteration   6: 130882.992 ops/s
# Warmup Iteration   7: 135352.433 ops/s
# Warmup Iteration   8: 127979.805 ops/s
# Warmup Iteration   9: 129737.254 ops/s
# Warmup Iteration  10: 135015.420 ops/s
# Warmup Iteration  11: 137320.633 ops/s
# Warmup Iteration  12: 129615.569 ops/s
# Warmup Iteration  13: 106486.507 ops/s
# Warmup Iteration  14: 136631.977 ops/s
# Warmup Iteration  15: 138400.803 ops/s
# Warmup Iteration  16: 140395.298 ops/s
# Warmup Iteration  17: 137348.991 ops/s
# Warmup Iteration  18: 140420.963 ops/s
# Warmup Iteration  19: 140657.813 ops/s
# Warmup Iteration  20: 128220.554 ops/s
# Warmup Iteration  21: 129877.103 ops/s
# Warmup Iteration  22: 137091.397 ops/s
# Warmup Iteration  23: 140379.267 ops/s
# Warmup Iteration  24: 133921.215 ops/s
# Warmup Iteration  25: 135469.025 ops/s
# Warmup Iteration  26: 127632.688 ops/s
# Warmup Iteration  27: 139892.236 ops/s
# Warmup Iteration  28: 140897.635 ops/s
# Warmup Iteration  29: 136728.430 ops/s
# Warmup Iteration  30: 130786.377 ops/s
Iteration   1: 134099.293 ops/s
Iteration   2: 124850.754 ops/s
Iteration   3: 128972.014 ops/s
Iteration   4: 132784.665 ops/s
Iteration   5: 132870.297 ops/s
Iteration   6: 126334.698 ops/s
Iteration   7: 126975.619 ops/s
Iteration   8: 133904.488 ops/s
Iteration   9: 134018.311 ops/s
Iteration  10: 134424.804 ops/s
Iteration  11: 140216.856 ops/s
Iteration  12: 140701.791 ops/s
Iteration  13: 140530.445 ops/s
Iteration  14: 132222.370 ops/s
Iteration  15: 126634.269 ops/s
Iteration  16: 127697.160 ops/s
Iteration  17: 127123.947 ops/s
Iteration  18: 128257.204 ops/s
Iteration  19: 129474.351 ops/s
Iteration  20: 130696.016 ops/s
Iteration  21: 126926.827 ops/s
Iteration  22: 130805.289 ops/s
Iteration  23: 139892.081 ops/s
Iteration  24: 140262.849 ops/s
Iteration  25: 140425.242 ops/s
Iteration  26: 132475.575 ops/s
Iteration  27: 125444.516 ops/s
Iteration  28: 125771.142 ops/s
Iteration  29: 127920.112 ops/s
Iteration  30: 127539.285 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forcePut":
  131675.076 ±(99.9%) 3487.740 ops/s [Average]
  (min, avg, max) = (124850.754, 131675.076, 140701.791), stdev = 5220.286
  CI (99.9%): [128187.335, 135162.816] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_forcePut  thrpt   30  131675.076 ± 3487.740  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 466516.946 ops/s
# Warmup Iteration   2: 617901.418 ops/s
# Warmup Iteration   3: 753209.576 ops/s
# Warmup Iteration   4: 756465.351 ops/s
# Warmup Iteration   5: 754463.931 ops/s
# Warmup Iteration   6: 760458.035 ops/s
# Warmup Iteration   7: 771719.145 ops/s
# Warmup Iteration   8: 623230.976 ops/s
# Warmup Iteration   9: 751445.353 ops/s
# Warmup Iteration  10: 756709.506 ops/s
# Warmup Iteration  11: 798801.933 ops/s
# Warmup Iteration  12: 758512.014 ops/s
# Warmup Iteration  13: 748047.199 ops/s
# Warmup Iteration  14: 786200.417 ops/s
# Warmup Iteration  15: 820404.870 ops/s
# Warmup Iteration  16: 781368.319 ops/s
# Warmup Iteration  17: 756433.932 ops/s
# Warmup Iteration  18: 785497.488 ops/s
# Warmup Iteration  19: 779591.381 ops/s
# Warmup Iteration  20: 778657.214 ops/s
# Warmup Iteration  21: 770775.689 ops/s
# Warmup Iteration  22: 818217.582 ops/s
# Warmup Iteration  23: 829510.210 ops/s
# Warmup Iteration  24: 767808.074 ops/s
# Warmup Iteration  25: 792730.570 ops/s
# Warmup Iteration  26: 770644.683 ops/s
# Warmup Iteration  27: 776597.805 ops/s
# Warmup Iteration  28: 769714.401 ops/s
# Warmup Iteration  29: 754501.958 ops/s
# Warmup Iteration  30: 755831.140 ops/s
Iteration   1: 769945.258 ops/s
Iteration   2: 756125.859 ops/s
Iteration   3: 761870.697 ops/s
Iteration   4: 746852.749 ops/s
Iteration   5: 787164.212 ops/s
Iteration   6: 787841.297 ops/s
Iteration   7: 769823.276 ops/s
Iteration   8: 745819.307 ops/s
Iteration   9: 788055.332 ops/s
Iteration  10: 789904.554 ops/s
Iteration  11: 795899.411 ops/s
Iteration  12: 767466.503 ops/s
Iteration  13: 778184.868 ops/s
Iteration  14: 756355.722 ops/s
Iteration  15: 790804.527 ops/s
Iteration  16: 783849.566 ops/s
Iteration  17: 768890.663 ops/s
Iteration  18: 763549.139 ops/s
Iteration  19: 754838.229 ops/s
Iteration  20: 752552.037 ops/s
Iteration  21: 775508.382 ops/s
Iteration  22: 760229.587 ops/s
Iteration  23: 760277.335 ops/s
Iteration  24: 754022.742 ops/s
Iteration  25: 773632.675 ops/s
Iteration  26: 768822.646 ops/s
Iteration  27: 754238.884 ops/s
Iteration  28: 764034.682 ops/s
Iteration  29: 764245.512 ops/s
Iteration  30: 764615.256 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_get":
  768514.030 ±(99.9%) 9297.813 ops/s [Average]
  (min, avg, max) = (745819.307, 768514.030, 795899.411), stdev = 13916.530
  CI (99.9%): [759216.217, 777811.843] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_get  thrpt   30  768514.030 ± 9297.813  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 680841.724 ops/s
# Warmup Iteration   2: 1692152.637 ops/s
# Warmup Iteration   3: 1798771.289 ops/s
# Warmup Iteration   4: 1464278.443 ops/s
# Warmup Iteration   5: 1788358.561 ops/s
# Warmup Iteration   6: 1776049.762 ops/s
# Warmup Iteration   7: 1787702.994 ops/s
# Warmup Iteration   8: 1876561.641 ops/s
# Warmup Iteration   9: 1838889.561 ops/s
# Warmup Iteration  10: 1879487.653 ops/s
# Warmup Iteration  11: 1802733.352 ops/s
# Warmup Iteration  12: 1779351.559 ops/s
# Warmup Iteration  13: 1901390.300 ops/s
# Warmup Iteration  14: 1776044.108 ops/s
# Warmup Iteration  15: 1915105.530 ops/s
# Warmup Iteration  16: 1832752.572 ops/s
# Warmup Iteration  17: 1842970.623 ops/s
# Warmup Iteration  18: 1836255.948 ops/s
# Warmup Iteration  19: 1863691.766 ops/s
# Warmup Iteration  20: 1838848.194 ops/s
# Warmup Iteration  21: 1834015.355 ops/s
# Warmup Iteration  22: 1813544.207 ops/s
# Warmup Iteration  23: 1864119.505 ops/s
# Warmup Iteration  24: 1869783.053 ops/s
# Warmup Iteration  25: 1798675.016 ops/s
# Warmup Iteration  26: 1768686.610 ops/s
# Warmup Iteration  27: 1737574.778 ops/s
# Warmup Iteration  28: 1809867.074 ops/s
# Warmup Iteration  29: 1799709.598 ops/s
# Warmup Iteration  30: 1863172.031 ops/s
Iteration   1: 1821162.883 ops/s
Iteration   2: 1758161.837 ops/s
Iteration   3: 1793881.453 ops/s
Iteration   4: 1759731.213 ops/s
Iteration   5: 1763442.988 ops/s
Iteration   6: 1763961.238 ops/s
Iteration   7: 1726302.823 ops/s
Iteration   8: 1799883.892 ops/s
Iteration   9: 1761834.954 ops/s
Iteration  10: 1777456.329 ops/s
Iteration  11: 1736917.963 ops/s
Iteration  12: 1725150.340 ops/s
Iteration  13: 1798474.636 ops/s
Iteration  14: 1778842.543 ops/s
Iteration  15: 1802275.936 ops/s
Iteration  16: 1765974.488 ops/s
Iteration  17: 1765013.235 ops/s
Iteration  18: 1766646.691 ops/s
Iteration  19: 1761931.694 ops/s
Iteration  20: 1770781.603 ops/s
Iteration  21: 1724154.936 ops/s
Iteration  22: 1788704.113 ops/s
Iteration  23: 1752208.686 ops/s
Iteration  24: 1765866.319 ops/s
Iteration  25: 1792428.406 ops/s
Iteration  26: 1929285.979 ops/s
Iteration  27: 1788628.649 ops/s
Iteration  28: 1777330.791 ops/s
Iteration  29: 1767061.446 ops/s
Iteration  30: 1778884.535 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getFirst":
  1775412.753 ±(99.9%) 24770.291 ops/s [Average]
  (min, avg, max) = (1724154.936, 1775412.753, 1929285.979), stdev = 37075.008
  CI (99.9%): [1750642.463, 1800183.044] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getFirst  thrpt   30  1775412.753 ± 24770.291  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsent$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsent

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1543781.533 ops/s
# Warmup Iteration   2: 2944472.200 ops/s
# Warmup Iteration   3: 3332925.944 ops/s
# Warmup Iteration   4: 3265383.272 ops/s
# Warmup Iteration   5: 2679139.590 ops/s
# Warmup Iteration   6: 3261674.310 ops/s
# Warmup Iteration   7: 3345405.486 ops/s
# Warmup Iteration   8: 3389461.864 ops/s
# Warmup Iteration   9: 3308558.326 ops/s
# Warmup Iteration  10: 3345412.667 ops/s
# Warmup Iteration  11: 3210494.390 ops/s
# Warmup Iteration  12: 3357702.106 ops/s
# Warmup Iteration  13: 3278330.067 ops/s
# Warmup Iteration  14: 3251193.454 ops/s
# Warmup Iteration  15: 3269422.811 ops/s
# Warmup Iteration  16: 3263913.680 ops/s
# Warmup Iteration  17: 3296670.706 ops/s
# Warmup Iteration  18: 3197946.216 ops/s
# Warmup Iteration  19: 3332602.397 ops/s
# Warmup Iteration  20: 3303178.335 ops/s
# Warmup Iteration  21: 3351415.159 ops/s
# Warmup Iteration  22: 3329856.732 ops/s
# Warmup Iteration  23: 3445908.960 ops/s
# Warmup Iteration  24: 3305820.776 ops/s
# Warmup Iteration  25: 3231505.176 ops/s
# Warmup Iteration  26: 3393093.129 ops/s
# Warmup Iteration  27: 3381060.700 ops/s
# Warmup Iteration  28: 3237821.299 ops/s
# Warmup Iteration  29: 3337501.188 ops/s
# Warmup Iteration  30: 3273720.251 ops/s
Iteration   1: 3379062.085 ops/s
Iteration   2: 3364773.626 ops/s
Iteration   3: 3280874.023 ops/s
Iteration   4: 3299527.771 ops/s
Iteration   5: 3245117.414 ops/s
Iteration   6: 3212408.953 ops/s
Iteration   7: 3386803.652 ops/s
Iteration   8: 3262098.319 ops/s
Iteration   9: 3361418.677 ops/s
Iteration  10: 3369720.175 ops/s
Iteration  11: 3362434.412 ops/s
Iteration  12: 3295133.171 ops/s
Iteration  13: 3258634.138 ops/s
Iteration  14: 3289870.436 ops/s
Iteration  15: 3362902.744 ops/s
Iteration  16: 3233758.872 ops/s
Iteration  17: 3245333.363 ops/s
Iteration  18: 3364708.006 ops/s
Iteration  19: 3265055.133 ops/s
Iteration  20: 3269676.268 ops/s
Iteration  21: 3177884.895 ops/s
Iteration  22: 3280017.917 ops/s
Iteration  23: 3218981.595 ops/s
Iteration  24: 3383153.992 ops/s
Iteration  25: 3418198.162 ops/s
Iteration  26: 3359409.742 ops/s
Iteration  27: 3252161.331 ops/s
Iteration  28: 3269132.136 ops/s
Iteration  29: 3321718.145 ops/s
Iteration  30: 3274123.562 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsent":
  3302136.424 ±(99.9%) 41711.399 ops/s [Average]
  (min, avg, max) = (3177884.895, 3302136.424, 3418198.162), stdev = 62431.662
  CI (99.9%): [3260425.025, 3343847.822] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsent  thrpt   30  3302136.424 ± 41711.399  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPut$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPut

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1449033.184 ops/s
# Warmup Iteration   2: 2869935.980 ops/s
# Warmup Iteration   3: 3190149.770 ops/s
# Warmup Iteration   4: 3151333.519 ops/s
# Warmup Iteration   5: 2546940.772 ops/s
# Warmup Iteration   6: 3119285.086 ops/s
# Warmup Iteration   7: 3114249.249 ops/s
# Warmup Iteration   8: 3130510.400 ops/s
# Warmup Iteration   9: 3219158.265 ops/s
# Warmup Iteration  10: 3080601.852 ops/s
# Warmup Iteration  11: 3151177.696 ops/s
# Warmup Iteration  12: 3080688.553 ops/s
# Warmup Iteration  13: 3083332.246 ops/s
# Warmup Iteration  14: 3098390.656 ops/s
# Warmup Iteration  15: 3160997.886 ops/s
# Warmup Iteration  16: 3245488.708 ops/s
# Warmup Iteration  17: 3074232.468 ops/s
# Warmup Iteration  18: 3198331.448 ops/s
# Warmup Iteration  19: 3098553.249 ops/s
# Warmup Iteration  20: 3068135.080 ops/s
# Warmup Iteration  21: 3084686.828 ops/s
# Warmup Iteration  22: 3110249.664 ops/s
# Warmup Iteration  23: 3109979.262 ops/s
# Warmup Iteration  24: 3072111.402 ops/s
# Warmup Iteration  25: 3112820.564 ops/s
# Warmup Iteration  26: 3089532.836 ops/s
# Warmup Iteration  27: 3062651.641 ops/s
# Warmup Iteration  28: 3074078.475 ops/s
# Warmup Iteration  29: 3135173.067 ops/s
# Warmup Iteration  30: 3084401.885 ops/s
Iteration   1: 3091355.330 ops/s
Iteration   2: 3083044.412 ops/s
Iteration   3: 3060015.719 ops/s
Iteration   4: 3069894.377 ops/s
Iteration   5: 3139965.449 ops/s
Iteration   6: 3093501.869 ops/s
Iteration   7: 3077641.740 ops/s
Iteration   8: 3124185.836 ops/s
Iteration   9: 3048934.124 ops/s
Iteration  10: 3114148.579 ops/s
Iteration  11: 3094593.059 ops/s
Iteration  12: 3046394.508 ops/s
Iteration  13: 3137199.934 ops/s
Iteration  14: 3225439.921 ops/s
Iteration  15: 3105174.019 ops/s
Iteration  16: 3091651.860 ops/s
Iteration  17: 3051685.855 ops/s
Iteration  18: 3121435.687 ops/s
Iteration  19: 3067722.572 ops/s
Iteration  20: 3093015.268 ops/s
Iteration  21: 3071479.699 ops/s
Iteration  22: 3042601.901 ops/s
Iteration  23: 3099256.528 ops/s
Iteration  24: 3065324.946 ops/s
Iteration  25: 3060956.501 ops/s
Iteration  26: 3040916.991 ops/s
Iteration  27: 3109621.920 ops/s
Iteration  28: 3284918.945 ops/s
Iteration  29: 3062955.677 ops/s
Iteration  30: 3116578.347 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPut":
  3096387.052 ±(99.9%) 34709.807 ops/s [Average]
  (min, avg, max) = (3040916.991, 3096387.052, 3284918.945), stdev = 51952.009
  CI (99.9%): [3061677.246, 3131096.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPut  thrpt   30  3096387.052 ± 34709.807  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1215900.519 ops/s
# Warmup Iteration   2: 1696075.456 ops/s
# Warmup Iteration   3: 2076683.241 ops/s
# Warmup Iteration   4: 2109544.559 ops/s
# Warmup Iteration   5: 2025478.534 ops/s
# Warmup Iteration   6: 2040922.224 ops/s
# Warmup Iteration   7: 1728910.325 ops/s
# Warmup Iteration   8: 1974693.683 ops/s
# Warmup Iteration   9: 2116320.205 ops/s
# Warmup Iteration  10: 2012817.444 ops/s
# Warmup Iteration  11: 1993961.947 ops/s
# Warmup Iteration  12: 2034507.716 ops/s
# Warmup Iteration  13: 2018850.545 ops/s
# Warmup Iteration  14: 2069668.623 ops/s
# Warmup Iteration  15: 2015460.834 ops/s
# Warmup Iteration  16: 2002781.369 ops/s
# Warmup Iteration  17: 2060450.165 ops/s
# Warmup Iteration  18: 2070466.634 ops/s
# Warmup Iteration  19: 2016680.217 ops/s
# Warmup Iteration  20: 1996778.226 ops/s
# Warmup Iteration  21: 2032507.017 ops/s
# Warmup Iteration  22: 2044115.256 ops/s
# Warmup Iteration  23: 1991710.812 ops/s
# Warmup Iteration  24: 2008531.824 ops/s
# Warmup Iteration  25: 2192471.328 ops/s
# Warmup Iteration  26: 2007194.349 ops/s
# Warmup Iteration  27: 2141575.449 ops/s
# Warmup Iteration  28: 2095690.079 ops/s
# Warmup Iteration  29: 2070023.458 ops/s
# Warmup Iteration  30: 2053306.736 ops/s
Iteration   1: 2194914.585 ops/s
Iteration   2: 2038482.477 ops/s
Iteration   3: 2070919.458 ops/s
Iteration   4: 2192423.324 ops/s
Iteration   5: 2116833.112 ops/s
Iteration   6: 2097016.212 ops/s
Iteration   7: 2124637.482 ops/s
Iteration   8: 2164345.585 ops/s
Iteration   9: 2150746.011 ops/s
Iteration  10: 2101717.255 ops/s
Iteration  11: 2113662.486 ops/s
Iteration  12: 2101236.965 ops/s
Iteration  13: 2101166.752 ops/s
Iteration  14: 2055249.972 ops/s
Iteration  15: 2091485.867 ops/s
Iteration  16: 2063152.555 ops/s
Iteration  17: 2148202.654 ops/s
Iteration  18: 2131852.114 ops/s
Iteration  19: 2204447.525 ops/s
Iteration  20: 2210001.353 ops/s
Iteration  21: 2207685.216 ops/s
Iteration  22: 2201324.306 ops/s
Iteration  23: 1999266.052 ops/s
Iteration  24: 2005053.569 ops/s
Iteration  25: 2017327.898 ops/s
Iteration  26: 2055266.404 ops/s
Iteration  27: 2215734.545 ops/s
Iteration  28: 2200067.012 ops/s
Iteration  29: 2220847.886 ops/s
Iteration  30: 2190840.120 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutValue":
  2126196.892 ±(99.9%) 45636.021 ops/s [Average]
  (min, avg, max) = (1999266.052, 2126196.892, 2220847.886), stdev = 68305.853
  CI (99.9%): [2080560.871, 2171832.913] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutValue  thrpt   30  2126196.892 ± 45636.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1475936.184 ops/s
# Warmup Iteration   2: 3045320.857 ops/s
# Warmup Iteration   3: 3190984.008 ops/s
# Warmup Iteration   4: 3171893.902 ops/s
# Warmup Iteration   5: 2682793.757 ops/s
# Warmup Iteration   6: 3328969.277 ops/s
# Warmup Iteration   7: 3210869.645 ops/s
# Warmup Iteration   8: 3156915.683 ops/s
# Warmup Iteration   9: 3369621.553 ops/s
# Warmup Iteration  10: 3256512.496 ops/s
# Warmup Iteration  11: 3410852.858 ops/s
# Warmup Iteration  12: 3238886.305 ops/s
# Warmup Iteration  13: 3247719.330 ops/s
# Warmup Iteration  14: 3411371.904 ops/s
# Warmup Iteration  15: 3408349.168 ops/s
# Warmup Iteration  16: 3201251.105 ops/s
# Warmup Iteration  17: 3118437.248 ops/s
# Warmup Iteration  18: 3310048.064 ops/s
# Warmup Iteration  19: 3415328.779 ops/s
# Warmup Iteration  20: 3250914.909 ops/s
# Warmup Iteration  21: 3297380.531 ops/s
# Warmup Iteration  22: 3357517.605 ops/s
# Warmup Iteration  23: 3399748.319 ops/s
# Warmup Iteration  24: 3356511.586 ops/s
# Warmup Iteration  25: 3399137.410 ops/s
# Warmup Iteration  26: 3393687.703 ops/s
# Warmup Iteration  27: 3411250.435 ops/s
# Warmup Iteration  28: 3356138.079 ops/s
# Warmup Iteration  29: 3421032.699 ops/s
# Warmup Iteration  30: 3408784.459 ops/s
Iteration   1: 3418744.216 ops/s
Iteration   2: 3426398.575 ops/s
Iteration   3: 3425610.221 ops/s
Iteration   4: 3405267.856 ops/s
Iteration   5: 3411900.871 ops/s
Iteration   6: 3399180.149 ops/s
Iteration   7: 3435514.477 ops/s
Iteration   8: 3372425.480 ops/s
Iteration   9: 3406815.459 ops/s
Iteration  10: 3424925.007 ops/s
Iteration  11: 3424245.346 ops/s
Iteration  12: 3415581.275 ops/s
Iteration  13: 3344333.863 ops/s
Iteration  14: 3237244.468 ops/s
Iteration  15: 3334028.586 ops/s
Iteration  16: 3325094.298 ops/s
Iteration  17: 3331379.471 ops/s
Iteration  18: 3387769.412 ops/s
Iteration  19: 3388409.860 ops/s
Iteration  20: 3424939.614 ops/s
Iteration  21: 3383555.313 ops/s
Iteration  22: 3313978.089 ops/s
Iteration  23: 3345799.991 ops/s
Iteration  24: 3377888.635 ops/s
Iteration  25: 3402585.028 ops/s
Iteration  26: 3300085.524 ops/s
Iteration  27: 3325439.670 ops/s
Iteration  28: 3117287.101 ops/s
Iteration  29: 3216473.256 ops/s
Iteration  30: 3240289.758 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutWith":
  3358773.029 ±(99.9%) 50446.249 ops/s [Average]
  (min, avg, max) = (3117287.101, 3358773.029, 3435514.477), stdev = 75505.576
  CI (99.9%): [3308326.780, 3409219.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutWith  thrpt   30  3358773.029 ± 50446.249  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutWithKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutWithKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1550905.734 ops/s
# Warmup Iteration   2: 3171699.332 ops/s
# Warmup Iteration   3: 3325401.716 ops/s
# Warmup Iteration   4: 3255774.384 ops/s
# Warmup Iteration   5: 2613865.168 ops/s
# Warmup Iteration   6: 3274558.258 ops/s
# Warmup Iteration   7: 3321247.274 ops/s
# Warmup Iteration   8: 3224364.520 ops/s
# Warmup Iteration   9: 3376780.554 ops/s
# Warmup Iteration  10: 3417817.996 ops/s
# Warmup Iteration  11: 3423758.749 ops/s
# Warmup Iteration  12: 3458804.195 ops/s
# Warmup Iteration  13: 3474693.630 ops/s
# Warmup Iteration  14: 3449599.071 ops/s
# Warmup Iteration  15: 3459452.367 ops/s
# Warmup Iteration  16: 3463682.774 ops/s
# Warmup Iteration  17: 3473095.768 ops/s
# Warmup Iteration  18: 3472461.158 ops/s
# Warmup Iteration  19: 3464800.046 ops/s
# Warmup Iteration  20: 3453568.727 ops/s
# Warmup Iteration  21: 3452842.296 ops/s
# Warmup Iteration  22: 3459517.771 ops/s
# Warmup Iteration  23: 3451966.862 ops/s
# Warmup Iteration  24: 3431840.646 ops/s
# Warmup Iteration  25: 3367640.037 ops/s
# Warmup Iteration  26: 3352313.352 ops/s
# Warmup Iteration  27: 3440678.963 ops/s
# Warmup Iteration  28: 3386044.055 ops/s
# Warmup Iteration  29: 3451429.526 ops/s
# Warmup Iteration  30: 3402873.459 ops/s
Iteration   1: 3465933.165 ops/s
Iteration   2: 3453391.547 ops/s
Iteration   3: 3465540.205 ops/s
Iteration   4: 3453322.798 ops/s
Iteration   5: 3435912.801 ops/s
Iteration   6: 3441731.160 ops/s
Iteration   7: 3465715.051 ops/s
Iteration   8: 3407742.318 ops/s
Iteration   9: 3435277.980 ops/s
Iteration  10: 3385750.700 ops/s
Iteration  11: 3442532.460 ops/s
Iteration  12: 3410868.088 ops/s
Iteration  13: 3446425.709 ops/s
Iteration  14: 3462002.807 ops/s
Iteration  15: 3455705.674 ops/s
Iteration  16: 3479556.377 ops/s
Iteration  17: 3465492.373 ops/s
Iteration  18: 3464122.876 ops/s
Iteration  19: 3468762.892 ops/s
Iteration  20: 3461610.858 ops/s
Iteration  21: 3463748.574 ops/s
Iteration  22: 3429358.251 ops/s
Iteration  23: 3440355.385 ops/s
Iteration  24: 3445166.919 ops/s
Iteration  25: 3472190.996 ops/s
Iteration  26: 3474909.174 ops/s
Iteration  27: 3478243.432 ops/s
Iteration  28: 3392798.175 ops/s
Iteration  29: 3463655.553 ops/s
Iteration  30: 3448317.443 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutWithKey":
  3449204.725 ±(99.9%) 16091.701 ops/s [Average]
  (min, avg, max) = (3385750.700, 3449204.725, 3479556.377), stdev = 24085.302
  CI (99.9%): [3433113.024, 3465296.425] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutWithKey  thrpt   30  3449204.725 ± 16091.701  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 488451.672 ops/s
# Warmup Iteration   2: 552529.550 ops/s
# Warmup Iteration   3: 720299.196 ops/s
# Warmup Iteration   4: 720031.416 ops/s
# Warmup Iteration   5: 720422.778 ops/s
# Warmup Iteration   6: 726705.537 ops/s
# Warmup Iteration   7: 720279.176 ops/s
# Warmup Iteration   8: 712264.560 ops/s
# Warmup Iteration   9: 685408.877 ops/s
# Warmup Iteration  10: 600306.054 ops/s
# Warmup Iteration  11: 722996.299 ops/s
# Warmup Iteration  12: 723466.277 ops/s
# Warmup Iteration  13: 722819.070 ops/s
# Warmup Iteration  14: 688582.235 ops/s
# Warmup Iteration  15: 727756.748 ops/s
# Warmup Iteration  16: 728173.517 ops/s
# Warmup Iteration  17: 752379.158 ops/s
# Warmup Iteration  18: 755041.558 ops/s
# Warmup Iteration  19: 758836.069 ops/s
# Warmup Iteration  20: 755196.913 ops/s
# Warmup Iteration  21: 757654.540 ops/s
# Warmup Iteration  22: 757886.877 ops/s
# Warmup Iteration  23: 750461.481 ops/s
# Warmup Iteration  24: 758776.571 ops/s
# Warmup Iteration  25: 757133.195 ops/s
# Warmup Iteration  26: 756134.749 ops/s
# Warmup Iteration  27: 741550.877 ops/s
# Warmup Iteration  28: 744568.960 ops/s
# Warmup Iteration  29: 702712.189 ops/s
# Warmup Iteration  30: 738662.348 ops/s
Iteration   1: 695926.542 ops/s
Iteration   2: 716691.317 ops/s
Iteration   3: 721115.925 ops/s
Iteration   4: 685163.327 ops/s
Iteration   5: 703186.617 ops/s
Iteration   6: 711504.069 ops/s
Iteration   7: 729392.253 ops/s
Iteration   8: 716962.613 ops/s
Iteration   9: 689146.675 ops/s
Iteration  10: 697467.441 ops/s
Iteration  11: 675176.908 ops/s
Iteration  12: 677374.630 ops/s
Iteration  13: 685179.437 ops/s
Iteration  14: 683145.194 ops/s
Iteration  15: 713124.739 ops/s
Iteration  16: 686293.631 ops/s
Iteration  17: 676159.400 ops/s
Iteration  18: 672399.721 ops/s
Iteration  19: 691031.728 ops/s
Iteration  20: 686833.877 ops/s
Iteration  21: 692848.572 ops/s
Iteration  22: 683352.294 ops/s
Iteration  23: 692828.010 ops/s
Iteration  24: 705849.813 ops/s
Iteration  25: 748286.085 ops/s
Iteration  26: 735173.731 ops/s
Iteration  27: 712573.280 ops/s
Iteration  28: 730130.657 ops/s
Iteration  29: 736487.542 ops/s
Iteration  30: 752534.506 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws":
  703444.684 ±(99.9%) 15062.224 ops/s [Average]
  (min, avg, max) = (672399.721, 703444.684, 752534.506), stdev = 22544.430
  CI (99.9%): [688382.460, 718506.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws  thrpt   30  703444.684 ± 15062.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPut_block_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPut_block_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 465869.484 ops/s
# Warmup Iteration   2: 508785.556 ops/s
# Warmup Iteration   3: 662885.388 ops/s
# Warmup Iteration   4: 671207.315 ops/s
# Warmup Iteration   5: 655542.108 ops/s
# Warmup Iteration   6: 672396.361 ops/s
# Warmup Iteration   7: 612535.248 ops/s
# Warmup Iteration   8: 636560.598 ops/s
# Warmup Iteration   9: 645187.367 ops/s
# Warmup Iteration  10: 610322.474 ops/s
# Warmup Iteration  11: 502135.449 ops/s
# Warmup Iteration  12: 618197.807 ops/s
# Warmup Iteration  13: 612928.960 ops/s
# Warmup Iteration  14: 633523.587 ops/s
# Warmup Iteration  15: 601563.761 ops/s
# Warmup Iteration  16: 628055.825 ops/s
# Warmup Iteration  17: 669782.905 ops/s
# Warmup Iteration  18: 657580.639 ops/s
# Warmup Iteration  19: 678330.516 ops/s
# Warmup Iteration  20: 674503.011 ops/s
# Warmup Iteration  21: 675998.364 ops/s
# Warmup Iteration  22: 657376.965 ops/s
# Warmup Iteration  23: 663429.272 ops/s
# Warmup Iteration  24: 663058.014 ops/s
# Warmup Iteration  25: 671450.775 ops/s
# Warmup Iteration  26: 657450.000 ops/s
# Warmup Iteration  27: 653616.831 ops/s
# Warmup Iteration  28: 630817.644 ops/s
# Warmup Iteration  29: 662747.721 ops/s
# Warmup Iteration  30: 664889.934 ops/s
Iteration   1: 700714.860 ops/s
Iteration   2: 654922.995 ops/s
Iteration   3: 639220.356 ops/s
Iteration   4: 655182.120 ops/s
Iteration   5: 640267.190 ops/s
Iteration   6: 634203.988 ops/s
Iteration   7: 643367.727 ops/s
Iteration   8: 647480.002 ops/s
Iteration   9: 641338.347 ops/s
Iteration  10: 635493.830 ops/s
Iteration  11: 641876.420 ops/s
Iteration  12: 642061.799 ops/s
Iteration  13: 638681.573 ops/s
Iteration  14: 631760.875 ops/s
Iteration  15: 644704.521 ops/s
Iteration  16: 636670.025 ops/s
Iteration  17: 638428.356 ops/s
Iteration  18: 639010.822 ops/s
Iteration  19: 639415.484 ops/s
Iteration  20: 642140.932 ops/s
Iteration  21: 630959.873 ops/s
Iteration  22: 633592.664 ops/s
Iteration  23: 642498.265 ops/s
Iteration  24: 635072.144 ops/s
Iteration  25: 630295.089 ops/s
Iteration  26: 638423.391 ops/s
Iteration  27: 633462.534 ops/s
Iteration  28: 647596.298 ops/s
Iteration  29: 634765.277 ops/s
Iteration  30: 636350.589 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPut_block_throws":
  641665.278 ±(99.9%) 8496.517 ops/s [Average]
  (min, avg, max) = (630295.089, 641665.278, 700714.860), stdev = 12717.188
  CI (99.9%): [633168.761, 650161.795] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentPut_block_throws  thrpt   30  641665.278 ± 8496.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1498021.644 ops/s
# Warmup Iteration   2: 3031659.722 ops/s
# Warmup Iteration   3: 3255823.904 ops/s
# Warmup Iteration   4: 3294531.240 ops/s
# Warmup Iteration   5: 2616814.304 ops/s
# Warmup Iteration   6: 3174557.516 ops/s
# Warmup Iteration   7: 3180524.978 ops/s
# Warmup Iteration   8: 3167328.958 ops/s
# Warmup Iteration   9: 3329654.706 ops/s
# Warmup Iteration  10: 3189222.002 ops/s
# Warmup Iteration  11: 3322396.573 ops/s
# Warmup Iteration  12: 3306230.070 ops/s
# Warmup Iteration  13: 3218194.058 ops/s
# Warmup Iteration  14: 3262897.441 ops/s
# Warmup Iteration  15: 3304790.153 ops/s
# Warmup Iteration  16: 3332684.547 ops/s
# Warmup Iteration  17: 3240637.133 ops/s
# Warmup Iteration  18: 3245189.531 ops/s
# Warmup Iteration  19: 3290765.769 ops/s
# Warmup Iteration  20: 3197850.563 ops/s
# Warmup Iteration  21: 3229266.480 ops/s
# Warmup Iteration  22: 3232325.711 ops/s
# Warmup Iteration  23: 3200478.919 ops/s
# Warmup Iteration  24: 3312465.571 ops/s
# Warmup Iteration  25: 3244673.246 ops/s
# Warmup Iteration  26: 3312114.921 ops/s
# Warmup Iteration  27: 3234945.535 ops/s
# Warmup Iteration  28: 3211316.205 ops/s
# Warmup Iteration  29: 3262723.718 ops/s
# Warmup Iteration  30: 3277580.717 ops/s
Iteration   1: 3228481.869 ops/s
Iteration   2: 3281354.381 ops/s
Iteration   3: 3211790.000 ops/s
Iteration   4: 3211260.443 ops/s
Iteration   5: 3221672.282 ops/s
Iteration   6: 3231740.993 ops/s
Iteration   7: 3296036.610 ops/s
Iteration   8: 3248012.556 ops/s
Iteration   9: 3183105.001 ops/s
Iteration  10: 3237694.644 ops/s
Iteration  11: 3172353.391 ops/s
Iteration  12: 3236244.790 ops/s
Iteration  13: 3225714.702 ops/s
Iteration  14: 3238980.783 ops/s
Iteration  15: 3243104.913 ops/s
Iteration  16: 3203870.858 ops/s
Iteration  17: 3147235.252 ops/s
Iteration  18: 3246065.070 ops/s
Iteration  19: 3232492.650 ops/s
Iteration  20: 3234916.735 ops/s
Iteration  21: 3216561.060 ops/s
Iteration  22: 3384487.718 ops/s
Iteration  23: 3312823.773 ops/s
Iteration  24: 3215854.150 ops/s
Iteration  25: 3232624.253 ops/s
Iteration  26: 3160942.984 ops/s
Iteration  27: 3331455.907 ops/s
Iteration  28: 3378876.697 ops/s
Iteration  29: 3359443.650 ops/s
Iteration  30: 3268624.230 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentWith":
  3246460.745 ±(99.9%) 39282.253 ops/s [Average]
  (min, avg, max) = (3147235.252, 3246460.745, 3384487.718), stdev = 58795.831
  CI (99.9%): [3207178.492, 3285742.998] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsentWith  thrpt   30  3246460.745 ± 39282.253  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsent_function$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsent_function

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1464843.344 ops/s
# Warmup Iteration   2: 3037543.354 ops/s
# Warmup Iteration   3: 3353089.933 ops/s
# Warmup Iteration   4: 3388322.704 ops/s
# Warmup Iteration   5: 2655833.379 ops/s
# Warmup Iteration   6: 3304950.770 ops/s
# Warmup Iteration   7: 3277737.668 ops/s
# Warmup Iteration   8: 3291063.631 ops/s
# Warmup Iteration   9: 3404745.365 ops/s
# Warmup Iteration  10: 3435155.405 ops/s
# Warmup Iteration  11: 3284576.889 ops/s
# Warmup Iteration  12: 3245870.825 ops/s
# Warmup Iteration  13: 3257215.705 ops/s
# Warmup Iteration  14: 3261015.647 ops/s
# Warmup Iteration  15: 3294601.314 ops/s
# Warmup Iteration  16: 3419723.635 ops/s
# Warmup Iteration  17: 3350788.141 ops/s
# Warmup Iteration  18: 3334433.393 ops/s
# Warmup Iteration  19: 3320618.821 ops/s
# Warmup Iteration  20: 3427188.203 ops/s
# Warmup Iteration  21: 3269089.167 ops/s
# Warmup Iteration  22: 3272332.095 ops/s
# Warmup Iteration  23: 3349403.621 ops/s
# Warmup Iteration  24: 3459914.807 ops/s
# Warmup Iteration  25: 3317020.597 ops/s
# Warmup Iteration  26: 3337912.788 ops/s
# Warmup Iteration  27: 3302476.256 ops/s
# Warmup Iteration  28: 3426483.680 ops/s
# Warmup Iteration  29: 3364242.649 ops/s
# Warmup Iteration  30: 3271112.613 ops/s
Iteration   1: 3324495.679 ops/s
Iteration   2: 3354375.560 ops/s
Iteration   3: 3280174.087 ops/s
Iteration   4: 3224793.223 ops/s
Iteration   5: 3300130.414 ops/s
Iteration   6: 3259703.636 ops/s
Iteration   7: 3294396.820 ops/s
Iteration   8: 3258207.533 ops/s
Iteration   9: 3245997.703 ops/s
Iteration  10: 3190149.245 ops/s
Iteration  11: 3256841.846 ops/s
Iteration  12: 3239460.800 ops/s
Iteration  13: 3382592.576 ops/s
Iteration  14: 3245802.858 ops/s
Iteration  15: 3381303.319 ops/s
Iteration  16: 3469885.450 ops/s
Iteration  17: 3401765.128 ops/s
Iteration  18: 3378287.321 ops/s
Iteration  19: 3416743.240 ops/s
Iteration  20: 3464540.274 ops/s
Iteration  21: 3339671.390 ops/s
Iteration  22: 3382393.640 ops/s
Iteration  23: 3410297.264 ops/s
Iteration  24: 3375853.116 ops/s
Iteration  25: 3263632.027 ops/s
Iteration  26: 3310084.089 ops/s
Iteration  27: 3228138.606 ops/s
Iteration  28: 3276427.395 ops/s
Iteration  29: 3235526.628 ops/s
Iteration  30: 3367514.470 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsent_function":
  3318639.511 ±(99.9%) 50799.351 ops/s [Average]
  (min, avg, max) = (3190149.245, 3318639.511, 3469885.450), stdev = 76034.083
  CI (99.9%): [3267840.160, 3369438.862] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getIfAbsent_function  thrpt   30  3318639.511 ± 50799.351  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getKeysAndGetValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getKeysAndGetValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 842056.336 ops/s
# Warmup Iteration   2: 1716667.533 ops/s
# Warmup Iteration   3: 1814657.362 ops/s
# Warmup Iteration   4: 1815823.656 ops/s
# Warmup Iteration   5: 1503138.309 ops/s
# Warmup Iteration   6: 1849966.992 ops/s
# Warmup Iteration   7: 1823340.925 ops/s
# Warmup Iteration   8: 1850708.713 ops/s
# Warmup Iteration   9: 1839279.387 ops/s
# Warmup Iteration  10: 1838488.565 ops/s
# Warmup Iteration  11: 1831352.848 ops/s
# Warmup Iteration  12: 1771767.890 ops/s
# Warmup Iteration  13: 1825547.366 ops/s
# Warmup Iteration  14: 1874851.440 ops/s
# Warmup Iteration  15: 1858767.352 ops/s
# Warmup Iteration  16: 1806604.725 ops/s
# Warmup Iteration  17: 1869469.468 ops/s
# Warmup Iteration  18: 1786581.273 ops/s
# Warmup Iteration  19: 1797173.205 ops/s
# Warmup Iteration  20: 1770635.747 ops/s
# Warmup Iteration  21: 1770725.527 ops/s
# Warmup Iteration  22: 1866398.321 ops/s
# Warmup Iteration  23: 1845430.723 ops/s
# Warmup Iteration  24: 1810408.221 ops/s
# Warmup Iteration  25: 1809649.436 ops/s
# Warmup Iteration  26: 1783728.248 ops/s
# Warmup Iteration  27: 1780932.211 ops/s
# Warmup Iteration  28: 1852384.206 ops/s
# Warmup Iteration  29: 1862416.055 ops/s
# Warmup Iteration  30: 1825440.220 ops/s
Iteration   1: 1857360.644 ops/s
Iteration   2: 1845204.426 ops/s
Iteration   3: 1887282.536 ops/s
Iteration   4: 1869817.427 ops/s
Iteration   5: 1808610.853 ops/s
Iteration   6: 1783339.000 ops/s
Iteration   7: 1867313.090 ops/s
Iteration   8: 1914545.364 ops/s
Iteration   9: 1872385.238 ops/s
Iteration  10: 1863685.317 ops/s
Iteration  11: 1787655.753 ops/s
Iteration  12: 1853075.153 ops/s
Iteration  13: 1827465.632 ops/s
Iteration  14: 1870754.653 ops/s
Iteration  15: 1955357.859 ops/s
Iteration  16: 1948266.352 ops/s
Iteration  17: 1870671.967 ops/s
Iteration  18: 1820145.629 ops/s
Iteration  19: 1824242.190 ops/s
Iteration  20: 1818601.064 ops/s
Iteration  21: 1785101.585 ops/s
Iteration  22: 1778520.268 ops/s
Iteration  23: 1778210.845 ops/s
Iteration  24: 1798634.663 ops/s
Iteration  25: 1747445.126 ops/s
Iteration  26: 1777590.732 ops/s
Iteration  27: 1777965.363 ops/s
Iteration  28: 1798926.800 ops/s
Iteration  29: 1847459.209 ops/s
Iteration  30: 1791058.392 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getKeysAndGetValues":
  1834223.104 ±(99.9%) 34741.600 ops/s [Average]
  (min, avg, max) = (1747445.126, 1834223.104, 1955357.859), stdev = 51999.595
  CI (99.9%): [1799481.505, 1868964.704] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getKeysAndGetValues  thrpt   30  1834223.104 ± 34741.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 590372.230 ops/s
# Warmup Iteration   2: 1250636.127 ops/s
# Warmup Iteration   3: 1269974.625 ops/s
# Warmup Iteration   4: 1273527.309 ops/s
# Warmup Iteration   5: 1105406.107 ops/s
# Warmup Iteration   6: 1310457.714 ops/s
# Warmup Iteration   7: 1321273.482 ops/s
# Warmup Iteration   8: 1402763.195 ops/s
# Warmup Iteration   9: 1373627.778 ops/s
# Warmup Iteration  10: 1364965.818 ops/s
# Warmup Iteration  11: 1406160.778 ops/s
# Warmup Iteration  12: 1349789.744 ops/s
# Warmup Iteration  13: 1308235.191 ops/s
# Warmup Iteration  14: 1401521.531 ops/s
# Warmup Iteration  15: 1403140.821 ops/s
# Warmup Iteration  16: 1406471.076 ops/s
# Warmup Iteration  17: 1373215.772 ops/s
# Warmup Iteration  18: 1302507.628 ops/s
# Warmup Iteration  19: 1273025.061 ops/s
# Warmup Iteration  20: 1274435.556 ops/s
# Warmup Iteration  21: 1282059.076 ops/s
# Warmup Iteration  22: 1267904.000 ops/s
# Warmup Iteration  23: 1281697.605 ops/s
# Warmup Iteration  24: 1289665.193 ops/s
# Warmup Iteration  25: 1322060.297 ops/s
# Warmup Iteration  26: 1292188.689 ops/s
# Warmup Iteration  27: 1273795.366 ops/s
# Warmup Iteration  28: 1295198.308 ops/s
# Warmup Iteration  29: 1287998.833 ops/s
# Warmup Iteration  30: 1315593.248 ops/s
Iteration   1: 1306710.114 ops/s
Iteration   2: 1293682.737 ops/s
Iteration   3: 1298476.093 ops/s
Iteration   4: 1282797.415 ops/s
Iteration   5: 1353465.863 ops/s
Iteration   6: 1305593.444 ops/s
Iteration   7: 1259207.150 ops/s
Iteration   8: 1343411.032 ops/s
Iteration   9: 1310804.309 ops/s
Iteration  10: 1270742.281 ops/s
Iteration  11: 1279258.531 ops/s
Iteration  12: 1317699.732 ops/s
Iteration  13: 1283955.111 ops/s
Iteration  14: 1308536.805 ops/s
Iteration  15: 1370599.912 ops/s
Iteration  16: 1363903.593 ops/s
Iteration  17: 1333137.337 ops/s
Iteration  18: 1306154.058 ops/s
Iteration  19: 1302655.851 ops/s
Iteration  20: 1253938.095 ops/s
Iteration  21: 1297117.230 ops/s
Iteration  22: 1328040.783 ops/s
Iteration  23: 1286923.235 ops/s
Iteration  24: 1270412.616 ops/s
Iteration  25: 1281059.254 ops/s
Iteration  26: 1305612.619 ops/s
Iteration  27: 1263500.781 ops/s
Iteration  28: 1288178.192 ops/s
Iteration  29: 1260454.287 ops/s
Iteration  30: 1274148.925 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getLast":
  1300005.913 ±(99.9%) 20437.415 ops/s [Average]
  (min, avg, max) = (1253938.095, 1300005.913, 1370599.912), stdev = 30589.763
  CI (99.9%): [1279568.498, 1320443.328] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getLast  thrpt   30  1300005.913 ± 20437.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3106465.772 ops/s
# Warmup Iteration   2: 7556117.680 ops/s
# Warmup Iteration   3: 6330530.808 ops/s
# Warmup Iteration   4: 7648584.031 ops/s
# Warmup Iteration   5: 7299773.072 ops/s
# Warmup Iteration   6: 7668185.993 ops/s
# Warmup Iteration   7: 8109646.698 ops/s
# Warmup Iteration   8: 7977120.607 ops/s
# Warmup Iteration   9: 7714068.220 ops/s
# Warmup Iteration  10: 7786788.539 ops/s
# Warmup Iteration  11: 7686919.415 ops/s
# Warmup Iteration  12: 7590041.635 ops/s
# Warmup Iteration  13: 7741234.230 ops/s
# Warmup Iteration  14: 7660110.366 ops/s
# Warmup Iteration  15: 7577271.924 ops/s
# Warmup Iteration  16: 7754937.816 ops/s
# Warmup Iteration  17: 7580335.748 ops/s
# Warmup Iteration  18: 8306109.016 ops/s
# Warmup Iteration  19: 8186414.704 ops/s
# Warmup Iteration  20: 7558105.469 ops/s
# Warmup Iteration  21: 7857537.241 ops/s
# Warmup Iteration  22: 7754768.821 ops/s
# Warmup Iteration  23: 7716120.775 ops/s
# Warmup Iteration  24: 7993974.017 ops/s
# Warmup Iteration  25: 7866493.442 ops/s
# Warmup Iteration  26: 7884660.083 ops/s
# Warmup Iteration  27: 7784848.822 ops/s
# Warmup Iteration  28: 7701305.703 ops/s
# Warmup Iteration  29: 7795598.951 ops/s
# Warmup Iteration  30: 7577351.607 ops/s
Iteration   1: 7643482.219 ops/s
Iteration   2: 7811607.988 ops/s
Iteration   3: 7681716.719 ops/s
Iteration   4: 7531827.965 ops/s
Iteration   5: 7581193.666 ops/s
Iteration   6: 7683917.869 ops/s
Iteration   7: 7459404.851 ops/s
Iteration   8: 7863252.759 ops/s
Iteration   9: 7614707.997 ops/s
Iteration  10: 7520739.719 ops/s
Iteration  11: 7723919.004 ops/s
Iteration  12: 7914443.162 ops/s
Iteration  13: 7659818.515 ops/s
Iteration  14: 7448343.786 ops/s
Iteration  15: 7709573.600 ops/s
Iteration  16: 7850101.267 ops/s
Iteration  17: 7742744.542 ops/s
Iteration  18: 7647663.850 ops/s
Iteration  19: 7714322.496 ops/s
Iteration  20: 7685193.765 ops/s
Iteration  21: 7601103.326 ops/s
Iteration  22: 7643792.287 ops/s
Iteration  23: 7641682.652 ops/s
Iteration  24: 7824938.891 ops/s
Iteration  25: 7558215.212 ops/s
Iteration  26: 7597483.391 ops/s
Iteration  27: 7565668.159 ops/s
Iteration  28: 7863925.320 ops/s
Iteration  29: 7507532.939 ops/s
Iteration  30: 7560228.501 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOnly":
  7661751.547 ±(99.9%) 82470.744 ops/s [Average]
  (min, avg, max) = (7448343.786, 7661751.547, 7914443.162), stdev = 123438.337
  CI (99.9%): [7579280.803, 7744222.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOnly  thrpt   30  7661751.547 ± 82470.744  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOnly_throws_when_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOnly_throws_when_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 481744.860 ops/s
# Warmup Iteration   2: 629688.886 ops/s
# Warmup Iteration   3: 784739.778 ops/s
# Warmup Iteration   4: 779309.152 ops/s
# Warmup Iteration   5: 777222.139 ops/s
# Warmup Iteration   6: 790386.905 ops/s
# Warmup Iteration   7: 784201.211 ops/s
# Warmup Iteration   8: 657682.042 ops/s
# Warmup Iteration   9: 781595.038 ops/s
# Warmup Iteration  10: 788366.582 ops/s
# Warmup Iteration  11: 788015.753 ops/s
# Warmup Iteration  12: 783724.353 ops/s
# Warmup Iteration  13: 789831.073 ops/s
# Warmup Iteration  14: 788351.328 ops/s
# Warmup Iteration  15: 777219.749 ops/s
# Warmup Iteration  16: 794718.098 ops/s
# Warmup Iteration  17: 820325.949 ops/s
# Warmup Iteration  18: 823904.118 ops/s
# Warmup Iteration  19: 824034.041 ops/s
# Warmup Iteration  20: 818260.703 ops/s
# Warmup Iteration  21: 822807.026 ops/s
# Warmup Iteration  22: 829917.523 ops/s
# Warmup Iteration  23: 821370.962 ops/s
# Warmup Iteration  24: 825140.055 ops/s
# Warmup Iteration  25: 855798.018 ops/s
# Warmup Iteration  26: 864800.576 ops/s
# Warmup Iteration  27: 856391.315 ops/s
# Warmup Iteration  28: 856740.673 ops/s
# Warmup Iteration  29: 854225.633 ops/s
# Warmup Iteration  30: 859069.622 ops/s
Iteration   1: 871023.101 ops/s
Iteration   2: 846324.979 ops/s
Iteration   3: 844162.817 ops/s
Iteration   4: 829892.913 ops/s
Iteration   5: 832104.986 ops/s
Iteration   6: 834714.531 ops/s
Iteration   7: 830612.416 ops/s
Iteration   8: 865024.769 ops/s
Iteration   9: 861914.879 ops/s
Iteration  10: 861675.013 ops/s
Iteration  11: 855026.581 ops/s
Iteration  12: 832345.671 ops/s
Iteration  13: 814145.391 ops/s
Iteration  14: 829214.721 ops/s
Iteration  15: 844012.886 ops/s
Iteration  16: 839971.082 ops/s
Iteration  17: 826766.900 ops/s
Iteration  18: 864808.874 ops/s
Iteration  19: 817088.081 ops/s
Iteration  20: 818361.252 ops/s
Iteration  21: 870318.852 ops/s
Iteration  22: 853860.409 ops/s
Iteration  23: 827149.363 ops/s
Iteration  24: 833026.693 ops/s
Iteration  25: 839922.104 ops/s
Iteration  26: 872592.573 ops/s
Iteration  27: 862202.103 ops/s
Iteration  28: 820030.413 ops/s
Iteration  29: 840316.123 ops/s
Iteration  30: 828311.930 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOnly_throws_when_empty":
  842230.747 ±(99.9%) 11777.867 ops/s [Average]
  (min, avg, max) = (814145.391, 842230.747, 872592.573), stdev = 17628.558
  CI (99.9%): [830452.880, 854008.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOnly_throws_when_empty  thrpt   30  842230.747 ± 11777.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOnly_throws_when_multiple_values$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOnly_throws_when_multiple_values

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 478453.241 ops/s
# Warmup Iteration   2: 562912.660 ops/s
# Warmup Iteration   3: 790646.912 ops/s
# Warmup Iteration   4: 792428.391 ops/s
# Warmup Iteration   5: 758992.363 ops/s
# Warmup Iteration   6: 749708.077 ops/s
# Warmup Iteration   7: 755999.212 ops/s
# Warmup Iteration   8: 764202.493 ops/s
# Warmup Iteration   9: 734760.004 ops/s
# Warmup Iteration  10: 631002.844 ops/s
# Warmup Iteration  11: 750185.172 ops/s
# Warmup Iteration  12: 757329.541 ops/s
# Warmup Iteration  13: 760318.038 ops/s
# Warmup Iteration  14: 762918.028 ops/s
# Warmup Iteration  15: 750435.727 ops/s
# Warmup Iteration  16: 768991.651 ops/s
# Warmup Iteration  17: 792309.024 ops/s
# Warmup Iteration  18: 815954.702 ops/s
# Warmup Iteration  19: 796785.316 ops/s
# Warmup Iteration  20: 836323.237 ops/s
# Warmup Iteration  21: 818516.694 ops/s
# Warmup Iteration  22: 790971.961 ops/s
# Warmup Iteration  23: 806746.959 ops/s
# Warmup Iteration  24: 797418.577 ops/s
# Warmup Iteration  25: 797780.275 ops/s
# Warmup Iteration  26: 832405.226 ops/s
# Warmup Iteration  27: 808230.975 ops/s
# Warmup Iteration  28: 798326.199 ops/s
# Warmup Iteration  29: 801852.540 ops/s
# Warmup Iteration  30: 820655.880 ops/s
Iteration   1: 807599.753 ops/s
Iteration   2: 812620.010 ops/s
Iteration   3: 826269.297 ops/s
Iteration   4: 795724.152 ops/s
Iteration   5: 808324.899 ops/s
Iteration   6: 780475.350 ops/s
Iteration   7: 807997.610 ops/s
Iteration   8: 798259.732 ops/s
Iteration   9: 815274.913 ops/s
Iteration  10: 797792.688 ops/s
Iteration  11: 789899.015 ops/s
Iteration  12: 800997.961 ops/s
Iteration  13: 797258.023 ops/s
Iteration  14: 796349.423 ops/s
Iteration  15: 797680.023 ops/s
Iteration  16: 812425.994 ops/s
Iteration  17: 812316.722 ops/s
Iteration  18: 820795.055 ops/s
Iteration  19: 824271.902 ops/s
Iteration  20: 838449.432 ops/s
Iteration  21: 804582.802 ops/s
Iteration  22: 806829.424 ops/s
Iteration  23: 812059.879 ops/s
Iteration  24: 789447.716 ops/s
Iteration  25: 801249.951 ops/s
Iteration  26: 795789.705 ops/s
Iteration  27: 785285.007 ops/s
Iteration  28: 807114.355 ops/s
Iteration  29: 785692.915 ops/s
Iteration  30: 807738.864 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOnly_throws_when_multiple_values":
  804552.419 ±(99.9%) 8658.022 ops/s [Average]
  (min, avg, max) = (780475.350, 804552.419, 838449.432), stdev = 12958.921
  CI (99.9%): [795894.397, 813210.441] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOnly_throws_when_multiple_values  thrpt   30  804552.419 ± 8658.022  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOrDefault$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOrDefault

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1707356.278 ops/s
# Warmup Iteration   2: 3176409.502 ops/s
# Warmup Iteration   3: 3261509.329 ops/s
# Warmup Iteration   4: 3245023.416 ops/s
# Warmup Iteration   5: 2729104.266 ops/s
# Warmup Iteration   6: 3284848.100 ops/s
# Warmup Iteration   7: 3435684.064 ops/s
# Warmup Iteration   8: 3276065.953 ops/s
# Warmup Iteration   9: 3291034.326 ops/s
# Warmup Iteration  10: 3351547.747 ops/s
# Warmup Iteration  11: 3314904.135 ops/s
# Warmup Iteration  12: 3208931.214 ops/s
# Warmup Iteration  13: 3411900.731 ops/s
# Warmup Iteration  14: 3290429.364 ops/s
# Warmup Iteration  15: 3390864.319 ops/s
# Warmup Iteration  16: 3377452.988 ops/s
# Warmup Iteration  17: 3377424.828 ops/s
# Warmup Iteration  18: 3324681.450 ops/s
# Warmup Iteration  19: 3279398.435 ops/s
# Warmup Iteration  20: 3265915.657 ops/s
# Warmup Iteration  21: 3252772.767 ops/s
# Warmup Iteration  22: 3255631.805 ops/s
# Warmup Iteration  23: 3266185.162 ops/s
# Warmup Iteration  24: 3270341.603 ops/s
# Warmup Iteration  25: 3265476.896 ops/s
# Warmup Iteration  26: 3389285.885 ops/s
# Warmup Iteration  27: 3461102.351 ops/s
# Warmup Iteration  28: 3357512.423 ops/s
# Warmup Iteration  29: 3423169.343 ops/s
# Warmup Iteration  30: 3485136.761 ops/s
Iteration   1: 3450141.673 ops/s
Iteration   2: 3381640.989 ops/s
Iteration   3: 3442734.324 ops/s
Iteration   4: 3443533.364 ops/s
Iteration   5: 3437838.719 ops/s
Iteration   6: 3411394.792 ops/s
Iteration   7: 3299806.210 ops/s
Iteration   8: 3414446.155 ops/s
Iteration   9: 3276102.067 ops/s
Iteration  10: 3403234.970 ops/s
Iteration  11: 3251480.779 ops/s
Iteration  12: 3330719.862 ops/s
Iteration  13: 3320489.026 ops/s
Iteration  14: 3345740.415 ops/s
Iteration  15: 3298761.261 ops/s
Iteration  16: 3457743.333 ops/s
Iteration  17: 3360623.452 ops/s
Iteration  18: 3312632.431 ops/s
Iteration  19: 3318138.393 ops/s
Iteration  20: 3399984.122 ops/s
Iteration  21: 3267163.496 ops/s
Iteration  22: 3303480.210 ops/s
Iteration  23: 3294229.741 ops/s
Iteration  24: 3322058.116 ops/s
Iteration  25: 3319906.845 ops/s
Iteration  26: 3288674.693 ops/s
Iteration  27: 3326008.423 ops/s
Iteration  28: 3278586.141 ops/s
Iteration  29: 3356811.611 ops/s
Iteration  30: 3475511.187 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOrDefault":
  3352987.227 ±(99.9%) 43660.557 ops/s [Average]
  (min, avg, max) = (3251480.779, 3352987.227, 3475511.187), stdev = 65349.071
  CI (99.9%): [3309326.670, 3396647.784] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_getOrDefault  thrpt   30  3352987.227 ± 43660.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 232247.090 ops/s
# Warmup Iteration   2: 526849.774 ops/s
# Warmup Iteration   3: 553448.521 ops/s
# Warmup Iteration   4: 553322.822 ops/s
# Warmup Iteration   5: 471928.357 ops/s
# Warmup Iteration   6: 565820.051 ops/s
# Warmup Iteration   7: 562599.932 ops/s
# Warmup Iteration   8: 556422.551 ops/s
# Warmup Iteration   9: 560409.023 ops/s
# Warmup Iteration  10: 552854.739 ops/s
# Warmup Iteration  11: 557386.373 ops/s
# Warmup Iteration  12: 551890.893 ops/s
# Warmup Iteration  13: 564121.475 ops/s
# Warmup Iteration  14: 562666.480 ops/s
# Warmup Iteration  15: 559833.867 ops/s
# Warmup Iteration  16: 563589.244 ops/s
# Warmup Iteration  17: 549137.736 ops/s
# Warmup Iteration  18: 554445.195 ops/s
# Warmup Iteration  19: 565064.864 ops/s
# Warmup Iteration  20: 549842.970 ops/s
# Warmup Iteration  21: 552045.346 ops/s
# Warmup Iteration  22: 554118.975 ops/s
# Warmup Iteration  23: 568614.133 ops/s
# Warmup Iteration  24: 564866.940 ops/s
# Warmup Iteration  25: 558144.951 ops/s
# Warmup Iteration  26: 548650.217 ops/s
# Warmup Iteration  27: 541631.434 ops/s
# Warmup Iteration  28: 549490.256 ops/s
# Warmup Iteration  29: 548892.553 ops/s
# Warmup Iteration  30: 575546.616 ops/s
Iteration   1: 592638.578 ops/s
Iteration   2: 539923.676 ops/s
Iteration   3: 552714.556 ops/s
Iteration   4: 556186.076 ops/s
Iteration   5: 548754.010 ops/s
Iteration   6: 547454.915 ops/s
Iteration   7: 543121.157 ops/s
Iteration   8: 540796.725 ops/s
Iteration   9: 543587.215 ops/s
Iteration  10: 554879.314 ops/s
Iteration  11: 599215.964 ops/s
Iteration  12: 577651.756 ops/s
Iteration  13: 551621.337 ops/s
Iteration  14: 567338.642 ops/s
Iteration  15: 573969.875 ops/s
Iteration  16: 544695.921 ops/s
Iteration  17: 592469.371 ops/s
Iteration  18: 575379.272 ops/s
Iteration  19: 571301.077 ops/s
Iteration  20: 578800.967 ops/s
Iteration  21: 570407.111 ops/s
Iteration  22: 548076.144 ops/s
Iteration  23: 555347.885 ops/s
Iteration  24: 542747.131 ops/s
Iteration  25: 553879.344 ops/s
Iteration  26: 576512.949 ops/s
Iteration  27: 553203.439 ops/s
Iteration  28: 548207.194 ops/s
Iteration  29: 556028.639 ops/s
Iteration  30: 560279.480 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupBy":
  560572.991 ±(99.9%) 11107.250 ops/s [Average]
  (min, avg, max) = (539923.676, 560572.991, 599215.964), stdev = 16624.811
  CI (99.9%): [549465.740, 571680.241] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupBy  thrpt   30  560572.991 ± 11107.250  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 142294.407 ops/s
# Warmup Iteration   2: 306765.909 ops/s
# Warmup Iteration   3: 338965.336 ops/s
# Warmup Iteration   4: 336713.239 ops/s
# Warmup Iteration   5: 278295.367 ops/s
# Warmup Iteration   6: 320060.994 ops/s
# Warmup Iteration   7: 315863.115 ops/s
# Warmup Iteration   8: 313146.357 ops/s
# Warmup Iteration   9: 313367.166 ops/s
# Warmup Iteration  10: 314051.693 ops/s
# Warmup Iteration  11: 316636.570 ops/s
# Warmup Iteration  12: 315879.489 ops/s
# Warmup Iteration  13: 314188.784 ops/s
# Warmup Iteration  14: 320844.383 ops/s
# Warmup Iteration  15: 315831.543 ops/s
# Warmup Iteration  16: 314090.711 ops/s
# Warmup Iteration  17: 326436.634 ops/s
# Warmup Iteration  18: 325540.180 ops/s
# Warmup Iteration  19: 330089.258 ops/s
# Warmup Iteration  20: 329008.668 ops/s
# Warmup Iteration  21: 320638.618 ops/s
# Warmup Iteration  22: 331292.051 ops/s
# Warmup Iteration  23: 328900.416 ops/s
# Warmup Iteration  24: 327653.613 ops/s
# Warmup Iteration  25: 321901.581 ops/s
# Warmup Iteration  26: 315470.805 ops/s
# Warmup Iteration  27: 334628.754 ops/s
# Warmup Iteration  28: 332641.086 ops/s
# Warmup Iteration  29: 326818.402 ops/s
# Warmup Iteration  30: 317733.027 ops/s
Iteration   1: 326613.103 ops/s
Iteration   2: 333267.746 ops/s
Iteration   3: 329922.852 ops/s
Iteration   4: 324314.582 ops/s
Iteration   5: 313926.698 ops/s
Iteration   6: 311413.468 ops/s
Iteration   7: 309079.234 ops/s
Iteration   8: 318148.061 ops/s
Iteration   9: 312187.740 ops/s
Iteration  10: 317253.318 ops/s
Iteration  11: 314951.264 ops/s
Iteration  12: 315710.204 ops/s
Iteration  13: 314165.865 ops/s
Iteration  14: 315041.685 ops/s
Iteration  15: 314757.837 ops/s
Iteration  16: 313632.326 ops/s
Iteration  17: 320608.051 ops/s
Iteration  18: 313291.206 ops/s
Iteration  19: 319268.675 ops/s
Iteration  20: 333064.081 ops/s
Iteration  21: 345857.793 ops/s
Iteration  22: 345702.694 ops/s
Iteration  23: 335482.112 ops/s
Iteration  24: 320254.437 ops/s
Iteration  25: 325885.293 ops/s
Iteration  26: 315824.841 ops/s
Iteration  27: 315411.931 ops/s
Iteration  28: 312546.883 ops/s
Iteration  29: 331759.553 ops/s
Iteration  30: 323816.239 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByEach":
  321438.659 ±(99.9%) 6581.660 ops/s [Average]
  (min, avg, max) = (309079.234, 321438.659, 345857.793), stdev = 9851.120
  CI (99.9%): [314856.999, 328020.319] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByEach  thrpt   30  321438.659 ± 6581.660  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 773090.471 ops/s
# Warmup Iteration   2: 1978093.614 ops/s
# Warmup Iteration   3: 1993235.433 ops/s
# Warmup Iteration   4: 1630955.092 ops/s
# Warmup Iteration   5: 1989189.079 ops/s
# Warmup Iteration   6: 1967770.072 ops/s
# Warmup Iteration   7: 1984889.105 ops/s
# Warmup Iteration   8: 1974982.952 ops/s
# Warmup Iteration   9: 1986866.801 ops/s
# Warmup Iteration  10: 1962768.602 ops/s
# Warmup Iteration  11: 1955014.863 ops/s
# Warmup Iteration  12: 2001325.950 ops/s
# Warmup Iteration  13: 1975536.645 ops/s
# Warmup Iteration  14: 1994074.053 ops/s
# Warmup Iteration  15: 1982820.897 ops/s
# Warmup Iteration  16: 2011234.841 ops/s
# Warmup Iteration  17: 1997695.570 ops/s
# Warmup Iteration  18: 1950536.585 ops/s
# Warmup Iteration  19: 1976997.230 ops/s
# Warmup Iteration  20: 1965095.295 ops/s
# Warmup Iteration  21: 1985990.089 ops/s
# Warmup Iteration  22: 1950361.080 ops/s
# Warmup Iteration  23: 1992566.813 ops/s
# Warmup Iteration  24: 1996068.993 ops/s
# Warmup Iteration  25: 1986267.055 ops/s
# Warmup Iteration  26: 2008885.058 ops/s
# Warmup Iteration  27: 2046157.288 ops/s
# Warmup Iteration  28: 2001939.306 ops/s
# Warmup Iteration  29: 2022011.937 ops/s
# Warmup Iteration  30: 2012234.883 ops/s
Iteration   1: 2058628.537 ops/s
Iteration   2: 1966444.539 ops/s
Iteration   3: 1940861.375 ops/s
Iteration   4: 1963762.962 ops/s
Iteration   5: 1995531.034 ops/s
Iteration   6: 1966540.635 ops/s
Iteration   7: 1991569.012 ops/s
Iteration   8: 1996456.924 ops/s
Iteration   9: 2023470.537 ops/s
Iteration  10: 2033503.470 ops/s
Iteration  11: 2082626.858 ops/s
Iteration  12: 1974781.705 ops/s
Iteration  13: 1977392.025 ops/s
Iteration  14: 1999614.496 ops/s
Iteration  15: 1958628.654 ops/s
Iteration  16: 1991785.597 ops/s
Iteration  17: 1983108.378 ops/s
Iteration  18: 2082701.883 ops/s
Iteration  19: 2015938.243 ops/s
Iteration  20: 1971132.562 ops/s
Iteration  21: 1995925.398 ops/s
Iteration  22: 1945362.698 ops/s
Iteration  23: 2043694.275 ops/s
Iteration  24: 2055633.974 ops/s
Iteration  25: 1967670.176 ops/s
Iteration  26: 2062815.258 ops/s
Iteration  27: 1962879.736 ops/s
Iteration  28: 1971235.774 ops/s
Iteration  29: 1973745.666 ops/s
Iteration  30: 1978762.428 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey":
  1997740.160 ±(99.9%) 26731.884 ops/s [Average]
  (min, avg, max) = (1940861.375, 1997740.160, 2082701.883), stdev = 40011.029
  CI (99.9%): [1971008.276, 2024472.044] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  1997740.160 ± 26731.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1092393.011 ops/s
# Warmup Iteration   2: 2591719.060 ops/s
# Warmup Iteration   3: 2518078.902 ops/s
# Warmup Iteration   4: 2202343.832 ops/s
# Warmup Iteration   5: 2284347.619 ops/s
# Warmup Iteration   6: 2458353.162 ops/s
# Warmup Iteration   7: 2465267.726 ops/s
# Warmup Iteration   8: 2483075.103 ops/s
# Warmup Iteration   9: 2479900.413 ops/s
# Warmup Iteration  10: 2432901.227 ops/s
# Warmup Iteration  11: 2542499.953 ops/s
# Warmup Iteration  12: 2653758.609 ops/s
# Warmup Iteration  13: 2517225.395 ops/s
# Warmup Iteration  14: 2492934.151 ops/s
# Warmup Iteration  15: 2513254.861 ops/s
# Warmup Iteration  16: 2525132.410 ops/s
# Warmup Iteration  17: 2440204.873 ops/s
# Warmup Iteration  18: 2544363.872 ops/s
# Warmup Iteration  19: 2601351.086 ops/s
# Warmup Iteration  20: 2517534.187 ops/s
# Warmup Iteration  21: 2484549.221 ops/s
# Warmup Iteration  22: 2472654.111 ops/s
# Warmup Iteration  23: 2457168.354 ops/s
# Warmup Iteration  24: 2469945.876 ops/s
# Warmup Iteration  25: 2464477.822 ops/s
# Warmup Iteration  26: 2427045.447 ops/s
# Warmup Iteration  27: 2427475.988 ops/s
# Warmup Iteration  28: 2594887.435 ops/s
# Warmup Iteration  29: 2516891.412 ops/s
# Warmup Iteration  30: 2463263.427 ops/s
Iteration   1: 2468452.077 ops/s
Iteration   2: 2467170.320 ops/s
Iteration   3: 2453465.890 ops/s
Iteration   4: 2410318.920 ops/s
Iteration   5: 2430869.720 ops/s
Iteration   6: 2428704.670 ops/s
Iteration   7: 2466511.014 ops/s
Iteration   8: 2429200.777 ops/s
Iteration   9: 2463796.422 ops/s
Iteration  10: 2464630.330 ops/s
Iteration  11: 2469796.990 ops/s
Iteration  12: 2549239.942 ops/s
Iteration  13: 2638238.366 ops/s
Iteration  14: 2413554.278 ops/s
Iteration  15: 2432739.176 ops/s
Iteration  16: 2421725.732 ops/s
Iteration  17: 2502333.063 ops/s
Iteration  18: 2488925.530 ops/s
Iteration  19: 2448149.959 ops/s
Iteration  20: 2488502.653 ops/s
Iteration  21: 2477082.007 ops/s
Iteration  22: 2631715.286 ops/s
Iteration  23: 2531586.582 ops/s
Iteration  24: 2515206.844 ops/s
Iteration  25: 2470706.969 ops/s
Iteration  26: 2511165.626 ops/s
Iteration  27: 2429449.614 ops/s
Iteration  28: 2548440.899 ops/s
Iteration  29: 2471145.607 ops/s
Iteration  30: 2460332.498 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey_target":
  2479438.592 ±(99.9%) 37526.614 ops/s [Average]
  (min, avg, max) = (2410318.920, 2479438.592, 2638238.366), stdev = 56168.073
  CI (99.9%): [2441911.978, 2516965.206] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  2479438.592 ± 37526.614  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey_target_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey_target_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 404581.441 ops/s
# Warmup Iteration   2: 480635.510 ops/s
# Warmup Iteration   3: 602152.351 ops/s
# Warmup Iteration   4: 603634.604 ops/s
# Warmup Iteration   5: 627749.807 ops/s
# Warmup Iteration   6: 623721.860 ops/s
# Warmup Iteration   7: 620019.513 ops/s
# Warmup Iteration   8: 626686.127 ops/s
# Warmup Iteration   9: 536388.677 ops/s
# Warmup Iteration  10: 568655.842 ops/s
# Warmup Iteration  11: 625557.780 ops/s
# Warmup Iteration  12: 629286.020 ops/s
# Warmup Iteration  13: 608107.732 ops/s
# Warmup Iteration  14: 594409.765 ops/s
# Warmup Iteration  15: 628757.296 ops/s
# Warmup Iteration  16: 604436.886 ops/s
# Warmup Iteration  17: 649076.188 ops/s
# Warmup Iteration  18: 618323.265 ops/s
# Warmup Iteration  19: 633649.057 ops/s
# Warmup Iteration  20: 633263.374 ops/s
# Warmup Iteration  21: 628891.762 ops/s
# Warmup Iteration  22: 614721.877 ops/s
# Warmup Iteration  23: 615801.079 ops/s
# Warmup Iteration  24: 625689.379 ops/s
# Warmup Iteration  25: 629252.486 ops/s
# Warmup Iteration  26: 620383.460 ops/s
# Warmup Iteration  27: 651071.755 ops/s
# Warmup Iteration  28: 648526.714 ops/s
# Warmup Iteration  29: 649462.716 ops/s
# Warmup Iteration  30: 647831.905 ops/s
Iteration   1: 647623.120 ops/s
Iteration   2: 627437.006 ops/s
Iteration   3: 647561.923 ops/s
Iteration   4: 639269.392 ops/s
Iteration   5: 650736.309 ops/s
Iteration   6: 608281.563 ops/s
Iteration   7: 626716.158 ops/s
Iteration   8: 615213.356 ops/s
Iteration   9: 632412.443 ops/s
Iteration  10: 644338.735 ops/s
Iteration  11: 610568.111 ops/s
Iteration  12: 628631.083 ops/s
Iteration  13: 615748.795 ops/s
Iteration  14: 638532.626 ops/s
Iteration  15: 628646.170 ops/s
Iteration  16: 645436.621 ops/s
Iteration  17: 640775.828 ops/s
Iteration  18: 650691.903 ops/s
Iteration  19: 652958.227 ops/s
Iteration  20: 655206.355 ops/s
Iteration  21: 647353.555 ops/s
Iteration  22: 644474.862 ops/s
Iteration  23: 641810.463 ops/s
Iteration  24: 624529.965 ops/s
Iteration  25: 632416.991 ops/s
Iteration  26: 618281.246 ops/s
Iteration  27: 633966.378 ops/s
Iteration  28: 620174.017 ops/s
Iteration  29: 628264.630 ops/s
Iteration  30: 622972.506 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey_target_throws":
  634034.345 ±(99.9%) 8908.450 ops/s [Average]
  (min, avg, max) = (608281.563, 634034.345, 655206.355), stdev = 13333.750
  CI (99.9%): [625125.895, 642942.795] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey_target_throws  thrpt   30  634034.345 ± 8908.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 365409.290 ops/s
# Warmup Iteration   2: 394018.545 ops/s
# Warmup Iteration   3: 542174.395 ops/s
# Warmup Iteration   4: 535697.909 ops/s
# Warmup Iteration   5: 564131.301 ops/s
# Warmup Iteration   6: 531825.720 ops/s
# Warmup Iteration   7: 522660.346 ops/s
# Warmup Iteration   8: 519960.609 ops/s
# Warmup Iteration   9: 518901.350 ops/s
# Warmup Iteration  10: 508287.053 ops/s
# Warmup Iteration  11: 436523.932 ops/s
# Warmup Iteration  12: 526460.673 ops/s
# Warmup Iteration  13: 541360.311 ops/s
# Warmup Iteration  14: 533857.036 ops/s
# Warmup Iteration  15: 511784.123 ops/s
# Warmup Iteration  16: 537423.008 ops/s
# Warmup Iteration  17: 563068.317 ops/s
# Warmup Iteration  18: 551385.457 ops/s
# Warmup Iteration  19: 561523.736 ops/s
# Warmup Iteration  20: 543863.379 ops/s
# Warmup Iteration  21: 553351.082 ops/s
# Warmup Iteration  22: 555186.401 ops/s
# Warmup Iteration  23: 537210.185 ops/s
# Warmup Iteration  24: 539928.104 ops/s
# Warmup Iteration  25: 531920.793 ops/s
# Warmup Iteration  26: 561632.728 ops/s
# Warmup Iteration  27: 560846.051 ops/s
# Warmup Iteration  28: 557662.538 ops/s
# Warmup Iteration  29: 535439.860 ops/s
# Warmup Iteration  30: 557612.649 ops/s
Iteration   1: 554977.865 ops/s
Iteration   2: 558620.710 ops/s
Iteration   3: 555494.760 ops/s
Iteration   4: 557081.207 ops/s
Iteration   5: 546782.591 ops/s
Iteration   6: 541919.806 ops/s
Iteration   7: 542559.081 ops/s
Iteration   8: 539586.061 ops/s
Iteration   9: 537458.106 ops/s
Iteration  10: 535713.512 ops/s
Iteration  11: 528695.143 ops/s
Iteration  12: 530934.392 ops/s
Iteration  13: 536781.718 ops/s
Iteration  14: 552276.698 ops/s
Iteration  15: 548573.705 ops/s
Iteration  16: 532895.029 ops/s
Iteration  17: 555631.604 ops/s
Iteration  18: 540438.808 ops/s
Iteration  19: 529088.159 ops/s
Iteration  20: 527547.902 ops/s
Iteration  21: 545141.589 ops/s
Iteration  22: 535986.884 ops/s
Iteration  23: 544094.955 ops/s
Iteration  24: 541997.310 ops/s
Iteration  25: 547387.161 ops/s
Iteration  26: 532701.021 ops/s
Iteration  27: 536670.111 ops/s
Iteration  28: 543832.886 ops/s
Iteration  29: 535335.456 ops/s
Iteration  30: 532676.631 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey_throws":
  541629.362 ±(99.9%) 6065.959 ops/s [Average]
  (min, avg, max) = (527547.902, 541629.362, 558620.710), stdev = 9079.243
  CI (99.9%): [535563.403, 547695.321] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_groupByUniqueKey_throws  thrpt   30  541629.362 ± 6065.959  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_ifPresentApply$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_ifPresentApply

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2253545.522 ops/s
# Warmup Iteration   2: 5218513.157 ops/s
# Warmup Iteration   3: 4440230.756 ops/s
# Warmup Iteration   4: 5069515.179 ops/s
# Warmup Iteration   5: 4986433.751 ops/s
# Warmup Iteration   6: 5039725.460 ops/s
# Warmup Iteration   7: 5038535.336 ops/s
# Warmup Iteration   8: 4999072.115 ops/s
# Warmup Iteration   9: 5046432.317 ops/s
# Warmup Iteration  10: 5040820.440 ops/s
# Warmup Iteration  11: 5044449.145 ops/s
# Warmup Iteration  12: 5038395.413 ops/s
# Warmup Iteration  13: 4976921.979 ops/s
# Warmup Iteration  14: 5077719.488 ops/s
# Warmup Iteration  15: 5031364.387 ops/s
# Warmup Iteration  16: 5015304.115 ops/s
# Warmup Iteration  17: 5053173.311 ops/s
# Warmup Iteration  18: 5085775.091 ops/s
# Warmup Iteration  19: 5423619.760 ops/s
# Warmup Iteration  20: 5451345.592 ops/s
# Warmup Iteration  21: 5037069.021 ops/s
# Warmup Iteration  22: 5137856.354 ops/s
# Warmup Iteration  23: 5052817.355 ops/s
# Warmup Iteration  24: 5166612.207 ops/s
# Warmup Iteration  25: 5068154.375 ops/s
# Warmup Iteration  26: 5040174.663 ops/s
# Warmup Iteration  27: 5172253.163 ops/s
# Warmup Iteration  28: 5093458.861 ops/s
# Warmup Iteration  29: 5000311.393 ops/s
# Warmup Iteration  30: 5056344.482 ops/s
Iteration   1: 5173400.631 ops/s
Iteration   2: 5014816.741 ops/s
Iteration   3: 5016888.764 ops/s
Iteration   4: 5114704.739 ops/s
Iteration   5: 5109053.442 ops/s
Iteration   6: 5030137.863 ops/s
Iteration   7: 5147057.160 ops/s
Iteration   8: 5023602.694 ops/s
Iteration   9: 5040496.689 ops/s
Iteration  10: 5065695.912 ops/s
Iteration  11: 5012143.586 ops/s
Iteration  12: 5069744.015 ops/s
Iteration  13: 5034022.860 ops/s
Iteration  14: 5007794.068 ops/s
Iteration  15: 5229203.714 ops/s
Iteration  16: 5015879.932 ops/s
Iteration  17: 5087427.375 ops/s
Iteration  18: 4998399.723 ops/s
Iteration  19: 5011082.568 ops/s
Iteration  20: 5046967.012 ops/s
Iteration  21: 5111189.389 ops/s
Iteration  22: 5134208.949 ops/s
Iteration  23: 5092173.834 ops/s
Iteration  24: 5010598.454 ops/s
Iteration  25: 5140623.135 ops/s
Iteration  26: 5014730.035 ops/s
Iteration  27: 5045261.043 ops/s
Iteration  28: 5034202.737 ops/s
Iteration  29: 4990862.246 ops/s
Iteration  30: 5035836.375 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_ifPresentApply":
  5061940.189 ±(99.9%) 39647.533 ops/s [Average]
  (min, avg, max) = (4990862.246, 5061940.189, 5229203.714), stdev = 59342.566
  CI (99.9%): [5022292.656, 5101587.723] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_ifPresentApply  thrpt   30  5061940.189 ± 39647.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1437713.408 ops/s
# Warmup Iteration   2: 3255767.073 ops/s
# Warmup Iteration   3: 3349612.308 ops/s
# Warmup Iteration   4: 3059009.543 ops/s
# Warmup Iteration   5: 2935190.868 ops/s
# Warmup Iteration   6: 3457041.622 ops/s
# Warmup Iteration   7: 3312214.046 ops/s
# Warmup Iteration   8: 3365972.737 ops/s
# Warmup Iteration   9: 3441316.818 ops/s
# Warmup Iteration  10: 3386449.089 ops/s
# Warmup Iteration  11: 3476559.163 ops/s
# Warmup Iteration  12: 3545915.541 ops/s
# Warmup Iteration  13: 3476367.049 ops/s
# Warmup Iteration  14: 3456736.690 ops/s
# Warmup Iteration  15: 3340096.834 ops/s
# Warmup Iteration  16: 3343471.450 ops/s
# Warmup Iteration  17: 3321342.397 ops/s
# Warmup Iteration  18: 3365420.901 ops/s
# Warmup Iteration  19: 3346863.899 ops/s
# Warmup Iteration  20: 3461985.242 ops/s
# Warmup Iteration  21: 3423660.769 ops/s
# Warmup Iteration  22: 3330242.653 ops/s
# Warmup Iteration  23: 3448028.577 ops/s
# Warmup Iteration  24: 3574541.772 ops/s
# Warmup Iteration  25: 3651491.979 ops/s
# Warmup Iteration  26: 3394772.979 ops/s
# Warmup Iteration  27: 3445372.526 ops/s
# Warmup Iteration  28: 3583021.247 ops/s
# Warmup Iteration  29: 3394945.801 ops/s
# Warmup Iteration  30: 3361261.669 ops/s
Iteration   1: 3525839.142 ops/s
Iteration   2: 3331679.496 ops/s
Iteration   3: 3340385.491 ops/s
Iteration   4: 3574494.727 ops/s
Iteration   5: 3564340.055 ops/s
Iteration   6: 3521624.649 ops/s
Iteration   7: 3410297.149 ops/s
Iteration   8: 3300955.395 ops/s
Iteration   9: 3309169.714 ops/s
Iteration  10: 3572056.473 ops/s
Iteration  11: 3662167.634 ops/s
Iteration  12: 3496596.301 ops/s
Iteration  13: 3426226.437 ops/s
Iteration  14: 3435177.568 ops/s
Iteration  15: 3336386.291 ops/s
Iteration  16: 3380003.251 ops/s
Iteration  17: 3312193.775 ops/s
Iteration  18: 3282734.949 ops/s
Iteration  19: 3300110.643 ops/s
Iteration  20: 3410225.240 ops/s
Iteration  21: 3357014.265 ops/s
Iteration  22: 3308912.913 ops/s
Iteration  23: 3309665.067 ops/s
Iteration  24: 3369956.368 ops/s
Iteration  25: 3305913.855 ops/s
Iteration  26: 3279431.898 ops/s
Iteration  27: 3331893.338 ops/s
Iteration  28: 3299935.636 ops/s
Iteration  29: 3323000.572 ops/s
Iteration  30: 3301579.067 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectInto":
  3389332.245 ±(99.9%) 71216.447 ops/s [Average]
  (min, avg, max) = (3279431.898, 3389332.245, 3662167.634), stdev = 106593.433
  CI (99.9%): [3318115.798, 3460548.693] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectInto  thrpt   30  3389332.245 ± 71216.447  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1729730.942 ops/s
# Warmup Iteration   2: 4278174.263 ops/s
# Warmup Iteration   3: 4156064.126 ops/s
# Warmup Iteration   4: 3399959.759 ops/s
# Warmup Iteration   5: 4063080.833 ops/s
# Warmup Iteration   6: 4063686.383 ops/s
# Warmup Iteration   7: 4073152.947 ops/s
# Warmup Iteration   8: 4084110.222 ops/s
# Warmup Iteration   9: 4092841.210 ops/s
# Warmup Iteration  10: 4210225.382 ops/s
# Warmup Iteration  11: 4089054.370 ops/s
# Warmup Iteration  12: 4289453.933 ops/s
# Warmup Iteration  13: 4108500.925 ops/s
# Warmup Iteration  14: 4047883.372 ops/s
# Warmup Iteration  15: 4097105.580 ops/s
# Warmup Iteration  16: 4218286.754 ops/s
# Warmup Iteration  17: 4097392.409 ops/s
# Warmup Iteration  18: 4156270.154 ops/s
# Warmup Iteration  19: 4102475.504 ops/s
# Warmup Iteration  20: 4187040.495 ops/s
# Warmup Iteration  21: 4038080.000 ops/s
# Warmup Iteration  22: 4249794.433 ops/s
# Warmup Iteration  23: 4053278.583 ops/s
# Warmup Iteration  24: 4121228.919 ops/s
# Warmup Iteration  25: 4183484.346 ops/s
# Warmup Iteration  26: 4103142.678 ops/s
# Warmup Iteration  27: 4103305.592 ops/s
# Warmup Iteration  28: 4098523.011 ops/s
# Warmup Iteration  29: 4078698.434 ops/s
# Warmup Iteration  30: 4158183.852 ops/s
Iteration   1: 4334702.351 ops/s
Iteration   2: 4156466.111 ops/s
Iteration   3: 4126067.460 ops/s
Iteration   4: 4181460.677 ops/s
Iteration   5: 4082767.166 ops/s
Iteration   6: 4114300.200 ops/s
Iteration   7: 4138204.044 ops/s
Iteration   8: 4071766.275 ops/s
Iteration   9: 4258822.461 ops/s
Iteration  10: 4074781.210 ops/s
Iteration  11: 3996399.508 ops/s
Iteration  12: 4120472.663 ops/s
Iteration  13: 4032210.821 ops/s
Iteration  14: 4140506.742 ops/s
Iteration  15: 4199670.708 ops/s
Iteration  16: 4245614.283 ops/s
Iteration  17: 4277715.985 ops/s
Iteration  18: 4269918.859 ops/s
Iteration  19: 4343430.096 ops/s
Iteration  20: 4497017.615 ops/s
Iteration  21: 4504342.732 ops/s
Iteration  22: 4376739.854 ops/s
Iteration  23: 4113380.670 ops/s
Iteration  24: 4327480.665 ops/s
Iteration  25: 4085237.884 ops/s
Iteration  26: 3938510.230 ops/s
Iteration  27: 4237449.283 ops/s
Iteration  28: 4257333.656 ops/s
Iteration  29: 4113735.399 ops/s
Iteration  30: 4127387.923 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoDouble":
  4191463.118 ±(99.9%) 90490.557 ops/s [Average]
  (min, avg, max) = (3938510.230, 4191463.118, 4504342.732), stdev = 135442.016
  CI (99.9%): [4100972.561, 4281953.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  4191463.118 ± 90490.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2015624.558 ops/s
# Warmup Iteration   2: 4419953.246 ops/s
# Warmup Iteration   3: 4657776.077 ops/s
# Warmup Iteration   4: 3821194.866 ops/s
# Warmup Iteration   5: 4676166.425 ops/s
# Warmup Iteration   6: 4639872.367 ops/s
# Warmup Iteration   7: 4591223.909 ops/s
# Warmup Iteration   8: 4341587.599 ops/s
# Warmup Iteration   9: 4595483.029 ops/s
# Warmup Iteration  10: 4346385.252 ops/s
# Warmup Iteration  11: 4391806.728 ops/s
# Warmup Iteration  12: 4324101.829 ops/s
# Warmup Iteration  13: 4489985.288 ops/s
# Warmup Iteration  14: 4334337.455 ops/s
# Warmup Iteration  15: 4480585.743 ops/s
# Warmup Iteration  16: 4294980.131 ops/s
# Warmup Iteration  17: 4343460.024 ops/s
# Warmup Iteration  18: 4364019.814 ops/s
# Warmup Iteration  19: 4606381.936 ops/s
# Warmup Iteration  20: 4546106.577 ops/s
# Warmup Iteration  21: 4424537.705 ops/s
# Warmup Iteration  22: 4405999.645 ops/s
# Warmup Iteration  23: 4601356.201 ops/s
# Warmup Iteration  24: 4463711.405 ops/s
# Warmup Iteration  25: 4356887.088 ops/s
# Warmup Iteration  26: 4359378.785 ops/s
# Warmup Iteration  27: 4387514.536 ops/s
# Warmup Iteration  28: 4376426.492 ops/s
# Warmup Iteration  29: 4502957.344 ops/s
# Warmup Iteration  30: 4559954.113 ops/s
Iteration   1: 4603548.031 ops/s
Iteration   2: 4326804.293 ops/s
Iteration   3: 4497162.440 ops/s
Iteration   4: 4411267.954 ops/s
Iteration   5: 4402977.235 ops/s
Iteration   6: 4538642.076 ops/s
Iteration   7: 4622052.111 ops/s
Iteration   8: 4462485.910 ops/s
Iteration   9: 4340085.043 ops/s
Iteration  10: 4301612.960 ops/s
Iteration  11: 4351721.922 ops/s
Iteration  12: 4338070.887 ops/s
Iteration  13: 4228296.392 ops/s
Iteration  14: 4467832.283 ops/s
Iteration  15: 4435074.749 ops/s
Iteration  16: 4306615.565 ops/s
Iteration  17: 4464985.848 ops/s
Iteration  18: 4524999.524 ops/s
Iteration  19: 4540734.559 ops/s
Iteration  20: 4640044.490 ops/s
Iteration  21: 4652083.817 ops/s
Iteration  22: 4589122.794 ops/s
Iteration  23: 4318139.957 ops/s
Iteration  24: 4406923.121 ops/s
Iteration  25: 4326682.972 ops/s
Iteration  26: 4317855.717 ops/s
Iteration  27: 4366202.614 ops/s
Iteration  28: 4374086.130 ops/s
Iteration  29: 4323769.077 ops/s
Iteration  30: 4259818.040 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoFloat":
  4424656.617 ±(99.9%) 80093.631 ops/s [Average]
  (min, avg, max) = (4228296.392, 4424656.617, 4652083.817), stdev = 119880.386
  CI (99.9%): [4344562.986, 4504750.248] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  4424656.617 ± 80093.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1780333.304 ops/s
# Warmup Iteration   2: 4209108.846 ops/s
# Warmup Iteration   3: 4046557.048 ops/s
# Warmup Iteration   4: 3311803.571 ops/s
# Warmup Iteration   5: 4384768.117 ops/s
# Warmup Iteration   6: 4325528.277 ops/s
# Warmup Iteration   7: 4271345.634 ops/s
# Warmup Iteration   8: 4240979.264 ops/s
# Warmup Iteration   9: 4254509.924 ops/s
# Warmup Iteration  10: 4275298.565 ops/s
# Warmup Iteration  11: 4407702.024 ops/s
# Warmup Iteration  12: 4320300.510 ops/s
# Warmup Iteration  13: 4442272.007 ops/s
# Warmup Iteration  14: 4297202.967 ops/s
# Warmup Iteration  15: 4218593.621 ops/s
# Warmup Iteration  16: 4270819.476 ops/s
# Warmup Iteration  17: 4234791.349 ops/s
# Warmup Iteration  18: 4166122.288 ops/s
# Warmup Iteration  19: 4262736.602 ops/s
# Warmup Iteration  20: 4011140.943 ops/s
# Warmup Iteration  21: 4125821.369 ops/s
# Warmup Iteration  22: 4420515.217 ops/s
# Warmup Iteration  23: 4183312.797 ops/s
# Warmup Iteration  24: 4136961.154 ops/s
# Warmup Iteration  25: 4271356.161 ops/s
# Warmup Iteration  26: 4316039.806 ops/s
# Warmup Iteration  27: 4244499.892 ops/s
# Warmup Iteration  28: 4089440.731 ops/s
# Warmup Iteration  29: 4065545.579 ops/s
# Warmup Iteration  30: 4105431.753 ops/s
Iteration   1: 4106031.524 ops/s
Iteration   2: 4127692.627 ops/s
Iteration   3: 4050467.778 ops/s
Iteration   4: 4093135.424 ops/s
Iteration   5: 4068637.720 ops/s
Iteration   6: 4310273.659 ops/s
Iteration   7: 4412159.583 ops/s
Iteration   8: 4094498.912 ops/s
Iteration   9: 4064771.053 ops/s
Iteration  10: 4037678.936 ops/s
Iteration  11: 4222925.588 ops/s
Iteration  12: 4350676.076 ops/s
Iteration  13: 4197355.192 ops/s
Iteration  14: 4287922.710 ops/s
Iteration  15: 4435611.885 ops/s
Iteration  16: 4171539.555 ops/s
Iteration  17: 4102061.869 ops/s
Iteration  18: 4348889.635 ops/s
Iteration  19: 4439222.216 ops/s
Iteration  20: 4447009.566 ops/s
Iteration  21: 4214462.858 ops/s
Iteration  22: 4137840.096 ops/s
Iteration  23: 4464911.106 ops/s
Iteration  24: 4128254.086 ops/s
Iteration  25: 4083185.357 ops/s
Iteration  26: 4036849.243 ops/s
Iteration  27: 4133192.733 ops/s
Iteration  28: 4032355.051 ops/s
Iteration  29: 4166860.370 ops/s
Iteration  30: 4031293.135 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoInt":
  4193258.851 ±(99.9%) 95759.664 ops/s [Average]
  (min, avg, max) = (4031293.135, 4193258.851, 4464911.106), stdev = 143328.568
  CI (99.9%): [4097499.187, 4289018.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoInt  thrpt   30  4193258.851 ± 95759.664  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 984743.090 ops/s
# Warmup Iteration   2: 2287324.728 ops/s
# Warmup Iteration   3: 2224915.063 ops/s
# Warmup Iteration   4: 1897284.725 ops/s
# Warmup Iteration   5: 2288768.701 ops/s
# Warmup Iteration   6: 2218987.121 ops/s
# Warmup Iteration   7: 2319772.148 ops/s
# Warmup Iteration   8: 2433273.348 ops/s
# Warmup Iteration   9: 2265107.437 ops/s
# Warmup Iteration  10: 2439560.133 ops/s
# Warmup Iteration  11: 2401727.527 ops/s
# Warmup Iteration  12: 2253629.577 ops/s
# Warmup Iteration  13: 2309234.879 ops/s
# Warmup Iteration  14: 2230086.331 ops/s
# Warmup Iteration  15: 2381376.823 ops/s
# Warmup Iteration  16: 2237504.472 ops/s
# Warmup Iteration  17: 2218776.453 ops/s
# Warmup Iteration  18: 2255372.626 ops/s
# Warmup Iteration  19: 2309888.992 ops/s
# Warmup Iteration  20: 2325619.513 ops/s
# Warmup Iteration  21: 2358768.921 ops/s
# Warmup Iteration  22: 2443030.914 ops/s
# Warmup Iteration  23: 2430588.473 ops/s
# Warmup Iteration  24: 2314950.719 ops/s
# Warmup Iteration  25: 2218454.293 ops/s
# Warmup Iteration  26: 2256672.188 ops/s
# Warmup Iteration  27: 2409501.615 ops/s
# Warmup Iteration  28: 2305593.488 ops/s
# Warmup Iteration  29: 2325707.868 ops/s
# Warmup Iteration  30: 2380249.125 ops/s
Iteration   1: 2286418.651 ops/s
Iteration   2: 2448175.725 ops/s
Iteration   3: 2321766.931 ops/s
Iteration   4: 2250011.462 ops/s
Iteration   5: 2262716.633 ops/s
Iteration   6: 2332636.207 ops/s
Iteration   7: 2438273.724 ops/s
Iteration   8: 2451240.841 ops/s
Iteration   9: 2258422.492 ops/s
Iteration  10: 2375331.185 ops/s
Iteration  11: 2313404.775 ops/s
Iteration  12: 2220228.867 ops/s
Iteration  13: 2332200.037 ops/s
Iteration  14: 2325866.704 ops/s
Iteration  15: 2289150.618 ops/s
Iteration  16: 2353077.264 ops/s
Iteration  17: 2308048.780 ops/s
Iteration  18: 2199274.527 ops/s
Iteration  19: 2271156.575 ops/s
Iteration  20: 2411612.918 ops/s
Iteration  21: 2345106.124 ops/s
Iteration  22: 2388510.930 ops/s
Iteration  23: 2315294.963 ops/s
Iteration  24: 2256906.229 ops/s
Iteration  25: 2344920.300 ops/s
Iteration  26: 2436096.876 ops/s
Iteration  27: 2253241.254 ops/s
Iteration  28: 2297745.391 ops/s
Iteration  29: 2193149.122 ops/s
Iteration  30: 2343667.525 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoKeyValue":
  2320788.454 ±(99.9%) 47518.774 ops/s [Average]
  (min, avg, max) = (2193149.122, 2320788.454, 2451240.841), stdev = 71123.870
  CI (99.9%): [2273269.680, 2368307.229] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoKeyValue  thrpt   30  2320788.454 ± 47518.774  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1734239.079 ops/s
# Warmup Iteration   2: 4379857.773 ops/s
# Warmup Iteration   3: 4536390.414 ops/s
# Warmup Iteration   4: 3605751.644 ops/s
# Warmup Iteration   5: 4126638.387 ops/s
# Warmup Iteration   6: 4557079.223 ops/s
# Warmup Iteration   7: 4324266.109 ops/s
# Warmup Iteration   8: 4478655.311 ops/s
# Warmup Iteration   9: 4573017.084 ops/s
# Warmup Iteration  10: 4401556.362 ops/s
# Warmup Iteration  11: 4208371.810 ops/s
# Warmup Iteration  12: 4233704.207 ops/s
# Warmup Iteration  13: 4209900.148 ops/s
# Warmup Iteration  14: 4143731.111 ops/s
# Warmup Iteration  15: 4168468.155 ops/s
# Warmup Iteration  16: 4337993.537 ops/s
# Warmup Iteration  17: 4161060.277 ops/s
# Warmup Iteration  18: 4190062.776 ops/s
# Warmup Iteration  19: 4245611.257 ops/s
# Warmup Iteration  20: 4142487.214 ops/s
# Warmup Iteration  21: 4270893.329 ops/s
# Warmup Iteration  22: 4369695.042 ops/s
# Warmup Iteration  23: 4269869.697 ops/s
# Warmup Iteration  24: 4248041.772 ops/s
# Warmup Iteration  25: 4497507.519 ops/s
# Warmup Iteration  26: 4311824.022 ops/s
# Warmup Iteration  27: 4145022.512 ops/s
# Warmup Iteration  28: 4509354.306 ops/s
# Warmup Iteration  29: 4168678.798 ops/s
# Warmup Iteration  30: 4179469.470 ops/s
Iteration   1: 4207198.262 ops/s
Iteration   2: 4323617.851 ops/s
Iteration   3: 4375305.397 ops/s
Iteration   4: 4160747.447 ops/s
Iteration   5: 4341427.694 ops/s
Iteration   6: 4565546.638 ops/s
Iteration   7: 4555628.372 ops/s
Iteration   8: 4513789.960 ops/s
Iteration   9: 4158573.238 ops/s
Iteration  10: 4131428.912 ops/s
Iteration  11: 4144218.930 ops/s
Iteration  12: 4247919.555 ops/s
Iteration  13: 4228752.780 ops/s
Iteration  14: 4187413.069 ops/s
Iteration  15: 4299661.085 ops/s
Iteration  16: 4242951.252 ops/s
Iteration  17: 4249469.292 ops/s
Iteration  18: 4256017.021 ops/s
Iteration  19: 4237247.235 ops/s
Iteration  20: 4298418.759 ops/s
Iteration  21: 4368595.262 ops/s
Iteration  22: 4397700.359 ops/s
Iteration  23: 4262517.191 ops/s
Iteration  24: 4132301.181 ops/s
Iteration  25: 4286304.397 ops/s
Iteration  26: 4243872.937 ops/s
Iteration  27: 4235609.732 ops/s
Iteration  28: 4320207.925 ops/s
Iteration  29: 4222604.342 ops/s
Iteration  30: 4452555.350 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoLong":
  4288253.381 ±(99.9%) 78381.753 ops/s [Average]
  (min, avg, max) = (4131428.912, 4288253.381, 4565546.638), stdev = 117318.127
  CI (99.9%): [4209871.628, 4366635.134] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_injectIntoLong  thrpt   30  4288253.381 ± 78381.753  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_into$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_into

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 981649.346 ops/s
# Warmup Iteration   2: 2343451.435 ops/s
# Warmup Iteration   3: 2686021.877 ops/s
# Warmup Iteration   4: 2137541.596 ops/s
# Warmup Iteration   5: 2722300.716 ops/s
# Warmup Iteration   6: 2666505.900 ops/s
# Warmup Iteration   7: 2607212.102 ops/s
# Warmup Iteration   8: 2551439.624 ops/s
# Warmup Iteration   9: 2600124.253 ops/s
# Warmup Iteration  10: 2718178.506 ops/s
# Warmup Iteration  11: 2624390.259 ops/s
# Warmup Iteration  12: 2503505.239 ops/s
# Warmup Iteration  13: 2584659.059 ops/s
# Warmup Iteration  14: 2518834.076 ops/s
# Warmup Iteration  15: 2479408.492 ops/s
# Warmup Iteration  16: 2518060.329 ops/s
# Warmup Iteration  17: 2623206.250 ops/s
# Warmup Iteration  18: 2694728.805 ops/s
# Warmup Iteration  19: 2619134.296 ops/s
# Warmup Iteration  20: 2697337.144 ops/s
# Warmup Iteration  21: 2734573.183 ops/s
# Warmup Iteration  22: 2712098.412 ops/s
# Warmup Iteration  23: 2518810.802 ops/s
# Warmup Iteration  24: 2455559.233 ops/s
# Warmup Iteration  25: 2492522.850 ops/s
# Warmup Iteration  26: 2474676.391 ops/s
# Warmup Iteration  27: 2541687.073 ops/s
# Warmup Iteration  28: 2541044.280 ops/s
# Warmup Iteration  29: 2487309.795 ops/s
# Warmup Iteration  30: 2492950.774 ops/s
Iteration   1: 2508192.949 ops/s
Iteration   2: 2522248.307 ops/s
Iteration   3: 2487768.511 ops/s
Iteration   4: 2591490.613 ops/s
Iteration   5: 2647131.030 ops/s
Iteration   6: 2729848.385 ops/s
Iteration   7: 2594759.551 ops/s
Iteration   8: 2561116.400 ops/s
Iteration   9: 2599825.376 ops/s
Iteration  10: 2582171.961 ops/s
Iteration  11: 2702905.671 ops/s
Iteration  12: 2734062.342 ops/s
Iteration  13: 2729954.452 ops/s
Iteration  14: 2722489.858 ops/s
Iteration  15: 2513773.981 ops/s
Iteration  16: 2508843.287 ops/s
Iteration  17: 2646061.990 ops/s
Iteration  18: 2675253.324 ops/s
Iteration  19: 2488501.479 ops/s
Iteration  20: 2502448.174 ops/s
Iteration  21: 2483989.214 ops/s
Iteration  22: 2457658.453 ops/s
Iteration  23: 2443601.503 ops/s
Iteration  24: 2482205.019 ops/s
Iteration  25: 2672632.882 ops/s
Iteration  26: 2628973.995 ops/s
Iteration  27: 2505168.987 ops/s
Iteration  28: 2514713.753 ops/s
Iteration  29: 2598352.617 ops/s
Iteration  30: 2528782.530 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_into":
  2578830.886 ±(99.9%) 60789.700 ops/s [Average]
  (min, avg, max) = (2443601.503, 2578830.886, 2734062.342), stdev = 90987.168
  CI (99.9%): [2518041.187, 2639620.586] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_into  thrpt   30  2578830.886 ± 60789.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1482070.877 ops/s
# Warmup Iteration   2: 3273734.127 ops/s
# Warmup Iteration   3: 2698510.239 ops/s
# Warmup Iteration   4: 3249574.050 ops/s
# Warmup Iteration   5: 3291332.371 ops/s
# Warmup Iteration   6: 3212500.260 ops/s
# Warmup Iteration   7: 3279414.129 ops/s
# Warmup Iteration   8: 3254227.994 ops/s
# Warmup Iteration   9: 3218099.498 ops/s
# Warmup Iteration  10: 3219140.195 ops/s
# Warmup Iteration  11: 3354743.298 ops/s
# Warmup Iteration  12: 3338400.165 ops/s
# Warmup Iteration  13: 3224991.925 ops/s
# Warmup Iteration  14: 3390550.618 ops/s
# Warmup Iteration  15: 3533872.986 ops/s
# Warmup Iteration  16: 3478325.604 ops/s
# Warmup Iteration  17: 3523950.974 ops/s
# Warmup Iteration  18: 3413242.512 ops/s
# Warmup Iteration  19: 3321486.069 ops/s
# Warmup Iteration  20: 3411148.939 ops/s
# Warmup Iteration  21: 3333052.472 ops/s
# Warmup Iteration  22: 3456004.032 ops/s
# Warmup Iteration  23: 3245361.539 ops/s
# Warmup Iteration  24: 3223751.101 ops/s
# Warmup Iteration  25: 3248127.636 ops/s
# Warmup Iteration  26: 3423616.686 ops/s
# Warmup Iteration  27: 3300882.360 ops/s
# Warmup Iteration  28: 3381710.288 ops/s
# Warmup Iteration  29: 3249075.998 ops/s
# Warmup Iteration  30: 3257654.245 ops/s
Iteration   1: 3277506.602 ops/s
Iteration   2: 3377529.224 ops/s
Iteration   3: 3435783.239 ops/s
Iteration   4: 3273627.633 ops/s
Iteration   5: 3271613.890 ops/s
Iteration   6: 3277918.089 ops/s
Iteration   7: 3297095.063 ops/s
Iteration   8: 3533461.925 ops/s
Iteration   9: 3538291.522 ops/s
Iteration  10: 3516200.169 ops/s
Iteration  11: 3498851.513 ops/s
Iteration  12: 3241148.841 ops/s
Iteration  13: 3245581.565 ops/s
Iteration  14: 3245978.011 ops/s
Iteration  15: 3187778.651 ops/s
Iteration  16: 3250959.693 ops/s
Iteration  17: 3349214.513 ops/s
Iteration  18: 3516634.747 ops/s
Iteration  19: 3486874.665 ops/s
Iteration  20: 3221463.892 ops/s
Iteration  21: 3285420.384 ops/s
Iteration  22: 3230647.308 ops/s
Iteration  23: 3208561.814 ops/s
Iteration  24: 3345531.492 ops/s
Iteration  25: 3254069.828 ops/s
Iteration  26: 3375375.425 ops/s
Iteration  27: 3289904.746 ops/s
Iteration  28: 3447051.547 ops/s
Iteration  29: 3523707.181 ops/s
Iteration  30: 3391444.258 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_isEmpty":
  3346507.581 ±(99.9%) 76257.296 ops/s [Average]
  (min, avg, max) = (3187778.651, 3346507.581, 3538291.522), stdev = 114138.339
  CI (99.9%): [3270250.285, 3422764.877] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_isEmpty  thrpt   30  3346507.581 ± 76257.296  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63630.109 ops/s
# Warmup Iteration   2: 70042.477 ops/s
# Warmup Iteration   3: 70201.907 ops/s
# Warmup Iteration   4: 82304.980 ops/s
# Warmup Iteration   5: 88696.844 ops/s
# Warmup Iteration   6: 85401.303 ops/s
# Warmup Iteration   7: 83477.809 ops/s
# Warmup Iteration   8: 82885.407 ops/s
# Warmup Iteration   9: 88289.372 ops/s
# Warmup Iteration  10: 85272.387 ops/s
# Warmup Iteration  11: 84934.275 ops/s
# Warmup Iteration  12: 83720.201 ops/s
# Warmup Iteration  13: 85459.612 ops/s
# Warmup Iteration  14: 85642.590 ops/s
# Warmup Iteration  15: 85196.838 ops/s
# Warmup Iteration  16: 84702.016 ops/s
# Warmup Iteration  17: 86427.185 ops/s
# Warmup Iteration  18: 85868.145 ops/s
# Warmup Iteration  19: 75658.964 ops/s
# Warmup Iteration  20: 82319.633 ops/s
# Warmup Iteration  21: 87498.533 ops/s
# Warmup Iteration  22: 88326.550 ops/s
# Warmup Iteration  23: 85729.972 ops/s
# Warmup Iteration  24: 86182.131 ops/s
# Warmup Iteration  25: 86835.644 ops/s
# Warmup Iteration  26: 90506.372 ops/s
# Warmup Iteration  27: 90596.092 ops/s
# Warmup Iteration  28: 85913.160 ops/s
# Warmup Iteration  29: 86950.618 ops/s
# Warmup Iteration  30: 86198.236 ops/s
Iteration   1: 85575.044 ops/s
Iteration   2: 86443.414 ops/s
Iteration   3: 87319.485 ops/s
Iteration   4: 85230.693 ops/s
Iteration   5: 86552.545 ops/s
Iteration   6: 89002.270 ops/s
Iteration   7: 89880.965 ops/s
Iteration   8: 87563.265 ops/s
Iteration   9: 84714.708 ops/s
Iteration  10: 86522.587 ops/s
Iteration  11: 86390.077 ops/s
Iteration  12: 86751.271 ops/s
Iteration  13: 87968.511 ops/s
Iteration  14: 85659.073 ops/s
Iteration  15: 85727.914 ops/s
Iteration  16: 86010.395 ops/s
Iteration  17: 85899.213 ops/s
Iteration  18: 86007.293 ops/s
Iteration  19: 86928.518 ops/s
Iteration  20: 86033.210 ops/s
Iteration  21: 86479.933 ops/s
Iteration  22: 85362.275 ops/s
Iteration  23: 85973.133 ops/s
Iteration  24: 86508.726 ops/s
Iteration  25: 86214.972 ops/s
Iteration  26: 87029.305 ops/s
Iteration  27: 86623.942 ops/s
Iteration  28: 87302.051 ops/s
Iteration  29: 86415.969 ops/s
Iteration  30: 85966.523 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_iterator":
  86535.243 ±(99.9%) 710.340 ops/s [Average]
  (min, avg, max) = (84714.708, 86535.243, 89880.965), stdev = 1063.204
  CI (99.9%): [85824.902, 87245.583] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt      Score     Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_iterator  thrpt   30  86535.243 ± 710.340  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keyPreservation$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keyPreservation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 92000.954 ops/s
# Warmup Iteration   2: 152209.344 ops/s
# Warmup Iteration   3: 180239.221 ops/s
# Warmup Iteration   4: 180660.827 ops/s
# Warmup Iteration   5: 184655.153 ops/s
# Warmup Iteration   6: 184430.229 ops/s
# Warmup Iteration   7: 150464.232 ops/s
# Warmup Iteration   8: 183503.953 ops/s
# Warmup Iteration   9: 182270.685 ops/s
# Warmup Iteration  10: 184451.277 ops/s
# Warmup Iteration  11: 183313.572 ops/s
# Warmup Iteration  12: 184287.926 ops/s
# Warmup Iteration  13: 185524.873 ops/s
# Warmup Iteration  14: 185150.551 ops/s
# Warmup Iteration  15: 184053.460 ops/s
# Warmup Iteration  16: 181483.637 ops/s
# Warmup Iteration  17: 181500.147 ops/s
# Warmup Iteration  18: 189058.201 ops/s
# Warmup Iteration  19: 181444.047 ops/s
# Warmup Iteration  20: 185018.168 ops/s
# Warmup Iteration  21: 187536.462 ops/s
# Warmup Iteration  22: 186011.641 ops/s
# Warmup Iteration  23: 189483.130 ops/s
# Warmup Iteration  24: 181625.781 ops/s
# Warmup Iteration  25: 182700.225 ops/s
# Warmup Iteration  26: 196972.097 ops/s
# Warmup Iteration  27: 198883.980 ops/s
# Warmup Iteration  28: 192864.488 ops/s
# Warmup Iteration  29: 189170.493 ops/s
# Warmup Iteration  30: 190976.672 ops/s
Iteration   1: 187268.616 ops/s
Iteration   2: 182878.164 ops/s
Iteration   3: 186105.844 ops/s
Iteration   4: 181911.899 ops/s
Iteration   5: 182740.109 ops/s
Iteration   6: 186857.910 ops/s
Iteration   7: 187241.800 ops/s
Iteration   8: 182066.977 ops/s
Iteration   9: 191788.142 ops/s
Iteration  10: 197325.891 ops/s
Iteration  11: 198796.986 ops/s
Iteration  12: 199932.234 ops/s
Iteration  13: 183338.813 ops/s
Iteration  14: 188554.276 ops/s
Iteration  15: 199334.095 ops/s
Iteration  16: 190404.720 ops/s
Iteration  17: 196923.407 ops/s
Iteration  18: 178897.140 ops/s
Iteration  19: 188184.786 ops/s
Iteration  20: 190832.098 ops/s
Iteration  21: 187105.310 ops/s
Iteration  22: 183940.915 ops/s
Iteration  23: 183049.268 ops/s
Iteration  24: 190001.957 ops/s
Iteration  25: 199367.771 ops/s
Iteration  26: 197178.394 ops/s
Iteration  27: 196916.406 ops/s
Iteration  28: 199533.223 ops/s
Iteration  29: 196529.329 ops/s
Iteration  30: 191661.652 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keyPreservation":
  190222.271 ±(99.9%) 4349.460 ops/s [Average]
  (min, avg, max) = (178897.140, 190222.271, 199932.234), stdev = 6510.068
  CI (99.9%): [185872.811, 194571.731] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keyPreservation  thrpt   30  190222.271 ± 4349.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keySetEqualsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keySetEqualsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 615122.735 ops/s
# Warmup Iteration   2: 1208648.612 ops/s
# Warmup Iteration   3: 1313111.652 ops/s
# Warmup Iteration   4: 1273153.863 ops/s
# Warmup Iteration   5: 1190621.278 ops/s
# Warmup Iteration   6: 1121397.025 ops/s
# Warmup Iteration   7: 1204058.031 ops/s
# Warmup Iteration   8: 1232089.867 ops/s
# Warmup Iteration   9: 1218764.328 ops/s
# Warmup Iteration  10: 1288429.356 ops/s
# Warmup Iteration  11: 1234002.419 ops/s
# Warmup Iteration  12: 1216295.571 ops/s
# Warmup Iteration  13: 1329455.800 ops/s
# Warmup Iteration  14: 1211604.868 ops/s
# Warmup Iteration  15: 1221453.736 ops/s
# Warmup Iteration  16: 1238813.506 ops/s
# Warmup Iteration  17: 1233636.076 ops/s
# Warmup Iteration  18: 1243471.663 ops/s
# Warmup Iteration  19: 1261114.952 ops/s
# Warmup Iteration  20: 1221720.345 ops/s
# Warmup Iteration  21: 1264415.274 ops/s
# Warmup Iteration  22: 1304687.150 ops/s
# Warmup Iteration  23: 1302542.293 ops/s
# Warmup Iteration  24: 1256379.492 ops/s
# Warmup Iteration  25: 1220606.224 ops/s
# Warmup Iteration  26: 1226227.725 ops/s
# Warmup Iteration  27: 1219434.677 ops/s
# Warmup Iteration  28: 1216489.290 ops/s
# Warmup Iteration  29: 1203118.932 ops/s
# Warmup Iteration  30: 1218004.462 ops/s
Iteration   1: 1204854.576 ops/s
Iteration   2: 1244694.203 ops/s
Iteration   3: 1183317.663 ops/s
Iteration   4: 1207543.505 ops/s
Iteration   5: 1209303.579 ops/s
Iteration   6: 1198809.481 ops/s
Iteration   7: 1216317.125 ops/s
Iteration   8: 1220735.091 ops/s
Iteration   9: 1238129.390 ops/s
Iteration  10: 1199867.510 ops/s
Iteration  11: 1215558.067 ops/s
Iteration  12: 1262208.097 ops/s
Iteration  13: 1260042.370 ops/s
Iteration  14: 1220286.614 ops/s
Iteration  15: 1241116.023 ops/s
Iteration  16: 1215160.659 ops/s
Iteration  17: 1220440.539 ops/s
Iteration  18: 1234348.544 ops/s
Iteration  19: 1211537.830 ops/s
Iteration  20: 1216360.413 ops/s
Iteration  21: 1209103.978 ops/s
Iteration  22: 1225616.146 ops/s
Iteration  23: 1222579.366 ops/s
Iteration  24: 1216544.771 ops/s
Iteration  25: 1229305.065 ops/s
Iteration  26: 1230062.847 ops/s
Iteration  27: 1224222.397 ops/s
Iteration  28: 1203448.152 ops/s
Iteration  29: 1265667.084 ops/s
Iteration  30: 1257519.617 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keySetEqualsAndHashCode":
  1223490.023 ±(99.9%) 13358.079 ops/s [Average]
  (min, avg, max) = (1183317.663, 1223490.023, 1265667.084), stdev = 19993.746
  CI (99.9%): [1210131.944, 1236848.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keySetEqualsAndHashCode  thrpt   30  1223490.023 ± 13358.079  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keySetToArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keySetToArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1013173.740 ops/s
# Warmup Iteration   2: 2036814.212 ops/s
# Warmup Iteration   3: 2218770.301 ops/s
# Warmup Iteration   4: 2255768.487 ops/s
# Warmup Iteration   5: 1867016.681 ops/s
# Warmup Iteration   6: 2239062.450 ops/s
# Warmup Iteration   7: 2268845.837 ops/s
# Warmup Iteration   8: 2228937.757 ops/s
# Warmup Iteration   9: 2284116.993 ops/s
# Warmup Iteration  10: 2390112.174 ops/s
# Warmup Iteration  11: 2290440.616 ops/s
# Warmup Iteration  12: 2273272.687 ops/s
# Warmup Iteration  13: 2248035.020 ops/s
# Warmup Iteration  14: 2233904.668 ops/s
# Warmup Iteration  15: 2242719.909 ops/s
# Warmup Iteration  16: 2252416.269 ops/s
# Warmup Iteration  17: 2241799.953 ops/s
# Warmup Iteration  18: 2238998.936 ops/s
# Warmup Iteration  19: 2383739.682 ops/s
# Warmup Iteration  20: 2320239.995 ops/s
# Warmup Iteration  21: 2285820.419 ops/s
# Warmup Iteration  22: 2247609.596 ops/s
# Warmup Iteration  23: 2255106.145 ops/s
# Warmup Iteration  24: 2224117.390 ops/s
# Warmup Iteration  25: 2267189.921 ops/s
# Warmup Iteration  26: 2344953.499 ops/s
# Warmup Iteration  27: 2340288.465 ops/s
# Warmup Iteration  28: 2354516.311 ops/s
# Warmup Iteration  29: 2334788.520 ops/s
# Warmup Iteration  30: 2363581.661 ops/s
Iteration   1: 2419455.987 ops/s
Iteration   2: 2421387.388 ops/s
Iteration   3: 2422157.675 ops/s
Iteration   4: 2462914.161 ops/s
Iteration   5: 2407224.434 ops/s
Iteration   6: 2423673.594 ops/s
Iteration   7: 2415036.415 ops/s
Iteration   8: 2426635.044 ops/s
Iteration   9: 2390932.223 ops/s
Iteration  10: 2413648.149 ops/s
Iteration  11: 2445115.961 ops/s
Iteration  12: 2424692.863 ops/s
Iteration  13: 2381269.563 ops/s
Iteration  14: 2456048.178 ops/s
Iteration  15: 2459448.235 ops/s
Iteration  16: 2457422.721 ops/s
Iteration  17: 2459533.844 ops/s
Iteration  18: 2455570.726 ops/s
Iteration  19: 2451761.026 ops/s
Iteration  20: 2454036.138 ops/s
Iteration  21: 2467378.872 ops/s
Iteration  22: 2461841.990 ops/s
Iteration  23: 2463142.491 ops/s
Iteration  24: 2466845.303 ops/s
Iteration  25: 2467904.947 ops/s
Iteration  26: 2452288.639 ops/s
Iteration  27: 2459136.264 ops/s
Iteration  28: 2459084.804 ops/s
Iteration  29: 2466858.608 ops/s
Iteration  30: 2456081.504 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keySetToArray":
  2442284.258 ±(99.9%) 16380.158 ops/s [Average]
  (min, avg, max) = (2381269.563, 2442284.258, 2467904.947), stdev = 24517.051
  CI (99.9%): [2425904.100, 2458664.416] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keySetToArray  thrpt   30  2442284.258 ± 16380.158  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keyValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keyValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 619542.012 ops/s
# Warmup Iteration   2: 1501073.646 ops/s
# Warmup Iteration   3: 1572768.185 ops/s
# Warmup Iteration   4: 1335636.750 ops/s
# Warmup Iteration   5: 1551839.745 ops/s
# Warmup Iteration   6: 1514571.697 ops/s
# Warmup Iteration   7: 1533954.702 ops/s
# Warmup Iteration   8: 1562107.106 ops/s
# Warmup Iteration   9: 1583943.777 ops/s
# Warmup Iteration  10: 1591276.470 ops/s
# Warmup Iteration  11: 1595770.722 ops/s
# Warmup Iteration  12: 1566861.735 ops/s
# Warmup Iteration  13: 1577215.110 ops/s
# Warmup Iteration  14: 1576667.423 ops/s
# Warmup Iteration  15: 1607314.100 ops/s
# Warmup Iteration  16: 1605074.150 ops/s
# Warmup Iteration  17: 1576951.735 ops/s
# Warmup Iteration  18: 1593724.712 ops/s
# Warmup Iteration  19: 1600699.580 ops/s
# Warmup Iteration  20: 1603363.344 ops/s
# Warmup Iteration  21: 1603712.794 ops/s
# Warmup Iteration  22: 1602527.904 ops/s
# Warmup Iteration  23: 1599909.024 ops/s
# Warmup Iteration  24: 1583263.260 ops/s
# Warmup Iteration  25: 1587437.799 ops/s
# Warmup Iteration  26: 1607382.294 ops/s
# Warmup Iteration  27: 1603899.733 ops/s
# Warmup Iteration  28: 1588551.473 ops/s
# Warmup Iteration  29: 1607703.027 ops/s
# Warmup Iteration  30: 1595811.845 ops/s
Iteration   1: 1595031.978 ops/s
Iteration   2: 1584033.735 ops/s
Iteration   3: 1561535.409 ops/s
Iteration   4: 1551592.148 ops/s
Iteration   5: 1549860.790 ops/s
Iteration   6: 1525978.189 ops/s
Iteration   7: 1568961.089 ops/s
Iteration   8: 1611623.148 ops/s
Iteration   9: 1602856.408 ops/s
Iteration  10: 1602776.923 ops/s
Iteration  11: 1599786.835 ops/s
Iteration  12: 1588308.033 ops/s
Iteration  13: 1595740.708 ops/s
Iteration  14: 1587411.471 ops/s
Iteration  15: 1584606.566 ops/s
Iteration  16: 1592082.981 ops/s
Iteration  17: 1586953.778 ops/s
Iteration  18: 1592917.680 ops/s
Iteration  19: 1604038.014 ops/s
Iteration  20: 1607207.950 ops/s
Iteration  21: 1607047.425 ops/s
Iteration  22: 1600322.839 ops/s
Iteration  23: 1593379.914 ops/s
Iteration  24: 1593778.428 ops/s
Iteration  25: 1607194.326 ops/s
Iteration  26: 1592211.282 ops/s
Iteration  27: 1600630.045 ops/s
Iteration  28: 1599680.881 ops/s
Iteration  29: 1603971.129 ops/s
Iteration  30: 1591197.148 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keyValuesView":
  1589423.908 ±(99.9%) 13067.863 ops/s [Average]
  (min, avg, max) = (1525978.189, 1589423.908, 1611623.148), stdev = 19559.364
  CI (99.9%): [1576356.045, 1602491.772] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keyValuesView  thrpt   30  1589423.908 ± 13067.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keysAndValues_toString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keysAndValues_toString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 343771.167 ops/s
# Warmup Iteration   2: 788200.969 ops/s
# Warmup Iteration   3: 899531.101 ops/s
# Warmup Iteration   4: 904311.136 ops/s
# Warmup Iteration   5: 752665.059 ops/s
# Warmup Iteration   6: 904294.968 ops/s
# Warmup Iteration   7: 894591.351 ops/s
# Warmup Iteration   8: 844406.319 ops/s
# Warmup Iteration   9: 888938.357 ops/s
# Warmup Iteration  10: 868753.317 ops/s
# Warmup Iteration  11: 885790.593 ops/s
# Warmup Iteration  12: 867772.517 ops/s
# Warmup Iteration  13: 861509.298 ops/s
# Warmup Iteration  14: 853176.921 ops/s
# Warmup Iteration  15: 819388.626 ops/s
# Warmup Iteration  16: 830251.390 ops/s
# Warmup Iteration  17: 860847.214 ops/s
# Warmup Iteration  18: 848755.961 ops/s
# Warmup Iteration  19: 872309.961 ops/s
# Warmup Iteration  20: 835867.538 ops/s
# Warmup Iteration  21: 865716.027 ops/s
# Warmup Iteration  22: 856381.273 ops/s
# Warmup Iteration  23: 892474.166 ops/s
# Warmup Iteration  24: 860283.019 ops/s
# Warmup Iteration  25: 894366.738 ops/s
# Warmup Iteration  26: 883048.270 ops/s
# Warmup Iteration  27: 894349.244 ops/s
# Warmup Iteration  28: 898696.954 ops/s
# Warmup Iteration  29: 885929.233 ops/s
# Warmup Iteration  30: 894996.906 ops/s
Iteration   1: 891767.977 ops/s
Iteration   2: 889024.162 ops/s
Iteration   3: 902745.683 ops/s
Iteration   4: 851511.556 ops/s
Iteration   5: 835638.110 ops/s
Iteration   6: 870432.500 ops/s
Iteration   7: 833052.250 ops/s
Iteration   8: 838513.136 ops/s
Iteration   9: 844595.792 ops/s
Iteration  10: 817244.871 ops/s
Iteration  11: 849246.411 ops/s
Iteration  12: 853333.581 ops/s
Iteration  13: 825318.534 ops/s
Iteration  14: 824832.596 ops/s
Iteration  15: 862632.920 ops/s
Iteration  16: 853235.491 ops/s
Iteration  17: 860905.491 ops/s
Iteration  18: 876620.603 ops/s
Iteration  19: 880566.548 ops/s
Iteration  20: 844025.735 ops/s
Iteration  21: 892607.371 ops/s
Iteration  22: 827980.100 ops/s
Iteration  23: 865287.849 ops/s
Iteration  24: 859799.407 ops/s
Iteration  25: 829952.463 ops/s
Iteration  26: 856277.625 ops/s
Iteration  27: 905831.626 ops/s
Iteration  28: 901261.434 ops/s
Iteration  29: 901904.805 ops/s
Iteration  30: 903182.884 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keysAndValues_toString":
  861644.317 ±(99.9%) 18271.698 ops/s [Average]
  (min, avg, max) = (817244.871, 861644.317, 905831.626), stdev = 27348.219
  CI (99.9%): [843372.619, 879916.015] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keysAndValues_toString  thrpt   30  861644.317 ± 18271.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keysView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keysView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1237176.466 ops/s
# Warmup Iteration   2: 3161602.918 ops/s
# Warmup Iteration   3: 3520410.756 ops/s
# Warmup Iteration   4: 2908177.021 ops/s
# Warmup Iteration   5: 3464952.879 ops/s
# Warmup Iteration   6: 3404468.421 ops/s
# Warmup Iteration   7: 3253329.699 ops/s
# Warmup Iteration   8: 3263297.500 ops/s
# Warmup Iteration   9: 3335761.199 ops/s
# Warmup Iteration  10: 3486470.728 ops/s
# Warmup Iteration  11: 3323517.566 ops/s
# Warmup Iteration  12: 3518847.695 ops/s
# Warmup Iteration  13: 3368514.383 ops/s
# Warmup Iteration  14: 3527967.611 ops/s
# Warmup Iteration  15: 3528044.065 ops/s
# Warmup Iteration  16: 3335630.077 ops/s
# Warmup Iteration  17: 3388833.090 ops/s
# Warmup Iteration  18: 3385660.957 ops/s
# Warmup Iteration  19: 3324776.115 ops/s
# Warmup Iteration  20: 3354588.199 ops/s
# Warmup Iteration  21: 3242910.932 ops/s
# Warmup Iteration  22: 3206203.902 ops/s
# Warmup Iteration  23: 3262206.223 ops/s
# Warmup Iteration  24: 3232809.940 ops/s
# Warmup Iteration  25: 3233763.123 ops/s
# Warmup Iteration  26: 3283171.108 ops/s
# Warmup Iteration  27: 3214815.903 ops/s
# Warmup Iteration  28: 3222664.506 ops/s
# Warmup Iteration  29: 3193152.904 ops/s
# Warmup Iteration  30: 3206271.318 ops/s
Iteration   1: 3280722.225 ops/s
Iteration   2: 3205184.471 ops/s
Iteration   3: 3214071.854 ops/s
Iteration   4: 3216141.130 ops/s
Iteration   5: 3282147.378 ops/s
Iteration   6: 3436928.928 ops/s
Iteration   7: 3526364.365 ops/s
Iteration   8: 3489698.062 ops/s
Iteration   9: 3206344.624 ops/s
Iteration  10: 3246396.406 ops/s
Iteration  11: 3250975.544 ops/s
Iteration  12: 3157511.067 ops/s
Iteration  13: 3169553.393 ops/s
Iteration  14: 3231224.669 ops/s
Iteration  15: 3242345.166 ops/s
Iteration  16: 3225486.886 ops/s
Iteration  17: 3157274.637 ops/s
Iteration  18: 3194388.202 ops/s
Iteration  19: 3334657.003 ops/s
Iteration  20: 3231606.561 ops/s
Iteration  21: 3285738.057 ops/s
Iteration  22: 3207194.410 ops/s
Iteration  23: 3191217.338 ops/s
Iteration  24: 3273702.333 ops/s
Iteration  25: 3254134.990 ops/s
Iteration  26: 3359887.082 ops/s
Iteration  27: 3405799.343 ops/s
Iteration  28: 3314817.303 ops/s
Iteration  29: 3283018.299 ops/s
Iteration  30: 3295841.579 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keysView":
  3272345.777 ±(99.9%) 61816.049 ops/s [Average]
  (min, avg, max) = (3157274.637, 3272345.777, 3526364.365), stdev = 92523.359
  CI (99.9%): [3210529.728, 3334161.826] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_keysView  thrpt   30  3272345.777 ± 61816.049  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 918090.452 ops/s
# Warmup Iteration   2: 2008174.884 ops/s
# Warmup Iteration   3: 2076460.926 ops/s
# Warmup Iteration   4: 1946466.097 ops/s
# Warmup Iteration   5: 1697966.361 ops/s
# Warmup Iteration   6: 2044791.404 ops/s
# Warmup Iteration   7: 2118201.164 ops/s
# Warmup Iteration   8: 2080204.516 ops/s
# Warmup Iteration   9: 2087124.877 ops/s
# Warmup Iteration  10: 2051421.766 ops/s
# Warmup Iteration  11: 2086048.053 ops/s
# Warmup Iteration  12: 1999803.680 ops/s
# Warmup Iteration  13: 2036913.461 ops/s
# Warmup Iteration  14: 2024659.845 ops/s
# Warmup Iteration  15: 1974609.381 ops/s
# Warmup Iteration  16: 2058109.423 ops/s
# Warmup Iteration  17: 2090556.874 ops/s
# Warmup Iteration  18: 2090559.546 ops/s
# Warmup Iteration  19: 2049957.903 ops/s
# Warmup Iteration  20: 1999238.114 ops/s
# Warmup Iteration  21: 2008382.175 ops/s
# Warmup Iteration  22: 2099823.289 ops/s
# Warmup Iteration  23: 2007313.386 ops/s
# Warmup Iteration  24: 1997094.175 ops/s
# Warmup Iteration  25: 1998487.439 ops/s
# Warmup Iteration  26: 2016704.651 ops/s
# Warmup Iteration  27: 2009581.657 ops/s
# Warmup Iteration  28: 2060565.151 ops/s
# Warmup Iteration  29: 1996805.284 ops/s
# Warmup Iteration  30: 2055613.348 ops/s
Iteration   1: 2034456.201 ops/s
Iteration   2: 2002244.865 ops/s
Iteration   3: 2053356.516 ops/s
Iteration   4: 2027294.576 ops/s
Iteration   5: 2042912.572 ops/s
Iteration   6: 1998656.338 ops/s
Iteration   7: 2110028.286 ops/s
Iteration   8: 2033222.567 ops/s
Iteration   9: 2083622.326 ops/s
Iteration  10: 2058512.551 ops/s
Iteration  11: 2029723.071 ops/s
Iteration  12: 1986340.889 ops/s
Iteration  13: 2085372.719 ops/s
Iteration  14: 2044867.886 ops/s
Iteration  15: 1998972.382 ops/s
Iteration  16: 2038688.077 ops/s
Iteration  17: 2086478.465 ops/s
Iteration  18: 2097721.517 ops/s
Iteration  19: 2079257.247 ops/s
Iteration  20: 2003481.767 ops/s
Iteration  21: 2034462.576 ops/s
Iteration  22: 1987355.395 ops/s
Iteration  23: 1997754.991 ops/s
Iteration  24: 2008558.318 ops/s
Iteration  25: 2104536.255 ops/s
Iteration  26: 2030996.626 ops/s
Iteration  27: 2047228.495 ops/s
Iteration  28: 2042172.365 ops/s
Iteration  29: 2097109.989 ops/s
Iteration  30: 2074748.789 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_makeString":
  2044004.487 ±(99.9%) 24718.175 ops/s [Average]
  (min, avg, max) = (1986340.889, 2044004.487, 2110028.286), stdev = 36997.004
  CI (99.9%): [2019286.312, 2068722.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_makeString  thrpt   30  2044004.487 ± 24718.175  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1657707.301 ops/s
# Warmup Iteration   2: 3841092.379 ops/s
# Warmup Iteration   3: 3871626.006 ops/s
# Warmup Iteration   4: 3131979.443 ops/s
# Warmup Iteration   5: 3805053.764 ops/s
# Warmup Iteration   6: 3746621.946 ops/s
# Warmup Iteration   7: 3828532.615 ops/s
# Warmup Iteration   8: 3785136.561 ops/s
# Warmup Iteration   9: 3895045.864 ops/s
# Warmup Iteration  10: 3886753.134 ops/s
# Warmup Iteration  11: 3864542.936 ops/s
# Warmup Iteration  12: 3784214.416 ops/s
# Warmup Iteration  13: 3750491.072 ops/s
# Warmup Iteration  14: 3746276.839 ops/s
# Warmup Iteration  15: 3798148.963 ops/s
# Warmup Iteration  16: 3890074.845 ops/s
# Warmup Iteration  17: 3832560.515 ops/s
# Warmup Iteration  18: 3831868.801 ops/s
# Warmup Iteration  19: 3785054.683 ops/s
# Warmup Iteration  20: 3763633.957 ops/s
# Warmup Iteration  21: 3865489.232 ops/s
# Warmup Iteration  22: 3825047.179 ops/s
# Warmup Iteration  23: 3893205.021 ops/s
# Warmup Iteration  24: 3824006.053 ops/s
# Warmup Iteration  25: 3917528.314 ops/s
# Warmup Iteration  26: 3820369.668 ops/s
# Warmup Iteration  27: 3862446.215 ops/s
# Warmup Iteration  28: 3792343.620 ops/s
# Warmup Iteration  29: 3768476.512 ops/s
# Warmup Iteration  30: 3824552.823 ops/s
Iteration   1: 3758510.478 ops/s
Iteration   2: 3769698.975 ops/s
Iteration   3: 3824592.325 ops/s
Iteration   4: 3773000.106 ops/s
Iteration   5: 3957556.750 ops/s
Iteration   6: 3765714.519 ops/s
Iteration   7: 3813745.494 ops/s
Iteration   8: 3787334.616 ops/s
Iteration   9: 3816437.891 ops/s
Iteration  10: 3854414.026 ops/s
Iteration  11: 3779625.432 ops/s
Iteration  12: 3755894.902 ops/s
Iteration  13: 3772494.614 ops/s
Iteration  14: 3770667.697 ops/s
Iteration  15: 3825102.402 ops/s
Iteration  16: 3893612.122 ops/s
Iteration  17: 3816174.017 ops/s
Iteration  18: 3798417.431 ops/s
Iteration  19: 3748514.254 ops/s
Iteration  20: 3877500.123 ops/s
Iteration  21: 3779345.114 ops/s
Iteration  22: 3718895.768 ops/s
Iteration  23: 3838793.536 ops/s
Iteration  24: 3808838.993 ops/s
Iteration  25: 3780407.411 ops/s
Iteration  26: 3881268.843 ops/s
Iteration  27: 3692288.816 ops/s
Iteration  28: 3769617.759 ops/s
Iteration  29: 3760275.927 ops/s
Iteration  30: 3692204.655 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_max":
  3796031.500 ±(99.9%) 38574.466 ops/s [Average]
  (min, avg, max) = (3692204.655, 3796031.500, 3957556.750), stdev = 57736.450
  CI (99.9%): [3757457.033, 3834605.966] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_max  thrpt   30  3796031.500 ± 38574.466  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1156010.260 ops/s
# Warmup Iteration   2: 2861876.605 ops/s
# Warmup Iteration   3: 2972065.140 ops/s
# Warmup Iteration   4: 2384678.782 ops/s
# Warmup Iteration   5: 2912384.834 ops/s
# Warmup Iteration   6: 2995555.743 ops/s
# Warmup Iteration   7: 3014657.686 ops/s
# Warmup Iteration   8: 2865474.018 ops/s
# Warmup Iteration   9: 2963075.070 ops/s
# Warmup Iteration  10: 2944017.849 ops/s
# Warmup Iteration  11: 2906360.529 ops/s
# Warmup Iteration  12: 2890585.800 ops/s
# Warmup Iteration  13: 2879909.451 ops/s
# Warmup Iteration  14: 2950976.927 ops/s
# Warmup Iteration  15: 2981815.499 ops/s
# Warmup Iteration  16: 2925052.709 ops/s
# Warmup Iteration  17: 2944881.196 ops/s
# Warmup Iteration  18: 2949639.848 ops/s
# Warmup Iteration  19: 3028501.394 ops/s
# Warmup Iteration  20: 3130746.544 ops/s
# Warmup Iteration  21: 3064921.511 ops/s
# Warmup Iteration  22: 3084621.806 ops/s
# Warmup Iteration  23: 2989237.989 ops/s
# Warmup Iteration  24: 3031024.882 ops/s
# Warmup Iteration  25: 2951518.569 ops/s
# Warmup Iteration  26: 2889113.653 ops/s
# Warmup Iteration  27: 2893863.435 ops/s
# Warmup Iteration  28: 2881057.750 ops/s
# Warmup Iteration  29: 3018919.035 ops/s
# Warmup Iteration  30: 2966836.913 ops/s
Iteration   1: 2865060.292 ops/s
Iteration   2: 2985949.752 ops/s
Iteration   3: 2893880.826 ops/s
Iteration   4: 2919233.059 ops/s
Iteration   5: 2927072.325 ops/s
Iteration   6: 2849881.592 ops/s
Iteration   7: 2856967.651 ops/s
Iteration   8: 2905483.534 ops/s
Iteration   9: 2821988.262 ops/s
Iteration  10: 2926468.858 ops/s
Iteration  11: 2800737.207 ops/s
Iteration  12: 2941111.248 ops/s
Iteration  13: 2899052.966 ops/s
Iteration  14: 2834325.841 ops/s
Iteration  15: 2901570.542 ops/s
Iteration  16: 2853177.005 ops/s
Iteration  17: 2862421.826 ops/s
Iteration  18: 2916447.005 ops/s
Iteration  19: 2899092.772 ops/s
Iteration  20: 2848021.563 ops/s
Iteration  21: 2916038.746 ops/s
Iteration  22: 2818077.975 ops/s
Iteration  23: 2923855.681 ops/s
Iteration  24: 2815927.240 ops/s
Iteration  25: 2843239.053 ops/s
Iteration  26: 2802524.603 ops/s
Iteration  27: 2886739.924 ops/s
Iteration  28: 2861316.509 ops/s
Iteration  29: 2837763.655 ops/s
Iteration  30: 2924440.051 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_maxBy":
  2877928.919 ±(99.9%) 30947.758 ops/s [Average]
  (min, avg, max) = (2800737.207, 2877928.919, 2985949.752), stdev = 46321.151
  CI (99.9%): [2846981.161, 2908876.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_maxBy  thrpt   30  2877928.919 ± 30947.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1739325.526 ops/s
# Warmup Iteration   2: 3951624.624 ops/s
# Warmup Iteration   3: 3783169.976 ops/s
# Warmup Iteration   4: 3228520.712 ops/s
# Warmup Iteration   5: 3658775.994 ops/s
# Warmup Iteration   6: 3762588.939 ops/s
# Warmup Iteration   7: 3812221.364 ops/s
# Warmup Iteration   8: 3948679.825 ops/s
# Warmup Iteration   9: 3822604.643 ops/s
# Warmup Iteration  10: 3902581.171 ops/s
# Warmup Iteration  11: 3919003.404 ops/s
# Warmup Iteration  12: 3933334.354 ops/s
# Warmup Iteration  13: 3841671.307 ops/s
# Warmup Iteration  14: 3642431.826 ops/s
# Warmup Iteration  15: 3635035.144 ops/s
# Warmup Iteration  16: 3791483.382 ops/s
# Warmup Iteration  17: 3980970.742 ops/s
# Warmup Iteration  18: 3695706.777 ops/s
# Warmup Iteration  19: 3710235.447 ops/s
# Warmup Iteration  20: 4016674.046 ops/s
# Warmup Iteration  21: 3930304.669 ops/s
# Warmup Iteration  22: 3818119.441 ops/s
# Warmup Iteration  23: 3826496.818 ops/s
# Warmup Iteration  24: 3783265.172 ops/s
# Warmup Iteration  25: 3974895.738 ops/s
# Warmup Iteration  26: 3736818.166 ops/s
# Warmup Iteration  27: 3651397.795 ops/s
# Warmup Iteration  28: 3703265.847 ops/s
# Warmup Iteration  29: 3757974.260 ops/s
# Warmup Iteration  30: 3905368.185 ops/s
Iteration   1: 3908063.917 ops/s
Iteration   2: 3964790.121 ops/s
Iteration   3: 3961022.210 ops/s
Iteration   4: 4010737.537 ops/s
Iteration   5: 4007230.902 ops/s
Iteration   6: 3932299.590 ops/s
Iteration   7: 3600987.351 ops/s
Iteration   8: 3948426.833 ops/s
Iteration   9: 4015367.782 ops/s
Iteration  10: 3976126.332 ops/s
Iteration  11: 3872332.364 ops/s
Iteration  12: 3854441.276 ops/s
Iteration  13: 4025155.721 ops/s
Iteration  14: 4028892.223 ops/s
Iteration  15: 4008231.088 ops/s
Iteration  16: 3819777.306 ops/s
Iteration  17: 3739612.770 ops/s
Iteration  18: 3706712.965 ops/s
Iteration  19: 3999749.620 ops/s
Iteration  20: 3992455.589 ops/s
Iteration  21: 3723952.709 ops/s
Iteration  22: 3761378.958 ops/s
Iteration  23: 3855278.843 ops/s
Iteration  24: 3717491.988 ops/s
Iteration  25: 3856217.243 ops/s
Iteration  26: 3884035.207 ops/s
Iteration  27: 3700583.854 ops/s
Iteration  28: 3597270.133 ops/s
Iteration  29: 3695577.821 ops/s
Iteration  30: 3853474.392 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_min":
  3867255.822 ±(99.9%) 88547.343 ops/s [Average]
  (min, avg, max) = (3597270.133, 3867255.822, 4028892.223), stdev = 132533.504
  CI (99.9%): [3778708.479, 3955803.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_min  thrpt   30  3867255.822 ± 88547.343  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1654457.438 ops/s
# Warmup Iteration   2: 3625575.653 ops/s
# Warmup Iteration   3: 3311200.623 ops/s
# Warmup Iteration   4: 3395147.022 ops/s
# Warmup Iteration   5: 3638673.459 ops/s
# Warmup Iteration   6: 3600745.243 ops/s
# Warmup Iteration   7: 3676150.390 ops/s
# Warmup Iteration   8: 3682911.563 ops/s
# Warmup Iteration   9: 3803125.537 ops/s
# Warmup Iteration  10: 3558162.659 ops/s
# Warmup Iteration  11: 3656952.591 ops/s
# Warmup Iteration  12: 3749794.367 ops/s
# Warmup Iteration  13: 3813724.729 ops/s
# Warmup Iteration  14: 3583039.847 ops/s
# Warmup Iteration  15: 3720718.264 ops/s
# Warmup Iteration  16: 3789960.119 ops/s
# Warmup Iteration  17: 3846956.549 ops/s
# Warmup Iteration  18: 3740697.894 ops/s
# Warmup Iteration  19: 3695072.701 ops/s
# Warmup Iteration  20: 3761474.215 ops/s
# Warmup Iteration  21: 3949084.846 ops/s
# Warmup Iteration  22: 3595314.308 ops/s
# Warmup Iteration  23: 3755984.387 ops/s
# Warmup Iteration  24: 3680170.523 ops/s
# Warmup Iteration  25: 3648430.882 ops/s
# Warmup Iteration  26: 3603029.291 ops/s
# Warmup Iteration  27: 3607317.200 ops/s
# Warmup Iteration  28: 3567030.743 ops/s
# Warmup Iteration  29: 3624814.755 ops/s
# Warmup Iteration  30: 3804340.902 ops/s
Iteration   1: 3953721.307 ops/s
Iteration   2: 3954672.117 ops/s
Iteration   3: 3940246.334 ops/s
Iteration   4: 3950750.007 ops/s
Iteration   5: 3945344.302 ops/s
Iteration   6: 3694852.318 ops/s
Iteration   7: 3759660.576 ops/s
Iteration   8: 3528249.310 ops/s
Iteration   9: 3590999.678 ops/s
Iteration  10: 3600263.088 ops/s
Iteration  11: 3774847.427 ops/s
Iteration  12: 3936567.778 ops/s
Iteration  13: 3943650.508 ops/s
Iteration  14: 3951384.685 ops/s
Iteration  15: 3730909.058 ops/s
Iteration  16: 3770232.038 ops/s
Iteration  17: 3699361.367 ops/s
Iteration  18: 3664007.392 ops/s
Iteration  19: 3566123.356 ops/s
Iteration  20: 3743512.585 ops/s
Iteration  21: 3588192.252 ops/s
Iteration  22: 3707103.810 ops/s
Iteration  23: 3603209.164 ops/s
Iteration  24: 3627966.311 ops/s
Iteration  25: 3739841.761 ops/s
Iteration  26: 3710358.338 ops/s
Iteration  27: 3609090.416 ops/s
Iteration  28: 3570644.039 ops/s
Iteration  29: 3557393.017 ops/s
Iteration  30: 3660446.343 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_minBy":
  3735786.689 ±(99.9%) 97163.187 ops/s [Average]
  (min, avg, max) = (3528249.310, 3735786.689, 3954672.117), stdev = 145429.295
  CI (99.9%): [3638623.503, 3832949.876] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_minBy  thrpt   30  3735786.689 ± 97163.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1320573.749 ops/s
# Warmup Iteration   2: 2861337.329 ops/s
# Warmup Iteration   3: 2320478.415 ops/s
# Warmup Iteration   4: 2740153.841 ops/s
# Warmup Iteration   5: 2706315.886 ops/s
# Warmup Iteration   6: 2735286.237 ops/s
# Warmup Iteration   7: 2710195.292 ops/s
# Warmup Iteration   8: 2803532.176 ops/s
# Warmup Iteration   9: 2735648.823 ops/s
# Warmup Iteration  10: 2745440.738 ops/s
# Warmup Iteration  11: 2769511.141 ops/s
# Warmup Iteration  12: 2757777.313 ops/s
# Warmup Iteration  13: 2757306.848 ops/s
# Warmup Iteration  14: 2836465.959 ops/s
# Warmup Iteration  15: 2740436.311 ops/s
# Warmup Iteration  16: 2887223.073 ops/s
# Warmup Iteration  17: 2728932.163 ops/s
# Warmup Iteration  18: 2724383.538 ops/s
# Warmup Iteration  19: 2796074.376 ops/s
# Warmup Iteration  20: 2828555.605 ops/s
# Warmup Iteration  21: 2821696.197 ops/s
# Warmup Iteration  22: 2833621.104 ops/s
# Warmup Iteration  23: 2906015.059 ops/s
# Warmup Iteration  24: 2837312.492 ops/s
# Warmup Iteration  25: 2875859.654 ops/s
# Warmup Iteration  26: 2869274.045 ops/s
# Warmup Iteration  27: 2835095.128 ops/s
# Warmup Iteration  28: 2692973.836 ops/s
# Warmup Iteration  29: 2709751.155 ops/s
# Warmup Iteration  30: 2753505.864 ops/s
Iteration   1: 2807527.109 ops/s
Iteration   2: 2765400.125 ops/s
Iteration   3: 2790694.682 ops/s
Iteration   4: 2798280.558 ops/s
Iteration   5: 2772889.154 ops/s
Iteration   6: 2749473.869 ops/s
Iteration   7: 2806604.867 ops/s
Iteration   8: 2879919.153 ops/s
Iteration   9: 2965325.020 ops/s
Iteration  10: 2970882.003 ops/s
Iteration  11: 2938710.769 ops/s
Iteration  12: 2726218.624 ops/s
Iteration  13: 2818244.975 ops/s
Iteration  14: 2804864.549 ops/s
Iteration  15: 2728310.304 ops/s
Iteration  16: 2601571.404 ops/s
Iteration  17: 2708413.819 ops/s
Iteration  18: 2618439.218 ops/s
Iteration  19: 2654495.335 ops/s
Iteration  20: 2590459.738 ops/s
Iteration  21: 2697905.482 ops/s
Iteration  22: 2773492.576 ops/s
Iteration  23: 2717649.551 ops/s
Iteration  24: 2861492.287 ops/s
Iteration  25: 2767057.488 ops/s
Iteration  26: 2818411.861 ops/s
Iteration  27: 2609901.463 ops/s
Iteration  28: 2713060.421 ops/s
Iteration  29: 2769858.989 ops/s
Iteration  30: 2736137.359 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newEmpty":
  2765389.758 ±(99.9%) 65583.595 ops/s [Average]
  (min, avg, max) = (2590459.738, 2765389.758, 2970882.003), stdev = 98162.445
  CI (99.9%): [2699806.164, 2830973.353] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newEmpty  thrpt   30  2765389.758 ± 65583.595  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newMapWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newMapWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 324947.384 ops/s
# Warmup Iteration   2: 658144.211 ops/s
# Warmup Iteration   3: 720142.476 ops/s
# Warmup Iteration   4: 723959.889 ops/s
# Warmup Iteration   5: 632706.211 ops/s
# Warmup Iteration   6: 743351.509 ops/s
# Warmup Iteration   7: 739433.077 ops/s
# Warmup Iteration   8: 718838.394 ops/s
# Warmup Iteration   9: 718218.958 ops/s
# Warmup Iteration  10: 718213.391 ops/s
# Warmup Iteration  11: 718945.080 ops/s
# Warmup Iteration  12: 723729.673 ops/s
# Warmup Iteration  13: 734568.461 ops/s
# Warmup Iteration  14: 742850.230 ops/s
# Warmup Iteration  15: 740314.013 ops/s
# Warmup Iteration  16: 724545.006 ops/s
# Warmup Iteration  17: 714834.768 ops/s
# Warmup Iteration  18: 722492.388 ops/s
# Warmup Iteration  19: 720138.451 ops/s
# Warmup Iteration  20: 742247.009 ops/s
# Warmup Iteration  21: 738270.567 ops/s
# Warmup Iteration  22: 784662.076 ops/s
# Warmup Iteration  23: 719869.178 ops/s
# Warmup Iteration  24: 718803.041 ops/s
# Warmup Iteration  25: 718828.034 ops/s
# Warmup Iteration  26: 743679.555 ops/s
# Warmup Iteration  27: 717898.353 ops/s
# Warmup Iteration  28: 721254.652 ops/s
# Warmup Iteration  29: 723880.817 ops/s
# Warmup Iteration  30: 733623.058 ops/s
Iteration   1: 720860.170 ops/s
Iteration   2: 725634.100 ops/s
Iteration   3: 729039.796 ops/s
Iteration   4: 711712.609 ops/s
Iteration   5: 705733.807 ops/s
Iteration   6: 757550.781 ops/s
Iteration   7: 742165.713 ops/s
Iteration   8: 749114.309 ops/s
Iteration   9: 740016.338 ops/s
Iteration  10: 746517.723 ops/s
Iteration  11: 743783.369 ops/s
Iteration  12: 722884.845 ops/s
Iteration  13: 731105.749 ops/s
Iteration  14: 727049.388 ops/s
Iteration  15: 723477.991 ops/s
Iteration  16: 748682.851 ops/s
Iteration  17: 720554.898 ops/s
Iteration  18: 715781.473 ops/s
Iteration  19: 726468.285 ops/s
Iteration  20: 744748.007 ops/s
Iteration  21: 747086.412 ops/s
Iteration  22: 750943.477 ops/s
Iteration  23: 723642.785 ops/s
Iteration  24: 729375.705 ops/s
Iteration  25: 725777.090 ops/s
Iteration  26: 714691.162 ops/s
Iteration  27: 738753.073 ops/s
Iteration  28: 744933.261 ops/s
Iteration  29: 730266.490 ops/s
Iteration  30: 745463.836 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newMapWithWith":
  732793.850 ±(99.9%) 8915.519 ops/s [Average]
  (min, avg, max) = (705733.807, 732793.850, 757550.781), stdev = 13344.331
  CI (99.9%): [723878.330, 741709.369] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newMapWithWith  thrpt   30  732793.850 ± 8915.519  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newMapWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newMapWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 278708.621 ops/s
# Warmup Iteration   2: 506753.103 ops/s
# Warmup Iteration   3: 575680.696 ops/s
# Warmup Iteration   4: 575475.053 ops/s
# Warmup Iteration   5: 576587.047 ops/s
# Warmup Iteration   6: 480714.938 ops/s
# Warmup Iteration   7: 579779.370 ops/s
# Warmup Iteration   8: 581959.863 ops/s
# Warmup Iteration   9: 579496.565 ops/s
# Warmup Iteration  10: 572570.111 ops/s
# Warmup Iteration  11: 583071.151 ops/s
# Warmup Iteration  12: 583750.623 ops/s
# Warmup Iteration  13: 576962.874 ops/s
# Warmup Iteration  14: 574949.216 ops/s
# Warmup Iteration  15: 587772.809 ops/s
# Warmup Iteration  16: 600241.567 ops/s
# Warmup Iteration  17: 595149.126 ops/s
# Warmup Iteration  18: 576779.855 ops/s
# Warmup Iteration  19: 585429.779 ops/s
# Warmup Iteration  20: 569469.018 ops/s
# Warmup Iteration  21: 586010.986 ops/s
# Warmup Iteration  22: 588951.226 ops/s
# Warmup Iteration  23: 601169.145 ops/s
# Warmup Iteration  24: 575316.114 ops/s
# Warmup Iteration  25: 567376.170 ops/s
# Warmup Iteration  26: 580574.856 ops/s
# Warmup Iteration  27: 604883.851 ops/s
# Warmup Iteration  28: 595302.812 ops/s
# Warmup Iteration  29: 605288.342 ops/s
# Warmup Iteration  30: 608081.478 ops/s
Iteration   1: 576213.198 ops/s
Iteration   2: 580978.070 ops/s
Iteration   3: 577908.608 ops/s
Iteration   4: 579425.950 ops/s
Iteration   5: 572470.088 ops/s
Iteration   6: 571782.943 ops/s
Iteration   7: 576245.114 ops/s
Iteration   8: 584501.078 ops/s
Iteration   9: 569118.310 ops/s
Iteration  10: 590181.188 ops/s
Iteration  11: 581913.824 ops/s
Iteration  12: 582905.794 ops/s
Iteration  13: 584440.156 ops/s
Iteration  14: 581739.208 ops/s
Iteration  15: 595344.688 ops/s
Iteration  16: 605679.142 ops/s
Iteration  17: 571342.531 ops/s
Iteration  18: 576520.906 ops/s
Iteration  19: 572556.377 ops/s
Iteration  20: 577283.935 ops/s
Iteration  21: 562162.215 ops/s
Iteration  22: 573350.313 ops/s
Iteration  23: 630010.029 ops/s
Iteration  24: 629689.062 ops/s
Iteration  25: 576578.205 ops/s
Iteration  26: 586927.142 ops/s
Iteration  27: 600547.969 ops/s
Iteration  28: 593769.365 ops/s
Iteration  29: 604368.697 ops/s
Iteration  30: 611714.348 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newMapWithWithWith":
  585922.282 ±(99.9%) 11118.618 ops/s [Average]
  (min, avg, max) = (562162.215, 585922.282, 630010.029), stdev = 16641.826
  CI (99.9%): [574803.664, 597040.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newMapWithWithWith  thrpt   30  585922.282 ± 11118.618  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newMapWithWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newMapWithWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 235473.109 ops/s
# Warmup Iteration   2: 426183.459 ops/s
# Warmup Iteration   3: 504000.923 ops/s
# Warmup Iteration   4: 468266.108 ops/s
# Warmup Iteration   5: 463591.393 ops/s
# Warmup Iteration   6: 429041.104 ops/s
# Warmup Iteration   7: 433653.557 ops/s
# Warmup Iteration   8: 484478.143 ops/s
# Warmup Iteration   9: 467790.766 ops/s
# Warmup Iteration  10: 460553.097 ops/s
# Warmup Iteration  11: 470765.405 ops/s
# Warmup Iteration  12: 470577.091 ops/s
# Warmup Iteration  13: 472967.671 ops/s
# Warmup Iteration  14: 484462.692 ops/s
# Warmup Iteration  15: 474401.691 ops/s
# Warmup Iteration  16: 468683.675 ops/s
# Warmup Iteration  17: 466107.693 ops/s
# Warmup Iteration  18: 466339.315 ops/s
# Warmup Iteration  19: 469935.241 ops/s
# Warmup Iteration  20: 471259.727 ops/s
# Warmup Iteration  21: 493452.852 ops/s
# Warmup Iteration  22: 486336.287 ops/s
# Warmup Iteration  23: 474942.034 ops/s
# Warmup Iteration  24: 463653.817 ops/s
# Warmup Iteration  25: 468965.797 ops/s
# Warmup Iteration  26: 467673.533 ops/s
# Warmup Iteration  27: 469029.525 ops/s
# Warmup Iteration  28: 464657.008 ops/s
# Warmup Iteration  29: 482530.462 ops/s
# Warmup Iteration  30: 470110.820 ops/s
Iteration   1: 474629.734 ops/s
Iteration   2: 463599.281 ops/s
Iteration   3: 469851.043 ops/s
Iteration   4: 463410.370 ops/s
Iteration   5: 465364.803 ops/s
Iteration   6: 506743.700 ops/s
Iteration   7: 494765.337 ops/s
Iteration   8: 483452.560 ops/s
Iteration   9: 490377.159 ops/s
Iteration  10: 481559.330 ops/s
Iteration  11: 487922.938 ops/s
Iteration  12: 493871.509 ops/s
Iteration  13: 488217.506 ops/s
Iteration  14: 481043.643 ops/s
Iteration  15: 482211.680 ops/s
Iteration  16: 478136.290 ops/s
Iteration  17: 467024.368 ops/s
Iteration  18: 463833.423 ops/s
Iteration  19: 462776.038 ops/s
Iteration  20: 483026.502 ops/s
Iteration  21: 493474.781 ops/s
Iteration  22: 484511.444 ops/s
Iteration  23: 481343.243 ops/s
Iteration  24: 482994.944 ops/s
Iteration  25: 485360.786 ops/s
Iteration  26: 495420.805 ops/s
Iteration  27: 492870.129 ops/s
Iteration  28: 485565.347 ops/s
Iteration  29: 481025.893 ops/s
Iteration  30: 514207.854 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newMapWithWithWithWith":
  482619.748 ±(99.9%) 8464.153 ops/s [Average]
  (min, avg, max) = (462776.038, 482619.748, 514207.854), stdev = 12668.747
  CI (99.9%): [474155.595, 491083.901] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_newMapWithWithWithWith  thrpt   30  482619.748 ± 8464.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1149723.373 ops/s
# Warmup Iteration   2: 2132574.749 ops/s
# Warmup Iteration   3: 2223848.859 ops/s
# Warmup Iteration   4: 2405105.918 ops/s
# Warmup Iteration   5: 2058255.498 ops/s
# Warmup Iteration   6: 2210223.521 ops/s
# Warmup Iteration   7: 2319450.636 ops/s
# Warmup Iteration   8: 2378107.119 ops/s
# Warmup Iteration   9: 2336327.448 ops/s
# Warmup Iteration  10: 2339705.072 ops/s
# Warmup Iteration  11: 2355601.070 ops/s
# Warmup Iteration  12: 2310490.399 ops/s
# Warmup Iteration  13: 2376128.172 ops/s
# Warmup Iteration  14: 2338995.834 ops/s
# Warmup Iteration  15: 2374069.457 ops/s
# Warmup Iteration  16: 2311179.509 ops/s
# Warmup Iteration  17: 2361541.994 ops/s
# Warmup Iteration  18: 2388286.124 ops/s
# Warmup Iteration  19: 2416068.726 ops/s
# Warmup Iteration  20: 2374251.769 ops/s
# Warmup Iteration  21: 2360235.998 ops/s
# Warmup Iteration  22: 2320498.848 ops/s
# Warmup Iteration  23: 2324528.188 ops/s
# Warmup Iteration  24: 2365476.490 ops/s
# Warmup Iteration  25: 2320043.745 ops/s
# Warmup Iteration  26: 2389421.235 ops/s
# Warmup Iteration  27: 2464819.992 ops/s
# Warmup Iteration  28: 2381415.897 ops/s
# Warmup Iteration  29: 2399766.420 ops/s
# Warmup Iteration  30: 2392500.177 ops/s
Iteration   1: 2385811.802 ops/s
Iteration   2: 2332373.478 ops/s
Iteration   3: 2306972.100 ops/s
Iteration   4: 2303083.279 ops/s
Iteration   5: 2360991.285 ops/s
Iteration   6: 2342750.703 ops/s
Iteration   7: 2383509.678 ops/s
Iteration   8: 2565334.513 ops/s
Iteration   9: 2357781.809 ops/s
Iteration  10: 2375149.924 ops/s
Iteration  11: 2455700.297 ops/s
Iteration  12: 2359143.062 ops/s
Iteration  13: 2412590.527 ops/s
Iteration  14: 2444869.562 ops/s
Iteration  15: 2373363.547 ops/s
Iteration  16: 2333979.073 ops/s
Iteration  17: 2319002.588 ops/s
Iteration  18: 2367957.401 ops/s
Iteration  19: 2325914.795 ops/s
Iteration  20: 2297761.214 ops/s
Iteration  21: 2359322.706 ops/s
Iteration  22: 2346832.778 ops/s
Iteration  23: 2382025.360 ops/s
Iteration  24: 2347700.983 ops/s
Iteration  25: 2393640.631 ops/s
Iteration  26: 2361010.261 ops/s
Iteration  27: 2390708.182 ops/s
Iteration  28: 2373623.840 ops/s
Iteration  29: 2373989.938 ops/s
Iteration  30: 2331220.959 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_noneSatisfy":
  2368803.876 ±(99.9%) 34928.830 ops/s [Average]
  (min, avg, max) = (2297761.214, 2368803.876, 2565334.513), stdev = 52279.832
  CI (99.9%): [2333875.046, 2403732.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_noneSatisfy  thrpt   30  2368803.876 ± 34928.830  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1803776.347 ops/s
# Warmup Iteration   2: 3882332.110 ops/s
# Warmup Iteration   3: 3806288.197 ops/s
# Warmup Iteration   4: 3603673.618 ops/s
# Warmup Iteration   5: 3683484.462 ops/s
# Warmup Iteration   6: 3824374.427 ops/s
# Warmup Iteration   7: 3844517.258 ops/s
# Warmup Iteration   8: 3868370.565 ops/s
# Warmup Iteration   9: 3857351.571 ops/s
# Warmup Iteration  10: 3859511.915 ops/s
# Warmup Iteration  11: 3835825.767 ops/s
# Warmup Iteration  12: 3962597.315 ops/s
# Warmup Iteration  13: 4041830.567 ops/s
# Warmup Iteration  14: 3864239.447 ops/s
# Warmup Iteration  15: 3963671.229 ops/s
# Warmup Iteration  16: 4016024.460 ops/s
# Warmup Iteration  17: 3864933.507 ops/s
# Warmup Iteration  18: 3985741.552 ops/s
# Warmup Iteration  19: 3929362.316 ops/s
# Warmup Iteration  20: 3904564.464 ops/s
# Warmup Iteration  21: 4085893.117 ops/s
# Warmup Iteration  22: 3899237.441 ops/s
# Warmup Iteration  23: 3994743.245 ops/s
# Warmup Iteration  24: 3906651.757 ops/s
# Warmup Iteration  25: 4062934.577 ops/s
# Warmup Iteration  26: 4077338.368 ops/s
# Warmup Iteration  27: 4119266.952 ops/s
# Warmup Iteration  28: 4138486.818 ops/s
# Warmup Iteration  29: 4012459.219 ops/s
# Warmup Iteration  30: 4160998.989 ops/s
Iteration   1: 4269167.469 ops/s
Iteration   2: 3909362.474 ops/s
Iteration   3: 4093753.851 ops/s
Iteration   4: 4058951.206 ops/s
Iteration   5: 3912098.347 ops/s
Iteration   6: 3987930.200 ops/s
Iteration   7: 4105168.989 ops/s
Iteration   8: 3918223.450 ops/s
Iteration   9: 3888315.251 ops/s
Iteration  10: 3898158.551 ops/s
Iteration  11: 3906330.110 ops/s
Iteration  12: 3853951.733 ops/s
Iteration  13: 3913259.936 ops/s
Iteration  14: 3826966.964 ops/s
Iteration  15: 3864166.986 ops/s
Iteration  16: 3826602.041 ops/s
Iteration  17: 4015369.105 ops/s
Iteration  18: 4074567.611 ops/s
Iteration  19: 3994356.515 ops/s
Iteration  20: 4067059.835 ops/s
Iteration  21: 3980060.024 ops/s
Iteration  22: 4233920.522 ops/s
Iteration  23: 4169267.766 ops/s
Iteration  24: 4264911.952 ops/s
Iteration  25: 4148356.731 ops/s
Iteration  26: 4149334.846 ops/s
Iteration  27: 3988723.872 ops/s
Iteration  28: 4047160.258 ops/s
Iteration  29: 3867906.441 ops/s
Iteration  30: 3838787.959 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_noneSatisfyWith":
  4002406.366 ±(99.9%) 88746.312 ops/s [Average]
  (min, avg, max) = (3826602.041, 4002406.366, 4269167.469), stdev = 132831.312
  CI (99.9%): [3913660.054, 4091152.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  4002406.366 ± 88746.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1410144.336 ops/s
# Warmup Iteration   2: 3463735.156 ops/s
# Warmup Iteration   3: 2841613.681 ops/s
# Warmup Iteration   4: 3272189.220 ops/s
# Warmup Iteration   5: 3433482.496 ops/s
# Warmup Iteration   6: 3286187.534 ops/s
# Warmup Iteration   7: 3149945.990 ops/s
# Warmup Iteration   8: 3285298.065 ops/s
# Warmup Iteration   9: 3320205.886 ops/s
# Warmup Iteration  10: 3293735.870 ops/s
# Warmup Iteration  11: 3279639.518 ops/s
# Warmup Iteration  12: 3259404.120 ops/s
# Warmup Iteration  13: 3332111.775 ops/s
# Warmup Iteration  14: 3241804.647 ops/s
# Warmup Iteration  15: 3229530.904 ops/s
# Warmup Iteration  16: 3271920.733 ops/s
# Warmup Iteration  17: 3257650.994 ops/s
# Warmup Iteration  18: 3196952.010 ops/s
# Warmup Iteration  19: 3271931.783 ops/s
# Warmup Iteration  20: 3362488.737 ops/s
# Warmup Iteration  21: 3146625.263 ops/s
# Warmup Iteration  22: 3191145.600 ops/s
# Warmup Iteration  23: 3179922.936 ops/s
# Warmup Iteration  24: 3190732.004 ops/s
# Warmup Iteration  25: 3193828.657 ops/s
# Warmup Iteration  26: 3418382.780 ops/s
# Warmup Iteration  27: 3246139.993 ops/s
# Warmup Iteration  28: 3197699.199 ops/s
# Warmup Iteration  29: 3177564.430 ops/s
# Warmup Iteration  30: 3146603.800 ops/s
Iteration   1: 3169271.461 ops/s
Iteration   2: 3213616.565 ops/s
Iteration   3: 3230443.083 ops/s
Iteration   4: 3286985.141 ops/s
Iteration   5: 3140022.394 ops/s
Iteration   6: 3204570.151 ops/s
Iteration   7: 3253160.772 ops/s
Iteration   8: 3404852.215 ops/s
Iteration   9: 3216344.871 ops/s
Iteration  10: 3154141.583 ops/s
Iteration  11: 3129603.504 ops/s
Iteration  12: 3168923.935 ops/s
Iteration  13: 3292094.483 ops/s
Iteration  14: 3192536.405 ops/s
Iteration  15: 3189297.856 ops/s
Iteration  16: 3160712.041 ops/s
Iteration  17: 3226729.381 ops/s
Iteration  18: 3165232.662 ops/s
Iteration  19: 3383703.877 ops/s
Iteration  20: 3451021.299 ops/s
Iteration  21: 3384598.179 ops/s
Iteration  22: 3218851.717 ops/s
Iteration  23: 3300561.456 ops/s
Iteration  24: 3433690.056 ops/s
Iteration  25: 3341986.142 ops/s
Iteration  26: 3240203.233 ops/s
Iteration  27: 3143173.790 ops/s
Iteration  28: 3288819.065 ops/s
Iteration  29: 3280812.416 ops/s
Iteration  30: 3182396.744 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_notEmpty":
  3248278.549 ±(99.9%) 61304.680 ops/s [Average]
  (min, avg, max) = (3129603.504, 3248278.549, 3451021.299), stdev = 91757.965
  CI (99.9%): [3186973.870, 3309583.229] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_notEmpty  thrpt   30  3248278.549 ± 61304.680  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_nullCollisionWithCastInEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_nullCollisionWithCastInEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 728715.461 ops/s
# Warmup Iteration   2: 1664999.229 ops/s
# Warmup Iteration   3: 1664604.661 ops/s
# Warmup Iteration   4: 1374493.385 ops/s
# Warmup Iteration   5: 1752095.834 ops/s
# Warmup Iteration   6: 1669315.252 ops/s
# Warmup Iteration   7: 1661611.904 ops/s
# Warmup Iteration   8: 1701104.560 ops/s
# Warmup Iteration   9: 1749708.332 ops/s
# Warmup Iteration  10: 1801336.822 ops/s
# Warmup Iteration  11: 1679444.658 ops/s
# Warmup Iteration  12: 1684437.534 ops/s
# Warmup Iteration  13: 1718030.102 ops/s
# Warmup Iteration  14: 1708265.356 ops/s
# Warmup Iteration  15: 1678212.240 ops/s
# Warmup Iteration  16: 1662941.331 ops/s
# Warmup Iteration  17: 1651174.219 ops/s
# Warmup Iteration  18: 1734345.967 ops/s
# Warmup Iteration  19: 1685577.742 ops/s
# Warmup Iteration  20: 1673882.491 ops/s
# Warmup Iteration  21: 1652023.729 ops/s
# Warmup Iteration  22: 1676148.367 ops/s
# Warmup Iteration  23: 1641080.577 ops/s
# Warmup Iteration  24: 1646081.288 ops/s
# Warmup Iteration  25: 1684055.743 ops/s
# Warmup Iteration  26: 1793845.010 ops/s
# Warmup Iteration  27: 1665106.191 ops/s
# Warmup Iteration  28: 1651109.105 ops/s
# Warmup Iteration  29: 1668907.620 ops/s
# Warmup Iteration  30: 1657187.044 ops/s
Iteration   1: 1695754.748 ops/s
Iteration   2: 1695816.221 ops/s
Iteration   3: 1653351.069 ops/s
Iteration   4: 1739538.507 ops/s
Iteration   5: 1728525.269 ops/s
Iteration   6: 1716218.259 ops/s
Iteration   7: 1795927.094 ops/s
Iteration   8: 1712344.881 ops/s
Iteration   9: 1824485.520 ops/s
Iteration  10: 1795805.927 ops/s
Iteration  11: 1816747.181 ops/s
Iteration  12: 1825463.388 ops/s
Iteration  13: 1814270.220 ops/s
Iteration  14: 1759812.322 ops/s
Iteration  15: 1682023.492 ops/s
Iteration  16: 1726288.243 ops/s
Iteration  17: 1717983.653 ops/s
Iteration  18: 1731571.671 ops/s
Iteration  19: 1718181.312 ops/s
Iteration  20: 1817532.469 ops/s
Iteration  21: 1798557.970 ops/s
Iteration  22: 1687749.428 ops/s
Iteration  23: 1738331.779 ops/s
Iteration  24: 1823378.728 ops/s
Iteration  25: 1722144.949 ops/s
Iteration  26: 1684232.226 ops/s
Iteration  27: 1694917.859 ops/s
Iteration  28: 1668654.873 ops/s
Iteration  29: 1757878.461 ops/s
Iteration  30: 1754503.714 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_nullCollisionWithCastInEquals":
  1743266.381 ±(99.9%) 35053.799 ops/s [Average]
  (min, avg, max) = (1653351.069, 1743266.381, 1825463.388), stdev = 52466.881
  CI (99.9%): [1708212.582, 1778320.181] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_nullCollisionWithCastInEquals  thrpt   30  1743266.381 ± 35053.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 598849.101 ops/s
# Warmup Iteration   2: 1388786.696 ops/s
# Warmup Iteration   3: 1479664.827 ops/s
# Warmup Iteration   4: 1303891.303 ops/s
# Warmup Iteration   5: 1408012.076 ops/s
# Warmup Iteration   6: 1499184.389 ops/s
# Warmup Iteration   7: 1477862.786 ops/s
# Warmup Iteration   8: 1372764.299 ops/s
# Warmup Iteration   9: 1390481.037 ops/s
# Warmup Iteration  10: 1463515.005 ops/s
# Warmup Iteration  11: 1478012.777 ops/s
# Warmup Iteration  12: 1484572.749 ops/s
# Warmup Iteration  13: 1503242.403 ops/s
# Warmup Iteration  14: 1421818.980 ops/s
# Warmup Iteration  15: 1438950.872 ops/s
# Warmup Iteration  16: 1356402.900 ops/s
# Warmup Iteration  17: 1374270.965 ops/s
# Warmup Iteration  18: 1383815.592 ops/s
# Warmup Iteration  19: 1389504.774 ops/s
# Warmup Iteration  20: 1428342.868 ops/s
# Warmup Iteration  21: 1389251.329 ops/s
# Warmup Iteration  22: 1370305.036 ops/s
# Warmup Iteration  23: 1392543.924 ops/s
# Warmup Iteration  24: 1421332.922 ops/s
# Warmup Iteration  25: 1416570.196 ops/s
# Warmup Iteration  26: 1427833.437 ops/s
# Warmup Iteration  27: 1385099.209 ops/s
# Warmup Iteration  28: 1405679.538 ops/s
# Warmup Iteration  29: 1424780.014 ops/s
# Warmup Iteration  30: 1392216.976 ops/s
Iteration   1: 1371658.930 ops/s
Iteration   2: 1427349.455 ops/s
Iteration   3: 1416062.155 ops/s
Iteration   4: 1414407.025 ops/s
Iteration   5: 1380272.510 ops/s
Iteration   6: 1381669.946 ops/s
Iteration   7: 1374094.225 ops/s
Iteration   8: 1379459.553 ops/s
Iteration   9: 1386542.675 ops/s
Iteration  10: 1398444.627 ops/s
Iteration  11: 1429456.176 ops/s
Iteration  12: 1443532.879 ops/s
Iteration  13: 1380023.640 ops/s
Iteration  14: 1383647.180 ops/s
Iteration  15: 1392897.440 ops/s
Iteration  16: 1387748.848 ops/s
Iteration  17: 1392796.977 ops/s
Iteration  18: 1422045.107 ops/s
Iteration  19: 1407600.485 ops/s
Iteration  20: 1431671.113 ops/s
Iteration  21: 1428179.917 ops/s
Iteration  22: 1385813.634 ops/s
Iteration  23: 1357844.347 ops/s
Iteration  24: 1358937.724 ops/s
Iteration  25: 1357708.597 ops/s
Iteration  26: 1386783.081 ops/s
Iteration  27: 1356615.217 ops/s
Iteration  28: 1367830.506 ops/s
Iteration  29: 1363560.673 ops/s
Iteration  30: 1354454.475 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_parallelStream":
  1390636.971 ±(99.9%) 17261.653 ops/s [Average]
  (min, avg, max) = (1354454.475, 1390636.971, 1443532.879), stdev = 25836.431
  CI (99.9%): [1373375.318, 1407898.623] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_parallelStream  thrpt   30  1390636.971 ± 17261.653  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_partitionWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_partitionWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 788522.157 ops/s
# Warmup Iteration   2: 2081027.128 ops/s
# Warmup Iteration   3: 2129198.716 ops/s
# Warmup Iteration   4: 1733695.945 ops/s
# Warmup Iteration   5: 2080829.844 ops/s
# Warmup Iteration   6: 2102901.281 ops/s
# Warmup Iteration   7: 2091554.383 ops/s
# Warmup Iteration   8: 2150540.162 ops/s
# Warmup Iteration   9: 2104964.454 ops/s
# Warmup Iteration  10: 2088933.257 ops/s
# Warmup Iteration  11: 2099411.588 ops/s
# Warmup Iteration  12: 2163680.596 ops/s
# Warmup Iteration  13: 2287565.176 ops/s
# Warmup Iteration  14: 2241468.193 ops/s
# Warmup Iteration  15: 2206780.462 ops/s
# Warmup Iteration  16: 2248434.992 ops/s
# Warmup Iteration  17: 2069248.462 ops/s
# Warmup Iteration  18: 2092906.851 ops/s
# Warmup Iteration  19: 2166160.713 ops/s
# Warmup Iteration  20: 2054032.250 ops/s
# Warmup Iteration  21: 2142488.749 ops/s
# Warmup Iteration  22: 2220078.195 ops/s
# Warmup Iteration  23: 2103783.842 ops/s
# Warmup Iteration  24: 2076068.231 ops/s
# Warmup Iteration  25: 2153558.106 ops/s
# Warmup Iteration  26: 2117136.200 ops/s
# Warmup Iteration  27: 2141152.250 ops/s
# Warmup Iteration  28: 2110322.798 ops/s
# Warmup Iteration  29: 2106136.580 ops/s
# Warmup Iteration  30: 2082100.224 ops/s
Iteration   1: 2064979.535 ops/s
Iteration   2: 2091791.638 ops/s
Iteration   3: 2162776.792 ops/s
Iteration   4: 2133465.248 ops/s
Iteration   5: 2163099.087 ops/s
Iteration   6: 2190927.547 ops/s
Iteration   7: 2120585.649 ops/s
Iteration   8: 2119956.710 ops/s
Iteration   9: 2129187.137 ops/s
Iteration  10: 2098947.517 ops/s
Iteration  11: 2164939.862 ops/s
Iteration  12: 2080599.877 ops/s
Iteration  13: 2080300.146 ops/s
Iteration  14: 2097788.082 ops/s
Iteration  15: 2118545.059 ops/s
Iteration  16: 2051476.208 ops/s
Iteration  17: 2114222.333 ops/s
Iteration  18: 2189933.609 ops/s
Iteration  19: 2133834.658 ops/s
Iteration  20: 2089140.675 ops/s
Iteration  21: 2123493.809 ops/s
Iteration  22: 2113561.955 ops/s
Iteration  23: 2077283.580 ops/s
Iteration  24: 2111894.553 ops/s
Iteration  25: 2090361.757 ops/s
Iteration  26: 2093312.279 ops/s
Iteration  27: 2061726.237 ops/s
Iteration  28: 2125229.042 ops/s
Iteration  29: 2099730.167 ops/s
Iteration  30: 2062056.664 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_partitionWith_value":
  2111838.247 ±(99.9%) 24306.985 ops/s [Average]
  (min, avg, max) = (2051476.208, 2111838.247, 2190927.547), stdev = 36381.554
  CI (99.9%): [2087531.262, 2136145.232] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_partitionWith_value  thrpt   30  2111838.247 ± 24306.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_partition_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_partition_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 999442.360 ops/s
# Warmup Iteration   2: 2665814.829 ops/s
# Warmup Iteration   3: 2719604.112 ops/s
# Warmup Iteration   4: 2196276.904 ops/s
# Warmup Iteration   5: 2770244.362 ops/s
# Warmup Iteration   6: 2648549.372 ops/s
# Warmup Iteration   7: 2718093.726 ops/s
# Warmup Iteration   8: 2708794.559 ops/s
# Warmup Iteration   9: 2763828.905 ops/s
# Warmup Iteration  10: 2748976.296 ops/s
# Warmup Iteration  11: 2683019.586 ops/s
# Warmup Iteration  12: 2717347.919 ops/s
# Warmup Iteration  13: 2680234.179 ops/s
# Warmup Iteration  14: 2748140.962 ops/s
# Warmup Iteration  15: 2685285.730 ops/s
# Warmup Iteration  16: 2650602.651 ops/s
# Warmup Iteration  17: 2830854.992 ops/s
# Warmup Iteration  18: 2929101.939 ops/s
# Warmup Iteration  19: 2732272.115 ops/s
# Warmup Iteration  20: 2730296.089 ops/s
# Warmup Iteration  21: 2790425.962 ops/s
# Warmup Iteration  22: 2925540.705 ops/s
# Warmup Iteration  23: 2925603.150 ops/s
# Warmup Iteration  24: 2815706.348 ops/s
# Warmup Iteration  25: 2770429.523 ops/s
# Warmup Iteration  26: 2695184.005 ops/s
# Warmup Iteration  27: 2683855.086 ops/s
# Warmup Iteration  28: 2692310.192 ops/s
# Warmup Iteration  29: 2675556.541 ops/s
# Warmup Iteration  30: 2779856.524 ops/s
Iteration   1: 2765153.833 ops/s
Iteration   2: 2690162.069 ops/s
Iteration   3: 2672211.452 ops/s
Iteration   4: 2692096.888 ops/s
Iteration   5: 2683911.338 ops/s
Iteration   6: 2657012.990 ops/s
Iteration   7: 2680896.424 ops/s
Iteration   8: 2701559.539 ops/s
Iteration   9: 2764432.584 ops/s
Iteration  10: 2782348.950 ops/s
Iteration  11: 2778942.895 ops/s
Iteration  12: 2686262.016 ops/s
Iteration  13: 2626824.987 ops/s
Iteration  14: 2706464.191 ops/s
Iteration  15: 2765878.672 ops/s
Iteration  16: 2645541.487 ops/s
Iteration  17: 2720142.387 ops/s
Iteration  18: 2711744.002 ops/s
Iteration  19: 2685786.648 ops/s
Iteration  20: 2687555.266 ops/s
Iteration  21: 2711174.340 ops/s
Iteration  22: 2671308.733 ops/s
Iteration  23: 2680072.970 ops/s
Iteration  24: 2680674.668 ops/s
Iteration  25: 2658499.692 ops/s
Iteration  26: 2903641.955 ops/s
Iteration  27: 2755840.813 ops/s
Iteration  28: 2668915.738 ops/s
Iteration  29: 2658797.764 ops/s
Iteration  30: 2655052.473 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_partition_value":
  2704963.592 ±(99.9%) 37339.572 ops/s [Average]
  (min, avg, max) = (2626824.987, 2704963.592, 2903641.955), stdev = 55888.117
  CI (99.9%): [2667624.020, 2742303.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_partition_value  thrpt   30  2704963.592 ± 37339.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_put$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_put

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 65221.925 ops/s
# Warmup Iteration   2: 71483.799 ops/s
# Warmup Iteration   3: 88031.586 ops/s
# Warmup Iteration   4: 97372.407 ops/s
# Warmup Iteration   5: 96102.194 ops/s
# Warmup Iteration   6: 90212.492 ops/s
# Warmup Iteration   7: 90562.367 ops/s
# Warmup Iteration   8: 91934.792 ops/s
# Warmup Iteration   9: 97454.094 ops/s
# Warmup Iteration  10: 91384.055 ops/s
# Warmup Iteration  11: 90717.693 ops/s
# Warmup Iteration  12: 93481.084 ops/s
# Warmup Iteration  13: 89033.719 ops/s
# Warmup Iteration  14: 90129.234 ops/s
# Warmup Iteration  15: 90650.147 ops/s
# Warmup Iteration  16: 91789.455 ops/s
# Warmup Iteration  17: 90131.263 ops/s
# Warmup Iteration  18: 96371.055 ops/s
# Warmup Iteration  19: 90151.811 ops/s
# Warmup Iteration  20: 89106.272 ops/s
# Warmup Iteration  21: 90858.782 ops/s
# Warmup Iteration  22: 89842.148 ops/s
# Warmup Iteration  23: 90990.570 ops/s
# Warmup Iteration  24: 94313.423 ops/s
# Warmup Iteration  25: 91060.137 ops/s
# Warmup Iteration  26: 90300.759 ops/s
# Warmup Iteration  27: 89933.052 ops/s
# Warmup Iteration  28: 90045.616 ops/s
# Warmup Iteration  29: 90689.860 ops/s
# Warmup Iteration  30: 89607.151 ops/s
Iteration   1: 87778.730 ops/s
Iteration   2: 94169.515 ops/s
Iteration   3: 95126.532 ops/s
Iteration   4: 93753.309 ops/s
Iteration   5: 93974.028 ops/s
Iteration   6: 97936.317 ops/s
Iteration   7: 95087.028 ops/s
Iteration   8: 92514.660 ops/s
Iteration   9: 94845.475 ops/s
Iteration  10: 92185.045 ops/s
Iteration  11: 98497.593 ops/s
Iteration  12: 93767.487 ops/s
Iteration  13: 89362.733 ops/s
Iteration  14: 95374.157 ops/s
Iteration  15: 93175.333 ops/s
Iteration  16: 90252.920 ops/s
Iteration  17: 95260.796 ops/s
Iteration  18: 94193.504 ops/s
Iteration  19: 92337.894 ops/s
Iteration  20: 93391.793 ops/s
Iteration  21: 92785.412 ops/s
Iteration  22: 94371.520 ops/s
Iteration  23: 94603.095 ops/s
Iteration  24: 91004.245 ops/s
Iteration  25: 89446.841 ops/s
Iteration  26: 90310.381 ops/s
Iteration  27: 92766.111 ops/s
Iteration  28: 92846.489 ops/s
Iteration  29: 90494.529 ops/s
Iteration  30: 90852.564 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_put":
  93082.201 ±(99.9%) 1623.235 ops/s [Average]
  (min, avg, max) = (87778.730, 93082.201, 98497.593), stdev = 2429.583
  CI (99.9%): [91458.966, 94705.437] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt      Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_put  thrpt   30  93082.201 ± 1623.235  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 233713.870 ops/s
# Warmup Iteration   2: 231287.979 ops/s
# Warmup Iteration   3: 304078.700 ops/s
# Warmup Iteration   4: 314356.002 ops/s
# Warmup Iteration   5: 304618.689 ops/s
# Warmup Iteration   6: 317534.682 ops/s
# Warmup Iteration   7: 333481.632 ops/s
# Warmup Iteration   8: 325650.580 ops/s
# Warmup Iteration   9: 325104.740 ops/s
# Warmup Iteration  10: 315750.518 ops/s
# Warmup Iteration  11: 280782.100 ops/s
# Warmup Iteration  12: 308298.085 ops/s
# Warmup Iteration  13: 316665.696 ops/s
# Warmup Iteration  14: 323768.756 ops/s
# Warmup Iteration  15: 313772.964 ops/s
# Warmup Iteration  16: 318876.324 ops/s
# Warmup Iteration  17: 304644.584 ops/s
# Warmup Iteration  18: 306294.346 ops/s
# Warmup Iteration  19: 308083.174 ops/s
# Warmup Iteration  20: 301318.144 ops/s
# Warmup Iteration  21: 298780.563 ops/s
# Warmup Iteration  22: 306623.842 ops/s
# Warmup Iteration  23: 307076.877 ops/s
# Warmup Iteration  24: 306767.717 ops/s
# Warmup Iteration  25: 307036.758 ops/s
# Warmup Iteration  26: 300669.387 ops/s
# Warmup Iteration  27: 305939.496 ops/s
# Warmup Iteration  28: 305923.065 ops/s
# Warmup Iteration  29: 303947.753 ops/s
# Warmup Iteration  30: 301718.921 ops/s
Iteration   1: 321116.922 ops/s
Iteration   2: 302827.688 ops/s
Iteration   3: 309637.939 ops/s
Iteration   4: 307064.421 ops/s
Iteration   5: 332828.071 ops/s
Iteration   6: 334419.375 ops/s
Iteration   7: 304950.487 ops/s
Iteration   8: 299473.891 ops/s
Iteration   9: 321167.131 ops/s
Iteration  10: 316539.744 ops/s
Iteration  11: 302226.098 ops/s
Iteration  12: 300887.793 ops/s
Iteration  13: 304853.940 ops/s
Iteration  14: 306757.271 ops/s
Iteration  15: 314811.217 ops/s
Iteration  16: 334443.652 ops/s
Iteration  17: 312646.109 ops/s
Iteration  18: 307522.131 ops/s
Iteration  19: 314977.467 ops/s
Iteration  20: 316177.365 ops/s
Iteration  21: 321252.485 ops/s
Iteration  22: 315102.530 ops/s
Iteration  23: 305796.522 ops/s
Iteration  24: 300263.327 ops/s
Iteration  25: 301490.950 ops/s
Iteration  26: 308243.239 ops/s
Iteration  27: 307106.488 ops/s
Iteration  28: 321710.457 ops/s
Iteration  29: 333704.614 ops/s
Iteration  30: 311298.091 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAll":
  313043.247 ±(99.9%) 7077.202 ops/s [Average]
  (min, avg, max) = (299473.891, 313043.247, 334443.652), stdev = 10592.824
  CI (99.9%): [305966.045, 320120.449] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAll  thrpt   30  313043.247 ± 7077.202  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 626750.160 ops/s
# Warmup Iteration   2: 1210504.182 ops/s
# Warmup Iteration   3: 1373523.092 ops/s
# Warmup Iteration   4: 1325781.791 ops/s
# Warmup Iteration   5: 1090524.922 ops/s
# Warmup Iteration   6: 1378496.326 ops/s
# Warmup Iteration   7: 1309497.397 ops/s
# Warmup Iteration   8: 1337076.829 ops/s
# Warmup Iteration   9: 1396210.669 ops/s
# Warmup Iteration  10: 1348778.367 ops/s
# Warmup Iteration  11: 1354463.986 ops/s
# Warmup Iteration  12: 1398822.029 ops/s
# Warmup Iteration  13: 1394320.947 ops/s
# Warmup Iteration  14: 1382294.229 ops/s
# Warmup Iteration  15: 1323404.442 ops/s
# Warmup Iteration  16: 1334581.464 ops/s
# Warmup Iteration  17: 1325466.647 ops/s
# Warmup Iteration  18: 1342826.737 ops/s
# Warmup Iteration  19: 1323904.511 ops/s
# Warmup Iteration  20: 1322887.862 ops/s
# Warmup Iteration  21: 1344004.309 ops/s
# Warmup Iteration  22: 1335425.762 ops/s
# Warmup Iteration  23: 1384089.402 ops/s
# Warmup Iteration  24: 1382793.518 ops/s
# Warmup Iteration  25: 1340732.695 ops/s
# Warmup Iteration  26: 1368313.901 ops/s
# Warmup Iteration  27: 1418591.701 ops/s
# Warmup Iteration  28: 1345098.665 ops/s
# Warmup Iteration  29: 1389227.795 ops/s
# Warmup Iteration  30: 1361051.309 ops/s
Iteration   1: 1371711.689 ops/s
Iteration   2: 1346657.209 ops/s
Iteration   3: 1320587.717 ops/s
Iteration   4: 1292390.002 ops/s
Iteration   5: 1337256.551 ops/s
Iteration   6: 1338700.397 ops/s
Iteration   7: 1308925.387 ops/s
Iteration   8: 1324803.643 ops/s
Iteration   9: 1323400.496 ops/s
Iteration  10: 1329390.824 ops/s
Iteration  11: 1324277.633 ops/s
Iteration  12: 1371965.561 ops/s
Iteration  13: 1363224.072 ops/s
Iteration  14: 1305060.024 ops/s
Iteration  15: 1350968.255 ops/s
Iteration  16: 1324212.530 ops/s
Iteration  17: 1400957.916 ops/s
Iteration  18: 1453793.779 ops/s
Iteration  19: 1398823.837 ops/s
Iteration  20: 1310707.194 ops/s
Iteration  21: 1424980.509 ops/s
Iteration  22: 1384576.804 ops/s
Iteration  23: 1354298.544 ops/s
Iteration  24: 1323992.745 ops/s
Iteration  25: 1339936.693 ops/s
Iteration  26: 1329684.697 ops/s
Iteration  27: 1329774.128 ops/s
Iteration  28: 1333717.359 ops/s
Iteration  29: 1301040.139 ops/s
Iteration  30: 1375850.275 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterable":
  1346522.220 ±(99.9%) 25156.886 ops/s [Average]
  (min, avg, max) = (1292390.002, 1346522.220, 1453793.779), stdev = 37653.646
  CI (99.9%): [1321365.334, 1371679.106] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterable  thrpt   30  1346522.220 ± 25156.886  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 634969.285 ops/s
# Warmup Iteration   2: 1663411.843 ops/s
# Warmup Iteration   3: 1617344.324 ops/s
# Warmup Iteration   4: 1474090.016 ops/s
# Warmup Iteration   5: 1711369.730 ops/s
# Warmup Iteration   6: 1660575.403 ops/s
# Warmup Iteration   7: 1686618.376 ops/s
# Warmup Iteration   8: 1626969.863 ops/s
# Warmup Iteration   9: 1696687.516 ops/s
# Warmup Iteration  10: 1706996.002 ops/s
# Warmup Iteration  11: 1650887.342 ops/s
# Warmup Iteration  12: 1676683.681 ops/s
# Warmup Iteration  13: 1645867.491 ops/s
# Warmup Iteration  14: 1716882.205 ops/s
# Warmup Iteration  15: 1647086.654 ops/s
# Warmup Iteration  16: 1783698.435 ops/s
# Warmup Iteration  17: 1698736.969 ops/s
# Warmup Iteration  18: 1585859.226 ops/s
# Warmup Iteration  19: 1561196.769 ops/s
# Warmup Iteration  20: 1546974.825 ops/s
# Warmup Iteration  21: 1548073.035 ops/s
# Warmup Iteration  22: 1595832.546 ops/s
# Warmup Iteration  23: 1615364.661 ops/s
# Warmup Iteration  24: 1564328.729 ops/s
# Warmup Iteration  25: 1687379.561 ops/s
# Warmup Iteration  26: 1702253.215 ops/s
# Warmup Iteration  27: 1660204.670 ops/s
# Warmup Iteration  28: 1666870.557 ops/s
# Warmup Iteration  29: 1658876.036 ops/s
# Warmup Iteration  30: 1582140.393 ops/s
Iteration   1: 1572895.041 ops/s
Iteration   2: 1621734.946 ops/s
Iteration   3: 1619995.947 ops/s
Iteration   4: 1561883.962 ops/s
Iteration   5: 1574009.524 ops/s
Iteration   6: 1593047.766 ops/s
Iteration   7: 1689107.936 ops/s
Iteration   8: 1665762.338 ops/s
Iteration   9: 1574887.473 ops/s
Iteration  10: 1563423.446 ops/s
Iteration  11: 1615593.801 ops/s
Iteration  12: 1715254.170 ops/s
Iteration  13: 1668576.632 ops/s
Iteration  14: 1617094.566 ops/s
Iteration  15: 1624355.722 ops/s
Iteration  16: 1562726.347 ops/s
Iteration  17: 1626515.506 ops/s
Iteration  18: 1583641.498 ops/s
Iteration  19: 1555614.253 ops/s
Iteration  20: 1592934.785 ops/s
Iteration  21: 1626906.938 ops/s
Iteration  22: 1536036.958 ops/s
Iteration  23: 1542215.506 ops/s
Iteration  24: 1549440.099 ops/s
Iteration  25: 1625885.597 ops/s
Iteration  26: 1571037.655 ops/s
Iteration  27: 1597026.364 ops/s
Iteration  28: 1551183.578 ops/s
Iteration  29: 1581707.913 ops/s
Iteration  30: 1572756.534 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableEmpty":
  1598441.760 ±(99.9%) 29653.253 ops/s [Average]
  (min, avg, max) = (1536036.958, 1598441.760, 1715254.170), stdev = 44383.596
  CI (99.9%): [1568788.507, 1628095.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableEmpty  thrpt   30  1598441.760 ± 29653.253  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 726197.513 ops/s
# Warmup Iteration   2: 1958323.371 ops/s
# Warmup Iteration   3: 1829503.223 ops/s
# Warmup Iteration   4: 1731226.163 ops/s
# Warmup Iteration   5: 2001365.110 ops/s
# Warmup Iteration   6: 2031637.840 ops/s
# Warmup Iteration   7: 2043891.681 ops/s
# Warmup Iteration   8: 1982003.625 ops/s
# Warmup Iteration   9: 2052992.269 ops/s
# Warmup Iteration  10: 1959256.709 ops/s
# Warmup Iteration  11: 2055646.219 ops/s
# Warmup Iteration  12: 2030081.712 ops/s
# Warmup Iteration  13: 1997332.045 ops/s
# Warmup Iteration  14: 1981379.956 ops/s
# Warmup Iteration  15: 1973614.932 ops/s
# Warmup Iteration  16: 2000874.413 ops/s
# Warmup Iteration  17: 2056071.309 ops/s
# Warmup Iteration  18: 2023163.856 ops/s
# Warmup Iteration  19: 1992174.344 ops/s
# Warmup Iteration  20: 2158689.757 ops/s
# Warmup Iteration  21: 2069279.340 ops/s
# Warmup Iteration  22: 1984077.234 ops/s
# Warmup Iteration  23: 2049473.570 ops/s
# Warmup Iteration  24: 1970160.966 ops/s
# Warmup Iteration  25: 2045231.011 ops/s
# Warmup Iteration  26: 2139824.651 ops/s
# Warmup Iteration  27: 2099830.310 ops/s
# Warmup Iteration  28: 1994518.244 ops/s
# Warmup Iteration  29: 1981241.343 ops/s
# Warmup Iteration  30: 1981594.744 ops/s
Iteration   1: 2011834.654 ops/s
Iteration   2: 1980728.765 ops/s
Iteration   3: 2067692.492 ops/s
Iteration   4: 2040839.158 ops/s
Iteration   5: 2052593.817 ops/s
Iteration   6: 2051080.365 ops/s
Iteration   7: 2063096.884 ops/s
Iteration   8: 1976159.766 ops/s
Iteration   9: 2025736.561 ops/s
Iteration  10: 2007283.193 ops/s
Iteration  11: 2025446.961 ops/s
Iteration  12: 1951437.880 ops/s
Iteration  13: 2013266.161 ops/s
Iteration  14: 2019698.157 ops/s
Iteration  15: 1971770.665 ops/s
Iteration  16: 1966631.953 ops/s
Iteration  17: 1988889.337 ops/s
Iteration  18: 1975105.860 ops/s
Iteration  19: 1976419.118 ops/s
Iteration  20: 1959893.561 ops/s
Iteration  21: 1992788.056 ops/s
Iteration  22: 1952898.460 ops/s
Iteration  23: 1982968.238 ops/s
Iteration  24: 1958321.498 ops/s
Iteration  25: 1953708.726 ops/s
Iteration  26: 2045094.401 ops/s
Iteration  27: 1998459.887 ops/s
Iteration  28: 1997993.251 ops/s
Iteration  29: 1955997.150 ops/s
Iteration  30: 2000190.115 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty":
  1998800.836 ±(99.9%) 23593.138 ops/s [Average]
  (min, avg, max) = (1951437.880, 1998800.836, 2067692.492), stdev = 35313.101
  CI (99.9%): [1975207.698, 2022393.974] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty  thrpt   30  1998800.836 ± 23593.138  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 45767.158 ops/s
# Warmup Iteration   2: 44050.858 ops/s
# Warmup Iteration   3: 43538.920 ops/s
# Warmup Iteration   4: 42656.348 ops/s
# Warmup Iteration   5: 42860.113 ops/s
# Warmup Iteration   6: 45194.568 ops/s
# Warmup Iteration   7: 46087.633 ops/s
# Warmup Iteration   8: 44867.424 ops/s
# Warmup Iteration   9: 43524.426 ops/s
# Warmup Iteration  10: 45445.890 ops/s
# Warmup Iteration  11: 45452.832 ops/s
# Warmup Iteration  12: 46049.687 ops/s
# Warmup Iteration  13: 43489.416 ops/s
# Warmup Iteration  14: 43825.391 ops/s
# Warmup Iteration  15: 42853.649 ops/s
# Warmup Iteration  16: 44704.349 ops/s
# Warmup Iteration  17: 44890.677 ops/s
# Warmup Iteration  18: 44425.110 ops/s
# Warmup Iteration  19: 45940.761 ops/s
# Warmup Iteration  20: 46396.941 ops/s
# Warmup Iteration  21: 46011.701 ops/s
# Warmup Iteration  22: 46676.399 ops/s
# Warmup Iteration  23: 46395.198 ops/s
# Warmup Iteration  24: 47619.239 ops/s
# Warmup Iteration  25: 47103.828 ops/s
# Warmup Iteration  26: 46277.231 ops/s
# Warmup Iteration  27: 47582.825 ops/s
# Warmup Iteration  28: 46483.739 ops/s
# Warmup Iteration  29: 47034.862 ops/s
# Warmup Iteration  30: 46206.842 ops/s
Iteration   1: 47721.444 ops/s
Iteration   2: 47176.952 ops/s
Iteration   3: 44711.880 ops/s
Iteration   4: 44604.917 ops/s
Iteration   5: 44139.194 ops/s
Iteration   6: 41259.448 ops/s
Iteration   7: 45164.373 ops/s
Iteration   8: 43843.550 ops/s
Iteration   9: 44110.030 ops/s
Iteration  10: 44270.108 ops/s
Iteration  11: 44009.933 ops/s
Iteration  12: 45424.228 ops/s
Iteration  13: 45490.324 ops/s
Iteration  14: 44691.877 ops/s
Iteration  15: 44539.149 ops/s
Iteration  16: 43934.144 ops/s
Iteration  17: 44729.823 ops/s
Iteration  18: 43968.566 ops/s
Iteration  19: 43723.344 ops/s
Iteration  20: 44832.057 ops/s
Iteration  21: 43931.559 ops/s
Iteration  22: 44042.127 ops/s
Iteration  23: 44231.821 ops/s
Iteration  24: 43575.593 ops/s
Iteration  25: 44265.170 ops/s
Iteration  26: 44656.592 ops/s
Iteration  27: 45035.495 ops/s
Iteration  28: 44827.410 ops/s
Iteration  29: 43968.594 ops/s
Iteration  30: 47360.538 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableNull":
  44608.008 ±(99.9%) 812.023 ops/s [Average]
  (min, avg, max) = (41259.448, 44608.008, 47721.444), stdev = 1215.398
  CI (99.9%): [43795.985, 45420.031] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt      Score     Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableNull  thrpt   30  44608.008 ± 812.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 611666.764 ops/s
# Warmup Iteration   2: 1486736.552 ops/s
# Warmup Iteration   3: 1505895.132 ops/s
# Warmup Iteration   4: 1220957.736 ops/s
# Warmup Iteration   5: 1518074.171 ops/s
# Warmup Iteration   6: 1536797.742 ops/s
# Warmup Iteration   7: 1560246.546 ops/s
# Warmup Iteration   8: 1538407.533 ops/s
# Warmup Iteration   9: 1492327.612 ops/s
# Warmup Iteration  10: 1554778.438 ops/s
# Warmup Iteration  11: 1530807.118 ops/s
# Warmup Iteration  12: 1484158.190 ops/s
# Warmup Iteration  13: 1559969.550 ops/s
# Warmup Iteration  14: 1542158.101 ops/s
# Warmup Iteration  15: 1536890.202 ops/s
# Warmup Iteration  16: 1494596.796 ops/s
# Warmup Iteration  17: 1492177.288 ops/s
# Warmup Iteration  18: 1532299.889 ops/s
# Warmup Iteration  19: 1531129.511 ops/s
# Warmup Iteration  20: 1543168.688 ops/s
# Warmup Iteration  21: 1552943.709 ops/s
# Warmup Iteration  22: 1505819.613 ops/s
# Warmup Iteration  23: 1521568.525 ops/s
# Warmup Iteration  24: 1477323.170 ops/s
# Warmup Iteration  25: 1497035.113 ops/s
# Warmup Iteration  26: 1472621.148 ops/s
# Warmup Iteration  27: 1538369.722 ops/s
# Warmup Iteration  28: 1491373.430 ops/s
# Warmup Iteration  29: 1472069.738 ops/s
# Warmup Iteration  30: 1522338.782 ops/s
Iteration   1: 1496255.899 ops/s
Iteration   2: 1462145.315 ops/s
Iteration   3: 1474891.014 ops/s
Iteration   4: 1524041.661 ops/s
Iteration   5: 1452273.952 ops/s
Iteration   6: 1484028.241 ops/s
Iteration   7: 1464200.711 ops/s
Iteration   8: 1464137.153 ops/s
Iteration   9: 1472098.998 ops/s
Iteration  10: 1481409.570 ops/s
Iteration  11: 1476939.627 ops/s
Iteration  12: 1484578.999 ops/s
Iteration  13: 1486072.948 ops/s
Iteration  14: 1487049.702 ops/s
Iteration  15: 1499918.598 ops/s
Iteration  16: 1489448.901 ops/s
Iteration  17: 1474525.523 ops/s
Iteration  18: 1490816.535 ops/s
Iteration  19: 1476777.173 ops/s
Iteration  20: 1496736.278 ops/s
Iteration  21: 1484821.050 ops/s
Iteration  22: 1484225.465 ops/s
Iteration  23: 1488313.181 ops/s
Iteration  24: 1460788.671 ops/s
Iteration  25: 1467378.872 ops/s
Iteration  26: 1485447.060 ops/s
Iteration  27: 1500777.679 ops/s
Iteration  28: 1485276.644 ops/s
Iteration  29: 1473601.224 ops/s
Iteration  30: 1488229.086 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableTargetEmpty":
  1481906.858 ±(99.9%) 9663.746 ops/s [Average]
  (min, avg, max) = (1452273.952, 1481906.858, 1524041.661), stdev = 14464.241
  CI (99.9%): [1472243.111, 1491570.604] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putAllMapIterableTargetEmpty  thrpt   30  1481906.858 ± 9663.746  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putPair$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putPair

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 677529.478 ops/s
# Warmup Iteration   2: 1431637.815 ops/s
# Warmup Iteration   3: 1621929.003 ops/s
# Warmup Iteration   4: 1563125.797 ops/s
# Warmup Iteration   5: 1331189.741 ops/s
# Warmup Iteration   6: 1535969.789 ops/s
# Warmup Iteration   7: 1522608.400 ops/s
# Warmup Iteration   8: 1524279.086 ops/s
# Warmup Iteration   9: 1533041.718 ops/s
# Warmup Iteration  10: 1527249.772 ops/s
# Warmup Iteration  11: 1563584.210 ops/s
# Warmup Iteration  12: 1534400.354 ops/s
# Warmup Iteration  13: 1552607.758 ops/s
# Warmup Iteration  14: 1469545.192 ops/s
# Warmup Iteration  15: 1513813.440 ops/s
# Warmup Iteration  16: 1542681.814 ops/s
# Warmup Iteration  17: 1527859.213 ops/s
# Warmup Iteration  18: 1564219.667 ops/s
# Warmup Iteration  19: 1584347.334 ops/s
# Warmup Iteration  20: 1604133.789 ops/s
# Warmup Iteration  21: 1591570.202 ops/s
# Warmup Iteration  22: 1562093.398 ops/s
# Warmup Iteration  23: 1540731.048 ops/s
# Warmup Iteration  24: 1522043.139 ops/s
# Warmup Iteration  25: 1540113.438 ops/s
# Warmup Iteration  26: 1529054.766 ops/s
# Warmup Iteration  27: 1527173.247 ops/s
# Warmup Iteration  28: 1579475.709 ops/s
# Warmup Iteration  29: 1563259.841 ops/s
# Warmup Iteration  30: 1573473.984 ops/s
Iteration   1: 1512942.842 ops/s
Iteration   2: 1530897.596 ops/s
Iteration   3: 1517412.530 ops/s
Iteration   4: 1594663.074 ops/s
Iteration   5: 1592323.201 ops/s
Iteration   6: 1597967.434 ops/s
Iteration   7: 1551015.208 ops/s
Iteration   8: 1578362.957 ops/s
Iteration   9: 1555729.764 ops/s
Iteration  10: 1608080.036 ops/s
Iteration  11: 1547390.018 ops/s
Iteration  12: 1576732.681 ops/s
Iteration  13: 1527380.854 ops/s
Iteration  14: 1511643.906 ops/s
Iteration  15: 1537358.563 ops/s
Iteration  16: 1518773.753 ops/s
Iteration  17: 1522687.843 ops/s
Iteration  18: 1547546.532 ops/s
Iteration  19: 1534122.372 ops/s
Iteration  20: 1540064.476 ops/s
Iteration  21: 1547664.708 ops/s
Iteration  22: 1526405.603 ops/s
Iteration  23: 1526691.981 ops/s
Iteration  24: 1555876.125 ops/s
Iteration  25: 1530367.373 ops/s
Iteration  26: 1576481.145 ops/s
Iteration  27: 1613565.927 ops/s
Iteration  28: 1600498.886 ops/s
Iteration  29: 1602459.293 ops/s
Iteration  30: 1548117.583 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putPair":
  1554374.142 ±(99.9%) 21141.956 ops/s [Average]
  (min, avg, max) = (1511643.906, 1554374.142, 1613565.927), stdev = 31644.287
  CI (99.9%): [1533232.186, 1575516.098] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_putPair  thrpt   30  1554374.142 ± 21141.956  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rehash_null_collision$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rehash_null_collision

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19766.344 ops/s
# Warmup Iteration   2: 28195.938 ops/s
# Warmup Iteration   3: 33333.174 ops/s
# Warmup Iteration   4: 34904.536 ops/s
# Warmup Iteration   5: 34496.861 ops/s
# Warmup Iteration   6: 33988.304 ops/s
# Warmup Iteration   7: 28030.049 ops/s
# Warmup Iteration   8: 33543.667 ops/s
# Warmup Iteration   9: 33354.244 ops/s
# Warmup Iteration  10: 33634.983 ops/s
# Warmup Iteration  11: 33623.086 ops/s
# Warmup Iteration  12: 33257.132 ops/s
# Warmup Iteration  13: 33629.162 ops/s
# Warmup Iteration  14: 33174.478 ops/s
# Warmup Iteration  15: 34118.681 ops/s
# Warmup Iteration  16: 33415.835 ops/s
# Warmup Iteration  17: 33517.883 ops/s
# Warmup Iteration  18: 34060.478 ops/s
# Warmup Iteration  19: 33627.974 ops/s
# Warmup Iteration  20: 34241.491 ops/s
# Warmup Iteration  21: 33525.193 ops/s
# Warmup Iteration  22: 33636.733 ops/s
# Warmup Iteration  23: 34748.252 ops/s
# Warmup Iteration  24: 33541.943 ops/s
# Warmup Iteration  25: 34938.709 ops/s
# Warmup Iteration  26: 33509.317 ops/s
# Warmup Iteration  27: 33759.852 ops/s
# Warmup Iteration  28: 33895.998 ops/s
# Warmup Iteration  29: 33363.484 ops/s
# Warmup Iteration  30: 33635.351 ops/s
Iteration   1: 33994.203 ops/s
Iteration   2: 33265.788 ops/s
Iteration   3: 33489.880 ops/s
Iteration   4: 33087.290 ops/s
Iteration   5: 33183.020 ops/s
Iteration   6: 33686.848 ops/s
Iteration   7: 33794.695 ops/s
Iteration   8: 33179.686 ops/s
Iteration   9: 34074.801 ops/s
Iteration  10: 33958.575 ops/s
Iteration  11: 34135.333 ops/s
Iteration  12: 33447.695 ops/s
Iteration  13: 34468.518 ops/s
Iteration  14: 33513.555 ops/s
Iteration  15: 34611.513 ops/s
Iteration  16: 34091.002 ops/s
Iteration  17: 33465.262 ops/s
Iteration  18: 34421.782 ops/s
Iteration  19: 36700.673 ops/s
Iteration  20: 36792.405 ops/s
Iteration  21: 36853.834 ops/s
Iteration  22: 35970.689 ops/s
Iteration  23: 35109.994 ops/s
Iteration  24: 34734.530 ops/s
Iteration  25: 33599.187 ops/s
Iteration  26: 33077.752 ops/s
Iteration  27: 35288.638 ops/s
Iteration  28: 34252.348 ops/s
Iteration  29: 33232.076 ops/s
Iteration  30: 33666.316 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rehash_null_collision":
  34238.263 ±(99.9%) 737.851 ops/s [Average]
  (min, avg, max) = (33077.752, 34238.263, 36853.834), stdev = 1104.381
  CI (99.9%): [33500.412, 34976.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt      Score     Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rehash_null_collision  thrpt   30  34238.263 ± 737.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 773023.567 ops/s
# Warmup Iteration   2: 1785254.792 ops/s
# Warmup Iteration   3: 1948981.449 ops/s
# Warmup Iteration   4: 2082625.256 ops/s
# Warmup Iteration   5: 1689241.813 ops/s
# Warmup Iteration   6: 1963367.449 ops/s
# Warmup Iteration   7: 1947851.247 ops/s
# Warmup Iteration   8: 1989306.085 ops/s
# Warmup Iteration   9: 1981855.254 ops/s
# Warmup Iteration  10: 1939806.325 ops/s
# Warmup Iteration  11: 1921693.223 ops/s
# Warmup Iteration  12: 1896469.092 ops/s
# Warmup Iteration  13: 1985293.765 ops/s
# Warmup Iteration  14: 1927629.489 ops/s
# Warmup Iteration  15: 1936468.885 ops/s
# Warmup Iteration  16: 1963463.624 ops/s
# Warmup Iteration  17: 1916178.019 ops/s
# Warmup Iteration  18: 1976910.706 ops/s
# Warmup Iteration  19: 1913838.576 ops/s
# Warmup Iteration  20: 1935002.554 ops/s
# Warmup Iteration  21: 1928149.394 ops/s
# Warmup Iteration  22: 2021541.494 ops/s
# Warmup Iteration  23: 2023516.036 ops/s
# Warmup Iteration  24: 2099807.045 ops/s
# Warmup Iteration  25: 2024775.972 ops/s
# Warmup Iteration  26: 1942816.667 ops/s
# Warmup Iteration  27: 2097668.166 ops/s
# Warmup Iteration  28: 2074267.061 ops/s
# Warmup Iteration  29: 2052387.232 ops/s
# Warmup Iteration  30: 1991774.220 ops/s
Iteration   1: 2104515.214 ops/s
Iteration   2: 1991702.311 ops/s
Iteration   3: 1952567.747 ops/s
Iteration   4: 2104549.458 ops/s
Iteration   5: 2103628.671 ops/s
Iteration   6: 2003771.165 ops/s
Iteration   7: 1954003.752 ops/s
Iteration   8: 2046000.680 ops/s
Iteration   9: 2051302.667 ops/s
Iteration  10: 2061950.062 ops/s
Iteration  11: 2091222.898 ops/s
Iteration  12: 1971562.025 ops/s
Iteration  13: 2069834.351 ops/s
Iteration  14: 1984342.749 ops/s
Iteration  15: 2098128.124 ops/s
Iteration  16: 2109043.447 ops/s
Iteration  17: 2074837.292 ops/s
Iteration  18: 2016708.465 ops/s
Iteration  19: 1943212.372 ops/s
Iteration  20: 2108614.906 ops/s
Iteration  21: 2019473.738 ops/s
Iteration  22: 1948833.804 ops/s
Iteration  23: 1923867.001 ops/s
Iteration  24: 1985520.022 ops/s
Iteration  25: 1994923.534 ops/s
Iteration  26: 1943538.704 ops/s
Iteration  27: 2099245.534 ops/s
Iteration  28: 2083492.099 ops/s
Iteration  29: 1973678.055 ops/s
Iteration  30: 1948390.653 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_reject":
  2025415.383 ±(99.9%) 42130.503 ops/s [Average]
  (min, avg, max) = (1923867.001, 2025415.383, 2109043.447), stdev = 63058.959
  CI (99.9%): [1983284.880, 2067545.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_reject  thrpt   30  2025415.383 ± 42130.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rejectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rejectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1005535.106 ops/s
# Warmup Iteration   2: 2613512.945 ops/s
# Warmup Iteration   3: 2160026.043 ops/s
# Warmup Iteration   4: 2585844.141 ops/s
# Warmup Iteration   5: 2541728.255 ops/s
# Warmup Iteration   6: 2630267.241 ops/s
# Warmup Iteration   7: 2638160.322 ops/s
# Warmup Iteration   8: 2529905.364 ops/s
# Warmup Iteration   9: 2763355.012 ops/s
# Warmup Iteration  10: 2640011.343 ops/s
# Warmup Iteration  11: 2698458.204 ops/s
# Warmup Iteration  12: 2558495.919 ops/s
# Warmup Iteration  13: 2597434.496 ops/s
# Warmup Iteration  14: 2726353.645 ops/s
# Warmup Iteration  15: 2547987.999 ops/s
# Warmup Iteration  16: 2573541.287 ops/s
# Warmup Iteration  17: 2704411.150 ops/s
# Warmup Iteration  18: 2470356.528 ops/s
# Warmup Iteration  19: 2501076.213 ops/s
# Warmup Iteration  20: 2527907.280 ops/s
# Warmup Iteration  21: 2505278.078 ops/s
# Warmup Iteration  22: 2443532.321 ops/s
# Warmup Iteration  23: 2508057.746 ops/s
# Warmup Iteration  24: 2529293.197 ops/s
# Warmup Iteration  25: 2553008.591 ops/s
# Warmup Iteration  26: 2493549.639 ops/s
# Warmup Iteration  27: 2596930.642 ops/s
# Warmup Iteration  28: 2573170.567 ops/s
# Warmup Iteration  29: 2551067.032 ops/s
# Warmup Iteration  30: 2684631.851 ops/s
Iteration   1: 2589093.147 ops/s
Iteration   2: 2529537.464 ops/s
Iteration   3: 2569938.396 ops/s
Iteration   4: 2489221.408 ops/s
Iteration   5: 2565070.277 ops/s
Iteration   6: 2529142.680 ops/s
Iteration   7: 2694621.201 ops/s
Iteration   8: 2716755.550 ops/s
Iteration   9: 2613949.518 ops/s
Iteration  10: 2596414.198 ops/s
Iteration  11: 2467388.136 ops/s
Iteration  12: 2543976.598 ops/s
Iteration  13: 2640569.074 ops/s
Iteration  14: 2507128.087 ops/s
Iteration  15: 2510696.414 ops/s
Iteration  16: 2523457.363 ops/s
Iteration  17: 2632923.724 ops/s
Iteration  18: 2522920.929 ops/s
Iteration  19: 2495472.054 ops/s
Iteration  20: 2585497.252 ops/s
Iteration  21: 2628585.558 ops/s
Iteration  22: 2623078.829 ops/s
Iteration  23: 2525720.548 ops/s
Iteration  24: 2528638.938 ops/s
Iteration  25: 2482675.134 ops/s
Iteration  26: 2530402.441 ops/s
Iteration  27: 2443657.116 ops/s
Iteration  28: 2526241.447 ops/s
Iteration  29: 2710866.000 ops/s
Iteration  30: 2493697.691 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rejectMap":
  2560577.906 ±(99.9%) 47681.223 ops/s [Average]
  (min, avg, max) = (2443657.116, 2560577.906, 2716755.550), stdev = 71367.015
  CI (99.9%): [2512896.683, 2608259.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rejectMap  thrpt   30  2560577.906 ± 47681.223  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 807585.392 ops/s
# Warmup Iteration   2: 1772739.999 ops/s
# Warmup Iteration   3: 1940570.015 ops/s
# Warmup Iteration   4: 2021936.271 ops/s
# Warmup Iteration   5: 1672146.975 ops/s
# Warmup Iteration   6: 1981802.773 ops/s
# Warmup Iteration   7: 2081636.778 ops/s
# Warmup Iteration   8: 2138003.548 ops/s
# Warmup Iteration   9: 2112781.187 ops/s
# Warmup Iteration  10: 2087095.794 ops/s
# Warmup Iteration  11: 2147639.032 ops/s
# Warmup Iteration  12: 2095875.630 ops/s
# Warmup Iteration  13: 2092012.054 ops/s
# Warmup Iteration  14: 2142743.069 ops/s
# Warmup Iteration  15: 2143266.990 ops/s
# Warmup Iteration  16: 2146282.244 ops/s
# Warmup Iteration  17: 2133881.917 ops/s
# Warmup Iteration  18: 2136371.774 ops/s
# Warmup Iteration  19: 2132966.836 ops/s
# Warmup Iteration  20: 2132454.766 ops/s
# Warmup Iteration  21: 2137443.831 ops/s
# Warmup Iteration  22: 2087511.886 ops/s
# Warmup Iteration  23: 2078718.361 ops/s
# Warmup Iteration  24: 2105826.250 ops/s
# Warmup Iteration  25: 2123135.112 ops/s
# Warmup Iteration  26: 2100236.587 ops/s
# Warmup Iteration  27: 2052517.286 ops/s
# Warmup Iteration  28: 2117461.319 ops/s
# Warmup Iteration  29: 2097905.392 ops/s
# Warmup Iteration  30: 2129768.994 ops/s
Iteration   1: 2120933.410 ops/s
Iteration   2: 2099907.258 ops/s
Iteration   3: 2129188.349 ops/s
Iteration   4: 2111076.607 ops/s
Iteration   5: 2132331.489 ops/s
Iteration   6: 2139622.364 ops/s
Iteration   7: 2114762.149 ops/s
Iteration   8: 2096123.271 ops/s
Iteration   9: 2106659.597 ops/s
Iteration  10: 2104250.238 ops/s
Iteration  11: 2088560.573 ops/s
Iteration  12: 2125182.922 ops/s
Iteration  13: 2127870.474 ops/s
Iteration  14: 2139782.737 ops/s
Iteration  15: 2143988.268 ops/s
Iteration  16: 2139493.285 ops/s
Iteration  17: 2097607.169 ops/s
Iteration  18: 2059754.307 ops/s
Iteration  19: 2114757.508 ops/s
Iteration  20: 2112875.855 ops/s
Iteration  21: 2121723.646 ops/s
Iteration  22: 2135040.351 ops/s
Iteration  23: 2147766.850 ops/s
Iteration  24: 2120128.448 ops/s
Iteration  25: 2117009.663 ops/s
Iteration  26: 2135475.898 ops/s
Iteration  27: 2142710.547 ops/s
Iteration  28: 2130108.893 ops/s
Iteration  29: 2123752.101 ops/s
Iteration  30: 2089253.542 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rejectWith":
  2118923.259 ±(99.9%) 13335.616 ops/s [Average]
  (min, avg, max) = (2059754.307, 2118923.259, 2147766.850), stdev = 19960.123
  CI (99.9%): [2105587.643, 2132258.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rejectWith  thrpt   30  2118923.259 ± 13335.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rejectWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rejectWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1625450.351 ops/s
# Warmup Iteration   2: 3623614.257 ops/s
# Warmup Iteration   3: 3041300.966 ops/s
# Warmup Iteration   4: 3622193.072 ops/s
# Warmup Iteration   5: 3614101.538 ops/s
# Warmup Iteration   6: 3611383.320 ops/s
# Warmup Iteration   7: 3599709.382 ops/s
# Warmup Iteration   8: 3555507.864 ops/s
# Warmup Iteration   9: 3471996.457 ops/s
# Warmup Iteration  10: 3495409.324 ops/s
# Warmup Iteration  11: 3623193.038 ops/s
# Warmup Iteration  12: 3624450.479 ops/s
# Warmup Iteration  13: 3596959.438 ops/s
# Warmup Iteration  14: 3601869.378 ops/s
# Warmup Iteration  15: 3610960.581 ops/s
# Warmup Iteration  16: 3582597.119 ops/s
# Warmup Iteration  17: 3565293.089 ops/s
# Warmup Iteration  18: 3596637.928 ops/s
# Warmup Iteration  19: 3579115.980 ops/s
# Warmup Iteration  20: 3598227.479 ops/s
# Warmup Iteration  21: 3585392.790 ops/s
# Warmup Iteration  22: 3601196.072 ops/s
# Warmup Iteration  23: 3611981.762 ops/s
# Warmup Iteration  24: 3617583.582 ops/s
# Warmup Iteration  25: 3630559.184 ops/s
# Warmup Iteration  26: 3629109.887 ops/s
# Warmup Iteration  27: 3633141.828 ops/s
# Warmup Iteration  28: 3604798.476 ops/s
# Warmup Iteration  29: 3590519.371 ops/s
# Warmup Iteration  30: 3609788.727 ops/s
Iteration   1: 3616243.673 ops/s
Iteration   2: 3646217.436 ops/s
Iteration   3: 3521613.306 ops/s
Iteration   4: 3395974.740 ops/s
Iteration   5: 3559866.754 ops/s
Iteration   6: 3602834.757 ops/s
Iteration   7: 3605763.399 ops/s
Iteration   8: 3460653.655 ops/s
Iteration   9: 3395368.881 ops/s
Iteration  10: 3388118.766 ops/s
Iteration  11: 3376814.868 ops/s
Iteration  12: 3411738.627 ops/s
Iteration  13: 3424862.265 ops/s
Iteration  14: 3376002.417 ops/s
Iteration  15: 3415531.089 ops/s
Iteration  16: 3316967.570 ops/s
Iteration  17: 3334494.027 ops/s
Iteration  18: 3291849.322 ops/s
Iteration  19: 3301962.407 ops/s
Iteration  20: 3322428.249 ops/s
Iteration  21: 3317346.658 ops/s
Iteration  22: 3325647.858 ops/s
Iteration  23: 3277767.834 ops/s
Iteration  24: 3299382.941 ops/s
Iteration  25: 3366551.982 ops/s
Iteration  26: 3315160.030 ops/s
Iteration  27: 3338835.379 ops/s
Iteration  28: 3312652.943 ops/s
Iteration  29: 3338412.229 ops/s
Iteration  30: 3305376.932 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rejectWith_value":
  3398748.033 ±(99.9%) 72924.961 ops/s [Average]
  (min, avg, max) = (3277767.834, 3398748.033, 3646217.436), stdev = 109150.656
  CI (99.9%): [3325823.072, 3471672.994] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_rejectWith_value  thrpt   30  3398748.033 ± 72924.961  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_reject_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_reject_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 793856.237 ops/s
# Warmup Iteration   2: 2078588.869 ops/s
# Warmup Iteration   3: 2051662.768 ops/s
# Warmup Iteration   4: 1723226.201 ops/s
# Warmup Iteration   5: 2050380.230 ops/s
# Warmup Iteration   6: 2228364.777 ops/s
# Warmup Iteration   7: 2107077.186 ops/s
# Warmup Iteration   8: 2057691.043 ops/s
# Warmup Iteration   9: 2100964.258 ops/s
# Warmup Iteration  10: 2111564.195 ops/s
# Warmup Iteration  11: 2063791.289 ops/s
# Warmup Iteration  12: 2076930.715 ops/s
# Warmup Iteration  13: 2131197.273 ops/s
# Warmup Iteration  14: 2088268.762 ops/s
# Warmup Iteration  15: 2061020.615 ops/s
# Warmup Iteration  16: 2045864.044 ops/s
# Warmup Iteration  17: 2074684.400 ops/s
# Warmup Iteration  18: 2061261.278 ops/s
# Warmup Iteration  19: 2087849.404 ops/s
# Warmup Iteration  20: 2088564.108 ops/s
# Warmup Iteration  21: 2004993.321 ops/s
# Warmup Iteration  22: 2012715.706 ops/s
# Warmup Iteration  23: 2075993.925 ops/s
# Warmup Iteration  24: 2106915.541 ops/s
# Warmup Iteration  25: 2073504.741 ops/s
# Warmup Iteration  26: 2061349.439 ops/s
# Warmup Iteration  27: 2113181.961 ops/s
# Warmup Iteration  28: 2100179.704 ops/s
# Warmup Iteration  29: 2148885.004 ops/s
# Warmup Iteration  30: 2147106.452 ops/s
Iteration   1: 2049981.846 ops/s
Iteration   2: 2058408.850 ops/s
Iteration   3: 2072665.920 ops/s
Iteration   4: 2122851.728 ops/s
Iteration   5: 2075608.268 ops/s
Iteration   6: 2056336.666 ops/s
Iteration   7: 2027138.581 ops/s
Iteration   8: 2122397.398 ops/s
Iteration   9: 2078211.629 ops/s
Iteration  10: 2114587.888 ops/s
Iteration  11: 2224724.296 ops/s
Iteration  12: 2129275.259 ops/s
Iteration  13: 2094813.396 ops/s
Iteration  14: 2090710.265 ops/s
Iteration  15: 2077896.391 ops/s
Iteration  16: 2092517.225 ops/s
Iteration  17: 2083603.336 ops/s
Iteration  18: 2089235.335 ops/s
Iteration  19: 2115073.375 ops/s
Iteration  20: 2133444.137 ops/s
Iteration  21: 2083789.888 ops/s
Iteration  22: 2039269.389 ops/s
Iteration  23: 2035144.421 ops/s
Iteration  24: 2114271.226 ops/s
Iteration  25: 2050548.583 ops/s
Iteration  26: 2056416.996 ops/s
Iteration  27: 2212472.550 ops/s
Iteration  28: 2246279.641 ops/s
Iteration  29: 2220956.480 ops/s
Iteration  30: 2107138.108 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_reject_value":
  2102525.636 ±(99.9%) 38147.953 ops/s [Average]
  (min, avg, max) = (2027138.581, 2102525.636, 2246279.641), stdev = 57098.064
  CI (99.9%): [2064377.683, 2140673.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_reject_value  thrpt   30  2102525.636 ± 38147.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 147843.530 ops/s
# Warmup Iteration   2: 172705.545 ops/s
# Warmup Iteration   3: 250464.042 ops/s
# Warmup Iteration   4: 242519.754 ops/s
# Warmup Iteration   5: 246986.083 ops/s
# Warmup Iteration   6: 243081.009 ops/s
# Warmup Iteration   7: 252136.943 ops/s
# Warmup Iteration   8: 251512.925 ops/s
# Warmup Iteration   9: 227953.966 ops/s
# Warmup Iteration  10: 197983.286 ops/s
# Warmup Iteration  11: 233945.956 ops/s
# Warmup Iteration  12: 250932.401 ops/s
# Warmup Iteration  13: 228843.893 ops/s
# Warmup Iteration  14: 235431.564 ops/s
# Warmup Iteration  15: 252397.473 ops/s
# Warmup Iteration  16: 252252.726 ops/s
# Warmup Iteration  17: 251395.861 ops/s
# Warmup Iteration  18: 227149.936 ops/s
# Warmup Iteration  19: 232485.807 ops/s
# Warmup Iteration  20: 228206.899 ops/s
# Warmup Iteration  21: 231908.002 ops/s
# Warmup Iteration  22: 232261.868 ops/s
# Warmup Iteration  23: 235971.537 ops/s
# Warmup Iteration  24: 233607.705 ops/s
# Warmup Iteration  25: 230599.220 ops/s
# Warmup Iteration  26: 227594.699 ops/s
# Warmup Iteration  27: 231852.921 ops/s
# Warmup Iteration  28: 227235.328 ops/s
# Warmup Iteration  29: 229429.198 ops/s
# Warmup Iteration  30: 234847.506 ops/s
Iteration   1: 237853.719 ops/s
Iteration   2: 227560.519 ops/s
Iteration   3: 242133.877 ops/s
Iteration   4: 240685.673 ops/s
Iteration   5: 230346.573 ops/s
Iteration   6: 229953.921 ops/s
Iteration   7: 232918.408 ops/s
Iteration   8: 241304.763 ops/s
Iteration   9: 234640.463 ops/s
Iteration  10: 252799.505 ops/s
Iteration  11: 252356.170 ops/s
Iteration  12: 251756.128 ops/s
Iteration  13: 251313.136 ops/s
Iteration  14: 242894.409 ops/s
Iteration  15: 235067.549 ops/s
Iteration  16: 229074.592 ops/s
Iteration  17: 230350.781 ops/s
Iteration  18: 235412.141 ops/s
Iteration  19: 231436.511 ops/s
Iteration  20: 228331.379 ops/s
Iteration  21: 232591.311 ops/s
Iteration  22: 233005.917 ops/s
Iteration  23: 230591.244 ops/s
Iteration  24: 236741.430 ops/s
Iteration  25: 229811.065 ops/s
Iteration  26: 230998.462 ops/s
Iteration  27: 237946.319 ops/s
Iteration  28: 239720.443 ops/s
Iteration  29: 231203.395 ops/s
Iteration  30: 226251.076 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_remove":
  236235.029 ±(99.9%) 5161.364 ops/s [Average]
  (min, avg, max) = (226251.076, 236235.029, 252799.505), stdev = 7725.287
  CI (99.9%): [231073.665, 241396.393] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_remove  thrpt   30  236235.029 ± 5161.364  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 393111.247 ops/s
# Warmup Iteration   2: 692894.749 ops/s
# Warmup Iteration   3: 776627.025 ops/s
# Warmup Iteration   4: 762085.202 ops/s
# Warmup Iteration   5: 692012.493 ops/s
# Warmup Iteration   6: 746350.897 ops/s
# Warmup Iteration   7: 744861.317 ops/s
# Warmup Iteration   8: 758665.173 ops/s
# Warmup Iteration   9: 786998.352 ops/s
# Warmup Iteration  10: 736513.508 ops/s
# Warmup Iteration  11: 722486.606 ops/s
# Warmup Iteration  12: 723611.949 ops/s
# Warmup Iteration  13: 749472.914 ops/s
# Warmup Iteration  14: 741475.747 ops/s
# Warmup Iteration  15: 727043.129 ops/s
# Warmup Iteration  16: 747570.364 ops/s
# Warmup Iteration  17: 751943.483 ops/s
# Warmup Iteration  18: 753503.125 ops/s
# Warmup Iteration  19: 735801.960 ops/s
# Warmup Iteration  20: 737736.275 ops/s
# Warmup Iteration  21: 749998.726 ops/s
# Warmup Iteration  22: 779666.076 ops/s
# Warmup Iteration  23: 812199.259 ops/s
# Warmup Iteration  24: 769430.066 ops/s
# Warmup Iteration  25: 781177.470 ops/s
# Warmup Iteration  26: 796268.955 ops/s
# Warmup Iteration  27: 800507.862 ops/s
# Warmup Iteration  28: 792643.338 ops/s
# Warmup Iteration  29: 783584.864 ops/s
# Warmup Iteration  30: 796342.018 ops/s
Iteration   1: 786874.430 ops/s
Iteration   2: 781080.244 ops/s
Iteration   3: 778878.483 ops/s
Iteration   4: 796717.234 ops/s
Iteration   5: 795589.708 ops/s
Iteration   6: 789950.787 ops/s
Iteration   7: 790979.051 ops/s
Iteration   8: 796052.826 ops/s
Iteration   9: 786502.459 ops/s
Iteration  10: 795759.892 ops/s
Iteration  11: 792050.985 ops/s
Iteration  12: 797734.066 ops/s
Iteration  13: 799618.964 ops/s
Iteration  14: 803605.186 ops/s
Iteration  15: 795698.856 ops/s
Iteration  16: 795220.902 ops/s
Iteration  17: 804247.012 ops/s
Iteration  18: 799773.182 ops/s
Iteration  19: 797659.769 ops/s
Iteration  20: 764196.135 ops/s
Iteration  21: 728117.158 ops/s
Iteration  22: 733573.339 ops/s
Iteration  23: 791743.416 ops/s
Iteration  24: 785627.420 ops/s
Iteration  25: 776906.394 ops/s
Iteration  26: 799074.426 ops/s
Iteration  27: 794111.099 ops/s
Iteration  28: 787206.098 ops/s
Iteration  29: 790483.872 ops/s
Iteration  30: 753667.562 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllFromEntrySet":
  786290.032 ±(99.9%) 12417.861 ops/s [Average]
  (min, avg, max) = (728117.158, 786290.032, 804247.012), stdev = 18586.472
  CI (99.9%): [773872.170, 798707.893] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllFromEntrySet  thrpt   30  786290.032 ± 12417.861  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 833192.980 ops/s
# Warmup Iteration   2: 1398048.985 ops/s
# Warmup Iteration   3: 1548862.738 ops/s
# Warmup Iteration   4: 1592764.529 ops/s
# Warmup Iteration   5: 1617242.886 ops/s
# Warmup Iteration   6: 1285578.712 ops/s
# Warmup Iteration   7: 1546120.958 ops/s
# Warmup Iteration   8: 1528795.417 ops/s
# Warmup Iteration   9: 1533657.245 ops/s
# Warmup Iteration  10: 1619964.705 ops/s
# Warmup Iteration  11: 1613610.011 ops/s
# Warmup Iteration  12: 1612041.182 ops/s
# Warmup Iteration  13: 1614777.501 ops/s
# Warmup Iteration  14: 1584628.658 ops/s
# Warmup Iteration  15: 1485463.415 ops/s
# Warmup Iteration  16: 1585971.946 ops/s
# Warmup Iteration  17: 1595297.709 ops/s
# Warmup Iteration  18: 1622172.782 ops/s
# Warmup Iteration  19: 1621931.344 ops/s
# Warmup Iteration  20: 1605223.310 ops/s
# Warmup Iteration  21: 1602970.859 ops/s
# Warmup Iteration  22: 1613841.285 ops/s
# Warmup Iteration  23: 1590716.177 ops/s
# Warmup Iteration  24: 1603471.263 ops/s
# Warmup Iteration  25: 1601760.830 ops/s
# Warmup Iteration  26: 1604911.924 ops/s
# Warmup Iteration  27: 1611117.422 ops/s
# Warmup Iteration  28: 1602350.428 ops/s
# Warmup Iteration  29: 1622366.033 ops/s
# Warmup Iteration  30: 1597151.179 ops/s
Iteration   1: 1579865.668 ops/s
Iteration   2: 1603466.496 ops/s
Iteration   3: 1628927.865 ops/s
Iteration   4: 1628180.523 ops/s
Iteration   5: 1624627.847 ops/s
Iteration   6: 1608587.742 ops/s
Iteration   7: 1609381.279 ops/s
Iteration   8: 1543481.832 ops/s
Iteration   9: 1544875.024 ops/s
Iteration  10: 1582176.862 ops/s
Iteration  11: 1617401.688 ops/s
Iteration  12: 1597382.611 ops/s
Iteration  13: 1618141.510 ops/s
Iteration  14: 1623686.000 ops/s
Iteration  15: 1625639.314 ops/s
Iteration  16: 1630218.799 ops/s
Iteration  17: 1618047.907 ops/s
Iteration  18: 1628318.687 ops/s
Iteration  19: 1629218.337 ops/s
Iteration  20: 1627738.436 ops/s
Iteration  21: 1629916.777 ops/s
Iteration  22: 1627301.494 ops/s
Iteration  23: 1630054.958 ops/s
Iteration  24: 1610731.272 ops/s
Iteration  25: 1575508.925 ops/s
Iteration  26: 1596032.613 ops/s
Iteration  27: 1629702.342 ops/s
Iteration  28: 1595611.739 ops/s
Iteration  29: 1576709.792 ops/s
Iteration  30: 1608525.246 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllFromKeySet":
  1608315.320 ±(99.9%) 16461.582 ops/s [Average]
  (min, avg, max) = (1543481.832, 1608315.320, 1630218.799), stdev = 24638.924
  CI (99.9%): [1591853.737, 1624776.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllFromKeySet  thrpt   30  1608315.320 ± 16461.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 784786.946 ops/s
# Warmup Iteration   2: 1214082.841 ops/s
# Warmup Iteration   3: 1407605.231 ops/s
# Warmup Iteration   4: 1417336.572 ops/s
# Warmup Iteration   5: 1414052.217 ops/s
# Warmup Iteration   6: 1415669.134 ops/s
# Warmup Iteration   7: 1180005.761 ops/s
# Warmup Iteration   8: 1410717.224 ops/s
# Warmup Iteration   9: 1416962.264 ops/s
# Warmup Iteration  10: 1413966.348 ops/s
# Warmup Iteration  11: 1415927.855 ops/s
# Warmup Iteration  12: 1376638.302 ops/s
# Warmup Iteration  13: 1291791.910 ops/s
# Warmup Iteration  14: 1265431.905 ops/s
# Warmup Iteration  15: 1323437.976 ops/s
# Warmup Iteration  16: 1357328.153 ops/s
# Warmup Iteration  17: 1295802.747 ops/s
# Warmup Iteration  18: 1289048.823 ops/s
# Warmup Iteration  19: 1302011.123 ops/s
# Warmup Iteration  20: 1311869.822 ops/s
# Warmup Iteration  21: 1303908.938 ops/s
# Warmup Iteration  22: 1299660.791 ops/s
# Warmup Iteration  23: 1288261.037 ops/s
# Warmup Iteration  24: 1300531.416 ops/s
# Warmup Iteration  25: 1343955.887 ops/s
# Warmup Iteration  26: 1319243.073 ops/s
# Warmup Iteration  27: 1379897.690 ops/s
# Warmup Iteration  28: 1396896.970 ops/s
# Warmup Iteration  29: 1400600.546 ops/s
# Warmup Iteration  30: 1403391.047 ops/s
Iteration   1: 1408224.964 ops/s
Iteration   2: 1408540.140 ops/s
Iteration   3: 1410525.141 ops/s
Iteration   4: 1417229.806 ops/s
Iteration   5: 1419172.359 ops/s
Iteration   6: 1355140.416 ops/s
Iteration   7: 1374351.206 ops/s
Iteration   8: 1327470.917 ops/s
Iteration   9: 1286735.905 ops/s
Iteration  10: 1295199.454 ops/s
Iteration  11: 1320514.544 ops/s
Iteration  12: 1349624.858 ops/s
Iteration  13: 1346910.192 ops/s
Iteration  14: 1380736.875 ops/s
Iteration  15: 1337423.511 ops/s
Iteration  16: 1364744.713 ops/s
Iteration  17: 1304554.713 ops/s
Iteration  18: 1332163.989 ops/s
Iteration  19: 1346064.985 ops/s
Iteration  20: 1340273.185 ops/s
Iteration  21: 1308508.030 ops/s
Iteration  22: 1293756.572 ops/s
Iteration  23: 1343397.167 ops/s
Iteration  24: 1334460.406 ops/s
Iteration  25: 1348558.954 ops/s
Iteration  26: 1303816.873 ops/s
Iteration  27: 1418989.798 ops/s
Iteration  28: 1411830.639 ops/s
Iteration  29: 1287344.742 ops/s
Iteration  30: 1362819.802 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllFromValues":
  1351302.829 ±(99.9%) 28436.989 ops/s [Average]
  (min, avg, max) = (1286735.905, 1351302.829, 1419172.359), stdev = 42563.150
  CI (99.9%): [1322865.839, 1379739.818] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllFromValues  thrpt   30  1351302.829 ± 28436.989  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllKeys$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllKeys

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 214027.617 ops/s
# Warmup Iteration   2: 248508.033 ops/s
# Warmup Iteration   3: 341687.557 ops/s
# Warmup Iteration   4: 345027.228 ops/s
# Warmup Iteration   5: 348309.489 ops/s
# Warmup Iteration   6: 347389.018 ops/s
# Warmup Iteration   7: 357532.505 ops/s
# Warmup Iteration   8: 343799.270 ops/s
# Warmup Iteration   9: 348807.705 ops/s
# Warmup Iteration  10: 312219.933 ops/s
# Warmup Iteration  11: 311356.830 ops/s
# Warmup Iteration  12: 356588.481 ops/s
# Warmup Iteration  13: 341957.943 ops/s
# Warmup Iteration  14: 357599.336 ops/s
# Warmup Iteration  15: 357255.886 ops/s
# Warmup Iteration  16: 350288.463 ops/s
# Warmup Iteration  17: 352397.315 ops/s
# Warmup Iteration  18: 352107.995 ops/s
# Warmup Iteration  19: 356615.870 ops/s
# Warmup Iteration  20: 347110.862 ops/s
# Warmup Iteration  21: 352575.467 ops/s
# Warmup Iteration  22: 354220.906 ops/s
# Warmup Iteration  23: 353908.071 ops/s
# Warmup Iteration  24: 350316.539 ops/s
# Warmup Iteration  25: 350382.500 ops/s
# Warmup Iteration  26: 352037.367 ops/s
# Warmup Iteration  27: 360937.602 ops/s
# Warmup Iteration  28: 346389.695 ops/s
# Warmup Iteration  29: 351894.698 ops/s
# Warmup Iteration  30: 350286.497 ops/s
Iteration   1: 353046.917 ops/s
Iteration   2: 349277.134 ops/s
Iteration   3: 354978.197 ops/s
Iteration   4: 345779.100 ops/s
Iteration   5: 382914.405 ops/s
Iteration   6: 353956.878 ops/s
Iteration   7: 353154.593 ops/s
Iteration   8: 358586.131 ops/s
Iteration   9: 348012.285 ops/s
Iteration  10: 345453.455 ops/s
Iteration  11: 355651.792 ops/s
Iteration  12: 358264.677 ops/s
Iteration  13: 352177.798 ops/s
Iteration  14: 355113.004 ops/s
Iteration  15: 352291.831 ops/s
Iteration  16: 351547.039 ops/s
Iteration  17: 354505.339 ops/s
Iteration  18: 364495.210 ops/s
Iteration  19: 356186.307 ops/s
Iteration  20: 362650.750 ops/s
Iteration  21: 348249.899 ops/s
Iteration  22: 350355.095 ops/s
Iteration  23: 360302.271 ops/s
Iteration  24: 346682.087 ops/s
Iteration  25: 375694.119 ops/s
Iteration  26: 349259.786 ops/s
Iteration  27: 347779.584 ops/s
Iteration  28: 355210.631 ops/s
Iteration  29: 354430.800 ops/s
Iteration  30: 348060.792 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllKeys":
  354802.264 ±(99.9%) 5509.269 ops/s [Average]
  (min, avg, max) = (345453.455, 354802.264, 382914.405), stdev = 8246.015
  CI (99.9%): [349292.995, 360311.533] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeAllKeys  thrpt   30  354802.264 ± 5509.269  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530069.118 ops/s
# Warmup Iteration   2: 980787.774 ops/s
# Warmup Iteration   3: 1041067.035 ops/s
# Warmup Iteration   4: 1101404.515 ops/s
# Warmup Iteration   5: 977268.671 ops/s
# Warmup Iteration   6: 1019434.787 ops/s
# Warmup Iteration   7: 1070986.745 ops/s
# Warmup Iteration   8: 1073278.847 ops/s
# Warmup Iteration   9: 1095939.053 ops/s
# Warmup Iteration  10: 1112038.107 ops/s
# Warmup Iteration  11: 1160287.256 ops/s
# Warmup Iteration  12: 1157032.109 ops/s
# Warmup Iteration  13: 1088650.286 ops/s
# Warmup Iteration  14: 1137857.494 ops/s
# Warmup Iteration  15: 1099476.334 ops/s
# Warmup Iteration  16: 1079677.778 ops/s
# Warmup Iteration  17: 1101881.762 ops/s
# Warmup Iteration  18: 1071888.802 ops/s
# Warmup Iteration  19: 1128059.788 ops/s
# Warmup Iteration  20: 1134802.883 ops/s
# Warmup Iteration  21: 1172564.940 ops/s
# Warmup Iteration  22: 1115728.307 ops/s
# Warmup Iteration  23: 1074903.862 ops/s
# Warmup Iteration  24: 1072948.337 ops/s
# Warmup Iteration  25: 1073634.375 ops/s
# Warmup Iteration  26: 1115714.055 ops/s
# Warmup Iteration  27: 1151125.577 ops/s
# Warmup Iteration  28: 1110340.707 ops/s
# Warmup Iteration  29: 1073610.829 ops/s
# Warmup Iteration  30: 1084898.363 ops/s
Iteration   1: 1073839.625 ops/s
Iteration   2: 1122667.729 ops/s
Iteration   3: 1086026.146 ops/s
Iteration   4: 1106784.661 ops/s
Iteration   5: 1078405.228 ops/s
Iteration   6: 1071678.005 ops/s
Iteration   7: 1088596.245 ops/s
Iteration   8: 1091979.490 ops/s
Iteration   9: 1128377.587 ops/s
Iteration  10: 1130482.215 ops/s
Iteration  11: 1113892.301 ops/s
Iteration  12: 1134998.634 ops/s
Iteration  13: 1106849.830 ops/s
Iteration  14: 1093731.114 ops/s
Iteration  15: 1116049.419 ops/s
Iteration  16: 1145497.177 ops/s
Iteration  17: 1172107.595 ops/s
Iteration  18: 1112090.109 ops/s
Iteration  19: 1075313.479 ops/s
Iteration  20: 1109973.717 ops/s
Iteration  21: 1083093.758 ops/s
Iteration  22: 1112776.990 ops/s
Iteration  23: 1068783.306 ops/s
Iteration  24: 1081426.058 ops/s
Iteration  25: 1071682.062 ops/s
Iteration  26: 1070770.477 ops/s
Iteration  27: 1072046.899 ops/s
Iteration  28: 1076617.117 ops/s
Iteration  29: 1069466.382 ops/s
Iteration  30: 1083493.605 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeFromEntrySet":
  1098316.565 ±(99.9%) 17718.247 ops/s [Average]
  (min, avg, max) = (1068783.306, 1098316.565, 1172107.595), stdev = 26519.840
  CI (99.9%): [1080598.318, 1116034.812] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeFromEntrySet  thrpt   30  1098316.565 ± 17718.247  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1161191.252 ops/s
# Warmup Iteration   2: 2235328.584 ops/s
# Warmup Iteration   3: 2315936.878 ops/s
# Warmup Iteration   4: 2302720.299 ops/s
# Warmup Iteration   5: 2137062.435 ops/s
# Warmup Iteration   6: 2026752.097 ops/s
# Warmup Iteration   7: 2309235.593 ops/s
# Warmup Iteration   8: 2327724.815 ops/s
# Warmup Iteration   9: 2426885.113 ops/s
# Warmup Iteration  10: 2368443.212 ops/s
# Warmup Iteration  11: 2510963.473 ops/s
# Warmup Iteration  12: 2391439.089 ops/s
# Warmup Iteration  13: 2297724.898 ops/s
# Warmup Iteration  14: 2469275.810 ops/s
# Warmup Iteration  15: 2315894.806 ops/s
# Warmup Iteration  16: 2393815.729 ops/s
# Warmup Iteration  17: 2304202.107 ops/s
# Warmup Iteration  18: 2308180.677 ops/s
# Warmup Iteration  19: 2303080.874 ops/s
# Warmup Iteration  20: 2319499.379 ops/s
# Warmup Iteration  21: 2414033.815 ops/s
# Warmup Iteration  22: 2328694.077 ops/s
# Warmup Iteration  23: 2354118.874 ops/s
# Warmup Iteration  24: 2390364.416 ops/s
# Warmup Iteration  25: 2269856.838 ops/s
# Warmup Iteration  26: 2350018.042 ops/s
# Warmup Iteration  27: 2272975.318 ops/s
# Warmup Iteration  28: 2452173.446 ops/s
# Warmup Iteration  29: 2416500.193 ops/s
# Warmup Iteration  30: 2400601.705 ops/s
Iteration   1: 2398080.557 ops/s
Iteration   2: 2387293.835 ops/s
Iteration   3: 2294427.272 ops/s
Iteration   4: 2413314.996 ops/s
Iteration   5: 2262478.731 ops/s
Iteration   6: 2282778.399 ops/s
Iteration   7: 2451268.652 ops/s
Iteration   8: 2355547.244 ops/s
Iteration   9: 2393722.486 ops/s
Iteration  10: 2343792.393 ops/s
Iteration  11: 2316139.403 ops/s
Iteration  12: 2374457.885 ops/s
Iteration  13: 2431384.906 ops/s
Iteration  14: 2411501.158 ops/s
Iteration  15: 2382364.235 ops/s
Iteration  16: 2309931.853 ops/s
Iteration  17: 2298015.112 ops/s
Iteration  18: 2483372.949 ops/s
Iteration  19: 2532808.518 ops/s
Iteration  20: 2475616.184 ops/s
Iteration  21: 2316888.020 ops/s
Iteration  22: 2437327.942 ops/s
Iteration  23: 2409576.748 ops/s
Iteration  24: 2319873.262 ops/s
Iteration  25: 2326207.744 ops/s
Iteration  26: 2340256.410 ops/s
Iteration  27: 2331758.745 ops/s
Iteration  28: 2346662.457 ops/s
Iteration  29: 2517479.108 ops/s
Iteration  30: 2513069.594 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeFromKeySet":
  2381913.227 ±(99.9%) 49311.791 ops/s [Average]
  (min, avg, max) = (2262478.731, 2381913.227, 2532808.518), stdev = 73807.573
  CI (99.9%): [2332601.435, 2431225.018] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeFromKeySet  thrpt   30  2381913.227 ± 49311.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 984555.605 ops/s
# Warmup Iteration   2: 1597614.528 ops/s
# Warmup Iteration   3: 1845934.032 ops/s
# Warmup Iteration   4: 1885717.313 ops/s
# Warmup Iteration   5: 1870328.461 ops/s
# Warmup Iteration   6: 1641228.227 ops/s
# Warmup Iteration   7: 1843000.613 ops/s
# Warmup Iteration   8: 1870472.356 ops/s
# Warmup Iteration   9: 1818664.318 ops/s
# Warmup Iteration  10: 1792910.653 ops/s
# Warmup Iteration  11: 1809248.112 ops/s
# Warmup Iteration  12: 1860575.917 ops/s
# Warmup Iteration  13: 1903637.333 ops/s
# Warmup Iteration  14: 1963131.026 ops/s
# Warmup Iteration  15: 1916032.589 ops/s
# Warmup Iteration  16: 1940258.099 ops/s
# Warmup Iteration  17: 1973498.324 ops/s
# Warmup Iteration  18: 1958777.582 ops/s
# Warmup Iteration  19: 1842564.663 ops/s
# Warmup Iteration  20: 1833342.926 ops/s
# Warmup Iteration  21: 1849720.262 ops/s
# Warmup Iteration  22: 1926215.841 ops/s
# Warmup Iteration  23: 1908687.500 ops/s
# Warmup Iteration  24: 1906608.625 ops/s
# Warmup Iteration  25: 1851247.568 ops/s
# Warmup Iteration  26: 1902869.096 ops/s
# Warmup Iteration  27: 1883454.373 ops/s
# Warmup Iteration  28: 1822249.993 ops/s
# Warmup Iteration  29: 1811168.059 ops/s
# Warmup Iteration  30: 1791310.486 ops/s
Iteration   1: 1856173.798 ops/s
Iteration   2: 1875880.111 ops/s
Iteration   3: 1782813.568 ops/s
Iteration   4: 1809143.331 ops/s
Iteration   5: 1964354.231 ops/s
Iteration   6: 1796114.837 ops/s
Iteration   7: 1849466.260 ops/s
Iteration   8: 1928379.657 ops/s
Iteration   9: 1919208.553 ops/s
Iteration  10: 1893525.435 ops/s
Iteration  11: 1980903.369 ops/s
Iteration  12: 1980926.965 ops/s
Iteration  13: 1979655.880 ops/s
Iteration  14: 1973124.975 ops/s
Iteration  15: 1799038.029 ops/s
Iteration  16: 1779076.777 ops/s
Iteration  17: 1832029.317 ops/s
Iteration  18: 1875717.733 ops/s
Iteration  19: 1977805.635 ops/s
Iteration  20: 1908169.663 ops/s
Iteration  21: 1950543.867 ops/s
Iteration  22: 1964949.130 ops/s
Iteration  23: 1981775.033 ops/s
Iteration  24: 1968207.681 ops/s
Iteration  25: 1917349.563 ops/s
Iteration  26: 1881280.693 ops/s
Iteration  27: 1876581.573 ops/s
Iteration  28: 1974645.860 ops/s
Iteration  29: 1786301.746 ops/s
Iteration  30: 1824188.386 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeFromValues":
  1896244.388 ±(99.9%) 47609.825 ops/s [Average]
  (min, avg, max) = (1779076.777, 1896244.388, 1981775.033), stdev = 71260.150
  CI (99.9%): [1848634.563, 1943854.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeFromValues  thrpt   30  1896244.388 ± 47609.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 190953.945 ops/s
# Warmup Iteration   2: 272344.717 ops/s
# Warmup Iteration   3: 323035.294 ops/s
# Warmup Iteration   4: 316197.716 ops/s
# Warmup Iteration   5: 324224.582 ops/s
# Warmup Iteration   6: 326783.050 ops/s
# Warmup Iteration   7: 332752.220 ops/s
# Warmup Iteration   8: 283574.804 ops/s
# Warmup Iteration   9: 325043.173 ops/s
# Warmup Iteration  10: 324047.541 ops/s
# Warmup Iteration  11: 313338.699 ops/s
# Warmup Iteration  12: 325947.820 ops/s
# Warmup Iteration  13: 316502.857 ops/s
# Warmup Iteration  14: 328239.477 ops/s
# Warmup Iteration  15: 320332.309 ops/s
# Warmup Iteration  16: 319121.256 ops/s
# Warmup Iteration  17: 334493.407 ops/s
# Warmup Iteration  18: 322470.239 ops/s
# Warmup Iteration  19: 323359.179 ops/s
# Warmup Iteration  20: 343060.341 ops/s
# Warmup Iteration  21: 318605.003 ops/s
# Warmup Iteration  22: 326528.978 ops/s
# Warmup Iteration  23: 315921.898 ops/s
# Warmup Iteration  24: 320788.579 ops/s
# Warmup Iteration  25: 322325.085 ops/s
# Warmup Iteration  26: 329497.245 ops/s
# Warmup Iteration  27: 326663.041 ops/s
# Warmup Iteration  28: 338544.953 ops/s
# Warmup Iteration  29: 327196.262 ops/s
# Warmup Iteration  30: 320616.388 ops/s
Iteration   1: 314938.265 ops/s
Iteration   2: 321349.945 ops/s
Iteration   3: 310132.271 ops/s
Iteration   4: 316932.860 ops/s
Iteration   5: 309775.511 ops/s
Iteration   6: 318255.445 ops/s
Iteration   7: 342334.669 ops/s
Iteration   8: 327523.795 ops/s
Iteration   9: 330070.753 ops/s
Iteration  10: 338430.292 ops/s
Iteration  11: 343916.830 ops/s
Iteration  12: 344254.717 ops/s
Iteration  13: 344286.242 ops/s
Iteration  14: 324913.661 ops/s
Iteration  15: 311530.415 ops/s
Iteration  16: 319903.214 ops/s
Iteration  17: 343056.920 ops/s
Iteration  18: 344079.428 ops/s
Iteration  19: 330998.767 ops/s
Iteration  20: 309871.232 ops/s
Iteration  21: 315795.563 ops/s
Iteration  22: 321695.066 ops/s
Iteration  23: 314512.850 ops/s
Iteration  24: 343192.480 ops/s
Iteration  25: 320575.380 ops/s
Iteration  26: 340096.382 ops/s
Iteration  27: 335557.429 ops/s
Iteration  28: 330750.164 ops/s
Iteration  29: 311010.465 ops/s
Iteration  30: 306663.434 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeIf":
  326213.482 ±(99.9%) 8658.105 ops/s [Average]
  (min, avg, max) = (306663.434, 326213.482, 344286.242), stdev = 12959.045
  CI (99.9%): [317555.377, 334871.586] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeIf  thrpt   30  326213.482 ± 8658.105  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 505200.064 ops/s
# Warmup Iteration   2: 527080.329 ops/s
# Warmup Iteration   3: 721262.829 ops/s
# Warmup Iteration   4: 727855.546 ops/s
# Warmup Iteration   5: 720276.201 ops/s
# Warmup Iteration   6: 763753.141 ops/s
# Warmup Iteration   7: 708295.025 ops/s
# Warmup Iteration   8: 723311.326 ops/s
# Warmup Iteration   9: 763239.989 ops/s
# Warmup Iteration  10: 786356.091 ops/s
# Warmup Iteration  11: 728584.763 ops/s
# Warmup Iteration  12: 667069.070 ops/s
# Warmup Iteration  13: 718261.108 ops/s
# Warmup Iteration  14: 735765.814 ops/s
# Warmup Iteration  15: 748862.877 ops/s
# Warmup Iteration  16: 748994.641 ops/s
# Warmup Iteration  17: 744584.750 ops/s
# Warmup Iteration  18: 746552.602 ops/s
# Warmup Iteration  19: 750419.199 ops/s
# Warmup Iteration  20: 742197.624 ops/s
# Warmup Iteration  21: 737359.296 ops/s
# Warmup Iteration  22: 752197.080 ops/s
# Warmup Iteration  23: 752215.874 ops/s
# Warmup Iteration  24: 740680.315 ops/s
# Warmup Iteration  25: 735685.217 ops/s
# Warmup Iteration  26: 745532.000 ops/s
# Warmup Iteration  27: 749742.355 ops/s
# Warmup Iteration  28: 750548.987 ops/s
# Warmup Iteration  29: 717939.907 ops/s
# Warmup Iteration  30: 704201.368 ops/s
Iteration   1: 731576.483 ops/s
Iteration   2: 708707.965 ops/s
Iteration   3: 722634.291 ops/s
Iteration   4: 703349.704 ops/s
Iteration   5: 705753.031 ops/s
Iteration   6: 717516.983 ops/s
Iteration   7: 701480.223 ops/s
Iteration   8: 725388.485 ops/s
Iteration   9: 702959.185 ops/s
Iteration  10: 709612.345 ops/s
Iteration  11: 716371.324 ops/s
Iteration  12: 713548.800 ops/s
Iteration  13: 728588.254 ops/s
Iteration  14: 712429.764 ops/s
Iteration  15: 722035.847 ops/s
Iteration  16: 709657.584 ops/s
Iteration  17: 700175.828 ops/s
Iteration  18: 717509.495 ops/s
Iteration  19: 735774.792 ops/s
Iteration  20: 700985.726 ops/s
Iteration  21: 725334.804 ops/s
Iteration  22: 710325.197 ops/s
Iteration  23: 715596.771 ops/s
Iteration  24: 729458.150 ops/s
Iteration  25: 716507.804 ops/s
Iteration  26: 722282.845 ops/s
Iteration  27: 718329.443 ops/s
Iteration  28: 710292.278 ops/s
Iteration  29: 716271.855 ops/s
Iteration  30: 712815.654 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeKey":
  715442.364 ±(99.9%) 6349.673 ops/s [Average]
  (min, avg, max) = (700175.828, 715442.364, 735774.792), stdev = 9503.892
  CI (99.9%): [709092.691, 721792.037] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeKey  thrpt   30  715442.364 ± 6349.673  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeNullFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeNullFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 398847.613 ops/s
# Warmup Iteration   2: 821469.750 ops/s
# Warmup Iteration   3: 852721.335 ops/s
# Warmup Iteration   4: 854384.084 ops/s
# Warmup Iteration   5: 702229.060 ops/s
# Warmup Iteration   6: 851387.743 ops/s
# Warmup Iteration   7: 883927.139 ops/s
# Warmup Iteration   8: 847988.320 ops/s
# Warmup Iteration   9: 841840.605 ops/s
# Warmup Iteration  10: 884020.492 ops/s
# Warmup Iteration  11: 873555.943 ops/s
# Warmup Iteration  12: 869993.004 ops/s
# Warmup Iteration  13: 883360.027 ops/s
# Warmup Iteration  14: 876573.584 ops/s
# Warmup Iteration  15: 841367.134 ops/s
# Warmup Iteration  16: 852880.929 ops/s
# Warmup Iteration  17: 851213.637 ops/s
# Warmup Iteration  18: 882038.512 ops/s
# Warmup Iteration  19: 869622.245 ops/s
# Warmup Iteration  20: 845807.778 ops/s
# Warmup Iteration  21: 840397.661 ops/s
# Warmup Iteration  22: 847139.158 ops/s
# Warmup Iteration  23: 850608.426 ops/s
# Warmup Iteration  24: 836264.648 ops/s
# Warmup Iteration  25: 842919.340 ops/s
# Warmup Iteration  26: 854408.419 ops/s
# Warmup Iteration  27: 885784.134 ops/s
# Warmup Iteration  28: 876080.038 ops/s
# Warmup Iteration  29: 884297.869 ops/s
# Warmup Iteration  30: 880856.990 ops/s
Iteration   1: 880572.943 ops/s
Iteration   2: 834486.344 ops/s
Iteration   3: 847577.912 ops/s
Iteration   4: 835920.049 ops/s
Iteration   5: 852850.848 ops/s
Iteration   6: 848271.241 ops/s
Iteration   7: 888940.225 ops/s
Iteration   8: 870977.723 ops/s
Iteration   9: 913961.770 ops/s
Iteration  10: 889472.411 ops/s
Iteration  11: 875994.053 ops/s
Iteration  12: 847609.997 ops/s
Iteration  13: 823608.989 ops/s
Iteration  14: 850199.356 ops/s
Iteration  15: 849389.144 ops/s
Iteration  16: 839421.659 ops/s
Iteration  17: 838224.015 ops/s
Iteration  18: 816858.552 ops/s
Iteration  19: 826113.647 ops/s
Iteration  20: 847291.894 ops/s
Iteration  21: 855654.007 ops/s
Iteration  22: 848679.033 ops/s
Iteration  23: 839904.056 ops/s
Iteration  24: 850356.656 ops/s
Iteration  25: 844570.759 ops/s
Iteration  26: 858873.613 ops/s
Iteration  27: 925608.547 ops/s
Iteration  28: 928990.791 ops/s
Iteration  29: 843997.639 ops/s
Iteration  30: 843700.416 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeNullFromKeySet":
  857269.276 ±(99.9%) 18812.160 ops/s [Average]
  (min, avg, max) = (816858.552, 857269.276, 928990.791), stdev = 28157.157
  CI (99.9%): [838457.117, 876081.436] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeNullFromKeySet  thrpt   30  857269.276 ± 18812.160  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeNullFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeNullFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 498534.001 ops/s
# Warmup Iteration   2: 905275.835 ops/s
# Warmup Iteration   3: 975041.506 ops/s
# Warmup Iteration   4: 1024657.558 ops/s
# Warmup Iteration   5: 941497.074 ops/s
# Warmup Iteration   6: 797955.198 ops/s
# Warmup Iteration   7: 938273.548 ops/s
# Warmup Iteration   8: 937761.744 ops/s
# Warmup Iteration   9: 945530.704 ops/s
# Warmup Iteration  10: 947281.362 ops/s
# Warmup Iteration  11: 1035944.653 ops/s
# Warmup Iteration  12: 958216.175 ops/s
# Warmup Iteration  13: 949512.090 ops/s
# Warmup Iteration  14: 973302.928 ops/s
# Warmup Iteration  15: 1022132.595 ops/s
# Warmup Iteration  16: 1028888.653 ops/s
# Warmup Iteration  17: 947854.908 ops/s
# Warmup Iteration  18: 950772.752 ops/s
# Warmup Iteration  19: 945012.562 ops/s
# Warmup Iteration  20: 1012354.894 ops/s
# Warmup Iteration  21: 952234.042 ops/s
# Warmup Iteration  22: 937759.626 ops/s
# Warmup Iteration  23: 940111.394 ops/s
# Warmup Iteration  24: 929721.375 ops/s
# Warmup Iteration  25: 935092.164 ops/s
# Warmup Iteration  26: 946170.864 ops/s
# Warmup Iteration  27: 941891.021 ops/s
# Warmup Iteration  28: 941827.980 ops/s
# Warmup Iteration  29: 1004237.329 ops/s
# Warmup Iteration  30: 967428.210 ops/s
Iteration   1: 952303.169 ops/s
Iteration   2: 932806.665 ops/s
Iteration   3: 918993.942 ops/s
Iteration   4: 930139.110 ops/s
Iteration   5: 959114.680 ops/s
Iteration   6: 994961.969 ops/s
Iteration   7: 950308.094 ops/s
Iteration   8: 957058.301 ops/s
Iteration   9: 972473.668 ops/s
Iteration  10: 963393.004 ops/s
Iteration  11: 988983.248 ops/s
Iteration  12: 943767.473 ops/s
Iteration  13: 949061.200 ops/s
Iteration  14: 947578.786 ops/s
Iteration  15: 986801.213 ops/s
Iteration  16: 947036.810 ops/s
Iteration  17: 956917.704 ops/s
Iteration  18: 976392.868 ops/s
Iteration  19: 942707.424 ops/s
Iteration  20: 942493.612 ops/s
Iteration  21: 948166.651 ops/s
Iteration  22: 925189.102 ops/s
Iteration  23: 960771.191 ops/s
Iteration  24: 947887.957 ops/s
Iteration  25: 937651.964 ops/s
Iteration  26: 938552.213 ops/s
Iteration  27: 1036320.021 ops/s
Iteration  28: 1010902.595 ops/s
Iteration  29: 941446.732 ops/s
Iteration  30: 939836.055 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeNullFromValues":
  956667.247 ±(99.9%) 17237.611 ops/s [Average]
  (min, avg, max) = (918993.942, 956667.247, 1036320.021), stdev = 25800.447
  CI (99.9%): [939429.636, 973904.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeNullFromValues  thrpt   30  956667.247 ± 17237.611  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 719216.683 ops/s
# Warmup Iteration   2: 1575955.672 ops/s
# Warmup Iteration   3: 1608767.164 ops/s
# Warmup Iteration   4: 1505671.399 ops/s
# Warmup Iteration   5: 1405133.744 ops/s
# Warmup Iteration   6: 1580142.855 ops/s
# Warmup Iteration   7: 1576157.755 ops/s
# Warmup Iteration   8: 1630255.644 ops/s
# Warmup Iteration   9: 1646718.657 ops/s
# Warmup Iteration  10: 1706482.136 ops/s
# Warmup Iteration  11: 1682611.325 ops/s
# Warmup Iteration  12: 1585685.509 ops/s
# Warmup Iteration  13: 1726051.881 ops/s
# Warmup Iteration  14: 1641334.513 ops/s
# Warmup Iteration  15: 1603595.004 ops/s
# Warmup Iteration  16: 1615979.953 ops/s
# Warmup Iteration  17: 1601945.188 ops/s
# Warmup Iteration  18: 1642885.872 ops/s
# Warmup Iteration  19: 1678055.722 ops/s
# Warmup Iteration  20: 1616698.705 ops/s
# Warmup Iteration  21: 1653065.687 ops/s
# Warmup Iteration  22: 1640283.623 ops/s
# Warmup Iteration  23: 1570766.624 ops/s
# Warmup Iteration  24: 1614048.286 ops/s
# Warmup Iteration  25: 1634535.377 ops/s
# Warmup Iteration  26: 1650481.267 ops/s
# Warmup Iteration  27: 1617628.397 ops/s
# Warmup Iteration  28: 1577142.211 ops/s
# Warmup Iteration  29: 1613244.825 ops/s
# Warmup Iteration  30: 1642373.725 ops/s
Iteration   1: 1610791.327 ops/s
Iteration   2: 1589048.591 ops/s
Iteration   3: 1574948.762 ops/s
Iteration   4: 1593201.566 ops/s
Iteration   5: 1629076.186 ops/s
Iteration   6: 1573120.774 ops/s
Iteration   7: 1590572.476 ops/s
Iteration   8: 1580883.418 ops/s
Iteration   9: 1569083.049 ops/s
Iteration  10: 1550781.225 ops/s
Iteration  11: 1571524.964 ops/s
Iteration  12: 1598976.966 ops/s
Iteration  13: 1560667.120 ops/s
Iteration  14: 1575367.814 ops/s
Iteration  15: 1550154.816 ops/s
Iteration  16: 1561584.964 ops/s
Iteration  17: 1629279.282 ops/s
Iteration  18: 1643345.772 ops/s
Iteration  19: 1627694.462 ops/s
Iteration  20: 1598405.793 ops/s
Iteration  21: 1572993.198 ops/s
Iteration  22: 1629948.058 ops/s
Iteration  23: 1593490.019 ops/s
Iteration  24: 1564168.540 ops/s
Iteration  25: 1628260.428 ops/s
Iteration  26: 1573859.173 ops/s
Iteration  27: 1633510.886 ops/s
Iteration  28: 1643883.365 ops/s
Iteration  29: 1640219.101 ops/s
Iteration  30: 1651239.880 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeObject":
  1597002.733 ±(99.9%) 20833.839 ops/s [Average]
  (min, avg, max) = (1550154.816, 1597002.733, 1651239.880), stdev = 31183.111
  CI (99.9%): [1576168.894, 1617836.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_removeObject  thrpt   30  1597002.733 ± 20833.839  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 317790.788 ops/s
# Warmup Iteration   2: 600305.339 ops/s
# Warmup Iteration   3: 670040.768 ops/s
# Warmup Iteration   4: 668130.064 ops/s
# Warmup Iteration   5: 643240.158 ops/s
# Warmup Iteration   6: 595959.283 ops/s
# Warmup Iteration   7: 676657.415 ops/s
# Warmup Iteration   8: 708400.395 ops/s
# Warmup Iteration   9: 654104.837 ops/s
# Warmup Iteration  10: 666428.902 ops/s
# Warmup Iteration  11: 649581.241 ops/s
# Warmup Iteration  12: 651745.738 ops/s
# Warmup Iteration  13: 655924.014 ops/s
# Warmup Iteration  14: 650821.422 ops/s
# Warmup Iteration  15: 656590.350 ops/s
# Warmup Iteration  16: 659563.530 ops/s
# Warmup Iteration  17: 650063.854 ops/s
# Warmup Iteration  18: 663761.019 ops/s
# Warmup Iteration  19: 650061.140 ops/s
# Warmup Iteration  20: 659766.229 ops/s
# Warmup Iteration  21: 654915.678 ops/s
# Warmup Iteration  22: 655257.754 ops/s
# Warmup Iteration  23: 718435.959 ops/s
# Warmup Iteration  24: 682672.516 ops/s
# Warmup Iteration  25: 673962.154 ops/s
# Warmup Iteration  26: 651454.525 ops/s
# Warmup Iteration  27: 680184.303 ops/s
# Warmup Iteration  28: 671390.357 ops/s
# Warmup Iteration  29: 686067.265 ops/s
# Warmup Iteration  30: 662124.214 ops/s
Iteration   1: 684733.931 ops/s
Iteration   2: 648930.481 ops/s
Iteration   3: 651301.747 ops/s
Iteration   4: 660014.976 ops/s
Iteration   5: 694628.477 ops/s
Iteration   6: 664341.996 ops/s
Iteration   7: 656645.191 ops/s
Iteration   8: 676778.533 ops/s
Iteration   9: 678178.473 ops/s
Iteration  10: 690936.896 ops/s
Iteration  11: 655696.708 ops/s
Iteration  12: 655990.438 ops/s
Iteration  13: 663186.953 ops/s
Iteration  14: 642405.977 ops/s
Iteration  15: 681126.735 ops/s
Iteration  16: 638765.968 ops/s
Iteration  17: 655373.091 ops/s
Iteration  18: 648093.913 ops/s
Iteration  19: 659238.858 ops/s
Iteration  20: 667796.011 ops/s
Iteration  21: 669986.229 ops/s
Iteration  22: 651683.330 ops/s
Iteration  23: 652048.537 ops/s
Iteration  24: 639786.372 ops/s
Iteration  25: 661373.396 ops/s
Iteration  26: 643808.766 ops/s
Iteration  27: 642634.004 ops/s
Iteration  28: 664714.871 ops/s
Iteration  29: 663993.284 ops/s
Iteration  30: 685116.463 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromEntrySet":
  661643.687 ±(99.9%) 10289.659 ops/s [Average]
  (min, avg, max) = (638765.968, 661643.687, 694628.477), stdev = 15401.078
  CI (99.9%): [651354.028, 671933.346] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromEntrySet  thrpt   30  661643.687 ± 10289.659  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 753285.583 ops/s
# Warmup Iteration   2: 1287589.253 ops/s
# Warmup Iteration   3: 1487352.458 ops/s
# Warmup Iteration   4: 1481061.968 ops/s
# Warmup Iteration   5: 1512866.129 ops/s
# Warmup Iteration   6: 1213905.217 ops/s
# Warmup Iteration   7: 1468140.254 ops/s
# Warmup Iteration   8: 1473963.294 ops/s
# Warmup Iteration   9: 1484812.808 ops/s
# Warmup Iteration  10: 1507891.650 ops/s
# Warmup Iteration  11: 1461666.970 ops/s
# Warmup Iteration  12: 1472756.053 ops/s
# Warmup Iteration  13: 1530946.372 ops/s
# Warmup Iteration  14: 1473381.874 ops/s
# Warmup Iteration  15: 1535735.158 ops/s
# Warmup Iteration  16: 1536485.183 ops/s
# Warmup Iteration  17: 1519644.439 ops/s
# Warmup Iteration  18: 1513260.663 ops/s
# Warmup Iteration  19: 1569865.959 ops/s
# Warmup Iteration  20: 1499220.300 ops/s
# Warmup Iteration  21: 1527505.534 ops/s
# Warmup Iteration  22: 1531098.409 ops/s
# Warmup Iteration  23: 1514652.926 ops/s
# Warmup Iteration  24: 1478987.502 ops/s
# Warmup Iteration  25: 1550194.929 ops/s
# Warmup Iteration  26: 1561926.947 ops/s
# Warmup Iteration  27: 1475539.972 ops/s
# Warmup Iteration  28: 1467895.953 ops/s
# Warmup Iteration  29: 1479352.187 ops/s
# Warmup Iteration  30: 1497336.214 ops/s
Iteration   1: 1485563.149 ops/s
Iteration   2: 1502922.346 ops/s
Iteration   3: 1486964.034 ops/s
Iteration   4: 1498678.420 ops/s
Iteration   5: 1493175.192 ops/s
Iteration   6: 1472936.284 ops/s
Iteration   7: 1489921.446 ops/s
Iteration   8: 1451348.351 ops/s
Iteration   9: 1480591.643 ops/s
Iteration  10: 1506998.040 ops/s
Iteration  11: 1475036.111 ops/s
Iteration  12: 1462714.407 ops/s
Iteration  13: 1461600.749 ops/s
Iteration  14: 1465463.396 ops/s
Iteration  15: 1479205.760 ops/s
Iteration  16: 1539911.924 ops/s
Iteration  17: 1479382.921 ops/s
Iteration  18: 1480991.231 ops/s
Iteration  19: 1491077.407 ops/s
Iteration  20: 1577592.875 ops/s
Iteration  21: 1622843.253 ops/s
Iteration  22: 1511097.779 ops/s
Iteration  23: 1475291.992 ops/s
Iteration  24: 1482323.619 ops/s
Iteration  25: 1481741.674 ops/s
Iteration  26: 1506208.462 ops/s
Iteration  27: 1468262.995 ops/s
Iteration  28: 1457327.891 ops/s
Iteration  29: 1470904.186 ops/s
Iteration  30: 1551813.747 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromKeySet":
  1493663.043 ±(99.9%) 24600.569 ops/s [Average]
  (min, avg, max) = (1451348.351, 1493663.043, 1622843.253), stdev = 36820.977
  CI (99.9%): [1469062.473, 1518263.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromKeySet  thrpt   30  1493663.043 ± 24600.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromKeySet_null_collision$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromKeySet_null_collision

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 376415.418 ops/s
# Warmup Iteration   2: 943747.197 ops/s
# Warmup Iteration   3: 950601.264 ops/s
# Warmup Iteration   4: 851153.129 ops/s
# Warmup Iteration   5: 964851.534 ops/s
# Warmup Iteration   6: 933303.654 ops/s
# Warmup Iteration   7: 927079.049 ops/s
# Warmup Iteration   8: 930041.060 ops/s
# Warmup Iteration   9: 937960.300 ops/s
# Warmup Iteration  10: 951818.166 ops/s
# Warmup Iteration  11: 992903.272 ops/s
# Warmup Iteration  12: 938204.193 ops/s
# Warmup Iteration  13: 988257.285 ops/s
# Warmup Iteration  14: 947500.344 ops/s
# Warmup Iteration  15: 962577.218 ops/s
# Warmup Iteration  16: 937201.521 ops/s
# Warmup Iteration  17: 961435.600 ops/s
# Warmup Iteration  18: 924757.478 ops/s
# Warmup Iteration  19: 951555.787 ops/s
# Warmup Iteration  20: 961278.485 ops/s
# Warmup Iteration  21: 953459.992 ops/s
# Warmup Iteration  22: 982090.731 ops/s
# Warmup Iteration  23: 976428.976 ops/s
# Warmup Iteration  24: 985790.732 ops/s
# Warmup Iteration  25: 1015958.482 ops/s
# Warmup Iteration  26: 1018214.282 ops/s
# Warmup Iteration  27: 1009281.915 ops/s
# Warmup Iteration  28: 1004532.433 ops/s
# Warmup Iteration  29: 1012634.771 ops/s
# Warmup Iteration  30: 1009760.929 ops/s
Iteration   1: 985870.720 ops/s
Iteration   2: 1022301.267 ops/s
Iteration   3: 1019613.373 ops/s
Iteration   4: 1020757.744 ops/s
Iteration   5: 1021306.940 ops/s
Iteration   6: 1024823.883 ops/s
Iteration   7: 1024035.242 ops/s
Iteration   8: 1018649.233 ops/s
Iteration   9: 1016876.832 ops/s
Iteration  10: 1019982.894 ops/s
Iteration  11: 1021041.144 ops/s
Iteration  12: 1012977.542 ops/s
Iteration  13: 1019471.695 ops/s
Iteration  14: 1017631.858 ops/s
Iteration  15: 1018371.785 ops/s
Iteration  16: 1008448.517 ops/s
Iteration  17: 1016243.426 ops/s
Iteration  18: 1002180.537 ops/s
Iteration  19: 1012301.704 ops/s
Iteration  20: 1019333.868 ops/s
Iteration  21: 976342.708 ops/s
Iteration  22: 998208.384 ops/s
Iteration  23: 1024501.963 ops/s
Iteration  24: 1015970.118 ops/s
Iteration  25: 1013411.976 ops/s
Iteration  26: 1001093.570 ops/s
Iteration  27: 973377.015 ops/s
Iteration  28: 973152.734 ops/s
Iteration  29: 983032.402 ops/s
Iteration  30: 1013094.254 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromKeySet_null_collision":
  1009813.511 ±(99.9%) 10596.755 ops/s [Average]
  (min, avg, max) = (973152.734, 1009813.511, 1024823.883), stdev = 15860.725
  CI (99.9%): [999216.756, 1020410.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromKeySet_null_collision  thrpt   30  1009813.511 ± 10596.755  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 733973.149 ops/s
# Warmup Iteration   2: 1112801.557 ops/s
# Warmup Iteration   3: 1345834.602 ops/s
# Warmup Iteration   4: 1379128.734 ops/s
# Warmup Iteration   5: 1387207.635 ops/s
# Warmup Iteration   6: 1376201.618 ops/s
# Warmup Iteration   7: 1145103.890 ops/s
# Warmup Iteration   8: 1378471.441 ops/s
# Warmup Iteration   9: 1383416.680 ops/s
# Warmup Iteration  10: 1306359.835 ops/s
# Warmup Iteration  11: 1373318.838 ops/s
# Warmup Iteration  12: 1404789.866 ops/s
# Warmup Iteration  13: 1413140.371 ops/s
# Warmup Iteration  14: 1406252.709 ops/s
# Warmup Iteration  15: 1391366.949 ops/s
# Warmup Iteration  16: 1411337.755 ops/s
# Warmup Iteration  17: 1391569.734 ops/s
# Warmup Iteration  18: 1387937.483 ops/s
# Warmup Iteration  19: 1386182.333 ops/s
# Warmup Iteration  20: 1392398.508 ops/s
# Warmup Iteration  21: 1392911.777 ops/s
# Warmup Iteration  22: 1393448.812 ops/s
# Warmup Iteration  23: 1399686.517 ops/s
# Warmup Iteration  24: 1394738.564 ops/s
# Warmup Iteration  25: 1396752.636 ops/s
# Warmup Iteration  26: 1391536.527 ops/s
# Warmup Iteration  27: 1382613.539 ops/s
# Warmup Iteration  28: 1385178.046 ops/s
# Warmup Iteration  29: 1365064.881 ops/s
# Warmup Iteration  30: 1357747.895 ops/s
Iteration   1: 1292653.122 ops/s
Iteration   2: 1376562.704 ops/s
Iteration   3: 1376554.472 ops/s
Iteration   4: 1394919.696 ops/s
Iteration   5: 1405917.953 ops/s
Iteration   6: 1401974.095 ops/s
Iteration   7: 1373050.551 ops/s
Iteration   8: 1405987.876 ops/s
Iteration   9: 1398023.134 ops/s
Iteration  10: 1401175.173 ops/s
Iteration  11: 1397298.389 ops/s
Iteration  12: 1393598.729 ops/s
Iteration  13: 1401261.969 ops/s
Iteration  14: 1404124.914 ops/s
Iteration  15: 1397225.171 ops/s
Iteration  16: 1400549.396 ops/s
Iteration  17: 1400469.273 ops/s
Iteration  18: 1402159.793 ops/s
Iteration  19: 1398686.130 ops/s
Iteration  20: 1404970.139 ops/s
Iteration  21: 1398248.205 ops/s
Iteration  22: 1397108.176 ops/s
Iteration  23: 1379881.028 ops/s
Iteration  24: 1400227.652 ops/s
Iteration  25: 1404547.458 ops/s
Iteration  26: 1401419.472 ops/s
Iteration  27: 1401245.581 ops/s
Iteration  28: 1402483.850 ops/s
Iteration  29: 1402723.130 ops/s
Iteration  30: 1403768.460 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromValues":
  1393960.523 ±(99.9%) 14110.079 ops/s [Average]
  (min, avg, max) = (1292653.122, 1393960.523, 1405987.876), stdev = 21119.303
  CI (99.9%): [1379850.444, 1408070.602] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_retainAllFromValues  thrpt   30  1393960.523 ± 14110.079  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 948554.818 ops/s
# Warmup Iteration   2: 2394774.347 ops/s
# Warmup Iteration   3: 2420779.136 ops/s
# Warmup Iteration   4: 1852637.393 ops/s
# Warmup Iteration   5: 2419391.158 ops/s
# Warmup Iteration   6: 2247406.374 ops/s
# Warmup Iteration   7: 2242004.335 ops/s
# Warmup Iteration   8: 2217589.292 ops/s
# Warmup Iteration   9: 2216269.700 ops/s
# Warmup Iteration  10: 2274945.920 ops/s
# Warmup Iteration  11: 2423385.064 ops/s
# Warmup Iteration  12: 2323954.214 ops/s
# Warmup Iteration  13: 2188003.547 ops/s
# Warmup Iteration  14: 2245889.212 ops/s
# Warmup Iteration  15: 2247197.338 ops/s
# Warmup Iteration  16: 2235630.024 ops/s
# Warmup Iteration  17: 2214601.731 ops/s
# Warmup Iteration  18: 2242016.628 ops/s
# Warmup Iteration  19: 2237838.055 ops/s
# Warmup Iteration  20: 2291007.043 ops/s
# Warmup Iteration  21: 2266984.062 ops/s
# Warmup Iteration  22: 2252427.271 ops/s
# Warmup Iteration  23: 2245085.838 ops/s
# Warmup Iteration  24: 2270796.222 ops/s
# Warmup Iteration  25: 2316736.203 ops/s
# Warmup Iteration  26: 2376781.482 ops/s
# Warmup Iteration  27: 2257234.565 ops/s
# Warmup Iteration  28: 2295814.788 ops/s
# Warmup Iteration  29: 2236749.048 ops/s
# Warmup Iteration  30: 2250892.343 ops/s
Iteration   1: 2284875.146 ops/s
Iteration   2: 2291092.549 ops/s
Iteration   3: 2207988.118 ops/s
Iteration   4: 2247886.219 ops/s
Iteration   5: 2219209.334 ops/s
Iteration   6: 2193563.656 ops/s
Iteration   7: 2202457.311 ops/s
Iteration   8: 2252477.986 ops/s
Iteration   9: 2236773.796 ops/s
Iteration  10: 2271194.971 ops/s
Iteration  11: 2418258.088 ops/s
Iteration  12: 2271958.230 ops/s
Iteration  13: 2218216.958 ops/s
Iteration  14: 2236202.009 ops/s
Iteration  15: 2197464.630 ops/s
Iteration  16: 2234699.480 ops/s
Iteration  17: 2209829.680 ops/s
Iteration  18: 2187108.296 ops/s
Iteration  19: 2224876.419 ops/s
Iteration  20: 2215703.384 ops/s
Iteration  21: 2179717.436 ops/s
Iteration  22: 2189573.426 ops/s
Iteration  23: 2236794.570 ops/s
Iteration  24: 2250940.639 ops/s
Iteration  25: 2238728.876 ops/s
Iteration  26: 2190283.227 ops/s
Iteration  27: 2202016.775 ops/s
Iteration  28: 2290362.727 ops/s
Iteration  29: 2298065.619 ops/s
Iteration  30: 2272223.130 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_select":
  2239018.089 ±(99.9%) 32266.359 ops/s [Average]
  (min, avg, max) = (2179717.436, 2239018.089, 2418258.088), stdev = 48294.770
  CI (99.9%): [2206751.731, 2271284.448] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_select  thrpt   30  2239018.089 ± 32266.359  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectInstancesOf_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectInstancesOf_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 668490.604 ops/s
# Warmup Iteration   2: 1321905.247 ops/s
# Warmup Iteration   3: 1518120.397 ops/s
# Warmup Iteration   4: 1471807.622 ops/s
# Warmup Iteration   5: 1162425.541 ops/s
# Warmup Iteration   6: 1436183.656 ops/s
# Warmup Iteration   7: 1454879.033 ops/s
# Warmup Iteration   8: 1459396.182 ops/s
# Warmup Iteration   9: 1456192.252 ops/s
# Warmup Iteration  10: 1435742.904 ops/s
# Warmup Iteration  11: 1486531.540 ops/s
# Warmup Iteration  12: 1440404.820 ops/s
# Warmup Iteration  13: 1540996.846 ops/s
# Warmup Iteration  14: 1462202.876 ops/s
# Warmup Iteration  15: 1440185.552 ops/s
# Warmup Iteration  16: 1446436.759 ops/s
# Warmup Iteration  17: 1464084.385 ops/s
# Warmup Iteration  18: 1494291.055 ops/s
# Warmup Iteration  19: 1475861.203 ops/s
# Warmup Iteration  20: 1501907.962 ops/s
# Warmup Iteration  21: 1463212.532 ops/s
# Warmup Iteration  22: 1496264.240 ops/s
# Warmup Iteration  23: 1478601.593 ops/s
# Warmup Iteration  24: 1576587.512 ops/s
# Warmup Iteration  25: 1475146.320 ops/s
# Warmup Iteration  26: 1491889.725 ops/s
# Warmup Iteration  27: 1442573.509 ops/s
# Warmup Iteration  28: 1445961.447 ops/s
# Warmup Iteration  29: 1582338.053 ops/s
# Warmup Iteration  30: 1573740.905 ops/s
Iteration   1: 1503670.270 ops/s
Iteration   2: 1476193.966 ops/s
Iteration   3: 1569476.212 ops/s
Iteration   4: 1428193.810 ops/s
Iteration   5: 1492159.450 ops/s
Iteration   6: 1417067.448 ops/s
Iteration   7: 1481081.205 ops/s
Iteration   8: 1432989.980 ops/s
Iteration   9: 1453789.595 ops/s
Iteration  10: 1493391.385 ops/s
Iteration  11: 1502277.960 ops/s
Iteration  12: 1458537.990 ops/s
Iteration  13: 1452533.162 ops/s
Iteration  14: 1504956.339 ops/s
Iteration  15: 1448350.956 ops/s
Iteration  16: 1473146.342 ops/s
Iteration  17: 1518096.156 ops/s
Iteration  18: 1587244.963 ops/s
Iteration  19: 1579516.349 ops/s
Iteration  20: 1572535.756 ops/s
Iteration  21: 1444941.620 ops/s
Iteration  22: 1419789.480 ops/s
Iteration  23: 1437600.367 ops/s
Iteration  24: 1460068.398 ops/s
Iteration  25: 1451767.730 ops/s
Iteration  26: 1438745.478 ops/s
Iteration  27: 1434155.213 ops/s
Iteration  28: 1465044.963 ops/s
Iteration  29: 1447952.283 ops/s
Iteration  30: 1446308.779 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectInstancesOf_value":
  1476386.120 ±(99.9%) 32088.741 ops/s [Average]
  (min, avg, max) = (1417067.448, 1476386.120, 1587244.963), stdev = 48028.921
  CI (99.9%): [1444297.379, 1508474.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectInstancesOf_value  thrpt   30  1476386.120 ± 32088.741  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 562099.266 ops/s
# Warmup Iteration   2: 1041188.114 ops/s
# Warmup Iteration   3: 1152565.451 ops/s
# Warmup Iteration   4: 1154808.406 ops/s
# Warmup Iteration   5: 944335.701 ops/s
# Warmup Iteration   6: 1102550.254 ops/s
# Warmup Iteration   7: 1150843.268 ops/s
# Warmup Iteration   8: 1128904.799 ops/s
# Warmup Iteration   9: 1199558.316 ops/s
# Warmup Iteration  10: 1215321.680 ops/s
# Warmup Iteration  11: 1236715.669 ops/s
# Warmup Iteration  12: 1143474.700 ops/s
# Warmup Iteration  13: 1112997.917 ops/s
# Warmup Iteration  14: 1125281.101 ops/s
# Warmup Iteration  15: 1122585.868 ops/s
# Warmup Iteration  16: 1122152.594 ops/s
# Warmup Iteration  17: 1146519.516 ops/s
# Warmup Iteration  18: 1112688.137 ops/s
# Warmup Iteration  19: 1140511.727 ops/s
# Warmup Iteration  20: 1176894.987 ops/s
# Warmup Iteration  21: 1132879.218 ops/s
# Warmup Iteration  22: 1141233.695 ops/s
# Warmup Iteration  23: 1134898.751 ops/s
# Warmup Iteration  24: 1117191.992 ops/s
# Warmup Iteration  25: 1132452.295 ops/s
# Warmup Iteration  26: 1120012.741 ops/s
# Warmup Iteration  27: 1135459.320 ops/s
# Warmup Iteration  28: 1132928.828 ops/s
# Warmup Iteration  29: 1137465.808 ops/s
# Warmup Iteration  30: 1137394.172 ops/s
Iteration   1: 1138373.516 ops/s
Iteration   2: 1125086.435 ops/s
Iteration   3: 1127393.618 ops/s
Iteration   4: 1151539.939 ops/s
Iteration   5: 1124364.239 ops/s
Iteration   6: 1094665.548 ops/s
Iteration   7: 1123984.460 ops/s
Iteration   8: 1111167.225 ops/s
Iteration   9: 1169066.110 ops/s
Iteration  10: 1103398.296 ops/s
Iteration  11: 1199759.258 ops/s
Iteration  12: 1116689.251 ops/s
Iteration  13: 1124378.907 ops/s
Iteration  14: 1141025.323 ops/s
Iteration  15: 1137441.022 ops/s
Iteration  16: 1121141.437 ops/s
Iteration  17: 1131418.924 ops/s
Iteration  18: 1131110.388 ops/s
Iteration  19: 1178576.900 ops/s
Iteration  20: 1147566.315 ops/s
Iteration  21: 1135266.073 ops/s
Iteration  22: 1122549.101 ops/s
Iteration  23: 1126009.897 ops/s
Iteration  24: 1130078.276 ops/s
Iteration  25: 1127266.276 ops/s
Iteration  26: 1115595.872 ops/s
Iteration  27: 1160429.410 ops/s
Iteration  28: 1140344.472 ops/s
Iteration  29: 1141075.284 ops/s
Iteration  30: 1134985.651 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectMap":
  1134391.581 ±(99.9%) 14355.217 ops/s [Average]
  (min, avg, max) = (1094665.548, 1134391.581, 1199759.258), stdev = 21486.215
  CI (99.9%): [1120036.364, 1148746.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectMap  thrpt   30  1134391.581 ± 14355.217  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 841349.674 ops/s
# Warmup Iteration   2: 2064411.263 ops/s
# Warmup Iteration   3: 2142073.611 ops/s
# Warmup Iteration   4: 1888840.607 ops/s
# Warmup Iteration   5: 2014082.950 ops/s
# Warmup Iteration   6: 2159937.367 ops/s
# Warmup Iteration   7: 2190399.066 ops/s
# Warmup Iteration   8: 2351755.081 ops/s
# Warmup Iteration   9: 2176435.232 ops/s
# Warmup Iteration  10: 2152741.259 ops/s
# Warmup Iteration  11: 2203609.578 ops/s
# Warmup Iteration  12: 2287784.671 ops/s
# Warmup Iteration  13: 2166251.313 ops/s
# Warmup Iteration  14: 2252849.925 ops/s
# Warmup Iteration  15: 2239830.091 ops/s
# Warmup Iteration  16: 2108825.436 ops/s
# Warmup Iteration  17: 2263615.362 ops/s
# Warmup Iteration  18: 2220152.477 ops/s
# Warmup Iteration  19: 2216975.890 ops/s
# Warmup Iteration  20: 2216093.478 ops/s
# Warmup Iteration  21: 2329081.895 ops/s
# Warmup Iteration  22: 2240978.158 ops/s
# Warmup Iteration  23: 2141779.141 ops/s
# Warmup Iteration  24: 2307958.019 ops/s
# Warmup Iteration  25: 2255685.624 ops/s
# Warmup Iteration  26: 2139250.869 ops/s
# Warmup Iteration  27: 2282330.122 ops/s
# Warmup Iteration  28: 2303788.911 ops/s
# Warmup Iteration  29: 2298605.915 ops/s
# Warmup Iteration  30: 2229706.202 ops/s
Iteration   1: 2296481.550 ops/s
Iteration   2: 2109760.324 ops/s
Iteration   3: 2127406.442 ops/s
Iteration   4: 2114145.752 ops/s
Iteration   5: 2197069.380 ops/s
Iteration   6: 2354421.555 ops/s
Iteration   7: 2293177.492 ops/s
Iteration   8: 2358067.327 ops/s
Iteration   9: 2264993.762 ops/s
Iteration  10: 2170226.892 ops/s
Iteration  11: 2355471.484 ops/s
Iteration  12: 2357423.821 ops/s
Iteration  13: 2365539.641 ops/s
Iteration  14: 2161378.852 ops/s
Iteration  15: 2138547.004 ops/s
Iteration  16: 2272286.926 ops/s
Iteration  17: 2235871.136 ops/s
Iteration  18: 2242453.997 ops/s
Iteration  19: 2355547.531 ops/s
Iteration  20: 2148086.360 ops/s
Iteration  21: 2193417.641 ops/s
Iteration  22: 2186788.333 ops/s
Iteration  23: 2233418.066 ops/s
Iteration  24: 2228377.429 ops/s
Iteration  25: 2117582.910 ops/s
Iteration  26: 2154476.959 ops/s
Iteration  27: 2151807.629 ops/s
Iteration  28: 2162698.799 ops/s
Iteration  29: 2177755.077 ops/s
Iteration  30: 2352394.072 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectWith":
  2229235.805 ±(99.9%) 58501.877 ops/s [Average]
  (min, avg, max) = (2109760.324, 2229235.805, 2365539.641), stdev = 87562.862
  CI (99.9%): [2170733.928, 2287737.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectWith  thrpt   30  2229235.805 ± 58501.877  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1285786.010 ops/s
# Warmup Iteration   2: 3282449.432 ops/s
# Warmup Iteration   3: 2991831.384 ops/s
# Warmup Iteration   4: 3068901.029 ops/s
# Warmup Iteration   5: 3417249.016 ops/s
# Warmup Iteration   6: 3416803.043 ops/s
# Warmup Iteration   7: 3360433.835 ops/s
# Warmup Iteration   8: 3429516.643 ops/s
# Warmup Iteration   9: 3357572.326 ops/s
# Warmup Iteration  10: 3325604.550 ops/s
# Warmup Iteration  11: 3373507.967 ops/s
# Warmup Iteration  12: 3340637.393 ops/s
# Warmup Iteration  13: 3466172.826 ops/s
# Warmup Iteration  14: 3305772.861 ops/s
# Warmup Iteration  15: 3323383.805 ops/s
# Warmup Iteration  16: 3368495.069 ops/s
# Warmup Iteration  17: 3353745.115 ops/s
# Warmup Iteration  18: 3607385.805 ops/s
# Warmup Iteration  19: 3602244.129 ops/s
# Warmup Iteration  20: 3624411.441 ops/s
# Warmup Iteration  21: 3433414.135 ops/s
# Warmup Iteration  22: 3397970.533 ops/s
# Warmup Iteration  23: 3464855.175 ops/s
# Warmup Iteration  24: 3403853.686 ops/s
# Warmup Iteration  25: 3394888.471 ops/s
# Warmup Iteration  26: 3416688.082 ops/s
# Warmup Iteration  27: 3332183.109 ops/s
# Warmup Iteration  28: 3344440.895 ops/s
# Warmup Iteration  29: 3400477.533 ops/s
# Warmup Iteration  30: 3414345.419 ops/s
Iteration   1: 3509789.822 ops/s
Iteration   2: 3574618.356 ops/s
Iteration   3: 3635693.067 ops/s
Iteration   4: 3640332.983 ops/s
Iteration   5: 3521104.995 ops/s
Iteration   6: 3290350.919 ops/s
Iteration   7: 3264447.872 ops/s
Iteration   8: 3341113.821 ops/s
Iteration   9: 3324689.693 ops/s
Iteration  10: 3540782.625 ops/s
Iteration  11: 3374850.232 ops/s
Iteration  12: 3353399.160 ops/s
Iteration  13: 3393390.327 ops/s
Iteration  14: 3328658.178 ops/s
Iteration  15: 3367481.864 ops/s
Iteration  16: 3290927.017 ops/s
Iteration  17: 3255070.852 ops/s
Iteration  18: 3286329.671 ops/s
Iteration  19: 3523735.846 ops/s
Iteration  20: 3637703.152 ops/s
Iteration  21: 3271955.421 ops/s
Iteration  22: 3291143.810 ops/s
Iteration  23: 3349830.316 ops/s
Iteration  24: 3360949.596 ops/s
Iteration  25: 3334540.450 ops/s
Iteration  26: 3327297.932 ops/s
Iteration  27: 3627088.961 ops/s
Iteration  28: 3530080.725 ops/s
Iteration  29: 3400501.469 ops/s
Iteration  30: 3314490.180 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectWith_value":
  3408744.977 ±(99.9%) 85224.540 ops/s [Average]
  (min, avg, max) = (3255070.852, 3408744.977, 3640332.983), stdev = 127560.089
  CI (99.9%): [3323520.437, 3493969.517] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_selectWith_value  thrpt   30  3408744.977 ± 85224.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_select_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_select_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 808284.889 ops/s
# Warmup Iteration   2: 2057311.217 ops/s
# Warmup Iteration   3: 2092987.648 ops/s
# Warmup Iteration   4: 1732031.201 ops/s
# Warmup Iteration   5: 2070547.920 ops/s
# Warmup Iteration   6: 2089400.527 ops/s
# Warmup Iteration   7: 2051646.908 ops/s
# Warmup Iteration   8: 2070611.174 ops/s
# Warmup Iteration   9: 2104703.406 ops/s
# Warmup Iteration  10: 2101136.866 ops/s
# Warmup Iteration  11: 2083080.907 ops/s
# Warmup Iteration  12: 2058541.847 ops/s
# Warmup Iteration  13: 2054378.668 ops/s
# Warmup Iteration  14: 2047203.252 ops/s
# Warmup Iteration  15: 2075329.310 ops/s
# Warmup Iteration  16: 2152583.121 ops/s
# Warmup Iteration  17: 2153776.319 ops/s
# Warmup Iteration  18: 2222626.922 ops/s
# Warmup Iteration  19: 2037577.459 ops/s
# Warmup Iteration  20: 2045783.139 ops/s
# Warmup Iteration  21: 2060391.177 ops/s
# Warmup Iteration  22: 2037865.251 ops/s
# Warmup Iteration  23: 2050417.205 ops/s
# Warmup Iteration  24: 2033075.806 ops/s
# Warmup Iteration  25: 2023579.076 ops/s
# Warmup Iteration  26: 2024359.044 ops/s
# Warmup Iteration  27: 2051147.179 ops/s
# Warmup Iteration  28: 2094279.125 ops/s
# Warmup Iteration  29: 2062738.246 ops/s
# Warmup Iteration  30: 2034193.472 ops/s
Iteration   1: 2082319.159 ops/s
Iteration   2: 2043292.979 ops/s
Iteration   3: 2029905.516 ops/s
Iteration   4: 2171464.447 ops/s
Iteration   5: 2221058.504 ops/s
Iteration   6: 2222321.008 ops/s
Iteration   7: 2209172.781 ops/s
Iteration   8: 2169812.482 ops/s
Iteration   9: 2031602.957 ops/s
Iteration  10: 2004330.290 ops/s
Iteration  11: 2066372.215 ops/s
Iteration  12: 1982062.739 ops/s
Iteration  13: 2006545.776 ops/s
Iteration  14: 2231289.523 ops/s
Iteration  15: 2168237.176 ops/s
Iteration  16: 2223149.739 ops/s
Iteration  17: 2219442.372 ops/s
Iteration  18: 2264907.616 ops/s
Iteration  19: 2178318.789 ops/s
Iteration  20: 2119758.616 ops/s
Iteration  21: 2154116.395 ops/s
Iteration  22: 2164449.388 ops/s
Iteration  23: 2144091.727 ops/s
Iteration  24: 2100579.066 ops/s
Iteration  25: 2150944.889 ops/s
Iteration  26: 2168336.437 ops/s
Iteration  27: 2113435.709 ops/s
Iteration  28: 2231690.323 ops/s
Iteration  29: 2153378.363 ops/s
Iteration  30: 1957774.091 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_select_value":
  2132805.369 ±(99.9%) 56475.570 ops/s [Average]
  (min, avg, max) = (1957774.091, 2132805.369, 2264907.616), stdev = 84529.980
  CI (99.9%): [2076329.800, 2189280.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_select_value  thrpt   30  2132805.369 ± 56475.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 41729.056 ops/s
# Warmup Iteration   2: 50930.639 ops/s
# Warmup Iteration   3: 78226.768 ops/s
# Warmup Iteration   4: 80402.266 ops/s
# Warmup Iteration   5: 80418.212 ops/s
# Warmup Iteration   6: 79420.753 ops/s
# Warmup Iteration   7: 74091.224 ops/s
# Warmup Iteration   8: 78790.800 ops/s
# Warmup Iteration   9: 63938.344 ops/s
# Warmup Iteration  10: 72753.058 ops/s
# Warmup Iteration  11: 75817.703 ops/s
# Warmup Iteration  12: 77710.471 ops/s
# Warmup Iteration  13: 73186.369 ops/s
# Warmup Iteration  14: 76239.375 ops/s
# Warmup Iteration  15: 78809.268 ops/s
# Warmup Iteration  16: 75516.026 ops/s
# Warmup Iteration  17: 77481.399 ops/s
# Warmup Iteration  18: 78203.938 ops/s
# Warmup Iteration  19: 73443.487 ops/s
# Warmup Iteration  20: 73288.055 ops/s
# Warmup Iteration  21: 72969.341 ops/s
# Warmup Iteration  22: 76472.375 ops/s
# Warmup Iteration  23: 74438.223 ops/s
# Warmup Iteration  24: 78178.190 ops/s
# Warmup Iteration  25: 77757.392 ops/s
# Warmup Iteration  26: 77015.090 ops/s
# Warmup Iteration  27: 76573.994 ops/s
# Warmup Iteration  28: 78768.593 ops/s
# Warmup Iteration  29: 78140.544 ops/s
# Warmup Iteration  30: 75484.324 ops/s
Iteration   1: 76044.435 ops/s
Iteration   2: 72913.935 ops/s
Iteration   3: 73211.233 ops/s
Iteration   4: 76896.542 ops/s
Iteration   5: 80546.621 ops/s
Iteration   6: 80426.038 ops/s
Iteration   7: 80518.640 ops/s
Iteration   8: 76763.372 ops/s
Iteration   9: 73189.463 ops/s
Iteration  10: 73250.172 ops/s
Iteration  11: 73223.895 ops/s
Iteration  12: 71863.937 ops/s
Iteration  13: 75734.721 ops/s
Iteration  14: 73366.084 ops/s
Iteration  15: 72262.259 ops/s
Iteration  16: 72361.286 ops/s
Iteration  17: 71782.669 ops/s
Iteration  18: 73985.458 ops/s
Iteration  19: 73547.657 ops/s
Iteration  20: 74907.194 ops/s
Iteration  21: 76042.379 ops/s
Iteration  22: 77165.177 ops/s
Iteration  23: 76345.065 ops/s
Iteration  24: 72385.049 ops/s
Iteration  25: 71913.290 ops/s
Iteration  26: 71874.761 ops/s
Iteration  27: 72522.455 ops/s
Iteration  28: 76829.465 ops/s
Iteration  29: 71530.938 ops/s
Iteration  30: 71302.547 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_serialization":
  74490.225 ±(99.9%) 1830.196 ops/s [Average]
  (min, avg, max) = (71302.547, 74490.225, 80546.621), stdev = 2739.352
  CI (99.9%): [72660.029, 76320.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_serialization  thrpt   30  74490.225 ± 1830.196  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 539914.243 ops/s
# Warmup Iteration   2: 987209.459 ops/s
# Warmup Iteration   3: 1079133.294 ops/s
# Warmup Iteration   4: 1054932.728 ops/s
# Warmup Iteration   5: 906444.728 ops/s
# Warmup Iteration   6: 1048577.137 ops/s
# Warmup Iteration   7: 1041093.634 ops/s
# Warmup Iteration   8: 1045707.487 ops/s
# Warmup Iteration   9: 1052596.433 ops/s
# Warmup Iteration  10: 1029073.190 ops/s
# Warmup Iteration  11: 1046738.865 ops/s
# Warmup Iteration  12: 1058735.995 ops/s
# Warmup Iteration  13: 1071794.093 ops/s
# Warmup Iteration  14: 1055242.758 ops/s
# Warmup Iteration  15: 1035592.261 ops/s
# Warmup Iteration  16: 1041053.682 ops/s
# Warmup Iteration  17: 1037462.037 ops/s
# Warmup Iteration  18: 1033379.954 ops/s
# Warmup Iteration  19: 1048192.647 ops/s
# Warmup Iteration  20: 1050288.136 ops/s
# Warmup Iteration  21: 1048408.868 ops/s
# Warmup Iteration  22: 1038797.158 ops/s
# Warmup Iteration  23: 1031535.445 ops/s
# Warmup Iteration  24: 1047747.963 ops/s
# Warmup Iteration  25: 1084292.501 ops/s
# Warmup Iteration  26: 1045775.085 ops/s
# Warmup Iteration  27: 1054599.451 ops/s
# Warmup Iteration  28: 1079447.190 ops/s
# Warmup Iteration  29: 1079778.214 ops/s
# Warmup Iteration  30: 1066024.243 ops/s
Iteration   1: 1078396.823 ops/s
Iteration   2: 1049690.710 ops/s
Iteration   3: 1080690.869 ops/s
Iteration   4: 1053533.865 ops/s
Iteration   5: 1041645.230 ops/s
Iteration   6: 1083854.559 ops/s
Iteration   7: 1064114.852 ops/s
Iteration   8: 1048949.705 ops/s
Iteration   9: 1056367.044 ops/s
Iteration  10: 1117403.495 ops/s
Iteration  11: 1148865.878 ops/s
Iteration  12: 1078752.892 ops/s
Iteration  13: 1054475.254 ops/s
Iteration  14: 1090856.928 ops/s
Iteration  15: 1099024.623 ops/s
Iteration  16: 1138711.999 ops/s
Iteration  17: 1139270.782 ops/s
Iteration  18: 1107060.572 ops/s
Iteration  19: 1065611.766 ops/s
Iteration  20: 1088263.339 ops/s
Iteration  21: 1036398.022 ops/s
Iteration  22: 1055624.376 ops/s
Iteration  23: 1094709.535 ops/s
Iteration  24: 1083411.172 ops/s
Iteration  25: 1069755.927 ops/s
Iteration  26: 1087589.931 ops/s
Iteration  27: 1066977.978 ops/s
Iteration  28: 1063441.034 ops/s
Iteration  29: 1079554.497 ops/s
Iteration  30: 1081916.389 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_size":
  1080164.002 ±(99.9%) 19001.823 ops/s [Average]
  (min, avg, max) = (1036398.022, 1080164.002, 1148865.878), stdev = 28441.036
  CI (99.9%): [1061162.179, 1099165.825] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_size  thrpt   30  1080164.002 ± 19001.823  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 606463.240 ops/s
# Warmup Iteration   2: 1408370.637 ops/s
# Warmup Iteration   3: 1356754.971 ops/s
# Warmup Iteration   4: 1328895.226 ops/s
# Warmup Iteration   5: 1215103.827 ops/s
# Warmup Iteration   6: 1453883.188 ops/s
# Warmup Iteration   7: 1361405.096 ops/s
# Warmup Iteration   8: 1364840.117 ops/s
# Warmup Iteration   9: 1345629.707 ops/s
# Warmup Iteration  10: 1384486.405 ops/s
# Warmup Iteration  11: 1362841.768 ops/s
# Warmup Iteration  12: 1392139.340 ops/s
# Warmup Iteration  13: 1431607.575 ops/s
# Warmup Iteration  14: 1353815.614 ops/s
# Warmup Iteration  15: 1342273.265 ops/s
# Warmup Iteration  16: 1371898.575 ops/s
# Warmup Iteration  17: 1347452.675 ops/s
# Warmup Iteration  18: 1353142.967 ops/s
# Warmup Iteration  19: 1381511.729 ops/s
# Warmup Iteration  20: 1362694.633 ops/s
# Warmup Iteration  21: 1361351.392 ops/s
# Warmup Iteration  22: 1363732.539 ops/s
# Warmup Iteration  23: 1358433.666 ops/s
# Warmup Iteration  24: 1355678.935 ops/s
# Warmup Iteration  25: 1360425.915 ops/s
# Warmup Iteration  26: 1366196.151 ops/s
# Warmup Iteration  27: 1385965.929 ops/s
# Warmup Iteration  28: 1419557.362 ops/s
# Warmup Iteration  29: 1401729.515 ops/s
# Warmup Iteration  30: 1381474.360 ops/s
Iteration   1: 1360749.661 ops/s
Iteration   2: 1352383.696 ops/s
Iteration   3: 1347136.116 ops/s
Iteration   4: 1331078.027 ops/s
Iteration   5: 1358475.136 ops/s
Iteration   6: 1373976.066 ops/s
Iteration   7: 1353466.186 ops/s
Iteration   8: 1370065.441 ops/s
Iteration   9: 1357946.024 ops/s
Iteration  10: 1363795.831 ops/s
Iteration  11: 1359533.763 ops/s
Iteration  12: 1371848.774 ops/s
Iteration  13: 1345538.721 ops/s
Iteration  14: 1368390.372 ops/s
Iteration  15: 1342811.246 ops/s
Iteration  16: 1369454.693 ops/s
Iteration  17: 1368729.468 ops/s
Iteration  18: 1341327.572 ops/s
Iteration  19: 1376906.071 ops/s
Iteration  20: 1353038.013 ops/s
Iteration  21: 1364207.125 ops/s
Iteration  22: 1386248.351 ops/s
Iteration  23: 1362883.538 ops/s
Iteration  24: 1390026.596 ops/s
Iteration  25: 1395374.327 ops/s
Iteration  26: 1389322.781 ops/s
Iteration  27: 1382356.811 ops/s
Iteration  28: 1413474.973 ops/s
Iteration  29: 1338703.073 ops/s
Iteration  30: 1337053.882 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_stream":
  1364210.078 ±(99.9%) 12725.295 ops/s [Average]
  (min, avg, max) = (1331078.027, 1364210.078, 1413474.973), stdev = 19046.624
  CI (99.9%): [1351484.783, 1376935.373] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_stream  thrpt   30  1364210.078 ± 12725.295  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 811278.531 ops/s
# Warmup Iteration   2: 1561473.276 ops/s
# Warmup Iteration   3: 1668350.383 ops/s
# Warmup Iteration   4: 1675634.816 ops/s
# Warmup Iteration   5: 1308882.736 ops/s
# Warmup Iteration   6: 1664831.791 ops/s
# Warmup Iteration   7: 1665309.472 ops/s
# Warmup Iteration   8: 1639205.509 ops/s
# Warmup Iteration   9: 1623400.128 ops/s
# Warmup Iteration  10: 1628456.845 ops/s
# Warmup Iteration  11: 1651467.673 ops/s
# Warmup Iteration  12: 1615250.682 ops/s
# Warmup Iteration  13: 1636984.431 ops/s
# Warmup Iteration  14: 1632659.952 ops/s
# Warmup Iteration  15: 1634628.480 ops/s
# Warmup Iteration  16: 1627559.184 ops/s
# Warmup Iteration  17: 1636113.341 ops/s
# Warmup Iteration  18: 1648547.951 ops/s
# Warmup Iteration  19: 1637437.493 ops/s
# Warmup Iteration  20: 1636928.980 ops/s
# Warmup Iteration  21: 1635155.669 ops/s
# Warmup Iteration  22: 1634563.201 ops/s
# Warmup Iteration  23: 1641955.350 ops/s
# Warmup Iteration  24: 1624372.002 ops/s
# Warmup Iteration  25: 1618443.987 ops/s
# Warmup Iteration  26: 1683764.102 ops/s
# Warmup Iteration  27: 1679950.229 ops/s
# Warmup Iteration  28: 1613013.267 ops/s
# Warmup Iteration  29: 1640823.774 ops/s
# Warmup Iteration  30: 1614461.593 ops/s
Iteration   1: 1616251.452 ops/s
Iteration   2: 1645252.287 ops/s
Iteration   3: 1659344.078 ops/s
Iteration   4: 1701265.238 ops/s
Iteration   5: 1618956.004 ops/s
Iteration   6: 1640847.386 ops/s
Iteration   7: 1651171.856 ops/s
Iteration   8: 1618483.101 ops/s
Iteration   9: 1631234.290 ops/s
Iteration  10: 1634905.669 ops/s
Iteration  11: 1603163.005 ops/s
Iteration  12: 1723644.242 ops/s
Iteration  13: 1699917.232 ops/s
Iteration  14: 1692529.573 ops/s
Iteration  15: 1690587.118 ops/s
Iteration  16: 1605888.103 ops/s
Iteration  17: 1635269.648 ops/s
Iteration  18: 1613118.717 ops/s
Iteration  19: 1642853.945 ops/s
Iteration  20: 1657368.738 ops/s
Iteration  21: 1621900.325 ops/s
Iteration  22: 1711012.295 ops/s
Iteration  23: 1703134.463 ops/s
Iteration  24: 1628397.094 ops/s
Iteration  25: 1698985.594 ops/s
Iteration  26: 1697843.281 ops/s
Iteration  27: 1651755.948 ops/s
Iteration  28: 1595962.020 ops/s
Iteration  29: 1710443.877 ops/s
Iteration  30: 1684076.266 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByDouble":
  1656185.428 ±(99.9%) 25658.827 ops/s [Average]
  (min, avg, max) = (1595962.020, 1656185.428, 1723644.242), stdev = 38404.928
  CI (99.9%): [1630526.601, 1681844.255] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByDouble  thrpt   30  1656185.428 ± 25658.827  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 783827.282 ops/s
# Warmup Iteration   2: 1598016.877 ops/s
# Warmup Iteration   3: 1779943.578 ops/s
# Warmup Iteration   4: 1831530.347 ops/s
# Warmup Iteration   5: 1400976.151 ops/s
# Warmup Iteration   6: 1787899.823 ops/s
# Warmup Iteration   7: 1745994.786 ops/s
# Warmup Iteration   8: 1767591.246 ops/s
# Warmup Iteration   9: 1774081.707 ops/s
# Warmup Iteration  10: 1724291.580 ops/s
# Warmup Iteration  11: 1751621.039 ops/s
# Warmup Iteration  12: 1715930.539 ops/s
# Warmup Iteration  13: 1722158.080 ops/s
# Warmup Iteration  14: 1701773.849 ops/s
# Warmup Iteration  15: 1748116.611 ops/s
# Warmup Iteration  16: 1726181.543 ops/s
# Warmup Iteration  17: 1784389.677 ops/s
# Warmup Iteration  18: 1785980.776 ops/s
# Warmup Iteration  19: 1759334.987 ops/s
# Warmup Iteration  20: 1773401.756 ops/s
# Warmup Iteration  21: 1709107.690 ops/s
# Warmup Iteration  22: 1713405.882 ops/s
# Warmup Iteration  23: 1710611.103 ops/s
# Warmup Iteration  24: 1698212.473 ops/s
# Warmup Iteration  25: 1748540.220 ops/s
# Warmup Iteration  26: 1756187.749 ops/s
# Warmup Iteration  27: 1716048.909 ops/s
# Warmup Iteration  28: 1711374.253 ops/s
# Warmup Iteration  29: 1703182.228 ops/s
# Warmup Iteration  30: 1774179.265 ops/s
Iteration   1: 1847225.437 ops/s
Iteration   2: 1721624.495 ops/s
Iteration   3: 1743041.600 ops/s
Iteration   4: 1800634.156 ops/s
Iteration   5: 1873939.225 ops/s
Iteration   6: 1874155.608 ops/s
Iteration   7: 1880086.802 ops/s
Iteration   8: 1781131.388 ops/s
Iteration   9: 1780284.717 ops/s
Iteration  10: 1761794.944 ops/s
Iteration  11: 1866968.982 ops/s
Iteration  12: 1755622.914 ops/s
Iteration  13: 1749262.527 ops/s
Iteration  14: 1781593.633 ops/s
Iteration  15: 1766040.803 ops/s
Iteration  16: 1766462.171 ops/s
Iteration  17: 1769482.749 ops/s
Iteration  18: 1719602.947 ops/s
Iteration  19: 1725666.484 ops/s
Iteration  20: 1724282.468 ops/s
Iteration  21: 1794781.043 ops/s
Iteration  22: 1781678.625 ops/s
Iteration  23: 1761150.000 ops/s
Iteration  24: 1704140.223 ops/s
Iteration  25: 1716634.708 ops/s
Iteration  26: 1739701.061 ops/s
Iteration  27: 1716099.150 ops/s
Iteration  28: 1714420.936 ops/s
Iteration  29: 1786604.514 ops/s
Iteration  30: 1754915.412 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByFloat":
  1771967.657 ±(99.9%) 34235.924 ops/s [Average]
  (min, avg, max) = (1704140.223, 1771967.657, 1880086.802), stdev = 51242.723
  CI (99.9%): [1737731.733, 1806203.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByFloat  thrpt   30  1771967.657 ± 34235.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1217119.282 ops/s
# Warmup Iteration   2: 2827366.733 ops/s
# Warmup Iteration   3: 2890537.058 ops/s
# Warmup Iteration   4: 2706928.445 ops/s
# Warmup Iteration   5: 2609385.359 ops/s
# Warmup Iteration   6: 2946609.218 ops/s
# Warmup Iteration   7: 2854127.198 ops/s
# Warmup Iteration   8: 2984463.836 ops/s
# Warmup Iteration   9: 3089713.904 ops/s
# Warmup Iteration  10: 2907984.886 ops/s
# Warmup Iteration  11: 2862018.750 ops/s
# Warmup Iteration  12: 2970532.571 ops/s
# Warmup Iteration  13: 2947002.611 ops/s
# Warmup Iteration  14: 2926761.895 ops/s
# Warmup Iteration  15: 2847124.780 ops/s
# Warmup Iteration  16: 2935203.771 ops/s
# Warmup Iteration  17: 2921468.336 ops/s
# Warmup Iteration  18: 3129807.746 ops/s
# Warmup Iteration  19: 2863659.877 ops/s
# Warmup Iteration  20: 2839810.130 ops/s
# Warmup Iteration  21: 2901387.470 ops/s
# Warmup Iteration  22: 2863597.086 ops/s
# Warmup Iteration  23: 2960788.156 ops/s
# Warmup Iteration  24: 2945969.032 ops/s
# Warmup Iteration  25: 2875598.664 ops/s
# Warmup Iteration  26: 2873763.781 ops/s
# Warmup Iteration  27: 2942032.213 ops/s
# Warmup Iteration  28: 3071659.787 ops/s
# Warmup Iteration  29: 2996905.166 ops/s
# Warmup Iteration  30: 2998805.667 ops/s
Iteration   1: 2989997.049 ops/s
Iteration   2: 2876927.506 ops/s
Iteration   3: 2908081.125 ops/s
Iteration   4: 2882987.437 ops/s
Iteration   5: 2881061.128 ops/s
Iteration   6: 2910196.565 ops/s
Iteration   7: 2821496.557 ops/s
Iteration   8: 2865243.487 ops/s
Iteration   9: 2806086.118 ops/s
Iteration  10: 2804789.678 ops/s
Iteration  11: 2903175.892 ops/s
Iteration  12: 2874528.227 ops/s
Iteration  13: 2939362.029 ops/s
Iteration  14: 2927003.746 ops/s
Iteration  15: 2831681.615 ops/s
Iteration  16: 3052646.350 ops/s
Iteration  17: 2895577.653 ops/s
Iteration  18: 2887968.500 ops/s
Iteration  19: 2982129.578 ops/s
Iteration  20: 2924859.476 ops/s
Iteration  21: 2906387.996 ops/s
Iteration  22: 3001491.957 ops/s
Iteration  23: 2996755.297 ops/s
Iteration  24: 2939822.685 ops/s
Iteration  25: 2884442.572 ops/s
Iteration  26: 2909943.359 ops/s
Iteration  27: 2834877.653 ops/s
Iteration  28: 2866344.255 ops/s
Iteration  29: 3092157.712 ops/s
Iteration  30: 2980792.480 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByInt":
  2912627.189 ±(99.9%) 46223.363 ops/s [Average]
  (min, avg, max) = (2804789.678, 2912627.189, 3092157.712), stdev = 69184.959
  CI (99.9%): [2866403.826, 2958850.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByInt  thrpt   30  2912627.189 ± 46223.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1306088.565 ops/s
# Warmup Iteration   2: 2961729.901 ops/s
# Warmup Iteration   3: 3222476.519 ops/s
# Warmup Iteration   4: 2547227.047 ops/s
# Warmup Iteration   5: 3020708.834 ops/s
# Warmup Iteration   6: 3050406.913 ops/s
# Warmup Iteration   7: 3023159.765 ops/s
# Warmup Iteration   8: 3134333.166 ops/s
# Warmup Iteration   9: 3125935.376 ops/s
# Warmup Iteration  10: 2998713.393 ops/s
# Warmup Iteration  11: 3040303.057 ops/s
# Warmup Iteration  12: 3005448.670 ops/s
# Warmup Iteration  13: 3061698.032 ops/s
# Warmup Iteration  14: 2962452.192 ops/s
# Warmup Iteration  15: 3026326.211 ops/s
# Warmup Iteration  16: 3065002.136 ops/s
# Warmup Iteration  17: 3016934.132 ops/s
# Warmup Iteration  18: 3034189.667 ops/s
# Warmup Iteration  19: 3094238.782 ops/s
# Warmup Iteration  20: 3004033.551 ops/s
# Warmup Iteration  21: 3009150.650 ops/s
# Warmup Iteration  22: 2996596.644 ops/s
# Warmup Iteration  23: 2962989.028 ops/s
# Warmup Iteration  24: 3006162.098 ops/s
# Warmup Iteration  25: 3044480.298 ops/s
# Warmup Iteration  26: 3015535.901 ops/s
# Warmup Iteration  27: 2993178.393 ops/s
# Warmup Iteration  28: 3151205.026 ops/s
# Warmup Iteration  29: 3195175.701 ops/s
# Warmup Iteration  30: 3053916.013 ops/s
Iteration   1: 3064570.967 ops/s
Iteration   2: 3033181.989 ops/s
Iteration   3: 3005059.027 ops/s
Iteration   4: 2989867.060 ops/s
Iteration   5: 3237118.004 ops/s
Iteration   6: 3048101.018 ops/s
Iteration   7: 2976029.668 ops/s
Iteration   8: 2958370.522 ops/s
Iteration   9: 2965474.764 ops/s
Iteration  10: 2917251.548 ops/s
Iteration  11: 3004493.447 ops/s
Iteration  12: 2964568.166 ops/s
Iteration  13: 2972193.917 ops/s
Iteration  14: 2947871.707 ops/s
Iteration  15: 3064555.346 ops/s
Iteration  16: 3279225.497 ops/s
Iteration  17: 3264730.700 ops/s
Iteration  18: 3105919.065 ops/s
Iteration  19: 3070062.334 ops/s
Iteration  20: 3086241.777 ops/s
Iteration  21: 3061955.073 ops/s
Iteration  22: 2992779.011 ops/s
Iteration  23: 3013536.771 ops/s
Iteration  24: 3006713.006 ops/s
Iteration  25: 3047307.170 ops/s
Iteration  26: 3128222.841 ops/s
Iteration  27: 3084206.612 ops/s
Iteration  28: 2952985.154 ops/s
Iteration  29: 2924199.019 ops/s
Iteration  30: 2995515.997 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByLong":
  3038743.573 ±(99.9%) 61742.391 ops/s [Average]
  (min, avg, max) = (2917251.548, 3038743.573, 3279225.497), stdev = 92413.111
  CI (99.9%): [2977001.182, 3100485.963] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumByLong  thrpt   30  3038743.573 ± 61742.391  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1947533.398 ops/s
# Warmup Iteration   2: 4198823.613 ops/s
# Warmup Iteration   3: 4187647.854 ops/s
# Warmup Iteration   4: 3462559.569 ops/s
# Warmup Iteration   5: 4242182.830 ops/s
# Warmup Iteration   6: 4273126.994 ops/s
# Warmup Iteration   7: 4118944.319 ops/s
# Warmup Iteration   8: 4248326.538 ops/s
# Warmup Iteration   9: 4131358.531 ops/s
# Warmup Iteration  10: 4185020.783 ops/s
# Warmup Iteration  11: 4192721.741 ops/s
# Warmup Iteration  12: 4123179.716 ops/s
# Warmup Iteration  13: 4148734.529 ops/s
# Warmup Iteration  14: 4143477.792 ops/s
# Warmup Iteration  15: 4285110.522 ops/s
# Warmup Iteration  16: 4313875.095 ops/s
# Warmup Iteration  17: 4368200.312 ops/s
# Warmup Iteration  18: 4533494.760 ops/s
# Warmup Iteration  19: 4158354.023 ops/s
# Warmup Iteration  20: 4137416.459 ops/s
# Warmup Iteration  21: 4178178.830 ops/s
# Warmup Iteration  22: 4297566.203 ops/s
# Warmup Iteration  23: 4329334.285 ops/s
# Warmup Iteration  24: 4141095.959 ops/s
# Warmup Iteration  25: 4153985.596 ops/s
# Warmup Iteration  26: 4168702.890 ops/s
# Warmup Iteration  27: 4295373.042 ops/s
# Warmup Iteration  28: 4220058.936 ops/s
# Warmup Iteration  29: 4201194.081 ops/s
# Warmup Iteration  30: 4209513.223 ops/s
Iteration   1: 4314426.718 ops/s
Iteration   2: 4122084.110 ops/s
Iteration   3: 4154163.282 ops/s
Iteration   4: 4069725.561 ops/s
Iteration   5: 4097909.690 ops/s
Iteration   6: 4032383.816 ops/s
Iteration   7: 3939780.121 ops/s
Iteration   8: 4275219.090 ops/s
Iteration   9: 3912084.451 ops/s
Iteration  10: 4186254.728 ops/s
Iteration  11: 4173464.529 ops/s
Iteration  12: 4347195.667 ops/s
Iteration  13: 4311813.068 ops/s
Iteration  14: 4084136.329 ops/s
Iteration  15: 4148105.627 ops/s
Iteration  16: 4209481.268 ops/s
Iteration  17: 4073442.435 ops/s
Iteration  18: 4212000.339 ops/s
Iteration  19: 4095682.473 ops/s
Iteration  20: 4085018.969 ops/s
Iteration  21: 4179958.300 ops/s
Iteration  22: 4209761.635 ops/s
Iteration  23: 4232601.848 ops/s
Iteration  24: 4274929.956 ops/s
Iteration  25: 4115005.057 ops/s
Iteration  26: 4137113.433 ops/s
Iteration  27: 4057808.679 ops/s
Iteration  28: 4196101.055 ops/s
Iteration  29: 4075330.037 ops/s
Iteration  30: 4162313.612 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfDouble":
  4149509.863 ±(99.9%) 68362.967 ops/s [Average]
  (min, avg, max) = (3912084.451, 4149509.863, 4347195.667), stdev = 102322.478
  CI (99.9%): [4081146.896, 4217872.830] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfDouble  thrpt   30  4149509.863 ± 68362.967  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1718544.320 ops/s
# Warmup Iteration   2: 4467317.069 ops/s
# Warmup Iteration   3: 4485112.044 ops/s
# Warmup Iteration   4: 3828732.484 ops/s
# Warmup Iteration   5: 4589025.789 ops/s
# Warmup Iteration   6: 4503989.645 ops/s
# Warmup Iteration   7: 4473931.120 ops/s
# Warmup Iteration   8: 4752733.828 ops/s
# Warmup Iteration   9: 4756227.424 ops/s
# Warmup Iteration  10: 4476846.937 ops/s
# Warmup Iteration  11: 4623100.312 ops/s
# Warmup Iteration  12: 4676369.516 ops/s
# Warmup Iteration  13: 4680415.316 ops/s
# Warmup Iteration  14: 4671775.682 ops/s
# Warmup Iteration  15: 4538145.710 ops/s
# Warmup Iteration  16: 4521666.626 ops/s
# Warmup Iteration  17: 4519532.977 ops/s
# Warmup Iteration  18: 4477490.839 ops/s
# Warmup Iteration  19: 4435832.648 ops/s
# Warmup Iteration  20: 4622674.253 ops/s
# Warmup Iteration  21: 4662000.967 ops/s
# Warmup Iteration  22: 4654640.085 ops/s
# Warmup Iteration  23: 4482290.188 ops/s
# Warmup Iteration  24: 4692557.916 ops/s
# Warmup Iteration  25: 4792616.563 ops/s
# Warmup Iteration  26: 4590867.129 ops/s
# Warmup Iteration  27: 4645899.794 ops/s
# Warmup Iteration  28: 4718484.376 ops/s
# Warmup Iteration  29: 4720619.583 ops/s
# Warmup Iteration  30: 4644172.991 ops/s
Iteration   1: 4755111.639 ops/s
Iteration   2: 4769895.600 ops/s
Iteration   3: 4835140.822 ops/s
Iteration   4: 4667922.818 ops/s
Iteration   5: 4707421.168 ops/s
Iteration   6: 4557369.437 ops/s
Iteration   7: 4755429.732 ops/s
Iteration   8: 4485417.555 ops/s
Iteration   9: 4634380.853 ops/s
Iteration  10: 4670140.389 ops/s
Iteration  11: 4420728.190 ops/s
Iteration  12: 4695070.664 ops/s
Iteration  13: 4909907.496 ops/s
Iteration  14: 4847147.884 ops/s
Iteration  15: 4731918.639 ops/s
Iteration  16: 4637981.810 ops/s
Iteration  17: 4493612.625 ops/s
Iteration  18: 4791907.007 ops/s
Iteration  19: 4900472.789 ops/s
Iteration  20: 4900743.575 ops/s
Iteration  21: 4899096.039 ops/s
Iteration  22: 4857280.412 ops/s
Iteration  23: 4480476.381 ops/s
Iteration  24: 4644203.916 ops/s
Iteration  25: 4583770.826 ops/s
Iteration  26: 4423942.370 ops/s
Iteration  27: 4408207.882 ops/s
Iteration  28: 4513456.444 ops/s
Iteration  29: 4911149.272 ops/s
Iteration  30: 4910767.431 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfFloat":
  4693335.722 ±(99.9%) 110624.884 ops/s [Average]
  (min, avg, max) = (4408207.882, 4693335.722, 4911149.272), stdev = 165578.131
  CI (99.9%): [4582710.838, 4803960.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfFloat  thrpt   30  4693335.722 ± 110624.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2045882.267 ops/s
# Warmup Iteration   2: 4488328.314 ops/s
# Warmup Iteration   3: 4601484.861 ops/s
# Warmup Iteration   4: 3714342.905 ops/s
# Warmup Iteration   5: 4639473.346 ops/s
# Warmup Iteration   6: 4569053.530 ops/s
# Warmup Iteration   7: 4532920.577 ops/s
# Warmup Iteration   8: 4823390.686 ops/s
# Warmup Iteration   9: 4612736.285 ops/s
# Warmup Iteration  10: 4382215.004 ops/s
# Warmup Iteration  11: 4539045.064 ops/s
# Warmup Iteration  12: 4528018.832 ops/s
# Warmup Iteration  13: 4491930.425 ops/s
# Warmup Iteration  14: 4434551.939 ops/s
# Warmup Iteration  15: 4492798.385 ops/s
# Warmup Iteration  16: 4648799.343 ops/s
# Warmup Iteration  17: 4509341.379 ops/s
# Warmup Iteration  18: 4612145.063 ops/s
# Warmup Iteration  19: 4589135.086 ops/s
# Warmup Iteration  20: 4609209.325 ops/s
# Warmup Iteration  21: 4625197.805 ops/s
# Warmup Iteration  22: 4631616.973 ops/s
# Warmup Iteration  23: 4509313.531 ops/s
# Warmup Iteration  24: 4641464.641 ops/s
# Warmup Iteration  25: 4805686.891 ops/s
# Warmup Iteration  26: 4970502.303 ops/s
# Warmup Iteration  27: 4866933.179 ops/s
# Warmup Iteration  28: 4553478.590 ops/s
# Warmup Iteration  29: 4811143.736 ops/s
# Warmup Iteration  30: 4678604.286 ops/s
Iteration   1: 4528828.910 ops/s
Iteration   2: 4527379.245 ops/s
Iteration   3: 4428353.191 ops/s
Iteration   4: 4453279.367 ops/s
Iteration   5: 4619405.525 ops/s
Iteration   6: 4944718.641 ops/s
Iteration   7: 4893413.956 ops/s
Iteration   8: 4930359.762 ops/s
Iteration   9: 4654572.331 ops/s
Iteration  10: 4562062.953 ops/s
Iteration  11: 4491744.203 ops/s
Iteration  12: 4697444.959 ops/s
Iteration  13: 4558075.663 ops/s
Iteration  14: 4572597.962 ops/s
Iteration  15: 4578156.553 ops/s
Iteration  16: 4520269.584 ops/s
Iteration  17: 4908623.922 ops/s
Iteration  18: 4695463.318 ops/s
Iteration  19: 4619085.249 ops/s
Iteration  20: 4620002.530 ops/s
Iteration  21: 4610539.192 ops/s
Iteration  22: 4578661.451 ops/s
Iteration  23: 4578551.096 ops/s
Iteration  24: 4544585.590 ops/s
Iteration  25: 4516194.361 ops/s
Iteration  26: 4854340.780 ops/s
Iteration  27: 4837361.325 ops/s
Iteration  28: 4793459.105 ops/s
Iteration  29: 4461973.345 ops/s
Iteration  30: 4548128.316 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfInt":
  4637587.746 ±(99.9%) 101157.109 ops/s [Average]
  (min, avg, max) = (4428353.191, 4637587.746, 4944718.641), stdev = 151407.210
  CI (99.9%): [4536430.638, 4738744.855] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfInt  thrpt   30  4637587.746 ± 101157.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1967704.178 ops/s
# Warmup Iteration   2: 4239682.284 ops/s
# Warmup Iteration   3: 4340478.117 ops/s
# Warmup Iteration   4: 3644436.260 ops/s
# Warmup Iteration   5: 4311373.215 ops/s
# Warmup Iteration   6: 4372866.710 ops/s
# Warmup Iteration   7: 4411629.513 ops/s
# Warmup Iteration   8: 4328380.186 ops/s
# Warmup Iteration   9: 4407960.609 ops/s
# Warmup Iteration  10: 4386584.244 ops/s
# Warmup Iteration  11: 4335732.430 ops/s
# Warmup Iteration  12: 4335223.684 ops/s
# Warmup Iteration  13: 4297586.761 ops/s
# Warmup Iteration  14: 4480022.414 ops/s
# Warmup Iteration  15: 4416446.981 ops/s
# Warmup Iteration  16: 4433569.460 ops/s
# Warmup Iteration  17: 4375170.724 ops/s
# Warmup Iteration  18: 4525546.568 ops/s
# Warmup Iteration  19: 4526411.803 ops/s
# Warmup Iteration  20: 4544198.963 ops/s
# Warmup Iteration  21: 4425532.039 ops/s
# Warmup Iteration  22: 4468418.352 ops/s
# Warmup Iteration  23: 4455760.263 ops/s
# Warmup Iteration  24: 4492554.226 ops/s
# Warmup Iteration  25: 4544588.828 ops/s
# Warmup Iteration  26: 4352648.604 ops/s
# Warmup Iteration  27: 4376326.638 ops/s
# Warmup Iteration  28: 4314231.841 ops/s
# Warmup Iteration  29: 4356027.734 ops/s
# Warmup Iteration  30: 4601279.033 ops/s
Iteration   1: 4377435.796 ops/s
Iteration   2: 4464898.806 ops/s
Iteration   3: 4340446.152 ops/s
Iteration   4: 4405863.767 ops/s
Iteration   5: 4490996.656 ops/s
Iteration   6: 4186122.032 ops/s
Iteration   7: 4139117.356 ops/s
Iteration   8: 4387810.778 ops/s
Iteration   9: 4670379.834 ops/s
Iteration  10: 4548346.922 ops/s
Iteration  11: 4695819.245 ops/s
Iteration  12: 4398484.491 ops/s
Iteration  13: 4277888.257 ops/s
Iteration  14: 4345756.846 ops/s
Iteration  15: 4348323.235 ops/s
Iteration  16: 4364912.643 ops/s
Iteration  17: 4319280.158 ops/s
Iteration  18: 4397154.384 ops/s
Iteration  19: 4266148.631 ops/s
Iteration  20: 4323238.752 ops/s
Iteration  21: 4476875.651 ops/s
Iteration  22: 4449091.183 ops/s
Iteration  23: 4322985.619 ops/s
Iteration  24: 4431023.622 ops/s
Iteration  25: 4387590.306 ops/s
Iteration  26: 4397048.448 ops/s
Iteration  27: 4285422.380 ops/s
Iteration  28: 4567806.715 ops/s
Iteration  29: 4567232.346 ops/s
Iteration  30: 4737798.501 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfLong":
  4412376.650 ±(99.9%) 92791.318 ops/s [Average]
  (min, avg, max) = (4139117.356, 4412376.650, 4737798.501), stdev = 138885.686
  CI (99.9%): [4319585.333, 4505167.968] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_sumOfLong  thrpt   30  4412376.650 ± 92791.318  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1352932.729 ops/s
# Warmup Iteration   2: 3212605.256 ops/s
# Warmup Iteration   3: 3322433.034 ops/s
# Warmup Iteration   4: 2554998.293 ops/s
# Warmup Iteration   5: 3159904.324 ops/s
# Warmup Iteration   6: 3098732.065 ops/s
# Warmup Iteration   7: 3082016.827 ops/s
# Warmup Iteration   8: 3162358.309 ops/s
# Warmup Iteration   9: 3115744.977 ops/s
# Warmup Iteration  10: 3058531.376 ops/s
# Warmup Iteration  11: 3028728.441 ops/s
# Warmup Iteration  12: 3108905.038 ops/s
# Warmup Iteration  13: 3171196.777 ops/s
# Warmup Iteration  14: 3259152.361 ops/s
# Warmup Iteration  15: 3065391.380 ops/s
# Warmup Iteration  16: 3078012.747 ops/s
# Warmup Iteration  17: 3065366.427 ops/s
# Warmup Iteration  18: 3077021.607 ops/s
# Warmup Iteration  19: 3105156.757 ops/s
# Warmup Iteration  20: 3062248.937 ops/s
# Warmup Iteration  21: 3023771.976 ops/s
# Warmup Iteration  22: 3287854.546 ops/s
# Warmup Iteration  23: 3314103.338 ops/s
# Warmup Iteration  24: 3135124.824 ops/s
# Warmup Iteration  25: 3166679.456 ops/s
# Warmup Iteration  26: 3074681.083 ops/s
# Warmup Iteration  27: 3104301.738 ops/s
# Warmup Iteration  28: 3109181.693 ops/s
# Warmup Iteration  29: 3051151.442 ops/s
# Warmup Iteration  30: 3140458.598 ops/s
Iteration   1: 3125886.714 ops/s
Iteration   2: 3114740.188 ops/s
Iteration   3: 3132306.691 ops/s
Iteration   4: 3169750.276 ops/s
Iteration   5: 3057362.746 ops/s
Iteration   6: 3134111.585 ops/s
Iteration   7: 3147608.747 ops/s
Iteration   8: 2963108.568 ops/s
Iteration   9: 3045724.559 ops/s
Iteration  10: 3015801.885 ops/s
Iteration  11: 3015158.514 ops/s
Iteration  12: 3108556.908 ops/s
Iteration  13: 3131338.529 ops/s
Iteration  14: 3061612.395 ops/s
Iteration  15: 2934110.592 ops/s
Iteration  16: 3060177.288 ops/s
Iteration  17: 3087802.148 ops/s
Iteration  18: 3053294.849 ops/s
Iteration  19: 3077269.520 ops/s
Iteration  20: 3029465.583 ops/s
Iteration  21: 3029460.212 ops/s
Iteration  22: 3031104.241 ops/s
Iteration  23: 3030549.573 ops/s
Iteration  24: 2980848.955 ops/s
Iteration  25: 3212943.345 ops/s
Iteration  26: 3255979.286 ops/s
Iteration  27: 3060292.995 ops/s
Iteration  28: 3114133.338 ops/s
Iteration  29: 3097915.533 ops/s
Iteration  30: 3155362.689 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_tap":
  3081125.949 ±(99.9%) 47641.824 ops/s [Average]
  (min, avg, max) = (2934110.592, 3081125.949, 3255979.286), stdev = 71308.045
  CI (99.9%): [3033484.124, 3128767.773] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_tap  thrpt   30  3081125.949 ± 47641.824  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testAggregateBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testAggregateBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1054358.932 ops/s
# Warmup Iteration   2: 1884523.140 ops/s
# Warmup Iteration   3: 2014308.061 ops/s
# Warmup Iteration   4: 2064088.512 ops/s
# Warmup Iteration   5: 1966940.940 ops/s
# Warmup Iteration   6: 1644377.796 ops/s
# Warmup Iteration   7: 2083038.866 ops/s
# Warmup Iteration   8: 2023104.849 ops/s
# Warmup Iteration   9: 1988827.175 ops/s
# Warmup Iteration  10: 2089519.596 ops/s
# Warmup Iteration  11: 2188931.847 ops/s
# Warmup Iteration  12: 2085255.768 ops/s
# Warmup Iteration  13: 2122932.818 ops/s
# Warmup Iteration  14: 2056192.859 ops/s
# Warmup Iteration  15: 2067496.911 ops/s
# Warmup Iteration  16: 2047584.866 ops/s
# Warmup Iteration  17: 1989338.903 ops/s
# Warmup Iteration  18: 1986941.525 ops/s
# Warmup Iteration  19: 2027589.483 ops/s
# Warmup Iteration  20: 1999450.900 ops/s
# Warmup Iteration  21: 2006475.513 ops/s
# Warmup Iteration  22: 1996147.242 ops/s
# Warmup Iteration  23: 1977942.783 ops/s
# Warmup Iteration  24: 2075461.870 ops/s
# Warmup Iteration  25: 2026159.094 ops/s
# Warmup Iteration  26: 1982856.251 ops/s
# Warmup Iteration  27: 2017492.258 ops/s
# Warmup Iteration  28: 2052426.838 ops/s
# Warmup Iteration  29: 2058150.835 ops/s
# Warmup Iteration  30: 1998290.100 ops/s
Iteration   1: 1988729.926 ops/s
Iteration   2: 1977215.714 ops/s
Iteration   3: 2088914.660 ops/s
Iteration   4: 2076043.179 ops/s
Iteration   5: 2046489.094 ops/s
Iteration   6: 2049014.346 ops/s
Iteration   7: 2106071.786 ops/s
Iteration   8: 2019497.707 ops/s
Iteration   9: 2036245.163 ops/s
Iteration  10: 2022285.320 ops/s
Iteration  11: 2001935.405 ops/s
Iteration  12: 2029302.364 ops/s
Iteration  13: 1996695.854 ops/s
Iteration  14: 2198047.811 ops/s
Iteration  15: 2197299.170 ops/s
Iteration  16: 2195529.687 ops/s
Iteration  17: 2178838.426 ops/s
Iteration  18: 2197550.783 ops/s
Iteration  19: 2088758.965 ops/s
Iteration  20: 1990197.832 ops/s
Iteration  21: 2011985.021 ops/s
Iteration  22: 1981769.457 ops/s
Iteration  23: 1975376.770 ops/s
Iteration  24: 1996969.406 ops/s
Iteration  25: 2009948.616 ops/s
Iteration  26: 2015211.813 ops/s
Iteration  27: 2036285.073 ops/s
Iteration  28: 2005976.969 ops/s
Iteration  29: 1978867.824 ops/s
Iteration  30: 2037113.201 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testAggregateBy":
  2051138.911 ±(99.9%) 48800.663 ops/s [Average]
  (min, avg, max) = (1975376.770, 2051138.911, 2198047.811), stdev = 73042.541
  CI (99.9%): [2002338.248, 2099939.575] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testAggregateBy  thrpt   30  2051138.911 ± 48800.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 547197.933 ops/s
# Warmup Iteration   2: 1130741.865 ops/s
# Warmup Iteration   3: 1243751.166 ops/s
# Warmup Iteration   4: 1255091.635 ops/s
# Warmup Iteration   5: 1044878.820 ops/s
# Warmup Iteration   6: 1254455.472 ops/s
# Warmup Iteration   7: 1277384.593 ops/s
# Warmup Iteration   8: 1231641.667 ops/s
# Warmup Iteration   9: 1281087.385 ops/s
# Warmup Iteration  10: 1256736.891 ops/s
# Warmup Iteration  11: 1246294.110 ops/s
# Warmup Iteration  12: 1259637.312 ops/s
# Warmup Iteration  13: 1279508.591 ops/s
# Warmup Iteration  14: 1273190.703 ops/s
# Warmup Iteration  15: 1303452.469 ops/s
# Warmup Iteration  16: 1235588.524 ops/s
# Warmup Iteration  17: 1255695.025 ops/s
# Warmup Iteration  18: 1299675.056 ops/s
# Warmup Iteration  19: 1246562.113 ops/s
# Warmup Iteration  20: 1257976.704 ops/s
# Warmup Iteration  21: 1260727.906 ops/s
# Warmup Iteration  22: 1245059.872 ops/s
# Warmup Iteration  23: 1239616.201 ops/s
# Warmup Iteration  24: 1261682.307 ops/s
# Warmup Iteration  25: 1244693.810 ops/s
# Warmup Iteration  26: 1241328.816 ops/s
# Warmup Iteration  27: 1242292.471 ops/s
# Warmup Iteration  28: 1274917.684 ops/s
# Warmup Iteration  29: 1329639.466 ops/s
# Warmup Iteration  30: 1271625.504 ops/s
Iteration   1: 1233797.766 ops/s
Iteration   2: 1313795.243 ops/s
Iteration   3: 1356694.770 ops/s
Iteration   4: 1351692.035 ops/s
Iteration   5: 1251303.623 ops/s
Iteration   6: 1240949.811 ops/s
Iteration   7: 1249150.311 ops/s
Iteration   8: 1242748.750 ops/s
Iteration   9: 1331384.451 ops/s
Iteration  10: 1366439.504 ops/s
Iteration  11: 1370556.114 ops/s
Iteration  12: 1309412.464 ops/s
Iteration  13: 1244604.239 ops/s
Iteration  14: 1349963.540 ops/s
Iteration  15: 1366548.907 ops/s
Iteration  16: 1312413.436 ops/s
Iteration  17: 1234030.778 ops/s
Iteration  18: 1256136.216 ops/s
Iteration  19: 1234449.708 ops/s
Iteration  20: 1259150.193 ops/s
Iteration  21: 1310844.285 ops/s
Iteration  22: 1256710.994 ops/s
Iteration  23: 1245152.120 ops/s
Iteration  24: 1291620.284 ops/s
Iteration  25: 1246119.164 ops/s
Iteration  26: 1262019.910 ops/s
Iteration  27: 1250752.522 ops/s
Iteration  28: 1232791.301 ops/s
Iteration  29: 1246217.256 ops/s
Iteration  30: 1306059.271 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testClone":
  1284116.966 ±(99.9%) 32054.922 ops/s [Average]
  (min, avg, max) = (1232791.301, 1284116.966, 1370556.114), stdev = 47978.302
  CI (99.9%): [1252062.043, 1316171.888] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testClone  thrpt   30  1284116.966 ± 32054.922  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testNewMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testNewMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1619835.435 ops/s
# Warmup Iteration   2: 3688891.460 ops/s
# Warmup Iteration   3: 3162019.358 ops/s
# Warmup Iteration   4: 3698930.130 ops/s
# Warmup Iteration   5: 3871485.358 ops/s
# Warmup Iteration   6: 3727517.307 ops/s
# Warmup Iteration   7: 3810237.850 ops/s
# Warmup Iteration   8: 3745902.898 ops/s
# Warmup Iteration   9: 3759330.196 ops/s
# Warmup Iteration  10: 3702820.595 ops/s
# Warmup Iteration  11: 3705522.275 ops/s
# Warmup Iteration  12: 3755254.964 ops/s
# Warmup Iteration  13: 3822252.297 ops/s
# Warmup Iteration  14: 3778687.781 ops/s
# Warmup Iteration  15: 3742334.017 ops/s
# Warmup Iteration  16: 3769048.614 ops/s
# Warmup Iteration  17: 3757654.553 ops/s
# Warmup Iteration  18: 3943121.039 ops/s
# Warmup Iteration  19: 3887661.464 ops/s
# Warmup Iteration  20: 3793040.121 ops/s
# Warmup Iteration  21: 3717986.599 ops/s
# Warmup Iteration  22: 3680343.638 ops/s
# Warmup Iteration  23: 3835133.652 ops/s
# Warmup Iteration  24: 4084490.460 ops/s
# Warmup Iteration  25: 3951443.631 ops/s
# Warmup Iteration  26: 4109189.147 ops/s
# Warmup Iteration  27: 3974652.851 ops/s
# Warmup Iteration  28: 4071068.659 ops/s
# Warmup Iteration  29: 3818594.113 ops/s
# Warmup Iteration  30: 3789535.758 ops/s
Iteration   1: 3746684.736 ops/s
Iteration   2: 3798349.501 ops/s
Iteration   3: 3753707.017 ops/s
Iteration   4: 3834348.629 ops/s
Iteration   5: 3870660.154 ops/s
Iteration   6: 3965864.718 ops/s
Iteration   7: 4097260.211 ops/s
Iteration   8: 4118570.065 ops/s
Iteration   9: 3987080.303 ops/s
Iteration  10: 3690248.489 ops/s
Iteration  11: 3674105.247 ops/s
Iteration  12: 3751502.033 ops/s
Iteration  13: 3731691.533 ops/s
Iteration  14: 3695967.354 ops/s
Iteration  15: 3757675.694 ops/s
Iteration  16: 3779648.040 ops/s
Iteration  17: 3766903.654 ops/s
Iteration  18: 3786970.604 ops/s
Iteration  19: 3716654.062 ops/s
Iteration  20: 3749394.663 ops/s
Iteration  21: 3706450.016 ops/s
Iteration  22: 3717771.287 ops/s
Iteration  23: 3754496.109 ops/s
Iteration  24: 3897039.368 ops/s
Iteration  25: 3964400.741 ops/s
Iteration  26: 3868268.033 ops/s
Iteration  27: 3940709.450 ops/s
Iteration  28: 3827685.313 ops/s
Iteration  29: 3762096.403 ops/s
Iteration  30: 3692238.400 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testNewMap":
  3813481.394 ±(99.9%) 79352.100 ops/s [Average]
  (min, avg, max) = (3674105.247, 3813481.394, 4118570.065), stdev = 118770.497
  CI (99.9%): [3734129.294, 3892833.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testNewMap  thrpt   30  3813481.394 ± 79352.100  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testNewMapWithKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testNewMapWithKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1172677.627 ops/s
# Warmup Iteration   2: 2781709.756 ops/s
# Warmup Iteration   3: 2835472.668 ops/s
# Warmup Iteration   4: 2290656.739 ops/s
# Warmup Iteration   5: 2823248.882 ops/s
# Warmup Iteration   6: 2780098.072 ops/s
# Warmup Iteration   7: 2902542.504 ops/s
# Warmup Iteration   8: 2861175.599 ops/s
# Warmup Iteration   9: 2957846.619 ops/s
# Warmup Iteration  10: 3032447.857 ops/s
# Warmup Iteration  11: 2952595.146 ops/s
# Warmup Iteration  12: 2933340.284 ops/s
# Warmup Iteration  13: 2845109.689 ops/s
# Warmup Iteration  14: 2912047.158 ops/s
# Warmup Iteration  15: 2860236.347 ops/s
# Warmup Iteration  16: 2964393.865 ops/s
# Warmup Iteration  17: 2852232.412 ops/s
# Warmup Iteration  18: 2822975.090 ops/s
# Warmup Iteration  19: 2857010.490 ops/s
# Warmup Iteration  20: 2915086.134 ops/s
# Warmup Iteration  21: 3033348.609 ops/s
# Warmup Iteration  22: 2971776.788 ops/s
# Warmup Iteration  23: 2840547.915 ops/s
# Warmup Iteration  24: 2981352.477 ops/s
# Warmup Iteration  25: 3046647.989 ops/s
# Warmup Iteration  26: 3045287.813 ops/s
# Warmup Iteration  27: 2959926.239 ops/s
# Warmup Iteration  28: 2763761.177 ops/s
# Warmup Iteration  29: 2771461.744 ops/s
# Warmup Iteration  30: 2759937.787 ops/s
Iteration   1: 2842828.834 ops/s
Iteration   2: 2864994.895 ops/s
Iteration   3: 2972943.284 ops/s
Iteration   4: 2908553.800 ops/s
Iteration   5: 2878520.981 ops/s
Iteration   6: 2894401.978 ops/s
Iteration   7: 2916703.030 ops/s
Iteration   8: 2885258.157 ops/s
Iteration   9: 2866463.776 ops/s
Iteration  10: 2921133.957 ops/s
Iteration  11: 2771660.033 ops/s
Iteration  12: 2847451.772 ops/s
Iteration  13: 2891593.110 ops/s
Iteration  14: 2872920.305 ops/s
Iteration  15: 2947482.739 ops/s
Iteration  16: 3046167.320 ops/s
Iteration  17: 3047113.542 ops/s
Iteration  18: 2955929.093 ops/s
Iteration  19: 2899550.353 ops/s
Iteration  20: 2768796.559 ops/s
Iteration  21: 2802287.691 ops/s
Iteration  22: 3031584.054 ops/s
Iteration  23: 3028311.338 ops/s
Iteration  24: 3045416.639 ops/s
Iteration  25: 3039824.282 ops/s
Iteration  26: 2935168.613 ops/s
Iteration  27: 2867515.810 ops/s
Iteration  28: 2841580.074 ops/s
Iteration  29: 2884506.505 ops/s
Iteration  30: 2779523.172 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testNewMapWithKeyValue":
  2908539.523 ±(99.9%) 55536.953 ops/s [Average]
  (min, avg, max) = (2768796.559, 2908539.523, 3047113.542), stdev = 83125.103
  CI (99.9%): [2853002.570, 2964076.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testNewMapWithKeyValue  thrpt   30  2908539.523 ± 55536.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 798226.750 ops/s
# Warmup Iteration   2: 2107826.450 ops/s
# Warmup Iteration   3: 1714050.641 ops/s
# Warmup Iteration   4: 2127909.913 ops/s
# Warmup Iteration   5: 2099098.676 ops/s
# Warmup Iteration   6: 2064349.376 ops/s
# Warmup Iteration   7: 2069922.400 ops/s
# Warmup Iteration   8: 2111002.313 ops/s
# Warmup Iteration   9: 2078019.632 ops/s
# Warmup Iteration  10: 2050894.520 ops/s
# Warmup Iteration  11: 2145697.439 ops/s
# Warmup Iteration  12: 2105029.535 ops/s
# Warmup Iteration  13: 2052591.688 ops/s
# Warmup Iteration  14: 2056538.352 ops/s
# Warmup Iteration  15: 2047033.869 ops/s
# Warmup Iteration  16: 2067993.696 ops/s
# Warmup Iteration  17: 2061322.708 ops/s
# Warmup Iteration  18: 2111029.682 ops/s
# Warmup Iteration  19: 2070916.919 ops/s
# Warmup Iteration  20: 2064481.866 ops/s
# Warmup Iteration  21: 2067026.760 ops/s
# Warmup Iteration  22: 2101091.221 ops/s
# Warmup Iteration  23: 2071079.543 ops/s
# Warmup Iteration  24: 2073038.771 ops/s
# Warmup Iteration  25: 2095848.232 ops/s
# Warmup Iteration  26: 2079871.004 ops/s
# Warmup Iteration  27: 2122448.244 ops/s
# Warmup Iteration  28: 2131649.791 ops/s
# Warmup Iteration  29: 2092324.330 ops/s
# Warmup Iteration  30: 2123001.257 ops/s
Iteration   1: 2065750.176 ops/s
Iteration   2: 2167074.817 ops/s
Iteration   3: 2270514.023 ops/s
Iteration   4: 2226692.894 ops/s
Iteration   5: 2123727.448 ops/s
Iteration   6: 2273515.091 ops/s
Iteration   7: 2112442.425 ops/s
Iteration   8: 2222034.006 ops/s
Iteration   9: 2271334.552 ops/s
Iteration  10: 2266075.280 ops/s
Iteration  11: 2262540.225 ops/s
Iteration  12: 2148548.635 ops/s
Iteration  13: 2090372.535 ops/s
Iteration  14: 2243672.326 ops/s
Iteration  15: 2132184.211 ops/s
Iteration  16: 2097674.612 ops/s
Iteration  17: 2123660.881 ops/s
Iteration  18: 2170066.271 ops/s
Iteration  19: 2135279.284 ops/s
Iteration  20: 2276852.807 ops/s
Iteration  21: 2165260.703 ops/s
Iteration  22: 2224522.641 ops/s
Iteration  23: 2130121.803 ops/s
Iteration  24: 2116980.263 ops/s
Iteration  25: 2083356.244 ops/s
Iteration  26: 2101579.575 ops/s
Iteration  27: 2076748.166 ops/s
Iteration  28: 2159044.457 ops/s
Iteration  29: 2122285.754 ops/s
Iteration  30: 2048847.727 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testToString":
  2163625.328 ±(99.9%) 47878.588 ops/s [Average]
  (min, avg, max) = (2048847.727, 2163625.328, 2276852.807), stdev = 71662.422
  CI (99.9%): [2115746.740, 2211503.916] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_testToString  thrpt   30  2163625.328 ± 47878.588  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_test_toString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_test_toString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1063623.347 ops/s
# Warmup Iteration   2: 2558500.993 ops/s
# Warmup Iteration   3: 2524887.990 ops/s
# Warmup Iteration   4: 2098401.022 ops/s
# Warmup Iteration   5: 2454323.392 ops/s
# Warmup Iteration   6: 2462814.884 ops/s
# Warmup Iteration   7: 2497340.028 ops/s
# Warmup Iteration   8: 2488041.037 ops/s
# Warmup Iteration   9: 2479238.425 ops/s
# Warmup Iteration  10: 2482296.460 ops/s
# Warmup Iteration  11: 2501027.614 ops/s
# Warmup Iteration  12: 2468401.508 ops/s
# Warmup Iteration  13: 2480424.476 ops/s
# Warmup Iteration  14: 2475338.900 ops/s
# Warmup Iteration  15: 2459774.342 ops/s
# Warmup Iteration  16: 2462103.930 ops/s
# Warmup Iteration  17: 2508087.687 ops/s
# Warmup Iteration  18: 2487717.233 ops/s
# Warmup Iteration  19: 2505437.697 ops/s
# Warmup Iteration  20: 2484620.773 ops/s
# Warmup Iteration  21: 2504420.976 ops/s
# Warmup Iteration  22: 2560093.682 ops/s
# Warmup Iteration  23: 2503697.090 ops/s
# Warmup Iteration  24: 2541256.018 ops/s
# Warmup Iteration  25: 2493839.559 ops/s
# Warmup Iteration  26: 2484356.722 ops/s
# Warmup Iteration  27: 2514264.478 ops/s
# Warmup Iteration  28: 2536920.041 ops/s
# Warmup Iteration  29: 2496481.724 ops/s
# Warmup Iteration  30: 2605029.523 ops/s
Iteration   1: 2571313.692 ops/s
Iteration   2: 2526977.547 ops/s
Iteration   3: 2468883.555 ops/s
Iteration   4: 2613708.607 ops/s
Iteration   5: 2595652.891 ops/s
Iteration   6: 2603804.546 ops/s
Iteration   7: 2565644.671 ops/s
Iteration   8: 2611824.676 ops/s
Iteration   9: 2573782.917 ops/s
Iteration  10: 2505004.138 ops/s
Iteration  11: 2469021.792 ops/s
Iteration  12: 2521731.959 ops/s
Iteration  13: 2485170.241 ops/s
Iteration  14: 2494713.374 ops/s
Iteration  15: 2502921.972 ops/s
Iteration  16: 2475162.755 ops/s
Iteration  17: 2490066.353 ops/s
Iteration  18: 2463339.106 ops/s
Iteration  19: 2486639.745 ops/s
Iteration  20: 2518056.183 ops/s
Iteration  21: 2475986.557 ops/s
Iteration  22: 2583253.594 ops/s
Iteration  23: 2735113.673 ops/s
Iteration  24: 2559347.806 ops/s
Iteration  25: 2572989.426 ops/s
Iteration  26: 2572081.578 ops/s
Iteration  27: 2616141.183 ops/s
Iteration  28: 2495657.442 ops/s
Iteration  29: 2427180.176 ops/s
Iteration  30: 2617169.689 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_test_toString":
  2539944.728 ±(99.9%) 44330.589 ops/s [Average]
  (min, avg, max) = (2427180.176, 2539944.728, 2735113.673), stdev = 66351.943
  CI (99.9%): [2495614.139, 2584275.317] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_test_toString  thrpt   30  2539944.728 ± 44330.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 613508.533 ops/s
# Warmup Iteration   2: 1208948.652 ops/s
# Warmup Iteration   3: 1329238.360 ops/s
# Warmup Iteration   4: 1355479.397 ops/s
# Warmup Iteration   5: 1116624.728 ops/s
# Warmup Iteration   6: 1295669.140 ops/s
# Warmup Iteration   7: 1341086.245 ops/s
# Warmup Iteration   8: 1408298.890 ops/s
# Warmup Iteration   9: 1344273.109 ops/s
# Warmup Iteration  10: 1392875.016 ops/s
# Warmup Iteration  11: 1307157.896 ops/s
# Warmup Iteration  12: 1314902.654 ops/s
# Warmup Iteration  13: 1317784.825 ops/s
# Warmup Iteration  14: 1315401.050 ops/s
# Warmup Iteration  15: 1308128.891 ops/s
# Warmup Iteration  16: 1352095.967 ops/s
# Warmup Iteration  17: 1370284.062 ops/s
# Warmup Iteration  18: 1336009.308 ops/s
# Warmup Iteration  19: 1328725.227 ops/s
# Warmup Iteration  20: 1339965.004 ops/s
# Warmup Iteration  21: 1348610.962 ops/s
# Warmup Iteration  22: 1339394.146 ops/s
# Warmup Iteration  23: 1365694.506 ops/s
# Warmup Iteration  24: 1351352.731 ops/s
# Warmup Iteration  25: 1305447.041 ops/s
# Warmup Iteration  26: 1327559.808 ops/s
# Warmup Iteration  27: 1329335.987 ops/s
# Warmup Iteration  28: 1330197.511 ops/s
# Warmup Iteration  29: 1300153.948 ops/s
# Warmup Iteration  30: 1348917.546 ops/s
Iteration   1: 1322617.143 ops/s
Iteration   2: 1319926.181 ops/s
Iteration   3: 1330181.905 ops/s
Iteration   4: 1338210.946 ops/s
Iteration   5: 1319333.831 ops/s
Iteration   6: 1313074.406 ops/s
Iteration   7: 1301915.965 ops/s
Iteration   8: 1413926.193 ops/s
Iteration   9: 1315847.856 ops/s
Iteration  10: 1303432.694 ops/s
Iteration  11: 1323182.665 ops/s
Iteration  12: 1366073.969 ops/s
Iteration  13: 1335825.833 ops/s
Iteration  14: 1311592.132 ops/s
Iteration  15: 1408888.876 ops/s
Iteration  16: 1440822.522 ops/s
Iteration  17: 1369983.177 ops/s
Iteration  18: 1364594.216 ops/s
Iteration  19: 1326394.632 ops/s
Iteration  20: 1367378.263 ops/s
Iteration  21: 1371093.119 ops/s
Iteration  22: 1383960.994 ops/s
Iteration  23: 1378440.063 ops/s
Iteration  24: 1339949.621 ops/s
Iteration  25: 1325764.630 ops/s
Iteration  26: 1342794.192 ops/s
Iteration  27: 1316284.272 ops/s
Iteration  28: 1326836.539 ops/s
Iteration  29: 1380824.540 ops/s
Iteration  30: 1371281.590 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toArray":
  1347681.099 ±(99.9%) 23581.455 ops/s [Average]
  (min, avg, max) = (1301915.965, 1347681.099, 1440822.522), stdev = 35295.614
  CI (99.9%): [1324099.644, 1371262.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toArray  thrpt   30  1347681.099 ± 23581.455  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702731.464 ops/s
# Warmup Iteration   2: 1318934.452 ops/s
# Warmup Iteration   3: 1455379.355 ops/s
# Warmup Iteration   4: 1460799.077 ops/s
# Warmup Iteration   5: 1186802.274 ops/s
# Warmup Iteration   6: 1434148.592 ops/s
# Warmup Iteration   7: 1424260.266 ops/s
# Warmup Iteration   8: 1555267.057 ops/s
# Warmup Iteration   9: 1542507.900 ops/s
# Warmup Iteration  10: 1435849.375 ops/s
# Warmup Iteration  11: 1455171.898 ops/s
# Warmup Iteration  12: 1552112.091 ops/s
# Warmup Iteration  13: 1543650.178 ops/s
# Warmup Iteration  14: 1505762.096 ops/s
# Warmup Iteration  15: 1443370.450 ops/s
# Warmup Iteration  16: 1457261.757 ops/s
# Warmup Iteration  17: 1493574.290 ops/s
# Warmup Iteration  18: 1580491.846 ops/s
# Warmup Iteration  19: 1513446.777 ops/s
# Warmup Iteration  20: 1506516.179 ops/s
# Warmup Iteration  21: 1437949.592 ops/s
# Warmup Iteration  22: 1443707.847 ops/s
# Warmup Iteration  23: 1512729.456 ops/s
# Warmup Iteration  24: 1455126.813 ops/s
# Warmup Iteration  25: 1525994.118 ops/s
# Warmup Iteration  26: 1528660.388 ops/s
# Warmup Iteration  27: 1549269.356 ops/s
# Warmup Iteration  28: 1581031.275 ops/s
# Warmup Iteration  29: 1541125.432 ops/s
# Warmup Iteration  30: 1522939.083 ops/s
Iteration   1: 1519462.084 ops/s
Iteration   2: 1527376.242 ops/s
Iteration   3: 1506273.447 ops/s
Iteration   4: 1591627.423 ops/s
Iteration   5: 1581138.484 ops/s
Iteration   6: 1519541.563 ops/s
Iteration   7: 1588745.000 ops/s
Iteration   8: 1515700.768 ops/s
Iteration   9: 1580397.662 ops/s
Iteration  10: 1452896.203 ops/s
Iteration  11: 1452426.730 ops/s
Iteration  12: 1565847.168 ops/s
Iteration  13: 1529485.407 ops/s
Iteration  14: 1525644.973 ops/s
Iteration  15: 1550174.759 ops/s
Iteration  16: 1480786.593 ops/s
Iteration  17: 1441799.407 ops/s
Iteration  18: 1584752.667 ops/s
Iteration  19: 1487467.198 ops/s
Iteration  20: 1593041.519 ops/s
Iteration  21: 1533296.654 ops/s
Iteration  22: 1456713.975 ops/s
Iteration  23: 1494693.685 ops/s
Iteration  24: 1592184.216 ops/s
Iteration  25: 1594539.731 ops/s
Iteration  26: 1543286.697 ops/s
Iteration  27: 1505940.915 ops/s
Iteration  28: 1458759.058 ops/s
Iteration  29: 1425794.240 ops/s
Iteration  30: 1537337.792 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toBag":
  1524571.075 ±(99.9%) 34331.547 ops/s [Average]
  (min, avg, max) = (1425794.240, 1524571.075, 1594539.731), stdev = 51385.848
  CI (99.9%): [1490239.528, 1558902.623] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toBag  thrpt   30  1524571.075 ± 34331.547  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747000.341 ops/s
# Warmup Iteration   2: 1946299.135 ops/s
# Warmup Iteration   3: 1987937.898 ops/s
# Warmup Iteration   4: 1679512.158 ops/s
# Warmup Iteration   5: 2082295.182 ops/s
# Warmup Iteration   6: 2047731.477 ops/s
# Warmup Iteration   7: 2119187.807 ops/s
# Warmup Iteration   8: 2060939.639 ops/s
# Warmup Iteration   9: 2047934.148 ops/s
# Warmup Iteration  10: 1971652.024 ops/s
# Warmup Iteration  11: 1977438.374 ops/s
# Warmup Iteration  12: 1947234.475 ops/s
# Warmup Iteration  13: 1958989.702 ops/s
# Warmup Iteration  14: 2074086.069 ops/s
# Warmup Iteration  15: 1988364.455 ops/s
# Warmup Iteration  16: 1954882.334 ops/s
# Warmup Iteration  17: 1976886.199 ops/s
# Warmup Iteration  18: 1991229.621 ops/s
# Warmup Iteration  19: 1934309.519 ops/s
# Warmup Iteration  20: 2004550.828 ops/s
# Warmup Iteration  21: 2062998.989 ops/s
# Warmup Iteration  22: 2052736.815 ops/s
# Warmup Iteration  23: 1992731.386 ops/s
# Warmup Iteration  24: 1992076.287 ops/s
# Warmup Iteration  25: 1978139.944 ops/s
# Warmup Iteration  26: 1958582.780 ops/s
# Warmup Iteration  27: 2054981.840 ops/s
# Warmup Iteration  28: 1951701.918 ops/s
# Warmup Iteration  29: 1961743.264 ops/s
# Warmup Iteration  30: 2093238.620 ops/s
Iteration   1: 1964921.925 ops/s
Iteration   2: 1966453.991 ops/s
Iteration   3: 2025320.553 ops/s
Iteration   4: 2015786.299 ops/s
Iteration   5: 2032410.085 ops/s
Iteration   6: 2067976.961 ops/s
Iteration   7: 2125425.464 ops/s
Iteration   8: 1919065.120 ops/s
Iteration   9: 1947885.784 ops/s
Iteration  10: 1948750.174 ops/s
Iteration  11: 1950271.021 ops/s
Iteration  12: 2029539.962 ops/s
Iteration  13: 1946241.474 ops/s
Iteration  14: 1998263.694 ops/s
Iteration  15: 1936453.108 ops/s
Iteration  16: 1963404.851 ops/s
Iteration  17: 1999661.988 ops/s
Iteration  18: 1961915.733 ops/s
Iteration  19: 1927811.941 ops/s
Iteration  20: 1934814.321 ops/s
Iteration  21: 1952998.817 ops/s
Iteration  22: 1948980.568 ops/s
Iteration  23: 2006106.209 ops/s
Iteration  24: 1989706.383 ops/s
Iteration  25: 1943822.701 ops/s
Iteration  26: 1977642.171 ops/s
Iteration  27: 2035051.458 ops/s
Iteration  28: 1997569.158 ops/s
Iteration  29: 1964338.101 ops/s
Iteration  30: 2009231.527 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toImmutable":
  1982927.385 ±(99.9%) 30773.995 ops/s [Average]
  (min, avg, max) = (1919065.120, 1982927.385, 2125425.464), stdev = 46061.070
  CI (99.9%): [1952153.390, 2013701.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toImmutable  thrpt   30  1982927.385 ± 30773.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1312151.179 ops/s
# Warmup Iteration   2: 3481030.300 ops/s
# Warmup Iteration   3: 3487016.975 ops/s
# Warmup Iteration   4: 2947079.187 ops/s
# Warmup Iteration   5: 3507193.787 ops/s
# Warmup Iteration   6: 3535057.924 ops/s
# Warmup Iteration   7: 3780697.106 ops/s
# Warmup Iteration   8: 3489138.864 ops/s
# Warmup Iteration   9: 3496921.714 ops/s
# Warmup Iteration  10: 3469536.652 ops/s
# Warmup Iteration  11: 3482845.308 ops/s
# Warmup Iteration  12: 3514669.444 ops/s
# Warmup Iteration  13: 3495209.014 ops/s
# Warmup Iteration  14: 3468894.890 ops/s
# Warmup Iteration  15: 3469731.703 ops/s
# Warmup Iteration  16: 3531829.846 ops/s
# Warmup Iteration  17: 3465709.699 ops/s
# Warmup Iteration  18: 3438625.397 ops/s
# Warmup Iteration  19: 3453938.455 ops/s
# Warmup Iteration  20: 3457202.040 ops/s
# Warmup Iteration  21: 3552954.167 ops/s
# Warmup Iteration  22: 3552312.636 ops/s
# Warmup Iteration  23: 3501668.009 ops/s
# Warmup Iteration  24: 3568439.888 ops/s
# Warmup Iteration  25: 3510217.043 ops/s
# Warmup Iteration  26: 3485046.112 ops/s
# Warmup Iteration  27: 3506316.438 ops/s
# Warmup Iteration  28: 3503584.015 ops/s
# Warmup Iteration  29: 3477671.238 ops/s
# Warmup Iteration  30: 3461258.214 ops/s
Iteration   1: 3571466.662 ops/s
Iteration   2: 3657481.564 ops/s
Iteration   3: 3442607.668 ops/s
Iteration   4: 3463301.280 ops/s
Iteration   5: 3535901.803 ops/s
Iteration   6: 3515929.944 ops/s
Iteration   7: 3542499.695 ops/s
Iteration   8: 3547893.659 ops/s
Iteration   9: 3526951.330 ops/s
Iteration  10: 3498723.319 ops/s
Iteration  11: 3527253.527 ops/s
Iteration  12: 3555363.722 ops/s
Iteration  13: 3447621.384 ops/s
Iteration  14: 3479340.644 ops/s
Iteration  15: 3456367.013 ops/s
Iteration  16: 3473071.181 ops/s
Iteration  17: 3603118.259 ops/s
Iteration  18: 3556125.041 ops/s
Iteration  19: 3455462.282 ops/s
Iteration  20: 3522545.181 ops/s
Iteration  21: 3494167.235 ops/s
Iteration  22: 3504155.770 ops/s
Iteration  23: 3559466.685 ops/s
Iteration  24: 3454476.210 ops/s
Iteration  25: 3468595.107 ops/s
Iteration  26: 3478561.048 ops/s
Iteration  27: 3515744.986 ops/s
Iteration  28: 3476530.958 ops/s
Iteration  29: 3487083.795 ops/s
Iteration  30: 3499881.201 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toList":
  3510589.605 ±(99.9%) 33176.569 ops/s [Average]
  (min, avg, max) = (3442607.668, 3510589.605, 3657481.564), stdev = 49657.131
  CI (99.9%): [3477413.036, 3543766.175] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toList  thrpt   30  3510589.605 ± 33176.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1554445.031 ops/s
# Warmup Iteration   2: 3659342.765 ops/s
# Warmup Iteration   3: 3689790.218 ops/s
# Warmup Iteration   4: 3025574.180 ops/s
# Warmup Iteration   5: 3664819.635 ops/s
# Warmup Iteration   6: 3813073.993 ops/s
# Warmup Iteration   7: 3665881.235 ops/s
# Warmup Iteration   8: 3711829.464 ops/s
# Warmup Iteration   9: 3739702.482 ops/s
# Warmup Iteration  10: 3697678.917 ops/s
# Warmup Iteration  11: 3736421.252 ops/s
# Warmup Iteration  12: 3675116.671 ops/s
# Warmup Iteration  13: 3682640.924 ops/s
# Warmup Iteration  14: 3694065.759 ops/s
# Warmup Iteration  15: 3702919.851 ops/s
# Warmup Iteration  16: 3698541.366 ops/s
# Warmup Iteration  17: 3651178.575 ops/s
# Warmup Iteration  18: 3647817.547 ops/s
# Warmup Iteration  19: 3678676.258 ops/s
# Warmup Iteration  20: 3691543.057 ops/s
# Warmup Iteration  21: 3721109.526 ops/s
# Warmup Iteration  22: 3684909.208 ops/s
# Warmup Iteration  23: 3666562.040 ops/s
# Warmup Iteration  24: 3713738.822 ops/s
# Warmup Iteration  25: 3664561.614 ops/s
# Warmup Iteration  26: 3704960.519 ops/s
# Warmup Iteration  27: 3633586.269 ops/s
# Warmup Iteration  28: 3652615.206 ops/s
# Warmup Iteration  29: 3683825.267 ops/s
# Warmup Iteration  30: 3706266.506 ops/s
Iteration   1: 3754224.367 ops/s
Iteration   2: 3705434.735 ops/s
Iteration   3: 3678198.088 ops/s
Iteration   4: 3654684.849 ops/s
Iteration   5: 3747158.011 ops/s
Iteration   6: 3753298.399 ops/s
Iteration   7: 3687742.364 ops/s
Iteration   8: 3677884.497 ops/s
Iteration   9: 3641497.746 ops/s
Iteration  10: 3720834.726 ops/s
Iteration  11: 3858882.447 ops/s
Iteration  12: 3798917.542 ops/s
Iteration  13: 3660977.363 ops/s
Iteration  14: 3646796.406 ops/s
Iteration  15: 3705996.614 ops/s
Iteration  16: 3839118.013 ops/s
Iteration  17: 3869999.858 ops/s
Iteration  18: 3669052.952 ops/s
Iteration  19: 3759085.279 ops/s
Iteration  20: 3674970.954 ops/s
Iteration  21: 3846628.450 ops/s
Iteration  22: 3648810.758 ops/s
Iteration  23: 3677924.814 ops/s
Iteration  24: 3681086.133 ops/s
Iteration  25: 3733328.855 ops/s
Iteration  26: 3701287.553 ops/s
Iteration  27: 3697373.746 ops/s
Iteration  28: 3663623.271 ops/s
Iteration  29: 3685240.675 ops/s
Iteration  30: 3875588.075 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toMap":
  3723854.918 ±(99.9%) 47920.598 ops/s [Average]
  (min, avg, max) = (3641497.746, 3723854.918, 3875588.075), stdev = 71725.300
  CI (99.9%): [3675934.320, 3771775.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toMap  thrpt   30  3723854.918 ± 47920.598  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1640212.907 ops/s
# Warmup Iteration   2: 3783292.184 ops/s
# Warmup Iteration   3: 3259278.929 ops/s
# Warmup Iteration   4: 3743492.806 ops/s
# Warmup Iteration   5: 3826278.003 ops/s
# Warmup Iteration   6: 3878237.223 ops/s
# Warmup Iteration   7: 3803574.241 ops/s
# Warmup Iteration   8: 3827951.415 ops/s
# Warmup Iteration   9: 3791209.509 ops/s
# Warmup Iteration  10: 3901715.191 ops/s
# Warmup Iteration  11: 3841564.926 ops/s
# Warmup Iteration  12: 3715969.457 ops/s
# Warmup Iteration  13: 3894891.967 ops/s
# Warmup Iteration  14: 3838854.893 ops/s
# Warmup Iteration  15: 3835062.364 ops/s
# Warmup Iteration  16: 3852823.307 ops/s
# Warmup Iteration  17: 3824654.501 ops/s
# Warmup Iteration  18: 3780402.873 ops/s
# Warmup Iteration  19: 3834590.911 ops/s
# Warmup Iteration  20: 3806498.636 ops/s
# Warmup Iteration  21: 3837853.094 ops/s
# Warmup Iteration  22: 3778348.116 ops/s
# Warmup Iteration  23: 3807164.705 ops/s
# Warmup Iteration  24: 3774345.225 ops/s
# Warmup Iteration  25: 3842022.292 ops/s
# Warmup Iteration  26: 3830614.757 ops/s
# Warmup Iteration  27: 3832607.007 ops/s
# Warmup Iteration  28: 3917361.782 ops/s
# Warmup Iteration  29: 3831845.144 ops/s
# Warmup Iteration  30: 3883931.612 ops/s
Iteration   1: 3942382.827 ops/s
Iteration   2: 3797234.627 ops/s
Iteration   3: 3766244.531 ops/s
Iteration   4: 3962432.293 ops/s
Iteration   5: 3819486.225 ops/s
Iteration   6: 3769208.689 ops/s
Iteration   7: 3802479.358 ops/s
Iteration   8: 3803339.882 ops/s
Iteration   9: 3781246.694 ops/s
Iteration  10: 3909142.594 ops/s
Iteration  11: 3804481.403 ops/s
Iteration  12: 3887980.244 ops/s
Iteration  13: 4007438.085 ops/s
Iteration  14: 3928354.042 ops/s
Iteration  15: 3775691.897 ops/s
Iteration  16: 3833021.641 ops/s
Iteration  17: 3804181.611 ops/s
Iteration  18: 3755143.949 ops/s
Iteration  19: 3758639.178 ops/s
Iteration  20: 3785915.281 ops/s
Iteration  21: 3774355.967 ops/s
Iteration  22: 3765940.804 ops/s
Iteration  23: 3761402.595 ops/s
Iteration  24: 3817795.412 ops/s
Iteration  25: 3742812.461 ops/s
Iteration  26: 3914142.265 ops/s
Iteration  27: 3783368.291 ops/s
Iteration  28: 3779288.293 ops/s
Iteration  29: 3728611.428 ops/s
Iteration  30: 3798446.572 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSet":
  3818673.638 ±(99.9%) 47980.640 ops/s [Average]
  (min, avg, max) = (3728611.428, 3818673.638, 4007438.085), stdev = 71815.169
  CI (99.9%): [3770692.998, 3866654.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSet  thrpt   30  3818673.638 ± 47980.640  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 238193.361 ops/s
# Warmup Iteration   2: 413722.914 ops/s
# Warmup Iteration   3: 485931.969 ops/s
# Warmup Iteration   4: 470534.224 ops/s
# Warmup Iteration   5: 482913.864 ops/s
# Warmup Iteration   6: 391243.125 ops/s
# Warmup Iteration   7: 468403.521 ops/s
# Warmup Iteration   8: 475393.484 ops/s
# Warmup Iteration   9: 487070.415 ops/s
# Warmup Iteration  10: 486334.972 ops/s
# Warmup Iteration  11: 472156.611 ops/s
# Warmup Iteration  12: 479952.849 ops/s
# Warmup Iteration  13: 488905.549 ops/s
# Warmup Iteration  14: 485356.950 ops/s
# Warmup Iteration  15: 494882.469 ops/s
# Warmup Iteration  16: 492645.651 ops/s
# Warmup Iteration  17: 487497.783 ops/s
# Warmup Iteration  18: 489906.347 ops/s
# Warmup Iteration  19: 492012.231 ops/s
# Warmup Iteration  20: 489945.643 ops/s
# Warmup Iteration  21: 491302.299 ops/s
# Warmup Iteration  22: 472903.535 ops/s
# Warmup Iteration  23: 488570.719 ops/s
# Warmup Iteration  24: 479624.254 ops/s
# Warmup Iteration  25: 485006.260 ops/s
# Warmup Iteration  26: 475107.885 ops/s
# Warmup Iteration  27: 477309.126 ops/s
# Warmup Iteration  28: 480200.321 ops/s
# Warmup Iteration  29: 468716.713 ops/s
# Warmup Iteration  30: 475064.057 ops/s
Iteration   1: 486471.068 ops/s
Iteration   2: 489877.266 ops/s
Iteration   3: 493622.075 ops/s
Iteration   4: 493093.819 ops/s
Iteration   5: 490239.606 ops/s
Iteration   6: 486498.087 ops/s
Iteration   7: 488253.188 ops/s
Iteration   8: 486521.919 ops/s
Iteration   9: 474358.749 ops/s
Iteration  10: 478772.967 ops/s
Iteration  11: 484340.033 ops/s
Iteration  12: 474009.556 ops/s
Iteration  13: 474033.383 ops/s
Iteration  14: 472175.400 ops/s
Iteration  15: 479316.824 ops/s
Iteration  16: 471603.988 ops/s
Iteration  17: 473501.473 ops/s
Iteration  18: 484612.971 ops/s
Iteration  19: 489433.617 ops/s
Iteration  20: 499291.606 ops/s
Iteration  21: 489312.424 ops/s
Iteration  22: 480107.402 ops/s
Iteration  23: 468065.062 ops/s
Iteration  24: 467436.341 ops/s
Iteration  25: 476272.208 ops/s
Iteration  26: 484870.893 ops/s
Iteration  27: 476382.080 ops/s
Iteration  28: 470141.835 ops/s
Iteration  29: 495328.200 ops/s
Iteration  30: 494268.975 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedBag":
  482407.101 ±(99.9%) 5994.202 ops/s [Average]
  (min, avg, max) = (467436.341, 482407.101, 499291.606), stdev = 8971.840
  CI (99.9%): [476412.899, 488401.302] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedBag  thrpt   30  482407.101 ± 5994.202  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 255563.300 ops/s
# Warmup Iteration   2: 577284.057 ops/s
# Warmup Iteration   3: 613239.141 ops/s
# Warmup Iteration   4: 598224.488 ops/s
# Warmup Iteration   5: 512931.235 ops/s
# Warmup Iteration   6: 601621.865 ops/s
# Warmup Iteration   7: 606927.402 ops/s
# Warmup Iteration   8: 600417.510 ops/s
# Warmup Iteration   9: 604212.591 ops/s
# Warmup Iteration  10: 605840.302 ops/s
# Warmup Iteration  11: 600852.164 ops/s
# Warmup Iteration  12: 604409.913 ops/s
# Warmup Iteration  13: 615972.565 ops/s
# Warmup Iteration  14: 600206.019 ops/s
# Warmup Iteration  15: 607235.294 ops/s
# Warmup Iteration  16: 608694.638 ops/s
# Warmup Iteration  17: 602377.309 ops/s
# Warmup Iteration  18: 603706.009 ops/s
# Warmup Iteration  19: 597284.530 ops/s
# Warmup Iteration  20: 600810.909 ops/s
# Warmup Iteration  21: 605702.879 ops/s
# Warmup Iteration  22: 609626.193 ops/s
# Warmup Iteration  23: 607542.399 ops/s
# Warmup Iteration  24: 600704.599 ops/s
# Warmup Iteration  25: 605318.653 ops/s
# Warmup Iteration  26: 607922.806 ops/s
# Warmup Iteration  27: 623457.328 ops/s
# Warmup Iteration  28: 610552.467 ops/s
# Warmup Iteration  29: 600039.532 ops/s
# Warmup Iteration  30: 629500.783 ops/s
Iteration   1: 611352.906 ops/s
Iteration   2: 599435.053 ops/s
Iteration   3: 606843.110 ops/s
Iteration   4: 595407.075 ops/s
Iteration   5: 608077.650 ops/s
Iteration   6: 610830.357 ops/s
Iteration   7: 592477.299 ops/s
Iteration   8: 604651.830 ops/s
Iteration   9: 607435.632 ops/s
Iteration  10: 607550.304 ops/s
Iteration  11: 610497.013 ops/s
Iteration  12: 604172.570 ops/s
Iteration  13: 600183.176 ops/s
Iteration  14: 626304.942 ops/s
Iteration  15: 602543.986 ops/s
Iteration  16: 612324.728 ops/s
Iteration  17: 589287.763 ops/s
Iteration  18: 603179.906 ops/s
Iteration  19: 606377.981 ops/s
Iteration  20: 589418.776 ops/s
Iteration  21: 606129.540 ops/s
Iteration  22: 597776.399 ops/s
Iteration  23: 604054.760 ops/s
Iteration  24: 614353.904 ops/s
Iteration  25: 604167.095 ops/s
Iteration  26: 608427.633 ops/s
Iteration  27: 609873.495 ops/s
Iteration  28: 605233.978 ops/s
Iteration  29: 601943.827 ops/s
Iteration  30: 597458.671 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedBagBy":
  604592.379 ±(99.9%) 5087.377 ops/s [Average]
  (min, avg, max) = (589287.763, 604592.379, 626304.942), stdev = 7614.548
  CI (99.9%): [599505.001, 609679.756] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  604592.379 ± 5087.377  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1093314.060 ops/s
# Warmup Iteration   2: 2506153.505 ops/s
# Warmup Iteration   3: 2644910.704 ops/s
# Warmup Iteration   4: 2441251.052 ops/s
# Warmup Iteration   5: 2291616.002 ops/s
# Warmup Iteration   6: 2629941.003 ops/s
# Warmup Iteration   7: 2661349.537 ops/s
# Warmup Iteration   8: 2626824.265 ops/s
# Warmup Iteration   9: 2624016.048 ops/s
# Warmup Iteration  10: 2598430.008 ops/s
# Warmup Iteration  11: 2629318.326 ops/s
# Warmup Iteration  12: 2591976.556 ops/s
# Warmup Iteration  13: 2618913.012 ops/s
# Warmup Iteration  14: 2633218.426 ops/s
# Warmup Iteration  15: 2565433.217 ops/s
# Warmup Iteration  16: 2679340.040 ops/s
# Warmup Iteration  17: 2559562.701 ops/s
# Warmup Iteration  18: 2685230.727 ops/s
# Warmup Iteration  19: 2591673.028 ops/s
# Warmup Iteration  20: 2620892.808 ops/s
# Warmup Iteration  21: 2613726.599 ops/s
# Warmup Iteration  22: 2587473.382 ops/s
# Warmup Iteration  23: 2611508.274 ops/s
# Warmup Iteration  24: 2698060.015 ops/s
# Warmup Iteration  25: 2695437.877 ops/s
# Warmup Iteration  26: 2674491.675 ops/s
# Warmup Iteration  27: 2693354.431 ops/s
# Warmup Iteration  28: 2674394.086 ops/s
# Warmup Iteration  29: 2605268.630 ops/s
# Warmup Iteration  30: 2580891.914 ops/s
Iteration   1: 2590751.914 ops/s
Iteration   2: 2613742.010 ops/s
Iteration   3: 2633420.041 ops/s
Iteration   4: 2607001.922 ops/s
Iteration   5: 2730871.300 ops/s
Iteration   6: 2716975.056 ops/s
Iteration   7: 2617451.805 ops/s
Iteration   8: 2692904.330 ops/s
Iteration   9: 2636975.078 ops/s
Iteration  10: 2614680.028 ops/s
Iteration  11: 2647811.478 ops/s
Iteration  12: 2604643.746 ops/s
Iteration  13: 2693477.556 ops/s
Iteration  14: 2675354.981 ops/s
Iteration  15: 2624072.371 ops/s
Iteration  16: 2640652.796 ops/s
Iteration  17: 2524673.668 ops/s
Iteration  18: 2648112.785 ops/s
Iteration  19: 2594619.752 ops/s
Iteration  20: 2629283.966 ops/s
Iteration  21: 2644528.576 ops/s
Iteration  22: 2705907.675 ops/s
Iteration  23: 2673934.785 ops/s
Iteration  24: 2597833.171 ops/s
Iteration  25: 2587169.858 ops/s
Iteration  26: 2678690.473 ops/s
Iteration  27: 2630394.927 ops/s
Iteration  28: 2618478.700 ops/s
Iteration  29: 2616997.234 ops/s
Iteration  30: 2617943.683 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedList":
  2636978.522 ±(99.9%) 29485.216 ops/s [Average]
  (min, avg, max) = (2524673.668, 2636978.522, 2730871.300), stdev = 44132.087
  CI (99.9%): [2607493.306, 2666463.738] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedList  thrpt   30  2636978.522 ± 29485.216  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 977097.725 ops/s
# Warmup Iteration   2: 2498091.115 ops/s
# Warmup Iteration   3: 2622179.138 ops/s
# Warmup Iteration   4: 2118116.221 ops/s
# Warmup Iteration   5: 2617479.237 ops/s
# Warmup Iteration   6: 2574225.769 ops/s
# Warmup Iteration   7: 2623172.379 ops/s
# Warmup Iteration   8: 2649036.366 ops/s
# Warmup Iteration   9: 2720770.115 ops/s
# Warmup Iteration  10: 2610409.267 ops/s
# Warmup Iteration  11: 2588490.729 ops/s
# Warmup Iteration  12: 2673794.899 ops/s
# Warmup Iteration  13: 2678441.932 ops/s
# Warmup Iteration  14: 2746720.812 ops/s
# Warmup Iteration  15: 2824306.876 ops/s
# Warmup Iteration  16: 2674112.792 ops/s
# Warmup Iteration  17: 2594210.967 ops/s
# Warmup Iteration  18: 2591765.076 ops/s
# Warmup Iteration  19: 2593488.082 ops/s
# Warmup Iteration  20: 2606374.114 ops/s
# Warmup Iteration  21: 2691158.495 ops/s
# Warmup Iteration  22: 2685346.801 ops/s
# Warmup Iteration  23: 2616341.218 ops/s
# Warmup Iteration  24: 2634396.029 ops/s
# Warmup Iteration  25: 2612792.102 ops/s
# Warmup Iteration  26: 2631644.223 ops/s
# Warmup Iteration  27: 2590350.117 ops/s
# Warmup Iteration  28: 2619443.845 ops/s
# Warmup Iteration  29: 2594951.347 ops/s
# Warmup Iteration  30: 2599964.528 ops/s
Iteration   1: 2635857.263 ops/s
Iteration   2: 2590263.525 ops/s
Iteration   3: 2682218.025 ops/s
Iteration   4: 2578568.452 ops/s
Iteration   5: 2626277.476 ops/s
Iteration   6: 2687101.182 ops/s
Iteration   7: 2709648.063 ops/s
Iteration   8: 2733252.068 ops/s
Iteration   9: 2834289.188 ops/s
Iteration  10: 2731481.581 ops/s
Iteration  11: 2620265.699 ops/s
Iteration  12: 2642722.549 ops/s
Iteration  13: 2618195.560 ops/s
Iteration  14: 2635028.551 ops/s
Iteration  15: 2810722.448 ops/s
Iteration  16: 2846631.475 ops/s
Iteration  17: 2828235.587 ops/s
Iteration  18: 2597339.676 ops/s
Iteration  19: 2556694.246 ops/s
Iteration  20: 2584014.032 ops/s
Iteration  21: 2588910.948 ops/s
Iteration  22: 2598769.681 ops/s
Iteration  23: 2580593.845 ops/s
Iteration  24: 2637943.453 ops/s
Iteration  25: 2596317.692 ops/s
Iteration  26: 2646828.471 ops/s
Iteration  27: 2605495.308 ops/s
Iteration  28: 2580912.051 ops/s
Iteration  29: 2599565.316 ops/s
Iteration  30: 2592460.570 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedListBy":
  2652553.466 ±(99.9%) 56012.737 ops/s [Average]
  (min, avg, max) = (2556694.246, 2652553.466, 2846631.475), stdev = 83837.234
  CI (99.9%): [2596540.729, 2708566.203] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedListBy  thrpt   30  2652553.466 ± 56012.737  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 241896.416 ops/s
# Warmup Iteration   2: 383379.691 ops/s
# Warmup Iteration   3: 470980.835 ops/s
# Warmup Iteration   4: 483199.579 ops/s
# Warmup Iteration   5: 477215.662 ops/s
# Warmup Iteration   6: 481012.274 ops/s
# Warmup Iteration   7: 409832.731 ops/s
# Warmup Iteration   8: 474869.616 ops/s
# Warmup Iteration   9: 469107.895 ops/s
# Warmup Iteration  10: 489447.253 ops/s
# Warmup Iteration  11: 475807.826 ops/s
# Warmup Iteration  12: 493462.349 ops/s
# Warmup Iteration  13: 482386.677 ops/s
# Warmup Iteration  14: 468308.440 ops/s
# Warmup Iteration  15: 469351.918 ops/s
# Warmup Iteration  16: 470650.981 ops/s
# Warmup Iteration  17: 471979.610 ops/s
# Warmup Iteration  18: 471952.650 ops/s
# Warmup Iteration  19: 471585.948 ops/s
# Warmup Iteration  20: 472446.340 ops/s
# Warmup Iteration  21: 488989.366 ops/s
# Warmup Iteration  22: 467073.035 ops/s
# Warmup Iteration  23: 466989.784 ops/s
# Warmup Iteration  24: 466185.537 ops/s
# Warmup Iteration  25: 468086.585 ops/s
# Warmup Iteration  26: 465787.313 ops/s
# Warmup Iteration  27: 468770.712 ops/s
# Warmup Iteration  28: 476282.773 ops/s
# Warmup Iteration  29: 466588.761 ops/s
# Warmup Iteration  30: 472669.957 ops/s
Iteration   1: 472033.439 ops/s
Iteration   2: 488539.918 ops/s
Iteration   3: 485893.965 ops/s
Iteration   4: 489732.371 ops/s
Iteration   5: 487345.008 ops/s
Iteration   6: 491528.346 ops/s
Iteration   7: 478123.163 ops/s
Iteration   8: 492355.645 ops/s
Iteration   9: 474507.133 ops/s
Iteration  10: 490860.942 ops/s
Iteration  11: 488396.151 ops/s
Iteration  12: 466547.260 ops/s
Iteration  13: 471798.786 ops/s
Iteration  14: 469809.707 ops/s
Iteration  15: 479132.827 ops/s
Iteration  16: 477658.365 ops/s
Iteration  17: 471606.422 ops/s
Iteration  18: 469791.481 ops/s
Iteration  19: 487268.552 ops/s
Iteration  20: 472646.678 ops/s
Iteration  21: 479316.977 ops/s
Iteration  22: 479310.098 ops/s
Iteration  23: 492777.485 ops/s
Iteration  24: 508525.923 ops/s
Iteration  25: 505421.146 ops/s
Iteration  26: 484741.418 ops/s
Iteration  27: 494674.366 ops/s
Iteration  28: 485024.983 ops/s
Iteration  29: 514055.469 ops/s
Iteration  30: 509794.610 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedMap":
  485307.288 ±(99.9%) 8375.211 ops/s [Average]
  (min, avg, max) = (466547.260, 485307.288, 514055.469), stdev = 12535.622
  CI (99.9%): [476932.077, 493682.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedMap  thrpt   30  485307.288 ± 8375.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 378525.348 ops/s
# Warmup Iteration   2: 792709.394 ops/s
# Warmup Iteration   3: 869164.393 ops/s
# Warmup Iteration   4: 852181.568 ops/s
# Warmup Iteration   5: 696929.128 ops/s
# Warmup Iteration   6: 834021.215 ops/s
# Warmup Iteration   7: 829162.377 ops/s
# Warmup Iteration   8: 833746.551 ops/s
# Warmup Iteration   9: 835650.137 ops/s
# Warmup Iteration  10: 831062.833 ops/s
# Warmup Iteration  11: 859375.742 ops/s
# Warmup Iteration  12: 847714.507 ops/s
# Warmup Iteration  13: 859401.669 ops/s
# Warmup Iteration  14: 840076.853 ops/s
# Warmup Iteration  15: 847050.107 ops/s
# Warmup Iteration  16: 832139.531 ops/s
# Warmup Iteration  17: 870068.613 ops/s
# Warmup Iteration  18: 844433.136 ops/s
# Warmup Iteration  19: 848915.440 ops/s
# Warmup Iteration  20: 873509.311 ops/s
# Warmup Iteration  21: 837122.000 ops/s
# Warmup Iteration  22: 831033.912 ops/s
# Warmup Iteration  23: 840141.959 ops/s
# Warmup Iteration  24: 869432.526 ops/s
# Warmup Iteration  25: 835714.483 ops/s
# Warmup Iteration  26: 836456.243 ops/s
# Warmup Iteration  27: 848065.008 ops/s
# Warmup Iteration  28: 837848.573 ops/s
# Warmup Iteration  29: 847510.249 ops/s
# Warmup Iteration  30: 852247.811 ops/s
Iteration   1: 837097.164 ops/s
Iteration   2: 811540.995 ops/s
Iteration   3: 829751.082 ops/s
Iteration   4: 829323.398 ops/s
Iteration   5: 866921.751 ops/s
Iteration   6: 905659.917 ops/s
Iteration   7: 843036.032 ops/s
Iteration   8: 847548.995 ops/s
Iteration   9: 846966.867 ops/s
Iteration  10: 904766.812 ops/s
Iteration  11: 912318.887 ops/s
Iteration  12: 913081.714 ops/s
Iteration  13: 909318.420 ops/s
Iteration  14: 912876.053 ops/s
Iteration  15: 840029.819 ops/s
Iteration  16: 830055.982 ops/s
Iteration  17: 839879.812 ops/s
Iteration  18: 861084.376 ops/s
Iteration  19: 863508.486 ops/s
Iteration  20: 890432.281 ops/s
Iteration  21: 912851.353 ops/s
Iteration  22: 870884.749 ops/s
Iteration  23: 887315.380 ops/s
Iteration  24: 904602.725 ops/s
Iteration  25: 897675.348 ops/s
Iteration  26: 913104.664 ops/s
Iteration  27: 881077.599 ops/s
Iteration  28: 889959.941 ops/s
Iteration  29: 913240.860 ops/s
Iteration  30: 871666.897 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedSet":
  874585.945 ±(99.9%) 21744.475 ops/s [Average]
  (min, avg, max) = (811540.995, 874585.945, 913240.860), stdev = 32546.109
  CI (99.9%): [852841.470, 896330.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedSet  thrpt   30  874585.945 ± 21744.475  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 529393.843 ops/s
# Warmup Iteration   2: 1312702.644 ops/s
# Warmup Iteration   3: 1382547.503 ops/s
# Warmup Iteration   4: 1160096.594 ops/s
# Warmup Iteration   5: 1356806.943 ops/s
# Warmup Iteration   6: 1381381.245 ops/s
# Warmup Iteration   7: 1381654.897 ops/s
# Warmup Iteration   8: 1324698.993 ops/s
# Warmup Iteration   9: 1400010.062 ops/s
# Warmup Iteration  10: 1340475.197 ops/s
# Warmup Iteration  11: 1342615.510 ops/s
# Warmup Iteration  12: 1379708.107 ops/s
# Warmup Iteration  13: 1343000.406 ops/s
# Warmup Iteration  14: 1338460.918 ops/s
# Warmup Iteration  15: 1344017.669 ops/s
# Warmup Iteration  16: 1340423.478 ops/s
# Warmup Iteration  17: 1340576.004 ops/s
# Warmup Iteration  18: 1394600.145 ops/s
# Warmup Iteration  19: 1344074.002 ops/s
# Warmup Iteration  20: 1373049.303 ops/s
# Warmup Iteration  21: 1322235.430 ops/s
# Warmup Iteration  22: 1351499.722 ops/s
# Warmup Iteration  23: 1383289.945 ops/s
# Warmup Iteration  24: 1346537.590 ops/s
# Warmup Iteration  25: 1399016.251 ops/s
# Warmup Iteration  26: 1352894.998 ops/s
# Warmup Iteration  27: 1366292.830 ops/s
# Warmup Iteration  28: 1360559.469 ops/s
# Warmup Iteration  29: 1374633.951 ops/s
# Warmup Iteration  30: 1349863.219 ops/s
Iteration   1: 1322412.164 ops/s
Iteration   2: 1371576.218 ops/s
Iteration   3: 1348898.741 ops/s
Iteration   4: 1338831.376 ops/s
Iteration   5: 1400097.637 ops/s
Iteration   6: 1461083.723 ops/s
Iteration   7: 1456410.758 ops/s
Iteration   8: 1400010.461 ops/s
Iteration   9: 1366865.831 ops/s
Iteration  10: 1351364.307 ops/s
Iteration  11: 1341398.342 ops/s
Iteration  12: 1316468.420 ops/s
Iteration  13: 1323506.318 ops/s
Iteration  14: 1348098.250 ops/s
Iteration  15: 1333068.306 ops/s
Iteration  16: 1331737.446 ops/s
Iteration  17: 1337385.795 ops/s
Iteration  18: 1337254.596 ops/s
Iteration  19: 1331387.121 ops/s
Iteration  20: 1347653.623 ops/s
Iteration  21: 1380826.795 ops/s
Iteration  22: 1350569.767 ops/s
Iteration  23: 1318747.598 ops/s
Iteration  24: 1339098.740 ops/s
Iteration  25: 1328644.029 ops/s
Iteration  26: 1356209.264 ops/s
Iteration  27: 1316289.986 ops/s
Iteration  28: 1334454.366 ops/s
Iteration  29: 1331396.990 ops/s
Iteration  30: 1341499.767 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedSetBy":
  1352108.224 ±(99.9%) 24093.615 ops/s [Average]
  (min, avg, max) = (1316289.986, 1352108.224, 1461083.723), stdev = 36062.192
  CI (99.9%): [1328014.609, 1376201.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1352108.224 ± 24093.615  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 220000.593 ops/s
# Warmup Iteration   2: 253291.432 ops/s
# Warmup Iteration   3: 315224.296 ops/s
# Warmup Iteration   4: 314383.942 ops/s
# Warmup Iteration   5: 307683.086 ops/s
# Warmup Iteration   6: 311267.447 ops/s
# Warmup Iteration   7: 312770.276 ops/s
# Warmup Iteration   8: 312068.295 ops/s
# Warmup Iteration   9: 308259.388 ops/s
# Warmup Iteration  10: 312366.011 ops/s
# Warmup Iteration  11: 311142.756 ops/s
# Warmup Iteration  12: 264349.929 ops/s
# Warmup Iteration  13: 305094.880 ops/s
# Warmup Iteration  14: 307501.619 ops/s
# Warmup Iteration  15: 307941.010 ops/s
# Warmup Iteration  16: 326212.238 ops/s
# Warmup Iteration  17: 320450.338 ops/s
# Warmup Iteration  18: 324895.424 ops/s
# Warmup Iteration  19: 327133.333 ops/s
# Warmup Iteration  20: 323561.025 ops/s
# Warmup Iteration  21: 315839.596 ops/s
# Warmup Iteration  22: 309981.067 ops/s
# Warmup Iteration  23: 323763.886 ops/s
# Warmup Iteration  24: 323559.073 ops/s
# Warmup Iteration  25: 327111.093 ops/s
# Warmup Iteration  26: 309764.511 ops/s
# Warmup Iteration  27: 311028.592 ops/s
# Warmup Iteration  28: 312994.780 ops/s
# Warmup Iteration  29: 312860.686 ops/s
# Warmup Iteration  30: 311376.857 ops/s
Iteration   1: 307274.286 ops/s
Iteration   2: 312513.606 ops/s
Iteration   3: 309626.870 ops/s
Iteration   4: 311574.896 ops/s
Iteration   5: 313788.240 ops/s
Iteration   6: 319579.084 ops/s
Iteration   7: 310406.323 ops/s
Iteration   8: 315756.527 ops/s
Iteration   9: 325335.385 ops/s
Iteration  10: 327105.534 ops/s
Iteration  11: 321571.939 ops/s
Iteration  12: 312650.291 ops/s
Iteration  13: 312475.098 ops/s
Iteration  14: 314789.402 ops/s
Iteration  15: 306886.639 ops/s
Iteration  16: 316674.641 ops/s
Iteration  17: 313064.641 ops/s
Iteration  18: 315387.244 ops/s
Iteration  19: 310044.693 ops/s
Iteration  20: 340007.664 ops/s
Iteration  21: 336987.434 ops/s
Iteration  22: 311262.593 ops/s
Iteration  23: 314061.883 ops/s
Iteration  24: 310599.044 ops/s
Iteration  25: 322304.244 ops/s
Iteration  26: 308831.125 ops/s
Iteration  27: 309856.394 ops/s
Iteration  28: 328048.557 ops/s
Iteration  29: 337034.784 ops/s
Iteration  30: 319480.023 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValue":
  317165.970 ±(99.9%) 6017.102 ops/s [Average]
  (min, avg, max) = (306886.639, 317165.970, 340007.664), stdev = 9006.116
  CI (99.9%): [311148.868, 323183.071] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValue  thrpt   30  317165.970 ± 6017.102  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValueWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValueWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 154636.931 ops/s
# Warmup Iteration   2: 169821.554 ops/s
# Warmup Iteration   3: 210627.003 ops/s
# Warmup Iteration   4: 215175.810 ops/s
# Warmup Iteration   5: 212238.963 ops/s
# Warmup Iteration   6: 233846.915 ops/s
# Warmup Iteration   7: 216666.927 ops/s
# Warmup Iteration   8: 213402.934 ops/s
# Warmup Iteration   9: 222562.346 ops/s
# Warmup Iteration  10: 225207.531 ops/s
# Warmup Iteration  11: 225978.806 ops/s
# Warmup Iteration  12: 232982.796 ops/s
# Warmup Iteration  13: 195976.982 ops/s
# Warmup Iteration  14: 214080.295 ops/s
# Warmup Iteration  15: 210479.096 ops/s
# Warmup Iteration  16: 209991.682 ops/s
# Warmup Iteration  17: 219633.204 ops/s
# Warmup Iteration  18: 229441.026 ops/s
# Warmup Iteration  19: 211686.460 ops/s
# Warmup Iteration  20: 214177.047 ops/s
# Warmup Iteration  21: 221782.240 ops/s
# Warmup Iteration  22: 221722.125 ops/s
# Warmup Iteration  23: 211068.614 ops/s
# Warmup Iteration  24: 212987.650 ops/s
# Warmup Iteration  25: 212514.830 ops/s
# Warmup Iteration  26: 228698.070 ops/s
# Warmup Iteration  27: 226801.470 ops/s
# Warmup Iteration  28: 211305.464 ops/s
# Warmup Iteration  29: 211026.174 ops/s
# Warmup Iteration  30: 217202.816 ops/s
Iteration   1: 218845.493 ops/s
Iteration   2: 226419.332 ops/s
Iteration   3: 233067.830 ops/s
Iteration   4: 233403.860 ops/s
Iteration   5: 233296.122 ops/s
Iteration   6: 215382.964 ops/s
Iteration   7: 209356.153 ops/s
Iteration   8: 215815.066 ops/s
Iteration   9: 211198.714 ops/s
Iteration  10: 215322.759 ops/s
Iteration  11: 213916.228 ops/s
Iteration  12: 213540.897 ops/s
Iteration  13: 216565.058 ops/s
Iteration  14: 223496.296 ops/s
Iteration  15: 221330.581 ops/s
Iteration  16: 220982.765 ops/s
Iteration  17: 211880.030 ops/s
Iteration  18: 222714.663 ops/s
Iteration  19: 215372.856 ops/s
Iteration  20: 214878.606 ops/s
Iteration  21: 212140.801 ops/s
Iteration  22: 213705.657 ops/s
Iteration  23: 221246.960 ops/s
Iteration  24: 212118.945 ops/s
Iteration  25: 214105.857 ops/s
Iteration  26: 210193.928 ops/s
Iteration  27: 207729.124 ops/s
Iteration  28: 213747.327 ops/s
Iteration  29: 211621.008 ops/s
Iteration  30: 216095.291 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValueWith":
  217316.372 ±(99.9%) 4646.537 ops/s [Average]
  (min, avg, max) = (207729.124, 217316.372, 233403.860), stdev = 6954.718
  CI (99.9%): [212669.836, 221962.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValueWith  thrpt   30  217316.372 ± 4646.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValueWith_collisions$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValueWith_collisions

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 146592771.238 ops/s
# Warmup Iteration   2: 287822947.003 ops/s
# Warmup Iteration   3: 227665979.563 ops/s
# Warmup Iteration   4: 260219202.086 ops/s
# Warmup Iteration   5: 269756422.251 ops/s
# Warmup Iteration   6: 266618290.486 ops/s
# Warmup Iteration   7: 264222838.910 ops/s
# Warmup Iteration   8: 265860914.589 ops/s
# Warmup Iteration   9: 264840912.204 ops/s
# Warmup Iteration  10: 267032996.273 ops/s
# Warmup Iteration  11: 263889717.109 ops/s
# Warmup Iteration  12: 267201646.042 ops/s
# Warmup Iteration  13: 271738971.389 ops/s
# Warmup Iteration  14: 270144290.204 ops/s
# Warmup Iteration  15: 270547301.041 ops/s
# Warmup Iteration  16: 284005541.389 ops/s
# Warmup Iteration  17: 275901983.815 ops/s
# Warmup Iteration  18: 286629560.973 ops/s
# Warmup Iteration  19: 282464439.751 ops/s
# Warmup Iteration  20: 280039715.711 ops/s
# Warmup Iteration  21: 282759983.806 ops/s
# Warmup Iteration  22: 271194242.405 ops/s
# Warmup Iteration  23: 277338373.649 ops/s
# Warmup Iteration  24: 266680134.410 ops/s
# Warmup Iteration  25: 267933157.038 ops/s
# Warmup Iteration  26: 265007195.577 ops/s
# Warmup Iteration  27: 264459488.335 ops/s
# Warmup Iteration  28: 264187530.593 ops/s
# Warmup Iteration  29: 272920951.349 ops/s
# Warmup Iteration  30: 275862271.913 ops/s
Iteration   1: 268190113.343 ops/s
Iteration   2: 267366482.446 ops/s
Iteration   3: 264713662.222 ops/s
Iteration   4: 274862595.218 ops/s
Iteration   5: 266836960.759 ops/s
Iteration   6: 266515983.730 ops/s
Iteration   7: 266188395.357 ops/s
Iteration   8: 261820332.117 ops/s
Iteration   9: 271200517.461 ops/s
Iteration  10: 260614258.921 ops/s
Iteration  11: 270054449.047 ops/s
Iteration  12: 271695922.771 ops/s
Iteration  13: 288592705.442 ops/s
Iteration  14: 287400994.970 ops/s
Iteration  15: 279428383.450 ops/s
Iteration  16: 262517913.802 ops/s
Iteration  17: 268145760.831 ops/s
Iteration  18: 269443149.770 ops/s
Iteration  19: 264765253.369 ops/s
Iteration  20: 272023034.076 ops/s
Iteration  21: 265406083.578 ops/s
Iteration  22: 287575427.603 ops/s
Iteration  23: 286065623.596 ops/s
Iteration  24: 287215548.725 ops/s
Iteration  25: 284627785.312 ops/s
Iteration  26: 286702730.766 ops/s
Iteration  27: 260542300.483 ops/s
Iteration  28: 279476393.725 ops/s
Iteration  29: 288460791.921 ops/s
Iteration  30: 285118718.608 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValueWith_collisions":
  273785609.114 ±(99.9%) 6544413.176 ops/s [Average]
  (min, avg, max) = (260542300.483, 273785609.114, 288592705.442), stdev = 9795370.294
  CI (99.9%): [267241195.938, 280330022.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt          Score         Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValueWith_collisions  thrpt   30  273785609.114 ± 6544413.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValue_collisions$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValue_collisions

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 161650089.564 ops/s
# Warmup Iteration   2: 286790227.988 ops/s
# Warmup Iteration   3: 244866978.963 ops/s
# Warmup Iteration   4: 296478664.259 ops/s
# Warmup Iteration   5: 285240929.228 ops/s
# Warmup Iteration   6: 303079925.016 ops/s
# Warmup Iteration   7: 294925512.580 ops/s
# Warmup Iteration   8: 284905987.910 ops/s
# Warmup Iteration   9: 289853008.995 ops/s
# Warmup Iteration  10: 292342022.113 ops/s
# Warmup Iteration  11: 299897371.227 ops/s
# Warmup Iteration  12: 289908095.266 ops/s
# Warmup Iteration  13: 282936026.649 ops/s
# Warmup Iteration  14: 288836974.363 ops/s
# Warmup Iteration  15: 285724436.012 ops/s
# Warmup Iteration  16: 286726957.712 ops/s
# Warmup Iteration  17: 289333775.486 ops/s
# Warmup Iteration  18: 285822701.914 ops/s
# Warmup Iteration  19: 310222591.092 ops/s
# Warmup Iteration  20: 297312318.629 ops/s
# Warmup Iteration  21: 293209060.323 ops/s
# Warmup Iteration  22: 290031306.312 ops/s
# Warmup Iteration  23: 285286893.382 ops/s
# Warmup Iteration  24: 303532734.712 ops/s
# Warmup Iteration  25: 290390626.597 ops/s
# Warmup Iteration  26: 290455474.555 ops/s
# Warmup Iteration  27: 295231735.949 ops/s
# Warmup Iteration  28: 290133231.633 ops/s
# Warmup Iteration  29: 297070931.447 ops/s
# Warmup Iteration  30: 287745520.148 ops/s
Iteration   1: 298663617.017 ops/s
Iteration   2: 290852522.274 ops/s
Iteration   3: 286643532.832 ops/s
Iteration   4: 291158643.113 ops/s
Iteration   5: 289375397.722 ops/s
Iteration   6: 297344273.927 ops/s
Iteration   7: 285212137.752 ops/s
Iteration   8: 278328415.037 ops/s
Iteration   9: 290665625.802 ops/s
Iteration  10: 282867966.324 ops/s
Iteration  11: 287759853.428 ops/s
Iteration  12: 298820540.709 ops/s
Iteration  13: 283632961.789 ops/s
Iteration  14: 297454497.282 ops/s
Iteration  15: 296419349.736 ops/s
Iteration  16: 298006121.711 ops/s
Iteration  17: 298991878.588 ops/s
Iteration  18: 289637729.283 ops/s
Iteration  19: 288506614.103 ops/s
Iteration  20: 293296976.830 ops/s
Iteration  21: 280884736.288 ops/s
Iteration  22: 280778216.623 ops/s
Iteration  23: 286341634.877 ops/s
Iteration  24: 289351819.269 ops/s
Iteration  25: 298241204.059 ops/s
Iteration  26: 309667582.299 ops/s
Iteration  27: 292024853.025 ops/s
Iteration  28: 287126686.969 ops/s
Iteration  29: 287085252.891 ops/s
Iteration  30: 284310688.395 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValue_collisions":
  290648377.665 ±(99.9%) 4656626.316 ops/s [Average]
  (min, avg, max) = (278328415.037, 290648377.665, 309667582.299), stdev = 6969819.579
  CI (99.9%): [285991751.349, 295305003.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt          Score         Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_updateValue_collisions  thrpt   30  290648377.665 ± 4656626.316  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_valuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_valuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1168498.625 ops/s
# Warmup Iteration   2: 2671442.623 ops/s
# Warmup Iteration   3: 2723427.843 ops/s
# Warmup Iteration   4: 2707783.471 ops/s
# Warmup Iteration   5: 2251377.771 ops/s
# Warmup Iteration   6: 2683650.849 ops/s
# Warmup Iteration   7: 2719674.982 ops/s
# Warmup Iteration   8: 2699800.061 ops/s
# Warmup Iteration   9: 2715797.077 ops/s
# Warmup Iteration  10: 2714437.920 ops/s
# Warmup Iteration  11: 2839911.939 ops/s
# Warmup Iteration  12: 2682384.148 ops/s
# Warmup Iteration  13: 2709305.597 ops/s
# Warmup Iteration  14: 2701309.347 ops/s
# Warmup Iteration  15: 2710623.248 ops/s
# Warmup Iteration  16: 2717712.242 ops/s
# Warmup Iteration  17: 2691950.462 ops/s
# Warmup Iteration  18: 2776202.744 ops/s
# Warmup Iteration  19: 2695283.567 ops/s
# Warmup Iteration  20: 2809405.899 ops/s
# Warmup Iteration  21: 2697847.130 ops/s
# Warmup Iteration  22: 2804768.395 ops/s
# Warmup Iteration  23: 2820075.219 ops/s
# Warmup Iteration  24: 2763280.300 ops/s
# Warmup Iteration  25: 2724073.992 ops/s
# Warmup Iteration  26: 2702426.542 ops/s
# Warmup Iteration  27: 2714006.985 ops/s
# Warmup Iteration  28: 2792482.561 ops/s
# Warmup Iteration  29: 2668274.419 ops/s
# Warmup Iteration  30: 2781593.852 ops/s
Iteration   1: 2719106.992 ops/s
Iteration   2: 2756310.299 ops/s
Iteration   3: 2770709.948 ops/s
Iteration   4: 2751795.068 ops/s
Iteration   5: 2714658.914 ops/s
Iteration   6: 2683303.861 ops/s
Iteration   7: 2778656.251 ops/s
Iteration   8: 2856684.664 ops/s
Iteration   9: 2930777.776 ops/s
Iteration  10: 2839275.446 ops/s
Iteration  11: 2758414.345 ops/s
Iteration  12: 2845988.747 ops/s
Iteration  13: 2773834.315 ops/s
Iteration  14: 2775632.256 ops/s
Iteration  15: 2758167.514 ops/s
Iteration  16: 2696347.433 ops/s
Iteration  17: 2738332.128 ops/s
Iteration  18: 2658659.360 ops/s
Iteration  19: 2790589.013 ops/s
Iteration  20: 2752182.663 ops/s
Iteration  21: 2726795.383 ops/s
Iteration  22: 2719138.316 ops/s
Iteration  23: 2696134.623 ops/s
Iteration  24: 2736929.385 ops/s
Iteration  25: 2677242.693 ops/s
Iteration  26: 2866510.621 ops/s
Iteration  27: 2761809.142 ops/s
Iteration  28: 2708987.810 ops/s
Iteration  29: 2714963.724 ops/s
Iteration  30: 2782594.746 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_valuesView":
  2758017.781 ±(99.9%) 40993.851 ops/s [Average]
  (min, avg, max) = (2658659.360, 2758017.781, 2930777.776), stdev = 61357.672
  CI (99.9%): [2717023.930, 2799011.633] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_valuesView  thrpt   30  2758017.781 ± 40993.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withAllKeyValueArguments$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withAllKeyValueArguments

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 589971.691 ops/s
# Warmup Iteration   2: 1390420.088 ops/s
# Warmup Iteration   3: 1466042.278 ops/s
# Warmup Iteration   4: 1408665.787 ops/s
# Warmup Iteration   5: 1237567.369 ops/s
# Warmup Iteration   6: 1467336.501 ops/s
# Warmup Iteration   7: 1467006.330 ops/s
# Warmup Iteration   8: 1481179.783 ops/s
# Warmup Iteration   9: 1478820.457 ops/s
# Warmup Iteration  10: 1478204.167 ops/s
# Warmup Iteration  11: 1477063.663 ops/s
# Warmup Iteration  12: 1474994.484 ops/s
# Warmup Iteration  13: 1478899.207 ops/s
# Warmup Iteration  14: 1473023.438 ops/s
# Warmup Iteration  15: 1478038.912 ops/s
# Warmup Iteration  16: 1445798.765 ops/s
# Warmup Iteration  17: 1425169.652 ops/s
# Warmup Iteration  18: 1459922.515 ops/s
# Warmup Iteration  19: 1464116.121 ops/s
# Warmup Iteration  20: 1409029.380 ops/s
# Warmup Iteration  21: 1438655.789 ops/s
# Warmup Iteration  22: 1451367.462 ops/s
# Warmup Iteration  23: 1444814.325 ops/s
# Warmup Iteration  24: 1432786.568 ops/s
# Warmup Iteration  25: 1455403.336 ops/s
# Warmup Iteration  26: 1463391.612 ops/s
# Warmup Iteration  27: 1464939.062 ops/s
# Warmup Iteration  28: 1477819.036 ops/s
# Warmup Iteration  29: 1463783.372 ops/s
# Warmup Iteration  30: 1459164.131 ops/s
Iteration   1: 1464594.706 ops/s
Iteration   2: 1463677.321 ops/s
Iteration   3: 1463969.684 ops/s
Iteration   4: 1477153.390 ops/s
Iteration   5: 1478775.160 ops/s
Iteration   6: 1480034.317 ops/s
Iteration   7: 1477041.895 ops/s
Iteration   8: 1478898.934 ops/s
Iteration   9: 1432734.675 ops/s
Iteration  10: 1458662.914 ops/s
Iteration  11: 1470435.179 ops/s
Iteration  12: 1460692.818 ops/s
Iteration  13: 1464590.813 ops/s
Iteration  14: 1459643.534 ops/s
Iteration  15: 1472603.597 ops/s
Iteration  16: 1462282.122 ops/s
Iteration  17: 1475407.956 ops/s
Iteration  18: 1455824.240 ops/s
Iteration  19: 1468285.445 ops/s
Iteration  20: 1478370.025 ops/s
Iteration  21: 1472500.414 ops/s
Iteration  22: 1437797.833 ops/s
Iteration  23: 1469487.407 ops/s
Iteration  24: 1476562.874 ops/s
Iteration  25: 1475792.893 ops/s
Iteration  26: 1467466.005 ops/s
Iteration  27: 1462279.694 ops/s
Iteration  28: 1467177.740 ops/s
Iteration  29: 1464537.810 ops/s
Iteration  30: 1456357.982 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withAllKeyValueArguments":
  1466454.646 ±(99.9%) 7450.405 ops/s [Average]
  (min, avg, max) = (1432734.675, 1466454.646, 1480034.317), stdev = 11151.416
  CI (99.9%): [1459004.241, 1473905.051] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withAllKeyValueArguments  thrpt   30  1466454.646 ± 7450.405  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withAllKeyValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withAllKeyValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 638661.007 ops/s
# Warmup Iteration   2: 1419854.636 ops/s
# Warmup Iteration   3: 1477860.599 ops/s
# Warmup Iteration   4: 1420164.892 ops/s
# Warmup Iteration   5: 1190292.585 ops/s
# Warmup Iteration   6: 1444426.087 ops/s
# Warmup Iteration   7: 1464500.927 ops/s
# Warmup Iteration   8: 1455551.133 ops/s
# Warmup Iteration   9: 1457995.856 ops/s
# Warmup Iteration  10: 1453768.821 ops/s
# Warmup Iteration  11: 1448756.399 ops/s
# Warmup Iteration  12: 1451741.913 ops/s
# Warmup Iteration  13: 1451286.182 ops/s
# Warmup Iteration  14: 1450139.560 ops/s
# Warmup Iteration  15: 1457671.918 ops/s
# Warmup Iteration  16: 1457582.038 ops/s
# Warmup Iteration  17: 1457456.471 ops/s
# Warmup Iteration  18: 1436472.039 ops/s
# Warmup Iteration  19: 1456675.620 ops/s
# Warmup Iteration  20: 1459892.244 ops/s
# Warmup Iteration  21: 1451886.379 ops/s
# Warmup Iteration  22: 1460009.888 ops/s
# Warmup Iteration  23: 1457457.377 ops/s
# Warmup Iteration  24: 1447197.243 ops/s
# Warmup Iteration  25: 1450193.768 ops/s
# Warmup Iteration  26: 1355495.909 ops/s
# Warmup Iteration  27: 1424736.868 ops/s
# Warmup Iteration  28: 1407377.433 ops/s
# Warmup Iteration  29: 1350914.597 ops/s
# Warmup Iteration  30: 1363138.335 ops/s
Iteration   1: 1371502.940 ops/s
Iteration   2: 1397079.667 ops/s
Iteration   3: 1413547.690 ops/s
Iteration   4: 1401487.185 ops/s
Iteration   5: 1390141.706 ops/s
Iteration   6: 1331342.416 ops/s
Iteration   7: 1335136.586 ops/s
Iteration   8: 1340030.488 ops/s
Iteration   9: 1422196.522 ops/s
Iteration  10: 1361965.827 ops/s
Iteration  11: 1351004.373 ops/s
Iteration  12: 1351265.368 ops/s
Iteration  13: 1333679.979 ops/s
Iteration  14: 1340374.558 ops/s
Iteration  15: 1344703.409 ops/s
Iteration  16: 1344482.163 ops/s
Iteration  17: 1371466.032 ops/s
Iteration  18: 1390900.866 ops/s
Iteration  19: 1435026.037 ops/s
Iteration  20: 1377503.365 ops/s
Iteration  21: 1402464.976 ops/s
Iteration  22: 1438806.093 ops/s
Iteration  23: 1344579.736 ops/s
Iteration  24: 1363217.332 ops/s
Iteration  25: 1410936.900 ops/s
Iteration  26: 1453790.350 ops/s
Iteration  27: 1442755.542 ops/s
Iteration  28: 1463084.969 ops/s
Iteration  29: 1467278.514 ops/s
Iteration  30: 1456151.198 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withAllKeyValues":
  1388263.426 ±(99.9%) 29191.888 ops/s [Average]
  (min, avg, max) = (1331342.416, 1388263.426, 1467278.514), stdev = 43693.047
  CI (99.9%): [1359071.538, 1417455.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withAllKeyValues  thrpt   30  1388263.426 ± 29191.888  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 447045.671 ops/s
# Warmup Iteration   2: 949485.074 ops/s
# Warmup Iteration   3: 982697.107 ops/s
# Warmup Iteration   4: 975827.170 ops/s
# Warmup Iteration   5: 799844.519 ops/s
# Warmup Iteration   6: 945641.600 ops/s
# Warmup Iteration   7: 931674.873 ops/s
# Warmup Iteration   8: 919782.968 ops/s
# Warmup Iteration   9: 905062.664 ops/s
# Warmup Iteration  10: 919210.343 ops/s
# Warmup Iteration  11: 923727.094 ops/s
# Warmup Iteration  12: 937947.892 ops/s
# Warmup Iteration  13: 922801.342 ops/s
# Warmup Iteration  14: 923933.184 ops/s
# Warmup Iteration  15: 964257.189 ops/s
# Warmup Iteration  16: 911511.301 ops/s
# Warmup Iteration  17: 939364.992 ops/s
# Warmup Iteration  18: 949000.888 ops/s
# Warmup Iteration  19: 915498.774 ops/s
# Warmup Iteration  20: 903247.835 ops/s
# Warmup Iteration  21: 916186.675 ops/s
# Warmup Iteration  22: 919249.346 ops/s
# Warmup Iteration  23: 920639.845 ops/s
# Warmup Iteration  24: 916091.690 ops/s
# Warmup Iteration  25: 897915.325 ops/s
# Warmup Iteration  26: 920605.858 ops/s
# Warmup Iteration  27: 905822.316 ops/s
# Warmup Iteration  28: 912505.393 ops/s
# Warmup Iteration  29: 922417.321 ops/s
# Warmup Iteration  30: 931363.493 ops/s
Iteration   1: 948704.396 ops/s
Iteration   2: 917888.374 ops/s
Iteration   3: 930222.298 ops/s
Iteration   4: 918009.910 ops/s
Iteration   5: 958146.955 ops/s
Iteration   6: 922166.178 ops/s
Iteration   7: 922834.743 ops/s
Iteration   8: 935820.001 ops/s
Iteration   9: 908890.080 ops/s
Iteration  10: 909851.567 ops/s
Iteration  11: 926427.608 ops/s
Iteration  12: 958150.511 ops/s
Iteration  13: 917706.172 ops/s
Iteration  14: 942222.511 ops/s
Iteration  15: 915525.111 ops/s
Iteration  16: 922975.760 ops/s
Iteration  17: 924743.634 ops/s
Iteration  18: 903811.266 ops/s
Iteration  19: 915878.001 ops/s
Iteration  20: 913123.736 ops/s
Iteration  21: 921928.829 ops/s
Iteration  22: 905241.249 ops/s
Iteration  23: 920582.025 ops/s
Iteration  24: 919677.222 ops/s
Iteration  25: 941516.448 ops/s
Iteration  26: 911330.744 ops/s
Iteration  27: 905871.161 ops/s
Iteration  28: 925677.240 ops/s
Iteration  29: 924425.926 ops/s
Iteration  30: 904499.361 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withKeyValue":
  923128.301 ±(99.9%) 9779.396 ops/s [Average]
  (min, avg, max) = (903811.266, 923128.301, 958150.511), stdev = 14637.341
  CI (99.9%): [913348.905, 932907.697] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withKeyValue  thrpt   30  923128.301 ± 9779.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 491945.102 ops/s
# Warmup Iteration   2: 1110127.079 ops/s
# Warmup Iteration   3: 1270114.301 ops/s
# Warmup Iteration   4: 1271771.708 ops/s
# Warmup Iteration   5: 1154844.803 ops/s
# Warmup Iteration   6: 1091859.252 ops/s
# Warmup Iteration   7: 1276835.532 ops/s
# Warmup Iteration   8: 1237889.580 ops/s
# Warmup Iteration   9: 1210815.925 ops/s
# Warmup Iteration  10: 1222586.368 ops/s
# Warmup Iteration  11: 1233164.399 ops/s
# Warmup Iteration  12: 1225654.299 ops/s
# Warmup Iteration  13: 1236121.715 ops/s
# Warmup Iteration  14: 1234271.836 ops/s
# Warmup Iteration  15: 1236781.085 ops/s
# Warmup Iteration  16: 1299172.980 ops/s
# Warmup Iteration  17: 1298562.903 ops/s
# Warmup Iteration  18: 1221077.017 ops/s
# Warmup Iteration  19: 1254569.182 ops/s
# Warmup Iteration  20: 1261243.313 ops/s
# Warmup Iteration  21: 1235414.299 ops/s
# Warmup Iteration  22: 1228449.410 ops/s
# Warmup Iteration  23: 1219365.460 ops/s
# Warmup Iteration  24: 1230647.994 ops/s
# Warmup Iteration  25: 1215873.300 ops/s
# Warmup Iteration  26: 1264627.073 ops/s
# Warmup Iteration  27: 1230337.345 ops/s
# Warmup Iteration  28: 1243093.697 ops/s
# Warmup Iteration  29: 1279422.723 ops/s
# Warmup Iteration  30: 1241510.334 ops/s
Iteration   1: 1234041.422 ops/s
Iteration   2: 1261673.900 ops/s
Iteration   3: 1285855.202 ops/s
Iteration   4: 1277619.905 ops/s
Iteration   5: 1281710.923 ops/s
Iteration   6: 1288318.549 ops/s
Iteration   7: 1247734.531 ops/s
Iteration   8: 1225597.339 ops/s
Iteration   9: 1227724.913 ops/s
Iteration  10: 1231866.903 ops/s
Iteration  11: 1241046.414 ops/s
Iteration  12: 1217031.029 ops/s
Iteration  13: 1240867.318 ops/s
Iteration  14: 1278296.181 ops/s
Iteration  15: 1233055.678 ops/s
Iteration  16: 1227213.059 ops/s
Iteration  17: 1222419.076 ops/s
Iteration  18: 1219234.130 ops/s
Iteration  19: 1242816.491 ops/s
Iteration  20: 1235938.449 ops/s
Iteration  21: 1228975.262 ops/s
Iteration  22: 1231135.993 ops/s
Iteration  23: 1213488.986 ops/s
Iteration  24: 1214056.095 ops/s
Iteration  25: 1223876.850 ops/s
Iteration  26: 1247754.269 ops/s
Iteration  27: 1205177.976 ops/s
Iteration  28: 1231061.837 ops/s
Iteration  29: 1240390.087 ops/s
Iteration  30: 1236616.903 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMap":
  1239753.189 ±(99.9%) 15069.039 ops/s [Average]
  (min, avg, max) = (1205177.976, 1239753.189, 1288318.549), stdev = 22554.630
  CI (99.9%): [1224684.150, 1254822.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMap  thrpt   30  1239753.189 ± 15069.039  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 656447.191 ops/s
# Warmup Iteration   2: 1554492.903 ops/s
# Warmup Iteration   3: 1583160.530 ops/s
# Warmup Iteration   4: 1283403.781 ops/s
# Warmup Iteration   5: 1569390.182 ops/s
# Warmup Iteration   6: 1549441.522 ops/s
# Warmup Iteration   7: 1561822.924 ops/s
# Warmup Iteration   8: 1638442.655 ops/s
# Warmup Iteration   9: 1592783.920 ops/s
# Warmup Iteration  10: 1542013.169 ops/s
# Warmup Iteration  11: 1537722.467 ops/s
# Warmup Iteration  12: 1550043.420 ops/s
# Warmup Iteration  13: 1594488.805 ops/s
# Warmup Iteration  14: 1558473.612 ops/s
# Warmup Iteration  15: 1574361.215 ops/s
# Warmup Iteration  16: 1537033.016 ops/s
# Warmup Iteration  17: 1562391.448 ops/s
# Warmup Iteration  18: 1599233.575 ops/s
# Warmup Iteration  19: 1561476.052 ops/s
# Warmup Iteration  20: 1629387.508 ops/s
# Warmup Iteration  21: 1608733.835 ops/s
# Warmup Iteration  22: 1574574.575 ops/s
# Warmup Iteration  23: 1539832.558 ops/s
# Warmup Iteration  24: 1536994.038 ops/s
# Warmup Iteration  25: 1601313.163 ops/s
# Warmup Iteration  26: 1617836.761 ops/s
# Warmup Iteration  27: 1631086.493 ops/s
# Warmup Iteration  28: 1648847.699 ops/s
# Warmup Iteration  29: 1628054.649 ops/s
# Warmup Iteration  30: 1613993.175 ops/s
Iteration   1: 1573667.593 ops/s
Iteration   2: 1601101.248 ops/s
Iteration   3: 1563905.610 ops/s
Iteration   4: 1559921.472 ops/s
Iteration   5: 1573440.002 ops/s
Iteration   6: 1650611.529 ops/s
Iteration   7: 1625883.835 ops/s
Iteration   8: 1694194.330 ops/s
Iteration   9: 1529589.707 ops/s
Iteration  10: 1548359.481 ops/s
Iteration  11: 1549290.219 ops/s
Iteration  12: 1544737.043 ops/s
Iteration  13: 1562712.407 ops/s
Iteration  14: 1551357.229 ops/s
Iteration  15: 1547729.326 ops/s
Iteration  16: 1547185.562 ops/s
Iteration  17: 1518075.306 ops/s
Iteration  18: 1556749.633 ops/s
Iteration  19: 1528369.564 ops/s
Iteration  20: 1552384.445 ops/s
Iteration  21: 1596198.982 ops/s
Iteration  22: 1547533.425 ops/s
Iteration  23: 1533547.409 ops/s
Iteration  24: 1565082.424 ops/s
Iteration  25: 1553343.186 ops/s
Iteration  26: 1582791.436 ops/s
Iteration  27: 1552986.837 ops/s
Iteration  28: 1547206.971 ops/s
Iteration  29: 1563032.458 ops/s
Iteration  30: 1554876.410 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapEmpty":
  1565862.169 ±(99.9%) 24574.738 ops/s [Average]
  (min, avg, max) = (1518075.306, 1565862.169, 1694194.330), stdev = 36782.313
  CI (99.9%): [1541287.432, 1590436.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapEmpty  thrpt   30  1565862.169 ± 24574.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 804409.441 ops/s
# Warmup Iteration   2: 1940052.959 ops/s
# Warmup Iteration   3: 1676698.439 ops/s
# Warmup Iteration   4: 1973977.599 ops/s
# Warmup Iteration   5: 1948302.976 ops/s
# Warmup Iteration   6: 1945449.859 ops/s
# Warmup Iteration   7: 1955442.527 ops/s
# Warmup Iteration   8: 1944581.091 ops/s
# Warmup Iteration   9: 1964886.907 ops/s
# Warmup Iteration  10: 1972790.974 ops/s
# Warmup Iteration  11: 2082148.814 ops/s
# Warmup Iteration  12: 1941628.180 ops/s
# Warmup Iteration  13: 1956271.112 ops/s
# Warmup Iteration  14: 1977065.483 ops/s
# Warmup Iteration  15: 1935796.753 ops/s
# Warmup Iteration  16: 1953812.577 ops/s
# Warmup Iteration  17: 1925817.840 ops/s
# Warmup Iteration  18: 1995597.624 ops/s
# Warmup Iteration  19: 1994140.754 ops/s
# Warmup Iteration  20: 1967861.149 ops/s
# Warmup Iteration  21: 1986289.567 ops/s
# Warmup Iteration  22: 1922983.102 ops/s
# Warmup Iteration  23: 1932994.989 ops/s
# Warmup Iteration  24: 1933022.946 ops/s
# Warmup Iteration  25: 1949087.699 ops/s
# Warmup Iteration  26: 2032619.961 ops/s
# Warmup Iteration  27: 1976097.868 ops/s
# Warmup Iteration  28: 1960284.798 ops/s
# Warmup Iteration  29: 2029484.409 ops/s
# Warmup Iteration  30: 1996337.553 ops/s
Iteration   1: 2126410.671 ops/s
Iteration   2: 2054085.499 ops/s
Iteration   3: 2137196.902 ops/s
Iteration   4: 2038461.557 ops/s
Iteration   5: 1938361.599 ops/s
Iteration   6: 1957925.138 ops/s
Iteration   7: 1960548.381 ops/s
Iteration   8: 1935591.744 ops/s
Iteration   9: 1926009.398 ops/s
Iteration  10: 2065702.605 ops/s
Iteration  11: 1983591.288 ops/s
Iteration  12: 1973744.629 ops/s
Iteration  13: 2070205.908 ops/s
Iteration  14: 2012303.581 ops/s
Iteration  15: 2031370.291 ops/s
Iteration  16: 2043117.467 ops/s
Iteration  17: 2111540.727 ops/s
Iteration  18: 1941249.438 ops/s
Iteration  19: 1974106.453 ops/s
Iteration  20: 1927780.660 ops/s
Iteration  21: 1993812.874 ops/s
Iteration  22: 2014885.999 ops/s
Iteration  23: 2011124.126 ops/s
Iteration  24: 1958820.959 ops/s
Iteration  25: 1947437.118 ops/s
Iteration  26: 1982618.265 ops/s
Iteration  27: 1975550.941 ops/s
Iteration  28: 1967035.978 ops/s
Iteration  29: 1965169.629 ops/s
Iteration  30: 1957277.784 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty":
  1999434.587 ±(99.9%) 39387.924 ops/s [Average]
  (min, avg, max) = (1926009.398, 1999434.587, 2137196.902), stdev = 58953.995
  CI (99.9%): [1960046.663, 2038822.511] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty  thrpt   30  1999434.587 ± 39387.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 511433.904 ops/s
# Warmup Iteration   2: 1176120.957 ops/s
# Warmup Iteration   3: 1363663.092 ops/s
# Warmup Iteration   4: 1352244.925 ops/s
# Warmup Iteration   5: 1120622.195 ops/s
# Warmup Iteration   6: 1217935.608 ops/s
# Warmup Iteration   7: 1249909.313 ops/s
# Warmup Iteration   8: 1243902.085 ops/s
# Warmup Iteration   9: 1271500.797 ops/s
# Warmup Iteration  10: 1301674.601 ops/s
# Warmup Iteration  11: 1353833.676 ops/s
# Warmup Iteration  12: 1292734.854 ops/s
# Warmup Iteration  13: 1304518.052 ops/s
# Warmup Iteration  14: 1250613.404 ops/s
# Warmup Iteration  15: 1266779.849 ops/s
# Warmup Iteration  16: 1287382.256 ops/s
# Warmup Iteration  17: 1245485.604 ops/s
# Warmup Iteration  18: 1238537.719 ops/s
# Warmup Iteration  19: 1245441.164 ops/s
# Warmup Iteration  20: 1294511.463 ops/s
# Warmup Iteration  21: 1283086.339 ops/s
# Warmup Iteration  22: 1241354.999 ops/s
# Warmup Iteration  23: 1347114.558 ops/s
# Warmup Iteration  24: 1236354.348 ops/s
# Warmup Iteration  25: 1254704.455 ops/s
# Warmup Iteration  26: 1226176.462 ops/s
# Warmup Iteration  27: 1270519.992 ops/s
# Warmup Iteration  28: 1261248.174 ops/s
# Warmup Iteration  29: 1250235.494 ops/s
# Warmup Iteration  30: 1261018.142 ops/s
Iteration   1: 1249726.491 ops/s
Iteration   2: 1246102.998 ops/s
Iteration   3: 1244316.037 ops/s
Iteration   4: 1232723.509 ops/s
Iteration   5: 1264063.250 ops/s
Iteration   6: 1242814.431 ops/s
Iteration   7: 1248212.584 ops/s
Iteration   8: 1296407.427 ops/s
Iteration   9: 1266603.672 ops/s
Iteration  10: 1295493.927 ops/s
Iteration  11: 1252734.869 ops/s
Iteration  12: 1248107.428 ops/s
Iteration  13: 1247710.735 ops/s
Iteration  14: 1244866.552 ops/s
Iteration  15: 1258005.582 ops/s
Iteration  16: 1246190.235 ops/s
Iteration  17: 1252822.829 ops/s
Iteration  18: 1227183.253 ops/s
Iteration  19: 1251069.691 ops/s
Iteration  20: 1249073.415 ops/s
Iteration  21: 1230085.466 ops/s
Iteration  22: 1242437.280 ops/s
Iteration  23: 1250408.742 ops/s
Iteration  24: 1298349.673 ops/s
Iteration  25: 1262937.036 ops/s
Iteration  26: 1256953.914 ops/s
Iteration  27: 1239205.232 ops/s
Iteration  28: 1255622.191 ops/s
Iteration  29: 1255273.996 ops/s
Iteration  30: 1246716.042 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterable":
  1253407.283 ±(99.9%) 11502.228 ops/s [Average]
  (min, avg, max) = (1227183.253, 1253407.283, 1298349.673), stdev = 17215.994
  CI (99.9%): [1241905.055, 1264909.511] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterable  thrpt   30  1253407.283 ± 11502.228  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 667261.267 ops/s
# Warmup Iteration   2: 1677406.071 ops/s
# Warmup Iteration   3: 1660860.894 ops/s
# Warmup Iteration   4: 1342167.557 ops/s
# Warmup Iteration   5: 1648405.151 ops/s
# Warmup Iteration   6: 1632318.358 ops/s
# Warmup Iteration   7: 1666913.202 ops/s
# Warmup Iteration   8: 1650235.976 ops/s
# Warmup Iteration   9: 1609573.838 ops/s
# Warmup Iteration  10: 1691932.570 ops/s
# Warmup Iteration  11: 1750757.601 ops/s
# Warmup Iteration  12: 1743588.669 ops/s
# Warmup Iteration  13: 1641061.902 ops/s
# Warmup Iteration  14: 1652211.804 ops/s
# Warmup Iteration  15: 1644127.911 ops/s
# Warmup Iteration  16: 1632609.240 ops/s
# Warmup Iteration  17: 1614790.321 ops/s
# Warmup Iteration  18: 1624761.717 ops/s
# Warmup Iteration  19: 1610163.905 ops/s
# Warmup Iteration  20: 1680048.492 ops/s
# Warmup Iteration  21: 1641382.964 ops/s
# Warmup Iteration  22: 1602951.642 ops/s
# Warmup Iteration  23: 1664913.983 ops/s
# Warmup Iteration  24: 1631261.526 ops/s
# Warmup Iteration  25: 1615270.807 ops/s
# Warmup Iteration  26: 1654543.512 ops/s
# Warmup Iteration  27: 1610267.170 ops/s
# Warmup Iteration  28: 1616995.763 ops/s
# Warmup Iteration  29: 1629476.515 ops/s
# Warmup Iteration  30: 1596189.941 ops/s
Iteration   1: 1596611.278 ops/s
Iteration   2: 1644435.926 ops/s
Iteration   3: 1636614.911 ops/s
Iteration   4: 1632093.979 ops/s
Iteration   5: 1638800.092 ops/s
Iteration   6: 1629035.499 ops/s
Iteration   7: 1614081.508 ops/s
Iteration   8: 1643228.667 ops/s
Iteration   9: 1785707.366 ops/s
Iteration  10: 1771705.829 ops/s
Iteration  11: 1771007.827 ops/s
Iteration  12: 1637316.536 ops/s
Iteration  13: 1669349.310 ops/s
Iteration  14: 1691785.236 ops/s
Iteration  15: 1674789.534 ops/s
Iteration  16: 1619491.977 ops/s
Iteration  17: 1653271.002 ops/s
Iteration  18: 1682544.659 ops/s
Iteration  19: 1592131.405 ops/s
Iteration  20: 1622855.386 ops/s
Iteration  21: 1629494.714 ops/s
Iteration  22: 1628567.242 ops/s
Iteration  23: 1623718.704 ops/s
Iteration  24: 1625331.194 ops/s
Iteration  25: 1639478.112 ops/s
Iteration  26: 1608675.034 ops/s
Iteration  27: 1635377.047 ops/s
Iteration  28: 1616668.001 ops/s
Iteration  29: 1611542.661 ops/s
Iteration  30: 1598459.469 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableEmpty":
  1647472.337 ±(99.9%) 33151.682 ops/s [Average]
  (min, avg, max) = (1592131.405, 1647472.337, 1785707.366), stdev = 49619.881
  CI (99.9%): [1614320.655, 1680624.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableEmpty  thrpt   30  1647472.337 ± 33151.682  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 719785.585 ops/s
# Warmup Iteration   2: 1817509.412 ops/s
# Warmup Iteration   3: 1839858.277 ops/s
# Warmup Iteration   4: 1594442.118 ops/s
# Warmup Iteration   5: 1988255.894 ops/s
# Warmup Iteration   6: 1816626.721 ops/s
# Warmup Iteration   7: 1831974.014 ops/s
# Warmup Iteration   8: 1836697.549 ops/s
# Warmup Iteration   9: 1815492.306 ops/s
# Warmup Iteration  10: 1829877.168 ops/s
# Warmup Iteration  11: 1846023.866 ops/s
# Warmup Iteration  12: 1843146.560 ops/s
# Warmup Iteration  13: 1901387.277 ops/s
# Warmup Iteration  14: 1838452.825 ops/s
# Warmup Iteration  15: 1883489.358 ops/s
# Warmup Iteration  16: 1813220.917 ops/s
# Warmup Iteration  17: 1822305.012 ops/s
# Warmup Iteration  18: 1814292.331 ops/s
# Warmup Iteration  19: 1826906.943 ops/s
# Warmup Iteration  20: 1825882.497 ops/s
# Warmup Iteration  21: 1810104.308 ops/s
# Warmup Iteration  22: 1827016.633 ops/s
# Warmup Iteration  23: 1931367.754 ops/s
# Warmup Iteration  24: 1834004.535 ops/s
# Warmup Iteration  25: 1863804.976 ops/s
# Warmup Iteration  26: 1881658.824 ops/s
# Warmup Iteration  27: 1904172.105 ops/s
# Warmup Iteration  28: 1855329.240 ops/s
# Warmup Iteration  29: 1858255.550 ops/s
# Warmup Iteration  30: 1822292.577 ops/s
Iteration   1: 1856648.821 ops/s
Iteration   2: 1868982.325 ops/s
Iteration   3: 1834288.179 ops/s
Iteration   4: 1829827.739 ops/s
Iteration   5: 1832156.277 ops/s
Iteration   6: 1822821.599 ops/s
Iteration   7: 1848050.871 ops/s
Iteration   8: 1834072.453 ops/s
Iteration   9: 1826496.303 ops/s
Iteration  10: 1835030.498 ops/s
Iteration  11: 1804436.402 ops/s
Iteration  12: 1836091.373 ops/s
Iteration  13: 1838113.478 ops/s
Iteration  14: 1891161.695 ops/s
Iteration  15: 2006084.666 ops/s
Iteration  16: 2001715.202 ops/s
Iteration  17: 1858037.252 ops/s
Iteration  18: 1828837.109 ops/s
Iteration  19: 1831666.055 ops/s
Iteration  20: 1836977.393 ops/s
Iteration  21: 1844378.856 ops/s
Iteration  22: 1833583.573 ops/s
Iteration  23: 1837628.959 ops/s
Iteration  24: 1813845.698 ops/s
Iteration  25: 1862321.293 ops/s
Iteration  26: 1836217.383 ops/s
Iteration  27: 1794584.426 ops/s
Iteration  28: 1821154.202 ops/s
Iteration  29: 1804058.873 ops/s
Iteration  30: 1889152.139 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty":
  1848614.036 ±(99.9%) 31690.022 ops/s [Average]
  (min, avg, max) = (1794584.426, 1848614.036, 2006084.666), stdev = 47432.136
  CI (99.9%): [1816924.015, 1880304.058] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty  thrpt   30  1848614.036 ± 31690.022  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44077.866 ops/s
# Warmup Iteration   2: 112709.710 ops/s
# Warmup Iteration   3: 139776.896 ops/s
# Warmup Iteration   4: 137559.002 ops/s
# Warmup Iteration   5: 139997.342 ops/s
# Warmup Iteration   6: 151144.694 ops/s
# Warmup Iteration   7: 153199.173 ops/s
# Warmup Iteration   8: 155078.543 ops/s
# Warmup Iteration   9: 150677.395 ops/s
# Warmup Iteration  10: 153710.845 ops/s
# Warmup Iteration  11: 151985.657 ops/s
# Warmup Iteration  12: 152602.630 ops/s
# Warmup Iteration  13: 153652.736 ops/s
# Warmup Iteration  14: 150259.770 ops/s
# Warmup Iteration  15: 154407.241 ops/s
# Warmup Iteration  16: 152480.045 ops/s
# Warmup Iteration  17: 151325.854 ops/s
# Warmup Iteration  18: 153320.314 ops/s
# Warmup Iteration  19: 154445.002 ops/s
# Warmup Iteration  20: 156796.440 ops/s
# Warmup Iteration  21: 150132.542 ops/s
# Warmup Iteration  22: 153193.693 ops/s
# Warmup Iteration  23: 150106.393 ops/s
# Warmup Iteration  24: 156127.605 ops/s
# Warmup Iteration  25: 151710.966 ops/s
# Warmup Iteration  26: 152946.705 ops/s
# Warmup Iteration  27: 152137.838 ops/s
# Warmup Iteration  28: 152479.626 ops/s
# Warmup Iteration  29: 153213.260 ops/s
# Warmup Iteration  30: 155793.058 ops/s
Iteration   1: 154233.946 ops/s
Iteration   2: 159376.912 ops/s
Iteration   3: 161410.010 ops/s
Iteration   4: 153051.202 ops/s
Iteration   5: 152714.040 ops/s
Iteration   6: 153879.082 ops/s
Iteration   7: 152194.829 ops/s
Iteration   8: 154785.105 ops/s
Iteration   9: 152797.773 ops/s
Iteration  10: 151929.259 ops/s
Iteration  11: 155437.473 ops/s
Iteration  12: 156076.677 ops/s
Iteration  13: 151845.126 ops/s
Iteration  14: 155929.398 ops/s
Iteration  15: 151208.337 ops/s
Iteration  16: 151837.134 ops/s
Iteration  17: 157826.148 ops/s
Iteration  18: 153091.261 ops/s
Iteration  19: 154418.774 ops/s
Iteration  20: 142201.420 ops/s
Iteration  21: 141209.402 ops/s
Iteration  22: 143636.230 ops/s
Iteration  23: 141634.748 ops/s
Iteration  24: 154432.869 ops/s
Iteration  25: 155040.486 ops/s
Iteration  26: 150722.717 ops/s
Iteration  27: 156049.019 ops/s
Iteration  28: 148990.515 ops/s
Iteration  29: 153932.161 ops/s
Iteration  30: 154684.405 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableNull":
  152552.549 ±(99.9%) 3237.477 ops/s [Average]
  (min, avg, max) = (141209.402, 152552.549, 161410.010), stdev = 4845.704
  CI (99.9%): [149315.071, 155790.026] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableNull  thrpt   30  152552.549 ± 3237.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 606313.837 ops/s
# Warmup Iteration   2: 1461687.093 ops/s
# Warmup Iteration   3: 1523733.014 ops/s
# Warmup Iteration   4: 1221042.342 ops/s
# Warmup Iteration   5: 1615403.758 ops/s
# Warmup Iteration   6: 1623425.210 ops/s
# Warmup Iteration   7: 1514648.442 ops/s
# Warmup Iteration   8: 1498113.464 ops/s
# Warmup Iteration   9: 1502898.875 ops/s
# Warmup Iteration  10: 1545084.563 ops/s
# Warmup Iteration  11: 1531303.874 ops/s
# Warmup Iteration  12: 1522353.510 ops/s
# Warmup Iteration  13: 1552889.792 ops/s
# Warmup Iteration  14: 1489591.946 ops/s
# Warmup Iteration  15: 1480599.089 ops/s
# Warmup Iteration  16: 1511416.034 ops/s
# Warmup Iteration  17: 1577273.940 ops/s
# Warmup Iteration  18: 1584147.431 ops/s
# Warmup Iteration  19: 1542895.724 ops/s
# Warmup Iteration  20: 1518143.965 ops/s
# Warmup Iteration  21: 1535686.497 ops/s
# Warmup Iteration  22: 1513456.546 ops/s
# Warmup Iteration  23: 1585053.615 ops/s
# Warmup Iteration  24: 1574038.660 ops/s
# Warmup Iteration  25: 1528494.684 ops/s
# Warmup Iteration  26: 1517371.885 ops/s
# Warmup Iteration  27: 1651726.630 ops/s
# Warmup Iteration  28: 1512397.089 ops/s
# Warmup Iteration  29: 1506253.140 ops/s
# Warmup Iteration  30: 1522054.072 ops/s
Iteration   1: 1632696.496 ops/s
Iteration   2: 1542131.826 ops/s
Iteration   3: 1547238.489 ops/s
Iteration   4: 1500496.954 ops/s
Iteration   5: 1517065.910 ops/s
Iteration   6: 1518210.352 ops/s
Iteration   7: 1513032.587 ops/s
Iteration   8: 1657018.902 ops/s
Iteration   9: 1658826.390 ops/s
Iteration  10: 1634806.982 ops/s
Iteration  11: 1523868.691 ops/s
Iteration  12: 1484800.625 ops/s
Iteration  13: 1547536.610 ops/s
Iteration  14: 1514988.937 ops/s
Iteration  15: 1501568.336 ops/s
Iteration  16: 1489802.994 ops/s
Iteration  17: 1522253.282 ops/s
Iteration  18: 1515430.896 ops/s
Iteration  19: 1538092.972 ops/s
Iteration  20: 1525729.630 ops/s
Iteration  21: 1520296.531 ops/s
Iteration  22: 1522184.331 ops/s
Iteration  23: 1486382.277 ops/s
Iteration  24: 1521009.358 ops/s
Iteration  25: 1540217.719 ops/s
Iteration  26: 1549358.776 ops/s
Iteration  27: 1557805.923 ops/s
Iteration  28: 1571619.173 ops/s
Iteration  29: 1617611.804 ops/s
Iteration  30: 1481948.970 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableTargetEmpty":
  1541801.091 ±(99.9%) 33404.147 ops/s [Average]
  (min, avg, max) = (1481948.970, 1541801.091, 1658826.390), stdev = 49997.758
  CI (99.9%): [1508396.944, 1575205.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapIterableTargetEmpty  thrpt   30  1541801.091 ± 33404.147  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61201.638 ops/s
# Warmup Iteration   2: 40665.345 ops/s
# Warmup Iteration   3: 43313.446 ops/s
# Warmup Iteration   4: 43228.054 ops/s
# Warmup Iteration   5: 42824.494 ops/s
# Warmup Iteration   6: 46198.908 ops/s
# Warmup Iteration   7: 44746.994 ops/s
# Warmup Iteration   8: 42873.760 ops/s
# Warmup Iteration   9: 43003.873 ops/s
# Warmup Iteration  10: 43612.768 ops/s
# Warmup Iteration  11: 45817.444 ops/s
# Warmup Iteration  12: 44817.400 ops/s
# Warmup Iteration  13: 45336.904 ops/s
# Warmup Iteration  14: 45854.697 ops/s
# Warmup Iteration  15: 45867.371 ops/s
# Warmup Iteration  16: 46489.206 ops/s
# Warmup Iteration  17: 42940.108 ops/s
# Warmup Iteration  18: 43781.754 ops/s
# Warmup Iteration  19: 44084.767 ops/s
# Warmup Iteration  20: 44456.279 ops/s
# Warmup Iteration  21: 44459.636 ops/s
# Warmup Iteration  22: 43754.607 ops/s
# Warmup Iteration  23: 44574.545 ops/s
# Warmup Iteration  24: 44679.501 ops/s
# Warmup Iteration  25: 47048.152 ops/s
# Warmup Iteration  26: 46123.902 ops/s
# Warmup Iteration  27: 47066.098 ops/s
# Warmup Iteration  28: 46800.476 ops/s
# Warmup Iteration  29: 44323.938 ops/s
# Warmup Iteration  30: 45160.779 ops/s
Iteration   1: 44025.133 ops/s
Iteration   2: 43626.740 ops/s
Iteration   3: 47024.122 ops/s
Iteration   4: 44526.135 ops/s
Iteration   5: 44427.218 ops/s
Iteration   6: 45079.700 ops/s
Iteration   7: 44966.586 ops/s
Iteration   8: 43834.658 ops/s
Iteration   9: 44572.612 ops/s
Iteration  10: 44531.795 ops/s
Iteration  11: 44094.739 ops/s
Iteration  12: 44367.548 ops/s
Iteration  13: 43956.200 ops/s
Iteration  14: 43690.118 ops/s
Iteration  15: 43164.669 ops/s
Iteration  16: 45282.453 ops/s
Iteration  17: 44312.314 ops/s
Iteration  18: 44281.976 ops/s
Iteration  19: 44474.736 ops/s
Iteration  20: 44857.003 ops/s
Iteration  21: 45141.364 ops/s
Iteration  22: 44448.515 ops/s
Iteration  23: 43185.983 ops/s
Iteration  24: 44718.772 ops/s
Iteration  25: 43510.938 ops/s
Iteration  26: 45545.818 ops/s
Iteration  27: 44355.421 ops/s
Iteration  28: 43927.292 ops/s
Iteration  29: 44461.745 ops/s
Iteration  30: 44383.058 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapNull":
  44425.845 ±(99.9%) 504.980 ops/s [Average]
  (min, avg, max) = (43164.669, 44425.845, 47024.122), stdev = 755.831
  CI (99.9%): [43920.865, 44930.826] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score     Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapNull  thrpt   30  44425.845 ± 504.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 597799.753 ops/s
# Warmup Iteration   2: 1436167.009 ops/s
# Warmup Iteration   3: 1538670.742 ops/s
# Warmup Iteration   4: 1226245.000 ops/s
# Warmup Iteration   5: 1555140.174 ops/s
# Warmup Iteration   6: 1472023.545 ops/s
# Warmup Iteration   7: 1473678.635 ops/s
# Warmup Iteration   8: 1488334.716 ops/s
# Warmup Iteration   9: 1515198.693 ops/s
# Warmup Iteration  10: 1538475.837 ops/s
# Warmup Iteration  11: 1583468.967 ops/s
# Warmup Iteration  12: 1554074.346 ops/s
# Warmup Iteration  13: 1482756.611 ops/s
# Warmup Iteration  14: 1454834.246 ops/s
# Warmup Iteration  15: 1467524.085 ops/s
# Warmup Iteration  16: 1471203.072 ops/s
# Warmup Iteration  17: 1493644.881 ops/s
# Warmup Iteration  18: 1508867.841 ops/s
# Warmup Iteration  19: 1585815.565 ops/s
# Warmup Iteration  20: 1465626.529 ops/s
# Warmup Iteration  21: 1470510.054 ops/s
# Warmup Iteration  22: 1451128.910 ops/s
# Warmup Iteration  23: 1468901.626 ops/s
# Warmup Iteration  24: 1517060.650 ops/s
# Warmup Iteration  25: 1490073.341 ops/s
# Warmup Iteration  26: 1506158.910 ops/s
# Warmup Iteration  27: 1518641.167 ops/s
# Warmup Iteration  28: 1522960.456 ops/s
# Warmup Iteration  29: 1507998.893 ops/s
# Warmup Iteration  30: 1530961.124 ops/s
Iteration   1: 1596216.100 ops/s
Iteration   2: 1490765.009 ops/s
Iteration   3: 1474679.947 ops/s
Iteration   4: 1517368.808 ops/s
Iteration   5: 1534666.640 ops/s
Iteration   6: 1462221.211 ops/s
Iteration   7: 1541199.438 ops/s
Iteration   8: 1468798.825 ops/s
Iteration   9: 1490482.067 ops/s
Iteration  10: 1459844.638 ops/s
Iteration  11: 1490265.134 ops/s
Iteration  12: 1516500.601 ops/s
Iteration  13: 1518911.777 ops/s
Iteration  14: 1519337.743 ops/s
Iteration  15: 1473886.563 ops/s
Iteration  16: 1470233.339 ops/s
Iteration  17: 1471845.261 ops/s
Iteration  18: 1488602.956 ops/s
Iteration  19: 1475737.427 ops/s
Iteration  20: 1448660.701 ops/s
Iteration  21: 1482407.247 ops/s
Iteration  22: 1469433.183 ops/s
Iteration  23: 1487801.016 ops/s
Iteration  24: 1490463.176 ops/s
Iteration  25: 1477977.217 ops/s
Iteration  26: 1487220.481 ops/s
Iteration  27: 1449214.677 ops/s
Iteration  28: 1480886.764 ops/s
Iteration  29: 1463012.312 ops/s
Iteration  30: 1497352.729 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapTargetEmpty":
  1489866.433 ±(99.9%) 20563.810 ops/s [Average]
  (min, avg, max) = (1448660.701, 1489866.433, 1596216.100), stdev = 30778.945
  CI (99.9%): [1469302.623, 1510430.243] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withMapTargetEmpty  thrpt   30  1489866.433 ± 20563.810  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withoutAllKeys$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withoutAllKeys

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 673702.160 ops/s
# Warmup Iteration   2: 1640944.841 ops/s
# Warmup Iteration   3: 1660750.772 ops/s
# Warmup Iteration   4: 1440127.938 ops/s
# Warmup Iteration   5: 1593159.699 ops/s
# Warmup Iteration   6: 1647607.795 ops/s
# Warmup Iteration   7: 1661112.586 ops/s
# Warmup Iteration   8: 1649201.373 ops/s
# Warmup Iteration   9: 1666623.289 ops/s
# Warmup Iteration  10: 1658628.132 ops/s
# Warmup Iteration  11: 1659140.900 ops/s
# Warmup Iteration  12: 1709918.171 ops/s
# Warmup Iteration  13: 1691104.789 ops/s
# Warmup Iteration  14: 1717015.852 ops/s
# Warmup Iteration  15: 1715554.327 ops/s
# Warmup Iteration  16: 1684436.141 ops/s
# Warmup Iteration  17: 1665584.863 ops/s
# Warmup Iteration  18: 1716053.381 ops/s
# Warmup Iteration  19: 1694209.204 ops/s
# Warmup Iteration  20: 1709224.815 ops/s
# Warmup Iteration  21: 1677927.551 ops/s
# Warmup Iteration  22: 1747868.897 ops/s
# Warmup Iteration  23: 1700489.551 ops/s
# Warmup Iteration  24: 1700101.205 ops/s
# Warmup Iteration  25: 1666255.922 ops/s
# Warmup Iteration  26: 1634251.778 ops/s
# Warmup Iteration  27: 1665254.219 ops/s
# Warmup Iteration  28: 1675031.870 ops/s
# Warmup Iteration  29: 1738512.880 ops/s
# Warmup Iteration  30: 1734235.226 ops/s
Iteration   1: 1650920.200 ops/s
Iteration   2: 1669172.433 ops/s
Iteration   3: 1654842.419 ops/s
Iteration   4: 1684696.307 ops/s
Iteration   5: 1658908.856 ops/s
Iteration   6: 1703847.103 ops/s
Iteration   7: 1688268.366 ops/s
Iteration   8: 1705370.537 ops/s
Iteration   9: 1650768.282 ops/s
Iteration  10: 1682930.699 ops/s
Iteration  11: 1629547.273 ops/s
Iteration  12: 1636341.625 ops/s
Iteration  13: 1634508.521 ops/s
Iteration  14: 1648952.417 ops/s
Iteration  15: 1672726.475 ops/s
Iteration  16: 1675417.435 ops/s
Iteration  17: 1689119.714 ops/s
Iteration  18: 1711533.480 ops/s
Iteration  19: 1639923.012 ops/s
Iteration  20: 1732057.016 ops/s
Iteration  21: 1641838.576 ops/s
Iteration  22: 1641752.638 ops/s
Iteration  23: 1688075.291 ops/s
Iteration  24: 1661773.619 ops/s
Iteration  25: 1650360.150 ops/s
Iteration  26: 1659966.424 ops/s
Iteration  27: 1625304.404 ops/s
Iteration  28: 1705182.319 ops/s
Iteration  29: 1728366.067 ops/s
Iteration  30: 1730610.261 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withoutAllKeys":
  1671769.397 ±(99.9%) 20852.421 ops/s [Average]
  (min, avg, max) = (1625304.404, 1671769.397, 1732057.016), stdev = 31210.924
  CI (99.9%): [1650916.976, 1692621.818] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withoutAllKeys  thrpt   30  1671769.397 ± 20852.421  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withoutKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withoutKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 796599.699 ops/s
# Warmup Iteration   2: 1881260.682 ops/s
# Warmup Iteration   3: 1862580.787 ops/s
# Warmup Iteration   4: 1628492.921 ops/s
# Warmup Iteration   5: 1891144.804 ops/s
# Warmup Iteration   6: 1945119.109 ops/s
# Warmup Iteration   7: 1927880.239 ops/s
# Warmup Iteration   8: 1976210.993 ops/s
# Warmup Iteration   9: 1965222.035 ops/s
# Warmup Iteration  10: 1891184.925 ops/s
# Warmup Iteration  11: 1906121.104 ops/s
# Warmup Iteration  12: 1946256.469 ops/s
# Warmup Iteration  13: 1920665.311 ops/s
# Warmup Iteration  14: 1883683.675 ops/s
# Warmup Iteration  15: 1949946.856 ops/s
# Warmup Iteration  16: 1895383.483 ops/s
# Warmup Iteration  17: 1875293.426 ops/s
# Warmup Iteration  18: 1932835.870 ops/s
# Warmup Iteration  19: 1961025.245 ops/s
# Warmup Iteration  20: 1924345.887 ops/s
# Warmup Iteration  21: 1868352.269 ops/s
# Warmup Iteration  22: 1876458.624 ops/s
# Warmup Iteration  23: 1856295.470 ops/s
# Warmup Iteration  24: 1986776.358 ops/s
# Warmup Iteration  25: 1895750.000 ops/s
# Warmup Iteration  26: 1891027.253 ops/s
# Warmup Iteration  27: 2011318.450 ops/s
# Warmup Iteration  28: 1905239.749 ops/s
# Warmup Iteration  29: 1904222.746 ops/s
# Warmup Iteration  30: 1926247.436 ops/s
Iteration   1: 1938616.090 ops/s
Iteration   2: 1885448.483 ops/s
Iteration   3: 1933193.119 ops/s
Iteration   4: 1916639.758 ops/s
Iteration   5: 1942138.811 ops/s
Iteration   6: 1863496.570 ops/s
Iteration   7: 1884322.774 ops/s
Iteration   8: 1866266.223 ops/s
Iteration   9: 1869394.863 ops/s
Iteration  10: 1996109.540 ops/s
Iteration  11: 1835960.099 ops/s
Iteration  12: 1838706.088 ops/s
Iteration  13: 1871417.576 ops/s
Iteration  14: 1842433.944 ops/s
Iteration  15: 1963228.386 ops/s
Iteration  16: 1926042.266 ops/s
Iteration  17: 1955112.693 ops/s
Iteration  18: 1885615.115 ops/s
Iteration  19: 1892285.288 ops/s
Iteration  20: 1946773.633 ops/s
Iteration  21: 1830894.233 ops/s
Iteration  22: 1908142.151 ops/s
Iteration  23: 1863285.481 ops/s
Iteration  24: 1862407.519 ops/s
Iteration  25: 1860882.241 ops/s
Iteration  26: 1913442.133 ops/s
Iteration  27: 2017333.957 ops/s
Iteration  28: 1861783.135 ops/s
Iteration  29: 2034391.392 ops/s
Iteration  30: 1904744.028 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withoutKey":
  1903683.586 ±(99.9%) 35553.353 ops/s [Average]
  (min, avg, max) = (1830894.233, 1903683.586, 2034391.392), stdev = 53214.589
  CI (99.9%): [1868130.234, 1939236.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_withoutKey  thrpt   30  1903683.586 ± 35553.353  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 194818.129 ops/s
# Warmup Iteration   2: 320538.498 ops/s
# Warmup Iteration   3: 380404.201 ops/s
# Warmup Iteration   4: 366803.398 ops/s
# Warmup Iteration   5: 365887.358 ops/s
# Warmup Iteration   6: 376663.067 ops/s
# Warmup Iteration   7: 329227.532 ops/s
# Warmup Iteration   8: 367265.129 ops/s
# Warmup Iteration   9: 379300.545 ops/s
# Warmup Iteration  10: 371493.640 ops/s
# Warmup Iteration  11: 374430.396 ops/s
# Warmup Iteration  12: 382296.122 ops/s
# Warmup Iteration  13: 398654.914 ops/s
# Warmup Iteration  14: 372022.852 ops/s
# Warmup Iteration  15: 368122.406 ops/s
# Warmup Iteration  16: 381369.968 ops/s
# Warmup Iteration  17: 392180.821 ops/s
# Warmup Iteration  18: 366894.993 ops/s
# Warmup Iteration  19: 368255.696 ops/s
# Warmup Iteration  20: 383605.389 ops/s
# Warmup Iteration  21: 378063.766 ops/s
# Warmup Iteration  22: 374389.669 ops/s
# Warmup Iteration  23: 400214.770 ops/s
# Warmup Iteration  24: 370600.862 ops/s
# Warmup Iteration  25: 402789.559 ops/s
# Warmup Iteration  26: 403368.912 ops/s
# Warmup Iteration  27: 371963.078 ops/s
# Warmup Iteration  28: 378242.018 ops/s
# Warmup Iteration  29: 375247.471 ops/s
# Warmup Iteration  30: 383458.417 ops/s
Iteration   1: 397093.144 ops/s
Iteration   2: 372763.331 ops/s
Iteration   3: 372457.059 ops/s
Iteration   4: 367826.078 ops/s
Iteration   5: 370450.469 ops/s
Iteration   6: 367585.960 ops/s
Iteration   7: 369509.422 ops/s
Iteration   8: 401823.066 ops/s
Iteration   9: 396601.867 ops/s
Iteration  10: 404220.810 ops/s
Iteration  11: 400880.775 ops/s
Iteration  12: 363619.957 ops/s
Iteration  13: 378070.097 ops/s
Iteration  14: 379191.920 ops/s
Iteration  15: 367411.083 ops/s
Iteration  16: 381358.082 ops/s
Iteration  17: 403314.208 ops/s
Iteration  18: 404128.588 ops/s
Iteration  19: 401816.142 ops/s
Iteration  20: 375677.170 ops/s
Iteration  21: 376779.981 ops/s
Iteration  22: 367178.528 ops/s
Iteration  23: 369270.085 ops/s
Iteration  24: 371974.400 ops/s
Iteration  25: 386156.667 ops/s
Iteration  26: 368806.207 ops/s
Iteration  27: 380008.218 ops/s
Iteration  28: 386852.879 ops/s
Iteration  29: 370560.251 ops/s
Iteration  30: 372652.593 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_zip":
  380867.968 ±(99.9%) 9131.978 ops/s [Average]
  (min, avg, max) = (363619.957, 380867.968, 404220.810), stdev = 13668.315
  CI (99.9%): [371735.990, 389999.945] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_zip  thrpt   30  380867.968 ± 9131.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 468622.118 ops/s
# Warmup Iteration   2: 835288.298 ops/s
# Warmup Iteration   3: 929385.229 ops/s
# Warmup Iteration   4: 956859.471 ops/s
# Warmup Iteration   5: 986243.434 ops/s
# Warmup Iteration   6: 826805.252 ops/s
# Warmup Iteration   7: 968516.883 ops/s
# Warmup Iteration   8: 935275.242 ops/s
# Warmup Iteration   9: 910873.565 ops/s
# Warmup Iteration  10: 974870.997 ops/s
# Warmup Iteration  11: 956957.393 ops/s
# Warmup Iteration  12: 972796.154 ops/s
# Warmup Iteration  13: 979653.700 ops/s
# Warmup Iteration  14: 937082.179 ops/s
# Warmup Iteration  15: 990253.739 ops/s
# Warmup Iteration  16: 998174.086 ops/s
# Warmup Iteration  17: 974539.121 ops/s
# Warmup Iteration  18: 955929.951 ops/s
# Warmup Iteration  19: 915001.327 ops/s
# Warmup Iteration  20: 919483.866 ops/s
# Warmup Iteration  21: 954776.647 ops/s
# Warmup Iteration  22: 954675.800 ops/s
# Warmup Iteration  23: 945198.480 ops/s
# Warmup Iteration  24: 931281.606 ops/s
# Warmup Iteration  25: 991092.090 ops/s
# Warmup Iteration  26: 935661.783 ops/s
# Warmup Iteration  27: 921716.601 ops/s
# Warmup Iteration  28: 918608.869 ops/s
# Warmup Iteration  29: 950447.193 ops/s
# Warmup Iteration  30: 910890.153 ops/s
Iteration   1: 926891.014 ops/s
Iteration   2: 923440.625 ops/s
Iteration   3: 917911.030 ops/s
Iteration   4: 918841.484 ops/s
Iteration   5: 918611.616 ops/s
Iteration   6: 918391.340 ops/s
Iteration   7: 932444.383 ops/s
Iteration   8: 944047.357 ops/s
Iteration   9: 935080.509 ops/s
Iteration  10: 984410.283 ops/s
Iteration  11: 919224.188 ops/s
Iteration  12: 925732.235 ops/s
Iteration  13: 949598.320 ops/s
Iteration  14: 910811.242 ops/s
Iteration  15: 996246.532 ops/s
Iteration  16: 980751.327 ops/s
Iteration  17: 936035.977 ops/s
Iteration  18: 1007975.606 ops/s
Iteration  19: 1009671.561 ops/s
Iteration  20: 934789.246 ops/s
Iteration  21: 949583.400 ops/s
Iteration  22: 924756.263 ops/s
Iteration  23: 1006123.376 ops/s
Iteration  24: 982376.725 ops/s
Iteration  25: 901541.729 ops/s
Iteration  26: 916519.587 ops/s
Iteration  27: 936791.222 ops/s
Iteration  28: 904744.510 ops/s
Iteration  29: 976809.175 ops/s
Iteration  30: 922313.258 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapCustomLockTest._Benchmark.benchmark_zipWithIndex":
  943748.837 ±(99.9%) 21956.211 ops/s [Average]
  (min, avg, max) = (901541.729, 943748.837, 1009671.561), stdev = 32863.025
  CI (99.9%): [921792.626, 965705.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
SynchronizedBiMapCustomLockTest._Benchmark.benchmark_zipWithIndex  thrpt   30  943748.837 ± 21956.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 662513.186 ops/s
# Warmup Iteration   2: 1578738.025 ops/s
# Warmup Iteration   3: 1926367.273 ops/s
# Warmup Iteration   4: 1631590.994 ops/s
# Warmup Iteration   5: 1960694.674 ops/s
# Warmup Iteration   6: 1911327.919 ops/s
# Warmup Iteration   7: 1893128.187 ops/s
# Warmup Iteration   8: 1973829.745 ops/s
# Warmup Iteration   9: 1865019.220 ops/s
# Warmup Iteration  10: 1847406.735 ops/s
# Warmup Iteration  11: 1880749.084 ops/s
# Warmup Iteration  12: 1927653.508 ops/s
# Warmup Iteration  13: 1795439.502 ops/s
# Warmup Iteration  14: 1825829.996 ops/s
# Warmup Iteration  15: 1938753.880 ops/s
# Warmup Iteration  16: 1943467.388 ops/s
# Warmup Iteration  17: 1855366.085 ops/s
# Warmup Iteration  18: 1802933.366 ops/s
# Warmup Iteration  19: 1814090.755 ops/s
# Warmup Iteration  20: 1930881.572 ops/s
# Warmup Iteration  21: 1819845.366 ops/s
# Warmup Iteration  22: 1777776.945 ops/s
# Warmup Iteration  23: 1849082.021 ops/s
# Warmup Iteration  24: 1895740.264 ops/s
# Warmup Iteration  25: 1850430.250 ops/s
# Warmup Iteration  26: 1918563.882 ops/s
# Warmup Iteration  27: 1870633.466 ops/s
# Warmup Iteration  28: 1811903.298 ops/s
# Warmup Iteration  29: 1814183.287 ops/s
# Warmup Iteration  30: 1815468.218 ops/s
Iteration   1: 1756971.564 ops/s
Iteration   2: 1822941.399 ops/s
Iteration   3: 1822714.215 ops/s
Iteration   4: 1806557.756 ops/s
Iteration   5: 1773755.592 ops/s
Iteration   6: 1805570.100 ops/s
Iteration   7: 1852703.227 ops/s
Iteration   8: 1757215.263 ops/s
Iteration   9: 1880369.828 ops/s
Iteration  10: 1779021.842 ops/s
Iteration  11: 1759547.788 ops/s
Iteration  12: 1896332.098 ops/s
Iteration  13: 1850050.388 ops/s
Iteration  14: 1859302.250 ops/s
Iteration  15: 1863016.403 ops/s
Iteration  16: 1815443.323 ops/s
Iteration  17: 1862709.258 ops/s
Iteration  18: 1883872.998 ops/s
Iteration  19: 1871541.168 ops/s
Iteration  20: 1808635.607 ops/s
Iteration  21: 1868331.774 ops/s
Iteration  22: 1833436.393 ops/s
Iteration  23: 1841568.640 ops/s
Iteration  24: 1898129.440 ops/s
Iteration  25: 1957436.470 ops/s
Iteration  26: 1972208.660 ops/s
Iteration  27: 1895749.441 ops/s
Iteration  28: 1770034.417 ops/s
Iteration  29: 1821032.042 ops/s
Iteration  30: 1842639.812 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_add":
  1840961.305 ±(99.9%) 36393.636 ops/s [Average]
  (min, avg, max) = (1756971.564, 1840961.305, 1972208.660), stdev = 54472.286
  CI (99.9%): [1804567.669, 1877354.942] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_add  thrpt   30  1840961.305 ± 36393.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1400996.990 ops/s
# Warmup Iteration   2: 3124468.778 ops/s
# Warmup Iteration   3: 2991683.899 ops/s
# Warmup Iteration   4: 2876141.281 ops/s
# Warmup Iteration   5: 3198312.685 ops/s
# Warmup Iteration   6: 3283006.792 ops/s
# Warmup Iteration   7: 3324513.740 ops/s
# Warmup Iteration   8: 3096518.271 ops/s
# Warmup Iteration   9: 3249109.564 ops/s
# Warmup Iteration  10: 3186344.182 ops/s
# Warmup Iteration  11: 3200402.667 ops/s
# Warmup Iteration  12: 3093608.136 ops/s
# Warmup Iteration  13: 3160031.576 ops/s
# Warmup Iteration  14: 3117555.789 ops/s
# Warmup Iteration  15: 3176608.387 ops/s
# Warmup Iteration  16: 3116369.373 ops/s
# Warmup Iteration  17: 3346620.882 ops/s
# Warmup Iteration  18: 3393313.046 ops/s
# Warmup Iteration  19: 3311308.677 ops/s
# Warmup Iteration  20: 3059871.330 ops/s
# Warmup Iteration  21: 3121803.394 ops/s
# Warmup Iteration  22: 3211511.028 ops/s
# Warmup Iteration  23: 3091957.037 ops/s
# Warmup Iteration  24: 3074890.039 ops/s
# Warmup Iteration  25: 3135982.085 ops/s
# Warmup Iteration  26: 3091929.100 ops/s
# Warmup Iteration  27: 3087455.246 ops/s
# Warmup Iteration  28: 3119662.292 ops/s
# Warmup Iteration  29: 3243403.954 ops/s
# Warmup Iteration  30: 3215309.869 ops/s
Iteration   1: 3205340.998 ops/s
Iteration   2: 3094797.646 ops/s
Iteration   3: 3110270.069 ops/s
Iteration   4: 3081423.369 ops/s
Iteration   5: 3219955.924 ops/s
Iteration   6: 3084939.777 ops/s
Iteration   7: 3262470.904 ops/s
Iteration   8: 3117901.743 ops/s
Iteration   9: 3164620.538 ops/s
Iteration  10: 3211671.029 ops/s
Iteration  11: 3183907.478 ops/s
Iteration  12: 3151441.866 ops/s
Iteration  13: 3206365.819 ops/s
Iteration  14: 3188773.069 ops/s
Iteration  15: 3156565.455 ops/s
Iteration  16: 3088634.364 ops/s
Iteration  17: 3100688.857 ops/s
Iteration  18: 3035691.760 ops/s
Iteration  19: 3089088.763 ops/s
Iteration  20: 3149278.474 ops/s
Iteration  21: 3130538.056 ops/s
Iteration  22: 3202294.631 ops/s
Iteration  23: 3254776.842 ops/s
Iteration  24: 3228593.730 ops/s
Iteration  25: 3191366.512 ops/s
Iteration  26: 3213435.094 ops/s
Iteration  27: 3078420.902 ops/s
Iteration  28: 3102325.001 ops/s
Iteration  29: 3269683.160 ops/s
Iteration  30: 3247045.751 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_aggregateByMutating":
  3160743.586 ±(99.9%) 43288.741 ops/s [Average]
  (min, avg, max) = (3035691.760, 3160743.586, 3269683.160), stdev = 64792.554
  CI (99.9%): [3117454.845, 3204032.327] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  3160743.586 ± 43288.741  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1265332.303 ops/s
# Warmup Iteration   2: 3260017.836 ops/s
# Warmup Iteration   3: 3334703.651 ops/s
# Warmup Iteration   4: 2816288.670 ops/s
# Warmup Iteration   5: 3328503.447 ops/s
# Warmup Iteration   6: 3364230.149 ops/s
# Warmup Iteration   7: 3346398.597 ops/s
# Warmup Iteration   8: 3320311.084 ops/s
# Warmup Iteration   9: 3375301.640 ops/s
# Warmup Iteration  10: 3304262.512 ops/s
# Warmup Iteration  11: 3329116.931 ops/s
# Warmup Iteration  12: 3334781.952 ops/s
# Warmup Iteration  13: 3511796.052 ops/s
# Warmup Iteration  14: 3357499.523 ops/s
# Warmup Iteration  15: 3340932.138 ops/s
# Warmup Iteration  16: 3452960.308 ops/s
# Warmup Iteration  17: 3336504.828 ops/s
# Warmup Iteration  18: 3457297.229 ops/s
# Warmup Iteration  19: 3383048.303 ops/s
# Warmup Iteration  20: 3316152.611 ops/s
# Warmup Iteration  21: 3403728.845 ops/s
# Warmup Iteration  22: 3534852.048 ops/s
# Warmup Iteration  23: 3579823.822 ops/s
# Warmup Iteration  24: 3611633.156 ops/s
# Warmup Iteration  25: 3503479.601 ops/s
# Warmup Iteration  26: 3568268.514 ops/s
# Warmup Iteration  27: 3592351.274 ops/s
# Warmup Iteration  28: 3554826.292 ops/s
# Warmup Iteration  29: 3560771.540 ops/s
# Warmup Iteration  30: 3478157.770 ops/s
Iteration   1: 3578568.213 ops/s
Iteration   2: 3581247.633 ops/s
Iteration   3: 3519454.632 ops/s
Iteration   4: 3536714.381 ops/s
Iteration   5: 3487565.131 ops/s
Iteration   6: 3464640.402 ops/s
Iteration   7: 3522800.369 ops/s
Iteration   8: 3643579.744 ops/s
Iteration   9: 3525380.127 ops/s
Iteration  10: 3498947.787 ops/s
Iteration  11: 3523362.745 ops/s
Iteration  12: 3501261.556 ops/s
Iteration  13: 3552848.557 ops/s
Iteration  14: 3506631.206 ops/s
Iteration  15: 3527677.632 ops/s
Iteration  16: 3569615.400 ops/s
Iteration  17: 3562324.640 ops/s
Iteration  18: 3572594.179 ops/s
Iteration  19: 3626494.987 ops/s
Iteration  20: 3505499.803 ops/s
Iteration  21: 3554213.337 ops/s
Iteration  22: 3642473.102 ops/s
Iteration  23: 3618701.539 ops/s
Iteration  24: 3560806.584 ops/s
Iteration  25: 3525091.701 ops/s
Iteration  26: 3587893.675 ops/s
Iteration  27: 3567961.536 ops/s
Iteration  28: 3584402.109 ops/s
Iteration  29: 3568554.409 ops/s
Iteration  30: 3547165.368 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_aggregateByNonMutating":
  3552149.083 ±(99.9%) 29963.536 ops/s [Average]
  (min, avg, max) = (3464640.402, 3552149.083, 3643579.744), stdev = 44848.014
  CI (99.9%): [3522185.546, 3582112.619] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  3552149.083 ± 29963.536  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1271615.872 ops/s
# Warmup Iteration   2: 2674891.437 ops/s
# Warmup Iteration   3: 3046787.453 ops/s
# Warmup Iteration   4: 2909158.227 ops/s
# Warmup Iteration   5: 2699118.313 ops/s
# Warmup Iteration   6: 3080298.082 ops/s
# Warmup Iteration   7: 3067395.008 ops/s
# Warmup Iteration   8: 3071905.631 ops/s
# Warmup Iteration   9: 3122151.727 ops/s
# Warmup Iteration  10: 3099447.954 ops/s
# Warmup Iteration  11: 3137678.305 ops/s
# Warmup Iteration  12: 3128491.336 ops/s
# Warmup Iteration  13: 3105923.108 ops/s
# Warmup Iteration  14: 3154173.364 ops/s
# Warmup Iteration  15: 3105734.481 ops/s
# Warmup Iteration  16: 3079115.858 ops/s
# Warmup Iteration  17: 2999931.020 ops/s
# Warmup Iteration  18: 2955920.751 ops/s
# Warmup Iteration  19: 3103336.873 ops/s
# Warmup Iteration  20: 3085263.521 ops/s
# Warmup Iteration  21: 3157152.609 ops/s
# Warmup Iteration  22: 3132827.988 ops/s
# Warmup Iteration  23: 3019517.400 ops/s
# Warmup Iteration  24: 3076428.803 ops/s
# Warmup Iteration  25: 3073036.047 ops/s
# Warmup Iteration  26: 3065414.199 ops/s
# Warmup Iteration  27: 3084311.352 ops/s
# Warmup Iteration  28: 3071376.248 ops/s
# Warmup Iteration  29: 3051630.466 ops/s
# Warmup Iteration  30: 3083335.505 ops/s
Iteration   1: 3120130.319 ops/s
Iteration   2: 3103846.093 ops/s
Iteration   3: 3085391.007 ops/s
Iteration   4: 3054295.052 ops/s
Iteration   5: 3022202.130 ops/s
Iteration   6: 3041859.164 ops/s
Iteration   7: 3170333.928 ops/s
Iteration   8: 3144286.870 ops/s
Iteration   9: 3138322.393 ops/s
Iteration  10: 3052192.213 ops/s
Iteration  11: 3064748.209 ops/s
Iteration  12: 3118197.870 ops/s
Iteration  13: 3029579.462 ops/s
Iteration  14: 3034399.900 ops/s
Iteration  15: 2868564.471 ops/s
Iteration  16: 2882027.375 ops/s
Iteration  17: 2921892.440 ops/s
Iteration  18: 2932934.331 ops/s
Iteration  19: 2895497.969 ops/s
Iteration  20: 2893644.520 ops/s
Iteration  21: 2942580.156 ops/s
Iteration  22: 2960155.336 ops/s
Iteration  23: 3135362.481 ops/s
Iteration  24: 3084028.193 ops/s
Iteration  25: 3097868.049 ops/s
Iteration  26: 3092898.851 ops/s
Iteration  27: 3044423.704 ops/s
Iteration  28: 2996963.974 ops/s
Iteration  29: 2925889.358 ops/s
Iteration  30: 2916221.845 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_allSatisfy":
  3025691.255 ±(99.9%) 60373.336 ops/s [Average]
  (min, avg, max) = (2868564.471, 3025691.255, 3170333.928), stdev = 90363.973
  CI (99.9%): [2965317.920, 3086064.591] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_allSatisfy  thrpt   30  3025691.255 ± 60373.336  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1750839.006 ops/s
# Warmup Iteration   2: 4605428.020 ops/s
# Warmup Iteration   3: 4828515.672 ops/s
# Warmup Iteration   4: 4238395.376 ops/s
# Warmup Iteration   5: 4973251.976 ops/s
# Warmup Iteration   6: 4687784.226 ops/s
# Warmup Iteration   7: 4959923.649 ops/s
# Warmup Iteration   8: 4764883.346 ops/s
# Warmup Iteration   9: 4756382.155 ops/s
# Warmup Iteration  10: 5060014.936 ops/s
# Warmup Iteration  11: 4953917.129 ops/s
# Warmup Iteration  12: 4961589.586 ops/s
# Warmup Iteration  13: 4771127.502 ops/s
# Warmup Iteration  14: 4714798.381 ops/s
# Warmup Iteration  15: 4817048.213 ops/s
# Warmup Iteration  16: 4876598.780 ops/s
# Warmup Iteration  17: 4789029.071 ops/s
# Warmup Iteration  18: 4796714.847 ops/s
# Warmup Iteration  19: 4716911.578 ops/s
# Warmup Iteration  20: 4763270.292 ops/s
# Warmup Iteration  21: 4750370.445 ops/s
# Warmup Iteration  22: 4704582.937 ops/s
# Warmup Iteration  23: 4837707.949 ops/s
# Warmup Iteration  24: 4791930.878 ops/s
# Warmup Iteration  25: 4721489.513 ops/s
# Warmup Iteration  26: 4761665.698 ops/s
# Warmup Iteration  27: 4770803.655 ops/s
# Warmup Iteration  28: 4853109.405 ops/s
# Warmup Iteration  29: 4717149.755 ops/s
# Warmup Iteration  30: 4703776.820 ops/s
Iteration   1: 4771637.090 ops/s
Iteration   2: 4618356.715 ops/s
Iteration   3: 4698875.844 ops/s
Iteration   4: 4653936.154 ops/s
Iteration   5: 4643417.423 ops/s
Iteration   6: 4833895.133 ops/s
Iteration   7: 4810777.170 ops/s
Iteration   8: 4701478.259 ops/s
Iteration   9: 4765935.020 ops/s
Iteration  10: 4774904.586 ops/s
Iteration  11: 4793141.715 ops/s
Iteration  12: 4778290.328 ops/s
Iteration  13: 4756347.288 ops/s
Iteration  14: 4688530.821 ops/s
Iteration  15: 4799556.263 ops/s
Iteration  16: 4704810.879 ops/s
Iteration  17: 4867841.727 ops/s
Iteration  18: 4663904.272 ops/s
Iteration  19: 5040272.433 ops/s
Iteration  20: 4722419.492 ops/s
Iteration  21: 4723232.213 ops/s
Iteration  22: 4795811.200 ops/s
Iteration  23: 4756853.450 ops/s
Iteration  24: 4736704.735 ops/s
Iteration  25: 4793123.074 ops/s
Iteration  26: 4732570.091 ops/s
Iteration  27: 4803225.039 ops/s
Iteration  28: 4696610.793 ops/s
Iteration  29: 4730521.837 ops/s
Iteration  30: 4801784.909 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_allSatisfyWith":
  4755292.198 ±(99.9%) 53414.933 ops/s [Average]
  (min, avg, max) = (4618356.715, 4755292.198, 5040272.433), stdev = 79948.963
  CI (99.9%): [4701877.266, 4808707.131] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  4755292.198 ± 53414.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1201959.906 ops/s
# Warmup Iteration   2: 2457024.621 ops/s
# Warmup Iteration   3: 2792093.133 ops/s
# Warmup Iteration   4: 2900665.262 ops/s
# Warmup Iteration   5: 2346984.911 ops/s
# Warmup Iteration   6: 2838345.594 ops/s
# Warmup Iteration   7: 2779913.433 ops/s
# Warmup Iteration   8: 2939660.805 ops/s
# Warmup Iteration   9: 2785962.800 ops/s
# Warmup Iteration  10: 2773298.300 ops/s
# Warmup Iteration  11: 2780456.189 ops/s
# Warmup Iteration  12: 2794886.304 ops/s
# Warmup Iteration  13: 2783411.748 ops/s
# Warmup Iteration  14: 2851367.628 ops/s
# Warmup Iteration  15: 2886520.899 ops/s
# Warmup Iteration  16: 2833989.667 ops/s
# Warmup Iteration  17: 2769674.440 ops/s
# Warmup Iteration  18: 2781500.490 ops/s
# Warmup Iteration  19: 2865759.868 ops/s
# Warmup Iteration  20: 2894050.928 ops/s
# Warmup Iteration  21: 2856073.259 ops/s
# Warmup Iteration  22: 3026279.847 ops/s
# Warmup Iteration  23: 2885631.904 ops/s
# Warmup Iteration  24: 2763989.667 ops/s
# Warmup Iteration  25: 2827422.547 ops/s
# Warmup Iteration  26: 2811609.846 ops/s
# Warmup Iteration  27: 2910156.410 ops/s
# Warmup Iteration  28: 2778981.867 ops/s
# Warmup Iteration  29: 2771209.826 ops/s
# Warmup Iteration  30: 2843353.285 ops/s
Iteration   1: 2759789.840 ops/s
Iteration   2: 2753722.793 ops/s
Iteration   3: 2766564.193 ops/s
Iteration   4: 2739880.629 ops/s
Iteration   5: 2895652.668 ops/s
Iteration   6: 2818545.681 ops/s
Iteration   7: 2804949.455 ops/s
Iteration   8: 2839346.909 ops/s
Iteration   9: 2922231.221 ops/s
Iteration  10: 2913691.410 ops/s
Iteration  11: 2912836.935 ops/s
Iteration  12: 2864561.067 ops/s
Iteration  13: 2793364.925 ops/s
Iteration  14: 2789261.451 ops/s
Iteration  15: 2751684.663 ops/s
Iteration  16: 2829975.053 ops/s
Iteration  17: 2723260.209 ops/s
Iteration  18: 2761160.595 ops/s
Iteration  19: 2791334.711 ops/s
Iteration  20: 2886029.162 ops/s
Iteration  21: 2794378.278 ops/s
Iteration  22: 2833429.831 ops/s
Iteration  23: 2825095.598 ops/s
Iteration  24: 2819972.986 ops/s
Iteration  25: 2752553.901 ops/s
Iteration  26: 2774515.870 ops/s
Iteration  27: 2781319.593 ops/s
Iteration  28: 2787648.535 ops/s
Iteration  29: 2790026.744 ops/s
Iteration  30: 2760399.344 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_anySatisfy":
  2807906.142 ±(99.9%) 36795.715 ops/s [Average]
  (min, avg, max) = (2723260.209, 2807906.142, 2922231.221), stdev = 55074.098
  CI (99.9%): [2771110.427, 2844701.856] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_anySatisfy  thrpt   30  2807906.142 ± 36795.715  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2113520.757 ops/s
# Warmup Iteration   2: 4813156.004 ops/s
# Warmup Iteration   3: 4819056.724 ops/s
# Warmup Iteration   4: 4075221.254 ops/s
# Warmup Iteration   5: 4879514.539 ops/s
# Warmup Iteration   6: 5022948.313 ops/s
# Warmup Iteration   7: 5019484.740 ops/s
# Warmup Iteration   8: 4872668.221 ops/s
# Warmup Iteration   9: 4817109.388 ops/s
# Warmup Iteration  10: 4864461.075 ops/s
# Warmup Iteration  11: 5106001.639 ops/s
# Warmup Iteration  12: 4971789.762 ops/s
# Warmup Iteration  13: 4803778.665 ops/s
# Warmup Iteration  14: 4904019.829 ops/s
# Warmup Iteration  15: 4901952.753 ops/s
# Warmup Iteration  16: 4997532.703 ops/s
# Warmup Iteration  17: 5005226.666 ops/s
# Warmup Iteration  18: 4898605.717 ops/s
# Warmup Iteration  19: 5020648.963 ops/s
# Warmup Iteration  20: 4959742.302 ops/s
# Warmup Iteration  21: 5057494.115 ops/s
# Warmup Iteration  22: 5171349.905 ops/s
# Warmup Iteration  23: 4895152.030 ops/s
# Warmup Iteration  24: 4885361.012 ops/s
# Warmup Iteration  25: 4845601.535 ops/s
# Warmup Iteration  26: 4810848.740 ops/s
# Warmup Iteration  27: 4931684.898 ops/s
# Warmup Iteration  28: 4782192.291 ops/s
# Warmup Iteration  29: 4899988.883 ops/s
# Warmup Iteration  30: 4776806.756 ops/s
Iteration   1: 4806162.933 ops/s
Iteration   2: 4780966.063 ops/s
Iteration   3: 4863661.569 ops/s
Iteration   4: 4836442.369 ops/s
Iteration   5: 4789612.310 ops/s
Iteration   6: 4750036.575 ops/s
Iteration   7: 4894242.948 ops/s
Iteration   8: 4816326.626 ops/s
Iteration   9: 4941543.452 ops/s
Iteration  10: 4802535.474 ops/s
Iteration  11: 4760749.201 ops/s
Iteration  12: 4772357.761 ops/s
Iteration  13: 4799256.910 ops/s
Iteration  14: 4918063.389 ops/s
Iteration  15: 5116596.382 ops/s
Iteration  16: 4808000.184 ops/s
Iteration  17: 4815343.914 ops/s
Iteration  18: 4964962.314 ops/s
Iteration  19: 4807048.934 ops/s
Iteration  20: 5183554.852 ops/s
Iteration  21: 4896171.127 ops/s
Iteration  22: 5178093.733 ops/s
Iteration  23: 5174346.064 ops/s
Iteration  24: 4928533.833 ops/s
Iteration  25: 4813788.768 ops/s
Iteration  26: 4841955.147 ops/s
Iteration  27: 4820358.319 ops/s
Iteration  28: 5042874.813 ops/s
Iteration  29: 4914204.892 ops/s
Iteration  30: 5207949.028 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_anySatisfyWith":
  4901524.663 ±(99.9%) 93600.642 ops/s [Average]
  (min, avg, max) = (4750036.575, 4901524.663, 5207949.028), stdev = 140097.045
  CI (99.9%): [4807924.021, 4995125.305] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  4901524.663 ± 93600.642  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 936337.118 ops/s
# Warmup Iteration   2: 2048506.604 ops/s
# Warmup Iteration   3: 2264412.795 ops/s
# Warmup Iteration   4: 2033519.210 ops/s
# Warmup Iteration   5: 1876069.276 ops/s
# Warmup Iteration   6: 2130502.974 ops/s
# Warmup Iteration   7: 2112907.295 ops/s
# Warmup Iteration   8: 2161745.069 ops/s
# Warmup Iteration   9: 2124323.059 ops/s
# Warmup Iteration  10: 2165364.879 ops/s
# Warmup Iteration  11: 2253468.599 ops/s
# Warmup Iteration  12: 2139248.029 ops/s
# Warmup Iteration  13: 2128719.172 ops/s
# Warmup Iteration  14: 2110533.709 ops/s
# Warmup Iteration  15: 2094758.237 ops/s
# Warmup Iteration  16: 2139332.860 ops/s
# Warmup Iteration  17: 2156692.534 ops/s
# Warmup Iteration  18: 2224812.595 ops/s
# Warmup Iteration  19: 2176085.020 ops/s
# Warmup Iteration  20: 2219079.796 ops/s
# Warmup Iteration  21: 2318180.638 ops/s
# Warmup Iteration  22: 2196499.322 ops/s
# Warmup Iteration  23: 2123702.289 ops/s
# Warmup Iteration  24: 2224353.598 ops/s
# Warmup Iteration  25: 2314380.798 ops/s
# Warmup Iteration  26: 2224029.840 ops/s
# Warmup Iteration  27: 2126059.686 ops/s
# Warmup Iteration  28: 2124474.508 ops/s
# Warmup Iteration  29: 2160356.262 ops/s
# Warmup Iteration  30: 2181741.433 ops/s
Iteration   1: 2316037.788 ops/s
Iteration   2: 2311979.483 ops/s
Iteration   3: 2277686.117 ops/s
Iteration   4: 2090922.407 ops/s
Iteration   5: 2139142.782 ops/s
Iteration   6: 2136913.051 ops/s
Iteration   7: 2143899.227 ops/s
Iteration   8: 2155404.460 ops/s
Iteration   9: 2160799.327 ops/s
Iteration  10: 2139552.475 ops/s
Iteration  11: 2181366.232 ops/s
Iteration  12: 2084901.284 ops/s
Iteration  13: 2114665.228 ops/s
Iteration  14: 2199340.867 ops/s
Iteration  15: 2228950.703 ops/s
Iteration  16: 2099836.894 ops/s
Iteration  17: 2188780.337 ops/s
Iteration  18: 2141247.599 ops/s
Iteration  19: 2137344.895 ops/s
Iteration  20: 2074028.725 ops/s
Iteration  21: 2129556.548 ops/s
Iteration  22: 2205971.992 ops/s
Iteration  23: 2174229.397 ops/s
Iteration  24: 2112875.564 ops/s
Iteration  25: 2177966.425 ops/s
Iteration  26: 2306267.669 ops/s
Iteration  27: 2202620.829 ops/s
Iteration  28: 2158035.811 ops/s
Iteration  29: 2114346.935 ops/s
Iteration  30: 2118026.494 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_appendString":
  2167423.252 ±(99.9%) 44053.794 ops/s [Average]
  (min, avg, max) = (2074028.725, 2167423.252, 2316037.788), stdev = 65937.650
  CI (99.9%): [2123369.457, 2211477.046] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_appendString  thrpt   30  2167423.252 ± 44053.794  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1510449.341 ops/s
# Warmup Iteration   2: 3492905.949 ops/s
# Warmup Iteration   3: 3500840.353 ops/s
# Warmup Iteration   4: 3216624.734 ops/s
# Warmup Iteration   5: 3564670.083 ops/s
# Warmup Iteration   6: 3600186.153 ops/s
# Warmup Iteration   7: 3593803.963 ops/s
# Warmup Iteration   8: 3555880.420 ops/s
# Warmup Iteration   9: 3538526.045 ops/s
# Warmup Iteration  10: 3605999.650 ops/s
# Warmup Iteration  11: 3644914.633 ops/s
# Warmup Iteration  12: 3885908.049 ops/s
# Warmup Iteration  13: 3644522.740 ops/s
# Warmup Iteration  14: 3707206.892 ops/s
# Warmup Iteration  15: 3560962.872 ops/s
# Warmup Iteration  16: 3510884.775 ops/s
# Warmup Iteration  17: 3573788.638 ops/s
# Warmup Iteration  18: 3564466.765 ops/s
# Warmup Iteration  19: 3569500.984 ops/s
# Warmup Iteration  20: 3700791.945 ops/s
# Warmup Iteration  21: 3672531.468 ops/s
# Warmup Iteration  22: 3643153.705 ops/s
# Warmup Iteration  23: 3586816.777 ops/s
# Warmup Iteration  24: 3642639.491 ops/s
# Warmup Iteration  25: 3682790.802 ops/s
# Warmup Iteration  26: 3721916.401 ops/s
# Warmup Iteration  27: 3645729.758 ops/s
# Warmup Iteration  28: 3823928.525 ops/s
# Warmup Iteration  29: 3778392.007 ops/s
# Warmup Iteration  30: 3778334.020 ops/s
Iteration   1: 3914049.472 ops/s
Iteration   2: 3910815.536 ops/s
Iteration   3: 3599932.195 ops/s
Iteration   4: 3492109.483 ops/s
Iteration   5: 3629481.581 ops/s
Iteration   6: 3578161.510 ops/s
Iteration   7: 3614456.617 ops/s
Iteration   8: 3580654.560 ops/s
Iteration   9: 3640210.688 ops/s
Iteration  10: 3615963.091 ops/s
Iteration  11: 3602869.946 ops/s
Iteration  12: 3513711.232 ops/s
Iteration  13: 3652984.639 ops/s
Iteration  14: 3679705.479 ops/s
Iteration  15: 3579160.022 ops/s
Iteration  16: 3545675.783 ops/s
Iteration  17: 3597968.721 ops/s
Iteration  18: 3578846.819 ops/s
Iteration  19: 3878757.065 ops/s
Iteration  20: 3635016.992 ops/s
Iteration  21: 3586806.794 ops/s
Iteration  22: 3777367.830 ops/s
Iteration  23: 3568740.144 ops/s
Iteration  24: 3493802.656 ops/s
Iteration  25: 3722722.314 ops/s
Iteration  26: 3904512.268 ops/s
Iteration  27: 3895600.228 ops/s
Iteration  28: 3890611.493 ops/s
Iteration  29: 3577882.667 ops/s
Iteration  30: 3546116.628 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_asLazy":
  3660156.482 ±(99.9%) 90184.387 ops/s [Average]
  (min, avg, max) = (3492109.483, 3660156.482, 3914049.472), stdev = 134983.755
  CI (99.9%): [3569972.095, 3750340.869] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_asLazy  thrpt   30  3660156.482 ± 90184.387  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2921388.514 ops/s
# Warmup Iteration   2: 6654694.351 ops/s
# Warmup Iteration   3: 5643372.282 ops/s
# Warmup Iteration   4: 6834058.222 ops/s
# Warmup Iteration   5: 6608369.108 ops/s
# Warmup Iteration   6: 6801207.980 ops/s
# Warmup Iteration   7: 6627007.071 ops/s
# Warmup Iteration   8: 6619323.148 ops/s
# Warmup Iteration   9: 6608839.916 ops/s
# Warmup Iteration  10: 6673930.818 ops/s
# Warmup Iteration  11: 6611486.710 ops/s
# Warmup Iteration  12: 6580454.867 ops/s
# Warmup Iteration  13: 6661323.743 ops/s
# Warmup Iteration  14: 6598600.317 ops/s
# Warmup Iteration  15: 6724432.467 ops/s
# Warmup Iteration  16: 6867058.030 ops/s
# Warmup Iteration  17: 6652351.422 ops/s
# Warmup Iteration  18: 6615172.611 ops/s
# Warmup Iteration  19: 6575097.045 ops/s
# Warmup Iteration  20: 6597070.115 ops/s
# Warmup Iteration  21: 6678941.692 ops/s
# Warmup Iteration  22: 6681965.306 ops/s
# Warmup Iteration  23: 6654867.761 ops/s
# Warmup Iteration  24: 6710453.095 ops/s
# Warmup Iteration  25: 6628361.847 ops/s
# Warmup Iteration  26: 6713403.688 ops/s
# Warmup Iteration  27: 6618427.228 ops/s
# Warmup Iteration  28: 6674922.831 ops/s
# Warmup Iteration  29: 6504104.625 ops/s
# Warmup Iteration  30: 6623721.052 ops/s
Iteration   1: 6709196.790 ops/s
Iteration   2: 6668184.070 ops/s
Iteration   3: 6784872.364 ops/s
Iteration   4: 6765074.440 ops/s
Iteration   5: 6574055.891 ops/s
Iteration   6: 6619228.719 ops/s
Iteration   7: 6664807.479 ops/s
Iteration   8: 6561353.311 ops/s
Iteration   9: 6679611.332 ops/s
Iteration  10: 6624764.805 ops/s
Iteration  11: 6608034.301 ops/s
Iteration  12: 6609610.335 ops/s
Iteration  13: 6657766.478 ops/s
Iteration  14: 6861968.300 ops/s
Iteration  15: 6553413.433 ops/s
Iteration  16: 6577276.993 ops/s
Iteration  17: 6669259.004 ops/s
Iteration  18: 6686327.273 ops/s
Iteration  19: 6583691.968 ops/s
Iteration  20: 6661453.382 ops/s
Iteration  21: 6629867.277 ops/s
Iteration  22: 6688239.059 ops/s
Iteration  23: 6478436.524 ops/s
Iteration  24: 6605185.395 ops/s
Iteration  25: 6673266.661 ops/s
Iteration  26: 6717352.495 ops/s
Iteration  27: 6702842.554 ops/s
Iteration  28: 6693067.672 ops/s
Iteration  29: 6627520.410 ops/s
Iteration  30: 6681977.465 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_asSynchronized":
  6653923.539 ±(99.9%) 50379.344 ops/s [Average]
  (min, avg, max) = (6478436.524, 6653923.539, 6861968.300), stdev = 75405.436
  CI (99.9%): [6603544.196, 6704302.883] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_asSynchronized  thrpt   30  6653923.539 ± 50379.344  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 450611.676 ops/s
# Warmup Iteration   2: 582013.582 ops/s
# Warmup Iteration   3: 709728.753 ops/s
# Warmup Iteration   4: 705669.041 ops/s
# Warmup Iteration   5: 705008.910 ops/s
# Warmup Iteration   6: 745269.595 ops/s
# Warmup Iteration   7: 740278.515 ops/s
# Warmup Iteration   8: 584920.199 ops/s
# Warmup Iteration   9: 719371.284 ops/s
# Warmup Iteration  10: 713900.884 ops/s
# Warmup Iteration  11: 717454.073 ops/s
# Warmup Iteration  12: 713857.564 ops/s
# Warmup Iteration  13: 704909.535 ops/s
# Warmup Iteration  14: 707578.264 ops/s
# Warmup Iteration  15: 710017.932 ops/s
# Warmup Iteration  16: 712398.170 ops/s
# Warmup Iteration  17: 750043.467 ops/s
# Warmup Iteration  18: 800693.724 ops/s
# Warmup Iteration  19: 790759.653 ops/s
# Warmup Iteration  20: 772766.176 ops/s
# Warmup Iteration  21: 771932.956 ops/s
# Warmup Iteration  22: 777074.370 ops/s
# Warmup Iteration  23: 766492.311 ops/s
# Warmup Iteration  24: 762782.971 ops/s
# Warmup Iteration  25: 770961.283 ops/s
# Warmup Iteration  26: 752966.761 ops/s
# Warmup Iteration  27: 765074.540 ops/s
# Warmup Iteration  28: 813373.523 ops/s
# Warmup Iteration  29: 809216.666 ops/s
# Warmup Iteration  30: 739263.749 ops/s
Iteration   1: 740637.520 ops/s
Iteration   2: 744531.689 ops/s
Iteration   3: 745374.246 ops/s
Iteration   4: 757459.662 ops/s
Iteration   5: 775151.863 ops/s
Iteration   6: 754046.093 ops/s
Iteration   7: 781653.966 ops/s
Iteration   8: 744465.903 ops/s
Iteration   9: 753014.311 ops/s
Iteration  10: 728809.130 ops/s
Iteration  11: 737561.354 ops/s
Iteration  12: 745956.122 ops/s
Iteration  13: 752857.175 ops/s
Iteration  14: 753826.761 ops/s
Iteration  15: 741416.803 ops/s
Iteration  16: 772452.074 ops/s
Iteration  17: 781791.240 ops/s
Iteration  18: 770195.716 ops/s
Iteration  19: 785653.373 ops/s
Iteration  20: 783366.081 ops/s
Iteration  21: 781016.871 ops/s
Iteration  22: 749429.856 ops/s
Iteration  23: 741693.929 ops/s
Iteration  24: 802004.468 ops/s
Iteration  25: 810540.945 ops/s
Iteration  26: 809957.957 ops/s
Iteration  27: 805696.770 ops/s
Iteration  28: 814586.903 ops/s
Iteration  29: 810920.364 ops/s
Iteration  30: 796253.715 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_asUnmodifiable":
  769077.429 ±(99.9%) 17594.047 ops/s [Average]
  (min, avg, max) = (728809.130, 769077.429, 814586.903), stdev = 26333.943
  CI (99.9%): [751483.382, 786671.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  769077.429 ± 17594.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1212045.327 ops/s
# Warmup Iteration   2: 3157268.309 ops/s
# Warmup Iteration   3: 2855215.722 ops/s
# Warmup Iteration   4: 3037141.062 ops/s
# Warmup Iteration   5: 3132265.757 ops/s
# Warmup Iteration   6: 3076008.296 ops/s
# Warmup Iteration   7: 3310294.784 ops/s
# Warmup Iteration   8: 3316781.715 ops/s
# Warmup Iteration   9: 3294611.684 ops/s
# Warmup Iteration  10: 3334329.359 ops/s
# Warmup Iteration  11: 3322450.075 ops/s
# Warmup Iteration  12: 3338534.076 ops/s
# Warmup Iteration  13: 3313330.168 ops/s
# Warmup Iteration  14: 3363608.704 ops/s
# Warmup Iteration  15: 3358760.581 ops/s
# Warmup Iteration  16: 3363347.240 ops/s
# Warmup Iteration  17: 3351329.448 ops/s
# Warmup Iteration  18: 3357755.698 ops/s
# Warmup Iteration  19: 3360909.926 ops/s
# Warmup Iteration  20: 3361964.313 ops/s
# Warmup Iteration  21: 3346098.715 ops/s
# Warmup Iteration  22: 3365668.634 ops/s
# Warmup Iteration  23: 3354521.047 ops/s
# Warmup Iteration  24: 3293449.239 ops/s
# Warmup Iteration  25: 3284238.602 ops/s
# Warmup Iteration  26: 3357492.364 ops/s
# Warmup Iteration  27: 3279703.955 ops/s
# Warmup Iteration  28: 3333786.706 ops/s
# Warmup Iteration  29: 3315671.887 ops/s
# Warmup Iteration  30: 3153302.366 ops/s
Iteration   1: 3171147.546 ops/s
Iteration   2: 3275136.251 ops/s
Iteration   3: 3313937.747 ops/s
Iteration   4: 3253396.036 ops/s
Iteration   5: 3368370.130 ops/s
Iteration   6: 3239639.955 ops/s
Iteration   7: 3314194.800 ops/s
Iteration   8: 3338699.753 ops/s
Iteration   9: 3348177.657 ops/s
Iteration  10: 3243555.075 ops/s
Iteration  11: 3236090.812 ops/s
Iteration  12: 3332036.199 ops/s
Iteration  13: 3328585.257 ops/s
Iteration  14: 3364775.631 ops/s
Iteration  15: 3356012.318 ops/s
Iteration  16: 3360457.173 ops/s
Iteration  17: 3290345.555 ops/s
Iteration  18: 3313485.950 ops/s
Iteration  19: 3349053.819 ops/s
Iteration  20: 3308687.403 ops/s
Iteration  21: 3256885.268 ops/s
Iteration  22: 3284438.528 ops/s
Iteration  23: 3315393.542 ops/s
Iteration  24: 3353702.504 ops/s
Iteration  25: 3354438.998 ops/s
Iteration  26: 3359922.762 ops/s
Iteration  27: 3356860.229 ops/s
Iteration  28: 3338522.453 ops/s
Iteration  29: 3233876.924 ops/s
Iteration  30: 3345041.979 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_chunk":
  3310162.275 ±(99.9%) 33881.607 ops/s [Average]
  (min, avg, max) = (3171147.546, 3310162.275, 3368370.130), stdev = 50712.398
  CI (99.9%): [3276280.668, 3344043.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_chunk  thrpt   30  3310162.275 ± 33881.607  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 558520.831 ops/s
# Warmup Iteration   2: 1266156.020 ops/s
# Warmup Iteration   3: 1706911.967 ops/s
# Warmup Iteration   4: 1427096.810 ops/s
# Warmup Iteration   5: 1713510.890 ops/s
# Warmup Iteration   6: 1696779.525 ops/s
# Warmup Iteration   7: 1711954.874 ops/s
# Warmup Iteration   8: 1712871.511 ops/s
# Warmup Iteration   9: 1696744.661 ops/s
# Warmup Iteration  10: 1698092.483 ops/s
# Warmup Iteration  11: 1702252.814 ops/s
# Warmup Iteration  12: 1699853.351 ops/s
# Warmup Iteration  13: 1685876.063 ops/s
# Warmup Iteration  14: 1619102.379 ops/s
# Warmup Iteration  15: 1645258.488 ops/s
# Warmup Iteration  16: 1677985.191 ops/s
# Warmup Iteration  17: 1705404.428 ops/s
# Warmup Iteration  18: 1700785.018 ops/s
# Warmup Iteration  19: 1704776.332 ops/s
# Warmup Iteration  20: 1710161.676 ops/s
# Warmup Iteration  21: 1697408.223 ops/s
# Warmup Iteration  22: 1701455.459 ops/s
# Warmup Iteration  23: 1704964.562 ops/s
# Warmup Iteration  24: 1709454.805 ops/s
# Warmup Iteration  25: 1711294.591 ops/s
# Warmup Iteration  26: 1711050.130 ops/s
# Warmup Iteration  27: 1712368.151 ops/s
# Warmup Iteration  28: 1707540.401 ops/s
# Warmup Iteration  29: 1701945.126 ops/s
# Warmup Iteration  30: 1710992.496 ops/s
Iteration   1: 1708955.810 ops/s
Iteration   2: 1698640.527 ops/s
Iteration   3: 1707974.414 ops/s
Iteration   4: 1708960.759 ops/s
Iteration   5: 1708223.711 ops/s
Iteration   6: 1708694.797 ops/s
Iteration   7: 1705422.401 ops/s
Iteration   8: 1706347.273 ops/s
Iteration   9: 1697331.825 ops/s
Iteration  10: 1720723.810 ops/s
Iteration  11: 1689618.457 ops/s
Iteration  12: 1570849.760 ops/s
Iteration  13: 1599087.640 ops/s
Iteration  14: 1669250.015 ops/s
Iteration  15: 1697266.127 ops/s
Iteration  16: 1700824.065 ops/s
Iteration  17: 1586035.791 ops/s
Iteration  18: 1563139.430 ops/s
Iteration  19: 1560242.722 ops/s
Iteration  20: 1568443.208 ops/s
Iteration  21: 1575211.056 ops/s
Iteration  22: 1566933.614 ops/s
Iteration  23: 1685773.648 ops/s
Iteration  24: 1534867.494 ops/s
Iteration  25: 1581622.674 ops/s
Iteration  26: 1565444.877 ops/s
Iteration  27: 1568464.490 ops/s
Iteration  28: 1579906.379 ops/s
Iteration  29: 1568147.905 ops/s
Iteration  30: 1599597.641 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_clear":
  1636733.411 ±(99.9%) 44618.076 ops/s [Average]
  (min, avg, max) = (1534867.494, 1636733.411, 1720723.810), stdev = 66782.241
  CI (99.9%): [1592115.334, 1681351.487] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_clear  thrpt   30  1636733.411 ± 44618.076  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_clearEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_clearEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 820035.228 ops/s
# Warmup Iteration   2: 1285234.217 ops/s
# Warmup Iteration   3: 1989537.843 ops/s
# Warmup Iteration   4: 2000100.473 ops/s
# Warmup Iteration   5: 1989006.609 ops/s
# Warmup Iteration   6: 1794747.509 ops/s
# Warmup Iteration   7: 2015988.846 ops/s
# Warmup Iteration   8: 2084179.787 ops/s
# Warmup Iteration   9: 2041723.795 ops/s
# Warmup Iteration  10: 2023102.959 ops/s
# Warmup Iteration  11: 2065482.053 ops/s
# Warmup Iteration  12: 2026750.159 ops/s
# Warmup Iteration  13: 2139965.742 ops/s
# Warmup Iteration  14: 2184143.683 ops/s
# Warmup Iteration  15: 2093381.371 ops/s
# Warmup Iteration  16: 2015996.843 ops/s
# Warmup Iteration  17: 2124796.925 ops/s
# Warmup Iteration  18: 2200739.385 ops/s
# Warmup Iteration  19: 2101250.430 ops/s
# Warmup Iteration  20: 2027574.447 ops/s
# Warmup Iteration  21: 2011799.966 ops/s
# Warmup Iteration  22: 2018808.995 ops/s
# Warmup Iteration  23: 2021950.553 ops/s
# Warmup Iteration  24: 2018387.939 ops/s
# Warmup Iteration  25: 2143641.092 ops/s
# Warmup Iteration  26: 2009789.428 ops/s
# Warmup Iteration  27: 1995858.790 ops/s
# Warmup Iteration  28: 2079995.676 ops/s
# Warmup Iteration  29: 2061755.246 ops/s
# Warmup Iteration  30: 2083119.419 ops/s
Iteration   1: 2043432.093 ops/s
Iteration   2: 2099824.202 ops/s
Iteration   3: 2178561.843 ops/s
Iteration   4: 2024689.632 ops/s
Iteration   5: 2030582.904 ops/s
Iteration   6: 2056540.091 ops/s
Iteration   7: 2198399.552 ops/s
Iteration   8: 2206984.349 ops/s
Iteration   9: 2149084.967 ops/s
Iteration  10: 2097069.691 ops/s
Iteration  11: 2068185.434 ops/s
Iteration  12: 2053031.027 ops/s
Iteration  13: 2084438.058 ops/s
Iteration  14: 2054055.765 ops/s
Iteration  15: 2018244.687 ops/s
Iteration  16: 2077459.167 ops/s
Iteration  17: 2053786.314 ops/s
Iteration  18: 2206730.428 ops/s
Iteration  19: 2206102.075 ops/s
Iteration  20: 2203324.255 ops/s
Iteration  21: 2152834.390 ops/s
Iteration  22: 2085236.873 ops/s
Iteration  23: 2100485.406 ops/s
Iteration  24: 2048143.181 ops/s
Iteration  25: 2031801.712 ops/s
Iteration  26: 2134120.553 ops/s
Iteration  27: 2051788.586 ops/s
Iteration  28: 2199398.219 ops/s
Iteration  29: 2120018.715 ops/s
Iteration  30: 2050136.790 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_clearEntrySet":
  2102816.365 ±(99.9%) 42957.571 ops/s [Average]
  (min, avg, max) = (2018244.687, 2102816.365, 2206984.349), stdev = 64296.876
  CI (99.9%): [2059858.794, 2145773.937] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_clearEntrySet  thrpt   30  2102816.365 ± 42957.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_clearKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_clearKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 847386.594 ops/s
# Warmup Iteration   2: 1284789.799 ops/s
# Warmup Iteration   3: 2043801.561 ops/s
# Warmup Iteration   4: 2005224.749 ops/s
# Warmup Iteration   5: 1937553.563 ops/s
# Warmup Iteration   6: 1828682.233 ops/s
# Warmup Iteration   7: 2034231.086 ops/s
# Warmup Iteration   8: 2048063.224 ops/s
# Warmup Iteration   9: 2080665.486 ops/s
# Warmup Iteration  10: 2009502.244 ops/s
# Warmup Iteration  11: 2028563.756 ops/s
# Warmup Iteration  12: 2042354.244 ops/s
# Warmup Iteration  13: 2031503.773 ops/s
# Warmup Iteration  14: 2028684.558 ops/s
# Warmup Iteration  15: 2072062.578 ops/s
# Warmup Iteration  16: 2179219.133 ops/s
# Warmup Iteration  17: 2131094.649 ops/s
# Warmup Iteration  18: 2049865.587 ops/s
# Warmup Iteration  19: 2148639.904 ops/s
# Warmup Iteration  20: 2038583.244 ops/s
# Warmup Iteration  21: 2071637.120 ops/s
# Warmup Iteration  22: 2032068.560 ops/s
# Warmup Iteration  23: 2109838.511 ops/s
# Warmup Iteration  24: 2037296.011 ops/s
# Warmup Iteration  25: 2206990.863 ops/s
# Warmup Iteration  26: 2096023.424 ops/s
# Warmup Iteration  27: 2124228.639 ops/s
# Warmup Iteration  28: 2100532.289 ops/s
# Warmup Iteration  29: 2188025.736 ops/s
# Warmup Iteration  30: 2198863.224 ops/s
Iteration   1: 2213692.073 ops/s
Iteration   2: 2097497.292 ops/s
Iteration   3: 2015004.839 ops/s
Iteration   4: 2030177.398 ops/s
Iteration   5: 2034918.017 ops/s
Iteration   6: 2033725.009 ops/s
Iteration   7: 2074902.754 ops/s
Iteration   8: 2116139.056 ops/s
Iteration   9: 2099421.470 ops/s
Iteration  10: 2095138.542 ops/s
Iteration  11: 2110211.640 ops/s
Iteration  12: 2010547.321 ops/s
Iteration  13: 2172736.635 ops/s
Iteration  14: 2208484.193 ops/s
Iteration  15: 2174192.070 ops/s
Iteration  16: 2084651.588 ops/s
Iteration  17: 2097230.692 ops/s
Iteration  18: 2155523.155 ops/s
Iteration  19: 2078938.573 ops/s
Iteration  20: 2092509.924 ops/s
Iteration  21: 2128551.756 ops/s
Iteration  22: 2075853.841 ops/s
Iteration  23: 2096856.934 ops/s
Iteration  24: 2124505.426 ops/s
Iteration  25: 2207789.066 ops/s
Iteration  26: 2169473.626 ops/s
Iteration  27: 2110882.367 ops/s
Iteration  28: 2122346.161 ops/s
Iteration  29: 2119932.018 ops/s
Iteration  30: 2090772.510 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_clearKeySet":
  2108086.865 ±(99.9%) 36522.806 ops/s [Average]
  (min, avg, max) = (2010547.321, 2108086.865, 2213692.073), stdev = 54665.620
  CI (99.9%): [2071564.059, 2144609.671] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_clearKeySet  thrpt   30  2108086.865 ± 36522.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 468336.013 ops/s
# Warmup Iteration   2: 888108.318 ops/s
# Warmup Iteration   3: 1021552.065 ops/s
# Warmup Iteration   4: 1018942.418 ops/s
# Warmup Iteration   5: 1073819.635 ops/s
# Warmup Iteration   6: 835514.958 ops/s
# Warmup Iteration   7: 1029429.331 ops/s
# Warmup Iteration   8: 1010924.556 ops/s
# Warmup Iteration   9: 1019578.118 ops/s
# Warmup Iteration  10: 1074600.971 ops/s
# Warmup Iteration  11: 1008518.848 ops/s
# Warmup Iteration  12: 1047917.172 ops/s
# Warmup Iteration  13: 1010953.662 ops/s
# Warmup Iteration  14: 1058083.933 ops/s
# Warmup Iteration  15: 1060928.384 ops/s
# Warmup Iteration  16: 1020837.215 ops/s
# Warmup Iteration  17: 1012902.910 ops/s
# Warmup Iteration  18: 1045894.098 ops/s
# Warmup Iteration  19: 998337.422 ops/s
# Warmup Iteration  20: 1016236.744 ops/s
# Warmup Iteration  21: 1004281.248 ops/s
# Warmup Iteration  22: 1020014.244 ops/s
# Warmup Iteration  23: 1017841.058 ops/s
# Warmup Iteration  24: 1036551.226 ops/s
# Warmup Iteration  25: 1017619.953 ops/s
# Warmup Iteration  26: 1008996.928 ops/s
# Warmup Iteration  27: 1025060.703 ops/s
# Warmup Iteration  28: 1022850.413 ops/s
# Warmup Iteration  29: 1009584.681 ops/s
# Warmup Iteration  30: 1017844.331 ops/s
Iteration   1: 992885.137 ops/s
Iteration   2: 1016732.981 ops/s
Iteration   3: 1021343.496 ops/s
Iteration   4: 1051313.979 ops/s
Iteration   5: 1020040.404 ops/s
Iteration   6: 1053289.161 ops/s
Iteration   7: 1043389.048 ops/s
Iteration   8: 1004200.481 ops/s
Iteration   9: 1016567.665 ops/s
Iteration  10: 1011410.886 ops/s
Iteration  11: 1006489.736 ops/s
Iteration  12: 1013450.082 ops/s
Iteration  13: 1032478.566 ops/s
Iteration  14: 1019641.803 ops/s
Iteration  15: 1060799.998 ops/s
Iteration  16: 1102859.887 ops/s
Iteration  17: 1111106.121 ops/s
Iteration  18: 1100510.842 ops/s
Iteration  19: 1012636.682 ops/s
Iteration  20: 1017101.561 ops/s
Iteration  21: 1018451.385 ops/s
Iteration  22: 1019088.539 ops/s
Iteration  23: 1026155.540 ops/s
Iteration  24: 1014282.086 ops/s
Iteration  25: 1029756.506 ops/s
Iteration  26: 1022801.224 ops/s
Iteration  27: 1026677.093 ops/s
Iteration  28: 1060760.152 ops/s
Iteration  29: 1072447.426 ops/s
Iteration  30: 1055330.869 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collect":
  1035133.311 ±(99.9%) 20191.278 ops/s [Average]
  (min, avg, max) = (992885.137, 1035133.311, 1111106.121), stdev = 30221.357
  CI (99.9%): [1014942.033, 1055324.589] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collect  thrpt   30  1035133.311 ± 20191.278  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2138568.304 ops/s
# Warmup Iteration   2: 4714260.762 ops/s
# Warmup Iteration   3: 4455665.136 ops/s
# Warmup Iteration   4: 4379479.655 ops/s
# Warmup Iteration   5: 4945093.483 ops/s
# Warmup Iteration   6: 5173628.541 ops/s
# Warmup Iteration   7: 5190772.664 ops/s
# Warmup Iteration   8: 5035193.105 ops/s
# Warmup Iteration   9: 4828235.032 ops/s
# Warmup Iteration  10: 4803099.706 ops/s
# Warmup Iteration  11: 5073050.106 ops/s
# Warmup Iteration  12: 4863831.614 ops/s
# Warmup Iteration  13: 4903189.681 ops/s
# Warmup Iteration  14: 4971264.034 ops/s
# Warmup Iteration  15: 4840647.298 ops/s
# Warmup Iteration  16: 4821788.321 ops/s
# Warmup Iteration  17: 4741594.878 ops/s
# Warmup Iteration  18: 5055599.726 ops/s
# Warmup Iteration  19: 5173558.479 ops/s
# Warmup Iteration  20: 5091436.343 ops/s
# Warmup Iteration  21: 4791787.610 ops/s
# Warmup Iteration  22: 4837809.831 ops/s
# Warmup Iteration  23: 4839168.108 ops/s
# Warmup Iteration  24: 4907915.077 ops/s
# Warmup Iteration  25: 5170521.779 ops/s
# Warmup Iteration  26: 5129848.174 ops/s
# Warmup Iteration  27: 4996507.912 ops/s
# Warmup Iteration  28: 4816293.126 ops/s
# Warmup Iteration  29: 4813982.246 ops/s
# Warmup Iteration  30: 4844181.789 ops/s
Iteration   1: 5126665.739 ops/s
Iteration   2: 4988542.216 ops/s
Iteration   3: 4744154.829 ops/s
Iteration   4: 4780815.426 ops/s
Iteration   5: 5020353.212 ops/s
Iteration   6: 4843098.646 ops/s
Iteration   7: 4751802.492 ops/s
Iteration   8: 4940638.624 ops/s
Iteration   9: 4804110.679 ops/s
Iteration  10: 4779742.675 ops/s
Iteration  11: 4839905.852 ops/s
Iteration  12: 5009337.802 ops/s
Iteration  13: 5159034.083 ops/s
Iteration  14: 5175465.457 ops/s
Iteration  15: 5157781.390 ops/s
Iteration  16: 5170581.196 ops/s
Iteration  17: 5085204.324 ops/s
Iteration  18: 4717890.315 ops/s
Iteration  19: 5161460.725 ops/s
Iteration  20: 5030308.896 ops/s
Iteration  21: 4677442.680 ops/s
Iteration  22: 4794128.002 ops/s
Iteration  23: 4748877.830 ops/s
Iteration  24: 5000013.132 ops/s
Iteration  25: 5130249.538 ops/s
Iteration  26: 5188988.471 ops/s
Iteration  27: 5202170.947 ops/s
Iteration  28: 5018906.103 ops/s
Iteration  29: 4718489.765 ops/s
Iteration  30: 4790419.254 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectBoolean":
  4951886.010 ±(99.9%) 118576.103 ops/s [Average]
  (min, avg, max) = (4677442.680, 4951886.010, 5202170.947), stdev = 177479.143
  CI (99.9%): [4833309.907, 5070462.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectBoolean  thrpt   30  4951886.010 ± 118576.103  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2068303.705 ops/s
# Warmup Iteration   2: 4718218.405 ops/s
# Warmup Iteration   3: 4356447.719 ops/s
# Warmup Iteration   4: 4000389.616 ops/s
# Warmup Iteration   5: 4419090.330 ops/s
# Warmup Iteration   6: 4510412.060 ops/s
# Warmup Iteration   7: 4626287.891 ops/s
# Warmup Iteration   8: 4538004.764 ops/s
# Warmup Iteration   9: 4653455.688 ops/s
# Warmup Iteration  10: 4726525.779 ops/s
# Warmup Iteration  11: 4435362.156 ops/s
# Warmup Iteration  12: 4367269.232 ops/s
# Warmup Iteration  13: 4572417.043 ops/s
# Warmup Iteration  14: 4499823.962 ops/s
# Warmup Iteration  15: 4544576.373 ops/s
# Warmup Iteration  16: 4376130.197 ops/s
# Warmup Iteration  17: 4476438.276 ops/s
# Warmup Iteration  18: 4531744.934 ops/s
# Warmup Iteration  19: 4622887.939 ops/s
# Warmup Iteration  20: 4530553.646 ops/s
# Warmup Iteration  21: 4631721.132 ops/s
# Warmup Iteration  22: 4547233.755 ops/s
# Warmup Iteration  23: 4478702.889 ops/s
# Warmup Iteration  24: 4571301.868 ops/s
# Warmup Iteration  25: 4507785.130 ops/s
# Warmup Iteration  26: 4550975.026 ops/s
# Warmup Iteration  27: 4459637.517 ops/s
# Warmup Iteration  28: 4679907.428 ops/s
# Warmup Iteration  29: 4632828.382 ops/s
# Warmup Iteration  30: 4425602.076 ops/s
Iteration   1: 4563353.387 ops/s
Iteration   2: 4502056.326 ops/s
Iteration   3: 4352562.770 ops/s
Iteration   4: 4435293.139 ops/s
Iteration   5: 4458671.991 ops/s
Iteration   6: 4514750.596 ops/s
Iteration   7: 4619889.430 ops/s
Iteration   8: 4508317.406 ops/s
Iteration   9: 4590542.216 ops/s
Iteration  10: 4561824.344 ops/s
Iteration  11: 4756537.550 ops/s
Iteration  12: 4789251.967 ops/s
Iteration  13: 4530732.355 ops/s
Iteration  14: 4653546.417 ops/s
Iteration  15: 4598595.877 ops/s
Iteration  16: 4783159.285 ops/s
Iteration  17: 4498918.364 ops/s
Iteration  18: 4403854.338 ops/s
Iteration  19: 4458048.795 ops/s
Iteration  20: 4318247.817 ops/s
Iteration  21: 4347543.926 ops/s
Iteration  22: 4428406.355 ops/s
Iteration  23: 4372981.369 ops/s
Iteration  24: 4406708.181 ops/s
Iteration  25: 4508588.839 ops/s
Iteration  26: 4442649.333 ops/s
Iteration  27: 4428945.725 ops/s
Iteration  28: 4420616.285 ops/s
Iteration  29: 4479316.466 ops/s
Iteration  30: 4418070.809 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectBooleanWithTarget":
  4505066.055 ±(99.9%) 82347.934 ops/s [Average]
  (min, avg, max) = (4318247.817, 4505066.055, 4789251.967), stdev = 123254.520
  CI (99.9%): [4422718.122, 4587413.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  4505066.055 ± 82347.934  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 817822.977 ops/s
# Warmup Iteration   2: 2140614.909 ops/s
# Warmup Iteration   3: 2248572.060 ops/s
# Warmup Iteration   4: 1757367.477 ops/s
# Warmup Iteration   5: 2145265.380 ops/s
# Warmup Iteration   6: 2153140.324 ops/s
# Warmup Iteration   7: 2133923.078 ops/s
# Warmup Iteration   8: 2211041.891 ops/s
# Warmup Iteration   9: 2179161.136 ops/s
# Warmup Iteration  10: 2282136.626 ops/s
# Warmup Iteration  11: 2327486.075 ops/s
# Warmup Iteration  12: 2234924.458 ops/s
# Warmup Iteration  13: 2145000.193 ops/s
# Warmup Iteration  14: 2157611.356 ops/s
# Warmup Iteration  15: 2144292.754 ops/s
# Warmup Iteration  16: 2132487.104 ops/s
# Warmup Iteration  17: 2109663.081 ops/s
# Warmup Iteration  18: 2169584.966 ops/s
# Warmup Iteration  19: 2128107.389 ops/s
# Warmup Iteration  20: 2142390.789 ops/s
# Warmup Iteration  21: 2215786.817 ops/s
# Warmup Iteration  22: 2138683.616 ops/s
# Warmup Iteration  23: 2177001.596 ops/s
# Warmup Iteration  24: 2117980.260 ops/s
# Warmup Iteration  25: 2135366.761 ops/s
# Warmup Iteration  26: 2151640.027 ops/s
# Warmup Iteration  27: 2222188.361 ops/s
# Warmup Iteration  28: 2215946.375 ops/s
# Warmup Iteration  29: 2142450.673 ops/s
# Warmup Iteration  30: 2116597.411 ops/s
Iteration   1: 2153165.645 ops/s
Iteration   2: 2200052.783 ops/s
Iteration   3: 2142608.401 ops/s
Iteration   4: 2205717.215 ops/s
Iteration   5: 2133686.643 ops/s
Iteration   6: 2204176.798 ops/s
Iteration   7: 2274475.562 ops/s
Iteration   8: 2124575.850 ops/s
Iteration   9: 2112725.069 ops/s
Iteration  10: 2143473.618 ops/s
Iteration  11: 2136838.255 ops/s
Iteration  12: 2214183.204 ops/s
Iteration  13: 2148828.980 ops/s
Iteration  14: 2135868.925 ops/s
Iteration  15: 2142920.606 ops/s
Iteration  16: 2105899.713 ops/s
Iteration  17: 2218812.757 ops/s
Iteration  18: 2164327.706 ops/s
Iteration  19: 2175978.899 ops/s
Iteration  20: 2237445.278 ops/s
Iteration  21: 2232791.592 ops/s
Iteration  22: 2198497.451 ops/s
Iteration  23: 2209292.489 ops/s
Iteration  24: 2190669.770 ops/s
Iteration  25: 2209464.693 ops/s
Iteration  26: 2155415.098 ops/s
Iteration  27: 2155903.621 ops/s
Iteration  28: 2086291.903 ops/s
Iteration  29: 2124792.916 ops/s
Iteration  30: 2108008.451 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectByte":
  2168229.663 ±(99.9%) 30557.158 ops/s [Average]
  (min, avg, max) = (2086291.903, 2168229.663, 2274475.562), stdev = 45736.519
  CI (99.9%): [2137672.505, 2198786.821] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectByte  thrpt   30  2168229.663 ± 30557.158  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 810833.876 ops/s
# Warmup Iteration   2: 2163177.284 ops/s
# Warmup Iteration   3: 2193856.356 ops/s
# Warmup Iteration   4: 1758689.212 ops/s
# Warmup Iteration   5: 2211624.185 ops/s
# Warmup Iteration   6: 2126785.466 ops/s
# Warmup Iteration   7: 2136583.495 ops/s
# Warmup Iteration   8: 2159486.796 ops/s
# Warmup Iteration   9: 2191750.589 ops/s
# Warmup Iteration  10: 2115382.784 ops/s
# Warmup Iteration  11: 2138755.669 ops/s
# Warmup Iteration  12: 2115189.288 ops/s
# Warmup Iteration  13: 2145153.778 ops/s
# Warmup Iteration  14: 2164795.194 ops/s
# Warmup Iteration  15: 2153913.406 ops/s
# Warmup Iteration  16: 2155361.860 ops/s
# Warmup Iteration  17: 2181731.004 ops/s
# Warmup Iteration  18: 2188776.045 ops/s
# Warmup Iteration  19: 2157154.149 ops/s
# Warmup Iteration  20: 2203630.650 ops/s
# Warmup Iteration  21: 2172780.182 ops/s
# Warmup Iteration  22: 2162599.077 ops/s
# Warmup Iteration  23: 2108521.858 ops/s
# Warmup Iteration  24: 2130262.753 ops/s
# Warmup Iteration  25: 2146654.418 ops/s
# Warmup Iteration  26: 2232197.406 ops/s
# Warmup Iteration  27: 2167803.047 ops/s
# Warmup Iteration  28: 2125209.558 ops/s
# Warmup Iteration  29: 2167481.328 ops/s
# Warmup Iteration  30: 2085706.366 ops/s
Iteration   1: 2192829.904 ops/s
Iteration   2: 2113844.348 ops/s
Iteration   3: 2227803.854 ops/s
Iteration   4: 2098382.350 ops/s
Iteration   5: 2219101.707 ops/s
Iteration   6: 2211127.233 ops/s
Iteration   7: 2202854.783 ops/s
Iteration   8: 2115721.852 ops/s
Iteration   9: 2112266.210 ops/s
Iteration  10: 2126967.093 ops/s
Iteration  11: 2133600.598 ops/s
Iteration  12: 2114925.673 ops/s
Iteration  13: 2175308.826 ops/s
Iteration  14: 2186481.598 ops/s
Iteration  15: 2201891.043 ops/s
Iteration  16: 2203166.323 ops/s
Iteration  17: 2178338.053 ops/s
Iteration  18: 2174856.508 ops/s
Iteration  19: 2122664.420 ops/s
Iteration  20: 2183680.146 ops/s
Iteration  21: 2118036.137 ops/s
Iteration  22: 2153871.442 ops/s
Iteration  23: 2133902.089 ops/s
Iteration  24: 2120974.034 ops/s
Iteration  25: 2126421.838 ops/s
Iteration  26: 2084139.616 ops/s
Iteration  27: 2103262.142 ops/s
Iteration  28: 2075478.003 ops/s
Iteration  29: 2075243.985 ops/s
Iteration  30: 2070185.248 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectByteWithTarget":
  2145244.235 ±(99.9%) 31542.053 ops/s [Average]
  (min, avg, max) = (2070185.248, 2145244.235, 2227803.854), stdev = 47210.664
  CI (99.9%): [2113702.182, 2176786.289] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  2145244.235 ± 31542.053  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 828902.595 ops/s
# Warmup Iteration   2: 2184810.388 ops/s
# Warmup Iteration   3: 2191897.041 ops/s
# Warmup Iteration   4: 1802838.894 ops/s
# Warmup Iteration   5: 2183478.355 ops/s
# Warmup Iteration   6: 2227983.915 ops/s
# Warmup Iteration   7: 2228052.980 ops/s
# Warmup Iteration   8: 2190521.194 ops/s
# Warmup Iteration   9: 2252585.760 ops/s
# Warmup Iteration  10: 2227415.266 ops/s
# Warmup Iteration  11: 2362941.387 ops/s
# Warmup Iteration  12: 2193674.371 ops/s
# Warmup Iteration  13: 2256482.302 ops/s
# Warmup Iteration  14: 2331529.742 ops/s
# Warmup Iteration  15: 2274645.374 ops/s
# Warmup Iteration  16: 2371335.388 ops/s
# Warmup Iteration  17: 2301582.969 ops/s
# Warmup Iteration  18: 2287938.495 ops/s
# Warmup Iteration  19: 2161985.289 ops/s
# Warmup Iteration  20: 2207978.745 ops/s
# Warmup Iteration  21: 2198764.896 ops/s
# Warmup Iteration  22: 2190635.221 ops/s
# Warmup Iteration  23: 2191915.583 ops/s
# Warmup Iteration  24: 2255247.412 ops/s
# Warmup Iteration  25: 2227800.477 ops/s
# Warmup Iteration  26: 2209121.641 ops/s
# Warmup Iteration  27: 2212197.351 ops/s
# Warmup Iteration  28: 2252637.268 ops/s
# Warmup Iteration  29: 2240905.087 ops/s
# Warmup Iteration  30: 2238407.805 ops/s
Iteration   1: 2258440.695 ops/s
Iteration   2: 2260023.897 ops/s
Iteration   3: 2221194.176 ops/s
Iteration   4: 2218791.780 ops/s
Iteration   5: 2211511.730 ops/s
Iteration   6: 2342547.991 ops/s
Iteration   7: 2379500.270 ops/s
Iteration   8: 2216569.067 ops/s
Iteration   9: 2226986.949 ops/s
Iteration  10: 2375850.205 ops/s
Iteration  11: 2284265.123 ops/s
Iteration  12: 2188175.294 ops/s
Iteration  13: 2262883.059 ops/s
Iteration  14: 2347703.346 ops/s
Iteration  15: 2268355.359 ops/s
Iteration  16: 2371988.948 ops/s
Iteration  17: 2228079.294 ops/s
Iteration  18: 2189147.297 ops/s
Iteration  19: 2362135.864 ops/s
Iteration  20: 2240676.231 ops/s
Iteration  21: 2225443.007 ops/s
Iteration  22: 2154508.239 ops/s
Iteration  23: 2195178.773 ops/s
Iteration  24: 2175602.882 ops/s
Iteration  25: 2237585.251 ops/s
Iteration  26: 2372995.877 ops/s
Iteration  27: 2246171.044 ops/s
Iteration  28: 2222458.359 ops/s
Iteration  29: 2157022.992 ops/s
Iteration  30: 2245312.067 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectChar":
  2256236.836 ±(99.9%) 45561.984 ops/s [Average]
  (min, avg, max) = (2154508.239, 2256236.836, 2379500.270), stdev = 68195.037
  CI (99.9%): [2210674.852, 2301798.819] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectChar  thrpt   30  2256236.836 ± 45561.984  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1013004.238 ops/s
# Warmup Iteration   2: 2551299.321 ops/s
# Warmup Iteration   3: 2389555.174 ops/s
# Warmup Iteration   4: 2205091.096 ops/s
# Warmup Iteration   5: 2372983.127 ops/s
# Warmup Iteration   6: 2446765.022 ops/s
# Warmup Iteration   7: 2519920.354 ops/s
# Warmup Iteration   8: 2483410.455 ops/s
# Warmup Iteration   9: 2377491.701 ops/s
# Warmup Iteration  10: 2378930.454 ops/s
# Warmup Iteration  11: 2404444.548 ops/s
# Warmup Iteration  12: 2393990.849 ops/s
# Warmup Iteration  13: 2417767.130 ops/s
# Warmup Iteration  14: 2533942.068 ops/s
# Warmup Iteration  15: 2428607.249 ops/s
# Warmup Iteration  16: 2483062.674 ops/s
# Warmup Iteration  17: 2486782.324 ops/s
# Warmup Iteration  18: 2423448.151 ops/s
# Warmup Iteration  19: 2421103.089 ops/s
# Warmup Iteration  20: 2540887.711 ops/s
# Warmup Iteration  21: 2345321.045 ops/s
# Warmup Iteration  22: 2378249.101 ops/s
# Warmup Iteration  23: 2332444.393 ops/s
# Warmup Iteration  24: 2414138.885 ops/s
# Warmup Iteration  25: 2407751.002 ops/s
# Warmup Iteration  26: 2412959.742 ops/s
# Warmup Iteration  27: 2488503.514 ops/s
# Warmup Iteration  28: 2343983.359 ops/s
# Warmup Iteration  29: 2424902.821 ops/s
# Warmup Iteration  30: 2468512.974 ops/s
Iteration   1: 2347087.870 ops/s
Iteration   2: 2375497.084 ops/s
Iteration   3: 2573675.341 ops/s
Iteration   4: 2585802.316 ops/s
Iteration   5: 2402842.222 ops/s
Iteration   6: 2568609.468 ops/s
Iteration   7: 2443004.068 ops/s
Iteration   8: 2383181.250 ops/s
Iteration   9: 2396689.333 ops/s
Iteration  10: 2591738.988 ops/s
Iteration  11: 2578077.605 ops/s
Iteration  12: 2582826.898 ops/s
Iteration  13: 2362036.702 ops/s
Iteration  14: 2472556.070 ops/s
Iteration  15: 2512386.222 ops/s
Iteration  16: 2486936.636 ops/s
Iteration  17: 2450084.267 ops/s
Iteration  18: 2428266.890 ops/s
Iteration  19: 2475710.831 ops/s
Iteration  20: 2472496.865 ops/s
Iteration  21: 2404727.410 ops/s
Iteration  22: 2419345.922 ops/s
Iteration  23: 2483290.541 ops/s
Iteration  24: 2434304.471 ops/s
Iteration  25: 2449209.998 ops/s
Iteration  26: 2369096.090 ops/s
Iteration  27: 2406539.914 ops/s
Iteration  28: 2516717.493 ops/s
Iteration  29: 2399115.866 ops/s
Iteration  30: 2369643.046 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectCharWithTarget":
  2458049.923 ±(99.9%) 50721.159 ops/s [Average]
  (min, avg, max) = (2347087.870, 2458049.923, 2591738.988), stdev = 75917.048
  CI (99.9%): [2407328.764, 2508771.081] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  2458049.923 ± 50721.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 571050.745 ops/s
# Warmup Iteration   2: 1448867.435 ops/s
# Warmup Iteration   3: 1473735.627 ops/s
# Warmup Iteration   4: 1232896.470 ops/s
# Warmup Iteration   5: 1474308.972 ops/s
# Warmup Iteration   6: 1478758.765 ops/s
# Warmup Iteration   7: 1495128.714 ops/s
# Warmup Iteration   8: 1476504.137 ops/s
# Warmup Iteration   9: 1505656.402 ops/s
# Warmup Iteration  10: 1540262.293 ops/s
# Warmup Iteration  11: 1494876.852 ops/s
# Warmup Iteration  12: 1578137.659 ops/s
# Warmup Iteration  13: 1505706.500 ops/s
# Warmup Iteration  14: 1468669.488 ops/s
# Warmup Iteration  15: 1518089.344 ops/s
# Warmup Iteration  16: 1596037.154 ops/s
# Warmup Iteration  17: 1626922.693 ops/s
# Warmup Iteration  18: 1488749.474 ops/s
# Warmup Iteration  19: 1470627.649 ops/s
# Warmup Iteration  20: 1545601.086 ops/s
# Warmup Iteration  21: 1481196.265 ops/s
# Warmup Iteration  22: 1530215.927 ops/s
# Warmup Iteration  23: 1489890.727 ops/s
# Warmup Iteration  24: 1473913.347 ops/s
# Warmup Iteration  25: 1498655.710 ops/s
# Warmup Iteration  26: 1529045.165 ops/s
# Warmup Iteration  27: 1488494.232 ops/s
# Warmup Iteration  28: 1471237.054 ops/s
# Warmup Iteration  29: 1497094.786 ops/s
# Warmup Iteration  30: 1545248.706 ops/s
Iteration   1: 1467129.325 ops/s
Iteration   2: 1456866.782 ops/s
Iteration   3: 1468355.913 ops/s
Iteration   4: 1593902.432 ops/s
Iteration   5: 1590032.590 ops/s
Iteration   6: 1490680.002 ops/s
Iteration   7: 1537855.328 ops/s
Iteration   8: 1502602.194 ops/s
Iteration   9: 1470972.824 ops/s
Iteration  10: 1558169.428 ops/s
Iteration  11: 1531936.225 ops/s
Iteration  12: 1499345.442 ops/s
Iteration  13: 1469354.291 ops/s
Iteration  14: 1476012.004 ops/s
Iteration  15: 1489924.159 ops/s
Iteration  16: 1461129.054 ops/s
Iteration  17: 1492629.949 ops/s
Iteration  18: 1478401.510 ops/s
Iteration  19: 1490342.229 ops/s
Iteration  20: 1500615.057 ops/s
Iteration  21: 1496891.354 ops/s
Iteration  22: 1492861.791 ops/s
Iteration  23: 1449638.830 ops/s
Iteration  24: 1491860.322 ops/s
Iteration  25: 1507925.076 ops/s
Iteration  26: 1557419.091 ops/s
Iteration  27: 1619794.977 ops/s
Iteration  28: 1536993.598 ops/s
Iteration  29: 1483171.163 ops/s
Iteration  30: 1489564.168 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectDouble":
  1505079.237 ±(99.9%) 28492.145 ops/s [Average]
  (min, avg, max) = (1449638.830, 1505079.237, 1619794.977), stdev = 42645.704
  CI (99.9%): [1476587.092, 1533571.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectDouble  thrpt   30  1505079.237 ± 28492.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 647493.541 ops/s
# Warmup Iteration   2: 1521582.065 ops/s
# Warmup Iteration   3: 1505431.304 ops/s
# Warmup Iteration   4: 1202292.858 ops/s
# Warmup Iteration   5: 1509238.123 ops/s
# Warmup Iteration   6: 1520219.643 ops/s
# Warmup Iteration   7: 1501243.011 ops/s
# Warmup Iteration   8: 1544257.431 ops/s
# Warmup Iteration   9: 1514701.079 ops/s
# Warmup Iteration  10: 1561240.341 ops/s
# Warmup Iteration  11: 1542759.395 ops/s
# Warmup Iteration  12: 1477419.353 ops/s
# Warmup Iteration  13: 1501298.384 ops/s
# Warmup Iteration  14: 1575410.588 ops/s
# Warmup Iteration  15: 1504865.621 ops/s
# Warmup Iteration  16: 1487288.585 ops/s
# Warmup Iteration  17: 1528218.603 ops/s
# Warmup Iteration  18: 1504655.352 ops/s
# Warmup Iteration  19: 1459492.524 ops/s
# Warmup Iteration  20: 1488052.532 ops/s
# Warmup Iteration  21: 1468831.110 ops/s
# Warmup Iteration  22: 1478318.764 ops/s
# Warmup Iteration  23: 1463984.870 ops/s
# Warmup Iteration  24: 1475716.780 ops/s
# Warmup Iteration  25: 1480526.957 ops/s
# Warmup Iteration  26: 1484491.554 ops/s
# Warmup Iteration  27: 1464241.970 ops/s
# Warmup Iteration  28: 1491201.870 ops/s
# Warmup Iteration  29: 1483997.941 ops/s
# Warmup Iteration  30: 1523287.592 ops/s
Iteration   1: 1517167.849 ops/s
Iteration   2: 1469452.234 ops/s
Iteration   3: 1503327.088 ops/s
Iteration   4: 1501020.323 ops/s
Iteration   5: 1538634.636 ops/s
Iteration   6: 1488545.713 ops/s
Iteration   7: 1473087.417 ops/s
Iteration   8: 1472823.845 ops/s
Iteration   9: 1508177.120 ops/s
Iteration  10: 1551309.130 ops/s
Iteration  11: 1506873.954 ops/s
Iteration  12: 1482892.570 ops/s
Iteration  13: 1520750.695 ops/s
Iteration  14: 1483012.601 ops/s
Iteration  15: 1476973.561 ops/s
Iteration  16: 1471790.072 ops/s
Iteration  17: 1488709.884 ops/s
Iteration  18: 1470131.192 ops/s
Iteration  19: 1500671.010 ops/s
Iteration  20: 1495033.599 ops/s
Iteration  21: 1464771.523 ops/s
Iteration  22: 1481650.422 ops/s
Iteration  23: 1480562.362 ops/s
Iteration  24: 1475449.957 ops/s
Iteration  25: 1489520.381 ops/s
Iteration  26: 1476021.867 ops/s
Iteration  27: 1489348.322 ops/s
Iteration  28: 1469091.472 ops/s
Iteration  29: 1585252.553 ops/s
Iteration  30: 1458981.835 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectDoubleWithTarget":
  1493034.506 ±(99.9%) 18511.457 ops/s [Average]
  (min, avg, max) = (1458981.835, 1493034.506, 1585252.553), stdev = 27707.080
  CI (99.9%): [1474523.049, 1511545.963] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  1493034.506 ± 18511.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 647178.403 ops/s
# Warmup Iteration   2: 1622427.525 ops/s
# Warmup Iteration   3: 1689191.546 ops/s
# Warmup Iteration   4: 1380715.991 ops/s
# Warmup Iteration   5: 1607296.672 ops/s
# Warmup Iteration   6: 1646645.554 ops/s
# Warmup Iteration   7: 1602209.548 ops/s
# Warmup Iteration   8: 1631578.244 ops/s
# Warmup Iteration   9: 1630465.527 ops/s
# Warmup Iteration  10: 1623820.944 ops/s
# Warmup Iteration  11: 1619925.476 ops/s
# Warmup Iteration  12: 1607357.818 ops/s
# Warmup Iteration  13: 1611564.791 ops/s
# Warmup Iteration  14: 1641746.293 ops/s
# Warmup Iteration  15: 1617614.885 ops/s
# Warmup Iteration  16: 1621858.172 ops/s
# Warmup Iteration  17: 1631949.502 ops/s
# Warmup Iteration  18: 1638654.486 ops/s
# Warmup Iteration  19: 1713706.104 ops/s
# Warmup Iteration  20: 1691075.687 ops/s
# Warmup Iteration  21: 1649007.842 ops/s
# Warmup Iteration  22: 1676154.356 ops/s
# Warmup Iteration  23: 1679047.611 ops/s
# Warmup Iteration  24: 1663915.352 ops/s
# Warmup Iteration  25: 1642595.453 ops/s
# Warmup Iteration  26: 1599564.787 ops/s
# Warmup Iteration  27: 1685644.247 ops/s
# Warmup Iteration  28: 1612431.330 ops/s
# Warmup Iteration  29: 1624809.360 ops/s
# Warmup Iteration  30: 1643180.432 ops/s
Iteration   1: 1648069.917 ops/s
Iteration   2: 1703575.669 ops/s
Iteration   3: 1715041.802 ops/s
Iteration   4: 1688269.904 ops/s
Iteration   5: 1668006.395 ops/s
Iteration   6: 1634792.907 ops/s
Iteration   7: 1597619.756 ops/s
Iteration   8: 1681547.548 ops/s
Iteration   9: 1670254.528 ops/s
Iteration  10: 1617382.948 ops/s
Iteration  11: 1700524.104 ops/s
Iteration  12: 1742766.793 ops/s
Iteration  13: 1627242.017 ops/s
Iteration  14: 1646215.057 ops/s
Iteration  15: 1630543.432 ops/s
Iteration  16: 1606000.861 ops/s
Iteration  17: 1768018.403 ops/s
Iteration  18: 1714407.145 ops/s
Iteration  19: 1627635.202 ops/s
Iteration  20: 1620617.702 ops/s
Iteration  21: 1605065.740 ops/s
Iteration  22: 1581158.633 ops/s
Iteration  23: 1727190.538 ops/s
Iteration  24: 1763657.429 ops/s
Iteration  25: 1769985.477 ops/s
Iteration  26: 1763100.853 ops/s
Iteration  27: 1727146.107 ops/s
Iteration  28: 1637557.906 ops/s
Iteration  29: 1635258.147 ops/s
Iteration  30: 1746781.871 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectFloat":
  1675514.493 ±(99.9%) 38593.428 ops/s [Average]
  (min, avg, max) = (1581158.633, 1675514.493, 1769985.477), stdev = 57764.831
  CI (99.9%): [1636921.065, 1714107.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectFloat  thrpt   30  1675514.493 ± 38593.428  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688895.667 ops/s
# Warmup Iteration   2: 1635253.650 ops/s
# Warmup Iteration   3: 1592414.961 ops/s
# Warmup Iteration   4: 1422957.607 ops/s
# Warmup Iteration   5: 1743311.590 ops/s
# Warmup Iteration   6: 1597379.297 ops/s
# Warmup Iteration   7: 1621364.012 ops/s
# Warmup Iteration   8: 1663665.764 ops/s
# Warmup Iteration   9: 1676242.246 ops/s
# Warmup Iteration  10: 1731505.909 ops/s
# Warmup Iteration  11: 1582938.339 ops/s
# Warmup Iteration  12: 1623081.702 ops/s
# Warmup Iteration  13: 1581951.022 ops/s
# Warmup Iteration  14: 1591799.958 ops/s
# Warmup Iteration  15: 1600174.410 ops/s
# Warmup Iteration  16: 1639289.400 ops/s
# Warmup Iteration  17: 1734264.100 ops/s
# Warmup Iteration  18: 1580000.037 ops/s
# Warmup Iteration  19: 1617526.905 ops/s
# Warmup Iteration  20: 1621976.351 ops/s
# Warmup Iteration  21: 1676520.177 ops/s
# Warmup Iteration  22: 1740750.323 ops/s
# Warmup Iteration  23: 1618625.488 ops/s
# Warmup Iteration  24: 1665950.631 ops/s
# Warmup Iteration  25: 1704380.968 ops/s
# Warmup Iteration  26: 1610814.194 ops/s
# Warmup Iteration  27: 1599181.835 ops/s
# Warmup Iteration  28: 1591700.719 ops/s
# Warmup Iteration  29: 1608842.245 ops/s
# Warmup Iteration  30: 1616858.139 ops/s
Iteration   1: 1587458.988 ops/s
Iteration   2: 1668572.473 ops/s
Iteration   3: 1616095.936 ops/s
Iteration   4: 1665414.386 ops/s
Iteration   5: 1662334.561 ops/s
Iteration   6: 1587332.518 ops/s
Iteration   7: 1601996.360 ops/s
Iteration   8: 1597502.846 ops/s
Iteration   9: 1612429.990 ops/s
Iteration  10: 1583447.114 ops/s
Iteration  11: 1616296.678 ops/s
Iteration  12: 1563368.785 ops/s
Iteration  13: 1602754.254 ops/s
Iteration  14: 1567081.073 ops/s
Iteration  15: 1612013.793 ops/s
Iteration  16: 1617144.109 ops/s
Iteration  17: 1679876.824 ops/s
Iteration  18: 1690971.455 ops/s
Iteration  19: 1644467.659 ops/s
Iteration  20: 1654505.277 ops/s
Iteration  21: 1673359.792 ops/s
Iteration  22: 1705137.368 ops/s
Iteration  23: 1582681.070 ops/s
Iteration  24: 1567783.359 ops/s
Iteration  25: 1614937.164 ops/s
Iteration  26: 1628794.717 ops/s
Iteration  27: 1666933.450 ops/s
Iteration  28: 1668702.118 ops/s
Iteration  29: 1640545.914 ops/s
Iteration  30: 1752504.272 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectFloatWithTarget":
  1631081.477 ±(99.9%) 30533.483 ops/s [Average]
  (min, avg, max) = (1563368.785, 1631081.477, 1752504.272), stdev = 45701.084
  CI (99.9%): [1600547.993, 1661614.960] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  1631081.477 ± 30533.483  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 453448.294 ops/s
# Warmup Iteration   2: 955559.060 ops/s
# Warmup Iteration   3: 1023066.215 ops/s
# Warmup Iteration   4: 1021377.618 ops/s
# Warmup Iteration   5: 830330.860 ops/s
# Warmup Iteration   6: 1015569.035 ops/s
# Warmup Iteration   7: 1020772.150 ops/s
# Warmup Iteration   8: 1049132.588 ops/s
# Warmup Iteration   9: 1048452.230 ops/s
# Warmup Iteration  10: 1005972.597 ops/s
# Warmup Iteration  11: 1039416.260 ops/s
# Warmup Iteration  12: 1007588.520 ops/s
# Warmup Iteration  13: 1052997.618 ops/s
# Warmup Iteration  14: 1016580.534 ops/s
# Warmup Iteration  15: 1045381.120 ops/s
# Warmup Iteration  16: 1028080.224 ops/s
# Warmup Iteration  17: 1026695.807 ops/s
# Warmup Iteration  18: 1022558.233 ops/s
# Warmup Iteration  19: 1015428.240 ops/s
# Warmup Iteration  20: 1034423.141 ops/s
# Warmup Iteration  21: 1017254.135 ops/s
# Warmup Iteration  22: 1086432.681 ops/s
# Warmup Iteration  23: 1119703.253 ops/s
# Warmup Iteration  24: 1041450.010 ops/s
# Warmup Iteration  25: 1060611.001 ops/s
# Warmup Iteration  26: 1022337.716 ops/s
# Warmup Iteration  27: 1017358.754 ops/s
# Warmup Iteration  28: 1016370.271 ops/s
# Warmup Iteration  29: 1050857.881 ops/s
# Warmup Iteration  30: 1016681.981 ops/s
Iteration   1: 1021037.391 ops/s
Iteration   2: 1011176.844 ops/s
Iteration   3: 1042393.783 ops/s
Iteration   4: 1026714.887 ops/s
Iteration   5: 1054466.347 ops/s
Iteration   6: 1033181.539 ops/s
Iteration   7: 1076252.589 ops/s
Iteration   8: 1019147.408 ops/s
Iteration   9: 1017137.055 ops/s
Iteration  10: 993576.588 ops/s
Iteration  11: 1002660.943 ops/s
Iteration  12: 1000676.806 ops/s
Iteration  13: 1034110.747 ops/s
Iteration  14: 1027396.159 ops/s
Iteration  15: 1064539.554 ops/s
Iteration  16: 1056205.738 ops/s
Iteration  17: 1050529.105 ops/s
Iteration  18: 1029206.787 ops/s
Iteration  19: 1043360.923 ops/s
Iteration  20: 1060901.042 ops/s
Iteration  21: 1011148.648 ops/s
Iteration  22: 1001159.632 ops/s
Iteration  23: 1021537.977 ops/s
Iteration  24: 1026954.481 ops/s
Iteration  25: 1016227.574 ops/s
Iteration  26: 1028193.430 ops/s
Iteration  27: 1022381.159 ops/s
Iteration  28: 1022213.685 ops/s
Iteration  29: 1029475.312 ops/s
Iteration  30: 1012554.003 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectIf":
  1028550.605 ±(99.9%) 13502.261 ops/s [Average]
  (min, avg, max) = (993576.588, 1028550.605, 1076252.589), stdev = 20209.551
  CI (99.9%): [1015048.343, 1042052.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectIf  thrpt   30  1028550.605 ± 13502.261  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 810549.693 ops/s
# Warmup Iteration   2: 2043415.617 ops/s
# Warmup Iteration   3: 2041550.379 ops/s
# Warmup Iteration   4: 1694989.116 ops/s
# Warmup Iteration   5: 2028317.201 ops/s
# Warmup Iteration   6: 2040561.285 ops/s
# Warmup Iteration   7: 2045849.926 ops/s
# Warmup Iteration   8: 2101264.182 ops/s
# Warmup Iteration   9: 2080918.211 ops/s
# Warmup Iteration  10: 2048068.130 ops/s
# Warmup Iteration  11: 2044544.999 ops/s
# Warmup Iteration  12: 2209057.561 ops/s
# Warmup Iteration  13: 2178429.721 ops/s
# Warmup Iteration  14: 2254420.857 ops/s
# Warmup Iteration  15: 2125321.820 ops/s
# Warmup Iteration  16: 2151580.312 ops/s
# Warmup Iteration  17: 2204802.701 ops/s
# Warmup Iteration  18: 2253607.165 ops/s
# Warmup Iteration  19: 2117733.128 ops/s
# Warmup Iteration  20: 2054075.435 ops/s
# Warmup Iteration  21: 2178590.608 ops/s
# Warmup Iteration  22: 2251451.884 ops/s
# Warmup Iteration  23: 2236603.686 ops/s
# Warmup Iteration  24: 2153567.296 ops/s
# Warmup Iteration  25: 2191102.379 ops/s
# Warmup Iteration  26: 2043434.960 ops/s
# Warmup Iteration  27: 2051788.157 ops/s
# Warmup Iteration  28: 2091337.309 ops/s
# Warmup Iteration  29: 2062044.323 ops/s
# Warmup Iteration  30: 2056990.552 ops/s
Iteration   1: 2046742.671 ops/s
Iteration   2: 2174948.482 ops/s
Iteration   3: 2128329.803 ops/s
Iteration   4: 2144962.009 ops/s
Iteration   5: 2073623.709 ops/s
Iteration   6: 2206170.572 ops/s
Iteration   7: 2051803.138 ops/s
Iteration   8: 2095553.018 ops/s
Iteration   9: 2156596.087 ops/s
Iteration  10: 2115753.471 ops/s
Iteration  11: 2112904.158 ops/s
Iteration  12: 2042534.541 ops/s
Iteration  13: 2201473.568 ops/s
Iteration  14: 2115291.721 ops/s
Iteration  15: 2070575.282 ops/s
Iteration  16: 2152442.970 ops/s
Iteration  17: 2083271.661 ops/s
Iteration  18: 2049985.743 ops/s
Iteration  19: 2052024.930 ops/s
Iteration  20: 2047184.954 ops/s
Iteration  21: 2130873.912 ops/s
Iteration  22: 2147286.509 ops/s
Iteration  23: 2067001.844 ops/s
Iteration  24: 2066623.517 ops/s
Iteration  25: 2060994.073 ops/s
Iteration  26: 2111259.191 ops/s
Iteration  27: 2074865.691 ops/s
Iteration  28: 2153492.550 ops/s
Iteration  29: 2051684.035 ops/s
Iteration  30: 2144426.444 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectInt":
  2104356.009 ±(99.9%) 32542.056 ops/s [Average]
  (min, avg, max) = (2042534.541, 2104356.009, 2206170.572), stdev = 48707.420
  CI (99.9%): [2071813.953, 2136898.064] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectInt  thrpt   30  2104356.009 ± 32542.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 823607.146 ops/s
# Warmup Iteration   2: 2107968.769 ops/s
# Warmup Iteration   3: 2179909.464 ops/s
# Warmup Iteration   4: 1840187.290 ops/s
# Warmup Iteration   5: 2118702.178 ops/s
# Warmup Iteration   6: 2198263.257 ops/s
# Warmup Iteration   7: 2133991.414 ops/s
# Warmup Iteration   8: 2111002.391 ops/s
# Warmup Iteration   9: 2129345.919 ops/s
# Warmup Iteration  10: 2072893.351 ops/s
# Warmup Iteration  11: 2077001.402 ops/s
# Warmup Iteration  12: 2123398.515 ops/s
# Warmup Iteration  13: 2115987.886 ops/s
# Warmup Iteration  14: 2128951.957 ops/s
# Warmup Iteration  15: 2102162.392 ops/s
# Warmup Iteration  16: 2111638.646 ops/s
# Warmup Iteration  17: 2049435.031 ops/s
# Warmup Iteration  18: 2087636.154 ops/s
# Warmup Iteration  19: 2083963.037 ops/s
# Warmup Iteration  20: 2063428.647 ops/s
# Warmup Iteration  21: 2061388.568 ops/s
# Warmup Iteration  22: 2111117.246 ops/s
# Warmup Iteration  23: 2118612.249 ops/s
# Warmup Iteration  24: 2243646.196 ops/s
# Warmup Iteration  25: 2085786.555 ops/s
# Warmup Iteration  26: 2135414.122 ops/s
# Warmup Iteration  27: 2068961.742 ops/s
# Warmup Iteration  28: 2140355.029 ops/s
# Warmup Iteration  29: 2118620.766 ops/s
# Warmup Iteration  30: 2162840.486 ops/s
Iteration   1: 2182354.312 ops/s
Iteration   2: 2098511.724 ops/s
Iteration   3: 2054029.682 ops/s
Iteration   4: 2172041.149 ops/s
Iteration   5: 2036445.026 ops/s
Iteration   6: 2176689.445 ops/s
Iteration   7: 2118824.698 ops/s
Iteration   8: 2048412.393 ops/s
Iteration   9: 2192379.440 ops/s
Iteration  10: 2070087.626 ops/s
Iteration  11: 2200744.790 ops/s
Iteration  12: 2226249.701 ops/s
Iteration  13: 2226855.494 ops/s
Iteration  14: 2152985.975 ops/s
Iteration  15: 2109102.931 ops/s
Iteration  16: 2083235.042 ops/s
Iteration  17: 2202772.413 ops/s
Iteration  18: 2214493.133 ops/s
Iteration  19: 2092313.130 ops/s
Iteration  20: 2071008.797 ops/s
Iteration  21: 2035835.058 ops/s
Iteration  22: 2057739.343 ops/s
Iteration  23: 2136420.601 ops/s
Iteration  24: 2094321.674 ops/s
Iteration  25: 2132138.332 ops/s
Iteration  26: 2190753.191 ops/s
Iteration  27: 2066452.929 ops/s
Iteration  28: 2055116.101 ops/s
Iteration  29: 2085115.061 ops/s
Iteration  30: 2138299.804 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectIntWithTarget":
  2124057.633 ±(99.9%) 41217.248 ops/s [Average]
  (min, avg, max) = (2035835.058, 2124057.633, 2226855.494), stdev = 61692.041
  CI (99.9%): [2082840.385, 2165274.881] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  2124057.633 ± 41217.248  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 784473.270 ops/s
# Warmup Iteration   2: 2011185.426 ops/s
# Warmup Iteration   3: 1809777.223 ops/s
# Warmup Iteration   4: 1844677.006 ops/s
# Warmup Iteration   5: 2001606.343 ops/s
# Warmup Iteration   6: 2076567.481 ops/s
# Warmup Iteration   7: 2008156.891 ops/s
# Warmup Iteration   8: 2004221.254 ops/s
# Warmup Iteration   9: 2060268.497 ops/s
# Warmup Iteration  10: 2080854.238 ops/s
# Warmup Iteration  11: 1993827.698 ops/s
# Warmup Iteration  12: 1996801.058 ops/s
# Warmup Iteration  13: 1993690.662 ops/s
# Warmup Iteration  14: 2069896.994 ops/s
# Warmup Iteration  15: 2159632.027 ops/s
# Warmup Iteration  16: 2103448.285 ops/s
# Warmup Iteration  17: 2146766.325 ops/s
# Warmup Iteration  18: 2059666.422 ops/s
# Warmup Iteration  19: 2035085.938 ops/s
# Warmup Iteration  20: 2112846.294 ops/s
# Warmup Iteration  21: 2015921.963 ops/s
# Warmup Iteration  22: 2056095.321 ops/s
# Warmup Iteration  23: 1981229.002 ops/s
# Warmup Iteration  24: 2048078.249 ops/s
# Warmup Iteration  25: 2001180.216 ops/s
# Warmup Iteration  26: 1980868.095 ops/s
# Warmup Iteration  27: 2013804.114 ops/s
# Warmup Iteration  28: 2042662.163 ops/s
# Warmup Iteration  29: 2092931.650 ops/s
# Warmup Iteration  30: 2030869.880 ops/s
Iteration   1: 2050247.903 ops/s
Iteration   2: 2069383.174 ops/s
Iteration   3: 2079974.989 ops/s
Iteration   4: 1987707.213 ops/s
Iteration   5: 2069436.080 ops/s
Iteration   6: 2144285.213 ops/s
Iteration   7: 2000276.011 ops/s
Iteration   8: 2023262.309 ops/s
Iteration   9: 2001543.893 ops/s
Iteration  10: 2000600.857 ops/s
Iteration  11: 2013720.763 ops/s
Iteration  12: 2048479.742 ops/s
Iteration  13: 2159421.794 ops/s
Iteration  14: 2065554.073 ops/s
Iteration  15: 2113110.754 ops/s
Iteration  16: 2011523.340 ops/s
Iteration  17: 2071088.206 ops/s
Iteration  18: 2119786.461 ops/s
Iteration  19: 2070067.285 ops/s
Iteration  20: 2024258.043 ops/s
Iteration  21: 2073235.840 ops/s
Iteration  22: 2068079.882 ops/s
Iteration  23: 2026001.114 ops/s
Iteration  24: 2021919.845 ops/s
Iteration  25: 1981191.155 ops/s
Iteration  26: 1996167.285 ops/s
Iteration  27: 2012018.833 ops/s
Iteration  28: 2008884.544 ops/s
Iteration  29: 2015898.013 ops/s
Iteration  30: 2079327.803 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectLong":
  2046881.747 ±(99.9%) 31017.158 ops/s [Average]
  (min, avg, max) = (1981191.155, 2046881.747, 2159421.794), stdev = 46425.026
  CI (99.9%): [2015864.589, 2077898.906] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectLong  thrpt   30  2046881.747 ± 31017.158  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 735222.466 ops/s
# Warmup Iteration   2: 1924158.813 ops/s
# Warmup Iteration   3: 1887083.049 ops/s
# Warmup Iteration   4: 1660138.119 ops/s
# Warmup Iteration   5: 1991247.425 ops/s
# Warmup Iteration   6: 1989809.384 ops/s
# Warmup Iteration   7: 1988235.290 ops/s
# Warmup Iteration   8: 1939399.633 ops/s
# Warmup Iteration   9: 1972967.671 ops/s
# Warmup Iteration  10: 1957604.444 ops/s
# Warmup Iteration  11: 2012276.580 ops/s
# Warmup Iteration  12: 1954490.080 ops/s
# Warmup Iteration  13: 2002115.694 ops/s
# Warmup Iteration  14: 1984072.444 ops/s
# Warmup Iteration  15: 1932132.586 ops/s
# Warmup Iteration  16: 1933623.994 ops/s
# Warmup Iteration  17: 1981422.789 ops/s
# Warmup Iteration  18: 2003953.391 ops/s
# Warmup Iteration  19: 1913803.330 ops/s
# Warmup Iteration  20: 1967022.203 ops/s
# Warmup Iteration  21: 1961859.583 ops/s
# Warmup Iteration  22: 2019241.681 ops/s
# Warmup Iteration  23: 2015390.210 ops/s
# Warmup Iteration  24: 1969894.050 ops/s
# Warmup Iteration  25: 1956307.420 ops/s
# Warmup Iteration  26: 1942507.308 ops/s
# Warmup Iteration  27: 1997169.904 ops/s
# Warmup Iteration  28: 2000554.138 ops/s
# Warmup Iteration  29: 2017229.249 ops/s
# Warmup Iteration  30: 1993214.536 ops/s
Iteration   1: 2063430.344 ops/s
Iteration   2: 2116893.233 ops/s
Iteration   3: 2073169.874 ops/s
Iteration   4: 2135845.111 ops/s
Iteration   5: 2127120.947 ops/s
Iteration   6: 2009091.611 ops/s
Iteration   7: 1962590.671 ops/s
Iteration   8: 1979059.296 ops/s
Iteration   9: 1929623.785 ops/s
Iteration  10: 2084456.438 ops/s
Iteration  11: 1956678.980 ops/s
Iteration  12: 2018272.061 ops/s
Iteration  13: 2028092.570 ops/s
Iteration  14: 1943878.787 ops/s
Iteration  15: 1966083.800 ops/s
Iteration  16: 2018004.096 ops/s
Iteration  17: 1952857.072 ops/s
Iteration  18: 2100469.253 ops/s
Iteration  19: 2082817.267 ops/s
Iteration  20: 1966670.671 ops/s
Iteration  21: 1988220.587 ops/s
Iteration  22: 2049429.374 ops/s
Iteration  23: 1972400.250 ops/s
Iteration  24: 1974319.144 ops/s
Iteration  25: 2045708.086 ops/s
Iteration  26: 2133151.799 ops/s
Iteration  27: 2135758.208 ops/s
Iteration  28: 2129796.132 ops/s
Iteration  29: 1935028.976 ops/s
Iteration  30: 1961304.873 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectLongWithTarget":
  2028007.443 ±(99.9%) 46562.803 ops/s [Average]
  (min, avg, max) = (1929623.785, 2028007.443, 2135845.111), stdev = 69693.017
  CI (99.9%): [1981444.640, 2074570.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  2028007.443 ± 46562.803  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 520711.074 ops/s
# Warmup Iteration   2: 1270048.624 ops/s
# Warmup Iteration   3: 1261800.822 ops/s
# Warmup Iteration   4: 1047280.422 ops/s
# Warmup Iteration   5: 1249362.256 ops/s
# Warmup Iteration   6: 1291315.701 ops/s
# Warmup Iteration   7: 1251887.944 ops/s
# Warmup Iteration   8: 1245370.893 ops/s
# Warmup Iteration   9: 1248884.479 ops/s
# Warmup Iteration  10: 1240115.571 ops/s
# Warmup Iteration  11: 1262166.954 ops/s
# Warmup Iteration  12: 1279412.996 ops/s
# Warmup Iteration  13: 1237864.435 ops/s
# Warmup Iteration  14: 1272135.895 ops/s
# Warmup Iteration  15: 1262306.672 ops/s
# Warmup Iteration  16: 1258220.737 ops/s
# Warmup Iteration  17: 1263255.291 ops/s
# Warmup Iteration  18: 1239255.317 ops/s
# Warmup Iteration  19: 1257128.264 ops/s
# Warmup Iteration  20: 1253181.814 ops/s
# Warmup Iteration  21: 1279373.378 ops/s
# Warmup Iteration  22: 1251346.831 ops/s
# Warmup Iteration  23: 1274307.678 ops/s
# Warmup Iteration  24: 1258819.414 ops/s
# Warmup Iteration  25: 1275678.856 ops/s
# Warmup Iteration  26: 1255998.186 ops/s
# Warmup Iteration  27: 1264543.750 ops/s
# Warmup Iteration  28: 1265792.693 ops/s
# Warmup Iteration  29: 1280825.521 ops/s
# Warmup Iteration  30: 1269089.867 ops/s
Iteration   1: 1297968.094 ops/s
Iteration   2: 1292713.115 ops/s
Iteration   3: 1273329.899 ops/s
Iteration   4: 1264399.926 ops/s
Iteration   5: 1252646.906 ops/s
Iteration   6: 1256277.895 ops/s
Iteration   7: 1282125.440 ops/s
Iteration   8: 1254108.057 ops/s
Iteration   9: 1250941.431 ops/s
Iteration  10: 1250140.293 ops/s
Iteration  11: 1307858.171 ops/s
Iteration  12: 1297038.241 ops/s
Iteration  13: 1319252.678 ops/s
Iteration  14: 1291960.025 ops/s
Iteration  15: 1256243.086 ops/s
Iteration  16: 1287107.090 ops/s
Iteration  17: 1263019.681 ops/s
Iteration  18: 1259343.231 ops/s
Iteration  19: 1276350.035 ops/s
Iteration  20: 1326918.127 ops/s
Iteration  21: 1284398.812 ops/s
Iteration  22: 1292290.015 ops/s
Iteration  23: 1273172.552 ops/s
Iteration  24: 1288066.905 ops/s
Iteration  25: 1312821.499 ops/s
Iteration  26: 1313649.166 ops/s
Iteration  27: 1315082.491 ops/s
Iteration  28: 1321632.379 ops/s
Iteration  29: 1260958.251 ops/s
Iteration  30: 1260831.467 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectMap":
  1282754.832 ±(99.9%) 16055.295 ops/s [Average]
  (min, avg, max) = (1250140.293, 1282754.832, 1326918.127), stdev = 24030.812
  CI (99.9%): [1266699.537, 1298810.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectMap  thrpt   30  1282754.832 ± 16055.295  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 795457.081 ops/s
# Warmup Iteration   2: 2161807.497 ops/s
# Warmup Iteration   3: 2168830.310 ops/s
# Warmup Iteration   4: 1753769.112 ops/s
# Warmup Iteration   5: 2189848.328 ops/s
# Warmup Iteration   6: 2188412.881 ops/s
# Warmup Iteration   7: 2160094.296 ops/s
# Warmup Iteration   8: 2196958.310 ops/s
# Warmup Iteration   9: 2164960.472 ops/s
# Warmup Iteration  10: 2152055.293 ops/s
# Warmup Iteration  11: 2181327.390 ops/s
# Warmup Iteration  12: 2220798.562 ops/s
# Warmup Iteration  13: 2245462.354 ops/s
# Warmup Iteration  14: 2198243.286 ops/s
# Warmup Iteration  15: 2170448.200 ops/s
# Warmup Iteration  16: 2243971.731 ops/s
# Warmup Iteration  17: 2208095.016 ops/s
# Warmup Iteration  18: 2211286.004 ops/s
# Warmup Iteration  19: 2208778.581 ops/s
# Warmup Iteration  20: 2262481.796 ops/s
# Warmup Iteration  21: 2276009.354 ops/s
# Warmup Iteration  22: 2235584.293 ops/s
# Warmup Iteration  23: 2177100.830 ops/s
# Warmup Iteration  24: 2254496.766 ops/s
# Warmup Iteration  25: 2192135.293 ops/s
# Warmup Iteration  26: 2213554.954 ops/s
# Warmup Iteration  27: 2160641.388 ops/s
# Warmup Iteration  28: 2209589.283 ops/s
# Warmup Iteration  29: 2189864.964 ops/s
# Warmup Iteration  30: 2160892.029 ops/s
Iteration   1: 2148521.280 ops/s
Iteration   2: 2169111.228 ops/s
Iteration   3: 2175018.151 ops/s
Iteration   4: 2161589.315 ops/s
Iteration   5: 2255967.219 ops/s
Iteration   6: 2192166.225 ops/s
Iteration   7: 2239578.361 ops/s
Iteration   8: 2159503.103 ops/s
Iteration   9: 2263248.109 ops/s
Iteration  10: 2225463.079 ops/s
Iteration  11: 2206856.599 ops/s
Iteration  12: 2274973.755 ops/s
Iteration  13: 2193188.943 ops/s
Iteration  14: 2189636.050 ops/s
Iteration  15: 2224414.201 ops/s
Iteration  16: 2149741.444 ops/s
Iteration  17: 2164872.296 ops/s
Iteration  18: 2162739.644 ops/s
Iteration  19: 2176680.834 ops/s
Iteration  20: 2169886.976 ops/s
Iteration  21: 2149794.090 ops/s
Iteration  22: 2283062.663 ops/s
Iteration  23: 2227945.719 ops/s
Iteration  24: 2136890.863 ops/s
Iteration  25: 2270368.304 ops/s
Iteration  26: 2208860.135 ops/s
Iteration  27: 2313965.329 ops/s
Iteration  28: 2376788.627 ops/s
Iteration  29: 2367266.632 ops/s
Iteration  30: 2328755.713 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectShort":
  2218895.163 ±(99.9%) 44225.605 ops/s [Average]
  (min, avg, max) = (2136890.863, 2218895.163, 2376788.627), stdev = 66194.809
  CI (99.9%): [2174669.558, 2263120.768] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectShort  thrpt   30  2218895.163 ± 44225.605  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 820322.958 ops/s
# Warmup Iteration   2: 2181260.481 ops/s
# Warmup Iteration   3: 2181596.604 ops/s
# Warmup Iteration   4: 1797062.467 ops/s
# Warmup Iteration   5: 2232845.490 ops/s
# Warmup Iteration   6: 2228953.122 ops/s
# Warmup Iteration   7: 2222406.533 ops/s
# Warmup Iteration   8: 2219397.945 ops/s
# Warmup Iteration   9: 2191370.901 ops/s
# Warmup Iteration  10: 2192184.332 ops/s
# Warmup Iteration  11: 2246752.073 ops/s
# Warmup Iteration  12: 2212750.071 ops/s
# Warmup Iteration  13: 2253291.348 ops/s
# Warmup Iteration  14: 2162013.454 ops/s
# Warmup Iteration  15: 2207821.657 ops/s
# Warmup Iteration  16: 2196633.223 ops/s
# Warmup Iteration  17: 2204884.445 ops/s
# Warmup Iteration  18: 2250524.561 ops/s
# Warmup Iteration  19: 2197560.301 ops/s
# Warmup Iteration  20: 2251873.896 ops/s
# Warmup Iteration  21: 2215876.180 ops/s
# Warmup Iteration  22: 2179384.143 ops/s
# Warmup Iteration  23: 2202678.523 ops/s
# Warmup Iteration  24: 2183269.956 ops/s
# Warmup Iteration  25: 2229650.266 ops/s
# Warmup Iteration  26: 2228885.478 ops/s
# Warmup Iteration  27: 2212771.919 ops/s
# Warmup Iteration  28: 2239881.461 ops/s
# Warmup Iteration  29: 2255836.441 ops/s
# Warmup Iteration  30: 2236134.857 ops/s
Iteration   1: 2185893.931 ops/s
Iteration   2: 2296383.185 ops/s
Iteration   3: 2231610.241 ops/s
Iteration   4: 2215932.131 ops/s
Iteration   5: 2219385.220 ops/s
Iteration   6: 2193949.542 ops/s
Iteration   7: 2174098.152 ops/s
Iteration   8: 2169033.423 ops/s
Iteration   9: 2204396.737 ops/s
Iteration  10: 2213620.059 ops/s
Iteration  11: 2324420.394 ops/s
Iteration  12: 2182512.803 ops/s
Iteration  13: 2205371.801 ops/s
Iteration  14: 2162919.159 ops/s
Iteration  15: 2166292.947 ops/s
Iteration  16: 2241827.836 ops/s
Iteration  17: 2158839.175 ops/s
Iteration  18: 2228338.771 ops/s
Iteration  19: 2137412.271 ops/s
Iteration  20: 2208910.546 ops/s
Iteration  21: 2195879.171 ops/s
Iteration  22: 2221844.766 ops/s
Iteration  23: 2207042.100 ops/s
Iteration  24: 2158858.497 ops/s
Iteration  25: 2218465.657 ops/s
Iteration  26: 2237585.122 ops/s
Iteration  27: 2162344.294 ops/s
Iteration  28: 2215137.211 ops/s
Iteration  29: 2210740.872 ops/s
Iteration  30: 2191196.239 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectShortWithTarget":
  2204674.742 ±(99.9%) 26240.038 ops/s [Average]
  (min, avg, max) = (2137412.271, 2204674.742, 2324420.394), stdev = 39274.857
  CI (99.9%): [2178434.703, 2230914.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  2204674.742 ± 26240.038  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 660604.206 ops/s
# Warmup Iteration   2: 1542492.775 ops/s
# Warmup Iteration   3: 1535532.691 ops/s
# Warmup Iteration   4: 1272042.479 ops/s
# Warmup Iteration   5: 1572737.795 ops/s
# Warmup Iteration   6: 1540703.241 ops/s
# Warmup Iteration   7: 1583326.357 ops/s
# Warmup Iteration   8: 1538073.545 ops/s
# Warmup Iteration   9: 1531010.553 ops/s
# Warmup Iteration  10: 1529753.451 ops/s
# Warmup Iteration  11: 1536545.944 ops/s
# Warmup Iteration  12: 1549491.806 ops/s
# Warmup Iteration  13: 1557503.899 ops/s
# Warmup Iteration  14: 1564017.306 ops/s
# Warmup Iteration  15: 1672750.214 ops/s
# Warmup Iteration  16: 1537268.640 ops/s
# Warmup Iteration  17: 1552767.774 ops/s
# Warmup Iteration  18: 1538978.687 ops/s
# Warmup Iteration  19: 1538809.616 ops/s
# Warmup Iteration  20: 1623930.371 ops/s
# Warmup Iteration  21: 1558041.694 ops/s
# Warmup Iteration  22: 1547984.210 ops/s
# Warmup Iteration  23: 1547491.377 ops/s
# Warmup Iteration  24: 1593263.038 ops/s
# Warmup Iteration  25: 1591238.569 ops/s
# Warmup Iteration  26: 1607571.122 ops/s
# Warmup Iteration  27: 1599303.306 ops/s
# Warmup Iteration  28: 1593950.557 ops/s
# Warmup Iteration  29: 1594093.937 ops/s
# Warmup Iteration  30: 1607483.143 ops/s
Iteration   1: 1611726.489 ops/s
Iteration   2: 1538960.949 ops/s
Iteration   3: 1636626.930 ops/s
Iteration   4: 1556246.973 ops/s
Iteration   5: 1544641.482 ops/s
Iteration   6: 1645481.291 ops/s
Iteration   7: 1548743.536 ops/s
Iteration   8: 1554878.371 ops/s
Iteration   9: 1563824.575 ops/s
Iteration  10: 1562026.228 ops/s
Iteration  11: 1539536.538 ops/s
Iteration  12: 1668915.865 ops/s
Iteration  13: 1507855.034 ops/s
Iteration  14: 1624505.915 ops/s
Iteration  15: 1653363.152 ops/s
Iteration  16: 1576483.249 ops/s
Iteration  17: 1635359.301 ops/s
Iteration  18: 1642239.730 ops/s
Iteration  19: 1528548.155 ops/s
Iteration  20: 1549968.067 ops/s
Iteration  21: 1553448.134 ops/s
Iteration  22: 1680123.196 ops/s
Iteration  23: 1643685.379 ops/s
Iteration  24: 1677458.568 ops/s
Iteration  25: 1571731.739 ops/s
Iteration  26: 1526262.426 ops/s
Iteration  27: 1529463.928 ops/s
Iteration  28: 1492519.837 ops/s
Iteration  29: 1554308.286 ops/s
Iteration  30: 1514797.992 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectValues":
  1581124.377 ±(99.9%) 37037.931 ops/s [Average]
  (min, avg, max) = (1492519.837, 1581124.377, 1680123.196), stdev = 55436.636
  CI (99.9%): [1544086.446, 1618162.308] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectValues  thrpt   30  1581124.377 ± 37037.931  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 842633.860 ops/s
# Warmup Iteration   2: 1871312.264 ops/s
# Warmup Iteration   3: 2001287.483 ops/s
# Warmup Iteration   4: 1710794.926 ops/s
# Warmup Iteration   5: 1803779.994 ops/s
# Warmup Iteration   6: 1945502.593 ops/s
# Warmup Iteration   7: 1916232.654 ops/s
# Warmup Iteration   8: 1934425.252 ops/s
# Warmup Iteration   9: 1954073.307 ops/s
# Warmup Iteration  10: 1995410.477 ops/s
# Warmup Iteration  11: 1931720.662 ops/s
# Warmup Iteration  12: 1967938.473 ops/s
# Warmup Iteration  13: 1980045.576 ops/s
# Warmup Iteration  14: 1899728.195 ops/s
# Warmup Iteration  15: 1935705.325 ops/s
# Warmup Iteration  16: 1991752.071 ops/s
# Warmup Iteration  17: 1920850.630 ops/s
# Warmup Iteration  18: 1930430.049 ops/s
# Warmup Iteration  19: 1923036.214 ops/s
# Warmup Iteration  20: 1908786.833 ops/s
# Warmup Iteration  21: 1906018.064 ops/s
# Warmup Iteration  22: 1928656.783 ops/s
# Warmup Iteration  23: 1916012.217 ops/s
# Warmup Iteration  24: 1933740.616 ops/s
# Warmup Iteration  25: 1961284.834 ops/s
# Warmup Iteration  26: 2041847.241 ops/s
# Warmup Iteration  27: 1973692.759 ops/s
# Warmup Iteration  28: 1943324.621 ops/s
# Warmup Iteration  29: 2011688.029 ops/s
# Warmup Iteration  30: 1998890.690 ops/s
Iteration   1: 1944151.117 ops/s
Iteration   2: 2002878.042 ops/s
Iteration   3: 1978612.425 ops/s
Iteration   4: 2003626.590 ops/s
Iteration   5: 1910831.358 ops/s
Iteration   6: 2029432.644 ops/s
Iteration   7: 1979038.909 ops/s
Iteration   8: 1936623.360 ops/s
Iteration   9: 1907039.574 ops/s
Iteration  10: 1942440.855 ops/s
Iteration  11: 1918284.488 ops/s
Iteration  12: 1911917.063 ops/s
Iteration  13: 1882849.364 ops/s
Iteration  14: 1945048.297 ops/s
Iteration  15: 1900736.896 ops/s
Iteration  16: 2000267.807 ops/s
Iteration  17: 2043064.430 ops/s
Iteration  18: 1975221.366 ops/s
Iteration  19: 2021507.420 ops/s
Iteration  20: 1953544.974 ops/s
Iteration  21: 2016156.822 ops/s
Iteration  22: 1994234.432 ops/s
Iteration  23: 2021914.580 ops/s
Iteration  24: 1961249.969 ops/s
Iteration  25: 1905566.097 ops/s
Iteration  26: 2027810.466 ops/s
Iteration  27: 1967584.651 ops/s
Iteration  28: 2069523.409 ops/s
Iteration  29: 2110163.266 ops/s
Iteration  30: 2107322.474 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectWith":
  1978954.772 ±(99.9%) 39849.330 ops/s [Average]
  (min, avg, max) = (1882849.364, 1978954.772, 2110163.266), stdev = 59644.606
  CI (99.9%): [1939105.441, 2018804.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectWith  thrpt   30  1978954.772 ± 39849.330  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectWithToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectWithToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1132450.522 ops/s
# Warmup Iteration   2: 3155286.195 ops/s
# Warmup Iteration   3: 3146440.468 ops/s
# Warmup Iteration   4: 2694228.102 ops/s
# Warmup Iteration   5: 3221171.887 ops/s
# Warmup Iteration   6: 3006307.913 ops/s
# Warmup Iteration   7: 3021052.155 ops/s
# Warmup Iteration   8: 3218892.712 ops/s
# Warmup Iteration   9: 3082965.848 ops/s
# Warmup Iteration  10: 2954196.942 ops/s
# Warmup Iteration  11: 3147915.679 ops/s
# Warmup Iteration  12: 3223237.772 ops/s
# Warmup Iteration  13: 3141075.753 ops/s
# Warmup Iteration  14: 2969081.640 ops/s
# Warmup Iteration  15: 2919344.270 ops/s
# Warmup Iteration  16: 2978301.357 ops/s
# Warmup Iteration  17: 2931478.777 ops/s
# Warmup Iteration  18: 2950098.055 ops/s
# Warmup Iteration  19: 2985803.541 ops/s
# Warmup Iteration  20: 2915128.103 ops/s
# Warmup Iteration  21: 2997341.934 ops/s
# Warmup Iteration  22: 2921919.706 ops/s
# Warmup Iteration  23: 3028722.612 ops/s
# Warmup Iteration  24: 2980917.742 ops/s
# Warmup Iteration  25: 2998655.695 ops/s
# Warmup Iteration  26: 2999617.029 ops/s
# Warmup Iteration  27: 3124347.748 ops/s
# Warmup Iteration  28: 3019966.583 ops/s
# Warmup Iteration  29: 3013265.305 ops/s
# Warmup Iteration  30: 2949590.725 ops/s
Iteration   1: 3048550.406 ops/s
Iteration   2: 2943900.933 ops/s
Iteration   3: 2927527.205 ops/s
Iteration   4: 2942339.943 ops/s
Iteration   5: 3068081.766 ops/s
Iteration   6: 2934130.976 ops/s
Iteration   7: 3068982.818 ops/s
Iteration   8: 2929988.181 ops/s
Iteration   9: 2977916.506 ops/s
Iteration  10: 3077065.462 ops/s
Iteration  11: 2967424.944 ops/s
Iteration  12: 3072083.408 ops/s
Iteration  13: 3066416.147 ops/s
Iteration  14: 3061664.343 ops/s
Iteration  15: 2906144.444 ops/s
Iteration  16: 2938974.475 ops/s
Iteration  17: 3000038.787 ops/s
Iteration  18: 2955647.169 ops/s
Iteration  19: 2953681.230 ops/s
Iteration  20: 2970571.569 ops/s
Iteration  21: 2999139.916 ops/s
Iteration  22: 2960445.424 ops/s
Iteration  23: 2948482.279 ops/s
Iteration  24: 2972892.705 ops/s
Iteration  25: 2972422.973 ops/s
Iteration  26: 2899638.106 ops/s
Iteration  27: 2940415.513 ops/s
Iteration  28: 2984484.001 ops/s
Iteration  29: 3014888.379 ops/s
Iteration  30: 3010292.922 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collectWithToTarget":
  2983807.764 ±(99.9%) 35778.355 ops/s [Average]
  (min, avg, max) = (2899638.106, 2983807.764, 3077065.462), stdev = 53551.362
  CI (99.9%): [2948029.409, 3019586.120] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collectWithToTarget  thrpt   30  2983807.764 ± 35778.355  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collect_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collect_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 481966.316 ops/s
# Warmup Iteration   2: 1122715.586 ops/s
# Warmup Iteration   3: 1203128.295 ops/s
# Warmup Iteration   4: 1043861.475 ops/s
# Warmup Iteration   5: 1137153.648 ops/s
# Warmup Iteration   6: 1240471.414 ops/s
# Warmup Iteration   7: 1205099.359 ops/s
# Warmup Iteration   8: 1207989.658 ops/s
# Warmup Iteration   9: 1276978.504 ops/s
# Warmup Iteration  10: 1223351.929 ops/s
# Warmup Iteration  11: 1209479.471 ops/s
# Warmup Iteration  12: 1194313.586 ops/s
# Warmup Iteration  13: 1180474.586 ops/s
# Warmup Iteration  14: 1193287.630 ops/s
# Warmup Iteration  15: 1187665.147 ops/s
# Warmup Iteration  16: 1267530.029 ops/s
# Warmup Iteration  17: 1295951.581 ops/s
# Warmup Iteration  18: 1213181.434 ops/s
# Warmup Iteration  19: 1194546.769 ops/s
# Warmup Iteration  20: 1206961.879 ops/s
# Warmup Iteration  21: 1174932.263 ops/s
# Warmup Iteration  22: 1173346.882 ops/s
# Warmup Iteration  23: 1202248.224 ops/s
# Warmup Iteration  24: 1182655.639 ops/s
# Warmup Iteration  25: 1205894.792 ops/s
# Warmup Iteration  26: 1209339.272 ops/s
# Warmup Iteration  27: 1253565.102 ops/s
# Warmup Iteration  28: 1202455.805 ops/s
# Warmup Iteration  29: 1203117.484 ops/s
# Warmup Iteration  30: 1297780.807 ops/s
Iteration   1: 1244065.454 ops/s
Iteration   2: 1290089.369 ops/s
Iteration   3: 1238033.899 ops/s
Iteration   4: 1253179.005 ops/s
Iteration   5: 1195953.096 ops/s
Iteration   6: 1209913.542 ops/s
Iteration   7: 1179891.466 ops/s
Iteration   8: 1184927.881 ops/s
Iteration   9: 1224064.036 ops/s
Iteration  10: 1254898.972 ops/s
Iteration  11: 1187300.679 ops/s
Iteration  12: 1196927.823 ops/s
Iteration  13: 1161523.058 ops/s
Iteration  14: 1216581.143 ops/s
Iteration  15: 1185858.289 ops/s
Iteration  16: 1216963.279 ops/s
Iteration  17: 1180155.911 ops/s
Iteration  18: 1200945.580 ops/s
Iteration  19: 1192397.747 ops/s
Iteration  20: 1186765.117 ops/s
Iteration  21: 1257050.691 ops/s
Iteration  22: 1243183.895 ops/s
Iteration  23: 1286659.249 ops/s
Iteration  24: 1200529.735 ops/s
Iteration  25: 1205428.703 ops/s
Iteration  26: 1191822.865 ops/s
Iteration  27: 1193162.693 ops/s
Iteration  28: 1191319.231 ops/s
Iteration  29: 1171450.688 ops/s
Iteration  30: 1177970.479 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_collect_value":
  1210633.786 ±(99.9%) 22355.655 ops/s [Average]
  (min, avg, max) = (1161523.058, 1210633.786, 1290089.369), stdev = 33460.895
  CI (99.9%): [1188278.131, 1232989.441] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_collect_value  thrpt   30  1210633.786 ± 22355.655  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3193669.996 ops/s
# Warmup Iteration   2: 6244778.410 ops/s
# Warmup Iteration   3: 5241871.958 ops/s
# Warmup Iteration   4: 6257844.896 ops/s
# Warmup Iteration   5: 6136243.319 ops/s
# Warmup Iteration   6: 6619712.321 ops/s
# Warmup Iteration   7: 6621982.939 ops/s
# Warmup Iteration   8: 6641956.153 ops/s
# Warmup Iteration   9: 6651296.146 ops/s
# Warmup Iteration  10: 6477993.682 ops/s
# Warmup Iteration  11: 6232818.065 ops/s
# Warmup Iteration  12: 6199820.574 ops/s
# Warmup Iteration  13: 6174580.581 ops/s
# Warmup Iteration  14: 6020833.274 ops/s
# Warmup Iteration  15: 6227166.368 ops/s
# Warmup Iteration  16: 6665986.005 ops/s
# Warmup Iteration  17: 6660289.776 ops/s
# Warmup Iteration  18: 6298632.835 ops/s
# Warmup Iteration  19: 6079494.174 ops/s
# Warmup Iteration  20: 6223068.582 ops/s
# Warmup Iteration  21: 6229686.507 ops/s
# Warmup Iteration  22: 6345676.451 ops/s
# Warmup Iteration  23: 6238887.988 ops/s
# Warmup Iteration  24: 6163704.158 ops/s
# Warmup Iteration  25: 6059851.005 ops/s
# Warmup Iteration  26: 6201680.581 ops/s
# Warmup Iteration  27: 6110017.658 ops/s
# Warmup Iteration  28: 6129061.871 ops/s
# Warmup Iteration  29: 6171006.833 ops/s
# Warmup Iteration  30: 6335299.551 ops/s
Iteration   1: 6400602.923 ops/s
Iteration   2: 6415949.983 ops/s
Iteration   3: 6212221.490 ops/s
Iteration   4: 6165565.029 ops/s
Iteration   5: 6328477.473 ops/s
Iteration   6: 6121084.040 ops/s
Iteration   7: 6052873.966 ops/s
Iteration   8: 6274415.407 ops/s
Iteration   9: 6107925.753 ops/s
Iteration  10: 6317079.963 ops/s
Iteration  11: 6256871.700 ops/s
Iteration  12: 6632210.390 ops/s
Iteration  13: 6387653.636 ops/s
Iteration  14: 6061076.352 ops/s
Iteration  15: 6183355.091 ops/s
Iteration  16: 6181926.747 ops/s
Iteration  17: 6074654.071 ops/s
Iteration  18: 6243650.725 ops/s
Iteration  19: 6494163.635 ops/s
Iteration  20: 6515420.161 ops/s
Iteration  21: 6357221.885 ops/s
Iteration  22: 6279494.541 ops/s
Iteration  23: 6253828.316 ops/s
Iteration  24: 6102235.890 ops/s
Iteration  25: 6011173.344 ops/s
Iteration  26: 6119891.773 ops/s
Iteration  27: 6151914.472 ops/s
Iteration  28: 6310588.212 ops/s
Iteration  29: 6328837.554 ops/s
Iteration  30: 6185894.804 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_contains":
  6250941.978 ±(99.9%) 99883.457 ops/s [Average]
  (min, avg, max) = (6011173.344, 6250941.978, 6632210.390), stdev = 149500.868
  CI (99.9%): [6151058.520, 6350825.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_contains  thrpt   30  6250941.978 ± 99883.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 488833.798 ops/s
# Warmup Iteration   2: 604415.370 ops/s
# Warmup Iteration   3: 792312.481 ops/s
# Warmup Iteration   4: 803294.813 ops/s
# Warmup Iteration   5: 805929.389 ops/s
# Warmup Iteration   6: 813555.293 ops/s
# Warmup Iteration   7: 777909.672 ops/s
# Warmup Iteration   8: 768661.265 ops/s
# Warmup Iteration   9: 728919.198 ops/s
# Warmup Iteration  10: 682761.665 ops/s
# Warmup Iteration  11: 769750.133 ops/s
# Warmup Iteration  12: 768384.596 ops/s
# Warmup Iteration  13: 771856.281 ops/s
# Warmup Iteration  14: 770091.900 ops/s
# Warmup Iteration  15: 773825.555 ops/s
# Warmup Iteration  16: 790217.061 ops/s
# Warmup Iteration  17: 774431.849 ops/s
# Warmup Iteration  18: 768820.612 ops/s
# Warmup Iteration  19: 770507.222 ops/s
# Warmup Iteration  20: 774173.788 ops/s
# Warmup Iteration  21: 779410.081 ops/s
# Warmup Iteration  22: 800829.618 ops/s
# Warmup Iteration  23: 775584.936 ops/s
# Warmup Iteration  24: 829239.794 ops/s
# Warmup Iteration  25: 796398.694 ops/s
# Warmup Iteration  26: 771757.402 ops/s
# Warmup Iteration  27: 800577.260 ops/s
# Warmup Iteration  28: 799328.745 ops/s
# Warmup Iteration  29: 788939.182 ops/s
# Warmup Iteration  30: 774857.779 ops/s
Iteration   1: 771574.856 ops/s
Iteration   2: 777431.102 ops/s
Iteration   3: 800222.563 ops/s
Iteration   4: 792351.181 ops/s
Iteration   5: 798583.498 ops/s
Iteration   6: 804284.924 ops/s
Iteration   7: 780618.766 ops/s
Iteration   8: 770565.500 ops/s
Iteration   9: 783356.271 ops/s
Iteration  10: 782835.599 ops/s
Iteration  11: 753005.363 ops/s
Iteration  12: 775091.793 ops/s
Iteration  13: 747727.581 ops/s
Iteration  14: 776483.627 ops/s
Iteration  15: 788652.863 ops/s
Iteration  16: 771800.480 ops/s
Iteration  17: 778280.060 ops/s
Iteration  18: 763806.314 ops/s
Iteration  19: 776880.417 ops/s
Iteration  20: 786383.380 ops/s
Iteration  21: 774496.988 ops/s
Iteration  22: 773056.378 ops/s
Iteration  23: 759152.923 ops/s
Iteration  24: 776720.362 ops/s
Iteration  25: 770026.711 ops/s
Iteration  26: 763845.316 ops/s
Iteration  27: 777284.787 ops/s
Iteration  28: 765115.344 ops/s
Iteration  29: 772137.802 ops/s
Iteration  30: 778852.719 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAll":
  776354.182 ±(99.9%) 8528.026 ops/s [Average]
  (min, avg, max) = (747727.581, 776354.182, 804284.924), stdev = 12764.349
  CI (99.9%): [767826.156, 784882.209] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_containsAll  thrpt   30  776354.182 ± 8528.026  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAllArguments$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAllArguments

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 783748.975 ops/s
# Warmup Iteration   2: 1154276.691 ops/s
# Warmup Iteration   3: 1452800.152 ops/s
# Warmup Iteration   4: 1411418.275 ops/s
# Warmup Iteration   5: 1513999.568 ops/s
# Warmup Iteration   6: 1435337.734 ops/s
# Warmup Iteration   7: 1173504.947 ops/s
# Warmup Iteration   8: 1465160.689 ops/s
# Warmup Iteration   9: 1509391.984 ops/s
# Warmup Iteration  10: 1462606.161 ops/s
# Warmup Iteration  11: 1444975.519 ops/s
# Warmup Iteration  12: 1485003.227 ops/s
# Warmup Iteration  13: 1465506.071 ops/s
# Warmup Iteration  14: 1482794.905 ops/s
# Warmup Iteration  15: 1513943.998 ops/s
# Warmup Iteration  16: 1523125.289 ops/s
# Warmup Iteration  17: 1464488.847 ops/s
# Warmup Iteration  18: 1467080.084 ops/s
# Warmup Iteration  19: 1464779.803 ops/s
# Warmup Iteration  20: 1442779.025 ops/s
# Warmup Iteration  21: 1451554.519 ops/s
# Warmup Iteration  22: 1457717.827 ops/s
# Warmup Iteration  23: 1454902.480 ops/s
# Warmup Iteration  24: 1467202.418 ops/s
# Warmup Iteration  25: 1475528.238 ops/s
# Warmup Iteration  26: 1466326.405 ops/s
# Warmup Iteration  27: 1447784.745 ops/s
# Warmup Iteration  28: 1465814.283 ops/s
# Warmup Iteration  29: 1510978.847 ops/s
# Warmup Iteration  30: 1476658.812 ops/s
Iteration   1: 1511019.217 ops/s
Iteration   2: 1457460.257 ops/s
Iteration   3: 1445947.872 ops/s
Iteration   4: 1433981.756 ops/s
Iteration   5: 1462457.425 ops/s
Iteration   6: 1461248.136 ops/s
Iteration   7: 1431801.046 ops/s
Iteration   8: 1435850.089 ops/s
Iteration   9: 1475958.839 ops/s
Iteration  10: 1454326.300 ops/s
Iteration  11: 1450911.783 ops/s
Iteration  12: 1483876.457 ops/s
Iteration  13: 1491517.390 ops/s
Iteration  14: 1537558.498 ops/s
Iteration  15: 1439185.706 ops/s
Iteration  16: 1530915.077 ops/s
Iteration  17: 1547118.410 ops/s
Iteration  18: 1541846.061 ops/s
Iteration  19: 1473563.438 ops/s
Iteration  20: 1480169.168 ops/s
Iteration  21: 1495330.044 ops/s
Iteration  22: 1544431.574 ops/s
Iteration  23: 1450050.727 ops/s
Iteration  24: 1526834.578 ops/s
Iteration  25: 1577708.882 ops/s
Iteration  26: 1505397.992 ops/s
Iteration  27: 1526852.181 ops/s
Iteration  28: 1470328.070 ops/s
Iteration  29: 1457779.812 ops/s
Iteration  30: 1450880.746 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAllArguments":
  1485076.918 ±(99.9%) 27129.489 ops/s [Average]
  (min, avg, max) = (1431801.046, 1485076.918, 1577708.882), stdev = 40606.145
  CI (99.9%): [1457947.429, 1512206.406] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_containsAllArguments  thrpt   30  1485076.918 ± 27129.489  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 808196.951 ops/s
# Warmup Iteration   2: 1278340.128 ops/s
# Warmup Iteration   3: 1486978.746 ops/s
# Warmup Iteration   4: 1469757.061 ops/s
# Warmup Iteration   5: 1472413.725 ops/s
# Warmup Iteration   6: 1460567.832 ops/s
# Warmup Iteration   7: 1197213.458 ops/s
# Warmup Iteration   8: 1475970.848 ops/s
# Warmup Iteration   9: 1527383.130 ops/s
# Warmup Iteration  10: 1513197.307 ops/s
# Warmup Iteration  11: 1474984.568 ops/s
# Warmup Iteration  12: 1510483.069 ops/s
# Warmup Iteration  13: 1520641.134 ops/s
# Warmup Iteration  14: 1512271.061 ops/s
# Warmup Iteration  15: 1471139.538 ops/s
# Warmup Iteration  16: 1482836.824 ops/s
# Warmup Iteration  17: 1537874.480 ops/s
# Warmup Iteration  18: 1481789.831 ops/s
# Warmup Iteration  19: 1534479.271 ops/s
# Warmup Iteration  20: 1491931.015 ops/s
# Warmup Iteration  21: 1614346.998 ops/s
# Warmup Iteration  22: 1550543.782 ops/s
# Warmup Iteration  23: 1576429.047 ops/s
# Warmup Iteration  24: 1608667.544 ops/s
# Warmup Iteration  25: 1570355.497 ops/s
# Warmup Iteration  26: 1522154.324 ops/s
# Warmup Iteration  27: 1537531.195 ops/s
# Warmup Iteration  28: 1593538.091 ops/s
# Warmup Iteration  29: 1585291.231 ops/s
# Warmup Iteration  30: 1481661.703 ops/s
Iteration   1: 1464936.702 ops/s
Iteration   2: 1511772.553 ops/s
Iteration   3: 1459685.527 ops/s
Iteration   4: 1468549.572 ops/s
Iteration   5: 1499057.007 ops/s
Iteration   6: 1502815.139 ops/s
Iteration   7: 1543950.146 ops/s
Iteration   8: 1510246.077 ops/s
Iteration   9: 1499918.506 ops/s
Iteration  10: 1533220.301 ops/s
Iteration  11: 1554741.094 ops/s
Iteration  12: 1483738.417 ops/s
Iteration  13: 1456234.695 ops/s
Iteration  14: 1537334.898 ops/s
Iteration  15: 1485894.182 ops/s
Iteration  16: 1523665.031 ops/s
Iteration  17: 1547509.610 ops/s
Iteration  18: 1540033.850 ops/s
Iteration  19: 1546228.554 ops/s
Iteration  20: 1547463.596 ops/s
Iteration  21: 1482527.363 ops/s
Iteration  22: 1482176.672 ops/s
Iteration  23: 1470256.066 ops/s
Iteration  24: 1488902.795 ops/s
Iteration  25: 1555192.411 ops/s
Iteration  26: 1527809.083 ops/s
Iteration  27: 1517858.373 ops/s
Iteration  28: 1478563.057 ops/s
Iteration  29: 1512880.749 ops/s
Iteration  30: 1619782.673 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAllIterable":
  1511764.823 ±(99.9%) 24595.265 ops/s [Average]
  (min, avg, max) = (1456234.695, 1511764.823, 1619782.673), stdev = 36813.037
  CI (99.9%): [1487169.559, 1536360.088] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_containsAllIterable  thrpt   30  1511764.823 ± 24595.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 423185.967 ops/s
# Warmup Iteration   2: 495785.667 ops/s
# Warmup Iteration   3: 707162.399 ops/s
# Warmup Iteration   4: 690548.415 ops/s
# Warmup Iteration   5: 685115.590 ops/s
# Warmup Iteration   6: 678450.646 ops/s
# Warmup Iteration   7: 671122.942 ops/s
# Warmup Iteration   8: 664227.109 ops/s
# Warmup Iteration   9: 658222.814 ops/s
# Warmup Iteration  10: 543281.542 ops/s
# Warmup Iteration  11: 683694.159 ops/s
# Warmup Iteration  12: 680725.821 ops/s
# Warmup Iteration  13: 685786.995 ops/s
# Warmup Iteration  14: 701231.242 ops/s
# Warmup Iteration  15: 669110.387 ops/s
# Warmup Iteration  16: 659726.106 ops/s
# Warmup Iteration  17: 657504.722 ops/s
# Warmup Iteration  18: 671031.600 ops/s
# Warmup Iteration  19: 697556.128 ops/s
# Warmup Iteration  20: 689815.568 ops/s
# Warmup Iteration  21: 677811.897 ops/s
# Warmup Iteration  22: 693340.734 ops/s
# Warmup Iteration  23: 710516.336 ops/s
# Warmup Iteration  24: 674443.999 ops/s
# Warmup Iteration  25: 683806.995 ops/s
# Warmup Iteration  26: 727061.943 ops/s
# Warmup Iteration  27: 704970.960 ops/s
# Warmup Iteration  28: 688180.897 ops/s
# Warmup Iteration  29: 723377.877 ops/s
# Warmup Iteration  30: 726616.667 ops/s
Iteration   1: 728730.661 ops/s
Iteration   2: 722528.413 ops/s
Iteration   3: 725826.848 ops/s
Iteration   4: 686957.151 ops/s
Iteration   5: 657661.082 ops/s
Iteration   6: 664973.316 ops/s
Iteration   7: 660500.395 ops/s
Iteration   8: 656853.979 ops/s
Iteration   9: 671849.637 ops/s
Iteration  10: 676193.667 ops/s
Iteration  11: 674929.922 ops/s
Iteration  12: 688335.367 ops/s
Iteration  13: 669521.982 ops/s
Iteration  14: 665521.894 ops/s
Iteration  15: 674131.759 ops/s
Iteration  16: 701803.613 ops/s
Iteration  17: 722024.346 ops/s
Iteration  18: 663573.896 ops/s
Iteration  19: 662685.253 ops/s
Iteration  20: 668624.221 ops/s
Iteration  21: 700676.660 ops/s
Iteration  22: 676471.055 ops/s
Iteration  23: 653638.532 ops/s
Iteration  24: 668047.804 ops/s
Iteration  25: 661057.846 ops/s
Iteration  26: 673933.992 ops/s
Iteration  27: 662812.541 ops/s
Iteration  28: 666309.645 ops/s
Iteration  29: 663253.266 ops/s
Iteration  30: 662233.195 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAnyCollection":
  677722.065 ±(99.9%) 14700.418 ops/s [Average]
  (min, avg, max) = (653638.532, 677722.065, 728730.661), stdev = 22002.896
  CI (99.9%): [663021.646, 692422.483] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  677722.065 ± 14700.418  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169730.360 ops/s
# Warmup Iteration   2: 197227.570 ops/s
# Warmup Iteration   3: 280121.718 ops/s
# Warmup Iteration   4: 313877.841 ops/s
# Warmup Iteration   5: 345591.336 ops/s
# Warmup Iteration   6: 358912.955 ops/s
# Warmup Iteration   7: 349830.468 ops/s
# Warmup Iteration   8: 360991.086 ops/s
# Warmup Iteration   9: 334906.382 ops/s
# Warmup Iteration  10: 337472.340 ops/s
# Warmup Iteration  11: 337319.225 ops/s
# Warmup Iteration  12: 339264.134 ops/s
# Warmup Iteration  13: 343770.626 ops/s
# Warmup Iteration  14: 356542.432 ops/s
# Warmup Iteration  15: 359278.594 ops/s
# Warmup Iteration  16: 371735.253 ops/s
# Warmup Iteration  17: 327978.270 ops/s
# Warmup Iteration  18: 319847.491 ops/s
# Warmup Iteration  19: 351090.235 ops/s
# Warmup Iteration  20: 354986.637 ops/s
# Warmup Iteration  21: 356320.998 ops/s
# Warmup Iteration  22: 357522.204 ops/s
# Warmup Iteration  23: 362096.047 ops/s
# Warmup Iteration  24: 344987.737 ops/s
# Warmup Iteration  25: 350950.954 ops/s
# Warmup Iteration  26: 353010.338 ops/s
# Warmup Iteration  27: 359049.052 ops/s
# Warmup Iteration  28: 355752.376 ops/s
# Warmup Iteration  29: 355572.261 ops/s
# Warmup Iteration  30: 367581.327 ops/s
Iteration   1: 336300.303 ops/s
Iteration   2: 338802.472 ops/s
Iteration   3: 343201.876 ops/s
Iteration   4: 345358.777 ops/s
Iteration   5: 341628.552 ops/s
Iteration   6: 344801.543 ops/s
Iteration   7: 338915.292 ops/s
Iteration   8: 333690.211 ops/s
Iteration   9: 346156.815 ops/s
Iteration  10: 338513.089 ops/s
Iteration  11: 351215.105 ops/s
Iteration  12: 369852.362 ops/s
Iteration  13: 361726.889 ops/s
Iteration  14: 342403.626 ops/s
Iteration  15: 341705.161 ops/s
Iteration  16: 339747.868 ops/s
Iteration  17: 338007.886 ops/s
Iteration  18: 340325.331 ops/s
Iteration  19: 342886.421 ops/s
Iteration  20: 337408.824 ops/s
Iteration  21: 336496.076 ops/s
Iteration  22: 334944.615 ops/s
Iteration  23: 338510.871 ops/s
Iteration  24: 343856.360 ops/s
Iteration  25: 339361.440 ops/s
Iteration  26: 336903.312 ops/s
Iteration  27: 337693.167 ops/s
Iteration  28: 342283.059 ops/s
Iteration  29: 348502.068 ops/s
Iteration  30: 339743.358 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsAnyIterable":
  342364.758 ±(99.9%) 5051.485 ops/s [Average]
  (min, avg, max) = (333690.211, 342364.758, 369852.362), stdev = 7560.825
  CI (99.9%): [337313.273, 347416.242] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  342364.758 ± 5051.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 344003.506 ops/s
# Warmup Iteration   2: 507148.132 ops/s
# Warmup Iteration   3: 767999.253 ops/s
# Warmup Iteration   4: 801667.119 ops/s
# Warmup Iteration   5: 785083.898 ops/s
# Warmup Iteration   6: 643726.047 ops/s
# Warmup Iteration   7: 781706.385 ops/s
# Warmup Iteration   8: 762664.825 ops/s
# Warmup Iteration   9: 780284.435 ops/s
# Warmup Iteration  10: 764868.644 ops/s
# Warmup Iteration  11: 776580.966 ops/s
# Warmup Iteration  12: 775893.030 ops/s
# Warmup Iteration  13: 764678.029 ops/s
# Warmup Iteration  14: 801078.747 ops/s
# Warmup Iteration  15: 801613.564 ops/s
# Warmup Iteration  16: 764520.534 ops/s
# Warmup Iteration  17: 772246.727 ops/s
# Warmup Iteration  18: 792657.356 ops/s
# Warmup Iteration  19: 807313.009 ops/s
# Warmup Iteration  20: 783703.305 ops/s
# Warmup Iteration  21: 772704.594 ops/s
# Warmup Iteration  22: 815500.308 ops/s
# Warmup Iteration  23: 793940.674 ops/s
# Warmup Iteration  24: 811969.812 ops/s
# Warmup Iteration  25: 778045.476 ops/s
# Warmup Iteration  26: 813264.511 ops/s
# Warmup Iteration  27: 836151.808 ops/s
# Warmup Iteration  28: 837283.872 ops/s
# Warmup Iteration  29: 816319.341 ops/s
# Warmup Iteration  30: 768336.548 ops/s
Iteration   1: 797200.602 ops/s
Iteration   2: 797316.591 ops/s
Iteration   3: 840995.159 ops/s
Iteration   4: 833106.131 ops/s
Iteration   5: 822155.191 ops/s
Iteration   6: 772391.365 ops/s
Iteration   7: 796728.847 ops/s
Iteration   8: 799765.333 ops/s
Iteration   9: 778413.927 ops/s
Iteration  10: 806397.877 ops/s
Iteration  11: 770692.114 ops/s
Iteration  12: 841893.821 ops/s
Iteration  13: 839940.011 ops/s
Iteration  14: 764607.690 ops/s
Iteration  15: 805392.211 ops/s
Iteration  16: 767914.761 ops/s
Iteration  17: 760434.120 ops/s
Iteration  18: 769507.509 ops/s
Iteration  19: 760795.365 ops/s
Iteration  20: 770580.113 ops/s
Iteration  21: 766674.895 ops/s
Iteration  22: 780661.573 ops/s
Iteration  23: 836537.310 ops/s
Iteration  24: 835936.304 ops/s
Iteration  25: 828393.006 ops/s
Iteration  26: 802325.426 ops/s
Iteration  27: 780185.079 ops/s
Iteration  28: 778888.849 ops/s
Iteration  29: 775050.104 ops/s
Iteration  30: 772029.953 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsKey":
  795097.041 ±(99.9%) 18578.793 ops/s [Average]
  (min, avg, max) = (760434.120, 795097.041, 841893.821), stdev = 27807.865
  CI (99.9%): [776518.248, 813675.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_containsKey  thrpt   30  795097.041 ± 18578.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 447832.637 ops/s
# Warmup Iteration   2: 585964.460 ops/s
# Warmup Iteration   3: 803717.238 ops/s
# Warmup Iteration   4: 806428.775 ops/s
# Warmup Iteration   5: 782246.083 ops/s
# Warmup Iteration   6: 798348.241 ops/s
# Warmup Iteration   7: 774525.324 ops/s
# Warmup Iteration   8: 657847.932 ops/s
# Warmup Iteration   9: 769814.717 ops/s
# Warmup Iteration  10: 783190.444 ops/s
# Warmup Iteration  11: 806687.444 ops/s
# Warmup Iteration  12: 809385.161 ops/s
# Warmup Iteration  13: 779467.234 ops/s
# Warmup Iteration  14: 793437.510 ops/s
# Warmup Iteration  15: 816313.531 ops/s
# Warmup Iteration  16: 777858.418 ops/s
# Warmup Iteration  17: 801627.364 ops/s
# Warmup Iteration  18: 781048.243 ops/s
# Warmup Iteration  19: 766432.279 ops/s
# Warmup Iteration  20: 805705.253 ops/s
# Warmup Iteration  21: 815629.805 ops/s
# Warmup Iteration  22: 795537.525 ops/s
# Warmup Iteration  23: 780184.999 ops/s
# Warmup Iteration  24: 811858.591 ops/s
# Warmup Iteration  25: 767264.128 ops/s
# Warmup Iteration  26: 772940.077 ops/s
# Warmup Iteration  27: 836646.505 ops/s
# Warmup Iteration  28: 786529.843 ops/s
# Warmup Iteration  29: 780486.998 ops/s
# Warmup Iteration  30: 770490.858 ops/s
Iteration   1: 784043.811 ops/s
Iteration   2: 774015.606 ops/s
Iteration   3: 784215.163 ops/s
Iteration   4: 806320.314 ops/s
Iteration   5: 819867.873 ops/s
Iteration   6: 777222.412 ops/s
Iteration   7: 778806.788 ops/s
Iteration   8: 772045.614 ops/s
Iteration   9: 762823.929 ops/s
Iteration  10: 764890.348 ops/s
Iteration  11: 776273.335 ops/s
Iteration  12: 787741.284 ops/s
Iteration  13: 791344.796 ops/s
Iteration  14: 766562.686 ops/s
Iteration  15: 776448.318 ops/s
Iteration  16: 778800.854 ops/s
Iteration  17: 767900.132 ops/s
Iteration  18: 789709.386 ops/s
Iteration  19: 789465.371 ops/s
Iteration  20: 825880.104 ops/s
Iteration  21: 843060.838 ops/s
Iteration  22: 838612.965 ops/s
Iteration  23: 770062.400 ops/s
Iteration  24: 766348.191 ops/s
Iteration  25: 801075.978 ops/s
Iteration  26: 807031.471 ops/s
Iteration  27: 814293.325 ops/s
Iteration  28: 771058.057 ops/s
Iteration  29: 780679.046 ops/s
Iteration  30: 774629.669 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsNoneCollection":
  788041.002 ±(99.9%) 14678.570 ops/s [Average]
  (min, avg, max) = (762823.929, 788041.002, 843060.838), stdev = 21970.194
  CI (99.9%): [773362.432, 802719.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  788041.002 ± 14678.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171355.032 ops/s
# Warmup Iteration   2: 189327.158 ops/s
# Warmup Iteration   3: 258272.040 ops/s
# Warmup Iteration   4: 292216.855 ops/s
# Warmup Iteration   5: 319776.858 ops/s
# Warmup Iteration   6: 324579.377 ops/s
# Warmup Iteration   7: 320779.787 ops/s
# Warmup Iteration   8: 320046.109 ops/s
# Warmup Iteration   9: 349749.548 ops/s
# Warmup Iteration  10: 337291.110 ops/s
# Warmup Iteration  11: 325846.364 ops/s
# Warmup Iteration  12: 315499.217 ops/s
# Warmup Iteration  13: 336504.341 ops/s
# Warmup Iteration  14: 335016.680 ops/s
# Warmup Iteration  15: 316642.924 ops/s
# Warmup Iteration  16: 332914.025 ops/s
# Warmup Iteration  17: 318939.804 ops/s
# Warmup Iteration  18: 273475.232 ops/s
# Warmup Iteration  19: 321047.089 ops/s
# Warmup Iteration  20: 318906.657 ops/s
# Warmup Iteration  21: 320474.833 ops/s
# Warmup Iteration  22: 327418.686 ops/s
# Warmup Iteration  23: 321202.319 ops/s
# Warmup Iteration  24: 339818.140 ops/s
# Warmup Iteration  25: 344509.520 ops/s
# Warmup Iteration  26: 333351.327 ops/s
# Warmup Iteration  27: 346424.000 ops/s
# Warmup Iteration  28: 350213.876 ops/s
# Warmup Iteration  29: 342460.286 ops/s
# Warmup Iteration  30: 337218.585 ops/s
Iteration   1: 313678.783 ops/s
Iteration   2: 338689.995 ops/s
Iteration   3: 345768.282 ops/s
Iteration   4: 336403.914 ops/s
Iteration   5: 331972.597 ops/s
Iteration   6: 327508.903 ops/s
Iteration   7: 320489.406 ops/s
Iteration   8: 347270.617 ops/s
Iteration   9: 336922.492 ops/s
Iteration  10: 322770.197 ops/s
Iteration  11: 328219.454 ops/s
Iteration  12: 331029.401 ops/s
Iteration  13: 320793.127 ops/s
Iteration  14: 325203.604 ops/s
Iteration  15: 342891.822 ops/s
Iteration  16: 336057.141 ops/s
Iteration  17: 351535.605 ops/s
Iteration  18: 351892.052 ops/s
Iteration  19: 330397.069 ops/s
Iteration  20: 321981.518 ops/s
Iteration  21: 322409.566 ops/s
Iteration  22: 321407.762 ops/s
Iteration  23: 319934.492 ops/s
Iteration  24: 323089.143 ops/s
Iteration  25: 343124.611 ops/s
Iteration  26: 340986.798 ops/s
Iteration  27: 338970.607 ops/s
Iteration  28: 348852.223 ops/s
Iteration  29: 338635.033 ops/s
Iteration  30: 326367.095 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsNoneIterable":
  332841.777 ±(99.9%) 7135.433 ops/s [Average]
  (min, avg, max) = (313678.783, 332841.777, 351892.052), stdev = 10679.981
  CI (99.9%): [325706.344, 339977.210] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  332841.777 ± 7135.433  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 287530.254 ops/s
# Warmup Iteration   2: 447022.248 ops/s
# Warmup Iteration   3: 632673.371 ops/s
# Warmup Iteration   4: 603632.495 ops/s
# Warmup Iteration   5: 614424.028 ops/s
# Warmup Iteration   6: 538869.662 ops/s
# Warmup Iteration   7: 646274.126 ops/s
# Warmup Iteration   8: 641271.454 ops/s
# Warmup Iteration   9: 623429.287 ops/s
# Warmup Iteration  10: 628086.098 ops/s
# Warmup Iteration  11: 628090.196 ops/s
# Warmup Iteration  12: 608400.608 ops/s
# Warmup Iteration  13: 614625.948 ops/s
# Warmup Iteration  14: 607344.014 ops/s
# Warmup Iteration  15: 606931.371 ops/s
# Warmup Iteration  16: 607142.355 ops/s
# Warmup Iteration  17: 637829.015 ops/s
# Warmup Iteration  18: 628846.957 ops/s
# Warmup Iteration  19: 608643.325 ops/s
# Warmup Iteration  20: 610719.576 ops/s
# Warmup Iteration  21: 611580.620 ops/s
# Warmup Iteration  22: 612630.522 ops/s
# Warmup Iteration  23: 609598.370 ops/s
# Warmup Iteration  24: 661733.665 ops/s
# Warmup Iteration  25: 610657.419 ops/s
# Warmup Iteration  26: 636440.802 ops/s
# Warmup Iteration  27: 617840.455 ops/s
# Warmup Iteration  28: 621578.406 ops/s
# Warmup Iteration  29: 599368.733 ops/s
# Warmup Iteration  30: 606877.270 ops/s
Iteration   1: 626416.805 ops/s
Iteration   2: 600690.771 ops/s
Iteration   3: 636385.137 ops/s
Iteration   4: 623738.471 ops/s
Iteration   5: 608361.473 ops/s
Iteration   6: 605896.502 ops/s
Iteration   7: 600673.033 ops/s
Iteration   8: 598006.530 ops/s
Iteration   9: 628554.289 ops/s
Iteration  10: 658149.678 ops/s
Iteration  11: 642809.026 ops/s
Iteration  12: 588358.518 ops/s
Iteration  13: 600204.753 ops/s
Iteration  14: 608496.658 ops/s
Iteration  15: 611404.119 ops/s
Iteration  16: 614106.840 ops/s
Iteration  17: 612724.649 ops/s
Iteration  18: 612071.882 ops/s
Iteration  19: 611498.001 ops/s
Iteration  20: 608463.523 ops/s
Iteration  21: 611402.166 ops/s
Iteration  22: 597582.779 ops/s
Iteration  23: 620680.010 ops/s
Iteration  24: 602192.124 ops/s
Iteration  25: 612544.352 ops/s
Iteration  26: 608565.431 ops/s
Iteration  27: 615460.264 ops/s
Iteration  28: 642595.121 ops/s
Iteration  29: 601867.709 ops/s
Iteration  30: 609062.204 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_containsValue":
  613965.427 ±(99.9%) 10275.361 ops/s [Average]
  (min, avg, max) = (588358.518, 613965.427, 658149.678), stdev = 15379.678
  CI (99.9%): [603690.066, 624240.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_containsValue  thrpt   30  613965.427 ± 10275.361  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2458821.115 ops/s
# Warmup Iteration   2: 4975201.016 ops/s
# Warmup Iteration   3: 4142859.960 ops/s
# Warmup Iteration   4: 5096247.398 ops/s
# Warmup Iteration   5: 5096163.937 ops/s
# Warmup Iteration   6: 5041726.830 ops/s
# Warmup Iteration   7: 5132907.601 ops/s
# Warmup Iteration   8: 5315368.496 ops/s
# Warmup Iteration   9: 5435792.560 ops/s
# Warmup Iteration  10: 5429057.265 ops/s
# Warmup Iteration  11: 5041366.328 ops/s
# Warmup Iteration  12: 5137236.067 ops/s
# Warmup Iteration  13: 5130227.341 ops/s
# Warmup Iteration  14: 5094784.512 ops/s
# Warmup Iteration  15: 5161319.787 ops/s
# Warmup Iteration  16: 5021759.221 ops/s
# Warmup Iteration  17: 5055158.675 ops/s
# Warmup Iteration  18: 5259469.353 ops/s
# Warmup Iteration  19: 5055388.647 ops/s
# Warmup Iteration  20: 5078888.062 ops/s
# Warmup Iteration  21: 5205032.583 ops/s
# Warmup Iteration  22: 5169740.070 ops/s
# Warmup Iteration  23: 4998465.114 ops/s
# Warmup Iteration  24: 5013271.730 ops/s
# Warmup Iteration  25: 5030244.397 ops/s
# Warmup Iteration  26: 5197649.155 ops/s
# Warmup Iteration  27: 5268767.320 ops/s
# Warmup Iteration  28: 5079812.247 ops/s
# Warmup Iteration  29: 5026614.739 ops/s
# Warmup Iteration  30: 4964040.065 ops/s
Iteration   1: 5211522.691 ops/s
Iteration   2: 5037851.000 ops/s
Iteration   3: 5256369.685 ops/s
Iteration   4: 5430232.956 ops/s
Iteration   5: 5355043.674 ops/s
Iteration   6: 4970488.140 ops/s
Iteration   7: 5042005.217 ops/s
Iteration   8: 4979210.614 ops/s
Iteration   9: 5069004.216 ops/s
Iteration  10: 4991894.904 ops/s
Iteration  11: 4894932.104 ops/s
Iteration  12: 4994095.822 ops/s
Iteration  13: 5035881.200 ops/s
Iteration  14: 4950830.885 ops/s
Iteration  15: 5171730.887 ops/s
Iteration  16: 4994827.131 ops/s
Iteration  17: 5003800.027 ops/s
Iteration  18: 5066424.086 ops/s
Iteration  19: 5092636.052 ops/s
Iteration  20: 4997535.774 ops/s
Iteration  21: 5194804.141 ops/s
Iteration  22: 5193307.676 ops/s
Iteration  23: 5066634.785 ops/s
Iteration  24: 5238832.528 ops/s
Iteration  25: 5207538.816 ops/s
Iteration  26: 5044580.848 ops/s
Iteration  27: 5084137.069 ops/s
Iteration  28: 5012150.480 ops/s
Iteration  29: 4977325.968 ops/s
Iteration  30: 5077909.113 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_count":
  5088117.950 ±(99.9%) 83316.920 ops/s [Average]
  (min, avg, max) = (4894932.104, 5088117.950, 5430232.956), stdev = 124704.852
  CI (99.9%): [5004801.030, 5171434.869] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_count  thrpt   30  5088117.950 ± 83316.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 725164.584 ops/s
# Warmup Iteration   2: 1479845.960 ops/s
# Warmup Iteration   3: 1655857.230 ops/s
# Warmup Iteration   4: 1664195.712 ops/s
# Warmup Iteration   5: 1372778.724 ops/s
# Warmup Iteration   6: 1611045.359 ops/s
# Warmup Iteration   7: 1679410.658 ops/s
# Warmup Iteration   8: 1691817.335 ops/s
# Warmup Iteration   9: 1674266.459 ops/s
# Warmup Iteration  10: 1715422.096 ops/s
# Warmup Iteration  11: 1692342.652 ops/s
# Warmup Iteration  12: 1685982.250 ops/s
# Warmup Iteration  13: 1655235.823 ops/s
# Warmup Iteration  14: 1667484.207 ops/s
# Warmup Iteration  15: 1691335.741 ops/s
# Warmup Iteration  16: 1659899.823 ops/s
# Warmup Iteration  17: 1757835.019 ops/s
# Warmup Iteration  18: 1666443.083 ops/s
# Warmup Iteration  19: 1671316.346 ops/s
# Warmup Iteration  20: 1687063.224 ops/s
# Warmup Iteration  21: 1693989.070 ops/s
# Warmup Iteration  22: 1683698.742 ops/s
# Warmup Iteration  23: 1688470.156 ops/s
# Warmup Iteration  24: 1747325.107 ops/s
# Warmup Iteration  25: 1695693.736 ops/s
# Warmup Iteration  26: 1678746.871 ops/s
# Warmup Iteration  27: 1719138.706 ops/s
# Warmup Iteration  28: 1673713.895 ops/s
# Warmup Iteration  29: 1692131.633 ops/s
# Warmup Iteration  30: 1676937.887 ops/s
Iteration   1: 1684166.561 ops/s
Iteration   2: 1724831.894 ops/s
Iteration   3: 1746536.055 ops/s
Iteration   4: 1665649.675 ops/s
Iteration   5: 1706208.949 ops/s
Iteration   6: 1664215.873 ops/s
Iteration   7: 1796340.310 ops/s
Iteration   8: 1723329.991 ops/s
Iteration   9: 1723436.765 ops/s
Iteration  10: 1756030.196 ops/s
Iteration  11: 1740609.860 ops/s
Iteration  12: 1726651.788 ops/s
Iteration  13: 1707909.318 ops/s
Iteration  14: 1676838.436 ops/s
Iteration  15: 1702325.885 ops/s
Iteration  16: 1659031.627 ops/s
Iteration  17: 1690223.724 ops/s
Iteration  18: 1679334.701 ops/s
Iteration  19: 1680655.152 ops/s
Iteration  20: 1676028.170 ops/s
Iteration  21: 1695267.656 ops/s
Iteration  22: 1704388.416 ops/s
Iteration  23: 1684125.299 ops/s
Iteration  24: 1663860.489 ops/s
Iteration  25: 1662295.120 ops/s
Iteration  26: 1732035.563 ops/s
Iteration  27: 1698955.096 ops/s
Iteration  28: 1676821.708 ops/s
Iteration  29: 1653851.196 ops/s
Iteration  30: 1654229.680 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_countBy":
  1698539.505 ±(99.9%) 22845.154 ops/s [Average]
  (min, avg, max) = (1653851.196, 1698539.505, 1796340.310), stdev = 34193.553
  CI (99.9%): [1675694.351, 1721384.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_countBy  thrpt   30  1698539.505 ± 22845.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 222054.267 ops/s
# Warmup Iteration   2: 353107.470 ops/s
# Warmup Iteration   3: 449230.518 ops/s
# Warmup Iteration   4: 449464.504 ops/s
# Warmup Iteration   5: 443622.188 ops/s
# Warmup Iteration   6: 419796.542 ops/s
# Warmup Iteration   7: 386979.204 ops/s
# Warmup Iteration   8: 434430.686 ops/s
# Warmup Iteration   9: 440747.918 ops/s
# Warmup Iteration  10: 440781.810 ops/s
# Warmup Iteration  11: 444517.294 ops/s
# Warmup Iteration  12: 440681.466 ops/s
# Warmup Iteration  13: 429342.702 ops/s
# Warmup Iteration  14: 437445.732 ops/s
# Warmup Iteration  15: 425326.484 ops/s
# Warmup Iteration  16: 425529.227 ops/s
# Warmup Iteration  17: 428840.181 ops/s
# Warmup Iteration  18: 433879.078 ops/s
# Warmup Iteration  19: 430640.232 ops/s
# Warmup Iteration  20: 418587.250 ops/s
# Warmup Iteration  21: 427518.572 ops/s
# Warmup Iteration  22: 420545.878 ops/s
# Warmup Iteration  23: 423454.450 ops/s
# Warmup Iteration  24: 428403.917 ops/s
# Warmup Iteration  25: 430278.812 ops/s
# Warmup Iteration  26: 438906.363 ops/s
# Warmup Iteration  27: 428177.267 ops/s
# Warmup Iteration  28: 423025.210 ops/s
# Warmup Iteration  29: 423608.344 ops/s
# Warmup Iteration  30: 421467.324 ops/s
Iteration   1: 419481.654 ops/s
Iteration   2: 435179.764 ops/s
Iteration   3: 420039.671 ops/s
Iteration   4: 419698.561 ops/s
Iteration   5: 427391.645 ops/s
Iteration   6: 427161.582 ops/s
Iteration   7: 434369.219 ops/s
Iteration   8: 419162.221 ops/s
Iteration   9: 454604.026 ops/s
Iteration  10: 464329.628 ops/s
Iteration  11: 454372.545 ops/s
Iteration  12: 428092.434 ops/s
Iteration  13: 426675.836 ops/s
Iteration  14: 421143.943 ops/s
Iteration  15: 424169.136 ops/s
Iteration  16: 441589.044 ops/s
Iteration  17: 431926.924 ops/s
Iteration  18: 424634.948 ops/s
Iteration  19: 421732.571 ops/s
Iteration  20: 418843.752 ops/s
Iteration  21: 456839.468 ops/s
Iteration  22: 448167.231 ops/s
Iteration  23: 444781.050 ops/s
Iteration  24: 435285.035 ops/s
Iteration  25: 440707.702 ops/s
Iteration  26: 442826.808 ops/s
Iteration  27: 421915.351 ops/s
Iteration  28: 434156.793 ops/s
Iteration  29: 419951.973 ops/s
Iteration  30: 419787.612 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_countByEach":
  432633.938 ±(99.9%) 8785.552 ops/s [Average]
  (min, avg, max) = (418843.752, 432633.938, 464329.628), stdev = 13149.802
  CI (99.9%): [423848.385, 441419.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_countByEach  thrpt   30  432633.938 ± 8785.552  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708698.038 ops/s
# Warmup Iteration   2: 1366688.696 ops/s
# Warmup Iteration   3: 1632286.959 ops/s
# Warmup Iteration   4: 1632004.319 ops/s
# Warmup Iteration   5: 1507660.710 ops/s
# Warmup Iteration   6: 1718463.198 ops/s
# Warmup Iteration   7: 1649702.764 ops/s
# Warmup Iteration   8: 1674512.181 ops/s
# Warmup Iteration   9: 1638481.019 ops/s
# Warmup Iteration  10: 1625829.314 ops/s
# Warmup Iteration  11: 1635069.030 ops/s
# Warmup Iteration  12: 1612968.971 ops/s
# Warmup Iteration  13: 1671397.170 ops/s
# Warmup Iteration  14: 1629211.867 ops/s
# Warmup Iteration  15: 1661151.054 ops/s
# Warmup Iteration  16: 1660279.552 ops/s
# Warmup Iteration  17: 1668471.873 ops/s
# Warmup Iteration  18: 1652009.261 ops/s
# Warmup Iteration  19: 1684568.071 ops/s
# Warmup Iteration  20: 1621532.895 ops/s
# Warmup Iteration  21: 1622806.786 ops/s
# Warmup Iteration  22: 1642704.375 ops/s
# Warmup Iteration  23: 1635336.918 ops/s
# Warmup Iteration  24: 1652399.498 ops/s
# Warmup Iteration  25: 1623317.294 ops/s
# Warmup Iteration  26: 1639225.699 ops/s
# Warmup Iteration  27: 1627430.571 ops/s
# Warmup Iteration  28: 1628594.836 ops/s
# Warmup Iteration  29: 1633599.579 ops/s
# Warmup Iteration  30: 1626367.964 ops/s
Iteration   1: 1603968.567 ops/s
Iteration   2: 1692251.160 ops/s
Iteration   3: 1767953.070 ops/s
Iteration   4: 1698646.732 ops/s
Iteration   5: 1604244.442 ops/s
Iteration   6: 1663991.043 ops/s
Iteration   7: 1605397.058 ops/s
Iteration   8: 1599721.587 ops/s
Iteration   9: 1632199.980 ops/s
Iteration  10: 1607503.154 ops/s
Iteration  11: 1614625.856 ops/s
Iteration  12: 1615935.499 ops/s
Iteration  13: 1644469.192 ops/s
Iteration  14: 1626559.163 ops/s
Iteration  15: 1620003.776 ops/s
Iteration  16: 1707453.311 ops/s
Iteration  17: 1650520.129 ops/s
Iteration  18: 1623664.597 ops/s
Iteration  19: 1779170.649 ops/s
Iteration  20: 1682899.419 ops/s
Iteration  21: 1626429.240 ops/s
Iteration  22: 1644735.614 ops/s
Iteration  23: 1606469.438 ops/s
Iteration  24: 1637197.623 ops/s
Iteration  25: 1636958.705 ops/s
Iteration  26: 1631488.893 ops/s
Iteration  27: 1603682.418 ops/s
Iteration  28: 1615368.581 ops/s
Iteration  29: 1702461.412 ops/s
Iteration  30: 1779151.456 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_countByWith":
  1650837.392 ±(99.9%) 35239.265 ops/s [Average]
  (min, avg, max) = (1599721.587, 1650837.392, 1779170.649), stdev = 52744.477
  CI (99.9%): [1615598.127, 1686076.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_countByWith  thrpt   30  1650837.392 ± 35239.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1932448.394 ops/s
# Warmup Iteration   2: 3953143.144 ops/s
# Warmup Iteration   3: 3858718.599 ops/s
# Warmup Iteration   4: 3239347.793 ops/s
# Warmup Iteration   5: 3753699.053 ops/s
# Warmup Iteration   6: 4059257.635 ops/s
# Warmup Iteration   7: 4073568.859 ops/s
# Warmup Iteration   8: 3931891.567 ops/s
# Warmup Iteration   9: 4044895.440 ops/s
# Warmup Iteration  10: 4046249.608 ops/s
# Warmup Iteration  11: 4158113.091 ops/s
# Warmup Iteration  12: 3941329.125 ops/s
# Warmup Iteration  13: 3875801.047 ops/s
# Warmup Iteration  14: 3891091.275 ops/s
# Warmup Iteration  15: 3939173.127 ops/s
# Warmup Iteration  16: 4089593.722 ops/s
# Warmup Iteration  17: 3892202.073 ops/s
# Warmup Iteration  18: 3869152.573 ops/s
# Warmup Iteration  19: 3786266.793 ops/s
# Warmup Iteration  20: 3910631.361 ops/s
# Warmup Iteration  21: 3846574.500 ops/s
# Warmup Iteration  22: 3946272.942 ops/s
# Warmup Iteration  23: 3845564.628 ops/s
# Warmup Iteration  24: 3921859.515 ops/s
# Warmup Iteration  25: 3831578.292 ops/s
# Warmup Iteration  26: 3813230.886 ops/s
# Warmup Iteration  27: 3815665.493 ops/s
# Warmup Iteration  28: 3830374.495 ops/s
# Warmup Iteration  29: 3820042.216 ops/s
# Warmup Iteration  30: 3806867.310 ops/s
Iteration   1: 3877666.841 ops/s
Iteration   2: 3765067.928 ops/s
Iteration   3: 3829193.648 ops/s
Iteration   4: 3789672.425 ops/s
Iteration   5: 3849554.961 ops/s
Iteration   6: 3889827.364 ops/s
Iteration   7: 3753600.004 ops/s
Iteration   8: 3896344.678 ops/s
Iteration   9: 3953344.056 ops/s
Iteration  10: 3944236.242 ops/s
Iteration  11: 3873609.993 ops/s
Iteration  12: 3997552.373 ops/s
Iteration  13: 3823075.028 ops/s
Iteration  14: 3769282.656 ops/s
Iteration  15: 3796841.867 ops/s
Iteration  16: 4056995.210 ops/s
Iteration  17: 4002651.928 ops/s
Iteration  18: 4006337.896 ops/s
Iteration  19: 3867686.252 ops/s
Iteration  20: 3835731.990 ops/s
Iteration  21: 4050898.338 ops/s
Iteration  22: 3986411.244 ops/s
Iteration  23: 4149891.871 ops/s
Iteration  24: 3970910.813 ops/s
Iteration  25: 3999294.385 ops/s
Iteration  26: 4037681.424 ops/s
Iteration  27: 3906219.039 ops/s
Iteration  28: 3993208.272 ops/s
Iteration  29: 3977824.704 ops/s
Iteration  30: 4039241.536 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_countWith":
  3922995.166 ±(99.9%) 68534.157 ops/s [Average]
  (min, avg, max) = (3753600.004, 3922995.166, 4149891.871), stdev = 102578.708
  CI (99.9%): [3854461.008, 3991529.323] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_countWith  thrpt   30  3922995.166 ± 68534.157  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1824863.737 ops/s
# Warmup Iteration   2: 4493425.493 ops/s
# Warmup Iteration   3: 4413524.808 ops/s
# Warmup Iteration   4: 3571381.269 ops/s
# Warmup Iteration   5: 4387882.971 ops/s
# Warmup Iteration   6: 4412071.623 ops/s
# Warmup Iteration   7: 4391641.497 ops/s
# Warmup Iteration   8: 4380428.832 ops/s
# Warmup Iteration   9: 4517989.936 ops/s
# Warmup Iteration  10: 4360648.181 ops/s
# Warmup Iteration  11: 4410051.869 ops/s
# Warmup Iteration  12: 4334263.563 ops/s
# Warmup Iteration  13: 4620918.278 ops/s
# Warmup Iteration  14: 4537802.254 ops/s
# Warmup Iteration  15: 4438725.535 ops/s
# Warmup Iteration  16: 4644613.637 ops/s
# Warmup Iteration  17: 4397626.665 ops/s
# Warmup Iteration  18: 4392911.158 ops/s
# Warmup Iteration  19: 4336698.807 ops/s
# Warmup Iteration  20: 4331918.183 ops/s
# Warmup Iteration  21: 4429409.248 ops/s
# Warmup Iteration  22: 4349502.548 ops/s
# Warmup Iteration  23: 4416964.688 ops/s
# Warmup Iteration  24: 4669286.525 ops/s
# Warmup Iteration  25: 4404890.660 ops/s
# Warmup Iteration  26: 4424546.374 ops/s
# Warmup Iteration  27: 4466415.424 ops/s
# Warmup Iteration  28: 4390065.539 ops/s
# Warmup Iteration  29: 4308385.926 ops/s
# Warmup Iteration  30: 4295541.509 ops/s
Iteration   1: 4369618.214 ops/s
Iteration   2: 4468305.585 ops/s
Iteration   3: 4347007.299 ops/s
Iteration   4: 4344404.000 ops/s
Iteration   5: 4351533.919 ops/s
Iteration   6: 4399262.360 ops/s
Iteration   7: 4363709.868 ops/s
Iteration   8: 4370517.710 ops/s
Iteration   9: 4302727.350 ops/s
Iteration  10: 4353752.253 ops/s
Iteration  11: 4455892.749 ops/s
Iteration  12: 4431368.698 ops/s
Iteration  13: 4342199.299 ops/s
Iteration  14: 4354499.312 ops/s
Iteration  15: 4521185.435 ops/s
Iteration  16: 4330393.786 ops/s
Iteration  17: 4366492.811 ops/s
Iteration  18: 4334053.936 ops/s
Iteration  19: 4624987.775 ops/s
Iteration  20: 4752019.536 ops/s
Iteration  21: 4558874.826 ops/s
Iteration  22: 4486317.431 ops/s
Iteration  23: 4308874.544 ops/s
Iteration  24: 4377858.947 ops/s
Iteration  25: 4378098.610 ops/s
Iteration  26: 4427532.491 ops/s
Iteration  27: 4392656.981 ops/s
Iteration  28: 4374515.155 ops/s
Iteration  29: 4451729.871 ops/s
Iteration  30: 4692682.990 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detect":
  4421102.458 ±(99.9%) 73929.932 ops/s [Average]
  (min, avg, max) = (4302727.350, 4421102.458, 4752019.536), stdev = 110654.849
  CI (99.9%): [4347172.527, 4495032.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_detect  thrpt   30  4421102.458 ± 73929.932  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectIfNone_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectIfNone_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1695064.392 ops/s
# Warmup Iteration   2: 4316963.322 ops/s
# Warmup Iteration   3: 4263054.582 ops/s
# Warmup Iteration   4: 3323467.657 ops/s
# Warmup Iteration   5: 4102932.218 ops/s
# Warmup Iteration   6: 4126975.761 ops/s
# Warmup Iteration   7: 4155263.504 ops/s
# Warmup Iteration   8: 4120694.438 ops/s
# Warmup Iteration   9: 4151783.725 ops/s
# Warmup Iteration  10: 4146761.306 ops/s
# Warmup Iteration  11: 4110904.734 ops/s
# Warmup Iteration  12: 4090495.210 ops/s
# Warmup Iteration  13: 4134829.601 ops/s
# Warmup Iteration  14: 4097207.659 ops/s
# Warmup Iteration  15: 4148906.461 ops/s
# Warmup Iteration  16: 4114677.032 ops/s
# Warmup Iteration  17: 4143378.262 ops/s
# Warmup Iteration  18: 4113140.562 ops/s
# Warmup Iteration  19: 4096979.249 ops/s
# Warmup Iteration  20: 4149078.063 ops/s
# Warmup Iteration  21: 4145900.662 ops/s
# Warmup Iteration  22: 4150384.883 ops/s
# Warmup Iteration  23: 4096849.308 ops/s
# Warmup Iteration  24: 4131966.901 ops/s
# Warmup Iteration  25: 4150546.280 ops/s
# Warmup Iteration  26: 4261031.418 ops/s
# Warmup Iteration  27: 4440814.633 ops/s
# Warmup Iteration  28: 4263938.906 ops/s
# Warmup Iteration  29: 4298524.499 ops/s
# Warmup Iteration  30: 4128347.119 ops/s
Iteration   1: 4170545.162 ops/s
Iteration   2: 4172181.678 ops/s
Iteration   3: 4171508.954 ops/s
Iteration   4: 4495188.179 ops/s
Iteration   5: 4531338.781 ops/s
Iteration   6: 4489330.271 ops/s
Iteration   7: 4129412.313 ops/s
Iteration   8: 4203333.785 ops/s
Iteration   9: 4327871.905 ops/s
Iteration  10: 4470687.869 ops/s
Iteration  11: 4333537.738 ops/s
Iteration  12: 4265532.687 ops/s
Iteration  13: 4335839.680 ops/s
Iteration  14: 4323825.160 ops/s
Iteration  15: 4384003.030 ops/s
Iteration  16: 4257524.891 ops/s
Iteration  17: 4155674.351 ops/s
Iteration  18: 4199123.614 ops/s
Iteration  19: 4124624.383 ops/s
Iteration  20: 4343244.778 ops/s
Iteration  21: 4231260.594 ops/s
Iteration  22: 4114973.074 ops/s
Iteration  23: 4194803.417 ops/s
Iteration  24: 4148750.336 ops/s
Iteration  25: 4189827.622 ops/s
Iteration  26: 4332300.115 ops/s
Iteration  27: 4152317.448 ops/s
Iteration  28: 4102192.723 ops/s
Iteration  29: 4406588.823 ops/s
Iteration  30: 4262573.739 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectIfNone_value":
  4267330.570 ±(99.9%) 83211.489 ops/s [Average]
  (min, avg, max) = (4102192.723, 4267330.570, 4531338.781), stdev = 124547.048
  CI (99.9%): [4184119.081, 4350542.058] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_detectIfNone_value  thrpt   30  4267330.570 ± 83211.489  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1841005.580 ops/s
# Warmup Iteration   2: 4513094.998 ops/s
# Warmup Iteration   3: 4254130.827 ops/s
# Warmup Iteration   4: 3502298.068 ops/s
# Warmup Iteration   5: 4264916.566 ops/s
# Warmup Iteration   6: 4244937.674 ops/s
# Warmup Iteration   7: 4234944.488 ops/s
# Warmup Iteration   8: 4290628.079 ops/s
# Warmup Iteration   9: 4323353.849 ops/s
# Warmup Iteration  10: 4310960.771 ops/s
# Warmup Iteration  11: 4434594.388 ops/s
# Warmup Iteration  12: 4420432.216 ops/s
# Warmup Iteration  13: 4316022.008 ops/s
# Warmup Iteration  14: 4419244.292 ops/s
# Warmup Iteration  15: 4257754.047 ops/s
# Warmup Iteration  16: 4326584.389 ops/s
# Warmup Iteration  17: 4245458.065 ops/s
# Warmup Iteration  18: 4274706.556 ops/s
# Warmup Iteration  19: 4391189.667 ops/s
# Warmup Iteration  20: 4331039.474 ops/s
# Warmup Iteration  21: 4401321.079 ops/s
# Warmup Iteration  22: 4486977.831 ops/s
# Warmup Iteration  23: 4384391.086 ops/s
# Warmup Iteration  24: 4530579.224 ops/s
# Warmup Iteration  25: 4370244.571 ops/s
# Warmup Iteration  26: 4326820.412 ops/s
# Warmup Iteration  27: 4216832.989 ops/s
# Warmup Iteration  28: 4445609.454 ops/s
# Warmup Iteration  29: 4271744.782 ops/s
# Warmup Iteration  30: 4344968.542 ops/s
Iteration   1: 4507665.637 ops/s
Iteration   2: 4415500.568 ops/s
Iteration   3: 4598882.388 ops/s
Iteration   4: 4154176.798 ops/s
Iteration   5: 4384573.808 ops/s
Iteration   6: 4400736.636 ops/s
Iteration   7: 4388589.184 ops/s
Iteration   8: 4248008.539 ops/s
Iteration   9: 4189765.174 ops/s
Iteration  10: 4348856.841 ops/s
Iteration  11: 4259564.451 ops/s
Iteration  12: 4278624.585 ops/s
Iteration  13: 4267824.366 ops/s
Iteration  14: 4178405.701 ops/s
Iteration  15: 4257075.038 ops/s
Iteration  16: 4297584.533 ops/s
Iteration  17: 4187028.534 ops/s
Iteration  18: 4322101.436 ops/s
Iteration  19: 4243648.423 ops/s
Iteration  20: 4235300.825 ops/s
Iteration  21: 4212752.250 ops/s
Iteration  22: 4281795.640 ops/s
Iteration  23: 4239597.497 ops/s
Iteration  24: 4285265.313 ops/s
Iteration  25: 4183313.050 ops/s
Iteration  26: 4329728.890 ops/s
Iteration  27: 4248647.156 ops/s
Iteration  28: 4256632.834 ops/s
Iteration  29: 4246093.824 ops/s
Iteration  30: 4215161.125 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectOptional":
  4288763.368 ±(99.9%) 66460.936 ops/s [Average]
  (min, avg, max) = (4154176.798, 4288763.368, 4598882.388), stdev = 99475.608
  CI (99.9%): [4222302.432, 4355224.305] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_detectOptional  thrpt   30  4288763.368 ± 66460.936  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectOptional_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectOptional_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2094653.100 ops/s
# Warmup Iteration   2: 4819263.845 ops/s
# Warmup Iteration   3: 4642998.630 ops/s
# Warmup Iteration   4: 4138837.106 ops/s
# Warmup Iteration   5: 4848407.866 ops/s
# Warmup Iteration   6: 4789677.109 ops/s
# Warmup Iteration   7: 4843758.312 ops/s
# Warmup Iteration   8: 4846988.007 ops/s
# Warmup Iteration   9: 4757850.389 ops/s
# Warmup Iteration  10: 4955179.967 ops/s
# Warmup Iteration  11: 4725323.142 ops/s
# Warmup Iteration  12: 4822640.545 ops/s
# Warmup Iteration  13: 4825571.349 ops/s
# Warmup Iteration  14: 4812745.597 ops/s
# Warmup Iteration  15: 5162345.476 ops/s
# Warmup Iteration  16: 4862578.175 ops/s
# Warmup Iteration  17: 4897530.572 ops/s
# Warmup Iteration  18: 4889167.538 ops/s
# Warmup Iteration  19: 4985667.518 ops/s
# Warmup Iteration  20: 5027855.849 ops/s
# Warmup Iteration  21: 4963094.059 ops/s
# Warmup Iteration  22: 4909750.806 ops/s
# Warmup Iteration  23: 4854639.331 ops/s
# Warmup Iteration  24: 4906092.356 ops/s
# Warmup Iteration  25: 4935989.532 ops/s
# Warmup Iteration  26: 4851684.568 ops/s
# Warmup Iteration  27: 4846102.824 ops/s
# Warmup Iteration  28: 4818108.092 ops/s
# Warmup Iteration  29: 4768216.945 ops/s
# Warmup Iteration  30: 4925129.841 ops/s
Iteration   1: 4842286.304 ops/s
Iteration   2: 5002779.271 ops/s
Iteration   3: 4885868.788 ops/s
Iteration   4: 5015250.936 ops/s
Iteration   5: 4892203.145 ops/s
Iteration   6: 4809696.293 ops/s
Iteration   7: 4867459.004 ops/s
Iteration   8: 4650005.612 ops/s
Iteration   9: 4842964.070 ops/s
Iteration  10: 4949251.014 ops/s
Iteration  11: 4848535.367 ops/s
Iteration  12: 4809423.236 ops/s
Iteration  13: 4743283.027 ops/s
Iteration  14: 4772049.268 ops/s
Iteration  15: 4957012.357 ops/s
Iteration  16: 4720718.006 ops/s
Iteration  17: 4764787.609 ops/s
Iteration  18: 4877404.322 ops/s
Iteration  19: 4811027.465 ops/s
Iteration  20: 4872285.713 ops/s
Iteration  21: 4911814.583 ops/s
Iteration  22: 4805018.106 ops/s
Iteration  23: 4868067.428 ops/s
Iteration  24: 4922051.135 ops/s
Iteration  25: 4864106.098 ops/s
Iteration  26: 4823226.661 ops/s
Iteration  27: 4733315.575 ops/s
Iteration  28: 4686784.787 ops/s
Iteration  29: 4772360.833 ops/s
Iteration  30: 4923232.674 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectOptional_value":
  4841475.623 ±(99.9%) 58804.111 ops/s [Average]
  (min, avg, max) = (4650005.612, 4841475.623, 5015250.936), stdev = 88015.232
  CI (99.9%): [4782671.512, 4900279.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_detectOptional_value  thrpt   30  4841475.623 ± 58804.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2068630.484 ops/s
# Warmup Iteration   2: 4978999.955 ops/s
# Warmup Iteration   3: 4918233.888 ops/s
# Warmup Iteration   4: 4023237.833 ops/s
# Warmup Iteration   5: 4936914.733 ops/s
# Warmup Iteration   6: 4892168.290 ops/s
# Warmup Iteration   7: 4950093.404 ops/s
# Warmup Iteration   8: 5058968.933 ops/s
# Warmup Iteration   9: 5034747.517 ops/s
# Warmup Iteration  10: 5269601.818 ops/s
# Warmup Iteration  11: 4903581.084 ops/s
# Warmup Iteration  12: 4945378.854 ops/s
# Warmup Iteration  13: 4896162.674 ops/s
# Warmup Iteration  14: 4887964.173 ops/s
# Warmup Iteration  15: 4965043.885 ops/s
# Warmup Iteration  16: 4906574.710 ops/s
# Warmup Iteration  17: 4934204.335 ops/s
# Warmup Iteration  18: 4872302.189 ops/s
# Warmup Iteration  19: 4905709.201 ops/s
# Warmup Iteration  20: 5202353.338 ops/s
# Warmup Iteration  21: 5104596.621 ops/s
# Warmup Iteration  22: 4792514.301 ops/s
# Warmup Iteration  23: 5230196.195 ops/s
# Warmup Iteration  24: 5067552.454 ops/s
# Warmup Iteration  25: 5182367.209 ops/s
# Warmup Iteration  26: 5118944.353 ops/s
# Warmup Iteration  27: 5261939.636 ops/s
# Warmup Iteration  28: 5007278.089 ops/s
# Warmup Iteration  29: 5128210.750 ops/s
# Warmup Iteration  30: 5004699.673 ops/s
Iteration   1: 4910885.228 ops/s
Iteration   2: 4896844.953 ops/s
Iteration   3: 4876636.392 ops/s
Iteration   4: 4953046.373 ops/s
Iteration   5: 5126179.293 ops/s
Iteration   6: 4944384.210 ops/s
Iteration   7: 4869291.507 ops/s
Iteration   8: 4925619.343 ops/s
Iteration   9: 4949828.625 ops/s
Iteration  10: 5024641.647 ops/s
Iteration  11: 4999270.584 ops/s
Iteration  12: 5405902.663 ops/s
Iteration  13: 5240003.460 ops/s
Iteration  14: 5226837.328 ops/s
Iteration  15: 5014426.765 ops/s
Iteration  16: 4905579.978 ops/s
Iteration  17: 4920132.808 ops/s
Iteration  18: 4998111.594 ops/s
Iteration  19: 5216379.732 ops/s
Iteration  20: 5162510.762 ops/s
Iteration  21: 4882912.133 ops/s
Iteration  22: 5001184.131 ops/s
Iteration  23: 5124807.450 ops/s
Iteration  24: 5084661.386 ops/s
Iteration  25: 5032742.502 ops/s
Iteration  26: 5085555.869 ops/s
Iteration  27: 5308557.129 ops/s
Iteration  28: 5007151.576 ops/s
Iteration  29: 5355168.388 ops/s
Iteration  30: 5203563.938 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectWith":
  5055093.925 ±(99.9%) 100786.666 ops/s [Average]
  (min, avg, max) = (4869291.507, 5055093.925, 5405902.663), stdev = 150852.748
  CI (99.9%): [4954307.259, 5155880.591] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_detectWith  thrpt   30  5055093.925 ± 100786.666  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1747594.602 ops/s
# Warmup Iteration   2: 4146093.644 ops/s
# Warmup Iteration   3: 4186167.679 ops/s
# Warmup Iteration   4: 3653698.584 ops/s
# Warmup Iteration   5: 4216011.185 ops/s
# Warmup Iteration   6: 4245839.339 ops/s
# Warmup Iteration   7: 4211690.563 ops/s
# Warmup Iteration   8: 4225743.120 ops/s
# Warmup Iteration   9: 4378746.558 ops/s
# Warmup Iteration  10: 4230549.602 ops/s
# Warmup Iteration  11: 4317662.478 ops/s
# Warmup Iteration  12: 4211593.945 ops/s
# Warmup Iteration  13: 4209447.395 ops/s
# Warmup Iteration  14: 4362977.635 ops/s
# Warmup Iteration  15: 4238066.500 ops/s
# Warmup Iteration  16: 4342870.219 ops/s
# Warmup Iteration  17: 4286777.907 ops/s
# Warmup Iteration  18: 4601534.200 ops/s
# Warmup Iteration  19: 4593625.851 ops/s
# Warmup Iteration  20: 4272706.465 ops/s
# Warmup Iteration  21: 4245288.107 ops/s
# Warmup Iteration  22: 4412958.727 ops/s
# Warmup Iteration  23: 4156102.097 ops/s
# Warmup Iteration  24: 4243743.246 ops/s
# Warmup Iteration  25: 4277183.608 ops/s
# Warmup Iteration  26: 4297144.206 ops/s
# Warmup Iteration  27: 4316066.294 ops/s
# Warmup Iteration  28: 4208355.294 ops/s
# Warmup Iteration  29: 4260528.789 ops/s
# Warmup Iteration  30: 4272647.200 ops/s
Iteration   1: 4213577.525 ops/s
Iteration   2: 4196184.196 ops/s
Iteration   3: 4176360.812 ops/s
Iteration   4: 4239812.579 ops/s
Iteration   5: 4188968.487 ops/s
Iteration   6: 4469292.943 ops/s
Iteration   7: 4332551.569 ops/s
Iteration   8: 4475490.810 ops/s
Iteration   9: 4419877.011 ops/s
Iteration  10: 4408156.547 ops/s
Iteration  11: 4372362.956 ops/s
Iteration  12: 4382474.560 ops/s
Iteration  13: 4418731.690 ops/s
Iteration  14: 4301949.512 ops/s
Iteration  15: 4165061.099 ops/s
Iteration  16: 4433816.660 ops/s
Iteration  17: 4607395.083 ops/s
Iteration  18: 4591346.679 ops/s
Iteration  19: 4350612.294 ops/s
Iteration  20: 4446876.767 ops/s
Iteration  21: 4636660.430 ops/s
Iteration  22: 4613405.020 ops/s
Iteration  23: 4443200.194 ops/s
Iteration  24: 4308891.440 ops/s
Iteration  25: 4165425.637 ops/s
Iteration  26: 4202512.196 ops/s
Iteration  27: 4134372.365 ops/s
Iteration  28: 4169293.128 ops/s
Iteration  29: 4315813.957 ops/s
Iteration  30: 4126487.290 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectWithIfNone":
  4343565.381 ±(99.9%) 102271.658 ops/s [Average]
  (min, avg, max) = (4126487.290, 4343565.381, 4636660.430), stdev = 153075.414
  CI (99.9%): [4241293.723, 4445837.039] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  4343565.381 ± 102271.658  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2015158.589 ops/s
# Warmup Iteration   2: 4702437.370 ops/s
# Warmup Iteration   3: 4629004.774 ops/s
# Warmup Iteration   4: 3923584.483 ops/s
# Warmup Iteration   5: 4613671.853 ops/s
# Warmup Iteration   6: 4757550.702 ops/s
# Warmup Iteration   7: 4697595.083 ops/s
# Warmup Iteration   8: 4595082.782 ops/s
# Warmup Iteration   9: 4601281.587 ops/s
# Warmup Iteration  10: 4740683.465 ops/s
# Warmup Iteration  11: 4627201.364 ops/s
# Warmup Iteration  12: 4608513.897 ops/s
# Warmup Iteration  13: 4636401.496 ops/s
# Warmup Iteration  14: 4675601.676 ops/s
# Warmup Iteration  15: 4665805.936 ops/s
# Warmup Iteration  16: 4717204.031 ops/s
# Warmup Iteration  17: 4729286.062 ops/s
# Warmup Iteration  18: 4602028.681 ops/s
# Warmup Iteration  19: 5010238.590 ops/s
# Warmup Iteration  20: 4861551.510 ops/s
# Warmup Iteration  21: 4937017.916 ops/s
# Warmup Iteration  22: 4933088.154 ops/s
# Warmup Iteration  23: 4710931.377 ops/s
# Warmup Iteration  24: 4671250.078 ops/s
# Warmup Iteration  25: 4868637.413 ops/s
# Warmup Iteration  26: 4597067.013 ops/s
# Warmup Iteration  27: 4775612.350 ops/s
# Warmup Iteration  28: 4759550.627 ops/s
# Warmup Iteration  29: 4898468.531 ops/s
# Warmup Iteration  30: 4763267.730 ops/s
Iteration   1: 4880427.475 ops/s
Iteration   2: 4906159.443 ops/s
Iteration   3: 4630732.577 ops/s
Iteration   4: 4627883.431 ops/s
Iteration   5: 4718044.442 ops/s
Iteration   6: 4553845.006 ops/s
Iteration   7: 4708114.801 ops/s
Iteration   8: 4697228.052 ops/s
Iteration   9: 4671016.448 ops/s
Iteration  10: 4747662.782 ops/s
Iteration  11: 4930001.994 ops/s
Iteration  12: 5079024.748 ops/s
Iteration  13: 4679106.290 ops/s
Iteration  14: 4637664.959 ops/s
Iteration  15: 4764024.648 ops/s
Iteration  16: 4746239.800 ops/s
Iteration  17: 4658549.572 ops/s
Iteration  18: 4647117.651 ops/s
Iteration  19: 5071642.372 ops/s
Iteration  20: 4820441.198 ops/s
Iteration  21: 4528848.938 ops/s
Iteration  22: 4687838.565 ops/s
Iteration  23: 4588139.642 ops/s
Iteration  24: 4847956.497 ops/s
Iteration  25: 4772116.662 ops/s
Iteration  26: 4781343.397 ops/s
Iteration  27: 4656046.511 ops/s
Iteration  28: 4834671.451 ops/s
Iteration  29: 5086712.439 ops/s
Iteration  30: 5002054.074 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detectWithOptional":
  4765355.195 ±(99.9%) 102499.402 ops/s [Average]
  (min, avg, max) = (4528848.938, 4765355.195, 5086712.439), stdev = 153416.291
  CI (99.9%): [4662855.794, 4867854.597] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_detectWithOptional  thrpt   30  4765355.195 ± 102499.402  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detect_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detect_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1807071.753 ops/s
# Warmup Iteration   2: 4273304.735 ops/s
# Warmup Iteration   3: 4388280.140 ops/s
# Warmup Iteration   4: 3714247.879 ops/s
# Warmup Iteration   5: 4575484.874 ops/s
# Warmup Iteration   6: 4388155.905 ops/s
# Warmup Iteration   7: 4492334.295 ops/s
# Warmup Iteration   8: 4314042.453 ops/s
# Warmup Iteration   9: 4413652.299 ops/s
# Warmup Iteration  10: 4446817.537 ops/s
# Warmup Iteration  11: 4430138.723 ops/s
# Warmup Iteration  12: 4597005.942 ops/s
# Warmup Iteration  13: 4565598.231 ops/s
# Warmup Iteration  14: 4379104.085 ops/s
# Warmup Iteration  15: 4376068.836 ops/s
# Warmup Iteration  16: 4362149.463 ops/s
# Warmup Iteration  17: 4294933.883 ops/s
# Warmup Iteration  18: 4373388.763 ops/s
# Warmup Iteration  19: 4348031.032 ops/s
# Warmup Iteration  20: 4341472.924 ops/s
# Warmup Iteration  21: 4377276.416 ops/s
# Warmup Iteration  22: 4411204.797 ops/s
# Warmup Iteration  23: 4590860.466 ops/s
# Warmup Iteration  24: 4313443.899 ops/s
# Warmup Iteration  25: 4415256.735 ops/s
# Warmup Iteration  26: 4377603.793 ops/s
# Warmup Iteration  27: 4659089.476 ops/s
# Warmup Iteration  28: 4358800.597 ops/s
# Warmup Iteration  29: 4333202.142 ops/s
# Warmup Iteration  30: 4520253.524 ops/s
Iteration   1: 4473625.129 ops/s
Iteration   2: 4297355.215 ops/s
Iteration   3: 4391716.835 ops/s
Iteration   4: 4732530.271 ops/s
Iteration   5: 4347052.591 ops/s
Iteration   6: 4503951.823 ops/s
Iteration   7: 4670979.774 ops/s
Iteration   8: 4589936.742 ops/s
Iteration   9: 4499885.785 ops/s
Iteration  10: 4497617.563 ops/s
Iteration  11: 4671048.457 ops/s
Iteration  12: 4333072.393 ops/s
Iteration  13: 4306633.967 ops/s
Iteration  14: 4355812.117 ops/s
Iteration  15: 4288207.454 ops/s
Iteration  16: 4572149.011 ops/s
Iteration  17: 4480041.208 ops/s
Iteration  18: 4341165.249 ops/s
Iteration  19: 4448050.414 ops/s
Iteration  20: 4275725.432 ops/s
Iteration  21: 4405153.636 ops/s
Iteration  22: 4534184.624 ops/s
Iteration  23: 4332942.011 ops/s
Iteration  24: 4288375.129 ops/s
Iteration  25: 4307687.931 ops/s
Iteration  26: 4333416.433 ops/s
Iteration  27: 4433377.144 ops/s
Iteration  28: 4284974.147 ops/s
Iteration  29: 4271520.880 ops/s
Iteration  30: 4294146.277 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_detect_value":
  4418744.521 ±(99.9%) 88344.160 ops/s [Average]
  (min, avg, max) = (4271520.880, 4418744.521, 4732530.271), stdev = 132229.389
  CI (99.9%): [4330400.362, 4507088.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_detect_value  thrpt   30  4418744.521 ± 88344.160  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_entrySetEqualsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_entrySetEqualsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 543608.573 ops/s
# Warmup Iteration   2: 1074379.722 ops/s
# Warmup Iteration   3: 1301077.798 ops/s
# Warmup Iteration   4: 1377838.941 ops/s
# Warmup Iteration   5: 1066784.658 ops/s
# Warmup Iteration   6: 1282323.626 ops/s
# Warmup Iteration   7: 1305566.821 ops/s
# Warmup Iteration   8: 1282181.649 ops/s
# Warmup Iteration   9: 1278676.410 ops/s
# Warmup Iteration  10: 1296794.612 ops/s
# Warmup Iteration  11: 1276494.547 ops/s
# Warmup Iteration  12: 1287170.593 ops/s
# Warmup Iteration  13: 1337046.793 ops/s
# Warmup Iteration  14: 1280632.823 ops/s
# Warmup Iteration  15: 1291275.035 ops/s
# Warmup Iteration  16: 1361934.656 ops/s
# Warmup Iteration  17: 1349983.106 ops/s
# Warmup Iteration  18: 1298238.834 ops/s
# Warmup Iteration  19: 1327594.712 ops/s
# Warmup Iteration  20: 1322812.421 ops/s
# Warmup Iteration  21: 1283388.541 ops/s
# Warmup Iteration  22: 1289109.126 ops/s
# Warmup Iteration  23: 1283639.796 ops/s
# Warmup Iteration  24: 1277170.506 ops/s
# Warmup Iteration  25: 1303225.522 ops/s
# Warmup Iteration  26: 1302233.393 ops/s
# Warmup Iteration  27: 1290694.972 ops/s
# Warmup Iteration  28: 1344023.751 ops/s
# Warmup Iteration  29: 1316829.682 ops/s
# Warmup Iteration  30: 1287354.552 ops/s
Iteration   1: 1288247.874 ops/s
Iteration   2: 1252324.344 ops/s
Iteration   3: 1257593.053 ops/s
Iteration   4: 1286315.794 ops/s
Iteration   5: 1280734.284 ops/s
Iteration   6: 1387140.517 ops/s
Iteration   7: 1285256.051 ops/s
Iteration   8: 1269626.074 ops/s
Iteration   9: 1297442.748 ops/s
Iteration  10: 1320098.143 ops/s
Iteration  11: 1286622.882 ops/s
Iteration  12: 1270638.546 ops/s
Iteration  13: 1276244.924 ops/s
Iteration  14: 1300772.322 ops/s
Iteration  15: 1331879.117 ops/s
Iteration  16: 1328787.891 ops/s
Iteration  17: 1328760.664 ops/s
Iteration  18: 1324280.330 ops/s
Iteration  19: 1368514.951 ops/s
Iteration  20: 1285619.798 ops/s
Iteration  21: 1259400.094 ops/s
Iteration  22: 1276443.370 ops/s
Iteration  23: 1277491.920 ops/s
Iteration  24: 1291825.134 ops/s
Iteration  25: 1300439.558 ops/s
Iteration  26: 1302785.785 ops/s
Iteration  27: 1293217.434 ops/s
Iteration  28: 1397333.654 ops/s
Iteration  29: 1336079.201 ops/s
Iteration  30: 1338569.781 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_entrySetEqualsAndHashCode":
  1303349.541 ±(99.9%) 24323.721 ops/s [Average]
  (min, avg, max) = (1252324.344, 1303349.541, 1397333.654), stdev = 36406.603
  CI (99.9%): [1279025.820, 1327673.262] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_entrySetEqualsAndHashCode  thrpt   30  1303349.541 ± 24323.721  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21069.837 ops/s
# Warmup Iteration   2: 30576.134 ops/s
# Warmup Iteration   3: 42933.168 ops/s
# Warmup Iteration   4: 43066.513 ops/s
# Warmup Iteration   5: 46369.682 ops/s
# Warmup Iteration   6: 42276.848 ops/s
# Warmup Iteration   7: 42859.329 ops/s
# Warmup Iteration   8: 41780.356 ops/s
# Warmup Iteration   9: 36316.421 ops/s
# Warmup Iteration  10: 45017.919 ops/s
# Warmup Iteration  11: 44287.913 ops/s
# Warmup Iteration  12: 46611.093 ops/s
# Warmup Iteration  13: 45153.389 ops/s
# Warmup Iteration  14: 42599.468 ops/s
# Warmup Iteration  15: 42355.305 ops/s
# Warmup Iteration  16: 45192.843 ops/s
# Warmup Iteration  17: 44425.992 ops/s
# Warmup Iteration  18: 44110.357 ops/s
# Warmup Iteration  19: 42758.379 ops/s
# Warmup Iteration  20: 42735.865 ops/s
# Warmup Iteration  21: 45849.037 ops/s
# Warmup Iteration  22: 42704.682 ops/s
# Warmup Iteration  23: 43715.487 ops/s
# Warmup Iteration  24: 43976.814 ops/s
# Warmup Iteration  25: 42949.482 ops/s
# Warmup Iteration  26: 43418.274 ops/s
# Warmup Iteration  27: 43769.564 ops/s
# Warmup Iteration  28: 46680.306 ops/s
# Warmup Iteration  29: 46625.043 ops/s
# Warmup Iteration  30: 42471.117 ops/s
Iteration   1: 42706.992 ops/s
Iteration   2: 42508.627 ops/s
Iteration   3: 43133.894 ops/s
Iteration   4: 42310.176 ops/s
Iteration   5: 43143.627 ops/s
Iteration   6: 44006.290 ops/s
Iteration   7: 43182.350 ops/s
Iteration   8: 43568.224 ops/s
Iteration   9: 44548.244 ops/s
Iteration  10: 42672.762 ops/s
Iteration  11: 42069.601 ops/s
Iteration  12: 44083.533 ops/s
Iteration  13: 43028.398 ops/s
Iteration  14: 42513.847 ops/s
Iteration  15: 43263.349 ops/s
Iteration  16: 47002.422 ops/s
Iteration  17: 46798.115 ops/s
Iteration  18: 42252.946 ops/s
Iteration  19: 44510.309 ops/s
Iteration  20: 42139.280 ops/s
Iteration  21: 42114.299 ops/s
Iteration  22: 45505.209 ops/s
Iteration  23: 42495.553 ops/s
Iteration  24: 45535.548 ops/s
Iteration  25: 46804.455 ops/s
Iteration  26: 46982.754 ops/s
Iteration  27: 42324.535 ops/s
Iteration  28: 42958.251 ops/s
Iteration  29: 43176.584 ops/s
Iteration  30: 46245.170 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_equalsAndHashCode":
  43786.178 ±(99.9%) 1093.213 ops/s [Average]
  (min, avg, max) = (42069.601, 43786.178, 47002.422), stdev = 1636.271
  CI (99.9%): [42692.965, 44879.392] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt      Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  43786.178 ± 1093.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 388986.408 ops/s
# Warmup Iteration   2: 681541.699 ops/s
# Warmup Iteration   3: 820737.539 ops/s
# Warmup Iteration   4: 833089.063 ops/s
# Warmup Iteration   5: 819737.010 ops/s
# Warmup Iteration   6: 689645.853 ops/s
# Warmup Iteration   7: 819755.320 ops/s
# Warmup Iteration   8: 802170.046 ops/s
# Warmup Iteration   9: 811628.325 ops/s
# Warmup Iteration  10: 813579.001 ops/s
# Warmup Iteration  11: 811624.878 ops/s
# Warmup Iteration  12: 830227.502 ops/s
# Warmup Iteration  13: 817191.877 ops/s
# Warmup Iteration  14: 816455.692 ops/s
# Warmup Iteration  15: 813535.487 ops/s
# Warmup Iteration  16: 809366.456 ops/s
# Warmup Iteration  17: 824505.546 ops/s
# Warmup Iteration  18: 817997.525 ops/s
# Warmup Iteration  19: 820548.451 ops/s
# Warmup Iteration  20: 814925.628 ops/s
# Warmup Iteration  21: 819486.062 ops/s
# Warmup Iteration  22: 822939.253 ops/s
# Warmup Iteration  23: 807853.555 ops/s
# Warmup Iteration  24: 818590.749 ops/s
# Warmup Iteration  25: 817454.551 ops/s
# Warmup Iteration  26: 820463.447 ops/s
# Warmup Iteration  27: 815297.718 ops/s
# Warmup Iteration  28: 811546.891 ops/s
# Warmup Iteration  29: 813503.915 ops/s
# Warmup Iteration  30: 816416.545 ops/s
Iteration   1: 815486.921 ops/s
Iteration   2: 807860.540 ops/s
Iteration   3: 818488.003 ops/s
Iteration   4: 836492.585 ops/s
Iteration   5: 845558.766 ops/s
Iteration   6: 824755.289 ops/s
Iteration   7: 804839.940 ops/s
Iteration   8: 828300.524 ops/s
Iteration   9: 827478.050 ops/s
Iteration  10: 796239.853 ops/s
Iteration  11: 812828.774 ops/s
Iteration  12: 808946.050 ops/s
Iteration  13: 812634.745 ops/s
Iteration  14: 808860.291 ops/s
Iteration  15: 820544.976 ops/s
Iteration  16: 816801.224 ops/s
Iteration  17: 803051.154 ops/s
Iteration  18: 825139.899 ops/s
Iteration  19: 835407.237 ops/s
Iteration  20: 802574.777 ops/s
Iteration  21: 812227.210 ops/s
Iteration  22: 822233.962 ops/s
Iteration  23: 823452.819 ops/s
Iteration  24: 799128.536 ops/s
Iteration  25: 819743.317 ops/s
Iteration  26: 813723.556 ops/s
Iteration  27: 792341.902 ops/s
Iteration  28: 800051.165 ops/s
Iteration  29: 876552.990 ops/s
Iteration  30: 831187.820 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flatCollect":
  818097.762 ±(99.9%) 11223.951 ops/s [Average]
  (min, avg, max) = (792341.902, 818097.762, 876552.990), stdev = 16799.482
  CI (99.9%): [806873.812, 829321.713] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_flatCollect  thrpt   30  818097.762 ± 11223.951  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 193052.566 ops/s
# Warmup Iteration   2: 324736.687 ops/s
# Warmup Iteration   3: 374627.198 ops/s
# Warmup Iteration   4: 380522.236 ops/s
# Warmup Iteration   5: 374610.531 ops/s
# Warmup Iteration   6: 330939.596 ops/s
# Warmup Iteration   7: 347054.987 ops/s
# Warmup Iteration   8: 371239.790 ops/s
# Warmup Iteration   9: 373885.316 ops/s
# Warmup Iteration  10: 373853.308 ops/s
# Warmup Iteration  11: 376914.372 ops/s
# Warmup Iteration  12: 373679.987 ops/s
# Warmup Iteration  13: 390566.887 ops/s
# Warmup Iteration  14: 390616.959 ops/s
# Warmup Iteration  15: 378368.519 ops/s
# Warmup Iteration  16: 401155.071 ops/s
# Warmup Iteration  17: 373732.503 ops/s
# Warmup Iteration  18: 373683.017 ops/s
# Warmup Iteration  19: 377078.135 ops/s
# Warmup Iteration  20: 370109.731 ops/s
# Warmup Iteration  21: 370328.141 ops/s
# Warmup Iteration  22: 372053.222 ops/s
# Warmup Iteration  23: 371138.512 ops/s
# Warmup Iteration  24: 376394.222 ops/s
# Warmup Iteration  25: 379221.374 ops/s
# Warmup Iteration  26: 389293.204 ops/s
# Warmup Iteration  27: 374197.998 ops/s
# Warmup Iteration  28: 375235.068 ops/s
# Warmup Iteration  29: 377239.052 ops/s
# Warmup Iteration  30: 367477.200 ops/s
Iteration   1: 377423.943 ops/s
Iteration   2: 386265.390 ops/s
Iteration   3: 380346.796 ops/s
Iteration   4: 378070.143 ops/s
Iteration   5: 392765.378 ops/s
Iteration   6: 383908.624 ops/s
Iteration   7: 379898.263 ops/s
Iteration   8: 377695.772 ops/s
Iteration   9: 365563.832 ops/s
Iteration  10: 374664.298 ops/s
Iteration  11: 370086.124 ops/s
Iteration  12: 366587.958 ops/s
Iteration  13: 373246.715 ops/s
Iteration  14: 385963.858 ops/s
Iteration  15: 373532.870 ops/s
Iteration  16: 397057.160 ops/s
Iteration  17: 369082.692 ops/s
Iteration  18: 375824.896 ops/s
Iteration  19: 367981.878 ops/s
Iteration  20: 380282.847 ops/s
Iteration  21: 387436.877 ops/s
Iteration  22: 380375.029 ops/s
Iteration  23: 380297.002 ops/s
Iteration  24: 372682.967 ops/s
Iteration  25: 371793.968 ops/s
Iteration  26: 375745.052 ops/s
Iteration  27: 374922.715 ops/s
Iteration  28: 374219.922 ops/s
Iteration  29: 374258.801 ops/s
Iteration  30: 376865.655 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flatCollectWith":
  377494.914 ±(99.9%) 4887.039 ops/s [Average]
  (min, avg, max) = (365563.832, 377494.914, 397057.160), stdev = 7314.690
  CI (99.9%): [372607.875, 382381.953] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_flatCollectWith  thrpt   30  377494.914 ± 4887.039  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flatten_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flatten_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 307535.432 ops/s
# Warmup Iteration   2: 344639.628 ops/s
# Warmup Iteration   3: 490382.727 ops/s
# Warmup Iteration   4: 483972.146 ops/s
# Warmup Iteration   5: 477429.701 ops/s
# Warmup Iteration   6: 495181.583 ops/s
# Warmup Iteration   7: 499157.623 ops/s
# Warmup Iteration   8: 501827.833 ops/s
# Warmup Iteration   9: 484446.773 ops/s
# Warmup Iteration  10: 448332.726 ops/s
# Warmup Iteration  11: 426381.647 ops/s
# Warmup Iteration  12: 480619.490 ops/s
# Warmup Iteration  13: 476459.146 ops/s
# Warmup Iteration  14: 479901.897 ops/s
# Warmup Iteration  15: 496876.142 ops/s
# Warmup Iteration  16: 485774.438 ops/s
# Warmup Iteration  17: 504015.343 ops/s
# Warmup Iteration  18: 494439.959 ops/s
# Warmup Iteration  19: 500729.020 ops/s
# Warmup Iteration  20: 483218.562 ops/s
# Warmup Iteration  21: 490422.258 ops/s
# Warmup Iteration  22: 479640.201 ops/s
# Warmup Iteration  23: 484597.680 ops/s
# Warmup Iteration  24: 485019.455 ops/s
# Warmup Iteration  25: 481064.726 ops/s
# Warmup Iteration  26: 487766.389 ops/s
# Warmup Iteration  27: 478080.510 ops/s
# Warmup Iteration  28: 479731.025 ops/s
# Warmup Iteration  29: 486048.122 ops/s
# Warmup Iteration  30: 483446.278 ops/s
Iteration   1: 479460.105 ops/s
Iteration   2: 480045.962 ops/s
Iteration   3: 495984.318 ops/s
Iteration   4: 478939.068 ops/s
Iteration   5: 504575.408 ops/s
Iteration   6: 502552.056 ops/s
Iteration   7: 501859.812 ops/s
Iteration   8: 484593.169 ops/s
Iteration   9: 473004.886 ops/s
Iteration  10: 479286.003 ops/s
Iteration  11: 492340.113 ops/s
Iteration  12: 472994.194 ops/s
Iteration  13: 485309.813 ops/s
Iteration  14: 490037.449 ops/s
Iteration  15: 497412.797 ops/s
Iteration  16: 504256.491 ops/s
Iteration  17: 488091.008 ops/s
Iteration  18: 482591.490 ops/s
Iteration  19: 478265.673 ops/s
Iteration  20: 477199.206 ops/s
Iteration  21: 484363.808 ops/s
Iteration  22: 486612.753 ops/s
Iteration  23: 489475.849 ops/s
Iteration  24: 495479.765 ops/s
Iteration  25: 496399.557 ops/s
Iteration  26: 498626.993 ops/s
Iteration  27: 513449.511 ops/s
Iteration  28: 496702.543 ops/s
Iteration  29: 504514.642 ops/s
Iteration  30: 484242.277 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flatten_value":
  489955.557 ±(99.9%) 7099.195 ops/s [Average]
  (min, avg, max) = (472994.194, 489955.557, 513449.511), stdev = 10625.742
  CI (99.9%): [482856.362, 497054.752] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_flatten_value  thrpt   30  489955.557 ± 7099.195  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 217818.820 ops/s
# Warmup Iteration   2: 522022.926 ops/s
# Warmup Iteration   3: 557245.293 ops/s
# Warmup Iteration   4: 509666.888 ops/s
# Warmup Iteration   5: 517133.434 ops/s
# Warmup Iteration   6: 578001.515 ops/s
# Warmup Iteration   7: 559887.568 ops/s
# Warmup Iteration   8: 562582.552 ops/s
# Warmup Iteration   9: 563705.396 ops/s
# Warmup Iteration  10: 578045.250 ops/s
# Warmup Iteration  11: 552902.924 ops/s
# Warmup Iteration  12: 561587.558 ops/s
# Warmup Iteration  13: 592654.770 ops/s
# Warmup Iteration  14: 586099.081 ops/s
# Warmup Iteration  15: 598284.134 ops/s
# Warmup Iteration  16: 555716.856 ops/s
# Warmup Iteration  17: 554316.064 ops/s
# Warmup Iteration  18: 556793.550 ops/s
# Warmup Iteration  19: 559842.470 ops/s
# Warmup Iteration  20: 559582.726 ops/s
# Warmup Iteration  21: 591614.650 ops/s
# Warmup Iteration  22: 585214.711 ops/s
# Warmup Iteration  23: 556884.141 ops/s
# Warmup Iteration  24: 569455.855 ops/s
# Warmup Iteration  25: 559957.620 ops/s
# Warmup Iteration  26: 551508.496 ops/s
# Warmup Iteration  27: 579363.897 ops/s
# Warmup Iteration  28: 577438.733 ops/s
# Warmup Iteration  29: 580457.491 ops/s
# Warmup Iteration  30: 573500.160 ops/s
Iteration   1: 554324.061 ops/s
Iteration   2: 585983.378 ops/s
Iteration   3: 581952.054 ops/s
Iteration   4: 579887.659 ops/s
Iteration   5: 590734.903 ops/s
Iteration   6: 581954.766 ops/s
Iteration   7: 604488.717 ops/s
Iteration   8: 604198.142 ops/s
Iteration   9: 594504.805 ops/s
Iteration  10: 563446.997 ops/s
Iteration  11: 566861.012 ops/s
Iteration  12: 563708.552 ops/s
Iteration  13: 591963.893 ops/s
Iteration  14: 604822.672 ops/s
Iteration  15: 561662.361 ops/s
Iteration  16: 551426.223 ops/s
Iteration  17: 553070.757 ops/s
Iteration  18: 563374.591 ops/s
Iteration  19: 546559.854 ops/s
Iteration  20: 573585.530 ops/s
Iteration  21: 602775.230 ops/s
Iteration  22: 608085.403 ops/s
Iteration  23: 571994.370 ops/s
Iteration  24: 581623.003 ops/s
Iteration  25: 559336.520 ops/s
Iteration  26: 559062.626 ops/s
Iteration  27: 560797.380 ops/s
Iteration  28: 556536.737 ops/s
Iteration  29: 560241.239 ops/s
Iteration  30: 576044.090 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flip":
  575166.918 ±(99.9%) 12321.122 ops/s [Average]
  (min, avg, max) = (546559.854, 575166.918, 608085.403), stdev = 18441.676
  CI (99.9%): [562845.796, 587488.039] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_flip  thrpt   30  575166.918 ± 12321.122  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flipUniqueValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flipUniqueValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 445290.148 ops/s
# Warmup Iteration   2: 1060479.330 ops/s
# Warmup Iteration   3: 1133565.774 ops/s
# Warmup Iteration   4: 923952.761 ops/s
# Warmup Iteration   5: 1170046.188 ops/s
# Warmup Iteration   6: 1160201.342 ops/s
# Warmup Iteration   7: 1108843.850 ops/s
# Warmup Iteration   8: 1112225.485 ops/s
# Warmup Iteration   9: 1118264.768 ops/s
# Warmup Iteration  10: 1140810.958 ops/s
# Warmup Iteration  11: 1152765.261 ops/s
# Warmup Iteration  12: 1170702.615 ops/s
# Warmup Iteration  13: 1197658.025 ops/s
# Warmup Iteration  14: 1141194.662 ops/s
# Warmup Iteration  15: 1113538.779 ops/s
# Warmup Iteration  16: 1132030.061 ops/s
# Warmup Iteration  17: 1164354.909 ops/s
# Warmup Iteration  18: 1180137.518 ops/s
# Warmup Iteration  19: 1141329.508 ops/s
# Warmup Iteration  20: 1128978.014 ops/s
# Warmup Iteration  21: 1125289.703 ops/s
# Warmup Iteration  22: 1146588.218 ops/s
# Warmup Iteration  23: 1166843.235 ops/s
# Warmup Iteration  24: 1175060.674 ops/s
# Warmup Iteration  25: 1125551.603 ops/s
# Warmup Iteration  26: 1151701.355 ops/s
# Warmup Iteration  27: 1112406.795 ops/s
# Warmup Iteration  28: 1161882.185 ops/s
# Warmup Iteration  29: 1135099.707 ops/s
# Warmup Iteration  30: 1174620.206 ops/s
Iteration   1: 1158354.438 ops/s
Iteration   2: 1166064.947 ops/s
Iteration   3: 1117526.519 ops/s
Iteration   4: 1154835.543 ops/s
Iteration   5: 1146884.580 ops/s
Iteration   6: 1135114.463 ops/s
Iteration   7: 1147378.522 ops/s
Iteration   8: 1223437.151 ops/s
Iteration   9: 1148454.210 ops/s
Iteration  10: 1103296.505 ops/s
Iteration  11: 1141900.537 ops/s
Iteration  12: 1149690.243 ops/s
Iteration  13: 1119032.683 ops/s
Iteration  14: 1151114.346 ops/s
Iteration  15: 1137717.154 ops/s
Iteration  16: 1206722.488 ops/s
Iteration  17: 1195332.933 ops/s
Iteration  18: 1163153.688 ops/s
Iteration  19: 1210081.512 ops/s
Iteration  20: 1218181.648 ops/s
Iteration  21: 1121243.604 ops/s
Iteration  22: 1180146.483 ops/s
Iteration  23: 1173061.396 ops/s
Iteration  24: 1184966.337 ops/s
Iteration  25: 1169038.548 ops/s
Iteration  26: 1121213.978 ops/s
Iteration  27: 1130282.453 ops/s
Iteration  28: 1147318.800 ops/s
Iteration  29: 1140124.399 ops/s
Iteration  30: 1151611.343 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_flipUniqueValues":
  1157109.382 ±(99.9%) 20671.895 ops/s [Average]
  (min, avg, max) = (1103296.505, 1157109.382, 1223437.151), stdev = 30940.721
  CI (99.9%): [1136437.487, 1177781.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_flipUniqueValues  thrpt   30  1157109.382 ± 20671.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 596907.443 ops/s
# Warmup Iteration   2: 1058760.831 ops/s
# Warmup Iteration   3: 1224486.237 ops/s
# Warmup Iteration   4: 1230798.314 ops/s
# Warmup Iteration   5: 1218750.562 ops/s
# Warmup Iteration   6: 1071436.692 ops/s
# Warmup Iteration   7: 1226178.311 ops/s
# Warmup Iteration   8: 1261505.297 ops/s
# Warmup Iteration   9: 1304839.432 ops/s
# Warmup Iteration  10: 1235867.502 ops/s
# Warmup Iteration  11: 1239707.877 ops/s
# Warmup Iteration  12: 1253624.954 ops/s
# Warmup Iteration  13: 1243185.940 ops/s
# Warmup Iteration  14: 1267592.673 ops/s
# Warmup Iteration  15: 1260307.818 ops/s
# Warmup Iteration  16: 1245513.633 ops/s
# Warmup Iteration  17: 1235077.677 ops/s
# Warmup Iteration  18: 1231179.123 ops/s
# Warmup Iteration  19: 1315316.720 ops/s
# Warmup Iteration  20: 1271143.627 ops/s
# Warmup Iteration  21: 1227916.454 ops/s
# Warmup Iteration  22: 1215233.164 ops/s
# Warmup Iteration  23: 1263709.026 ops/s
# Warmup Iteration  24: 1252833.031 ops/s
# Warmup Iteration  25: 1233087.002 ops/s
# Warmup Iteration  26: 1291495.376 ops/s
# Warmup Iteration  27: 1266014.263 ops/s
# Warmup Iteration  28: 1249192.748 ops/s
# Warmup Iteration  29: 1222978.371 ops/s
# Warmup Iteration  30: 1264546.556 ops/s
Iteration   1: 1338750.912 ops/s
Iteration   2: 1291030.981 ops/s
Iteration   3: 1223858.332 ops/s
Iteration   4: 1256319.009 ops/s
Iteration   5: 1344561.415 ops/s
Iteration   6: 1330948.494 ops/s
Iteration   7: 1287132.403 ops/s
Iteration   8: 1249602.955 ops/s
Iteration   9: 1254009.018 ops/s
Iteration  10: 1222919.604 ops/s
Iteration  11: 1241313.299 ops/s
Iteration  12: 1235719.046 ops/s
Iteration  13: 1243401.327 ops/s
Iteration  14: 1256168.937 ops/s
Iteration  15: 1209777.932 ops/s
Iteration  16: 1269519.590 ops/s
Iteration  17: 1228491.078 ops/s
Iteration  18: 1241555.226 ops/s
Iteration  19: 1244236.236 ops/s
Iteration  20: 1222448.658 ops/s
Iteration  21: 1344721.757 ops/s
Iteration  22: 1339615.248 ops/s
Iteration  23: 1230767.270 ops/s
Iteration  24: 1224032.024 ops/s
Iteration  25: 1248860.533 ops/s
Iteration  26: 1270504.865 ops/s
Iteration  27: 1238090.740 ops/s
Iteration  28: 1213208.794 ops/s
Iteration  29: 1235808.898 ops/s
Iteration  30: 1232411.966 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEach":
  1258992.885 ±(99.9%) 27642.286 ops/s [Average]
  (min, avg, max) = (1209777.932, 1258992.885, 1344721.757), stdev = 41373.675
  CI (99.9%): [1231350.599, 1286635.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_forEach  thrpt   30  1258992.885 ± 27642.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1435933.499 ops/s
# Warmup Iteration   2: 3573228.030 ops/s
# Warmup Iteration   3: 3148348.170 ops/s
# Warmup Iteration   4: 3257168.857 ops/s
# Warmup Iteration   5: 3563421.726 ops/s
# Warmup Iteration   6: 3651789.304 ops/s
# Warmup Iteration   7: 3567886.576 ops/s
# Warmup Iteration   8: 3556122.819 ops/s
# Warmup Iteration   9: 3640717.153 ops/s
# Warmup Iteration  10: 3681445.275 ops/s
# Warmup Iteration  11: 3670435.063 ops/s
# Warmup Iteration  12: 3580165.710 ops/s
# Warmup Iteration  13: 3747243.500 ops/s
# Warmup Iteration  14: 3517921.112 ops/s
# Warmup Iteration  15: 3611468.406 ops/s
# Warmup Iteration  16: 3757117.996 ops/s
# Warmup Iteration  17: 3641444.622 ops/s
# Warmup Iteration  18: 3584863.670 ops/s
# Warmup Iteration  19: 3775848.758 ops/s
# Warmup Iteration  20: 3740865.934 ops/s
# Warmup Iteration  21: 3569431.264 ops/s
# Warmup Iteration  22: 3514274.355 ops/s
# Warmup Iteration  23: 3560240.233 ops/s
# Warmup Iteration  24: 3548647.392 ops/s
# Warmup Iteration  25: 3504843.713 ops/s
# Warmup Iteration  26: 3545890.207 ops/s
# Warmup Iteration  27: 3474549.986 ops/s
# Warmup Iteration  28: 3569114.225 ops/s
# Warmup Iteration  29: 3570682.262 ops/s
# Warmup Iteration  30: 3559521.284 ops/s
Iteration   1: 3665175.421 ops/s
Iteration   2: 3509141.515 ops/s
Iteration   3: 3514708.892 ops/s
Iteration   4: 3466598.195 ops/s
Iteration   5: 3832186.498 ops/s
Iteration   6: 3687583.016 ops/s
Iteration   7: 3589362.817 ops/s
Iteration   8: 3512494.718 ops/s
Iteration   9: 3652475.777 ops/s
Iteration  10: 3559869.549 ops/s
Iteration  11: 3597810.952 ops/s
Iteration  12: 3489726.750 ops/s
Iteration  13: 3530493.412 ops/s
Iteration  14: 3522510.387 ops/s
Iteration  15: 3530455.523 ops/s
Iteration  16: 3531718.427 ops/s
Iteration  17: 3588740.990 ops/s
Iteration  18: 3835234.398 ops/s
Iteration  19: 3842870.819 ops/s
Iteration  20: 3849287.687 ops/s
Iteration  21: 3838540.640 ops/s
Iteration  22: 3759288.378 ops/s
Iteration  23: 3847587.244 ops/s
Iteration  24: 3685779.991 ops/s
Iteration  25: 3499261.048 ops/s
Iteration  26: 3728318.770 ops/s
Iteration  27: 3598061.130 ops/s
Iteration  28: 3568457.923 ops/s
Iteration  29: 3548029.005 ops/s
Iteration  30: 3815417.340 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachKey":
  3639906.240 ±(99.9%) 87750.053 ops/s [Average]
  (min, avg, max) = (3466598.195, 3639906.240, 3849287.687), stdev = 131340.158
  CI (99.9%): [3552156.188, 3727656.293] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_forEachKey  thrpt   30  3639906.240 ± 87750.053  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 368755.360 ops/s
# Warmup Iteration   2: 807844.541 ops/s
# Warmup Iteration   3: 824562.966 ops/s
# Warmup Iteration   4: 831174.246 ops/s
# Warmup Iteration   5: 712585.028 ops/s
# Warmup Iteration   6: 853800.776 ops/s
# Warmup Iteration   7: 855477.721 ops/s
# Warmup Iteration   8: 846817.402 ops/s
# Warmup Iteration   9: 842286.100 ops/s
# Warmup Iteration  10: 825584.490 ops/s
# Warmup Iteration  11: 842486.345 ops/s
# Warmup Iteration  12: 843909.050 ops/s
# Warmup Iteration  13: 803031.114 ops/s
# Warmup Iteration  14: 823594.495 ops/s
# Warmup Iteration  15: 842597.393 ops/s
# Warmup Iteration  16: 845874.769 ops/s
# Warmup Iteration  17: 848363.586 ops/s
# Warmup Iteration  18: 837849.132 ops/s
# Warmup Iteration  19: 874974.022 ops/s
# Warmup Iteration  20: 866524.031 ops/s
# Warmup Iteration  21: 840960.212 ops/s
# Warmup Iteration  22: 794466.661 ops/s
# Warmup Iteration  23: 808185.162 ops/s
# Warmup Iteration  24: 816596.896 ops/s
# Warmup Iteration  25: 858371.363 ops/s
# Warmup Iteration  26: 844241.541 ops/s
# Warmup Iteration  27: 802186.795 ops/s
# Warmup Iteration  28: 826290.812 ops/s
# Warmup Iteration  29: 841244.972 ops/s
# Warmup Iteration  30: 868284.267 ops/s
Iteration   1: 859721.918 ops/s
Iteration   2: 877160.601 ops/s
Iteration   3: 877966.785 ops/s
Iteration   4: 818904.700 ops/s
Iteration   5: 856012.096 ops/s
Iteration   6: 810550.070 ops/s
Iteration   7: 804832.266 ops/s
Iteration   8: 791541.469 ops/s
Iteration   9: 835702.443 ops/s
Iteration  10: 868046.973 ops/s
Iteration  11: 834009.094 ops/s
Iteration  12: 795322.341 ops/s
Iteration  13: 822244.557 ops/s
Iteration  14: 847907.284 ops/s
Iteration  15: 814933.778 ops/s
Iteration  16: 816670.714 ops/s
Iteration  17: 817363.760 ops/s
Iteration  18: 832132.392 ops/s
Iteration  19: 804819.686 ops/s
Iteration  20: 792986.392 ops/s
Iteration  21: 806309.733 ops/s
Iteration  22: 857961.566 ops/s
Iteration  23: 866246.870 ops/s
Iteration  24: 881559.270 ops/s
Iteration  25: 879257.305 ops/s
Iteration  26: 827559.736 ops/s
Iteration  27: 852682.939 ops/s
Iteration  28: 875104.963 ops/s
Iteration  29: 879258.314 ops/s
Iteration  30: 828548.888 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachKeyValue":
  837777.297 ±(99.9%) 19718.865 ops/s [Average]
  (min, avg, max) = (791541.469, 837777.297, 881559.270), stdev = 29514.271
  CI (99.9%): [818058.432, 857496.161] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_forEachKeyValue  thrpt   30  837777.297 ± 19718.865  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1227648.733 ops/s
# Warmup Iteration   2: 3403328.724 ops/s
# Warmup Iteration   3: 3320259.561 ops/s
# Warmup Iteration   4: 2718567.761 ops/s
# Warmup Iteration   5: 3352264.608 ops/s
# Warmup Iteration   6: 3326988.240 ops/s
# Warmup Iteration   7: 3369041.267 ops/s
# Warmup Iteration   8: 3408019.219 ops/s
# Warmup Iteration   9: 3359072.825 ops/s
# Warmup Iteration  10: 3393670.394 ops/s
# Warmup Iteration  11: 3294748.861 ops/s
# Warmup Iteration  12: 3350965.295 ops/s
# Warmup Iteration  13: 3349816.446 ops/s
# Warmup Iteration  14: 3319621.948 ops/s
# Warmup Iteration  15: 3446250.316 ops/s
# Warmup Iteration  16: 3487369.776 ops/s
# Warmup Iteration  17: 3432120.628 ops/s
# Warmup Iteration  18: 3430524.128 ops/s
# Warmup Iteration  19: 3321653.370 ops/s
# Warmup Iteration  20: 3382279.461 ops/s
# Warmup Iteration  21: 3337641.490 ops/s
# Warmup Iteration  22: 3357796.467 ops/s
# Warmup Iteration  23: 3382171.764 ops/s
# Warmup Iteration  24: 3324993.997 ops/s
# Warmup Iteration  25: 3392868.726 ops/s
# Warmup Iteration  26: 3496078.160 ops/s
# Warmup Iteration  27: 3342495.428 ops/s
# Warmup Iteration  28: 3406872.565 ops/s
# Warmup Iteration  29: 3365988.342 ops/s
# Warmup Iteration  30: 3439011.824 ops/s
Iteration   1: 3483231.067 ops/s
Iteration   2: 3297304.420 ops/s
Iteration   3: 3365784.049 ops/s
Iteration   4: 3316520.241 ops/s
Iteration   5: 3330973.963 ops/s
Iteration   6: 3365493.198 ops/s
Iteration   7: 3416164.921 ops/s
Iteration   8: 3373532.438 ops/s
Iteration   9: 3336851.227 ops/s
Iteration  10: 3353124.050 ops/s
Iteration  11: 3332137.686 ops/s
Iteration  12: 3377000.647 ops/s
Iteration  13: 3377115.743 ops/s
Iteration  14: 3439513.742 ops/s
Iteration  15: 3381606.208 ops/s
Iteration  16: 3355348.491 ops/s
Iteration  17: 3371408.467 ops/s
Iteration  18: 3313740.499 ops/s
Iteration  19: 3317260.816 ops/s
Iteration  20: 3363518.935 ops/s
Iteration  21: 3370236.684 ops/s
Iteration  22: 3350135.254 ops/s
Iteration  23: 3399563.871 ops/s
Iteration  24: 3405357.688 ops/s
Iteration  25: 3365175.469 ops/s
Iteration  26: 3421461.702 ops/s
Iteration  27: 3464231.226 ops/s
Iteration  28: 3338064.098 ops/s
Iteration  29: 3477906.537 ops/s
Iteration  30: 3605059.799 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachValue":
  3382160.771 ±(99.9%) 42311.588 ops/s [Average]
  (min, avg, max) = (3297304.420, 3382160.771, 3605059.799), stdev = 63329.998
  CI (99.9%): [3339849.183, 3424472.359] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_forEachValue  thrpt   30  3382160.771 ± 42311.588  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1159496.057 ops/s
# Warmup Iteration   2: 2846438.808 ops/s
# Warmup Iteration   3: 2846115.451 ops/s
# Warmup Iteration   4: 2488772.633 ops/s
# Warmup Iteration   5: 2960459.487 ops/s
# Warmup Iteration   6: 2805052.026 ops/s
# Warmup Iteration   7: 2883804.540 ops/s
# Warmup Iteration   8: 2812798.080 ops/s
# Warmup Iteration   9: 2918924.934 ops/s
# Warmup Iteration  10: 2800696.838 ops/s
# Warmup Iteration  11: 2808587.153 ops/s
# Warmup Iteration  12: 2799944.607 ops/s
# Warmup Iteration  13: 2821767.503 ops/s
# Warmup Iteration  14: 2798119.248 ops/s
# Warmup Iteration  15: 2826358.496 ops/s
# Warmup Iteration  16: 2795820.608 ops/s
# Warmup Iteration  17: 2863427.540 ops/s
# Warmup Iteration  18: 2856739.262 ops/s
# Warmup Iteration  19: 2825064.580 ops/s
# Warmup Iteration  20: 2788944.627 ops/s
# Warmup Iteration  21: 2787977.789 ops/s
# Warmup Iteration  22: 2803160.815 ops/s
# Warmup Iteration  23: 2781452.554 ops/s
# Warmup Iteration  24: 2806361.505 ops/s
# Warmup Iteration  25: 2806033.705 ops/s
# Warmup Iteration  26: 2793011.909 ops/s
# Warmup Iteration  27: 2792272.196 ops/s
# Warmup Iteration  28: 2759305.248 ops/s
# Warmup Iteration  29: 2849175.954 ops/s
# Warmup Iteration  30: 2823960.334 ops/s
Iteration   1: 2780635.545 ops/s
Iteration   2: 2819808.208 ops/s
Iteration   3: 2834951.591 ops/s
Iteration   4: 2855134.384 ops/s
Iteration   5: 2789434.330 ops/s
Iteration   6: 2776523.523 ops/s
Iteration   7: 2848094.855 ops/s
Iteration   8: 2837534.490 ops/s
Iteration   9: 2791837.077 ops/s
Iteration  10: 2890589.371 ops/s
Iteration  11: 2876549.827 ops/s
Iteration  12: 2823196.544 ops/s
Iteration  13: 2800588.605 ops/s
Iteration  14: 2799182.239 ops/s
Iteration  15: 2804070.343 ops/s
Iteration  16: 2763660.862 ops/s
Iteration  17: 2800942.306 ops/s
Iteration  18: 2841010.293 ops/s
Iteration  19: 2796308.474 ops/s
Iteration  20: 2728748.704 ops/s
Iteration  21: 2811030.809 ops/s
Iteration  22: 2804754.277 ops/s
Iteration  23: 2854458.550 ops/s
Iteration  24: 2868724.674 ops/s
Iteration  25: 2749923.468 ops/s
Iteration  26: 2840611.286 ops/s
Iteration  27: 2875044.600 ops/s
Iteration  28: 2838251.929 ops/s
Iteration  29: 2792353.550 ops/s
Iteration  30: 2798336.317 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachWith":
  2816409.701 ±(99.9%) 25805.482 ops/s [Average]
  (min, avg, max) = (2728748.704, 2816409.701, 2890589.371), stdev = 38624.434
  CI (99.9%): [2790604.219, 2842215.183] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_forEachWith  thrpt   30  2816409.701 ± 25805.482  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 790673.979 ops/s
# Warmup Iteration   2: 1956375.220 ops/s
# Warmup Iteration   3: 1953850.795 ops/s
# Warmup Iteration   4: 1662202.385 ops/s
# Warmup Iteration   5: 1974267.104 ops/s
# Warmup Iteration   6: 2026152.682 ops/s
# Warmup Iteration   7: 2135966.620 ops/s
# Warmup Iteration   8: 2006056.127 ops/s
# Warmup Iteration   9: 2018174.027 ops/s
# Warmup Iteration  10: 1955140.296 ops/s
# Warmup Iteration  11: 2000572.531 ops/s
# Warmup Iteration  12: 1942825.346 ops/s
# Warmup Iteration  13: 1997928.199 ops/s
# Warmup Iteration  14: 2002501.652 ops/s
# Warmup Iteration  15: 1996236.500 ops/s
# Warmup Iteration  16: 2024695.867 ops/s
# Warmup Iteration  17: 1965016.304 ops/s
# Warmup Iteration  18: 2081587.744 ops/s
# Warmup Iteration  19: 2036082.332 ops/s
# Warmup Iteration  20: 1992388.094 ops/s
# Warmup Iteration  21: 2024694.054 ops/s
# Warmup Iteration  22: 2125223.127 ops/s
# Warmup Iteration  23: 1971939.606 ops/s
# Warmup Iteration  24: 2065811.781 ops/s
# Warmup Iteration  25: 1980135.843 ops/s
# Warmup Iteration  26: 2008248.145 ops/s
# Warmup Iteration  27: 2122524.672 ops/s
# Warmup Iteration  28: 2069307.568 ops/s
# Warmup Iteration  29: 1966095.245 ops/s
# Warmup Iteration  30: 1969896.429 ops/s
Iteration   1: 1992937.098 ops/s
Iteration   2: 1991787.100 ops/s
Iteration   3: 1952211.650 ops/s
Iteration   4: 2020684.955 ops/s
Iteration   5: 2061191.125 ops/s
Iteration   6: 2032965.233 ops/s
Iteration   7: 2007816.545 ops/s
Iteration   8: 1963386.871 ops/s
Iteration   9: 1997722.734 ops/s
Iteration  10: 2032831.239 ops/s
Iteration  11: 2018542.314 ops/s
Iteration  12: 1990700.044 ops/s
Iteration  13: 2023718.883 ops/s
Iteration  14: 1990071.302 ops/s
Iteration  15: 2061205.755 ops/s
Iteration  16: 1954472.581 ops/s
Iteration  17: 1918260.033 ops/s
Iteration  18: 1922472.014 ops/s
Iteration  19: 1915817.594 ops/s
Iteration  20: 1987940.505 ops/s
Iteration  21: 1962416.016 ops/s
Iteration  22: 1936355.465 ops/s
Iteration  23: 1938321.136 ops/s
Iteration  24: 1880697.308 ops/s
Iteration  25: 1953211.832 ops/s
Iteration  26: 1968515.321 ops/s
Iteration  27: 2010112.850 ops/s
Iteration  28: 2031390.947 ops/s
Iteration  29: 1963939.415 ops/s
Iteration  30: 2020747.703 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forEachWithIndex":
  1983414.786 ±(99.9%) 29937.226 ops/s [Average]
  (min, avg, max) = (1880697.308, 1983414.786, 2061205.755), stdev = 44808.634
  CI (99.9%): [1953477.560, 2013352.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  1983414.786 ± 29937.226  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forcePut$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forcePut

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 95059.979 ops/s
# Warmup Iteration   2: 95518.339 ops/s
# Warmup Iteration   3: 133975.931 ops/s
# Warmup Iteration   4: 142893.878 ops/s
# Warmup Iteration   5: 144547.678 ops/s
# Warmup Iteration   6: 148787.241 ops/s
# Warmup Iteration   7: 147338.732 ops/s
# Warmup Iteration   8: 150334.114 ops/s
# Warmup Iteration   9: 144066.317 ops/s
# Warmup Iteration  10: 145011.994 ops/s
# Warmup Iteration  11: 143974.820 ops/s
# Warmup Iteration  12: 115392.581 ops/s
# Warmup Iteration  13: 146193.865 ops/s
# Warmup Iteration  14: 146778.375 ops/s
# Warmup Iteration  15: 150101.602 ops/s
# Warmup Iteration  16: 148014.296 ops/s
# Warmup Iteration  17: 142226.643 ops/s
# Warmup Iteration  18: 144452.245 ops/s
# Warmup Iteration  19: 142481.920 ops/s
# Warmup Iteration  20: 143841.440 ops/s
# Warmup Iteration  21: 144969.123 ops/s
# Warmup Iteration  22: 143532.255 ops/s
# Warmup Iteration  23: 150530.244 ops/s
# Warmup Iteration  24: 145539.692 ops/s
# Warmup Iteration  25: 152455.315 ops/s
# Warmup Iteration  26: 144977.498 ops/s
# Warmup Iteration  27: 143135.584 ops/s
# Warmup Iteration  28: 145387.506 ops/s
# Warmup Iteration  29: 144327.711 ops/s
# Warmup Iteration  30: 145907.104 ops/s
Iteration   1: 144594.762 ops/s
Iteration   2: 151148.734 ops/s
Iteration   3: 142887.785 ops/s
Iteration   4: 144496.699 ops/s
Iteration   5: 145509.042 ops/s
Iteration   6: 142041.623 ops/s
Iteration   7: 143793.801 ops/s
Iteration   8: 140772.607 ops/s
Iteration   9: 140849.856 ops/s
Iteration  10: 143498.682 ops/s
Iteration  11: 142714.045 ops/s
Iteration  12: 145449.656 ops/s
Iteration  13: 148537.513 ops/s
Iteration  14: 145463.862 ops/s
Iteration  15: 146333.951 ops/s
Iteration  16: 149715.317 ops/s
Iteration  17: 143409.534 ops/s
Iteration  18: 141958.617 ops/s
Iteration  19: 142481.760 ops/s
Iteration  20: 142743.429 ops/s
Iteration  21: 150117.299 ops/s
Iteration  22: 144320.020 ops/s
Iteration  23: 142737.817 ops/s
Iteration  24: 149194.723 ops/s
Iteration  25: 145008.017 ops/s
Iteration  26: 144535.065 ops/s
Iteration  27: 145360.787 ops/s
Iteration  28: 144042.002 ops/s
Iteration  29: 142219.208 ops/s
Iteration  30: 144271.495 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_forcePut":
  144673.590 ±(99.9%) 1804.621 ops/s [Average]
  (min, avg, max) = (140772.607, 144673.590, 151148.734), stdev = 2701.072
  CI (99.9%): [142868.969, 146478.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_forcePut  thrpt   30  144673.590 ± 1804.621  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 463255.820 ops/s
# Warmup Iteration   2: 660624.886 ops/s
# Warmup Iteration   3: 1198740.487 ops/s
# Warmup Iteration   4: 1211912.593 ops/s
# Warmup Iteration   5: 1223770.785 ops/s
# Warmup Iteration   6: 1026124.559 ops/s
# Warmup Iteration   7: 1250703.640 ops/s
# Warmup Iteration   8: 1272102.890 ops/s
# Warmup Iteration   9: 1243086.855 ops/s
# Warmup Iteration  10: 1202280.659 ops/s
# Warmup Iteration  11: 1233682.490 ops/s
# Warmup Iteration  12: 1194499.725 ops/s
# Warmup Iteration  13: 1259999.439 ops/s
# Warmup Iteration  14: 1262716.777 ops/s
# Warmup Iteration  15: 1240388.982 ops/s
# Warmup Iteration  16: 1243575.224 ops/s
# Warmup Iteration  17: 1209306.741 ops/s
# Warmup Iteration  18: 1272482.516 ops/s
# Warmup Iteration  19: 1193053.401 ops/s
# Warmup Iteration  20: 1303872.663 ops/s
# Warmup Iteration  21: 1210915.701 ops/s
# Warmup Iteration  22: 1241678.581 ops/s
# Warmup Iteration  23: 1211518.033 ops/s
# Warmup Iteration  24: 1199369.706 ops/s
# Warmup Iteration  25: 1201529.738 ops/s
# Warmup Iteration  26: 1233882.677 ops/s
# Warmup Iteration  27: 1203806.202 ops/s
# Warmup Iteration  28: 1214654.206 ops/s
# Warmup Iteration  29: 1191037.052 ops/s
# Warmup Iteration  30: 1199596.336 ops/s
Iteration   1: 1191366.645 ops/s
Iteration   2: 1182304.639 ops/s
Iteration   3: 1199449.395 ops/s
Iteration   4: 1233634.029 ops/s
Iteration   5: 1203014.785 ops/s
Iteration   6: 1196420.160 ops/s
Iteration   7: 1176682.052 ops/s
Iteration   8: 1201618.330 ops/s
Iteration   9: 1185031.821 ops/s
Iteration  10: 1243682.714 ops/s
Iteration  11: 1244217.008 ops/s
Iteration  12: 1195275.157 ops/s
Iteration  13: 1241199.143 ops/s
Iteration  14: 1210847.864 ops/s
Iteration  15: 1223351.284 ops/s
Iteration  16: 1188394.012 ops/s
Iteration  17: 1200750.847 ops/s
Iteration  18: 1193351.077 ops/s
Iteration  19: 1201141.091 ops/s
Iteration  20: 1195102.179 ops/s
Iteration  21: 1199309.146 ops/s
Iteration  22: 1172791.924 ops/s
Iteration  23: 1208128.933 ops/s
Iteration  24: 1213244.237 ops/s
Iteration  25: 1265066.812 ops/s
Iteration  26: 1242907.223 ops/s
Iteration  27: 1257443.992 ops/s
Iteration  28: 1248305.898 ops/s
Iteration  29: 1259080.414 ops/s
Iteration  30: 1257249.794 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_get":
  1214345.420 ±(99.9%) 18421.436 ops/s [Average]
  (min, avg, max) = (1172791.924, 1214345.420, 1265066.812), stdev = 27572.340
  CI (99.9%): [1195923.984, 1232766.856] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_get  thrpt   30  1214345.420 ± 18421.436  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 689621.454 ops/s
# Warmup Iteration   2: 1770696.055 ops/s
# Warmup Iteration   3: 1952226.416 ops/s
# Warmup Iteration   4: 1599304.877 ops/s
# Warmup Iteration   5: 1959332.966 ops/s
# Warmup Iteration   6: 2009906.462 ops/s
# Warmup Iteration   7: 1921439.109 ops/s
# Warmup Iteration   8: 1897013.723 ops/s
# Warmup Iteration   9: 1916537.961 ops/s
# Warmup Iteration  10: 1996864.692 ops/s
# Warmup Iteration  11: 1993728.380 ops/s
# Warmup Iteration  12: 1981538.433 ops/s
# Warmup Iteration  13: 1975441.232 ops/s
# Warmup Iteration  14: 1986213.825 ops/s
# Warmup Iteration  15: 1940121.084 ops/s
# Warmup Iteration  16: 1920988.716 ops/s
# Warmup Iteration  17: 1939263.295 ops/s
# Warmup Iteration  18: 1954485.708 ops/s
# Warmup Iteration  19: 2001064.106 ops/s
# Warmup Iteration  20: 1983026.239 ops/s
# Warmup Iteration  21: 1935378.754 ops/s
# Warmup Iteration  22: 1932417.438 ops/s
# Warmup Iteration  23: 1961497.790 ops/s
# Warmup Iteration  24: 1950601.418 ops/s
# Warmup Iteration  25: 1938018.886 ops/s
# Warmup Iteration  26: 1929409.163 ops/s
# Warmup Iteration  27: 1973735.927 ops/s
# Warmup Iteration  28: 2005902.504 ops/s
# Warmup Iteration  29: 2115616.077 ops/s
# Warmup Iteration  30: 1964725.646 ops/s
Iteration   1: 1940888.338 ops/s
Iteration   2: 1909441.628 ops/s
Iteration   3: 1966125.040 ops/s
Iteration   4: 1939143.515 ops/s
Iteration   5: 1941344.487 ops/s
Iteration   6: 1932098.399 ops/s
Iteration   7: 1932039.533 ops/s
Iteration   8: 2021067.055 ops/s
Iteration   9: 2012027.222 ops/s
Iteration  10: 2002146.238 ops/s
Iteration  11: 1992685.194 ops/s
Iteration  12: 1986225.966 ops/s
Iteration  13: 1933603.309 ops/s
Iteration  14: 1926145.005 ops/s
Iteration  15: 1873723.205 ops/s
Iteration  16: 1930925.782 ops/s
Iteration  17: 2000182.090 ops/s
Iteration  18: 2086945.154 ops/s
Iteration  19: 2118456.071 ops/s
Iteration  20: 1959938.037 ops/s
Iteration  21: 2109292.136 ops/s
Iteration  22: 1991455.207 ops/s
Iteration  23: 1942418.993 ops/s
Iteration  24: 1951021.313 ops/s
Iteration  25: 1960817.113 ops/s
Iteration  26: 1951858.743 ops/s
Iteration  27: 1913960.441 ops/s
Iteration  28: 1957718.494 ops/s
Iteration  29: 2005465.675 ops/s
Iteration  30: 1964331.382 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getFirst":
  1971783.025 ±(99.9%) 37635.084 ops/s [Average]
  (min, avg, max) = (1873723.205, 1971783.025, 2118456.071), stdev = 56330.426
  CI (99.9%): [1934147.941, 2009418.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getFirst  thrpt   30  1971783.025 ± 37635.084  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsent$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsent

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2117512.123 ops/s
# Warmup Iteration   2: 5660978.791 ops/s
# Warmup Iteration   3: 4916635.937 ops/s
# Warmup Iteration   4: 4997325.892 ops/s
# Warmup Iteration   5: 5547334.894 ops/s
# Warmup Iteration   6: 5419415.811 ops/s
# Warmup Iteration   7: 5438364.585 ops/s
# Warmup Iteration   8: 5474049.652 ops/s
# Warmup Iteration   9: 5420573.915 ops/s
# Warmup Iteration  10: 5491153.472 ops/s
# Warmup Iteration  11: 5705545.592 ops/s
# Warmup Iteration  12: 5614405.640 ops/s
# Warmup Iteration  13: 5444832.199 ops/s
# Warmup Iteration  14: 5484024.321 ops/s
# Warmup Iteration  15: 5466494.677 ops/s
# Warmup Iteration  16: 5473862.995 ops/s
# Warmup Iteration  17: 5460821.150 ops/s
# Warmup Iteration  18: 5512403.856 ops/s
# Warmup Iteration  19: 5466185.201 ops/s
# Warmup Iteration  20: 5455706.837 ops/s
# Warmup Iteration  21: 5554418.886 ops/s
# Warmup Iteration  22: 5479222.186 ops/s
# Warmup Iteration  23: 5452753.722 ops/s
# Warmup Iteration  24: 5870506.763 ops/s
# Warmup Iteration  25: 5449696.836 ops/s
# Warmup Iteration  26: 5462856.547 ops/s
# Warmup Iteration  27: 5511329.013 ops/s
# Warmup Iteration  28: 5536478.870 ops/s
# Warmup Iteration  29: 5566558.102 ops/s
# Warmup Iteration  30: 5435756.914 ops/s
Iteration   1: 5416240.824 ops/s
Iteration   2: 5366762.686 ops/s
Iteration   3: 5417962.709 ops/s
Iteration   4: 5367657.901 ops/s
Iteration   5: 5525156.812 ops/s
Iteration   6: 5639591.093 ops/s
Iteration   7: 5451474.119 ops/s
Iteration   8: 5544669.771 ops/s
Iteration   9: 5488800.088 ops/s
Iteration  10: 5547175.944 ops/s
Iteration  11: 5450197.070 ops/s
Iteration  12: 5360822.441 ops/s
Iteration  13: 5429650.518 ops/s
Iteration  14: 5689029.651 ops/s
Iteration  15: 5686504.515 ops/s
Iteration  16: 5616531.285 ops/s
Iteration  17: 5614739.082 ops/s
Iteration  18: 5668399.848 ops/s
Iteration  19: 5564174.731 ops/s
Iteration  20: 5402934.583 ops/s
Iteration  21: 5395956.682 ops/s
Iteration  22: 5474634.549 ops/s
Iteration  23: 5510850.452 ops/s
Iteration  24: 5438221.608 ops/s
Iteration  25: 5537053.959 ops/s
Iteration  26: 5410029.405 ops/s
Iteration  27: 5463093.667 ops/s
Iteration  28: 5464579.898 ops/s
Iteration  29: 5509516.518 ops/s
Iteration  30: 5407011.043 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsent":
  5495314.115 ±(99.9%) 65338.691 ops/s [Average]
  (min, avg, max) = (5360822.441, 5495314.115, 5689029.651), stdev = 97795.883
  CI (99.9%): [5429975.424, 5560652.806] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsent  thrpt   30  5495314.115 ± 65338.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPut$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPut

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1607553.699 ops/s
# Warmup Iteration   2: 3411510.201 ops/s
# Warmup Iteration   3: 4710503.002 ops/s
# Warmup Iteration   4: 3887764.857 ops/s
# Warmup Iteration   5: 4558794.670 ops/s
# Warmup Iteration   6: 4496593.370 ops/s
# Warmup Iteration   7: 4527954.263 ops/s
# Warmup Iteration   8: 4540815.575 ops/s
# Warmup Iteration   9: 4552836.106 ops/s
# Warmup Iteration  10: 4514545.929 ops/s
# Warmup Iteration  11: 4611911.457 ops/s
# Warmup Iteration  12: 4647522.860 ops/s
# Warmup Iteration  13: 4528661.702 ops/s
# Warmup Iteration  14: 4539646.179 ops/s
# Warmup Iteration  15: 4446252.703 ops/s
# Warmup Iteration  16: 4509094.296 ops/s
# Warmup Iteration  17: 4607833.880 ops/s
# Warmup Iteration  18: 4489880.109 ops/s
# Warmup Iteration  19: 4530502.527 ops/s
# Warmup Iteration  20: 4531012.148 ops/s
# Warmup Iteration  21: 4520399.913 ops/s
# Warmup Iteration  22: 4701076.318 ops/s
# Warmup Iteration  23: 4591622.614 ops/s
# Warmup Iteration  24: 4589921.240 ops/s
# Warmup Iteration  25: 4621750.465 ops/s
# Warmup Iteration  26: 4674399.782 ops/s
# Warmup Iteration  27: 4600584.374 ops/s
# Warmup Iteration  28: 4571484.621 ops/s
# Warmup Iteration  29: 4629122.438 ops/s
# Warmup Iteration  30: 4475942.898 ops/s
Iteration   1: 4430206.630 ops/s
Iteration   2: 4472676.422 ops/s
Iteration   3: 4688966.185 ops/s
Iteration   4: 4505464.654 ops/s
Iteration   5: 4659655.230 ops/s
Iteration   6: 4539091.121 ops/s
Iteration   7: 4575374.110 ops/s
Iteration   8: 4547876.620 ops/s
Iteration   9: 4450314.001 ops/s
Iteration  10: 4529304.143 ops/s
Iteration  11: 4643847.141 ops/s
Iteration  12: 4426705.443 ops/s
Iteration  13: 4454160.473 ops/s
Iteration  14: 4499921.789 ops/s
Iteration  15: 4583517.680 ops/s
Iteration  16: 4498392.344 ops/s
Iteration  17: 4559249.886 ops/s
Iteration  18: 4670876.540 ops/s
Iteration  19: 4468630.602 ops/s
Iteration  20: 4596661.611 ops/s
Iteration  21: 4545324.007 ops/s
Iteration  22: 4535511.855 ops/s
Iteration  23: 4549611.536 ops/s
Iteration  24: 4690251.931 ops/s
Iteration  25: 4468217.639 ops/s
Iteration  26: 4551898.831 ops/s
Iteration  27: 4487682.905 ops/s
Iteration  28: 4369032.914 ops/s
Iteration  29: 4419030.759 ops/s
Iteration  30: 4568941.215 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPut":
  4532879.874 ±(99.9%) 55443.656 ops/s [Average]
  (min, avg, max) = (4369032.914, 4532879.874, 4690251.931), stdev = 82985.461
  CI (99.9%): [4477436.217, 4588323.530] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPut  thrpt   30  4532879.874 ± 55443.656  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1186417.340 ops/s
# Warmup Iteration   2: 1857106.027 ops/s
# Warmup Iteration   3: 3545527.634 ops/s
# Warmup Iteration   4: 3470487.982 ops/s
# Warmup Iteration   5: 2879248.869 ops/s
# Warmup Iteration   6: 3452782.437 ops/s
# Warmup Iteration   7: 3489467.788 ops/s
# Warmup Iteration   8: 3628959.803 ops/s
# Warmup Iteration   9: 3545313.789 ops/s
# Warmup Iteration  10: 3512429.203 ops/s
# Warmup Iteration  11: 3515772.048 ops/s
# Warmup Iteration  12: 3578254.051 ops/s
# Warmup Iteration  13: 3491909.215 ops/s
# Warmup Iteration  14: 3478581.073 ops/s
# Warmup Iteration  15: 3504397.683 ops/s
# Warmup Iteration  16: 3474794.604 ops/s
# Warmup Iteration  17: 3585444.398 ops/s
# Warmup Iteration  18: 3585075.037 ops/s
# Warmup Iteration  19: 3513302.055 ops/s
# Warmup Iteration  20: 3451134.212 ops/s
# Warmup Iteration  21: 3520198.414 ops/s
# Warmup Iteration  22: 3586912.743 ops/s
# Warmup Iteration  23: 3552930.513 ops/s
# Warmup Iteration  24: 3530825.264 ops/s
# Warmup Iteration  25: 3494226.325 ops/s
# Warmup Iteration  26: 3537368.246 ops/s
# Warmup Iteration  27: 3681236.227 ops/s
# Warmup Iteration  28: 3570773.418 ops/s
# Warmup Iteration  29: 3554209.026 ops/s
# Warmup Iteration  30: 3474817.353 ops/s
Iteration   1: 3542952.781 ops/s
Iteration   2: 3606231.734 ops/s
Iteration   3: 3557659.932 ops/s
Iteration   4: 3474312.582 ops/s
Iteration   5: 3519832.117 ops/s
Iteration   6: 3503749.179 ops/s
Iteration   7: 3519411.511 ops/s
Iteration   8: 3537766.260 ops/s
Iteration   9: 3461184.360 ops/s
Iteration  10: 3510898.984 ops/s
Iteration  11: 3470530.459 ops/s
Iteration  12: 3665520.796 ops/s
Iteration  13: 3714345.902 ops/s
Iteration  14: 3777230.421 ops/s
Iteration  15: 3566040.284 ops/s
Iteration  16: 3533905.240 ops/s
Iteration  17: 3732443.596 ops/s
Iteration  18: 3465038.371 ops/s
Iteration  19: 3563633.763 ops/s
Iteration  20: 3514990.019 ops/s
Iteration  21: 3573381.887 ops/s
Iteration  22: 3515311.605 ops/s
Iteration  23: 3500308.761 ops/s
Iteration  24: 3489638.675 ops/s
Iteration  25: 3575868.355 ops/s
Iteration  26: 3466263.087 ops/s
Iteration  27: 3586432.644 ops/s
Iteration  28: 3489148.335 ops/s
Iteration  29: 3491633.890 ops/s
Iteration  30: 3542443.399 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutValue":
  3548936.964 ±(99.9%) 53691.847 ops/s [Average]
  (min, avg, max) = (3461184.360, 3548936.964, 3777230.421), stdev = 80363.435
  CI (99.9%): [3495245.117, 3602628.811] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutValue  thrpt   30  3548936.964 ± 53691.847  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1553279.503 ops/s
# Warmup Iteration   2: 3222970.710 ops/s
# Warmup Iteration   3: 4201673.365 ops/s
# Warmup Iteration   4: 3306559.166 ops/s
# Warmup Iteration   5: 4389683.753 ops/s
# Warmup Iteration   6: 4293430.314 ops/s
# Warmup Iteration   7: 4314921.608 ops/s
# Warmup Iteration   8: 4296576.142 ops/s
# Warmup Iteration   9: 4356006.780 ops/s
# Warmup Iteration  10: 4387874.028 ops/s
# Warmup Iteration  11: 4354267.521 ops/s
# Warmup Iteration  12: 4338001.275 ops/s
# Warmup Iteration  13: 4388680.932 ops/s
# Warmup Iteration  14: 4379784.784 ops/s
# Warmup Iteration  15: 4363794.084 ops/s
# Warmup Iteration  16: 4368686.367 ops/s
# Warmup Iteration  17: 4319181.100 ops/s
# Warmup Iteration  18: 4355111.957 ops/s
# Warmup Iteration  19: 4370370.301 ops/s
# Warmup Iteration  20: 4377675.744 ops/s
# Warmup Iteration  21: 4381471.532 ops/s
# Warmup Iteration  22: 4346841.452 ops/s
# Warmup Iteration  23: 4336432.722 ops/s
# Warmup Iteration  24: 4307465.540 ops/s
# Warmup Iteration  25: 4332470.315 ops/s
# Warmup Iteration  26: 4386519.864 ops/s
# Warmup Iteration  27: 4276942.593 ops/s
# Warmup Iteration  28: 4362472.103 ops/s
# Warmup Iteration  29: 4229405.290 ops/s
# Warmup Iteration  30: 4016780.994 ops/s
Iteration   1: 3983242.199 ops/s
Iteration   2: 3980563.671 ops/s
Iteration   3: 4099280.878 ops/s
Iteration   4: 4209545.336 ops/s
Iteration   5: 4235761.817 ops/s
Iteration   6: 4084203.942 ops/s
Iteration   7: 4030964.468 ops/s
Iteration   8: 4071846.153 ops/s
Iteration   9: 4177074.603 ops/s
Iteration  10: 4176148.151 ops/s
Iteration  11: 4409988.065 ops/s
Iteration  12: 4416136.682 ops/s
Iteration  13: 4387398.947 ops/s
Iteration  14: 4399601.108 ops/s
Iteration  15: 4203214.547 ops/s
Iteration  16: 4199195.118 ops/s
Iteration  17: 4048362.903 ops/s
Iteration  18: 4146964.252 ops/s
Iteration  19: 4128436.089 ops/s
Iteration  20: 4038962.255 ops/s
Iteration  21: 4014429.927 ops/s
Iteration  22: 4051864.599 ops/s
Iteration  23: 4205023.986 ops/s
Iteration  24: 4200644.797 ops/s
Iteration  25: 4360601.849 ops/s
Iteration  26: 4259363.773 ops/s
Iteration  27: 4128944.302 ops/s
Iteration  28: 4084950.021 ops/s
Iteration  29: 4136797.625 ops/s
Iteration  30: 4010961.176 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutWith":
  4162682.441 ±(99.9%) 86912.432 ops/s [Average]
  (min, avg, max) = (3980563.671, 4162682.441, 4416136.682), stdev = 130086.447
  CI (99.9%): [4075770.009, 4249594.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutWith  thrpt   30  4162682.441 ± 86912.432  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutWithKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutWithKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1617236.489 ops/s
# Warmup Iteration   2: 3333458.112 ops/s
# Warmup Iteration   3: 4568100.583 ops/s
# Warmup Iteration   4: 3659598.749 ops/s
# Warmup Iteration   5: 4466799.958 ops/s
# Warmup Iteration   6: 4561588.173 ops/s
# Warmup Iteration   7: 4623267.231 ops/s
# Warmup Iteration   8: 4564614.868 ops/s
# Warmup Iteration   9: 4559911.696 ops/s
# Warmup Iteration  10: 4575949.606 ops/s
# Warmup Iteration  11: 4570705.359 ops/s
# Warmup Iteration  12: 4518530.929 ops/s
# Warmup Iteration  13: 4598826.247 ops/s
# Warmup Iteration  14: 4582620.079 ops/s
# Warmup Iteration  15: 4663579.606 ops/s
# Warmup Iteration  16: 4510311.747 ops/s
# Warmup Iteration  17: 4567614.971 ops/s
# Warmup Iteration  18: 4557863.796 ops/s
# Warmup Iteration  19: 4493923.733 ops/s
# Warmup Iteration  20: 4581329.727 ops/s
# Warmup Iteration  21: 4517880.914 ops/s
# Warmup Iteration  22: 4714643.258 ops/s
# Warmup Iteration  23: 4661833.554 ops/s
# Warmup Iteration  24: 4594579.585 ops/s
# Warmup Iteration  25: 4688057.167 ops/s
# Warmup Iteration  26: 4626085.260 ops/s
# Warmup Iteration  27: 4550036.569 ops/s
# Warmup Iteration  28: 4529433.928 ops/s
# Warmup Iteration  29: 4471724.390 ops/s
# Warmup Iteration  30: 4559431.306 ops/s
Iteration   1: 4456413.240 ops/s
Iteration   2: 4593698.524 ops/s
Iteration   3: 4502482.357 ops/s
Iteration   4: 4563407.157 ops/s
Iteration   5: 4621316.398 ops/s
Iteration   6: 4526537.685 ops/s
Iteration   7: 4548782.322 ops/s
Iteration   8: 4696107.605 ops/s
Iteration   9: 4584234.298 ops/s
Iteration  10: 4677564.345 ops/s
Iteration  11: 4601262.063 ops/s
Iteration  12: 4640505.824 ops/s
Iteration  13: 4636330.491 ops/s
Iteration  14: 4622428.455 ops/s
Iteration  15: 4581751.310 ops/s
Iteration  16: 4669179.294 ops/s
Iteration  17: 4591754.371 ops/s
Iteration  18: 4705910.835 ops/s
Iteration  19: 4710951.239 ops/s
Iteration  20: 4708025.954 ops/s
Iteration  21: 4599122.130 ops/s
Iteration  22: 4552648.783 ops/s
Iteration  23: 4537576.990 ops/s
Iteration  24: 4671435.642 ops/s
Iteration  25: 4558109.237 ops/s
Iteration  26: 4565391.243 ops/s
Iteration  27: 4510372.057 ops/s
Iteration  28: 4553722.467 ops/s
Iteration  29: 4549743.891 ops/s
Iteration  30: 4488185.272 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutWithKey":
  4594165.049 ±(99.9%) 46039.334 ops/s [Average]
  (min, avg, max) = (4456413.240, 4594165.049, 4710951.239), stdev = 68909.513
  CI (99.9%): [4548125.716, 4640204.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutWithKey  thrpt   30  4594165.049 ± 46039.334  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 424236.958 ops/s
# Warmup Iteration   2: 453126.613 ops/s
# Warmup Iteration   3: 620953.619 ops/s
# Warmup Iteration   4: 628722.052 ops/s
# Warmup Iteration   5: 628876.526 ops/s
# Warmup Iteration   6: 629836.191 ops/s
# Warmup Iteration   7: 634796.517 ops/s
# Warmup Iteration   8: 628720.798 ops/s
# Warmup Iteration   9: 630851.117 ops/s
# Warmup Iteration  10: 620601.025 ops/s
# Warmup Iteration  11: 531839.383 ops/s
# Warmup Iteration  12: 612286.849 ops/s
# Warmup Iteration  13: 631933.221 ops/s
# Warmup Iteration  14: 629216.584 ops/s
# Warmup Iteration  15: 624020.259 ops/s
# Warmup Iteration  16: 626225.952 ops/s
# Warmup Iteration  17: 679269.420 ops/s
# Warmup Iteration  18: 651289.961 ops/s
# Warmup Iteration  19: 669066.378 ops/s
# Warmup Iteration  20: 654039.843 ops/s
# Warmup Iteration  21: 669027.051 ops/s
# Warmup Iteration  22: 683310.259 ops/s
# Warmup Iteration  23: 649831.626 ops/s
# Warmup Iteration  24: 664928.888 ops/s
# Warmup Iteration  25: 656534.219 ops/s
# Warmup Iteration  26: 664216.132 ops/s
# Warmup Iteration  27: 657176.216 ops/s
# Warmup Iteration  28: 646158.391 ops/s
# Warmup Iteration  29: 680315.307 ops/s
# Warmup Iteration  30: 681633.654 ops/s
Iteration   1: 677075.518 ops/s
Iteration   2: 653227.752 ops/s
Iteration   3: 664505.953 ops/s
Iteration   4: 654430.051 ops/s
Iteration   5: 655686.939 ops/s
Iteration   6: 646858.735 ops/s
Iteration   7: 646507.885 ops/s
Iteration   8: 658315.714 ops/s
Iteration   9: 646984.349 ops/s
Iteration  10: 647871.346 ops/s
Iteration  11: 642888.102 ops/s
Iteration  12: 664186.904 ops/s
Iteration  13: 665638.387 ops/s
Iteration  14: 663510.411 ops/s
Iteration  15: 674304.135 ops/s
Iteration  16: 681509.565 ops/s
Iteration  17: 668418.353 ops/s
Iteration  18: 665919.147 ops/s
Iteration  19: 665681.406 ops/s
Iteration  20: 645270.551 ops/s
Iteration  21: 661385.381 ops/s
Iteration  22: 643793.009 ops/s
Iteration  23: 650388.083 ops/s
Iteration  24: 647081.491 ops/s
Iteration  25: 648195.062 ops/s
Iteration  26: 656031.218 ops/s
Iteration  27: 658639.367 ops/s
Iteration  28: 666152.305 ops/s
Iteration  29: 655306.280 ops/s
Iteration  30: 703519.428 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws":
  659309.428 ±(99.9%) 8841.484 ops/s [Average]
  (min, avg, max) = (642888.102, 659309.428, 703519.428), stdev = 13233.518
  CI (99.9%): [650467.943, 668150.912] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws  thrpt   30  659309.428 ± 8841.484  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPut_block_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPut_block_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 473372.258 ops/s
# Warmup Iteration   2: 499252.807 ops/s
# Warmup Iteration   3: 725423.157 ops/s
# Warmup Iteration   4: 746076.363 ops/s
# Warmup Iteration   5: 735005.185 ops/s
# Warmup Iteration   6: 735415.978 ops/s
# Warmup Iteration   7: 700487.881 ops/s
# Warmup Iteration   8: 735649.967 ops/s
# Warmup Iteration   9: 693651.780 ops/s
# Warmup Iteration  10: 564223.462 ops/s
# Warmup Iteration  11: 712433.445 ops/s
# Warmup Iteration  12: 734313.597 ops/s
# Warmup Iteration  13: 680417.232 ops/s
# Warmup Iteration  14: 716993.088 ops/s
# Warmup Iteration  15: 726201.045 ops/s
# Warmup Iteration  16: 677035.467 ops/s
# Warmup Iteration  17: 717778.758 ops/s
# Warmup Iteration  18: 709794.236 ops/s
# Warmup Iteration  19: 733352.288 ops/s
# Warmup Iteration  20: 712918.109 ops/s
# Warmup Iteration  21: 703072.662 ops/s
# Warmup Iteration  22: 712033.428 ops/s
# Warmup Iteration  23: 706454.400 ops/s
# Warmup Iteration  24: 709449.051 ops/s
# Warmup Iteration  25: 745702.740 ops/s
# Warmup Iteration  26: 704899.304 ops/s
# Warmup Iteration  27: 706252.472 ops/s
# Warmup Iteration  28: 707297.364 ops/s
# Warmup Iteration  29: 727595.703 ops/s
# Warmup Iteration  30: 705975.886 ops/s
Iteration   1: 713745.907 ops/s
Iteration   2: 711301.333 ops/s
Iteration   3: 714873.427 ops/s
Iteration   4: 710727.071 ops/s
Iteration   5: 723592.147 ops/s
Iteration   6: 764508.431 ops/s
Iteration   7: 711284.866 ops/s
Iteration   8: 708873.211 ops/s
Iteration   9: 709197.760 ops/s
Iteration  10: 707301.216 ops/s
Iteration  11: 687774.946 ops/s
Iteration  12: 709449.449 ops/s
Iteration  13: 719058.890 ops/s
Iteration  14: 716207.955 ops/s
Iteration  15: 722497.891 ops/s
Iteration  16: 740421.191 ops/s
Iteration  17: 751883.689 ops/s
Iteration  18: 751129.807 ops/s
Iteration  19: 749535.318 ops/s
Iteration  20: 743442.406 ops/s
Iteration  21: 708013.684 ops/s
Iteration  22: 690874.657 ops/s
Iteration  23: 700815.281 ops/s
Iteration  24: 745961.106 ops/s
Iteration  25: 732596.180 ops/s
Iteration  26: 732422.003 ops/s
Iteration  27: 706119.941 ops/s
Iteration  28: 727746.312 ops/s
Iteration  29: 781657.360 ops/s
Iteration  30: 741314.489 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPut_block_throws":
  724477.597 ±(99.9%) 14652.632 ops/s [Average]
  (min, avg, max) = (687774.946, 724477.597, 781657.360), stdev = 21931.371
  CI (99.9%): [709824.966, 739130.229] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentPut_block_throws  thrpt   30  724477.597 ± 14652.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1484310.405 ops/s
# Warmup Iteration   2: 3402826.471 ops/s
# Warmup Iteration   3: 4392402.072 ops/s
# Warmup Iteration   4: 3525722.868 ops/s
# Warmup Iteration   5: 4355564.177 ops/s
# Warmup Iteration   6: 4328097.013 ops/s
# Warmup Iteration   7: 4481962.906 ops/s
# Warmup Iteration   8: 4333043.022 ops/s
# Warmup Iteration   9: 4505864.509 ops/s
# Warmup Iteration  10: 4511673.357 ops/s
# Warmup Iteration  11: 4647844.034 ops/s
# Warmup Iteration  12: 4473650.988 ops/s
# Warmup Iteration  13: 4381717.194 ops/s
# Warmup Iteration  14: 4324212.396 ops/s
# Warmup Iteration  15: 4326526.335 ops/s
# Warmup Iteration  16: 4506855.579 ops/s
# Warmup Iteration  17: 4372072.147 ops/s
# Warmup Iteration  18: 4347928.862 ops/s
# Warmup Iteration  19: 4320476.225 ops/s
# Warmup Iteration  20: 4315499.794 ops/s
# Warmup Iteration  21: 4363996.845 ops/s
# Warmup Iteration  22: 4398616.684 ops/s
# Warmup Iteration  23: 4418848.452 ops/s
# Warmup Iteration  24: 4454682.577 ops/s
# Warmup Iteration  25: 4482144.942 ops/s
# Warmup Iteration  26: 4435790.370 ops/s
# Warmup Iteration  27: 4507433.352 ops/s
# Warmup Iteration  28: 4430960.664 ops/s
# Warmup Iteration  29: 4398392.607 ops/s
# Warmup Iteration  30: 4393994.455 ops/s
Iteration   1: 4340876.836 ops/s
Iteration   2: 4445216.783 ops/s
Iteration   3: 4462432.699 ops/s
Iteration   4: 4436053.806 ops/s
Iteration   5: 4452891.146 ops/s
Iteration   6: 4312797.227 ops/s
Iteration   7: 4395817.097 ops/s
Iteration   8: 4317802.550 ops/s
Iteration   9: 4298756.250 ops/s
Iteration  10: 4303044.161 ops/s
Iteration  11: 4340317.055 ops/s
Iteration  12: 4484463.402 ops/s
Iteration  13: 4400831.639 ops/s
Iteration  14: 4317474.974 ops/s
Iteration  15: 4396349.315 ops/s
Iteration  16: 4405038.801 ops/s
Iteration  17: 4426698.161 ops/s
Iteration  18: 4268945.866 ops/s
Iteration  19: 4433723.652 ops/s
Iteration  20: 4479875.367 ops/s
Iteration  21: 4349531.810 ops/s
Iteration  22: 4337307.152 ops/s
Iteration  23: 4376007.803 ops/s
Iteration  24: 4350303.770 ops/s
Iteration  25: 4327402.261 ops/s
Iteration  26: 4267496.295 ops/s
Iteration  27: 4401592.040 ops/s
Iteration  28: 4386304.502 ops/s
Iteration  29: 4289446.055 ops/s
Iteration  30: 4346085.068 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentWith":
  4371696.118 ±(99.9%) 41917.189 ops/s [Average]
  (min, avg, max) = (4267496.295, 4371696.118, 4484463.402), stdev = 62739.680
  CI (99.9%): [4329778.929, 4413613.307] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsentWith  thrpt   30  4371696.118 ± 41917.189  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsent_function$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsent_function

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1580903.681 ops/s
# Warmup Iteration   2: 3325086.894 ops/s
# Warmup Iteration   3: 4611955.196 ops/s
# Warmup Iteration   4: 3813791.545 ops/s
# Warmup Iteration   5: 4653565.889 ops/s
# Warmup Iteration   6: 4740650.805 ops/s
# Warmup Iteration   7: 4596668.195 ops/s
# Warmup Iteration   8: 4659027.520 ops/s
# Warmup Iteration   9: 4836600.336 ops/s
# Warmup Iteration  10: 4722626.568 ops/s
# Warmup Iteration  11: 4780353.753 ops/s
# Warmup Iteration  12: 4639327.536 ops/s
# Warmup Iteration  13: 4773067.760 ops/s
# Warmup Iteration  14: 4751318.453 ops/s
# Warmup Iteration  15: 4806199.446 ops/s
# Warmup Iteration  16: 4656571.414 ops/s
# Warmup Iteration  17: 4639265.555 ops/s
# Warmup Iteration  18: 4625816.933 ops/s
# Warmup Iteration  19: 4595345.716 ops/s
# Warmup Iteration  20: 4570336.563 ops/s
# Warmup Iteration  21: 4606823.681 ops/s
# Warmup Iteration  22: 4622277.403 ops/s
# Warmup Iteration  23: 4646566.419 ops/s
# Warmup Iteration  24: 4633275.673 ops/s
# Warmup Iteration  25: 4816087.615 ops/s
# Warmup Iteration  26: 4641625.549 ops/s
# Warmup Iteration  27: 4695957.698 ops/s
# Warmup Iteration  28: 4622577.575 ops/s
# Warmup Iteration  29: 4595807.620 ops/s
# Warmup Iteration  30: 4684600.359 ops/s
Iteration   1: 4639800.189 ops/s
Iteration   2: 4565698.298 ops/s
Iteration   3: 4573838.325 ops/s
Iteration   4: 4678129.044 ops/s
Iteration   5: 4793029.314 ops/s
Iteration   6: 4544649.762 ops/s
Iteration   7: 4634564.394 ops/s
Iteration   8: 4585858.142 ops/s
Iteration   9: 4609655.014 ops/s
Iteration  10: 4627085.504 ops/s
Iteration  11: 4624150.556 ops/s
Iteration  12: 4632759.964 ops/s
Iteration  13: 4696223.315 ops/s
Iteration  14: 4778064.951 ops/s
Iteration  15: 4664984.578 ops/s
Iteration  16: 4632008.519 ops/s
Iteration  17: 4593689.403 ops/s
Iteration  18: 4623508.939 ops/s
Iteration  19: 4640533.629 ops/s
Iteration  20: 4645462.966 ops/s
Iteration  21: 4624315.853 ops/s
Iteration  22: 4674492.629 ops/s
Iteration  23: 4586316.034 ops/s
Iteration  24: 4632839.876 ops/s
Iteration  25: 4661416.447 ops/s
Iteration  26: 4587118.257 ops/s
Iteration  27: 4630175.615 ops/s
Iteration  28: 4598891.842 ops/s
Iteration  29: 4586076.077 ops/s
Iteration  30: 4764931.325 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsent_function":
  4637675.625 ±(99.9%) 39494.072 ops/s [Average]
  (min, avg, max) = (4544649.762, 4637675.625, 4793029.314), stdev = 59112.873
  CI (99.9%): [4598181.553, 4677169.698] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getIfAbsent_function  thrpt   30  4637675.625 ± 39494.072  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getKeysAndGetValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getKeysAndGetValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 823084.854 ops/s
# Warmup Iteration   2: 1801431.020 ops/s
# Warmup Iteration   3: 2300694.529 ops/s
# Warmup Iteration   4: 1927338.038 ops/s
# Warmup Iteration   5: 2317003.152 ops/s
# Warmup Iteration   6: 2320268.081 ops/s
# Warmup Iteration   7: 2333786.596 ops/s
# Warmup Iteration   8: 2297798.721 ops/s
# Warmup Iteration   9: 2317706.649 ops/s
# Warmup Iteration  10: 2323317.593 ops/s
# Warmup Iteration  11: 2340675.534 ops/s
# Warmup Iteration  12: 2339020.368 ops/s
# Warmup Iteration  13: 2299174.665 ops/s
# Warmup Iteration  14: 2328192.592 ops/s
# Warmup Iteration  15: 2337239.076 ops/s
# Warmup Iteration  16: 2337224.836 ops/s
# Warmup Iteration  17: 2319254.554 ops/s
# Warmup Iteration  18: 2308996.164 ops/s
# Warmup Iteration  19: 2413473.847 ops/s
# Warmup Iteration  20: 2348798.752 ops/s
# Warmup Iteration  21: 2353349.801 ops/s
# Warmup Iteration  22: 2356099.338 ops/s
# Warmup Iteration  23: 2324153.272 ops/s
# Warmup Iteration  24: 2349902.246 ops/s
# Warmup Iteration  25: 2331734.775 ops/s
# Warmup Iteration  26: 2336975.484 ops/s
# Warmup Iteration  27: 2333847.053 ops/s
# Warmup Iteration  28: 2341351.448 ops/s
# Warmup Iteration  29: 2346514.170 ops/s
# Warmup Iteration  30: 2345233.739 ops/s
Iteration   1: 2399648.838 ops/s
Iteration   2: 2409224.410 ops/s
Iteration   3: 2418001.516 ops/s
Iteration   4: 2548440.578 ops/s
Iteration   5: 2390331.539 ops/s
Iteration   6: 2319919.898 ops/s
Iteration   7: 2284539.485 ops/s
Iteration   8: 2291690.914 ops/s
Iteration   9: 2336561.573 ops/s
Iteration  10: 2527698.366 ops/s
Iteration  11: 2461588.494 ops/s
Iteration  12: 2421214.084 ops/s
Iteration  13: 2455356.415 ops/s
Iteration  14: 2425149.850 ops/s
Iteration  15: 2316861.792 ops/s
Iteration  16: 2355569.597 ops/s
Iteration  17: 2335159.480 ops/s
Iteration  18: 2357618.712 ops/s
Iteration  19: 2310436.454 ops/s
Iteration  20: 2388000.224 ops/s
Iteration  21: 2443607.989 ops/s
Iteration  22: 2339611.710 ops/s
Iteration  23: 2381081.792 ops/s
Iteration  24: 2310630.627 ops/s
Iteration  25: 2463852.794 ops/s
Iteration  26: 2411846.351 ops/s
Iteration  27: 2321564.937 ops/s
Iteration  28: 2402689.367 ops/s
Iteration  29: 2451612.437 ops/s
Iteration  30: 2407139.247 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getKeysAndGetValues":
  2389554.982 ±(99.9%) 44568.251 ops/s [Average]
  (min, avg, max) = (2284539.485, 2389554.982, 2548440.578), stdev = 66707.665
  CI (99.9%): [2344986.731, 2434123.233] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getKeysAndGetValues  thrpt   30  2389554.982 ± 44568.251  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 602241.834 ops/s
# Warmup Iteration   2: 1281897.110 ops/s
# Warmup Iteration   3: 1390900.778 ops/s
# Warmup Iteration   4: 1389156.974 ops/s
# Warmup Iteration   5: 1153573.872 ops/s
# Warmup Iteration   6: 1399819.024 ops/s
# Warmup Iteration   7: 1400439.185 ops/s
# Warmup Iteration   8: 1395993.562 ops/s
# Warmup Iteration   9: 1398914.534 ops/s
# Warmup Iteration  10: 1368820.059 ops/s
# Warmup Iteration  11: 1383081.715 ops/s
# Warmup Iteration  12: 1387265.065 ops/s
# Warmup Iteration  13: 1370584.925 ops/s
# Warmup Iteration  14: 1400232.776 ops/s
# Warmup Iteration  15: 1369357.117 ops/s
# Warmup Iteration  16: 1397881.073 ops/s
# Warmup Iteration  17: 1388120.080 ops/s
# Warmup Iteration  18: 1418446.375 ops/s
# Warmup Iteration  19: 1406500.529 ops/s
# Warmup Iteration  20: 1417922.428 ops/s
# Warmup Iteration  21: 1412616.923 ops/s
# Warmup Iteration  22: 1428324.794 ops/s
# Warmup Iteration  23: 1427239.181 ops/s
# Warmup Iteration  24: 1446520.090 ops/s
# Warmup Iteration  25: 1485438.075 ops/s
# Warmup Iteration  26: 1509041.577 ops/s
# Warmup Iteration  27: 1440652.994 ops/s
# Warmup Iteration  28: 1426546.421 ops/s
# Warmup Iteration  29: 1416707.997 ops/s
# Warmup Iteration  30: 1396547.484 ops/s
Iteration   1: 1366123.479 ops/s
Iteration   2: 1354790.806 ops/s
Iteration   3: 1416144.320 ops/s
Iteration   4: 1411124.322 ops/s
Iteration   5: 1363400.261 ops/s
Iteration   6: 1393181.281 ops/s
Iteration   7: 1428189.496 ops/s
Iteration   8: 1432932.591 ops/s
Iteration   9: 1426053.513 ops/s
Iteration  10: 1392864.492 ops/s
Iteration  11: 1418391.838 ops/s
Iteration  12: 1384092.856 ops/s
Iteration  13: 1390731.376 ops/s
Iteration  14: 1364449.113 ops/s
Iteration  15: 1386450.634 ops/s
Iteration  16: 1368129.217 ops/s
Iteration  17: 1383038.814 ops/s
Iteration  18: 1410307.693 ops/s
Iteration  19: 1419546.218 ops/s
Iteration  20: 1394996.851 ops/s
Iteration  21: 1418089.540 ops/s
Iteration  22: 1443365.695 ops/s
Iteration  23: 1458380.661 ops/s
Iteration  24: 1375081.636 ops/s
Iteration  25: 1376521.229 ops/s
Iteration  26: 1362867.708 ops/s
Iteration  27: 1379420.881 ops/s
Iteration  28: 1377780.809 ops/s
Iteration  29: 1437566.102 ops/s
Iteration  30: 1407405.821 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getLast":
  1398047.308 ±(99.9%) 18380.203 ops/s [Average]
  (min, avg, max) = (1354790.806, 1398047.308, 1458380.661), stdev = 27510.625
  CI (99.9%): [1379667.105, 1416427.512] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getLast  thrpt   30  1398047.308 ± 18380.203  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3065244.233 ops/s
# Warmup Iteration   2: 7847821.534 ops/s
# Warmup Iteration   3: 6307349.447 ops/s
# Warmup Iteration   4: 7954339.554 ops/s
# Warmup Iteration   5: 7807790.760 ops/s
# Warmup Iteration   6: 7784440.803 ops/s
# Warmup Iteration   7: 7916273.629 ops/s
# Warmup Iteration   8: 7892336.318 ops/s
# Warmup Iteration   9: 8390649.700 ops/s
# Warmup Iteration  10: 8075255.452 ops/s
# Warmup Iteration  11: 8438956.976 ops/s
# Warmup Iteration  12: 7912836.834 ops/s
# Warmup Iteration  13: 7962838.868 ops/s
# Warmup Iteration  14: 8067192.889 ops/s
# Warmup Iteration  15: 7924465.418 ops/s
# Warmup Iteration  16: 7829317.507 ops/s
# Warmup Iteration  17: 7731106.910 ops/s
# Warmup Iteration  18: 7962125.294 ops/s
# Warmup Iteration  19: 7754080.270 ops/s
# Warmup Iteration  20: 7917144.100 ops/s
# Warmup Iteration  21: 8048245.653 ops/s
# Warmup Iteration  22: 8119042.850 ops/s
# Warmup Iteration  23: 7980418.039 ops/s
# Warmup Iteration  24: 7790788.345 ops/s
# Warmup Iteration  25: 8013913.264 ops/s
# Warmup Iteration  26: 7826046.559 ops/s
# Warmup Iteration  27: 7723335.985 ops/s
# Warmup Iteration  28: 7843736.301 ops/s
# Warmup Iteration  29: 7860139.026 ops/s
# Warmup Iteration  30: 7887482.985 ops/s
Iteration   1: 7794356.221 ops/s
Iteration   2: 7676078.209 ops/s
Iteration   3: 7631198.648 ops/s
Iteration   4: 7798711.359 ops/s
Iteration   5: 7834906.161 ops/s
Iteration   6: 7780478.133 ops/s
Iteration   7: 7826464.198 ops/s
Iteration   8: 7762720.051 ops/s
Iteration   9: 7767636.683 ops/s
Iteration  10: 7901669.405 ops/s
Iteration  11: 7886536.871 ops/s
Iteration  12: 7913766.146 ops/s
Iteration  13: 7989524.025 ops/s
Iteration  14: 8101216.314 ops/s
Iteration  15: 7718741.481 ops/s
Iteration  16: 7777807.470 ops/s
Iteration  17: 7782254.285 ops/s
Iteration  18: 7614841.770 ops/s
Iteration  19: 7939075.021 ops/s
Iteration  20: 8097588.545 ops/s
Iteration  21: 7841142.254 ops/s
Iteration  22: 7860848.986 ops/s
Iteration  23: 7863239.967 ops/s
Iteration  24: 8036984.693 ops/s
Iteration  25: 7953330.254 ops/s
Iteration  26: 7920606.763 ops/s
Iteration  27: 8011012.645 ops/s
Iteration  28: 7739431.226 ops/s
Iteration  29: 7706346.058 ops/s
Iteration  30: 7968359.325 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getOnly":
  7849895.772 ±(99.9%) 85043.238 ops/s [Average]
  (min, avg, max) = (7614841.770, 7849895.772, 8101216.314), stdev = 127288.725
  CI (99.9%): [7764852.534, 7934939.011] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getOnly  thrpt   30  7849895.772 ± 85043.238  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getOnly_throws_when_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getOnly_throws_when_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 486060.049 ops/s
# Warmup Iteration   2: 614985.106 ops/s
# Warmup Iteration   3: 775426.049 ops/s
# Warmup Iteration   4: 779113.829 ops/s
# Warmup Iteration   5: 793238.126 ops/s
# Warmup Iteration   6: 775116.213 ops/s
# Warmup Iteration   7: 791636.123 ops/s
# Warmup Iteration   8: 642087.530 ops/s
# Warmup Iteration   9: 772980.830 ops/s
# Warmup Iteration  10: 775149.512 ops/s
# Warmup Iteration  11: 769083.649 ops/s
# Warmup Iteration  12: 764402.629 ops/s
# Warmup Iteration  13: 805399.652 ops/s
# Warmup Iteration  14: 778675.994 ops/s
# Warmup Iteration  15: 768277.503 ops/s
# Warmup Iteration  16: 775187.140 ops/s
# Warmup Iteration  17: 816058.808 ops/s
# Warmup Iteration  18: 822762.815 ops/s
# Warmup Iteration  19: 823771.647 ops/s
# Warmup Iteration  20: 847592.801 ops/s
# Warmup Iteration  21: 845633.093 ops/s
# Warmup Iteration  22: 809145.920 ops/s
# Warmup Iteration  23: 838410.536 ops/s
# Warmup Iteration  24: 844326.308 ops/s
# Warmup Iteration  25: 815882.471 ops/s
# Warmup Iteration  26: 840123.813 ops/s
# Warmup Iteration  27: 835623.292 ops/s
# Warmup Iteration  28: 858330.300 ops/s
# Warmup Iteration  29: 847431.150 ops/s
# Warmup Iteration  30: 842769.723 ops/s
Iteration   1: 832434.370 ops/s
Iteration   2: 817303.580 ops/s
Iteration   3: 810953.752 ops/s
Iteration   4: 801577.311 ops/s
Iteration   5: 818990.828 ops/s
Iteration   6: 820249.810 ops/s
Iteration   7: 833456.852 ops/s
Iteration   8: 811916.567 ops/s
Iteration   9: 804501.520 ops/s
Iteration  10: 842278.169 ops/s
Iteration  11: 819780.759 ops/s
Iteration  12: 815812.507 ops/s
Iteration  13: 803823.880 ops/s
Iteration  14: 790704.991 ops/s
Iteration  15: 839364.787 ops/s
Iteration  16: 814947.998 ops/s
Iteration  17: 813923.510 ops/s
Iteration  18: 817247.211 ops/s
Iteration  19: 818943.045 ops/s
Iteration  20: 848407.942 ops/s
Iteration  21: 852199.120 ops/s
Iteration  22: 806610.876 ops/s
Iteration  23: 805893.579 ops/s
Iteration  24: 797499.889 ops/s
Iteration  25: 811783.122 ops/s
Iteration  26: 824919.138 ops/s
Iteration  27: 803233.271 ops/s
Iteration  28: 805809.523 ops/s
Iteration  29: 818670.785 ops/s
Iteration  30: 809554.043 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getOnly_throws_when_empty":
  817093.091 ±(99.9%) 9855.691 ops/s [Average]
  (min, avg, max) = (790704.991, 817093.091, 852199.120), stdev = 14751.535
  CI (99.9%): [807237.400, 826948.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getOnly_throws_when_empty  thrpt   30  817093.091 ± 9855.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getOnly_throws_when_multiple_values$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getOnly_throws_when_multiple_values

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 482760.722 ops/s
# Warmup Iteration   2: 574655.842 ops/s
# Warmup Iteration   3: 787220.513 ops/s
# Warmup Iteration   4: 789537.027 ops/s
# Warmup Iteration   5: 762861.622 ops/s
# Warmup Iteration   6: 793530.143 ops/s
# Warmup Iteration   7: 779990.419 ops/s
# Warmup Iteration   8: 778892.885 ops/s
# Warmup Iteration   9: 670476.856 ops/s
# Warmup Iteration  10: 719025.338 ops/s
# Warmup Iteration  11: 760552.496 ops/s
# Warmup Iteration  12: 758576.636 ops/s
# Warmup Iteration  13: 768882.953 ops/s
# Warmup Iteration  14: 774938.110 ops/s
# Warmup Iteration  15: 789408.029 ops/s
# Warmup Iteration  16: 770763.733 ops/s
# Warmup Iteration  17: 829535.957 ops/s
# Warmup Iteration  18: 800672.116 ops/s
# Warmup Iteration  19: 803711.774 ops/s
# Warmup Iteration  20: 805945.148 ops/s
# Warmup Iteration  21: 804099.732 ops/s
# Warmup Iteration  22: 806165.560 ops/s
# Warmup Iteration  23: 811998.058 ops/s
# Warmup Iteration  24: 803524.108 ops/s
# Warmup Iteration  25: 808939.078 ops/s
# Warmup Iteration  26: 832885.176 ops/s
# Warmup Iteration  27: 829630.835 ops/s
# Warmup Iteration  28: 832653.354 ops/s
# Warmup Iteration  29: 797371.748 ops/s
# Warmup Iteration  30: 788691.324 ops/s
Iteration   1: 824042.688 ops/s
Iteration   2: 875756.487 ops/s
Iteration   3: 856608.116 ops/s
Iteration   4: 798432.717 ops/s
Iteration   5: 798702.456 ops/s
Iteration   6: 874371.008 ops/s
Iteration   7: 871398.609 ops/s
Iteration   8: 793722.030 ops/s
Iteration   9: 809103.305 ops/s
Iteration  10: 847123.760 ops/s
Iteration  11: 825465.368 ops/s
Iteration  12: 793169.271 ops/s
Iteration  13: 812164.452 ops/s
Iteration  14: 806603.313 ops/s
Iteration  15: 813899.001 ops/s
Iteration  16: 780841.299 ops/s
Iteration  17: 831574.232 ops/s
Iteration  18: 817342.637 ops/s
Iteration  19: 809488.944 ops/s
Iteration  20: 802621.098 ops/s
Iteration  21: 796834.168 ops/s
Iteration  22: 835398.774 ops/s
Iteration  23: 831347.535 ops/s
Iteration  24: 845186.526 ops/s
Iteration  25: 809785.203 ops/s
Iteration  26: 798016.484 ops/s
Iteration  27: 792784.312 ops/s
Iteration  28: 791627.979 ops/s
Iteration  29: 802926.119 ops/s
Iteration  30: 820400.894 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getOnly_throws_when_multiple_values":
  818891.293 ±(99.9%) 17354.438 ops/s [Average]
  (min, avg, max) = (780841.299, 818891.293, 875756.487), stdev = 25975.308
  CI (99.9%): [801536.855, 836245.731] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getOnly_throws_when_multiple_values  thrpt   30  818891.293 ± 17354.438  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getOrDefault$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getOrDefault

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2433192.862 ops/s
# Warmup Iteration   2: 4357932.087 ops/s
# Warmup Iteration   3: 4455053.135 ops/s
# Warmup Iteration   4: 3926023.159 ops/s
# Warmup Iteration   5: 4481501.738 ops/s
# Warmup Iteration   6: 4391800.122 ops/s
# Warmup Iteration   7: 4567620.931 ops/s
# Warmup Iteration   8: 4356922.300 ops/s
# Warmup Iteration   9: 4399755.268 ops/s
# Warmup Iteration  10: 4371566.448 ops/s
# Warmup Iteration  11: 4322127.586 ops/s
# Warmup Iteration  12: 4387324.931 ops/s
# Warmup Iteration  13: 4455926.257 ops/s
# Warmup Iteration  14: 4451341.843 ops/s
# Warmup Iteration  15: 4463624.188 ops/s
# Warmup Iteration  16: 4350319.086 ops/s
# Warmup Iteration  17: 4454829.434 ops/s
# Warmup Iteration  18: 4582204.476 ops/s
# Warmup Iteration  19: 4376239.741 ops/s
# Warmup Iteration  20: 4571556.123 ops/s
# Warmup Iteration  21: 4679136.924 ops/s
# Warmup Iteration  22: 4610184.794 ops/s
# Warmup Iteration  23: 4589427.250 ops/s
# Warmup Iteration  24: 4347847.351 ops/s
# Warmup Iteration  25: 4309519.329 ops/s
# Warmup Iteration  26: 4390589.552 ops/s
# Warmup Iteration  27: 4341889.051 ops/s
# Warmup Iteration  28: 4405497.004 ops/s
# Warmup Iteration  29: 4434184.317 ops/s
# Warmup Iteration  30: 4675364.338 ops/s
Iteration   1: 4594589.542 ops/s
Iteration   2: 4389047.039 ops/s
Iteration   3: 4479453.427 ops/s
Iteration   4: 4744402.616 ops/s
Iteration   5: 4647011.065 ops/s
Iteration   6: 4454961.384 ops/s
Iteration   7: 4392261.763 ops/s
Iteration   8: 4670946.656 ops/s
Iteration   9: 4748985.675 ops/s
Iteration  10: 4635541.695 ops/s
Iteration  11: 4602994.627 ops/s
Iteration  12: 4428106.041 ops/s
Iteration  13: 4678521.797 ops/s
Iteration  14: 4378976.767 ops/s
Iteration  15: 4382890.900 ops/s
Iteration  16: 4322905.367 ops/s
Iteration  17: 4396226.211 ops/s
Iteration  18: 4379179.016 ops/s
Iteration  19: 4350027.385 ops/s
Iteration  20: 4338988.341 ops/s
Iteration  21: 4407775.203 ops/s
Iteration  22: 4414370.343 ops/s
Iteration  23: 4421123.742 ops/s
Iteration  24: 4571413.629 ops/s
Iteration  25: 4479527.382 ops/s
Iteration  26: 4406631.694 ops/s
Iteration  27: 4351172.960 ops/s
Iteration  28: 4551776.221 ops/s
Iteration  29: 4553146.935 ops/s
Iteration  30: 4414879.084 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_getOrDefault":
  4486261.150 ±(99.9%) 85320.262 ops/s [Average]
  (min, avg, max) = (4322905.367, 4486261.150, 4748985.675), stdev = 127703.362
  CI (99.9%): [4400940.888, 4571581.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_getOrDefault  thrpt   30  4486261.150 ± 85320.262  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 245264.443 ops/s
# Warmup Iteration   2: 565439.412 ops/s
# Warmup Iteration   3: 582333.493 ops/s
# Warmup Iteration   4: 550463.569 ops/s
# Warmup Iteration   5: 524814.000 ops/s
# Warmup Iteration   6: 590194.792 ops/s
# Warmup Iteration   7: 569752.473 ops/s
# Warmup Iteration   8: 565452.198 ops/s
# Warmup Iteration   9: 565105.979 ops/s
# Warmup Iteration  10: 559531.813 ops/s
# Warmup Iteration  11: 567806.505 ops/s
# Warmup Iteration  12: 593250.414 ops/s
# Warmup Iteration  13: 590423.192 ops/s
# Warmup Iteration  14: 578054.025 ops/s
# Warmup Iteration  15: 565518.010 ops/s
# Warmup Iteration  16: 596746.736 ops/s
# Warmup Iteration  17: 562092.907 ops/s
# Warmup Iteration  18: 568745.406 ops/s
# Warmup Iteration  19: 590745.215 ops/s
# Warmup Iteration  20: 578600.709 ops/s
# Warmup Iteration  21: 601671.079 ops/s
# Warmup Iteration  22: 564852.198 ops/s
# Warmup Iteration  23: 568601.901 ops/s
# Warmup Iteration  24: 590803.190 ops/s
# Warmup Iteration  25: 564052.839 ops/s
# Warmup Iteration  26: 563958.915 ops/s
# Warmup Iteration  27: 581569.273 ops/s
# Warmup Iteration  28: 583356.395 ops/s
# Warmup Iteration  29: 582525.771 ops/s
# Warmup Iteration  30: 576603.720 ops/s
Iteration   1: 588621.397 ops/s
Iteration   2: 582561.943 ops/s
Iteration   3: 568108.988 ops/s
Iteration   4: 574576.040 ops/s
Iteration   5: 591135.334 ops/s
Iteration   6: 590155.932 ops/s
Iteration   7: 585520.176 ops/s
Iteration   8: 575219.614 ops/s
Iteration   9: 591442.132 ops/s
Iteration  10: 600493.628 ops/s
Iteration  11: 561252.645 ops/s
Iteration  12: 582398.145 ops/s
Iteration  13: 566980.040 ops/s
Iteration  14: 590711.346 ops/s
Iteration  15: 569786.197 ops/s
Iteration  16: 572794.733 ops/s
Iteration  17: 577094.909 ops/s
Iteration  18: 557854.957 ops/s
Iteration  19: 562930.151 ops/s
Iteration  20: 568911.250 ops/s
Iteration  21: 563765.506 ops/s
Iteration  22: 564964.188 ops/s
Iteration  23: 568258.157 ops/s
Iteration  24: 573408.853 ops/s
Iteration  25: 566979.300 ops/s
Iteration  26: 553372.705 ops/s
Iteration  27: 615818.783 ops/s
Iteration  28: 559550.285 ops/s
Iteration  29: 575295.395 ops/s
Iteration  30: 561185.026 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupBy":
  575371.592 ±(99.9%) 9430.701 ops/s [Average]
  (min, avg, max) = (553372.705, 575371.592, 615818.783), stdev = 14115.431
  CI (99.9%): [565940.890, 584802.293] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_groupBy  thrpt   30  575371.592 ± 9430.701  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 132727.017 ops/s
# Warmup Iteration   2: 280785.434 ops/s
# Warmup Iteration   3: 325823.391 ops/s
# Warmup Iteration   4: 323056.914 ops/s
# Warmup Iteration   5: 257350.466 ops/s
# Warmup Iteration   6: 321016.173 ops/s
# Warmup Iteration   7: 321601.512 ops/s
# Warmup Iteration   8: 312378.194 ops/s
# Warmup Iteration   9: 316486.883 ops/s
# Warmup Iteration  10: 317958.416 ops/s
# Warmup Iteration  11: 332962.297 ops/s
# Warmup Iteration  12: 320620.039 ops/s
# Warmup Iteration  13: 320777.926 ops/s
# Warmup Iteration  14: 314659.058 ops/s
# Warmup Iteration  15: 315317.560 ops/s
# Warmup Iteration  16: 332204.769 ops/s
# Warmup Iteration  17: 311002.239 ops/s
# Warmup Iteration  18: 322893.761 ops/s
# Warmup Iteration  19: 322360.575 ops/s
# Warmup Iteration  20: 310634.303 ops/s
# Warmup Iteration  21: 306931.276 ops/s
# Warmup Iteration  22: 315519.296 ops/s
# Warmup Iteration  23: 316567.554 ops/s
# Warmup Iteration  24: 320724.296 ops/s
# Warmup Iteration  25: 305713.394 ops/s
# Warmup Iteration  26: 321259.859 ops/s
# Warmup Iteration  27: 324467.188 ops/s
# Warmup Iteration  28: 307792.631 ops/s
# Warmup Iteration  29: 305660.299 ops/s
# Warmup Iteration  30: 312383.159 ops/s
Iteration   1: 318589.780 ops/s
Iteration   2: 309221.378 ops/s
Iteration   3: 304791.056 ops/s
Iteration   4: 311337.429 ops/s
Iteration   5: 308369.318 ops/s
Iteration   6: 313726.710 ops/s
Iteration   7: 310174.825 ops/s
Iteration   8: 307793.745 ops/s
Iteration   9: 310621.818 ops/s
Iteration  10: 308684.318 ops/s
Iteration  11: 310825.004 ops/s
Iteration  12: 310312.438 ops/s
Iteration  13: 311317.552 ops/s
Iteration  14: 309833.346 ops/s
Iteration  15: 308254.593 ops/s
Iteration  16: 312166.530 ops/s
Iteration  17: 309212.797 ops/s
Iteration  18: 306270.036 ops/s
Iteration  19: 306982.799 ops/s
Iteration  20: 308820.569 ops/s
Iteration  21: 327927.361 ops/s
Iteration  22: 332937.763 ops/s
Iteration  23: 318483.802 ops/s
Iteration  24: 338168.644 ops/s
Iteration  25: 329119.980 ops/s
Iteration  26: 312459.748 ops/s
Iteration  27: 309404.365 ops/s
Iteration  28: 308480.203 ops/s
Iteration  29: 311716.177 ops/s
Iteration  30: 336257.304 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByEach":
  314075.380 ±(99.9%) 6132.877 ops/s [Average]
  (min, avg, max) = (304791.056, 314075.380, 338168.644), stdev = 9179.403
  CI (99.9%): [307942.502, 320208.257] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_groupByEach  thrpt   30  314075.380 ± 6132.877  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 791233.526 ops/s
# Warmup Iteration   2: 1973702.297 ops/s
# Warmup Iteration   3: 2113729.675 ops/s
# Warmup Iteration   4: 1623071.561 ops/s
# Warmup Iteration   5: 2117406.271 ops/s
# Warmup Iteration   6: 2081434.806 ops/s
# Warmup Iteration   7: 1987640.268 ops/s
# Warmup Iteration   8: 2084811.008 ops/s
# Warmup Iteration   9: 2153799.785 ops/s
# Warmup Iteration  10: 2031471.350 ops/s
# Warmup Iteration  11: 2003081.151 ops/s
# Warmup Iteration  12: 1973925.340 ops/s
# Warmup Iteration  13: 1997743.275 ops/s
# Warmup Iteration  14: 2057264.968 ops/s
# Warmup Iteration  15: 2068646.341 ops/s
# Warmup Iteration  16: 2089328.505 ops/s
# Warmup Iteration  17: 2052505.941 ops/s
# Warmup Iteration  18: 2068941.317 ops/s
# Warmup Iteration  19: 2041986.004 ops/s
# Warmup Iteration  20: 2027168.761 ops/s
# Warmup Iteration  21: 1988963.748 ops/s
# Warmup Iteration  22: 2059578.344 ops/s
# Warmup Iteration  23: 1991917.403 ops/s
# Warmup Iteration  24: 2043411.435 ops/s
# Warmup Iteration  25: 2037177.291 ops/s
# Warmup Iteration  26: 2040129.850 ops/s
# Warmup Iteration  27: 2026296.551 ops/s
# Warmup Iteration  28: 2051048.506 ops/s
# Warmup Iteration  29: 2015075.974 ops/s
# Warmup Iteration  30: 1985281.175 ops/s
Iteration   1: 2051101.404 ops/s
Iteration   2: 1967738.153 ops/s
Iteration   3: 2020544.207 ops/s
Iteration   4: 2082351.081 ops/s
Iteration   5: 1985867.543 ops/s
Iteration   6: 2023319.705 ops/s
Iteration   7: 2068035.963 ops/s
Iteration   8: 2023410.190 ops/s
Iteration   9: 2051823.843 ops/s
Iteration  10: 2091672.167 ops/s
Iteration  11: 2023801.008 ops/s
Iteration  12: 2072290.806 ops/s
Iteration  13: 2066557.959 ops/s
Iteration  14: 2056924.518 ops/s
Iteration  15: 2010458.839 ops/s
Iteration  16: 1965997.874 ops/s
Iteration  17: 2037200.153 ops/s
Iteration  18: 2021075.751 ops/s
Iteration  19: 2001252.326 ops/s
Iteration  20: 2007298.928 ops/s
Iteration  21: 2085299.705 ops/s
Iteration  22: 2079088.933 ops/s
Iteration  23: 2084340.733 ops/s
Iteration  24: 2054551.510 ops/s
Iteration  25: 2033947.014 ops/s
Iteration  26: 1988198.142 ops/s
Iteration  27: 1955970.642 ops/s
Iteration  28: 2033416.056 ops/s
Iteration  29: 1978599.340 ops/s
Iteration  30: 1991315.049 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey":
  2030448.318 ±(99.9%) 26366.396 ops/s [Average]
  (min, avg, max) = (1955970.642, 2030448.318, 2091672.167), stdev = 39463.983
  CI (99.9%): [2004081.923, 2056814.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  2030448.318 ± 26366.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1037734.526 ops/s
# Warmup Iteration   2: 2218344.413 ops/s
# Warmup Iteration   3: 2427538.632 ops/s
# Warmup Iteration   4: 2366035.885 ops/s
# Warmup Iteration   5: 1990778.405 ops/s
# Warmup Iteration   6: 2446710.759 ops/s
# Warmup Iteration   7: 2391129.165 ops/s
# Warmup Iteration   8: 2408187.019 ops/s
# Warmup Iteration   9: 2454593.812 ops/s
# Warmup Iteration  10: 2494473.559 ops/s
# Warmup Iteration  11: 2413359.713 ops/s
# Warmup Iteration  12: 2408287.250 ops/s
# Warmup Iteration  13: 2401041.333 ops/s
# Warmup Iteration  14: 2419317.541 ops/s
# Warmup Iteration  15: 2408832.831 ops/s
# Warmup Iteration  16: 2392495.290 ops/s
# Warmup Iteration  17: 2442753.310 ops/s
# Warmup Iteration  18: 2406378.499 ops/s
# Warmup Iteration  19: 2397668.683 ops/s
# Warmup Iteration  20: 2423457.453 ops/s
# Warmup Iteration  21: 2417261.739 ops/s
# Warmup Iteration  22: 2411689.499 ops/s
# Warmup Iteration  23: 2395517.719 ops/s
# Warmup Iteration  24: 2385465.559 ops/s
# Warmup Iteration  25: 2458552.419 ops/s
# Warmup Iteration  26: 2380909.325 ops/s
# Warmup Iteration  27: 2429862.393 ops/s
# Warmup Iteration  28: 2396768.436 ops/s
# Warmup Iteration  29: 2407840.559 ops/s
# Warmup Iteration  30: 2399773.722 ops/s
Iteration   1: 2414450.916 ops/s
Iteration   2: 2503133.353 ops/s
Iteration   3: 2409564.153 ops/s
Iteration   4: 2549550.482 ops/s
Iteration   5: 2484091.576 ops/s
Iteration   6: 2527514.778 ops/s
Iteration   7: 2534692.590 ops/s
Iteration   8: 2460205.578 ops/s
Iteration   9: 2519597.422 ops/s
Iteration  10: 2642412.002 ops/s
Iteration  11: 2566732.676 ops/s
Iteration  12: 2540111.248 ops/s
Iteration  13: 2410565.194 ops/s
Iteration  14: 2505174.041 ops/s
Iteration  15: 2386234.839 ops/s
Iteration  16: 2436957.135 ops/s
Iteration  17: 2409685.604 ops/s
Iteration  18: 2402140.926 ops/s
Iteration  19: 2452293.979 ops/s
Iteration  20: 2431244.509 ops/s
Iteration  21: 2463294.420 ops/s
Iteration  22: 2390887.004 ops/s
Iteration  23: 2486150.881 ops/s
Iteration  24: 2441548.018 ops/s
Iteration  25: 2397706.683 ops/s
Iteration  26: 2490026.424 ops/s
Iteration  27: 2404119.444 ops/s
Iteration  28: 2505271.213 ops/s
Iteration  29: 2408831.255 ops/s
Iteration  30: 2393876.490 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey_target":
  2465602.161 ±(99.9%) 42778.092 ops/s [Average]
  (min, avg, max) = (2386234.839, 2465602.161, 2642412.002), stdev = 64028.239
  CI (99.9%): [2422824.069, 2508380.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  2465602.161 ± 42778.092  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey_target_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey_target_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 415421.855 ops/s
# Warmup Iteration   2: 512974.247 ops/s
# Warmup Iteration   3: 654335.068 ops/s
# Warmup Iteration   4: 648653.416 ops/s
# Warmup Iteration   5: 652430.828 ops/s
# Warmup Iteration   6: 630058.637 ops/s
# Warmup Iteration   7: 635588.659 ops/s
# Warmup Iteration   8: 610793.126 ops/s
# Warmup Iteration   9: 523127.866 ops/s
# Warmup Iteration  10: 611849.924 ops/s
# Warmup Iteration  11: 645187.363 ops/s
# Warmup Iteration  12: 619881.609 ops/s
# Warmup Iteration  13: 606855.305 ops/s
# Warmup Iteration  14: 598627.771 ops/s
# Warmup Iteration  15: 605784.981 ops/s
# Warmup Iteration  16: 598878.673 ops/s
# Warmup Iteration  17: 628380.190 ops/s
# Warmup Iteration  18: 633258.589 ops/s
# Warmup Iteration  19: 632273.244 ops/s
# Warmup Iteration  20: 635656.918 ops/s
# Warmup Iteration  21: 638644.936 ops/s
# Warmup Iteration  22: 641289.229 ops/s
# Warmup Iteration  23: 629721.260 ops/s
# Warmup Iteration  24: 628176.018 ops/s
# Warmup Iteration  25: 626831.264 ops/s
# Warmup Iteration  26: 624525.782 ops/s
# Warmup Iteration  27: 634142.157 ops/s
# Warmup Iteration  28: 632961.388 ops/s
# Warmup Iteration  29: 631372.221 ops/s
# Warmup Iteration  30: 628752.987 ops/s
Iteration   1: 632130.728 ops/s
Iteration   2: 628639.820 ops/s
Iteration   3: 633069.384 ops/s
Iteration   4: 631249.718 ops/s
Iteration   5: 626258.277 ops/s
Iteration   6: 630807.308 ops/s
Iteration   7: 625343.135 ops/s
Iteration   8: 636562.524 ops/s
Iteration   9: 620000.983 ops/s
Iteration  10: 629956.679 ops/s
Iteration  11: 652026.595 ops/s
Iteration  12: 631047.000 ops/s
Iteration  13: 626389.967 ops/s
Iteration  14: 635916.592 ops/s
Iteration  15: 630362.631 ops/s
Iteration  16: 616284.801 ops/s
Iteration  17: 630014.115 ops/s
Iteration  18: 645926.659 ops/s
Iteration  19: 627440.427 ops/s
Iteration  20: 624947.408 ops/s
Iteration  21: 636995.902 ops/s
Iteration  22: 661281.293 ops/s
Iteration  23: 650370.480 ops/s
Iteration  24: 661790.359 ops/s
Iteration  25: 693103.002 ops/s
Iteration  26: 670104.472 ops/s
Iteration  27: 636417.224 ops/s
Iteration  28: 622400.141 ops/s
Iteration  29: 671938.856 ops/s
Iteration  30: 658578.663 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey_target_throws":
  639245.171 ±(99.9%) 12002.200 ops/s [Average]
  (min, avg, max) = (616284.801, 639245.171, 693103.002), stdev = 17964.329
  CI (99.9%): [627242.972, 651247.371] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey_target_throws  thrpt   30  639245.171 ± 12002.200  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 358648.921 ops/s
# Warmup Iteration   2: 369804.129 ops/s
# Warmup Iteration   3: 529962.030 ops/s
# Warmup Iteration   4: 511721.218 ops/s
# Warmup Iteration   5: 505576.589 ops/s
# Warmup Iteration   6: 508338.072 ops/s
# Warmup Iteration   7: 499447.868 ops/s
# Warmup Iteration   8: 495968.532 ops/s
# Warmup Iteration   9: 502393.304 ops/s
# Warmup Iteration  10: 500697.888 ops/s
# Warmup Iteration  11: 427386.063 ops/s
# Warmup Iteration  12: 510569.066 ops/s
# Warmup Iteration  13: 498213.036 ops/s
# Warmup Iteration  14: 503855.926 ops/s
# Warmup Iteration  15: 495181.500 ops/s
# Warmup Iteration  16: 503668.019 ops/s
# Warmup Iteration  17: 516857.995 ops/s
# Warmup Iteration  18: 520674.257 ops/s
# Warmup Iteration  19: 525240.982 ops/s
# Warmup Iteration  20: 527673.655 ops/s
# Warmup Iteration  21: 523925.755 ops/s
# Warmup Iteration  22: 520694.382 ops/s
# Warmup Iteration  23: 516538.878 ops/s
# Warmup Iteration  24: 518720.838 ops/s
# Warmup Iteration  25: 515752.162 ops/s
# Warmup Iteration  26: 536593.858 ops/s
# Warmup Iteration  27: 537308.687 ops/s
# Warmup Iteration  28: 541408.038 ops/s
# Warmup Iteration  29: 541992.954 ops/s
# Warmup Iteration  30: 537203.004 ops/s
Iteration   1: 529414.612 ops/s
Iteration   2: 526287.784 ops/s
Iteration   3: 530449.773 ops/s
Iteration   4: 535850.767 ops/s
Iteration   5: 523509.887 ops/s
Iteration   6: 535629.151 ops/s
Iteration   7: 516493.382 ops/s
Iteration   8: 523468.572 ops/s
Iteration   9: 511553.980 ops/s
Iteration  10: 523696.115 ops/s
Iteration  11: 506979.674 ops/s
Iteration  12: 533849.145 ops/s
Iteration  13: 519560.617 ops/s
Iteration  14: 538141.050 ops/s
Iteration  15: 539247.104 ops/s
Iteration  16: 527184.773 ops/s
Iteration  17: 540725.969 ops/s
Iteration  18: 542532.817 ops/s
Iteration  19: 529967.680 ops/s
Iteration  20: 519906.062 ops/s
Iteration  21: 511509.068 ops/s
Iteration  22: 516398.235 ops/s
Iteration  23: 526527.682 ops/s
Iteration  24: 540585.870 ops/s
Iteration  25: 536009.390 ops/s
Iteration  26: 538665.380 ops/s
Iteration  27: 540411.616 ops/s
Iteration  28: 543024.794 ops/s
Iteration  29: 542267.251 ops/s
Iteration  30: 539825.873 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey_throws":
  529655.802 ±(99.9%) 7016.739 ops/s [Average]
  (min, avg, max) = (506979.674, 529655.802, 543024.794), stdev = 10502.326
  CI (99.9%): [522639.063, 536672.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_groupByUniqueKey_throws  thrpt   30  529655.802 ± 7016.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_ifPresentApply$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_ifPresentApply

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2488872.020 ops/s
# Warmup Iteration   2: 6228325.137 ops/s
# Warmup Iteration   3: 4859118.198 ops/s
# Warmup Iteration   4: 5980033.406 ops/s
# Warmup Iteration   5: 6042728.367 ops/s
# Warmup Iteration   6: 5994332.698 ops/s
# Warmup Iteration   7: 6002958.321 ops/s
# Warmup Iteration   8: 5973322.141 ops/s
# Warmup Iteration   9: 6055839.418 ops/s
# Warmup Iteration  10: 5981091.558 ops/s
# Warmup Iteration  11: 5911889.515 ops/s
# Warmup Iteration  12: 5973109.121 ops/s
# Warmup Iteration  13: 6001607.959 ops/s
# Warmup Iteration  14: 6018418.499 ops/s
# Warmup Iteration  15: 5968432.377 ops/s
# Warmup Iteration  16: 5970174.713 ops/s
# Warmup Iteration  17: 5967121.604 ops/s
# Warmup Iteration  18: 5971291.574 ops/s
# Warmup Iteration  19: 5920497.585 ops/s
# Warmup Iteration  20: 6070294.763 ops/s
# Warmup Iteration  21: 6098639.340 ops/s
# Warmup Iteration  22: 5972482.585 ops/s
# Warmup Iteration  23: 6041335.391 ops/s
# Warmup Iteration  24: 5979893.084 ops/s
# Warmup Iteration  25: 5981110.418 ops/s
# Warmup Iteration  26: 5946714.261 ops/s
# Warmup Iteration  27: 5957184.549 ops/s
# Warmup Iteration  28: 5951430.498 ops/s
# Warmup Iteration  29: 5973676.234 ops/s
# Warmup Iteration  30: 5993751.800 ops/s
Iteration   1: 6020280.884 ops/s
Iteration   2: 6010607.158 ops/s
Iteration   3: 6021230.504 ops/s
Iteration   4: 6430232.893 ops/s
Iteration   5: 6310968.805 ops/s
Iteration   6: 6154405.769 ops/s
Iteration   7: 6322348.416 ops/s
Iteration   8: 6342583.140 ops/s
Iteration   9: 6435436.483 ops/s
Iteration  10: 6220142.731 ops/s
Iteration  11: 6496374.927 ops/s
Iteration  12: 6169950.365 ops/s
Iteration  13: 6032116.779 ops/s
Iteration  14: 6070718.522 ops/s
Iteration  15: 6310239.276 ops/s
Iteration  16: 6201664.105 ops/s
Iteration  17: 5997103.191 ops/s
Iteration  18: 6045203.046 ops/s
Iteration  19: 5932547.102 ops/s
Iteration  20: 6121714.444 ops/s
Iteration  21: 6012412.632 ops/s
Iteration  22: 5857037.307 ops/s
Iteration  23: 6278474.728 ops/s
Iteration  24: 6102862.337 ops/s
Iteration  25: 6039884.410 ops/s
Iteration  26: 6009114.560 ops/s
Iteration  27: 5884826.282 ops/s
Iteration  28: 5999268.868 ops/s
Iteration  29: 5891334.843 ops/s
Iteration  30: 6059731.957 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_ifPresentApply":
  6126027.216 ±(99.9%) 115597.084 ops/s [Average]
  (min, avg, max) = (5857037.307, 6126027.216, 6496374.927), stdev = 173020.287
  CI (99.9%): [6010430.131, 6241624.300] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_ifPresentApply  thrpt   30  6126027.216 ± 115597.084  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1532438.870 ops/s
# Warmup Iteration   2: 3206010.521 ops/s
# Warmup Iteration   3: 3381497.233 ops/s
# Warmup Iteration   4: 3037060.666 ops/s
# Warmup Iteration   5: 3173933.965 ops/s
# Warmup Iteration   6: 3476627.295 ops/s
# Warmup Iteration   7: 3501348.850 ops/s
# Warmup Iteration   8: 3368804.475 ops/s
# Warmup Iteration   9: 3423255.558 ops/s
# Warmup Iteration  10: 3323642.176 ops/s
# Warmup Iteration  11: 3491460.210 ops/s
# Warmup Iteration  12: 3365253.561 ops/s
# Warmup Iteration  13: 3316779.603 ops/s
# Warmup Iteration  14: 3388650.523 ops/s
# Warmup Iteration  15: 3463484.680 ops/s
# Warmup Iteration  16: 3473739.181 ops/s
# Warmup Iteration  17: 3410983.670 ops/s
# Warmup Iteration  18: 3414236.771 ops/s
# Warmup Iteration  19: 3338746.038 ops/s
# Warmup Iteration  20: 3390687.836 ops/s
# Warmup Iteration  21: 3335273.140 ops/s
# Warmup Iteration  22: 3445365.566 ops/s
# Warmup Iteration  23: 3385895.788 ops/s
# Warmup Iteration  24: 3371804.900 ops/s
# Warmup Iteration  25: 3358778.799 ops/s
# Warmup Iteration  26: 3367593.103 ops/s
# Warmup Iteration  27: 3311709.117 ops/s
# Warmup Iteration  28: 3355405.432 ops/s
# Warmup Iteration  29: 3377759.269 ops/s
# Warmup Iteration  30: 3429170.873 ops/s
Iteration   1: 3314279.264 ops/s
Iteration   2: 3298687.310 ops/s
Iteration   3: 3382169.083 ops/s
Iteration   4: 3329856.176 ops/s
Iteration   5: 3367712.198 ops/s
Iteration   6: 3426772.241 ops/s
Iteration   7: 3627702.422 ops/s
Iteration   8: 3460108.855 ops/s
Iteration   9: 3589214.068 ops/s
Iteration  10: 3615551.635 ops/s
Iteration  11: 3655127.196 ops/s
Iteration  12: 3570516.783 ops/s
Iteration  13: 3565353.771 ops/s
Iteration  14: 3622558.575 ops/s
Iteration  15: 3658534.147 ops/s
Iteration  16: 3695128.090 ops/s
Iteration  17: 3647724.315 ops/s
Iteration  18: 3606585.087 ops/s
Iteration  19: 3633891.869 ops/s
Iteration  20: 3577771.126 ops/s
Iteration  21: 3595504.433 ops/s
Iteration  22: 3585294.747 ops/s
Iteration  23: 3617665.784 ops/s
Iteration  24: 3610977.088 ops/s
Iteration  25: 3635665.268 ops/s
Iteration  26: 3637699.706 ops/s
Iteration  27: 3631285.758 ops/s
Iteration  28: 3637589.445 ops/s
Iteration  29: 3608297.326 ops/s
Iteration  30: 3568456.816 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectInto":
  3559122.686 ±(99.9%) 76101.834 ops/s [Average]
  (min, avg, max) = (3298687.310, 3559122.686, 3695128.090), stdev = 113905.650
  CI (99.9%): [3483020.853, 3635224.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_injectInto  thrpt   30  3559122.686 ± 76101.834  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2470538.937 ops/s
# Warmup Iteration   2: 5174277.586 ops/s
# Warmup Iteration   3: 4333395.203 ops/s
# Warmup Iteration   4: 5168065.267 ops/s
# Warmup Iteration   5: 5073952.905 ops/s
# Warmup Iteration   6: 5145300.042 ops/s
# Warmup Iteration   7: 5132413.462 ops/s
# Warmup Iteration   8: 5139781.601 ops/s
# Warmup Iteration   9: 5052652.309 ops/s
# Warmup Iteration  10: 5002601.667 ops/s
# Warmup Iteration  11: 5118439.234 ops/s
# Warmup Iteration  12: 4792352.013 ops/s
# Warmup Iteration  13: 4765067.791 ops/s
# Warmup Iteration  14: 4752282.458 ops/s
# Warmup Iteration  15: 4816578.045 ops/s
# Warmup Iteration  16: 4780904.173 ops/s
# Warmup Iteration  17: 4807621.913 ops/s
# Warmup Iteration  18: 4721272.532 ops/s
# Warmup Iteration  19: 4889226.080 ops/s
# Warmup Iteration  20: 4940785.834 ops/s
# Warmup Iteration  21: 4764679.427 ops/s
# Warmup Iteration  22: 4998820.766 ops/s
# Warmup Iteration  23: 4867697.921 ops/s
# Warmup Iteration  24: 4748866.586 ops/s
# Warmup Iteration  25: 4998190.960 ops/s
# Warmup Iteration  26: 4785522.202 ops/s
# Warmup Iteration  27: 5014709.316 ops/s
# Warmup Iteration  28: 4918911.758 ops/s
# Warmup Iteration  29: 4794086.571 ops/s
# Warmup Iteration  30: 4788545.552 ops/s
Iteration   1: 4763370.127 ops/s
Iteration   2: 4742822.229 ops/s
Iteration   3: 4816661.664 ops/s
Iteration   4: 4855676.555 ops/s
Iteration   5: 4723306.598 ops/s
Iteration   6: 4793720.854 ops/s
Iteration   7: 4707317.122 ops/s
Iteration   8: 4784886.454 ops/s
Iteration   9: 4748071.323 ops/s
Iteration  10: 4808831.625 ops/s
Iteration  11: 4767611.997 ops/s
Iteration  12: 4886168.025 ops/s
Iteration  13: 4936405.970 ops/s
Iteration  14: 4972193.858 ops/s
Iteration  15: 4850547.577 ops/s
Iteration  16: 4704907.114 ops/s
Iteration  17: 4952655.073 ops/s
Iteration  18: 4712776.902 ops/s
Iteration  19: 4723497.757 ops/s
Iteration  20: 4786139.535 ops/s
Iteration  21: 4769644.180 ops/s
Iteration  22: 4744468.762 ops/s
Iteration  23: 4731212.258 ops/s
Iteration  24: 4879931.554 ops/s
Iteration  25: 5237324.279 ops/s
Iteration  26: 5008714.454 ops/s
Iteration  27: 5194241.227 ops/s
Iteration  28: 5046491.746 ops/s
Iteration  29: 4772041.314 ops/s
Iteration  30: 4753463.847 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoDouble":
  4839170.066 ±(99.9%) 92329.296 ops/s [Average]
  (min, avg, max) = (4704907.114, 4839170.066, 5237324.279), stdev = 138194.154
  CI (99.9%): [4746840.770, 4931499.362] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  4839170.066 ± 92329.296  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1883732.992 ops/s
# Warmup Iteration   2: 4745132.025 ops/s
# Warmup Iteration   3: 4590996.584 ops/s
# Warmup Iteration   4: 3894705.882 ops/s
# Warmup Iteration   5: 4719008.092 ops/s
# Warmup Iteration   6: 4664517.201 ops/s
# Warmup Iteration   7: 4681368.008 ops/s
# Warmup Iteration   8: 4721672.345 ops/s
# Warmup Iteration   9: 4702410.259 ops/s
# Warmup Iteration  10: 4691371.057 ops/s
# Warmup Iteration  11: 4587736.886 ops/s
# Warmup Iteration  12: 4629394.013 ops/s
# Warmup Iteration  13: 4657944.684 ops/s
# Warmup Iteration  14: 4768708.411 ops/s
# Warmup Iteration  15: 4735622.903 ops/s
# Warmup Iteration  16: 5061816.462 ops/s
# Warmup Iteration  17: 4766492.308 ops/s
# Warmup Iteration  18: 4615897.057 ops/s
# Warmup Iteration  19: 4635469.900 ops/s
# Warmup Iteration  20: 4773298.135 ops/s
# Warmup Iteration  21: 4820698.772 ops/s
# Warmup Iteration  22: 4731787.909 ops/s
# Warmup Iteration  23: 4687907.801 ops/s
# Warmup Iteration  24: 4652779.513 ops/s
# Warmup Iteration  25: 4627735.070 ops/s
# Warmup Iteration  26: 4665059.187 ops/s
# Warmup Iteration  27: 4576913.100 ops/s
# Warmup Iteration  28: 4660942.700 ops/s
# Warmup Iteration  29: 4667714.311 ops/s
# Warmup Iteration  30: 4665271.493 ops/s
Iteration   1: 4630829.052 ops/s
Iteration   2: 4869160.634 ops/s
Iteration   3: 4696570.660 ops/s
Iteration   4: 4681739.771 ops/s
Iteration   5: 4840523.114 ops/s
Iteration   6: 4698754.306 ops/s
Iteration   7: 4900970.636 ops/s
Iteration   8: 4632197.306 ops/s
Iteration   9: 4621709.732 ops/s
Iteration  10: 4708465.863 ops/s
Iteration  11: 4626948.424 ops/s
Iteration  12: 4800058.829 ops/s
Iteration  13: 4691079.124 ops/s
Iteration  14: 4899963.322 ops/s
Iteration  15: 4846357.720 ops/s
Iteration  16: 4808534.438 ops/s
Iteration  17: 4672030.410 ops/s
Iteration  18: 4616438.143 ops/s
Iteration  19: 4682855.100 ops/s
Iteration  20: 4649558.733 ops/s
Iteration  21: 4604249.532 ops/s
Iteration  22: 4722807.338 ops/s
Iteration  23: 4615911.452 ops/s
Iteration  24: 4660745.800 ops/s
Iteration  25: 4697874.550 ops/s
Iteration  26: 4643499.923 ops/s
Iteration  27: 4704056.367 ops/s
Iteration  28: 4645052.471 ops/s
Iteration  29: 4731032.641 ops/s
Iteration  30: 4601686.883 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoFloat":
  4706722.076 ±(99.9%) 60487.857 ops/s [Average]
  (min, avg, max) = (4601686.883, 4706722.076, 4900970.636), stdev = 90535.383
  CI (99.9%): [4646234.219, 4767209.933] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  4706722.076 ± 60487.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2131751.595 ops/s
# Warmup Iteration   2: 4728844.871 ops/s
# Warmup Iteration   3: 4465029.654 ops/s
# Warmup Iteration   4: 4125461.417 ops/s
# Warmup Iteration   5: 4662630.281 ops/s
# Warmup Iteration   6: 4768873.273 ops/s
# Warmup Iteration   7: 4806556.938 ops/s
# Warmup Iteration   8: 4938456.372 ops/s
# Warmup Iteration   9: 4789319.436 ops/s
# Warmup Iteration  10: 4687967.284 ops/s
# Warmup Iteration  11: 4790274.870 ops/s
# Warmup Iteration  12: 5091901.036 ops/s
# Warmup Iteration  13: 5092074.147 ops/s
# Warmup Iteration  14: 5103928.515 ops/s
# Warmup Iteration  15: 5132648.205 ops/s
# Warmup Iteration  16: 5147136.419 ops/s
# Warmup Iteration  17: 5121469.300 ops/s
# Warmup Iteration  18: 5125903.216 ops/s
# Warmup Iteration  19: 5116669.416 ops/s
# Warmup Iteration  20: 5113036.878 ops/s
# Warmup Iteration  21: 5073164.746 ops/s
# Warmup Iteration  22: 5103885.257 ops/s
# Warmup Iteration  23: 5099373.505 ops/s
# Warmup Iteration  24: 5090460.160 ops/s
# Warmup Iteration  25: 5106334.583 ops/s
# Warmup Iteration  26: 5110042.177 ops/s
# Warmup Iteration  27: 5089700.326 ops/s
# Warmup Iteration  28: 5083059.843 ops/s
# Warmup Iteration  29: 5050177.923 ops/s
# Warmup Iteration  30: 5058707.942 ops/s
Iteration   1: 5081797.769 ops/s
Iteration   2: 5020813.849 ops/s
Iteration   3: 5104315.486 ops/s
Iteration   4: 4872876.201 ops/s
Iteration   5: 4959062.096 ops/s
Iteration   6: 5110326.415 ops/s
Iteration   7: 5082988.239 ops/s
Iteration   8: 5079993.796 ops/s
Iteration   9: 4787670.459 ops/s
Iteration  10: 5043708.518 ops/s
Iteration  11: 5094691.037 ops/s
Iteration  12: 4896146.635 ops/s
Iteration  13: 4761725.942 ops/s
Iteration  14: 4831382.182 ops/s
Iteration  15: 4737992.099 ops/s
Iteration  16: 4827779.408 ops/s
Iteration  17: 4850086.831 ops/s
Iteration  18: 4704296.077 ops/s
Iteration  19: 4740323.421 ops/s
Iteration  20: 4704676.248 ops/s
Iteration  21: 4761458.009 ops/s
Iteration  22: 4764871.620 ops/s
Iteration  23: 4684855.068 ops/s
Iteration  24: 4760175.970 ops/s
Iteration  25: 4649413.292 ops/s
Iteration  26: 4678258.617 ops/s
Iteration  27: 4688476.204 ops/s
Iteration  28: 4692325.853 ops/s
Iteration  29: 4752514.341 ops/s
Iteration  30: 4609631.617 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoInt":
  4844487.777 ±(99.9%) 107543.875 ops/s [Average]
  (min, avg, max) = (4609631.617, 4844487.777, 5110326.415), stdev = 160966.621
  CI (99.9%): [4736943.902, 4952031.651] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_injectIntoInt  thrpt   30  4844487.777 ± 107543.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1023188.191 ops/s
# Warmup Iteration   2: 2440506.337 ops/s
# Warmup Iteration   3: 2503189.710 ops/s
# Warmup Iteration   4: 1944860.739 ops/s
# Warmup Iteration   5: 2364599.962 ops/s
# Warmup Iteration   6: 2371375.207 ops/s
# Warmup Iteration   7: 2445046.272 ops/s
# Warmup Iteration   8: 2350885.825 ops/s
# Warmup Iteration   9: 2320127.847 ops/s
# Warmup Iteration  10: 2382025.060 ops/s
# Warmup Iteration  11: 2340729.440 ops/s
# Warmup Iteration  12: 2461558.268 ops/s
# Warmup Iteration  13: 2377650.824 ops/s
# Warmup Iteration  14: 2366492.336 ops/s
# Warmup Iteration  15: 2375680.276 ops/s
# Warmup Iteration  16: 2355794.779 ops/s
# Warmup Iteration  17: 2357302.935 ops/s
# Warmup Iteration  18: 2343058.591 ops/s
# Warmup Iteration  19: 2297464.278 ops/s
# Warmup Iteration  20: 2355141.260 ops/s
# Warmup Iteration  21: 2337006.222 ops/s
# Warmup Iteration  22: 2321305.746 ops/s
# Warmup Iteration  23: 2336690.312 ops/s
# Warmup Iteration  24: 2383252.114 ops/s
# Warmup Iteration  25: 2374011.305 ops/s
# Warmup Iteration  26: 2405320.818 ops/s
# Warmup Iteration  27: 2366525.463 ops/s
# Warmup Iteration  28: 2460504.955 ops/s
# Warmup Iteration  29: 2357306.977 ops/s
# Warmup Iteration  30: 2479353.784 ops/s
Iteration   1: 2450112.134 ops/s
Iteration   2: 2398823.521 ops/s
Iteration   3: 2328869.765 ops/s
Iteration   4: 2333123.439 ops/s
Iteration   5: 2500869.035 ops/s
Iteration   6: 2366738.300 ops/s
Iteration   7: 2295518.333 ops/s
Iteration   8: 2332408.154 ops/s
Iteration   9: 2306613.326 ops/s
Iteration  10: 2311630.232 ops/s
Iteration  11: 2383025.990 ops/s
Iteration  12: 2346167.439 ops/s
Iteration  13: 2332548.540 ops/s
Iteration  14: 2378331.604 ops/s
Iteration  15: 2410206.119 ops/s
Iteration  16: 2380578.311 ops/s
Iteration  17: 2346965.997 ops/s
Iteration  18: 2325495.847 ops/s
Iteration  19: 2355560.795 ops/s
Iteration  20: 2368221.299 ops/s
Iteration  21: 2390090.212 ops/s
Iteration  22: 2363754.507 ops/s
Iteration  23: 2354388.421 ops/s
Iteration  24: 2314689.344 ops/s
Iteration  25: 2361283.815 ops/s
Iteration  26: 2379253.195 ops/s
Iteration  27: 2353714.247 ops/s
Iteration  28: 2335923.083 ops/s
Iteration  29: 2319053.097 ops/s
Iteration  30: 2372359.572 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoKeyValue":
  2359877.256 ±(99.9%) 28654.802 ops/s [Average]
  (min, avg, max) = (2295518.333, 2359877.256, 2500869.035), stdev = 42889.162
  CI (99.9%): [2331222.454, 2388532.058] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_injectIntoKeyValue  thrpt   30  2359877.256 ± 28654.802  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1668395.765 ops/s
# Warmup Iteration   2: 4206487.535 ops/s
# Warmup Iteration   3: 4134864.173 ops/s
# Warmup Iteration   4: 3360291.890 ops/s
# Warmup Iteration   5: 4134952.103 ops/s
# Warmup Iteration   6: 4115936.285 ops/s
# Warmup Iteration   7: 4074752.525 ops/s
# Warmup Iteration   8: 4063251.697 ops/s
# Warmup Iteration   9: 4185287.147 ops/s
# Warmup Iteration  10: 4261255.888 ops/s
# Warmup Iteration  11: 4162319.986 ops/s
# Warmup Iteration  12: 4224146.167 ops/s
# Warmup Iteration  13: 4163728.487 ops/s
# Warmup Iteration  14: 4073485.364 ops/s
# Warmup Iteration  15: 4107021.972 ops/s
# Warmup Iteration  16: 4210699.423 ops/s
# Warmup Iteration  17: 4309187.800 ops/s
# Warmup Iteration  18: 4209139.460 ops/s
# Warmup Iteration  19: 4437229.644 ops/s
# Warmup Iteration  20: 4368345.073 ops/s
# Warmup Iteration  21: 4076392.294 ops/s
# Warmup Iteration  22: 4113295.867 ops/s
# Warmup Iteration  23: 4111221.196 ops/s
# Warmup Iteration  24: 4305459.097 ops/s
# Warmup Iteration  25: 4105804.270 ops/s
# Warmup Iteration  26: 4124648.273 ops/s
# Warmup Iteration  27: 4187282.093 ops/s
# Warmup Iteration  28: 4229935.219 ops/s
# Warmup Iteration  29: 4254777.315 ops/s
# Warmup Iteration  30: 4321884.039 ops/s
Iteration   1: 4299339.074 ops/s
Iteration   2: 4133745.212 ops/s
Iteration   3: 4130927.217 ops/s
Iteration   4: 4036445.098 ops/s
Iteration   5: 4106523.196 ops/s
Iteration   6: 4112062.331 ops/s
Iteration   7: 4345243.787 ops/s
Iteration   8: 4337804.769 ops/s
Iteration   9: 4269842.233 ops/s
Iteration  10: 4257613.906 ops/s
Iteration  11: 4417062.596 ops/s
Iteration  12: 4261574.931 ops/s
Iteration  13: 4167855.308 ops/s
Iteration  14: 4267696.585 ops/s
Iteration  15: 4350204.232 ops/s
Iteration  16: 4109742.955 ops/s
Iteration  17: 4041804.763 ops/s
Iteration  18: 4140380.780 ops/s
Iteration  19: 4057349.488 ops/s
Iteration  20: 4073386.631 ops/s
Iteration  21: 4072330.917 ops/s
Iteration  22: 4399496.033 ops/s
Iteration  23: 4412083.307 ops/s
Iteration  24: 4176355.996 ops/s
Iteration  25: 4362072.571 ops/s
Iteration  26: 4359776.002 ops/s
Iteration  27: 4094233.266 ops/s
Iteration  28: 4229051.217 ops/s
Iteration  29: 4261729.480 ops/s
Iteration  30: 4309730.856 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_injectIntoLong":
  4219782.158 ±(99.9%) 81572.380 ops/s [Average]
  (min, avg, max) = (4036445.098, 4219782.158, 4417062.596), stdev = 122093.707
  CI (99.9%): [4138209.778, 4301354.538] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_injectIntoLong  thrpt   30  4219782.158 ± 81572.380  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_into$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_into

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 994191.324 ops/s
# Warmup Iteration   2: 2680798.016 ops/s
# Warmup Iteration   3: 2577836.082 ops/s
# Warmup Iteration   4: 2145380.840 ops/s
# Warmup Iteration   5: 2723604.628 ops/s
# Warmup Iteration   6: 2751844.672 ops/s
# Warmup Iteration   7: 2807776.315 ops/s
# Warmup Iteration   8: 2818311.872 ops/s
# Warmup Iteration   9: 2827644.762 ops/s
# Warmup Iteration  10: 2846671.741 ops/s
# Warmup Iteration  11: 2810200.094 ops/s
# Warmup Iteration  12: 2829127.393 ops/s
# Warmup Iteration  13: 2848090.609 ops/s
# Warmup Iteration  14: 2837056.814 ops/s
# Warmup Iteration  15: 2830362.335 ops/s
# Warmup Iteration  16: 2834412.698 ops/s
# Warmup Iteration  17: 2815699.909 ops/s
# Warmup Iteration  18: 2787599.927 ops/s
# Warmup Iteration  19: 2785894.218 ops/s
# Warmup Iteration  20: 2772986.220 ops/s
# Warmup Iteration  21: 2772941.928 ops/s
# Warmup Iteration  22: 2718494.568 ops/s
# Warmup Iteration  23: 2720309.109 ops/s
# Warmup Iteration  24: 2696332.737 ops/s
# Warmup Iteration  25: 2694242.227 ops/s
# Warmup Iteration  26: 2681605.009 ops/s
# Warmup Iteration  27: 2651749.185 ops/s
# Warmup Iteration  28: 2595174.993 ops/s
# Warmup Iteration  29: 2583596.316 ops/s
# Warmup Iteration  30: 2580933.939 ops/s
Iteration   1: 2645807.349 ops/s
Iteration   2: 2683680.456 ops/s
Iteration   3: 2822297.813 ops/s
Iteration   4: 2824536.848 ops/s
Iteration   5: 2760770.446 ops/s
Iteration   6: 2607425.345 ops/s
Iteration   7: 2584873.250 ops/s
Iteration   8: 2782442.830 ops/s
Iteration   9: 2834549.766 ops/s
Iteration  10: 2755565.031 ops/s
Iteration  11: 2582436.304 ops/s
Iteration  12: 2677785.164 ops/s
Iteration  13: 2831723.551 ops/s
Iteration  14: 2689921.037 ops/s
Iteration  15: 2656040.212 ops/s
Iteration  16: 2721871.575 ops/s
Iteration  17: 2621708.622 ops/s
Iteration  18: 2585536.520 ops/s
Iteration  19: 2595796.182 ops/s
Iteration  20: 2533834.915 ops/s
Iteration  21: 2631397.580 ops/s
Iteration  22: 2648027.644 ops/s
Iteration  23: 2627336.486 ops/s
Iteration  24: 2687951.846 ops/s
Iteration  25: 2561186.748 ops/s
Iteration  26: 2619057.454 ops/s
Iteration  27: 2688152.073 ops/s
Iteration  28: 2699487.093 ops/s
Iteration  29: 2678767.683 ops/s
Iteration  30: 2585819.567 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_into":
  2674192.913 ±(99.9%) 57037.101 ops/s [Average]
  (min, avg, max) = (2533834.915, 2674192.913, 2834549.766), stdev = 85370.454
  CI (99.9%): [2617155.812, 2731230.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_into  thrpt   30  2674192.913 ± 57037.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1519800.027 ops/s
# Warmup Iteration   2: 3384716.458 ops/s
# Warmup Iteration   3: 2636964.763 ops/s
# Warmup Iteration   4: 3203537.216 ops/s
# Warmup Iteration   5: 3221569.462 ops/s
# Warmup Iteration   6: 3213483.326 ops/s
# Warmup Iteration   7: 3180749.090 ops/s
# Warmup Iteration   8: 3263680.918 ops/s
# Warmup Iteration   9: 3446581.466 ops/s
# Warmup Iteration  10: 3294875.948 ops/s
# Warmup Iteration  11: 3241563.644 ops/s
# Warmup Iteration  12: 3421507.653 ops/s
# Warmup Iteration  13: 3476271.143 ops/s
# Warmup Iteration  14: 3418672.734 ops/s
# Warmup Iteration  15: 3294549.801 ops/s
# Warmup Iteration  16: 3262451.033 ops/s
# Warmup Iteration  17: 3275759.785 ops/s
# Warmup Iteration  18: 3378574.874 ops/s
# Warmup Iteration  19: 3377309.507 ops/s
# Warmup Iteration  20: 3209595.130 ops/s
# Warmup Iteration  21: 3149245.707 ops/s
# Warmup Iteration  22: 3295968.209 ops/s
# Warmup Iteration  23: 3299838.065 ops/s
# Warmup Iteration  24: 3339257.562 ops/s
# Warmup Iteration  25: 3244869.160 ops/s
# Warmup Iteration  26: 3259796.157 ops/s
# Warmup Iteration  27: 3274024.826 ops/s
# Warmup Iteration  28: 3176240.989 ops/s
# Warmup Iteration  29: 3246512.253 ops/s
# Warmup Iteration  30: 3196704.734 ops/s
Iteration   1: 3140152.032 ops/s
Iteration   2: 3280617.320 ops/s
Iteration   3: 3126902.546 ops/s
Iteration   4: 3269598.275 ops/s
Iteration   5: 3166766.773 ops/s
Iteration   6: 3206319.738 ops/s
Iteration   7: 3287500.908 ops/s
Iteration   8: 3212366.419 ops/s
Iteration   9: 3218998.859 ops/s
Iteration  10: 3257447.110 ops/s
Iteration  11: 3162196.432 ops/s
Iteration  12: 3204026.920 ops/s
Iteration  13: 3215752.298 ops/s
Iteration  14: 3152600.773 ops/s
Iteration  15: 3209838.410 ops/s
Iteration  16: 3205270.914 ops/s
Iteration  17: 3290844.873 ops/s
Iteration  18: 3315569.558 ops/s
Iteration  19: 3259070.888 ops/s
Iteration  20: 3157482.508 ops/s
Iteration  21: 3149624.753 ops/s
Iteration  22: 3263281.007 ops/s
Iteration  23: 3330287.882 ops/s
Iteration  24: 3289331.928 ops/s
Iteration  25: 3255183.951 ops/s
Iteration  26: 3187226.749 ops/s
Iteration  27: 3336340.642 ops/s
Iteration  28: 3217641.393 ops/s
Iteration  29: 3333050.462 ops/s
Iteration  30: 3156800.864 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_isEmpty":
  3228603.106 ±(99.9%) 41609.864 ops/s [Average]
  (min, avg, max) = (3126902.546, 3228603.106, 3336340.642), stdev = 62279.691
  CI (99.9%): [3186993.242, 3270212.970] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_isEmpty  thrpt   30  3228603.106 ± 41609.864  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 65052.973 ops/s
# Warmup Iteration   2: 73606.794 ops/s
# Warmup Iteration   3: 84355.195 ops/s
# Warmup Iteration   4: 99810.937 ops/s
# Warmup Iteration   5: 96190.904 ops/s
# Warmup Iteration   6: 98719.238 ops/s
# Warmup Iteration   7: 99215.895 ops/s
# Warmup Iteration   8: 99137.728 ops/s
# Warmup Iteration   9: 95982.021 ops/s
# Warmup Iteration  10: 99748.686 ops/s
# Warmup Iteration  11: 97898.523 ops/s
# Warmup Iteration  12: 97154.630 ops/s
# Warmup Iteration  13: 103930.776 ops/s
# Warmup Iteration  14: 103544.401 ops/s
# Warmup Iteration  15: 99220.252 ops/s
# Warmup Iteration  16: 82870.345 ops/s
# Warmup Iteration  17: 103097.288 ops/s
# Warmup Iteration  18: 104564.249 ops/s
# Warmup Iteration  19: 101869.566 ops/s
# Warmup Iteration  20: 101495.048 ops/s
# Warmup Iteration  21: 97275.852 ops/s
# Warmup Iteration  22: 97149.397 ops/s
# Warmup Iteration  23: 97681.949 ops/s
# Warmup Iteration  24: 96667.918 ops/s
# Warmup Iteration  25: 101635.672 ops/s
# Warmup Iteration  26: 98663.808 ops/s
# Warmup Iteration  27: 97044.404 ops/s
# Warmup Iteration  28: 101980.676 ops/s
# Warmup Iteration  29: 97611.953 ops/s
# Warmup Iteration  30: 98593.135 ops/s
Iteration   1: 96996.705 ops/s
Iteration   2: 96511.652 ops/s
Iteration   3: 98353.843 ops/s
Iteration   4: 101411.107 ops/s
Iteration   5: 98526.324 ops/s
Iteration   6: 98222.658 ops/s
Iteration   7: 102871.725 ops/s
Iteration   8: 102670.244 ops/s
Iteration   9: 100960.007 ops/s
Iteration  10: 98067.837 ops/s
Iteration  11: 101801.513 ops/s
Iteration  12: 101237.802 ops/s
Iteration  13: 101179.916 ops/s
Iteration  14: 96995.062 ops/s
Iteration  15: 98797.637 ops/s
Iteration  16: 97724.271 ops/s
Iteration  17: 96590.836 ops/s
Iteration  18: 98000.365 ops/s
Iteration  19: 95866.554 ops/s
Iteration  20: 99166.333 ops/s
Iteration  21: 96196.942 ops/s
Iteration  22: 96363.260 ops/s
Iteration  23: 99425.498 ops/s
Iteration  24: 106157.285 ops/s
Iteration  25: 97727.888 ops/s
Iteration  26: 96499.754 ops/s
Iteration  27: 97881.742 ops/s
Iteration  28: 97582.753 ops/s
Iteration  29: 98598.313 ops/s
Iteration  30: 101247.217 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_iterator":
  98987.768 ±(99.9%) 1631.519 ops/s [Average]
  (min, avg, max) = (95866.554, 98987.768, 106157.285), stdev = 2441.981
  CI (99.9%): [97356.249, 100619.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt      Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_iterator  thrpt   30  98987.768 ± 1631.519  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keyPreservation$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keyPreservation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 98243.462 ops/s
# Warmup Iteration   2: 171516.265 ops/s
# Warmup Iteration   3: 210072.373 ops/s
# Warmup Iteration   4: 208426.851 ops/s
# Warmup Iteration   5: 203754.722 ops/s
# Warmup Iteration   6: 172832.241 ops/s
# Warmup Iteration   7: 202722.125 ops/s
# Warmup Iteration   8: 201890.697 ops/s
# Warmup Iteration   9: 208197.377 ops/s
# Warmup Iteration  10: 205042.561 ops/s
# Warmup Iteration  11: 214036.853 ops/s
# Warmup Iteration  12: 209534.770 ops/s
# Warmup Iteration  13: 205001.806 ops/s
# Warmup Iteration  14: 201165.895 ops/s
# Warmup Iteration  15: 203873.347 ops/s
# Warmup Iteration  16: 204735.333 ops/s
# Warmup Iteration  17: 211949.051 ops/s
# Warmup Iteration  18: 211342.459 ops/s
# Warmup Iteration  19: 203012.322 ops/s
# Warmup Iteration  20: 202434.710 ops/s
# Warmup Iteration  21: 200897.339 ops/s
# Warmup Iteration  22: 201159.104 ops/s
# Warmup Iteration  23: 210141.187 ops/s
# Warmup Iteration  24: 207064.777 ops/s
# Warmup Iteration  25: 204074.768 ops/s
# Warmup Iteration  26: 207994.196 ops/s
# Warmup Iteration  27: 200654.374 ops/s
# Warmup Iteration  28: 199588.695 ops/s
# Warmup Iteration  29: 201749.188 ops/s
# Warmup Iteration  30: 201900.749 ops/s
Iteration   1: 201924.381 ops/s
Iteration   2: 209930.096 ops/s
Iteration   3: 206633.449 ops/s
Iteration   4: 203472.036 ops/s
Iteration   5: 201735.707 ops/s
Iteration   6: 205895.646 ops/s
Iteration   7: 203401.301 ops/s
Iteration   8: 198672.772 ops/s
Iteration   9: 201145.894 ops/s
Iteration  10: 204591.962 ops/s
Iteration  11: 199100.121 ops/s
Iteration  12: 203451.201 ops/s
Iteration  13: 201443.987 ops/s
Iteration  14: 203120.424 ops/s
Iteration  15: 203231.358 ops/s
Iteration  16: 202501.220 ops/s
Iteration  17: 202434.680 ops/s
Iteration  18: 208591.946 ops/s
Iteration  19: 221315.138 ops/s
Iteration  20: 206840.113 ops/s
Iteration  21: 201980.515 ops/s
Iteration  22: 201979.104 ops/s
Iteration  23: 204336.052 ops/s
Iteration  24: 221575.962 ops/s
Iteration  25: 209393.849 ops/s
Iteration  26: 198224.839 ops/s
Iteration  27: 202195.999 ops/s
Iteration  28: 208396.112 ops/s
Iteration  29: 199006.511 ops/s
Iteration  30: 209031.668 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keyPreservation":
  204851.801 ±(99.9%) 3699.595 ops/s [Average]
  (min, avg, max) = (198224.839, 204851.801, 221575.962), stdev = 5537.380
  CI (99.9%): [201152.206, 208551.397] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_keyPreservation  thrpt   30  204851.801 ± 3699.595  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keySetEqualsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keySetEqualsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625529.355 ops/s
# Warmup Iteration   2: 1094468.633 ops/s
# Warmup Iteration   3: 1330514.380 ops/s
# Warmup Iteration   4: 1355553.779 ops/s
# Warmup Iteration   5: 1188329.500 ops/s
# Warmup Iteration   6: 1201263.128 ops/s
# Warmup Iteration   7: 1320657.138 ops/s
# Warmup Iteration   8: 1328350.529 ops/s
# Warmup Iteration   9: 1383019.945 ops/s
# Warmup Iteration  10: 1324424.821 ops/s
# Warmup Iteration  11: 1356160.347 ops/s
# Warmup Iteration  12: 1362281.878 ops/s
# Warmup Iteration  13: 1351934.167 ops/s
# Warmup Iteration  14: 1356792.835 ops/s
# Warmup Iteration  15: 1334928.247 ops/s
# Warmup Iteration  16: 1307142.300 ops/s
# Warmup Iteration  17: 1347831.800 ops/s
# Warmup Iteration  18: 1301230.949 ops/s
# Warmup Iteration  19: 1316219.986 ops/s
# Warmup Iteration  20: 1329050.038 ops/s
# Warmup Iteration  21: 1362481.001 ops/s
# Warmup Iteration  22: 1320325.646 ops/s
# Warmup Iteration  23: 1293002.758 ops/s
# Warmup Iteration  24: 1348493.235 ops/s
# Warmup Iteration  25: 1301120.323 ops/s
# Warmup Iteration  26: 1339594.306 ops/s
# Warmup Iteration  27: 1327092.459 ops/s
# Warmup Iteration  28: 1306218.986 ops/s
# Warmup Iteration  29: 1313097.917 ops/s
# Warmup Iteration  30: 1301103.700 ops/s
Iteration   1: 1313481.955 ops/s
Iteration   2: 1305896.620 ops/s
Iteration   3: 1330699.310 ops/s
Iteration   4: 1328406.852 ops/s
Iteration   5: 1295872.844 ops/s
Iteration   6: 1298024.293 ops/s
Iteration   7: 1285707.169 ops/s
Iteration   8: 1339651.320 ops/s
Iteration   9: 1297503.734 ops/s
Iteration  10: 1354372.183 ops/s
Iteration  11: 1343044.504 ops/s
Iteration  12: 1336707.279 ops/s
Iteration  13: 1305347.450 ops/s
Iteration  14: 1308360.131 ops/s
Iteration  15: 1313414.286 ops/s
Iteration  16: 1291708.043 ops/s
Iteration  17: 1352208.217 ops/s
Iteration  18: 1354524.887 ops/s
Iteration  19: 1349888.560 ops/s
Iteration  20: 1315353.469 ops/s
Iteration  21: 1337865.891 ops/s
Iteration  22: 1342390.213 ops/s
Iteration  23: 1296622.431 ops/s
Iteration  24: 1318904.448 ops/s
Iteration  25: 1301382.594 ops/s
Iteration  26: 1286655.440 ops/s
Iteration  27: 1281327.576 ops/s
Iteration  28: 1302720.133 ops/s
Iteration  29: 1310174.292 ops/s
Iteration  30: 1304975.279 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keySetEqualsAndHashCode":
  1316773.047 ±(99.9%) 14949.989 ops/s [Average]
  (min, avg, max) = (1281327.576, 1316773.047, 1354524.887), stdev = 22376.442
  CI (99.9%): [1301823.057, 1331723.036] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_keySetEqualsAndHashCode  thrpt   30  1316773.047 ± 14949.989  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keySetToArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keySetToArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1038491.732 ops/s
# Warmup Iteration   2: 2205317.274 ops/s
# Warmup Iteration   3: 2302958.692 ops/s
# Warmup Iteration   4: 2363120.257 ops/s
# Warmup Iteration   5: 1875517.600 ops/s
# Warmup Iteration   6: 2307459.087 ops/s
# Warmup Iteration   7: 2332460.075 ops/s
# Warmup Iteration   8: 2379047.401 ops/s
# Warmup Iteration   9: 2356244.345 ops/s
# Warmup Iteration  10: 2309953.167 ops/s
# Warmup Iteration  11: 2412143.961 ops/s
# Warmup Iteration  12: 2307065.133 ops/s
# Warmup Iteration  13: 2330395.570 ops/s
# Warmup Iteration  14: 2300214.466 ops/s
# Warmup Iteration  15: 2273435.533 ops/s
# Warmup Iteration  16: 2314794.591 ops/s
# Warmup Iteration  17: 2308757.652 ops/s
# Warmup Iteration  18: 2312212.142 ops/s
# Warmup Iteration  19: 2373203.133 ops/s
# Warmup Iteration  20: 2300368.717 ops/s
# Warmup Iteration  21: 2308181.883 ops/s
# Warmup Iteration  22: 2300210.923 ops/s
# Warmup Iteration  23: 2327486.805 ops/s
# Warmup Iteration  24: 2316743.189 ops/s
# Warmup Iteration  25: 2309432.209 ops/s
# Warmup Iteration  26: 2304153.416 ops/s
# Warmup Iteration  27: 2320540.189 ops/s
# Warmup Iteration  28: 2312679.267 ops/s
# Warmup Iteration  29: 2274416.631 ops/s
# Warmup Iteration  30: 2317438.879 ops/s
Iteration   1: 2296541.703 ops/s
Iteration   2: 2305186.955 ops/s
Iteration   3: 2310519.047 ops/s
Iteration   4: 2306200.958 ops/s
Iteration   5: 2300902.079 ops/s
Iteration   6: 2404305.376 ops/s
Iteration   7: 2307294.736 ops/s
Iteration   8: 2344877.387 ops/s
Iteration   9: 2292708.160 ops/s
Iteration  10: 2282351.171 ops/s
Iteration  11: 2306065.733 ops/s
Iteration  12: 2402033.846 ops/s
Iteration  13: 2500121.365 ops/s
Iteration  14: 2533369.179 ops/s
Iteration  15: 2533809.797 ops/s
Iteration  16: 2528211.494 ops/s
Iteration  17: 2489105.703 ops/s
Iteration  18: 2309010.901 ops/s
Iteration  19: 2334056.770 ops/s
Iteration  20: 2273435.056 ops/s
Iteration  21: 2279122.484 ops/s
Iteration  22: 2335090.444 ops/s
Iteration  23: 2351715.556 ops/s
Iteration  24: 2426456.335 ops/s
Iteration  25: 2345313.008 ops/s
Iteration  26: 2449119.030 ops/s
Iteration  27: 2356889.906 ops/s
Iteration  28: 2380263.917 ops/s
Iteration  29: 2364934.227 ops/s
Iteration  30: 2447563.299 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keySetToArray":
  2369885.854 ±(99.9%) 55021.975 ops/s [Average]
  (min, avg, max) = (2273435.056, 2369885.854, 2533809.797), stdev = 82354.308
  CI (99.9%): [2314863.879, 2424907.829] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_keySetToArray  thrpt   30  2369885.854 ± 55021.975  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keyValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keyValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 615874.432 ops/s
# Warmup Iteration   2: 1449078.845 ops/s
# Warmup Iteration   3: 1514836.681 ops/s
# Warmup Iteration   4: 1299444.098 ops/s
# Warmup Iteration   5: 1446292.327 ops/s
# Warmup Iteration   6: 1517097.457 ops/s
# Warmup Iteration   7: 1512504.746 ops/s
# Warmup Iteration   8: 1524597.830 ops/s
# Warmup Iteration   9: 1520737.044 ops/s
# Warmup Iteration  10: 1482518.658 ops/s
# Warmup Iteration  11: 1523954.713 ops/s
# Warmup Iteration  12: 1500130.414 ops/s
# Warmup Iteration  13: 1513175.034 ops/s
# Warmup Iteration  14: 1537523.264 ops/s
# Warmup Iteration  15: 1513696.705 ops/s
# Warmup Iteration  16: 1599854.355 ops/s
# Warmup Iteration  17: 1510695.838 ops/s
# Warmup Iteration  18: 1523892.305 ops/s
# Warmup Iteration  19: 1495930.121 ops/s
# Warmup Iteration  20: 1492685.230 ops/s
# Warmup Iteration  21: 1567162.679 ops/s
# Warmup Iteration  22: 1524008.596 ops/s
# Warmup Iteration  23: 1527733.481 ops/s
# Warmup Iteration  24: 1522651.485 ops/s
# Warmup Iteration  25: 1550768.679 ops/s
# Warmup Iteration  26: 1563894.227 ops/s
# Warmup Iteration  27: 1551235.598 ops/s
# Warmup Iteration  28: 1579844.371 ops/s
# Warmup Iteration  29: 1545833.957 ops/s
# Warmup Iteration  30: 1545807.053 ops/s
Iteration   1: 1532629.520 ops/s
Iteration   2: 1532054.759 ops/s
Iteration   3: 1517159.232 ops/s
Iteration   4: 1494660.132 ops/s
Iteration   5: 1503743.180 ops/s
Iteration   6: 1528176.423 ops/s
Iteration   7: 1551209.608 ops/s
Iteration   8: 1539571.189 ops/s
Iteration   9: 1516362.326 ops/s
Iteration  10: 1491432.510 ops/s
Iteration  11: 1520574.607 ops/s
Iteration  12: 1530145.391 ops/s
Iteration  13: 1505102.160 ops/s
Iteration  14: 1537118.490 ops/s
Iteration  15: 1503990.570 ops/s
Iteration  16: 1591336.295 ops/s
Iteration  17: 1521755.703 ops/s
Iteration  18: 1503323.262 ops/s
Iteration  19: 1543538.407 ops/s
Iteration  20: 1524728.734 ops/s
Iteration  21: 1499088.781 ops/s
Iteration  22: 1503597.322 ops/s
Iteration  23: 1514357.431 ops/s
Iteration  24: 1532788.593 ops/s
Iteration  25: 1621455.183 ops/s
Iteration  26: 1637440.311 ops/s
Iteration  27: 1510091.695 ops/s
Iteration  28: 1515386.930 ops/s
Iteration  29: 1544715.053 ops/s
Iteration  30: 1518963.420 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keyValuesView":
  1529549.907 ±(99.9%) 22631.663 ops/s [Average]
  (min, avg, max) = (1491432.510, 1529549.907, 1637440.311), stdev = 33874.011
  CI (99.9%): [1506918.244, 1552181.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_keyValuesView  thrpt   30  1529549.907 ± 22631.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keysAndValues_toString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keysAndValues_toString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 346666.794 ops/s
# Warmup Iteration   2: 737736.272 ops/s
# Warmup Iteration   3: 871352.527 ops/s
# Warmup Iteration   4: 874329.488 ops/s
# Warmup Iteration   5: 721819.561 ops/s
# Warmup Iteration   6: 830324.753 ops/s
# Warmup Iteration   7: 898820.201 ops/s
# Warmup Iteration   8: 880947.952 ops/s
# Warmup Iteration   9: 897521.036 ops/s
# Warmup Iteration  10: 888685.926 ops/s
# Warmup Iteration  11: 887669.474 ops/s
# Warmup Iteration  12: 906201.657 ops/s
# Warmup Iteration  13: 878689.298 ops/s
# Warmup Iteration  14: 894893.279 ops/s
# Warmup Iteration  15: 919905.151 ops/s
# Warmup Iteration  16: 898650.232 ops/s
# Warmup Iteration  17: 843054.857 ops/s
# Warmup Iteration  18: 918743.999 ops/s
# Warmup Iteration  19: 884385.988 ops/s
# Warmup Iteration  20: 862858.990 ops/s
# Warmup Iteration  21: 844873.156 ops/s
# Warmup Iteration  22: 842863.762 ops/s
# Warmup Iteration  23: 861735.977 ops/s
# Warmup Iteration  24: 895808.548 ops/s
# Warmup Iteration  25: 882210.538 ops/s
# Warmup Iteration  26: 919775.391 ops/s
# Warmup Iteration  27: 924042.850 ops/s
# Warmup Iteration  28: 891620.513 ops/s
# Warmup Iteration  29: 832873.215 ops/s
# Warmup Iteration  30: 836750.187 ops/s
Iteration   1: 865202.470 ops/s
Iteration   2: 876721.034 ops/s
Iteration   3: 850292.865 ops/s
Iteration   4: 829120.975 ops/s
Iteration   5: 882680.595 ops/s
Iteration   6: 880817.324 ops/s
Iteration   7: 863701.542 ops/s
Iteration   8: 873334.674 ops/s
Iteration   9: 839304.082 ops/s
Iteration  10: 857553.246 ops/s
Iteration  11: 853474.881 ops/s
Iteration  12: 825595.780 ops/s
Iteration  13: 839964.976 ops/s
Iteration  14: 836049.129 ops/s
Iteration  15: 886276.307 ops/s
Iteration  16: 875659.464 ops/s
Iteration  17: 843353.749 ops/s
Iteration  18: 842304.830 ops/s
Iteration  19: 837848.883 ops/s
Iteration  20: 840115.369 ops/s
Iteration  21: 864803.519 ops/s
Iteration  22: 844388.170 ops/s
Iteration  23: 837832.678 ops/s
Iteration  24: 839847.824 ops/s
Iteration  25: 855566.889 ops/s
Iteration  26: 853455.959 ops/s
Iteration  27: 823409.631 ops/s
Iteration  28: 839755.631 ops/s
Iteration  29: 859794.938 ops/s
Iteration  30: 833333.515 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keysAndValues_toString":
  851718.698 ±(99.9%) 11880.802 ops/s [Average]
  (min, avg, max) = (823409.631, 851718.698, 886276.307), stdev = 17782.627
  CI (99.9%): [839837.895, 863599.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_keysAndValues_toString  thrpt   30  851718.698 ± 11880.802  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keysView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keysView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1197648.354 ops/s
# Warmup Iteration   2: 3093395.282 ops/s
# Warmup Iteration   3: 3174284.340 ops/s
# Warmup Iteration   4: 2712666.649 ops/s
# Warmup Iteration   5: 3411787.908 ops/s
# Warmup Iteration   6: 3220939.449 ops/s
# Warmup Iteration   7: 3345680.943 ops/s
# Warmup Iteration   8: 3313821.056 ops/s
# Warmup Iteration   9: 3452510.410 ops/s
# Warmup Iteration  10: 3283522.520 ops/s
# Warmup Iteration  11: 3304887.755 ops/s
# Warmup Iteration  12: 3437532.154 ops/s
# Warmup Iteration  13: 3421944.944 ops/s
# Warmup Iteration  14: 3392738.987 ops/s
# Warmup Iteration  15: 3226257.914 ops/s
# Warmup Iteration  16: 3222194.717 ops/s
# Warmup Iteration  17: 3284644.574 ops/s
# Warmup Iteration  18: 3227013.011 ops/s
# Warmup Iteration  19: 3184638.483 ops/s
# Warmup Iteration  20: 3119244.010 ops/s
# Warmup Iteration  21: 3142273.824 ops/s
# Warmup Iteration  22: 3149687.539 ops/s
# Warmup Iteration  23: 3176745.254 ops/s
# Warmup Iteration  24: 3132580.126 ops/s
# Warmup Iteration  25: 3090941.986 ops/s
# Warmup Iteration  26: 3200996.943 ops/s
# Warmup Iteration  27: 3150011.754 ops/s
# Warmup Iteration  28: 3227542.694 ops/s
# Warmup Iteration  29: 3155469.413 ops/s
# Warmup Iteration  30: 3170082.007 ops/s
Iteration   1: 3157710.413 ops/s
Iteration   2: 3184492.425 ops/s
Iteration   3: 3253184.576 ops/s
Iteration   4: 3125211.489 ops/s
Iteration   5: 3283036.148 ops/s
Iteration   6: 3448078.737 ops/s
Iteration   7: 3445080.783 ops/s
Iteration   8: 3400451.582 ops/s
Iteration   9: 3262204.936 ops/s
Iteration  10: 3209123.648 ops/s
Iteration  11: 3238577.571 ops/s
Iteration  12: 3160570.875 ops/s
Iteration  13: 3228589.047 ops/s
Iteration  14: 3193628.428 ops/s
Iteration  15: 3171896.561 ops/s
Iteration  16: 3153335.310 ops/s
Iteration  17: 3118052.886 ops/s
Iteration  18: 3173004.326 ops/s
Iteration  19: 3131090.161 ops/s
Iteration  20: 3150165.434 ops/s
Iteration  21: 3287365.435 ops/s
Iteration  22: 3161321.453 ops/s
Iteration  23: 3208765.611 ops/s
Iteration  24: 3185648.740 ops/s
Iteration  25: 3175076.954 ops/s
Iteration  26: 3232422.942 ops/s
Iteration  27: 3240082.649 ops/s
Iteration  28: 3264454.366 ops/s
Iteration  29: 3277707.361 ops/s
Iteration  30: 3133439.942 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_keysView":
  3221792.360 ±(99.9%) 57886.572 ops/s [Average]
  (min, avg, max) = (3118052.886, 3221792.360, 3448078.737), stdev = 86641.902
  CI (99.9%): [3163905.788, 3279678.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_keysView  thrpt   30  3221792.360 ± 57886.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 908160.300 ops/s
# Warmup Iteration   2: 2099734.438 ops/s
# Warmup Iteration   3: 2104294.156 ops/s
# Warmup Iteration   4: 1872472.775 ops/s
# Warmup Iteration   5: 2082476.557 ops/s
# Warmup Iteration   6: 2070122.860 ops/s
# Warmup Iteration   7: 2090641.088 ops/s
# Warmup Iteration   8: 2131479.029 ops/s
# Warmup Iteration   9: 2075575.852 ops/s
# Warmup Iteration  10: 2162034.331 ops/s
# Warmup Iteration  11: 2146145.655 ops/s
# Warmup Iteration  12: 2173114.627 ops/s
# Warmup Iteration  13: 2165472.941 ops/s
# Warmup Iteration  14: 2099088.313 ops/s
# Warmup Iteration  15: 2143741.086 ops/s
# Warmup Iteration  16: 2111451.070 ops/s
# Warmup Iteration  17: 2102814.889 ops/s
# Warmup Iteration  18: 2078585.401 ops/s
# Warmup Iteration  19: 2072269.168 ops/s
# Warmup Iteration  20: 2097428.257 ops/s
# Warmup Iteration  21: 2086923.476 ops/s
# Warmup Iteration  22: 2169019.742 ops/s
# Warmup Iteration  23: 2099155.983 ops/s
# Warmup Iteration  24: 2069953.660 ops/s
# Warmup Iteration  25: 2092819.093 ops/s
# Warmup Iteration  26: 2081662.975 ops/s
# Warmup Iteration  27: 2073229.857 ops/s
# Warmup Iteration  28: 2093913.543 ops/s
# Warmup Iteration  29: 2069111.426 ops/s
# Warmup Iteration  30: 2149896.248 ops/s
Iteration   1: 2098090.731 ops/s
Iteration   2: 2057733.736 ops/s
Iteration   3: 2081640.928 ops/s
Iteration   4: 2201627.044 ops/s
Iteration   5: 2077411.161 ops/s
Iteration   6: 2099133.292 ops/s
Iteration   7: 2076790.636 ops/s
Iteration   8: 2114088.242 ops/s
Iteration   9: 2046448.505 ops/s
Iteration  10: 2066878.240 ops/s
Iteration  11: 2105665.353 ops/s
Iteration  12: 2066447.301 ops/s
Iteration  13: 2180797.497 ops/s
Iteration  14: 2092342.074 ops/s
Iteration  15: 2095909.119 ops/s
Iteration  16: 2114921.276 ops/s
Iteration  17: 2146398.852 ops/s
Iteration  18: 2183484.621 ops/s
Iteration  19: 2082602.608 ops/s
Iteration  20: 2073954.775 ops/s
Iteration  21: 2083962.542 ops/s
Iteration  22: 2055737.845 ops/s
Iteration  23: 2172011.193 ops/s
Iteration  24: 2165041.478 ops/s
Iteration  25: 2163877.315 ops/s
Iteration  26: 2157791.525 ops/s
Iteration  27: 2138853.645 ops/s
Iteration  28: 2182762.851 ops/s
Iteration  29: 2230968.672 ops/s
Iteration  30: 2192729.877 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_makeString":
  2120203.431 ±(99.9%) 34353.797 ops/s [Average]
  (min, avg, max) = (2046448.505, 2120203.431, 2230968.672), stdev = 51419.150
  CI (99.9%): [2085849.634, 2154557.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_makeString  thrpt   30  2120203.431 ± 34353.797  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1635061.441 ops/s
# Warmup Iteration   2: 3991130.260 ops/s
# Warmup Iteration   3: 4209837.660 ops/s
# Warmup Iteration   4: 3286194.401 ops/s
# Warmup Iteration   5: 4047160.143 ops/s
# Warmup Iteration   6: 3902388.541 ops/s
# Warmup Iteration   7: 4074555.697 ops/s
# Warmup Iteration   8: 4002261.820 ops/s
# Warmup Iteration   9: 4094738.335 ops/s
# Warmup Iteration  10: 4116926.509 ops/s
# Warmup Iteration  11: 4251155.967 ops/s
# Warmup Iteration  12: 4184306.835 ops/s
# Warmup Iteration  13: 4001630.776 ops/s
# Warmup Iteration  14: 4051848.197 ops/s
# Warmup Iteration  15: 4202564.047 ops/s
# Warmup Iteration  16: 4143450.194 ops/s
# Warmup Iteration  17: 4109531.426 ops/s
# Warmup Iteration  18: 4129067.302 ops/s
# Warmup Iteration  19: 4053847.534 ops/s
# Warmup Iteration  20: 4036292.836 ops/s
# Warmup Iteration  21: 4117406.911 ops/s
# Warmup Iteration  22: 4051906.993 ops/s
# Warmup Iteration  23: 4016500.350 ops/s
# Warmup Iteration  24: 3965292.238 ops/s
# Warmup Iteration  25: 3970266.503 ops/s
# Warmup Iteration  26: 3989841.638 ops/s
# Warmup Iteration  27: 3922739.604 ops/s
# Warmup Iteration  28: 4095524.555 ops/s
# Warmup Iteration  29: 4032301.600 ops/s
# Warmup Iteration  30: 4086325.629 ops/s
Iteration   1: 4082292.565 ops/s
Iteration   2: 4095541.071 ops/s
Iteration   3: 4009827.520 ops/s
Iteration   4: 4089444.710 ops/s
Iteration   5: 4186648.669 ops/s
Iteration   6: 4352796.348 ops/s
Iteration   7: 4078235.157 ops/s
Iteration   8: 4060070.557 ops/s
Iteration   9: 3964924.182 ops/s
Iteration  10: 3975568.960 ops/s
Iteration  11: 3897908.064 ops/s
Iteration  12: 4142795.930 ops/s
Iteration  13: 4147114.232 ops/s
Iteration  14: 4285349.265 ops/s
Iteration  15: 3941663.881 ops/s
Iteration  16: 4074829.510 ops/s
Iteration  17: 4033598.621 ops/s
Iteration  18: 4269061.758 ops/s
Iteration  19: 4293107.847 ops/s
Iteration  20: 3975771.087 ops/s
Iteration  21: 4267440.514 ops/s
Iteration  22: 4148089.084 ops/s
Iteration  23: 4054748.319 ops/s
Iteration  24: 3917010.127 ops/s
Iteration  25: 4154183.785 ops/s
Iteration  26: 4326431.651 ops/s
Iteration  27: 4286742.267 ops/s
Iteration  28: 4204887.144 ops/s
Iteration  29: 4031072.068 ops/s
Iteration  30: 4151507.351 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_max":
  4116622.075 ±(99.9%) 85193.312 ops/s [Average]
  (min, avg, max) = (3897908.064, 4116622.075, 4352796.348), stdev = 127513.349
  CI (99.9%): [4031428.763, 4201815.387] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_max  thrpt   30  4116622.075 ± 85193.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1730956.048 ops/s
# Warmup Iteration   2: 3860473.792 ops/s
# Warmup Iteration   3: 3152158.402 ops/s
# Warmup Iteration   4: 3784710.396 ops/s
# Warmup Iteration   5: 3832125.297 ops/s
# Warmup Iteration   6: 3865777.526 ops/s
# Warmup Iteration   7: 3813748.376 ops/s
# Warmup Iteration   8: 3836098.921 ops/s
# Warmup Iteration   9: 3861896.659 ops/s
# Warmup Iteration  10: 3842413.745 ops/s
# Warmup Iteration  11: 3925215.141 ops/s
# Warmup Iteration  12: 4182782.258 ops/s
# Warmup Iteration  13: 4154514.970 ops/s
# Warmup Iteration  14: 3897313.978 ops/s
# Warmup Iteration  15: 3850762.018 ops/s
# Warmup Iteration  16: 3874546.399 ops/s
# Warmup Iteration  17: 3785343.946 ops/s
# Warmup Iteration  18: 3920724.079 ops/s
# Warmup Iteration  19: 3978304.672 ops/s
# Warmup Iteration  20: 3812320.408 ops/s
# Warmup Iteration  21: 3861933.239 ops/s
# Warmup Iteration  22: 3869300.833 ops/s
# Warmup Iteration  23: 4014915.358 ops/s
# Warmup Iteration  24: 3860034.070 ops/s
# Warmup Iteration  25: 3805414.001 ops/s
# Warmup Iteration  26: 4014963.288 ops/s
# Warmup Iteration  27: 3941292.152 ops/s
# Warmup Iteration  28: 3878706.133 ops/s
# Warmup Iteration  29: 4037350.435 ops/s
# Warmup Iteration  30: 3945441.368 ops/s
Iteration   1: 3846009.593 ops/s
Iteration   2: 3886194.055 ops/s
Iteration   3: 3914707.982 ops/s
Iteration   4: 3931378.118 ops/s
Iteration   5: 3977433.196 ops/s
Iteration   6: 3971649.844 ops/s
Iteration   7: 3934238.905 ops/s
Iteration   8: 3950822.074 ops/s
Iteration   9: 3961478.279 ops/s
Iteration  10: 3930235.323 ops/s
Iteration  11: 3932858.778 ops/s
Iteration  12: 3897597.696 ops/s
Iteration  13: 3853558.937 ops/s
Iteration  14: 3938115.205 ops/s
Iteration  15: 3926932.411 ops/s
Iteration  16: 3862544.348 ops/s
Iteration  17: 4016082.426 ops/s
Iteration  18: 3841516.050 ops/s
Iteration  19: 3877577.517 ops/s
Iteration  20: 3757163.584 ops/s
Iteration  21: 3847307.340 ops/s
Iteration  22: 3804724.164 ops/s
Iteration  23: 3859584.522 ops/s
Iteration  24: 3806749.736 ops/s
Iteration  25: 3814181.479 ops/s
Iteration  26: 3860142.781 ops/s
Iteration  27: 3993245.449 ops/s
Iteration  28: 3847989.166 ops/s
Iteration  29: 3894894.879 ops/s
Iteration  30: 3791765.016 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_maxBy":
  3890955.962 ±(99.9%) 43036.968 ops/s [Average]
  (min, avg, max) = (3757163.584, 3890955.962, 4016082.426), stdev = 64415.713
  CI (99.9%): [3847918.993, 3933992.930] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_maxBy  thrpt   30  3890955.962 ± 43036.968  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1470546.148 ops/s
# Warmup Iteration   2: 3636105.078 ops/s
# Warmup Iteration   3: 3779784.888 ops/s
# Warmup Iteration   4: 3141736.117 ops/s
# Warmup Iteration   5: 3873349.008 ops/s
# Warmup Iteration   6: 3871758.628 ops/s
# Warmup Iteration   7: 3852322.412 ops/s
# Warmup Iteration   8: 3799887.318 ops/s
# Warmup Iteration   9: 3799507.567 ops/s
# Warmup Iteration  10: 3811244.618 ops/s
# Warmup Iteration  11: 3812427.477 ops/s
# Warmup Iteration  12: 3766136.551 ops/s
# Warmup Iteration  13: 3934279.838 ops/s
# Warmup Iteration  14: 3908271.827 ops/s
# Warmup Iteration  15: 3917141.171 ops/s
# Warmup Iteration  16: 3922492.887 ops/s
# Warmup Iteration  17: 3995127.926 ops/s
# Warmup Iteration  18: 3953185.452 ops/s
# Warmup Iteration  19: 3929421.365 ops/s
# Warmup Iteration  20: 3816901.847 ops/s
# Warmup Iteration  21: 3861818.995 ops/s
# Warmup Iteration  22: 3802377.377 ops/s
# Warmup Iteration  23: 3876978.773 ops/s
# Warmup Iteration  24: 3760488.380 ops/s
# Warmup Iteration  25: 3800012.616 ops/s
# Warmup Iteration  26: 3884795.175 ops/s
# Warmup Iteration  27: 3882997.783 ops/s
# Warmup Iteration  28: 3907315.717 ops/s
# Warmup Iteration  29: 3838662.433 ops/s
# Warmup Iteration  30: 3809264.208 ops/s
Iteration   1: 3816316.146 ops/s
Iteration   2: 3794059.074 ops/s
Iteration   3: 3854457.308 ops/s
Iteration   4: 3842445.721 ops/s
Iteration   5: 3987547.617 ops/s
Iteration   6: 3930268.400 ops/s
Iteration   7: 3879519.804 ops/s
Iteration   8: 3875196.012 ops/s
Iteration   9: 3862493.460 ops/s
Iteration  10: 3959459.759 ops/s
Iteration  11: 3963919.834 ops/s
Iteration  12: 3848572.258 ops/s
Iteration  13: 3788818.140 ops/s
Iteration  14: 3740613.272 ops/s
Iteration  15: 3775542.779 ops/s
Iteration  16: 3845105.166 ops/s
Iteration  17: 3796570.686 ops/s
Iteration  18: 3800914.934 ops/s
Iteration  19: 3798447.152 ops/s
Iteration  20: 3791598.147 ops/s
Iteration  21: 3785169.898 ops/s
Iteration  22: 3749835.491 ops/s
Iteration  23: 3797019.081 ops/s
Iteration  24: 3871148.686 ops/s
Iteration  25: 3959018.339 ops/s
Iteration  26: 3942872.363 ops/s
Iteration  27: 3819525.070 ops/s
Iteration  28: 3780539.515 ops/s
Iteration  29: 3778977.818 ops/s
Iteration  30: 3817822.849 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_min":
  3841793.159 ±(99.9%) 45878.840 ops/s [Average]
  (min, avg, max) = (3740613.272, 3841793.159, 3987547.617), stdev = 68669.293
  CI (99.9%): [3795914.320, 3887671.999] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_min  thrpt   30  3841793.159 ± 45878.840  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1639306.578 ops/s
# Warmup Iteration   2: 3734456.336 ops/s
# Warmup Iteration   3: 3253070.855 ops/s
# Warmup Iteration   4: 3482985.550 ops/s
# Warmup Iteration   5: 3711739.566 ops/s
# Warmup Iteration   6: 3756739.250 ops/s
# Warmup Iteration   7: 3656302.032 ops/s
# Warmup Iteration   8: 3751976.379 ops/s
# Warmup Iteration   9: 3979761.720 ops/s
# Warmup Iteration  10: 3981499.451 ops/s
# Warmup Iteration  11: 3915766.716 ops/s
# Warmup Iteration  12: 3634735.239 ops/s
# Warmup Iteration  13: 3717326.115 ops/s
# Warmup Iteration  14: 3611971.383 ops/s
# Warmup Iteration  15: 3735998.183 ops/s
# Warmup Iteration  16: 3632473.267 ops/s
# Warmup Iteration  17: 3708695.610 ops/s
# Warmup Iteration  18: 3757821.369 ops/s
# Warmup Iteration  19: 3718835.642 ops/s
# Warmup Iteration  20: 3856375.182 ops/s
# Warmup Iteration  21: 3915502.830 ops/s
# Warmup Iteration  22: 3701943.742 ops/s
# Warmup Iteration  23: 3855057.805 ops/s
# Warmup Iteration  24: 3706292.259 ops/s
# Warmup Iteration  25: 3651931.587 ops/s
# Warmup Iteration  26: 3727757.823 ops/s
# Warmup Iteration  27: 3656325.442 ops/s
# Warmup Iteration  28: 3769776.415 ops/s
# Warmup Iteration  29: 3707409.215 ops/s
# Warmup Iteration  30: 3827547.978 ops/s
Iteration   1: 3987628.471 ops/s
Iteration   2: 3895454.396 ops/s
Iteration   3: 3594829.449 ops/s
Iteration   4: 3640090.725 ops/s
Iteration   5: 3627293.371 ops/s
Iteration   6: 3670283.144 ops/s
Iteration   7: 3690150.809 ops/s
Iteration   8: 3777145.813 ops/s
Iteration   9: 3993183.888 ops/s
Iteration  10: 3949515.162 ops/s
Iteration  11: 3977063.114 ops/s
Iteration  12: 3746402.460 ops/s
Iteration  13: 3571732.733 ops/s
Iteration  14: 3749985.436 ops/s
Iteration  15: 3663158.661 ops/s
Iteration  16: 3706227.993 ops/s
Iteration  17: 3737481.661 ops/s
Iteration  18: 3757741.721 ops/s
Iteration  19: 3737064.801 ops/s
Iteration  20: 3770595.020 ops/s
Iteration  21: 3618526.665 ops/s
Iteration  22: 3707106.395 ops/s
Iteration  23: 3602750.351 ops/s
Iteration  24: 3839793.207 ops/s
Iteration  25: 3883045.133 ops/s
Iteration  26: 3744846.005 ops/s
Iteration  27: 3647398.441 ops/s
Iteration  28: 3678156.417 ops/s
Iteration  29: 3609913.726 ops/s
Iteration  30: 3568493.008 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_minBy":
  3738101.939 ±(99.9%) 84390.167 ops/s [Average]
  (min, avg, max) = (3568493.008, 3738101.939, 3993183.888), stdev = 126311.239
  CI (99.9%): [3653711.772, 3822492.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_minBy  thrpt   30  3738101.939 ± 84390.167  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1319934.264 ops/s
# Warmup Iteration   2: 2997630.504 ops/s
# Warmup Iteration   3: 2566425.497 ops/s
# Warmup Iteration   4: 3156485.329 ops/s
# Warmup Iteration   5: 3036882.431 ops/s
# Warmup Iteration   6: 3087064.622 ops/s
# Warmup Iteration   7: 2974712.488 ops/s
# Warmup Iteration   8: 2955880.019 ops/s
# Warmup Iteration   9: 2999425.667 ops/s
# Warmup Iteration  10: 2974538.235 ops/s
# Warmup Iteration  11: 3150889.189 ops/s
# Warmup Iteration  12: 3088918.990 ops/s
# Warmup Iteration  13: 3144568.555 ops/s
# Warmup Iteration  14: 3158718.901 ops/s
# Warmup Iteration  15: 3008241.612 ops/s
# Warmup Iteration  16: 3094627.815 ops/s
# Warmup Iteration  17: 3080824.498 ops/s
# Warmup Iteration  18: 3128844.033 ops/s
# Warmup Iteration  19: 3147162.912 ops/s
# Warmup Iteration  20: 3257462.897 ops/s
# Warmup Iteration  21: 3003270.607 ops/s
# Warmup Iteration  22: 3039906.791 ops/s
# Warmup Iteration  23: 3108731.829 ops/s
# Warmup Iteration  24: 2988003.158 ops/s
# Warmup Iteration  25: 3091530.833 ops/s
# Warmup Iteration  26: 3028878.471 ops/s
# Warmup Iteration  27: 3085203.831 ops/s
# Warmup Iteration  28: 3036344.970 ops/s
# Warmup Iteration  29: 2979200.492 ops/s
# Warmup Iteration  30: 2990487.760 ops/s
Iteration   1: 3037405.367 ops/s
Iteration   2: 2965633.069 ops/s
Iteration   3: 2974930.305 ops/s
Iteration   4: 3031000.321 ops/s
Iteration   5: 2979544.977 ops/s
Iteration   6: 2998958.863 ops/s
Iteration   7: 3145206.747 ops/s
Iteration   8: 3016518.030 ops/s
Iteration   9: 3028653.959 ops/s
Iteration  10: 3144870.447 ops/s
Iteration  11: 3007456.421 ops/s
Iteration  12: 3076128.826 ops/s
Iteration  13: 3002896.017 ops/s
Iteration  14: 2997773.405 ops/s
Iteration  15: 2929324.202 ops/s
Iteration  16: 3090731.355 ops/s
Iteration  17: 3113436.190 ops/s
Iteration  18: 3028383.209 ops/s
Iteration  19: 3037867.163 ops/s
Iteration  20: 3141799.241 ops/s
Iteration  21: 3142153.878 ops/s
Iteration  22: 3082538.588 ops/s
Iteration  23: 3049703.945 ops/s
Iteration  24: 3064332.689 ops/s
Iteration  25: 3046823.217 ops/s
Iteration  26: 3040207.166 ops/s
Iteration  27: 3103384.640 ops/s
Iteration  28: 2993761.003 ops/s
Iteration  29: 2943079.943 ops/s
Iteration  30: 3083000.672 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_newEmpty":
  3043250.128 ±(99.9%) 40055.920 ops/s [Average]
  (min, avg, max) = (2929324.202, 3043250.128, 3145206.747), stdev = 59953.820
  CI (99.9%): [3003194.208, 3083306.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_newEmpty  thrpt   30  3043250.128 ± 40055.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_newMapWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_newMapWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 321213.838 ops/s
# Warmup Iteration   2: 677512.500 ops/s
# Warmup Iteration   3: 791010.076 ops/s
# Warmup Iteration   4: 776300.157 ops/s
# Warmup Iteration   5: 653106.085 ops/s
# Warmup Iteration   6: 787476.419 ops/s
# Warmup Iteration   7: 799250.234 ops/s
# Warmup Iteration   8: 801028.356 ops/s
# Warmup Iteration   9: 795037.846 ops/s
# Warmup Iteration  10: 780608.495 ops/s
# Warmup Iteration  11: 777201.534 ops/s
# Warmup Iteration  12: 791357.689 ops/s
# Warmup Iteration  13: 781766.588 ops/s
# Warmup Iteration  14: 797502.511 ops/s
# Warmup Iteration  15: 780088.552 ops/s
# Warmup Iteration  16: 773729.547 ops/s
# Warmup Iteration  17: 790981.378 ops/s
# Warmup Iteration  18: 784719.543 ops/s
# Warmup Iteration  19: 779369.263 ops/s
# Warmup Iteration  20: 782029.796 ops/s
# Warmup Iteration  21: 767060.543 ops/s
# Warmup Iteration  22: 769137.200 ops/s
# Warmup Iteration  23: 804310.784 ops/s
# Warmup Iteration  24: 785447.994 ops/s
# Warmup Iteration  25: 772021.552 ops/s
# Warmup Iteration  26: 783770.820 ops/s
# Warmup Iteration  27: 782277.993 ops/s
# Warmup Iteration  28: 772180.958 ops/s
# Warmup Iteration  29: 762674.066 ops/s
# Warmup Iteration  30: 759049.421 ops/s
Iteration   1: 806979.484 ops/s
Iteration   2: 778889.447 ops/s
Iteration   3: 823773.107 ops/s
Iteration   4: 815302.764 ops/s
Iteration   5: 823956.982 ops/s
Iteration   6: 803549.141 ops/s
Iteration   7: 811925.950 ops/s
Iteration   8: 848164.334 ops/s
Iteration   9: 849974.772 ops/s
Iteration  10: 835351.777 ops/s
Iteration  11: 844045.289 ops/s
Iteration  12: 822718.767 ops/s
Iteration  13: 839879.437 ops/s
Iteration  14: 844688.576 ops/s
Iteration  15: 845491.451 ops/s
Iteration  16: 843574.277 ops/s
Iteration  17: 844142.338 ops/s
Iteration  18: 837462.980 ops/s
Iteration  19: 820175.307 ops/s
Iteration  20: 831252.556 ops/s
Iteration  21: 825155.805 ops/s
Iteration  22: 839949.573 ops/s
Iteration  23: 839258.263 ops/s
Iteration  24: 837412.978 ops/s
Iteration  25: 836184.062 ops/s
Iteration  26: 834348.334 ops/s
Iteration  27: 836191.207 ops/s
Iteration  28: 839559.549 ops/s
Iteration  29: 835125.846 ops/s
Iteration  30: 833949.186 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_newMapWithWith":
  830947.785 ±(99.9%) 10397.862 ops/s [Average]
  (min, avg, max) = (778889.447, 830947.785, 849974.772), stdev = 15563.031
  CI (99.9%): [820549.923, 841345.647] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_newMapWithWith  thrpt   30  830947.785 ± 10397.862  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_newMapWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_newMapWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 307333.537 ops/s
# Warmup Iteration   2: 596024.463 ops/s
# Warmup Iteration   3: 688940.903 ops/s
# Warmup Iteration   4: 687064.668 ops/s
# Warmup Iteration   5: 584738.601 ops/s
# Warmup Iteration   6: 686511.182 ops/s
# Warmup Iteration   7: 685698.043 ops/s
# Warmup Iteration   8: 680267.870 ops/s
# Warmup Iteration   9: 674932.138 ops/s
# Warmup Iteration  10: 684206.998 ops/s
# Warmup Iteration  11: 660106.095 ops/s
# Warmup Iteration  12: 674603.849 ops/s
# Warmup Iteration  13: 637508.381 ops/s
# Warmup Iteration  14: 629722.549 ops/s
# Warmup Iteration  15: 656449.224 ops/s
# Warmup Iteration  16: 645282.071 ops/s
# Warmup Iteration  17: 650080.011 ops/s
# Warmup Iteration  18: 642012.854 ops/s
# Warmup Iteration  19: 642885.105 ops/s
# Warmup Iteration  20: 624980.859 ops/s
# Warmup Iteration  21: 628276.262 ops/s
# Warmup Iteration  22: 638050.894 ops/s
# Warmup Iteration  23: 632404.451 ops/s
# Warmup Iteration  24: 635140.196 ops/s
# Warmup Iteration  25: 630051.284 ops/s
# Warmup Iteration  26: 634278.238 ops/s
# Warmup Iteration  27: 644367.812 ops/s
# Warmup Iteration  28: 630163.550 ops/s
# Warmup Iteration  29: 629201.606 ops/s
# Warmup Iteration  30: 674487.869 ops/s
Iteration   1: 630239.223 ops/s
Iteration   2: 620667.044 ops/s
Iteration   3: 623456.523 ops/s
Iteration   4: 629147.501 ops/s
Iteration   5: 657798.909 ops/s
Iteration   6: 640085.820 ops/s
Iteration   7: 643800.232 ops/s
Iteration   8: 636204.146 ops/s
Iteration   9: 625277.735 ops/s
Iteration  10: 639532.796 ops/s
Iteration  11: 633674.596 ops/s
Iteration  12: 641415.197 ops/s
Iteration  13: 687408.045 ops/s
Iteration  14: 675487.865 ops/s
Iteration  15: 691129.068 ops/s
Iteration  16: 692950.126 ops/s
Iteration  17: 631851.308 ops/s
Iteration  18: 637706.181 ops/s
Iteration  19: 662857.312 ops/s
Iteration  20: 665926.684 ops/s
Iteration  21: 640443.880 ops/s
Iteration  22: 635914.825 ops/s
Iteration  23: 639258.202 ops/s
Iteration  24: 667803.124 ops/s
Iteration  25: 656905.713 ops/s
Iteration  26: 635996.029 ops/s
Iteration  27: 618286.306 ops/s
Iteration  28: 654178.702 ops/s
Iteration  29: 641848.357 ops/s
Iteration  30: 647124.471 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_newMapWithWithWith":
  646812.531 ±(99.9%) 13637.563 ops/s [Average]
  (min, avg, max) = (618286.306, 646812.531, 692950.126), stdev = 20412.064
  CI (99.9%): [633174.968, 660450.094] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_newMapWithWithWith  thrpt   30  646812.531 ± 13637.563  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_newMapWithWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_newMapWithWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 246913.066 ops/s
# Warmup Iteration   2: 438469.915 ops/s
# Warmup Iteration   3: 513881.460 ops/s
# Warmup Iteration   4: 521679.032 ops/s
# Warmup Iteration   5: 506368.171 ops/s
# Warmup Iteration   6: 421112.468 ops/s
# Warmup Iteration   7: 496035.290 ops/s
# Warmup Iteration   8: 501286.860 ops/s
# Warmup Iteration   9: 489199.654 ops/s
# Warmup Iteration  10: 498338.597 ops/s
# Warmup Iteration  11: 505307.039 ops/s
# Warmup Iteration  12: 513477.747 ops/s
# Warmup Iteration  13: 495674.924 ops/s
# Warmup Iteration  14: 485026.691 ops/s
# Warmup Iteration  15: 508511.360 ops/s
# Warmup Iteration  16: 528185.918 ops/s
# Warmup Iteration  17: 529715.499 ops/s
# Warmup Iteration  18: 503360.887 ops/s
# Warmup Iteration  19: 508220.970 ops/s
# Warmup Iteration  20: 492563.243 ops/s
# Warmup Iteration  21: 489260.489 ops/s
# Warmup Iteration  22: 515749.218 ops/s
# Warmup Iteration  23: 492500.428 ops/s
# Warmup Iteration  24: 501844.607 ops/s
# Warmup Iteration  25: 513406.946 ops/s
# Warmup Iteration  26: 509320.719 ops/s
# Warmup Iteration  27: 492299.545 ops/s
# Warmup Iteration  28: 490384.638 ops/s
# Warmup Iteration  29: 507003.150 ops/s
# Warmup Iteration  30: 505101.505 ops/s
Iteration   1: 503165.705 ops/s
Iteration   2: 504746.084 ops/s
Iteration   3: 511172.220 ops/s
Iteration   4: 490276.194 ops/s
Iteration   5: 492262.679 ops/s
Iteration   6: 506762.631 ops/s
Iteration   7: 490713.491 ops/s
Iteration   8: 488691.506 ops/s
Iteration   9: 495729.439 ops/s
Iteration  10: 485258.008 ops/s
Iteration  11: 498450.571 ops/s
Iteration  12: 482632.560 ops/s
Iteration  13: 507990.485 ops/s
Iteration  14: 509877.393 ops/s
Iteration  15: 495923.759 ops/s
Iteration  16: 513056.173 ops/s
Iteration  17: 487847.283 ops/s
Iteration  18: 500596.246 ops/s
Iteration  19: 504990.882 ops/s
Iteration  20: 490262.700 ops/s
Iteration  21: 491667.139 ops/s
Iteration  22: 502165.039 ops/s
Iteration  23: 483117.201 ops/s
Iteration  24: 511535.833 ops/s
Iteration  25: 491538.639 ops/s
Iteration  26: 512365.526 ops/s
Iteration  27: 504988.310 ops/s
Iteration  28: 505764.196 ops/s
Iteration  29: 504202.665 ops/s
Iteration  30: 506256.075 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_newMapWithWithWithWith":
  499133.554 ±(99.9%) 6248.524 ops/s [Average]
  (min, avg, max) = (482632.560, 499133.554, 513056.173), stdev = 9352.497
  CI (99.9%): [492885.031, 505382.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_newMapWithWithWithWith  thrpt   30  499133.554 ± 6248.524  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1031149.394 ops/s
# Warmup Iteration   2: 2049600.961 ops/s
# Warmup Iteration   3: 2379550.476 ops/s
# Warmup Iteration   4: 2396124.754 ops/s
# Warmup Iteration   5: 1929392.635 ops/s
# Warmup Iteration   6: 2349443.447 ops/s
# Warmup Iteration   7: 2373596.464 ops/s
# Warmup Iteration   8: 2377630.391 ops/s
# Warmup Iteration   9: 2497653.048 ops/s
# Warmup Iteration  10: 2411555.455 ops/s
# Warmup Iteration  11: 2481807.307 ops/s
# Warmup Iteration  12: 2434457.097 ops/s
# Warmup Iteration  13: 2535593.432 ops/s
# Warmup Iteration  14: 2474909.327 ops/s
# Warmup Iteration  15: 2541917.943 ops/s
# Warmup Iteration  16: 2380285.924 ops/s
# Warmup Iteration  17: 2513683.297 ops/s
# Warmup Iteration  18: 2379223.782 ops/s
# Warmup Iteration  19: 2471795.473 ops/s
# Warmup Iteration  20: 2394789.926 ops/s
# Warmup Iteration  21: 2374284.067 ops/s
# Warmup Iteration  22: 2460671.915 ops/s
# Warmup Iteration  23: 2377904.122 ops/s
# Warmup Iteration  24: 2398379.264 ops/s
# Warmup Iteration  25: 2425925.361 ops/s
# Warmup Iteration  26: 2405507.719 ops/s
# Warmup Iteration  27: 2388483.154 ops/s
# Warmup Iteration  28: 2346760.466 ops/s
# Warmup Iteration  29: 2397820.328 ops/s
# Warmup Iteration  30: 2352658.640 ops/s
Iteration   1: 2381539.444 ops/s
Iteration   2: 2385883.727 ops/s
Iteration   3: 2428970.345 ops/s
Iteration   4: 2461961.949 ops/s
Iteration   5: 2589459.157 ops/s
Iteration   6: 2547191.519 ops/s
Iteration   7: 2362879.959 ops/s
Iteration   8: 2491675.636 ops/s
Iteration   9: 2507445.793 ops/s
Iteration  10: 2421459.396 ops/s
Iteration  11: 2373110.328 ops/s
Iteration  12: 2470763.980 ops/s
Iteration  13: 2426031.405 ops/s
Iteration  14: 2479130.299 ops/s
Iteration  15: 2474262.265 ops/s
Iteration  16: 2372469.116 ops/s
Iteration  17: 2366375.959 ops/s
Iteration  18: 2403256.018 ops/s
Iteration  19: 2434224.986 ops/s
Iteration  20: 2383206.231 ops/s
Iteration  21: 2392720.799 ops/s
Iteration  22: 2438422.477 ops/s
Iteration  23: 2501057.654 ops/s
Iteration  24: 2365780.682 ops/s
Iteration  25: 2437722.123 ops/s
Iteration  26: 2332506.235 ops/s
Iteration  27: 2366495.031 ops/s
Iteration  28: 2450203.374 ops/s
Iteration  29: 2343991.040 ops/s
Iteration  30: 2386599.125 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_noneSatisfy":
  2425893.202 ±(99.9%) 41490.657 ops/s [Average]
  (min, avg, max) = (2332506.235, 2425893.202, 2589459.157), stdev = 62101.267
  CI (99.9%): [2384402.545, 2467383.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_noneSatisfy  thrpt   30  2425893.202 ± 41490.657  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2020127.316 ops/s
# Warmup Iteration   2: 4460122.652 ops/s
# Warmup Iteration   3: 4317729.735 ops/s
# Warmup Iteration   4: 3669567.035 ops/s
# Warmup Iteration   5: 4337829.212 ops/s
# Warmup Iteration   6: 4347456.904 ops/s
# Warmup Iteration   7: 4312837.181 ops/s
# Warmup Iteration   8: 4313356.502 ops/s
# Warmup Iteration   9: 4398904.321 ops/s
# Warmup Iteration  10: 4336577.765 ops/s
# Warmup Iteration  11: 4346426.560 ops/s
# Warmup Iteration  12: 4353210.635 ops/s
# Warmup Iteration  13: 4310425.131 ops/s
# Warmup Iteration  14: 4384890.494 ops/s
# Warmup Iteration  15: 4313032.680 ops/s
# Warmup Iteration  16: 4329642.130 ops/s
# Warmup Iteration  17: 4524811.672 ops/s
# Warmup Iteration  18: 4338506.766 ops/s
# Warmup Iteration  19: 4442710.031 ops/s
# Warmup Iteration  20: 4425572.874 ops/s
# Warmup Iteration  21: 4550097.234 ops/s
# Warmup Iteration  22: 4366364.527 ops/s
# Warmup Iteration  23: 4381020.882 ops/s
# Warmup Iteration  24: 4368702.980 ops/s
# Warmup Iteration  25: 4389225.429 ops/s
# Warmup Iteration  26: 4308332.913 ops/s
# Warmup Iteration  27: 4367702.496 ops/s
# Warmup Iteration  28: 4303842.483 ops/s
# Warmup Iteration  29: 4357877.431 ops/s
# Warmup Iteration  30: 4385745.766 ops/s
Iteration   1: 4358732.847 ops/s
Iteration   2: 4507306.450 ops/s
Iteration   3: 4392919.664 ops/s
Iteration   4: 4397714.515 ops/s
Iteration   5: 4357716.567 ops/s
Iteration   6: 4493235.697 ops/s
Iteration   7: 4349669.912 ops/s
Iteration   8: 4423216.247 ops/s
Iteration   9: 4314595.285 ops/s
Iteration  10: 4374074.601 ops/s
Iteration  11: 4345766.923 ops/s
Iteration  12: 4334773.557 ops/s
Iteration  13: 4388976.353 ops/s
Iteration  14: 4273276.338 ops/s
Iteration  15: 4367117.715 ops/s
Iteration  16: 4352802.706 ops/s
Iteration  17: 4430799.195 ops/s
Iteration  18: 4346775.263 ops/s
Iteration  19: 4353814.939 ops/s
Iteration  20: 4451921.482 ops/s
Iteration  21: 4378471.406 ops/s
Iteration  22: 4323880.797 ops/s
Iteration  23: 4332913.809 ops/s
Iteration  24: 4308916.575 ops/s
Iteration  25: 4317585.766 ops/s
Iteration  26: 4406069.679 ops/s
Iteration  27: 4430715.530 ops/s
Iteration  28: 4443566.256 ops/s
Iteration  29: 4303147.965 ops/s
Iteration  30: 4345811.369 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_noneSatisfyWith":
  4373542.847 ±(99.9%) 37246.377 ops/s [Average]
  (min, avg, max) = (4273276.338, 4373542.847, 4507306.450), stdev = 55748.628
  CI (99.9%): [4336296.470, 4410789.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  4373542.847 ± 37246.377  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1397528.877 ops/s
# Warmup Iteration   2: 3209515.260 ops/s
# Warmup Iteration   3: 2585296.473 ops/s
# Warmup Iteration   4: 3189115.951 ops/s
# Warmup Iteration   5: 3135717.420 ops/s
# Warmup Iteration   6: 3167648.617 ops/s
# Warmup Iteration   7: 3176681.004 ops/s
# Warmup Iteration   8: 3105217.719 ops/s
# Warmup Iteration   9: 3153119.788 ops/s
# Warmup Iteration  10: 3170516.451 ops/s
# Warmup Iteration  11: 3105942.467 ops/s
# Warmup Iteration  12: 3150321.871 ops/s
# Warmup Iteration  13: 3163412.287 ops/s
# Warmup Iteration  14: 3182379.190 ops/s
# Warmup Iteration  15: 3214870.864 ops/s
# Warmup Iteration  16: 3179298.950 ops/s
# Warmup Iteration  17: 3158928.874 ops/s
# Warmup Iteration  18: 3160698.892 ops/s
# Warmup Iteration  19: 3212691.487 ops/s
# Warmup Iteration  20: 3290726.424 ops/s
# Warmup Iteration  21: 3217927.523 ops/s
# Warmup Iteration  22: 3141119.665 ops/s
# Warmup Iteration  23: 3151184.380 ops/s
# Warmup Iteration  24: 3222921.760 ops/s
# Warmup Iteration  25: 3366980.530 ops/s
# Warmup Iteration  26: 3395263.723 ops/s
# Warmup Iteration  27: 3148101.632 ops/s
# Warmup Iteration  28: 3151677.928 ops/s
# Warmup Iteration  29: 3166329.798 ops/s
# Warmup Iteration  30: 3183059.721 ops/s
Iteration   1: 3236553.612 ops/s
Iteration   2: 3076162.197 ops/s
Iteration   3: 3171159.150 ops/s
Iteration   4: 3155402.962 ops/s
Iteration   5: 3173852.757 ops/s
Iteration   6: 3140335.651 ops/s
Iteration   7: 3214501.143 ops/s
Iteration   8: 3177987.562 ops/s
Iteration   9: 3201496.731 ops/s
Iteration  10: 3126336.160 ops/s
Iteration  11: 3127692.468 ops/s
Iteration  12: 3254663.044 ops/s
Iteration  13: 3227042.588 ops/s
Iteration  14: 3186972.148 ops/s
Iteration  15: 3199680.486 ops/s
Iteration  16: 3165127.324 ops/s
Iteration  17: 3320546.673 ops/s
Iteration  18: 3296033.925 ops/s
Iteration  19: 3233062.831 ops/s
Iteration  20: 3162585.349 ops/s
Iteration  21: 3212484.719 ops/s
Iteration  22: 3220173.882 ops/s
Iteration  23: 3146699.467 ops/s
Iteration  24: 3200491.457 ops/s
Iteration  25: 3445551.854 ops/s
Iteration  26: 3444581.731 ops/s
Iteration  27: 3297776.920 ops/s
Iteration  28: 3236758.131 ops/s
Iteration  29: 3153084.190 ops/s
Iteration  30: 3178945.325 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_notEmpty":
  3212791.415 ±(99.9%) 55290.270 ops/s [Average]
  (min, avg, max) = (3076162.197, 3212791.415, 3445551.854), stdev = 82755.880
  CI (99.9%): [3157501.144, 3268081.685] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_notEmpty  thrpt   30  3212791.415 ± 55290.270  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_nullCollisionWithCastInEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_nullCollisionWithCastInEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750558.881 ops/s
# Warmup Iteration   2: 1729393.561 ops/s
# Warmup Iteration   3: 1920903.180 ops/s
# Warmup Iteration   4: 1650751.101 ops/s
# Warmup Iteration   5: 1924672.483 ops/s
# Warmup Iteration   6: 1937852.531 ops/s
# Warmup Iteration   7: 1864309.581 ops/s
# Warmup Iteration   8: 1892414.395 ops/s
# Warmup Iteration   9: 1975913.468 ops/s
# Warmup Iteration  10: 1951979.899 ops/s
# Warmup Iteration  11: 1953351.532 ops/s
# Warmup Iteration  12: 1970866.390 ops/s
# Warmup Iteration  13: 1982489.836 ops/s
# Warmup Iteration  14: 1918499.598 ops/s
# Warmup Iteration  15: 1895327.734 ops/s
# Warmup Iteration  16: 1915253.427 ops/s
# Warmup Iteration  17: 1861395.435 ops/s
# Warmup Iteration  18: 1870946.701 ops/s
# Warmup Iteration  19: 1911467.688 ops/s
# Warmup Iteration  20: 1874438.168 ops/s
# Warmup Iteration  21: 1882074.573 ops/s
# Warmup Iteration  22: 1890457.041 ops/s
# Warmup Iteration  23: 1933784.780 ops/s
# Warmup Iteration  24: 1887417.660 ops/s
# Warmup Iteration  25: 1899149.214 ops/s
# Warmup Iteration  26: 1986352.176 ops/s
# Warmup Iteration  27: 1906226.526 ops/s
# Warmup Iteration  28: 1882302.807 ops/s
# Warmup Iteration  29: 1899262.365 ops/s
# Warmup Iteration  30: 1928585.957 ops/s
Iteration   1: 1898633.988 ops/s
Iteration   2: 1885298.699 ops/s
Iteration   3: 1975068.383 ops/s
Iteration   4: 1966982.249 ops/s
Iteration   5: 1968196.465 ops/s
Iteration   6: 1961315.248 ops/s
Iteration   7: 1968041.884 ops/s
Iteration   8: 1884272.061 ops/s
Iteration   9: 2007554.941 ops/s
Iteration  10: 1939899.292 ops/s
Iteration  11: 1952976.268 ops/s
Iteration  12: 1896269.646 ops/s
Iteration  13: 1904078.676 ops/s
Iteration  14: 1895148.881 ops/s
Iteration  15: 1935225.929 ops/s
Iteration  16: 2062064.810 ops/s
Iteration  17: 2062428.018 ops/s
Iteration  18: 1908599.011 ops/s
Iteration  19: 1914226.185 ops/s
Iteration  20: 1886733.764 ops/s
Iteration  21: 1870450.440 ops/s
Iteration  22: 1930897.448 ops/s
Iteration  23: 1903866.095 ops/s
Iteration  24: 1912015.522 ops/s
Iteration  25: 1948169.513 ops/s
Iteration  26: 1887288.111 ops/s
Iteration  27: 1871329.987 ops/s
Iteration  28: 1889039.936 ops/s
Iteration  29: 1898401.065 ops/s
Iteration  30: 1926255.271 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_nullCollisionWithCastInEquals":
  1930357.593 ±(99.9%) 33392.839 ops/s [Average]
  (min, avg, max) = (1870450.440, 1930357.593, 2062428.018), stdev = 49980.833
  CI (99.9%): [1896964.754, 1963750.432] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_nullCollisionWithCastInEquals  thrpt   30  1930357.593 ± 33392.839  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 595039.599 ops/s
# Warmup Iteration   2: 1370523.993 ops/s
# Warmup Iteration   3: 1469112.374 ops/s
# Warmup Iteration   4: 1262436.626 ops/s
# Warmup Iteration   5: 1319731.127 ops/s
# Warmup Iteration   6: 1427853.567 ops/s
# Warmup Iteration   7: 1385771.528 ops/s
# Warmup Iteration   8: 1395362.797 ops/s
# Warmup Iteration   9: 1434062.432 ops/s
# Warmup Iteration  10: 1379014.161 ops/s
# Warmup Iteration  11: 1480288.642 ops/s
# Warmup Iteration  12: 1462948.047 ops/s
# Warmup Iteration  13: 1389768.274 ops/s
# Warmup Iteration  14: 1524455.317 ops/s
# Warmup Iteration  15: 1531445.447 ops/s
# Warmup Iteration  16: 1511242.421 ops/s
# Warmup Iteration  17: 1450343.924 ops/s
# Warmup Iteration  18: 1390294.415 ops/s
# Warmup Iteration  19: 1401194.547 ops/s
# Warmup Iteration  20: 1443962.957 ops/s
# Warmup Iteration  21: 1422514.761 ops/s
# Warmup Iteration  22: 1491984.170 ops/s
# Warmup Iteration  23: 1394928.340 ops/s
# Warmup Iteration  24: 1451770.364 ops/s
# Warmup Iteration  25: 1429186.459 ops/s
# Warmup Iteration  26: 1388781.491 ops/s
# Warmup Iteration  27: 1399225.291 ops/s
# Warmup Iteration  28: 1497294.497 ops/s
# Warmup Iteration  29: 1527563.973 ops/s
# Warmup Iteration  30: 1413066.597 ops/s
Iteration   1: 1478412.299 ops/s
Iteration   2: 1526423.720 ops/s
Iteration   3: 1533144.636 ops/s
Iteration   4: 1535150.717 ops/s
Iteration   5: 1459012.332 ops/s
Iteration   6: 1425514.051 ops/s
Iteration   7: 1468479.317 ops/s
Iteration   8: 1409114.609 ops/s
Iteration   9: 1535092.972 ops/s
Iteration  10: 1529895.205 ops/s
Iteration  11: 1493113.057 ops/s
Iteration  12: 1416452.071 ops/s
Iteration  13: 1420005.242 ops/s
Iteration  14: 1397003.895 ops/s
Iteration  15: 1410274.478 ops/s
Iteration  16: 1425987.288 ops/s
Iteration  17: 1454307.528 ops/s
Iteration  18: 1474677.794 ops/s
Iteration  19: 1532156.158 ops/s
Iteration  20: 1498357.993 ops/s
Iteration  21: 1437793.542 ops/s
Iteration  22: 1383967.850 ops/s
Iteration  23: 1393921.602 ops/s
Iteration  24: 1407300.030 ops/s
Iteration  25: 1392835.689 ops/s
Iteration  26: 1405033.841 ops/s
Iteration  27: 1407396.752 ops/s
Iteration  28: 1438342.135 ops/s
Iteration  29: 1419438.699 ops/s
Iteration  30: 1493999.113 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_parallelStream":
  1453420.154 ±(99.9%) 33960.705 ops/s [Average]
  (min, avg, max) = (1383967.850, 1453420.154, 1535150.717), stdev = 50830.789
  CI (99.9%): [1419459.449, 1487380.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_parallelStream  thrpt   30  1453420.154 ± 33960.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_partitionWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_partitionWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 837463.548 ops/s
# Warmup Iteration   2: 2135272.432 ops/s
# Warmup Iteration   3: 2205575.605 ops/s
# Warmup Iteration   4: 1839186.247 ops/s
# Warmup Iteration   5: 2282996.936 ops/s
# Warmup Iteration   6: 2266132.597 ops/s
# Warmup Iteration   7: 2171367.193 ops/s
# Warmup Iteration   8: 2264620.977 ops/s
# Warmup Iteration   9: 2170213.545 ops/s
# Warmup Iteration  10: 2315066.646 ops/s
# Warmup Iteration  11: 2306439.765 ops/s
# Warmup Iteration  12: 2250217.407 ops/s
# Warmup Iteration  13: 2284709.666 ops/s
# Warmup Iteration  14: 2242188.925 ops/s
# Warmup Iteration  15: 2316762.882 ops/s
# Warmup Iteration  16: 2254044.973 ops/s
# Warmup Iteration  17: 2317093.497 ops/s
# Warmup Iteration  18: 2248651.707 ops/s
# Warmup Iteration  19: 2183228.781 ops/s
# Warmup Iteration  20: 2286419.846 ops/s
# Warmup Iteration  21: 2208948.217 ops/s
# Warmup Iteration  22: 2192312.844 ops/s
# Warmup Iteration  23: 2190099.540 ops/s
# Warmup Iteration  24: 2244560.961 ops/s
# Warmup Iteration  25: 2118843.537 ops/s
# Warmup Iteration  26: 2277836.843 ops/s
# Warmup Iteration  27: 2171343.076 ops/s
# Warmup Iteration  28: 2134854.144 ops/s
# Warmup Iteration  29: 2207414.995 ops/s
# Warmup Iteration  30: 2159271.513 ops/s
Iteration   1: 2254778.735 ops/s
Iteration   2: 2354626.407 ops/s
Iteration   3: 2313721.753 ops/s
Iteration   4: 2163636.857 ops/s
Iteration   5: 2127294.934 ops/s
Iteration   6: 2171157.952 ops/s
Iteration   7: 2134579.331 ops/s
Iteration   8: 2309036.602 ops/s
Iteration   9: 2349153.157 ops/s
Iteration  10: 2351763.505 ops/s
Iteration  11: 2208882.573 ops/s
Iteration  12: 2137706.843 ops/s
Iteration  13: 2339539.549 ops/s
Iteration  14: 2363594.618 ops/s
Iteration  15: 2254327.964 ops/s
Iteration  16: 2176499.889 ops/s
Iteration  17: 2344854.482 ops/s
Iteration  18: 2346946.627 ops/s
Iteration  19: 2320602.181 ops/s
Iteration  20: 2339734.305 ops/s
Iteration  21: 2350812.322 ops/s
Iteration  22: 2359848.383 ops/s
Iteration  23: 2310628.720 ops/s
Iteration  24: 2263503.812 ops/s
Iteration  25: 2109860.805 ops/s
Iteration  26: 2236821.183 ops/s
Iteration  27: 2219594.945 ops/s
Iteration  28: 2258147.651 ops/s
Iteration  29: 2184232.294 ops/s
Iteration  30: 2141436.530 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_partitionWith_value":
  2259910.830 ±(99.9%) 57243.424 ops/s [Average]
  (min, avg, max) = (2109860.805, 2259910.830, 2363594.618), stdev = 85679.269
  CI (99.9%): [2202667.406, 2317154.255] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_partitionWith_value  thrpt   30  2259910.830 ± 57243.424  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_partition_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_partition_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 972840.165 ops/s
# Warmup Iteration   2: 2661856.229 ops/s
# Warmup Iteration   3: 2795927.487 ops/s
# Warmup Iteration   4: 2334438.843 ops/s
# Warmup Iteration   5: 2694080.491 ops/s
# Warmup Iteration   6: 2678740.003 ops/s
# Warmup Iteration   7: 2886532.678 ops/s
# Warmup Iteration   8: 2773734.731 ops/s
# Warmup Iteration   9: 2836940.642 ops/s
# Warmup Iteration  10: 2724424.924 ops/s
# Warmup Iteration  11: 2746855.518 ops/s
# Warmup Iteration  12: 2780692.819 ops/s
# Warmup Iteration  13: 2693082.919 ops/s
# Warmup Iteration  14: 2829621.543 ops/s
# Warmup Iteration  15: 2784418.001 ops/s
# Warmup Iteration  16: 2724272.406 ops/s
# Warmup Iteration  17: 2789399.190 ops/s
# Warmup Iteration  18: 2774569.795 ops/s
# Warmup Iteration  19: 2942874.249 ops/s
# Warmup Iteration  20: 2848083.205 ops/s
# Warmup Iteration  21: 2974825.389 ops/s
# Warmup Iteration  22: 2737344.843 ops/s
# Warmup Iteration  23: 2815467.266 ops/s
# Warmup Iteration  24: 2905554.148 ops/s
# Warmup Iteration  25: 2836113.976 ops/s
# Warmup Iteration  26: 2932346.288 ops/s
# Warmup Iteration  27: 2760370.312 ops/s
# Warmup Iteration  28: 2703726.770 ops/s
# Warmup Iteration  29: 2750904.218 ops/s
# Warmup Iteration  30: 2746576.670 ops/s
Iteration   1: 2696422.632 ops/s
Iteration   2: 2921435.427 ops/s
Iteration   3: 2865105.157 ops/s
Iteration   4: 2723053.705 ops/s
Iteration   5: 2813509.620 ops/s
Iteration   6: 2781208.010 ops/s
Iteration   7: 2740709.504 ops/s
Iteration   8: 2770602.724 ops/s
Iteration   9: 2761164.559 ops/s
Iteration  10: 2729047.126 ops/s
Iteration  11: 2937229.465 ops/s
Iteration  12: 2957337.695 ops/s
Iteration  13: 2972995.709 ops/s
Iteration  14: 2972486.761 ops/s
Iteration  15: 2972588.426 ops/s
Iteration  16: 2963751.727 ops/s
Iteration  17: 2817551.733 ops/s
Iteration  18: 2796185.145 ops/s
Iteration  19: 2802331.827 ops/s
Iteration  20: 2784414.818 ops/s
Iteration  21: 2716904.999 ops/s
Iteration  22: 2707529.094 ops/s
Iteration  23: 2709932.974 ops/s
Iteration  24: 2898340.286 ops/s
Iteration  25: 2700232.823 ops/s
Iteration  26: 2748523.203 ops/s
Iteration  27: 2812344.625 ops/s
Iteration  28: 2864131.126 ops/s
Iteration  29: 2740337.949 ops/s
Iteration  30: 2736516.799 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_partition_value":
  2813797.522 ±(99.9%) 63202.328 ops/s [Average]
  (min, avg, max) = (2696422.632, 2813797.522, 2972995.709), stdev = 94598.276
  CI (99.9%): [2750595.194, 2876999.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_partition_value  thrpt   30  2813797.522 ± 63202.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_put$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_put

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 66621.217 ops/s
# Warmup Iteration   2: 68472.334 ops/s
# Warmup Iteration   3: 89354.759 ops/s
# Warmup Iteration   4: 101072.719 ops/s
# Warmup Iteration   5: 100502.225 ops/s
# Warmup Iteration   6: 99764.696 ops/s
# Warmup Iteration   7: 99971.472 ops/s
# Warmup Iteration   8: 98788.292 ops/s
# Warmup Iteration   9: 94984.129 ops/s
# Warmup Iteration  10: 103366.093 ops/s
# Warmup Iteration  11: 103250.020 ops/s
# Warmup Iteration  12: 100024.053 ops/s
# Warmup Iteration  13: 83095.227 ops/s
# Warmup Iteration  14: 95114.285 ops/s
# Warmup Iteration  15: 94323.387 ops/s
# Warmup Iteration  16: 94340.220 ops/s
# Warmup Iteration  17: 95848.231 ops/s
# Warmup Iteration  18: 96252.657 ops/s
# Warmup Iteration  19: 102375.169 ops/s
# Warmup Iteration  20: 104496.608 ops/s
# Warmup Iteration  21: 100118.744 ops/s
# Warmup Iteration  22: 98136.978 ops/s
# Warmup Iteration  23: 95216.549 ops/s
# Warmup Iteration  24: 104973.861 ops/s
# Warmup Iteration  25: 98942.769 ops/s
# Warmup Iteration  26: 100362.030 ops/s
# Warmup Iteration  27: 94734.049 ops/s
# Warmup Iteration  28: 95854.068 ops/s
# Warmup Iteration  29: 99500.473 ops/s
# Warmup Iteration  30: 95464.463 ops/s
Iteration   1: 95820.055 ops/s
Iteration   2: 97634.121 ops/s
Iteration   3: 94929.583 ops/s
Iteration   4: 100584.205 ops/s
Iteration   5: 96914.516 ops/s
Iteration   6: 95964.987 ops/s
Iteration   7: 97358.299 ops/s
Iteration   8: 101230.173 ops/s
Iteration   9: 95429.834 ops/s
Iteration  10: 94831.786 ops/s
Iteration  11: 96714.746 ops/s
Iteration  12: 95212.393 ops/s
Iteration  13: 98243.112 ops/s
Iteration  14: 96341.939 ops/s
Iteration  15: 98299.127 ops/s
Iteration  16: 94360.352 ops/s
Iteration  17: 96506.690 ops/s
Iteration  18: 96177.042 ops/s
Iteration  19: 102721.968 ops/s
Iteration  20: 104569.117 ops/s
Iteration  21: 95569.272 ops/s
Iteration  22: 96312.385 ops/s
Iteration  23: 95960.156 ops/s
Iteration  24: 95268.853 ops/s
Iteration  25: 95483.936 ops/s
Iteration  26: 94883.171 ops/s
Iteration  27: 97449.293 ops/s
Iteration  28: 98126.260 ops/s
Iteration  29: 94667.680 ops/s
Iteration  30: 93976.839 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_put":
  96918.063 ±(99.9%) 1661.202 ops/s [Average]
  (min, avg, max) = (93976.839, 96918.063, 104569.117), stdev = 2486.409
  CI (99.9%): [95256.861, 98579.265] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt      Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_put  thrpt   30  96918.063 ± 1661.202  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 225051.719 ops/s
# Warmup Iteration   2: 224834.312 ops/s
# Warmup Iteration   3: 339934.091 ops/s
# Warmup Iteration   4: 337581.001 ops/s
# Warmup Iteration   5: 342573.046 ops/s
# Warmup Iteration   6: 366629.461 ops/s
# Warmup Iteration   7: 357980.418 ops/s
# Warmup Iteration   8: 335780.992 ops/s
# Warmup Iteration   9: 337025.289 ops/s
# Warmup Iteration  10: 287187.439 ops/s
# Warmup Iteration  11: 318078.402 ops/s
# Warmup Iteration  12: 335246.690 ops/s
# Warmup Iteration  13: 363005.980 ops/s
# Warmup Iteration  14: 353356.705 ops/s
# Warmup Iteration  15: 331681.466 ops/s
# Warmup Iteration  16: 344835.651 ops/s
# Warmup Iteration  17: 338778.634 ops/s
# Warmup Iteration  18: 332954.060 ops/s
# Warmup Iteration  19: 334584.539 ops/s
# Warmup Iteration  20: 352363.234 ops/s
# Warmup Iteration  21: 347007.734 ops/s
# Warmup Iteration  22: 352908.495 ops/s
# Warmup Iteration  23: 363583.286 ops/s
# Warmup Iteration  24: 345540.920 ops/s
# Warmup Iteration  25: 335070.174 ops/s
# Warmup Iteration  26: 331202.474 ops/s
# Warmup Iteration  27: 336344.188 ops/s
# Warmup Iteration  28: 336110.054 ops/s
# Warmup Iteration  29: 335052.873 ops/s
# Warmup Iteration  30: 339584.950 ops/s
Iteration   1: 338551.744 ops/s
Iteration   2: 345135.709 ops/s
Iteration   3: 348464.813 ops/s
Iteration   4: 333031.933 ops/s
Iteration   5: 334729.261 ops/s
Iteration   6: 331460.340 ops/s
Iteration   7: 333841.984 ops/s
Iteration   8: 336775.351 ops/s
Iteration   9: 337981.909 ops/s
Iteration  10: 335557.638 ops/s
Iteration  11: 333809.228 ops/s
Iteration  12: 337299.431 ops/s
Iteration  13: 339277.844 ops/s
Iteration  14: 334524.036 ops/s
Iteration  15: 338663.851 ops/s
Iteration  16: 336145.065 ops/s
Iteration  17: 335783.470 ops/s
Iteration  18: 333401.956 ops/s
Iteration  19: 332769.179 ops/s
Iteration  20: 332554.451 ops/s
Iteration  21: 330255.713 ops/s
Iteration  22: 335467.283 ops/s
Iteration  23: 332092.107 ops/s
Iteration  24: 335359.914 ops/s
Iteration  25: 343833.311 ops/s
Iteration  26: 331643.715 ops/s
Iteration  27: 341591.456 ops/s
Iteration  28: 342814.998 ops/s
Iteration  29: 331560.368 ops/s
Iteration  30: 329636.423 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAll":
  336133.816 ±(99.9%) 3059.339 ops/s [Average]
  (min, avg, max) = (329636.423, 336133.816, 348464.813), stdev = 4579.076
  CI (99.9%): [333074.477, 339193.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_putAll  thrpt   30  336133.816 ± 3059.339  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 609416.138 ops/s
# Warmup Iteration   2: 1312860.891 ops/s
# Warmup Iteration   3: 1539818.519 ops/s
# Warmup Iteration   4: 1571781.940 ops/s
# Warmup Iteration   5: 1288241.872 ops/s
# Warmup Iteration   6: 1533475.384 ops/s
# Warmup Iteration   7: 1532129.153 ops/s
# Warmup Iteration   8: 1528862.737 ops/s
# Warmup Iteration   9: 1516212.064 ops/s
# Warmup Iteration  10: 1533078.621 ops/s
# Warmup Iteration  11: 1570382.314 ops/s
# Warmup Iteration  12: 1508576.677 ops/s
# Warmup Iteration  13: 1530674.618 ops/s
# Warmup Iteration  14: 1519878.191 ops/s
# Warmup Iteration  15: 1543124.338 ops/s
# Warmup Iteration  16: 1526289.261 ops/s
# Warmup Iteration  17: 1520859.547 ops/s
# Warmup Iteration  18: 1510323.020 ops/s
# Warmup Iteration  19: 1502805.120 ops/s
# Warmup Iteration  20: 1525298.082 ops/s
# Warmup Iteration  21: 1529661.270 ops/s
# Warmup Iteration  22: 1515633.388 ops/s
# Warmup Iteration  23: 1534699.699 ops/s
# Warmup Iteration  24: 1498319.722 ops/s
# Warmup Iteration  25: 1513660.254 ops/s
# Warmup Iteration  26: 1545059.761 ops/s
# Warmup Iteration  27: 1591627.221 ops/s
# Warmup Iteration  28: 1551456.262 ops/s
# Warmup Iteration  29: 1529215.885 ops/s
# Warmup Iteration  30: 1528494.491 ops/s
Iteration   1: 1579186.458 ops/s
Iteration   2: 1519003.387 ops/s
Iteration   3: 1526731.546 ops/s
Iteration   4: 1529034.769 ops/s
Iteration   5: 1497922.446 ops/s
Iteration   6: 1584169.314 ops/s
Iteration   7: 1523731.648 ops/s
Iteration   8: 1527385.365 ops/s
Iteration   9: 1523482.544 ops/s
Iteration  10: 1528226.500 ops/s
Iteration  11: 1519157.565 ops/s
Iteration  12: 1589245.322 ops/s
Iteration  13: 1589585.704 ops/s
Iteration  14: 1611388.596 ops/s
Iteration  15: 1531559.754 ops/s
Iteration  16: 1566687.795 ops/s
Iteration  17: 1522492.619 ops/s
Iteration  18: 1527851.085 ops/s
Iteration  19: 1522465.423 ops/s
Iteration  20: 1508932.491 ops/s
Iteration  21: 1524937.906 ops/s
Iteration  22: 1527159.478 ops/s
Iteration  23: 1529424.406 ops/s
Iteration  24: 1526459.104 ops/s
Iteration  25: 1509028.621 ops/s
Iteration  26: 1563749.013 ops/s
Iteration  27: 1518372.442 ops/s
Iteration  28: 1576668.919 ops/s
Iteration  29: 1514138.352 ops/s
Iteration  30: 1566252.553 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterable":
  1539481.038 ±(99.9%) 19666.118 ops/s [Average]
  (min, avg, max) = (1497922.446, 1539481.038, 1611388.596), stdev = 29435.322
  CI (99.9%): [1519814.920, 1559147.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterable  thrpt   30  1539481.038 ± 19666.118  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 648501.187 ops/s
# Warmup Iteration   2: 1655407.353 ops/s
# Warmup Iteration   3: 1989605.552 ops/s
# Warmup Iteration   4: 1610304.098 ops/s
# Warmup Iteration   5: 2032965.748 ops/s
# Warmup Iteration   6: 2020724.618 ops/s
# Warmup Iteration   7: 1960809.195 ops/s
# Warmup Iteration   8: 2030065.537 ops/s
# Warmup Iteration   9: 1965305.043 ops/s
# Warmup Iteration  10: 2057016.427 ops/s
# Warmup Iteration  11: 1984985.971 ops/s
# Warmup Iteration  12: 1983209.319 ops/s
# Warmup Iteration  13: 1992383.172 ops/s
# Warmup Iteration  14: 2056009.682 ops/s
# Warmup Iteration  15: 1994175.241 ops/s
# Warmup Iteration  16: 1996466.019 ops/s
# Warmup Iteration  17: 1962837.198 ops/s
# Warmup Iteration  18: 2029674.134 ops/s
# Warmup Iteration  19: 2019576.673 ops/s
# Warmup Iteration  20: 2059134.626 ops/s
# Warmup Iteration  21: 2058573.716 ops/s
# Warmup Iteration  22: 2035944.227 ops/s
# Warmup Iteration  23: 2031925.103 ops/s
# Warmup Iteration  24: 2067725.930 ops/s
# Warmup Iteration  25: 2020843.593 ops/s
# Warmup Iteration  26: 1976452.525 ops/s
# Warmup Iteration  27: 1981351.140 ops/s
# Warmup Iteration  28: 1998162.200 ops/s
# Warmup Iteration  29: 2038960.129 ops/s
# Warmup Iteration  30: 1998004.245 ops/s
Iteration   1: 2054883.494 ops/s
Iteration   2: 2061214.120 ops/s
Iteration   3: 2055262.682 ops/s
Iteration   4: 1969515.256 ops/s
Iteration   5: 2060110.466 ops/s
Iteration   6: 2045648.033 ops/s
Iteration   7: 2018441.769 ops/s
Iteration   8: 2020091.602 ops/s
Iteration   9: 2076251.154 ops/s
Iteration  10: 2030014.857 ops/s
Iteration  11: 2009906.055 ops/s
Iteration  12: 1999743.586 ops/s
Iteration  13: 2081975.331 ops/s
Iteration  14: 1985605.410 ops/s
Iteration  15: 2005320.765 ops/s
Iteration  16: 2000297.698 ops/s
Iteration  17: 1985812.726 ops/s
Iteration  18: 2068165.521 ops/s
Iteration  19: 2049619.793 ops/s
Iteration  20: 1998683.554 ops/s
Iteration  21: 1985669.723 ops/s
Iteration  22: 1999165.716 ops/s
Iteration  23: 1976144.594 ops/s
Iteration  24: 2003546.963 ops/s
Iteration  25: 2053621.406 ops/s
Iteration  26: 1984840.970 ops/s
Iteration  27: 1961100.421 ops/s
Iteration  28: 2054534.981 ops/s
Iteration  29: 1975119.200 ops/s
Iteration  30: 1967182.494 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableEmpty":
  2017916.345 ±(99.9%) 24409.756 ops/s [Average]
  (min, avg, max) = (1961100.421, 2017916.345, 2081975.331), stdev = 36535.376
  CI (99.9%): [1993506.589, 2042326.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableEmpty  thrpt   30  2017916.345 ± 24409.756  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 776651.978 ops/s
# Warmup Iteration   2: 1885742.051 ops/s
# Warmup Iteration   3: 1900915.976 ops/s
# Warmup Iteration   4: 2297443.426 ops/s
# Warmup Iteration   5: 2280898.955 ops/s
# Warmup Iteration   6: 2292179.960 ops/s
# Warmup Iteration   7: 2310308.186 ops/s
# Warmup Iteration   8: 2315714.346 ops/s
# Warmup Iteration   9: 2279848.990 ops/s
# Warmup Iteration  10: 2291581.517 ops/s
# Warmup Iteration  11: 2326003.253 ops/s
# Warmup Iteration  12: 2349798.240 ops/s
# Warmup Iteration  13: 2298131.833 ops/s
# Warmup Iteration  14: 2292791.976 ops/s
# Warmup Iteration  15: 2279451.186 ops/s
# Warmup Iteration  16: 2291579.362 ops/s
# Warmup Iteration  17: 2287907.939 ops/s
# Warmup Iteration  18: 2284254.965 ops/s
# Warmup Iteration  19: 2281666.611 ops/s
# Warmup Iteration  20: 2288051.287 ops/s
# Warmup Iteration  21: 2313038.151 ops/s
# Warmup Iteration  22: 2280741.030 ops/s
# Warmup Iteration  23: 2301527.115 ops/s
# Warmup Iteration  24: 2291035.327 ops/s
# Warmup Iteration  25: 2292763.227 ops/s
# Warmup Iteration  26: 2315524.385 ops/s
# Warmup Iteration  27: 2283464.893 ops/s
# Warmup Iteration  28: 2301078.879 ops/s
# Warmup Iteration  29: 2291832.422 ops/s
# Warmup Iteration  30: 2314671.725 ops/s
Iteration   1: 2264617.392 ops/s
Iteration   2: 2330378.663 ops/s
Iteration   3: 2261997.462 ops/s
Iteration   4: 2298063.875 ops/s
Iteration   5: 2277800.986 ops/s
Iteration   6: 2308732.998 ops/s
Iteration   7: 2310797.900 ops/s
Iteration   8: 2289118.097 ops/s
Iteration   9: 2273218.258 ops/s
Iteration  10: 2269491.881 ops/s
Iteration  11: 2270855.787 ops/s
Iteration  12: 2314742.179 ops/s
Iteration  13: 2284862.910 ops/s
Iteration  14: 2315250.058 ops/s
Iteration  15: 2275524.178 ops/s
Iteration  16: 2303138.087 ops/s
Iteration  17: 2296951.075 ops/s
Iteration  18: 2295114.507 ops/s
Iteration  19: 2277401.693 ops/s
Iteration  20: 2302893.752 ops/s
Iteration  21: 2278207.787 ops/s
Iteration  22: 2328014.586 ops/s
Iteration  23: 2338648.456 ops/s
Iteration  24: 2347182.045 ops/s
Iteration  25: 2334997.572 ops/s
Iteration  26: 2339662.228 ops/s
Iteration  27: 2344672.095 ops/s
Iteration  28: 2311012.620 ops/s
Iteration  29: 2322342.025 ops/s
Iteration  30: 2299907.479 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty":
  2302186.621 ±(99.9%) 17107.747 ops/s [Average]
  (min, avg, max) = (2261997.462, 2302186.621, 2347182.045), stdev = 25606.073
  CI (99.9%): [2285078.874, 2319294.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty  thrpt   30  2302186.621 ± 17107.747  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44731.436 ops/s
# Warmup Iteration   2: 43304.842 ops/s
# Warmup Iteration   3: 45551.808 ops/s
# Warmup Iteration   4: 43043.677 ops/s
# Warmup Iteration   5: 45166.386 ops/s
# Warmup Iteration   6: 44537.283 ops/s
# Warmup Iteration   7: 42978.150 ops/s
# Warmup Iteration   8: 42694.987 ops/s
# Warmup Iteration   9: 43059.950 ops/s
# Warmup Iteration  10: 42640.648 ops/s
# Warmup Iteration  11: 43111.649 ops/s
# Warmup Iteration  12: 42991.402 ops/s
# Warmup Iteration  13: 42614.375 ops/s
# Warmup Iteration  14: 43506.769 ops/s
# Warmup Iteration  15: 42694.128 ops/s
# Warmup Iteration  16: 42288.730 ops/s
# Warmup Iteration  17: 44807.992 ops/s
# Warmup Iteration  18: 43495.774 ops/s
# Warmup Iteration  19: 41607.619 ops/s
# Warmup Iteration  20: 44585.338 ops/s
# Warmup Iteration  21: 44386.311 ops/s
# Warmup Iteration  22: 44951.784 ops/s
# Warmup Iteration  23: 45141.145 ops/s
# Warmup Iteration  24: 44485.866 ops/s
# Warmup Iteration  25: 44717.337 ops/s
# Warmup Iteration  26: 44956.350 ops/s
# Warmup Iteration  27: 44616.804 ops/s
# Warmup Iteration  28: 44158.609 ops/s
# Warmup Iteration  29: 44590.514 ops/s
# Warmup Iteration  30: 44391.610 ops/s
Iteration   1: 45066.563 ops/s
Iteration   2: 43078.265 ops/s
Iteration   3: 44362.310 ops/s
Iteration   4: 43846.481 ops/s
Iteration   5: 44441.044 ops/s
Iteration   6: 45450.995 ops/s
Iteration   7: 45732.971 ops/s
Iteration   8: 43882.519 ops/s
Iteration   9: 44365.235 ops/s
Iteration  10: 44687.499 ops/s
Iteration  11: 44193.148 ops/s
Iteration  12: 43938.715 ops/s
Iteration  13: 43761.924 ops/s
Iteration  14: 44980.304 ops/s
Iteration  15: 44778.485 ops/s
Iteration  16: 44263.389 ops/s
Iteration  17: 45236.919 ops/s
Iteration  18: 44632.235 ops/s
Iteration  19: 43744.195 ops/s
Iteration  20: 43973.258 ops/s
Iteration  21: 44466.232 ops/s
Iteration  22: 44336.372 ops/s
Iteration  23: 45006.168 ops/s
Iteration  24: 44506.022 ops/s
Iteration  25: 43967.187 ops/s
Iteration  26: 44861.719 ops/s
Iteration  27: 44544.169 ops/s
Iteration  28: 44051.506 ops/s
Iteration  29: 43995.620 ops/s
Iteration  30: 44174.044 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableNull":
  44410.850 ±(99.9%) 380.432 ops/s [Average]
  (min, avg, max) = (43078.265, 44410.850, 45732.971), stdev = 569.412
  CI (99.9%): [44030.418, 44791.281] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score     Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableNull  thrpt   30  44410.850 ± 380.432  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 603500.967 ops/s
# Warmup Iteration   2: 1514861.892 ops/s
# Warmup Iteration   3: 1827634.734 ops/s
# Warmup Iteration   4: 1531189.295 ops/s
# Warmup Iteration   5: 1829239.648 ops/s
# Warmup Iteration   6: 1801668.038 ops/s
# Warmup Iteration   7: 1840636.847 ops/s
# Warmup Iteration   8: 1840030.954 ops/s
# Warmup Iteration   9: 1812448.602 ops/s
# Warmup Iteration  10: 1774794.667 ops/s
# Warmup Iteration  11: 1776698.743 ops/s
# Warmup Iteration  12: 1771452.698 ops/s
# Warmup Iteration  13: 1764183.084 ops/s
# Warmup Iteration  14: 1831425.516 ops/s
# Warmup Iteration  15: 1764632.543 ops/s
# Warmup Iteration  16: 1775550.563 ops/s
# Warmup Iteration  17: 1777030.260 ops/s
# Warmup Iteration  18: 1763623.997 ops/s
# Warmup Iteration  19: 1786179.767 ops/s
# Warmup Iteration  20: 1760546.736 ops/s
# Warmup Iteration  21: 1794824.142 ops/s
# Warmup Iteration  22: 1765880.531 ops/s
# Warmup Iteration  23: 1754123.876 ops/s
# Warmup Iteration  24: 1734028.726 ops/s
# Warmup Iteration  25: 1777272.453 ops/s
# Warmup Iteration  26: 1781356.282 ops/s
# Warmup Iteration  27: 1774173.245 ops/s
# Warmup Iteration  28: 1772413.661 ops/s
# Warmup Iteration  29: 1750999.667 ops/s
# Warmup Iteration  30: 1759517.345 ops/s
Iteration   1: 1773770.722 ops/s
Iteration   2: 1735053.890 ops/s
Iteration   3: 1727015.798 ops/s
Iteration   4: 1774177.957 ops/s
Iteration   5: 1774378.564 ops/s
Iteration   6: 1730582.056 ops/s
Iteration   7: 1760086.407 ops/s
Iteration   8: 1732901.050 ops/s
Iteration   9: 1785885.075 ops/s
Iteration  10: 1761344.798 ops/s
Iteration  11: 1759284.148 ops/s
Iteration  12: 1767574.574 ops/s
Iteration  13: 1741388.170 ops/s
Iteration  14: 1781403.666 ops/s
Iteration  15: 1840994.085 ops/s
Iteration  16: 1760797.338 ops/s
Iteration  17: 1754307.687 ops/s
Iteration  18: 1746335.233 ops/s
Iteration  19: 1747542.620 ops/s
Iteration  20: 1762551.573 ops/s
Iteration  21: 1760152.539 ops/s
Iteration  22: 1759427.341 ops/s
Iteration  23: 1765512.745 ops/s
Iteration  24: 1739402.616 ops/s
Iteration  25: 1820135.106 ops/s
Iteration  26: 1776748.120 ops/s
Iteration  27: 1748581.715 ops/s
Iteration  28: 1728759.891 ops/s
Iteration  29: 1769361.444 ops/s
Iteration  30: 1790116.450 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableTargetEmpty":
  1762519.113 ±(99.9%) 16940.950 ops/s [Average]
  (min, avg, max) = (1727015.798, 1762519.113, 1840994.085), stdev = 25356.418
  CI (99.9%): [1745578.163, 1779460.062] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_putAllMapIterableTargetEmpty  thrpt   30  1762519.113 ± 16940.950  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putPair$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putPair

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707617.650 ops/s
# Warmup Iteration   2: 1564606.145 ops/s
# Warmup Iteration   3: 1842601.270 ops/s
# Warmup Iteration   4: 1678988.375 ops/s
# Warmup Iteration   5: 1692291.863 ops/s
# Warmup Iteration   6: 1872284.323 ops/s
# Warmup Iteration   7: 1834311.460 ops/s
# Warmup Iteration   8: 1844165.811 ops/s
# Warmup Iteration   9: 1938826.769 ops/s
# Warmup Iteration  10: 1846634.485 ops/s
# Warmup Iteration  11: 1858805.297 ops/s
# Warmup Iteration  12: 1840254.449 ops/s
# Warmup Iteration  13: 1868015.811 ops/s
# Warmup Iteration  14: 1834072.765 ops/s
# Warmup Iteration  15: 1834839.889 ops/s
# Warmup Iteration  16: 1831130.754 ops/s
# Warmup Iteration  17: 1841744.053 ops/s
# Warmup Iteration  18: 1878198.205 ops/s
# Warmup Iteration  19: 1835256.702 ops/s
# Warmup Iteration  20: 1893973.504 ops/s
# Warmup Iteration  21: 1924260.436 ops/s
# Warmup Iteration  22: 1889601.925 ops/s
# Warmup Iteration  23: 1919932.942 ops/s
# Warmup Iteration  24: 1842556.925 ops/s
# Warmup Iteration  25: 1877405.381 ops/s
# Warmup Iteration  26: 1863193.880 ops/s
# Warmup Iteration  27: 1914173.398 ops/s
# Warmup Iteration  28: 1877237.219 ops/s
# Warmup Iteration  29: 1912158.327 ops/s
# Warmup Iteration  30: 1853106.621 ops/s
Iteration   1: 1925901.402 ops/s
Iteration   2: 1841439.273 ops/s
Iteration   3: 1846830.858 ops/s
Iteration   4: 1923185.376 ops/s
Iteration   5: 1902188.493 ops/s
Iteration   6: 1890162.830 ops/s
Iteration   7: 1855589.421 ops/s
Iteration   8: 1925436.037 ops/s
Iteration   9: 1931502.249 ops/s
Iteration  10: 1929859.127 ops/s
Iteration  11: 1895362.127 ops/s
Iteration  12: 1828139.108 ops/s
Iteration  13: 1827861.179 ops/s
Iteration  14: 1840956.525 ops/s
Iteration  15: 1853786.195 ops/s
Iteration  16: 1845735.097 ops/s
Iteration  17: 1827175.232 ops/s
Iteration  18: 1824429.453 ops/s
Iteration  19: 1851711.664 ops/s
Iteration  20: 1893250.167 ops/s
Iteration  21: 1885752.486 ops/s
Iteration  22: 1819472.885 ops/s
Iteration  23: 1835852.907 ops/s
Iteration  24: 1857557.753 ops/s
Iteration  25: 1850461.871 ops/s
Iteration  26: 1863591.431 ops/s
Iteration  27: 1841507.748 ops/s
Iteration  28: 1846375.516 ops/s
Iteration  29: 1855180.103 ops/s
Iteration  30: 1850148.555 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_putPair":
  1865546.769 ±(99.9%) 23533.505 ops/s [Average]
  (min, avg, max) = (1819472.885, 1865546.769, 1931502.249), stdev = 35223.846
  CI (99.9%): [1842013.263, 1889080.274] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_putPair  thrpt   30  1865546.769 ± 23533.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_rehash_null_collision$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_rehash_null_collision

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19557.314 ops/s
# Warmup Iteration   2: 29090.791 ops/s
# Warmup Iteration   3: 34487.627 ops/s
# Warmup Iteration   4: 34314.462 ops/s
# Warmup Iteration   5: 36101.996 ops/s
# Warmup Iteration   6: 35674.406 ops/s
# Warmup Iteration   7: 28901.728 ops/s
# Warmup Iteration   8: 33737.700 ops/s
# Warmup Iteration   9: 34834.786 ops/s
# Warmup Iteration  10: 35250.560 ops/s
# Warmup Iteration  11: 35175.399 ops/s
# Warmup Iteration  12: 36032.431 ops/s
# Warmup Iteration  13: 34898.384 ops/s
# Warmup Iteration  14: 34650.679 ops/s
# Warmup Iteration  15: 34494.783 ops/s
# Warmup Iteration  16: 35870.628 ops/s
# Warmup Iteration  17: 34372.298 ops/s
# Warmup Iteration  18: 35617.790 ops/s
# Warmup Iteration  19: 35921.607 ops/s
# Warmup Iteration  20: 35569.867 ops/s
# Warmup Iteration  21: 34508.821 ops/s
# Warmup Iteration  22: 34336.802 ops/s
# Warmup Iteration  23: 34175.925 ops/s
# Warmup Iteration  24: 34240.952 ops/s
# Warmup Iteration  25: 34509.650 ops/s
# Warmup Iteration  26: 34400.614 ops/s
# Warmup Iteration  27: 34244.500 ops/s
# Warmup Iteration  28: 34352.273 ops/s
# Warmup Iteration  29: 34325.291 ops/s
# Warmup Iteration  30: 34541.166 ops/s
Iteration   1: 34741.056 ops/s
Iteration   2: 35693.813 ops/s
Iteration   3: 36343.015 ops/s
Iteration   4: 34426.823 ops/s
Iteration   5: 34435.718 ops/s
Iteration   6: 35283.343 ops/s
Iteration   7: 34829.764 ops/s
Iteration   8: 34870.861 ops/s
Iteration   9: 34036.224 ops/s
Iteration  10: 34527.786 ops/s
Iteration  11: 34206.692 ops/s
Iteration  12: 35912.906 ops/s
Iteration  13: 35874.952 ops/s
Iteration  14: 35370.552 ops/s
Iteration  15: 34854.958 ops/s
Iteration  16: 34500.202 ops/s
Iteration  17: 34204.118 ops/s
Iteration  18: 35502.724 ops/s
Iteration  19: 34244.209 ops/s
Iteration  20: 34814.152 ops/s
Iteration  21: 33686.148 ops/s
Iteration  22: 35068.939 ops/s
Iteration  23: 36019.525 ops/s
Iteration  24: 35220.766 ops/s
Iteration  25: 34385.226 ops/s
Iteration  26: 34436.371 ops/s
Iteration  27: 34361.498 ops/s
Iteration  28: 34179.875 ops/s
Iteration  29: 34414.500 ops/s
Iteration  30: 34218.297 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_rehash_null_collision":
  34822.167 ±(99.9%) 447.417 ops/s [Average]
  (min, avg, max) = (33686.148, 34822.167, 36343.015), stdev = 669.672
  CI (99.9%): [34374.750, 35269.584] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score     Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_rehash_null_collision  thrpt   30  34822.167 ± 447.417  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 822124.373 ops/s
# Warmup Iteration   2: 1940746.581 ops/s
# Warmup Iteration   3: 2042969.152 ops/s
# Warmup Iteration   4: 1838938.560 ops/s
# Warmup Iteration   5: 1882577.543 ops/s
# Warmup Iteration   6: 2136647.106 ops/s
# Warmup Iteration   7: 2095315.293 ops/s
# Warmup Iteration   8: 2051492.452 ops/s
# Warmup Iteration   9: 2093293.375 ops/s
# Warmup Iteration  10: 2091746.672 ops/s
# Warmup Iteration  11: 2044630.273 ops/s
# Warmup Iteration  12: 2045559.869 ops/s
# Warmup Iteration  13: 2061732.854 ops/s
# Warmup Iteration  14: 2052114.835 ops/s
# Warmup Iteration  15: 2075046.780 ops/s
# Warmup Iteration  16: 2055785.089 ops/s
# Warmup Iteration  17: 2048068.365 ops/s
# Warmup Iteration  18: 2077706.491 ops/s
# Warmup Iteration  19: 2119611.650 ops/s
# Warmup Iteration  20: 2091764.769 ops/s
# Warmup Iteration  21: 2107143.544 ops/s
# Warmup Iteration  22: 2115702.909 ops/s
# Warmup Iteration  23: 2081677.941 ops/s
# Warmup Iteration  24: 2095133.770 ops/s
# Warmup Iteration  25: 2069220.806 ops/s
# Warmup Iteration  26: 2053973.262 ops/s
# Warmup Iteration  27: 2018888.713 ops/s
# Warmup Iteration  28: 2113875.801 ops/s
# Warmup Iteration  29: 2057183.408 ops/s
# Warmup Iteration  30: 2136697.873 ops/s
Iteration   1: 2104130.420 ops/s
Iteration   2: 2036319.860 ops/s
Iteration   3: 2043303.467 ops/s
Iteration   4: 2069138.077 ops/s
Iteration   5: 2121606.206 ops/s
Iteration   6: 2026798.613 ops/s
Iteration   7: 2016745.327 ops/s
Iteration   8: 2133696.914 ops/s
Iteration   9: 2150122.313 ops/s
Iteration  10: 2104883.556 ops/s
Iteration  11: 2087859.329 ops/s
Iteration  12: 2050716.357 ops/s
Iteration  13: 2010652.780 ops/s
Iteration  14: 2055262.206 ops/s
Iteration  15: 2082862.318 ops/s
Iteration  16: 2070637.477 ops/s
Iteration  17: 2069602.613 ops/s
Iteration  18: 2056103.425 ops/s
Iteration  19: 2061554.520 ops/s
Iteration  20: 2044445.371 ops/s
Iteration  21: 2062135.322 ops/s
Iteration  22: 2092579.212 ops/s
Iteration  23: 2001816.045 ops/s
Iteration  24: 2046063.369 ops/s
Iteration  25: 2022542.887 ops/s
Iteration  26: 2097842.276 ops/s
Iteration  27: 2040954.586 ops/s
Iteration  28: 2056771.886 ops/s
Iteration  29: 2019800.327 ops/s
Iteration  30: 1989529.353 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_reject":
  2060882.547 ±(99.9%) 26002.595 ops/s [Average]
  (min, avg, max) = (1989529.353, 2060882.547, 2150122.313), stdev = 38919.463
  CI (99.9%): [2034879.952, 2086885.142] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_reject  thrpt   30  2060882.547 ± 26002.595  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_rejectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_rejectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1057298.365 ops/s
# Warmup Iteration   2: 2570990.757 ops/s
# Warmup Iteration   3: 2087208.048 ops/s
# Warmup Iteration   4: 2585644.024 ops/s
# Warmup Iteration   5: 2603763.236 ops/s
# Warmup Iteration   6: 2577805.574 ops/s
# Warmup Iteration   7: 2539466.065 ops/s
# Warmup Iteration   8: 2571736.502 ops/s
# Warmup Iteration   9: 2584958.688 ops/s
# Warmup Iteration  10: 2576368.519 ops/s
# Warmup Iteration  11: 2571763.659 ops/s
# Warmup Iteration  12: 2597270.583 ops/s
# Warmup Iteration  13: 2586875.331 ops/s
# Warmup Iteration  14: 2657374.192 ops/s
# Warmup Iteration  15: 2630478.295 ops/s
# Warmup Iteration  16: 2591632.246 ops/s
# Warmup Iteration  17: 2589428.826 ops/s
# Warmup Iteration  18: 2585883.187 ops/s
# Warmup Iteration  19: 2579866.450 ops/s
# Warmup Iteration  20: 2620534.210 ops/s
# Warmup Iteration  21: 2579103.149 ops/s
# Warmup Iteration  22: 2666294.512 ops/s
# Warmup Iteration  23: 2581226.072 ops/s
# Warmup Iteration  24: 2602023.682 ops/s
# Warmup Iteration  25: 2565764.005 ops/s
# Warmup Iteration  26: 2676356.205 ops/s
# Warmup Iteration  27: 2591321.878 ops/s
# Warmup Iteration  28: 2572542.232 ops/s
# Warmup Iteration  29: 2596824.087 ops/s
# Warmup Iteration  30: 2625314.207 ops/s
Iteration   1: 2642538.160 ops/s
Iteration   2: 2607677.076 ops/s
Iteration   3: 2580013.920 ops/s
Iteration   4: 2544345.081 ops/s
Iteration   5: 2586846.550 ops/s
Iteration   6: 2533103.643 ops/s
Iteration   7: 2492835.848 ops/s
Iteration   8: 2541398.243 ops/s
Iteration   9: 2556109.360 ops/s
Iteration  10: 2559196.742 ops/s
Iteration  11: 2540628.103 ops/s
Iteration  12: 2569144.511 ops/s
Iteration  13: 2584616.591 ops/s
Iteration  14: 2547690.414 ops/s
Iteration  15: 2694201.206 ops/s
Iteration  16: 2585394.085 ops/s
Iteration  17: 2620127.357 ops/s
Iteration  18: 2683439.272 ops/s
Iteration  19: 2658913.093 ops/s
Iteration  20: 2602129.674 ops/s
Iteration  21: 2556752.919 ops/s
Iteration  22: 2559861.351 ops/s
Iteration  23: 2591459.559 ops/s
Iteration  24: 2600466.182 ops/s
Iteration  25: 2523435.736 ops/s
Iteration  26: 2655127.053 ops/s
Iteration  27: 2601892.022 ops/s
Iteration  28: 2546938.143 ops/s
Iteration  29: 2569699.948 ops/s
Iteration  30: 2580025.711 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_rejectMap":
  2583866.918 ±(99.9%) 31554.214 ops/s [Average]
  (min, avg, max) = (2492835.848, 2583866.918, 2694201.206), stdev = 47228.865
  CI (99.9%): [2552312.705, 2615421.132] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_rejectMap  thrpt   30  2583866.918 ± 31554.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 834959.505 ops/s
# Warmup Iteration   2: 2009789.344 ops/s
# Warmup Iteration   3: 2069517.668 ops/s
# Warmup Iteration   4: 1769920.605 ops/s
# Warmup Iteration   5: 2052949.100 ops/s
# Warmup Iteration   6: 2059410.896 ops/s
# Warmup Iteration   7: 2084517.868 ops/s
# Warmup Iteration   8: 2075739.476 ops/s
# Warmup Iteration   9: 2144723.121 ops/s
# Warmup Iteration  10: 2078946.496 ops/s
# Warmup Iteration  11: 2012687.130 ops/s
# Warmup Iteration  12: 2076132.906 ops/s
# Warmup Iteration  13: 2108281.457 ops/s
# Warmup Iteration  14: 2130775.958 ops/s
# Warmup Iteration  15: 2065568.532 ops/s
# Warmup Iteration  16: 2069079.964 ops/s
# Warmup Iteration  17: 2121083.954 ops/s
# Warmup Iteration  18: 2142895.291 ops/s
# Warmup Iteration  19: 2132571.866 ops/s
# Warmup Iteration  20: 2082424.821 ops/s
# Warmup Iteration  21: 2075684.953 ops/s
# Warmup Iteration  22: 2050079.137 ops/s
# Warmup Iteration  23: 2140948.124 ops/s
# Warmup Iteration  24: 2090322.477 ops/s
# Warmup Iteration  25: 2111805.072 ops/s
# Warmup Iteration  26: 2061932.027 ops/s
# Warmup Iteration  27: 2058003.226 ops/s
# Warmup Iteration  28: 2129900.758 ops/s
# Warmup Iteration  29: 2044398.343 ops/s
# Warmup Iteration  30: 2044489.677 ops/s
Iteration   1: 2117804.424 ops/s
Iteration   2: 2014411.659 ops/s
Iteration   3: 2033722.951 ops/s
Iteration   4: 2063856.449 ops/s
Iteration   5: 2044210.727 ops/s
Iteration   6: 2009312.620 ops/s
Iteration   7: 2062390.517 ops/s
Iteration   8: 2069045.483 ops/s
Iteration   9: 2036594.548 ops/s
Iteration  10: 2064590.569 ops/s
Iteration  11: 2039424.462 ops/s
Iteration  12: 2057058.062 ops/s
Iteration  13: 2050526.480 ops/s
Iteration  14: 2056836.586 ops/s
Iteration  15: 2035136.560 ops/s
Iteration  16: 2061031.683 ops/s
Iteration  17: 2084623.522 ops/s
Iteration  18: 2091287.467 ops/s
Iteration  19: 2078048.832 ops/s
Iteration  20: 2050451.996 ops/s
Iteration  21: 1996330.595 ops/s
Iteration  22: 2047159.220 ops/s
Iteration  23: 2017857.423 ops/s
Iteration  24: 2025637.334 ops/s
Iteration  25: 2017983.303 ops/s
Iteration  26: 2020283.564 ops/s
Iteration  27: 2039975.169 ops/s
Iteration  28: 2001313.157 ops/s
Iteration  29: 2035041.189 ops/s
Iteration  30: 2064468.413 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_rejectWith":
  2046213.832 ±(99.9%) 18425.982 ops/s [Average]
  (min, avg, max) = (1996330.595, 2046213.832, 2117804.424), stdev = 27579.144
  CI (99.9%): [2027787.850, 2064639.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_rejectWith  thrpt   30  2046213.832 ± 18425.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_rejectWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_rejectWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1328745.164 ops/s
# Warmup Iteration   2: 3456004.082 ops/s
# Warmup Iteration   3: 2843302.268 ops/s
# Warmup Iteration   4: 3462138.524 ops/s
# Warmup Iteration   5: 3531692.554 ops/s
# Warmup Iteration   6: 3567262.181 ops/s
# Warmup Iteration   7: 3511258.056 ops/s
# Warmup Iteration   8: 3487300.290 ops/s
# Warmup Iteration   9: 3414411.557 ops/s
# Warmup Iteration  10: 3454119.350 ops/s
# Warmup Iteration  11: 3448769.269 ops/s
# Warmup Iteration  12: 3544260.561 ops/s
# Warmup Iteration  13: 3449754.905 ops/s
# Warmup Iteration  14: 3431201.776 ops/s
# Warmup Iteration  15: 3454257.135 ops/s
# Warmup Iteration  16: 3527269.692 ops/s
# Warmup Iteration  17: 3408798.240 ops/s
# Warmup Iteration  18: 3504433.594 ops/s
# Warmup Iteration  19: 3489415.550 ops/s
# Warmup Iteration  20: 3415340.707 ops/s
# Warmup Iteration  21: 3437774.479 ops/s
# Warmup Iteration  22: 3476118.041 ops/s
# Warmup Iteration  23: 3434192.761 ops/s
# Warmup Iteration  24: 3448770.996 ops/s
# Warmup Iteration  25: 3433654.644 ops/s
# Warmup Iteration  26: 3446571.416 ops/s
# Warmup Iteration  27: 3433553.374 ops/s
# Warmup Iteration  28: 3457967.326 ops/s
# Warmup Iteration  29: 3417600.370 ops/s
# Warmup Iteration  30: 3417155.664 ops/s
Iteration   1: 3550697.986 ops/s
Iteration   2: 3406672.143 ops/s
Iteration   3: 3484123.107 ops/s
Iteration   4: 3430651.981 ops/s
Iteration   5: 3498198.720 ops/s
Iteration   6: 3445362.749 ops/s
Iteration   7: 3487629.309 ops/s
Iteration   8: 3502842.819 ops/s
Iteration   9: 3429451.254 ops/s
Iteration  10: 3430802.489 ops/s
Iteration  11: 3489436.787 ops/s
Iteration  12: 3407939.230 ops/s
Iteration  13: 3503982.195 ops/s
Iteration  14: 3441813.761 ops/s
Iteration  15: 3547312.267 ops/s
Iteration  16: 3420999.974 ops/s
Iteration  17: 3478996.086 ops/s
Iteration  18: 3502890.061 ops/s
Iteration  19: 3551052.111 ops/s
Iteration  20: 3560562.990 ops/s
Iteration  21: 3433716.195 ops/s
Iteration  22: 3425689.538 ops/s
Iteration  23: 3475022.031 ops/s
Iteration  24: 3589885.788 ops/s
Iteration  25: 3436021.803 ops/s
Iteration  26: 3486072.706 ops/s
Iteration  27: 3468672.803 ops/s
Iteration  28: 3423071.127 ops/s
Iteration  29: 3561449.682 ops/s
Iteration  30: 3468624.662 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_rejectWith_value":
  3477988.145 ±(99.9%) 34309.969 ops/s [Average]
  (min, avg, max) = (3406672.143, 3477988.145, 3589885.788), stdev = 51353.550
  CI (99.9%): [3443678.177, 3512298.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_rejectWith_value  thrpt   30  3477988.145 ± 34309.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_reject_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_reject_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 811578.104 ops/s
# Warmup Iteration   2: 2197698.960 ops/s
# Warmup Iteration   3: 2034869.096 ops/s
# Warmup Iteration   4: 1928155.969 ops/s
# Warmup Iteration   5: 2150244.789 ops/s
# Warmup Iteration   6: 2133005.958 ops/s
# Warmup Iteration   7: 2206869.792 ops/s
# Warmup Iteration   8: 2156756.545 ops/s
# Warmup Iteration   9: 2210491.285 ops/s
# Warmup Iteration  10: 2187519.559 ops/s
# Warmup Iteration  11: 2212593.520 ops/s
# Warmup Iteration  12: 2177387.679 ops/s
# Warmup Iteration  13: 2166345.758 ops/s
# Warmup Iteration  14: 2164363.373 ops/s
# Warmup Iteration  15: 2152577.639 ops/s
# Warmup Iteration  16: 2139095.874 ops/s
# Warmup Iteration  17: 2116552.769 ops/s
# Warmup Iteration  18: 2137473.891 ops/s
# Warmup Iteration  19: 2155820.665 ops/s
# Warmup Iteration  20: 2166425.541 ops/s
# Warmup Iteration  21: 2130614.306 ops/s
# Warmup Iteration  22: 2227892.582 ops/s
# Warmup Iteration  23: 2183126.329 ops/s
# Warmup Iteration  24: 2179553.153 ops/s
# Warmup Iteration  25: 2156424.936 ops/s
# Warmup Iteration  26: 2133027.976 ops/s
# Warmup Iteration  27: 2140970.640 ops/s
# Warmup Iteration  28: 2155613.136 ops/s
# Warmup Iteration  29: 2199769.667 ops/s
# Warmup Iteration  30: 2187859.581 ops/s
Iteration   1: 2096581.047 ops/s
Iteration   2: 2202966.609 ops/s
Iteration   3: 2237833.417 ops/s
Iteration   4: 2109543.418 ops/s
Iteration   5: 2143104.022 ops/s
Iteration   6: 2139876.302 ops/s
Iteration   7: 2173396.219 ops/s
Iteration   8: 2260586.754 ops/s
Iteration   9: 2130950.717 ops/s
Iteration  10: 2135936.556 ops/s
Iteration  11: 2144456.478 ops/s
Iteration  12: 2141318.806 ops/s
Iteration  13: 2166900.053 ops/s
Iteration  14: 2174175.015 ops/s
Iteration  15: 2133579.517 ops/s
Iteration  16: 2124550.139 ops/s
Iteration  17: 2152557.174 ops/s
Iteration  18: 2188406.457 ops/s
Iteration  19: 2175473.529 ops/s
Iteration  20: 2128425.743 ops/s
Iteration  21: 2131426.851 ops/s
Iteration  22: 2127838.407 ops/s
Iteration  23: 2188940.396 ops/s
Iteration  24: 2172267.954 ops/s
Iteration  25: 2213447.992 ops/s
Iteration  26: 2131455.670 ops/s
Iteration  27: 2215806.696 ops/s
Iteration  28: 2178076.334 ops/s
Iteration  29: 2208384.234 ops/s
Iteration  30: 2183855.920 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_reject_value":
  2163737.281 ±(99.9%) 26088.466 ops/s [Average]
  (min, avg, max) = (2096581.047, 2163737.281, 2260586.754), stdev = 39047.991
  CI (99.9%): [2137648.814, 2189825.747] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_reject_value  thrpt   30  2163737.281 ± 26088.466  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 147336.894 ops/s
# Warmup Iteration   2: 181595.058 ops/s
# Warmup Iteration   3: 265152.341 ops/s
# Warmup Iteration   4: 264792.951 ops/s
# Warmup Iteration   5: 264396.942 ops/s
# Warmup Iteration   6: 272460.684 ops/s
# Warmup Iteration   7: 274407.101 ops/s
# Warmup Iteration   8: 264093.894 ops/s
# Warmup Iteration   9: 230563.719 ops/s
# Warmup Iteration  10: 275558.726 ops/s
# Warmup Iteration  11: 264554.040 ops/s
# Warmup Iteration  12: 275809.268 ops/s
# Warmup Iteration  13: 269868.040 ops/s
# Warmup Iteration  14: 267469.713 ops/s
# Warmup Iteration  15: 265314.936 ops/s
# Warmup Iteration  16: 261803.905 ops/s
# Warmup Iteration  17: 264260.522 ops/s
# Warmup Iteration  18: 265867.131 ops/s
# Warmup Iteration  19: 275240.632 ops/s
# Warmup Iteration  20: 265312.599 ops/s
# Warmup Iteration  21: 276743.274 ops/s
# Warmup Iteration  22: 278543.598 ops/s
# Warmup Iteration  23: 276731.843 ops/s
# Warmup Iteration  24: 270209.173 ops/s
# Warmup Iteration  25: 269368.140 ops/s
# Warmup Iteration  26: 274714.950 ops/s
# Warmup Iteration  27: 266345.635 ops/s
# Warmup Iteration  28: 267567.510 ops/s
# Warmup Iteration  29: 267864.512 ops/s
# Warmup Iteration  30: 274563.335 ops/s
Iteration   1: 269744.748 ops/s
Iteration   2: 278553.601 ops/s
Iteration   3: 273304.829 ops/s
Iteration   4: 271912.964 ops/s
Iteration   5: 277944.521 ops/s
Iteration   6: 278769.920 ops/s
Iteration   7: 276538.996 ops/s
Iteration   8: 273518.820 ops/s
Iteration   9: 267871.386 ops/s
Iteration  10: 265253.136 ops/s
Iteration  11: 266430.477 ops/s
Iteration  12: 267147.159 ops/s
Iteration  13: 267439.459 ops/s
Iteration  14: 267617.654 ops/s
Iteration  15: 273815.448 ops/s
Iteration  16: 267691.065 ops/s
Iteration  17: 273298.604 ops/s
Iteration  18: 263368.361 ops/s
Iteration  19: 268044.488 ops/s
Iteration  20: 271757.170 ops/s
Iteration  21: 267224.811 ops/s
Iteration  22: 265129.232 ops/s
Iteration  23: 263956.031 ops/s
Iteration  24: 274166.509 ops/s
Iteration  25: 268506.107 ops/s
Iteration  26: 269394.550 ops/s
Iteration  27: 271381.487 ops/s
Iteration  28: 271292.676 ops/s
Iteration  29: 269467.042 ops/s
Iteration  30: 257877.129 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_remove":
  269947.279 ±(99.9%) 3195.671 ops/s [Average]
  (min, avg, max) = (257877.129, 269947.279, 278769.920), stdev = 4783.130
  CI (99.9%): [266751.608, 273142.950] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_remove  thrpt   30  269947.279 ± 3195.671  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeAllFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeAllFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 376435.222 ops/s
# Warmup Iteration   2: 691196.424 ops/s
# Warmup Iteration   3: 837612.850 ops/s
# Warmup Iteration   4: 837408.909 ops/s
# Warmup Iteration   5: 716511.996 ops/s
# Warmup Iteration   6: 818875.696 ops/s
# Warmup Iteration   7: 833371.155 ops/s
# Warmup Iteration   8: 838123.473 ops/s
# Warmup Iteration   9: 865084.024 ops/s
# Warmup Iteration  10: 844853.374 ops/s
# Warmup Iteration  11: 837276.055 ops/s
# Warmup Iteration  12: 828226.560 ops/s
# Warmup Iteration  13: 837001.603 ops/s
# Warmup Iteration  14: 837463.114 ops/s
# Warmup Iteration  15: 826518.338 ops/s
# Warmup Iteration  16: 821684.748 ops/s
# Warmup Iteration  17: 828940.721 ops/s
# Warmup Iteration  18: 840755.188 ops/s
# Warmup Iteration  19: 848978.246 ops/s
# Warmup Iteration  20: 827300.988 ops/s
# Warmup Iteration  21: 831923.261 ops/s
# Warmup Iteration  22: 839222.512 ops/s
# Warmup Iteration  23: 827685.961 ops/s
# Warmup Iteration  24: 837511.751 ops/s
# Warmup Iteration  25: 826054.001 ops/s
# Warmup Iteration  26: 865627.055 ops/s
# Warmup Iteration  27: 833039.257 ops/s
# Warmup Iteration  28: 830675.736 ops/s
# Warmup Iteration  29: 828873.904 ops/s
# Warmup Iteration  30: 830224.219 ops/s
Iteration   1: 824553.997 ops/s
Iteration   2: 860651.420 ops/s
Iteration   3: 822814.384 ops/s
Iteration   4: 851016.167 ops/s
Iteration   5: 865569.036 ops/s
Iteration   6: 867882.608 ops/s
Iteration   7: 862574.912 ops/s
Iteration   8: 868885.187 ops/s
Iteration   9: 832180.845 ops/s
Iteration  10: 851450.684 ops/s
Iteration  11: 868676.640 ops/s
Iteration  12: 832502.176 ops/s
Iteration  13: 863708.611 ops/s
Iteration  14: 825667.639 ops/s
Iteration  15: 868575.346 ops/s
Iteration  16: 850459.987 ops/s
Iteration  17: 820507.749 ops/s
Iteration  18: 860603.507 ops/s
Iteration  19: 832815.699 ops/s
Iteration  20: 846891.686 ops/s
Iteration  21: 860763.728 ops/s
Iteration  22: 836139.027 ops/s
Iteration  23: 838337.677 ops/s
Iteration  24: 830630.741 ops/s
Iteration  25: 845779.831 ops/s
Iteration  26: 843962.588 ops/s
Iteration  27: 852470.024 ops/s
Iteration  28: 843304.075 ops/s
Iteration  29: 818793.377 ops/s
Iteration  30: 837549.619 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeAllFromEntrySet":
  846190.632 ±(99.9%) 10803.629 ops/s [Average]
  (min, avg, max) = (818793.377, 846190.632, 868885.187), stdev = 16170.365
  CI (99.9%): [835387.003, 856994.262] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_removeAllFromEntrySet  thrpt   30  846190.632 ± 10803.629  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeAllFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeAllFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 755985.765 ops/s
# Warmup Iteration   2: 1286067.404 ops/s
# Warmup Iteration   3: 1669921.320 ops/s
# Warmup Iteration   4: 1700601.585 ops/s
# Warmup Iteration   5: 1704738.112 ops/s
# Warmup Iteration   6: 1359736.343 ops/s
# Warmup Iteration   7: 1705786.582 ops/s
# Warmup Iteration   8: 1688025.910 ops/s
# Warmup Iteration   9: 1761999.051 ops/s
# Warmup Iteration  10: 1692816.978 ops/s
# Warmup Iteration  11: 1664532.182 ops/s
# Warmup Iteration  12: 1663660.734 ops/s
# Warmup Iteration  13: 1680999.237 ops/s
# Warmup Iteration  14: 1703276.498 ops/s
# Warmup Iteration  15: 1674342.024 ops/s
# Warmup Iteration  16: 1709432.726 ops/s
# Warmup Iteration  17: 1692762.192 ops/s
# Warmup Iteration  18: 1763884.618 ops/s
# Warmup Iteration  19: 1753740.206 ops/s
# Warmup Iteration  20: 1761585.601 ops/s
# Warmup Iteration  21: 1742344.567 ops/s
# Warmup Iteration  22: 1698892.961 ops/s
# Warmup Iteration  23: 1738857.119 ops/s
# Warmup Iteration  24: 1730468.568 ops/s
# Warmup Iteration  25: 1695857.565 ops/s
# Warmup Iteration  26: 1683847.763 ops/s
# Warmup Iteration  27: 1746715.396 ops/s
# Warmup Iteration  28: 1696425.655 ops/s
# Warmup Iteration  29: 1719744.549 ops/s
# Warmup Iteration  30: 1737110.883 ops/s
Iteration   1: 1672410.353 ops/s
Iteration   2: 1672412.955 ops/s
Iteration   3: 1693454.095 ops/s
Iteration   4: 1753600.148 ops/s
Iteration   5: 1720161.632 ops/s
Iteration   6: 1682977.158 ops/s
Iteration   7: 1688054.020 ops/s
Iteration   8: 1693115.513 ops/s
Iteration   9: 1673082.313 ops/s
Iteration  10: 1685278.982 ops/s
Iteration  11: 1743831.823 ops/s
Iteration  12: 1715465.011 ops/s
Iteration  13: 1670936.601 ops/s
Iteration  14: 1702445.287 ops/s
Iteration  15: 1698540.724 ops/s
Iteration  16: 1706317.951 ops/s
Iteration  17: 1685604.166 ops/s
Iteration  18: 1692533.360 ops/s
Iteration  19: 1687922.201 ops/s
Iteration  20: 1697471.714 ops/s
Iteration  21: 1737470.058 ops/s
Iteration  22: 1671946.631 ops/s
Iteration  23: 1782326.240 ops/s
Iteration  24: 1695505.291 ops/s
Iteration  25: 1744531.154 ops/s
Iteration  26: 1711184.344 ops/s
Iteration  27: 1712041.569 ops/s
Iteration  28: 1768073.655 ops/s
Iteration  29: 1680616.651 ops/s
Iteration  30: 1678657.285 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeAllFromKeySet":
  1703932.296 ±(99.9%) 19996.233 ops/s [Average]
  (min, avg, max) = (1670936.601, 1703932.296, 1782326.240), stdev = 29929.422
  CI (99.9%): [1683936.063, 1723928.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_removeAllFromKeySet  thrpt   30  1703932.296 ± 19996.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeAllFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeAllFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 718673.015 ops/s
# Warmup Iteration   2: 1150422.296 ops/s
# Warmup Iteration   3: 1435488.260 ops/s
# Warmup Iteration   4: 1407700.083 ops/s
# Warmup Iteration   5: 1415109.607 ops/s
# Warmup Iteration   6: 1212570.514 ops/s
# Warmup Iteration   7: 1358860.916 ops/s
# Warmup Iteration   8: 1398260.302 ops/s
# Warmup Iteration   9: 1411208.040 ops/s
# Warmup Iteration  10: 1384245.305 ops/s
# Warmup Iteration  11: 1413894.466 ops/s
# Warmup Iteration  12: 1411305.285 ops/s
# Warmup Iteration  13: 1428477.526 ops/s
# Warmup Iteration  14: 1402468.522 ops/s
# Warmup Iteration  15: 1410969.822 ops/s
# Warmup Iteration  16: 1460922.124 ops/s
# Warmup Iteration  17: 1424190.257 ops/s
# Warmup Iteration  18: 1398056.888 ops/s
# Warmup Iteration  19: 1403839.380 ops/s
# Warmup Iteration  20: 1417027.715 ops/s
# Warmup Iteration  21: 1447408.423 ops/s
# Warmup Iteration  22: 1440230.348 ops/s
# Warmup Iteration  23: 1436410.825 ops/s
# Warmup Iteration  24: 1455499.206 ops/s
# Warmup Iteration  25: 1400430.179 ops/s
# Warmup Iteration  26: 1407266.680 ops/s
# Warmup Iteration  27: 1432278.559 ops/s
# Warmup Iteration  28: 1412152.375 ops/s
# Warmup Iteration  29: 1411181.705 ops/s
# Warmup Iteration  30: 1390804.618 ops/s
Iteration   1: 1411077.283 ops/s
Iteration   2: 1386151.747 ops/s
Iteration   3: 1407313.942 ops/s
Iteration   4: 1419471.139 ops/s
Iteration   5: 1396275.792 ops/s
Iteration   6: 1425086.169 ops/s
Iteration   7: 1471723.203 ops/s
Iteration   8: 1461052.883 ops/s
Iteration   9: 1386654.372 ops/s
Iteration  10: 1409204.122 ops/s
Iteration  11: 1408134.628 ops/s
Iteration  12: 1435892.368 ops/s
Iteration  13: 1424857.134 ops/s
Iteration  14: 1456969.956 ops/s
Iteration  15: 1409852.504 ops/s
Iteration  16: 1404217.199 ops/s
Iteration  17: 1403779.735 ops/s
Iteration  18: 1446385.177 ops/s
Iteration  19: 1376936.700 ops/s
Iteration  20: 1400981.408 ops/s
Iteration  21: 1415144.806 ops/s
Iteration  22: 1464862.311 ops/s
Iteration  23: 1474690.129 ops/s
Iteration  24: 1430484.727 ops/s
Iteration  25: 1475340.370 ops/s
Iteration  26: 1466779.034 ops/s
Iteration  27: 1464917.056 ops/s
Iteration  28: 1477214.972 ops/s
Iteration  29: 1440213.030 ops/s
Iteration  30: 1460063.321 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeAllFromValues":
  1430390.907 ±(99.9%) 20509.918 ops/s [Average]
  (min, avg, max) = (1376936.700, 1430390.907, 1477214.972), stdev = 30698.282
  CI (99.9%): [1409880.989, 1450900.825] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_removeAllFromValues  thrpt   30  1430390.907 ± 20509.918  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeAllKeys$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeAllKeys

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 214201.031 ops/s
# Warmup Iteration   2: 255443.361 ops/s
# Warmup Iteration   3: 365736.145 ops/s
# Warmup Iteration   4: 353945.902 ops/s
# Warmup Iteration   5: 351641.341 ops/s
# Warmup Iteration   6: 369501.229 ops/s
# Warmup Iteration   7: 367045.833 ops/s
# Warmup Iteration   8: 367203.966 ops/s
# Warmup Iteration   9: 362479.366 ops/s
# Warmup Iteration  10: 286825.265 ops/s
# Warmup Iteration  11: 369457.993 ops/s
# Warmup Iteration  12: 365676.305 ops/s
# Warmup Iteration  13: 367206.240 ops/s
# Warmup Iteration  14: 357214.124 ops/s
# Warmup Iteration  15: 352925.602 ops/s
# Warmup Iteration  16: 370188.518 ops/s
# Warmup Iteration  17: 378372.821 ops/s
# Warmup Iteration  18: 357114.033 ops/s
# Warmup Iteration  19: 363616.944 ops/s
# Warmup Iteration  20: 366155.192 ops/s
# Warmup Iteration  21: 363602.689 ops/s
# Warmup Iteration  22: 363032.616 ops/s
# Warmup Iteration  23: 359864.988 ops/s
# Warmup Iteration  24: 362751.044 ops/s
# Warmup Iteration  25: 365045.248 ops/s
# Warmup Iteration  26: 374650.410 ops/s
# Warmup Iteration  27: 365471.503 ops/s
# Warmup Iteration  28: 374622.540 ops/s
# Warmup Iteration  29: 373391.785 ops/s
# Warmup Iteration  30: 375498.691 ops/s
Iteration   1: 364162.974 ops/s
Iteration   2: 390064.639 ops/s
Iteration   3: 357615.143 ops/s
Iteration   4: 369619.530 ops/s
Iteration   5: 359366.644 ops/s
Iteration   6: 373065.687 ops/s
Iteration   7: 362536.350 ops/s
Iteration   8: 383923.586 ops/s
Iteration   9: 390717.276 ops/s
Iteration  10: 395916.629 ops/s
Iteration  11: 397017.074 ops/s
Iteration  12: 395478.149 ops/s
Iteration  13: 386696.666 ops/s
Iteration  14: 358762.350 ops/s
Iteration  15: 380363.744 ops/s
Iteration  16: 368213.668 ops/s
Iteration  17: 374430.373 ops/s
Iteration  18: 378476.505 ops/s
Iteration  19: 371458.513 ops/s
Iteration  20: 363961.461 ops/s
Iteration  21: 359925.715 ops/s
Iteration  22: 378618.229 ops/s
Iteration  23: 377356.414 ops/s
Iteration  24: 381730.562 ops/s
Iteration  25: 370212.494 ops/s
Iteration  26: 363845.043 ops/s
Iteration  27: 362666.962 ops/s
Iteration  28: 357835.667 ops/s
Iteration  29: 373628.420 ops/s
Iteration  30: 370813.802 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeAllKeys":
  373949.342 ±(99.9%) 8079.477 ops/s [Average]
  (min, avg, max) = (357615.143, 373949.342, 397017.074), stdev = 12092.982
  CI (99.9%): [365869.865, 382028.820] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_removeAllKeys  thrpt   30  373949.342 ± 8079.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 552650.566 ops/s
# Warmup Iteration   2: 1044858.618 ops/s
# Warmup Iteration   3: 1312488.764 ops/s
# Warmup Iteration   4: 1296246.990 ops/s
# Warmup Iteration   5: 1098303.603 ops/s
# Warmup Iteration   6: 1342746.145 ops/s
# Warmup Iteration   7: 1338487.558 ops/s
# Warmup Iteration   8: 1357172.971 ops/s
# Warmup Iteration   9: 1298196.631 ops/s
# Warmup Iteration  10: 1359498.759 ops/s
# Warmup Iteration  11: 1306459.001 ops/s
# Warmup Iteration  12: 1324295.216 ops/s
# Warmup Iteration  13: 1350838.644 ops/s
# Warmup Iteration  14: 1316785.055 ops/s
# Warmup Iteration  15: 1325955.971 ops/s
# Warmup Iteration  16: 1289852.078 ops/s
# Warmup Iteration  17: 1370902.122 ops/s
# Warmup Iteration  18: 1307565.161 ops/s
# Warmup Iteration  19: 1341739.324 ops/s
# Warmup Iteration  20: 1362820.515 ops/s
# Warmup Iteration  21: 1323788.311 ops/s
# Warmup Iteration  22: 1293630.149 ops/s
# Warmup Iteration  23: 1309184.035 ops/s
# Warmup Iteration  24: 1298401.716 ops/s
# Warmup Iteration  25: 1336520.669 ops/s
# Warmup Iteration  26: 1313440.616 ops/s
# Warmup Iteration  27: 1310397.981 ops/s
# Warmup Iteration  28: 1305375.062 ops/s
# Warmup Iteration  29: 1307230.137 ops/s
# Warmup Iteration  30: 1359205.009 ops/s
Iteration   1: 1360380.228 ops/s
Iteration   2: 1312623.133 ops/s
Iteration   3: 1350461.212 ops/s
Iteration   4: 1299467.505 ops/s
Iteration   5: 1302622.533 ops/s
Iteration   6: 1322832.031 ops/s
Iteration   7: 1315611.303 ops/s
Iteration   8: 1310316.169 ops/s
Iteration   9: 1319250.610 ops/s
Iteration  10: 1319873.051 ops/s
Iteration  11: 1328353.336 ops/s
Iteration  12: 1328674.307 ops/s
Iteration  13: 1327079.117 ops/s
Iteration  14: 1313778.132 ops/s
Iteration  15: 1363570.267 ops/s
Iteration  16: 1348757.357 ops/s
Iteration  17: 1321608.216 ops/s
Iteration  18: 1276434.783 ops/s
Iteration  19: 1331659.758 ops/s
Iteration  20: 1303318.868 ops/s
Iteration  21: 1304935.545 ops/s
Iteration  22: 1332807.768 ops/s
Iteration  23: 1348858.203 ops/s
Iteration  24: 1309460.412 ops/s
Iteration  25: 1277013.023 ops/s
Iteration  26: 1288494.295 ops/s
Iteration  27: 1308944.757 ops/s
Iteration  28: 1294035.581 ops/s
Iteration  29: 1292532.290 ops/s
Iteration  30: 1304306.589 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeFromEntrySet":
  1317268.679 ±(99.9%) 14929.490 ops/s [Average]
  (min, avg, max) = (1276434.783, 1317268.679, 1363570.267), stdev = 22345.760
  CI (99.9%): [1302339.189, 1332198.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_removeFromEntrySet  thrpt   30  1317268.679 ± 14929.490  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1119842.883 ops/s
# Warmup Iteration   2: 2116291.535 ops/s
# Warmup Iteration   3: 2745936.712 ops/s
# Warmup Iteration   4: 2815888.577 ops/s
# Warmup Iteration   5: 2277807.959 ops/s
# Warmup Iteration   6: 2827746.157 ops/s
# Warmup Iteration   7: 2791470.317 ops/s
# Warmup Iteration   8: 2856744.475 ops/s
# Warmup Iteration   9: 2773682.882 ops/s
# Warmup Iteration  10: 2859587.262 ops/s
# Warmup Iteration  11: 2900518.935 ops/s
# Warmup Iteration  12: 2783065.006 ops/s
# Warmup Iteration  13: 2745865.492 ops/s
# Warmup Iteration  14: 2803963.821 ops/s
# Warmup Iteration  15: 2820543.565 ops/s
# Warmup Iteration  16: 2868092.467 ops/s
# Warmup Iteration  17: 2877826.890 ops/s
# Warmup Iteration  18: 2895235.489 ops/s
# Warmup Iteration  19: 2778381.057 ops/s
# Warmup Iteration  20: 2847089.033 ops/s
# Warmup Iteration  21: 2921929.296 ops/s
# Warmup Iteration  22: 2794896.189 ops/s
# Warmup Iteration  23: 2863346.140 ops/s
# Warmup Iteration  24: 2788739.172 ops/s
# Warmup Iteration  25: 2747409.989 ops/s
# Warmup Iteration  26: 2815723.259 ops/s
# Warmup Iteration  27: 2788542.799 ops/s
# Warmup Iteration  28: 2729771.925 ops/s
# Warmup Iteration  29: 2793156.632 ops/s
# Warmup Iteration  30: 2773475.210 ops/s
Iteration   1: 2720731.179 ops/s
Iteration   2: 2845839.460 ops/s
Iteration   3: 2921808.991 ops/s
Iteration   4: 2778887.073 ops/s
Iteration   5: 2872463.188 ops/s
Iteration   6: 3057916.882 ops/s
Iteration   7: 2998298.305 ops/s
Iteration   8: 2823378.325 ops/s
Iteration   9: 2888007.137 ops/s
Iteration  10: 2994487.309 ops/s
Iteration  11: 2829243.124 ops/s
Iteration  12: 2860808.824 ops/s
Iteration  13: 2792670.246 ops/s
Iteration  14: 2813930.638 ops/s
Iteration  15: 2731510.078 ops/s
Iteration  16: 2766037.067 ops/s
Iteration  17: 2777945.108 ops/s
Iteration  18: 2717285.540 ops/s
Iteration  19: 2775676.832 ops/s
Iteration  20: 2753542.335 ops/s
Iteration  21: 2749953.815 ops/s
Iteration  22: 2946147.737 ops/s
Iteration  23: 2910078.215 ops/s
Iteration  24: 2839582.783 ops/s
Iteration  25: 2763928.122 ops/s
Iteration  26: 2760872.708 ops/s
Iteration  27: 2801778.756 ops/s
Iteration  28: 2746193.966 ops/s
Iteration  29: 2797935.291 ops/s
Iteration  30: 2782808.077 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeFromKeySet":
  2827324.904 ±(99.9%) 58558.482 ops/s [Average]
  (min, avg, max) = (2717285.540, 2827324.904, 3057916.882), stdev = 87647.586
  CI (99.9%): [2768766.422, 2885883.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_removeFromKeySet  thrpt   30  2827324.904 ± 58558.482  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1002944.717 ops/s
# Warmup Iteration   2: 1629384.403 ops/s
# Warmup Iteration   3: 2198199.696 ops/s
# Warmup Iteration   4: 2187294.386 ops/s
# Warmup Iteration   5: 2208425.238 ops/s
# Warmup Iteration   6: 1774348.038 ops/s
# Warmup Iteration   7: 2276018.326 ops/s
# Warmup Iteration   8: 2170035.317 ops/s
# Warmup Iteration   9: 2242737.774 ops/s
# Warmup Iteration  10: 2183295.794 ops/s
# Warmup Iteration  11: 2223818.430 ops/s
# Warmup Iteration  12: 2191844.311 ops/s
# Warmup Iteration  13: 2183167.368 ops/s
# Warmup Iteration  14: 2180503.497 ops/s
# Warmup Iteration  15: 2187371.725 ops/s
# Warmup Iteration  16: 2212348.499 ops/s
# Warmup Iteration  17: 2183952.816 ops/s
# Warmup Iteration  18: 2181764.682 ops/s
# Warmup Iteration  19: 2158370.318 ops/s
# Warmup Iteration  20: 2146940.172 ops/s
# Warmup Iteration  21: 2221340.591 ops/s
# Warmup Iteration  22: 2221945.472 ops/s
# Warmup Iteration  23: 2175651.243 ops/s
# Warmup Iteration  24: 2157274.574 ops/s
# Warmup Iteration  25: 2182760.705 ops/s
# Warmup Iteration  26: 2209910.756 ops/s
# Warmup Iteration  27: 2177119.130 ops/s
# Warmup Iteration  28: 2186205.095 ops/s
# Warmup Iteration  29: 2187575.014 ops/s
# Warmup Iteration  30: 2196144.881 ops/s
Iteration   1: 2175825.469 ops/s
Iteration   2: 2201774.487 ops/s
Iteration   3: 2183488.512 ops/s
Iteration   4: 2172074.648 ops/s
Iteration   5: 2223859.834 ops/s
Iteration   6: 2194349.016 ops/s
Iteration   7: 2157975.683 ops/s
Iteration   8: 2169879.067 ops/s
Iteration   9: 2165884.905 ops/s
Iteration  10: 2186384.944 ops/s
Iteration  11: 2139415.826 ops/s
Iteration  12: 2292599.331 ops/s
Iteration  13: 2206864.005 ops/s
Iteration  14: 2156564.839 ops/s
Iteration  15: 2131052.807 ops/s
Iteration  16: 2196817.123 ops/s
Iteration  17: 2198938.842 ops/s
Iteration  18: 2153686.210 ops/s
Iteration  19: 2301919.483 ops/s
Iteration  20: 2397260.169 ops/s
Iteration  21: 2202620.936 ops/s
Iteration  22: 2249766.120 ops/s
Iteration  23: 2198790.653 ops/s
Iteration  24: 2129530.799 ops/s
Iteration  25: 2182842.952 ops/s
Iteration  26: 2176348.092 ops/s
Iteration  27: 2156858.829 ops/s
Iteration  28: 2156827.696 ops/s
Iteration  29: 2200089.321 ops/s
Iteration  30: 2218175.566 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeFromValues":
  2195948.872 ±(99.9%) 36912.205 ops/s [Average]
  (min, avg, max) = (2129530.799, 2195948.872, 2397260.169), stdev = 55248.455
  CI (99.9%): [2159036.667, 2232861.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_removeFromValues  thrpt   30  2195948.872 ± 36912.205  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171388.620 ops/s
# Warmup Iteration   2: 248024.746 ops/s
# Warmup Iteration   3: 369691.967 ops/s
# Warmup Iteration   4: 357539.644 ops/s
# Warmup Iteration   5: 362208.787 ops/s
# Warmup Iteration   6: 363898.618 ops/s
# Warmup Iteration   7: 294882.164 ops/s
# Warmup Iteration   8: 367909.988 ops/s
# Warmup Iteration   9: 363047.230 ops/s
# Warmup Iteration  10: 365142.186 ops/s
# Warmup Iteration  11: 377036.627 ops/s
# Warmup Iteration  12: 372010.772 ops/s
# Warmup Iteration  13: 393749.553 ops/s
# Warmup Iteration  14: 382289.722 ops/s
# Warmup Iteration  15: 376651.944 ops/s
# Warmup Iteration  16: 383544.533 ops/s
# Warmup Iteration  17: 379063.185 ops/s
# Warmup Iteration  18: 369024.390 ops/s
# Warmup Iteration  19: 362495.499 ops/s
# Warmup Iteration  20: 372007.142 ops/s
# Warmup Iteration  21: 386503.981 ops/s
# Warmup Iteration  22: 398025.808 ops/s
# Warmup Iteration  23: 396699.668 ops/s
# Warmup Iteration  24: 377148.252 ops/s
# Warmup Iteration  25: 365983.221 ops/s
# Warmup Iteration  26: 369784.144 ops/s
# Warmup Iteration  27: 362590.984 ops/s
# Warmup Iteration  28: 372930.268 ops/s
# Warmup Iteration  29: 374840.650 ops/s
# Warmup Iteration  30: 376908.304 ops/s
Iteration   1: 371175.597 ops/s
Iteration   2: 369674.070 ops/s
Iteration   3: 365092.841 ops/s
Iteration   4: 365537.014 ops/s
Iteration   5: 365551.996 ops/s
Iteration   6: 381380.669 ops/s
Iteration   7: 380353.132 ops/s
Iteration   8: 366873.836 ops/s
Iteration   9: 358224.245 ops/s
Iteration  10: 378099.154 ops/s
Iteration  11: 378565.057 ops/s
Iteration  12: 381182.677 ops/s
Iteration  13: 376852.496 ops/s
Iteration  14: 373965.500 ops/s
Iteration  15: 360531.460 ops/s
Iteration  16: 370272.746 ops/s
Iteration  17: 369294.913 ops/s
Iteration  18: 372479.233 ops/s
Iteration  19: 366051.018 ops/s
Iteration  20: 373396.746 ops/s
Iteration  21: 369133.188 ops/s
Iteration  22: 384289.653 ops/s
Iteration  23: 381014.741 ops/s
Iteration  24: 361291.121 ops/s
Iteration  25: 375170.448 ops/s
Iteration  26: 383681.011 ops/s
Iteration  27: 390954.352 ops/s
Iteration  28: 383408.349 ops/s
Iteration  29: 395930.684 ops/s
Iteration  30: 383180.927 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeIf":
  374420.296 ±(99.9%) 6072.199 ops/s [Average]
  (min, avg, max) = (358224.245, 374420.296, 395930.684), stdev = 9088.583
  CI (99.9%): [368348.096, 380492.495] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_removeIf  thrpt   30  374420.296 ± 6072.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 469842.302 ops/s
# Warmup Iteration   2: 634619.907 ops/s
# Warmup Iteration   3: 1114528.805 ops/s
# Warmup Iteration   4: 1103890.521 ops/s
# Warmup Iteration   5: 1107720.135 ops/s
# Warmup Iteration   6: 1100551.221 ops/s
# Warmup Iteration   7: 910959.306 ops/s
# Warmup Iteration   8: 1144863.071 ops/s
# Warmup Iteration   9: 1122737.127 ops/s
# Warmup Iteration  10: 1164167.363 ops/s
# Warmup Iteration  11: 1143858.207 ops/s
# Warmup Iteration  12: 1175656.174 ops/s
# Warmup Iteration  13: 1145094.170 ops/s
# Warmup Iteration  14: 1146211.810 ops/s
# Warmup Iteration  15: 1162052.226 ops/s
# Warmup Iteration  16: 1162959.199 ops/s
# Warmup Iteration  17: 1128984.137 ops/s
# Warmup Iteration  18: 1140032.882 ops/s
# Warmup Iteration  19: 1107314.873 ops/s
# Warmup Iteration  20: 1112379.248 ops/s
# Warmup Iteration  21: 1105183.967 ops/s
# Warmup Iteration  22: 1099240.469 ops/s
# Warmup Iteration  23: 1103989.901 ops/s
# Warmup Iteration  24: 1110930.211 ops/s
# Warmup Iteration  25: 1100214.169 ops/s
# Warmup Iteration  26: 1122878.106 ops/s
# Warmup Iteration  27: 1106106.180 ops/s
# Warmup Iteration  28: 1103393.779 ops/s
# Warmup Iteration  29: 1107804.496 ops/s
# Warmup Iteration  30: 1150236.046 ops/s
Iteration   1: 1147091.754 ops/s
Iteration   2: 1113452.615 ops/s
Iteration   3: 1109048.763 ops/s
Iteration   4: 1127148.464 ops/s
Iteration   5: 1095193.707 ops/s
Iteration   6: 1112627.853 ops/s
Iteration   7: 1150498.981 ops/s
Iteration   8: 1138793.333 ops/s
Iteration   9: 1137157.750 ops/s
Iteration  10: 1101249.062 ops/s
Iteration  11: 1155320.890 ops/s
Iteration  12: 1206298.265 ops/s
Iteration  13: 1132713.324 ops/s
Iteration  14: 1097399.962 ops/s
Iteration  15: 1112281.631 ops/s
Iteration  16: 1111367.785 ops/s
Iteration  17: 1126451.892 ops/s
Iteration  18: 1108075.604 ops/s
Iteration  19: 1120573.772 ops/s
Iteration  20: 1110135.629 ops/s
Iteration  21: 1115785.616 ops/s
Iteration  22: 1087105.038 ops/s
Iteration  23: 1098061.672 ops/s
Iteration  24: 1081527.641 ops/s
Iteration  25: 1112961.849 ops/s
Iteration  26: 1108960.013 ops/s
Iteration  27: 1125699.812 ops/s
Iteration  28: 1091055.511 ops/s
Iteration  29: 1094643.551 ops/s
Iteration  30: 1120100.646 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeKey":
  1118292.746 ±(99.9%) 16639.703 ops/s [Average]
  (min, avg, max) = (1081527.641, 1118292.746, 1206298.265), stdev = 24905.526
  CI (99.9%): [1101653.043, 1134932.449] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_removeKey  thrpt   30  1118292.746 ± 16639.703  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeNullFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeNullFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 396588.640 ops/s
# Warmup Iteration   2: 810181.843 ops/s
# Warmup Iteration   3: 960955.544 ops/s
# Warmup Iteration   4: 880483.004 ops/s
# Warmup Iteration   5: 865733.776 ops/s
# Warmup Iteration   6: 940749.383 ops/s
# Warmup Iteration   7: 979231.518 ops/s
# Warmup Iteration   8: 951118.657 ops/s
# Warmup Iteration   9: 942961.146 ops/s
# Warmup Iteration  10: 961672.445 ops/s
# Warmup Iteration  11: 941936.637 ops/s
# Warmup Iteration  12: 997585.613 ops/s
# Warmup Iteration  13: 983368.930 ops/s
# Warmup Iteration  14: 956989.918 ops/s
# Warmup Iteration  15: 989213.471 ops/s
# Warmup Iteration  16: 992616.918 ops/s
# Warmup Iteration  17: 944736.648 ops/s
# Warmup Iteration  18: 963343.126 ops/s
# Warmup Iteration  19: 956083.561 ops/s
# Warmup Iteration  20: 964301.896 ops/s
# Warmup Iteration  21: 968986.624 ops/s
# Warmup Iteration  22: 949956.574 ops/s
# Warmup Iteration  23: 979272.269 ops/s
# Warmup Iteration  24: 959066.955 ops/s
# Warmup Iteration  25: 940865.289 ops/s
# Warmup Iteration  26: 952907.035 ops/s
# Warmup Iteration  27: 971902.896 ops/s
# Warmup Iteration  28: 973787.146 ops/s
# Warmup Iteration  29: 942759.509 ops/s
# Warmup Iteration  30: 1006371.232 ops/s
Iteration   1: 1038838.721 ops/s
Iteration   2: 1045417.731 ops/s
Iteration   3: 1027238.799 ops/s
Iteration   4: 932474.015 ops/s
Iteration   5: 962642.072 ops/s
Iteration   6: 957815.828 ops/s
Iteration   7: 950417.127 ops/s
Iteration   8: 945241.587 ops/s
Iteration   9: 944938.414 ops/s
Iteration  10: 950704.185 ops/s
Iteration  11: 952340.142 ops/s
Iteration  12: 928061.564 ops/s
Iteration  13: 939224.913 ops/s
Iteration  14: 927210.707 ops/s
Iteration  15: 999747.317 ops/s
Iteration  16: 1007740.025 ops/s
Iteration  17: 946247.042 ops/s
Iteration  18: 940256.580 ops/s
Iteration  19: 947010.042 ops/s
Iteration  20: 936801.680 ops/s
Iteration  21: 954001.291 ops/s
Iteration  22: 936628.806 ops/s
Iteration  23: 983279.157 ops/s
Iteration  24: 983737.298 ops/s
Iteration  25: 944843.979 ops/s
Iteration  26: 957022.112 ops/s
Iteration  27: 943694.651 ops/s
Iteration  28: 942823.916 ops/s
Iteration  29: 989165.471 ops/s
Iteration  30: 1013762.565 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeNullFromKeySet":
  964310.925 ±(99.9%) 22478.098 ops/s [Average]
  (min, avg, max) = (927210.707, 964310.925, 1045417.731), stdev = 33644.161
  CI (99.9%): [941832.827, 986789.023] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_removeNullFromKeySet  thrpt   30  964310.925 ± 22478.098  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeNullFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeNullFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 515885.497 ops/s
# Warmup Iteration   2: 872011.084 ops/s
# Warmup Iteration   3: 1100556.779 ops/s
# Warmup Iteration   4: 1071839.579 ops/s
# Warmup Iteration   5: 893500.733 ops/s
# Warmup Iteration   6: 1067898.998 ops/s
# Warmup Iteration   7: 1070707.097 ops/s
# Warmup Iteration   8: 1083367.387 ops/s
# Warmup Iteration   9: 1072130.381 ops/s
# Warmup Iteration  10: 1076464.461 ops/s
# Warmup Iteration  11: 1061557.917 ops/s
# Warmup Iteration  12: 1075545.852 ops/s
# Warmup Iteration  13: 1059214.030 ops/s
# Warmup Iteration  14: 1078892.858 ops/s
# Warmup Iteration  15: 1077867.738 ops/s
# Warmup Iteration  16: 1085190.579 ops/s
# Warmup Iteration  17: 1063563.311 ops/s
# Warmup Iteration  18: 1061938.510 ops/s
# Warmup Iteration  19: 1082502.435 ops/s
# Warmup Iteration  20: 1087110.117 ops/s
# Warmup Iteration  21: 1057682.375 ops/s
# Warmup Iteration  22: 1095742.558 ops/s
# Warmup Iteration  23: 1065165.954 ops/s
# Warmup Iteration  24: 1074172.713 ops/s
# Warmup Iteration  25: 1059102.831 ops/s
# Warmup Iteration  26: 1087410.143 ops/s
# Warmup Iteration  27: 1115784.541 ops/s
# Warmup Iteration  28: 1061447.228 ops/s
# Warmup Iteration  29: 1065382.478 ops/s
# Warmup Iteration  30: 1077025.583 ops/s
Iteration   1: 1075016.575 ops/s
Iteration   2: 1100200.097 ops/s
Iteration   3: 1074936.654 ops/s
Iteration   4: 1133767.745 ops/s
Iteration   5: 1110503.739 ops/s
Iteration   6: 1070295.164 ops/s
Iteration   7: 1063653.121 ops/s
Iteration   8: 1056927.585 ops/s
Iteration   9: 1097371.766 ops/s
Iteration  10: 1066620.206 ops/s
Iteration  11: 1058465.184 ops/s
Iteration  12: 1060161.783 ops/s
Iteration  13: 1059766.471 ops/s
Iteration  14: 1088920.556 ops/s
Iteration  15: 1074417.411 ops/s
Iteration  16: 1076986.909 ops/s
Iteration  17: 1065501.235 ops/s
Iteration  18: 1068399.360 ops/s
Iteration  19: 1071033.948 ops/s
Iteration  20: 1075452.096 ops/s
Iteration  21: 1115066.573 ops/s
Iteration  22: 1064170.751 ops/s
Iteration  23: 1052641.852 ops/s
Iteration  24: 1076065.292 ops/s
Iteration  25: 1072155.554 ops/s
Iteration  26: 1081768.325 ops/s
Iteration  27: 1071148.219 ops/s
Iteration  28: 1055205.992 ops/s
Iteration  29: 1089923.611 ops/s
Iteration  30: 1088243.162 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeNullFromValues":
  1077159.565 ±(99.9%) 12660.275 ops/s [Average]
  (min, avg, max) = (1052641.852, 1077159.565, 1133767.745), stdev = 18949.305
  CI (99.9%): [1064499.290, 1089819.839] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_removeNullFromValues  thrpt   30  1077159.565 ± 12660.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687701.804 ops/s
# Warmup Iteration   2: 1568673.729 ops/s
# Warmup Iteration   3: 1814583.736 ops/s
# Warmup Iteration   4: 1584090.694 ops/s
# Warmup Iteration   5: 1829619.587 ops/s
# Warmup Iteration   6: 1814955.750 ops/s
# Warmup Iteration   7: 1847391.693 ops/s
# Warmup Iteration   8: 1839449.106 ops/s
# Warmup Iteration   9: 1833303.238 ops/s
# Warmup Iteration  10: 1821691.110 ops/s
# Warmup Iteration  11: 1849043.167 ops/s
# Warmup Iteration  12: 1916200.733 ops/s
# Warmup Iteration  13: 1864296.804 ops/s
# Warmup Iteration  14: 1865823.498 ops/s
# Warmup Iteration  15: 1912922.070 ops/s
# Warmup Iteration  16: 1850901.771 ops/s
# Warmup Iteration  17: 1881556.487 ops/s
# Warmup Iteration  18: 1824145.170 ops/s
# Warmup Iteration  19: 1824893.622 ops/s
# Warmup Iteration  20: 1825635.724 ops/s
# Warmup Iteration  21: 1864074.765 ops/s
# Warmup Iteration  22: 1840716.908 ops/s
# Warmup Iteration  23: 1845790.062 ops/s
# Warmup Iteration  24: 1859317.287 ops/s
# Warmup Iteration  25: 1879132.447 ops/s
# Warmup Iteration  26: 1819536.230 ops/s
# Warmup Iteration  27: 1823416.697 ops/s
# Warmup Iteration  28: 1814033.801 ops/s
# Warmup Iteration  29: 1828384.218 ops/s
# Warmup Iteration  30: 1826054.200 ops/s
Iteration   1: 1869060.947 ops/s
Iteration   2: 1827486.899 ops/s
Iteration   3: 1842296.739 ops/s
Iteration   4: 1825553.425 ops/s
Iteration   5: 1837610.517 ops/s
Iteration   6: 1834328.253 ops/s
Iteration   7: 1845270.285 ops/s
Iteration   8: 1818019.375 ops/s
Iteration   9: 1829824.168 ops/s
Iteration  10: 1823987.279 ops/s
Iteration  11: 1827440.765 ops/s
Iteration  12: 1828679.520 ops/s
Iteration  13: 1850747.086 ops/s
Iteration  14: 1836778.596 ops/s
Iteration  15: 1844394.823 ops/s
Iteration  16: 1842915.578 ops/s
Iteration  17: 1835187.824 ops/s
Iteration  18: 1791139.874 ops/s
Iteration  19: 1828980.679 ops/s
Iteration  20: 1818319.467 ops/s
Iteration  21: 1814312.466 ops/s
Iteration  22: 1822083.101 ops/s
Iteration  23: 1850817.435 ops/s
Iteration  24: 1892307.222 ops/s
Iteration  25: 1822557.829 ops/s
Iteration  26: 1883239.085 ops/s
Iteration  27: 1911219.275 ops/s
Iteration  28: 1912204.581 ops/s
Iteration  29: 1868126.898 ops/s
Iteration  30: 1842715.819 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_removeObject":
  1842586.860 ±(99.9%) 18591.851 ops/s [Average]
  (min, avg, max) = (1791139.874, 1842586.860, 1912204.581), stdev = 27827.409
  CI (99.9%): [1823995.010, 1861178.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_removeObject  thrpt   30  1842586.860 ± 18591.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 309670.359 ops/s
# Warmup Iteration   2: 607805.664 ops/s
# Warmup Iteration   3: 743175.559 ops/s
# Warmup Iteration   4: 729402.924 ops/s
# Warmup Iteration   5: 577499.239 ops/s
# Warmup Iteration   6: 716803.352 ops/s
# Warmup Iteration   7: 735894.155 ops/s
# Warmup Iteration   8: 732704.599 ops/s
# Warmup Iteration   9: 744300.023 ops/s
# Warmup Iteration  10: 758886.862 ops/s
# Warmup Iteration  11: 717145.325 ops/s
# Warmup Iteration  12: 709453.174 ops/s
# Warmup Iteration  13: 738397.938 ops/s
# Warmup Iteration  14: 716212.251 ops/s
# Warmup Iteration  15: 718307.267 ops/s
# Warmup Iteration  16: 717951.210 ops/s
# Warmup Iteration  17: 782178.500 ops/s
# Warmup Iteration  18: 727018.066 ops/s
# Warmup Iteration  19: 723927.041 ops/s
# Warmup Iteration  20: 715155.237 ops/s
# Warmup Iteration  21: 707954.923 ops/s
# Warmup Iteration  22: 744068.479 ops/s
# Warmup Iteration  23: 737480.075 ops/s
# Warmup Iteration  24: 731995.113 ops/s
# Warmup Iteration  25: 710821.433 ops/s
# Warmup Iteration  26: 717218.922 ops/s
# Warmup Iteration  27: 747477.167 ops/s
# Warmup Iteration  28: 714039.866 ops/s
# Warmup Iteration  29: 730829.321 ops/s
# Warmup Iteration  30: 776130.748 ops/s
Iteration   1: 728997.612 ops/s
Iteration   2: 705164.137 ops/s
Iteration   3: 721834.369 ops/s
Iteration   4: 715152.107 ops/s
Iteration   5: 726138.172 ops/s
Iteration   6: 738618.016 ops/s
Iteration   7: 763430.612 ops/s
Iteration   8: 783336.969 ops/s
Iteration   9: 708136.976 ops/s
Iteration  10: 717463.759 ops/s
Iteration  11: 716777.556 ops/s
Iteration  12: 719347.466 ops/s
Iteration  13: 741701.488 ops/s
Iteration  14: 734930.361 ops/s
Iteration  15: 730909.129 ops/s
Iteration  16: 778489.470 ops/s
Iteration  17: 755024.492 ops/s
Iteration  18: 747604.774 ops/s
Iteration  19: 714923.294 ops/s
Iteration  20: 716429.696 ops/s
Iteration  21: 711604.618 ops/s
Iteration  22: 731593.658 ops/s
Iteration  23: 720339.905 ops/s
Iteration  24: 707336.538 ops/s
Iteration  25: 723116.823 ops/s
Iteration  26: 747211.649 ops/s
Iteration  27: 725044.723 ops/s
Iteration  28: 734392.161 ops/s
Iteration  29: 722418.112 ops/s
Iteration  30: 726785.161 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromEntrySet":
  730475.127 ±(99.9%) 13093.072 ops/s [Average]
  (min, avg, max) = (705164.137, 730475.127, 783336.969), stdev = 19597.095
  CI (99.9%): [717382.055, 743568.198] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromEntrySet  thrpt   30  730475.127 ± 13093.072  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 801568.937 ops/s
# Warmup Iteration   2: 1347050.854 ops/s
# Warmup Iteration   3: 1654979.965 ops/s
# Warmup Iteration   4: 1750146.125 ops/s
# Warmup Iteration   5: 1572555.844 ops/s
# Warmup Iteration   6: 1488298.445 ops/s
# Warmup Iteration   7: 1693337.050 ops/s
# Warmup Iteration   8: 1694371.515 ops/s
# Warmup Iteration   9: 1709842.386 ops/s
# Warmup Iteration  10: 1686761.011 ops/s
# Warmup Iteration  11: 1677819.138 ops/s
# Warmup Iteration  12: 1679666.066 ops/s
# Warmup Iteration  13: 1671561.054 ops/s
# Warmup Iteration  14: 1669814.552 ops/s
# Warmup Iteration  15: 1696734.831 ops/s
# Warmup Iteration  16: 1760656.687 ops/s
# Warmup Iteration  17: 1651183.456 ops/s
# Warmup Iteration  18: 1661856.963 ops/s
# Warmup Iteration  19: 1649175.892 ops/s
# Warmup Iteration  20: 1678437.041 ops/s
# Warmup Iteration  21: 1820721.197 ops/s
# Warmup Iteration  22: 1662722.776 ops/s
# Warmup Iteration  23: 1662550.088 ops/s
# Warmup Iteration  24: 1662360.164 ops/s
# Warmup Iteration  25: 1665726.750 ops/s
# Warmup Iteration  26: 1736776.005 ops/s
# Warmup Iteration  27: 1666118.670 ops/s
# Warmup Iteration  28: 1676431.765 ops/s
# Warmup Iteration  29: 1720143.283 ops/s
# Warmup Iteration  30: 1669147.886 ops/s
Iteration   1: 1739170.987 ops/s
Iteration   2: 1647665.292 ops/s
Iteration   3: 1644084.204 ops/s
Iteration   4: 1647887.687 ops/s
Iteration   5: 1685187.514 ops/s
Iteration   6: 1678931.187 ops/s
Iteration   7: 1678364.915 ops/s
Iteration   8: 1626128.351 ops/s
Iteration   9: 1651580.251 ops/s
Iteration  10: 1699766.563 ops/s
Iteration  11: 1720779.136 ops/s
Iteration  12: 1725444.868 ops/s
Iteration  13: 1827868.833 ops/s
Iteration  14: 1825010.629 ops/s
Iteration  15: 1749327.932 ops/s
Iteration  16: 1696766.267 ops/s
Iteration  17: 1725842.702 ops/s
Iteration  18: 1742693.943 ops/s
Iteration  19: 1811024.832 ops/s
Iteration  20: 1793278.698 ops/s
Iteration  21: 1808609.317 ops/s
Iteration  22: 1837496.129 ops/s
Iteration  23: 1785624.873 ops/s
Iteration  24: 1705137.666 ops/s
Iteration  25: 1737808.804 ops/s
Iteration  26: 1745568.525 ops/s
Iteration  27: 1805152.431 ops/s
Iteration  28: 1837437.436 ops/s
Iteration  29: 1833526.335 ops/s
Iteration  30: 1773950.683 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromKeySet":
  1739570.566 ±(99.9%) 44021.719 ops/s [Average]
  (min, avg, max) = (1626128.351, 1739570.566, 1837496.129), stdev = 65889.641
  CI (99.9%): [1695548.847, 1783592.285] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromKeySet  thrpt   30  1739570.566 ± 44021.719  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromKeySet_null_collision$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromKeySet_null_collision

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 357966.755 ops/s
# Warmup Iteration   2: 947960.638 ops/s
# Warmup Iteration   3: 973859.869 ops/s
# Warmup Iteration   4: 767735.972 ops/s
# Warmup Iteration   5: 987481.454 ops/s
# Warmup Iteration   6: 949794.107 ops/s
# Warmup Iteration   7: 959599.432 ops/s
# Warmup Iteration   8: 938484.564 ops/s
# Warmup Iteration   9: 928336.888 ops/s
# Warmup Iteration  10: 937794.311 ops/s
# Warmup Iteration  11: 942870.213 ops/s
# Warmup Iteration  12: 958156.607 ops/s
# Warmup Iteration  13: 963571.578 ops/s
# Warmup Iteration  14: 986450.130 ops/s
# Warmup Iteration  15: 994205.346 ops/s
# Warmup Iteration  16: 983227.752 ops/s
# Warmup Iteration  17: 984622.678 ops/s
# Warmup Iteration  18: 1031433.867 ops/s
# Warmup Iteration  19: 1019925.308 ops/s
# Warmup Iteration  20: 991242.753 ops/s
# Warmup Iteration  21: 984229.840 ops/s
# Warmup Iteration  22: 967172.180 ops/s
# Warmup Iteration  23: 1004692.812 ops/s
# Warmup Iteration  24: 973103.332 ops/s
# Warmup Iteration  25: 995547.596 ops/s
# Warmup Iteration  26: 1000608.217 ops/s
# Warmup Iteration  27: 977418.568 ops/s
# Warmup Iteration  28: 989721.806 ops/s
# Warmup Iteration  29: 953274.623 ops/s
# Warmup Iteration  30: 965763.708 ops/s
Iteration   1: 956470.175 ops/s
Iteration   2: 979988.528 ops/s
Iteration   3: 947277.579 ops/s
Iteration   4: 989306.069 ops/s
Iteration   5: 975765.778 ops/s
Iteration   6: 975333.123 ops/s
Iteration   7: 951736.106 ops/s
Iteration   8: 952236.125 ops/s
Iteration   9: 986487.726 ops/s
Iteration  10: 998469.037 ops/s
Iteration  11: 986845.764 ops/s
Iteration  12: 940671.402 ops/s
Iteration  13: 941785.352 ops/s
Iteration  14: 944583.100 ops/s
Iteration  15: 942794.470 ops/s
Iteration  16: 942254.765 ops/s
Iteration  17: 931818.370 ops/s
Iteration  18: 962852.084 ops/s
Iteration  19: 941423.438 ops/s
Iteration  20: 939987.695 ops/s
Iteration  21: 949725.196 ops/s
Iteration  22: 955947.200 ops/s
Iteration  23: 954925.006 ops/s
Iteration  24: 965709.327 ops/s
Iteration  25: 961425.168 ops/s
Iteration  26: 1003045.012 ops/s
Iteration  27: 934413.934 ops/s
Iteration  28: 990259.125 ops/s
Iteration  29: 932067.824 ops/s
Iteration  30: 958406.951 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromKeySet_null_collision":
  959800.381 ±(99.9%) 13835.416 ops/s [Average]
  (min, avg, max) = (931818.370, 959800.381, 1003045.012), stdev = 20708.201
  CI (99.9%): [945964.965, 973635.797] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromKeySet_null_collision  thrpt   30  959800.381 ± 13835.416  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701645.193 ops/s
# Warmup Iteration   2: 1096802.597 ops/s
# Warmup Iteration   3: 1428434.743 ops/s
# Warmup Iteration   4: 1419589.187 ops/s
# Warmup Iteration   5: 1482541.707 ops/s
# Warmup Iteration   6: 1304002.718 ops/s
# Warmup Iteration   7: 1337328.073 ops/s
# Warmup Iteration   8: 1478425.885 ops/s
# Warmup Iteration   9: 1454211.410 ops/s
# Warmup Iteration  10: 1460132.966 ops/s
# Warmup Iteration  11: 1427348.734 ops/s
# Warmup Iteration  12: 1469247.406 ops/s
# Warmup Iteration  13: 1512746.754 ops/s
# Warmup Iteration  14: 1503525.067 ops/s
# Warmup Iteration  15: 1491584.176 ops/s
# Warmup Iteration  16: 1489344.093 ops/s
# Warmup Iteration  17: 1498791.399 ops/s
# Warmup Iteration  18: 1415765.883 ops/s
# Warmup Iteration  19: 1472686.962 ops/s
# Warmup Iteration  20: 1465141.556 ops/s
# Warmup Iteration  21: 1482799.736 ops/s
# Warmup Iteration  22: 1458610.291 ops/s
# Warmup Iteration  23: 1447601.204 ops/s
# Warmup Iteration  24: 1440911.190 ops/s
# Warmup Iteration  25: 1454906.477 ops/s
# Warmup Iteration  26: 1421006.745 ops/s
# Warmup Iteration  27: 1442094.282 ops/s
# Warmup Iteration  28: 1454078.387 ops/s
# Warmup Iteration  29: 1450931.355 ops/s
# Warmup Iteration  30: 1490727.531 ops/s
Iteration   1: 1437497.440 ops/s
Iteration   2: 1437487.184 ops/s
Iteration   3: 1436645.951 ops/s
Iteration   4: 1443234.926 ops/s
Iteration   5: 1430789.597 ops/s
Iteration   6: 1439307.761 ops/s
Iteration   7: 1444313.558 ops/s
Iteration   8: 1418709.006 ops/s
Iteration   9: 1451917.659 ops/s
Iteration  10: 1438893.862 ops/s
Iteration  11: 1434700.124 ops/s
Iteration  12: 1517318.830 ops/s
Iteration  13: 1419401.266 ops/s
Iteration  14: 1442318.934 ops/s
Iteration  15: 1415580.090 ops/s
Iteration  16: 1436386.208 ops/s
Iteration  17: 1489741.978 ops/s
Iteration  18: 1436551.920 ops/s
Iteration  19: 1472094.277 ops/s
Iteration  20: 1523229.355 ops/s
Iteration  21: 1561979.711 ops/s
Iteration  22: 1533835.300 ops/s
Iteration  23: 1533272.776 ops/s
Iteration  24: 1515369.376 ops/s
Iteration  25: 1500952.404 ops/s
Iteration  26: 1580909.114 ops/s
Iteration  27: 1483637.840 ops/s
Iteration  28: 1495728.158 ops/s
Iteration  29: 1477206.845 ops/s
Iteration  30: 1460198.984 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromValues":
  1470307.014 ±(99.9%) 30162.268 ops/s [Average]
  (min, avg, max) = (1415580.090, 1470307.014, 1580909.114), stdev = 45145.467
  CI (99.9%): [1440144.746, 1500469.283] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_retainAllFromValues  thrpt   30  1470307.014 ± 30162.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 839575.715 ops/s
# Warmup Iteration   2: 2133418.393 ops/s
# Warmup Iteration   3: 2183362.447 ops/s
# Warmup Iteration   4: 1764904.382 ops/s
# Warmup Iteration   5: 2213850.936 ops/s
# Warmup Iteration   6: 2180543.301 ops/s
# Warmup Iteration   7: 2375300.350 ops/s
# Warmup Iteration   8: 2247849.140 ops/s
# Warmup Iteration   9: 2222755.816 ops/s
# Warmup Iteration  10: 2230326.848 ops/s
# Warmup Iteration  11: 2158697.028 ops/s
# Warmup Iteration  12: 2221766.266 ops/s
# Warmup Iteration  13: 2279585.595 ops/s
# Warmup Iteration  14: 2158178.278 ops/s
# Warmup Iteration  15: 2173467.216 ops/s
# Warmup Iteration  16: 2182885.975 ops/s
# Warmup Iteration  17: 2162531.249 ops/s
# Warmup Iteration  18: 2202238.974 ops/s
# Warmup Iteration  19: 2161395.540 ops/s
# Warmup Iteration  20: 2242232.050 ops/s
# Warmup Iteration  21: 2182253.454 ops/s
# Warmup Iteration  22: 2181198.950 ops/s
# Warmup Iteration  23: 2193683.484 ops/s
# Warmup Iteration  24: 2172566.267 ops/s
# Warmup Iteration  25: 2205836.314 ops/s
# Warmup Iteration  26: 2273892.562 ops/s
# Warmup Iteration  27: 2267421.393 ops/s
# Warmup Iteration  28: 2217618.903 ops/s
# Warmup Iteration  29: 2278082.639 ops/s
# Warmup Iteration  30: 2204556.374 ops/s
Iteration   1: 2219512.270 ops/s
Iteration   2: 2188912.125 ops/s
Iteration   3: 2154341.810 ops/s
Iteration   4: 2196991.341 ops/s
Iteration   5: 2166174.541 ops/s
Iteration   6: 2209580.667 ops/s
Iteration   7: 2134757.334 ops/s
Iteration   8: 2258459.450 ops/s
Iteration   9: 2204849.279 ops/s
Iteration  10: 2205703.865 ops/s
Iteration  11: 2270881.010 ops/s
Iteration  12: 2271932.984 ops/s
Iteration  13: 2169685.258 ops/s
Iteration  14: 2250999.319 ops/s
Iteration  15: 2242338.228 ops/s
Iteration  16: 2202571.984 ops/s
Iteration  17: 2225466.967 ops/s
Iteration  18: 2242884.908 ops/s
Iteration  19: 2210805.029 ops/s
Iteration  20: 2257541.210 ops/s
Iteration  21: 2257242.016 ops/s
Iteration  22: 2216128.502 ops/s
Iteration  23: 2210527.469 ops/s
Iteration  24: 2227893.999 ops/s
Iteration  25: 2216794.464 ops/s
Iteration  26: 2309594.164 ops/s
Iteration  27: 2366628.659 ops/s
Iteration  28: 2369365.895 ops/s
Iteration  29: 2343598.811 ops/s
Iteration  30: 2354633.278 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_select":
  2238559.895 ±(99.9%) 40410.136 ops/s [Average]
  (min, avg, max) = (2134757.334, 2238559.895, 2369365.895), stdev = 60483.993
  CI (99.9%): [2198149.759, 2278970.030] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_select  thrpt   30  2238559.895 ± 40410.136  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_selectInstancesOf_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_selectInstancesOf_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688247.132 ops/s
# Warmup Iteration   2: 1406792.358 ops/s
# Warmup Iteration   3: 1537850.536 ops/s
# Warmup Iteration   4: 1552750.285 ops/s
# Warmup Iteration   5: 1264039.730 ops/s
# Warmup Iteration   6: 1533596.466 ops/s
# Warmup Iteration   7: 1559249.846 ops/s
# Warmup Iteration   8: 1561270.285 ops/s
# Warmup Iteration   9: 1546783.418 ops/s
# Warmup Iteration  10: 1541104.371 ops/s
# Warmup Iteration  11: 1545894.318 ops/s
# Warmup Iteration  12: 1539677.121 ops/s
# Warmup Iteration  13: 1538603.955 ops/s
# Warmup Iteration  14: 1547672.705 ops/s
# Warmup Iteration  15: 1544641.165 ops/s
# Warmup Iteration  16: 1553810.647 ops/s
# Warmup Iteration  17: 1540747.817 ops/s
# Warmup Iteration  18: 1561802.544 ops/s
# Warmup Iteration  19: 1549080.030 ops/s
# Warmup Iteration  20: 1576620.627 ops/s
# Warmup Iteration  21: 1539472.964 ops/s
# Warmup Iteration  22: 1562215.280 ops/s
# Warmup Iteration  23: 1575483.631 ops/s
# Warmup Iteration  24: 1565314.886 ops/s
# Warmup Iteration  25: 1568065.413 ops/s
# Warmup Iteration  26: 1547997.980 ops/s
# Warmup Iteration  27: 1559830.903 ops/s
# Warmup Iteration  28: 1548981.787 ops/s
# Warmup Iteration  29: 1545571.272 ops/s
# Warmup Iteration  30: 1548185.256 ops/s
Iteration   1: 1560536.599 ops/s
Iteration   2: 1554481.773 ops/s
Iteration   3: 1577294.280 ops/s
Iteration   4: 1601188.963 ops/s
Iteration   5: 1574858.760 ops/s
Iteration   6: 1569546.872 ops/s
Iteration   7: 1571220.318 ops/s
Iteration   8: 1576643.294 ops/s
Iteration   9: 1566873.776 ops/s
Iteration  10: 1574282.640 ops/s
Iteration  11: 1554978.467 ops/s
Iteration  12: 1537717.641 ops/s
Iteration  13: 1564481.390 ops/s
Iteration  14: 1562714.494 ops/s
Iteration  15: 1554284.596 ops/s
Iteration  16: 1555348.233 ops/s
Iteration  17: 1536821.555 ops/s
Iteration  18: 1517223.652 ops/s
Iteration  19: 1478240.114 ops/s
Iteration  20: 1474235.388 ops/s
Iteration  21: 1545325.263 ops/s
Iteration  22: 1556997.989 ops/s
Iteration  23: 1572059.916 ops/s
Iteration  24: 1542003.819 ops/s
Iteration  25: 1574347.819 ops/s
Iteration  26: 1549135.171 ops/s
Iteration  27: 1576065.296 ops/s
Iteration  28: 1545279.560 ops/s
Iteration  29: 1574407.625 ops/s
Iteration  30: 1554231.835 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_selectInstancesOf_value":
  1555094.237 ±(99.9%) 17984.961 ops/s [Average]
  (min, avg, max) = (1474235.388, 1555094.237, 1601188.963), stdev = 26919.044
  CI (99.9%): [1537109.276, 1573079.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_selectInstancesOf_value  thrpt   30  1555094.237 ± 17984.961  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_selectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_selectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 572219.437 ops/s
# Warmup Iteration   2: 1167773.664 ops/s
# Warmup Iteration   3: 1223228.718 ops/s
# Warmup Iteration   4: 1237013.758 ops/s
# Warmup Iteration   5: 1032339.956 ops/s
# Warmup Iteration   6: 1237630.605 ops/s
# Warmup Iteration   7: 1261241.734 ops/s
# Warmup Iteration   8: 1249028.859 ops/s
# Warmup Iteration   9: 1243366.690 ops/s
# Warmup Iteration  10: 1253140.440 ops/s
# Warmup Iteration  11: 1241524.732 ops/s
# Warmup Iteration  12: 1251218.053 ops/s
# Warmup Iteration  13: 1177314.543 ops/s
# Warmup Iteration  14: 1173288.217 ops/s
# Warmup Iteration  15: 1178051.292 ops/s
# Warmup Iteration  16: 1179751.481 ops/s
# Warmup Iteration  17: 1190132.285 ops/s
# Warmup Iteration  18: 1261468.115 ops/s
# Warmup Iteration  19: 1260015.022 ops/s
# Warmup Iteration  20: 1257865.285 ops/s
# Warmup Iteration  21: 1164614.857 ops/s
# Warmup Iteration  22: 1223391.261 ops/s
# Warmup Iteration  23: 1193445.726 ops/s
# Warmup Iteration  24: 1199410.133 ops/s
# Warmup Iteration  25: 1177311.318 ops/s
# Warmup Iteration  26: 1221161.298 ops/s
# Warmup Iteration  27: 1171469.699 ops/s
# Warmup Iteration  28: 1186525.792 ops/s
# Warmup Iteration  29: 1168798.483 ops/s
# Warmup Iteration  30: 1175971.254 ops/s
Iteration   1: 1174721.440 ops/s
Iteration   2: 1170122.978 ops/s
Iteration   3: 1182483.134 ops/s
Iteration   4: 1215947.744 ops/s
Iteration   5: 1183063.665 ops/s
Iteration   6: 1195732.288 ops/s
Iteration   7: 1167779.442 ops/s
Iteration   8: 1193393.008 ops/s
Iteration   9: 1171636.177 ops/s
Iteration  10: 1201944.443 ops/s
Iteration  11: 1225595.844 ops/s
Iteration  12: 1215746.785 ops/s
Iteration  13: 1161162.751 ops/s
Iteration  14: 1165097.504 ops/s
Iteration  15: 1283297.371 ops/s
Iteration  16: 1214542.975 ops/s
Iteration  17: 1228918.541 ops/s
Iteration  18: 1226718.189 ops/s
Iteration  19: 1217023.265 ops/s
Iteration  20: 1220705.833 ops/s
Iteration  21: 1232743.846 ops/s
Iteration  22: 1154068.436 ops/s
Iteration  23: 1182392.667 ops/s
Iteration  24: 1177570.589 ops/s
Iteration  25: 1169111.792 ops/s
Iteration  26: 1214609.178 ops/s
Iteration  27: 1240422.657 ops/s
Iteration  28: 1173144.381 ops/s
Iteration  29: 1152815.651 ops/s
Iteration  30: 1178430.200 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_selectMap":
  1196364.759 ±(99.9%) 20442.233 ops/s [Average]
  (min, avg, max) = (1152815.651, 1196364.759, 1283297.371), stdev = 30596.975
  CI (99.9%): [1175922.526, 1216806.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_selectMap  thrpt   30  1196364.759 ± 20442.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 842197.093 ops/s
# Warmup Iteration   2: 1983743.164 ops/s
# Warmup Iteration   3: 2183399.143 ops/s
# Warmup Iteration   4: 1872600.465 ops/s
# Warmup Iteration   5: 1911637.288 ops/s
# Warmup Iteration   6: 2089741.391 ops/s
# Warmup Iteration   7: 2200331.801 ops/s
# Warmup Iteration   8: 2117429.505 ops/s
# Warmup Iteration   9: 2111698.691 ops/s
# Warmup Iteration  10: 2207638.261 ops/s
# Warmup Iteration  11: 2144587.076 ops/s
# Warmup Iteration  12: 2115716.477 ops/s
# Warmup Iteration  13: 2106533.410 ops/s
# Warmup Iteration  14: 2160658.879 ops/s
# Warmup Iteration  15: 2105025.465 ops/s
# Warmup Iteration  16: 2150106.124 ops/s
# Warmup Iteration  17: 2160195.220 ops/s
# Warmup Iteration  18: 2171708.196 ops/s
# Warmup Iteration  19: 2189046.408 ops/s
# Warmup Iteration  20: 2142386.604 ops/s
# Warmup Iteration  21: 2126238.279 ops/s
# Warmup Iteration  22: 2229215.432 ops/s
# Warmup Iteration  23: 2146774.520 ops/s
# Warmup Iteration  24: 2160724.096 ops/s
# Warmup Iteration  25: 2134628.886 ops/s
# Warmup Iteration  26: 2138307.129 ops/s
# Warmup Iteration  27: 2151982.163 ops/s
# Warmup Iteration  28: 2091943.203 ops/s
# Warmup Iteration  29: 2100046.145 ops/s
# Warmup Iteration  30: 2073391.413 ops/s
Iteration   1: 2091325.121 ops/s
Iteration   2: 2188541.038 ops/s
Iteration   3: 2148144.554 ops/s
Iteration   4: 2108761.569 ops/s
Iteration   5: 2090258.184 ops/s
Iteration   6: 2067673.990 ops/s
Iteration   7: 2132070.510 ops/s
Iteration   8: 2188671.294 ops/s
Iteration   9: 2101190.017 ops/s
Iteration  10: 2085620.151 ops/s
Iteration  11: 2057983.422 ops/s
Iteration  12: 2094830.176 ops/s
Iteration  13: 2096629.832 ops/s
Iteration  14: 2094715.796 ops/s
Iteration  15: 2089412.968 ops/s
Iteration  16: 2043050.490 ops/s
Iteration  17: 2085813.339 ops/s
Iteration  18: 2091496.348 ops/s
Iteration  19: 2103417.570 ops/s
Iteration  20: 2179363.274 ops/s
Iteration  21: 2186052.523 ops/s
Iteration  22: 2228629.184 ops/s
Iteration  23: 2133343.003 ops/s
Iteration  24: 2099017.964 ops/s
Iteration  25: 2110296.484 ops/s
Iteration  26: 2103056.333 ops/s
Iteration  27: 2095653.194 ops/s
Iteration  28: 2095833.202 ops/s
Iteration  29: 2093712.509 ops/s
Iteration  30: 2052475.247 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_selectWith":
  2111234.643 ±(99.9%) 29371.193 ops/s [Average]
  (min, avg, max) = (2043050.490, 2111234.643, 2228629.184), stdev = 43961.422
  CI (99.9%): [2081863.450, 2140605.836] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_selectWith  thrpt   30  2111234.643 ± 29371.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_selectWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_selectWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1295885.684 ops/s
# Warmup Iteration   2: 3312585.595 ops/s
# Warmup Iteration   3: 2843287.740 ops/s
# Warmup Iteration   4: 3305571.159 ops/s
# Warmup Iteration   5: 3478376.917 ops/s
# Warmup Iteration   6: 3597823.828 ops/s
# Warmup Iteration   7: 3468276.132 ops/s
# Warmup Iteration   8: 3421475.591 ops/s
# Warmup Iteration   9: 3253401.871 ops/s
# Warmup Iteration  10: 3279323.485 ops/s
# Warmup Iteration  11: 3405327.915 ops/s
# Warmup Iteration  12: 3284189.467 ops/s
# Warmup Iteration  13: 3267932.968 ops/s
# Warmup Iteration  14: 3283429.152 ops/s
# Warmup Iteration  15: 3294025.910 ops/s
# Warmup Iteration  16: 3328607.652 ops/s
# Warmup Iteration  17: 3306149.210 ops/s
# Warmup Iteration  18: 3316538.078 ops/s
# Warmup Iteration  19: 3299341.540 ops/s
# Warmup Iteration  20: 3300804.097 ops/s
# Warmup Iteration  21: 3238855.432 ops/s
# Warmup Iteration  22: 3413778.989 ops/s
# Warmup Iteration  23: 3301414.144 ops/s
# Warmup Iteration  24: 3374209.160 ops/s
# Warmup Iteration  25: 3347330.059 ops/s
# Warmup Iteration  26: 3317648.321 ops/s
# Warmup Iteration  27: 3281041.224 ops/s
# Warmup Iteration  28: 3312179.911 ops/s
# Warmup Iteration  29: 3281047.241 ops/s
# Warmup Iteration  30: 3312610.530 ops/s
Iteration   1: 3233418.094 ops/s
Iteration   2: 3288095.029 ops/s
Iteration   3: 3310264.377 ops/s
Iteration   4: 3308298.233 ops/s
Iteration   5: 3356176.266 ops/s
Iteration   6: 3276334.110 ops/s
Iteration   7: 3231212.075 ops/s
Iteration   8: 3270462.288 ops/s
Iteration   9: 3256656.290 ops/s
Iteration  10: 3241342.136 ops/s
Iteration  11: 3289268.789 ops/s
Iteration  12: 3234492.869 ops/s
Iteration  13: 3318630.069 ops/s
Iteration  14: 3360352.461 ops/s
Iteration  15: 3397546.395 ops/s
Iteration  16: 3443183.614 ops/s
Iteration  17: 3250424.515 ops/s
Iteration  18: 3314066.756 ops/s
Iteration  19: 3310434.567 ops/s
Iteration  20: 3295190.703 ops/s
Iteration  21: 3453260.382 ops/s
Iteration  22: 3431230.934 ops/s
Iteration  23: 3458038.367 ops/s
Iteration  24: 3373477.028 ops/s
Iteration  25: 3322700.240 ops/s
Iteration  26: 3379326.059 ops/s
Iteration  27: 3409027.246 ops/s
Iteration  28: 3374115.331 ops/s
Iteration  29: 3269584.841 ops/s
Iteration  30: 3352126.360 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_selectWith_value":
  3326957.881 ±(99.9%) 46038.579 ops/s [Average]
  (min, avg, max) = (3231212.075, 3326957.881, 3458038.367), stdev = 68908.382
  CI (99.9%): [3280919.302, 3372996.460] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_selectWith_value  thrpt   30  3326957.881 ± 46038.579  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_select_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_select_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 844300.961 ops/s
# Warmup Iteration   2: 2174771.083 ops/s
# Warmup Iteration   3: 2031374.155 ops/s
# Warmup Iteration   4: 1919904.909 ops/s
# Warmup Iteration   5: 2234097.310 ops/s
# Warmup Iteration   6: 2233872.265 ops/s
# Warmup Iteration   7: 2181552.194 ops/s
# Warmup Iteration   8: 2118646.858 ops/s
# Warmup Iteration   9: 2185281.773 ops/s
# Warmup Iteration  10: 2176136.483 ops/s
# Warmup Iteration  11: 2191576.690 ops/s
# Warmup Iteration  12: 2159442.950 ops/s
# Warmup Iteration  13: 2165106.537 ops/s
# Warmup Iteration  14: 2180434.940 ops/s
# Warmup Iteration  15: 2156040.082 ops/s
# Warmup Iteration  16: 2180815.713 ops/s
# Warmup Iteration  17: 2183424.543 ops/s
# Warmup Iteration  18: 2186660.046 ops/s
# Warmup Iteration  19: 2175204.424 ops/s
# Warmup Iteration  20: 2169920.200 ops/s
# Warmup Iteration  21: 2169146.314 ops/s
# Warmup Iteration  22: 2138999.383 ops/s
# Warmup Iteration  23: 2187786.602 ops/s
# Warmup Iteration  24: 2185807.120 ops/s
# Warmup Iteration  25: 2166427.225 ops/s
# Warmup Iteration  26: 2237713.630 ops/s
# Warmup Iteration  27: 2212411.520 ops/s
# Warmup Iteration  28: 2184853.903 ops/s
# Warmup Iteration  29: 2212871.025 ops/s
# Warmup Iteration  30: 2157591.422 ops/s
Iteration   1: 2140924.690 ops/s
Iteration   2: 2171824.321 ops/s
Iteration   3: 2180254.955 ops/s
Iteration   4: 2162851.326 ops/s
Iteration   5: 2197376.691 ops/s
Iteration   6: 2158986.185 ops/s
Iteration   7: 2176547.954 ops/s
Iteration   8: 2222875.714 ops/s
Iteration   9: 2170534.485 ops/s
Iteration  10: 2158665.282 ops/s
Iteration  11: 2156511.742 ops/s
Iteration  12: 2246543.707 ops/s
Iteration  13: 2184196.017 ops/s
Iteration  14: 2181519.120 ops/s
Iteration  15: 2165889.776 ops/s
Iteration  16: 2255838.187 ops/s
Iteration  17: 2220640.603 ops/s
Iteration  18: 2167107.473 ops/s
Iteration  19: 2168028.497 ops/s
Iteration  20: 2196713.801 ops/s
Iteration  21: 2198650.765 ops/s
Iteration  22: 2180818.792 ops/s
Iteration  23: 2220174.909 ops/s
Iteration  24: 2217167.643 ops/s
Iteration  25: 2188793.878 ops/s
Iteration  26: 2131169.354 ops/s
Iteration  27: 2201293.010 ops/s
Iteration  28: 2202066.140 ops/s
Iteration  29: 2255780.703 ops/s
Iteration  30: 2261934.770 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_select_value":
  2191389.350 ±(99.9%) 22717.094 ops/s [Average]
  (min, avg, max) = (2131169.354, 2191389.350, 2261934.770), stdev = 34001.879
  CI (99.9%): [2168672.256, 2214106.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_select_value  thrpt   30  2191389.350 ± 22717.094  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 40686.470 ops/s
# Warmup Iteration   2: 53092.661 ops/s
# Warmup Iteration   3: 75794.375 ops/s
# Warmup Iteration   4: 76439.978 ops/s
# Warmup Iteration   5: 76791.999 ops/s
# Warmup Iteration   6: 76370.452 ops/s
# Warmup Iteration   7: 76150.043 ops/s
# Warmup Iteration   8: 77878.247 ops/s
# Warmup Iteration   9: 72311.433 ops/s
# Warmup Iteration  10: 81971.062 ops/s
# Warmup Iteration  11: 83624.516 ops/s
# Warmup Iteration  12: 79640.299 ops/s
# Warmup Iteration  13: 75845.781 ops/s
# Warmup Iteration  14: 76500.956 ops/s
# Warmup Iteration  15: 75663.348 ops/s
# Warmup Iteration  16: 77104.922 ops/s
# Warmup Iteration  17: 77236.286 ops/s
# Warmup Iteration  18: 76071.387 ops/s
# Warmup Iteration  19: 76175.443 ops/s
# Warmup Iteration  20: 75629.586 ops/s
# Warmup Iteration  21: 76493.391 ops/s
# Warmup Iteration  22: 76215.602 ops/s
# Warmup Iteration  23: 74867.663 ops/s
# Warmup Iteration  24: 76767.089 ops/s
# Warmup Iteration  25: 77272.422 ops/s
# Warmup Iteration  26: 78597.078 ops/s
# Warmup Iteration  27: 82404.196 ops/s
# Warmup Iteration  28: 76247.753 ops/s
# Warmup Iteration  29: 76363.449 ops/s
# Warmup Iteration  30: 76301.346 ops/s
Iteration   1: 75340.574 ops/s
Iteration   2: 76835.711 ops/s
Iteration   3: 77117.605 ops/s
Iteration   4: 77833.154 ops/s
Iteration   5: 76133.820 ops/s
Iteration   6: 75794.327 ops/s
Iteration   7: 75462.253 ops/s
Iteration   8: 75353.725 ops/s
Iteration   9: 76988.892 ops/s
Iteration  10: 80101.861 ops/s
Iteration  11: 80214.116 ops/s
Iteration  12: 77338.399 ops/s
Iteration  13: 76770.740 ops/s
Iteration  14: 77557.177 ops/s
Iteration  15: 75316.302 ops/s
Iteration  16: 77448.975 ops/s
Iteration  17: 75917.832 ops/s
Iteration  18: 76038.112 ops/s
Iteration  19: 80089.257 ops/s
Iteration  20: 81841.857 ops/s
Iteration  21: 79935.112 ops/s
Iteration  22: 77252.102 ops/s
Iteration  23: 76380.985 ops/s
Iteration  24: 76158.827 ops/s
Iteration  25: 76135.914 ops/s
Iteration  26: 76385.228 ops/s
Iteration  27: 75872.986 ops/s
Iteration  28: 76054.114 ops/s
Iteration  29: 76595.004 ops/s
Iteration  30: 78110.283 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_serialization":
  77145.842 ±(99.9%) 1131.204 ops/s [Average]
  (min, avg, max) = (75316.302, 77145.842, 81841.857), stdev = 1693.133
  CI (99.9%): [76014.637, 78277.046] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt      Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_serialization  thrpt   30  77145.842 ± 1131.204  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 513105.570 ops/s
# Warmup Iteration   2: 999728.883 ops/s
# Warmup Iteration   3: 1240746.289 ops/s
# Warmup Iteration   4: 1192100.780 ops/s
# Warmup Iteration   5: 1090879.879 ops/s
# Warmup Iteration   6: 1234930.975 ops/s
# Warmup Iteration   7: 1246736.214 ops/s
# Warmup Iteration   8: 1304658.871 ops/s
# Warmup Iteration   9: 1329453.149 ops/s
# Warmup Iteration  10: 1305320.914 ops/s
# Warmup Iteration  11: 1272821.468 ops/s
# Warmup Iteration  12: 1321214.138 ops/s
# Warmup Iteration  13: 1277224.779 ops/s
# Warmup Iteration  14: 1244456.340 ops/s
# Warmup Iteration  15: 1244250.321 ops/s
# Warmup Iteration  16: 1291033.281 ops/s
# Warmup Iteration  17: 1242395.839 ops/s
# Warmup Iteration  18: 1226883.026 ops/s
# Warmup Iteration  19: 1245919.417 ops/s
# Warmup Iteration  20: 1251850.284 ops/s
# Warmup Iteration  21: 1253305.688 ops/s
# Warmup Iteration  22: 1239350.713 ops/s
# Warmup Iteration  23: 1252056.499 ops/s
# Warmup Iteration  24: 1252491.694 ops/s
# Warmup Iteration  25: 1255487.814 ops/s
# Warmup Iteration  26: 1304823.240 ops/s
# Warmup Iteration  27: 1262236.066 ops/s
# Warmup Iteration  28: 1241265.257 ops/s
# Warmup Iteration  29: 1273855.665 ops/s
# Warmup Iteration  30: 1265143.968 ops/s
Iteration   1: 1291707.627 ops/s
Iteration   2: 1292154.237 ops/s
Iteration   3: 1252756.213 ops/s
Iteration   4: 1284230.040 ops/s
Iteration   5: 1249372.847 ops/s
Iteration   6: 1323819.245 ops/s
Iteration   7: 1298716.757 ops/s
Iteration   8: 1251643.642 ops/s
Iteration   9: 1257187.949 ops/s
Iteration  10: 1245769.102 ops/s
Iteration  11: 1258852.956 ops/s
Iteration  12: 1320129.651 ops/s
Iteration  13: 1242397.836 ops/s
Iteration  14: 1260570.085 ops/s
Iteration  15: 1353268.437 ops/s
Iteration  16: 1258885.577 ops/s
Iteration  17: 1276901.445 ops/s
Iteration  18: 1280427.213 ops/s
Iteration  19: 1335510.710 ops/s
Iteration  20: 1239720.260 ops/s
Iteration  21: 1241081.244 ops/s
Iteration  22: 1271713.955 ops/s
Iteration  23: 1320568.460 ops/s
Iteration  24: 1235943.264 ops/s
Iteration  25: 1249062.143 ops/s
Iteration  26: 1269525.319 ops/s
Iteration  27: 1240860.806 ops/s
Iteration  28: 1225775.941 ops/s
Iteration  29: 1251975.986 ops/s
Iteration  30: 1267817.347 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_size":
  1271611.543 ±(99.9%) 21723.252 ops/s [Average]
  (min, avg, max) = (1225775.941, 1271611.543, 1353268.437), stdev = 32514.343
  CI (99.9%): [1249888.291, 1293334.795] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_size  thrpt   30  1271611.543 ± 21723.252  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 602297.858 ops/s
# Warmup Iteration   2: 1381415.880 ops/s
# Warmup Iteration   3: 1444633.670 ops/s
# Warmup Iteration   4: 1267667.290 ops/s
# Warmup Iteration   5: 1389415.162 ops/s
# Warmup Iteration   6: 1474237.257 ops/s
# Warmup Iteration   7: 1465501.047 ops/s
# Warmup Iteration   8: 1500364.879 ops/s
# Warmup Iteration   9: 1473752.323 ops/s
# Warmup Iteration  10: 1512025.401 ops/s
# Warmup Iteration  11: 1569606.978 ops/s
# Warmup Iteration  12: 1449296.292 ops/s
# Warmup Iteration  13: 1420652.166 ops/s
# Warmup Iteration  14: 1453379.827 ops/s
# Warmup Iteration  15: 1508454.439 ops/s
# Warmup Iteration  16: 1568465.975 ops/s
# Warmup Iteration  17: 1513717.487 ops/s
# Warmup Iteration  18: 1560352.657 ops/s
# Warmup Iteration  19: 1542601.409 ops/s
# Warmup Iteration  20: 1515768.943 ops/s
# Warmup Iteration  21: 1438582.784 ops/s
# Warmup Iteration  22: 1526573.729 ops/s
# Warmup Iteration  23: 1430363.076 ops/s
# Warmup Iteration  24: 1464215.680 ops/s
# Warmup Iteration  25: 1474398.380 ops/s
# Warmup Iteration  26: 1475985.256 ops/s
# Warmup Iteration  27: 1523634.949 ops/s
# Warmup Iteration  28: 1493148.529 ops/s
# Warmup Iteration  29: 1422621.899 ops/s
# Warmup Iteration  30: 1456628.879 ops/s
Iteration   1: 1477427.946 ops/s
Iteration   2: 1530470.524 ops/s
Iteration   3: 1434316.016 ops/s
Iteration   4: 1429167.437 ops/s
Iteration   5: 1528483.324 ops/s
Iteration   6: 1518211.618 ops/s
Iteration   7: 1530742.878 ops/s
Iteration   8: 1498199.385 ops/s
Iteration   9: 1473378.057 ops/s
Iteration  10: 1430150.870 ops/s
Iteration  11: 1559120.554 ops/s
Iteration  12: 1560583.629 ops/s
Iteration  13: 1438707.609 ops/s
Iteration  14: 1556931.589 ops/s
Iteration  15: 1565526.241 ops/s
Iteration  16: 1568872.103 ops/s
Iteration  17: 1573654.699 ops/s
Iteration  18: 1524070.774 ops/s
Iteration  19: 1451846.396 ops/s
Iteration  20: 1489631.751 ops/s
Iteration  21: 1458678.441 ops/s
Iteration  22: 1441798.704 ops/s
Iteration  23: 1417623.683 ops/s
Iteration  24: 1449131.320 ops/s
Iteration  25: 1425197.842 ops/s
Iteration  26: 1402216.546 ops/s
Iteration  27: 1426201.680 ops/s
Iteration  28: 1437727.044 ops/s
Iteration  29: 1495054.242 ops/s
Iteration  30: 1493453.352 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_stream":
  1486219.209 ±(99.9%) 35828.783 ops/s [Average]
  (min, avg, max) = (1402216.546, 1486219.209, 1573654.699), stdev = 53626.840
  CI (99.9%): [1450390.425, 1522047.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_stream  thrpt   30  1486219.209 ± 35828.783  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 804136.455 ops/s
# Warmup Iteration   2: 1703255.688 ops/s
# Warmup Iteration   3: 1743535.826 ops/s
# Warmup Iteration   4: 1681094.802 ops/s
# Warmup Iteration   5: 1362482.120 ops/s
# Warmup Iteration   6: 1656099.872 ops/s
# Warmup Iteration   7: 1683899.713 ops/s
# Warmup Iteration   8: 1743844.576 ops/s
# Warmup Iteration   9: 1676566.682 ops/s
# Warmup Iteration  10: 1770475.525 ops/s
# Warmup Iteration  11: 1744819.673 ops/s
# Warmup Iteration  12: 1700718.062 ops/s
# Warmup Iteration  13: 1733884.465 ops/s
# Warmup Iteration  14: 1832714.875 ops/s
# Warmup Iteration  15: 1768830.427 ops/s
# Warmup Iteration  16: 1720619.291 ops/s
# Warmup Iteration  17: 1699296.884 ops/s
# Warmup Iteration  18: 1712915.781 ops/s
# Warmup Iteration  19: 1733704.310 ops/s
# Warmup Iteration  20: 1685653.832 ops/s
# Warmup Iteration  21: 1680808.537 ops/s
# Warmup Iteration  22: 1690006.258 ops/s
# Warmup Iteration  23: 1706909.720 ops/s
# Warmup Iteration  24: 1830103.288 ops/s
# Warmup Iteration  25: 1837227.421 ops/s
# Warmup Iteration  26: 1823767.013 ops/s
# Warmup Iteration  27: 1659408.593 ops/s
# Warmup Iteration  28: 1680142.645 ops/s
# Warmup Iteration  29: 1687659.949 ops/s
# Warmup Iteration  30: 1729340.632 ops/s
Iteration   1: 1713081.738 ops/s
Iteration   2: 1700318.082 ops/s
Iteration   3: 1798027.068 ops/s
Iteration   4: 1714518.785 ops/s
Iteration   5: 1703861.102 ops/s
Iteration   6: 1726483.580 ops/s
Iteration   7: 1794838.586 ops/s
Iteration   8: 1727758.859 ops/s
Iteration   9: 1694394.184 ops/s
Iteration  10: 1750342.013 ops/s
Iteration  11: 1743994.750 ops/s
Iteration  12: 1736702.107 ops/s
Iteration  13: 1728397.298 ops/s
Iteration  14: 1750148.174 ops/s
Iteration  15: 1817283.000 ops/s
Iteration  16: 1684472.093 ops/s
Iteration  17: 1725893.743 ops/s
Iteration  18: 1701760.286 ops/s
Iteration  19: 1730487.577 ops/s
Iteration  20: 1673431.192 ops/s
Iteration  21: 1737078.319 ops/s
Iteration  22: 1713397.154 ops/s
Iteration  23: 1679355.328 ops/s
Iteration  24: 1707938.330 ops/s
Iteration  25: 1690509.470 ops/s
Iteration  26: 1740081.369 ops/s
Iteration  27: 1745527.686 ops/s
Iteration  28: 1736972.866 ops/s
Iteration  29: 1744795.150 ops/s
Iteration  30: 1669633.167 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumByDouble":
  1726049.435 ±(99.9%) 23441.120 ops/s [Average]
  (min, avg, max) = (1669633.167, 1726049.435, 1817283.000), stdev = 35085.568
  CI (99.9%): [1702608.315, 1749490.555] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_sumByDouble  thrpt   30  1726049.435 ± 23441.120  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 807063.597 ops/s
# Warmup Iteration   2: 1591057.619 ops/s
# Warmup Iteration   3: 1721539.210 ops/s
# Warmup Iteration   4: 1797940.201 ops/s
# Warmup Iteration   5: 1472375.666 ops/s
# Warmup Iteration   6: 1684241.466 ops/s
# Warmup Iteration   7: 1711222.599 ops/s
# Warmup Iteration   8: 1727871.024 ops/s
# Warmup Iteration   9: 1694797.037 ops/s
# Warmup Iteration  10: 1766064.308 ops/s
# Warmup Iteration  11: 1786068.069 ops/s
# Warmup Iteration  12: 1699579.074 ops/s
# Warmup Iteration  13: 1707137.370 ops/s
# Warmup Iteration  14: 1711568.052 ops/s
# Warmup Iteration  15: 1716462.300 ops/s
# Warmup Iteration  16: 1732523.245 ops/s
# Warmup Iteration  17: 1682625.861 ops/s
# Warmup Iteration  18: 1704330.277 ops/s
# Warmup Iteration  19: 1702806.891 ops/s
# Warmup Iteration  20: 1841906.410 ops/s
# Warmup Iteration  21: 1697745.337 ops/s
# Warmup Iteration  22: 1762173.294 ops/s
# Warmup Iteration  23: 1749527.582 ops/s
# Warmup Iteration  24: 1708623.116 ops/s
# Warmup Iteration  25: 1691006.469 ops/s
# Warmup Iteration  26: 1713538.117 ops/s
# Warmup Iteration  27: 1855133.419 ops/s
# Warmup Iteration  28: 1853142.421 ops/s
# Warmup Iteration  29: 1717967.271 ops/s
# Warmup Iteration  30: 1734043.732 ops/s
Iteration   1: 1694680.736 ops/s
Iteration   2: 1763072.708 ops/s
Iteration   3: 1780605.301 ops/s
Iteration   4: 1732141.301 ops/s
Iteration   5: 1856953.371 ops/s
Iteration   6: 1745361.624 ops/s
Iteration   7: 1730796.841 ops/s
Iteration   8: 1700316.382 ops/s
Iteration   9: 1683165.932 ops/s
Iteration  10: 1728511.243 ops/s
Iteration  11: 1683395.054 ops/s
Iteration  12: 1710166.134 ops/s
Iteration  13: 1673696.522 ops/s
Iteration  14: 1680981.872 ops/s
Iteration  15: 1716256.794 ops/s
Iteration  16: 1710696.764 ops/s
Iteration  17: 1721025.293 ops/s
Iteration  18: 1690946.969 ops/s
Iteration  19: 1822568.902 ops/s
Iteration  20: 1718554.889 ops/s
Iteration  21: 1692814.123 ops/s
Iteration  22: 1733593.375 ops/s
Iteration  23: 1714378.603 ops/s
Iteration  24: 1694183.964 ops/s
Iteration  25: 1705867.514 ops/s
Iteration  26: 1760478.037 ops/s
Iteration  27: 1722624.012 ops/s
Iteration  28: 1807498.730 ops/s
Iteration  29: 1850976.239 ops/s
Iteration  30: 1860114.842 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumByFloat":
  1736214.136 ±(99.9%) 36009.689 ops/s [Average]
  (min, avg, max) = (1673696.522, 1736214.136, 1860114.842), stdev = 53897.612
  CI (99.9%): [1700204.446, 1772223.825] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_sumByFloat  thrpt   30  1736214.136 ± 36009.689  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1252040.292 ops/s
# Warmup Iteration   2: 3131445.638 ops/s
# Warmup Iteration   3: 3036779.415 ops/s
# Warmup Iteration   4: 2489840.474 ops/s
# Warmup Iteration   5: 3032817.584 ops/s
# Warmup Iteration   6: 2924305.292 ops/s
# Warmup Iteration   7: 3028674.746 ops/s
# Warmup Iteration   8: 3049880.993 ops/s
# Warmup Iteration   9: 3039214.423 ops/s
# Warmup Iteration  10: 3042781.375 ops/s
# Warmup Iteration  11: 2918238.919 ops/s
# Warmup Iteration  12: 2909752.267 ops/s
# Warmup Iteration  13: 2909055.148 ops/s
# Warmup Iteration  14: 3083135.351 ops/s
# Warmup Iteration  15: 2945801.028 ops/s
# Warmup Iteration  16: 2924657.826 ops/s
# Warmup Iteration  17: 2913916.004 ops/s
# Warmup Iteration  18: 2889173.971 ops/s
# Warmup Iteration  19: 2897739.054 ops/s
# Warmup Iteration  20: 2924668.966 ops/s
# Warmup Iteration  21: 2957608.741 ops/s
# Warmup Iteration  22: 2924741.595 ops/s
# Warmup Iteration  23: 3038693.200 ops/s
# Warmup Iteration  24: 2888462.220 ops/s
# Warmup Iteration  25: 3131877.019 ops/s
# Warmup Iteration  26: 2953574.353 ops/s
# Warmup Iteration  27: 2926209.832 ops/s
# Warmup Iteration  28: 3066856.095 ops/s
# Warmup Iteration  29: 2997513.749 ops/s
# Warmup Iteration  30: 3101790.052 ops/s
Iteration   1: 3032132.738 ops/s
Iteration   2: 2953460.941 ops/s
Iteration   3: 3194297.115 ops/s
Iteration   4: 2973757.503 ops/s
Iteration   5: 2882664.881 ops/s
Iteration   6: 3010976.665 ops/s
Iteration   7: 3023128.093 ops/s
Iteration   8: 2888696.714 ops/s
Iteration   9: 2935024.420 ops/s
Iteration  10: 2841966.744 ops/s
Iteration  11: 2948125.174 ops/s
Iteration  12: 3068732.325 ops/s
Iteration  13: 3158156.042 ops/s
Iteration  14: 3157257.969 ops/s
Iteration  15: 2893031.509 ops/s
Iteration  16: 3054660.864 ops/s
Iteration  17: 3054563.089 ops/s
Iteration  18: 2942902.285 ops/s
Iteration  19: 2951579.224 ops/s
Iteration  20: 2910959.441 ops/s
Iteration  21: 3049605.272 ops/s
Iteration  22: 2918583.031 ops/s
Iteration  23: 2867291.714 ops/s
Iteration  24: 2881633.138 ops/s
Iteration  25: 2961972.188 ops/s
Iteration  26: 2903919.181 ops/s
Iteration  27: 2901286.546 ops/s
Iteration  28: 2911626.793 ops/s
Iteration  29: 2967655.484 ops/s
Iteration  30: 2926336.444 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumByInt":
  2972199.451 ±(99.9%) 60522.399 ops/s [Average]
  (min, avg, max) = (2841966.744, 2972199.451, 3194297.115), stdev = 90587.085
  CI (99.9%): [2911677.052, 3032721.850] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_sumByInt  thrpt   30  2972199.451 ± 60522.399  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1189994.901 ops/s
# Warmup Iteration   2: 3013798.490 ops/s
# Warmup Iteration   3: 3206405.835 ops/s
# Warmup Iteration   4: 2736031.823 ops/s
# Warmup Iteration   5: 3265100.482 ops/s
# Warmup Iteration   6: 3208560.127 ops/s
# Warmup Iteration   7: 3077799.709 ops/s
# Warmup Iteration   8: 3172499.747 ops/s
# Warmup Iteration   9: 3307190.101 ops/s
# Warmup Iteration  10: 3254093.709 ops/s
# Warmup Iteration  11: 3230837.966 ops/s
# Warmup Iteration  12: 3255639.525 ops/s
# Warmup Iteration  13: 3180364.723 ops/s
# Warmup Iteration  14: 3146417.510 ops/s
# Warmup Iteration  15: 3139834.536 ops/s
# Warmup Iteration  16: 3415851.999 ops/s
# Warmup Iteration  17: 3093248.475 ops/s
# Warmup Iteration  18: 3359872.623 ops/s
# Warmup Iteration  19: 3299486.108 ops/s
# Warmup Iteration  20: 3206569.395 ops/s
# Warmup Iteration  21: 3370574.054 ops/s
# Warmup Iteration  22: 3368634.333 ops/s
# Warmup Iteration  23: 3283369.955 ops/s
# Warmup Iteration  24: 3171782.020 ops/s
# Warmup Iteration  25: 3187140.243 ops/s
# Warmup Iteration  26: 3201360.370 ops/s
# Warmup Iteration  27: 3121719.518 ops/s
# Warmup Iteration  28: 3140413.003 ops/s
# Warmup Iteration  29: 3238715.782 ops/s
# Warmup Iteration  30: 3199017.933 ops/s
Iteration   1: 3120948.145 ops/s
Iteration   2: 3082554.673 ops/s
Iteration   3: 3124585.789 ops/s
Iteration   4: 3129224.142 ops/s
Iteration   5: 3115751.829 ops/s
Iteration   6: 3184135.619 ops/s
Iteration   7: 3115990.330 ops/s
Iteration   8: 3081769.404 ops/s
Iteration   9: 3152402.168 ops/s
Iteration  10: 3120293.476 ops/s
Iteration  11: 3187103.931 ops/s
Iteration  12: 3132579.901 ops/s
Iteration  13: 3358482.228 ops/s
Iteration  14: 3347288.433 ops/s
Iteration  15: 3308490.020 ops/s
Iteration  16: 3295049.120 ops/s
Iteration  17: 3246064.456 ops/s
Iteration  18: 3329636.240 ops/s
Iteration  19: 3211521.232 ops/s
Iteration  20: 3154579.425 ops/s
Iteration  21: 3169696.899 ops/s
Iteration  22: 3169499.608 ops/s
Iteration  23: 3174297.203 ops/s
Iteration  24: 3196637.249 ops/s
Iteration  25: 3228772.399 ops/s
Iteration  26: 3133981.707 ops/s
Iteration  27: 3169020.010 ops/s
Iteration  28: 3277659.480 ops/s
Iteration  29: 3071843.730 ops/s
Iteration  30: 3087193.320 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumByLong":
  3182568.406 ±(99.9%) 54915.518 ops/s [Average]
  (min, avg, max) = (3071843.730, 3182568.406, 3358482.228), stdev = 82194.968
  CI (99.9%): [3127652.888, 3237483.923] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_sumByLong  thrpt   30  3182568.406 ± 54915.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumOfDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumOfDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1888439.328 ops/s
# Warmup Iteration   2: 4460609.469 ops/s
# Warmup Iteration   3: 4355645.762 ops/s
# Warmup Iteration   4: 3739257.592 ops/s
# Warmup Iteration   5: 4524471.576 ops/s
# Warmup Iteration   6: 4512894.668 ops/s
# Warmup Iteration   7: 4319043.015 ops/s
# Warmup Iteration   8: 4304289.249 ops/s
# Warmup Iteration   9: 4474840.101 ops/s
# Warmup Iteration  10: 4502293.749 ops/s
# Warmup Iteration  11: 4332747.605 ops/s
# Warmup Iteration  12: 4359481.523 ops/s
# Warmup Iteration  13: 4406933.534 ops/s
# Warmup Iteration  14: 4459580.921 ops/s
# Warmup Iteration  15: 4361423.262 ops/s
# Warmup Iteration  16: 4371775.238 ops/s
# Warmup Iteration  17: 4429931.260 ops/s
# Warmup Iteration  18: 4483935.261 ops/s
# Warmup Iteration  19: 4441107.269 ops/s
# Warmup Iteration  20: 4381127.469 ops/s
# Warmup Iteration  21: 4447234.614 ops/s
# Warmup Iteration  22: 4417049.123 ops/s
# Warmup Iteration  23: 4512949.859 ops/s
# Warmup Iteration  24: 4361870.539 ops/s
# Warmup Iteration  25: 4351953.797 ops/s
# Warmup Iteration  26: 4379231.128 ops/s
# Warmup Iteration  27: 4307146.260 ops/s
# Warmup Iteration  28: 4399150.112 ops/s
# Warmup Iteration  29: 4640102.683 ops/s
# Warmup Iteration  30: 4359986.633 ops/s
Iteration   1: 4467231.799 ops/s
Iteration   2: 4540873.517 ops/s
Iteration   3: 4632305.613 ops/s
Iteration   4: 4768531.324 ops/s
Iteration   5: 4700864.533 ops/s
Iteration   6: 4493473.018 ops/s
Iteration   7: 4491970.799 ops/s
Iteration   8: 4729235.125 ops/s
Iteration   9: 4589849.376 ops/s
Iteration  10: 4397554.234 ops/s
Iteration  11: 4393082.767 ops/s
Iteration  12: 4418440.805 ops/s
Iteration  13: 4333296.190 ops/s
Iteration  14: 4388589.620 ops/s
Iteration  15: 4378456.755 ops/s
Iteration  16: 4372356.611 ops/s
Iteration  17: 4278867.541 ops/s
Iteration  18: 4374696.889 ops/s
Iteration  19: 4320153.646 ops/s
Iteration  20: 4340693.073 ops/s
Iteration  21: 4302050.161 ops/s
Iteration  22: 4317839.799 ops/s
Iteration  23: 4327395.977 ops/s
Iteration  24: 4348180.278 ops/s
Iteration  25: 4356758.849 ops/s
Iteration  26: 4424991.602 ops/s
Iteration  27: 4482349.118 ops/s
Iteration  28: 4375916.446 ops/s
Iteration  29: 4403067.953 ops/s
Iteration  30: 4600207.917 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumOfDouble":
  4444976.045 ±(99.9%) 88710.920 ops/s [Average]
  (min, avg, max) = (4278867.541, 4444976.045, 4768531.324), stdev = 132778.339
  CI (99.9%): [4356265.124, 4533686.965] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_sumOfDouble  thrpt   30  4444976.045 ± 88710.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumOfFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumOfFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1842467.756 ops/s
# Warmup Iteration   2: 3954821.958 ops/s
# Warmup Iteration   3: 4034847.270 ops/s
# Warmup Iteration   4: 3257803.504 ops/s
# Warmup Iteration   5: 4028365.025 ops/s
# Warmup Iteration   6: 3930755.270 ops/s
# Warmup Iteration   7: 3938631.021 ops/s
# Warmup Iteration   8: 3972876.663 ops/s
# Warmup Iteration   9: 4210994.036 ops/s
# Warmup Iteration  10: 4049013.701 ops/s
# Warmup Iteration  11: 4184033.570 ops/s
# Warmup Iteration  12: 4073569.505 ops/s
# Warmup Iteration  13: 4131802.598 ops/s
# Warmup Iteration  14: 4168701.183 ops/s
# Warmup Iteration  15: 3907015.822 ops/s
# Warmup Iteration  16: 3970322.582 ops/s
# Warmup Iteration  17: 3903555.793 ops/s
# Warmup Iteration  18: 3896547.652 ops/s
# Warmup Iteration  19: 3893518.173 ops/s
# Warmup Iteration  20: 4103167.170 ops/s
# Warmup Iteration  21: 4116041.427 ops/s
# Warmup Iteration  22: 4101213.133 ops/s
# Warmup Iteration  23: 4065068.738 ops/s
# Warmup Iteration  24: 3915719.781 ops/s
# Warmup Iteration  25: 3952112.159 ops/s
# Warmup Iteration  26: 3905257.415 ops/s
# Warmup Iteration  27: 4099188.275 ops/s
# Warmup Iteration  28: 3973039.922 ops/s
# Warmup Iteration  29: 3854946.560 ops/s
# Warmup Iteration  30: 3853834.673 ops/s
Iteration   1: 4073429.065 ops/s
Iteration   2: 3850182.254 ops/s
Iteration   3: 3858460.026 ops/s
Iteration   4: 4094812.670 ops/s
Iteration   5: 4174705.167 ops/s
Iteration   6: 3822627.262 ops/s
Iteration   7: 3907071.311 ops/s
Iteration   8: 3827786.070 ops/s
Iteration   9: 3916074.993 ops/s
Iteration  10: 3996361.837 ops/s
Iteration  11: 3937973.706 ops/s
Iteration  12: 3870848.207 ops/s
Iteration  13: 4043364.257 ops/s
Iteration  14: 4222410.197 ops/s
Iteration  15: 4169655.471 ops/s
Iteration  16: 3930234.094 ops/s
Iteration  17: 4213973.851 ops/s
Iteration  18: 3814239.043 ops/s
Iteration  19: 3846051.478 ops/s
Iteration  20: 3837385.779 ops/s
Iteration  21: 4058336.671 ops/s
Iteration  22: 4021239.329 ops/s
Iteration  23: 3822414.602 ops/s
Iteration  24: 4024924.434 ops/s
Iteration  25: 4115297.574 ops/s
Iteration  26: 3979801.350 ops/s
Iteration  27: 3855419.735 ops/s
Iteration  28: 3871796.813 ops/s
Iteration  29: 4045588.607 ops/s
Iteration  30: 4169876.975 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumOfFloat":
  3979078.094 ±(99.9%) 88166.024 ops/s [Average]
  (min, avg, max) = (3814239.043, 3979078.094, 4222410.197), stdev = 131962.764
  CI (99.9%): [3890912.071, 4067244.118] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_sumOfFloat  thrpt   30  3979078.094 ± 88166.024  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumOfInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumOfInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2012410.707 ops/s
# Warmup Iteration   2: 4552925.743 ops/s
# Warmup Iteration   3: 4503753.789 ops/s
# Warmup Iteration   4: 3577001.281 ops/s
# Warmup Iteration   5: 4467262.931 ops/s
# Warmup Iteration   6: 4647259.416 ops/s
# Warmup Iteration   7: 4703324.772 ops/s
# Warmup Iteration   8: 4493469.636 ops/s
# Warmup Iteration   9: 4616232.144 ops/s
# Warmup Iteration  10: 4423882.861 ops/s
# Warmup Iteration  11: 4730780.951 ops/s
# Warmup Iteration  12: 4465764.688 ops/s
# Warmup Iteration  13: 4581596.020 ops/s
# Warmup Iteration  14: 4387441.537 ops/s
# Warmup Iteration  15: 4715822.916 ops/s
# Warmup Iteration  16: 4569237.548 ops/s
# Warmup Iteration  17: 4406648.033 ops/s
# Warmup Iteration  18: 4585690.080 ops/s
# Warmup Iteration  19: 4528374.818 ops/s
# Warmup Iteration  20: 4427091.701 ops/s
# Warmup Iteration  21: 4365047.301 ops/s
# Warmup Iteration  22: 4549427.856 ops/s
# Warmup Iteration  23: 4601101.254 ops/s
# Warmup Iteration  24: 4605405.946 ops/s
# Warmup Iteration  25: 4387342.627 ops/s
# Warmup Iteration  26: 4405495.168 ops/s
# Warmup Iteration  27: 4468884.127 ops/s
# Warmup Iteration  28: 4605879.520 ops/s
# Warmup Iteration  29: 4602057.199 ops/s
# Warmup Iteration  30: 4473791.006 ops/s
Iteration   1: 4462019.520 ops/s
Iteration   2: 4610520.820 ops/s
Iteration   3: 4525780.802 ops/s
Iteration   4: 4439906.219 ops/s
Iteration   5: 4453101.029 ops/s
Iteration   6: 4431238.480 ops/s
Iteration   7: 4524165.829 ops/s
Iteration   8: 4650054.796 ops/s
Iteration   9: 4613699.490 ops/s
Iteration  10: 4651348.948 ops/s
Iteration  11: 4580537.131 ops/s
Iteration  12: 4558275.246 ops/s
Iteration  13: 4533221.917 ops/s
Iteration  14: 4543083.058 ops/s
Iteration  15: 4441387.075 ops/s
Iteration  16: 4450088.557 ops/s
Iteration  17: 4432446.563 ops/s
Iteration  18: 4443466.164 ops/s
Iteration  19: 4384422.140 ops/s
Iteration  20: 4428077.363 ops/s
Iteration  21: 4503332.269 ops/s
Iteration  22: 4420618.944 ops/s
Iteration  23: 4436470.194 ops/s
Iteration  24: 4506033.611 ops/s
Iteration  25: 4428040.110 ops/s
Iteration  26: 4383922.324 ops/s
Iteration  27: 4432255.649 ops/s
Iteration  28: 4344624.069 ops/s
Iteration  29: 4383609.429 ops/s
Iteration  30: 4511818.797 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumOfInt":
  4483585.551 ±(99.9%) 54394.792 ops/s [Average]
  (min, avg, max) = (4344624.069, 4483585.551, 4651348.948), stdev = 81415.570
  CI (99.9%): [4429190.760, 4537980.343] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_sumOfInt  thrpt   30  4483585.551 ± 54394.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumOfLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumOfLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2381379.652 ops/s
# Warmup Iteration   2: 4778087.922 ops/s
# Warmup Iteration   3: 4299647.835 ops/s
# Warmup Iteration   4: 4429610.875 ops/s
# Warmup Iteration   5: 5077692.383 ops/s
# Warmup Iteration   6: 4890576.016 ops/s
# Warmup Iteration   7: 4826237.147 ops/s
# Warmup Iteration   8: 4801884.893 ops/s
# Warmup Iteration   9: 4777038.511 ops/s
# Warmup Iteration  10: 4784717.507 ops/s
# Warmup Iteration  11: 4741542.476 ops/s
# Warmup Iteration  12: 4872158.349 ops/s
# Warmup Iteration  13: 4825712.540 ops/s
# Warmup Iteration  14: 4782850.071 ops/s
# Warmup Iteration  15: 4976896.392 ops/s
# Warmup Iteration  16: 4747346.085 ops/s
# Warmup Iteration  17: 4698748.370 ops/s
# Warmup Iteration  18: 4850296.725 ops/s
# Warmup Iteration  19: 4880054.547 ops/s
# Warmup Iteration  20: 4956118.306 ops/s
# Warmup Iteration  21: 4891368.672 ops/s
# Warmup Iteration  22: 4843976.245 ops/s
# Warmup Iteration  23: 4865301.983 ops/s
# Warmup Iteration  24: 4934948.145 ops/s
# Warmup Iteration  25: 4818225.680 ops/s
# Warmup Iteration  26: 4807708.477 ops/s
# Warmup Iteration  27: 4900520.180 ops/s
# Warmup Iteration  28: 4775792.011 ops/s
# Warmup Iteration  29: 4742533.340 ops/s
# Warmup Iteration  30: 4831958.145 ops/s
Iteration   1: 4724985.194 ops/s
Iteration   2: 4734899.730 ops/s
Iteration   3: 4733608.693 ops/s
Iteration   4: 4918824.945 ops/s
Iteration   5: 4803216.920 ops/s
Iteration   6: 4843778.377 ops/s
Iteration   7: 4851648.470 ops/s
Iteration   8: 4823343.177 ops/s
Iteration   9: 4810440.736 ops/s
Iteration  10: 4783765.787 ops/s
Iteration  11: 4704818.886 ops/s
Iteration  12: 4692493.340 ops/s
Iteration  13: 4833434.946 ops/s
Iteration  14: 4753112.804 ops/s
Iteration  15: 4864508.957 ops/s
Iteration  16: 4832877.546 ops/s
Iteration  17: 4664956.520 ops/s
Iteration  18: 4776392.709 ops/s
Iteration  19: 5167510.094 ops/s
Iteration  20: 4805557.733 ops/s
Iteration  21: 4771094.329 ops/s
Iteration  22: 4774875.116 ops/s
Iteration  23: 4793702.874 ops/s
Iteration  24: 4821849.072 ops/s
Iteration  25: 4935459.072 ops/s
Iteration  26: 4803521.652 ops/s
Iteration  27: 4880767.290 ops/s
Iteration  28: 4926312.635 ops/s
Iteration  29: 4713208.602 ops/s
Iteration  30: 4828151.817 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_sumOfLong":
  4812437.267 ±(99.9%) 63682.817 ops/s [Average]
  (min, avg, max) = (4664956.520, 4812437.267, 5167510.094), stdev = 95317.450
  CI (99.9%): [4748754.450, 4876120.084] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_sumOfLong  thrpt   30  4812437.267 ± 63682.817  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1480037.259 ops/s
# Warmup Iteration   2: 3302457.997 ops/s
# Warmup Iteration   3: 3237183.858 ops/s
# Warmup Iteration   4: 2891305.260 ops/s
# Warmup Iteration   5: 3254399.171 ops/s
# Warmup Iteration   6: 3259576.861 ops/s
# Warmup Iteration   7: 3262229.151 ops/s
# Warmup Iteration   8: 3449583.219 ops/s
# Warmup Iteration   9: 3355405.410 ops/s
# Warmup Iteration  10: 3296738.698 ops/s
# Warmup Iteration  11: 3272280.758 ops/s
# Warmup Iteration  12: 3341347.887 ops/s
# Warmup Iteration  13: 3251427.362 ops/s
# Warmup Iteration  14: 3188613.564 ops/s
# Warmup Iteration  15: 3299626.820 ops/s
# Warmup Iteration  16: 3179150.241 ops/s
# Warmup Iteration  17: 3240482.164 ops/s
# Warmup Iteration  18: 3259589.106 ops/s
# Warmup Iteration  19: 3173320.251 ops/s
# Warmup Iteration  20: 3185185.102 ops/s
# Warmup Iteration  21: 3305238.814 ops/s
# Warmup Iteration  22: 3279630.616 ops/s
# Warmup Iteration  23: 3314947.903 ops/s
# Warmup Iteration  24: 3308422.583 ops/s
# Warmup Iteration  25: 3188226.887 ops/s
# Warmup Iteration  26: 3229969.109 ops/s
# Warmup Iteration  27: 3162755.637 ops/s
# Warmup Iteration  28: 3173409.879 ops/s
# Warmup Iteration  29: 3156167.105 ops/s
# Warmup Iteration  30: 3182242.788 ops/s
Iteration   1: 3199572.159 ops/s
Iteration   2: 3144345.765 ops/s
Iteration   3: 3149470.580 ops/s
Iteration   4: 3190651.144 ops/s
Iteration   5: 3214356.314 ops/s
Iteration   6: 3224308.511 ops/s
Iteration   7: 3228421.180 ops/s
Iteration   8: 3231186.704 ops/s
Iteration   9: 3198808.237 ops/s
Iteration  10: 3266637.416 ops/s
Iteration  11: 3236864.752 ops/s
Iteration  12: 3258751.199 ops/s
Iteration  13: 3219821.760 ops/s
Iteration  14: 3221914.424 ops/s
Iteration  15: 3244912.184 ops/s
Iteration  16: 3264025.734 ops/s
Iteration  17: 3134949.740 ops/s
Iteration  18: 3186472.074 ops/s
Iteration  19: 3128594.130 ops/s
Iteration  20: 3110742.530 ops/s
Iteration  21: 3165435.186 ops/s
Iteration  22: 3284136.524 ops/s
Iteration  23: 3273999.989 ops/s
Iteration  24: 3184418.159 ops/s
Iteration  25: 3156889.486 ops/s
Iteration  26: 3144189.215 ops/s
Iteration  27: 3158159.413 ops/s
Iteration  28: 3188914.089 ops/s
Iteration  29: 3159247.883 ops/s
Iteration  30: 3156637.938 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_tap":
  3197561.147 ±(99.9%) 31930.882 ops/s [Average]
  (min, avg, max) = (3110742.530, 3197561.147, 3284136.524), stdev = 47792.644
  CI (99.9%): [3165630.266, 3229492.029] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_tap  thrpt   30  3197561.147 ± 31930.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testAggregateBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testAggregateBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 996235.226 ops/s
# Warmup Iteration   2: 1724963.685 ops/s
# Warmup Iteration   3: 1980381.883 ops/s
# Warmup Iteration   4: 1988289.970 ops/s
# Warmup Iteration   5: 2007156.742 ops/s
# Warmup Iteration   6: 1664154.357 ops/s
# Warmup Iteration   7: 1981489.328 ops/s
# Warmup Iteration   8: 2036524.443 ops/s
# Warmup Iteration   9: 1965748.401 ops/s
# Warmup Iteration  10: 1983970.708 ops/s
# Warmup Iteration  11: 2001834.434 ops/s
# Warmup Iteration  12: 1991302.925 ops/s
# Warmup Iteration  13: 1957889.737 ops/s
# Warmup Iteration  14: 2005905.600 ops/s
# Warmup Iteration  15: 2077417.851 ops/s
# Warmup Iteration  16: 2043103.551 ops/s
# Warmup Iteration  17: 2031391.385 ops/s
# Warmup Iteration  18: 1991382.449 ops/s
# Warmup Iteration  19: 2063510.784 ops/s
# Warmup Iteration  20: 2060441.767 ops/s
# Warmup Iteration  21: 2053619.114 ops/s
# Warmup Iteration  22: 2061578.363 ops/s
# Warmup Iteration  23: 1983293.489 ops/s
# Warmup Iteration  24: 1985672.686 ops/s
# Warmup Iteration  25: 1971347.966 ops/s
# Warmup Iteration  26: 2074477.550 ops/s
# Warmup Iteration  27: 2076460.633 ops/s
# Warmup Iteration  28: 1992962.997 ops/s
# Warmup Iteration  29: 2061603.022 ops/s
# Warmup Iteration  30: 2066949.040 ops/s
Iteration   1: 2044341.121 ops/s
Iteration   2: 1966396.664 ops/s
Iteration   3: 1996854.067 ops/s
Iteration   4: 1980116.496 ops/s
Iteration   5: 2021278.268 ops/s
Iteration   6: 2028871.865 ops/s
Iteration   7: 1972243.156 ops/s
Iteration   8: 1989904.383 ops/s
Iteration   9: 1979740.289 ops/s
Iteration  10: 1975246.578 ops/s
Iteration  11: 2002819.076 ops/s
Iteration  12: 1968940.891 ops/s
Iteration  13: 1989665.926 ops/s
Iteration  14: 2000075.655 ops/s
Iteration  15: 1998275.453 ops/s
Iteration  16: 2002042.168 ops/s
Iteration  17: 1952910.340 ops/s
Iteration  18: 1962401.228 ops/s
Iteration  19: 2007261.797 ops/s
Iteration  20: 1970946.074 ops/s
Iteration  21: 2033516.073 ops/s
Iteration  22: 1996219.359 ops/s
Iteration  23: 1980360.672 ops/s
Iteration  24: 2010066.345 ops/s
Iteration  25: 2072508.013 ops/s
Iteration  26: 2063184.242 ops/s
Iteration  27: 2058035.703 ops/s
Iteration  28: 2016002.747 ops/s
Iteration  29: 2014722.078 ops/s
Iteration  30: 2013510.259 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testAggregateBy":
  2002281.899 ±(99.9%) 20400.600 ops/s [Average]
  (min, avg, max) = (1952910.340, 2002281.899, 2072508.013), stdev = 30534.660
  CI (99.9%): [1981881.299, 2022682.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_testAggregateBy  thrpt   30  2002281.899 ± 20400.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 505955.878 ops/s
# Warmup Iteration   2: 1074326.051 ops/s
# Warmup Iteration   3: 1339660.791 ops/s
# Warmup Iteration   4: 1175217.419 ops/s
# Warmup Iteration   5: 1268232.934 ops/s
# Warmup Iteration   6: 1311384.134 ops/s
# Warmup Iteration   7: 1321319.729 ops/s
# Warmup Iteration   8: 1309365.343 ops/s
# Warmup Iteration   9: 1343235.271 ops/s
# Warmup Iteration  10: 1337363.113 ops/s
# Warmup Iteration  11: 1309706.705 ops/s
# Warmup Iteration  12: 1326301.887 ops/s
# Warmup Iteration  13: 1309301.505 ops/s
# Warmup Iteration  14: 1344354.571 ops/s
# Warmup Iteration  15: 1328634.652 ops/s
# Warmup Iteration  16: 1306887.680 ops/s
# Warmup Iteration  17: 1370010.455 ops/s
# Warmup Iteration  18: 1372104.274 ops/s
# Warmup Iteration  19: 1339875.606 ops/s
# Warmup Iteration  20: 1368200.362 ops/s
# Warmup Iteration  21: 1373159.457 ops/s
# Warmup Iteration  22: 1377062.662 ops/s
# Warmup Iteration  23: 1362118.875 ops/s
# Warmup Iteration  24: 1373893.906 ops/s
# Warmup Iteration  25: 1379716.446 ops/s
# Warmup Iteration  26: 1353321.807 ops/s
# Warmup Iteration  27: 1336594.486 ops/s
# Warmup Iteration  28: 1331216.375 ops/s
# Warmup Iteration  29: 1334024.250 ops/s
# Warmup Iteration  30: 1333473.459 ops/s
Iteration   1: 1308568.509 ops/s
Iteration   2: 1308532.873 ops/s
Iteration   3: 1326843.727 ops/s
Iteration   4: 1383027.895 ops/s
Iteration   5: 1393170.681 ops/s
Iteration   6: 1368391.442 ops/s
Iteration   7: 1297641.282 ops/s
Iteration   8: 1332638.147 ops/s
Iteration   9: 1323230.713 ops/s
Iteration  10: 1335963.826 ops/s
Iteration  11: 1337715.762 ops/s
Iteration  12: 1322878.091 ops/s
Iteration  13: 1376158.063 ops/s
Iteration  14: 1367409.574 ops/s
Iteration  15: 1301211.853 ops/s
Iteration  16: 1340300.814 ops/s
Iteration  17: 1340749.791 ops/s
Iteration  18: 1382974.832 ops/s
Iteration  19: 1371522.901 ops/s
Iteration  20: 1374292.505 ops/s
Iteration  21: 1389688.653 ops/s
Iteration  22: 1380766.654 ops/s
Iteration  23: 1364813.222 ops/s
Iteration  24: 1331091.834 ops/s
Iteration  25: 1292799.200 ops/s
Iteration  26: 1352487.068 ops/s
Iteration  27: 1351629.178 ops/s
Iteration  28: 1343027.358 ops/s
Iteration  29: 1304632.049 ops/s
Iteration  30: 1325152.815 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testClone":
  1344310.377 ±(99.9%) 19977.479 ops/s [Average]
  (min, avg, max) = (1292799.200, 1344310.377, 1393170.681), stdev = 29901.352
  CI (99.9%): [1324332.898, 1364287.856] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_testClone  thrpt   30  1344310.377 ± 19977.479  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testNewMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testNewMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1815522.415 ops/s
# Warmup Iteration   2: 4416333.338 ops/s
# Warmup Iteration   3: 3601681.869 ops/s
# Warmup Iteration   4: 4235312.188 ops/s
# Warmup Iteration   5: 4344264.434 ops/s
# Warmup Iteration   6: 4272447.348 ops/s
# Warmup Iteration   7: 4246591.935 ops/s
# Warmup Iteration   8: 4266698.411 ops/s
# Warmup Iteration   9: 4347708.329 ops/s
# Warmup Iteration  10: 4351935.774 ops/s
# Warmup Iteration  11: 4314145.957 ops/s
# Warmup Iteration  12: 4265438.614 ops/s
# Warmup Iteration  13: 4262145.023 ops/s
# Warmup Iteration  14: 4302063.705 ops/s
# Warmup Iteration  15: 4288481.466 ops/s
# Warmup Iteration  16: 4354663.483 ops/s
# Warmup Iteration  17: 4394632.993 ops/s
# Warmup Iteration  18: 4335194.533 ops/s
# Warmup Iteration  19: 4297543.697 ops/s
# Warmup Iteration  20: 4288444.321 ops/s
# Warmup Iteration  21: 4359770.172 ops/s
# Warmup Iteration  22: 4424694.778 ops/s
# Warmup Iteration  23: 4266349.061 ops/s
# Warmup Iteration  24: 4303200.760 ops/s
# Warmup Iteration  25: 4347565.857 ops/s
# Warmup Iteration  26: 4278558.851 ops/s
# Warmup Iteration  27: 4343201.734 ops/s
# Warmup Iteration  28: 4335318.488 ops/s
# Warmup Iteration  29: 4274353.316 ops/s
# Warmup Iteration  30: 4320584.072 ops/s
Iteration   1: 4292098.715 ops/s
Iteration   2: 4294989.636 ops/s
Iteration   3: 4331796.136 ops/s
Iteration   4: 4342742.528 ops/s
Iteration   5: 4279792.047 ops/s
Iteration   6: 4212465.270 ops/s
Iteration   7: 4328996.384 ops/s
Iteration   8: 4342328.129 ops/s
Iteration   9: 4409253.473 ops/s
Iteration  10: 4360675.744 ops/s
Iteration  11: 4410063.222 ops/s
Iteration  12: 4406807.136 ops/s
Iteration  13: 4426083.077 ops/s
Iteration  14: 4427839.960 ops/s
Iteration  15: 4255953.957 ops/s
Iteration  16: 4230852.401 ops/s
Iteration  17: 4336414.331 ops/s
Iteration  18: 4292437.088 ops/s
Iteration  19: 4392339.135 ops/s
Iteration  20: 4315152.311 ops/s
Iteration  21: 4203017.394 ops/s
Iteration  22: 4267890.866 ops/s
Iteration  23: 4246491.521 ops/s
Iteration  24: 4314928.886 ops/s
Iteration  25: 4263987.250 ops/s
Iteration  26: 4401899.883 ops/s
Iteration  27: 4287122.475 ops/s
Iteration  28: 4227222.153 ops/s
Iteration  29: 4315827.900 ops/s
Iteration  30: 4306501.215 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testNewMap":
  4317465.674 ±(99.9%) 43630.803 ops/s [Average]
  (min, avg, max) = (4203017.394, 4317465.674, 4427839.960), stdev = 65304.537
  CI (99.9%): [4273834.871, 4361096.477] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_testNewMap  thrpt   30  4317465.674 ± 43630.803  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testNewMapWithKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testNewMapWithKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1506212.728 ops/s
# Warmup Iteration   2: 3783471.653 ops/s
# Warmup Iteration   3: 3072113.288 ops/s
# Warmup Iteration   4: 3768661.179 ops/s
# Warmup Iteration   5: 3799983.692 ops/s
# Warmup Iteration   6: 3669009.148 ops/s
# Warmup Iteration   7: 3683501.419 ops/s
# Warmup Iteration   8: 3689073.262 ops/s
# Warmup Iteration   9: 3703205.980 ops/s
# Warmup Iteration  10: 3837831.435 ops/s
# Warmup Iteration  11: 3799912.098 ops/s
# Warmup Iteration  12: 3752919.521 ops/s
# Warmup Iteration  13: 3854566.350 ops/s
# Warmup Iteration  14: 3763705.354 ops/s
# Warmup Iteration  15: 3752718.359 ops/s
# Warmup Iteration  16: 3812412.056 ops/s
# Warmup Iteration  17: 3736951.115 ops/s
# Warmup Iteration  18: 3780794.515 ops/s
# Warmup Iteration  19: 3780006.496 ops/s
# Warmup Iteration  20: 3715382.845 ops/s
# Warmup Iteration  21: 3827332.388 ops/s
# Warmup Iteration  22: 3802629.748 ops/s
# Warmup Iteration  23: 3769345.731 ops/s
# Warmup Iteration  24: 3711659.743 ops/s
# Warmup Iteration  25: 3748130.888 ops/s
# Warmup Iteration  26: 3717692.691 ops/s
# Warmup Iteration  27: 3716872.606 ops/s
# Warmup Iteration  28: 3683185.742 ops/s
# Warmup Iteration  29: 3721412.326 ops/s
# Warmup Iteration  30: 3788431.787 ops/s
Iteration   1: 3651671.526 ops/s
Iteration   2: 3693363.407 ops/s
Iteration   3: 3952999.948 ops/s
Iteration   4: 3916444.314 ops/s
Iteration   5: 3758082.377 ops/s
Iteration   6: 3899201.088 ops/s
Iteration   7: 3785785.299 ops/s
Iteration   8: 3791905.258 ops/s
Iteration   9: 3782302.139 ops/s
Iteration  10: 3715774.263 ops/s
Iteration  11: 3732868.155 ops/s
Iteration  12: 3743711.890 ops/s
Iteration  13: 3776257.746 ops/s
Iteration  14: 3879118.775 ops/s
Iteration  15: 3734905.021 ops/s
Iteration  16: 3814397.006 ops/s
Iteration  17: 3860736.363 ops/s
Iteration  18: 3800018.416 ops/s
Iteration  19: 3757420.044 ops/s
Iteration  20: 3759097.043 ops/s
Iteration  21: 3841030.268 ops/s
Iteration  22: 3700111.991 ops/s
Iteration  23: 3695546.567 ops/s
Iteration  24: 3703246.375 ops/s
Iteration  25: 3777740.636 ops/s
Iteration  26: 3816171.470 ops/s
Iteration  27: 3806949.908 ops/s
Iteration  28: 3759950.574 ops/s
Iteration  29: 3689877.777 ops/s
Iteration  30: 3752174.383 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testNewMapWithKeyValue":
  3778295.334 ±(99.9%) 48107.229 ops/s [Average]
  (min, avg, max) = (3651671.526, 3778295.334, 3952999.948), stdev = 72004.641
  CI (99.9%): [3730188.106, 3826402.563] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_testNewMapWithKeyValue  thrpt   30  3778295.334 ± 48107.229  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 857982.415 ops/s
# Warmup Iteration   2: 2057757.807 ops/s
# Warmup Iteration   3: 1651318.448 ops/s
# Warmup Iteration   4: 2041287.748 ops/s
# Warmup Iteration   5: 2080916.103 ops/s
# Warmup Iteration   6: 2028808.281 ops/s
# Warmup Iteration   7: 2023872.875 ops/s
# Warmup Iteration   8: 2025551.685 ops/s
# Warmup Iteration   9: 2038745.403 ops/s
# Warmup Iteration  10: 2028584.190 ops/s
# Warmup Iteration  11: 2034513.892 ops/s
# Warmup Iteration  12: 2019287.212 ops/s
# Warmup Iteration  13: 2023843.866 ops/s
# Warmup Iteration  14: 2040418.837 ops/s
# Warmup Iteration  15: 2016327.812 ops/s
# Warmup Iteration  16: 2035335.650 ops/s
# Warmup Iteration  17: 2021292.639 ops/s
# Warmup Iteration  18: 2059285.125 ops/s
# Warmup Iteration  19: 2050324.580 ops/s
# Warmup Iteration  20: 2055967.999 ops/s
# Warmup Iteration  21: 2058209.615 ops/s
# Warmup Iteration  22: 2056494.025 ops/s
# Warmup Iteration  23: 2022358.800 ops/s
# Warmup Iteration  24: 2070626.369 ops/s
# Warmup Iteration  25: 2012455.013 ops/s
# Warmup Iteration  26: 2058769.451 ops/s
# Warmup Iteration  27: 2025486.242 ops/s
# Warmup Iteration  28: 2042110.935 ops/s
# Warmup Iteration  29: 2029213.661 ops/s
# Warmup Iteration  30: 2029296.616 ops/s
Iteration   1: 2014677.943 ops/s
Iteration   2: 2078230.955 ops/s
Iteration   3: 2047795.935 ops/s
Iteration   4: 2008128.909 ops/s
Iteration   5: 2022915.186 ops/s
Iteration   6: 2022981.721 ops/s
Iteration   7: 2029007.721 ops/s
Iteration   8: 2052085.660 ops/s
Iteration   9: 2028554.842 ops/s
Iteration  10: 2066326.978 ops/s
Iteration  11: 2012478.019 ops/s
Iteration  12: 2072492.640 ops/s
Iteration  13: 2117137.946 ops/s
Iteration  14: 2044943.671 ops/s
Iteration  15: 2036673.033 ops/s
Iteration  16: 2040932.888 ops/s
Iteration  17: 2109313.258 ops/s
Iteration  18: 2082480.941 ops/s
Iteration  19: 2020653.511 ops/s
Iteration  20: 2095395.960 ops/s
Iteration  21: 1997513.382 ops/s
Iteration  22: 2012742.334 ops/s
Iteration  23: 2064400.157 ops/s
Iteration  24: 2031452.355 ops/s
Iteration  25: 2039238.816 ops/s
Iteration  26: 2001009.210 ops/s
Iteration  27: 2035973.311 ops/s
Iteration  28: 2008596.371 ops/s
Iteration  29: 2082902.758 ops/s
Iteration  30: 2014811.373 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_testToString":
  2043061.593 ±(99.9%) 21715.846 ops/s [Average]
  (min, avg, max) = (1997513.382, 2043061.593, 2117137.946), stdev = 32503.258
  CI (99.9%): [2021345.747, 2064777.439] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_testToString  thrpt   30  2043061.593 ± 21715.846  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_test_toString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_test_toString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1027397.676 ops/s
# Warmup Iteration   2: 2525745.824 ops/s
# Warmup Iteration   3: 2487841.990 ops/s
# Warmup Iteration   4: 2065719.411 ops/s
# Warmup Iteration   5: 2527863.078 ops/s
# Warmup Iteration   6: 2495826.342 ops/s
# Warmup Iteration   7: 2519424.472 ops/s
# Warmup Iteration   8: 2511989.684 ops/s
# Warmup Iteration   9: 2593812.863 ops/s
# Warmup Iteration  10: 2490336.409 ops/s
# Warmup Iteration  11: 2528344.639 ops/s
# Warmup Iteration  12: 2554024.750 ops/s
# Warmup Iteration  13: 2441309.973 ops/s
# Warmup Iteration  14: 2528751.481 ops/s
# Warmup Iteration  15: 2492581.121 ops/s
# Warmup Iteration  16: 2539263.052 ops/s
# Warmup Iteration  17: 2504420.782 ops/s
# Warmup Iteration  18: 2480312.210 ops/s
# Warmup Iteration  19: 2529667.498 ops/s
# Warmup Iteration  20: 2485099.947 ops/s
# Warmup Iteration  21: 2500916.080 ops/s
# Warmup Iteration  22: 2563385.881 ops/s
# Warmup Iteration  23: 2535759.852 ops/s
# Warmup Iteration  24: 2510536.217 ops/s
# Warmup Iteration  25: 2482297.063 ops/s
# Warmup Iteration  26: 2505875.750 ops/s
# Warmup Iteration  27: 2503763.983 ops/s
# Warmup Iteration  28: 2460416.628 ops/s
# Warmup Iteration  29: 2481777.542 ops/s
# Warmup Iteration  30: 2492824.287 ops/s
Iteration   1: 2511492.556 ops/s
Iteration   2: 2589790.826 ops/s
Iteration   3: 2495892.407 ops/s
Iteration   4: 2497909.169 ops/s
Iteration   5: 2529986.188 ops/s
Iteration   6: 2485309.907 ops/s
Iteration   7: 2551678.713 ops/s
Iteration   8: 2512923.493 ops/s
Iteration   9: 2496748.291 ops/s
Iteration  10: 2500670.674 ops/s
Iteration  11: 2486108.855 ops/s
Iteration  12: 2511832.664 ops/s
Iteration  13: 2472832.329 ops/s
Iteration  14: 2520776.803 ops/s
Iteration  15: 2491120.200 ops/s
Iteration  16: 2628467.261 ops/s
Iteration  17: 2502692.252 ops/s
Iteration  18: 2493364.369 ops/s
Iteration  19: 2472920.269 ops/s
Iteration  20: 2525795.769 ops/s
Iteration  21: 2474238.129 ops/s
Iteration  22: 2615737.234 ops/s
Iteration  23: 2622349.263 ops/s
Iteration  24: 2624402.065 ops/s
Iteration  25: 2626856.458 ops/s
Iteration  26: 2618713.349 ops/s
Iteration  27: 2596477.605 ops/s
Iteration  28: 2588045.376 ops/s
Iteration  29: 2603699.040 ops/s
Iteration  30: 2563801.426 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_test_toString":
  2540421.098 ±(99.9%) 37068.867 ops/s [Average]
  (min, avg, max) = (2472832.329, 2540421.098, 2628467.261), stdev = 55482.940
  CI (99.9%): [2503352.231, 2577489.966] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_test_toString  thrpt   30  2540421.098 ± 37068.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 619148.832 ops/s
# Warmup Iteration   2: 1341052.969 ops/s
# Warmup Iteration   3: 1413202.568 ops/s
# Warmup Iteration   4: 1446572.356 ops/s
# Warmup Iteration   5: 1176575.144 ops/s
# Warmup Iteration   6: 1454398.928 ops/s
# Warmup Iteration   7: 1445609.642 ops/s
# Warmup Iteration   8: 1441370.394 ops/s
# Warmup Iteration   9: 1446260.688 ops/s
# Warmup Iteration  10: 1436949.585 ops/s
# Warmup Iteration  11: 1446272.692 ops/s
# Warmup Iteration  12: 1485696.840 ops/s
# Warmup Iteration  13: 1440800.406 ops/s
# Warmup Iteration  14: 1458146.168 ops/s
# Warmup Iteration  15: 1432579.965 ops/s
# Warmup Iteration  16: 1431747.530 ops/s
# Warmup Iteration  17: 1432123.836 ops/s
# Warmup Iteration  18: 1442445.262 ops/s
# Warmup Iteration  19: 1449358.054 ops/s
# Warmup Iteration  20: 1474818.188 ops/s
# Warmup Iteration  21: 1488424.189 ops/s
# Warmup Iteration  22: 1430944.217 ops/s
# Warmup Iteration  23: 1460025.384 ops/s
# Warmup Iteration  24: 1473298.346 ops/s
# Warmup Iteration  25: 1478195.284 ops/s
# Warmup Iteration  26: 1487391.411 ops/s
# Warmup Iteration  27: 1459265.663 ops/s
# Warmup Iteration  28: 1507633.474 ops/s
# Warmup Iteration  29: 1431641.470 ops/s
# Warmup Iteration  30: 1448763.362 ops/s
Iteration   1: 1444826.459 ops/s
Iteration   2: 1480317.202 ops/s
Iteration   3: 1434355.182 ops/s
Iteration   4: 1428948.168 ops/s
Iteration   5: 1431021.252 ops/s
Iteration   6: 1477865.618 ops/s
Iteration   7: 1509294.559 ops/s
Iteration   8: 1460143.039 ops/s
Iteration   9: 1427391.120 ops/s
Iteration  10: 1442444.953 ops/s
Iteration  11: 1456527.550 ops/s
Iteration  12: 1448774.862 ops/s
Iteration  13: 1435383.911 ops/s
Iteration  14: 1477566.100 ops/s
Iteration  15: 1422135.628 ops/s
Iteration  16: 1435801.044 ops/s
Iteration  17: 1430876.593 ops/s
Iteration  18: 1485923.978 ops/s
Iteration  19: 1414455.377 ops/s
Iteration  20: 1434052.861 ops/s
Iteration  21: 1414599.366 ops/s
Iteration  22: 1464333.011 ops/s
Iteration  23: 1419389.370 ops/s
Iteration  24: 1433770.162 ops/s
Iteration  25: 1489596.383 ops/s
Iteration  26: 1490645.113 ops/s
Iteration  27: 1492730.604 ops/s
Iteration  28: 1441144.384 ops/s
Iteration  29: 1443510.858 ops/s
Iteration  30: 1437495.210 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toArray":
  1450177.331 ±(99.9%) 17592.787 ops/s [Average]
  (min, avg, max) = (1414455.377, 1450177.331, 1509294.559), stdev = 26332.058
  CI (99.9%): [1432584.543, 1467770.118] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_toArray  thrpt   30  1450177.331 ± 17592.787  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681364.678 ops/s
# Warmup Iteration   2: 1309214.185 ops/s
# Warmup Iteration   3: 1429744.642 ops/s
# Warmup Iteration   4: 1447675.831 ops/s
# Warmup Iteration   5: 1176881.573 ops/s
# Warmup Iteration   6: 1463202.959 ops/s
# Warmup Iteration   7: 1474326.047 ops/s
# Warmup Iteration   8: 1456583.486 ops/s
# Warmup Iteration   9: 1453189.347 ops/s
# Warmup Iteration  10: 1481232.013 ops/s
# Warmup Iteration  11: 1479124.426 ops/s
# Warmup Iteration  12: 1512413.181 ops/s
# Warmup Iteration  13: 1474639.524 ops/s
# Warmup Iteration  14: 1509767.802 ops/s
# Warmup Iteration  15: 1498354.662 ops/s
# Warmup Iteration  16: 1493779.901 ops/s
# Warmup Iteration  17: 1511183.302 ops/s
# Warmup Iteration  18: 1480885.608 ops/s
# Warmup Iteration  19: 1492735.600 ops/s
# Warmup Iteration  20: 1502604.525 ops/s
# Warmup Iteration  21: 1508640.627 ops/s
# Warmup Iteration  22: 1482931.634 ops/s
# Warmup Iteration  23: 1460853.527 ops/s
# Warmup Iteration  24: 1478706.120 ops/s
# Warmup Iteration  25: 1461874.073 ops/s
# Warmup Iteration  26: 1456360.827 ops/s
# Warmup Iteration  27: 1451663.636 ops/s
# Warmup Iteration  28: 1450062.153 ops/s
# Warmup Iteration  29: 1474198.486 ops/s
# Warmup Iteration  30: 1496604.688 ops/s
Iteration   1: 1520481.773 ops/s
Iteration   2: 1457794.286 ops/s
Iteration   3: 1460682.730 ops/s
Iteration   4: 1461412.619 ops/s
Iteration   5: 1448830.511 ops/s
Iteration   6: 1456415.200 ops/s
Iteration   7: 1518403.045 ops/s
Iteration   8: 1456384.552 ops/s
Iteration   9: 1468998.466 ops/s
Iteration  10: 1454755.226 ops/s
Iteration  11: 1467431.847 ops/s
Iteration  12: 1500668.594 ops/s
Iteration  13: 1508809.868 ops/s
Iteration  14: 1496564.789 ops/s
Iteration  15: 1487477.146 ops/s
Iteration  16: 1447064.195 ops/s
Iteration  17: 1506863.306 ops/s
Iteration  18: 1531390.219 ops/s
Iteration  19: 1473394.961 ops/s
Iteration  20: 1452186.259 ops/s
Iteration  21: 1509254.611 ops/s
Iteration  22: 1511186.050 ops/s
Iteration  23: 1515439.446 ops/s
Iteration  24: 1488031.689 ops/s
Iteration  25: 1513927.926 ops/s
Iteration  26: 1454939.698 ops/s
Iteration  27: 1462602.788 ops/s
Iteration  28: 1466819.156 ops/s
Iteration  29: 1469874.845 ops/s
Iteration  30: 1479055.247 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toBag":
  1481571.368 ±(99.9%) 17374.868 ops/s [Average]
  (min, avg, max) = (1447064.195, 1481571.368, 1531390.219), stdev = 26005.887
  CI (99.9%): [1464196.500, 1498946.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_toBag  thrpt   30  1481571.368 ± 17374.868  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 799992.353 ops/s
# Warmup Iteration   2: 1903103.029 ops/s
# Warmup Iteration   3: 1931301.005 ops/s
# Warmup Iteration   4: 1623949.265 ops/s
# Warmup Iteration   5: 1926124.945 ops/s
# Warmup Iteration   6: 1940376.875 ops/s
# Warmup Iteration   7: 1945687.343 ops/s
# Warmup Iteration   8: 1920403.818 ops/s
# Warmup Iteration   9: 1910095.750 ops/s
# Warmup Iteration  10: 1916830.243 ops/s
# Warmup Iteration  11: 1918987.803 ops/s
# Warmup Iteration  12: 1924866.783 ops/s
# Warmup Iteration  13: 1909989.921 ops/s
# Warmup Iteration  14: 1950704.851 ops/s
# Warmup Iteration  15: 2007050.545 ops/s
# Warmup Iteration  16: 1908649.588 ops/s
# Warmup Iteration  17: 1925898.416 ops/s
# Warmup Iteration  18: 1955324.539 ops/s
# Warmup Iteration  19: 1922084.807 ops/s
# Warmup Iteration  20: 1926138.920 ops/s
# Warmup Iteration  21: 1920366.619 ops/s
# Warmup Iteration  22: 1927869.270 ops/s
# Warmup Iteration  23: 1942055.624 ops/s
# Warmup Iteration  24: 1890637.856 ops/s
# Warmup Iteration  25: 1947792.220 ops/s
# Warmup Iteration  26: 1890836.407 ops/s
# Warmup Iteration  27: 1904389.055 ops/s
# Warmup Iteration  28: 1931887.963 ops/s
# Warmup Iteration  29: 1917510.833 ops/s
# Warmup Iteration  30: 1915141.687 ops/s
Iteration   1: 1944373.359 ops/s
Iteration   2: 1929263.628 ops/s
Iteration   3: 1936683.262 ops/s
Iteration   4: 1948766.743 ops/s
Iteration   5: 1933134.428 ops/s
Iteration   6: 1918449.864 ops/s
Iteration   7: 1915200.203 ops/s
Iteration   8: 1939968.690 ops/s
Iteration   9: 1964751.436 ops/s
Iteration  10: 1959197.782 ops/s
Iteration  11: 1920431.945 ops/s
Iteration  12: 1921676.402 ops/s
Iteration  13: 1993604.929 ops/s
Iteration  14: 1969888.832 ops/s
Iteration  15: 1936031.366 ops/s
Iteration  16: 2016913.782 ops/s
Iteration  17: 1945094.363 ops/s
Iteration  18: 1933470.765 ops/s
Iteration  19: 1937830.522 ops/s
Iteration  20: 1929678.242 ops/s
Iteration  21: 1939195.060 ops/s
Iteration  22: 1992775.663 ops/s
Iteration  23: 1940544.543 ops/s
Iteration  24: 1943465.622 ops/s
Iteration  25: 1944229.135 ops/s
Iteration  26: 1973401.612 ops/s
Iteration  27: 1933702.181 ops/s
Iteration  28: 1969148.350 ops/s
Iteration  29: 1914151.659 ops/s
Iteration  30: 2004490.923 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toImmutable":
  1948317.176 ±(99.9%) 17763.400 ops/s [Average]
  (min, avg, max) = (1914151.659, 1948317.176, 2016913.782), stdev = 26587.422
  CI (99.9%): [1930553.777, 1966080.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_toImmutable  thrpt   30  1948317.176 ± 17763.400  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1486700.061 ops/s
# Warmup Iteration   2: 3853685.362 ops/s
# Warmup Iteration   3: 3310028.278 ops/s
# Warmup Iteration   4: 3827105.633 ops/s
# Warmup Iteration   5: 3847541.881 ops/s
# Warmup Iteration   6: 4036868.028 ops/s
# Warmup Iteration   7: 3922755.357 ops/s
# Warmup Iteration   8: 3855832.598 ops/s
# Warmup Iteration   9: 3855702.373 ops/s
# Warmup Iteration  10: 3921431.815 ops/s
# Warmup Iteration  11: 3984353.207 ops/s
# Warmup Iteration  12: 3853792.930 ops/s
# Warmup Iteration  13: 3971163.550 ops/s
# Warmup Iteration  14: 3957174.871 ops/s
# Warmup Iteration  15: 3962460.811 ops/s
# Warmup Iteration  16: 3852137.694 ops/s
# Warmup Iteration  17: 3894722.736 ops/s
# Warmup Iteration  18: 3834112.174 ops/s
# Warmup Iteration  19: 3889215.095 ops/s
# Warmup Iteration  20: 3895526.252 ops/s
# Warmup Iteration  21: 3842059.764 ops/s
# Warmup Iteration  22: 3835983.924 ops/s
# Warmup Iteration  23: 3873297.699 ops/s
# Warmup Iteration  24: 3795769.648 ops/s
# Warmup Iteration  25: 3870441.487 ops/s
# Warmup Iteration  26: 3851732.827 ops/s
# Warmup Iteration  27: 3868905.356 ops/s
# Warmup Iteration  28: 3775162.361 ops/s
# Warmup Iteration  29: 3819150.564 ops/s
# Warmup Iteration  30: 3846724.562 ops/s
Iteration   1: 3836447.132 ops/s
Iteration   2: 3811793.877 ops/s
Iteration   3: 3778633.161 ops/s
Iteration   4: 3838676.120 ops/s
Iteration   5: 3870357.289 ops/s
Iteration   6: 3762934.378 ops/s
Iteration   7: 3748590.214 ops/s
Iteration   8: 3825526.080 ops/s
Iteration   9: 3783771.122 ops/s
Iteration  10: 3819270.779 ops/s
Iteration  11: 3835982.677 ops/s
Iteration  12: 3632332.952 ops/s
Iteration  13: 3926988.942 ops/s
Iteration  14: 3791606.884 ops/s
Iteration  15: 3815836.194 ops/s
Iteration  16: 3796607.578 ops/s
Iteration  17: 3831692.332 ops/s
Iteration  18: 3823789.321 ops/s
Iteration  19: 3825874.243 ops/s
Iteration  20: 3841493.058 ops/s
Iteration  21: 3860168.395 ops/s
Iteration  22: 3921824.235 ops/s
Iteration  23: 3856408.639 ops/s
Iteration  24: 3888416.019 ops/s
Iteration  25: 3872723.463 ops/s
Iteration  26: 3868012.367 ops/s
Iteration  27: 3848142.747 ops/s
Iteration  28: 3921276.487 ops/s
Iteration  29: 3774463.965 ops/s
Iteration  30: 3774801.973 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toList":
  3826148.087 ±(99.9%) 39365.467 ops/s [Average]
  (min, avg, max) = (3632332.952, 3826148.087, 3926988.942), stdev = 58920.382
  CI (99.9%): [3786782.620, 3865513.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_toList  thrpt   30  3826148.087 ± 39365.467  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1456693.930 ops/s
# Warmup Iteration   2: 3630088.479 ops/s
# Warmup Iteration   3: 3469406.547 ops/s
# Warmup Iteration   4: 2895176.622 ops/s
# Warmup Iteration   5: 3522927.282 ops/s
# Warmup Iteration   6: 3442347.013 ops/s
# Warmup Iteration   7: 3457719.100 ops/s
# Warmup Iteration   8: 3451071.041 ops/s
# Warmup Iteration   9: 3453142.687 ops/s
# Warmup Iteration  10: 3548220.395 ops/s
# Warmup Iteration  11: 3466739.888 ops/s
# Warmup Iteration  12: 3446596.043 ops/s
# Warmup Iteration  13: 3450690.761 ops/s
# Warmup Iteration  14: 3451022.520 ops/s
# Warmup Iteration  15: 3396612.787 ops/s
# Warmup Iteration  16: 3443123.592 ops/s
# Warmup Iteration  17: 3470841.648 ops/s
# Warmup Iteration  18: 3548179.446 ops/s
# Warmup Iteration  19: 3494285.009 ops/s
# Warmup Iteration  20: 3530335.797 ops/s
# Warmup Iteration  21: 3530150.990 ops/s
# Warmup Iteration  22: 3450043.331 ops/s
# Warmup Iteration  23: 3469854.204 ops/s
# Warmup Iteration  24: 3404580.066 ops/s
# Warmup Iteration  25: 3471797.724 ops/s
# Warmup Iteration  26: 3428759.378 ops/s
# Warmup Iteration  27: 3464484.551 ops/s
# Warmup Iteration  28: 3508910.184 ops/s
# Warmup Iteration  29: 3520629.990 ops/s
# Warmup Iteration  30: 3462145.369 ops/s
Iteration   1: 3386530.934 ops/s
Iteration   2: 3487415.717 ops/s
Iteration   3: 3336961.619 ops/s
Iteration   4: 3430670.141 ops/s
Iteration   5: 3561314.808 ops/s
Iteration   6: 3591437.507 ops/s
Iteration   7: 3582125.523 ops/s
Iteration   8: 3457872.015 ops/s
Iteration   9: 3498578.849 ops/s
Iteration  10: 3540107.950 ops/s
Iteration  11: 3521885.141 ops/s
Iteration  12: 3487191.676 ops/s
Iteration  13: 3420502.687 ops/s
Iteration  14: 3370080.006 ops/s
Iteration  15: 3526202.380 ops/s
Iteration  16: 3468252.296 ops/s
Iteration  17: 3552963.222 ops/s
Iteration  18: 3375758.775 ops/s
Iteration  19: 3466907.190 ops/s
Iteration  20: 3585297.477 ops/s
Iteration  21: 3576700.686 ops/s
Iteration  22: 3492240.096 ops/s
Iteration  23: 3404212.076 ops/s
Iteration  24: 3486343.363 ops/s
Iteration  25: 3437469.680 ops/s
Iteration  26: 3465738.817 ops/s
Iteration  27: 3540672.492 ops/s
Iteration  28: 3425424.546 ops/s
Iteration  29: 3410922.627 ops/s
Iteration  30: 3427408.225 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toMap":
  3477172.951 ±(99.9%) 47079.066 ops/s [Average]
  (min, avg, max) = (3336961.619, 3477172.951, 3591437.507), stdev = 70465.735
  CI (99.9%): [3430093.885, 3524252.017] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_toMap  thrpt   30  3477172.951 ± 47079.066  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1060002.576 ops/s
# Warmup Iteration   2: 3819731.783 ops/s
# Warmup Iteration   3: 3413698.644 ops/s
# Warmup Iteration   4: 3670345.558 ops/s
# Warmup Iteration   5: 3950367.842 ops/s
# Warmup Iteration   6: 3906073.937 ops/s
# Warmup Iteration   7: 3944575.553 ops/s
# Warmup Iteration   8: 3900769.132 ops/s
# Warmup Iteration   9: 3905922.091 ops/s
# Warmup Iteration  10: 3924728.385 ops/s
# Warmup Iteration  11: 3795139.694 ops/s
# Warmup Iteration  12: 3811906.171 ops/s
# Warmup Iteration  13: 3822500.923 ops/s
# Warmup Iteration  14: 3913594.339 ops/s
# Warmup Iteration  15: 3809558.866 ops/s
# Warmup Iteration  16: 3938671.071 ops/s
# Warmup Iteration  17: 3900082.128 ops/s
# Warmup Iteration  18: 3945815.859 ops/s
# Warmup Iteration  19: 3940795.776 ops/s
# Warmup Iteration  20: 3886287.941 ops/s
# Warmup Iteration  21: 4011487.935 ops/s
# Warmup Iteration  22: 3808148.630 ops/s
# Warmup Iteration  23: 3826676.816 ops/s
# Warmup Iteration  24: 3841091.094 ops/s
# Warmup Iteration  25: 3929084.289 ops/s
# Warmup Iteration  26: 3854455.853 ops/s
# Warmup Iteration  27: 3890815.046 ops/s
# Warmup Iteration  28: 3809925.080 ops/s
# Warmup Iteration  29: 3917462.790 ops/s
# Warmup Iteration  30: 4077896.087 ops/s
Iteration   1: 4188729.080 ops/s
Iteration   2: 3871263.517 ops/s
Iteration   3: 3797417.093 ops/s
Iteration   4: 4043155.059 ops/s
Iteration   5: 3856972.180 ops/s
Iteration   6: 4004277.532 ops/s
Iteration   7: 3959328.732 ops/s
Iteration   8: 3979870.344 ops/s
Iteration   9: 3912374.420 ops/s
Iteration  10: 4049637.061 ops/s
Iteration  11: 3864074.209 ops/s
Iteration  12: 3985238.506 ops/s
Iteration  13: 3747334.023 ops/s
Iteration  14: 3781210.567 ops/s
Iteration  15: 3811188.914 ops/s
Iteration  16: 3823278.659 ops/s
Iteration  17: 3858574.806 ops/s
Iteration  18: 3785879.447 ops/s
Iteration  19: 3802838.029 ops/s
Iteration  20: 3865523.146 ops/s
Iteration  21: 3799496.263 ops/s
Iteration  22: 3883229.683 ops/s
Iteration  23: 3889641.152 ops/s
Iteration  24: 3958788.154 ops/s
Iteration  25: 3907770.207 ops/s
Iteration  26: 3948029.537 ops/s
Iteration  27: 3964650.576 ops/s
Iteration  28: 3963197.128 ops/s
Iteration  29: 3943678.720 ops/s
Iteration  30: 3880944.842 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSet":
  3904253.053 ±(99.9%) 64669.716 ops/s [Average]
  (min, avg, max) = (3747334.023, 3904253.053, 4188729.080), stdev = 96794.595
  CI (99.9%): [3839583.336, 3968922.769] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_toSet  thrpt   30  3904253.053 ± 64669.716  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 229925.359 ops/s
# Warmup Iteration   2: 403835.761 ops/s
# Warmup Iteration   3: 484442.149 ops/s
# Warmup Iteration   4: 485438.218 ops/s
# Warmup Iteration   5: 495950.914 ops/s
# Warmup Iteration   6: 394177.661 ops/s
# Warmup Iteration   7: 506890.950 ops/s
# Warmup Iteration   8: 528129.061 ops/s
# Warmup Iteration   9: 490864.574 ops/s
# Warmup Iteration  10: 506423.380 ops/s
# Warmup Iteration  11: 512730.714 ops/s
# Warmup Iteration  12: 523362.495 ops/s
# Warmup Iteration  13: 508940.362 ops/s
# Warmup Iteration  14: 506454.150 ops/s
# Warmup Iteration  15: 499238.551 ops/s
# Warmup Iteration  16: 487714.211 ops/s
# Warmup Iteration  17: 481819.718 ops/s
# Warmup Iteration  18: 483311.626 ops/s
# Warmup Iteration  19: 487919.411 ops/s
# Warmup Iteration  20: 484175.522 ops/s
# Warmup Iteration  21: 501217.786 ops/s
# Warmup Iteration  22: 483130.848 ops/s
# Warmup Iteration  23: 484499.738 ops/s
# Warmup Iteration  24: 517090.852 ops/s
# Warmup Iteration  25: 487234.070 ops/s
# Warmup Iteration  26: 505635.546 ops/s
# Warmup Iteration  27: 496124.393 ops/s
# Warmup Iteration  28: 491182.199 ops/s
# Warmup Iteration  29: 514961.226 ops/s
# Warmup Iteration  30: 481013.045 ops/s
Iteration   1: 490813.211 ops/s
Iteration   2: 528835.352 ops/s
Iteration   3: 500549.932 ops/s
Iteration   4: 523487.073 ops/s
Iteration   5: 522978.724 ops/s
Iteration   6: 530420.568 ops/s
Iteration   7: 527269.319 ops/s
Iteration   8: 510657.411 ops/s
Iteration   9: 485715.371 ops/s
Iteration  10: 489876.591 ops/s
Iteration  11: 499724.297 ops/s
Iteration  12: 503871.548 ops/s
Iteration  13: 526431.962 ops/s
Iteration  14: 507055.455 ops/s
Iteration  15: 501140.624 ops/s
Iteration  16: 528836.931 ops/s
Iteration  17: 520864.491 ops/s
Iteration  18: 484828.403 ops/s
Iteration  19: 476358.057 ops/s
Iteration  20: 492514.204 ops/s
Iteration  21: 491103.418 ops/s
Iteration  22: 481989.562 ops/s
Iteration  23: 492227.397 ops/s
Iteration  24: 496142.572 ops/s
Iteration  25: 497724.630 ops/s
Iteration  26: 513969.240 ops/s
Iteration  27: 527780.210 ops/s
Iteration  28: 527274.248 ops/s
Iteration  29: 483684.590 ops/s
Iteration  30: 484298.242 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedBag":
  504947.454 ±(99.9%) 11727.307 ops/s [Average]
  (min, avg, max) = (476358.057, 504947.454, 530420.568), stdev = 17552.882
  CI (99.9%): [493220.148, 516674.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_toSortedBag  thrpt   30  504947.454 ± 11727.307  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 239766.915 ops/s
# Warmup Iteration   2: 530259.452 ops/s
# Warmup Iteration   3: 584797.070 ops/s
# Warmup Iteration   4: 598674.543 ops/s
# Warmup Iteration   5: 482618.450 ops/s
# Warmup Iteration   6: 596686.106 ops/s
# Warmup Iteration   7: 600964.916 ops/s
# Warmup Iteration   8: 603096.449 ops/s
# Warmup Iteration   9: 591088.284 ops/s
# Warmup Iteration  10: 589613.476 ops/s
# Warmup Iteration  11: 601476.614 ops/s
# Warmup Iteration  12: 588544.218 ops/s
# Warmup Iteration  13: 587056.457 ops/s
# Warmup Iteration  14: 598470.987 ops/s
# Warmup Iteration  15: 592167.637 ops/s
# Warmup Iteration  16: 590950.332 ops/s
# Warmup Iteration  17: 607937.613 ops/s
# Warmup Iteration  18: 591481.848 ops/s
# Warmup Iteration  19: 616480.492 ops/s
# Warmup Iteration  20: 624115.300 ops/s
# Warmup Iteration  21: 617535.202 ops/s
# Warmup Iteration  22: 592798.567 ops/s
# Warmup Iteration  23: 596122.795 ops/s
# Warmup Iteration  24: 613080.983 ops/s
# Warmup Iteration  25: 625838.302 ops/s
# Warmup Iteration  26: 627076.493 ops/s
# Warmup Iteration  27: 615728.264 ops/s
# Warmup Iteration  28: 595697.009 ops/s
# Warmup Iteration  29: 604026.256 ops/s
# Warmup Iteration  30: 597820.486 ops/s
Iteration   1: 588247.629 ops/s
Iteration   2: 594779.405 ops/s
Iteration   3: 585515.520 ops/s
Iteration   4: 585701.684 ops/s
Iteration   5: 601282.899 ops/s
Iteration   6: 598192.100 ops/s
Iteration   7: 599423.203 ops/s
Iteration   8: 591578.756 ops/s
Iteration   9: 631572.629 ops/s
Iteration  10: 639864.603 ops/s
Iteration  11: 608247.893 ops/s
Iteration  12: 582688.981 ops/s
Iteration  13: 584199.428 ops/s
Iteration  14: 597190.949 ops/s
Iteration  15: 584649.432 ops/s
Iteration  16: 632646.144 ops/s
Iteration  17: 639211.338 ops/s
Iteration  18: 593415.120 ops/s
Iteration  19: 585688.910 ops/s
Iteration  20: 594132.156 ops/s
Iteration  21: 600754.752 ops/s
Iteration  22: 596218.629 ops/s
Iteration  23: 580857.807 ops/s
Iteration  24: 598718.691 ops/s
Iteration  25: 590645.637 ops/s
Iteration  26: 590427.326 ops/s
Iteration  27: 598684.329 ops/s
Iteration  28: 593447.598 ops/s
Iteration  29: 597536.567 ops/s
Iteration  30: 596829.061 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedBagBy":
  598744.973 ±(99.9%) 10790.266 ops/s [Average]
  (min, avg, max) = (580857.807, 598744.973, 639864.603), stdev = 16150.364
  CI (99.9%): [587954.706, 609535.239] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  598744.973 ± 10790.266  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1148284.432 ops/s
# Warmup Iteration   2: 2538220.138 ops/s
# Warmup Iteration   3: 2647599.011 ops/s
# Warmup Iteration   4: 2295939.065 ops/s
# Warmup Iteration   5: 2469377.338 ops/s
# Warmup Iteration   6: 2645844.059 ops/s
# Warmup Iteration   7: 2658774.288 ops/s
# Warmup Iteration   8: 2630001.855 ops/s
# Warmup Iteration   9: 2615490.263 ops/s
# Warmup Iteration  10: 2604242.400 ops/s
# Warmup Iteration  11: 2787092.397 ops/s
# Warmup Iteration  12: 2645445.074 ops/s
# Warmup Iteration  13: 2627313.228 ops/s
# Warmup Iteration  14: 2686472.294 ops/s
# Warmup Iteration  15: 2844756.024 ops/s
# Warmup Iteration  16: 2662611.536 ops/s
# Warmup Iteration  17: 2875463.415 ops/s
# Warmup Iteration  18: 2718631.780 ops/s
# Warmup Iteration  19: 2862984.544 ops/s
# Warmup Iteration  20: 2702346.987 ops/s
# Warmup Iteration  21: 2790477.802 ops/s
# Warmup Iteration  22: 2765695.182 ops/s
# Warmup Iteration  23: 2776911.828 ops/s
# Warmup Iteration  24: 2723749.496 ops/s
# Warmup Iteration  25: 2661192.028 ops/s
# Warmup Iteration  26: 2782477.303 ops/s
# Warmup Iteration  27: 2626820.646 ops/s
# Warmup Iteration  28: 2634725.788 ops/s
# Warmup Iteration  29: 2748484.825 ops/s
# Warmup Iteration  30: 2730534.703 ops/s
Iteration   1: 2702917.665 ops/s
Iteration   2: 2859862.829 ops/s
Iteration   3: 2791510.459 ops/s
Iteration   4: 2782727.326 ops/s
Iteration   5: 2693388.157 ops/s
Iteration   6: 2676466.393 ops/s
Iteration   7: 2675964.174 ops/s
Iteration   8: 2775225.897 ops/s
Iteration   9: 2618479.707 ops/s
Iteration  10: 2656485.467 ops/s
Iteration  11: 2659671.239 ops/s
Iteration  12: 2687217.146 ops/s
Iteration  13: 2652880.451 ops/s
Iteration  14: 2816787.468 ops/s
Iteration  15: 2817216.844 ops/s
Iteration  16: 2627882.256 ops/s
Iteration  17: 2609573.135 ops/s
Iteration  18: 2720021.232 ops/s
Iteration  19: 2727522.002 ops/s
Iteration  20: 2828471.344 ops/s
Iteration  21: 2824190.224 ops/s
Iteration  22: 2754633.869 ops/s
Iteration  23: 2734733.432 ops/s
Iteration  24: 2720747.311 ops/s
Iteration  25: 2857358.988 ops/s
Iteration  26: 2692336.229 ops/s
Iteration  27: 2754344.525 ops/s
Iteration  28: 2707147.920 ops/s
Iteration  29: 2711017.622 ops/s
Iteration  30: 2607834.706 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedList":
  2724820.534 ±(99.9%) 49094.540 ops/s [Average]
  (min, avg, max) = (2607834.706, 2724820.534, 2859862.829), stdev = 73482.401
  CI (99.9%): [2675725.994, 2773915.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_toSortedList  thrpt   30  2724820.534 ± 49094.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1212198.352 ops/s
# Warmup Iteration   2: 2916617.838 ops/s
# Warmup Iteration   3: 2829470.496 ops/s
# Warmup Iteration   4: 2377708.746 ops/s
# Warmup Iteration   5: 2742476.049 ops/s
# Warmup Iteration   6: 2712835.819 ops/s
# Warmup Iteration   7: 2676793.281 ops/s
# Warmup Iteration   8: 2693755.732 ops/s
# Warmup Iteration   9: 2797435.002 ops/s
# Warmup Iteration  10: 2801653.130 ops/s
# Warmup Iteration  11: 2674586.812 ops/s
# Warmup Iteration  12: 2868591.686 ops/s
# Warmup Iteration  13: 2797435.811 ops/s
# Warmup Iteration  14: 2722008.086 ops/s
# Warmup Iteration  15: 2722925.058 ops/s
# Warmup Iteration  16: 2680031.637 ops/s
# Warmup Iteration  17: 2786584.022 ops/s
# Warmup Iteration  18: 2745215.085 ops/s
# Warmup Iteration  19: 2754502.954 ops/s
# Warmup Iteration  20: 2775704.203 ops/s
# Warmup Iteration  21: 2914792.067 ops/s
# Warmup Iteration  22: 2880137.943 ops/s
# Warmup Iteration  23: 2681738.552 ops/s
# Warmup Iteration  24: 2689432.877 ops/s
# Warmup Iteration  25: 2890776.532 ops/s
# Warmup Iteration  26: 2680097.988 ops/s
# Warmup Iteration  27: 2892859.465 ops/s
# Warmup Iteration  28: 2797075.073 ops/s
# Warmup Iteration  29: 2796775.543 ops/s
# Warmup Iteration  30: 2828232.800 ops/s
Iteration   1: 2779409.122 ops/s
Iteration   2: 2707947.137 ops/s
Iteration   3: 2678165.097 ops/s
Iteration   4: 2784356.121 ops/s
Iteration   5: 2664204.737 ops/s
Iteration   6: 2746147.902 ops/s
Iteration   7: 2772578.453 ops/s
Iteration   8: 2749639.847 ops/s
Iteration   9: 2741217.805 ops/s
Iteration  10: 2780750.413 ops/s
Iteration  11: 2733023.415 ops/s
Iteration  12: 2670527.730 ops/s
Iteration  13: 2675147.742 ops/s
Iteration  14: 2713119.484 ops/s
Iteration  15: 2782699.115 ops/s
Iteration  16: 2776458.644 ops/s
Iteration  17: 2745765.999 ops/s
Iteration  18: 2742539.312 ops/s
Iteration  19: 2804014.218 ops/s
Iteration  20: 2904335.713 ops/s
Iteration  21: 2891251.145 ops/s
Iteration  22: 2904575.632 ops/s
Iteration  23: 2915640.516 ops/s
Iteration  24: 2900516.771 ops/s
Iteration  25: 2877800.012 ops/s
Iteration  26: 2872020.726 ops/s
Iteration  27: 2900886.841 ops/s
Iteration  28: 2839580.656 ops/s
Iteration  29: 2910659.387 ops/s
Iteration  30: 2863321.584 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedListBy":
  2794276.709 ±(99.9%) 54900.984 ops/s [Average]
  (min, avg, max) = (2664204.737, 2794276.709, 2915640.516), stdev = 82173.214
  CI (99.9%): [2739375.726, 2849177.693] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_toSortedListBy  thrpt   30  2794276.709 ± 54900.984  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 261498.762 ops/s
# Warmup Iteration   2: 430402.956 ops/s
# Warmup Iteration   3: 498612.307 ops/s
# Warmup Iteration   4: 504924.757 ops/s
# Warmup Iteration   5: 505642.913 ops/s
# Warmup Iteration   6: 432517.197 ops/s
# Warmup Iteration   7: 484774.578 ops/s
# Warmup Iteration   8: 505192.091 ops/s
# Warmup Iteration   9: 506648.381 ops/s
# Warmup Iteration  10: 501709.081 ops/s
# Warmup Iteration  11: 499881.905 ops/s
# Warmup Iteration  12: 497708.291 ops/s
# Warmup Iteration  13: 497984.073 ops/s
# Warmup Iteration  14: 499400.596 ops/s
# Warmup Iteration  15: 506190.254 ops/s
# Warmup Iteration  16: 500678.411 ops/s
# Warmup Iteration  17: 504848.682 ops/s
# Warmup Iteration  18: 505419.653 ops/s
# Warmup Iteration  19: 501638.185 ops/s
# Warmup Iteration  20: 502709.997 ops/s
# Warmup Iteration  21: 505906.894 ops/s
# Warmup Iteration  22: 498572.978 ops/s
# Warmup Iteration  23: 498834.257 ops/s
# Warmup Iteration  24: 500284.911 ops/s
# Warmup Iteration  25: 496956.880 ops/s
# Warmup Iteration  26: 498388.704 ops/s
# Warmup Iteration  27: 498966.952 ops/s
# Warmup Iteration  28: 503640.756 ops/s
# Warmup Iteration  29: 505201.266 ops/s
# Warmup Iteration  30: 506429.654 ops/s
Iteration   1: 497354.031 ops/s
Iteration   2: 511278.440 ops/s
Iteration   3: 511758.798 ops/s
Iteration   4: 500557.638 ops/s
Iteration   5: 507296.866 ops/s
Iteration   6: 501407.777 ops/s
Iteration   7: 497299.241 ops/s
Iteration   8: 509652.916 ops/s
Iteration   9: 501188.124 ops/s
Iteration  10: 505210.281 ops/s
Iteration  11: 502286.742 ops/s
Iteration  12: 509336.981 ops/s
Iteration  13: 493451.087 ops/s
Iteration  14: 466802.279 ops/s
Iteration  15: 473222.324 ops/s
Iteration  16: 511950.704 ops/s
Iteration  17: 511268.079 ops/s
Iteration  18: 507124.979 ops/s
Iteration  19: 501628.967 ops/s
Iteration  20: 494916.301 ops/s
Iteration  21: 503539.547 ops/s
Iteration  22: 498687.981 ops/s
Iteration  23: 488129.167 ops/s
Iteration  24: 502631.146 ops/s
Iteration  25: 501605.174 ops/s
Iteration  26: 496804.991 ops/s
Iteration  27: 513136.405 ops/s
Iteration  28: 502311.435 ops/s
Iteration  29: 503830.341 ops/s
Iteration  30: 497724.640 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedMap":
  500779.779 ±(99.9%) 6924.266 ops/s [Average]
  (min, avg, max) = (466802.279, 500779.779, 513136.405), stdev = 10363.917
  CI (99.9%): [493855.513, 507704.046] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_toSortedMap  thrpt   30  500779.779 ± 6924.266  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 402489.126 ops/s
# Warmup Iteration   2: 873626.640 ops/s
# Warmup Iteration   3: 903188.260 ops/s
# Warmup Iteration   4: 855724.829 ops/s
# Warmup Iteration   5: 828618.715 ops/s
# Warmup Iteration   6: 922671.448 ops/s
# Warmup Iteration   7: 925602.451 ops/s
# Warmup Iteration   8: 905773.866 ops/s
# Warmup Iteration   9: 916597.158 ops/s
# Warmup Iteration  10: 889000.745 ops/s
# Warmup Iteration  11: 864807.898 ops/s
# Warmup Iteration  12: 849221.308 ops/s
# Warmup Iteration  13: 841604.627 ops/s
# Warmup Iteration  14: 869657.989 ops/s
# Warmup Iteration  15: 879377.850 ops/s
# Warmup Iteration  16: 909570.857 ops/s
# Warmup Iteration  17: 916927.594 ops/s
# Warmup Iteration  18: 915389.580 ops/s
# Warmup Iteration  19: 911613.611 ops/s
# Warmup Iteration  20: 902205.907 ops/s
# Warmup Iteration  21: 878856.487 ops/s
# Warmup Iteration  22: 848207.892 ops/s
# Warmup Iteration  23: 847709.871 ops/s
# Warmup Iteration  24: 852006.472 ops/s
# Warmup Iteration  25: 868364.486 ops/s
# Warmup Iteration  26: 892624.013 ops/s
# Warmup Iteration  27: 901113.213 ops/s
# Warmup Iteration  28: 882782.349 ops/s
# Warmup Iteration  29: 856584.411 ops/s
# Warmup Iteration  30: 870225.187 ops/s
Iteration   1: 842713.015 ops/s
Iteration   2: 851149.820 ops/s
Iteration   3: 859171.173 ops/s
Iteration   4: 862868.525 ops/s
Iteration   5: 863407.866 ops/s
Iteration   6: 841462.217 ops/s
Iteration   7: 860559.648 ops/s
Iteration   8: 854237.127 ops/s
Iteration   9: 869006.105 ops/s
Iteration  10: 852948.264 ops/s
Iteration  11: 845383.983 ops/s
Iteration  12: 848432.266 ops/s
Iteration  13: 854668.236 ops/s
Iteration  14: 862346.083 ops/s
Iteration  15: 861952.877 ops/s
Iteration  16: 864722.325 ops/s
Iteration  17: 865516.348 ops/s
Iteration  18: 860894.960 ops/s
Iteration  19: 866885.866 ops/s
Iteration  20: 847710.947 ops/s
Iteration  21: 852877.389 ops/s
Iteration  22: 877730.852 ops/s
Iteration  23: 858626.701 ops/s
Iteration  24: 852821.295 ops/s
Iteration  25: 862605.733 ops/s
Iteration  26: 841250.167 ops/s
Iteration  27: 848935.004 ops/s
Iteration  28: 854951.350 ops/s
Iteration  29: 857414.850 ops/s
Iteration  30: 856382.689 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedSet":
  856654.456 ±(99.9%) 5754.885 ops/s [Average]
  (min, avg, max) = (841250.167, 856654.456, 877730.852), stdev = 8613.641
  CI (99.9%): [850899.571, 862409.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_toSortedSet  thrpt   30  856654.456 ± 5754.885  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 538251.380 ops/s
# Warmup Iteration   2: 1392141.135 ops/s
# Warmup Iteration   3: 1393362.300 ops/s
# Warmup Iteration   4: 1129694.014 ops/s
# Warmup Iteration   5: 1385346.104 ops/s
# Warmup Iteration   6: 1360817.670 ops/s
# Warmup Iteration   7: 1385484.337 ops/s
# Warmup Iteration   8: 1383113.911 ops/s
# Warmup Iteration   9: 1406440.716 ops/s
# Warmup Iteration  10: 1388054.072 ops/s
# Warmup Iteration  11: 1398533.474 ops/s
# Warmup Iteration  12: 1398007.707 ops/s
# Warmup Iteration  13: 1391427.804 ops/s
# Warmup Iteration  14: 1402540.898 ops/s
# Warmup Iteration  15: 1430004.832 ops/s
# Warmup Iteration  16: 1365658.132 ops/s
# Warmup Iteration  17: 1400928.763 ops/s
# Warmup Iteration  18: 1370759.601 ops/s
# Warmup Iteration  19: 1386405.735 ops/s
# Warmup Iteration  20: 1378394.514 ops/s
# Warmup Iteration  21: 1363737.901 ops/s
# Warmup Iteration  22: 1374562.304 ops/s
# Warmup Iteration  23: 1377291.036 ops/s
# Warmup Iteration  24: 1389567.292 ops/s
# Warmup Iteration  25: 1387008.479 ops/s
# Warmup Iteration  26: 1362426.682 ops/s
# Warmup Iteration  27: 1365612.492 ops/s
# Warmup Iteration  28: 1376049.764 ops/s
# Warmup Iteration  29: 1375873.888 ops/s
# Warmup Iteration  30: 1387099.273 ops/s
Iteration   1: 1412035.237 ops/s
Iteration   2: 1389575.440 ops/s
Iteration   3: 1373802.721 ops/s
Iteration   4: 1383289.931 ops/s
Iteration   5: 1418286.780 ops/s
Iteration   6: 1406563.236 ops/s
Iteration   7: 1366750.038 ops/s
Iteration   8: 1430561.455 ops/s
Iteration   9: 1429834.191 ops/s
Iteration  10: 1412632.475 ops/s
Iteration  11: 1417400.210 ops/s
Iteration  12: 1355659.417 ops/s
Iteration  13: 1357668.439 ops/s
Iteration  14: 1380219.016 ops/s
Iteration  15: 1351829.981 ops/s
Iteration  16: 1416970.436 ops/s
Iteration  17: 1368206.733 ops/s
Iteration  18: 1360658.458 ops/s
Iteration  19: 1363065.876 ops/s
Iteration  20: 1355593.976 ops/s
Iteration  21: 1383103.568 ops/s
Iteration  22: 1376378.467 ops/s
Iteration  23: 1365530.520 ops/s
Iteration  24: 1380480.625 ops/s
Iteration  25: 1393058.905 ops/s
Iteration  26: 1361422.976 ops/s
Iteration  27: 1394806.091 ops/s
Iteration  28: 1419052.297 ops/s
Iteration  29: 1425587.023 ops/s
Iteration  30: 1409477.116 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_toSortedSetBy":
  1388650.054 ±(99.9%) 17037.945 ops/s [Average]
  (min, avg, max) = (1351829.981, 1388650.054, 1430561.455), stdev = 25501.597
  CI (99.9%): [1371612.109, 1405688.000] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1388650.054 ± 17037.945  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_updateValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_updateValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 222495.025 ops/s
# Warmup Iteration   2: 232859.461 ops/s
# Warmup Iteration   3: 333473.788 ops/s
# Warmup Iteration   4: 342605.310 ops/s
# Warmup Iteration   5: 345182.333 ops/s
# Warmup Iteration   6: 346477.316 ops/s
# Warmup Iteration   7: 347714.647 ops/s
# Warmup Iteration   8: 348738.753 ops/s
# Warmup Iteration   9: 357375.984 ops/s
# Warmup Iteration  10: 356806.058 ops/s
# Warmup Iteration  11: 295042.595 ops/s
# Warmup Iteration  12: 337217.630 ops/s
# Warmup Iteration  13: 377993.839 ops/s
# Warmup Iteration  14: 377593.507 ops/s
# Warmup Iteration  15: 364836.872 ops/s
# Warmup Iteration  16: 353308.495 ops/s
# Warmup Iteration  17: 348378.491 ops/s
# Warmup Iteration  18: 361538.642 ops/s
# Warmup Iteration  19: 360147.826 ops/s
# Warmup Iteration  20: 366685.981 ops/s
# Warmup Iteration  21: 376247.830 ops/s
# Warmup Iteration  22: 366064.929 ops/s
# Warmup Iteration  23: 366367.193 ops/s
# Warmup Iteration  24: 361443.266 ops/s
# Warmup Iteration  25: 370877.623 ops/s
# Warmup Iteration  26: 377421.149 ops/s
# Warmup Iteration  27: 377992.021 ops/s
# Warmup Iteration  28: 363026.649 ops/s
# Warmup Iteration  29: 344452.950 ops/s
# Warmup Iteration  30: 370492.072 ops/s
Iteration   1: 374071.423 ops/s
Iteration   2: 371033.525 ops/s
Iteration   3: 378158.432 ops/s
Iteration   4: 352914.579 ops/s
Iteration   5: 367702.709 ops/s
Iteration   6: 364252.079 ops/s
Iteration   7: 376999.053 ops/s
Iteration   8: 363644.657 ops/s
Iteration   9: 373255.114 ops/s
Iteration  10: 378611.579 ops/s
Iteration  11: 355101.286 ops/s
Iteration  12: 361441.544 ops/s
Iteration  13: 354145.907 ops/s
Iteration  14: 360552.363 ops/s
Iteration  15: 355796.799 ops/s
Iteration  16: 354095.536 ops/s
Iteration  17: 362639.621 ops/s
Iteration  18: 378358.604 ops/s
Iteration  19: 367681.645 ops/s
Iteration  20: 371215.782 ops/s
Iteration  21: 378611.465 ops/s
Iteration  22: 372799.093 ops/s
Iteration  23: 374395.449 ops/s
Iteration  24: 376592.067 ops/s
Iteration  25: 378148.312 ops/s
Iteration  26: 377023.240 ops/s
Iteration  27: 351309.543 ops/s
Iteration  28: 363303.823 ops/s
Iteration  29: 376954.109 ops/s
Iteration  30: 374458.066 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_updateValue":
  368175.580 ±(99.9%) 6119.597 ops/s [Average]
  (min, avg, max) = (351309.543, 368175.580, 378611.579), stdev = 9159.525
  CI (99.9%): [362055.983, 374295.177] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_updateValue  thrpt   30  368175.580 ± 6119.597  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_updateValueWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_updateValueWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 161404.475 ops/s
# Warmup Iteration   2: 180116.216 ops/s
# Warmup Iteration   3: 233799.524 ops/s
# Warmup Iteration   4: 248722.635 ops/s
# Warmup Iteration   5: 247784.217 ops/s
# Warmup Iteration   6: 248138.053 ops/s
# Warmup Iteration   7: 247840.611 ops/s
# Warmup Iteration   8: 246634.411 ops/s
# Warmup Iteration   9: 245571.985 ops/s
# Warmup Iteration  10: 237931.252 ops/s
# Warmup Iteration  11: 235448.204 ops/s
# Warmup Iteration  12: 230474.071 ops/s
# Warmup Iteration  13: 201258.309 ops/s
# Warmup Iteration  14: 240100.386 ops/s
# Warmup Iteration  15: 238070.363 ops/s
# Warmup Iteration  16: 247184.116 ops/s
# Warmup Iteration  17: 239428.795 ops/s
# Warmup Iteration  18: 235781.261 ops/s
# Warmup Iteration  19: 237053.482 ops/s
# Warmup Iteration  20: 235840.484 ops/s
# Warmup Iteration  21: 239457.494 ops/s
# Warmup Iteration  22: 238011.845 ops/s
# Warmup Iteration  23: 238002.126 ops/s
# Warmup Iteration  24: 234404.756 ops/s
# Warmup Iteration  25: 247337.520 ops/s
# Warmup Iteration  26: 238186.825 ops/s
# Warmup Iteration  27: 236882.703 ops/s
# Warmup Iteration  28: 234402.955 ops/s
# Warmup Iteration  29: 235801.154 ops/s
# Warmup Iteration  30: 238752.593 ops/s
Iteration   1: 239551.987 ops/s
Iteration   2: 247255.799 ops/s
Iteration   3: 255821.028 ops/s
Iteration   4: 246785.826 ops/s
Iteration   5: 248764.484 ops/s
Iteration   6: 259724.672 ops/s
Iteration   7: 258146.984 ops/s
Iteration   8: 242909.190 ops/s
Iteration   9: 244779.857 ops/s
Iteration  10: 237735.216 ops/s
Iteration  11: 260906.727 ops/s
Iteration  12: 260508.019 ops/s
Iteration  13: 241494.492 ops/s
Iteration  14: 239645.660 ops/s
Iteration  15: 249225.407 ops/s
Iteration  16: 247253.248 ops/s
Iteration  17: 246954.269 ops/s
Iteration  18: 241272.510 ops/s
Iteration  19: 259687.859 ops/s
Iteration  20: 249369.665 ops/s
Iteration  21: 235423.794 ops/s
Iteration  22: 244419.845 ops/s
Iteration  23: 255228.834 ops/s
Iteration  24: 235957.900 ops/s
Iteration  25: 240189.629 ops/s
Iteration  26: 235881.689 ops/s
Iteration  27: 238303.558 ops/s
Iteration  28: 239496.111 ops/s
Iteration  29: 255082.580 ops/s
Iteration  30: 244404.711 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_updateValueWith":
  246739.385 ±(99.9%) 5403.800 ops/s [Average]
  (min, avg, max) = (235423.794, 246739.385, 260906.727), stdev = 8088.154
  CI (99.9%): [241335.585, 252143.185] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_updateValueWith  thrpt   30  246739.385 ± 5403.800  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_updateValueWith_collisions$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_updateValueWith_collisions

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 157412675.882 ops/s
# Warmup Iteration   2: 290568729.632 ops/s
# Warmup Iteration   3: 249600229.737 ops/s
# Warmup Iteration   4: 309266013.766 ops/s
# Warmup Iteration   5: 300242794.541 ops/s
# Warmup Iteration   6: 287274585.923 ops/s
# Warmup Iteration   7: 296816047.151 ops/s
# Warmup Iteration   8: 289151469.694 ops/s
# Warmup Iteration   9: 286126171.548 ops/s
# Warmup Iteration  10: 286046035.589 ops/s
# Warmup Iteration  11: 287569110.458 ops/s
# Warmup Iteration  12: 286107120.739 ops/s
# Warmup Iteration  13: 289166934.847 ops/s
# Warmup Iteration  14: 289904707.512 ops/s
# Warmup Iteration  15: 291171734.570 ops/s
# Warmup Iteration  16: 286765508.060 ops/s
# Warmup Iteration  17: 296347466.185 ops/s
# Warmup Iteration  18: 290263540.461 ops/s
# Warmup Iteration  19: 293170219.529 ops/s
# Warmup Iteration  20: 283926907.373 ops/s
# Warmup Iteration  21: 288480329.558 ops/s
# Warmup Iteration  22: 287319550.111 ops/s
# Warmup Iteration  23: 286562041.706 ops/s
# Warmup Iteration  24: 302936764.423 ops/s
# Warmup Iteration  25: 291099516.024 ops/s
# Warmup Iteration  26: 282684607.865 ops/s
# Warmup Iteration  27: 294037082.023 ops/s
# Warmup Iteration  28: 288463384.396 ops/s
# Warmup Iteration  29: 297197769.033 ops/s
# Warmup Iteration  30: 290135354.225 ops/s
Iteration   1: 291170053.757 ops/s
Iteration   2: 294107420.742 ops/s
Iteration   3: 283165874.130 ops/s
Iteration   4: 289584982.564 ops/s
Iteration   5: 286924987.892 ops/s
Iteration   6: 284713636.515 ops/s
Iteration   7: 292098811.180 ops/s
Iteration   8: 292375082.253 ops/s
Iteration   9: 282470208.925 ops/s
Iteration  10: 283941137.696 ops/s
Iteration  11: 294406634.322 ops/s
Iteration  12: 297678546.015 ops/s
Iteration  13: 282684639.304 ops/s
Iteration  14: 291917796.981 ops/s
Iteration  15: 287710397.194 ops/s
Iteration  16: 286295053.066 ops/s
Iteration  17: 293461837.761 ops/s
Iteration  18: 283515615.653 ops/s
Iteration  19: 286841101.222 ops/s
Iteration  20: 289845851.111 ops/s
Iteration  21: 299666558.279 ops/s
Iteration  22: 302536147.833 ops/s
Iteration  23: 289368242.961 ops/s
Iteration  24: 288012347.002 ops/s
Iteration  25: 291553472.745 ops/s
Iteration  26: 283798976.984 ops/s
Iteration  27: 291396550.176 ops/s
Iteration  28: 288436688.300 ops/s
Iteration  29: 299713994.624 ops/s
Iteration  30: 292574235.693 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_updateValueWith_collisions":
  290065562.763 ±(99.9%) 3564832.631 ops/s [Average]
  (min, avg, max) = (282470208.925, 290065562.763, 302536147.833), stdev = 5335674.066
  CI (99.9%): [286500730.132, 293630395.394] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt          Score         Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_updateValueWith_collisions  thrpt   30  290065562.763 ± 3564832.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_updateValue_collisions$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_updateValue_collisions

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150300724.947 ops/s
# Warmup Iteration   2: 283328079.854 ops/s
# Warmup Iteration   3: 238539766.888 ops/s
# Warmup Iteration   4: 289674862.045 ops/s
# Warmup Iteration   5: 283602138.950 ops/s
# Warmup Iteration   6: 291479930.785 ops/s
# Warmup Iteration   7: 291614547.818 ops/s
# Warmup Iteration   8: 291724330.046 ops/s
# Warmup Iteration   9: 290229741.528 ops/s
# Warmup Iteration  10: 293051239.715 ops/s
# Warmup Iteration  11: 289554812.875 ops/s
# Warmup Iteration  12: 287244259.736 ops/s
# Warmup Iteration  13: 292089966.056 ops/s
# Warmup Iteration  14: 294539788.575 ops/s
# Warmup Iteration  15: 292640332.738 ops/s
# Warmup Iteration  16: 295142484.353 ops/s
# Warmup Iteration  17: 286583313.218 ops/s
# Warmup Iteration  18: 288376684.305 ops/s
# Warmup Iteration  19: 296515700.879 ops/s
# Warmup Iteration  20: 290249659.511 ops/s
# Warmup Iteration  21: 290003262.567 ops/s
# Warmup Iteration  22: 291162679.096 ops/s
# Warmup Iteration  23: 290438482.509 ops/s
# Warmup Iteration  24: 289742842.387 ops/s
# Warmup Iteration  25: 289376396.094 ops/s
# Warmup Iteration  26: 289348449.636 ops/s
# Warmup Iteration  27: 291626797.128 ops/s
# Warmup Iteration  28: 285814410.422 ops/s
# Warmup Iteration  29: 293732972.068 ops/s
# Warmup Iteration  30: 294809825.551 ops/s
Iteration   1: 290260484.269 ops/s
Iteration   2: 289652915.265 ops/s
Iteration   3: 288272380.592 ops/s
Iteration   4: 296472497.624 ops/s
Iteration   5: 291148226.135 ops/s
Iteration   6: 288415943.874 ops/s
Iteration   7: 287179224.684 ops/s
Iteration   8: 286480419.113 ops/s
Iteration   9: 290713142.894 ops/s
Iteration  10: 287047050.003 ops/s
Iteration  11: 292515529.033 ops/s
Iteration  12: 302934241.523 ops/s
Iteration  13: 300251687.021 ops/s
Iteration  14: 296114673.496 ops/s
Iteration  15: 293673539.278 ops/s
Iteration  16: 289374946.134 ops/s
Iteration  17: 289462639.720 ops/s
Iteration  18: 280964399.815 ops/s
Iteration  19: 285914075.690 ops/s
Iteration  20: 292851674.296 ops/s
Iteration  21: 287364964.532 ops/s
Iteration  22: 288504908.561 ops/s
Iteration  23: 288803467.076 ops/s
Iteration  24: 289132367.037 ops/s
Iteration  25: 293639904.998 ops/s
Iteration  26: 288338014.918 ops/s
Iteration  27: 288028893.140 ops/s
Iteration  28: 292302735.617 ops/s
Iteration  29: 290831412.341 ops/s
Iteration  30: 288160145.090 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_updateValue_collisions":
  290493550.126 ±(99.9%) 2905753.015 ops/s [Average]
  (min, avg, max) = (280964399.815, 290493550.126, 302934241.523), stdev = 4349194.649
  CI (99.9%): [287587797.111, 293399303.141] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score         Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_updateValue_collisions  thrpt   30  290493550.126 ± 2905753.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_valuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_valuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1103968.751 ops/s
# Warmup Iteration   2: 2510532.270 ops/s
# Warmup Iteration   3: 2707962.672 ops/s
# Warmup Iteration   4: 2651420.777 ops/s
# Warmup Iteration   5: 2454417.642 ops/s
# Warmup Iteration   6: 2851581.428 ops/s
# Warmup Iteration   7: 2842087.975 ops/s
# Warmup Iteration   8: 2773523.991 ops/s
# Warmup Iteration   9: 2704170.163 ops/s
# Warmup Iteration  10: 2817950.715 ops/s
# Warmup Iteration  11: 2990821.966 ops/s
# Warmup Iteration  12: 2920683.022 ops/s
# Warmup Iteration  13: 2794033.163 ops/s
# Warmup Iteration  14: 2745118.665 ops/s
# Warmup Iteration  15: 2746812.216 ops/s
# Warmup Iteration  16: 2859140.134 ops/s
# Warmup Iteration  17: 2900590.822 ops/s
# Warmup Iteration  18: 2754870.317 ops/s
# Warmup Iteration  19: 2763176.192 ops/s
# Warmup Iteration  20: 2840611.060 ops/s
# Warmup Iteration  21: 2886435.345 ops/s
# Warmup Iteration  22: 2756590.214 ops/s
# Warmup Iteration  23: 2762942.137 ops/s
# Warmup Iteration  24: 2789805.860 ops/s
# Warmup Iteration  25: 2763419.688 ops/s
# Warmup Iteration  26: 2761475.802 ops/s
# Warmup Iteration  27: 2723751.208 ops/s
# Warmup Iteration  28: 2752072.645 ops/s
# Warmup Iteration  29: 2766190.097 ops/s
# Warmup Iteration  30: 2769805.055 ops/s
Iteration   1: 2790605.397 ops/s
Iteration   2: 2844385.086 ops/s
Iteration   3: 2728226.073 ops/s
Iteration   4: 2703821.997 ops/s
Iteration   5: 2831463.646 ops/s
Iteration   6: 2824029.567 ops/s
Iteration   7: 2835400.103 ops/s
Iteration   8: 2721007.780 ops/s
Iteration   9: 2848809.276 ops/s
Iteration  10: 2828803.690 ops/s
Iteration  11: 2878300.791 ops/s
Iteration  12: 2860214.285 ops/s
Iteration  13: 2831807.343 ops/s
Iteration  14: 2818690.397 ops/s
Iteration  15: 2691118.741 ops/s
Iteration  16: 2756368.252 ops/s
Iteration  17: 2771960.797 ops/s
Iteration  18: 2778372.613 ops/s
Iteration  19: 2832510.245 ops/s
Iteration  20: 2854691.350 ops/s
Iteration  21: 2924332.872 ops/s
Iteration  22: 2776359.754 ops/s
Iteration  23: 2826409.140 ops/s
Iteration  24: 2852597.536 ops/s
Iteration  25: 2778400.160 ops/s
Iteration  26: 2863545.811 ops/s
Iteration  27: 2876725.699 ops/s
Iteration  28: 2774446.960 ops/s
Iteration  29: 2825650.104 ops/s
Iteration  30: 2749887.870 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_valuesView":
  2809298.111 ±(99.9%) 37222.194 ops/s [Average]
  (min, avg, max) = (2691118.741, 2809298.111, 2924332.872), stdev = 55712.432
  CI (99.9%): [2772075.917, 2846520.305] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_valuesView  thrpt   30  2809298.111 ± 37222.194  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withAllKeyValueArguments$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withAllKeyValueArguments

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 579711.903 ops/s
# Warmup Iteration   2: 1262755.949 ops/s
# Warmup Iteration   3: 1527397.397 ops/s
# Warmup Iteration   4: 1557277.771 ops/s
# Warmup Iteration   5: 1303513.700 ops/s
# Warmup Iteration   6: 1579298.186 ops/s
# Warmup Iteration   7: 1646190.941 ops/s
# Warmup Iteration   8: 1628221.116 ops/s
# Warmup Iteration   9: 1595268.628 ops/s
# Warmup Iteration  10: 1558327.896 ops/s
# Warmup Iteration  11: 1562939.387 ops/s
# Warmup Iteration  12: 1594708.645 ops/s
# Warmup Iteration  13: 1607847.499 ops/s
# Warmup Iteration  14: 1571977.279 ops/s
# Warmup Iteration  15: 1613478.516 ops/s
# Warmup Iteration  16: 1592513.025 ops/s
# Warmup Iteration  17: 1588934.867 ops/s
# Warmup Iteration  18: 1634643.938 ops/s
# Warmup Iteration  19: 1651642.804 ops/s
# Warmup Iteration  20: 1618734.904 ops/s
# Warmup Iteration  21: 1704348.524 ops/s
# Warmup Iteration  22: 1647685.005 ops/s
# Warmup Iteration  23: 1590554.896 ops/s
# Warmup Iteration  24: 1626520.018 ops/s
# Warmup Iteration  25: 1544488.815 ops/s
# Warmup Iteration  26: 1656775.677 ops/s
# Warmup Iteration  27: 1637318.577 ops/s
# Warmup Iteration  28: 1591896.536 ops/s
# Warmup Iteration  29: 1599867.615 ops/s
# Warmup Iteration  30: 1593908.062 ops/s
Iteration   1: 1619834.809 ops/s
Iteration   2: 1540960.309 ops/s
Iteration   3: 1580057.411 ops/s
Iteration   4: 1634547.815 ops/s
Iteration   5: 1667214.260 ops/s
Iteration   6: 1639650.662 ops/s
Iteration   7: 1577252.692 ops/s
Iteration   8: 1626116.745 ops/s
Iteration   9: 1604999.856 ops/s
Iteration  10: 1635968.304 ops/s
Iteration  11: 1620064.845 ops/s
Iteration  12: 1618283.190 ops/s
Iteration  13: 1574764.937 ops/s
Iteration  14: 1611890.426 ops/s
Iteration  15: 1525117.446 ops/s
Iteration  16: 1535427.262 ops/s
Iteration  17: 1553797.603 ops/s
Iteration  18: 1615371.134 ops/s
Iteration  19: 1618630.369 ops/s
Iteration  20: 1608192.363 ops/s
Iteration  21: 1603895.471 ops/s
Iteration  22: 1627356.776 ops/s
Iteration  23: 1554049.967 ops/s
Iteration  24: 1566221.553 ops/s
Iteration  25: 1550104.511 ops/s
Iteration  26: 1641549.096 ops/s
Iteration  27: 1559411.340 ops/s
Iteration  28: 1562304.413 ops/s
Iteration  29: 1594536.551 ops/s
Iteration  30: 1541449.586 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withAllKeyValueArguments":
  1593634.057 ±(99.9%) 25334.353 ops/s [Average]
  (min, avg, max) = (1525117.446, 1593634.057, 1667214.260), stdev = 37919.269
  CI (99.9%): [1568299.704, 1618968.409] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withAllKeyValueArguments  thrpt   30  1593634.057 ± 25334.353  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withAllKeyValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withAllKeyValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 601003.307 ops/s
# Warmup Iteration   2: 1347895.347 ops/s
# Warmup Iteration   3: 1561064.715 ops/s
# Warmup Iteration   4: 1560072.064 ops/s
# Warmup Iteration   5: 1422137.690 ops/s
# Warmup Iteration   6: 1574088.592 ops/s
# Warmup Iteration   7: 1583764.706 ops/s
# Warmup Iteration   8: 1584022.545 ops/s
# Warmup Iteration   9: 1610352.996 ops/s
# Warmup Iteration  10: 1580116.276 ops/s
# Warmup Iteration  11: 1574056.415 ops/s
# Warmup Iteration  12: 1601418.207 ops/s
# Warmup Iteration  13: 1619296.919 ops/s
# Warmup Iteration  14: 1567824.096 ops/s
# Warmup Iteration  15: 1579561.580 ops/s
# Warmup Iteration  16: 1580631.052 ops/s
# Warmup Iteration  17: 1640855.917 ops/s
# Warmup Iteration  18: 1657047.390 ops/s
# Warmup Iteration  19: 1651435.476 ops/s
# Warmup Iteration  20: 1660636.482 ops/s
# Warmup Iteration  21: 1590804.350 ops/s
# Warmup Iteration  22: 1585815.966 ops/s
# Warmup Iteration  23: 1574079.766 ops/s
# Warmup Iteration  24: 1559336.721 ops/s
# Warmup Iteration  25: 1562402.736 ops/s
# Warmup Iteration  26: 1629642.251 ops/s
# Warmup Iteration  27: 1596505.089 ops/s
# Warmup Iteration  28: 1665250.328 ops/s
# Warmup Iteration  29: 1613140.610 ops/s
# Warmup Iteration  30: 1605295.816 ops/s
Iteration   1: 1639070.860 ops/s
Iteration   2: 1566514.190 ops/s
Iteration   3: 1597303.586 ops/s
Iteration   4: 1659897.903 ops/s
Iteration   5: 1574890.350 ops/s
Iteration   6: 1557522.851 ops/s
Iteration   7: 1554641.262 ops/s
Iteration   8: 1564431.532 ops/s
Iteration   9: 1585299.359 ops/s
Iteration  10: 1707325.146 ops/s
Iteration  11: 1657196.190 ops/s
Iteration  12: 1558521.505 ops/s
Iteration  13: 1564017.554 ops/s
Iteration  14: 1565721.412 ops/s
Iteration  15: 1557101.743 ops/s
Iteration  16: 1597531.992 ops/s
Iteration  17: 1546852.553 ops/s
Iteration  18: 1627118.036 ops/s
Iteration  19: 1556256.439 ops/s
Iteration  20: 1706355.870 ops/s
Iteration  21: 1620829.361 ops/s
Iteration  22: 1575564.722 ops/s
Iteration  23: 1594620.239 ops/s
Iteration  24: 1675381.705 ops/s
Iteration  25: 1650515.535 ops/s
Iteration  26: 1604158.190 ops/s
Iteration  27: 1574537.318 ops/s
Iteration  28: 1548149.311 ops/s
Iteration  29: 1556861.647 ops/s
Iteration  30: 1584141.614 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withAllKeyValues":
  1597610.999 ±(99.9%) 31488.560 ops/s [Average]
  (min, avg, max) = (1546852.553, 1597610.999, 1707325.146), stdev = 47130.598
  CI (99.9%): [1566122.439, 1629099.560] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withAllKeyValues  thrpt   30  1597610.999 ± 31488.560  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 432680.262 ops/s
# Warmup Iteration   2: 895443.396 ops/s
# Warmup Iteration   3: 1193978.404 ops/s
# Warmup Iteration   4: 1126867.384 ops/s
# Warmup Iteration   5: 1003762.588 ops/s
# Warmup Iteration   6: 1172014.306 ops/s
# Warmup Iteration   7: 1182846.494 ops/s
# Warmup Iteration   8: 1145339.408 ops/s
# Warmup Iteration   9: 1196022.154 ops/s
# Warmup Iteration  10: 1178955.867 ops/s
# Warmup Iteration  11: 1149002.587 ops/s
# Warmup Iteration  12: 1171529.702 ops/s
# Warmup Iteration  13: 1145610.563 ops/s
# Warmup Iteration  14: 1133813.751 ops/s
# Warmup Iteration  15: 1156330.861 ops/s
# Warmup Iteration  16: 1157745.208 ops/s
# Warmup Iteration  17: 1142364.006 ops/s
# Warmup Iteration  18: 1153478.321 ops/s
# Warmup Iteration  19: 1175731.887 ops/s
# Warmup Iteration  20: 1200368.327 ops/s
# Warmup Iteration  21: 1187969.073 ops/s
# Warmup Iteration  22: 1188849.696 ops/s
# Warmup Iteration  23: 1152490.426 ops/s
# Warmup Iteration  24: 1191507.961 ops/s
# Warmup Iteration  25: 1142554.206 ops/s
# Warmup Iteration  26: 1177542.776 ops/s
# Warmup Iteration  27: 1142377.293 ops/s
# Warmup Iteration  28: 1139686.884 ops/s
# Warmup Iteration  29: 1133458.961 ops/s
# Warmup Iteration  30: 1153048.976 ops/s
Iteration   1: 1152764.896 ops/s
Iteration   2: 1150989.128 ops/s
Iteration   3: 1159749.122 ops/s
Iteration   4: 1126768.748 ops/s
Iteration   5: 1125500.302 ops/s
Iteration   6: 1127594.280 ops/s
Iteration   7: 1149187.577 ops/s
Iteration   8: 1156707.790 ops/s
Iteration   9: 1144363.184 ops/s
Iteration  10: 1150585.555 ops/s
Iteration  11: 1160813.245 ops/s
Iteration  12: 1145130.772 ops/s
Iteration  13: 1177309.075 ops/s
Iteration  14: 1135820.162 ops/s
Iteration  15: 1205352.039 ops/s
Iteration  16: 1184278.874 ops/s
Iteration  17: 1148428.383 ops/s
Iteration  18: 1149225.612 ops/s
Iteration  19: 1137252.002 ops/s
Iteration  20: 1139913.076 ops/s
Iteration  21: 1137816.780 ops/s
Iteration  22: 1149122.347 ops/s
Iteration  23: 1167756.012 ops/s
Iteration  24: 1146421.784 ops/s
Iteration  25: 1158539.324 ops/s
Iteration  26: 1128850.829 ops/s
Iteration  27: 1138570.423 ops/s
Iteration  28: 1149684.235 ops/s
Iteration  29: 1150758.229 ops/s
Iteration  30: 1128835.032 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withKeyValue":
  1149469.627 ±(99.9%) 11760.333 ops/s [Average]
  (min, avg, max) = (1125500.302, 1149469.627, 1205352.039), stdev = 17602.314
  CI (99.9%): [1137709.294, 1161229.960] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withKeyValue  thrpt   30  1149469.627 ± 11760.333  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 568265.384 ops/s
# Warmup Iteration   2: 1118300.553 ops/s
# Warmup Iteration   3: 1413313.543 ops/s
# Warmup Iteration   4: 1439938.588 ops/s
# Warmup Iteration   5: 1184067.435 ops/s
# Warmup Iteration   6: 1430031.690 ops/s
# Warmup Iteration   7: 1412759.881 ops/s
# Warmup Iteration   8: 1444025.978 ops/s
# Warmup Iteration   9: 1409536.769 ops/s
# Warmup Iteration  10: 1446441.118 ops/s
# Warmup Iteration  11: 1425626.528 ops/s
# Warmup Iteration  12: 1426134.931 ops/s
# Warmup Iteration  13: 1457479.492 ops/s
# Warmup Iteration  14: 1480026.047 ops/s
# Warmup Iteration  15: 1421870.272 ops/s
# Warmup Iteration  16: 1405457.823 ops/s
# Warmup Iteration  17: 1408575.177 ops/s
# Warmup Iteration  18: 1411328.539 ops/s
# Warmup Iteration  19: 1425602.790 ops/s
# Warmup Iteration  20: 1446236.787 ops/s
# Warmup Iteration  21: 1391070.605 ops/s
# Warmup Iteration  22: 1403942.562 ops/s
# Warmup Iteration  23: 1422620.505 ops/s
# Warmup Iteration  24: 1411757.100 ops/s
# Warmup Iteration  25: 1426546.514 ops/s
# Warmup Iteration  26: 1509947.896 ops/s
# Warmup Iteration  27: 1509955.627 ops/s
# Warmup Iteration  28: 1398059.267 ops/s
# Warmup Iteration  29: 1419242.638 ops/s
# Warmup Iteration  30: 1405767.771 ops/s
Iteration   1: 1392515.650 ops/s
Iteration   2: 1418657.844 ops/s
Iteration   3: 1393223.825 ops/s
Iteration   4: 1407334.340 ops/s
Iteration   5: 1416480.451 ops/s
Iteration   6: 1398038.976 ops/s
Iteration   7: 1415797.833 ops/s
Iteration   8: 1455564.093 ops/s
Iteration   9: 1457286.780 ops/s
Iteration  10: 1419267.949 ops/s
Iteration  11: 1454830.922 ops/s
Iteration  12: 1433015.744 ops/s
Iteration  13: 1439294.129 ops/s
Iteration  14: 1472667.667 ops/s
Iteration  15: 1416652.864 ops/s
Iteration  16: 1383898.371 ops/s
Iteration  17: 1414258.598 ops/s
Iteration  18: 1483276.676 ops/s
Iteration  19: 1463870.770 ops/s
Iteration  20: 1476118.446 ops/s
Iteration  21: 1468369.795 ops/s
Iteration  22: 1494321.438 ops/s
Iteration  23: 1433183.445 ops/s
Iteration  24: 1476104.805 ops/s
Iteration  25: 1460949.805 ops/s
Iteration  26: 1452193.469 ops/s
Iteration  27: 1476272.151 ops/s
Iteration  28: 1451269.112 ops/s
Iteration  29: 1475951.082 ops/s
Iteration  30: 1479373.264 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMap":
  1442668.010 ±(99.9%) 21142.037 ops/s [Average]
  (min, avg, max) = (1383898.371, 1442668.010, 1494321.438), stdev = 31644.408
  CI (99.9%): [1421525.973, 1463810.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withMap  thrpt   30  1442668.010 ± 21142.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 642188.271 ops/s
# Warmup Iteration   2: 1627896.068 ops/s
# Warmup Iteration   3: 1968472.627 ops/s
# Warmup Iteration   4: 1585008.910 ops/s
# Warmup Iteration   5: 1929579.438 ops/s
# Warmup Iteration   6: 1918589.503 ops/s
# Warmup Iteration   7: 1915948.827 ops/s
# Warmup Iteration   8: 1924761.891 ops/s
# Warmup Iteration   9: 1927318.864 ops/s
# Warmup Iteration  10: 1875203.507 ops/s
# Warmup Iteration  11: 1889009.001 ops/s
# Warmup Iteration  12: 1869664.921 ops/s
# Warmup Iteration  13: 1875045.813 ops/s
# Warmup Iteration  14: 1894899.084 ops/s
# Warmup Iteration  15: 1876775.635 ops/s
# Warmup Iteration  16: 1879181.114 ops/s
# Warmup Iteration  17: 1954067.915 ops/s
# Warmup Iteration  18: 1907438.820 ops/s
# Warmup Iteration  19: 2029137.653 ops/s
# Warmup Iteration  20: 2061563.497 ops/s
# Warmup Iteration  21: 2015643.578 ops/s
# Warmup Iteration  22: 1979808.846 ops/s
# Warmup Iteration  23: 1980624.240 ops/s
# Warmup Iteration  24: 2045786.476 ops/s
# Warmup Iteration  25: 1916842.300 ops/s
# Warmup Iteration  26: 2011893.584 ops/s
# Warmup Iteration  27: 1969973.410 ops/s
# Warmup Iteration  28: 1956261.238 ops/s
# Warmup Iteration  29: 2061960.129 ops/s
# Warmup Iteration  30: 1958360.581 ops/s
Iteration   1: 1969155.619 ops/s
Iteration   2: 2013972.570 ops/s
Iteration   3: 1957482.646 ops/s
Iteration   4: 1997139.124 ops/s
Iteration   5: 1991761.911 ops/s
Iteration   6: 2011512.262 ops/s
Iteration   7: 1883768.551 ops/s
Iteration   8: 1952828.146 ops/s
Iteration   9: 1905628.143 ops/s
Iteration  10: 1963156.999 ops/s
Iteration  11: 1980444.167 ops/s
Iteration  12: 2055019.933 ops/s
Iteration  13: 1924776.376 ops/s
Iteration  14: 1899446.550 ops/s
Iteration  15: 2063313.692 ops/s
Iteration  16: 1945303.035 ops/s
Iteration  17: 1884514.652 ops/s
Iteration  18: 2025646.325 ops/s
Iteration  19: 1884968.559 ops/s
Iteration  20: 1870685.857 ops/s
Iteration  21: 1939641.640 ops/s
Iteration  22: 2055366.956 ops/s
Iteration  23: 1867597.254 ops/s
Iteration  24: 1895878.973 ops/s
Iteration  25: 1895044.843 ops/s
Iteration  26: 1885066.797 ops/s
Iteration  27: 1908708.950 ops/s
Iteration  28: 1915053.045 ops/s
Iteration  29: 1913548.311 ops/s
Iteration  30: 1887809.822 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapEmpty":
  1944808.057 ±(99.9%) 39782.562 ops/s [Average]
  (min, avg, max) = (1867597.254, 1944808.057, 2063313.692), stdev = 59544.671
  CI (99.9%): [1905025.495, 1984590.619] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withMapEmpty  thrpt   30  1944808.057 ± 39782.562  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 754297.400 ops/s
# Warmup Iteration   2: 1972159.863 ops/s
# Warmup Iteration   3: 1904131.717 ops/s
# Warmup Iteration   4: 2296335.609 ops/s
# Warmup Iteration   5: 2354700.792 ops/s
# Warmup Iteration   6: 2373115.320 ops/s
# Warmup Iteration   7: 2307757.934 ops/s
# Warmup Iteration   8: 2288005.470 ops/s
# Warmup Iteration   9: 2257720.927 ops/s
# Warmup Iteration  10: 2354244.767 ops/s
# Warmup Iteration  11: 2322986.465 ops/s
# Warmup Iteration  12: 2265545.161 ops/s
# Warmup Iteration  13: 2265183.900 ops/s
# Warmup Iteration  14: 2407388.532 ops/s
# Warmup Iteration  15: 2384236.118 ops/s
# Warmup Iteration  16: 2293431.843 ops/s
# Warmup Iteration  17: 2316687.073 ops/s
# Warmup Iteration  18: 2332135.198 ops/s
# Warmup Iteration  19: 2302326.488 ops/s
# Warmup Iteration  20: 2241846.458 ops/s
# Warmup Iteration  21: 2282241.654 ops/s
# Warmup Iteration  22: 2359885.037 ops/s
# Warmup Iteration  23: 2290357.104 ops/s
# Warmup Iteration  24: 2400735.090 ops/s
# Warmup Iteration  25: 2383690.234 ops/s
# Warmup Iteration  26: 2298116.316 ops/s
# Warmup Iteration  27: 2308306.247 ops/s
# Warmup Iteration  28: 2289097.007 ops/s
# Warmup Iteration  29: 2375896.696 ops/s
# Warmup Iteration  30: 2318852.423 ops/s
Iteration   1: 2249946.510 ops/s
Iteration   2: 2289087.934 ops/s
Iteration   3: 2276026.284 ops/s
Iteration   4: 2442520.724 ops/s
Iteration   5: 2301558.572 ops/s
Iteration   6: 2288475.833 ops/s
Iteration   7: 2254268.973 ops/s
Iteration   8: 2247305.882 ops/s
Iteration   9: 2451739.283 ops/s
Iteration  10: 2281192.441 ops/s
Iteration  11: 2283369.020 ops/s
Iteration  12: 2282112.081 ops/s
Iteration  13: 2296654.276 ops/s
Iteration  14: 2278148.520 ops/s
Iteration  15: 2254216.954 ops/s
Iteration  16: 2248913.291 ops/s
Iteration  17: 2304165.957 ops/s
Iteration  18: 2351636.313 ops/s
Iteration  19: 2287582.590 ops/s
Iteration  20: 2317564.265 ops/s
Iteration  21: 2247121.406 ops/s
Iteration  22: 2340092.629 ops/s
Iteration  23: 2336438.769 ops/s
Iteration  24: 2350640.701 ops/s
Iteration  25: 2275327.685 ops/s
Iteration  26: 2284957.820 ops/s
Iteration  27: 2354656.064 ops/s
Iteration  28: 2284521.768 ops/s
Iteration  29: 2242524.686 ops/s
Iteration  30: 2262737.493 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty":
  2298850.157 ±(99.9%) 34614.162 ops/s [Average]
  (min, avg, max) = (2242524.686, 2298850.157, 2451739.283), stdev = 51808.852
  CI (99.9%): [2264235.996, 2333464.319] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty  thrpt   30  2298850.157 ± 34614.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 583920.775 ops/s
# Warmup Iteration   2: 1153896.379 ops/s
# Warmup Iteration   3: 1432882.325 ops/s
# Warmup Iteration   4: 1435700.889 ops/s
# Warmup Iteration   5: 1169801.241 ops/s
# Warmup Iteration   6: 1438546.547 ops/s
# Warmup Iteration   7: 1430198.251 ops/s
# Warmup Iteration   8: 1411513.556 ops/s
# Warmup Iteration   9: 1439085.553 ops/s
# Warmup Iteration  10: 1468322.518 ops/s
# Warmup Iteration  11: 1421033.641 ops/s
# Warmup Iteration  12: 1492075.295 ops/s
# Warmup Iteration  13: 1564646.319 ops/s
# Warmup Iteration  14: 1449224.871 ops/s
# Warmup Iteration  15: 1467901.339 ops/s
# Warmup Iteration  16: 1529294.542 ops/s
# Warmup Iteration  17: 1478852.766 ops/s
# Warmup Iteration  18: 1517172.858 ops/s
# Warmup Iteration  19: 1438123.149 ops/s
# Warmup Iteration  20: 1439484.270 ops/s
# Warmup Iteration  21: 1486976.976 ops/s
# Warmup Iteration  22: 1551145.611 ops/s
# Warmup Iteration  23: 1522877.190 ops/s
# Warmup Iteration  24: 1500593.354 ops/s
# Warmup Iteration  25: 1446520.678 ops/s
# Warmup Iteration  26: 1444924.435 ops/s
# Warmup Iteration  27: 1478842.935 ops/s
# Warmup Iteration  28: 1557540.662 ops/s
# Warmup Iteration  29: 1448615.880 ops/s
# Warmup Iteration  30: 1461215.037 ops/s
Iteration   1: 1550268.777 ops/s
Iteration   2: 1512098.772 ops/s
Iteration   3: 1479515.534 ops/s
Iteration   4: 1540545.119 ops/s
Iteration   5: 1441091.699 ops/s
Iteration   6: 1431930.985 ops/s
Iteration   7: 1408852.465 ops/s
Iteration   8: 1415415.685 ops/s
Iteration   9: 1437068.527 ops/s
Iteration  10: 1430688.141 ops/s
Iteration  11: 1445493.574 ops/s
Iteration  12: 1418893.747 ops/s
Iteration  13: 1444379.404 ops/s
Iteration  14: 1561310.455 ops/s
Iteration  15: 1449031.976 ops/s
Iteration  16: 1465112.916 ops/s
Iteration  17: 1480664.539 ops/s
Iteration  18: 1460451.816 ops/s
Iteration  19: 1448536.984 ops/s
Iteration  20: 1506728.316 ops/s
Iteration  21: 1542117.604 ops/s
Iteration  22: 1562800.478 ops/s
Iteration  23: 1473978.143 ops/s
Iteration  24: 1491853.471 ops/s
Iteration  25: 1494133.523 ops/s
Iteration  26: 1497800.330 ops/s
Iteration  27: 1493352.078 ops/s
Iteration  28: 1426486.314 ops/s
Iteration  29: 1411190.618 ops/s
Iteration  30: 1462822.972 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterable":
  1472820.499 ±(99.9%) 30634.891 ops/s [Average]
  (min, avg, max) = (1408852.465, 1472820.499, 1562800.478), stdev = 45852.866
  CI (99.9%): [1442185.608, 1503455.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withMapIterable  thrpt   30  1472820.499 ± 30634.891  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 647348.875 ops/s
# Warmup Iteration   2: 1635053.193 ops/s
# Warmup Iteration   3: 1974314.172 ops/s
# Warmup Iteration   4: 1621142.922 ops/s
# Warmup Iteration   5: 2047771.397 ops/s
# Warmup Iteration   6: 2029678.149 ops/s
# Warmup Iteration   7: 2069954.668 ops/s
# Warmup Iteration   8: 2162802.844 ops/s
# Warmup Iteration   9: 2073908.101 ops/s
# Warmup Iteration  10: 2041207.617 ops/s
# Warmup Iteration  11: 2021276.015 ops/s
# Warmup Iteration  12: 1942813.136 ops/s
# Warmup Iteration  13: 2093038.424 ops/s
# Warmup Iteration  14: 1995124.171 ops/s
# Warmup Iteration  15: 1983697.877 ops/s
# Warmup Iteration  16: 1979598.117 ops/s
# Warmup Iteration  17: 2015138.798 ops/s
# Warmup Iteration  18: 1999588.509 ops/s
# Warmup Iteration  19: 1961231.759 ops/s
# Warmup Iteration  20: 1986113.738 ops/s
# Warmup Iteration  21: 2004867.412 ops/s
# Warmup Iteration  22: 1986843.099 ops/s
# Warmup Iteration  23: 1999821.795 ops/s
# Warmup Iteration  24: 1981735.501 ops/s
# Warmup Iteration  25: 1986265.165 ops/s
# Warmup Iteration  26: 2070478.547 ops/s
# Warmup Iteration  27: 1968528.221 ops/s
# Warmup Iteration  28: 2019900.100 ops/s
# Warmup Iteration  29: 1941159.481 ops/s
# Warmup Iteration  30: 1994915.681 ops/s
Iteration   1: 2015033.588 ops/s
Iteration   2: 1977732.926 ops/s
Iteration   3: 1998454.812 ops/s
Iteration   4: 2055308.710 ops/s
Iteration   5: 1966505.120 ops/s
Iteration   6: 1998885.843 ops/s
Iteration   7: 1995566.503 ops/s
Iteration   8: 1971947.236 ops/s
Iteration   9: 1973414.579 ops/s
Iteration  10: 1994754.098 ops/s
Iteration  11: 1990721.196 ops/s
Iteration  12: 1942057.485 ops/s
Iteration  13: 1962253.012 ops/s
Iteration  14: 1943200.740 ops/s
Iteration  15: 2033937.742 ops/s
Iteration  16: 2075533.640 ops/s
Iteration  17: 2132155.948 ops/s
Iteration  18: 1981413.337 ops/s
Iteration  19: 2022114.561 ops/s
Iteration  20: 1983638.933 ops/s
Iteration  21: 1993543.017 ops/s
Iteration  22: 1956086.537 ops/s
Iteration  23: 1959162.792 ops/s
Iteration  24: 1975173.684 ops/s
Iteration  25: 1991036.793 ops/s
Iteration  26: 2041783.815 ops/s
Iteration  27: 2014332.875 ops/s
Iteration  28: 2036814.723 ops/s
Iteration  29: 2078149.707 ops/s
Iteration  30: 1978756.567 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableEmpty":
  2001315.684 ±(99.9%) 28860.642 ops/s [Average]
  (min, avg, max) = (1942057.485, 2001315.684, 2132155.948), stdev = 43197.253
  CI (99.9%): [1972455.042, 2030176.326] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableEmpty  thrpt   30  2001315.684 ± 28860.642  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 734879.927 ops/s
# Warmup Iteration   2: 1899707.688 ops/s
# Warmup Iteration   3: 1994150.295 ops/s
# Warmup Iteration   4: 2310219.486 ops/s
# Warmup Iteration   5: 2265079.692 ops/s
# Warmup Iteration   6: 2275666.854 ops/s
# Warmup Iteration   7: 2289591.978 ops/s
# Warmup Iteration   8: 2309448.499 ops/s
# Warmup Iteration   9: 2303993.393 ops/s
# Warmup Iteration  10: 2236250.590 ops/s
# Warmup Iteration  11: 2332154.448 ops/s
# Warmup Iteration  12: 2413896.483 ops/s
# Warmup Iteration  13: 2358463.204 ops/s
# Warmup Iteration  14: 2285971.151 ops/s
# Warmup Iteration  15: 2296339.910 ops/s
# Warmup Iteration  16: 2290013.392 ops/s
# Warmup Iteration  17: 2410811.870 ops/s
# Warmup Iteration  18: 2272448.231 ops/s
# Warmup Iteration  19: 2303268.649 ops/s
# Warmup Iteration  20: 2258917.726 ops/s
# Warmup Iteration  21: 2485631.416 ops/s
# Warmup Iteration  22: 2432040.308 ops/s
# Warmup Iteration  23: 2297319.072 ops/s
# Warmup Iteration  24: 2289336.371 ops/s
# Warmup Iteration  25: 2450224.574 ops/s
# Warmup Iteration  26: 2444524.325 ops/s
# Warmup Iteration  27: 2268166.535 ops/s
# Warmup Iteration  28: 2298404.455 ops/s
# Warmup Iteration  29: 2351463.802 ops/s
# Warmup Iteration  30: 2370238.523 ops/s
Iteration   1: 2482911.448 ops/s
Iteration   2: 2320278.341 ops/s
Iteration   3: 2273344.961 ops/s
Iteration   4: 2318646.401 ops/s
Iteration   5: 2274229.558 ops/s
Iteration   6: 2320571.233 ops/s
Iteration   7: 2262906.221 ops/s
Iteration   8: 2321434.234 ops/s
Iteration   9: 2254834.620 ops/s
Iteration  10: 2300003.654 ops/s
Iteration  11: 2302600.156 ops/s
Iteration  12: 2273164.142 ops/s
Iteration  13: 2409682.514 ops/s
Iteration  14: 2498901.095 ops/s
Iteration  15: 2285945.066 ops/s
Iteration  16: 2329422.103 ops/s
Iteration  17: 2336949.505 ops/s
Iteration  18: 2507084.484 ops/s
Iteration  19: 2377142.766 ops/s
Iteration  20: 2262903.618 ops/s
Iteration  21: 2262351.332 ops/s
Iteration  22: 2270377.601 ops/s
Iteration  23: 2328480.093 ops/s
Iteration  24: 2357084.698 ops/s
Iteration  25: 2319876.719 ops/s
Iteration  26: 2328392.328 ops/s
Iteration  27: 2300618.255 ops/s
Iteration  28: 2328931.974 ops/s
Iteration  29: 2315365.779 ops/s
Iteration  30: 2327132.013 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty":
  2328385.564 ±(99.9%) 44741.099 ops/s [Average]
  (min, avg, max) = (2254834.620, 2328385.564, 2507084.484), stdev = 66966.376
  CI (99.9%): [2283644.464, 2373126.663] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty  thrpt   30  2328385.564 ± 44741.099  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 42086.806 ops/s
# Warmup Iteration   2: 47304.096 ops/s
# Warmup Iteration   3: 48757.042 ops/s
# Warmup Iteration   4: 46429.139 ops/s
# Warmup Iteration   5: 45918.179 ops/s
# Warmup Iteration   6: 46364.320 ops/s
# Warmup Iteration   7: 46217.247 ops/s
# Warmup Iteration   8: 47126.972 ops/s
# Warmup Iteration   9: 47307.329 ops/s
# Warmup Iteration  10: 46257.466 ops/s
# Warmup Iteration  11: 46337.034 ops/s
# Warmup Iteration  12: 45771.204 ops/s
# Warmup Iteration  13: 46540.092 ops/s
# Warmup Iteration  14: 46601.997 ops/s
# Warmup Iteration  15: 46610.729 ops/s
# Warmup Iteration  16: 49086.368 ops/s
# Warmup Iteration  17: 44847.321 ops/s
# Warmup Iteration  18: 51022.778 ops/s
# Warmup Iteration  19: 49140.482 ops/s
# Warmup Iteration  20: 48300.530 ops/s
# Warmup Iteration  21: 48141.435 ops/s
# Warmup Iteration  22: 49230.243 ops/s
# Warmup Iteration  23: 49001.095 ops/s
# Warmup Iteration  24: 49005.903 ops/s
# Warmup Iteration  25: 48185.676 ops/s
# Warmup Iteration  26: 48230.056 ops/s
# Warmup Iteration  27: 48490.069 ops/s
# Warmup Iteration  28: 48449.691 ops/s
# Warmup Iteration  29: 48744.503 ops/s
# Warmup Iteration  30: 48697.718 ops/s
Iteration   1: 49736.245 ops/s
Iteration   2: 44804.364 ops/s
Iteration   3: 49171.882 ops/s
Iteration   4: 47563.791 ops/s
Iteration   5: 49095.391 ops/s
Iteration   6: 47780.067 ops/s
Iteration   7: 49477.733 ops/s
Iteration   8: 48761.791 ops/s
Iteration   9: 48928.675 ops/s
Iteration  10: 48980.442 ops/s
Iteration  11: 47991.064 ops/s
Iteration  12: 48951.477 ops/s
Iteration  13: 48426.576 ops/s
Iteration  14: 51213.766 ops/s
Iteration  15: 49972.716 ops/s
Iteration  16: 51368.618 ops/s
Iteration  17: 49098.639 ops/s
Iteration  18: 48687.139 ops/s
Iteration  19: 49100.403 ops/s
Iteration  20: 50043.268 ops/s
Iteration  21: 48805.893 ops/s
Iteration  22: 48241.538 ops/s
Iteration  23: 49178.292 ops/s
Iteration  24: 48546.359 ops/s
Iteration  25: 49171.908 ops/s
Iteration  26: 48934.142 ops/s
Iteration  27: 48505.089 ops/s
Iteration  28: 52847.024 ops/s
Iteration  29: 51314.452 ops/s
Iteration  30: 49090.241 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableNull":
  49126.299 ±(99.9%) 935.466 ops/s [Average]
  (min, avg, max) = (44804.364, 49126.299, 52847.024), stdev = 1400.162
  CI (99.9%): [48190.833, 50061.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt      Score     Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableNull  thrpt   30  49126.299 ± 935.466  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623973.480 ops/s
# Warmup Iteration   2: 1601488.317 ops/s
# Warmup Iteration   3: 1785715.701 ops/s
# Warmup Iteration   4: 1542584.168 ops/s
# Warmup Iteration   5: 1767783.764 ops/s
# Warmup Iteration   6: 1827001.773 ops/s
# Warmup Iteration   7: 1757511.174 ops/s
# Warmup Iteration   8: 1896729.559 ops/s
# Warmup Iteration   9: 1754985.965 ops/s
# Warmup Iteration  10: 1728766.658 ops/s
# Warmup Iteration  11: 1828073.925 ops/s
# Warmup Iteration  12: 1760950.699 ops/s
# Warmup Iteration  13: 1714484.811 ops/s
# Warmup Iteration  14: 1719471.107 ops/s
# Warmup Iteration  15: 1741594.217 ops/s
# Warmup Iteration  16: 1733635.798 ops/s
# Warmup Iteration  17: 1731909.274 ops/s
# Warmup Iteration  18: 1729039.003 ops/s
# Warmup Iteration  19: 1711056.585 ops/s
# Warmup Iteration  20: 1748566.960 ops/s
# Warmup Iteration  21: 1795870.969 ops/s
# Warmup Iteration  22: 1803111.598 ops/s
# Warmup Iteration  23: 1750176.422 ops/s
# Warmup Iteration  24: 1717393.436 ops/s
# Warmup Iteration  25: 1697362.816 ops/s
# Warmup Iteration  26: 1739443.149 ops/s
# Warmup Iteration  27: 1750430.415 ops/s
# Warmup Iteration  28: 1741130.800 ops/s
# Warmup Iteration  29: 1773529.715 ops/s
# Warmup Iteration  30: 1801241.489 ops/s
Iteration   1: 1743892.563 ops/s
Iteration   2: 1849010.677 ops/s
Iteration   3: 1814053.252 ops/s
Iteration   4: 1752749.583 ops/s
Iteration   5: 1802004.248 ops/s
Iteration   6: 1810041.658 ops/s
Iteration   7: 1798479.889 ops/s
Iteration   8: 1715261.126 ops/s
Iteration   9: 1704735.859 ops/s
Iteration  10: 1792214.981 ops/s
Iteration  11: 1797930.891 ops/s
Iteration  12: 1721032.206 ops/s
Iteration  13: 1717282.271 ops/s
Iteration  14: 1753981.386 ops/s
Iteration  15: 1716639.744 ops/s
Iteration  16: 1722582.779 ops/s
Iteration  17: 1818990.612 ops/s
Iteration  18: 1741455.417 ops/s
Iteration  19: 1718377.329 ops/s
Iteration  20: 1704801.700 ops/s
Iteration  21: 1731278.744 ops/s
Iteration  22: 1764814.970 ops/s
Iteration  23: 1739437.973 ops/s
Iteration  24: 1739433.054 ops/s
Iteration  25: 1723401.919 ops/s
Iteration  26: 1739349.114 ops/s
Iteration  27: 1721290.453 ops/s
Iteration  28: 1737977.206 ops/s
Iteration  29: 1707676.264 ops/s
Iteration  30: 1746881.076 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableTargetEmpty":
  1751568.631 ±(99.9%) 26586.320 ops/s [Average]
  (min, avg, max) = (1704735.859, 1751568.631, 1849010.677), stdev = 39793.155
  CI (99.9%): [1724982.311, 1778154.951] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withMapIterableTargetEmpty  thrpt   30  1751568.631 ± 26586.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61934.074 ops/s
# Warmup Iteration   2: 42150.667 ops/s
# Warmup Iteration   3: 44708.612 ops/s
# Warmup Iteration   4: 44620.395 ops/s
# Warmup Iteration   5: 44472.640 ops/s
# Warmup Iteration   6: 45380.732 ops/s
# Warmup Iteration   7: 44912.216 ops/s
# Warmup Iteration   8: 45535.420 ops/s
# Warmup Iteration   9: 44934.116 ops/s
# Warmup Iteration  10: 48124.356 ops/s
# Warmup Iteration  11: 44403.518 ops/s
# Warmup Iteration  12: 47028.004 ops/s
# Warmup Iteration  13: 45485.529 ops/s
# Warmup Iteration  14: 45802.463 ops/s
# Warmup Iteration  15: 44654.375 ops/s
# Warmup Iteration  16: 44871.818 ops/s
# Warmup Iteration  17: 45897.089 ops/s
# Warmup Iteration  18: 46519.042 ops/s
# Warmup Iteration  19: 46579.521 ops/s
# Warmup Iteration  20: 46028.525 ops/s
# Warmup Iteration  21: 46406.011 ops/s
# Warmup Iteration  22: 47334.690 ops/s
# Warmup Iteration  23: 47160.102 ops/s
# Warmup Iteration  24: 46384.546 ops/s
# Warmup Iteration  25: 46947.999 ops/s
# Warmup Iteration  26: 45687.183 ops/s
# Warmup Iteration  27: 46902.911 ops/s
# Warmup Iteration  28: 46488.702 ops/s
# Warmup Iteration  29: 46429.384 ops/s
# Warmup Iteration  30: 47997.498 ops/s
Iteration   1: 46669.904 ops/s
Iteration   2: 48399.778 ops/s
Iteration   3: 47677.952 ops/s
Iteration   4: 46391.558 ops/s
Iteration   5: 47618.691 ops/s
Iteration   6: 45782.658 ops/s
Iteration   7: 46366.077 ops/s
Iteration   8: 46904.864 ops/s
Iteration   9: 47005.747 ops/s
Iteration  10: 46458.664 ops/s
Iteration  11: 48189.332 ops/s
Iteration  12: 48825.558 ops/s
Iteration  13: 47055.975 ops/s
Iteration  14: 48411.765 ops/s
Iteration  15: 47456.015 ops/s
Iteration  16: 46357.835 ops/s
Iteration  17: 46090.864 ops/s
Iteration  18: 46204.705 ops/s
Iteration  19: 46446.151 ops/s
Iteration  20: 47936.206 ops/s
Iteration  21: 48900.667 ops/s
Iteration  22: 46255.005 ops/s
Iteration  23: 47091.664 ops/s
Iteration  24: 47435.229 ops/s
Iteration  25: 46937.639 ops/s
Iteration  26: 46464.374 ops/s
Iteration  27: 46101.510 ops/s
Iteration  28: 47472.718 ops/s
Iteration  29: 46414.897 ops/s
Iteration  30: 47387.311 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapNull":
  47090.377 ±(99.9%) 574.023 ops/s [Average]
  (min, avg, max) = (45782.658, 47090.377, 48900.667), stdev = 859.170
  CI (99.9%): [46516.354, 47664.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt      Score     Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withMapNull  thrpt   30  47090.377 ± 574.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 582418.713 ops/s
# Warmup Iteration   2: 1522325.493 ops/s
# Warmup Iteration   3: 1715919.495 ops/s
# Warmup Iteration   4: 1480083.544 ops/s
# Warmup Iteration   5: 1739613.262 ops/s
# Warmup Iteration   6: 1776770.517 ops/s
# Warmup Iteration   7: 1748174.790 ops/s
# Warmup Iteration   8: 1771508.497 ops/s
# Warmup Iteration   9: 1735061.468 ops/s
# Warmup Iteration  10: 1762692.373 ops/s
# Warmup Iteration  11: 1722929.115 ops/s
# Warmup Iteration  12: 1706460.222 ops/s
# Warmup Iteration  13: 1737535.672 ops/s
# Warmup Iteration  14: 1796144.424 ops/s
# Warmup Iteration  15: 1717872.975 ops/s
# Warmup Iteration  16: 1700043.894 ops/s
# Warmup Iteration  17: 1694795.875 ops/s
# Warmup Iteration  18: 1738584.400 ops/s
# Warmup Iteration  19: 1705214.431 ops/s
# Warmup Iteration  20: 1729655.978 ops/s
# Warmup Iteration  21: 1744888.088 ops/s
# Warmup Iteration  22: 1830355.235 ops/s
# Warmup Iteration  23: 1748373.073 ops/s
# Warmup Iteration  24: 1689471.889 ops/s
# Warmup Iteration  25: 1710633.375 ops/s
# Warmup Iteration  26: 1708695.863 ops/s
# Warmup Iteration  27: 1812765.382 ops/s
# Warmup Iteration  28: 1864728.140 ops/s
# Warmup Iteration  29: 1861554.293 ops/s
# Warmup Iteration  30: 1735025.681 ops/s
Iteration   1: 1779998.570 ops/s
Iteration   2: 1796518.534 ops/s
Iteration   3: 1789399.079 ops/s
Iteration   4: 1710530.543 ops/s
Iteration   5: 1811894.587 ops/s
Iteration   6: 1718979.898 ops/s
Iteration   7: 1706354.453 ops/s
Iteration   8: 1751563.340 ops/s
Iteration   9: 1699168.464 ops/s
Iteration  10: 1755633.586 ops/s
Iteration  11: 1820332.767 ops/s
Iteration  12: 1848761.764 ops/s
Iteration  13: 1798936.861 ops/s
Iteration  14: 1711910.247 ops/s
Iteration  15: 1730228.849 ops/s
Iteration  16: 1704695.869 ops/s
Iteration  17: 1732641.035 ops/s
Iteration  18: 1813315.187 ops/s
Iteration  19: 1786413.386 ops/s
Iteration  20: 1782274.930 ops/s
Iteration  21: 1761388.313 ops/s
Iteration  22: 1744061.715 ops/s
Iteration  23: 1714433.302 ops/s
Iteration  24: 1743551.941 ops/s
Iteration  25: 1752187.044 ops/s
Iteration  26: 1684781.832 ops/s
Iteration  27: 1699739.756 ops/s
Iteration  28: 1712344.428 ops/s
Iteration  29: 1693838.213 ops/s
Iteration  30: 1690087.284 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withMapTargetEmpty":
  1748198.859 ±(99.9%) 30257.122 ops/s [Average]
  (min, avg, max) = (1684781.832, 1748198.859, 1848761.764), stdev = 45287.440
  CI (99.9%): [1717941.737, 1778455.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withMapTargetEmpty  thrpt   30  1748198.859 ± 30257.122  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withoutAllKeys$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withoutAllKeys

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692587.174 ops/s
# Warmup Iteration   2: 1690822.615 ops/s
# Warmup Iteration   3: 2027656.412 ops/s
# Warmup Iteration   4: 1608900.433 ops/s
# Warmup Iteration   5: 1983669.391 ops/s
# Warmup Iteration   6: 2040070.204 ops/s
# Warmup Iteration   7: 2133128.252 ops/s
# Warmup Iteration   8: 2024368.242 ops/s
# Warmup Iteration   9: 2128186.671 ops/s
# Warmup Iteration  10: 2022435.859 ops/s
# Warmup Iteration  11: 2083965.674 ops/s
# Warmup Iteration  12: 1980661.189 ops/s
# Warmup Iteration  13: 2004013.530 ops/s
# Warmup Iteration  14: 2003494.907 ops/s
# Warmup Iteration  15: 2071407.139 ops/s
# Warmup Iteration  16: 2005654.742 ops/s
# Warmup Iteration  17: 2066748.555 ops/s
# Warmup Iteration  18: 2070075.302 ops/s
# Warmup Iteration  19: 1989786.986 ops/s
# Warmup Iteration  20: 2012606.210 ops/s
# Warmup Iteration  21: 2028074.558 ops/s
# Warmup Iteration  22: 2108378.915 ops/s
# Warmup Iteration  23: 2070941.335 ops/s
# Warmup Iteration  24: 2024943.008 ops/s
# Warmup Iteration  25: 1971719.827 ops/s
# Warmup Iteration  26: 2023628.510 ops/s
# Warmup Iteration  27: 1966923.139 ops/s
# Warmup Iteration  28: 2106322.356 ops/s
# Warmup Iteration  29: 2007563.211 ops/s
# Warmup Iteration  30: 2014659.477 ops/s
Iteration   1: 2051553.836 ops/s
Iteration   2: 1987793.146 ops/s
Iteration   3: 2075062.683 ops/s
Iteration   4: 2003446.559 ops/s
Iteration   5: 2010548.970 ops/s
Iteration   6: 2170502.336 ops/s
Iteration   7: 2180043.586 ops/s
Iteration   8: 2173856.365 ops/s
Iteration   9: 2078931.600 ops/s
Iteration  10: 1975635.466 ops/s
Iteration  11: 1974169.881 ops/s
Iteration  12: 2087916.274 ops/s
Iteration  13: 2047849.451 ops/s
Iteration  14: 2014799.871 ops/s
Iteration  15: 1984320.039 ops/s
Iteration  16: 1965313.807 ops/s
Iteration  17: 2148498.482 ops/s
Iteration  18: 1997140.313 ops/s
Iteration  19: 1989773.646 ops/s
Iteration  20: 1960041.570 ops/s
Iteration  21: 2024232.897 ops/s
Iteration  22: 2011366.829 ops/s
Iteration  23: 2079130.185 ops/s
Iteration  24: 2102017.455 ops/s
Iteration  25: 2014136.739 ops/s
Iteration  26: 1995197.637 ops/s
Iteration  27: 2004172.665 ops/s
Iteration  28: 1997339.763 ops/s
Iteration  29: 2005046.391 ops/s
Iteration  30: 2000169.647 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withoutAllKeys":
  2037000.270 ±(99.9%) 42942.447 ops/s [Average]
  (min, avg, max) = (1960041.570, 2037000.270, 2180043.586), stdev = 64274.238
  CI (99.9%): [1994057.823, 2079942.716] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withoutAllKeys  thrpt   30  2037000.270 ± 42942.447  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withoutKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withoutKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748548.034 ops/s
# Warmup Iteration   2: 1967420.874 ops/s
# Warmup Iteration   3: 2327981.310 ops/s
# Warmup Iteration   4: 1896597.884 ops/s
# Warmup Iteration   5: 2393106.157 ops/s
# Warmup Iteration   6: 2387525.180 ops/s
# Warmup Iteration   7: 2402879.277 ops/s
# Warmup Iteration   8: 2326875.465 ops/s
# Warmup Iteration   9: 2351773.055 ops/s
# Warmup Iteration  10: 2374894.368 ops/s
# Warmup Iteration  11: 2341262.948 ops/s
# Warmup Iteration  12: 2386959.224 ops/s
# Warmup Iteration  13: 2348430.221 ops/s
# Warmup Iteration  14: 2334784.683 ops/s
# Warmup Iteration  15: 2378818.643 ops/s
# Warmup Iteration  16: 2357489.248 ops/s
# Warmup Iteration  17: 2353978.402 ops/s
# Warmup Iteration  18: 2340751.296 ops/s
# Warmup Iteration  19: 2326414.828 ops/s
# Warmup Iteration  20: 2348991.398 ops/s
# Warmup Iteration  21: 2369477.623 ops/s
# Warmup Iteration  22: 2364724.362 ops/s
# Warmup Iteration  23: 2340304.183 ops/s
# Warmup Iteration  24: 2323684.944 ops/s
# Warmup Iteration  25: 2333644.850 ops/s
# Warmup Iteration  26: 2408981.467 ops/s
# Warmup Iteration  27: 2420457.837 ops/s
# Warmup Iteration  28: 2383039.700 ops/s
# Warmup Iteration  29: 2404691.987 ops/s
# Warmup Iteration  30: 2401899.663 ops/s
Iteration   1: 2416168.609 ops/s
Iteration   2: 2355760.809 ops/s
Iteration   3: 2325219.389 ops/s
Iteration   4: 2359533.585 ops/s
Iteration   5: 2377066.289 ops/s
Iteration   6: 2300458.082 ops/s
Iteration   7: 2455301.582 ops/s
Iteration   8: 2347191.992 ops/s
Iteration   9: 2354750.885 ops/s
Iteration  10: 2400511.460 ops/s
Iteration  11: 2410151.342 ops/s
Iteration  12: 2399010.208 ops/s
Iteration  13: 2398162.649 ops/s
Iteration  14: 2521633.675 ops/s
Iteration  15: 2570262.673 ops/s
Iteration  16: 2443583.771 ops/s
Iteration  17: 2378014.708 ops/s
Iteration  18: 2335193.659 ops/s
Iteration  19: 2456647.340 ops/s
Iteration  20: 2476415.629 ops/s
Iteration  21: 2363782.366 ops/s
Iteration  22: 2390649.308 ops/s
Iteration  23: 2553171.113 ops/s
Iteration  24: 2552857.274 ops/s
Iteration  25: 2482261.442 ops/s
Iteration  26: 2368237.299 ops/s
Iteration  27: 2335569.139 ops/s
Iteration  28: 2326849.480 ops/s
Iteration  29: 2347995.110 ops/s
Iteration  30: 2345323.638 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_withoutKey":
  2404924.483 ±(99.9%) 49279.218 ops/s [Average]
  (min, avg, max) = (2300458.082, 2404924.483, 2570262.673), stdev = 73758.820
  CI (99.9%): [2355645.265, 2454203.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_withoutKey  thrpt   30  2404924.483 ± 49279.218  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 198701.965 ops/s
# Warmup Iteration   2: 300988.748 ops/s
# Warmup Iteration   3: 396902.958 ops/s
# Warmup Iteration   4: 399249.114 ops/s
# Warmup Iteration   5: 393175.900 ops/s
# Warmup Iteration   6: 395573.910 ops/s
# Warmup Iteration   7: 319899.956 ops/s
# Warmup Iteration   8: 391025.598 ops/s
# Warmup Iteration   9: 399010.553 ops/s
# Warmup Iteration  10: 403440.850 ops/s
# Warmup Iteration  11: 390870.293 ops/s
# Warmup Iteration  12: 389920.338 ops/s
# Warmup Iteration  13: 393025.807 ops/s
# Warmup Iteration  14: 386483.061 ops/s
# Warmup Iteration  15: 390902.266 ops/s
# Warmup Iteration  16: 396620.285 ops/s
# Warmup Iteration  17: 383078.514 ops/s
# Warmup Iteration  18: 388999.378 ops/s
# Warmup Iteration  19: 386667.888 ops/s
# Warmup Iteration  20: 405524.397 ops/s
# Warmup Iteration  21: 405914.273 ops/s
# Warmup Iteration  22: 405365.508 ops/s
# Warmup Iteration  23: 387186.242 ops/s
# Warmup Iteration  24: 394423.726 ops/s
# Warmup Iteration  25: 403259.518 ops/s
# Warmup Iteration  26: 400962.698 ops/s
# Warmup Iteration  27: 391398.359 ops/s
# Warmup Iteration  28: 389484.273 ops/s
# Warmup Iteration  29: 395385.917 ops/s
# Warmup Iteration  30: 398724.152 ops/s
Iteration   1: 394348.135 ops/s
Iteration   2: 401296.298 ops/s
Iteration   3: 404496.908 ops/s
Iteration   4: 396088.928 ops/s
Iteration   5: 409113.804 ops/s
Iteration   6: 401702.626 ops/s
Iteration   7: 388035.848 ops/s
Iteration   8: 388723.306 ops/s
Iteration   9: 418721.038 ops/s
Iteration  10: 407862.172 ops/s
Iteration  11: 401801.772 ops/s
Iteration  12: 426984.203 ops/s
Iteration  13: 424296.389 ops/s
Iteration  14: 404320.449 ops/s
Iteration  15: 394764.257 ops/s
Iteration  16: 390131.859 ops/s
Iteration  17: 389997.211 ops/s
Iteration  18: 395251.390 ops/s
Iteration  19: 389042.317 ops/s
Iteration  20: 414867.245 ops/s
Iteration  21: 404153.182 ops/s
Iteration  22: 390235.308 ops/s
Iteration  23: 393121.474 ops/s
Iteration  24: 401561.416 ops/s
Iteration  25: 405185.789 ops/s
Iteration  26: 390208.514 ops/s
Iteration  27: 386340.638 ops/s
Iteration  28: 391602.919 ops/s
Iteration  29: 390214.021 ops/s
Iteration  30: 391629.390 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_zip":
  399536.627 ±(99.9%) 7306.363 ops/s [Average]
  (min, avg, max) = (386340.638, 399536.627, 426984.203), stdev = 10935.821
  CI (99.9%): [392230.264, 406842.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_zip  thrpt   30  399536.627 ± 7306.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 459700.573 ops/s
# Warmup Iteration   2: 806056.318 ops/s
# Warmup Iteration   3: 980149.511 ops/s
# Warmup Iteration   4: 938816.303 ops/s
# Warmup Iteration   5: 944937.729 ops/s
# Warmup Iteration   6: 822210.005 ops/s
# Warmup Iteration   7: 946520.299 ops/s
# Warmup Iteration   8: 951290.209 ops/s
# Warmup Iteration   9: 935011.875 ops/s
# Warmup Iteration  10: 947356.955 ops/s
# Warmup Iteration  11: 949704.905 ops/s
# Warmup Iteration  12: 946915.310 ops/s
# Warmup Iteration  13: 947797.536 ops/s
# Warmup Iteration  14: 934526.658 ops/s
# Warmup Iteration  15: 949023.505 ops/s
# Warmup Iteration  16: 953313.809 ops/s
# Warmup Iteration  17: 943298.176 ops/s
# Warmup Iteration  18: 977174.725 ops/s
# Warmup Iteration  19: 948564.626 ops/s
# Warmup Iteration  20: 959703.197 ops/s
# Warmup Iteration  21: 947833.574 ops/s
# Warmup Iteration  22: 959139.065 ops/s
# Warmup Iteration  23: 953052.743 ops/s
# Warmup Iteration  24: 968007.248 ops/s
# Warmup Iteration  25: 962741.156 ops/s
# Warmup Iteration  26: 978769.694 ops/s
# Warmup Iteration  27: 986204.688 ops/s
# Warmup Iteration  28: 959040.789 ops/s
# Warmup Iteration  29: 947403.556 ops/s
# Warmup Iteration  30: 952437.323 ops/s
Iteration   1: 954746.495 ops/s
Iteration   2: 985773.105 ops/s
Iteration   3: 942574.146 ops/s
Iteration   4: 933812.434 ops/s
Iteration   5: 956916.798 ops/s
Iteration   6: 960744.525 ops/s
Iteration   7: 945782.887 ops/s
Iteration   8: 943387.629 ops/s
Iteration   9: 955208.691 ops/s
Iteration  10: 971247.941 ops/s
Iteration  11: 943904.188 ops/s
Iteration  12: 955523.693 ops/s
Iteration  13: 943643.488 ops/s
Iteration  14: 943468.944 ops/s
Iteration  15: 953933.321 ops/s
Iteration  16: 952435.958 ops/s
Iteration  17: 967048.267 ops/s
Iteration  18: 968153.395 ops/s
Iteration  19: 951717.237 ops/s
Iteration  20: 950572.046 ops/s
Iteration  21: 983532.787 ops/s
Iteration  22: 981259.914 ops/s
Iteration  23: 979299.539 ops/s
Iteration  24: 1020094.022 ops/s
Iteration  25: 1013262.122 ops/s
Iteration  26: 978664.637 ops/s
Iteration  27: 948216.656 ops/s
Iteration  28: 939660.121 ops/s
Iteration  29: 941883.653 ops/s
Iteration  30: 947441.947 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.SynchronizedBiMapTest._Benchmark.benchmark_zipWithIndex":
  960463.686 ±(99.9%) 13988.784 ops/s [Average]
  (min, avg, max) = (933812.434, 960463.686, 1020094.022), stdev = 20937.755
  CI (99.9%): [946474.902, 974452.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
SynchronizedBiMapTest._Benchmark.benchmark_zipWithIndex  thrpt   30  960463.686 ± 13988.784  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 438090.617 ops/s
# Warmup Iteration   2: 612871.279 ops/s
# Warmup Iteration   3: 734315.087 ops/s
# Warmup Iteration   4: 759202.537 ops/s
# Warmup Iteration   5: 765236.762 ops/s
# Warmup Iteration   6: 768527.102 ops/s
# Warmup Iteration   7: 656349.181 ops/s
# Warmup Iteration   8: 735800.688 ops/s
# Warmup Iteration   9: 732795.952 ops/s
# Warmup Iteration  10: 752764.303 ops/s
# Warmup Iteration  11: 741167.100 ops/s
# Warmup Iteration  12: 749176.917 ops/s
# Warmup Iteration  13: 734619.244 ops/s
# Warmup Iteration  14: 764828.385 ops/s
# Warmup Iteration  15: 749133.501 ops/s
# Warmup Iteration  16: 736508.345 ops/s
# Warmup Iteration  17: 773843.540 ops/s
# Warmup Iteration  18: 776726.373 ops/s
# Warmup Iteration  19: 769662.441 ops/s
# Warmup Iteration  20: 771304.396 ops/s
# Warmup Iteration  21: 805385.967 ops/s
# Warmup Iteration  22: 770704.807 ops/s
# Warmup Iteration  23: 775506.260 ops/s
# Warmup Iteration  24: 797615.016 ops/s
# Warmup Iteration  25: 802644.972 ops/s
# Warmup Iteration  26: 793629.946 ops/s
# Warmup Iteration  27: 817429.964 ops/s
# Warmup Iteration  28: 807539.477 ops/s
# Warmup Iteration  29: 768166.048 ops/s
# Warmup Iteration  30: 780894.795 ops/s
Iteration   1: 767298.540 ops/s
Iteration   2: 811272.433 ops/s
Iteration   3: 752349.010 ops/s
Iteration   4: 776366.110 ops/s
Iteration   5: 774498.287 ops/s
Iteration   6: 770144.377 ops/s
Iteration   7: 787358.120 ops/s
Iteration   8: 770917.347 ops/s
Iteration   9: 763844.750 ops/s
Iteration  10: 759195.369 ops/s
Iteration  11: 776744.691 ops/s
Iteration  12: 771226.879 ops/s
Iteration  13: 781755.626 ops/s
Iteration  14: 802315.102 ops/s
Iteration  15: 776653.994 ops/s
Iteration  16: 776662.734 ops/s
Iteration  17: 761003.255 ops/s
Iteration  18: 779072.331 ops/s
Iteration  19: 781606.991 ops/s
Iteration  20: 815871.925 ops/s
Iteration  21: 809557.362 ops/s
Iteration  22: 813650.573 ops/s
Iteration  23: 802663.037 ops/s
Iteration  24: 795226.787 ops/s
Iteration  25: 794222.780 ops/s
Iteration  26: 825897.476 ops/s
Iteration  27: 769496.049 ops/s
Iteration  28: 789296.334 ops/s
Iteration  29: 772654.030 ops/s
Iteration  30: 770028.377 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_add":
  783295.022 ±(99.9%) 12543.358 ops/s [Average]
  (min, avg, max) = (752349.010, 783295.022, 825897.476), stdev = 18774.308
  CI (99.9%): [770751.665, 795838.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_add  thrpt   30  783295.022 ± 12543.358  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1427532.955 ops/s
# Warmup Iteration   2: 3564893.602 ops/s
# Warmup Iteration   3: 2943788.318 ops/s
# Warmup Iteration   4: 3530735.325 ops/s
# Warmup Iteration   5: 3518774.011 ops/s
# Warmup Iteration   6: 3534560.953 ops/s
# Warmup Iteration   7: 3560881.362 ops/s
# Warmup Iteration   8: 3501769.037 ops/s
# Warmup Iteration   9: 3559345.227 ops/s
# Warmup Iteration  10: 3474314.885 ops/s
# Warmup Iteration  11: 3481099.135 ops/s
# Warmup Iteration  12: 3515126.212 ops/s
# Warmup Iteration  13: 3456231.638 ops/s
# Warmup Iteration  14: 3516826.290 ops/s
# Warmup Iteration  15: 3523867.902 ops/s
# Warmup Iteration  16: 3441455.472 ops/s
# Warmup Iteration  17: 3454281.498 ops/s
# Warmup Iteration  18: 3647689.274 ops/s
# Warmup Iteration  19: 3577301.837 ops/s
# Warmup Iteration  20: 3522847.111 ops/s
# Warmup Iteration  21: 3519102.356 ops/s
# Warmup Iteration  22: 3553161.121 ops/s
# Warmup Iteration  23: 3509311.537 ops/s
# Warmup Iteration  24: 3557624.786 ops/s
# Warmup Iteration  25: 3675012.413 ops/s
# Warmup Iteration  26: 3554207.438 ops/s
# Warmup Iteration  27: 3600259.551 ops/s
# Warmup Iteration  28: 3485329.826 ops/s
# Warmup Iteration  29: 3530622.700 ops/s
# Warmup Iteration  30: 3491873.996 ops/s
Iteration   1: 3534444.060 ops/s
Iteration   2: 3539903.296 ops/s
Iteration   3: 3491626.729 ops/s
Iteration   4: 3455741.644 ops/s
Iteration   5: 3517983.864 ops/s
Iteration   6: 3475612.893 ops/s
Iteration   7: 3469633.773 ops/s
Iteration   8: 3439342.281 ops/s
Iteration   9: 3798078.104 ops/s
Iteration  10: 3784952.623 ops/s
Iteration  11: 3538262.110 ops/s
Iteration  12: 3530371.160 ops/s
Iteration  13: 3505950.644 ops/s
Iteration  14: 3627480.794 ops/s
Iteration  15: 3497473.541 ops/s
Iteration  16: 3485982.973 ops/s
Iteration  17: 3418912.108 ops/s
Iteration  18: 3607761.364 ops/s
Iteration  19: 3594061.585 ops/s
Iteration  20: 3657089.981 ops/s
Iteration  21: 3560649.083 ops/s
Iteration  22: 3672953.279 ops/s
Iteration  23: 3561256.395 ops/s
Iteration  24: 3591371.425 ops/s
Iteration  25: 3690939.409 ops/s
Iteration  26: 3524664.570 ops/s
Iteration  27: 3571380.601 ops/s
Iteration  28: 3567466.929 ops/s
Iteration  29: 3585428.052 ops/s
Iteration  30: 3572264.498 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_aggregateByMutating":
  3562301.326 ±(99.9%) 60709.249 ops/s [Average]
  (min, avg, max) = (3418912.108, 3562301.326, 3798078.104), stdev = 90866.752
  CI (99.9%): [3501592.077, 3623010.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  3562301.326 ± 60709.249  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1291827.475 ops/s
# Warmup Iteration   2: 3480857.171 ops/s
# Warmup Iteration   3: 3211211.705 ops/s
# Warmup Iteration   4: 2992094.586 ops/s
# Warmup Iteration   5: 3436361.834 ops/s
# Warmup Iteration   6: 3385596.295 ops/s
# Warmup Iteration   7: 3420204.442 ops/s
# Warmup Iteration   8: 3507639.101 ops/s
# Warmup Iteration   9: 3431773.104 ops/s
# Warmup Iteration  10: 3428221.462 ops/s
# Warmup Iteration  11: 3483858.336 ops/s
# Warmup Iteration  12: 3400784.652 ops/s
# Warmup Iteration  13: 3459681.474 ops/s
# Warmup Iteration  14: 3479529.953 ops/s
# Warmup Iteration  15: 3494368.920 ops/s
# Warmup Iteration  16: 3426781.434 ops/s
# Warmup Iteration  17: 3425646.043 ops/s
# Warmup Iteration  18: 3457981.626 ops/s
# Warmup Iteration  19: 3424648.732 ops/s
# Warmup Iteration  20: 3423443.211 ops/s
# Warmup Iteration  21: 3449719.808 ops/s
# Warmup Iteration  22: 3446911.829 ops/s
# Warmup Iteration  23: 3377510.463 ops/s
# Warmup Iteration  24: 3447524.912 ops/s
# Warmup Iteration  25: 3515846.667 ops/s
# Warmup Iteration  26: 3443957.336 ops/s
# Warmup Iteration  27: 3436926.749 ops/s
# Warmup Iteration  28: 3413530.016 ops/s
# Warmup Iteration  29: 3492393.414 ops/s
# Warmup Iteration  30: 3435560.800 ops/s
Iteration   1: 3394685.496 ops/s
Iteration   2: 3474412.837 ops/s
Iteration   3: 3508376.918 ops/s
Iteration   4: 3414272.912 ops/s
Iteration   5: 3401878.395 ops/s
Iteration   6: 3487708.987 ops/s
Iteration   7: 3469343.743 ops/s
Iteration   8: 3499983.002 ops/s
Iteration   9: 3407760.485 ops/s
Iteration  10: 3445427.650 ops/s
Iteration  11: 3463059.661 ops/s
Iteration  12: 3456683.669 ops/s
Iteration  13: 3369798.850 ops/s
Iteration  14: 3422242.677 ops/s
Iteration  15: 3378689.027 ops/s
Iteration  16: 3611151.815 ops/s
Iteration  17: 3437848.627 ops/s
Iteration  18: 3498963.507 ops/s
Iteration  19: 3402124.668 ops/s
Iteration  20: 3549230.742 ops/s
Iteration  21: 3464188.017 ops/s
Iteration  22: 3550002.198 ops/s
Iteration  23: 3404347.437 ops/s
Iteration  24: 3474085.298 ops/s
Iteration  25: 3371557.822 ops/s
Iteration  26: 3454873.699 ops/s
Iteration  27: 3474597.311 ops/s
Iteration  28: 3424059.872 ops/s
Iteration  29: 3533513.397 ops/s
Iteration  30: 3500534.942 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_aggregateByNonMutating":
  3458180.122 ±(99.9%) 38789.816 ops/s [Average]
  (min, avg, max) = (3369798.850, 3458180.122, 3611151.815), stdev = 58058.776
  CI (99.9%): [3419390.306, 3496969.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  3458180.122 ± 38789.816  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1438042.125 ops/s
# Warmup Iteration   2: 3834091.419 ops/s
# Warmup Iteration   3: 3841236.201 ops/s
# Warmup Iteration   4: 3239186.846 ops/s
# Warmup Iteration   5: 3909944.177 ops/s
# Warmup Iteration   6: 4007125.421 ops/s
# Warmup Iteration   7: 3888243.284 ops/s
# Warmup Iteration   8: 3900456.476 ops/s
# Warmup Iteration   9: 3921015.786 ops/s
# Warmup Iteration  10: 3908229.818 ops/s
# Warmup Iteration  11: 3923060.979 ops/s
# Warmup Iteration  12: 3905980.496 ops/s
# Warmup Iteration  13: 3900048.523 ops/s
# Warmup Iteration  14: 3894287.076 ops/s
# Warmup Iteration  15: 3971015.793 ops/s
# Warmup Iteration  16: 3804242.059 ops/s
# Warmup Iteration  17: 3854739.840 ops/s
# Warmup Iteration  18: 3816025.738 ops/s
# Warmup Iteration  19: 3792264.921 ops/s
# Warmup Iteration  20: 3813847.582 ops/s
# Warmup Iteration  21: 3839955.489 ops/s
# Warmup Iteration  22: 3818818.821 ops/s
# Warmup Iteration  23: 3912096.099 ops/s
# Warmup Iteration  24: 3774634.574 ops/s
# Warmup Iteration  25: 3875914.467 ops/s
# Warmup Iteration  26: 3808457.485 ops/s
# Warmup Iteration  27: 3829517.798 ops/s
# Warmup Iteration  28: 3863799.024 ops/s
# Warmup Iteration  29: 3808026.614 ops/s
# Warmup Iteration  30: 4002138.391 ops/s
Iteration   1: 4013175.543 ops/s
Iteration   2: 3939384.468 ops/s
Iteration   3: 3853004.076 ops/s
Iteration   4: 4068231.447 ops/s
Iteration   5: 4040633.291 ops/s
Iteration   6: 3829660.030 ops/s
Iteration   7: 3986156.301 ops/s
Iteration   8: 3920822.101 ops/s
Iteration   9: 3971169.158 ops/s
Iteration  10: 3992820.341 ops/s
Iteration  11: 3951322.374 ops/s
Iteration  12: 3843230.032 ops/s
Iteration  13: 3836036.066 ops/s
Iteration  14: 3807322.694 ops/s
Iteration  15: 3855716.222 ops/s
Iteration  16: 3795983.457 ops/s
Iteration  17: 3968619.053 ops/s
Iteration  18: 3871133.959 ops/s
Iteration  19: 4027306.598 ops/s
Iteration  20: 3866579.750 ops/s
Iteration  21: 3868351.709 ops/s
Iteration  22: 3886118.822 ops/s
Iteration  23: 3800681.129 ops/s
Iteration  24: 3787284.514 ops/s
Iteration  25: 3854641.815 ops/s
Iteration  26: 3819900.408 ops/s
Iteration  27: 3736485.669 ops/s
Iteration  28: 3806618.831 ops/s
Iteration  29: 3764927.321 ops/s
Iteration  30: 3848456.357 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_allSatisfy":
  3887059.118 ±(99.9%) 59355.603 ops/s [Average]
  (min, avg, max) = (3736485.669, 3887059.118, 4068231.447), stdev = 88840.679
  CI (99.9%): [3827703.515, 3946414.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_allSatisfy  thrpt   30  3887059.118 ± 59355.603  ops/s
----------------------------------------
