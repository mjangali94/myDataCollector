=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 94257.565 ops/s
# Warmup Iteration   2: 147022.215 ops/s
# Warmup Iteration   3: 177262.462 ops/s
# Warmup Iteration   4: 176583.176 ops/s
# Warmup Iteration   5: 177128.954 ops/s
# Warmup Iteration   6: 177767.380 ops/s
# Warmup Iteration   7: 147739.927 ops/s
# Warmup Iteration   8: 177320.146 ops/s
# Warmup Iteration   9: 177386.943 ops/s
# Warmup Iteration  10: 177591.329 ops/s
# Warmup Iteration  11: 177977.210 ops/s
# Warmup Iteration  12: 177394.355 ops/s
# Warmup Iteration  13: 177398.134 ops/s
# Warmup Iteration  14: 177286.968 ops/s
# Warmup Iteration  15: 177665.590 ops/s
# Warmup Iteration  16: 177506.052 ops/s
# Warmup Iteration  17: 177232.351 ops/s
# Warmup Iteration  18: 177329.159 ops/s
# Warmup Iteration  19: 177435.793 ops/s
# Warmup Iteration  20: 177684.525 ops/s
# Warmup Iteration  21: 177625.367 ops/s
# Warmup Iteration  22: 177447.201 ops/s
# Warmup Iteration  23: 177148.692 ops/s
# Warmup Iteration  24: 177302.733 ops/s
# Warmup Iteration  25: 177446.408 ops/s
# Warmup Iteration  26: 177681.179 ops/s
# Warmup Iteration  27: 177117.979 ops/s
# Warmup Iteration  28: 177656.066 ops/s
# Warmup Iteration  29: 177526.611 ops/s
# Warmup Iteration  30: 177533.301 ops/s
Iteration   1: 177656.533 ops/s
Iteration   2: 177596.893 ops/s
Iteration   3: 177337.825 ops/s
Iteration   4: 177566.716 ops/s
Iteration   5: 177535.709 ops/s
Iteration   6: 177447.714 ops/s
Iteration   7: 177836.573 ops/s
Iteration   8: 177496.948 ops/s
Iteration   9: 177933.744 ops/s
Iteration  10: 177231.964 ops/s
Iteration  11: 177215.631 ops/s
Iteration  12: 177152.669 ops/s
Iteration  13: 177816.215 ops/s
Iteration  14: 177082.350 ops/s
Iteration  15: 177306.212 ops/s
Iteration  16: 177994.398 ops/s
Iteration  17: 177267.414 ops/s
Iteration  18: 177671.683 ops/s
Iteration  19: 176902.754 ops/s
Iteration  20: 177565.229 ops/s
Iteration  21: 177155.040 ops/s
Iteration  22: 177369.995 ops/s
Iteration  23: 177463.982 ops/s
Iteration  24: 177622.552 ops/s
Iteration  25: 177377.838 ops/s
Iteration  26: 177463.680 ops/s
Iteration  27: 177484.408 ops/s
Iteration  28: 177583.680 ops/s
Iteration  29: 177160.775 ops/s
Iteration  30: 177493.895 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_countByEach":
  177459.701 ±(99.9%) 170.402 ops/s [Average]
  (min, avg, max) = (176902.754, 177459.701, 177994.398), stdev = 255.049
  CI (99.9%): [177289.299, 177630.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_countByEach  thrpt   30  177459.701 ± 170.402  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 520518.362 ops/s
# Warmup Iteration   2: 1019454.306 ops/s
# Warmup Iteration   3: 1121170.830 ops/s
# Warmup Iteration   4: 1132397.825 ops/s
# Warmup Iteration   5: 941513.187 ops/s
# Warmup Iteration   6: 1132291.231 ops/s
# Warmup Iteration   7: 1133691.000 ops/s
# Warmup Iteration   8: 1133114.926 ops/s
# Warmup Iteration   9: 1131174.094 ops/s
# Warmup Iteration  10: 1132467.477 ops/s
# Warmup Iteration  11: 1132916.688 ops/s
# Warmup Iteration  12: 1132144.584 ops/s
# Warmup Iteration  13: 1130576.364 ops/s
# Warmup Iteration  14: 1134270.280 ops/s
# Warmup Iteration  15: 1131404.950 ops/s
# Warmup Iteration  16: 1132986.259 ops/s
# Warmup Iteration  17: 1133538.389 ops/s
# Warmup Iteration  18: 1129940.353 ops/s
# Warmup Iteration  19: 1132243.197 ops/s
# Warmup Iteration  20: 1135573.828 ops/s
# Warmup Iteration  21: 1132996.649 ops/s
# Warmup Iteration  22: 1133053.453 ops/s
# Warmup Iteration  23: 1128994.262 ops/s
# Warmup Iteration  24: 1134573.019 ops/s
# Warmup Iteration  25: 1130125.381 ops/s
# Warmup Iteration  26: 1132963.753 ops/s
# Warmup Iteration  27: 1129014.030 ops/s
# Warmup Iteration  28: 1124697.220 ops/s
# Warmup Iteration  29: 1129438.452 ops/s
# Warmup Iteration  30: 1128534.758 ops/s
Iteration   1: 1131928.320 ops/s
Iteration   2: 1131090.964 ops/s
Iteration   3: 1133361.593 ops/s
Iteration   4: 1131757.087 ops/s
Iteration   5: 1130561.414 ops/s
Iteration   6: 1132246.622 ops/s
Iteration   7: 1126951.198 ops/s
Iteration   8: 1132172.332 ops/s
Iteration   9: 1131178.359 ops/s
Iteration  10: 1129566.615 ops/s
Iteration  11: 1126610.221 ops/s
Iteration  12: 1132285.579 ops/s
Iteration  13: 1130231.489 ops/s
Iteration  14: 1134154.099 ops/s
Iteration  15: 1131929.739 ops/s
Iteration  16: 1130367.705 ops/s
Iteration  17: 1131594.406 ops/s
Iteration  18: 1130506.057 ops/s
Iteration  19: 1130814.264 ops/s
Iteration  20: 1136056.551 ops/s
Iteration  21: 1133313.127 ops/s
Iteration  22: 1133205.564 ops/s
Iteration  23: 1133097.531 ops/s
Iteration  24: 1130769.953 ops/s
Iteration  25: 1133314.515 ops/s
Iteration  26: 1134125.883 ops/s
Iteration  27: 1130110.909 ops/s
Iteration  28: 1126220.625 ops/s
Iteration  29: 1132333.123 ops/s
Iteration  30: 1133018.935 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_countByWith":
  1131495.826 ±(99.9%) 1465.094 ops/s [Average]
  (min, avg, max) = (1126220.625, 1131495.826, 1136056.551), stdev = 2192.885
  CI (99.9%): [1130030.731, 1132960.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_countByWith  thrpt   30  1131495.826 ± 1465.094  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14066123.075 ops/s
# Warmup Iteration   2: 23219108.224 ops/s
# Warmup Iteration   3: 25514189.279 ops/s
# Warmup Iteration   4: 25581959.924 ops/s
# Warmup Iteration   5: 25675784.096 ops/s
# Warmup Iteration   6: 21590828.532 ops/s
# Warmup Iteration   7: 25780637.888 ops/s
# Warmup Iteration   8: 25768654.274 ops/s
# Warmup Iteration   9: 25673078.351 ops/s
# Warmup Iteration  10: 25566848.494 ops/s
# Warmup Iteration  11: 25765478.969 ops/s
# Warmup Iteration  12: 25783360.877 ops/s
# Warmup Iteration  13: 25750322.867 ops/s
# Warmup Iteration  14: 25671160.462 ops/s
# Warmup Iteration  15: 25718233.554 ops/s
# Warmup Iteration  16: 25700509.992 ops/s
# Warmup Iteration  17: 25732802.373 ops/s
# Warmup Iteration  18: 25741331.723 ops/s
# Warmup Iteration  19: 25705361.498 ops/s
# Warmup Iteration  20: 25601360.508 ops/s
# Warmup Iteration  21: 25704104.681 ops/s
# Warmup Iteration  22: 25727743.106 ops/s
# Warmup Iteration  23: 25645558.514 ops/s
# Warmup Iteration  24: 25756452.539 ops/s
# Warmup Iteration  25: 25715446.366 ops/s
# Warmup Iteration  26: 25666596.557 ops/s
# Warmup Iteration  27: 25800233.218 ops/s
# Warmup Iteration  28: 25610554.783 ops/s
# Warmup Iteration  29: 25679353.485 ops/s
# Warmup Iteration  30: 25729322.155 ops/s
Iteration   1: 25738290.237 ops/s
Iteration   2: 25699140.075 ops/s
Iteration   3: 25648767.818 ops/s
Iteration   4: 25855222.897 ops/s
Iteration   5: 25593658.765 ops/s
Iteration   6: 25582316.453 ops/s
Iteration   7: 25683499.601 ops/s
Iteration   8: 25850967.701 ops/s
Iteration   9: 25640727.605 ops/s
Iteration  10: 25606932.409 ops/s
Iteration  11: 25732749.995 ops/s
Iteration  12: 25812156.052 ops/s
Iteration  13: 25732083.030 ops/s
Iteration  14: 25510179.152 ops/s
Iteration  15: 25825791.674 ops/s
Iteration  16: 25608945.675 ops/s
Iteration  17: 25625477.121 ops/s
Iteration  18: 25535263.349 ops/s
Iteration  19: 25744846.846 ops/s
Iteration  20: 25809028.731 ops/s
Iteration  21: 25679750.987 ops/s
Iteration  22: 25801715.556 ops/s
Iteration  23: 25584312.862 ops/s
Iteration  24: 25676371.281 ops/s
Iteration  25: 25858214.364 ops/s
Iteration  26: 25735815.999 ops/s
Iteration  27: 25724124.182 ops/s
Iteration  28: 25729131.467 ops/s
Iteration  29: 25752009.572 ops/s
Iteration  30: 25602183.070 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_countWith":
  25699322.484 ±(99.9%) 65025.210 ops/s [Average]
  (min, avg, max) = (25510179.152, 25699322.484, 25858214.364), stdev = 97326.680
  CI (99.9%): [25634297.274, 25764347.694] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_countWith  thrpt   30  25699322.484 ± 65025.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11111551.730 ops/s
# Warmup Iteration   2: 22400762.104 ops/s
# Warmup Iteration   3: 22076487.356 ops/s
# Warmup Iteration   4: 18727470.430 ops/s
# Warmup Iteration   5: 22089006.578 ops/s
# Warmup Iteration   6: 22132778.931 ops/s
# Warmup Iteration   7: 22053357.170 ops/s
# Warmup Iteration   8: 22016145.543 ops/s
# Warmup Iteration   9: 22071565.014 ops/s
# Warmup Iteration  10: 22027496.040 ops/s
# Warmup Iteration  11: 22057669.348 ops/s
# Warmup Iteration  12: 22046065.043 ops/s
# Warmup Iteration  13: 22106291.531 ops/s
# Warmup Iteration  14: 22029908.592 ops/s
# Warmup Iteration  15: 22008242.892 ops/s
# Warmup Iteration  16: 22061749.496 ops/s
# Warmup Iteration  17: 22133267.196 ops/s
# Warmup Iteration  18: 22097709.541 ops/s
# Warmup Iteration  19: 22001952.110 ops/s
# Warmup Iteration  20: 22045173.823 ops/s
# Warmup Iteration  21: 22133644.636 ops/s
# Warmup Iteration  22: 22057707.684 ops/s
# Warmup Iteration  23: 22032156.731 ops/s
# Warmup Iteration  24: 22089974.298 ops/s
# Warmup Iteration  25: 22050271.479 ops/s
# Warmup Iteration  26: 22071555.220 ops/s
# Warmup Iteration  27: 22097731.553 ops/s
# Warmup Iteration  28: 22101049.964 ops/s
# Warmup Iteration  29: 22094355.007 ops/s
# Warmup Iteration  30: 22050202.603 ops/s
Iteration   1: 22021851.722 ops/s
Iteration   2: 21926684.485 ops/s
Iteration   3: 22109091.891 ops/s
Iteration   4: 22109323.371 ops/s
Iteration   5: 22007268.321 ops/s
Iteration   6: 22146789.324 ops/s
Iteration   7: 22111209.839 ops/s
Iteration   8: 22096185.065 ops/s
Iteration   9: 22138908.595 ops/s
Iteration  10: 22075204.709 ops/s
Iteration  11: 22084955.348 ops/s
Iteration  12: 22007339.904 ops/s
Iteration  13: 22069112.417 ops/s
Iteration  14: 22080322.081 ops/s
Iteration  15: 21976599.329 ops/s
Iteration  16: 22134568.445 ops/s
Iteration  17: 22056023.930 ops/s
Iteration  18: 22081936.825 ops/s
Iteration  19: 22054787.497 ops/s
Iteration  20: 21947151.271 ops/s
Iteration  21: 21928454.537 ops/s
Iteration  22: 22092536.008 ops/s
Iteration  23: 22141844.261 ops/s
Iteration  24: 22110235.959 ops/s
Iteration  25: 22161517.708 ops/s
Iteration  26: 22124910.232 ops/s
Iteration  27: 22079633.785 ops/s
Iteration  28: 22039013.565 ops/s
Iteration  29: 22095825.382 ops/s
Iteration  30: 22120081.754 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detect":
  22070978.919 ±(99.9%) 42734.731 ops/s [Average]
  (min, avg, max) = (21926684.485, 22070978.919, 22161517.708), stdev = 63963.339
  CI (99.9%): [22028244.187, 22113713.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_detect  thrpt   30  22070978.919 ± 42734.731  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11389443.819 ops/s
# Warmup Iteration   2: 23011497.447 ops/s
# Warmup Iteration   3: 23574640.873 ops/s
# Warmup Iteration   4: 19878073.633 ops/s
# Warmup Iteration   5: 23589737.442 ops/s
# Warmup Iteration   6: 23580241.850 ops/s
# Warmup Iteration   7: 23591571.259 ops/s
# Warmup Iteration   8: 23550580.317 ops/s
# Warmup Iteration   9: 23640145.529 ops/s
# Warmup Iteration  10: 23586781.006 ops/s
# Warmup Iteration  11: 23595726.888 ops/s
# Warmup Iteration  12: 23547475.628 ops/s
# Warmup Iteration  13: 23611689.533 ops/s
# Warmup Iteration  14: 23599452.906 ops/s
# Warmup Iteration  15: 23611181.355 ops/s
# Warmup Iteration  16: 23653610.803 ops/s
# Warmup Iteration  17: 23628202.602 ops/s
# Warmup Iteration  18: 23582804.113 ops/s
# Warmup Iteration  19: 23590606.620 ops/s
# Warmup Iteration  20: 23609823.344 ops/s
# Warmup Iteration  21: 23613022.073 ops/s
# Warmup Iteration  22: 23650378.719 ops/s
# Warmup Iteration  23: 23613695.372 ops/s
# Warmup Iteration  24: 23648286.578 ops/s
# Warmup Iteration  25: 23661574.927 ops/s
# Warmup Iteration  26: 23628074.573 ops/s
# Warmup Iteration  27: 23581555.381 ops/s
# Warmup Iteration  28: 23616778.131 ops/s
# Warmup Iteration  29: 23598072.376 ops/s
# Warmup Iteration  30: 23611219.999 ops/s
Iteration   1: 23621363.085 ops/s
Iteration   2: 23616563.533 ops/s
Iteration   3: 23605060.377 ops/s
Iteration   4: 23643912.219 ops/s
Iteration   5: 23594241.053 ops/s
Iteration   6: 23606798.221 ops/s
Iteration   7: 23645801.194 ops/s
Iteration   8: 23653956.191 ops/s
Iteration   9: 23613566.961 ops/s
Iteration  10: 23678870.993 ops/s
Iteration  11: 23701325.724 ops/s
Iteration  12: 23626441.733 ops/s
Iteration  13: 23662988.558 ops/s
Iteration  14: 23641827.360 ops/s
Iteration  15: 23624470.572 ops/s
Iteration  16: 23634219.940 ops/s
Iteration  17: 23649121.133 ops/s
Iteration  18: 23572400.503 ops/s
Iteration  19: 23623532.547 ops/s
Iteration  20: 23631516.736 ops/s
Iteration  21: 23627317.307 ops/s
Iteration  22: 23617240.609 ops/s
Iteration  23: 23552087.976 ops/s
Iteration  24: 23626996.025 ops/s
Iteration  25: 23652471.332 ops/s
Iteration  26: 23625145.024 ops/s
Iteration  27: 23604129.977 ops/s
Iteration  28: 23614461.040 ops/s
Iteration  29: 23607736.786 ops/s
Iteration  30: 23624275.431 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectIfNone":
  23626661.338 ±(99.9%) 19362.260 ops/s [Average]
  (min, avg, max) = (23552087.976, 23626661.338, 23701325.724), stdev = 28980.522
  CI (99.9%): [23607299.078, 23646023.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_detectIfNone  thrpt   30  23626661.338 ± 19362.260  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 40910558.145 ops/s
# Warmup Iteration   2: 48460208.526 ops/s
# Warmup Iteration   3: 62035370.661 ops/s
# Warmup Iteration   4: 61622362.876 ops/s
# Warmup Iteration   5: 62037785.258 ops/s
# Warmup Iteration   6: 61903347.092 ops/s
# Warmup Iteration   7: 62052895.718 ops/s
# Warmup Iteration   8: 62075455.508 ops/s
# Warmup Iteration   9: 51889187.569 ops/s
# Warmup Iteration  10: 61932003.876 ops/s
# Warmup Iteration  11: 62086079.319 ops/s
# Warmup Iteration  12: 62020807.412 ops/s
# Warmup Iteration  13: 61955374.265 ops/s
# Warmup Iteration  14: 62088671.257 ops/s
# Warmup Iteration  15: 62051589.477 ops/s
# Warmup Iteration  16: 62022654.011 ops/s
# Warmup Iteration  17: 62103086.982 ops/s
# Warmup Iteration  18: 61956286.723 ops/s
# Warmup Iteration  19: 61964826.681 ops/s
# Warmup Iteration  20: 62059924.190 ops/s
# Warmup Iteration  21: 62042616.336 ops/s
# Warmup Iteration  22: 61973640.457 ops/s
# Warmup Iteration  23: 62008997.283 ops/s
# Warmup Iteration  24: 62103739.679 ops/s
# Warmup Iteration  25: 62063766.061 ops/s
# Warmup Iteration  26: 62075273.300 ops/s
# Warmup Iteration  27: 62054918.076 ops/s
# Warmup Iteration  28: 62025417.608 ops/s
# Warmup Iteration  29: 62116291.734 ops/s
# Warmup Iteration  30: 61999228.323 ops/s
Iteration   1: 61899060.989 ops/s
Iteration   2: 62057183.604 ops/s
Iteration   3: 62114034.078 ops/s
Iteration   4: 61752988.167 ops/s
Iteration   5: 61996022.985 ops/s
Iteration   6: 61957303.435 ops/s
Iteration   7: 61871580.686 ops/s
Iteration   8: 62018127.660 ops/s
Iteration   9: 61960435.242 ops/s
Iteration  10: 62096397.927 ops/s
Iteration  11: 61924990.109 ops/s
Iteration  12: 61905863.504 ops/s
Iteration  13: 61985515.311 ops/s
Iteration  14: 62163587.754 ops/s
Iteration  15: 61972926.544 ops/s
Iteration  16: 62106975.903 ops/s
Iteration  17: 62002030.254 ops/s
Iteration  18: 61952511.361 ops/s
Iteration  19: 62081015.438 ops/s
Iteration  20: 62089606.605 ops/s
Iteration  21: 61998959.675 ops/s
Iteration  22: 62160400.322 ops/s
Iteration  23: 62198070.625 ops/s
Iteration  24: 61998089.640 ops/s
Iteration  25: 62158839.241 ops/s
Iteration  26: 62057128.872 ops/s
Iteration  27: 61903003.173 ops/s
Iteration  28: 62001280.520 ops/s
Iteration  29: 62148594.614 ops/s
Iteration  30: 62038628.821 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectIndex":
  62019038.435 ±(99.9%) 68297.924 ops/s [Average]
  (min, avg, max) = (61752988.167, 62019038.435, 62198070.625), stdev = 102225.124
  CI (99.9%): [61950740.512, 62087336.359] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_detectIndex  thrpt   30  62019038.435 ± 68297.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24289902.865 ops/s
# Warmup Iteration   2: 25206138.698 ops/s
# Warmup Iteration   3: 27392698.138 ops/s
# Warmup Iteration   4: 31206108.058 ops/s
# Warmup Iteration   5: 31123627.436 ops/s
# Warmup Iteration   6: 31229787.034 ops/s
# Warmup Iteration   7: 31001505.175 ops/s
# Warmup Iteration   8: 31213928.685 ops/s
# Warmup Iteration   9: 31050714.242 ops/s
# Warmup Iteration  10: 31430447.526 ops/s
# Warmup Iteration  11: 31237883.401 ops/s
# Warmup Iteration  12: 31225221.871 ops/s
# Warmup Iteration  13: 31206486.944 ops/s
# Warmup Iteration  14: 31167921.847 ops/s
# Warmup Iteration  15: 31126268.324 ops/s
# Warmup Iteration  16: 27385768.075 ops/s
# Warmup Iteration  17: 29632880.832 ops/s
# Warmup Iteration  18: 31053951.756 ops/s
# Warmup Iteration  19: 31081557.619 ops/s
# Warmup Iteration  20: 31009126.329 ops/s
# Warmup Iteration  21: 30920313.962 ops/s
# Warmup Iteration  22: 31133316.988 ops/s
# Warmup Iteration  23: 31249857.151 ops/s
# Warmup Iteration  24: 31138185.126 ops/s
# Warmup Iteration  25: 31155329.616 ops/s
# Warmup Iteration  26: 31210006.585 ops/s
# Warmup Iteration  27: 31197490.726 ops/s
# Warmup Iteration  28: 31086553.589 ops/s
# Warmup Iteration  29: 31359174.723 ops/s
# Warmup Iteration  30: 31198585.815 ops/s
Iteration   1: 31290348.140 ops/s
Iteration   2: 30952151.954 ops/s
Iteration   3: 31369244.233 ops/s
Iteration   4: 31122568.867 ops/s
Iteration   5: 31300462.931 ops/s
Iteration   6: 31222612.978 ops/s
Iteration   7: 30887275.169 ops/s
Iteration   8: 31226118.124 ops/s
Iteration   9: 31238319.661 ops/s
Iteration  10: 31276122.591 ops/s
Iteration  11: 31333510.606 ops/s
Iteration  12: 31235293.506 ops/s
Iteration  13: 31341400.669 ops/s
Iteration  14: 31310211.891 ops/s
Iteration  15: 31217408.788 ops/s
Iteration  16: 31398843.959 ops/s
Iteration  17: 31209911.549 ops/s
Iteration  18: 31366278.493 ops/s
Iteration  19: 31329032.457 ops/s
Iteration  20: 31351568.308 ops/s
Iteration  21: 31290711.970 ops/s
Iteration  22: 31064869.156 ops/s
Iteration  23: 31059280.490 ops/s
Iteration  24: 31342952.462 ops/s
Iteration  25: 31462314.539 ops/s
Iteration  26: 31159878.003 ops/s
Iteration  27: 31177179.492 ops/s
Iteration  28: 31778652.272 ops/s
Iteration  29: 31816093.925 ops/s
Iteration  30: 31246824.582 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectLastIndex":
  31279248.059 ±(99.9%) 126817.730 ops/s [Average]
  (min, avg, max) = (30887275.169, 31279248.059, 31816093.925), stdev = 189814.823
  CI (99.9%): [31152430.328, 31406065.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  31279248.059 ± 126817.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7236663.045 ops/s
# Warmup Iteration   2: 14969724.430 ops/s
# Warmup Iteration   3: 13425294.631 ops/s
# Warmup Iteration   4: 14580388.666 ops/s
# Warmup Iteration   5: 15172342.861 ops/s
# Warmup Iteration   6: 15202592.532 ops/s
# Warmup Iteration   7: 15140061.395 ops/s
# Warmup Iteration   8: 15158293.469 ops/s
# Warmup Iteration   9: 15195690.126 ops/s
# Warmup Iteration  10: 15210938.476 ops/s
# Warmup Iteration  11: 15167266.384 ops/s
# Warmup Iteration  12: 15184305.647 ops/s
# Warmup Iteration  13: 15179107.760 ops/s
# Warmup Iteration  14: 15175704.474 ops/s
# Warmup Iteration  15: 15191846.864 ops/s
# Warmup Iteration  16: 15188988.189 ops/s
# Warmup Iteration  17: 15144572.791 ops/s
# Warmup Iteration  18: 15212058.810 ops/s
# Warmup Iteration  19: 15114235.302 ops/s
# Warmup Iteration  20: 15166887.849 ops/s
# Warmup Iteration  21: 15189376.107 ops/s
# Warmup Iteration  22: 15192169.772 ops/s
# Warmup Iteration  23: 15186165.539 ops/s
# Warmup Iteration  24: 15179520.666 ops/s
# Warmup Iteration  25: 15178952.529 ops/s
# Warmup Iteration  26: 15186105.982 ops/s
# Warmup Iteration  27: 15196440.999 ops/s
# Warmup Iteration  28: 15180708.273 ops/s
# Warmup Iteration  29: 15152028.615 ops/s
# Warmup Iteration  30: 15165733.256 ops/s
Iteration   1: 15199029.876 ops/s
Iteration   2: 15174494.363 ops/s
Iteration   3: 15125419.009 ops/s
Iteration   4: 15199473.470 ops/s
Iteration   5: 15210549.427 ops/s
Iteration   6: 15156044.381 ops/s
Iteration   7: 15201065.852 ops/s
Iteration   8: 15156553.159 ops/s
Iteration   9: 15147012.619 ops/s
Iteration  10: 15113864.027 ops/s
Iteration  11: 15152749.875 ops/s
Iteration  12: 15207364.857 ops/s
Iteration  13: 15239332.624 ops/s
Iteration  14: 15174132.064 ops/s
Iteration  15: 15209629.643 ops/s
Iteration  16: 15150797.424 ops/s
Iteration  17: 15176238.960 ops/s
Iteration  18: 15178477.071 ops/s
Iteration  19: 15165951.760 ops/s
Iteration  20: 15165226.765 ops/s
Iteration  21: 15146352.084 ops/s
Iteration  22: 15055846.777 ops/s
Iteration  23: 15156562.328 ops/s
Iteration  24: 15163769.830 ops/s
Iteration  25: 15161145.392 ops/s
Iteration  26: 15177814.619 ops/s
Iteration  27: 15215129.684 ops/s
Iteration  28: 15199591.782 ops/s
Iteration  29: 15204658.503 ops/s
Iteration  30: 15170095.077 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectWith":
  15171812.443 ±(99.9%) 23849.864 ops/s [Average]
  (min, avg, max) = (15055846.777, 15171812.443, 15239332.624), stdev = 35697.356
  CI (99.9%): [15147962.579, 15195662.307] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_detectWith  thrpt   30  15171812.443 ± 23849.864  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7956814.012 ops/s
# Warmup Iteration   2: 16186896.824 ops/s
# Warmup Iteration   3: 16194551.186 ops/s
# Warmup Iteration   4: 13727557.893 ops/s
# Warmup Iteration   5: 16196181.917 ops/s
# Warmup Iteration   6: 16205859.501 ops/s
# Warmup Iteration   7: 16212205.645 ops/s
# Warmup Iteration   8: 16186212.538 ops/s
# Warmup Iteration   9: 16201899.652 ops/s
# Warmup Iteration  10: 16214426.078 ops/s
# Warmup Iteration  11: 16193113.196 ops/s
# Warmup Iteration  12: 16183721.998 ops/s
# Warmup Iteration  13: 16176763.834 ops/s
# Warmup Iteration  14: 16193803.743 ops/s
# Warmup Iteration  15: 16201455.498 ops/s
# Warmup Iteration  16: 16214419.521 ops/s
# Warmup Iteration  17: 16189243.478 ops/s
# Warmup Iteration  18: 16192750.772 ops/s
# Warmup Iteration  19: 16217151.226 ops/s
# Warmup Iteration  20: 16185863.020 ops/s
# Warmup Iteration  21: 16180527.505 ops/s
# Warmup Iteration  22: 16165558.862 ops/s
# Warmup Iteration  23: 16143705.688 ops/s
# Warmup Iteration  24: 16181589.642 ops/s
# Warmup Iteration  25: 16184802.604 ops/s
# Warmup Iteration  26: 16159651.128 ops/s
# Warmup Iteration  27: 16210117.728 ops/s
# Warmup Iteration  28: 16197654.962 ops/s
# Warmup Iteration  29: 16220735.301 ops/s
# Warmup Iteration  30: 16194569.126 ops/s
Iteration   1: 16165999.571 ops/s
Iteration   2: 16166189.837 ops/s
Iteration   3: 16174302.545 ops/s
Iteration   4: 16207397.350 ops/s
Iteration   5: 16208113.944 ops/s
Iteration   6: 16175867.557 ops/s
Iteration   7: 16207032.689 ops/s
Iteration   8: 16222121.911 ops/s
Iteration   9: 16197973.532 ops/s
Iteration  10: 16213080.740 ops/s
Iteration  11: 16183064.577 ops/s
Iteration  12: 16206737.265 ops/s
Iteration  13: 16200786.380 ops/s
Iteration  14: 16183513.045 ops/s
Iteration  15: 16164800.926 ops/s
Iteration  16: 16178864.546 ops/s
Iteration  17: 16258079.925 ops/s
Iteration  18: 16095797.193 ops/s
Iteration  19: 16258546.662 ops/s
Iteration  20: 16124432.831 ops/s
Iteration  21: 16160129.755 ops/s
Iteration  22: 16189781.990 ops/s
Iteration  23: 16216489.115 ops/s
Iteration  24: 16227765.177 ops/s
Iteration  25: 16190148.152 ops/s
Iteration  26: 16177702.749 ops/s
Iteration  27: 16194850.633 ops/s
Iteration  28: 16208277.965 ops/s
Iteration  29: 16241031.772 ops/s
Iteration  30: 16243995.202 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_detectWithIfNone":
  16194762.518 ±(99.9%) 23624.219 ops/s [Average]
  (min, avg, max) = (16095797.193, 16194762.518, 16258546.662), stdev = 35359.622
  CI (99.9%): [16171138.299, 16218386.737] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  16194762.518 ± 23624.219  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1417244.952 ops/s
# Warmup Iteration   2: 2604290.603 ops/s
# Warmup Iteration   3: 2782697.555 ops/s
# Warmup Iteration   4: 2799025.439 ops/s
# Warmup Iteration   5: 2493176.247 ops/s
# Warmup Iteration   6: 2641486.414 ops/s
# Warmup Iteration   7: 2794927.584 ops/s
# Warmup Iteration   8: 2797948.250 ops/s
# Warmup Iteration   9: 2798876.204 ops/s
# Warmup Iteration  10: 2797295.296 ops/s
# Warmup Iteration  11: 2796593.471 ops/s
# Warmup Iteration  12: 2798447.259 ops/s
# Warmup Iteration  13: 2796682.348 ops/s
# Warmup Iteration  14: 2795315.325 ops/s
# Warmup Iteration  15: 2803206.829 ops/s
# Warmup Iteration  16: 2800285.343 ops/s
# Warmup Iteration  17: 2800528.904 ops/s
# Warmup Iteration  18: 2799900.602 ops/s
# Warmup Iteration  19: 2797677.034 ops/s
# Warmup Iteration  20: 2800655.875 ops/s
# Warmup Iteration  21: 2801817.930 ops/s
# Warmup Iteration  22: 2797354.553 ops/s
# Warmup Iteration  23: 2797611.807 ops/s
# Warmup Iteration  24: 2805671.769 ops/s
# Warmup Iteration  25: 2799624.959 ops/s
# Warmup Iteration  26: 2805638.336 ops/s
# Warmup Iteration  27: 2802852.633 ops/s
# Warmup Iteration  28: 2804313.574 ops/s
# Warmup Iteration  29: 2799958.051 ops/s
# Warmup Iteration  30: 2803167.651 ops/s
Iteration   1: 2796110.972 ops/s
Iteration   2: 2795013.366 ops/s
Iteration   3: 2798544.151 ops/s
Iteration   4: 2792049.359 ops/s
Iteration   5: 2803157.141 ops/s
Iteration   6: 2795320.084 ops/s
Iteration   7: 2792632.199 ops/s
Iteration   8: 2805489.495 ops/s
Iteration   9: 2796223.921 ops/s
Iteration  10: 2802537.402 ops/s
Iteration  11: 2804807.417 ops/s
Iteration  12: 2794891.406 ops/s
Iteration  13: 2800433.391 ops/s
Iteration  14: 2799751.144 ops/s
Iteration  15: 2793648.379 ops/s
Iteration  16: 2808763.720 ops/s
Iteration  17: 2803539.329 ops/s
Iteration  18: 2793336.018 ops/s
Iteration  19: 2798648.781 ops/s
Iteration  20: 2791423.418 ops/s
Iteration  21: 2798882.400 ops/s
Iteration  22: 2798682.763 ops/s
Iteration  23: 2796701.646 ops/s
Iteration  24: 2798289.933 ops/s
Iteration  25: 2791694.302 ops/s
Iteration  26: 2805955.662 ops/s
Iteration  27: 2800653.163 ops/s
Iteration  28: 2797555.457 ops/s
Iteration  29: 2804505.277 ops/s
Iteration  30: 2806302.741 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_distinct":
  2798851.481 ±(99.9%) 3257.341 ops/s [Average]
  (min, avg, max) = (2791423.418, 2798851.481, 2808763.720), stdev = 4875.435
  CI (99.9%): [2795594.140, 2802108.822] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_distinct  thrpt   30  2798851.481 ± 3257.341  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3899622.431 ops/s
# Warmup Iteration   2: 8392592.721 ops/s
# Warmup Iteration   3: 8349636.437 ops/s
# Warmup Iteration   4: 7040494.869 ops/s
# Warmup Iteration   5: 8369890.445 ops/s
# Warmup Iteration   6: 8310487.134 ops/s
# Warmup Iteration   7: 8227688.811 ops/s
# Warmup Iteration   8: 8335381.124 ops/s
# Warmup Iteration   9: 8363703.872 ops/s
# Warmup Iteration  10: 8281780.222 ops/s
# Warmup Iteration  11: 8288184.357 ops/s
# Warmup Iteration  12: 8352044.816 ops/s
# Warmup Iteration  13: 8370669.024 ops/s
# Warmup Iteration  14: 8256084.116 ops/s
# Warmup Iteration  15: 8397995.125 ops/s
# Warmup Iteration  16: 8293387.001 ops/s
# Warmup Iteration  17: 8314638.056 ops/s
# Warmup Iteration  18: 8382273.050 ops/s
# Warmup Iteration  19: 8382721.179 ops/s
# Warmup Iteration  20: 8410194.502 ops/s
# Warmup Iteration  21: 8494578.563 ops/s
# Warmup Iteration  22: 8284320.700 ops/s
# Warmup Iteration  23: 8386978.614 ops/s
# Warmup Iteration  24: 8015406.782 ops/s
# Warmup Iteration  25: 8406721.832 ops/s
# Warmup Iteration  26: 8422032.874 ops/s
# Warmup Iteration  27: 8455158.603 ops/s
# Warmup Iteration  28: 8268950.131 ops/s
# Warmup Iteration  29: 8339445.791 ops/s
# Warmup Iteration  30: 8350700.458 ops/s
Iteration   1: 8312587.723 ops/s
Iteration   2: 8329814.614 ops/s
Iteration   3: 8376415.661 ops/s
Iteration   4: 8367715.249 ops/s
Iteration   5: 8381486.186 ops/s
Iteration   6: 8378741.576 ops/s
Iteration   7: 8407308.142 ops/s
Iteration   8: 8365229.038 ops/s
Iteration   9: 8312198.253 ops/s
Iteration  10: 8086165.284 ops/s
Iteration  11: 7832009.254 ops/s
Iteration  12: 8257062.299 ops/s
Iteration  13: 8310976.093 ops/s
Iteration  14: 8303948.386 ops/s
Iteration  15: 8369075.932 ops/s
Iteration  16: 8355162.797 ops/s
Iteration  17: 8354287.748 ops/s
Iteration  18: 8371865.974 ops/s
Iteration  19: 8191719.057 ops/s
Iteration  20: 8361314.580 ops/s
Iteration  21: 8385878.586 ops/s
Iteration  22: 8376462.360 ops/s
Iteration  23: 8342684.606 ops/s
Iteration  24: 8401284.028 ops/s
Iteration  25: 8364406.047 ops/s
Iteration  26: 8429930.290 ops/s
Iteration  27: 8391693.672 ops/s
Iteration  28: 8380083.087 ops/s
Iteration  29: 8376771.965 ops/s
Iteration  30: 8354750.206 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_distinctBy":
  8327634.290 ±(99.9%) 77030.243 ops/s [Average]
  (min, avg, max) = (7832009.254, 8327634.290, 8429930.290), stdev = 115295.249
  CI (99.9%): [8250604.047, 8404664.532] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_distinctBy  thrpt   30  8327634.290 ± 77030.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3807622.635 ops/s
# Warmup Iteration   2: 7485811.337 ops/s
# Warmup Iteration   3: 7545172.279 ops/s
# Warmup Iteration   4: 7277092.151 ops/s
# Warmup Iteration   5: 6816873.254 ops/s
# Warmup Iteration   6: 7525442.402 ops/s
# Warmup Iteration   7: 7710365.571 ops/s
# Warmup Iteration   8: 7525503.113 ops/s
# Warmup Iteration   9: 7558119.279 ops/s
# Warmup Iteration  10: 7524079.342 ops/s
# Warmup Iteration  11: 7645149.281 ops/s
# Warmup Iteration  12: 7086356.661 ops/s
# Warmup Iteration  13: 7465784.010 ops/s
# Warmup Iteration  14: 7467164.790 ops/s
# Warmup Iteration  15: 7344861.862 ops/s
# Warmup Iteration  16: 7552256.129 ops/s
# Warmup Iteration  17: 7466776.977 ops/s
# Warmup Iteration  18: 7514639.503 ops/s
# Warmup Iteration  19: 7502762.815 ops/s
# Warmup Iteration  20: 7203945.377 ops/s
# Warmup Iteration  21: 7604020.630 ops/s
# Warmup Iteration  22: 7539764.436 ops/s
# Warmup Iteration  23: 7536983.092 ops/s
# Warmup Iteration  24: 7592555.457 ops/s
# Warmup Iteration  25: 7590848.954 ops/s
# Warmup Iteration  26: 7259583.011 ops/s
# Warmup Iteration  27: 7532519.160 ops/s
# Warmup Iteration  28: 7006875.694 ops/s
# Warmup Iteration  29: 7544913.947 ops/s
# Warmup Iteration  30: 7518051.432 ops/s
Iteration   1: 7840813.238 ops/s
Iteration   2: 7360385.477 ops/s
Iteration   3: 7466731.023 ops/s
Iteration   4: 7494643.913 ops/s
Iteration   5: 7545180.574 ops/s
Iteration   6: 7481396.846 ops/s
Iteration   7: 7740857.348 ops/s
Iteration   8: 8413567.227 ops/s
Iteration   9: 7846328.896 ops/s
Iteration  10: 7427113.946 ops/s
Iteration  11: 7478428.938 ops/s
Iteration  12: 7448378.146 ops/s
Iteration  13: 7526213.527 ops/s
Iteration  14: 7603659.025 ops/s
Iteration  15: 7381753.335 ops/s
Iteration  16: 7709407.224 ops/s
Iteration  17: 7464732.357 ops/s
Iteration  18: 6942056.179 ops/s
Iteration  19: 7510972.266 ops/s
Iteration  20: 6854900.315 ops/s
Iteration  21: 7518249.268 ops/s
Iteration  22: 7541079.261 ops/s
Iteration  23: 7547454.493 ops/s
Iteration  24: 7592145.241 ops/s
Iteration  25: 7570479.971 ops/s
Iteration  26: 7585159.749 ops/s
Iteration  27: 7597611.820 ops/s
Iteration  28: 7581289.700 ops/s
Iteration  29: 7566489.574 ops/s
Iteration  30: 7428217.884 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  7535523.225 ±(99.9%) 174182.451 ops/s [Average]
  (min, avg, max) = (6854900.315, 7535523.225, 8413567.227), stdev = 260708.112
  CI (99.9%): [7361340.775, 7709705.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  7535523.225 ± 174182.451  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 959418.963 ops/s
# Warmup Iteration   2: 1104289.585 ops/s
# Warmup Iteration   3: 1497919.337 ops/s
# Warmup Iteration   4: 1495189.546 ops/s
# Warmup Iteration   5: 1482713.269 ops/s
# Warmup Iteration   6: 1492797.396 ops/s
# Warmup Iteration   7: 1496397.072 ops/s
# Warmup Iteration   8: 1498182.432 ops/s
# Warmup Iteration   9: 1496502.884 ops/s
# Warmup Iteration  10: 1227433.068 ops/s
# Warmup Iteration  11: 1500383.138 ops/s
# Warmup Iteration  12: 1497475.833 ops/s
# Warmup Iteration  13: 1497799.437 ops/s
# Warmup Iteration  14: 1496254.862 ops/s
# Warmup Iteration  15: 1495582.550 ops/s
# Warmup Iteration  16: 1500867.834 ops/s
# Warmup Iteration  17: 1499497.015 ops/s
# Warmup Iteration  18: 1500141.397 ops/s
# Warmup Iteration  19: 1498670.710 ops/s
# Warmup Iteration  20: 1498556.047 ops/s
# Warmup Iteration  21: 1492572.726 ops/s
# Warmup Iteration  22: 1499574.061 ops/s
# Warmup Iteration  23: 1494695.430 ops/s
# Warmup Iteration  24: 1496604.935 ops/s
# Warmup Iteration  25: 1499862.912 ops/s
# Warmup Iteration  26: 1498498.690 ops/s
# Warmup Iteration  27: 1498877.030 ops/s
# Warmup Iteration  28: 1500621.133 ops/s
# Warmup Iteration  29: 1499604.244 ops/s
# Warmup Iteration  30: 1499748.766 ops/s
Iteration   1: 1497502.657 ops/s
Iteration   2: 1499953.898 ops/s
Iteration   3: 1499858.585 ops/s
Iteration   4: 1498373.185 ops/s
Iteration   5: 1499040.778 ops/s
Iteration   6: 1499636.586 ops/s
Iteration   7: 1493016.035 ops/s
Iteration   8: 1500081.371 ops/s
Iteration   9: 1500810.125 ops/s
Iteration  10: 1500835.764 ops/s
Iteration  11: 1498125.432 ops/s
Iteration  12: 1500519.157 ops/s
Iteration  13: 1500972.253 ops/s
Iteration  14: 1494718.817 ops/s
Iteration  15: 1499891.430 ops/s
Iteration  16: 1495830.283 ops/s
Iteration  17: 1491194.636 ops/s
Iteration  18: 1499404.241 ops/s
Iteration  19: 1500063.976 ops/s
Iteration  20: 1500885.520 ops/s
Iteration  21: 1497197.840 ops/s
Iteration  22: 1500501.462 ops/s
Iteration  23: 1501401.259 ops/s
Iteration  24: 1497583.748 ops/s
Iteration  25: 1499087.682 ops/s
Iteration  26: 1499453.924 ops/s
Iteration  27: 1495928.441 ops/s
Iteration  28: 1499611.367 ops/s
Iteration  29: 1499635.275 ops/s
Iteration  30: 1496585.778 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_drop":
  1498590.050 ±(99.9%) 1639.853 ops/s [Average]
  (min, avg, max) = (1491194.636, 1498590.050, 1501401.259), stdev = 2454.455
  CI (99.9%): [1496950.197, 1500229.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_drop  thrpt   30  1498590.050 ± 1639.853  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3182075.363 ops/s
# Warmup Iteration   2: 6054131.298 ops/s
# Warmup Iteration   3: 6424457.006 ops/s
# Warmup Iteration   4: 6456460.492 ops/s
# Warmup Iteration   5: 5420828.852 ops/s
# Warmup Iteration   6: 6416406.283 ops/s
# Warmup Iteration   7: 6398756.118 ops/s
# Warmup Iteration   8: 6410626.658 ops/s
# Warmup Iteration   9: 6417097.957 ops/s
# Warmup Iteration  10: 6419753.188 ops/s
# Warmup Iteration  11: 6403832.054 ops/s
# Warmup Iteration  12: 6412603.075 ops/s
# Warmup Iteration  13: 6409530.801 ops/s
# Warmup Iteration  14: 6400471.651 ops/s
# Warmup Iteration  15: 6412614.324 ops/s
# Warmup Iteration  16: 6402248.867 ops/s
# Warmup Iteration  17: 6475796.716 ops/s
# Warmup Iteration  18: 6484533.664 ops/s
# Warmup Iteration  19: 6477160.750 ops/s
# Warmup Iteration  20: 6475538.970 ops/s
# Warmup Iteration  21: 6484742.495 ops/s
# Warmup Iteration  22: 6480954.240 ops/s
# Warmup Iteration  23: 6479490.319 ops/s
# Warmup Iteration  24: 6480602.829 ops/s
# Warmup Iteration  25: 6482571.886 ops/s
# Warmup Iteration  26: 6474546.330 ops/s
# Warmup Iteration  27: 6481602.898 ops/s
# Warmup Iteration  28: 6472248.338 ops/s
# Warmup Iteration  29: 6338387.428 ops/s
# Warmup Iteration  30: 6477722.172 ops/s
Iteration   1: 6477408.050 ops/s
Iteration   2: 6456377.651 ops/s
Iteration   3: 6486035.335 ops/s
Iteration   4: 6475973.859 ops/s
Iteration   5: 6483069.298 ops/s
Iteration   6: 6474208.888 ops/s
Iteration   7: 6458751.628 ops/s
Iteration   8: 6465271.537 ops/s
Iteration   9: 6459442.701 ops/s
Iteration  10: 6252575.162 ops/s
Iteration  11: 6378618.097 ops/s
Iteration  12: 6216270.594 ops/s
Iteration  13: 6463953.342 ops/s
Iteration  14: 6488715.254 ops/s
Iteration  15: 6459785.343 ops/s
Iteration  16: 6475580.414 ops/s
Iteration  17: 6488318.531 ops/s
Iteration  18: 6469816.431 ops/s
Iteration  19: 6478152.094 ops/s
Iteration  20: 6475294.928 ops/s
Iteration  21: 6487240.343 ops/s
Iteration  22: 6465869.686 ops/s
Iteration  23: 6470622.303 ops/s
Iteration  24: 6489299.777 ops/s
Iteration  25: 6481586.266 ops/s
Iteration  26: 6474089.420 ops/s
Iteration  27: 6494752.012 ops/s
Iteration  28: 6472722.657 ops/s
Iteration  29: 6476283.977 ops/s
Iteration  30: 6489563.595 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_dropWhile":
  6456188.306 ±(99.9%) 42635.013 ops/s [Average]
  (min, avg, max) = (6216270.594, 6456188.306, 6494752.012), stdev = 63814.084
  CI (99.9%): [6413553.293, 6498823.318] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_dropWhile  thrpt   30  6456188.306 ± 42635.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 742792.373 ops/s
# Warmup Iteration   2: 773511.586 ops/s
# Warmup Iteration   3: 979564.934 ops/s
# Warmup Iteration   4: 977827.649 ops/s
# Warmup Iteration   5: 975040.505 ops/s
# Warmup Iteration   6: 981185.219 ops/s
# Warmup Iteration   7: 981199.809 ops/s
# Warmup Iteration   8: 981280.834 ops/s
# Warmup Iteration   9: 978790.973 ops/s
# Warmup Iteration  10: 980601.443 ops/s
# Warmup Iteration  11: 980135.066 ops/s
# Warmup Iteration  12: 843309.894 ops/s
# Warmup Iteration  13: 984964.718 ops/s
# Warmup Iteration  14: 983254.423 ops/s
# Warmup Iteration  15: 984100.278 ops/s
# Warmup Iteration  16: 983149.245 ops/s
# Warmup Iteration  17: 1040047.618 ops/s
# Warmup Iteration  18: 1039773.946 ops/s
# Warmup Iteration  19: 1038527.821 ops/s
# Warmup Iteration  20: 1038472.112 ops/s
# Warmup Iteration  21: 1040306.277 ops/s
# Warmup Iteration  22: 1039011.534 ops/s
# Warmup Iteration  23: 1040407.623 ops/s
# Warmup Iteration  24: 1040203.355 ops/s
# Warmup Iteration  25: 1040378.918 ops/s
# Warmup Iteration  26: 1039588.461 ops/s
# Warmup Iteration  27: 1038003.541 ops/s
# Warmup Iteration  28: 1040073.305 ops/s
# Warmup Iteration  29: 1040701.541 ops/s
# Warmup Iteration  30: 1040208.796 ops/s
Iteration   1: 1041315.271 ops/s
Iteration   2: 1039721.450 ops/s
Iteration   3: 1034781.111 ops/s
Iteration   4: 1036207.793 ops/s
Iteration   5: 1034060.682 ops/s
Iteration   6: 1034549.795 ops/s
Iteration   7: 1037150.860 ops/s
Iteration   8: 1035331.318 ops/s
Iteration   9: 1035587.876 ops/s
Iteration  10: 1036873.032 ops/s
Iteration  11: 1034256.099 ops/s
Iteration  12: 1036174.383 ops/s
Iteration  13: 1036337.450 ops/s
Iteration  14: 1036133.751 ops/s
Iteration  15: 1033062.401 ops/s
Iteration  16: 1040039.077 ops/s
Iteration  17: 1038940.998 ops/s
Iteration  18: 1037998.144 ops/s
Iteration  19: 1035325.171 ops/s
Iteration  20: 1035573.645 ops/s
Iteration  21: 1035728.635 ops/s
Iteration  22: 1037614.603 ops/s
Iteration  23: 1039886.511 ops/s
Iteration  24: 1039386.620 ops/s
Iteration  25: 1038805.318 ops/s
Iteration  26: 1036633.004 ops/s
Iteration  27: 1038014.748 ops/s
Iteration  28: 1036530.845 ops/s
Iteration  29: 1035841.485 ops/s
Iteration  30: 1037160.600 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_drop_throws":
  1036834.089 ±(99.9%) 1336.176 ops/s [Average]
  (min, avg, max) = (1033062.401, 1036834.089, 1041315.271), stdev = 1999.925
  CI (99.9%): [1035497.914, 1038170.265] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_drop_throws  thrpt   30  1036834.089 ± 1336.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_each$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_each

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6027357.873 ops/s
# Warmup Iteration   2: 23322156.296 ops/s
# Warmup Iteration   3: 25950514.902 ops/s
# Warmup Iteration   4: 22439373.592 ops/s
# Warmup Iteration   5: 25292162.860 ops/s
# Warmup Iteration   6: 25965557.822 ops/s
# Warmup Iteration   7: 25970490.258 ops/s
# Warmup Iteration   8: 26021712.015 ops/s
# Warmup Iteration   9: 25993109.451 ops/s
# Warmup Iteration  10: 25950946.511 ops/s
# Warmup Iteration  11: 25936399.451 ops/s
# Warmup Iteration  12: 25988088.627 ops/s
# Warmup Iteration  13: 25978765.092 ops/s
# Warmup Iteration  14: 25906939.936 ops/s
# Warmup Iteration  15: 25933579.563 ops/s
# Warmup Iteration  16: 25911620.367 ops/s
# Warmup Iteration  17: 25986652.254 ops/s
# Warmup Iteration  18: 25968133.342 ops/s
# Warmup Iteration  19: 25964561.424 ops/s
# Warmup Iteration  20: 26039137.342 ops/s
# Warmup Iteration  21: 25996340.479 ops/s
# Warmup Iteration  22: 25955654.361 ops/s
# Warmup Iteration  23: 26032851.844 ops/s
# Warmup Iteration  24: 25958575.806 ops/s
# Warmup Iteration  25: 25920549.768 ops/s
# Warmup Iteration  26: 26014098.103 ops/s
# Warmup Iteration  27: 26005849.595 ops/s
# Warmup Iteration  28: 25971439.825 ops/s
# Warmup Iteration  29: 25990787.451 ops/s
# Warmup Iteration  30: 25921647.251 ops/s
Iteration   1: 25993152.469 ops/s
Iteration   2: 25937317.901 ops/s
Iteration   3: 26003129.678 ops/s
Iteration   4: 26004529.001 ops/s
Iteration   5: 26014326.110 ops/s
Iteration   6: 25968183.448 ops/s
Iteration   7: 25960736.483 ops/s
Iteration   8: 26021066.223 ops/s
Iteration   9: 26000134.376 ops/s
Iteration  10: 26007413.714 ops/s
Iteration  11: 26047994.390 ops/s
Iteration  12: 26026741.652 ops/s
Iteration  13: 26005085.806 ops/s
Iteration  14: 25910748.833 ops/s
Iteration  15: 25965216.528 ops/s
Iteration  16: 26068381.154 ops/s
Iteration  17: 25965277.286 ops/s
Iteration  18: 25993011.000 ops/s
Iteration  19: 26084802.718 ops/s
Iteration  20: 25958239.261 ops/s
Iteration  21: 25887368.380 ops/s
Iteration  22: 26000932.192 ops/s
Iteration  23: 25996797.809 ops/s
Iteration  24: 25971618.071 ops/s
Iteration  25: 25978144.088 ops/s
Iteration  26: 26002781.855 ops/s
Iteration  27: 25944185.219 ops/s
Iteration  28: 25913801.011 ops/s
Iteration  29: 25883909.786 ops/s
Iteration  30: 25942380.924 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_each":
  25981913.579 ±(99.9%) 31840.878 ops/s [Average]
  (min, avg, max) = (25883909.786, 25981913.579, 26084802.718), stdev = 47657.930
  CI (99.9%): [25950072.701, 26013754.457] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_each  thrpt   30  25981913.579 ± 31840.878  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25783.431 ops/s
# Warmup Iteration   2: 34009.782 ops/s
# Warmup Iteration   3: 50762.190 ops/s
# Warmup Iteration   4: 50709.743 ops/s
# Warmup Iteration   5: 50487.043 ops/s
# Warmup Iteration   6: 50841.961 ops/s
# Warmup Iteration   7: 50852.933 ops/s
# Warmup Iteration   8: 50855.272 ops/s
# Warmup Iteration   9: 50737.347 ops/s
# Warmup Iteration  10: 42604.880 ops/s
# Warmup Iteration  11: 50859.728 ops/s
# Warmup Iteration  12: 50777.966 ops/s
# Warmup Iteration  13: 50841.939 ops/s
# Warmup Iteration  14: 50790.527 ops/s
# Warmup Iteration  15: 50786.828 ops/s
# Warmup Iteration  16: 50831.931 ops/s
# Warmup Iteration  17: 50786.898 ops/s
# Warmup Iteration  18: 50754.301 ops/s
# Warmup Iteration  19: 50848.028 ops/s
# Warmup Iteration  20: 50882.889 ops/s
# Warmup Iteration  21: 50957.568 ops/s
# Warmup Iteration  22: 50915.085 ops/s
# Warmup Iteration  23: 50900.949 ops/s
# Warmup Iteration  24: 50929.135 ops/s
# Warmup Iteration  25: 50905.075 ops/s
# Warmup Iteration  26: 50889.757 ops/s
# Warmup Iteration  27: 50904.792 ops/s
# Warmup Iteration  28: 50890.659 ops/s
# Warmup Iteration  29: 50898.616 ops/s
# Warmup Iteration  30: 50829.100 ops/s
Iteration   1: 50934.246 ops/s
Iteration   2: 50745.820 ops/s
Iteration   3: 50651.557 ops/s
Iteration   4: 50919.185 ops/s
Iteration   5: 50872.420 ops/s
Iteration   6: 50922.253 ops/s
Iteration   7: 50536.461 ops/s
Iteration   8: 50844.972 ops/s
Iteration   9: 50936.274 ops/s
Iteration  10: 50797.931 ops/s
Iteration  11: 50834.878 ops/s
Iteration  12: 50718.123 ops/s
Iteration  13: 50667.883 ops/s
Iteration  14: 50724.909 ops/s
Iteration  15: 51158.616 ops/s
Iteration  16: 51242.251 ops/s
Iteration  17: 51107.401 ops/s
Iteration  18: 51236.256 ops/s
Iteration  19: 51189.550 ops/s
Iteration  20: 51240.298 ops/s
Iteration  21: 51436.176 ops/s
Iteration  22: 51399.105 ops/s
Iteration  23: 51309.891 ops/s
Iteration  24: 51486.094 ops/s
Iteration  25: 51400.063 ops/s
Iteration  26: 51433.203 ops/s
Iteration  27: 51459.592 ops/s
Iteration  28: 51381.543 ops/s
Iteration  29: 51379.306 ops/s
Iteration  30: 51400.001 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_equalsAndHashCode":
  51078.875 ±(99.9%) 197.890 ops/s [Average]
  (min, avg, max) = (50536.461, 51078.875, 51486.094), stdev = 296.192
  CI (99.9%): [50880.986, 51276.765] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  51078.875 ± 197.890  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 714333.951 ops/s
# Warmup Iteration   2: 1641725.788 ops/s
# Warmup Iteration   3: 1655063.671 ops/s
# Warmup Iteration   4: 1376787.861 ops/s
# Warmup Iteration   5: 1655522.598 ops/s
# Warmup Iteration   6: 1655662.044 ops/s
# Warmup Iteration   7: 1651703.237 ops/s
# Warmup Iteration   8: 1655430.378 ops/s
# Warmup Iteration   9: 1652089.654 ops/s
# Warmup Iteration  10: 1655744.788 ops/s
# Warmup Iteration  11: 1657770.755 ops/s
# Warmup Iteration  12: 1656803.748 ops/s
# Warmup Iteration  13: 1657005.517 ops/s
# Warmup Iteration  14: 1655173.575 ops/s
# Warmup Iteration  15: 1657813.350 ops/s
# Warmup Iteration  16: 1658839.054 ops/s
# Warmup Iteration  17: 1654577.190 ops/s
# Warmup Iteration  18: 1654209.694 ops/s
# Warmup Iteration  19: 1656009.000 ops/s
# Warmup Iteration  20: 1654920.159 ops/s
# Warmup Iteration  21: 1655517.279 ops/s
# Warmup Iteration  22: 1654969.035 ops/s
# Warmup Iteration  23: 1654993.257 ops/s
# Warmup Iteration  24: 1654950.587 ops/s
# Warmup Iteration  25: 1655467.316 ops/s
# Warmup Iteration  26: 1655562.190 ops/s
# Warmup Iteration  27: 1656394.724 ops/s
# Warmup Iteration  28: 1656542.637 ops/s
# Warmup Iteration  29: 1657003.695 ops/s
# Warmup Iteration  30: 1657901.376 ops/s
Iteration   1: 1654153.577 ops/s
Iteration   2: 1656952.575 ops/s
Iteration   3: 1652889.328 ops/s
Iteration   4: 1656055.865 ops/s
Iteration   5: 1654625.327 ops/s
Iteration   6: 1655556.637 ops/s
Iteration   7: 1656328.251 ops/s
Iteration   8: 1653569.813 ops/s
Iteration   9: 1655984.852 ops/s
Iteration  10: 1653460.003 ops/s
Iteration  11: 1655663.604 ops/s
Iteration  12: 1657937.184 ops/s
Iteration  13: 1654790.056 ops/s
Iteration  14: 1655206.796 ops/s
Iteration  15: 1655371.607 ops/s
Iteration  16: 1651148.866 ops/s
Iteration  17: 1656253.553 ops/s
Iteration  18: 1656428.013 ops/s
Iteration  19: 1656164.787 ops/s
Iteration  20: 1653604.370 ops/s
Iteration  21: 1658355.376 ops/s
Iteration  22: 1657625.686 ops/s
Iteration  23: 1652459.746 ops/s
Iteration  24: 1654222.600 ops/s
Iteration  25: 1654008.583 ops/s
Iteration  26: 1651907.124 ops/s
Iteration  27: 1654620.772 ops/s
Iteration  28: 1657145.361 ops/s
Iteration  29: 1654008.769 ops/s
Iteration  30: 1654580.398 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_flatCollect":
  1655035.983 ±(99.9%) 1179.365 ops/s [Average]
  (min, avg, max) = (1651148.866, 1655035.983, 1658355.376), stdev = 1765.218
  CI (99.9%): [1653856.617, 1656215.348] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_flatCollect  thrpt   30  1655035.983 ± 1179.365  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 745313.728 ops/s
# Warmup Iteration   2: 1737958.051 ops/s
# Warmup Iteration   3: 1742843.422 ops/s
# Warmup Iteration   4: 1455202.419 ops/s
# Warmup Iteration   5: 1748013.409 ops/s
# Warmup Iteration   6: 1746269.035 ops/s
# Warmup Iteration   7: 1745860.351 ops/s
# Warmup Iteration   8: 1747892.909 ops/s
# Warmup Iteration   9: 1745382.388 ops/s
# Warmup Iteration  10: 1743752.346 ops/s
# Warmup Iteration  11: 1744697.469 ops/s
# Warmup Iteration  12: 1743956.210 ops/s
# Warmup Iteration  13: 1745053.478 ops/s
# Warmup Iteration  14: 1747546.239 ops/s
# Warmup Iteration  15: 1742245.466 ops/s
# Warmup Iteration  16: 1746310.921 ops/s
# Warmup Iteration  17: 1747428.929 ops/s
# Warmup Iteration  18: 1745732.400 ops/s
# Warmup Iteration  19: 1748437.016 ops/s
# Warmup Iteration  20: 1748118.915 ops/s
# Warmup Iteration  21: 1749270.390 ops/s
# Warmup Iteration  22: 1748646.590 ops/s
# Warmup Iteration  23: 1744448.520 ops/s
# Warmup Iteration  24: 1747101.383 ops/s
# Warmup Iteration  25: 1742532.211 ops/s
# Warmup Iteration  26: 1745144.256 ops/s
# Warmup Iteration  27: 1747933.116 ops/s
# Warmup Iteration  28: 1741041.845 ops/s
# Warmup Iteration  29: 1743286.432 ops/s
# Warmup Iteration  30: 1741021.294 ops/s
Iteration   1: 1747571.345 ops/s
Iteration   2: 1739037.115 ops/s
Iteration   3: 1747680.235 ops/s
Iteration   4: 1748031.064 ops/s
Iteration   5: 1746761.164 ops/s
Iteration   6: 1750125.518 ops/s
Iteration   7: 1748868.590 ops/s
Iteration   8: 1743103.832 ops/s
Iteration   9: 1744423.275 ops/s
Iteration  10: 1743791.911 ops/s
Iteration  11: 1747178.709 ops/s
Iteration  12: 1746490.001 ops/s
Iteration  13: 1746176.595 ops/s
Iteration  14: 1746388.531 ops/s
Iteration  15: 1747403.261 ops/s
Iteration  16: 1743329.212 ops/s
Iteration  17: 1742915.271 ops/s
Iteration  18: 1745937.080 ops/s
Iteration  19: 1745343.387 ops/s
Iteration  20: 1749296.796 ops/s
Iteration  21: 1748290.417 ops/s
Iteration  22: 1747370.051 ops/s
Iteration  23: 1744755.379 ops/s
Iteration  24: 1746435.589 ops/s
Iteration  25: 1747726.841 ops/s
Iteration  26: 1748214.714 ops/s
Iteration  27: 1744273.359 ops/s
Iteration  28: 1743308.653 ops/s
Iteration  29: 1743163.337 ops/s
Iteration  30: 1746429.703 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_flatCollectWith":
  1745994.031 ±(99.9%) 1600.463 ops/s [Average]
  (min, avg, max) = (1739037.115, 1745994.031, 1750125.518), stdev = 2395.498
  CI (99.9%): [1744393.568, 1747594.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  1745994.031 ± 1600.463  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1022254.455 ops/s
# Warmup Iteration   2: 2170136.263 ops/s
# Warmup Iteration   3: 2179982.997 ops/s
# Warmup Iteration   4: 1812764.554 ops/s
# Warmup Iteration   5: 2178911.869 ops/s
# Warmup Iteration   6: 2179470.359 ops/s
# Warmup Iteration   7: 2175537.796 ops/s
# Warmup Iteration   8: 2178942.440 ops/s
# Warmup Iteration   9: 2182231.746 ops/s
# Warmup Iteration  10: 2177842.213 ops/s
# Warmup Iteration  11: 2175363.951 ops/s
# Warmup Iteration  12: 2175374.183 ops/s
# Warmup Iteration  13: 2177397.027 ops/s
# Warmup Iteration  14: 2178034.013 ops/s
# Warmup Iteration  15: 2179667.480 ops/s
# Warmup Iteration  16: 2180556.618 ops/s
# Warmup Iteration  17: 2183346.510 ops/s
# Warmup Iteration  18: 2181439.532 ops/s
# Warmup Iteration  19: 2181198.381 ops/s
# Warmup Iteration  20: 2178412.857 ops/s
# Warmup Iteration  21: 2181752.773 ops/s
# Warmup Iteration  22: 2182673.957 ops/s
# Warmup Iteration  23: 2179142.145 ops/s
# Warmup Iteration  24: 2181636.534 ops/s
# Warmup Iteration  25: 2182272.143 ops/s
# Warmup Iteration  26: 2182716.932 ops/s
# Warmup Iteration  27: 2182772.276 ops/s
# Warmup Iteration  28: 2184985.111 ops/s
# Warmup Iteration  29: 2180264.488 ops/s
# Warmup Iteration  30: 2181190.621 ops/s
Iteration   1: 2183096.113 ops/s
Iteration   2: 2186589.070 ops/s
Iteration   3: 2180946.377 ops/s
Iteration   4: 2183618.437 ops/s
Iteration   5: 2185380.024 ops/s
Iteration   6: 2181775.469 ops/s
Iteration   7: 2184565.237 ops/s
Iteration   8: 2185113.470 ops/s
Iteration   9: 2186279.835 ops/s
Iteration  10: 2180859.216 ops/s
Iteration  11: 2182091.490 ops/s
Iteration  12: 2183666.739 ops/s
Iteration  13: 2185205.897 ops/s
Iteration  14: 2180820.734 ops/s
Iteration  15: 2186821.009 ops/s
Iteration  16: 2179805.941 ops/s
Iteration  17: 2184139.599 ops/s
Iteration  18: 2179867.375 ops/s
Iteration  19: 2186298.687 ops/s
Iteration  20: 2182516.167 ops/s
Iteration  21: 2176856.025 ops/s
Iteration  22: 2179901.927 ops/s
Iteration  23: 2181104.317 ops/s
Iteration  24: 2180186.402 ops/s
Iteration  25: 2185361.469 ops/s
Iteration  26: 2184642.194 ops/s
Iteration  27: 2178336.139 ops/s
Iteration  28: 2182406.018 ops/s
Iteration  29: 2182093.415 ops/s
Iteration  30: 2178623.245 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_flatCollectWithTarget":
  2182632.268 ±(99.9%) 1797.800 ops/s [Average]
  (min, avg, max) = (2176856.025, 2182632.268, 2186821.009), stdev = 2690.862
  CI (99.9%): [2180834.468, 2184430.068] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  2182632.268 ± 1797.800  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6272818.596 ops/s
# Warmup Iteration   2: 10691717.583 ops/s
# Warmup Iteration   3: 11695334.736 ops/s
# Warmup Iteration   4: 11749445.796 ops/s
# Warmup Iteration   5: 9879631.970 ops/s
# Warmup Iteration   6: 11774846.482 ops/s
# Warmup Iteration   7: 11782920.688 ops/s
# Warmup Iteration   8: 11775627.513 ops/s
# Warmup Iteration   9: 11774227.339 ops/s
# Warmup Iteration  10: 11783532.511 ops/s
# Warmup Iteration  11: 11758771.561 ops/s
# Warmup Iteration  12: 11781333.313 ops/s
# Warmup Iteration  13: 11779328.897 ops/s
# Warmup Iteration  14: 11768790.112 ops/s
# Warmup Iteration  15: 11781895.541 ops/s
# Warmup Iteration  16: 11765412.840 ops/s
# Warmup Iteration  17: 11764104.416 ops/s
# Warmup Iteration  18: 11774341.299 ops/s
# Warmup Iteration  19: 11780978.783 ops/s
# Warmup Iteration  20: 11794511.682 ops/s
# Warmup Iteration  21: 11774712.144 ops/s
# Warmup Iteration  22: 11777864.936 ops/s
# Warmup Iteration  23: 11786105.553 ops/s
# Warmup Iteration  24: 11765631.024 ops/s
# Warmup Iteration  25: 11768184.673 ops/s
# Warmup Iteration  26: 11781359.870 ops/s
# Warmup Iteration  27: 11774740.330 ops/s
# Warmup Iteration  28: 11777035.716 ops/s
# Warmup Iteration  29: 11793134.024 ops/s
# Warmup Iteration  30: 11778015.888 ops/s
Iteration   1: 11794069.575 ops/s
Iteration   2: 11762897.896 ops/s
Iteration   3: 11755049.626 ops/s
Iteration   4: 11784453.940 ops/s
Iteration   5: 11774594.537 ops/s
Iteration   6: 11769248.395 ops/s
Iteration   7: 11766195.216 ops/s
Iteration   8: 11774860.161 ops/s
Iteration   9: 11768623.603 ops/s
Iteration  10: 11794802.445 ops/s
Iteration  11: 11761016.787 ops/s
Iteration  12: 11791817.133 ops/s
Iteration  13: 11785479.060 ops/s
Iteration  14: 11765458.354 ops/s
Iteration  15: 11781940.792 ops/s
Iteration  16: 11772211.593 ops/s
Iteration  17: 11775929.930 ops/s
Iteration  18: 11769044.293 ops/s
Iteration  19: 11747386.555 ops/s
Iteration  20: 11760684.798 ops/s
Iteration  21: 11793150.463 ops/s
Iteration  22: 11503873.855 ops/s
Iteration  23: 11742932.062 ops/s
Iteration  24: 11749308.783 ops/s
Iteration  25: 11723761.282 ops/s
Iteration  26: 11752569.087 ops/s
Iteration  27: 11738891.373 ops/s
Iteration  28: 11760084.980 ops/s
Iteration  29: 11713773.748 ops/s
Iteration  30: 11702845.010 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEach":
  11754565.178 ±(99.9%) 35066.787 ops/s [Average]
  (min, avg, max) = (11503873.855, 11754565.178, 11794802.445), stdev = 52486.320
  CI (99.9%): [11719498.391, 11789631.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_forEach  thrpt   30  11754565.178 ± 35066.787  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 289097.604 ops/s
# Warmup Iteration   2: 308906.550 ops/s
# Warmup Iteration   3: 363658.855 ops/s
# Warmup Iteration   4: 386832.965 ops/s
# Warmup Iteration   5: 387477.283 ops/s
# Warmup Iteration   6: 384745.920 ops/s
# Warmup Iteration   7: 387459.581 ops/s
# Warmup Iteration   8: 387511.049 ops/s
# Warmup Iteration   9: 387767.830 ops/s
# Warmup Iteration  10: 387468.628 ops/s
# Warmup Iteration  11: 387348.755 ops/s
# Warmup Iteration  12: 386550.132 ops/s
# Warmup Iteration  13: 387782.783 ops/s
# Warmup Iteration  14: 327512.278 ops/s
# Warmup Iteration  15: 387914.597 ops/s
# Warmup Iteration  16: 387136.929 ops/s
# Warmup Iteration  17: 406144.073 ops/s
# Warmup Iteration  18: 407250.662 ops/s
# Warmup Iteration  19: 405515.540 ops/s
# Warmup Iteration  20: 406752.320 ops/s
# Warmup Iteration  21: 406800.882 ops/s
# Warmup Iteration  22: 406527.506 ops/s
# Warmup Iteration  23: 406657.766 ops/s
# Warmup Iteration  24: 405117.575 ops/s
# Warmup Iteration  25: 407053.143 ops/s
# Warmup Iteration  26: 406561.703 ops/s
# Warmup Iteration  27: 406132.186 ops/s
# Warmup Iteration  28: 406548.685 ops/s
# Warmup Iteration  29: 406302.047 ops/s
# Warmup Iteration  30: 405798.609 ops/s
Iteration   1: 406468.805 ops/s
Iteration   2: 407171.911 ops/s
Iteration   3: 406600.148 ops/s
Iteration   4: 405083.785 ops/s
Iteration   5: 404530.279 ops/s
Iteration   6: 403308.897 ops/s
Iteration   7: 404995.401 ops/s
Iteration   8: 404971.770 ops/s
Iteration   9: 404069.863 ops/s
Iteration  10: 402966.641 ops/s
Iteration  11: 404364.297 ops/s
Iteration  12: 407048.370 ops/s
Iteration  13: 406922.427 ops/s
Iteration  14: 406614.950 ops/s
Iteration  15: 405552.102 ops/s
Iteration  16: 406442.449 ops/s
Iteration  17: 405324.946 ops/s
Iteration  18: 403963.223 ops/s
Iteration  19: 403757.782 ops/s
Iteration  20: 404276.946 ops/s
Iteration  21: 404434.130 ops/s
Iteration  22: 405051.401 ops/s
Iteration  23: 404017.982 ops/s
Iteration  24: 403788.941 ops/s
Iteration  25: 403666.478 ops/s
Iteration  26: 404273.354 ops/s
Iteration  27: 404482.436 ops/s
Iteration  28: 405170.139 ops/s
Iteration  29: 403287.920 ops/s
Iteration  30: 405340.703 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEachFromTo":
  404931.616 ±(99.9%) 807.119 ops/s [Average]
  (min, avg, max) = (402966.641, 404931.616, 407171.911), stdev = 1208.057
  CI (99.9%): [404124.497, 405738.735] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  404931.616 ± 807.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8477864.330 ops/s
# Warmup Iteration   2: 13161728.334 ops/s
# Warmup Iteration   3: 14700293.622 ops/s
# Warmup Iteration   4: 14762218.498 ops/s
# Warmup Iteration   5: 14705042.465 ops/s
# Warmup Iteration   6: 13365804.455 ops/s
# Warmup Iteration   7: 13866153.235 ops/s
# Warmup Iteration   8: 14783431.673 ops/s
# Warmup Iteration   9: 14722611.105 ops/s
# Warmup Iteration  10: 14771130.562 ops/s
# Warmup Iteration  11: 14792046.435 ops/s
# Warmup Iteration  12: 14771610.493 ops/s
# Warmup Iteration  13: 14701567.946 ops/s
# Warmup Iteration  14: 14741731.522 ops/s
# Warmup Iteration  15: 14797023.775 ops/s
# Warmup Iteration  16: 14760581.268 ops/s
# Warmup Iteration  17: 14794053.865 ops/s
# Warmup Iteration  18: 14781051.599 ops/s
# Warmup Iteration  19: 14764415.576 ops/s
# Warmup Iteration  20: 14780759.039 ops/s
# Warmup Iteration  21: 14790724.289 ops/s
# Warmup Iteration  22: 14775374.043 ops/s
# Warmup Iteration  23: 14750323.366 ops/s
# Warmup Iteration  24: 14703917.631 ops/s
# Warmup Iteration  25: 14750087.223 ops/s
# Warmup Iteration  26: 14757762.409 ops/s
# Warmup Iteration  27: 14752256.370 ops/s
# Warmup Iteration  28: 14763510.950 ops/s
# Warmup Iteration  29: 14727847.712 ops/s
# Warmup Iteration  30: 14771827.310 ops/s
Iteration   1: 14779190.680 ops/s
Iteration   2: 14823384.175 ops/s
Iteration   3: 14784608.139 ops/s
Iteration   4: 14704448.480 ops/s
Iteration   5: 14782714.727 ops/s
Iteration   6: 14769080.161 ops/s
Iteration   7: 14747245.766 ops/s
Iteration   8: 14786970.005 ops/s
Iteration   9: 14786166.927 ops/s
Iteration  10: 14791072.921 ops/s
Iteration  11: 14796149.462 ops/s
Iteration  12: 14858429.837 ops/s
Iteration  13: 14768609.800 ops/s
Iteration  14: 14795708.649 ops/s
Iteration  15: 14769913.958 ops/s
Iteration  16: 14733827.170 ops/s
Iteration  17: 14731334.904 ops/s
Iteration  18: 14802715.655 ops/s
Iteration  19: 14787620.457 ops/s
Iteration  20: 14789376.933 ops/s
Iteration  21: 14801690.756 ops/s
Iteration  22: 14779658.718 ops/s
Iteration  23: 14775779.890 ops/s
Iteration  24: 14803834.291 ops/s
Iteration  25: 14750733.315 ops/s
Iteration  26: 14776459.759 ops/s
Iteration  27: 14718838.952 ops/s
Iteration  28: 14795884.335 ops/s
Iteration  29: 14792110.139 ops/s
Iteration  30: 14797393.706 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEachWith":
  14779365.089 ±(99.9%) 20547.323 ops/s [Average]
  (min, avg, max) = (14704448.480, 14779365.089, 14858429.837), stdev = 30754.268
  CI (99.9%): [14758817.766, 14799912.411] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_forEachWith  thrpt   30  14779365.089 ± 20547.323  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5818983.832 ops/s
# Warmup Iteration   2: 9277178.835 ops/s
# Warmup Iteration   3: 10268873.019 ops/s
# Warmup Iteration   4: 10300720.040 ops/s
# Warmup Iteration   5: 10304811.529 ops/s
# Warmup Iteration   6: 8683031.042 ops/s
# Warmup Iteration   7: 10307608.048 ops/s
# Warmup Iteration   8: 10288320.363 ops/s
# Warmup Iteration   9: 10292862.655 ops/s
# Warmup Iteration  10: 10318967.274 ops/s
# Warmup Iteration  11: 10292353.387 ops/s
# Warmup Iteration  12: 10312029.964 ops/s
# Warmup Iteration  13: 10319013.643 ops/s
# Warmup Iteration  14: 10301833.186 ops/s
# Warmup Iteration  15: 10299234.566 ops/s
# Warmup Iteration  16: 10344517.734 ops/s
# Warmup Iteration  17: 10318531.672 ops/s
# Warmup Iteration  18: 10316892.861 ops/s
# Warmup Iteration  19: 10323322.454 ops/s
# Warmup Iteration  20: 10316110.424 ops/s
# Warmup Iteration  21: 10335623.173 ops/s
# Warmup Iteration  22: 10326106.187 ops/s
# Warmup Iteration  23: 10331721.981 ops/s
# Warmup Iteration  24: 10316849.234 ops/s
# Warmup Iteration  25: 10314941.049 ops/s
# Warmup Iteration  26: 10298867.760 ops/s
# Warmup Iteration  27: 10328589.484 ops/s
# Warmup Iteration  28: 10295100.082 ops/s
# Warmup Iteration  29: 10284873.479 ops/s
# Warmup Iteration  30: 10351185.351 ops/s
Iteration   1: 10314854.501 ops/s
Iteration   2: 10273472.497 ops/s
Iteration   3: 10287400.969 ops/s
Iteration   4: 10262106.881 ops/s
Iteration   5: 10233565.014 ops/s
Iteration   6: 10277177.574 ops/s
Iteration   7: 10307446.510 ops/s
Iteration   8: 10308913.162 ops/s
Iteration   9: 10268590.130 ops/s
Iteration  10: 10301189.679 ops/s
Iteration  11: 10340971.445 ops/s
Iteration  12: 10289319.440 ops/s
Iteration  13: 10330570.221 ops/s
Iteration  14: 10311669.644 ops/s
Iteration  15: 10318341.226 ops/s
Iteration  16: 10298683.507 ops/s
Iteration  17: 10316369.500 ops/s
Iteration  18: 10313410.634 ops/s
Iteration  19: 10336965.953 ops/s
Iteration  20: 10321558.742 ops/s
Iteration  21: 10315147.739 ops/s
Iteration  22: 10309761.512 ops/s
Iteration  23: 10306582.074 ops/s
Iteration  24: 10294875.442 ops/s
Iteration  25: 10316662.675 ops/s
Iteration  26: 10336622.903 ops/s
Iteration  27: 10309670.341 ops/s
Iteration  28: 10320168.530 ops/s
Iteration  29: 10316654.877 ops/s
Iteration  30: 10338414.411 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEachWithIndex":
  10305904.591 ±(99.9%) 16307.704 ops/s [Average]
  (min, avg, max) = (10233565.014, 10305904.591, 10340971.445), stdev = 24408.606
  CI (99.9%): [10289596.887, 10322212.295] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  10305904.591 ± 16307.704  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 282984.775 ops/s
# Warmup Iteration   2: 304203.145 ops/s
# Warmup Iteration   3: 362290.939 ops/s
# Warmup Iteration   4: 385851.413 ops/s
# Warmup Iteration   5: 386993.971 ops/s
# Warmup Iteration   6: 384700.943 ops/s
# Warmup Iteration   7: 386433.187 ops/s
# Warmup Iteration   8: 385105.422 ops/s
# Warmup Iteration   9: 386284.936 ops/s
# Warmup Iteration  10: 386115.797 ops/s
# Warmup Iteration  11: 388152.891 ops/s
# Warmup Iteration  12: 386538.409 ops/s
# Warmup Iteration  13: 378182.013 ops/s
# Warmup Iteration  14: 334676.717 ops/s
# Warmup Iteration  15: 386431.906 ops/s
# Warmup Iteration  16: 385918.867 ops/s
# Warmup Iteration  17: 400283.442 ops/s
# Warmup Iteration  18: 399427.471 ops/s
# Warmup Iteration  19: 400669.830 ops/s
# Warmup Iteration  20: 400708.412 ops/s
# Warmup Iteration  21: 400559.663 ops/s
# Warmup Iteration  22: 402472.502 ops/s
# Warmup Iteration  23: 401145.937 ops/s
# Warmup Iteration  24: 402659.087 ops/s
# Warmup Iteration  25: 400357.261 ops/s
# Warmup Iteration  26: 399976.491 ops/s
# Warmup Iteration  27: 400710.189 ops/s
# Warmup Iteration  28: 400713.766 ops/s
# Warmup Iteration  29: 401087.169 ops/s
# Warmup Iteration  30: 400311.014 ops/s
Iteration   1: 401134.384 ops/s
Iteration   2: 401025.505 ops/s
Iteration   3: 401164.737 ops/s
Iteration   4: 399837.466 ops/s
Iteration   5: 400572.032 ops/s
Iteration   6: 401418.984 ops/s
Iteration   7: 400850.797 ops/s
Iteration   8: 403129.508 ops/s
Iteration   9: 401802.285 ops/s
Iteration  10: 400956.510 ops/s
Iteration  11: 401552.766 ops/s
Iteration  12: 399124.295 ops/s
Iteration  13: 398824.603 ops/s
Iteration  14: 398219.037 ops/s
Iteration  15: 399448.259 ops/s
Iteration  16: 401618.085 ops/s
Iteration  17: 402346.569 ops/s
Iteration  18: 401885.222 ops/s
Iteration  19: 401295.181 ops/s
Iteration  20: 400952.210 ops/s
Iteration  21: 398023.923 ops/s
Iteration  22: 397944.404 ops/s
Iteration  23: 399642.909 ops/s
Iteration  24: 402427.332 ops/s
Iteration  25: 401077.470 ops/s
Iteration  26: 400776.936 ops/s
Iteration  27: 400743.826 ops/s
Iteration  28: 400162.526 ops/s
Iteration  29: 402300.505 ops/s
Iteration  30: 402026.462 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo":
  400742.824 ±(99.9%) 897.920 ops/s [Average]
  (min, avg, max) = (397944.404, 400742.824, 403129.508), stdev = 1343.964
  CI (99.9%): [399844.904, 401640.744] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score     Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo  thrpt   30  400742.824 ± 897.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21817244.574 ops/s
# Warmup Iteration   2: 43541961.158 ops/s
# Warmup Iteration   3: 35558577.830 ops/s
# Warmup Iteration   4: 30257409.198 ops/s
# Warmup Iteration   5: 35646673.168 ops/s
# Warmup Iteration   6: 35751634.871 ops/s
# Warmup Iteration   7: 35693405.691 ops/s
# Warmup Iteration   8: 35728987.072 ops/s
# Warmup Iteration   9: 35629197.578 ops/s
# Warmup Iteration  10: 35722356.662 ops/s
# Warmup Iteration  11: 35685042.015 ops/s
# Warmup Iteration  12: 35566987.699 ops/s
# Warmup Iteration  13: 35554772.890 ops/s
# Warmup Iteration  14: 35585663.064 ops/s
# Warmup Iteration  15: 35568758.258 ops/s
# Warmup Iteration  16: 35760777.502 ops/s
# Warmup Iteration  17: 35640646.067 ops/s
# Warmup Iteration  18: 35706892.453 ops/s
# Warmup Iteration  19: 35665056.928 ops/s
# Warmup Iteration  20: 35653731.293 ops/s
# Warmup Iteration  21: 35693824.898 ops/s
# Warmup Iteration  22: 35671518.717 ops/s
# Warmup Iteration  23: 35685356.893 ops/s
# Warmup Iteration  24: 35763949.684 ops/s
# Warmup Iteration  25: 35775061.430 ops/s
# Warmup Iteration  26: 35577202.224 ops/s
# Warmup Iteration  27: 35634310.428 ops/s
# Warmup Iteration  28: 35790086.734 ops/s
# Warmup Iteration  29: 35650819.855 ops/s
# Warmup Iteration  30: 35677152.962 ops/s
Iteration   1: 35702969.862 ops/s
Iteration   2: 35555466.643 ops/s
Iteration   3: 35615885.216 ops/s
Iteration   4: 35648655.858 ops/s
Iteration   5: 35705776.171 ops/s
Iteration   6: 35600725.224 ops/s
Iteration   7: 35589076.751 ops/s
Iteration   8: 35643965.360 ops/s
Iteration   9: 35735823.319 ops/s
Iteration  10: 35752798.684 ops/s
Iteration  11: 35773550.976 ops/s
Iteration  12: 35752309.523 ops/s
Iteration  13: 35756576.906 ops/s
Iteration  14: 35668534.274 ops/s
Iteration  15: 35698135.902 ops/s
Iteration  16: 35597833.478 ops/s
Iteration  17: 35473450.798 ops/s
Iteration  18: 35650718.012 ops/s
Iteration  19: 35629247.557 ops/s
Iteration  20: 35596893.151 ops/s
Iteration  21: 35633233.870 ops/s
Iteration  22: 35726869.657 ops/s
Iteration  23: 35638052.423 ops/s
Iteration  24: 35549881.534 ops/s
Iteration  25: 35839342.301 ops/s
Iteration  26: 35733301.496 ops/s
Iteration  27: 35708031.835 ops/s
Iteration  28: 35797060.329 ops/s
Iteration  29: 35574044.949 ops/s
Iteration  30: 35845484.335 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_forLoop":
  35673123.213 ±(99.9%) 59383.875 ops/s [Average]
  (min, avg, max) = (35473450.798, 35673123.213, 35845484.335), stdev = 88882.995
  CI (99.9%): [35613739.339, 35732507.088] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_forLoop  thrpt   30  35673123.213 ± 59383.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 370571.254 ops/s
# Warmup Iteration   2: 383425.024 ops/s
# Warmup Iteration   3: 461122.927 ops/s
# Warmup Iteration   4: 477650.400 ops/s
# Warmup Iteration   5: 477141.169 ops/s
# Warmup Iteration   6: 473399.065 ops/s
# Warmup Iteration   7: 477273.955 ops/s
# Warmup Iteration   8: 476119.509 ops/s
# Warmup Iteration   9: 476411.709 ops/s
# Warmup Iteration  10: 476761.472 ops/s
# Warmup Iteration  11: 475425.369 ops/s
# Warmup Iteration  12: 477318.912 ops/s
# Warmup Iteration  13: 424480.306 ops/s
# Warmup Iteration  14: 460141.731 ops/s
# Warmup Iteration  15: 476299.287 ops/s
# Warmup Iteration  16: 476220.644 ops/s
# Warmup Iteration  17: 505469.414 ops/s
# Warmup Iteration  18: 504259.495 ops/s
# Warmup Iteration  19: 504547.707 ops/s
# Warmup Iteration  20: 504195.590 ops/s
# Warmup Iteration  21: 505081.282 ops/s
# Warmup Iteration  22: 505567.019 ops/s
# Warmup Iteration  23: 503842.135 ops/s
# Warmup Iteration  24: 503928.867 ops/s
# Warmup Iteration  25: 505627.294 ops/s
# Warmup Iteration  26: 505170.806 ops/s
# Warmup Iteration  27: 505911.669 ops/s
# Warmup Iteration  28: 505330.617 ops/s
# Warmup Iteration  29: 504359.464 ops/s
# Warmup Iteration  30: 505575.442 ops/s
Iteration   1: 458603.768 ops/s
Iteration   2: 503937.526 ops/s
Iteration   3: 503959.423 ops/s
Iteration   4: 502435.146 ops/s
Iteration   5: 504778.829 ops/s
Iteration   6: 505083.380 ops/s
Iteration   7: 504434.499 ops/s
Iteration   8: 505670.403 ops/s
Iteration   9: 506161.647 ops/s
Iteration  10: 505509.360 ops/s
Iteration  11: 503759.532 ops/s
Iteration  12: 506044.253 ops/s
Iteration  13: 505909.751 ops/s
Iteration  14: 504348.740 ops/s
Iteration  15: 504278.519 ops/s
Iteration  16: 505468.759 ops/s
Iteration  17: 505067.473 ops/s
Iteration  18: 504840.475 ops/s
Iteration  19: 505659.605 ops/s
Iteration  20: 503413.952 ops/s
Iteration  21: 504754.321 ops/s
Iteration  22: 505203.275 ops/s
Iteration  23: 505062.191 ops/s
Iteration  24: 503662.456 ops/s
Iteration  25: 505194.127 ops/s
Iteration  26: 505000.254 ops/s
Iteration  27: 506413.422 ops/s
Iteration  28: 505430.364 ops/s
Iteration  29: 505889.479 ops/s
Iteration  30: 506916.504 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_get":
  503429.714 ±(99.9%) 5693.566 ops/s [Average]
  (min, avg, max) = (458603.768, 503429.714, 506916.504), stdev = 8521.862
  CI (99.9%): [497736.149, 509123.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_get  thrpt   30  503429.714 ± 5693.566  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35644328.497 ops/s
# Warmup Iteration   2: 67469432.860 ops/s
# Warmup Iteration   3: 59586106.897 ops/s
# Warmup Iteration   4: 69565295.846 ops/s
# Warmup Iteration   5: 69759277.163 ops/s
# Warmup Iteration   6: 69867442.631 ops/s
# Warmup Iteration   7: 69695833.431 ops/s
# Warmup Iteration   8: 69844686.206 ops/s
# Warmup Iteration   9: 69701459.684 ops/s
# Warmup Iteration  10: 69615808.780 ops/s
# Warmup Iteration  11: 69655567.560 ops/s
# Warmup Iteration  12: 68767245.058 ops/s
# Warmup Iteration  13: 69098275.686 ops/s
# Warmup Iteration  14: 69946154.921 ops/s
# Warmup Iteration  15: 70085143.150 ops/s
# Warmup Iteration  16: 69567933.340 ops/s
# Warmup Iteration  17: 67841060.922 ops/s
# Warmup Iteration  18: 67780233.226 ops/s
# Warmup Iteration  19: 68034452.465 ops/s
# Warmup Iteration  20: 67830792.410 ops/s
# Warmup Iteration  21: 67814561.365 ops/s
# Warmup Iteration  22: 68000377.081 ops/s
# Warmup Iteration  23: 67953724.834 ops/s
# Warmup Iteration  24: 67960481.353 ops/s
# Warmup Iteration  25: 68061069.533 ops/s
# Warmup Iteration  26: 68134820.990 ops/s
# Warmup Iteration  27: 67821745.553 ops/s
# Warmup Iteration  28: 68170298.395 ops/s
# Warmup Iteration  29: 68154598.279 ops/s
# Warmup Iteration  30: 67782352.536 ops/s
Iteration   1: 68188851.320 ops/s
Iteration   2: 68363068.118 ops/s
Iteration   3: 68185993.807 ops/s
Iteration   4: 67683356.839 ops/s
Iteration   5: 68289680.744 ops/s
Iteration   6: 67876242.370 ops/s
Iteration   7: 67910591.926 ops/s
Iteration   8: 68095984.240 ops/s
Iteration   9: 68006229.761 ops/s
Iteration  10: 68154564.684 ops/s
Iteration  11: 68004002.269 ops/s
Iteration  12: 68016385.955 ops/s
Iteration  13: 67874493.695 ops/s
Iteration  14: 68038376.186 ops/s
Iteration  15: 68158017.195 ops/s
Iteration  16: 67990726.287 ops/s
Iteration  17: 67973163.867 ops/s
Iteration  18: 67849044.543 ops/s
Iteration  19: 67959540.104 ops/s
Iteration  20: 67733714.809 ops/s
Iteration  21: 67771452.152 ops/s
Iteration  22: 67936801.220 ops/s
Iteration  23: 67828017.106 ops/s
Iteration  24: 67235775.088 ops/s
Iteration  25: 67789097.388 ops/s
Iteration  26: 67866408.439 ops/s
Iteration  27: 68120472.731 ops/s
Iteration  28: 67887045.489 ops/s
Iteration  29: 67656668.535 ops/s
Iteration  30: 67980294.724 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_getFirst":
  67947468.720 ±(99.9%) 145545.610 ops/s [Average]
  (min, avg, max) = (67235775.088, 67947468.720, 68363068.118), stdev = 217845.834
  CI (99.9%): [67801923.109, 68093014.330] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_getFirst  thrpt   30  67947468.720 ± 145545.610  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35091514.483 ops/s
# Warmup Iteration   2: 67174144.839 ops/s
# Warmup Iteration   3: 57789177.504 ops/s
# Warmup Iteration   4: 67643249.286 ops/s
# Warmup Iteration   5: 67605897.686 ops/s
# Warmup Iteration   6: 67663310.410 ops/s
# Warmup Iteration   7: 67651988.408 ops/s
# Warmup Iteration   8: 67472757.881 ops/s
# Warmup Iteration   9: 67442626.550 ops/s
# Warmup Iteration  10: 67669235.152 ops/s
# Warmup Iteration  11: 67484952.853 ops/s
# Warmup Iteration  12: 67525795.297 ops/s
# Warmup Iteration  13: 67557444.522 ops/s
# Warmup Iteration  14: 67415023.095 ops/s
# Warmup Iteration  15: 67518782.814 ops/s
# Warmup Iteration  16: 67642920.342 ops/s
# Warmup Iteration  17: 67576958.986 ops/s
# Warmup Iteration  18: 67371800.795 ops/s
# Warmup Iteration  19: 67525357.439 ops/s
# Warmup Iteration  20: 67746144.712 ops/s
# Warmup Iteration  21: 67623736.496 ops/s
# Warmup Iteration  22: 67762691.036 ops/s
# Warmup Iteration  23: 67600115.941 ops/s
# Warmup Iteration  24: 67757362.850 ops/s
# Warmup Iteration  25: 67761301.074 ops/s
# Warmup Iteration  26: 67768870.340 ops/s
# Warmup Iteration  27: 67683104.383 ops/s
# Warmup Iteration  28: 67305870.529 ops/s
# Warmup Iteration  29: 67321731.768 ops/s
# Warmup Iteration  30: 67694984.104 ops/s
Iteration   1: 67655357.540 ops/s
Iteration   2: 67327245.393 ops/s
Iteration   3: 67779087.835 ops/s
Iteration   4: 67524090.268 ops/s
Iteration   5: 67704345.675 ops/s
Iteration   6: 67675972.675 ops/s
Iteration   7: 67768496.694 ops/s
Iteration   8: 67549806.769 ops/s
Iteration   9: 67689983.281 ops/s
Iteration  10: 67757912.184 ops/s
Iteration  11: 67172582.698 ops/s
Iteration  12: 67611991.641 ops/s
Iteration  13: 67468696.965 ops/s
Iteration  14: 67677048.933 ops/s
Iteration  15: 67626533.108 ops/s
Iteration  16: 67720275.653 ops/s
Iteration  17: 67373833.231 ops/s
Iteration  18: 67679041.185 ops/s
Iteration  19: 67479743.567 ops/s
Iteration  20: 67304000.477 ops/s
Iteration  21: 67571769.275 ops/s
Iteration  22: 67600656.625 ops/s
Iteration  23: 67455552.017 ops/s
Iteration  24: 67375753.306 ops/s
Iteration  25: 67482277.721 ops/s
Iteration  26: 67593323.069 ops/s
Iteration  27: 67511614.611 ops/s
Iteration  28: 67525506.780 ops/s
Iteration  29: 67476036.485 ops/s
Iteration  30: 67517322.587 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_getLast":
  67555195.275 ±(99.9%) 99077.186 ops/s [Average]
  (min, avg, max) = (67172582.698, 67555195.275, 67779087.835), stdev = 148294.079
  CI (99.9%): [67456118.089, 67654272.461] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_getLast  thrpt   30  67555195.275 ± 99077.186  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 794563.224 ops/s
# Warmup Iteration   2: 827388.658 ops/s
# Warmup Iteration   3: 1066675.132 ops/s
# Warmup Iteration   4: 1067376.497 ops/s
# Warmup Iteration   5: 1064972.223 ops/s
# Warmup Iteration   6: 1068750.759 ops/s
# Warmup Iteration   7: 1073667.717 ops/s
# Warmup Iteration   8: 1068553.913 ops/s
# Warmup Iteration   9: 1074195.137 ops/s
# Warmup Iteration  10: 1065884.031 ops/s
# Warmup Iteration  11: 1014682.520 ops/s
# Warmup Iteration  12: 948879.790 ops/s
# Warmup Iteration  13: 1066555.654 ops/s
# Warmup Iteration  14: 1067478.188 ops/s
# Warmup Iteration  15: 1065064.592 ops/s
# Warmup Iteration  16: 1062257.363 ops/s
# Warmup Iteration  17: 1132357.718 ops/s
# Warmup Iteration  18: 1136003.989 ops/s
# Warmup Iteration  19: 1137835.733 ops/s
# Warmup Iteration  20: 1139794.120 ops/s
# Warmup Iteration  21: 1133689.080 ops/s
# Warmup Iteration  22: 1138788.402 ops/s
# Warmup Iteration  23: 1136848.463 ops/s
# Warmup Iteration  24: 1132668.315 ops/s
# Warmup Iteration  25: 1142009.776 ops/s
# Warmup Iteration  26: 1133950.070 ops/s
# Warmup Iteration  27: 1131707.191 ops/s
# Warmup Iteration  28: 1134246.861 ops/s
# Warmup Iteration  29: 1136314.828 ops/s
# Warmup Iteration  30: 1136557.976 ops/s
Iteration   1: 1133557.934 ops/s
Iteration   2: 1137918.751 ops/s
Iteration   3: 1137828.448 ops/s
Iteration   4: 1142412.073 ops/s
Iteration   5: 1141825.400 ops/s
Iteration   6: 1141203.866 ops/s
Iteration   7: 1141205.282 ops/s
Iteration   8: 1141911.021 ops/s
Iteration   9: 1137980.158 ops/s
Iteration  10: 1141757.446 ops/s
Iteration  11: 1140899.525 ops/s
Iteration  12: 1132254.813 ops/s
Iteration  13: 1133859.548 ops/s
Iteration  14: 1138024.205 ops/s
Iteration  15: 1140496.895 ops/s
Iteration  16: 1139973.648 ops/s
Iteration  17: 1141756.219 ops/s
Iteration  18: 1133670.253 ops/s
Iteration  19: 1138587.661 ops/s
Iteration  20: 1141663.353 ops/s
Iteration  21: 1141569.103 ops/s
Iteration  22: 1141326.744 ops/s
Iteration  23: 1135268.724 ops/s
Iteration  24: 1136610.326 ops/s
Iteration  25: 1141060.666 ops/s
Iteration  26: 1142725.957 ops/s
Iteration  27: 1138768.612 ops/s
Iteration  28: 1143011.625 ops/s
Iteration  29: 1140266.256 ops/s
Iteration  30: 1142553.192 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_getOnly":
  1139398.257 ±(99.9%) 2064.678 ops/s [Average]
  (min, avg, max) = (1132254.813, 1139398.257, 1143011.625), stdev = 3090.314
  CI (99.9%): [1137333.578, 1141462.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_getOnly  thrpt   30  1139398.257 ± 2064.678  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 759959.907 ops/s
# Warmup Iteration   2: 1524630.709 ops/s
# Warmup Iteration   3: 1676973.637 ops/s
# Warmup Iteration   4: 1689344.819 ops/s
# Warmup Iteration   5: 1388465.101 ops/s
# Warmup Iteration   6: 1692851.755 ops/s
# Warmup Iteration   7: 1683934.532 ops/s
# Warmup Iteration   8: 1687996.613 ops/s
# Warmup Iteration   9: 1691100.472 ops/s
# Warmup Iteration  10: 1691640.474 ops/s
# Warmup Iteration  11: 1690395.491 ops/s
# Warmup Iteration  12: 1693458.825 ops/s
# Warmup Iteration  13: 1691715.408 ops/s
# Warmup Iteration  14: 1684293.721 ops/s
# Warmup Iteration  15: 1687098.188 ops/s
# Warmup Iteration  16: 1682458.744 ops/s
# Warmup Iteration  17: 1690015.640 ops/s
# Warmup Iteration  18: 1693693.974 ops/s
# Warmup Iteration  19: 1689897.123 ops/s
# Warmup Iteration  20: 1686585.547 ops/s
# Warmup Iteration  21: 1696136.154 ops/s
# Warmup Iteration  22: 1689741.447 ops/s
# Warmup Iteration  23: 1689930.441 ops/s
# Warmup Iteration  24: 1690711.832 ops/s
# Warmup Iteration  25: 1693204.338 ops/s
# Warmup Iteration  26: 1695230.629 ops/s
# Warmup Iteration  27: 1691211.260 ops/s
# Warmup Iteration  28: 1694403.222 ops/s
# Warmup Iteration  29: 1696169.855 ops/s
# Warmup Iteration  30: 1694855.242 ops/s
Iteration   1: 1693859.937 ops/s
Iteration   2: 1696325.337 ops/s
Iteration   3: 1692938.953 ops/s
Iteration   4: 1687687.261 ops/s
Iteration   5: 1686243.698 ops/s
Iteration   6: 1697888.424 ops/s
Iteration   7: 1694455.949 ops/s
Iteration   8: 1692506.449 ops/s
Iteration   9: 1694726.362 ops/s
Iteration  10: 1696559.432 ops/s
Iteration  11: 1694280.582 ops/s
Iteration  12: 1694056.916 ops/s
Iteration  13: 1692734.497 ops/s
Iteration  14: 1688641.683 ops/s
Iteration  15: 1690117.739 ops/s
Iteration  16: 1698388.438 ops/s
Iteration  17: 1693620.731 ops/s
Iteration  18: 1692157.759 ops/s
Iteration  19: 1696088.099 ops/s
Iteration  20: 1692804.637 ops/s
Iteration  21: 1691208.680 ops/s
Iteration  22: 1695104.783 ops/s
Iteration  23: 1693473.288 ops/s
Iteration  24: 1695013.122 ops/s
Iteration  25: 1694506.567 ops/s
Iteration  26: 1696919.896 ops/s
Iteration  27: 1693928.159 ops/s
Iteration  28: 1696318.977 ops/s
Iteration  29: 1692427.907 ops/s
Iteration  30: 1692173.008 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_groupBy":
  1693571.909 ±(99.9%) 1881.730 ops/s [Average]
  (min, avg, max) = (1686243.698, 1693571.909, 1698388.438), stdev = 2816.484
  CI (99.9%): [1691690.180, 1695453.639] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_groupBy  thrpt   30  1693571.909 ± 1881.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 96421.848 ops/s
# Warmup Iteration   2: 139676.743 ops/s
# Warmup Iteration   3: 176370.980 ops/s
# Warmup Iteration   4: 174833.022 ops/s
# Warmup Iteration   5: 175953.361 ops/s
# Warmup Iteration   6: 175585.645 ops/s
# Warmup Iteration   7: 175934.323 ops/s
# Warmup Iteration   8: 144748.176 ops/s
# Warmup Iteration   9: 175511.390 ops/s
# Warmup Iteration  10: 176487.665 ops/s
# Warmup Iteration  11: 176240.633 ops/s
# Warmup Iteration  12: 176710.115 ops/s
# Warmup Iteration  13: 176338.011 ops/s
# Warmup Iteration  14: 176308.530 ops/s
# Warmup Iteration  15: 176630.683 ops/s
# Warmup Iteration  16: 176274.938 ops/s
# Warmup Iteration  17: 176825.767 ops/s
# Warmup Iteration  18: 176754.700 ops/s
# Warmup Iteration  19: 176922.475 ops/s
# Warmup Iteration  20: 176947.107 ops/s
# Warmup Iteration  21: 177079.618 ops/s
# Warmup Iteration  22: 176819.145 ops/s
# Warmup Iteration  23: 176922.204 ops/s
# Warmup Iteration  24: 176205.713 ops/s
# Warmup Iteration  25: 176725.026 ops/s
# Warmup Iteration  26: 176985.289 ops/s
# Warmup Iteration  27: 176650.453 ops/s
# Warmup Iteration  28: 176294.365 ops/s
# Warmup Iteration  29: 176329.615 ops/s
# Warmup Iteration  30: 175932.059 ops/s
Iteration   1: 175988.718 ops/s
Iteration   2: 176785.939 ops/s
Iteration   3: 177121.297 ops/s
Iteration   4: 177366.820 ops/s
Iteration   5: 176414.910 ops/s
Iteration   6: 175656.466 ops/s
Iteration   7: 176531.562 ops/s
Iteration   8: 177227.160 ops/s
Iteration   9: 176979.737 ops/s
Iteration  10: 176985.128 ops/s
Iteration  11: 176943.884 ops/s
Iteration  12: 176982.125 ops/s
Iteration  13: 177341.805 ops/s
Iteration  14: 177350.644 ops/s
Iteration  15: 176915.195 ops/s
Iteration  16: 177236.314 ops/s
Iteration  17: 176888.709 ops/s
Iteration  18: 177284.665 ops/s
Iteration  19: 176832.335 ops/s
Iteration  20: 176135.044 ops/s
Iteration  21: 177169.257 ops/s
Iteration  22: 176881.048 ops/s
Iteration  23: 176956.477 ops/s
Iteration  24: 176967.052 ops/s
Iteration  25: 176369.812 ops/s
Iteration  26: 177365.198 ops/s
Iteration  27: 176941.323 ops/s
Iteration  28: 177130.632 ops/s
Iteration  29: 176743.262 ops/s
Iteration  30: 177171.456 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_groupByEach":
  176888.799 ±(99.9%) 281.111 ops/s [Average]
  (min, avg, max) = (175656.466, 176888.799, 177366.820), stdev = 420.753
  CI (99.9%): [176607.688, 177169.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_groupByEach  thrpt   30  176888.799 ± 281.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12176666.908 ops/s
# Warmup Iteration   2: 20274640.545 ops/s
# Warmup Iteration   3: 21357842.291 ops/s
# Warmup Iteration   4: 21489997.884 ops/s
# Warmup Iteration   5: 21397990.705 ops/s
# Warmup Iteration   6: 18142894.165 ops/s
# Warmup Iteration   7: 21492770.033 ops/s
# Warmup Iteration   8: 21464274.187 ops/s
# Warmup Iteration   9: 21477703.714 ops/s
# Warmup Iteration  10: 21414893.464 ops/s
# Warmup Iteration  11: 21435142.326 ops/s
# Warmup Iteration  12: 21491095.624 ops/s
# Warmup Iteration  13: 21462035.009 ops/s
# Warmup Iteration  14: 21474946.832 ops/s
# Warmup Iteration  15: 21485987.132 ops/s
# Warmup Iteration  16: 21444661.240 ops/s
# Warmup Iteration  17: 21358093.856 ops/s
# Warmup Iteration  18: 21457710.648 ops/s
# Warmup Iteration  19: 21425981.183 ops/s
# Warmup Iteration  20: 21546075.235 ops/s
# Warmup Iteration  21: 21497921.783 ops/s
# Warmup Iteration  22: 21411040.999 ops/s
# Warmup Iteration  23: 21398880.703 ops/s
# Warmup Iteration  24: 21509120.710 ops/s
# Warmup Iteration  25: 21496474.947 ops/s
# Warmup Iteration  26: 21404394.304 ops/s
# Warmup Iteration  27: 21531136.879 ops/s
# Warmup Iteration  28: 21467170.812 ops/s
# Warmup Iteration  29: 21475670.544 ops/s
# Warmup Iteration  30: 21470245.739 ops/s
Iteration   1: 21506914.267 ops/s
Iteration   2: 21450795.623 ops/s
Iteration   3: 21396607.356 ops/s
Iteration   4: 21464362.308 ops/s
Iteration   5: 21344369.473 ops/s
Iteration   6: 21446228.455 ops/s
Iteration   7: 21474391.608 ops/s
Iteration   8: 21407588.970 ops/s
Iteration   9: 21566759.745 ops/s
Iteration  10: 21506137.553 ops/s
Iteration  11: 21461077.539 ops/s
Iteration  12: 21611698.365 ops/s
Iteration  13: 21396082.169 ops/s
Iteration  14: 21501438.706 ops/s
Iteration  15: 21537583.443 ops/s
Iteration  16: 21444800.397 ops/s
Iteration  17: 21480599.670 ops/s
Iteration  18: 21517685.217 ops/s
Iteration  19: 21440210.863 ops/s
Iteration  20: 21384723.323 ops/s
Iteration  21: 21357360.319 ops/s
Iteration  22: 21535108.250 ops/s
Iteration  23: 21563096.299 ops/s
Iteration  24: 21283855.628 ops/s
Iteration  25: 21468864.173 ops/s
Iteration  26: 21294900.956 ops/s
Iteration  27: 21175328.602 ops/s
Iteration  28: 21437031.378 ops/s
Iteration  29: 21458735.261 ops/s
Iteration  30: 21307129.147 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_indexOf":
  21440715.502 ±(99.9%) 63284.096 ops/s [Average]
  (min, avg, max) = (21175328.602, 21440715.502, 21611698.365), stdev = 94720.662
  CI (99.9%): [21377431.407, 21503999.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_indexOf  thrpt   30  21440715.502 ± 63284.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11839650.004 ops/s
# Warmup Iteration   2: 21263999.093 ops/s
# Warmup Iteration   3: 23151983.401 ops/s
# Warmup Iteration   4: 23303222.327 ops/s
# Warmup Iteration   5: 23394820.972 ops/s
# Warmup Iteration   6: 19803703.807 ops/s
# Warmup Iteration   7: 23419452.854 ops/s
# Warmup Iteration   8: 23443569.351 ops/s
# Warmup Iteration   9: 23459125.020 ops/s
# Warmup Iteration  10: 23445448.753 ops/s
# Warmup Iteration  11: 23398094.450 ops/s
# Warmup Iteration  12: 23489335.994 ops/s
# Warmup Iteration  13: 23468502.170 ops/s
# Warmup Iteration  14: 23491640.358 ops/s
# Warmup Iteration  15: 23482216.541 ops/s
# Warmup Iteration  16: 23447572.459 ops/s
# Warmup Iteration  17: 23443499.521 ops/s
# Warmup Iteration  18: 23490419.076 ops/s
# Warmup Iteration  19: 23379954.000 ops/s
# Warmup Iteration  20: 23408177.911 ops/s
# Warmup Iteration  21: 23376937.572 ops/s
# Warmup Iteration  22: 23346825.375 ops/s
# Warmup Iteration  23: 23419005.148 ops/s
# Warmup Iteration  24: 23322868.132 ops/s
# Warmup Iteration  25: 23402563.628 ops/s
# Warmup Iteration  26: 23445115.207 ops/s
# Warmup Iteration  27: 23421045.832 ops/s
# Warmup Iteration  28: 23380324.600 ops/s
# Warmup Iteration  29: 23443002.295 ops/s
# Warmup Iteration  30: 23369732.563 ops/s
Iteration   1: 23432861.303 ops/s
Iteration   2: 23345158.971 ops/s
Iteration   3: 23464437.686 ops/s
Iteration   4: 23359983.682 ops/s
Iteration   5: 23295370.226 ops/s
Iteration   6: 23470604.263 ops/s
Iteration   7: 23332513.285 ops/s
Iteration   8: 23386546.469 ops/s
Iteration   9: 23319096.769 ops/s
Iteration  10: 23433920.400 ops/s
Iteration  11: 23496797.562 ops/s
Iteration  12: 23281016.176 ops/s
Iteration  13: 23369347.526 ops/s
Iteration  14: 23402367.796 ops/s
Iteration  15: 23463822.239 ops/s
Iteration  16: 23353174.211 ops/s
Iteration  17: 23399016.461 ops/s
Iteration  18: 23514959.210 ops/s
Iteration  19: 23406080.836 ops/s
Iteration  20: 23468317.635 ops/s
Iteration  21: 23433211.653 ops/s
Iteration  22: 23430170.347 ops/s
Iteration  23: 23449681.258 ops/s
Iteration  24: 23483629.776 ops/s
Iteration  25: 23424981.935 ops/s
Iteration  26: 23353387.378 ops/s
Iteration  27: 23403707.946 ops/s
Iteration  28: 23467753.636 ops/s
Iteration  29: 23404524.114 ops/s
Iteration  30: 23449068.743 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectInto":
  23409850.316 ±(99.9%) 40251.059 ops/s [Average]
  (min, avg, max) = (23281016.176, 23409850.316, 23514959.210), stdev = 60245.895
  CI (99.9%): [23369599.257, 23450101.375] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_injectInto  thrpt   30  23409850.316 ± 40251.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8946870.466 ops/s
# Warmup Iteration   2: 16067084.744 ops/s
# Warmup Iteration   3: 17051898.840 ops/s
# Warmup Iteration   4: 17095650.618 ops/s
# Warmup Iteration   5: 14434574.402 ops/s
# Warmup Iteration   6: 17155795.088 ops/s
# Warmup Iteration   7: 17110763.704 ops/s
# Warmup Iteration   8: 17147372.882 ops/s
# Warmup Iteration   9: 17161460.341 ops/s
# Warmup Iteration  10: 17104837.470 ops/s
# Warmup Iteration  11: 17142475.999 ops/s
# Warmup Iteration  12: 17161077.574 ops/s
# Warmup Iteration  13: 17120500.908 ops/s
# Warmup Iteration  14: 17132300.359 ops/s
# Warmup Iteration  15: 17154178.331 ops/s
# Warmup Iteration  16: 17161529.516 ops/s
# Warmup Iteration  17: 17174015.285 ops/s
# Warmup Iteration  18: 17171877.326 ops/s
# Warmup Iteration  19: 17126498.343 ops/s
# Warmup Iteration  20: 17151369.763 ops/s
# Warmup Iteration  21: 17139796.785 ops/s
# Warmup Iteration  22: 17170413.668 ops/s
# Warmup Iteration  23: 17133880.662 ops/s
# Warmup Iteration  24: 17124802.600 ops/s
# Warmup Iteration  25: 17157080.998 ops/s
# Warmup Iteration  26: 17121667.864 ops/s
# Warmup Iteration  27: 17166245.614 ops/s
# Warmup Iteration  28: 17120019.962 ops/s
# Warmup Iteration  29: 17150435.019 ops/s
# Warmup Iteration  30: 17168673.993 ops/s
Iteration   1: 17116837.145 ops/s
Iteration   2: 17124939.099 ops/s
Iteration   3: 17169073.085 ops/s
Iteration   4: 17141056.942 ops/s
Iteration   5: 17170498.545 ops/s
Iteration   6: 17176858.948 ops/s
Iteration   7: 17094708.894 ops/s
Iteration   8: 17023306.956 ops/s
Iteration   9: 17073490.379 ops/s
Iteration  10: 17117050.645 ops/s
Iteration  11: 17103631.745 ops/s
Iteration  12: 17138933.441 ops/s
Iteration  13: 17133319.791 ops/s
Iteration  14: 17143877.825 ops/s
Iteration  15: 17170395.390 ops/s
Iteration  16: 17155936.481 ops/s
Iteration  17: 17103524.983 ops/s
Iteration  18: 17127850.681 ops/s
Iteration  19: 17076249.563 ops/s
Iteration  20: 17164989.749 ops/s
Iteration  21: 17132257.394 ops/s
Iteration  22: 17113415.785 ops/s
Iteration  23: 17143263.085 ops/s
Iteration  24: 17151044.913 ops/s
Iteration  25: 17141117.431 ops/s
Iteration  26: 17104184.495 ops/s
Iteration  27: 17113993.320 ops/s
Iteration  28: 17089870.149 ops/s
Iteration  29: 17078227.579 ops/s
Iteration  30: 17045518.257 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoDouble":
  17121314.090 ±(99.9%) 25086.247 ops/s [Average]
  (min, avg, max) = (17023306.956, 17121314.090, 17176858.948), stdev = 37547.917
  CI (99.9%): [17096227.843, 17146400.337] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  17121314.090 ± 25086.247  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8838734.309 ops/s
# Warmup Iteration   2: 16351040.457 ops/s
# Warmup Iteration   3: 17293118.852 ops/s
# Warmup Iteration   4: 17453436.868 ops/s
# Warmup Iteration   5: 14644837.312 ops/s
# Warmup Iteration   6: 17404661.706 ops/s
# Warmup Iteration   7: 17433935.792 ops/s
# Warmup Iteration   8: 17430086.007 ops/s
# Warmup Iteration   9: 17448932.968 ops/s
# Warmup Iteration  10: 17425467.582 ops/s
# Warmup Iteration  11: 17432212.697 ops/s
# Warmup Iteration  12: 17417284.383 ops/s
# Warmup Iteration  13: 17354384.003 ops/s
# Warmup Iteration  14: 17424549.793 ops/s
# Warmup Iteration  15: 17349336.126 ops/s
# Warmup Iteration  16: 17437585.286 ops/s
# Warmup Iteration  17: 17379686.593 ops/s
# Warmup Iteration  18: 17401580.183 ops/s
# Warmup Iteration  19: 17371638.892 ops/s
# Warmup Iteration  20: 17401043.959 ops/s
# Warmup Iteration  21: 17404013.465 ops/s
# Warmup Iteration  22: 17399918.755 ops/s
# Warmup Iteration  23: 17336605.385 ops/s
# Warmup Iteration  24: 17309681.847 ops/s
# Warmup Iteration  25: 17339966.053 ops/s
# Warmup Iteration  26: 17382083.878 ops/s
# Warmup Iteration  27: 17447599.171 ops/s
# Warmup Iteration  28: 17435159.640 ops/s
# Warmup Iteration  29: 17415967.243 ops/s
# Warmup Iteration  30: 17437175.225 ops/s
Iteration   1: 17481627.232 ops/s
Iteration   2: 17400381.756 ops/s
Iteration   3: 17466358.626 ops/s
Iteration   4: 17453520.822 ops/s
Iteration   5: 17457724.363 ops/s
Iteration   6: 17440320.358 ops/s
Iteration   7: 17426965.990 ops/s
Iteration   8: 17465693.080 ops/s
Iteration   9: 17432356.974 ops/s
Iteration  10: 17400206.143 ops/s
Iteration  11: 17390450.265 ops/s
Iteration  12: 17413324.146 ops/s
Iteration  13: 17411654.119 ops/s
Iteration  14: 17406789.171 ops/s
Iteration  15: 17468239.436 ops/s
Iteration  16: 17434442.609 ops/s
Iteration  17: 17382066.897 ops/s
Iteration  18: 17402536.358 ops/s
Iteration  19: 17426936.737 ops/s
Iteration  20: 17373298.221 ops/s
Iteration  21: 17433878.595 ops/s
Iteration  22: 17433560.137 ops/s
Iteration  23: 17431172.629 ops/s
Iteration  24: 17403099.698 ops/s
Iteration  25: 17458773.870 ops/s
Iteration  26: 17403717.625 ops/s
Iteration  27: 17391549.152 ops/s
Iteration  28: 17422515.734 ops/s
Iteration  29: 17425984.574 ops/s
Iteration  30: 17457064.000 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoFloat":
  17426540.311 ±(99.9%) 18872.900 ops/s [Average]
  (min, avg, max) = (17373298.221, 17426540.311, 17481627.232), stdev = 28248.071
  CI (99.9%): [17407667.410, 17445413.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  17426540.311 ± 18872.900  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9150708.073 ops/s
# Warmup Iteration   2: 17480812.475 ops/s
# Warmup Iteration   3: 18028258.128 ops/s
# Warmup Iteration   4: 18014092.675 ops/s
# Warmup Iteration   5: 14823321.352 ops/s
# Warmup Iteration   6: 17201922.541 ops/s
# Warmup Iteration   7: 17178316.975 ops/s
# Warmup Iteration   8: 17262174.931 ops/s
# Warmup Iteration   9: 17192834.230 ops/s
# Warmup Iteration  10: 17251291.849 ops/s
# Warmup Iteration  11: 17215151.264 ops/s
# Warmup Iteration  12: 17219764.612 ops/s
# Warmup Iteration  13: 17143371.904 ops/s
# Warmup Iteration  14: 17190586.465 ops/s
# Warmup Iteration  15: 17117508.595 ops/s
# Warmup Iteration  16: 17156926.886 ops/s
# Warmup Iteration  17: 18087186.864 ops/s
# Warmup Iteration  18: 18081493.002 ops/s
# Warmup Iteration  19: 18102270.835 ops/s
# Warmup Iteration  20: 18070490.856 ops/s
# Warmup Iteration  21: 17999107.217 ops/s
# Warmup Iteration  22: 17981000.512 ops/s
# Warmup Iteration  23: 18059663.240 ops/s
# Warmup Iteration  24: 18055584.954 ops/s
# Warmup Iteration  25: 18013295.118 ops/s
# Warmup Iteration  26: 18064402.510 ops/s
# Warmup Iteration  27: 18098283.794 ops/s
# Warmup Iteration  28: 18087349.510 ops/s
# Warmup Iteration  29: 18102221.568 ops/s
# Warmup Iteration  30: 18090033.548 ops/s
Iteration   1: 18133233.463 ops/s
Iteration   2: 18069604.864 ops/s
Iteration   3: 18081062.147 ops/s
Iteration   4: 18093495.905 ops/s
Iteration   5: 18090735.694 ops/s
Iteration   6: 18082849.401 ops/s
Iteration   7: 18063629.070 ops/s
Iteration   8: 18102997.613 ops/s
Iteration   9: 18097376.399 ops/s
Iteration  10: 18086590.514 ops/s
Iteration  11: 18050805.865 ops/s
Iteration  12: 18073573.144 ops/s
Iteration  13: 18031680.717 ops/s
Iteration  14: 18046373.252 ops/s
Iteration  15: 18066399.313 ops/s
Iteration  16: 18010516.972 ops/s
Iteration  17: 18104416.407 ops/s
Iteration  18: 18012648.879 ops/s
Iteration  19: 18010208.577 ops/s
Iteration  20: 18069606.298 ops/s
Iteration  21: 18080873.050 ops/s
Iteration  22: 18135053.629 ops/s
Iteration  23: 18041769.595 ops/s
Iteration  24: 18046087.771 ops/s
Iteration  25: 18069729.805 ops/s
Iteration  26: 17914311.362 ops/s
Iteration  27: 18067969.621 ops/s
Iteration  28: 18109537.274 ops/s
Iteration  29: 18076342.938 ops/s
Iteration  30: 18092579.114 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoInt":
  18067068.622 ±(99.9%) 28628.652 ops/s [Average]
  (min, avg, max) = (17914311.362, 18067068.622, 18135053.629), stdev = 42850.021
  CI (99.9%): [18038439.970, 18095697.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  18067068.622 ± 28628.652  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8968583.672 ops/s
# Warmup Iteration   2: 16544993.756 ops/s
# Warmup Iteration   3: 17662063.645 ops/s
# Warmup Iteration   4: 17770737.365 ops/s
# Warmup Iteration   5: 14979164.593 ops/s
# Warmup Iteration   6: 17692994.276 ops/s
# Warmup Iteration   7: 17721945.508 ops/s
# Warmup Iteration   8: 17738035.813 ops/s
# Warmup Iteration   9: 17689449.179 ops/s
# Warmup Iteration  10: 17798136.604 ops/s
# Warmup Iteration  11: 17790636.122 ops/s
# Warmup Iteration  12: 17729039.830 ops/s
# Warmup Iteration  13: 17746396.031 ops/s
# Warmup Iteration  14: 17770301.212 ops/s
# Warmup Iteration  15: 17766932.893 ops/s
# Warmup Iteration  16: 17807525.753 ops/s
# Warmup Iteration  17: 17817242.118 ops/s
# Warmup Iteration  18: 17670314.688 ops/s
# Warmup Iteration  19: 17829377.375 ops/s
# Warmup Iteration  20: 17780830.122 ops/s
# Warmup Iteration  21: 17616549.441 ops/s
# Warmup Iteration  22: 17789592.367 ops/s
# Warmup Iteration  23: 17793913.856 ops/s
# Warmup Iteration  24: 17702332.250 ops/s
# Warmup Iteration  25: 17670820.048 ops/s
# Warmup Iteration  26: 17748045.751 ops/s
# Warmup Iteration  27: 17722139.556 ops/s
# Warmup Iteration  28: 17158744.967 ops/s
# Warmup Iteration  29: 17806690.031 ops/s
# Warmup Iteration  30: 17762864.692 ops/s
Iteration   1: 17835573.532 ops/s
Iteration   2: 17702398.746 ops/s
Iteration   3: 17812508.705 ops/s
Iteration   4: 17722596.722 ops/s
Iteration   5: 17833006.230 ops/s
Iteration   6: 17815585.255 ops/s
Iteration   7: 17798839.710 ops/s
Iteration   8: 17799604.275 ops/s
Iteration   9: 17786783.030 ops/s
Iteration  10: 17809549.751 ops/s
Iteration  11: 17807485.281 ops/s
Iteration  12: 17834833.093 ops/s
Iteration  13: 17793167.773 ops/s
Iteration  14: 17833722.381 ops/s
Iteration  15: 17796027.103 ops/s
Iteration  16: 17812938.013 ops/s
Iteration  17: 17805509.376 ops/s
Iteration  18: 17762699.534 ops/s
Iteration  19: 17698958.356 ops/s
Iteration  20: 17686548.455 ops/s
Iteration  21: 17765780.343 ops/s
Iteration  22: 17767196.732 ops/s
Iteration  23: 17785821.401 ops/s
Iteration  24: 17804891.751 ops/s
Iteration  25: 17764238.257 ops/s
Iteration  26: 17700585.906 ops/s
Iteration  27: 17553083.477 ops/s
Iteration  28: 17808630.420 ops/s
Iteration  29: 17704827.947 ops/s
Iteration  30: 17733440.389 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoLong":
  17771227.732 ±(99.9%) 40961.633 ops/s [Average]
  (min, avg, max) = (17553083.477, 17771227.732, 17835573.532), stdev = 61309.449
  CI (99.9%): [17730266.098, 17812189.365] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  17771227.732 ± 40961.633  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36012435.171 ops/s
# Warmup Iteration   2: 68376943.278 ops/s
# Warmup Iteration   3: 60924642.983 ops/s
# Warmup Iteration   4: 70578950.775 ops/s
# Warmup Iteration   5: 70521641.528 ops/s
# Warmup Iteration   6: 71449219.170 ops/s
# Warmup Iteration   7: 70813322.142 ops/s
# Warmup Iteration   8: 70686104.087 ops/s
# Warmup Iteration   9: 71341952.392 ops/s
# Warmup Iteration  10: 71138571.658 ops/s
# Warmup Iteration  11: 71321747.160 ops/s
# Warmup Iteration  12: 71458435.152 ops/s
# Warmup Iteration  13: 71337817.373 ops/s
# Warmup Iteration  14: 71422695.985 ops/s
# Warmup Iteration  15: 71492781.629 ops/s
# Warmup Iteration  16: 71248810.987 ops/s
# Warmup Iteration  17: 71367248.210 ops/s
# Warmup Iteration  18: 70467871.223 ops/s
# Warmup Iteration  19: 71441593.121 ops/s
# Warmup Iteration  20: 70688962.843 ops/s
# Warmup Iteration  21: 70316099.301 ops/s
# Warmup Iteration  22: 70844123.164 ops/s
# Warmup Iteration  23: 71147318.979 ops/s
# Warmup Iteration  24: 71080707.311 ops/s
# Warmup Iteration  25: 71417951.474 ops/s
# Warmup Iteration  26: 71260897.199 ops/s
# Warmup Iteration  27: 71369044.624 ops/s
# Warmup Iteration  28: 71540785.097 ops/s
# Warmup Iteration  29: 71433702.166 ops/s
# Warmup Iteration  30: 71335528.253 ops/s
Iteration   1: 71596704.890 ops/s
Iteration   2: 71526341.753 ops/s
Iteration   3: 71427367.186 ops/s
Iteration   4: 70925480.420 ops/s
Iteration   5: 70537024.273 ops/s
Iteration   6: 70991514.954 ops/s
Iteration   7: 70741270.194 ops/s
Iteration   8: 70986117.578 ops/s
Iteration   9: 71267416.590 ops/s
Iteration  10: 71335992.296 ops/s
Iteration  11: 71514074.948 ops/s
Iteration  12: 71284962.305 ops/s
Iteration  13: 70305650.186 ops/s
Iteration  14: 71437757.259 ops/s
Iteration  15: 71451865.211 ops/s
Iteration  16: 71500578.476 ops/s
Iteration  17: 71591661.048 ops/s
Iteration  18: 71062786.817 ops/s
Iteration  19: 71076725.850 ops/s
Iteration  20: 71212269.302 ops/s
Iteration  21: 71004405.783 ops/s
Iteration  22: 70828578.664 ops/s
Iteration  23: 70424447.419 ops/s
Iteration  24: 71570661.557 ops/s
Iteration  25: 70947430.123 ops/s
Iteration  26: 71344347.071 ops/s
Iteration  27: 71302403.483 ops/s
Iteration  28: 71333886.521 ops/s
Iteration  29: 71440968.614 ops/s
Iteration  30: 71150733.964 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_isEmpty":
  71170714.158 ±(99.9%) 232755.670 ops/s [Average]
  (min, avg, max) = (70305650.186, 71170714.158, 71596704.890), stdev = 348377.756
  CI (99.9%): [70937958.488, 71403469.828] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_isEmpty  thrpt   30  71170714.158 ± 232755.670  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 375206.520 ops/s
# Warmup Iteration   2: 390467.005 ops/s
# Warmup Iteration   3: 462848.135 ops/s
# Warmup Iteration   4: 490330.197 ops/s
# Warmup Iteration   5: 492030.053 ops/s
# Warmup Iteration   6: 489791.410 ops/s
# Warmup Iteration   7: 491825.318 ops/s
# Warmup Iteration   8: 491841.231 ops/s
# Warmup Iteration   9: 489924.658 ops/s
# Warmup Iteration  10: 489289.905 ops/s
# Warmup Iteration  11: 491958.267 ops/s
# Warmup Iteration  12: 490048.471 ops/s
# Warmup Iteration  13: 490463.536 ops/s
# Warmup Iteration  14: 416877.175 ops/s
# Warmup Iteration  15: 490957.210 ops/s
# Warmup Iteration  16: 490763.420 ops/s
# Warmup Iteration  17: 517612.122 ops/s
# Warmup Iteration  18: 516940.788 ops/s
# Warmup Iteration  19: 516865.416 ops/s
# Warmup Iteration  20: 517321.722 ops/s
# Warmup Iteration  21: 517373.654 ops/s
# Warmup Iteration  22: 517289.651 ops/s
# Warmup Iteration  23: 516406.080 ops/s
# Warmup Iteration  24: 517447.680 ops/s
# Warmup Iteration  25: 517589.448 ops/s
# Warmup Iteration  26: 517207.009 ops/s
# Warmup Iteration  27: 517952.855 ops/s
# Warmup Iteration  28: 517391.885 ops/s
# Warmup Iteration  29: 517963.947 ops/s
# Warmup Iteration  30: 515883.271 ops/s
Iteration   1: 517918.900 ops/s
Iteration   2: 510861.297 ops/s
Iteration   3: 518094.172 ops/s
Iteration   4: 517859.983 ops/s
Iteration   5: 515047.465 ops/s
Iteration   6: 515632.928 ops/s
Iteration   7: 515865.794 ops/s
Iteration   8: 515960.593 ops/s
Iteration   9: 515104.505 ops/s
Iteration  10: 515477.916 ops/s
Iteration  11: 515588.152 ops/s
Iteration  12: 515167.849 ops/s
Iteration  13: 514700.221 ops/s
Iteration  14: 515682.860 ops/s
Iteration  15: 517540.429 ops/s
Iteration  16: 517732.270 ops/s
Iteration  17: 517727.227 ops/s
Iteration  18: 517464.995 ops/s
Iteration  19: 517170.300 ops/s
Iteration  20: 515961.900 ops/s
Iteration  21: 516991.442 ops/s
Iteration  22: 516983.359 ops/s
Iteration  23: 517138.684 ops/s
Iteration  24: 516591.561 ops/s
Iteration  25: 516144.304 ops/s
Iteration  26: 514701.703 ops/s
Iteration  27: 514107.136 ops/s
Iteration  28: 516275.680 ops/s
Iteration  29: 514851.282 ops/s
Iteration  30: 516423.924 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_iterator":
  516092.294 ±(99.9%) 998.720 ops/s [Average]
  (min, avg, max) = (510861.297, 516092.294, 518094.172), stdev = 1494.837
  CI (99.9%): [515093.575, 517091.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_iterator  thrpt   30  516092.294 ± 998.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 638256.198 ops/s
# Warmup Iteration   2: 773987.913 ops/s
# Warmup Iteration   3: 950710.315 ops/s
# Warmup Iteration   4: 946612.705 ops/s
# Warmup Iteration   5: 955855.966 ops/s
# Warmup Iteration   6: 954015.632 ops/s
# Warmup Iteration   7: 955011.475 ops/s
# Warmup Iteration   8: 952710.671 ops/s
# Warmup Iteration   9: 798630.306 ops/s
# Warmup Iteration  10: 948878.834 ops/s
# Warmup Iteration  11: 950672.544 ops/s
# Warmup Iteration  12: 953479.563 ops/s
# Warmup Iteration  13: 954986.004 ops/s
# Warmup Iteration  14: 955108.392 ops/s
# Warmup Iteration  15: 953909.038 ops/s
# Warmup Iteration  16: 954356.963 ops/s
# Warmup Iteration  17: 1000209.708 ops/s
# Warmup Iteration  18: 998669.696 ops/s
# Warmup Iteration  19: 996295.534 ops/s
# Warmup Iteration  20: 998718.529 ops/s
# Warmup Iteration  21: 999609.222 ops/s
# Warmup Iteration  22: 1000061.031 ops/s
# Warmup Iteration  23: 1000600.983 ops/s
# Warmup Iteration  24: 999227.209 ops/s
# Warmup Iteration  25: 996891.598 ops/s
# Warmup Iteration  26: 997390.970 ops/s
# Warmup Iteration  27: 998690.185 ops/s
# Warmup Iteration  28: 995717.070 ops/s
# Warmup Iteration  29: 998084.507 ops/s
# Warmup Iteration  30: 998961.952 ops/s
Iteration   1: 994901.766 ops/s
Iteration   2: 996917.026 ops/s
Iteration   3: 998900.687 ops/s
Iteration   4: 998142.350 ops/s
Iteration   5: 999786.617 ops/s
Iteration   6: 995742.909 ops/s
Iteration   7: 999963.301 ops/s
Iteration   8: 998957.958 ops/s
Iteration   9: 995652.740 ops/s
Iteration  10: 996365.750 ops/s
Iteration  11: 998759.869 ops/s
Iteration  12: 996240.491 ops/s
Iteration  13: 1000492.469 ops/s
Iteration  14: 998556.254 ops/s
Iteration  15: 994815.417 ops/s
Iteration  16: 1000684.258 ops/s
Iteration  17: 996064.665 ops/s
Iteration  18: 996133.966 ops/s
Iteration  19: 997819.504 ops/s
Iteration  20: 997060.489 ops/s
Iteration  21: 998613.801 ops/s
Iteration  22: 998505.706 ops/s
Iteration  23: 998671.422 ops/s
Iteration  24: 1000560.066 ops/s
Iteration  25: 998855.884 ops/s
Iteration  26: 996972.179 ops/s
Iteration  27: 1000051.894 ops/s
Iteration  28: 1000839.245 ops/s
Iteration  29: 1000779.092 ops/s
Iteration  30: 1001375.693 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_iteratorRemove":
  998239.449 ±(99.9%) 1287.077 ops/s [Average]
  (min, avg, max) = (994815.417, 998239.449, 1001375.693), stdev = 1926.437
  CI (99.9%): [996952.372, 999526.526] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_iteratorRemove  thrpt   30  998239.449 ± 1287.077  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4161162.931 ops/s
# Warmup Iteration   2: 8556691.661 ops/s
# Warmup Iteration   3: 8535103.458 ops/s
# Warmup Iteration   4: 7194892.894 ops/s
# Warmup Iteration   5: 8541391.845 ops/s
# Warmup Iteration   6: 8541098.424 ops/s
# Warmup Iteration   7: 8519420.802 ops/s
# Warmup Iteration   8: 8538667.292 ops/s
# Warmup Iteration   9: 8524555.621 ops/s
# Warmup Iteration  10: 8533710.347 ops/s
# Warmup Iteration  11: 8534061.816 ops/s
# Warmup Iteration  12: 8527967.365 ops/s
# Warmup Iteration  13: 8532462.249 ops/s
# Warmup Iteration  14: 8538230.665 ops/s
# Warmup Iteration  15: 8516310.241 ops/s
# Warmup Iteration  16: 8534442.842 ops/s
# Warmup Iteration  17: 8515965.670 ops/s
# Warmup Iteration  18: 8513637.478 ops/s
# Warmup Iteration  19: 8509293.680 ops/s
# Warmup Iteration  20: 8516790.615 ops/s
# Warmup Iteration  21: 8531025.689 ops/s
# Warmup Iteration  22: 8527578.397 ops/s
# Warmup Iteration  23: 8536244.347 ops/s
# Warmup Iteration  24: 8529303.852 ops/s
# Warmup Iteration  25: 8506925.131 ops/s
# Warmup Iteration  26: 8504286.612 ops/s
# Warmup Iteration  27: 8499601.772 ops/s
# Warmup Iteration  28: 8494157.729 ops/s
# Warmup Iteration  29: 8519537.117 ops/s
# Warmup Iteration  30: 8527697.046 ops/s
Iteration   1: 8520399.487 ops/s
Iteration   2: 8528567.004 ops/s
Iteration   3: 8544645.472 ops/s
Iteration   4: 8518473.206 ops/s
Iteration   5: 8541772.261 ops/s
Iteration   6: 8531594.134 ops/s
Iteration   7: 8518575.396 ops/s
Iteration   8: 8491690.279 ops/s
Iteration   9: 8539222.075 ops/s
Iteration  10: 8483482.155 ops/s
Iteration  11: 8525581.772 ops/s
Iteration  12: 8524533.796 ops/s
Iteration  13: 8539328.413 ops/s
Iteration  14: 8526122.312 ops/s
Iteration  15: 8526213.654 ops/s
Iteration  16: 8551540.696 ops/s
Iteration  17: 8526191.615 ops/s
Iteration  18: 8545402.194 ops/s
Iteration  19: 8550771.653 ops/s
Iteration  20: 8524069.868 ops/s
Iteration  21: 8508134.306 ops/s
Iteration  22: 8497870.705 ops/s
Iteration  23: 8542700.921 ops/s
Iteration  24: 8532569.116 ops/s
Iteration  25: 8511986.943 ops/s
Iteration  26: 8525306.133 ops/s
Iteration  27: 8535995.654 ops/s
Iteration  28: 8528721.073 ops/s
Iteration  29: 8539528.380 ops/s
Iteration  30: 8518678.862 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_lastIndexOf":
  8526655.651 ±(99.9%) 10903.505 ops/s [Average]
  (min, avg, max) = (8483482.155, 8526655.651, 8551540.696), stdev = 16319.854
  CI (99.9%): [8515752.146, 8537559.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  8526655.651 ± 10903.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 133476.566 ops/s
# Warmup Iteration   2: 147418.048 ops/s
# Warmup Iteration   3: 192981.589 ops/s
# Warmup Iteration   4: 192528.434 ops/s
# Warmup Iteration   5: 191582.380 ops/s
# Warmup Iteration   6: 192594.931 ops/s
# Warmup Iteration   7: 192446.509 ops/s
# Warmup Iteration   8: 192838.918 ops/s
# Warmup Iteration   9: 192196.346 ops/s
# Warmup Iteration  10: 192384.312 ops/s
# Warmup Iteration  11: 161798.665 ops/s
# Warmup Iteration  12: 192404.813 ops/s
# Warmup Iteration  13: 192244.542 ops/s
# Warmup Iteration  14: 192207.193 ops/s
# Warmup Iteration  15: 192195.983 ops/s
# Warmup Iteration  16: 192790.621 ops/s
# Warmup Iteration  17: 203093.011 ops/s
# Warmup Iteration  18: 203302.705 ops/s
# Warmup Iteration  19: 202617.137 ops/s
# Warmup Iteration  20: 203036.237 ops/s
# Warmup Iteration  21: 202985.489 ops/s
# Warmup Iteration  22: 202641.184 ops/s
# Warmup Iteration  23: 202655.002 ops/s
# Warmup Iteration  24: 202864.511 ops/s
# Warmup Iteration  25: 202772.941 ops/s
# Warmup Iteration  26: 203115.339 ops/s
# Warmup Iteration  27: 203355.324 ops/s
# Warmup Iteration  28: 202950.623 ops/s
# Warmup Iteration  29: 202434.019 ops/s
# Warmup Iteration  30: 202953.682 ops/s
Iteration   1: 201738.683 ops/s
Iteration   2: 203083.642 ops/s
Iteration   3: 202888.635 ops/s
Iteration   4: 202647.922 ops/s
Iteration   5: 201753.386 ops/s
Iteration   6: 201270.433 ops/s
Iteration   7: 201031.691 ops/s
Iteration   8: 201250.830 ops/s
Iteration   9: 201147.765 ops/s
Iteration  10: 200165.394 ops/s
Iteration  11: 201201.315 ops/s
Iteration  12: 203058.471 ops/s
Iteration  13: 203199.504 ops/s
Iteration  14: 202993.345 ops/s
Iteration  15: 202995.077 ops/s
Iteration  16: 203001.012 ops/s
Iteration  17: 202563.871 ops/s
Iteration  18: 201965.769 ops/s
Iteration  19: 203142.711 ops/s
Iteration  20: 203034.242 ops/s
Iteration  21: 203215.207 ops/s
Iteration  22: 203272.558 ops/s
Iteration  23: 202754.723 ops/s
Iteration  24: 203456.058 ops/s
Iteration  25: 202717.619 ops/s
Iteration  26: 202742.886 ops/s
Iteration  27: 203122.098 ops/s
Iteration  28: 202696.219 ops/s
Iteration  29: 202819.139 ops/s
Iteration  30: 203189.680 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_listIterator":
  202470.663 ±(99.9%) 575.854 ops/s [Average]
  (min, avg, max) = (200165.394, 202470.663, 203456.058), stdev = 861.911
  CI (99.9%): [201894.809, 203046.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_listIterator  thrpt   30  202470.663 ± 575.854  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 765447.156 ops/s
# Warmup Iteration   2: 791220.955 ops/s
# Warmup Iteration   3: 990776.594 ops/s
# Warmup Iteration   4: 1014878.102 ops/s
# Warmup Iteration   5: 1015694.745 ops/s
# Warmup Iteration   6: 1010819.419 ops/s
# Warmup Iteration   7: 1011803.444 ops/s
# Warmup Iteration   8: 1015479.714 ops/s
# Warmup Iteration   9: 1015340.876 ops/s
# Warmup Iteration  10: 1015642.523 ops/s
# Warmup Iteration  11: 1013777.447 ops/s
# Warmup Iteration  12: 961621.755 ops/s
# Warmup Iteration  13: 913735.750 ops/s
# Warmup Iteration  14: 1014137.720 ops/s
# Warmup Iteration  15: 1014104.280 ops/s
# Warmup Iteration  16: 1013742.084 ops/s
# Warmup Iteration  17: 1083048.809 ops/s
# Warmup Iteration  18: 1081452.149 ops/s
# Warmup Iteration  19: 1078699.876 ops/s
# Warmup Iteration  20: 1076435.521 ops/s
# Warmup Iteration  21: 1079726.731 ops/s
# Warmup Iteration  22: 1080989.348 ops/s
# Warmup Iteration  23: 1076316.327 ops/s
# Warmup Iteration  24: 1076690.823 ops/s
# Warmup Iteration  25: 1080912.415 ops/s
# Warmup Iteration  26: 1076806.241 ops/s
# Warmup Iteration  27: 1079443.877 ops/s
# Warmup Iteration  28: 1082126.774 ops/s
# Warmup Iteration  29: 1081369.893 ops/s
# Warmup Iteration  30: 1083342.094 ops/s
Iteration   1: 1076963.297 ops/s
Iteration   2: 1084062.862 ops/s
Iteration   3: 1081219.331 ops/s
Iteration   4: 1079551.172 ops/s
Iteration   5: 1079902.493 ops/s
Iteration   6: 1079874.089 ops/s
Iteration   7: 1075689.546 ops/s
Iteration   8: 1076540.919 ops/s
Iteration   9: 1078696.036 ops/s
Iteration  10: 1076104.186 ops/s
Iteration  11: 1077892.301 ops/s
Iteration  12: 1078405.552 ops/s
Iteration  13: 1077054.605 ops/s
Iteration  14: 1084488.938 ops/s
Iteration  15: 1084372.242 ops/s
Iteration  16: 1082144.061 ops/s
Iteration  17: 1077655.677 ops/s
Iteration  18: 1078080.656 ops/s
Iteration  19: 1078879.294 ops/s
Iteration  20: 1078223.007 ops/s
Iteration  21: 1076179.715 ops/s
Iteration  22: 1079978.045 ops/s
Iteration  23: 1081405.687 ops/s
Iteration  24: 1080444.341 ops/s
Iteration  25: 1078785.236 ops/s
Iteration  26: 1080790.346 ops/s
Iteration  27: 1080266.189 ops/s
Iteration  28: 1027814.795 ops/s
Iteration  29: 1079843.694 ops/s
Iteration  30: 1079760.989 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize":
  1077702.310 ±(99.9%) 6484.622 ops/s [Average]
  (min, avg, max) = (1027814.795, 1077702.310, 1084488.938), stdev = 9705.878
  CI (99.9%): [1071217.688, 1084186.932] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize  thrpt   30  1077702.310 ± 6484.622  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_listIterator_throwsNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_listIterator_throwsNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 769346.629 ops/s
# Warmup Iteration   2: 798062.735 ops/s
# Warmup Iteration   3: 998001.497 ops/s
# Warmup Iteration   4: 1019306.748 ops/s
# Warmup Iteration   5: 1024311.377 ops/s
# Warmup Iteration   6: 1016144.171 ops/s
# Warmup Iteration   7: 1022568.127 ops/s
# Warmup Iteration   8: 1022870.468 ops/s
# Warmup Iteration   9: 1014928.724 ops/s
# Warmup Iteration  10: 1021125.842 ops/s
# Warmup Iteration  11: 1024448.922 ops/s
# Warmup Iteration  12: 953583.007 ops/s
# Warmup Iteration  13: 939556.671 ops/s
# Warmup Iteration  14: 1023491.811 ops/s
# Warmup Iteration  15: 1016500.293 ops/s
# Warmup Iteration  16: 1020866.675 ops/s
# Warmup Iteration  17: 1092499.656 ops/s
# Warmup Iteration  18: 1090660.038 ops/s
# Warmup Iteration  19: 1089010.446 ops/s
# Warmup Iteration  20: 1090853.623 ops/s
# Warmup Iteration  21: 1090656.755 ops/s
# Warmup Iteration  22: 1093575.793 ops/s
# Warmup Iteration  23: 1094199.321 ops/s
# Warmup Iteration  24: 1094786.183 ops/s
# Warmup Iteration  25: 1092324.695 ops/s
# Warmup Iteration  26: 1088160.135 ops/s
# Warmup Iteration  27: 1086995.135 ops/s
# Warmup Iteration  28: 1087110.879 ops/s
# Warmup Iteration  29: 1089597.489 ops/s
# Warmup Iteration  30: 1091676.980 ops/s
Iteration   1: 1090399.337 ops/s
Iteration   2: 1091474.920 ops/s
Iteration   3: 1096883.065 ops/s
Iteration   4: 1089649.395 ops/s
Iteration   5: 1091967.488 ops/s
Iteration   6: 1088345.147 ops/s
Iteration   7: 1088646.657 ops/s
Iteration   8: 1092707.886 ops/s
Iteration   9: 1091437.938 ops/s
Iteration  10: 1091645.144 ops/s
Iteration  11: 1091075.885 ops/s
Iteration  12: 1082601.086 ops/s
Iteration  13: 1082847.431 ops/s
Iteration  14: 1090101.963 ops/s
Iteration  15: 1089257.126 ops/s
Iteration  16: 1091957.708 ops/s
Iteration  17: 1094566.215 ops/s
Iteration  18: 1091318.799 ops/s
Iteration  19: 1090700.309 ops/s
Iteration  20: 1090735.031 ops/s
Iteration  21: 1088615.983 ops/s
Iteration  22: 1091597.273 ops/s
Iteration  23: 1088318.518 ops/s
Iteration  24: 1090059.075 ops/s
Iteration  25: 1092208.596 ops/s
Iteration  26: 1087469.934 ops/s
Iteration  27: 1090879.593 ops/s
Iteration  28: 1087525.052 ops/s
Iteration  29: 1090132.253 ops/s
Iteration  30: 1088093.819 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_listIterator_throwsNegative":
  1090107.288 ±(99.9%) 1898.808 ops/s [Average]
  (min, avg, max) = (1082601.086, 1090107.288, 1096883.065), stdev = 2842.047
  CI (99.9%): [1088208.480, 1092006.096] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_listIterator_throwsNegative  thrpt   30  1090107.288 ± 1898.808  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 243645.926 ops/s
# Warmup Iteration   2: 591746.963 ops/s
# Warmup Iteration   3: 587749.589 ops/s
# Warmup Iteration   4: 493679.795 ops/s
# Warmup Iteration   5: 588648.727 ops/s
# Warmup Iteration   6: 591687.641 ops/s
# Warmup Iteration   7: 588760.962 ops/s
# Warmup Iteration   8: 591682.990 ops/s
# Warmup Iteration   9: 587363.682 ops/s
# Warmup Iteration  10: 589076.263 ops/s
# Warmup Iteration  11: 590036.018 ops/s
# Warmup Iteration  12: 589398.457 ops/s
# Warmup Iteration  13: 590419.753 ops/s
# Warmup Iteration  14: 588533.575 ops/s
# Warmup Iteration  15: 588467.570 ops/s
# Warmup Iteration  16: 589849.712 ops/s
# Warmup Iteration  17: 586157.207 ops/s
# Warmup Iteration  18: 588952.203 ops/s
# Warmup Iteration  19: 587222.730 ops/s
# Warmup Iteration  20: 587315.606 ops/s
# Warmup Iteration  21: 587450.177 ops/s
# Warmup Iteration  22: 588349.891 ops/s
# Warmup Iteration  23: 586652.158 ops/s
# Warmup Iteration  24: 585296.603 ops/s
# Warmup Iteration  25: 587074.751 ops/s
# Warmup Iteration  26: 585865.569 ops/s
# Warmup Iteration  27: 588592.454 ops/s
# Warmup Iteration  28: 585368.587 ops/s
# Warmup Iteration  29: 586764.242 ops/s
# Warmup Iteration  30: 587861.373 ops/s
Iteration   1: 587628.461 ops/s
Iteration   2: 588891.942 ops/s
Iteration   3: 585650.736 ops/s
Iteration   4: 589395.703 ops/s
Iteration   5: 590207.921 ops/s
Iteration   6: 588483.249 ops/s
Iteration   7: 588121.035 ops/s
Iteration   8: 586437.093 ops/s
Iteration   9: 586365.112 ops/s
Iteration  10: 584899.396 ops/s
Iteration  11: 584647.525 ops/s
Iteration  12: 586189.063 ops/s
Iteration  13: 586305.565 ops/s
Iteration  14: 588645.789 ops/s
Iteration  15: 588000.231 ops/s
Iteration  16: 589292.128 ops/s
Iteration  17: 588981.328 ops/s
Iteration  18: 585061.221 ops/s
Iteration  19: 587007.658 ops/s
Iteration  20: 588026.716 ops/s
Iteration  21: 589701.835 ops/s
Iteration  22: 589644.851 ops/s
Iteration  23: 587076.821 ops/s
Iteration  24: 590169.094 ops/s
Iteration  25: 588282.707 ops/s
Iteration  26: 588633.162 ops/s
Iteration  27: 586561.175 ops/s
Iteration  28: 586873.079 ops/s
Iteration  29: 589210.616 ops/s
Iteration  30: 584260.620 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_makeString":
  587621.728 ±(99.9%) 1140.121 ops/s [Average]
  (min, avg, max) = (584260.620, 587621.728, 590207.921), stdev = 1706.479
  CI (99.9%): [586481.607, 588761.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_makeString  thrpt   30  587621.728 ± 1140.121  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14384037.983 ops/s
# Warmup Iteration   2: 23648894.391 ops/s
# Warmup Iteration   3: 24442735.476 ops/s
# Warmup Iteration   4: 24421908.826 ops/s
# Warmup Iteration   5: 24581778.787 ops/s
# Warmup Iteration   6: 20647877.365 ops/s
# Warmup Iteration   7: 24568152.220 ops/s
# Warmup Iteration   8: 24549039.530 ops/s
# Warmup Iteration   9: 24598569.356 ops/s
# Warmup Iteration  10: 24580760.479 ops/s
# Warmup Iteration  11: 24613830.640 ops/s
# Warmup Iteration  12: 24624862.149 ops/s
# Warmup Iteration  13: 24636645.815 ops/s
# Warmup Iteration  14: 24594511.563 ops/s
# Warmup Iteration  15: 24532370.787 ops/s
# Warmup Iteration  16: 24561654.814 ops/s
# Warmup Iteration  17: 24599933.519 ops/s
# Warmup Iteration  18: 24562661.799 ops/s
# Warmup Iteration  19: 24594459.029 ops/s
# Warmup Iteration  20: 24526141.770 ops/s
# Warmup Iteration  21: 24542659.020 ops/s
# Warmup Iteration  22: 24560478.186 ops/s
# Warmup Iteration  23: 24552443.193 ops/s
# Warmup Iteration  24: 24580914.561 ops/s
# Warmup Iteration  25: 24551295.540 ops/s
# Warmup Iteration  26: 24612183.409 ops/s
# Warmup Iteration  27: 24547245.962 ops/s
# Warmup Iteration  28: 24594557.154 ops/s
# Warmup Iteration  29: 24618924.446 ops/s
# Warmup Iteration  30: 24543605.896 ops/s
Iteration   1: 24571096.441 ops/s
Iteration   2: 24597986.378 ops/s
Iteration   3: 24548045.906 ops/s
Iteration   4: 24636025.981 ops/s
Iteration   5: 24543904.890 ops/s
Iteration   6: 24597481.732 ops/s
Iteration   7: 24611151.420 ops/s
Iteration   8: 24603547.307 ops/s
Iteration   9: 24645684.870 ops/s
Iteration  10: 24553418.993 ops/s
Iteration  11: 24633082.259 ops/s
Iteration  12: 24534243.892 ops/s
Iteration  13: 24596435.009 ops/s
Iteration  14: 24562911.273 ops/s
Iteration  15: 24534795.232 ops/s
Iteration  16: 24646980.389 ops/s
Iteration  17: 24621911.837 ops/s
Iteration  18: 24618087.469 ops/s
Iteration  19: 24565829.659 ops/s
Iteration  20: 24545761.338 ops/s
Iteration  21: 24547725.288 ops/s
Iteration  22: 24514058.421 ops/s
Iteration  23: 24531782.873 ops/s
Iteration  24: 24536310.160 ops/s
Iteration  25: 24563867.507 ops/s
Iteration  26: 24546977.793 ops/s
Iteration  27: 24625836.719 ops/s
Iteration  28: 24560935.319 ops/s
Iteration  29: 24565680.590 ops/s
Iteration  30: 24574266.495 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_max":
  24577860.781 ±(99.9%) 25678.939 ops/s [Average]
  (min, avg, max) = (24514058.421, 24577860.781, 24646980.389), stdev = 38435.030
  CI (99.9%): [24552181.842, 24603539.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_max  thrpt   30  24577860.781 ± 25678.939  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13105925.753 ops/s
# Warmup Iteration   2: 25293346.521 ops/s
# Warmup Iteration   3: 24889235.946 ops/s
# Warmup Iteration   4: 21319578.463 ops/s
# Warmup Iteration   5: 24932168.283 ops/s
# Warmup Iteration   6: 25045208.400 ops/s
# Warmup Iteration   7: 25044933.512 ops/s
# Warmup Iteration   8: 25054780.186 ops/s
# Warmup Iteration   9: 25064439.493 ops/s
# Warmup Iteration  10: 24869803.045 ops/s
# Warmup Iteration  11: 24962039.478 ops/s
# Warmup Iteration  12: 24951022.754 ops/s
# Warmup Iteration  13: 24891468.967 ops/s
# Warmup Iteration  14: 24928895.041 ops/s
# Warmup Iteration  15: 24895710.356 ops/s
# Warmup Iteration  16: 24931494.960 ops/s
# Warmup Iteration  17: 24909532.014 ops/s
# Warmup Iteration  18: 24891308.032 ops/s
# Warmup Iteration  19: 24892966.661 ops/s
# Warmup Iteration  20: 24995808.433 ops/s
# Warmup Iteration  21: 24889711.256 ops/s
# Warmup Iteration  22: 24895771.208 ops/s
# Warmup Iteration  23: 24846086.147 ops/s
# Warmup Iteration  24: 24969720.155 ops/s
# Warmup Iteration  25: 24951439.659 ops/s
# Warmup Iteration  26: 24986623.949 ops/s
# Warmup Iteration  27: 24901104.944 ops/s
# Warmup Iteration  28: 25023903.300 ops/s
# Warmup Iteration  29: 24969568.850 ops/s
# Warmup Iteration  30: 24962043.572 ops/s
Iteration   1: 25047864.773 ops/s
Iteration   2: 25004760.951 ops/s
Iteration   3: 25045420.485 ops/s
Iteration   4: 25053439.406 ops/s
Iteration   5: 24986335.600 ops/s
Iteration   6: 23388962.106 ops/s
Iteration   7: 25006972.440 ops/s
Iteration   8: 24732451.747 ops/s
Iteration   9: 25014138.271 ops/s
Iteration  10: 25020107.063 ops/s
Iteration  11: 24462112.850 ops/s
Iteration  12: 24882020.773 ops/s
Iteration  13: 24939884.604 ops/s
Iteration  14: 25035458.989 ops/s
Iteration  15: 25090055.751 ops/s
Iteration  16: 24964548.013 ops/s
Iteration  17: 24884472.650 ops/s
Iteration  18: 24909250.290 ops/s
Iteration  19: 24881365.051 ops/s
Iteration  20: 24922173.149 ops/s
Iteration  21: 24968621.252 ops/s
Iteration  22: 24928170.677 ops/s
Iteration  23: 24983240.427 ops/s
Iteration  24: 24998249.135 ops/s
Iteration  25: 24994377.166 ops/s
Iteration  26: 24957045.456 ops/s
Iteration  27: 25011571.681 ops/s
Iteration  28: 25042655.214 ops/s
Iteration  29: 24972689.821 ops/s
Iteration  30: 24998402.059 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_maxBy":
  24904227.262 ±(99.9%) 206490.692 ops/s [Average]
  (min, avg, max) = (23388962.106, 24904227.262, 25090055.751), stdev = 309065.570
  CI (99.9%): [24697736.570, 25110717.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_maxBy  thrpt   30  24904227.262 ± 206490.692  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3998962.763 ops/s
# Warmup Iteration   2: 9143370.368 ops/s
# Warmup Iteration   3: 9240296.829 ops/s
# Warmup Iteration   4: 7870155.653 ops/s
# Warmup Iteration   5: 9123212.313 ops/s
# Warmup Iteration   6: 9257604.493 ops/s
# Warmup Iteration   7: 9261681.903 ops/s
# Warmup Iteration   8: 9267453.365 ops/s
# Warmup Iteration   9: 9257874.115 ops/s
# Warmup Iteration  10: 9268062.373 ops/s
# Warmup Iteration  11: 9270198.514 ops/s
# Warmup Iteration  12: 9234423.816 ops/s
# Warmup Iteration  13: 9257840.668 ops/s
# Warmup Iteration  14: 9229073.566 ops/s
# Warmup Iteration  15: 9218219.882 ops/s
# Warmup Iteration  16: 9256784.218 ops/s
# Warmup Iteration  17: 9339693.130 ops/s
# Warmup Iteration  18: 9330648.030 ops/s
# Warmup Iteration  19: 9372384.015 ops/s
# Warmup Iteration  20: 9357583.390 ops/s
# Warmup Iteration  21: 9361094.008 ops/s
# Warmup Iteration  22: 9361881.578 ops/s
# Warmup Iteration  23: 9100999.155 ops/s
# Warmup Iteration  24: 9351740.430 ops/s
# Warmup Iteration  25: 9348144.175 ops/s
# Warmup Iteration  26: 9353155.776 ops/s
# Warmup Iteration  27: 9351048.827 ops/s
# Warmup Iteration  28: 9364227.782 ops/s
# Warmup Iteration  29: 9335886.037 ops/s
# Warmup Iteration  30: 9367020.208 ops/s
Iteration   1: 9373359.016 ops/s
Iteration   2: 9368095.937 ops/s
Iteration   3: 9369633.364 ops/s
Iteration   4: 9369719.020 ops/s
Iteration   5: 9363766.312 ops/s
Iteration   6: 9360713.759 ops/s
Iteration   7: 9367693.307 ops/s
Iteration   8: 9379559.051 ops/s
Iteration   9: 9311114.307 ops/s
Iteration  10: 9354827.259 ops/s
Iteration  11: 9319575.560 ops/s
Iteration  12: 9336271.463 ops/s
Iteration  13: 9363770.895 ops/s
Iteration  14: 9371210.766 ops/s
Iteration  15: 9365003.338 ops/s
Iteration  16: 9379044.046 ops/s
Iteration  17: 9340650.329 ops/s
Iteration  18: 9376419.306 ops/s
Iteration  19: 9366921.272 ops/s
Iteration  20: 9354460.985 ops/s
Iteration  21: 9375547.271 ops/s
Iteration  22: 9314621.987 ops/s
Iteration  23: 9337470.291 ops/s
Iteration  24: 9347884.417 ops/s
Iteration  25: 9343791.299 ops/s
Iteration  26: 9349840.069 ops/s
Iteration  27: 9367528.285 ops/s
Iteration  28: 9326392.300 ops/s
Iteration  29: 9369642.772 ops/s
Iteration  30: 9342024.884 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_max_null_throws":
  9355551.762 ±(99.9%) 13060.203 ops/s [Average]
  (min, avg, max) = (9311114.307, 9355551.762, 9379559.051), stdev = 19547.899
  CI (99.9%): [9342491.559, 9368611.966] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_max_null_throws  thrpt   30  9355551.762 ± 13060.203  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4232680.483 ops/s
# Warmup Iteration   2: 7997022.683 ops/s
# Warmup Iteration   3: 8635504.771 ops/s
# Warmup Iteration   4: 8685921.571 ops/s
# Warmup Iteration   5: 7480663.193 ops/s
# Warmup Iteration   6: 8428311.414 ops/s
# Warmup Iteration   7: 8679908.691 ops/s
# Warmup Iteration   8: 8674317.903 ops/s
# Warmup Iteration   9: 8701418.046 ops/s
# Warmup Iteration  10: 8672619.527 ops/s
# Warmup Iteration  11: 8697447.338 ops/s
# Warmup Iteration  12: 8703193.279 ops/s
# Warmup Iteration  13: 8702109.041 ops/s
# Warmup Iteration  14: 8700113.476 ops/s
# Warmup Iteration  15: 8698837.066 ops/s
# Warmup Iteration  16: 8687107.276 ops/s
# Warmup Iteration  17: 8675550.928 ops/s
# Warmup Iteration  18: 8658891.454 ops/s
# Warmup Iteration  19: 8703792.391 ops/s
# Warmup Iteration  20: 8702361.816 ops/s
# Warmup Iteration  21: 8687402.858 ops/s
# Warmup Iteration  22: 8695387.602 ops/s
# Warmup Iteration  23: 8699204.936 ops/s
# Warmup Iteration  24: 8703033.266 ops/s
# Warmup Iteration  25: 8702384.444 ops/s
# Warmup Iteration  26: 8686670.374 ops/s
# Warmup Iteration  27: 8705162.752 ops/s
# Warmup Iteration  28: 8716766.100 ops/s
# Warmup Iteration  29: 8700169.871 ops/s
# Warmup Iteration  30: 8662534.689 ops/s
Iteration   1: 8652307.700 ops/s
Iteration   2: 8629707.105 ops/s
Iteration   3: 8708826.595 ops/s
Iteration   4: 8704748.260 ops/s
Iteration   5: 8720504.577 ops/s
Iteration   6: 8662627.114 ops/s
Iteration   7: 8641446.475 ops/s
Iteration   8: 8686773.354 ops/s
Iteration   9: 8664735.627 ops/s
Iteration  10: 8696378.225 ops/s
Iteration  11: 8662004.191 ops/s
Iteration  12: 8691237.898 ops/s
Iteration  13: 8686226.911 ops/s
Iteration  14: 8650137.782 ops/s
Iteration  15: 8701619.290 ops/s
Iteration  16: 8669001.513 ops/s
Iteration  17: 8649668.448 ops/s
Iteration  18: 8639157.633 ops/s
Iteration  19: 8683168.766 ops/s
Iteration  20: 8700472.301 ops/s
Iteration  21: 8719857.318 ops/s
Iteration  22: 8676954.355 ops/s
Iteration  23: 8694091.476 ops/s
Iteration  24: 8725754.310 ops/s
Iteration  25: 8694405.316 ops/s
Iteration  26: 8719450.921 ops/s
Iteration  27: 8705513.627 ops/s
Iteration  28: 8663591.549 ops/s
Iteration  29: 8693953.180 ops/s
Iteration  30: 8695495.799 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  8682993.921 ±(99.9%) 17738.233 ops/s [Average]
  (min, avg, max) = (8629707.105, 8682993.921, 8725754.310), stdev = 26549.754
  CI (99.9%): [8665255.688, 8700732.153] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  8682993.921 ± 17738.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13770070.854 ops/s
# Warmup Iteration   2: 26882458.273 ops/s
# Warmup Iteration   3: 26668808.855 ops/s
# Warmup Iteration   4: 23515486.842 ops/s
# Warmup Iteration   5: 27160840.758 ops/s
# Warmup Iteration   6: 27079992.258 ops/s
# Warmup Iteration   7: 27160885.268 ops/s
# Warmup Iteration   8: 27193496.094 ops/s
# Warmup Iteration   9: 27173846.468 ops/s
# Warmup Iteration  10: 27171133.523 ops/s
# Warmup Iteration  11: 27246941.828 ops/s
# Warmup Iteration  12: 27119104.559 ops/s
# Warmup Iteration  13: 27267111.456 ops/s
# Warmup Iteration  14: 27196512.454 ops/s
# Warmup Iteration  15: 27250327.091 ops/s
# Warmup Iteration  16: 27131474.633 ops/s
# Warmup Iteration  17: 27176845.073 ops/s
# Warmup Iteration  18: 27155956.540 ops/s
# Warmup Iteration  19: 27106661.814 ops/s
# Warmup Iteration  20: 27198141.507 ops/s
# Warmup Iteration  21: 27242211.077 ops/s
# Warmup Iteration  22: 27239893.709 ops/s
# Warmup Iteration  23: 27275127.316 ops/s
# Warmup Iteration  24: 27285774.154 ops/s
# Warmup Iteration  25: 27248686.316 ops/s
# Warmup Iteration  26: 27204430.140 ops/s
# Warmup Iteration  27: 27261777.833 ops/s
# Warmup Iteration  28: 27284483.643 ops/s
# Warmup Iteration  29: 27238228.880 ops/s
# Warmup Iteration  30: 27342403.124 ops/s
Iteration   1: 27233303.771 ops/s
Iteration   2: 27327766.414 ops/s
Iteration   3: 27218098.895 ops/s
Iteration   4: 27216131.331 ops/s
Iteration   5: 27225445.672 ops/s
Iteration   6: 27301014.445 ops/s
Iteration   7: 27215451.656 ops/s
Iteration   8: 27092445.704 ops/s
Iteration   9: 27316981.078 ops/s
Iteration  10: 27328752.906 ops/s
Iteration  11: 27235633.422 ops/s
Iteration  12: 27147723.197 ops/s
Iteration  13: 27096895.276 ops/s
Iteration  14: 27031069.145 ops/s
Iteration  15: 27217955.816 ops/s
Iteration  16: 27056678.791 ops/s
Iteration  17: 27084988.975 ops/s
Iteration  18: 27092561.033 ops/s
Iteration  19: 27100289.256 ops/s
Iteration  20: 27149024.277 ops/s
Iteration  21: 27185653.101 ops/s
Iteration  22: 27176937.177 ops/s
Iteration  23: 27033505.135 ops/s
Iteration  24: 27196763.358 ops/s
Iteration  25: 27114071.357 ops/s
Iteration  26: 27144871.355 ops/s
Iteration  27: 27075965.022 ops/s
Iteration  28: 27104752.408 ops/s
Iteration  29: 27069149.451 ops/s
Iteration  30: 27269919.170 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_max_without_comparator":
  27168659.953 ±(99.9%) 59263.794 ops/s [Average]
  (min, avg, max) = (27031069.145, 27168659.953, 27328752.906), stdev = 88703.264
  CI (99.9%): [27109396.159, 27227923.747] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  27168659.953 ± 59263.794  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19787080.458 ops/s
# Warmup Iteration   2: 40284751.126 ops/s
# Warmup Iteration   3: 39143841.966 ops/s
# Warmup Iteration   4: 33007895.505 ops/s
# Warmup Iteration   5: 39280980.382 ops/s
# Warmup Iteration   6: 39257391.744 ops/s
# Warmup Iteration   7: 39070451.313 ops/s
# Warmup Iteration   8: 39144988.333 ops/s
# Warmup Iteration   9: 39296816.748 ops/s
# Warmup Iteration  10: 39118313.601 ops/s
# Warmup Iteration  11: 39215153.895 ops/s
# Warmup Iteration  12: 39086275.967 ops/s
# Warmup Iteration  13: 39215502.584 ops/s
# Warmup Iteration  14: 39043841.430 ops/s
# Warmup Iteration  15: 39135053.487 ops/s
# Warmup Iteration  16: 39091986.603 ops/s
# Warmup Iteration  17: 39186727.521 ops/s
# Warmup Iteration  18: 39204237.051 ops/s
# Warmup Iteration  19: 39244859.534 ops/s
# Warmup Iteration  20: 39222078.155 ops/s
# Warmup Iteration  21: 39280495.813 ops/s
# Warmup Iteration  22: 39238369.261 ops/s
# Warmup Iteration  23: 39309583.784 ops/s
# Warmup Iteration  24: 39194084.263 ops/s
# Warmup Iteration  25: 39170645.321 ops/s
# Warmup Iteration  26: 39205631.731 ops/s
# Warmup Iteration  27: 39278028.973 ops/s
# Warmup Iteration  28: 39246015.641 ops/s
# Warmup Iteration  29: 39233430.306 ops/s
# Warmup Iteration  30: 39107502.785 ops/s
Iteration   1: 39144945.774 ops/s
Iteration   2: 39194983.457 ops/s
Iteration   3: 39194178.839 ops/s
Iteration   4: 39196002.084 ops/s
Iteration   5: 39331495.082 ops/s
Iteration   6: 39387332.440 ops/s
Iteration   7: 39031446.665 ops/s
Iteration   8: 39308169.289 ops/s
Iteration   9: 39336697.536 ops/s
Iteration  10: 39387727.570 ops/s
Iteration  11: 39202601.659 ops/s
Iteration  12: 39308423.213 ops/s
Iteration  13: 39360116.781 ops/s
Iteration  14: 39373657.653 ops/s
Iteration  15: 39364193.281 ops/s
Iteration  16: 39362117.654 ops/s
Iteration  17: 39297586.937 ops/s
Iteration  18: 39201590.674 ops/s
Iteration  19: 39321124.541 ops/s
Iteration  20: 39250404.929 ops/s
Iteration  21: 39130230.356 ops/s
Iteration  22: 39134373.344 ops/s
Iteration  23: 39317663.470 ops/s
Iteration  24: 39205886.426 ops/s
Iteration  25: 39112136.965 ops/s
Iteration  26: 39204473.171 ops/s
Iteration  27: 38933227.644 ops/s
Iteration  28: 39195455.517 ops/s
Iteration  29: 39078046.786 ops/s
Iteration  30: 39307303.442 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_min":
  39239119.773 ±(99.9%) 76431.055 ops/s [Average]
  (min, avg, max) = (38933227.644, 39239119.773, 39387727.570), stdev = 114398.413
  CI (99.9%): [39162688.718, 39315550.827] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_min  thrpt   30  39239119.773 ± 76431.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7177516.173 ops/s
# Warmup Iteration   2: 14386720.438 ops/s
# Warmup Iteration   3: 12269967.264 ops/s
# Warmup Iteration   4: 14690171.449 ops/s
# Warmup Iteration   5: 14667238.847 ops/s
# Warmup Iteration   6: 14658830.524 ops/s
# Warmup Iteration   7: 14666037.398 ops/s
# Warmup Iteration   8: 14632247.002 ops/s
# Warmup Iteration   9: 14736298.943 ops/s
# Warmup Iteration  10: 14640638.760 ops/s
# Warmup Iteration  11: 14690444.083 ops/s
# Warmup Iteration  12: 14630905.055 ops/s
# Warmup Iteration  13: 14644185.160 ops/s
# Warmup Iteration  14: 14702699.180 ops/s
# Warmup Iteration  15: 14712053.182 ops/s
# Warmup Iteration  16: 14692903.036 ops/s
# Warmup Iteration  17: 14690789.430 ops/s
# Warmup Iteration  18: 14668959.035 ops/s
# Warmup Iteration  19: 14579569.402 ops/s
# Warmup Iteration  20: 14679603.248 ops/s
# Warmup Iteration  21: 14663723.320 ops/s
# Warmup Iteration  22: 14703245.047 ops/s
# Warmup Iteration  23: 14695784.931 ops/s
# Warmup Iteration  24: 14702651.516 ops/s
# Warmup Iteration  25: 14730200.834 ops/s
# Warmup Iteration  26: 14563410.451 ops/s
# Warmup Iteration  27: 14201481.228 ops/s
# Warmup Iteration  28: 14727059.571 ops/s
# Warmup Iteration  29: 14668993.115 ops/s
# Warmup Iteration  30: 14679189.969 ops/s
Iteration   1: 14753377.415 ops/s
Iteration   2: 14712815.551 ops/s
Iteration   3: 14719892.288 ops/s
Iteration   4: 14746153.980 ops/s
Iteration   5: 14755450.326 ops/s
Iteration   6: 14724937.766 ops/s
Iteration   7: 14686266.657 ops/s
Iteration   8: 14721112.170 ops/s
Iteration   9: 14691998.271 ops/s
Iteration  10: 14732074.311 ops/s
Iteration  11: 14641439.054 ops/s
Iteration  12: 14673253.532 ops/s
Iteration  13: 14633112.855 ops/s
Iteration  14: 14613076.091 ops/s
Iteration  15: 14782430.139 ops/s
Iteration  16: 14724560.984 ops/s
Iteration  17: 14663333.653 ops/s
Iteration  18: 14689642.457 ops/s
Iteration  19: 14595928.363 ops/s
Iteration  20: 14664760.084 ops/s
Iteration  21: 14687499.735 ops/s
Iteration  22: 14633562.186 ops/s
Iteration  23: 14751024.452 ops/s
Iteration  24: 14704782.295 ops/s
Iteration  25: 14769393.319 ops/s
Iteration  26: 14722886.032 ops/s
Iteration  27: 14689464.953 ops/s
Iteration  28: 14702345.214 ops/s
Iteration  29: 14722153.863 ops/s
Iteration  30: 14699794.182 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_minBy":
  14700284.073 ±(99.9%) 30692.242 ops/s [Average]
  (min, avg, max) = (14595928.363, 14700284.073, 14782430.139), stdev = 45938.707
  CI (99.9%): [14669591.830, 14730976.315] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_minBy  thrpt   30  14700284.073 ± 30692.242  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4225939.129 ops/s
# Warmup Iteration   2: 7892511.835 ops/s
# Warmup Iteration   3: 8531185.948 ops/s
# Warmup Iteration   4: 8617488.874 ops/s
# Warmup Iteration   5: 7580617.447 ops/s
# Warmup Iteration   6: 8194630.994 ops/s
# Warmup Iteration   7: 8620957.953 ops/s
# Warmup Iteration   8: 8615048.238 ops/s
# Warmup Iteration   9: 8628103.885 ops/s
# Warmup Iteration  10: 8585381.230 ops/s
# Warmup Iteration  11: 8630717.966 ops/s
# Warmup Iteration  12: 8612448.901 ops/s
# Warmup Iteration  13: 8572639.870 ops/s
# Warmup Iteration  14: 8575792.702 ops/s
# Warmup Iteration  15: 8589233.934 ops/s
# Warmup Iteration  16: 8596066.493 ops/s
# Warmup Iteration  17: 8601740.862 ops/s
# Warmup Iteration  18: 8589995.608 ops/s
# Warmup Iteration  19: 8595973.684 ops/s
# Warmup Iteration  20: 8619560.112 ops/s
# Warmup Iteration  21: 8608282.511 ops/s
# Warmup Iteration  22: 8630109.117 ops/s
# Warmup Iteration  23: 8607628.558 ops/s
# Warmup Iteration  24: 8633150.100 ops/s
# Warmup Iteration  25: 8630826.021 ops/s
# Warmup Iteration  26: 8627999.309 ops/s
# Warmup Iteration  27: 8634986.399 ops/s
# Warmup Iteration  28: 8612081.213 ops/s
# Warmup Iteration  29: 8612989.969 ops/s
# Warmup Iteration  30: 8592935.065 ops/s
Iteration   1: 8590912.159 ops/s
Iteration   2: 8625160.213 ops/s
Iteration   3: 8604985.073 ops/s
Iteration   4: 8635851.107 ops/s
Iteration   5: 8627448.933 ops/s
Iteration   6: 8660868.442 ops/s
Iteration   7: 8657056.650 ops/s
Iteration   8: 8604259.367 ops/s
Iteration   9: 8634805.309 ops/s
Iteration  10: 8623881.783 ops/s
Iteration  11: 8618250.251 ops/s
Iteration  12: 8668511.025 ops/s
Iteration  13: 8633318.782 ops/s
Iteration  14: 8657759.128 ops/s
Iteration  15: 8586527.727 ops/s
Iteration  16: 8640497.830 ops/s
Iteration  17: 8632156.550 ops/s
Iteration  18: 8628958.660 ops/s
Iteration  19: 8631696.144 ops/s
Iteration  20: 8625241.258 ops/s
Iteration  21: 8555500.342 ops/s
Iteration  22: 8505568.829 ops/s
Iteration  23: 8563260.439 ops/s
Iteration  24: 8559537.858 ops/s
Iteration  25: 8589476.534 ops/s
Iteration  26: 8564369.276 ops/s
Iteration  27: 8548021.180 ops/s
Iteration  28: 8546172.243 ops/s
Iteration  29: 8547093.962 ops/s
Iteration  30: 8567207.740 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_min_null_throws":
  8604478.493 ±(99.9%) 27876.173 ops/s [Average]
  (min, avg, max) = (8505568.829, 8604478.493, 8668511.025), stdev = 41723.747
  CI (99.9%): [8576602.320, 8632354.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_min_null_throws  thrpt   30  8604478.493 ± 27876.173  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3410895.232 ops/s
# Warmup Iteration   2: 7044887.831 ops/s
# Warmup Iteration   3: 9323051.342 ops/s
# Warmup Iteration   4: 9372418.080 ops/s
# Warmup Iteration   5: 8355268.528 ops/s
# Warmup Iteration   6: 8805785.796 ops/s
# Warmup Iteration   7: 9436267.879 ops/s
# Warmup Iteration   8: 9384000.453 ops/s
# Warmup Iteration   9: 9439839.862 ops/s
# Warmup Iteration  10: 9482730.321 ops/s
# Warmup Iteration  11: 9420251.126 ops/s
# Warmup Iteration  12: 9431174.039 ops/s
# Warmup Iteration  13: 9457721.354 ops/s
# Warmup Iteration  14: 9380161.768 ops/s
# Warmup Iteration  15: 9417127.889 ops/s
# Warmup Iteration  16: 9311443.381 ops/s
# Warmup Iteration  17: 9477107.513 ops/s
# Warmup Iteration  18: 9456049.930 ops/s
# Warmup Iteration  19: 9439664.739 ops/s
# Warmup Iteration  20: 9457039.004 ops/s
# Warmup Iteration  21: 9468740.570 ops/s
# Warmup Iteration  22: 9480043.949 ops/s
# Warmup Iteration  23: 9408171.283 ops/s
# Warmup Iteration  24: 9426301.776 ops/s
# Warmup Iteration  25: 9332203.494 ops/s
# Warmup Iteration  26: 9379231.358 ops/s
# Warmup Iteration  27: 9416599.192 ops/s
# Warmup Iteration  28: 9444655.998 ops/s
# Warmup Iteration  29: 9391746.259 ops/s
# Warmup Iteration  30: 9358536.823 ops/s
Iteration   1: 9418887.061 ops/s
Iteration   2: 9394483.797 ops/s
Iteration   3: 9259137.953 ops/s
Iteration   4: 9431682.947 ops/s
Iteration   5: 9419040.441 ops/s
Iteration   6: 9423845.890 ops/s
Iteration   7: 9493367.801 ops/s
Iteration   8: 9455886.009 ops/s
Iteration   9: 9378745.755 ops/s
Iteration  10: 9366828.184 ops/s
Iteration  11: 9368251.352 ops/s
Iteration  12: 9437561.714 ops/s
Iteration  13: 9425302.501 ops/s
Iteration  14: 9477834.894 ops/s
Iteration  15: 9405906.302 ops/s
Iteration  16: 9368087.497 ops/s
Iteration  17: 9410596.351 ops/s
Iteration  18: 9438672.793 ops/s
Iteration  19: 9409379.010 ops/s
Iteration  20: 9424825.626 ops/s
Iteration  21: 9489540.348 ops/s
Iteration  22: 9417186.740 ops/s
Iteration  23: 9413024.772 ops/s
Iteration  24: 9440260.044 ops/s
Iteration  25: 9435829.072 ops/s
Iteration  26: 9508177.735 ops/s
Iteration  27: 9412922.960 ops/s
Iteration  28: 9458011.547 ops/s
Iteration  29: 9442797.212 ops/s
Iteration  30: 9486880.212 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  9423765.151 ±(99.9%) 32137.044 ops/s [Average]
  (min, avg, max) = (9259137.953, 9423765.151, 9508177.735), stdev = 48101.219
  CI (99.9%): [9391628.106, 9455902.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  9423765.151 ± 32137.044  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19119470.521 ops/s
# Warmup Iteration   2: 39204266.623 ops/s
# Warmup Iteration   3: 39587032.560 ops/s
# Warmup Iteration   4: 33281180.304 ops/s
# Warmup Iteration   5: 39817010.643 ops/s
# Warmup Iteration   6: 39701033.984 ops/s
# Warmup Iteration   7: 39814433.476 ops/s
# Warmup Iteration   8: 39693361.155 ops/s
# Warmup Iteration   9: 39706909.533 ops/s
# Warmup Iteration  10: 39682937.062 ops/s
# Warmup Iteration  11: 40054853.265 ops/s
# Warmup Iteration  12: 40026974.584 ops/s
# Warmup Iteration  13: 40079062.956 ops/s
# Warmup Iteration  14: 40116519.997 ops/s
# Warmup Iteration  15: 39877794.225 ops/s
# Warmup Iteration  16: 38651822.326 ops/s
# Warmup Iteration  17: 34849257.029 ops/s
# Warmup Iteration  18: 35981116.397 ops/s
# Warmup Iteration  19: 34982434.215 ops/s
# Warmup Iteration  20: 35470837.644 ops/s
# Warmup Iteration  21: 34800534.951 ops/s
# Warmup Iteration  22: 34516052.767 ops/s
# Warmup Iteration  23: 34461735.585 ops/s
# Warmup Iteration  24: 36508089.192 ops/s
# Warmup Iteration  25: 35126286.592 ops/s
# Warmup Iteration  26: 34711956.207 ops/s
# Warmup Iteration  27: 34831332.581 ops/s
# Warmup Iteration  28: 34761254.436 ops/s
# Warmup Iteration  29: 35580388.313 ops/s
# Warmup Iteration  30: 34904107.777 ops/s
Iteration   1: 34627643.282 ops/s
Iteration   2: 35162104.582 ops/s
Iteration   3: 34957116.217 ops/s
Iteration   4: 34746753.730 ops/s
Iteration   5: 34527311.348 ops/s
Iteration   6: 34744329.828 ops/s
Iteration   7: 34703651.643 ops/s
Iteration   8: 34806731.090 ops/s
Iteration   9: 35108666.986 ops/s
Iteration  10: 34508826.373 ops/s
Iteration  11: 34801389.901 ops/s
Iteration  12: 34578336.153 ops/s
Iteration  13: 35424744.551 ops/s
Iteration  14: 34443581.440 ops/s
Iteration  15: 34976669.791 ops/s
Iteration  16: 34814940.353 ops/s
Iteration  17: 36449099.336 ops/s
Iteration  18: 39002770.298 ops/s
Iteration  19: 34777143.406 ops/s
Iteration  20: 34859795.722 ops/s
Iteration  21: 34924830.637 ops/s
Iteration  22: 35037106.000 ops/s
Iteration  23: 34500688.075 ops/s
Iteration  24: 34385387.897 ops/s
Iteration  25: 34154317.917 ops/s
Iteration  26: 34964898.290 ops/s
Iteration  27: 35207296.837 ops/s
Iteration  28: 34858953.545 ops/s
Iteration  29: 34338701.589 ops/s
Iteration  30: 35001159.303 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_min_without_comparator":
  34979831.537 ±(99.9%) 577535.578 ops/s [Average]
  (min, avg, max) = (34154317.917, 34979831.537, 39002770.298), stdev = 864428.130
  CI (99.9%): [34402295.959, 35557367.115] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  34979831.537 ± 577535.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6494491.755 ops/s
# Warmup Iteration   2: 12548953.461 ops/s
# Warmup Iteration   3: 13201770.174 ops/s
# Warmup Iteration   4: 13612427.623 ops/s
# Warmup Iteration   5: 10885717.047 ops/s
# Warmup Iteration   6: 13199596.336 ops/s
# Warmup Iteration   7: 13450145.101 ops/s
# Warmup Iteration   8: 13370297.499 ops/s
# Warmup Iteration   9: 13317366.492 ops/s
# Warmup Iteration  10: 13469967.737 ops/s
# Warmup Iteration  11: 13553785.738 ops/s
# Warmup Iteration  12: 13236528.601 ops/s
# Warmup Iteration  13: 13395390.181 ops/s
# Warmup Iteration  14: 13405215.313 ops/s
# Warmup Iteration  15: 13467259.388 ops/s
# Warmup Iteration  16: 13205445.402 ops/s
# Warmup Iteration  17: 13330742.388 ops/s
# Warmup Iteration  18: 13327476.044 ops/s
# Warmup Iteration  19: 13227286.626 ops/s
# Warmup Iteration  20: 13381523.532 ops/s
# Warmup Iteration  21: 13391408.869 ops/s
# Warmup Iteration  22: 13368311.550 ops/s
# Warmup Iteration  23: 13389712.845 ops/s
# Warmup Iteration  24: 13314374.200 ops/s
# Warmup Iteration  25: 13347937.078 ops/s
# Warmup Iteration  26: 13421073.321 ops/s
# Warmup Iteration  27: 13406794.645 ops/s
# Warmup Iteration  28: 13422880.789 ops/s
# Warmup Iteration  29: 13510105.986 ops/s
# Warmup Iteration  30: 13482042.132 ops/s
Iteration   1: 13263676.413 ops/s
Iteration   2: 13527180.680 ops/s
Iteration   3: 13260580.606 ops/s
Iteration   4: 13370808.439 ops/s
Iteration   5: 13446603.768 ops/s
Iteration   6: 13393941.730 ops/s
Iteration   7: 13749771.941 ops/s
Iteration   8: 13454235.678 ops/s
Iteration   9: 13542538.020 ops/s
Iteration  10: 13338663.779 ops/s
Iteration  11: 13302336.257 ops/s
Iteration  12: 13382175.067 ops/s
Iteration  13: 13443189.736 ops/s
Iteration  14: 13399320.538 ops/s
Iteration  15: 14254709.007 ops/s
Iteration  16: 14107088.635 ops/s
Iteration  17: 13400720.319 ops/s
Iteration  18: 13264508.308 ops/s
Iteration  19: 13321855.871 ops/s
Iteration  20: 13314234.202 ops/s
Iteration  21: 13458641.826 ops/s
Iteration  22: 13640471.707 ops/s
Iteration  23: 13007014.278 ops/s
Iteration  24: 13304127.806 ops/s
Iteration  25: 13330667.201 ops/s
Iteration  26: 13889062.731 ops/s
Iteration  27: 13875993.703 ops/s
Iteration  28: 13156890.420 ops/s
Iteration  29: 13500512.960 ops/s
Iteration  30: 13352146.527 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_noneSatisfy":
  13468455.605 ±(99.9%) 180088.477 ops/s [Average]
  (min, avg, max) = (13007014.278, 13468455.605, 14254709.007), stdev = 269547.975
  CI (99.9%): [13288367.128, 13648544.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  13468455.605 ± 180088.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6420293.702 ops/s
# Warmup Iteration   2: 13427772.198 ops/s
# Warmup Iteration   3: 13498787.312 ops/s
# Warmup Iteration   4: 13280505.076 ops/s
# Warmup Iteration   5: 11385741.620 ops/s
# Warmup Iteration   6: 13512750.740 ops/s
# Warmup Iteration   7: 13678977.788 ops/s
# Warmup Iteration   8: 14316578.365 ops/s
# Warmup Iteration   9: 13831843.968 ops/s
# Warmup Iteration  10: 13396013.655 ops/s
# Warmup Iteration  11: 13404161.746 ops/s
# Warmup Iteration  12: 13765226.678 ops/s
# Warmup Iteration  13: 13605989.174 ops/s
# Warmup Iteration  14: 13320928.218 ops/s
# Warmup Iteration  15: 13446835.971 ops/s
# Warmup Iteration  16: 13534535.855 ops/s
# Warmup Iteration  17: 13493416.912 ops/s
# Warmup Iteration  18: 13599049.942 ops/s
# Warmup Iteration  19: 13547369.428 ops/s
# Warmup Iteration  20: 13654489.959 ops/s
# Warmup Iteration  21: 13579258.762 ops/s
# Warmup Iteration  22: 13054459.161 ops/s
# Warmup Iteration  23: 13655670.713 ops/s
# Warmup Iteration  24: 13622890.527 ops/s
# Warmup Iteration  25: 13536586.676 ops/s
# Warmup Iteration  26: 13567161.622 ops/s
# Warmup Iteration  27: 13448849.081 ops/s
# Warmup Iteration  28: 13387842.850 ops/s
# Warmup Iteration  29: 13497368.368 ops/s
# Warmup Iteration  30: 13424761.099 ops/s
Iteration   1: 13615113.545 ops/s
Iteration   2: 13378503.239 ops/s
Iteration   3: 13363794.330 ops/s
Iteration   4: 13588999.088 ops/s
Iteration   5: 13647510.059 ops/s
Iteration   6: 13384753.518 ops/s
Iteration   7: 13308940.756 ops/s
Iteration   8: 13555782.141 ops/s
Iteration   9: 13323809.664 ops/s
Iteration  10: 13422262.665 ops/s
Iteration  11: 13719188.443 ops/s
Iteration  12: 13731547.772 ops/s
Iteration  13: 13446078.164 ops/s
Iteration  14: 13439256.897 ops/s
Iteration  15: 13478551.748 ops/s
Iteration  16: 13258588.741 ops/s
Iteration  17: 13588105.907 ops/s
Iteration  18: 13540362.235 ops/s
Iteration  19: 13314056.714 ops/s
Iteration  20: 13567333.169 ops/s
Iteration  21: 13438002.068 ops/s
Iteration  22: 13616763.449 ops/s
Iteration  23: 13324058.741 ops/s
Iteration  24: 13488687.101 ops/s
Iteration  25: 13575807.131 ops/s
Iteration  26: 13578765.491 ops/s
Iteration  27: 13309194.334 ops/s
Iteration  28: 13655881.246 ops/s
Iteration  29: 13354205.564 ops/s
Iteration  30: 13795398.015 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_noneSatisfyWith":
  13493643.398 ±(99.9%) 96917.586 ops/s [Average]
  (min, avg, max) = (13258588.741, 13493643.398, 13795398.015), stdev = 145061.691
  CI (99.9%): [13396725.812, 13590560.983] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  13493643.398 ± 96917.586  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10204.341 ops/s
# Warmup Iteration   2: 10343.743 ops/s
# Warmup Iteration   3: 10426.529 ops/s
# Warmup Iteration   4: 10375.024 ops/s
# Warmup Iteration   5: 10301.007 ops/s
# Warmup Iteration   6: 10646.212 ops/s
# Warmup Iteration   7: 13493.176 ops/s
# Warmup Iteration   8: 13761.210 ops/s
# Warmup Iteration   9: 14121.067 ops/s
# Warmup Iteration  10: 14004.465 ops/s
# Warmup Iteration  11: 13767.815 ops/s
# Warmup Iteration  12: 14211.089 ops/s
# Warmup Iteration  13: 13626.640 ops/s
# Warmup Iteration  14: 13849.458 ops/s
# Warmup Iteration  15: 13691.002 ops/s
# Warmup Iteration  16: 13920.261 ops/s
# Warmup Iteration  17: 14045.776 ops/s
# Warmup Iteration  18: 13915.595 ops/s
# Warmup Iteration  19: 14261.902 ops/s
# Warmup Iteration  20: 14048.213 ops/s
# Warmup Iteration  21: 13828.358 ops/s
# Warmup Iteration  22: 14051.496 ops/s
# Warmup Iteration  23: 14063.711 ops/s
# Warmup Iteration  24: 13970.409 ops/s
# Warmup Iteration  25: 14043.043 ops/s
# Warmup Iteration  26: 13911.047 ops/s
# Warmup Iteration  27: 14050.537 ops/s
# Warmup Iteration  28: 13954.277 ops/s
# Warmup Iteration  29: 13778.917 ops/s
# Warmup Iteration  30: 13785.159 ops/s
Iteration   1: 14062.816 ops/s
Iteration   2: 13758.852 ops/s
Iteration   3: 14193.215 ops/s
Iteration   4: 14179.399 ops/s
Iteration   5: 14000.700 ops/s
Iteration   6: 11839.683 ops/s
Iteration   7: 10475.433 ops/s
Iteration   8: 10549.222 ops/s
Iteration   9: 10453.112 ops/s
Iteration  10: 13417.673 ops/s
Iteration  11: 14032.986 ops/s
Iteration  12: 14238.685 ops/s
Iteration  13: 14225.473 ops/s
Iteration  14: 14009.667 ops/s
Iteration  15: 14304.769 ops/s
Iteration  16: 14279.160 ops/s
Iteration  17: 14005.910 ops/s
Iteration  18: 14053.020 ops/s
Iteration  19: 14346.337 ops/s
Iteration  20: 14236.542 ops/s
Iteration  21: 13596.869 ops/s
Iteration  22: 13776.858 ops/s
Iteration  23: 14231.542 ops/s
Iteration  24: 14018.369 ops/s
Iteration  25: 14188.925 ops/s
Iteration  26: 15016.276 ops/s
Iteration  27: 14327.026 ops/s
Iteration  28: 13830.457 ops/s
Iteration  29: 14019.617 ops/s
Iteration  30: 13521.047 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_parallelStream":
  13639.655 ±(99.9%) 787.712 ops/s [Average]
  (min, avg, max) = (10453.112, 13639.655, 15016.276), stdev = 1179.010
  CI (99.9%): [12851.943, 14427.367] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt      Score     Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_parallelStream  thrpt   30  13639.655 ± 787.712  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1051732.839 ops/s
# Warmup Iteration   2: 1271148.014 ops/s
# Warmup Iteration   3: 1764412.583 ops/s
# Warmup Iteration   4: 1726195.093 ops/s
# Warmup Iteration   5: 1722998.748 ops/s
# Warmup Iteration   6: 1747543.899 ops/s
# Warmup Iteration   7: 1733567.697 ops/s
# Warmup Iteration   8: 1836607.862 ops/s
# Warmup Iteration   9: 1464465.679 ops/s
# Warmup Iteration  10: 1660134.943 ops/s
# Warmup Iteration  11: 1738637.586 ops/s
# Warmup Iteration  12: 1770064.804 ops/s
# Warmup Iteration  13: 1734112.679 ops/s
# Warmup Iteration  14: 1753422.328 ops/s
# Warmup Iteration  15: 1738787.486 ops/s
# Warmup Iteration  16: 1732216.279 ops/s
# Warmup Iteration  17: 1808401.044 ops/s
# Warmup Iteration  18: 1714547.069 ops/s
# Warmup Iteration  19: 1865619.242 ops/s
# Warmup Iteration  20: 1745938.180 ops/s
# Warmup Iteration  21: 1736941.007 ops/s
# Warmup Iteration  22: 1774531.112 ops/s
# Warmup Iteration  23: 1776881.545 ops/s
# Warmup Iteration  24: 1714935.238 ops/s
# Warmup Iteration  25: 1762133.456 ops/s
# Warmup Iteration  26: 1734025.997 ops/s
# Warmup Iteration  27: 1753974.061 ops/s
# Warmup Iteration  28: 1742781.962 ops/s
# Warmup Iteration  29: 1721224.562 ops/s
# Warmup Iteration  30: 1753922.417 ops/s
Iteration   1: 1738798.162 ops/s
Iteration   2: 1735402.264 ops/s
Iteration   3: 1754962.355 ops/s
Iteration   4: 1723876.099 ops/s
Iteration   5: 1704075.600 ops/s
Iteration   6: 1730389.508 ops/s
Iteration   7: 1744745.657 ops/s
Iteration   8: 1766727.002 ops/s
Iteration   9: 1740058.075 ops/s
Iteration  10: 1739891.387 ops/s
Iteration  11: 1745582.716 ops/s
Iteration  12: 1735117.866 ops/s
Iteration  13: 1751422.952 ops/s
Iteration  14: 1724805.743 ops/s
Iteration  15: 1749230.355 ops/s
Iteration  16: 1744134.656 ops/s
Iteration  17: 1777353.908 ops/s
Iteration  18: 1737402.421 ops/s
Iteration  19: 1718475.971 ops/s
Iteration  20: 1723896.587 ops/s
Iteration  21: 1736624.464 ops/s
Iteration  22: 1774472.870 ops/s
Iteration  23: 1720561.182 ops/s
Iteration  24: 1703610.019 ops/s
Iteration  25: 1721847.988 ops/s
Iteration  26: 1744808.248 ops/s
Iteration  27: 1857222.245 ops/s
Iteration  28: 1740989.773 ops/s
Iteration  29: 1753301.846 ops/s
Iteration  30: 1771424.480 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_partition":
  1743707.080 ±(99.9%) 18822.910 ops/s [Average]
  (min, avg, max) = (1703610.019, 1743707.080, 1857222.245), stdev = 28173.248
  CI (99.9%): [1724884.170, 1762529.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_partition  thrpt   30  1743707.080 ± 18822.910  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1641080.746 ops/s
# Warmup Iteration   2: 2900451.462 ops/s
# Warmup Iteration   3: 3191299.158 ops/s
# Warmup Iteration   4: 3258075.392 ops/s
# Warmup Iteration   5: 3260311.983 ops/s
# Warmup Iteration   6: 2734956.119 ops/s
# Warmup Iteration   7: 3275146.310 ops/s
# Warmup Iteration   8: 3249577.492 ops/s
# Warmup Iteration   9: 3271715.745 ops/s
# Warmup Iteration  10: 3252438.200 ops/s
# Warmup Iteration  11: 3284389.482 ops/s
# Warmup Iteration  12: 3298092.043 ops/s
# Warmup Iteration  13: 3279806.989 ops/s
# Warmup Iteration  14: 3307235.824 ops/s
# Warmup Iteration  15: 3230388.194 ops/s
# Warmup Iteration  16: 3291293.995 ops/s
# Warmup Iteration  17: 3282236.479 ops/s
# Warmup Iteration  18: 3226324.719 ops/s
# Warmup Iteration  19: 3253542.344 ops/s
# Warmup Iteration  20: 3307777.502 ops/s
# Warmup Iteration  21: 3237042.477 ops/s
# Warmup Iteration  22: 3256261.391 ops/s
# Warmup Iteration  23: 3375667.301 ops/s
# Warmup Iteration  24: 3264517.188 ops/s
# Warmup Iteration  25: 3303174.972 ops/s
# Warmup Iteration  26: 3272310.446 ops/s
# Warmup Iteration  27: 3302791.206 ops/s
# Warmup Iteration  28: 3307702.545 ops/s
# Warmup Iteration  29: 3257050.662 ops/s
# Warmup Iteration  30: 3277210.188 ops/s
Iteration   1: 3298762.521 ops/s
Iteration   2: 3263240.172 ops/s
Iteration   3: 3341737.121 ops/s
Iteration   4: 3253637.866 ops/s
Iteration   5: 3258431.731 ops/s
Iteration   6: 3251516.275 ops/s
Iteration   7: 3249232.646 ops/s
Iteration   8: 3266913.632 ops/s
Iteration   9: 3253379.664 ops/s
Iteration  10: 3274195.818 ops/s
Iteration  11: 3273067.413 ops/s
Iteration  12: 3260252.133 ops/s
Iteration  13: 3265507.228 ops/s
Iteration  14: 3199088.794 ops/s
Iteration  15: 3286179.254 ops/s
Iteration  16: 3301608.616 ops/s
Iteration  17: 3242459.059 ops/s
Iteration  18: 3267127.947 ops/s
Iteration  19: 3256369.297 ops/s
Iteration  20: 3278391.880 ops/s
Iteration  21: 3245171.214 ops/s
Iteration  22: 3263256.541 ops/s
Iteration  23: 3235740.751 ops/s
Iteration  24: 3285257.732 ops/s
Iteration  25: 3271563.470 ops/s
Iteration  26: 3299343.825 ops/s
Iteration  27: 3279136.560 ops/s
Iteration  28: 3231630.082 ops/s
Iteration  29: 3234065.270 ops/s
Iteration  30: 3236171.551 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_partitionWhile":
  3264081.202 ±(99.9%) 17895.668 ops/s [Average]
  (min, avg, max) = (3199088.794, 3264081.202, 3341737.121), stdev = 26785.396
  CI (99.9%): [3246185.534, 3281976.870] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_partitionWhile  thrpt   30  3264081.202 ± 17895.668  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 640608.009 ops/s
# Warmup Iteration   2: 751762.691 ops/s
# Warmup Iteration   3: 1035302.959 ops/s
# Warmup Iteration   4: 1040564.757 ops/s
# Warmup Iteration   5: 1019363.840 ops/s
# Warmup Iteration   6: 1036207.371 ops/s
# Warmup Iteration   7: 1026905.694 ops/s
# Warmup Iteration   8: 1023657.683 ops/s
# Warmup Iteration   9: 1007690.098 ops/s
# Warmup Iteration  10: 853003.837 ops/s
# Warmup Iteration  11: 1037579.969 ops/s
# Warmup Iteration  12: 1027194.715 ops/s
# Warmup Iteration  13: 1031700.481 ops/s
# Warmup Iteration  14: 1035536.369 ops/s
# Warmup Iteration  15: 1025226.425 ops/s
# Warmup Iteration  16: 1042964.886 ops/s
# Warmup Iteration  17: 1028297.357 ops/s
# Warmup Iteration  18: 1029475.368 ops/s
# Warmup Iteration  19: 1037362.033 ops/s
# Warmup Iteration  20: 1028525.439 ops/s
# Warmup Iteration  21: 1020102.375 ops/s
# Warmup Iteration  22: 1026662.102 ops/s
# Warmup Iteration  23: 1028288.131 ops/s
# Warmup Iteration  24: 1031629.505 ops/s
# Warmup Iteration  25: 1030129.400 ops/s
# Warmup Iteration  26: 1032519.514 ops/s
# Warmup Iteration  27: 1033085.109 ops/s
# Warmup Iteration  28: 1026677.957 ops/s
# Warmup Iteration  29: 1030134.003 ops/s
# Warmup Iteration  30: 1030735.014 ops/s
Iteration   1: 1025879.492 ops/s
Iteration   2: 1048646.547 ops/s
Iteration   3: 1024254.218 ops/s
Iteration   4: 1022214.259 ops/s
Iteration   5: 1043890.089 ops/s
Iteration   6: 1050019.807 ops/s
Iteration   7: 1028034.735 ops/s
Iteration   8: 1040365.612 ops/s
Iteration   9: 1041070.517 ops/s
Iteration  10: 1032554.607 ops/s
Iteration  11: 1042219.149 ops/s
Iteration  12: 1028648.315 ops/s
Iteration  13: 1029376.141 ops/s
Iteration  14: 1028287.383 ops/s
Iteration  15: 1068164.860 ops/s
Iteration  16: 1013409.267 ops/s
Iteration  17: 1029406.952 ops/s
Iteration  18: 1031271.610 ops/s
Iteration  19: 1031640.049 ops/s
Iteration  20: 1038845.270 ops/s
Iteration  21: 1040941.325 ops/s
Iteration  22: 1152199.899 ops/s
Iteration  23: 996742.029 ops/s
Iteration  24: 1022252.631 ops/s
Iteration  25: 1026477.156 ops/s
Iteration  26: 1029356.400 ops/s
Iteration  27: 1029643.952 ops/s
Iteration  28: 1045150.360 ops/s
Iteration  29: 1042670.685 ops/s
Iteration  30: 1032837.260 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_partitionWith":
  1037215.686 ±(99.9%) 16796.705 ops/s [Average]
  (min, avg, max) = (996742.029, 1037215.686, 1152199.899), stdev = 25140.519
  CI (99.9%): [1020418.981, 1054012.391] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_partitionWith  thrpt   30  1037215.686 ± 16796.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2628526.734 ops/s
# Warmup Iteration   2: 5262197.880 ops/s
# Warmup Iteration   3: 5952949.250 ops/s
# Warmup Iteration   4: 5962707.878 ops/s
# Warmup Iteration   5: 4794946.891 ops/s
# Warmup Iteration   6: 5982913.576 ops/s
# Warmup Iteration   7: 5962342.141 ops/s
# Warmup Iteration   8: 5979883.528 ops/s
# Warmup Iteration   9: 5963786.300 ops/s
# Warmup Iteration  10: 5999096.527 ops/s
# Warmup Iteration  11: 6138636.868 ops/s
# Warmup Iteration  12: 5994143.286 ops/s
# Warmup Iteration  13: 6022063.045 ops/s
# Warmup Iteration  14: 6087979.410 ops/s
# Warmup Iteration  15: 5926061.957 ops/s
# Warmup Iteration  16: 6045921.478 ops/s
# Warmup Iteration  17: 6038140.343 ops/s
# Warmup Iteration  18: 6065803.247 ops/s
# Warmup Iteration  19: 5997261.022 ops/s
# Warmup Iteration  20: 6046009.246 ops/s
# Warmup Iteration  21: 5905259.008 ops/s
# Warmup Iteration  22: 5939293.479 ops/s
# Warmup Iteration  23: 5989031.153 ops/s
# Warmup Iteration  24: 5957818.495 ops/s
# Warmup Iteration  25: 6018594.915 ops/s
# Warmup Iteration  26: 5975758.064 ops/s
# Warmup Iteration  27: 5966390.077 ops/s
# Warmup Iteration  28: 6128073.143 ops/s
# Warmup Iteration  29: 5906200.623 ops/s
# Warmup Iteration  30: 5940622.131 ops/s
Iteration   1: 6005390.309 ops/s
Iteration   2: 5922312.776 ops/s
Iteration   3: 5999221.487 ops/s
Iteration   4: 6000385.372 ops/s
Iteration   5: 5902299.205 ops/s
Iteration   6: 5979529.950 ops/s
Iteration   7: 5985345.228 ops/s
Iteration   8: 5951823.817 ops/s
Iteration   9: 5958114.431 ops/s
Iteration  10: 5897464.351 ops/s
Iteration  11: 5895201.738 ops/s
Iteration  12: 5996187.853 ops/s
Iteration  13: 5898702.443 ops/s
Iteration  14: 6032203.278 ops/s
Iteration  15: 5979689.648 ops/s
Iteration  16: 5922716.193 ops/s
Iteration  17: 5947589.100 ops/s
Iteration  18: 6058864.642 ops/s
Iteration  19: 5972391.628 ops/s
Iteration  20: 6009230.191 ops/s
Iteration  21: 6013767.187 ops/s
Iteration  22: 6034340.623 ops/s
Iteration  23: 5942565.650 ops/s
Iteration  24: 5945870.113 ops/s
Iteration  25: 5978416.066 ops/s
Iteration  26: 5945052.792 ops/s
Iteration  27: 5914715.828 ops/s
Iteration  28: 6040868.792 ops/s
Iteration  29: 6028749.427 ops/s
Iteration  30: 5970499.710 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_reject":
  5970983.661 ±(99.9%) 31149.571 ops/s [Average]
  (min, avg, max) = (5895201.738, 5970983.661, 6058864.642), stdev = 46623.215
  CI (99.9%): [5939834.090, 6002133.232] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_reject  thrpt   30  5970983.661 ± 31149.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1709349.181 ops/s
# Warmup Iteration   2: 3301951.755 ops/s
# Warmup Iteration   3: 3758715.201 ops/s
# Warmup Iteration   4: 3830996.726 ops/s
# Warmup Iteration   5: 3167977.117 ops/s
# Warmup Iteration   6: 3578185.456 ops/s
# Warmup Iteration   7: 3701577.252 ops/s
# Warmup Iteration   8: 3737793.137 ops/s
# Warmup Iteration   9: 3736222.510 ops/s
# Warmup Iteration  10: 3832186.407 ops/s
# Warmup Iteration  11: 3741169.215 ops/s
# Warmup Iteration  12: 3818686.991 ops/s
# Warmup Iteration  13: 3752725.106 ops/s
# Warmup Iteration  14: 3780451.118 ops/s
# Warmup Iteration  15: 3856521.898 ops/s
# Warmup Iteration  16: 3733434.091 ops/s
# Warmup Iteration  17: 3787226.190 ops/s
# Warmup Iteration  18: 3765974.155 ops/s
# Warmup Iteration  19: 3769705.527 ops/s
# Warmup Iteration  20: 3683302.362 ops/s
# Warmup Iteration  21: 3769149.218 ops/s
# Warmup Iteration  22: 3753444.616 ops/s
# Warmup Iteration  23: 3794442.468 ops/s
# Warmup Iteration  24: 3786329.356 ops/s
# Warmup Iteration  25: 3780978.519 ops/s
# Warmup Iteration  26: 3732233.004 ops/s
# Warmup Iteration  27: 3768483.001 ops/s
# Warmup Iteration  28: 3749205.625 ops/s
# Warmup Iteration  29: 3756179.287 ops/s
# Warmup Iteration  30: 3785452.047 ops/s
Iteration   1: 3789409.543 ops/s
Iteration   2: 3765813.483 ops/s
Iteration   3: 3775477.803 ops/s
Iteration   4: 3801915.475 ops/s
Iteration   5: 3761828.551 ops/s
Iteration   6: 3741021.549 ops/s
Iteration   7: 3733968.721 ops/s
Iteration   8: 3780356.598 ops/s
Iteration   9: 3745253.425 ops/s
Iteration  10: 3784639.204 ops/s
Iteration  11: 3740923.848 ops/s
Iteration  12: 3728822.730 ops/s
Iteration  13: 3751554.932 ops/s
Iteration  14: 3725685.792 ops/s
Iteration  15: 3713864.657 ops/s
Iteration  16: 3795647.731 ops/s
Iteration  17: 3762200.387 ops/s
Iteration  18: 3723298.502 ops/s
Iteration  19: 4047018.668 ops/s
Iteration  20: 3780432.499 ops/s
Iteration  21: 3792538.118 ops/s
Iteration  22: 3744179.774 ops/s
Iteration  23: 3756594.982 ops/s
Iteration  24: 3755675.561 ops/s
Iteration  25: 3703297.547 ops/s
Iteration  26: 3736549.364 ops/s
Iteration  27: 3669142.161 ops/s
Iteration  28: 3727186.619 ops/s
Iteration  29: 3762965.371 ops/s
Iteration  30: 3898842.866 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_rejectWith":
  3766536.882 ±(99.9%) 44343.418 ops/s [Average]
  (min, avg, max) = (3669142.161, 3766536.882, 4047018.668), stdev = 66371.146
  CI (99.9%): [3722193.464, 3810880.300] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_rejectWith  thrpt   30  3766536.882 ± 44343.418  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3249445.018 ops/s
# Warmup Iteration   2: 6207108.243 ops/s
# Warmup Iteration   3: 6780143.937 ops/s
# Warmup Iteration   4: 6921746.042 ops/s
# Warmup Iteration   5: 5870571.171 ops/s
# Warmup Iteration   6: 6489485.524 ops/s
# Warmup Iteration   7: 6842017.056 ops/s
# Warmup Iteration   8: 6942597.834 ops/s
# Warmup Iteration   9: 6857795.529 ops/s
# Warmup Iteration  10: 6941549.475 ops/s
# Warmup Iteration  11: 6856306.860 ops/s
# Warmup Iteration  12: 6815056.659 ops/s
# Warmup Iteration  13: 6808758.686 ops/s
# Warmup Iteration  14: 6876019.882 ops/s
# Warmup Iteration  15: 6881384.988 ops/s
# Warmup Iteration  16: 6914254.222 ops/s
# Warmup Iteration  17: 6830071.510 ops/s
# Warmup Iteration  18: 6810830.640 ops/s
# Warmup Iteration  19: 6854412.356 ops/s
# Warmup Iteration  20: 6883645.741 ops/s
# Warmup Iteration  21: 6818010.745 ops/s
# Warmup Iteration  22: 6801323.550 ops/s
# Warmup Iteration  23: 6790130.356 ops/s
# Warmup Iteration  24: 6841536.683 ops/s
# Warmup Iteration  25: 6915963.140 ops/s
# Warmup Iteration  26: 6796732.081 ops/s
# Warmup Iteration  27: 6779575.120 ops/s
# Warmup Iteration  28: 6844835.809 ops/s
# Warmup Iteration  29: 6911034.847 ops/s
# Warmup Iteration  30: 6968843.068 ops/s
Iteration   1: 6760981.676 ops/s
Iteration   2: 6915003.824 ops/s
Iteration   3: 6842103.872 ops/s
Iteration   4: 6793016.672 ops/s
Iteration   5: 6736224.629 ops/s
Iteration   6: 6829973.096 ops/s
Iteration   7: 6895602.799 ops/s
Iteration   8: 6824410.888 ops/s
Iteration   9: 6756634.739 ops/s
Iteration  10: 6838604.989 ops/s
Iteration  11: 6746188.991 ops/s
Iteration  12: 6729424.984 ops/s
Iteration  13: 6839040.756 ops/s
Iteration  14: 6763198.945 ops/s
Iteration  15: 6867139.683 ops/s
Iteration  16: 6842452.187 ops/s
Iteration  17: 6769615.167 ops/s
Iteration  18: 7068474.911 ops/s
Iteration  19: 6919990.114 ops/s
Iteration  20: 6826184.136 ops/s
Iteration  21: 6867800.688 ops/s
Iteration  22: 6823403.898 ops/s
Iteration  23: 6859580.505 ops/s
Iteration  24: 6810059.602 ops/s
Iteration  25: 6749315.718 ops/s
Iteration  26: 6764024.630 ops/s
Iteration  27: 6895598.386 ops/s
Iteration  28: 6857717.864 ops/s
Iteration  29: 6770382.236 ops/s
Iteration  30: 6773305.445 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_rejectWithIndex":
  6824515.201 ±(99.9%) 47806.509 ops/s [Average]
  (min, avg, max) = (6729424.984, 6824515.201, 7068474.911), stdev = 71554.537
  CI (99.9%): [6776708.692, 6872321.710] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  6824515.201 ± 47806.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1831890.311 ops/s
# Warmup Iteration   2: 4088059.287 ops/s
# Warmup Iteration   3: 4398032.274 ops/s
# Warmup Iteration   4: 4423511.228 ops/s
# Warmup Iteration   5: 3690323.501 ops/s
# Warmup Iteration   6: 4387730.588 ops/s
# Warmup Iteration   7: 4424796.899 ops/s
# Warmup Iteration   8: 4410411.497 ops/s
# Warmup Iteration   9: 4385752.773 ops/s
# Warmup Iteration  10: 4372176.109 ops/s
# Warmup Iteration  11: 4434771.306 ops/s
# Warmup Iteration  12: 4418778.056 ops/s
# Warmup Iteration  13: 4438583.884 ops/s
# Warmup Iteration  14: 4435031.051 ops/s
# Warmup Iteration  15: 4370486.873 ops/s
# Warmup Iteration  16: 4440614.194 ops/s
# Warmup Iteration  17: 4419606.682 ops/s
# Warmup Iteration  18: 4450451.423 ops/s
# Warmup Iteration  19: 4388460.485 ops/s
# Warmup Iteration  20: 4350451.848 ops/s
# Warmup Iteration  21: 4379343.182 ops/s
# Warmup Iteration  22: 4407025.378 ops/s
# Warmup Iteration  23: 4413439.149 ops/s
# Warmup Iteration  24: 4486660.693 ops/s
# Warmup Iteration  25: 4392879.235 ops/s
# Warmup Iteration  26: 4367708.744 ops/s
# Warmup Iteration  27: 4372830.914 ops/s
# Warmup Iteration  28: 4403182.781 ops/s
# Warmup Iteration  29: 4456494.309 ops/s
# Warmup Iteration  30: 4402654.967 ops/s
Iteration   1: 4367304.866 ops/s
Iteration   2: 4449806.016 ops/s
Iteration   3: 4324599.272 ops/s
Iteration   4: 4404099.840 ops/s
Iteration   5: 4380030.329 ops/s
Iteration   6: 4394169.189 ops/s
Iteration   7: 4407751.872 ops/s
Iteration   8: 4380873.861 ops/s
Iteration   9: 4369459.393 ops/s
Iteration  10: 4570164.278 ops/s
Iteration  11: 4394670.552 ops/s
Iteration  12: 4393194.895 ops/s
Iteration  13: 4458762.051 ops/s
Iteration  14: 4372992.467 ops/s
Iteration  15: 4389829.423 ops/s
Iteration  16: 4353720.287 ops/s
Iteration  17: 4485148.079 ops/s
Iteration  18: 4416922.383 ops/s
Iteration  19: 4418433.896 ops/s
Iteration  20: 4386526.279 ops/s
Iteration  21: 4307066.425 ops/s
Iteration  22: 4441189.973 ops/s
Iteration  23: 4326787.758 ops/s
Iteration  24: 4355625.254 ops/s
Iteration  25: 4378005.791 ops/s
Iteration  26: 4363208.384 ops/s
Iteration  27: 4412631.789 ops/s
Iteration  28: 4544999.364 ops/s
Iteration  29: 4461961.796 ops/s
Iteration  30: 4385959.821 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  4403196.520 ±(99.9%) 39031.012 ops/s [Average]
  (min, avg, max) = (4307066.425, 4403196.520, 4570164.278), stdev = 58419.785
  CI (99.9%): [4364165.508, 4442227.531] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  4403196.520 ± 39031.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2004483.918 ops/s
# Warmup Iteration   2: 3913616.110 ops/s
# Warmup Iteration   3: 4318377.933 ops/s
# Warmup Iteration   4: 4301884.708 ops/s
# Warmup Iteration   5: 3510482.502 ops/s
# Warmup Iteration   6: 4294353.992 ops/s
# Warmup Iteration   7: 4319333.060 ops/s
# Warmup Iteration   8: 4402970.487 ops/s
# Warmup Iteration   9: 4316437.906 ops/s
# Warmup Iteration  10: 4279258.977 ops/s
# Warmup Iteration  11: 4314938.668 ops/s
# Warmup Iteration  12: 4313159.846 ops/s
# Warmup Iteration  13: 4322482.707 ops/s
# Warmup Iteration  14: 4324123.245 ops/s
# Warmup Iteration  15: 4327024.671 ops/s
# Warmup Iteration  16: 4296037.692 ops/s
# Warmup Iteration  17: 4329934.468 ops/s
# Warmup Iteration  18: 4405196.477 ops/s
# Warmup Iteration  19: 4279487.384 ops/s
# Warmup Iteration  20: 4284206.038 ops/s
# Warmup Iteration  21: 4331072.611 ops/s
# Warmup Iteration  22: 4339532.843 ops/s
# Warmup Iteration  23: 4301214.701 ops/s
# Warmup Iteration  24: 4306673.282 ops/s
# Warmup Iteration  25: 4286422.946 ops/s
# Warmup Iteration  26: 4350928.044 ops/s
# Warmup Iteration  27: 4330527.272 ops/s
# Warmup Iteration  28: 4273165.617 ops/s
# Warmup Iteration  29: 4362346.414 ops/s
# Warmup Iteration  30: 4358554.732 ops/s
Iteration   1: 4257034.781 ops/s
Iteration   2: 4324485.019 ops/s
Iteration   3: 4302026.660 ops/s
Iteration   4: 4357017.411 ops/s
Iteration   5: 4224886.485 ops/s
Iteration   6: 4368842.898 ops/s
Iteration   7: 4292643.943 ops/s
Iteration   8: 4319684.019 ops/s
Iteration   9: 4354178.628 ops/s
Iteration  10: 4295197.046 ops/s
Iteration  11: 4274514.206 ops/s
Iteration  12: 4292676.659 ops/s
Iteration  13: 4246720.739 ops/s
Iteration  14: 4332106.018 ops/s
Iteration  15: 4326975.331 ops/s
Iteration  16: 4347685.574 ops/s
Iteration  17: 4363699.419 ops/s
Iteration  18: 4347997.783 ops/s
Iteration  19: 4339775.667 ops/s
Iteration  20: 4280704.574 ops/s
Iteration  21: 4351584.046 ops/s
Iteration  22: 4344238.635 ops/s
Iteration  23: 4323472.376 ops/s
Iteration  24: 4314258.080 ops/s
Iteration  25: 4257086.290 ops/s
Iteration  26: 4282931.952 ops/s
Iteration  27: 4332140.009 ops/s
Iteration  28: 4324385.044 ops/s
Iteration  29: 4521869.009 ops/s
Iteration  30: 4333599.236 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_rejectWith_target":
  4321147.251 ±(99.9%) 35406.139 ops/s [Average]
  (min, avg, max) = (4224886.485, 4321147.251, 4521869.009), stdev = 52994.246
  CI (99.9%): [4285741.112, 4356553.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  4321147.251 ± 35406.139  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_reject_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_reject_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3618133.435 ops/s
# Warmup Iteration   2: 8993741.661 ops/s
# Warmup Iteration   3: 9342013.887 ops/s
# Warmup Iteration   4: 7436769.219 ops/s
# Warmup Iteration   5: 9281002.949 ops/s
# Warmup Iteration   6: 9256279.655 ops/s
# Warmup Iteration   7: 9250501.244 ops/s
# Warmup Iteration   8: 9328280.100 ops/s
# Warmup Iteration   9: 9335776.805 ops/s
# Warmup Iteration  10: 9250587.537 ops/s
# Warmup Iteration  11: 9074481.629 ops/s
# Warmup Iteration  12: 9259683.463 ops/s
# Warmup Iteration  13: 9320166.203 ops/s
# Warmup Iteration  14: 9252276.225 ops/s
# Warmup Iteration  15: 9142302.441 ops/s
# Warmup Iteration  16: 9191447.628 ops/s
# Warmup Iteration  17: 9299874.081 ops/s
# Warmup Iteration  18: 9284538.577 ops/s
# Warmup Iteration  19: 9206749.532 ops/s
# Warmup Iteration  20: 9151706.644 ops/s
# Warmup Iteration  21: 9216350.170 ops/s
# Warmup Iteration  22: 9223267.287 ops/s
# Warmup Iteration  23: 9531940.263 ops/s
# Warmup Iteration  24: 9256365.767 ops/s
# Warmup Iteration  25: 9298423.185 ops/s
# Warmup Iteration  26: 9274618.275 ops/s
# Warmup Iteration  27: 9151340.404 ops/s
# Warmup Iteration  28: 9099137.216 ops/s
# Warmup Iteration  29: 9562107.178 ops/s
# Warmup Iteration  30: 9209761.837 ops/s
Iteration   1: 9168553.291 ops/s
Iteration   2: 9095258.213 ops/s
Iteration   3: 9223776.848 ops/s
Iteration   4: 9280032.036 ops/s
Iteration   5: 9213068.588 ops/s
Iteration   6: 9107898.828 ops/s
Iteration   7: 9121310.079 ops/s
Iteration   8: 9251408.700 ops/s
Iteration   9: 9326354.309 ops/s
Iteration  10: 9262476.454 ops/s
Iteration  11: 9154575.092 ops/s
Iteration  12: 9198596.039 ops/s
Iteration  13: 9094578.903 ops/s
Iteration  14: 9307101.813 ops/s
Iteration  15: 9075909.238 ops/s
Iteration  16: 9262721.141 ops/s
Iteration  17: 9188028.522 ops/s
Iteration  18: 9180317.146 ops/s
Iteration  19: 9236986.486 ops/s
Iteration  20: 9241600.934 ops/s
Iteration  21: 9094481.008 ops/s
Iteration  22: 9378799.687 ops/s
Iteration  23: 9191727.725 ops/s
Iteration  24: 9224979.739 ops/s
Iteration  25: 9167445.852 ops/s
Iteration  26: 9529218.578 ops/s
Iteration  27: 9103490.795 ops/s
Iteration  28: 9270853.799 ops/s
Iteration  29: 9372411.204 ops/s
Iteration  30: 9109900.158 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_reject_target":
  9214462.040 ±(99.9%) 68297.207 ops/s [Average]
  (min, avg, max) = (9075909.238, 9214462.040, 9529218.578), stdev = 102224.051
  CI (99.9%): [9146164.834, 9282759.247] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_reject_target  thrpt   30  9214462.040 ± 68297.207  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 633819.974 ops/s
# Warmup Iteration   2: 661530.553 ops/s
# Warmup Iteration   3: 783795.970 ops/s
# Warmup Iteration   4: 832666.853 ops/s
# Warmup Iteration   5: 825670.147 ops/s
# Warmup Iteration   6: 825801.316 ops/s
# Warmup Iteration   7: 831434.804 ops/s
# Warmup Iteration   8: 836532.296 ops/s
# Warmup Iteration   9: 826470.252 ops/s
# Warmup Iteration  10: 833149.587 ops/s
# Warmup Iteration  11: 834756.213 ops/s
# Warmup Iteration  12: 836235.107 ops/s
# Warmup Iteration  13: 802933.767 ops/s
# Warmup Iteration  14: 720723.586 ops/s
# Warmup Iteration  15: 837624.031 ops/s
# Warmup Iteration  16: 848116.241 ops/s
# Warmup Iteration  17: 883665.164 ops/s
# Warmup Iteration  18: 878431.892 ops/s
# Warmup Iteration  19: 872175.305 ops/s
# Warmup Iteration  20: 880986.380 ops/s
# Warmup Iteration  21: 878481.620 ops/s
# Warmup Iteration  22: 887980.677 ops/s
# Warmup Iteration  23: 890429.065 ops/s
# Warmup Iteration  24: 889225.364 ops/s
# Warmup Iteration  25: 881702.545 ops/s
# Warmup Iteration  26: 898877.615 ops/s
# Warmup Iteration  27: 896358.857 ops/s
# Warmup Iteration  28: 901238.566 ops/s
# Warmup Iteration  29: 894653.832 ops/s
# Warmup Iteration  30: 885345.258 ops/s
Iteration   1: 880464.287 ops/s
Iteration   2: 886246.602 ops/s
Iteration   3: 888178.563 ops/s
Iteration   4: 853162.139 ops/s
Iteration   5: 881882.328 ops/s
Iteration   6: 887926.483 ops/s
Iteration   7: 897194.184 ops/s
Iteration   8: 887235.194 ops/s
Iteration   9: 883272.352 ops/s
Iteration  10: 881514.034 ops/s
Iteration  11: 888418.354 ops/s
Iteration  12: 885147.961 ops/s
Iteration  13: 875861.603 ops/s
Iteration  14: 896458.890 ops/s
Iteration  15: 876280.929 ops/s
Iteration  16: 875884.292 ops/s
Iteration  17: 875343.100 ops/s
Iteration  18: 881896.342 ops/s
Iteration  19: 884504.516 ops/s
Iteration  20: 897450.424 ops/s
Iteration  21: 899737.756 ops/s
Iteration  22: 875019.358 ops/s
Iteration  23: 895357.349 ops/s
Iteration  24: 909326.360 ops/s
Iteration  25: 885179.646 ops/s
Iteration  26: 883009.267 ops/s
Iteration  27: 881734.400 ops/s
Iteration  28: 884803.920 ops/s
Iteration  29: 895253.741 ops/s
Iteration  30: 883091.377 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_remove":
  885227.858 ±(99.9%) 6811.822 ops/s [Average]
  (min, avg, max) = (853162.139, 885227.858, 909326.360), stdev = 10195.616
  CI (99.9%): [878416.036, 892039.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_remove  thrpt   30  885227.858 ± 6811.822  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 637321.238 ops/s
# Warmup Iteration   2: 676521.503 ops/s
# Warmup Iteration   3: 823521.325 ops/s
# Warmup Iteration   4: 858770.586 ops/s
# Warmup Iteration   5: 845729.831 ops/s
# Warmup Iteration   6: 844974.474 ops/s
# Warmup Iteration   7: 856690.347 ops/s
# Warmup Iteration   8: 855098.344 ops/s
# Warmup Iteration   9: 846997.856 ops/s
# Warmup Iteration  10: 846939.107 ops/s
# Warmup Iteration  11: 848832.815 ops/s
# Warmup Iteration  12: 865615.449 ops/s
# Warmup Iteration  13: 731020.344 ops/s
# Warmup Iteration  14: 810247.550 ops/s
# Warmup Iteration  15: 866729.087 ops/s
# Warmup Iteration  16: 846424.082 ops/s
# Warmup Iteration  17: 904163.220 ops/s
# Warmup Iteration  18: 898868.012 ops/s
# Warmup Iteration  19: 907035.555 ops/s
# Warmup Iteration  20: 900192.574 ops/s
# Warmup Iteration  21: 895977.448 ops/s
# Warmup Iteration  22: 905262.231 ops/s
# Warmup Iteration  23: 907121.496 ops/s
# Warmup Iteration  24: 901406.569 ops/s
# Warmup Iteration  25: 910135.499 ops/s
# Warmup Iteration  26: 909604.545 ops/s
# Warmup Iteration  27: 915389.427 ops/s
# Warmup Iteration  28: 906558.178 ops/s
# Warmup Iteration  29: 906555.548 ops/s
# Warmup Iteration  30: 903864.095 ops/s
Iteration   1: 908870.499 ops/s
Iteration   2: 940195.954 ops/s
Iteration   3: 909776.965 ops/s
Iteration   4: 887868.496 ops/s
Iteration   5: 893680.954 ops/s
Iteration   6: 891550.384 ops/s
Iteration   7: 900040.649 ops/s
Iteration   8: 912128.375 ops/s
Iteration   9: 894671.424 ops/s
Iteration  10: 919869.201 ops/s
Iteration  11: 914356.271 ops/s
Iteration  12: 913367.448 ops/s
Iteration  13: 921853.639 ops/s
Iteration  14: 933003.583 ops/s
Iteration  15: 905680.151 ops/s
Iteration  16: 897254.905 ops/s
Iteration  17: 952332.923 ops/s
Iteration  18: 925958.957 ops/s
Iteration  19: 891080.645 ops/s
Iteration  20: 908013.199 ops/s
Iteration  21: 901089.646 ops/s
Iteration  22: 915317.622 ops/s
Iteration  23: 905800.187 ops/s
Iteration  24: 942123.229 ops/s
Iteration  25: 890068.872 ops/s
Iteration  26: 933268.405 ops/s
Iteration  27: 906126.991 ops/s
Iteration  28: 897791.007 ops/s
Iteration  29: 891139.622 ops/s
Iteration  30: 894824.517 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_removeAll":
  909970.157 ±(99.9%) 11492.891 ops/s [Average]
  (min, avg, max) = (887868.496, 909970.157, 952332.923), stdev = 17202.019
  CI (99.9%): [898477.266, 921463.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_removeAll  thrpt   30  909970.157 ± 11492.891  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 656024.745 ops/s
# Warmup Iteration   2: 668244.457 ops/s
# Warmup Iteration   3: 821920.386 ops/s
# Warmup Iteration   4: 852702.807 ops/s
# Warmup Iteration   5: 857100.171 ops/s
# Warmup Iteration   6: 853202.310 ops/s
# Warmup Iteration   7: 864551.298 ops/s
# Warmup Iteration   8: 856674.977 ops/s
# Warmup Iteration   9: 854726.206 ops/s
# Warmup Iteration  10: 861883.403 ops/s
# Warmup Iteration  11: 861589.546 ops/s
# Warmup Iteration  12: 859014.309 ops/s
# Warmup Iteration  13: 758370.731 ops/s
# Warmup Iteration  14: 821324.000 ops/s
# Warmup Iteration  15: 848515.519 ops/s
# Warmup Iteration  16: 858909.997 ops/s
# Warmup Iteration  17: 917589.582 ops/s
# Warmup Iteration  18: 911936.012 ops/s
# Warmup Iteration  19: 915506.413 ops/s
# Warmup Iteration  20: 904748.170 ops/s
# Warmup Iteration  21: 920819.901 ops/s
# Warmup Iteration  22: 903623.262 ops/s
# Warmup Iteration  23: 905420.112 ops/s
# Warmup Iteration  24: 911483.355 ops/s
# Warmup Iteration  25: 908612.713 ops/s
# Warmup Iteration  26: 929170.815 ops/s
# Warmup Iteration  27: 915164.189 ops/s
# Warmup Iteration  28: 901327.201 ops/s
# Warmup Iteration  29: 918861.438 ops/s
# Warmup Iteration  30: 914893.845 ops/s
Iteration   1: 914066.492 ops/s
Iteration   2: 914679.406 ops/s
Iteration   3: 899920.376 ops/s
Iteration   4: 907080.932 ops/s
Iteration   5: 919948.779 ops/s
Iteration   6: 919917.005 ops/s
Iteration   7: 917733.619 ops/s
Iteration   8: 936195.895 ops/s
Iteration   9: 923144.051 ops/s
Iteration  10: 902712.104 ops/s
Iteration  11: 901480.051 ops/s
Iteration  12: 923068.375 ops/s
Iteration  13: 939640.099 ops/s
Iteration  14: 924155.226 ops/s
Iteration  15: 909543.004 ops/s
Iteration  16: 911273.337 ops/s
Iteration  17: 921249.478 ops/s
Iteration  18: 896044.948 ops/s
Iteration  19: 908775.015 ops/s
Iteration  20: 905430.537 ops/s
Iteration  21: 915449.878 ops/s
Iteration  22: 914947.714 ops/s
Iteration  23: 903984.695 ops/s
Iteration  24: 910798.717 ops/s
Iteration  25: 916519.402 ops/s
Iteration  26: 900566.588 ops/s
Iteration  27: 922719.650 ops/s
Iteration  28: 912313.411 ops/s
Iteration  29: 906058.282 ops/s
Iteration  30: 913231.884 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_removeAtIndex":
  913754.965 ±(99.9%) 6770.610 ops/s [Average]
  (min, avg, max) = (896044.948, 913754.965, 939640.099), stdev = 10133.930
  CI (99.9%): [906984.355, 920525.575] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  913754.965 ± 6770.610  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 659242.531 ops/s
# Warmup Iteration   2: 672173.113 ops/s
# Warmup Iteration   3: 833073.177 ops/s
# Warmup Iteration   4: 876458.698 ops/s
# Warmup Iteration   5: 862304.228 ops/s
# Warmup Iteration   6: 880883.917 ops/s
# Warmup Iteration   7: 876949.083 ops/s
# Warmup Iteration   8: 859862.827 ops/s
# Warmup Iteration   9: 869225.710 ops/s
# Warmup Iteration  10: 864322.760 ops/s
# Warmup Iteration  11: 879421.182 ops/s
# Warmup Iteration  12: 868089.354 ops/s
# Warmup Iteration  13: 718866.251 ops/s
# Warmup Iteration  14: 856818.269 ops/s
# Warmup Iteration  15: 865223.291 ops/s
# Warmup Iteration  16: 870995.057 ops/s
# Warmup Iteration  17: 911262.486 ops/s
# Warmup Iteration  18: 929680.880 ops/s
# Warmup Iteration  19: 930131.026 ops/s
# Warmup Iteration  20: 917015.741 ops/s
# Warmup Iteration  21: 919694.985 ops/s
# Warmup Iteration  22: 916052.465 ops/s
# Warmup Iteration  23: 933060.407 ops/s
# Warmup Iteration  24: 920611.810 ops/s
# Warmup Iteration  25: 930181.245 ops/s
# Warmup Iteration  26: 926916.261 ops/s
# Warmup Iteration  27: 934754.986 ops/s
# Warmup Iteration  28: 920028.135 ops/s
# Warmup Iteration  29: 925111.714 ops/s
# Warmup Iteration  30: 922892.562 ops/s
Iteration   1: 928977.700 ops/s
Iteration   2: 914819.865 ops/s
Iteration   3: 915739.827 ops/s
Iteration   4: 921566.223 ops/s
Iteration   5: 926460.392 ops/s
Iteration   6: 922485.008 ops/s
Iteration   7: 919821.285 ops/s
Iteration   8: 912677.970 ops/s
Iteration   9: 944659.189 ops/s
Iteration  10: 926585.336 ops/s
Iteration  11: 923021.069 ops/s
Iteration  12: 922114.277 ops/s
Iteration  13: 931182.685 ops/s
Iteration  14: 913055.735 ops/s
Iteration  15: 908868.444 ops/s
Iteration  16: 920283.323 ops/s
Iteration  17: 899370.273 ops/s
Iteration  18: 915936.350 ops/s
Iteration  19: 931555.888 ops/s
Iteration  20: 916732.649 ops/s
Iteration  21: 928655.934 ops/s
Iteration  22: 940975.682 ops/s
Iteration  23: 930412.725 ops/s
Iteration  24: 914840.011 ops/s
Iteration  25: 914813.043 ops/s
Iteration  26: 913012.823 ops/s
Iteration  27: 913729.377 ops/s
Iteration  28: 918184.024 ops/s
Iteration  29: 928611.497 ops/s
Iteration  30: 925498.476 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_replaceAll":
  921488.236 ±(99.9%) 6307.181 ops/s [Average]
  (min, avg, max) = (899370.273, 921488.236, 944659.189), stdev = 9440.292
  CI (99.9%): [915181.055, 927795.417] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_replaceAll  thrpt   30  921488.236 ± 6307.181  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 630439.394 ops/s
# Warmup Iteration   2: 662925.700 ops/s
# Warmup Iteration   3: 792043.892 ops/s
# Warmup Iteration   4: 845862.695 ops/s
# Warmup Iteration   5: 849279.945 ops/s
# Warmup Iteration   6: 851841.885 ops/s
# Warmup Iteration   7: 844764.963 ops/s
# Warmup Iteration   8: 843093.012 ops/s
# Warmup Iteration   9: 848592.534 ops/s
# Warmup Iteration  10: 848396.482 ops/s
# Warmup Iteration  11: 843925.670 ops/s
# Warmup Iteration  12: 841899.228 ops/s
# Warmup Iteration  13: 769274.728 ops/s
# Warmup Iteration  14: 786027.017 ops/s
# Warmup Iteration  15: 846534.375 ops/s
# Warmup Iteration  16: 843213.292 ops/s
# Warmup Iteration  17: 893847.950 ops/s
# Warmup Iteration  18: 896650.266 ops/s
# Warmup Iteration  19: 900938.673 ops/s
# Warmup Iteration  20: 899832.854 ops/s
# Warmup Iteration  21: 917204.671 ops/s
# Warmup Iteration  22: 909461.810 ops/s
# Warmup Iteration  23: 900092.795 ops/s
# Warmup Iteration  24: 902897.752 ops/s
# Warmup Iteration  25: 904880.111 ops/s
# Warmup Iteration  26: 941745.031 ops/s
# Warmup Iteration  27: 906596.980 ops/s
# Warmup Iteration  28: 900061.050 ops/s
# Warmup Iteration  29: 907709.408 ops/s
# Warmup Iteration  30: 903616.313 ops/s
Iteration   1: 903763.255 ops/s
Iteration   2: 898955.691 ops/s
Iteration   3: 887786.603 ops/s
Iteration   4: 904201.582 ops/s
Iteration   5: 907289.088 ops/s
Iteration   6: 908698.933 ops/s
Iteration   7: 892163.686 ops/s
Iteration   8: 906129.488 ops/s
Iteration   9: 892657.257 ops/s
Iteration  10: 905946.387 ops/s
Iteration  11: 895263.812 ops/s
Iteration  12: 896785.132 ops/s
Iteration  13: 893779.715 ops/s
Iteration  14: 895695.809 ops/s
Iteration  15: 898463.959 ops/s
Iteration  16: 913494.118 ops/s
Iteration  17: 890760.553 ops/s
Iteration  18: 905438.254 ops/s
Iteration  19: 906425.720 ops/s
Iteration  20: 908075.427 ops/s
Iteration  21: 902869.026 ops/s
Iteration  22: 887302.103 ops/s
Iteration  23: 897014.886 ops/s
Iteration  24: 906483.607 ops/s
Iteration  25: 916721.983 ops/s
Iteration  26: 890028.386 ops/s
Iteration  27: 900553.746 ops/s
Iteration  28: 892624.789 ops/s
Iteration  29: 907432.897 ops/s
Iteration  30: 905947.943 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_retainAll":
  900625.128 ±(99.9%) 5157.432 ops/s [Average]
  (min, avg, max) = (887302.103, 900625.128, 916721.983), stdev = 7719.401
  CI (99.9%): [895467.696, 905782.559] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_retainAll  thrpt   30  900625.128 ± 5157.432  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3789018.807 ops/s
# Warmup Iteration   2: 7354277.706 ops/s
# Warmup Iteration   3: 7861658.914 ops/s
# Warmup Iteration   4: 7908607.803 ops/s
# Warmup Iteration   5: 6408429.699 ops/s
# Warmup Iteration   6: 7950519.452 ops/s
# Warmup Iteration   7: 8006667.357 ops/s
# Warmup Iteration   8: 7932317.265 ops/s
# Warmup Iteration   9: 7947968.824 ops/s
# Warmup Iteration  10: 8053154.242 ops/s
# Warmup Iteration  11: 7992027.898 ops/s
# Warmup Iteration  12: 8011051.074 ops/s
# Warmup Iteration  13: 7977512.855 ops/s
# Warmup Iteration  14: 7968422.413 ops/s
# Warmup Iteration  15: 7940681.996 ops/s
# Warmup Iteration  16: 7953961.045 ops/s
# Warmup Iteration  17: 7825870.724 ops/s
# Warmup Iteration  18: 7929122.255 ops/s
# Warmup Iteration  19: 7946829.411 ops/s
# Warmup Iteration  20: 8082743.345 ops/s
# Warmup Iteration  21: 7745912.810 ops/s
# Warmup Iteration  22: 8005772.802 ops/s
# Warmup Iteration  23: 7881036.759 ops/s
# Warmup Iteration  24: 7961371.516 ops/s
# Warmup Iteration  25: 7894184.272 ops/s
# Warmup Iteration  26: 7914577.125 ops/s
# Warmup Iteration  27: 8043126.105 ops/s
# Warmup Iteration  28: 7942723.699 ops/s
# Warmup Iteration  29: 7825421.666 ops/s
# Warmup Iteration  30: 7988887.761 ops/s
Iteration   1: 7821919.442 ops/s
Iteration   2: 7894862.148 ops/s
Iteration   3: 8029160.907 ops/s
Iteration   4: 7886330.360 ops/s
Iteration   5: 7998801.970 ops/s
Iteration   6: 7984225.963 ops/s
Iteration   7: 7954624.752 ops/s
Iteration   8: 8004238.512 ops/s
Iteration   9: 8048582.059 ops/s
Iteration  10: 8104074.980 ops/s
Iteration  11: 7938192.444 ops/s
Iteration  12: 7897083.791 ops/s
Iteration  13: 7881915.749 ops/s
Iteration  14: 8041759.358 ops/s
Iteration  15: 7992584.979 ops/s
Iteration  16: 7941623.381 ops/s
Iteration  17: 7896665.545 ops/s
Iteration  18: 8020041.427 ops/s
Iteration  19: 8301815.521 ops/s
Iteration  20: 8213226.351 ops/s
Iteration  21: 7881671.687 ops/s
Iteration  22: 7872023.496 ops/s
Iteration  23: 7998754.772 ops/s
Iteration  24: 7938309.659 ops/s
Iteration  25: 8011257.549 ops/s
Iteration  26: 8022963.921 ops/s
Iteration  27: 8019939.090 ops/s
Iteration  28: 7931647.287 ops/s
Iteration  29: 7929302.896 ops/s
Iteration  30: 7955750.709 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_reverseForEach":
  7980445.023 ±(99.9%) 66655.795 ops/s [Average]
  (min, avg, max) = (7821919.442, 7980445.023, 8301815.521), stdev = 99767.263
  CI (99.9%): [7913789.229, 8047100.818] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_reverseForEach  thrpt   30  7980445.023 ± 66655.795  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4092695.151 ops/s
# Warmup Iteration   2: 6016145.041 ops/s
# Warmup Iteration   3: 7470867.796 ops/s
# Warmup Iteration   4: 7320821.065 ops/s
# Warmup Iteration   5: 7443126.748 ops/s
# Warmup Iteration   6: 7247678.256 ops/s
# Warmup Iteration   7: 5890941.272 ops/s
# Warmup Iteration   8: 7357914.836 ops/s
# Warmup Iteration   9: 7453928.380 ops/s
# Warmup Iteration  10: 7396063.684 ops/s
# Warmup Iteration  11: 7504639.214 ops/s
# Warmup Iteration  12: 7373217.198 ops/s
# Warmup Iteration  13: 7466717.422 ops/s
# Warmup Iteration  14: 7371615.720 ops/s
# Warmup Iteration  15: 7447192.203 ops/s
# Warmup Iteration  16: 7389431.913 ops/s
# Warmup Iteration  17: 7490401.198 ops/s
# Warmup Iteration  18: 7432740.645 ops/s
# Warmup Iteration  19: 7439653.496 ops/s
# Warmup Iteration  20: 7456286.675 ops/s
# Warmup Iteration  21: 7372482.212 ops/s
# Warmup Iteration  22: 7396049.443 ops/s
# Warmup Iteration  23: 7370604.156 ops/s
# Warmup Iteration  24: 7476125.644 ops/s
# Warmup Iteration  25: 7644616.355 ops/s
# Warmup Iteration  26: 7304296.228 ops/s
# Warmup Iteration  27: 7402401.901 ops/s
# Warmup Iteration  28: 7450290.247 ops/s
# Warmup Iteration  29: 7396568.848 ops/s
# Warmup Iteration  30: 7377311.055 ops/s
Iteration   1: 7509441.289 ops/s
Iteration   2: 7362318.036 ops/s
Iteration   3: 7483310.322 ops/s
Iteration   4: 7354609.440 ops/s
Iteration   5: 7543120.622 ops/s
Iteration   6: 7301113.214 ops/s
Iteration   7: 7436876.403 ops/s
Iteration   8: 7348573.154 ops/s
Iteration   9: 7599205.445 ops/s
Iteration  10: 7501386.155 ops/s
Iteration  11: 7275347.371 ops/s
Iteration  12: 7290740.341 ops/s
Iteration  13: 7352118.672 ops/s
Iteration  14: 7403796.665 ops/s
Iteration  15: 7342632.800 ops/s
Iteration  16: 7426007.269 ops/s
Iteration  17: 7308129.653 ops/s
Iteration  18: 7391518.442 ops/s
Iteration  19: 7364262.960 ops/s
Iteration  20: 7474451.478 ops/s
Iteration  21: 7329440.082 ops/s
Iteration  22: 7334670.547 ops/s
Iteration  23: 7482246.807 ops/s
Iteration  24: 7353698.404 ops/s
Iteration  25: 7401532.507 ops/s
Iteration  26: 7354500.907 ops/s
Iteration  27: 7385106.252 ops/s
Iteration  28: 7419211.220 ops/s
Iteration  29: 7346468.625 ops/s
Iteration  30: 7344652.218 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_reverseForEachWithIndex":
  7394016.243 ±(99.9%) 52838.303 ops/s [Average]
  (min, avg, max) = (7275347.371, 7394016.243, 7599205.445), stdev = 79085.891
  CI (99.9%): [7341177.940, 7446854.547] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  7394016.243 ± 52838.303  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2671028.776 ops/s
# Warmup Iteration   2: 5252362.669 ops/s
# Warmup Iteration   3: 5826581.174 ops/s
# Warmup Iteration   4: 5868758.841 ops/s
# Warmup Iteration   5: 4682827.748 ops/s
# Warmup Iteration   6: 5777723.710 ops/s
# Warmup Iteration   7: 5762299.026 ops/s
# Warmup Iteration   8: 5747179.038 ops/s
# Warmup Iteration   9: 5821223.011 ops/s
# Warmup Iteration  10: 5781131.498 ops/s
# Warmup Iteration  11: 5833241.126 ops/s
# Warmup Iteration  12: 5699152.959 ops/s
# Warmup Iteration  13: 5804177.556 ops/s
# Warmup Iteration  14: 5773241.535 ops/s
# Warmup Iteration  15: 5789307.236 ops/s
# Warmup Iteration  16: 5762610.826 ops/s
# Warmup Iteration  17: 5823861.306 ops/s
# Warmup Iteration  18: 5835232.967 ops/s
# Warmup Iteration  19: 5802941.237 ops/s
# Warmup Iteration  20: 5835091.947 ops/s
# Warmup Iteration  21: 5894313.854 ops/s
# Warmup Iteration  22: 5861344.873 ops/s
# Warmup Iteration  23: 5868544.857 ops/s
# Warmup Iteration  24: 5803846.821 ops/s
# Warmup Iteration  25: 5824448.067 ops/s
# Warmup Iteration  26: 5871812.949 ops/s
# Warmup Iteration  27: 5855579.314 ops/s
# Warmup Iteration  28: 5868090.191 ops/s
# Warmup Iteration  29: 5806554.836 ops/s
# Warmup Iteration  30: 5800061.635 ops/s
Iteration   1: 5744913.047 ops/s
Iteration   2: 5849948.207 ops/s
Iteration   3: 5785597.784 ops/s
Iteration   4: 6032268.521 ops/s
Iteration   5: 5856079.112 ops/s
Iteration   6: 5867161.074 ops/s
Iteration   7: 5815958.939 ops/s
Iteration   8: 5759784.481 ops/s
Iteration   9: 5885490.447 ops/s
Iteration  10: 5812652.546 ops/s
Iteration  11: 5740698.203 ops/s
Iteration  12: 5898275.746 ops/s
Iteration  13: 5810376.662 ops/s
Iteration  14: 5863250.844 ops/s
Iteration  15: 5864317.748 ops/s
Iteration  16: 5862186.986 ops/s
Iteration  17: 5825847.513 ops/s
Iteration  18: 6014508.354 ops/s
Iteration  19: 5790975.419 ops/s
Iteration  20: 5753188.528 ops/s
Iteration  21: 5800016.560 ops/s
Iteration  22: 5871926.535 ops/s
Iteration  23: 6356233.487 ops/s
Iteration  24: 5977029.286 ops/s
Iteration  25: 5805873.958 ops/s
Iteration  26: 5888578.630 ops/s
Iteration  27: 5770285.711 ops/s
Iteration  28: 5696189.119 ops/s
Iteration  29: 5771545.854 ops/s
Iteration  30: 5806454.105 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_select":
  5852587.114 ±(99.9%) 81757.291 ops/s [Average]
  (min, avg, max) = (5696189.119, 5852587.114, 6356233.487), stdev = 122370.473
  CI (99.9%): [5770829.823, 5934344.404] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_select  thrpt   30  5852587.114 ± 81757.291  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3190562.755 ops/s
# Warmup Iteration   2: 4988891.416 ops/s
# Warmup Iteration   3: 5976042.199 ops/s
# Warmup Iteration   4: 5926073.379 ops/s
# Warmup Iteration   5: 5811364.853 ops/s
# Warmup Iteration   6: 5887294.405 ops/s
# Warmup Iteration   7: 5859419.882 ops/s
# Warmup Iteration   8: 4774035.612 ops/s
# Warmup Iteration   9: 5875224.769 ops/s
# Warmup Iteration  10: 5938256.301 ops/s
# Warmup Iteration  11: 5881683.540 ops/s
# Warmup Iteration  12: 5867060.974 ops/s
# Warmup Iteration  13: 5797756.705 ops/s
# Warmup Iteration  14: 5886808.855 ops/s
# Warmup Iteration  15: 5798043.878 ops/s
# Warmup Iteration  16: 5861011.051 ops/s
# Warmup Iteration  17: 5849621.109 ops/s
# Warmup Iteration  18: 5811609.176 ops/s
# Warmup Iteration  19: 5811319.442 ops/s
# Warmup Iteration  20: 5794349.728 ops/s
# Warmup Iteration  21: 5795021.237 ops/s
# Warmup Iteration  22: 5829230.514 ops/s
# Warmup Iteration  23: 5870699.658 ops/s
# Warmup Iteration  24: 5970842.035 ops/s
# Warmup Iteration  25: 5871496.216 ops/s
# Warmup Iteration  26: 5824504.877 ops/s
# Warmup Iteration  27: 5792152.753 ops/s
# Warmup Iteration  28: 5785481.088 ops/s
# Warmup Iteration  29: 5748527.864 ops/s
# Warmup Iteration  30: 5755905.911 ops/s
Iteration   1: 5818752.960 ops/s
Iteration   2: 5732155.450 ops/s
Iteration   3: 5838984.595 ops/s
Iteration   4: 5810145.061 ops/s
Iteration   5: 5987972.813 ops/s
Iteration   6: 5846822.784 ops/s
Iteration   7: 5855736.877 ops/s
Iteration   8: 5821618.162 ops/s
Iteration   9: 5865914.717 ops/s
Iteration  10: 5789635.685 ops/s
Iteration  11: 5905651.194 ops/s
Iteration  12: 5798878.976 ops/s
Iteration  13: 5857301.356 ops/s
Iteration  14: 5794535.662 ops/s
Iteration  15: 5805234.242 ops/s
Iteration  16: 5758028.524 ops/s
Iteration  17: 5855223.588 ops/s
Iteration  18: 5851870.903 ops/s
Iteration  19: 5777461.845 ops/s
Iteration  20: 5959144.509 ops/s
Iteration  21: 5812973.964 ops/s
Iteration  22: 5885841.870 ops/s
Iteration  23: 5810146.976 ops/s
Iteration  24: 5818631.082 ops/s
Iteration  25: 5779672.506 ops/s
Iteration  26: 5882273.887 ops/s
Iteration  27: 5910704.727 ops/s
Iteration  28: 5800077.861 ops/s
Iteration  29: 5823467.851 ops/s
Iteration  30: 5937116.779 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectInstancesOf":
  5839732.580 ±(99.9%) 39112.475 ops/s [Average]
  (min, avg, max) = (5732155.450, 5839732.580, 5987972.813), stdev = 58541.716
  CI (99.9%): [5800620.105, 5878845.055] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  5839732.580 ± 39112.475  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1703913.085 ops/s
# Warmup Iteration   2: 3208703.137 ops/s
# Warmup Iteration   3: 3554172.197 ops/s
# Warmup Iteration   4: 3588587.107 ops/s
# Warmup Iteration   5: 3349633.886 ops/s
# Warmup Iteration   6: 3090731.514 ops/s
# Warmup Iteration   7: 3602824.786 ops/s
# Warmup Iteration   8: 3634385.014 ops/s
# Warmup Iteration   9: 3636702.680 ops/s
# Warmup Iteration  10: 3590743.084 ops/s
# Warmup Iteration  11: 3585247.105 ops/s
# Warmup Iteration  12: 3635675.821 ops/s
# Warmup Iteration  13: 3590980.559 ops/s
# Warmup Iteration  14: 3607151.663 ops/s
# Warmup Iteration  15: 3623460.983 ops/s
# Warmup Iteration  16: 3594071.444 ops/s
# Warmup Iteration  17: 3666039.571 ops/s
# Warmup Iteration  18: 3663629.587 ops/s
# Warmup Iteration  19: 3595714.446 ops/s
# Warmup Iteration  20: 3594752.175 ops/s
# Warmup Iteration  21: 3547899.501 ops/s
# Warmup Iteration  22: 3594487.434 ops/s
# Warmup Iteration  23: 3625629.016 ops/s
# Warmup Iteration  24: 3622653.050 ops/s
# Warmup Iteration  25: 3631487.356 ops/s
# Warmup Iteration  26: 3639436.736 ops/s
# Warmup Iteration  27: 3597385.613 ops/s
# Warmup Iteration  28: 3599128.132 ops/s
# Warmup Iteration  29: 3614761.974 ops/s
# Warmup Iteration  30: 3582166.606 ops/s
Iteration   1: 3640023.738 ops/s
Iteration   2: 3565265.579 ops/s
Iteration   3: 3619892.853 ops/s
Iteration   4: 3608948.403 ops/s
Iteration   5: 3757159.955 ops/s
Iteration   6: 3653403.581 ops/s
Iteration   7: 3570797.524 ops/s
Iteration   8: 3599743.241 ops/s
Iteration   9: 3596003.082 ops/s
Iteration  10: 3638581.848 ops/s
Iteration  11: 3637459.572 ops/s
Iteration  12: 3547768.517 ops/s
Iteration  13: 3576384.920 ops/s
Iteration  14: 3646678.130 ops/s
Iteration  15: 3649216.311 ops/s
Iteration  16: 3714778.121 ops/s
Iteration  17: 3494518.321 ops/s
Iteration  18: 3473894.953 ops/s
Iteration  19: 3612183.343 ops/s
Iteration  20: 3617425.369 ops/s
Iteration  21: 3625116.435 ops/s
Iteration  22: 3555174.944 ops/s
Iteration  23: 3576671.722 ops/s
Iteration  24: 3681171.378 ops/s
Iteration  25: 3580250.245 ops/s
Iteration  26: 3653480.100 ops/s
Iteration  27: 3591741.693 ops/s
Iteration  28: 3575781.204 ops/s
Iteration  29: 3638836.589 ops/s
Iteration  30: 3585177.637 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectWith":
  3609450.977 ±(99.9%) 38413.082 ops/s [Average]
  (min, avg, max) = (3473894.953, 3609450.977, 3757159.955), stdev = 57494.897
  CI (99.9%): [3571037.895, 3647864.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_selectWith  thrpt   30  3609450.977 ± 38413.082  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3246647.047 ops/s
# Warmup Iteration   2: 6157038.811 ops/s
# Warmup Iteration   3: 6728850.053 ops/s
# Warmup Iteration   4: 6726094.506 ops/s
# Warmup Iteration   5: 5989484.622 ops/s
# Warmup Iteration   6: 6299769.633 ops/s
# Warmup Iteration   7: 6775963.325 ops/s
# Warmup Iteration   8: 6710161.534 ops/s
# Warmup Iteration   9: 6674345.564 ops/s
# Warmup Iteration  10: 6723239.704 ops/s
# Warmup Iteration  11: 6696293.385 ops/s
# Warmup Iteration  12: 6704004.891 ops/s
# Warmup Iteration  13: 6678899.098 ops/s
# Warmup Iteration  14: 6668491.823 ops/s
# Warmup Iteration  15: 6778526.744 ops/s
# Warmup Iteration  16: 6714929.897 ops/s
# Warmup Iteration  17: 6655802.592 ops/s
# Warmup Iteration  18: 6692290.161 ops/s
# Warmup Iteration  19: 6734717.665 ops/s
# Warmup Iteration  20: 6711881.628 ops/s
# Warmup Iteration  21: 6678435.868 ops/s
# Warmup Iteration  22: 6663576.312 ops/s
# Warmup Iteration  23: 6790005.270 ops/s
# Warmup Iteration  24: 6689431.166 ops/s
# Warmup Iteration  25: 6696313.079 ops/s
# Warmup Iteration  26: 6693780.553 ops/s
# Warmup Iteration  27: 6703859.532 ops/s
# Warmup Iteration  28: 6628950.759 ops/s
# Warmup Iteration  29: 6709202.201 ops/s
# Warmup Iteration  30: 6653924.736 ops/s
Iteration   1: 6715028.876 ops/s
Iteration   2: 6623015.773 ops/s
Iteration   3: 6795111.738 ops/s
Iteration   4: 6702758.404 ops/s
Iteration   5: 6770799.677 ops/s
Iteration   6: 6657251.774 ops/s
Iteration   7: 6652573.331 ops/s
Iteration   8: 6698457.783 ops/s
Iteration   9: 6631047.848 ops/s
Iteration  10: 6743652.434 ops/s
Iteration  11: 6686497.385 ops/s
Iteration  12: 6653639.347 ops/s
Iteration  13: 6757027.790 ops/s
Iteration  14: 6651069.939 ops/s
Iteration  15: 6539981.247 ops/s
Iteration  16: 6601129.072 ops/s
Iteration  17: 6733637.387 ops/s
Iteration  18: 6794062.980 ops/s
Iteration  19: 6608045.407 ops/s
Iteration  20: 6744431.315 ops/s
Iteration  21: 6708543.936 ops/s
Iteration  22: 6734779.642 ops/s
Iteration  23: 6708331.596 ops/s
Iteration  24: 6598321.013 ops/s
Iteration  25: 6704396.809 ops/s
Iteration  26: 6626406.486 ops/s
Iteration  27: 6697580.471 ops/s
Iteration  28: 6768088.577 ops/s
Iteration  29: 6708181.278 ops/s
Iteration  30: 6763492.362 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectWithIndex":
  6692578.056 ±(99.9%) 42787.289 ops/s [Average]
  (min, avg, max) = (6539981.247, 6692578.056, 6795111.738), stdev = 64042.004
  CI (99.9%): [6649790.767, 6735365.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  6692578.056 ± 42787.289  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1846759.836 ops/s
# Warmup Iteration   2: 4165952.237 ops/s
# Warmup Iteration   3: 4435564.178 ops/s
# Warmup Iteration   4: 4383033.776 ops/s
# Warmup Iteration   5: 3677316.743 ops/s
# Warmup Iteration   6: 4399223.655 ops/s
# Warmup Iteration   7: 4498517.713 ops/s
# Warmup Iteration   8: 4417333.034 ops/s
# Warmup Iteration   9: 4388876.952 ops/s
# Warmup Iteration  10: 4398798.687 ops/s
# Warmup Iteration  11: 4438145.460 ops/s
# Warmup Iteration  12: 4401113.995 ops/s
# Warmup Iteration  13: 4399311.339 ops/s
# Warmup Iteration  14: 4414022.742 ops/s
# Warmup Iteration  15: 4405862.969 ops/s
# Warmup Iteration  16: 4457302.627 ops/s
# Warmup Iteration  17: 4378977.630 ops/s
# Warmup Iteration  18: 4387267.629 ops/s
# Warmup Iteration  19: 4408479.375 ops/s
# Warmup Iteration  20: 4390954.495 ops/s
# Warmup Iteration  21: 4416865.989 ops/s
# Warmup Iteration  22: 4393509.999 ops/s
# Warmup Iteration  23: 4444998.930 ops/s
# Warmup Iteration  24: 4439292.729 ops/s
# Warmup Iteration  25: 4445200.554 ops/s
# Warmup Iteration  26: 4428580.080 ops/s
# Warmup Iteration  27: 4399531.534 ops/s
# Warmup Iteration  28: 4387860.444 ops/s
# Warmup Iteration  29: 4382800.501 ops/s
# Warmup Iteration  30: 4420075.477 ops/s
Iteration   1: 4519072.867 ops/s
Iteration   2: 4401630.785 ops/s
Iteration   3: 4439409.236 ops/s
Iteration   4: 4390277.401 ops/s
Iteration   5: 4369396.934 ops/s
Iteration   6: 4646234.591 ops/s
Iteration   7: 4405472.876 ops/s
Iteration   8: 4467481.841 ops/s
Iteration   9: 4423586.259 ops/s
Iteration  10: 4403071.047 ops/s
Iteration  11: 4458690.670 ops/s
Iteration  12: 4467018.038 ops/s
Iteration  13: 4450911.951 ops/s
Iteration  14: 4504455.219 ops/s
Iteration  15: 4499926.886 ops/s
Iteration  16: 4380099.795 ops/s
Iteration  17: 4439342.849 ops/s
Iteration  18: 4438314.899 ops/s
Iteration  19: 4390415.728 ops/s
Iteration  20: 4482311.557 ops/s
Iteration  21: 4414550.093 ops/s
Iteration  22: 4438205.055 ops/s
Iteration  23: 4507366.768 ops/s
Iteration  24: 4379946.412 ops/s
Iteration  25: 4382782.856 ops/s
Iteration  26: 4397587.012 ops/s
Iteration  27: 4478519.287 ops/s
Iteration  28: 4426249.259 ops/s
Iteration  29: 4435210.981 ops/s
Iteration  30: 4452751.157 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  4443009.677 ±(99.9%) 37943.466 ops/s [Average]
  (min, avg, max) = (4369396.934, 4443009.677, 4646234.591), stdev = 56791.997
  CI (99.9%): [4405066.211, 4480953.143] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  4443009.677 ± 37943.466  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1952544.844 ops/s
# Warmup Iteration   2: 3677982.683 ops/s
# Warmup Iteration   3: 4062812.818 ops/s
# Warmup Iteration   4: 4108223.600 ops/s
# Warmup Iteration   5: 3715301.274 ops/s
# Warmup Iteration   6: 3821332.334 ops/s
# Warmup Iteration   7: 4117270.133 ops/s
# Warmup Iteration   8: 4110360.747 ops/s
# Warmup Iteration   9: 4139951.635 ops/s
# Warmup Iteration  10: 4088183.306 ops/s
# Warmup Iteration  11: 4085948.112 ops/s
# Warmup Iteration  12: 4110521.774 ops/s
# Warmup Iteration  13: 4066768.754 ops/s
# Warmup Iteration  14: 4110620.384 ops/s
# Warmup Iteration  15: 4089957.996 ops/s
# Warmup Iteration  16: 4039649.378 ops/s
# Warmup Iteration  17: 4117385.813 ops/s
# Warmup Iteration  18: 4081126.467 ops/s
# Warmup Iteration  19: 4043015.180 ops/s
# Warmup Iteration  20: 4062431.033 ops/s
# Warmup Iteration  21: 4054415.816 ops/s
# Warmup Iteration  22: 4112470.304 ops/s
# Warmup Iteration  23: 4042692.751 ops/s
# Warmup Iteration  24: 4070242.324 ops/s
# Warmup Iteration  25: 4076987.855 ops/s
# Warmup Iteration  26: 4182933.557 ops/s
# Warmup Iteration  27: 4074524.782 ops/s
# Warmup Iteration  28: 4052595.055 ops/s
# Warmup Iteration  29: 4112781.953 ops/s
# Warmup Iteration  30: 4056590.020 ops/s
Iteration   1: 4138599.004 ops/s
Iteration   2: 4105326.344 ops/s
Iteration   3: 4098315.860 ops/s
Iteration   4: 4103840.338 ops/s
Iteration   5: 4071528.351 ops/s
Iteration   6: 4085658.944 ops/s
Iteration   7: 4124351.431 ops/s
Iteration   8: 3983629.648 ops/s
Iteration   9: 4038873.456 ops/s
Iteration  10: 4110450.895 ops/s
Iteration  11: 4085339.877 ops/s
Iteration  12: 4083904.859 ops/s
Iteration  13: 4080261.155 ops/s
Iteration  14: 4019707.868 ops/s
Iteration  15: 4084436.024 ops/s
Iteration  16: 4106796.356 ops/s
Iteration  17: 4040020.317 ops/s
Iteration  18: 4080189.761 ops/s
Iteration  19: 4057054.889 ops/s
Iteration  20: 4102774.468 ops/s
Iteration  21: 4138506.538 ops/s
Iteration  22: 4144841.693 ops/s
Iteration  23: 4114702.011 ops/s
Iteration  24: 4070545.300 ops/s
Iteration  25: 4070622.518 ops/s
Iteration  26: 4136285.089 ops/s
Iteration  27: 4136415.420 ops/s
Iteration  28: 4041959.035 ops/s
Iteration  29: 4140358.266 ops/s
Iteration  30: 4112528.428 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_selectWith_target":
  4090260.805 ±(99.9%) 26132.094 ops/s [Average]
  (min, avg, max) = (3983629.648, 4090260.805, 4144841.693), stdev = 39113.291
  CI (99.9%): [4064128.711, 4116392.898] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_selectWith_target  thrpt   30  4090260.805 ± 26132.094  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_select_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_select_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3743842.175 ops/s
# Warmup Iteration   2: 8864822.257 ops/s
# Warmup Iteration   3: 9460107.217 ops/s
# Warmup Iteration   4: 7869585.553 ops/s
# Warmup Iteration   5: 9480016.273 ops/s
# Warmup Iteration   6: 9480470.614 ops/s
# Warmup Iteration   7: 9509593.264 ops/s
# Warmup Iteration   8: 9378663.960 ops/s
# Warmup Iteration   9: 9512676.969 ops/s
# Warmup Iteration  10: 9491969.251 ops/s
# Warmup Iteration  11: 9432387.307 ops/s
# Warmup Iteration  12: 9410748.697 ops/s
# Warmup Iteration  13: 9408504.588 ops/s
# Warmup Iteration  14: 9456706.059 ops/s
# Warmup Iteration  15: 9431771.792 ops/s
# Warmup Iteration  16: 9619384.656 ops/s
# Warmup Iteration  17: 9367346.009 ops/s
# Warmup Iteration  18: 9356126.973 ops/s
# Warmup Iteration  19: 9504113.985 ops/s
# Warmup Iteration  20: 9628140.206 ops/s
# Warmup Iteration  21: 9399008.680 ops/s
# Warmup Iteration  22: 9529699.894 ops/s
# Warmup Iteration  23: 9471104.351 ops/s
# Warmup Iteration  24: 9752593.964 ops/s
# Warmup Iteration  25: 9445383.019 ops/s
# Warmup Iteration  26: 9588503.937 ops/s
# Warmup Iteration  27: 9549300.707 ops/s
# Warmup Iteration  28: 9423919.905 ops/s
# Warmup Iteration  29: 9512309.246 ops/s
# Warmup Iteration  30: 9425409.757 ops/s
Iteration   1: 9590322.704 ops/s
Iteration   2: 9468651.034 ops/s
Iteration   3: 9467056.072 ops/s
Iteration   4: 9475150.135 ops/s
Iteration   5: 9517665.979 ops/s
Iteration   6: 9447816.851 ops/s
Iteration   7: 9545364.380 ops/s
Iteration   8: 9508076.782 ops/s
Iteration   9: 9466142.726 ops/s
Iteration  10: 9611075.471 ops/s
Iteration  11: 9501292.216 ops/s
Iteration  12: 9734331.550 ops/s
Iteration  13: 9480287.998 ops/s
Iteration  14: 9345003.863 ops/s
Iteration  15: 9500739.520 ops/s
Iteration  16: 9385548.298 ops/s
Iteration  17: 9577251.905 ops/s
Iteration  18: 9423911.098 ops/s
Iteration  19: 9481567.060 ops/s
Iteration  20: 9504351.592 ops/s
Iteration  21: 9514106.772 ops/s
Iteration  22: 9573016.894 ops/s
Iteration  23: 9515498.247 ops/s
Iteration  24: 9517387.451 ops/s
Iteration  25: 9474530.482 ops/s
Iteration  26: 9516351.238 ops/s
Iteration  27: 9525308.300 ops/s
Iteration  28: 9333855.692 ops/s
Iteration  29: 9525555.177 ops/s
Iteration  30: 9698047.891 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_select_target":
  9507508.846 ±(99.9%) 56507.059 ops/s [Average]
  (min, avg, max) = (9333855.692, 9507508.846, 9734331.550), stdev = 84577.112
  CI (99.9%): [9451001.787, 9564015.905] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_select_target  thrpt   30  9507508.846 ± 56507.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 649843.284 ops/s
# Warmup Iteration   2: 680763.195 ops/s
# Warmup Iteration   3: 825422.215 ops/s
# Warmup Iteration   4: 880072.117 ops/s
# Warmup Iteration   5: 876313.628 ops/s
# Warmup Iteration   6: 871625.179 ops/s
# Warmup Iteration   7: 864261.977 ops/s
# Warmup Iteration   8: 878932.458 ops/s
# Warmup Iteration   9: 870806.409 ops/s
# Warmup Iteration  10: 871345.196 ops/s
# Warmup Iteration  11: 863340.995 ops/s
# Warmup Iteration  12: 864942.585 ops/s
# Warmup Iteration  13: 752259.653 ops/s
# Warmup Iteration  14: 824912.120 ops/s
# Warmup Iteration  15: 869003.142 ops/s
# Warmup Iteration  16: 876814.037 ops/s
# Warmup Iteration  17: 923490.481 ops/s
# Warmup Iteration  18: 925553.655 ops/s
# Warmup Iteration  19: 928698.896 ops/s
# Warmup Iteration  20: 921209.207 ops/s
# Warmup Iteration  21: 930227.779 ops/s
# Warmup Iteration  22: 927262.622 ops/s
# Warmup Iteration  23: 914780.406 ops/s
# Warmup Iteration  24: 922475.070 ops/s
# Warmup Iteration  25: 908136.356 ops/s
# Warmup Iteration  26: 921312.436 ops/s
# Warmup Iteration  27: 922146.814 ops/s
# Warmup Iteration  28: 915723.186 ops/s
# Warmup Iteration  29: 920869.306 ops/s
# Warmup Iteration  30: 926612.555 ops/s
Iteration   1: 914161.621 ops/s
Iteration   2: 933391.669 ops/s
Iteration   3: 905359.818 ops/s
Iteration   4: 927628.558 ops/s
Iteration   5: 922910.866 ops/s
Iteration   6: 925000.164 ops/s
Iteration   7: 928165.971 ops/s
Iteration   8: 919546.919 ops/s
Iteration   9: 939432.676 ops/s
Iteration  10: 923259.996 ops/s
Iteration  11: 913666.937 ops/s
Iteration  12: 922865.614 ops/s
Iteration  13: 925156.083 ops/s
Iteration  14: 938857.637 ops/s
Iteration  15: 904911.020 ops/s
Iteration  16: 924422.359 ops/s
Iteration  17: 927413.513 ops/s
Iteration  18: 924559.052 ops/s
Iteration  19: 922079.662 ops/s
Iteration  20: 928138.323 ops/s
Iteration  21: 921965.778 ops/s
Iteration  22: 921712.521 ops/s
Iteration  23: 929576.160 ops/s
Iteration  24: 923236.699 ops/s
Iteration  25: 925871.436 ops/s
Iteration  26: 913863.376 ops/s
Iteration  27: 906888.096 ops/s
Iteration  28: 917758.661 ops/s
Iteration  29: 909572.713 ops/s
Iteration  30: 965483.899 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_set":
  923561.927 ±(99.9%) 7800.918 ops/s [Average]
  (min, avg, max) = (904911.020, 923561.927, 965483.899), stdev = 11676.047
  CI (99.9%): [915761.009, 931362.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_set  thrpt   30  923561.927 ± 7800.918  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 653970.639 ops/s
# Warmup Iteration   2: 681651.301 ops/s
# Warmup Iteration   3: 834817.276 ops/s
# Warmup Iteration   4: 867752.930 ops/s
# Warmup Iteration   5: 887427.038 ops/s
# Warmup Iteration   6: 865401.723 ops/s
# Warmup Iteration   7: 871471.859 ops/s
# Warmup Iteration   8: 873463.815 ops/s
# Warmup Iteration   9: 866535.774 ops/s
# Warmup Iteration  10: 874344.161 ops/s
# Warmup Iteration  11: 868271.776 ops/s
# Warmup Iteration  12: 867040.647 ops/s
# Warmup Iteration  13: 725332.355 ops/s
# Warmup Iteration  14: 849981.138 ops/s
# Warmup Iteration  15: 870575.529 ops/s
# Warmup Iteration  16: 869437.632 ops/s
# Warmup Iteration  17: 927392.167 ops/s
# Warmup Iteration  18: 927541.622 ops/s
# Warmup Iteration  19: 924067.701 ops/s
# Warmup Iteration  20: 914000.602 ops/s
# Warmup Iteration  21: 924616.497 ops/s
# Warmup Iteration  22: 933318.899 ops/s
# Warmup Iteration  23: 920233.678 ops/s
# Warmup Iteration  24: 926511.354 ops/s
# Warmup Iteration  25: 918857.397 ops/s
# Warmup Iteration  26: 924364.090 ops/s
# Warmup Iteration  27: 919214.959 ops/s
# Warmup Iteration  28: 920536.789 ops/s
# Warmup Iteration  29: 928682.493 ops/s
# Warmup Iteration  30: 921980.184 ops/s
Iteration   1: 917624.992 ops/s
Iteration   2: 898725.472 ops/s
Iteration   3: 924204.147 ops/s
Iteration   4: 929617.802 ops/s
Iteration   5: 926548.913 ops/s
Iteration   6: 914037.340 ops/s
Iteration   7: 922526.882 ops/s
Iteration   8: 932838.968 ops/s
Iteration   9: 919170.163 ops/s
Iteration  10: 947069.732 ops/s
Iteration  11: 927451.391 ops/s
Iteration  12: 903819.555 ops/s
Iteration  13: 927077.647 ops/s
Iteration  14: 927552.214 ops/s
Iteration  15: 914936.221 ops/s
Iteration  16: 938243.233 ops/s
Iteration  17: 921905.608 ops/s
Iteration  18: 923201.345 ops/s
Iteration  19: 922415.405 ops/s
Iteration  20: 919084.507 ops/s
Iteration  21: 961223.306 ops/s
Iteration  22: 930272.606 ops/s
Iteration  23: 920770.464 ops/s
Iteration  24: 924600.687 ops/s
Iteration  25: 934820.523 ops/s
Iteration  26: 932347.198 ops/s
Iteration  27: 925514.671 ops/s
Iteration  28: 924787.747 ops/s
Iteration  29: 950733.532 ops/s
Iteration  30: 933351.088 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sort":
  926549.112 ±(99.9%) 8269.848 ops/s [Average]
  (min, avg, max) = (898725.472, 926549.112, 961223.306), stdev = 12377.921
  CI (99.9%): [918279.263, 934818.960] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_sort  thrpt   30  926549.112 ± 8269.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 148347.712 ops/s
# Warmup Iteration   2: 264244.580 ops/s
# Warmup Iteration   3: 322699.165 ops/s
# Warmup Iteration   4: 325261.463 ops/s
# Warmup Iteration   5: 326613.746 ops/s
# Warmup Iteration   6: 297719.085 ops/s
# Warmup Iteration   7: 282205.091 ops/s
# Warmup Iteration   8: 324908.538 ops/s
# Warmup Iteration   9: 327929.872 ops/s
# Warmup Iteration  10: 323731.590 ops/s
# Warmup Iteration  11: 322465.847 ops/s
# Warmup Iteration  12: 321426.402 ops/s
# Warmup Iteration  13: 326299.619 ops/s
# Warmup Iteration  14: 316746.114 ops/s
# Warmup Iteration  15: 326663.821 ops/s
# Warmup Iteration  16: 324883.778 ops/s
# Warmup Iteration  17: 322837.994 ops/s
# Warmup Iteration  18: 323579.330 ops/s
# Warmup Iteration  19: 323110.139 ops/s
# Warmup Iteration  20: 326410.812 ops/s
# Warmup Iteration  21: 323973.102 ops/s
# Warmup Iteration  22: 323352.532 ops/s
# Warmup Iteration  23: 319803.009 ops/s
# Warmup Iteration  24: 323144.422 ops/s
# Warmup Iteration  25: 324235.729 ops/s
# Warmup Iteration  26: 321892.431 ops/s
# Warmup Iteration  27: 323482.234 ops/s
# Warmup Iteration  28: 321657.773 ops/s
# Warmup Iteration  29: 322383.639 ops/s
# Warmup Iteration  30: 320737.773 ops/s
Iteration   1: 324644.012 ops/s
Iteration   2: 330151.864 ops/s
Iteration   3: 321107.300 ops/s
Iteration   4: 323926.237 ops/s
Iteration   5: 325872.931 ops/s
Iteration   6: 324904.385 ops/s
Iteration   7: 325517.628 ops/s
Iteration   8: 321353.322 ops/s
Iteration   9: 321852.218 ops/s
Iteration  10: 320787.927 ops/s
Iteration  11: 325079.231 ops/s
Iteration  12: 348667.955 ops/s
Iteration  13: 324757.901 ops/s
Iteration  14: 322099.736 ops/s
Iteration  15: 320082.001 ops/s
Iteration  16: 321723.105 ops/s
Iteration  17: 322445.165 ops/s
Iteration  18: 319574.072 ops/s
Iteration  19: 320330.267 ops/s
Iteration  20: 343072.956 ops/s
Iteration  21: 327800.305 ops/s
Iteration  22: 321350.304 ops/s
Iteration  23: 320299.210 ops/s
Iteration  24: 321263.934 ops/s
Iteration  25: 328325.532 ops/s
Iteration  26: 320620.644 ops/s
Iteration  27: 325854.357 ops/s
Iteration  28: 324737.723 ops/s
Iteration  29: 324503.398 ops/s
Iteration  30: 325901.185 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_stream":
  324953.560 ±(99.9%) 4229.503 ops/s [Average]
  (min, avg, max) = (319574.072, 324953.560, 348667.955), stdev = 6330.522
  CI (99.9%): [320724.057, 329183.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_stream  thrpt   30  324953.560 ± 4229.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15118027.320 ops/s
# Warmup Iteration   2: 34149552.700 ops/s
# Warmup Iteration   3: 27292111.667 ops/s
# Warmup Iteration   4: 33955711.533 ops/s
# Warmup Iteration   5: 33440791.788 ops/s
# Warmup Iteration   6: 33046214.908 ops/s
# Warmup Iteration   7: 33293121.358 ops/s
# Warmup Iteration   8: 33510653.171 ops/s
# Warmup Iteration   9: 33380302.160 ops/s
# Warmup Iteration  10: 32895355.315 ops/s
# Warmup Iteration  11: 33723347.583 ops/s
# Warmup Iteration  12: 33337054.684 ops/s
# Warmup Iteration  13: 33134003.787 ops/s
# Warmup Iteration  14: 33561124.325 ops/s
# Warmup Iteration  15: 33118407.561 ops/s
# Warmup Iteration  16: 33980948.062 ops/s
# Warmup Iteration  17: 33519526.993 ops/s
# Warmup Iteration  18: 33318566.380 ops/s
# Warmup Iteration  19: 33669246.627 ops/s
# Warmup Iteration  20: 33308456.270 ops/s
# Warmup Iteration  21: 33487905.519 ops/s
# Warmup Iteration  22: 32945969.955 ops/s
# Warmup Iteration  23: 33972235.593 ops/s
# Warmup Iteration  24: 33713636.786 ops/s
# Warmup Iteration  25: 33422467.934 ops/s
# Warmup Iteration  26: 33841210.365 ops/s
# Warmup Iteration  27: 33398290.587 ops/s
# Warmup Iteration  28: 33385444.875 ops/s
# Warmup Iteration  29: 33070295.114 ops/s
# Warmup Iteration  30: 32994380.531 ops/s
Iteration   1: 34159491.378 ops/s
Iteration   2: 32758335.796 ops/s
Iteration   3: 33319296.894 ops/s
Iteration   4: 33473638.638 ops/s
Iteration   5: 33590683.202 ops/s
Iteration   6: 32908503.461 ops/s
Iteration   7: 33118012.103 ops/s
Iteration   8: 34448161.714 ops/s
Iteration   9: 33679374.955 ops/s
Iteration  10: 32681060.072 ops/s
Iteration  11: 33530607.777 ops/s
Iteration  12: 33256091.489 ops/s
Iteration  13: 33015296.469 ops/s
Iteration  14: 33381736.163 ops/s
Iteration  15: 33834704.688 ops/s
Iteration  16: 33531204.043 ops/s
Iteration  17: 32857868.931 ops/s
Iteration  18: 32649651.110 ops/s
Iteration  19: 32975308.335 ops/s
Iteration  20: 33231207.156 ops/s
Iteration  21: 33084160.359 ops/s
Iteration  22: 33994262.540 ops/s
Iteration  23: 33125472.824 ops/s
Iteration  24: 33272208.399 ops/s
Iteration  25: 33266114.240 ops/s
Iteration  26: 33117655.278 ops/s
Iteration  27: 33586822.705 ops/s
Iteration  28: 33631593.663 ops/s
Iteration  29: 33100068.846 ops/s
Iteration  30: 33230674.732 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_subList":
  33326975.599 ±(99.9%) 282885.770 ops/s [Average]
  (min, avg, max) = (32649651.110, 33326975.599, 34448161.714), stdev = 423410.135
  CI (99.9%): [33044089.829, 33609861.369] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_subList  thrpt   30  33326975.599 ± 282885.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 564790.162 ops/s
# Warmup Iteration   2: 581903.588 ops/s
# Warmup Iteration   3: 651459.432 ops/s
# Warmup Iteration   4: 736675.196 ops/s
# Warmup Iteration   5: 761967.965 ops/s
# Warmup Iteration   6: 750533.604 ops/s
# Warmup Iteration   7: 741048.106 ops/s
# Warmup Iteration   8: 752560.936 ops/s
# Warmup Iteration   9: 735933.259 ops/s
# Warmup Iteration  10: 735678.895 ops/s
# Warmup Iteration  11: 736821.803 ops/s
# Warmup Iteration  12: 749061.700 ops/s
# Warmup Iteration  13: 741200.853 ops/s
# Warmup Iteration  14: 743604.015 ops/s
# Warmup Iteration  15: 698366.500 ops/s
# Warmup Iteration  16: 641029.587 ops/s
# Warmup Iteration  17: 779214.864 ops/s
# Warmup Iteration  18: 784782.738 ops/s
# Warmup Iteration  19: 793439.003 ops/s
# Warmup Iteration  20: 796477.855 ops/s
# Warmup Iteration  21: 770446.137 ops/s
# Warmup Iteration  22: 789732.825 ops/s
# Warmup Iteration  23: 788201.573 ops/s
# Warmup Iteration  24: 788101.838 ops/s
# Warmup Iteration  25: 799506.212 ops/s
# Warmup Iteration  26: 778410.311 ops/s
# Warmup Iteration  27: 787621.602 ops/s
# Warmup Iteration  28: 793042.761 ops/s
# Warmup Iteration  29: 787267.363 ops/s
# Warmup Iteration  30: 800972.851 ops/s
Iteration   1: 807135.813 ops/s
Iteration   2: 784282.056 ops/s
Iteration   3: 785814.473 ops/s
Iteration   4: 809193.973 ops/s
Iteration   5: 793459.180 ops/s
Iteration   6: 780864.794 ops/s
Iteration   7: 779999.793 ops/s
Iteration   8: 776033.541 ops/s
Iteration   9: 790517.386 ops/s
Iteration  10: 816838.579 ops/s
Iteration  11: 765840.984 ops/s
Iteration  12: 793260.768 ops/s
Iteration  13: 784835.918 ops/s
Iteration  14: 791268.161 ops/s
Iteration  15: 789023.402 ops/s
Iteration  16: 773302.366 ops/s
Iteration  17: 790001.264 ops/s
Iteration  18: 789197.322 ops/s
Iteration  19: 771485.009 ops/s
Iteration  20: 781196.479 ops/s
Iteration  21: 785199.840 ops/s
Iteration  22: 782698.929 ops/s
Iteration  23: 793694.421 ops/s
Iteration  24: 827189.430 ops/s
Iteration  25: 784082.072 ops/s
Iteration  26: 812024.993 ops/s
Iteration  27: 787028.998 ops/s
Iteration  28: 849186.792 ops/s
Iteration  29: 812152.603 ops/s
Iteration  30: 793325.563 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO":
  792671.163 ±(99.9%) 11730.203 ops/s [Average]
  (min, avg, max) = (765840.984, 792671.163, 849186.792), stdev = 17557.217
  CI (99.9%): [780940.960, 804401.367] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO  thrpt   30  792671.163 ± 11730.203  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_subListFromNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_subListFromNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 567623.838 ops/s
# Warmup Iteration   2: 580535.121 ops/s
# Warmup Iteration   3: 650390.651 ops/s
# Warmup Iteration   4: 738153.489 ops/s
# Warmup Iteration   5: 722241.192 ops/s
# Warmup Iteration   6: 727173.955 ops/s
# Warmup Iteration   7: 734079.404 ops/s
# Warmup Iteration   8: 730122.581 ops/s
# Warmup Iteration   9: 725104.948 ops/s
# Warmup Iteration  10: 731653.582 ops/s
# Warmup Iteration  11: 726636.602 ops/s
# Warmup Iteration  12: 726020.371 ops/s
# Warmup Iteration  13: 726614.342 ops/s
# Warmup Iteration  14: 735261.065 ops/s
# Warmup Iteration  15: 729050.577 ops/s
# Warmup Iteration  16: 649555.753 ops/s
# Warmup Iteration  17: 710210.182 ops/s
# Warmup Iteration  18: 781152.484 ops/s
# Warmup Iteration  19: 769450.607 ops/s
# Warmup Iteration  20: 768982.613 ops/s
# Warmup Iteration  21: 768634.790 ops/s
# Warmup Iteration  22: 785280.805 ops/s
# Warmup Iteration  23: 796678.738 ops/s
# Warmup Iteration  24: 772868.880 ops/s
# Warmup Iteration  25: 770117.846 ops/s
# Warmup Iteration  26: 782154.793 ops/s
# Warmup Iteration  27: 770265.317 ops/s
# Warmup Iteration  28: 764163.790 ops/s
# Warmup Iteration  29: 777746.168 ops/s
# Warmup Iteration  30: 775303.191 ops/s
Iteration   1: 757126.534 ops/s
Iteration   2: 781721.415 ops/s
Iteration   3: 781682.686 ops/s
Iteration   4: 779208.872 ops/s
Iteration   5: 783176.547 ops/s
Iteration   6: 788843.831 ops/s
Iteration   7: 781455.183 ops/s
Iteration   8: 774502.430 ops/s
Iteration   9: 831939.827 ops/s
Iteration  10: 767439.077 ops/s
Iteration  11: 759437.272 ops/s
Iteration  12: 767334.054 ops/s
Iteration  13: 825905.691 ops/s
Iteration  14: 779686.194 ops/s
Iteration  15: 784139.136 ops/s
Iteration  16: 770148.244 ops/s
Iteration  17: 767625.270 ops/s
Iteration  18: 777179.064 ops/s
Iteration  19: 773805.205 ops/s
Iteration  20: 769582.005 ops/s
Iteration  21: 783087.436 ops/s
Iteration  22: 776440.732 ops/s
Iteration  23: 832621.044 ops/s
Iteration  24: 776841.461 ops/s
Iteration  25: 777005.487 ops/s
Iteration  26: 780870.450 ops/s
Iteration  27: 798440.465 ops/s
Iteration  28: 770877.539 ops/s
Iteration  29: 771022.794 ops/s
Iteration  30: 762073.490 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_subListFromNegative":
  781040.648 ±(99.9%) 12543.664 ops/s [Average]
  (min, avg, max) = (757126.534, 781040.648, 832621.044), stdev = 18774.768
  CI (99.9%): [768496.984, 793584.312] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_subListFromNegative  thrpt   30  781040.648 ± 12543.664  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_subListToGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_subListToGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 578871.986 ops/s
# Warmup Iteration   2: 609165.596 ops/s
# Warmup Iteration   3: 655664.816 ops/s
# Warmup Iteration   4: 745518.627 ops/s
# Warmup Iteration   5: 745572.143 ops/s
# Warmup Iteration   6: 756226.405 ops/s
# Warmup Iteration   7: 744995.311 ops/s
# Warmup Iteration   8: 790265.184 ops/s
# Warmup Iteration   9: 748011.917 ops/s
# Warmup Iteration  10: 742416.730 ops/s
# Warmup Iteration  11: 747619.408 ops/s
# Warmup Iteration  12: 753298.755 ops/s
# Warmup Iteration  13: 763082.071 ops/s
# Warmup Iteration  14: 760240.751 ops/s
# Warmup Iteration  15: 750655.034 ops/s
# Warmup Iteration  16: 610715.046 ops/s
# Warmup Iteration  17: 791190.665 ops/s
# Warmup Iteration  18: 802996.635 ops/s
# Warmup Iteration  19: 818966.750 ops/s
# Warmup Iteration  20: 791361.423 ops/s
# Warmup Iteration  21: 785969.339 ops/s
# Warmup Iteration  22: 795849.647 ops/s
# Warmup Iteration  23: 791739.022 ops/s
# Warmup Iteration  24: 802483.587 ops/s
# Warmup Iteration  25: 797571.185 ops/s
# Warmup Iteration  26: 793481.035 ops/s
# Warmup Iteration  27: 798125.362 ops/s
# Warmup Iteration  28: 786818.008 ops/s
# Warmup Iteration  29: 791933.861 ops/s
# Warmup Iteration  30: 793975.848 ops/s
Iteration   1: 779844.163 ops/s
Iteration   2: 804197.418 ops/s
Iteration   3: 790345.741 ops/s
Iteration   4: 787918.234 ops/s
Iteration   5: 787203.073 ops/s
Iteration   6: 768633.222 ops/s
Iteration   7: 797956.785 ops/s
Iteration   8: 796025.403 ops/s
Iteration   9: 801395.575 ops/s
Iteration  10: 795300.265 ops/s
Iteration  11: 794949.711 ops/s
Iteration  12: 779414.921 ops/s
Iteration  13: 798862.787 ops/s
Iteration  14: 788017.849 ops/s
Iteration  15: 771843.859 ops/s
Iteration  16: 794892.124 ops/s
Iteration  17: 851391.912 ops/s
Iteration  18: 878036.670 ops/s
Iteration  19: 788318.386 ops/s
Iteration  20: 798476.370 ops/s
Iteration  21: 808481.592 ops/s
Iteration  22: 788768.185 ops/s
Iteration  23: 786114.432 ops/s
Iteration  24: 797906.301 ops/s
Iteration  25: 797746.152 ops/s
Iteration  26: 807477.522 ops/s
Iteration  27: 805854.415 ops/s
Iteration  28: 805268.354 ops/s
Iteration  29: 796623.883 ops/s
Iteration  30: 783743.310 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_subListToGreaterThanSize":
  797700.287 ±(99.9%) 14021.385 ops/s [Average]
  (min, avg, max) = (768633.222, 797700.287, 878036.670), stdev = 20986.551
  CI (99.9%): [783678.902, 811721.672] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_subListToGreaterThanSize  thrpt   30  797700.287 ± 14021.385  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 870460.952 ops/s
# Warmup Iteration   2: 1446685.618 ops/s
# Warmup Iteration   3: 1934080.131 ops/s
# Warmup Iteration   4: 1938291.592 ops/s
# Warmup Iteration   5: 1826101.435 ops/s
# Warmup Iteration   6: 1402889.266 ops/s
# Warmup Iteration   7: 1765229.103 ops/s
# Warmup Iteration   8: 1774471.662 ops/s
# Warmup Iteration   9: 1810317.410 ops/s
# Warmup Iteration  10: 1795253.140 ops/s
# Warmup Iteration  11: 1777858.295 ops/s
# Warmup Iteration  12: 1805474.319 ops/s
# Warmup Iteration  13: 1780834.389 ops/s
# Warmup Iteration  14: 1789917.714 ops/s
# Warmup Iteration  15: 1784278.777 ops/s
# Warmup Iteration  16: 1796592.448 ops/s
# Warmup Iteration  17: 1783415.205 ops/s
# Warmup Iteration  18: 1805085.048 ops/s
# Warmup Iteration  19: 1770252.062 ops/s
# Warmup Iteration  20: 1776001.965 ops/s
# Warmup Iteration  21: 1801483.886 ops/s
# Warmup Iteration  22: 1791440.501 ops/s
# Warmup Iteration  23: 1779808.413 ops/s
# Warmup Iteration  24: 1886921.892 ops/s
# Warmup Iteration  25: 1786536.195 ops/s
# Warmup Iteration  26: 1792624.090 ops/s
# Warmup Iteration  27: 1801568.446 ops/s
# Warmup Iteration  28: 1829995.992 ops/s
# Warmup Iteration  29: 1789040.280 ops/s
# Warmup Iteration  30: 1783253.635 ops/s
Iteration   1: 1787469.661 ops/s
Iteration   2: 1812185.757 ops/s
Iteration   3: 1822083.440 ops/s
Iteration   4: 1780869.472 ops/s
Iteration   5: 1781264.069 ops/s
Iteration   6: 1794111.752 ops/s
Iteration   7: 1797768.706 ops/s
Iteration   8: 1788954.363 ops/s
Iteration   9: 1766791.543 ops/s
Iteration  10: 1760642.576 ops/s
Iteration  11: 1818959.350 ops/s
Iteration  12: 1842270.454 ops/s
Iteration  13: 1796347.320 ops/s
Iteration  14: 1765261.050 ops/s
Iteration  15: 1779195.101 ops/s
Iteration  16: 1789494.046 ops/s
Iteration  17: 1808046.760 ops/s
Iteration  18: 1784391.646 ops/s
Iteration  19: 1785117.065 ops/s
Iteration  20: 1794245.168 ops/s
Iteration  21: 1801279.514 ops/s
Iteration  22: 1765729.548 ops/s
Iteration  23: 1793574.576 ops/s
Iteration  24: 1775715.851 ops/s
Iteration  25: 1795827.250 ops/s
Iteration  26: 1786953.798 ops/s
Iteration  27: 1809461.651 ops/s
Iteration  28: 1797540.622 ops/s
Iteration  29: 1795054.250 ops/s
Iteration  30: 1776391.398 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByDouble":
  1791766.592 ±(99.9%) 12050.774 ops/s [Average]
  (min, avg, max) = (1760642.576, 1791766.592, 1842270.454), stdev = 18037.033
  CI (99.9%): [1779715.818, 1803817.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_sumByDouble  thrpt   30  1791766.592 ± 12050.774  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54.090 ops/s
# Warmup Iteration   2: 58.705 ops/s
# Warmup Iteration   3: 89.035 ops/s
# Warmup Iteration   4: 88.523 ops/s
# Warmup Iteration   5: 86.795 ops/s
# Warmup Iteration   6: 87.864 ops/s
# Warmup Iteration   7: 88.826 ops/s
# Warmup Iteration   8: 88.792 ops/s
# Warmup Iteration   9: 89.233 ops/s
# Warmup Iteration  10: 83.879 ops/s
# Warmup Iteration  11: 77.628 ops/s
# Warmup Iteration  12: 90.484 ops/s
# Warmup Iteration  13: 91.544 ops/s
# Warmup Iteration  14: 89.814 ops/s
# Warmup Iteration  15: 90.316 ops/s
# Warmup Iteration  16: 89.678 ops/s
# Warmup Iteration  17: 90.455 ops/s
# Warmup Iteration  18: 89.725 ops/s
# Warmup Iteration  19: 88.398 ops/s
# Warmup Iteration  20: 90.787 ops/s
# Warmup Iteration  21: 87.934 ops/s
# Warmup Iteration  22: 90.491 ops/s
# Warmup Iteration  23: 88.008 ops/s
# Warmup Iteration  24: 88.361 ops/s
# Warmup Iteration  25: 90.938 ops/s
# Warmup Iteration  26: 90.747 ops/s
# Warmup Iteration  27: 90.278 ops/s
# Warmup Iteration  28: 88.815 ops/s
# Warmup Iteration  29: 91.468 ops/s
# Warmup Iteration  30: 88.201 ops/s
Iteration   1: 88.494 ops/s
Iteration   2: 90.707 ops/s
Iteration   3: 88.760 ops/s
Iteration   4: 90.150 ops/s
Iteration   5: 91.854 ops/s
Iteration   6: 88.686 ops/s
Iteration   7: 88.637 ops/s
Iteration   8: 88.468 ops/s
Iteration   9: 89.371 ops/s
Iteration  10: 89.866 ops/s
Iteration  11: 87.944 ops/s
Iteration  12: 87.655 ops/s
Iteration  13: 90.239 ops/s
Iteration  14: 86.918 ops/s
Iteration  15: 87.100 ops/s
Iteration  16: 86.591 ops/s
Iteration  17: 87.530 ops/s
Iteration  18: 87.505 ops/s
Iteration  19: 87.316 ops/s
Iteration  20: 88.940 ops/s
Iteration  21: 87.158 ops/s
Iteration  22: 86.423 ops/s
Iteration  23: 87.349 ops/s
Iteration  24: 88.899 ops/s
Iteration  25: 87.068 ops/s
Iteration  26: 87.815 ops/s
Iteration  27: 87.997 ops/s
Iteration  28: 87.455 ops/s
Iteration  29: 85.602 ops/s
Iteration  30: 88.098 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  88.220 ±(99.9%) 0.920 ops/s [Average]
  (min, avg, max) = (85.602, 88.220, 91.854), stdev = 1.376
  CI (99.9%): [87.300, 89.139] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt   Score   Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  88.220 ± 0.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 898205.337 ops/s
# Warmup Iteration   2: 1441663.583 ops/s
# Warmup Iteration   3: 1761161.675 ops/s
# Warmup Iteration   4: 1780305.963 ops/s
# Warmup Iteration   5: 1796634.805 ops/s
# Warmup Iteration   6: 1643098.339 ops/s
# Warmup Iteration   7: 1525908.932 ops/s
# Warmup Iteration   8: 1751707.378 ops/s
# Warmup Iteration   9: 1760508.030 ops/s
# Warmup Iteration  10: 1761247.394 ops/s
# Warmup Iteration  11: 1776388.019 ops/s
# Warmup Iteration  12: 1773837.084 ops/s
# Warmup Iteration  13: 1759393.795 ops/s
# Warmup Iteration  14: 1774063.063 ops/s
# Warmup Iteration  15: 1769062.524 ops/s
# Warmup Iteration  16: 1757758.141 ops/s
# Warmup Iteration  17: 1764054.487 ops/s
# Warmup Iteration  18: 1777237.073 ops/s
# Warmup Iteration  19: 1772673.852 ops/s
# Warmup Iteration  20: 1769441.604 ops/s
# Warmup Iteration  21: 1754205.663 ops/s
# Warmup Iteration  22: 1772443.215 ops/s
# Warmup Iteration  23: 1762868.905 ops/s
# Warmup Iteration  24: 1775785.032 ops/s
# Warmup Iteration  25: 1778062.986 ops/s
# Warmup Iteration  26: 1762545.477 ops/s
# Warmup Iteration  27: 1768322.410 ops/s
# Warmup Iteration  28: 1781209.089 ops/s
# Warmup Iteration  29: 1772552.436 ops/s
# Warmup Iteration  30: 1751653.742 ops/s
Iteration   1: 1819695.130 ops/s
Iteration   2: 1805369.498 ops/s
Iteration   3: 1757866.595 ops/s
Iteration   4: 1781852.411 ops/s
Iteration   5: 1746311.038 ops/s
Iteration   6: 1764692.249 ops/s
Iteration   7: 1783393.814 ops/s
Iteration   8: 1748923.533 ops/s
Iteration   9: 1752495.639 ops/s
Iteration  10: 1771498.511 ops/s
Iteration  11: 1783219.075 ops/s
Iteration  12: 1761790.470 ops/s
Iteration  13: 1765493.394 ops/s
Iteration  14: 1762977.822 ops/s
Iteration  15: 1777555.630 ops/s
Iteration  16: 1746457.537 ops/s
Iteration  17: 1774614.301 ops/s
Iteration  18: 1757326.213 ops/s
Iteration  19: 1783489.906 ops/s
Iteration  20: 1811270.280 ops/s
Iteration  21: 1774905.644 ops/s
Iteration  22: 1779180.501 ops/s
Iteration  23: 1771626.037 ops/s
Iteration  24: 1772494.482 ops/s
Iteration  25: 1798810.237 ops/s
Iteration  26: 1780032.267 ops/s
Iteration  27: 1777246.630 ops/s
Iteration  28: 1779519.895 ops/s
Iteration  29: 1792299.362 ops/s
Iteration  30: 1795819.383 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByFloat":
  1775940.916 ±(99.9%) 12292.019 ops/s [Average]
  (min, avg, max) = (1746311.038, 1775940.916, 1819695.130), stdev = 18398.117
  CI (99.9%): [1763648.897, 1788232.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_sumByFloat  thrpt   30  1775940.916 ± 12292.019  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 53.781 ops/s
# Warmup Iteration   2: 58.173 ops/s
# Warmup Iteration   3: 86.388 ops/s
# Warmup Iteration   4: 87.607 ops/s
# Warmup Iteration   5: 86.640 ops/s
# Warmup Iteration   6: 86.726 ops/s
# Warmup Iteration   7: 88.096 ops/s
# Warmup Iteration   8: 87.563 ops/s
# Warmup Iteration   9: 87.367 ops/s
# Warmup Iteration  10: 84.433 ops/s
# Warmup Iteration  11: 70.983 ops/s
# Warmup Iteration  12: 86.619 ops/s
# Warmup Iteration  13: 89.335 ops/s
# Warmup Iteration  14: 89.752 ops/s
# Warmup Iteration  15: 88.216 ops/s
# Warmup Iteration  16: 86.389 ops/s
# Warmup Iteration  17: 87.199 ops/s
# Warmup Iteration  18: 87.763 ops/s
# Warmup Iteration  19: 87.438 ops/s
# Warmup Iteration  20: 87.364 ops/s
# Warmup Iteration  21: 86.968 ops/s
# Warmup Iteration  22: 86.407 ops/s
# Warmup Iteration  23: 91.530 ops/s
# Warmup Iteration  24: 92.970 ops/s
# Warmup Iteration  25: 100.060 ops/s
# Warmup Iteration  26: 96.285 ops/s
# Warmup Iteration  27: 93.945 ops/s
# Warmup Iteration  28: 96.172 ops/s
# Warmup Iteration  29: 95.712 ops/s
# Warmup Iteration  30: 97.012 ops/s
Iteration   1: 94.687 ops/s
Iteration   2: 96.617 ops/s
Iteration   3: 96.209 ops/s
Iteration   4: 94.919 ops/s
Iteration   5: 96.797 ops/s
Iteration   6: 96.930 ops/s
Iteration   7: 95.882 ops/s
Iteration   8: 94.443 ops/s
Iteration   9: 97.961 ops/s
Iteration  10: 96.461 ops/s
Iteration  11: 96.421 ops/s
Iteration  12: 97.165 ops/s
Iteration  13: 96.739 ops/s
Iteration  14: 96.583 ops/s
Iteration  15: 99.357 ops/s
Iteration  16: 97.663 ops/s
Iteration  17: 96.237 ops/s
Iteration  18: 96.117 ops/s
Iteration  19: 94.927 ops/s
Iteration  20: 95.383 ops/s
Iteration  21: 93.868 ops/s
Iteration  22: 93.751 ops/s
Iteration  23: 94.904 ops/s
Iteration  24: 93.014 ops/s
Iteration  25: 92.222 ops/s
Iteration  26: 90.820 ops/s
Iteration  27: 92.649 ops/s
Iteration  28: 93.677 ops/s
Iteration  29: 93.005 ops/s
Iteration  30: 90.922 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  95.211 ±(99.9%) 1.375 ops/s [Average]
  (min, avg, max) = (90.820, 95.211, 99.357), stdev = 2.059
  CI (99.9%): [93.836, 96.586] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt   Score   Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  95.211 ± 1.375  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1393906.984 ops/s
# Warmup Iteration   2: 2638823.192 ops/s
# Warmup Iteration   3: 2983788.883 ops/s
# Warmup Iteration   4: 3004452.996 ops/s
# Warmup Iteration   5: 2452041.858 ops/s
# Warmup Iteration   6: 2941243.695 ops/s
# Warmup Iteration   7: 2939794.454 ops/s
# Warmup Iteration   8: 2927832.144 ops/s
# Warmup Iteration   9: 2928493.534 ops/s
# Warmup Iteration  10: 2936260.024 ops/s
# Warmup Iteration  11: 2942431.020 ops/s
# Warmup Iteration  12: 2938805.959 ops/s
# Warmup Iteration  13: 2938262.094 ops/s
# Warmup Iteration  14: 2931013.476 ops/s
# Warmup Iteration  15: 2934367.263 ops/s
# Warmup Iteration  16: 2934023.786 ops/s
# Warmup Iteration  17: 3001250.383 ops/s
# Warmup Iteration  18: 2993296.621 ops/s
# Warmup Iteration  19: 2986274.356 ops/s
# Warmup Iteration  20: 2990037.834 ops/s
# Warmup Iteration  21: 2987052.450 ops/s
# Warmup Iteration  22: 3005525.268 ops/s
# Warmup Iteration  23: 2997597.746 ops/s
# Warmup Iteration  24: 3008768.237 ops/s
# Warmup Iteration  25: 3003900.145 ops/s
# Warmup Iteration  26: 3002044.726 ops/s
# Warmup Iteration  27: 2999294.925 ops/s
# Warmup Iteration  28: 2999313.482 ops/s
# Warmup Iteration  29: 2987584.255 ops/s
# Warmup Iteration  30: 2990412.595 ops/s
Iteration   1: 2987747.138 ops/s
Iteration   2: 2990617.962 ops/s
Iteration   3: 2991135.653 ops/s
Iteration   4: 2992128.146 ops/s
Iteration   5: 2996689.192 ops/s
Iteration   6: 2992008.585 ops/s
Iteration   7: 2989571.085 ops/s
Iteration   8: 2994978.592 ops/s
Iteration   9: 2994679.686 ops/s
Iteration  10: 2990630.678 ops/s
Iteration  11: 2999585.413 ops/s
Iteration  12: 2989514.688 ops/s
Iteration  13: 2997318.494 ops/s
Iteration  14: 2993393.651 ops/s
Iteration  15: 2990882.629 ops/s
Iteration  16: 2999775.651 ops/s
Iteration  17: 2991082.315 ops/s
Iteration  18: 2991068.699 ops/s
Iteration  19: 2996330.204 ops/s
Iteration  20: 2990293.894 ops/s
Iteration  21: 2990386.974 ops/s
Iteration  22: 2993896.173 ops/s
Iteration  23: 3001696.632 ops/s
Iteration  24: 2986821.162 ops/s
Iteration  25: 2993487.453 ops/s
Iteration  26: 2986890.940 ops/s
Iteration  27: 2994628.542 ops/s
Iteration  28: 3009485.349 ops/s
Iteration  29: 3011284.186 ops/s
Iteration  30: 2992348.577 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByInt":
  2994011.945 ±(99.9%) 3852.363 ops/s [Average]
  (min, avg, max) = (2986821.162, 2994011.945, 3011284.186), stdev = 5766.037
  CI (99.9%): [2990159.581, 2997864.308] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_sumByInt  thrpt   30  2994011.945 ± 3852.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1366848.142 ops/s
# Warmup Iteration   2: 2656985.504 ops/s
# Warmup Iteration   3: 2912127.295 ops/s
# Warmup Iteration   4: 2930892.174 ops/s
# Warmup Iteration   5: 2410919.464 ops/s
# Warmup Iteration   6: 2928396.281 ops/s
# Warmup Iteration   7: 2929983.129 ops/s
# Warmup Iteration   8: 2923076.539 ops/s
# Warmup Iteration   9: 2927747.416 ops/s
# Warmup Iteration  10: 2928701.887 ops/s
# Warmup Iteration  11: 2928307.421 ops/s
# Warmup Iteration  12: 2923845.549 ops/s
# Warmup Iteration  13: 2933744.492 ops/s
# Warmup Iteration  14: 2925347.694 ops/s
# Warmup Iteration  15: 2927046.790 ops/s
# Warmup Iteration  16: 2923729.300 ops/s
# Warmup Iteration  17: 2927718.541 ops/s
# Warmup Iteration  18: 2933925.259 ops/s
# Warmup Iteration  19: 2927056.178 ops/s
# Warmup Iteration  20: 2928947.466 ops/s
# Warmup Iteration  21: 2932498.296 ops/s
# Warmup Iteration  22: 2926263.326 ops/s
# Warmup Iteration  23: 2864512.085 ops/s
# Warmup Iteration  24: 2939954.290 ops/s
# Warmup Iteration  25: 2923994.699 ops/s
# Warmup Iteration  26: 2926361.699 ops/s
# Warmup Iteration  27: 2925496.070 ops/s
# Warmup Iteration  28: 2932701.081 ops/s
# Warmup Iteration  29: 2929994.449 ops/s
# Warmup Iteration  30: 2926580.501 ops/s
Iteration   1: 2925174.219 ops/s
Iteration   2: 2928528.336 ops/s
Iteration   3: 2930297.322 ops/s
Iteration   4: 2925475.752 ops/s
Iteration   5: 2929095.899 ops/s
Iteration   6: 2926287.804 ops/s
Iteration   7: 2929328.536 ops/s
Iteration   8: 2935862.777 ops/s
Iteration   9: 2922886.167 ops/s
Iteration  10: 2929178.315 ops/s
Iteration  11: 2929893.890 ops/s
Iteration  12: 2922273.354 ops/s
Iteration  13: 2929589.070 ops/s
Iteration  14: 2920125.779 ops/s
Iteration  15: 2926882.923 ops/s
Iteration  16: 2926615.396 ops/s
Iteration  17: 2926125.392 ops/s
Iteration  18: 2922488.995 ops/s
Iteration  19: 2928960.264 ops/s
Iteration  20: 2928154.459 ops/s
Iteration  21: 2935321.319 ops/s
Iteration  22: 2936717.005 ops/s
Iteration  23: 2928018.479 ops/s
Iteration  24: 2928865.246 ops/s
Iteration  25: 2932119.549 ops/s
Iteration  26: 2929277.533 ops/s
Iteration  27: 2918358.858 ops/s
Iteration  28: 2927721.980 ops/s
Iteration  29: 2921377.278 ops/s
Iteration  30: 2933884.076 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumByLong":
  2927829.532 ±(99.9%) 2971.516 ops/s [Average]
  (min, avg, max) = (2918358.858, 2927829.532, 2936717.005), stdev = 4447.626
  CI (99.9%): [2924858.016, 2930801.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_sumByLong  thrpt   30  2927829.532 ± 2971.516  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8062668.398 ops/s
# Warmup Iteration   2: 13236492.181 ops/s
# Warmup Iteration   3: 14174671.742 ops/s
# Warmup Iteration   4: 14222189.231 ops/s
# Warmup Iteration   5: 14219613.884 ops/s
# Warmup Iteration   6: 11988365.923 ops/s
# Warmup Iteration   7: 14237901.139 ops/s
# Warmup Iteration   8: 14236706.525 ops/s
# Warmup Iteration   9: 14257512.679 ops/s
# Warmup Iteration  10: 14189943.070 ops/s
# Warmup Iteration  11: 14224644.474 ops/s
# Warmup Iteration  12: 14259095.231 ops/s
# Warmup Iteration  13: 14250631.562 ops/s
# Warmup Iteration  14: 14207699.011 ops/s
# Warmup Iteration  15: 14245874.599 ops/s
# Warmup Iteration  16: 14241878.106 ops/s
# Warmup Iteration  17: 14248334.815 ops/s
# Warmup Iteration  18: 14246912.673 ops/s
# Warmup Iteration  19: 14211187.064 ops/s
# Warmup Iteration  20: 14245924.377 ops/s
# Warmup Iteration  21: 14252666.752 ops/s
# Warmup Iteration  22: 14241295.969 ops/s
# Warmup Iteration  23: 14231579.693 ops/s
# Warmup Iteration  24: 14240347.357 ops/s
# Warmup Iteration  25: 14250307.864 ops/s
# Warmup Iteration  26: 14248318.883 ops/s
# Warmup Iteration  27: 14241165.677 ops/s
# Warmup Iteration  28: 14239746.685 ops/s
# Warmup Iteration  29: 14260036.403 ops/s
# Warmup Iteration  30: 14268317.073 ops/s
Iteration   1: 14273927.596 ops/s
Iteration   2: 14249295.365 ops/s
Iteration   3: 14280236.335 ops/s
Iteration   4: 14225618.958 ops/s
Iteration   5: 14263285.969 ops/s
Iteration   6: 14267277.293 ops/s
Iteration   7: 14237904.116 ops/s
Iteration   8: 14250018.570 ops/s
Iteration   9: 14241452.888 ops/s
Iteration  10: 14266580.212 ops/s
Iteration  11: 14231264.404 ops/s
Iteration  12: 14237980.310 ops/s
Iteration  13: 14259041.189 ops/s
Iteration  14: 14252511.196 ops/s
Iteration  15: 14255986.319 ops/s
Iteration  16: 14262247.681 ops/s
Iteration  17: 14242093.802 ops/s
Iteration  18: 14230150.677 ops/s
Iteration  19: 14215780.488 ops/s
Iteration  20: 14199056.503 ops/s
Iteration  21: 14228027.852 ops/s
Iteration  22: 14231180.395 ops/s
Iteration  23: 14208808.996 ops/s
Iteration  24: 14216258.298 ops/s
Iteration  25: 14205285.924 ops/s
Iteration  26: 14228953.677 ops/s
Iteration  27: 14229329.669 ops/s
Iteration  28: 14236295.286 ops/s
Iteration  29: 14205175.128 ops/s
Iteration  30: 14191127.485 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumDouble":
  14237405.086 ±(99.9%) 15440.497 ops/s [Average]
  (min, avg, max) = (14191127.485, 14237405.086, 14280236.335), stdev = 23110.611
  CI (99.9%): [14221964.589, 14252845.583] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_sumDouble  thrpt   30  14237405.086 ± 15440.497  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7793628.934 ops/s
# Warmup Iteration   2: 11430824.445 ops/s
# Warmup Iteration   3: 13394147.074 ops/s
# Warmup Iteration   4: 13403722.566 ops/s
# Warmup Iteration   5: 13411038.131 ops/s
# Warmup Iteration   6: 11314137.199 ops/s
# Warmup Iteration   7: 13364081.427 ops/s
# Warmup Iteration   8: 13375732.294 ops/s
# Warmup Iteration   9: 13390542.018 ops/s
# Warmup Iteration  10: 13388945.996 ops/s
# Warmup Iteration  11: 13377785.308 ops/s
# Warmup Iteration  12: 13371758.291 ops/s
# Warmup Iteration  13: 13382891.969 ops/s
# Warmup Iteration  14: 13344947.961 ops/s
# Warmup Iteration  15: 13387935.166 ops/s
# Warmup Iteration  16: 13370100.482 ops/s
# Warmup Iteration  17: 13390263.308 ops/s
# Warmup Iteration  18: 13433679.870 ops/s
# Warmup Iteration  19: 13383554.252 ops/s
# Warmup Iteration  20: 13386435.809 ops/s
# Warmup Iteration  21: 13428055.675 ops/s
# Warmup Iteration  22: 13390610.965 ops/s
# Warmup Iteration  23: 13363281.191 ops/s
# Warmup Iteration  24: 13365934.327 ops/s
# Warmup Iteration  25: 13422075.449 ops/s
# Warmup Iteration  26: 13418019.615 ops/s
# Warmup Iteration  27: 13457389.113 ops/s
# Warmup Iteration  28: 13440039.186 ops/s
# Warmup Iteration  29: 13407963.836 ops/s
# Warmup Iteration  30: 13146381.977 ops/s
Iteration   1: 12041693.543 ops/s
Iteration   2: 12379597.774 ops/s
Iteration   3: 12992041.811 ops/s
Iteration   4: 12650518.974 ops/s
Iteration   5: 12860892.342 ops/s
Iteration   6: 12867389.217 ops/s
Iteration   7: 12688613.338 ops/s
Iteration   8: 12797716.880 ops/s
Iteration   9: 12728504.877 ops/s
Iteration  10: 12542048.339 ops/s
Iteration  11: 12752305.268 ops/s
Iteration  12: 12888856.805 ops/s
Iteration  13: 12760467.959 ops/s
Iteration  14: 13036351.010 ops/s
Iteration  15: 12525341.199 ops/s
Iteration  16: 12306044.413 ops/s
Iteration  17: 12194825.791 ops/s
Iteration  18: 12258000.972 ops/s
Iteration  19: 11971672.569 ops/s
Iteration  20: 12086668.785 ops/s
Iteration  21: 12316177.686 ops/s
Iteration  22: 12512094.567 ops/s
Iteration  23: 13372537.689 ops/s
Iteration  24: 12946551.058 ops/s
Iteration  25: 12509157.098 ops/s
Iteration  26: 13007430.666 ops/s
Iteration  27: 13185466.063 ops/s
Iteration  28: 12836574.781 ops/s
Iteration  29: 12729163.548 ops/s
Iteration  30: 13044086.444 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumFloat":
  12659626.382 ±(99.9%) 234169.611 ops/s [Average]
  (min, avg, max) = (11971672.569, 12659626.382, 13372537.689), stdev = 350494.077
  CI (99.9%): [12425456.771, 12893795.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_sumFloat  thrpt   30  12659626.382 ± 234169.611  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9631558.790 ops/s
# Warmup Iteration   2: 20505090.195 ops/s
# Warmup Iteration   3: 20538513.124 ops/s
# Warmup Iteration   4: 17348164.138 ops/s
# Warmup Iteration   5: 16790975.580 ops/s
# Warmup Iteration   6: 18853827.421 ops/s
# Warmup Iteration   7: 18959656.070 ops/s
# Warmup Iteration   8: 18800196.686 ops/s
# Warmup Iteration   9: 18455761.810 ops/s
# Warmup Iteration  10: 18759104.340 ops/s
# Warmup Iteration  11: 19193499.441 ops/s
# Warmup Iteration  12: 18538928.072 ops/s
# Warmup Iteration  13: 18600427.270 ops/s
# Warmup Iteration  14: 18979976.477 ops/s
# Warmup Iteration  15: 19090648.154 ops/s
# Warmup Iteration  16: 18601607.807 ops/s
# Warmup Iteration  17: 18478025.050 ops/s
# Warmup Iteration  18: 18741966.074 ops/s
# Warmup Iteration  19: 18438015.728 ops/s
# Warmup Iteration  20: 18459773.186 ops/s
# Warmup Iteration  21: 18668462.404 ops/s
# Warmup Iteration  22: 18783133.976 ops/s
# Warmup Iteration  23: 18415440.722 ops/s
# Warmup Iteration  24: 18628573.244 ops/s
# Warmup Iteration  25: 18753780.281 ops/s
# Warmup Iteration  26: 18659835.041 ops/s
# Warmup Iteration  27: 18624113.934 ops/s
# Warmup Iteration  28: 18902284.022 ops/s
# Warmup Iteration  29: 18565997.061 ops/s
# Warmup Iteration  30: 18909452.344 ops/s
Iteration   1: 18477051.903 ops/s
Iteration   2: 18931189.839 ops/s
Iteration   3: 18617354.918 ops/s
Iteration   4: 19166394.715 ops/s
Iteration   5: 18554234.422 ops/s
Iteration   6: 18692239.558 ops/s
Iteration   7: 20698961.533 ops/s
Iteration   8: 18478338.966 ops/s
Iteration   9: 18501453.877 ops/s
Iteration  10: 18668523.197 ops/s
Iteration  11: 18673714.825 ops/s
Iteration  12: 18695236.978 ops/s
Iteration  13: 18908186.686 ops/s
Iteration  14: 18349780.856 ops/s
Iteration  15: 19342897.766 ops/s
Iteration  16: 18790066.262 ops/s
Iteration  17: 18636369.950 ops/s
Iteration  18: 18802338.426 ops/s
Iteration  19: 18947481.239 ops/s
Iteration  20: 18814193.752 ops/s
Iteration  21: 18625071.562 ops/s
Iteration  22: 18944368.692 ops/s
Iteration  23: 18543314.505 ops/s
Iteration  24: 18607910.830 ops/s
Iteration  25: 18852005.207 ops/s
Iteration  26: 18845825.234 ops/s
Iteration  27: 19124859.386 ops/s
Iteration  28: 18758595.525 ops/s
Iteration  29: 18767388.707 ops/s
Iteration  30: 18725682.144 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumInteger":
  18818034.382 ±(99.9%) 278113.235 ops/s [Average]
  (min, avg, max) = (18349780.856, 18818034.382, 20698961.533), stdev = 416266.829
  CI (99.9%): [18539921.147, 19096147.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_sumInteger  thrpt   30  18818034.382 ± 278113.235  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8553008.142 ops/s
# Warmup Iteration   2: 15830305.321 ops/s
# Warmup Iteration   3: 17252600.056 ops/s
# Warmup Iteration   4: 17347271.840 ops/s
# Warmup Iteration   5: 14167872.859 ops/s
# Warmup Iteration   6: 17353822.800 ops/s
# Warmup Iteration   7: 17080722.168 ops/s
# Warmup Iteration   8: 17278182.885 ops/s
# Warmup Iteration   9: 17335458.360 ops/s
# Warmup Iteration  10: 17458916.073 ops/s
# Warmup Iteration  11: 17232409.590 ops/s
# Warmup Iteration  12: 17679739.495 ops/s
# Warmup Iteration  13: 17237266.261 ops/s
# Warmup Iteration  14: 18298631.179 ops/s
# Warmup Iteration  15: 17462239.320 ops/s
# Warmup Iteration  16: 17282748.487 ops/s
# Warmup Iteration  17: 17448717.988 ops/s
# Warmup Iteration  18: 17342477.796 ops/s
# Warmup Iteration  19: 18300736.352 ops/s
# Warmup Iteration  20: 17092042.871 ops/s
# Warmup Iteration  21: 17292457.105 ops/s
# Warmup Iteration  22: 17522888.943 ops/s
# Warmup Iteration  23: 17681511.183 ops/s
# Warmup Iteration  24: 17305692.215 ops/s
# Warmup Iteration  25: 17308407.728 ops/s
# Warmup Iteration  26: 17253924.996 ops/s
# Warmup Iteration  27: 17511581.894 ops/s
# Warmup Iteration  28: 17417096.877 ops/s
# Warmup Iteration  29: 17517320.512 ops/s
# Warmup Iteration  30: 17400190.195 ops/s
Iteration   1: 17444488.541 ops/s
Iteration   2: 17448157.637 ops/s
Iteration   3: 17226361.121 ops/s
Iteration   4: 17296035.120 ops/s
Iteration   5: 17365462.529 ops/s
Iteration   6: 17303360.383 ops/s
Iteration   7: 17800751.737 ops/s
Iteration   8: 17538637.526 ops/s
Iteration   9: 16951607.114 ops/s
Iteration  10: 17356284.131 ops/s
Iteration  11: 17769474.765 ops/s
Iteration  12: 17300077.021 ops/s
Iteration  13: 17209032.839 ops/s
Iteration  14: 17355725.795 ops/s
Iteration  15: 17014851.890 ops/s
Iteration  16: 17886884.861 ops/s
Iteration  17: 17392760.941 ops/s
Iteration  18: 17437654.096 ops/s
Iteration  19: 17309725.566 ops/s
Iteration  20: 17631971.528 ops/s
Iteration  21: 17390133.904 ops/s
Iteration  22: 17311851.839 ops/s
Iteration  23: 17705470.521 ops/s
Iteration  24: 17926036.598 ops/s
Iteration  25: 17611298.982 ops/s
Iteration  26: 17262497.748 ops/s
Iteration  27: 17330177.567 ops/s
Iteration  28: 17559835.640 ops/s
Iteration  29: 17378321.192 ops/s
Iteration  30: 17400167.946 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_sumLong":
  17430503.236 ±(99.9%) 152794.948 ops/s [Average]
  (min, avg, max) = (16951607.114, 17430503.236, 17926036.598), stdev = 228696.302
  CI (99.9%): [17277708.288, 17583298.184] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_sumLong  thrpt   30  17430503.236 ± 152794.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1761281.042 ops/s
# Warmup Iteration   2: 3701477.784 ops/s
# Warmup Iteration   3: 4333923.161 ops/s
# Warmup Iteration   4: 4520098.311 ops/s
# Warmup Iteration   5: 4313813.025 ops/s
# Warmup Iteration   6: 3478650.751 ops/s
# Warmup Iteration   7: 4367604.149 ops/s
# Warmup Iteration   8: 4261325.879 ops/s
# Warmup Iteration   9: 4284991.377 ops/s
# Warmup Iteration  10: 4316099.591 ops/s
# Warmup Iteration  11: 4317520.166 ops/s
# Warmup Iteration  12: 4307387.490 ops/s
# Warmup Iteration  13: 4267780.256 ops/s
# Warmup Iteration  14: 4276337.205 ops/s
# Warmup Iteration  15: 4330753.721 ops/s
# Warmup Iteration  16: 4299861.223 ops/s
# Warmup Iteration  17: 4332165.605 ops/s
# Warmup Iteration  18: 4217432.694 ops/s
# Warmup Iteration  19: 4284737.163 ops/s
# Warmup Iteration  20: 4406689.089 ops/s
# Warmup Iteration  21: 4263357.988 ops/s
# Warmup Iteration  22: 4302880.575 ops/s
# Warmup Iteration  23: 4407673.426 ops/s
# Warmup Iteration  24: 4757535.650 ops/s
# Warmup Iteration  25: 4621663.590 ops/s
# Warmup Iteration  26: 4633112.936 ops/s
# Warmup Iteration  27: 4303313.074 ops/s
# Warmup Iteration  28: 4826909.975 ops/s
# Warmup Iteration  29: 4544058.671 ops/s
# Warmup Iteration  30: 4454713.424 ops/s
Iteration   1: 4331455.519 ops/s
Iteration   2: 4499520.381 ops/s
Iteration   3: 4404954.563 ops/s
Iteration   4: 4772920.333 ops/s
Iteration   5: 4657699.125 ops/s
Iteration   6: 4583991.705 ops/s
Iteration   7: 4535612.761 ops/s
Iteration   8: 4869390.983 ops/s
Iteration   9: 4879895.812 ops/s
Iteration  10: 4892545.064 ops/s
Iteration  11: 4905415.809 ops/s
Iteration  12: 4496641.229 ops/s
Iteration  13: 4440235.720 ops/s
Iteration  14: 4605275.879 ops/s
Iteration  15: 4355148.768 ops/s
Iteration  16: 4546404.090 ops/s
Iteration  17: 4289503.997 ops/s
Iteration  18: 4504515.253 ops/s
Iteration  19: 4552651.478 ops/s
Iteration  20: 4871224.441 ops/s
Iteration  21: 4682932.104 ops/s
Iteration  22: 4827519.533 ops/s
Iteration  23: 4813274.695 ops/s
Iteration  24: 4601874.251 ops/s
Iteration  25: 4681658.309 ops/s
Iteration  26: 4459142.122 ops/s
Iteration  27: 4605804.734 ops/s
Iteration  28: 4707124.548 ops/s
Iteration  29: 4817653.042 ops/s
Iteration  30: 4773992.031 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_take":
  4632199.276 ±(99.9%) 121352.575 ops/s [Average]
  (min, avg, max) = (4289503.997, 4632199.276, 4905415.809), stdev = 181634.835
  CI (99.9%): [4510846.701, 4753551.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_take  thrpt   30  4632199.276 ± 121352.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6516784.757 ops/s
# Warmup Iteration   2: 14193077.682 ops/s
# Warmup Iteration   3: 14219525.546 ops/s
# Warmup Iteration   4: 11021065.913 ops/s
# Warmup Iteration   5: 13347019.053 ops/s
# Warmup Iteration   6: 12918087.776 ops/s
# Warmup Iteration   7: 13418226.984 ops/s
# Warmup Iteration   8: 14486058.797 ops/s
# Warmup Iteration   9: 13440466.882 ops/s
# Warmup Iteration  10: 13093700.850 ops/s
# Warmup Iteration  11: 13815333.585 ops/s
# Warmup Iteration  12: 14140696.347 ops/s
# Warmup Iteration  13: 14323249.730 ops/s
# Warmup Iteration  14: 14278329.916 ops/s
# Warmup Iteration  15: 14154734.116 ops/s
# Warmup Iteration  16: 13834815.227 ops/s
# Warmup Iteration  17: 12913827.844 ops/s
# Warmup Iteration  18: 13288591.085 ops/s
# Warmup Iteration  19: 13618524.708 ops/s
# Warmup Iteration  20: 14059569.930 ops/s
# Warmup Iteration  21: 14443935.816 ops/s
# Warmup Iteration  22: 14477559.008 ops/s
# Warmup Iteration  23: 14469580.714 ops/s
# Warmup Iteration  24: 14498785.837 ops/s
# Warmup Iteration  25: 14507943.994 ops/s
# Warmup Iteration  26: 14499672.827 ops/s
# Warmup Iteration  27: 14250223.402 ops/s
# Warmup Iteration  28: 14273583.849 ops/s
# Warmup Iteration  29: 14329796.052 ops/s
# Warmup Iteration  30: 13911050.617 ops/s
Iteration   1: 13835702.207 ops/s
Iteration   2: 13510509.713 ops/s
Iteration   3: 13186753.174 ops/s
Iteration   4: 13187035.706 ops/s
Iteration   5: 13598410.066 ops/s
Iteration   6: 13156003.664 ops/s
Iteration   7: 13099601.723 ops/s
Iteration   8: 13159070.253 ops/s
Iteration   9: 13354859.923 ops/s
Iteration  10: 13112962.804 ops/s
Iteration  11: 13239058.506 ops/s
Iteration  12: 13470954.371 ops/s
Iteration  13: 13980350.756 ops/s
Iteration  14: 14342956.999 ops/s
Iteration  15: 14160842.098 ops/s
Iteration  16: 13391699.606 ops/s
Iteration  17: 13304829.241 ops/s
Iteration  18: 13602226.887 ops/s
Iteration  19: 13630457.861 ops/s
Iteration  20: 13317354.515 ops/s
Iteration  21: 13776592.216 ops/s
Iteration  22: 14124381.159 ops/s
Iteration  23: 14274100.506 ops/s
Iteration  24: 14150499.158 ops/s
Iteration  25: 14004917.889 ops/s
Iteration  26: 14206643.056 ops/s
Iteration  27: 13977654.072 ops/s
Iteration  28: 14027408.287 ops/s
Iteration  29: 14155236.777 ops/s
Iteration  30: 13810370.065 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_takeWhile":
  13671648.109 ±(99.9%) 272747.306 ops/s [Average]
  (min, avg, max) = (13099601.723, 13671648.109, 14342956.999), stdev = 408235.358
  CI (99.9%): [13398900.803, 13944395.414] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_takeWhile  thrpt   30  13671648.109 ± 272747.306  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707347.043 ops/s
# Warmup Iteration   2: 698995.697 ops/s
# Warmup Iteration   3: 905730.882 ops/s
# Warmup Iteration   4: 932685.257 ops/s
# Warmup Iteration   5: 937742.632 ops/s
# Warmup Iteration   6: 944100.516 ops/s
# Warmup Iteration   7: 965803.590 ops/s
# Warmup Iteration   8: 904126.116 ops/s
# Warmup Iteration   9: 900836.413 ops/s
# Warmup Iteration  10: 888679.229 ops/s
# Warmup Iteration  11: 876973.272 ops/s
# Warmup Iteration  12: 855195.344 ops/s
# Warmup Iteration  13: 780434.079 ops/s
# Warmup Iteration  14: 912151.203 ops/s
# Warmup Iteration  15: 938962.441 ops/s
# Warmup Iteration  16: 957073.676 ops/s
# Warmup Iteration  17: 1043277.967 ops/s
# Warmup Iteration  18: 955437.107 ops/s
# Warmup Iteration  19: 962709.830 ops/s
# Warmup Iteration  20: 1008978.121 ops/s
# Warmup Iteration  21: 1011238.802 ops/s
# Warmup Iteration  22: 969537.055 ops/s
# Warmup Iteration  23: 961595.682 ops/s
# Warmup Iteration  24: 965822.075 ops/s
# Warmup Iteration  25: 970272.235 ops/s
# Warmup Iteration  26: 1022532.483 ops/s
# Warmup Iteration  27: 1019507.820 ops/s
# Warmup Iteration  28: 1029624.688 ops/s
# Warmup Iteration  29: 1022443.429 ops/s
# Warmup Iteration  30: 949275.195 ops/s
Iteration   1: 953491.470 ops/s
Iteration   2: 958938.240 ops/s
Iteration   3: 967264.913 ops/s
Iteration   4: 955749.963 ops/s
Iteration   5: 982962.814 ops/s
Iteration   6: 1008686.074 ops/s
Iteration   7: 1040656.668 ops/s
Iteration   8: 1038137.831 ops/s
Iteration   9: 1016502.578 ops/s
Iteration  10: 1002121.965 ops/s
Iteration  11: 975615.183 ops/s
Iteration  12: 1034361.060 ops/s
Iteration  13: 1037813.839 ops/s
Iteration  14: 992975.663 ops/s
Iteration  15: 956518.363 ops/s
Iteration  16: 976725.452 ops/s
Iteration  17: 1006036.166 ops/s
Iteration  18: 976317.219 ops/s
Iteration  19: 961681.984 ops/s
Iteration  20: 933649.012 ops/s
Iteration  21: 931772.820 ops/s
Iteration  22: 943976.071 ops/s
Iteration  23: 968933.026 ops/s
Iteration  24: 954903.693 ops/s
Iteration  25: 993303.270 ops/s
Iteration  26: 950836.632 ops/s
Iteration  27: 992797.535 ops/s
Iteration  28: 949874.006 ops/s
Iteration  29: 954436.438 ops/s
Iteration  30: 1032707.012 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_take_throws":
  981658.232 ±(99.9%) 22073.786 ops/s [Average]
  (min, avg, max) = (931772.820, 981658.232, 1040656.668), stdev = 33039.007
  CI (99.9%): [959584.446, 1003732.018] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_take_throws  thrpt   30  981658.232 ± 22073.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4359825.103 ops/s
# Warmup Iteration   2: 11812792.030 ops/s
# Warmup Iteration   3: 12454007.334 ops/s
# Warmup Iteration   4: 12370555.161 ops/s
# Warmup Iteration   5: 10394069.507 ops/s
# Warmup Iteration   6: 12036441.472 ops/s
# Warmup Iteration   7: 11558775.869 ops/s
# Warmup Iteration   8: 12074705.818 ops/s
# Warmup Iteration   9: 12415727.879 ops/s
# Warmup Iteration  10: 12231111.009 ops/s
# Warmup Iteration  11: 12372335.138 ops/s
# Warmup Iteration  12: 12193319.354 ops/s
# Warmup Iteration  13: 11470101.970 ops/s
# Warmup Iteration  14: 11623316.129 ops/s
# Warmup Iteration  15: 11554186.777 ops/s
# Warmup Iteration  16: 11382420.872 ops/s
# Warmup Iteration  17: 11352280.912 ops/s
# Warmup Iteration  18: 11939696.554 ops/s
# Warmup Iteration  19: 12413707.401 ops/s
# Warmup Iteration  20: 12558372.882 ops/s
# Warmup Iteration  21: 12352471.946 ops/s
# Warmup Iteration  22: 12342381.677 ops/s
# Warmup Iteration  23: 12420476.844 ops/s
# Warmup Iteration  24: 12459516.990 ops/s
# Warmup Iteration  25: 12330149.638 ops/s
# Warmup Iteration  26: 12410782.126 ops/s
# Warmup Iteration  27: 12300266.857 ops/s
# Warmup Iteration  28: 12211983.796 ops/s
# Warmup Iteration  29: 11451582.455 ops/s
# Warmup Iteration  30: 11432502.653 ops/s
Iteration   1: 11573773.996 ops/s
Iteration   2: 11217074.528 ops/s
Iteration   3: 11260115.801 ops/s
Iteration   4: 11241078.035 ops/s
Iteration   5: 12468779.167 ops/s
Iteration   6: 12507760.300 ops/s
Iteration   7: 12343998.770 ops/s
Iteration   8: 12211979.675 ops/s
Iteration   9: 11961960.739 ops/s
Iteration  10: 12129820.414 ops/s
Iteration  11: 12318958.323 ops/s
Iteration  12: 12277836.785 ops/s
Iteration  13: 11626473.663 ops/s
Iteration  14: 11515227.884 ops/s
Iteration  15: 11375571.840 ops/s
Iteration  16: 11507189.934 ops/s
Iteration  17: 11615822.682 ops/s
Iteration  18: 11287113.782 ops/s
Iteration  19: 11419065.104 ops/s
Iteration  20: 12231608.788 ops/s
Iteration  21: 12468507.311 ops/s
Iteration  22: 12061577.253 ops/s
Iteration  23: 11610492.157 ops/s
Iteration  24: 11481458.970 ops/s
Iteration  25: 11810627.461 ops/s
Iteration  26: 11517967.473 ops/s
Iteration  27: 11581047.363 ops/s
Iteration  28: 11162969.893 ops/s
Iteration  29: 11815461.253 ops/s
Iteration  30: 11333967.924 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_tap":
  11764509.576 ±(99.9%) 288637.178 ops/s [Average]
  (min, avg, max) = (11162969.893, 11764509.576, 12507760.300), stdev = 432018.572
  CI (99.9%): [11475872.398, 12053146.753] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_tap  thrpt   30  11764509.576 ± 288637.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 721360.789 ops/s
# Warmup Iteration   2: 1769243.446 ops/s
# Warmup Iteration   3: 1785938.487 ops/s
# Warmup Iteration   4: 1493012.959 ops/s
# Warmup Iteration   5: 1803641.914 ops/s
# Warmup Iteration   6: 1806269.132 ops/s
# Warmup Iteration   7: 1854209.991 ops/s
# Warmup Iteration   8: 1881634.334 ops/s
# Warmup Iteration   9: 1894197.948 ops/s
# Warmup Iteration  10: 1821049.799 ops/s
# Warmup Iteration  11: 1831524.964 ops/s
# Warmup Iteration  12: 1842473.016 ops/s
# Warmup Iteration  13: 1920109.423 ops/s
# Warmup Iteration  14: 1860766.145 ops/s
# Warmup Iteration  15: 1875099.904 ops/s
# Warmup Iteration  16: 1874506.459 ops/s
# Warmup Iteration  17: 1773940.466 ops/s
# Warmup Iteration  18: 1945313.055 ops/s
# Warmup Iteration  19: 1939657.066 ops/s
# Warmup Iteration  20: 1834324.895 ops/s
# Warmup Iteration  21: 1779800.303 ops/s
# Warmup Iteration  22: 1784880.538 ops/s
# Warmup Iteration  23: 1902691.012 ops/s
# Warmup Iteration  24: 1870650.389 ops/s
# Warmup Iteration  25: 1803117.134 ops/s
# Warmup Iteration  26: 1883298.667 ops/s
# Warmup Iteration  27: 1905797.150 ops/s
# Warmup Iteration  28: 1950753.199 ops/s
# Warmup Iteration  29: 1949306.667 ops/s
# Warmup Iteration  30: 1935392.634 ops/s
Iteration   1: 1903874.416 ops/s
Iteration   2: 1948721.183 ops/s
Iteration   3: 1852473.565 ops/s
Iteration   4: 1948380.887 ops/s
Iteration   5: 1950489.681 ops/s
Iteration   6: 1937281.203 ops/s
Iteration   7: 1943533.196 ops/s
Iteration   8: 1948641.388 ops/s
Iteration   9: 1883156.813 ops/s
Iteration  10: 1879281.992 ops/s
Iteration  11: 1942741.792 ops/s
Iteration  12: 1948780.739 ops/s
Iteration  13: 1944331.225 ops/s
Iteration  14: 1911225.294 ops/s
Iteration  15: 1885134.107 ops/s
Iteration  16: 1922831.719 ops/s
Iteration  17: 1857208.708 ops/s
Iteration  18: 1848078.286 ops/s
Iteration  19: 1772656.980 ops/s
Iteration  20: 1895490.868 ops/s
Iteration  21: 1941968.812 ops/s
Iteration  22: 1951917.989 ops/s
Iteration  23: 1945626.509 ops/s
Iteration  24: 1938895.640 ops/s
Iteration  25: 1951391.264 ops/s
Iteration  26: 1877987.677 ops/s
Iteration  27: 1951435.759 ops/s
Iteration  28: 1957090.918 ops/s
Iteration  29: 1915407.783 ops/s
Iteration  30: 1851764.066 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_testToString":
  1913593.349 ±(99.9%) 29829.355 ops/s [Average]
  (min, avg, max) = (1772656.980, 1913593.349, 1957090.918), stdev = 44647.178
  CI (99.9%): [1883763.994, 1943422.704] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_testToString  thrpt   30  1913593.349 ± 29829.355  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4131800.497 ops/s
# Warmup Iteration   2: 9746697.261 ops/s
# Warmup Iteration   3: 9288541.551 ops/s
# Warmup Iteration   4: 8798308.050 ops/s
# Warmup Iteration   5: 9808413.260 ops/s
# Warmup Iteration   6: 9527305.733 ops/s
# Warmup Iteration   7: 9577679.750 ops/s
# Warmup Iteration   8: 9985805.696 ops/s
# Warmup Iteration   9: 10223409.961 ops/s
# Warmup Iteration  10: 9869894.909 ops/s
# Warmup Iteration  11: 9950496.317 ops/s
# Warmup Iteration  12: 9879917.714 ops/s
# Warmup Iteration  13: 9476297.868 ops/s
# Warmup Iteration  14: 9588683.974 ops/s
# Warmup Iteration  15: 9815877.181 ops/s
# Warmup Iteration  16: 9702733.594 ops/s
# Warmup Iteration  17: 10243980.845 ops/s
# Warmup Iteration  18: 10044498.858 ops/s
# Warmup Iteration  19: 9585053.612 ops/s
# Warmup Iteration  20: 9592624.199 ops/s
# Warmup Iteration  21: 9788016.980 ops/s
# Warmup Iteration  22: 10260925.772 ops/s
# Warmup Iteration  23: 10360943.661 ops/s
# Warmup Iteration  24: 10091604.456 ops/s
# Warmup Iteration  25: 9687434.578 ops/s
# Warmup Iteration  26: 10216074.635 ops/s
# Warmup Iteration  27: 9717290.117 ops/s
# Warmup Iteration  28: 9668063.477 ops/s
# Warmup Iteration  29: 9638046.988 ops/s
# Warmup Iteration  30: 9455065.474 ops/s
Iteration   1: 9539146.430 ops/s
Iteration   2: 9336510.338 ops/s
Iteration   3: 9444203.906 ops/s
Iteration   4: 9937467.099 ops/s
Iteration   5: 10093005.439 ops/s
Iteration   6: 10273921.391 ops/s
Iteration   7: 9594981.264 ops/s
Iteration   8: 9685697.900 ops/s
Iteration   9: 9568222.849 ops/s
Iteration  10: 9627641.590 ops/s
Iteration  11: 9740272.325 ops/s
Iteration  12: 9376860.245 ops/s
Iteration  13: 9716157.848 ops/s
Iteration  14: 10388109.680 ops/s
Iteration  15: 10368496.533 ops/s
Iteration  16: 9781613.193 ops/s
Iteration  17: 10193886.347 ops/s
Iteration  18: 10020576.936 ops/s
Iteration  19: 10012463.108 ops/s
Iteration  20: 9534024.271 ops/s
Iteration  21: 9608143.722 ops/s
Iteration  22: 9522137.747 ops/s
Iteration  23: 9652602.543 ops/s
Iteration  24: 9704458.411 ops/s
Iteration  25: 9591129.659 ops/s
Iteration  26: 9699090.901 ops/s
Iteration  27: 9959340.675 ops/s
Iteration  28: 9877983.468 ops/s
Iteration  29: 10011443.128 ops/s
Iteration  30: 9722065.307 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toArray":
  9786055.142 ±(99.9%) 189424.889 ops/s [Average]
  (min, avg, max) = (9336510.338, 9786055.142, 10388109.680), stdev = 283522.278
  CI (99.9%): [9596630.252, 9975480.031] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_toArray  thrpt   30  9786055.142 ± 189424.889  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 144975008.373 ops/s
# Warmup Iteration   2: 280145907.955 ops/s
# Warmup Iteration   3: 244621565.974 ops/s
# Warmup Iteration   4: 289498821.759 ops/s
# Warmup Iteration   5: 293799264.654 ops/s
# Warmup Iteration   6: 310630702.267 ops/s
# Warmup Iteration   7: 299486702.490 ops/s
# Warmup Iteration   8: 298007620.594 ops/s
# Warmup Iteration   9: 300307655.946 ops/s
# Warmup Iteration  10: 288320606.769 ops/s
# Warmup Iteration  11: 291144109.872 ops/s
# Warmup Iteration  12: 291056497.104 ops/s
# Warmup Iteration  13: 289917531.594 ops/s
# Warmup Iteration  14: 295029938.751 ops/s
# Warmup Iteration  15: 306971340.636 ops/s
# Warmup Iteration  16: 292495551.892 ops/s
# Warmup Iteration  17: 295412160.940 ops/s
# Warmup Iteration  18: 297681890.039 ops/s
# Warmup Iteration  19: 290748913.011 ops/s
# Warmup Iteration  20: 291367666.071 ops/s
# Warmup Iteration  21: 295892957.787 ops/s
# Warmup Iteration  22: 304560671.283 ops/s
# Warmup Iteration  23: 295646096.431 ops/s
# Warmup Iteration  24: 291829431.615 ops/s
# Warmup Iteration  25: 298240433.486 ops/s
# Warmup Iteration  26: 306130890.986 ops/s
# Warmup Iteration  27: 304137849.182 ops/s
# Warmup Iteration  28: 287244546.806 ops/s
# Warmup Iteration  29: 292313197.269 ops/s
# Warmup Iteration  30: 287336769.151 ops/s
Iteration   1: 288707263.125 ops/s
Iteration   2: 295335608.730 ops/s
Iteration   3: 292464610.629 ops/s
Iteration   4: 291365740.135 ops/s
Iteration   5: 294450982.906 ops/s
Iteration   6: 295631615.005 ops/s
Iteration   7: 285264833.232 ops/s
Iteration   8: 286678335.753 ops/s
Iteration   9: 286607886.271 ops/s
Iteration  10: 286149937.716 ops/s
Iteration  11: 282496444.132 ops/s
Iteration  12: 293566713.633 ops/s
Iteration  13: 296477469.181 ops/s
Iteration  14: 313575519.283 ops/s
Iteration  15: 312033422.370 ops/s
Iteration  16: 299008168.196 ops/s
Iteration  17: 289971031.834 ops/s
Iteration  18: 284013891.877 ops/s
Iteration  19: 287003589.779 ops/s
Iteration  20: 296549428.644 ops/s
Iteration  21: 288988141.321 ops/s
Iteration  22: 297472210.226 ops/s
Iteration  23: 298113236.625 ops/s
Iteration  24: 292353393.727 ops/s
Iteration  25: 284910304.402 ops/s
Iteration  26: 291551309.637 ops/s
Iteration  27: 286937106.999 ops/s
Iteration  28: 283155254.776 ops/s
Iteration  29: 285542113.624 ops/s
Iteration  30: 288812511.994 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toImmutable":
  291839602.525 ±(99.9%) 4967311.017 ops/s [Average]
  (min, avg, max) = (282496444.132, 291839602.525, 313575519.283), stdev = 7434837.849
  CI (99.9%): [286872291.508, 296806913.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score         Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_toImmutable  thrpt   30  291839602.525 ± 4967311.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1918973.461 ops/s
# Warmup Iteration   2: 4412637.537 ops/s
# Warmup Iteration   3: 4747242.571 ops/s
# Warmup Iteration   4: 3655438.193 ops/s
# Warmup Iteration   5: 4332531.340 ops/s
# Warmup Iteration   6: 4312974.683 ops/s
# Warmup Iteration   7: 4382689.643 ops/s
# Warmup Iteration   8: 4527899.984 ops/s
# Warmup Iteration   9: 4627773.050 ops/s
# Warmup Iteration  10: 4480814.434 ops/s
# Warmup Iteration  11: 4466110.612 ops/s
# Warmup Iteration  12: 4390378.304 ops/s
# Warmup Iteration  13: 4498793.215 ops/s
# Warmup Iteration  14: 4416284.030 ops/s
# Warmup Iteration  15: 4479783.066 ops/s
# Warmup Iteration  16: 4763471.944 ops/s
# Warmup Iteration  17: 4567650.545 ops/s
# Warmup Iteration  18: 4439118.631 ops/s
# Warmup Iteration  19: 4409386.251 ops/s
# Warmup Iteration  20: 4574868.725 ops/s
# Warmup Iteration  21: 4587513.411 ops/s
# Warmup Iteration  22: 4527520.059 ops/s
# Warmup Iteration  23: 4477560.990 ops/s
# Warmup Iteration  24: 4408697.291 ops/s
# Warmup Iteration  25: 4403358.043 ops/s
# Warmup Iteration  26: 4442755.733 ops/s
# Warmup Iteration  27: 4387315.891 ops/s
# Warmup Iteration  28: 4399406.232 ops/s
# Warmup Iteration  29: 4382568.003 ops/s
# Warmup Iteration  30: 4355298.133 ops/s
Iteration   1: 4646549.988 ops/s
Iteration   2: 4819098.543 ops/s
Iteration   3: 4693224.069 ops/s
Iteration   4: 4477987.191 ops/s
Iteration   5: 4727987.525 ops/s
Iteration   6: 4678426.121 ops/s
Iteration   7: 4444385.639 ops/s
Iteration   8: 4402909.043 ops/s
Iteration   9: 4458408.937 ops/s
Iteration  10: 4509431.219 ops/s
Iteration  11: 4419336.627 ops/s
Iteration  12: 4392631.888 ops/s
Iteration  13: 4361145.965 ops/s
Iteration  14: 4402802.861 ops/s
Iteration  15: 4473347.720 ops/s
Iteration  16: 4468213.375 ops/s
Iteration  17: 4370028.180 ops/s
Iteration  18: 4587555.725 ops/s
Iteration  19: 4675352.622 ops/s
Iteration  20: 4543942.642 ops/s
Iteration  21: 4392071.381 ops/s
Iteration  22: 4413371.294 ops/s
Iteration  23: 4374042.496 ops/s
Iteration  24: 4419154.038 ops/s
Iteration  25: 4455235.697 ops/s
Iteration  26: 4485596.134 ops/s
Iteration  27: 4388270.151 ops/s
Iteration  28: 4345999.512 ops/s
Iteration  29: 4613905.397 ops/s
Iteration  30: 4784444.722 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toList":
  4507495.223 ±(99.9%) 90928.885 ops/s [Average]
  (min, avg, max) = (4345999.512, 4507495.223, 4819098.543), stdev = 136098.085
  CI (99.9%): [4416566.338, 4598424.108] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_toList  thrpt   30  4507495.223 ± 90928.885  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1634157.233 ops/s
# Warmup Iteration   2: 2006327.764 ops/s
# Warmup Iteration   3: 2592590.642 ops/s
# Warmup Iteration   4: 2605897.484 ops/s
# Warmup Iteration   5: 2587307.589 ops/s
# Warmup Iteration   6: 2602552.688 ops/s
# Warmup Iteration   7: 2636471.440 ops/s
# Warmup Iteration   8: 2831826.233 ops/s
# Warmup Iteration   9: 2325594.385 ops/s
# Warmup Iteration  10: 2565971.655 ops/s
# Warmup Iteration  11: 2621477.685 ops/s
# Warmup Iteration  12: 2665710.850 ops/s
# Warmup Iteration  13: 2672391.398 ops/s
# Warmup Iteration  14: 2765192.520 ops/s
# Warmup Iteration  15: 2627047.238 ops/s
# Warmup Iteration  16: 2593471.321 ops/s
# Warmup Iteration  17: 2586496.937 ops/s
# Warmup Iteration  18: 2716119.414 ops/s
# Warmup Iteration  19: 2653848.324 ops/s
# Warmup Iteration  20: 2754580.003 ops/s
# Warmup Iteration  21: 2701779.057 ops/s
# Warmup Iteration  22: 2591078.038 ops/s
# Warmup Iteration  23: 2582759.659 ops/s
# Warmup Iteration  24: 2594029.792 ops/s
# Warmup Iteration  25: 2594515.256 ops/s
# Warmup Iteration  26: 2593757.860 ops/s
# Warmup Iteration  27: 2812801.914 ops/s
# Warmup Iteration  28: 2671374.853 ops/s
# Warmup Iteration  29: 2580207.884 ops/s
# Warmup Iteration  30: 2753067.214 ops/s
Iteration   1: 2597662.969 ops/s
Iteration   2: 2702376.333 ops/s
Iteration   3: 2542231.811 ops/s
Iteration   4: 2672320.207 ops/s
Iteration   5: 2604415.496 ops/s
Iteration   6: 2580896.714 ops/s
Iteration   7: 2549169.103 ops/s
Iteration   8: 2574620.985 ops/s
Iteration   9: 2599918.859 ops/s
Iteration  10: 2622538.873 ops/s
Iteration  11: 2762905.933 ops/s
Iteration  12: 2771469.433 ops/s
Iteration  13: 2582518.960 ops/s
Iteration  14: 2608198.515 ops/s
Iteration  15: 2592739.305 ops/s
Iteration  16: 2766001.327 ops/s
Iteration  17: 2681555.555 ops/s
Iteration  18: 2577469.058 ops/s
Iteration  19: 2614220.002 ops/s
Iteration  20: 2801878.507 ops/s
Iteration  21: 2820906.646 ops/s
Iteration  22: 2726045.974 ops/s
Iteration  23: 2619486.499 ops/s
Iteration  24: 2602861.838 ops/s
Iteration  25: 2569931.691 ops/s
Iteration  26: 2546030.621 ops/s
Iteration  27: 2582950.272 ops/s
Iteration  28: 2546001.763 ops/s
Iteration  29: 2612353.764 ops/s
Iteration  30: 2547815.526 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toReversed":
  2632649.751 ±(99.9%) 55234.409 ops/s [Average]
  (min, avg, max) = (2542231.811, 2632649.751, 2820906.646), stdev = 82672.270
  CI (99.9%): [2577415.342, 2687884.161] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_toReversed  thrpt   30  2632649.751 ± 55234.409  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2652209.697 ops/s
# Warmup Iteration   2: 3196311.168 ops/s
# Warmup Iteration   3: 4244540.598 ops/s
# Warmup Iteration   4: 4157773.918 ops/s
# Warmup Iteration   5: 4152913.977 ops/s
# Warmup Iteration   6: 4153126.992 ops/s
# Warmup Iteration   7: 4468778.739 ops/s
# Warmup Iteration   8: 4276065.252 ops/s
# Warmup Iteration   9: 3357562.845 ops/s
# Warmup Iteration  10: 4220412.028 ops/s
# Warmup Iteration  11: 4138983.477 ops/s
# Warmup Iteration  12: 4174291.831 ops/s
# Warmup Iteration  13: 4163468.844 ops/s
# Warmup Iteration  14: 4260637.973 ops/s
# Warmup Iteration  15: 4399461.194 ops/s
# Warmup Iteration  16: 4216880.734 ops/s
# Warmup Iteration  17: 4135866.425 ops/s
# Warmup Iteration  18: 4216678.566 ops/s
# Warmup Iteration  19: 4282001.129 ops/s
# Warmup Iteration  20: 4305191.790 ops/s
# Warmup Iteration  21: 4465627.771 ops/s
# Warmup Iteration  22: 4189063.572 ops/s
# Warmup Iteration  23: 4299157.361 ops/s
# Warmup Iteration  24: 4361914.721 ops/s
# Warmup Iteration  25: 4330302.160 ops/s
# Warmup Iteration  26: 4235791.783 ops/s
# Warmup Iteration  27: 4158585.303 ops/s
# Warmup Iteration  28: 4163867.245 ops/s
# Warmup Iteration  29: 4136043.722 ops/s
# Warmup Iteration  30: 4237474.320 ops/s
Iteration   1: 4355451.671 ops/s
Iteration   2: 4392025.630 ops/s
Iteration   3: 4369227.588 ops/s
Iteration   4: 4508619.961 ops/s
Iteration   5: 4406441.310 ops/s
Iteration   6: 4338330.909 ops/s
Iteration   7: 4145797.617 ops/s
Iteration   8: 4148405.135 ops/s
Iteration   9: 4192759.800 ops/s
Iteration  10: 4165524.316 ops/s
Iteration  11: 4178626.280 ops/s
Iteration  12: 4156636.824 ops/s
Iteration  13: 4380322.347 ops/s
Iteration  14: 4536703.325 ops/s
Iteration  15: 4254397.166 ops/s
Iteration  16: 4278852.499 ops/s
Iteration  17: 4132599.652 ops/s
Iteration  18: 4162732.355 ops/s
Iteration  19: 4066937.028 ops/s
Iteration  20: 4179323.293 ops/s
Iteration  21: 4222264.371 ops/s
Iteration  22: 4164484.332 ops/s
Iteration  23: 4045846.008 ops/s
Iteration  24: 4185528.527 ops/s
Iteration  25: 4205427.613 ops/s
Iteration  26: 4318488.419 ops/s
Iteration  27: 4518199.670 ops/s
Iteration  28: 4441380.768 ops/s
Iteration  29: 4229710.706 ops/s
Iteration  30: 4215243.364 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedList":
  4263209.616 ±(99.9%) 89081.061 ops/s [Average]
  (min, avg, max) = (4045846.008, 4263209.616, 4536703.325), stdev = 133332.349
  CI (99.9%): [4174128.555, 4352290.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_toSortedList  thrpt   30  4263209.616 ± 89081.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1140780.860 ops/s
# Warmup Iteration   2: 1228490.960 ops/s
# Warmup Iteration   3: 1257347.711 ops/s
# Warmup Iteration   4: 1378144.492 ops/s
# Warmup Iteration   5: 1481246.793 ops/s
# Warmup Iteration   6: 1466201.824 ops/s
# Warmup Iteration   7: 1538949.864 ops/s
# Warmup Iteration   8: 1516547.476 ops/s
# Warmup Iteration   9: 1461545.858 ops/s
# Warmup Iteration  10: 1495277.063 ops/s
# Warmup Iteration  11: 1534685.168 ops/s
# Warmup Iteration  12: 1461960.772 ops/s
# Warmup Iteration  13: 1444490.118 ops/s
# Warmup Iteration  14: 1553782.608 ops/s
# Warmup Iteration  15: 1483315.981 ops/s
# Warmup Iteration  16: 1440116.209 ops/s
# Warmup Iteration  17: 1463163.314 ops/s
# Warmup Iteration  18: 1446944.660 ops/s
# Warmup Iteration  19: 1440314.014 ops/s
# Warmup Iteration  20: 1503876.762 ops/s
# Warmup Iteration  21: 1515933.142 ops/s
# Warmup Iteration  22: 1332059.878 ops/s
# Warmup Iteration  23: 1315692.084 ops/s
# Warmup Iteration  24: 1434273.447 ops/s
# Warmup Iteration  25: 1445636.080 ops/s
# Warmup Iteration  26: 1437800.179 ops/s
# Warmup Iteration  27: 1470012.174 ops/s
# Warmup Iteration  28: 1480079.588 ops/s
# Warmup Iteration  29: 1577968.656 ops/s
# Warmup Iteration  30: 1503531.398 ops/s
Iteration   1: 1440886.342 ops/s
Iteration   2: 1465544.334 ops/s
Iteration   3: 1490826.337 ops/s
Iteration   4: 1436682.694 ops/s
Iteration   5: 1441415.412 ops/s
Iteration   6: 1474574.973 ops/s
Iteration   7: 1428075.059 ops/s
Iteration   8: 1434205.922 ops/s
Iteration   9: 1456827.645 ops/s
Iteration  10: 1495676.872 ops/s
Iteration  11: 1494198.517 ops/s
Iteration  12: 1483337.541 ops/s
Iteration  13: 1480928.739 ops/s
Iteration  14: 1462288.899 ops/s
Iteration  15: 1470340.520 ops/s
Iteration  16: 1446189.329 ops/s
Iteration  17: 1498404.030 ops/s
Iteration  18: 1445152.004 ops/s
Iteration  19: 1529446.041 ops/s
Iteration  20: 1453912.367 ops/s
Iteration  21: 1440536.376 ops/s
Iteration  22: 1462655.775 ops/s
Iteration  23: 1520371.240 ops/s
Iteration  24: 1604794.249 ops/s
Iteration  25: 1607627.530 ops/s
Iteration  26: 1481998.710 ops/s
Iteration  27: 1486804.275 ops/s
Iteration  28: 1497901.977 ops/s
Iteration  29: 1446444.474 ops/s
Iteration  30: 1473925.019 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedListBy":
  1478399.107 ±(99.9%) 28850.533 ops/s [Average]
  (min, avg, max) = (1428075.059, 1478399.107, 1607627.530), stdev = 43182.122
  CI (99.9%): [1449548.574, 1507249.639] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  1478399.107 ± 28850.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1190467.055 ops/s
# Warmup Iteration   2: 2325072.330 ops/s
# Warmup Iteration   3: 2484756.405 ops/s
# Warmup Iteration   4: 2464545.354 ops/s
# Warmup Iteration   5: 2126754.745 ops/s
# Warmup Iteration   6: 2558990.398 ops/s
# Warmup Iteration   7: 2510460.886 ops/s
# Warmup Iteration   8: 2595704.996 ops/s
# Warmup Iteration   9: 2581898.401 ops/s
# Warmup Iteration  10: 2562048.030 ops/s
# Warmup Iteration  11: 2734311.163 ops/s
# Warmup Iteration  12: 2571569.742 ops/s
# Warmup Iteration  13: 2545767.275 ops/s
# Warmup Iteration  14: 2558719.837 ops/s
# Warmup Iteration  15: 2535128.819 ops/s
# Warmup Iteration  16: 2487459.288 ops/s
# Warmup Iteration  17: 2553469.076 ops/s
# Warmup Iteration  18: 2530908.175 ops/s
# Warmup Iteration  19: 2538367.880 ops/s
# Warmup Iteration  20: 2579268.574 ops/s
# Warmup Iteration  21: 2545351.352 ops/s
# Warmup Iteration  22: 2559081.101 ops/s
# Warmup Iteration  23: 2520477.234 ops/s
# Warmup Iteration  24: 2761434.808 ops/s
# Warmup Iteration  25: 2646937.364 ops/s
# Warmup Iteration  26: 2546498.076 ops/s
# Warmup Iteration  27: 2587361.435 ops/s
# Warmup Iteration  28: 2553697.777 ops/s
# Warmup Iteration  29: 2491581.655 ops/s
# Warmup Iteration  30: 2537330.268 ops/s
Iteration   1: 2702078.073 ops/s
Iteration   2: 2708682.700 ops/s
Iteration   3: 2573647.291 ops/s
Iteration   4: 2548782.768 ops/s
Iteration   5: 2558494.408 ops/s
Iteration   6: 2573902.181 ops/s
Iteration   7: 2516686.214 ops/s
Iteration   8: 2551321.514 ops/s
Iteration   9: 2525695.551 ops/s
Iteration  10: 2559138.168 ops/s
Iteration  11: 2653959.066 ops/s
Iteration  12: 2759357.968 ops/s
Iteration  13: 2734435.998 ops/s
Iteration  14: 2710889.921 ops/s
Iteration  15: 2574606.460 ops/s
Iteration  16: 2535807.928 ops/s
Iteration  17: 2644680.360 ops/s
Iteration  18: 2731873.947 ops/s
Iteration  19: 2597577.359 ops/s
Iteration  20: 2513480.174 ops/s
Iteration  21: 2630976.141 ops/s
Iteration  22: 2498847.667 ops/s
Iteration  23: 2522648.709 ops/s
Iteration  24: 2510939.326 ops/s
Iteration  25: 2479188.142 ops/s
Iteration  26: 2516733.328 ops/s
Iteration  27: 2538656.562 ops/s
Iteration  28: 2711265.379 ops/s
Iteration  29: 2719484.311 ops/s
Iteration  30: 2595408.580 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedSet":
  2599974.873 ±(99.9%) 57103.938 ops/s [Average]
  (min, avg, max) = (2479188.142, 2599974.873, 2759357.968), stdev = 85470.492
  CI (99.9%): [2542870.935, 2657078.811] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_toSortedSet  thrpt   30  2599974.873 ± 57103.938  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 263781.004 ops/s
# Warmup Iteration   2: 438377.328 ops/s
# Warmup Iteration   3: 554098.633 ops/s
# Warmup Iteration   4: 535254.816 ops/s
# Warmup Iteration   5: 537066.506 ops/s
# Warmup Iteration   6: 527767.657 ops/s
# Warmup Iteration   7: 410393.653 ops/s
# Warmup Iteration   8: 549878.125 ops/s
# Warmup Iteration   9: 551073.672 ops/s
# Warmup Iteration  10: 550819.300 ops/s
# Warmup Iteration  11: 522719.066 ops/s
# Warmup Iteration  12: 527085.915 ops/s
# Warmup Iteration  13: 527840.014 ops/s
# Warmup Iteration  14: 535660.114 ops/s
# Warmup Iteration  15: 573117.296 ops/s
# Warmup Iteration  16: 565499.443 ops/s
# Warmup Iteration  17: 541531.361 ops/s
# Warmup Iteration  18: 530803.646 ops/s
# Warmup Iteration  19: 533275.000 ops/s
# Warmup Iteration  20: 529811.334 ops/s
# Warmup Iteration  21: 550840.757 ops/s
# Warmup Iteration  22: 563595.228 ops/s
# Warmup Iteration  23: 535566.695 ops/s
# Warmup Iteration  24: 521190.783 ops/s
# Warmup Iteration  25: 550078.127 ops/s
# Warmup Iteration  26: 529756.134 ops/s
# Warmup Iteration  27: 527174.188 ops/s
# Warmup Iteration  28: 562393.869 ops/s
# Warmup Iteration  29: 567059.778 ops/s
# Warmup Iteration  30: 528608.047 ops/s
Iteration   1: 532069.081 ops/s
Iteration   2: 528108.986 ops/s
Iteration   3: 551088.292 ops/s
Iteration   4: 567548.265 ops/s
Iteration   5: 566495.873 ops/s
Iteration   6: 540920.440 ops/s
Iteration   7: 529952.043 ops/s
Iteration   8: 540339.073 ops/s
Iteration   9: 553566.345 ops/s
Iteration  10: 534730.539 ops/s
Iteration  11: 518558.805 ops/s
Iteration  12: 513517.625 ops/s
Iteration  13: 527041.770 ops/s
Iteration  14: 537585.226 ops/s
Iteration  15: 530789.754 ops/s
Iteration  16: 542878.738 ops/s
Iteration  17: 564220.110 ops/s
Iteration  18: 542839.974 ops/s
Iteration  19: 551964.541 ops/s
Iteration  20: 560146.093 ops/s
Iteration  21: 545356.609 ops/s
Iteration  22: 530317.710 ops/s
Iteration  23: 521789.901 ops/s
Iteration  24: 517888.056 ops/s
Iteration  25: 526787.287 ops/s
Iteration  26: 533440.816 ops/s
Iteration  27: 534399.368 ops/s
Iteration  28: 524841.992 ops/s
Iteration  29: 567076.895 ops/s
Iteration  30: 578135.129 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedSetBy":
  540479.845 ±(99.9%) 11286.393 ops/s [Average]
  (min, avg, max) = (513517.625, 540479.845, 578135.129), stdev = 16892.943
  CI (99.9%): [529193.451, 551766.238] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  540479.845 ± 11286.393  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 855727.483 ops/s
# Warmup Iteration   2: 1563257.294 ops/s
# Warmup Iteration   3: 1752464.878 ops/s
# Warmup Iteration   4: 1757618.227 ops/s
# Warmup Iteration   5: 1748597.784 ops/s
# Warmup Iteration   6: 1390029.812 ops/s
# Warmup Iteration   7: 1743689.125 ops/s
# Warmup Iteration   8: 1784726.517 ops/s
# Warmup Iteration   9: 1854393.657 ops/s
# Warmup Iteration  10: 1782886.223 ops/s
# Warmup Iteration  11: 1730783.031 ops/s
# Warmup Iteration  12: 1718137.971 ops/s
# Warmup Iteration  13: 1761151.550 ops/s
# Warmup Iteration  14: 1742230.782 ops/s
# Warmup Iteration  15: 1895556.023 ops/s
# Warmup Iteration  16: 1847430.157 ops/s
# Warmup Iteration  17: 1823812.318 ops/s
# Warmup Iteration  18: 1762014.974 ops/s
# Warmup Iteration  19: 1807062.468 ops/s
# Warmup Iteration  20: 1865295.283 ops/s
# Warmup Iteration  21: 1765958.931 ops/s
# Warmup Iteration  22: 1739519.192 ops/s
# Warmup Iteration  23: 1737633.417 ops/s
# Warmup Iteration  24: 1773165.246 ops/s
# Warmup Iteration  25: 1846024.391 ops/s
# Warmup Iteration  26: 1728222.459 ops/s
# Warmup Iteration  27: 1720357.515 ops/s
# Warmup Iteration  28: 1813761.726 ops/s
# Warmup Iteration  29: 1854980.048 ops/s
# Warmup Iteration  30: 1746360.251 ops/s
Iteration   1: 1762919.124 ops/s
Iteration   2: 1736871.837 ops/s
Iteration   3: 1687295.474 ops/s
Iteration   4: 1744579.689 ops/s
Iteration   5: 1795389.707 ops/s
Iteration   6: 1787672.910 ops/s
Iteration   7: 1744967.858 ops/s
Iteration   8: 1736865.267 ops/s
Iteration   9: 1766366.936 ops/s
Iteration  10: 1766872.288 ops/s
Iteration  11: 1736959.157 ops/s
Iteration  12: 1788183.501 ops/s
Iteration  13: 1841632.186 ops/s
Iteration  14: 1849762.308 ops/s
Iteration  15: 1740176.220 ops/s
Iteration  16: 1805936.750 ops/s
Iteration  17: 1891425.848 ops/s
Iteration  18: 1772462.881 ops/s
Iteration  19: 1754211.538 ops/s
Iteration  20: 1752916.726 ops/s
Iteration  21: 1753838.075 ops/s
Iteration  22: 1741635.873 ops/s
Iteration  23: 1735068.664 ops/s
Iteration  24: 1868873.219 ops/s
Iteration  25: 1901332.559 ops/s
Iteration  26: 1842164.434 ops/s
Iteration  27: 1810661.962 ops/s
Iteration  28: 1754426.339 ops/s
Iteration  29: 1775715.438 ops/s
Iteration  30: 1751516.604 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toSortedSetWithComparator":
  1779956.712 ±(99.9%) 34098.845 ops/s [Average]
  (min, avg, max) = (1687295.474, 1779956.712, 1901332.559), stdev = 51037.550
  CI (99.9%): [1745857.867, 1814055.557] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  1779956.712 ± 34098.845  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1838145.370 ops/s
# Warmup Iteration   2: 3291722.473 ops/s
# Warmup Iteration   3: 3847373.338 ops/s
# Warmup Iteration   4: 4106393.785 ops/s
# Warmup Iteration   5: 3829918.319 ops/s
# Warmup Iteration   6: 3764152.174 ops/s
# Warmup Iteration   7: 3169056.287 ops/s
# Warmup Iteration   8: 3782339.688 ops/s
# Warmup Iteration   9: 3755136.250 ops/s
# Warmup Iteration  10: 3803631.262 ops/s
# Warmup Iteration  11: 3997378.110 ops/s
# Warmup Iteration  12: 4142350.227 ops/s
# Warmup Iteration  13: 4145565.283 ops/s
# Warmup Iteration  14: 3925310.221 ops/s
# Warmup Iteration  15: 3764146.801 ops/s
# Warmup Iteration  16: 3774002.382 ops/s
# Warmup Iteration  17: 4010623.275 ops/s
# Warmup Iteration  18: 3884414.413 ops/s
# Warmup Iteration  19: 4009139.144 ops/s
# Warmup Iteration  20: 4069169.369 ops/s
# Warmup Iteration  21: 3846486.180 ops/s
# Warmup Iteration  22: 3865408.484 ops/s
# Warmup Iteration  23: 3799863.150 ops/s
# Warmup Iteration  24: 3822527.965 ops/s
# Warmup Iteration  25: 3970659.369 ops/s
# Warmup Iteration  26: 4114717.352 ops/s
# Warmup Iteration  27: 3809051.355 ops/s
# Warmup Iteration  28: 3800475.254 ops/s
# Warmup Iteration  29: 4067326.074 ops/s
# Warmup Iteration  30: 4053287.108 ops/s
Iteration   1: 4129107.410 ops/s
Iteration   2: 4141746.474 ops/s
Iteration   3: 3864051.223 ops/s
Iteration   4: 3838392.965 ops/s
Iteration   5: 3876479.675 ops/s
Iteration   6: 3795416.904 ops/s
Iteration   7: 3775490.271 ops/s
Iteration   8: 3927414.661 ops/s
Iteration   9: 4130804.280 ops/s
Iteration  10: 4016221.758 ops/s
Iteration  11: 3982966.859 ops/s
Iteration  12: 3822596.938 ops/s
Iteration  13: 3829428.078 ops/s
Iteration  14: 4069535.987 ops/s
Iteration  15: 4090885.195 ops/s
Iteration  16: 4123232.483 ops/s
Iteration  17: 4142854.821 ops/s
Iteration  18: 4112496.650 ops/s
Iteration  19: 4153510.306 ops/s
Iteration  20: 3978342.559 ops/s
Iteration  21: 3709873.308 ops/s
Iteration  22: 3992852.247 ops/s
Iteration  23: 3915163.580 ops/s
Iteration  24: 3853085.402 ops/s
Iteration  25: 3807523.327 ops/s
Iteration  26: 3715312.880 ops/s
Iteration  27: 3843945.917 ops/s
Iteration  28: 3883474.796 ops/s
Iteration  29: 4127171.106 ops/s
Iteration  30: 4148711.675 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_toStack":
  3959936.325 ±(99.9%) 97446.175 ops/s [Average]
  (min, avg, max) = (3709873.308, 3959936.325, 4153510.306), stdev = 145852.858
  CI (99.9%): [3862490.150, 4057382.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_toStack  thrpt   30  3959936.325 ± 97446.175  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 270160.099 ops/s
# Warmup Iteration   2: 447098.625 ops/s
# Warmup Iteration   3: 514384.054 ops/s
# Warmup Iteration   4: 520307.497 ops/s
# Warmup Iteration   5: 495178.611 ops/s
# Warmup Iteration   6: 395582.168 ops/s
# Warmup Iteration   7: 521411.365 ops/s
# Warmup Iteration   8: 521941.457 ops/s
# Warmup Iteration   9: 516976.902 ops/s
# Warmup Iteration  10: 510024.622 ops/s
# Warmup Iteration  11: 505803.072 ops/s
# Warmup Iteration  12: 498324.609 ops/s
# Warmup Iteration  13: 486035.923 ops/s
# Warmup Iteration  14: 512573.752 ops/s
# Warmup Iteration  15: 494199.860 ops/s
# Warmup Iteration  16: 474777.227 ops/s
# Warmup Iteration  17: 490683.334 ops/s
# Warmup Iteration  18: 490340.781 ops/s
# Warmup Iteration  19: 484524.824 ops/s
# Warmup Iteration  20: 482526.203 ops/s
# Warmup Iteration  21: 520153.333 ops/s
# Warmup Iteration  22: 470609.836 ops/s
# Warmup Iteration  23: 499523.178 ops/s
# Warmup Iteration  24: 505691.855 ops/s
# Warmup Iteration  25: 491692.995 ops/s
# Warmup Iteration  26: 500093.782 ops/s
# Warmup Iteration  27: 484176.354 ops/s
# Warmup Iteration  28: 473349.803 ops/s
# Warmup Iteration  29: 481873.916 ops/s
# Warmup Iteration  30: 487371.143 ops/s
Iteration   1: 518663.543 ops/s
Iteration   2: 505242.057 ops/s
Iteration   3: 481388.217 ops/s
Iteration   4: 474026.023 ops/s
Iteration   5: 469352.154 ops/s
Iteration   6: 470447.842 ops/s
Iteration   7: 482183.340 ops/s
Iteration   8: 483854.805 ops/s
Iteration   9: 471039.449 ops/s
Iteration  10: 480189.978 ops/s
Iteration  11: 486538.225 ops/s
Iteration  12: 508608.096 ops/s
Iteration  13: 517980.680 ops/s
Iteration  14: 481827.591 ops/s
Iteration  15: 476620.733 ops/s
Iteration  16: 472431.252 ops/s
Iteration  17: 480035.968 ops/s
Iteration  18: 489811.386 ops/s
Iteration  19: 491345.349 ops/s
Iteration  20: 476752.446 ops/s
Iteration  21: 469100.763 ops/s
Iteration  22: 504398.435 ops/s
Iteration  23: 512261.392 ops/s
Iteration  24: 497651.966 ops/s
Iteration  25: 476714.078 ops/s
Iteration  26: 485934.654 ops/s
Iteration  27: 482241.081 ops/s
Iteration  28: 481963.040 ops/s
Iteration  29: 478548.787 ops/s
Iteration  30: 483334.533 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_zip":
  486349.595 ±(99.9%) 9618.523 ops/s [Average]
  (min, avg, max) = (469100.763, 486349.595, 518663.543), stdev = 14396.554
  CI (99.9%): [476731.072, 495968.119] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_zip  thrpt   30  486349.595 ± 9618.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 620023.871 ops/s
# Warmup Iteration   2: 1150316.613 ops/s
# Warmup Iteration   3: 1353026.858 ops/s
# Warmup Iteration   4: 1307372.212 ops/s
# Warmup Iteration   5: 1160563.156 ops/s
# Warmup Iteration   6: 1159927.016 ops/s
# Warmup Iteration   7: 1241597.891 ops/s
# Warmup Iteration   8: 1278358.527 ops/s
# Warmup Iteration   9: 1258582.133 ops/s
# Warmup Iteration  10: 1364668.081 ops/s
# Warmup Iteration  11: 1334606.993 ops/s
# Warmup Iteration  12: 1276969.925 ops/s
# Warmup Iteration  13: 1294626.904 ops/s
# Warmup Iteration  14: 1236648.623 ops/s
# Warmup Iteration  15: 1280313.974 ops/s
# Warmup Iteration  16: 1256073.865 ops/s
# Warmup Iteration  17: 1329342.301 ops/s
# Warmup Iteration  18: 1300676.538 ops/s
# Warmup Iteration  19: 1275196.810 ops/s
# Warmup Iteration  20: 1256150.606 ops/s
# Warmup Iteration  21: 1275611.808 ops/s
# Warmup Iteration  22: 1248231.853 ops/s
# Warmup Iteration  23: 1241943.673 ops/s
# Warmup Iteration  24: 1370217.272 ops/s
# Warmup Iteration  25: 1294301.449 ops/s
# Warmup Iteration  26: 1272137.618 ops/s
# Warmup Iteration  27: 1250969.224 ops/s
# Warmup Iteration  28: 1264013.623 ops/s
# Warmup Iteration  29: 1264642.388 ops/s
# Warmup Iteration  30: 1255756.506 ops/s
Iteration   1: 1293428.098 ops/s
Iteration   2: 1331140.009 ops/s
Iteration   3: 1349277.457 ops/s
Iteration   4: 1323653.025 ops/s
Iteration   5: 1255933.971 ops/s
Iteration   6: 1262567.076 ops/s
Iteration   7: 1273804.455 ops/s
Iteration   8: 1299353.654 ops/s
Iteration   9: 1257041.333 ops/s
Iteration  10: 1252018.850 ops/s
Iteration  11: 1261899.653 ops/s
Iteration  12: 1273197.602 ops/s
Iteration  13: 1378576.512 ops/s
Iteration  14: 1373987.558 ops/s
Iteration  15: 1320914.710 ops/s
Iteration  16: 1275345.952 ops/s
Iteration  17: 1263387.963 ops/s
Iteration  18: 1267911.873 ops/s
Iteration  19: 1256620.540 ops/s
Iteration  20: 1253021.471 ops/s
Iteration  21: 1270608.772 ops/s
Iteration  22: 1261336.211 ops/s
Iteration  23: 1368656.039 ops/s
Iteration  24: 1300326.152 ops/s
Iteration  25: 1342685.219 ops/s
Iteration  26: 1322696.735 ops/s
Iteration  27: 1281634.494 ops/s
Iteration  28: 1244086.957 ops/s
Iteration  29: 1255857.795 ops/s
Iteration  30: 1267239.081 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_zipWithIndex":
  1291273.641 ±(99.9%) 26928.492 ops/s [Average]
  (min, avg, max) = (1244086.957, 1291273.641, 1378576.512), stdev = 40305.302
  CI (99.9%): [1264345.148, 1318202.133] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  1291273.641 ± 26928.492  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702471.271 ops/s
# Warmup Iteration   2: 724470.013 ops/s
# Warmup Iteration   3: 938963.027 ops/s
# Warmup Iteration   4: 980269.195 ops/s
# Warmup Iteration   5: 982756.182 ops/s
# Warmup Iteration   6: 969925.005 ops/s
# Warmup Iteration   7: 954480.245 ops/s
# Warmup Iteration   8: 964663.843 ops/s
# Warmup Iteration   9: 986431.935 ops/s
# Warmup Iteration  10: 941677.972 ops/s
# Warmup Iteration  11: 909830.554 ops/s
# Warmup Iteration  12: 771865.249 ops/s
# Warmup Iteration  13: 866375.392 ops/s
# Warmup Iteration  14: 916188.350 ops/s
# Warmup Iteration  15: 962966.261 ops/s
# Warmup Iteration  16: 907950.348 ops/s
# Warmup Iteration  17: 943422.099 ops/s
# Warmup Iteration  18: 965125.291 ops/s
# Warmup Iteration  19: 963912.623 ops/s
# Warmup Iteration  20: 980510.852 ops/s
# Warmup Iteration  21: 1038301.595 ops/s
# Warmup Iteration  22: 964680.030 ops/s
# Warmup Iteration  23: 951389.544 ops/s
# Warmup Iteration  24: 1017837.366 ops/s
# Warmup Iteration  25: 968839.295 ops/s
# Warmup Iteration  26: 966755.203 ops/s
# Warmup Iteration  27: 950455.321 ops/s
# Warmup Iteration  28: 994545.194 ops/s
# Warmup Iteration  29: 948076.988 ops/s
# Warmup Iteration  30: 958142.401 ops/s
Iteration   1: 954232.694 ops/s
Iteration   2: 976184.023 ops/s
Iteration   3: 955151.023 ops/s
Iteration   4: 962714.742 ops/s
Iteration   5: 979081.055 ops/s
Iteration   6: 992267.644 ops/s
Iteration   7: 1018138.388 ops/s
Iteration   8: 946045.989 ops/s
Iteration   9: 949730.361 ops/s
Iteration  10: 998477.131 ops/s
Iteration  11: 1042550.760 ops/s
Iteration  12: 1032305.762 ops/s
Iteration  13: 943167.614 ops/s
Iteration  14: 958807.155 ops/s
Iteration  15: 976850.469 ops/s
Iteration  16: 957230.648 ops/s
Iteration  17: 991703.057 ops/s
Iteration  18: 969630.653 ops/s
Iteration  19: 947525.147 ops/s
Iteration  20: 949179.753 ops/s
Iteration  21: 937216.585 ops/s
Iteration  22: 941715.510 ops/s
Iteration  23: 947640.976 ops/s
Iteration  24: 961801.289 ops/s
Iteration  25: 975023.377 ops/s
Iteration  26: 1005540.693 ops/s
Iteration  27: 1044320.124 ops/s
Iteration  28: 1037288.396 ops/s
Iteration  29: 993363.651 ops/s
Iteration  30: 924208.090 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_add":
  975636.425 ±(99.9%) 22308.828 ops/s [Average]
  (min, avg, max) = (924208.090, 975636.425, 1044320.124), stdev = 33390.807
  CI (99.9%): [953327.597, 997945.254] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_add  thrpt   30  975636.425 ± 22308.828  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 689851.532 ops/s
# Warmup Iteration   2: 719119.102 ops/s
# Warmup Iteration   3: 884135.988 ops/s
# Warmup Iteration   4: 908679.515 ops/s
# Warmup Iteration   5: 867459.744 ops/s
# Warmup Iteration   6: 836955.957 ops/s
# Warmup Iteration   7: 863410.936 ops/s
# Warmup Iteration   8: 902843.365 ops/s
# Warmup Iteration   9: 961418.620 ops/s
# Warmup Iteration  10: 896739.296 ops/s
# Warmup Iteration  11: 900690.635 ops/s
# Warmup Iteration  12: 888898.193 ops/s
# Warmup Iteration  13: 790937.483 ops/s
# Warmup Iteration  14: 891037.360 ops/s
# Warmup Iteration  15: 904058.346 ops/s
# Warmup Iteration  16: 932797.254 ops/s
# Warmup Iteration  17: 942722.091 ops/s
# Warmup Iteration  18: 934638.029 ops/s
# Warmup Iteration  19: 925884.010 ops/s
# Warmup Iteration  20: 942996.644 ops/s
# Warmup Iteration  21: 993263.036 ops/s
# Warmup Iteration  22: 990278.987 ops/s
# Warmup Iteration  23: 936468.548 ops/s
# Warmup Iteration  24: 921938.658 ops/s
# Warmup Iteration  25: 986432.853 ops/s
# Warmup Iteration  26: 966068.926 ops/s
# Warmup Iteration  27: 942295.287 ops/s
# Warmup Iteration  28: 947212.160 ops/s
# Warmup Iteration  29: 926046.697 ops/s
# Warmup Iteration  30: 948360.711 ops/s
Iteration   1: 963890.237 ops/s
Iteration   2: 942922.211 ops/s
Iteration   3: 919846.420 ops/s
Iteration   4: 913959.554 ops/s
Iteration   5: 952604.798 ops/s
Iteration   6: 950835.015 ops/s
Iteration   7: 951602.317 ops/s
Iteration   8: 914438.685 ops/s
Iteration   9: 1026756.303 ops/s
Iteration  10: 1022219.142 ops/s
Iteration  11: 973897.968 ops/s
Iteration  12: 926187.545 ops/s
Iteration  13: 967036.613 ops/s
Iteration  14: 943218.694 ops/s
Iteration  15: 938209.830 ops/s
Iteration  16: 962306.223 ops/s
Iteration  17: 919062.179 ops/s
Iteration  18: 936784.964 ops/s
Iteration  19: 938815.565 ops/s
Iteration  20: 945899.045 ops/s
Iteration  21: 942969.939 ops/s
Iteration  22: 945535.055 ops/s
Iteration  23: 944009.907 ops/s
Iteration  24: 948324.695 ops/s
Iteration  25: 954447.327 ops/s
Iteration  26: 1006715.232 ops/s
Iteration  27: 992805.797 ops/s
Iteration  28: 965786.901 ops/s
Iteration  29: 951950.873 ops/s
Iteration  30: 940355.908 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_addAll":
  953446.498 ±(99.9%) 18830.982 ops/s [Average]
  (min, avg, max) = (913959.554, 953446.498, 1026756.303), stdev = 28185.329
  CI (99.9%): [934615.516, 972277.480] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_addAll  thrpt   30  953446.498 ± 18830.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693864.594 ops/s
# Warmup Iteration   2: 721365.419 ops/s
# Warmup Iteration   3: 926867.234 ops/s
# Warmup Iteration   4: 957729.806 ops/s
# Warmup Iteration   5: 1006524.695 ops/s
# Warmup Iteration   6: 932465.216 ops/s
# Warmup Iteration   7: 929126.199 ops/s
# Warmup Iteration   8: 928477.489 ops/s
# Warmup Iteration   9: 989072.240 ops/s
# Warmup Iteration  10: 922867.250 ops/s
# Warmup Iteration  11: 936600.801 ops/s
# Warmup Iteration  12: 776563.900 ops/s
# Warmup Iteration  13: 910415.873 ops/s
# Warmup Iteration  14: 928640.322 ops/s
# Warmup Iteration  15: 1012256.347 ops/s
# Warmup Iteration  16: 936800.100 ops/s
# Warmup Iteration  17: 1041652.219 ops/s
# Warmup Iteration  18: 1003653.520 ops/s
# Warmup Iteration  19: 1037504.125 ops/s
# Warmup Iteration  20: 989737.768 ops/s
# Warmup Iteration  21: 964477.314 ops/s
# Warmup Iteration  22: 995962.241 ops/s
# Warmup Iteration  23: 1034880.145 ops/s
# Warmup Iteration  24: 990091.555 ops/s
# Warmup Iteration  25: 984842.892 ops/s
# Warmup Iteration  26: 978936.152 ops/s
# Warmup Iteration  27: 985594.097 ops/s
# Warmup Iteration  28: 1023646.519 ops/s
# Warmup Iteration  29: 1019089.541 ops/s
# Warmup Iteration  30: 1051379.401 ops/s
Iteration   1: 1057704.555 ops/s
Iteration   2: 1012692.240 ops/s
Iteration   3: 975088.417 ops/s
Iteration   4: 992705.181 ops/s
Iteration   5: 972465.524 ops/s
Iteration   6: 985110.616 ops/s
Iteration   7: 963494.447 ops/s
Iteration   8: 968171.061 ops/s
Iteration   9: 1010750.102 ops/s
Iteration  10: 1064962.736 ops/s
Iteration  11: 1024399.380 ops/s
Iteration  12: 999667.755 ops/s
Iteration  13: 966584.993 ops/s
Iteration  14: 1009007.697 ops/s
Iteration  15: 998791.246 ops/s
Iteration  16: 984613.126 ops/s
Iteration  17: 974251.942 ops/s
Iteration  18: 974047.775 ops/s
Iteration  19: 974524.248 ops/s
Iteration  20: 967377.156 ops/s
Iteration  21: 1001499.944 ops/s
Iteration  22: 1063566.847 ops/s
Iteration  23: 1058912.597 ops/s
Iteration  24: 975873.802 ops/s
Iteration  25: 970367.062 ops/s
Iteration  26: 966227.000 ops/s
Iteration  27: 991929.800 ops/s
Iteration  28: 979753.689 ops/s
Iteration  29: 978110.332 ops/s
Iteration  30: 1007463.642 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_addAllAtIndex":
  995670.497 ±(99.9%) 20562.390 ops/s [Average]
  (min, avg, max) = (963494.447, 995670.497, 1064962.736), stdev = 30776.820
  CI (99.9%): [975108.107, 1016232.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  995670.497 ± 20562.390  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 735875.854 ops/s
# Warmup Iteration   2: 746203.582 ops/s
# Warmup Iteration   3: 964534.709 ops/s
# Warmup Iteration   4: 960764.618 ops/s
# Warmup Iteration   5: 918298.288 ops/s
# Warmup Iteration   6: 897938.385 ops/s
# Warmup Iteration   7: 930192.422 ops/s
# Warmup Iteration   8: 987600.658 ops/s
# Warmup Iteration   9: 926047.223 ops/s
# Warmup Iteration  10: 921992.846 ops/s
# Warmup Iteration  11: 920036.123 ops/s
# Warmup Iteration  12: 818442.589 ops/s
# Warmup Iteration  13: 900087.486 ops/s
# Warmup Iteration  14: 933652.238 ops/s
# Warmup Iteration  15: 980050.629 ops/s
# Warmup Iteration  16: 962834.914 ops/s
# Warmup Iteration  17: 1015622.528 ops/s
# Warmup Iteration  18: 1018452.584 ops/s
# Warmup Iteration  19: 960552.650 ops/s
# Warmup Iteration  20: 968028.431 ops/s
# Warmup Iteration  21: 1030213.972 ops/s
# Warmup Iteration  22: 1017451.700 ops/s
# Warmup Iteration  23: 1020936.534 ops/s
# Warmup Iteration  24: 975269.901 ops/s
# Warmup Iteration  25: 971561.471 ops/s
# Warmup Iteration  26: 957393.447 ops/s
# Warmup Iteration  27: 975553.489 ops/s
# Warmup Iteration  28: 956550.042 ops/s
# Warmup Iteration  29: 1027185.739 ops/s
# Warmup Iteration  30: 1041813.672 ops/s
Iteration   1: 1042782.252 ops/s
Iteration   2: 1044416.860 ops/s
Iteration   3: 993821.299 ops/s
Iteration   4: 1039808.266 ops/s
Iteration   5: 1036375.648 ops/s
Iteration   6: 1050115.565 ops/s
Iteration   7: 1046038.063 ops/s
Iteration   8: 1013987.790 ops/s
Iteration   9: 1014539.391 ops/s
Iteration  10: 960916.946 ops/s
Iteration  11: 982528.728 ops/s
Iteration  12: 1025315.031 ops/s
Iteration  13: 989020.229 ops/s
Iteration  14: 965108.322 ops/s
Iteration  15: 942388.899 ops/s
Iteration  16: 1005541.485 ops/s
Iteration  17: 1019773.983 ops/s
Iteration  18: 1028395.400 ops/s
Iteration  19: 961917.756 ops/s
Iteration  20: 942790.632 ops/s
Iteration  21: 966867.783 ops/s
Iteration  22: 1017742.314 ops/s
Iteration  23: 951824.952 ops/s
Iteration  24: 958694.212 ops/s
Iteration  25: 949846.392 ops/s
Iteration  26: 1004885.090 ops/s
Iteration  27: 959451.223 ops/s
Iteration  28: 991475.467 ops/s
Iteration  29: 1001394.152 ops/s
Iteration  30: 1004483.833 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_addAtIndex":
  997074.932 ±(99.9%) 22987.350 ops/s [Average]
  (min, avg, max) = (942388.899, 997074.932, 1050115.565), stdev = 34406.385
  CI (99.9%): [974087.582, 1020062.282] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_addAtIndex  thrpt   30  997074.932 ± 22987.350  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 466716.429 ops/s
# Warmup Iteration   2: 953317.060 ops/s
# Warmup Iteration   3: 982619.864 ops/s
# Warmup Iteration   4: 984218.078 ops/s
# Warmup Iteration   5: 845498.424 ops/s
# Warmup Iteration   6: 990437.852 ops/s
# Warmup Iteration   7: 1002718.771 ops/s
# Warmup Iteration   8: 977237.441 ops/s
# Warmup Iteration   9: 924204.315 ops/s
# Warmup Iteration  10: 940340.408 ops/s
# Warmup Iteration  11: 948709.551 ops/s
# Warmup Iteration  12: 952197.486 ops/s
# Warmup Iteration  13: 974650.894 ops/s
# Warmup Iteration  14: 941418.428 ops/s
# Warmup Iteration  15: 921730.664 ops/s
# Warmup Iteration  16: 915844.802 ops/s
# Warmup Iteration  17: 966747.544 ops/s
# Warmup Iteration  18: 982158.862 ops/s
# Warmup Iteration  19: 983198.332 ops/s
# Warmup Iteration  20: 984801.746 ops/s
# Warmup Iteration  21: 956196.977 ops/s
# Warmup Iteration  22: 916698.665 ops/s
# Warmup Iteration  23: 921854.652 ops/s
# Warmup Iteration  24: 937854.538 ops/s
# Warmup Iteration  25: 979276.556 ops/s
# Warmup Iteration  26: 982233.889 ops/s
# Warmup Iteration  27: 920390.959 ops/s
# Warmup Iteration  28: 960866.219 ops/s
# Warmup Iteration  29: 995350.552 ops/s
# Warmup Iteration  30: 990899.436 ops/s
Iteration   1: 994350.351 ops/s
Iteration   2: 935523.781 ops/s
Iteration   3: 906652.364 ops/s
Iteration   4: 928573.358 ops/s
Iteration   5: 924714.505 ops/s
Iteration   6: 916890.443 ops/s
Iteration   7: 961108.473 ops/s
Iteration   8: 999577.708 ops/s
Iteration   9: 995541.289 ops/s
Iteration  10: 1003855.071 ops/s
Iteration  11: 997781.728 ops/s
Iteration  12: 947705.977 ops/s
Iteration  13: 938127.600 ops/s
Iteration  14: 921142.557 ops/s
Iteration  15: 910899.808 ops/s
Iteration  16: 943455.304 ops/s
Iteration  17: 1000750.660 ops/s
Iteration  18: 975980.157 ops/s
Iteration  19: 1002542.393 ops/s
Iteration  20: 940522.139 ops/s
Iteration  21: 933321.979 ops/s
Iteration  22: 946353.303 ops/s
Iteration  23: 989582.974 ops/s
Iteration  24: 985062.596 ops/s
Iteration  25: 970786.628 ops/s
Iteration  26: 969173.013 ops/s
Iteration  27: 990399.232 ops/s
Iteration  28: 1008887.399 ops/s
Iteration  29: 999332.480 ops/s
Iteration  30: 959284.574 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_aggregateByMutating":
  963262.661 ±(99.9%) 21833.730 ops/s [Average]
  (min, avg, max) = (906652.364, 963262.661, 1008887.399), stdev = 32679.701
  CI (99.9%): [941428.932, 985096.391] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  963262.661 ± 21833.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 457241.177 ops/s
# Warmup Iteration   2: 869522.660 ops/s
# Warmup Iteration   3: 979220.294 ops/s
# Warmup Iteration   4: 991995.303 ops/s
# Warmup Iteration   5: 949892.499 ops/s
# Warmup Iteration   6: 858027.374 ops/s
# Warmup Iteration   7: 954388.797 ops/s
# Warmup Iteration   8: 953598.877 ops/s
# Warmup Iteration   9: 972815.811 ops/s
# Warmup Iteration  10: 1035328.994 ops/s
# Warmup Iteration  11: 1052543.734 ops/s
# Warmup Iteration  12: 982796.089 ops/s
# Warmup Iteration  13: 973445.353 ops/s
# Warmup Iteration  14: 1010368.791 ops/s
# Warmup Iteration  15: 1015389.253 ops/s
# Warmup Iteration  16: 1044644.321 ops/s
# Warmup Iteration  17: 1050645.850 ops/s
# Warmup Iteration  18: 1052323.520 ops/s
# Warmup Iteration  19: 1026572.941 ops/s
# Warmup Iteration  20: 1021416.275 ops/s
# Warmup Iteration  21: 972074.351 ops/s
# Warmup Iteration  22: 972717.548 ops/s
# Warmup Iteration  23: 1052283.948 ops/s
# Warmup Iteration  24: 1050400.800 ops/s
# Warmup Iteration  25: 1034380.409 ops/s
# Warmup Iteration  26: 1022426.456 ops/s
# Warmup Iteration  27: 1063417.869 ops/s
# Warmup Iteration  28: 1058607.154 ops/s
# Warmup Iteration  29: 1010062.812 ops/s
# Warmup Iteration  30: 968950.356 ops/s
Iteration   1: 973029.449 ops/s
Iteration   2: 1005110.977 ops/s
Iteration   3: 1046166.726 ops/s
Iteration   4: 966284.011 ops/s
Iteration   5: 986699.031 ops/s
Iteration   6: 991358.315 ops/s
Iteration   7: 965838.528 ops/s
Iteration   8: 949889.950 ops/s
Iteration   9: 994421.050 ops/s
Iteration  10: 1013871.060 ops/s
Iteration  11: 959383.837 ops/s
Iteration  12: 959584.939 ops/s
Iteration  13: 954016.685 ops/s
Iteration  14: 976931.945 ops/s
Iteration  15: 981708.953 ops/s
Iteration  16: 980765.379 ops/s
Iteration  17: 1004103.707 ops/s
Iteration  18: 1060501.845 ops/s
Iteration  19: 1060275.590 ops/s
Iteration  20: 967890.804 ops/s
Iteration  21: 999508.110 ops/s
Iteration  22: 967636.114 ops/s
Iteration  23: 1006199.768 ops/s
Iteration  24: 974105.548 ops/s
Iteration  25: 976652.449 ops/s
Iteration  26: 960237.121 ops/s
Iteration  27: 1061021.972 ops/s
Iteration  28: 1056580.440 ops/s
Iteration  29: 1059426.807 ops/s
Iteration  30: 994697.599 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_aggregateByNonMutating":
  995129.957 ±(99.9%) 23801.964 ops/s [Average]
  (min, avg, max) = (949889.950, 995129.957, 1061021.972), stdev = 35625.662
  CI (99.9%): [971327.993, 1018931.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  995129.957 ± 23801.964  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7701837.985 ops/s
# Warmup Iteration   2: 16617167.915 ops/s
# Warmup Iteration   3: 16980865.105 ops/s
# Warmup Iteration   4: 15007982.871 ops/s
# Warmup Iteration   5: 16662304.091 ops/s
# Warmup Iteration   6: 17054328.330 ops/s
# Warmup Iteration   7: 16513698.012 ops/s
# Warmup Iteration   8: 16698271.003 ops/s
# Warmup Iteration   9: 16828734.565 ops/s
# Warmup Iteration  10: 16638084.002 ops/s
# Warmup Iteration  11: 16496241.826 ops/s
# Warmup Iteration  12: 16430898.279 ops/s
# Warmup Iteration  13: 17180182.361 ops/s
# Warmup Iteration  14: 17569056.297 ops/s
# Warmup Iteration  15: 16539433.860 ops/s
# Warmup Iteration  16: 17155189.448 ops/s
# Warmup Iteration  17: 17034147.003 ops/s
# Warmup Iteration  18: 16721868.290 ops/s
# Warmup Iteration  19: 16548452.313 ops/s
# Warmup Iteration  20: 16449648.212 ops/s
# Warmup Iteration  21: 17802260.080 ops/s
# Warmup Iteration  22: 16960407.595 ops/s
# Warmup Iteration  23: 16597091.769 ops/s
# Warmup Iteration  24: 16691467.001 ops/s
# Warmup Iteration  25: 16996792.713 ops/s
# Warmup Iteration  26: 17679877.229 ops/s
# Warmup Iteration  27: 17423544.982 ops/s
# Warmup Iteration  28: 16511131.535 ops/s
# Warmup Iteration  29: 16785521.776 ops/s
# Warmup Iteration  30: 17145550.185 ops/s
Iteration   1: 16469249.316 ops/s
Iteration   2: 16668098.350 ops/s
Iteration   3: 16636661.662 ops/s
Iteration   4: 17439230.168 ops/s
Iteration   5: 16800390.409 ops/s
Iteration   6: 16665250.398 ops/s
Iteration   7: 17086049.644 ops/s
Iteration   8: 16485725.237 ops/s
Iteration   9: 16508101.547 ops/s
Iteration  10: 17119425.000 ops/s
Iteration  11: 17677119.732 ops/s
Iteration  12: 16769722.135 ops/s
Iteration  13: 16474325.836 ops/s
Iteration  14: 16532936.346 ops/s
Iteration  15: 17341982.712 ops/s
Iteration  16: 18142090.021 ops/s
Iteration  17: 17768396.299 ops/s
Iteration  18: 16527018.974 ops/s
Iteration  19: 17034186.075 ops/s
Iteration  20: 16856602.607 ops/s
Iteration  21: 16618496.252 ops/s
Iteration  22: 16564189.319 ops/s
Iteration  23: 16493961.632 ops/s
Iteration  24: 16423490.257 ops/s
Iteration  25: 16483105.229 ops/s
Iteration  26: 16442931.995 ops/s
Iteration  27: 16799174.677 ops/s
Iteration  28: 16380387.077 ops/s
Iteration  29: 17789512.332 ops/s
Iteration  30: 17717163.950 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_allSatisfy":
  16890499.173 ±(99.9%) 336663.729 ops/s [Average]
  (min, avg, max) = (16380387.077, 16890499.173, 18142090.021), stdev = 503902.458
  CI (99.9%): [16553835.444, 17227162.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_allSatisfy  thrpt   30  16890499.173 ± 336663.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7649497.651 ops/s
# Warmup Iteration   2: 16971282.465 ops/s
# Warmup Iteration   3: 16507638.037 ops/s
# Warmup Iteration   4: 13498349.828 ops/s
# Warmup Iteration   5: 17408799.644 ops/s
# Warmup Iteration   6: 17733865.475 ops/s
# Warmup Iteration   7: 17317660.809 ops/s
# Warmup Iteration   8: 17178175.381 ops/s
# Warmup Iteration   9: 17103551.096 ops/s
# Warmup Iteration  10: 16855684.810 ops/s
# Warmup Iteration  11: 17407151.336 ops/s
# Warmup Iteration  12: 16555293.756 ops/s
# Warmup Iteration  13: 17444273.564 ops/s
# Warmup Iteration  14: 17722902.180 ops/s
# Warmup Iteration  15: 17890731.345 ops/s
# Warmup Iteration  16: 16668685.978 ops/s
# Warmup Iteration  17: 17078714.338 ops/s
# Warmup Iteration  18: 17070393.893 ops/s
# Warmup Iteration  19: 16589692.052 ops/s
# Warmup Iteration  20: 17603448.370 ops/s
# Warmup Iteration  21: 17515933.505 ops/s
# Warmup Iteration  22: 16771711.993 ops/s
# Warmup Iteration  23: 17095271.847 ops/s
# Warmup Iteration  24: 17046715.489 ops/s
# Warmup Iteration  25: 18097000.980 ops/s
# Warmup Iteration  26: 17156400.604 ops/s
# Warmup Iteration  27: 17391888.840 ops/s
# Warmup Iteration  28: 16706986.497 ops/s
# Warmup Iteration  29: 17710637.131 ops/s
# Warmup Iteration  30: 16603278.637 ops/s
Iteration   1: 17112125.119 ops/s
Iteration   2: 17821769.617 ops/s
Iteration   3: 17528656.162 ops/s
Iteration   4: 16770143.831 ops/s
Iteration   5: 16996810.096 ops/s
Iteration   6: 16674986.557 ops/s
Iteration   7: 16479103.161 ops/s
Iteration   8: 16796420.845 ops/s
Iteration   9: 17576356.426 ops/s
Iteration  10: 17796718.925 ops/s
Iteration  11: 17946611.517 ops/s
Iteration  12: 16696453.212 ops/s
Iteration  13: 16710180.552 ops/s
Iteration  14: 17723112.269 ops/s
Iteration  15: 17857488.377 ops/s
Iteration  16: 17751916.752 ops/s
Iteration  17: 18061758.737 ops/s
Iteration  18: 17080959.804 ops/s
Iteration  19: 17476234.868 ops/s
Iteration  20: 17830038.681 ops/s
Iteration  21: 18067391.916 ops/s
Iteration  22: 18029788.828 ops/s
Iteration  23: 17033525.490 ops/s
Iteration  24: 17868951.192 ops/s
Iteration  25: 17875247.229 ops/s
Iteration  26: 17737055.154 ops/s
Iteration  27: 16176431.775 ops/s
Iteration  28: 16389513.560 ops/s
Iteration  29: 17477155.703 ops/s
Iteration  30: 18056417.359 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_allSatisfyWith":
  17379977.457 ±(99.9%) 385989.928 ops/s [Average]
  (min, avg, max) = (16176431.775, 17379977.457, 18067391.916), stdev = 577731.597
  CI (99.9%): [16993987.529, 17765967.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  17379977.457 ± 385989.928  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7942808.362 ops/s
# Warmup Iteration   2: 14992107.524 ops/s
# Warmup Iteration   3: 16084791.205 ops/s
# Warmup Iteration   4: 14277808.625 ops/s
# Warmup Iteration   5: 15524819.565 ops/s
# Warmup Iteration   6: 15492401.039 ops/s
# Warmup Iteration   7: 15069654.998 ops/s
# Warmup Iteration   8: 14948608.310 ops/s
# Warmup Iteration   9: 15099406.749 ops/s
# Warmup Iteration  10: 15652166.766 ops/s
# Warmup Iteration  11: 15982788.995 ops/s
# Warmup Iteration  12: 15824683.559 ops/s
# Warmup Iteration  13: 15568146.730 ops/s
# Warmup Iteration  14: 15458123.395 ops/s
# Warmup Iteration  15: 15224540.450 ops/s
# Warmup Iteration  16: 15010806.042 ops/s
# Warmup Iteration  17: 14940467.481 ops/s
# Warmup Iteration  18: 14834618.169 ops/s
# Warmup Iteration  19: 16189403.695 ops/s
# Warmup Iteration  20: 15405551.709 ops/s
# Warmup Iteration  21: 14753517.715 ops/s
# Warmup Iteration  22: 15005118.785 ops/s
# Warmup Iteration  23: 14833082.845 ops/s
# Warmup Iteration  24: 15405924.378 ops/s
# Warmup Iteration  25: 16107491.790 ops/s
# Warmup Iteration  26: 16215347.864 ops/s
# Warmup Iteration  27: 15935785.821 ops/s
# Warmup Iteration  28: 16224614.499 ops/s
# Warmup Iteration  29: 15558165.024 ops/s
# Warmup Iteration  30: 15340648.905 ops/s
Iteration   1: 14968329.102 ops/s
Iteration   2: 14992603.408 ops/s
Iteration   3: 14822389.274 ops/s
Iteration   4: 14874927.435 ops/s
Iteration   5: 14741418.706 ops/s
Iteration   6: 14769522.621 ops/s
Iteration   7: 15261322.644 ops/s
Iteration   8: 15315207.043 ops/s
Iteration   9: 14943786.311 ops/s
Iteration  10: 15038405.533 ops/s
Iteration  11: 14643133.919 ops/s
Iteration  12: 14840612.222 ops/s
Iteration  13: 15179199.366 ops/s
Iteration  14: 15000835.436 ops/s
Iteration  15: 16145989.137 ops/s
Iteration  16: 16334846.738 ops/s
Iteration  17: 15308855.303 ops/s
Iteration  18: 14895514.007 ops/s
Iteration  19: 15088866.925 ops/s
Iteration  20: 15333032.317 ops/s
Iteration  21: 14871112.776 ops/s
Iteration  22: 15127751.460 ops/s
Iteration  23: 14924628.949 ops/s
Iteration  24: 15814179.528 ops/s
Iteration  25: 15521044.833 ops/s
Iteration  26: 14811938.804 ops/s
Iteration  27: 15076072.195 ops/s
Iteration  28: 14859916.360 ops/s
Iteration  29: 15086259.507 ops/s
Iteration  30: 16305993.569 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_anySatisfy":
  15163256.514 ±(99.9%) 298604.971 ops/s [Average]
  (min, avg, max) = (14643133.919, 15163256.514, 16334846.738), stdev = 446937.897
  CI (99.9%): [14864651.543, 15461861.485] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_anySatisfy  thrpt   30  15163256.514 ± 298604.971  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6635013.779 ops/s
# Warmup Iteration   2: 9164227.274 ops/s
# Warmup Iteration   3: 10734162.004 ops/s
# Warmup Iteration   4: 10976163.073 ops/s
# Warmup Iteration   5: 11531551.361 ops/s
# Warmup Iteration   6: 11045802.548 ops/s
# Warmup Iteration   7: 9134511.920 ops/s
# Warmup Iteration   8: 10585640.867 ops/s
# Warmup Iteration   9: 10716135.599 ops/s
# Warmup Iteration  10: 11050822.526 ops/s
# Warmup Iteration  11: 10711017.400 ops/s
# Warmup Iteration  12: 11473155.924 ops/s
# Warmup Iteration  13: 11097419.662 ops/s
# Warmup Iteration  14: 10721306.369 ops/s
# Warmup Iteration  15: 10825918.408 ops/s
# Warmup Iteration  16: 10805925.236 ops/s
# Warmup Iteration  17: 10651425.326 ops/s
# Warmup Iteration  18: 11065174.969 ops/s
# Warmup Iteration  19: 11347278.588 ops/s
# Warmup Iteration  20: 11081890.120 ops/s
# Warmup Iteration  21: 10825689.595 ops/s
# Warmup Iteration  22: 10646958.125 ops/s
# Warmup Iteration  23: 10524454.685 ops/s
# Warmup Iteration  24: 10845673.656 ops/s
# Warmup Iteration  25: 10867458.535 ops/s
# Warmup Iteration  26: 11327008.293 ops/s
# Warmup Iteration  27: 11362985.924 ops/s
# Warmup Iteration  28: 11674216.343 ops/s
# Warmup Iteration  29: 11028612.687 ops/s
# Warmup Iteration  30: 10943352.794 ops/s
Iteration   1: 10706259.379 ops/s
Iteration   2: 9903338.202 ops/s
Iteration   3: 10616084.857 ops/s
Iteration   4: 10829446.596 ops/s
Iteration   5: 10730385.204 ops/s
Iteration   6: 10511992.050 ops/s
Iteration   7: 11050781.085 ops/s
Iteration   8: 11499276.879 ops/s
Iteration   9: 11569534.679 ops/s
Iteration  10: 11106893.518 ops/s
Iteration  11: 10644110.852 ops/s
Iteration  12: 10688707.968 ops/s
Iteration  13: 10764569.858 ops/s
Iteration  14: 11653509.676 ops/s
Iteration  15: 11658572.251 ops/s
Iteration  16: 11695478.138 ops/s
Iteration  17: 11539486.453 ops/s
Iteration  18: 11348295.357 ops/s
Iteration  19: 11517173.412 ops/s
Iteration  20: 11538935.382 ops/s
Iteration  21: 11132210.319 ops/s
Iteration  22: 11350749.790 ops/s
Iteration  23: 11349881.618 ops/s
Iteration  24: 10862590.497 ops/s
Iteration  25: 11668144.388 ops/s
Iteration  26: 11561898.877 ops/s
Iteration  27: 10802874.934 ops/s
Iteration  28: 10789872.128 ops/s
Iteration  29: 11282128.190 ops/s
Iteration  30: 11482478.309 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_anySatisfyWith":
  11128522.028 ±(99.9%) 301391.655 ops/s [Average]
  (min, avg, max) = (9903338.202, 11128522.028, 11695478.138), stdev = 451108.875
  CI (99.9%): [10827130.373, 11429913.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  11128522.028 ± 301391.655  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 257125.310 ops/s
# Warmup Iteration   2: 613306.918 ops/s
# Warmup Iteration   3: 634443.796 ops/s
# Warmup Iteration   4: 534223.859 ops/s
# Warmup Iteration   5: 623195.395 ops/s
# Warmup Iteration   6: 631088.269 ops/s
# Warmup Iteration   7: 631006.548 ops/s
# Warmup Iteration   8: 621018.875 ops/s
# Warmup Iteration   9: 635066.058 ops/s
# Warmup Iteration  10: 604757.355 ops/s
# Warmup Iteration  11: 599635.437 ops/s
# Warmup Iteration  12: 636151.654 ops/s
# Warmup Iteration  13: 609204.814 ops/s
# Warmup Iteration  14: 601640.952 ops/s
# Warmup Iteration  15: 597354.229 ops/s
# Warmup Iteration  16: 583725.076 ops/s
# Warmup Iteration  17: 607309.440 ops/s
# Warmup Iteration  18: 636790.247 ops/s
# Warmup Iteration  19: 593909.780 ops/s
# Warmup Iteration  20: 596035.142 ops/s
# Warmup Iteration  21: 584288.632 ops/s
# Warmup Iteration  22: 584614.945 ops/s
# Warmup Iteration  23: 605030.980 ops/s
# Warmup Iteration  24: 622684.446 ops/s
# Warmup Iteration  25: 641966.254 ops/s
# Warmup Iteration  26: 627760.734 ops/s
# Warmup Iteration  27: 622132.195 ops/s
# Warmup Iteration  28: 625265.849 ops/s
# Warmup Iteration  29: 638662.922 ops/s
# Warmup Iteration  30: 626744.219 ops/s
Iteration   1: 638739.863 ops/s
Iteration   2: 637742.436 ops/s
Iteration   3: 606496.128 ops/s
Iteration   4: 589804.585 ops/s
Iteration   5: 590825.862 ops/s
Iteration   6: 588349.639 ops/s
Iteration   7: 580989.308 ops/s
Iteration   8: 591342.529 ops/s
Iteration   9: 613329.195 ops/s
Iteration  10: 633772.203 ops/s
Iteration  11: 630721.712 ops/s
Iteration  12: 633912.395 ops/s
Iteration  13: 622340.948 ops/s
Iteration  14: 616208.750 ops/s
Iteration  15: 575673.578 ops/s
Iteration  16: 594828.292 ops/s
Iteration  17: 576166.571 ops/s
Iteration  18: 584116.230 ops/s
Iteration  19: 584178.174 ops/s
Iteration  20: 599385.483 ops/s
Iteration  21: 628032.552 ops/s
Iteration  22: 643305.441 ops/s
Iteration  23: 636020.619 ops/s
Iteration  24: 637997.064 ops/s
Iteration  25: 640008.201 ops/s
Iteration  26: 633599.773 ops/s
Iteration  27: 634886.836 ops/s
Iteration  28: 584244.809 ops/s
Iteration  29: 595931.037 ops/s
Iteration  30: 606501.212 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_appendString":
  610981.714 ±(99.9%) 15510.372 ops/s [Average]
  (min, avg, max) = (575673.578, 610981.714, 643305.441), stdev = 23215.197
  CI (99.9%): [595471.342, 626492.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_appendString  thrpt   30  610981.714 ± 15510.372  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2110692.854 ops/s
# Warmup Iteration   2: 5543735.893 ops/s
# Warmup Iteration   3: 5322420.254 ops/s
# Warmup Iteration   4: 4193715.041 ops/s
# Warmup Iteration   5: 5150461.876 ops/s
# Warmup Iteration   6: 5090268.687 ops/s
# Warmup Iteration   7: 5040037.161 ops/s
# Warmup Iteration   8: 5164306.587 ops/s
# Warmup Iteration   9: 5377367.284 ops/s
# Warmup Iteration  10: 5107692.143 ops/s
# Warmup Iteration  11: 5402614.065 ops/s
# Warmup Iteration  12: 5361188.349 ops/s
# Warmup Iteration  13: 5208574.152 ops/s
# Warmup Iteration  14: 5458295.044 ops/s
# Warmup Iteration  15: 5133079.387 ops/s
# Warmup Iteration  16: 5044772.278 ops/s
# Warmup Iteration  17: 5492156.835 ops/s
# Warmup Iteration  18: 5320826.916 ops/s
# Warmup Iteration  19: 5076525.529 ops/s
# Warmup Iteration  20: 5188281.914 ops/s
# Warmup Iteration  21: 5186126.503 ops/s
# Warmup Iteration  22: 5105770.930 ops/s
# Warmup Iteration  23: 5078549.291 ops/s
# Warmup Iteration  24: 5067729.066 ops/s
# Warmup Iteration  25: 5391848.514 ops/s
# Warmup Iteration  26: 5481138.194 ops/s
# Warmup Iteration  27: 5530227.894 ops/s
# Warmup Iteration  28: 5526692.345 ops/s
# Warmup Iteration  29: 5412190.933 ops/s
# Warmup Iteration  30: 5196396.460 ops/s
Iteration   1: 5104312.151 ops/s
Iteration   2: 5006460.068 ops/s
Iteration   3: 5132387.153 ops/s
Iteration   4: 5055001.610 ops/s
Iteration   5: 5109600.485 ops/s
Iteration   6: 4998980.674 ops/s
Iteration   7: 4938803.899 ops/s
Iteration   8: 5209141.970 ops/s
Iteration   9: 5561008.947 ops/s
Iteration  10: 5563192.914 ops/s
Iteration  11: 5459520.344 ops/s
Iteration  12: 5173222.159 ops/s
Iteration  13: 5330104.509 ops/s
Iteration  14: 5304998.204 ops/s
Iteration  15: 5305027.913 ops/s
Iteration  16: 5154369.700 ops/s
Iteration  17: 5137942.454 ops/s
Iteration  18: 5307604.672 ops/s
Iteration  19: 5500293.159 ops/s
Iteration  20: 5507482.501 ops/s
Iteration  21: 5498985.069 ops/s
Iteration  22: 5420823.984 ops/s
Iteration  23: 5456135.115 ops/s
Iteration  24: 5497560.314 ops/s
Iteration  25: 5558553.933 ops/s
Iteration  26: 5485949.846 ops/s
Iteration  27: 5477756.265 ops/s
Iteration  28: 5478139.720 ops/s
Iteration  29: 5474047.262 ops/s
Iteration  30: 5469926.959 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_asReversed":
  5322577.798 ±(99.9%) 131002.916 ops/s [Average]
  (min, avg, max) = (4938803.899, 5322577.798, 5563192.914), stdev = 196079.012
  CI (99.9%): [5191574.883, 5453580.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_asReversed  thrpt   30  5322577.798 ± 131002.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697058.303 ops/s
# Warmup Iteration   2: 727585.002 ops/s
# Warmup Iteration   3: 946104.033 ops/s
# Warmup Iteration   4: 994458.386 ops/s
# Warmup Iteration   5: 1048802.418 ops/s
# Warmup Iteration   6: 1036141.884 ops/s
# Warmup Iteration   7: 1025023.885 ops/s
# Warmup Iteration   8: 1023300.860 ops/s
# Warmup Iteration   9: 991345.589 ops/s
# Warmup Iteration  10: 962493.091 ops/s
# Warmup Iteration  11: 964808.186 ops/s
# Warmup Iteration  12: 860179.613 ops/s
# Warmup Iteration  13: 1044485.901 ops/s
# Warmup Iteration  14: 1014290.302 ops/s
# Warmup Iteration  15: 996623.158 ops/s
# Warmup Iteration  16: 977236.626 ops/s
# Warmup Iteration  17: 1025849.717 ops/s
# Warmup Iteration  18: 1013453.747 ops/s
# Warmup Iteration  19: 1015079.564 ops/s
# Warmup Iteration  20: 1083164.499 ops/s
# Warmup Iteration  21: 1073052.458 ops/s
# Warmup Iteration  22: 1051436.048 ops/s
# Warmup Iteration  23: 1011318.420 ops/s
# Warmup Iteration  24: 1019139.306 ops/s
# Warmup Iteration  25: 1017654.763 ops/s
# Warmup Iteration  26: 1070427.247 ops/s
# Warmup Iteration  27: 1113353.030 ops/s
# Warmup Iteration  28: 1064830.043 ops/s
# Warmup Iteration  29: 1017604.182 ops/s
# Warmup Iteration  30: 1078830.819 ops/s
Iteration   1: 1067522.334 ops/s
Iteration   2: 1013509.734 ops/s
Iteration   3: 1008866.681 ops/s
Iteration   4: 1008316.438 ops/s
Iteration   5: 1009843.215 ops/s
Iteration   6: 1019296.072 ops/s
Iteration   7: 1028143.828 ops/s
Iteration   8: 1028378.585 ops/s
Iteration   9: 1055170.369 ops/s
Iteration  10: 1079752.184 ops/s
Iteration  11: 1085814.878 ops/s
Iteration  12: 1058437.260 ops/s
Iteration  13: 1063044.150 ops/s
Iteration  14: 1001826.626 ops/s
Iteration  15: 1022304.294 ops/s
Iteration  16: 1014263.841 ops/s
Iteration  17: 1021390.582 ops/s
Iteration  18: 1015660.251 ops/s
Iteration  19: 1029866.700 ops/s
Iteration  20: 1046751.584 ops/s
Iteration  21: 1054591.515 ops/s
Iteration  22: 1099924.512 ops/s
Iteration  23: 1107096.893 ops/s
Iteration  24: 1081422.992 ops/s
Iteration  25: 1045641.327 ops/s
Iteration  26: 1011455.373 ops/s
Iteration  27: 1039665.698 ops/s
Iteration  28: 1084709.182 ops/s
Iteration  29: 1015055.406 ops/s
Iteration  30: 1012136.099 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_castToCollection":
  1040995.287 ±(99.9%) 20604.715 ops/s [Average]
  (min, avg, max) = (1001826.626, 1040995.287, 1107096.893), stdev = 30840.170
  CI (99.9%): [1020390.571, 1061600.002] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_castToCollection  thrpt   30  1040995.287 ± 20604.715  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3214338.056 ops/s
# Warmup Iteration   2: 6828289.690 ops/s
# Warmup Iteration   3: 7165112.782 ops/s
# Warmup Iteration   4: 7135190.136 ops/s
# Warmup Iteration   5: 5872920.520 ops/s
# Warmup Iteration   6: 7114195.077 ops/s
# Warmup Iteration   7: 7074104.588 ops/s
# Warmup Iteration   8: 7791601.538 ops/s
# Warmup Iteration   9: 7188340.747 ops/s
# Warmup Iteration  10: 7257088.477 ops/s
# Warmup Iteration  11: 7187228.069 ops/s
# Warmup Iteration  12: 7487301.174 ops/s
# Warmup Iteration  13: 6989733.727 ops/s
# Warmup Iteration  14: 7120389.658 ops/s
# Warmup Iteration  15: 7466585.816 ops/s
# Warmup Iteration  16: 7267265.466 ops/s
# Warmup Iteration  17: 7031283.766 ops/s
# Warmup Iteration  18: 7224995.714 ops/s
# Warmup Iteration  19: 7212296.218 ops/s
# Warmup Iteration  20: 7765304.086 ops/s
# Warmup Iteration  21: 7517858.332 ops/s
# Warmup Iteration  22: 7528999.790 ops/s
# Warmup Iteration  23: 7225571.381 ops/s
# Warmup Iteration  24: 7135595.191 ops/s
# Warmup Iteration  25: 7706097.870 ops/s
# Warmup Iteration  26: 7456840.783 ops/s
# Warmup Iteration  27: 7084454.951 ops/s
# Warmup Iteration  28: 7124164.103 ops/s
# Warmup Iteration  29: 7333561.474 ops/s
# Warmup Iteration  30: 7505699.759 ops/s
Iteration   1: 7705894.792 ops/s
Iteration   2: 7574143.854 ops/s
Iteration   3: 7497997.991 ops/s
Iteration   4: 7130326.322 ops/s
Iteration   5: 7086624.287 ops/s
Iteration   6: 7158641.921 ops/s
Iteration   7: 7116096.384 ops/s
Iteration   8: 7174815.136 ops/s
Iteration   9: 7146227.123 ops/s
Iteration  10: 7091105.111 ops/s
Iteration  11: 7517931.671 ops/s
Iteration  12: 7742681.890 ops/s
Iteration  13: 7623824.518 ops/s
Iteration  14: 7144541.016 ops/s
Iteration  15: 7084299.975 ops/s
Iteration  16: 6958922.641 ops/s
Iteration  17: 7086551.365 ops/s
Iteration  18: 7262407.372 ops/s
Iteration  19: 7561306.100 ops/s
Iteration  20: 7531842.169 ops/s
Iteration  21: 7374356.686 ops/s
Iteration  22: 7545604.596 ops/s
Iteration  23: 7577375.392 ops/s
Iteration  24: 7326676.997 ops/s
Iteration  25: 7123103.562 ops/s
Iteration  26: 7193799.749 ops/s
Iteration  27: 7221023.007 ops/s
Iteration  28: 7143661.905 ops/s
Iteration  29: 7130471.542 ops/s
Iteration  30: 7166240.769 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_chunk_large_size":
  7299949.861 ±(99.9%) 149802.096 ops/s [Average]
  (min, avg, max) = (6958922.641, 7299949.861, 7742681.890), stdev = 224216.742
  CI (99.9%): [7150147.766, 7449751.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  7299949.861 ± 149802.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 729526.384 ops/s
# Warmup Iteration   2: 765547.271 ops/s
# Warmup Iteration   3: 997656.215 ops/s
# Warmup Iteration   4: 985096.002 ops/s
# Warmup Iteration   5: 946123.073 ops/s
# Warmup Iteration   6: 927413.479 ops/s
# Warmup Iteration   7: 942794.971 ops/s
# Warmup Iteration   8: 929216.207 ops/s
# Warmup Iteration   9: 969443.296 ops/s
# Warmup Iteration  10: 999745.404 ops/s
# Warmup Iteration  11: 997897.389 ops/s
# Warmup Iteration  12: 809143.552 ops/s
# Warmup Iteration  13: 949165.063 ops/s
# Warmup Iteration  14: 948255.078 ops/s
# Warmup Iteration  15: 982936.258 ops/s
# Warmup Iteration  16: 971611.615 ops/s
# Warmup Iteration  17: 1031008.088 ops/s
# Warmup Iteration  18: 990629.781 ops/s
# Warmup Iteration  19: 979047.592 ops/s
# Warmup Iteration  20: 997199.999 ops/s
# Warmup Iteration  21: 965960.646 ops/s
# Warmup Iteration  22: 1026211.733 ops/s
# Warmup Iteration  23: 1050169.474 ops/s
# Warmup Iteration  24: 997410.186 ops/s
# Warmup Iteration  25: 983887.529 ops/s
# Warmup Iteration  26: 1014380.715 ops/s
# Warmup Iteration  27: 997104.552 ops/s
# Warmup Iteration  28: 1003996.635 ops/s
# Warmup Iteration  29: 1071788.020 ops/s
# Warmup Iteration  30: 1015523.347 ops/s
Iteration   1: 985263.032 ops/s
Iteration   2: 987828.784 ops/s
Iteration   3: 976248.649 ops/s
Iteration   4: 994296.352 ops/s
Iteration   5: 1003295.067 ops/s
Iteration   6: 973980.016 ops/s
Iteration   7: 978537.078 ops/s
Iteration   8: 978306.626 ops/s
Iteration   9: 1036845.551 ops/s
Iteration  10: 1048468.930 ops/s
Iteration  11: 1039494.860 ops/s
Iteration  12: 1012615.231 ops/s
Iteration  13: 984553.834 ops/s
Iteration  14: 984664.051 ops/s
Iteration  15: 1039791.785 ops/s
Iteration  16: 956973.970 ops/s
Iteration  17: 979909.249 ops/s
Iteration  18: 986174.311 ops/s
Iteration  19: 994495.102 ops/s
Iteration  20: 1066295.976 ops/s
Iteration  21: 1081146.345 ops/s
Iteration  22: 1031774.156 ops/s
Iteration  23: 1004000.624 ops/s
Iteration  24: 1012056.214 ops/s
Iteration  25: 1025397.274 ops/s
Iteration  26: 993349.344 ops/s
Iteration  27: 971982.419 ops/s
Iteration  28: 971072.170 ops/s
Iteration  29: 984751.539 ops/s
Iteration  30: 1048058.682 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_chunk_zero_throws":
  1004387.574 ±(99.9%) 21115.549 ops/s [Average]
  (min, avg, max) = (956973.970, 1004387.574, 1081146.345), stdev = 31604.762
  CI (99.9%): [983272.025, 1025503.123] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1004387.574 ± 21115.549  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690869.891 ops/s
# Warmup Iteration   2: 687215.157 ops/s
# Warmup Iteration   3: 849938.442 ops/s
# Warmup Iteration   4: 863957.213 ops/s
# Warmup Iteration   5: 910523.146 ops/s
# Warmup Iteration   6: 909601.164 ops/s
# Warmup Iteration   7: 850076.341 ops/s
# Warmup Iteration   8: 885652.819 ops/s
# Warmup Iteration   9: 887028.089 ops/s
# Warmup Iteration  10: 886447.170 ops/s
# Warmup Iteration  11: 868765.505 ops/s
# Warmup Iteration  12: 865745.495 ops/s
# Warmup Iteration  13: 764243.231 ops/s
# Warmup Iteration  14: 934493.752 ops/s
# Warmup Iteration  15: 881690.771 ops/s
# Warmup Iteration  16: 877716.119 ops/s
# Warmup Iteration  17: 923688.992 ops/s
# Warmup Iteration  18: 919998.925 ops/s
# Warmup Iteration  19: 933416.648 ops/s
# Warmup Iteration  20: 968312.983 ops/s
# Warmup Iteration  21: 962853.102 ops/s
# Warmup Iteration  22: 915347.261 ops/s
# Warmup Iteration  23: 923029.887 ops/s
# Warmup Iteration  24: 919402.603 ops/s
# Warmup Iteration  25: 956378.609 ops/s
# Warmup Iteration  26: 982298.656 ops/s
# Warmup Iteration  27: 910830.360 ops/s
# Warmup Iteration  28: 906937.930 ops/s
# Warmup Iteration  29: 912618.092 ops/s
# Warmup Iteration  30: 951258.588 ops/s
Iteration   1: 999735.300 ops/s
Iteration   2: 963850.351 ops/s
Iteration   3: 904559.234 ops/s
Iteration   4: 904067.371 ops/s
Iteration   5: 930083.330 ops/s
Iteration   6: 916996.440 ops/s
Iteration   7: 907432.670 ops/s
Iteration   8: 916299.125 ops/s
Iteration   9: 988045.586 ops/s
Iteration  10: 994581.635 ops/s
Iteration  11: 926231.466 ops/s
Iteration  12: 902407.046 ops/s
Iteration  13: 941724.414 ops/s
Iteration  14: 905305.068 ops/s
Iteration  15: 919777.818 ops/s
Iteration  16: 918849.759 ops/s
Iteration  17: 921799.052 ops/s
Iteration  18: 908514.673 ops/s
Iteration  19: 929510.108 ops/s
Iteration  20: 943518.703 ops/s
Iteration  21: 956823.326 ops/s
Iteration  22: 922790.208 ops/s
Iteration  23: 904159.852 ops/s
Iteration  24: 927714.069 ops/s
Iteration  25: 929066.489 ops/s
Iteration  26: 921847.487 ops/s
Iteration  27: 916218.444 ops/s
Iteration  28: 939633.000 ops/s
Iteration  29: 1012607.983 ops/s
Iteration  30: 1008582.820 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_clear":
  936091.094 ±(99.9%) 22151.538 ops/s [Average]
  (min, avg, max) = (902407.046, 936091.094, 1012607.983), stdev = 33155.382
  CI (99.9%): [913939.556, 958242.632] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_clear  thrpt   30  936091.094 ± 22151.538  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5811281.533 ops/s
# Warmup Iteration   2: 10053274.432 ops/s
# Warmup Iteration   3: 10854975.524 ops/s
# Warmup Iteration   4: 10689799.000 ops/s
# Warmup Iteration   5: 10542054.942 ops/s
# Warmup Iteration   6: 8712468.865 ops/s
# Warmup Iteration   7: 10999689.950 ops/s
# Warmup Iteration   8: 11469070.999 ops/s
# Warmup Iteration   9: 10902385.423 ops/s
# Warmup Iteration  10: 11027741.464 ops/s
# Warmup Iteration  11: 10958927.750 ops/s
# Warmup Iteration  12: 10834580.913 ops/s
# Warmup Iteration  13: 10549579.136 ops/s
# Warmup Iteration  14: 10793869.396 ops/s
# Warmup Iteration  15: 11575961.725 ops/s
# Warmup Iteration  16: 11049942.878 ops/s
# Warmup Iteration  17: 10605219.846 ops/s
# Warmup Iteration  18: 10502910.296 ops/s
# Warmup Iteration  19: 10550488.723 ops/s
# Warmup Iteration  20: 11625617.920 ops/s
# Warmup Iteration  21: 10982313.746 ops/s
# Warmup Iteration  22: 10740692.243 ops/s
# Warmup Iteration  23: 10830291.808 ops/s
# Warmup Iteration  24: 10726195.284 ops/s
# Warmup Iteration  25: 10926747.294 ops/s
# Warmup Iteration  26: 11161649.438 ops/s
# Warmup Iteration  27: 11445901.549 ops/s
# Warmup Iteration  28: 11517555.357 ops/s
# Warmup Iteration  29: 11058949.376 ops/s
# Warmup Iteration  30: 11267666.178 ops/s
Iteration   1: 11140946.414 ops/s
Iteration   2: 11074050.781 ops/s
Iteration   3: 11174023.043 ops/s
Iteration   4: 11322308.832 ops/s
Iteration   5: 11242465.133 ops/s
Iteration   6: 10884997.635 ops/s
Iteration   7: 10992697.398 ops/s
Iteration   8: 11636270.271 ops/s
Iteration   9: 11321942.168 ops/s
Iteration  10: 11334127.549 ops/s
Iteration  11: 11191571.520 ops/s
Iteration  12: 10820548.669 ops/s
Iteration  13: 11616470.769 ops/s
Iteration  14: 11632514.436 ops/s
Iteration  15: 11245790.953 ops/s
Iteration  16: 10892022.000 ops/s
Iteration  17: 10513747.655 ops/s
Iteration  18: 10624251.677 ops/s
Iteration  19: 10512681.168 ops/s
Iteration  20: 10452119.046 ops/s
Iteration  21: 10494169.302 ops/s
Iteration  22: 11287719.950 ops/s
Iteration  23: 11474930.132 ops/s
Iteration  24: 11194843.401 ops/s
Iteration  25: 11611553.612 ops/s
Iteration  26: 11527052.222 ops/s
Iteration  27: 11358669.377 ops/s
Iteration  28: 11323722.555 ops/s
Iteration  29: 11391284.979 ops/s
Iteration  30: 11288231.127 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collect":
  11152590.792 ±(99.9%) 239067.841 ops/s [Average]
  (min, avg, max) = (10452119.046, 11152590.792, 11636270.271), stdev = 357825.517
  CI (99.9%): [10913522.951, 11391658.634] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collect  thrpt   30  11152590.792 ± 239067.841  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6479522.145 ops/s
# Warmup Iteration   2: 6221926.970 ops/s
# Warmup Iteration   3: 6230262.090 ops/s
# Warmup Iteration   4: 5167758.570 ops/s
# Warmup Iteration   5: 5471434.383 ops/s
# Warmup Iteration   6: 5938750.294 ops/s
# Warmup Iteration   7: 6313057.505 ops/s
# Warmup Iteration   8: 5966699.802 ops/s
# Warmup Iteration   9: 6191629.302 ops/s
# Warmup Iteration  10: 6078710.377 ops/s
# Warmup Iteration  11: 6408614.674 ops/s
# Warmup Iteration  12: 6461956.783 ops/s
# Warmup Iteration  13: 6008216.681 ops/s
# Warmup Iteration  14: 6443620.092 ops/s
# Warmup Iteration  15: 6142178.569 ops/s
# Warmup Iteration  16: 6080247.788 ops/s
# Warmup Iteration  17: 6487411.926 ops/s
# Warmup Iteration  18: 6214082.728 ops/s
# Warmup Iteration  19: 6460027.958 ops/s
# Warmup Iteration  20: 6461911.822 ops/s
# Warmup Iteration  21: 6285349.597 ops/s
# Warmup Iteration  22: 6377554.866 ops/s
# Warmup Iteration  23: 6473362.830 ops/s
# Warmup Iteration  24: 6119557.290 ops/s
# Warmup Iteration  25: 6268538.170 ops/s
# Warmup Iteration  26: 5940815.260 ops/s
# Warmup Iteration  27: 6444790.995 ops/s
# Warmup Iteration  28: 6476916.170 ops/s
# Warmup Iteration  29: 6269147.066 ops/s
# Warmup Iteration  30: 6090023.301 ops/s
Iteration   1: 6136890.174 ops/s
Iteration   2: 5911771.543 ops/s
Iteration   3: 6245557.637 ops/s
Iteration   4: 6323194.981 ops/s
Iteration   5: 6281104.996 ops/s
Iteration   6: 6333501.312 ops/s
Iteration   7: 6364012.711 ops/s
Iteration   8: 6523742.818 ops/s
Iteration   9: 6430542.679 ops/s
Iteration  10: 6457261.204 ops/s
Iteration  11: 6482468.121 ops/s
Iteration  12: 6521316.068 ops/s
Iteration  13: 6492398.684 ops/s
Iteration  14: 6522102.981 ops/s
Iteration  15: 6522224.053 ops/s
Iteration  16: 6510126.552 ops/s
Iteration  17: 6543468.140 ops/s
Iteration  18: 6396465.126 ops/s
Iteration  19: 6122797.230 ops/s
Iteration  20: 5932255.490 ops/s
Iteration  21: 5958483.078 ops/s
Iteration  22: 6015447.724 ops/s
Iteration  23: 5940743.255 ops/s
Iteration  24: 6121784.093 ops/s
Iteration  25: 6361065.311 ops/s
Iteration  26: 6247624.682 ops/s
Iteration  27: 6373988.197 ops/s
Iteration  28: 6307999.266 ops/s
Iteration  29: 6069425.812 ops/s
Iteration  30: 5947913.697 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectBoolean":
  6279922.587 ±(99.9%) 142058.640 ops/s [Average]
  (min, avg, max) = (5911771.543, 6279922.587, 6543468.140), stdev = 212626.701
  CI (99.9%): [6137863.947, 6421981.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collectBoolean  thrpt   30  6279922.587 ± 142058.640  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2368652.761 ops/s
# Warmup Iteration   2: 3835734.727 ops/s
# Warmup Iteration   3: 4751883.096 ops/s
# Warmup Iteration   4: 5131323.572 ops/s
# Warmup Iteration   5: 5053588.575 ops/s
# Warmup Iteration   6: 4424959.517 ops/s
# Warmup Iteration   7: 4576886.375 ops/s
# Warmup Iteration   8: 4974385.558 ops/s
# Warmup Iteration   9: 5041373.469 ops/s
# Warmup Iteration  10: 4931148.483 ops/s
# Warmup Iteration  11: 4949191.453 ops/s
# Warmup Iteration  12: 4827089.578 ops/s
# Warmup Iteration  13: 4937913.012 ops/s
# Warmup Iteration  14: 4828511.878 ops/s
# Warmup Iteration  15: 4756510.011 ops/s
# Warmup Iteration  16: 4697182.731 ops/s
# Warmup Iteration  17: 5077970.026 ops/s
# Warmup Iteration  18: 5028185.934 ops/s
# Warmup Iteration  19: 5066345.987 ops/s
# Warmup Iteration  20: 5063721.139 ops/s
# Warmup Iteration  21: 5094303.145 ops/s
# Warmup Iteration  22: 4949404.723 ops/s
# Warmup Iteration  23: 4938158.531 ops/s
# Warmup Iteration  24: 5051557.613 ops/s
# Warmup Iteration  25: 5137902.057 ops/s
# Warmup Iteration  26: 5106665.504 ops/s
# Warmup Iteration  27: 5072881.037 ops/s
# Warmup Iteration  28: 5089484.075 ops/s
# Warmup Iteration  29: 5037615.326 ops/s
# Warmup Iteration  30: 5097543.336 ops/s
Iteration   1: 4909374.073 ops/s
Iteration   2: 4761427.236 ops/s
Iteration   3: 4707711.244 ops/s
Iteration   4: 4801882.078 ops/s
Iteration   5: 5091984.920 ops/s
Iteration   6: 5132724.577 ops/s
Iteration   7: 5131474.096 ops/s
Iteration   8: 5056292.347 ops/s
Iteration   9: 5021544.101 ops/s
Iteration  10: 4911678.508 ops/s
Iteration  11: 5012426.522 ops/s
Iteration  12: 5043098.235 ops/s
Iteration  13: 5032721.104 ops/s
Iteration  14: 5083499.591 ops/s
Iteration  15: 5121398.602 ops/s
Iteration  16: 5052883.073 ops/s
Iteration  17: 4978791.824 ops/s
Iteration  18: 5095347.077 ops/s
Iteration  19: 5040921.841 ops/s
Iteration  20: 5010420.090 ops/s
Iteration  21: 4947122.219 ops/s
Iteration  22: 4888861.878 ops/s
Iteration  23: 4909501.660 ops/s
Iteration  24: 4832750.566 ops/s
Iteration  25: 4989613.052 ops/s
Iteration  26: 4780343.838 ops/s
Iteration  27: 4880501.661 ops/s
Iteration  28: 5120663.465 ops/s
Iteration  29: 5120176.786 ops/s
Iteration  30: 5017084.338 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectByte":
  4982807.353 ±(99.9%) 80201.919 ops/s [Average]
  (min, avg, max) = (4707711.244, 4982807.353, 5132724.577), stdev = 120042.466
  CI (99.9%): [4902605.434, 5063009.272] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collectByte  thrpt   30  4982807.353 ± 80201.919  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2631122.461 ops/s
# Warmup Iteration   2: 5068802.318 ops/s
# Warmup Iteration   3: 5711919.011 ops/s
# Warmup Iteration   4: 5717217.224 ops/s
# Warmup Iteration   5: 5205654.808 ops/s
# Warmup Iteration   6: 5216739.697 ops/s
# Warmup Iteration   7: 5691476.857 ops/s
# Warmup Iteration   8: 5638989.728 ops/s
# Warmup Iteration   9: 5760315.824 ops/s
# Warmup Iteration  10: 5741738.528 ops/s
# Warmup Iteration  11: 5856990.109 ops/s
# Warmup Iteration  12: 5730404.474 ops/s
# Warmup Iteration  13: 5400619.535 ops/s
# Warmup Iteration  14: 5347953.077 ops/s
# Warmup Iteration  15: 5429078.311 ops/s
# Warmup Iteration  16: 5575054.106 ops/s
# Warmup Iteration  17: 5401142.694 ops/s
# Warmup Iteration  18: 5642638.819 ops/s
# Warmup Iteration  19: 5788981.108 ops/s
# Warmup Iteration  20: 5730121.187 ops/s
# Warmup Iteration  21: 5758513.998 ops/s
# Warmup Iteration  22: 5836398.247 ops/s
# Warmup Iteration  23: 5561675.710 ops/s
# Warmup Iteration  24: 5519558.847 ops/s
# Warmup Iteration  25: 5686761.452 ops/s
# Warmup Iteration  26: 5743558.147 ops/s
# Warmup Iteration  27: 5823214.819 ops/s
# Warmup Iteration  28: 5712259.483 ops/s
# Warmup Iteration  29: 5350558.577 ops/s
# Warmup Iteration  30: 5790071.681 ops/s
Iteration   1: 5375992.126 ops/s
Iteration   2: 5262647.054 ops/s
Iteration   3: 5385089.673 ops/s
Iteration   4: 5680555.444 ops/s
Iteration   5: 5762533.379 ops/s
Iteration   6: 5775520.007 ops/s
Iteration   7: 5617883.156 ops/s
Iteration   8: 5273550.859 ops/s
Iteration   9: 5315188.833 ops/s
Iteration  10: 5348521.724 ops/s
Iteration  11: 5343213.340 ops/s
Iteration  12: 5359597.544 ops/s
Iteration  13: 5338093.259 ops/s
Iteration  14: 5245157.807 ops/s
Iteration  15: 5343822.198 ops/s
Iteration  16: 5573021.614 ops/s
Iteration  17: 5826624.628 ops/s
Iteration  18: 5706236.510 ops/s
Iteration  19: 5649451.909 ops/s
Iteration  20: 5727334.101 ops/s
Iteration  21: 5458027.255 ops/s
Iteration  22: 5339726.259 ops/s
Iteration  23: 5368473.002 ops/s
Iteration  24: 5296200.631 ops/s
Iteration  25: 5370474.193 ops/s
Iteration  26: 5200401.571 ops/s
Iteration  27: 5626095.887 ops/s
Iteration  28: 5791761.823 ops/s
Iteration  29: 5624509.601 ops/s
Iteration  30: 5804587.831 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectChar":
  5493009.774 ±(99.9%) 134409.096 ops/s [Average]
  (min, avg, max) = (5200401.571, 5493009.774, 5826624.628), stdev = 201177.223
  CI (99.9%): [5358600.678, 5627418.870] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collectChar  thrpt   30  5493009.774 ± 134409.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2200591.185 ops/s
# Warmup Iteration   2: 4754279.030 ops/s
# Warmup Iteration   3: 5180595.615 ops/s
# Warmup Iteration   4: 5169889.361 ops/s
# Warmup Iteration   5: 4099507.959 ops/s
# Warmup Iteration   6: 5167035.892 ops/s
# Warmup Iteration   7: 5583691.086 ops/s
# Warmup Iteration   8: 5097040.228 ops/s
# Warmup Iteration   9: 5121746.588 ops/s
# Warmup Iteration  10: 5172887.476 ops/s
# Warmup Iteration  11: 5150986.874 ops/s
# Warmup Iteration  12: 5111251.809 ops/s
# Warmup Iteration  13: 5200753.485 ops/s
# Warmup Iteration  14: 5430099.767 ops/s
# Warmup Iteration  15: 5269293.106 ops/s
# Warmup Iteration  16: 5208165.963 ops/s
# Warmup Iteration  17: 5293931.687 ops/s
# Warmup Iteration  18: 5525179.519 ops/s
# Warmup Iteration  19: 5459679.142 ops/s
# Warmup Iteration  20: 5189963.342 ops/s
# Warmup Iteration  21: 5053180.993 ops/s
# Warmup Iteration  22: 5113014.694 ops/s
# Warmup Iteration  23: 5269740.334 ops/s
# Warmup Iteration  24: 5120395.927 ops/s
# Warmup Iteration  25: 5104274.946 ops/s
# Warmup Iteration  26: 5085266.059 ops/s
# Warmup Iteration  27: 5033899.496 ops/s
# Warmup Iteration  28: 5515289.837 ops/s
# Warmup Iteration  29: 5285203.736 ops/s
# Warmup Iteration  30: 5247067.857 ops/s
Iteration   1: 5109443.106 ops/s
Iteration   2: 5122720.268 ops/s
Iteration   3: 5155393.126 ops/s
Iteration   4: 5041914.866 ops/s
Iteration   5: 5129312.647 ops/s
Iteration   6: 4997226.534 ops/s
Iteration   7: 5185954.531 ops/s
Iteration   8: 5221038.547 ops/s
Iteration   9: 5202003.963 ops/s
Iteration  10: 5114152.924 ops/s
Iteration  11: 5059221.084 ops/s
Iteration  12: 5138970.175 ops/s
Iteration  13: 4998151.245 ops/s
Iteration  14: 5074218.897 ops/s
Iteration  15: 5503869.367 ops/s
Iteration  16: 5607284.920 ops/s
Iteration  17: 5297539.896 ops/s
Iteration  18: 5148330.036 ops/s
Iteration  19: 5268308.886 ops/s
Iteration  20: 5137099.316 ops/s
Iteration  21: 5201993.065 ops/s
Iteration  22: 5077700.646 ops/s
Iteration  23: 5211394.403 ops/s
Iteration  24: 4964758.950 ops/s
Iteration  25: 5115845.188 ops/s
Iteration  26: 5071767.832 ops/s
Iteration  27: 4997360.850 ops/s
Iteration  28: 5500334.668 ops/s
Iteration  29: 5574523.454 ops/s
Iteration  30: 5441218.306 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectDouble":
  5188968.390 ±(99.9%) 116015.028 ops/s [Average]
  (min, avg, max) = (4964758.950, 5188968.390, 5607284.920), stdev = 173645.846
  CI (99.9%): [5072953.362, 5304983.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collectDouble  thrpt   30  5188968.390 ± 116015.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2384591.305 ops/s
# Warmup Iteration   2: 4633032.212 ops/s
# Warmup Iteration   3: 5354182.274 ops/s
# Warmup Iteration   4: 5153149.403 ops/s
# Warmup Iteration   5: 4795982.513 ops/s
# Warmup Iteration   6: 5144896.746 ops/s
# Warmup Iteration   7: 5269378.687 ops/s
# Warmup Iteration   8: 5253810.216 ops/s
# Warmup Iteration   9: 5124322.327 ops/s
# Warmup Iteration  10: 5151655.630 ops/s
# Warmup Iteration  11: 5199591.280 ops/s
# Warmup Iteration  12: 5538014.966 ops/s
# Warmup Iteration  13: 5460422.156 ops/s
# Warmup Iteration  14: 5250273.959 ops/s
# Warmup Iteration  15: 5189082.547 ops/s
# Warmup Iteration  16: 5179464.841 ops/s
# Warmup Iteration  17: 5230337.956 ops/s
# Warmup Iteration  18: 5239940.691 ops/s
# Warmup Iteration  19: 5543666.896 ops/s
# Warmup Iteration  20: 5657676.208 ops/s
# Warmup Iteration  21: 5257905.802 ops/s
# Warmup Iteration  22: 5194998.184 ops/s
# Warmup Iteration  23: 5161053.606 ops/s
# Warmup Iteration  24: 5329374.354 ops/s
# Warmup Iteration  25: 5544891.804 ops/s
# Warmup Iteration  26: 5379624.045 ops/s
# Warmup Iteration  27: 5190152.984 ops/s
# Warmup Iteration  28: 5054931.896 ops/s
# Warmup Iteration  29: 5356652.678 ops/s
# Warmup Iteration  30: 5388478.691 ops/s
Iteration   1: 5362746.927 ops/s
Iteration   2: 5099223.509 ops/s
Iteration   3: 5103081.364 ops/s
Iteration   4: 5176277.934 ops/s
Iteration   5: 5112519.377 ops/s
Iteration   6: 5184361.366 ops/s
Iteration   7: 5617490.091 ops/s
Iteration   8: 5545079.399 ops/s
Iteration   9: 5643422.357 ops/s
Iteration  10: 5415176.155 ops/s
Iteration  11: 5138556.477 ops/s
Iteration  12: 5228202.928 ops/s
Iteration  13: 5243309.629 ops/s
Iteration  14: 5543479.469 ops/s
Iteration  15: 5535094.255 ops/s
Iteration  16: 5396753.181 ops/s
Iteration  17: 5037214.813 ops/s
Iteration  18: 5378131.146 ops/s
Iteration  19: 5277180.159 ops/s
Iteration  20: 5141759.558 ops/s
Iteration  21: 5286200.176 ops/s
Iteration  22: 5090787.934 ops/s
Iteration  23: 5350822.197 ops/s
Iteration  24: 5612852.981 ops/s
Iteration  25: 5534197.350 ops/s
Iteration  26: 5156071.932 ops/s
Iteration  27: 5395892.174 ops/s
Iteration  28: 5191472.158 ops/s
Iteration  29: 5179552.756 ops/s
Iteration  30: 5227000.727 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectFloat":
  5306797.016 ±(99.9%) 121393.875 ops/s [Average]
  (min, avg, max) = (5037214.813, 5306797.016, 5643422.357), stdev = 181696.650
  CI (99.9%): [5185403.141, 5428190.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collectFloat  thrpt   30  5306797.016 ± 121393.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3564938.843 ops/s
# Warmup Iteration   2: 5630740.416 ops/s
# Warmup Iteration   3: 5859100.577 ops/s
# Warmup Iteration   4: 5841613.901 ops/s
# Warmup Iteration   5: 5779882.307 ops/s
# Warmup Iteration   6: 6222720.520 ops/s
# Warmup Iteration   7: 5281792.825 ops/s
# Warmup Iteration   8: 5995420.322 ops/s
# Warmup Iteration   9: 5821773.274 ops/s
# Warmup Iteration  10: 5943530.522 ops/s
# Warmup Iteration  11: 5871315.960 ops/s
# Warmup Iteration  12: 6031808.690 ops/s
# Warmup Iteration  13: 6073308.678 ops/s
# Warmup Iteration  14: 6010357.134 ops/s
# Warmup Iteration  15: 5845914.006 ops/s
# Warmup Iteration  16: 5804870.471 ops/s
# Warmup Iteration  17: 5831151.096 ops/s
# Warmup Iteration  18: 6110279.527 ops/s
# Warmup Iteration  19: 6186621.851 ops/s
# Warmup Iteration  20: 5904569.610 ops/s
# Warmup Iteration  21: 6209575.565 ops/s
# Warmup Iteration  22: 6171609.788 ops/s
# Warmup Iteration  23: 5939602.855 ops/s
# Warmup Iteration  24: 5821978.726 ops/s
# Warmup Iteration  25: 6110644.363 ops/s
# Warmup Iteration  26: 6092994.895 ops/s
# Warmup Iteration  27: 5882988.448 ops/s
# Warmup Iteration  28: 5879682.648 ops/s
# Warmup Iteration  29: 6156762.579 ops/s
# Warmup Iteration  30: 6357351.120 ops/s
Iteration   1: 6064121.606 ops/s
Iteration   2: 5966282.160 ops/s
Iteration   3: 6266871.626 ops/s
Iteration   4: 6279119.337 ops/s
Iteration   5: 5987869.795 ops/s
Iteration   6: 5780354.918 ops/s
Iteration   7: 5937646.110 ops/s
Iteration   8: 5942754.654 ops/s
Iteration   9: 5869108.335 ops/s
Iteration  10: 5861128.402 ops/s
Iteration  11: 5695004.936 ops/s
Iteration  12: 5985045.701 ops/s
Iteration  13: 5788232.286 ops/s
Iteration  14: 5867220.801 ops/s
Iteration  15: 5997199.669 ops/s
Iteration  16: 5902012.123 ops/s
Iteration  17: 5831941.439 ops/s
Iteration  18: 5703442.007 ops/s
Iteration  19: 5764536.197 ops/s
Iteration  20: 6069608.878 ops/s
Iteration  21: 6369170.153 ops/s
Iteration  22: 6424159.958 ops/s
Iteration  23: 6357113.542 ops/s
Iteration  24: 5885994.015 ops/s
Iteration  25: 5855052.996 ops/s
Iteration  26: 6040598.016 ops/s
Iteration  27: 5780421.966 ops/s
Iteration  28: 6095271.721 ops/s
Iteration  29: 5876792.126 ops/s
Iteration  30: 5906715.927 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectIf":
  5971693.047 ±(99.9%) 131572.499 ops/s [Average]
  (min, avg, max) = (5695004.936, 5971693.047, 6424159.958), stdev = 196931.537
  CI (99.9%): [5840120.548, 6103265.545] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collectIf  thrpt   30  5971693.047 ± 131572.499  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12710333.642 ops/s
# Warmup Iteration   2: 29184251.204 ops/s
# Warmup Iteration   3: 26018488.058 ops/s
# Warmup Iteration   4: 26585481.692 ops/s
# Warmup Iteration   5: 28092350.890 ops/s
# Warmup Iteration   6: 29293814.942 ops/s
# Warmup Iteration   7: 30543660.820 ops/s
# Warmup Iteration   8: 30334943.022 ops/s
# Warmup Iteration   9: 29733245.663 ops/s
# Warmup Iteration  10: 29963530.430 ops/s
# Warmup Iteration  11: 29349550.791 ops/s
# Warmup Iteration  12: 30516296.982 ops/s
# Warmup Iteration  13: 29070577.970 ops/s
# Warmup Iteration  14: 30019652.520 ops/s
# Warmup Iteration  15: 28611472.018 ops/s
# Warmup Iteration  16: 27420666.512 ops/s
# Warmup Iteration  17: 27850868.176 ops/s
# Warmup Iteration  18: 29526805.759 ops/s
# Warmup Iteration  19: 29496356.068 ops/s
# Warmup Iteration  20: 28442234.164 ops/s
# Warmup Iteration  21: 28277396.702 ops/s
# Warmup Iteration  22: 28103599.210 ops/s
# Warmup Iteration  23: 28036755.035 ops/s
# Warmup Iteration  24: 28198470.268 ops/s
# Warmup Iteration  25: 28198410.753 ops/s
# Warmup Iteration  26: 27521299.040 ops/s
# Warmup Iteration  27: 28302402.604 ops/s
# Warmup Iteration  28: 28991813.877 ops/s
# Warmup Iteration  29: 29547687.283 ops/s
# Warmup Iteration  30: 28233886.405 ops/s
Iteration   1: 28792571.238 ops/s
Iteration   2: 28190800.663 ops/s
Iteration   3: 28007247.098 ops/s
Iteration   4: 27732048.901 ops/s
Iteration   5: 28076233.329 ops/s
Iteration   6: 28321985.295 ops/s
Iteration   7: 28426892.294 ops/s
Iteration   8: 29726908.571 ops/s
Iteration   9: 30291111.735 ops/s
Iteration  10: 29748228.814 ops/s
Iteration  11: 29283754.418 ops/s
Iteration  12: 27851017.846 ops/s
Iteration  13: 28988084.174 ops/s
Iteration  14: 28290547.600 ops/s
Iteration  15: 27286219.296 ops/s
Iteration  16: 28302263.917 ops/s
Iteration  17: 28935848.088 ops/s
Iteration  18: 30035323.246 ops/s
Iteration  19: 29333796.136 ops/s
Iteration  20: 29180949.608 ops/s
Iteration  21: 30333582.122 ops/s
Iteration  22: 29912428.713 ops/s
Iteration  23: 27982087.593 ops/s
Iteration  24: 28291639.783 ops/s
Iteration  25: 27838667.004 ops/s
Iteration  26: 27695067.781 ops/s
Iteration  27: 28334464.125 ops/s
Iteration  28: 27623713.297 ops/s
Iteration  29: 28020934.186 ops/s
Iteration  30: 29679433.618 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectIfWithTarget":
  28683795.016 ±(99.9%) 584480.749 ops/s [Average]
  (min, avg, max) = (27286219.296, 28683795.016, 30333582.122), stdev = 874823.337
  CI (99.9%): [28099314.267, 29268275.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  28683795.016 ± 584480.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2543905.134 ops/s
# Warmup Iteration   2: 5031257.351 ops/s
# Warmup Iteration   3: 5300780.211 ops/s
# Warmup Iteration   4: 5328426.753 ops/s
# Warmup Iteration   5: 4747689.162 ops/s
# Warmup Iteration   6: 5471677.334 ops/s
# Warmup Iteration   7: 5310591.007 ops/s
# Warmup Iteration   8: 5305593.608 ops/s
# Warmup Iteration   9: 5415060.347 ops/s
# Warmup Iteration  10: 5697537.102 ops/s
# Warmup Iteration  11: 5685874.887 ops/s
# Warmup Iteration  12: 5567127.312 ops/s
# Warmup Iteration  13: 5317778.828 ops/s
# Warmup Iteration  14: 5383728.429 ops/s
# Warmup Iteration  15: 5417189.526 ops/s
# Warmup Iteration  16: 5697204.341 ops/s
# Warmup Iteration  17: 5515810.921 ops/s
# Warmup Iteration  18: 5279423.192 ops/s
# Warmup Iteration  19: 5326087.647 ops/s
# Warmup Iteration  20: 5609457.331 ops/s
# Warmup Iteration  21: 5556280.789 ops/s
# Warmup Iteration  22: 5361691.651 ops/s
# Warmup Iteration  23: 5276151.803 ops/s
# Warmup Iteration  24: 5432213.130 ops/s
# Warmup Iteration  25: 5780057.245 ops/s
# Warmup Iteration  26: 5309382.858 ops/s
# Warmup Iteration  27: 5460343.801 ops/s
# Warmup Iteration  28: 5604305.986 ops/s
# Warmup Iteration  29: 5447266.127 ops/s
# Warmup Iteration  30: 5300951.725 ops/s
Iteration   1: 5366344.218 ops/s
Iteration   2: 5309503.219 ops/s
Iteration   3: 5204198.714 ops/s
Iteration   4: 5467565.451 ops/s
Iteration   5: 5657676.460 ops/s
Iteration   6: 5765210.208 ops/s
Iteration   7: 5666448.461 ops/s
Iteration   8: 5543590.648 ops/s
Iteration   9: 5480318.166 ops/s
Iteration  10: 5330707.335 ops/s
Iteration  11: 5428200.534 ops/s
Iteration  12: 5363590.457 ops/s
Iteration  13: 5447881.149 ops/s
Iteration  14: 5423359.214 ops/s
Iteration  15: 5774811.199 ops/s
Iteration  16: 5806877.875 ops/s
Iteration  17: 5341116.798 ops/s
Iteration  18: 5383572.375 ops/s
Iteration  19: 5277000.725 ops/s
Iteration  20: 5289149.148 ops/s
Iteration  21: 5333849.931 ops/s
Iteration  22: 5234744.678 ops/s
Iteration  23: 5757516.948 ops/s
Iteration  24: 5812843.253 ops/s
Iteration  25: 5492410.171 ops/s
Iteration  26: 5347398.145 ops/s
Iteration  27: 5374910.743 ops/s
Iteration  28: 5588219.241 ops/s
Iteration  29: 5351990.585 ops/s
Iteration  30: 5329342.314 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectInt":
  5465011.612 ±(99.9%) 121230.457 ops/s [Average]
  (min, avg, max) = (5204198.714, 5465011.612, 5812843.253), stdev = 181452.055
  CI (99.9%): [5343781.155, 5586242.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collectInt  thrpt   30  5465011.612 ± 121230.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2189254.114 ops/s
# Warmup Iteration   2: 4806054.813 ops/s
# Warmup Iteration   3: 5219779.423 ops/s
# Warmup Iteration   4: 5182856.910 ops/s
# Warmup Iteration   5: 4459747.016 ops/s
# Warmup Iteration   6: 5566483.463 ops/s
# Warmup Iteration   7: 5446031.395 ops/s
# Warmup Iteration   8: 5208285.999 ops/s
# Warmup Iteration   9: 5368188.335 ops/s
# Warmup Iteration  10: 5151367.344 ops/s
# Warmup Iteration  11: 5163244.620 ops/s
# Warmup Iteration  12: 5134744.868 ops/s
# Warmup Iteration  13: 5279956.295 ops/s
# Warmup Iteration  14: 5223063.115 ops/s
# Warmup Iteration  15: 5198330.848 ops/s
# Warmup Iteration  16: 5105120.040 ops/s
# Warmup Iteration  17: 5104079.371 ops/s
# Warmup Iteration  18: 5631573.441 ops/s
# Warmup Iteration  19: 5288954.090 ops/s
# Warmup Iteration  20: 5232508.836 ops/s
# Warmup Iteration  21: 5136941.260 ops/s
# Warmup Iteration  22: 5206047.432 ops/s
# Warmup Iteration  23: 5214816.613 ops/s
# Warmup Iteration  24: 5208420.068 ops/s
# Warmup Iteration  25: 5189613.651 ops/s
# Warmup Iteration  26: 5571291.173 ops/s
# Warmup Iteration  27: 5362981.665 ops/s
# Warmup Iteration  28: 5238808.612 ops/s
# Warmup Iteration  29: 5258280.028 ops/s
# Warmup Iteration  30: 5652498.912 ops/s
Iteration   1: 5643080.616 ops/s
Iteration   2: 5241573.898 ops/s
Iteration   3: 5197760.506 ops/s
Iteration   4: 5266646.854 ops/s
Iteration   5: 5634641.792 ops/s
Iteration   6: 5628603.021 ops/s
Iteration   7: 5668508.890 ops/s
Iteration   8: 5629402.875 ops/s
Iteration   9: 5658450.411 ops/s
Iteration  10: 5676983.956 ops/s
Iteration  11: 5388619.855 ops/s
Iteration  12: 5395253.362 ops/s
Iteration  13: 5317725.579 ops/s
Iteration  14: 5451314.110 ops/s
Iteration  15: 5517295.005 ops/s
Iteration  16: 5215287.445 ops/s
Iteration  17: 5397230.949 ops/s
Iteration  18: 5192375.679 ops/s
Iteration  19: 5307478.761 ops/s
Iteration  20: 5164927.431 ops/s
Iteration  21: 5184368.577 ops/s
Iteration  22: 5110366.784 ops/s
Iteration  23: 5173405.615 ops/s
Iteration  24: 5538979.326 ops/s
Iteration  25: 5675900.086 ops/s
Iteration  26: 5409335.456 ops/s
Iteration  27: 5192384.804 ops/s
Iteration  28: 5219984.745 ops/s
Iteration  29: 5223252.622 ops/s
Iteration  30: 5524521.796 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectLong":
  5394855.360 ±(99.9%) 129022.448 ops/s [Average]
  (min, avg, max) = (5110366.784, 5394855.360, 5676983.956), stdev = 193114.741
  CI (99.9%): [5265832.912, 5523877.809] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collectLong  thrpt   30  5394855.360 ± 129022.448  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2310456.700 ops/s
# Warmup Iteration   2: 3970349.820 ops/s
# Warmup Iteration   3: 4894928.508 ops/s
# Warmup Iteration   4: 4739179.285 ops/s
# Warmup Iteration   5: 5070192.107 ops/s
# Warmup Iteration   6: 3842117.623 ops/s
# Warmup Iteration   7: 4720750.364 ops/s
# Warmup Iteration   8: 4636933.487 ops/s
# Warmup Iteration   9: 4718717.784 ops/s
# Warmup Iteration  10: 4796458.011 ops/s
# Warmup Iteration  11: 4786819.943 ops/s
# Warmup Iteration  12: 4691198.067 ops/s
# Warmup Iteration  13: 4772250.507 ops/s
# Warmup Iteration  14: 4839344.776 ops/s
# Warmup Iteration  15: 5101686.045 ops/s
# Warmup Iteration  16: 4717799.169 ops/s
# Warmup Iteration  17: 4858918.646 ops/s
# Warmup Iteration  18: 4707033.566 ops/s
# Warmup Iteration  19: 4695753.725 ops/s
# Warmup Iteration  20: 4978551.147 ops/s
# Warmup Iteration  21: 4785325.683 ops/s
# Warmup Iteration  22: 4841381.859 ops/s
# Warmup Iteration  23: 5015353.314 ops/s
# Warmup Iteration  24: 4793124.932 ops/s
# Warmup Iteration  25: 5002393.117 ops/s
# Warmup Iteration  26: 4723926.568 ops/s
# Warmup Iteration  27: 4727771.431 ops/s
# Warmup Iteration  28: 5156156.385 ops/s
# Warmup Iteration  29: 4789929.337 ops/s
# Warmup Iteration  30: 5107330.251 ops/s
Iteration   1: 5166540.143 ops/s
Iteration   2: 5155860.826 ops/s
Iteration   3: 5072565.857 ops/s
Iteration   4: 4882212.475 ops/s
Iteration   5: 4759721.367 ops/s
Iteration   6: 4649542.219 ops/s
Iteration   7: 4626900.608 ops/s
Iteration   8: 4727774.586 ops/s
Iteration   9: 4729842.606 ops/s
Iteration  10: 4789916.821 ops/s
Iteration  11: 4791158.138 ops/s
Iteration  12: 5058533.015 ops/s
Iteration  13: 5066988.821 ops/s
Iteration  14: 4877612.628 ops/s
Iteration  15: 4708226.050 ops/s
Iteration  16: 4746155.964 ops/s
Iteration  17: 4699041.812 ops/s
Iteration  18: 4656640.345 ops/s
Iteration  19: 4622011.448 ops/s
Iteration  20: 5006869.643 ops/s
Iteration  21: 5010621.656 ops/s
Iteration  22: 5024924.675 ops/s
Iteration  23: 4645728.599 ops/s
Iteration  24: 4636149.701 ops/s
Iteration  25: 4817180.071 ops/s
Iteration  26: 4746745.645 ops/s
Iteration  27: 4737832.013 ops/s
Iteration  28: 4703745.274 ops/s
Iteration  29: 4682412.087 ops/s
Iteration  30: 4749602.702 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectShort":
  4818301.927 ±(99.9%) 113399.267 ops/s [Average]
  (min, avg, max) = (4622011.448, 4818301.927, 5166540.143), stdev = 169730.697
  CI (99.9%): [4704902.659, 4931701.194] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collectShort  thrpt   30  4818301.927 ± 113399.267  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 760480.107 ops/s
# Warmup Iteration   2: 1726362.684 ops/s
# Warmup Iteration   3: 1511572.753 ops/s
# Warmup Iteration   4: 1544672.644 ops/s
# Warmup Iteration   5: 1699175.163 ops/s
# Warmup Iteration   6: 1651683.525 ops/s
# Warmup Iteration   7: 1654386.359 ops/s
# Warmup Iteration   8: 1624872.485 ops/s
# Warmup Iteration   9: 1634941.629 ops/s
# Warmup Iteration  10: 1650255.319 ops/s
# Warmup Iteration  11: 1630632.005 ops/s
# Warmup Iteration  12: 1619175.517 ops/s
# Warmup Iteration  13: 1621161.757 ops/s
# Warmup Iteration  14: 1742181.245 ops/s
# Warmup Iteration  15: 1688743.508 ops/s
# Warmup Iteration  16: 1647898.151 ops/s
# Warmup Iteration  17: 1625157.747 ops/s
# Warmup Iteration  18: 1739238.417 ops/s
# Warmup Iteration  19: 1698218.455 ops/s
# Warmup Iteration  20: 1612040.972 ops/s
# Warmup Iteration  21: 1618986.726 ops/s
# Warmup Iteration  22: 1663017.453 ops/s
# Warmup Iteration  23: 1656757.425 ops/s
# Warmup Iteration  24: 1756142.364 ops/s
# Warmup Iteration  25: 1741909.694 ops/s
# Warmup Iteration  26: 1655036.650 ops/s
# Warmup Iteration  27: 1618333.439 ops/s
# Warmup Iteration  28: 1638685.840 ops/s
# Warmup Iteration  29: 1635829.823 ops/s
# Warmup Iteration  30: 1742904.713 ops/s
Iteration   1: 1665757.676 ops/s
Iteration   2: 1596277.726 ops/s
Iteration   3: 1632941.576 ops/s
Iteration   4: 1667135.304 ops/s
Iteration   5: 1609134.351 ops/s
Iteration   6: 1592889.829 ops/s
Iteration   7: 1599097.001 ops/s
Iteration   8: 1609519.068 ops/s
Iteration   9: 1644538.859 ops/s
Iteration  10: 1638471.738 ops/s
Iteration  11: 1664968.463 ops/s
Iteration  12: 1633088.988 ops/s
Iteration  13: 1738452.197 ops/s
Iteration  14: 1649367.729 ops/s
Iteration  15: 1653140.344 ops/s
Iteration  16: 1585703.889 ops/s
Iteration  17: 1612006.693 ops/s
Iteration  18: 1593831.702 ops/s
Iteration  19: 1610113.788 ops/s
Iteration  20: 1614819.219 ops/s
Iteration  21: 1676429.631 ops/s
Iteration  22: 1764733.974 ops/s
Iteration  23: 1765811.472 ops/s
Iteration  24: 1690361.424 ops/s
Iteration  25: 1642101.149 ops/s
Iteration  26: 1663383.482 ops/s
Iteration  27: 1625449.004 ops/s
Iteration  28: 1641879.569 ops/s
Iteration  29: 1631712.226 ops/s
Iteration  30: 1601164.319 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectWith":
  1643809.413 ±(99.9%) 31467.601 ops/s [Average]
  (min, avg, max) = (1585703.889, 1643809.413, 1765811.472), stdev = 47099.228
  CI (99.9%): [1612341.812, 1675277.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collectWith  thrpt   30  1643809.413 ± 31467.601  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1328663.352 ops/s
# Warmup Iteration   2: 3969340.110 ops/s
# Warmup Iteration   3: 3747623.223 ops/s
# Warmup Iteration   4: 2957589.038 ops/s
# Warmup Iteration   5: 3660941.799 ops/s
# Warmup Iteration   6: 3702796.883 ops/s
# Warmup Iteration   7: 3958580.443 ops/s
# Warmup Iteration   8: 3927663.938 ops/s
# Warmup Iteration   9: 3744623.654 ops/s
# Warmup Iteration  10: 3675212.965 ops/s
# Warmup Iteration  11: 3763220.263 ops/s
# Warmup Iteration  12: 3724497.000 ops/s
# Warmup Iteration  13: 3727648.773 ops/s
# Warmup Iteration  14: 3733063.444 ops/s
# Warmup Iteration  15: 3765234.262 ops/s
# Warmup Iteration  16: 3875983.301 ops/s
# Warmup Iteration  17: 3948686.256 ops/s
# Warmup Iteration  18: 3750806.734 ops/s
# Warmup Iteration  19: 3869980.279 ops/s
# Warmup Iteration  20: 3743771.519 ops/s
# Warmup Iteration  21: 3780008.747 ops/s
# Warmup Iteration  22: 4002133.920 ops/s
# Warmup Iteration  23: 4024331.452 ops/s
# Warmup Iteration  24: 3970104.596 ops/s
# Warmup Iteration  25: 3860109.852 ops/s
# Warmup Iteration  26: 3970290.444 ops/s
# Warmup Iteration  27: 3997105.076 ops/s
# Warmup Iteration  28: 4032218.740 ops/s
# Warmup Iteration  29: 3997787.963 ops/s
# Warmup Iteration  30: 4030287.254 ops/s
Iteration   1: 4055837.569 ops/s
Iteration   2: 3918137.928 ops/s
Iteration   3: 3957885.216 ops/s
Iteration   4: 4019090.485 ops/s
Iteration   5: 3956724.410 ops/s
Iteration   6: 3778767.913 ops/s
Iteration   7: 3729321.778 ops/s
Iteration   8: 3734313.441 ops/s
Iteration   9: 3715710.191 ops/s
Iteration  10: 3896319.862 ops/s
Iteration  11: 3815376.535 ops/s
Iteration  12: 3768811.623 ops/s
Iteration  13: 3778541.626 ops/s
Iteration  14: 3858685.549 ops/s
Iteration  15: 3753549.752 ops/s
Iteration  16: 3606726.737 ops/s
Iteration  17: 3722959.117 ops/s
Iteration  18: 3671141.836 ops/s
Iteration  19: 3953502.261 ops/s
Iteration  20: 3903990.693 ops/s
Iteration  21: 4041880.283 ops/s
Iteration  22: 3966376.256 ops/s
Iteration  23: 3727631.671 ops/s
Iteration  24: 3705201.865 ops/s
Iteration  25: 3721887.489 ops/s
Iteration  26: 3805557.397 ops/s
Iteration  27: 3716724.619 ops/s
Iteration  28: 3766756.947 ops/s
Iteration  29: 3874946.978 ops/s
Iteration  30: 3823920.279 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectWithIndex":
  3824875.943 ±(99.9%) 79129.473 ops/s [Average]
  (min, avg, max) = (3606726.737, 3824875.943, 4055837.569), stdev = 118437.279
  CI (99.9%): [3745746.471, 3904005.416] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  3824875.943 ± 79129.473  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 402625.221 ops/s
# Warmup Iteration   2: 993547.842 ops/s
# Warmup Iteration   3: 1140986.566 ops/s
# Warmup Iteration   4: 1149995.994 ops/s
# Warmup Iteration   5: 962179.598 ops/s
# Warmup Iteration   6: 1156020.559 ops/s
# Warmup Iteration   7: 1150817.881 ops/s
# Warmup Iteration   8: 1153681.465 ops/s
# Warmup Iteration   9: 1153759.018 ops/s
# Warmup Iteration  10: 1152158.350 ops/s
# Warmup Iteration  11: 1156229.596 ops/s
# Warmup Iteration  12: 1148269.562 ops/s
# Warmup Iteration  13: 1147510.308 ops/s
# Warmup Iteration  14: 1151457.117 ops/s
# Warmup Iteration  15: 1151381.260 ops/s
# Warmup Iteration  16: 1150794.980 ops/s
# Warmup Iteration  17: 1123145.825 ops/s
# Warmup Iteration  18: 1119552.163 ops/s
# Warmup Iteration  19: 1145417.604 ops/s
# Warmup Iteration  20: 1152570.260 ops/s
# Warmup Iteration  21: 1143856.000 ops/s
# Warmup Iteration  22: 1155079.311 ops/s
# Warmup Iteration  23: 1147023.737 ops/s
# Warmup Iteration  24: 1121202.070 ops/s
# Warmup Iteration  25: 1126774.900 ops/s
# Warmup Iteration  26: 1117714.873 ops/s
# Warmup Iteration  27: 1135198.057 ops/s
# Warmup Iteration  28: 1141705.641 ops/s
# Warmup Iteration  29: 1127323.792 ops/s
# Warmup Iteration  30: 1098348.383 ops/s
Iteration   1: 1114195.039 ops/s
Iteration   2: 1120393.308 ops/s
Iteration   3: 1111639.093 ops/s
Iteration   4: 1106455.230 ops/s
Iteration   5: 1154524.788 ops/s
Iteration   6: 1156354.122 ops/s
Iteration   7: 1149235.757 ops/s
Iteration   8: 1132067.785 ops/s
Iteration   9: 1145213.486 ops/s
Iteration  10: 1139433.785 ops/s
Iteration  11: 1142443.127 ops/s
Iteration  12: 1144051.401 ops/s
Iteration  13: 1148779.490 ops/s
Iteration  14: 1152401.310 ops/s
Iteration  15: 1148707.026 ops/s
Iteration  16: 1150042.322 ops/s
Iteration  17: 1114381.644 ops/s
Iteration  18: 1129158.665 ops/s
Iteration  19: 1113003.001 ops/s
Iteration  20: 1112640.998 ops/s
Iteration  21: 1091432.991 ops/s
Iteration  22: 1153450.001 ops/s
Iteration  23: 1159892.529 ops/s
Iteration  24: 1154219.508 ops/s
Iteration  25: 1137364.720 ops/s
Iteration  26: 1154766.015 ops/s
Iteration  27: 1153731.127 ops/s
Iteration  28: 1150617.945 ops/s
Iteration  29: 1152516.064 ops/s
Iteration  30: 1151201.418 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  1138143.790 ±(99.9%) 12504.017 ops/s [Average]
  (min, avg, max) = (1091432.991, 1138143.790, 1159892.529), stdev = 18715.426
  CI (99.9%): [1125639.773, 1150647.807] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  1138143.790 ± 12504.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 782862.313 ops/s
# Warmup Iteration   2: 1679920.143 ops/s
# Warmup Iteration   3: 1464625.014 ops/s
# Warmup Iteration   4: 1705253.320 ops/s
# Warmup Iteration   5: 1704082.901 ops/s
# Warmup Iteration   6: 1652489.680 ops/s
# Warmup Iteration   7: 1630769.611 ops/s
# Warmup Iteration   8: 1667334.676 ops/s
# Warmup Iteration   9: 1637147.131 ops/s
# Warmup Iteration  10: 1680479.772 ops/s
# Warmup Iteration  11: 1653174.108 ops/s
# Warmup Iteration  12: 1589722.113 ops/s
# Warmup Iteration  13: 1611092.986 ops/s
# Warmup Iteration  14: 1637213.688 ops/s
# Warmup Iteration  15: 1704584.900 ops/s
# Warmup Iteration  16: 1619003.437 ops/s
# Warmup Iteration  17: 1618223.197 ops/s
# Warmup Iteration  18: 1631462.402 ops/s
# Warmup Iteration  19: 1604901.923 ops/s
# Warmup Iteration  20: 1643089.687 ops/s
# Warmup Iteration  21: 1667075.378 ops/s
# Warmup Iteration  22: 1643161.392 ops/s
# Warmup Iteration  23: 1625177.349 ops/s
# Warmup Iteration  24: 1569483.932 ops/s
# Warmup Iteration  25: 1716499.133 ops/s
# Warmup Iteration  26: 1637439.456 ops/s
# Warmup Iteration  27: 1609735.801 ops/s
# Warmup Iteration  28: 1685115.294 ops/s
# Warmup Iteration  29: 1607582.342 ops/s
# Warmup Iteration  30: 1620587.807 ops/s
Iteration   1: 1604720.049 ops/s
Iteration   2: 1596184.171 ops/s
Iteration   3: 1641384.562 ops/s
Iteration   4: 1746188.969 ops/s
Iteration   5: 1737493.841 ops/s
Iteration   6: 1662847.624 ops/s
Iteration   7: 1591120.269 ops/s
Iteration   8: 1617274.949 ops/s
Iteration   9: 1564576.701 ops/s
Iteration  10: 1579216.746 ops/s
Iteration  11: 1601757.887 ops/s
Iteration  12: 1582290.487 ops/s
Iteration  13: 1606447.514 ops/s
Iteration  14: 1714424.812 ops/s
Iteration  15: 1724711.272 ops/s
Iteration  16: 1636966.986 ops/s
Iteration  17: 1576708.601 ops/s
Iteration  18: 1639768.998 ops/s
Iteration  19: 1583403.992 ops/s
Iteration  20: 1618928.168 ops/s
Iteration  21: 1602790.280 ops/s
Iteration  22: 1629194.575 ops/s
Iteration  23: 1595141.151 ops/s
Iteration  24: 1607333.136 ops/s
Iteration  25: 1635611.644 ops/s
Iteration  26: 1594904.168 ops/s
Iteration  27: 1747370.984 ops/s
Iteration  28: 1743690.049 ops/s
Iteration  29: 1592832.926 ops/s
Iteration  30: 1587131.664 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collectWith_target":
  1632080.573 ±(99.9%) 38260.957 ops/s [Average]
  (min, avg, max) = (1564576.701, 1632080.573, 1747370.984), stdev = 57267.204
  CI (99.9%): [1593819.615, 1670341.530] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collectWith_target  thrpt   30  1632080.573 ± 38260.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1610919.843 ops/s
# Warmup Iteration   2: 3574094.779 ops/s
# Warmup Iteration   3: 2842006.789 ops/s
# Warmup Iteration   4: 3407486.740 ops/s
# Warmup Iteration   5: 3432432.962 ops/s
# Warmup Iteration   6: 3423050.812 ops/s
# Warmup Iteration   7: 3443260.956 ops/s
# Warmup Iteration   8: 3545713.179 ops/s
# Warmup Iteration   9: 3512977.255 ops/s
# Warmup Iteration  10: 3658817.426 ops/s
# Warmup Iteration  11: 3502349.776 ops/s
# Warmup Iteration  12: 3403349.422 ops/s
# Warmup Iteration  13: 3422316.617 ops/s
# Warmup Iteration  14: 3366777.130 ops/s
# Warmup Iteration  15: 3378310.297 ops/s
# Warmup Iteration  16: 3417752.035 ops/s
# Warmup Iteration  17: 3399986.979 ops/s
# Warmup Iteration  18: 3413106.516 ops/s
# Warmup Iteration  19: 3368569.619 ops/s
# Warmup Iteration  20: 3547911.904 ops/s
# Warmup Iteration  21: 3597289.744 ops/s
# Warmup Iteration  22: 3433820.572 ops/s
# Warmup Iteration  23: 3362761.462 ops/s
# Warmup Iteration  24: 3425429.312 ops/s
# Warmup Iteration  25: 3414984.079 ops/s
# Warmup Iteration  26: 3347579.421 ops/s
# Warmup Iteration  27: 3538772.124 ops/s
# Warmup Iteration  28: 3593457.115 ops/s
# Warmup Iteration  29: 3368115.080 ops/s
# Warmup Iteration  30: 3428591.793 ops/s
Iteration   1: 3415261.644 ops/s
Iteration   2: 3414895.028 ops/s
Iteration   3: 3470740.216 ops/s
Iteration   4: 3630501.559 ops/s
Iteration   5: 3630491.141 ops/s
Iteration   6: 3508027.263 ops/s
Iteration   7: 3400106.594 ops/s
Iteration   8: 3399020.393 ops/s
Iteration   9: 3449621.076 ops/s
Iteration  10: 3416365.926 ops/s
Iteration  11: 3401061.488 ops/s
Iteration  12: 3377143.449 ops/s
Iteration  13: 3407485.912 ops/s
Iteration  14: 3427569.907 ops/s
Iteration  15: 3709139.921 ops/s
Iteration  16: 3709670.180 ops/s
Iteration  17: 3605682.279 ops/s
Iteration  18: 3399347.551 ops/s
Iteration  19: 3706868.501 ops/s
Iteration  20: 3446380.479 ops/s
Iteration  21: 3404426.672 ops/s
Iteration  22: 3386876.493 ops/s
Iteration  23: 3509727.077 ops/s
Iteration  24: 3710512.913 ops/s
Iteration  25: 3645646.867 ops/s
Iteration  26: 3360531.726 ops/s
Iteration  27: 3382363.294 ops/s
Iteration  28: 3462760.715 ops/s
Iteration  29: 3468571.044 ops/s
Iteration  30: 3705311.052 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_collect_target":
  3498736.945 ±(99.9%) 82089.000 ops/s [Average]
  (min, avg, max) = (3360531.726, 3498736.945, 3710512.913), stdev = 122866.960
  CI (99.9%): [3416647.945, 3580825.945] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_collect_target  thrpt   30  3498736.945 ± 82089.000  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1650848.477 ops/s
# Warmup Iteration   2: 2192822.567 ops/s
# Warmup Iteration   3: 2271123.091 ops/s
# Warmup Iteration   4: 2262950.635 ops/s
# Warmup Iteration   5: 2240112.470 ops/s
# Warmup Iteration   6: 2282683.924 ops/s
# Warmup Iteration   7: 2267273.178 ops/s
# Warmup Iteration   8: 1930823.257 ops/s
# Warmup Iteration   9: 2286766.024 ops/s
# Warmup Iteration  10: 2250928.997 ops/s
# Warmup Iteration  11: 2255360.871 ops/s
# Warmup Iteration  12: 2443670.598 ops/s
# Warmup Iteration  13: 2386172.233 ops/s
# Warmup Iteration  14: 2304544.911 ops/s
# Warmup Iteration  15: 2273588.193 ops/s
# Warmup Iteration  16: 2295745.453 ops/s
# Warmup Iteration  17: 2305737.521 ops/s
# Warmup Iteration  18: 2338203.555 ops/s
# Warmup Iteration  19: 2290263.102 ops/s
# Warmup Iteration  20: 2322944.497 ops/s
# Warmup Iteration  21: 2296123.387 ops/s
# Warmup Iteration  22: 2256617.876 ops/s
# Warmup Iteration  23: 2332275.231 ops/s
# Warmup Iteration  24: 2276446.906 ops/s
# Warmup Iteration  25: 2434698.186 ops/s
# Warmup Iteration  26: 2401950.611 ops/s
# Warmup Iteration  27: 2308033.253 ops/s
# Warmup Iteration  28: 2267591.719 ops/s
# Warmup Iteration  29: 2291868.872 ops/s
# Warmup Iteration  30: 2334489.820 ops/s
Iteration   1: 2362481.906 ops/s
Iteration   2: 2291857.000 ops/s
Iteration   3: 2227618.874 ops/s
Iteration   4: 2348463.262 ops/s
Iteration   5: 2228608.772 ops/s
Iteration   6: 2320012.873 ops/s
Iteration   7: 2310093.236 ops/s
Iteration   8: 2484014.252 ops/s
Iteration   9: 2494094.498 ops/s
Iteration  10: 2327406.347 ops/s
Iteration  11: 2334557.731 ops/s
Iteration  12: 2323063.754 ops/s
Iteration  13: 2339614.990 ops/s
Iteration  14: 2263801.620 ops/s
Iteration  15: 2219990.675 ops/s
Iteration  16: 2230438.928 ops/s
Iteration  17: 2198523.475 ops/s
Iteration  18: 2201194.290 ops/s
Iteration  19: 2334898.971 ops/s
Iteration  20: 2243667.488 ops/s
Iteration  21: 2250846.990 ops/s
Iteration  22: 2314403.793 ops/s
Iteration  23: 2231599.692 ops/s
Iteration  24: 2301629.472 ops/s
Iteration  25: 2279699.064 ops/s
Iteration  26: 2279222.702 ops/s
Iteration  27: 2343376.494 ops/s
Iteration  28: 2485040.640 ops/s
Iteration  29: 2450633.356 ops/s
Iteration  30: 2323422.910 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_contains":
  2311475.935 ±(99.9%) 54546.178 ops/s [Average]
  (min, avg, max) = (2198523.475, 2311475.935, 2494094.498), stdev = 81642.157
  CI (99.9%): [2256929.757, 2366022.113] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_contains  thrpt   30  2311475.935 ± 54546.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4908795.396 ops/s
# Warmup Iteration   2: 6185398.319 ops/s
# Warmup Iteration   3: 7999850.762 ops/s
# Warmup Iteration   4: 7891086.586 ops/s
# Warmup Iteration   5: 8184729.816 ops/s
# Warmup Iteration   6: 8371813.680 ops/s
# Warmup Iteration   7: 8075728.279 ops/s
# Warmup Iteration   8: 7910490.239 ops/s
# Warmup Iteration   9: 6756766.929 ops/s
# Warmup Iteration  10: 8280479.084 ops/s
# Warmup Iteration  11: 8338123.671 ops/s
# Warmup Iteration  12: 7735511.795 ops/s
# Warmup Iteration  13: 7766454.609 ops/s
# Warmup Iteration  14: 7704824.233 ops/s
# Warmup Iteration  15: 8250677.135 ops/s
# Warmup Iteration  16: 8167619.189 ops/s
# Warmup Iteration  17: 7798817.084 ops/s
# Warmup Iteration  18: 7963331.864 ops/s
# Warmup Iteration  19: 7795046.532 ops/s
# Warmup Iteration  20: 7975690.787 ops/s
# Warmup Iteration  21: 8056544.004 ops/s
# Warmup Iteration  22: 7690964.276 ops/s
# Warmup Iteration  23: 7750296.542 ops/s
# Warmup Iteration  24: 8244834.197 ops/s
# Warmup Iteration  25: 8525682.678 ops/s
# Warmup Iteration  26: 8493680.140 ops/s
# Warmup Iteration  27: 8102387.732 ops/s
# Warmup Iteration  28: 8417450.529 ops/s
# Warmup Iteration  29: 8075850.664 ops/s
# Warmup Iteration  30: 7870707.524 ops/s
Iteration   1: 7668470.056 ops/s
Iteration   2: 7750118.460 ops/s
Iteration   3: 8045833.491 ops/s
Iteration   4: 7709217.265 ops/s
Iteration   5: 7873882.327 ops/s
Iteration   6: 8283351.298 ops/s
Iteration   7: 8237580.131 ops/s
Iteration   8: 8145735.375 ops/s
Iteration   9: 8400588.295 ops/s
Iteration  10: 8350591.910 ops/s
Iteration  11: 7694630.588 ops/s
Iteration  12: 7844553.484 ops/s
Iteration  13: 7736087.394 ops/s
Iteration  14: 7885461.446 ops/s
Iteration  15: 7882721.020 ops/s
Iteration  16: 8513366.199 ops/s
Iteration  17: 8344580.748 ops/s
Iteration  18: 8419035.008 ops/s
Iteration  19: 8467663.921 ops/s
Iteration  20: 8100492.463 ops/s
Iteration  21: 7772121.689 ops/s
Iteration  22: 7817439.619 ops/s
Iteration  23: 7625144.961 ops/s
Iteration  24: 7721379.643 ops/s
Iteration  25: 7731107.187 ops/s
Iteration  26: 8360592.290 ops/s
Iteration  27: 8409920.067 ops/s
Iteration  28: 8237608.194 ops/s
Iteration  29: 7958040.350 ops/s
Iteration  30: 7749893.370 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_containsAll":
  8024573.608 ±(99.9%) 195902.060 ops/s [Average]
  (min, avg, max) = (7625144.961, 8024573.608, 8513366.199), stdev = 293217.004
  CI (99.9%): [7828671.548, 8220475.669] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_containsAll  thrpt   30  8024573.608 ± 195902.060  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5623196.902 ops/s
# Warmup Iteration   2: 7530683.974 ops/s
# Warmup Iteration   3: 9634908.838 ops/s
# Warmup Iteration   4: 8960265.678 ops/s
# Warmup Iteration   5: 8865988.606 ops/s
# Warmup Iteration   6: 9038095.065 ops/s
# Warmup Iteration   7: 9290823.006 ops/s
# Warmup Iteration   8: 8635130.026 ops/s
# Warmup Iteration   9: 8332940.479 ops/s
# Warmup Iteration  10: 8937853.302 ops/s
# Warmup Iteration  11: 8921612.996 ops/s
# Warmup Iteration  12: 9474718.067 ops/s
# Warmup Iteration  13: 9512910.340 ops/s
# Warmup Iteration  14: 9047910.380 ops/s
# Warmup Iteration  15: 8814622.724 ops/s
# Warmup Iteration  16: 8920985.651 ops/s
# Warmup Iteration  17: 9380906.098 ops/s
# Warmup Iteration  18: 9350613.277 ops/s
# Warmup Iteration  19: 9056544.512 ops/s
# Warmup Iteration  20: 9006728.883 ops/s
# Warmup Iteration  21: 9004206.409 ops/s
# Warmup Iteration  22: 9418489.095 ops/s
# Warmup Iteration  23: 9682346.970 ops/s
# Warmup Iteration  24: 9154207.373 ops/s
# Warmup Iteration  25: 9636888.840 ops/s
# Warmup Iteration  26: 9072736.860 ops/s
# Warmup Iteration  27: 9012675.154 ops/s
# Warmup Iteration  28: 9123070.098 ops/s
# Warmup Iteration  29: 9386591.121 ops/s
# Warmup Iteration  30: 9101097.511 ops/s
Iteration   1: 8816910.064 ops/s
Iteration   2: 9124899.207 ops/s
Iteration   3: 8936458.990 ops/s
Iteration   4: 8775424.607 ops/s
Iteration   5: 9027561.292 ops/s
Iteration   6: 9643739.327 ops/s
Iteration   7: 9800059.217 ops/s
Iteration   8: 9358533.123 ops/s
Iteration   9: 8928528.363 ops/s
Iteration  10: 8802325.641 ops/s
Iteration  11: 9105094.824 ops/s
Iteration  12: 9488061.467 ops/s
Iteration  13: 9451491.564 ops/s
Iteration  14: 9143181.591 ops/s
Iteration  15: 8999973.489 ops/s
Iteration  16: 9167503.794 ops/s
Iteration  17: 8911193.709 ops/s
Iteration  18: 9157828.793 ops/s
Iteration  19: 9015689.943 ops/s
Iteration  20: 9538707.850 ops/s
Iteration  21: 9764311.506 ops/s
Iteration  22: 9309189.820 ops/s
Iteration  23: 9428561.098 ops/s
Iteration  24: 9277341.882 ops/s
Iteration  25: 8939505.851 ops/s
Iteration  26: 8954075.207 ops/s
Iteration  27: 8970643.025 ops/s
Iteration  28: 8845241.813 ops/s
Iteration  29: 9294694.572 ops/s
Iteration  30: 9442779.726 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_containsAllArray":
  9180650.378 ±(99.9%) 193449.599 ops/s [Average]
  (min, avg, max) = (8775424.607, 9180650.378, 9800059.217), stdev = 289546.275
  CI (99.9%): [8987200.780, 9374099.977] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_containsAllArray  thrpt   30  9180650.378 ± 193449.599  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5551612.507 ops/s
# Warmup Iteration   2: 5609818.021 ops/s
# Warmup Iteration   3: 5641652.044 ops/s
# Warmup Iteration   4: 6576000.308 ops/s
# Warmup Iteration   5: 6514862.182 ops/s
# Warmup Iteration   6: 6903399.956 ops/s
# Warmup Iteration   7: 6984414.458 ops/s
# Warmup Iteration   8: 6630255.584 ops/s
# Warmup Iteration   9: 6540902.054 ops/s
# Warmup Iteration  10: 7055077.708 ops/s
# Warmup Iteration  11: 6871755.856 ops/s
# Warmup Iteration  12: 6543040.950 ops/s
# Warmup Iteration  13: 6428818.301 ops/s
# Warmup Iteration  14: 6547700.100 ops/s
# Warmup Iteration  15: 6849368.383 ops/s
# Warmup Iteration  16: 6852995.682 ops/s
# Warmup Iteration  17: 6781216.265 ops/s
# Warmup Iteration  18: 6227294.245 ops/s
# Warmup Iteration  19: 5785905.968 ops/s
# Warmup Iteration  20: 6715557.350 ops/s
# Warmup Iteration  21: 6946565.871 ops/s
# Warmup Iteration  22: 6560077.646 ops/s
# Warmup Iteration  23: 6664727.333 ops/s
# Warmup Iteration  24: 7017778.029 ops/s
# Warmup Iteration  25: 6679153.205 ops/s
# Warmup Iteration  26: 6756731.570 ops/s
# Warmup Iteration  27: 6753936.955 ops/s
# Warmup Iteration  28: 6738186.552 ops/s
# Warmup Iteration  29: 7085264.148 ops/s
# Warmup Iteration  30: 6729787.655 ops/s
Iteration   1: 6596957.094 ops/s
Iteration   2: 6484673.063 ops/s
Iteration   3: 6818427.257 ops/s
Iteration   4: 6380032.032 ops/s
Iteration   5: 6548225.523 ops/s
Iteration   6: 6640707.709 ops/s
Iteration   7: 6645679.635 ops/s
Iteration   8: 6979765.995 ops/s
Iteration   9: 6980235.757 ops/s
Iteration  10: 6917837.754 ops/s
Iteration  11: 6932013.702 ops/s
Iteration  12: 6426916.934 ops/s
Iteration  13: 6357569.365 ops/s
Iteration  14: 6541067.409 ops/s
Iteration  15: 6910375.592 ops/s
Iteration  16: 7139914.317 ops/s
Iteration  17: 7068257.345 ops/s
Iteration  18: 6971899.692 ops/s
Iteration  19: 6677624.387 ops/s
Iteration  20: 7126953.779 ops/s
Iteration  21: 6785264.531 ops/s
Iteration  22: 6814638.335 ops/s
Iteration  23: 6442633.199 ops/s
Iteration  24: 6425591.429 ops/s
Iteration  25: 6524630.591 ops/s
Iteration  26: 6450452.236 ops/s
Iteration  27: 6506133.634 ops/s
Iteration  28: 6552233.428 ops/s
Iteration  29: 6979920.029 ops/s
Iteration  30: 6889137.938 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_containsAllIterable":
  6717192.323 ±(99.9%) 163080.779 ops/s [Average]
  (min, avg, max) = (6357569.365, 6717192.323, 7139914.317), stdev = 244091.652
  CI (99.9%): [6554111.544, 6880273.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  6717192.323 ± 163080.779  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5484091.562 ops/s
# Warmup Iteration   2: 9229786.096 ops/s
# Warmup Iteration   3: 9936784.928 ops/s
# Warmup Iteration   4: 9815972.880 ops/s
# Warmup Iteration   5: 9916976.702 ops/s
# Warmup Iteration   6: 8776454.876 ops/s
# Warmup Iteration   7: 10374083.022 ops/s
# Warmup Iteration   8: 10112005.173 ops/s
# Warmup Iteration   9: 10299714.200 ops/s
# Warmup Iteration  10: 10255471.982 ops/s
# Warmup Iteration  11: 10516774.622 ops/s
# Warmup Iteration  12: 10187735.127 ops/s
# Warmup Iteration  13: 10140019.230 ops/s
# Warmup Iteration  14: 10191152.451 ops/s
# Warmup Iteration  15: 10468592.309 ops/s
# Warmup Iteration  16: 9860955.598 ops/s
# Warmup Iteration  17: 9888635.175 ops/s
# Warmup Iteration  18: 10216703.099 ops/s
# Warmup Iteration  19: 10572937.634 ops/s
# Warmup Iteration  20: 10320875.445 ops/s
# Warmup Iteration  21: 10343584.935 ops/s
# Warmup Iteration  22: 9960698.855 ops/s
# Warmup Iteration  23: 10268757.821 ops/s
# Warmup Iteration  24: 9965461.940 ops/s
# Warmup Iteration  25: 10324868.071 ops/s
# Warmup Iteration  26: 10584730.611 ops/s
# Warmup Iteration  27: 9899014.174 ops/s
# Warmup Iteration  28: 10380301.541 ops/s
# Warmup Iteration  29: 10366525.758 ops/s
# Warmup Iteration  30: 9963343.929 ops/s
Iteration   1: 9768519.347 ops/s
Iteration   2: 10036907.464 ops/s
Iteration   3: 10069665.279 ops/s
Iteration   4: 9940850.007 ops/s
Iteration   5: 9847744.141 ops/s
Iteration   6: 10257753.678 ops/s
Iteration   7: 10743058.486 ops/s
Iteration   8: 10778953.391 ops/s
Iteration   9: 9886332.717 ops/s
Iteration  10: 10459684.092 ops/s
Iteration  11: 10642959.458 ops/s
Iteration  12: 10433299.646 ops/s
Iteration  13: 10377720.715 ops/s
Iteration  14: 10755749.480 ops/s
Iteration  15: 9845863.886 ops/s
Iteration  16: 9889756.314 ops/s
Iteration  17: 10022688.471 ops/s
Iteration  18: 10764728.880 ops/s
Iteration  19: 9837726.180 ops/s
Iteration  20: 9777827.769 ops/s
Iteration  21: 9228998.584 ops/s
Iteration  22: 10340979.961 ops/s
Iteration  23: 10841830.997 ops/s
Iteration  24: 10693349.930 ops/s
Iteration  25: 10260119.463 ops/s
Iteration  26: 10079639.629 ops/s
Iteration  27: 9938195.579 ops/s
Iteration  28: 10638526.664 ops/s
Iteration  29: 10483331.681 ops/s
Iteration  30: 10616518.597 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_corresponds":
  10241976.016 ±(99.9%) 271551.851 ops/s [Average]
  (min, avg, max) = (9228998.584, 10241976.016, 10841830.997), stdev = 406446.057
  CI (99.9%): [9970424.166, 10513527.867] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_corresponds  thrpt   30  10241976.016 ± 271551.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10827362.285 ops/s
# Warmup Iteration   2: 21428447.785 ops/s
# Warmup Iteration   3: 21724945.203 ops/s
# Warmup Iteration   4: 21576806.617 ops/s
# Warmup Iteration   5: 17821069.526 ops/s
# Warmup Iteration   6: 21802042.276 ops/s
# Warmup Iteration   7: 23107535.222 ops/s
# Warmup Iteration   8: 23279253.558 ops/s
# Warmup Iteration   9: 22465777.409 ops/s
# Warmup Iteration  10: 22075981.705 ops/s
# Warmup Iteration  11: 22257985.962 ops/s
# Warmup Iteration  12: 22391379.892 ops/s
# Warmup Iteration  13: 22514266.359 ops/s
# Warmup Iteration  14: 22429245.786 ops/s
# Warmup Iteration  15: 21707037.047 ops/s
# Warmup Iteration  16: 22687318.288 ops/s
# Warmup Iteration  17: 23405461.311 ops/s
# Warmup Iteration  18: 22268878.671 ops/s
# Warmup Iteration  19: 22488613.718 ops/s
# Warmup Iteration  20: 23379320.888 ops/s
# Warmup Iteration  21: 21758090.106 ops/s
# Warmup Iteration  22: 22168109.074 ops/s
# Warmup Iteration  23: 23183942.520 ops/s
# Warmup Iteration  24: 22910410.698 ops/s
# Warmup Iteration  25: 21731222.311 ops/s
# Warmup Iteration  26: 22122659.288 ops/s
# Warmup Iteration  27: 22948053.160 ops/s
# Warmup Iteration  28: 21637284.842 ops/s
# Warmup Iteration  29: 21732255.831 ops/s
# Warmup Iteration  30: 23458280.395 ops/s
Iteration   1: 23155648.937 ops/s
Iteration   2: 21707738.304 ops/s
Iteration   3: 22183000.490 ops/s
Iteration   4: 22942418.896 ops/s
Iteration   5: 23015462.430 ops/s
Iteration   6: 21762729.634 ops/s
Iteration   7: 21526473.619 ops/s
Iteration   8: 22041907.795 ops/s
Iteration   9: 23564727.140 ops/s
Iteration  10: 23526283.507 ops/s
Iteration  11: 21894204.686 ops/s
Iteration  12: 21321251.374 ops/s
Iteration  13: 21426247.806 ops/s
Iteration  14: 21480233.556 ops/s
Iteration  15: 21610269.525 ops/s
Iteration  16: 22511901.097 ops/s
Iteration  17: 23331904.445 ops/s
Iteration  18: 23165470.153 ops/s
Iteration  19: 21895618.193 ops/s
Iteration  20: 21662328.165 ops/s
Iteration  21: 21547547.267 ops/s
Iteration  22: 23132348.772 ops/s
Iteration  23: 23581957.675 ops/s
Iteration  24: 23151243.188 ops/s
Iteration  25: 23490296.993 ops/s
Iteration  26: 23169542.924 ops/s
Iteration  27: 21611800.582 ops/s
Iteration  28: 23257509.082 ops/s
Iteration  29: 22934233.284 ops/s
Iteration  30: 22925239.842 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_count":
  22484251.312 ±(99.9%) 533711.121 ops/s [Average]
  (min, avg, max) = (21321251.374, 22484251.312, 23581957.675), stdev = 798833.741
  CI (99.9%): [21950540.191, 23017962.433] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_count  thrpt   30  22484251.312 ± 533711.121  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 568180.015 ops/s
# Warmup Iteration   2: 1049905.695 ops/s
# Warmup Iteration   3: 1359198.739 ops/s
# Warmup Iteration   4: 1318061.592 ops/s
# Warmup Iteration   5: 1264463.061 ops/s
# Warmup Iteration   6: 1101414.872 ops/s
# Warmup Iteration   7: 1297207.880 ops/s
# Warmup Iteration   8: 1323143.265 ops/s
# Warmup Iteration   9: 1315646.703 ops/s
# Warmup Iteration  10: 1255269.244 ops/s
# Warmup Iteration  11: 1295783.947 ops/s
# Warmup Iteration  12: 1338126.470 ops/s
# Warmup Iteration  13: 1320204.429 ops/s
# Warmup Iteration  14: 1305384.782 ops/s
# Warmup Iteration  15: 1307810.847 ops/s
# Warmup Iteration  16: 1332192.784 ops/s
# Warmup Iteration  17: 1312585.019 ops/s
# Warmup Iteration  18: 1274177.579 ops/s
# Warmup Iteration  19: 1260300.765 ops/s
# Warmup Iteration  20: 1241840.301 ops/s
# Warmup Iteration  21: 1334599.345 ops/s
# Warmup Iteration  22: 1360281.386 ops/s
# Warmup Iteration  23: 1322278.744 ops/s
# Warmup Iteration  24: 1260090.612 ops/s
# Warmup Iteration  25: 1288201.757 ops/s
# Warmup Iteration  26: 1323794.448 ops/s
# Warmup Iteration  27: 1343247.664 ops/s
# Warmup Iteration  28: 1253264.348 ops/s
# Warmup Iteration  29: 1277522.993 ops/s
# Warmup Iteration  30: 1340740.873 ops/s
Iteration   1: 1367375.535 ops/s
Iteration   2: 1363175.492 ops/s
Iteration   3: 1270994.634 ops/s
Iteration   4: 1226553.874 ops/s
Iteration   5: 1276523.350 ops/s
Iteration   6: 1233688.316 ops/s
Iteration   7: 1337472.080 ops/s
Iteration   8: 1342630.411 ops/s
Iteration   9: 1311716.298 ops/s
Iteration  10: 1382961.418 ops/s
Iteration  11: 1377813.592 ops/s
Iteration  12: 1365616.481 ops/s
Iteration  13: 1294477.009 ops/s
Iteration  14: 1281728.129 ops/s
Iteration  15: 1286061.127 ops/s
Iteration  16: 1288126.109 ops/s
Iteration  17: 1361944.249 ops/s
Iteration  18: 1381223.324 ops/s
Iteration  19: 1382909.484 ops/s
Iteration  20: 1380262.827 ops/s
Iteration  21: 1305346.269 ops/s
Iteration  22: 1298156.025 ops/s
Iteration  23: 1352943.192 ops/s
Iteration  24: 1348950.876 ops/s
Iteration  25: 1366705.823 ops/s
Iteration  26: 1374123.698 ops/s
Iteration  27: 1327194.510 ops/s
Iteration  28: 1330132.230 ops/s
Iteration  29: 1366915.012 ops/s
Iteration  30: 1374183.603 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_countBy":
  1331930.166 ±(99.9%) 30637.877 ops/s [Average]
  (min, avg, max) = (1226553.874, 1331930.166, 1382961.418), stdev = 45857.336
  CI (99.9%): [1301292.289, 1362568.043] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_countBy  thrpt   30  1331930.166 ± 30637.877  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 100771.495 ops/s
# Warmup Iteration   2: 154814.175 ops/s
# Warmup Iteration   3: 199088.539 ops/s
# Warmup Iteration   4: 193622.750 ops/s
# Warmup Iteration   5: 193575.771 ops/s
# Warmup Iteration   6: 193625.044 ops/s
# Warmup Iteration   7: 153572.176 ops/s
# Warmup Iteration   8: 198761.953 ops/s
# Warmup Iteration   9: 186065.184 ops/s
# Warmup Iteration  10: 193469.575 ops/s
# Warmup Iteration  11: 201935.781 ops/s
# Warmup Iteration  12: 199195.552 ops/s
# Warmup Iteration  13: 198658.235 ops/s
# Warmup Iteration  14: 200303.495 ops/s
# Warmup Iteration  15: 197381.048 ops/s
# Warmup Iteration  16: 191872.921 ops/s
# Warmup Iteration  17: 185684.293 ops/s
# Warmup Iteration  18: 187325.436 ops/s
# Warmup Iteration  19: 200878.606 ops/s
# Warmup Iteration  20: 199873.249 ops/s
# Warmup Iteration  21: 200099.434 ops/s
# Warmup Iteration  22: 197228.076 ops/s
# Warmup Iteration  23: 201377.104 ops/s
# Warmup Iteration  24: 192343.430 ops/s
# Warmup Iteration  25: 193620.461 ops/s
# Warmup Iteration  26: 188649.720 ops/s
# Warmup Iteration  27: 187150.929 ops/s
# Warmup Iteration  28: 193848.386 ops/s
# Warmup Iteration  29: 200160.083 ops/s
# Warmup Iteration  30: 195575.388 ops/s
Iteration   1: 185743.951 ops/s
Iteration   2: 186720.449 ops/s
Iteration   3: 183852.770 ops/s
Iteration   4: 187423.782 ops/s
Iteration   5: 188272.214 ops/s
Iteration   6: 201080.093 ops/s
Iteration   7: 199726.385 ops/s
Iteration   8: 194931.625 ops/s
Iteration   9: 188488.211 ops/s
Iteration  10: 188572.936 ops/s
Iteration  11: 186265.153 ops/s
Iteration  12: 193162.104 ops/s
Iteration  13: 194742.156 ops/s
Iteration  14: 193675.178 ops/s
Iteration  15: 193730.279 ops/s
Iteration  16: 200292.408 ops/s
Iteration  17: 191745.639 ops/s
Iteration  18: 186152.832 ops/s
Iteration  19: 188050.371 ops/s
Iteration  20: 185603.548 ops/s
Iteration  21: 181706.323 ops/s
Iteration  22: 198387.794 ops/s
Iteration  23: 200788.953 ops/s
Iteration  24: 200677.447 ops/s
Iteration  25: 197247.210 ops/s
Iteration  26: 190625.952 ops/s
Iteration  27: 186295.896 ops/s
Iteration  28: 192918.720 ops/s
Iteration  29: 198357.258 ops/s
Iteration  30: 192376.027 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_countByEach":
  191920.455 ±(99.9%) 3829.205 ops/s [Average]
  (min, avg, max) = (181706.323, 191920.455, 201080.093), stdev = 5731.374
  CI (99.9%): [188091.250, 195749.660] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_countByEach  thrpt   30  191920.455 ± 3829.205  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 578356.366 ops/s
# Warmup Iteration   2: 1023594.098 ops/s
# Warmup Iteration   3: 1308930.497 ops/s
# Warmup Iteration   4: 1284059.214 ops/s
# Warmup Iteration   5: 1297805.997 ops/s
# Warmup Iteration   6: 999818.072 ops/s
# Warmup Iteration   7: 1313027.977 ops/s
# Warmup Iteration   8: 1315242.507 ops/s
# Warmup Iteration   9: 1280346.426 ops/s
# Warmup Iteration  10: 1310924.214 ops/s
# Warmup Iteration  11: 1254975.664 ops/s
# Warmup Iteration  12: 1278465.210 ops/s
# Warmup Iteration  13: 1341708.933 ops/s
# Warmup Iteration  14: 1291376.600 ops/s
# Warmup Iteration  15: 1260788.331 ops/s
# Warmup Iteration  16: 1349585.903 ops/s
# Warmup Iteration  17: 1354733.385 ops/s
# Warmup Iteration  18: 1233187.667 ops/s
# Warmup Iteration  19: 1241185.249 ops/s
# Warmup Iteration  20: 1222244.492 ops/s
# Warmup Iteration  21: 1296428.381 ops/s
# Warmup Iteration  22: 1283635.590 ops/s
# Warmup Iteration  23: 1252174.097 ops/s
# Warmup Iteration  24: 1241921.597 ops/s
# Warmup Iteration  25: 1309089.212 ops/s
# Warmup Iteration  26: 1287399.425 ops/s
# Warmup Iteration  27: 1309169.246 ops/s
# Warmup Iteration  28: 1321837.922 ops/s
# Warmup Iteration  29: 1289619.694 ops/s
# Warmup Iteration  30: 1220948.888 ops/s
Iteration   1: 1245777.954 ops/s
Iteration   2: 1257561.806 ops/s
Iteration   3: 1301122.437 ops/s
Iteration   4: 1337032.885 ops/s
Iteration   5: 1238099.817 ops/s
Iteration   6: 1235024.947 ops/s
Iteration   7: 1266129.547 ops/s
Iteration   8: 1309047.324 ops/s
Iteration   9: 1317454.347 ops/s
Iteration  10: 1350752.107 ops/s
Iteration  11: 1337230.701 ops/s
Iteration  12: 1316663.775 ops/s
Iteration  13: 1291262.134 ops/s
Iteration  14: 1276877.311 ops/s
Iteration  15: 1268073.620 ops/s
Iteration  16: 1239305.828 ops/s
Iteration  17: 1227723.170 ops/s
Iteration  18: 1244183.584 ops/s
Iteration  19: 1231282.454 ops/s
Iteration  20: 1305378.046 ops/s
Iteration  21: 1348027.981 ops/s
Iteration  22: 1323060.572 ops/s
Iteration  23: 1231488.036 ops/s
Iteration  24: 1232775.789 ops/s
Iteration  25: 1289100.039 ops/s
Iteration  26: 1335596.109 ops/s
Iteration  27: 1312196.941 ops/s
Iteration  28: 1294128.553 ops/s
Iteration  29: 1283874.522 ops/s
Iteration  30: 1235965.588 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_countByWith":
  1282739.931 ±(99.9%) 27007.731 ops/s [Average]
  (min, avg, max) = (1227723.170, 1282739.931, 1350752.107), stdev = 40423.903
  CI (99.9%): [1255732.200, 1309747.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_countByWith  thrpt   30  1282739.931 ± 27007.731  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13126404.993 ops/s
# Warmup Iteration   2: 20223664.529 ops/s
# Warmup Iteration   3: 23190495.070 ops/s
# Warmup Iteration   4: 23371502.970 ops/s
# Warmup Iteration   5: 23179279.148 ops/s
# Warmup Iteration   6: 21461473.411 ops/s
# Warmup Iteration   7: 23754790.606 ops/s
# Warmup Iteration   8: 23518760.612 ops/s
# Warmup Iteration   9: 23350212.994 ops/s
# Warmup Iteration  10: 23679161.311 ops/s
# Warmup Iteration  11: 24697899.027 ops/s
# Warmup Iteration  12: 23282511.565 ops/s
# Warmup Iteration  13: 25305561.257 ops/s
# Warmup Iteration  14: 24018649.733 ops/s
# Warmup Iteration  15: 23483104.124 ops/s
# Warmup Iteration  16: 24693526.722 ops/s
# Warmup Iteration  17: 23825950.981 ops/s
# Warmup Iteration  18: 23293982.604 ops/s
# Warmup Iteration  19: 23433241.004 ops/s
# Warmup Iteration  20: 23405272.666 ops/s
# Warmup Iteration  21: 23097980.442 ops/s
# Warmup Iteration  22: 23630658.777 ops/s
# Warmup Iteration  23: 25012899.422 ops/s
# Warmup Iteration  24: 23798458.879 ops/s
# Warmup Iteration  25: 23355121.119 ops/s
# Warmup Iteration  26: 22975275.480 ops/s
# Warmup Iteration  27: 22989232.850 ops/s
# Warmup Iteration  28: 24420495.475 ops/s
# Warmup Iteration  29: 24926693.546 ops/s
# Warmup Iteration  30: 24380485.906 ops/s
Iteration   1: 23613584.566 ops/s
Iteration   2: 23192653.321 ops/s
Iteration   3: 22795231.536 ops/s
Iteration   4: 22918214.694 ops/s
Iteration   5: 23196285.922 ops/s
Iteration   6: 23238343.616 ops/s
Iteration   7: 22892074.378 ops/s
Iteration   8: 22820680.904 ops/s
Iteration   9: 24922354.710 ops/s
Iteration  10: 25247874.966 ops/s
Iteration  11: 24776916.673 ops/s
Iteration  12: 23424527.853 ops/s
Iteration  13: 23096116.561 ops/s
Iteration  14: 23247622.149 ops/s
Iteration  15: 23058437.289 ops/s
Iteration  16: 25137937.666 ops/s
Iteration  17: 25298160.074 ops/s
Iteration  18: 24510807.577 ops/s
Iteration  19: 23627898.707 ops/s
Iteration  20: 23527524.040 ops/s
Iteration  21: 23110505.787 ops/s
Iteration  22: 23987129.850 ops/s
Iteration  23: 25328799.071 ops/s
Iteration  24: 24815387.256 ops/s
Iteration  25: 22923703.729 ops/s
Iteration  26: 24994221.416 ops/s
Iteration  27: 23133573.670 ops/s
Iteration  28: 23285362.777 ops/s
Iteration  29: 23397280.563 ops/s
Iteration  30: 25125481.080 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_countWith":
  23821489.747 ±(99.9%) 605084.600 ops/s [Average]
  (min, avg, max) = (22795231.536, 23821489.747, 25328799.071), stdev = 905662.213
  CI (99.9%): [23216405.147, 24426574.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_countWith  thrpt   30  23821489.747 ± 605084.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10650187.978 ops/s
# Warmup Iteration   2: 23276154.638 ops/s
# Warmup Iteration   3: 23189551.840 ops/s
# Warmup Iteration   4: 18949099.845 ops/s
# Warmup Iteration   5: 22650270.086 ops/s
# Warmup Iteration   6: 22764857.317 ops/s
# Warmup Iteration   7: 23227112.613 ops/s
# Warmup Iteration   8: 22177121.047 ops/s
# Warmup Iteration   9: 21691999.960 ops/s
# Warmup Iteration  10: 21917719.667 ops/s
# Warmup Iteration  11: 21763598.412 ops/s
# Warmup Iteration  12: 22343750.122 ops/s
# Warmup Iteration  13: 22870636.796 ops/s
# Warmup Iteration  14: 21906545.251 ops/s
# Warmup Iteration  15: 21855350.808 ops/s
# Warmup Iteration  16: 23641616.291 ops/s
# Warmup Iteration  17: 22094905.353 ops/s
# Warmup Iteration  18: 21700506.606 ops/s
# Warmup Iteration  19: 21615557.849 ops/s
# Warmup Iteration  20: 22868579.317 ops/s
# Warmup Iteration  21: 23395251.674 ops/s
# Warmup Iteration  22: 21494759.903 ops/s
# Warmup Iteration  23: 22975750.528 ops/s
# Warmup Iteration  24: 22598261.263 ops/s
# Warmup Iteration  25: 21855454.749 ops/s
# Warmup Iteration  26: 22425420.884 ops/s
# Warmup Iteration  27: 23293918.434 ops/s
# Warmup Iteration  28: 23412658.161 ops/s
# Warmup Iteration  29: 21637425.696 ops/s
# Warmup Iteration  30: 22780861.490 ops/s
Iteration   1: 23445166.583 ops/s
Iteration   2: 21481279.310 ops/s
Iteration   3: 21616178.219 ops/s
Iteration   4: 22100600.836 ops/s
Iteration   5: 21673511.389 ops/s
Iteration   6: 22977155.184 ops/s
Iteration   7: 23638169.305 ops/s
Iteration   8: 23346624.925 ops/s
Iteration   9: 21911329.924 ops/s
Iteration  10: 21276976.563 ops/s
Iteration  11: 21667157.069 ops/s
Iteration  12: 21535691.083 ops/s
Iteration  13: 22327515.318 ops/s
Iteration  14: 22441036.708 ops/s
Iteration  15: 21424263.108 ops/s
Iteration  16: 21567390.599 ops/s
Iteration  17: 21706754.139 ops/s
Iteration  18: 21331496.346 ops/s
Iteration  19: 21312873.919 ops/s
Iteration  20: 22106288.939 ops/s
Iteration  21: 23627070.651 ops/s
Iteration  22: 23625422.591 ops/s
Iteration  23: 22403548.306 ops/s
Iteration  24: 22382743.521 ops/s
Iteration  25: 21612665.858 ops/s
Iteration  26: 22261249.680 ops/s
Iteration  27: 21333998.096 ops/s
Iteration  28: 21651012.382 ops/s
Iteration  29: 21869679.481 ops/s
Iteration  30: 22146789.866 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detect":
  22126721.330 ±(99.9%) 507096.650 ops/s [Average]
  (min, avg, max) = (21276976.563, 22126721.330, 23638169.305), stdev = 758998.450
  CI (99.9%): [21619624.680, 22633817.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_detect  thrpt   30  22126721.330 ± 507096.650  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10271363.577 ops/s
# Warmup Iteration   2: 24202097.110 ops/s
# Warmup Iteration   3: 23710845.785 ops/s
# Warmup Iteration   4: 18915489.121 ops/s
# Warmup Iteration   5: 23155269.895 ops/s
# Warmup Iteration   6: 24685417.406 ops/s
# Warmup Iteration   7: 23144529.219 ops/s
# Warmup Iteration   8: 23405394.570 ops/s
# Warmup Iteration   9: 22410221.403 ops/s
# Warmup Iteration  10: 23764954.764 ops/s
# Warmup Iteration  11: 24375061.830 ops/s
# Warmup Iteration  12: 22897548.875 ops/s
# Warmup Iteration  13: 22506840.285 ops/s
# Warmup Iteration  14: 24420539.944 ops/s
# Warmup Iteration  15: 24064620.487 ops/s
# Warmup Iteration  16: 23693287.725 ops/s
# Warmup Iteration  17: 22814667.900 ops/s
# Warmup Iteration  18: 24077029.735 ops/s
# Warmup Iteration  19: 24304699.389 ops/s
# Warmup Iteration  20: 22781125.417 ops/s
# Warmup Iteration  21: 24056580.911 ops/s
# Warmup Iteration  22: 23650544.286 ops/s
# Warmup Iteration  23: 24697077.985 ops/s
# Warmup Iteration  24: 23335561.184 ops/s
# Warmup Iteration  25: 23762673.891 ops/s
# Warmup Iteration  26: 24372562.437 ops/s
# Warmup Iteration  27: 24694570.275 ops/s
# Warmup Iteration  28: 23594500.795 ops/s
# Warmup Iteration  29: 23423690.855 ops/s
# Warmup Iteration  30: 24377299.943 ops/s
Iteration   1: 24708253.727 ops/s
Iteration   2: 23043053.417 ops/s
Iteration   3: 22958559.072 ops/s
Iteration   4: 22562393.177 ops/s
Iteration   5: 22752142.663 ops/s
Iteration   6: 23085951.333 ops/s
Iteration   7: 22432927.746 ops/s
Iteration   8: 23611807.034 ops/s
Iteration   9: 23238945.654 ops/s
Iteration  10: 23050805.554 ops/s
Iteration  11: 22512882.179 ops/s
Iteration  12: 22345628.643 ops/s
Iteration  13: 22918917.736 ops/s
Iteration  14: 23882652.485 ops/s
Iteration  15: 24760736.116 ops/s
Iteration  16: 23819309.641 ops/s
Iteration  17: 23558870.723 ops/s
Iteration  18: 23289406.566 ops/s
Iteration  19: 23228223.728 ops/s
Iteration  20: 22585409.504 ops/s
Iteration  21: 24690945.982 ops/s
Iteration  22: 24671489.433 ops/s
Iteration  23: 24808628.236 ops/s
Iteration  24: 22922520.540 ops/s
Iteration  25: 22491357.222 ops/s
Iteration  26: 22706716.042 ops/s
Iteration  27: 22514165.718 ops/s
Iteration  28: 22961310.575 ops/s
Iteration  29: 24693905.734 ops/s
Iteration  30: 23831370.250 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectIfNone":
  23354642.881 ±(99.9%) 541928.362 ops/s [Average]
  (min, avg, max) = (22345628.643, 23354642.881, 24808628.236), stdev = 811132.921
  CI (99.9%): [22812714.519, 23896571.243] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_detectIfNone  thrpt   30  23354642.881 ± 541928.362  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36220000.029 ops/s
# Warmup Iteration   2: 35795001.016 ops/s
# Warmup Iteration   3: 60608926.630 ops/s
# Warmup Iteration   4: 59137457.643 ops/s
# Warmup Iteration   5: 59090079.026 ops/s
# Warmup Iteration   6: 59913593.482 ops/s
# Warmup Iteration   7: 55242457.710 ops/s
# Warmup Iteration   8: 54814005.363 ops/s
# Warmup Iteration   9: 51788066.504 ops/s
# Warmup Iteration  10: 52039376.925 ops/s
# Warmup Iteration  11: 55791829.975 ops/s
# Warmup Iteration  12: 54053584.885 ops/s
# Warmup Iteration  13: 59153860.172 ops/s
# Warmup Iteration  14: 58239087.046 ops/s
# Warmup Iteration  15: 55967326.632 ops/s
# Warmup Iteration  16: 56999843.615 ops/s
# Warmup Iteration  17: 56023157.793 ops/s
# Warmup Iteration  18: 57330383.920 ops/s
# Warmup Iteration  19: 59258806.402 ops/s
# Warmup Iteration  20: 59473827.709 ops/s
# Warmup Iteration  21: 55211019.819 ops/s
# Warmup Iteration  22: 55067492.766 ops/s
# Warmup Iteration  23: 59375702.755 ops/s
# Warmup Iteration  24: 59866238.363 ops/s
# Warmup Iteration  25: 59532503.934 ops/s
# Warmup Iteration  26: 59284685.372 ops/s
# Warmup Iteration  27: 56449743.118 ops/s
# Warmup Iteration  28: 58421684.784 ops/s
# Warmup Iteration  29: 61118827.798 ops/s
# Warmup Iteration  30: 58638620.938 ops/s
Iteration   1: 54941166.665 ops/s
Iteration   2: 54184364.507 ops/s
Iteration   3: 55683748.414 ops/s
Iteration   4: 60620128.309 ops/s
Iteration   5: 58027266.337 ops/s
Iteration   6: 57674885.632 ops/s
Iteration   7: 55303057.828 ops/s
Iteration   8: 56190989.574 ops/s
Iteration   9: 56506387.212 ops/s
Iteration  10: 62006846.437 ops/s
Iteration  11: 62256614.238 ops/s
Iteration  12: 60012322.523 ops/s
Iteration  13: 54123202.518 ops/s
Iteration  14: 55931191.686 ops/s
Iteration  15: 60277971.942 ops/s
Iteration  16: 60679071.451 ops/s
Iteration  17: 55066387.486 ops/s
Iteration  18: 55305382.594 ops/s
Iteration  19: 59114268.467 ops/s
Iteration  20: 56803256.182 ops/s
Iteration  21: 60289746.697 ops/s
Iteration  22: 60588367.428 ops/s
Iteration  23: 55173598.432 ops/s
Iteration  24: 55208740.212 ops/s
Iteration  25: 55194332.712 ops/s
Iteration  26: 56696035.148 ops/s
Iteration  27: 56225104.928 ops/s
Iteration  28: 59223599.908 ops/s
Iteration  29: 61809758.483 ops/s
Iteration  30: 61101984.758 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectIndex":
  57740659.290 ±(99.9%) 1761246.948 ops/s [Average]
  (min, avg, max) = (54123202.518, 57740659.290, 62256614.238), stdev = 2636151.718
  CI (99.9%): [55979412.342, 59501906.239] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score         Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_detectIndex  thrpt   30  57740659.290 ± 1761246.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27838112.482 ops/s
# Warmup Iteration   2: 29949700.832 ops/s
# Warmup Iteration   3: 35002812.057 ops/s
# Warmup Iteration   4: 37465467.148 ops/s
# Warmup Iteration   5: 41422235.679 ops/s
# Warmup Iteration   6: 37466873.977 ops/s
# Warmup Iteration   7: 38124281.816 ops/s
# Warmup Iteration   8: 40867989.977 ops/s
# Warmup Iteration   9: 40877056.609 ops/s
# Warmup Iteration  10: 39098943.964 ops/s
# Warmup Iteration  11: 37150552.963 ops/s
# Warmup Iteration  12: 36859384.253 ops/s
# Warmup Iteration  13: 33291663.102 ops/s
# Warmup Iteration  14: 36496670.454 ops/s
# Warmup Iteration  15: 39704600.349 ops/s
# Warmup Iteration  16: 37308671.966 ops/s
# Warmup Iteration  17: 37939094.221 ops/s
# Warmup Iteration  18: 38022620.079 ops/s
# Warmup Iteration  19: 38549077.255 ops/s
# Warmup Iteration  20: 40620649.527 ops/s
# Warmup Iteration  21: 37098066.562 ops/s
# Warmup Iteration  22: 37797051.069 ops/s
# Warmup Iteration  23: 41531198.157 ops/s
# Warmup Iteration  24: 40516567.387 ops/s
# Warmup Iteration  25: 40662825.453 ops/s
# Warmup Iteration  26: 38045628.496 ops/s
# Warmup Iteration  27: 38164656.851 ops/s
# Warmup Iteration  28: 36981412.942 ops/s
# Warmup Iteration  29: 37249814.150 ops/s
# Warmup Iteration  30: 37708851.473 ops/s
Iteration   1: 37069199.044 ops/s
Iteration   2: 36585302.030 ops/s
Iteration   3: 36325369.124 ops/s
Iteration   4: 37898212.858 ops/s
Iteration   5: 41556664.518 ops/s
Iteration   6: 41492849.897 ops/s
Iteration   7: 37691731.524 ops/s
Iteration   8: 38399849.581 ops/s
Iteration   9: 38023929.663 ops/s
Iteration  10: 37161101.790 ops/s
Iteration  11: 36459921.453 ops/s
Iteration  12: 37849035.086 ops/s
Iteration  13: 37689875.638 ops/s
Iteration  14: 38112802.216 ops/s
Iteration  15: 37169923.240 ops/s
Iteration  16: 37250453.908 ops/s
Iteration  17: 37320778.423 ops/s
Iteration  18: 41353582.901 ops/s
Iteration  19: 41557250.997 ops/s
Iteration  20: 38597239.042 ops/s
Iteration  21: 37749905.426 ops/s
Iteration  22: 37222908.941 ops/s
Iteration  23: 38338317.103 ops/s
Iteration  24: 36660765.929 ops/s
Iteration  25: 37979547.169 ops/s
Iteration  26: 36813749.310 ops/s
Iteration  27: 40498401.103 ops/s
Iteration  28: 40839547.104 ops/s
Iteration  29: 40824933.182 ops/s
Iteration  30: 39206873.668 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectLastIndex":
  38390000.729 ±(99.9%) 1131143.684 ops/s [Average]
  (min, avg, max) = (36325369.124, 38390000.729, 41557250.997), stdev = 1693042.744
  CI (99.9%): [37258857.045, 39521144.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score         Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  38390000.729 ± 1131143.684  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6335671.381 ops/s
# Warmup Iteration   2: 15372278.543 ops/s
# Warmup Iteration   3: 13810180.118 ops/s
# Warmup Iteration   4: 13650237.052 ops/s
# Warmup Iteration   5: 14374928.120 ops/s
# Warmup Iteration   6: 15767359.135 ops/s
# Warmup Iteration   7: 14549304.932 ops/s
# Warmup Iteration   8: 14557956.538 ops/s
# Warmup Iteration   9: 15850056.895 ops/s
# Warmup Iteration  10: 15965724.599 ops/s
# Warmup Iteration  11: 15951924.334 ops/s
# Warmup Iteration  12: 15964134.359 ops/s
# Warmup Iteration  13: 15930967.535 ops/s
# Warmup Iteration  14: 15832561.193 ops/s
# Warmup Iteration  15: 15896180.891 ops/s
# Warmup Iteration  16: 15205349.527 ops/s
# Warmup Iteration  17: 14366662.767 ops/s
# Warmup Iteration  18: 15844621.471 ops/s
# Warmup Iteration  19: 15788889.828 ops/s
# Warmup Iteration  20: 14898996.185 ops/s
# Warmup Iteration  21: 15389164.471 ops/s
# Warmup Iteration  22: 15261918.925 ops/s
# Warmup Iteration  23: 15064486.491 ops/s
# Warmup Iteration  24: 15567972.779 ops/s
# Warmup Iteration  25: 15147298.271 ops/s
# Warmup Iteration  26: 14523517.235 ops/s
# Warmup Iteration  27: 15460924.046 ops/s
# Warmup Iteration  28: 15691245.820 ops/s
# Warmup Iteration  29: 14372587.532 ops/s
# Warmup Iteration  30: 15547322.091 ops/s
Iteration   1: 15961649.810 ops/s
Iteration   2: 15428113.577 ops/s
Iteration   3: 14437444.485 ops/s
Iteration   4: 14527980.226 ops/s
Iteration   5: 14309663.377 ops/s
Iteration   6: 14332346.265 ops/s
Iteration   7: 14192963.261 ops/s
Iteration   8: 15141081.025 ops/s
Iteration   9: 15991144.518 ops/s
Iteration  10: 15579547.798 ops/s
Iteration  11: 14552626.879 ops/s
Iteration  12: 15827980.345 ops/s
Iteration  13: 14211783.213 ops/s
Iteration  14: 14411228.247 ops/s
Iteration  15: 14368794.178 ops/s
Iteration  16: 14708534.131 ops/s
Iteration  17: 15979946.979 ops/s
Iteration  18: 15966661.457 ops/s
Iteration  19: 15100045.006 ops/s
Iteration  20: 14966212.034 ops/s
Iteration  21: 14335092.321 ops/s
Iteration  22: 14235474.737 ops/s
Iteration  23: 14485683.210 ops/s
Iteration  24: 14547133.576 ops/s
Iteration  25: 14411283.208 ops/s
Iteration  26: 14947700.993 ops/s
Iteration  27: 15811074.194 ops/s
Iteration  28: 16009541.448 ops/s
Iteration  29: 14550274.943 ops/s
Iteration  30: 15403121.463 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectWith":
  14957737.563 ±(99.9%) 441012.373 ops/s [Average]
  (min, avg, max) = (14192963.261, 14957737.563, 16009541.448), stdev = 660086.608
  CI (99.9%): [14516725.191, 15398749.936] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_detectWith  thrpt   30  14957737.563 ± 441012.373  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8463012.693 ops/s
# Warmup Iteration   2: 16482034.547 ops/s
# Warmup Iteration   3: 15788893.602 ops/s
# Warmup Iteration   4: 13124827.044 ops/s
# Warmup Iteration   5: 15721418.557 ops/s
# Warmup Iteration   6: 17004833.500 ops/s
# Warmup Iteration   7: 17519892.771 ops/s
# Warmup Iteration   8: 17440786.655 ops/s
# Warmup Iteration   9: 17376790.612 ops/s
# Warmup Iteration  10: 17399365.145 ops/s
# Warmup Iteration  11: 16919715.972 ops/s
# Warmup Iteration  12: 16686750.728 ops/s
# Warmup Iteration  13: 16299175.198 ops/s
# Warmup Iteration  14: 17362441.589 ops/s
# Warmup Iteration  15: 16500233.183 ops/s
# Warmup Iteration  16: 17032912.727 ops/s
# Warmup Iteration  17: 16237394.355 ops/s
# Warmup Iteration  18: 16922551.956 ops/s
# Warmup Iteration  19: 17039099.068 ops/s
# Warmup Iteration  20: 16327590.113 ops/s
# Warmup Iteration  21: 16551155.384 ops/s
# Warmup Iteration  22: 16162220.880 ops/s
# Warmup Iteration  23: 17118412.496 ops/s
# Warmup Iteration  24: 17135362.081 ops/s
# Warmup Iteration  25: 16981333.579 ops/s
# Warmup Iteration  26: 16365860.348 ops/s
# Warmup Iteration  27: 16758451.819 ops/s
# Warmup Iteration  28: 16340943.944 ops/s
# Warmup Iteration  29: 17269051.332 ops/s
# Warmup Iteration  30: 17501052.148 ops/s
Iteration   1: 17510209.059 ops/s
Iteration   2: 17206973.424 ops/s
Iteration   3: 17430700.216 ops/s
Iteration   4: 16981778.652 ops/s
Iteration   5: 15816062.161 ops/s
Iteration   6: 16523205.510 ops/s
Iteration   7: 16772732.815 ops/s
Iteration   8: 17261126.422 ops/s
Iteration   9: 15457465.937 ops/s
Iteration  10: 16288026.470 ops/s
Iteration  11: 15948320.253 ops/s
Iteration  12: 16260152.701 ops/s
Iteration  13: 16278860.692 ops/s
Iteration  14: 16869173.373 ops/s
Iteration  15: 15947388.419 ops/s
Iteration  16: 16414738.197 ops/s
Iteration  17: 15560481.173 ops/s
Iteration  18: 15929931.538 ops/s
Iteration  19: 16197993.602 ops/s
Iteration  20: 17511667.406 ops/s
Iteration  21: 17559089.513 ops/s
Iteration  22: 17461320.130 ops/s
Iteration  23: 17472197.751 ops/s
Iteration  24: 17510887.939 ops/s
Iteration  25: 17430270.995 ops/s
Iteration  26: 17345245.348 ops/s
Iteration  27: 17016886.680 ops/s
Iteration  28: 16579760.773 ops/s
Iteration  29: 16858805.489 ops/s
Iteration  30: 16861417.231 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_detectWithIfNone":
  16742095.662 ±(99.9%) 437264.021 ops/s [Average]
  (min, avg, max) = (15457465.937, 16742095.662, 17559089.513), stdev = 654476.251
  CI (99.9%): [16304831.641, 17179359.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  16742095.662 ± 437264.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1463985.883 ops/s
# Warmup Iteration   2: 2761331.014 ops/s
# Warmup Iteration   3: 2905842.843 ops/s
# Warmup Iteration   4: 2959799.620 ops/s
# Warmup Iteration   5: 2472640.282 ops/s
# Warmup Iteration   6: 2904209.967 ops/s
# Warmup Iteration   7: 2929603.255 ops/s
# Warmup Iteration   8: 2945157.898 ops/s
# Warmup Iteration   9: 2910780.880 ops/s
# Warmup Iteration  10: 2954442.192 ops/s
# Warmup Iteration  11: 2954204.620 ops/s
# Warmup Iteration  12: 2935435.468 ops/s
# Warmup Iteration  13: 2909854.211 ops/s
# Warmup Iteration  14: 2958852.707 ops/s
# Warmup Iteration  15: 2904942.026 ops/s
# Warmup Iteration  16: 2912112.450 ops/s
# Warmup Iteration  17: 2941337.996 ops/s
# Warmup Iteration  18: 2958009.176 ops/s
# Warmup Iteration  19: 2950698.554 ops/s
# Warmup Iteration  20: 2934870.002 ops/s
# Warmup Iteration  21: 2886227.872 ops/s
# Warmup Iteration  22: 2834487.593 ops/s
# Warmup Iteration  23: 2945279.147 ops/s
# Warmup Iteration  24: 2881482.801 ops/s
# Warmup Iteration  25: 2742852.714 ops/s
# Warmup Iteration  26: 2948022.420 ops/s
# Warmup Iteration  27: 2898685.241 ops/s
# Warmup Iteration  28: 2796769.084 ops/s
# Warmup Iteration  29: 2713457.762 ops/s
# Warmup Iteration  30: 2800445.710 ops/s
Iteration   1: 2935645.638 ops/s
Iteration   2: 2965639.325 ops/s
Iteration   3: 2707396.579 ops/s
Iteration   4: 2695799.861 ops/s
Iteration   5: 2781356.692 ops/s
Iteration   6: 2790364.991 ops/s
Iteration   7: 2899507.727 ops/s
Iteration   8: 2930959.861 ops/s
Iteration   9: 2903795.844 ops/s
Iteration  10: 2762146.543 ops/s
Iteration  11: 2711214.641 ops/s
Iteration  12: 2758706.033 ops/s
Iteration  13: 2883261.768 ops/s
Iteration  14: 2812773.099 ops/s
Iteration  15: 2922593.651 ops/s
Iteration  16: 2913998.460 ops/s
Iteration  17: 2927660.157 ops/s
Iteration  18: 2938028.588 ops/s
Iteration  19: 2901139.068 ops/s
Iteration  20: 2809494.283 ops/s
Iteration  21: 2755100.666 ops/s
Iteration  22: 2785391.859 ops/s
Iteration  23: 2735265.342 ops/s
Iteration  24: 2788533.644 ops/s
Iteration  25: 2886275.060 ops/s
Iteration  26: 2861362.135 ops/s
Iteration  27: 2826939.352 ops/s
Iteration  28: 2868424.997 ops/s
Iteration  29: 2923495.742 ops/s
Iteration  30: 2953886.985 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_distinct":
  2844538.620 ±(99.9%) 55196.535 ops/s [Average]
  (min, avg, max) = (2695799.861, 2844538.620, 2965639.325), stdev = 82615.582
  CI (99.9%): [2789342.084, 2899735.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_distinct  thrpt   30  2844538.620 ± 55196.535  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3519896.910 ops/s
# Warmup Iteration   2: 8220472.925 ops/s
# Warmup Iteration   3: 8016693.487 ops/s
# Warmup Iteration   4: 6969744.216 ops/s
# Warmup Iteration   5: 8000221.792 ops/s
# Warmup Iteration   6: 7728684.596 ops/s
# Warmup Iteration   7: 7735279.950 ops/s
# Warmup Iteration   8: 8268637.190 ops/s
# Warmup Iteration   9: 7743209.643 ops/s
# Warmup Iteration  10: 7671462.349 ops/s
# Warmup Iteration  11: 8370512.817 ops/s
# Warmup Iteration  12: 8123477.922 ops/s
# Warmup Iteration  13: 7673250.278 ops/s
# Warmup Iteration  14: 8006226.442 ops/s
# Warmup Iteration  15: 8134207.034 ops/s
# Warmup Iteration  16: 8057392.434 ops/s
# Warmup Iteration  17: 8281348.805 ops/s
# Warmup Iteration  18: 8152160.827 ops/s
# Warmup Iteration  19: 8035461.888 ops/s
# Warmup Iteration  20: 7821546.417 ops/s
# Warmup Iteration  21: 8297413.516 ops/s
# Warmup Iteration  22: 8446262.418 ops/s
# Warmup Iteration  23: 8435644.937 ops/s
# Warmup Iteration  24: 8399243.822 ops/s
# Warmup Iteration  25: 8486389.605 ops/s
# Warmup Iteration  26: 8333585.201 ops/s
# Warmup Iteration  27: 8439872.812 ops/s
# Warmup Iteration  28: 7880729.008 ops/s
# Warmup Iteration  29: 8346333.760 ops/s
# Warmup Iteration  30: 8068841.252 ops/s
Iteration   1: 8004723.074 ops/s
Iteration   2: 8223087.902 ops/s
Iteration   3: 8352923.130 ops/s
Iteration   4: 8330375.517 ops/s
Iteration   5: 7826918.227 ops/s
Iteration   6: 7700000.607 ops/s
Iteration   7: 7684737.770 ops/s
Iteration   8: 7854502.813 ops/s
Iteration   9: 7484344.337 ops/s
Iteration  10: 7563441.258 ops/s
Iteration  11: 7576158.379 ops/s
Iteration  12: 7816687.995 ops/s
Iteration  13: 7676754.041 ops/s
Iteration  14: 8121794.465 ops/s
Iteration  15: 8348715.129 ops/s
Iteration  16: 7971161.010 ops/s
Iteration  17: 8025525.163 ops/s
Iteration  18: 7773474.697 ops/s
Iteration  19: 7802787.146 ops/s
Iteration  20: 7761094.632 ops/s
Iteration  21: 7552264.941 ops/s
Iteration  22: 8215852.892 ops/s
Iteration  23: 7857096.142 ops/s
Iteration  24: 7686591.868 ops/s
Iteration  25: 7632123.482 ops/s
Iteration  26: 7744808.479 ops/s
Iteration  27: 7652782.903 ops/s
Iteration  28: 8046662.323 ops/s
Iteration  29: 8325152.528 ops/s
Iteration  30: 8267793.814 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_distinctBy":
  7896011.222 ±(99.9%) 180870.017 ops/s [Average]
  (min, avg, max) = (7484344.337, 7896011.222, 8352923.130), stdev = 270717.747
  CI (99.9%): [7715141.205, 8076881.239] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_distinctBy  thrpt   30  7896011.222 ± 180870.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3515126.970 ops/s
# Warmup Iteration   2: 7325964.677 ops/s
# Warmup Iteration   3: 7699840.122 ops/s
# Warmup Iteration   4: 7869049.806 ops/s
# Warmup Iteration   5: 6605932.906 ops/s
# Warmup Iteration   6: 6829613.760 ops/s
# Warmup Iteration   7: 7571582.141 ops/s
# Warmup Iteration   8: 7089550.236 ops/s
# Warmup Iteration   9: 7180353.800 ops/s
# Warmup Iteration  10: 7527209.854 ops/s
# Warmup Iteration  11: 7764851.667 ops/s
# Warmup Iteration  12: 6866804.664 ops/s
# Warmup Iteration  13: 7563449.236 ops/s
# Warmup Iteration  14: 7199991.624 ops/s
# Warmup Iteration  15: 7324696.210 ops/s
# Warmup Iteration  16: 7679195.776 ops/s
# Warmup Iteration  17: 7225924.085 ops/s
# Warmup Iteration  18: 7389893.701 ops/s
# Warmup Iteration  19: 6837460.391 ops/s
# Warmup Iteration  20: 7239061.743 ops/s
# Warmup Iteration  21: 8195540.652 ops/s
# Warmup Iteration  22: 7362698.995 ops/s
# Warmup Iteration  23: 6753095.954 ops/s
# Warmup Iteration  24: 7227181.538 ops/s
# Warmup Iteration  25: 7394010.433 ops/s
# Warmup Iteration  26: 6910249.693 ops/s
# Warmup Iteration  27: 7199186.549 ops/s
# Warmup Iteration  28: 7693289.558 ops/s
# Warmup Iteration  29: 7115825.943 ops/s
# Warmup Iteration  30: 7250302.527 ops/s
Iteration   1: 6316018.150 ops/s
Iteration   2: 6532908.361 ops/s
Iteration   3: 7068907.646 ops/s
Iteration   4: 7439483.558 ops/s
Iteration   5: 7042159.606 ops/s
Iteration   6: 7403962.484 ops/s
Iteration   7: 7267126.231 ops/s
Iteration   8: 7659064.623 ops/s
Iteration   9: 7688144.684 ops/s
Iteration  10: 7345010.814 ops/s
Iteration  11: 7367220.431 ops/s
Iteration  12: 7463344.090 ops/s
Iteration  13: 7191927.740 ops/s
Iteration  14: 7103459.710 ops/s
Iteration  15: 6835068.465 ops/s
Iteration  16: 6985368.305 ops/s
Iteration  17: 7498661.331 ops/s
Iteration  18: 7670514.265 ops/s
Iteration  19: 7703642.054 ops/s
Iteration  20: 7418002.490 ops/s
Iteration  21: 6878626.103 ops/s
Iteration  22: 7579610.173 ops/s
Iteration  23: 7002594.833 ops/s
Iteration  24: 6803689.823 ops/s
Iteration  25: 7522718.588 ops/s
Iteration  26: 7100135.109 ops/s
Iteration  27: 7171794.565 ops/s
Iteration  28: 7454220.253 ops/s
Iteration  29: 7286659.357 ops/s
Iteration  30: 7224227.371 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  7234142.374 ±(99.9%) 226596.441 ops/s [Average]
  (min, avg, max) = (6316018.150, 7234142.374, 7703642.054), stdev = 339158.911
  CI (99.9%): [7007545.933, 7460738.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  7234142.374 ± 226596.441  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 892052.371 ops/s
# Warmup Iteration   2: 968723.865 ops/s
# Warmup Iteration   3: 1367742.086 ops/s
# Warmup Iteration   4: 1434763.755 ops/s
# Warmup Iteration   5: 1427304.004 ops/s
# Warmup Iteration   6: 1452456.893 ops/s
# Warmup Iteration   7: 1399435.083 ops/s
# Warmup Iteration   8: 1376315.490 ops/s
# Warmup Iteration   9: 1352440.391 ops/s
# Warmup Iteration  10: 1346716.790 ops/s
# Warmup Iteration  11: 1093214.095 ops/s
# Warmup Iteration  12: 1459397.648 ops/s
# Warmup Iteration  13: 1359431.301 ops/s
# Warmup Iteration  14: 1465272.628 ops/s
# Warmup Iteration  15: 1467324.148 ops/s
# Warmup Iteration  16: 1390949.905 ops/s
# Warmup Iteration  17: 1456639.253 ops/s
# Warmup Iteration  18: 1421599.591 ops/s
# Warmup Iteration  19: 1357853.534 ops/s
# Warmup Iteration  20: 1426395.351 ops/s
# Warmup Iteration  21: 1437294.630 ops/s
# Warmup Iteration  22: 1410236.713 ops/s
# Warmup Iteration  23: 1463204.503 ops/s
# Warmup Iteration  24: 1452638.634 ops/s
# Warmup Iteration  25: 1372474.617 ops/s
# Warmup Iteration  26: 1420115.479 ops/s
# Warmup Iteration  27: 1433088.393 ops/s
# Warmup Iteration  28: 1374725.384 ops/s
# Warmup Iteration  29: 1367750.005 ops/s
# Warmup Iteration  30: 1493046.142 ops/s
Iteration   1: 1395114.216 ops/s
Iteration   2: 1462305.696 ops/s
Iteration   3: 1436560.309 ops/s
Iteration   4: 1426736.310 ops/s
Iteration   5: 1371236.495 ops/s
Iteration   6: 1376207.551 ops/s
Iteration   7: 1345713.299 ops/s
Iteration   8: 1362974.893 ops/s
Iteration   9: 1409997.165 ops/s
Iteration  10: 1380742.577 ops/s
Iteration  11: 1391263.784 ops/s
Iteration  12: 1381125.640 ops/s
Iteration  13: 1416669.140 ops/s
Iteration  14: 1409163.938 ops/s
Iteration  15: 1362014.637 ops/s
Iteration  16: 1360821.134 ops/s
Iteration  17: 1491557.948 ops/s
Iteration  18: 1494801.434 ops/s
Iteration  19: 1379154.375 ops/s
Iteration  20: 1385259.926 ops/s
Iteration  21: 1378525.803 ops/s
Iteration  22: 1379807.987 ops/s
Iteration  23: 1375346.388 ops/s
Iteration  24: 1348765.263 ops/s
Iteration  25: 1353280.275 ops/s
Iteration  26: 1374019.189 ops/s
Iteration  27: 1435111.291 ops/s
Iteration  28: 1456787.594 ops/s
Iteration  29: 1451902.212 ops/s
Iteration  30: 1367240.805 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_drop":
  1398673.576 ±(99.9%) 27481.260 ops/s [Average]
  (min, avg, max) = (1345713.299, 1398673.576, 1494801.434), stdev = 41132.659
  CI (99.9%): [1371192.316, 1426154.836] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_drop  thrpt   30  1398673.576 ± 27481.260  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3256914.879 ops/s
# Warmup Iteration   2: 6868150.455 ops/s
# Warmup Iteration   3: 6626967.228 ops/s
# Warmup Iteration   4: 7046427.232 ops/s
# Warmup Iteration   5: 5426556.356 ops/s
# Warmup Iteration   6: 6639264.435 ops/s
# Warmup Iteration   7: 6622276.219 ops/s
# Warmup Iteration   8: 6704696.110 ops/s
# Warmup Iteration   9: 6590162.568 ops/s
# Warmup Iteration  10: 6871795.501 ops/s
# Warmup Iteration  11: 6824213.480 ops/s
# Warmup Iteration  12: 6470536.916 ops/s
# Warmup Iteration  13: 6445132.667 ops/s
# Warmup Iteration  14: 6406763.806 ops/s
# Warmup Iteration  15: 6644686.052 ops/s
# Warmup Iteration  16: 6507930.929 ops/s
# Warmup Iteration  17: 6545821.726 ops/s
# Warmup Iteration  18: 7075532.502 ops/s
# Warmup Iteration  19: 6571872.162 ops/s
# Warmup Iteration  20: 6556589.923 ops/s
# Warmup Iteration  21: 6389438.162 ops/s
# Warmup Iteration  22: 6615473.278 ops/s
# Warmup Iteration  23: 6478413.171 ops/s
# Warmup Iteration  24: 6670883.016 ops/s
# Warmup Iteration  25: 7060769.934 ops/s
# Warmup Iteration  26: 6500898.846 ops/s
# Warmup Iteration  27: 6581891.849 ops/s
# Warmup Iteration  28: 6586720.701 ops/s
# Warmup Iteration  29: 6970618.902 ops/s
# Warmup Iteration  30: 6614067.411 ops/s
Iteration   1: 6887973.291 ops/s
Iteration   2: 7095055.839 ops/s
Iteration   3: 6915399.217 ops/s
Iteration   4: 6565709.836 ops/s
Iteration   5: 6892327.388 ops/s
Iteration   6: 6658036.107 ops/s
Iteration   7: 6461303.422 ops/s
Iteration   8: 6969219.999 ops/s
Iteration   9: 7181835.806 ops/s
Iteration  10: 7024911.542 ops/s
Iteration  11: 6473188.772 ops/s
Iteration  12: 6982853.665 ops/s
Iteration  13: 6723152.359 ops/s
Iteration  14: 6851878.849 ops/s
Iteration  15: 6978278.035 ops/s
Iteration  16: 6798606.593 ops/s
Iteration  17: 6761153.085 ops/s
Iteration  18: 7039098.198 ops/s
Iteration  19: 6651964.324 ops/s
Iteration  20: 6669812.465 ops/s
Iteration  21: 6432879.158 ops/s
Iteration  22: 7069862.522 ops/s
Iteration  23: 6587245.620 ops/s
Iteration  24: 6673850.701 ops/s
Iteration  25: 7089279.353 ops/s
Iteration  26: 7166123.289 ops/s
Iteration  27: 7125359.264 ops/s
Iteration  28: 7070378.562 ops/s
Iteration  29: 6474640.459 ops/s
Iteration  30: 6437613.973 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_dropWhile":
  6823633.056 ±(99.9%) 161546.487 ops/s [Average]
  (min, avg, max) = (6432879.158, 6823633.056, 7181835.806), stdev = 241795.195
  CI (99.9%): [6662086.569, 6985179.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_dropWhile  thrpt   30  6823633.056 ± 161546.487  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 732821.061 ops/s
# Warmup Iteration   2: 702569.033 ops/s
# Warmup Iteration   3: 926778.446 ops/s
# Warmup Iteration   4: 937045.597 ops/s
# Warmup Iteration   5: 915670.281 ops/s
# Warmup Iteration   6: 978646.050 ops/s
# Warmup Iteration   7: 904066.313 ops/s
# Warmup Iteration   8: 987213.582 ops/s
# Warmup Iteration   9: 901902.835 ops/s
# Warmup Iteration  10: 931711.102 ops/s
# Warmup Iteration  11: 988997.774 ops/s
# Warmup Iteration  12: 819410.047 ops/s
# Warmup Iteration  13: 895981.658 ops/s
# Warmup Iteration  14: 984187.180 ops/s
# Warmup Iteration  15: 922285.452 ops/s
# Warmup Iteration  16: 983988.035 ops/s
# Warmup Iteration  17: 1019858.832 ops/s
# Warmup Iteration  18: 992403.149 ops/s
# Warmup Iteration  19: 921446.390 ops/s
# Warmup Iteration  20: 1026169.878 ops/s
# Warmup Iteration  21: 1032385.753 ops/s
# Warmup Iteration  22: 1033717.309 ops/s
# Warmup Iteration  23: 972430.183 ops/s
# Warmup Iteration  24: 964183.167 ops/s
# Warmup Iteration  25: 920260.889 ops/s
# Warmup Iteration  26: 1005455.569 ops/s
# Warmup Iteration  27: 942286.872 ops/s
# Warmup Iteration  28: 1028513.119 ops/s
# Warmup Iteration  29: 1010832.555 ops/s
# Warmup Iteration  30: 1006868.704 ops/s
Iteration   1: 943286.046 ops/s
Iteration   2: 939976.777 ops/s
Iteration   3: 1049356.110 ops/s
Iteration   4: 1052050.765 ops/s
Iteration   5: 1037288.013 ops/s
Iteration   6: 951589.710 ops/s
Iteration   7: 1034246.024 ops/s
Iteration   8: 1040472.079 ops/s
Iteration   9: 1010260.960 ops/s
Iteration  10: 948052.888 ops/s
Iteration  11: 1006784.824 ops/s
Iteration  12: 1040165.974 ops/s
Iteration  13: 1049194.972 ops/s
Iteration  14: 1029166.317 ops/s
Iteration  15: 935471.636 ops/s
Iteration  16: 942882.597 ops/s
Iteration  17: 941000.735 ops/s
Iteration  18: 1016348.505 ops/s
Iteration  19: 1052240.645 ops/s
Iteration  20: 1015971.324 ops/s
Iteration  21: 1018798.593 ops/s
Iteration  22: 1029468.331 ops/s
Iteration  23: 1039470.778 ops/s
Iteration  24: 1035957.762 ops/s
Iteration  25: 1034992.628 ops/s
Iteration  26: 984674.578 ops/s
Iteration  27: 943264.704 ops/s
Iteration  28: 960520.380 ops/s
Iteration  29: 1047549.878 ops/s
Iteration  30: 1052584.867 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_drop_throws":
  1006102.980 ±(99.9%) 28995.303 ops/s [Average]
  (min, avg, max) = (935471.636, 1006102.980, 1052584.867), stdev = 43398.807
  CI (99.9%): [977107.677, 1035098.283] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_drop_throws  thrpt   30  1006102.980 ± 28995.303  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_each$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_each

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11472333.477 ops/s
# Warmup Iteration   2: 24823318.073 ops/s
# Warmup Iteration   3: 24372790.479 ops/s
# Warmup Iteration   4: 20811147.852 ops/s
# Warmup Iteration   5: 26046247.652 ops/s
# Warmup Iteration   6: 26328382.007 ops/s
# Warmup Iteration   7: 24666930.787 ops/s
# Warmup Iteration   8: 24207280.922 ops/s
# Warmup Iteration   9: 24553057.239 ops/s
# Warmup Iteration  10: 25884934.088 ops/s
# Warmup Iteration  11: 23728599.496 ops/s
# Warmup Iteration  12: 24574719.963 ops/s
# Warmup Iteration  13: 26764934.388 ops/s
# Warmup Iteration  14: 26334635.487 ops/s
# Warmup Iteration  15: 26485661.366 ops/s
# Warmup Iteration  16: 23882912.839 ops/s
# Warmup Iteration  17: 26479722.687 ops/s
# Warmup Iteration  18: 26113009.552 ops/s
# Warmup Iteration  19: 25061983.368 ops/s
# Warmup Iteration  20: 25426276.145 ops/s
# Warmup Iteration  21: 24381556.785 ops/s
# Warmup Iteration  22: 25760630.908 ops/s
# Warmup Iteration  23: 25832044.662 ops/s
# Warmup Iteration  24: 25108526.492 ops/s
# Warmup Iteration  25: 25845784.307 ops/s
# Warmup Iteration  26: 23940196.510 ops/s
# Warmup Iteration  27: 24415333.465 ops/s
# Warmup Iteration  28: 25285070.374 ops/s
# Warmup Iteration  29: 26738252.443 ops/s
# Warmup Iteration  30: 25216034.176 ops/s
Iteration   1: 25745812.649 ops/s
Iteration   2: 26205586.640 ops/s
Iteration   3: 24887918.149 ops/s
Iteration   4: 24506395.708 ops/s
Iteration   5: 24053541.726 ops/s
Iteration   6: 26384768.220 ops/s
Iteration   7: 26700414.961 ops/s
Iteration   8: 26717472.783 ops/s
Iteration   9: 26441923.748 ops/s
Iteration  10: 26710269.471 ops/s
Iteration  11: 26358957.614 ops/s
Iteration  12: 24619722.883 ops/s
Iteration  13: 23900204.453 ops/s
Iteration  14: 24911421.318 ops/s
Iteration  15: 26325263.752 ops/s
Iteration  16: 26797831.136 ops/s
Iteration  17: 26749610.030 ops/s
Iteration  18: 26005329.137 ops/s
Iteration  19: 25272554.857 ops/s
Iteration  20: 25768704.334 ops/s
Iteration  21: 26887998.340 ops/s
Iteration  22: 26122218.663 ops/s
Iteration  23: 23615402.156 ops/s
Iteration  24: 23954645.928 ops/s
Iteration  25: 23372599.118 ops/s
Iteration  26: 25853443.104 ops/s
Iteration  27: 27004680.536 ops/s
Iteration  28: 26722508.083 ops/s
Iteration  29: 26618873.367 ops/s
Iteration  30: 25702707.254 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_each":
  25697292.671 ±(99.9%) 740071.457 ops/s [Average]
  (min, avg, max) = (23372599.118, 25697292.671, 27004680.536), stdev = 1107704.201
  CI (99.9%): [24957221.214, 26437364.128] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_each  thrpt   30  25697292.671 ± 740071.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27414.467 ops/s
# Warmup Iteration   2: 32471.232 ops/s
# Warmup Iteration   3: 51753.005 ops/s
# Warmup Iteration   4: 50099.195 ops/s
# Warmup Iteration   5: 49994.407 ops/s
# Warmup Iteration   6: 50601.966 ops/s
# Warmup Iteration   7: 52713.271 ops/s
# Warmup Iteration   8: 49657.123 ops/s
# Warmup Iteration   9: 49177.077 ops/s
# Warmup Iteration  10: 47019.168 ops/s
# Warmup Iteration  11: 49445.136 ops/s
# Warmup Iteration  12: 52668.279 ops/s
# Warmup Iteration  13: 47984.833 ops/s
# Warmup Iteration  14: 49658.646 ops/s
# Warmup Iteration  15: 51852.027 ops/s
# Warmup Iteration  16: 50717.225 ops/s
# Warmup Iteration  17: 51318.436 ops/s
# Warmup Iteration  18: 52509.777 ops/s
# Warmup Iteration  19: 51326.100 ops/s
# Warmup Iteration  20: 52817.784 ops/s
# Warmup Iteration  21: 53288.749 ops/s
# Warmup Iteration  22: 53240.862 ops/s
# Warmup Iteration  23: 53225.850 ops/s
# Warmup Iteration  24: 53155.969 ops/s
# Warmup Iteration  25: 52961.782 ops/s
# Warmup Iteration  26: 52975.130 ops/s
# Warmup Iteration  27: 53121.780 ops/s
# Warmup Iteration  28: 53159.675 ops/s
# Warmup Iteration  29: 53214.166 ops/s
# Warmup Iteration  30: 53213.842 ops/s
Iteration   1: 53168.229 ops/s
Iteration   2: 53309.162 ops/s
Iteration   3: 53237.333 ops/s
Iteration   4: 53230.593 ops/s
Iteration   5: 53061.659 ops/s
Iteration   6: 53046.199 ops/s
Iteration   7: 53041.752 ops/s
Iteration   8: 53349.242 ops/s
Iteration   9: 53311.598 ops/s
Iteration  10: 53181.820 ops/s
Iteration  11: 53322.063 ops/s
Iteration  12: 53281.439 ops/s
Iteration  13: 53175.266 ops/s
Iteration  14: 53047.628 ops/s
Iteration  15: 52704.929 ops/s
Iteration  16: 53016.806 ops/s
Iteration  17: 52953.691 ops/s
Iteration  18: 53067.407 ops/s
Iteration  19: 52873.160 ops/s
Iteration  20: 52933.688 ops/s
Iteration  21: 53053.645 ops/s
Iteration  22: 52916.975 ops/s
Iteration  23: 52767.177 ops/s
Iteration  24: 53047.693 ops/s
Iteration  25: 52995.980 ops/s
Iteration  26: 52943.474 ops/s
Iteration  27: 53049.247 ops/s
Iteration  28: 52797.287 ops/s
Iteration  29: 52831.271 ops/s
Iteration  30: 52861.839 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_equalsAndHashCode":
  53052.608 ±(99.9%) 117.773 ops/s [Average]
  (min, avg, max) = (52704.929, 53052.608, 53349.242), stdev = 176.277
  CI (99.9%): [52934.835, 53170.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  53052.608 ± 117.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 764044.923 ops/s
# Warmup Iteration   2: 1796022.213 ops/s
# Warmup Iteration   3: 1809121.253 ops/s
# Warmup Iteration   4: 1511353.566 ops/s
# Warmup Iteration   5: 1808288.714 ops/s
# Warmup Iteration   6: 1804822.537 ops/s
# Warmup Iteration   7: 1808837.607 ops/s
# Warmup Iteration   8: 1806417.568 ops/s
# Warmup Iteration   9: 1806901.400 ops/s
# Warmup Iteration  10: 1808392.693 ops/s
# Warmup Iteration  11: 1806615.579 ops/s
# Warmup Iteration  12: 1803896.859 ops/s
# Warmup Iteration  13: 1810684.279 ops/s
# Warmup Iteration  14: 1795950.778 ops/s
# Warmup Iteration  15: 1796201.856 ops/s
# Warmup Iteration  16: 1803331.282 ops/s
# Warmup Iteration  17: 1807126.070 ops/s
# Warmup Iteration  18: 1799684.589 ops/s
# Warmup Iteration  19: 1812709.298 ops/s
# Warmup Iteration  20: 1807788.939 ops/s
# Warmup Iteration  21: 1808594.251 ops/s
# Warmup Iteration  22: 1802960.132 ops/s
# Warmup Iteration  23: 1806700.802 ops/s
# Warmup Iteration  24: 1804162.120 ops/s
# Warmup Iteration  25: 1803640.960 ops/s
# Warmup Iteration  26: 1794357.880 ops/s
# Warmup Iteration  27: 1803803.570 ops/s
# Warmup Iteration  28: 1799765.768 ops/s
# Warmup Iteration  29: 1806776.393 ops/s
# Warmup Iteration  30: 1796292.551 ops/s
Iteration   1: 1797957.931 ops/s
Iteration   2: 1805650.981 ops/s
Iteration   3: 1805387.130 ops/s
Iteration   4: 1807255.488 ops/s
Iteration   5: 1810904.531 ops/s
Iteration   6: 1808143.003 ops/s
Iteration   7: 1808598.450 ops/s
Iteration   8: 1800976.330 ops/s
Iteration   9: 1798812.013 ops/s
Iteration  10: 1800350.703 ops/s
Iteration  11: 1800973.342 ops/s
Iteration  12: 1810637.729 ops/s
Iteration  13: 1814263.433 ops/s
Iteration  14: 1808071.928 ops/s
Iteration  15: 1804199.481 ops/s
Iteration  16: 1808044.568 ops/s
Iteration  17: 1810992.714 ops/s
Iteration  18: 1811412.221 ops/s
Iteration  19: 1808178.901 ops/s
Iteration  20: 1808791.443 ops/s
Iteration  21: 1799399.693 ops/s
Iteration  22: 1719788.090 ops/s
Iteration  23: 1751142.155 ops/s
Iteration  24: 1807470.631 ops/s
Iteration  25: 1808487.762 ops/s
Iteration  26: 1777065.251 ops/s
Iteration  27: 1732498.116 ops/s
Iteration  28: 1774044.822 ops/s
Iteration  29: 1763036.076 ops/s
Iteration  30: 1804765.206 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_flatCollect":
  1795576.671 ±(99.9%) 16055.441 ops/s [Average]
  (min, avg, max) = (1719788.090, 1795576.671, 1814263.433), stdev = 24031.031
  CI (99.9%): [1779521.229, 1811632.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_flatCollect  thrpt   30  1795576.671 ± 16055.441  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 745531.117 ops/s
# Warmup Iteration   2: 1918602.415 ops/s
# Warmup Iteration   3: 1934414.150 ops/s
# Warmup Iteration   4: 1580581.843 ops/s
# Warmup Iteration   5: 1874570.116 ops/s
# Warmup Iteration   6: 1939612.121 ops/s
# Warmup Iteration   7: 1840314.987 ops/s
# Warmup Iteration   8: 1927132.134 ops/s
# Warmup Iteration   9: 1850521.128 ops/s
# Warmup Iteration  10: 1873298.001 ops/s
# Warmup Iteration  11: 1839253.230 ops/s
# Warmup Iteration  12: 1832079.262 ops/s
# Warmup Iteration  13: 1913131.443 ops/s
# Warmup Iteration  14: 1795855.888 ops/s
# Warmup Iteration  15: 1910705.635 ops/s
# Warmup Iteration  16: 1874443.574 ops/s
# Warmup Iteration  17: 1804867.104 ops/s
# Warmup Iteration  18: 1798743.450 ops/s
# Warmup Iteration  19: 1772421.579 ops/s
# Warmup Iteration  20: 1943822.439 ops/s
# Warmup Iteration  21: 1829663.142 ops/s
# Warmup Iteration  22: 1815264.951 ops/s
# Warmup Iteration  23: 1905351.655 ops/s
# Warmup Iteration  24: 1833729.094 ops/s
# Warmup Iteration  25: 1911488.121 ops/s
# Warmup Iteration  26: 1922347.393 ops/s
# Warmup Iteration  27: 1913860.987 ops/s
# Warmup Iteration  28: 1794020.289 ops/s
# Warmup Iteration  29: 1845871.807 ops/s
# Warmup Iteration  30: 1922155.931 ops/s
Iteration   1: 1895316.772 ops/s
Iteration   2: 1896772.111 ops/s
Iteration   3: 1941389.298 ops/s
Iteration   4: 1935298.861 ops/s
Iteration   5: 1898348.575 ops/s
Iteration   6: 1925514.403 ops/s
Iteration   7: 1935431.258 ops/s
Iteration   8: 1812975.226 ops/s
Iteration   9: 1838010.183 ops/s
Iteration  10: 1795293.288 ops/s
Iteration  11: 1853187.319 ops/s
Iteration  12: 1917845.604 ops/s
Iteration  13: 1894057.136 ops/s
Iteration  14: 1821063.916 ops/s
Iteration  15: 1925124.498 ops/s
Iteration  16: 1933910.122 ops/s
Iteration  17: 1918184.390 ops/s
Iteration  18: 1929440.818 ops/s
Iteration  19: 1945848.063 ops/s
Iteration  20: 1844584.268 ops/s
Iteration  21: 1763038.852 ops/s
Iteration  22: 1850738.957 ops/s
Iteration  23: 1871264.896 ops/s
Iteration  24: 1922218.131 ops/s
Iteration  25: 1866839.596 ops/s
Iteration  26: 1938836.310 ops/s
Iteration  27: 1801255.413 ops/s
Iteration  28: 1856260.033 ops/s
Iteration  29: 1948127.236 ops/s
Iteration  30: 1935664.562 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_flatCollectWith":
  1887061.337 ±(99.9%) 34992.072 ops/s [Average]
  (min, avg, max) = (1763038.852, 1887061.337, 1948127.236), stdev = 52374.490
  CI (99.9%): [1852069.264, 1922053.409] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  1887061.337 ± 34992.072  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1018452.648 ops/s
# Warmup Iteration   2: 2622923.461 ops/s
# Warmup Iteration   3: 2514402.354 ops/s
# Warmup Iteration   4: 2115034.013 ops/s
# Warmup Iteration   5: 2627399.751 ops/s
# Warmup Iteration   6: 2515153.833 ops/s
# Warmup Iteration   7: 2726728.392 ops/s
# Warmup Iteration   8: 2583067.062 ops/s
# Warmup Iteration   9: 2659652.997 ops/s
# Warmup Iteration  10: 2697997.859 ops/s
# Warmup Iteration  11: 2644142.689 ops/s
# Warmup Iteration  12: 2566998.586 ops/s
# Warmup Iteration  13: 2724851.999 ops/s
# Warmup Iteration  14: 2698964.253 ops/s
# Warmup Iteration  15: 2712142.605 ops/s
# Warmup Iteration  16: 2540184.035 ops/s
# Warmup Iteration  17: 2702864.424 ops/s
# Warmup Iteration  18: 2717195.145 ops/s
# Warmup Iteration  19: 2741376.307 ops/s
# Warmup Iteration  20: 2741912.593 ops/s
# Warmup Iteration  21: 2738568.729 ops/s
# Warmup Iteration  22: 2725599.228 ops/s
# Warmup Iteration  23: 2727262.569 ops/s
# Warmup Iteration  24: 2740484.445 ops/s
# Warmup Iteration  25: 2741686.590 ops/s
# Warmup Iteration  26: 2734457.217 ops/s
# Warmup Iteration  27: 2620572.588 ops/s
# Warmup Iteration  28: 2670650.585 ops/s
# Warmup Iteration  29: 2659413.486 ops/s
# Warmup Iteration  30: 2575428.316 ops/s
Iteration   1: 2485077.849 ops/s
Iteration   2: 2593857.282 ops/s
Iteration   3: 2718309.620 ops/s
Iteration   4: 2736961.577 ops/s
Iteration   5: 2609189.990 ops/s
Iteration   6: 2670841.336 ops/s
Iteration   7: 2706869.119 ops/s
Iteration   8: 2545700.901 ops/s
Iteration   9: 2585556.904 ops/s
Iteration  10: 2625178.464 ops/s
Iteration  11: 2720593.058 ops/s
Iteration  12: 2711227.444 ops/s
Iteration  13: 2630909.233 ops/s
Iteration  14: 2659043.191 ops/s
Iteration  15: 2467388.631 ops/s
Iteration  16: 2677866.136 ops/s
Iteration  17: 2728861.094 ops/s
Iteration  18: 2678822.337 ops/s
Iteration  19: 2585461.937 ops/s
Iteration  20: 2690821.357 ops/s
Iteration  21: 2704245.454 ops/s
Iteration  22: 2588023.891 ops/s
Iteration  23: 2570612.217 ops/s
Iteration  24: 2590259.359 ops/s
Iteration  25: 2725509.622 ops/s
Iteration  26: 2733325.848 ops/s
Iteration  27: 2566716.945 ops/s
Iteration  28: 2504508.926 ops/s
Iteration  29: 2501789.642 ops/s
Iteration  30: 2584497.720 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_flatCollectWithTarget":
  2629934.236 ±(99.9%) 54267.209 ops/s [Average]
  (min, avg, max) = (2467388.631, 2629934.236, 2736961.577), stdev = 81224.609
  CI (99.9%): [2575667.028, 2684201.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  2629934.236 ± 54267.209  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6163980.760 ops/s
# Warmup Iteration   2: 11749265.955 ops/s
# Warmup Iteration   3: 12262033.281 ops/s
# Warmup Iteration   4: 12022460.159 ops/s
# Warmup Iteration   5: 10226713.417 ops/s
# Warmup Iteration   6: 12888567.409 ops/s
# Warmup Iteration   7: 12766916.343 ops/s
# Warmup Iteration   8: 12205938.813 ops/s
# Warmup Iteration   9: 12174357.516 ops/s
# Warmup Iteration  10: 12938412.407 ops/s
# Warmup Iteration  11: 12394797.761 ops/s
# Warmup Iteration  12: 12956098.341 ops/s
# Warmup Iteration  13: 12693814.084 ops/s
# Warmup Iteration  14: 11980816.378 ops/s
# Warmup Iteration  15: 12798755.559 ops/s
# Warmup Iteration  16: 12997127.433 ops/s
# Warmup Iteration  17: 12752326.067 ops/s
# Warmup Iteration  18: 12411218.988 ops/s
# Warmup Iteration  19: 12254289.285 ops/s
# Warmup Iteration  20: 12751164.929 ops/s
# Warmup Iteration  21: 11756493.168 ops/s
# Warmup Iteration  22: 12977030.515 ops/s
# Warmup Iteration  23: 12583964.246 ops/s
# Warmup Iteration  24: 12451237.180 ops/s
# Warmup Iteration  25: 12779401.737 ops/s
# Warmup Iteration  26: 11902622.532 ops/s
# Warmup Iteration  27: 12512885.118 ops/s
# Warmup Iteration  28: 12797565.664 ops/s
# Warmup Iteration  29: 12887939.621 ops/s
# Warmup Iteration  30: 12352683.132 ops/s
Iteration   1: 12839189.893 ops/s
Iteration   2: 12974624.147 ops/s
Iteration   3: 12997994.282 ops/s
Iteration   4: 12931499.445 ops/s
Iteration   5: 12965495.172 ops/s
Iteration   6: 13029463.827 ops/s
Iteration   7: 13011544.989 ops/s
Iteration   8: 12998226.301 ops/s
Iteration   9: 13029855.303 ops/s
Iteration  10: 13035383.681 ops/s
Iteration  11: 12912999.050 ops/s
Iteration  12: 12855070.814 ops/s
Iteration  13: 12407216.114 ops/s
Iteration  14: 12846216.388 ops/s
Iteration  15: 12852841.143 ops/s
Iteration  16: 13005940.874 ops/s
Iteration  17: 13005127.245 ops/s
Iteration  18: 12914545.841 ops/s
Iteration  19: 12684849.909 ops/s
Iteration  20: 12111431.672 ops/s
Iteration  21: 12066832.921 ops/s
Iteration  22: 13012070.967 ops/s
Iteration  23: 12289109.553 ops/s
Iteration  24: 12452222.523 ops/s
Iteration  25: 13026665.801 ops/s
Iteration  26: 12977867.003 ops/s
Iteration  27: 12244381.952 ops/s
Iteration  28: 12546236.586 ops/s
Iteration  29: 12999642.363 ops/s
Iteration  30: 12958174.134 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEach":
  12799423.996 ±(99.9%) 200292.041 ops/s [Average]
  (min, avg, max) = (12066832.921, 12799423.996, 13035383.681), stdev = 299787.720
  CI (99.9%): [12599131.956, 12999716.037] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_forEach  thrpt   30  12799423.996 ± 200292.041  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 288519.136 ops/s
# Warmup Iteration   2: 308964.150 ops/s
# Warmup Iteration   3: 360372.931 ops/s
# Warmup Iteration   4: 385360.101 ops/s
# Warmup Iteration   5: 369613.340 ops/s
# Warmup Iteration   6: 358817.104 ops/s
# Warmup Iteration   7: 363006.111 ops/s
# Warmup Iteration   8: 351294.950 ops/s
# Warmup Iteration   9: 384785.258 ops/s
# Warmup Iteration  10: 384204.469 ops/s
# Warmup Iteration  11: 384054.085 ops/s
# Warmup Iteration  12: 385517.362 ops/s
# Warmup Iteration  13: 374464.799 ops/s
# Warmup Iteration  14: 349257.494 ops/s
# Warmup Iteration  15: 361181.440 ops/s
# Warmup Iteration  16: 371788.116 ops/s
# Warmup Iteration  17: 390259.884 ops/s
# Warmup Iteration  18: 396405.068 ops/s
# Warmup Iteration  19: 386892.968 ops/s
# Warmup Iteration  20: 378871.270 ops/s
# Warmup Iteration  21: 402977.769 ops/s
# Warmup Iteration  22: 378822.656 ops/s
# Warmup Iteration  23: 401342.465 ops/s
# Warmup Iteration  24: 373409.258 ops/s
# Warmup Iteration  25: 403510.847 ops/s
# Warmup Iteration  26: 370650.730 ops/s
# Warmup Iteration  27: 391115.887 ops/s
# Warmup Iteration  28: 381992.991 ops/s
# Warmup Iteration  29: 400053.811 ops/s
# Warmup Iteration  30: 397479.947 ops/s
Iteration   1: 397332.856 ops/s
Iteration   2: 376620.552 ops/s
Iteration   3: 376598.913 ops/s
Iteration   4: 367898.405 ops/s
Iteration   5: 377337.567 ops/s
Iteration   6: 401164.186 ops/s
Iteration   7: 400102.495 ops/s
Iteration   8: 371793.070 ops/s
Iteration   9: 365784.883 ops/s
Iteration  10: 391316.666 ops/s
Iteration  11: 403329.453 ops/s
Iteration  12: 403859.550 ops/s
Iteration  13: 388896.344 ops/s
Iteration  14: 365938.341 ops/s
Iteration  15: 389525.487 ops/s
Iteration  16: 397846.254 ops/s
Iteration  17: 389263.466 ops/s
Iteration  18: 372580.858 ops/s
Iteration  19: 373226.464 ops/s
Iteration  20: 367008.797 ops/s
Iteration  21: 375466.742 ops/s
Iteration  22: 374669.418 ops/s
Iteration  23: 370068.231 ops/s
Iteration  24: 366157.419 ops/s
Iteration  25: 401332.423 ops/s
Iteration  26: 402359.414 ops/s
Iteration  27: 384259.591 ops/s
Iteration  28: 386160.512 ops/s
Iteration  29: 382753.676 ops/s
Iteration  30: 381389.908 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEachFromTo":
  383401.398 ±(99.9%) 8679.607 ops/s [Average]
  (min, avg, max) = (365784.883, 383401.398, 403859.550), stdev = 12991.228
  CI (99.9%): [374721.791, 392081.005] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  383401.398 ± 8679.607  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4548361.609 ops/s
# Warmup Iteration   2: 7848831.424 ops/s
# Warmup Iteration   3: 8771505.821 ops/s
# Warmup Iteration   4: 8315778.326 ops/s
# Warmup Iteration   5: 7427355.475 ops/s
# Warmup Iteration   6: 8504950.854 ops/s
# Warmup Iteration   7: 8579814.882 ops/s
# Warmup Iteration   8: 8426851.049 ops/s
# Warmup Iteration   9: 8806462.872 ops/s
# Warmup Iteration  10: 8300116.693 ops/s
# Warmup Iteration  11: 8501434.182 ops/s
# Warmup Iteration  12: 8998037.503 ops/s
# Warmup Iteration  13: 8758736.828 ops/s
# Warmup Iteration  14: 8906423.517 ops/s
# Warmup Iteration  15: 8386889.449 ops/s
# Warmup Iteration  16: 8468520.008 ops/s
# Warmup Iteration  17: 8566593.156 ops/s
# Warmup Iteration  18: 8841798.291 ops/s
# Warmup Iteration  19: 8409360.280 ops/s
# Warmup Iteration  20: 8759866.473 ops/s
# Warmup Iteration  21: 8806267.438 ops/s
# Warmup Iteration  22: 8883045.045 ops/s
# Warmup Iteration  23: 8175022.209 ops/s
# Warmup Iteration  24: 8968140.156 ops/s
# Warmup Iteration  25: 8611533.636 ops/s
# Warmup Iteration  26: 8885266.178 ops/s
# Warmup Iteration  27: 8745830.704 ops/s
# Warmup Iteration  28: 8945785.831 ops/s
# Warmup Iteration  29: 8580897.901 ops/s
# Warmup Iteration  30: 8719101.513 ops/s
Iteration   1: 8524842.911 ops/s
Iteration   2: 8787942.620 ops/s
Iteration   3: 8849517.989 ops/s
Iteration   4: 8548206.322 ops/s
Iteration   5: 8192057.705 ops/s
Iteration   6: 8493291.761 ops/s
Iteration   7: 8931254.624 ops/s
Iteration   8: 8829038.691 ops/s
Iteration   9: 8720892.393 ops/s
Iteration  10: 8989067.581 ops/s
Iteration  11: 9015024.246 ops/s
Iteration  12: 8981258.607 ops/s
Iteration  13: 8926937.670 ops/s
Iteration  14: 8905422.093 ops/s
Iteration  15: 8805928.490 ops/s
Iteration  16: 8364206.616 ops/s
Iteration  17: 8059867.571 ops/s
Iteration  18: 8763031.460 ops/s
Iteration  19: 8752111.080 ops/s
Iteration  20: 8530304.710 ops/s
Iteration  21: 8214316.929 ops/s
Iteration  22: 8764332.367 ops/s
Iteration  23: 9009202.289 ops/s
Iteration  24: 8800163.121 ops/s
Iteration  25: 8942968.739 ops/s
Iteration  26: 8933556.505 ops/s
Iteration  27: 8271150.717 ops/s
Iteration  28: 8786135.569 ops/s
Iteration  29: 9005440.487 ops/s
Iteration  30: 8601665.727 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEachWith":
  8709971.253 ±(99.9%) 181089.180 ops/s [Average]
  (min, avg, max) = (8059867.571, 8709971.253, 9015024.246), stdev = 271045.780
  CI (99.9%): [8528882.073, 8891060.433] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_forEachWith  thrpt   30  8709971.253 ± 181089.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7045945.161 ops/s
# Warmup Iteration   2: 8694233.451 ops/s
# Warmup Iteration   3: 11233547.958 ops/s
# Warmup Iteration   4: 11107001.272 ops/s
# Warmup Iteration   5: 10991568.485 ops/s
# Warmup Iteration   6: 10614364.959 ops/s
# Warmup Iteration   7: 11322450.897 ops/s
# Warmup Iteration   8: 9262615.763 ops/s
# Warmup Iteration   9: 10925229.909 ops/s
# Warmup Iteration  10: 10486184.224 ops/s
# Warmup Iteration  11: 11320405.267 ops/s
# Warmup Iteration  12: 10983427.543 ops/s
# Warmup Iteration  13: 10985444.883 ops/s
# Warmup Iteration  14: 11152050.428 ops/s
# Warmup Iteration  15: 11280070.864 ops/s
# Warmup Iteration  16: 11201515.642 ops/s
# Warmup Iteration  17: 10540649.914 ops/s
# Warmup Iteration  18: 11253840.993 ops/s
# Warmup Iteration  19: 10666756.772 ops/s
# Warmup Iteration  20: 11002191.041 ops/s
# Warmup Iteration  21: 11046170.939 ops/s
# Warmup Iteration  22: 11018333.940 ops/s
# Warmup Iteration  23: 10460036.768 ops/s
# Warmup Iteration  24: 10629155.149 ops/s
# Warmup Iteration  25: 11219066.410 ops/s
# Warmup Iteration  26: 10601041.820 ops/s
# Warmup Iteration  27: 11156880.291 ops/s
# Warmup Iteration  28: 11169138.696 ops/s
# Warmup Iteration  29: 11007553.049 ops/s
# Warmup Iteration  30: 11195048.435 ops/s
Iteration   1: 11327383.012 ops/s
Iteration   2: 10941655.147 ops/s
Iteration   3: 10580338.761 ops/s
Iteration   4: 10595620.324 ops/s
Iteration   5: 10691722.172 ops/s
Iteration   6: 11413326.677 ops/s
Iteration   7: 11361643.236 ops/s
Iteration   8: 11148956.223 ops/s
Iteration   9: 11079563.047 ops/s
Iteration  10: 10919749.551 ops/s
Iteration  11: 10395062.282 ops/s
Iteration  12: 10885949.572 ops/s
Iteration  13: 10897362.279 ops/s
Iteration  14: 11242943.578 ops/s
Iteration  15: 11061839.974 ops/s
Iteration  16: 10681442.320 ops/s
Iteration  17: 10306349.180 ops/s
Iteration  18: 11117311.509 ops/s
Iteration  19: 11201942.369 ops/s
Iteration  20: 11237141.794 ops/s
Iteration  21: 10716719.580 ops/s
Iteration  22: 10539993.489 ops/s
Iteration  23: 10902646.574 ops/s
Iteration  24: 10639690.815 ops/s
Iteration  25: 10173356.078 ops/s
Iteration  26: 10344042.172 ops/s
Iteration  27: 11368730.164 ops/s
Iteration  28: 11426155.446 ops/s
Iteration  29: 10986229.307 ops/s
Iteration  30: 10815798.314 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEachWithIndex":
  10900022.165 ±(99.9%) 236187.046 ops/s [Average]
  (min, avg, max) = (10173356.078, 10900022.165, 11426155.446), stdev = 353513.678
  CI (99.9%): [10663835.119, 11136209.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  10900022.165 ± 236187.046  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 261270.355 ops/s
# Warmup Iteration   2: 302363.752 ops/s
# Warmup Iteration   3: 321202.640 ops/s
# Warmup Iteration   4: 377054.938 ops/s
# Warmup Iteration   5: 371969.313 ops/s
# Warmup Iteration   6: 372161.240 ops/s
# Warmup Iteration   7: 354409.664 ops/s
# Warmup Iteration   8: 373269.869 ops/s
# Warmup Iteration   9: 373789.998 ops/s
# Warmup Iteration  10: 359291.273 ops/s
# Warmup Iteration  11: 375777.234 ops/s
# Warmup Iteration  12: 345827.950 ops/s
# Warmup Iteration  13: 382635.364 ops/s
# Warmup Iteration  14: 340444.021 ops/s
# Warmup Iteration  15: 342529.243 ops/s
# Warmup Iteration  16: 361061.474 ops/s
# Warmup Iteration  17: 402197.402 ops/s
# Warmup Iteration  18: 362129.350 ops/s
# Warmup Iteration  19: 394878.278 ops/s
# Warmup Iteration  20: 380557.084 ops/s
# Warmup Iteration  21: 391334.313 ops/s
# Warmup Iteration  22: 387310.403 ops/s
# Warmup Iteration  23: 390176.699 ops/s
# Warmup Iteration  24: 384568.677 ops/s
# Warmup Iteration  25: 390414.533 ops/s
# Warmup Iteration  26: 399658.577 ops/s
# Warmup Iteration  27: 369631.693 ops/s
# Warmup Iteration  28: 393940.969 ops/s
# Warmup Iteration  29: 387083.231 ops/s
# Warmup Iteration  30: 399933.413 ops/s
Iteration   1: 390723.885 ops/s
Iteration   2: 388248.398 ops/s
Iteration   3: 369666.498 ops/s
Iteration   4: 364325.680 ops/s
Iteration   5: 382483.532 ops/s
Iteration   6: 373328.951 ops/s
Iteration   7: 397451.074 ops/s
Iteration   8: 390873.009 ops/s
Iteration   9: 404217.337 ops/s
Iteration  10: 396137.311 ops/s
Iteration  11: 379734.612 ops/s
Iteration  12: 373528.430 ops/s
Iteration  13: 372200.887 ops/s
Iteration  14: 369370.171 ops/s
Iteration  15: 385849.725 ops/s
Iteration  16: 371396.278 ops/s
Iteration  17: 385289.620 ops/s
Iteration  18: 403838.220 ops/s
Iteration  19: 399816.122 ops/s
Iteration  20: 385591.489 ops/s
Iteration  21: 369544.597 ops/s
Iteration  22: 374998.296 ops/s
Iteration  23: 365796.253 ops/s
Iteration  24: 380027.220 ops/s
Iteration  25: 375723.892 ops/s
Iteration  26: 395076.897 ops/s
Iteration  27: 402160.689 ops/s
Iteration  28: 401055.290 ops/s
Iteration  29: 383073.142 ops/s
Iteration  30: 375627.179 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo":
  383571.823 ±(99.9%) 8193.914 ops/s [Average]
  (min, avg, max) = (364325.680, 383571.823, 404217.337), stdev = 12264.266
  CI (99.9%): [375377.908, 391765.737] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo  thrpt   30  383571.823 ± 8193.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24647841.469 ops/s
# Warmup Iteration   2: 42788169.507 ops/s
# Warmup Iteration   3: 42424972.921 ops/s
# Warmup Iteration   4: 33509925.769 ops/s
# Warmup Iteration   5: 41300547.354 ops/s
# Warmup Iteration   6: 42133390.658 ops/s
# Warmup Iteration   7: 40422090.268 ops/s
# Warmup Iteration   8: 43468562.670 ops/s
# Warmup Iteration   9: 41652001.940 ops/s
# Warmup Iteration  10: 43101742.121 ops/s
# Warmup Iteration  11: 41531757.290 ops/s
# Warmup Iteration  12: 43058556.972 ops/s
# Warmup Iteration  13: 42245030.769 ops/s
# Warmup Iteration  14: 41441246.099 ops/s
# Warmup Iteration  15: 42986926.444 ops/s
# Warmup Iteration  16: 42209376.702 ops/s
# Warmup Iteration  17: 42229111.845 ops/s
# Warmup Iteration  18: 41402203.688 ops/s
# Warmup Iteration  19: 42493324.632 ops/s
# Warmup Iteration  20: 41307768.903 ops/s
# Warmup Iteration  21: 43090329.860 ops/s
# Warmup Iteration  22: 42105845.438 ops/s
# Warmup Iteration  23: 41770372.554 ops/s
# Warmup Iteration  24: 41172060.424 ops/s
# Warmup Iteration  25: 43555959.728 ops/s
# Warmup Iteration  26: 43578154.125 ops/s
# Warmup Iteration  27: 43560408.847 ops/s
# Warmup Iteration  28: 43616921.297 ops/s
# Warmup Iteration  29: 43597414.110 ops/s
# Warmup Iteration  30: 43621906.343 ops/s
Iteration   1: 43644798.360 ops/s
Iteration   2: 43639245.172 ops/s
Iteration   3: 43599347.387 ops/s
Iteration   4: 43591537.174 ops/s
Iteration   5: 43649313.791 ops/s
Iteration   6: 43555010.880 ops/s
Iteration   7: 43541487.917 ops/s
Iteration   8: 43499855.859 ops/s
Iteration   9: 43488539.355 ops/s
Iteration  10: 43546352.177 ops/s
Iteration  11: 43639757.814 ops/s
Iteration  12: 43542861.130 ops/s
Iteration  13: 43503319.511 ops/s
Iteration  14: 43483159.539 ops/s
Iteration  15: 43506181.932 ops/s
Iteration  16: 43601659.918 ops/s
Iteration  17: 43545936.400 ops/s
Iteration  18: 43463132.330 ops/s
Iteration  19: 43586424.210 ops/s
Iteration  20: 43342350.775 ops/s
Iteration  21: 40407389.072 ops/s
Iteration  22: 43280410.596 ops/s
Iteration  23: 43516921.958 ops/s
Iteration  24: 43259203.713 ops/s
Iteration  25: 43059430.471 ops/s
Iteration  26: 41551905.041 ops/s
Iteration  27: 42844345.774 ops/s
Iteration  28: 42406544.548 ops/s
Iteration  29: 41867241.634 ops/s
Iteration  30: 39627444.134 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_forLoop":
  43093036.952 ±(99.9%) 658075.824 ops/s [Average]
  (min, avg, max) = (39627444.134, 43093036.952, 43649313.791), stdev = 984976.989
  CI (99.9%): [42434961.128, 43751112.777] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_forLoop  thrpt   30  43093036.952 ± 658075.824  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 368535.941 ops/s
# Warmup Iteration   2: 376321.845 ops/s
# Warmup Iteration   3: 431617.674 ops/s
# Warmup Iteration   4: 460675.142 ops/s
# Warmup Iteration   5: 473998.684 ops/s
# Warmup Iteration   6: 466394.144 ops/s
# Warmup Iteration   7: 453994.618 ops/s
# Warmup Iteration   8: 459845.979 ops/s
# Warmup Iteration   9: 479546.611 ops/s
# Warmup Iteration  10: 478507.577 ops/s
# Warmup Iteration  11: 479044.595 ops/s
# Warmup Iteration  12: 480388.075 ops/s
# Warmup Iteration  13: 445124.827 ops/s
# Warmup Iteration  14: 444071.480 ops/s
# Warmup Iteration  15: 475174.984 ops/s
# Warmup Iteration  16: 456775.169 ops/s
# Warmup Iteration  17: 494422.023 ops/s
# Warmup Iteration  18: 495637.275 ops/s
# Warmup Iteration  19: 495433.789 ops/s
# Warmup Iteration  20: 499775.510 ops/s
# Warmup Iteration  21: 469677.098 ops/s
# Warmup Iteration  22: 500193.549 ops/s
# Warmup Iteration  23: 472712.312 ops/s
# Warmup Iteration  24: 504656.927 ops/s
# Warmup Iteration  25: 501070.909 ops/s
# Warmup Iteration  26: 495959.912 ops/s
# Warmup Iteration  27: 496456.493 ops/s
# Warmup Iteration  28: 502546.514 ops/s
# Warmup Iteration  29: 499412.867 ops/s
# Warmup Iteration  30: 487684.111 ops/s
Iteration   1: 465487.757 ops/s
Iteration   2: 486251.516 ops/s
Iteration   3: 499276.824 ops/s
Iteration   4: 492892.115 ops/s
Iteration   5: 475973.754 ops/s
Iteration   6: 502806.947 ops/s
Iteration   7: 506894.808 ops/s
Iteration   8: 475706.947 ops/s
Iteration   9: 498651.486 ops/s
Iteration  10: 492707.515 ops/s
Iteration  11: 469853.489 ops/s
Iteration  12: 490719.706 ops/s
Iteration  13: 496079.973 ops/s
Iteration  14: 474317.893 ops/s
Iteration  15: 457627.768 ops/s
Iteration  16: 471422.400 ops/s
Iteration  17: 505074.559 ops/s
Iteration  18: 505824.993 ops/s
Iteration  19: 499844.851 ops/s
Iteration  20: 499046.675 ops/s
Iteration  21: 467259.606 ops/s
Iteration  22: 462010.800 ops/s
Iteration  23: 497320.438 ops/s
Iteration  24: 503221.285 ops/s
Iteration  25: 482232.978 ops/s
Iteration  26: 502990.413 ops/s
Iteration  27: 506208.125 ops/s
Iteration  28: 505987.070 ops/s
Iteration  29: 497257.273 ops/s
Iteration  30: 481173.267 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_get":
  489070.774 ±(99.9%) 10201.890 ops/s [Average]
  (min, avg, max) = (457627.768, 489070.774, 506894.808), stdev = 15269.710
  CI (99.9%): [478868.884, 499272.664] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_get  thrpt   30  489070.774 ± 10201.890  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33375691.868 ops/s
# Warmup Iteration   2: 67607829.658 ops/s
# Warmup Iteration   3: 58042591.605 ops/s
# Warmup Iteration   4: 67638688.738 ops/s
# Warmup Iteration   5: 68238617.746 ops/s
# Warmup Iteration   6: 68780299.370 ops/s
# Warmup Iteration   7: 67384067.190 ops/s
# Warmup Iteration   8: 64997232.661 ops/s
# Warmup Iteration   9: 68985945.151 ops/s
# Warmup Iteration  10: 67950948.662 ops/s
# Warmup Iteration  11: 65596832.165 ops/s
# Warmup Iteration  12: 68638175.854 ops/s
# Warmup Iteration  13: 69427250.643 ops/s
# Warmup Iteration  14: 69526773.110 ops/s
# Warmup Iteration  15: 69743394.365 ops/s
# Warmup Iteration  16: 69853291.600 ops/s
# Warmup Iteration  17: 69400787.568 ops/s
# Warmup Iteration  18: 69383928.601 ops/s
# Warmup Iteration  19: 69491960.662 ops/s
# Warmup Iteration  20: 69624490.778 ops/s
# Warmup Iteration  21: 68701999.044 ops/s
# Warmup Iteration  22: 68873933.515 ops/s
# Warmup Iteration  23: 66583670.781 ops/s
# Warmup Iteration  24: 68048383.446 ops/s
# Warmup Iteration  25: 69516013.340 ops/s
# Warmup Iteration  26: 67485977.114 ops/s
# Warmup Iteration  27: 69287176.242 ops/s
# Warmup Iteration  28: 67003155.972 ops/s
# Warmup Iteration  29: 67974663.848 ops/s
# Warmup Iteration  30: 68163009.574 ops/s
Iteration   1: 64992795.088 ops/s
Iteration   2: 68651913.262 ops/s
Iteration   3: 68993930.781 ops/s
Iteration   4: 67597362.134 ops/s
Iteration   5: 68870437.710 ops/s
Iteration   6: 67000514.246 ops/s
Iteration   7: 65266263.357 ops/s
Iteration   8: 64925059.860 ops/s
Iteration   9: 64975884.845 ops/s
Iteration  10: 65391699.618 ops/s
Iteration  11: 66663408.564 ops/s
Iteration  12: 69274149.057 ops/s
Iteration  13: 69219068.510 ops/s
Iteration  14: 67163110.169 ops/s
Iteration  15: 64913573.107 ops/s
Iteration  16: 67061514.548 ops/s
Iteration  17: 69308346.811 ops/s
Iteration  18: 67594317.722 ops/s
Iteration  19: 67035784.709 ops/s
Iteration  20: 69249432.706 ops/s
Iteration  21: 68373390.223 ops/s
Iteration  22: 67127409.240 ops/s
Iteration  23: 68907558.784 ops/s
Iteration  24: 67942982.676 ops/s
Iteration  25: 66843309.238 ops/s
Iteration  26: 69376750.340 ops/s
Iteration  27: 68868199.270 ops/s
Iteration  28: 67487725.162 ops/s
Iteration  29: 63341408.592 ops/s
Iteration  30: 64586135.741 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_getFirst":
  67233447.869 ±(99.9%) 1159388.597 ops/s [Average]
  (min, avg, max) = (63341408.592, 67233447.869, 69376750.340), stdev = 1735318.403
  CI (99.9%): [66074059.272, 68392836.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score         Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_getFirst  thrpt   30  67233447.869 ± 1159388.597  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34552436.171 ops/s
# Warmup Iteration   2: 65910046.793 ops/s
# Warmup Iteration   3: 58252930.235 ops/s
# Warmup Iteration   4: 67428863.489 ops/s
# Warmup Iteration   5: 69221121.193 ops/s
# Warmup Iteration   6: 68016327.389 ops/s
# Warmup Iteration   7: 66383214.772 ops/s
# Warmup Iteration   8: 64716368.632 ops/s
# Warmup Iteration   9: 68794265.040 ops/s
# Warmup Iteration  10: 67598059.945 ops/s
# Warmup Iteration  11: 68903304.183 ops/s
# Warmup Iteration  12: 68358738.384 ops/s
# Warmup Iteration  13: 67987317.540 ops/s
# Warmup Iteration  14: 69391978.615 ops/s
# Warmup Iteration  15: 66152782.783 ops/s
# Warmup Iteration  16: 69395285.403 ops/s
# Warmup Iteration  17: 69315577.215 ops/s
# Warmup Iteration  18: 69926485.344 ops/s
# Warmup Iteration  19: 66961954.372 ops/s
# Warmup Iteration  20: 67720909.163 ops/s
# Warmup Iteration  21: 69104049.398 ops/s
# Warmup Iteration  22: 69818373.896 ops/s
# Warmup Iteration  23: 65957862.156 ops/s
# Warmup Iteration  24: 68083642.527 ops/s
# Warmup Iteration  25: 65842574.066 ops/s
# Warmup Iteration  26: 69596819.332 ops/s
# Warmup Iteration  27: 69226539.158 ops/s
# Warmup Iteration  28: 67557028.784 ops/s
# Warmup Iteration  29: 68081954.462 ops/s
# Warmup Iteration  30: 68460299.305 ops/s
Iteration   1: 68095304.517 ops/s
Iteration   2: 69635699.004 ops/s
Iteration   3: 67340609.583 ops/s
Iteration   4: 64383994.981 ops/s
Iteration   5: 65204748.394 ops/s
Iteration   6: 69656351.762 ops/s
Iteration   7: 69516656.456 ops/s
Iteration   8: 65018910.450 ops/s
Iteration   9: 63404143.813 ops/s
Iteration  10: 67965779.959 ops/s
Iteration  11: 69735150.756 ops/s
Iteration  12: 67598951.562 ops/s
Iteration  13: 66273869.589 ops/s
Iteration  14: 69121421.442 ops/s
Iteration  15: 67461280.110 ops/s
Iteration  16: 65776303.431 ops/s
Iteration  17: 65483768.987 ops/s
Iteration  18: 69843474.681 ops/s
Iteration  19: 70242656.683 ops/s
Iteration  20: 69916847.521 ops/s
Iteration  21: 69094571.579 ops/s
Iteration  22: 69663423.689 ops/s
Iteration  23: 69180868.178 ops/s
Iteration  24: 70031713.472 ops/s
Iteration  25: 69468685.359 ops/s
Iteration  26: 69671464.041 ops/s
Iteration  27: 69538715.488 ops/s
Iteration  28: 69973824.752 ops/s
Iteration  29: 69667567.314 ops/s
Iteration  30: 69412851.860 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_getLast":
  68245986.981 ±(99.9%) 1323510.737 ops/s [Average]
  (min, avg, max) = (63404143.813, 68245986.981, 70242656.683), stdev = 1980968.715
  CI (99.9%): [66922476.243, 69569497.718] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score         Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_getLast  thrpt   30  68245986.981 ± 1323510.737  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 784667.456 ops/s
# Warmup Iteration   2: 812718.880 ops/s
# Warmup Iteration   3: 1060538.117 ops/s
# Warmup Iteration   4: 1056253.542 ops/s
# Warmup Iteration   5: 1049371.625 ops/s
# Warmup Iteration   6: 1062315.938 ops/s
# Warmup Iteration   7: 1061124.180 ops/s
# Warmup Iteration   8: 1069046.651 ops/s
# Warmup Iteration   9: 1067627.496 ops/s
# Warmup Iteration  10: 1060774.598 ops/s
# Warmup Iteration  11: 1033397.467 ops/s
# Warmup Iteration  12: 927608.620 ops/s
# Warmup Iteration  13: 1066384.973 ops/s
# Warmup Iteration  14: 1063222.703 ops/s
# Warmup Iteration  15: 1066359.077 ops/s
# Warmup Iteration  16: 1061089.670 ops/s
# Warmup Iteration  17: 1132939.013 ops/s
# Warmup Iteration  18: 1133981.911 ops/s
# Warmup Iteration  19: 1134059.032 ops/s
# Warmup Iteration  20: 1132090.531 ops/s
# Warmup Iteration  21: 1134764.009 ops/s
# Warmup Iteration  22: 1133905.345 ops/s
# Warmup Iteration  23: 1134320.011 ops/s
# Warmup Iteration  24: 1135167.720 ops/s
# Warmup Iteration  25: 1127205.355 ops/s
# Warmup Iteration  26: 1134908.274 ops/s
# Warmup Iteration  27: 1132996.571 ops/s
# Warmup Iteration  28: 1131824.619 ops/s
# Warmup Iteration  29: 1132024.393 ops/s
# Warmup Iteration  30: 1134557.763 ops/s
Iteration   1: 1125534.223 ops/s
Iteration   2: 1123540.750 ops/s
Iteration   3: 1127925.375 ops/s
Iteration   4: 1136564.004 ops/s
Iteration   5: 1133910.328 ops/s
Iteration   6: 1134658.694 ops/s
Iteration   7: 1136390.663 ops/s
Iteration   8: 1134828.241 ops/s
Iteration   9: 1136200.399 ops/s
Iteration  10: 1134674.796 ops/s
Iteration  11: 1128088.698 ops/s
Iteration  12: 1136117.891 ops/s
Iteration  13: 1137333.217 ops/s
Iteration  14: 1131397.437 ops/s
Iteration  15: 1134392.568 ops/s
Iteration  16: 1134292.613 ops/s
Iteration  17: 1130593.489 ops/s
Iteration  18: 1132537.886 ops/s
Iteration  19: 1134345.835 ops/s
Iteration  20: 1133096.516 ops/s
Iteration  21: 1138408.460 ops/s
Iteration  22: 1135796.618 ops/s
Iteration  23: 1135342.810 ops/s
Iteration  24: 1133865.564 ops/s
Iteration  25: 1133791.379 ops/s
Iteration  26: 1136784.283 ops/s
Iteration  27: 1132114.049 ops/s
Iteration  28: 1135342.175 ops/s
Iteration  29: 1137199.405 ops/s
Iteration  30: 1137097.912 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_getOnly":
  1133738.876 ±(99.9%) 2368.111 ops/s [Average]
  (min, avg, max) = (1123540.750, 1133738.876, 1138408.460), stdev = 3544.478
  CI (99.9%): [1131370.765, 1136106.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_getOnly  thrpt   30  1133738.876 ± 2368.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 840975.242 ops/s
# Warmup Iteration   2: 1647321.024 ops/s
# Warmup Iteration   3: 1819582.442 ops/s
# Warmup Iteration   4: 1781629.171 ops/s
# Warmup Iteration   5: 1422457.109 ops/s
# Warmup Iteration   6: 1814370.032 ops/s
# Warmup Iteration   7: 1832985.039 ops/s
# Warmup Iteration   8: 1852513.238 ops/s
# Warmup Iteration   9: 1856910.525 ops/s
# Warmup Iteration  10: 1848043.891 ops/s
# Warmup Iteration  11: 1815847.336 ops/s
# Warmup Iteration  12: 1846011.039 ops/s
# Warmup Iteration  13: 1850160.817 ops/s
# Warmup Iteration  14: 1850534.607 ops/s
# Warmup Iteration  15: 1848982.387 ops/s
# Warmup Iteration  16: 1852188.831 ops/s
# Warmup Iteration  17: 1850977.276 ops/s
# Warmup Iteration  18: 1819265.148 ops/s
# Warmup Iteration  19: 1781339.712 ops/s
# Warmup Iteration  20: 1801434.315 ops/s
# Warmup Iteration  21: 1849960.942 ops/s
# Warmup Iteration  22: 1844647.261 ops/s
# Warmup Iteration  23: 1847108.126 ops/s
# Warmup Iteration  24: 1848277.581 ops/s
# Warmup Iteration  25: 1835940.889 ops/s
# Warmup Iteration  26: 1844332.425 ops/s
# Warmup Iteration  27: 1847817.008 ops/s
# Warmup Iteration  28: 1841336.247 ops/s
# Warmup Iteration  29: 1840767.993 ops/s
# Warmup Iteration  30: 1851552.219 ops/s
Iteration   1: 1842718.100 ops/s
Iteration   2: 1851834.628 ops/s
Iteration   3: 1849725.992 ops/s
Iteration   4: 1854325.789 ops/s
Iteration   5: 1853771.692 ops/s
Iteration   6: 1839909.459 ops/s
Iteration   7: 1847834.073 ops/s
Iteration   8: 1848264.221 ops/s
Iteration   9: 1849930.506 ops/s
Iteration  10: 1849343.583 ops/s
Iteration  11: 1827098.941 ops/s
Iteration  12: 1841985.220 ops/s
Iteration  13: 1843766.079 ops/s
Iteration  14: 1846680.110 ops/s
Iteration  15: 1842581.480 ops/s
Iteration  16: 1843570.733 ops/s
Iteration  17: 1842978.545 ops/s
Iteration  18: 1837320.461 ops/s
Iteration  19: 1848684.894 ops/s
Iteration  20: 1843286.281 ops/s
Iteration  21: 1829566.108 ops/s
Iteration  22: 1846178.982 ops/s
Iteration  23: 1852092.933 ops/s
Iteration  24: 1805055.761 ops/s
Iteration  25: 1682174.494 ops/s
Iteration  26: 1791464.868 ops/s
Iteration  27: 1846287.557 ops/s
Iteration  28: 1839452.290 ops/s
Iteration  29: 1817911.429 ops/s
Iteration  30: 1848241.581 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_groupBy":
  1835467.893 ±(99.9%) 21510.888 ops/s [Average]
  (min, avg, max) = (1682174.494, 1835467.893, 1854325.789), stdev = 32196.487
  CI (99.9%): [1813957.005, 1856978.781] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_groupBy  thrpt   30  1835467.893 ± 21510.888  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 110589.776 ops/s
# Warmup Iteration   2: 161040.076 ops/s
# Warmup Iteration   3: 203652.137 ops/s
# Warmup Iteration   4: 191732.417 ops/s
# Warmup Iteration   5: 189140.191 ops/s
# Warmup Iteration   6: 194512.554 ops/s
# Warmup Iteration   7: 190919.420 ops/s
# Warmup Iteration   8: 158852.465 ops/s
# Warmup Iteration   9: 201809.548 ops/s
# Warmup Iteration  10: 198832.416 ops/s
# Warmup Iteration  11: 201486.202 ops/s
# Warmup Iteration  12: 190092.606 ops/s
# Warmup Iteration  13: 189273.057 ops/s
# Warmup Iteration  14: 189684.655 ops/s
# Warmup Iteration  15: 189419.377 ops/s
# Warmup Iteration  16: 202658.104 ops/s
# Warmup Iteration  17: 195156.095 ops/s
# Warmup Iteration  18: 187380.098 ops/s
# Warmup Iteration  19: 187332.518 ops/s
# Warmup Iteration  20: 180119.763 ops/s
# Warmup Iteration  21: 184789.979 ops/s
# Warmup Iteration  22: 186443.763 ops/s
# Warmup Iteration  23: 188576.544 ops/s
# Warmup Iteration  24: 192527.500 ops/s
# Warmup Iteration  25: 197213.208 ops/s
# Warmup Iteration  26: 186668.104 ops/s
# Warmup Iteration  27: 192460.444 ops/s
# Warmup Iteration  28: 185522.746 ops/s
# Warmup Iteration  29: 185416.107 ops/s
# Warmup Iteration  30: 201613.251 ops/s
Iteration   1: 204573.922 ops/s
Iteration   2: 204223.134 ops/s
Iteration   3: 203141.399 ops/s
Iteration   4: 181304.611 ops/s
Iteration   5: 182100.968 ops/s
Iteration   6: 187050.083 ops/s
Iteration   7: 185443.893 ops/s
Iteration   8: 182247.982 ops/s
Iteration   9: 192979.599 ops/s
Iteration  10: 184223.770 ops/s
Iteration  11: 180985.156 ops/s
Iteration  12: 197558.958 ops/s
Iteration  13: 189479.242 ops/s
Iteration  14: 188419.414 ops/s
Iteration  15: 183298.470 ops/s
Iteration  16: 184389.150 ops/s
Iteration  17: 185339.253 ops/s
Iteration  18: 183481.766 ops/s
Iteration  19: 184409.991 ops/s
Iteration  20: 185034.207 ops/s
Iteration  21: 188184.401 ops/s
Iteration  22: 188156.138 ops/s
Iteration  23: 189320.045 ops/s
Iteration  24: 185586.966 ops/s
Iteration  25: 181754.453 ops/s
Iteration  26: 182097.253 ops/s
Iteration  27: 183285.870 ops/s
Iteration  28: 187721.147 ops/s
Iteration  29: 185419.715 ops/s
Iteration  30: 185842.902 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_groupByEach":
  187568.462 ±(99.9%) 4409.329 ops/s [Average]
  (min, avg, max) = (180985.156, 187568.462, 204573.922), stdev = 6599.677
  CI (99.9%): [183159.133, 191977.791] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_groupByEach  thrpt   30  187568.462 ± 4409.329  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12268418.591 ops/s
# Warmup Iteration   2: 19218723.584 ops/s
# Warmup Iteration   3: 22141315.568 ops/s
# Warmup Iteration   4: 22729305.671 ops/s
# Warmup Iteration   5: 21988623.750 ops/s
# Warmup Iteration   6: 20501597.474 ops/s
# Warmup Iteration   7: 20759105.549 ops/s
# Warmup Iteration   8: 22317278.403 ops/s
# Warmup Iteration   9: 22310811.378 ops/s
# Warmup Iteration  10: 22175622.961 ops/s
# Warmup Iteration  11: 22345200.056 ops/s
# Warmup Iteration  12: 23307448.670 ops/s
# Warmup Iteration  13: 22828237.306 ops/s
# Warmup Iteration  14: 22420370.909 ops/s
# Warmup Iteration  15: 22068975.896 ops/s
# Warmup Iteration  16: 22328358.742 ops/s
# Warmup Iteration  17: 22171017.323 ops/s
# Warmup Iteration  18: 22296806.596 ops/s
# Warmup Iteration  19: 22355658.573 ops/s
# Warmup Iteration  20: 22371998.560 ops/s
# Warmup Iteration  21: 23390458.191 ops/s
# Warmup Iteration  22: 22286325.626 ops/s
# Warmup Iteration  23: 22717802.172 ops/s
# Warmup Iteration  24: 21872155.870 ops/s
# Warmup Iteration  25: 22807848.930 ops/s
# Warmup Iteration  26: 22768157.869 ops/s
# Warmup Iteration  27: 23163211.813 ops/s
# Warmup Iteration  28: 22406774.474 ops/s
# Warmup Iteration  29: 22275040.298 ops/s
# Warmup Iteration  30: 21883163.287 ops/s
Iteration   1: 23714303.481 ops/s
Iteration   2: 23045920.086 ops/s
Iteration   3: 22414084.756 ops/s
Iteration   4: 22723670.154 ops/s
Iteration   5: 22162736.498 ops/s
Iteration   6: 22222988.546 ops/s
Iteration   7: 22511334.668 ops/s
Iteration   8: 22478614.973 ops/s
Iteration   9: 23783077.649 ops/s
Iteration  10: 24180901.796 ops/s
Iteration  11: 22732549.112 ops/s
Iteration  12: 23044792.429 ops/s
Iteration  13: 22791389.091 ops/s
Iteration  14: 22181038.669 ops/s
Iteration  15: 21857962.620 ops/s
Iteration  16: 22815291.533 ops/s
Iteration  17: 22889658.885 ops/s
Iteration  18: 22747032.937 ops/s
Iteration  19: 22632162.141 ops/s
Iteration  20: 22464174.849 ops/s
Iteration  21: 22642072.068 ops/s
Iteration  22: 22552224.010 ops/s
Iteration  23: 22959165.940 ops/s
Iteration  24: 23995218.619 ops/s
Iteration  25: 22544798.811 ops/s
Iteration  26: 23785411.409 ops/s
Iteration  27: 22945375.927 ops/s
Iteration  28: 22401288.002 ops/s
Iteration  29: 22711700.072 ops/s
Iteration  30: 22488915.710 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_indexOf":
  22813995.181 ±(99.9%) 376155.275 ops/s [Average]
  (min, avg, max) = (21857962.620, 22813995.181, 24180901.796), stdev = 563011.551
  CI (99.9%): [22437839.906, 23190150.457] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_indexOf  thrpt   30  22813995.181 ± 376155.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7006097.169 ops/s
# Warmup Iteration   2: 13124652.560 ops/s
# Warmup Iteration   3: 14256771.624 ops/s
# Warmup Iteration   4: 14365528.390 ops/s
# Warmup Iteration   5: 11632995.694 ops/s
# Warmup Iteration   6: 14231254.765 ops/s
# Warmup Iteration   7: 14157064.658 ops/s
# Warmup Iteration   8: 14208563.972 ops/s
# Warmup Iteration   9: 14210096.827 ops/s
# Warmup Iteration  10: 14247499.149 ops/s
# Warmup Iteration  11: 14099044.995 ops/s
# Warmup Iteration  12: 13970840.545 ops/s
# Warmup Iteration  13: 14224239.875 ops/s
# Warmup Iteration  14: 14287224.236 ops/s
# Warmup Iteration  15: 13958043.737 ops/s
# Warmup Iteration  16: 14108571.174 ops/s
# Warmup Iteration  17: 13994694.944 ops/s
# Warmup Iteration  18: 14228590.808 ops/s
# Warmup Iteration  19: 14126434.379 ops/s
# Warmup Iteration  20: 14110729.250 ops/s
# Warmup Iteration  21: 14351219.340 ops/s
# Warmup Iteration  22: 14178304.016 ops/s
# Warmup Iteration  23: 14953117.791 ops/s
# Warmup Iteration  24: 14100384.651 ops/s
# Warmup Iteration  25: 14418810.183 ops/s
# Warmup Iteration  26: 14713696.171 ops/s
# Warmup Iteration  27: 15227452.663 ops/s
# Warmup Iteration  28: 14115171.078 ops/s
# Warmup Iteration  29: 14234247.422 ops/s
# Warmup Iteration  30: 14292596.584 ops/s
Iteration   1: 14413409.023 ops/s
Iteration   2: 13875689.556 ops/s
Iteration   3: 14080104.652 ops/s
Iteration   4: 14048069.662 ops/s
Iteration   5: 14233634.726 ops/s
Iteration   6: 14338743.514 ops/s
Iteration   7: 14246602.172 ops/s
Iteration   8: 14660205.039 ops/s
Iteration   9: 14167600.967 ops/s
Iteration  10: 14226234.004 ops/s
Iteration  11: 14384589.680 ops/s
Iteration  12: 14238547.362 ops/s
Iteration  13: 14218740.223 ops/s
Iteration  14: 14711182.446 ops/s
Iteration  15: 14393717.270 ops/s
Iteration  16: 14350332.236 ops/s
Iteration  17: 14449110.936 ops/s
Iteration  18: 14101480.401 ops/s
Iteration  19: 14151991.149 ops/s
Iteration  20: 14215343.135 ops/s
Iteration  21: 14220225.334 ops/s
Iteration  22: 14490506.640 ops/s
Iteration  23: 14205504.391 ops/s
Iteration  24: 14136157.383 ops/s
Iteration  25: 14142160.816 ops/s
Iteration  26: 14430453.711 ops/s
Iteration  27: 14509298.180 ops/s
Iteration  28: 14371062.128 ops/s
Iteration  29: 14037233.212 ops/s
Iteration  30: 14375166.042 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectInto":
  14280769.866 ±(99.9%) 123297.516 ops/s [Average]
  (min, avg, max) = (13875689.556, 14280769.866, 14711182.446), stdev = 184545.932
  CI (99.9%): [14157472.350, 14404067.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_injectInto  thrpt   30  14280769.866 ± 123297.516  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8633808.870 ops/s
# Warmup Iteration   2: 15769184.544 ops/s
# Warmup Iteration   3: 16717323.292 ops/s
# Warmup Iteration   4: 16538077.465 ops/s
# Warmup Iteration   5: 13670548.764 ops/s
# Warmup Iteration   6: 16813797.718 ops/s
# Warmup Iteration   7: 16801098.870 ops/s
# Warmup Iteration   8: 16531243.052 ops/s
# Warmup Iteration   9: 16659953.961 ops/s
# Warmup Iteration  10: 16605304.451 ops/s
# Warmup Iteration  11: 16821991.956 ops/s
# Warmup Iteration  12: 17083309.513 ops/s
# Warmup Iteration  13: 17023297.281 ops/s
# Warmup Iteration  14: 17069820.042 ops/s
# Warmup Iteration  15: 16768591.135 ops/s
# Warmup Iteration  16: 16911818.391 ops/s
# Warmup Iteration  17: 17294745.164 ops/s
# Warmup Iteration  18: 17119093.579 ops/s
# Warmup Iteration  19: 17205722.511 ops/s
# Warmup Iteration  20: 16763832.376 ops/s
# Warmup Iteration  21: 17618596.268 ops/s
# Warmup Iteration  22: 16983089.886 ops/s
# Warmup Iteration  23: 17058116.840 ops/s
# Warmup Iteration  24: 17787166.643 ops/s
# Warmup Iteration  25: 16733918.671 ops/s
# Warmup Iteration  26: 16861440.692 ops/s
# Warmup Iteration  27: 16625450.309 ops/s
# Warmup Iteration  28: 17018091.067 ops/s
# Warmup Iteration  29: 16940817.236 ops/s
# Warmup Iteration  30: 16825806.081 ops/s
Iteration   1: 17025158.392 ops/s
Iteration   2: 16601332.080 ops/s
Iteration   3: 16945310.023 ops/s
Iteration   4: 16846071.983 ops/s
Iteration   5: 16875673.054 ops/s
Iteration   6: 16719441.802 ops/s
Iteration   7: 17021073.296 ops/s
Iteration   8: 16510078.464 ops/s
Iteration   9: 15725184.683 ops/s
Iteration  10: 15984059.091 ops/s
Iteration  11: 16371447.613 ops/s
Iteration  12: 16429064.976 ops/s
Iteration  13: 16459967.029 ops/s
Iteration  14: 15539290.040 ops/s
Iteration  15: 16048389.204 ops/s
Iteration  16: 16383303.667 ops/s
Iteration  17: 16302550.472 ops/s
Iteration  18: 16384013.260 ops/s
Iteration  19: 16210380.922 ops/s
Iteration  20: 15796361.767 ops/s
Iteration  21: 16573556.212 ops/s
Iteration  22: 16592756.468 ops/s
Iteration  23: 16374871.887 ops/s
Iteration  24: 15815135.362 ops/s
Iteration  25: 16022577.095 ops/s
Iteration  26: 16802695.693 ops/s
Iteration  27: 16203844.341 ops/s
Iteration  28: 15864162.811 ops/s
Iteration  29: 15973117.866 ops/s
Iteration  30: 16262788.985 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoDouble":
  16355455.285 ±(99.9%) 270224.326 ops/s [Average]
  (min, avg, max) = (15539290.040, 16355455.285, 17025158.392), stdev = 404459.081
  CI (99.9%): [16085230.958, 16625679.611] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  16355455.285 ± 270224.326  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8272567.785 ops/s
# Warmup Iteration   2: 16301700.849 ops/s
# Warmup Iteration   3: 18668567.257 ops/s
# Warmup Iteration   4: 18096915.991 ops/s
# Warmup Iteration   5: 14821480.647 ops/s
# Warmup Iteration   6: 17998830.519 ops/s
# Warmup Iteration   7: 17789872.691 ops/s
# Warmup Iteration   8: 18615994.266 ops/s
# Warmup Iteration   9: 18933458.424 ops/s
# Warmup Iteration  10: 17984119.638 ops/s
# Warmup Iteration  11: 17598227.971 ops/s
# Warmup Iteration  12: 17918892.935 ops/s
# Warmup Iteration  13: 18298162.828 ops/s
# Warmup Iteration  14: 18250934.959 ops/s
# Warmup Iteration  15: 18163816.394 ops/s
# Warmup Iteration  16: 19113049.319 ops/s
# Warmup Iteration  17: 17661470.690 ops/s
# Warmup Iteration  18: 18285391.461 ops/s
# Warmup Iteration  19: 18039902.771 ops/s
# Warmup Iteration  20: 19233872.985 ops/s
# Warmup Iteration  21: 18030346.069 ops/s
# Warmup Iteration  22: 17496438.170 ops/s
# Warmup Iteration  23: 17612332.706 ops/s
# Warmup Iteration  24: 17628656.008 ops/s
# Warmup Iteration  25: 17399150.383 ops/s
# Warmup Iteration  26: 19788230.695 ops/s
# Warmup Iteration  27: 19752293.335 ops/s
# Warmup Iteration  28: 19788004.383 ops/s
# Warmup Iteration  29: 19771556.863 ops/s
# Warmup Iteration  30: 19599518.884 ops/s
Iteration   1: 19583970.109 ops/s
Iteration   2: 19757649.901 ops/s
Iteration   3: 19548963.793 ops/s
Iteration   4: 19386345.513 ops/s
Iteration   5: 20311193.955 ops/s
Iteration   6: 18537648.160 ops/s
Iteration   7: 20204605.667 ops/s
Iteration   8: 19530147.984 ops/s
Iteration   9: 20188853.669 ops/s
Iteration  10: 20305198.525 ops/s
Iteration  11: 20273494.202 ops/s
Iteration  12: 20383182.492 ops/s
Iteration  13: 20299068.112 ops/s
Iteration  14: 20349207.299 ops/s
Iteration  15: 20339009.578 ops/s
Iteration  16: 20169815.083 ops/s
Iteration  17: 20321212.339 ops/s
Iteration  18: 20297256.768 ops/s
Iteration  19: 20295881.445 ops/s
Iteration  20: 20277629.561 ops/s
Iteration  21: 20306031.559 ops/s
Iteration  22: 20376091.719 ops/s
Iteration  23: 20317999.936 ops/s
Iteration  24: 20331629.908 ops/s
Iteration  25: 20264650.474 ops/s
Iteration  26: 20291306.921 ops/s
Iteration  27: 20330124.554 ops/s
Iteration  28: 20329752.507 ops/s
Iteration  29: 20274178.875 ops/s
Iteration  30: 20300493.106 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoFloat":
  20116086.457 ±(99.9%) 276070.663 ops/s [Average]
  (min, avg, max) = (18537648.160, 20116086.457, 20383182.492), stdev = 413209.604
  CI (99.9%): [19840015.794, 20392157.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  20116086.457 ± 276070.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9921551.356 ops/s
# Warmup Iteration   2: 19964106.155 ops/s
# Warmup Iteration   3: 19849313.730 ops/s
# Warmup Iteration   4: 18384980.720 ops/s
# Warmup Iteration   5: 18241488.929 ops/s
# Warmup Iteration   6: 19912671.376 ops/s
# Warmup Iteration   7: 19912960.948 ops/s
# Warmup Iteration   8: 19911294.243 ops/s
# Warmup Iteration   9: 19846203.204 ops/s
# Warmup Iteration  10: 19945287.878 ops/s
# Warmup Iteration  11: 19930669.570 ops/s
# Warmup Iteration  12: 19846584.720 ops/s
# Warmup Iteration  13: 19902678.121 ops/s
# Warmup Iteration  14: 19886186.798 ops/s
# Warmup Iteration  15: 19913705.241 ops/s
# Warmup Iteration  16: 19901492.881 ops/s
# Warmup Iteration  17: 19784555.799 ops/s
# Warmup Iteration  18: 19927404.656 ops/s
# Warmup Iteration  19: 19882928.999 ops/s
# Warmup Iteration  20: 19911894.205 ops/s
# Warmup Iteration  21: 19965632.911 ops/s
# Warmup Iteration  22: 19930893.730 ops/s
# Warmup Iteration  23: 19893950.473 ops/s
# Warmup Iteration  24: 19931788.178 ops/s
# Warmup Iteration  25: 19960515.641 ops/s
# Warmup Iteration  26: 19917437.211 ops/s
# Warmup Iteration  27: 19961830.490 ops/s
# Warmup Iteration  28: 19891838.919 ops/s
# Warmup Iteration  29: 19948004.278 ops/s
# Warmup Iteration  30: 19932508.092 ops/s
Iteration   1: 19953177.490 ops/s
Iteration   2: 19985348.066 ops/s
Iteration   3: 19987241.238 ops/s
Iteration   4: 19979051.850 ops/s
Iteration   5: 19983038.169 ops/s
Iteration   6: 19994102.179 ops/s
Iteration   7: 20011777.963 ops/s
Iteration   8: 19975128.417 ops/s
Iteration   9: 19932524.579 ops/s
Iteration  10: 19916301.681 ops/s
Iteration  11: 19923759.249 ops/s
Iteration  12: 19880537.519 ops/s
Iteration  13: 19934410.455 ops/s
Iteration  14: 19869690.553 ops/s
Iteration  15: 19933120.761 ops/s
Iteration  16: 19939119.264 ops/s
Iteration  17: 19914074.862 ops/s
Iteration  18: 19859473.891 ops/s
Iteration  19: 19717596.729 ops/s
Iteration  20: 19851870.698 ops/s
Iteration  21: 19935659.667 ops/s
Iteration  22: 19913090.568 ops/s
Iteration  23: 19955354.385 ops/s
Iteration  24: 19773231.304 ops/s
Iteration  25: 19917012.782 ops/s
Iteration  26: 19824870.208 ops/s
Iteration  27: 19872558.008 ops/s
Iteration  28: 19886129.330 ops/s
Iteration  29: 19908331.845 ops/s
Iteration  30: 19941869.217 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoInt":
  19915648.431 ±(99.9%) 43726.569 ops/s [Average]
  (min, avg, max) = (19717596.729, 19915648.431, 20011777.963), stdev = 65447.875
  CI (99.9%): [19871921.862, 19959375.000] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  19915648.431 ± 43726.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9703096.626 ops/s
# Warmup Iteration   2: 20165389.838 ops/s
# Warmup Iteration   3: 20870474.557 ops/s
# Warmup Iteration   4: 18270930.244 ops/s
# Warmup Iteration   5: 20037376.155 ops/s
# Warmup Iteration   6: 20869728.241 ops/s
# Warmup Iteration   7: 20832470.226 ops/s
# Warmup Iteration   8: 20861150.327 ops/s
# Warmup Iteration   9: 20870230.696 ops/s
# Warmup Iteration  10: 20856109.148 ops/s
# Warmup Iteration  11: 20908161.929 ops/s
# Warmup Iteration  12: 20943862.532 ops/s
# Warmup Iteration  13: 20855648.016 ops/s
# Warmup Iteration  14: 20908436.812 ops/s
# Warmup Iteration  15: 20918671.713 ops/s
# Warmup Iteration  16: 20860536.658 ops/s
# Warmup Iteration  17: 20863522.786 ops/s
# Warmup Iteration  18: 20901168.505 ops/s
# Warmup Iteration  19: 20858351.134 ops/s
# Warmup Iteration  20: 20866357.583 ops/s
# Warmup Iteration  21: 20856883.191 ops/s
# Warmup Iteration  22: 20869392.319 ops/s
# Warmup Iteration  23: 20866122.541 ops/s
# Warmup Iteration  24: 20858542.300 ops/s
# Warmup Iteration  25: 20848828.004 ops/s
# Warmup Iteration  26: 20772608.766 ops/s
# Warmup Iteration  27: 20842607.707 ops/s
# Warmup Iteration  28: 20727795.909 ops/s
# Warmup Iteration  29: 20790838.966 ops/s
# Warmup Iteration  30: 20794116.198 ops/s
Iteration   1: 20867261.156 ops/s
Iteration   2: 20876141.153 ops/s
Iteration   3: 20843594.209 ops/s
Iteration   4: 20825154.502 ops/s
Iteration   5: 20821656.348 ops/s
Iteration   6: 20902186.599 ops/s
Iteration   7: 20856171.135 ops/s
Iteration   8: 20896402.425 ops/s
Iteration   9: 20867645.695 ops/s
Iteration  10: 20898347.255 ops/s
Iteration  11: 20912107.801 ops/s
Iteration  12: 20858640.120 ops/s
Iteration  13: 20883029.172 ops/s
Iteration  14: 20918949.303 ops/s
Iteration  15: 20800933.151 ops/s
Iteration  16: 20867516.748 ops/s
Iteration  17: 20766770.994 ops/s
Iteration  18: 20812251.326 ops/s
Iteration  19: 20914967.170 ops/s
Iteration  20: 20908939.475 ops/s
Iteration  21: 20918433.714 ops/s
Iteration  22: 20755404.192 ops/s
Iteration  23: 20876767.287 ops/s
Iteration  24: 20863907.898 ops/s
Iteration  25: 20860446.635 ops/s
Iteration  26: 20795366.123 ops/s
Iteration  27: 20604267.897 ops/s
Iteration  28: 20673649.831 ops/s
Iteration  29: 20734955.700 ops/s
Iteration  30: 20823557.448 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoLong":
  20840180.749 ±(99.9%) 49425.017 ops/s [Average]
  (min, avg, max) = (20604267.897, 20840180.749, 20918949.303), stdev = 73977.044
  CI (99.9%): [20790755.732, 20889605.765] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  20840180.749 ± 49425.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35895298.796 ops/s
# Warmup Iteration   2: 71016772.068 ops/s
# Warmup Iteration   3: 61046383.037 ops/s
# Warmup Iteration   4: 71585213.400 ops/s
# Warmup Iteration   5: 71191408.379 ops/s
# Warmup Iteration   6: 70985494.823 ops/s
# Warmup Iteration   7: 70953127.717 ops/s
# Warmup Iteration   8: 71258002.544 ops/s
# Warmup Iteration   9: 71316664.295 ops/s
# Warmup Iteration  10: 71320496.727 ops/s
# Warmup Iteration  11: 70902121.418 ops/s
# Warmup Iteration  12: 70832741.576 ops/s
# Warmup Iteration  13: 71004184.133 ops/s
# Warmup Iteration  14: 71106876.048 ops/s
# Warmup Iteration  15: 71273736.606 ops/s
# Warmup Iteration  16: 71989375.402 ops/s
# Warmup Iteration  17: 71299158.722 ops/s
# Warmup Iteration  18: 71400325.481 ops/s
# Warmup Iteration  19: 71188270.069 ops/s
# Warmup Iteration  20: 71073832.879 ops/s
# Warmup Iteration  21: 71281314.633 ops/s
# Warmup Iteration  22: 70434657.021 ops/s
# Warmup Iteration  23: 71755018.015 ops/s
# Warmup Iteration  24: 71133745.811 ops/s
# Warmup Iteration  25: 71538428.163 ops/s
# Warmup Iteration  26: 71498813.597 ops/s
# Warmup Iteration  27: 71893693.903 ops/s
# Warmup Iteration  28: 71127033.143 ops/s
# Warmup Iteration  29: 71549766.474 ops/s
# Warmup Iteration  30: 71652585.907 ops/s
Iteration   1: 71329468.601 ops/s
Iteration   2: 71167788.049 ops/s
Iteration   3: 70773759.583 ops/s
Iteration   4: 70992456.879 ops/s
Iteration   5: 70967700.981 ops/s
Iteration   6: 70804402.711 ops/s
Iteration   7: 70956430.638 ops/s
Iteration   8: 71029074.792 ops/s
Iteration   9: 71767435.308 ops/s
Iteration  10: 71432098.249 ops/s
Iteration  11: 71184430.880 ops/s
Iteration  12: 71224027.897 ops/s
Iteration  13: 71176052.582 ops/s
Iteration  14: 70639255.681 ops/s
Iteration  15: 71498219.965 ops/s
Iteration  16: 71459409.534 ops/s
Iteration  17: 71054840.516 ops/s
Iteration  18: 71060577.479 ops/s
Iteration  19: 71281597.960 ops/s
Iteration  20: 71360922.644 ops/s
Iteration  21: 71194939.320 ops/s
Iteration  22: 71377130.117 ops/s
Iteration  23: 71830026.940 ops/s
Iteration  24: 71374719.310 ops/s
Iteration  25: 71492799.591 ops/s
Iteration  26: 71748023.987 ops/s
Iteration  27: 71512871.712 ops/s
Iteration  28: 71247527.266 ops/s
Iteration  29: 71932001.997 ops/s
Iteration  30: 71321827.264 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_isEmpty":
  71273060.614 ±(99.9%) 207531.977 ops/s [Average]
  (min, avg, max) = (70639255.681, 71273060.614, 71932001.997), stdev = 310624.117
  CI (99.9%): [71065528.637, 71480592.592] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_isEmpty  thrpt   30  71273060.614 ± 207531.977  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 377677.317 ops/s
# Warmup Iteration   2: 390291.238 ops/s
# Warmup Iteration   3: 463134.982 ops/s
# Warmup Iteration   4: 492996.652 ops/s
# Warmup Iteration   5: 491293.964 ops/s
# Warmup Iteration   6: 489249.760 ops/s
# Warmup Iteration   7: 491488.039 ops/s
# Warmup Iteration   8: 492171.246 ops/s
# Warmup Iteration   9: 492129.105 ops/s
# Warmup Iteration  10: 492242.683 ops/s
# Warmup Iteration  11: 491300.042 ops/s
# Warmup Iteration  12: 489950.681 ops/s
# Warmup Iteration  13: 488308.430 ops/s
# Warmup Iteration  14: 417750.906 ops/s
# Warmup Iteration  15: 490802.363 ops/s
# Warmup Iteration  16: 490870.769 ops/s
# Warmup Iteration  17: 519318.393 ops/s
# Warmup Iteration  18: 519784.099 ops/s
# Warmup Iteration  19: 518049.275 ops/s
# Warmup Iteration  20: 518195.600 ops/s
# Warmup Iteration  21: 516653.944 ops/s
# Warmup Iteration  22: 520606.653 ops/s
# Warmup Iteration  23: 518000.391 ops/s
# Warmup Iteration  24: 519559.096 ops/s
# Warmup Iteration  25: 518822.078 ops/s
# Warmup Iteration  26: 516299.720 ops/s
# Warmup Iteration  27: 518524.094 ops/s
# Warmup Iteration  28: 517470.817 ops/s
# Warmup Iteration  29: 517356.598 ops/s
# Warmup Iteration  30: 516741.814 ops/s
Iteration   1: 517543.821 ops/s
Iteration   2: 522805.880 ops/s
Iteration   3: 517944.172 ops/s
Iteration   4: 519749.291 ops/s
Iteration   5: 519997.285 ops/s
Iteration   6: 520645.049 ops/s
Iteration   7: 517912.819 ops/s
Iteration   8: 517771.936 ops/s
Iteration   9: 517204.905 ops/s
Iteration  10: 519350.404 ops/s
Iteration  11: 520603.215 ops/s
Iteration  12: 517160.258 ops/s
Iteration  13: 519577.176 ops/s
Iteration  14: 519179.694 ops/s
Iteration  15: 521156.811 ops/s
Iteration  16: 520364.813 ops/s
Iteration  17: 518111.489 ops/s
Iteration  18: 519119.542 ops/s
Iteration  19: 520021.860 ops/s
Iteration  20: 517958.135 ops/s
Iteration  21: 520581.157 ops/s
Iteration  22: 519450.792 ops/s
Iteration  23: 514669.489 ops/s
Iteration  24: 519451.908 ops/s
Iteration  25: 518416.516 ops/s
Iteration  26: 521047.598 ops/s
Iteration  27: 520359.343 ops/s
Iteration  28: 517187.345 ops/s
Iteration  29: 517272.188 ops/s
Iteration  30: 518947.659 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_iterator":
  519052.085 ±(99.9%) 1095.856 ops/s [Average]
  (min, avg, max) = (514669.489, 519052.085, 522805.880), stdev = 1640.226
  CI (99.9%): [517956.229, 520147.941] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_iterator  thrpt   30  519052.085 ± 1095.856  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 735895.790 ops/s
# Warmup Iteration   2: 785954.415 ops/s
# Warmup Iteration   3: 992942.709 ops/s
# Warmup Iteration   4: 987516.038 ops/s
# Warmup Iteration   5: 981045.016 ops/s
# Warmup Iteration   6: 985782.491 ops/s
# Warmup Iteration   7: 980748.045 ops/s
# Warmup Iteration   8: 984651.072 ops/s
# Warmup Iteration   9: 986242.150 ops/s
# Warmup Iteration  10: 987245.734 ops/s
# Warmup Iteration  11: 874515.913 ops/s
# Warmup Iteration  12: 932992.274 ops/s
# Warmup Iteration  13: 985711.043 ops/s
# Warmup Iteration  14: 984084.916 ops/s
# Warmup Iteration  15: 986669.599 ops/s
# Warmup Iteration  16: 991108.630 ops/s
# Warmup Iteration  17: 1045684.351 ops/s
# Warmup Iteration  18: 1045616.879 ops/s
# Warmup Iteration  19: 1043099.754 ops/s
# Warmup Iteration  20: 1046078.307 ops/s
# Warmup Iteration  21: 1043536.853 ops/s
# Warmup Iteration  22: 1046160.659 ops/s
# Warmup Iteration  23: 1046971.498 ops/s
# Warmup Iteration  24: 1047316.547 ops/s
# Warmup Iteration  25: 1042007.853 ops/s
# Warmup Iteration  26: 1043462.458 ops/s
# Warmup Iteration  27: 1043129.428 ops/s
# Warmup Iteration  28: 1049444.444 ops/s
# Warmup Iteration  29: 1043579.322 ops/s
# Warmup Iteration  30: 1043479.764 ops/s
Iteration   1: 1044228.641 ops/s
Iteration   2: 1046599.057 ops/s
Iteration   3: 1047286.128 ops/s
Iteration   4: 1047537.803 ops/s
Iteration   5: 1048128.290 ops/s
Iteration   6: 1043724.987 ops/s
Iteration   7: 1038617.666 ops/s
Iteration   8: 1046054.640 ops/s
Iteration   9: 1048002.757 ops/s
Iteration  10: 1049225.509 ops/s
Iteration  11: 1045301.207 ops/s
Iteration  12: 1045049.566 ops/s
Iteration  13: 1045629.275 ops/s
Iteration  14: 1048206.476 ops/s
Iteration  15: 1037711.141 ops/s
Iteration  16: 1045260.548 ops/s
Iteration  17: 1046103.502 ops/s
Iteration  18: 1039904.485 ops/s
Iteration  19: 1035265.013 ops/s
Iteration  20: 1042582.525 ops/s
Iteration  21: 1033981.439 ops/s
Iteration  22: 1042873.864 ops/s
Iteration  23: 1046239.146 ops/s
Iteration  24: 1044678.462 ops/s
Iteration  25: 1044590.886 ops/s
Iteration  26: 1047381.724 ops/s
Iteration  27: 1048399.964 ops/s
Iteration  28: 1040713.058 ops/s
Iteration  29: 1047242.389 ops/s
Iteration  30: 1042614.858 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_iteratorRemove":
  1044304.500 ±(99.9%) 2620.872 ops/s [Average]
  (min, avg, max) = (1033981.439, 1044304.500, 1049225.509), stdev = 3922.798
  CI (99.9%): [1041683.628, 1046925.372] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1044304.500 ± 2620.872  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15857724.439 ops/s
# Warmup Iteration   2: 30883829.516 ops/s
# Warmup Iteration   3: 33033475.549 ops/s
# Warmup Iteration   4: 32997887.219 ops/s
# Warmup Iteration   5: 26531605.125 ops/s
# Warmup Iteration   6: 33009793.148 ops/s
# Warmup Iteration   7: 32235312.324 ops/s
# Warmup Iteration   8: 33060229.395 ops/s
# Warmup Iteration   9: 33066289.928 ops/s
# Warmup Iteration  10: 33071417.362 ops/s
# Warmup Iteration  11: 33137495.458 ops/s
# Warmup Iteration  12: 32833749.442 ops/s
# Warmup Iteration  13: 32884097.299 ops/s
# Warmup Iteration  14: 32979248.556 ops/s
# Warmup Iteration  15: 32784917.028 ops/s
# Warmup Iteration  16: 32970436.917 ops/s
# Warmup Iteration  17: 33039004.734 ops/s
# Warmup Iteration  18: 32958502.873 ops/s
# Warmup Iteration  19: 32915192.616 ops/s
# Warmup Iteration  20: 32966536.322 ops/s
# Warmup Iteration  21: 32926219.260 ops/s
# Warmup Iteration  22: 33098195.984 ops/s
# Warmup Iteration  23: 33105957.076 ops/s
# Warmup Iteration  24: 33143821.584 ops/s
# Warmup Iteration  25: 33143004.295 ops/s
# Warmup Iteration  26: 33179927.629 ops/s
# Warmup Iteration  27: 33050591.569 ops/s
# Warmup Iteration  28: 33156548.115 ops/s
# Warmup Iteration  29: 33197853.892 ops/s
# Warmup Iteration  30: 33216050.906 ops/s
Iteration   1: 33107286.086 ops/s
Iteration   2: 33024237.024 ops/s
Iteration   3: 33048549.058 ops/s
Iteration   4: 33004274.780 ops/s
Iteration   5: 33129349.743 ops/s
Iteration   6: 33136669.879 ops/s
Iteration   7: 33186743.680 ops/s
Iteration   8: 33154357.406 ops/s
Iteration   9: 33113089.941 ops/s
Iteration  10: 33127785.942 ops/s
Iteration  11: 33166309.505 ops/s
Iteration  12: 33068664.243 ops/s
Iteration  13: 32934043.160 ops/s
Iteration  14: 33172916.948 ops/s
Iteration  15: 33128746.363 ops/s
Iteration  16: 33133385.900 ops/s
Iteration  17: 33040644.385 ops/s
Iteration  18: 33162977.532 ops/s
Iteration  19: 33167291.902 ops/s
Iteration  20: 33137712.452 ops/s
Iteration  21: 32975613.899 ops/s
Iteration  22: 33131884.598 ops/s
Iteration  23: 33152426.566 ops/s
Iteration  24: 33055083.795 ops/s
Iteration  25: 32998564.105 ops/s
Iteration  26: 33071293.961 ops/s
Iteration  27: 32914877.712 ops/s
Iteration  28: 32991681.711 ops/s
Iteration  29: 33010712.154 ops/s
Iteration  30: 33060678.698 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_lastIndexOf":
  33083595.104 ±(99.9%) 50344.624 ops/s [Average]
  (min, avg, max) = (32914877.712, 33083595.104, 33186743.680), stdev = 75353.468
  CI (99.9%): [33033250.481, 33133939.728] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  33083595.104 ± 50344.624  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 146405.679 ops/s
# Warmup Iteration   2: 154349.648 ops/s
# Warmup Iteration   3: 185884.814 ops/s
# Warmup Iteration   4: 193527.339 ops/s
# Warmup Iteration   5: 195211.220 ops/s
# Warmup Iteration   6: 192744.302 ops/s
# Warmup Iteration   7: 194892.335 ops/s
# Warmup Iteration   8: 195493.949 ops/s
# Warmup Iteration   9: 195918.444 ops/s
# Warmup Iteration  10: 195262.254 ops/s
# Warmup Iteration  11: 194585.188 ops/s
# Warmup Iteration  12: 196360.781 ops/s
# Warmup Iteration  13: 177040.685 ops/s
# Warmup Iteration  14: 186595.518 ops/s
# Warmup Iteration  15: 196468.002 ops/s
# Warmup Iteration  16: 195627.689 ops/s
# Warmup Iteration  17: 209783.062 ops/s
# Warmup Iteration  18: 209233.216 ops/s
# Warmup Iteration  19: 208889.978 ops/s
# Warmup Iteration  20: 208666.910 ops/s
# Warmup Iteration  21: 208769.287 ops/s
# Warmup Iteration  22: 209418.217 ops/s
# Warmup Iteration  23: 209031.307 ops/s
# Warmup Iteration  24: 209402.814 ops/s
# Warmup Iteration  25: 210375.872 ops/s
# Warmup Iteration  26: 210087.429 ops/s
# Warmup Iteration  27: 209438.100 ops/s
# Warmup Iteration  28: 210442.518 ops/s
# Warmup Iteration  29: 209835.323 ops/s
# Warmup Iteration  30: 209222.404 ops/s
Iteration   1: 209010.033 ops/s
Iteration   2: 208938.500 ops/s
Iteration   3: 209632.185 ops/s
Iteration   4: 209465.658 ops/s
Iteration   5: 210025.599 ops/s
Iteration   6: 209961.970 ops/s
Iteration   7: 210127.808 ops/s
Iteration   8: 210132.221 ops/s
Iteration   9: 209181.247 ops/s
Iteration  10: 209783.337 ops/s
Iteration  11: 210254.395 ops/s
Iteration  12: 210254.301 ops/s
Iteration  13: 210275.895 ops/s
Iteration  14: 210172.569 ops/s
Iteration  15: 209299.587 ops/s
Iteration  16: 208691.524 ops/s
Iteration  17: 209719.053 ops/s
Iteration  18: 209673.211 ops/s
Iteration  19: 209620.113 ops/s
Iteration  20: 209897.169 ops/s
Iteration  21: 208170.908 ops/s
Iteration  22: 209271.855 ops/s
Iteration  23: 209558.949 ops/s
Iteration  24: 208833.450 ops/s
Iteration  25: 208012.926 ops/s
Iteration  26: 208875.352 ops/s
Iteration  27: 209205.442 ops/s
Iteration  28: 208820.506 ops/s
Iteration  29: 209096.163 ops/s
Iteration  30: 209401.318 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_listIterator":
  209445.441 ±(99.9%) 405.367 ops/s [Average]
  (min, avg, max) = (208012.926, 209445.441, 210275.895), stdev = 606.735
  CI (99.9%): [209040.074, 209850.809] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_listIterator  thrpt   30  209445.441 ± 405.367  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 765737.165 ops/s
# Warmup Iteration   2: 790583.735 ops/s
# Warmup Iteration   3: 988287.749 ops/s
# Warmup Iteration   4: 1004503.669 ops/s
# Warmup Iteration   5: 1010796.733 ops/s
# Warmup Iteration   6: 1007691.209 ops/s
# Warmup Iteration   7: 1008728.238 ops/s
# Warmup Iteration   8: 1011923.353 ops/s
# Warmup Iteration   9: 1012318.470 ops/s
# Warmup Iteration  10: 1002021.370 ops/s
# Warmup Iteration  11: 1004333.896 ops/s
# Warmup Iteration  12: 966319.548 ops/s
# Warmup Iteration  13: 895175.637 ops/s
# Warmup Iteration  14: 1007741.344 ops/s
# Warmup Iteration  15: 1008155.592 ops/s
# Warmup Iteration  16: 1009424.501 ops/s
# Warmup Iteration  17: 1066975.600 ops/s
# Warmup Iteration  18: 1066924.095 ops/s
# Warmup Iteration  19: 1062473.712 ops/s
# Warmup Iteration  20: 1067153.008 ops/s
# Warmup Iteration  21: 1062693.328 ops/s
# Warmup Iteration  22: 1062039.710 ops/s
# Warmup Iteration  23: 1063468.762 ops/s
# Warmup Iteration  24: 1064435.427 ops/s
# Warmup Iteration  25: 1063820.407 ops/s
# Warmup Iteration  26: 1067609.136 ops/s
# Warmup Iteration  27: 1070731.364 ops/s
# Warmup Iteration  28: 1064779.208 ops/s
# Warmup Iteration  29: 1073798.820 ops/s
# Warmup Iteration  30: 1070048.982 ops/s
Iteration   1: 1070297.034 ops/s
Iteration   2: 1071654.433 ops/s
Iteration   3: 1063590.794 ops/s
Iteration   4: 1071620.731 ops/s
Iteration   5: 1069138.211 ops/s
Iteration   6: 1067023.712 ops/s
Iteration   7: 1066266.440 ops/s
Iteration   8: 1068809.227 ops/s
Iteration   9: 1069377.369 ops/s
Iteration  10: 1068075.665 ops/s
Iteration  11: 1067010.413 ops/s
Iteration  12: 1068397.765 ops/s
Iteration  13: 1067160.795 ops/s
Iteration  14: 1062798.810 ops/s
Iteration  15: 1070350.195 ops/s
Iteration  16: 1070962.152 ops/s
Iteration  17: 1071010.835 ops/s
Iteration  18: 1071458.372 ops/s
Iteration  19: 1066986.828 ops/s
Iteration  20: 1071252.977 ops/s
Iteration  21: 1069970.493 ops/s
Iteration  22: 1067885.735 ops/s
Iteration  23: 1069715.312 ops/s
Iteration  24: 1068571.878 ops/s
Iteration  25: 1070645.760 ops/s
Iteration  26: 1063839.901 ops/s
Iteration  27: 1069368.522 ops/s
Iteration  28: 1065286.440 ops/s
Iteration  29: 1067605.122 ops/s
Iteration  30: 1065934.294 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize":
  1068402.207 ±(99.9%) 1641.688 ops/s [Average]
  (min, avg, max) = (1062798.810, 1068402.207, 1071654.433), stdev = 2457.201
  CI (99.9%): [1066760.519, 1070043.895] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize  thrpt   30  1068402.207 ± 1641.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_listIterator_throwsNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_listIterator_throwsNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 772176.542 ops/s
# Warmup Iteration   2: 793648.543 ops/s
# Warmup Iteration   3: 1003358.520 ops/s
# Warmup Iteration   4: 1023351.006 ops/s
# Warmup Iteration   5: 1019590.535 ops/s
# Warmup Iteration   6: 1017326.804 ops/s
# Warmup Iteration   7: 1019772.546 ops/s
# Warmup Iteration   8: 1024651.545 ops/s
# Warmup Iteration   9: 1021803.214 ops/s
# Warmup Iteration  10: 1023740.170 ops/s
# Warmup Iteration  11: 1020455.761 ops/s
# Warmup Iteration  12: 951840.056 ops/s
# Warmup Iteration  13: 940003.883 ops/s
# Warmup Iteration  14: 1019910.938 ops/s
# Warmup Iteration  15: 1021966.916 ops/s
# Warmup Iteration  16: 1026367.603 ops/s
# Warmup Iteration  17: 1086395.241 ops/s
# Warmup Iteration  18: 1084812.336 ops/s
# Warmup Iteration  19: 1085473.051 ops/s
# Warmup Iteration  20: 1085373.660 ops/s
# Warmup Iteration  21: 1085238.986 ops/s
# Warmup Iteration  22: 1087982.079 ops/s
# Warmup Iteration  23: 1086381.753 ops/s
# Warmup Iteration  24: 1089755.130 ops/s
# Warmup Iteration  25: 1086445.483 ops/s
# Warmup Iteration  26: 1089469.018 ops/s
# Warmup Iteration  27: 1087379.130 ops/s
# Warmup Iteration  28: 1087711.333 ops/s
# Warmup Iteration  29: 1084318.086 ops/s
# Warmup Iteration  30: 1076626.384 ops/s
Iteration   1: 1075837.806 ops/s
Iteration   2: 1084921.634 ops/s
Iteration   3: 1088565.568 ops/s
Iteration   4: 1087623.354 ops/s
Iteration   5: 1090147.249 ops/s
Iteration   6: 1088002.916 ops/s
Iteration   7: 1086237.621 ops/s
Iteration   8: 1085593.094 ops/s
Iteration   9: 1073325.178 ops/s
Iteration  10: 1079778.723 ops/s
Iteration  11: 1082221.348 ops/s
Iteration  12: 1076215.858 ops/s
Iteration  13: 1082862.917 ops/s
Iteration  14: 1076374.723 ops/s
Iteration  15: 1080252.752 ops/s
Iteration  16: 1082109.236 ops/s
Iteration  17: 1081023.734 ops/s
Iteration  18: 1082677.297 ops/s
Iteration  19: 1086454.632 ops/s
Iteration  20: 1087225.641 ops/s
Iteration  21: 1082480.151 ops/s
Iteration  22: 1083788.412 ops/s
Iteration  23: 1087344.446 ops/s
Iteration  24: 1081726.930 ops/s
Iteration  25: 1085386.970 ops/s
Iteration  26: 1087765.835 ops/s
Iteration  27: 1089790.796 ops/s
Iteration  28: 1086523.558 ops/s
Iteration  29: 1084763.725 ops/s
Iteration  30: 1085299.115 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_listIterator_throwsNegative":
  1083744.041 ±(99.9%) 2876.178 ops/s [Average]
  (min, avg, max) = (1073325.178, 1083744.041, 1090147.249), stdev = 4304.929
  CI (99.9%): [1080867.862, 1086620.219] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_listIterator_throwsNegative  thrpt   30  1083744.041 ± 2876.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 253977.290 ops/s
# Warmup Iteration   2: 629920.930 ops/s
# Warmup Iteration   3: 634016.941 ops/s
# Warmup Iteration   4: 532936.075 ops/s
# Warmup Iteration   5: 634886.776 ops/s
# Warmup Iteration   6: 636260.876 ops/s
# Warmup Iteration   7: 635216.441 ops/s
# Warmup Iteration   8: 633935.725 ops/s
# Warmup Iteration   9: 634836.734 ops/s
# Warmup Iteration  10: 635531.984 ops/s
# Warmup Iteration  11: 632855.806 ops/s
# Warmup Iteration  12: 634194.384 ops/s
# Warmup Iteration  13: 632716.003 ops/s
# Warmup Iteration  14: 635895.162 ops/s
# Warmup Iteration  15: 634612.816 ops/s
# Warmup Iteration  16: 634540.729 ops/s
# Warmup Iteration  17: 633937.553 ops/s
# Warmup Iteration  18: 634423.643 ops/s
# Warmup Iteration  19: 635181.513 ops/s
# Warmup Iteration  20: 634884.113 ops/s
# Warmup Iteration  21: 635164.514 ops/s
# Warmup Iteration  22: 631926.527 ops/s
# Warmup Iteration  23: 633237.807 ops/s
# Warmup Iteration  24: 631206.217 ops/s
# Warmup Iteration  25: 635027.721 ops/s
# Warmup Iteration  26: 633678.710 ops/s
# Warmup Iteration  27: 634036.071 ops/s
# Warmup Iteration  28: 635989.885 ops/s
# Warmup Iteration  29: 633113.216 ops/s
# Warmup Iteration  30: 634436.208 ops/s
Iteration   1: 636487.776 ops/s
Iteration   2: 634306.940 ops/s
Iteration   3: 634058.443 ops/s
Iteration   4: 635226.430 ops/s
Iteration   5: 634315.735 ops/s
Iteration   6: 633868.791 ops/s
Iteration   7: 635018.137 ops/s
Iteration   8: 633190.714 ops/s
Iteration   9: 634653.836 ops/s
Iteration  10: 634409.666 ops/s
Iteration  11: 635221.129 ops/s
Iteration  12: 636661.044 ops/s
Iteration  13: 635506.181 ops/s
Iteration  14: 634928.112 ops/s
Iteration  15: 630721.805 ops/s
Iteration  16: 633988.891 ops/s
Iteration  17: 634987.137 ops/s
Iteration  18: 633143.113 ops/s
Iteration  19: 634165.216 ops/s
Iteration  20: 632653.013 ops/s
Iteration  21: 635533.999 ops/s
Iteration  22: 636367.008 ops/s
Iteration  23: 634719.435 ops/s
Iteration  24: 635429.507 ops/s
Iteration  25: 635807.218 ops/s
Iteration  26: 633121.487 ops/s
Iteration  27: 634429.399 ops/s
Iteration  28: 634431.054 ops/s
Iteration  29: 635360.372 ops/s
Iteration  30: 633755.289 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_makeString":
  634548.896 ±(99.9%) 822.871 ops/s [Average]
  (min, avg, max) = (630721.805, 634548.896, 636661.044), stdev = 1231.634
  CI (99.9%): [633726.025, 635371.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_makeString  thrpt   30  634548.896 ± 822.871  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15543533.309 ops/s
# Warmup Iteration   2: 28409800.053 ops/s
# Warmup Iteration   3: 27699166.439 ops/s
# Warmup Iteration   4: 27756861.907 ops/s
# Warmup Iteration   5: 23233521.290 ops/s
# Warmup Iteration   6: 27652390.848 ops/s
# Warmup Iteration   7: 27694614.641 ops/s
# Warmup Iteration   8: 27688635.144 ops/s
# Warmup Iteration   9: 27662179.395 ops/s
# Warmup Iteration  10: 27757666.754 ops/s
# Warmup Iteration  11: 27515064.837 ops/s
# Warmup Iteration  12: 27678043.601 ops/s
# Warmup Iteration  13: 27749040.277 ops/s
# Warmup Iteration  14: 27649296.630 ops/s
# Warmup Iteration  15: 27755927.761 ops/s
# Warmup Iteration  16: 27726635.391 ops/s
# Warmup Iteration  17: 27804347.074 ops/s
# Warmup Iteration  18: 27780655.968 ops/s
# Warmup Iteration  19: 27817702.117 ops/s
# Warmup Iteration  20: 27864944.872 ops/s
# Warmup Iteration  21: 27881178.968 ops/s
# Warmup Iteration  22: 27778192.489 ops/s
# Warmup Iteration  23: 27843951.935 ops/s
# Warmup Iteration  24: 27794200.396 ops/s
# Warmup Iteration  25: 27810323.823 ops/s
# Warmup Iteration  26: 27750695.278 ops/s
# Warmup Iteration  27: 27713551.628 ops/s
# Warmup Iteration  28: 27819964.041 ops/s
# Warmup Iteration  29: 27843485.358 ops/s
# Warmup Iteration  30: 27859493.963 ops/s
Iteration   1: 27911531.523 ops/s
Iteration   2: 27893601.439 ops/s
Iteration   3: 27578399.529 ops/s
Iteration   4: 27640882.839 ops/s
Iteration   5: 27796716.045 ops/s
Iteration   6: 27854082.107 ops/s
Iteration   7: 27789462.262 ops/s
Iteration   8: 27718435.957 ops/s
Iteration   9: 27867524.064 ops/s
Iteration  10: 27864476.429 ops/s
Iteration  11: 27750437.587 ops/s
Iteration  12: 27777128.751 ops/s
Iteration  13: 27734242.749 ops/s
Iteration  14: 27855814.583 ops/s
Iteration  15: 27806414.644 ops/s
Iteration  16: 27875957.212 ops/s
Iteration  17: 27892375.762 ops/s
Iteration  18: 27818172.761 ops/s
Iteration  19: 27765667.575 ops/s
Iteration  20: 27818459.608 ops/s
Iteration  21: 27795305.253 ops/s
Iteration  22: 27805457.837 ops/s
Iteration  23: 27817029.060 ops/s
Iteration  24: 27820017.485 ops/s
Iteration  25: 27906231.136 ops/s
Iteration  26: 27821666.984 ops/s
Iteration  27: 27831312.703 ops/s
Iteration  28: 27765301.100 ops/s
Iteration  29: 27811823.247 ops/s
Iteration  30: 27845275.146 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_max":
  27807640.113 ±(99.9%) 48966.439 ops/s [Average]
  (min, avg, max) = (27578399.529, 27807640.113, 27911531.523), stdev = 73290.666
  CI (99.9%): [27758673.674, 27856606.552] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_max  thrpt   30  27807640.113 ± 48966.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15617441.416 ops/s
# Warmup Iteration   2: 29695942.415 ops/s
# Warmup Iteration   3: 25633794.971 ops/s
# Warmup Iteration   4: 30113443.118 ops/s
# Warmup Iteration   5: 30074310.978 ops/s
# Warmup Iteration   6: 30123897.136 ops/s
# Warmup Iteration   7: 30125518.815 ops/s
# Warmup Iteration   8: 30170528.767 ops/s
# Warmup Iteration   9: 30190461.350 ops/s
# Warmup Iteration  10: 30098181.857 ops/s
# Warmup Iteration  11: 30156919.197 ops/s
# Warmup Iteration  12: 30099498.276 ops/s
# Warmup Iteration  13: 30127792.551 ops/s
# Warmup Iteration  14: 30086090.685 ops/s
# Warmup Iteration  15: 30048984.766 ops/s
# Warmup Iteration  16: 30148331.997 ops/s
# Warmup Iteration  17: 29969182.241 ops/s
# Warmup Iteration  18: 30027691.787 ops/s
# Warmup Iteration  19: 30028430.521 ops/s
# Warmup Iteration  20: 30042813.744 ops/s
# Warmup Iteration  21: 29926700.824 ops/s
# Warmup Iteration  22: 29982013.814 ops/s
# Warmup Iteration  23: 29967983.297 ops/s
# Warmup Iteration  24: 30070369.067 ops/s
# Warmup Iteration  25: 29972484.523 ops/s
# Warmup Iteration  26: 30084274.879 ops/s
# Warmup Iteration  27: 30014350.273 ops/s
# Warmup Iteration  28: 29914457.814 ops/s
# Warmup Iteration  29: 30051090.939 ops/s
# Warmup Iteration  30: 30151658.035 ops/s
Iteration   1: 30105021.841 ops/s
Iteration   2: 30036640.399 ops/s
Iteration   3: 29907501.335 ops/s
Iteration   4: 30020069.556 ops/s
Iteration   5: 29979694.798 ops/s
Iteration   6: 30032321.651 ops/s
Iteration   7: 29980871.998 ops/s
Iteration   8: 30023889.410 ops/s
Iteration   9: 30093030.482 ops/s
Iteration  10: 29965769.539 ops/s
Iteration  11: 30095614.268 ops/s
Iteration  12: 30127724.276 ops/s
Iteration  13: 30179686.914 ops/s
Iteration  14: 30026377.916 ops/s
Iteration  15: 30119371.957 ops/s
Iteration  16: 29887560.586 ops/s
Iteration  17: 30136596.976 ops/s
Iteration  18: 30073663.854 ops/s
Iteration  19: 29876318.953 ops/s
Iteration  20: 29867254.785 ops/s
Iteration  21: 29737176.394 ops/s
Iteration  22: 30019177.294 ops/s
Iteration  23: 30046561.765 ops/s
Iteration  24: 29913958.944 ops/s
Iteration  25: 30014274.066 ops/s
Iteration  26: 30049611.910 ops/s
Iteration  27: 30059156.729 ops/s
Iteration  28: 30043278.621 ops/s
Iteration  29: 30060930.119 ops/s
Iteration  30: 29986905.814 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_maxBy":
  30015533.772 ±(99.9%) 63210.467 ops/s [Average]
  (min, avg, max) = (29737176.394, 30015533.772, 30179686.914), stdev = 94610.458
  CI (99.9%): [29952323.305, 30078744.238] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_maxBy  thrpt   30  30015533.772 ± 63210.467  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3754204.569 ops/s
# Warmup Iteration   2: 7770251.436 ops/s
# Warmup Iteration   3: 10070278.119 ops/s
# Warmup Iteration   4: 10126308.775 ops/s
# Warmup Iteration   5: 8443274.105 ops/s
# Warmup Iteration   6: 10120128.223 ops/s
# Warmup Iteration   7: 10134071.049 ops/s
# Warmup Iteration   8: 10093354.106 ops/s
# Warmup Iteration   9: 10117889.456 ops/s
# Warmup Iteration  10: 10067697.693 ops/s
# Warmup Iteration  11: 10111089.449 ops/s
# Warmup Iteration  12: 10120666.504 ops/s
# Warmup Iteration  13: 10091797.961 ops/s
# Warmup Iteration  14: 10109877.832 ops/s
# Warmup Iteration  15: 10116601.912 ops/s
# Warmup Iteration  16: 10130462.375 ops/s
# Warmup Iteration  17: 10120454.124 ops/s
# Warmup Iteration  18: 10142186.676 ops/s
# Warmup Iteration  19: 10141228.579 ops/s
# Warmup Iteration  20: 10136972.937 ops/s
# Warmup Iteration  21: 10131603.686 ops/s
# Warmup Iteration  22: 10120724.363 ops/s
# Warmup Iteration  23: 10159003.056 ops/s
# Warmup Iteration  24: 10141056.240 ops/s
# Warmup Iteration  25: 10153126.660 ops/s
# Warmup Iteration  26: 10139465.032 ops/s
# Warmup Iteration  27: 10133894.798 ops/s
# Warmup Iteration  28: 10119880.777 ops/s
# Warmup Iteration  29: 10125764.117 ops/s
# Warmup Iteration  30: 10141084.970 ops/s
Iteration   1: 10127157.062 ops/s
Iteration   2: 10143167.295 ops/s
Iteration   3: 10130881.589 ops/s
Iteration   4: 10067497.374 ops/s
Iteration   5: 10109948.573 ops/s
Iteration   6: 10162593.955 ops/s
Iteration   7: 10149381.875 ops/s
Iteration   8: 10111940.093 ops/s
Iteration   9: 10136816.977 ops/s
Iteration  10: 10087460.347 ops/s
Iteration  11: 10115007.421 ops/s
Iteration  12: 10155239.245 ops/s
Iteration  13: 10150082.050 ops/s
Iteration  14: 10150496.998 ops/s
Iteration  15: 10110128.098 ops/s
Iteration  16: 10127298.062 ops/s
Iteration  17: 10134182.103 ops/s
Iteration  18: 10156290.493 ops/s
Iteration  19: 10121263.337 ops/s
Iteration  20: 10101014.614 ops/s
Iteration  21: 10107172.680 ops/s
Iteration  22: 10120022.810 ops/s
Iteration  23: 10116546.109 ops/s
Iteration  24: 10149458.436 ops/s
Iteration  25: 10154250.637 ops/s
Iteration  26: 10104452.986 ops/s
Iteration  27: 10108117.040 ops/s
Iteration  28: 10112622.531 ops/s
Iteration  29: 10111307.437 ops/s
Iteration  30: 10139682.559 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_max_null_throws":
  10125716.026 ±(99.9%) 15153.345 ops/s [Average]
  (min, avg, max) = (10067497.374, 10125716.026, 10162593.955), stdev = 22680.816
  CI (99.9%): [10110562.681, 10140869.371] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_max_null_throws  thrpt   30  10125716.026 ± 15153.345  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4458902.538 ops/s
# Warmup Iteration   2: 8657126.543 ops/s
# Warmup Iteration   3: 9460246.729 ops/s
# Warmup Iteration   4: 9516465.740 ops/s
# Warmup Iteration   5: 7872220.493 ops/s
# Warmup Iteration   6: 9537299.860 ops/s
# Warmup Iteration   7: 9528069.654 ops/s
# Warmup Iteration   8: 9522276.482 ops/s
# Warmup Iteration   9: 9548459.999 ops/s
# Warmup Iteration  10: 9513675.975 ops/s
# Warmup Iteration  11: 9500157.133 ops/s
# Warmup Iteration  12: 9540564.901 ops/s
# Warmup Iteration  13: 9534725.221 ops/s
# Warmup Iteration  14: 9478063.056 ops/s
# Warmup Iteration  15: 9534379.046 ops/s
# Warmup Iteration  16: 9543255.922 ops/s
# Warmup Iteration  17: 9537934.953 ops/s
# Warmup Iteration  18: 9544352.858 ops/s
# Warmup Iteration  19: 9512273.051 ops/s
# Warmup Iteration  20: 9550515.743 ops/s
# Warmup Iteration  21: 9522877.322 ops/s
# Warmup Iteration  22: 9520947.828 ops/s
# Warmup Iteration  23: 9534621.095 ops/s
# Warmup Iteration  24: 9534683.909 ops/s
# Warmup Iteration  25: 9516151.180 ops/s
# Warmup Iteration  26: 9521238.318 ops/s
# Warmup Iteration  27: 9520195.667 ops/s
# Warmup Iteration  28: 9535594.356 ops/s
# Warmup Iteration  29: 9521018.954 ops/s
# Warmup Iteration  30: 9507571.685 ops/s
Iteration   1: 9548621.739 ops/s
Iteration   2: 9556862.378 ops/s
Iteration   3: 9534632.543 ops/s
Iteration   4: 8862917.667 ops/s
Iteration   5: 9356087.276 ops/s
Iteration   6: 9485917.817 ops/s
Iteration   7: 9507777.502 ops/s
Iteration   8: 9559657.435 ops/s
Iteration   9: 9436111.827 ops/s
Iteration  10: 9540767.269 ops/s
Iteration  11: 9552680.142 ops/s
Iteration  12: 9528579.131 ops/s
Iteration  13: 9543117.812 ops/s
Iteration  14: 9555866.670 ops/s
Iteration  15: 9497079.928 ops/s
Iteration  16: 9534458.041 ops/s
Iteration  17: 9562297.833 ops/s
Iteration  18: 9507261.231 ops/s
Iteration  19: 9475418.200 ops/s
Iteration  20: 9536158.759 ops/s
Iteration  21: 9522417.884 ops/s
Iteration  22: 9526131.753 ops/s
Iteration  23: 9502992.105 ops/s
Iteration  24: 9464122.337 ops/s
Iteration  25: 9516189.034 ops/s
Iteration  26: 9486880.350 ops/s
Iteration  27: 9474321.575 ops/s
Iteration  28: 9516923.375 ops/s
Iteration  29: 9528042.145 ops/s
Iteration  30: 9517927.266 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  9491273.967 ±(99.9%) 84258.767 ops/s [Average]
  (min, avg, max) = (8862917.667, 9491273.967, 9562297.833), stdev = 126114.566
  CI (99.9%): [9407015.200, 9575532.735] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  9491273.967 ± 84258.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16063057.395 ops/s
# Warmup Iteration   2: 31186308.252 ops/s
# Warmup Iteration   3: 26550374.913 ops/s
# Warmup Iteration   4: 31254272.322 ops/s
# Warmup Iteration   5: 31246978.175 ops/s
# Warmup Iteration   6: 31306705.137 ops/s
# Warmup Iteration   7: 31074582.871 ops/s
# Warmup Iteration   8: 31235662.309 ops/s
# Warmup Iteration   9: 31314297.184 ops/s
# Warmup Iteration  10: 30030667.910 ops/s
# Warmup Iteration  11: 31287817.861 ops/s
# Warmup Iteration  12: 31111194.151 ops/s
# Warmup Iteration  13: 31186514.206 ops/s
# Warmup Iteration  14: 31324863.516 ops/s
# Warmup Iteration  15: 31266014.369 ops/s
# Warmup Iteration  16: 31319508.617 ops/s
# Warmup Iteration  17: 31383835.745 ops/s
# Warmup Iteration  18: 31337620.260 ops/s
# Warmup Iteration  19: 31248781.483 ops/s
# Warmup Iteration  20: 31373851.476 ops/s
# Warmup Iteration  21: 31355507.069 ops/s
# Warmup Iteration  22: 31309058.264 ops/s
# Warmup Iteration  23: 31090832.837 ops/s
# Warmup Iteration  24: 31277614.046 ops/s
# Warmup Iteration  25: 31263300.025 ops/s
# Warmup Iteration  26: 31286182.286 ops/s
# Warmup Iteration  27: 31299089.403 ops/s
# Warmup Iteration  28: 31274730.446 ops/s
# Warmup Iteration  29: 31275133.782 ops/s
# Warmup Iteration  30: 31153430.608 ops/s
Iteration   1: 31095947.257 ops/s
Iteration   2: 31279223.849 ops/s
Iteration   3: 31178526.531 ops/s
Iteration   4: 31300257.910 ops/s
Iteration   5: 31341827.747 ops/s
Iteration   6: 31340713.573 ops/s
Iteration   7: 31321626.607 ops/s
Iteration   8: 31029352.917 ops/s
Iteration   9: 31104730.024 ops/s
Iteration  10: 31215213.893 ops/s
Iteration  11: 31413989.599 ops/s
Iteration  12: 31348787.804 ops/s
Iteration  13: 31410388.684 ops/s
Iteration  14: 31405014.081 ops/s
Iteration  15: 31351728.158 ops/s
Iteration  16: 31328731.840 ops/s
Iteration  17: 31161294.507 ops/s
Iteration  18: 31214847.404 ops/s
Iteration  19: 31330643.580 ops/s
Iteration  20: 31202867.747 ops/s
Iteration  21: 31181837.381 ops/s
Iteration  22: 31301191.998 ops/s
Iteration  23: 31265456.150 ops/s
Iteration  24: 31219212.990 ops/s
Iteration  25: 31351995.579 ops/s
Iteration  26: 31230149.412 ops/s
Iteration  27: 31324771.629 ops/s
Iteration  28: 31298970.114 ops/s
Iteration  29: 31295882.331 ops/s
Iteration  30: 31152663.665 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_max_without_comparator":
  31266594.832 ±(99.9%) 65220.001 ops/s [Average]
  (min, avg, max) = (31029352.917, 31266594.832, 31413989.599), stdev = 97618.235
  CI (99.9%): [31201374.831, 31331814.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  31266594.832 ± 65220.001  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21215261.811 ops/s
# Warmup Iteration   2: 41465024.139 ops/s
# Warmup Iteration   3: 42243887.837 ops/s
# Warmup Iteration   4: 35970553.485 ops/s
# Warmup Iteration   5: 42153840.303 ops/s
# Warmup Iteration   6: 42199341.062 ops/s
# Warmup Iteration   7: 42336442.267 ops/s
# Warmup Iteration   8: 42241078.045 ops/s
# Warmup Iteration   9: 42268569.397 ops/s
# Warmup Iteration  10: 42260169.269 ops/s
# Warmup Iteration  11: 42293828.277 ops/s
# Warmup Iteration  12: 42094551.034 ops/s
# Warmup Iteration  13: 42434708.583 ops/s
# Warmup Iteration  14: 42309407.300 ops/s
# Warmup Iteration  15: 42150934.284 ops/s
# Warmup Iteration  16: 42301415.569 ops/s
# Warmup Iteration  17: 42378447.879 ops/s
# Warmup Iteration  18: 42377282.589 ops/s
# Warmup Iteration  19: 42201673.315 ops/s
# Warmup Iteration  20: 42308018.386 ops/s
# Warmup Iteration  21: 42338265.931 ops/s
# Warmup Iteration  22: 42371800.818 ops/s
# Warmup Iteration  23: 42302768.963 ops/s
# Warmup Iteration  24: 42329304.680 ops/s
# Warmup Iteration  25: 42311934.025 ops/s
# Warmup Iteration  26: 42123685.031 ops/s
# Warmup Iteration  27: 42309590.150 ops/s
# Warmup Iteration  28: 42318898.346 ops/s
# Warmup Iteration  29: 42312434.738 ops/s
# Warmup Iteration  30: 42327612.264 ops/s
Iteration   1: 42231590.728 ops/s
Iteration   2: 42452804.751 ops/s
Iteration   3: 42493063.438 ops/s
Iteration   4: 42373848.311 ops/s
Iteration   5: 42297277.347 ops/s
Iteration   6: 42335902.051 ops/s
Iteration   7: 42200014.890 ops/s
Iteration   8: 42266484.788 ops/s
Iteration   9: 42364629.920 ops/s
Iteration  10: 42094701.096 ops/s
Iteration  11: 42086019.025 ops/s
Iteration  12: 42130968.151 ops/s
Iteration  13: 41906566.490 ops/s
Iteration  14: 42292916.026 ops/s
Iteration  15: 42181233.295 ops/s
Iteration  16: 42301803.776 ops/s
Iteration  17: 42320169.484 ops/s
Iteration  18: 42305220.811 ops/s
Iteration  19: 42341425.152 ops/s
Iteration  20: 42208165.784 ops/s
Iteration  21: 42239810.946 ops/s
Iteration  22: 42122263.551 ops/s
Iteration  23: 42179532.033 ops/s
Iteration  24: 42201865.238 ops/s
Iteration  25: 42284978.030 ops/s
Iteration  26: 42140700.048 ops/s
Iteration  27: 42064175.971 ops/s
Iteration  28: 42313046.795 ops/s
Iteration  29: 42355114.880 ops/s
Iteration  30: 42269539.290 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_min":
  42245194.403 ±(99.9%) 82107.225 ops/s [Average]
  (min, avg, max) = (41906566.490, 42245194.403, 42493063.438), stdev = 122894.238
  CI (99.9%): [42163087.178, 42327301.628] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_min  thrpt   30  42245194.403 ± 82107.225  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8062126.402 ops/s
# Warmup Iteration   2: 16003057.718 ops/s
# Warmup Iteration   3: 13834992.748 ops/s
# Warmup Iteration   4: 16312640.480 ops/s
# Warmup Iteration   5: 16352443.366 ops/s
# Warmup Iteration   6: 16345704.891 ops/s
# Warmup Iteration   7: 16345935.364 ops/s
# Warmup Iteration   8: 16314976.481 ops/s
# Warmup Iteration   9: 16336148.191 ops/s
# Warmup Iteration  10: 16327478.781 ops/s
# Warmup Iteration  11: 16348898.733 ops/s
# Warmup Iteration  12: 16385252.202 ops/s
# Warmup Iteration  13: 16407193.205 ops/s
# Warmup Iteration  14: 16373350.568 ops/s
# Warmup Iteration  15: 16369269.847 ops/s
# Warmup Iteration  16: 16387918.016 ops/s
# Warmup Iteration  17: 16394468.803 ops/s
# Warmup Iteration  18: 16402993.713 ops/s
# Warmup Iteration  19: 16347336.014 ops/s
# Warmup Iteration  20: 16406463.732 ops/s
# Warmup Iteration  21: 16367067.501 ops/s
# Warmup Iteration  22: 16374160.533 ops/s
# Warmup Iteration  23: 16397731.861 ops/s
# Warmup Iteration  24: 16385996.103 ops/s
# Warmup Iteration  25: 16392527.361 ops/s
# Warmup Iteration  26: 16382859.379 ops/s
# Warmup Iteration  27: 16382647.729 ops/s
# Warmup Iteration  28: 16390894.633 ops/s
# Warmup Iteration  29: 16311071.615 ops/s
# Warmup Iteration  30: 16321555.597 ops/s
Iteration   1: 16424965.815 ops/s
Iteration   2: 16369624.291 ops/s
Iteration   3: 16389084.969 ops/s
Iteration   4: 16400777.442 ops/s
Iteration   5: 16429971.728 ops/s
Iteration   6: 16380009.135 ops/s
Iteration   7: 16373353.071 ops/s
Iteration   8: 16337184.861 ops/s
Iteration   9: 16447125.121 ops/s
Iteration  10: 16375510.102 ops/s
Iteration  11: 16399636.652 ops/s
Iteration  12: 16322226.964 ops/s
Iteration  13: 16430556.851 ops/s
Iteration  14: 16340984.508 ops/s
Iteration  15: 16305512.983 ops/s
Iteration  16: 16362101.913 ops/s
Iteration  17: 16289081.077 ops/s
Iteration  18: 16356108.007 ops/s
Iteration  19: 16442310.768 ops/s
Iteration  20: 16403412.681 ops/s
Iteration  21: 16363587.432 ops/s
Iteration  22: 16360806.651 ops/s
Iteration  23: 16410772.984 ops/s
Iteration  24: 16369447.487 ops/s
Iteration  25: 16350924.632 ops/s
Iteration  26: 16270545.714 ops/s
Iteration  27: 16377149.057 ops/s
Iteration  28: 16337459.205 ops/s
Iteration  29: 16363299.336 ops/s
Iteration  30: 16329171.975 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_minBy":
  16370423.447 ±(99.9%) 29078.184 ops/s [Average]
  (min, avg, max) = (16270545.714, 16370423.447, 16447125.121), stdev = 43522.860
  CI (99.9%): [16341345.263, 16399501.631] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_minBy  thrpt   30  16370423.447 ± 29078.184  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3641388.365 ops/s
# Warmup Iteration   2: 7980060.818 ops/s
# Warmup Iteration   3: 10583266.590 ops/s
# Warmup Iteration   4: 10600581.663 ops/s
# Warmup Iteration   5: 8797880.017 ops/s
# Warmup Iteration   6: 10624007.459 ops/s
# Warmup Iteration   7: 10628195.014 ops/s
# Warmup Iteration   8: 10642911.084 ops/s
# Warmup Iteration   9: 10616431.381 ops/s
# Warmup Iteration  10: 10647560.539 ops/s
# Warmup Iteration  11: 10616510.950 ops/s
# Warmup Iteration  12: 10612820.107 ops/s
# Warmup Iteration  13: 10594348.471 ops/s
# Warmup Iteration  14: 10640223.767 ops/s
# Warmup Iteration  15: 10612711.447 ops/s
# Warmup Iteration  16: 10637729.014 ops/s
# Warmup Iteration  17: 10619099.182 ops/s
# Warmup Iteration  18: 10632774.529 ops/s
# Warmup Iteration  19: 10625103.690 ops/s
# Warmup Iteration  20: 10636198.161 ops/s
# Warmup Iteration  21: 10618751.309 ops/s
# Warmup Iteration  22: 10635591.923 ops/s
# Warmup Iteration  23: 10617819.941 ops/s
# Warmup Iteration  24: 10621902.447 ops/s
# Warmup Iteration  25: 10616494.299 ops/s
# Warmup Iteration  26: 10638880.037 ops/s
# Warmup Iteration  27: 10625461.197 ops/s
# Warmup Iteration  28: 10618087.383 ops/s
# Warmup Iteration  29: 10625350.447 ops/s
# Warmup Iteration  30: 10615411.476 ops/s
Iteration   1: 10618052.211 ops/s
Iteration   2: 10650907.029 ops/s
Iteration   3: 10628876.444 ops/s
Iteration   4: 10636410.557 ops/s
Iteration   5: 10633681.873 ops/s
Iteration   6: 10665466.982 ops/s
Iteration   7: 10582696.608 ops/s
Iteration   8: 10621645.375 ops/s
Iteration   9: 10608248.285 ops/s
Iteration  10: 10620372.891 ops/s
Iteration  11: 10616644.055 ops/s
Iteration  12: 10587341.537 ops/s
Iteration  13: 10628498.497 ops/s
Iteration  14: 10671893.176 ops/s
Iteration  15: 10619168.405 ops/s
Iteration  16: 10600060.418 ops/s
Iteration  17: 10639157.662 ops/s
Iteration  18: 10622047.279 ops/s
Iteration  19: 10623858.510 ops/s
Iteration  20: 10648970.186 ops/s
Iteration  21: 10631213.225 ops/s
Iteration  22: 10664574.491 ops/s
Iteration  23: 10636128.081 ops/s
Iteration  24: 10598461.445 ops/s
Iteration  25: 10616394.557 ops/s
Iteration  26: 10621274.407 ops/s
Iteration  27: 10599615.966 ops/s
Iteration  28: 10640407.858 ops/s
Iteration  29: 10612757.149 ops/s
Iteration  30: 10653324.291 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_min_null_throws":
  10626604.982 ±(99.9%) 14730.979 ops/s [Average]
  (min, avg, max) = (10582696.608, 10626604.982, 10671893.176), stdev = 22048.638
  CI (99.9%): [10611874.003, 10641335.961] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_min_null_throws  thrpt   30  10626604.982 ± 14730.979  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4167454.303 ops/s
# Warmup Iteration   2: 9928855.792 ops/s
# Warmup Iteration   3: 9986915.535 ops/s
# Warmup Iteration   4: 8279834.372 ops/s
# Warmup Iteration   5: 9947140.436 ops/s
# Warmup Iteration   6: 9982206.483 ops/s
# Warmup Iteration   7: 9970583.192 ops/s
# Warmup Iteration   8: 9993628.543 ops/s
# Warmup Iteration   9: 9985429.944 ops/s
# Warmup Iteration  10: 9946335.839 ops/s
# Warmup Iteration  11: 9940169.249 ops/s
# Warmup Iteration  12: 9958208.005 ops/s
# Warmup Iteration  13: 9940987.917 ops/s
# Warmup Iteration  14: 9944344.383 ops/s
# Warmup Iteration  15: 9962149.540 ops/s
# Warmup Iteration  16: 9968827.668 ops/s
# Warmup Iteration  17: 9981748.511 ops/s
# Warmup Iteration  18: 9989466.870 ops/s
# Warmup Iteration  19: 9872399.071 ops/s
# Warmup Iteration  20: 9969668.587 ops/s
# Warmup Iteration  21: 9977872.304 ops/s
# Warmup Iteration  22: 9959744.653 ops/s
# Warmup Iteration  23: 9924413.708 ops/s
# Warmup Iteration  24: 9955764.758 ops/s
# Warmup Iteration  25: 9979194.598 ops/s
# Warmup Iteration  26: 9961454.140 ops/s
# Warmup Iteration  27: 9987126.694 ops/s
# Warmup Iteration  28: 9964122.903 ops/s
# Warmup Iteration  29: 9986069.053 ops/s
# Warmup Iteration  30: 10010689.473 ops/s
Iteration   1: 9936211.937 ops/s
Iteration   2: 9976027.836 ops/s
Iteration   3: 9988174.012 ops/s
Iteration   4: 9977386.295 ops/s
Iteration   5: 9978869.235 ops/s
Iteration   6: 9957498.321 ops/s
Iteration   7: 9928971.537 ops/s
Iteration   8: 9979100.711 ops/s
Iteration   9: 9983588.357 ops/s
Iteration  10: 9950173.126 ops/s
Iteration  11: 9947607.402 ops/s
Iteration  12: 9996550.811 ops/s
Iteration  13: 9965832.211 ops/s
Iteration  14: 9990572.059 ops/s
Iteration  15: 9945376.096 ops/s
Iteration  16: 9961724.688 ops/s
Iteration  17: 9959335.614 ops/s
Iteration  18: 9933912.412 ops/s
Iteration  19: 9954853.855 ops/s
Iteration  20: 9958340.036 ops/s
Iteration  21: 9973082.069 ops/s
Iteration  22: 10006821.646 ops/s
Iteration  23: 9939687.705 ops/s
Iteration  24: 9948615.408 ops/s
Iteration  25: 9964166.399 ops/s
Iteration  26: 9971976.000 ops/s
Iteration  27: 9999686.273 ops/s
Iteration  28: 9990305.952 ops/s
Iteration  29: 9980886.316 ops/s
Iteration  30: 9997856.413 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  9968106.358 ±(99.9%) 14202.532 ops/s [Average]
  (min, avg, max) = (9928971.537, 9968106.358, 10006821.646), stdev = 21257.682
  CI (99.9%): [9953903.826, 9982308.889] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  9968106.358 ± 14202.532  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21965022.281 ops/s
# Warmup Iteration   2: 42300856.552 ops/s
# Warmup Iteration   3: 46635488.448 ops/s
# Warmup Iteration   4: 39472974.261 ops/s
# Warmup Iteration   5: 46727536.308 ops/s
# Warmup Iteration   6: 46675650.208 ops/s
# Warmup Iteration   7: 46643542.068 ops/s
# Warmup Iteration   8: 46541467.308 ops/s
# Warmup Iteration   9: 46603667.120 ops/s
# Warmup Iteration  10: 46441071.920 ops/s
# Warmup Iteration  11: 46508198.486 ops/s
# Warmup Iteration  12: 46679986.371 ops/s
# Warmup Iteration  13: 46570603.211 ops/s
# Warmup Iteration  14: 46518309.841 ops/s
# Warmup Iteration  15: 46619115.406 ops/s
# Warmup Iteration  16: 46771828.284 ops/s
# Warmup Iteration  17: 46735584.486 ops/s
# Warmup Iteration  18: 46719150.897 ops/s
# Warmup Iteration  19: 46674276.566 ops/s
# Warmup Iteration  20: 46808764.989 ops/s
# Warmup Iteration  21: 46683274.696 ops/s
# Warmup Iteration  22: 46548699.492 ops/s
# Warmup Iteration  23: 46556382.816 ops/s
# Warmup Iteration  24: 46644723.264 ops/s
# Warmup Iteration  25: 46653918.845 ops/s
# Warmup Iteration  26: 46565726.684 ops/s
# Warmup Iteration  27: 46627481.912 ops/s
# Warmup Iteration  28: 46793811.484 ops/s
# Warmup Iteration  29: 46741304.377 ops/s
# Warmup Iteration  30: 46808197.718 ops/s
Iteration   1: 46729578.230 ops/s
Iteration   2: 46732568.007 ops/s
Iteration   3: 46690279.934 ops/s
Iteration   4: 46770585.791 ops/s
Iteration   5: 46769673.648 ops/s
Iteration   6: 46872469.519 ops/s
Iteration   7: 46654765.484 ops/s
Iteration   8: 46548847.759 ops/s
Iteration   9: 46526286.267 ops/s
Iteration  10: 46664697.325 ops/s
Iteration  11: 46786638.649 ops/s
Iteration  12: 46554373.885 ops/s
Iteration  13: 46695460.864 ops/s
Iteration  14: 46704829.293 ops/s
Iteration  15: 46854364.690 ops/s
Iteration  16: 46606677.317 ops/s
Iteration  17: 46626752.311 ops/s
Iteration  18: 46767306.244 ops/s
Iteration  19: 46758552.728 ops/s
Iteration  20: 46694308.399 ops/s
Iteration  21: 46752859.840 ops/s
Iteration  22: 46511248.610 ops/s
Iteration  23: 46629533.035 ops/s
Iteration  24: 46501773.228 ops/s
Iteration  25: 46475622.250 ops/s
Iteration  26: 46388820.430 ops/s
Iteration  27: 46545359.506 ops/s
Iteration  28: 46750529.027 ops/s
Iteration  29: 46307880.066 ops/s
Iteration  30: 46627313.312 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_min_without_comparator":
  46649998.522 ±(99.9%) 88855.633 ops/s [Average]
  (min, avg, max) = (46307880.066, 46649998.522, 46872469.519), stdev = 132994.938
  CI (99.9%): [46561142.889, 46738854.154] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  46649998.522 ± 88855.633  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7941304.098 ops/s
# Warmup Iteration   2: 15816614.563 ops/s
# Warmup Iteration   3: 15736500.625 ops/s
# Warmup Iteration   4: 13883779.497 ops/s
# Warmup Iteration   5: 15109472.338 ops/s
# Warmup Iteration   6: 15755294.699 ops/s
# Warmup Iteration   7: 15746981.214 ops/s
# Warmup Iteration   8: 15786165.102 ops/s
# Warmup Iteration   9: 15774808.158 ops/s
# Warmup Iteration  10: 15774707.717 ops/s
# Warmup Iteration  11: 15822495.202 ops/s
# Warmup Iteration  12: 15777546.510 ops/s
# Warmup Iteration  13: 15760918.928 ops/s
# Warmup Iteration  14: 15802848.854 ops/s
# Warmup Iteration  15: 15748106.851 ops/s
# Warmup Iteration  16: 15803422.563 ops/s
# Warmup Iteration  17: 15854645.380 ops/s
# Warmup Iteration  18: 15823218.685 ops/s
# Warmup Iteration  19: 15838907.621 ops/s
# Warmup Iteration  20: 15819751.423 ops/s
# Warmup Iteration  21: 15813638.849 ops/s
# Warmup Iteration  22: 15821713.553 ops/s
# Warmup Iteration  23: 15812505.963 ops/s
# Warmup Iteration  24: 15807906.125 ops/s
# Warmup Iteration  25: 15820384.784 ops/s
# Warmup Iteration  26: 15776120.687 ops/s
# Warmup Iteration  27: 15825290.736 ops/s
# Warmup Iteration  28: 15802130.724 ops/s
# Warmup Iteration  29: 15877834.737 ops/s
# Warmup Iteration  30: 15811661.147 ops/s
Iteration   1: 15854473.551 ops/s
Iteration   2: 15899804.327 ops/s
Iteration   3: 15835475.700 ops/s
Iteration   4: 15832295.133 ops/s
Iteration   5: 15807957.166 ops/s
Iteration   6: 15774338.439 ops/s
Iteration   7: 15803350.828 ops/s
Iteration   8: 15832774.878 ops/s
Iteration   9: 15889795.683 ops/s
Iteration  10: 15906741.626 ops/s
Iteration  11: 15857749.644 ops/s
Iteration  12: 15865304.438 ops/s
Iteration  13: 15863461.517 ops/s
Iteration  14: 15860413.518 ops/s
Iteration  15: 15879530.201 ops/s
Iteration  16: 15866551.066 ops/s
Iteration  17: 15846942.425 ops/s
Iteration  18: 15829808.621 ops/s
Iteration  19: 15807035.331 ops/s
Iteration  20: 15868907.823 ops/s
Iteration  21: 15862841.958 ops/s
Iteration  22: 15874139.292 ops/s
Iteration  23: 15866899.075 ops/s
Iteration  24: 15871424.610 ops/s
Iteration  25: 15893279.784 ops/s
Iteration  26: 15817407.875 ops/s
Iteration  27: 15892403.160 ops/s
Iteration  28: 15905062.137 ops/s
Iteration  29: 15841642.136 ops/s
Iteration  30: 15888457.865 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_noneSatisfy":
  15856542.327 ±(99.9%) 22077.381 ops/s [Average]
  (min, avg, max) = (15774338.439, 15856542.327, 15906741.626), stdev = 33044.388
  CI (99.9%): [15834464.946, 15878619.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  15856542.327 ± 22077.381  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7891973.875 ops/s
# Warmup Iteration   2: 15918593.148 ops/s
# Warmup Iteration   3: 16254282.834 ops/s
# Warmup Iteration   4: 13743873.661 ops/s
# Warmup Iteration   5: 16269559.408 ops/s
# Warmup Iteration   6: 16277694.510 ops/s
# Warmup Iteration   7: 16245111.183 ops/s
# Warmup Iteration   8: 16308914.120 ops/s
# Warmup Iteration   9: 16300203.123 ops/s
# Warmup Iteration  10: 16283056.116 ops/s
# Warmup Iteration  11: 16310645.737 ops/s
# Warmup Iteration  12: 16304969.509 ops/s
# Warmup Iteration  13: 16224259.941 ops/s
# Warmup Iteration  14: 16313199.080 ops/s
# Warmup Iteration  15: 16290089.353 ops/s
# Warmup Iteration  16: 16294182.589 ops/s
# Warmup Iteration  17: 16303822.321 ops/s
# Warmup Iteration  18: 16300890.453 ops/s
# Warmup Iteration  19: 16266617.603 ops/s
# Warmup Iteration  20: 16274465.994 ops/s
# Warmup Iteration  21: 16290864.132 ops/s
# Warmup Iteration  22: 16250231.706 ops/s
# Warmup Iteration  23: 16299958.531 ops/s
# Warmup Iteration  24: 16252533.190 ops/s
# Warmup Iteration  25: 16271639.115 ops/s
# Warmup Iteration  26: 16289168.482 ops/s
# Warmup Iteration  27: 16326119.737 ops/s
# Warmup Iteration  28: 16307577.387 ops/s
# Warmup Iteration  29: 16285831.816 ops/s
# Warmup Iteration  30: 16284965.374 ops/s
Iteration   1: 16336154.636 ops/s
Iteration   2: 16183954.847 ops/s
Iteration   3: 16226025.497 ops/s
Iteration   4: 16273932.187 ops/s
Iteration   5: 16274162.069 ops/s
Iteration   6: 16230203.718 ops/s
Iteration   7: 16267925.866 ops/s
Iteration   8: 16317165.132 ops/s
Iteration   9: 16211052.101 ops/s
Iteration  10: 16306342.103 ops/s
Iteration  11: 16299363.722 ops/s
Iteration  12: 16317163.801 ops/s
Iteration  13: 16304518.415 ops/s
Iteration  14: 16249097.619 ops/s
Iteration  15: 16226967.019 ops/s
Iteration  16: 16276139.061 ops/s
Iteration  17: 16204358.485 ops/s
Iteration  18: 16252551.392 ops/s
Iteration  19: 16291276.361 ops/s
Iteration  20: 16286878.258 ops/s
Iteration  21: 16254142.499 ops/s
Iteration  22: 16219476.592 ops/s
Iteration  23: 16306244.064 ops/s
Iteration  24: 16287391.057 ops/s
Iteration  25: 16284991.061 ops/s
Iteration  26: 16241148.507 ops/s
Iteration  27: 16274350.090 ops/s
Iteration  28: 16283291.289 ops/s
Iteration  29: 16264556.467 ops/s
Iteration  30: 16226218.616 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_noneSatisfyWith":
  16265901.418 ±(99.9%) 25251.432 ops/s [Average]
  (min, avg, max) = (16183954.847, 16265901.418, 16336154.636), stdev = 37795.157
  CI (99.9%): [16240649.986, 16291152.850] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  16265901.418 ± 25251.432  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12458.025 ops/s
# Warmup Iteration   2: 11765.062 ops/s
# Warmup Iteration   3: 11598.762 ops/s
# Warmup Iteration   4: 11427.650 ops/s
# Warmup Iteration   5: 11574.706 ops/s
# Warmup Iteration   6: 11620.206 ops/s
# Warmup Iteration   7: 14541.245 ops/s
# Warmup Iteration   8: 15812.661 ops/s
# Warmup Iteration   9: 15931.389 ops/s
# Warmup Iteration  10: 15725.592 ops/s
# Warmup Iteration  11: 15127.881 ops/s
# Warmup Iteration  12: 16160.381 ops/s
# Warmup Iteration  13: 15726.649 ops/s
# Warmup Iteration  14: 15733.706 ops/s
# Warmup Iteration  15: 16110.807 ops/s
# Warmup Iteration  16: 15764.518 ops/s
# Warmup Iteration  17: 16291.674 ops/s
# Warmup Iteration  18: 16101.813 ops/s
# Warmup Iteration  19: 16314.564 ops/s
# Warmup Iteration  20: 16166.519 ops/s
# Warmup Iteration  21: 15735.874 ops/s
# Warmup Iteration  22: 16283.403 ops/s
# Warmup Iteration  23: 16344.737 ops/s
# Warmup Iteration  24: 16028.038 ops/s
# Warmup Iteration  25: 16255.632 ops/s
# Warmup Iteration  26: 16015.870 ops/s
# Warmup Iteration  27: 15930.536 ops/s
# Warmup Iteration  28: 16040.620 ops/s
# Warmup Iteration  29: 16029.658 ops/s
# Warmup Iteration  30: 15863.264 ops/s
Iteration   1: 15721.980 ops/s
Iteration   2: 15857.244 ops/s
Iteration   3: 16196.345 ops/s
Iteration   4: 15717.247 ops/s
Iteration   5: 15811.458 ops/s
Iteration   6: 15765.953 ops/s
Iteration   7: 16108.811 ops/s
Iteration   8: 16061.305 ops/s
Iteration   9: 16297.105 ops/s
Iteration  10: 16219.515 ops/s
Iteration  11: 12198.089 ops/s
Iteration  12: 11997.847 ops/s
Iteration  13: 11633.264 ops/s
Iteration  14: 11890.590 ops/s
Iteration  15: 15650.462 ops/s
Iteration  16: 16707.824 ops/s
Iteration  17: 16289.681 ops/s
Iteration  18: 15348.632 ops/s
Iteration  19: 15857.857 ops/s
Iteration  20: 16182.801 ops/s
Iteration  21: 15788.558 ops/s
Iteration  22: 15882.939 ops/s
Iteration  23: 16082.182 ops/s
Iteration  24: 16053.363 ops/s
Iteration  25: 15518.907 ops/s
Iteration  26: 15849.346 ops/s
Iteration  27: 14814.287 ops/s
Iteration  28: 15268.323 ops/s
Iteration  29: 16241.283 ops/s
Iteration  30: 15855.288 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_parallelStream":
  15362.283 ±(99.9%) 946.588 ops/s [Average]
  (min, avg, max) = (11633.264, 15362.283, 16707.824), stdev = 1416.809
  CI (99.9%): [14415.695, 16308.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt      Score     Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_parallelStream  thrpt   30  15362.283 ± 946.588  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1514917.865 ops/s
# Warmup Iteration   2: 2416932.540 ops/s
# Warmup Iteration   3: 2673565.741 ops/s
# Warmup Iteration   4: 2708475.815 ops/s
# Warmup Iteration   5: 2693284.313 ops/s
# Warmup Iteration   6: 2344466.022 ops/s
# Warmup Iteration   7: 2601604.895 ops/s
# Warmup Iteration   8: 2698314.090 ops/s
# Warmup Iteration   9: 2701136.444 ops/s
# Warmup Iteration  10: 2698105.606 ops/s
# Warmup Iteration  11: 2695072.417 ops/s
# Warmup Iteration  12: 2704381.119 ops/s
# Warmup Iteration  13: 2707881.159 ops/s
# Warmup Iteration  14: 2706597.481 ops/s
# Warmup Iteration  15: 2700219.127 ops/s
# Warmup Iteration  16: 2704120.473 ops/s
# Warmup Iteration  17: 2705172.239 ops/s
# Warmup Iteration  18: 2703540.772 ops/s
# Warmup Iteration  19: 2701925.633 ops/s
# Warmup Iteration  20: 2703619.377 ops/s
# Warmup Iteration  21: 2706221.944 ops/s
# Warmup Iteration  22: 2704181.265 ops/s
# Warmup Iteration  23: 2701959.792 ops/s
# Warmup Iteration  24: 2700746.684 ops/s
# Warmup Iteration  25: 2705392.008 ops/s
# Warmup Iteration  26: 2700967.262 ops/s
# Warmup Iteration  27: 2704777.094 ops/s
# Warmup Iteration  28: 2708893.367 ops/s
# Warmup Iteration  29: 2710050.959 ops/s
# Warmup Iteration  30: 2707628.139 ops/s
Iteration   1: 2701086.768 ops/s
Iteration   2: 2696867.083 ops/s
Iteration   3: 2709775.589 ops/s
Iteration   4: 2694459.481 ops/s
Iteration   5: 2707743.819 ops/s
Iteration   6: 2697557.852 ops/s
Iteration   7: 2701687.894 ops/s
Iteration   8: 2703843.639 ops/s
Iteration   9: 2707365.940 ops/s
Iteration  10: 2705964.182 ops/s
Iteration  11: 2701764.819 ops/s
Iteration  12: 2709875.000 ops/s
Iteration  13: 2711396.370 ops/s
Iteration  14: 2697538.792 ops/s
Iteration  15: 2698241.250 ops/s
Iteration  16: 2703834.135 ops/s
Iteration  17: 2709422.508 ops/s
Iteration  18: 2708662.193 ops/s
Iteration  19: 2709420.030 ops/s
Iteration  20: 2709071.846 ops/s
Iteration  21: 2711751.493 ops/s
Iteration  22: 2706426.985 ops/s
Iteration  23: 2712131.189 ops/s
Iteration  24: 2705585.891 ops/s
Iteration  25: 2699136.514 ops/s
Iteration  26: 2702250.489 ops/s
Iteration  27: 2708707.731 ops/s
Iteration  28: 2693627.448 ops/s
Iteration  29: 2706590.574 ops/s
Iteration  30: 2697551.656 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_partition":
  2704311.305 ±(99.9%) 3662.925 ops/s [Average]
  (min, avg, max) = (2693627.448, 2704311.305, 2712131.189), stdev = 5482.494
  CI (99.9%): [2700648.380, 2707974.230] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_partition  thrpt   30  2704311.305 ± 3662.925  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1922501.397 ops/s
# Warmup Iteration   2: 3856150.440 ops/s
# Warmup Iteration   3: 3969013.186 ops/s
# Warmup Iteration   4: 3989308.143 ops/s
# Warmup Iteration   5: 3342435.900 ops/s
# Warmup Iteration   6: 3988891.150 ops/s
# Warmup Iteration   7: 3981313.589 ops/s
# Warmup Iteration   8: 3982542.649 ops/s
# Warmup Iteration   9: 3990440.033 ops/s
# Warmup Iteration  10: 3981897.912 ops/s
# Warmup Iteration  11: 3988030.651 ops/s
# Warmup Iteration  12: 3985795.132 ops/s
# Warmup Iteration  13: 3996405.113 ops/s
# Warmup Iteration  14: 3989704.720 ops/s
# Warmup Iteration  15: 3991035.580 ops/s
# Warmup Iteration  16: 3984042.817 ops/s
# Warmup Iteration  17: 3982273.735 ops/s
# Warmup Iteration  18: 3984315.571 ops/s
# Warmup Iteration  19: 3993966.162 ops/s
# Warmup Iteration  20: 3993350.019 ops/s
# Warmup Iteration  21: 3999049.275 ops/s
# Warmup Iteration  22: 3984445.124 ops/s
# Warmup Iteration  23: 3985111.050 ops/s
# Warmup Iteration  24: 3995594.397 ops/s
# Warmup Iteration  25: 3980193.417 ops/s
# Warmup Iteration  26: 3985611.961 ops/s
# Warmup Iteration  27: 3984955.095 ops/s
# Warmup Iteration  28: 3996234.159 ops/s
# Warmup Iteration  29: 3985579.350 ops/s
# Warmup Iteration  30: 3983248.422 ops/s
Iteration   1: 4000346.095 ops/s
Iteration   2: 3991146.216 ops/s
Iteration   3: 3986312.218 ops/s
Iteration   4: 3998035.297 ops/s
Iteration   5: 3994809.570 ops/s
Iteration   6: 3992067.857 ops/s
Iteration   7: 4000424.125 ops/s
Iteration   8: 3995660.313 ops/s
Iteration   9: 3992462.906 ops/s
Iteration  10: 3986963.702 ops/s
Iteration  11: 3999240.730 ops/s
Iteration  12: 3977499.404 ops/s
Iteration  13: 3991313.308 ops/s
Iteration  14: 4000761.380 ops/s
Iteration  15: 3950736.627 ops/s
Iteration  16: 3953297.736 ops/s
Iteration  17: 3947926.428 ops/s
Iteration  18: 3973961.627 ops/s
Iteration  19: 3959765.401 ops/s
Iteration  20: 3993735.288 ops/s
Iteration  21: 3990976.330 ops/s
Iteration  22: 3987872.359 ops/s
Iteration  23: 3999973.786 ops/s
Iteration  24: 4003786.256 ops/s
Iteration  25: 3983245.925 ops/s
Iteration  26: 3991315.820 ops/s
Iteration  27: 4000262.649 ops/s
Iteration  28: 3978812.590 ops/s
Iteration  29: 3991958.502 ops/s
Iteration  30: 3996701.884 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_partitionWhile":
  3987045.744 ±(99.9%) 10330.294 ops/s [Average]
  (min, avg, max) = (3947926.428, 3987045.744, 4003786.256), stdev = 15461.899
  CI (99.9%): [3976715.450, 3997376.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_partitionWhile  thrpt   30  3987045.744 ± 10330.294  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 892855.503 ops/s
# Warmup Iteration   2: 1334514.081 ops/s
# Warmup Iteration   3: 1537327.891 ops/s
# Warmup Iteration   4: 1545403.761 ops/s
# Warmup Iteration   5: 1553403.398 ops/s
# Warmup Iteration   6: 1546395.918 ops/s
# Warmup Iteration   7: 1304479.737 ops/s
# Warmup Iteration   8: 1552149.782 ops/s
# Warmup Iteration   9: 1550729.918 ops/s
# Warmup Iteration  10: 1549275.937 ops/s
# Warmup Iteration  11: 1558222.698 ops/s
# Warmup Iteration  12: 1551957.037 ops/s
# Warmup Iteration  13: 1543705.083 ops/s
# Warmup Iteration  14: 1545107.699 ops/s
# Warmup Iteration  15: 1554352.806 ops/s
# Warmup Iteration  16: 1553223.521 ops/s
# Warmup Iteration  17: 1541037.068 ops/s
# Warmup Iteration  18: 1555629.769 ops/s
# Warmup Iteration  19: 1554046.807 ops/s
# Warmup Iteration  20: 1556391.829 ops/s
# Warmup Iteration  21: 1545167.336 ops/s
# Warmup Iteration  22: 1551953.831 ops/s
# Warmup Iteration  23: 1550116.376 ops/s
# Warmup Iteration  24: 1554134.468 ops/s
# Warmup Iteration  25: 1552279.220 ops/s
# Warmup Iteration  26: 1553282.464 ops/s
# Warmup Iteration  27: 1553359.975 ops/s
# Warmup Iteration  28: 1555073.524 ops/s
# Warmup Iteration  29: 1554647.749 ops/s
# Warmup Iteration  30: 1551395.208 ops/s
Iteration   1: 1554155.844 ops/s
Iteration   2: 1555718.793 ops/s
Iteration   3: 1555676.461 ops/s
Iteration   4: 1555665.375 ops/s
Iteration   5: 1556022.005 ops/s
Iteration   6: 1556937.377 ops/s
Iteration   7: 1553961.361 ops/s
Iteration   8: 1553136.804 ops/s
Iteration   9: 1553778.317 ops/s
Iteration  10: 1556613.798 ops/s
Iteration  11: 1544709.815 ops/s
Iteration  12: 1546495.526 ops/s
Iteration  13: 1548809.341 ops/s
Iteration  14: 1554841.835 ops/s
Iteration  15: 1554459.472 ops/s
Iteration  16: 1549429.170 ops/s
Iteration  17: 1554237.250 ops/s
Iteration  18: 1549784.257 ops/s
Iteration  19: 1549896.680 ops/s
Iteration  20: 1557783.988 ops/s
Iteration  21: 1555034.744 ops/s
Iteration  22: 1549656.670 ops/s
Iteration  23: 1551006.452 ops/s
Iteration  24: 1552860.065 ops/s
Iteration  25: 1548925.836 ops/s
Iteration  26: 1547236.300 ops/s
Iteration  27: 1554687.897 ops/s
Iteration  28: 1561391.120 ops/s
Iteration  29: 1543695.108 ops/s
Iteration  30: 1545136.713 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_partitionWith":
  1552391.479 ±(99.9%) 2864.790 ops/s [Average]
  (min, avg, max) = (1543695.108, 1552391.479, 1561391.120), stdev = 4287.884
  CI (99.9%): [1549526.689, 1555256.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_partitionWith  thrpt   30  1552391.479 ± 2864.790  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3170496.622 ops/s
# Warmup Iteration   2: 6824372.635 ops/s
# Warmup Iteration   3: 6991150.670 ops/s
# Warmup Iteration   4: 6591662.856 ops/s
# Warmup Iteration   5: 6309138.774 ops/s
# Warmup Iteration   6: 6999936.787 ops/s
# Warmup Iteration   7: 7007477.833 ops/s
# Warmup Iteration   8: 7006761.783 ops/s
# Warmup Iteration   9: 7016849.814 ops/s
# Warmup Iteration  10: 7028510.062 ops/s
# Warmup Iteration  11: 6991405.620 ops/s
# Warmup Iteration  12: 6975607.593 ops/s
# Warmup Iteration  13: 7026465.533 ops/s
# Warmup Iteration  14: 7000742.005 ops/s
# Warmup Iteration  15: 7020414.941 ops/s
# Warmup Iteration  16: 7001287.277 ops/s
# Warmup Iteration  17: 7001334.586 ops/s
# Warmup Iteration  18: 7017847.272 ops/s
# Warmup Iteration  19: 7010046.916 ops/s
# Warmup Iteration  20: 7000467.765 ops/s
# Warmup Iteration  21: 7019083.485 ops/s
# Warmup Iteration  22: 7040244.077 ops/s
# Warmup Iteration  23: 7028967.088 ops/s
# Warmup Iteration  24: 7015068.334 ops/s
# Warmup Iteration  25: 7017325.017 ops/s
# Warmup Iteration  26: 7005714.345 ops/s
# Warmup Iteration  27: 7014530.559 ops/s
# Warmup Iteration  28: 7019179.211 ops/s
# Warmup Iteration  29: 7019303.130 ops/s
# Warmup Iteration  30: 7012106.922 ops/s
Iteration   1: 6996785.376 ops/s
Iteration   2: 7004999.515 ops/s
Iteration   3: 7033525.697 ops/s
Iteration   4: 6982273.646 ops/s
Iteration   5: 7012392.726 ops/s
Iteration   6: 7003237.002 ops/s
Iteration   7: 7011842.823 ops/s
Iteration   8: 6968912.699 ops/s
Iteration   9: 6999533.831 ops/s
Iteration  10: 6991201.866 ops/s
Iteration  11: 6992492.412 ops/s
Iteration  12: 7058460.701 ops/s
Iteration  13: 7000340.453 ops/s
Iteration  14: 6997823.745 ops/s
Iteration  15: 6975022.732 ops/s
Iteration  16: 7021751.529 ops/s
Iteration  17: 6971264.775 ops/s
Iteration  18: 6955578.022 ops/s
Iteration  19: 6967659.330 ops/s
Iteration  20: 6993254.349 ops/s
Iteration  21: 6951448.198 ops/s
Iteration  22: 6976975.815 ops/s
Iteration  23: 6971028.184 ops/s
Iteration  24: 6972137.576 ops/s
Iteration  25: 6955026.596 ops/s
Iteration  26: 6991282.085 ops/s
Iteration  27: 6960143.681 ops/s
Iteration  28: 6995327.719 ops/s
Iteration  29: 7006052.831 ops/s
Iteration  30: 7006861.212 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_reject":
  6990821.237 ±(99.9%) 16202.990 ops/s [Average]
  (min, avg, max) = (6951448.198, 6990821.237, 7058460.701), stdev = 24251.875
  CI (99.9%): [6974618.247, 7007024.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_reject  thrpt   30  6990821.237 ± 16202.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2094866.621 ops/s
# Warmup Iteration   2: 4448949.198 ops/s
# Warmup Iteration   3: 4615317.666 ops/s
# Warmup Iteration   4: 4632655.133 ops/s
# Warmup Iteration   5: 3884121.919 ops/s
# Warmup Iteration   6: 4636902.993 ops/s
# Warmup Iteration   7: 4636397.003 ops/s
# Warmup Iteration   8: 4657493.015 ops/s
# Warmup Iteration   9: 4643867.263 ops/s
# Warmup Iteration  10: 4648213.953 ops/s
# Warmup Iteration  11: 4640027.171 ops/s
# Warmup Iteration  12: 4642605.266 ops/s
# Warmup Iteration  13: 4644337.975 ops/s
# Warmup Iteration  14: 4655110.031 ops/s
# Warmup Iteration  15: 4629136.897 ops/s
# Warmup Iteration  16: 4638765.417 ops/s
# Warmup Iteration  17: 4638741.270 ops/s
# Warmup Iteration  18: 4645913.748 ops/s
# Warmup Iteration  19: 4660077.466 ops/s
# Warmup Iteration  20: 4642418.534 ops/s
# Warmup Iteration  21: 4662191.897 ops/s
# Warmup Iteration  22: 4646712.242 ops/s
# Warmup Iteration  23: 4640609.140 ops/s
# Warmup Iteration  24: 4652574.091 ops/s
# Warmup Iteration  25: 4654265.941 ops/s
# Warmup Iteration  26: 4660465.950 ops/s
# Warmup Iteration  27: 4653039.274 ops/s
# Warmup Iteration  28: 4644504.599 ops/s
# Warmup Iteration  29: 4647560.844 ops/s
# Warmup Iteration  30: 4658645.333 ops/s
Iteration   1: 4659607.461 ops/s
Iteration   2: 4632292.813 ops/s
Iteration   3: 4624516.014 ops/s
Iteration   4: 4659852.978 ops/s
Iteration   5: 4651008.822 ops/s
Iteration   6: 4654624.852 ops/s
Iteration   7: 4646052.153 ops/s
Iteration   8: 4655954.719 ops/s
Iteration   9: 4653213.762 ops/s
Iteration  10: 4643039.843 ops/s
Iteration  11: 4660355.846 ops/s
Iteration  12: 4650210.827 ops/s
Iteration  13: 4640640.798 ops/s
Iteration  14: 4652126.538 ops/s
Iteration  15: 4643697.104 ops/s
Iteration  16: 4650899.783 ops/s
Iteration  17: 4649236.428 ops/s
Iteration  18: 4643011.181 ops/s
Iteration  19: 4668109.025 ops/s
Iteration  20: 4666475.031 ops/s
Iteration  21: 4658537.369 ops/s
Iteration  22: 4662940.640 ops/s
Iteration  23: 4654813.144 ops/s
Iteration  24: 4665396.046 ops/s
Iteration  25: 4664640.894 ops/s
Iteration  26: 4662337.609 ops/s
Iteration  27: 4661687.259 ops/s
Iteration  28: 4666095.878 ops/s
Iteration  29: 4667516.307 ops/s
Iteration  30: 4660149.548 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_rejectWith":
  4654301.356 ±(99.9%) 7117.178 ops/s [Average]
  (min, avg, max) = (4624516.014, 4654301.356, 4668109.025), stdev = 10652.658
  CI (99.9%): [4647184.178, 4661418.534] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_rejectWith  thrpt   30  4654301.356 ± 7117.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3045511.124 ops/s
# Warmup Iteration   2: 7975813.895 ops/s
# Warmup Iteration   3: 8333707.611 ops/s
# Warmup Iteration   4: 8273481.502 ops/s
# Warmup Iteration   5: 7129390.482 ops/s
# Warmup Iteration   6: 8398754.621 ops/s
# Warmup Iteration   7: 8395665.291 ops/s
# Warmup Iteration   8: 8402157.174 ops/s
# Warmup Iteration   9: 8384975.944 ops/s
# Warmup Iteration  10: 8400783.411 ops/s
# Warmup Iteration  11: 8380746.065 ops/s
# Warmup Iteration  12: 8395878.399 ops/s
# Warmup Iteration  13: 8378272.972 ops/s
# Warmup Iteration  14: 8394128.075 ops/s
# Warmup Iteration  15: 8389369.535 ops/s
# Warmup Iteration  16: 8368891.280 ops/s
# Warmup Iteration  17: 8396410.046 ops/s
# Warmup Iteration  18: 8392271.879 ops/s
# Warmup Iteration  19: 8393628.717 ops/s
# Warmup Iteration  20: 8390612.289 ops/s
# Warmup Iteration  21: 8397166.809 ops/s
# Warmup Iteration  22: 8386763.344 ops/s
# Warmup Iteration  23: 8387895.861 ops/s
# Warmup Iteration  24: 8387132.943 ops/s
# Warmup Iteration  25: 8386936.180 ops/s
# Warmup Iteration  26: 8396364.539 ops/s
# Warmup Iteration  27: 8387449.827 ops/s
# Warmup Iteration  28: 8381323.223 ops/s
# Warmup Iteration  29: 8392552.134 ops/s
# Warmup Iteration  30: 8401465.669 ops/s
Iteration   1: 8394057.141 ops/s
Iteration   2: 8383990.623 ops/s
Iteration   3: 8384743.820 ops/s
Iteration   4: 8398570.354 ops/s
Iteration   5: 8392528.951 ops/s
Iteration   6: 8391627.651 ops/s
Iteration   7: 8412917.943 ops/s
Iteration   8: 8378051.468 ops/s
Iteration   9: 8381110.434 ops/s
Iteration  10: 8375116.908 ops/s
Iteration  11: 8385574.378 ops/s
Iteration  12: 8399306.714 ops/s
Iteration  13: 8391884.699 ops/s
Iteration  14: 8387874.820 ops/s
Iteration  15: 8392458.140 ops/s
Iteration  16: 8381538.999 ops/s
Iteration  17: 8393180.782 ops/s
Iteration  18: 8410107.253 ops/s
Iteration  19: 8384669.404 ops/s
Iteration  20: 8384719.389 ops/s
Iteration  21: 8389786.685 ops/s
Iteration  22: 8409927.878 ops/s
Iteration  23: 8384329.923 ops/s
Iteration  24: 8398024.400 ops/s
Iteration  25: 8387857.915 ops/s
Iteration  26: 8385252.540 ops/s
Iteration  27: 8401207.871 ops/s
Iteration  28: 8399234.255 ops/s
Iteration  29: 8381668.402 ops/s
Iteration  30: 8363363.697 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_rejectWithIndex":
  8390156.115 ±(99.9%) 7131.060 ops/s [Average]
  (min, avg, max) = (8363363.697, 8390156.115, 8412917.943), stdev = 10673.436
  CI (99.9%): [8383025.055, 8397287.174] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  8390156.115 ± 7131.060  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2296556.509 ops/s
# Warmup Iteration   2: 5778841.220 ops/s
# Warmup Iteration   3: 5874503.123 ops/s
# Warmup Iteration   4: 4864520.309 ops/s
# Warmup Iteration   5: 5868972.762 ops/s
# Warmup Iteration   6: 5880437.832 ops/s
# Warmup Iteration   7: 5860571.635 ops/s
# Warmup Iteration   8: 5887908.367 ops/s
# Warmup Iteration   9: 5895061.301 ops/s
# Warmup Iteration  10: 5887726.480 ops/s
# Warmup Iteration  11: 5881589.045 ops/s
# Warmup Iteration  12: 5870250.919 ops/s
# Warmup Iteration  13: 5885144.751 ops/s
# Warmup Iteration  14: 5867913.251 ops/s
# Warmup Iteration  15: 5881711.890 ops/s
# Warmup Iteration  16: 5877898.455 ops/s
# Warmup Iteration  17: 5890839.865 ops/s
# Warmup Iteration  18: 5881270.097 ops/s
# Warmup Iteration  19: 5872152.876 ops/s
# Warmup Iteration  20: 5880524.307 ops/s
# Warmup Iteration  21: 5896174.891 ops/s
# Warmup Iteration  22: 5894753.853 ops/s
# Warmup Iteration  23: 5898188.315 ops/s
# Warmup Iteration  24: 5899037.021 ops/s
# Warmup Iteration  25: 5877272.507 ops/s
# Warmup Iteration  26: 5901177.202 ops/s
# Warmup Iteration  27: 5863614.997 ops/s
# Warmup Iteration  28: 5890539.298 ops/s
# Warmup Iteration  29: 5886556.206 ops/s
# Warmup Iteration  30: 5878425.585 ops/s
Iteration   1: 5844954.387 ops/s
Iteration   2: 5865674.609 ops/s
Iteration   3: 5893122.610 ops/s
Iteration   4: 5892043.380 ops/s
Iteration   5: 5891150.970 ops/s
Iteration   6: 5872928.943 ops/s
Iteration   7: 5886528.118 ops/s
Iteration   8: 5878561.765 ops/s
Iteration   9: 5876572.699 ops/s
Iteration  10: 5890505.854 ops/s
Iteration  11: 5887964.554 ops/s
Iteration  12: 5880721.822 ops/s
Iteration  13: 5886497.350 ops/s
Iteration  14: 5872685.902 ops/s
Iteration  15: 5891203.207 ops/s
Iteration  16: 5773689.713 ops/s
Iteration  17: 5900789.612 ops/s
Iteration  18: 5891343.370 ops/s
Iteration  19: 5865994.409 ops/s
Iteration  20: 5863622.583 ops/s
Iteration  21: 5858731.417 ops/s
Iteration  22: 5850406.445 ops/s
Iteration  23: 5893416.766 ops/s
Iteration  24: 5898661.223 ops/s
Iteration  25: 5893716.256 ops/s
Iteration  26: 5891866.405 ops/s
Iteration  27: 5884543.052 ops/s
Iteration  28: 5874170.581 ops/s
Iteration  29: 5866815.157 ops/s
Iteration  30: 5861011.204 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  5875996.479 ±(99.9%) 16175.032 ops/s [Average]
  (min, avg, max) = (5773689.713, 5875996.479, 5900789.612), stdev = 24210.028
  CI (99.9%): [5859821.447, 5892171.510] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  5875996.479 ± 16175.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2561627.611 ops/s
# Warmup Iteration   2: 5860666.958 ops/s
# Warmup Iteration   3: 5879540.891 ops/s
# Warmup Iteration   4: 4947298.261 ops/s
# Warmup Iteration   5: 5912265.518 ops/s
# Warmup Iteration   6: 5903887.736 ops/s
# Warmup Iteration   7: 5900635.401 ops/s
# Warmup Iteration   8: 5919351.844 ops/s
# Warmup Iteration   9: 5892287.774 ops/s
# Warmup Iteration  10: 5906748.616 ops/s
# Warmup Iteration  11: 5914387.677 ops/s
# Warmup Iteration  12: 5896535.781 ops/s
# Warmup Iteration  13: 5885762.202 ops/s
# Warmup Iteration  14: 5900476.695 ops/s
# Warmup Iteration  15: 5872492.751 ops/s
# Warmup Iteration  16: 5890248.393 ops/s
# Warmup Iteration  17: 5868364.805 ops/s
# Warmup Iteration  18: 5891492.882 ops/s
# Warmup Iteration  19: 5916083.187 ops/s
# Warmup Iteration  20: 5912711.603 ops/s
# Warmup Iteration  21: 5901770.730 ops/s
# Warmup Iteration  22: 5891107.602 ops/s
# Warmup Iteration  23: 5874788.417 ops/s
# Warmup Iteration  24: 5913994.110 ops/s
# Warmup Iteration  25: 5918749.331 ops/s
# Warmup Iteration  26: 5895803.665 ops/s
# Warmup Iteration  27: 5885309.412 ops/s
# Warmup Iteration  28: 5889082.769 ops/s
# Warmup Iteration  29: 5915281.474 ops/s
# Warmup Iteration  30: 5915558.045 ops/s
Iteration   1: 5916033.932 ops/s
Iteration   2: 5894284.928 ops/s
Iteration   3: 5912244.697 ops/s
Iteration   4: 5910696.905 ops/s
Iteration   5: 5924444.351 ops/s
Iteration   6: 5917701.447 ops/s
Iteration   7: 5884165.560 ops/s
Iteration   8: 5896793.448 ops/s
Iteration   9: 5885186.054 ops/s
Iteration  10: 5878845.282 ops/s
Iteration  11: 5896634.622 ops/s
Iteration  12: 5912461.550 ops/s
Iteration  13: 5923159.161 ops/s
Iteration  14: 5900394.685 ops/s
Iteration  15: 5897119.730 ops/s
Iteration  16: 5894922.760 ops/s
Iteration  17: 5902397.431 ops/s
Iteration  18: 5894408.534 ops/s
Iteration  19: 5909308.199 ops/s
Iteration  20: 5909792.163 ops/s
Iteration  21: 5910571.299 ops/s
Iteration  22: 5898062.379 ops/s
Iteration  23: 5883740.919 ops/s
Iteration  24: 5875337.662 ops/s
Iteration  25: 5932360.022 ops/s
Iteration  26: 5913254.989 ops/s
Iteration  27: 5918386.007 ops/s
Iteration  28: 5905347.672 ops/s
Iteration  29: 5900577.631 ops/s
Iteration  30: 5886416.724 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_rejectWith_target":
  5902835.025 ±(99.9%) 9506.211 ops/s [Average]
  (min, avg, max) = (5875337.662, 5902835.025, 5932360.022), stdev = 14228.451
  CI (99.9%): [5893328.813, 5912341.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  5902835.025 ± 9506.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_reject_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_reject_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5242638.441 ops/s
# Warmup Iteration   2: 11747860.408 ops/s
# Warmup Iteration   3: 10865551.665 ops/s
# Warmup Iteration   4: 10787119.982 ops/s
# Warmup Iteration   5: 11835093.149 ops/s
# Warmup Iteration   6: 11819793.080 ops/s
# Warmup Iteration   7: 11799276.791 ops/s
# Warmup Iteration   8: 11814725.644 ops/s
# Warmup Iteration   9: 11771178.308 ops/s
# Warmup Iteration  10: 11817779.196 ops/s
# Warmup Iteration  11: 11801993.234 ops/s
# Warmup Iteration  12: 11824078.570 ops/s
# Warmup Iteration  13: 11813369.783 ops/s
# Warmup Iteration  14: 11834269.258 ops/s
# Warmup Iteration  15: 11822214.842 ops/s
# Warmup Iteration  16: 11782640.348 ops/s
# Warmup Iteration  17: 11841082.427 ops/s
# Warmup Iteration  18: 11814149.788 ops/s
# Warmup Iteration  19: 11837927.733 ops/s
# Warmup Iteration  20: 11830940.296 ops/s
# Warmup Iteration  21: 11781017.082 ops/s
# Warmup Iteration  22: 11797873.652 ops/s
# Warmup Iteration  23: 11833335.009 ops/s
# Warmup Iteration  24: 11849431.825 ops/s
# Warmup Iteration  25: 11820773.337 ops/s
# Warmup Iteration  26: 11819994.443 ops/s
# Warmup Iteration  27: 11835866.092 ops/s
# Warmup Iteration  28: 11828780.943 ops/s
# Warmup Iteration  29: 11243370.396 ops/s
# Warmup Iteration  30: 11852589.747 ops/s
Iteration   1: 11855058.926 ops/s
Iteration   2: 11858690.307 ops/s
Iteration   3: 11850432.091 ops/s
Iteration   4: 11850938.076 ops/s
Iteration   5: 11848358.934 ops/s
Iteration   6: 11834508.663 ops/s
Iteration   7: 11807802.912 ops/s
Iteration   8: 11816491.682 ops/s
Iteration   9: 11821337.303 ops/s
Iteration  10: 11819571.714 ops/s
Iteration  11: 11799501.977 ops/s
Iteration  12: 11801458.658 ops/s
Iteration  13: 11835544.159 ops/s
Iteration  14: 11829850.641 ops/s
Iteration  15: 11723476.879 ops/s
Iteration  16: 11720479.414 ops/s
Iteration  17: 11783463.071 ops/s
Iteration  18: 11790306.488 ops/s
Iteration  19: 11821724.402 ops/s
Iteration  20: 11794671.456 ops/s
Iteration  21: 11806680.173 ops/s
Iteration  22: 11833091.286 ops/s
Iteration  23: 11832875.316 ops/s
Iteration  24: 11803981.818 ops/s
Iteration  25: 11821267.741 ops/s
Iteration  26: 11865360.534 ops/s
Iteration  27: 11786655.076 ops/s
Iteration  28: 11824179.153 ops/s
Iteration  29: 11794540.295 ops/s
Iteration  30: 11730648.677 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_reject_target":
  11812098.261 ±(99.9%) 24716.868 ops/s [Average]
  (min, avg, max) = (11720479.414, 11812098.261, 11865360.534), stdev = 36995.047
  CI (99.9%): [11787381.393, 11836815.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_reject_target  thrpt   30  11812098.261 ± 24716.868  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 742461.872 ops/s
# Warmup Iteration   2: 774080.206 ops/s
# Warmup Iteration   3: 960308.814 ops/s
# Warmup Iteration   4: 954725.456 ops/s
# Warmup Iteration   5: 949384.982 ops/s
# Warmup Iteration   6: 957014.909 ops/s
# Warmup Iteration   7: 954663.838 ops/s
# Warmup Iteration   8: 949963.219 ops/s
# Warmup Iteration   9: 953961.311 ops/s
# Warmup Iteration  10: 953909.556 ops/s
# Warmup Iteration  11: 951453.943 ops/s
# Warmup Iteration  12: 820363.566 ops/s
# Warmup Iteration  13: 945765.459 ops/s
# Warmup Iteration  14: 945782.401 ops/s
# Warmup Iteration  15: 954588.255 ops/s
# Warmup Iteration  16: 952655.483 ops/s
# Warmup Iteration  17: 994000.799 ops/s
# Warmup Iteration  18: 996033.428 ops/s
# Warmup Iteration  19: 996317.044 ops/s
# Warmup Iteration  20: 997607.298 ops/s
# Warmup Iteration  21: 996100.429 ops/s
# Warmup Iteration  22: 999568.618 ops/s
# Warmup Iteration  23: 1002599.270 ops/s
# Warmup Iteration  24: 996169.983 ops/s
# Warmup Iteration  25: 997518.080 ops/s
# Warmup Iteration  26: 995778.898 ops/s
# Warmup Iteration  27: 1003406.193 ops/s
# Warmup Iteration  28: 1003530.244 ops/s
# Warmup Iteration  29: 1000601.942 ops/s
# Warmup Iteration  30: 1000191.006 ops/s
Iteration   1: 996360.235 ops/s
Iteration   2: 999135.856 ops/s
Iteration   3: 997402.422 ops/s
Iteration   4: 1003749.229 ops/s
Iteration   5: 1001924.641 ops/s
Iteration   6: 1000468.108 ops/s
Iteration   7: 990848.006 ops/s
Iteration   8: 997705.466 ops/s
Iteration   9: 1003467.369 ops/s
Iteration  10: 1000903.571 ops/s
Iteration  11: 994762.290 ops/s
Iteration  12: 992964.889 ops/s
Iteration  13: 1001520.319 ops/s
Iteration  14: 1000102.371 ops/s
Iteration  15: 1003059.529 ops/s
Iteration  16: 1000869.418 ops/s
Iteration  17: 993159.978 ops/s
Iteration  18: 995360.537 ops/s
Iteration  19: 985294.254 ops/s
Iteration  20: 998382.197 ops/s
Iteration  21: 996465.803 ops/s
Iteration  22: 993629.385 ops/s
Iteration  23: 996972.924 ops/s
Iteration  24: 994577.470 ops/s
Iteration  25: 998965.462 ops/s
Iteration  26: 994085.799 ops/s
Iteration  27: 995402.549 ops/s
Iteration  28: 994593.274 ops/s
Iteration  29: 1002259.674 ops/s
Iteration  30: 1000645.747 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_remove":
  997501.292 ±(99.9%) 2811.152 ops/s [Average]
  (min, avg, max) = (985294.254, 997501.292, 1003749.229), stdev = 4207.601
  CI (99.9%): [994690.140, 1000312.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_remove  thrpt   30  997501.292 ± 2811.152  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 734363.494 ops/s
# Warmup Iteration   2: 785710.736 ops/s
# Warmup Iteration   3: 981428.591 ops/s
# Warmup Iteration   4: 977301.311 ops/s
# Warmup Iteration   5: 969660.176 ops/s
# Warmup Iteration   6: 971804.505 ops/s
# Warmup Iteration   7: 983249.339 ops/s
# Warmup Iteration   8: 983467.475 ops/s
# Warmup Iteration   9: 980761.984 ops/s
# Warmup Iteration  10: 978393.589 ops/s
# Warmup Iteration  11: 943517.549 ops/s
# Warmup Iteration  12: 862825.758 ops/s
# Warmup Iteration  13: 978991.052 ops/s
# Warmup Iteration  14: 977436.341 ops/s
# Warmup Iteration  15: 976654.016 ops/s
# Warmup Iteration  16: 978111.872 ops/s
# Warmup Iteration  17: 1034367.119 ops/s
# Warmup Iteration  18: 1033850.561 ops/s
# Warmup Iteration  19: 1034817.703 ops/s
# Warmup Iteration  20: 1035820.785 ops/s
# Warmup Iteration  21: 1039038.970 ops/s
# Warmup Iteration  22: 1036063.637 ops/s
# Warmup Iteration  23: 1035598.591 ops/s
# Warmup Iteration  24: 1027698.109 ops/s
# Warmup Iteration  25: 1037090.395 ops/s
# Warmup Iteration  26: 1036223.323 ops/s
# Warmup Iteration  27: 1030073.709 ops/s
# Warmup Iteration  28: 1035429.008 ops/s
# Warmup Iteration  29: 1034548.331 ops/s
# Warmup Iteration  30: 1032162.793 ops/s
Iteration   1: 1039418.951 ops/s
Iteration   2: 1037675.309 ops/s
Iteration   3: 1035446.529 ops/s
Iteration   4: 1037905.880 ops/s
Iteration   5: 1038850.704 ops/s
Iteration   6: 1035656.400 ops/s
Iteration   7: 1034654.016 ops/s
Iteration   8: 1037253.963 ops/s
Iteration   9: 1037082.889 ops/s
Iteration  10: 1041672.124 ops/s
Iteration  11: 1041386.932 ops/s
Iteration  12: 1040614.787 ops/s
Iteration  13: 1040202.295 ops/s
Iteration  14: 1042912.027 ops/s
Iteration  15: 1040269.958 ops/s
Iteration  16: 1039078.062 ops/s
Iteration  17: 1038928.974 ops/s
Iteration  18: 1032724.000 ops/s
Iteration  19: 1027250.448 ops/s
Iteration  20: 1039134.231 ops/s
Iteration  21: 1034944.842 ops/s
Iteration  22: 1033247.380 ops/s
Iteration  23: 1035431.073 ops/s
Iteration  24: 1033663.239 ops/s
Iteration  25: 1037019.456 ops/s
Iteration  26: 1036033.313 ops/s
Iteration  27: 1041754.461 ops/s
Iteration  28: 1039257.605 ops/s
Iteration  29: 1040672.721 ops/s
Iteration  30: 1039018.327 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_removeAll":
  1037638.697 ±(99.9%) 2226.901 ops/s [Average]
  (min, avg, max) = (1027250.448, 1037638.697, 1042912.027), stdev = 3333.121
  CI (99.9%): [1035411.795, 1039865.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_removeAll  thrpt   30  1037638.697 ± 2226.901  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 756419.565 ops/s
# Warmup Iteration   2: 800009.001 ops/s
# Warmup Iteration   3: 1006072.502 ops/s
# Warmup Iteration   4: 1002808.407 ops/s
# Warmup Iteration   5: 990944.542 ops/s
# Warmup Iteration   6: 1003073.025 ops/s
# Warmup Iteration   7: 1003100.542 ops/s
# Warmup Iteration   8: 1002652.011 ops/s
# Warmup Iteration   9: 1005380.257 ops/s
# Warmup Iteration  10: 1003581.578 ops/s
# Warmup Iteration  11: 935405.007 ops/s
# Warmup Iteration  12: 924393.723 ops/s
# Warmup Iteration  13: 1012469.769 ops/s
# Warmup Iteration  14: 1008919.076 ops/s
# Warmup Iteration  15: 1008567.654 ops/s
# Warmup Iteration  16: 1006839.680 ops/s
# Warmup Iteration  17: 1069515.452 ops/s
# Warmup Iteration  18: 1064232.925 ops/s
# Warmup Iteration  19: 1066133.496 ops/s
# Warmup Iteration  20: 1066024.536 ops/s
# Warmup Iteration  21: 1064270.546 ops/s
# Warmup Iteration  22: 1061853.564 ops/s
# Warmup Iteration  23: 1065531.778 ops/s
# Warmup Iteration  24: 1066167.265 ops/s
# Warmup Iteration  25: 1068905.848 ops/s
# Warmup Iteration  26: 1067068.871 ops/s
# Warmup Iteration  27: 1067449.450 ops/s
# Warmup Iteration  28: 1066755.848 ops/s
# Warmup Iteration  29: 1065707.086 ops/s
# Warmup Iteration  30: 1062378.183 ops/s
Iteration   1: 1066511.678 ops/s
Iteration   2: 1057040.608 ops/s
Iteration   3: 1060889.172 ops/s
Iteration   4: 1059887.368 ops/s
Iteration   5: 1062214.217 ops/s
Iteration   6: 1063608.968 ops/s
Iteration   7: 1065607.274 ops/s
Iteration   8: 1066124.275 ops/s
Iteration   9: 1068833.601 ops/s
Iteration  10: 1064359.441 ops/s
Iteration  11: 1067466.025 ops/s
Iteration  12: 1065275.423 ops/s
Iteration  13: 1068134.807 ops/s
Iteration  14: 1069585.055 ops/s
Iteration  15: 1068827.279 ops/s
Iteration  16: 1011238.383 ops/s
Iteration  17: 1070075.707 ops/s
Iteration  18: 1069493.194 ops/s
Iteration  19: 1061789.568 ops/s
Iteration  20: 1061047.001 ops/s
Iteration  21: 1062183.031 ops/s
Iteration  22: 1064468.565 ops/s
Iteration  23: 1062460.051 ops/s
Iteration  24: 1067561.263 ops/s
Iteration  25: 1066136.760 ops/s
Iteration  26: 1066086.807 ops/s
Iteration  27: 1067437.481 ops/s
Iteration  28: 1065232.370 ops/s
Iteration  29: 1064491.132 ops/s
Iteration  30: 1063127.679 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_removeAtIndex":
  1063239.806 ±(99.9%) 6895.936 ops/s [Average]
  (min, avg, max) = (1011238.383, 1063239.806, 1070075.707), stdev = 10321.513
  CI (99.9%): [1056343.870, 1070135.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1063239.806 ± 6895.936  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749139.467 ops/s
# Warmup Iteration   2: 799151.743 ops/s
# Warmup Iteration   3: 1007777.271 ops/s
# Warmup Iteration   4: 1008779.657 ops/s
# Warmup Iteration   5: 1001236.283 ops/s
# Warmup Iteration   6: 1004308.322 ops/s
# Warmup Iteration   7: 1003091.370 ops/s
# Warmup Iteration   8: 1003766.196 ops/s
# Warmup Iteration   9: 1003290.846 ops/s
# Warmup Iteration  10: 999779.567 ops/s
# Warmup Iteration  11: 904345.027 ops/s
# Warmup Iteration  12: 945849.796 ops/s
# Warmup Iteration  13: 1006831.140 ops/s
# Warmup Iteration  14: 1005979.464 ops/s
# Warmup Iteration  15: 1006809.955 ops/s
# Warmup Iteration  16: 1005220.617 ops/s
# Warmup Iteration  17: 1070384.456 ops/s
# Warmup Iteration  18: 1071910.423 ops/s
# Warmup Iteration  19: 1076787.530 ops/s
# Warmup Iteration  20: 1078437.148 ops/s
# Warmup Iteration  21: 1075732.570 ops/s
# Warmup Iteration  22: 1070409.008 ops/s
# Warmup Iteration  23: 1071717.647 ops/s
# Warmup Iteration  24: 1075369.517 ops/s
# Warmup Iteration  25: 1072486.770 ops/s
# Warmup Iteration  26: 1071948.232 ops/s
# Warmup Iteration  27: 1074612.482 ops/s
# Warmup Iteration  28: 1074214.884 ops/s
# Warmup Iteration  29: 1076801.980 ops/s
# Warmup Iteration  30: 1074883.367 ops/s
Iteration   1: 1077023.374 ops/s
Iteration   2: 1069010.378 ops/s
Iteration   3: 1073927.936 ops/s
Iteration   4: 1070617.103 ops/s
Iteration   5: 1072182.446 ops/s
Iteration   6: 1070545.212 ops/s
Iteration   7: 1062375.022 ops/s
Iteration   8: 1073443.266 ops/s
Iteration   9: 1073170.218 ops/s
Iteration  10: 1074637.428 ops/s
Iteration  11: 1075622.875 ops/s
Iteration  12: 1076359.847 ops/s
Iteration  13: 1077689.391 ops/s
Iteration  14: 1072986.199 ops/s
Iteration  15: 1075647.028 ops/s
Iteration  16: 1075816.855 ops/s
Iteration  17: 1075514.839 ops/s
Iteration  18: 1073075.295 ops/s
Iteration  19: 1076786.076 ops/s
Iteration  20: 1073150.643 ops/s
Iteration  21: 1067252.846 ops/s
Iteration  22: 1070477.175 ops/s
Iteration  23: 1073229.738 ops/s
Iteration  24: 1073586.645 ops/s
Iteration  25: 1075208.626 ops/s
Iteration  26: 1071716.337 ops/s
Iteration  27: 1072642.369 ops/s
Iteration  28: 1077195.778 ops/s
Iteration  29: 1074293.938 ops/s
Iteration  30: 1077431.066 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_replaceAll":
  1073420.532 ±(99.9%) 2208.836 ops/s [Average]
  (min, avg, max) = (1062375.022, 1073420.532, 1077689.391), stdev = 3306.082
  CI (99.9%): [1071211.696, 1075629.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_replaceAll  thrpt   30  1073420.532 ± 2208.836  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 732432.909 ops/s
# Warmup Iteration   2: 782210.194 ops/s
# Warmup Iteration   3: 960043.795 ops/s
# Warmup Iteration   4: 955255.754 ops/s
# Warmup Iteration   5: 955652.559 ops/s
# Warmup Iteration   6: 958379.534 ops/s
# Warmup Iteration   7: 961120.331 ops/s
# Warmup Iteration   8: 957668.771 ops/s
# Warmup Iteration   9: 963909.252 ops/s
# Warmup Iteration  10: 960781.386 ops/s
# Warmup Iteration  11: 959748.149 ops/s
# Warmup Iteration  12: 825116.173 ops/s
# Warmup Iteration  13: 955549.887 ops/s
# Warmup Iteration  14: 960642.269 ops/s
# Warmup Iteration  15: 953851.906 ops/s
# Warmup Iteration  16: 959525.847 ops/s
# Warmup Iteration  17: 1011524.909 ops/s
# Warmup Iteration  18: 1015786.735 ops/s
# Warmup Iteration  19: 1016231.094 ops/s
# Warmup Iteration  20: 1015420.194 ops/s
# Warmup Iteration  21: 1015933.582 ops/s
# Warmup Iteration  22: 1016451.217 ops/s
# Warmup Iteration  23: 1018231.993 ops/s
# Warmup Iteration  24: 1017724.152 ops/s
# Warmup Iteration  25: 1019099.103 ops/s
# Warmup Iteration  26: 1016981.494 ops/s
# Warmup Iteration  27: 1020638.694 ops/s
# Warmup Iteration  28: 1017158.610 ops/s
# Warmup Iteration  29: 1018998.696 ops/s
# Warmup Iteration  30: 1017392.130 ops/s
Iteration   1: 1017250.013 ops/s
Iteration   2: 1019054.977 ops/s
Iteration   3: 1010039.917 ops/s
Iteration   4: 1014391.732 ops/s
Iteration   5: 1011873.337 ops/s
Iteration   6: 1015998.338 ops/s
Iteration   7: 1015577.400 ops/s
Iteration   8: 1013457.600 ops/s
Iteration   9: 1012040.593 ops/s
Iteration  10: 1012251.957 ops/s
Iteration  11: 1014593.324 ops/s
Iteration  12: 1016645.917 ops/s
Iteration  13: 1015324.469 ops/s
Iteration  14: 1017135.722 ops/s
Iteration  15: 1015055.883 ops/s
Iteration  16: 1010230.752 ops/s
Iteration  17: 1008617.932 ops/s
Iteration  18: 1015754.104 ops/s
Iteration  19: 1018506.809 ops/s
Iteration  20: 1016715.985 ops/s
Iteration  21: 1016820.568 ops/s
Iteration  22: 1015364.971 ops/s
Iteration  23: 1011410.594 ops/s
Iteration  24: 1011378.978 ops/s
Iteration  25: 1010964.496 ops/s
Iteration  26: 1010188.648 ops/s
Iteration  27: 1011620.412 ops/s
Iteration  28: 1008012.492 ops/s
Iteration  29: 1008751.174 ops/s
Iteration  30: 1012904.825 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_retainAll":
  1013597.797 ±(99.9%) 2063.673 ops/s [Average]
  (min, avg, max) = (1008012.492, 1013597.797, 1019054.977), stdev = 3088.808
  CI (99.9%): [1011534.125, 1015661.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_retainAll  thrpt   30  1013597.797 ± 2063.673  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4531641.992 ops/s
# Warmup Iteration   2: 10206988.548 ops/s
# Warmup Iteration   3: 9875790.033 ops/s
# Warmup Iteration   4: 8605990.513 ops/s
# Warmup Iteration   5: 9496860.597 ops/s
# Warmup Iteration   6: 9799409.185 ops/s
# Warmup Iteration   7: 9810381.387 ops/s
# Warmup Iteration   8: 9786911.857 ops/s
# Warmup Iteration   9: 9800185.745 ops/s
# Warmup Iteration  10: 9783191.601 ops/s
# Warmup Iteration  11: 9760735.304 ops/s
# Warmup Iteration  12: 9807934.078 ops/s
# Warmup Iteration  13: 9772586.609 ops/s
# Warmup Iteration  14: 9801731.989 ops/s
# Warmup Iteration  15: 9786653.110 ops/s
# Warmup Iteration  16: 9759760.290 ops/s
# Warmup Iteration  17: 9771386.384 ops/s
# Warmup Iteration  18: 9772330.548 ops/s
# Warmup Iteration  19: 9789295.783 ops/s
# Warmup Iteration  20: 9783482.520 ops/s
# Warmup Iteration  21: 9772740.960 ops/s
# Warmup Iteration  22: 9789332.513 ops/s
# Warmup Iteration  23: 9755347.181 ops/s
# Warmup Iteration  24: 9797543.298 ops/s
# Warmup Iteration  25: 9818121.544 ops/s
# Warmup Iteration  26: 9783525.144 ops/s
# Warmup Iteration  27: 9800290.073 ops/s
# Warmup Iteration  28: 9746756.713 ops/s
# Warmup Iteration  29: 9777180.284 ops/s
# Warmup Iteration  30: 9774953.571 ops/s
Iteration   1: 9739518.834 ops/s
Iteration   2: 9804470.166 ops/s
Iteration   3: 9766406.233 ops/s
Iteration   4: 9811281.968 ops/s
Iteration   5: 9789850.823 ops/s
Iteration   6: 9800447.149 ops/s
Iteration   7: 9792717.899 ops/s
Iteration   8: 9785966.870 ops/s
Iteration   9: 9802425.042 ops/s
Iteration  10: 9715960.792 ops/s
Iteration  11: 9799376.560 ops/s
Iteration  12: 9766353.168 ops/s
Iteration  13: 9785113.806 ops/s
Iteration  14: 9756960.481 ops/s
Iteration  15: 9778062.172 ops/s
Iteration  16: 9761799.669 ops/s
Iteration  17: 9800836.083 ops/s
Iteration  18: 9781043.088 ops/s
Iteration  19: 9772254.360 ops/s
Iteration  20: 9796403.286 ops/s
Iteration  21: 9774031.177 ops/s
Iteration  22: 9797775.506 ops/s
Iteration  23: 9793912.350 ops/s
Iteration  24: 9781339.326 ops/s
Iteration  25: 9770597.583 ops/s
Iteration  26: 9816301.607 ops/s
Iteration  27: 9793056.455 ops/s
Iteration  28: 9788410.040 ops/s
Iteration  29: 9772677.896 ops/s
Iteration  30: 9801671.083 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_reverseForEach":
  9783234.049 ±(99.9%) 14328.905 ops/s [Average]
  (min, avg, max) = (9715960.792, 9783234.049, 9816301.607), stdev = 21446.832
  CI (99.9%): [9768905.145, 9797562.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_reverseForEach  thrpt   30  9783234.049 ± 14328.905  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4987166.878 ops/s
# Warmup Iteration   2: 8641094.446 ops/s
# Warmup Iteration   3: 9413017.469 ops/s
# Warmup Iteration   4: 9427304.336 ops/s
# Warmup Iteration   5: 9458617.410 ops/s
# Warmup Iteration   6: 7886660.751 ops/s
# Warmup Iteration   7: 9467609.585 ops/s
# Warmup Iteration   8: 9443297.420 ops/s
# Warmup Iteration   9: 9446202.951 ops/s
# Warmup Iteration  10: 9458594.506 ops/s
# Warmup Iteration  11: 9432792.982 ops/s
# Warmup Iteration  12: 9457576.176 ops/s
# Warmup Iteration  13: 9394240.968 ops/s
# Warmup Iteration  14: 9442434.598 ops/s
# Warmup Iteration  15: 9450702.433 ops/s
# Warmup Iteration  16: 8957187.034 ops/s
# Warmup Iteration  17: 9458102.436 ops/s
# Warmup Iteration  18: 9420903.441 ops/s
# Warmup Iteration  19: 9446404.557 ops/s
# Warmup Iteration  20: 9443895.073 ops/s
# Warmup Iteration  21: 9430333.525 ops/s
# Warmup Iteration  22: 9451993.599 ops/s
# Warmup Iteration  23: 9449934.460 ops/s
# Warmup Iteration  24: 9451853.632 ops/s
# Warmup Iteration  25: 9428384.297 ops/s
# Warmup Iteration  26: 9444254.373 ops/s
# Warmup Iteration  27: 9457118.083 ops/s
# Warmup Iteration  28: 9457580.606 ops/s
# Warmup Iteration  29: 9456877.410 ops/s
# Warmup Iteration  30: 9442893.852 ops/s
Iteration   1: 9481843.208 ops/s
Iteration   2: 9496882.342 ops/s
Iteration   3: 9462836.576 ops/s
Iteration   4: 9433693.160 ops/s
Iteration   5: 9436341.354 ops/s
Iteration   6: 9431202.997 ops/s
Iteration   7: 9437526.830 ops/s
Iteration   8: 9463334.240 ops/s
Iteration   9: 9499814.747 ops/s
Iteration  10: 9482043.359 ops/s
Iteration  11: 9468880.878 ops/s
Iteration  12: 9467472.735 ops/s
Iteration  13: 9449242.044 ops/s
Iteration  14: 9486199.648 ops/s
Iteration  15: 9461707.161 ops/s
Iteration  16: 9474484.246 ops/s
Iteration  17: 9446179.410 ops/s
Iteration  18: 9452133.941 ops/s
Iteration  19: 9463947.336 ops/s
Iteration  20: 9414781.115 ops/s
Iteration  21: 9460576.939 ops/s
Iteration  22: 9397068.875 ops/s
Iteration  23: 9464317.008 ops/s
Iteration  24: 9458368.613 ops/s
Iteration  25: 9430949.263 ops/s
Iteration  26: 9467467.389 ops/s
Iteration  27: 9455438.514 ops/s
Iteration  28: 9459655.615 ops/s
Iteration  29: 9421885.060 ops/s
Iteration  30: 9474602.634 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_reverseForEachWithIndex":
  9456695.908 ±(99.9%) 15799.561 ops/s [Average]
  (min, avg, max) = (9397068.875, 9456695.908, 9499814.747), stdev = 23648.040
  CI (99.9%): [9440896.347, 9472495.468] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  9456695.908 ± 15799.561  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3191691.572 ops/s
# Warmup Iteration   2: 7170795.649 ops/s
# Warmup Iteration   3: 7389931.373 ops/s
# Warmup Iteration   4: 6334919.382 ops/s
# Warmup Iteration   5: 7202892.683 ops/s
# Warmup Iteration   6: 7388835.939 ops/s
# Warmup Iteration   7: 7400690.925 ops/s
# Warmup Iteration   8: 7397349.262 ops/s
# Warmup Iteration   9: 7398914.765 ops/s
# Warmup Iteration  10: 7387102.529 ops/s
# Warmup Iteration  11: 7399615.326 ops/s
# Warmup Iteration  12: 7372702.419 ops/s
# Warmup Iteration  13: 7409836.612 ops/s
# Warmup Iteration  14: 7387395.261 ops/s
# Warmup Iteration  15: 7377265.910 ops/s
# Warmup Iteration  16: 7384735.463 ops/s
# Warmup Iteration  17: 7417441.458 ops/s
# Warmup Iteration  18: 7406662.940 ops/s
# Warmup Iteration  19: 7391780.699 ops/s
# Warmup Iteration  20: 7407277.038 ops/s
# Warmup Iteration  21: 7406903.227 ops/s
# Warmup Iteration  22: 7404115.863 ops/s
# Warmup Iteration  23: 7389232.826 ops/s
# Warmup Iteration  24: 7397454.262 ops/s
# Warmup Iteration  25: 7415594.344 ops/s
# Warmup Iteration  26: 7386037.710 ops/s
# Warmup Iteration  27: 7389592.800 ops/s
# Warmup Iteration  28: 7423298.018 ops/s
# Warmup Iteration  29: 7405316.985 ops/s
# Warmup Iteration  30: 7389274.108 ops/s
Iteration   1: 7361388.593 ops/s
Iteration   2: 7392772.262 ops/s
Iteration   3: 7365610.019 ops/s
Iteration   4: 7423391.156 ops/s
Iteration   5: 7373902.578 ops/s
Iteration   6: 7422556.899 ops/s
Iteration   7: 7375681.741 ops/s
Iteration   8: 7382939.127 ops/s
Iteration   9: 7392591.030 ops/s
Iteration  10: 7389446.466 ops/s
Iteration  11: 7405898.834 ops/s
Iteration  12: 7441884.065 ops/s
Iteration  13: 7391904.232 ops/s
Iteration  14: 7404560.986 ops/s
Iteration  15: 7427850.669 ops/s
Iteration  16: 7408940.306 ops/s
Iteration  17: 7378737.332 ops/s
Iteration  18: 7411695.642 ops/s
Iteration  19: 7390200.127 ops/s
Iteration  20: 7383562.827 ops/s
Iteration  21: 7388123.274 ops/s
Iteration  22: 7357880.216 ops/s
Iteration  23: 7374519.875 ops/s
Iteration  24: 7423987.057 ops/s
Iteration  25: 7370167.060 ops/s
Iteration  26: 7390846.144 ops/s
Iteration  27: 7393780.525 ops/s
Iteration  28: 7384722.583 ops/s
Iteration  29: 7390597.407 ops/s
Iteration  30: 7393198.437 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_select":
  7393111.249 ±(99.9%) 13756.319 ops/s [Average]
  (min, avg, max) = (7357880.216, 7393111.249, 7441884.065), stdev = 20589.812
  CI (99.9%): [7379354.930, 7406867.568] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_select  thrpt   30  7393111.249 ± 13756.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4480900.255 ops/s
# Warmup Iteration   2: 7076468.290 ops/s
# Warmup Iteration   3: 7907932.029 ops/s
# Warmup Iteration   4: 7935832.670 ops/s
# Warmup Iteration   5: 7950832.199 ops/s
# Warmup Iteration   6: 6754240.911 ops/s
# Warmup Iteration   7: 7858046.143 ops/s
# Warmup Iteration   8: 7961153.599 ops/s
# Warmup Iteration   9: 7922321.709 ops/s
# Warmup Iteration  10: 7953582.214 ops/s
# Warmup Iteration  11: 7950537.703 ops/s
# Warmup Iteration  12: 7955508.837 ops/s
# Warmup Iteration  13: 7942304.220 ops/s
# Warmup Iteration  14: 7923559.277 ops/s
# Warmup Iteration  15: 7952565.155 ops/s
# Warmup Iteration  16: 7935559.851 ops/s
# Warmup Iteration  17: 7842669.631 ops/s
# Warmup Iteration  18: 7889868.031 ops/s
# Warmup Iteration  19: 7896455.874 ops/s
# Warmup Iteration  20: 7889969.337 ops/s
# Warmup Iteration  21: 7893140.966 ops/s
# Warmup Iteration  22: 7893240.109 ops/s
# Warmup Iteration  23: 7879722.687 ops/s
# Warmup Iteration  24: 7888375.290 ops/s
# Warmup Iteration  25: 7903780.599 ops/s
# Warmup Iteration  26: 7877197.665 ops/s
# Warmup Iteration  27: 7899344.657 ops/s
# Warmup Iteration  28: 7883520.107 ops/s
# Warmup Iteration  29: 7877927.043 ops/s
# Warmup Iteration  30: 7868285.410 ops/s
Iteration   1: 7847994.989 ops/s
Iteration   2: 7839326.574 ops/s
Iteration   3: 7900888.530 ops/s
Iteration   4: 7882628.412 ops/s
Iteration   5: 7894448.220 ops/s
Iteration   6: 7891597.478 ops/s
Iteration   7: 7854069.326 ops/s
Iteration   8: 7899961.246 ops/s
Iteration   9: 7859182.880 ops/s
Iteration  10: 7888242.045 ops/s
Iteration  11: 7892799.558 ops/s
Iteration  12: 7883592.778 ops/s
Iteration  13: 7886330.751 ops/s
Iteration  14: 7877412.738 ops/s
Iteration  15: 7858491.106 ops/s
Iteration  16: 7842649.576 ops/s
Iteration  17: 7867497.549 ops/s
Iteration  18: 7864805.146 ops/s
Iteration  19: 7885305.271 ops/s
Iteration  20: 7909014.378 ops/s
Iteration  21: 7879607.422 ops/s
Iteration  22: 7889842.845 ops/s
Iteration  23: 7888769.278 ops/s
Iteration  24: 7907475.991 ops/s
Iteration  25: 7873704.053 ops/s
Iteration  26: 7898951.266 ops/s
Iteration  27: 7869799.828 ops/s
Iteration  28: 7898221.251 ops/s
Iteration  29: 7898075.698 ops/s
Iteration  30: 7898554.503 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectInstancesOf":
  7880974.690 ±(99.9%) 12882.426 ops/s [Average]
  (min, avg, max) = (7839326.574, 7880974.690, 7909014.378), stdev = 19281.811
  CI (99.9%): [7868092.263, 7893857.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  7880974.690 ± 12882.426  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2111174.615 ops/s
# Warmup Iteration   2: 4410702.313 ops/s
# Warmup Iteration   3: 4547210.234 ops/s
# Warmup Iteration   4: 4565586.838 ops/s
# Warmup Iteration   5: 3841252.141 ops/s
# Warmup Iteration   6: 4568910.235 ops/s
# Warmup Iteration   7: 4570448.300 ops/s
# Warmup Iteration   8: 4585642.007 ops/s
# Warmup Iteration   9: 4584977.020 ops/s
# Warmup Iteration  10: 4574533.553 ops/s
# Warmup Iteration  11: 4590228.997 ops/s
# Warmup Iteration  12: 4582662.919 ops/s
# Warmup Iteration  13: 4556713.467 ops/s
# Warmup Iteration  14: 4567661.275 ops/s
# Warmup Iteration  15: 4580184.867 ops/s
# Warmup Iteration  16: 4571529.928 ops/s
# Warmup Iteration  17: 4570258.693 ops/s
# Warmup Iteration  18: 4576583.316 ops/s
# Warmup Iteration  19: 4591892.689 ops/s
# Warmup Iteration  20: 4588088.148 ops/s
# Warmup Iteration  21: 4583241.928 ops/s
# Warmup Iteration  22: 4580137.018 ops/s
# Warmup Iteration  23: 4572542.763 ops/s
# Warmup Iteration  24: 4551187.227 ops/s
# Warmup Iteration  25: 4585394.769 ops/s
# Warmup Iteration  26: 4577420.789 ops/s
# Warmup Iteration  27: 4588836.735 ops/s
# Warmup Iteration  28: 4586519.560 ops/s
# Warmup Iteration  29: 4567214.691 ops/s
# Warmup Iteration  30: 4578779.326 ops/s
Iteration   1: 4567980.688 ops/s
Iteration   2: 4579296.844 ops/s
Iteration   3: 4587331.541 ops/s
Iteration   4: 4584461.944 ops/s
Iteration   5: 4582873.792 ops/s
Iteration   6: 4578356.709 ops/s
Iteration   7: 4567133.200 ops/s
Iteration   8: 4575490.267 ops/s
Iteration   9: 4592453.066 ops/s
Iteration  10: 4582663.349 ops/s
Iteration  11: 4567337.475 ops/s
Iteration  12: 4580716.791 ops/s
Iteration  13: 4587440.733 ops/s
Iteration  14: 4591326.465 ops/s
Iteration  15: 4570181.353 ops/s
Iteration  16: 4598025.295 ops/s
Iteration  17: 4573540.685 ops/s
Iteration  18: 4565096.478 ops/s
Iteration  19: 4574045.757 ops/s
Iteration  20: 4565671.177 ops/s
Iteration  21: 4586832.421 ops/s
Iteration  22: 4585096.114 ops/s
Iteration  23: 4610764.831 ops/s
Iteration  24: 4582623.053 ops/s
Iteration  25: 4567945.143 ops/s
Iteration  26: 4565806.387 ops/s
Iteration  27: 4589319.972 ops/s
Iteration  28: 4587868.587 ops/s
Iteration  29: 4559293.302 ops/s
Iteration  30: 4567181.528 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectWith":
  4579138.498 ±(99.9%) 7787.960 ops/s [Average]
  (min, avg, max) = (4559293.302, 4579138.498, 4610764.831), stdev = 11656.653
  CI (99.9%): [4571350.538, 4586926.458] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_selectWith  thrpt   30  4579138.498 ± 7787.960  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3847932.658 ops/s
# Warmup Iteration   2: 8031959.812 ops/s
# Warmup Iteration   3: 8220143.917 ops/s
# Warmup Iteration   4: 8127918.874 ops/s
# Warmup Iteration   5: 7081459.553 ops/s
# Warmup Iteration   6: 8270041.029 ops/s
# Warmup Iteration   7: 8263737.980 ops/s
# Warmup Iteration   8: 8245654.342 ops/s
# Warmup Iteration   9: 8223665.700 ops/s
# Warmup Iteration  10: 8261572.130 ops/s
# Warmup Iteration  11: 8257172.248 ops/s
# Warmup Iteration  12: 8266468.165 ops/s
# Warmup Iteration  13: 8256775.681 ops/s
# Warmup Iteration  14: 8248946.997 ops/s
# Warmup Iteration  15: 8272774.233 ops/s
# Warmup Iteration  16: 8255839.921 ops/s
# Warmup Iteration  17: 8261569.165 ops/s
# Warmup Iteration  18: 8299758.559 ops/s
# Warmup Iteration  19: 8256121.076 ops/s
# Warmup Iteration  20: 8250132.321 ops/s
# Warmup Iteration  21: 8262505.379 ops/s
# Warmup Iteration  22: 8263304.887 ops/s
# Warmup Iteration  23: 8272822.013 ops/s
# Warmup Iteration  24: 8263212.025 ops/s
# Warmup Iteration  25: 8270257.554 ops/s
# Warmup Iteration  26: 8244079.549 ops/s
# Warmup Iteration  27: 8264250.329 ops/s
# Warmup Iteration  28: 8242919.166 ops/s
# Warmup Iteration  29: 8281492.349 ops/s
# Warmup Iteration  30: 8265774.180 ops/s
Iteration   1: 8239336.707 ops/s
Iteration   2: 8203466.048 ops/s
Iteration   3: 8275790.853 ops/s
Iteration   4: 8270593.916 ops/s
Iteration   5: 8273185.653 ops/s
Iteration   6: 8297670.012 ops/s
Iteration   7: 8281275.758 ops/s
Iteration   8: 8265227.218 ops/s
Iteration   9: 8208656.964 ops/s
Iteration  10: 8286326.867 ops/s
Iteration  11: 8219075.761 ops/s
Iteration  12: 8257338.150 ops/s
Iteration  13: 8256788.811 ops/s
Iteration  14: 8257771.144 ops/s
Iteration  15: 8282517.270 ops/s
Iteration  16: 8239484.132 ops/s
Iteration  17: 8268074.085 ops/s
Iteration  18: 8262377.927 ops/s
Iteration  19: 8298207.824 ops/s
Iteration  20: 8266008.073 ops/s
Iteration  21: 8268652.289 ops/s
Iteration  22: 8268317.903 ops/s
Iteration  23: 8269299.567 ops/s
Iteration  24: 8269539.697 ops/s
Iteration  25: 8247482.128 ops/s
Iteration  26: 8256036.296 ops/s
Iteration  27: 8262772.205 ops/s
Iteration  28: 8201239.313 ops/s
Iteration  29: 8259204.294 ops/s
Iteration  30: 8260991.146 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectWithIndex":
  8259090.267 ±(99.9%) 16416.924 ops/s [Average]
  (min, avg, max) = (8201239.313, 8259090.267, 8298207.824), stdev = 24572.082
  CI (99.9%): [8242673.343, 8275507.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  8259090.267 ± 16416.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2216727.293 ops/s
# Warmup Iteration   2: 5991112.988 ops/s
# Warmup Iteration   3: 6014502.028 ops/s
# Warmup Iteration   4: 4957639.292 ops/s
# Warmup Iteration   5: 6027691.904 ops/s
# Warmup Iteration   6: 6025359.337 ops/s
# Warmup Iteration   7: 6012835.760 ops/s
# Warmup Iteration   8: 6016441.149 ops/s
# Warmup Iteration   9: 6024102.252 ops/s
# Warmup Iteration  10: 6027477.421 ops/s
# Warmup Iteration  11: 6003819.665 ops/s
# Warmup Iteration  12: 6004172.941 ops/s
# Warmup Iteration  13: 5984135.705 ops/s
# Warmup Iteration  14: 6026338.985 ops/s
# Warmup Iteration  15: 5992831.448 ops/s
# Warmup Iteration  16: 6002982.521 ops/s
# Warmup Iteration  17: 6022102.269 ops/s
# Warmup Iteration  18: 6014029.750 ops/s
# Warmup Iteration  19: 5990948.178 ops/s
# Warmup Iteration  20: 6004926.249 ops/s
# Warmup Iteration  21: 5987168.032 ops/s
# Warmup Iteration  22: 6016082.412 ops/s
# Warmup Iteration  23: 6015562.641 ops/s
# Warmup Iteration  24: 5995173.191 ops/s
# Warmup Iteration  25: 6006748.789 ops/s
# Warmup Iteration  26: 6038888.326 ops/s
# Warmup Iteration  27: 6022629.167 ops/s
# Warmup Iteration  28: 6005175.316 ops/s
# Warmup Iteration  29: 6015474.395 ops/s
# Warmup Iteration  30: 6001446.287 ops/s
Iteration   1: 6024181.834 ops/s
Iteration   2: 6003642.042 ops/s
Iteration   3: 5987514.049 ops/s
Iteration   4: 5989804.004 ops/s
Iteration   5: 6026936.897 ops/s
Iteration   6: 5982899.542 ops/s
Iteration   7: 6009914.100 ops/s
Iteration   8: 6012295.291 ops/s
Iteration   9: 5988862.260 ops/s
Iteration  10: 6030182.519 ops/s
Iteration  11: 5997628.651 ops/s
Iteration  12: 5973478.867 ops/s
Iteration  13: 6028962.095 ops/s
Iteration  14: 6014967.191 ops/s
Iteration  15: 6035267.006 ops/s
Iteration  16: 6023120.467 ops/s
Iteration  17: 6018498.939 ops/s
Iteration  18: 5999768.369 ops/s
Iteration  19: 6014874.153 ops/s
Iteration  20: 6027060.521 ops/s
Iteration  21: 6014171.005 ops/s
Iteration  22: 6032296.569 ops/s
Iteration  23: 6030830.157 ops/s
Iteration  24: 6011536.435 ops/s
Iteration  25: 5995146.597 ops/s
Iteration  26: 6021368.561 ops/s
Iteration  27: 6029348.458 ops/s
Iteration  28: 6017777.210 ops/s
Iteration  29: 6018957.289 ops/s
Iteration  30: 6028866.155 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  6013005.241 ±(99.9%) 11172.685 ops/s [Average]
  (min, avg, max) = (5973478.867, 6013005.241, 6035267.006), stdev = 16722.750
  CI (99.9%): [6001832.556, 6024177.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  6013005.241 ± 11172.685  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2639816.434 ops/s
# Warmup Iteration   2: 5927868.933 ops/s
# Warmup Iteration   3: 5962544.036 ops/s
# Warmup Iteration   4: 5039071.743 ops/s
# Warmup Iteration   5: 5941479.641 ops/s
# Warmup Iteration   6: 5945505.368 ops/s
# Warmup Iteration   7: 5949529.594 ops/s
# Warmup Iteration   8: 5938370.885 ops/s
# Warmup Iteration   9: 5927557.882 ops/s
# Warmup Iteration  10: 5952187.484 ops/s
# Warmup Iteration  11: 5960034.901 ops/s
# Warmup Iteration  12: 5944612.378 ops/s
# Warmup Iteration  13: 5944500.305 ops/s
# Warmup Iteration  14: 5939113.654 ops/s
# Warmup Iteration  15: 5925307.678 ops/s
# Warmup Iteration  16: 5909719.932 ops/s
# Warmup Iteration  17: 5968236.623 ops/s
# Warmup Iteration  18: 5962955.681 ops/s
# Warmup Iteration  19: 5943332.005 ops/s
# Warmup Iteration  20: 5954944.384 ops/s
# Warmup Iteration  21: 5953874.200 ops/s
# Warmup Iteration  22: 5962408.072 ops/s
# Warmup Iteration  23: 5935005.539 ops/s
# Warmup Iteration  24: 5963634.906 ops/s
# Warmup Iteration  25: 5946251.027 ops/s
# Warmup Iteration  26: 5955722.600 ops/s
# Warmup Iteration  27: 5946941.477 ops/s
# Warmup Iteration  28: 5951504.863 ops/s
# Warmup Iteration  29: 5939090.598 ops/s
# Warmup Iteration  30: 5958845.438 ops/s
Iteration   1: 5942428.329 ops/s
Iteration   2: 5943850.026 ops/s
Iteration   3: 5922237.530 ops/s
Iteration   4: 5945407.135 ops/s
Iteration   5: 5947899.526 ops/s
Iteration   6: 5937843.630 ops/s
Iteration   7: 5944080.410 ops/s
Iteration   8: 5940158.654 ops/s
Iteration   9: 5946172.693 ops/s
Iteration  10: 5955339.803 ops/s
Iteration  11: 5964086.456 ops/s
Iteration  12: 5971320.195 ops/s
Iteration  13: 5950185.290 ops/s
Iteration  14: 5970134.537 ops/s
Iteration  15: 5913377.656 ops/s
Iteration  16: 5959873.740 ops/s
Iteration  17: 5950529.984 ops/s
Iteration  18: 5954003.249 ops/s
Iteration  19: 5933581.238 ops/s
Iteration  20: 5941662.621 ops/s
Iteration  21: 5932994.957 ops/s
Iteration  22: 5913024.813 ops/s
Iteration  23: 5924500.289 ops/s
Iteration  24: 5929339.630 ops/s
Iteration  25: 5948454.233 ops/s
Iteration  26: 5959166.866 ops/s
Iteration  27: 5968649.352 ops/s
Iteration  28: 5949098.915 ops/s
Iteration  29: 5977004.080 ops/s
Iteration  30: 5965517.970 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_selectWith_target":
  5946730.794 ±(99.9%) 11016.418 ops/s [Average]
  (min, avg, max) = (5913024.813, 5946730.794, 5977004.080), stdev = 16488.857
  CI (99.9%): [5935714.375, 5957747.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_selectWith_target  thrpt   30  5946730.794 ± 11016.418  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_select_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_select_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5383144.632 ops/s
# Warmup Iteration   2: 12005700.705 ops/s
# Warmup Iteration   3: 10732187.012 ops/s
# Warmup Iteration   4: 11347481.120 ops/s
# Warmup Iteration   5: 11972063.235 ops/s
# Warmup Iteration   6: 11993731.114 ops/s
# Warmup Iteration   7: 11980954.993 ops/s
# Warmup Iteration   8: 11967818.496 ops/s
# Warmup Iteration   9: 12017391.238 ops/s
# Warmup Iteration  10: 11969831.334 ops/s
# Warmup Iteration  11: 11990431.865 ops/s
# Warmup Iteration  12: 12001814.097 ops/s
# Warmup Iteration  13: 11959082.260 ops/s
# Warmup Iteration  14: 11970145.654 ops/s
# Warmup Iteration  15: 11992481.836 ops/s
# Warmup Iteration  16: 11998750.776 ops/s
# Warmup Iteration  17: 11995887.170 ops/s
# Warmup Iteration  18: 11983980.079 ops/s
# Warmup Iteration  19: 11999983.940 ops/s
# Warmup Iteration  20: 11998122.874 ops/s
# Warmup Iteration  21: 11952944.342 ops/s
# Warmup Iteration  22: 11984936.059 ops/s
# Warmup Iteration  23: 12003303.165 ops/s
# Warmup Iteration  24: 11969284.540 ops/s
# Warmup Iteration  25: 11986575.891 ops/s
# Warmup Iteration  26: 12015270.532 ops/s
# Warmup Iteration  27: 12009045.538 ops/s
# Warmup Iteration  28: 11981334.019 ops/s
# Warmup Iteration  29: 11990092.811 ops/s
# Warmup Iteration  30: 11983651.338 ops/s
Iteration   1: 11997705.820 ops/s
Iteration   2: 11990458.238 ops/s
Iteration   3: 12011827.069 ops/s
Iteration   4: 12009658.101 ops/s
Iteration   5: 11921679.415 ops/s
Iteration   6: 12026051.130 ops/s
Iteration   7: 12009815.262 ops/s
Iteration   8: 11994968.095 ops/s
Iteration   9: 12011535.251 ops/s
Iteration  10: 12023150.081 ops/s
Iteration  11: 12018727.435 ops/s
Iteration  12: 12004896.695 ops/s
Iteration  13: 12026141.158 ops/s
Iteration  14: 11996847.985 ops/s
Iteration  15: 12018333.611 ops/s
Iteration  16: 12009148.634 ops/s
Iteration  17: 12000551.485 ops/s
Iteration  18: 12008165.363 ops/s
Iteration  19: 11993453.526 ops/s
Iteration  20: 12015685.410 ops/s
Iteration  21: 12001441.488 ops/s
Iteration  22: 11989390.597 ops/s
Iteration  23: 11979928.730 ops/s
Iteration  24: 11987542.966 ops/s
Iteration  25: 11964419.825 ops/s
Iteration  26: 11910316.392 ops/s
Iteration  27: 11987450.687 ops/s
Iteration  28: 12001699.346 ops/s
Iteration  29: 11958933.405 ops/s
Iteration  30: 12016826.513 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_select_target":
  11996224.990 ±(99.9%) 18174.967 ops/s [Average]
  (min, avg, max) = (11910316.392, 11996224.990, 12026141.158), stdev = 27203.437
  CI (99.9%): [11978050.024, 12014399.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_select_target  thrpt   30  11996224.990 ± 18174.967  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 638970.014 ops/s
# Warmup Iteration   2: 774824.292 ops/s
# Warmup Iteration   3: 959026.483 ops/s
# Warmup Iteration   4: 957247.565 ops/s
# Warmup Iteration   5: 959967.428 ops/s
# Warmup Iteration   6: 961418.541 ops/s
# Warmup Iteration   7: 957271.361 ops/s
# Warmup Iteration   8: 962291.718 ops/s
# Warmup Iteration   9: 803846.482 ops/s
# Warmup Iteration  10: 962844.001 ops/s
# Warmup Iteration  11: 962459.010 ops/s
# Warmup Iteration  12: 961104.383 ops/s
# Warmup Iteration  13: 961887.843 ops/s
# Warmup Iteration  14: 964110.712 ops/s
# Warmup Iteration  15: 962258.774 ops/s
# Warmup Iteration  16: 961225.397 ops/s
# Warmup Iteration  17: 1018648.230 ops/s
# Warmup Iteration  18: 1021393.692 ops/s
# Warmup Iteration  19: 1019351.797 ops/s
# Warmup Iteration  20: 1019001.867 ops/s
# Warmup Iteration  21: 1013187.476 ops/s
# Warmup Iteration  22: 1018405.115 ops/s
# Warmup Iteration  23: 1017128.725 ops/s
# Warmup Iteration  24: 1013882.297 ops/s
# Warmup Iteration  25: 1015853.989 ops/s
# Warmup Iteration  26: 1021710.038 ops/s
# Warmup Iteration  27: 1020321.102 ops/s
# Warmup Iteration  28: 1016630.613 ops/s
# Warmup Iteration  29: 1015480.006 ops/s
# Warmup Iteration  30: 1019950.382 ops/s
Iteration   1: 1020959.897 ops/s
Iteration   2: 1020825.740 ops/s
Iteration   3: 1015837.898 ops/s
Iteration   4: 1019731.707 ops/s
Iteration   5: 1017877.988 ops/s
Iteration   6: 1015438.534 ops/s
Iteration   7: 1018083.290 ops/s
Iteration   8: 1017365.161 ops/s
Iteration   9: 1021558.580 ops/s
Iteration  10: 1022518.966 ops/s
Iteration  11: 1019970.076 ops/s
Iteration  12: 1015864.539 ops/s
Iteration  13: 1019101.044 ops/s
Iteration  14: 1016877.123 ops/s
Iteration  15: 1019601.018 ops/s
Iteration  16: 1019750.149 ops/s
Iteration  17: 1017567.487 ops/s
Iteration  18: 1018158.121 ops/s
Iteration  19: 1013099.386 ops/s
Iteration  20: 1017482.826 ops/s
Iteration  21: 1021717.063 ops/s
Iteration  22: 1016045.680 ops/s
Iteration  23: 1019465.768 ops/s
Iteration  24: 1018436.186 ops/s
Iteration  25: 1018759.092 ops/s
Iteration  26: 1021471.849 ops/s
Iteration  27: 1017188.642 ops/s
Iteration  28: 1018399.367 ops/s
Iteration  29: 1020597.798 ops/s
Iteration  30: 1018051.544 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_set":
  1018593.417 ±(99.9%) 1442.233 ops/s [Average]
  (min, avg, max) = (1013099.386, 1018593.417, 1022518.966), stdev = 2158.667
  CI (99.9%): [1017151.184, 1020035.651] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_set  thrpt   30  1018593.417 ± 1442.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 758442.647 ops/s
# Warmup Iteration   2: 795981.518 ops/s
# Warmup Iteration   3: 1004381.649 ops/s
# Warmup Iteration   4: 1004452.091 ops/s
# Warmup Iteration   5: 1001652.677 ops/s
# Warmup Iteration   6: 1004915.870 ops/s
# Warmup Iteration   7: 1003136.964 ops/s
# Warmup Iteration   8: 1003469.242 ops/s
# Warmup Iteration   9: 1009508.162 ops/s
# Warmup Iteration  10: 1004648.896 ops/s
# Warmup Iteration  11: 932683.243 ops/s
# Warmup Iteration  12: 925269.242 ops/s
# Warmup Iteration  13: 1000438.377 ops/s
# Warmup Iteration  14: 1003220.827 ops/s
# Warmup Iteration  15: 1004803.733 ops/s
# Warmup Iteration  16: 1001718.721 ops/s
# Warmup Iteration  17: 1063554.246 ops/s
# Warmup Iteration  18: 1064094.483 ops/s
# Warmup Iteration  19: 1066570.585 ops/s
# Warmup Iteration  20: 1070581.450 ops/s
# Warmup Iteration  21: 1064669.055 ops/s
# Warmup Iteration  22: 1067273.718 ops/s
# Warmup Iteration  23: 1067934.754 ops/s
# Warmup Iteration  24: 1067157.120 ops/s
# Warmup Iteration  25: 1063768.422 ops/s
# Warmup Iteration  26: 1062109.481 ops/s
# Warmup Iteration  27: 1061927.203 ops/s
# Warmup Iteration  28: 1059832.970 ops/s
# Warmup Iteration  29: 1065429.828 ops/s
# Warmup Iteration  30: 1067389.561 ops/s
Iteration   1: 1055367.974 ops/s
Iteration   2: 1066692.265 ops/s
Iteration   3: 1061916.302 ops/s
Iteration   4: 1061442.059 ops/s
Iteration   5: 1062571.030 ops/s
Iteration   6: 1065530.841 ops/s
Iteration   7: 1067869.168 ops/s
Iteration   8: 1066180.567 ops/s
Iteration   9: 1060581.365 ops/s
Iteration  10: 1063016.105 ops/s
Iteration  11: 1065059.236 ops/s
Iteration  12: 1055067.937 ops/s
Iteration  13: 1061783.015 ops/s
Iteration  14: 1064332.135 ops/s
Iteration  15: 1065710.086 ops/s
Iteration  16: 1064710.827 ops/s
Iteration  17: 1066462.308 ops/s
Iteration  18: 1067111.103 ops/s
Iteration  19: 1067883.531 ops/s
Iteration  20: 1069292.442 ops/s
Iteration  21: 1069662.467 ops/s
Iteration  22: 1067613.526 ops/s
Iteration  23: 1064378.413 ops/s
Iteration  24: 1068081.462 ops/s
Iteration  25: 1068188.171 ops/s
Iteration  26: 1066268.844 ops/s
Iteration  27: 1064370.732 ops/s
Iteration  28: 1063467.857 ops/s
Iteration  29: 1064438.028 ops/s
Iteration  30: 1061692.522 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sort":
  1064558.077 ±(99.9%) 2350.075 ops/s [Average]
  (min, avg, max) = (1055067.937, 1064558.077, 1069662.467), stdev = 3517.482
  CI (99.9%): [1062208.002, 1066908.153] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_sort  thrpt   30  1064558.077 ± 2350.075  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 210075.097 ops/s
# Warmup Iteration   2: 381967.545 ops/s
# Warmup Iteration   3: 456186.492 ops/s
# Warmup Iteration   4: 461120.845 ops/s
# Warmup Iteration   5: 463095.092 ops/s
# Warmup Iteration   6: 382138.726 ops/s
# Warmup Iteration   7: 463127.954 ops/s
# Warmup Iteration   8: 462422.029 ops/s
# Warmup Iteration   9: 464062.329 ops/s
# Warmup Iteration  10: 462366.100 ops/s
# Warmup Iteration  11: 463110.747 ops/s
# Warmup Iteration  12: 462235.650 ops/s
# Warmup Iteration  13: 460567.130 ops/s
# Warmup Iteration  14: 463196.467 ops/s
# Warmup Iteration  15: 462919.546 ops/s
# Warmup Iteration  16: 463522.380 ops/s
# Warmup Iteration  17: 462680.303 ops/s
# Warmup Iteration  18: 463848.611 ops/s
# Warmup Iteration  19: 463470.439 ops/s
# Warmup Iteration  20: 463396.794 ops/s
# Warmup Iteration  21: 462901.704 ops/s
# Warmup Iteration  22: 462607.819 ops/s
# Warmup Iteration  23: 463641.090 ops/s
# Warmup Iteration  24: 463305.086 ops/s
# Warmup Iteration  25: 462369.786 ops/s
# Warmup Iteration  26: 463433.406 ops/s
# Warmup Iteration  27: 462361.918 ops/s
# Warmup Iteration  28: 462139.159 ops/s
# Warmup Iteration  29: 463115.897 ops/s
# Warmup Iteration  30: 461219.802 ops/s
Iteration   1: 461268.222 ops/s
Iteration   2: 462117.006 ops/s
Iteration   3: 464464.385 ops/s
Iteration   4: 462640.989 ops/s
Iteration   5: 461060.261 ops/s
Iteration   6: 462687.908 ops/s
Iteration   7: 462088.574 ops/s
Iteration   8: 463547.666 ops/s
Iteration   9: 463986.890 ops/s
Iteration  10: 461305.718 ops/s
Iteration  11: 462514.680 ops/s
Iteration  12: 461595.371 ops/s
Iteration  13: 464523.012 ops/s
Iteration  14: 460794.384 ops/s
Iteration  15: 462315.962 ops/s
Iteration  16: 464686.655 ops/s
Iteration  17: 463178.799 ops/s
Iteration  18: 463817.515 ops/s
Iteration  19: 462117.499 ops/s
Iteration  20: 463941.858 ops/s
Iteration  21: 461610.673 ops/s
Iteration  22: 462949.109 ops/s
Iteration  23: 463344.654 ops/s
Iteration  24: 461083.044 ops/s
Iteration  25: 460358.528 ops/s
Iteration  26: 464414.351 ops/s
Iteration  27: 463809.124 ops/s
Iteration  28: 460943.490 ops/s
Iteration  29: 463801.480 ops/s
Iteration  30: 463452.376 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_stream":
  462680.673 ±(99.9%) 853.575 ops/s [Average]
  (min, avg, max) = (460358.528, 462680.673, 464686.655), stdev = 1277.590
  CI (99.9%): [461827.098, 463534.247] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_stream  thrpt   30  462680.673 ± 853.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19635285.455 ops/s
# Warmup Iteration   2: 34038890.501 ops/s
# Warmup Iteration   3: 36638832.630 ops/s
# Warmup Iteration   4: 37854193.794 ops/s
# Warmup Iteration   5: 37840410.729 ops/s
# Warmup Iteration   6: 37950179.030 ops/s
# Warmup Iteration   7: 37850988.415 ops/s
# Warmup Iteration   8: 37818696.314 ops/s
# Warmup Iteration   9: 37799390.681 ops/s
# Warmup Iteration  10: 37875310.740 ops/s
# Warmup Iteration  11: 38019105.391 ops/s
# Warmup Iteration  12: 37809444.905 ops/s
# Warmup Iteration  13: 37880081.643 ops/s
# Warmup Iteration  14: 37665740.025 ops/s
# Warmup Iteration  15: 37627666.368 ops/s
# Warmup Iteration  16: 37814841.478 ops/s
# Warmup Iteration  17: 37831586.618 ops/s
# Warmup Iteration  18: 37066856.566 ops/s
# Warmup Iteration  19: 37062547.123 ops/s
# Warmup Iteration  20: 37879210.348 ops/s
# Warmup Iteration  21: 37995694.137 ops/s
# Warmup Iteration  22: 37853523.444 ops/s
# Warmup Iteration  23: 37966214.440 ops/s
# Warmup Iteration  24: 37854778.265 ops/s
# Warmup Iteration  25: 37929640.420 ops/s
# Warmup Iteration  26: 37709484.070 ops/s
# Warmup Iteration  27: 37822591.783 ops/s
# Warmup Iteration  28: 37792513.666 ops/s
# Warmup Iteration  29: 37913547.896 ops/s
# Warmup Iteration  30: 37934734.024 ops/s
Iteration   1: 37968930.792 ops/s
Iteration   2: 37679532.908 ops/s
Iteration   3: 37768127.870 ops/s
Iteration   4: 37815933.610 ops/s
Iteration   5: 38000996.751 ops/s
Iteration   6: 37830685.272 ops/s
Iteration   7: 37825326.365 ops/s
Iteration   8: 37744984.523 ops/s
Iteration   9: 37811542.444 ops/s
Iteration  10: 37930160.358 ops/s
Iteration  11: 38035656.428 ops/s
Iteration  12: 37780228.309 ops/s
Iteration  13: 37719030.113 ops/s
Iteration  14: 38007148.790 ops/s
Iteration  15: 38024278.866 ops/s
Iteration  16: 38033199.499 ops/s
Iteration  17: 37773299.958 ops/s
Iteration  18: 37939834.178 ops/s
Iteration  19: 37886540.231 ops/s
Iteration  20: 37835111.779 ops/s
Iteration  21: 37894322.235 ops/s
Iteration  22: 37914210.616 ops/s
Iteration  23: 37934846.999 ops/s
Iteration  24: 37870323.321 ops/s
Iteration  25: 37930428.874 ops/s
Iteration  26: 38095579.369 ops/s
Iteration  27: 38057588.900 ops/s
Iteration  28: 37962639.846 ops/s
Iteration  29: 38017115.458 ops/s
Iteration  30: 37913162.909 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_subList":
  37900025.586 ±(99.9%) 73136.666 ops/s [Average]
  (min, avg, max) = (37679532.908, 37900025.586, 38095579.369), stdev = 109467.528
  CI (99.9%): [37826888.919, 37973162.252] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_subList  thrpt   30  37900025.586 ± 73136.666  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 655028.919 ops/s
# Warmup Iteration   2: 646920.280 ops/s
# Warmup Iteration   3: 808962.654 ops/s
# Warmup Iteration   4: 861049.923 ops/s
# Warmup Iteration   5: 861028.981 ops/s
# Warmup Iteration   6: 856932.891 ops/s
# Warmup Iteration   7: 866472.201 ops/s
# Warmup Iteration   8: 861825.753 ops/s
# Warmup Iteration   9: 862510.954 ops/s
# Warmup Iteration  10: 861965.120 ops/s
# Warmup Iteration  11: 857821.375 ops/s
# Warmup Iteration  12: 859567.235 ops/s
# Warmup Iteration  13: 818925.921 ops/s
# Warmup Iteration  14: 769575.611 ops/s
# Warmup Iteration  15: 863711.034 ops/s
# Warmup Iteration  16: 864723.949 ops/s
# Warmup Iteration  17: 904225.362 ops/s
# Warmup Iteration  18: 906236.306 ops/s
# Warmup Iteration  19: 904268.708 ops/s
# Warmup Iteration  20: 902964.129 ops/s
# Warmup Iteration  21: 909020.345 ops/s
# Warmup Iteration  22: 908530.447 ops/s
# Warmup Iteration  23: 908900.261 ops/s
# Warmup Iteration  24: 903170.295 ops/s
# Warmup Iteration  25: 907884.493 ops/s
# Warmup Iteration  26: 904173.941 ops/s
# Warmup Iteration  27: 905204.533 ops/s
# Warmup Iteration  28: 904409.763 ops/s
# Warmup Iteration  29: 903519.156 ops/s
# Warmup Iteration  30: 908902.659 ops/s
Iteration   1: 907996.864 ops/s
Iteration   2: 908181.632 ops/s
Iteration   3: 905409.603 ops/s
Iteration   4: 905865.765 ops/s
Iteration   5: 911062.851 ops/s
Iteration   6: 906772.748 ops/s
Iteration   7: 902843.347 ops/s
Iteration   8: 900893.931 ops/s
Iteration   9: 909389.487 ops/s
Iteration  10: 904993.867 ops/s
Iteration  11: 904644.366 ops/s
Iteration  12: 905331.325 ops/s
Iteration  13: 907430.582 ops/s
Iteration  14: 909957.371 ops/s
Iteration  15: 908540.915 ops/s
Iteration  16: 907364.472 ops/s
Iteration  17: 905129.243 ops/s
Iteration  18: 908653.658 ops/s
Iteration  19: 903676.262 ops/s
Iteration  20: 908548.528 ops/s
Iteration  21: 905862.835 ops/s
Iteration  22: 908071.093 ops/s
Iteration  23: 903788.648 ops/s
Iteration  24: 903663.132 ops/s
Iteration  25: 902211.003 ops/s
Iteration  26: 906618.528 ops/s
Iteration  27: 905339.527 ops/s
Iteration  28: 907433.963 ops/s
Iteration  29: 906977.999 ops/s
Iteration  30: 906102.137 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO":
  906291.856 ±(99.9%) 1580.011 ops/s [Average]
  (min, avg, max) = (900893.931, 906291.856, 911062.851), stdev = 2364.887
  CI (99.9%): [904711.845, 907871.867] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO  thrpt   30  906291.856 ± 1580.011  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_subListFromNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_subListFromNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 666135.876 ops/s
# Warmup Iteration   2: 686781.748 ops/s
# Warmup Iteration   3: 818812.566 ops/s
# Warmup Iteration   4: 873681.468 ops/s
# Warmup Iteration   5: 871110.894 ops/s
# Warmup Iteration   6: 869084.524 ops/s
# Warmup Iteration   7: 877233.670 ops/s
# Warmup Iteration   8: 871359.352 ops/s
# Warmup Iteration   9: 873437.727 ops/s
# Warmup Iteration  10: 874153.890 ops/s
# Warmup Iteration  11: 873109.867 ops/s
# Warmup Iteration  12: 871710.891 ops/s
# Warmup Iteration  13: 872970.707 ops/s
# Warmup Iteration  14: 736568.128 ops/s
# Warmup Iteration  15: 872389.687 ops/s
# Warmup Iteration  16: 870237.762 ops/s
# Warmup Iteration  17: 921519.941 ops/s
# Warmup Iteration  18: 918517.408 ops/s
# Warmup Iteration  19: 917383.058 ops/s
# Warmup Iteration  20: 922311.221 ops/s
# Warmup Iteration  21: 921085.537 ops/s
# Warmup Iteration  22: 922615.672 ops/s
# Warmup Iteration  23: 922444.379 ops/s
# Warmup Iteration  24: 922757.535 ops/s
# Warmup Iteration  25: 914796.038 ops/s
# Warmup Iteration  26: 919495.977 ops/s
# Warmup Iteration  27: 923675.392 ops/s
# Warmup Iteration  28: 921463.713 ops/s
# Warmup Iteration  29: 919893.783 ops/s
# Warmup Iteration  30: 917689.421 ops/s
Iteration   1: 921000.743 ops/s
Iteration   2: 922672.848 ops/s
Iteration   3: 921450.610 ops/s
Iteration   4: 919993.837 ops/s
Iteration   5: 921268.446 ops/s
Iteration   6: 918572.440 ops/s
Iteration   7: 923340.899 ops/s
Iteration   8: 921925.537 ops/s
Iteration   9: 919437.381 ops/s
Iteration  10: 916326.347 ops/s
Iteration  11: 922829.492 ops/s
Iteration  12: 920522.844 ops/s
Iteration  13: 923706.360 ops/s
Iteration  14: 921990.642 ops/s
Iteration  15: 916101.864 ops/s
Iteration  16: 920361.064 ops/s
Iteration  17: 921659.780 ops/s
Iteration  18: 916346.171 ops/s
Iteration  19: 917906.486 ops/s
Iteration  20: 916204.361 ops/s
Iteration  21: 915331.023 ops/s
Iteration  22: 916344.721 ops/s
Iteration  23: 916895.875 ops/s
Iteration  24: 917314.251 ops/s
Iteration  25: 921358.029 ops/s
Iteration  26: 920736.682 ops/s
Iteration  27: 919627.351 ops/s
Iteration  28: 918596.702 ops/s
Iteration  29: 920128.863 ops/s
Iteration  30: 915536.529 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_subListFromNegative":
  919516.273 ±(99.9%) 1702.014 ops/s [Average]
  (min, avg, max) = (915331.023, 919516.273, 923706.360), stdev = 2547.494
  CI (99.9%): [917814.259, 921218.286] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_subListFromNegative  thrpt   30  919516.273 ± 1702.014  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_subListToGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_subListToGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 659981.984 ops/s
# Warmup Iteration   2: 684753.693 ops/s
# Warmup Iteration   3: 809443.983 ops/s
# Warmup Iteration   4: 864987.819 ops/s
# Warmup Iteration   5: 865576.467 ops/s
# Warmup Iteration   6: 869420.243 ops/s
# Warmup Iteration   7: 867437.406 ops/s
# Warmup Iteration   8: 865869.848 ops/s
# Warmup Iteration   9: 869696.630 ops/s
# Warmup Iteration  10: 865077.591 ops/s
# Warmup Iteration  11: 871099.604 ops/s
# Warmup Iteration  12: 869421.099 ops/s
# Warmup Iteration  13: 868450.014 ops/s
# Warmup Iteration  14: 730554.522 ops/s
# Warmup Iteration  15: 869537.449 ops/s
# Warmup Iteration  16: 871366.488 ops/s
# Warmup Iteration  17: 912643.918 ops/s
# Warmup Iteration  18: 916725.799 ops/s
# Warmup Iteration  19: 914584.521 ops/s
# Warmup Iteration  20: 915010.222 ops/s
# Warmup Iteration  21: 918696.742 ops/s
# Warmup Iteration  22: 912266.047 ops/s
# Warmup Iteration  23: 914026.677 ops/s
# Warmup Iteration  24: 913399.617 ops/s
# Warmup Iteration  25: 916645.363 ops/s
# Warmup Iteration  26: 913981.092 ops/s
# Warmup Iteration  27: 911973.998 ops/s
# Warmup Iteration  28: 914420.411 ops/s
# Warmup Iteration  29: 917295.811 ops/s
# Warmup Iteration  30: 917115.713 ops/s
Iteration   1: 916761.323 ops/s
Iteration   2: 913715.056 ops/s
Iteration   3: 914180.583 ops/s
Iteration   4: 916786.623 ops/s
Iteration   5: 914453.823 ops/s
Iteration   6: 917341.564 ops/s
Iteration   7: 917256.546 ops/s
Iteration   8: 918418.588 ops/s
Iteration   9: 917775.977 ops/s
Iteration  10: 908809.617 ops/s
Iteration  11: 917957.404 ops/s
Iteration  12: 914375.572 ops/s
Iteration  13: 912213.798 ops/s
Iteration  14: 911389.921 ops/s
Iteration  15: 916849.344 ops/s
Iteration  16: 915759.030 ops/s
Iteration  17: 918447.259 ops/s
Iteration  18: 916425.245 ops/s
Iteration  19: 916565.369 ops/s
Iteration  20: 914652.583 ops/s
Iteration  21: 915872.344 ops/s
Iteration  22: 914561.115 ops/s
Iteration  23: 911113.180 ops/s
Iteration  24: 908933.294 ops/s
Iteration  25: 912876.914 ops/s
Iteration  26: 912518.135 ops/s
Iteration  27: 911823.489 ops/s
Iteration  28: 914410.073 ops/s
Iteration  29: 913993.013 ops/s
Iteration  30: 918462.056 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_subListToGreaterThanSize":
  914823.295 ±(99.9%) 1813.445 ops/s [Average]
  (min, avg, max) = (908809.617, 914823.295, 918462.056), stdev = 2714.279
  CI (99.9%): [913009.850, 916636.739] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_subListToGreaterThanSize  thrpt   30  914823.295 ± 1813.445  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1022296.780 ops/s
# Warmup Iteration   2: 1783096.434 ops/s
# Warmup Iteration   3: 2030045.202 ops/s
# Warmup Iteration   4: 2037515.951 ops/s
# Warmup Iteration   5: 2040721.702 ops/s
# Warmup Iteration   6: 1688132.651 ops/s
# Warmup Iteration   7: 2044865.700 ops/s
# Warmup Iteration   8: 2043896.030 ops/s
# Warmup Iteration   9: 2040636.973 ops/s
# Warmup Iteration  10: 2048059.240 ops/s
# Warmup Iteration  11: 2041885.389 ops/s
# Warmup Iteration  12: 2046665.433 ops/s
# Warmup Iteration  13: 2049768.762 ops/s
# Warmup Iteration  14: 2051059.327 ops/s
# Warmup Iteration  15: 2040687.106 ops/s
# Warmup Iteration  16: 2041412.567 ops/s
# Warmup Iteration  17: 2004442.657 ops/s
# Warmup Iteration  18: 2049214.969 ops/s
# Warmup Iteration  19: 2041896.418 ops/s
# Warmup Iteration  20: 2042584.090 ops/s
# Warmup Iteration  21: 2048047.593 ops/s
# Warmup Iteration  22: 2044960.590 ops/s
# Warmup Iteration  23: 2042217.776 ops/s
# Warmup Iteration  24: 2049592.370 ops/s
# Warmup Iteration  25: 2043890.662 ops/s
# Warmup Iteration  26: 2050443.831 ops/s
# Warmup Iteration  27: 2047529.141 ops/s
# Warmup Iteration  28: 2045367.952 ops/s
# Warmup Iteration  29: 2046612.069 ops/s
# Warmup Iteration  30: 2051170.053 ops/s
Iteration   1: 2042254.901 ops/s
Iteration   2: 2050495.373 ops/s
Iteration   3: 2035192.501 ops/s
Iteration   4: 2046336.309 ops/s
Iteration   5: 2048653.557 ops/s
Iteration   6: 2045389.545 ops/s
Iteration   7: 2045816.878 ops/s
Iteration   8: 2047639.443 ops/s
Iteration   9: 2042869.919 ops/s
Iteration  10: 2041425.597 ops/s
Iteration  11: 2056341.394 ops/s
Iteration  12: 2047087.980 ops/s
Iteration  13: 2050167.556 ops/s
Iteration  14: 2044227.442 ops/s
Iteration  15: 2043043.459 ops/s
Iteration  16: 2046554.779 ops/s
Iteration  17: 2048806.535 ops/s
Iteration  18: 2047073.204 ops/s
Iteration  19: 2036244.600 ops/s
Iteration  20: 2051793.695 ops/s
Iteration  21: 2050569.477 ops/s
Iteration  22: 2046112.851 ops/s
Iteration  23: 2052783.030 ops/s
Iteration  24: 2041011.073 ops/s
Iteration  25: 2044738.435 ops/s
Iteration  26: 2041497.291 ops/s
Iteration  27: 2051923.749 ops/s
Iteration  28: 2042479.387 ops/s
Iteration  29: 2049448.894 ops/s
Iteration  30: 2054271.839 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByDouble":
  2046408.356 ±(99.9%) 3291.633 ops/s [Average]
  (min, avg, max) = (2035192.501, 2046408.356, 2056341.394), stdev = 4926.762
  CI (99.9%): [2043116.723, 2049699.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_sumByDouble  thrpt   30  2046408.356 ± 3291.633  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61.073 ops/s
# Warmup Iteration   2: 73.761 ops/s
# Warmup Iteration   3: 101.271 ops/s
# Warmup Iteration   4: 100.661 ops/s
# Warmup Iteration   5: 98.604 ops/s
# Warmup Iteration   6: 102.219 ops/s
# Warmup Iteration   7: 101.277 ops/s
# Warmup Iteration   8: 100.972 ops/s
# Warmup Iteration   9: 88.933 ops/s
# Warmup Iteration  10: 94.949 ops/s
# Warmup Iteration  11: 101.837 ops/s
# Warmup Iteration  12: 99.414 ops/s
# Warmup Iteration  13: 101.801 ops/s
# Warmup Iteration  14: 101.531 ops/s
# Warmup Iteration  15: 102.008 ops/s
# Warmup Iteration  16: 101.821 ops/s
# Warmup Iteration  17: 100.104 ops/s
# Warmup Iteration  18: 100.951 ops/s
# Warmup Iteration  19: 100.475 ops/s
# Warmup Iteration  20: 99.593 ops/s
# Warmup Iteration  21: 101.709 ops/s
# Warmup Iteration  22: 99.872 ops/s
# Warmup Iteration  23: 100.239 ops/s
# Warmup Iteration  24: 100.963 ops/s
# Warmup Iteration  25: 100.603 ops/s
# Warmup Iteration  26: 98.582 ops/s
# Warmup Iteration  27: 100.178 ops/s
# Warmup Iteration  28: 99.735 ops/s
# Warmup Iteration  29: 99.421 ops/s
# Warmup Iteration  30: 100.914 ops/s
Iteration   1: 100.468 ops/s
Iteration   2: 98.793 ops/s
Iteration   3: 98.907 ops/s
Iteration   4: 97.218 ops/s
Iteration   5: 99.943 ops/s
Iteration   6: 101.136 ops/s
Iteration   7: 100.136 ops/s
Iteration   8: 100.328 ops/s
Iteration   9: 100.632 ops/s
Iteration  10: 100.065 ops/s
Iteration  11: 99.442 ops/s
Iteration  12: 99.340 ops/s
Iteration  13: 97.967 ops/s
Iteration  14: 99.718 ops/s
Iteration  15: 101.355 ops/s
Iteration  16: 100.062 ops/s
Iteration  17: 97.705 ops/s
Iteration  18: 101.196 ops/s
Iteration  19: 100.702 ops/s
Iteration  20: 99.196 ops/s
Iteration  21: 101.479 ops/s
Iteration  22: 100.723 ops/s
Iteration  23: 99.075 ops/s
Iteration  24: 101.115 ops/s
Iteration  25: 99.613 ops/s
Iteration  26: 99.415 ops/s
Iteration  27: 101.526 ops/s
Iteration  28: 99.975 ops/s
Iteration  29: 97.733 ops/s
Iteration  30: 101.273 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  99.875 ±(99.9%) 0.794 ops/s [Average]
  (min, avg, max) = (97.218, 99.875, 101.526), stdev = 1.189
  CI (99.9%): [99.080, 100.669] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt   Score   Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  99.875 ± 0.794  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 995720.609 ops/s
# Warmup Iteration   2: 1800455.313 ops/s
# Warmup Iteration   3: 2034000.782 ops/s
# Warmup Iteration   4: 2041420.521 ops/s
# Warmup Iteration   5: 2042231.517 ops/s
# Warmup Iteration   6: 1690468.263 ops/s
# Warmup Iteration   7: 2045572.778 ops/s
# Warmup Iteration   8: 2039505.687 ops/s
# Warmup Iteration   9: 2046177.017 ops/s
# Warmup Iteration  10: 2045826.832 ops/s
# Warmup Iteration  11: 2048933.120 ops/s
# Warmup Iteration  12: 2045762.981 ops/s
# Warmup Iteration  13: 2038793.313 ops/s
# Warmup Iteration  14: 2041986.730 ops/s
# Warmup Iteration  15: 2044913.178 ops/s
# Warmup Iteration  16: 2033720.112 ops/s
# Warmup Iteration  17: 2043301.416 ops/s
# Warmup Iteration  18: 2048241.111 ops/s
# Warmup Iteration  19: 2040498.358 ops/s
# Warmup Iteration  20: 2043803.078 ops/s
# Warmup Iteration  21: 2041042.190 ops/s
# Warmup Iteration  22: 2040991.300 ops/s
# Warmup Iteration  23: 2043229.732 ops/s
# Warmup Iteration  24: 2043428.847 ops/s
# Warmup Iteration  25: 2039376.744 ops/s
# Warmup Iteration  26: 2047016.024 ops/s
# Warmup Iteration  27: 2044262.634 ops/s
# Warmup Iteration  28: 2048163.129 ops/s
# Warmup Iteration  29: 2043454.265 ops/s
# Warmup Iteration  30: 2046730.826 ops/s
Iteration   1: 2046632.403 ops/s
Iteration   2: 2033601.857 ops/s
Iteration   3: 2046713.386 ops/s
Iteration   4: 2044020.582 ops/s
Iteration   5: 2049593.980 ops/s
Iteration   6: 2042591.841 ops/s
Iteration   7: 2044846.865 ops/s
Iteration   8: 2050765.847 ops/s
Iteration   9: 2047410.597 ops/s
Iteration  10: 2050193.690 ops/s
Iteration  11: 2046786.050 ops/s
Iteration  12: 2026834.284 ops/s
Iteration  13: 2033295.265 ops/s
Iteration  14: 2033871.304 ops/s
Iteration  15: 2037866.747 ops/s
Iteration  16: 2043254.404 ops/s
Iteration  17: 2038563.161 ops/s
Iteration  18: 2051908.452 ops/s
Iteration  19: 2045255.764 ops/s
Iteration  20: 2047082.458 ops/s
Iteration  21: 2042302.807 ops/s
Iteration  22: 2043324.213 ops/s
Iteration  23: 2036490.857 ops/s
Iteration  24: 2048272.305 ops/s
Iteration  25: 2047772.265 ops/s
Iteration  26: 2044016.248 ops/s
Iteration  27: 2041697.483 ops/s
Iteration  28: 2047083.536 ops/s
Iteration  29: 2047201.698 ops/s
Iteration  30: 2044561.690 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByFloat":
  2043460.401 ±(99.9%) 3966.187 ops/s [Average]
  (min, avg, max) = (2026834.284, 2043460.401, 2051908.452), stdev = 5936.402
  CI (99.9%): [2039494.214, 2047426.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_sumByFloat  thrpt   30  2043460.401 ± 3966.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61.558 ops/s
# Warmup Iteration   2: 73.774 ops/s
# Warmup Iteration   3: 98.969 ops/s
# Warmup Iteration   4: 99.372 ops/s
# Warmup Iteration   5: 99.386 ops/s
# Warmup Iteration   6: 100.914 ops/s
# Warmup Iteration   7: 100.569 ops/s
# Warmup Iteration   8: 100.806 ops/s
# Warmup Iteration   9: 89.411 ops/s
# Warmup Iteration  10: 93.538 ops/s
# Warmup Iteration  11: 97.739 ops/s
# Warmup Iteration  12: 101.289 ops/s
# Warmup Iteration  13: 99.859 ops/s
# Warmup Iteration  14: 100.786 ops/s
# Warmup Iteration  15: 101.451 ops/s
# Warmup Iteration  16: 100.776 ops/s
# Warmup Iteration  17: 98.245 ops/s
# Warmup Iteration  18: 99.180 ops/s
# Warmup Iteration  19: 98.752 ops/s
# Warmup Iteration  20: 99.056 ops/s
# Warmup Iteration  21: 98.240 ops/s
# Warmup Iteration  22: 98.265 ops/s
# Warmup Iteration  23: 97.985 ops/s
# Warmup Iteration  24: 98.580 ops/s
# Warmup Iteration  25: 98.818 ops/s
# Warmup Iteration  26: 99.373 ops/s
# Warmup Iteration  27: 99.042 ops/s
# Warmup Iteration  28: 98.057 ops/s
# Warmup Iteration  29: 99.139 ops/s
# Warmup Iteration  30: 98.078 ops/s
Iteration   1: 98.182 ops/s
Iteration   2: 96.564 ops/s
Iteration   3: 98.100 ops/s
Iteration   4: 97.684 ops/s
Iteration   5: 96.795 ops/s
Iteration   6: 97.612 ops/s
Iteration   7: 98.396 ops/s
Iteration   8: 96.136 ops/s
Iteration   9: 96.828 ops/s
Iteration  10: 100.072 ops/s
Iteration  11: 99.183 ops/s
Iteration  12: 99.693 ops/s
Iteration  13: 98.432 ops/s
Iteration  14: 97.575 ops/s
Iteration  15: 97.323 ops/s
Iteration  16: 98.473 ops/s
Iteration  17: 97.780 ops/s
Iteration  18: 97.422 ops/s
Iteration  19: 100.437 ops/s
Iteration  20: 99.814 ops/s
Iteration  21: 97.609 ops/s
Iteration  22: 100.751 ops/s
Iteration  23: 99.763 ops/s
Iteration  24: 99.535 ops/s
Iteration  25: 100.134 ops/s
Iteration  26: 99.917 ops/s
Iteration  27: 99.445 ops/s
Iteration  28: 100.401 ops/s
Iteration  29: 100.337 ops/s
Iteration  30: 99.230 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  98.654 ±(99.9%) 0.890 ops/s [Average]
  (min, avg, max) = (96.136, 98.654, 100.751), stdev = 1.332
  CI (99.9%): [97.764, 99.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt   Score   Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  98.654 ± 0.890  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1422240.903 ops/s
# Warmup Iteration   2: 2740142.147 ops/s
# Warmup Iteration   3: 2953122.755 ops/s
# Warmup Iteration   4: 2953211.078 ops/s
# Warmup Iteration   5: 2476670.799 ops/s
# Warmup Iteration   6: 2973970.258 ops/s
# Warmup Iteration   7: 2978829.507 ops/s
# Warmup Iteration   8: 2978651.211 ops/s
# Warmup Iteration   9: 2971771.406 ops/s
# Warmup Iteration  10: 2979738.441 ops/s
# Warmup Iteration  11: 2987319.925 ops/s
# Warmup Iteration  12: 2985212.702 ops/s
# Warmup Iteration  13: 2970294.597 ops/s
# Warmup Iteration  14: 2971014.096 ops/s
# Warmup Iteration  15: 2966405.535 ops/s
# Warmup Iteration  16: 2978968.102 ops/s
# Warmup Iteration  17: 2991296.566 ops/s
# Warmup Iteration  18: 2984607.282 ops/s
# Warmup Iteration  19: 2980794.971 ops/s
# Warmup Iteration  20: 2967367.649 ops/s
# Warmup Iteration  21: 2970564.275 ops/s
# Warmup Iteration  22: 2968678.987 ops/s
# Warmup Iteration  23: 2971463.699 ops/s
# Warmup Iteration  24: 2967630.378 ops/s
# Warmup Iteration  25: 2980183.030 ops/s
# Warmup Iteration  26: 2984286.204 ops/s
# Warmup Iteration  27: 2975709.187 ops/s
# Warmup Iteration  28: 2986866.469 ops/s
# Warmup Iteration  29: 2985422.358 ops/s
# Warmup Iteration  30: 2986688.601 ops/s
Iteration   1: 2976436.938 ops/s
Iteration   2: 2987685.898 ops/s
Iteration   3: 2974341.114 ops/s
Iteration   4: 2970156.644 ops/s
Iteration   5: 2976471.887 ops/s
Iteration   6: 2983301.713 ops/s
Iteration   7: 2974317.709 ops/s
Iteration   8: 2986612.689 ops/s
Iteration   9: 2981171.388 ops/s
Iteration  10: 2988632.801 ops/s
Iteration  11: 2993636.773 ops/s
Iteration  12: 2975062.398 ops/s
Iteration  13: 2967996.563 ops/s
Iteration  14: 2979437.360 ops/s
Iteration  15: 2962403.750 ops/s
Iteration  16: 2974974.857 ops/s
Iteration  17: 2977128.903 ops/s
Iteration  18: 2980668.620 ops/s
Iteration  19: 2994658.178 ops/s
Iteration  20: 2988917.651 ops/s
Iteration  21: 2980381.768 ops/s
Iteration  22: 2980776.237 ops/s
Iteration  23: 2969643.418 ops/s
Iteration  24: 2994133.580 ops/s
Iteration  25: 2999281.906 ops/s
Iteration  26: 2978787.101 ops/s
Iteration  27: 2986108.587 ops/s
Iteration  28: 2997284.955 ops/s
Iteration  29: 2987393.706 ops/s
Iteration  30: 2990375.550 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByInt":
  2981939.355 ±(99.9%) 6122.403 ops/s [Average]
  (min, avg, max) = (2962403.750, 2981939.355, 2999281.906), stdev = 9163.725
  CI (99.9%): [2975816.952, 2988061.757] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_sumByInt  thrpt   30  2981939.355 ± 6122.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1419856.524 ops/s
# Warmup Iteration   2: 2758513.707 ops/s
# Warmup Iteration   3: 3007582.308 ops/s
# Warmup Iteration   4: 3033407.256 ops/s
# Warmup Iteration   5: 2502255.320 ops/s
# Warmup Iteration   6: 2988100.126 ops/s
# Warmup Iteration   7: 2992672.269 ops/s
# Warmup Iteration   8: 2985292.075 ops/s
# Warmup Iteration   9: 2987256.743 ops/s
# Warmup Iteration  10: 2988713.572 ops/s
# Warmup Iteration  11: 2992399.134 ops/s
# Warmup Iteration  12: 2983753.093 ops/s
# Warmup Iteration  13: 2991846.910 ops/s
# Warmup Iteration  14: 2981184.953 ops/s
# Warmup Iteration  15: 2982480.141 ops/s
# Warmup Iteration  16: 2980197.411 ops/s
# Warmup Iteration  17: 3033849.757 ops/s
# Warmup Iteration  18: 2999085.688 ops/s
# Warmup Iteration  19: 3023898.670 ops/s
# Warmup Iteration  20: 3016906.483 ops/s
# Warmup Iteration  21: 3025750.097 ops/s
# Warmup Iteration  22: 3031964.760 ops/s
# Warmup Iteration  23: 3020784.506 ops/s
# Warmup Iteration  24: 3022489.787 ops/s
# Warmup Iteration  25: 3037243.776 ops/s
# Warmup Iteration  26: 3035038.188 ops/s
# Warmup Iteration  27: 3025169.421 ops/s
# Warmup Iteration  28: 3033146.391 ops/s
# Warmup Iteration  29: 3022651.753 ops/s
# Warmup Iteration  30: 3018825.461 ops/s
Iteration   1: 3037908.012 ops/s
Iteration   2: 3029561.320 ops/s
Iteration   3: 3025187.044 ops/s
Iteration   4: 3033527.971 ops/s
Iteration   5: 3028661.094 ops/s
Iteration   6: 3034241.602 ops/s
Iteration   7: 3037443.742 ops/s
Iteration   8: 3024792.862 ops/s
Iteration   9: 3029226.015 ops/s
Iteration  10: 3022523.019 ops/s
Iteration  11: 3033994.632 ops/s
Iteration  12: 3036553.926 ops/s
Iteration  13: 3032988.257 ops/s
Iteration  14: 3033797.897 ops/s
Iteration  15: 3024147.792 ops/s
Iteration  16: 3026038.432 ops/s
Iteration  17: 3029058.165 ops/s
Iteration  18: 3019439.789 ops/s
Iteration  19: 3027535.800 ops/s
Iteration  20: 3033378.406 ops/s
Iteration  21: 3034371.606 ops/s
Iteration  22: 3015061.894 ops/s
Iteration  23: 3027108.548 ops/s
Iteration  24: 3039051.444 ops/s
Iteration  25: 3027900.753 ops/s
Iteration  26: 3030170.320 ops/s
Iteration  27: 3025831.413 ops/s
Iteration  28: 3033115.752 ops/s
Iteration  29: 3026253.423 ops/s
Iteration  30: 3025457.614 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumByLong":
  3029477.618 ±(99.9%) 3742.176 ops/s [Average]
  (min, avg, max) = (3015061.894, 3029477.618, 3039051.444), stdev = 5601.113
  CI (99.9%): [3025735.442, 3033219.794] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_sumByLong  thrpt   30  3029477.618 ± 3742.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8617351.747 ops/s
# Warmup Iteration   2: 15412701.473 ops/s
# Warmup Iteration   3: 17492439.972 ops/s
# Warmup Iteration   4: 17487089.895 ops/s
# Warmup Iteration   5: 14830587.521 ops/s
# Warmup Iteration   6: 16801948.431 ops/s
# Warmup Iteration   7: 16773617.667 ops/s
# Warmup Iteration   8: 16822926.986 ops/s
# Warmup Iteration   9: 16822797.210 ops/s
# Warmup Iteration  10: 16767426.705 ops/s
# Warmup Iteration  11: 16759773.711 ops/s
# Warmup Iteration  12: 16784620.476 ops/s
# Warmup Iteration  13: 16770734.458 ops/s
# Warmup Iteration  14: 16720574.716 ops/s
# Warmup Iteration  15: 16750835.970 ops/s
# Warmup Iteration  16: 16782877.583 ops/s
# Warmup Iteration  17: 17814808.523 ops/s
# Warmup Iteration  18: 17765149.844 ops/s
# Warmup Iteration  19: 17785117.546 ops/s
# Warmup Iteration  20: 17702909.226 ops/s
# Warmup Iteration  21: 17791892.080 ops/s
# Warmup Iteration  22: 17780825.733 ops/s
# Warmup Iteration  23: 17777501.370 ops/s
# Warmup Iteration  24: 17671903.497 ops/s
# Warmup Iteration  25: 17834057.882 ops/s
# Warmup Iteration  26: 17832035.790 ops/s
# Warmup Iteration  27: 17782310.995 ops/s
# Warmup Iteration  28: 17862467.436 ops/s
# Warmup Iteration  29: 17817978.369 ops/s
# Warmup Iteration  30: 17842273.864 ops/s
Iteration   1: 17868434.222 ops/s
Iteration   2: 17835979.617 ops/s
Iteration   3: 17800137.078 ops/s
Iteration   4: 17767225.533 ops/s
Iteration   5: 17848780.474 ops/s
Iteration   6: 17802497.357 ops/s
Iteration   7: 17831606.627 ops/s
Iteration   8: 17860298.809 ops/s
Iteration   9: 17834330.522 ops/s
Iteration  10: 17816027.991 ops/s
Iteration  11: 17745768.754 ops/s
Iteration  12: 17748885.334 ops/s
Iteration  13: 17753335.234 ops/s
Iteration  14: 17794138.002 ops/s
Iteration  15: 17658765.333 ops/s
Iteration  16: 17846819.182 ops/s
Iteration  17: 17785936.011 ops/s
Iteration  18: 17871599.532 ops/s
Iteration  19: 17814255.562 ops/s
Iteration  20: 17857498.214 ops/s
Iteration  21: 17869486.590 ops/s
Iteration  22: 17884682.501 ops/s
Iteration  23: 17846745.778 ops/s
Iteration  24: 17834104.717 ops/s
Iteration  25: 17855130.277 ops/s
Iteration  26: 17734841.972 ops/s
Iteration  27: 17806546.607 ops/s
Iteration  28: 17873314.829 ops/s
Iteration  29: 17739845.319 ops/s
Iteration  30: 17819623.030 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumDouble":
  17813554.700 ±(99.9%) 35263.640 ops/s [Average]
  (min, avg, max) = (17658765.333, 17813554.700, 17884682.501), stdev = 52780.960
  CI (99.9%): [17778291.061, 17848818.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_sumDouble  thrpt   30  17813554.700 ± 35263.640  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8206686.901 ops/s
# Warmup Iteration   2: 13336897.868 ops/s
# Warmup Iteration   3: 15869755.402 ops/s
# Warmup Iteration   4: 15960027.376 ops/s
# Warmup Iteration   5: 14658874.507 ops/s
# Warmup Iteration   6: 14605683.685 ops/s
# Warmup Iteration   7: 15924710.543 ops/s
# Warmup Iteration   8: 15944821.359 ops/s
# Warmup Iteration   9: 15953181.184 ops/s
# Warmup Iteration  10: 15912241.212 ops/s
# Warmup Iteration  11: 15888816.974 ops/s
# Warmup Iteration  12: 15922048.275 ops/s
# Warmup Iteration  13: 15932410.077 ops/s
# Warmup Iteration  14: 15889354.705 ops/s
# Warmup Iteration  15: 15932797.628 ops/s
# Warmup Iteration  16: 15942159.459 ops/s
# Warmup Iteration  17: 16013715.992 ops/s
# Warmup Iteration  18: 15867713.485 ops/s
# Warmup Iteration  19: 15893227.337 ops/s
# Warmup Iteration  20: 15975291.885 ops/s
# Warmup Iteration  21: 15958020.285 ops/s
# Warmup Iteration  22: 15965423.009 ops/s
# Warmup Iteration  23: 15938621.330 ops/s
# Warmup Iteration  24: 15931950.149 ops/s
# Warmup Iteration  25: 15936338.982 ops/s
# Warmup Iteration  26: 15919716.689 ops/s
# Warmup Iteration  27: 15926491.068 ops/s
# Warmup Iteration  28: 15961553.652 ops/s
# Warmup Iteration  29: 15939292.294 ops/s
# Warmup Iteration  30: 15949770.989 ops/s
Iteration   1: 15979036.059 ops/s
Iteration   2: 15952974.342 ops/s
Iteration   3: 15991807.175 ops/s
Iteration   4: 15944605.458 ops/s
Iteration   5: 15925779.933 ops/s
Iteration   6: 15992520.748 ops/s
Iteration   7: 15933117.238 ops/s
Iteration   8: 15890164.700 ops/s
Iteration   9: 15842620.895 ops/s
Iteration  10: 15861108.232 ops/s
Iteration  11: 15975954.480 ops/s
Iteration  12: 15886483.583 ops/s
Iteration  13: 15949176.306 ops/s
Iteration  14: 15967798.810 ops/s
Iteration  15: 15933440.980 ops/s
Iteration  16: 15938871.667 ops/s
Iteration  17: 15928498.805 ops/s
Iteration  18: 15962208.102 ops/s
Iteration  19: 15975168.155 ops/s
Iteration  20: 15965698.510 ops/s
Iteration  21: 15932231.679 ops/s
Iteration  22: 15976353.254 ops/s
Iteration  23: 15888398.517 ops/s
Iteration  24: 15948089.778 ops/s
Iteration  25: 15940630.855 ops/s
Iteration  26: 15910547.205 ops/s
Iteration  27: 15984445.415 ops/s
Iteration  28: 15966960.860 ops/s
Iteration  29: 15970943.083 ops/s
Iteration  30: 15973446.305 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumFloat":
  15942969.371 ±(99.9%) 25627.259 ops/s [Average]
  (min, avg, max) = (15842620.895, 15942969.371, 15992520.748), stdev = 38357.677
  CI (99.9%): [15917342.112, 15968596.630] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_sumFloat  thrpt   30  15942969.371 ± 25627.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11719299.877 ops/s
# Warmup Iteration   2: 22673096.168 ops/s
# Warmup Iteration   3: 24534698.785 ops/s
# Warmup Iteration   4: 20675294.165 ops/s
# Warmup Iteration   5: 24557426.760 ops/s
# Warmup Iteration   6: 24582190.456 ops/s
# Warmup Iteration   7: 24576266.001 ops/s
# Warmup Iteration   8: 24544611.926 ops/s
# Warmup Iteration   9: 24584858.253 ops/s
# Warmup Iteration  10: 24562072.917 ops/s
# Warmup Iteration  11: 24632479.184 ops/s
# Warmup Iteration  12: 24650885.651 ops/s
# Warmup Iteration  13: 24623698.518 ops/s
# Warmup Iteration  14: 24598453.051 ops/s
# Warmup Iteration  15: 24656536.438 ops/s
# Warmup Iteration  16: 24668621.943 ops/s
# Warmup Iteration  17: 24704138.668 ops/s
# Warmup Iteration  18: 24564335.276 ops/s
# Warmup Iteration  19: 24540658.147 ops/s
# Warmup Iteration  20: 24576968.356 ops/s
# Warmup Iteration  21: 24571808.514 ops/s
# Warmup Iteration  22: 24495599.549 ops/s
# Warmup Iteration  23: 24643571.726 ops/s
# Warmup Iteration  24: 24629773.559 ops/s
# Warmup Iteration  25: 24582613.792 ops/s
# Warmup Iteration  26: 24642851.740 ops/s
# Warmup Iteration  27: 24626656.062 ops/s
# Warmup Iteration  28: 24576803.038 ops/s
# Warmup Iteration  29: 24649353.088 ops/s
# Warmup Iteration  30: 24592457.087 ops/s
Iteration   1: 24622678.721 ops/s
Iteration   2: 24682227.094 ops/s
Iteration   3: 24612048.847 ops/s
Iteration   4: 24708633.689 ops/s
Iteration   5: 24651623.559 ops/s
Iteration   6: 24561109.598 ops/s
Iteration   7: 24666684.236 ops/s
Iteration   8: 24612868.963 ops/s
Iteration   9: 24600799.875 ops/s
Iteration  10: 24544316.310 ops/s
Iteration  11: 24614212.153 ops/s
Iteration  12: 24531738.142 ops/s
Iteration  13: 24634544.975 ops/s
Iteration  14: 24702030.612 ops/s
Iteration  15: 24690423.187 ops/s
Iteration  16: 24636635.873 ops/s
Iteration  17: 24609301.353 ops/s
Iteration  18: 24630615.160 ops/s
Iteration  19: 24539449.480 ops/s
Iteration  20: 24628651.789 ops/s
Iteration  21: 24572199.309 ops/s
Iteration  22: 24606703.258 ops/s
Iteration  23: 24565530.034 ops/s
Iteration  24: 24494841.711 ops/s
Iteration  25: 24525180.505 ops/s
Iteration  26: 24566538.699 ops/s
Iteration  27: 24523523.276 ops/s
Iteration  28: 24598259.924 ops/s
Iteration  29: 24593649.255 ops/s
Iteration  30: 24402139.072 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumInteger":
  24597638.622 ±(99.9%) 44259.160 ops/s [Average]
  (min, avg, max) = (24402139.072, 24597638.622, 24708633.689), stdev = 66245.032
  CI (99.9%): [24553379.462, 24641897.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_sumInteger  thrpt   30  24597638.622 ± 44259.160  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11386402.816 ops/s
# Warmup Iteration   2: 23038920.029 ops/s
# Warmup Iteration   3: 23285082.892 ops/s
# Warmup Iteration   4: 19680464.857 ops/s
# Warmup Iteration   5: 23260913.083 ops/s
# Warmup Iteration   6: 23359231.927 ops/s
# Warmup Iteration   7: 23276878.502 ops/s
# Warmup Iteration   8: 23216041.809 ops/s
# Warmup Iteration   9: 23310482.145 ops/s
# Warmup Iteration  10: 23294265.595 ops/s
# Warmup Iteration  11: 23371353.351 ops/s
# Warmup Iteration  12: 23333738.090 ops/s
# Warmup Iteration  13: 23336433.324 ops/s
# Warmup Iteration  14: 23333780.765 ops/s
# Warmup Iteration  15: 23369002.802 ops/s
# Warmup Iteration  16: 23359797.845 ops/s
# Warmup Iteration  17: 23210521.526 ops/s
# Warmup Iteration  18: 23321763.448 ops/s
# Warmup Iteration  19: 23352596.605 ops/s
# Warmup Iteration  20: 23383140.192 ops/s
# Warmup Iteration  21: 23365195.183 ops/s
# Warmup Iteration  22: 23328681.079 ops/s
# Warmup Iteration  23: 23397224.797 ops/s
# Warmup Iteration  24: 23383499.540 ops/s
# Warmup Iteration  25: 23299595.835 ops/s
# Warmup Iteration  26: 23292467.247 ops/s
# Warmup Iteration  27: 23200834.809 ops/s
# Warmup Iteration  28: 23181131.045 ops/s
# Warmup Iteration  29: 23316855.580 ops/s
# Warmup Iteration  30: 23321394.080 ops/s
Iteration   1: 23361041.915 ops/s
Iteration   2: 23323334.198 ops/s
Iteration   3: 23391612.029 ops/s
Iteration   4: 23311534.597 ops/s
Iteration   5: 23432582.476 ops/s
Iteration   6: 23368996.986 ops/s
Iteration   7: 23366589.445 ops/s
Iteration   8: 23278803.376 ops/s
Iteration   9: 23345562.006 ops/s
Iteration  10: 23321049.891 ops/s
Iteration  11: 23264230.873 ops/s
Iteration  12: 23416904.024 ops/s
Iteration  13: 23422466.010 ops/s
Iteration  14: 23336357.329 ops/s
Iteration  15: 23262715.531 ops/s
Iteration  16: 23340405.147 ops/s
Iteration  17: 23340935.996 ops/s
Iteration  18: 23360059.254 ops/s
Iteration  19: 23247602.408 ops/s
Iteration  20: 23315726.246 ops/s
Iteration  21: 23238611.100 ops/s
Iteration  22: 23260430.176 ops/s
Iteration  23: 23258934.686 ops/s
Iteration  24: 23322193.619 ops/s
Iteration  25: 23305199.975 ops/s
Iteration  26: 23373867.792 ops/s
Iteration  27: 23372033.568 ops/s
Iteration  28: 23225480.213 ops/s
Iteration  29: 23378836.090 ops/s
Iteration  30: 23219670.216 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_sumLong":
  23325458.906 ±(99.9%) 39635.727 ops/s [Average]
  (min, avg, max) = (23219670.216, 23325458.906, 23432582.476), stdev = 59324.894
  CI (99.9%): [23285823.179, 23365094.632] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_sumLong  thrpt   30  23325458.906 ± 39635.727  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2050828.321 ops/s
# Warmup Iteration   2: 4712861.537 ops/s
# Warmup Iteration   3: 5115348.789 ops/s
# Warmup Iteration   4: 5122212.366 ops/s
# Warmup Iteration   5: 4249366.484 ops/s
# Warmup Iteration   6: 5088334.834 ops/s
# Warmup Iteration   7: 5091175.299 ops/s
# Warmup Iteration   8: 5074674.115 ops/s
# Warmup Iteration   9: 5089571.439 ops/s
# Warmup Iteration  10: 5111872.216 ops/s
# Warmup Iteration  11: 5098129.595 ops/s
# Warmup Iteration  12: 5090290.780 ops/s
# Warmup Iteration  13: 5103109.312 ops/s
# Warmup Iteration  14: 5080541.124 ops/s
# Warmup Iteration  15: 5097936.666 ops/s
# Warmup Iteration  16: 5095930.783 ops/s
# Warmup Iteration  17: 5110207.822 ops/s
# Warmup Iteration  18: 5112462.173 ops/s
# Warmup Iteration  19: 5106692.405 ops/s
# Warmup Iteration  20: 5107835.946 ops/s
# Warmup Iteration  21: 5101932.723 ops/s
# Warmup Iteration  22: 5112776.862 ops/s
# Warmup Iteration  23: 5113202.814 ops/s
# Warmup Iteration  24: 5115239.055 ops/s
# Warmup Iteration  25: 5107947.573 ops/s
# Warmup Iteration  26: 5108889.558 ops/s
# Warmup Iteration  27: 5108174.852 ops/s
# Warmup Iteration  28: 5105965.522 ops/s
# Warmup Iteration  29: 5106929.455 ops/s
# Warmup Iteration  30: 5108811.441 ops/s
Iteration   1: 5103313.171 ops/s
Iteration   2: 5109022.565 ops/s
Iteration   3: 5116172.565 ops/s
Iteration   4: 5098837.569 ops/s
Iteration   5: 5088435.768 ops/s
Iteration   6: 5123649.897 ops/s
Iteration   7: 5103223.122 ops/s
Iteration   8: 5085890.702 ops/s
Iteration   9: 5113412.157 ops/s
Iteration  10: 5094471.248 ops/s
Iteration  11: 5108673.461 ops/s
Iteration  12: 5111781.661 ops/s
Iteration  13: 5110901.235 ops/s
Iteration  14: 5109190.950 ops/s
Iteration  15: 5120794.233 ops/s
Iteration  16: 5114434.578 ops/s
Iteration  17: 5095796.667 ops/s
Iteration  18: 5122328.624 ops/s
Iteration  19: 5113949.798 ops/s
Iteration  20: 5114917.472 ops/s
Iteration  21: 5120949.045 ops/s
Iteration  22: 5111759.553 ops/s
Iteration  23: 5100017.450 ops/s
Iteration  24: 5100757.637 ops/s
Iteration  25: 5089408.632 ops/s
Iteration  26: 5111107.678 ops/s
Iteration  27: 5121852.664 ops/s
Iteration  28: 5113625.353 ops/s
Iteration  29: 5108787.965 ops/s
Iteration  30: 5110332.081 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_take":
  5108259.850 ±(99.9%) 6877.988 ops/s [Average]
  (min, avg, max) = (5085890.702, 5108259.850, 5123649.897), stdev = 10294.650
  CI (99.9%): [5101381.862, 5115137.838] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_take  thrpt   30  5108259.850 ± 6877.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8079462.825 ops/s
# Warmup Iteration   2: 17051878.029 ops/s
# Warmup Iteration   3: 17279665.299 ops/s
# Warmup Iteration   4: 16429594.440 ops/s
# Warmup Iteration   5: 15501436.232 ops/s
# Warmup Iteration   6: 17340297.494 ops/s
# Warmup Iteration   7: 17283750.661 ops/s
# Warmup Iteration   8: 17246251.180 ops/s
# Warmup Iteration   9: 17230015.985 ops/s
# Warmup Iteration  10: 17258039.806 ops/s
# Warmup Iteration  11: 17303567.111 ops/s
# Warmup Iteration  12: 17281119.321 ops/s
# Warmup Iteration  13: 17263941.454 ops/s
# Warmup Iteration  14: 17273801.730 ops/s
# Warmup Iteration  15: 17348582.525 ops/s
# Warmup Iteration  16: 17285482.645 ops/s
# Warmup Iteration  17: 17313059.954 ops/s
# Warmup Iteration  18: 17292979.428 ops/s
# Warmup Iteration  19: 17257611.103 ops/s
# Warmup Iteration  20: 17305120.025 ops/s
# Warmup Iteration  21: 17294319.258 ops/s
# Warmup Iteration  22: 17258661.620 ops/s
# Warmup Iteration  23: 17252002.411 ops/s
# Warmup Iteration  24: 17239056.345 ops/s
# Warmup Iteration  25: 17253531.715 ops/s
# Warmup Iteration  26: 17208131.529 ops/s
# Warmup Iteration  27: 17266673.280 ops/s
# Warmup Iteration  28: 17350344.007 ops/s
# Warmup Iteration  29: 17284677.814 ops/s
# Warmup Iteration  30: 17300296.254 ops/s
Iteration   1: 17255856.822 ops/s
Iteration   2: 17219585.854 ops/s
Iteration   3: 17289379.315 ops/s
Iteration   4: 17259006.702 ops/s
Iteration   5: 17347228.123 ops/s
Iteration   6: 17272236.815 ops/s
Iteration   7: 17319421.057 ops/s
Iteration   8: 17320459.327 ops/s
Iteration   9: 17359787.202 ops/s
Iteration  10: 17299924.078 ops/s
Iteration  11: 17317834.041 ops/s
Iteration  12: 17213411.426 ops/s
Iteration  13: 17262915.843 ops/s
Iteration  14: 17354900.967 ops/s
Iteration  15: 17293921.250 ops/s
Iteration  16: 17317574.789 ops/s
Iteration  17: 17348091.434 ops/s
Iteration  18: 17290404.700 ops/s
Iteration  19: 17293875.202 ops/s
Iteration  20: 17329236.586 ops/s
Iteration  21: 17266411.411 ops/s
Iteration  22: 17306703.909 ops/s
Iteration  23: 17206893.296 ops/s
Iteration  24: 17286621.089 ops/s
Iteration  25: 17168574.024 ops/s
Iteration  26: 17282658.092 ops/s
Iteration  27: 17341084.229 ops/s
Iteration  28: 17286566.463 ops/s
Iteration  29: 17312270.408 ops/s
Iteration  30: 17225842.088 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_takeWhile":
  17288289.218 ±(99.9%) 31490.736 ops/s [Average]
  (min, avg, max) = (17168574.024, 17288289.218, 17359787.202), stdev = 47133.854
  CI (99.9%): [17256798.482, 17319779.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_takeWhile  thrpt   30  17288289.218 ± 31490.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 737553.978 ops/s
# Warmup Iteration   2: 762565.039 ops/s
# Warmup Iteration   3: 992484.089 ops/s
# Warmup Iteration   4: 991764.523 ops/s
# Warmup Iteration   5: 986041.259 ops/s
# Warmup Iteration   6: 989965.455 ops/s
# Warmup Iteration   7: 988440.280 ops/s
# Warmup Iteration   8: 983177.316 ops/s
# Warmup Iteration   9: 989490.408 ops/s
# Warmup Iteration  10: 985058.146 ops/s
# Warmup Iteration  11: 984696.531 ops/s
# Warmup Iteration  12: 843973.479 ops/s
# Warmup Iteration  13: 996045.988 ops/s
# Warmup Iteration  14: 995190.898 ops/s
# Warmup Iteration  15: 993050.431 ops/s
# Warmup Iteration  16: 993300.248 ops/s
# Warmup Iteration  17: 1042654.063 ops/s
# Warmup Iteration  18: 1039589.222 ops/s
# Warmup Iteration  19: 1045484.973 ops/s
# Warmup Iteration  20: 1043305.449 ops/s
# Warmup Iteration  21: 1043720.356 ops/s
# Warmup Iteration  22: 1042914.861 ops/s
# Warmup Iteration  23: 1044722.527 ops/s
# Warmup Iteration  24: 1041679.542 ops/s
# Warmup Iteration  25: 1041077.628 ops/s
# Warmup Iteration  26: 1041324.946 ops/s
# Warmup Iteration  27: 1044937.958 ops/s
# Warmup Iteration  28: 1041726.180 ops/s
# Warmup Iteration  29: 1040456.356 ops/s
# Warmup Iteration  30: 1044560.890 ops/s
Iteration   1: 1043411.568 ops/s
Iteration   2: 1041651.503 ops/s
Iteration   3: 1045844.474 ops/s
Iteration   4: 1044047.479 ops/s
Iteration   5: 1041775.151 ops/s
Iteration   6: 1044625.198 ops/s
Iteration   7: 1044566.863 ops/s
Iteration   8: 1044272.346 ops/s
Iteration   9: 1043356.507 ops/s
Iteration  10: 1038713.180 ops/s
Iteration  11: 1041011.521 ops/s
Iteration  12: 1040188.500 ops/s
Iteration  13: 1039979.729 ops/s
Iteration  14: 1040997.075 ops/s
Iteration  15: 1044660.210 ops/s
Iteration  16: 1044926.577 ops/s
Iteration  17: 1042341.327 ops/s
Iteration  18: 1039970.349 ops/s
Iteration  19: 1026815.537 ops/s
Iteration  20: 1042696.790 ops/s
Iteration  21: 1040634.669 ops/s
Iteration  22: 1039523.338 ops/s
Iteration  23: 1038199.228 ops/s
Iteration  24: 1035973.376 ops/s
Iteration  25: 1041555.072 ops/s
Iteration  26: 1039991.466 ops/s
Iteration  27: 1035599.067 ops/s
Iteration  28: 1042208.252 ops/s
Iteration  29: 1044349.892 ops/s
Iteration  30: 1037198.509 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_take_throws":
  1041036.158 ±(99.9%) 2534.761 ops/s [Average]
  (min, avg, max) = (1026815.537, 1041036.158, 1045844.474), stdev = 3793.911
  CI (99.9%): [1038501.398, 1043570.919] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_take_throws  thrpt   30  1041036.158 ± 2534.761  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10853490.840 ops/s
# Warmup Iteration   2: 22352565.724 ops/s
# Warmup Iteration   3: 19262508.227 ops/s
# Warmup Iteration   4: 22760882.873 ops/s
# Warmup Iteration   5: 22761430.771 ops/s
# Warmup Iteration   6: 22777064.046 ops/s
# Warmup Iteration   7: 22728933.013 ops/s
# Warmup Iteration   8: 22727614.555 ops/s
# Warmup Iteration   9: 22695065.629 ops/s
# Warmup Iteration  10: 22701703.960 ops/s
# Warmup Iteration  11: 22717882.151 ops/s
# Warmup Iteration  12: 22702240.911 ops/s
# Warmup Iteration  13: 22702105.814 ops/s
# Warmup Iteration  14: 22422669.327 ops/s
# Warmup Iteration  15: 22779704.126 ops/s
# Warmup Iteration  16: 22821798.864 ops/s
# Warmup Iteration  17: 22758048.648 ops/s
# Warmup Iteration  18: 22767925.138 ops/s
# Warmup Iteration  19: 22785361.212 ops/s
# Warmup Iteration  20: 22697027.600 ops/s
# Warmup Iteration  21: 22699960.027 ops/s
# Warmup Iteration  22: 22731515.780 ops/s
# Warmup Iteration  23: 22712077.414 ops/s
# Warmup Iteration  24: 22700115.745 ops/s
# Warmup Iteration  25: 22719661.316 ops/s
# Warmup Iteration  26: 22774729.065 ops/s
# Warmup Iteration  27: 22758391.110 ops/s
# Warmup Iteration  28: 22715480.238 ops/s
# Warmup Iteration  29: 22697340.971 ops/s
# Warmup Iteration  30: 22687303.947 ops/s
Iteration   1: 22738120.768 ops/s
Iteration   2: 22715542.416 ops/s
Iteration   3: 22688766.154 ops/s
Iteration   4: 22810914.024 ops/s
Iteration   5: 22600403.716 ops/s
Iteration   6: 22747379.612 ops/s
Iteration   7: 22623812.355 ops/s
Iteration   8: 22671934.548 ops/s
Iteration   9: 22556606.389 ops/s
Iteration  10: 22757949.728 ops/s
Iteration  11: 22785091.127 ops/s
Iteration  12: 22768241.322 ops/s
Iteration  13: 22747177.534 ops/s
Iteration  14: 22771416.869 ops/s
Iteration  15: 22565576.423 ops/s
Iteration  16: 22703282.593 ops/s
Iteration  17: 22716649.550 ops/s
Iteration  18: 22588906.499 ops/s
Iteration  19: 22619352.737 ops/s
Iteration  20: 22731671.728 ops/s
Iteration  21: 22779828.062 ops/s
Iteration  22: 22724714.598 ops/s
Iteration  23: 22607073.922 ops/s
Iteration  24: 22678232.047 ops/s
Iteration  25: 22756077.790 ops/s
Iteration  26: 22649154.753 ops/s
Iteration  27: 22510586.874 ops/s
Iteration  28: 22746447.990 ops/s
Iteration  29: 22718896.202 ops/s
Iteration  30: 22799257.190 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_tap":
  22695968.851 ±(99.9%) 53190.366 ops/s [Average]
  (min, avg, max) = (22510586.874, 22695968.851, 22810914.024), stdev = 79612.842
  CI (99.9%): [22642778.485, 22749159.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_tap  thrpt   30  22695968.851 ± 53190.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 894237.525 ops/s
# Warmup Iteration   2: 2104421.557 ops/s
# Warmup Iteration   3: 2102742.620 ops/s
# Warmup Iteration   4: 1758221.981 ops/s
# Warmup Iteration   5: 2108234.801 ops/s
# Warmup Iteration   6: 2105830.974 ops/s
# Warmup Iteration   7: 2107941.088 ops/s
# Warmup Iteration   8: 2102346.232 ops/s
# Warmup Iteration   9: 2104436.571 ops/s
# Warmup Iteration  10: 2102754.223 ops/s
# Warmup Iteration  11: 2108942.256 ops/s
# Warmup Iteration  12: 2108400.448 ops/s
# Warmup Iteration  13: 2107068.572 ops/s
# Warmup Iteration  14: 2105759.358 ops/s
# Warmup Iteration  15: 2106804.785 ops/s
# Warmup Iteration  16: 2087802.630 ops/s
# Warmup Iteration  17: 2100381.143 ops/s
# Warmup Iteration  18: 2099965.774 ops/s
# Warmup Iteration  19: 2110427.242 ops/s
# Warmup Iteration  20: 2106303.584 ops/s
# Warmup Iteration  21: 2109612.135 ops/s
# Warmup Iteration  22: 2110355.591 ops/s
# Warmup Iteration  23: 2099691.669 ops/s
# Warmup Iteration  24: 2105590.716 ops/s
# Warmup Iteration  25: 2100601.166 ops/s
# Warmup Iteration  26: 2094975.086 ops/s
# Warmup Iteration  27: 2105208.086 ops/s
# Warmup Iteration  28: 2108132.887 ops/s
# Warmup Iteration  29: 2100686.907 ops/s
# Warmup Iteration  30: 2100367.200 ops/s
Iteration   1: 2107700.813 ops/s
Iteration   2: 2102609.971 ops/s
Iteration   3: 2108067.450 ops/s
Iteration   4: 2102850.280 ops/s
Iteration   5: 2107226.382 ops/s
Iteration   6: 2100744.267 ops/s
Iteration   7: 2105529.822 ops/s
Iteration   8: 2107221.483 ops/s
Iteration   9: 2105682.813 ops/s
Iteration  10: 2097899.208 ops/s
Iteration  11: 2092771.247 ops/s
Iteration  12: 2104180.385 ops/s
Iteration  13: 2106845.719 ops/s
Iteration  14: 2094009.735 ops/s
Iteration  15: 2113027.081 ops/s
Iteration  16: 2100940.428 ops/s
Iteration  17: 2108908.140 ops/s
Iteration  18: 2103224.348 ops/s
Iteration  19: 2109996.198 ops/s
Iteration  20: 2106528.070 ops/s
Iteration  21: 2110199.888 ops/s
Iteration  22: 2094067.422 ops/s
Iteration  23: 2092093.812 ops/s
Iteration  24: 2098618.500 ops/s
Iteration  25: 2106432.312 ops/s
Iteration  26: 2094980.349 ops/s
Iteration  27: 2103274.108 ops/s
Iteration  28: 2102847.392 ops/s
Iteration  29: 2109325.978 ops/s
Iteration  30: 2093290.069 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_testToString":
  2103036.456 ±(99.9%) 3945.466 ops/s [Average]
  (min, avg, max) = (2092093.812, 2103036.456, 2113027.081), stdev = 5905.389
  CI (99.9%): [2099090.989, 2106981.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_testToString  thrpt   30  2103036.456 ± 3945.466  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5463239.659 ops/s
# Warmup Iteration   2: 11495298.079 ops/s
# Warmup Iteration   3: 9807699.815 ops/s
# Warmup Iteration   4: 10988006.617 ops/s
# Warmup Iteration   5: 11330071.596 ops/s
# Warmup Iteration   6: 11341416.622 ops/s
# Warmup Iteration   7: 11293940.973 ops/s
# Warmup Iteration   8: 11316384.226 ops/s
# Warmup Iteration   9: 11327176.274 ops/s
# Warmup Iteration  10: 11278843.450 ops/s
# Warmup Iteration  11: 11321108.561 ops/s
# Warmup Iteration  12: 11278356.398 ops/s
# Warmup Iteration  13: 11319165.777 ops/s
# Warmup Iteration  14: 11297101.237 ops/s
# Warmup Iteration  15: 11318951.772 ops/s
# Warmup Iteration  16: 11352105.259 ops/s
# Warmup Iteration  17: 11320936.977 ops/s
# Warmup Iteration  18: 11291656.150 ops/s
# Warmup Iteration  19: 11360913.165 ops/s
# Warmup Iteration  20: 11315996.446 ops/s
# Warmup Iteration  21: 11306519.395 ops/s
# Warmup Iteration  22: 11304155.743 ops/s
# Warmup Iteration  23: 11282931.545 ops/s
# Warmup Iteration  24: 11323487.578 ops/s
# Warmup Iteration  25: 11283786.526 ops/s
# Warmup Iteration  26: 11283865.859 ops/s
# Warmup Iteration  27: 11359264.371 ops/s
# Warmup Iteration  28: 11329723.132 ops/s
# Warmup Iteration  29: 11280597.914 ops/s
# Warmup Iteration  30: 11338981.537 ops/s
Iteration   1: 11278648.708 ops/s
Iteration   2: 11332800.369 ops/s
Iteration   3: 11367441.476 ops/s
Iteration   4: 11307188.515 ops/s
Iteration   5: 11294022.133 ops/s
Iteration   6: 11325556.355 ops/s
Iteration   7: 11300788.277 ops/s
Iteration   8: 11324562.645 ops/s
Iteration   9: 11378178.123 ops/s
Iteration  10: 11381626.341 ops/s
Iteration  11: 11344772.871 ops/s
Iteration  12: 11379155.647 ops/s
Iteration  13: 11373126.050 ops/s
Iteration  14: 11310524.963 ops/s
Iteration  15: 11305270.994 ops/s
Iteration  16: 11328105.930 ops/s
Iteration  17: 11326654.498 ops/s
Iteration  18: 11358773.133 ops/s
Iteration  19: 11359014.912 ops/s
Iteration  20: 11275557.977 ops/s
Iteration  21: 11243598.396 ops/s
Iteration  22: 11307152.166 ops/s
Iteration  23: 11328397.179 ops/s
Iteration  24: 11334719.100 ops/s
Iteration  25: 11376159.778 ops/s
Iteration  26: 11320543.456 ops/s
Iteration  27: 11297231.465 ops/s
Iteration  28: 11275656.045 ops/s
Iteration  29: 11298886.348 ops/s
Iteration  30: 11272082.604 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toArray":
  11323539.882 ±(99.9%) 24568.062 ops/s [Average]
  (min, avg, max) = (11243598.396, 11323539.882, 11381626.341), stdev = 36772.322
  CI (99.9%): [11298971.819, 11348107.944] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_toArray  thrpt   30  11323539.882 ± 24568.062  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 162909568.561 ops/s
# Warmup Iteration   2: 303884697.270 ops/s
# Warmup Iteration   3: 274773591.186 ops/s
# Warmup Iteration   4: 312860222.760 ops/s
# Warmup Iteration   5: 313941011.104 ops/s
# Warmup Iteration   6: 314096301.311 ops/s
# Warmup Iteration   7: 313460634.934 ops/s
# Warmup Iteration   8: 313139831.223 ops/s
# Warmup Iteration   9: 313174312.858 ops/s
# Warmup Iteration  10: 315102283.082 ops/s
# Warmup Iteration  11: 313949718.576 ops/s
# Warmup Iteration  12: 310818173.034 ops/s
# Warmup Iteration  13: 314609301.493 ops/s
# Warmup Iteration  14: 312948490.161 ops/s
# Warmup Iteration  15: 312727976.457 ops/s
# Warmup Iteration  16: 314183447.529 ops/s
# Warmup Iteration  17: 313603343.410 ops/s
# Warmup Iteration  18: 313732462.104 ops/s
# Warmup Iteration  19: 314037211.099 ops/s
# Warmup Iteration  20: 311901620.967 ops/s
# Warmup Iteration  21: 312930528.499 ops/s
# Warmup Iteration  22: 313645576.680 ops/s
# Warmup Iteration  23: 313612421.979 ops/s
# Warmup Iteration  24: 312552638.723 ops/s
# Warmup Iteration  25: 313199422.177 ops/s
# Warmup Iteration  26: 313457460.568 ops/s
# Warmup Iteration  27: 313259877.162 ops/s
# Warmup Iteration  28: 313108176.854 ops/s
# Warmup Iteration  29: 313140939.684 ops/s
# Warmup Iteration  30: 312536628.202 ops/s
Iteration   1: 311426309.207 ops/s
Iteration   2: 311709044.347 ops/s
Iteration   3: 314385042.364 ops/s
Iteration   4: 313606316.751 ops/s
Iteration   5: 313287089.962 ops/s
Iteration   6: 314764298.807 ops/s
Iteration   7: 314890295.155 ops/s
Iteration   8: 313203786.292 ops/s
Iteration   9: 313336985.995 ops/s
Iteration  10: 312653915.308 ops/s
Iteration  11: 313800431.112 ops/s
Iteration  12: 313181973.891 ops/s
Iteration  13: 312565580.823 ops/s
Iteration  14: 312450673.539 ops/s
Iteration  15: 313098118.301 ops/s
Iteration  16: 313006160.709 ops/s
Iteration  17: 313260715.355 ops/s
Iteration  18: 313160746.925 ops/s
Iteration  19: 313211407.161 ops/s
Iteration  20: 313275271.431 ops/s
Iteration  21: 314153830.411 ops/s
Iteration  22: 312029078.830 ops/s
Iteration  23: 309912051.311 ops/s
Iteration  24: 311038906.829 ops/s
Iteration  25: 312929950.818 ops/s
Iteration  26: 310633923.056 ops/s
Iteration  27: 311123798.339 ops/s
Iteration  28: 310345069.073 ops/s
Iteration  29: 312002790.591 ops/s
Iteration  30: 312609740.042 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toImmutable":
  312701776.758 ±(99.9%) 833794.314 ops/s [Average]
  (min, avg, max) = (309912051.311, 312701776.758, 314890295.155), stdev = 1247984.171
  CI (99.9%): [311867982.444, 313535571.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score        Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_toImmutable  thrpt   30  312701776.758 ± 833794.314  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2321136.012 ops/s
# Warmup Iteration   2: 5082359.188 ops/s
# Warmup Iteration   3: 5165964.686 ops/s
# Warmup Iteration   4: 4359289.682 ops/s
# Warmup Iteration   5: 5173692.626 ops/s
# Warmup Iteration   6: 5169352.211 ops/s
# Warmup Iteration   7: 5160205.897 ops/s
# Warmup Iteration   8: 5180932.600 ops/s
# Warmup Iteration   9: 5173549.824 ops/s
# Warmup Iteration  10: 5178623.892 ops/s
# Warmup Iteration  11: 5169762.892 ops/s
# Warmup Iteration  12: 5190582.072 ops/s
# Warmup Iteration  13: 5182854.831 ops/s
# Warmup Iteration  14: 5194313.672 ops/s
# Warmup Iteration  15: 5165298.235 ops/s
# Warmup Iteration  16: 5191893.894 ops/s
# Warmup Iteration  17: 5198706.537 ops/s
# Warmup Iteration  18: 5172134.114 ops/s
# Warmup Iteration  19: 5166791.070 ops/s
# Warmup Iteration  20: 5158146.178 ops/s
# Warmup Iteration  21: 5188870.456 ops/s
# Warmup Iteration  22: 5182419.376 ops/s
# Warmup Iteration  23: 5164232.354 ops/s
# Warmup Iteration  24: 5165998.741 ops/s
# Warmup Iteration  25: 5159049.413 ops/s
# Warmup Iteration  26: 5206270.404 ops/s
# Warmup Iteration  27: 5140954.082 ops/s
# Warmup Iteration  28: 5182301.873 ops/s
# Warmup Iteration  29: 5161886.886 ops/s
# Warmup Iteration  30: 5161547.405 ops/s
Iteration   1: 5180488.525 ops/s
Iteration   2: 5168695.502 ops/s
Iteration   3: 5164605.472 ops/s
Iteration   4: 5155778.684 ops/s
Iteration   5: 5172878.052 ops/s
Iteration   6: 5181946.701 ops/s
Iteration   7: 5192989.336 ops/s
Iteration   8: 5191606.587 ops/s
Iteration   9: 5199081.234 ops/s
Iteration  10: 5156807.754 ops/s
Iteration  11: 5136289.931 ops/s
Iteration  12: 5159995.014 ops/s
Iteration  13: 5172571.490 ops/s
Iteration  14: 5173733.887 ops/s
Iteration  15: 5143807.086 ops/s
Iteration  16: 5174949.095 ops/s
Iteration  17: 5187923.003 ops/s
Iteration  18: 5210368.820 ops/s
Iteration  19: 5178055.862 ops/s
Iteration  20: 5180813.384 ops/s
Iteration  21: 5188812.915 ops/s
Iteration  22: 5142746.636 ops/s
Iteration  23: 5169091.798 ops/s
Iteration  24: 5154300.201 ops/s
Iteration  25: 5169025.862 ops/s
Iteration  26: 5148576.436 ops/s
Iteration  27: 5137316.214 ops/s
Iteration  28: 5169536.592 ops/s
Iteration  29: 5168748.914 ops/s
Iteration  30: 5136168.480 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toList":
  5168923.649 ±(99.9%) 12769.212 ops/s [Average]
  (min, avg, max) = (5136168.480, 5168923.649, 5210368.820), stdev = 19112.357
  CI (99.9%): [5156154.437, 5181692.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_toList  thrpt   30  5168923.649 ± 12769.212  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1822300.202 ops/s
# Warmup Iteration   2: 2316133.010 ops/s
# Warmup Iteration   3: 2890431.576 ops/s
# Warmup Iteration   4: 2906008.990 ops/s
# Warmup Iteration   5: 2902975.274 ops/s
# Warmup Iteration   6: 2899072.099 ops/s
# Warmup Iteration   7: 2893974.390 ops/s
# Warmup Iteration   8: 2897162.076 ops/s
# Warmup Iteration   9: 2392020.124 ops/s
# Warmup Iteration  10: 2860698.960 ops/s
# Warmup Iteration  11: 2885207.075 ops/s
# Warmup Iteration  12: 2880669.964 ops/s
# Warmup Iteration  13: 2869549.041 ops/s
# Warmup Iteration  14: 2879860.953 ops/s
# Warmup Iteration  15: 2883307.949 ops/s
# Warmup Iteration  16: 2883055.324 ops/s
# Warmup Iteration  17: 2902917.586 ops/s
# Warmup Iteration  18: 2907802.247 ops/s
# Warmup Iteration  19: 2907709.203 ops/s
# Warmup Iteration  20: 2911274.746 ops/s
# Warmup Iteration  21: 2895379.594 ops/s
# Warmup Iteration  22: 2907082.527 ops/s
# Warmup Iteration  23: 2887195.596 ops/s
# Warmup Iteration  24: 2911752.804 ops/s
# Warmup Iteration  25: 2897127.512 ops/s
# Warmup Iteration  26: 2909774.586 ops/s
# Warmup Iteration  27: 2882675.585 ops/s
# Warmup Iteration  28: 2906755.017 ops/s
# Warmup Iteration  29: 2912459.940 ops/s
# Warmup Iteration  30: 2910441.140 ops/s
Iteration   1: 2901439.632 ops/s
Iteration   2: 2902352.590 ops/s
Iteration   3: 2896419.730 ops/s
Iteration   4: 2896260.088 ops/s
Iteration   5: 2909919.040 ops/s
Iteration   6: 2906618.971 ops/s
Iteration   7: 2906978.394 ops/s
Iteration   8: 2905754.930 ops/s
Iteration   9: 2897214.880 ops/s
Iteration  10: 2880107.187 ops/s
Iteration  11: 2910505.031 ops/s
Iteration  12: 2910410.341 ops/s
Iteration  13: 2896494.728 ops/s
Iteration  14: 2901842.328 ops/s
Iteration  15: 2906662.284 ops/s
Iteration  16: 2909459.080 ops/s
Iteration  17: 2903622.071 ops/s
Iteration  18: 2902773.612 ops/s
Iteration  19: 2900926.144 ops/s
Iteration  20: 2898455.135 ops/s
Iteration  21: 2898164.376 ops/s
Iteration  22: 2912827.219 ops/s
Iteration  23: 2906126.546 ops/s
Iteration  24: 2892998.091 ops/s
Iteration  25: 2895181.282 ops/s
Iteration  26: 2875939.620 ops/s
Iteration  27: 2886320.102 ops/s
Iteration  28: 2895582.476 ops/s
Iteration  29: 2886584.351 ops/s
Iteration  30: 2890330.067 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toReversed":
  2899475.678 ±(99.9%) 6056.023 ops/s [Average]
  (min, avg, max) = (2875939.620, 2899475.678, 2912827.219), stdev = 9064.371
  CI (99.9%): [2893419.654, 2905531.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_toReversed  thrpt   30  2899475.678 ± 6056.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3081632.881 ops/s
# Warmup Iteration   2: 4420549.881 ops/s
# Warmup Iteration   3: 5356491.968 ops/s
# Warmup Iteration   4: 5333899.233 ops/s
# Warmup Iteration   5: 5371532.420 ops/s
# Warmup Iteration   6: 5369953.239 ops/s
# Warmup Iteration   7: 4911015.053 ops/s
# Warmup Iteration   8: 4916275.177 ops/s
# Warmup Iteration   9: 5370218.757 ops/s
# Warmup Iteration  10: 5347256.197 ops/s
# Warmup Iteration  11: 5359516.813 ops/s
# Warmup Iteration  12: 5365418.501 ops/s
# Warmup Iteration  13: 5346953.440 ops/s
# Warmup Iteration  14: 5362307.159 ops/s
# Warmup Iteration  15: 5358869.442 ops/s
# Warmup Iteration  16: 5360926.743 ops/s
# Warmup Iteration  17: 5365638.907 ops/s
# Warmup Iteration  18: 5364736.689 ops/s
# Warmup Iteration  19: 5362885.469 ops/s
# Warmup Iteration  20: 5360049.372 ops/s
# Warmup Iteration  21: 5358106.660 ops/s
# Warmup Iteration  22: 5359362.829 ops/s
# Warmup Iteration  23: 5366693.180 ops/s
# Warmup Iteration  24: 5349973.667 ops/s
# Warmup Iteration  25: 5353186.494 ops/s
# Warmup Iteration  26: 5372960.231 ops/s
# Warmup Iteration  27: 5361345.577 ops/s
# Warmup Iteration  28: 5356312.224 ops/s
# Warmup Iteration  29: 5342157.325 ops/s
# Warmup Iteration  30: 5358417.394 ops/s
Iteration   1: 5378638.598 ops/s
Iteration   2: 5333628.682 ops/s
Iteration   3: 5368137.728 ops/s
Iteration   4: 5380201.405 ops/s
Iteration   5: 5348847.787 ops/s
Iteration   6: 5367400.398 ops/s
Iteration   7: 5364542.491 ops/s
Iteration   8: 5378778.035 ops/s
Iteration   9: 5339440.812 ops/s
Iteration  10: 5351840.143 ops/s
Iteration  11: 5372032.372 ops/s
Iteration  12: 5363706.363 ops/s
Iteration  13: 4956874.972 ops/s
Iteration  14: 5358114.142 ops/s
Iteration  15: 5372284.310 ops/s
Iteration  16: 5363398.087 ops/s
Iteration  17: 5375263.945 ops/s
Iteration  18: 5371534.045 ops/s
Iteration  19: 5362166.560 ops/s
Iteration  20: 5372419.989 ops/s
Iteration  21: 5378445.321 ops/s
Iteration  22: 5357634.229 ops/s
Iteration  23: 5361824.593 ops/s
Iteration  24: 5355537.984 ops/s
Iteration  25: 5354224.452 ops/s
Iteration  26: 5366768.580 ops/s
Iteration  27: 5384278.947 ops/s
Iteration  28: 5377445.728 ops/s
Iteration  29: 5342300.187 ops/s
Iteration  30: 5377619.255 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedList":
  5351177.671 ±(99.9%) 50479.374 ops/s [Average]
  (min, avg, max) = (4956874.972, 5351177.671, 5384278.947), stdev = 75555.157
  CI (99.9%): [5300698.297, 5401657.046] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_toSortedList  thrpt   30  5351177.671 ± 50479.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1168711.014 ops/s
# Warmup Iteration   2: 1283413.833 ops/s
# Warmup Iteration   3: 1404226.908 ops/s
# Warmup Iteration   4: 1662092.662 ops/s
# Warmup Iteration   5: 1672375.710 ops/s
# Warmup Iteration   6: 1668021.723 ops/s
# Warmup Iteration   7: 1669175.119 ops/s
# Warmup Iteration   8: 1674165.733 ops/s
# Warmup Iteration   9: 1662793.711 ops/s
# Warmup Iteration  10: 1675027.087 ops/s
# Warmup Iteration  11: 1672754.884 ops/s
# Warmup Iteration  12: 1672358.681 ops/s
# Warmup Iteration  13: 1671739.528 ops/s
# Warmup Iteration  14: 1664185.107 ops/s
# Warmup Iteration  15: 1663920.945 ops/s
# Warmup Iteration  16: 1666224.383 ops/s
# Warmup Iteration  17: 1662271.390 ops/s
# Warmup Iteration  18: 1670918.752 ops/s
# Warmup Iteration  19: 1642570.296 ops/s
# Warmup Iteration  20: 1422703.068 ops/s
# Warmup Iteration  21: 1670725.444 ops/s
# Warmup Iteration  22: 1670734.457 ops/s
# Warmup Iteration  23: 1662202.148 ops/s
# Warmup Iteration  24: 1667370.052 ops/s
# Warmup Iteration  25: 1668150.369 ops/s
# Warmup Iteration  26: 1670740.843 ops/s
# Warmup Iteration  27: 1671369.444 ops/s
# Warmup Iteration  28: 1673742.048 ops/s
# Warmup Iteration  29: 1671437.061 ops/s
# Warmup Iteration  30: 1673272.198 ops/s
Iteration   1: 1672470.402 ops/s
Iteration   2: 1671659.278 ops/s
Iteration   3: 1668850.197 ops/s
Iteration   4: 1673409.420 ops/s
Iteration   5: 1672735.225 ops/s
Iteration   6: 1673629.671 ops/s
Iteration   7: 1669788.436 ops/s
Iteration   8: 1673671.459 ops/s
Iteration   9: 1666944.201 ops/s
Iteration  10: 1669210.846 ops/s
Iteration  11: 1665839.162 ops/s
Iteration  12: 1666698.429 ops/s
Iteration  13: 1671080.944 ops/s
Iteration  14: 1670259.135 ops/s
Iteration  15: 1666660.777 ops/s
Iteration  16: 1668961.149 ops/s
Iteration  17: 1672963.633 ops/s
Iteration  18: 1670668.873 ops/s
Iteration  19: 1672131.371 ops/s
Iteration  20: 1673263.176 ops/s
Iteration  21: 1670028.732 ops/s
Iteration  22: 1672253.786 ops/s
Iteration  23: 1668805.123 ops/s
Iteration  24: 1672104.943 ops/s
Iteration  25: 1669481.205 ops/s
Iteration  26: 1667419.427 ops/s
Iteration  27: 1671235.082 ops/s
Iteration  28: 1670150.506 ops/s
Iteration  29: 1670864.818 ops/s
Iteration  30: 1668991.545 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedListBy":
  1670407.698 ±(99.9%) 1510.529 ops/s [Average]
  (min, avg, max) = (1665839.162, 1670407.698, 1673671.459), stdev = 2260.888
  CI (99.9%): [1668897.170, 1671918.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  1670407.698 ± 1510.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1392741.420 ops/s
# Warmup Iteration   2: 3131015.900 ops/s
# Warmup Iteration   3: 3172784.591 ops/s
# Warmup Iteration   4: 2754489.187 ops/s
# Warmup Iteration   5: 3053783.921 ops/s
# Warmup Iteration   6: 3188852.617 ops/s
# Warmup Iteration   7: 3179424.601 ops/s
# Warmup Iteration   8: 3189120.672 ops/s
# Warmup Iteration   9: 3184012.933 ops/s
# Warmup Iteration  10: 3186247.169 ops/s
# Warmup Iteration  11: 3177631.753 ops/s
# Warmup Iteration  12: 3184796.339 ops/s
# Warmup Iteration  13: 3178802.467 ops/s
# Warmup Iteration  14: 3175538.861 ops/s
# Warmup Iteration  15: 3188128.721 ops/s
# Warmup Iteration  16: 3185365.841 ops/s
# Warmup Iteration  17: 3179736.017 ops/s
# Warmup Iteration  18: 3163927.098 ops/s
# Warmup Iteration  19: 3184494.949 ops/s
# Warmup Iteration  20: 3182974.085 ops/s
# Warmup Iteration  21: 3183788.795 ops/s
# Warmup Iteration  22: 3184525.601 ops/s
# Warmup Iteration  23: 3173350.131 ops/s
# Warmup Iteration  24: 3183176.234 ops/s
# Warmup Iteration  25: 3185237.580 ops/s
# Warmup Iteration  26: 3187999.242 ops/s
# Warmup Iteration  27: 3171186.258 ops/s
# Warmup Iteration  28: 3181050.208 ops/s
# Warmup Iteration  29: 3177216.925 ops/s
# Warmup Iteration  30: 3168654.516 ops/s
Iteration   1: 3189053.943 ops/s
Iteration   2: 3169422.713 ops/s
Iteration   3: 3181232.616 ops/s
Iteration   4: 3189170.642 ops/s
Iteration   5: 3181366.454 ops/s
Iteration   6: 3178596.169 ops/s
Iteration   7: 3168726.547 ops/s
Iteration   8: 3173470.822 ops/s
Iteration   9: 3157321.543 ops/s
Iteration  10: 3168004.747 ops/s
Iteration  11: 3166823.691 ops/s
Iteration  12: 3178702.604 ops/s
Iteration  13: 3174994.917 ops/s
Iteration  14: 3189508.017 ops/s
Iteration  15: 3180480.181 ops/s
Iteration  16: 3179367.618 ops/s
Iteration  17: 3178616.191 ops/s
Iteration  18: 3186823.700 ops/s
Iteration  19: 3182474.104 ops/s
Iteration  20: 3182720.711 ops/s
Iteration  21: 3171463.726 ops/s
Iteration  22: 3172810.800 ops/s
Iteration  23: 3187590.079 ops/s
Iteration  24: 3175179.769 ops/s
Iteration  25: 3189765.873 ops/s
Iteration  26: 3172019.892 ops/s
Iteration  27: 3178463.923 ops/s
Iteration  28: 3186407.556 ops/s
Iteration  29: 3186434.127 ops/s
Iteration  30: 3174285.828 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedSet":
  3178376.650 ±(99.9%) 5361.397 ops/s [Average]
  (min, avg, max) = (3157321.543, 3178376.650, 3189765.873), stdev = 8024.687
  CI (99.9%): [3173015.253, 3183738.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_toSortedSet  thrpt   30  3178376.650 ± 5361.397  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 431358.456 ops/s
# Warmup Iteration   2: 894692.971 ops/s
# Warmup Iteration   3: 923843.499 ops/s
# Warmup Iteration   4: 922113.453 ops/s
# Warmup Iteration   5: 780982.471 ops/s
# Warmup Iteration   6: 926101.336 ops/s
# Warmup Iteration   7: 926548.990 ops/s
# Warmup Iteration   8: 928554.435 ops/s
# Warmup Iteration   9: 927553.792 ops/s
# Warmup Iteration  10: 926043.199 ops/s
# Warmup Iteration  11: 926091.818 ops/s
# Warmup Iteration  12: 923432.796 ops/s
# Warmup Iteration  13: 917513.882 ops/s
# Warmup Iteration  14: 916957.956 ops/s
# Warmup Iteration  15: 923014.360 ops/s
# Warmup Iteration  16: 925285.701 ops/s
# Warmup Iteration  17: 925492.025 ops/s
# Warmup Iteration  18: 919391.591 ops/s
# Warmup Iteration  19: 922836.323 ops/s
# Warmup Iteration  20: 924743.355 ops/s
# Warmup Iteration  21: 925046.130 ops/s
# Warmup Iteration  22: 918903.736 ops/s
# Warmup Iteration  23: 921711.498 ops/s
# Warmup Iteration  24: 922976.991 ops/s
# Warmup Iteration  25: 924104.690 ops/s
# Warmup Iteration  26: 924560.386 ops/s
# Warmup Iteration  27: 923409.618 ops/s
# Warmup Iteration  28: 926222.941 ops/s
# Warmup Iteration  29: 925602.856 ops/s
# Warmup Iteration  30: 921118.936 ops/s
Iteration   1: 921992.934 ops/s
Iteration   2: 923987.514 ops/s
Iteration   3: 924984.220 ops/s
Iteration   4: 923680.641 ops/s
Iteration   5: 922361.145 ops/s
Iteration   6: 926376.975 ops/s
Iteration   7: 924057.046 ops/s
Iteration   8: 925922.485 ops/s
Iteration   9: 926881.016 ops/s
Iteration  10: 925155.927 ops/s
Iteration  11: 921136.351 ops/s
Iteration  12: 924670.599 ops/s
Iteration  13: 925197.269 ops/s
Iteration  14: 922857.568 ops/s
Iteration  15: 923703.651 ops/s
Iteration  16: 924912.812 ops/s
Iteration  17: 923646.745 ops/s
Iteration  18: 924083.883 ops/s
Iteration  19: 921452.714 ops/s
Iteration  20: 921032.463 ops/s
Iteration  21: 923400.788 ops/s
Iteration  22: 921152.111 ops/s
Iteration  23: 923564.886 ops/s
Iteration  24: 925942.057 ops/s
Iteration  25: 923118.472 ops/s
Iteration  26: 922753.401 ops/s
Iteration  27: 919664.944 ops/s
Iteration  28: 926434.289 ops/s
Iteration  29: 925468.536 ops/s
Iteration  30: 920486.380 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedSetBy":
  923669.327 ±(99.9%) 1272.557 ops/s [Average]
  (min, avg, max) = (919664.944, 923669.327, 926881.016), stdev = 1904.704
  CI (99.9%): [922396.770, 924941.885] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  923669.327 ± 1272.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1026874.191 ops/s
# Warmup Iteration   2: 1890185.179 ops/s
# Warmup Iteration   3: 2073296.270 ops/s
# Warmup Iteration   4: 2084094.276 ops/s
# Warmup Iteration   5: 1975290.986 ops/s
# Warmup Iteration   6: 1854208.795 ops/s
# Warmup Iteration   7: 2079335.997 ops/s
# Warmup Iteration   8: 2055608.595 ops/s
# Warmup Iteration   9: 2081555.696 ops/s
# Warmup Iteration  10: 2090101.994 ops/s
# Warmup Iteration  11: 2087508.573 ops/s
# Warmup Iteration  12: 2094933.239 ops/s
# Warmup Iteration  13: 2093099.529 ops/s
# Warmup Iteration  14: 2089734.178 ops/s
# Warmup Iteration  15: 2089716.143 ops/s
# Warmup Iteration  16: 2089320.206 ops/s
# Warmup Iteration  17: 2082177.330 ops/s
# Warmup Iteration  18: 2086558.973 ops/s
# Warmup Iteration  19: 2079280.958 ops/s
# Warmup Iteration  20: 2092126.867 ops/s
# Warmup Iteration  21: 2082106.904 ops/s
# Warmup Iteration  22: 2092270.203 ops/s
# Warmup Iteration  23: 2085968.279 ops/s
# Warmup Iteration  24: 2088344.186 ops/s
# Warmup Iteration  25: 2093617.974 ops/s
# Warmup Iteration  26: 2090578.579 ops/s
# Warmup Iteration  27: 2080522.161 ops/s
# Warmup Iteration  28: 2084188.511 ops/s
# Warmup Iteration  29: 2077603.399 ops/s
# Warmup Iteration  30: 2084600.367 ops/s
Iteration   1: 2095213.309 ops/s
Iteration   2: 2092787.281 ops/s
Iteration   3: 2094026.346 ops/s
Iteration   4: 2084332.579 ops/s
Iteration   5: 2095048.926 ops/s
Iteration   6: 2096192.696 ops/s
Iteration   7: 2093119.273 ops/s
Iteration   8: 2069809.705 ops/s
Iteration   9: 2093883.260 ops/s
Iteration  10: 2083934.176 ops/s
Iteration  11: 2095640.533 ops/s
Iteration  12: 2089222.522 ops/s
Iteration  13: 2076708.712 ops/s
Iteration  14: 2097558.713 ops/s
Iteration  15: 2093309.620 ops/s
Iteration  16: 2098411.241 ops/s
Iteration  17: 2093280.635 ops/s
Iteration  18: 2093894.718 ops/s
Iteration  19: 2098899.121 ops/s
Iteration  20: 2093609.950 ops/s
Iteration  21: 2098365.269 ops/s
Iteration  22: 2096779.173 ops/s
Iteration  23: 2090167.106 ops/s
Iteration  24: 2089680.058 ops/s
Iteration  25: 2093709.916 ops/s
Iteration  26: 2095366.363 ops/s
Iteration  27: 2089698.964 ops/s
Iteration  28: 2095603.021 ops/s
Iteration  29: 2087660.488 ops/s
Iteration  30: 2090486.720 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toSortedSetWithComparator":
  2091880.013 ±(99.9%) 4247.737 ops/s [Average]
  (min, avg, max) = (2069809.705, 2091880.013, 2098899.121), stdev = 6357.813
  CI (99.9%): [2087632.276, 2096127.750] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  2091880.013 ± 4247.737  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2257417.151 ops/s
# Warmup Iteration   2: 3886006.561 ops/s
# Warmup Iteration   3: 4341845.901 ops/s
# Warmup Iteration   4: 4323631.663 ops/s
# Warmup Iteration   5: 4361538.374 ops/s
# Warmup Iteration   6: 3597588.537 ops/s
# Warmup Iteration   7: 4358176.755 ops/s
# Warmup Iteration   8: 4368644.672 ops/s
# Warmup Iteration   9: 4362368.204 ops/s
# Warmup Iteration  10: 4352026.485 ops/s
# Warmup Iteration  11: 4356401.841 ops/s
# Warmup Iteration  12: 4359893.797 ops/s
# Warmup Iteration  13: 4368539.536 ops/s
# Warmup Iteration  14: 4362708.117 ops/s
# Warmup Iteration  15: 4364704.642 ops/s
# Warmup Iteration  16: 4367172.637 ops/s
# Warmup Iteration  17: 4367108.497 ops/s
# Warmup Iteration  18: 4365283.987 ops/s
# Warmup Iteration  19: 4351900.173 ops/s
# Warmup Iteration  20: 4351010.206 ops/s
# Warmup Iteration  21: 4369533.158 ops/s
# Warmup Iteration  22: 4367071.692 ops/s
# Warmup Iteration  23: 4362924.191 ops/s
# Warmup Iteration  24: 4354141.562 ops/s
# Warmup Iteration  25: 4360504.557 ops/s
# Warmup Iteration  26: 4347045.995 ops/s
# Warmup Iteration  27: 4368145.188 ops/s
# Warmup Iteration  28: 4358260.812 ops/s
# Warmup Iteration  29: 4363167.085 ops/s
# Warmup Iteration  30: 4364482.736 ops/s
Iteration   1: 4353649.899 ops/s
Iteration   2: 4352615.953 ops/s
Iteration   3: 4360214.562 ops/s
Iteration   4: 4375267.904 ops/s
Iteration   5: 4355413.230 ops/s
Iteration   6: 4348656.721 ops/s
Iteration   7: 4337433.229 ops/s
Iteration   8: 4351367.081 ops/s
Iteration   9: 4347564.219 ops/s
Iteration  10: 4350530.892 ops/s
Iteration  11: 4362305.825 ops/s
Iteration  12: 4355824.155 ops/s
Iteration  13: 4329475.350 ops/s
Iteration  14: 4357038.528 ops/s
Iteration  15: 4371985.069 ops/s
Iteration  16: 4375325.769 ops/s
Iteration  17: 4352335.101 ops/s
Iteration  18: 4360773.022 ops/s
Iteration  19: 4361268.151 ops/s
Iteration  20: 4353578.218 ops/s
Iteration  21: 4361370.647 ops/s
Iteration  22: 4352907.145 ops/s
Iteration  23: 4357195.270 ops/s
Iteration  24: 4348681.713 ops/s
Iteration  25: 4346760.112 ops/s
Iteration  26: 4362581.127 ops/s
Iteration  27: 4363577.761 ops/s
Iteration  28: 4361264.985 ops/s
Iteration  29: 4376111.703 ops/s
Iteration  30: 4365450.214 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_toStack":
  4356950.785 ±(99.9%) 6957.275 ops/s [Average]
  (min, avg, max) = (4329475.350, 4356950.785, 4376111.703), stdev = 10413.323
  CI (99.9%): [4349993.510, 4363908.061] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_toStack  thrpt   30  4356950.785 ± 6957.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 255212.288 ops/s
# Warmup Iteration   2: 461096.800 ops/s
# Warmup Iteration   3: 551562.131 ops/s
# Warmup Iteration   4: 553991.026 ops/s
# Warmup Iteration   5: 554089.790 ops/s
# Warmup Iteration   6: 552476.772 ops/s
# Warmup Iteration   7: 462918.903 ops/s
# Warmup Iteration   8: 554421.517 ops/s
# Warmup Iteration   9: 554039.850 ops/s
# Warmup Iteration  10: 554514.402 ops/s
# Warmup Iteration  11: 552603.216 ops/s
# Warmup Iteration  12: 554580.266 ops/s
# Warmup Iteration  13: 554447.057 ops/s
# Warmup Iteration  14: 554690.160 ops/s
# Warmup Iteration  15: 554531.139 ops/s
# Warmup Iteration  16: 553991.470 ops/s
# Warmup Iteration  17: 554307.892 ops/s
# Warmup Iteration  18: 554451.677 ops/s
# Warmup Iteration  19: 553616.774 ops/s
# Warmup Iteration  20: 553721.088 ops/s
# Warmup Iteration  21: 553302.377 ops/s
# Warmup Iteration  22: 554172.904 ops/s
# Warmup Iteration  23: 552715.584 ops/s
# Warmup Iteration  24: 553128.614 ops/s
# Warmup Iteration  25: 551446.302 ops/s
# Warmup Iteration  26: 552555.550 ops/s
# Warmup Iteration  27: 553625.540 ops/s
# Warmup Iteration  28: 548494.890 ops/s
# Warmup Iteration  29: 551645.574 ops/s
# Warmup Iteration  30: 550607.051 ops/s
Iteration   1: 552910.451 ops/s
Iteration   2: 552595.763 ops/s
Iteration   3: 552271.517 ops/s
Iteration   4: 552898.886 ops/s
Iteration   5: 554744.022 ops/s
Iteration   6: 555277.871 ops/s
Iteration   7: 554095.290 ops/s
Iteration   8: 554448.571 ops/s
Iteration   9: 554338.094 ops/s
Iteration  10: 552790.256 ops/s
Iteration  11: 554115.560 ops/s
Iteration  12: 553453.641 ops/s
Iteration  13: 555406.546 ops/s
Iteration  14: 555709.981 ops/s
Iteration  15: 554753.361 ops/s
Iteration  16: 554093.681 ops/s
Iteration  17: 555487.554 ops/s
Iteration  18: 554150.627 ops/s
Iteration  19: 554592.126 ops/s
Iteration  20: 554919.563 ops/s
Iteration  21: 553868.104 ops/s
Iteration  22: 554241.466 ops/s
Iteration  23: 554164.439 ops/s
Iteration  24: 554202.003 ops/s
Iteration  25: 555036.411 ops/s
Iteration  26: 555143.972 ops/s
Iteration  27: 554935.991 ops/s
Iteration  28: 554469.545 ops/s
Iteration  29: 553531.105 ops/s
Iteration  30: 554440.801 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_zip":
  554236.240 ±(99.9%) 593.946 ops/s [Average]
  (min, avg, max) = (552271.517, 554236.240, 555709.981), stdev = 888.991
  CI (99.9%): [553642.294, 554830.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_zip  thrpt   30  554236.240 ± 593.946  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 723799.555 ops/s
# Warmup Iteration   2: 1377348.293 ops/s
# Warmup Iteration   3: 1472266.964 ops/s
# Warmup Iteration   4: 1479745.790 ops/s
# Warmup Iteration   5: 1241958.416 ops/s
# Warmup Iteration   6: 1482984.175 ops/s
# Warmup Iteration   7: 1484463.154 ops/s
# Warmup Iteration   8: 1478589.517 ops/s
# Warmup Iteration   9: 1482797.703 ops/s
# Warmup Iteration  10: 1473962.232 ops/s
# Warmup Iteration  11: 1480577.032 ops/s
# Warmup Iteration  12: 1478827.439 ops/s
# Warmup Iteration  13: 1481295.601 ops/s
# Warmup Iteration  14: 1482205.286 ops/s
# Warmup Iteration  15: 1480480.997 ops/s
# Warmup Iteration  16: 1481052.640 ops/s
# Warmup Iteration  17: 1483270.600 ops/s
# Warmup Iteration  18: 1482377.116 ops/s
# Warmup Iteration  19: 1481981.866 ops/s
# Warmup Iteration  20: 1482964.444 ops/s
# Warmup Iteration  21: 1483532.759 ops/s
# Warmup Iteration  22: 1481503.083 ops/s
# Warmup Iteration  23: 1481573.413 ops/s
# Warmup Iteration  24: 1482206.906 ops/s
# Warmup Iteration  25: 1483565.474 ops/s
# Warmup Iteration  26: 1480866.766 ops/s
# Warmup Iteration  27: 1480442.965 ops/s
# Warmup Iteration  28: 1482980.106 ops/s
# Warmup Iteration  29: 1480568.613 ops/s
# Warmup Iteration  30: 1482068.905 ops/s
Iteration   1: 1481382.349 ops/s
Iteration   2: 1482828.966 ops/s
Iteration   3: 1485149.515 ops/s
Iteration   4: 1483121.308 ops/s
Iteration   5: 1484890.628 ops/s
Iteration   6: 1483326.098 ops/s
Iteration   7: 1480207.601 ops/s
Iteration   8: 1481969.213 ops/s
Iteration   9: 1487724.934 ops/s
Iteration  10: 1482356.628 ops/s
Iteration  11: 1483482.057 ops/s
Iteration  12: 1485285.032 ops/s
Iteration  13: 1484680.998 ops/s
Iteration  14: 1482550.849 ops/s
Iteration  15: 1483426.035 ops/s
Iteration  16: 1480349.812 ops/s
Iteration  17: 1481834.247 ops/s
Iteration  18: 1483176.110 ops/s
Iteration  19: 1481319.556 ops/s
Iteration  20: 1481655.266 ops/s
Iteration  21: 1483202.884 ops/s
Iteration  22: 1482074.630 ops/s
Iteration  23: 1482358.658 ops/s
Iteration  24: 1483765.187 ops/s
Iteration  25: 1477930.128 ops/s
Iteration  26: 1472152.402 ops/s
Iteration  27: 1483712.974 ops/s
Iteration  28: 1481606.335 ops/s
Iteration  29: 1485731.268 ops/s
Iteration  30: 1482749.087 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableOctupletonListTest._Benchmark.benchmark_zipWithIndex":
  1482533.359 ±(99.9%) 1810.584 ops/s [Average]
  (min, avg, max) = (1472152.402, 1482533.359, 1487724.934), stdev = 2709.997
  CI (99.9%): [1480722.775, 1484343.943] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableOctupletonListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  1482533.359 ± 1810.584  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 759775.321 ops/s
# Warmup Iteration   2: 793471.565 ops/s
# Warmup Iteration   3: 994591.825 ops/s
# Warmup Iteration   4: 980356.297 ops/s
# Warmup Iteration   5: 977745.287 ops/s
# Warmup Iteration   6: 985829.707 ops/s
# Warmup Iteration   7: 985298.104 ops/s
# Warmup Iteration   8: 985244.224 ops/s
# Warmup Iteration   9: 976940.073 ops/s
# Warmup Iteration  10: 978788.218 ops/s
# Warmup Iteration  11: 978071.697 ops/s
# Warmup Iteration  12: 842560.842 ops/s
# Warmup Iteration  13: 982420.443 ops/s
# Warmup Iteration  14: 976567.457 ops/s
# Warmup Iteration  15: 979275.461 ops/s
# Warmup Iteration  16: 982486.998 ops/s
# Warmup Iteration  17: 1047101.770 ops/s
# Warmup Iteration  18: 1045924.975 ops/s
# Warmup Iteration  19: 1046476.985 ops/s
# Warmup Iteration  20: 1046052.923 ops/s
# Warmup Iteration  21: 1048406.148 ops/s
# Warmup Iteration  22: 1048954.864 ops/s
# Warmup Iteration  23: 1046117.312 ops/s
# Warmup Iteration  24: 1050664.222 ops/s
# Warmup Iteration  25: 1046399.340 ops/s
# Warmup Iteration  26: 1041364.109 ops/s
# Warmup Iteration  27: 1045214.460 ops/s
# Warmup Iteration  28: 1047938.120 ops/s
# Warmup Iteration  29: 1049520.721 ops/s
# Warmup Iteration  30: 1048126.547 ops/s
Iteration   1: 1045692.107 ops/s
Iteration   2: 1045056.530 ops/s
Iteration   3: 1051141.132 ops/s
Iteration   4: 1048470.869 ops/s
Iteration   5: 1040844.959 ops/s
Iteration   6: 1042508.532 ops/s
Iteration   7: 1041102.123 ops/s
Iteration   8: 1053529.847 ops/s
Iteration   9: 1050140.660 ops/s
Iteration  10: 1047260.401 ops/s
Iteration  11: 1046195.103 ops/s
Iteration  12: 1045365.543 ops/s
Iteration  13: 1052557.443 ops/s
Iteration  14: 1042702.491 ops/s
Iteration  15: 1047760.311 ops/s
Iteration  16: 855454.468 ops/s
Iteration  17: 910040.020 ops/s
Iteration  18: 1039006.368 ops/s
Iteration  19: 1035070.190 ops/s
Iteration  20: 1046410.460 ops/s
Iteration  21: 1037933.285 ops/s
Iteration  22: 1050113.084 ops/s
Iteration  23: 1056377.445 ops/s
Iteration  24: 1048754.853 ops/s
Iteration  25: 1050836.119 ops/s
Iteration  26: 1049060.494 ops/s
Iteration  27: 1044881.130 ops/s
Iteration  28: 1044903.877 ops/s
Iteration  29: 1044265.769 ops/s
Iteration  30: 1033519.857 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_add":
  1034898.516 ±(99.9%) 28259.791 ops/s [Average]
  (min, avg, max) = (855454.468, 1034898.516, 1056377.445), stdev = 42297.928
  CI (99.9%): [1006638.724, 1063158.307] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_add  thrpt   30  1034898.516 ± 28259.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 742344.482 ops/s
# Warmup Iteration   2: 790649.149 ops/s
# Warmup Iteration   3: 981402.783 ops/s
# Warmup Iteration   4: 972991.170 ops/s
# Warmup Iteration   5: 970159.321 ops/s
# Warmup Iteration   6: 979468.003 ops/s
# Warmup Iteration   7: 978622.623 ops/s
# Warmup Iteration   8: 979063.264 ops/s
# Warmup Iteration   9: 975593.364 ops/s
# Warmup Iteration  10: 975787.205 ops/s
# Warmup Iteration  11: 975506.565 ops/s
# Warmup Iteration  12: 839470.189 ops/s
# Warmup Iteration  13: 970759.627 ops/s
# Warmup Iteration  14: 969047.619 ops/s
# Warmup Iteration  15: 972695.531 ops/s
# Warmup Iteration  16: 975187.163 ops/s
# Warmup Iteration  17: 1034208.450 ops/s
# Warmup Iteration  18: 1026222.723 ops/s
# Warmup Iteration  19: 1030740.802 ops/s
# Warmup Iteration  20: 1026841.920 ops/s
# Warmup Iteration  21: 1035899.567 ops/s
# Warmup Iteration  22: 1031663.169 ops/s
# Warmup Iteration  23: 1034992.696 ops/s
# Warmup Iteration  24: 1032885.880 ops/s
# Warmup Iteration  25: 1032374.844 ops/s
# Warmup Iteration  26: 1029317.085 ops/s
# Warmup Iteration  27: 1031661.466 ops/s
# Warmup Iteration  28: 1031679.972 ops/s
# Warmup Iteration  29: 1032025.479 ops/s
# Warmup Iteration  30: 1032989.935 ops/s
Iteration   1: 1033094.162 ops/s
Iteration   2: 1030956.258 ops/s
Iteration   3: 1031119.796 ops/s
Iteration   4: 1036282.855 ops/s
Iteration   5: 1036129.094 ops/s
Iteration   6: 1036870.288 ops/s
Iteration   7: 1036262.729 ops/s
Iteration   8: 1033527.949 ops/s
Iteration   9: 1030358.473 ops/s
Iteration  10: 1027127.540 ops/s
Iteration  11: 1027525.662 ops/s
Iteration  12: 1028105.419 ops/s
Iteration  13: 1031016.260 ops/s
Iteration  14: 1026628.386 ops/s
Iteration  15: 1038884.977 ops/s
Iteration  16: 1040373.918 ops/s
Iteration  17: 1039312.706 ops/s
Iteration  18: 1038951.637 ops/s
Iteration  19: 1033300.247 ops/s
Iteration  20: 1039317.495 ops/s
Iteration  21: 1038387.849 ops/s
Iteration  22: 1036165.494 ops/s
Iteration  23: 1036995.157 ops/s
Iteration  24: 1036360.110 ops/s
Iteration  25: 1035887.732 ops/s
Iteration  26: 1039316.362 ops/s
Iteration  27: 1032708.379 ops/s
Iteration  28: 1034483.969 ops/s
Iteration  29: 1030486.992 ops/s
Iteration  30: 1033935.766 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_addAll":
  1034329.122 ±(99.9%) 2687.992 ops/s [Average]
  (min, avg, max) = (1026628.386, 1034329.122, 1040373.918), stdev = 4023.261
  CI (99.9%): [1031641.130, 1037017.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_addAll  thrpt   30  1034329.122 ± 2687.992  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749867.639 ops/s
# Warmup Iteration   2: 802930.023 ops/s
# Warmup Iteration   3: 995901.637 ops/s
# Warmup Iteration   4: 993464.072 ops/s
# Warmup Iteration   5: 915714.507 ops/s
# Warmup Iteration   6: 993777.147 ops/s
# Warmup Iteration   7: 992547.059 ops/s
# Warmup Iteration   8: 994739.735 ops/s
# Warmup Iteration   9: 993082.284 ops/s
# Warmup Iteration  10: 991679.608 ops/s
# Warmup Iteration  11: 990550.068 ops/s
# Warmup Iteration  12: 854342.877 ops/s
# Warmup Iteration  13: 993823.166 ops/s
# Warmup Iteration  14: 994288.591 ops/s
# Warmup Iteration  15: 994619.754 ops/s
# Warmup Iteration  16: 993655.580 ops/s
# Warmup Iteration  17: 1053424.630 ops/s
# Warmup Iteration  18: 1053391.530 ops/s
# Warmup Iteration  19: 1049011.983 ops/s
# Warmup Iteration  20: 1052750.453 ops/s
# Warmup Iteration  21: 1054648.490 ops/s
# Warmup Iteration  22: 1050858.385 ops/s
# Warmup Iteration  23: 1053079.805 ops/s
# Warmup Iteration  24: 1053522.022 ops/s
# Warmup Iteration  25: 1051434.119 ops/s
# Warmup Iteration  26: 1053443.963 ops/s
# Warmup Iteration  27: 1053297.482 ops/s
# Warmup Iteration  28: 1051790.958 ops/s
# Warmup Iteration  29: 1051832.309 ops/s
# Warmup Iteration  30: 1052149.241 ops/s
Iteration   1: 1052986.758 ops/s
Iteration   2: 1053392.781 ops/s
Iteration   3: 1052620.097 ops/s
Iteration   4: 1054945.448 ops/s
Iteration   5: 1053827.362 ops/s
Iteration   6: 1050795.211 ops/s
Iteration   7: 1051450.279 ops/s
Iteration   8: 1049888.235 ops/s
Iteration   9: 1052224.549 ops/s
Iteration  10: 1047286.466 ops/s
Iteration  11: 1052192.672 ops/s
Iteration  12: 1053844.088 ops/s
Iteration  13: 1051603.600 ops/s
Iteration  14: 1050942.537 ops/s
Iteration  15: 1054359.943 ops/s
Iteration  16: 1050498.264 ops/s
Iteration  17: 1051662.006 ops/s
Iteration  18: 1053020.666 ops/s
Iteration  19: 1054397.227 ops/s
Iteration  20: 1054573.688 ops/s
Iteration  21: 1051833.457 ops/s
Iteration  22: 1052965.176 ops/s
Iteration  23: 1052849.299 ops/s
Iteration  24: 1053836.445 ops/s
Iteration  25: 1052780.838 ops/s
Iteration  26: 1052757.772 ops/s
Iteration  27: 1053602.806 ops/s
Iteration  28: 1055128.024 ops/s
Iteration  29: 1050994.649 ops/s
Iteration  30: 1050894.416 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_addAllAtIndex":
  1052471.825 ±(99.9%) 1137.101 ops/s [Average]
  (min, avg, max) = (1047286.466, 1052471.825, 1055128.024), stdev = 1701.960
  CI (99.9%): [1051334.724, 1053608.927] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1052471.825 ± 1137.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 758694.132 ops/s
# Warmup Iteration   2: 800072.029 ops/s
# Warmup Iteration   3: 1005310.391 ops/s
# Warmup Iteration   4: 1007654.169 ops/s
# Warmup Iteration   5: 997851.099 ops/s
# Warmup Iteration   6: 1001780.189 ops/s
# Warmup Iteration   7: 999203.981 ops/s
# Warmup Iteration   8: 996104.128 ops/s
# Warmup Iteration   9: 1010387.793 ops/s
# Warmup Iteration  10: 1003128.034 ops/s
# Warmup Iteration  11: 988061.555 ops/s
# Warmup Iteration  12: 871188.252 ops/s
# Warmup Iteration  13: 1002798.398 ops/s
# Warmup Iteration  14: 1001058.597 ops/s
# Warmup Iteration  15: 1003084.163 ops/s
# Warmup Iteration  16: 1000352.831 ops/s
# Warmup Iteration  17: 1062074.327 ops/s
# Warmup Iteration  18: 1060939.431 ops/s
# Warmup Iteration  19: 1063197.244 ops/s
# Warmup Iteration  20: 1063658.395 ops/s
# Warmup Iteration  21: 1065465.463 ops/s
# Warmup Iteration  22: 1069315.169 ops/s
# Warmup Iteration  23: 1070175.983 ops/s
# Warmup Iteration  24: 1067635.953 ops/s
# Warmup Iteration  25: 1069852.023 ops/s
# Warmup Iteration  26: 1068766.511 ops/s
# Warmup Iteration  27: 1067919.416 ops/s
# Warmup Iteration  28: 1065941.385 ops/s
# Warmup Iteration  29: 1063806.093 ops/s
# Warmup Iteration  30: 1066689.939 ops/s
Iteration   1: 1063919.661 ops/s
Iteration   2: 1064804.613 ops/s
Iteration   3: 1068187.406 ops/s
Iteration   4: 1068867.324 ops/s
Iteration   5: 1060835.194 ops/s
Iteration   6: 1066591.451 ops/s
Iteration   7: 1068660.933 ops/s
Iteration   8: 1066838.046 ops/s
Iteration   9: 1067501.521 ops/s
Iteration  10: 1064054.867 ops/s
Iteration  11: 1062896.157 ops/s
Iteration  12: 1064092.445 ops/s
Iteration  13: 1065868.555 ops/s
Iteration  14: 1064483.494 ops/s
Iteration  15: 1062096.173 ops/s
Iteration  16: 1068160.110 ops/s
Iteration  17: 1064183.213 ops/s
Iteration  18: 1062081.968 ops/s
Iteration  19: 1061543.789 ops/s
Iteration  20: 1065908.506 ops/s
Iteration  21: 1061634.298 ops/s
Iteration  22: 1064616.595 ops/s
Iteration  23: 1063578.910 ops/s
Iteration  24: 1064721.869 ops/s
Iteration  25: 1059583.336 ops/s
Iteration  26: 1068427.914 ops/s
Iteration  27: 1069197.360 ops/s
Iteration  28: 1066672.536 ops/s
Iteration  29: 1066204.900 ops/s
Iteration  30: 1068643.390 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_addAtIndex":
  1065161.885 ±(99.9%) 1779.771 ops/s [Average]
  (min, avg, max) = (1059583.336, 1065161.885, 1069197.360), stdev = 2663.878
  CI (99.9%): [1063382.113, 1066941.656] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_addAtIndex  thrpt   30  1065161.885 ± 1779.771  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 674372.690 ops/s
# Warmup Iteration   2: 1679625.457 ops/s
# Warmup Iteration   3: 1695520.082 ops/s
# Warmup Iteration   4: 1399772.602 ops/s
# Warmup Iteration   5: 1702134.385 ops/s
# Warmup Iteration   6: 1701212.537 ops/s
# Warmup Iteration   7: 1707838.194 ops/s
# Warmup Iteration   8: 1704419.070 ops/s
# Warmup Iteration   9: 1705692.140 ops/s
# Warmup Iteration  10: 1704177.913 ops/s
# Warmup Iteration  11: 1705124.551 ops/s
# Warmup Iteration  12: 1705191.200 ops/s
# Warmup Iteration  13: 1703265.856 ops/s
# Warmup Iteration  14: 1704655.096 ops/s
# Warmup Iteration  15: 1701527.889 ops/s
# Warmup Iteration  16: 1705186.896 ops/s
# Warmup Iteration  17: 1705886.113 ops/s
# Warmup Iteration  18: 1704504.584 ops/s
# Warmup Iteration  19: 1702126.258 ops/s
# Warmup Iteration  20: 1706686.780 ops/s
# Warmup Iteration  21: 1702234.054 ops/s
# Warmup Iteration  22: 1699088.152 ops/s
# Warmup Iteration  23: 1704479.171 ops/s
# Warmup Iteration  24: 1698992.169 ops/s
# Warmup Iteration  25: 1696745.237 ops/s
# Warmup Iteration  26: 1697828.226 ops/s
# Warmup Iteration  27: 1700772.737 ops/s
# Warmup Iteration  28: 1695519.709 ops/s
# Warmup Iteration  29: 1702651.843 ops/s
# Warmup Iteration  30: 1702943.085 ops/s
Iteration   1: 1706637.301 ops/s
Iteration   2: 1711282.867 ops/s
Iteration   3: 1708574.240 ops/s
Iteration   4: 1703816.693 ops/s
Iteration   5: 1700571.558 ops/s
Iteration   6: 1696594.391 ops/s
Iteration   7: 1709380.981 ops/s
Iteration   8: 1706039.554 ops/s
Iteration   9: 1705034.287 ops/s
Iteration  10: 1698413.147 ops/s
Iteration  11: 1699056.343 ops/s
Iteration  12: 1707837.266 ops/s
Iteration  13: 1701692.264 ops/s
Iteration  14: 1703276.915 ops/s
Iteration  15: 1702858.622 ops/s
Iteration  16: 1708668.048 ops/s
Iteration  17: 1698885.677 ops/s
Iteration  18: 1697353.006 ops/s
Iteration  19: 1695989.323 ops/s
Iteration  20: 1707400.728 ops/s
Iteration  21: 1702150.178 ops/s
Iteration  22: 1700904.822 ops/s
Iteration  23: 1701658.452 ops/s
Iteration  24: 1709427.189 ops/s
Iteration  25: 1700395.913 ops/s
Iteration  26: 1706683.214 ops/s
Iteration  27: 1707965.367 ops/s
Iteration  28: 1704053.333 ops/s
Iteration  29: 1696799.549 ops/s
Iteration  30: 1703243.822 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_aggregateByMutating":
  1703421.502 ±(99.9%) 2918.472 ops/s [Average]
  (min, avg, max) = (1695989.323, 1703421.502, 1711282.867), stdev = 4368.232
  CI (99.9%): [1700503.029, 1706339.974] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  1703421.502 ± 2918.472  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 732497.243 ops/s
# Warmup Iteration   2: 1708960.280 ops/s
# Warmup Iteration   3: 1775602.569 ops/s
# Warmup Iteration   4: 1521733.409 ops/s
# Warmup Iteration   5: 1737342.632 ops/s
# Warmup Iteration   6: 1781803.029 ops/s
# Warmup Iteration   7: 1770995.947 ops/s
# Warmup Iteration   8: 1779035.519 ops/s
# Warmup Iteration   9: 1779735.884 ops/s
# Warmup Iteration  10: 1781412.112 ops/s
# Warmup Iteration  11: 1779690.483 ops/s
# Warmup Iteration  12: 1777367.875 ops/s
# Warmup Iteration  13: 1774997.593 ops/s
# Warmup Iteration  14: 1782964.756 ops/s
# Warmup Iteration  15: 1779763.136 ops/s
# Warmup Iteration  16: 1776280.468 ops/s
# Warmup Iteration  17: 1777942.295 ops/s
# Warmup Iteration  18: 1777281.320 ops/s
# Warmup Iteration  19: 1771494.094 ops/s
# Warmup Iteration  20: 1774608.484 ops/s
# Warmup Iteration  21: 1775784.330 ops/s
# Warmup Iteration  22: 1770954.432 ops/s
# Warmup Iteration  23: 1771395.475 ops/s
# Warmup Iteration  24: 1780957.900 ops/s
# Warmup Iteration  25: 1775526.794 ops/s
# Warmup Iteration  26: 1767834.681 ops/s
# Warmup Iteration  27: 1778566.795 ops/s
# Warmup Iteration  28: 1778794.834 ops/s
# Warmup Iteration  29: 1772610.635 ops/s
# Warmup Iteration  30: 1768986.412 ops/s
Iteration   1: 1779269.078 ops/s
Iteration   2: 1777832.439 ops/s
Iteration   3: 1781707.061 ops/s
Iteration   4: 1780623.614 ops/s
Iteration   5: 1773637.814 ops/s
Iteration   6: 1783338.950 ops/s
Iteration   7: 1787647.523 ops/s
Iteration   8: 1780744.707 ops/s
Iteration   9: 1782972.832 ops/s
Iteration  10: 1774469.563 ops/s
Iteration  11: 1773901.084 ops/s
Iteration  12: 1776640.676 ops/s
Iteration  13: 1773718.096 ops/s
Iteration  14: 1777693.524 ops/s
Iteration  15: 1784233.756 ops/s
Iteration  16: 1772043.744 ops/s
Iteration  17: 1770515.366 ops/s
Iteration  18: 1784575.516 ops/s
Iteration  19: 1778671.994 ops/s
Iteration  20: 1759281.568 ops/s
Iteration  21: 1786246.306 ops/s
Iteration  22: 1770626.060 ops/s
Iteration  23: 1777022.272 ops/s
Iteration  24: 1770286.660 ops/s
Iteration  25: 1776420.942 ops/s
Iteration  26: 1775118.690 ops/s
Iteration  27: 1783890.582 ops/s
Iteration  28: 1774265.534 ops/s
Iteration  29: 1761171.027 ops/s
Iteration  30: 1743186.684 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_aggregateByNonMutating":
  1775725.122 ±(99.9%) 6015.958 ops/s [Average]
  (min, avg, max) = (1743186.684, 1775725.122, 1787647.523), stdev = 9004.403
  CI (99.9%): [1769709.164, 1781741.080] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  1775725.122 ± 6015.958  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19656769.463 ops/s
# Warmup Iteration   2: 37936549.512 ops/s
# Warmup Iteration   3: 31360066.672 ops/s
# Warmup Iteration   4: 36908580.935 ops/s
# Warmup Iteration   5: 36977941.309 ops/s
# Warmup Iteration   6: 36935527.213 ops/s
# Warmup Iteration   7: 36969534.088 ops/s
# Warmup Iteration   8: 36985136.253 ops/s
# Warmup Iteration   9: 36897138.370 ops/s
# Warmup Iteration  10: 36853275.035 ops/s
# Warmup Iteration  11: 36958721.169 ops/s
# Warmup Iteration  12: 36921810.127 ops/s
# Warmup Iteration  13: 36863237.728 ops/s
# Warmup Iteration  14: 36926928.568 ops/s
# Warmup Iteration  15: 36944646.832 ops/s
# Warmup Iteration  16: 36876690.657 ops/s
# Warmup Iteration  17: 36945807.051 ops/s
# Warmup Iteration  18: 37078622.828 ops/s
# Warmup Iteration  19: 36965704.289 ops/s
# Warmup Iteration  20: 36927300.682 ops/s
# Warmup Iteration  21: 36945525.827 ops/s
# Warmup Iteration  22: 36769830.596 ops/s
# Warmup Iteration  23: 36742347.831 ops/s
# Warmup Iteration  24: 36937056.331 ops/s
# Warmup Iteration  25: 36995383.211 ops/s
# Warmup Iteration  26: 36982587.462 ops/s
# Warmup Iteration  27: 37025718.425 ops/s
# Warmup Iteration  28: 36877376.085 ops/s
# Warmup Iteration  29: 36883798.966 ops/s
# Warmup Iteration  30: 36984988.217 ops/s
Iteration   1: 37043446.322 ops/s
Iteration   2: 36825051.792 ops/s
Iteration   3: 36937131.695 ops/s
Iteration   4: 36723702.807 ops/s
Iteration   5: 36906293.965 ops/s
Iteration   6: 36992346.711 ops/s
Iteration   7: 37031602.961 ops/s
Iteration   8: 37138008.071 ops/s
Iteration   9: 36880023.518 ops/s
Iteration  10: 36913387.078 ops/s
Iteration  11: 36887126.498 ops/s
Iteration  12: 36976454.261 ops/s
Iteration  13: 37012220.615 ops/s
Iteration  14: 36949986.978 ops/s
Iteration  15: 36982810.762 ops/s
Iteration  16: 37021189.475 ops/s
Iteration  17: 36857197.389 ops/s
Iteration  18: 37107415.781 ops/s
Iteration  19: 36978763.490 ops/s
Iteration  20: 36864763.999 ops/s
Iteration  21: 37031338.726 ops/s
Iteration  22: 36915126.124 ops/s
Iteration  23: 37067421.001 ops/s
Iteration  24: 37006360.895 ops/s
Iteration  25: 36965844.276 ops/s
Iteration  26: 34907493.129 ops/s
Iteration  27: 34723856.902 ops/s
Iteration  28: 36986147.768 ops/s
Iteration  29: 36878855.231 ops/s
Iteration  30: 36982227.744 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_allSatisfy":
  36816453.199 ±(99.9%) 368221.148 ops/s [Average]
  (min, avg, max) = (34723856.902, 36816453.199, 37138008.071), stdev = 551136.121
  CI (99.9%): [36448232.051, 37184674.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_allSatisfy  thrpt   30  36816453.199 ± 368221.148  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11409684.605 ops/s
# Warmup Iteration   2: 22794702.608 ops/s
# Warmup Iteration   3: 19723278.928 ops/s
# Warmup Iteration   4: 23121200.817 ops/s
# Warmup Iteration   5: 23230059.402 ops/s
# Warmup Iteration   6: 23235892.326 ops/s
# Warmup Iteration   7: 23187984.102 ops/s
# Warmup Iteration   8: 23173318.680 ops/s
# Warmup Iteration   9: 23057150.677 ops/s
# Warmup Iteration  10: 23071532.454 ops/s
# Warmup Iteration  11: 23059680.396 ops/s
# Warmup Iteration  12: 23163568.759 ops/s
# Warmup Iteration  13: 23054033.231 ops/s
# Warmup Iteration  14: 23069597.136 ops/s
# Warmup Iteration  15: 23152619.335 ops/s
# Warmup Iteration  16: 23167087.693 ops/s
# Warmup Iteration  17: 23091607.098 ops/s
# Warmup Iteration  18: 23123141.930 ops/s
# Warmup Iteration  19: 23030705.386 ops/s
# Warmup Iteration  20: 23133791.621 ops/s
# Warmup Iteration  21: 23188828.623 ops/s
# Warmup Iteration  22: 22980392.935 ops/s
# Warmup Iteration  23: 23136700.974 ops/s
# Warmup Iteration  24: 23140459.005 ops/s
# Warmup Iteration  25: 23060255.465 ops/s
# Warmup Iteration  26: 23138846.062 ops/s
# Warmup Iteration  27: 23049683.812 ops/s
# Warmup Iteration  28: 23090648.215 ops/s
# Warmup Iteration  29: 23099672.092 ops/s
# Warmup Iteration  30: 23083612.499 ops/s
Iteration   1: 23106298.425 ops/s
Iteration   2: 23061705.386 ops/s
Iteration   3: 23157455.338 ops/s
Iteration   4: 23248933.771 ops/s
Iteration   5: 23163725.335 ops/s
Iteration   6: 23139525.941 ops/s
Iteration   7: 23095772.775 ops/s
Iteration   8: 23188642.038 ops/s
Iteration   9: 23105148.092 ops/s
Iteration  10: 23098047.308 ops/s
Iteration  11: 23154737.000 ops/s
Iteration  12: 23042790.470 ops/s
Iteration  13: 23143138.473 ops/s
Iteration  14: 23107844.667 ops/s
Iteration  15: 23069248.207 ops/s
Iteration  16: 23211964.717 ops/s
Iteration  17: 23168243.981 ops/s
Iteration  18: 23199276.794 ops/s
Iteration  19: 23105659.614 ops/s
Iteration  20: 23139809.616 ops/s
Iteration  21: 23164300.312 ops/s
Iteration  22: 23184857.959 ops/s
Iteration  23: 23188003.142 ops/s
Iteration  24: 23165040.462 ops/s
Iteration  25: 23176478.715 ops/s
Iteration  26: 23146147.202 ops/s
Iteration  27: 23091730.371 ops/s
Iteration  28: 23025080.252 ops/s
Iteration  29: 23120709.320 ops/s
Iteration  30: 23142237.587 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_allSatisfyWith":
  23137085.109 ±(99.9%) 34257.451 ops/s [Average]
  (min, avg, max) = (23025080.252, 23137085.109, 23248933.771), stdev = 51274.943
  CI (99.9%): [23102827.658, 23171342.560] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  23137085.109 ± 34257.451  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11766310.140 ops/s
# Warmup Iteration   2: 22948227.800 ops/s
# Warmup Iteration   3: 22907801.424 ops/s
# Warmup Iteration   4: 19426050.419 ops/s
# Warmup Iteration   5: 22890679.395 ops/s
# Warmup Iteration   6: 22906577.083 ops/s
# Warmup Iteration   7: 22870958.933 ops/s
# Warmup Iteration   8: 22877288.133 ops/s
# Warmup Iteration   9: 22830773.649 ops/s
# Warmup Iteration  10: 22829571.709 ops/s
# Warmup Iteration  11: 22909828.433 ops/s
# Warmup Iteration  12: 22902540.743 ops/s
# Warmup Iteration  13: 22949815.629 ops/s
# Warmup Iteration  14: 22926804.796 ops/s
# Warmup Iteration  15: 22771821.382 ops/s
# Warmup Iteration  16: 22924596.863 ops/s
# Warmup Iteration  17: 22824581.183 ops/s
# Warmup Iteration  18: 22871286.394 ops/s
# Warmup Iteration  19: 22916081.894 ops/s
# Warmup Iteration  20: 22905158.661 ops/s
# Warmup Iteration  21: 22887617.976 ops/s
# Warmup Iteration  22: 22897078.160 ops/s
# Warmup Iteration  23: 22858278.382 ops/s
# Warmup Iteration  24: 22916612.277 ops/s
# Warmup Iteration  25: 22821688.983 ops/s
# Warmup Iteration  26: 22879159.773 ops/s
# Warmup Iteration  27: 22843591.603 ops/s
# Warmup Iteration  28: 22879292.413 ops/s
# Warmup Iteration  29: 22743633.030 ops/s
# Warmup Iteration  30: 22917983.641 ops/s
Iteration   1: 22907051.482 ops/s
Iteration   2: 22873702.140 ops/s
Iteration   3: 22913100.925 ops/s
Iteration   4: 22899882.700 ops/s
Iteration   5: 22933789.474 ops/s
Iteration   6: 22834569.728 ops/s
Iteration   7: 22783814.050 ops/s
Iteration   8: 22966772.285 ops/s
Iteration   9: 22725007.002 ops/s
Iteration  10: 22901642.105 ops/s
Iteration  11: 22869775.079 ops/s
Iteration  12: 22870909.606 ops/s
Iteration  13: 22891664.137 ops/s
Iteration  14: 22857796.955 ops/s
Iteration  15: 22965241.153 ops/s
Iteration  16: 22944732.118 ops/s
Iteration  17: 22916452.323 ops/s
Iteration  18: 22714797.992 ops/s
Iteration  19: 22966817.982 ops/s
Iteration  20: 22885242.063 ops/s
Iteration  21: 22879712.339 ops/s
Iteration  22: 22878249.111 ops/s
Iteration  23: 22936572.586 ops/s
Iteration  24: 22834208.861 ops/s
Iteration  25: 22912187.482 ops/s
Iteration  26: 22936938.560 ops/s
Iteration  27: 22938813.181 ops/s
Iteration  28: 22943248.149 ops/s
Iteration  29: 22876875.738 ops/s
Iteration  30: 22921291.659 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_anySatisfy":
  22889361.966 ±(99.9%) 41718.659 ops/s [Average]
  (min, avg, max) = (22714797.992, 22889361.966, 22966817.982), stdev = 62442.530
  CI (99.9%): [22847643.306, 22931080.625] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_anySatisfy  thrpt   30  22889361.966 ± 41718.659  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10186968.832 ops/s
# Warmup Iteration   2: 17831745.759 ops/s
# Warmup Iteration   3: 18926702.296 ops/s
# Warmup Iteration   4: 19044799.514 ops/s
# Warmup Iteration   5: 15972962.638 ops/s
# Warmup Iteration   6: 18908437.568 ops/s
# Warmup Iteration   7: 19020946.391 ops/s
# Warmup Iteration   8: 19046649.131 ops/s
# Warmup Iteration   9: 19061830.651 ops/s
# Warmup Iteration  10: 19047701.732 ops/s
# Warmup Iteration  11: 19034956.061 ops/s
# Warmup Iteration  12: 19041818.572 ops/s
# Warmup Iteration  13: 19013278.213 ops/s
# Warmup Iteration  14: 18983215.946 ops/s
# Warmup Iteration  15: 18990241.048 ops/s
# Warmup Iteration  16: 19019878.163 ops/s
# Warmup Iteration  17: 19120645.737 ops/s
# Warmup Iteration  18: 19005851.144 ops/s
# Warmup Iteration  19: 19051095.649 ops/s
# Warmup Iteration  20: 18955780.183 ops/s
# Warmup Iteration  21: 19048856.551 ops/s
# Warmup Iteration  22: 19049237.649 ops/s
# Warmup Iteration  23: 19031299.507 ops/s
# Warmup Iteration  24: 19051131.436 ops/s
# Warmup Iteration  25: 18911564.661 ops/s
# Warmup Iteration  26: 19091261.135 ops/s
# Warmup Iteration  27: 19064652.785 ops/s
# Warmup Iteration  28: 19077930.603 ops/s
# Warmup Iteration  29: 19084809.352 ops/s
# Warmup Iteration  30: 19022882.221 ops/s
Iteration   1: 19115087.142 ops/s
Iteration   2: 19077399.131 ops/s
Iteration   3: 19036052.326 ops/s
Iteration   4: 19085489.262 ops/s
Iteration   5: 18914671.697 ops/s
Iteration   6: 19027960.019 ops/s
Iteration   7: 19068351.602 ops/s
Iteration   8: 19048418.631 ops/s
Iteration   9: 18992534.855 ops/s
Iteration  10: 18993846.089 ops/s
Iteration  11: 19012688.867 ops/s
Iteration  12: 19019244.531 ops/s
Iteration  13: 18996467.814 ops/s
Iteration  14: 19018419.280 ops/s
Iteration  15: 18947529.927 ops/s
Iteration  16: 19055575.121 ops/s
Iteration  17: 19030256.934 ops/s
Iteration  18: 19091764.468 ops/s
Iteration  19: 19065881.156 ops/s
Iteration  20: 18919503.973 ops/s
Iteration  21: 19087469.783 ops/s
Iteration  22: 19060703.336 ops/s
Iteration  23: 19023809.269 ops/s
Iteration  24: 18863551.647 ops/s
Iteration  25: 19042585.131 ops/s
Iteration  26: 19080614.900 ops/s
Iteration  27: 19040702.901 ops/s
Iteration  28: 19072125.895 ops/s
Iteration  29: 19019540.018 ops/s
Iteration  30: 19061184.929 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_anySatisfyWith":
  19028981.021 ±(99.9%) 38142.374 ops/s [Average]
  (min, avg, max) = (18863551.647, 19028981.021, 19115087.142), stdev = 57089.715
  CI (99.9%): [18990838.647, 19067123.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  19028981.021 ± 38142.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 558096.368 ops/s
# Warmup Iteration   2: 1299985.624 ops/s
# Warmup Iteration   3: 1315366.289 ops/s
# Warmup Iteration   4: 1097380.211 ops/s
# Warmup Iteration   5: 1300509.553 ops/s
# Warmup Iteration   6: 1305519.771 ops/s
# Warmup Iteration   7: 1312288.549 ops/s
# Warmup Iteration   8: 1309792.194 ops/s
# Warmup Iteration   9: 1306069.099 ops/s
# Warmup Iteration  10: 1302973.601 ops/s
# Warmup Iteration  11: 1299401.621 ops/s
# Warmup Iteration  12: 1297123.069 ops/s
# Warmup Iteration  13: 1308911.023 ops/s
# Warmup Iteration  14: 1304122.188 ops/s
# Warmup Iteration  15: 1311335.711 ops/s
# Warmup Iteration  16: 1308623.798 ops/s
# Warmup Iteration  17: 1311701.739 ops/s
# Warmup Iteration  18: 1299560.689 ops/s
# Warmup Iteration  19: 1304783.952 ops/s
# Warmup Iteration  20: 1307845.449 ops/s
# Warmup Iteration  21: 1304128.747 ops/s
# Warmup Iteration  22: 1296246.647 ops/s
# Warmup Iteration  23: 1309342.018 ops/s
# Warmup Iteration  24: 1302599.643 ops/s
# Warmup Iteration  25: 1306717.938 ops/s
# Warmup Iteration  26: 1308584.647 ops/s
# Warmup Iteration  27: 1306511.536 ops/s
# Warmup Iteration  28: 1305468.219 ops/s
# Warmup Iteration  29: 1308456.684 ops/s
# Warmup Iteration  30: 1306391.100 ops/s
Iteration   1: 1306159.921 ops/s
Iteration   2: 1309052.979 ops/s
Iteration   3: 1308094.215 ops/s
Iteration   4: 1306350.733 ops/s
Iteration   5: 1299423.821 ops/s
Iteration   6: 1301361.106 ops/s
Iteration   7: 1299993.329 ops/s
Iteration   8: 1303744.044 ops/s
Iteration   9: 1310647.861 ops/s
Iteration  10: 1308408.832 ops/s
Iteration  11: 1308258.776 ops/s
Iteration  12: 1307592.983 ops/s
Iteration  13: 1308718.108 ops/s
Iteration  14: 1309969.842 ops/s
Iteration  15: 1304821.652 ops/s
Iteration  16: 1308012.197 ops/s
Iteration  17: 1304597.884 ops/s
Iteration  18: 1311520.461 ops/s
Iteration  19: 1309966.692 ops/s
Iteration  20: 1297639.623 ops/s
Iteration  21: 1306140.327 ops/s
Iteration  22: 1302961.048 ops/s
Iteration  23: 1304159.709 ops/s
Iteration  24: 1302909.279 ops/s
Iteration  25: 1310233.199 ops/s
Iteration  26: 1309473.527 ops/s
Iteration  27: 1310574.772 ops/s
Iteration  28: 1309648.347 ops/s
Iteration  29: 1310878.228 ops/s
Iteration  30: 1310696.585 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_appendString":
  1306733.669 ±(99.9%) 2535.362 ops/s [Average]
  (min, avg, max) = (1297639.623, 1306733.669, 1311520.461), stdev = 3794.811
  CI (99.9%): [1304198.307, 1309269.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_appendString  thrpt   30  1306733.669 ± 2535.362  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3667579.565 ops/s
# Warmup Iteration   2: 8285266.862 ops/s
# Warmup Iteration   3: 6941078.320 ops/s
# Warmup Iteration   4: 8356281.492 ops/s
# Warmup Iteration   5: 8398980.318 ops/s
# Warmup Iteration   6: 8394976.107 ops/s
# Warmup Iteration   7: 8370443.364 ops/s
# Warmup Iteration   8: 8348880.677 ops/s
# Warmup Iteration   9: 8356780.637 ops/s
# Warmup Iteration  10: 8370137.923 ops/s
# Warmup Iteration  11: 8373910.104 ops/s
# Warmup Iteration  12: 8414042.236 ops/s
# Warmup Iteration  13: 8308600.872 ops/s
# Warmup Iteration  14: 8351149.331 ops/s
# Warmup Iteration  15: 8395969.876 ops/s
# Warmup Iteration  16: 8395921.668 ops/s
# Warmup Iteration  17: 8354196.851 ops/s
# Warmup Iteration  18: 8348677.247 ops/s
# Warmup Iteration  19: 8345960.161 ops/s
# Warmup Iteration  20: 8306728.295 ops/s
# Warmup Iteration  21: 8320140.430 ops/s
# Warmup Iteration  22: 8348937.547 ops/s
# Warmup Iteration  23: 8332194.714 ops/s
# Warmup Iteration  24: 8334838.116 ops/s
# Warmup Iteration  25: 8344046.274 ops/s
# Warmup Iteration  26: 8310664.634 ops/s
# Warmup Iteration  27: 8297121.891 ops/s
# Warmup Iteration  28: 8298469.406 ops/s
# Warmup Iteration  29: 8360075.773 ops/s
# Warmup Iteration  30: 8356823.867 ops/s
Iteration   1: 8352771.568 ops/s
Iteration   2: 8388162.154 ops/s
Iteration   3: 8349199.150 ops/s
Iteration   4: 8340225.575 ops/s
Iteration   5: 8327482.850 ops/s
Iteration   6: 8386473.024 ops/s
Iteration   7: 8379250.742 ops/s
Iteration   8: 8377714.816 ops/s
Iteration   9: 8377931.873 ops/s
Iteration  10: 8331384.055 ops/s
Iteration  11: 8363656.342 ops/s
Iteration  12: 8339671.909 ops/s
Iteration  13: 8394513.013 ops/s
Iteration  14: 8367578.106 ops/s
Iteration  15: 8380818.616 ops/s
Iteration  16: 8384803.993 ops/s
Iteration  17: 8348030.396 ops/s
Iteration  18: 8374907.164 ops/s
Iteration  19: 8239813.716 ops/s
Iteration  20: 8051862.103 ops/s
Iteration  21: 8344722.922 ops/s
Iteration  22: 8351199.910 ops/s
Iteration  23: 8370604.947 ops/s
Iteration  24: 8304518.610 ops/s
Iteration  25: 8354520.174 ops/s
Iteration  26: 8339683.921 ops/s
Iteration  27: 8368885.956 ops/s
Iteration  28: 8379032.689 ops/s
Iteration  29: 8323377.923 ops/s
Iteration  30: 8366510.421 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_asReversed":
  8345310.288 ±(99.9%) 42385.101 ops/s [Average]
  (min, avg, max) = (8051862.103, 8345310.288, 8394513.013), stdev = 63440.028
  CI (99.9%): [8302925.187, 8387695.389] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_asReversed  thrpt   30  8345310.288 ± 42385.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 774482.096 ops/s
# Warmup Iteration   2: 819027.181 ops/s
# Warmup Iteration   3: 1045594.725 ops/s
# Warmup Iteration   4: 1043220.077 ops/s
# Warmup Iteration   5: 1036931.522 ops/s
# Warmup Iteration   6: 1037565.327 ops/s
# Warmup Iteration   7: 1047874.719 ops/s
# Warmup Iteration   8: 1048424.349 ops/s
# Warmup Iteration   9: 1052774.531 ops/s
# Warmup Iteration  10: 1036171.514 ops/s
# Warmup Iteration  11: 936105.465 ops/s
# Warmup Iteration  12: 998203.965 ops/s
# Warmup Iteration  13: 1047278.656 ops/s
# Warmup Iteration  14: 1045603.676 ops/s
# Warmup Iteration  15: 1045961.133 ops/s
# Warmup Iteration  16: 1047360.482 ops/s
# Warmup Iteration  17: 1114419.048 ops/s
# Warmup Iteration  18: 1117601.718 ops/s
# Warmup Iteration  19: 1114410.353 ops/s
# Warmup Iteration  20: 1114985.769 ops/s
# Warmup Iteration  21: 1108847.430 ops/s
# Warmup Iteration  22: 1111337.666 ops/s
# Warmup Iteration  23: 1117633.203 ops/s
# Warmup Iteration  24: 1109049.675 ops/s
# Warmup Iteration  25: 1111737.771 ops/s
# Warmup Iteration  26: 1114452.551 ops/s
# Warmup Iteration  27: 1110879.379 ops/s
# Warmup Iteration  28: 1120119.461 ops/s
# Warmup Iteration  29: 1119305.693 ops/s
# Warmup Iteration  30: 1119787.775 ops/s
Iteration   1: 1116285.093 ops/s
Iteration   2: 1117802.720 ops/s
Iteration   3: 1116197.361 ops/s
Iteration   4: 1118318.016 ops/s
Iteration   5: 1118904.557 ops/s
Iteration   6: 1103019.519 ops/s
Iteration   7: 1112975.072 ops/s
Iteration   8: 1113147.156 ops/s
Iteration   9: 1110838.204 ops/s
Iteration  10: 1111617.265 ops/s
Iteration  11: 1113350.620 ops/s
Iteration  12: 1122229.211 ops/s
Iteration  13: 1109081.931 ops/s
Iteration  14: 1115724.094 ops/s
Iteration  15: 1119722.671 ops/s
Iteration  16: 1119829.236 ops/s
Iteration  17: 1118487.595 ops/s
Iteration  18: 1119336.139 ops/s
Iteration  19: 1117710.984 ops/s
Iteration  20: 1107819.803 ops/s
Iteration  21: 1116860.737 ops/s
Iteration  22: 1112588.597 ops/s
Iteration  23: 1114541.752 ops/s
Iteration  24: 1112107.624 ops/s
Iteration  25: 1108641.636 ops/s
Iteration  26: 1114566.675 ops/s
Iteration  27: 1106565.596 ops/s
Iteration  28: 1112503.962 ops/s
Iteration  29: 1114218.506 ops/s
Iteration  30: 1115880.472 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_castToCollection":
  1114362.427 ±(99.9%) 2957.026 ops/s [Average]
  (min, avg, max) = (1103019.519, 1114362.427, 1122229.211), stdev = 4425.938
  CI (99.9%): [1111405.401, 1117319.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_castToCollection  thrpt   30  1114362.427 ± 2957.026  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4512479.942 ops/s
# Warmup Iteration   2: 9848290.459 ops/s
# Warmup Iteration   3: 9855073.531 ops/s
# Warmup Iteration   4: 8299834.832 ops/s
# Warmup Iteration   5: 9842453.637 ops/s
# Warmup Iteration   6: 9875360.456 ops/s
# Warmup Iteration   7: 9855761.448 ops/s
# Warmup Iteration   8: 9869223.752 ops/s
# Warmup Iteration   9: 9839514.089 ops/s
# Warmup Iteration  10: 9862178.512 ops/s
# Warmup Iteration  11: 9882333.907 ops/s
# Warmup Iteration  12: 9847942.065 ops/s
# Warmup Iteration  13: 9854161.643 ops/s
# Warmup Iteration  14: 9891237.194 ops/s
# Warmup Iteration  15: 9912273.866 ops/s
# Warmup Iteration  16: 9851464.549 ops/s
# Warmup Iteration  17: 9882767.262 ops/s
# Warmup Iteration  18: 9884048.865 ops/s
# Warmup Iteration  19: 9881549.868 ops/s
# Warmup Iteration  20: 9891947.901 ops/s
# Warmup Iteration  21: 9868385.514 ops/s
# Warmup Iteration  22: 9878274.305 ops/s
# Warmup Iteration  23: 9891997.413 ops/s
# Warmup Iteration  24: 9847833.930 ops/s
# Warmup Iteration  25: 9865301.932 ops/s
# Warmup Iteration  26: 9873071.132 ops/s
# Warmup Iteration  27: 9860879.909 ops/s
# Warmup Iteration  28: 9870046.225 ops/s
# Warmup Iteration  29: 9880236.395 ops/s
# Warmup Iteration  30: 9879222.700 ops/s
Iteration   1: 9893293.016 ops/s
Iteration   2: 9848244.841 ops/s
Iteration   3: 9855961.672 ops/s
Iteration   4: 9777949.520 ops/s
Iteration   5: 9869099.613 ops/s
Iteration   6: 9864559.442 ops/s
Iteration   7: 9852066.695 ops/s
Iteration   8: 9866709.900 ops/s
Iteration   9: 9833092.118 ops/s
Iteration  10: 9821264.371 ops/s
Iteration  11: 9875088.614 ops/s
Iteration  12: 9880698.872 ops/s
Iteration  13: 9900969.290 ops/s
Iteration  14: 9885768.511 ops/s
Iteration  15: 9886519.948 ops/s
Iteration  16: 9854265.282 ops/s
Iteration  17: 9815013.102 ops/s
Iteration  18: 9853243.419 ops/s
Iteration  19: 9857475.353 ops/s
Iteration  20: 9799305.807 ops/s
Iteration  21: 9841875.612 ops/s
Iteration  22: 9838250.980 ops/s
Iteration  23: 9817654.535 ops/s
Iteration  24: 9818489.525 ops/s
Iteration  25: 9855011.076 ops/s
Iteration  26: 9866253.290 ops/s
Iteration  27: 9822844.477 ops/s
Iteration  28: 9875609.225 ops/s
Iteration  29: 9887927.614 ops/s
Iteration  30: 9107457.244 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_chunk_large_size":
  9827398.765 ±(99.9%) 92937.108 ops/s [Average]
  (min, avg, max) = (9107457.244, 9827398.765, 9900969.290), stdev = 139103.899
  CI (99.9%): [9734461.657, 9920335.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  9827398.765 ± 92937.108  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 781942.279 ops/s
# Warmup Iteration   2: 824157.911 ops/s
# Warmup Iteration   3: 1048747.880 ops/s
# Warmup Iteration   4: 1051407.366 ops/s
# Warmup Iteration   5: 1046449.379 ops/s
# Warmup Iteration   6: 1053082.865 ops/s
# Warmup Iteration   7: 1052008.896 ops/s
# Warmup Iteration   8: 1048472.334 ops/s
# Warmup Iteration   9: 1049001.688 ops/s
# Warmup Iteration  10: 1052487.304 ops/s
# Warmup Iteration  11: 955546.490 ops/s
# Warmup Iteration  12: 989271.677 ops/s
# Warmup Iteration  13: 1045925.714 ops/s
# Warmup Iteration  14: 1045611.893 ops/s
# Warmup Iteration  15: 1043099.540 ops/s
# Warmup Iteration  16: 1045554.973 ops/s
# Warmup Iteration  17: 1115195.135 ops/s
# Warmup Iteration  18: 1120992.328 ops/s
# Warmup Iteration  19: 1119157.973 ops/s
# Warmup Iteration  20: 1112465.321 ops/s
# Warmup Iteration  21: 1111369.767 ops/s
# Warmup Iteration  22: 1111538.828 ops/s
# Warmup Iteration  23: 1112718.964 ops/s
# Warmup Iteration  24: 1108689.807 ops/s
# Warmup Iteration  25: 1117115.982 ops/s
# Warmup Iteration  26: 1119064.985 ops/s
# Warmup Iteration  27: 1112632.608 ops/s
# Warmup Iteration  28: 1116421.662 ops/s
# Warmup Iteration  29: 1116273.292 ops/s
# Warmup Iteration  30: 1114431.146 ops/s
Iteration   1: 1114726.529 ops/s
Iteration   2: 1119298.156 ops/s
Iteration   3: 1121098.127 ops/s
Iteration   4: 1119684.704 ops/s
Iteration   5: 1116404.572 ops/s
Iteration   6: 1114134.557 ops/s
Iteration   7: 1110198.155 ops/s
Iteration   8: 1109062.621 ops/s
Iteration   9: 1112376.088 ops/s
Iteration  10: 1111594.383 ops/s
Iteration  11: 1111081.346 ops/s
Iteration  12: 1116362.735 ops/s
Iteration  13: 1112214.012 ops/s
Iteration  14: 1118544.073 ops/s
Iteration  15: 1111854.022 ops/s
Iteration  16: 1119162.885 ops/s
Iteration  17: 1112373.084 ops/s
Iteration  18: 1113595.886 ops/s
Iteration  19: 1116527.505 ops/s
Iteration  20: 1119049.791 ops/s
Iteration  21: 1110965.340 ops/s
Iteration  22: 1113866.368 ops/s
Iteration  23: 1112113.954 ops/s
Iteration  24: 1117775.181 ops/s
Iteration  25: 1118467.514 ops/s
Iteration  26: 1116416.505 ops/s
Iteration  27: 1118218.387 ops/s
Iteration  28: 1118340.666 ops/s
Iteration  29: 1114560.949 ops/s
Iteration  30: 1114683.104 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_chunk_zero_throws":
  1115158.373 ±(99.9%) 2213.271 ops/s [Average]
  (min, avg, max) = (1109062.621, 1115158.373, 1121098.127), stdev = 3312.720
  CI (99.9%): [1112945.102, 1117371.644] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1115158.373 ± 2213.271  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 754985.335 ops/s
# Warmup Iteration   2: 793539.302 ops/s
# Warmup Iteration   3: 983786.315 ops/s
# Warmup Iteration   4: 979769.918 ops/s
# Warmup Iteration   5: 970252.815 ops/s
# Warmup Iteration   6: 977787.621 ops/s
# Warmup Iteration   7: 981848.013 ops/s
# Warmup Iteration   8: 977132.978 ops/s
# Warmup Iteration   9: 978701.273 ops/s
# Warmup Iteration  10: 983817.484 ops/s
# Warmup Iteration  11: 969215.642 ops/s
# Warmup Iteration  12: 836668.677 ops/s
# Warmup Iteration  13: 970752.773 ops/s
# Warmup Iteration  14: 968243.344 ops/s
# Warmup Iteration  15: 968251.204 ops/s
# Warmup Iteration  16: 965934.333 ops/s
# Warmup Iteration  17: 1020882.959 ops/s
# Warmup Iteration  18: 1019433.798 ops/s
# Warmup Iteration  19: 1021097.804 ops/s
# Warmup Iteration  20: 1030128.162 ops/s
# Warmup Iteration  21: 1032977.605 ops/s
# Warmup Iteration  22: 1032952.434 ops/s
# Warmup Iteration  23: 1035808.029 ops/s
# Warmup Iteration  24: 1022100.123 ops/s
# Warmup Iteration  25: 1031552.964 ops/s
# Warmup Iteration  26: 1033118.095 ops/s
# Warmup Iteration  27: 1024069.487 ops/s
# Warmup Iteration  28: 1025320.923 ops/s
# Warmup Iteration  29: 1028262.417 ops/s
# Warmup Iteration  30: 1030570.450 ops/s
Iteration   1: 1036358.494 ops/s
Iteration   2: 1033151.675 ops/s
Iteration   3: 1028958.050 ops/s
Iteration   4: 1034097.513 ops/s
Iteration   5: 1027581.435 ops/s
Iteration   6: 1035826.979 ops/s
Iteration   7: 1025433.323 ops/s
Iteration   8: 1033363.727 ops/s
Iteration   9: 1034214.709 ops/s
Iteration  10: 1036514.829 ops/s
Iteration  11: 1031990.148 ops/s
Iteration  12: 1035587.975 ops/s
Iteration  13: 1035220.109 ops/s
Iteration  14: 1031639.303 ops/s
Iteration  15: 1027090.691 ops/s
Iteration  16: 1028337.330 ops/s
Iteration  17: 1023440.767 ops/s
Iteration  18: 1013189.078 ops/s
Iteration  19: 1023970.431 ops/s
Iteration  20: 1006754.247 ops/s
Iteration  21: 1028865.679 ops/s
Iteration  22: 1029952.140 ops/s
Iteration  23: 1056916.801 ops/s
Iteration  24: 1026265.919 ops/s
Iteration  25: 1028960.082 ops/s
Iteration  26: 1029094.399 ops/s
Iteration  27: 1034722.346 ops/s
Iteration  28: 1030567.582 ops/s
Iteration  29: 1027011.846 ops/s
Iteration  30: 1037698.467 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_clear":
  1030425.869 ±(99.9%) 5556.894 ops/s [Average]
  (min, avg, max) = (1006754.247, 1030425.869, 1056916.801), stdev = 8317.298
  CI (99.9%): [1024868.975, 1035982.763] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_clear  thrpt   30  1030425.869 ± 5556.894  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8135036.499 ops/s
# Warmup Iteration   2: 17155597.380 ops/s
# Warmup Iteration   3: 17475567.171 ops/s
# Warmup Iteration   4: 16364076.350 ops/s
# Warmup Iteration   5: 15918065.982 ops/s
# Warmup Iteration   6: 17548764.125 ops/s
# Warmup Iteration   7: 17539522.775 ops/s
# Warmup Iteration   8: 17494519.159 ops/s
# Warmup Iteration   9: 17522274.200 ops/s
# Warmup Iteration  10: 17501783.856 ops/s
# Warmup Iteration  11: 17524782.129 ops/s
# Warmup Iteration  12: 17528635.719 ops/s
# Warmup Iteration  13: 17592024.312 ops/s
# Warmup Iteration  14: 17517992.320 ops/s
# Warmup Iteration  15: 17508489.147 ops/s
# Warmup Iteration  16: 17498143.227 ops/s
# Warmup Iteration  17: 17495880.741 ops/s
# Warmup Iteration  18: 17460602.504 ops/s
# Warmup Iteration  19: 17470368.444 ops/s
# Warmup Iteration  20: 17580914.416 ops/s
# Warmup Iteration  21: 17543981.412 ops/s
# Warmup Iteration  22: 17557788.532 ops/s
# Warmup Iteration  23: 17552092.078 ops/s
# Warmup Iteration  24: 17541102.826 ops/s
# Warmup Iteration  25: 17554550.741 ops/s
# Warmup Iteration  26: 17496359.207 ops/s
# Warmup Iteration  27: 17511415.463 ops/s
# Warmup Iteration  28: 17472462.099 ops/s
# Warmup Iteration  29: 17509731.714 ops/s
# Warmup Iteration  30: 17472381.693 ops/s
Iteration   1: 17528763.203 ops/s
Iteration   2: 17431574.281 ops/s
Iteration   3: 17521504.691 ops/s
Iteration   4: 17474431.900 ops/s
Iteration   5: 17497500.788 ops/s
Iteration   6: 17569217.882 ops/s
Iteration   7: 17528253.211 ops/s
Iteration   8: 17558372.129 ops/s
Iteration   9: 17554957.464 ops/s
Iteration  10: 17505012.664 ops/s
Iteration  11: 17486259.187 ops/s
Iteration  12: 17618148.952 ops/s
Iteration  13: 17546538.962 ops/s
Iteration  14: 17464365.148 ops/s
Iteration  15: 17516654.904 ops/s
Iteration  16: 17509804.759 ops/s
Iteration  17: 17595932.266 ops/s
Iteration  18: 17473634.074 ops/s
Iteration  19: 17571833.033 ops/s
Iteration  20: 17519148.827 ops/s
Iteration  21: 17553958.350 ops/s
Iteration  22: 17392447.298 ops/s
Iteration  23: 17536791.047 ops/s
Iteration  24: 17325569.692 ops/s
Iteration  25: 17515823.496 ops/s
Iteration  26: 17642378.786 ops/s
Iteration  27: 17356393.472 ops/s
Iteration  28: 17480221.730 ops/s
Iteration  29: 17475662.142 ops/s
Iteration  30: 17512693.565 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collect":
  17508794.930 ±(99.9%) 46135.608 ops/s [Average]
  (min, avg, max) = (17325569.692, 17508794.930, 17642378.786), stdev = 69053.612
  CI (99.9%): [17462659.322, 17554930.538] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collect  thrpt   30  17508794.930 ± 46135.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3480916.742 ops/s
# Warmup Iteration   2: 8512161.830 ops/s
# Warmup Iteration   3: 8614055.817 ops/s
# Warmup Iteration   4: 7041853.843 ops/s
# Warmup Iteration   5: 8610688.650 ops/s
# Warmup Iteration   6: 8577101.088 ops/s
# Warmup Iteration   7: 8592326.398 ops/s
# Warmup Iteration   8: 8589589.521 ops/s
# Warmup Iteration   9: 8619041.488 ops/s
# Warmup Iteration  10: 8600481.279 ops/s
# Warmup Iteration  11: 8609441.220 ops/s
# Warmup Iteration  12: 8620395.989 ops/s
# Warmup Iteration  13: 8590009.302 ops/s
# Warmup Iteration  14: 8609846.349 ops/s
# Warmup Iteration  15: 8624357.141 ops/s
# Warmup Iteration  16: 8601760.562 ops/s
# Warmup Iteration  17: 8575699.405 ops/s
# Warmup Iteration  18: 8595875.371 ops/s
# Warmup Iteration  19: 8613619.969 ops/s
# Warmup Iteration  20: 8608568.099 ops/s
# Warmup Iteration  21: 8612819.088 ops/s
# Warmup Iteration  22: 8582724.283 ops/s
# Warmup Iteration  23: 8610563.869 ops/s
# Warmup Iteration  24: 8601564.474 ops/s
# Warmup Iteration  25: 8575652.835 ops/s
# Warmup Iteration  26: 8584864.285 ops/s
# Warmup Iteration  27: 8616774.549 ops/s
# Warmup Iteration  28: 8631374.095 ops/s
# Warmup Iteration  29: 8617775.249 ops/s
# Warmup Iteration  30: 8615881.952 ops/s
Iteration   1: 8562322.320 ops/s
Iteration   2: 8613024.618 ops/s
Iteration   3: 8610486.222 ops/s
Iteration   4: 8620838.046 ops/s
Iteration   5: 8635056.816 ops/s
Iteration   6: 8572012.875 ops/s
Iteration   7: 8646357.836 ops/s
Iteration   8: 8624392.916 ops/s
Iteration   9: 8578146.645 ops/s
Iteration  10: 8612956.660 ops/s
Iteration  11: 8596284.332 ops/s
Iteration  12: 8592280.474 ops/s
Iteration  13: 8603955.355 ops/s
Iteration  14: 8617538.145 ops/s
Iteration  15: 8611623.090 ops/s
Iteration  16: 8598152.247 ops/s
Iteration  17: 8619379.858 ops/s
Iteration  18: 8612447.651 ops/s
Iteration  19: 8599408.192 ops/s
Iteration  20: 8625670.334 ops/s
Iteration  21: 8586353.778 ops/s
Iteration  22: 8625557.137 ops/s
Iteration  23: 8630576.926 ops/s
Iteration  24: 8607482.431 ops/s
Iteration  25: 8619388.947 ops/s
Iteration  26: 8615115.960 ops/s
Iteration  27: 8616618.466 ops/s
Iteration  28: 8617226.707 ops/s
Iteration  29: 8618667.018 ops/s
Iteration  30: 8592405.232 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectBoolean":
  8609390.908 ±(99.9%) 12424.100 ops/s [Average]
  (min, avg, max) = (8562322.320, 8609390.908, 8646357.836), stdev = 18595.810
  CI (99.9%): [8596966.808, 8621815.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collectBoolean  thrpt   30  8609390.908 ± 12424.100  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3227837.684 ops/s
# Warmup Iteration   2: 6117629.815 ops/s
# Warmup Iteration   3: 6822572.381 ops/s
# Warmup Iteration   4: 6834575.428 ops/s
# Warmup Iteration   5: 6017324.214 ops/s
# Warmup Iteration   6: 6473719.352 ops/s
# Warmup Iteration   7: 6819375.994 ops/s
# Warmup Iteration   8: 6820123.890 ops/s
# Warmup Iteration   9: 6845496.934 ops/s
# Warmup Iteration  10: 6835520.206 ops/s
# Warmup Iteration  11: 6835176.055 ops/s
# Warmup Iteration  12: 6825741.860 ops/s
# Warmup Iteration  13: 6859035.156 ops/s
# Warmup Iteration  14: 6812819.200 ops/s
# Warmup Iteration  15: 6834097.577 ops/s
# Warmup Iteration  16: 6825430.586 ops/s
# Warmup Iteration  17: 6831376.678 ops/s
# Warmup Iteration  18: 6838689.514 ops/s
# Warmup Iteration  19: 6846068.565 ops/s
# Warmup Iteration  20: 6819558.581 ops/s
# Warmup Iteration  21: 6838047.854 ops/s
# Warmup Iteration  22: 6843782.585 ops/s
# Warmup Iteration  23: 6845266.389 ops/s
# Warmup Iteration  24: 6840753.307 ops/s
# Warmup Iteration  25: 6827017.838 ops/s
# Warmup Iteration  26: 6843394.745 ops/s
# Warmup Iteration  27: 6852699.058 ops/s
# Warmup Iteration  28: 6839026.329 ops/s
# Warmup Iteration  29: 6838196.286 ops/s
# Warmup Iteration  30: 6815322.883 ops/s
Iteration   1: 6819787.832 ops/s
Iteration   2: 6839508.959 ops/s
Iteration   3: 6841156.019 ops/s
Iteration   4: 6864797.106 ops/s
Iteration   5: 6827104.819 ops/s
Iteration   6: 6858951.237 ops/s
Iteration   7: 6852913.112 ops/s
Iteration   8: 6831348.107 ops/s
Iteration   9: 6840795.708 ops/s
Iteration  10: 6842266.153 ops/s
Iteration  11: 6814631.283 ops/s
Iteration  12: 6847711.130 ops/s
Iteration  13: 6840714.011 ops/s
Iteration  14: 6823850.031 ops/s
Iteration  15: 6847301.248 ops/s
Iteration  16: 6848313.974 ops/s
Iteration  17: 6846462.702 ops/s
Iteration  18: 6844173.477 ops/s
Iteration  19: 6817596.365 ops/s
Iteration  20: 6842078.726 ops/s
Iteration  21: 6813128.981 ops/s
Iteration  22: 6853856.929 ops/s
Iteration  23: 6859747.656 ops/s
Iteration  24: 6822989.773 ops/s
Iteration  25: 6765377.495 ops/s
Iteration  26: 6847718.712 ops/s
Iteration  27: 6820181.859 ops/s
Iteration  28: 6816257.979 ops/s
Iteration  29: 6812290.415 ops/s
Iteration  30: 6807722.826 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectByte":
  6833691.154 ±(99.9%) 13727.914 ops/s [Average]
  (min, avg, max) = (6765377.495, 6833691.154, 6864797.106), stdev = 20547.296
  CI (99.9%): [6819963.240, 6847419.068] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collectByte  thrpt   30  6833691.154 ± 13727.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3350200.964 ops/s
# Warmup Iteration   2: 6741279.405 ops/s
# Warmup Iteration   3: 7311566.772 ops/s
# Warmup Iteration   4: 7327518.535 ops/s
# Warmup Iteration   5: 6055289.264 ops/s
# Warmup Iteration   6: 7361412.662 ops/s
# Warmup Iteration   7: 7324694.040 ops/s
# Warmup Iteration   8: 7326631.488 ops/s
# Warmup Iteration   9: 7305324.691 ops/s
# Warmup Iteration  10: 7329005.517 ops/s
# Warmup Iteration  11: 7343584.435 ops/s
# Warmup Iteration  12: 7362703.457 ops/s
# Warmup Iteration  13: 7333075.231 ops/s
# Warmup Iteration  14: 7348747.488 ops/s
# Warmup Iteration  15: 7351486.862 ops/s
# Warmup Iteration  16: 7332141.121 ops/s
# Warmup Iteration  17: 7327949.897 ops/s
# Warmup Iteration  18: 7339097.157 ops/s
# Warmup Iteration  19: 7344777.418 ops/s
# Warmup Iteration  20: 7361399.667 ops/s
# Warmup Iteration  21: 7343636.438 ops/s
# Warmup Iteration  22: 7317019.452 ops/s
# Warmup Iteration  23: 7340746.384 ops/s
# Warmup Iteration  24: 7328742.025 ops/s
# Warmup Iteration  25: 7338700.982 ops/s
# Warmup Iteration  26: 7333221.150 ops/s
# Warmup Iteration  27: 7349917.275 ops/s
# Warmup Iteration  28: 7349044.360 ops/s
# Warmup Iteration  29: 7337150.466 ops/s
# Warmup Iteration  30: 7337355.630 ops/s
Iteration   1: 7327862.295 ops/s
Iteration   2: 7340176.330 ops/s
Iteration   3: 7338513.654 ops/s
Iteration   4: 7337272.995 ops/s
Iteration   5: 7363339.040 ops/s
Iteration   6: 7337687.749 ops/s
Iteration   7: 7367562.976 ops/s
Iteration   8: 7352258.462 ops/s
Iteration   9: 7354843.320 ops/s
Iteration  10: 7350784.998 ops/s
Iteration  11: 7359091.566 ops/s
Iteration  12: 7339042.543 ops/s
Iteration  13: 7313797.827 ops/s
Iteration  14: 7332568.131 ops/s
Iteration  15: 7338285.479 ops/s
Iteration  16: 7329992.661 ops/s
Iteration  17: 7328124.456 ops/s
Iteration  18: 7333883.517 ops/s
Iteration  19: 7322523.223 ops/s
Iteration  20: 7349282.972 ops/s
Iteration  21: 7338392.185 ops/s
Iteration  22: 7304162.495 ops/s
Iteration  23: 7391037.794 ops/s
Iteration  24: 7301791.405 ops/s
Iteration  25: 7334277.335 ops/s
Iteration  26: 7362852.611 ops/s
Iteration  27: 7333701.421 ops/s
Iteration  28: 7384007.040 ops/s
Iteration  29: 7349818.832 ops/s
Iteration  30: 7342055.636 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectChar":
  7341966.365 ±(99.9%) 13363.179 ops/s [Average]
  (min, avg, max) = (7301791.405, 7341966.365, 7391037.794), stdev = 20001.379
  CI (99.9%): [7328603.186, 7355329.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collectChar  thrpt   30  7341966.365 ± 13363.179  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3048964.826 ops/s
# Warmup Iteration   2: 6756407.354 ops/s
# Warmup Iteration   3: 7056076.382 ops/s
# Warmup Iteration   4: 6970478.017 ops/s
# Warmup Iteration   5: 5967572.124 ops/s
# Warmup Iteration   6: 7114170.076 ops/s
# Warmup Iteration   7: 7111089.352 ops/s
# Warmup Iteration   8: 7087266.538 ops/s
# Warmup Iteration   9: 7099925.818 ops/s
# Warmup Iteration  10: 7102692.633 ops/s
# Warmup Iteration  11: 7094022.639 ops/s
# Warmup Iteration  12: 7109757.981 ops/s
# Warmup Iteration  13: 7101587.390 ops/s
# Warmup Iteration  14: 7104170.075 ops/s
# Warmup Iteration  15: 7082147.962 ops/s
# Warmup Iteration  16: 7078895.051 ops/s
# Warmup Iteration  17: 7103484.240 ops/s
# Warmup Iteration  18: 7081114.788 ops/s
# Warmup Iteration  19: 7077484.391 ops/s
# Warmup Iteration  20: 7099606.122 ops/s
# Warmup Iteration  21: 7087039.335 ops/s
# Warmup Iteration  22: 7072932.066 ops/s
# Warmup Iteration  23: 7098692.733 ops/s
# Warmup Iteration  24: 7070471.735 ops/s
# Warmup Iteration  25: 7078390.074 ops/s
# Warmup Iteration  26: 7084512.365 ops/s
# Warmup Iteration  27: 7057974.701 ops/s
# Warmup Iteration  28: 7092244.400 ops/s
# Warmup Iteration  29: 7086666.760 ops/s
# Warmup Iteration  30: 7100925.702 ops/s
Iteration   1: 7079913.759 ops/s
Iteration   2: 7098275.192 ops/s
Iteration   3: 7102381.769 ops/s
Iteration   4: 7098961.283 ops/s
Iteration   5: 7076082.187 ops/s
Iteration   6: 7088101.087 ops/s
Iteration   7: 7097671.363 ops/s
Iteration   8: 7088525.684 ops/s
Iteration   9: 7114072.972 ops/s
Iteration  10: 7084899.631 ops/s
Iteration  11: 7020023.141 ops/s
Iteration  12: 7105692.263 ops/s
Iteration  13: 7082414.702 ops/s
Iteration  14: 7048615.250 ops/s
Iteration  15: 7073474.706 ops/s
Iteration  16: 7112836.949 ops/s
Iteration  17: 7128511.634 ops/s
Iteration  18: 7066847.138 ops/s
Iteration  19: 7060199.916 ops/s
Iteration  20: 7074531.709 ops/s
Iteration  21: 6999267.025 ops/s
Iteration  22: 7081619.911 ops/s
Iteration  23: 7108976.212 ops/s
Iteration  24: 7062745.821 ops/s
Iteration  25: 7093981.631 ops/s
Iteration  26: 7097206.265 ops/s
Iteration  27: 7098379.117 ops/s
Iteration  28: 7105688.212 ops/s
Iteration  29: 7117733.251 ops/s
Iteration  30: 7068571.558 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectDouble":
  7084540.045 ±(99.9%) 18504.363 ops/s [Average]
  (min, avg, max) = (6999267.025, 7084540.045, 7128511.634), stdev = 27696.461
  CI (99.9%): [7066035.682, 7103044.407] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collectDouble  thrpt   30  7084540.045 ± 18504.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3193636.047 ops/s
# Warmup Iteration   2: 6481984.216 ops/s
# Warmup Iteration   3: 6946739.209 ops/s
# Warmup Iteration   4: 6959013.477 ops/s
# Warmup Iteration   5: 5736179.036 ops/s
# Warmup Iteration   6: 7008207.928 ops/s
# Warmup Iteration   7: 7013894.351 ops/s
# Warmup Iteration   8: 7004412.121 ops/s
# Warmup Iteration   9: 6978472.597 ops/s
# Warmup Iteration  10: 6969663.204 ops/s
# Warmup Iteration  11: 7002839.958 ops/s
# Warmup Iteration  12: 6983524.974 ops/s
# Warmup Iteration  13: 6986581.205 ops/s
# Warmup Iteration  14: 6995129.009 ops/s
# Warmup Iteration  15: 6985889.862 ops/s
# Warmup Iteration  16: 6986433.768 ops/s
# Warmup Iteration  17: 7083066.324 ops/s
# Warmup Iteration  18: 7119067.253 ops/s
# Warmup Iteration  19: 7114536.297 ops/s
# Warmup Iteration  20: 7072400.618 ops/s
# Warmup Iteration  21: 7117465.384 ops/s
# Warmup Iteration  22: 6985249.804 ops/s
# Warmup Iteration  23: 7133428.714 ops/s
# Warmup Iteration  24: 7106568.751 ops/s
# Warmup Iteration  25: 7115680.162 ops/s
# Warmup Iteration  26: 7106975.051 ops/s
# Warmup Iteration  27: 7106235.001 ops/s
# Warmup Iteration  28: 7112659.335 ops/s
# Warmup Iteration  29: 7097279.959 ops/s
# Warmup Iteration  30: 7115047.935 ops/s
Iteration   1: 7123792.347 ops/s
Iteration   2: 7118730.662 ops/s
Iteration   3: 7135458.242 ops/s
Iteration   4: 7106026.788 ops/s
Iteration   5: 7052610.157 ops/s
Iteration   6: 7116140.094 ops/s
Iteration   7: 7112370.419 ops/s
Iteration   8: 7057658.910 ops/s
Iteration   9: 7123425.242 ops/s
Iteration  10: 7114592.854 ops/s
Iteration  11: 7077495.583 ops/s
Iteration  12: 7123273.181 ops/s
Iteration  13: 7125551.332 ops/s
Iteration  14: 7130431.075 ops/s
Iteration  15: 7120610.292 ops/s
Iteration  16: 7138889.398 ops/s
Iteration  17: 7130057.297 ops/s
Iteration  18: 7101093.783 ops/s
Iteration  19: 7128679.989 ops/s
Iteration  20: 7151713.824 ops/s
Iteration  21: 7130806.528 ops/s
Iteration  22: 7116838.516 ops/s
Iteration  23: 7126108.446 ops/s
Iteration  24: 7126550.674 ops/s
Iteration  25: 7084662.792 ops/s
Iteration  26: 7115070.977 ops/s
Iteration  27: 7094831.831 ops/s
Iteration  28: 7118454.293 ops/s
Iteration  29: 7138091.834 ops/s
Iteration  30: 7135299.032 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectFloat":
  7115843.880 ±(99.9%) 15197.357 ops/s [Average]
  (min, avg, max) = (7052610.157, 7115843.880, 7151713.824), stdev = 22746.690
  CI (99.9%): [7100646.523, 7131041.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collectFloat  thrpt   30  7115843.880 ± 15197.357  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7469908.957 ops/s
# Warmup Iteration   2: 16092906.588 ops/s
# Warmup Iteration   3: 16400797.416 ops/s
# Warmup Iteration   4: 13867728.499 ops/s
# Warmup Iteration   5: 16332656.625 ops/s
# Warmup Iteration   6: 16411193.627 ops/s
# Warmup Iteration   7: 16430146.282 ops/s
# Warmup Iteration   8: 16388025.830 ops/s
# Warmup Iteration   9: 16362248.844 ops/s
# Warmup Iteration  10: 16452365.142 ops/s
# Warmup Iteration  11: 16424462.850 ops/s
# Warmup Iteration  12: 16417115.640 ops/s
# Warmup Iteration  13: 16328439.618 ops/s
# Warmup Iteration  14: 16408411.951 ops/s
# Warmup Iteration  15: 16424996.531 ops/s
# Warmup Iteration  16: 16388781.077 ops/s
# Warmup Iteration  17: 16298658.049 ops/s
# Warmup Iteration  18: 16370220.654 ops/s
# Warmup Iteration  19: 16378506.696 ops/s
# Warmup Iteration  20: 16396389.815 ops/s
# Warmup Iteration  21: 16386326.737 ops/s
# Warmup Iteration  22: 16425678.168 ops/s
# Warmup Iteration  23: 16366030.430 ops/s
# Warmup Iteration  24: 16376977.669 ops/s
# Warmup Iteration  25: 16431827.228 ops/s
# Warmup Iteration  26: 16288226.806 ops/s
# Warmup Iteration  27: 16417766.807 ops/s
# Warmup Iteration  28: 16430624.519 ops/s
# Warmup Iteration  29: 16335250.608 ops/s
# Warmup Iteration  30: 16439152.533 ops/s
Iteration   1: 16359746.603 ops/s
Iteration   2: 16356487.845 ops/s
Iteration   3: 16357326.308 ops/s
Iteration   4: 16351150.867 ops/s
Iteration   5: 16395298.449 ops/s
Iteration   6: 16404272.811 ops/s
Iteration   7: 16241394.260 ops/s
Iteration   8: 16337530.996 ops/s
Iteration   9: 16373053.249 ops/s
Iteration  10: 16379498.478 ops/s
Iteration  11: 16379366.950 ops/s
Iteration  12: 16439073.672 ops/s
Iteration  13: 16424272.802 ops/s
Iteration  14: 16362014.533 ops/s
Iteration  15: 16408881.640 ops/s
Iteration  16: 16314224.730 ops/s
Iteration  17: 16380099.623 ops/s
Iteration  18: 16362835.823 ops/s
Iteration  19: 16362552.440 ops/s
Iteration  20: 16376027.071 ops/s
Iteration  21: 16314214.254 ops/s
Iteration  22: 16371461.806 ops/s
Iteration  23: 16365022.457 ops/s
Iteration  24: 16347657.012 ops/s
Iteration  25: 16330761.829 ops/s
Iteration  26: 16340678.581 ops/s
Iteration  27: 16366364.557 ops/s
Iteration  28: 16419803.539 ops/s
Iteration  29: 16346606.505 ops/s
Iteration  30: 16415497.512 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectIf":
  16366105.907 ±(99.9%) 25947.480 ops/s [Average]
  (min, avg, max) = (16241394.260, 16366105.907, 16439073.672), stdev = 38836.969
  CI (99.9%): [16340158.427, 16392053.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collectIf  thrpt   30  16366105.907 ± 25947.480  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20769877.283 ops/s
# Warmup Iteration   2: 41480320.830 ops/s
# Warmup Iteration   3: 37205812.442 ops/s
# Warmup Iteration   4: 43700999.321 ops/s
# Warmup Iteration   5: 43911174.743 ops/s
# Warmup Iteration   6: 44387637.842 ops/s
# Warmup Iteration   7: 44172358.699 ops/s
# Warmup Iteration   8: 44371097.542 ops/s
# Warmup Iteration   9: 43761603.855 ops/s
# Warmup Iteration  10: 43904285.975 ops/s
# Warmup Iteration  11: 44324467.020 ops/s
# Warmup Iteration  12: 43750285.007 ops/s
# Warmup Iteration  13: 44225461.423 ops/s
# Warmup Iteration  14: 44013419.913 ops/s
# Warmup Iteration  15: 43775299.128 ops/s
# Warmup Iteration  16: 44094849.586 ops/s
# Warmup Iteration  17: 43855204.292 ops/s
# Warmup Iteration  18: 44230234.002 ops/s
# Warmup Iteration  19: 43958272.268 ops/s
# Warmup Iteration  20: 43778798.384 ops/s
# Warmup Iteration  21: 43912357.738 ops/s
# Warmup Iteration  22: 43316561.511 ops/s
# Warmup Iteration  23: 43923335.861 ops/s
# Warmup Iteration  24: 43865392.899 ops/s
# Warmup Iteration  25: 43836589.389 ops/s
# Warmup Iteration  26: 43571809.891 ops/s
# Warmup Iteration  27: 43902798.887 ops/s
# Warmup Iteration  28: 43610889.906 ops/s
# Warmup Iteration  29: 43485388.660 ops/s
# Warmup Iteration  30: 43981148.750 ops/s
Iteration   1: 43702690.866 ops/s
Iteration   2: 43411535.874 ops/s
Iteration   3: 43706051.701 ops/s
Iteration   4: 43701228.823 ops/s
Iteration   5: 44045377.780 ops/s
Iteration   6: 44300353.384 ops/s
Iteration   7: 43804065.889 ops/s
Iteration   8: 44064881.250 ops/s
Iteration   9: 43938092.130 ops/s
Iteration  10: 43898290.785 ops/s
Iteration  11: 43829370.051 ops/s
Iteration  12: 43907163.907 ops/s
Iteration  13: 43689429.230 ops/s
Iteration  14: 43943588.617 ops/s
Iteration  15: 43802752.839 ops/s
Iteration  16: 43273861.409 ops/s
Iteration  17: 44014181.947 ops/s
Iteration  18: 43767244.659 ops/s
Iteration  19: 44123472.233 ops/s
Iteration  20: 43424090.934 ops/s
Iteration  21: 44113296.033 ops/s
Iteration  22: 43489119.562 ops/s
Iteration  23: 44322558.429 ops/s
Iteration  24: 43512594.421 ops/s
Iteration  25: 43859902.741 ops/s
Iteration  26: 43652241.577 ops/s
Iteration  27: 43724135.263 ops/s
Iteration  28: 44501589.506 ops/s
Iteration  29: 44224812.834 ops/s
Iteration  30: 44118341.078 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectIfWithTarget":
  43862210.525 ±(99.9%) 193912.106 ops/s [Average]
  (min, avg, max) = (43273861.409, 43862210.525, 44501589.506), stdev = 290238.534
  CI (99.9%): [43668298.419, 44056122.631] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  43862210.525 ± 193912.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3240761.680 ops/s
# Warmup Iteration   2: 6715118.265 ops/s
# Warmup Iteration   3: 7174147.402 ops/s
# Warmup Iteration   4: 7204456.603 ops/s
# Warmup Iteration   5: 5905514.119 ops/s
# Warmup Iteration   6: 7212922.702 ops/s
# Warmup Iteration   7: 7194133.846 ops/s
# Warmup Iteration   8: 7206698.043 ops/s
# Warmup Iteration   9: 7174220.556 ops/s
# Warmup Iteration  10: 7207370.009 ops/s
# Warmup Iteration  11: 7157494.157 ops/s
# Warmup Iteration  12: 7211712.622 ops/s
# Warmup Iteration  13: 7210529.192 ops/s
# Warmup Iteration  14: 7214946.479 ops/s
# Warmup Iteration  15: 7216228.576 ops/s
# Warmup Iteration  16: 7174946.740 ops/s
# Warmup Iteration  17: 7196691.064 ops/s
# Warmup Iteration  18: 7198422.784 ops/s
# Warmup Iteration  19: 7167249.032 ops/s
# Warmup Iteration  20: 7123346.817 ops/s
# Warmup Iteration  21: 7199670.193 ops/s
# Warmup Iteration  22: 7169426.416 ops/s
# Warmup Iteration  23: 7204159.101 ops/s
# Warmup Iteration  24: 7200289.664 ops/s
# Warmup Iteration  25: 7195434.273 ops/s
# Warmup Iteration  26: 7180309.296 ops/s
# Warmup Iteration  27: 7174493.416 ops/s
# Warmup Iteration  28: 7188574.609 ops/s
# Warmup Iteration  29: 7215658.168 ops/s
# Warmup Iteration  30: 7205350.236 ops/s
Iteration   1: 7185647.660 ops/s
Iteration   2: 7187716.317 ops/s
Iteration   3: 7197116.389 ops/s
Iteration   4: 7192652.407 ops/s
Iteration   5: 7198241.806 ops/s
Iteration   6: 7177422.805 ops/s
Iteration   7: 7195941.963 ops/s
Iteration   8: 7199189.288 ops/s
Iteration   9: 7153406.181 ops/s
Iteration  10: 7197982.467 ops/s
Iteration  11: 7159912.587 ops/s
Iteration  12: 7205860.791 ops/s
Iteration  13: 7193939.124 ops/s
Iteration  14: 7200395.146 ops/s
Iteration  15: 7194898.052 ops/s
Iteration  16: 7189371.062 ops/s
Iteration  17: 7194657.445 ops/s
Iteration  18: 7151517.616 ops/s
Iteration  19: 7167160.075 ops/s
Iteration  20: 7203849.761 ops/s
Iteration  21: 7133521.741 ops/s
Iteration  22: 7183800.877 ops/s
Iteration  23: 7220696.933 ops/s
Iteration  24: 7188621.640 ops/s
Iteration  25: 7187827.386 ops/s
Iteration  26: 7193177.068 ops/s
Iteration  27: 7170608.049 ops/s
Iteration  28: 7182758.257 ops/s
Iteration  29: 7190529.639 ops/s
Iteration  30: 7212950.767 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectInt":
  7187045.710 ±(99.9%) 12549.809 ops/s [Average]
  (min, avg, max) = (7133521.741, 7187045.710, 7220696.933), stdev = 18783.964
  CI (99.9%): [7174495.901, 7199595.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collectInt  thrpt   30  7187045.710 ± 12549.809  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3048116.018 ops/s
# Warmup Iteration   2: 6804336.711 ops/s
# Warmup Iteration   3: 7096128.294 ops/s
# Warmup Iteration   4: 6951848.764 ops/s
# Warmup Iteration   5: 6086540.524 ops/s
# Warmup Iteration   6: 7154801.460 ops/s
# Warmup Iteration   7: 7129449.026 ops/s
# Warmup Iteration   8: 7120635.612 ops/s
# Warmup Iteration   9: 7133914.350 ops/s
# Warmup Iteration  10: 7107072.545 ops/s
# Warmup Iteration  11: 7126954.364 ops/s
# Warmup Iteration  12: 7141118.724 ops/s
# Warmup Iteration  13: 7147543.050 ops/s
# Warmup Iteration  14: 7149607.040 ops/s
# Warmup Iteration  15: 7145674.130 ops/s
# Warmup Iteration  16: 7115895.370 ops/s
# Warmup Iteration  17: 7167958.486 ops/s
# Warmup Iteration  18: 7161347.295 ops/s
# Warmup Iteration  19: 7156258.870 ops/s
# Warmup Iteration  20: 7113997.576 ops/s
# Warmup Iteration  21: 7131302.258 ops/s
# Warmup Iteration  22: 7167708.490 ops/s
# Warmup Iteration  23: 7156544.111 ops/s
# Warmup Iteration  24: 7158547.754 ops/s
# Warmup Iteration  25: 7167624.866 ops/s
# Warmup Iteration  26: 7149774.109 ops/s
# Warmup Iteration  27: 7160006.056 ops/s
# Warmup Iteration  28: 7154430.833 ops/s
# Warmup Iteration  29: 7167795.972 ops/s
# Warmup Iteration  30: 7154049.444 ops/s
Iteration   1: 7153112.689 ops/s
Iteration   2: 7160911.713 ops/s
Iteration   3: 7149547.690 ops/s
Iteration   4: 7169672.255 ops/s
Iteration   5: 7150757.757 ops/s
Iteration   6: 7170075.135 ops/s
Iteration   7: 7146673.641 ops/s
Iteration   8: 7160873.301 ops/s
Iteration   9: 7165978.074 ops/s
Iteration  10: 7169163.959 ops/s
Iteration  11: 7108850.574 ops/s
Iteration  12: 7173931.650 ops/s
Iteration  13: 7138214.011 ops/s
Iteration  14: 7155275.208 ops/s
Iteration  15: 7123322.226 ops/s
Iteration  16: 7161719.784 ops/s
Iteration  17: 7162785.356 ops/s
Iteration  18: 7166026.835 ops/s
Iteration  19: 7167404.695 ops/s
Iteration  20: 7164420.769 ops/s
Iteration  21: 7141387.036 ops/s
Iteration  22: 7151100.235 ops/s
Iteration  23: 7134584.049 ops/s
Iteration  24: 7158254.353 ops/s
Iteration  25: 7149255.846 ops/s
Iteration  26: 7156136.533 ops/s
Iteration  27: 7154170.629 ops/s
Iteration  28: 7118641.845 ops/s
Iteration  29: 7147142.159 ops/s
Iteration  30: 7150032.601 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectLong":
  7152647.420 ±(99.9%) 10455.717 ops/s [Average]
  (min, avg, max) = (7108850.574, 7152647.420, 7173931.650), stdev = 15649.626
  CI (99.9%): [7142191.703, 7163103.137] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collectLong  thrpt   30  7152647.420 ± 10455.717  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3211274.174 ops/s
# Warmup Iteration   2: 6135742.000 ops/s
# Warmup Iteration   3: 6799171.679 ops/s
# Warmup Iteration   4: 6879505.584 ops/s
# Warmup Iteration   5: 5969510.308 ops/s
# Warmup Iteration   6: 6516052.789 ops/s
# Warmup Iteration   7: 6858256.230 ops/s
# Warmup Iteration   8: 6862712.371 ops/s
# Warmup Iteration   9: 6829952.513 ops/s
# Warmup Iteration  10: 6835225.325 ops/s
# Warmup Iteration  11: 6863255.074 ops/s
# Warmup Iteration  12: 6872980.215 ops/s
# Warmup Iteration  13: 6816544.509 ops/s
# Warmup Iteration  14: 6849805.462 ops/s
# Warmup Iteration  15: 6852964.788 ops/s
# Warmup Iteration  16: 6840795.471 ops/s
# Warmup Iteration  17: 6856242.190 ops/s
# Warmup Iteration  18: 6857748.042 ops/s
# Warmup Iteration  19: 6847617.627 ops/s
# Warmup Iteration  20: 6853490.630 ops/s
# Warmup Iteration  21: 6884133.396 ops/s
# Warmup Iteration  22: 6834450.659 ops/s
# Warmup Iteration  23: 6793497.521 ops/s
# Warmup Iteration  24: 6878574.143 ops/s
# Warmup Iteration  25: 6847885.626 ops/s
# Warmup Iteration  26: 6847965.782 ops/s
# Warmup Iteration  27: 6849302.023 ops/s
# Warmup Iteration  28: 6863936.143 ops/s
# Warmup Iteration  29: 6870789.775 ops/s
# Warmup Iteration  30: 6855059.325 ops/s
Iteration   1: 6849239.728 ops/s
Iteration   2: 6873292.007 ops/s
Iteration   3: 6862194.130 ops/s
Iteration   4: 6868840.415 ops/s
Iteration   5: 6875002.587 ops/s
Iteration   6: 6871662.950 ops/s
Iteration   7: 6873908.062 ops/s
Iteration   8: 6841845.183 ops/s
Iteration   9: 6868167.155 ops/s
Iteration  10: 6863483.710 ops/s
Iteration  11: 6856109.149 ops/s
Iteration  12: 6873829.287 ops/s
Iteration  13: 6878176.269 ops/s
Iteration  14: 6801329.044 ops/s
Iteration  15: 6850190.172 ops/s
Iteration  16: 6891277.918 ops/s
Iteration  17: 6877705.563 ops/s
Iteration  18: 6872308.242 ops/s
Iteration  19: 6874050.958 ops/s
Iteration  20: 6849772.127 ops/s
Iteration  21: 6884160.794 ops/s
Iteration  22: 6865669.524 ops/s
Iteration  23: 6869275.484 ops/s
Iteration  24: 6885842.633 ops/s
Iteration  25: 6849917.949 ops/s
Iteration  26: 6836857.890 ops/s
Iteration  27: 6895339.163 ops/s
Iteration  28: 6873279.111 ops/s
Iteration  29: 6882810.122 ops/s
Iteration  30: 6879033.621 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectShort":
  6866485.698 ±(99.9%) 12537.253 ops/s [Average]
  (min, avg, max) = (6801329.044, 6866485.698, 6895339.163), stdev = 18765.171
  CI (99.9%): [6853948.446, 6879022.951] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collectShort  thrpt   30  6866485.698 ± 12537.253  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1479705.120 ops/s
# Warmup Iteration   2: 3247396.600 ops/s
# Warmup Iteration   3: 2753927.067 ops/s
# Warmup Iteration   4: 3283963.893 ops/s
# Warmup Iteration   5: 3291537.035 ops/s
# Warmup Iteration   6: 3278961.042 ops/s
# Warmup Iteration   7: 3286709.168 ops/s
# Warmup Iteration   8: 3277260.810 ops/s
# Warmup Iteration   9: 3295954.976 ops/s
# Warmup Iteration  10: 3263158.840 ops/s
# Warmup Iteration  11: 3272814.920 ops/s
# Warmup Iteration  12: 3280286.813 ops/s
# Warmup Iteration  13: 3292030.752 ops/s
# Warmup Iteration  14: 3277301.614 ops/s
# Warmup Iteration  15: 3293251.963 ops/s
# Warmup Iteration  16: 3286758.938 ops/s
# Warmup Iteration  17: 3287366.948 ops/s
# Warmup Iteration  18: 3279943.932 ops/s
# Warmup Iteration  19: 3287216.720 ops/s
# Warmup Iteration  20: 3273302.435 ops/s
# Warmup Iteration  21: 3280847.296 ops/s
# Warmup Iteration  22: 3285975.418 ops/s
# Warmup Iteration  23: 3272649.152 ops/s
# Warmup Iteration  24: 3287344.136 ops/s
# Warmup Iteration  25: 3263158.605 ops/s
# Warmup Iteration  26: 3290041.620 ops/s
# Warmup Iteration  27: 3264118.863 ops/s
# Warmup Iteration  28: 3282845.240 ops/s
# Warmup Iteration  29: 3273702.854 ops/s
# Warmup Iteration  30: 3285397.393 ops/s
Iteration   1: 3288318.096 ops/s
Iteration   2: 3275399.008 ops/s
Iteration   3: 3280323.875 ops/s
Iteration   4: 3297041.390 ops/s
Iteration   5: 3286729.759 ops/s
Iteration   6: 3284510.203 ops/s
Iteration   7: 3285031.189 ops/s
Iteration   8: 3275642.662 ops/s
Iteration   9: 3280903.844 ops/s
Iteration  10: 3257569.425 ops/s
Iteration  11: 3282516.565 ops/s
Iteration  12: 3285296.843 ops/s
Iteration  13: 3264682.842 ops/s
Iteration  14: 3272273.503 ops/s
Iteration  15: 3297306.425 ops/s
Iteration  16: 3256629.849 ops/s
Iteration  17: 3296030.907 ops/s
Iteration  18: 3266325.622 ops/s
Iteration  19: 3281960.512 ops/s
Iteration  20: 3282107.008 ops/s
Iteration  21: 3290946.464 ops/s
Iteration  22: 3297870.414 ops/s
Iteration  23: 3290876.826 ops/s
Iteration  24: 3286170.714 ops/s
Iteration  25: 3289713.731 ops/s
Iteration  26: 3288135.457 ops/s
Iteration  27: 3286273.426 ops/s
Iteration  28: 3279831.582 ops/s
Iteration  29: 3292474.122 ops/s
Iteration  30: 3280992.987 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWith":
  3282662.842 ±(99.9%) 7192.317 ops/s [Average]
  (min, avg, max) = (3256629.849, 3282662.842, 3297870.414), stdev = 10765.123
  CI (99.9%): [3275470.524, 3289855.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWith  thrpt   30  3282662.842 ± 7192.317  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2556371.331 ops/s
# Warmup Iteration   2: 6138113.190 ops/s
# Warmup Iteration   3: 5219062.750 ops/s
# Warmup Iteration   4: 6208621.571 ops/s
# Warmup Iteration   5: 6214741.796 ops/s
# Warmup Iteration   6: 6218502.007 ops/s
# Warmup Iteration   7: 6219851.920 ops/s
# Warmup Iteration   8: 6200655.396 ops/s
# Warmup Iteration   9: 6207062.941 ops/s
# Warmup Iteration  10: 6184179.574 ops/s
# Warmup Iteration  11: 6212828.015 ops/s
# Warmup Iteration  12: 6201293.438 ops/s
# Warmup Iteration  13: 6216683.807 ops/s
# Warmup Iteration  14: 6224280.580 ops/s
# Warmup Iteration  15: 6236579.555 ops/s
# Warmup Iteration  16: 6207175.795 ops/s
# Warmup Iteration  17: 6182680.714 ops/s
# Warmup Iteration  18: 6177530.363 ops/s
# Warmup Iteration  19: 6214781.203 ops/s
# Warmup Iteration  20: 6217790.518 ops/s
# Warmup Iteration  21: 6206543.234 ops/s
# Warmup Iteration  22: 6185361.011 ops/s
# Warmup Iteration  23: 6102747.682 ops/s
# Warmup Iteration  24: 6231983.045 ops/s
# Warmup Iteration  25: 6209096.709 ops/s
# Warmup Iteration  26: 6218731.905 ops/s
# Warmup Iteration  27: 6223059.367 ops/s
# Warmup Iteration  28: 6199281.153 ops/s
# Warmup Iteration  29: 6177817.619 ops/s
# Warmup Iteration  30: 6184936.991 ops/s
Iteration   1: 6172953.873 ops/s
Iteration   2: 6223477.923 ops/s
Iteration   3: 6225911.992 ops/s
Iteration   4: 6217368.845 ops/s
Iteration   5: 6193201.147 ops/s
Iteration   6: 6223161.151 ops/s
Iteration   7: 6216905.947 ops/s
Iteration   8: 6223589.907 ops/s
Iteration   9: 6213394.931 ops/s
Iteration  10: 6209671.089 ops/s
Iteration  11: 6225414.689 ops/s
Iteration  12: 6228654.149 ops/s
Iteration  13: 6224613.364 ops/s
Iteration  14: 6217487.709 ops/s
Iteration  15: 6215552.842 ops/s
Iteration  16: 6184697.950 ops/s
Iteration  17: 6206393.676 ops/s
Iteration  18: 6226933.450 ops/s
Iteration  19: 6212147.505 ops/s
Iteration  20: 6227450.570 ops/s
Iteration  21: 6199838.957 ops/s
Iteration  22: 6222734.854 ops/s
Iteration  23: 6209548.919 ops/s
Iteration  24: 6234763.252 ops/s
Iteration  25: 6218117.657 ops/s
Iteration  26: 6228967.239 ops/s
Iteration  27: 6236217.574 ops/s
Iteration  28: 6233009.109 ops/s
Iteration  29: 6227458.642 ops/s
Iteration  30: 6226234.513 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWithIndex":
  6217529.114 ±(99.9%) 9677.996 ops/s [Average]
  (min, avg, max) = (6172953.873, 6217529.114, 6236217.574), stdev = 14485.570
  CI (99.9%): [6207851.118, 6227207.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  6217529.114 ± 9677.996  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 612959.833 ops/s
# Warmup Iteration   2: 1673635.000 ops/s
# Warmup Iteration   3: 1777072.437 ops/s
# Warmup Iteration   4: 1474296.649 ops/s
# Warmup Iteration   5: 1788220.425 ops/s
# Warmup Iteration   6: 1779508.512 ops/s
# Warmup Iteration   7: 1789774.661 ops/s
# Warmup Iteration   8: 1776749.872 ops/s
# Warmup Iteration   9: 1786913.558 ops/s
# Warmup Iteration  10: 1784008.885 ops/s
# Warmup Iteration  11: 1783849.108 ops/s
# Warmup Iteration  12: 1780897.238 ops/s
# Warmup Iteration  13: 1776953.401 ops/s
# Warmup Iteration  14: 1784234.262 ops/s
# Warmup Iteration  15: 1788350.380 ops/s
# Warmup Iteration  16: 1785446.471 ops/s
# Warmup Iteration  17: 1777731.474 ops/s
# Warmup Iteration  18: 1778115.392 ops/s
# Warmup Iteration  19: 1778749.414 ops/s
# Warmup Iteration  20: 1781289.738 ops/s
# Warmup Iteration  21: 1785050.325 ops/s
# Warmup Iteration  22: 1782183.722 ops/s
# Warmup Iteration  23: 1785081.258 ops/s
# Warmup Iteration  24: 1784329.183 ops/s
# Warmup Iteration  25: 1787932.941 ops/s
# Warmup Iteration  26: 1775989.508 ops/s
# Warmup Iteration  27: 1787900.577 ops/s
# Warmup Iteration  28: 1785183.209 ops/s
# Warmup Iteration  29: 1782203.141 ops/s
# Warmup Iteration  30: 1788458.256 ops/s
Iteration   1: 1794491.048 ops/s
Iteration   2: 1789757.671 ops/s
Iteration   3: 1788635.186 ops/s
Iteration   4: 1787783.973 ops/s
Iteration   5: 1789175.485 ops/s
Iteration   6: 1788684.740 ops/s
Iteration   7: 1789210.000 ops/s
Iteration   8: 1782541.381 ops/s
Iteration   9: 1776630.683 ops/s
Iteration  10: 1790581.433 ops/s
Iteration  11: 1788108.044 ops/s
Iteration  12: 1785345.167 ops/s
Iteration  13: 1785667.364 ops/s
Iteration  14: 1782661.154 ops/s
Iteration  15: 1779017.687 ops/s
Iteration  16: 1782474.306 ops/s
Iteration  17: 1784029.124 ops/s
Iteration  18: 1788416.867 ops/s
Iteration  19: 1788276.816 ops/s
Iteration  20: 1784640.814 ops/s
Iteration  21: 1787052.102 ops/s
Iteration  22: 1780317.168 ops/s
Iteration  23: 1781214.524 ops/s
Iteration  24: 1780365.181 ops/s
Iteration  25: 1778315.578 ops/s
Iteration  26: 1787177.191 ops/s
Iteration  27: 1793161.810 ops/s
Iteration  28: 1788861.696 ops/s
Iteration  29: 1787977.583 ops/s
Iteration  30: 1774966.098 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  1785517.929 ±(99.9%) 3200.321 ops/s [Average]
  (min, avg, max) = (1774966.098, 1785517.929, 1794491.048), stdev = 4790.090
  CI (99.9%): [1782317.609, 1788718.250] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  1785517.929 ± 3200.321  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1678870.985 ops/s
# Warmup Iteration   2: 3825445.756 ops/s
# Warmup Iteration   3: 3205110.887 ops/s
# Warmup Iteration   4: 3824481.963 ops/s
# Warmup Iteration   5: 3828595.358 ops/s
# Warmup Iteration   6: 3825746.076 ops/s
# Warmup Iteration   7: 3818311.084 ops/s
# Warmup Iteration   8: 3807978.585 ops/s
# Warmup Iteration   9: 3829497.456 ops/s
# Warmup Iteration  10: 3820252.420 ops/s
# Warmup Iteration  11: 3828486.327 ops/s
# Warmup Iteration  12: 3825222.810 ops/s
# Warmup Iteration  13: 3826920.777 ops/s
# Warmup Iteration  14: 3810326.595 ops/s
# Warmup Iteration  15: 3824200.927 ops/s
# Warmup Iteration  16: 3832057.448 ops/s
# Warmup Iteration  17: 3820793.405 ops/s
# Warmup Iteration  18: 3823893.977 ops/s
# Warmup Iteration  19: 3767273.480 ops/s
# Warmup Iteration  20: 3786841.347 ops/s
# Warmup Iteration  21: 3830153.640 ops/s
# Warmup Iteration  22: 3827203.784 ops/s
# Warmup Iteration  23: 3817216.790 ops/s
# Warmup Iteration  24: 3799691.888 ops/s
# Warmup Iteration  25: 3793166.167 ops/s
# Warmup Iteration  26: 3805639.704 ops/s
# Warmup Iteration  27: 3812711.603 ops/s
# Warmup Iteration  28: 3819160.504 ops/s
# Warmup Iteration  29: 3821579.784 ops/s
# Warmup Iteration  30: 3837932.284 ops/s
Iteration   1: 3795005.866 ops/s
Iteration   2: 3837942.140 ops/s
Iteration   3: 3833852.783 ops/s
Iteration   4: 3833021.414 ops/s
Iteration   5: 3815343.278 ops/s
Iteration   6: 3825186.650 ops/s
Iteration   7: 3828980.792 ops/s
Iteration   8: 3826562.348 ops/s
Iteration   9: 3821003.881 ops/s
Iteration  10: 3825232.079 ops/s
Iteration  11: 3796216.202 ops/s
Iteration  12: 3838709.994 ops/s
Iteration  13: 3832392.361 ops/s
Iteration  14: 3796146.470 ops/s
Iteration  15: 3831435.806 ops/s
Iteration  16: 3820233.634 ops/s
Iteration  17: 3819030.628 ops/s
Iteration  18: 3820744.785 ops/s
Iteration  19: 3817454.767 ops/s
Iteration  20: 3828327.494 ops/s
Iteration  21: 3818077.696 ops/s
Iteration  22: 3795693.570 ops/s
Iteration  23: 3833286.417 ops/s
Iteration  24: 3820110.515 ops/s
Iteration  25: 3798021.303 ops/s
Iteration  26: 3799476.590 ops/s
Iteration  27: 3805748.327 ops/s
Iteration  28: 3831586.580 ops/s
Iteration  29: 3827420.219 ops/s
Iteration  30: 3821587.540 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWith_target":
  3819794.404 ±(99.9%) 9137.318 ops/s [Average]
  (min, avg, max) = (3795005.866, 3819794.404, 3838709.994), stdev = 13676.309
  CI (99.9%): [3810657.086, 3828931.723] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collectWith_target  thrpt   30  3819794.404 ± 9137.318  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3399169.800 ops/s
# Warmup Iteration   2: 7166982.304 ops/s
# Warmup Iteration   3: 6132676.507 ops/s
# Warmup Iteration   4: 7283988.553 ops/s
# Warmup Iteration   5: 7321871.910 ops/s
# Warmup Iteration   6: 7282560.823 ops/s
# Warmup Iteration   7: 7303916.139 ops/s
# Warmup Iteration   8: 7285742.977 ops/s
# Warmup Iteration   9: 7324136.087 ops/s
# Warmup Iteration  10: 7323656.129 ops/s
# Warmup Iteration  11: 7321111.328 ops/s
# Warmup Iteration  12: 7293994.851 ops/s
# Warmup Iteration  13: 7328233.685 ops/s
# Warmup Iteration  14: 7335018.879 ops/s
# Warmup Iteration  15: 7309464.933 ops/s
# Warmup Iteration  16: 7338770.859 ops/s
# Warmup Iteration  17: 7333859.635 ops/s
# Warmup Iteration  18: 7354132.642 ops/s
# Warmup Iteration  19: 7330297.077 ops/s
# Warmup Iteration  20: 7305234.636 ops/s
# Warmup Iteration  21: 7331794.348 ops/s
# Warmup Iteration  22: 7325418.689 ops/s
# Warmup Iteration  23: 7297968.569 ops/s
# Warmup Iteration  24: 7318824.974 ops/s
# Warmup Iteration  25: 7317352.503 ops/s
# Warmup Iteration  26: 7332185.540 ops/s
# Warmup Iteration  27: 7286445.792 ops/s
# Warmup Iteration  28: 7318892.930 ops/s
# Warmup Iteration  29: 7307581.752 ops/s
# Warmup Iteration  30: 7341172.620 ops/s
Iteration   1: 7337111.253 ops/s
Iteration   2: 7327095.770 ops/s
Iteration   3: 7316010.160 ops/s
Iteration   4: 7348359.315 ops/s
Iteration   5: 7343866.595 ops/s
Iteration   6: 7310127.331 ops/s
Iteration   7: 7307545.353 ops/s
Iteration   8: 7336887.733 ops/s
Iteration   9: 7316527.434 ops/s
Iteration  10: 7341321.744 ops/s
Iteration  11: 7339668.837 ops/s
Iteration  12: 7361210.964 ops/s
Iteration  13: 7333119.763 ops/s
Iteration  14: 7334666.404 ops/s
Iteration  15: 7354665.162 ops/s
Iteration  16: 7335575.921 ops/s
Iteration  17: 7332662.063 ops/s
Iteration  18: 7280432.685 ops/s
Iteration  19: 7320725.210 ops/s
Iteration  20: 7344047.110 ops/s
Iteration  21: 7335203.704 ops/s
Iteration  22: 7348007.480 ops/s
Iteration  23: 7330378.326 ops/s
Iteration  24: 7299401.799 ops/s
Iteration  25: 7329440.602 ops/s
Iteration  26: 7315611.660 ops/s
Iteration  27: 7330986.043 ops/s
Iteration  28: 7311642.545 ops/s
Iteration  29: 7314330.739 ops/s
Iteration  30: 7339130.605 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_collect_target":
  7329192.010 ±(99.9%) 11551.164 ops/s [Average]
  (min, avg, max) = (7280432.685, 7329192.010, 7361210.964), stdev = 17289.240
  CI (99.9%): [7317640.846, 7340743.175] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_collect_target  thrpt   30  7329192.010 ± 11551.164  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3737247.763 ops/s
# Warmup Iteration   2: 6922331.701 ops/s
# Warmup Iteration   3: 6781675.323 ops/s
# Warmup Iteration   4: 6788655.832 ops/s
# Warmup Iteration   5: 5742518.402 ops/s
# Warmup Iteration   6: 6813041.885 ops/s
# Warmup Iteration   7: 6804772.553 ops/s
# Warmup Iteration   8: 6808850.291 ops/s
# Warmup Iteration   9: 6810837.592 ops/s
# Warmup Iteration  10: 6819520.368 ops/s
# Warmup Iteration  11: 6820645.798 ops/s
# Warmup Iteration  12: 6830013.564 ops/s
# Warmup Iteration  13: 6821745.810 ops/s
# Warmup Iteration  14: 6840853.498 ops/s
# Warmup Iteration  15: 6808340.469 ops/s
# Warmup Iteration  16: 6824977.241 ops/s
# Warmup Iteration  17: 6806854.047 ops/s
# Warmup Iteration  18: 6819479.603 ops/s
# Warmup Iteration  19: 6822211.049 ops/s
# Warmup Iteration  20: 6800085.669 ops/s
# Warmup Iteration  21: 6778985.553 ops/s
# Warmup Iteration  22: 6822970.453 ops/s
# Warmup Iteration  23: 6797431.996 ops/s
# Warmup Iteration  24: 6791536.783 ops/s
# Warmup Iteration  25: 6808895.103 ops/s
# Warmup Iteration  26: 6826075.127 ops/s
# Warmup Iteration  27: 6796980.958 ops/s
# Warmup Iteration  28: 6779420.016 ops/s
# Warmup Iteration  29: 6799775.424 ops/s
# Warmup Iteration  30: 6791361.618 ops/s
Iteration   1: 6807749.707 ops/s
Iteration   2: 6801725.121 ops/s
Iteration   3: 6801885.491 ops/s
Iteration   4: 6792059.579 ops/s
Iteration   5: 6793761.681 ops/s
Iteration   6: 6817603.297 ops/s
Iteration   7: 6799594.361 ops/s
Iteration   8: 6810925.393 ops/s
Iteration   9: 6791720.773 ops/s
Iteration  10: 6779636.502 ops/s
Iteration  11: 6764863.592 ops/s
Iteration  12: 6751756.617 ops/s
Iteration  13: 6786510.617 ops/s
Iteration  14: 6815516.678 ops/s
Iteration  15: 6742678.992 ops/s
Iteration  16: 6811532.907 ops/s
Iteration  17: 6818647.942 ops/s
Iteration  18: 6767879.967 ops/s
Iteration  19: 6794479.101 ops/s
Iteration  20: 6791380.917 ops/s
Iteration  21: 6794150.264 ops/s
Iteration  22: 6837341.804 ops/s
Iteration  23: 6818506.953 ops/s
Iteration  24: 6780913.254 ops/s
Iteration  25: 6806264.337 ops/s
Iteration  26: 6804589.044 ops/s
Iteration  27: 6820391.988 ops/s
Iteration  28: 6818248.929 ops/s
Iteration  29: 6794767.264 ops/s
Iteration  30: 6798932.105 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_contains":
  6797200.506 ±(99.9%) 13985.221 ops/s [Average]
  (min, avg, max) = (6742678.992, 6797200.506, 6837341.804), stdev = 20932.423
  CI (99.9%): [6783215.285, 6811185.727] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_contains  thrpt   30  6797200.506 ± 13985.221  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3942207.379 ops/s
# Warmup Iteration   2: 8259449.862 ops/s
# Warmup Iteration   3: 8276492.316 ops/s
# Warmup Iteration   4: 7061988.818 ops/s
# Warmup Iteration   5: 8297167.731 ops/s
# Warmup Iteration   6: 8338734.244 ops/s
# Warmup Iteration   7: 8294959.696 ops/s
# Warmup Iteration   8: 8298255.670 ops/s
# Warmup Iteration   9: 8355032.371 ops/s
# Warmup Iteration  10: 8328471.763 ops/s
# Warmup Iteration  11: 8327558.508 ops/s
# Warmup Iteration  12: 8318887.636 ops/s
# Warmup Iteration  13: 8355169.005 ops/s
# Warmup Iteration  14: 8336378.379 ops/s
# Warmup Iteration  15: 8333638.222 ops/s
# Warmup Iteration  16: 8337249.099 ops/s
# Warmup Iteration  17: 8287716.484 ops/s
# Warmup Iteration  18: 8321122.766 ops/s
# Warmup Iteration  19: 8310264.851 ops/s
# Warmup Iteration  20: 8325023.210 ops/s
# Warmup Iteration  21: 8316642.018 ops/s
# Warmup Iteration  22: 8336801.418 ops/s
# Warmup Iteration  23: 8285726.605 ops/s
# Warmup Iteration  24: 8345593.078 ops/s
# Warmup Iteration  25: 8336237.780 ops/s
# Warmup Iteration  26: 8324433.299 ops/s
# Warmup Iteration  27: 8327395.625 ops/s
# Warmup Iteration  28: 8341351.964 ops/s
# Warmup Iteration  29: 8328818.823 ops/s
# Warmup Iteration  30: 8322810.194 ops/s
Iteration   1: 8325815.098 ops/s
Iteration   2: 8333763.131 ops/s
Iteration   3: 8362210.274 ops/s
Iteration   4: 8327410.311 ops/s
Iteration   5: 8297760.028 ops/s
Iteration   6: 8284614.682 ops/s
Iteration   7: 8340853.968 ops/s
Iteration   8: 8322629.973 ops/s
Iteration   9: 8347649.192 ops/s
Iteration  10: 8249231.799 ops/s
Iteration  11: 8309185.378 ops/s
Iteration  12: 8336706.263 ops/s
Iteration  13: 8311175.329 ops/s
Iteration  14: 8275367.455 ops/s
Iteration  15: 8344009.223 ops/s
Iteration  16: 8330169.802 ops/s
Iteration  17: 8335797.283 ops/s
Iteration  18: 8341801.431 ops/s
Iteration  19: 8332093.173 ops/s
Iteration  20: 8338826.887 ops/s
Iteration  21: 8312467.627 ops/s
Iteration  22: 8299370.341 ops/s
Iteration  23: 8368265.008 ops/s
Iteration  24: 8365914.647 ops/s
Iteration  25: 8265195.444 ops/s
Iteration  26: 8283611.702 ops/s
Iteration  27: 8265096.003 ops/s
Iteration  28: 8286186.127 ops/s
Iteration  29: 8232497.628 ops/s
Iteration  30: 8283806.417 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_containsAll":
  8313649.388 ±(99.9%) 23393.699 ops/s [Average]
  (min, avg, max) = (8232497.628, 8313649.388, 8368265.008), stdev = 35014.590
  CI (99.9%): [8290255.689, 8337043.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_containsAll  thrpt   30  8313649.388 ± 23393.699  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17518406.423 ops/s
# Warmup Iteration   2: 34653598.294 ops/s
# Warmup Iteration   3: 36119387.735 ops/s
# Warmup Iteration   4: 30545529.681 ops/s
# Warmup Iteration   5: 36234234.192 ops/s
# Warmup Iteration   6: 36023130.085 ops/s
# Warmup Iteration   7: 36130076.017 ops/s
# Warmup Iteration   8: 36085791.204 ops/s
# Warmup Iteration   9: 36083330.851 ops/s
# Warmup Iteration  10: 35950366.363 ops/s
# Warmup Iteration  11: 35979968.072 ops/s
# Warmup Iteration  12: 36104760.769 ops/s
# Warmup Iteration  13: 36014549.925 ops/s
# Warmup Iteration  14: 36031077.669 ops/s
# Warmup Iteration  15: 35950312.097 ops/s
# Warmup Iteration  16: 36031636.772 ops/s
# Warmup Iteration  17: 36122231.010 ops/s
# Warmup Iteration  18: 36072088.522 ops/s
# Warmup Iteration  19: 36132421.086 ops/s
# Warmup Iteration  20: 35976833.323 ops/s
# Warmup Iteration  21: 36005234.053 ops/s
# Warmup Iteration  22: 35503859.858 ops/s
# Warmup Iteration  23: 35990158.971 ops/s
# Warmup Iteration  24: 36166598.637 ops/s
# Warmup Iteration  25: 35969324.407 ops/s
# Warmup Iteration  26: 35911529.465 ops/s
# Warmup Iteration  27: 35882643.745 ops/s
# Warmup Iteration  28: 35851491.666 ops/s
# Warmup Iteration  29: 35996846.557 ops/s
# Warmup Iteration  30: 35771279.516 ops/s
Iteration   1: 36038525.749 ops/s
Iteration   2: 36121237.040 ops/s
Iteration   3: 36227000.304 ops/s
Iteration   4: 35819354.657 ops/s
Iteration   5: 36089695.420 ops/s
Iteration   6: 35731042.480 ops/s
Iteration   7: 35936757.640 ops/s
Iteration   8: 35977913.642 ops/s
Iteration   9: 36062796.768 ops/s
Iteration  10: 36060063.200 ops/s
Iteration  11: 36199730.403 ops/s
Iteration  12: 36203052.505 ops/s
Iteration  13: 36203577.467 ops/s
Iteration  14: 36164454.550 ops/s
Iteration  15: 36043969.957 ops/s
Iteration  16: 36196973.036 ops/s
Iteration  17: 36132180.713 ops/s
Iteration  18: 36014685.151 ops/s
Iteration  19: 36050607.890 ops/s
Iteration  20: 36126777.859 ops/s
Iteration  21: 36022274.246 ops/s
Iteration  22: 36124922.716 ops/s
Iteration  23: 36207963.467 ops/s
Iteration  24: 36208095.097 ops/s
Iteration  25: 36224789.699 ops/s
Iteration  26: 35951039.282 ops/s
Iteration  27: 36120084.628 ops/s
Iteration  28: 35799479.083 ops/s
Iteration  29: 35955080.088 ops/s
Iteration  30: 35814802.845 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_containsAllArray":
  36060964.253 ±(99.9%) 92381.555 ops/s [Average]
  (min, avg, max) = (35731042.480, 36060964.253, 36227000.304), stdev = 138272.372
  CI (99.9%): [35968582.698, 36153345.807] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_containsAllArray  thrpt   30  36060964.253 ± 92381.555  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12395270.890 ops/s
# Warmup Iteration   2: 14404653.266 ops/s
# Warmup Iteration   3: 18152783.370 ops/s
# Warmup Iteration   4: 18189064.013 ops/s
# Warmup Iteration   5: 18090860.120 ops/s
# Warmup Iteration   6: 18185067.798 ops/s
# Warmup Iteration   7: 18130475.616 ops/s
# Warmup Iteration   8: 18199553.465 ops/s
# Warmup Iteration   9: 18195634.238 ops/s
# Warmup Iteration  10: 15069686.398 ops/s
# Warmup Iteration  11: 17959203.379 ops/s
# Warmup Iteration  12: 17936390.303 ops/s
# Warmup Iteration  13: 17999921.996 ops/s
# Warmup Iteration  14: 18015089.970 ops/s
# Warmup Iteration  15: 17995705.294 ops/s
# Warmup Iteration  16: 17979224.713 ops/s
# Warmup Iteration  17: 18112418.819 ops/s
# Warmup Iteration  18: 18141348.522 ops/s
# Warmup Iteration  19: 18120256.552 ops/s
# Warmup Iteration  20: 18142310.105 ops/s
# Warmup Iteration  21: 18127314.147 ops/s
# Warmup Iteration  22: 18086099.644 ops/s
# Warmup Iteration  23: 18130848.256 ops/s
# Warmup Iteration  24: 18125886.954 ops/s
# Warmup Iteration  25: 18048743.440 ops/s
# Warmup Iteration  26: 18153752.048 ops/s
# Warmup Iteration  27: 18151041.079 ops/s
# Warmup Iteration  28: 17988432.667 ops/s
# Warmup Iteration  29: 18080084.765 ops/s
# Warmup Iteration  30: 18119291.793 ops/s
Iteration   1: 18095832.011 ops/s
Iteration   2: 18004645.979 ops/s
Iteration   3: 18057041.916 ops/s
Iteration   4: 18118788.336 ops/s
Iteration   5: 18189193.415 ops/s
Iteration   6: 18160513.144 ops/s
Iteration   7: 18138755.166 ops/s
Iteration   8: 18175591.141 ops/s
Iteration   9: 18108932.227 ops/s
Iteration  10: 18110342.608 ops/s
Iteration  11: 18212828.064 ops/s
Iteration  12: 18110825.427 ops/s
Iteration  13: 18143832.809 ops/s
Iteration  14: 18128764.497 ops/s
Iteration  15: 18156705.264 ops/s
Iteration  16: 18183094.230 ops/s
Iteration  17: 18122187.370 ops/s
Iteration  18: 18007967.663 ops/s
Iteration  19: 18020031.874 ops/s
Iteration  20: 18144156.982 ops/s
Iteration  21: 18148589.260 ops/s
Iteration  22: 18061991.817 ops/s
Iteration  23: 18048733.087 ops/s
Iteration  24: 18206557.090 ops/s
Iteration  25: 18145666.559 ops/s
Iteration  26: 18181824.906 ops/s
Iteration  27: 18165488.305 ops/s
Iteration  28: 18211077.514 ops/s
Iteration  29: 18185294.702 ops/s
Iteration  30: 18146806.613 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_containsAllIterable":
  18129735.333 ±(99.9%) 39132.308 ops/s [Average]
  (min, avg, max) = (18004645.979, 18129735.333, 18212828.064), stdev = 58571.401
  CI (99.9%): [18090603.025, 18168867.640] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  18129735.333 ± 39132.308  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7735762.976 ops/s
# Warmup Iteration   2: 16148206.892 ops/s
# Warmup Iteration   3: 16381794.803 ops/s
# Warmup Iteration   4: 16539738.556 ops/s
# Warmup Iteration   5: 13985932.997 ops/s
# Warmup Iteration   6: 16528160.218 ops/s
# Warmup Iteration   7: 16511885.837 ops/s
# Warmup Iteration   8: 16557691.677 ops/s
# Warmup Iteration   9: 16529159.155 ops/s
# Warmup Iteration  10: 16584505.863 ops/s
# Warmup Iteration  11: 16577956.843 ops/s
# Warmup Iteration  12: 16538953.207 ops/s
# Warmup Iteration  13: 16595268.565 ops/s
# Warmup Iteration  14: 16594425.370 ops/s
# Warmup Iteration  15: 16611525.837 ops/s
# Warmup Iteration  16: 16516836.178 ops/s
# Warmup Iteration  17: 16605573.043 ops/s
# Warmup Iteration  18: 16605818.912 ops/s
# Warmup Iteration  19: 16472245.838 ops/s
# Warmup Iteration  20: 16572303.450 ops/s
# Warmup Iteration  21: 16558951.311 ops/s
# Warmup Iteration  22: 16516086.903 ops/s
# Warmup Iteration  23: 16530186.654 ops/s
# Warmup Iteration  24: 16594776.061 ops/s
# Warmup Iteration  25: 16607279.410 ops/s
# Warmup Iteration  26: 16567671.454 ops/s
# Warmup Iteration  27: 16600004.755 ops/s
# Warmup Iteration  28: 16551038.944 ops/s
# Warmup Iteration  29: 16601651.986 ops/s
# Warmup Iteration  30: 16527389.565 ops/s
Iteration   1: 16508069.973 ops/s
Iteration   2: 16539865.011 ops/s
Iteration   3: 16491146.963 ops/s
Iteration   4: 16624017.491 ops/s
Iteration   5: 16532999.107 ops/s
Iteration   6: 16574104.908 ops/s
Iteration   7: 16586479.161 ops/s
Iteration   8: 16627037.923 ops/s
Iteration   9: 16554100.820 ops/s
Iteration  10: 16546428.419 ops/s
Iteration  11: 16618376.202 ops/s
Iteration  12: 16649155.870 ops/s
Iteration  13: 16496981.656 ops/s
Iteration  14: 16558951.599 ops/s
Iteration  15: 16584054.213 ops/s
Iteration  16: 16551779.970 ops/s
Iteration  17: 16622323.998 ops/s
Iteration  18: 16614984.419 ops/s
Iteration  19: 16578998.171 ops/s
Iteration  20: 16597039.375 ops/s
Iteration  21: 16579477.031 ops/s
Iteration  22: 16576678.962 ops/s
Iteration  23: 16446309.351 ops/s
Iteration  24: 16547559.937 ops/s
Iteration  25: 16582717.240 ops/s
Iteration  26: 16531092.743 ops/s
Iteration  27: 16589807.519 ops/s
Iteration  28: 16636687.836 ops/s
Iteration  29: 16483689.765 ops/s
Iteration  30: 16550121.021 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_corresponds":
  16566034.555 ±(99.9%) 32727.500 ops/s [Average]
  (min, avg, max) = (16446309.351, 16566034.555, 16649155.870), stdev = 48984.985
  CI (99.9%): [16533307.055, 16598762.055] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_corresponds  thrpt   30  16566034.555 ± 32727.500  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38232902.687 ops/s
# Warmup Iteration   2: 71778787.013 ops/s
# Warmup Iteration   3: 60880853.656 ops/s
# Warmup Iteration   4: 71879589.432 ops/s
# Warmup Iteration   5: 71470492.408 ops/s
# Warmup Iteration   6: 71654890.061 ops/s
# Warmup Iteration   7: 71897190.351 ops/s
# Warmup Iteration   8: 71819010.980 ops/s
# Warmup Iteration   9: 71667635.322 ops/s
# Warmup Iteration  10: 71552633.963 ops/s
# Warmup Iteration  11: 71933372.010 ops/s
# Warmup Iteration  12: 71435595.953 ops/s
# Warmup Iteration  13: 71344779.548 ops/s
# Warmup Iteration  14: 71428062.279 ops/s
# Warmup Iteration  15: 71890471.251 ops/s
# Warmup Iteration  16: 71644276.820 ops/s
# Warmup Iteration  17: 71723463.708 ops/s
# Warmup Iteration  18: 71839429.389 ops/s
# Warmup Iteration  19: 71842394.669 ops/s
# Warmup Iteration  20: 71879367.443 ops/s
# Warmup Iteration  21: 71908857.493 ops/s
# Warmup Iteration  22: 71822869.729 ops/s
# Warmup Iteration  23: 71658994.125 ops/s
# Warmup Iteration  24: 71722350.625 ops/s
# Warmup Iteration  25: 71907260.819 ops/s
# Warmup Iteration  26: 71863215.779 ops/s
# Warmup Iteration  27: 71968039.773 ops/s
# Warmup Iteration  28: 72134326.967 ops/s
# Warmup Iteration  29: 71760472.966 ops/s
# Warmup Iteration  30: 71239106.472 ops/s
Iteration   1: 71655626.061 ops/s
Iteration   2: 71830309.464 ops/s
Iteration   3: 71916683.180 ops/s
Iteration   4: 71588246.458 ops/s
Iteration   5: 71727136.493 ops/s
Iteration   6: 71742688.920 ops/s
Iteration   7: 71853687.729 ops/s
Iteration   8: 71996700.487 ops/s
Iteration   9: 71730876.258 ops/s
Iteration  10: 71709924.630 ops/s
Iteration  11: 71851483.074 ops/s
Iteration  12: 72158707.500 ops/s
Iteration  13: 71470709.263 ops/s
Iteration  14: 71706145.820 ops/s
Iteration  15: 71985341.662 ops/s
Iteration  16: 72168608.693 ops/s
Iteration  17: 71733624.709 ops/s
Iteration  18: 71737027.054 ops/s
Iteration  19: 71747850.072 ops/s
Iteration  20: 71927642.588 ops/s
Iteration  21: 71745978.145 ops/s
Iteration  22: 72074923.611 ops/s
Iteration  23: 71534937.027 ops/s
Iteration  24: 71790631.608 ops/s
Iteration  25: 71735712.849 ops/s
Iteration  26: 71927992.535 ops/s
Iteration  27: 72033049.231 ops/s
Iteration  28: 72035125.990 ops/s
Iteration  29: 71581711.141 ops/s
Iteration  30: 71486027.772 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_count":
  71806170.334 ±(99.9%) 124899.516 ops/s [Average]
  (min, avg, max) = (71470709.263, 71806170.334, 72168608.693), stdev = 186943.729
  CI (99.9%): [71681270.818, 71931069.850] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_count  thrpt   30  71806170.334 ± 124899.516  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 998082.665 ops/s
# Warmup Iteration   2: 2078022.999 ops/s
# Warmup Iteration   3: 2284717.494 ops/s
# Warmup Iteration   4: 2306429.720 ops/s
# Warmup Iteration   5: 1901375.180 ops/s
# Warmup Iteration   6: 2312062.855 ops/s
# Warmup Iteration   7: 2306062.430 ops/s
# Warmup Iteration   8: 2314723.071 ops/s
# Warmup Iteration   9: 2279245.950 ops/s
# Warmup Iteration  10: 2315129.755 ops/s
# Warmup Iteration  11: 2319858.406 ops/s
# Warmup Iteration  12: 2317792.894 ops/s
# Warmup Iteration  13: 2303742.423 ops/s
# Warmup Iteration  14: 2317449.708 ops/s
# Warmup Iteration  15: 2312364.169 ops/s
# Warmup Iteration  16: 2319923.230 ops/s
# Warmup Iteration  17: 2307861.700 ops/s
# Warmup Iteration  18: 2304700.642 ops/s
# Warmup Iteration  19: 2302557.785 ops/s
# Warmup Iteration  20: 2305615.129 ops/s
# Warmup Iteration  21: 2310492.499 ops/s
# Warmup Iteration  22: 2312463.001 ops/s
# Warmup Iteration  23: 2317310.767 ops/s
# Warmup Iteration  24: 2310068.406 ops/s
# Warmup Iteration  25: 2317325.246 ops/s
# Warmup Iteration  26: 2299478.848 ops/s
# Warmup Iteration  27: 2308477.571 ops/s
# Warmup Iteration  28: 2311847.892 ops/s
# Warmup Iteration  29: 2308320.021 ops/s
# Warmup Iteration  30: 2312091.204 ops/s
Iteration   1: 2317012.311 ops/s
Iteration   2: 2312954.196 ops/s
Iteration   3: 2317611.992 ops/s
Iteration   4: 2305708.742 ops/s
Iteration   5: 2297905.440 ops/s
Iteration   6: 2293149.265 ops/s
Iteration   7: 2298843.484 ops/s
Iteration   8: 2297640.892 ops/s
Iteration   9: 2311024.195 ops/s
Iteration  10: 2312914.670 ops/s
Iteration  11: 2303252.878 ops/s
Iteration  12: 2306743.844 ops/s
Iteration  13: 2315293.679 ops/s
Iteration  14: 2308704.132 ops/s
Iteration  15: 2315065.823 ops/s
Iteration  16: 2316236.516 ops/s
Iteration  17: 2316391.592 ops/s
Iteration  18: 2319126.690 ops/s
Iteration  19: 2319966.567 ops/s
Iteration  20: 2319452.564 ops/s
Iteration  21: 2317487.447 ops/s
Iteration  22: 2318073.393 ops/s
Iteration  23: 2318472.343 ops/s
Iteration  24: 2312495.787 ops/s
Iteration  25: 2315572.674 ops/s
Iteration  26: 2314276.356 ops/s
Iteration  27: 2320783.216 ops/s
Iteration  28: 2314852.942 ops/s
Iteration  29: 2313950.575 ops/s
Iteration  30: 2316205.975 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_countBy":
  2312239.006 ±(99.9%) 4972.856 ops/s [Average]
  (min, avg, max) = (2293149.265, 2312239.006, 2320783.216), stdev = 7443.137
  CI (99.9%): [2307266.150, 2317211.862] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_countBy  thrpt   30  2312239.006 ± 4972.856  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 208079.444 ops/s
# Warmup Iteration   2: 336188.578 ops/s
# Warmup Iteration   3: 404572.382 ops/s
# Warmup Iteration   4: 405818.155 ops/s
# Warmup Iteration   5: 406705.655 ops/s
# Warmup Iteration   6: 405609.220 ops/s
# Warmup Iteration   7: 336554.561 ops/s
# Warmup Iteration   8: 406809.293 ops/s
# Warmup Iteration   9: 407108.934 ops/s
# Warmup Iteration  10: 406834.278 ops/s
# Warmup Iteration  11: 407704.942 ops/s
# Warmup Iteration  12: 407067.084 ops/s
# Warmup Iteration  13: 406684.916 ops/s
# Warmup Iteration  14: 405939.863 ops/s
# Warmup Iteration  15: 407338.627 ops/s
# Warmup Iteration  16: 406552.817 ops/s
# Warmup Iteration  17: 405606.360 ops/s
# Warmup Iteration  18: 406128.136 ops/s
# Warmup Iteration  19: 406886.444 ops/s
# Warmup Iteration  20: 405564.268 ops/s
# Warmup Iteration  21: 405813.682 ops/s
# Warmup Iteration  22: 406400.997 ops/s
# Warmup Iteration  23: 406879.364 ops/s
# Warmup Iteration  24: 406948.340 ops/s
# Warmup Iteration  25: 405769.608 ops/s
# Warmup Iteration  26: 405441.053 ops/s
# Warmup Iteration  27: 406874.072 ops/s
# Warmup Iteration  28: 395729.594 ops/s
# Warmup Iteration  29: 406035.262 ops/s
# Warmup Iteration  30: 406772.715 ops/s
Iteration   1: 404640.605 ops/s
Iteration   2: 407475.404 ops/s
Iteration   3: 407995.664 ops/s
Iteration   4: 406886.526 ops/s
Iteration   5: 407941.473 ops/s
Iteration   6: 406712.863 ops/s
Iteration   7: 407139.805 ops/s
Iteration   8: 403125.882 ops/s
Iteration   9: 406023.479 ops/s
Iteration  10: 406626.362 ops/s
Iteration  11: 406743.402 ops/s
Iteration  12: 404789.254 ops/s
Iteration  13: 405511.760 ops/s
Iteration  14: 405588.950 ops/s
Iteration  15: 407985.797 ops/s
Iteration  16: 405606.656 ops/s
Iteration  17: 407249.233 ops/s
Iteration  18: 407134.150 ops/s
Iteration  19: 406758.401 ops/s
Iteration  20: 405522.203 ops/s
Iteration  21: 408122.441 ops/s
Iteration  22: 407688.005 ops/s
Iteration  23: 405048.877 ops/s
Iteration  24: 407756.166 ops/s
Iteration  25: 407170.638 ops/s
Iteration  26: 404030.095 ops/s
Iteration  27: 405793.857 ops/s
Iteration  28: 406000.977 ops/s
Iteration  29: 404464.672 ops/s
Iteration  30: 404248.128 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_countByEach":
  406259.391 ±(99.9%) 905.269 ops/s [Average]
  (min, avg, max) = (403125.882, 406259.391, 408122.441), stdev = 1354.964
  CI (99.9%): [405354.122, 407164.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_countByEach  thrpt   30  406259.391 ± 905.269  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 994439.268 ops/s
# Warmup Iteration   2: 2007875.333 ops/s
# Warmup Iteration   3: 2220214.192 ops/s
# Warmup Iteration   4: 2232288.112 ops/s
# Warmup Iteration   5: 1847813.096 ops/s
# Warmup Iteration   6: 2238031.466 ops/s
# Warmup Iteration   7: 2238318.194 ops/s
# Warmup Iteration   8: 2229222.391 ops/s
# Warmup Iteration   9: 2244451.071 ops/s
# Warmup Iteration  10: 2243110.160 ops/s
# Warmup Iteration  11: 2233798.119 ops/s
# Warmup Iteration  12: 2218888.895 ops/s
# Warmup Iteration  13: 2242101.127 ops/s
# Warmup Iteration  14: 2237213.656 ops/s
# Warmup Iteration  15: 2240764.229 ops/s
# Warmup Iteration  16: 2243152.550 ops/s
# Warmup Iteration  17: 2243910.274 ops/s
# Warmup Iteration  18: 2241880.666 ops/s
# Warmup Iteration  19: 2233469.982 ops/s
# Warmup Iteration  20: 2232023.808 ops/s
# Warmup Iteration  21: 2219524.455 ops/s
# Warmup Iteration  22: 2234405.433 ops/s
# Warmup Iteration  23: 2233549.375 ops/s
# Warmup Iteration  24: 2241378.216 ops/s
# Warmup Iteration  25: 2234189.276 ops/s
# Warmup Iteration  26: 2226644.960 ops/s
# Warmup Iteration  27: 2236530.573 ops/s
# Warmup Iteration  28: 2241294.690 ops/s
# Warmup Iteration  29: 2235865.193 ops/s
# Warmup Iteration  30: 2239403.681 ops/s
Iteration   1: 2242214.515 ops/s
Iteration   2: 2230653.923 ops/s
Iteration   3: 2242251.964 ops/s
Iteration   4: 2241588.270 ops/s
Iteration   5: 2236029.017 ops/s
Iteration   6: 2242620.436 ops/s
Iteration   7: 2226169.084 ops/s
Iteration   8: 2224244.848 ops/s
Iteration   9: 2240449.771 ops/s
Iteration  10: 2243267.281 ops/s
Iteration  11: 2239477.657 ops/s
Iteration  12: 2245614.982 ops/s
Iteration  13: 2231275.775 ops/s
Iteration  14: 2220642.796 ops/s
Iteration  15: 2222981.877 ops/s
Iteration  16: 2234922.703 ops/s
Iteration  17: 2244482.903 ops/s
Iteration  18: 2238622.257 ops/s
Iteration  19: 2242009.790 ops/s
Iteration  20: 2234989.228 ops/s
Iteration  21: 2234888.388 ops/s
Iteration  22: 2234953.200 ops/s
Iteration  23: 2234346.305 ops/s
Iteration  24: 2240682.889 ops/s
Iteration  25: 2225653.927 ops/s
Iteration  26: 2237247.836 ops/s
Iteration  27: 2241777.871 ops/s
Iteration  28: 2240021.483 ops/s
Iteration  29: 2228914.630 ops/s
Iteration  30: 2231035.917 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_countByWith":
  2235801.051 ±(99.9%) 4636.979 ops/s [Average]
  (min, avg, max) = (2220642.796, 2235801.051, 2245614.982), stdev = 6940.412
  CI (99.9%): [2231164.072, 2240438.030] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_countByWith  thrpt   30  2235801.051 ± 4636.979  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37301405.497 ops/s
# Warmup Iteration   2: 73147451.745 ops/s
# Warmup Iteration   3: 63591621.758 ops/s
# Warmup Iteration   4: 75989948.804 ops/s
# Warmup Iteration   5: 75700610.410 ops/s
# Warmup Iteration   6: 76208448.447 ops/s
# Warmup Iteration   7: 75884213.813 ops/s
# Warmup Iteration   8: 76243624.653 ops/s
# Warmup Iteration   9: 76251563.271 ops/s
# Warmup Iteration  10: 75741090.519 ops/s
# Warmup Iteration  11: 75783784.014 ops/s
# Warmup Iteration  12: 76007688.971 ops/s
# Warmup Iteration  13: 76163154.380 ops/s
# Warmup Iteration  14: 76126091.575 ops/s
# Warmup Iteration  15: 76089240.513 ops/s
# Warmup Iteration  16: 75977581.491 ops/s
# Warmup Iteration  17: 76449757.146 ops/s
# Warmup Iteration  18: 76326895.708 ops/s
# Warmup Iteration  19: 76239380.251 ops/s
# Warmup Iteration  20: 76084915.600 ops/s
# Warmup Iteration  21: 75923520.412 ops/s
# Warmup Iteration  22: 76062558.605 ops/s
# Warmup Iteration  23: 76386954.030 ops/s
# Warmup Iteration  24: 76212232.989 ops/s
# Warmup Iteration  25: 76201172.984 ops/s
# Warmup Iteration  26: 76197732.867 ops/s
# Warmup Iteration  27: 76230952.842 ops/s
# Warmup Iteration  28: 75886021.553 ops/s
# Warmup Iteration  29: 75817997.395 ops/s
# Warmup Iteration  30: 76101703.050 ops/s
Iteration   1: 76082739.063 ops/s
Iteration   2: 75907534.164 ops/s
Iteration   3: 75871926.718 ops/s
Iteration   4: 76328966.940 ops/s
Iteration   5: 76052557.847 ops/s
Iteration   6: 75896733.012 ops/s
Iteration   7: 76450076.978 ops/s
Iteration   8: 76154158.361 ops/s
Iteration   9: 76415437.151 ops/s
Iteration  10: 76080796.591 ops/s
Iteration  11: 76303605.009 ops/s
Iteration  12: 75997607.262 ops/s
Iteration  13: 76197614.202 ops/s
Iteration  14: 75523052.175 ops/s
Iteration  15: 75838701.868 ops/s
Iteration  16: 75992928.093 ops/s
Iteration  17: 75786648.427 ops/s
Iteration  18: 76045474.203 ops/s
Iteration  19: 76263084.023 ops/s
Iteration  20: 76231785.714 ops/s
Iteration  21: 75640925.856 ops/s
Iteration  22: 76194220.203 ops/s
Iteration  23: 76101785.237 ops/s
Iteration  24: 76229776.050 ops/s
Iteration  25: 75990876.403 ops/s
Iteration  26: 75825814.397 ops/s
Iteration  27: 76176194.047 ops/s
Iteration  28: 75756195.511 ops/s
Iteration  29: 76096764.205 ops/s
Iteration  30: 76424165.834 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_countWith":
  76061938.185 ±(99.9%) 153916.677 ops/s [Average]
  (min, avg, max) = (75523052.175, 76061938.185, 76450076.978), stdev = 230375.254
  CI (99.9%): [75908021.507, 76215854.862] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_countWith  thrpt   30  76061938.185 ± 153916.677  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17423870.089 ops/s
# Warmup Iteration   2: 35339709.626 ops/s
# Warmup Iteration   3: 29161777.895 ops/s
# Warmup Iteration   4: 33195796.961 ops/s
# Warmup Iteration   5: 33600605.001 ops/s
# Warmup Iteration   6: 33778140.463 ops/s
# Warmup Iteration   7: 33789832.816 ops/s
# Warmup Iteration   8: 33728782.315 ops/s
# Warmup Iteration   9: 33880428.108 ops/s
# Warmup Iteration  10: 33755974.403 ops/s
# Warmup Iteration  11: 33845611.215 ops/s
# Warmup Iteration  12: 33676979.246 ops/s
# Warmup Iteration  13: 33835042.947 ops/s
# Warmup Iteration  14: 33703160.930 ops/s
# Warmup Iteration  15: 33820423.046 ops/s
# Warmup Iteration  16: 33681309.600 ops/s
# Warmup Iteration  17: 33747067.231 ops/s
# Warmup Iteration  18: 33642197.682 ops/s
# Warmup Iteration  19: 33679488.170 ops/s
# Warmup Iteration  20: 33587301.471 ops/s
# Warmup Iteration  21: 33570176.223 ops/s
# Warmup Iteration  22: 33654499.280 ops/s
# Warmup Iteration  23: 33853155.842 ops/s
# Warmup Iteration  24: 33797411.464 ops/s
# Warmup Iteration  25: 33759046.049 ops/s
# Warmup Iteration  26: 33729115.877 ops/s
# Warmup Iteration  27: 33818538.890 ops/s
# Warmup Iteration  28: 33656177.430 ops/s
# Warmup Iteration  29: 33799291.585 ops/s
# Warmup Iteration  30: 33691704.094 ops/s
Iteration   1: 33810088.465 ops/s
Iteration   2: 33734859.868 ops/s
Iteration   3: 33662313.849 ops/s
Iteration   4: 33670947.035 ops/s
Iteration   5: 33620635.719 ops/s
Iteration   6: 33703264.537 ops/s
Iteration   7: 33735962.794 ops/s
Iteration   8: 33808979.615 ops/s
Iteration   9: 33627041.605 ops/s
Iteration  10: 33569015.902 ops/s
Iteration  11: 33829085.762 ops/s
Iteration  12: 33684413.764 ops/s
Iteration  13: 33776259.057 ops/s
Iteration  14: 33603623.425 ops/s
Iteration  15: 33632911.497 ops/s
Iteration  16: 33867820.281 ops/s
Iteration  17: 33885120.772 ops/s
Iteration  18: 33784064.349 ops/s
Iteration  19: 33750802.940 ops/s
Iteration  20: 33857304.473 ops/s
Iteration  21: 33744818.716 ops/s
Iteration  22: 33720352.545 ops/s
Iteration  23: 33798630.330 ops/s
Iteration  24: 33796283.114 ops/s
Iteration  25: 33770745.230 ops/s
Iteration  26: 33765546.512 ops/s
Iteration  27: 33906123.092 ops/s
Iteration  28: 33825758.682 ops/s
Iteration  29: 33697848.335 ops/s
Iteration  30: 33804385.957 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detect":
  33748166.941 ±(99.9%) 58352.792 ops/s [Average]
  (min, avg, max) = (33569015.902, 33748166.941, 33906123.092), stdev = 87339.719
  CI (99.9%): [33689814.148, 33806519.733] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_detect  thrpt   30  33748166.941 ± 58352.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19136628.832 ops/s
# Warmup Iteration   2: 37864530.775 ops/s
# Warmup Iteration   3: 31475366.753 ops/s
# Warmup Iteration   4: 36950144.404 ops/s
# Warmup Iteration   5: 36874078.536 ops/s
# Warmup Iteration   6: 36913405.022 ops/s
# Warmup Iteration   7: 36864727.351 ops/s
# Warmup Iteration   8: 36928181.378 ops/s
# Warmup Iteration   9: 36818143.294 ops/s
# Warmup Iteration  10: 36932698.472 ops/s
# Warmup Iteration  11: 36635715.989 ops/s
# Warmup Iteration  12: 36657681.052 ops/s
# Warmup Iteration  13: 36678945.880 ops/s
# Warmup Iteration  14: 36762040.051 ops/s
# Warmup Iteration  15: 36910351.406 ops/s
# Warmup Iteration  16: 36832759.744 ops/s
# Warmup Iteration  17: 36851079.670 ops/s
# Warmup Iteration  18: 36804647.357 ops/s
# Warmup Iteration  19: 36909650.861 ops/s
# Warmup Iteration  20: 36690447.904 ops/s
# Warmup Iteration  21: 36911122.552 ops/s
# Warmup Iteration  22: 36928906.412 ops/s
# Warmup Iteration  23: 36722254.301 ops/s
# Warmup Iteration  24: 36728018.108 ops/s
# Warmup Iteration  25: 36811600.996 ops/s
# Warmup Iteration  26: 36721637.613 ops/s
# Warmup Iteration  27: 36506924.861 ops/s
# Warmup Iteration  28: 36822734.238 ops/s
# Warmup Iteration  29: 36829987.378 ops/s
# Warmup Iteration  30: 36740389.086 ops/s
Iteration   1: 36881560.158 ops/s
Iteration   2: 36836529.780 ops/s
Iteration   3: 36721621.590 ops/s
Iteration   4: 36798011.448 ops/s
Iteration   5: 36856744.540 ops/s
Iteration   6: 36635147.044 ops/s
Iteration   7: 36802070.318 ops/s
Iteration   8: 36515307.099 ops/s
Iteration   9: 36782565.782 ops/s
Iteration  10: 36653846.058 ops/s
Iteration  11: 36746328.446 ops/s
Iteration  12: 36970542.588 ops/s
Iteration  13: 36811573.652 ops/s
Iteration  14: 36876891.720 ops/s
Iteration  15: 36828850.493 ops/s
Iteration  16: 36641465.024 ops/s
Iteration  17: 36764403.197 ops/s
Iteration  18: 36930703.405 ops/s
Iteration  19: 36975809.863 ops/s
Iteration  20: 36745256.211 ops/s
Iteration  21: 36526817.490 ops/s
Iteration  22: 36517013.123 ops/s
Iteration  23: 36723624.774 ops/s
Iteration  24: 36598906.155 ops/s
Iteration  25: 36926600.189 ops/s
Iteration  26: 36918311.444 ops/s
Iteration  27: 36823292.057 ops/s
Iteration  28: 36871170.862 ops/s
Iteration  29: 36753995.402 ops/s
Iteration  30: 36777377.247 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectIfNone":
  36773744.572 ±(99.9%) 86138.077 ops/s [Average]
  (min, avg, max) = (36515307.099, 36773744.572, 36975809.863), stdev = 128927.428
  CI (99.9%): [36687606.495, 36859882.649] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_detectIfNone  thrpt   30  36773744.572 ± 86138.077  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 87084224.855 ops/s
# Warmup Iteration   2: 174489857.642 ops/s
# Warmup Iteration   3: 175923581.526 ops/s
# Warmup Iteration   4: 148774864.567 ops/s
# Warmup Iteration   5: 176567604.759 ops/s
# Warmup Iteration   6: 176707728.099 ops/s
# Warmup Iteration   7: 175963200.205 ops/s
# Warmup Iteration   8: 176305743.628 ops/s
# Warmup Iteration   9: 176795422.155 ops/s
# Warmup Iteration  10: 176177154.384 ops/s
# Warmup Iteration  11: 176222476.265 ops/s
# Warmup Iteration  12: 176594015.079 ops/s
# Warmup Iteration  13: 175843951.120 ops/s
# Warmup Iteration  14: 176446114.407 ops/s
# Warmup Iteration  15: 176526816.170 ops/s
# Warmup Iteration  16: 176821886.869 ops/s
# Warmup Iteration  17: 177438955.044 ops/s
# Warmup Iteration  18: 177056846.536 ops/s
# Warmup Iteration  19: 176354350.039 ops/s
# Warmup Iteration  20: 176748280.917 ops/s
# Warmup Iteration  21: 176612149.558 ops/s
# Warmup Iteration  22: 176795243.935 ops/s
# Warmup Iteration  23: 176989434.762 ops/s
# Warmup Iteration  24: 176944634.850 ops/s
# Warmup Iteration  25: 176467580.348 ops/s
# Warmup Iteration  26: 175640296.531 ops/s
# Warmup Iteration  27: 175923284.135 ops/s
# Warmup Iteration  28: 176316071.944 ops/s
# Warmup Iteration  29: 176972106.963 ops/s
# Warmup Iteration  30: 177061064.578 ops/s
Iteration   1: 175019850.271 ops/s
Iteration   2: 176950003.129 ops/s
Iteration   3: 175349539.149 ops/s
Iteration   4: 176911146.327 ops/s
Iteration   5: 176988999.502 ops/s
Iteration   6: 176640925.317 ops/s
Iteration   7: 176176842.386 ops/s
Iteration   8: 176878566.365 ops/s
Iteration   9: 176953863.243 ops/s
Iteration  10: 176392812.136 ops/s
Iteration  11: 176557482.940 ops/s
Iteration  12: 176766973.872 ops/s
Iteration  13: 176989588.686 ops/s
Iteration  14: 177477632.529 ops/s
Iteration  15: 177182945.685 ops/s
Iteration  16: 175834959.099 ops/s
Iteration  17: 177097644.436 ops/s
Iteration  18: 176636555.891 ops/s
Iteration  19: 177245390.317 ops/s
Iteration  20: 176193093.321 ops/s
Iteration  21: 175289256.431 ops/s
Iteration  22: 176450306.816 ops/s
Iteration  23: 176204298.621 ops/s
Iteration  24: 176288267.693 ops/s
Iteration  25: 176616138.941 ops/s
Iteration  26: 177261082.699 ops/s
Iteration  27: 177145187.953 ops/s
Iteration  28: 176775771.131 ops/s
Iteration  29: 177002014.377 ops/s
Iteration  30: 175770412.724 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectIndex":
  176568251.733 ±(99.9%) 414177.445 ops/s [Average]
  (min, avg, max) = (175019850.271, 176568251.733, 177477632.529), stdev = 619921.348
  CI (99.9%): [176154074.288, 176982429.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_detectIndex  thrpt   30  176568251.733 ± 414177.445  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 88427135.772 ops/s
# Warmup Iteration   2: 174424890.038 ops/s
# Warmup Iteration   3: 176392305.605 ops/s
# Warmup Iteration   4: 149468681.987 ops/s
# Warmup Iteration   5: 176807251.249 ops/s
# Warmup Iteration   6: 176339869.770 ops/s
# Warmup Iteration   7: 176914922.330 ops/s
# Warmup Iteration   8: 176851495.973 ops/s
# Warmup Iteration   9: 176146398.815 ops/s
# Warmup Iteration  10: 176829663.828 ops/s
# Warmup Iteration  11: 177069614.504 ops/s
# Warmup Iteration  12: 176116197.626 ops/s
# Warmup Iteration  13: 176011789.644 ops/s
# Warmup Iteration  14: 177104406.322 ops/s
# Warmup Iteration  15: 176976691.814 ops/s
# Warmup Iteration  16: 176992270.731 ops/s
# Warmup Iteration  17: 176414612.069 ops/s
# Warmup Iteration  18: 176411570.352 ops/s
# Warmup Iteration  19: 176031647.327 ops/s
# Warmup Iteration  20: 176383010.458 ops/s
# Warmup Iteration  21: 176503190.277 ops/s
# Warmup Iteration  22: 175418176.181 ops/s
# Warmup Iteration  23: 177070397.041 ops/s
# Warmup Iteration  24: 176204784.664 ops/s
# Warmup Iteration  25: 176230931.498 ops/s
# Warmup Iteration  26: 177027055.897 ops/s
# Warmup Iteration  27: 176864873.687 ops/s
# Warmup Iteration  28: 176924819.687 ops/s
# Warmup Iteration  29: 177220652.686 ops/s
# Warmup Iteration  30: 176985548.559 ops/s
Iteration   1: 177213653.826 ops/s
Iteration   2: 177007819.843 ops/s
Iteration   3: 177300436.189 ops/s
Iteration   4: 176913322.267 ops/s
Iteration   5: 177259607.996 ops/s
Iteration   6: 177022466.621 ops/s
Iteration   7: 175453825.228 ops/s
Iteration   8: 176746977.502 ops/s
Iteration   9: 176944807.215 ops/s
Iteration  10: 177248260.581 ops/s
Iteration  11: 176434348.528 ops/s
Iteration  12: 177032954.625 ops/s
Iteration  13: 176651376.064 ops/s
Iteration  14: 177187378.554 ops/s
Iteration  15: 176817538.146 ops/s
Iteration  16: 176752437.405 ops/s
Iteration  17: 176695640.356 ops/s
Iteration  18: 177077801.355 ops/s
Iteration  19: 176138440.346 ops/s
Iteration  20: 176431761.297 ops/s
Iteration  21: 176691369.975 ops/s
Iteration  22: 176957259.341 ops/s
Iteration  23: 176550524.712 ops/s
Iteration  24: 176904673.290 ops/s
Iteration  25: 176457261.957 ops/s
Iteration  26: 176325940.554 ops/s
Iteration  27: 176903283.373 ops/s
Iteration  28: 176258026.669 ops/s
Iteration  29: 175904106.535 ops/s
Iteration  30: 176064731.517 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectLastIndex":
  176711601.062 ±(99.9%) 295275.015 ops/s [Average]
  (min, avg, max) = (175453825.228, 176711601.062, 177300436.189), stdev = 441953.775
  CI (99.9%): [176416326.048, 177006876.077] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt          Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  176711601.062 ± 295275.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9622020.750 ops/s
# Warmup Iteration   2: 19262242.446 ops/s
# Warmup Iteration   3: 16242205.764 ops/s
# Warmup Iteration   4: 19103637.225 ops/s
# Warmup Iteration   5: 19180897.863 ops/s
# Warmup Iteration   6: 19201973.303 ops/s
# Warmup Iteration   7: 19186620.666 ops/s
# Warmup Iteration   8: 19086979.606 ops/s
# Warmup Iteration   9: 19200041.368 ops/s
# Warmup Iteration  10: 19201715.531 ops/s
# Warmup Iteration  11: 19074387.652 ops/s
# Warmup Iteration  12: 19211006.146 ops/s
# Warmup Iteration  13: 19202406.215 ops/s
# Warmup Iteration  14: 19124458.276 ops/s
# Warmup Iteration  15: 19236163.606 ops/s
# Warmup Iteration  16: 19265719.949 ops/s
# Warmup Iteration  17: 19257940.007 ops/s
# Warmup Iteration  18: 19100701.394 ops/s
# Warmup Iteration  19: 19225103.857 ops/s
# Warmup Iteration  20: 19142169.529 ops/s
# Warmup Iteration  21: 19183967.781 ops/s
# Warmup Iteration  22: 19294074.992 ops/s
# Warmup Iteration  23: 19175096.550 ops/s
# Warmup Iteration  24: 19268067.034 ops/s
# Warmup Iteration  25: 19239792.611 ops/s
# Warmup Iteration  26: 19162429.909 ops/s
# Warmup Iteration  27: 19266133.061 ops/s
# Warmup Iteration  28: 19279510.618 ops/s
# Warmup Iteration  29: 19217442.484 ops/s
# Warmup Iteration  30: 19297660.054 ops/s
Iteration   1: 19232577.374 ops/s
Iteration   2: 19000999.451 ops/s
Iteration   3: 19192896.655 ops/s
Iteration   4: 19250695.798 ops/s
Iteration   5: 19301079.959 ops/s
Iteration   6: 19132910.089 ops/s
Iteration   7: 19252963.952 ops/s
Iteration   8: 19277770.371 ops/s
Iteration   9: 19177529.001 ops/s
Iteration  10: 19201831.616 ops/s
Iteration  11: 19203399.004 ops/s
Iteration  12: 19281335.669 ops/s
Iteration  13: 19297361.656 ops/s
Iteration  14: 19141023.158 ops/s
Iteration  15: 19194105.539 ops/s
Iteration  16: 19193612.802 ops/s
Iteration  17: 19140349.890 ops/s
Iteration  18: 19254591.384 ops/s
Iteration  19: 19201843.830 ops/s
Iteration  20: 19231609.879 ops/s
Iteration  21: 19184012.237 ops/s
Iteration  22: 19328473.133 ops/s
Iteration  23: 19176712.809 ops/s
Iteration  24: 19272106.698 ops/s
Iteration  25: 19272480.876 ops/s
Iteration  26: 19161474.051 ops/s
Iteration  27: 19166902.460 ops/s
Iteration  28: 19205710.737 ops/s
Iteration  29: 18980420.826 ops/s
Iteration  30: 19209208.600 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectWith":
  19203932.983 ±(99.9%) 51568.294 ops/s [Average]
  (min, avg, max) = (18980420.826, 19203932.983, 19328473.133), stdev = 77185.001
  CI (99.9%): [19152364.689, 19255501.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_detectWith  thrpt   30  19203932.983 ± 51568.294  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10996500.087 ops/s
# Warmup Iteration   2: 21808912.623 ops/s
# Warmup Iteration   3: 20258967.203 ops/s
# Warmup Iteration   4: 21011650.302 ops/s
# Warmup Iteration   5: 22391723.274 ops/s
# Warmup Iteration   6: 22302626.204 ops/s
# Warmup Iteration   7: 22346534.390 ops/s
# Warmup Iteration   8: 22438280.997 ops/s
# Warmup Iteration   9: 22362848.572 ops/s
# Warmup Iteration  10: 22380476.025 ops/s
# Warmup Iteration  11: 22202101.811 ops/s
# Warmup Iteration  12: 22406550.179 ops/s
# Warmup Iteration  13: 22390796.987 ops/s
# Warmup Iteration  14: 22340651.272 ops/s
# Warmup Iteration  15: 22453861.285 ops/s
# Warmup Iteration  16: 22425049.453 ops/s
# Warmup Iteration  17: 22432403.744 ops/s
# Warmup Iteration  18: 22503621.920 ops/s
# Warmup Iteration  19: 22362347.844 ops/s
# Warmup Iteration  20: 22424133.467 ops/s
# Warmup Iteration  21: 22472953.736 ops/s
# Warmup Iteration  22: 22405222.076 ops/s
# Warmup Iteration  23: 22491912.472 ops/s
# Warmup Iteration  24: 22354231.375 ops/s
# Warmup Iteration  25: 22438601.221 ops/s
# Warmup Iteration  26: 22340720.913 ops/s
# Warmup Iteration  27: 22379410.985 ops/s
# Warmup Iteration  28: 22393233.436 ops/s
# Warmup Iteration  29: 22453413.417 ops/s
# Warmup Iteration  30: 22439542.036 ops/s
Iteration   1: 22272801.243 ops/s
Iteration   2: 22469278.318 ops/s
Iteration   3: 22432043.161 ops/s
Iteration   4: 22452193.667 ops/s
Iteration   5: 22363882.538 ops/s
Iteration   6: 22384627.896 ops/s
Iteration   7: 22384252.461 ops/s
Iteration   8: 22418769.085 ops/s
Iteration   9: 22276412.142 ops/s
Iteration  10: 22450685.859 ops/s
Iteration  11: 22350117.374 ops/s
Iteration  12: 22372909.705 ops/s
Iteration  13: 22347401.608 ops/s
Iteration  14: 22475720.905 ops/s
Iteration  15: 22370802.381 ops/s
Iteration  16: 22436216.914 ops/s
Iteration  17: 22464750.744 ops/s
Iteration  18: 22434300.941 ops/s
Iteration  19: 22403268.322 ops/s
Iteration  20: 22388283.384 ops/s
Iteration  21: 22371969.174 ops/s
Iteration  22: 22511942.405 ops/s
Iteration  23: 22384257.074 ops/s
Iteration  24: 22487232.897 ops/s
Iteration  25: 22377353.957 ops/s
Iteration  26: 22467555.581 ops/s
Iteration  27: 22428408.279 ops/s
Iteration  28: 22378240.300 ops/s
Iteration  29: 22395004.359 ops/s
Iteration  30: 22401047.799 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_detectWithIfNone":
  22405057.682 ±(99.9%) 37406.867 ops/s [Average]
  (min, avg, max) = (22272801.243, 22405057.682, 22511942.405), stdev = 55988.842
  CI (99.9%): [22367650.815, 22442464.549] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  22405057.682 ± 37406.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1411039.553 ops/s
# Warmup Iteration   2: 3339014.150 ops/s
# Warmup Iteration   3: 3343561.189 ops/s
# Warmup Iteration   4: 2799375.497 ops/s
# Warmup Iteration   5: 3352598.247 ops/s
# Warmup Iteration   6: 3348176.402 ops/s
# Warmup Iteration   7: 3338776.247 ops/s
# Warmup Iteration   8: 3312225.924 ops/s
# Warmup Iteration   9: 3348356.854 ops/s
# Warmup Iteration  10: 3332901.168 ops/s
# Warmup Iteration  11: 3343672.111 ops/s
# Warmup Iteration  12: 3347086.324 ops/s
# Warmup Iteration  13: 3343480.989 ops/s
# Warmup Iteration  14: 3355045.350 ops/s
# Warmup Iteration  15: 3359580.138 ops/s
# Warmup Iteration  16: 3355637.072 ops/s
# Warmup Iteration  17: 3351523.510 ops/s
# Warmup Iteration  18: 3341821.341 ops/s
# Warmup Iteration  19: 3354832.427 ops/s
# Warmup Iteration  20: 3350451.097 ops/s
# Warmup Iteration  21: 3329035.501 ops/s
# Warmup Iteration  22: 3337329.248 ops/s
# Warmup Iteration  23: 3355545.264 ops/s
# Warmup Iteration  24: 3346215.913 ops/s
# Warmup Iteration  25: 3350710.115 ops/s
# Warmup Iteration  26: 3355619.896 ops/s
# Warmup Iteration  27: 3359564.370 ops/s
# Warmup Iteration  28: 3348193.488 ops/s
# Warmup Iteration  29: 3358009.499 ops/s
# Warmup Iteration  30: 3356181.282 ops/s
Iteration   1: 3329724.178 ops/s
Iteration   2: 3346030.167 ops/s
Iteration   3: 3331752.323 ops/s
Iteration   4: 3353369.794 ops/s
Iteration   5: 3348145.717 ops/s
Iteration   6: 3354024.943 ops/s
Iteration   7: 3358445.629 ops/s
Iteration   8: 3357723.928 ops/s
Iteration   9: 3354535.388 ops/s
Iteration  10: 3347558.591 ops/s
Iteration  11: 3356642.553 ops/s
Iteration  12: 3352079.967 ops/s
Iteration  13: 3353892.938 ops/s
Iteration  14: 3326750.393 ops/s
Iteration  15: 3348145.344 ops/s
Iteration  16: 3345978.495 ops/s
Iteration  17: 3335473.386 ops/s
Iteration  18: 3330663.426 ops/s
Iteration  19: 3352057.712 ops/s
Iteration  20: 3344140.109 ops/s
Iteration  21: 3326255.025 ops/s
Iteration  22: 3340554.485 ops/s
Iteration  23: 3357687.307 ops/s
Iteration  24: 3353337.443 ops/s
Iteration  25: 3319749.328 ops/s
Iteration  26: 3342520.964 ops/s
Iteration  27: 3353495.959 ops/s
Iteration  28: 3338772.699 ops/s
Iteration  29: 3339418.933 ops/s
Iteration  30: 3355060.558 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_distinct":
  3345132.923 ±(99.9%) 7292.601 ops/s [Average]
  (min, avg, max) = (3319749.328, 3345132.923, 3358445.629), stdev = 10915.223
  CI (99.9%): [3337840.322, 3352425.524] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_distinct  thrpt   30  3345132.923 ± 7292.601  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4903844.763 ops/s
# Warmup Iteration   2: 11018548.519 ops/s
# Warmup Iteration   3: 11004832.961 ops/s
# Warmup Iteration   4: 9270525.551 ops/s
# Warmup Iteration   5: 11063492.974 ops/s
# Warmup Iteration   6: 11047838.370 ops/s
# Warmup Iteration   7: 11071484.117 ops/s
# Warmup Iteration   8: 11087563.735 ops/s
# Warmup Iteration   9: 11070742.960 ops/s
# Warmup Iteration  10: 11060613.781 ops/s
# Warmup Iteration  11: 11060810.157 ops/s
# Warmup Iteration  12: 11029182.770 ops/s
# Warmup Iteration  13: 11070702.534 ops/s
# Warmup Iteration  14: 11032612.849 ops/s
# Warmup Iteration  15: 11088391.666 ops/s
# Warmup Iteration  16: 11068585.160 ops/s
# Warmup Iteration  17: 11091269.930 ops/s
# Warmup Iteration  18: 11071335.490 ops/s
# Warmup Iteration  19: 11021925.936 ops/s
# Warmup Iteration  20: 11057100.634 ops/s
# Warmup Iteration  21: 11042139.711 ops/s
# Warmup Iteration  22: 11077065.391 ops/s
# Warmup Iteration  23: 11024639.169 ops/s
# Warmup Iteration  24: 11058581.219 ops/s
# Warmup Iteration  25: 11064972.363 ops/s
# Warmup Iteration  26: 11049804.510 ops/s
# Warmup Iteration  27: 11055570.632 ops/s
# Warmup Iteration  28: 11080623.968 ops/s
# Warmup Iteration  29: 11063867.703 ops/s
# Warmup Iteration  30: 11061854.191 ops/s
Iteration   1: 11051232.336 ops/s
Iteration   2: 11088510.152 ops/s
Iteration   3: 11087578.394 ops/s
Iteration   4: 11100795.495 ops/s
Iteration   5: 11058535.127 ops/s
Iteration   6: 11066261.567 ops/s
Iteration   7: 11049162.621 ops/s
Iteration   8: 11056622.091 ops/s
Iteration   9: 11024496.761 ops/s
Iteration  10: 11075864.984 ops/s
Iteration  11: 11114675.443 ops/s
Iteration  12: 11098114.821 ops/s
Iteration  13: 11085856.307 ops/s
Iteration  14: 11099128.649 ops/s
Iteration  15: 11030496.368 ops/s
Iteration  16: 11061207.804 ops/s
Iteration  17: 11081979.535 ops/s
Iteration  18: 11048816.011 ops/s
Iteration  19: 11033881.961 ops/s
Iteration  20: 11040612.591 ops/s
Iteration  21: 11076898.193 ops/s
Iteration  22: 11020523.724 ops/s
Iteration  23: 10994840.352 ops/s
Iteration  24: 11106712.309 ops/s
Iteration  25: 10992274.067 ops/s
Iteration  26: 11060084.797 ops/s
Iteration  27: 11075946.599 ops/s
Iteration  28: 11072338.497 ops/s
Iteration  29: 11079072.311 ops/s
Iteration  30: 11067283.868 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_distinctBy":
  11063326.791 ±(99.9%) 20583.902 ops/s [Average]
  (min, avg, max) = (10992274.067, 11063326.791, 11114675.443), stdev = 30809.017
  CI (99.9%): [11042742.890, 11083910.693] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_distinctBy  thrpt   30  11063326.791 ± 20583.902  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_distinctWithHashingStrategies$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_distinctWithHashingStrategies

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3397459.446 ops/s
# Warmup Iteration   2: 7931913.803 ops/s
# Warmup Iteration   3: 7905041.703 ops/s
# Warmup Iteration   4: 6641137.388 ops/s
# Warmup Iteration   5: 7967283.646 ops/s
# Warmup Iteration   6: 7959381.221 ops/s
# Warmup Iteration   7: 7942936.170 ops/s
# Warmup Iteration   8: 7983189.426 ops/s
# Warmup Iteration   9: 7999345.177 ops/s
# Warmup Iteration  10: 7974017.209 ops/s
# Warmup Iteration  11: 7985157.956 ops/s
# Warmup Iteration  12: 7987806.795 ops/s
# Warmup Iteration  13: 7970485.863 ops/s
# Warmup Iteration  14: 7984337.664 ops/s
# Warmup Iteration  15: 7993509.840 ops/s
# Warmup Iteration  16: 7984993.084 ops/s
# Warmup Iteration  17: 7956440.964 ops/s
# Warmup Iteration  18: 7978199.284 ops/s
# Warmup Iteration  19: 7989551.070 ops/s
# Warmup Iteration  20: 7819591.342 ops/s
# Warmup Iteration  21: 7967873.658 ops/s
# Warmup Iteration  22: 7975635.142 ops/s
# Warmup Iteration  23: 7982910.109 ops/s
# Warmup Iteration  24: 7992196.487 ops/s
# Warmup Iteration  25: 7969936.151 ops/s
# Warmup Iteration  26: 7977747.592 ops/s
# Warmup Iteration  27: 7953576.706 ops/s
# Warmup Iteration  28: 7976131.679 ops/s
# Warmup Iteration  29: 7958886.778 ops/s
# Warmup Iteration  30: 7957559.206 ops/s
Iteration   1: 7945375.963 ops/s
Iteration   2: 7953342.502 ops/s
Iteration   3: 7965100.530 ops/s
Iteration   4: 7950971.510 ops/s
Iteration   5: 7942292.889 ops/s
Iteration   6: 7979279.829 ops/s
Iteration   7: 7971518.632 ops/s
Iteration   8: 7951561.954 ops/s
Iteration   9: 7985713.965 ops/s
Iteration  10: 7980953.727 ops/s
Iteration  11: 7998556.364 ops/s
Iteration  12: 7947451.466 ops/s
Iteration  13: 7994442.134 ops/s
Iteration  14: 7932820.178 ops/s
Iteration  15: 7977330.979 ops/s
Iteration  16: 7971398.098 ops/s
Iteration  17: 8000347.282 ops/s
Iteration  18: 7979095.501 ops/s
Iteration  19: 7976565.678 ops/s
Iteration  20: 7986026.201 ops/s
Iteration  21: 7982066.091 ops/s
Iteration  22: 7973369.717 ops/s
Iteration  23: 7963417.921 ops/s
Iteration  24: 7966129.191 ops/s
Iteration  25: 7922479.248 ops/s
Iteration  26: 7985617.151 ops/s
Iteration  27: 7969491.597 ops/s
Iteration  28: 7989364.520 ops/s
Iteration  29: 7968282.700 ops/s
Iteration  30: 7979828.235 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_distinctWithHashingStrategies":
  7969673.058 ±(99.9%) 12824.325 ops/s [Average]
  (min, avg, max) = (7922479.248, 7969673.058, 8000347.282), stdev = 19194.848
  CI (99.9%): [7956848.733, 7982497.384] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_distinctWithHashingStrategies  thrpt   30  7969673.058 ± 12824.325  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4822568.382 ops/s
# Warmup Iteration   2: 10883429.248 ops/s
# Warmup Iteration   3: 10996831.263 ops/s
# Warmup Iteration   4: 9307200.685 ops/s
# Warmup Iteration   5: 11134159.920 ops/s
# Warmup Iteration   6: 11144652.086 ops/s
# Warmup Iteration   7: 11137006.756 ops/s
# Warmup Iteration   8: 11130089.743 ops/s
# Warmup Iteration   9: 11104364.206 ops/s
# Warmup Iteration  10: 11129841.147 ops/s
# Warmup Iteration  11: 11127543.930 ops/s
# Warmup Iteration  12: 11103267.234 ops/s
# Warmup Iteration  13: 11155833.089 ops/s
# Warmup Iteration  14: 11116023.131 ops/s
# Warmup Iteration  15: 11181504.500 ops/s
# Warmup Iteration  16: 11162415.231 ops/s
# Warmup Iteration  17: 11147326.475 ops/s
# Warmup Iteration  18: 11175444.311 ops/s
# Warmup Iteration  19: 11153930.673 ops/s
# Warmup Iteration  20: 11188129.147 ops/s
# Warmup Iteration  21: 11122071.359 ops/s
# Warmup Iteration  22: 11143431.276 ops/s
# Warmup Iteration  23: 11148094.373 ops/s
# Warmup Iteration  24: 11148450.975 ops/s
# Warmup Iteration  25: 11192907.760 ops/s
# Warmup Iteration  26: 11125513.473 ops/s
# Warmup Iteration  27: 11147050.963 ops/s
# Warmup Iteration  28: 11163906.870 ops/s
# Warmup Iteration  29: 11137764.446 ops/s
# Warmup Iteration  30: 11155890.381 ops/s
Iteration   1: 11196605.816 ops/s
Iteration   2: 11182437.893 ops/s
Iteration   3: 11170390.001 ops/s
Iteration   4: 11131397.054 ops/s
Iteration   5: 11054549.621 ops/s
Iteration   6: 11171920.515 ops/s
Iteration   7: 11152070.490 ops/s
Iteration   8: 11126233.483 ops/s
Iteration   9: 11089271.036 ops/s
Iteration  10: 11145456.392 ops/s
Iteration  11: 11192386.256 ops/s
Iteration  12: 11162736.920 ops/s
Iteration  13: 11103783.879 ops/s
Iteration  14: 11132091.715 ops/s
Iteration  15: 11108755.525 ops/s
Iteration  16: 11074268.390 ops/s
Iteration  17: 11156935.768 ops/s
Iteration  18: 11164173.688 ops/s
Iteration  19: 11156075.568 ops/s
Iteration  20: 11197331.558 ops/s
Iteration  21: 11185858.001 ops/s
Iteration  22: 11132140.322 ops/s
Iteration  23: 11175547.888 ops/s
Iteration  24: 11106774.312 ops/s
Iteration  25: 11114265.937 ops/s
Iteration  26: 11119061.933 ops/s
Iteration  27: 11142546.555 ops/s
Iteration  28: 11160597.014 ops/s
Iteration  29: 11164868.835 ops/s
Iteration  30: 11146283.601 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  11143893.866 ±(99.9%) 24145.778 ops/s [Average]
  (min, avg, max) = (11054549.621, 11143893.866, 11197331.558), stdev = 36140.266
  CI (99.9%): [11119748.088, 11168039.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  11143893.866 ± 24145.778  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1059826.819 ops/s
# Warmup Iteration   2: 1151115.344 ops/s
# Warmup Iteration   3: 1584973.910 ops/s
# Warmup Iteration   4: 1585759.484 ops/s
# Warmup Iteration   5: 1565901.579 ops/s
# Warmup Iteration   6: 1590402.199 ops/s
# Warmup Iteration   7: 1580880.397 ops/s
# Warmup Iteration   8: 1583251.946 ops/s
# Warmup Iteration   9: 1586586.211 ops/s
# Warmup Iteration  10: 1588248.526 ops/s
# Warmup Iteration  11: 1371850.763 ops/s
# Warmup Iteration  12: 1515842.563 ops/s
# Warmup Iteration  13: 1585576.158 ops/s
# Warmup Iteration  14: 1578317.544 ops/s
# Warmup Iteration  15: 1585731.809 ops/s
# Warmup Iteration  16: 1587074.551 ops/s
# Warmup Iteration  17: 1586466.665 ops/s
# Warmup Iteration  18: 1586186.389 ops/s
# Warmup Iteration  19: 1587820.262 ops/s
# Warmup Iteration  20: 1592278.555 ops/s
# Warmup Iteration  21: 1588974.374 ops/s
# Warmup Iteration  22: 1581903.369 ops/s
# Warmup Iteration  23: 1582707.854 ops/s
# Warmup Iteration  24: 1586192.571 ops/s
# Warmup Iteration  25: 1588564.490 ops/s
# Warmup Iteration  26: 1591770.643 ops/s
# Warmup Iteration  27: 1587668.736 ops/s
# Warmup Iteration  28: 1591960.702 ops/s
# Warmup Iteration  29: 1590378.486 ops/s
# Warmup Iteration  30: 1591030.204 ops/s
Iteration   1: 1589291.592 ops/s
Iteration   2: 1595911.504 ops/s
Iteration   3: 1595072.078 ops/s
Iteration   4: 1594260.041 ops/s
Iteration   5: 1593167.024 ops/s
Iteration   6: 1595352.946 ops/s
Iteration   7: 1595605.860 ops/s
Iteration   8: 1592453.695 ops/s
Iteration   9: 1597412.785 ops/s
Iteration  10: 1595627.581 ops/s
Iteration  11: 1595013.079 ops/s
Iteration  12: 1592903.648 ops/s
Iteration  13: 1596597.913 ops/s
Iteration  14: 1596303.736 ops/s
Iteration  15: 1592964.370 ops/s
Iteration  16: 1589736.384 ops/s
Iteration  17: 1592552.632 ops/s
Iteration  18: 1583056.476 ops/s
Iteration  19: 1590631.404 ops/s
Iteration  20: 1572494.908 ops/s
Iteration  21: 1583918.649 ops/s
Iteration  22: 1582786.028 ops/s
Iteration  23: 1589151.335 ops/s
Iteration  24: 1588136.805 ops/s
Iteration  25: 1589418.974 ops/s
Iteration  26: 1582683.932 ops/s
Iteration  27: 1593048.131 ops/s
Iteration  28: 1595517.742 ops/s
Iteration  29: 1596970.699 ops/s
Iteration  30: 1594790.077 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_drop":
  1591427.734 ±(99.9%) 3776.388 ops/s [Average]
  (min, avg, max) = (1572494.908, 1591427.734, 1597412.785), stdev = 5652.320
  CI (99.9%): [1587651.347, 1595204.122] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_drop  thrpt   30  1591427.734 ± 3776.388  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5477053.514 ops/s
# Warmup Iteration   2: 12265971.238 ops/s
# Warmup Iteration   3: 12278929.299 ops/s
# Warmup Iteration   4: 10631108.810 ops/s
# Warmup Iteration   5: 12439290.371 ops/s
# Warmup Iteration   6: 12448019.986 ops/s
# Warmup Iteration   7: 12454702.872 ops/s
# Warmup Iteration   8: 12431844.966 ops/s
# Warmup Iteration   9: 12477195.270 ops/s
# Warmup Iteration  10: 12445554.324 ops/s
# Warmup Iteration  11: 12446299.908 ops/s
# Warmup Iteration  12: 12407277.960 ops/s
# Warmup Iteration  13: 12441941.583 ops/s
# Warmup Iteration  14: 12439778.438 ops/s
# Warmup Iteration  15: 12448779.290 ops/s
# Warmup Iteration  16: 12397993.361 ops/s
# Warmup Iteration  17: 12224001.991 ops/s
# Warmup Iteration  18: 12214728.368 ops/s
# Warmup Iteration  19: 12114180.780 ops/s
# Warmup Iteration  20: 12235847.460 ops/s
# Warmup Iteration  21: 12215593.684 ops/s
# Warmup Iteration  22: 12226722.792 ops/s
# Warmup Iteration  23: 12265288.576 ops/s
# Warmup Iteration  24: 12224960.128 ops/s
# Warmup Iteration  25: 12167450.839 ops/s
# Warmup Iteration  26: 12250995.014 ops/s
# Warmup Iteration  27: 12169538.356 ops/s
# Warmup Iteration  28: 12189848.253 ops/s
# Warmup Iteration  29: 12181750.021 ops/s
# Warmup Iteration  30: 12203685.645 ops/s
Iteration   1: 12240021.021 ops/s
Iteration   2: 12213384.114 ops/s
Iteration   3: 12227356.409 ops/s
Iteration   4: 12141559.607 ops/s
Iteration   5: 12264680.530 ops/s
Iteration   6: 12196786.828 ops/s
Iteration   7: 12208129.367 ops/s
Iteration   8: 12208339.320 ops/s
Iteration   9: 12230286.133 ops/s
Iteration  10: 12257274.991 ops/s
Iteration  11: 12186927.691 ops/s
Iteration  12: 12218708.254 ops/s
Iteration  13: 12252411.824 ops/s
Iteration  14: 12243425.132 ops/s
Iteration  15: 12228556.437 ops/s
Iteration  16: 12227856.487 ops/s
Iteration  17: 12166461.386 ops/s
Iteration  18: 12178289.743 ops/s
Iteration  19: 12202422.408 ops/s
Iteration  20: 12148434.424 ops/s
Iteration  21: 12221811.861 ops/s
Iteration  22: 12213051.722 ops/s
Iteration  23: 12246318.280 ops/s
Iteration  24: 12161522.526 ops/s
Iteration  25: 12216155.421 ops/s
Iteration  26: 12216182.489 ops/s
Iteration  27: 12243855.485 ops/s
Iteration  28: 12248175.721 ops/s
Iteration  29: 12167981.910 ops/s
Iteration  30: 12213612.846 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_dropWhile":
  12212999.346 ±(99.9%) 21723.097 ops/s [Average]
  (min, avg, max) = (12141559.607, 12212999.346, 12264680.530), stdev = 32514.112
  CI (99.9%): [12191276.248, 12234722.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_dropWhile  thrpt   30  12212999.346 ± 21723.097  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 733415.628 ops/s
# Warmup Iteration   2: 769358.704 ops/s
# Warmup Iteration   3: 984638.729 ops/s
# Warmup Iteration   4: 981514.195 ops/s
# Warmup Iteration   5: 986886.169 ops/s
# Warmup Iteration   6: 975439.108 ops/s
# Warmup Iteration   7: 973658.300 ops/s
# Warmup Iteration   8: 978569.709 ops/s
# Warmup Iteration   9: 986796.293 ops/s
# Warmup Iteration  10: 992919.381 ops/s
# Warmup Iteration  11: 994356.653 ops/s
# Warmup Iteration  12: 842791.225 ops/s
# Warmup Iteration  13: 976730.126 ops/s
# Warmup Iteration  14: 975733.078 ops/s
# Warmup Iteration  15: 977309.016 ops/s
# Warmup Iteration  16: 977466.704 ops/s
# Warmup Iteration  17: 1020621.938 ops/s
# Warmup Iteration  18: 1020249.487 ops/s
# Warmup Iteration  19: 1018019.831 ops/s
# Warmup Iteration  20: 1017819.970 ops/s
# Warmup Iteration  21: 1019302.634 ops/s
# Warmup Iteration  22: 1020674.851 ops/s
# Warmup Iteration  23: 1019713.177 ops/s
# Warmup Iteration  24: 1017677.522 ops/s
# Warmup Iteration  25: 1020516.692 ops/s
# Warmup Iteration  26: 1019418.820 ops/s
# Warmup Iteration  27: 1017737.621 ops/s
# Warmup Iteration  28: 1015698.180 ops/s
# Warmup Iteration  29: 1020148.368 ops/s
# Warmup Iteration  30: 1019490.597 ops/s
Iteration   1: 1019366.263 ops/s
Iteration   2: 1018429.096 ops/s
Iteration   3: 1017795.199 ops/s
Iteration   4: 1012104.941 ops/s
Iteration   5: 1017650.747 ops/s
Iteration   6: 1023982.747 ops/s
Iteration   7: 1020426.768 ops/s
Iteration   8: 1018224.141 ops/s
Iteration   9: 1019638.779 ops/s
Iteration  10: 1018592.966 ops/s
Iteration  11: 1018141.165 ops/s
Iteration  12: 1021230.493 ops/s
Iteration  13: 993794.968 ops/s
Iteration  14: 1022420.145 ops/s
Iteration  15: 1014527.550 ops/s
Iteration  16: 1015163.494 ops/s
Iteration  17: 1016754.708 ops/s
Iteration  18: 1019945.253 ops/s
Iteration  19: 1016398.794 ops/s
Iteration  20: 1013209.019 ops/s
Iteration  21: 1009422.699 ops/s
Iteration  22: 1020779.662 ops/s
Iteration  23: 1021761.915 ops/s
Iteration  24: 1013064.972 ops/s
Iteration  25: 1018281.113 ops/s
Iteration  26: 1017835.333 ops/s
Iteration  27: 1016329.838 ops/s
Iteration  28: 1022223.617 ops/s
Iteration  29: 1018430.731 ops/s
Iteration  30: 1023010.941 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_drop_throws":
  1017297.935 ±(99.9%) 3721.168 ops/s [Average]
  (min, avg, max) = (993794.968, 1017297.935, 1023982.747), stdev = 5569.669
  CI (99.9%): [1013576.767, 1021019.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_drop_throws  thrpt   30  1017297.935 ± 3721.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_each$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_each

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10064612.107 ops/s
# Warmup Iteration   2: 19083006.806 ops/s
# Warmup Iteration   3: 19411554.673 ops/s
# Warmup Iteration   4: 16503525.939 ops/s
# Warmup Iteration   5: 19521802.527 ops/s
# Warmup Iteration   6: 19488209.877 ops/s
# Warmup Iteration   7: 19495092.058 ops/s
# Warmup Iteration   8: 19525244.226 ops/s
# Warmup Iteration   9: 19527754.455 ops/s
# Warmup Iteration  10: 19469663.180 ops/s
# Warmup Iteration  11: 19445799.914 ops/s
# Warmup Iteration  12: 19495035.076 ops/s
# Warmup Iteration  13: 19471750.171 ops/s
# Warmup Iteration  14: 19513881.770 ops/s
# Warmup Iteration  15: 19453851.471 ops/s
# Warmup Iteration  16: 19380327.509 ops/s
# Warmup Iteration  17: 19466926.566 ops/s
# Warmup Iteration  18: 19379148.010 ops/s
# Warmup Iteration  19: 19461454.561 ops/s
# Warmup Iteration  20: 19501754.963 ops/s
# Warmup Iteration  21: 19419906.652 ops/s
# Warmup Iteration  22: 19518242.063 ops/s
# Warmup Iteration  23: 19560794.298 ops/s
# Warmup Iteration  24: 19470581.834 ops/s
# Warmup Iteration  25: 19103179.761 ops/s
# Warmup Iteration  26: 19478317.969 ops/s
# Warmup Iteration  27: 19573363.574 ops/s
# Warmup Iteration  28: 19521077.170 ops/s
# Warmup Iteration  29: 19523843.634 ops/s
# Warmup Iteration  30: 19450739.644 ops/s
Iteration   1: 19537017.580 ops/s
Iteration   2: 19484919.536 ops/s
Iteration   3: 19392443.026 ops/s
Iteration   4: 19456163.035 ops/s
Iteration   5: 19528929.756 ops/s
Iteration   6: 19513079.512 ops/s
Iteration   7: 19516034.086 ops/s
Iteration   8: 19477831.952 ops/s
Iteration   9: 19473886.028 ops/s
Iteration  10: 19496413.882 ops/s
Iteration  11: 19385740.384 ops/s
Iteration  12: 19478203.777 ops/s
Iteration  13: 19429591.914 ops/s
Iteration  14: 19488897.522 ops/s
Iteration  15: 19508511.738 ops/s
Iteration  16: 19489311.372 ops/s
Iteration  17: 19517409.489 ops/s
Iteration  18: 19567146.672 ops/s
Iteration  19: 19541648.511 ops/s
Iteration  20: 19441234.753 ops/s
Iteration  21: 19446026.461 ops/s
Iteration  22: 19522780.148 ops/s
Iteration  23: 19365127.609 ops/s
Iteration  24: 19530063.236 ops/s
Iteration  25: 19536665.132 ops/s
Iteration  26: 19519037.481 ops/s
Iteration  27: 19467292.364 ops/s
Iteration  28: 19519795.576 ops/s
Iteration  29: 19533802.988 ops/s
Iteration  30: 19526796.370 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_each":
  19489726.730 ±(99.9%) 32994.383 ops/s [Average]
  (min, avg, max) = (19365127.609, 19489726.730, 19567146.672), stdev = 49384.442
  CI (99.9%): [19456732.347, 19522721.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_each  thrpt   30  19489726.730 ± 32994.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33995.510 ops/s
# Warmup Iteration   2: 49311.571 ops/s
# Warmup Iteration   3: 69646.283 ops/s
# Warmup Iteration   4: 69338.006 ops/s
# Warmup Iteration   5: 69695.246 ops/s
# Warmup Iteration   6: 69854.569 ops/s
# Warmup Iteration   7: 69915.800 ops/s
# Warmup Iteration   8: 69746.607 ops/s
# Warmup Iteration   9: 58870.223 ops/s
# Warmup Iteration  10: 69931.679 ops/s
# Warmup Iteration  11: 69604.881 ops/s
# Warmup Iteration  12: 69871.658 ops/s
# Warmup Iteration  13: 70000.703 ops/s
# Warmup Iteration  14: 69864.411 ops/s
# Warmup Iteration  15: 69766.282 ops/s
# Warmup Iteration  16: 70093.533 ops/s
# Warmup Iteration  17: 70187.463 ops/s
# Warmup Iteration  18: 70091.748 ops/s
# Warmup Iteration  19: 69647.071 ops/s
# Warmup Iteration  20: 69534.515 ops/s
# Warmup Iteration  21: 69728.626 ops/s
# Warmup Iteration  22: 69867.305 ops/s
# Warmup Iteration  23: 69776.166 ops/s
# Warmup Iteration  24: 69712.294 ops/s
# Warmup Iteration  25: 69497.881 ops/s
# Warmup Iteration  26: 70109.517 ops/s
# Warmup Iteration  27: 69988.067 ops/s
# Warmup Iteration  28: 70065.667 ops/s
# Warmup Iteration  29: 70042.523 ops/s
# Warmup Iteration  30: 69999.959 ops/s
Iteration   1: 70130.641 ops/s
Iteration   2: 69010.421 ops/s
Iteration   3: 69694.297 ops/s
Iteration   4: 70041.971 ops/s
Iteration   5: 69836.813 ops/s
Iteration   6: 70057.718 ops/s
Iteration   7: 69771.369 ops/s
Iteration   8: 69680.117 ops/s
Iteration   9: 70099.061 ops/s
Iteration  10: 69804.760 ops/s
Iteration  11: 69892.908 ops/s
Iteration  12: 70093.167 ops/s
Iteration  13: 69608.975 ops/s
Iteration  14: 69982.576 ops/s
Iteration  15: 69997.320 ops/s
Iteration  16: 70406.449 ops/s
Iteration  17: 70131.445 ops/s
Iteration  18: 70469.439 ops/s
Iteration  19: 70420.272 ops/s
Iteration  20: 69915.342 ops/s
Iteration  21: 70092.118 ops/s
Iteration  22: 70196.201 ops/s
Iteration  23: 70111.969 ops/s
Iteration  24: 70245.267 ops/s
Iteration  25: 70181.756 ops/s
Iteration  26: 70392.624 ops/s
Iteration  27: 70121.221 ops/s
Iteration  28: 69954.603 ops/s
Iteration  29: 70304.539 ops/s
Iteration  30: 70120.747 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_equalsAndHashCode":
  70025.537 ±(99.9%) 195.985 ops/s [Average]
  (min, avg, max) = (69010.421, 70025.537, 70469.439), stdev = 293.341
  CI (99.9%): [69829.552, 70221.522] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt      Score     Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  70025.537 ± 195.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1299313.945 ops/s
# Warmup Iteration   2: 2696446.203 ops/s
# Warmup Iteration   3: 2879936.517 ops/s
# Warmup Iteration   4: 2916724.642 ops/s
# Warmup Iteration   5: 2383374.628 ops/s
# Warmup Iteration   6: 2894388.875 ops/s
# Warmup Iteration   7: 2912666.506 ops/s
# Warmup Iteration   8: 2917742.216 ops/s
# Warmup Iteration   9: 2919264.321 ops/s
# Warmup Iteration  10: 2912582.471 ops/s
# Warmup Iteration  11: 2919125.804 ops/s
# Warmup Iteration  12: 2883369.089 ops/s
# Warmup Iteration  13: 2916896.533 ops/s
# Warmup Iteration  14: 2911090.103 ops/s
# Warmup Iteration  15: 2913156.074 ops/s
# Warmup Iteration  16: 2920863.996 ops/s
# Warmup Iteration  17: 2904520.814 ops/s
# Warmup Iteration  18: 2917802.424 ops/s
# Warmup Iteration  19: 2904402.253 ops/s
# Warmup Iteration  20: 2895604.603 ops/s
# Warmup Iteration  21: 2904205.461 ops/s
# Warmup Iteration  22: 2910815.527 ops/s
# Warmup Iteration  23: 2914993.838 ops/s
# Warmup Iteration  24: 2915595.182 ops/s
# Warmup Iteration  25: 2913751.452 ops/s
# Warmup Iteration  26: 2909763.408 ops/s
# Warmup Iteration  27: 2914385.798 ops/s
# Warmup Iteration  28: 2918190.043 ops/s
# Warmup Iteration  29: 2912175.365 ops/s
# Warmup Iteration  30: 2913780.980 ops/s
Iteration   1: 2907279.887 ops/s
Iteration   2: 2905630.525 ops/s
Iteration   3: 2915366.329 ops/s
Iteration   4: 2897111.792 ops/s
Iteration   5: 2904871.932 ops/s
Iteration   6: 2894451.487 ops/s
Iteration   7: 2919190.435 ops/s
Iteration   8: 2914086.718 ops/s
Iteration   9: 2906390.481 ops/s
Iteration  10: 2913633.692 ops/s
Iteration  11: 2906030.057 ops/s
Iteration  12: 2906301.030 ops/s
Iteration  13: 2905960.840 ops/s
Iteration  14: 2919703.963 ops/s
Iteration  15: 2922931.407 ops/s
Iteration  16: 2899690.841 ops/s
Iteration  17: 2911020.023 ops/s
Iteration  18: 2920831.213 ops/s
Iteration  19: 2904154.127 ops/s
Iteration  20: 2923900.468 ops/s
Iteration  21: 2918848.854 ops/s
Iteration  22: 2908935.618 ops/s
Iteration  23: 2914459.183 ops/s
Iteration  24: 2914217.862 ops/s
Iteration  25: 2914190.241 ops/s
Iteration  26: 2924743.717 ops/s
Iteration  27: 2903264.852 ops/s
Iteration  28: 2911013.634 ops/s
Iteration  29: 2914185.488 ops/s
Iteration  30: 2915695.951 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_flatCollect":
  2911269.755 ±(99.9%) 5228.519 ops/s [Average]
  (min, avg, max) = (2894451.487, 2911269.755, 2924743.717), stdev = 7825.801
  CI (99.9%): [2906041.236, 2916498.274] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_flatCollect  thrpt   30  2911269.755 ± 5228.519  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1335355.511 ops/s
# Warmup Iteration   2: 3295268.996 ops/s
# Warmup Iteration   3: 3252782.833 ops/s
# Warmup Iteration   4: 2689331.883 ops/s
# Warmup Iteration   5: 3240098.641 ops/s
# Warmup Iteration   6: 3246369.444 ops/s
# Warmup Iteration   7: 3245604.278 ops/s
# Warmup Iteration   8: 3241415.912 ops/s
# Warmup Iteration   9: 3242293.315 ops/s
# Warmup Iteration  10: 3246011.568 ops/s
# Warmup Iteration  11: 3258753.673 ops/s
# Warmup Iteration  12: 3244178.929 ops/s
# Warmup Iteration  13: 3253244.566 ops/s
# Warmup Iteration  14: 3249428.566 ops/s
# Warmup Iteration  15: 3244387.310 ops/s
# Warmup Iteration  16: 3247817.443 ops/s
# Warmup Iteration  17: 3276394.440 ops/s
# Warmup Iteration  18: 3249346.005 ops/s
# Warmup Iteration  19: 3271110.001 ops/s
# Warmup Iteration  20: 3247590.773 ops/s
# Warmup Iteration  21: 3254634.843 ops/s
# Warmup Iteration  22: 3266601.307 ops/s
# Warmup Iteration  23: 3269985.609 ops/s
# Warmup Iteration  24: 3272702.915 ops/s
# Warmup Iteration  25: 3260986.381 ops/s
# Warmup Iteration  26: 3258974.189 ops/s
# Warmup Iteration  27: 3266561.537 ops/s
# Warmup Iteration  28: 3264795.589 ops/s
# Warmup Iteration  29: 3252726.873 ops/s
# Warmup Iteration  30: 3275431.305 ops/s
Iteration   1: 3265880.619 ops/s
Iteration   2: 3248483.302 ops/s
Iteration   3: 3277449.422 ops/s
Iteration   4: 3272513.909 ops/s
Iteration   5: 3279258.792 ops/s
Iteration   6: 3283025.420 ops/s
Iteration   7: 3278630.978 ops/s
Iteration   8: 3257453.545 ops/s
Iteration   9: 3261127.193 ops/s
Iteration  10: 3264454.643 ops/s
Iteration  11: 3272074.685 ops/s
Iteration  12: 3260744.136 ops/s
Iteration  13: 3283045.855 ops/s
Iteration  14: 3276363.895 ops/s
Iteration  15: 3266606.227 ops/s
Iteration  16: 3278872.965 ops/s
Iteration  17: 3261193.264 ops/s
Iteration  18: 3254305.416 ops/s
Iteration  19: 3272240.652 ops/s
Iteration  20: 3275777.285 ops/s
Iteration  21: 3266150.565 ops/s
Iteration  22: 3251556.456 ops/s
Iteration  23: 3263543.708 ops/s
Iteration  24: 3282959.002 ops/s
Iteration  25: 3259903.214 ops/s
Iteration  26: 3260500.129 ops/s
Iteration  27: 3278093.249 ops/s
Iteration  28: 3282742.499 ops/s
Iteration  29: 3279791.013 ops/s
Iteration  30: 3283127.312 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_flatCollectWith":
  3269928.978 ±(99.9%) 6956.987 ops/s [Average]
  (min, avg, max) = (3248483.302, 3269928.978, 3283127.312), stdev = 10412.891
  CI (99.9%): [3262971.992, 3276885.965] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  3269928.978 ± 6956.987  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1871725.938 ops/s
# Warmup Iteration   2: 4574242.324 ops/s
# Warmup Iteration   3: 4555649.607 ops/s
# Warmup Iteration   4: 4030633.802 ops/s
# Warmup Iteration   5: 4732653.394 ops/s
# Warmup Iteration   6: 4712695.176 ops/s
# Warmup Iteration   7: 4734395.714 ops/s
# Warmup Iteration   8: 4740171.276 ops/s
# Warmup Iteration   9: 4714268.264 ops/s
# Warmup Iteration  10: 4721016.177 ops/s
# Warmup Iteration  11: 4734334.978 ops/s
# Warmup Iteration  12: 4724316.201 ops/s
# Warmup Iteration  13: 4724508.525 ops/s
# Warmup Iteration  14: 4699626.788 ops/s
# Warmup Iteration  15: 4697906.142 ops/s
# Warmup Iteration  16: 4704133.634 ops/s
# Warmup Iteration  17: 4712706.978 ops/s
# Warmup Iteration  18: 4724138.614 ops/s
# Warmup Iteration  19: 4715084.107 ops/s
# Warmup Iteration  20: 4717958.954 ops/s
# Warmup Iteration  21: 4733357.327 ops/s
# Warmup Iteration  22: 4710560.222 ops/s
# Warmup Iteration  23: 4717826.739 ops/s
# Warmup Iteration  24: 4705048.887 ops/s
# Warmup Iteration  25: 4714076.421 ops/s
# Warmup Iteration  26: 4721017.716 ops/s
# Warmup Iteration  27: 4717333.436 ops/s
# Warmup Iteration  28: 4721853.374 ops/s
# Warmup Iteration  29: 4728384.465 ops/s
# Warmup Iteration  30: 4712989.964 ops/s
Iteration   1: 4739393.627 ops/s
Iteration   2: 4728130.610 ops/s
Iteration   3: 4730844.732 ops/s
Iteration   4: 4733844.138 ops/s
Iteration   5: 4735817.545 ops/s
Iteration   6: 4708226.390 ops/s
Iteration   7: 4731092.593 ops/s
Iteration   8: 4728159.794 ops/s
Iteration   9: 4742515.746 ops/s
Iteration  10: 4734794.587 ops/s
Iteration  11: 4705808.223 ops/s
Iteration  12: 4701422.823 ops/s
Iteration  13: 4689888.432 ops/s
Iteration  14: 4731437.421 ops/s
Iteration  15: 4731034.766 ops/s
Iteration  16: 4723394.700 ops/s
Iteration  17: 4717266.584 ops/s
Iteration  18: 4720552.642 ops/s
Iteration  19: 4709094.071 ops/s
Iteration  20: 4739956.320 ops/s
Iteration  21: 4737509.138 ops/s
Iteration  22: 4727266.800 ops/s
Iteration  23: 4705895.610 ops/s
Iteration  24: 4699864.388 ops/s
Iteration  25: 4724490.715 ops/s
Iteration  26: 4715068.425 ops/s
Iteration  27: 4737156.560 ops/s
Iteration  28: 4730295.013 ops/s
Iteration  29: 4724043.204 ops/s
Iteration  30: 4739566.364 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_flatCollectWithTarget":
  4724127.732 ±(99.9%) 9279.803 ops/s [Average]
  (min, avg, max) = (4689888.432, 4724127.732, 4742515.746), stdev = 13889.573
  CI (99.9%): [4714847.929, 4733407.535] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  4724127.732 ± 9279.803  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10215147.760 ops/s
# Warmup Iteration   2: 20646123.823 ops/s
# Warmup Iteration   3: 20364690.009 ops/s
# Warmup Iteration   4: 17358123.400 ops/s
# Warmup Iteration   5: 20499737.587 ops/s
# Warmup Iteration   6: 20522396.715 ops/s
# Warmup Iteration   7: 19910486.942 ops/s
# Warmup Iteration   8: 20526838.750 ops/s
# Warmup Iteration   9: 20417091.090 ops/s
# Warmup Iteration  10: 20479846.728 ops/s
# Warmup Iteration  11: 20413743.436 ops/s
# Warmup Iteration  12: 20464419.259 ops/s
# Warmup Iteration  13: 20415093.865 ops/s
# Warmup Iteration  14: 20484016.499 ops/s
# Warmup Iteration  15: 20438753.333 ops/s
# Warmup Iteration  16: 20529960.879 ops/s
# Warmup Iteration  17: 20475306.999 ops/s
# Warmup Iteration  18: 20448638.251 ops/s
# Warmup Iteration  19: 20486971.604 ops/s
# Warmup Iteration  20: 20445014.311 ops/s
# Warmup Iteration  21: 20368988.475 ops/s
# Warmup Iteration  22: 20428924.079 ops/s
# Warmup Iteration  23: 20431089.337 ops/s
# Warmup Iteration  24: 20455913.227 ops/s
# Warmup Iteration  25: 20519253.887 ops/s
# Warmup Iteration  26: 20489797.332 ops/s
# Warmup Iteration  27: 20481875.857 ops/s
# Warmup Iteration  28: 20451325.381 ops/s
# Warmup Iteration  29: 20476992.882 ops/s
# Warmup Iteration  30: 20501691.869 ops/s
Iteration   1: 20482619.361 ops/s
Iteration   2: 20453319.050 ops/s
Iteration   3: 20495783.731 ops/s
Iteration   4: 20485487.368 ops/s
Iteration   5: 20433806.497 ops/s
Iteration   6: 20498188.121 ops/s
Iteration   7: 20357501.367 ops/s
Iteration   8: 20380087.511 ops/s
Iteration   9: 18997164.837 ops/s
Iteration  10: 20518125.477 ops/s
Iteration  11: 20564775.974 ops/s
Iteration  12: 20490491.895 ops/s
Iteration  13: 20500033.925 ops/s
Iteration  14: 20402397.267 ops/s
Iteration  15: 20475755.672 ops/s
Iteration  16: 20395974.562 ops/s
Iteration  17: 20355987.138 ops/s
Iteration  18: 20557692.605 ops/s
Iteration  19: 20512678.261 ops/s
Iteration  20: 20542060.168 ops/s
Iteration  21: 20439850.698 ops/s
Iteration  22: 20492897.987 ops/s
Iteration  23: 20490899.152 ops/s
Iteration  24: 20457394.927 ops/s
Iteration  25: 20514751.596 ops/s
Iteration  26: 20492081.120 ops/s
Iteration  27: 20525761.964 ops/s
Iteration  28: 20393530.832 ops/s
Iteration  29: 20148571.156 ops/s
Iteration  30: 20445477.116 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEach":
  20410038.245 ±(99.9%) 186237.429 ops/s [Average]
  (min, avg, max) = (18997164.837, 20410038.245, 20564775.974), stdev = 278751.437
  CI (99.9%): [20223800.816, 20596275.673] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_forEach  thrpt   30  20410038.245 ± 186237.429  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 299667.250 ops/s
# Warmup Iteration   2: 322165.313 ops/s
# Warmup Iteration   3: 382314.902 ops/s
# Warmup Iteration   4: 406585.261 ops/s
# Warmup Iteration   5: 406164.953 ops/s
# Warmup Iteration   6: 404081.349 ops/s
# Warmup Iteration   7: 408127.145 ops/s
# Warmup Iteration   8: 406951.834 ops/s
# Warmup Iteration   9: 404804.565 ops/s
# Warmup Iteration  10: 405449.053 ops/s
# Warmup Iteration  11: 407005.958 ops/s
# Warmup Iteration  12: 406401.446 ops/s
# Warmup Iteration  13: 393856.557 ops/s
# Warmup Iteration  14: 357510.248 ops/s
# Warmup Iteration  15: 407254.975 ops/s
# Warmup Iteration  16: 405620.098 ops/s
# Warmup Iteration  17: 424851.360 ops/s
# Warmup Iteration  18: 427270.515 ops/s
# Warmup Iteration  19: 425583.233 ops/s
# Warmup Iteration  20: 427165.202 ops/s
# Warmup Iteration  21: 426014.137 ops/s
# Warmup Iteration  22: 422529.786 ops/s
# Warmup Iteration  23: 422659.195 ops/s
# Warmup Iteration  24: 425525.026 ops/s
# Warmup Iteration  25: 423009.242 ops/s
# Warmup Iteration  26: 425382.756 ops/s
# Warmup Iteration  27: 424118.377 ops/s
# Warmup Iteration  28: 425737.873 ops/s
# Warmup Iteration  29: 427095.040 ops/s
# Warmup Iteration  30: 425487.477 ops/s
Iteration   1: 425230.241 ops/s
Iteration   2: 427300.393 ops/s
Iteration   3: 427995.528 ops/s
Iteration   4: 425959.437 ops/s
Iteration   5: 428012.763 ops/s
Iteration   6: 425677.261 ops/s
Iteration   7: 427281.160 ops/s
Iteration   8: 425062.800 ops/s
Iteration   9: 424166.286 ops/s
Iteration  10: 425544.868 ops/s
Iteration  11: 427174.622 ops/s
Iteration  12: 426823.160 ops/s
Iteration  13: 426147.410 ops/s
Iteration  14: 426394.198 ops/s
Iteration  15: 424443.141 ops/s
Iteration  16: 422723.259 ops/s
Iteration  17: 422875.711 ops/s
Iteration  18: 423540.421 ops/s
Iteration  19: 422360.575 ops/s
Iteration  20: 424913.968 ops/s
Iteration  21: 426044.256 ops/s
Iteration  22: 420271.462 ops/s
Iteration  23: 425313.309 ops/s
Iteration  24: 422637.055 ops/s
Iteration  25: 424701.558 ops/s
Iteration  26: 423496.284 ops/s
Iteration  27: 424791.781 ops/s
Iteration  28: 424769.885 ops/s
Iteration  29: 424693.814 ops/s
Iteration  30: 423021.948 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachFromTo":
  424978.952 ±(99.9%) 1221.703 ops/s [Average]
  (min, avg, max) = (420271.462, 424978.952, 428012.763), stdev = 1828.588
  CI (99.9%): [423757.249, 426200.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  424978.952 ± 1221.703  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7021101.924 ops/s
# Warmup Iteration   2: 14508720.643 ops/s
# Warmup Iteration   3: 15381054.936 ops/s
# Warmup Iteration   4: 13012210.355 ops/s
# Warmup Iteration   5: 15434517.095 ops/s
# Warmup Iteration   6: 15391806.855 ops/s
# Warmup Iteration   7: 15423401.741 ops/s
# Warmup Iteration   8: 15364974.258 ops/s
# Warmup Iteration   9: 15477894.106 ops/s
# Warmup Iteration  10: 15512002.304 ops/s
# Warmup Iteration  11: 15494310.391 ops/s
# Warmup Iteration  12: 15449440.291 ops/s
# Warmup Iteration  13: 15407715.858 ops/s
# Warmup Iteration  14: 15453523.420 ops/s
# Warmup Iteration  15: 15411826.815 ops/s
# Warmup Iteration  16: 15394336.387 ops/s
# Warmup Iteration  17: 15465826.814 ops/s
# Warmup Iteration  18: 15414451.443 ops/s
# Warmup Iteration  19: 15364677.338 ops/s
# Warmup Iteration  20: 15479012.908 ops/s
# Warmup Iteration  21: 15454071.130 ops/s
# Warmup Iteration  22: 15480702.236 ops/s
# Warmup Iteration  23: 15470034.359 ops/s
# Warmup Iteration  24: 15413234.488 ops/s
# Warmup Iteration  25: 15443588.949 ops/s
# Warmup Iteration  26: 15451861.994 ops/s
# Warmup Iteration  27: 15437120.667 ops/s
# Warmup Iteration  28: 15407355.977 ops/s
# Warmup Iteration  29: 15214479.870 ops/s
# Warmup Iteration  30: 15442999.473 ops/s
Iteration   1: 15504327.288 ops/s
Iteration   2: 15393904.384 ops/s
Iteration   3: 15333718.186 ops/s
Iteration   4: 15364267.451 ops/s
Iteration   5: 15479290.965 ops/s
Iteration   6: 15424796.303 ops/s
Iteration   7: 15275147.104 ops/s
Iteration   8: 15463743.909 ops/s
Iteration   9: 15466766.689 ops/s
Iteration  10: 15445435.564 ops/s
Iteration  11: 15340632.336 ops/s
Iteration  12: 15500259.350 ops/s
Iteration  13: 15501256.731 ops/s
Iteration  14: 15487909.459 ops/s
Iteration  15: 15487154.575 ops/s
Iteration  16: 15469834.347 ops/s
Iteration  17: 15483427.416 ops/s
Iteration  18: 15453277.083 ops/s
Iteration  19: 15497233.386 ops/s
Iteration  20: 15473653.306 ops/s
Iteration  21: 15498517.696 ops/s
Iteration  22: 15467899.079 ops/s
Iteration  23: 15510028.262 ops/s
Iteration  24: 15536524.287 ops/s
Iteration  25: 15510248.660 ops/s
Iteration  26: 15481224.604 ops/s
Iteration  27: 15518499.356 ops/s
Iteration  28: 15483016.557 ops/s
Iteration  29: 15517956.154 ops/s
Iteration  30: 15444128.785 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachWith":
  15460469.309 ±(99.9%) 41014.290 ops/s [Average]
  (min, avg, max) = (15275147.104, 15460469.309, 15536524.287), stdev = 61388.263
  CI (99.9%): [15419455.019, 15501483.599] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachWith  thrpt   30  15460469.309 ± 41014.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11812986.418 ops/s
# Warmup Iteration   2: 24264450.591 ops/s
# Warmup Iteration   3: 24581884.493 ops/s
# Warmup Iteration   4: 20871937.994 ops/s
# Warmup Iteration   5: 24574028.702 ops/s
# Warmup Iteration   6: 24587127.006 ops/s
# Warmup Iteration   7: 24605700.618 ops/s
# Warmup Iteration   8: 24648426.164 ops/s
# Warmup Iteration   9: 24615948.560 ops/s
# Warmup Iteration  10: 24623428.986 ops/s
# Warmup Iteration  11: 24648051.989 ops/s
# Warmup Iteration  12: 24560841.172 ops/s
# Warmup Iteration  13: 24642315.659 ops/s
# Warmup Iteration  14: 24631001.785 ops/s
# Warmup Iteration  15: 24634321.723 ops/s
# Warmup Iteration  16: 24547778.856 ops/s
# Warmup Iteration  17: 24632272.992 ops/s
# Warmup Iteration  18: 24501330.563 ops/s
# Warmup Iteration  19: 24588931.731 ops/s
# Warmup Iteration  20: 24543971.152 ops/s
# Warmup Iteration  21: 24591614.243 ops/s
# Warmup Iteration  22: 24652600.701 ops/s
# Warmup Iteration  23: 24585788.843 ops/s
# Warmup Iteration  24: 24583842.047 ops/s
# Warmup Iteration  25: 24642613.146 ops/s
# Warmup Iteration  26: 24530461.098 ops/s
# Warmup Iteration  27: 24553265.586 ops/s
# Warmup Iteration  28: 24512558.232 ops/s
# Warmup Iteration  29: 24580585.582 ops/s
# Warmup Iteration  30: 24573164.548 ops/s
Iteration   1: 24660833.871 ops/s
Iteration   2: 24616436.254 ops/s
Iteration   3: 24655749.192 ops/s
Iteration   4: 24634676.276 ops/s
Iteration   5: 24691240.927 ops/s
Iteration   6: 24713406.910 ops/s
Iteration   7: 24681001.981 ops/s
Iteration   8: 24520933.865 ops/s
Iteration   9: 24474061.880 ops/s
Iteration  10: 24592934.336 ops/s
Iteration  11: 24535135.018 ops/s
Iteration  12: 24738847.481 ops/s
Iteration  13: 24438456.501 ops/s
Iteration  14: 24585957.573 ops/s
Iteration  15: 24479251.350 ops/s
Iteration  16: 24573511.224 ops/s
Iteration  17: 24526238.819 ops/s
Iteration  18: 24653694.860 ops/s
Iteration  19: 24569879.145 ops/s
Iteration  20: 24581883.421 ops/s
Iteration  21: 24574942.260 ops/s
Iteration  22: 24509395.110 ops/s
Iteration  23: 24639466.606 ops/s
Iteration  24: 24442385.099 ops/s
Iteration  25: 24580199.448 ops/s
Iteration  26: 24611545.874 ops/s
Iteration  27: 24522241.976 ops/s
Iteration  28: 24592387.388 ops/s
Iteration  29: 24520075.037 ops/s
Iteration  30: 24560917.314 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachWithIndex":
  24582589.567 ±(99.9%) 51677.373 ops/s [Average]
  (min, avg, max) = (24438456.501, 24582589.567, 24738847.481), stdev = 77348.264
  CI (99.9%): [24530912.194, 24634266.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  24582589.567 ± 51677.373  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 292201.533 ops/s
# Warmup Iteration   2: 313117.299 ops/s
# Warmup Iteration   3: 373444.081 ops/s
# Warmup Iteration   4: 395114.729 ops/s
# Warmup Iteration   5: 398394.244 ops/s
# Warmup Iteration   6: 393745.444 ops/s
# Warmup Iteration   7: 397347.009 ops/s
# Warmup Iteration   8: 397838.796 ops/s
# Warmup Iteration   9: 398564.476 ops/s
# Warmup Iteration  10: 396920.558 ops/s
# Warmup Iteration  11: 396852.497 ops/s
# Warmup Iteration  12: 396515.064 ops/s
# Warmup Iteration  13: 386058.951 ops/s
# Warmup Iteration  14: 347169.285 ops/s
# Warmup Iteration  15: 398599.748 ops/s
# Warmup Iteration  16: 397038.368 ops/s
# Warmup Iteration  17: 417482.011 ops/s
# Warmup Iteration  18: 418817.921 ops/s
# Warmup Iteration  19: 419000.482 ops/s
# Warmup Iteration  20: 420040.361 ops/s
# Warmup Iteration  21: 417546.418 ops/s
# Warmup Iteration  22: 418495.513 ops/s
# Warmup Iteration  23: 417684.909 ops/s
# Warmup Iteration  24: 418020.454 ops/s
# Warmup Iteration  25: 418358.038 ops/s
# Warmup Iteration  26: 419065.963 ops/s
# Warmup Iteration  27: 418720.857 ops/s
# Warmup Iteration  28: 417331.187 ops/s
# Warmup Iteration  29: 416183.426 ops/s
# Warmup Iteration  30: 416957.264 ops/s
Iteration   1: 416234.435 ops/s
Iteration   2: 417755.269 ops/s
Iteration   3: 414257.194 ops/s
Iteration   4: 418558.937 ops/s
Iteration   5: 419222.160 ops/s
Iteration   6: 418529.276 ops/s
Iteration   7: 419748.511 ops/s
Iteration   8: 416252.183 ops/s
Iteration   9: 418978.195 ops/s
Iteration  10: 417057.619 ops/s
Iteration  11: 414641.023 ops/s
Iteration  12: 416514.184 ops/s
Iteration  13: 418106.650 ops/s
Iteration  14: 418665.619 ops/s
Iteration  15: 417347.433 ops/s
Iteration  16: 418535.065 ops/s
Iteration  17: 419827.273 ops/s
Iteration  18: 417767.993 ops/s
Iteration  19: 417242.431 ops/s
Iteration  20: 418841.082 ops/s
Iteration  21: 420090.783 ops/s
Iteration  22: 416708.681 ops/s
Iteration  23: 418319.229 ops/s
Iteration  24: 415055.904 ops/s
Iteration  25: 417858.601 ops/s
Iteration  26: 418609.512 ops/s
Iteration  27: 417066.848 ops/s
Iteration  28: 419202.955 ops/s
Iteration  29: 419124.383 ops/s
Iteration  30: 416795.784 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo":
  417763.840 ±(99.9%) 1001.164 ops/s [Average]
  (min, avg, max) = (414257.194, 417763.840, 420090.783), stdev = 1498.495
  CI (99.9%): [416762.676, 418765.004] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo  thrpt   30  417763.840 ± 1001.164  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 45095510.922 ops/s
# Warmup Iteration   2: 84129157.324 ops/s
# Warmup Iteration   3: 68840089.600 ops/s
# Warmup Iteration   4: 81253653.395 ops/s
# Warmup Iteration   5: 81315968.345 ops/s
# Warmup Iteration   6: 80969738.586 ops/s
# Warmup Iteration   7: 81120442.949 ops/s
# Warmup Iteration   8: 81076838.629 ops/s
# Warmup Iteration   9: 80981595.340 ops/s
# Warmup Iteration  10: 80772144.592 ops/s
# Warmup Iteration  11: 80617204.946 ops/s
# Warmup Iteration  12: 80818576.880 ops/s
# Warmup Iteration  13: 80864241.506 ops/s
# Warmup Iteration  14: 80323231.516 ops/s
# Warmup Iteration  15: 80393011.106 ops/s
# Warmup Iteration  16: 80444465.541 ops/s
# Warmup Iteration  17: 80310897.245 ops/s
# Warmup Iteration  18: 80845304.325 ops/s
# Warmup Iteration  19: 80757363.415 ops/s
# Warmup Iteration  20: 81028365.478 ops/s
# Warmup Iteration  21: 80594469.349 ops/s
# Warmup Iteration  22: 81023879.669 ops/s
# Warmup Iteration  23: 81127394.642 ops/s
# Warmup Iteration  24: 81070184.373 ops/s
# Warmup Iteration  25: 81096805.187 ops/s
# Warmup Iteration  26: 81064065.299 ops/s
# Warmup Iteration  27: 80953283.616 ops/s
# Warmup Iteration  28: 80964277.249 ops/s
# Warmup Iteration  29: 80918317.630 ops/s
# Warmup Iteration  30: 80668621.684 ops/s
Iteration   1: 80740077.161 ops/s
Iteration   2: 80637067.941 ops/s
Iteration   3: 81218405.395 ops/s
Iteration   4: 80558219.753 ops/s
Iteration   5: 80978837.989 ops/s
Iteration   6: 80882187.791 ops/s
Iteration   7: 81455542.379 ops/s
Iteration   8: 81352649.909 ops/s
Iteration   9: 81176242.415 ops/s
Iteration  10: 81031572.612 ops/s
Iteration  11: 80653610.344 ops/s
Iteration  12: 80952334.643 ops/s
Iteration  13: 80460008.551 ops/s
Iteration  14: 80930420.420 ops/s
Iteration  15: 81083697.410 ops/s
Iteration  16: 80818390.155 ops/s
Iteration  17: 80747831.045 ops/s
Iteration  18: 80890156.530 ops/s
Iteration  19: 80901926.405 ops/s
Iteration  20: 80832992.023 ops/s
Iteration  21: 80158079.593 ops/s
Iteration  22: 81024631.243 ops/s
Iteration  23: 80976492.012 ops/s
Iteration  24: 81079358.756 ops/s
Iteration  25: 81015882.022 ops/s
Iteration  26: 80978393.570 ops/s
Iteration  27: 81046295.342 ops/s
Iteration  28: 80328857.582 ops/s
Iteration  29: 81166019.262 ops/s
Iteration  30: 80653308.684 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_forLoop":
  80890982.965 ±(99.9%) 190312.372 ops/s [Average]
  (min, avg, max) = (80158079.593, 80890982.965, 81455542.379), stdev = 284850.620
  CI (99.9%): [80700670.593, 81081295.336] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_forLoop  thrpt   30  80890982.965 ± 190312.372  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 370988.330 ops/s
# Warmup Iteration   2: 386599.577 ops/s
# Warmup Iteration   3: 466821.384 ops/s
# Warmup Iteration   4: 483305.254 ops/s
# Warmup Iteration   5: 485450.146 ops/s
# Warmup Iteration   6: 483494.653 ops/s
# Warmup Iteration   7: 484962.034 ops/s
# Warmup Iteration   8: 484223.342 ops/s
# Warmup Iteration   9: 482740.172 ops/s
# Warmup Iteration  10: 483350.426 ops/s
# Warmup Iteration  11: 484635.873 ops/s
# Warmup Iteration  12: 482723.441 ops/s
# Warmup Iteration  13: 426877.586 ops/s
# Warmup Iteration  14: 470028.513 ops/s
# Warmup Iteration  15: 485952.423 ops/s
# Warmup Iteration  16: 483871.347 ops/s
# Warmup Iteration  17: 507876.077 ops/s
# Warmup Iteration  18: 510517.355 ops/s
# Warmup Iteration  19: 507953.765 ops/s
# Warmup Iteration  20: 509678.949 ops/s
# Warmup Iteration  21: 511851.084 ops/s
# Warmup Iteration  22: 510545.228 ops/s
# Warmup Iteration  23: 512042.253 ops/s
# Warmup Iteration  24: 514155.937 ops/s
# Warmup Iteration  25: 511481.476 ops/s
# Warmup Iteration  26: 511898.817 ops/s
# Warmup Iteration  27: 512723.933 ops/s
# Warmup Iteration  28: 511601.133 ops/s
# Warmup Iteration  29: 512125.523 ops/s
# Warmup Iteration  30: 512040.939 ops/s
Iteration   1: 511578.562 ops/s
Iteration   2: 510708.374 ops/s
Iteration   3: 512795.812 ops/s
Iteration   4: 514682.001 ops/s
Iteration   5: 514635.723 ops/s
Iteration   6: 507586.522 ops/s
Iteration   7: 510413.609 ops/s
Iteration   8: 508263.848 ops/s
Iteration   9: 510243.231 ops/s
Iteration  10: 513041.927 ops/s
Iteration  11: 509636.131 ops/s
Iteration  12: 509468.017 ops/s
Iteration  13: 508716.108 ops/s
Iteration  14: 511349.096 ops/s
Iteration  15: 508382.783 ops/s
Iteration  16: 511921.108 ops/s
Iteration  17: 514209.798 ops/s
Iteration  18: 511601.613 ops/s
Iteration  19: 513532.069 ops/s
Iteration  20: 509284.102 ops/s
Iteration  21: 510727.799 ops/s
Iteration  22: 511906.734 ops/s
Iteration  23: 513984.118 ops/s
Iteration  24: 508020.954 ops/s
Iteration  25: 511676.965 ops/s
Iteration  26: 511848.515 ops/s
Iteration  27: 510579.557 ops/s
Iteration  28: 509312.623 ops/s
Iteration  29: 512960.718 ops/s
Iteration  30: 513958.212 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_get":
  511234.221 ±(99.9%) 1391.174 ops/s [Average]
  (min, avg, max) = (507586.522, 511234.221, 514682.001), stdev = 2082.243
  CI (99.9%): [509843.047, 512625.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_get  thrpt   30  511234.221 ± 1391.174  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 43636917.428 ops/s
# Warmup Iteration   2: 86638394.277 ops/s
# Warmup Iteration   3: 77492775.522 ops/s
# Warmup Iteration   4: 90455441.315 ops/s
# Warmup Iteration   5: 90176490.773 ops/s
# Warmup Iteration   6: 90273794.098 ops/s
# Warmup Iteration   7: 90570181.478 ops/s
# Warmup Iteration   8: 90626152.652 ops/s
# Warmup Iteration   9: 90480566.968 ops/s
# Warmup Iteration  10: 90542827.189 ops/s
# Warmup Iteration  11: 90607142.212 ops/s
# Warmup Iteration  12: 90583406.810 ops/s
# Warmup Iteration  13: 90968589.308 ops/s
# Warmup Iteration  14: 90053788.395 ops/s
# Warmup Iteration  15: 90932700.382 ops/s
# Warmup Iteration  16: 90982226.432 ops/s
# Warmup Iteration  17: 90838677.925 ops/s
# Warmup Iteration  18: 90745351.965 ops/s
# Warmup Iteration  19: 90708340.435 ops/s
# Warmup Iteration  20: 90711728.978 ops/s
# Warmup Iteration  21: 90646675.263 ops/s
# Warmup Iteration  22: 90654548.805 ops/s
# Warmup Iteration  23: 90472939.093 ops/s
# Warmup Iteration  24: 90644716.571 ops/s
# Warmup Iteration  25: 90730337.350 ops/s
# Warmup Iteration  26: 90582178.276 ops/s
# Warmup Iteration  27: 90824705.955 ops/s
# Warmup Iteration  28: 90354042.477 ops/s
# Warmup Iteration  29: 90569068.125 ops/s
# Warmup Iteration  30: 90561755.708 ops/s
Iteration   1: 90887156.412 ops/s
Iteration   2: 90613836.321 ops/s
Iteration   3: 90806810.662 ops/s
Iteration   4: 90514824.473 ops/s
Iteration   5: 90510270.178 ops/s
Iteration   6: 90926609.468 ops/s
Iteration   7: 90928265.454 ops/s
Iteration   8: 90975627.898 ops/s
Iteration   9: 90399059.107 ops/s
Iteration  10: 90261397.143 ops/s
Iteration  11: 91193048.394 ops/s
Iteration  12: 90351172.092 ops/s
Iteration  13: 90307771.041 ops/s
Iteration  14: 90194843.770 ops/s
Iteration  15: 90662964.501 ops/s
Iteration  16: 90427687.155 ops/s
Iteration  17: 90420823.905 ops/s
Iteration  18: 90821928.479 ops/s
Iteration  19: 91056727.027 ops/s
Iteration  20: 90805149.430 ops/s
Iteration  21: 91082983.722 ops/s
Iteration  22: 90388672.289 ops/s
Iteration  23: 90366229.679 ops/s
Iteration  24: 90665462.597 ops/s
Iteration  25: 90133921.125 ops/s
Iteration  26: 90858457.223 ops/s
Iteration  27: 90464617.610 ops/s
Iteration  28: 90270737.419 ops/s
Iteration  29: 90800236.007 ops/s
Iteration  30: 90254387.249 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_getFirst":
  90611722.594 ±(99.9%) 199402.653 ops/s [Average]
  (min, avg, max) = (90133921.125, 90611722.594, 91193048.394), stdev = 298456.527
  CI (99.9%): [90412319.941, 90811125.248] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_getFirst  thrpt   30  90611722.594 ± 199402.653  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44411870.933 ops/s
# Warmup Iteration   2: 84583613.935 ops/s
# Warmup Iteration   3: 76700048.533 ops/s
# Warmup Iteration   4: 89744400.497 ops/s
# Warmup Iteration   5: 89972439.863 ops/s
# Warmup Iteration   6: 90123620.427 ops/s
# Warmup Iteration   7: 89992294.012 ops/s
# Warmup Iteration   8: 89880774.491 ops/s
# Warmup Iteration   9: 89515711.013 ops/s
# Warmup Iteration  10: 89881783.892 ops/s
# Warmup Iteration  11: 89720094.434 ops/s
# Warmup Iteration  12: 89606484.991 ops/s
# Warmup Iteration  13: 89799261.641 ops/s
# Warmup Iteration  14: 89754542.248 ops/s
# Warmup Iteration  15: 89808674.992 ops/s
# Warmup Iteration  16: 90286272.586 ops/s
# Warmup Iteration  17: 89626450.644 ops/s
# Warmup Iteration  18: 89802842.875 ops/s
# Warmup Iteration  19: 89938761.232 ops/s
# Warmup Iteration  20: 89405876.398 ops/s
# Warmup Iteration  21: 89870083.205 ops/s
# Warmup Iteration  22: 90078217.261 ops/s
# Warmup Iteration  23: 90128697.541 ops/s
# Warmup Iteration  24: 90012072.792 ops/s
# Warmup Iteration  25: 90099558.582 ops/s
# Warmup Iteration  26: 89836093.296 ops/s
# Warmup Iteration  27: 89614175.943 ops/s
# Warmup Iteration  28: 90315006.003 ops/s
# Warmup Iteration  29: 89560401.166 ops/s
# Warmup Iteration  30: 90105738.280 ops/s
Iteration   1: 89868349.064 ops/s
Iteration   2: 89725341.865 ops/s
Iteration   3: 90351154.148 ops/s
Iteration   4: 89833998.881 ops/s
Iteration   5: 89606073.128 ops/s
Iteration   6: 89951964.700 ops/s
Iteration   7: 89864895.118 ops/s
Iteration   8: 89894047.056 ops/s
Iteration   9: 89811954.514 ops/s
Iteration  10: 89340002.527 ops/s
Iteration  11: 90431427.151 ops/s
Iteration  12: 89789339.033 ops/s
Iteration  13: 90025365.578 ops/s
Iteration  14: 89367147.587 ops/s
Iteration  15: 90052440.030 ops/s
Iteration  16: 90210026.431 ops/s
Iteration  17: 90107517.088 ops/s
Iteration  18: 89533702.651 ops/s
Iteration  19: 89877385.413 ops/s
Iteration  20: 89905146.568 ops/s
Iteration  21: 89507507.297 ops/s
Iteration  22: 89847223.861 ops/s
Iteration  23: 90016405.463 ops/s
Iteration  24: 89574167.490 ops/s
Iteration  25: 89405915.856 ops/s
Iteration  26: 90065299.822 ops/s
Iteration  27: 90124951.737 ops/s
Iteration  28: 90069193.585 ops/s
Iteration  29: 89906202.606 ops/s
Iteration  30: 89463439.231 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_getLast":
  89850919.516 ±(99.9%) 187668.617 ops/s [Average]
  (min, avg, max) = (89340002.527, 89850919.516, 90431427.151), stdev = 280893.573
  CI (99.9%): [89663250.899, 90038588.133] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_getLast  thrpt   30  89850919.516 ± 187668.617  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 795522.278 ops/s
# Warmup Iteration   2: 813257.522 ops/s
# Warmup Iteration   3: 1063271.686 ops/s
# Warmup Iteration   4: 1067371.413 ops/s
# Warmup Iteration   5: 1066830.896 ops/s
# Warmup Iteration   6: 1062640.876 ops/s
# Warmup Iteration   7: 1065828.739 ops/s
# Warmup Iteration   8: 1071287.120 ops/s
# Warmup Iteration   9: 1072934.872 ops/s
# Warmup Iteration  10: 1072700.701 ops/s
# Warmup Iteration  11: 1073538.561 ops/s
# Warmup Iteration  12: 899933.523 ops/s
# Warmup Iteration  13: 1066253.502 ops/s
# Warmup Iteration  14: 1065450.584 ops/s
# Warmup Iteration  15: 1065583.065 ops/s
# Warmup Iteration  16: 1067570.913 ops/s
# Warmup Iteration  17: 1139229.340 ops/s
# Warmup Iteration  18: 1140272.339 ops/s
# Warmup Iteration  19: 1146636.910 ops/s
# Warmup Iteration  20: 1144385.100 ops/s
# Warmup Iteration  21: 1144209.158 ops/s
# Warmup Iteration  22: 1142883.917 ops/s
# Warmup Iteration  23: 1143350.148 ops/s
# Warmup Iteration  24: 1138285.139 ops/s
# Warmup Iteration  25: 1140278.617 ops/s
# Warmup Iteration  26: 1142315.713 ops/s
# Warmup Iteration  27: 1140075.738 ops/s
# Warmup Iteration  28: 1137936.810 ops/s
# Warmup Iteration  29: 1137755.008 ops/s
# Warmup Iteration  30: 1139984.409 ops/s
Iteration   1: 1140958.536 ops/s
Iteration   2: 1141487.106 ops/s
Iteration   3: 1136031.405 ops/s
Iteration   4: 1144847.489 ops/s
Iteration   5: 1144280.456 ops/s
Iteration   6: 1144576.271 ops/s
Iteration   7: 1145318.744 ops/s
Iteration   8: 1139481.370 ops/s
Iteration   9: 1143785.380 ops/s
Iteration  10: 1139363.381 ops/s
Iteration  11: 1143122.077 ops/s
Iteration  12: 1148248.832 ops/s
Iteration  13: 1140181.877 ops/s
Iteration  14: 1139312.311 ops/s
Iteration  15: 1141398.898 ops/s
Iteration  16: 1138987.205 ops/s
Iteration  17: 1142701.598 ops/s
Iteration  18: 1140017.376 ops/s
Iteration  19: 1148426.929 ops/s
Iteration  20: 1147259.116 ops/s
Iteration  21: 1147596.496 ops/s
Iteration  22: 1141179.670 ops/s
Iteration  23: 1141949.078 ops/s
Iteration  24: 1147112.365 ops/s
Iteration  25: 1140704.376 ops/s
Iteration  26: 1144793.281 ops/s
Iteration  27: 1144984.931 ops/s
Iteration  28: 1134011.644 ops/s
Iteration  29: 1144129.441 ops/s
Iteration  30: 1146219.024 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_getOnly":
  1142748.889 ±(99.9%) 2366.767 ops/s [Average]
  (min, avg, max) = (1134011.644, 1142748.889, 1148426.929), stdev = 3542.465
  CI (99.9%): [1140382.122, 1145115.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_getOnly  thrpt   30  1142748.889 ± 2366.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 996414.757 ops/s
# Warmup Iteration   2: 2189296.423 ops/s
# Warmup Iteration   3: 2309446.525 ops/s
# Warmup Iteration   4: 2305978.058 ops/s
# Warmup Iteration   5: 1921009.302 ops/s
# Warmup Iteration   6: 2331511.119 ops/s
# Warmup Iteration   7: 2320531.474 ops/s
# Warmup Iteration   8: 2324212.620 ops/s
# Warmup Iteration   9: 2321179.791 ops/s
# Warmup Iteration  10: 2316726.777 ops/s
# Warmup Iteration  11: 2317972.891 ops/s
# Warmup Iteration  12: 2323057.147 ops/s
# Warmup Iteration  13: 2325037.477 ops/s
# Warmup Iteration  14: 2324541.204 ops/s
# Warmup Iteration  15: 2321593.094 ops/s
# Warmup Iteration  16: 2327183.191 ops/s
# Warmup Iteration  17: 2325118.945 ops/s
# Warmup Iteration  18: 2321384.788 ops/s
# Warmup Iteration  19: 2296056.986 ops/s
# Warmup Iteration  20: 2304011.859 ops/s
# Warmup Iteration  21: 2307809.233 ops/s
# Warmup Iteration  22: 2306481.805 ops/s
# Warmup Iteration  23: 2323373.580 ops/s
# Warmup Iteration  24: 2326503.309 ops/s
# Warmup Iteration  25: 2323027.078 ops/s
# Warmup Iteration  26: 2319849.325 ops/s
# Warmup Iteration  27: 2329938.001 ops/s
# Warmup Iteration  28: 2315813.370 ops/s
# Warmup Iteration  29: 2318247.271 ops/s
# Warmup Iteration  30: 2327532.862 ops/s
Iteration   1: 2322273.372 ops/s
Iteration   2: 2330429.783 ops/s
Iteration   3: 2322662.200 ops/s
Iteration   4: 2334148.665 ops/s
Iteration   5: 2323755.381 ops/s
Iteration   6: 2330055.048 ops/s
Iteration   7: 2311154.459 ops/s
Iteration   8: 2321782.431 ops/s
Iteration   9: 2314303.673 ops/s
Iteration  10: 2326371.606 ops/s
Iteration  11: 2332145.850 ops/s
Iteration  12: 2314996.502 ops/s
Iteration  13: 2331745.217 ops/s
Iteration  14: 2331696.820 ops/s
Iteration  15: 2318948.147 ops/s
Iteration  16: 2319817.484 ops/s
Iteration  17: 2318597.985 ops/s
Iteration  18: 2331443.220 ops/s
Iteration  19: 2328925.460 ops/s
Iteration  20: 2318002.027 ops/s
Iteration  21: 2321393.222 ops/s
Iteration  22: 2332332.886 ops/s
Iteration  23: 2321663.712 ops/s
Iteration  24: 2316719.030 ops/s
Iteration  25: 2328542.248 ops/s
Iteration  26: 2328485.836 ops/s
Iteration  27: 2320320.847 ops/s
Iteration  28: 2310824.583 ops/s
Iteration  29: 2330343.990 ops/s
Iteration  30: 2320690.004 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_groupBy":
  2323819.056 ±(99.9%) 4512.108 ops/s [Average]
  (min, avg, max) = (2310824.583, 2323819.056, 2334148.665), stdev = 6753.511
  CI (99.9%): [2319306.949, 2328331.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_groupBy  thrpt   30  2323819.056 ± 4512.108  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 225243.546 ops/s
# Warmup Iteration   2: 373971.774 ops/s
# Warmup Iteration   3: 442086.917 ops/s
# Warmup Iteration   4: 445059.551 ops/s
# Warmup Iteration   5: 443352.196 ops/s
# Warmup Iteration   6: 410752.463 ops/s
# Warmup Iteration   7: 403132.619 ops/s
# Warmup Iteration   8: 444487.773 ops/s
# Warmup Iteration   9: 444950.764 ops/s
# Warmup Iteration  10: 444147.914 ops/s
# Warmup Iteration  11: 445021.453 ops/s
# Warmup Iteration  12: 444367.784 ops/s
# Warmup Iteration  13: 444854.912 ops/s
# Warmup Iteration  14: 442559.568 ops/s
# Warmup Iteration  15: 443958.363 ops/s
# Warmup Iteration  16: 444291.327 ops/s
# Warmup Iteration  17: 445097.720 ops/s
# Warmup Iteration  18: 444134.312 ops/s
# Warmup Iteration  19: 444994.143 ops/s
# Warmup Iteration  20: 445215.185 ops/s
# Warmup Iteration  21: 442371.451 ops/s
# Warmup Iteration  22: 442972.175 ops/s
# Warmup Iteration  23: 444906.629 ops/s
# Warmup Iteration  24: 443883.136 ops/s
# Warmup Iteration  25: 444816.709 ops/s
# Warmup Iteration  26: 444377.807 ops/s
# Warmup Iteration  27: 442523.243 ops/s
# Warmup Iteration  28: 444877.305 ops/s
# Warmup Iteration  29: 444795.687 ops/s
# Warmup Iteration  30: 444581.232 ops/s
Iteration   1: 445907.524 ops/s
Iteration   2: 446580.463 ops/s
Iteration   3: 444139.406 ops/s
Iteration   4: 444305.659 ops/s
Iteration   5: 445144.188 ops/s
Iteration   6: 445908.973 ops/s
Iteration   7: 444952.088 ops/s
Iteration   8: 446304.971 ops/s
Iteration   9: 444783.937 ops/s
Iteration  10: 444346.492 ops/s
Iteration  11: 443900.393 ops/s
Iteration  12: 444289.118 ops/s
Iteration  13: 443203.256 ops/s
Iteration  14: 446041.114 ops/s
Iteration  15: 446619.452 ops/s
Iteration  16: 444812.881 ops/s
Iteration  17: 445008.152 ops/s
Iteration  18: 444689.322 ops/s
Iteration  19: 446547.892 ops/s
Iteration  20: 443491.391 ops/s
Iteration  21: 444728.173 ops/s
Iteration  22: 443860.127 ops/s
Iteration  23: 443253.722 ops/s
Iteration  24: 443643.247 ops/s
Iteration  25: 446463.298 ops/s
Iteration  26: 446269.226 ops/s
Iteration  27: 446112.551 ops/s
Iteration  28: 445850.025 ops/s
Iteration  29: 445865.685 ops/s
Iteration  30: 445207.163 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_groupByEach":
  445074.330 ±(99.9%) 719.425 ops/s [Average]
  (min, avg, max) = (443203.256, 445074.330, 446619.452), stdev = 1076.802
  CI (99.9%): [444354.905, 445793.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_groupByEach  thrpt   30  445074.330 ± 719.425  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 40403678.579 ops/s
# Warmup Iteration   2: 82114494.575 ops/s
# Warmup Iteration   3: 75494417.234 ops/s
# Warmup Iteration   4: 88645127.267 ops/s
# Warmup Iteration   5: 89001427.205 ops/s
# Warmup Iteration   6: 88744834.212 ops/s
# Warmup Iteration   7: 88284384.777 ops/s
# Warmup Iteration   8: 88475203.602 ops/s
# Warmup Iteration   9: 88114659.641 ops/s
# Warmup Iteration  10: 88852733.874 ops/s
# Warmup Iteration  11: 88464358.981 ops/s
# Warmup Iteration  12: 88143158.243 ops/s
# Warmup Iteration  13: 88494323.258 ops/s
# Warmup Iteration  14: 88524051.461 ops/s
# Warmup Iteration  15: 88995856.407 ops/s
# Warmup Iteration  16: 89053362.019 ops/s
# Warmup Iteration  17: 88666586.809 ops/s
# Warmup Iteration  18: 88679027.430 ops/s
# Warmup Iteration  19: 88921904.926 ops/s
# Warmup Iteration  20: 88419684.255 ops/s
# Warmup Iteration  21: 88578652.486 ops/s
# Warmup Iteration  22: 88918126.468 ops/s
# Warmup Iteration  23: 88681476.662 ops/s
# Warmup Iteration  24: 88707760.232 ops/s
# Warmup Iteration  25: 88798047.480 ops/s
# Warmup Iteration  26: 88543032.428 ops/s
# Warmup Iteration  27: 88269637.296 ops/s
# Warmup Iteration  28: 88556489.144 ops/s
# Warmup Iteration  29: 88440025.185 ops/s
# Warmup Iteration  30: 88907001.608 ops/s
Iteration   1: 88641054.990 ops/s
Iteration   2: 88918842.852 ops/s
Iteration   3: 88594187.330 ops/s
Iteration   4: 88961433.357 ops/s
Iteration   5: 88353110.106 ops/s
Iteration   6: 88228527.340 ops/s
Iteration   7: 88528900.391 ops/s
Iteration   8: 88714877.884 ops/s
Iteration   9: 88625582.560 ops/s
Iteration  10: 88271699.027 ops/s
Iteration  11: 88410954.661 ops/s
Iteration  12: 88634823.835 ops/s
Iteration  13: 89035122.734 ops/s
Iteration  14: 88960194.904 ops/s
Iteration  15: 88371279.385 ops/s
Iteration  16: 88761890.301 ops/s
Iteration  17: 88527761.958 ops/s
Iteration  18: 88062114.317 ops/s
Iteration  19: 87629687.349 ops/s
Iteration  20: 87759447.807 ops/s
Iteration  21: 87783252.577 ops/s
Iteration  22: 88638817.903 ops/s
Iteration  23: 88527963.506 ops/s
Iteration  24: 88396511.054 ops/s
Iteration  25: 88025514.595 ops/s
Iteration  26: 88305700.326 ops/s
Iteration  27: 88735875.479 ops/s
Iteration  28: 88615620.124 ops/s
Iteration  29: 89069750.649 ops/s
Iteration  30: 88453861.652 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_indexOf":
  88484812.032 ±(99.9%) 245990.017 ops/s [Average]
  (min, avg, max) = (87629687.349, 88484812.032, 89069750.649), stdev = 368186.304
  CI (99.9%): [88238822.015, 88730802.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_indexOf  thrpt   30  88484812.032 ± 245990.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17685841.903 ops/s
# Warmup Iteration   2: 36431651.111 ops/s
# Warmup Iteration   3: 32287840.688 ops/s
# Warmup Iteration   4: 37901737.323 ops/s
# Warmup Iteration   5: 37949538.393 ops/s
# Warmup Iteration   6: 37951612.725 ops/s
# Warmup Iteration   7: 38096877.428 ops/s
# Warmup Iteration   8: 38155357.277 ops/s
# Warmup Iteration   9: 38224810.556 ops/s
# Warmup Iteration  10: 38024115.556 ops/s
# Warmup Iteration  11: 38186662.215 ops/s
# Warmup Iteration  12: 38200438.737 ops/s
# Warmup Iteration  13: 38181265.797 ops/s
# Warmup Iteration  14: 38234905.906 ops/s
# Warmup Iteration  15: 38079088.230 ops/s
# Warmup Iteration  16: 38100773.632 ops/s
# Warmup Iteration  17: 38107473.209 ops/s
# Warmup Iteration  18: 38106603.729 ops/s
# Warmup Iteration  19: 38280573.406 ops/s
# Warmup Iteration  20: 38133566.674 ops/s
# Warmup Iteration  21: 38249424.115 ops/s
# Warmup Iteration  22: 38185546.124 ops/s
# Warmup Iteration  23: 38045835.169 ops/s
# Warmup Iteration  24: 38135861.288 ops/s
# Warmup Iteration  25: 38159995.622 ops/s
# Warmup Iteration  26: 38247793.628 ops/s
# Warmup Iteration  27: 38148458.860 ops/s
# Warmup Iteration  28: 38065982.141 ops/s
# Warmup Iteration  29: 38112232.776 ops/s
# Warmup Iteration  30: 38067761.897 ops/s
Iteration   1: 38063564.946 ops/s
Iteration   2: 38118857.874 ops/s
Iteration   3: 38179499.479 ops/s
Iteration   4: 37859240.348 ops/s
Iteration   5: 37809664.629 ops/s
Iteration   6: 38089635.011 ops/s
Iteration   7: 38180794.786 ops/s
Iteration   8: 38137720.497 ops/s
Iteration   9: 37729273.933 ops/s
Iteration  10: 38062521.859 ops/s
Iteration  11: 38029743.712 ops/s
Iteration  12: 38092259.983 ops/s
Iteration  13: 38268058.385 ops/s
Iteration  14: 38039709.571 ops/s
Iteration  15: 38108158.354 ops/s
Iteration  16: 38094193.098 ops/s
Iteration  17: 37911453.305 ops/s
Iteration  18: 37782405.784 ops/s
Iteration  19: 37810305.489 ops/s
Iteration  20: 38177928.780 ops/s
Iteration  21: 38088069.463 ops/s
Iteration  22: 38011281.789 ops/s
Iteration  23: 38287385.250 ops/s
Iteration  24: 38354075.262 ops/s
Iteration  25: 38187804.708 ops/s
Iteration  26: 38111327.611 ops/s
Iteration  27: 38278141.051 ops/s
Iteration  28: 38296169.514 ops/s
Iteration  29: 38272127.498 ops/s
Iteration  30: 38180887.596 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectInto":
  38087075.319 ±(99.9%) 109392.015 ops/s [Average]
  (min, avg, max) = (37729273.933, 38087075.319, 38354075.262), stdev = 163732.830
  CI (99.9%): [37977683.304, 38196467.333] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_injectInto  thrpt   30  38087075.319 ± 109392.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19806106.566 ops/s
# Warmup Iteration   2: 39560136.282 ops/s
# Warmup Iteration   3: 36096058.546 ops/s
# Warmup Iteration   4: 34946931.321 ops/s
# Warmup Iteration   5: 38408993.717 ops/s
# Warmup Iteration   6: 38401049.792 ops/s
# Warmup Iteration   7: 38283026.105 ops/s
# Warmup Iteration   8: 38215660.374 ops/s
# Warmup Iteration   9: 37079837.433 ops/s
# Warmup Iteration  10: 38336011.869 ops/s
# Warmup Iteration  11: 38452607.924 ops/s
# Warmup Iteration  12: 38509188.026 ops/s
# Warmup Iteration  13: 38447173.156 ops/s
# Warmup Iteration  14: 38386180.671 ops/s
# Warmup Iteration  15: 38364592.751 ops/s
# Warmup Iteration  16: 38420133.154 ops/s
# Warmup Iteration  17: 38267002.842 ops/s
# Warmup Iteration  18: 38322551.924 ops/s
# Warmup Iteration  19: 38365717.309 ops/s
# Warmup Iteration  20: 38403316.653 ops/s
# Warmup Iteration  21: 38106194.515 ops/s
# Warmup Iteration  22: 38393426.229 ops/s
# Warmup Iteration  23: 38229491.109 ops/s
# Warmup Iteration  24: 38258985.068 ops/s
# Warmup Iteration  25: 38346722.944 ops/s
# Warmup Iteration  26: 37617587.037 ops/s
# Warmup Iteration  27: 38226357.148 ops/s
# Warmup Iteration  28: 38154684.306 ops/s
# Warmup Iteration  29: 38176379.199 ops/s
# Warmup Iteration  30: 38335437.084 ops/s
Iteration   1: 38278847.177 ops/s
Iteration   2: 38225057.953 ops/s
Iteration   3: 38268572.405 ops/s
Iteration   4: 38137098.762 ops/s
Iteration   5: 38362573.939 ops/s
Iteration   6: 38332498.216 ops/s
Iteration   7: 38390248.336 ops/s
Iteration   8: 38306302.223 ops/s
Iteration   9: 38378274.320 ops/s
Iteration  10: 38257038.294 ops/s
Iteration  11: 38261797.184 ops/s
Iteration  12: 38263039.975 ops/s
Iteration  13: 38138173.844 ops/s
Iteration  14: 38317891.490 ops/s
Iteration  15: 38193990.322 ops/s
Iteration  16: 38209785.960 ops/s
Iteration  17: 38185104.943 ops/s
Iteration  18: 37967398.935 ops/s
Iteration  19: 38081195.902 ops/s
Iteration  20: 38355498.372 ops/s
Iteration  21: 38232006.893 ops/s
Iteration  22: 38106175.604 ops/s
Iteration  23: 38207973.335 ops/s
Iteration  24: 38351953.513 ops/s
Iteration  25: 38339525.628 ops/s
Iteration  26: 38143045.635 ops/s
Iteration  27: 38171545.339 ops/s
Iteration  28: 38341466.921 ops/s
Iteration  29: 38337139.412 ops/s
Iteration  30: 38439865.377 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoDouble":
  38252702.874 ±(99.9%) 71250.057 ops/s [Average]
  (min, avg, max) = (37967398.935, 38252702.874, 38439865.377), stdev = 106643.740
  CI (99.9%): [38181452.816, 38323952.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  38252702.874 ± 71250.057  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19775391.253 ops/s
# Warmup Iteration   2: 37964289.277 ops/s
# Warmup Iteration   3: 36828532.931 ops/s
# Warmup Iteration   4: 32744304.814 ops/s
# Warmup Iteration   5: 37703072.935 ops/s
# Warmup Iteration   6: 37593541.304 ops/s
# Warmup Iteration   7: 37427492.352 ops/s
# Warmup Iteration   8: 37554204.710 ops/s
# Warmup Iteration   9: 37694891.333 ops/s
# Warmup Iteration  10: 37536066.052 ops/s
# Warmup Iteration  11: 37636411.440 ops/s
# Warmup Iteration  12: 37699345.807 ops/s
# Warmup Iteration  13: 37708486.506 ops/s
# Warmup Iteration  14: 37563964.009 ops/s
# Warmup Iteration  15: 37621490.809 ops/s
# Warmup Iteration  16: 37543180.061 ops/s
# Warmup Iteration  17: 37582968.172 ops/s
# Warmup Iteration  18: 37510044.335 ops/s
# Warmup Iteration  19: 37528081.674 ops/s
# Warmup Iteration  20: 37453247.407 ops/s
# Warmup Iteration  21: 37600588.597 ops/s
# Warmup Iteration  22: 37438529.775 ops/s
# Warmup Iteration  23: 37481561.064 ops/s
# Warmup Iteration  24: 37500242.221 ops/s
# Warmup Iteration  25: 37533738.670 ops/s
# Warmup Iteration  26: 37521541.795 ops/s
# Warmup Iteration  27: 37562692.059 ops/s
# Warmup Iteration  28: 37625983.961 ops/s
# Warmup Iteration  29: 37525047.651 ops/s
# Warmup Iteration  30: 37732611.517 ops/s
Iteration   1: 37639765.137 ops/s
Iteration   2: 37594273.876 ops/s
Iteration   3: 37715972.126 ops/s
Iteration   4: 37680314.937 ops/s
Iteration   5: 37718988.668 ops/s
Iteration   6: 37658115.434 ops/s
Iteration   7: 37664437.995 ops/s
Iteration   8: 37688495.041 ops/s
Iteration   9: 37753577.066 ops/s
Iteration  10: 37734655.874 ops/s
Iteration  11: 37806433.196 ops/s
Iteration  12: 37683688.564 ops/s
Iteration  13: 37680550.816 ops/s
Iteration  14: 37626904.449 ops/s
Iteration  15: 37721768.415 ops/s
Iteration  16: 37621264.013 ops/s
Iteration  17: 37697606.206 ops/s
Iteration  18: 37639245.040 ops/s
Iteration  19: 37689895.108 ops/s
Iteration  20: 37600099.063 ops/s
Iteration  21: 37557198.605 ops/s
Iteration  22: 37546835.828 ops/s
Iteration  23: 37546142.925 ops/s
Iteration  24: 37514896.494 ops/s
Iteration  25: 37436209.822 ops/s
Iteration  26: 37670625.821 ops/s
Iteration  27: 37600972.731 ops/s
Iteration  28: 37569395.733 ops/s
Iteration  29: 37738297.383 ops/s
Iteration  30: 37802924.291 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoFloat":
  37653318.355 ±(99.9%) 56389.575 ops/s [Average]
  (min, avg, max) = (37436209.822, 37653318.355, 37806433.196), stdev = 84401.268
  CI (99.9%): [37596928.780, 37709707.930] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  37653318.355 ± 56389.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22024252.788 ops/s
# Warmup Iteration   2: 40775884.453 ops/s
# Warmup Iteration   3: 35772433.861 ops/s
# Warmup Iteration   4: 42358284.094 ops/s
# Warmup Iteration   5: 42390096.345 ops/s
# Warmup Iteration   6: 42186691.265 ops/s
# Warmup Iteration   7: 42295322.915 ops/s
# Warmup Iteration   8: 42341706.797 ops/s
# Warmup Iteration   9: 42323989.779 ops/s
# Warmup Iteration  10: 42382379.184 ops/s
# Warmup Iteration  11: 42302848.802 ops/s
# Warmup Iteration  12: 41211700.675 ops/s
# Warmup Iteration  13: 42268446.694 ops/s
# Warmup Iteration  14: 41958285.188 ops/s
# Warmup Iteration  15: 42275871.086 ops/s
# Warmup Iteration  16: 42182878.279 ops/s
# Warmup Iteration  17: 42215361.843 ops/s
# Warmup Iteration  18: 42433526.232 ops/s
# Warmup Iteration  19: 42456287.359 ops/s
# Warmup Iteration  20: 42316224.149 ops/s
# Warmup Iteration  21: 42275281.705 ops/s
# Warmup Iteration  22: 42254294.431 ops/s
# Warmup Iteration  23: 42532670.872 ops/s
# Warmup Iteration  24: 42274140.659 ops/s
# Warmup Iteration  25: 41997584.312 ops/s
# Warmup Iteration  26: 42337921.032 ops/s
# Warmup Iteration  27: 42416804.861 ops/s
# Warmup Iteration  28: 42371570.392 ops/s
# Warmup Iteration  29: 42486692.725 ops/s
# Warmup Iteration  30: 42260309.138 ops/s
Iteration   1: 42344603.777 ops/s
Iteration   2: 42444692.530 ops/s
Iteration   3: 42150828.032 ops/s
Iteration   4: 42126324.030 ops/s
Iteration   5: 42156753.381 ops/s
Iteration   6: 42279393.586 ops/s
Iteration   7: 42294893.638 ops/s
Iteration   8: 42466992.799 ops/s
Iteration   9: 42345237.775 ops/s
Iteration  10: 42394939.443 ops/s
Iteration  11: 42324637.888 ops/s
Iteration  12: 42411929.154 ops/s
Iteration  13: 42484282.903 ops/s
Iteration  14: 42330629.518 ops/s
Iteration  15: 42457390.006 ops/s
Iteration  16: 42486659.914 ops/s
Iteration  17: 42328179.115 ops/s
Iteration  18: 42143647.003 ops/s
Iteration  19: 42060902.146 ops/s
Iteration  20: 42532364.028 ops/s
Iteration  21: 42233133.032 ops/s
Iteration  22: 42324763.892 ops/s
Iteration  23: 42280393.711 ops/s
Iteration  24: 42292379.955 ops/s
Iteration  25: 42257645.713 ops/s
Iteration  26: 42248864.055 ops/s
Iteration  27: 42414266.773 ops/s
Iteration  28: 42227167.313 ops/s
Iteration  29: 42408443.692 ops/s
Iteration  30: 41932455.398 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoInt":
  42306159.807 ±(99.9%) 92286.186 ops/s [Average]
  (min, avg, max) = (41932455.398, 42306159.807, 42532364.028), stdev = 138129.629
  CI (99.9%): [42213873.621, 42398445.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  42306159.807 ± 92286.186  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20694059.083 ops/s
# Warmup Iteration   2: 40981425.680 ops/s
# Warmup Iteration   3: 35596057.358 ops/s
# Warmup Iteration   4: 39911774.800 ops/s
# Warmup Iteration   5: 40789277.071 ops/s
# Warmup Iteration   6: 40952042.078 ops/s
# Warmup Iteration   7: 41008585.086 ops/s
# Warmup Iteration   8: 40878297.546 ops/s
# Warmup Iteration   9: 40877783.947 ops/s
# Warmup Iteration  10: 40680232.111 ops/s
# Warmup Iteration  11: 40888335.675 ops/s
# Warmup Iteration  12: 40868245.648 ops/s
# Warmup Iteration  13: 40723761.610 ops/s
# Warmup Iteration  14: 40595902.448 ops/s
# Warmup Iteration  15: 40496696.922 ops/s
# Warmup Iteration  16: 40860252.197 ops/s
# Warmup Iteration  17: 40834165.265 ops/s
# Warmup Iteration  18: 40911862.722 ops/s
# Warmup Iteration  19: 40921097.000 ops/s
# Warmup Iteration  20: 40690612.934 ops/s
# Warmup Iteration  21: 40824800.957 ops/s
# Warmup Iteration  22: 40647041.626 ops/s
# Warmup Iteration  23: 40956717.309 ops/s
# Warmup Iteration  24: 40877927.923 ops/s
# Warmup Iteration  25: 40815328.039 ops/s
# Warmup Iteration  26: 40965082.700 ops/s
# Warmup Iteration  27: 40655026.925 ops/s
# Warmup Iteration  28: 40761972.567 ops/s
# Warmup Iteration  29: 40788513.083 ops/s
# Warmup Iteration  30: 40766551.483 ops/s
Iteration   1: 40610959.423 ops/s
Iteration   2: 40967970.177 ops/s
Iteration   3: 40961786.769 ops/s
Iteration   4: 40921012.394 ops/s
Iteration   5: 40851546.697 ops/s
Iteration   6: 41005275.704 ops/s
Iteration   7: 40876216.727 ops/s
Iteration   8: 41049920.130 ops/s
Iteration   9: 41048904.509 ops/s
Iteration  10: 40649368.935 ops/s
Iteration  11: 40873232.019 ops/s
Iteration  12: 41072813.481 ops/s
Iteration  13: 40934643.673 ops/s
Iteration  14: 40791714.547 ops/s
Iteration  15: 41031784.587 ops/s
Iteration  16: 40923047.575 ops/s
Iteration  17: 40907006.274 ops/s
Iteration  18: 40860419.005 ops/s
Iteration  19: 40850256.830 ops/s
Iteration  20: 40961721.300 ops/s
Iteration  21: 40678904.112 ops/s
Iteration  22: 40944514.474 ops/s
Iteration  23: 40991224.309 ops/s
Iteration  24: 40797961.480 ops/s
Iteration  25: 40803652.340 ops/s
Iteration  26: 40712868.967 ops/s
Iteration  27: 40885859.910 ops/s
Iteration  28: 40728755.983 ops/s
Iteration  29: 40812152.475 ops/s
Iteration  30: 40666406.180 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoLong":
  40872396.699 ±(99.9%) 84695.764 ops/s [Average]
  (min, avg, max) = (40610959.423, 40872396.699, 41072813.481), stdev = 126768.641
  CI (99.9%): [40787700.936, 40957092.463] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  40872396.699 ± 84695.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 47174221.139 ops/s
# Warmup Iteration   2: 89443276.388 ops/s
# Warmup Iteration   3: 76165509.803 ops/s
# Warmup Iteration   4: 92032033.379 ops/s
# Warmup Iteration   5: 92161971.892 ops/s
# Warmup Iteration   6: 92165285.442 ops/s
# Warmup Iteration   7: 92587188.081 ops/s
# Warmup Iteration   8: 92152652.458 ops/s
# Warmup Iteration   9: 92293766.195 ops/s
# Warmup Iteration  10: 91829356.114 ops/s
# Warmup Iteration  11: 92590977.528 ops/s
# Warmup Iteration  12: 92854080.484 ops/s
# Warmup Iteration  13: 92343558.895 ops/s
# Warmup Iteration  14: 92015800.007 ops/s
# Warmup Iteration  15: 91886690.236 ops/s
# Warmup Iteration  16: 91113217.020 ops/s
# Warmup Iteration  17: 91027266.077 ops/s
# Warmup Iteration  18: 91406406.499 ops/s
# Warmup Iteration  19: 91231571.851 ops/s
# Warmup Iteration  20: 91593171.498 ops/s
# Warmup Iteration  21: 91053868.622 ops/s
# Warmup Iteration  22: 91020498.165 ops/s
# Warmup Iteration  23: 91792122.208 ops/s
# Warmup Iteration  24: 91252213.451 ops/s
# Warmup Iteration  25: 91626166.122 ops/s
# Warmup Iteration  26: 91903638.308 ops/s
# Warmup Iteration  27: 92070427.480 ops/s
# Warmup Iteration  28: 91202068.806 ops/s
# Warmup Iteration  29: 91545116.078 ops/s
# Warmup Iteration  30: 91573230.203 ops/s
Iteration   1: 91737828.475 ops/s
Iteration   2: 92314060.972 ops/s
Iteration   3: 92504584.240 ops/s
Iteration   4: 91510553.939 ops/s
Iteration   5: 92011659.196 ops/s
Iteration   6: 91501728.657 ops/s
Iteration   7: 91891592.543 ops/s
Iteration   8: 92364505.057 ops/s
Iteration   9: 92220794.313 ops/s
Iteration  10: 91789203.806 ops/s
Iteration  11: 91290630.961 ops/s
Iteration  12: 91584995.917 ops/s
Iteration  13: 90532732.809 ops/s
Iteration  14: 91356870.300 ops/s
Iteration  15: 90785765.089 ops/s
Iteration  16: 91264861.772 ops/s
Iteration  17: 91667645.642 ops/s
Iteration  18: 92118372.585 ops/s
Iteration  19: 91523567.066 ops/s
Iteration  20: 91587861.642 ops/s
Iteration  21: 91496925.466 ops/s
Iteration  22: 91736138.824 ops/s
Iteration  23: 91000785.175 ops/s
Iteration  24: 92143448.970 ops/s
Iteration  25: 92371594.490 ops/s
Iteration  26: 92189201.669 ops/s
Iteration  27: 91559130.647 ops/s
Iteration  28: 91652559.133 ops/s
Iteration  29: 91749963.400 ops/s
Iteration  30: 91839344.036 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_isEmpty":
  91709963.560 ±(99.9%) 311923.990 ops/s [Average]
  (min, avg, max) = (90532732.809, 91709963.560, 92504584.240), stdev = 466873.179
  CI (99.9%): [91398039.570, 92021887.549] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_isEmpty  thrpt   30  91709963.560 ± 311923.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 380580.189 ops/s
# Warmup Iteration   2: 393229.187 ops/s
# Warmup Iteration   3: 464009.960 ops/s
# Warmup Iteration   4: 491792.807 ops/s
# Warmup Iteration   5: 495062.951 ops/s
# Warmup Iteration   6: 492828.595 ops/s
# Warmup Iteration   7: 495777.795 ops/s
# Warmup Iteration   8: 495551.735 ops/s
# Warmup Iteration   9: 494622.932 ops/s
# Warmup Iteration  10: 494681.533 ops/s
# Warmup Iteration  11: 492794.067 ops/s
# Warmup Iteration  12: 494015.818 ops/s
# Warmup Iteration  13: 494825.816 ops/s
# Warmup Iteration  14: 418729.398 ops/s
# Warmup Iteration  15: 497125.123 ops/s
# Warmup Iteration  16: 495559.837 ops/s
# Warmup Iteration  17: 521649.857 ops/s
# Warmup Iteration  18: 522296.760 ops/s
# Warmup Iteration  19: 522564.766 ops/s
# Warmup Iteration  20: 525749.919 ops/s
# Warmup Iteration  21: 523566.922 ops/s
# Warmup Iteration  22: 524727.115 ops/s
# Warmup Iteration  23: 525550.606 ops/s
# Warmup Iteration  24: 524928.418 ops/s
# Warmup Iteration  25: 523116.439 ops/s
# Warmup Iteration  26: 524255.723 ops/s
# Warmup Iteration  27: 522697.841 ops/s
# Warmup Iteration  28: 520658.856 ops/s
# Warmup Iteration  29: 524275.173 ops/s
# Warmup Iteration  30: 523924.291 ops/s
Iteration   1: 525845.537 ops/s
Iteration   2: 522660.843 ops/s
Iteration   3: 522492.550 ops/s
Iteration   4: 519259.866 ops/s
Iteration   5: 521701.333 ops/s
Iteration   6: 525377.292 ops/s
Iteration   7: 524631.583 ops/s
Iteration   8: 520576.533 ops/s
Iteration   9: 520998.514 ops/s
Iteration  10: 521942.289 ops/s
Iteration  11: 522790.189 ops/s
Iteration  12: 523940.812 ops/s
Iteration  13: 524967.854 ops/s
Iteration  14: 522989.451 ops/s
Iteration  15: 517715.718 ops/s
Iteration  16: 523944.423 ops/s
Iteration  17: 526233.920 ops/s
Iteration  18: 526556.258 ops/s
Iteration  19: 518269.398 ops/s
Iteration  20: 524565.408 ops/s
Iteration  21: 525295.379 ops/s
Iteration  22: 524451.060 ops/s
Iteration  23: 522668.115 ops/s
Iteration  24: 523658.753 ops/s
Iteration  25: 524148.086 ops/s
Iteration  26: 524954.564 ops/s
Iteration  27: 521707.382 ops/s
Iteration  28: 522635.448 ops/s
Iteration  29: 525039.728 ops/s
Iteration  30: 523941.993 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_iterator":
  523198.676 ±(99.9%) 1487.400 ops/s [Average]
  (min, avg, max) = (517715.718, 523198.676, 526556.258), stdev = 2226.270
  CI (99.9%): [521711.276, 524686.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_iterator  thrpt   30  523198.676 ± 1487.400  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 649850.063 ops/s
# Warmup Iteration   2: 783066.282 ops/s
# Warmup Iteration   3: 975065.084 ops/s
# Warmup Iteration   4: 971673.537 ops/s
# Warmup Iteration   5: 978486.021 ops/s
# Warmup Iteration   6: 975322.028 ops/s
# Warmup Iteration   7: 974824.920 ops/s
# Warmup Iteration   8: 972371.374 ops/s
# Warmup Iteration   9: 816517.404 ops/s
# Warmup Iteration  10: 977973.760 ops/s
# Warmup Iteration  11: 975926.633 ops/s
# Warmup Iteration  12: 974339.673 ops/s
# Warmup Iteration  13: 975657.529 ops/s
# Warmup Iteration  14: 974810.259 ops/s
# Warmup Iteration  15: 969999.183 ops/s
# Warmup Iteration  16: 974676.734 ops/s
# Warmup Iteration  17: 1030644.035 ops/s
# Warmup Iteration  18: 1025358.406 ops/s
# Warmup Iteration  19: 1028262.207 ops/s
# Warmup Iteration  20: 1029628.026 ops/s
# Warmup Iteration  21: 1029371.760 ops/s
# Warmup Iteration  22: 1029642.370 ops/s
# Warmup Iteration  23: 1031492.122 ops/s
# Warmup Iteration  24: 1026243.558 ops/s
# Warmup Iteration  25: 1026150.431 ops/s
# Warmup Iteration  26: 1029270.110 ops/s
# Warmup Iteration  27: 1028031.305 ops/s
# Warmup Iteration  28: 1026359.307 ops/s
# Warmup Iteration  29: 1027352.563 ops/s
# Warmup Iteration  30: 1026731.149 ops/s
Iteration   1: 1025955.938 ops/s
Iteration   2: 1029502.504 ops/s
Iteration   3: 1026140.294 ops/s
Iteration   4: 1027934.972 ops/s
Iteration   5: 1022626.900 ops/s
Iteration   6: 1024227.495 ops/s
Iteration   7: 1025066.307 ops/s
Iteration   8: 1026821.538 ops/s
Iteration   9: 1021057.612 ops/s
Iteration  10: 1023305.346 ops/s
Iteration  11: 1030399.053 ops/s
Iteration  12: 1025449.562 ops/s
Iteration  13: 1027747.964 ops/s
Iteration  14: 1028476.018 ops/s
Iteration  15: 1021353.645 ops/s
Iteration  16: 1026848.263 ops/s
Iteration  17: 1027199.740 ops/s
Iteration  18: 1020882.786 ops/s
Iteration  19: 1024426.840 ops/s
Iteration  20: 1023413.868 ops/s
Iteration  21: 1020440.027 ops/s
Iteration  22: 1021775.014 ops/s
Iteration  23: 1025360.502 ops/s
Iteration  24: 1024869.401 ops/s
Iteration  25: 1022308.210 ops/s
Iteration  26: 1022453.264 ops/s
Iteration  27: 1027976.549 ops/s
Iteration  28: 1030234.124 ops/s
Iteration  29: 1027236.081 ops/s
Iteration  30: 1029060.425 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_iteratorRemove":
  1025351.675 ±(99.9%) 1955.767 ops/s [Average]
  (min, avg, max) = (1020440.027, 1025351.675, 1030399.053), stdev = 2927.300
  CI (99.9%): [1023395.908, 1027307.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1025351.675 ± 1955.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 41708030.375 ops/s
# Warmup Iteration   2: 86112147.283 ops/s
# Warmup Iteration   3: 76775619.302 ops/s
# Warmup Iteration   4: 89468886.387 ops/s
# Warmup Iteration   5: 89800169.293 ops/s
# Warmup Iteration   6: 89913453.814 ops/s
# Warmup Iteration   7: 89781447.165 ops/s
# Warmup Iteration   8: 89860880.014 ops/s
# Warmup Iteration   9: 89868705.263 ops/s
# Warmup Iteration  10: 89605966.165 ops/s
# Warmup Iteration  11: 89972021.805 ops/s
# Warmup Iteration  12: 90311328.651 ops/s
# Warmup Iteration  13: 90174685.615 ops/s
# Warmup Iteration  14: 90023693.246 ops/s
# Warmup Iteration  15: 89390749.767 ops/s
# Warmup Iteration  16: 90187264.516 ops/s
# Warmup Iteration  17: 89719747.474 ops/s
# Warmup Iteration  18: 90168967.412 ops/s
# Warmup Iteration  19: 90205377.657 ops/s
# Warmup Iteration  20: 89914588.081 ops/s
# Warmup Iteration  21: 90177060.860 ops/s
# Warmup Iteration  22: 89631397.080 ops/s
# Warmup Iteration  23: 89742293.385 ops/s
# Warmup Iteration  24: 90095867.335 ops/s
# Warmup Iteration  25: 90099167.019 ops/s
# Warmup Iteration  26: 89669691.631 ops/s
# Warmup Iteration  27: 90152498.394 ops/s
# Warmup Iteration  28: 88061684.983 ops/s
# Warmup Iteration  29: 90125477.265 ops/s
# Warmup Iteration  30: 89656592.204 ops/s
Iteration   1: 90207785.251 ops/s
Iteration   2: 90395812.833 ops/s
Iteration   3: 90319343.555 ops/s
Iteration   4: 89849201.807 ops/s
Iteration   5: 89579217.135 ops/s
Iteration   6: 90124792.681 ops/s
Iteration   7: 89661488.598 ops/s
Iteration   8: 89260226.258 ops/s
Iteration   9: 89710201.423 ops/s
Iteration  10: 90116131.063 ops/s
Iteration  11: 89528865.280 ops/s
Iteration  12: 86394039.830 ops/s
Iteration  13: 89444718.664 ops/s
Iteration  14: 89864684.636 ops/s
Iteration  15: 90052167.534 ops/s
Iteration  16: 90198722.460 ops/s
Iteration  17: 89843122.605 ops/s
Iteration  18: 90231064.870 ops/s
Iteration  19: 90060658.526 ops/s
Iteration  20: 90179499.119 ops/s
Iteration  21: 90052906.630 ops/s
Iteration  22: 89950653.468 ops/s
Iteration  23: 89836867.571 ops/s
Iteration  24: 90264391.565 ops/s
Iteration  25: 89253895.237 ops/s
Iteration  26: 89657468.282 ops/s
Iteration  27: 90080881.931 ops/s
Iteration  28: 89930608.112 ops/s
Iteration  29: 90453031.230 ops/s
Iteration  30: 90301523.792 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_lastIndexOf":
  89826799.065 ±(99.9%) 483178.783 ops/s [Average]
  (min, avg, max) = (86394039.830, 89826799.065, 90453031.230), stdev = 723199.311
  CI (99.9%): [89343620.282, 90309977.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  89826799.065 ± 483178.783  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 146810.688 ops/s
# Warmup Iteration   2: 154859.082 ops/s
# Warmup Iteration   3: 185784.124 ops/s
# Warmup Iteration   4: 194622.375 ops/s
# Warmup Iteration   5: 194621.306 ops/s
# Warmup Iteration   6: 193442.350 ops/s
# Warmup Iteration   7: 194162.756 ops/s
# Warmup Iteration   8: 194277.818 ops/s
# Warmup Iteration   9: 194305.637 ops/s
# Warmup Iteration  10: 194650.999 ops/s
# Warmup Iteration  11: 194635.824 ops/s
# Warmup Iteration  12: 194096.046 ops/s
# Warmup Iteration  13: 178797.481 ops/s
# Warmup Iteration  14: 181243.728 ops/s
# Warmup Iteration  15: 194085.946 ops/s
# Warmup Iteration  16: 194597.826 ops/s
# Warmup Iteration  17: 206169.780 ops/s
# Warmup Iteration  18: 205241.131 ops/s
# Warmup Iteration  19: 206698.179 ops/s
# Warmup Iteration  20: 205913.023 ops/s
# Warmup Iteration  21: 206383.315 ops/s
# Warmup Iteration  22: 205358.137 ops/s
# Warmup Iteration  23: 205018.241 ops/s
# Warmup Iteration  24: 205655.515 ops/s
# Warmup Iteration  25: 205583.157 ops/s
# Warmup Iteration  26: 205581.689 ops/s
# Warmup Iteration  27: 205018.693 ops/s
# Warmup Iteration  28: 205428.032 ops/s
# Warmup Iteration  29: 206605.674 ops/s
# Warmup Iteration  30: 206312.167 ops/s
Iteration   1: 206282.999 ops/s
Iteration   2: 206450.848 ops/s
Iteration   3: 206424.124 ops/s
Iteration   4: 206419.077 ops/s
Iteration   5: 205740.903 ops/s
Iteration   6: 204947.560 ops/s
Iteration   7: 205306.702 ops/s
Iteration   8: 206834.574 ops/s
Iteration   9: 206138.236 ops/s
Iteration  10: 206067.162 ops/s
Iteration  11: 205203.985 ops/s
Iteration  12: 205822.189 ops/s
Iteration  13: 206211.580 ops/s
Iteration  14: 206090.007 ops/s
Iteration  15: 205146.412 ops/s
Iteration  16: 205758.160 ops/s
Iteration  17: 206451.846 ops/s
Iteration  18: 206658.737 ops/s
Iteration  19: 205945.808 ops/s
Iteration  20: 205504.561 ops/s
Iteration  21: 205211.390 ops/s
Iteration  22: 205686.626 ops/s
Iteration  23: 204921.962 ops/s
Iteration  24: 204194.783 ops/s
Iteration  25: 204836.413 ops/s
Iteration  26: 206631.947 ops/s
Iteration  27: 205780.205 ops/s
Iteration  28: 206382.065 ops/s
Iteration  29: 206511.530 ops/s
Iteration  30: 205397.310 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_listIterator":
  205831.990 ±(99.9%) 434.634 ops/s [Average]
  (min, avg, max) = (204194.783, 205831.990, 206834.574), stdev = 650.540
  CI (99.9%): [205397.356, 206266.624] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_listIterator  thrpt   30  205831.990 ± 434.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 769458.022 ops/s
# Warmup Iteration   2: 793641.071 ops/s
# Warmup Iteration   3: 990551.011 ops/s
# Warmup Iteration   4: 1023333.703 ops/s
# Warmup Iteration   5: 1025181.609 ops/s
# Warmup Iteration   6: 1018431.632 ops/s
# Warmup Iteration   7: 1021840.312 ops/s
# Warmup Iteration   8: 1020756.097 ops/s
# Warmup Iteration   9: 1023001.923 ops/s
# Warmup Iteration  10: 1022870.033 ops/s
# Warmup Iteration  11: 1022720.878 ops/s
# Warmup Iteration  12: 1018886.690 ops/s
# Warmup Iteration  13: 871842.235 ops/s
# Warmup Iteration  14: 1019587.726 ops/s
# Warmup Iteration  15: 1019856.592 ops/s
# Warmup Iteration  16: 1024913.961 ops/s
# Warmup Iteration  17: 1089660.175 ops/s
# Warmup Iteration  18: 1085879.032 ops/s
# Warmup Iteration  19: 1085372.006 ops/s
# Warmup Iteration  20: 1092767.641 ops/s
# Warmup Iteration  21: 1089003.013 ops/s
# Warmup Iteration  22: 1084836.985 ops/s
# Warmup Iteration  23: 1089268.743 ops/s
# Warmup Iteration  24: 1089870.959 ops/s
# Warmup Iteration  25: 1091883.901 ops/s
# Warmup Iteration  26: 1089666.708 ops/s
# Warmup Iteration  27: 1089543.060 ops/s
# Warmup Iteration  28: 1086433.228 ops/s
# Warmup Iteration  29: 1089866.033 ops/s
# Warmup Iteration  30: 1086224.369 ops/s
Iteration   1: 1093530.653 ops/s
Iteration   2: 1088197.351 ops/s
Iteration   3: 1088893.799 ops/s
Iteration   4: 1094341.613 ops/s
Iteration   5: 1094200.254 ops/s
Iteration   6: 1092299.163 ops/s
Iteration   7: 1088613.899 ops/s
Iteration   8: 1084265.276 ops/s
Iteration   9: 1084087.472 ops/s
Iteration  10: 1083232.121 ops/s
Iteration  11: 1089806.089 ops/s
Iteration  12: 1086290.349 ops/s
Iteration  13: 1083841.712 ops/s
Iteration  14: 1091855.754 ops/s
Iteration  15: 1089371.922 ops/s
Iteration  16: 1089610.164 ops/s
Iteration  17: 1092398.678 ops/s
Iteration  18: 1086849.986 ops/s
Iteration  19: 1091023.274 ops/s
Iteration  20: 1091246.099 ops/s
Iteration  21: 1092317.461 ops/s
Iteration  22: 1092237.064 ops/s
Iteration  23: 1092869.477 ops/s
Iteration  24: 1093662.587 ops/s
Iteration  25: 1087898.698 ops/s
Iteration  26: 1094810.214 ops/s
Iteration  27: 1092044.893 ops/s
Iteration  28: 1092609.162 ops/s
Iteration  29: 1091563.673 ops/s
Iteration  30: 1085837.060 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize":
  1089993.531 ±(99.9%) 2282.998 ops/s [Average]
  (min, avg, max) = (1083232.121, 1089993.531, 1094810.214), stdev = 3417.084
  CI (99.9%): [1087710.532, 1092276.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize  thrpt   30  1089993.531 ± 2282.998  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_listIterator_throwsNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_listIterator_throwsNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 779492.636 ops/s
# Warmup Iteration   2: 803430.690 ops/s
# Warmup Iteration   3: 1002162.529 ops/s
# Warmup Iteration   4: 1023654.646 ops/s
# Warmup Iteration   5: 1030056.208 ops/s
# Warmup Iteration   6: 1024009.675 ops/s
# Warmup Iteration   7: 1029674.087 ops/s
# Warmup Iteration   8: 1027832.586 ops/s
# Warmup Iteration   9: 1028603.991 ops/s
# Warmup Iteration  10: 1029152.434 ops/s
# Warmup Iteration  11: 1029115.829 ops/s
# Warmup Iteration  12: 1004251.240 ops/s
# Warmup Iteration  13: 896840.816 ops/s
# Warmup Iteration  14: 1030651.589 ops/s
# Warmup Iteration  15: 1030011.862 ops/s
# Warmup Iteration  16: 1029390.112 ops/s
# Warmup Iteration  17: 1092411.664 ops/s
# Warmup Iteration  18: 1087655.916 ops/s
# Warmup Iteration  19: 1084679.894 ops/s
# Warmup Iteration  20: 1089405.841 ops/s
# Warmup Iteration  21: 1085918.448 ops/s
# Warmup Iteration  22: 1083597.392 ops/s
# Warmup Iteration  23: 1089681.766 ops/s
# Warmup Iteration  24: 1082815.499 ops/s
# Warmup Iteration  25: 1081446.750 ops/s
# Warmup Iteration  26: 1082691.404 ops/s
# Warmup Iteration  27: 1080546.003 ops/s
# Warmup Iteration  28: 1084696.958 ops/s
# Warmup Iteration  29: 1086298.343 ops/s
# Warmup Iteration  30: 1087314.361 ops/s
Iteration   1: 1089804.683 ops/s
Iteration   2: 1088642.001 ops/s
Iteration   3: 1088688.018 ops/s
Iteration   4: 1086630.743 ops/s
Iteration   5: 1089411.360 ops/s
Iteration   6: 1080990.474 ops/s
Iteration   7: 1089930.709 ops/s
Iteration   8: 1088067.066 ops/s
Iteration   9: 1087364.951 ops/s
Iteration  10: 1088992.772 ops/s
Iteration  11: 1082532.041 ops/s
Iteration  12: 1086168.147 ops/s
Iteration  13: 1091893.249 ops/s
Iteration  14: 1091257.578 ops/s
Iteration  15: 1093163.999 ops/s
Iteration  16: 1085697.446 ops/s
Iteration  17: 1087185.504 ops/s
Iteration  18: 1091735.089 ops/s
Iteration  19: 1093233.486 ops/s
Iteration  20: 1092311.488 ops/s
Iteration  21: 1095011.055 ops/s
Iteration  22: 1093733.345 ops/s
Iteration  23: 1087993.373 ops/s
Iteration  24: 1089526.347 ops/s
Iteration  25: 1084487.472 ops/s
Iteration  26: 1087172.962 ops/s
Iteration  27: 1089149.256 ops/s
Iteration  28: 1087624.609 ops/s
Iteration  29: 1090138.140 ops/s
Iteration  30: 1089504.750 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_listIterator_throwsNegative":
  1088934.737 ±(99.9%) 2124.788 ops/s [Average]
  (min, avg, max) = (1080990.474, 1088934.737, 1095011.055), stdev = 3180.283
  CI (99.9%): [1086809.949, 1091059.525] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_listIterator_throwsNegative  thrpt   30  1088934.737 ± 2124.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 521922.727 ops/s
# Warmup Iteration   2: 1173089.623 ops/s
# Warmup Iteration   3: 1181840.657 ops/s
# Warmup Iteration   4: 994086.639 ops/s
# Warmup Iteration   5: 1174284.935 ops/s
# Warmup Iteration   6: 1178948.192 ops/s
# Warmup Iteration   7: 1172591.511 ops/s
# Warmup Iteration   8: 1176148.899 ops/s
# Warmup Iteration   9: 1170819.205 ops/s
# Warmup Iteration  10: 1181137.899 ops/s
# Warmup Iteration  11: 1176948.836 ops/s
# Warmup Iteration  12: 1177342.834 ops/s
# Warmup Iteration  13: 1177460.525 ops/s
# Warmup Iteration  14: 1175591.655 ops/s
# Warmup Iteration  15: 1180803.661 ops/s
# Warmup Iteration  16: 1173868.574 ops/s
# Warmup Iteration  17: 1171848.565 ops/s
# Warmup Iteration  18: 1172363.311 ops/s
# Warmup Iteration  19: 1176017.149 ops/s
# Warmup Iteration  20: 1171526.768 ops/s
# Warmup Iteration  21: 1168555.531 ops/s
# Warmup Iteration  22: 1177313.208 ops/s
# Warmup Iteration  23: 1178022.607 ops/s
# Warmup Iteration  24: 1180914.571 ops/s
# Warmup Iteration  25: 1178022.330 ops/s
# Warmup Iteration  26: 1176178.712 ops/s
# Warmup Iteration  27: 1180419.610 ops/s
# Warmup Iteration  28: 1177690.948 ops/s
# Warmup Iteration  29: 1173495.625 ops/s
# Warmup Iteration  30: 1177840.023 ops/s
Iteration   1: 1177089.892 ops/s
Iteration   2: 1178628.334 ops/s
Iteration   3: 1180120.956 ops/s
Iteration   4: 1178851.598 ops/s
Iteration   5: 1178245.571 ops/s
Iteration   6: 1159565.166 ops/s
Iteration   7: 1179508.918 ops/s
Iteration   8: 1178305.794 ops/s
Iteration   9: 1176128.805 ops/s
Iteration  10: 1178766.062 ops/s
Iteration  11: 1177179.163 ops/s
Iteration  12: 1179557.407 ops/s
Iteration  13: 1178246.036 ops/s
Iteration  14: 1175436.282 ops/s
Iteration  15: 1177039.068 ops/s
Iteration  16: 1178615.798 ops/s
Iteration  17: 1181923.522 ops/s
Iteration  18: 1173520.320 ops/s
Iteration  19: 1172545.315 ops/s
Iteration  20: 1180808.753 ops/s
Iteration  21: 1175273.487 ops/s
Iteration  22: 1177622.559 ops/s
Iteration  23: 1179956.353 ops/s
Iteration  24: 1174558.322 ops/s
Iteration  25: 1170152.757 ops/s
Iteration  26: 1178003.251 ops/s
Iteration  27: 1180315.627 ops/s
Iteration  28: 1177359.177 ops/s
Iteration  29: 1173367.506 ops/s
Iteration  30: 1173560.043 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_makeString":
  1176675.061 ±(99.9%) 2818.384 ops/s [Average]
  (min, avg, max) = (1159565.166, 1176675.061, 1181923.522), stdev = 4218.425
  CI (99.9%): [1173856.677, 1179493.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_makeString  thrpt   30  1176675.061 ± 2818.384  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25125814.519 ops/s
# Warmup Iteration   2: 52400582.916 ops/s
# Warmup Iteration   3: 47646742.350 ops/s
# Warmup Iteration   4: 40497108.745 ops/s
# Warmup Iteration   5: 47827403.883 ops/s
# Warmup Iteration   6: 47963237.226 ops/s
# Warmup Iteration   7: 47929624.160 ops/s
# Warmup Iteration   8: 47967641.419 ops/s
# Warmup Iteration   9: 47923289.568 ops/s
# Warmup Iteration  10: 47987733.131 ops/s
# Warmup Iteration  11: 47928016.510 ops/s
# Warmup Iteration  12: 47809319.483 ops/s
# Warmup Iteration  13: 47821932.912 ops/s
# Warmup Iteration  14: 47577262.293 ops/s
# Warmup Iteration  15: 47812752.076 ops/s
# Warmup Iteration  16: 47733735.338 ops/s
# Warmup Iteration  17: 47889288.040 ops/s
# Warmup Iteration  18: 47899488.456 ops/s
# Warmup Iteration  19: 47801495.735 ops/s
# Warmup Iteration  20: 47858598.253 ops/s
# Warmup Iteration  21: 47772429.585 ops/s
# Warmup Iteration  22: 47605195.000 ops/s
# Warmup Iteration  23: 47744904.554 ops/s
# Warmup Iteration  24: 47865242.702 ops/s
# Warmup Iteration  25: 47885337.665 ops/s
# Warmup Iteration  26: 47841873.538 ops/s
# Warmup Iteration  27: 47849069.689 ops/s
# Warmup Iteration  28: 47870716.704 ops/s
# Warmup Iteration  29: 47619751.967 ops/s
# Warmup Iteration  30: 47949856.475 ops/s
Iteration   1: 47987926.868 ops/s
Iteration   2: 47862003.246 ops/s
Iteration   3: 48017612.201 ops/s
Iteration   4: 47944779.421 ops/s
Iteration   5: 47882267.574 ops/s
Iteration   6: 47980316.377 ops/s
Iteration   7: 47659371.767 ops/s
Iteration   8: 47769039.647 ops/s
Iteration   9: 47831045.944 ops/s
Iteration  10: 47930117.062 ops/s
Iteration  11: 47671091.647 ops/s
Iteration  12: 48058703.371 ops/s
Iteration  13: 47851232.351 ops/s
Iteration  14: 47855606.932 ops/s
Iteration  15: 48119591.573 ops/s
Iteration  16: 48043152.243 ops/s
Iteration  17: 48070662.860 ops/s
Iteration  18: 47987420.459 ops/s
Iteration  19: 47908536.497 ops/s
Iteration  20: 47913013.505 ops/s
Iteration  21: 47776639.174 ops/s
Iteration  22: 47941917.988 ops/s
Iteration  23: 48029889.348 ops/s
Iteration  24: 47964841.346 ops/s
Iteration  25: 47902546.328 ops/s
Iteration  26: 47930218.313 ops/s
Iteration  27: 47849774.930 ops/s
Iteration  28: 47948459.806 ops/s
Iteration  29: 47945534.903 ops/s
Iteration  30: 47561589.846 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_max":
  47906496.784 ±(99.9%) 84083.079 ops/s [Average]
  (min, avg, max) = (47561589.846, 47906496.784, 48119591.573), stdev = 125851.604
  CI (99.9%): [47822413.705, 47990579.863] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_max  thrpt   30  47906496.784 ± 84083.079  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25847544.677 ops/s
# Warmup Iteration   2: 53211312.134 ops/s
# Warmup Iteration   3: 43154425.205 ops/s
# Warmup Iteration   4: 50777696.935 ops/s
# Warmup Iteration   5: 50889377.500 ops/s
# Warmup Iteration   6: 50900603.288 ops/s
# Warmup Iteration   7: 50820974.464 ops/s
# Warmup Iteration   8: 50724705.618 ops/s
# Warmup Iteration   9: 50937468.542 ops/s
# Warmup Iteration  10: 50566902.893 ops/s
# Warmup Iteration  11: 51067066.060 ops/s
# Warmup Iteration  12: 51106844.630 ops/s
# Warmup Iteration  13: 51003142.949 ops/s
# Warmup Iteration  14: 50904730.028 ops/s
# Warmup Iteration  15: 51054568.503 ops/s
# Warmup Iteration  16: 50954823.938 ops/s
# Warmup Iteration  17: 51028207.130 ops/s
# Warmup Iteration  18: 50756474.637 ops/s
# Warmup Iteration  19: 50626586.413 ops/s
# Warmup Iteration  20: 51055542.212 ops/s
# Warmup Iteration  21: 49127642.638 ops/s
# Warmup Iteration  22: 50860813.850 ops/s
# Warmup Iteration  23: 50884719.043 ops/s
# Warmup Iteration  24: 50964290.472 ops/s
# Warmup Iteration  25: 50930654.312 ops/s
# Warmup Iteration  26: 51262224.971 ops/s
# Warmup Iteration  27: 50734861.993 ops/s
# Warmup Iteration  28: 50883689.598 ops/s
# Warmup Iteration  29: 50905627.408 ops/s
# Warmup Iteration  30: 50583776.542 ops/s
Iteration   1: 50839752.187 ops/s
Iteration   2: 46764660.600 ops/s
Iteration   3: 50942810.195 ops/s
Iteration   4: 50744002.710 ops/s
Iteration   5: 50816330.262 ops/s
Iteration   6: 50673904.458 ops/s
Iteration   7: 50951590.600 ops/s
Iteration   8: 50807111.625 ops/s
Iteration   9: 50888857.941 ops/s
Iteration  10: 50583436.315 ops/s
Iteration  11: 50931238.847 ops/s
Iteration  12: 51063611.540 ops/s
Iteration  13: 51007011.369 ops/s
Iteration  14: 51129948.142 ops/s
Iteration  15: 50468170.377 ops/s
Iteration  16: 51129665.310 ops/s
Iteration  17: 50866026.956 ops/s
Iteration  18: 51013735.705 ops/s
Iteration  19: 51051289.760 ops/s
Iteration  20: 51135265.456 ops/s
Iteration  21: 50823328.142 ops/s
Iteration  22: 50970472.564 ops/s
Iteration  23: 50514182.266 ops/s
Iteration  24: 50714270.996 ops/s
Iteration  25: 50859740.608 ops/s
Iteration  26: 51038684.062 ops/s
Iteration  27: 50734171.314 ops/s
Iteration  28: 50952652.577 ops/s
Iteration  29: 51148947.513 ops/s
Iteration  30: 50886056.130 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_maxBy":
  50748364.218 ±(99.9%) 516653.097 ops/s [Average]
  (min, avg, max) = (46764660.600, 50748364.218, 51148947.513), stdev = 773302.091
  CI (99.9%): [50231711.121, 51265017.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_maxBy  thrpt   30  50748364.218 ± 516653.097  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4512217.809 ops/s
# Warmup Iteration   2: 5569308.316 ops/s
# Warmup Iteration   3: 6932026.074 ops/s
# Warmup Iteration   4: 6989913.805 ops/s
# Warmup Iteration   5: 7030867.817 ops/s
# Warmup Iteration   6: 6444587.461 ops/s
# Warmup Iteration   7: 7026247.022 ops/s
# Warmup Iteration   8: 6948825.375 ops/s
# Warmup Iteration   9: 5776357.823 ops/s
# Warmup Iteration  10: 6956911.986 ops/s
# Warmup Iteration  11: 6955698.424 ops/s
# Warmup Iteration  12: 6958028.326 ops/s
# Warmup Iteration  13: 6956002.910 ops/s
# Warmup Iteration  14: 6957074.079 ops/s
# Warmup Iteration  15: 6944387.702 ops/s
# Warmup Iteration  16: 6957979.826 ops/s
# Warmup Iteration  17: 6970177.394 ops/s
# Warmup Iteration  18: 6949643.147 ops/s
# Warmup Iteration  19: 6923966.099 ops/s
# Warmup Iteration  20: 6960670.452 ops/s
# Warmup Iteration  21: 6952291.908 ops/s
# Warmup Iteration  22: 6965596.790 ops/s
# Warmup Iteration  23: 6920324.154 ops/s
# Warmup Iteration  24: 6948343.574 ops/s
# Warmup Iteration  25: 6974844.704 ops/s
# Warmup Iteration  26: 6942610.001 ops/s
# Warmup Iteration  27: 6980935.462 ops/s
# Warmup Iteration  28: 6963224.704 ops/s
# Warmup Iteration  29: 6969676.229 ops/s
# Warmup Iteration  30: 6916423.635 ops/s
Iteration   1: 6957304.874 ops/s
Iteration   2: 6940615.418 ops/s
Iteration   3: 6944219.097 ops/s
Iteration   4: 6948078.899 ops/s
Iteration   5: 6940784.167 ops/s
Iteration   6: 6962491.354 ops/s
Iteration   7: 6943132.894 ops/s
Iteration   8: 6965706.217 ops/s
Iteration   9: 6953896.970 ops/s
Iteration  10: 6962586.289 ops/s
Iteration  11: 6979756.432 ops/s
Iteration  12: 6941760.691 ops/s
Iteration  13: 6966273.189 ops/s
Iteration  14: 6985149.979 ops/s
Iteration  15: 6978814.647 ops/s
Iteration  16: 6591681.026 ops/s
Iteration  17: 6971638.779 ops/s
Iteration  18: 6943672.268 ops/s
Iteration  19: 6929259.690 ops/s
Iteration  20: 6917500.588 ops/s
Iteration  21: 6979743.376 ops/s
Iteration  22: 6914388.505 ops/s
Iteration  23: 6969351.224 ops/s
Iteration  24: 6966788.594 ops/s
Iteration  25: 6948151.976 ops/s
Iteration  26: 6926824.882 ops/s
Iteration  27: 6963540.995 ops/s
Iteration  28: 6938368.717 ops/s
Iteration  29: 6958297.235 ops/s
Iteration  30: 6961141.401 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_max_null_throws":
  6941697.346 ±(99.9%) 45812.133 ops/s [Average]
  (min, avg, max) = (6591681.026, 6941697.346, 6985149.979), stdev = 68569.449
  CI (99.9%): [6895885.213, 6987509.479] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_max_null_throws  thrpt   30  6941697.346 ± 45812.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4473644.349 ops/s
# Warmup Iteration   2: 5657668.816 ops/s
# Warmup Iteration   3: 7087105.404 ops/s
# Warmup Iteration   4: 6956511.331 ops/s
# Warmup Iteration   5: 7100720.899 ops/s
# Warmup Iteration   6: 7080080.893 ops/s
# Warmup Iteration   7: 7098315.011 ops/s
# Warmup Iteration   8: 7044600.731 ops/s
# Warmup Iteration   9: 5850205.864 ops/s
# Warmup Iteration  10: 7083369.956 ops/s
# Warmup Iteration  11: 7113331.722 ops/s
# Warmup Iteration  12: 7106419.302 ops/s
# Warmup Iteration  13: 7124439.277 ops/s
# Warmup Iteration  14: 7110200.630 ops/s
# Warmup Iteration  15: 7090315.788 ops/s
# Warmup Iteration  16: 7115782.596 ops/s
# Warmup Iteration  17: 7100648.799 ops/s
# Warmup Iteration  18: 7113122.077 ops/s
# Warmup Iteration  19: 7091045.655 ops/s
# Warmup Iteration  20: 7105906.340 ops/s
# Warmup Iteration  21: 7106360.796 ops/s
# Warmup Iteration  22: 7114732.184 ops/s
# Warmup Iteration  23: 7129392.370 ops/s
# Warmup Iteration  24: 7122031.723 ops/s
# Warmup Iteration  25: 7115362.332 ops/s
# Warmup Iteration  26: 7112722.994 ops/s
# Warmup Iteration  27: 7110935.416 ops/s
# Warmup Iteration  28: 7108323.162 ops/s
# Warmup Iteration  29: 7110658.061 ops/s
# Warmup Iteration  30: 7108373.179 ops/s
Iteration   1: 7096183.512 ops/s
Iteration   2: 7061535.559 ops/s
Iteration   3: 7072472.379 ops/s
Iteration   4: 7120837.228 ops/s
Iteration   5: 7117083.542 ops/s
Iteration   6: 7117151.642 ops/s
Iteration   7: 7040365.285 ops/s
Iteration   8: 7111934.204 ops/s
Iteration   9: 7095348.799 ops/s
Iteration  10: 7127295.578 ops/s
Iteration  11: 7083683.890 ops/s
Iteration  12: 7132022.248 ops/s
Iteration  13: 7119868.707 ops/s
Iteration  14: 7078721.341 ops/s
Iteration  15: 7128141.666 ops/s
Iteration  16: 6974481.081 ops/s
Iteration  17: 7001103.273 ops/s
Iteration  18: 7085760.169 ops/s
Iteration  19: 7115997.550 ops/s
Iteration  20: 7093424.926 ops/s
Iteration  21: 7075993.966 ops/s
Iteration  22: 7078649.788 ops/s
Iteration  23: 7020884.803 ops/s
Iteration  24: 7055450.608 ops/s
Iteration  25: 7078431.430 ops/s
Iteration  26: 7072533.786 ops/s
Iteration  27: 6961148.223 ops/s
Iteration  28: 6956015.583 ops/s
Iteration  29: 7091625.715 ops/s
Iteration  30: 7105278.914 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  7075647.513 ±(99.9%) 32711.826 ops/s [Average]
  (min, avg, max) = (6956015.583, 7075647.513, 7132022.248), stdev = 48961.524
  CI (99.9%): [7042935.688, 7108359.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  7075647.513 ± 32711.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26094997.611 ops/s
# Warmup Iteration   2: 51780474.935 ops/s
# Warmup Iteration   3: 43613122.210 ops/s
# Warmup Iteration   4: 50855147.575 ops/s
# Warmup Iteration   5: 51292278.902 ops/s
# Warmup Iteration   6: 50979886.095 ops/s
# Warmup Iteration   7: 50847448.603 ops/s
# Warmup Iteration   8: 50973497.523 ops/s
# Warmup Iteration   9: 51051688.254 ops/s
# Warmup Iteration  10: 50720198.513 ops/s
# Warmup Iteration  11: 50702014.221 ops/s
# Warmup Iteration  12: 50863399.877 ops/s
# Warmup Iteration  13: 51062938.579 ops/s
# Warmup Iteration  14: 50931574.915 ops/s
# Warmup Iteration  15: 51070524.759 ops/s
# Warmup Iteration  16: 51198576.405 ops/s
# Warmup Iteration  17: 50955167.199 ops/s
# Warmup Iteration  18: 51061925.123 ops/s
# Warmup Iteration  19: 51079560.570 ops/s
# Warmup Iteration  20: 51191652.582 ops/s
# Warmup Iteration  21: 50795971.616 ops/s
# Warmup Iteration  22: 50862921.129 ops/s
# Warmup Iteration  23: 50799098.406 ops/s
# Warmup Iteration  24: 50968824.087 ops/s
# Warmup Iteration  25: 51228576.494 ops/s
# Warmup Iteration  26: 50914558.890 ops/s
# Warmup Iteration  27: 51051796.306 ops/s
# Warmup Iteration  28: 50648481.399 ops/s
# Warmup Iteration  29: 51060926.767 ops/s
# Warmup Iteration  30: 50901978.295 ops/s
Iteration   1: 51094178.939 ops/s
Iteration   2: 50899922.296 ops/s
Iteration   3: 50821329.948 ops/s
Iteration   4: 50574820.783 ops/s
Iteration   5: 51070208.317 ops/s
Iteration   6: 50888718.915 ops/s
Iteration   7: 50882262.004 ops/s
Iteration   8: 51343471.839 ops/s
Iteration   9: 51418767.792 ops/s
Iteration  10: 51306233.411 ops/s
Iteration  11: 50826580.125 ops/s
Iteration  12: 51448695.138 ops/s
Iteration  13: 50524361.093 ops/s
Iteration  14: 50808003.854 ops/s
Iteration  15: 51188874.569 ops/s
Iteration  16: 51174143.222 ops/s
Iteration  17: 50578757.093 ops/s
Iteration  18: 50613154.956 ops/s
Iteration  19: 50895227.691 ops/s
Iteration  20: 50980670.539 ops/s
Iteration  21: 51263628.050 ops/s
Iteration  22: 51094444.543 ops/s
Iteration  23: 51080594.673 ops/s
Iteration  24: 50568106.692 ops/s
Iteration  25: 50578677.047 ops/s
Iteration  26: 51202509.705 ops/s
Iteration  27: 51066798.966 ops/s
Iteration  28: 50949174.514 ops/s
Iteration  29: 51202849.413 ops/s
Iteration  30: 50954190.490 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_max_without_comparator":
  50976645.221 ±(99.9%) 178616.285 ops/s [Average]
  (min, avg, max) = (50524361.093, 50976645.221, 51448695.138), stdev = 267344.467
  CI (99.9%): [50798028.935, 51155261.506] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  50976645.221 ± 178616.285  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37441630.042 ops/s
# Warmup Iteration   2: 70513783.398 ops/s
# Warmup Iteration   3: 65890929.828 ops/s
# Warmup Iteration   4: 78149364.801 ops/s
# Warmup Iteration   5: 77825440.045 ops/s
# Warmup Iteration   6: 77880188.443 ops/s
# Warmup Iteration   7: 78500982.877 ops/s
# Warmup Iteration   8: 78079985.468 ops/s
# Warmup Iteration   9: 78300297.839 ops/s
# Warmup Iteration  10: 78046914.159 ops/s
# Warmup Iteration  11: 77919836.564 ops/s
# Warmup Iteration  12: 78367993.978 ops/s
# Warmup Iteration  13: 78217841.406 ops/s
# Warmup Iteration  14: 78001503.574 ops/s
# Warmup Iteration  15: 78222586.255 ops/s
# Warmup Iteration  16: 78399991.141 ops/s
# Warmup Iteration  17: 77211231.614 ops/s
# Warmup Iteration  18: 78086544.937 ops/s
# Warmup Iteration  19: 77707027.656 ops/s
# Warmup Iteration  20: 77760140.221 ops/s
# Warmup Iteration  21: 77106929.143 ops/s
# Warmup Iteration  22: 78262729.958 ops/s
# Warmup Iteration  23: 78312153.397 ops/s
# Warmup Iteration  24: 78291489.687 ops/s
# Warmup Iteration  25: 77194117.745 ops/s
# Warmup Iteration  26: 78421503.154 ops/s
# Warmup Iteration  27: 78492323.725 ops/s
# Warmup Iteration  28: 78053849.757 ops/s
# Warmup Iteration  29: 78283222.679 ops/s
# Warmup Iteration  30: 77314140.004 ops/s
Iteration   1: 78593352.324 ops/s
Iteration   2: 78342713.415 ops/s
Iteration   3: 78207452.698 ops/s
Iteration   4: 78315941.434 ops/s
Iteration   5: 78500031.012 ops/s
Iteration   6: 78460386.367 ops/s
Iteration   7: 76784078.173 ops/s
Iteration   8: 78414356.843 ops/s
Iteration   9: 78457278.543 ops/s
Iteration  10: 78180507.671 ops/s
Iteration  11: 78691853.794 ops/s
Iteration  12: 78678783.834 ops/s
Iteration  13: 78383648.878 ops/s
Iteration  14: 77371814.540 ops/s
Iteration  15: 78589593.075 ops/s
Iteration  16: 78446894.836 ops/s
Iteration  17: 77886117.286 ops/s
Iteration  18: 78262585.345 ops/s
Iteration  19: 78135600.572 ops/s
Iteration  20: 78227876.488 ops/s
Iteration  21: 78267382.526 ops/s
Iteration  22: 78148543.785 ops/s
Iteration  23: 78224120.505 ops/s
Iteration  24: 78121988.029 ops/s
Iteration  25: 77930006.758 ops/s
Iteration  26: 77983507.905 ops/s
Iteration  27: 78131326.850 ops/s
Iteration  28: 78336742.408 ops/s
Iteration  29: 77414192.490 ops/s
Iteration  30: 78147631.204 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_min":
  78187876.986 ±(99.9%) 270323.342 ops/s [Average]
  (min, avg, max) = (76784078.173, 78187876.986, 78691853.794), stdev = 404607.282
  CI (99.9%): [77917553.645, 78458200.328] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_min  thrpt   30  78187876.986 ± 270323.342  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15545994.272 ops/s
# Warmup Iteration   2: 29895780.170 ops/s
# Warmup Iteration   3: 26408597.779 ops/s
# Warmup Iteration   4: 31039853.308 ops/s
# Warmup Iteration   5: 30865268.203 ops/s
# Warmup Iteration   6: 30963509.848 ops/s
# Warmup Iteration   7: 31092211.203 ops/s
# Warmup Iteration   8: 30959263.405 ops/s
# Warmup Iteration   9: 31052248.515 ops/s
# Warmup Iteration  10: 31006499.380 ops/s
# Warmup Iteration  11: 30902719.667 ops/s
# Warmup Iteration  12: 30997794.279 ops/s
# Warmup Iteration  13: 30797413.925 ops/s
# Warmup Iteration  14: 30991105.325 ops/s
# Warmup Iteration  15: 30994977.335 ops/s
# Warmup Iteration  16: 31001725.502 ops/s
# Warmup Iteration  17: 31055709.338 ops/s
# Warmup Iteration  18: 31022407.543 ops/s
# Warmup Iteration  19: 31089927.992 ops/s
# Warmup Iteration  20: 31040100.901 ops/s
# Warmup Iteration  21: 31000887.096 ops/s
# Warmup Iteration  22: 30950618.671 ops/s
# Warmup Iteration  23: 30973965.384 ops/s
# Warmup Iteration  24: 31011649.249 ops/s
# Warmup Iteration  25: 30726390.718 ops/s
# Warmup Iteration  26: 31030639.467 ops/s
# Warmup Iteration  27: 31013904.492 ops/s
# Warmup Iteration  28: 30778625.712 ops/s
# Warmup Iteration  29: 31087519.253 ops/s
# Warmup Iteration  30: 30981596.741 ops/s
Iteration   1: 31121864.280 ops/s
Iteration   2: 31043313.699 ops/s
Iteration   3: 31056026.006 ops/s
Iteration   4: 31045643.278 ops/s
Iteration   5: 31138099.207 ops/s
Iteration   6: 31063100.244 ops/s
Iteration   7: 30814294.415 ops/s
Iteration   8: 31027442.225 ops/s
Iteration   9: 30950472.950 ops/s
Iteration  10: 31117873.661 ops/s
Iteration  11: 30936369.682 ops/s
Iteration  12: 31030705.131 ops/s
Iteration  13: 30865163.858 ops/s
Iteration  14: 30886663.871 ops/s
Iteration  15: 31117491.488 ops/s
Iteration  16: 31098328.030 ops/s
Iteration  17: 30931485.534 ops/s
Iteration  18: 30796277.124 ops/s
Iteration  19: 31031461.245 ops/s
Iteration  20: 30724095.862 ops/s
Iteration  21: 30944548.170 ops/s
Iteration  22: 31043706.272 ops/s
Iteration  23: 31019453.256 ops/s
Iteration  24: 31117489.562 ops/s
Iteration  25: 30959633.401 ops/s
Iteration  26: 31036681.707 ops/s
Iteration  27: 31010725.706 ops/s
Iteration  28: 30940549.151 ops/s
Iteration  29: 30961854.671 ops/s
Iteration  30: 31026019.935 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_minBy":
  30995227.787 ±(99.9%) 68700.226 ops/s [Average]
  (min, avg, max) = (30724095.862, 30995227.787, 31138099.207), stdev = 102827.273
  CI (99.9%): [30926527.561, 31063928.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_minBy  thrpt   30  30995227.787 ± 68700.226  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4569886.689 ops/s
# Warmup Iteration   2: 5690432.004 ops/s
# Warmup Iteration   3: 7100147.831 ops/s
# Warmup Iteration   4: 7105383.829 ops/s
# Warmup Iteration   5: 7139767.160 ops/s
# Warmup Iteration   6: 7153962.126 ops/s
# Warmup Iteration   7: 7147367.288 ops/s
# Warmup Iteration   8: 7136538.112 ops/s
# Warmup Iteration   9: 5944706.905 ops/s
# Warmup Iteration  10: 7155532.513 ops/s
# Warmup Iteration  11: 7142776.638 ops/s
# Warmup Iteration  12: 7154312.969 ops/s
# Warmup Iteration  13: 7150606.132 ops/s
# Warmup Iteration  14: 7161294.104 ops/s
# Warmup Iteration  15: 7135199.390 ops/s
# Warmup Iteration  16: 7157118.365 ops/s
# Warmup Iteration  17: 7121077.206 ops/s
# Warmup Iteration  18: 7149553.320 ops/s
# Warmup Iteration  19: 7148620.254 ops/s
# Warmup Iteration  20: 7148508.986 ops/s
# Warmup Iteration  21: 7148914.323 ops/s
# Warmup Iteration  22: 7150318.045 ops/s
# Warmup Iteration  23: 7159941.036 ops/s
# Warmup Iteration  24: 7127381.857 ops/s
# Warmup Iteration  25: 7147411.721 ops/s
# Warmup Iteration  26: 7131363.909 ops/s
# Warmup Iteration  27: 7126377.163 ops/s
# Warmup Iteration  28: 7152552.885 ops/s
# Warmup Iteration  29: 7135977.160 ops/s
# Warmup Iteration  30: 7140544.538 ops/s
Iteration   1: 7155033.638 ops/s
Iteration   2: 7103457.179 ops/s
Iteration   3: 7131435.660 ops/s
Iteration   4: 7140718.255 ops/s
Iteration   5: 7127708.269 ops/s
Iteration   6: 7135980.846 ops/s
Iteration   7: 7126226.067 ops/s
Iteration   8: 7105114.765 ops/s
Iteration   9: 7101154.379 ops/s
Iteration  10: 7129339.168 ops/s
Iteration  11: 7123134.453 ops/s
Iteration  12: 7110260.104 ops/s
Iteration  13: 7119516.129 ops/s
Iteration  14: 7135950.756 ops/s
Iteration  15: 7134881.297 ops/s
Iteration  16: 7118692.556 ops/s
Iteration  17: 7143002.928 ops/s
Iteration  18: 7138912.358 ops/s
Iteration  19: 7130860.526 ops/s
Iteration  20: 7140473.316 ops/s
Iteration  21: 7084786.988 ops/s
Iteration  22: 7077376.020 ops/s
Iteration  23: 7126264.613 ops/s
Iteration  24: 7141536.965 ops/s
Iteration  25: 7160801.523 ops/s
Iteration  26: 7142859.692 ops/s
Iteration  27: 7166910.062 ops/s
Iteration  28: 7126672.974 ops/s
Iteration  29: 7166982.009 ops/s
Iteration  30: 7141463.550 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_min_null_throws":
  7129583.568 ±(99.9%) 14140.141 ops/s [Average]
  (min, avg, max) = (7077376.020, 7129583.568, 7166982.009), stdev = 21164.299
  CI (99.9%): [7115443.427, 7143723.709] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_min_null_throws  thrpt   30  7129583.568 ± 14140.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6129342.573 ops/s
# Warmup Iteration   2: 13898132.103 ops/s
# Warmup Iteration   3: 14207442.995 ops/s
# Warmup Iteration   4: 11940972.635 ops/s
# Warmup Iteration   5: 14195921.291 ops/s
# Warmup Iteration   6: 14239159.854 ops/s
# Warmup Iteration   7: 14234237.107 ops/s
# Warmup Iteration   8: 14230014.569 ops/s
# Warmup Iteration   9: 14229224.256 ops/s
# Warmup Iteration  10: 14247357.578 ops/s
# Warmup Iteration  11: 14250834.497 ops/s
# Warmup Iteration  12: 14187750.952 ops/s
# Warmup Iteration  13: 14255474.738 ops/s
# Warmup Iteration  14: 14182006.940 ops/s
# Warmup Iteration  15: 14213557.696 ops/s
# Warmup Iteration  16: 14169548.140 ops/s
# Warmup Iteration  17: 14223489.066 ops/s
# Warmup Iteration  18: 14200978.335 ops/s
# Warmup Iteration  19: 14215523.432 ops/s
# Warmup Iteration  20: 14255283.229 ops/s
# Warmup Iteration  21: 14292540.930 ops/s
# Warmup Iteration  22: 14289300.228 ops/s
# Warmup Iteration  23: 14136135.926 ops/s
# Warmup Iteration  24: 14183471.093 ops/s
# Warmup Iteration  25: 14274435.629 ops/s
# Warmup Iteration  26: 14269982.756 ops/s
# Warmup Iteration  27: 14229314.831 ops/s
# Warmup Iteration  28: 14196213.512 ops/s
# Warmup Iteration  29: 14284716.732 ops/s
# Warmup Iteration  30: 14232846.527 ops/s
Iteration   1: 14267179.969 ops/s
Iteration   2: 14204810.521 ops/s
Iteration   3: 14269364.534 ops/s
Iteration   4: 14266015.975 ops/s
Iteration   5: 14232256.585 ops/s
Iteration   6: 14229721.230 ops/s
Iteration   7: 14267599.162 ops/s
Iteration   8: 14260569.128 ops/s
Iteration   9: 14228318.749 ops/s
Iteration  10: 14207970.874 ops/s
Iteration  11: 14269003.060 ops/s
Iteration  12: 14247975.958 ops/s
Iteration  13: 14185511.908 ops/s
Iteration  14: 14236016.920 ops/s
Iteration  15: 14198941.759 ops/s
Iteration  16: 14310310.543 ops/s
Iteration  17: 14205831.859 ops/s
Iteration  18: 14279234.631 ops/s
Iteration  19: 14205415.320 ops/s
Iteration  20: 14292170.511 ops/s
Iteration  21: 14120506.133 ops/s
Iteration  22: 14159563.444 ops/s
Iteration  23: 14219635.454 ops/s
Iteration  24: 14242085.472 ops/s
Iteration  25: 14187915.195 ops/s
Iteration  26: 14270096.001 ops/s
Iteration  27: 14300438.266 ops/s
Iteration  28: 14218545.601 ops/s
Iteration  29: 14235511.082 ops/s
Iteration  30: 14243132.328 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  14235388.272 ±(99.9%) 28145.092 ops/s [Average]
  (min, avg, max) = (14120506.133, 14235388.272, 14310310.543), stdev = 42126.252
  CI (99.9%): [14207243.180, 14263533.365] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  14235388.272 ± 28145.092  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37352415.037 ops/s
# Warmup Iteration   2: 72693746.822 ops/s
# Warmup Iteration   3: 66556753.258 ops/s
# Warmup Iteration   4: 77851615.035 ops/s
# Warmup Iteration   5: 78307378.524 ops/s
# Warmup Iteration   6: 78318363.923 ops/s
# Warmup Iteration   7: 78237151.284 ops/s
# Warmup Iteration   8: 76983724.890 ops/s
# Warmup Iteration   9: 78059651.386 ops/s
# Warmup Iteration  10: 78121878.099 ops/s
# Warmup Iteration  11: 78285613.992 ops/s
# Warmup Iteration  12: 78114608.558 ops/s
# Warmup Iteration  13: 78048015.981 ops/s
# Warmup Iteration  14: 77815445.119 ops/s
# Warmup Iteration  15: 78095433.590 ops/s
# Warmup Iteration  16: 77904507.050 ops/s
# Warmup Iteration  17: 77956731.563 ops/s
# Warmup Iteration  18: 78410710.128 ops/s
# Warmup Iteration  19: 78277083.623 ops/s
# Warmup Iteration  20: 78253133.642 ops/s
# Warmup Iteration  21: 78303905.231 ops/s
# Warmup Iteration  22: 78118074.630 ops/s
# Warmup Iteration  23: 78499396.536 ops/s
# Warmup Iteration  24: 77474886.952 ops/s
# Warmup Iteration  25: 78126359.370 ops/s
# Warmup Iteration  26: 78181106.430 ops/s
# Warmup Iteration  27: 78237344.213 ops/s
# Warmup Iteration  28: 78217938.484 ops/s
# Warmup Iteration  29: 78288366.451 ops/s
# Warmup Iteration  30: 77982005.047 ops/s
Iteration   1: 78315597.100 ops/s
Iteration   2: 77893005.199 ops/s
Iteration   3: 78076188.822 ops/s
Iteration   4: 77953107.526 ops/s
Iteration   5: 77718129.215 ops/s
Iteration   6: 78097857.107 ops/s
Iteration   7: 78093253.250 ops/s
Iteration   8: 78200858.415 ops/s
Iteration   9: 77608584.502 ops/s
Iteration  10: 77565668.475 ops/s
Iteration  11: 78043431.225 ops/s
Iteration  12: 78044574.562 ops/s
Iteration  13: 78149419.934 ops/s
Iteration  14: 78227453.163 ops/s
Iteration  15: 77921562.704 ops/s
Iteration  16: 78031863.387 ops/s
Iteration  17: 78483765.101 ops/s
Iteration  18: 78113116.091 ops/s
Iteration  19: 77541655.235 ops/s
Iteration  20: 78261279.155 ops/s
Iteration  21: 78083243.993 ops/s
Iteration  22: 78252273.139 ops/s
Iteration  23: 78146055.682 ops/s
Iteration  24: 78368950.154 ops/s
Iteration  25: 77835560.920 ops/s
Iteration  26: 78148931.004 ops/s
Iteration  27: 78063549.869 ops/s
Iteration  28: 78255817.288 ops/s
Iteration  29: 78124357.519 ops/s
Iteration  30: 78312653.635 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_min_without_comparator":
  78064392.112 ±(99.9%) 154200.900 ops/s [Average]
  (min, avg, max) = (77541655.235, 78064392.112, 78483765.101), stdev = 230800.665
  CI (99.9%): [77910191.212, 78218593.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  78064392.112 ± 154200.900  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19410497.865 ops/s
# Warmup Iteration   2: 38768459.351 ops/s
# Warmup Iteration   3: 31735575.610 ops/s
# Warmup Iteration   4: 37466838.699 ops/s
# Warmup Iteration   5: 37656727.441 ops/s
# Warmup Iteration   6: 37716872.082 ops/s
# Warmup Iteration   7: 37540908.748 ops/s
# Warmup Iteration   8: 37450551.133 ops/s
# Warmup Iteration   9: 37737099.549 ops/s
# Warmup Iteration  10: 37623632.122 ops/s
# Warmup Iteration  11: 37781770.757 ops/s
# Warmup Iteration  12: 37759707.271 ops/s
# Warmup Iteration  13: 37785980.738 ops/s
# Warmup Iteration  14: 37755496.168 ops/s
# Warmup Iteration  15: 37714355.266 ops/s
# Warmup Iteration  16: 37650252.442 ops/s
# Warmup Iteration  17: 37848196.106 ops/s
# Warmup Iteration  18: 37830028.798 ops/s
# Warmup Iteration  19: 37769180.784 ops/s
# Warmup Iteration  20: 37707861.321 ops/s
# Warmup Iteration  21: 37768103.353 ops/s
# Warmup Iteration  22: 37851452.405 ops/s
# Warmup Iteration  23: 37755440.967 ops/s
# Warmup Iteration  24: 37599973.756 ops/s
# Warmup Iteration  25: 37722140.543 ops/s
# Warmup Iteration  26: 37701786.879 ops/s
# Warmup Iteration  27: 37805560.992 ops/s
# Warmup Iteration  28: 37583361.457 ops/s
# Warmup Iteration  29: 37500338.750 ops/s
# Warmup Iteration  30: 37676107.077 ops/s
Iteration   1: 37354564.030 ops/s
Iteration   2: 36803074.482 ops/s
Iteration   3: 37885550.307 ops/s
Iteration   4: 37755078.679 ops/s
Iteration   5: 37708213.196 ops/s
Iteration   6: 37889305.021 ops/s
Iteration   7: 37584598.648 ops/s
Iteration   8: 37852360.886 ops/s
Iteration   9: 37735398.958 ops/s
Iteration  10: 37835028.360 ops/s
Iteration  11: 37722066.030 ops/s
Iteration  12: 37705247.229 ops/s
Iteration  13: 37715368.559 ops/s
Iteration  14: 37681553.707 ops/s
Iteration  15: 37777085.690 ops/s
Iteration  16: 37585894.789 ops/s
Iteration  17: 37423003.138 ops/s
Iteration  18: 37708191.848 ops/s
Iteration  19: 37679698.236 ops/s
Iteration  20: 37363488.845 ops/s
Iteration  21: 37796966.155 ops/s
Iteration  22: 37560161.237 ops/s
Iteration  23: 37602873.837 ops/s
Iteration  24: 37774423.558 ops/s
Iteration  25: 37557204.152 ops/s
Iteration  26: 37820418.806 ops/s
Iteration  27: 37774531.611 ops/s
Iteration  28: 37729113.785 ops/s
Iteration  29: 37805755.773 ops/s
Iteration  30: 37790685.378 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_noneSatisfy":
  37665896.831 ±(99.9%) 143263.376 ops/s [Average]
  (min, avg, max) = (36803074.482, 37665896.831, 37889305.021), stdev = 214429.893
  CI (99.9%): [37522633.455, 37809160.207] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  37665896.831 ± 143263.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10845951.107 ops/s
# Warmup Iteration   2: 22431610.056 ops/s
# Warmup Iteration   3: 19969982.783 ops/s
# Warmup Iteration   4: 21253211.809 ops/s
# Warmup Iteration   5: 22318402.911 ops/s
# Warmup Iteration   6: 22282247.033 ops/s
# Warmup Iteration   7: 22366847.235 ops/s
# Warmup Iteration   8: 22362111.616 ops/s
# Warmup Iteration   9: 22293107.474 ops/s
# Warmup Iteration  10: 22322258.868 ops/s
# Warmup Iteration  11: 22340937.889 ops/s
# Warmup Iteration  12: 22221526.586 ops/s
# Warmup Iteration  13: 22294783.668 ops/s
# Warmup Iteration  14: 22332360.795 ops/s
# Warmup Iteration  15: 22412476.928 ops/s
# Warmup Iteration  16: 22284719.478 ops/s
# Warmup Iteration  17: 22293753.782 ops/s
# Warmup Iteration  18: 22319094.197 ops/s
# Warmup Iteration  19: 22274276.130 ops/s
# Warmup Iteration  20: 22326135.940 ops/s
# Warmup Iteration  21: 22361769.156 ops/s
# Warmup Iteration  22: 22285337.996 ops/s
# Warmup Iteration  23: 22300691.052 ops/s
# Warmup Iteration  24: 22373573.244 ops/s
# Warmup Iteration  25: 22374919.825 ops/s
# Warmup Iteration  26: 22365204.813 ops/s
# Warmup Iteration  27: 22310344.423 ops/s
# Warmup Iteration  28: 22404054.243 ops/s
# Warmup Iteration  29: 22410506.221 ops/s
# Warmup Iteration  30: 22343878.715 ops/s
Iteration   1: 22409771.461 ops/s
Iteration   2: 22398165.276 ops/s
Iteration   3: 22292307.633 ops/s
Iteration   4: 22315565.456 ops/s
Iteration   5: 22270910.758 ops/s
Iteration   6: 22292301.785 ops/s
Iteration   7: 22268466.196 ops/s
Iteration   8: 22338658.326 ops/s
Iteration   9: 22259810.904 ops/s
Iteration  10: 22336174.633 ops/s
Iteration  11: 22367442.407 ops/s
Iteration  12: 22385254.661 ops/s
Iteration  13: 22223608.773 ops/s
Iteration  14: 22268800.349 ops/s
Iteration  15: 22335084.811 ops/s
Iteration  16: 22249295.907 ops/s
Iteration  17: 22373426.480 ops/s
Iteration  18: 22349613.601 ops/s
Iteration  19: 20982256.449 ops/s
Iteration  20: 22261814.309 ops/s
Iteration  21: 22287403.360 ops/s
Iteration  22: 22370121.409 ops/s
Iteration  23: 22277316.908 ops/s
Iteration  24: 22422213.738 ops/s
Iteration  25: 22262598.838 ops/s
Iteration  26: 22261522.756 ops/s
Iteration  27: 22222035.168 ops/s
Iteration  28: 22403488.065 ops/s
Iteration  29: 22183952.836 ops/s
Iteration  30: 22338281.730 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_noneSatisfyWith":
  22266922.166 ±(99.9%) 167318.015 ops/s [Average]
  (min, avg, max) = (20982256.449, 22266922.166, 22422213.738), stdev = 250433.748
  CI (99.9%): [22099604.151, 22434240.181] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  22266922.166 ± 167318.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17482.564 ops/s
# Warmup Iteration   2: 20254.390 ops/s
# Warmup Iteration   3: 19642.298 ops/s
# Warmup Iteration   4: 19434.698 ops/s
# Warmup Iteration   5: 19381.608 ops/s
# Warmup Iteration   6: 19339.779 ops/s
# Warmup Iteration   7: 21123.725 ops/s
# Warmup Iteration   8: 27846.466 ops/s
# Warmup Iteration   9: 29622.449 ops/s
# Warmup Iteration  10: 29768.313 ops/s
# Warmup Iteration  11: 28945.938 ops/s
# Warmup Iteration  12: 29341.308 ops/s
# Warmup Iteration  13: 30073.558 ops/s
# Warmup Iteration  14: 30471.261 ops/s
# Warmup Iteration  15: 29671.251 ops/s
# Warmup Iteration  16: 30197.509 ops/s
# Warmup Iteration  17: 29786.709 ops/s
# Warmup Iteration  18: 27593.255 ops/s
# Warmup Iteration  19: 29816.244 ops/s
# Warmup Iteration  20: 29083.149 ops/s
# Warmup Iteration  21: 30483.689 ops/s
# Warmup Iteration  22: 28285.235 ops/s
# Warmup Iteration  23: 29360.715 ops/s
# Warmup Iteration  24: 28816.035 ops/s
# Warmup Iteration  25: 28473.368 ops/s
# Warmup Iteration  26: 29416.849 ops/s
# Warmup Iteration  27: 29220.713 ops/s
# Warmup Iteration  28: 28951.166 ops/s
# Warmup Iteration  29: 30668.648 ops/s
# Warmup Iteration  30: 30780.962 ops/s
Iteration   1: 30197.002 ops/s
Iteration   2: 28918.304 ops/s
Iteration   3: 28787.457 ops/s
Iteration   4: 29706.032 ops/s
Iteration   5: 31805.621 ops/s
Iteration   6: 30189.123 ops/s
Iteration   7: 27896.858 ops/s
Iteration   8: 19652.097 ops/s
Iteration   9: 19163.754 ops/s
Iteration  10: 19764.916 ops/s
Iteration  11: 19523.689 ops/s
Iteration  12: 27151.545 ops/s
Iteration  13: 29766.278 ops/s
Iteration  14: 28894.627 ops/s
Iteration  15: 29353.376 ops/s
Iteration  16: 27937.593 ops/s
Iteration  17: 29139.158 ops/s
Iteration  18: 28370.034 ops/s
Iteration  19: 29537.597 ops/s
Iteration  20: 28954.835 ops/s
Iteration  21: 29368.133 ops/s
Iteration  22: 28345.055 ops/s
Iteration  23: 28953.546 ops/s
Iteration  24: 26606.230 ops/s
Iteration  25: 28831.068 ops/s
Iteration  26: 29530.659 ops/s
Iteration  27: 29071.505 ops/s
Iteration  28: 29840.394 ops/s
Iteration  29: 29417.392 ops/s
Iteration  30: 29730.819 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_parallelStream":
  27813.490 ±(99.9%) 2299.319 ops/s [Average]
  (min, avg, max) = (19163.754, 27813.490, 31805.621), stdev = 3441.512
  CI (99.9%): [25514.171, 30112.809] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_parallelStream  thrpt   30  27813.490 ± 2299.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1900526.171 ops/s
# Warmup Iteration   2: 3549238.784 ops/s
# Warmup Iteration   3: 3815779.007 ops/s
# Warmup Iteration   4: 3828945.102 ops/s
# Warmup Iteration   5: 3174655.225 ops/s
# Warmup Iteration   6: 3823437.109 ops/s
# Warmup Iteration   7: 3827226.679 ops/s
# Warmup Iteration   8: 3814124.166 ops/s
# Warmup Iteration   9: 3831074.562 ops/s
# Warmup Iteration  10: 3822149.517 ops/s
# Warmup Iteration  11: 3831734.691 ops/s
# Warmup Iteration  12: 3811523.629 ops/s
# Warmup Iteration  13: 3829404.179 ops/s
# Warmup Iteration  14: 3815555.443 ops/s
# Warmup Iteration  15: 3810041.602 ops/s
# Warmup Iteration  16: 3799680.412 ops/s
# Warmup Iteration  17: 3831894.937 ops/s
# Warmup Iteration  18: 3813193.321 ops/s
# Warmup Iteration  19: 3835404.691 ops/s
# Warmup Iteration  20: 3822073.344 ops/s
# Warmup Iteration  21: 3813069.986 ops/s
# Warmup Iteration  22: 3808610.922 ops/s
# Warmup Iteration  23: 3832526.789 ops/s
# Warmup Iteration  24: 3831732.126 ops/s
# Warmup Iteration  25: 3836007.987 ops/s
# Warmup Iteration  26: 3828587.264 ops/s
# Warmup Iteration  27: 3826881.362 ops/s
# Warmup Iteration  28: 3830385.199 ops/s
# Warmup Iteration  29: 3824878.004 ops/s
# Warmup Iteration  30: 3811638.017 ops/s
Iteration   1: 3834511.432 ops/s
Iteration   2: 3830258.778 ops/s
Iteration   3: 3837677.784 ops/s
Iteration   4: 3830740.376 ops/s
Iteration   5: 3802636.335 ops/s
Iteration   6: 3832777.875 ops/s
Iteration   7: 3827394.851 ops/s
Iteration   8: 3799870.388 ops/s
Iteration   9: 3812316.355 ops/s
Iteration  10: 3822551.681 ops/s
Iteration  11: 3797012.424 ops/s
Iteration  12: 3815084.304 ops/s
Iteration  13: 3818757.831 ops/s
Iteration  14: 3819709.168 ops/s
Iteration  15: 3830591.388 ops/s
Iteration  16: 3833468.023 ops/s
Iteration  17: 3840935.336 ops/s
Iteration  18: 3820147.988 ops/s
Iteration  19: 3809893.375 ops/s
Iteration  20: 3840652.236 ops/s
Iteration  21: 3810162.634 ops/s
Iteration  22: 3836881.960 ops/s
Iteration  23: 3824180.680 ops/s
Iteration  24: 3823906.275 ops/s
Iteration  25: 3837245.407 ops/s
Iteration  26: 3836824.563 ops/s
Iteration  27: 3806985.271 ops/s
Iteration  28: 3816840.579 ops/s
Iteration  29: 3841733.535 ops/s
Iteration  30: 3823644.967 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_partition":
  3823846.460 ±(99.9%) 8563.900 ops/s [Average]
  (min, avg, max) = (3797012.424, 3823846.460, 3841733.535), stdev = 12818.044
  CI (99.9%): [3815282.560, 3832410.360] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_partition  thrpt   30  3823846.460 ± 8563.900  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2071762.152 ops/s
# Warmup Iteration   2: 6684305.889 ops/s
# Warmup Iteration   3: 6896072.414 ops/s
# Warmup Iteration   4: 5835607.659 ops/s
# Warmup Iteration   5: 6934143.345 ops/s
# Warmup Iteration   6: 6922263.400 ops/s
# Warmup Iteration   7: 6940861.095 ops/s
# Warmup Iteration   8: 6946689.699 ops/s
# Warmup Iteration   9: 6945115.984 ops/s
# Warmup Iteration  10: 6932722.014 ops/s
# Warmup Iteration  11: 6941790.132 ops/s
# Warmup Iteration  12: 6909870.207 ops/s
# Warmup Iteration  13: 6893703.079 ops/s
# Warmup Iteration  14: 6901030.092 ops/s
# Warmup Iteration  15: 6869700.878 ops/s
# Warmup Iteration  16: 6934740.318 ops/s
# Warmup Iteration  17: 6947074.674 ops/s
# Warmup Iteration  18: 6978045.179 ops/s
# Warmup Iteration  19: 6973256.457 ops/s
# Warmup Iteration  20: 6947679.095 ops/s
# Warmup Iteration  21: 6954467.206 ops/s
# Warmup Iteration  22: 6978895.159 ops/s
# Warmup Iteration  23: 6964732.061 ops/s
# Warmup Iteration  24: 6956958.612 ops/s
# Warmup Iteration  25: 6978508.383 ops/s
# Warmup Iteration  26: 6965853.744 ops/s
# Warmup Iteration  27: 6968818.310 ops/s
# Warmup Iteration  28: 6969580.808 ops/s
# Warmup Iteration  29: 6965322.754 ops/s
# Warmup Iteration  30: 6982102.993 ops/s
Iteration   1: 6973495.436 ops/s
Iteration   2: 6968072.885 ops/s
Iteration   3: 6990144.670 ops/s
Iteration   4: 6980291.315 ops/s
Iteration   5: 6959622.395 ops/s
Iteration   6: 6985828.330 ops/s
Iteration   7: 6981963.707 ops/s
Iteration   8: 6980990.954 ops/s
Iteration   9: 6987802.151 ops/s
Iteration  10: 6976042.447 ops/s
Iteration  11: 6971986.641 ops/s
Iteration  12: 6970285.261 ops/s
Iteration  13: 6985310.910 ops/s
Iteration  14: 6995453.657 ops/s
Iteration  15: 6935905.510 ops/s
Iteration  16: 6978432.094 ops/s
Iteration  17: 6943940.770 ops/s
Iteration  18: 6982240.050 ops/s
Iteration  19: 6946985.572 ops/s
Iteration  20: 6980509.294 ops/s
Iteration  21: 6947998.178 ops/s
Iteration  22: 6893311.094 ops/s
Iteration  23: 6964395.051 ops/s
Iteration  24: 6978521.811 ops/s
Iteration  25: 6991424.828 ops/s
Iteration  26: 6971520.075 ops/s
Iteration  27: 6970703.359 ops/s
Iteration  28: 6978115.981 ops/s
Iteration  29: 6963258.983 ops/s
Iteration  30: 6984859.050 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_partitionWhile":
  6970647.082 ±(99.9%) 13783.443 ops/s [Average]
  (min, avg, max) = (6893311.094, 6970647.082, 6995453.657), stdev = 20630.411
  CI (99.9%): [6956863.639, 6984430.525] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_partitionWhile  thrpt   30  6970647.082 ± 13783.443  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1668045.188 ops/s
# Warmup Iteration   2: 3374938.293 ops/s
# Warmup Iteration   3: 3479647.167 ops/s
# Warmup Iteration   4: 3495428.864 ops/s
# Warmup Iteration   5: 2945746.962 ops/s
# Warmup Iteration   6: 3499601.682 ops/s
# Warmup Iteration   7: 3493386.366 ops/s
# Warmup Iteration   8: 3482165.862 ops/s
# Warmup Iteration   9: 3488077.897 ops/s
# Warmup Iteration  10: 3481731.087 ops/s
# Warmup Iteration  11: 3480945.192 ops/s
# Warmup Iteration  12: 3485708.596 ops/s
# Warmup Iteration  13: 3486447.018 ops/s
# Warmup Iteration  14: 3491519.184 ops/s
# Warmup Iteration  15: 3487543.068 ops/s
# Warmup Iteration  16: 3496308.206 ops/s
# Warmup Iteration  17: 3486555.166 ops/s
# Warmup Iteration  18: 3500284.129 ops/s
# Warmup Iteration  19: 3480559.652 ops/s
# Warmup Iteration  20: 3482871.976 ops/s
# Warmup Iteration  21: 3486846.210 ops/s
# Warmup Iteration  22: 3497057.340 ops/s
# Warmup Iteration  23: 3480503.967 ops/s
# Warmup Iteration  24: 3494910.131 ops/s
# Warmup Iteration  25: 3493832.009 ops/s
# Warmup Iteration  26: 3492989.087 ops/s
# Warmup Iteration  27: 3498272.065 ops/s
# Warmup Iteration  28: 3483513.584 ops/s
# Warmup Iteration  29: 3500347.188 ops/s
# Warmup Iteration  30: 3481925.564 ops/s
Iteration   1: 3476411.424 ops/s
Iteration   2: 3495208.890 ops/s
Iteration   3: 3483578.956 ops/s
Iteration   4: 3504280.287 ops/s
Iteration   5: 3488806.689 ops/s
Iteration   6: 3497755.807 ops/s
Iteration   7: 3478470.592 ops/s
Iteration   8: 3488768.973 ops/s
Iteration   9: 3497951.305 ops/s
Iteration  10: 3503220.076 ops/s
Iteration  11: 3477909.036 ops/s
Iteration  12: 3481264.899 ops/s
Iteration  13: 3497669.036 ops/s
Iteration  14: 3503824.604 ops/s
Iteration  15: 3497778.870 ops/s
Iteration  16: 3498792.530 ops/s
Iteration  17: 3494907.502 ops/s
Iteration  18: 3499073.737 ops/s
Iteration  19: 3488240.144 ops/s
Iteration  20: 3485910.489 ops/s
Iteration  21: 3495765.537 ops/s
Iteration  22: 3478716.831 ops/s
Iteration  23: 3498172.953 ops/s
Iteration  24: 3499598.674 ops/s
Iteration  25: 3482064.940 ops/s
Iteration  26: 3492580.648 ops/s
Iteration  27: 3466800.718 ops/s
Iteration  28: 3480337.605 ops/s
Iteration  29: 3498370.413 ops/s
Iteration  30: 3477344.684 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_partitionWith":
  3490319.228 ±(99.9%) 6652.587 ops/s [Average]
  (min, avg, max) = (3466800.718, 3490319.228, 3504280.287), stdev = 9957.280
  CI (99.9%): [3483666.641, 3496971.816] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_partitionWith  thrpt   30  3490319.228 ± 6652.587  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3625269.781 ops/s
# Warmup Iteration   2: 8084487.727 ops/s
# Warmup Iteration   3: 8052208.326 ops/s
# Warmup Iteration   4: 6981377.795 ops/s
# Warmup Iteration   5: 7833673.320 ops/s
# Warmup Iteration   6: 8003372.323 ops/s
# Warmup Iteration   7: 8036361.915 ops/s
# Warmup Iteration   8: 8033880.160 ops/s
# Warmup Iteration   9: 8036370.150 ops/s
# Warmup Iteration  10: 8041039.410 ops/s
# Warmup Iteration  11: 8031477.194 ops/s
# Warmup Iteration  12: 8026165.414 ops/s
# Warmup Iteration  13: 8032445.346 ops/s
# Warmup Iteration  14: 8047953.642 ops/s
# Warmup Iteration  15: 8045428.563 ops/s
# Warmup Iteration  16: 8014988.036 ops/s
# Warmup Iteration  17: 8054295.047 ops/s
# Warmup Iteration  18: 8019018.019 ops/s
# Warmup Iteration  19: 8038611.895 ops/s
# Warmup Iteration  20: 8046300.053 ops/s
# Warmup Iteration  21: 8046865.555 ops/s
# Warmup Iteration  22: 8049693.296 ops/s
# Warmup Iteration  23: 8035658.243 ops/s
# Warmup Iteration  24: 8029974.773 ops/s
# Warmup Iteration  25: 8044221.638 ops/s
# Warmup Iteration  26: 8040172.612 ops/s
# Warmup Iteration  27: 8040564.205 ops/s
# Warmup Iteration  28: 8054557.024 ops/s
# Warmup Iteration  29: 8056681.349 ops/s
# Warmup Iteration  30: 8048778.136 ops/s
Iteration   1: 8069325.767 ops/s
Iteration   2: 8042699.770 ops/s
Iteration   3: 8015013.456 ops/s
Iteration   4: 8012264.381 ops/s
Iteration   5: 7998253.378 ops/s
Iteration   6: 8068761.843 ops/s
Iteration   7: 8041637.232 ops/s
Iteration   8: 8055839.859 ops/s
Iteration   9: 8028892.866 ops/s
Iteration  10: 8048462.464 ops/s
Iteration  11: 8070802.454 ops/s
Iteration  12: 8046404.984 ops/s
Iteration  13: 8055136.032 ops/s
Iteration  14: 8052564.673 ops/s
Iteration  15: 8054842.588 ops/s
Iteration  16: 8027582.010 ops/s
Iteration  17: 8056207.563 ops/s
Iteration  18: 8065625.917 ops/s
Iteration  19: 8058651.758 ops/s
Iteration  20: 8018368.947 ops/s
Iteration  21: 8051834.946 ops/s
Iteration  22: 8072983.720 ops/s
Iteration  23: 8025591.809 ops/s
Iteration  24: 8024425.860 ops/s
Iteration  25: 8042600.889 ops/s
Iteration  26: 8050700.245 ops/s
Iteration  27: 8068917.030 ops/s
Iteration  28: 8006315.779 ops/s
Iteration  29: 8043374.689 ops/s
Iteration  30: 8063015.630 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_reject":
  8044569.951 ±(99.9%) 13843.571 ops/s [Average]
  (min, avg, max) = (7998253.378, 8044569.951, 8072983.720), stdev = 20720.407
  CI (99.9%): [8030726.380, 8058413.523] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_reject  thrpt   30  8044569.951 ± 13843.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3206872.103 ops/s
# Warmup Iteration   2: 7421645.683 ops/s
# Warmup Iteration   3: 7529438.364 ops/s
# Warmup Iteration   4: 6319003.784 ops/s
# Warmup Iteration   5: 7503987.602 ops/s
# Warmup Iteration   6: 7546364.686 ops/s
# Warmup Iteration   7: 7551806.121 ops/s
# Warmup Iteration   8: 7515262.442 ops/s
# Warmup Iteration   9: 7533273.245 ops/s
# Warmup Iteration  10: 7534016.662 ops/s
# Warmup Iteration  11: 7506358.291 ops/s
# Warmup Iteration  12: 7494010.070 ops/s
# Warmup Iteration  13: 7516625.524 ops/s
# Warmup Iteration  14: 7539130.427 ops/s
# Warmup Iteration  15: 7544981.662 ops/s
# Warmup Iteration  16: 7534386.275 ops/s
# Warmup Iteration  17: 7525821.359 ops/s
# Warmup Iteration  18: 7530093.957 ops/s
# Warmup Iteration  19: 7507343.541 ops/s
# Warmup Iteration  20: 7485494.057 ops/s
# Warmup Iteration  21: 7511606.208 ops/s
# Warmup Iteration  22: 7522118.468 ops/s
# Warmup Iteration  23: 7518401.793 ops/s
# Warmup Iteration  24: 7507067.424 ops/s
# Warmup Iteration  25: 7487754.670 ops/s
# Warmup Iteration  26: 7531709.055 ops/s
# Warmup Iteration  27: 7535879.900 ops/s
# Warmup Iteration  28: 7541155.895 ops/s
# Warmup Iteration  29: 7533393.897 ops/s
# Warmup Iteration  30: 7543083.125 ops/s
Iteration   1: 7550561.566 ops/s
Iteration   2: 7551118.957 ops/s
Iteration   3: 7544823.503 ops/s
Iteration   4: 7506692.259 ops/s
Iteration   5: 7552478.141 ops/s
Iteration   6: 7557358.197 ops/s
Iteration   7: 7527679.062 ops/s
Iteration   8: 7551095.718 ops/s
Iteration   9: 7532497.312 ops/s
Iteration  10: 7519998.649 ops/s
Iteration  11: 7526211.699 ops/s
Iteration  12: 7541585.803 ops/s
Iteration  13: 7546254.147 ops/s
Iteration  14: 7534397.085 ops/s
Iteration  15: 7526949.837 ops/s
Iteration  16: 7535601.504 ops/s
Iteration  17: 7467544.344 ops/s
Iteration  18: 7546246.553 ops/s
Iteration  19: 7515539.778 ops/s
Iteration  20: 7464301.676 ops/s
Iteration  21: 7550387.090 ops/s
Iteration  22: 7500943.516 ops/s
Iteration  23: 7531959.352 ops/s
Iteration  24: 7541900.633 ops/s
Iteration  25: 7511739.871 ops/s
Iteration  26: 7550854.013 ops/s
Iteration  27: 7552433.094 ops/s
Iteration  28: 7517874.012 ops/s
Iteration  29: 7528094.659 ops/s
Iteration  30: 7523046.477 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWith":
  7530272.284 ±(99.9%) 15435.434 ops/s [Average]
  (min, avg, max) = (7464301.676, 7530272.284, 7557358.197), stdev = 23103.033
  CI (99.9%): [7514836.849, 7545707.718] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWith  thrpt   30  7530272.284 ± 15435.434  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4257825.714 ops/s
# Warmup Iteration   2: 9154756.031 ops/s
# Warmup Iteration   3: 9535313.741 ops/s
# Warmup Iteration   4: 8218091.630 ops/s
# Warmup Iteration   5: 9353224.125 ops/s
# Warmup Iteration   6: 9538993.125 ops/s
# Warmup Iteration   7: 9583966.030 ops/s
# Warmup Iteration   8: 9549055.266 ops/s
# Warmup Iteration   9: 9544205.194 ops/s
# Warmup Iteration  10: 9547824.866 ops/s
# Warmup Iteration  11: 9547924.998 ops/s
# Warmup Iteration  12: 9566703.830 ops/s
# Warmup Iteration  13: 9543123.461 ops/s
# Warmup Iteration  14: 9552099.400 ops/s
# Warmup Iteration  15: 9552929.264 ops/s
# Warmup Iteration  16: 9545579.052 ops/s
# Warmup Iteration  17: 9545674.303 ops/s
# Warmup Iteration  18: 9574908.269 ops/s
# Warmup Iteration  19: 9531652.055 ops/s
# Warmup Iteration  20: 9517221.859 ops/s
# Warmup Iteration  21: 9515613.803 ops/s
# Warmup Iteration  22: 9556008.380 ops/s
# Warmup Iteration  23: 9549477.855 ops/s
# Warmup Iteration  24: 9542965.757 ops/s
# Warmup Iteration  25: 9551757.679 ops/s
# Warmup Iteration  26: 9547593.374 ops/s
# Warmup Iteration  27: 9540272.105 ops/s
# Warmup Iteration  28: 9544476.155 ops/s
# Warmup Iteration  29: 9558960.551 ops/s
# Warmup Iteration  30: 9540114.240 ops/s
Iteration   1: 9574055.290 ops/s
Iteration   2: 9546909.948 ops/s
Iteration   3: 9545812.086 ops/s
Iteration   4: 9505730.705 ops/s
Iteration   5: 9545784.377 ops/s
Iteration   6: 9526499.461 ops/s
Iteration   7: 9522708.271 ops/s
Iteration   8: 9565925.513 ops/s
Iteration   9: 9496656.228 ops/s
Iteration  10: 9551620.286 ops/s
Iteration  11: 9581329.231 ops/s
Iteration  12: 9537230.712 ops/s
Iteration  13: 9558620.252 ops/s
Iteration  14: 9566007.344 ops/s
Iteration  15: 9570079.021 ops/s
Iteration  16: 9581254.043 ops/s
Iteration  17: 9521303.860 ops/s
Iteration  18: 9567795.050 ops/s
Iteration  19: 9560565.764 ops/s
Iteration  20: 9530619.394 ops/s
Iteration  21: 9521755.152 ops/s
Iteration  22: 9580142.308 ops/s
Iteration  23: 9571452.394 ops/s
Iteration  24: 9554080.993 ops/s
Iteration  25: 9559528.526 ops/s
Iteration  26: 9550701.583 ops/s
Iteration  27: 9570231.730 ops/s
Iteration  28: 9568317.803 ops/s
Iteration  29: 9561807.880 ops/s
Iteration  30: 9577913.675 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWithIndex":
  9552414.629 ±(99.9%) 15309.751 ops/s [Average]
  (min, avg, max) = (9496656.228, 9552414.629, 9581329.231), stdev = 22914.916
  CI (99.9%): [9537104.878, 9567724.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  9552414.629 ± 15309.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4464446.849 ops/s
# Warmup Iteration   2: 9978284.108 ops/s
# Warmup Iteration   3: 8425523.824 ops/s
# Warmup Iteration   4: 10023889.104 ops/s
# Warmup Iteration   5: 10045832.760 ops/s
# Warmup Iteration   6: 10069138.734 ops/s
# Warmup Iteration   7: 10051961.549 ops/s
# Warmup Iteration   8: 10000551.705 ops/s
# Warmup Iteration   9: 10056965.329 ops/s
# Warmup Iteration  10: 10014363.550 ops/s
# Warmup Iteration  11: 9997849.218 ops/s
# Warmup Iteration  12: 10035957.154 ops/s
# Warmup Iteration  13: 10025042.095 ops/s
# Warmup Iteration  14: 10023627.189 ops/s
# Warmup Iteration  15: 10005988.279 ops/s
# Warmup Iteration  16: 10005907.721 ops/s
# Warmup Iteration  17: 9983557.015 ops/s
# Warmup Iteration  18: 10041429.363 ops/s
# Warmup Iteration  19: 10042142.178 ops/s
# Warmup Iteration  20: 10033021.079 ops/s
# Warmup Iteration  21: 10051463.480 ops/s
# Warmup Iteration  22: 10046528.868 ops/s
# Warmup Iteration  23: 10028483.648 ops/s
# Warmup Iteration  24: 10044923.029 ops/s
# Warmup Iteration  25: 10061149.386 ops/s
# Warmup Iteration  26: 10046337.577 ops/s
# Warmup Iteration  27: 10027435.201 ops/s
# Warmup Iteration  28: 10030788.373 ops/s
# Warmup Iteration  29: 9684199.138 ops/s
# Warmup Iteration  30: 9681815.452 ops/s
Iteration   1: 10061558.998 ops/s
Iteration   2: 10030422.624 ops/s
Iteration   3: 10048110.184 ops/s
Iteration   4: 10049852.621 ops/s
Iteration   5: 10055492.370 ops/s
Iteration   6: 10056111.322 ops/s
Iteration   7: 10058557.845 ops/s
Iteration   8: 10016446.028 ops/s
Iteration   9: 10029371.612 ops/s
Iteration  10: 10045456.836 ops/s
Iteration  11: 10058972.167 ops/s
Iteration  12: 10016318.604 ops/s
Iteration  13: 10072376.308 ops/s
Iteration  14: 9997498.387 ops/s
Iteration  15: 9957586.926 ops/s
Iteration  16: 10035484.160 ops/s
Iteration  17: 10003832.942 ops/s
Iteration  18: 10035129.293 ops/s
Iteration  19: 10010163.276 ops/s
Iteration  20: 9947343.629 ops/s
Iteration  21: 9944215.014 ops/s
Iteration  22: 9999792.601 ops/s
Iteration  23: 10053136.617 ops/s
Iteration  24: 10050567.034 ops/s
Iteration  25: 10054109.861 ops/s
Iteration  26: 10026966.030 ops/s
Iteration  27: 10023600.879 ops/s
Iteration  28: 10018634.567 ops/s
Iteration  29: 10004815.052 ops/s
Iteration  30: 10012988.526 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  10025830.410 ±(99.9%) 22113.622 ops/s [Average]
  (min, avg, max) = (9944215.014, 10025830.410, 10072376.308), stdev = 33098.630
  CI (99.9%): [10003716.789, 10047944.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  10025830.410 ± 22113.622  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4786107.168 ops/s
# Warmup Iteration   2: 10617705.366 ops/s
# Warmup Iteration   3: 9306868.101 ops/s
# Warmup Iteration   4: 10523385.671 ops/s
# Warmup Iteration   5: 10758968.358 ops/s
# Warmup Iteration   6: 10762058.828 ops/s
# Warmup Iteration   7: 10729117.799 ops/s
# Warmup Iteration   8: 10779136.638 ops/s
# Warmup Iteration   9: 10767151.281 ops/s
# Warmup Iteration  10: 10741656.809 ops/s
# Warmup Iteration  11: 10752344.193 ops/s
# Warmup Iteration  12: 10770782.352 ops/s
# Warmup Iteration  13: 10771779.887 ops/s
# Warmup Iteration  14: 10765069.725 ops/s
# Warmup Iteration  15: 10728119.135 ops/s
# Warmup Iteration  16: 10733700.905 ops/s
# Warmup Iteration  17: 10785724.684 ops/s
# Warmup Iteration  18: 10740956.247 ops/s
# Warmup Iteration  19: 10769589.949 ops/s
# Warmup Iteration  20: 10783629.619 ops/s
# Warmup Iteration  21: 10776010.191 ops/s
# Warmup Iteration  22: 10737956.959 ops/s
# Warmup Iteration  23: 10778354.622 ops/s
# Warmup Iteration  24: 10755306.863 ops/s
# Warmup Iteration  25: 10791337.296 ops/s
# Warmup Iteration  26: 10773408.956 ops/s
# Warmup Iteration  27: 10783268.349 ops/s
# Warmup Iteration  28: 10785799.803 ops/s
# Warmup Iteration  29: 10718999.805 ops/s
# Warmup Iteration  30: 10760345.708 ops/s
Iteration   1: 10692613.227 ops/s
Iteration   2: 10760803.395 ops/s
Iteration   3: 10786974.546 ops/s
Iteration   4: 10754115.647 ops/s
Iteration   5: 10774949.237 ops/s
Iteration   6: 10767728.307 ops/s
Iteration   7: 10734758.460 ops/s
Iteration   8: 10754154.669 ops/s
Iteration   9: 10732973.974 ops/s
Iteration  10: 10771424.721 ops/s
Iteration  11: 10737599.799 ops/s
Iteration  12: 10741863.520 ops/s
Iteration  13: 10704730.466 ops/s
Iteration  14: 10766681.973 ops/s
Iteration  15: 10771789.662 ops/s
Iteration  16: 10780696.516 ops/s
Iteration  17: 10756920.344 ops/s
Iteration  18: 10767381.757 ops/s
Iteration  19: 10803068.611 ops/s
Iteration  20: 10771466.760 ops/s
Iteration  21: 10731735.756 ops/s
Iteration  22: 10786225.466 ops/s
Iteration  23: 10807881.735 ops/s
Iteration  24: 10794091.625 ops/s
Iteration  25: 10765428.330 ops/s
Iteration  26: 10788684.996 ops/s
Iteration  27: 10783131.282 ops/s
Iteration  28: 10806246.833 ops/s
Iteration  29: 10754707.836 ops/s
Iteration  30: 10719322.878 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWith_target":
  10762338.411 ±(99.9%) 19080.825 ops/s [Average]
  (min, avg, max) = (10692613.227, 10762338.411, 10807881.735), stdev = 28559.284
  CI (99.9%): [10743257.585, 10781419.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  10762338.411 ± 19080.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_reject_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_reject_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6043311.225 ops/s
# Warmup Iteration   2: 12829609.525 ops/s
# Warmup Iteration   3: 11172453.097 ops/s
# Warmup Iteration   4: 12381841.255 ops/s
# Warmup Iteration   5: 12737225.128 ops/s
# Warmup Iteration   6: 12804303.084 ops/s
# Warmup Iteration   7: 12729052.461 ops/s
# Warmup Iteration   8: 12831650.929 ops/s
# Warmup Iteration   9: 12785723.368 ops/s
# Warmup Iteration  10: 12805383.619 ops/s
# Warmup Iteration  11: 12794590.860 ops/s
# Warmup Iteration  12: 12769944.958 ops/s
# Warmup Iteration  13: 12801007.573 ops/s
# Warmup Iteration  14: 12773683.149 ops/s
# Warmup Iteration  15: 12770423.302 ops/s
# Warmup Iteration  16: 12817265.505 ops/s
# Warmup Iteration  17: 12855496.605 ops/s
# Warmup Iteration  18: 12850769.198 ops/s
# Warmup Iteration  19: 12848034.168 ops/s
# Warmup Iteration  20: 12815755.682 ops/s
# Warmup Iteration  21: 12745869.167 ops/s
# Warmup Iteration  22: 12793956.247 ops/s
# Warmup Iteration  23: 12826757.577 ops/s
# Warmup Iteration  24: 12815998.149 ops/s
# Warmup Iteration  25: 12798503.475 ops/s
# Warmup Iteration  26: 12617984.775 ops/s
# Warmup Iteration  27: 12810092.396 ops/s
# Warmup Iteration  28: 12808296.538 ops/s
# Warmup Iteration  29: 12782067.947 ops/s
# Warmup Iteration  30: 12784580.304 ops/s
Iteration   1: 12747194.113 ops/s
Iteration   2: 12776763.557 ops/s
Iteration   3: 12776733.801 ops/s
Iteration   4: 12860559.173 ops/s
Iteration   5: 12793371.804 ops/s
Iteration   6: 12835023.135 ops/s
Iteration   7: 12794779.547 ops/s
Iteration   8: 12832754.576 ops/s
Iteration   9: 12825169.746 ops/s
Iteration  10: 12757737.081 ops/s
Iteration  11: 12787258.589 ops/s
Iteration  12: 12816215.968 ops/s
Iteration  13: 12834721.018 ops/s
Iteration  14: 12849365.929 ops/s
Iteration  15: 12792746.335 ops/s
Iteration  16: 12750410.332 ops/s
Iteration  17: 12832248.434 ops/s
Iteration  18: 12828569.764 ops/s
Iteration  19: 12822328.649 ops/s
Iteration  20: 12802800.610 ops/s
Iteration  21: 12851995.754 ops/s
Iteration  22: 12806122.928 ops/s
Iteration  23: 12827604.274 ops/s
Iteration  24: 12846018.753 ops/s
Iteration  25: 12845200.347 ops/s
Iteration  26: 12863595.567 ops/s
Iteration  27: 12834199.703 ops/s
Iteration  28: 12825864.613 ops/s
Iteration  29: 12806915.397 ops/s
Iteration  30: 12832606.760 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_reject_target":
  12815229.209 ±(99.9%) 21116.529 ops/s [Average]
  (min, avg, max) = (12747194.113, 12815229.209, 12863595.567), stdev = 31606.229
  CI (99.9%): [12794112.679, 12836345.738] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_reject_target  thrpt   30  12815229.209 ± 21116.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 648061.759 ops/s
# Warmup Iteration   2: 785626.992 ops/s
# Warmup Iteration   3: 965887.836 ops/s
# Warmup Iteration   4: 962246.093 ops/s
# Warmup Iteration   5: 970282.885 ops/s
# Warmup Iteration   6: 962868.606 ops/s
# Warmup Iteration   7: 963391.039 ops/s
# Warmup Iteration   8: 966119.723 ops/s
# Warmup Iteration   9: 813130.200 ops/s
# Warmup Iteration  10: 970009.249 ops/s
# Warmup Iteration  11: 972231.393 ops/s
# Warmup Iteration  12: 969516.583 ops/s
# Warmup Iteration  13: 966433.115 ops/s
# Warmup Iteration  14: 967225.205 ops/s
# Warmup Iteration  15: 966143.559 ops/s
# Warmup Iteration  16: 968707.127 ops/s
# Warmup Iteration  17: 1020769.176 ops/s
# Warmup Iteration  18: 1016377.543 ops/s
# Warmup Iteration  19: 1017911.676 ops/s
# Warmup Iteration  20: 1020235.362 ops/s
# Warmup Iteration  21: 1016643.261 ops/s
# Warmup Iteration  22: 1018340.256 ops/s
# Warmup Iteration  23: 1014639.790 ops/s
# Warmup Iteration  24: 1019835.675 ops/s
# Warmup Iteration  25: 1019614.221 ops/s
# Warmup Iteration  26: 1018958.335 ops/s
# Warmup Iteration  27: 1021131.841 ops/s
# Warmup Iteration  28: 1020425.032 ops/s
# Warmup Iteration  29: 1020238.381 ops/s
# Warmup Iteration  30: 1018709.764 ops/s
Iteration   1: 1021018.105 ops/s
Iteration   2: 1018922.394 ops/s
Iteration   3: 1018416.627 ops/s
Iteration   4: 1022341.803 ops/s
Iteration   5: 1019396.938 ops/s
Iteration   6: 1017979.020 ops/s
Iteration   7: 1016188.118 ops/s
Iteration   8: 1019849.098 ops/s
Iteration   9: 1021066.202 ops/s
Iteration  10: 1017173.010 ops/s
Iteration  11: 1013789.036 ops/s
Iteration  12: 1020870.762 ops/s
Iteration  13: 1022252.095 ops/s
Iteration  14: 1014724.061 ops/s
Iteration  15: 1022063.801 ops/s
Iteration  16: 1018759.105 ops/s
Iteration  17: 1018590.494 ops/s
Iteration  18: 1021754.398 ops/s
Iteration  19: 1022482.060 ops/s
Iteration  20: 1017732.432 ops/s
Iteration  21: 1021731.591 ops/s
Iteration  22: 1018916.000 ops/s
Iteration  23: 1019085.798 ops/s
Iteration  24: 1021342.137 ops/s
Iteration  25: 1018846.358 ops/s
Iteration  26: 1021816.777 ops/s
Iteration  27: 1020591.001 ops/s
Iteration  28: 1020218.739 ops/s
Iteration  29: 1022145.003 ops/s
Iteration  30: 1020982.391 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_remove":
  1019701.512 ±(99.9%) 1506.562 ops/s [Average]
  (min, avg, max) = (1013789.036, 1019701.512, 1022482.060), stdev = 2254.951
  CI (99.9%): [1018194.950, 1021208.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_remove  thrpt   30  1019701.512 ± 1506.562  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 746601.878 ops/s
# Warmup Iteration   2: 784895.879 ops/s
# Warmup Iteration   3: 992639.641 ops/s
# Warmup Iteration   4: 986175.941 ops/s
# Warmup Iteration   5: 980698.836 ops/s
# Warmup Iteration   6: 985424.874 ops/s
# Warmup Iteration   7: 984063.832 ops/s
# Warmup Iteration   8: 978073.808 ops/s
# Warmup Iteration   9: 986535.940 ops/s
# Warmup Iteration  10: 983323.749 ops/s
# Warmup Iteration  11: 982938.534 ops/s
# Warmup Iteration  12: 834626.128 ops/s
# Warmup Iteration  13: 978781.515 ops/s
# Warmup Iteration  14: 975678.168 ops/s
# Warmup Iteration  15: 990817.393 ops/s
# Warmup Iteration  16: 982846.558 ops/s
# Warmup Iteration  17: 1043587.406 ops/s
# Warmup Iteration  18: 1041825.080 ops/s
# Warmup Iteration  19: 1046175.024 ops/s
# Warmup Iteration  20: 1039588.940 ops/s
# Warmup Iteration  21: 1045875.086 ops/s
# Warmup Iteration  22: 1044138.924 ops/s
# Warmup Iteration  23: 1041278.954 ops/s
# Warmup Iteration  24: 1034113.612 ops/s
# Warmup Iteration  25: 1042060.508 ops/s
# Warmup Iteration  26: 1041732.731 ops/s
# Warmup Iteration  27: 1041511.046 ops/s
# Warmup Iteration  28: 1045270.738 ops/s
# Warmup Iteration  29: 1044596.195 ops/s
# Warmup Iteration  30: 1041324.327 ops/s
Iteration   1: 1043759.784 ops/s
Iteration   2: 1043728.182 ops/s
Iteration   3: 1037908.940 ops/s
Iteration   4: 1046038.476 ops/s
Iteration   5: 1046569.673 ops/s
Iteration   6: 1033428.145 ops/s
Iteration   7: 1040794.824 ops/s
Iteration   8: 1041786.298 ops/s
Iteration   9: 1044090.564 ops/s
Iteration  10: 1038871.091 ops/s
Iteration  11: 1040095.048 ops/s
Iteration  12: 1045260.516 ops/s
Iteration  13: 1043004.075 ops/s
Iteration  14: 1040582.831 ops/s
Iteration  15: 1045149.452 ops/s
Iteration  16: 1041399.896 ops/s
Iteration  17: 1036087.545 ops/s
Iteration  18: 1032420.595 ops/s
Iteration  19: 1041039.854 ops/s
Iteration  20: 1039811.935 ops/s
Iteration  21: 1037622.257 ops/s
Iteration  22: 1040858.707 ops/s
Iteration  23: 1044151.476 ops/s
Iteration  24: 1043151.402 ops/s
Iteration  25: 1043028.005 ops/s
Iteration  26: 1040215.789 ops/s
Iteration  27: 1029140.941 ops/s
Iteration  28: 1038282.286 ops/s
Iteration  29: 1034892.325 ops/s
Iteration  30: 1040763.372 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_removeAll":
  1040464.476 ±(99.9%) 2774.981 ops/s [Average]
  (min, avg, max) = (1029140.941, 1040464.476, 1046569.673), stdev = 4153.461
  CI (99.9%): [1037689.495, 1043239.457] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_removeAll  thrpt   30  1040464.476 ± 2774.981  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 765212.691 ops/s
# Warmup Iteration   2: 806405.276 ops/s
# Warmup Iteration   3: 992367.001 ops/s
# Warmup Iteration   4: 988278.996 ops/s
# Warmup Iteration   5: 988830.520 ops/s
# Warmup Iteration   6: 992175.092 ops/s
# Warmup Iteration   7: 992939.340 ops/s
# Warmup Iteration   8: 990113.834 ops/s
# Warmup Iteration   9: 995548.900 ops/s
# Warmup Iteration  10: 995432.674 ops/s
# Warmup Iteration  11: 971832.222 ops/s
# Warmup Iteration  12: 871220.970 ops/s
# Warmup Iteration  13: 989502.228 ops/s
# Warmup Iteration  14: 989123.032 ops/s
# Warmup Iteration  15: 988187.261 ops/s
# Warmup Iteration  16: 988901.732 ops/s
# Warmup Iteration  17: 1052659.763 ops/s
# Warmup Iteration  18: 1052353.879 ops/s
# Warmup Iteration  19: 1052477.024 ops/s
# Warmup Iteration  20: 1052601.718 ops/s
# Warmup Iteration  21: 1051853.633 ops/s
# Warmup Iteration  22: 1052422.271 ops/s
# Warmup Iteration  23: 1050526.484 ops/s
# Warmup Iteration  24: 1053740.450 ops/s
# Warmup Iteration  25: 1050356.324 ops/s
# Warmup Iteration  26: 1053565.466 ops/s
# Warmup Iteration  27: 1056506.951 ops/s
# Warmup Iteration  28: 1054347.592 ops/s
# Warmup Iteration  29: 1053429.618 ops/s
# Warmup Iteration  30: 1050301.133 ops/s
Iteration   1: 1050374.627 ops/s
Iteration   2: 1055312.293 ops/s
Iteration   3: 1052954.616 ops/s
Iteration   4: 1053546.781 ops/s
Iteration   5: 1052468.862 ops/s
Iteration   6: 1052198.424 ops/s
Iteration   7: 1048932.278 ops/s
Iteration   8: 1049859.558 ops/s
Iteration   9: 1053363.163 ops/s
Iteration  10: 1052451.320 ops/s
Iteration  11: 1050563.314 ops/s
Iteration  12: 1054650.114 ops/s
Iteration  13: 1046249.633 ops/s
Iteration  14: 1053929.721 ops/s
Iteration  15: 1047829.538 ops/s
Iteration  16: 1056950.008 ops/s
Iteration  17: 1050976.720 ops/s
Iteration  18: 1051584.122 ops/s
Iteration  19: 1051517.055 ops/s
Iteration  20: 1054062.193 ops/s
Iteration  21: 1052020.481 ops/s
Iteration  22: 1055510.640 ops/s
Iteration  23: 1053496.114 ops/s
Iteration  24: 1048762.216 ops/s
Iteration  25: 1045530.878 ops/s
Iteration  26: 1051450.299 ops/s
Iteration  27: 1053826.424 ops/s
Iteration  28: 1048579.343 ops/s
Iteration  29: 1049882.131 ops/s
Iteration  30: 1053980.294 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_removeAtIndex":
  1051760.439 ±(99.9%) 1821.819 ops/s [Average]
  (min, avg, max) = (1045530.878, 1051760.439, 1056950.008), stdev = 2726.813
  CI (99.9%): [1049938.620, 1053582.257] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1051760.439 ± 1821.819  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 751967.940 ops/s
# Warmup Iteration   2: 796697.588 ops/s
# Warmup Iteration   3: 992744.024 ops/s
# Warmup Iteration   4: 988937.841 ops/s
# Warmup Iteration   5: 991074.521 ops/s
# Warmup Iteration   6: 990986.189 ops/s
# Warmup Iteration   7: 1000554.559 ops/s
# Warmup Iteration   8: 1002872.347 ops/s
# Warmup Iteration   9: 1001950.228 ops/s
# Warmup Iteration  10: 999156.585 ops/s
# Warmup Iteration  11: 947291.867 ops/s
# Warmup Iteration  12: 900583.042 ops/s
# Warmup Iteration  13: 995808.435 ops/s
# Warmup Iteration  14: 992992.182 ops/s
# Warmup Iteration  15: 992064.264 ops/s
# Warmup Iteration  16: 991151.510 ops/s
# Warmup Iteration  17: 1064051.055 ops/s
# Warmup Iteration  18: 1062422.001 ops/s
# Warmup Iteration  19: 1060478.104 ops/s
# Warmup Iteration  20: 1065338.676 ops/s
# Warmup Iteration  21: 1063550.983 ops/s
# Warmup Iteration  22: 1064202.538 ops/s
# Warmup Iteration  23: 1054759.406 ops/s
# Warmup Iteration  24: 1054803.520 ops/s
# Warmup Iteration  25: 1058344.095 ops/s
# Warmup Iteration  26: 1065639.449 ops/s
# Warmup Iteration  27: 1063574.712 ops/s
# Warmup Iteration  28: 1066508.173 ops/s
# Warmup Iteration  29: 1062678.905 ops/s
# Warmup Iteration  30: 1063726.759 ops/s
Iteration   1: 1058254.264 ops/s
Iteration   2: 1060122.576 ops/s
Iteration   3: 1063747.392 ops/s
Iteration   4: 1058877.567 ops/s
Iteration   5: 1064908.780 ops/s
Iteration   6: 1066585.623 ops/s
Iteration   7: 1062574.258 ops/s
Iteration   8: 1065756.419 ops/s
Iteration   9: 1060289.605 ops/s
Iteration  10: 1059085.443 ops/s
Iteration  11: 1068149.645 ops/s
Iteration  12: 1062410.495 ops/s
Iteration  13: 1062515.891 ops/s
Iteration  14: 1060340.863 ops/s
Iteration  15: 1067351.098 ops/s
Iteration  16: 1056840.713 ops/s
Iteration  17: 1058274.285 ops/s
Iteration  18: 1055555.651 ops/s
Iteration  19: 1060483.617 ops/s
Iteration  20: 1062836.057 ops/s
Iteration  21: 1064778.830 ops/s
Iteration  22: 1061216.751 ops/s
Iteration  23: 1066211.771 ops/s
Iteration  24: 1064722.736 ops/s
Iteration  25: 1065017.896 ops/s
Iteration  26: 1068062.660 ops/s
Iteration  27: 1060482.476 ops/s
Iteration  28: 1065020.224 ops/s
Iteration  29: 1067425.161 ops/s
Iteration  30: 1070026.641 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_replaceAll":
  1062930.846 ±(99.9%) 2478.254 ops/s [Average]
  (min, avg, max) = (1055555.651, 1062930.846, 1070026.641), stdev = 3709.334
  CI (99.9%): [1060452.592, 1065409.100] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_replaceAll  thrpt   30  1062930.846 ± 2478.254  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 739016.578 ops/s
# Warmup Iteration   2: 786393.747 ops/s
# Warmup Iteration   3: 979285.569 ops/s
# Warmup Iteration   4: 966909.779 ops/s
# Warmup Iteration   5: 972576.657 ops/s
# Warmup Iteration   6: 975382.917 ops/s
# Warmup Iteration   7: 971299.615 ops/s
# Warmup Iteration   8: 968497.105 ops/s
# Warmup Iteration   9: 973606.893 ops/s
# Warmup Iteration  10: 969581.224 ops/s
# Warmup Iteration  11: 973278.064 ops/s
# Warmup Iteration  12: 836083.306 ops/s
# Warmup Iteration  13: 969404.755 ops/s
# Warmup Iteration  14: 973476.538 ops/s
# Warmup Iteration  15: 977396.824 ops/s
# Warmup Iteration  16: 975908.297 ops/s
# Warmup Iteration  17: 1033004.643 ops/s
# Warmup Iteration  18: 1033174.840 ops/s
# Warmup Iteration  19: 1034581.806 ops/s
# Warmup Iteration  20: 1028606.325 ops/s
# Warmup Iteration  21: 1023132.947 ops/s
# Warmup Iteration  22: 1026164.583 ops/s
# Warmup Iteration  23: 1026085.238 ops/s
# Warmup Iteration  24: 1024215.007 ops/s
# Warmup Iteration  25: 1027947.530 ops/s
# Warmup Iteration  26: 1023281.330 ops/s
# Warmup Iteration  27: 1028286.232 ops/s
# Warmup Iteration  28: 1026057.227 ops/s
# Warmup Iteration  29: 1028997.918 ops/s
# Warmup Iteration  30: 1031454.449 ops/s
Iteration   1: 1031222.356 ops/s
Iteration   2: 1033957.330 ops/s
Iteration   3: 1032532.472 ops/s
Iteration   4: 1032791.413 ops/s
Iteration   5: 1034091.582 ops/s
Iteration   6: 1023904.650 ops/s
Iteration   7: 1025604.960 ops/s
Iteration   8: 1030899.913 ops/s
Iteration   9: 1029851.788 ops/s
Iteration  10: 1030491.236 ops/s
Iteration  11: 1023172.354 ops/s
Iteration  12: 1031363.766 ops/s
Iteration  13: 1029858.008 ops/s
Iteration  14: 1031806.276 ops/s
Iteration  15: 1025149.154 ops/s
Iteration  16: 1031404.762 ops/s
Iteration  17: 1022609.720 ops/s
Iteration  18: 1022053.951 ops/s
Iteration  19: 1026502.021 ops/s
Iteration  20: 1026232.315 ops/s
Iteration  21: 1027360.100 ops/s
Iteration  22: 1028018.117 ops/s
Iteration  23: 1028789.093 ops/s
Iteration  24: 1035271.151 ops/s
Iteration  25: 1032045.380 ops/s
Iteration  26: 1034210.628 ops/s
Iteration  27: 1032991.918 ops/s
Iteration  28: 1029869.819 ops/s
Iteration  29: 1034970.272 ops/s
Iteration  30: 1033522.574 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_retainAll":
  1029751.636 ±(99.9%) 2582.785 ops/s [Average]
  (min, avg, max) = (1022053.951, 1029751.636, 1035271.151), stdev = 3865.791
  CI (99.9%): [1027168.851, 1032334.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_retainAll  thrpt   30  1029751.636 ± 2582.785  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8038638.987 ops/s
# Warmup Iteration   2: 16841300.057 ops/s
# Warmup Iteration   3: 14193058.981 ops/s
# Warmup Iteration   4: 16715604.306 ops/s
# Warmup Iteration   5: 16744862.496 ops/s
# Warmup Iteration   6: 16718414.684 ops/s
# Warmup Iteration   7: 16703449.444 ops/s
# Warmup Iteration   8: 16719874.088 ops/s
# Warmup Iteration   9: 16707646.160 ops/s
# Warmup Iteration  10: 16734867.237 ops/s
# Warmup Iteration  11: 16701871.939 ops/s
# Warmup Iteration  12: 16742148.068 ops/s
# Warmup Iteration  13: 16687671.537 ops/s
# Warmup Iteration  14: 16642782.019 ops/s
# Warmup Iteration  15: 16728733.420 ops/s
# Warmup Iteration  16: 16745798.656 ops/s
# Warmup Iteration  17: 16732815.736 ops/s
# Warmup Iteration  18: 16748990.131 ops/s
# Warmup Iteration  19: 16793213.897 ops/s
# Warmup Iteration  20: 16748054.083 ops/s
# Warmup Iteration  21: 16823425.640 ops/s
# Warmup Iteration  22: 16795830.304 ops/s
# Warmup Iteration  23: 16776385.370 ops/s
# Warmup Iteration  24: 16798643.450 ops/s
# Warmup Iteration  25: 16844283.409 ops/s
# Warmup Iteration  26: 16813853.627 ops/s
# Warmup Iteration  27: 16749489.460 ops/s
# Warmup Iteration  28: 16792264.175 ops/s
# Warmup Iteration  29: 16769712.081 ops/s
# Warmup Iteration  30: 16781847.974 ops/s
Iteration   1: 16708338.017 ops/s
Iteration   2: 16844758.363 ops/s
Iteration   3: 16847155.734 ops/s
Iteration   4: 16770123.903 ops/s
Iteration   5: 16687258.173 ops/s
Iteration   6: 16652130.499 ops/s
Iteration   7: 16757891.238 ops/s
Iteration   8: 16772961.542 ops/s
Iteration   9: 16768826.873 ops/s
Iteration  10: 16824924.197 ops/s
Iteration  11: 16772791.285 ops/s
Iteration  12: 16835289.913 ops/s
Iteration  13: 16845780.613 ops/s
Iteration  14: 16850333.442 ops/s
Iteration  15: 16822189.127 ops/s
Iteration  16: 16766661.331 ops/s
Iteration  17: 16808106.655 ops/s
Iteration  18: 16783181.308 ops/s
Iteration  19: 16822273.778 ops/s
Iteration  20: 16803252.739 ops/s
Iteration  21: 16820221.320 ops/s
Iteration  22: 16741154.750 ops/s
Iteration  23: 16805306.688 ops/s
Iteration  24: 16740835.981 ops/s
Iteration  25: 16805580.911 ops/s
Iteration  26: 16798002.307 ops/s
Iteration  27: 16774584.784 ops/s
Iteration  28: 16797943.092 ops/s
Iteration  29: 16800467.438 ops/s
Iteration  30: 16843672.510 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_reverseForEach":
  16789066.617 ±(99.9%) 32275.088 ops/s [Average]
  (min, avg, max) = (16652130.499, 16789066.617, 16850333.442), stdev = 48307.836
  CI (99.9%): [16756791.529, 16821341.705] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_reverseForEach  thrpt   30  16789066.617 ± 32275.088  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4978283.277 ops/s
# Warmup Iteration   2: 11003442.641 ops/s
# Warmup Iteration   3: 11161607.010 ops/s
# Warmup Iteration   4: 9388291.679 ops/s
# Warmup Iteration   5: 11116655.546 ops/s
# Warmup Iteration   6: 11118245.526 ops/s
# Warmup Iteration   7: 11111572.572 ops/s
# Warmup Iteration   8: 11102014.874 ops/s
# Warmup Iteration   9: 11056536.887 ops/s
# Warmup Iteration  10: 11104490.889 ops/s
# Warmup Iteration  11: 11096314.568 ops/s
# Warmup Iteration  12: 11103641.750 ops/s
# Warmup Iteration  13: 11099618.415 ops/s
# Warmup Iteration  14: 11129914.060 ops/s
# Warmup Iteration  15: 11126099.999 ops/s
# Warmup Iteration  16: 11132056.468 ops/s
# Warmup Iteration  17: 11150849.894 ops/s
# Warmup Iteration  18: 11129233.732 ops/s
# Warmup Iteration  19: 11130040.830 ops/s
# Warmup Iteration  20: 11119654.643 ops/s
# Warmup Iteration  21: 11148124.244 ops/s
# Warmup Iteration  22: 11091914.968 ops/s
# Warmup Iteration  23: 11142588.502 ops/s
# Warmup Iteration  24: 11131090.283 ops/s
# Warmup Iteration  25: 11118761.577 ops/s
# Warmup Iteration  26: 11154745.504 ops/s
# Warmup Iteration  27: 11121204.565 ops/s
# Warmup Iteration  28: 11145011.936 ops/s
# Warmup Iteration  29: 11116308.555 ops/s
# Warmup Iteration  30: 11118667.990 ops/s
Iteration   1: 11140589.077 ops/s
Iteration   2: 11111738.952 ops/s
Iteration   3: 11130875.474 ops/s
Iteration   4: 11119483.428 ops/s
Iteration   5: 11095487.985 ops/s
Iteration   6: 11119718.656 ops/s
Iteration   7: 11123447.396 ops/s
Iteration   8: 11134688.322 ops/s
Iteration   9: 11119972.458 ops/s
Iteration  10: 11141931.548 ops/s
Iteration  11: 11172042.195 ops/s
Iteration  12: 11157974.408 ops/s
Iteration  13: 11112050.772 ops/s
Iteration  14: 11124667.599 ops/s
Iteration  15: 11162490.919 ops/s
Iteration  16: 11123819.863 ops/s
Iteration  17: 11151663.385 ops/s
Iteration  18: 11046225.338 ops/s
Iteration  19: 11163129.807 ops/s
Iteration  20: 11169301.909 ops/s
Iteration  21: 11122606.650 ops/s
Iteration  22: 11144002.549 ops/s
Iteration  23: 11131685.408 ops/s
Iteration  24: 11095436.894 ops/s
Iteration  25: 11158691.180 ops/s
Iteration  26: 11112508.052 ops/s
Iteration  27: 11124672.561 ops/s
Iteration  28: 11114786.444 ops/s
Iteration  29: 11110064.800 ops/s
Iteration  30: 11088317.075 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_reverseForEachWithIndex":
  11127469.037 ±(99.9%) 18006.913 ops/s [Average]
  (min, avg, max) = (11046225.338, 11127469.037, 11172042.195), stdev = 26951.902
  CI (99.9%): [11109462.124, 11145475.950] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  11127469.037 ± 18006.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3621777.932 ops/s
# Warmup Iteration   2: 7953536.445 ops/s
# Warmup Iteration   3: 8164157.091 ops/s
# Warmup Iteration   4: 7049849.484 ops/s
# Warmup Iteration   5: 7943750.909 ops/s
# Warmup Iteration   6: 8148883.288 ops/s
# Warmup Iteration   7: 8161358.901 ops/s
# Warmup Iteration   8: 8113201.540 ops/s
# Warmup Iteration   9: 8176219.547 ops/s
# Warmup Iteration  10: 8140794.868 ops/s
# Warmup Iteration  11: 8173261.772 ops/s
# Warmup Iteration  12: 8164844.072 ops/s
# Warmup Iteration  13: 8149816.459 ops/s
# Warmup Iteration  14: 8148401.863 ops/s
# Warmup Iteration  15: 8145000.646 ops/s
# Warmup Iteration  16: 8134442.153 ops/s
# Warmup Iteration  17: 8167160.635 ops/s
# Warmup Iteration  18: 8154982.400 ops/s
# Warmup Iteration  19: 8148715.159 ops/s
# Warmup Iteration  20: 8157358.338 ops/s
# Warmup Iteration  21: 8167939.392 ops/s
# Warmup Iteration  22: 8162547.386 ops/s
# Warmup Iteration  23: 8144727.675 ops/s
# Warmup Iteration  24: 8136406.022 ops/s
# Warmup Iteration  25: 8142407.516 ops/s
# Warmup Iteration  26: 8157341.959 ops/s
# Warmup Iteration  27: 8174651.594 ops/s
# Warmup Iteration  28: 8180377.624 ops/s
# Warmup Iteration  29: 8154999.948 ops/s
# Warmup Iteration  30: 8171965.399 ops/s
Iteration   1: 8174925.069 ops/s
Iteration   2: 8170818.406 ops/s
Iteration   3: 8141428.143 ops/s
Iteration   4: 8179912.674 ops/s
Iteration   5: 8159249.160 ops/s
Iteration   6: 8153497.346 ops/s
Iteration   7: 8145212.473 ops/s
Iteration   8: 8124255.817 ops/s
Iteration   9: 8171156.364 ops/s
Iteration  10: 8168246.097 ops/s
Iteration  11: 8172351.195 ops/s
Iteration  12: 8176596.084 ops/s
Iteration  13: 8154745.359 ops/s
Iteration  14: 8145244.000 ops/s
Iteration  15: 8156219.254 ops/s
Iteration  16: 8166597.344 ops/s
Iteration  17: 8131980.737 ops/s
Iteration  18: 8178517.932 ops/s
Iteration  19: 8096799.836 ops/s
Iteration  20: 8148941.146 ops/s
Iteration  21: 8159035.891 ops/s
Iteration  22: 8147335.597 ops/s
Iteration  23: 8177700.911 ops/s
Iteration  24: 8020441.507 ops/s
Iteration  25: 8149421.448 ops/s
Iteration  26: 8155704.866 ops/s
Iteration  27: 8185414.402 ops/s
Iteration  28: 8145456.986 ops/s
Iteration  29: 8122757.609 ops/s
Iteration  30: 8127940.879 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_select":
  8150263.484 ±(99.9%) 21235.969 ops/s [Average]
  (min, avg, max) = (8020441.507, 8150263.484, 8185414.402), stdev = 31785.002
  CI (99.9%): [8129027.515, 8171499.454] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_select  thrpt   30  8150263.484 ± 21235.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6386080.067 ops/s
# Warmup Iteration   2: 10352995.081 ops/s
# Warmup Iteration   3: 11509578.468 ops/s
# Warmup Iteration   4: 11555090.407 ops/s
# Warmup Iteration   5: 11521241.735 ops/s
# Warmup Iteration   6: 9732908.499 ops/s
# Warmup Iteration   7: 11555410.668 ops/s
# Warmup Iteration   8: 11584232.476 ops/s
# Warmup Iteration   9: 11580519.869 ops/s
# Warmup Iteration  10: 11571866.726 ops/s
# Warmup Iteration  11: 11591455.023 ops/s
# Warmup Iteration  12: 11583784.055 ops/s
# Warmup Iteration  13: 11568128.360 ops/s
# Warmup Iteration  14: 11591349.775 ops/s
# Warmup Iteration  15: 11575342.120 ops/s
# Warmup Iteration  16: 11561076.392 ops/s
# Warmup Iteration  17: 11491738.728 ops/s
# Warmup Iteration  18: 11497486.857 ops/s
# Warmup Iteration  19: 11514792.675 ops/s
# Warmup Iteration  20: 11495909.759 ops/s
# Warmup Iteration  21: 11510919.814 ops/s
# Warmup Iteration  22: 11507408.565 ops/s
# Warmup Iteration  23: 11485583.917 ops/s
# Warmup Iteration  24: 11488438.127 ops/s
# Warmup Iteration  25: 11501984.882 ops/s
# Warmup Iteration  26: 11496524.045 ops/s
# Warmup Iteration  27: 11508431.511 ops/s
# Warmup Iteration  28: 11495847.581 ops/s
# Warmup Iteration  29: 11476841.951 ops/s
# Warmup Iteration  30: 11498397.085 ops/s
Iteration   1: 11516367.608 ops/s
Iteration   2: 11529202.358 ops/s
Iteration   3: 11516074.210 ops/s
Iteration   4: 11520261.648 ops/s
Iteration   5: 11441834.093 ops/s
Iteration   6: 11464575.973 ops/s
Iteration   7: 11533537.185 ops/s
Iteration   8: 11469793.614 ops/s
Iteration   9: 11496738.321 ops/s
Iteration  10: 11466196.729 ops/s
Iteration  11: 11488611.066 ops/s
Iteration  12: 11489473.619 ops/s
Iteration  13: 11473037.963 ops/s
Iteration  14: 11478319.706 ops/s
Iteration  15: 11497155.828 ops/s
Iteration  16: 11499560.798 ops/s
Iteration  17: 11451985.666 ops/s
Iteration  18: 11517599.671 ops/s
Iteration  19: 11490352.446 ops/s
Iteration  20: 11492396.886 ops/s
Iteration  21: 11467625.828 ops/s
Iteration  22: 11514701.614 ops/s
Iteration  23: 11483631.255 ops/s
Iteration  24: 11535973.066 ops/s
Iteration  25: 11505573.534 ops/s
Iteration  26: 11509067.437 ops/s
Iteration  27: 11506581.305 ops/s
Iteration  28: 11512421.829 ops/s
Iteration  29: 11529660.963 ops/s
Iteration  30: 11503424.841 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectInstancesOf":
  11496724.569 ±(99.9%) 16429.541 ops/s [Average]
  (min, avg, max) = (11441834.093, 11496724.569, 11535973.066), stdev = 24590.965
  CI (99.9%): [11480295.028, 11513154.109] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  11496724.569 ± 16429.541  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3196747.204 ops/s
# Warmup Iteration   2: 7427851.355 ops/s
# Warmup Iteration   3: 7490152.276 ops/s
# Warmup Iteration   4: 6335233.175 ops/s
# Warmup Iteration   5: 7508439.205 ops/s
# Warmup Iteration   6: 7533491.624 ops/s
# Warmup Iteration   7: 7524349.080 ops/s
# Warmup Iteration   8: 7534690.073 ops/s
# Warmup Iteration   9: 7510864.730 ops/s
# Warmup Iteration  10: 7497096.457 ops/s
# Warmup Iteration  11: 7482137.664 ops/s
# Warmup Iteration  12: 7532823.881 ops/s
# Warmup Iteration  13: 7482573.653 ops/s
# Warmup Iteration  14: 7518285.847 ops/s
# Warmup Iteration  15: 7492117.263 ops/s
# Warmup Iteration  16: 7518687.693 ops/s
# Warmup Iteration  17: 7529279.810 ops/s
# Warmup Iteration  18: 7537043.985 ops/s
# Warmup Iteration  19: 7527031.318 ops/s
# Warmup Iteration  20: 7522999.397 ops/s
# Warmup Iteration  21: 7483363.176 ops/s
# Warmup Iteration  22: 7508849.213 ops/s
# Warmup Iteration  23: 7510891.009 ops/s
# Warmup Iteration  24: 7515856.822 ops/s
# Warmup Iteration  25: 7487440.252 ops/s
# Warmup Iteration  26: 7521912.804 ops/s
# Warmup Iteration  27: 7517869.115 ops/s
# Warmup Iteration  28: 7547488.386 ops/s
# Warmup Iteration  29: 7523028.162 ops/s
# Warmup Iteration  30: 7526731.451 ops/s
Iteration   1: 7531275.740 ops/s
Iteration   2: 7536056.505 ops/s
Iteration   3: 7503269.166 ops/s
Iteration   4: 7491594.418 ops/s
Iteration   5: 7492447.781 ops/s
Iteration   6: 7531349.622 ops/s
Iteration   7: 7507928.394 ops/s
Iteration   8: 7541226.720 ops/s
Iteration   9: 7522918.990 ops/s
Iteration  10: 7524597.873 ops/s
Iteration  11: 7503063.450 ops/s
Iteration  12: 7534326.688 ops/s
Iteration  13: 7518526.250 ops/s
Iteration  14: 7517993.752 ops/s
Iteration  15: 7537368.135 ops/s
Iteration  16: 7453319.063 ops/s
Iteration  17: 7517377.854 ops/s
Iteration  18: 7509803.347 ops/s
Iteration  19: 7538386.429 ops/s
Iteration  20: 7537574.885 ops/s
Iteration  21: 7534788.674 ops/s
Iteration  22: 7513239.549 ops/s
Iteration  23: 7508318.616 ops/s
Iteration  24: 7540066.413 ops/s
Iteration  25: 7522891.451 ops/s
Iteration  26: 7508205.905 ops/s
Iteration  27: 7492979.574 ops/s
Iteration  28: 7532054.806 ops/s
Iteration  29: 7541811.822 ops/s
Iteration  30: 7470496.442 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWith":
  7517175.277 ±(99.9%) 14416.770 ops/s [Average]
  (min, avg, max) = (7453319.063, 7517175.277, 7541811.822), stdev = 21578.345
  CI (99.9%): [7502758.507, 7531592.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWith  thrpt   30  7517175.277 ± 14416.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4231664.623 ops/s
# Warmup Iteration   2: 9163952.924 ops/s
# Warmup Iteration   3: 9205765.029 ops/s
# Warmup Iteration   4: 8255400.257 ops/s
# Warmup Iteration   5: 8713171.016 ops/s
# Warmup Iteration   6: 9227317.001 ops/s
# Warmup Iteration   7: 9237353.388 ops/s
# Warmup Iteration   8: 9188462.019 ops/s
# Warmup Iteration   9: 9211176.865 ops/s
# Warmup Iteration  10: 9223289.106 ops/s
# Warmup Iteration  11: 9233321.235 ops/s
# Warmup Iteration  12: 9246135.942 ops/s
# Warmup Iteration  13: 9244168.060 ops/s
# Warmup Iteration  14: 9219050.879 ops/s
# Warmup Iteration  15: 9188324.513 ops/s
# Warmup Iteration  16: 9168691.865 ops/s
# Warmup Iteration  17: 9225503.280 ops/s
# Warmup Iteration  18: 9189447.601 ops/s
# Warmup Iteration  19: 9210082.197 ops/s
# Warmup Iteration  20: 9228074.833 ops/s
# Warmup Iteration  21: 9224932.433 ops/s
# Warmup Iteration  22: 9202287.003 ops/s
# Warmup Iteration  23: 9198019.127 ops/s
# Warmup Iteration  24: 9212439.886 ops/s
# Warmup Iteration  25: 9165685.308 ops/s
# Warmup Iteration  26: 9209520.546 ops/s
# Warmup Iteration  27: 9216492.935 ops/s
# Warmup Iteration  28: 9213343.865 ops/s
# Warmup Iteration  29: 9215357.336 ops/s
# Warmup Iteration  30: 9227202.676 ops/s
Iteration   1: 9202177.205 ops/s
Iteration   2: 9245999.916 ops/s
Iteration   3: 9271804.859 ops/s
Iteration   4: 9225638.903 ops/s
Iteration   5: 9148165.281 ops/s
Iteration   6: 9145731.848 ops/s
Iteration   7: 9168086.125 ops/s
Iteration   8: 9250555.566 ops/s
Iteration   9: 9242528.407 ops/s
Iteration  10: 9212292.076 ops/s
Iteration  11: 9238301.253 ops/s
Iteration  12: 9227112.676 ops/s
Iteration  13: 9167566.214 ops/s
Iteration  14: 9210206.150 ops/s
Iteration  15: 9232084.322 ops/s
Iteration  16: 9250572.062 ops/s
Iteration  17: 9223510.683 ops/s
Iteration  18: 9236742.349 ops/s
Iteration  19: 9188818.018 ops/s
Iteration  20: 9181034.166 ops/s
Iteration  21: 9170106.528 ops/s
Iteration  22: 9235779.565 ops/s
Iteration  23: 9228703.201 ops/s
Iteration  24: 9207104.850 ops/s
Iteration  25: 9228553.510 ops/s
Iteration  26: 9225303.692 ops/s
Iteration  27: 9236073.658 ops/s
Iteration  28: 9253515.630 ops/s
Iteration  29: 9241973.281 ops/s
Iteration  30: 9233282.740 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWithIndex":
  9217644.158 ±(99.9%) 21713.797 ops/s [Average]
  (min, avg, max) = (9145731.848, 9217644.158, 9271804.859), stdev = 32500.192
  CI (99.9%): [9195930.360, 9239357.955] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  9217644.158 ± 21713.797  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4517759.869 ops/s
# Warmup Iteration   2: 10132138.935 ops/s
# Warmup Iteration   3: 8359050.760 ops/s
# Warmup Iteration   4: 9871519.767 ops/s
# Warmup Iteration   5: 9889045.779 ops/s
# Warmup Iteration   6: 9893446.383 ops/s
# Warmup Iteration   7: 9896481.397 ops/s
# Warmup Iteration   8: 9871585.132 ops/s
# Warmup Iteration   9: 9893008.963 ops/s
# Warmup Iteration  10: 9900748.701 ops/s
# Warmup Iteration  11: 9853827.273 ops/s
# Warmup Iteration  12: 9841209.684 ops/s
# Warmup Iteration  13: 9918737.512 ops/s
# Warmup Iteration  14: 9861903.461 ops/s
# Warmup Iteration  15: 9889931.627 ops/s
# Warmup Iteration  16: 9902728.919 ops/s
# Warmup Iteration  17: 9919139.663 ops/s
# Warmup Iteration  18: 9919871.667 ops/s
# Warmup Iteration  19: 9886558.403 ops/s
# Warmup Iteration  20: 9917468.823 ops/s
# Warmup Iteration  21: 9824904.524 ops/s
# Warmup Iteration  22: 9839245.424 ops/s
# Warmup Iteration  23: 9880082.852 ops/s
# Warmup Iteration  24: 9905368.304 ops/s
# Warmup Iteration  25: 9907109.488 ops/s
# Warmup Iteration  26: 9892388.857 ops/s
# Warmup Iteration  27: 9809335.401 ops/s
# Warmup Iteration  28: 9907211.673 ops/s
# Warmup Iteration  29: 9915761.856 ops/s
# Warmup Iteration  30: 9930075.853 ops/s
Iteration   1: 9918096.178 ops/s
Iteration   2: 9880109.622 ops/s
Iteration   3: 9945417.976 ops/s
Iteration   4: 9944106.414 ops/s
Iteration   5: 9892885.401 ops/s
Iteration   6: 9914881.960 ops/s
Iteration   7: 9926403.114 ops/s
Iteration   8: 9934169.827 ops/s
Iteration   9: 9947016.738 ops/s
Iteration  10: 9939939.553 ops/s
Iteration  11: 9936320.377 ops/s
Iteration  12: 9911984.519 ops/s
Iteration  13: 9919278.619 ops/s
Iteration  14: 9910695.257 ops/s
Iteration  15: 9955017.538 ops/s
Iteration  16: 9901775.763 ops/s
Iteration  17: 9898672.950 ops/s
Iteration  18: 9913857.230 ops/s
Iteration  19: 9917459.843 ops/s
Iteration  20: 9891598.695 ops/s
Iteration  21: 9929640.119 ops/s
Iteration  22: 9827563.329 ops/s
Iteration  23: 9884257.369 ops/s
Iteration  24: 9978995.269 ops/s
Iteration  25: 9873093.752 ops/s
Iteration  26: 9888915.683 ops/s
Iteration  27: 9904188.782 ops/s
Iteration  28: 9923810.866 ops/s
Iteration  29: 9899353.654 ops/s
Iteration  30: 9836211.189 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  9911523.919 ±(99.9%) 21614.594 ops/s [Average]
  (min, avg, max) = (9827563.329, 9911523.919, 9978995.269), stdev = 32351.709
  CI (99.9%): [9889909.326, 9933138.513] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  9911523.919 ± 21614.594  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4994099.498 ops/s
# Warmup Iteration   2: 10786435.009 ops/s
# Warmup Iteration   3: 9262490.793 ops/s
# Warmup Iteration   4: 11004137.295 ops/s
# Warmup Iteration   5: 10993360.717 ops/s
# Warmup Iteration   6: 10945966.912 ops/s
# Warmup Iteration   7: 10550720.208 ops/s
# Warmup Iteration   8: 10958636.793 ops/s
# Warmup Iteration   9: 10952914.126 ops/s
# Warmup Iteration  10: 10925331.454 ops/s
# Warmup Iteration  11: 10904902.617 ops/s
# Warmup Iteration  12: 10978384.982 ops/s
# Warmup Iteration  13: 10943950.845 ops/s
# Warmup Iteration  14: 10969581.028 ops/s
# Warmup Iteration  15: 10914502.451 ops/s
# Warmup Iteration  16: 10934647.079 ops/s
# Warmup Iteration  17: 10934119.632 ops/s
# Warmup Iteration  18: 10944860.558 ops/s
# Warmup Iteration  19: 10976788.266 ops/s
# Warmup Iteration  20: 10930371.634 ops/s
# Warmup Iteration  21: 10936132.693 ops/s
# Warmup Iteration  22: 10987940.544 ops/s
# Warmup Iteration  23: 10994973.503 ops/s
# Warmup Iteration  24: 10924610.538 ops/s
# Warmup Iteration  25: 10993909.843 ops/s
# Warmup Iteration  26: 11014189.088 ops/s
# Warmup Iteration  27: 10872962.311 ops/s
# Warmup Iteration  28: 11009622.322 ops/s
# Warmup Iteration  29: 10989610.404 ops/s
# Warmup Iteration  30: 11006243.923 ops/s
Iteration   1: 11030815.086 ops/s
Iteration   2: 10966128.534 ops/s
Iteration   3: 10945048.773 ops/s
Iteration   4: 11019947.172 ops/s
Iteration   5: 10954963.573 ops/s
Iteration   6: 10989049.949 ops/s
Iteration   7: 10993982.141 ops/s
Iteration   8: 10966770.278 ops/s
Iteration   9: 10975027.911 ops/s
Iteration  10: 11002571.618 ops/s
Iteration  11: 10999774.988 ops/s
Iteration  12: 10975142.058 ops/s
Iteration  13: 10969196.420 ops/s
Iteration  14: 10988238.585 ops/s
Iteration  15: 10921492.515 ops/s
Iteration  16: 10971152.721 ops/s
Iteration  17: 10981131.134 ops/s
Iteration  18: 10974454.549 ops/s
Iteration  19: 10888062.728 ops/s
Iteration  20: 11000724.082 ops/s
Iteration  21: 11021350.085 ops/s
Iteration  22: 10993836.993 ops/s
Iteration  23: 10944627.979 ops/s
Iteration  24: 11045490.716 ops/s
Iteration  25: 11019799.120 ops/s
Iteration  26: 11021128.711 ops/s
Iteration  27: 10951112.554 ops/s
Iteration  28: 10975466.040 ops/s
Iteration  29: 11008901.793 ops/s
Iteration  30: 10981496.770 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWith_target":
  10982562.853 ±(99.9%) 22343.021 ops/s [Average]
  (min, avg, max) = (10888062.728, 10982562.853, 11045490.716), stdev = 33441.984
  CI (99.9%): [10960219.832, 11004905.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_selectWith_target  thrpt   30  10982562.853 ± 22343.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_select_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_select_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6038700.248 ops/s
# Warmup Iteration   2: 12641728.921 ops/s
# Warmup Iteration   3: 11076593.198 ops/s
# Warmup Iteration   4: 11338657.676 ops/s
# Warmup Iteration   5: 12162990.676 ops/s
# Warmup Iteration   6: 12148700.641 ops/s
# Warmup Iteration   7: 12122434.941 ops/s
# Warmup Iteration   8: 12148066.113 ops/s
# Warmup Iteration   9: 12117660.699 ops/s
# Warmup Iteration  10: 12130152.424 ops/s
# Warmup Iteration  11: 12169836.000 ops/s
# Warmup Iteration  12: 12127657.976 ops/s
# Warmup Iteration  13: 12160441.386 ops/s
# Warmup Iteration  14: 12121621.382 ops/s
# Warmup Iteration  15: 12097331.078 ops/s
# Warmup Iteration  16: 12124174.818 ops/s
# Warmup Iteration  17: 12164948.436 ops/s
# Warmup Iteration  18: 12143758.105 ops/s
# Warmup Iteration  19: 12189423.921 ops/s
# Warmup Iteration  20: 12115749.809 ops/s
# Warmup Iteration  21: 12152171.051 ops/s
# Warmup Iteration  22: 12083223.285 ops/s
# Warmup Iteration  23: 12126110.635 ops/s
# Warmup Iteration  24: 12149313.673 ops/s
# Warmup Iteration  25: 12146342.737 ops/s
# Warmup Iteration  26: 12136638.500 ops/s
# Warmup Iteration  27: 12126025.600 ops/s
# Warmup Iteration  28: 12164275.075 ops/s
# Warmup Iteration  29: 12174858.079 ops/s
# Warmup Iteration  30: 12141930.942 ops/s
Iteration   1: 12123550.191 ops/s
Iteration   2: 12108482.716 ops/s
Iteration   3: 12144128.200 ops/s
Iteration   4: 12126796.637 ops/s
Iteration   5: 12109367.833 ops/s
Iteration   6: 12149394.222 ops/s
Iteration   7: 12077399.636 ops/s
Iteration   8: 11969763.089 ops/s
Iteration   9: 12153873.959 ops/s
Iteration  10: 12176203.831 ops/s
Iteration  11: 12177330.933 ops/s
Iteration  12: 12162816.381 ops/s
Iteration  13: 12119242.312 ops/s
Iteration  14: 12180111.886 ops/s
Iteration  15: 12133540.227 ops/s
Iteration  16: 12141003.042 ops/s
Iteration  17: 12171818.136 ops/s
Iteration  18: 12115800.619 ops/s
Iteration  19: 12173764.780 ops/s
Iteration  20: 12159495.738 ops/s
Iteration  21: 12164517.494 ops/s
Iteration  22: 12163286.023 ops/s
Iteration  23: 12156276.626 ops/s
Iteration  24: 12146960.659 ops/s
Iteration  25: 12162796.328 ops/s
Iteration  26: 12157119.831 ops/s
Iteration  27: 12098277.644 ops/s
Iteration  28: 12136712.952 ops/s
Iteration  29: 12146243.514 ops/s
Iteration  30: 12107449.051 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_select_target":
  12137117.483 ±(99.9%) 27426.531 ops/s [Average]
  (min, avg, max) = (11969763.089, 12137117.483, 12180111.886), stdev = 41050.743
  CI (99.9%): [12109690.952, 12164544.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_select_target  thrpt   30  12137117.483 ± 27426.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 760943.830 ops/s
# Warmup Iteration   2: 799851.396 ops/s
# Warmup Iteration   3: 988762.022 ops/s
# Warmup Iteration   4: 999477.184 ops/s
# Warmup Iteration   5: 995029.013 ops/s
# Warmup Iteration   6: 1002559.543 ops/s
# Warmup Iteration   7: 994645.356 ops/s
# Warmup Iteration   8: 995783.636 ops/s
# Warmup Iteration   9: 1003748.828 ops/s
# Warmup Iteration  10: 1001641.302 ops/s
# Warmup Iteration  11: 997385.155 ops/s
# Warmup Iteration  12: 862039.842 ops/s
# Warmup Iteration  13: 1001114.211 ops/s
# Warmup Iteration  14: 1001408.088 ops/s
# Warmup Iteration  15: 1001865.733 ops/s
# Warmup Iteration  16: 1001299.875 ops/s
# Warmup Iteration  17: 1067712.093 ops/s
# Warmup Iteration  18: 1064859.115 ops/s
# Warmup Iteration  19: 1067030.779 ops/s
# Warmup Iteration  20: 1063249.475 ops/s
# Warmup Iteration  21: 1062014.961 ops/s
# Warmup Iteration  22: 1062401.503 ops/s
# Warmup Iteration  23: 1064293.878 ops/s
# Warmup Iteration  24: 1064276.272 ops/s
# Warmup Iteration  25: 1064801.409 ops/s
# Warmup Iteration  26: 1066235.613 ops/s
# Warmup Iteration  27: 1062488.558 ops/s
# Warmup Iteration  28: 1063571.877 ops/s
# Warmup Iteration  29: 1063692.390 ops/s
# Warmup Iteration  30: 1063467.786 ops/s
Iteration   1: 1064494.323 ops/s
Iteration   2: 1064956.671 ops/s
Iteration   3: 1059868.806 ops/s
Iteration   4: 1068883.092 ops/s
Iteration   5: 1063002.433 ops/s
Iteration   6: 1063195.748 ops/s
Iteration   7: 1069274.991 ops/s
Iteration   8: 1060971.272 ops/s
Iteration   9: 1056308.047 ops/s
Iteration  10: 1061685.115 ops/s
Iteration  11: 1063165.054 ops/s
Iteration  12: 1067047.800 ops/s
Iteration  13: 1064598.806 ops/s
Iteration  14: 1062514.104 ops/s
Iteration  15: 1067764.434 ops/s
Iteration  16: 1065989.529 ops/s
Iteration  17: 1065331.375 ops/s
Iteration  18: 1062270.091 ops/s
Iteration  19: 1070196.230 ops/s
Iteration  20: 1063217.665 ops/s
Iteration  21: 1059832.503 ops/s
Iteration  22: 1061716.859 ops/s
Iteration  23: 1063433.509 ops/s
Iteration  24: 1063834.098 ops/s
Iteration  25: 1062501.180 ops/s
Iteration  26: 1065250.162 ops/s
Iteration  27: 1061477.417 ops/s
Iteration  28: 1058442.058 ops/s
Iteration  29: 1056989.221 ops/s
Iteration  30: 1060813.461 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_set":
  1063300.868 ±(99.9%) 2248.027 ops/s [Average]
  (min, avg, max) = (1056308.047, 1063300.868, 1070196.230), stdev = 3364.741
  CI (99.9%): [1061052.842, 1065548.895] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_set  thrpt   30  1063300.868 ± 2248.027  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 758071.191 ops/s
# Warmup Iteration   2: 796909.162 ops/s
# Warmup Iteration   3: 1002162.689 ops/s
# Warmup Iteration   4: 998446.108 ops/s
# Warmup Iteration   5: 992280.767 ops/s
# Warmup Iteration   6: 1003171.710 ops/s
# Warmup Iteration   7: 1000761.732 ops/s
# Warmup Iteration   8: 996414.834 ops/s
# Warmup Iteration   9: 1000551.208 ops/s
# Warmup Iteration  10: 1003589.479 ops/s
# Warmup Iteration  11: 995594.964 ops/s
# Warmup Iteration  12: 861072.542 ops/s
# Warmup Iteration  13: 1000882.723 ops/s
# Warmup Iteration  14: 1003250.830 ops/s
# Warmup Iteration  15: 998525.009 ops/s
# Warmup Iteration  16: 999612.586 ops/s
# Warmup Iteration  17: 1066972.976 ops/s
# Warmup Iteration  18: 1063187.564 ops/s
# Warmup Iteration  19: 1064485.659 ops/s
# Warmup Iteration  20: 1058427.063 ops/s
# Warmup Iteration  21: 1063911.991 ops/s
# Warmup Iteration  22: 1061892.956 ops/s
# Warmup Iteration  23: 1064930.591 ops/s
# Warmup Iteration  24: 1059371.950 ops/s
# Warmup Iteration  25: 1058300.583 ops/s
# Warmup Iteration  26: 1063063.244 ops/s
# Warmup Iteration  27: 1067909.329 ops/s
# Warmup Iteration  28: 1064365.808 ops/s
# Warmup Iteration  29: 1065626.794 ops/s
# Warmup Iteration  30: 1061357.375 ops/s
Iteration   1: 1058994.551 ops/s
Iteration   2: 1063984.391 ops/s
Iteration   3: 1061564.125 ops/s
Iteration   4: 1058816.409 ops/s
Iteration   5: 1061069.769 ops/s
Iteration   6: 1065218.479 ops/s
Iteration   7: 1064671.641 ops/s
Iteration   8: 1059444.374 ops/s
Iteration   9: 1056985.574 ops/s
Iteration  10: 1053751.962 ops/s
Iteration  11: 1070392.893 ops/s
Iteration  12: 1063119.106 ops/s
Iteration  13: 959581.910 ops/s
Iteration  14: 1063815.344 ops/s
Iteration  15: 1068125.162 ops/s
Iteration  16: 1064795.276 ops/s
Iteration  17: 1067805.452 ops/s
Iteration  18: 1061099.240 ops/s
Iteration  19: 1062081.631 ops/s
Iteration  20: 1065265.683 ops/s
Iteration  21: 1062119.752 ops/s
Iteration  22: 1064067.013 ops/s
Iteration  23: 1063795.259 ops/s
Iteration  24: 1063377.696 ops/s
Iteration  25: 1064342.326 ops/s
Iteration  26: 1060827.238 ops/s
Iteration  27: 1062034.087 ops/s
Iteration  28: 1064497.311 ops/s
Iteration  29: 1065097.398 ops/s
Iteration  30: 1070792.887 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sort":
  1059717.798 ±(99.9%) 12863.079 ops/s [Average]
  (min, avg, max) = (959581.910, 1059717.798, 1070792.887), stdev = 19252.852
  CI (99.9%): [1046854.719, 1072580.877] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_sort  thrpt   30  1059717.798 ± 12863.079  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 289582.887 ops/s
# Warmup Iteration   2: 577443.195 ops/s
# Warmup Iteration   3: 675938.144 ops/s
# Warmup Iteration   4: 676519.402 ops/s
# Warmup Iteration   5: 667238.911 ops/s
# Warmup Iteration   6: 574252.489 ops/s
# Warmup Iteration   7: 675392.087 ops/s
# Warmup Iteration   8: 680280.868 ops/s
# Warmup Iteration   9: 679886.395 ops/s
# Warmup Iteration  10: 679516.272 ops/s
# Warmup Iteration  11: 679829.047 ops/s
# Warmup Iteration  12: 680119.813 ops/s
# Warmup Iteration  13: 680889.028 ops/s
# Warmup Iteration  14: 680674.853 ops/s
# Warmup Iteration  15: 680759.588 ops/s
# Warmup Iteration  16: 679116.869 ops/s
# Warmup Iteration  17: 676067.176 ops/s
# Warmup Iteration  18: 677594.902 ops/s
# Warmup Iteration  19: 674305.932 ops/s
# Warmup Iteration  20: 670751.480 ops/s
# Warmup Iteration  21: 677699.328 ops/s
# Warmup Iteration  22: 677858.189 ops/s
# Warmup Iteration  23: 678077.336 ops/s
# Warmup Iteration  24: 677952.561 ops/s
# Warmup Iteration  25: 677980.298 ops/s
# Warmup Iteration  26: 675996.088 ops/s
# Warmup Iteration  27: 673898.106 ops/s
# Warmup Iteration  28: 674477.327 ops/s
# Warmup Iteration  29: 677702.452 ops/s
# Warmup Iteration  30: 676332.830 ops/s
Iteration   1: 677896.996 ops/s
Iteration   2: 676800.061 ops/s
Iteration   3: 678291.900 ops/s
Iteration   4: 674868.588 ops/s
Iteration   5: 676258.049 ops/s
Iteration   6: 679186.007 ops/s
Iteration   7: 676891.841 ops/s
Iteration   8: 676909.240 ops/s
Iteration   9: 674515.249 ops/s
Iteration  10: 677189.830 ops/s
Iteration  11: 675300.826 ops/s
Iteration  12: 676678.838 ops/s
Iteration  13: 676327.306 ops/s
Iteration  14: 677464.415 ops/s
Iteration  15: 676105.674 ops/s
Iteration  16: 678785.502 ops/s
Iteration  17: 678416.184 ops/s
Iteration  18: 677224.259 ops/s
Iteration  19: 679178.517 ops/s
Iteration  20: 675477.729 ops/s
Iteration  21: 677738.437 ops/s
Iteration  22: 677409.625 ops/s
Iteration  23: 677107.176 ops/s
Iteration  24: 678960.496 ops/s
Iteration  25: 672292.209 ops/s
Iteration  26: 676535.256 ops/s
Iteration  27: 678126.879 ops/s
Iteration  28: 673962.052 ops/s
Iteration  29: 678011.573 ops/s
Iteration  30: 676210.250 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_stream":
  676870.699 ±(99.9%) 1067.056 ops/s [Average]
  (min, avg, max) = (672292.209, 676870.699, 679186.007), stdev = 1597.119
  CI (99.9%): [675803.643, 677937.754] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_stream  thrpt   30  676870.699 ± 1067.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21228280.708 ops/s
# Warmup Iteration   2: 38348262.609 ops/s
# Warmup Iteration   3: 38858151.215 ops/s
# Warmup Iteration   4: 41698980.368 ops/s
# Warmup Iteration   5: 41589176.729 ops/s
# Warmup Iteration   6: 41639212.340 ops/s
# Warmup Iteration   7: 41796764.873 ops/s
# Warmup Iteration   8: 41711419.811 ops/s
# Warmup Iteration   9: 41812210.515 ops/s
# Warmup Iteration  10: 41763695.369 ops/s
# Warmup Iteration  11: 41880093.524 ops/s
# Warmup Iteration  12: 41801324.217 ops/s
# Warmup Iteration  13: 41631712.145 ops/s
# Warmup Iteration  14: 41776752.349 ops/s
# Warmup Iteration  15: 41163984.009 ops/s
# Warmup Iteration  16: 38705959.176 ops/s
# Warmup Iteration  17: 41745173.238 ops/s
# Warmup Iteration  18: 41699246.807 ops/s
# Warmup Iteration  19: 41665388.982 ops/s
# Warmup Iteration  20: 41779750.284 ops/s
# Warmup Iteration  21: 41850686.376 ops/s
# Warmup Iteration  22: 41630661.867 ops/s
# Warmup Iteration  23: 41737155.525 ops/s
# Warmup Iteration  24: 41917679.189 ops/s
# Warmup Iteration  25: 41557384.056 ops/s
# Warmup Iteration  26: 41928701.908 ops/s
# Warmup Iteration  27: 41868932.211 ops/s
# Warmup Iteration  28: 41681657.586 ops/s
# Warmup Iteration  29: 41717540.289 ops/s
# Warmup Iteration  30: 41555744.221 ops/s
Iteration   1: 41611890.676 ops/s
Iteration   2: 41658711.586 ops/s
Iteration   3: 41619635.887 ops/s
Iteration   4: 41996158.435 ops/s
Iteration   5: 41849273.239 ops/s
Iteration   6: 41347678.017 ops/s
Iteration   7: 41354811.227 ops/s
Iteration   8: 41290415.780 ops/s
Iteration   9: 41885366.174 ops/s
Iteration  10: 41960813.294 ops/s
Iteration  11: 41470913.480 ops/s
Iteration  12: 41393180.946 ops/s
Iteration  13: 41836247.718 ops/s
Iteration  14: 41576556.122 ops/s
Iteration  15: 41939613.492 ops/s
Iteration  16: 41922783.014 ops/s
Iteration  17: 41977544.762 ops/s
Iteration  18: 41862801.453 ops/s
Iteration  19: 41393543.160 ops/s
Iteration  20: 41492780.858 ops/s
Iteration  21: 41594691.314 ops/s
Iteration  22: 41699915.837 ops/s
Iteration  23: 41702780.666 ops/s
Iteration  24: 41810296.096 ops/s
Iteration  25: 41684236.265 ops/s
Iteration  26: 41826668.389 ops/s
Iteration  27: 41646979.552 ops/s
Iteration  28: 42068948.893 ops/s
Iteration  29: 41766807.478 ops/s
Iteration  30: 42055038.532 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_subList":
  41709902.745 ±(99.9%) 150588.619 ops/s [Average]
  (min, avg, max) = (41290415.780, 41709902.745, 42068948.893), stdev = 225393.973
  CI (99.9%): [41559314.126, 41860491.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_subList  thrpt   30  41709902.745 ± 150588.619  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 662289.752 ops/s
# Warmup Iteration   2: 682894.016 ops/s
# Warmup Iteration   3: 806273.978 ops/s
# Warmup Iteration   4: 858435.637 ops/s
# Warmup Iteration   5: 855727.486 ops/s
# Warmup Iteration   6: 852331.481 ops/s
# Warmup Iteration   7: 853365.242 ops/s
# Warmup Iteration   8: 851781.945 ops/s
# Warmup Iteration   9: 853443.400 ops/s
# Warmup Iteration  10: 855495.572 ops/s
# Warmup Iteration  11: 858365.506 ops/s
# Warmup Iteration  12: 854768.543 ops/s
# Warmup Iteration  13: 857703.345 ops/s
# Warmup Iteration  14: 723021.607 ops/s
# Warmup Iteration  15: 857457.234 ops/s
# Warmup Iteration  16: 854796.548 ops/s
# Warmup Iteration  17: 906981.526 ops/s
# Warmup Iteration  18: 906299.639 ops/s
# Warmup Iteration  19: 904893.966 ops/s
# Warmup Iteration  20: 909945.813 ops/s
# Warmup Iteration  21: 906574.056 ops/s
# Warmup Iteration  22: 906681.023 ops/s
# Warmup Iteration  23: 902097.944 ops/s
# Warmup Iteration  24: 903571.631 ops/s
# Warmup Iteration  25: 903697.937 ops/s
# Warmup Iteration  26: 905859.695 ops/s
# Warmup Iteration  27: 904360.559 ops/s
# Warmup Iteration  28: 904518.703 ops/s
# Warmup Iteration  29: 906393.644 ops/s
# Warmup Iteration  30: 904974.092 ops/s
Iteration   1: 904658.517 ops/s
Iteration   2: 894148.610 ops/s
Iteration   3: 907018.464 ops/s
Iteration   4: 908475.773 ops/s
Iteration   5: 906876.868 ops/s
Iteration   6: 909299.082 ops/s
Iteration   7: 908736.434 ops/s
Iteration   8: 908868.223 ops/s
Iteration   9: 909382.007 ops/s
Iteration  10: 907777.843 ops/s
Iteration  11: 910568.542 ops/s
Iteration  12: 910173.737 ops/s
Iteration  13: 908228.609 ops/s
Iteration  14: 903824.456 ops/s
Iteration  15: 905408.537 ops/s
Iteration  16: 906947.491 ops/s
Iteration  17: 908188.505 ops/s
Iteration  18: 907014.764 ops/s
Iteration  19: 908301.729 ops/s
Iteration  20: 908277.391 ops/s
Iteration  21: 907951.596 ops/s
Iteration  22: 907970.892 ops/s
Iteration  23: 907685.051 ops/s
Iteration  24: 909267.290 ops/s
Iteration  25: 907838.174 ops/s
Iteration  26: 904481.410 ops/s
Iteration  27: 908104.561 ops/s
Iteration  28: 908331.518 ops/s
Iteration  29: 910453.680 ops/s
Iteration  30: 910131.157 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO":
  907479.697 ±(99.9%) 2019.278 ops/s [Average]
  (min, avg, max) = (894148.610, 907479.697, 910568.542), stdev = 3022.361
  CI (99.9%): [905460.419, 909498.975] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO  thrpt   30  907479.697 ± 2019.278  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_subListFromNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_subListFromNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 670764.022 ops/s
# Warmup Iteration   2: 688932.780 ops/s
# Warmup Iteration   3: 797157.117 ops/s
# Warmup Iteration   4: 855193.594 ops/s
# Warmup Iteration   5: 850106.325 ops/s
# Warmup Iteration   6: 850826.227 ops/s
# Warmup Iteration   7: 854220.118 ops/s
# Warmup Iteration   8: 853052.887 ops/s
# Warmup Iteration   9: 851393.533 ops/s
# Warmup Iteration  10: 854039.797 ops/s
# Warmup Iteration  11: 856352.671 ops/s
# Warmup Iteration  12: 854767.634 ops/s
# Warmup Iteration  13: 856069.379 ops/s
# Warmup Iteration  14: 776854.232 ops/s
# Warmup Iteration  15: 799201.093 ops/s
# Warmup Iteration  16: 855987.542 ops/s
# Warmup Iteration  17: 903013.541 ops/s
# Warmup Iteration  18: 904018.556 ops/s
# Warmup Iteration  19: 903303.847 ops/s
# Warmup Iteration  20: 900592.603 ops/s
# Warmup Iteration  21: 903131.735 ops/s
# Warmup Iteration  22: 901916.663 ops/s
# Warmup Iteration  23: 904720.860 ops/s
# Warmup Iteration  24: 900633.473 ops/s
# Warmup Iteration  25: 900768.765 ops/s
# Warmup Iteration  26: 903990.342 ops/s
# Warmup Iteration  27: 900859.493 ops/s
# Warmup Iteration  28: 905908.323 ops/s
# Warmup Iteration  29: 904174.132 ops/s
# Warmup Iteration  30: 903844.060 ops/s
Iteration   1: 905166.273 ops/s
Iteration   2: 902007.514 ops/s
Iteration   3: 904900.756 ops/s
Iteration   4: 901655.802 ops/s
Iteration   5: 900390.111 ops/s
Iteration   6: 892855.445 ops/s
Iteration   7: 900131.818 ops/s
Iteration   8: 897534.619 ops/s
Iteration   9: 903564.618 ops/s
Iteration  10: 898925.166 ops/s
Iteration  11: 898888.035 ops/s
Iteration  12: 900329.685 ops/s
Iteration  13: 901941.265 ops/s
Iteration  14: 903691.251 ops/s
Iteration  15: 905495.259 ops/s
Iteration  16: 906131.835 ops/s
Iteration  17: 904550.332 ops/s
Iteration  18: 906600.521 ops/s
Iteration  19: 906879.772 ops/s
Iteration  20: 905934.718 ops/s
Iteration  21: 905506.964 ops/s
Iteration  22: 900904.113 ops/s
Iteration  23: 903318.906 ops/s
Iteration  24: 900835.934 ops/s
Iteration  25: 903059.474 ops/s
Iteration  26: 901230.536 ops/s
Iteration  27: 903045.492 ops/s
Iteration  28: 902136.863 ops/s
Iteration  29: 902928.117 ops/s
Iteration  30: 894963.107 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_subListFromNegative":
  902183.477 ±(99.9%) 2221.033 ops/s [Average]
  (min, avg, max) = (892855.445, 902183.477, 906879.772), stdev = 3324.337
  CI (99.9%): [899962.444, 904404.509] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_subListFromNegative  thrpt   30  902183.477 ± 2221.033  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_subListToGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_subListToGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 671945.680 ops/s
# Warmup Iteration   2: 692276.020 ops/s
# Warmup Iteration   3: 811742.819 ops/s
# Warmup Iteration   4: 871285.229 ops/s
# Warmup Iteration   5: 867917.778 ops/s
# Warmup Iteration   6: 865831.284 ops/s
# Warmup Iteration   7: 871907.936 ops/s
# Warmup Iteration   8: 870206.676 ops/s
# Warmup Iteration   9: 871972.189 ops/s
# Warmup Iteration  10: 872234.525 ops/s
# Warmup Iteration  11: 869942.597 ops/s
# Warmup Iteration  12: 871006.394 ops/s
# Warmup Iteration  13: 870319.681 ops/s
# Warmup Iteration  14: 746647.258 ops/s
# Warmup Iteration  15: 853284.472 ops/s
# Warmup Iteration  16: 873169.731 ops/s
# Warmup Iteration  17: 916469.922 ops/s
# Warmup Iteration  18: 917161.494 ops/s
# Warmup Iteration  19: 918918.799 ops/s
# Warmup Iteration  20: 921842.577 ops/s
# Warmup Iteration  21: 921090.809 ops/s
# Warmup Iteration  22: 923419.891 ops/s
# Warmup Iteration  23: 924651.383 ops/s
# Warmup Iteration  24: 921908.157 ops/s
# Warmup Iteration  25: 925286.227 ops/s
# Warmup Iteration  26: 922953.079 ops/s
# Warmup Iteration  27: 925438.669 ops/s
# Warmup Iteration  28: 923001.519 ops/s
# Warmup Iteration  29: 924599.048 ops/s
# Warmup Iteration  30: 922597.203 ops/s
Iteration   1: 922455.921 ops/s
Iteration   2: 921346.702 ops/s
Iteration   3: 920924.192 ops/s
Iteration   4: 923056.210 ops/s
Iteration   5: 922701.724 ops/s
Iteration   6: 914301.226 ops/s
Iteration   7: 919668.003 ops/s
Iteration   8: 921943.631 ops/s
Iteration   9: 926529.845 ops/s
Iteration  10: 923463.164 ops/s
Iteration  11: 922245.017 ops/s
Iteration  12: 919399.802 ops/s
Iteration  13: 920244.969 ops/s
Iteration  14: 923691.258 ops/s
Iteration  15: 920720.097 ops/s
Iteration  16: 923256.413 ops/s
Iteration  17: 920874.143 ops/s
Iteration  18: 921110.169 ops/s
Iteration  19: 923958.408 ops/s
Iteration  20: 921080.561 ops/s
Iteration  21: 921199.630 ops/s
Iteration  22: 923228.458 ops/s
Iteration  23: 921595.275 ops/s
Iteration  24: 917975.099 ops/s
Iteration  25: 920363.094 ops/s
Iteration  26: 918968.115 ops/s
Iteration  27: 920229.843 ops/s
Iteration  28: 918210.086 ops/s
Iteration  29: 922776.330 ops/s
Iteration  30: 924858.262 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_subListToGreaterThanSize":
  921412.522 ±(99.9%) 1568.296 ops/s [Average]
  (min, avg, max) = (914301.226, 921412.522, 926529.845), stdev = 2347.351
  CI (99.9%): [919844.226, 922980.817] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_subListToGreaterThanSize  thrpt   30  921412.522 ± 1568.296  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 994703.383 ops/s
# Warmup Iteration   2: 1800849.516 ops/s
# Warmup Iteration   3: 2029333.977 ops/s
# Warmup Iteration   4: 2035413.896 ops/s
# Warmup Iteration   5: 2040151.349 ops/s
# Warmup Iteration   6: 1687059.369 ops/s
# Warmup Iteration   7: 2039202.216 ops/s
# Warmup Iteration   8: 2035373.262 ops/s
# Warmup Iteration   9: 2041380.996 ops/s
# Warmup Iteration  10: 2036593.858 ops/s
# Warmup Iteration  11: 2041572.947 ops/s
# Warmup Iteration  12: 2039468.987 ops/s
# Warmup Iteration  13: 2036903.645 ops/s
# Warmup Iteration  14: 2040476.623 ops/s
# Warmup Iteration  15: 2040628.358 ops/s
# Warmup Iteration  16: 2039223.266 ops/s
# Warmup Iteration  17: 2040617.284 ops/s
# Warmup Iteration  18: 2044752.116 ops/s
# Warmup Iteration  19: 2037474.335 ops/s
# Warmup Iteration  20: 2036707.060 ops/s
# Warmup Iteration  21: 2041952.270 ops/s
# Warmup Iteration  22: 2042468.454 ops/s
# Warmup Iteration  23: 2041826.903 ops/s
# Warmup Iteration  24: 2036812.332 ops/s
# Warmup Iteration  25: 2037146.063 ops/s
# Warmup Iteration  26: 2042709.004 ops/s
# Warmup Iteration  27: 2040239.570 ops/s
# Warmup Iteration  28: 2036788.769 ops/s
# Warmup Iteration  29: 2040881.909 ops/s
# Warmup Iteration  30: 2037190.174 ops/s
Iteration   1: 2039468.691 ops/s
Iteration   2: 2033673.602 ops/s
Iteration   3: 2033227.652 ops/s
Iteration   4: 2030829.826 ops/s
Iteration   5: 2035633.143 ops/s
Iteration   6: 2023901.458 ops/s
Iteration   7: 2028175.207 ops/s
Iteration   8: 2045965.383 ops/s
Iteration   9: 2037311.338 ops/s
Iteration  10: 2044475.594 ops/s
Iteration  11: 2042622.523 ops/s
Iteration  12: 2044312.659 ops/s
Iteration  13: 2039125.958 ops/s
Iteration  14: 2039577.381 ops/s
Iteration  15: 2039832.190 ops/s
Iteration  16: 2040098.401 ops/s
Iteration  17: 2033132.170 ops/s
Iteration  18: 2041139.707 ops/s
Iteration  19: 2034527.493 ops/s
Iteration  20: 2041428.135 ops/s
Iteration  21: 2038866.849 ops/s
Iteration  22: 2043148.813 ops/s
Iteration  23: 2028169.094 ops/s
Iteration  24: 2037169.859 ops/s
Iteration  25: 2038920.998 ops/s
Iteration  26: 2037695.442 ops/s
Iteration  27: 2040383.876 ops/s
Iteration  28: 2027647.103 ops/s
Iteration  29: 2037027.179 ops/s
Iteration  30: 2034630.647 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByDouble":
  2037070.612 ±(99.9%) 3631.329 ops/s [Average]
  (min, avg, max) = (2023901.458, 2037070.612, 2045965.383), stdev = 5435.202
  CI (99.9%): [2033439.284, 2040701.941] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByDouble  thrpt   30  2037070.612 ± 3631.329  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61.764 ops/s
# Warmup Iteration   2: 74.678 ops/s
# Warmup Iteration   3: 101.529 ops/s
# Warmup Iteration   4: 102.230 ops/s
# Warmup Iteration   5: 100.209 ops/s
# Warmup Iteration   6: 100.712 ops/s
# Warmup Iteration   7: 100.911 ops/s
# Warmup Iteration   8: 101.272 ops/s
# Warmup Iteration   9: 86.381 ops/s
# Warmup Iteration  10: 96.120 ops/s
# Warmup Iteration  11: 100.559 ops/s
# Warmup Iteration  12: 102.682 ops/s
# Warmup Iteration  13: 100.629 ops/s
# Warmup Iteration  14: 100.465 ops/s
# Warmup Iteration  15: 101.836 ops/s
# Warmup Iteration  16: 100.077 ops/s
# Warmup Iteration  17: 100.948 ops/s
# Warmup Iteration  18: 101.987 ops/s
# Warmup Iteration  19: 102.349 ops/s
# Warmup Iteration  20: 99.935 ops/s
# Warmup Iteration  21: 101.683 ops/s
# Warmup Iteration  22: 101.567 ops/s
# Warmup Iteration  23: 100.737 ops/s
# Warmup Iteration  24: 101.860 ops/s
# Warmup Iteration  25: 100.581 ops/s
# Warmup Iteration  26: 99.966 ops/s
# Warmup Iteration  27: 100.158 ops/s
# Warmup Iteration  28: 99.289 ops/s
# Warmup Iteration  29: 99.809 ops/s
# Warmup Iteration  30: 97.153 ops/s
Iteration   1: 96.453 ops/s
Iteration   2: 100.501 ops/s
Iteration   3: 98.739 ops/s
Iteration   4: 100.792 ops/s
Iteration   5: 100.721 ops/s
Iteration   6: 100.568 ops/s
Iteration   7: 100.620 ops/s
Iteration   8: 101.041 ops/s
Iteration   9: 99.951 ops/s
Iteration  10: 99.666 ops/s
Iteration  11: 98.243 ops/s
Iteration  12: 97.615 ops/s
Iteration  13: 98.846 ops/s
Iteration  14: 99.130 ops/s
Iteration  15: 98.702 ops/s
Iteration  16: 97.454 ops/s
Iteration  17: 98.081 ops/s
Iteration  18: 101.334 ops/s
Iteration  19: 98.666 ops/s
Iteration  20: 98.348 ops/s
Iteration  21: 100.720 ops/s
Iteration  22: 99.679 ops/s
Iteration  23: 99.014 ops/s
Iteration  24: 99.870 ops/s
Iteration  25: 99.417 ops/s
Iteration  26: 98.495 ops/s
Iteration  27: 99.829 ops/s
Iteration  28: 99.350 ops/s
Iteration  29: 99.100 ops/s
Iteration  30: 98.663 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  99.320 ±(99.9%) 0.783 ops/s [Average]
  (min, avg, max) = (96.453, 99.320, 101.334), stdev = 1.173
  CI (99.9%): [98.537, 100.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt   Score   Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  99.320 ± 0.783  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1020461.120 ops/s
# Warmup Iteration   2: 1813066.731 ops/s
# Warmup Iteration   3: 2034692.943 ops/s
# Warmup Iteration   4: 2046178.773 ops/s
# Warmup Iteration   5: 2050134.927 ops/s
# Warmup Iteration   6: 1691707.496 ops/s
# Warmup Iteration   7: 2043477.940 ops/s
# Warmup Iteration   8: 2050955.324 ops/s
# Warmup Iteration   9: 2052315.085 ops/s
# Warmup Iteration  10: 2051490.260 ops/s
# Warmup Iteration  11: 2048717.255 ops/s
# Warmup Iteration  12: 2049663.873 ops/s
# Warmup Iteration  13: 2053529.671 ops/s
# Warmup Iteration  14: 2051011.218 ops/s
# Warmup Iteration  15: 2050215.035 ops/s
# Warmup Iteration  16: 2050837.166 ops/s
# Warmup Iteration  17: 2049794.620 ops/s
# Warmup Iteration  18: 2045321.345 ops/s
# Warmup Iteration  19: 2048336.234 ops/s
# Warmup Iteration  20: 2049518.909 ops/s
# Warmup Iteration  21: 2044738.231 ops/s
# Warmup Iteration  22: 2042696.175 ops/s
# Warmup Iteration  23: 2046807.127 ops/s
# Warmup Iteration  24: 2055893.655 ops/s
# Warmup Iteration  25: 2053327.429 ops/s
# Warmup Iteration  26: 2054795.137 ops/s
# Warmup Iteration  27: 2048639.548 ops/s
# Warmup Iteration  28: 2050162.748 ops/s
# Warmup Iteration  29: 2032736.931 ops/s
# Warmup Iteration  30: 2007663.774 ops/s
Iteration   1: 2053580.783 ops/s
Iteration   2: 2052784.490 ops/s
Iteration   3: 2050484.897 ops/s
Iteration   4: 2053714.532 ops/s
Iteration   5: 2050475.012 ops/s
Iteration   6: 2051443.323 ops/s
Iteration   7: 2051133.779 ops/s
Iteration   8: 2051677.260 ops/s
Iteration   9: 2047360.630 ops/s
Iteration  10: 2047743.998 ops/s
Iteration  11: 2051861.152 ops/s
Iteration  12: 2044705.289 ops/s
Iteration  13: 2048422.240 ops/s
Iteration  14: 2055756.698 ops/s
Iteration  15: 2051509.484 ops/s
Iteration  16: 2056085.309 ops/s
Iteration  17: 2051962.628 ops/s
Iteration  18: 2052983.351 ops/s
Iteration  19: 2050347.196 ops/s
Iteration  20: 2049917.174 ops/s
Iteration  21: 2057519.933 ops/s
Iteration  22: 2054433.608 ops/s
Iteration  23: 2051921.549 ops/s
Iteration  24: 2045690.438 ops/s
Iteration  25: 2052914.766 ops/s
Iteration  26: 2055120.909 ops/s
Iteration  27: 2056025.083 ops/s
Iteration  28: 2055674.965 ops/s
Iteration  29: 2052596.599 ops/s
Iteration  30: 2058342.668 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByFloat":
  2052139.658 ±(99.9%) 2195.234 ops/s [Average]
  (min, avg, max) = (2044705.289, 2052139.658, 2058342.668), stdev = 3285.723
  CI (99.9%): [2049944.424, 2054334.892] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByFloat  thrpt   30  2052139.658 ± 2195.234  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61.438 ops/s
# Warmup Iteration   2: 72.478 ops/s
# Warmup Iteration   3: 97.585 ops/s
# Warmup Iteration   4: 100.831 ops/s
# Warmup Iteration   5: 99.519 ops/s
# Warmup Iteration   6: 101.253 ops/s
# Warmup Iteration   7: 99.480 ops/s
# Warmup Iteration   8: 100.048 ops/s
# Warmup Iteration   9: 90.153 ops/s
# Warmup Iteration  10: 91.155 ops/s
# Warmup Iteration  11: 99.677 ops/s
# Warmup Iteration  12: 101.554 ops/s
# Warmup Iteration  13: 100.940 ops/s
# Warmup Iteration  14: 98.807 ops/s
# Warmup Iteration  15: 99.436 ops/s
# Warmup Iteration  16: 100.311 ops/s
# Warmup Iteration  17: 97.288 ops/s
# Warmup Iteration  18: 97.937 ops/s
# Warmup Iteration  19: 97.916 ops/s
# Warmup Iteration  20: 98.074 ops/s
# Warmup Iteration  21: 97.980 ops/s
# Warmup Iteration  22: 96.719 ops/s
# Warmup Iteration  23: 95.680 ops/s
# Warmup Iteration  24: 95.971 ops/s
# Warmup Iteration  25: 98.987 ops/s
# Warmup Iteration  26: 98.301 ops/s
# Warmup Iteration  27: 97.707 ops/s
# Warmup Iteration  28: 97.437 ops/s
# Warmup Iteration  29: 98.086 ops/s
# Warmup Iteration  30: 97.050 ops/s
Iteration   1: 98.431 ops/s
Iteration   2: 98.353 ops/s
Iteration   3: 97.299 ops/s
Iteration   4: 96.712 ops/s
Iteration   5: 97.912 ops/s
Iteration   6: 98.810 ops/s
Iteration   7: 98.507 ops/s
Iteration   8: 98.202 ops/s
Iteration   9: 97.233 ops/s
Iteration  10: 98.857 ops/s
Iteration  11: 99.625 ops/s
Iteration  12: 99.124 ops/s
Iteration  13: 99.644 ops/s
Iteration  14: 98.853 ops/s
Iteration  15: 98.630 ops/s
Iteration  16: 99.682 ops/s
Iteration  17: 99.809 ops/s
Iteration  18: 99.296 ops/s
Iteration  19: 100.016 ops/s
Iteration  20: 99.090 ops/s
Iteration  21: 98.283 ops/s
Iteration  22: 100.036 ops/s
Iteration  23: 99.797 ops/s
Iteration  24: 99.224 ops/s
Iteration  25: 96.521 ops/s
Iteration  26: 96.743 ops/s
Iteration  27: 98.594 ops/s
Iteration  28: 96.147 ops/s
Iteration  29: 96.344 ops/s
Iteration  30: 96.755 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  98.418 ±(99.9%) 0.795 ops/s [Average]
  (min, avg, max) = (96.147, 98.418, 100.036), stdev = 1.190
  CI (99.9%): [97.623, 99.213] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt   Score   Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  98.418 ± 0.795  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1346776.734 ops/s
# Warmup Iteration   2: 2530052.390 ops/s
# Warmup Iteration   3: 2775656.247 ops/s
# Warmup Iteration   4: 2778509.103 ops/s
# Warmup Iteration   5: 2317510.364 ops/s
# Warmup Iteration   6: 2776859.955 ops/s
# Warmup Iteration   7: 2769266.926 ops/s
# Warmup Iteration   8: 2767750.268 ops/s
# Warmup Iteration   9: 2766601.425 ops/s
# Warmup Iteration  10: 2765236.008 ops/s
# Warmup Iteration  11: 2769032.472 ops/s
# Warmup Iteration  12: 2777324.318 ops/s
# Warmup Iteration  13: 2781247.048 ops/s
# Warmup Iteration  14: 2770137.825 ops/s
# Warmup Iteration  15: 2758742.293 ops/s
# Warmup Iteration  16: 2769031.740 ops/s
# Warmup Iteration  17: 2766932.430 ops/s
# Warmup Iteration  18: 2777495.593 ops/s
# Warmup Iteration  19: 2772050.360 ops/s
# Warmup Iteration  20: 2772926.773 ops/s
# Warmup Iteration  21: 2774970.735 ops/s
# Warmup Iteration  22: 2759337.157 ops/s
# Warmup Iteration  23: 2770486.842 ops/s
# Warmup Iteration  24: 2779882.324 ops/s
# Warmup Iteration  25: 2764538.711 ops/s
# Warmup Iteration  26: 2771627.958 ops/s
# Warmup Iteration  27: 2777680.582 ops/s
# Warmup Iteration  28: 2773355.389 ops/s
# Warmup Iteration  29: 2775201.080 ops/s
# Warmup Iteration  30: 2772222.611 ops/s
Iteration   1: 2782369.964 ops/s
Iteration   2: 2778330.992 ops/s
Iteration   3: 2780255.914 ops/s
Iteration   4: 2779762.356 ops/s
Iteration   5: 2772788.698 ops/s
Iteration   6: 2776649.907 ops/s
Iteration   7: 2786332.792 ops/s
Iteration   8: 2776523.003 ops/s
Iteration   9: 2780348.252 ops/s
Iteration  10: 2782918.320 ops/s
Iteration  11: 2777803.251 ops/s
Iteration  12: 2785193.254 ops/s
Iteration  13: 2783135.971 ops/s
Iteration  14: 2781875.067 ops/s
Iteration  15: 2777620.645 ops/s
Iteration  16: 2779352.624 ops/s
Iteration  17: 2771925.879 ops/s
Iteration  18: 2800174.557 ops/s
Iteration  19: 2775888.938 ops/s
Iteration  20: 2776053.627 ops/s
Iteration  21: 2774018.495 ops/s
Iteration  22: 2774532.583 ops/s
Iteration  23: 2779541.509 ops/s
Iteration  24: 2770993.641 ops/s
Iteration  25: 2774430.736 ops/s
Iteration  26: 2764703.924 ops/s
Iteration  27: 2776094.891 ops/s
Iteration  28: 2775646.990 ops/s
Iteration  29: 2785497.212 ops/s
Iteration  30: 2650615.469 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByInt":
  2774379.315 ±(99.9%) 16155.914 ops/s [Average]
  (min, avg, max) = (2650615.469, 2774379.315, 2800174.557), stdev = 24181.413
  CI (99.9%): [2758223.402, 2790535.229] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByInt  thrpt   30  2774379.315 ± 16155.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1407081.329 ops/s
# Warmup Iteration   2: 2747467.590 ops/s
# Warmup Iteration   3: 3010858.913 ops/s
# Warmup Iteration   4: 3026881.042 ops/s
# Warmup Iteration   5: 2496083.326 ops/s
# Warmup Iteration   6: 3026510.413 ops/s
# Warmup Iteration   7: 3027826.825 ops/s
# Warmup Iteration   8: 3010982.768 ops/s
# Warmup Iteration   9: 3029323.880 ops/s
# Warmup Iteration  10: 3031005.900 ops/s
# Warmup Iteration  11: 3015018.542 ops/s
# Warmup Iteration  12: 3024901.567 ops/s
# Warmup Iteration  13: 3007801.797 ops/s
# Warmup Iteration  14: 3019383.615 ops/s
# Warmup Iteration  15: 3030719.136 ops/s
# Warmup Iteration  16: 3015799.430 ops/s
# Warmup Iteration  17: 3018586.782 ops/s
# Warmup Iteration  18: 3017238.857 ops/s
# Warmup Iteration  19: 3017441.177 ops/s
# Warmup Iteration  20: 3028788.903 ops/s
# Warmup Iteration  21: 3029794.048 ops/s
# Warmup Iteration  22: 3029752.517 ops/s
# Warmup Iteration  23: 3020296.173 ops/s
# Warmup Iteration  24: 3013645.785 ops/s
# Warmup Iteration  25: 3023310.595 ops/s
# Warmup Iteration  26: 3019263.506 ops/s
# Warmup Iteration  27: 3027102.335 ops/s
# Warmup Iteration  28: 3024921.882 ops/s
# Warmup Iteration  29: 3017330.680 ops/s
# Warmup Iteration  30: 3019363.936 ops/s
Iteration   1: 3034151.404 ops/s
Iteration   2: 3018791.632 ops/s
Iteration   3: 3008427.074 ops/s
Iteration   4: 3024354.189 ops/s
Iteration   5: 3026051.908 ops/s
Iteration   6: 3028131.188 ops/s
Iteration   7: 3027158.857 ops/s
Iteration   8: 3025030.036 ops/s
Iteration   9: 3020780.273 ops/s
Iteration  10: 3033647.224 ops/s
Iteration  11: 3017963.871 ops/s
Iteration  12: 3028966.444 ops/s
Iteration  13: 3026525.050 ops/s
Iteration  14: 3022927.434 ops/s
Iteration  15: 3011554.509 ops/s
Iteration  16: 3026012.505 ops/s
Iteration  17: 3002277.967 ops/s
Iteration  18: 2992616.568 ops/s
Iteration  19: 3029408.454 ops/s
Iteration  20: 3024972.027 ops/s
Iteration  21: 3028928.966 ops/s
Iteration  22: 3020053.144 ops/s
Iteration  23: 3024110.413 ops/s
Iteration  24: 3024843.939 ops/s
Iteration  25: 3019195.969 ops/s
Iteration  26: 3019464.005 ops/s
Iteration  27: 3020009.745 ops/s
Iteration  28: 3019562.521 ops/s
Iteration  29: 3024309.740 ops/s
Iteration  30: 3009862.641 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByLong":
  3021336.323 ±(99.9%) 5988.740 ops/s [Average]
  (min, avg, max) = (2992616.568, 3021336.323, 3034151.404), stdev = 8963.665
  CI (99.9%): [3015347.583, 3027325.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_sumByLong  thrpt   30  3021336.323 ± 5988.740  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17435293.210 ops/s
# Warmup Iteration   2: 35119460.653 ops/s
# Warmup Iteration   3: 34623974.171 ops/s
# Warmup Iteration   4: 29462935.087 ops/s
# Warmup Iteration   5: 34762114.381 ops/s
# Warmup Iteration   6: 34815665.211 ops/s
# Warmup Iteration   7: 34646632.673 ops/s
# Warmup Iteration   8: 34614043.158 ops/s
# Warmup Iteration   9: 34713012.125 ops/s
# Warmup Iteration  10: 34845066.920 ops/s
# Warmup Iteration  11: 34779358.403 ops/s
# Warmup Iteration  12: 34829906.546 ops/s
# Warmup Iteration  13: 34825575.377 ops/s
# Warmup Iteration  14: 34727098.329 ops/s
# Warmup Iteration  15: 34798582.043 ops/s
# Warmup Iteration  16: 34726076.521 ops/s
# Warmup Iteration  17: 34765896.750 ops/s
# Warmup Iteration  18: 34534814.006 ops/s
# Warmup Iteration  19: 34733391.290 ops/s
# Warmup Iteration  20: 34819015.450 ops/s
# Warmup Iteration  21: 34744289.127 ops/s
# Warmup Iteration  22: 34762016.471 ops/s
# Warmup Iteration  23: 34818835.981 ops/s
# Warmup Iteration  24: 34853342.188 ops/s
# Warmup Iteration  25: 34656428.404 ops/s
# Warmup Iteration  26: 34841186.057 ops/s
# Warmup Iteration  27: 34773796.760 ops/s
# Warmup Iteration  28: 34829476.580 ops/s
# Warmup Iteration  29: 34593729.061 ops/s
# Warmup Iteration  30: 34839553.450 ops/s
Iteration   1: 34800751.451 ops/s
Iteration   2: 34562315.977 ops/s
Iteration   3: 34633781.647 ops/s
Iteration   4: 34814009.294 ops/s
Iteration   5: 34708016.418 ops/s
Iteration   6: 34730926.954 ops/s
Iteration   7: 34768056.485 ops/s
Iteration   8: 34789261.798 ops/s
Iteration   9: 34860648.418 ops/s
Iteration  10: 34776196.251 ops/s
Iteration  11: 34824072.335 ops/s
Iteration  12: 34894995.649 ops/s
Iteration  13: 34930353.531 ops/s
Iteration  14: 34864078.788 ops/s
Iteration  15: 34700228.620 ops/s
Iteration  16: 34785125.843 ops/s
Iteration  17: 34762000.239 ops/s
Iteration  18: 34523557.368 ops/s
Iteration  19: 34877423.164 ops/s
Iteration  20: 34683182.610 ops/s
Iteration  21: 34655628.916 ops/s
Iteration  22: 34517298.838 ops/s
Iteration  23: 34851221.038 ops/s
Iteration  24: 34781139.811 ops/s
Iteration  25: 34833813.417 ops/s
Iteration  26: 34823672.586 ops/s
Iteration  27: 34787064.403 ops/s
Iteration  28: 34658000.502 ops/s
Iteration  29: 34820149.880 ops/s
Iteration  30: 34792025.681 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumDouble":
  34760299.930 ±(99.9%) 70212.507 ops/s [Average]
  (min, avg, max) = (34517298.838, 34760299.930, 34930353.531), stdev = 105090.784
  CI (99.9%): [34690087.423, 34830512.438] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_sumDouble  thrpt   30  34760299.930 ± 70212.507  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13478154.909 ops/s
# Warmup Iteration   2: 36466837.898 ops/s
# Warmup Iteration   3: 26818830.264 ops/s
# Warmup Iteration   4: 22625509.703 ops/s
# Warmup Iteration   5: 26901710.784 ops/s
# Warmup Iteration   6: 26875525.286 ops/s
# Warmup Iteration   7: 26933586.763 ops/s
# Warmup Iteration   8: 26817649.006 ops/s
# Warmup Iteration   9: 26848466.107 ops/s
# Warmup Iteration  10: 26830520.613 ops/s
# Warmup Iteration  11: 26778341.573 ops/s
# Warmup Iteration  12: 26848055.787 ops/s
# Warmup Iteration  13: 26877905.002 ops/s
# Warmup Iteration  14: 26797905.367 ops/s
# Warmup Iteration  15: 26879952.455 ops/s
# Warmup Iteration  16: 26820467.745 ops/s
# Warmup Iteration  17: 26836389.734 ops/s
# Warmup Iteration  18: 26859615.636 ops/s
# Warmup Iteration  19: 26874286.024 ops/s
# Warmup Iteration  20: 26793244.103 ops/s
# Warmup Iteration  21: 26868680.919 ops/s
# Warmup Iteration  22: 26845773.802 ops/s
# Warmup Iteration  23: 26650015.973 ops/s
# Warmup Iteration  24: 26620521.107 ops/s
# Warmup Iteration  25: 26922898.434 ops/s
# Warmup Iteration  26: 26842856.487 ops/s
# Warmup Iteration  27: 26831585.623 ops/s
# Warmup Iteration  28: 26894476.827 ops/s
# Warmup Iteration  29: 26817754.375 ops/s
# Warmup Iteration  30: 26875568.145 ops/s
Iteration   1: 26950035.231 ops/s
Iteration   2: 26903827.383 ops/s
Iteration   3: 26849786.005 ops/s
Iteration   4: 26907194.390 ops/s
Iteration   5: 26907032.731 ops/s
Iteration   6: 26852181.872 ops/s
Iteration   7: 26934911.000 ops/s
Iteration   8: 26803011.080 ops/s
Iteration   9: 26953332.981 ops/s
Iteration  10: 26833191.116 ops/s
Iteration  11: 26763407.679 ops/s
Iteration  12: 26878624.488 ops/s
Iteration  13: 26927231.245 ops/s
Iteration  14: 26897666.463 ops/s
Iteration  15: 26892006.142 ops/s
Iteration  16: 26910765.429 ops/s
Iteration  17: 26931543.915 ops/s
Iteration  18: 26928628.447 ops/s
Iteration  19: 26853627.170 ops/s
Iteration  20: 26868396.167 ops/s
Iteration  21: 26919387.524 ops/s
Iteration  22: 26885049.958 ops/s
Iteration  23: 26852264.389 ops/s
Iteration  24: 26843915.550 ops/s
Iteration  25: 26945085.051 ops/s
Iteration  26: 26862555.552 ops/s
Iteration  27: 26797622.154 ops/s
Iteration  28: 26807015.694 ops/s
Iteration  29: 26944419.133 ops/s
Iteration  30: 26866252.768 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumFloat":
  26882332.290 ±(99.9%) 33451.451 ops/s [Average]
  (min, avg, max) = (26763407.679, 26882332.290, 26953332.981), stdev = 50068.560
  CI (99.9%): [26848880.840, 26915783.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_sumFloat  thrpt   30  26882332.290 ± 33451.451  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22532661.903 ops/s
# Warmup Iteration   2: 44372702.698 ops/s
# Warmup Iteration   3: 36400083.047 ops/s
# Warmup Iteration   4: 42826591.720 ops/s
# Warmup Iteration   5: 42823486.660 ops/s
# Warmup Iteration   6: 42981809.109 ops/s
# Warmup Iteration   7: 42821391.008 ops/s
# Warmup Iteration   8: 42917201.697 ops/s
# Warmup Iteration   9: 42907578.788 ops/s
# Warmup Iteration  10: 42917437.323 ops/s
# Warmup Iteration  11: 42795287.476 ops/s
# Warmup Iteration  12: 42914519.142 ops/s
# Warmup Iteration  13: 42882575.387 ops/s
# Warmup Iteration  14: 42930758.510 ops/s
# Warmup Iteration  15: 42807869.465 ops/s
# Warmup Iteration  16: 42488188.408 ops/s
# Warmup Iteration  17: 42916446.094 ops/s
# Warmup Iteration  18: 42828454.364 ops/s
# Warmup Iteration  19: 42726316.628 ops/s
# Warmup Iteration  20: 42884155.010 ops/s
# Warmup Iteration  21: 42817093.690 ops/s
# Warmup Iteration  22: 42768871.933 ops/s
# Warmup Iteration  23: 42843444.594 ops/s
# Warmup Iteration  24: 42775070.571 ops/s
# Warmup Iteration  25: 42815447.492 ops/s
# Warmup Iteration  26: 42716770.793 ops/s
# Warmup Iteration  27: 42793170.485 ops/s
# Warmup Iteration  28: 42795659.683 ops/s
# Warmup Iteration  29: 42835951.371 ops/s
# Warmup Iteration  30: 42769664.724 ops/s
Iteration   1: 42736218.693 ops/s
Iteration   2: 42871739.095 ops/s
Iteration   3: 42826765.658 ops/s
Iteration   4: 42878549.338 ops/s
Iteration   5: 42868606.111 ops/s
Iteration   6: 43060521.298 ops/s
Iteration   7: 42896768.889 ops/s
Iteration   8: 42942148.233 ops/s
Iteration   9: 42674149.651 ops/s
Iteration  10: 42735256.873 ops/s
Iteration  11: 42955278.362 ops/s
Iteration  12: 42872507.800 ops/s
Iteration  13: 42560259.081 ops/s
Iteration  14: 42911248.531 ops/s
Iteration  15: 42885234.851 ops/s
Iteration  16: 42836860.582 ops/s
Iteration  17: 42963324.750 ops/s
Iteration  18: 42914229.321 ops/s
Iteration  19: 42785583.302 ops/s
Iteration  20: 42890967.064 ops/s
Iteration  21: 42920423.281 ops/s
Iteration  22: 42875778.999 ops/s
Iteration  23: 42816804.020 ops/s
Iteration  24: 42836333.231 ops/s
Iteration  25: 42938870.787 ops/s
Iteration  26: 42889371.750 ops/s
Iteration  27: 42789762.024 ops/s
Iteration  28: 42650580.019 ops/s
Iteration  29: 42841679.879 ops/s
Iteration  30: 42793930.588 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumInteger":
  42847325.069 ±(99.9%) 68006.020 ops/s [Average]
  (min, avg, max) = (42560259.081, 42847325.069, 43060521.298), stdev = 101788.217
  CI (99.9%): [42779319.048, 42915331.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_sumInteger  thrpt   30  42847325.069 ± 68006.020  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22058141.512 ops/s
# Warmup Iteration   2: 45291295.547 ops/s
# Warmup Iteration   3: 35223077.711 ops/s
# Warmup Iteration   4: 41475414.534 ops/s
# Warmup Iteration   5: 41269496.271 ops/s
# Warmup Iteration   6: 41377222.853 ops/s
# Warmup Iteration   7: 41258088.617 ops/s
# Warmup Iteration   8: 41310263.118 ops/s
# Warmup Iteration   9: 41292145.801 ops/s
# Warmup Iteration  10: 41479534.873 ops/s
# Warmup Iteration  11: 41326961.009 ops/s
# Warmup Iteration  12: 41160952.325 ops/s
# Warmup Iteration  13: 41196514.218 ops/s
# Warmup Iteration  14: 41356883.246 ops/s
# Warmup Iteration  15: 41428872.335 ops/s
# Warmup Iteration  16: 41219986.225 ops/s
# Warmup Iteration  17: 41268215.365 ops/s
# Warmup Iteration  18: 41191633.030 ops/s
# Warmup Iteration  19: 41287896.897 ops/s
# Warmup Iteration  20: 41463361.455 ops/s
# Warmup Iteration  21: 41310605.908 ops/s
# Warmup Iteration  22: 41300138.665 ops/s
# Warmup Iteration  23: 41455746.357 ops/s
# Warmup Iteration  24: 41319496.295 ops/s
# Warmup Iteration  25: 41472329.136 ops/s
# Warmup Iteration  26: 41403238.783 ops/s
# Warmup Iteration  27: 41470687.083 ops/s
# Warmup Iteration  28: 41370808.815 ops/s
# Warmup Iteration  29: 41489059.132 ops/s
# Warmup Iteration  30: 41486177.418 ops/s
Iteration   1: 41586153.009 ops/s
Iteration   2: 41364398.792 ops/s
Iteration   3: 41484570.891 ops/s
Iteration   4: 41537450.927 ops/s
Iteration   5: 41354068.171 ops/s
Iteration   6: 41412143.186 ops/s
Iteration   7: 41317697.710 ops/s
Iteration   8: 40938074.673 ops/s
Iteration   9: 41472460.852 ops/s
Iteration  10: 41430884.531 ops/s
Iteration  11: 41508447.483 ops/s
Iteration  12: 41509083.710 ops/s
Iteration  13: 41426060.786 ops/s
Iteration  14: 41216300.564 ops/s
Iteration  15: 40742918.354 ops/s
Iteration  16: 41411966.258 ops/s
Iteration  17: 41413726.196 ops/s
Iteration  18: 41487345.686 ops/s
Iteration  19: 41270712.131 ops/s
Iteration  20: 41435827.237 ops/s
Iteration  21: 41240315.975 ops/s
Iteration  22: 41437026.138 ops/s
Iteration  23: 41443485.519 ops/s
Iteration  24: 41315391.646 ops/s
Iteration  25: 41399123.373 ops/s
Iteration  26: 41344679.385 ops/s
Iteration  27: 41496411.824 ops/s
Iteration  28: 41356371.808 ops/s
Iteration  29: 40943939.638 ops/s
Iteration  30: 41032913.292 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_sumLong":
  41344331.658 ±(99.9%) 130494.833 ops/s [Average]
  (min, avg, max) = (40742918.354, 41344331.658, 41586153.009), stdev = 195318.537
  CI (99.9%): [41213836.826, 41474826.491] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_sumLong  thrpt   30  41344331.658 ± 130494.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3116754.674 ops/s
# Warmup Iteration   2: 6753979.675 ops/s
# Warmup Iteration   3: 7069504.593 ops/s
# Warmup Iteration   4: 6967851.553 ops/s
# Warmup Iteration   5: 6064639.002 ops/s
# Warmup Iteration   6: 7140513.552 ops/s
# Warmup Iteration   7: 7094777.896 ops/s
# Warmup Iteration   8: 7113743.830 ops/s
# Warmup Iteration   9: 7129542.417 ops/s
# Warmup Iteration  10: 7117172.284 ops/s
# Warmup Iteration  11: 7114185.812 ops/s
# Warmup Iteration  12: 7119642.828 ops/s
# Warmup Iteration  13: 7090521.018 ops/s
# Warmup Iteration  14: 7095289.960 ops/s
# Warmup Iteration  15: 7123046.046 ops/s
# Warmup Iteration  16: 7111501.707 ops/s
# Warmup Iteration  17: 7120511.934 ops/s
# Warmup Iteration  18: 7118914.762 ops/s
# Warmup Iteration  19: 7125787.264 ops/s
# Warmup Iteration  20: 7121422.756 ops/s
# Warmup Iteration  21: 7111040.128 ops/s
# Warmup Iteration  22: 7114848.784 ops/s
# Warmup Iteration  23: 7127257.323 ops/s
# Warmup Iteration  24: 7129333.578 ops/s
# Warmup Iteration  25: 7124143.525 ops/s
# Warmup Iteration  26: 7110832.126 ops/s
# Warmup Iteration  27: 7116221.808 ops/s
# Warmup Iteration  28: 7128762.698 ops/s
# Warmup Iteration  29: 7120184.707 ops/s
# Warmup Iteration  30: 7121995.856 ops/s
Iteration   1: 7138798.124 ops/s
Iteration   2: 7123839.981 ops/s
Iteration   3: 7129412.044 ops/s
Iteration   4: 7133943.824 ops/s
Iteration   5: 7143924.656 ops/s
Iteration   6: 7130715.771 ops/s
Iteration   7: 7135914.698 ops/s
Iteration   8: 7142786.822 ops/s
Iteration   9: 7112319.410 ops/s
Iteration  10: 7137904.082 ops/s
Iteration  11: 7079719.901 ops/s
Iteration  12: 7107382.118 ops/s
Iteration  13: 7114318.315 ops/s
Iteration  14: 7119977.641 ops/s
Iteration  15: 7131789.109 ops/s
Iteration  16: 7129665.881 ops/s
Iteration  17: 7133625.628 ops/s
Iteration  18: 7147694.871 ops/s
Iteration  19: 7120388.090 ops/s
Iteration  20: 7126045.282 ops/s
Iteration  21: 7126292.198 ops/s
Iteration  22: 7130978.410 ops/s
Iteration  23: 7145991.478 ops/s
Iteration  24: 7111070.058 ops/s
Iteration  25: 7073099.536 ops/s
Iteration  26: 7125291.113 ops/s
Iteration  27: 7139191.494 ops/s
Iteration  28: 7129734.724 ops/s
Iteration  29: 7126033.308 ops/s
Iteration  30: 7122275.704 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_take":
  7125670.809 ±(99.9%) 11240.869 ops/s [Average]
  (min, avg, max) = (7073099.536, 7125670.809, 7147694.871), stdev = 16824.805
  CI (99.9%): [7114429.940, 7136911.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_take  thrpt   30  7125670.809 ± 11240.869  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8764409.860 ops/s
# Warmup Iteration   2: 18998824.601 ops/s
# Warmup Iteration   3: 19055784.826 ops/s
# Warmup Iteration   4: 16061329.546 ops/s
# Warmup Iteration   5: 18995559.479 ops/s
# Warmup Iteration   6: 19021487.986 ops/s
# Warmup Iteration   7: 18981717.013 ops/s
# Warmup Iteration   8: 19002557.376 ops/s
# Warmup Iteration   9: 19013549.271 ops/s
# Warmup Iteration  10: 19037924.830 ops/s
# Warmup Iteration  11: 19028089.403 ops/s
# Warmup Iteration  12: 19074101.674 ops/s
# Warmup Iteration  13: 19062775.521 ops/s
# Warmup Iteration  14: 19033374.826 ops/s
# Warmup Iteration  15: 19071714.345 ops/s
# Warmup Iteration  16: 18974590.536 ops/s
# Warmup Iteration  17: 18996909.165 ops/s
# Warmup Iteration  18: 19068869.849 ops/s
# Warmup Iteration  19: 19079092.353 ops/s
# Warmup Iteration  20: 19023799.494 ops/s
# Warmup Iteration  21: 19041877.071 ops/s
# Warmup Iteration  22: 18985118.348 ops/s
# Warmup Iteration  23: 19002497.202 ops/s
# Warmup Iteration  24: 19059259.341 ops/s
# Warmup Iteration  25: 19045906.717 ops/s
# Warmup Iteration  26: 19082389.374 ops/s
# Warmup Iteration  27: 19002540.321 ops/s
# Warmup Iteration  28: 19003940.302 ops/s
# Warmup Iteration  29: 19040636.820 ops/s
# Warmup Iteration  30: 19074740.152 ops/s
Iteration   1: 19085845.040 ops/s
Iteration   2: 19043368.902 ops/s
Iteration   3: 19065763.755 ops/s
Iteration   4: 19058224.416 ops/s
Iteration   5: 18980251.697 ops/s
Iteration   6: 18943185.035 ops/s
Iteration   7: 18985619.750 ops/s
Iteration   8: 19032190.712 ops/s
Iteration   9: 19008128.229 ops/s
Iteration  10: 19038812.015 ops/s
Iteration  11: 19027182.980 ops/s
Iteration  12: 18939595.017 ops/s
Iteration  13: 19027710.802 ops/s
Iteration  14: 19033608.533 ops/s
Iteration  15: 19090483.941 ops/s
Iteration  16: 19073169.127 ops/s
Iteration  17: 19081751.723 ops/s
Iteration  18: 19082972.281 ops/s
Iteration  19: 19031501.342 ops/s
Iteration  20: 19036712.140 ops/s
Iteration  21: 19031016.258 ops/s
Iteration  22: 19042760.806 ops/s
Iteration  23: 19032330.129 ops/s
Iteration  24: 19111803.148 ops/s
Iteration  25: 19090920.856 ops/s
Iteration  26: 19049448.681 ops/s
Iteration  27: 19035447.917 ops/s
Iteration  28: 19034099.693 ops/s
Iteration  29: 19039291.158 ops/s
Iteration  30: 18989411.002 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_takeWhile":
  19037420.236 ±(99.9%) 27251.256 ops/s [Average]
  (min, avg, max) = (18939595.017, 19037420.236, 19111803.148), stdev = 40788.400
  CI (99.9%): [19010168.981, 19064671.492] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_takeWhile  thrpt   30  19037420.236 ± 27251.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747663.097 ops/s
# Warmup Iteration   2: 771112.387 ops/s
# Warmup Iteration   3: 977525.206 ops/s
# Warmup Iteration   4: 985453.660 ops/s
# Warmup Iteration   5: 990041.438 ops/s
# Warmup Iteration   6: 984973.446 ops/s
# Warmup Iteration   7: 989563.393 ops/s
# Warmup Iteration   8: 988263.418 ops/s
# Warmup Iteration   9: 985491.539 ops/s
# Warmup Iteration  10: 989369.719 ops/s
# Warmup Iteration  11: 989504.291 ops/s
# Warmup Iteration  12: 845180.303 ops/s
# Warmup Iteration  13: 985990.942 ops/s
# Warmup Iteration  14: 986188.034 ops/s
# Warmup Iteration  15: 984567.679 ops/s
# Warmup Iteration  16: 983922.775 ops/s
# Warmup Iteration  17: 1050157.953 ops/s
# Warmup Iteration  18: 1046654.464 ops/s
# Warmup Iteration  19: 1048960.217 ops/s
# Warmup Iteration  20: 1046357.104 ops/s
# Warmup Iteration  21: 1049585.803 ops/s
# Warmup Iteration  22: 1046952.713 ops/s
# Warmup Iteration  23: 1049056.831 ops/s
# Warmup Iteration  24: 1047935.227 ops/s
# Warmup Iteration  25: 1048602.539 ops/s
# Warmup Iteration  26: 1039050.432 ops/s
# Warmup Iteration  27: 1048094.492 ops/s
# Warmup Iteration  28: 1046289.227 ops/s
# Warmup Iteration  29: 1047885.008 ops/s
# Warmup Iteration  30: 1045633.870 ops/s
Iteration   1: 1047618.546 ops/s
Iteration   2: 1048166.951 ops/s
Iteration   3: 1048058.143 ops/s
Iteration   4: 1047919.520 ops/s
Iteration   5: 1049865.416 ops/s
Iteration   6: 1047309.494 ops/s
Iteration   7: 1049858.921 ops/s
Iteration   8: 1046855.228 ops/s
Iteration   9: 1049000.770 ops/s
Iteration  10: 1049084.869 ops/s
Iteration  11: 1046499.180 ops/s
Iteration  12: 1049061.886 ops/s
Iteration  13: 1051692.364 ops/s
Iteration  14: 1050107.287 ops/s
Iteration  15: 1046426.527 ops/s
Iteration  16: 1048768.796 ops/s
Iteration  17: 1048199.177 ops/s
Iteration  18: 1046997.207 ops/s
Iteration  19: 1049873.109 ops/s
Iteration  20: 1048558.985 ops/s
Iteration  21: 1050125.767 ops/s
Iteration  22: 1048649.186 ops/s
Iteration  23: 1046097.665 ops/s
Iteration  24: 1049167.078 ops/s
Iteration  25: 1049600.299 ops/s
Iteration  26: 1045256.282 ops/s
Iteration  27: 1041877.906 ops/s
Iteration  28: 1048669.085 ops/s
Iteration  29: 1042385.726 ops/s
Iteration  30: 1047019.919 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_take_throws":
  1047959.043 ±(99.9%) 1419.127 ops/s [Average]
  (min, avg, max) = (1041877.906, 1047959.043, 1051692.364), stdev = 2124.082
  CI (99.9%): [1046539.916, 1049378.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_take_throws  thrpt   30  1047959.043 ± 1419.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14865579.326 ops/s
# Warmup Iteration   2: 29807115.495 ops/s
# Warmup Iteration   3: 26494558.922 ops/s
# Warmup Iteration   4: 31084680.504 ops/s
# Warmup Iteration   5: 31086337.371 ops/s
# Warmup Iteration   6: 31055191.689 ops/s
# Warmup Iteration   7: 31053439.536 ops/s
# Warmup Iteration   8: 31013252.922 ops/s
# Warmup Iteration   9: 30996590.144 ops/s
# Warmup Iteration  10: 31010080.538 ops/s
# Warmup Iteration  11: 31032003.124 ops/s
# Warmup Iteration  12: 31082179.645 ops/s
# Warmup Iteration  13: 30932686.100 ops/s
# Warmup Iteration  14: 31198587.811 ops/s
# Warmup Iteration  15: 30830861.664 ops/s
# Warmup Iteration  16: 30829337.959 ops/s
# Warmup Iteration  17: 31063701.150 ops/s
# Warmup Iteration  18: 31028844.673 ops/s
# Warmup Iteration  19: 31058082.187 ops/s
# Warmup Iteration  20: 30907624.304 ops/s
# Warmup Iteration  21: 31075990.640 ops/s
# Warmup Iteration  22: 30999911.672 ops/s
# Warmup Iteration  23: 31026983.721 ops/s
# Warmup Iteration  24: 31167125.393 ops/s
# Warmup Iteration  25: 31023609.064 ops/s
# Warmup Iteration  26: 31046779.065 ops/s
# Warmup Iteration  27: 31101756.286 ops/s
# Warmup Iteration  28: 30923371.675 ops/s
# Warmup Iteration  29: 30991168.188 ops/s
# Warmup Iteration  30: 31077729.973 ops/s
Iteration   1: 31091668.248 ops/s
Iteration   2: 30992026.644 ops/s
Iteration   3: 30961979.199 ops/s
Iteration   4: 31010095.797 ops/s
Iteration   5: 30903802.803 ops/s
Iteration   6: 31170351.011 ops/s
Iteration   7: 31038714.667 ops/s
Iteration   8: 31002727.007 ops/s
Iteration   9: 31020838.478 ops/s
Iteration  10: 31185153.079 ops/s
Iteration  11: 31070711.723 ops/s
Iteration  12: 31049154.469 ops/s
Iteration  13: 31108570.963 ops/s
Iteration  14: 31100351.628 ops/s
Iteration  15: 30818799.334 ops/s
Iteration  16: 31120755.956 ops/s
Iteration  17: 31100776.366 ops/s
Iteration  18: 30910883.751 ops/s
Iteration  19: 30926152.351 ops/s
Iteration  20: 30837391.888 ops/s
Iteration  21: 30992268.340 ops/s
Iteration  22: 31231880.004 ops/s
Iteration  23: 30945041.148 ops/s
Iteration  24: 31074056.889 ops/s
Iteration  25: 31103886.905 ops/s
Iteration  26: 31125121.959 ops/s
Iteration  27: 31181396.317 ops/s
Iteration  28: 31002142.541 ops/s
Iteration  29: 30918227.216 ops/s
Iteration  30: 30942410.303 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_tap":
  31031244.566 ±(99.9%) 69476.555 ops/s [Average]
  (min, avg, max) = (30818799.334, 31031244.566, 31231880.004), stdev = 103989.245
  CI (99.9%): [30961768.011, 31100721.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_tap  thrpt   30  31031244.566 ± 69476.555  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1969904.877 ops/s
# Warmup Iteration   2: 4131234.040 ops/s
# Warmup Iteration   3: 4328420.465 ops/s
# Warmup Iteration   4: 3653466.042 ops/s
# Warmup Iteration   5: 4337881.818 ops/s
# Warmup Iteration   6: 4329610.580 ops/s
# Warmup Iteration   7: 4329029.661 ops/s
# Warmup Iteration   8: 4340251.990 ops/s
# Warmup Iteration   9: 4333244.851 ops/s
# Warmup Iteration  10: 4310559.496 ops/s
# Warmup Iteration  11: 4318420.006 ops/s
# Warmup Iteration  12: 4329783.008 ops/s
# Warmup Iteration  13: 4325521.716 ops/s
# Warmup Iteration  14: 4332445.819 ops/s
# Warmup Iteration  15: 4332475.369 ops/s
# Warmup Iteration  16: 4340562.519 ops/s
# Warmup Iteration  17: 4323256.565 ops/s
# Warmup Iteration  18: 4340401.470 ops/s
# Warmup Iteration  19: 4339812.342 ops/s
# Warmup Iteration  20: 4326486.862 ops/s
# Warmup Iteration  21: 4329334.936 ops/s
# Warmup Iteration  22: 4343331.195 ops/s
# Warmup Iteration  23: 4333913.782 ops/s
# Warmup Iteration  24: 4332575.189 ops/s
# Warmup Iteration  25: 4334174.785 ops/s
# Warmup Iteration  26: 4322692.761 ops/s
# Warmup Iteration  27: 4330701.679 ops/s
# Warmup Iteration  28: 4321174.764 ops/s
# Warmup Iteration  29: 4320257.558 ops/s
# Warmup Iteration  30: 4335469.528 ops/s
Iteration   1: 4320865.658 ops/s
Iteration   2: 4327038.301 ops/s
Iteration   3: 4325453.496 ops/s
Iteration   4: 4318775.040 ops/s
Iteration   5: 4325772.212 ops/s
Iteration   6: 4280458.661 ops/s
Iteration   7: 4337673.612 ops/s
Iteration   8: 4313875.529 ops/s
Iteration   9: 4314581.145 ops/s
Iteration  10: 4338287.667 ops/s
Iteration  11: 4328628.901 ops/s
Iteration  12: 4336931.063 ops/s
Iteration  13: 4331537.391 ops/s
Iteration  14: 4339922.566 ops/s
Iteration  15: 4332444.116 ops/s
Iteration  16: 4338160.379 ops/s
Iteration  17: 4320860.798 ops/s
Iteration  18: 4337796.991 ops/s
Iteration  19: 4319153.081 ops/s
Iteration  20: 4329737.013 ops/s
Iteration  21: 4292781.521 ops/s
Iteration  22: 4337253.509 ops/s
Iteration  23: 4332337.644 ops/s
Iteration  24: 4346238.430 ops/s
Iteration  25: 4339233.823 ops/s
Iteration  26: 4308926.428 ops/s
Iteration  27: 4337574.295 ops/s
Iteration  28: 4336334.331 ops/s
Iteration  29: 4322342.360 ops/s
Iteration  30: 4329193.648 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_testToString":
  4326672.320 ±(99.9%) 9515.645 ops/s [Average]
  (min, avg, max) = (4280458.661, 4326672.320, 4346238.430), stdev = 14242.570
  CI (99.9%): [4317156.675, 4336187.965] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_testToString  thrpt   30  4326672.320 ± 9515.645  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8190079.880 ops/s
# Warmup Iteration   2: 16335947.001 ops/s
# Warmup Iteration   3: 14014904.145 ops/s
# Warmup Iteration   4: 16437634.248 ops/s
# Warmup Iteration   5: 16446092.644 ops/s
# Warmup Iteration   6: 16438735.588 ops/s
# Warmup Iteration   7: 16436099.319 ops/s
# Warmup Iteration   8: 16488873.831 ops/s
# Warmup Iteration   9: 16461926.477 ops/s
# Warmup Iteration  10: 16361562.216 ops/s
# Warmup Iteration  11: 16478336.339 ops/s
# Warmup Iteration  12: 16410018.920 ops/s
# Warmup Iteration  13: 16407068.922 ops/s
# Warmup Iteration  14: 16433477.722 ops/s
# Warmup Iteration  15: 16460481.828 ops/s
# Warmup Iteration  16: 16483882.468 ops/s
# Warmup Iteration  17: 16493963.657 ops/s
# Warmup Iteration  18: 16469706.833 ops/s
# Warmup Iteration  19: 16485737.217 ops/s
# Warmup Iteration  20: 16499969.501 ops/s
# Warmup Iteration  21: 16455808.748 ops/s
# Warmup Iteration  22: 16405936.559 ops/s
# Warmup Iteration  23: 16398791.059 ops/s
# Warmup Iteration  24: 16498986.688 ops/s
# Warmup Iteration  25: 16504562.971 ops/s
# Warmup Iteration  26: 16459272.773 ops/s
# Warmup Iteration  27: 16497712.087 ops/s
# Warmup Iteration  28: 16465690.361 ops/s
# Warmup Iteration  29: 16433893.519 ops/s
# Warmup Iteration  30: 16490850.325 ops/s
Iteration   1: 16500235.373 ops/s
Iteration   2: 16414471.779 ops/s
Iteration   3: 16428696.109 ops/s
Iteration   4: 16492287.919 ops/s
Iteration   5: 16481531.410 ops/s
Iteration   6: 16531018.878 ops/s
Iteration   7: 16465498.420 ops/s
Iteration   8: 16414116.040 ops/s
Iteration   9: 16484299.677 ops/s
Iteration  10: 16417144.441 ops/s
Iteration  11: 16452994.151 ops/s
Iteration  12: 16454750.642 ops/s
Iteration  13: 16464845.483 ops/s
Iteration  14: 16536484.107 ops/s
Iteration  15: 16463588.402 ops/s
Iteration  16: 16528565.874 ops/s
Iteration  17: 16505413.414 ops/s
Iteration  18: 16507900.740 ops/s
Iteration  19: 16445865.069 ops/s
Iteration  20: 16394258.988 ops/s
Iteration  21: 16496708.528 ops/s
Iteration  22: 16494011.519 ops/s
Iteration  23: 16539349.012 ops/s
Iteration  24: 16479641.256 ops/s
Iteration  25: 16513681.884 ops/s
Iteration  26: 16477476.513 ops/s
Iteration  27: 16518979.408 ops/s
Iteration  28: 16483632.279 ops/s
Iteration  29: 16462581.613 ops/s
Iteration  30: 16474230.600 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toArray":
  16477475.318 ±(99.9%) 25662.315 ops/s [Average]
  (min, avg, max) = (16394258.988, 16477475.318, 16539349.012), stdev = 38410.148
  CI (99.9%): [16451813.002, 16503137.633] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_toArray  thrpt   30  16477475.318 ± 25662.315  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165492357.766 ops/s
# Warmup Iteration   2: 302146840.411 ops/s
# Warmup Iteration   3: 281110604.536 ops/s
# Warmup Iteration   4: 317531771.556 ops/s
# Warmup Iteration   5: 317698662.358 ops/s
# Warmup Iteration   6: 319501150.135 ops/s
# Warmup Iteration   7: 316211230.215 ops/s
# Warmup Iteration   8: 317807936.095 ops/s
# Warmup Iteration   9: 317989744.355 ops/s
# Warmup Iteration  10: 318111834.251 ops/s
# Warmup Iteration  11: 318378955.297 ops/s
# Warmup Iteration  12: 316416330.559 ops/s
# Warmup Iteration  13: 317743605.582 ops/s
# Warmup Iteration  14: 317105194.091 ops/s
# Warmup Iteration  15: 317755549.588 ops/s
# Warmup Iteration  16: 318197707.508 ops/s
# Warmup Iteration  17: 317105365.541 ops/s
# Warmup Iteration  18: 317626058.474 ops/s
# Warmup Iteration  19: 316890060.482 ops/s
# Warmup Iteration  20: 316831063.848 ops/s
# Warmup Iteration  21: 315643928.012 ops/s
# Warmup Iteration  22: 317740257.191 ops/s
# Warmup Iteration  23: 318139237.517 ops/s
# Warmup Iteration  24: 317728180.982 ops/s
# Warmup Iteration  25: 317377787.951 ops/s
# Warmup Iteration  26: 314075929.596 ops/s
# Warmup Iteration  27: 316804427.046 ops/s
# Warmup Iteration  28: 317560547.021 ops/s
# Warmup Iteration  29: 317688617.478 ops/s
# Warmup Iteration  30: 316684020.442 ops/s
Iteration   1: 313056758.689 ops/s
Iteration   2: 317198213.742 ops/s
Iteration   3: 317153705.601 ops/s
Iteration   4: 315741567.320 ops/s
Iteration   5: 317138062.312 ops/s
Iteration   6: 315365576.907 ops/s
Iteration   7: 316198895.628 ops/s
Iteration   8: 315714783.005 ops/s
Iteration   9: 315550577.682 ops/s
Iteration  10: 317329651.499 ops/s
Iteration  11: 316006965.782 ops/s
Iteration  12: 313072701.021 ops/s
Iteration  13: 315473500.318 ops/s
Iteration  14: 317021924.493 ops/s
Iteration  15: 317172129.351 ops/s
Iteration  16: 317098255.881 ops/s
Iteration  17: 317457300.541 ops/s
Iteration  18: 315258349.146 ops/s
Iteration  19: 316362007.254 ops/s
Iteration  20: 314559561.544 ops/s
Iteration  21: 317079333.698 ops/s
Iteration  22: 318590052.854 ops/s
Iteration  23: 317561916.048 ops/s
Iteration  24: 316726236.317 ops/s
Iteration  25: 317174745.159 ops/s
Iteration  26: 316349556.034 ops/s
Iteration  27: 315270358.083 ops/s
Iteration  28: 315797302.937 ops/s
Iteration  29: 318249987.790 ops/s
Iteration  30: 315986680.635 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toImmutable":
  316290555.242 ±(99.9%) 860276.594 ops/s [Average]
  (min, avg, max) = (313056758.689, 316290555.242, 318590052.854), stdev = 1287621.605
  CI (99.9%): [315430278.648, 317150831.837] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score        Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_toImmutable  thrpt   30  316290555.242 ± 860276.594  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3634805.550 ops/s
# Warmup Iteration   2: 7586621.769 ops/s
# Warmup Iteration   3: 6515138.718 ops/s
# Warmup Iteration   4: 7710572.299 ops/s
# Warmup Iteration   5: 7684409.724 ops/s
# Warmup Iteration   6: 7702601.952 ops/s
# Warmup Iteration   7: 7714312.015 ops/s
# Warmup Iteration   8: 7696734.759 ops/s
# Warmup Iteration   9: 7684791.261 ops/s
# Warmup Iteration  10: 7685829.271 ops/s
# Warmup Iteration  11: 7701935.426 ops/s
# Warmup Iteration  12: 7681886.102 ops/s
# Warmup Iteration  13: 7668323.928 ops/s
# Warmup Iteration  14: 7701721.715 ops/s
# Warmup Iteration  15: 7701376.422 ops/s
# Warmup Iteration  16: 7689136.884 ops/s
# Warmup Iteration  17: 7704242.584 ops/s
# Warmup Iteration  18: 7675872.699 ops/s
# Warmup Iteration  19: 7685412.292 ops/s
# Warmup Iteration  20: 7695053.282 ops/s
# Warmup Iteration  21: 7699176.487 ops/s
# Warmup Iteration  22: 7708603.538 ops/s
# Warmup Iteration  23: 7698054.936 ops/s
# Warmup Iteration  24: 7696363.923 ops/s
# Warmup Iteration  25: 7692535.482 ops/s
# Warmup Iteration  26: 7699381.164 ops/s
# Warmup Iteration  27: 7703385.663 ops/s
# Warmup Iteration  28: 7705651.269 ops/s
# Warmup Iteration  29: 7685761.041 ops/s
# Warmup Iteration  30: 7696554.783 ops/s
Iteration   1: 7723550.833 ops/s
Iteration   2: 7698700.769 ops/s
Iteration   3: 7688890.303 ops/s
Iteration   4: 7704751.055 ops/s
Iteration   5: 7624234.769 ops/s
Iteration   6: 7708331.482 ops/s
Iteration   7: 7695546.828 ops/s
Iteration   8: 7682250.279 ops/s
Iteration   9: 7647927.103 ops/s
Iteration  10: 7681671.516 ops/s
Iteration  11: 7701612.033 ops/s
Iteration  12: 7704086.081 ops/s
Iteration  13: 7711051.966 ops/s
Iteration  14: 7704283.346 ops/s
Iteration  15: 7708616.310 ops/s
Iteration  16: 7699954.034 ops/s
Iteration  17: 7683635.980 ops/s
Iteration  18: 7665942.273 ops/s
Iteration  19: 7702228.262 ops/s
Iteration  20: 7697776.347 ops/s
Iteration  21: 7732854.836 ops/s
Iteration  22: 7693235.918 ops/s
Iteration  23: 7665560.438 ops/s
Iteration  24: 7690507.348 ops/s
Iteration  25: 7694478.218 ops/s
Iteration  26: 7713739.348 ops/s
Iteration  27: 7705249.556 ops/s
Iteration  28: 7671261.871 ops/s
Iteration  29: 7680271.173 ops/s
Iteration  30: 7666744.524 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toList":
  7691631.493 ±(99.9%) 14905.650 ops/s [Average]
  (min, avg, max) = (7624234.769, 7691631.493, 7732854.836), stdev = 22310.077
  CI (99.9%): [7676725.844, 7706537.143] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_toList  thrpt   30  7691631.493 ± 14905.650  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1901462.398 ops/s
# Warmup Iteration   2: 2296765.125 ops/s
# Warmup Iteration   3: 2982848.017 ops/s
# Warmup Iteration   4: 2967296.668 ops/s
# Warmup Iteration   5: 2986099.796 ops/s
# Warmup Iteration   6: 2985992.326 ops/s
# Warmup Iteration   7: 2977841.359 ops/s
# Warmup Iteration   8: 2972223.914 ops/s
# Warmup Iteration   9: 2563052.624 ops/s
# Warmup Iteration  10: 2850391.532 ops/s
# Warmup Iteration  11: 2972514.194 ops/s
# Warmup Iteration  12: 2980316.061 ops/s
# Warmup Iteration  13: 2979215.835 ops/s
# Warmup Iteration  14: 2978340.022 ops/s
# Warmup Iteration  15: 2983474.537 ops/s
# Warmup Iteration  16: 2978512.448 ops/s
# Warmup Iteration  17: 2989206.932 ops/s
# Warmup Iteration  18: 2985743.831 ops/s
# Warmup Iteration  19: 2984397.518 ops/s
# Warmup Iteration  20: 2990495.928 ops/s
# Warmup Iteration  21: 2985827.240 ops/s
# Warmup Iteration  22: 2985115.438 ops/s
# Warmup Iteration  23: 2984834.955 ops/s
# Warmup Iteration  24: 2976932.853 ops/s
# Warmup Iteration  25: 2971853.791 ops/s
# Warmup Iteration  26: 2980559.918 ops/s
# Warmup Iteration  27: 2990130.185 ops/s
# Warmup Iteration  28: 2992714.340 ops/s
# Warmup Iteration  29: 2992190.382 ops/s
# Warmup Iteration  30: 2987443.402 ops/s
Iteration   1: 2983946.451 ops/s
Iteration   2: 2981438.123 ops/s
Iteration   3: 2991516.891 ops/s
Iteration   4: 2993613.863 ops/s
Iteration   5: 2986714.794 ops/s
Iteration   6: 2992671.075 ops/s
Iteration   7: 2990982.911 ops/s
Iteration   8: 2980228.266 ops/s
Iteration   9: 2995505.187 ops/s
Iteration  10: 2986066.691 ops/s
Iteration  11: 2993056.950 ops/s
Iteration  12: 2993346.000 ops/s
Iteration  13: 2986844.946 ops/s
Iteration  14: 2981894.752 ops/s
Iteration  15: 2983737.732 ops/s
Iteration  16: 2988152.864 ops/s
Iteration  17: 2980284.877 ops/s
Iteration  18: 2995391.627 ops/s
Iteration  19: 2991417.143 ops/s
Iteration  20: 2987109.754 ops/s
Iteration  21: 2989109.229 ops/s
Iteration  22: 2992757.015 ops/s
Iteration  23: 2986743.793 ops/s
Iteration  24: 2991845.067 ops/s
Iteration  25: 2989711.987 ops/s
Iteration  26: 2988641.063 ops/s
Iteration  27: 2996135.833 ops/s
Iteration  28: 2976360.905 ops/s
Iteration  29: 2977826.932 ops/s
Iteration  30: 2988208.604 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toReversed":
  2988042.044 ±(99.9%) 3601.090 ops/s [Average]
  (min, avg, max) = (2976360.905, 2988042.044, 2996135.833), stdev = 5389.943
  CI (99.9%): [2984440.954, 2991643.135] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_toReversed  thrpt   30  2988042.044 ± 3601.090  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4069069.267 ops/s
# Warmup Iteration   2: 7718048.092 ops/s
# Warmup Iteration   3: 8059178.065 ops/s
# Warmup Iteration   4: 8112822.590 ops/s
# Warmup Iteration   5: 6827895.938 ops/s
# Warmup Iteration   6: 8139579.094 ops/s
# Warmup Iteration   7: 8114983.671 ops/s
# Warmup Iteration   8: 8125679.050 ops/s
# Warmup Iteration   9: 8122770.609 ops/s
# Warmup Iteration  10: 8105824.004 ops/s
# Warmup Iteration  11: 8118789.959 ops/s
# Warmup Iteration  12: 8087870.474 ops/s
# Warmup Iteration  13: 8117653.863 ops/s
# Warmup Iteration  14: 8109021.883 ops/s
# Warmup Iteration  15: 8129276.656 ops/s
# Warmup Iteration  16: 8130932.304 ops/s
# Warmup Iteration  17: 8117170.531 ops/s
# Warmup Iteration  18: 8117811.140 ops/s
# Warmup Iteration  19: 8064901.844 ops/s
# Warmup Iteration  20: 8075413.184 ops/s
# Warmup Iteration  21: 8115548.083 ops/s
# Warmup Iteration  22: 8106757.395 ops/s
# Warmup Iteration  23: 8099432.829 ops/s
# Warmup Iteration  24: 8123084.583 ops/s
# Warmup Iteration  25: 8099818.253 ops/s
# Warmup Iteration  26: 8121493.081 ops/s
# Warmup Iteration  27: 8116593.597 ops/s
# Warmup Iteration  28: 8124300.921 ops/s
# Warmup Iteration  29: 8103098.347 ops/s
# Warmup Iteration  30: 8076649.434 ops/s
Iteration   1: 8111895.113 ops/s
Iteration   2: 8120164.914 ops/s
Iteration   3: 8005408.494 ops/s
Iteration   4: 8104200.786 ops/s
Iteration   5: 8087973.298 ops/s
Iteration   6: 8091333.262 ops/s
Iteration   7: 8140767.023 ops/s
Iteration   8: 8118926.184 ops/s
Iteration   9: 8101796.177 ops/s
Iteration  10: 8139343.675 ops/s
Iteration  11: 8123213.530 ops/s
Iteration  12: 8124311.605 ops/s
Iteration  13: 8134454.659 ops/s
Iteration  14: 8122769.494 ops/s
Iteration  15: 8090998.576 ops/s
Iteration  16: 8120301.868 ops/s
Iteration  17: 8105408.667 ops/s
Iteration  18: 8072867.952 ops/s
Iteration  19: 8116913.980 ops/s
Iteration  20: 8075223.981 ops/s
Iteration  21: 8141172.241 ops/s
Iteration  22: 8094331.434 ops/s
Iteration  23: 8117708.449 ops/s
Iteration  24: 8101446.196 ops/s
Iteration  25: 8129814.284 ops/s
Iteration  26: 8106899.612 ops/s
Iteration  27: 8056439.251 ops/s
Iteration  28: 8063673.280 ops/s
Iteration  29: 8077049.394 ops/s
Iteration  30: 8140429.817 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedList":
  8104574.573 ±(99.9%) 20015.924 ops/s [Average]
  (min, avg, max) = (8005408.494, 8104574.573, 8141172.241), stdev = 29958.895
  CI (99.9%): [8084558.649, 8124590.497] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedList  thrpt   30  8104574.573 ± 20015.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2294163.682 ops/s
# Warmup Iteration   2: 2388163.612 ops/s
# Warmup Iteration   3: 3037872.177 ops/s
# Warmup Iteration   4: 3183400.680 ops/s
# Warmup Iteration   5: 3177806.903 ops/s
# Warmup Iteration   6: 3025764.771 ops/s
# Warmup Iteration   7: 3080711.439 ops/s
# Warmup Iteration   8: 3180030.883 ops/s
# Warmup Iteration   9: 3172947.516 ops/s
# Warmup Iteration  10: 3164679.250 ops/s
# Warmup Iteration  11: 3178404.993 ops/s
# Warmup Iteration  12: 2634465.015 ops/s
# Warmup Iteration  13: 3178287.084 ops/s
# Warmup Iteration  14: 3178800.011 ops/s
# Warmup Iteration  15: 3172597.928 ops/s
# Warmup Iteration  16: 3168193.967 ops/s
# Warmup Iteration  17: 3178356.630 ops/s
# Warmup Iteration  18: 3173319.389 ops/s
# Warmup Iteration  19: 3170627.299 ops/s
# Warmup Iteration  20: 3162908.630 ops/s
# Warmup Iteration  21: 3184652.006 ops/s
# Warmup Iteration  22: 3176594.514 ops/s
# Warmup Iteration  23: 3179459.242 ops/s
# Warmup Iteration  24: 3179329.570 ops/s
# Warmup Iteration  25: 3184965.488 ops/s
# Warmup Iteration  26: 3181909.103 ops/s
# Warmup Iteration  27: 3182931.646 ops/s
# Warmup Iteration  28: 3181874.642 ops/s
# Warmup Iteration  29: 3169865.241 ops/s
# Warmup Iteration  30: 3175057.481 ops/s
Iteration   1: 3175442.605 ops/s
Iteration   2: 3186180.438 ops/s
Iteration   3: 3178103.287 ops/s
Iteration   4: 3178567.864 ops/s
Iteration   5: 3183805.605 ops/s
Iteration   6: 3168006.699 ops/s
Iteration   7: 3182633.524 ops/s
Iteration   8: 3172803.487 ops/s
Iteration   9: 3181443.259 ops/s
Iteration  10: 3180787.835 ops/s
Iteration  11: 3184147.066 ops/s
Iteration  12: 3179006.310 ops/s
Iteration  13: 3185186.699 ops/s
Iteration  14: 3173917.547 ops/s
Iteration  15: 3182796.688 ops/s
Iteration  16: 3179050.398 ops/s
Iteration  17: 3165344.582 ops/s
Iteration  18: 3170845.760 ops/s
Iteration  19: 3150627.819 ops/s
Iteration  20: 3157075.139 ops/s
Iteration  21: 3145341.901 ops/s
Iteration  22: 3160798.738 ops/s
Iteration  23: 3160165.601 ops/s
Iteration  24: 3170093.416 ops/s
Iteration  25: 3149381.312 ops/s
Iteration  26: 3181826.821 ops/s
Iteration  27: 3179177.087 ops/s
Iteration  28: 3177542.272 ops/s
Iteration  29: 3169529.016 ops/s
Iteration  30: 3180653.839 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedListBy":
  3173009.421 ±(99.9%) 7561.916 ops/s [Average]
  (min, avg, max) = (3145341.901, 3173009.421, 3186180.438), stdev = 11318.321
  CI (99.9%): [3165447.504, 3180571.337] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  3173009.421 ± 7561.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2640213.343 ops/s
# Warmup Iteration   2: 6044945.186 ops/s
# Warmup Iteration   3: 5146920.563 ops/s
# Warmup Iteration   4: 5984095.354 ops/s
# Warmup Iteration   5: 6056518.240 ops/s
# Warmup Iteration   6: 6047628.750 ops/s
# Warmup Iteration   7: 6063500.476 ops/s
# Warmup Iteration   8: 6052126.664 ops/s
# Warmup Iteration   9: 6054878.302 ops/s
# Warmup Iteration  10: 6063622.408 ops/s
# Warmup Iteration  11: 6059355.280 ops/s
# Warmup Iteration  12: 6049425.250 ops/s
# Warmup Iteration  13: 6051791.902 ops/s
# Warmup Iteration  14: 6045104.751 ops/s
# Warmup Iteration  15: 6067731.127 ops/s
# Warmup Iteration  16: 6048832.790 ops/s
# Warmup Iteration  17: 6033811.617 ops/s
# Warmup Iteration  18: 6042419.961 ops/s
# Warmup Iteration  19: 6066101.233 ops/s
# Warmup Iteration  20: 6051723.200 ops/s
# Warmup Iteration  21: 6052125.880 ops/s
# Warmup Iteration  22: 6054660.860 ops/s
# Warmup Iteration  23: 6050158.378 ops/s
# Warmup Iteration  24: 6059953.490 ops/s
# Warmup Iteration  25: 6046258.849 ops/s
# Warmup Iteration  26: 6042521.467 ops/s
# Warmup Iteration  27: 6058271.295 ops/s
# Warmup Iteration  28: 6043588.270 ops/s
# Warmup Iteration  29: 6041930.035 ops/s
# Warmup Iteration  30: 6003452.446 ops/s
Iteration   1: 6044558.163 ops/s
Iteration   2: 6065102.255 ops/s
Iteration   3: 6045369.539 ops/s
Iteration   4: 6044758.080 ops/s
Iteration   5: 6031838.124 ops/s
Iteration   6: 6037158.345 ops/s
Iteration   7: 6057525.347 ops/s
Iteration   8: 6064034.382 ops/s
Iteration   9: 6024914.844 ops/s
Iteration  10: 6069881.581 ops/s
Iteration  11: 6060574.366 ops/s
Iteration  12: 6074962.904 ops/s
Iteration  13: 6055422.009 ops/s
Iteration  14: 6030082.736 ops/s
Iteration  15: 6033309.463 ops/s
Iteration  16: 6001299.831 ops/s
Iteration  17: 6056609.277 ops/s
Iteration  18: 5957342.304 ops/s
Iteration  19: 6021313.490 ops/s
Iteration  20: 6064361.515 ops/s
Iteration  21: 6061909.929 ops/s
Iteration  22: 6047218.237 ops/s
Iteration  23: 6051504.784 ops/s
Iteration  24: 6039341.451 ops/s
Iteration  25: 6065850.113 ops/s
Iteration  26: 6061632.192 ops/s
Iteration  27: 6034508.323 ops/s
Iteration  28: 6035490.787 ops/s
Iteration  29: 6062444.176 ops/s
Iteration  30: 6055861.793 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedSet":
  6045206.011 ±(99.9%) 15767.247 ops/s [Average]
  (min, avg, max) = (5957342.304, 6045206.011, 6074962.904), stdev = 23599.675
  CI (99.9%): [6029438.764, 6060973.258] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedSet  thrpt   30  6045206.011 ± 15767.247  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 768640.814 ops/s
# Warmup Iteration   2: 1618315.674 ops/s
# Warmup Iteration   3: 1687377.762 ops/s
# Warmup Iteration   4: 1697861.706 ops/s
# Warmup Iteration   5: 1413342.632 ops/s
# Warmup Iteration   6: 1687513.483 ops/s
# Warmup Iteration   7: 1694745.127 ops/s
# Warmup Iteration   8: 1699632.066 ops/s
# Warmup Iteration   9: 1699428.630 ops/s
# Warmup Iteration  10: 1697911.725 ops/s
# Warmup Iteration  11: 1700778.896 ops/s
# Warmup Iteration  12: 1699536.474 ops/s
# Warmup Iteration  13: 1701915.662 ops/s
# Warmup Iteration  14: 1700330.828 ops/s
# Warmup Iteration  15: 1700228.481 ops/s
# Warmup Iteration  16: 1702172.400 ops/s
# Warmup Iteration  17: 1689788.497 ops/s
# Warmup Iteration  18: 1688568.666 ops/s
# Warmup Iteration  19: 1693589.006 ops/s
# Warmup Iteration  20: 1695688.169 ops/s
# Warmup Iteration  21: 1694275.271 ops/s
# Warmup Iteration  22: 1698284.811 ops/s
# Warmup Iteration  23: 1689794.624 ops/s
# Warmup Iteration  24: 1694732.410 ops/s
# Warmup Iteration  25: 1693909.188 ops/s
# Warmup Iteration  26: 1694371.466 ops/s
# Warmup Iteration  27: 1691310.885 ops/s
# Warmup Iteration  28: 1694301.463 ops/s
# Warmup Iteration  29: 1693935.918 ops/s
# Warmup Iteration  30: 1688096.006 ops/s
Iteration   1: 1687505.378 ops/s
Iteration   2: 1697849.228 ops/s
Iteration   3: 1689211.581 ops/s
Iteration   4: 1684542.515 ops/s
Iteration   5: 1692337.632 ops/s
Iteration   6: 1695136.110 ops/s
Iteration   7: 1688945.887 ops/s
Iteration   8: 1694704.213 ops/s
Iteration   9: 1697092.172 ops/s
Iteration  10: 1696088.694 ops/s
Iteration  11: 1693638.565 ops/s
Iteration  12: 1689343.141 ops/s
Iteration  13: 1698774.960 ops/s
Iteration  14: 1690852.978 ops/s
Iteration  15: 1687243.446 ops/s
Iteration  16: 1693814.935 ops/s
Iteration  17: 1692205.936 ops/s
Iteration  18: 1695807.252 ops/s
Iteration  19: 1694084.788 ops/s
Iteration  20: 1700605.963 ops/s
Iteration  21: 1696071.765 ops/s
Iteration  22: 1694379.663 ops/s
Iteration  23: 1694659.596 ops/s
Iteration  24: 1699667.481 ops/s
Iteration  25: 1692238.602 ops/s
Iteration  26: 1693296.805 ops/s
Iteration  27: 1692376.576 ops/s
Iteration  28: 1699599.653 ops/s
Iteration  29: 1695051.794 ops/s
Iteration  30: 1690710.279 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedSetBy":
  1693594.586 ±(99.9%) 2618.055 ops/s [Average]
  (min, avg, max) = (1684542.515, 1693594.586, 1700605.963), stdev = 3918.581
  CI (99.9%): [1690976.532, 1696212.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1693594.586 ± 2618.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1571649.250 ops/s
# Warmup Iteration   2: 3993050.526 ops/s
# Warmup Iteration   3: 4067215.394 ops/s
# Warmup Iteration   4: 3389107.953 ops/s
# Warmup Iteration   5: 4075912.331 ops/s
# Warmup Iteration   6: 4079316.593 ops/s
# Warmup Iteration   7: 4080076.666 ops/s
# Warmup Iteration   8: 4072758.500 ops/s
# Warmup Iteration   9: 4076625.205 ops/s
# Warmup Iteration  10: 4076645.274 ops/s
# Warmup Iteration  11: 4050640.410 ops/s
# Warmup Iteration  12: 4059601.145 ops/s
# Warmup Iteration  13: 4069140.764 ops/s
# Warmup Iteration  14: 4074787.417 ops/s
# Warmup Iteration  15: 4060830.114 ops/s
# Warmup Iteration  16: 4071477.941 ops/s
# Warmup Iteration  17: 4066458.916 ops/s
# Warmup Iteration  18: 4067721.538 ops/s
# Warmup Iteration  19: 4065300.722 ops/s
# Warmup Iteration  20: 4066377.580 ops/s
# Warmup Iteration  21: 4068712.539 ops/s
# Warmup Iteration  22: 4012326.941 ops/s
# Warmup Iteration  23: 4059612.600 ops/s
# Warmup Iteration  24: 4064578.812 ops/s
# Warmup Iteration  25: 4045589.148 ops/s
# Warmup Iteration  26: 4064797.010 ops/s
# Warmup Iteration  27: 4073085.875 ops/s
# Warmup Iteration  28: 4075338.224 ops/s
# Warmup Iteration  29: 4070648.258 ops/s
# Warmup Iteration  30: 4069287.638 ops/s
Iteration   1: 4069285.543 ops/s
Iteration   2: 4077121.617 ops/s
Iteration   3: 4077507.495 ops/s
Iteration   4: 4058251.883 ops/s
Iteration   5: 4070507.926 ops/s
Iteration   6: 4075282.626 ops/s
Iteration   7: 4069957.837 ops/s
Iteration   8: 4060296.074 ops/s
Iteration   9: 4056528.998 ops/s
Iteration  10: 4048748.170 ops/s
Iteration  11: 4073059.210 ops/s
Iteration  12: 4073189.094 ops/s
Iteration  13: 4077225.209 ops/s
Iteration  14: 4076080.769 ops/s
Iteration  15: 4064254.520 ops/s
Iteration  16: 4077038.904 ops/s
Iteration  17: 4083002.796 ops/s
Iteration  18: 4076863.982 ops/s
Iteration  19: 4075633.106 ops/s
Iteration  20: 4078447.433 ops/s
Iteration  21: 4074891.865 ops/s
Iteration  22: 4078574.928 ops/s
Iteration  23: 4074232.423 ops/s
Iteration  24: 4054107.598 ops/s
Iteration  25: 4066592.336 ops/s
Iteration  26: 4061035.515 ops/s
Iteration  27: 4071715.522 ops/s
Iteration  28: 4053941.766 ops/s
Iteration  29: 4035440.241 ops/s
Iteration  30: 4013809.795 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedSetWithComparator":
  4066754.173 ±(99.9%) 9822.327 ops/s [Average]
  (min, avg, max) = (4013809.795, 4066754.173, 4083002.796), stdev = 14701.597
  CI (99.9%): [4056931.846, 4076576.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  4066754.173 ± 9822.327  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3380417.553 ops/s
# Warmup Iteration   2: 8504995.644 ops/s
# Warmup Iteration   3: 8645662.497 ops/s
# Warmup Iteration   4: 7146221.459 ops/s
# Warmup Iteration   5: 8655200.402 ops/s
# Warmup Iteration   6: 8640340.066 ops/s
# Warmup Iteration   7: 8595827.181 ops/s
# Warmup Iteration   8: 8639583.499 ops/s
# Warmup Iteration   9: 8647855.806 ops/s
# Warmup Iteration  10: 8633922.154 ops/s
# Warmup Iteration  11: 8617455.028 ops/s
# Warmup Iteration  12: 8642301.395 ops/s
# Warmup Iteration  13: 8657291.218 ops/s
# Warmup Iteration  14: 8626388.590 ops/s
# Warmup Iteration  15: 8630778.711 ops/s
# Warmup Iteration  16: 8656126.155 ops/s
# Warmup Iteration  17: 8632372.198 ops/s
# Warmup Iteration  18: 7882373.858 ops/s
# Warmup Iteration  19: 8628829.862 ops/s
# Warmup Iteration  20: 8626723.882 ops/s
# Warmup Iteration  21: 8666435.467 ops/s
# Warmup Iteration  22: 8655651.741 ops/s
# Warmup Iteration  23: 8640617.614 ops/s
# Warmup Iteration  24: 8663872.242 ops/s
# Warmup Iteration  25: 8637991.425 ops/s
# Warmup Iteration  26: 8659699.574 ops/s
# Warmup Iteration  27: 8666138.372 ops/s
# Warmup Iteration  28: 8643299.563 ops/s
# Warmup Iteration  29: 8651538.775 ops/s
# Warmup Iteration  30: 8638429.968 ops/s
Iteration   1: 8610010.933 ops/s
Iteration   2: 8645402.222 ops/s
Iteration   3: 8624106.046 ops/s
Iteration   4: 8636552.004 ops/s
Iteration   5: 8573793.792 ops/s
Iteration   6: 8653177.194 ops/s
Iteration   7: 8621116.947 ops/s
Iteration   8: 8603612.973 ops/s
Iteration   9: 8621777.902 ops/s
Iteration  10: 8642800.143 ops/s
Iteration  11: 8631048.616 ops/s
Iteration  12: 8650196.550 ops/s
Iteration  13: 8659395.328 ops/s
Iteration  14: 8698163.005 ops/s
Iteration  15: 8664346.936 ops/s
Iteration  16: 8665774.698 ops/s
Iteration  17: 8653252.958 ops/s
Iteration  18: 8656976.387 ops/s
Iteration  19: 8642052.733 ops/s
Iteration  20: 8648035.443 ops/s
Iteration  21: 8638095.889 ops/s
Iteration  22: 8649503.405 ops/s
Iteration  23: 8660704.508 ops/s
Iteration  24: 8663245.554 ops/s
Iteration  25: 8665449.863 ops/s
Iteration  26: 8642067.616 ops/s
Iteration  27: 8665041.762 ops/s
Iteration  28: 8673076.449 ops/s
Iteration  29: 8679484.203 ops/s
Iteration  30: 8641101.374 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_toStack":
  8645978.781 ±(99.9%) 16378.177 ops/s [Average]
  (min, avg, max) = (8573793.792, 8645978.781, 8698163.005), stdev = 24514.085
  CI (99.9%): [8629600.605, 8662356.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_toStack  thrpt   30  8645978.781 ± 16378.177  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 355405.850 ops/s
# Warmup Iteration   2: 662142.024 ops/s
# Warmup Iteration   3: 809231.062 ops/s
# Warmup Iteration   4: 806035.010 ops/s
# Warmup Iteration   5: 813364.274 ops/s
# Warmup Iteration   6: 810442.330 ops/s
# Warmup Iteration   7: 673000.477 ops/s
# Warmup Iteration   8: 808951.075 ops/s
# Warmup Iteration   9: 809719.246 ops/s
# Warmup Iteration  10: 812206.569 ops/s
# Warmup Iteration  11: 813419.500 ops/s
# Warmup Iteration  12: 813491.071 ops/s
# Warmup Iteration  13: 813853.801 ops/s
# Warmup Iteration  14: 812884.604 ops/s
# Warmup Iteration  15: 812257.857 ops/s
# Warmup Iteration  16: 814183.226 ops/s
# Warmup Iteration  17: 815438.148 ops/s
# Warmup Iteration  18: 812165.083 ops/s
# Warmup Iteration  19: 814042.417 ops/s
# Warmup Iteration  20: 811857.782 ops/s
# Warmup Iteration  21: 812229.262 ops/s
# Warmup Iteration  22: 811307.047 ops/s
# Warmup Iteration  23: 814107.766 ops/s
# Warmup Iteration  24: 812496.860 ops/s
# Warmup Iteration  25: 811980.540 ops/s
# Warmup Iteration  26: 811558.878 ops/s
# Warmup Iteration  27: 811954.671 ops/s
# Warmup Iteration  28: 814193.272 ops/s
# Warmup Iteration  29: 812600.540 ops/s
# Warmup Iteration  30: 813701.493 ops/s
Iteration   1: 811519.931 ops/s
Iteration   2: 812709.945 ops/s
Iteration   3: 815147.044 ops/s
Iteration   4: 810569.572 ops/s
Iteration   5: 813937.206 ops/s
Iteration   6: 813427.730 ops/s
Iteration   7: 810307.668 ops/s
Iteration   8: 811157.555 ops/s
Iteration   9: 812909.310 ops/s
Iteration  10: 810528.388 ops/s
Iteration  11: 814026.523 ops/s
Iteration  12: 809747.433 ops/s
Iteration  13: 810948.556 ops/s
Iteration  14: 813918.931 ops/s
Iteration  15: 812579.204 ops/s
Iteration  16: 814656.446 ops/s
Iteration  17: 811913.991 ops/s
Iteration  18: 809572.298 ops/s
Iteration  19: 812152.236 ops/s
Iteration  20: 814741.608 ops/s
Iteration  21: 814174.756 ops/s
Iteration  22: 814705.430 ops/s
Iteration  23: 813819.389 ops/s
Iteration  24: 815243.376 ops/s
Iteration  25: 812553.151 ops/s
Iteration  26: 813691.588 ops/s
Iteration  27: 810664.294 ops/s
Iteration  28: 812445.880 ops/s
Iteration  29: 811707.657 ops/s
Iteration  30: 815823.599 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_zip":
  812710.023 ±(99.9%) 1179.952 ops/s [Average]
  (min, avg, max) = (809572.298, 812710.023, 815823.599), stdev = 1766.096
  CI (99.9%): [811530.071, 813889.975] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_zip  thrpt   30  812710.023 ± 1179.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 980019.312 ops/s
# Warmup Iteration   2: 1828288.088 ops/s
# Warmup Iteration   3: 1939637.707 ops/s
# Warmup Iteration   4: 1955607.873 ops/s
# Warmup Iteration   5: 1628761.433 ops/s
# Warmup Iteration   6: 1956647.423 ops/s
# Warmup Iteration   7: 1958714.866 ops/s
# Warmup Iteration   8: 1953451.771 ops/s
# Warmup Iteration   9: 1952381.460 ops/s
# Warmup Iteration  10: 1954064.216 ops/s
# Warmup Iteration  11: 1952638.065 ops/s
# Warmup Iteration  12: 1950224.166 ops/s
# Warmup Iteration  13: 1951702.838 ops/s
# Warmup Iteration  14: 1948494.236 ops/s
# Warmup Iteration  15: 1952540.009 ops/s
# Warmup Iteration  16: 1956880.562 ops/s
# Warmup Iteration  17: 1955483.948 ops/s
# Warmup Iteration  18: 1950648.346 ops/s
# Warmup Iteration  19: 1952702.471 ops/s
# Warmup Iteration  20: 1950189.504 ops/s
# Warmup Iteration  21: 1950888.275 ops/s
# Warmup Iteration  22: 1956540.186 ops/s
# Warmup Iteration  23: 1956587.583 ops/s
# Warmup Iteration  24: 1956868.841 ops/s
# Warmup Iteration  25: 1951500.516 ops/s
# Warmup Iteration  26: 1955383.665 ops/s
# Warmup Iteration  27: 1949350.830 ops/s
# Warmup Iteration  28: 1933938.726 ops/s
# Warmup Iteration  29: 1951471.535 ops/s
# Warmup Iteration  30: 1954003.303 ops/s
Iteration   1: 1956764.407 ops/s
Iteration   2: 1955850.643 ops/s
Iteration   3: 1958853.904 ops/s
Iteration   4: 1957773.601 ops/s
Iteration   5: 1955525.732 ops/s
Iteration   6: 1956928.877 ops/s
Iteration   7: 1949679.162 ops/s
Iteration   8: 1953742.341 ops/s
Iteration   9: 1956653.036 ops/s
Iteration  10: 1950188.146 ops/s
Iteration  11: 1954054.709 ops/s
Iteration  12: 1955521.151 ops/s
Iteration  13: 1950027.366 ops/s
Iteration  14: 1955690.154 ops/s
Iteration  15: 1956737.102 ops/s
Iteration  16: 1946083.998 ops/s
Iteration  17: 1954872.492 ops/s
Iteration  18: 1950757.619 ops/s
Iteration  19: 1952019.926 ops/s
Iteration  20: 1950471.365 ops/s
Iteration  21: 1949060.011 ops/s
Iteration  22: 1955669.692 ops/s
Iteration  23: 1959657.083 ops/s
Iteration  24: 1954389.020 ops/s
Iteration  25: 1957452.051 ops/s
Iteration  26: 1955118.067 ops/s
Iteration  27: 1954280.041 ops/s
Iteration  28: 1952006.090 ops/s
Iteration  29: 1955713.364 ops/s
Iteration  30: 1952139.999 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuadrupletonListTest._Benchmark.benchmark_zipWithIndex":
  1954122.705 ±(99.9%) 2153.686 ops/s [Average]
  (min, avg, max) = (1946083.998, 1954122.705, 1959657.083), stdev = 3223.536
  CI (99.9%): [1951969.019, 1956276.391] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableQuadrupletonListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  1954122.705 ± 2153.686  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 757683.769 ops/s
# Warmup Iteration   2: 790479.348 ops/s
# Warmup Iteration   3: 979836.167 ops/s
# Warmup Iteration   4: 975425.884 ops/s
# Warmup Iteration   5: 957907.151 ops/s
# Warmup Iteration   6: 976425.097 ops/s
# Warmup Iteration   7: 974016.257 ops/s
# Warmup Iteration   8: 975764.208 ops/s
# Warmup Iteration   9: 969645.716 ops/s
# Warmup Iteration  10: 963726.469 ops/s
# Warmup Iteration  11: 978063.248 ops/s
# Warmup Iteration  12: 835231.468 ops/s
# Warmup Iteration  13: 971845.043 ops/s
# Warmup Iteration  14: 971185.286 ops/s
# Warmup Iteration  15: 976072.148 ops/s
# Warmup Iteration  16: 976254.033 ops/s
# Warmup Iteration  17: 1021605.962 ops/s
# Warmup Iteration  18: 1025929.242 ops/s
# Warmup Iteration  19: 1035515.153 ops/s
# Warmup Iteration  20: 1028701.913 ops/s
# Warmup Iteration  21: 1023168.809 ops/s
# Warmup Iteration  22: 1021139.419 ops/s
# Warmup Iteration  23: 1028504.307 ops/s
# Warmup Iteration  24: 1026244.181 ops/s
# Warmup Iteration  25: 1029799.932 ops/s
# Warmup Iteration  26: 1025984.250 ops/s
# Warmup Iteration  27: 1030189.165 ops/s
# Warmup Iteration  28: 1020021.907 ops/s
# Warmup Iteration  29: 1030914.512 ops/s
# Warmup Iteration  30: 1005662.804 ops/s
Iteration   1: 1030172.131 ops/s
Iteration   2: 1013916.682 ops/s
Iteration   3: 1027452.145 ops/s
Iteration   4: 1017632.320 ops/s
Iteration   5: 1028515.337 ops/s
Iteration   6: 1031915.598 ops/s
Iteration   7: 1029534.637 ops/s
Iteration   8: 1024791.620 ops/s
Iteration   9: 1024890.958 ops/s
Iteration  10: 1022489.484 ops/s
Iteration  11: 1024873.474 ops/s
Iteration  12: 1025977.673 ops/s
Iteration  13: 1031997.912 ops/s
Iteration  14: 1021991.899 ops/s
Iteration  15: 1032953.943 ops/s
Iteration  16: 1037243.197 ops/s
Iteration  17: 1031155.403 ops/s
Iteration  18: 1031222.412 ops/s
Iteration  19: 1030264.413 ops/s
Iteration  20: 1009043.352 ops/s
Iteration  21: 1025743.671 ops/s
Iteration  22: 1018853.900 ops/s
Iteration  23: 1024518.079 ops/s
Iteration  24: 1020913.547 ops/s
Iteration  25: 1014760.986 ops/s
Iteration  26: 1034615.433 ops/s
Iteration  27: 1033634.732 ops/s
Iteration  28: 1028828.971 ops/s
Iteration  29: 1023831.629 ops/s
Iteration  30: 1025974.360 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_add":
  1025990.330 ±(99.9%) 4373.625 ops/s [Average]
  (min, avg, max) = (1009043.352, 1025990.330, 1037243.197), stdev = 6546.237
  CI (99.9%): [1021616.705, 1030363.956] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_add  thrpt   30  1025990.330 ± 4373.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 740583.156 ops/s
# Warmup Iteration   2: 788439.062 ops/s
# Warmup Iteration   3: 999825.157 ops/s
# Warmup Iteration   4: 981106.583 ops/s
# Warmup Iteration   5: 977059.558 ops/s
# Warmup Iteration   6: 984990.060 ops/s
# Warmup Iteration   7: 988532.814 ops/s
# Warmup Iteration   8: 990162.391 ops/s
# Warmup Iteration   9: 988369.188 ops/s
# Warmup Iteration  10: 989172.820 ops/s
# Warmup Iteration  11: 987917.749 ops/s
# Warmup Iteration  12: 843958.679 ops/s
# Warmup Iteration  13: 985985.053 ops/s
# Warmup Iteration  14: 990351.714 ops/s
# Warmup Iteration  15: 987526.918 ops/s
# Warmup Iteration  16: 987174.889 ops/s
# Warmup Iteration  17: 1048738.001 ops/s
# Warmup Iteration  18: 1041622.156 ops/s
# Warmup Iteration  19: 1052105.573 ops/s
# Warmup Iteration  20: 1049982.193 ops/s
# Warmup Iteration  21: 1047045.723 ops/s
# Warmup Iteration  22: 1048235.770 ops/s
# Warmup Iteration  23: 1050109.427 ops/s
# Warmup Iteration  24: 1043152.534 ops/s
# Warmup Iteration  25: 1048629.067 ops/s
# Warmup Iteration  26: 1049420.374 ops/s
# Warmup Iteration  27: 1041987.249 ops/s
# Warmup Iteration  28: 1046099.962 ops/s
# Warmup Iteration  29: 1048913.912 ops/s
# Warmup Iteration  30: 1049792.247 ops/s
Iteration   1: 1052601.040 ops/s
Iteration   2: 1046797.815 ops/s
Iteration   3: 1046457.331 ops/s
Iteration   4: 1044200.433 ops/s
Iteration   5: 1052438.661 ops/s
Iteration   6: 1051304.413 ops/s
Iteration   7: 1054608.497 ops/s
Iteration   8: 1041821.559 ops/s
Iteration   9: 1042634.220 ops/s
Iteration  10: 1040011.574 ops/s
Iteration  11: 1051031.475 ops/s
Iteration  12: 1049367.906 ops/s
Iteration  13: 1047055.098 ops/s
Iteration  14: 1043185.715 ops/s
Iteration  15: 1037497.443 ops/s
Iteration  16: 1043139.742 ops/s
Iteration  17: 1043815.330 ops/s
Iteration  18: 1045929.957 ops/s
Iteration  19: 1044146.769 ops/s
Iteration  20: 1047737.301 ops/s
Iteration  21: 1047549.076 ops/s
Iteration  22: 1046584.483 ops/s
Iteration  23: 1048956.624 ops/s
Iteration  24: 1045054.602 ops/s
Iteration  25: 1046863.243 ops/s
Iteration  26: 1049795.922 ops/s
Iteration  27: 1048756.123 ops/s
Iteration  28: 1048352.989 ops/s
Iteration  29: 1044957.274 ops/s
Iteration  30: 1043926.981 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_addAll":
  1046552.653 ±(99.9%) 2573.539 ops/s [Average]
  (min, avg, max) = (1037497.443, 1046552.653, 1054608.497), stdev = 3851.953
  CI (99.9%): [1043979.114, 1049126.193] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_addAll  thrpt   30  1046552.653 ± 2573.539  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 745467.037 ops/s
# Warmup Iteration   2: 792900.768 ops/s
# Warmup Iteration   3: 1004301.737 ops/s
# Warmup Iteration   4: 999775.782 ops/s
# Warmup Iteration   5: 1002355.246 ops/s
# Warmup Iteration   6: 1002657.975 ops/s
# Warmup Iteration   7: 999091.481 ops/s
# Warmup Iteration   8: 1000001.540 ops/s
# Warmup Iteration   9: 1000490.068 ops/s
# Warmup Iteration  10: 1003672.368 ops/s
# Warmup Iteration  11: 975121.437 ops/s
# Warmup Iteration  12: 880430.309 ops/s
# Warmup Iteration  13: 995249.219 ops/s
# Warmup Iteration  14: 995567.123 ops/s
# Warmup Iteration  15: 1001667.182 ops/s
# Warmup Iteration  16: 998967.821 ops/s
# Warmup Iteration  17: 1056290.176 ops/s
# Warmup Iteration  18: 1059144.039 ops/s
# Warmup Iteration  19: 1057468.601 ops/s
# Warmup Iteration  20: 1058948.464 ops/s
# Warmup Iteration  21: 1058385.251 ops/s
# Warmup Iteration  22: 1056383.995 ops/s
# Warmup Iteration  23: 1059049.371 ops/s
# Warmup Iteration  24: 1057186.586 ops/s
# Warmup Iteration  25: 1057123.255 ops/s
# Warmup Iteration  26: 1055917.251 ops/s
# Warmup Iteration  27: 1055016.856 ops/s
# Warmup Iteration  28: 1059956.269 ops/s
# Warmup Iteration  29: 1057989.714 ops/s
# Warmup Iteration  30: 1057182.239 ops/s
Iteration   1: 1056361.784 ops/s
Iteration   2: 1056847.733 ops/s
Iteration   3: 1058555.534 ops/s
Iteration   4: 1059779.612 ops/s
Iteration   5: 1054779.149 ops/s
Iteration   6: 1047773.617 ops/s
Iteration   7: 1060337.037 ops/s
Iteration   8: 1053288.453 ops/s
Iteration   9: 1060884.677 ops/s
Iteration  10: 1059837.314 ops/s
Iteration  11: 1061019.458 ops/s
Iteration  12: 1058130.906 ops/s
Iteration  13: 1046069.280 ops/s
Iteration  14: 1059271.500 ops/s
Iteration  15: 1061910.568 ops/s
Iteration  16: 1056458.947 ops/s
Iteration  17: 1058085.122 ops/s
Iteration  18: 1059526.432 ops/s
Iteration  19: 1058356.469 ops/s
Iteration  20: 1058953.962 ops/s
Iteration  21: 1055388.842 ops/s
Iteration  22: 1055474.723 ops/s
Iteration  23: 1058731.673 ops/s
Iteration  24: 1056567.279 ops/s
Iteration  25: 1053461.658 ops/s
Iteration  26: 1057170.810 ops/s
Iteration  27: 1056905.118 ops/s
Iteration  28: 1056328.716 ops/s
Iteration  29: 1056668.158 ops/s
Iteration  30: 1055678.245 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_addAllAtIndex":
  1056953.426 ±(99.9%) 2325.346 ops/s [Average]
  (min, avg, max) = (1046069.280, 1056953.426, 1061910.568), stdev = 3480.469
  CI (99.9%): [1054628.079, 1059278.772] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1056953.426 ± 2325.346  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750524.153 ops/s
# Warmup Iteration   2: 794367.675 ops/s
# Warmup Iteration   3: 999071.105 ops/s
# Warmup Iteration   4: 996699.420 ops/s
# Warmup Iteration   5: 995211.095 ops/s
# Warmup Iteration   6: 995717.755 ops/s
# Warmup Iteration   7: 993669.729 ops/s
# Warmup Iteration   8: 995518.878 ops/s
# Warmup Iteration   9: 996807.867 ops/s
# Warmup Iteration  10: 995194.485 ops/s
# Warmup Iteration  11: 995334.279 ops/s
# Warmup Iteration  12: 852990.561 ops/s
# Warmup Iteration  13: 986252.131 ops/s
# Warmup Iteration  14: 984486.841 ops/s
# Warmup Iteration  15: 987583.770 ops/s
# Warmup Iteration  16: 989655.903 ops/s
# Warmup Iteration  17: 1055127.125 ops/s
# Warmup Iteration  18: 1054910.234 ops/s
# Warmup Iteration  19: 1053040.175 ops/s
# Warmup Iteration  20: 1051749.466 ops/s
# Warmup Iteration  21: 1059142.681 ops/s
# Warmup Iteration  22: 1060683.313 ops/s
# Warmup Iteration  23: 1061232.926 ops/s
# Warmup Iteration  24: 1061019.392 ops/s
# Warmup Iteration  25: 1061511.722 ops/s
# Warmup Iteration  26: 1058961.837 ops/s
# Warmup Iteration  27: 1050913.791 ops/s
# Warmup Iteration  28: 1058673.161 ops/s
# Warmup Iteration  29: 1056335.740 ops/s
# Warmup Iteration  30: 1058401.389 ops/s
Iteration   1: 1062139.146 ops/s
Iteration   2: 1059412.110 ops/s
Iteration   3: 1053206.981 ops/s
Iteration   4: 1060250.649 ops/s
Iteration   5: 1058732.054 ops/s
Iteration   6: 1057046.973 ops/s
Iteration   7: 1060837.800 ops/s
Iteration   8: 1065642.188 ops/s
Iteration   9: 1060246.776 ops/s
Iteration  10: 1062179.277 ops/s
Iteration  11: 1057245.480 ops/s
Iteration  12: 1063205.696 ops/s
Iteration  13: 1064928.571 ops/s
Iteration  14: 1057955.993 ops/s
Iteration  15: 1056689.425 ops/s
Iteration  16: 1061254.955 ops/s
Iteration  17: 1060154.037 ops/s
Iteration  18: 1047693.839 ops/s
Iteration  19: 1049302.869 ops/s
Iteration  20: 1051737.053 ops/s
Iteration  21: 1062314.101 ops/s
Iteration  22: 1054755.369 ops/s
Iteration  23: 1050989.424 ops/s
Iteration  24: 1055573.146 ops/s
Iteration  25: 1053231.453 ops/s
Iteration  26: 1059063.961 ops/s
Iteration  27: 1057110.762 ops/s
Iteration  28: 1058489.519 ops/s
Iteration  29: 1055324.330 ops/s
Iteration  30: 1055150.764 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_addAtIndex":
  1057728.823 ±(99.9%) 2970.943 ops/s [Average]
  (min, avg, max) = (1047693.839, 1057728.823, 1065642.188), stdev = 4446.768
  CI (99.9%): [1054757.880, 1060699.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_addAtIndex  thrpt   30  1057728.823 ± 2970.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 606276.763 ops/s
# Warmup Iteration   2: 1411056.401 ops/s
# Warmup Iteration   3: 1425844.262 ops/s
# Warmup Iteration   4: 1192457.766 ops/s
# Warmup Iteration   5: 1425146.971 ops/s
# Warmup Iteration   6: 1426034.158 ops/s
# Warmup Iteration   7: 1424615.865 ops/s
# Warmup Iteration   8: 1417246.057 ops/s
# Warmup Iteration   9: 1425564.317 ops/s
# Warmup Iteration  10: 1423922.244 ops/s
# Warmup Iteration  11: 1412615.976 ops/s
# Warmup Iteration  12: 1412227.681 ops/s
# Warmup Iteration  13: 1422278.966 ops/s
# Warmup Iteration  14: 1427014.062 ops/s
# Warmup Iteration  15: 1422651.763 ops/s
# Warmup Iteration  16: 1420432.138 ops/s
# Warmup Iteration  17: 1429022.972 ops/s
# Warmup Iteration  18: 1433668.466 ops/s
# Warmup Iteration  19: 1431157.523 ops/s
# Warmup Iteration  20: 1430631.228 ops/s
# Warmup Iteration  21: 1434816.967 ops/s
# Warmup Iteration  22: 1428820.232 ops/s
# Warmup Iteration  23: 1424749.966 ops/s
# Warmup Iteration  24: 1422291.302 ops/s
# Warmup Iteration  25: 1428082.000 ops/s
# Warmup Iteration  26: 1430065.928 ops/s
# Warmup Iteration  27: 1426812.264 ops/s
# Warmup Iteration  28: 1425927.150 ops/s
# Warmup Iteration  29: 1428138.004 ops/s
# Warmup Iteration  30: 1424509.678 ops/s
Iteration   1: 1424277.346 ops/s
Iteration   2: 1426011.326 ops/s
Iteration   3: 1422582.696 ops/s
Iteration   4: 1421211.907 ops/s
Iteration   5: 1435859.373 ops/s
Iteration   6: 1430517.650 ops/s
Iteration   7: 1426987.021 ops/s
Iteration   8: 1420271.984 ops/s
Iteration   9: 1417295.973 ops/s
Iteration  10: 1422757.446 ops/s
Iteration  11: 1431219.910 ops/s
Iteration  12: 1426295.901 ops/s
Iteration  13: 1419057.266 ops/s
Iteration  14: 1425872.816 ops/s
Iteration  15: 1429331.712 ops/s
Iteration  16: 1430785.640 ops/s
Iteration  17: 1428129.028 ops/s
Iteration  18: 1427570.382 ops/s
Iteration  19: 1432939.147 ops/s
Iteration  20: 1429508.232 ops/s
Iteration  21: 1428225.288 ops/s
Iteration  22: 1441668.043 ops/s
Iteration  23: 1440758.743 ops/s
Iteration  24: 1427324.268 ops/s
Iteration  25: 1428677.452 ops/s
Iteration  26: 1426540.523 ops/s
Iteration  27: 1423680.993 ops/s
Iteration  28: 1427714.992 ops/s
Iteration  29: 1435057.154 ops/s
Iteration  30: 1413678.070 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_aggregateByMutating":
  1427393.609 ±(99.9%) 4140.240 ops/s [Average]
  (min, avg, max) = (1413678.070, 1427393.609, 1441668.043), stdev = 6196.916
  CI (99.9%): [1423253.370, 1431533.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  1427393.609 ± 4140.240  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 622023.545 ops/s
# Warmup Iteration   2: 1410285.823 ops/s
# Warmup Iteration   3: 1451991.313 ops/s
# Warmup Iteration   4: 1359576.775 ops/s
# Warmup Iteration   5: 1302914.416 ops/s
# Warmup Iteration   6: 1451417.356 ops/s
# Warmup Iteration   7: 1450396.644 ops/s
# Warmup Iteration   8: 1452140.511 ops/s
# Warmup Iteration   9: 1455281.299 ops/s
# Warmup Iteration  10: 1454872.106 ops/s
# Warmup Iteration  11: 1451363.517 ops/s
# Warmup Iteration  12: 1449674.899 ops/s
# Warmup Iteration  13: 1451725.553 ops/s
# Warmup Iteration  14: 1452105.711 ops/s
# Warmup Iteration  15: 1453061.788 ops/s
# Warmup Iteration  16: 1455735.291 ops/s
# Warmup Iteration  17: 1452234.070 ops/s
# Warmup Iteration  18: 1452459.908 ops/s
# Warmup Iteration  19: 1452881.748 ops/s
# Warmup Iteration  20: 1453112.262 ops/s
# Warmup Iteration  21: 1457161.201 ops/s
# Warmup Iteration  22: 1454726.812 ops/s
# Warmup Iteration  23: 1453424.440 ops/s
# Warmup Iteration  24: 1451069.536 ops/s
# Warmup Iteration  25: 1455635.636 ops/s
# Warmup Iteration  26: 1447944.533 ops/s
# Warmup Iteration  27: 1453612.758 ops/s
# Warmup Iteration  28: 1454250.144 ops/s
# Warmup Iteration  29: 1450619.405 ops/s
# Warmup Iteration  30: 1455805.675 ops/s
Iteration   1: 1448519.111 ops/s
Iteration   2: 1452715.682 ops/s
Iteration   3: 1453810.081 ops/s
Iteration   4: 1454892.807 ops/s
Iteration   5: 1459059.631 ops/s
Iteration   6: 1455887.895 ops/s
Iteration   7: 1450584.221 ops/s
Iteration   8: 1453356.356 ops/s
Iteration   9: 1448928.301 ops/s
Iteration  10: 1453855.235 ops/s
Iteration  11: 1447851.237 ops/s
Iteration  12: 1448720.888 ops/s
Iteration  13: 1441718.315 ops/s
Iteration  14: 1450446.965 ops/s
Iteration  15: 1451895.747 ops/s
Iteration  16: 1455098.910 ops/s
Iteration  17: 1451487.278 ops/s
Iteration  18: 1450772.199 ops/s
Iteration  19: 1455024.663 ops/s
Iteration  20: 1455832.029 ops/s
Iteration  21: 1453329.727 ops/s
Iteration  22: 1450381.624 ops/s
Iteration  23: 1450200.038 ops/s
Iteration  24: 1445612.499 ops/s
Iteration  25: 1453348.465 ops/s
Iteration  26: 1452526.256 ops/s
Iteration  27: 1450795.811 ops/s
Iteration  28: 1453212.548 ops/s
Iteration  29: 1455065.624 ops/s
Iteration  30: 1457368.836 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_aggregateByNonMutating":
  1452076.633 ±(99.9%) 2382.398 ops/s [Average]
  (min, avg, max) = (1441718.315, 1452076.633, 1459059.631), stdev = 3565.861
  CI (99.9%): [1449694.235, 1454459.030] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  1452076.633 ± 2382.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10621084.902 ops/s
# Warmup Iteration   2: 21316819.632 ops/s
# Warmup Iteration   3: 21487628.577 ops/s
# Warmup Iteration   4: 18094725.870 ops/s
# Warmup Iteration   5: 21533206.666 ops/s
# Warmup Iteration   6: 21567689.618 ops/s
# Warmup Iteration   7: 21542319.889 ops/s
# Warmup Iteration   8: 21484956.243 ops/s
# Warmup Iteration   9: 21416225.775 ops/s
# Warmup Iteration  10: 21473181.544 ops/s
# Warmup Iteration  11: 21512911.189 ops/s
# Warmup Iteration  12: 21397038.577 ops/s
# Warmup Iteration  13: 21436041.555 ops/s
# Warmup Iteration  14: 21536951.244 ops/s
# Warmup Iteration  15: 21469401.050 ops/s
# Warmup Iteration  16: 21547222.368 ops/s
# Warmup Iteration  17: 21491524.817 ops/s
# Warmup Iteration  18: 21414372.860 ops/s
# Warmup Iteration  19: 21528314.182 ops/s
# Warmup Iteration  20: 21535959.901 ops/s
# Warmup Iteration  21: 21518510.449 ops/s
# Warmup Iteration  22: 21494461.571 ops/s
# Warmup Iteration  23: 21522767.460 ops/s
# Warmup Iteration  24: 21546741.483 ops/s
# Warmup Iteration  25: 21404064.742 ops/s
# Warmup Iteration  26: 21534675.607 ops/s
# Warmup Iteration  27: 21470619.965 ops/s
# Warmup Iteration  28: 21525990.365 ops/s
# Warmup Iteration  29: 21526873.890 ops/s
# Warmup Iteration  30: 21473971.141 ops/s
Iteration   1: 21428519.185 ops/s
Iteration   2: 21530453.864 ops/s
Iteration   3: 21477771.653 ops/s
Iteration   4: 21453197.418 ops/s
Iteration   5: 21312960.691 ops/s
Iteration   6: 21556522.932 ops/s
Iteration   7: 21557816.857 ops/s
Iteration   8: 21451064.480 ops/s
Iteration   9: 21491191.714 ops/s
Iteration  10: 21497636.081 ops/s
Iteration  11: 21557860.254 ops/s
Iteration  12: 21557906.991 ops/s
Iteration  13: 21456817.918 ops/s
Iteration  14: 21423417.792 ops/s
Iteration  15: 21480523.686 ops/s
Iteration  16: 21567558.203 ops/s
Iteration  17: 21491244.299 ops/s
Iteration  18: 21511005.852 ops/s
Iteration  19: 21452607.045 ops/s
Iteration  20: 21443178.318 ops/s
Iteration  21: 21511476.784 ops/s
Iteration  22: 21427158.439 ops/s
Iteration  23: 21561871.430 ops/s
Iteration  24: 21581810.637 ops/s
Iteration  25: 21475718.204 ops/s
Iteration  26: 21554157.416 ops/s
Iteration  27: 21532173.818 ops/s
Iteration  28: 21588287.947 ops/s
Iteration  29: 21576686.646 ops/s
Iteration  30: 21529557.534 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_allSatisfy":
  21501271.803 ±(99.9%) 41665.396 ops/s [Average]
  (min, avg, max) = (21312960.691, 21501271.803, 21588287.947), stdev = 62362.808
  CI (99.9%): [21459606.407, 21542937.199] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_allSatisfy  thrpt   30  21501271.803 ± 41665.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10678319.155 ops/s
# Warmup Iteration   2: 21540582.142 ops/s
# Warmup Iteration   3: 20343534.832 ops/s
# Warmup Iteration   4: 19710576.295 ops/s
# Warmup Iteration   5: 21646945.642 ops/s
# Warmup Iteration   6: 21638247.620 ops/s
# Warmup Iteration   7: 21639563.207 ops/s
# Warmup Iteration   8: 21620296.108 ops/s
# Warmup Iteration   9: 21705303.368 ops/s
# Warmup Iteration  10: 21620990.657 ops/s
# Warmup Iteration  11: 21661596.381 ops/s
# Warmup Iteration  12: 21675292.751 ops/s
# Warmup Iteration  13: 21652228.163 ops/s
# Warmup Iteration  14: 21672199.046 ops/s
# Warmup Iteration  15: 21563590.385 ops/s
# Warmup Iteration  16: 21664845.046 ops/s
# Warmup Iteration  17: 21698225.946 ops/s
# Warmup Iteration  18: 21704282.301 ops/s
# Warmup Iteration  19: 21675825.059 ops/s
# Warmup Iteration  20: 21692029.896 ops/s
# Warmup Iteration  21: 21690169.168 ops/s
# Warmup Iteration  22: 21679435.622 ops/s
# Warmup Iteration  23: 21664013.672 ops/s
# Warmup Iteration  24: 21622032.227 ops/s
# Warmup Iteration  25: 21669828.486 ops/s
# Warmup Iteration  26: 21680000.518 ops/s
# Warmup Iteration  27: 21615691.434 ops/s
# Warmup Iteration  28: 21664086.943 ops/s
# Warmup Iteration  29: 21734309.444 ops/s
# Warmup Iteration  30: 21648526.823 ops/s
Iteration   1: 21607994.387 ops/s
Iteration   2: 21737943.180 ops/s
Iteration   3: 21681986.078 ops/s
Iteration   4: 21656534.141 ops/s
Iteration   5: 21547735.705 ops/s
Iteration   6: 21588626.767 ops/s
Iteration   7: 21598921.833 ops/s
Iteration   8: 21691702.405 ops/s
Iteration   9: 21708611.994 ops/s
Iteration  10: 21277957.677 ops/s
Iteration  11: 21676376.532 ops/s
Iteration  12: 21626413.956 ops/s
Iteration  13: 21531925.512 ops/s
Iteration  14: 21529951.371 ops/s
Iteration  15: 21724793.791 ops/s
Iteration  16: 21695520.711 ops/s
Iteration  17: 21715285.192 ops/s
Iteration  18: 21628224.542 ops/s
Iteration  19: 21619533.913 ops/s
Iteration  20: 21589906.312 ops/s
Iteration  21: 21710588.261 ops/s
Iteration  22: 21682208.450 ops/s
Iteration  23: 21666820.034 ops/s
Iteration  24: 21731693.059 ops/s
Iteration  25: 21662206.414 ops/s
Iteration  26: 21657230.194 ops/s
Iteration  27: 21662579.776 ops/s
Iteration  28: 21665258.947 ops/s
Iteration  29: 21723070.163 ops/s
Iteration  30: 21695183.562 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_allSatisfyWith":
  21643092.829 ±(99.9%) 60237.837 ops/s [Average]
  (min, avg, max) = (21277957.677, 21643092.829, 21737943.180), stdev = 90161.165
  CI (99.9%): [21582854.992, 21703330.665] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  21643092.829 ± 60237.837  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10465378.415 ops/s
# Warmup Iteration   2: 20431598.771 ops/s
# Warmup Iteration   3: 20294888.147 ops/s
# Warmup Iteration   4: 17270723.339 ops/s
# Warmup Iteration   5: 20263707.761 ops/s
# Warmup Iteration   6: 20334616.064 ops/s
# Warmup Iteration   7: 20258092.791 ops/s
# Warmup Iteration   8: 20368898.089 ops/s
# Warmup Iteration   9: 20351936.028 ops/s
# Warmup Iteration  10: 20310787.652 ops/s
# Warmup Iteration  11: 20328048.517 ops/s
# Warmup Iteration  12: 20321188.627 ops/s
# Warmup Iteration  13: 20304586.318 ops/s
# Warmup Iteration  14: 20382892.224 ops/s
# Warmup Iteration  15: 20306199.615 ops/s
# Warmup Iteration  16: 20333903.935 ops/s
# Warmup Iteration  17: 20377036.962 ops/s
# Warmup Iteration  18: 20327902.825 ops/s
# Warmup Iteration  19: 20328449.385 ops/s
# Warmup Iteration  20: 20334106.874 ops/s
# Warmup Iteration  21: 20299887.390 ops/s
# Warmup Iteration  22: 20268151.246 ops/s
# Warmup Iteration  23: 20349736.653 ops/s
# Warmup Iteration  24: 20274048.633 ops/s
# Warmup Iteration  25: 20370039.043 ops/s
# Warmup Iteration  26: 20285130.627 ops/s
# Warmup Iteration  27: 20321685.147 ops/s
# Warmup Iteration  28: 20346083.360 ops/s
# Warmup Iteration  29: 20287697.557 ops/s
# Warmup Iteration  30: 20337808.025 ops/s
Iteration   1: 20331842.128 ops/s
Iteration   2: 20340346.921 ops/s
Iteration   3: 20383412.323 ops/s
Iteration   4: 20387304.847 ops/s
Iteration   5: 20361447.916 ops/s
Iteration   6: 20351569.429 ops/s
Iteration   7: 20335831.568 ops/s
Iteration   8: 20312635.571 ops/s
Iteration   9: 20324072.232 ops/s
Iteration  10: 20185657.844 ops/s
Iteration  11: 20345071.986 ops/s
Iteration  12: 20403485.518 ops/s
Iteration  13: 20332848.935 ops/s
Iteration  14: 20364294.613 ops/s
Iteration  15: 20323367.677 ops/s
Iteration  16: 20379234.634 ops/s
Iteration  17: 18794339.439 ops/s
Iteration  18: 20369018.643 ops/s
Iteration  19: 20304272.104 ops/s
Iteration  20: 20338680.441 ops/s
Iteration  21: 20301405.271 ops/s
Iteration  22: 20414704.377 ops/s
Iteration  23: 20403009.360 ops/s
Iteration  24: 20341738.337 ops/s
Iteration  25: 20300698.431 ops/s
Iteration  26: 20372371.349 ops/s
Iteration  27: 20332408.402 ops/s
Iteration  28: 20338960.962 ops/s
Iteration  29: 20353005.663 ops/s
Iteration  30: 20221651.790 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_anySatisfy":
  20288289.624 ±(99.9%) 191196.730 ops/s [Average]
  (min, avg, max) = (18794339.439, 20288289.624, 20414704.377), stdev = 286174.287
  CI (99.9%): [20097092.893, 20479486.354] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_anySatisfy  thrpt   30  20288289.624 ± 191196.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9603769.345 ops/s
# Warmup Iteration   2: 15533651.331 ops/s
# Warmup Iteration   3: 16298231.160 ops/s
# Warmup Iteration   4: 16332346.808 ops/s
# Warmup Iteration   5: 16404682.392 ops/s
# Warmup Iteration   6: 13799336.279 ops/s
# Warmup Iteration   7: 16347738.865 ops/s
# Warmup Iteration   8: 16403889.330 ops/s
# Warmup Iteration   9: 16380109.095 ops/s
# Warmup Iteration  10: 16346813.127 ops/s
# Warmup Iteration  11: 16356093.685 ops/s
# Warmup Iteration  12: 16332263.815 ops/s
# Warmup Iteration  13: 16384166.427 ops/s
# Warmup Iteration  14: 16374564.164 ops/s
# Warmup Iteration  15: 16398350.195 ops/s
# Warmup Iteration  16: 16343454.667 ops/s
# Warmup Iteration  17: 16384827.880 ops/s
# Warmup Iteration  18: 16273593.774 ops/s
# Warmup Iteration  19: 16323178.564 ops/s
# Warmup Iteration  20: 16364689.816 ops/s
# Warmup Iteration  21: 16380582.199 ops/s
# Warmup Iteration  22: 16367350.397 ops/s
# Warmup Iteration  23: 16285286.759 ops/s
# Warmup Iteration  24: 16313693.880 ops/s
# Warmup Iteration  25: 16362908.417 ops/s
# Warmup Iteration  26: 16327816.751 ops/s
# Warmup Iteration  27: 16356709.802 ops/s
# Warmup Iteration  28: 16375124.682 ops/s
# Warmup Iteration  29: 16363031.028 ops/s
# Warmup Iteration  30: 16344557.729 ops/s
Iteration   1: 16321149.454 ops/s
Iteration   2: 16360748.618 ops/s
Iteration   3: 16350779.941 ops/s
Iteration   4: 16304841.769 ops/s
Iteration   5: 16377710.723 ops/s
Iteration   6: 16304475.286 ops/s
Iteration   7: 16286623.065 ops/s
Iteration   8: 16354936.752 ops/s
Iteration   9: 16400777.805 ops/s
Iteration  10: 16296585.479 ops/s
Iteration  11: 16386531.907 ops/s
Iteration  12: 16365292.023 ops/s
Iteration  13: 16390142.025 ops/s
Iteration  14: 16366698.061 ops/s
Iteration  15: 16352814.742 ops/s
Iteration  16: 16404796.302 ops/s
Iteration  17: 16316942.666 ops/s
Iteration  18: 16362867.621 ops/s
Iteration  19: 16397543.046 ops/s
Iteration  20: 16383163.951 ops/s
Iteration  21: 16364112.625 ops/s
Iteration  22: 16405055.717 ops/s
Iteration  23: 16334439.269 ops/s
Iteration  24: 16382592.159 ops/s
Iteration  25: 16224715.873 ops/s
Iteration  26: 16363456.492 ops/s
Iteration  27: 16366766.560 ops/s
Iteration  28: 16367143.491 ops/s
Iteration  29: 16348186.241 ops/s
Iteration  30: 16354227.929 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_anySatisfyWith":
  16353203.920 ±(99.9%) 26922.058 ops/s [Average]
  (min, avg, max) = (16224715.873, 16353203.920, 16405055.717), stdev = 40295.672
  CI (99.9%): [16326281.862, 16380125.977] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  16353203.920 ± 26922.058  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 531092.348 ops/s
# Warmup Iteration   2: 1144037.220 ops/s
# Warmup Iteration   3: 1095084.398 ops/s
# Warmup Iteration   4: 1030087.995 ops/s
# Warmup Iteration   5: 1145154.093 ops/s
# Warmup Iteration   6: 1149077.447 ops/s
# Warmup Iteration   7: 1148252.295 ops/s
# Warmup Iteration   8: 1137085.151 ops/s
# Warmup Iteration   9: 1147897.113 ops/s
# Warmup Iteration  10: 1148622.142 ops/s
# Warmup Iteration  11: 1151952.557 ops/s
# Warmup Iteration  12: 1143836.330 ops/s
# Warmup Iteration  13: 1151682.344 ops/s
# Warmup Iteration  14: 1148876.287 ops/s
# Warmup Iteration  15: 1148272.375 ops/s
# Warmup Iteration  16: 1151913.335 ops/s
# Warmup Iteration  17: 1151918.590 ops/s
# Warmup Iteration  18: 1150812.317 ops/s
# Warmup Iteration  19: 1154471.983 ops/s
# Warmup Iteration  20: 1150914.321 ops/s
# Warmup Iteration  21: 1148520.849 ops/s
# Warmup Iteration  22: 1151272.858 ops/s
# Warmup Iteration  23: 1151718.666 ops/s
# Warmup Iteration  24: 1154249.918 ops/s
# Warmup Iteration  25: 1150259.081 ops/s
# Warmup Iteration  26: 1152757.614 ops/s
# Warmup Iteration  27: 1149882.767 ops/s
# Warmup Iteration  28: 1147174.318 ops/s
# Warmup Iteration  29: 1148078.874 ops/s
# Warmup Iteration  30: 1153995.101 ops/s
Iteration   1: 1112418.136 ops/s
Iteration   2: 1148414.754 ops/s
Iteration   3: 1148671.024 ops/s
Iteration   4: 1155196.037 ops/s
Iteration   5: 1151829.093 ops/s
Iteration   6: 1148966.419 ops/s
Iteration   7: 1155642.557 ops/s
Iteration   8: 1152015.036 ops/s
Iteration   9: 1149678.622 ops/s
Iteration  10: 1151818.770 ops/s
Iteration  11: 1154881.815 ops/s
Iteration  12: 1147794.842 ops/s
Iteration  13: 1150290.216 ops/s
Iteration  14: 1153241.912 ops/s
Iteration  15: 1152000.628 ops/s
Iteration  16: 1153804.921 ops/s
Iteration  17: 1144995.766 ops/s
Iteration  18: 1149200.609 ops/s
Iteration  19: 1152707.616 ops/s
Iteration  20: 1153995.826 ops/s
Iteration  21: 1153558.348 ops/s
Iteration  22: 1149535.704 ops/s
Iteration  23: 1150536.483 ops/s
Iteration  24: 1154409.689 ops/s
Iteration  25: 1152212.807 ops/s
Iteration  26: 1152353.849 ops/s
Iteration  27: 1151934.585 ops/s
Iteration  28: 1152027.552 ops/s
Iteration  29: 1154077.112 ops/s
Iteration  30: 1150791.442 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_appendString":
  1150300.072 ±(99.9%) 5054.195 ops/s [Average]
  (min, avg, max) = (1112418.136, 1150300.072, 1155642.557), stdev = 7564.882
  CI (99.9%): [1145245.877, 1155354.268] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_appendString  thrpt   30  1150300.072 ± 5054.195  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3444537.203 ops/s
# Warmup Iteration   2: 7744000.326 ops/s
# Warmup Iteration   3: 6605770.174 ops/s
# Warmup Iteration   4: 7841177.696 ops/s
# Warmup Iteration   5: 7825722.704 ops/s
# Warmup Iteration   6: 7851872.118 ops/s
# Warmup Iteration   7: 7842106.357 ops/s
# Warmup Iteration   8: 7849127.439 ops/s
# Warmup Iteration   9: 7846941.997 ops/s
# Warmup Iteration  10: 7850001.931 ops/s
# Warmup Iteration  11: 7841878.446 ops/s
# Warmup Iteration  12: 7840129.940 ops/s
# Warmup Iteration  13: 7839755.207 ops/s
# Warmup Iteration  14: 7849728.908 ops/s
# Warmup Iteration  15: 7841660.664 ops/s
# Warmup Iteration  16: 7823611.723 ops/s
# Warmup Iteration  17: 7832706.155 ops/s
# Warmup Iteration  18: 7862219.322 ops/s
# Warmup Iteration  19: 7857150.036 ops/s
# Warmup Iteration  20: 7850511.694 ops/s
# Warmup Iteration  21: 7835011.974 ops/s
# Warmup Iteration  22: 7832656.912 ops/s
# Warmup Iteration  23: 7854880.635 ops/s
# Warmup Iteration  24: 7837234.560 ops/s
# Warmup Iteration  25: 7875630.839 ops/s
# Warmup Iteration  26: 7840156.207 ops/s
# Warmup Iteration  27: 7843544.233 ops/s
# Warmup Iteration  28: 7865941.647 ops/s
# Warmup Iteration  29: 7837259.466 ops/s
# Warmup Iteration  30: 7856586.709 ops/s
Iteration   1: 7864189.930 ops/s
Iteration   2: 7765330.355 ops/s
Iteration   3: 7836013.201 ops/s
Iteration   4: 7792767.417 ops/s
Iteration   5: 7838904.820 ops/s
Iteration   6: 7867773.340 ops/s
Iteration   7: 7843414.846 ops/s
Iteration   8: 7855857.094 ops/s
Iteration   9: 7846515.789 ops/s
Iteration  10: 7855837.355 ops/s
Iteration  11: 7837740.454 ops/s
Iteration  12: 7864419.539 ops/s
Iteration  13: 7864175.162 ops/s
Iteration  14: 7827923.212 ops/s
Iteration  15: 7809108.760 ops/s
Iteration  16: 7834766.373 ops/s
Iteration  17: 7848858.702 ops/s
Iteration  18: 7865102.734 ops/s
Iteration  19: 7845710.558 ops/s
Iteration  20: 7841925.015 ops/s
Iteration  21: 7720978.808 ops/s
Iteration  22: 7753298.523 ops/s
Iteration  23: 7741994.496 ops/s
Iteration  24: 7768356.675 ops/s
Iteration  25: 7747010.390 ops/s
Iteration  26: 7846723.553 ops/s
Iteration  27: 7825941.471 ops/s
Iteration  28: 7850095.083 ops/s
Iteration  29: 7862773.359 ops/s
Iteration  30: 7864724.243 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_asReversed":
  7826274.375 ±(99.9%) 28746.198 ops/s [Average]
  (min, avg, max) = (7720978.808, 7826274.375, 7867773.340), stdev = 43025.960
  CI (99.9%): [7797528.177, 7855020.573] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_asReversed  thrpt   30  7826274.375 ± 28746.198  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 778147.464 ops/s
# Warmup Iteration   2: 821499.021 ops/s
# Warmup Iteration   3: 1041542.099 ops/s
# Warmup Iteration   4: 1040800.820 ops/s
# Warmup Iteration   5: 1037266.169 ops/s
# Warmup Iteration   6: 1043639.577 ops/s
# Warmup Iteration   7: 1037944.699 ops/s
# Warmup Iteration   8: 1034360.104 ops/s
# Warmup Iteration   9: 1029842.266 ops/s
# Warmup Iteration  10: 1033613.138 ops/s
# Warmup Iteration  11: 944267.725 ops/s
# Warmup Iteration  12: 987370.669 ops/s
# Warmup Iteration  13: 1041012.227 ops/s
# Warmup Iteration  14: 1031670.800 ops/s
# Warmup Iteration  15: 1030236.214 ops/s
# Warmup Iteration  16: 1039624.280 ops/s
# Warmup Iteration  17: 1109322.474 ops/s
# Warmup Iteration  18: 1107347.427 ops/s
# Warmup Iteration  19: 1109411.079 ops/s
# Warmup Iteration  20: 1108466.977 ops/s
# Warmup Iteration  21: 1112888.386 ops/s
# Warmup Iteration  22: 1112484.791 ops/s
# Warmup Iteration  23: 1112899.634 ops/s
# Warmup Iteration  24: 1114614.038 ops/s
# Warmup Iteration  25: 1104041.642 ops/s
# Warmup Iteration  26: 1115136.993 ops/s
# Warmup Iteration  27: 1108017.287 ops/s
# Warmup Iteration  28: 1105016.137 ops/s
# Warmup Iteration  29: 1105301.324 ops/s
# Warmup Iteration  30: 1101254.567 ops/s
Iteration   1: 1104399.079 ops/s
Iteration   2: 1114911.132 ops/s
Iteration   3: 1111102.050 ops/s
Iteration   4: 1105485.445 ops/s
Iteration   5: 1101017.592 ops/s
Iteration   6: 1110228.562 ops/s
Iteration   7: 1107431.914 ops/s
Iteration   8: 1115816.415 ops/s
Iteration   9: 1115802.767 ops/s
Iteration  10: 1111478.483 ops/s
Iteration  11: 1111812.945 ops/s
Iteration  12: 1109989.326 ops/s
Iteration  13: 1106970.612 ops/s
Iteration  14: 1111129.079 ops/s
Iteration  15: 1105025.695 ops/s
Iteration  16: 1114538.581 ops/s
Iteration  17: 1109318.980 ops/s
Iteration  18: 1107145.130 ops/s
Iteration  19: 1107869.084 ops/s
Iteration  20: 1112316.446 ops/s
Iteration  21: 1111300.279 ops/s
Iteration  22: 1108832.383 ops/s
Iteration  23: 1113269.165 ops/s
Iteration  24: 1103511.060 ops/s
Iteration  25: 1116213.301 ops/s
Iteration  26: 1108428.360 ops/s
Iteration  27: 1109335.272 ops/s
Iteration  28: 1110784.930 ops/s
Iteration  29: 1106974.205 ops/s
Iteration  30: 1105918.561 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_castToCollection":
  1109611.894 ±(99.9%) 2575.614 ops/s [Average]
  (min, avg, max) = (1101017.592, 1109611.894, 1116213.301), stdev = 3855.059
  CI (99.9%): [1107036.280, 1112187.509] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_castToCollection  thrpt   30  1109611.894 ± 2575.614  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4140763.895 ops/s
# Warmup Iteration   2: 8878801.302 ops/s
# Warmup Iteration   3: 9019523.343 ops/s
# Warmup Iteration   4: 7545669.175 ops/s
# Warmup Iteration   5: 9029099.241 ops/s
# Warmup Iteration   6: 9016140.311 ops/s
# Warmup Iteration   7: 9010221.772 ops/s
# Warmup Iteration   8: 8987900.009 ops/s
# Warmup Iteration   9: 8995827.199 ops/s
# Warmup Iteration  10: 9018157.199 ops/s
# Warmup Iteration  11: 8974237.911 ops/s
# Warmup Iteration  12: 8991602.806 ops/s
# Warmup Iteration  13: 8961253.925 ops/s
# Warmup Iteration  14: 9011747.424 ops/s
# Warmup Iteration  15: 8994288.466 ops/s
# Warmup Iteration  16: 9008489.220 ops/s
# Warmup Iteration  17: 9040235.436 ops/s
# Warmup Iteration  18: 9056438.457 ops/s
# Warmup Iteration  19: 9061858.706 ops/s
# Warmup Iteration  20: 9060789.168 ops/s
# Warmup Iteration  21: 9062476.749 ops/s
# Warmup Iteration  22: 9033028.437 ops/s
# Warmup Iteration  23: 9083877.926 ops/s
# Warmup Iteration  24: 9074422.838 ops/s
# Warmup Iteration  25: 9074346.507 ops/s
# Warmup Iteration  26: 9061508.322 ops/s
# Warmup Iteration  27: 9081416.761 ops/s
# Warmup Iteration  28: 9066512.058 ops/s
# Warmup Iteration  29: 9070652.081 ops/s
# Warmup Iteration  30: 9085966.046 ops/s
Iteration   1: 9066676.261 ops/s
Iteration   2: 9032624.799 ops/s
Iteration   3: 9076494.618 ops/s
Iteration   4: 9049489.935 ops/s
Iteration   5: 9077748.287 ops/s
Iteration   6: 9033021.332 ops/s
Iteration   7: 9095312.290 ops/s
Iteration   8: 9051526.632 ops/s
Iteration   9: 9069876.857 ops/s
Iteration  10: 9078264.071 ops/s
Iteration  11: 9075769.870 ops/s
Iteration  12: 9085961.704 ops/s
Iteration  13: 9021587.288 ops/s
Iteration  14: 9075811.925 ops/s
Iteration  15: 9085972.763 ops/s
Iteration  16: 9074044.945 ops/s
Iteration  17: 9068332.161 ops/s
Iteration  18: 9036791.064 ops/s
Iteration  19: 9056063.654 ops/s
Iteration  20: 9046461.153 ops/s
Iteration  21: 9067000.068 ops/s
Iteration  22: 9088388.811 ops/s
Iteration  23: 9040754.551 ops/s
Iteration  24: 9049718.738 ops/s
Iteration  25: 9081698.848 ops/s
Iteration  26: 9079897.653 ops/s
Iteration  27: 9054982.970 ops/s
Iteration  28: 9077465.706 ops/s
Iteration  29: 9101127.983 ops/s
Iteration  30: 9077120.888 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_chunk_large_size":
  9065866.261 ±(99.9%) 13463.505 ops/s [Average]
  (min, avg, max) = (9021587.288, 9065866.261, 9101127.983), stdev = 20151.542
  CI (99.9%): [9052402.756, 9079329.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  9065866.261 ± 13463.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 786534.847 ops/s
# Warmup Iteration   2: 825148.516 ops/s
# Warmup Iteration   3: 1049911.886 ops/s
# Warmup Iteration   4: 1045472.259 ops/s
# Warmup Iteration   5: 1042936.781 ops/s
# Warmup Iteration   6: 1043460.480 ops/s
# Warmup Iteration   7: 1044339.272 ops/s
# Warmup Iteration   8: 1045881.438 ops/s
# Warmup Iteration   9: 1048539.731 ops/s
# Warmup Iteration  10: 1050710.706 ops/s
# Warmup Iteration  11: 961661.754 ops/s
# Warmup Iteration  12: 987271.459 ops/s
# Warmup Iteration  13: 1050551.096 ops/s
# Warmup Iteration  14: 1044105.392 ops/s
# Warmup Iteration  15: 1049617.834 ops/s
# Warmup Iteration  16: 1050412.312 ops/s
# Warmup Iteration  17: 1116574.010 ops/s
# Warmup Iteration  18: 1119265.244 ops/s
# Warmup Iteration  19: 1119549.767 ops/s
# Warmup Iteration  20: 1120206.982 ops/s
# Warmup Iteration  21: 1122771.919 ops/s
# Warmup Iteration  22: 1122693.524 ops/s
# Warmup Iteration  23: 1120148.634 ops/s
# Warmup Iteration  24: 1124107.816 ops/s
# Warmup Iteration  25: 1121699.991 ops/s
# Warmup Iteration  26: 1119621.815 ops/s
# Warmup Iteration  27: 1115398.981 ops/s
# Warmup Iteration  28: 1116194.225 ops/s
# Warmup Iteration  29: 1119974.715 ops/s
# Warmup Iteration  30: 1117007.836 ops/s
Iteration   1: 1121651.525 ops/s
Iteration   2: 1117609.611 ops/s
Iteration   3: 1118788.079 ops/s
Iteration   4: 1121356.897 ops/s
Iteration   5: 1117141.236 ops/s
Iteration   6: 1110540.447 ops/s
Iteration   7: 1118863.131 ops/s
Iteration   8: 1115504.372 ops/s
Iteration   9: 1112880.322 ops/s
Iteration  10: 1112604.239 ops/s
Iteration  11: 1114618.027 ops/s
Iteration  12: 1117339.813 ops/s
Iteration  13: 1113773.613 ops/s
Iteration  14: 1112423.491 ops/s
Iteration  15: 1108221.934 ops/s
Iteration  16: 1123133.024 ops/s
Iteration  17: 1122497.226 ops/s
Iteration  18: 1118425.873 ops/s
Iteration  19: 1118839.130 ops/s
Iteration  20: 1122445.370 ops/s
Iteration  21: 1123307.149 ops/s
Iteration  22: 1120064.715 ops/s
Iteration  23: 1123592.645 ops/s
Iteration  24: 1121794.256 ops/s
Iteration  25: 1121696.806 ops/s
Iteration  26: 1119105.273 ops/s
Iteration  27: 1121209.756 ops/s
Iteration  28: 1119532.155 ops/s
Iteration  29: 1121336.307 ops/s
Iteration  30: 1119235.689 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_chunk_zero_throws":
  1118317.737 ±(99.9%) 2726.592 ops/s [Average]
  (min, avg, max) = (1108221.934, 1118317.737, 1123592.645), stdev = 4081.035
  CI (99.9%): [1115591.145, 1121044.329] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1118317.737 ± 2726.592  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 746437.298 ops/s
# Warmup Iteration   2: 774954.369 ops/s
# Warmup Iteration   3: 974217.688 ops/s
# Warmup Iteration   4: 976135.499 ops/s
# Warmup Iteration   5: 971468.377 ops/s
# Warmup Iteration   6: 978655.502 ops/s
# Warmup Iteration   7: 975439.941 ops/s
# Warmup Iteration   8: 974115.355 ops/s
# Warmup Iteration   9: 973677.874 ops/s
# Warmup Iteration  10: 967180.679 ops/s
# Warmup Iteration  11: 961075.714 ops/s
# Warmup Iteration  12: 826619.246 ops/s
# Warmup Iteration  13: 965952.173 ops/s
# Warmup Iteration  14: 962326.330 ops/s
# Warmup Iteration  15: 972435.763 ops/s
# Warmup Iteration  16: 970667.015 ops/s
# Warmup Iteration  17: 1011475.332 ops/s
# Warmup Iteration  18: 1018138.679 ops/s
# Warmup Iteration  19: 1022749.681 ops/s
# Warmup Iteration  20: 1020035.674 ops/s
# Warmup Iteration  21: 1036578.242 ops/s
# Warmup Iteration  22: 1000103.307 ops/s
# Warmup Iteration  23: 1028314.229 ops/s
# Warmup Iteration  24: 1022305.664 ops/s
# Warmup Iteration  25: 1022666.588 ops/s
# Warmup Iteration  26: 1020432.841 ops/s
# Warmup Iteration  27: 1019183.997 ops/s
# Warmup Iteration  28: 1008235.920 ops/s
# Warmup Iteration  29: 1011738.732 ops/s
# Warmup Iteration  30: 1014961.215 ops/s
Iteration   1: 1018712.121 ops/s
Iteration   2: 1023681.856 ops/s
Iteration   3: 1023086.659 ops/s
Iteration   4: 1018752.781 ops/s
Iteration   5: 1018520.506 ops/s
Iteration   6: 1023949.160 ops/s
Iteration   7: 1018615.371 ops/s
Iteration   8: 1017380.192 ops/s
Iteration   9: 1025385.859 ops/s
Iteration  10: 1026759.144 ops/s
Iteration  11: 1026316.343 ops/s
Iteration  12: 1032067.678 ops/s
Iteration  13: 1023885.272 ops/s
Iteration  14: 1020085.640 ops/s
Iteration  15: 1015873.332 ops/s
Iteration  16: 1024091.466 ops/s
Iteration  17: 1006722.419 ops/s
Iteration  18: 1008115.304 ops/s
Iteration  19: 1005642.793 ops/s
Iteration  20: 1022877.153 ops/s
Iteration  21: 1025751.344 ops/s
Iteration  22: 1025356.581 ops/s
Iteration  23: 1028481.776 ops/s
Iteration  24: 1029816.657 ops/s
Iteration  25: 1029242.772 ops/s
Iteration  26: 1027750.276 ops/s
Iteration  27: 1017863.587 ops/s
Iteration  28: 1011741.043 ops/s
Iteration  29: 1036030.292 ops/s
Iteration  30: 1020923.585 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_clear":
  1021782.632 ±(99.9%) 4812.620 ops/s [Average]
  (min, avg, max) = (1005642.793, 1021782.632, 1036030.292), stdev = 7203.303
  CI (99.9%): [1016970.012, 1026595.252] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_clear  thrpt   30  1021782.632 ± 4812.620  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7605714.116 ops/s
# Warmup Iteration   2: 14810094.065 ops/s
# Warmup Iteration   3: 15267415.835 ops/s
# Warmup Iteration   4: 15330463.596 ops/s
# Warmup Iteration   5: 12886161.710 ops/s
# Warmup Iteration   6: 15333220.086 ops/s
# Warmup Iteration   7: 15319444.776 ops/s
# Warmup Iteration   8: 15376299.956 ops/s
# Warmup Iteration   9: 15362652.643 ops/s
# Warmup Iteration  10: 15342771.618 ops/s
# Warmup Iteration  11: 15289271.809 ops/s
# Warmup Iteration  12: 15305030.283 ops/s
# Warmup Iteration  13: 15331336.676 ops/s
# Warmup Iteration  14: 15356591.826 ops/s
# Warmup Iteration  15: 15304366.990 ops/s
# Warmup Iteration  16: 15355821.729 ops/s
# Warmup Iteration  17: 15312553.842 ops/s
# Warmup Iteration  18: 15310808.727 ops/s
# Warmup Iteration  19: 15323138.135 ops/s
# Warmup Iteration  20: 15328252.612 ops/s
# Warmup Iteration  21: 15336296.858 ops/s
# Warmup Iteration  22: 15348627.084 ops/s
# Warmup Iteration  23: 15300088.567 ops/s
# Warmup Iteration  24: 15293928.739 ops/s
# Warmup Iteration  25: 15336060.367 ops/s
# Warmup Iteration  26: 15341705.315 ops/s
# Warmup Iteration  27: 15330680.125 ops/s
# Warmup Iteration  28: 15303837.129 ops/s
# Warmup Iteration  29: 15366458.552 ops/s
# Warmup Iteration  30: 15354930.000 ops/s
Iteration   1: 14473768.157 ops/s
Iteration   2: 15358692.856 ops/s
Iteration   3: 15391382.998 ops/s
Iteration   4: 15358967.679 ops/s
Iteration   5: 15362704.814 ops/s
Iteration   6: 15413708.736 ops/s
Iteration   7: 15281957.230 ops/s
Iteration   8: 15362581.797 ops/s
Iteration   9: 15385784.377 ops/s
Iteration  10: 15254471.961 ops/s
Iteration  11: 15336732.424 ops/s
Iteration  12: 15303169.412 ops/s
Iteration  13: 15342193.342 ops/s
Iteration  14: 15355945.323 ops/s
Iteration  15: 15323770.611 ops/s
Iteration  16: 15359012.696 ops/s
Iteration  17: 15323637.762 ops/s
Iteration  18: 15369532.916 ops/s
Iteration  19: 15404765.409 ops/s
Iteration  20: 15351664.281 ops/s
Iteration  21: 15373520.627 ops/s
Iteration  22: 15304316.217 ops/s
Iteration  23: 15311829.576 ops/s
Iteration  24: 15319616.893 ops/s
Iteration  25: 15383587.798 ops/s
Iteration  26: 15344472.003 ops/s
Iteration  27: 15335236.550 ops/s
Iteration  28: 15267168.528 ops/s
Iteration  29: 15368261.627 ops/s
Iteration  30: 15374001.568 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collect":
  15316548.539 ±(99.9%) 109359.032 ops/s [Average]
  (min, avg, max) = (14473768.157, 15316548.539, 15413708.736), stdev = 163683.463
  CI (99.9%): [15207189.507, 15425907.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collect  thrpt   30  15316548.539 ± 109359.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3349586.219 ops/s
# Warmup Iteration   2: 8056948.188 ops/s
# Warmup Iteration   3: 8241249.346 ops/s
# Warmup Iteration   4: 6679986.038 ops/s
# Warmup Iteration   5: 8244945.998 ops/s
# Warmup Iteration   6: 8243746.070 ops/s
# Warmup Iteration   7: 8229688.144 ops/s
# Warmup Iteration   8: 8255111.959 ops/s
# Warmup Iteration   9: 8265030.854 ops/s
# Warmup Iteration  10: 8254876.726 ops/s
# Warmup Iteration  11: 8245260.508 ops/s
# Warmup Iteration  12: 8268006.909 ops/s
# Warmup Iteration  13: 8251208.751 ops/s
# Warmup Iteration  14: 8270794.535 ops/s
# Warmup Iteration  15: 8257468.546 ops/s
# Warmup Iteration  16: 8248503.154 ops/s
# Warmup Iteration  17: 8249842.753 ops/s
# Warmup Iteration  18: 8219627.649 ops/s
# Warmup Iteration  19: 8244227.308 ops/s
# Warmup Iteration  20: 8201994.749 ops/s
# Warmup Iteration  21: 8223048.506 ops/s
# Warmup Iteration  22: 8239979.350 ops/s
# Warmup Iteration  23: 8208724.220 ops/s
# Warmup Iteration  24: 8223577.822 ops/s
# Warmup Iteration  25: 8245844.775 ops/s
# Warmup Iteration  26: 8218724.537 ops/s
# Warmup Iteration  27: 8262920.689 ops/s
# Warmup Iteration  28: 8238157.298 ops/s
# Warmup Iteration  29: 8263362.698 ops/s
# Warmup Iteration  30: 8261135.750 ops/s
Iteration   1: 8261907.875 ops/s
Iteration   2: 8260068.262 ops/s
Iteration   3: 8269144.360 ops/s
Iteration   4: 8265637.741 ops/s
Iteration   5: 8245347.616 ops/s
Iteration   6: 8247613.684 ops/s
Iteration   7: 8235014.199 ops/s
Iteration   8: 8255875.683 ops/s
Iteration   9: 8275942.401 ops/s
Iteration  10: 8259289.047 ops/s
Iteration  11: 8273929.127 ops/s
Iteration  12: 8270023.007 ops/s
Iteration  13: 8244298.311 ops/s
Iteration  14: 8233067.230 ops/s
Iteration  15: 8266375.166 ops/s
Iteration  16: 8267927.020 ops/s
Iteration  17: 8274913.765 ops/s
Iteration  18: 8254044.614 ops/s
Iteration  19: 8256390.072 ops/s
Iteration  20: 8272425.651 ops/s
Iteration  21: 8267709.431 ops/s
Iteration  22: 8249203.454 ops/s
Iteration  23: 8266361.773 ops/s
Iteration  24: 8288606.772 ops/s
Iteration  25: 8228554.946 ops/s
Iteration  26: 8253671.493 ops/s
Iteration  27: 8275287.603 ops/s
Iteration  28: 8258574.669 ops/s
Iteration  29: 8259591.190 ops/s
Iteration  30: 8263658.954 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectBoolean":
  8260015.171 ±(99.9%) 9193.638 ops/s [Average]
  (min, avg, max) = (8228554.946, 8260015.171, 8288606.772), stdev = 13760.605
  CI (99.9%): [8250821.533, 8269208.808] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collectBoolean  thrpt   30  8260015.171 ± 9193.638  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3067485.228 ops/s
# Warmup Iteration   2: 5677436.468 ops/s
# Warmup Iteration   3: 6288689.457 ops/s
# Warmup Iteration   4: 6278436.798 ops/s
# Warmup Iteration   5: 6124101.604 ops/s
# Warmup Iteration   6: 5432232.838 ops/s
# Warmup Iteration   7: 6322394.151 ops/s
# Warmup Iteration   8: 6317236.169 ops/s
# Warmup Iteration   9: 6338661.277 ops/s
# Warmup Iteration  10: 6333529.232 ops/s
# Warmup Iteration  11: 6321836.591 ops/s
# Warmup Iteration  12: 6320250.895 ops/s
# Warmup Iteration  13: 6334566.098 ops/s
# Warmup Iteration  14: 6330774.490 ops/s
# Warmup Iteration  15: 6318125.849 ops/s
# Warmup Iteration  16: 6329817.997 ops/s
# Warmup Iteration  17: 6321511.848 ops/s
# Warmup Iteration  18: 6334261.766 ops/s
# Warmup Iteration  19: 6334733.983 ops/s
# Warmup Iteration  20: 6336773.685 ops/s
# Warmup Iteration  21: 6318259.091 ops/s
# Warmup Iteration  22: 6323354.760 ops/s
# Warmup Iteration  23: 6334080.286 ops/s
# Warmup Iteration  24: 6331054.731 ops/s
# Warmup Iteration  25: 6330593.318 ops/s
# Warmup Iteration  26: 6340631.164 ops/s
# Warmup Iteration  27: 6324795.357 ops/s
# Warmup Iteration  28: 6334352.369 ops/s
# Warmup Iteration  29: 6333981.584 ops/s
# Warmup Iteration  30: 6333129.301 ops/s
Iteration   1: 6339952.826 ops/s
Iteration   2: 6309211.734 ops/s
Iteration   3: 6341171.014 ops/s
Iteration   4: 6310117.057 ops/s
Iteration   5: 6309667.167 ops/s
Iteration   6: 6329157.545 ops/s
Iteration   7: 6309611.707 ops/s
Iteration   8: 6353523.314 ops/s
Iteration   9: 6312259.006 ops/s
Iteration  10: 6334138.821 ops/s
Iteration  11: 6310672.693 ops/s
Iteration  12: 6301197.485 ops/s
Iteration  13: 6344597.037 ops/s
Iteration  14: 6307424.979 ops/s
Iteration  15: 6277479.567 ops/s
Iteration  16: 6322274.454 ops/s
Iteration  17: 6338170.788 ops/s
Iteration  18: 6302558.230 ops/s
Iteration  19: 6337327.687 ops/s
Iteration  20: 6322615.427 ops/s
Iteration  21: 6340622.966 ops/s
Iteration  22: 6328856.561 ops/s
Iteration  23: 6332330.208 ops/s
Iteration  24: 6330942.811 ops/s
Iteration  25: 6344438.887 ops/s
Iteration  26: 6337605.564 ops/s
Iteration  27: 6339264.945 ops/s
Iteration  28: 6332250.401 ops/s
Iteration  29: 6323324.358 ops/s
Iteration  30: 6316676.326 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectByte":
  6324648.052 ±(99.9%) 11288.463 ops/s [Average]
  (min, avg, max) = (6277479.567, 6324648.052, 6353523.314), stdev = 16896.042
  CI (99.9%): [6313359.589, 6335936.515] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collectByte  thrpt   30  6324648.052 ± 11288.463  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3052147.505 ops/s
# Warmup Iteration   2: 6222944.706 ops/s
# Warmup Iteration   3: 6637083.910 ops/s
# Warmup Iteration   4: 6680176.282 ops/s
# Warmup Iteration   5: 5508593.152 ops/s
# Warmup Iteration   6: 6688728.784 ops/s
# Warmup Iteration   7: 6696118.213 ops/s
# Warmup Iteration   8: 6682084.973 ops/s
# Warmup Iteration   9: 6684655.591 ops/s
# Warmup Iteration  10: 6688804.762 ops/s
# Warmup Iteration  11: 6697155.470 ops/s
# Warmup Iteration  12: 6694977.896 ops/s
# Warmup Iteration  13: 6692805.546 ops/s
# Warmup Iteration  14: 6703558.730 ops/s
# Warmup Iteration  15: 6689350.867 ops/s
# Warmup Iteration  16: 6686307.910 ops/s
# Warmup Iteration  17: 6779584.184 ops/s
# Warmup Iteration  18: 6752015.482 ops/s
# Warmup Iteration  19: 6757661.066 ops/s
# Warmup Iteration  20: 6778601.089 ops/s
# Warmup Iteration  21: 6771907.838 ops/s
# Warmup Iteration  22: 6773862.958 ops/s
# Warmup Iteration  23: 6770992.753 ops/s
# Warmup Iteration  24: 6762182.522 ops/s
# Warmup Iteration  25: 6745708.706 ops/s
# Warmup Iteration  26: 6775020.903 ops/s
# Warmup Iteration  27: 6778417.944 ops/s
# Warmup Iteration  28: 6773034.663 ops/s
# Warmup Iteration  29: 6788760.376 ops/s
# Warmup Iteration  30: 6778183.432 ops/s
Iteration   1: 6793303.735 ops/s
Iteration   2: 6789928.095 ops/s
Iteration   3: 6748103.973 ops/s
Iteration   4: 6781873.526 ops/s
Iteration   5: 6763555.555 ops/s
Iteration   6: 6751214.418 ops/s
Iteration   7: 6770594.846 ops/s
Iteration   8: 6740292.647 ops/s
Iteration   9: 6770894.895 ops/s
Iteration  10: 6756358.615 ops/s
Iteration  11: 6777862.941 ops/s
Iteration  12: 6785232.237 ops/s
Iteration  13: 6767131.559 ops/s
Iteration  14: 6777317.671 ops/s
Iteration  15: 6789837.042 ops/s
Iteration  16: 6783009.504 ops/s
Iteration  17: 6785173.993 ops/s
Iteration  18: 6786018.701 ops/s
Iteration  19: 6762882.260 ops/s
Iteration  20: 6794693.367 ops/s
Iteration  21: 6779403.014 ops/s
Iteration  22: 6778619.772 ops/s
Iteration  23: 6745177.806 ops/s
Iteration  24: 6771497.706 ops/s
Iteration  25: 6740623.678 ops/s
Iteration  26: 6787321.956 ops/s
Iteration  27: 6785582.710 ops/s
Iteration  28: 6777506.282 ops/s
Iteration  29: 6775105.300 ops/s
Iteration  30: 6786043.069 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectChar":
  6773405.362 ±(99.9%) 10577.839 ops/s [Average]
  (min, avg, max) = (6740292.647, 6773405.362, 6794693.367), stdev = 15832.413
  CI (99.9%): [6762827.523, 6783983.202] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collectChar  thrpt   30  6773405.362 ± 10577.839  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2839206.439 ops/s
# Warmup Iteration   2: 6337051.205 ops/s
# Warmup Iteration   3: 6513464.414 ops/s
# Warmup Iteration   4: 6462515.853 ops/s
# Warmup Iteration   5: 5578345.566 ops/s
# Warmup Iteration   6: 6576736.059 ops/s
# Warmup Iteration   7: 6537899.077 ops/s
# Warmup Iteration   8: 6578651.004 ops/s
# Warmup Iteration   9: 6578321.766 ops/s
# Warmup Iteration  10: 6588360.740 ops/s
# Warmup Iteration  11: 6570046.873 ops/s
# Warmup Iteration  12: 6580668.601 ops/s
# Warmup Iteration  13: 6568982.263 ops/s
# Warmup Iteration  14: 6572194.380 ops/s
# Warmup Iteration  15: 6574682.402 ops/s
# Warmup Iteration  16: 6563549.891 ops/s
# Warmup Iteration  17: 6584805.283 ops/s
# Warmup Iteration  18: 6582509.920 ops/s
# Warmup Iteration  19: 6592812.210 ops/s
# Warmup Iteration  20: 6589159.120 ops/s
# Warmup Iteration  21: 6585489.834 ops/s
# Warmup Iteration  22: 6586868.721 ops/s
# Warmup Iteration  23: 6576483.916 ops/s
# Warmup Iteration  24: 6563563.375 ops/s
# Warmup Iteration  25: 6580525.805 ops/s
# Warmup Iteration  26: 6589192.687 ops/s
# Warmup Iteration  27: 6574406.760 ops/s
# Warmup Iteration  28: 6595941.936 ops/s
# Warmup Iteration  29: 6600499.790 ops/s
# Warmup Iteration  30: 6596471.603 ops/s
Iteration   1: 6590706.807 ops/s
Iteration   2: 6559038.613 ops/s
Iteration   3: 6573624.558 ops/s
Iteration   4: 6594846.546 ops/s
Iteration   5: 6561754.096 ops/s
Iteration   6: 6583903.849 ops/s
Iteration   7: 6599903.842 ops/s
Iteration   8: 6568066.709 ops/s
Iteration   9: 6560005.678 ops/s
Iteration  10: 6563919.738 ops/s
Iteration  11: 6601292.698 ops/s
Iteration  12: 6563082.436 ops/s
Iteration  13: 6570168.395 ops/s
Iteration  14: 6586527.259 ops/s
Iteration  15: 6574692.220 ops/s
Iteration  16: 6515638.502 ops/s
Iteration  17: 6607304.482 ops/s
Iteration  18: 6531677.978 ops/s
Iteration  19: 6581664.519 ops/s
Iteration  20: 6576888.036 ops/s
Iteration  21: 6555093.384 ops/s
Iteration  22: 6605033.082 ops/s
Iteration  23: 6578340.570 ops/s
Iteration  24: 6581951.139 ops/s
Iteration  25: 6584206.387 ops/s
Iteration  26: 6601001.972 ops/s
Iteration  27: 6606328.508 ops/s
Iteration  28: 6598981.719 ops/s
Iteration  29: 6587449.906 ops/s
Iteration  30: 6604432.574 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectDouble":
  6578917.540 ±(99.9%) 14619.579 ops/s [Average]
  (min, avg, max) = (6515638.502, 6578917.540, 6607304.482), stdev = 21881.899
  CI (99.9%): [6564297.961, 6593537.119] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collectDouble  thrpt   30  6578917.540 ± 14619.579  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2935703.255 ops/s
# Warmup Iteration   2: 6128528.263 ops/s
# Warmup Iteration   3: 6546884.547 ops/s
# Warmup Iteration   4: 6476337.987 ops/s
# Warmup Iteration   5: 5357705.357 ops/s
# Warmup Iteration   6: 6519237.492 ops/s
# Warmup Iteration   7: 6515577.575 ops/s
# Warmup Iteration   8: 6514685.589 ops/s
# Warmup Iteration   9: 6521153.934 ops/s
# Warmup Iteration  10: 6474665.914 ops/s
# Warmup Iteration  11: 6508135.668 ops/s
# Warmup Iteration  12: 6509380.410 ops/s
# Warmup Iteration  13: 6506846.342 ops/s
# Warmup Iteration  14: 6516808.324 ops/s
# Warmup Iteration  15: 6501961.438 ops/s
# Warmup Iteration  16: 6509467.980 ops/s
# Warmup Iteration  17: 6599208.032 ops/s
# Warmup Iteration  18: 6615422.680 ops/s
# Warmup Iteration  19: 6644311.665 ops/s
# Warmup Iteration  20: 6622592.316 ops/s
# Warmup Iteration  21: 6641453.375 ops/s
# Warmup Iteration  22: 6600423.637 ops/s
# Warmup Iteration  23: 6625475.810 ops/s
# Warmup Iteration  24: 6641667.662 ops/s
# Warmup Iteration  25: 6633183.484 ops/s
# Warmup Iteration  26: 6617093.556 ops/s
# Warmup Iteration  27: 6624200.671 ops/s
# Warmup Iteration  28: 6615780.803 ops/s
# Warmup Iteration  29: 6631155.673 ops/s
# Warmup Iteration  30: 6634806.143 ops/s
Iteration   1: 6620294.812 ops/s
Iteration   2: 6645439.784 ops/s
Iteration   3: 6593494.509 ops/s
Iteration   4: 6622022.913 ops/s
Iteration   5: 6635808.161 ops/s
Iteration   6: 6634189.684 ops/s
Iteration   7: 6628912.447 ops/s
Iteration   8: 6621026.351 ops/s
Iteration   9: 6648348.342 ops/s
Iteration  10: 6635437.046 ops/s
Iteration  11: 6634257.449 ops/s
Iteration  12: 6651868.286 ops/s
Iteration  13: 6634266.985 ops/s
Iteration  14: 6610099.277 ops/s
Iteration  15: 6623086.778 ops/s
Iteration  16: 6556273.639 ops/s
Iteration  17: 6612045.186 ops/s
Iteration  18: 6614732.292 ops/s
Iteration  19: 6613946.863 ops/s
Iteration  20: 6631078.173 ops/s
Iteration  21: 6602681.053 ops/s
Iteration  22: 6622477.375 ops/s
Iteration  23: 6608063.896 ops/s
Iteration  24: 6629172.044 ops/s
Iteration  25: 6628859.237 ops/s
Iteration  26: 6562119.185 ops/s
Iteration  27: 6628801.334 ops/s
Iteration  28: 6629449.231 ops/s
Iteration  29: 6639477.604 ops/s
Iteration  30: 6630852.886 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectFloat":
  6621619.427 ±(99.9%) 14316.293 ops/s [Average]
  (min, avg, max) = (6556273.639, 6621619.427, 6651868.286), stdev = 21427.956
  CI (99.9%): [6607303.134, 6635935.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collectFloat  thrpt   30  6621619.427 ± 14316.293  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6822576.933 ops/s
# Warmup Iteration   2: 13712444.503 ops/s
# Warmup Iteration   3: 14118367.271 ops/s
# Warmup Iteration   4: 14159516.231 ops/s
# Warmup Iteration   5: 11963328.990 ops/s
# Warmup Iteration   6: 14213844.396 ops/s
# Warmup Iteration   7: 14220272.899 ops/s
# Warmup Iteration   8: 14216798.864 ops/s
# Warmup Iteration   9: 14230019.019 ops/s
# Warmup Iteration  10: 14187970.127 ops/s
# Warmup Iteration  11: 14174995.445 ops/s
# Warmup Iteration  12: 14242795.576 ops/s
# Warmup Iteration  13: 14182328.131 ops/s
# Warmup Iteration  14: 14156411.193 ops/s
# Warmup Iteration  15: 14211579.751 ops/s
# Warmup Iteration  16: 14236320.979 ops/s
# Warmup Iteration  17: 14207387.053 ops/s
# Warmup Iteration  18: 14179963.770 ops/s
# Warmup Iteration  19: 14200002.703 ops/s
# Warmup Iteration  20: 14170520.736 ops/s
# Warmup Iteration  21: 14218227.118 ops/s
# Warmup Iteration  22: 14183446.868 ops/s
# Warmup Iteration  23: 14189253.948 ops/s
# Warmup Iteration  24: 14197715.940 ops/s
# Warmup Iteration  25: 14166884.674 ops/s
# Warmup Iteration  26: 14161318.184 ops/s
# Warmup Iteration  27: 14209568.013 ops/s
# Warmup Iteration  28: 14179318.608 ops/s
# Warmup Iteration  29: 14202902.199 ops/s
# Warmup Iteration  30: 14186299.014 ops/s
Iteration   1: 14197603.565 ops/s
Iteration   2: 14202821.711 ops/s
Iteration   3: 14230804.844 ops/s
Iteration   4: 14183910.284 ops/s
Iteration   5: 14170827.543 ops/s
Iteration   6: 14180818.809 ops/s
Iteration   7: 14162503.400 ops/s
Iteration   8: 14136430.178 ops/s
Iteration   9: 14245145.613 ops/s
Iteration  10: 14143403.881 ops/s
Iteration  11: 14210937.052 ops/s
Iteration  12: 14161837.815 ops/s
Iteration  13: 14234460.024 ops/s
Iteration  14: 14202902.483 ops/s
Iteration  15: 14205523.079 ops/s
Iteration  16: 14245637.324 ops/s
Iteration  17: 14176731.474 ops/s
Iteration  18: 14214134.879 ops/s
Iteration  19: 14194285.003 ops/s
Iteration  20: 14260167.314 ops/s
Iteration  21: 14205916.109 ops/s
Iteration  22: 14191723.913 ops/s
Iteration  23: 14209609.966 ops/s
Iteration  24: 14174803.671 ops/s
Iteration  25: 14194172.037 ops/s
Iteration  26: 14176356.958 ops/s
Iteration  27: 14209693.366 ops/s
Iteration  28: 14116871.435 ops/s
Iteration  29: 14123895.697 ops/s
Iteration  30: 14216783.174 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectIf":
  14192690.420 ±(99.9%) 23311.961 ops/s [Average]
  (min, avg, max) = (14116871.435, 14192690.420, 14260167.314), stdev = 34892.249
  CI (99.9%): [14169378.459, 14216002.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collectIf  thrpt   30  14192690.420 ± 23311.961  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22137665.337 ops/s
# Warmup Iteration   2: 42857827.630 ops/s
# Warmup Iteration   3: 36750313.276 ops/s
# Warmup Iteration   4: 42931194.270 ops/s
# Warmup Iteration   5: 43106612.736 ops/s
# Warmup Iteration   6: 43066158.766 ops/s
# Warmup Iteration   7: 43066952.942 ops/s
# Warmup Iteration   8: 43000547.473 ops/s
# Warmup Iteration   9: 43212575.926 ops/s
# Warmup Iteration  10: 43115466.001 ops/s
# Warmup Iteration  11: 43220677.346 ops/s
# Warmup Iteration  12: 43102321.446 ops/s
# Warmup Iteration  13: 43106790.780 ops/s
# Warmup Iteration  14: 43125006.861 ops/s
# Warmup Iteration  15: 43111087.051 ops/s
# Warmup Iteration  16: 43278654.614 ops/s
# Warmup Iteration  17: 43065713.937 ops/s
# Warmup Iteration  18: 43181427.038 ops/s
# Warmup Iteration  19: 43229814.973 ops/s
# Warmup Iteration  20: 43126661.936 ops/s
# Warmup Iteration  21: 43011167.379 ops/s
# Warmup Iteration  22: 42856494.739 ops/s
# Warmup Iteration  23: 43192061.512 ops/s
# Warmup Iteration  24: 43105172.038 ops/s
# Warmup Iteration  25: 43064258.035 ops/s
# Warmup Iteration  26: 43162136.458 ops/s
# Warmup Iteration  27: 43212109.242 ops/s
# Warmup Iteration  28: 43210927.057 ops/s
# Warmup Iteration  29: 42935559.292 ops/s
# Warmup Iteration  30: 43215471.921 ops/s
Iteration   1: 43120621.469 ops/s
Iteration   2: 43132641.580 ops/s
Iteration   3: 43030417.167 ops/s
Iteration   4: 43020349.476 ops/s
Iteration   5: 43044633.728 ops/s
Iteration   6: 43355793.518 ops/s
Iteration   7: 43113420.321 ops/s
Iteration   8: 42934101.369 ops/s
Iteration   9: 42915674.821 ops/s
Iteration  10: 43055972.703 ops/s
Iteration  11: 42940185.944 ops/s
Iteration  12: 42864652.549 ops/s
Iteration  13: 42799656.854 ops/s
Iteration  14: 43094854.183 ops/s
Iteration  15: 43197919.842 ops/s
Iteration  16: 43532332.877 ops/s
Iteration  17: 43339068.409 ops/s
Iteration  18: 43156763.578 ops/s
Iteration  19: 43274359.154 ops/s
Iteration  20: 43229756.837 ops/s
Iteration  21: 43295673.523 ops/s
Iteration  22: 42996593.603 ops/s
Iteration  23: 42863273.931 ops/s
Iteration  24: 42932538.619 ops/s
Iteration  25: 42871783.761 ops/s
Iteration  26: 43155220.394 ops/s
Iteration  27: 42907741.504 ops/s
Iteration  28: 43042287.578 ops/s
Iteration  29: 42858740.614 ops/s
Iteration  30: 42957728.742 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectIfWithTarget":
  43067825.288 ±(99.9%) 117433.350 ops/s [Average]
  (min, avg, max) = (42799656.854, 43067825.288, 43532332.877), stdev = 175768.724
  CI (99.9%): [42950391.938, 43185258.639] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  43067825.288 ± 117433.350  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3002258.004 ops/s
# Warmup Iteration   2: 6427236.654 ops/s
# Warmup Iteration   3: 6792914.356 ops/s
# Warmup Iteration   4: 6839163.750 ops/s
# Warmup Iteration   5: 5638097.885 ops/s
# Warmup Iteration   6: 6844792.377 ops/s
# Warmup Iteration   7: 6871215.111 ops/s
# Warmup Iteration   8: 6842792.736 ops/s
# Warmup Iteration   9: 6857600.005 ops/s
# Warmup Iteration  10: 6860661.078 ops/s
# Warmup Iteration  11: 6844681.788 ops/s
# Warmup Iteration  12: 6847601.143 ops/s
# Warmup Iteration  13: 6843216.023 ops/s
# Warmup Iteration  14: 6867658.096 ops/s
# Warmup Iteration  15: 6827210.021 ops/s
# Warmup Iteration  16: 6827078.800 ops/s
# Warmup Iteration  17: 6829102.338 ops/s
# Warmup Iteration  18: 6853432.296 ops/s
# Warmup Iteration  19: 6849955.628 ops/s
# Warmup Iteration  20: 6855371.437 ops/s
# Warmup Iteration  21: 6853472.583 ops/s
# Warmup Iteration  22: 6842421.749 ops/s
# Warmup Iteration  23: 6838107.181 ops/s
# Warmup Iteration  24: 6849167.688 ops/s
# Warmup Iteration  25: 6836732.071 ops/s
# Warmup Iteration  26: 6830915.743 ops/s
# Warmup Iteration  27: 6737439.661 ops/s
# Warmup Iteration  28: 6802737.717 ops/s
# Warmup Iteration  29: 6824816.394 ops/s
# Warmup Iteration  30: 6837447.920 ops/s
Iteration   1: 6862867.491 ops/s
Iteration   2: 6854945.305 ops/s
Iteration   3: 6851683.957 ops/s
Iteration   4: 6864481.752 ops/s
Iteration   5: 6864268.464 ops/s
Iteration   6: 6872855.040 ops/s
Iteration   7: 6830275.838 ops/s
Iteration   8: 6868086.111 ops/s
Iteration   9: 6858448.090 ops/s
Iteration  10: 6846928.857 ops/s
Iteration  11: 6852686.607 ops/s
Iteration  12: 6732574.704 ops/s
Iteration  13: 6830170.024 ops/s
Iteration  14: 6833387.624 ops/s
Iteration  15: 6854465.158 ops/s
Iteration  16: 6864240.680 ops/s
Iteration  17: 6856415.751 ops/s
Iteration  18: 6865216.380 ops/s
Iteration  19: 6861436.200 ops/s
Iteration  20: 6857457.918 ops/s
Iteration  21: 6824378.357 ops/s
Iteration  22: 6860496.984 ops/s
Iteration  23: 6761814.843 ops/s
Iteration  24: 6851052.129 ops/s
Iteration  25: 6833077.378 ops/s
Iteration  26: 6842686.450 ops/s
Iteration  27: 6863918.433 ops/s
Iteration  28: 6826684.204 ops/s
Iteration  29: 6745051.765 ops/s
Iteration  30: 6862959.835 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectInt":
  6841833.744 ±(99.9%) 23499.022 ops/s [Average]
  (min, avg, max) = (6732574.704, 6841833.744, 6872855.040), stdev = 35172.232
  CI (99.9%): [6818334.722, 6865332.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collectInt  thrpt   30  6841833.744 ± 23499.022  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2836520.651 ops/s
# Warmup Iteration   2: 6367428.418 ops/s
# Warmup Iteration   3: 6584819.789 ops/s
# Warmup Iteration   4: 6424859.028 ops/s
# Warmup Iteration   5: 5702991.601 ops/s
# Warmup Iteration   6: 6672007.057 ops/s
# Warmup Iteration   7: 6677012.456 ops/s
# Warmup Iteration   8: 6653944.462 ops/s
# Warmup Iteration   9: 6680910.586 ops/s
# Warmup Iteration  10: 6643318.939 ops/s
# Warmup Iteration  11: 6678506.851 ops/s
# Warmup Iteration  12: 6675078.193 ops/s
# Warmup Iteration  13: 6672360.079 ops/s
# Warmup Iteration  14: 6677908.866 ops/s
# Warmup Iteration  15: 6668367.901 ops/s
# Warmup Iteration  16: 6675718.410 ops/s
# Warmup Iteration  17: 6676612.727 ops/s
# Warmup Iteration  18: 6670040.017 ops/s
# Warmup Iteration  19: 6675446.736 ops/s
# Warmup Iteration  20: 6667695.896 ops/s
# Warmup Iteration  21: 6661982.099 ops/s
# Warmup Iteration  22: 6666619.966 ops/s
# Warmup Iteration  23: 6660936.982 ops/s
# Warmup Iteration  24: 6689039.753 ops/s
# Warmup Iteration  25: 6678054.435 ops/s
# Warmup Iteration  26: 6676150.441 ops/s
# Warmup Iteration  27: 6684125.544 ops/s
# Warmup Iteration  28: 6670509.711 ops/s
# Warmup Iteration  29: 6671015.968 ops/s
# Warmup Iteration  30: 6648660.459 ops/s
Iteration   1: 6663118.798 ops/s
Iteration   2: 6682674.475 ops/s
Iteration   3: 6658812.568 ops/s
Iteration   4: 6666605.283 ops/s
Iteration   5: 6686695.501 ops/s
Iteration   6: 6645619.142 ops/s
Iteration   7: 6683870.444 ops/s
Iteration   8: 6669226.011 ops/s
Iteration   9: 6673567.319 ops/s
Iteration  10: 6648364.291 ops/s
Iteration  11: 6675723.517 ops/s
Iteration  12: 6682481.447 ops/s
Iteration  13: 6678385.668 ops/s
Iteration  14: 6677853.622 ops/s
Iteration  15: 6682305.458 ops/s
Iteration  16: 6687942.263 ops/s
Iteration  17: 6676953.937 ops/s
Iteration  18: 6663221.133 ops/s
Iteration  19: 6683529.801 ops/s
Iteration  20: 6679744.548 ops/s
Iteration  21: 6678834.370 ops/s
Iteration  22: 6684019.127 ops/s
Iteration  23: 6655707.165 ops/s
Iteration  24: 6669361.694 ops/s
Iteration  25: 6698052.960 ops/s
Iteration  26: 6673500.901 ops/s
Iteration  27: 6672490.315 ops/s
Iteration  28: 6682998.844 ops/s
Iteration  29: 6693347.794 ops/s
Iteration  30: 6677595.895 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectLong":
  6675086.810 ±(99.9%) 8171.473 ops/s [Average]
  (min, avg, max) = (6645619.142, 6675086.810, 6698052.960), stdev = 12230.677
  CI (99.9%): [6666915.337, 6683258.282] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collectLong  thrpt   30  6675086.810 ± 8171.473  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2922231.077 ops/s
# Warmup Iteration   2: 5775155.574 ops/s
# Warmup Iteration   3: 6400962.280 ops/s
# Warmup Iteration   4: 6447288.416 ops/s
# Warmup Iteration   5: 5298144.976 ops/s
# Warmup Iteration   6: 6416345.568 ops/s
# Warmup Iteration   7: 6432643.086 ops/s
# Warmup Iteration   8: 6449830.942 ops/s
# Warmup Iteration   9: 6429794.122 ops/s
# Warmup Iteration  10: 6435164.607 ops/s
# Warmup Iteration  11: 6440036.832 ops/s
# Warmup Iteration  12: 6441607.116 ops/s
# Warmup Iteration  13: 6444408.620 ops/s
# Warmup Iteration  14: 6427484.668 ops/s
# Warmup Iteration  15: 6439682.279 ops/s
# Warmup Iteration  16: 6430582.907 ops/s
# Warmup Iteration  17: 6443294.909 ops/s
# Warmup Iteration  18: 6448161.577 ops/s
# Warmup Iteration  19: 6385597.447 ops/s
# Warmup Iteration  20: 6424504.215 ops/s
# Warmup Iteration  21: 6437200.225 ops/s
# Warmup Iteration  22: 6436774.788 ops/s
# Warmup Iteration  23: 6443401.303 ops/s
# Warmup Iteration  24: 6380292.677 ops/s
# Warmup Iteration  25: 6432448.814 ops/s
# Warmup Iteration  26: 6437950.955 ops/s
# Warmup Iteration  27: 6440344.636 ops/s
# Warmup Iteration  28: 6448624.444 ops/s
# Warmup Iteration  29: 6423625.200 ops/s
# Warmup Iteration  30: 6448309.882 ops/s
Iteration   1: 6455951.523 ops/s
Iteration   2: 6460998.605 ops/s
Iteration   3: 6448456.286 ops/s
Iteration   4: 6444598.177 ops/s
Iteration   5: 6447045.301 ops/s
Iteration   6: 6425521.664 ops/s
Iteration   7: 6450309.293 ops/s
Iteration   8: 6446495.448 ops/s
Iteration   9: 6441738.609 ops/s
Iteration  10: 6425776.715 ops/s
Iteration  11: 6437449.600 ops/s
Iteration  12: 6440431.437 ops/s
Iteration  13: 6457048.505 ops/s
Iteration  14: 6442110.888 ops/s
Iteration  15: 6386808.072 ops/s
Iteration  16: 6432982.651 ops/s
Iteration  17: 6422013.343 ops/s
Iteration  18: 6433188.133 ops/s
Iteration  19: 6444777.192 ops/s
Iteration  20: 6447943.187 ops/s
Iteration  21: 6425628.719 ops/s
Iteration  22: 6392133.647 ops/s
Iteration  23: 6433725.898 ops/s
Iteration  24: 6443252.294 ops/s
Iteration  25: 6448988.006 ops/s
Iteration  26: 6444473.998 ops/s
Iteration  27: 6453051.660 ops/s
Iteration  28: 6428790.775 ops/s
Iteration  29: 6426109.051 ops/s
Iteration  30: 6456434.622 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectShort":
  6438141.110 ±(99.9%) 11330.924 ops/s [Average]
  (min, avg, max) = (6386808.072, 6438141.110, 6460998.605), stdev = 16959.594
  CI (99.9%): [6426810.187, 6449472.034] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collectShort  thrpt   30  6438141.110 ± 11330.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 796783.744 ops/s
# Warmup Iteration   2: 1929067.606 ops/s
# Warmup Iteration   3: 1965431.575 ops/s
# Warmup Iteration   4: 1614644.376 ops/s
# Warmup Iteration   5: 1961280.530 ops/s
# Warmup Iteration   6: 1960333.592 ops/s
# Warmup Iteration   7: 1955169.860 ops/s
# Warmup Iteration   8: 1967826.596 ops/s
# Warmup Iteration   9: 1959232.609 ops/s
# Warmup Iteration  10: 1964127.301 ops/s
# Warmup Iteration  11: 1962586.782 ops/s
# Warmup Iteration  12: 1961837.225 ops/s
# Warmup Iteration  13: 1965703.795 ops/s
# Warmup Iteration  14: 1960245.840 ops/s
# Warmup Iteration  15: 1965883.880 ops/s
# Warmup Iteration  16: 1956923.314 ops/s
# Warmup Iteration  17: 1965566.391 ops/s
# Warmup Iteration  18: 1954579.232 ops/s
# Warmup Iteration  19: 1945852.323 ops/s
# Warmup Iteration  20: 1965258.587 ops/s
# Warmup Iteration  21: 1963772.816 ops/s
# Warmup Iteration  22: 1962349.258 ops/s
# Warmup Iteration  23: 1964815.526 ops/s
# Warmup Iteration  24: 1966267.445 ops/s
# Warmup Iteration  25: 1965060.409 ops/s
# Warmup Iteration  26: 1968000.888 ops/s
# Warmup Iteration  27: 1969145.247 ops/s
# Warmup Iteration  28: 1965412.857 ops/s
# Warmup Iteration  29: 1965011.347 ops/s
# Warmup Iteration  30: 1963790.637 ops/s
Iteration   1: 1959063.940 ops/s
Iteration   2: 1969840.291 ops/s
Iteration   3: 1960567.099 ops/s
Iteration   4: 1969278.912 ops/s
Iteration   5: 1963821.231 ops/s
Iteration   6: 1974954.116 ops/s
Iteration   7: 1967530.952 ops/s
Iteration   8: 1967593.271 ops/s
Iteration   9: 1967365.260 ops/s
Iteration  10: 1967630.892 ops/s
Iteration  11: 1966687.634 ops/s
Iteration  12: 1966103.106 ops/s
Iteration  13: 1965919.222 ops/s
Iteration  14: 1961022.051 ops/s
Iteration  15: 1972983.584 ops/s
Iteration  16: 1968230.664 ops/s
Iteration  17: 1960852.683 ops/s
Iteration  18: 1970638.832 ops/s
Iteration  19: 1965237.243 ops/s
Iteration  20: 1966232.818 ops/s
Iteration  21: 1972595.983 ops/s
Iteration  22: 1966140.236 ops/s
Iteration  23: 1973759.576 ops/s
Iteration  24: 1967666.548 ops/s
Iteration  25: 1971554.131 ops/s
Iteration  26: 1966490.489 ops/s
Iteration  27: 1968057.645 ops/s
Iteration  28: 1971592.258 ops/s
Iteration  29: 1965976.426 ops/s
Iteration  30: 1967356.346 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectWith":
  1967424.781 ±(99.9%) 2599.966 ops/s [Average]
  (min, avg, max) = (1959063.940, 1967424.781, 1974954.116), stdev = 3891.508
  CI (99.9%): [1964824.815, 1970024.748] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collectWith  thrpt   30  1967424.781 ± 2599.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2385090.067 ops/s
# Warmup Iteration   2: 5751215.588 ops/s
# Warmup Iteration   3: 4869612.546 ops/s
# Warmup Iteration   4: 5802464.892 ops/s
# Warmup Iteration   5: 5820161.609 ops/s
# Warmup Iteration   6: 5783221.457 ops/s
# Warmup Iteration   7: 5825573.759 ops/s
# Warmup Iteration   8: 5785976.405 ops/s
# Warmup Iteration   9: 5803608.734 ops/s
# Warmup Iteration  10: 5814573.506 ops/s
# Warmup Iteration  11: 5830550.850 ops/s
# Warmup Iteration  12: 5827830.717 ops/s
# Warmup Iteration  13: 5828625.024 ops/s
# Warmup Iteration  14: 5826109.360 ops/s
# Warmup Iteration  15: 5833789.453 ops/s
# Warmup Iteration  16: 5781428.030 ops/s
# Warmup Iteration  17: 5806733.712 ops/s
# Warmup Iteration  18: 5815987.332 ops/s
# Warmup Iteration  19: 5817872.952 ops/s
# Warmup Iteration  20: 5824726.070 ops/s
# Warmup Iteration  21: 5824000.887 ops/s
# Warmup Iteration  22: 5827743.898 ops/s
# Warmup Iteration  23: 5770262.896 ops/s
# Warmup Iteration  24: 5826513.127 ops/s
# Warmup Iteration  25: 5831233.392 ops/s
# Warmup Iteration  26: 5823764.447 ops/s
# Warmup Iteration  27: 5787494.829 ops/s
# Warmup Iteration  28: 5804918.606 ops/s
# Warmup Iteration  29: 5827643.796 ops/s
# Warmup Iteration  30: 5817800.867 ops/s
Iteration   1: 5781611.023 ops/s
Iteration   2: 5827531.640 ops/s
Iteration   3: 5826996.340 ops/s
Iteration   4: 5834910.962 ops/s
Iteration   5: 5799201.763 ops/s
Iteration   6: 5816999.287 ops/s
Iteration   7: 5779004.539 ops/s
Iteration   8: 5779391.090 ops/s
Iteration   9: 5813032.731 ops/s
Iteration  10: 5821206.814 ops/s
Iteration  11: 5799182.550 ops/s
Iteration  12: 5818276.615 ops/s
Iteration  13: 5827981.616 ops/s
Iteration  14: 5789439.848 ops/s
Iteration  15: 5822793.859 ops/s
Iteration  16: 5823642.924 ops/s
Iteration  17: 5807322.223 ops/s
Iteration  18: 5784336.565 ops/s
Iteration  19: 5821098.663 ops/s
Iteration  20: 5811123.594 ops/s
Iteration  21: 5795185.540 ops/s
Iteration  22: 5825800.698 ops/s
Iteration  23: 5805391.061 ops/s
Iteration  24: 5830644.639 ops/s
Iteration  25: 5812499.434 ops/s
Iteration  26: 5820113.564 ops/s
Iteration  27: 5807249.413 ops/s
Iteration  28: 5814353.604 ops/s
Iteration  29: 5792323.276 ops/s
Iteration  30: 5820285.875 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectWithIndex":
  5810297.725 ±(99.9%) 10928.734 ops/s [Average]
  (min, avg, max) = (5779004.539, 5810297.725, 5834910.962), stdev = 16357.616
  CI (99.9%): [5799368.991, 5821226.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  5810297.725 ± 10928.734  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 556192.744 ops/s
# Warmup Iteration   2: 1416095.750 ops/s
# Warmup Iteration   3: 1548377.505 ops/s
# Warmup Iteration   4: 1483587.130 ops/s
# Warmup Iteration   5: 1369161.011 ops/s
# Warmup Iteration   6: 1558739.310 ops/s
# Warmup Iteration   7: 1554370.396 ops/s
# Warmup Iteration   8: 1546622.884 ops/s
# Warmup Iteration   9: 1543046.504 ops/s
# Warmup Iteration  10: 1557552.250 ops/s
# Warmup Iteration  11: 1557870.021 ops/s
# Warmup Iteration  12: 1560070.365 ops/s
# Warmup Iteration  13: 1557930.891 ops/s
# Warmup Iteration  14: 1558681.779 ops/s
# Warmup Iteration  15: 1549882.455 ops/s
# Warmup Iteration  16: 1554088.784 ops/s
# Warmup Iteration  17: 1557006.329 ops/s
# Warmup Iteration  18: 1549126.976 ops/s
# Warmup Iteration  19: 1555890.115 ops/s
# Warmup Iteration  20: 1557807.605 ops/s
# Warmup Iteration  21: 1549951.639 ops/s
# Warmup Iteration  22: 1557214.685 ops/s
# Warmup Iteration  23: 1551284.502 ops/s
# Warmup Iteration  24: 1553582.870 ops/s
# Warmup Iteration  25: 1551794.268 ops/s
# Warmup Iteration  26: 1554080.880 ops/s
# Warmup Iteration  27: 1556351.342 ops/s
# Warmup Iteration  28: 1559716.671 ops/s
# Warmup Iteration  29: 1551092.215 ops/s
# Warmup Iteration  30: 1561057.884 ops/s
Iteration   1: 1559176.057 ops/s
Iteration   2: 1554500.804 ops/s
Iteration   3: 1557925.943 ops/s
Iteration   4: 1557609.932 ops/s
Iteration   5: 1554078.288 ops/s
Iteration   6: 1557797.203 ops/s
Iteration   7: 1555940.652 ops/s
Iteration   8: 1553017.904 ops/s
Iteration   9: 1550808.243 ops/s
Iteration  10: 1547884.156 ops/s
Iteration  11: 1559857.814 ops/s
Iteration  12: 1542810.075 ops/s
Iteration  13: 1543346.802 ops/s
Iteration  14: 1551485.320 ops/s
Iteration  15: 1548138.635 ops/s
Iteration  16: 1562110.584 ops/s
Iteration  17: 1549469.521 ops/s
Iteration  18: 1546333.995 ops/s
Iteration  19: 1550966.036 ops/s
Iteration  20: 1555629.303 ops/s
Iteration  21: 1545880.445 ops/s
Iteration  22: 1557727.784 ops/s
Iteration  23: 1548017.463 ops/s
Iteration  24: 1549558.615 ops/s
Iteration  25: 1555773.034 ops/s
Iteration  26: 1559083.412 ops/s
Iteration  27: 1557957.085 ops/s
Iteration  28: 1552311.104 ops/s
Iteration  29: 1558189.541 ops/s
Iteration  30: 1554886.806 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  1553275.752 ±(99.9%) 3461.191 ops/s [Average]
  (min, avg, max) = (1542810.075, 1553275.752, 1562110.584), stdev = 5180.547
  CI (99.9%): [1549814.561, 1556736.942] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  1553275.752 ± 3461.191  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1365681.223 ops/s
# Warmup Iteration   2: 3160772.753 ops/s
# Warmup Iteration   3: 2650867.197 ops/s
# Warmup Iteration   4: 3161942.734 ops/s
# Warmup Iteration   5: 3163995.539 ops/s
# Warmup Iteration   6: 3152442.433 ops/s
# Warmup Iteration   7: 3165735.364 ops/s
# Warmup Iteration   8: 3156945.610 ops/s
# Warmup Iteration   9: 3149542.916 ops/s
# Warmup Iteration  10: 3154985.321 ops/s
# Warmup Iteration  11: 3148091.013 ops/s
# Warmup Iteration  12: 3168373.222 ops/s
# Warmup Iteration  13: 3162271.882 ops/s
# Warmup Iteration  14: 3162789.582 ops/s
# Warmup Iteration  15: 3164594.635 ops/s
# Warmup Iteration  16: 3159792.843 ops/s
# Warmup Iteration  17: 3140808.825 ops/s
# Warmup Iteration  18: 3147406.466 ops/s
# Warmup Iteration  19: 3157915.122 ops/s
# Warmup Iteration  20: 3154331.258 ops/s
# Warmup Iteration  21: 3151656.668 ops/s
# Warmup Iteration  22: 3161269.453 ops/s
# Warmup Iteration  23: 3164225.899 ops/s
# Warmup Iteration  24: 3161949.086 ops/s
# Warmup Iteration  25: 3162275.401 ops/s
# Warmup Iteration  26: 3161926.401 ops/s
# Warmup Iteration  27: 3159211.311 ops/s
# Warmup Iteration  28: 3156445.342 ops/s
# Warmup Iteration  29: 3164737.407 ops/s
# Warmup Iteration  30: 3151442.529 ops/s
Iteration   1: 3160350.221 ops/s
Iteration   2: 3158071.883 ops/s
Iteration   3: 3149463.806 ops/s
Iteration   4: 3164115.133 ops/s
Iteration   5: 3173331.257 ops/s
Iteration   6: 3160396.532 ops/s
Iteration   7: 3155871.698 ops/s
Iteration   8: 3169687.562 ops/s
Iteration   9: 3170055.879 ops/s
Iteration  10: 3160469.474 ops/s
Iteration  11: 3159501.903 ops/s
Iteration  12: 3147813.336 ops/s
Iteration  13: 3149108.633 ops/s
Iteration  14: 3146260.238 ops/s
Iteration  15: 3175612.895 ops/s
Iteration  16: 3154873.500 ops/s
Iteration  17: 3144425.902 ops/s
Iteration  18: 3158959.824 ops/s
Iteration  19: 3165577.627 ops/s
Iteration  20: 3163731.969 ops/s
Iteration  21: 3144796.892 ops/s
Iteration  22: 3144944.597 ops/s
Iteration  23: 3164969.033 ops/s
Iteration  24: 3173401.517 ops/s
Iteration  25: 3175719.380 ops/s
Iteration  26: 3160917.995 ops/s
Iteration  27: 3150977.329 ops/s
Iteration  28: 3159279.761 ops/s
Iteration  29: 3158243.816 ops/s
Iteration  30: 3166976.792 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collectWith_target":
  3159596.879 ±(99.9%) 6296.398 ops/s [Average]
  (min, avg, max) = (3144425.902, 3159596.879, 3175719.380), stdev = 9424.153
  CI (99.9%): [3153300.482, 3165893.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collectWith_target  thrpt   30  3159596.879 ± 6296.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2848570.117 ops/s
# Warmup Iteration   2: 7876536.790 ops/s
# Warmup Iteration   3: 6733535.765 ops/s
# Warmup Iteration   4: 7964297.783 ops/s
# Warmup Iteration   5: 7964607.971 ops/s
# Warmup Iteration   6: 7951425.061 ops/s
# Warmup Iteration   7: 7944303.338 ops/s
# Warmup Iteration   8: 7953333.170 ops/s
# Warmup Iteration   9: 7938489.419 ops/s
# Warmup Iteration  10: 7954685.380 ops/s
# Warmup Iteration  11: 7927402.446 ops/s
# Warmup Iteration  12: 7922779.992 ops/s
# Warmup Iteration  13: 7874983.802 ops/s
# Warmup Iteration  14: 7928574.153 ops/s
# Warmup Iteration  15: 7929488.658 ops/s
# Warmup Iteration  16: 7906104.496 ops/s
# Warmup Iteration  17: 7952736.474 ops/s
# Warmup Iteration  18: 7955131.892 ops/s
# Warmup Iteration  19: 7962873.640 ops/s
# Warmup Iteration  20: 7953818.963 ops/s
# Warmup Iteration  21: 7949694.323 ops/s
# Warmup Iteration  22: 7918183.660 ops/s
# Warmup Iteration  23: 7946863.913 ops/s
# Warmup Iteration  24: 7955081.633 ops/s
# Warmup Iteration  25: 7968890.345 ops/s
# Warmup Iteration  26: 7917521.257 ops/s
# Warmup Iteration  27: 7927716.640 ops/s
# Warmup Iteration  28: 7946260.432 ops/s
# Warmup Iteration  29: 7898626.442 ops/s
# Warmup Iteration  30: 7897253.367 ops/s
Iteration   1: 7911647.084 ops/s
Iteration   2: 7941854.950 ops/s
Iteration   3: 7919971.283 ops/s
Iteration   4: 7904890.367 ops/s
Iteration   5: 7960311.050 ops/s
Iteration   6: 7960580.240 ops/s
Iteration   7: 7925060.149 ops/s
Iteration   8: 7947823.550 ops/s
Iteration   9: 7851830.065 ops/s
Iteration  10: 7923239.282 ops/s
Iteration  11: 7818526.176 ops/s
Iteration  12: 7933365.615 ops/s
Iteration  13: 7889483.956 ops/s
Iteration  14: 7908812.010 ops/s
Iteration  15: 7921043.782 ops/s
Iteration  16: 7972048.980 ops/s
Iteration  17: 7952939.305 ops/s
Iteration  18: 7932874.101 ops/s
Iteration  19: 7959881.537 ops/s
Iteration  20: 7916247.739 ops/s
Iteration  21: 7943030.836 ops/s
Iteration  22: 7933685.090 ops/s
Iteration  23: 7929525.042 ops/s
Iteration  24: 7948692.543 ops/s
Iteration  25: 7993116.771 ops/s
Iteration  26: 7939942.280 ops/s
Iteration  27: 7902890.650 ops/s
Iteration  28: 7875939.142 ops/s
Iteration  29: 7915951.450 ops/s
Iteration  30: 7869551.334 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_collect_target":
  7923491.879 ±(99.9%) 24314.155 ops/s [Average]
  (min, avg, max) = (7818526.176, 7923491.879, 7993116.771), stdev = 36392.285
  CI (99.9%): [7899177.724, 7947806.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_collect_target  thrpt   30  7923491.879 ± 24314.155  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2959976.876 ops/s
# Warmup Iteration   2: 5054184.217 ops/s
# Warmup Iteration   3: 5023792.162 ops/s
# Warmup Iteration   4: 5049924.981 ops/s
# Warmup Iteration   5: 4732130.249 ops/s
# Warmup Iteration   6: 4585538.443 ops/s
# Warmup Iteration   7: 5037544.010 ops/s
# Warmup Iteration   8: 5058876.108 ops/s
# Warmup Iteration   9: 5040555.634 ops/s
# Warmup Iteration  10: 5056010.865 ops/s
# Warmup Iteration  11: 5048544.642 ops/s
# Warmup Iteration  12: 5031691.836 ops/s
# Warmup Iteration  13: 5058993.680 ops/s
# Warmup Iteration  14: 5045175.303 ops/s
# Warmup Iteration  15: 5041679.715 ops/s
# Warmup Iteration  16: 5055901.364 ops/s
# Warmup Iteration  17: 5035577.345 ops/s
# Warmup Iteration  18: 5051898.140 ops/s
# Warmup Iteration  19: 5048199.800 ops/s
# Warmup Iteration  20: 5037570.149 ops/s
# Warmup Iteration  21: 5042204.725 ops/s
# Warmup Iteration  22: 5025532.104 ops/s
# Warmup Iteration  23: 5049846.256 ops/s
# Warmup Iteration  24: 5030511.440 ops/s
# Warmup Iteration  25: 5031950.005 ops/s
# Warmup Iteration  26: 5059383.623 ops/s
# Warmup Iteration  27: 5056141.563 ops/s
# Warmup Iteration  28: 5049463.699 ops/s
# Warmup Iteration  29: 5062557.857 ops/s
# Warmup Iteration  30: 5036906.011 ops/s
Iteration   1: 5040680.498 ops/s
Iteration   2: 5035178.336 ops/s
Iteration   3: 5033039.949 ops/s
Iteration   4: 5018678.045 ops/s
Iteration   5: 5031838.357 ops/s
Iteration   6: 5037792.168 ops/s
Iteration   7: 5012163.045 ops/s
Iteration   8: 5029438.612 ops/s
Iteration   9: 5044946.419 ops/s
Iteration  10: 5053847.766 ops/s
Iteration  11: 5058208.671 ops/s
Iteration  12: 5049137.003 ops/s
Iteration  13: 5057979.566 ops/s
Iteration  14: 5057747.761 ops/s
Iteration  15: 5054129.109 ops/s
Iteration  16: 5058567.137 ops/s
Iteration  17: 5034964.070 ops/s
Iteration  18: 5041762.340 ops/s
Iteration  19: 5042459.828 ops/s
Iteration  20: 5053872.434 ops/s
Iteration  21: 5041536.673 ops/s
Iteration  22: 5052966.400 ops/s
Iteration  23: 5062966.223 ops/s
Iteration  24: 5065965.929 ops/s
Iteration  25: 5049324.965 ops/s
Iteration  26: 5063176.127 ops/s
Iteration  27: 5033830.967 ops/s
Iteration  28: 5024857.421 ops/s
Iteration  29: 5057228.166 ops/s
Iteration  30: 5045072.003 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_contains":
  5044778.533 ±(99.9%) 9139.393 ops/s [Average]
  (min, avg, max) = (5012163.045, 5044778.533, 5065965.929), stdev = 13679.415
  CI (99.9%): [5035639.139, 5053917.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_contains  thrpt   30  5044778.533 ± 9139.393  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2968801.272 ops/s
# Warmup Iteration   2: 6503445.561 ops/s
# Warmup Iteration   3: 6426306.667 ops/s
# Warmup Iteration   4: 5431639.111 ops/s
# Warmup Iteration   5: 6420339.221 ops/s
# Warmup Iteration   6: 6411630.444 ops/s
# Warmup Iteration   7: 6441550.397 ops/s
# Warmup Iteration   8: 6423037.676 ops/s
# Warmup Iteration   9: 6420906.624 ops/s
# Warmup Iteration  10: 6396434.392 ops/s
# Warmup Iteration  11: 6409190.499 ops/s
# Warmup Iteration  12: 6427023.268 ops/s
# Warmup Iteration  13: 6449399.924 ops/s
# Warmup Iteration  14: 6441988.644 ops/s
# Warmup Iteration  15: 6418082.073 ops/s
# Warmup Iteration  16: 6430108.640 ops/s
# Warmup Iteration  17: 6437698.357 ops/s
# Warmup Iteration  18: 6413929.795 ops/s
# Warmup Iteration  19: 6420947.089 ops/s
# Warmup Iteration  20: 6423842.529 ops/s
# Warmup Iteration  21: 6426751.074 ops/s
# Warmup Iteration  22: 6424860.262 ops/s
# Warmup Iteration  23: 6397616.456 ops/s
# Warmup Iteration  24: 6434806.242 ops/s
# Warmup Iteration  25: 6442582.067 ops/s
# Warmup Iteration  26: 6427033.943 ops/s
# Warmup Iteration  27: 6419481.873 ops/s
# Warmup Iteration  28: 6438509.132 ops/s
# Warmup Iteration  29: 6424634.994 ops/s
# Warmup Iteration  30: 6417490.230 ops/s
Iteration   1: 6455385.698 ops/s
Iteration   2: 6448472.391 ops/s
Iteration   3: 6410852.570 ops/s
Iteration   4: 6417459.952 ops/s
Iteration   5: 6440553.862 ops/s
Iteration   6: 6441660.472 ops/s
Iteration   7: 6405889.893 ops/s
Iteration   8: 6412079.006 ops/s
Iteration   9: 6423272.344 ops/s
Iteration  10: 6443850.149 ops/s
Iteration  11: 6446607.781 ops/s
Iteration  12: 6444395.977 ops/s
Iteration  13: 6447656.036 ops/s
Iteration  14: 6434469.580 ops/s
Iteration  15: 6407865.146 ops/s
Iteration  16: 6435415.870 ops/s
Iteration  17: 6422655.166 ops/s
Iteration  18: 6439430.303 ops/s
Iteration  19: 6427850.651 ops/s
Iteration  20: 6434521.334 ops/s
Iteration  21: 6395216.703 ops/s
Iteration  22: 6424590.258 ops/s
Iteration  23: 6412987.845 ops/s
Iteration  24: 6426593.831 ops/s
Iteration  25: 6421147.989 ops/s
Iteration  26: 6382874.921 ops/s
Iteration  27: 6444690.187 ops/s
Iteration  28: 6426690.193 ops/s
Iteration  29: 6442103.531 ops/s
Iteration  30: 6434766.895 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_containsAll":
  6428400.218 ±(99.9%) 11476.504 ops/s [Average]
  (min, avg, max) = (6382874.921, 6428400.218, 6455385.698), stdev = 17177.493
  CI (99.9%): [6416923.714, 6439876.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_containsAll  thrpt   30  6428400.218 ± 11476.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7356515.718 ops/s
# Warmup Iteration   2: 15194502.895 ops/s
# Warmup Iteration   3: 14105647.012 ops/s
# Warmup Iteration   4: 14573319.936 ops/s
# Warmup Iteration   5: 15619185.062 ops/s
# Warmup Iteration   6: 15635126.651 ops/s
# Warmup Iteration   7: 15624413.173 ops/s
# Warmup Iteration   8: 15573458.889 ops/s
# Warmup Iteration   9: 15545083.270 ops/s
# Warmup Iteration  10: 15605891.378 ops/s
# Warmup Iteration  11: 15568068.259 ops/s
# Warmup Iteration  12: 15521181.703 ops/s
# Warmup Iteration  13: 15510921.522 ops/s
# Warmup Iteration  14: 15660786.515 ops/s
# Warmup Iteration  15: 15591315.852 ops/s
# Warmup Iteration  16: 15614541.143 ops/s
# Warmup Iteration  17: 15662503.639 ops/s
# Warmup Iteration  18: 15577231.215 ops/s
# Warmup Iteration  19: 15620702.368 ops/s
# Warmup Iteration  20: 15636928.568 ops/s
# Warmup Iteration  21: 15616691.881 ops/s
# Warmup Iteration  22: 15616608.882 ops/s
# Warmup Iteration  23: 15630321.427 ops/s
# Warmup Iteration  24: 15611027.544 ops/s
# Warmup Iteration  25: 15620261.987 ops/s
# Warmup Iteration  26: 15610326.109 ops/s
# Warmup Iteration  27: 15589239.268 ops/s
# Warmup Iteration  28: 15591721.887 ops/s
# Warmup Iteration  29: 15589723.417 ops/s
# Warmup Iteration  30: 15583598.270 ops/s
Iteration   1: 15581754.280 ops/s
Iteration   2: 15606125.889 ops/s
Iteration   3: 15557893.626 ops/s
Iteration   4: 15671579.421 ops/s
Iteration   5: 15696605.986 ops/s
Iteration   6: 15632438.247 ops/s
Iteration   7: 15621810.117 ops/s
Iteration   8: 15645036.091 ops/s
Iteration   9: 15587194.551 ops/s
Iteration  10: 15611569.406 ops/s
Iteration  11: 15655775.614 ops/s
Iteration  12: 15668042.742 ops/s
Iteration  13: 15636563.728 ops/s
Iteration  14: 15654469.493 ops/s
Iteration  15: 15629187.970 ops/s
Iteration  16: 15627518.829 ops/s
Iteration  17: 15639644.130 ops/s
Iteration  18: 15545821.038 ops/s
Iteration  19: 15570308.003 ops/s
Iteration  20: 15572385.495 ops/s
Iteration  21: 15655353.372 ops/s
Iteration  22: 15587273.480 ops/s
Iteration  23: 15629282.664 ops/s
Iteration  24: 15579944.840 ops/s
Iteration  25: 15615609.543 ops/s
Iteration  26: 15516633.706 ops/s
Iteration  27: 15641938.391 ops/s
Iteration  28: 15651703.599 ops/s
Iteration  29: 15563722.355 ops/s
Iteration  30: 15548979.865 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_containsAllArray":
  15613405.549 ±(99.9%) 29068.904 ops/s [Average]
  (min, avg, max) = (15516633.706, 15613405.549, 15696605.986), stdev = 43508.970
  CI (99.9%): [15584336.645, 15642474.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_containsAllArray  thrpt   30  15613405.549 ± 29068.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5550605.318 ops/s
# Warmup Iteration   2: 10132498.732 ops/s
# Warmup Iteration   3: 10766043.857 ops/s
# Warmup Iteration   4: 10826283.602 ops/s
# Warmup Iteration   5: 9064056.582 ops/s
# Warmup Iteration   6: 10848679.563 ops/s
# Warmup Iteration   7: 10847244.276 ops/s
# Warmup Iteration   8: 10843047.773 ops/s
# Warmup Iteration   9: 10816989.147 ops/s
# Warmup Iteration  10: 10813084.681 ops/s
# Warmup Iteration  11: 10819179.900 ops/s
# Warmup Iteration  12: 10769301.910 ops/s
# Warmup Iteration  13: 10796374.416 ops/s
# Warmup Iteration  14: 10827385.398 ops/s
# Warmup Iteration  15: 10833963.851 ops/s
# Warmup Iteration  16: 10822885.504 ops/s
# Warmup Iteration  17: 10834923.886 ops/s
# Warmup Iteration  18: 10823903.188 ops/s
# Warmup Iteration  19: 10830514.231 ops/s
# Warmup Iteration  20: 10836749.280 ops/s
# Warmup Iteration  21: 10777506.670 ops/s
# Warmup Iteration  22: 10796941.236 ops/s
# Warmup Iteration  23: 10810758.493 ops/s
# Warmup Iteration  24: 10654274.098 ops/s
# Warmup Iteration  25: 10804481.047 ops/s
# Warmup Iteration  26: 10801506.879 ops/s
# Warmup Iteration  27: 10795765.344 ops/s
# Warmup Iteration  28: 10801362.505 ops/s
# Warmup Iteration  29: 10813222.507 ops/s
# Warmup Iteration  30: 10780147.514 ops/s
Iteration   1: 10797973.897 ops/s
Iteration   2: 10729150.443 ops/s
Iteration   3: 10792669.664 ops/s
Iteration   4: 10802044.017 ops/s
Iteration   5: 10810528.600 ops/s
Iteration   6: 10749527.259 ops/s
Iteration   7: 10819339.208 ops/s
Iteration   8: 10834050.500 ops/s
Iteration   9: 10801661.783 ops/s
Iteration  10: 10827301.946 ops/s
Iteration  11: 10814752.536 ops/s
Iteration  12: 10827235.603 ops/s
Iteration  13: 10796123.329 ops/s
Iteration  14: 10847734.798 ops/s
Iteration  15: 10797193.127 ops/s
Iteration  16: 10843062.285 ops/s
Iteration  17: 10785796.669 ops/s
Iteration  18: 10822565.441 ops/s
Iteration  19: 10840056.192 ops/s
Iteration  20: 10808267.151 ops/s
Iteration  21: 10824181.714 ops/s
Iteration  22: 10836453.622 ops/s
Iteration  23: 10824979.161 ops/s
Iteration  24: 10723566.798 ops/s
Iteration  25: 10851730.556 ops/s
Iteration  26: 10787257.985 ops/s
Iteration  27: 10843957.634 ops/s
Iteration  28: 10834716.152 ops/s
Iteration  29: 10797682.036 ops/s
Iteration  30: 10793681.283 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_containsAllIterable":
  10808841.380 ±(99.9%) 21336.518 ops/s [Average]
  (min, avg, max) = (10723566.798, 10808841.380, 10851730.556), stdev = 31935.498
  CI (99.9%): [10787504.862, 10830177.897] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  10808841.380 ± 21336.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7228085.449 ops/s
# Warmup Iteration   2: 13656018.850 ops/s
# Warmup Iteration   3: 14463362.025 ops/s
# Warmup Iteration   4: 14473724.809 ops/s
# Warmup Iteration   5: 12175529.366 ops/s
# Warmup Iteration   6: 14504517.818 ops/s
# Warmup Iteration   7: 14549172.942 ops/s
# Warmup Iteration   8: 14529835.751 ops/s
# Warmup Iteration   9: 14505779.324 ops/s
# Warmup Iteration  10: 14482446.228 ops/s
# Warmup Iteration  11: 14521707.135 ops/s
# Warmup Iteration  12: 14480645.659 ops/s
# Warmup Iteration  13: 14447300.378 ops/s
# Warmup Iteration  14: 14536445.952 ops/s
# Warmup Iteration  15: 14496787.209 ops/s
# Warmup Iteration  16: 14519632.713 ops/s
# Warmup Iteration  17: 14485732.126 ops/s
# Warmup Iteration  18: 14520803.359 ops/s
# Warmup Iteration  19: 14523618.346 ops/s
# Warmup Iteration  20: 14480216.534 ops/s
# Warmup Iteration  21: 14552204.437 ops/s
# Warmup Iteration  22: 14544485.813 ops/s
# Warmup Iteration  23: 14562853.629 ops/s
# Warmup Iteration  24: 14534649.555 ops/s
# Warmup Iteration  25: 14536811.597 ops/s
# Warmup Iteration  26: 14529635.632 ops/s
# Warmup Iteration  27: 14534973.622 ops/s
# Warmup Iteration  28: 14535924.324 ops/s
# Warmup Iteration  29: 14522570.233 ops/s
# Warmup Iteration  30: 14577825.523 ops/s
Iteration   1: 14537712.923 ops/s
Iteration   2: 14555112.470 ops/s
Iteration   3: 14558747.257 ops/s
Iteration   4: 14531491.206 ops/s
Iteration   5: 14561177.691 ops/s
Iteration   6: 14535966.786 ops/s
Iteration   7: 14543766.368 ops/s
Iteration   8: 14471456.261 ops/s
Iteration   9: 14524007.429 ops/s
Iteration  10: 14503582.166 ops/s
Iteration  11: 14507550.723 ops/s
Iteration  12: 14524224.450 ops/s
Iteration  13: 14533339.204 ops/s
Iteration  14: 14564086.711 ops/s
Iteration  15: 14552756.034 ops/s
Iteration  16: 14506658.822 ops/s
Iteration  17: 14512921.300 ops/s
Iteration  18: 14530188.848 ops/s
Iteration  19: 14509436.894 ops/s
Iteration  20: 14507464.071 ops/s
Iteration  21: 14524916.595 ops/s
Iteration  22: 14466032.313 ops/s
Iteration  23: 14525731.232 ops/s
Iteration  24: 14536218.683 ops/s
Iteration  25: 14549693.814 ops/s
Iteration  26: 14522147.142 ops/s
Iteration  27: 14523744.565 ops/s
Iteration  28: 14557491.807 ops/s
Iteration  29: 14548645.996 ops/s
Iteration  30: 14532818.534 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_corresponds":
  14528636.277 ±(99.9%) 15980.586 ops/s [Average]
  (min, avg, max) = (14466032.313, 14528636.277, 14564086.711), stdev = 23918.990
  CI (99.9%): [14512655.691, 14544616.862] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_corresponds  thrpt   30  14528636.277 ± 15980.586  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22474560.075 ops/s
# Warmup Iteration   2: 43190251.771 ops/s
# Warmup Iteration   3: 37306341.429 ops/s
# Warmup Iteration   4: 43686787.589 ops/s
# Warmup Iteration   5: 43803579.508 ops/s
# Warmup Iteration   6: 43717127.465 ops/s
# Warmup Iteration   7: 43644200.177 ops/s
# Warmup Iteration   8: 43838699.990 ops/s
# Warmup Iteration   9: 43809544.926 ops/s
# Warmup Iteration  10: 43577145.946 ops/s
# Warmup Iteration  11: 43588445.035 ops/s
# Warmup Iteration  12: 43864322.617 ops/s
# Warmup Iteration  13: 43819378.270 ops/s
# Warmup Iteration  14: 43849223.901 ops/s
# Warmup Iteration  15: 43825749.509 ops/s
# Warmup Iteration  16: 43887152.664 ops/s
# Warmup Iteration  17: 43625469.979 ops/s
# Warmup Iteration  18: 43650018.855 ops/s
# Warmup Iteration  19: 43673235.914 ops/s
# Warmup Iteration  20: 43650803.980 ops/s
# Warmup Iteration  21: 43523687.353 ops/s
# Warmup Iteration  22: 43577611.365 ops/s
# Warmup Iteration  23: 43750433.829 ops/s
# Warmup Iteration  24: 43676821.599 ops/s
# Warmup Iteration  25: 43654051.961 ops/s
# Warmup Iteration  26: 43630147.233 ops/s
# Warmup Iteration  27: 43542598.846 ops/s
# Warmup Iteration  28: 43610724.624 ops/s
# Warmup Iteration  29: 43486835.170 ops/s
# Warmup Iteration  30: 43455937.377 ops/s
Iteration   1: 43668513.214 ops/s
Iteration   2: 43681140.339 ops/s
Iteration   3: 43647117.109 ops/s
Iteration   4: 43816042.202 ops/s
Iteration   5: 43172781.218 ops/s
Iteration   6: 43321558.432 ops/s
Iteration   7: 43776052.521 ops/s
Iteration   8: 43554483.001 ops/s
Iteration   9: 43854222.360 ops/s
Iteration  10: 43804259.343 ops/s
Iteration  11: 43573515.905 ops/s
Iteration  12: 43685907.243 ops/s
Iteration  13: 43336779.892 ops/s
Iteration  14: 43848138.740 ops/s
Iteration  15: 43795837.104 ops/s
Iteration  16: 43640338.994 ops/s
Iteration  17: 43398134.086 ops/s
Iteration  18: 43442284.332 ops/s
Iteration  19: 43598085.609 ops/s
Iteration  20: 43640160.745 ops/s
Iteration  21: 43762288.369 ops/s
Iteration  22: 43644341.774 ops/s
Iteration  23: 43749746.814 ops/s
Iteration  24: 43672094.870 ops/s
Iteration  25: 43817783.906 ops/s
Iteration  26: 43469212.497 ops/s
Iteration  27: 43495486.632 ops/s
Iteration  28: 43681921.114 ops/s
Iteration  29: 43481755.925 ops/s
Iteration  30: 43703929.682 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_count":
  43624463.799 ±(99.9%) 114430.960 ops/s [Average]
  (min, avg, max) = (43172781.218, 43624463.799, 43854222.360), stdev = 171274.886
  CI (99.9%): [43510032.839, 43738894.758] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_count  thrpt   30  43624463.799 ± 114430.960  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 792451.630 ops/s
# Warmup Iteration   2: 1638088.014 ops/s
# Warmup Iteration   3: 1784871.675 ops/s
# Warmup Iteration   4: 1792948.581 ops/s
# Warmup Iteration   5: 1484363.725 ops/s
# Warmup Iteration   6: 1795242.922 ops/s
# Warmup Iteration   7: 1791191.854 ops/s
# Warmup Iteration   8: 1791588.875 ops/s
# Warmup Iteration   9: 1798887.807 ops/s
# Warmup Iteration  10: 1795020.947 ops/s
# Warmup Iteration  11: 1792210.264 ops/s
# Warmup Iteration  12: 1788574.356 ops/s
# Warmup Iteration  13: 1800065.098 ops/s
# Warmup Iteration  14: 1797261.352 ops/s
# Warmup Iteration  15: 1791709.425 ops/s
# Warmup Iteration  16: 1795519.177 ops/s
# Warmup Iteration  17: 1800052.580 ops/s
# Warmup Iteration  18: 1788498.715 ops/s
# Warmup Iteration  19: 1784731.606 ops/s
# Warmup Iteration  20: 1790547.533 ops/s
# Warmup Iteration  21: 1788899.088 ops/s
# Warmup Iteration  22: 1796619.719 ops/s
# Warmup Iteration  23: 1791610.281 ops/s
# Warmup Iteration  24: 1796201.025 ops/s
# Warmup Iteration  25: 1786170.965 ops/s
# Warmup Iteration  26: 1790840.400 ops/s
# Warmup Iteration  27: 1792444.974 ops/s
# Warmup Iteration  28: 1784537.056 ops/s
# Warmup Iteration  29: 1795015.360 ops/s
# Warmup Iteration  30: 1795017.222 ops/s
Iteration   1: 1800667.274 ops/s
Iteration   2: 1789424.869 ops/s
Iteration   3: 1795143.438 ops/s
Iteration   4: 1799814.498 ops/s
Iteration   5: 1796718.783 ops/s
Iteration   6: 1795876.871 ops/s
Iteration   7: 1791465.460 ops/s
Iteration   8: 1803433.572 ops/s
Iteration   9: 1779218.498 ops/s
Iteration  10: 1784194.442 ops/s
Iteration  11: 1798629.782 ops/s
Iteration  12: 1797262.174 ops/s
Iteration  13: 1792577.185 ops/s
Iteration  14: 1796809.790 ops/s
Iteration  15: 1790805.729 ops/s
Iteration  16: 1797881.868 ops/s
Iteration  17: 1799783.768 ops/s
Iteration  18: 1788751.454 ops/s
Iteration  19: 1797015.239 ops/s
Iteration  20: 1802279.622 ops/s
Iteration  21: 1796174.219 ops/s
Iteration  22: 1798629.485 ops/s
Iteration  23: 1800723.967 ops/s
Iteration  24: 1794023.346 ops/s
Iteration  25: 1793411.289 ops/s
Iteration  26: 1780555.458 ops/s
Iteration  27: 1801411.874 ops/s
Iteration  28: 1796909.882 ops/s
Iteration  29: 1792104.867 ops/s
Iteration  30: 1797813.320 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_countBy":
  1794983.734 ±(99.9%) 3986.271 ops/s [Average]
  (min, avg, max) = (1779218.498, 1794983.734, 1803433.572), stdev = 5966.464
  CI (99.9%): [1790997.463, 1798970.006] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_countBy  thrpt   30  1794983.734 ± 3986.271  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 178540.441 ops/s
# Warmup Iteration   2: 277886.457 ops/s
# Warmup Iteration   3: 337911.503 ops/s
# Warmup Iteration   4: 335833.722 ops/s
# Warmup Iteration   5: 337568.330 ops/s
# Warmup Iteration   6: 337365.107 ops/s
# Warmup Iteration   7: 280700.241 ops/s
# Warmup Iteration   8: 338950.582 ops/s
# Warmup Iteration   9: 337795.487 ops/s
# Warmup Iteration  10: 338031.277 ops/s
# Warmup Iteration  11: 338893.396 ops/s
# Warmup Iteration  12: 337874.863 ops/s
# Warmup Iteration  13: 338273.887 ops/s
# Warmup Iteration  14: 337036.107 ops/s
# Warmup Iteration  15: 337999.473 ops/s
# Warmup Iteration  16: 338149.797 ops/s
# Warmup Iteration  17: 337660.845 ops/s
# Warmup Iteration  18: 338523.958 ops/s
# Warmup Iteration  19: 338572.407 ops/s
# Warmup Iteration  20: 338066.811 ops/s
# Warmup Iteration  21: 338808.259 ops/s
# Warmup Iteration  22: 338216.703 ops/s
# Warmup Iteration  23: 337320.959 ops/s
# Warmup Iteration  24: 338195.361 ops/s
# Warmup Iteration  25: 337696.191 ops/s
# Warmup Iteration  26: 338047.280 ops/s
# Warmup Iteration  27: 337381.384 ops/s
# Warmup Iteration  28: 338597.518 ops/s
# Warmup Iteration  29: 336962.526 ops/s
# Warmup Iteration  30: 337875.685 ops/s
Iteration   1: 338514.975 ops/s
Iteration   2: 337029.530 ops/s
Iteration   3: 338477.063 ops/s
Iteration   4: 337987.582 ops/s
Iteration   5: 339038.025 ops/s
Iteration   6: 337913.484 ops/s
Iteration   7: 338057.729 ops/s
Iteration   8: 338323.314 ops/s
Iteration   9: 337718.184 ops/s
Iteration  10: 336497.549 ops/s
Iteration  11: 338761.029 ops/s
Iteration  12: 337557.568 ops/s
Iteration  13: 339153.667 ops/s
Iteration  14: 338188.809 ops/s
Iteration  15: 339099.777 ops/s
Iteration  16: 337295.835 ops/s
Iteration  17: 337695.858 ops/s
Iteration  18: 339053.197 ops/s
Iteration  19: 337399.638 ops/s
Iteration  20: 338841.974 ops/s
Iteration  21: 338382.516 ops/s
Iteration  22: 337987.553 ops/s
Iteration  23: 337186.957 ops/s
Iteration  24: 336910.222 ops/s
Iteration  25: 338233.104 ops/s
Iteration  26: 337359.783 ops/s
Iteration  27: 337941.128 ops/s
Iteration  28: 337905.592 ops/s
Iteration  29: 338776.250 ops/s
Iteration  30: 337791.246 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_countByEach":
  338035.971 ±(99.9%) 466.878 ops/s [Average]
  (min, avg, max) = (336497.549, 338035.971, 339153.667), stdev = 698.801
  CI (99.9%): [337569.093, 338502.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_countByEach  thrpt   30  338035.971 ± 466.878  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 770487.541 ops/s
# Warmup Iteration   2: 1518641.511 ops/s
# Warmup Iteration   3: 1693856.600 ops/s
# Warmup Iteration   4: 1693404.845 ops/s
# Warmup Iteration   5: 1422798.665 ops/s
# Warmup Iteration   6: 1672120.358 ops/s
# Warmup Iteration   7: 1705129.919 ops/s
# Warmup Iteration   8: 1693031.191 ops/s
# Warmup Iteration   9: 1702758.587 ops/s
# Warmup Iteration  10: 1705446.421 ops/s
# Warmup Iteration  11: 1704825.447 ops/s
# Warmup Iteration  12: 1705103.751 ops/s
# Warmup Iteration  13: 1702911.939 ops/s
# Warmup Iteration  14: 1704346.232 ops/s
# Warmup Iteration  15: 1710288.910 ops/s
# Warmup Iteration  16: 1705524.535 ops/s
# Warmup Iteration  17: 1704067.782 ops/s
# Warmup Iteration  18: 1702081.698 ops/s
# Warmup Iteration  19: 1696035.002 ops/s
# Warmup Iteration  20: 1703173.460 ops/s
# Warmup Iteration  21: 1696977.171 ops/s
# Warmup Iteration  22: 1699927.294 ops/s
# Warmup Iteration  23: 1705548.985 ops/s
# Warmup Iteration  24: 1709393.031 ops/s
# Warmup Iteration  25: 1705724.063 ops/s
# Warmup Iteration  26: 1703298.488 ops/s
# Warmup Iteration  27: 1706021.639 ops/s
# Warmup Iteration  28: 1705423.034 ops/s
# Warmup Iteration  29: 1695750.100 ops/s
# Warmup Iteration  30: 1701712.024 ops/s
Iteration   1: 1679983.455 ops/s
Iteration   2: 1703997.054 ops/s
Iteration   3: 1706444.588 ops/s
Iteration   4: 1707478.338 ops/s
Iteration   5: 1706911.960 ops/s
Iteration   6: 1698205.200 ops/s
Iteration   7: 1705940.633 ops/s
Iteration   8: 1713464.141 ops/s
Iteration   9: 1710247.425 ops/s
Iteration  10: 1709084.212 ops/s
Iteration  11: 1687631.327 ops/s
Iteration  12: 1706145.111 ops/s
Iteration  13: 1709467.734 ops/s
Iteration  14: 1695650.532 ops/s
Iteration  15: 1711271.856 ops/s
Iteration  16: 1703682.151 ops/s
Iteration  17: 1687161.041 ops/s
Iteration  18: 1696649.980 ops/s
Iteration  19: 1709568.450 ops/s
Iteration  20: 1708185.710 ops/s
Iteration  21: 1686338.841 ops/s
Iteration  22: 1706775.422 ops/s
Iteration  23: 1709181.309 ops/s
Iteration  24: 1691726.831 ops/s
Iteration  25: 1705632.289 ops/s
Iteration  26: 1698227.357 ops/s
Iteration  27: 1704266.370 ops/s
Iteration  28: 1706492.652 ops/s
Iteration  29: 1690038.278 ops/s
Iteration  30: 1688062.479 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_countByWith":
  1701463.758 ±(99.9%) 6080.090 ops/s [Average]
  (min, avg, max) = (1679983.455, 1701463.758, 1713464.141), stdev = 9100.393
  CI (99.9%): [1695383.668, 1707543.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_countByWith  thrpt   30  1701463.758 ± 6080.090  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25128190.510 ops/s
# Warmup Iteration   2: 43602448.179 ops/s
# Warmup Iteration   3: 42471113.172 ops/s
# Warmup Iteration   4: 42336824.712 ops/s
# Warmup Iteration   5: 35941586.613 ops/s
# Warmup Iteration   6: 42380926.261 ops/s
# Warmup Iteration   7: 42429364.495 ops/s
# Warmup Iteration   8: 42544910.692 ops/s
# Warmup Iteration   9: 42485930.155 ops/s
# Warmup Iteration  10: 42432456.267 ops/s
# Warmup Iteration  11: 42486953.834 ops/s
# Warmup Iteration  12: 42380783.514 ops/s
# Warmup Iteration  13: 42421336.896 ops/s
# Warmup Iteration  14: 42433114.403 ops/s
# Warmup Iteration  15: 42321249.133 ops/s
# Warmup Iteration  16: 42554179.251 ops/s
# Warmup Iteration  17: 42524762.247 ops/s
# Warmup Iteration  18: 42433355.936 ops/s
# Warmup Iteration  19: 42431927.164 ops/s
# Warmup Iteration  20: 42458630.079 ops/s
# Warmup Iteration  21: 42526081.356 ops/s
# Warmup Iteration  22: 42349744.861 ops/s
# Warmup Iteration  23: 42534457.173 ops/s
# Warmup Iteration  24: 42491421.419 ops/s
# Warmup Iteration  25: 42407951.705 ops/s
# Warmup Iteration  26: 42276741.829 ops/s
# Warmup Iteration  27: 42235300.917 ops/s
# Warmup Iteration  28: 42551683.435 ops/s
# Warmup Iteration  29: 42391744.014 ops/s
# Warmup Iteration  30: 42540639.757 ops/s
Iteration   1: 42358767.559 ops/s
Iteration   2: 42544246.834 ops/s
Iteration   3: 42238348.470 ops/s
Iteration   4: 42484294.083 ops/s
Iteration   5: 42466189.697 ops/s
Iteration   6: 42442277.267 ops/s
Iteration   7: 42503795.064 ops/s
Iteration   8: 42509755.792 ops/s
Iteration   9: 42480949.633 ops/s
Iteration  10: 42230576.418 ops/s
Iteration  11: 42498856.578 ops/s
Iteration  12: 42262453.272 ops/s
Iteration  13: 42541706.765 ops/s
Iteration  14: 42506584.786 ops/s
Iteration  15: 42435151.446 ops/s
Iteration  16: 42305529.060 ops/s
Iteration  17: 42590523.790 ops/s
Iteration  18: 42445403.039 ops/s
Iteration  19: 42699707.688 ops/s
Iteration  20: 42615148.543 ops/s
Iteration  21: 42430822.300 ops/s
Iteration  22: 42598032.733 ops/s
Iteration  23: 42474142.158 ops/s
Iteration  24: 42417899.130 ops/s
Iteration  25: 42384463.855 ops/s
Iteration  26: 42171134.014 ops/s
Iteration  27: 42346843.111 ops/s
Iteration  28: 42453281.952 ops/s
Iteration  29: 42464087.407 ops/s
Iteration  30: 42496343.769 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_countWith":
  42446577.207 ±(99.9%) 80147.933 ops/s [Average]
  (min, avg, max) = (42171134.014, 42446577.207, 42699707.688), stdev = 119961.663
  CI (99.9%): [42366429.274, 42526725.140] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_countWith  thrpt   30  42446577.207 ± 80147.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16756043.224 ops/s
# Warmup Iteration   2: 32813115.029 ops/s
# Warmup Iteration   3: 30614046.228 ops/s
# Warmup Iteration   4: 29552584.895 ops/s
# Warmup Iteration   5: 32499010.199 ops/s
# Warmup Iteration   6: 32393201.238 ops/s
# Warmup Iteration   7: 32439417.397 ops/s
# Warmup Iteration   8: 32445966.910 ops/s
# Warmup Iteration   9: 32664534.221 ops/s
# Warmup Iteration  10: 32495247.811 ops/s
# Warmup Iteration  11: 32547395.437 ops/s
# Warmup Iteration  12: 32516542.403 ops/s
# Warmup Iteration  13: 32552690.789 ops/s
# Warmup Iteration  14: 32565237.662 ops/s
# Warmup Iteration  15: 32503559.649 ops/s
# Warmup Iteration  16: 32300038.154 ops/s
# Warmup Iteration  17: 32454867.200 ops/s
# Warmup Iteration  18: 32572036.012 ops/s
# Warmup Iteration  19: 32541329.253 ops/s
# Warmup Iteration  20: 32642216.884 ops/s
# Warmup Iteration  21: 32494306.711 ops/s
# Warmup Iteration  22: 32453269.015 ops/s
# Warmup Iteration  23: 32505994.261 ops/s
# Warmup Iteration  24: 32542780.136 ops/s
# Warmup Iteration  25: 32598517.374 ops/s
# Warmup Iteration  26: 32472543.488 ops/s
# Warmup Iteration  27: 32437482.150 ops/s
# Warmup Iteration  28: 32452490.763 ops/s
# Warmup Iteration  29: 32415266.602 ops/s
# Warmup Iteration  30: 32312921.069 ops/s
Iteration   1: 32496624.637 ops/s
Iteration   2: 32555311.791 ops/s
Iteration   3: 32471711.877 ops/s
Iteration   4: 32486605.110 ops/s
Iteration   5: 32426606.060 ops/s
Iteration   6: 32638204.398 ops/s
Iteration   7: 32537506.339 ops/s
Iteration   8: 32491583.166 ops/s
Iteration   9: 32544851.055 ops/s
Iteration  10: 32581802.664 ops/s
Iteration  11: 32436598.624 ops/s
Iteration  12: 32482928.679 ops/s
Iteration  13: 32581597.351 ops/s
Iteration  14: 32541116.680 ops/s
Iteration  15: 32552267.576 ops/s
Iteration  16: 32200405.178 ops/s
Iteration  17: 32304295.006 ops/s
Iteration  18: 32371633.385 ops/s
Iteration  19: 32563692.728 ops/s
Iteration  20: 32565022.846 ops/s
Iteration  21: 32516092.100 ops/s
Iteration  22: 32454765.012 ops/s
Iteration  23: 32453335.763 ops/s
Iteration  24: 32411389.391 ops/s
Iteration  25: 32474257.773 ops/s
Iteration  26: 32627882.910 ops/s
Iteration  27: 32255294.576 ops/s
Iteration  28: 32566777.004 ops/s
Iteration  29: 32539238.348 ops/s
Iteration  30: 32475162.736 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detect":
  32486818.692 ±(99.9%) 67677.186 ops/s [Average]
  (min, avg, max) = (32200405.178, 32486818.692, 32638204.398), stdev = 101296.034
  CI (99.9%): [32419141.506, 32554495.878] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_detect  thrpt   30  32486818.692 ± 67677.186  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17501596.130 ops/s
# Warmup Iteration   2: 34763556.741 ops/s
# Warmup Iteration   3: 29717639.728 ops/s
# Warmup Iteration   4: 33867589.893 ops/s
# Warmup Iteration   5: 34299043.724 ops/s
# Warmup Iteration   6: 34246438.695 ops/s
# Warmup Iteration   7: 34127588.548 ops/s
# Warmup Iteration   8: 34445999.709 ops/s
# Warmup Iteration   9: 34397029.297 ops/s
# Warmup Iteration  10: 34383166.853 ops/s
# Warmup Iteration  11: 34423780.269 ops/s
# Warmup Iteration  12: 34387689.681 ops/s
# Warmup Iteration  13: 34408192.031 ops/s
# Warmup Iteration  14: 34417617.809 ops/s
# Warmup Iteration  15: 34451947.767 ops/s
# Warmup Iteration  16: 34388882.014 ops/s
# Warmup Iteration  17: 34223329.822 ops/s
# Warmup Iteration  18: 34403194.420 ops/s
# Warmup Iteration  19: 34343938.636 ops/s
# Warmup Iteration  20: 34334436.723 ops/s
# Warmup Iteration  21: 34397400.203 ops/s
# Warmup Iteration  22: 34359809.614 ops/s
# Warmup Iteration  23: 34330394.560 ops/s
# Warmup Iteration  24: 34342695.505 ops/s
# Warmup Iteration  25: 34370933.724 ops/s
# Warmup Iteration  26: 34376399.850 ops/s
# Warmup Iteration  27: 34401535.425 ops/s
# Warmup Iteration  28: 34262496.110 ops/s
# Warmup Iteration  29: 34444226.592 ops/s
# Warmup Iteration  30: 34404527.214 ops/s
Iteration   1: 34403430.793 ops/s
Iteration   2: 34491425.506 ops/s
Iteration   3: 34315102.465 ops/s
Iteration   4: 34388690.468 ops/s
Iteration   5: 34381145.768 ops/s
Iteration   6: 34488390.659 ops/s
Iteration   7: 34404471.679 ops/s
Iteration   8: 34392794.231 ops/s
Iteration   9: 34303329.970 ops/s
Iteration  10: 34314241.977 ops/s
Iteration  11: 34201962.089 ops/s
Iteration  12: 34290896.023 ops/s
Iteration  13: 34413628.974 ops/s
Iteration  14: 34192246.607 ops/s
Iteration  15: 34413319.078 ops/s
Iteration  16: 34476688.648 ops/s
Iteration  17: 34474325.391 ops/s
Iteration  18: 34369917.426 ops/s
Iteration  19: 34407348.772 ops/s
Iteration  20: 34421578.860 ops/s
Iteration  21: 34489359.987 ops/s
Iteration  22: 34297872.729 ops/s
Iteration  23: 34424584.955 ops/s
Iteration  24: 34377686.351 ops/s
Iteration  25: 34474806.949 ops/s
Iteration  26: 34115915.743 ops/s
Iteration  27: 34280947.397 ops/s
Iteration  28: 34339734.090 ops/s
Iteration  29: 34284333.740 ops/s
Iteration  30: 34391415.557 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectIfNone":
  34367386.429 ±(99.9%) 62439.449 ops/s [Average]
  (min, avg, max) = (34115915.743, 34367386.429, 34491425.506), stdev = 93456.434
  CI (99.9%): [34304946.981, 34429825.878] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_detectIfNone  thrpt   30  34367386.429 ± 62439.449  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 100893373.001 ops/s
# Warmup Iteration   2: 193623958.619 ops/s
# Warmup Iteration   3: 166869066.566 ops/s
# Warmup Iteration   4: 141528117.367 ops/s
# Warmup Iteration   5: 166854626.238 ops/s
# Warmup Iteration   6: 166709542.489 ops/s
# Warmup Iteration   7: 167046268.112 ops/s
# Warmup Iteration   8: 166671191.746 ops/s
# Warmup Iteration   9: 166846463.700 ops/s
# Warmup Iteration  10: 166873432.440 ops/s
# Warmup Iteration  11: 166923989.801 ops/s
# Warmup Iteration  12: 167002661.118 ops/s
# Warmup Iteration  13: 166881756.202 ops/s
# Warmup Iteration  14: 166824365.311 ops/s
# Warmup Iteration  15: 166307667.535 ops/s
# Warmup Iteration  16: 166492786.043 ops/s
# Warmup Iteration  17: 166485621.261 ops/s
# Warmup Iteration  18: 167017042.065 ops/s
# Warmup Iteration  19: 166663298.913 ops/s
# Warmup Iteration  20: 167067352.155 ops/s
# Warmup Iteration  21: 166807146.370 ops/s
# Warmup Iteration  22: 167068384.192 ops/s
# Warmup Iteration  23: 167155669.752 ops/s
# Warmup Iteration  24: 166700837.849 ops/s
# Warmup Iteration  25: 166761628.835 ops/s
# Warmup Iteration  26: 166131491.617 ops/s
# Warmup Iteration  27: 166933732.246 ops/s
# Warmup Iteration  28: 166839857.054 ops/s
# Warmup Iteration  29: 167215364.268 ops/s
# Warmup Iteration  30: 166915809.002 ops/s
Iteration   1: 166992092.956 ops/s
Iteration   2: 166243306.371 ops/s
Iteration   3: 166614746.754 ops/s
Iteration   4: 166837559.000 ops/s
Iteration   5: 167281816.774 ops/s
Iteration   6: 167200764.023 ops/s
Iteration   7: 166736282.986 ops/s
Iteration   8: 167115034.417 ops/s
Iteration   9: 167038802.379 ops/s
Iteration  10: 166918494.461 ops/s
Iteration  11: 166649030.748 ops/s
Iteration  12: 167023324.502 ops/s
Iteration  13: 166848344.093 ops/s
Iteration  14: 165844191.767 ops/s
Iteration  15: 167131319.538 ops/s
Iteration  16: 167191770.451 ops/s
Iteration  17: 166604140.339 ops/s
Iteration  18: 165834705.641 ops/s
Iteration  19: 166185104.325 ops/s
Iteration  20: 166598837.574 ops/s
Iteration  21: 165706027.828 ops/s
Iteration  22: 167116762.210 ops/s
Iteration  23: 167069671.541 ops/s
Iteration  24: 167080775.375 ops/s
Iteration  25: 166409379.353 ops/s
Iteration  26: 166842634.231 ops/s
Iteration  27: 166650996.094 ops/s
Iteration  28: 166395637.189 ops/s
Iteration  29: 166365056.494 ops/s
Iteration  30: 167183237.264 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectIndex":
  166723661.556 ±(99.9%) 292021.204 ops/s [Average]
  (min, avg, max) = (165706027.828, 166723661.556, 167281816.774), stdev = 437083.623
  CI (99.9%): [166431640.353, 167015682.760] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_detectIndex  thrpt   30  166723661.556 ± 292021.204  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 100279061.592 ops/s
# Warmup Iteration   2: 195322865.918 ops/s
# Warmup Iteration   3: 166239049.373 ops/s
# Warmup Iteration   4: 140576091.589 ops/s
# Warmup Iteration   5: 166974771.939 ops/s
# Warmup Iteration   6: 166383510.227 ops/s
# Warmup Iteration   7: 166449833.238 ops/s
# Warmup Iteration   8: 165927130.537 ops/s
# Warmup Iteration   9: 166367901.387 ops/s
# Warmup Iteration  10: 166586737.028 ops/s
# Warmup Iteration  11: 167110019.791 ops/s
# Warmup Iteration  12: 166367721.070 ops/s
# Warmup Iteration  13: 166538016.302 ops/s
# Warmup Iteration  14: 167031350.771 ops/s
# Warmup Iteration  15: 166958596.047 ops/s
# Warmup Iteration  16: 167049978.112 ops/s
# Warmup Iteration  17: 166964669.414 ops/s
# Warmup Iteration  18: 166129890.736 ops/s
# Warmup Iteration  19: 166951655.302 ops/s
# Warmup Iteration  20: 166250955.952 ops/s
# Warmup Iteration  21: 166635796.521 ops/s
# Warmup Iteration  22: 166872367.115 ops/s
# Warmup Iteration  23: 167162839.037 ops/s
# Warmup Iteration  24: 166708268.064 ops/s
# Warmup Iteration  25: 166611784.433 ops/s
# Warmup Iteration  26: 166728889.309 ops/s
# Warmup Iteration  27: 166931732.191 ops/s
# Warmup Iteration  28: 166938910.598 ops/s
# Warmup Iteration  29: 166742256.108 ops/s
# Warmup Iteration  30: 166730954.687 ops/s
Iteration   1: 167213695.832 ops/s
Iteration   2: 167037785.089 ops/s
Iteration   3: 166676507.084 ops/s
Iteration   4: 166930289.027 ops/s
Iteration   5: 166687440.718 ops/s
Iteration   6: 166666299.953 ops/s
Iteration   7: 167086983.444 ops/s
Iteration   8: 167076500.992 ops/s
Iteration   9: 167085270.329 ops/s
Iteration  10: 166973219.004 ops/s
Iteration  11: 166546853.954 ops/s
Iteration  12: 166283965.476 ops/s
Iteration  13: 166730627.359 ops/s
Iteration  14: 166432391.235 ops/s
Iteration  15: 166037573.354 ops/s
Iteration  16: 166472378.639 ops/s
Iteration  17: 166981860.972 ops/s
Iteration  18: 166467603.717 ops/s
Iteration  19: 166970123.353 ops/s
Iteration  20: 166869079.507 ops/s
Iteration  21: 166527280.594 ops/s
Iteration  22: 166213352.969 ops/s
Iteration  23: 165881891.863 ops/s
Iteration  24: 165738825.865 ops/s
Iteration  25: 166386867.634 ops/s
Iteration  26: 166341602.096 ops/s
Iteration  27: 166555491.660 ops/s
Iteration  28: 166459745.905 ops/s
Iteration  29: 166261065.031 ops/s
Iteration  30: 166889063.692 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectLastIndex":
  166616054.545 ±(99.9%) 251950.464 ops/s [Average]
  (min, avg, max) = (165738825.865, 166616054.545, 167213695.832), stdev = 377107.622
  CI (99.9%): [166364104.081, 166868005.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt          Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  166616054.545 ± 251950.464  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8746038.872 ops/s
# Warmup Iteration   2: 17919592.455 ops/s
# Warmup Iteration   3: 15275667.709 ops/s
# Warmup Iteration   4: 18151878.697 ops/s
# Warmup Iteration   5: 18209295.906 ops/s
# Warmup Iteration   6: 17942291.660 ops/s
# Warmup Iteration   7: 18259617.126 ops/s
# Warmup Iteration   8: 18207294.110 ops/s
# Warmup Iteration   9: 18168214.314 ops/s
# Warmup Iteration  10: 18171052.395 ops/s
# Warmup Iteration  11: 18224501.699 ops/s
# Warmup Iteration  12: 18159519.075 ops/s
# Warmup Iteration  13: 18211199.537 ops/s
# Warmup Iteration  14: 18227914.275 ops/s
# Warmup Iteration  15: 18175659.602 ops/s
# Warmup Iteration  16: 18172644.497 ops/s
# Warmup Iteration  17: 18220351.867 ops/s
# Warmup Iteration  18: 18115546.874 ops/s
# Warmup Iteration  19: 18093633.304 ops/s
# Warmup Iteration  20: 18111930.665 ops/s
# Warmup Iteration  21: 18210313.368 ops/s
# Warmup Iteration  22: 18166299.818 ops/s
# Warmup Iteration  23: 18191449.876 ops/s
# Warmup Iteration  24: 18139496.712 ops/s
# Warmup Iteration  25: 18131716.430 ops/s
# Warmup Iteration  26: 18250962.008 ops/s
# Warmup Iteration  27: 18222118.713 ops/s
# Warmup Iteration  28: 18226605.338 ops/s
# Warmup Iteration  29: 18208854.569 ops/s
# Warmup Iteration  30: 18202700.670 ops/s
Iteration   1: 18228350.895 ops/s
Iteration   2: 18146951.258 ops/s
Iteration   3: 18164257.881 ops/s
Iteration   4: 18126728.179 ops/s
Iteration   5: 18109957.191 ops/s
Iteration   6: 18202357.389 ops/s
Iteration   7: 18207620.910 ops/s
Iteration   8: 18190784.965 ops/s
Iteration   9: 18269834.892 ops/s
Iteration  10: 18277718.073 ops/s
Iteration  11: 18254266.159 ops/s
Iteration  12: 18187088.136 ops/s
Iteration  13: 18103338.861 ops/s
Iteration  14: 18237781.727 ops/s
Iteration  15: 18114323.570 ops/s
Iteration  16: 18256598.518 ops/s
Iteration  17: 18111050.878 ops/s
Iteration  18: 18209771.182 ops/s
Iteration  19: 18073460.721 ops/s
Iteration  20: 18197482.812 ops/s
Iteration  21: 17248942.582 ops/s
Iteration  22: 18180788.136 ops/s
Iteration  23: 18136997.526 ops/s
Iteration  24: 18187271.715 ops/s
Iteration  25: 18180508.472 ops/s
Iteration  26: 18195237.745 ops/s
Iteration  27: 18194277.647 ops/s
Iteration  28: 18175011.976 ops/s
Iteration  29: 18134643.268 ops/s
Iteration  30: 18143335.825 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectWith":
  18148224.636 ±(99.9%) 118676.996 ops/s [Average]
  (min, avg, max) = (17248942.582, 18148224.636, 18277718.073), stdev = 177630.155
  CI (99.9%): [18029547.640, 18266901.633] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_detectWith  thrpt   30  18148224.636 ± 118676.996  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10534278.838 ops/s
# Warmup Iteration   2: 20827537.864 ops/s
# Warmup Iteration   3: 20619705.416 ops/s
# Warmup Iteration   4: 18572827.358 ops/s
# Warmup Iteration   5: 21212647.224 ops/s
# Warmup Iteration   6: 21045343.949 ops/s
# Warmup Iteration   7: 21198139.751 ops/s
# Warmup Iteration   8: 21202428.512 ops/s
# Warmup Iteration   9: 21166122.649 ops/s
# Warmup Iteration  10: 21127770.488 ops/s
# Warmup Iteration  11: 21184570.424 ops/s
# Warmup Iteration  12: 21158384.190 ops/s
# Warmup Iteration  13: 21187525.756 ops/s
# Warmup Iteration  14: 21172887.647 ops/s
# Warmup Iteration  15: 21163888.440 ops/s
# Warmup Iteration  16: 21151533.809 ops/s
# Warmup Iteration  17: 21208075.678 ops/s
# Warmup Iteration  18: 21244559.569 ops/s
# Warmup Iteration  19: 21178292.124 ops/s
# Warmup Iteration  20: 21197808.798 ops/s
# Warmup Iteration  21: 21256908.730 ops/s
# Warmup Iteration  22: 21201795.693 ops/s
# Warmup Iteration  23: 21094171.534 ops/s
# Warmup Iteration  24: 21225754.886 ops/s
# Warmup Iteration  25: 21109051.653 ops/s
# Warmup Iteration  26: 21186207.428 ops/s
# Warmup Iteration  27: 21161315.394 ops/s
# Warmup Iteration  28: 21152903.199 ops/s
# Warmup Iteration  29: 21162620.766 ops/s
# Warmup Iteration  30: 21122854.780 ops/s
Iteration   1: 21192134.432 ops/s
Iteration   2: 21166878.540 ops/s
Iteration   3: 21233698.571 ops/s
Iteration   4: 21141991.183 ops/s
Iteration   5: 21268290.934 ops/s
Iteration   6: 21184413.203 ops/s
Iteration   7: 21241250.279 ops/s
Iteration   8: 21179411.066 ops/s
Iteration   9: 21230418.016 ops/s
Iteration  10: 21281688.348 ops/s
Iteration  11: 21265222.574 ops/s
Iteration  12: 21169132.893 ops/s
Iteration  13: 21184774.325 ops/s
Iteration  14: 21170662.380 ops/s
Iteration  15: 21179691.337 ops/s
Iteration  16: 21061054.579 ops/s
Iteration  17: 21157573.149 ops/s
Iteration  18: 21201295.336 ops/s
Iteration  19: 21159487.794 ops/s
Iteration  20: 21219152.011 ops/s
Iteration  21: 21177998.898 ops/s
Iteration  22: 21127436.998 ops/s
Iteration  23: 21136800.492 ops/s
Iteration  24: 21229818.667 ops/s
Iteration  25: 21151837.698 ops/s
Iteration  26: 21175271.092 ops/s
Iteration  27: 21158043.332 ops/s
Iteration  28: 21196636.428 ops/s
Iteration  29: 21015278.896 ops/s
Iteration  30: 21226574.289 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_detectWithIfNone":
  21182797.258 ±(99.9%) 37508.572 ops/s [Average]
  (min, avg, max) = (21015278.896, 21182797.258, 21281688.348), stdev = 56141.070
  CI (99.9%): [21145288.686, 21220305.830] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  21182797.258 ± 37508.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1895508.837 ops/s
# Warmup Iteration   2: 4022026.787 ops/s
# Warmup Iteration   3: 4151261.695 ops/s
# Warmup Iteration   4: 3960603.261 ops/s
# Warmup Iteration   5: 3698599.770 ops/s
# Warmup Iteration   6: 4132201.492 ops/s
# Warmup Iteration   7: 4153905.235 ops/s
# Warmup Iteration   8: 4153709.513 ops/s
# Warmup Iteration   9: 4149191.745 ops/s
# Warmup Iteration  10: 4155867.244 ops/s
# Warmup Iteration  11: 4161778.076 ops/s
# Warmup Iteration  12: 4149200.899 ops/s
# Warmup Iteration  13: 4176712.283 ops/s
# Warmup Iteration  14: 4158623.758 ops/s
# Warmup Iteration  15: 4167421.571 ops/s
# Warmup Iteration  16: 4166742.063 ops/s
# Warmup Iteration  17: 4167567.210 ops/s
# Warmup Iteration  18: 4154098.154 ops/s
# Warmup Iteration  19: 4155361.233 ops/s
# Warmup Iteration  20: 4140050.797 ops/s
# Warmup Iteration  21: 4157937.003 ops/s
# Warmup Iteration  22: 4154407.051 ops/s
# Warmup Iteration  23: 4168680.403 ops/s
# Warmup Iteration  24: 4149771.248 ops/s
# Warmup Iteration  25: 4148533.670 ops/s
# Warmup Iteration  26: 4173369.372 ops/s
# Warmup Iteration  27: 4179718.725 ops/s
# Warmup Iteration  28: 4162074.786 ops/s
# Warmup Iteration  29: 4171715.027 ops/s
# Warmup Iteration  30: 4159567.976 ops/s
Iteration   1: 4161413.542 ops/s
Iteration   2: 4175988.342 ops/s
Iteration   3: 4146602.679 ops/s
Iteration   4: 4163019.011 ops/s
Iteration   5: 4170693.199 ops/s
Iteration   6: 4184422.553 ops/s
Iteration   7: 4169023.176 ops/s
Iteration   8: 4178227.090 ops/s
Iteration   9: 4170880.721 ops/s
Iteration  10: 4169840.063 ops/s
Iteration  11: 4162926.470 ops/s
Iteration  12: 4160421.289 ops/s
Iteration  13: 4152594.686 ops/s
Iteration  14: 4167592.861 ops/s
Iteration  15: 4162874.350 ops/s
Iteration  16: 4140810.492 ops/s
Iteration  17: 4146198.392 ops/s
Iteration  18: 4147913.030 ops/s
Iteration  19: 4145729.304 ops/s
Iteration  20: 4158976.383 ops/s
Iteration  21: 4148437.514 ops/s
Iteration  22: 4166766.471 ops/s
Iteration  23: 4176772.861 ops/s
Iteration  24: 4160632.852 ops/s
Iteration  25: 4169558.461 ops/s
Iteration  26: 4138361.398 ops/s
Iteration  27: 4149676.094 ops/s
Iteration  28: 4161971.957 ops/s
Iteration  29: 4143302.266 ops/s
Iteration  30: 4155730.528 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_distinct":
  4160245.268 ±(99.9%) 8089.423 ops/s [Average]
  (min, avg, max) = (4138361.398, 4160245.268, 4184422.553), stdev = 12107.869
  CI (99.9%): [4152155.845, 4168334.691] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_distinct  thrpt   30  4160245.268 ± 8089.423  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4546361.772 ops/s
# Warmup Iteration   2: 10182320.533 ops/s
# Warmup Iteration   3: 10244975.679 ops/s
# Warmup Iteration   4: 8665809.372 ops/s
# Warmup Iteration   5: 10259796.174 ops/s
# Warmup Iteration   6: 10218384.357 ops/s
# Warmup Iteration   7: 10195372.851 ops/s
# Warmup Iteration   8: 10243222.693 ops/s
# Warmup Iteration   9: 10214324.492 ops/s
# Warmup Iteration  10: 10251161.642 ops/s
# Warmup Iteration  11: 10275235.584 ops/s
# Warmup Iteration  12: 10248106.544 ops/s
# Warmup Iteration  13: 10256615.445 ops/s
# Warmup Iteration  14: 10249641.108 ops/s
# Warmup Iteration  15: 10278059.661 ops/s
# Warmup Iteration  16: 10273490.717 ops/s
# Warmup Iteration  17: 10275580.268 ops/s
# Warmup Iteration  18: 10255593.894 ops/s
# Warmup Iteration  19: 10266536.890 ops/s
# Warmup Iteration  20: 10270912.203 ops/s
# Warmup Iteration  21: 10257179.589 ops/s
# Warmup Iteration  22: 10256049.509 ops/s
# Warmup Iteration  23: 10265644.779 ops/s
# Warmup Iteration  24: 10247698.555 ops/s
# Warmup Iteration  25: 10288622.037 ops/s
# Warmup Iteration  26: 10257037.617 ops/s
# Warmup Iteration  27: 10254359.520 ops/s
# Warmup Iteration  28: 10275407.357 ops/s
# Warmup Iteration  29: 10238808.250 ops/s
# Warmup Iteration  30: 10255789.266 ops/s
Iteration   1: 10265504.468 ops/s
Iteration   2: 10266169.186 ops/s
Iteration   3: 10270593.244 ops/s
Iteration   4: 10264438.323 ops/s
Iteration   5: 10210020.438 ops/s
Iteration   6: 10280935.072 ops/s
Iteration   7: 10265503.315 ops/s
Iteration   8: 10260623.429 ops/s
Iteration   9: 10220117.101 ops/s
Iteration  10: 10298983.507 ops/s
Iteration  11: 10235102.556 ops/s
Iteration  12: 10279040.882 ops/s
Iteration  13: 10216317.122 ops/s
Iteration  14: 10231335.806 ops/s
Iteration  15: 10234401.785 ops/s
Iteration  16: 10223168.542 ops/s
Iteration  17: 10207768.015 ops/s
Iteration  18: 10274388.165 ops/s
Iteration  19: 10273790.132 ops/s
Iteration  20: 10287359.686 ops/s
Iteration  21: 10284425.757 ops/s
Iteration  22: 10249940.225 ops/s
Iteration  23: 10269568.169 ops/s
Iteration  24: 10244979.027 ops/s
Iteration  25: 10275006.463 ops/s
Iteration  26: 10243798.669 ops/s
Iteration  27: 10286745.839 ops/s
Iteration  28: 10227791.669 ops/s
Iteration  29: 10260958.608 ops/s
Iteration  30: 10263021.958 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_distinctBy":
  10255726.572 ±(99.9%) 16917.146 ops/s [Average]
  (min, avg, max) = (10207768.015, 10255726.572, 10298983.507), stdev = 25320.790
  CI (99.9%): [10238809.426, 10272643.718] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_distinctBy  thrpt   30  10255726.572 ± 16917.146  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5534121.521 ops/s
# Warmup Iteration   2: 12279908.031 ops/s
# Warmup Iteration   3: 12211538.602 ops/s
# Warmup Iteration   4: 10294731.237 ops/s
# Warmup Iteration   5: 12264391.249 ops/s
# Warmup Iteration   6: 12235814.836 ops/s
# Warmup Iteration   7: 12282602.888 ops/s
# Warmup Iteration   8: 12308119.505 ops/s
# Warmup Iteration   9: 12314082.459 ops/s
# Warmup Iteration  10: 12271544.217 ops/s
# Warmup Iteration  11: 12268026.595 ops/s
# Warmup Iteration  12: 12257953.053 ops/s
# Warmup Iteration  13: 12270947.041 ops/s
# Warmup Iteration  14: 12250226.401 ops/s
# Warmup Iteration  15: 12245628.668 ops/s
# Warmup Iteration  16: 12297411.583 ops/s
# Warmup Iteration  17: 12275473.054 ops/s
# Warmup Iteration  18: 12245885.529 ops/s
# Warmup Iteration  19: 12251930.571 ops/s
# Warmup Iteration  20: 12253796.948 ops/s
# Warmup Iteration  21: 12241291.510 ops/s
# Warmup Iteration  22: 12265042.192 ops/s
# Warmup Iteration  23: 12292102.210 ops/s
# Warmup Iteration  24: 12290375.458 ops/s
# Warmup Iteration  25: 12302639.850 ops/s
# Warmup Iteration  26: 12243461.449 ops/s
# Warmup Iteration  27: 12268897.437 ops/s
# Warmup Iteration  28: 12297183.449 ops/s
# Warmup Iteration  29: 12274057.525 ops/s
# Warmup Iteration  30: 12277309.063 ops/s
Iteration   1: 12306078.520 ops/s
Iteration   2: 12251783.872 ops/s
Iteration   3: 12223044.929 ops/s
Iteration   4: 12266899.846 ops/s
Iteration   5: 12273905.900 ops/s
Iteration   6: 12268910.372 ops/s
Iteration   7: 12278024.073 ops/s
Iteration   8: 12291294.513 ops/s
Iteration   9: 12247215.386 ops/s
Iteration  10: 12249272.622 ops/s
Iteration  11: 12276082.106 ops/s
Iteration  12: 12262342.470 ops/s
Iteration  13: 12298672.293 ops/s
Iteration  14: 12290033.203 ops/s
Iteration  15: 12249333.971 ops/s
Iteration  16: 12295302.058 ops/s
Iteration  17: 12214892.603 ops/s
Iteration  18: 12278820.977 ops/s
Iteration  19: 12259237.911 ops/s
Iteration  20: 12285173.999 ops/s
Iteration  21: 12312017.813 ops/s
Iteration  22: 12281253.550 ops/s
Iteration  23: 12267747.320 ops/s
Iteration  24: 12295579.426 ops/s
Iteration  25: 12291154.846 ops/s
Iteration  26: 12279897.242 ops/s
Iteration  27: 12304741.691 ops/s
Iteration  28: 12300724.476 ops/s
Iteration  29: 12251123.463 ops/s
Iteration  30: 12297233.195 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  12274926.488 ±(99.9%) 16078.717 ops/s [Average]
  (min, avg, max) = (12214892.603, 12274926.488, 12312017.813), stdev = 24065.868
  CI (99.9%): [12258847.771, 12291005.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  12274926.488 ± 16078.717  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1038630.272 ops/s
# Warmup Iteration   2: 1125379.987 ops/s
# Warmup Iteration   3: 1573728.083 ops/s
# Warmup Iteration   4: 1573303.174 ops/s
# Warmup Iteration   5: 1556359.722 ops/s
# Warmup Iteration   6: 1574274.122 ops/s
# Warmup Iteration   7: 1573275.044 ops/s
# Warmup Iteration   8: 1571800.811 ops/s
# Warmup Iteration   9: 1575161.969 ops/s
# Warmup Iteration  10: 1569234.333 ops/s
# Warmup Iteration  11: 1282288.121 ops/s
# Warmup Iteration  12: 1576297.188 ops/s
# Warmup Iteration  13: 1572335.002 ops/s
# Warmup Iteration  14: 1572528.324 ops/s
# Warmup Iteration  15: 1574862.282 ops/s
# Warmup Iteration  16: 1576802.354 ops/s
# Warmup Iteration  17: 1573080.305 ops/s
# Warmup Iteration  18: 1576749.033 ops/s
# Warmup Iteration  19: 1573955.888 ops/s
# Warmup Iteration  20: 1571876.712 ops/s
# Warmup Iteration  21: 1573336.277 ops/s
# Warmup Iteration  22: 1577121.639 ops/s
# Warmup Iteration  23: 1565871.935 ops/s
# Warmup Iteration  24: 1574605.843 ops/s
# Warmup Iteration  25: 1569032.117 ops/s
# Warmup Iteration  26: 1568138.413 ops/s
# Warmup Iteration  27: 1569512.392 ops/s
# Warmup Iteration  28: 1565580.067 ops/s
# Warmup Iteration  29: 1576048.991 ops/s
# Warmup Iteration  30: 1567963.610 ops/s
Iteration   1: 1576530.966 ops/s
Iteration   2: 1570103.062 ops/s
Iteration   3: 1573281.010 ops/s
Iteration   4: 1569584.583 ops/s
Iteration   5: 1576354.975 ops/s
Iteration   6: 1558743.602 ops/s
Iteration   7: 1569268.964 ops/s
Iteration   8: 1574836.806 ops/s
Iteration   9: 1575783.954 ops/s
Iteration  10: 1558171.208 ops/s
Iteration  11: 1569686.283 ops/s
Iteration  12: 1574628.608 ops/s
Iteration  13: 1577048.600 ops/s
Iteration  14: 1568851.068 ops/s
Iteration  15: 1577355.701 ops/s
Iteration  16: 1564304.369 ops/s
Iteration  17: 1573161.408 ops/s
Iteration  18: 1568296.876 ops/s
Iteration  19: 1576551.413 ops/s
Iteration  20: 1575764.988 ops/s
Iteration  21: 1575599.708 ops/s
Iteration  22: 1567248.559 ops/s
Iteration  23: 1568335.818 ops/s
Iteration  24: 1572036.238 ops/s
Iteration  25: 1572177.213 ops/s
Iteration  26: 1572599.405 ops/s
Iteration  27: 1574588.168 ops/s
Iteration  28: 1575615.857 ops/s
Iteration  29: 1572116.740 ops/s
Iteration  30: 1577040.986 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_drop":
  1571855.571 ±(99.9%) 3344.735 ops/s [Average]
  (min, avg, max) = (1558171.208, 1571855.571, 1577355.701), stdev = 5006.243
  CI (99.9%): [1568510.836, 1575200.306] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_drop  thrpt   30  1571855.571 ± 3344.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4778042.684 ops/s
# Warmup Iteration   2: 10644731.759 ops/s
# Warmup Iteration   3: 10603413.161 ops/s
# Warmup Iteration   4: 8913455.428 ops/s
# Warmup Iteration   5: 10608774.224 ops/s
# Warmup Iteration   6: 10602822.715 ops/s
# Warmup Iteration   7: 10599992.955 ops/s
# Warmup Iteration   8: 10604555.357 ops/s
# Warmup Iteration   9: 10618769.408 ops/s
# Warmup Iteration  10: 10601497.783 ops/s
# Warmup Iteration  11: 10615848.879 ops/s
# Warmup Iteration  12: 10567057.027 ops/s
# Warmup Iteration  13: 10588361.987 ops/s
# Warmup Iteration  14: 10606923.194 ops/s
# Warmup Iteration  15: 10592833.553 ops/s
# Warmup Iteration  16: 10557491.313 ops/s
# Warmup Iteration  17: 10587672.447 ops/s
# Warmup Iteration  18: 10576750.580 ops/s
# Warmup Iteration  19: 10636125.085 ops/s
# Warmup Iteration  20: 10595141.640 ops/s
# Warmup Iteration  21: 10605473.438 ops/s
# Warmup Iteration  22: 10514634.098 ops/s
# Warmup Iteration  23: 10623605.240 ops/s
# Warmup Iteration  24: 10596499.659 ops/s
# Warmup Iteration  25: 10631318.981 ops/s
# Warmup Iteration  26: 10592634.791 ops/s
# Warmup Iteration  27: 10624029.624 ops/s
# Warmup Iteration  28: 10581210.421 ops/s
# Warmup Iteration  29: 10605442.997 ops/s
# Warmup Iteration  30: 10579271.482 ops/s
Iteration   1: 10596581.875 ops/s
Iteration   2: 10563093.374 ops/s
Iteration   3: 10603102.851 ops/s
Iteration   4: 10601886.704 ops/s
Iteration   5: 10587056.461 ops/s
Iteration   6: 10635724.527 ops/s
Iteration   7: 10620881.428 ops/s
Iteration   8: 10602119.369 ops/s
Iteration   9: 10561656.193 ops/s
Iteration  10: 10587669.364 ops/s
Iteration  11: 10620699.901 ops/s
Iteration  12: 10600830.395 ops/s
Iteration  13: 10611866.321 ops/s
Iteration  14: 10567874.424 ops/s
Iteration  15: 10625522.241 ops/s
Iteration  16: 10623756.336 ops/s
Iteration  17: 10575916.907 ops/s
Iteration  18: 10587617.804 ops/s
Iteration  19: 10615810.552 ops/s
Iteration  20: 10581432.915 ops/s
Iteration  21: 10599839.352 ops/s
Iteration  22: 10560059.955 ops/s
Iteration  23: 10588595.393 ops/s
Iteration  24: 10611312.618 ops/s
Iteration  25: 10572530.816 ops/s
Iteration  26: 10596767.464 ops/s
Iteration  27: 10625912.146 ops/s
Iteration  28: 10629147.058 ops/s
Iteration  29: 10574686.871 ops/s
Iteration  30: 10601975.589 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_dropWhile":
  10597730.907 ±(99.9%) 14504.964 ops/s [Average]
  (min, avg, max) = (10560059.955, 10597730.907, 10635724.527), stdev = 21710.349
  CI (99.9%): [10583225.943, 10612235.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_dropWhile  thrpt   30  10597730.907 ± 14504.964  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747300.436 ops/s
# Warmup Iteration   2: 764913.414 ops/s
# Warmup Iteration   3: 1003382.222 ops/s
# Warmup Iteration   4: 1002638.442 ops/s
# Warmup Iteration   5: 1001847.601 ops/s
# Warmup Iteration   6: 997538.846 ops/s
# Warmup Iteration   7: 999588.303 ops/s
# Warmup Iteration   8: 1000865.729 ops/s
# Warmup Iteration   9: 994524.326 ops/s
# Warmup Iteration  10: 995343.551 ops/s
# Warmup Iteration  11: 1003159.390 ops/s
# Warmup Iteration  12: 847973.292 ops/s
# Warmup Iteration  13: 1002482.363 ops/s
# Warmup Iteration  14: 999513.040 ops/s
# Warmup Iteration  15: 997283.792 ops/s
# Warmup Iteration  16: 999327.561 ops/s
# Warmup Iteration  17: 1058658.038 ops/s
# Warmup Iteration  18: 1052621.995 ops/s
# Warmup Iteration  19: 1054185.250 ops/s
# Warmup Iteration  20: 1057196.846 ops/s
# Warmup Iteration  21: 1060206.519 ops/s
# Warmup Iteration  22: 1055479.335 ops/s
# Warmup Iteration  23: 1059492.371 ops/s
# Warmup Iteration  24: 1059132.132 ops/s
# Warmup Iteration  25: 1059388.017 ops/s
# Warmup Iteration  26: 1058255.317 ops/s
# Warmup Iteration  27: 1060722.604 ops/s
# Warmup Iteration  28: 1059878.116 ops/s
# Warmup Iteration  29: 1059802.825 ops/s
# Warmup Iteration  30: 1058883.779 ops/s
Iteration   1: 1056582.683 ops/s
Iteration   2: 1057514.491 ops/s
Iteration   3: 1048364.259 ops/s
Iteration   4: 1059812.044 ops/s
Iteration   5: 1059228.506 ops/s
Iteration   6: 1053500.103 ops/s
Iteration   7: 1059933.427 ops/s
Iteration   8: 1059291.081 ops/s
Iteration   9: 1058490.753 ops/s
Iteration  10: 1059142.182 ops/s
Iteration  11: 1056990.994 ops/s
Iteration  12: 1058888.754 ops/s
Iteration  13: 1049478.534 ops/s
Iteration  14: 1053374.136 ops/s
Iteration  15: 1051889.508 ops/s
Iteration  16: 1055756.597 ops/s
Iteration  17: 1055831.778 ops/s
Iteration  18: 1055979.191 ops/s
Iteration  19: 1050740.540 ops/s
Iteration  20: 1057914.377 ops/s
Iteration  21: 1058676.089 ops/s
Iteration  22: 1059077.408 ops/s
Iteration  23: 1055459.615 ops/s
Iteration  24: 1054899.984 ops/s
Iteration  25: 1054744.893 ops/s
Iteration  26: 1057380.863 ops/s
Iteration  27: 1052932.821 ops/s
Iteration  28: 1052533.825 ops/s
Iteration  29: 1059058.099 ops/s
Iteration  30: 1057732.078 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_drop_throws":
  1056039.987 ±(99.9%) 2137.842 ops/s [Average]
  (min, avg, max) = (1048364.259, 1056039.987, 1059933.427), stdev = 3199.822
  CI (99.9%): [1053902.145, 1058177.830] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_drop_throws  thrpt   30  1056039.987 ± 2137.842  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_each$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_each

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8572782.713 ops/s
# Warmup Iteration   2: 16616503.405 ops/s
# Warmup Iteration   3: 17270175.562 ops/s
# Warmup Iteration   4: 14406635.871 ops/s
# Warmup Iteration   5: 17217691.247 ops/s
# Warmup Iteration   6: 17265620.487 ops/s
# Warmup Iteration   7: 17265710.991 ops/s
# Warmup Iteration   8: 17224341.791 ops/s
# Warmup Iteration   9: 17237486.258 ops/s
# Warmup Iteration  10: 17210804.705 ops/s
# Warmup Iteration  11: 17210712.562 ops/s
# Warmup Iteration  12: 17220438.741 ops/s
# Warmup Iteration  13: 17260245.630 ops/s
# Warmup Iteration  14: 17183991.038 ops/s
# Warmup Iteration  15: 17224794.747 ops/s
# Warmup Iteration  16: 17199331.428 ops/s
# Warmup Iteration  17: 17246524.978 ops/s
# Warmup Iteration  18: 17239115.273 ops/s
# Warmup Iteration  19: 17240750.861 ops/s
# Warmup Iteration  20: 17209990.574 ops/s
# Warmup Iteration  21: 17237736.700 ops/s
# Warmup Iteration  22: 17269802.873 ops/s
# Warmup Iteration  23: 17221503.141 ops/s
# Warmup Iteration  24: 17241801.673 ops/s
# Warmup Iteration  25: 17210986.808 ops/s
# Warmup Iteration  26: 17237457.043 ops/s
# Warmup Iteration  27: 17212053.796 ops/s
# Warmup Iteration  28: 17215289.739 ops/s
# Warmup Iteration  29: 17201231.153 ops/s
# Warmup Iteration  30: 17252243.517 ops/s
Iteration   1: 17263978.469 ops/s
Iteration   2: 17257724.402 ops/s
Iteration   3: 17229611.807 ops/s
Iteration   4: 17260104.805 ops/s
Iteration   5: 17272271.671 ops/s
Iteration   6: 17299632.647 ops/s
Iteration   7: 17269765.428 ops/s
Iteration   8: 17180592.525 ops/s
Iteration   9: 17170952.381 ops/s
Iteration  10: 17111496.733 ops/s
Iteration  11: 17303486.313 ops/s
Iteration  12: 17270890.034 ops/s
Iteration  13: 17233058.013 ops/s
Iteration  14: 17250345.715 ops/s
Iteration  15: 17294077.469 ops/s
Iteration  16: 17181972.411 ops/s
Iteration  17: 17265184.994 ops/s
Iteration  18: 17306915.374 ops/s
Iteration  19: 17261506.612 ops/s
Iteration  20: 17263141.763 ops/s
Iteration  21: 17252592.996 ops/s
Iteration  22: 17239691.303 ops/s
Iteration  23: 17242088.498 ops/s
Iteration  24: 17181648.254 ops/s
Iteration  25: 17213361.951 ops/s
Iteration  26: 17211845.942 ops/s
Iteration  27: 17218431.458 ops/s
Iteration  28: 17240757.473 ops/s
Iteration  29: 17275872.389 ops/s
Iteration  30: 17253522.722 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_each":
  17242550.752 ±(99.9%) 29371.472 ops/s [Average]
  (min, avg, max) = (17111496.733, 17242550.752, 17306915.374), stdev = 43961.840
  CI (99.9%): [17213179.280, 17271922.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_each  thrpt   30  17242550.752 ± 29371.472  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31689.640 ops/s
# Warmup Iteration   2: 46085.953 ops/s
# Warmup Iteration   3: 64635.475 ops/s
# Warmup Iteration   4: 64815.197 ops/s
# Warmup Iteration   5: 64926.421 ops/s
# Warmup Iteration   6: 64822.299 ops/s
# Warmup Iteration   7: 64817.645 ops/s
# Warmup Iteration   8: 64793.783 ops/s
# Warmup Iteration   9: 54804.861 ops/s
# Warmup Iteration  10: 64628.104 ops/s
# Warmup Iteration  11: 64626.094 ops/s
# Warmup Iteration  12: 64901.694 ops/s
# Warmup Iteration  13: 64990.955 ops/s
# Warmup Iteration  14: 64865.129 ops/s
# Warmup Iteration  15: 64866.869 ops/s
# Warmup Iteration  16: 64903.280 ops/s
# Warmup Iteration  17: 64829.085 ops/s
# Warmup Iteration  18: 64771.371 ops/s
# Warmup Iteration  19: 64731.100 ops/s
# Warmup Iteration  20: 64890.694 ops/s
# Warmup Iteration  21: 64758.865 ops/s
# Warmup Iteration  22: 64897.344 ops/s
# Warmup Iteration  23: 64732.604 ops/s
# Warmup Iteration  24: 64737.622 ops/s
# Warmup Iteration  25: 64386.839 ops/s
# Warmup Iteration  26: 64545.278 ops/s
# Warmup Iteration  27: 64461.455 ops/s
# Warmup Iteration  28: 64719.416 ops/s
# Warmup Iteration  29: 64647.807 ops/s
# Warmup Iteration  30: 64765.822 ops/s
Iteration   1: 64591.494 ops/s
Iteration   2: 64417.059 ops/s
Iteration   3: 64234.490 ops/s
Iteration   4: 64405.428 ops/s
Iteration   5: 64396.394 ops/s
Iteration   6: 64708.583 ops/s
Iteration   7: 64872.255 ops/s
Iteration   8: 64622.466 ops/s
Iteration   9: 64749.017 ops/s
Iteration  10: 64622.865 ops/s
Iteration  11: 64673.035 ops/s
Iteration  12: 64651.590 ops/s
Iteration  13: 64957.958 ops/s
Iteration  14: 65018.704 ops/s
Iteration  15: 65050.680 ops/s
Iteration  16: 65113.939 ops/s
Iteration  17: 65140.762 ops/s
Iteration  18: 65254.994 ops/s
Iteration  19: 65344.352 ops/s
Iteration  20: 65246.959 ops/s
Iteration  21: 65184.726 ops/s
Iteration  22: 64909.348 ops/s
Iteration  23: 64618.577 ops/s
Iteration  24: 65232.287 ops/s
Iteration  25: 64731.521 ops/s
Iteration  26: 65004.865 ops/s
Iteration  27: 65207.589 ops/s
Iteration  28: 65287.638 ops/s
Iteration  29: 65077.234 ops/s
Iteration  30: 65165.264 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_equalsAndHashCode":
  64883.069 ±(99.9%) 208.811 ops/s [Average]
  (min, avg, max) = (64234.490, 64883.069, 65344.352), stdev = 312.539
  CI (99.9%): [64674.258, 65091.880] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt      Score     Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  64883.069 ± 208.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1065016.523 ops/s
# Warmup Iteration   2: 2514328.684 ops/s
# Warmup Iteration   3: 2525875.906 ops/s
# Warmup Iteration   4: 2108694.098 ops/s
# Warmup Iteration   5: 2528836.320 ops/s
# Warmup Iteration   6: 2533528.607 ops/s
# Warmup Iteration   7: 2535590.999 ops/s
# Warmup Iteration   8: 2524452.709 ops/s
# Warmup Iteration   9: 2528139.709 ops/s
# Warmup Iteration  10: 2528610.044 ops/s
# Warmup Iteration  11: 2522854.300 ops/s
# Warmup Iteration  12: 2527640.701 ops/s
# Warmup Iteration  13: 2522231.244 ops/s
# Warmup Iteration  14: 2525526.847 ops/s
# Warmup Iteration  15: 2532252.281 ops/s
# Warmup Iteration  16: 2527410.985 ops/s
# Warmup Iteration  17: 2526086.992 ops/s
# Warmup Iteration  18: 2536792.426 ops/s
# Warmup Iteration  19: 2530205.340 ops/s
# Warmup Iteration  20: 2530441.833 ops/s
# Warmup Iteration  21: 2530257.302 ops/s
# Warmup Iteration  22: 2509672.861 ops/s
# Warmup Iteration  23: 2528928.363 ops/s
# Warmup Iteration  24: 2524305.937 ops/s
# Warmup Iteration  25: 2532695.977 ops/s
# Warmup Iteration  26: 2531016.108 ops/s
# Warmup Iteration  27: 2535608.670 ops/s
# Warmup Iteration  28: 2519213.933 ops/s
# Warmup Iteration  29: 2530751.454 ops/s
# Warmup Iteration  30: 2525800.307 ops/s
Iteration   1: 2522140.791 ops/s
Iteration   2: 2528656.300 ops/s
Iteration   3: 2523844.820 ops/s
Iteration   4: 2536113.540 ops/s
Iteration   5: 2533134.293 ops/s
Iteration   6: 2528402.488 ops/s
Iteration   7: 2523269.534 ops/s
Iteration   8: 2516576.096 ops/s
Iteration   9: 2535475.654 ops/s
Iteration  10: 2521033.242 ops/s
Iteration  11: 2530158.158 ops/s
Iteration  12: 2521947.744 ops/s
Iteration  13: 2528473.413 ops/s
Iteration  14: 2532583.452 ops/s
Iteration  15: 2514297.126 ops/s
Iteration  16: 2511990.031 ops/s
Iteration  17: 2537138.763 ops/s
Iteration  18: 2529669.049 ops/s
Iteration  19: 2533197.332 ops/s
Iteration  20: 2533031.100 ops/s
Iteration  21: 2534157.402 ops/s
Iteration  22: 2530797.572 ops/s
Iteration  23: 2533606.170 ops/s
Iteration  24: 2528827.641 ops/s
Iteration  25: 2521181.897 ops/s
Iteration  26: 2529895.060 ops/s
Iteration  27: 2536124.762 ops/s
Iteration  28: 2521840.592 ops/s
Iteration  29: 2533277.116 ops/s
Iteration  30: 2528441.084 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_flatCollect":
  2527976.074 ±(99.9%) 4484.970 ops/s [Average]
  (min, avg, max) = (2511990.031, 2527976.074, 2537138.763), stdev = 6712.892
  CI (99.9%): [2523491.104, 2532461.044] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_flatCollect  thrpt   30  2527976.074 ± 4484.970  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1158896.598 ops/s
# Warmup Iteration   2: 2816779.563 ops/s
# Warmup Iteration   3: 2862388.785 ops/s
# Warmup Iteration   4: 2373372.392 ops/s
# Warmup Iteration   5: 2865007.482 ops/s
# Warmup Iteration   6: 2870972.611 ops/s
# Warmup Iteration   7: 2871175.880 ops/s
# Warmup Iteration   8: 2874595.456 ops/s
# Warmup Iteration   9: 2869051.377 ops/s
# Warmup Iteration  10: 2868613.137 ops/s
# Warmup Iteration  11: 2868361.842 ops/s
# Warmup Iteration  12: 2858485.484 ops/s
# Warmup Iteration  13: 2864114.598 ops/s
# Warmup Iteration  14: 2852340.422 ops/s
# Warmup Iteration  15: 2871699.958 ops/s
# Warmup Iteration  16: 2864938.514 ops/s
# Warmup Iteration  17: 2862464.352 ops/s
# Warmup Iteration  18: 2863348.381 ops/s
# Warmup Iteration  19: 2874004.615 ops/s
# Warmup Iteration  20: 2830977.672 ops/s
# Warmup Iteration  21: 2869963.567 ops/s
# Warmup Iteration  22: 2858913.606 ops/s
# Warmup Iteration  23: 2873861.268 ops/s
# Warmup Iteration  24: 2866602.396 ops/s
# Warmup Iteration  25: 2873916.513 ops/s
# Warmup Iteration  26: 2862838.499 ops/s
# Warmup Iteration  27: 2868999.788 ops/s
# Warmup Iteration  28: 2858917.753 ops/s
# Warmup Iteration  29: 2862582.306 ops/s
# Warmup Iteration  30: 2868131.555 ops/s
Iteration   1: 2867027.650 ops/s
Iteration   2: 2884952.519 ops/s
Iteration   3: 2867489.552 ops/s
Iteration   4: 2851831.233 ops/s
Iteration   5: 2869068.403 ops/s
Iteration   6: 2871806.702 ops/s
Iteration   7: 2871906.491 ops/s
Iteration   8: 2867778.864 ops/s
Iteration   9: 2870570.201 ops/s
Iteration  10: 2860300.065 ops/s
Iteration  11: 2858861.423 ops/s
Iteration  12: 2872418.036 ops/s
Iteration  13: 2868672.000 ops/s
Iteration  14: 2870300.023 ops/s
Iteration  15: 2861061.144 ops/s
Iteration  16: 2872969.966 ops/s
Iteration  17: 2858069.225 ops/s
Iteration  18: 2868160.683 ops/s
Iteration  19: 2836430.394 ops/s
Iteration  20: 2801886.999 ops/s
Iteration  21: 2814572.548 ops/s
Iteration  22: 2823602.455 ops/s
Iteration  23: 2872589.308 ops/s
Iteration  24: 2879948.670 ops/s
Iteration  25: 2875157.260 ops/s
Iteration  26: 2873657.660 ops/s
Iteration  27: 2873571.552 ops/s
Iteration  28: 2865496.199 ops/s
Iteration  29: 2863397.566 ops/s
Iteration  30: 2869525.115 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_flatCollectWith":
  2862102.664 ±(99.9%) 12643.032 ops/s [Average]
  (min, avg, max) = (2801886.999, 2862102.664, 2884952.519), stdev = 18923.496
  CI (99.9%): [2849459.632, 2874745.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  2862102.664 ± 12643.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1342014.469 ops/s
# Warmup Iteration   2: 3228018.733 ops/s
# Warmup Iteration   3: 3243354.417 ops/s
# Warmup Iteration   4: 2710503.779 ops/s
# Warmup Iteration   5: 3256403.692 ops/s
# Warmup Iteration   6: 3251060.476 ops/s
# Warmup Iteration   7: 3248199.874 ops/s
# Warmup Iteration   8: 3245776.867 ops/s
# Warmup Iteration   9: 3254060.426 ops/s
# Warmup Iteration  10: 3258580.366 ops/s
# Warmup Iteration  11: 3254450.594 ops/s
# Warmup Iteration  12: 3262526.457 ops/s
# Warmup Iteration  13: 3258609.607 ops/s
# Warmup Iteration  14: 3257187.080 ops/s
# Warmup Iteration  15: 3256789.306 ops/s
# Warmup Iteration  16: 3260171.544 ops/s
# Warmup Iteration  17: 3242850.292 ops/s
# Warmup Iteration  18: 3253114.637 ops/s
# Warmup Iteration  19: 3258034.678 ops/s
# Warmup Iteration  20: 3254707.578 ops/s
# Warmup Iteration  21: 3251642.860 ops/s
# Warmup Iteration  22: 3244665.575 ops/s
# Warmup Iteration  23: 3255702.335 ops/s
# Warmup Iteration  24: 3258965.204 ops/s
# Warmup Iteration  25: 3249858.056 ops/s
# Warmup Iteration  26: 3258468.703 ops/s
# Warmup Iteration  27: 3240770.345 ops/s
# Warmup Iteration  28: 3249522.609 ops/s
# Warmup Iteration  29: 3243744.896 ops/s
# Warmup Iteration  30: 3248964.909 ops/s
Iteration   1: 3242631.894 ops/s
Iteration   2: 3246391.757 ops/s
Iteration   3: 3263024.693 ops/s
Iteration   4: 3250921.476 ops/s
Iteration   5: 3246026.690 ops/s
Iteration   6: 3264317.345 ops/s
Iteration   7: 3243482.092 ops/s
Iteration   8: 3257755.630 ops/s
Iteration   9: 3268454.301 ops/s
Iteration  10: 3255975.842 ops/s
Iteration  11: 3257429.746 ops/s
Iteration  12: 3266238.317 ops/s
Iteration  13: 3253351.612 ops/s
Iteration  14: 3261238.472 ops/s
Iteration  15: 3254984.996 ops/s
Iteration  16: 3259310.536 ops/s
Iteration  17: 3254598.294 ops/s
Iteration  18: 3259178.041 ops/s
Iteration  19: 3257488.559 ops/s
Iteration  20: 3255930.132 ops/s
Iteration  21: 3247019.724 ops/s
Iteration  22: 3259937.455 ops/s
Iteration  23: 3254124.001 ops/s
Iteration  24: 3266417.002 ops/s
Iteration  25: 3259972.698 ops/s
Iteration  26: 3227329.454 ops/s
Iteration  27: 3262233.144 ops/s
Iteration  28: 3268089.246 ops/s
Iteration  29: 3246260.660 ops/s
Iteration  30: 3241337.963 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_flatCollectWithTarget":
  3255048.392 ±(99.9%) 6216.813 ops/s [Average]
  (min, avg, max) = (3227329.454, 3255048.392, 3268454.301), stdev = 9305.034
  CI (99.9%): [3248831.579, 3261265.206] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  3255048.392 ± 6216.813  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8705962.512 ops/s
# Warmup Iteration   2: 17907009.925 ops/s
# Warmup Iteration   3: 18369713.973 ops/s
# Warmup Iteration   4: 15367913.680 ops/s
# Warmup Iteration   5: 18360697.004 ops/s
# Warmup Iteration   6: 18319382.271 ops/s
# Warmup Iteration   7: 18356533.250 ops/s
# Warmup Iteration   8: 18369985.274 ops/s
# Warmup Iteration   9: 18361211.441 ops/s
# Warmup Iteration  10: 18360495.841 ops/s
# Warmup Iteration  11: 18342468.930 ops/s
# Warmup Iteration  12: 18369650.673 ops/s
# Warmup Iteration  13: 18333326.855 ops/s
# Warmup Iteration  14: 18376368.233 ops/s
# Warmup Iteration  15: 18327150.773 ops/s
# Warmup Iteration  16: 18358200.549 ops/s
# Warmup Iteration  17: 18379672.576 ops/s
# Warmup Iteration  18: 18339211.405 ops/s
# Warmup Iteration  19: 18311031.886 ops/s
# Warmup Iteration  20: 18336826.320 ops/s
# Warmup Iteration  21: 18387626.415 ops/s
# Warmup Iteration  22: 18369871.613 ops/s
# Warmup Iteration  23: 18350354.832 ops/s
# Warmup Iteration  24: 18386836.422 ops/s
# Warmup Iteration  25: 18363427.934 ops/s
# Warmup Iteration  26: 18372244.063 ops/s
# Warmup Iteration  27: 18367710.817 ops/s
# Warmup Iteration  28: 18414346.142 ops/s
# Warmup Iteration  29: 18386549.620 ops/s
# Warmup Iteration  30: 18388527.934 ops/s
Iteration   1: 18329521.908 ops/s
Iteration   2: 18386669.526 ops/s
Iteration   3: 18303322.453 ops/s
Iteration   4: 18358929.568 ops/s
Iteration   5: 18338325.320 ops/s
Iteration   6: 18347549.225 ops/s
Iteration   7: 17937237.283 ops/s
Iteration   8: 18351457.215 ops/s
Iteration   9: 18331436.196 ops/s
Iteration  10: 18348344.623 ops/s
Iteration  11: 18356759.940 ops/s
Iteration  12: 18274614.268 ops/s
Iteration  13: 18281104.598 ops/s
Iteration  14: 18393982.247 ops/s
Iteration  15: 18368691.647 ops/s
Iteration  16: 18336726.505 ops/s
Iteration  17: 18375531.458 ops/s
Iteration  18: 18366074.438 ops/s
Iteration  19: 18351883.972 ops/s
Iteration  20: 18376532.170 ops/s
Iteration  21: 18338878.938 ops/s
Iteration  22: 18326376.974 ops/s
Iteration  23: 18334778.381 ops/s
Iteration  24: 18402172.573 ops/s
Iteration  25: 18357844.198 ops/s
Iteration  26: 18403617.308 ops/s
Iteration  27: 18404549.967 ops/s
Iteration  28: 18383463.410 ops/s
Iteration  29: 18395195.922 ops/s
Iteration  30: 18366515.860 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEach":
  18340936.270 ±(99.9%) 55478.008 ops/s [Average]
  (min, avg, max) = (17937237.283, 18340936.270, 18404549.967), stdev = 83036.877
  CI (99.9%): [18285458.261, 18396414.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_forEach  thrpt   30  18340936.270 ± 55478.008  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 298755.113 ops/s
# Warmup Iteration   2: 318063.668 ops/s
# Warmup Iteration   3: 377167.312 ops/s
# Warmup Iteration   4: 401391.620 ops/s
# Warmup Iteration   5: 403325.479 ops/s
# Warmup Iteration   6: 400299.037 ops/s
# Warmup Iteration   7: 401592.944 ops/s
# Warmup Iteration   8: 399821.794 ops/s
# Warmup Iteration   9: 400267.224 ops/s
# Warmup Iteration  10: 401687.957 ops/s
# Warmup Iteration  11: 403483.565 ops/s
# Warmup Iteration  12: 403361.103 ops/s
# Warmup Iteration  13: 395043.716 ops/s
# Warmup Iteration  14: 347568.932 ops/s
# Warmup Iteration  15: 402156.525 ops/s
# Warmup Iteration  16: 401366.419 ops/s
# Warmup Iteration  17: 420599.223 ops/s
# Warmup Iteration  18: 421354.026 ops/s
# Warmup Iteration  19: 421939.708 ops/s
# Warmup Iteration  20: 422286.006 ops/s
# Warmup Iteration  21: 421917.268 ops/s
# Warmup Iteration  22: 422333.957 ops/s
# Warmup Iteration  23: 421369.334 ops/s
# Warmup Iteration  24: 421451.570 ops/s
# Warmup Iteration  25: 420854.398 ops/s
# Warmup Iteration  26: 421426.433 ops/s
# Warmup Iteration  27: 419313.492 ops/s
# Warmup Iteration  28: 418718.057 ops/s
# Warmup Iteration  29: 420355.752 ops/s
# Warmup Iteration  30: 422152.996 ops/s
Iteration   1: 420192.482 ops/s
Iteration   2: 416130.347 ops/s
Iteration   3: 416185.382 ops/s
Iteration   4: 419076.282 ops/s
Iteration   5: 420255.016 ops/s
Iteration   6: 421101.474 ops/s
Iteration   7: 420499.984 ops/s
Iteration   8: 419925.376 ops/s
Iteration   9: 420383.076 ops/s
Iteration  10: 421205.046 ops/s
Iteration  11: 420664.149 ops/s
Iteration  12: 420489.561 ops/s
Iteration  13: 420516.462 ops/s
Iteration  14: 420304.843 ops/s
Iteration  15: 421076.791 ops/s
Iteration  16: 419445.162 ops/s
Iteration  17: 420832.857 ops/s
Iteration  18: 418017.822 ops/s
Iteration  19: 421386.052 ops/s
Iteration  20: 419530.297 ops/s
Iteration  21: 420033.222 ops/s
Iteration  22: 421659.162 ops/s
Iteration  23: 418233.530 ops/s
Iteration  24: 421768.537 ops/s
Iteration  25: 420068.484 ops/s
Iteration  26: 421693.843 ops/s
Iteration  27: 419873.273 ops/s
Iteration  28: 422058.929 ops/s
Iteration  29: 421609.373 ops/s
Iteration  30: 419560.382 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEachFromTo":
  420125.907 ±(99.9%) 971.042 ops/s [Average]
  (min, avg, max) = (416130.347, 420125.907, 422058.929), stdev = 1453.410
  CI (99.9%): [419154.865, 421096.948] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  420125.907 ± 971.042  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5980999.544 ops/s
# Warmup Iteration   2: 12139850.005 ops/s
# Warmup Iteration   3: 12634435.780 ops/s
# Warmup Iteration   4: 12039927.465 ops/s
# Warmup Iteration   5: 11244615.855 ops/s
# Warmup Iteration   6: 12650040.201 ops/s
# Warmup Iteration   7: 12657397.522 ops/s
# Warmup Iteration   8: 12643900.253 ops/s
# Warmup Iteration   9: 12623619.292 ops/s
# Warmup Iteration  10: 12573736.983 ops/s
# Warmup Iteration  11: 12632190.251 ops/s
# Warmup Iteration  12: 12656949.724 ops/s
# Warmup Iteration  13: 12642012.148 ops/s
# Warmup Iteration  14: 12661524.717 ops/s
# Warmup Iteration  15: 12637644.232 ops/s
# Warmup Iteration  16: 12664072.027 ops/s
# Warmup Iteration  17: 12675600.076 ops/s
# Warmup Iteration  18: 12659320.005 ops/s
# Warmup Iteration  19: 12642342.255 ops/s
# Warmup Iteration  20: 12664657.392 ops/s
# Warmup Iteration  21: 12627009.195 ops/s
# Warmup Iteration  22: 12653838.131 ops/s
# Warmup Iteration  23: 12589088.507 ops/s
# Warmup Iteration  24: 12645735.183 ops/s
# Warmup Iteration  25: 12632547.241 ops/s
# Warmup Iteration  26: 12664460.003 ops/s
# Warmup Iteration  27: 12650579.124 ops/s
# Warmup Iteration  28: 12652005.437 ops/s
# Warmup Iteration  29: 12656805.327 ops/s
# Warmup Iteration  30: 12671539.071 ops/s
Iteration   1: 12666620.956 ops/s
Iteration   2: 12624275.407 ops/s
Iteration   3: 12599390.014 ops/s
Iteration   4: 12627910.878 ops/s
Iteration   5: 12636763.150 ops/s
Iteration   6: 12668627.892 ops/s
Iteration   7: 12637855.829 ops/s
Iteration   8: 12616887.780 ops/s
Iteration   9: 12652399.415 ops/s
Iteration  10: 12651756.212 ops/s
Iteration  11: 12674626.511 ops/s
Iteration  12: 12638016.215 ops/s
Iteration  13: 12631712.698 ops/s
Iteration  14: 12627844.251 ops/s
Iteration  15: 12615308.165 ops/s
Iteration  16: 12651155.817 ops/s
Iteration  17: 12637268.593 ops/s
Iteration  18: 12678232.217 ops/s
Iteration  19: 12678155.553 ops/s
Iteration  20: 12656734.760 ops/s
Iteration  21: 12639997.236 ops/s
Iteration  22: 12578051.080 ops/s
Iteration  23: 12593001.548 ops/s
Iteration  24: 12605742.404 ops/s
Iteration  25: 12591565.662 ops/s
Iteration  26: 12615390.159 ops/s
Iteration  27: 12565465.186 ops/s
Iteration  28: 12662835.602 ops/s
Iteration  29: 12647567.126 ops/s
Iteration  30: 12670678.085 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEachWith":
  12634727.880 ±(99.9%) 20075.490 ops/s [Average]
  (min, avg, max) = (12565465.186, 12634727.880, 12678232.217), stdev = 30048.051
  CI (99.9%): [12614652.390, 12654803.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_forEachWith  thrpt   30  12634727.880 ± 20075.490  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11254581.862 ops/s
# Warmup Iteration   2: 23477046.727 ops/s
# Warmup Iteration   3: 23703335.967 ops/s
# Warmup Iteration   4: 21252591.289 ops/s
# Warmup Iteration   5: 22571240.184 ops/s
# Warmup Iteration   6: 23710632.423 ops/s
# Warmup Iteration   7: 23773581.033 ops/s
# Warmup Iteration   8: 23706867.006 ops/s
# Warmup Iteration   9: 23740510.609 ops/s
# Warmup Iteration  10: 23751708.991 ops/s
# Warmup Iteration  11: 23766926.879 ops/s
# Warmup Iteration  12: 23739199.871 ops/s
# Warmup Iteration  13: 23641033.523 ops/s
# Warmup Iteration  14: 23644948.965 ops/s
# Warmup Iteration  15: 23705934.372 ops/s
# Warmup Iteration  16: 23745148.966 ops/s
# Warmup Iteration  17: 23769301.975 ops/s
# Warmup Iteration  18: 23752735.574 ops/s
# Warmup Iteration  19: 23816612.814 ops/s
# Warmup Iteration  20: 23628929.868 ops/s
# Warmup Iteration  21: 23794836.300 ops/s
# Warmup Iteration  22: 23741115.525 ops/s
# Warmup Iteration  23: 23768115.916 ops/s
# Warmup Iteration  24: 23774290.293 ops/s
# Warmup Iteration  25: 23747313.777 ops/s
# Warmup Iteration  26: 23799886.927 ops/s
# Warmup Iteration  27: 23739416.134 ops/s
# Warmup Iteration  28: 23716035.151 ops/s
# Warmup Iteration  29: 23683244.314 ops/s
# Warmup Iteration  30: 23813545.683 ops/s
Iteration   1: 23758188.064 ops/s
Iteration   2: 23811286.146 ops/s
Iteration   3: 23749759.427 ops/s
Iteration   4: 23794760.554 ops/s
Iteration   5: 23706781.527 ops/s
Iteration   6: 23784263.354 ops/s
Iteration   7: 23744577.974 ops/s
Iteration   8: 23839201.714 ops/s
Iteration   9: 23771151.577 ops/s
Iteration  10: 23786662.853 ops/s
Iteration  11: 23773888.308 ops/s
Iteration  12: 23860609.913 ops/s
Iteration  13: 23748885.829 ops/s
Iteration  14: 23757219.141 ops/s
Iteration  15: 23778099.683 ops/s
Iteration  16: 23765087.342 ops/s
Iteration  17: 23711873.142 ops/s
Iteration  18: 23750678.349 ops/s
Iteration  19: 23660418.607 ops/s
Iteration  20: 23758914.028 ops/s
Iteration  21: 23735920.599 ops/s
Iteration  22: 23809971.615 ops/s
Iteration  23: 23713860.023 ops/s
Iteration  24: 23693199.131 ops/s
Iteration  25: 23789665.884 ops/s
Iteration  26: 23688568.642 ops/s
Iteration  27: 23294840.799 ops/s
Iteration  28: 23747693.340 ops/s
Iteration  29: 23802104.709 ops/s
Iteration  30: 23718224.797 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEachWithIndex":
  23743545.236 ±(99.9%) 63915.362 ops/s [Average]
  (min, avg, max) = (23294840.799, 23743545.236, 23860609.913), stdev = 95665.512
  CI (99.9%): [23679629.874, 23807460.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  23743545.236 ± 63915.362  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 290583.703 ops/s
# Warmup Iteration   2: 312997.231 ops/s
# Warmup Iteration   3: 372155.744 ops/s
# Warmup Iteration   4: 394673.667 ops/s
# Warmup Iteration   5: 395947.968 ops/s
# Warmup Iteration   6: 393165.213 ops/s
# Warmup Iteration   7: 395638.255 ops/s
# Warmup Iteration   8: 395206.651 ops/s
# Warmup Iteration   9: 396127.358 ops/s
# Warmup Iteration  10: 394610.856 ops/s
# Warmup Iteration  11: 394656.756 ops/s
# Warmup Iteration  12: 395187.951 ops/s
# Warmup Iteration  13: 383164.103 ops/s
# Warmup Iteration  14: 344592.368 ops/s
# Warmup Iteration  15: 393921.680 ops/s
# Warmup Iteration  16: 392556.054 ops/s
# Warmup Iteration  17: 410467.762 ops/s
# Warmup Iteration  18: 410783.380 ops/s
# Warmup Iteration  19: 413528.300 ops/s
# Warmup Iteration  20: 412098.025 ops/s
# Warmup Iteration  21: 411544.822 ops/s
# Warmup Iteration  22: 414033.858 ops/s
# Warmup Iteration  23: 412438.768 ops/s
# Warmup Iteration  24: 414250.838 ops/s
# Warmup Iteration  25: 414547.902 ops/s
# Warmup Iteration  26: 413221.093 ops/s
# Warmup Iteration  27: 413392.282 ops/s
# Warmup Iteration  28: 412661.376 ops/s
# Warmup Iteration  29: 412169.881 ops/s
# Warmup Iteration  30: 412875.513 ops/s
Iteration   1: 413929.779 ops/s
Iteration   2: 410995.897 ops/s
Iteration   3: 412259.187 ops/s
Iteration   4: 410414.982 ops/s
Iteration   5: 414456.327 ops/s
Iteration   6: 414945.075 ops/s
Iteration   7: 414354.434 ops/s
Iteration   8: 415322.942 ops/s
Iteration   9: 414149.932 ops/s
Iteration  10: 412518.326 ops/s
Iteration  11: 413876.767 ops/s
Iteration  12: 414239.216 ops/s
Iteration  13: 413922.936 ops/s
Iteration  14: 413852.470 ops/s
Iteration  15: 414523.595 ops/s
Iteration  16: 413852.881 ops/s
Iteration  17: 413614.499 ops/s
Iteration  18: 413005.604 ops/s
Iteration  19: 414598.465 ops/s
Iteration  20: 413067.905 ops/s
Iteration  21: 412193.183 ops/s
Iteration  22: 414138.879 ops/s
Iteration  23: 413819.937 ops/s
Iteration  24: 413957.040 ops/s
Iteration  25: 413489.241 ops/s
Iteration  26: 413235.522 ops/s
Iteration  27: 410784.986 ops/s
Iteration  28: 413631.948 ops/s
Iteration  29: 413497.583 ops/s
Iteration  30: 412176.885 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo":
  413427.547 ±(99.9%) 796.806 ops/s [Average]
  (min, avg, max) = (410414.982, 413427.547, 415322.942), stdev = 1192.621
  CI (99.9%): [412630.742, 414224.353] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo  thrpt   30  413427.547 ± 796.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 40287730.544 ops/s
# Warmup Iteration   2: 76789529.941 ops/s
# Warmup Iteration   3: 66235866.866 ops/s
# Warmup Iteration   4: 77796611.251 ops/s
# Warmup Iteration   5: 77732928.974 ops/s
# Warmup Iteration   6: 77549095.336 ops/s
# Warmup Iteration   7: 78192322.365 ops/s
# Warmup Iteration   8: 77935848.001 ops/s
# Warmup Iteration   9: 77725637.386 ops/s
# Warmup Iteration  10: 78291256.544 ops/s
# Warmup Iteration  11: 77902514.146 ops/s
# Warmup Iteration  12: 77978403.320 ops/s
# Warmup Iteration  13: 78149400.307 ops/s
# Warmup Iteration  14: 77993691.501 ops/s
# Warmup Iteration  15: 77904726.564 ops/s
# Warmup Iteration  16: 77916657.041 ops/s
# Warmup Iteration  17: 78038703.238 ops/s
# Warmup Iteration  18: 77882623.420 ops/s
# Warmup Iteration  19: 78356309.582 ops/s
# Warmup Iteration  20: 78147302.608 ops/s
# Warmup Iteration  21: 77397675.466 ops/s
# Warmup Iteration  22: 78033801.018 ops/s
# Warmup Iteration  23: 78280819.816 ops/s
# Warmup Iteration  24: 78039730.336 ops/s
# Warmup Iteration  25: 78270567.467 ops/s
# Warmup Iteration  26: 78313628.786 ops/s
# Warmup Iteration  27: 78197310.082 ops/s
# Warmup Iteration  28: 78068054.564 ops/s
# Warmup Iteration  29: 78216538.904 ops/s
# Warmup Iteration  30: 78183812.513 ops/s
Iteration   1: 77967561.383 ops/s
Iteration   2: 77867789.362 ops/s
Iteration   3: 77865345.271 ops/s
Iteration   4: 78530750.497 ops/s
Iteration   5: 78167698.664 ops/s
Iteration   6: 78127722.352 ops/s
Iteration   7: 78138879.340 ops/s
Iteration   8: 78662438.521 ops/s
Iteration   9: 78413152.532 ops/s
Iteration  10: 78242036.072 ops/s
Iteration  11: 77804374.992 ops/s
Iteration  12: 78250109.840 ops/s
Iteration  13: 78196700.266 ops/s
Iteration  14: 78261840.678 ops/s
Iteration  15: 78372971.165 ops/s
Iteration  16: 78294600.480 ops/s
Iteration  17: 78097267.004 ops/s
Iteration  18: 78440764.197 ops/s
Iteration  19: 77981526.643 ops/s
Iteration  20: 78415913.884 ops/s
Iteration  21: 78291880.420 ops/s
Iteration  22: 77953930.795 ops/s
Iteration  23: 78145160.260 ops/s
Iteration  24: 78030612.762 ops/s
Iteration  25: 78060295.275 ops/s
Iteration  26: 78241225.994 ops/s
Iteration  27: 78037576.290 ops/s
Iteration  28: 78164952.062 ops/s
Iteration  29: 77857736.753 ops/s
Iteration  30: 77596024.213 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_forLoop":
  78149294.599 ±(99.9%) 155738.336 ops/s [Average]
  (min, avg, max) = (77596024.213, 78149294.599, 78662438.521), stdev = 233101.828
  CI (99.9%): [77993556.262, 78305032.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_forLoop  thrpt   30  78149294.599 ± 155738.336  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 371293.707 ops/s
# Warmup Iteration   2: 383693.731 ops/s
# Warmup Iteration   3: 461104.647 ops/s
# Warmup Iteration   4: 480535.466 ops/s
# Warmup Iteration   5: 481193.725 ops/s
# Warmup Iteration   6: 475881.097 ops/s
# Warmup Iteration   7: 480167.437 ops/s
# Warmup Iteration   8: 478868.411 ops/s
# Warmup Iteration   9: 479657.392 ops/s
# Warmup Iteration  10: 482606.248 ops/s
# Warmup Iteration  11: 482377.698 ops/s
# Warmup Iteration  12: 481297.592 ops/s
# Warmup Iteration  13: 435664.594 ops/s
# Warmup Iteration  14: 455858.744 ops/s
# Warmup Iteration  15: 483254.493 ops/s
# Warmup Iteration  16: 480656.336 ops/s
# Warmup Iteration  17: 511975.952 ops/s
# Warmup Iteration  18: 511786.227 ops/s
# Warmup Iteration  19: 513077.647 ops/s
# Warmup Iteration  20: 512809.522 ops/s
# Warmup Iteration  21: 512946.331 ops/s
# Warmup Iteration  22: 512992.977 ops/s
# Warmup Iteration  23: 511274.406 ops/s
# Warmup Iteration  24: 512646.335 ops/s
# Warmup Iteration  25: 511589.605 ops/s
# Warmup Iteration  26: 511179.994 ops/s
# Warmup Iteration  27: 510832.704 ops/s
# Warmup Iteration  28: 512401.928 ops/s
# Warmup Iteration  29: 513433.432 ops/s
# Warmup Iteration  30: 512373.146 ops/s
Iteration   1: 512454.444 ops/s
Iteration   2: 510527.659 ops/s
Iteration   3: 511182.382 ops/s
Iteration   4: 514582.072 ops/s
Iteration   5: 507970.947 ops/s
Iteration   6: 512205.609 ops/s
Iteration   7: 515287.436 ops/s
Iteration   8: 508989.474 ops/s
Iteration   9: 512741.007 ops/s
Iteration  10: 512414.005 ops/s
Iteration  11: 508697.725 ops/s
Iteration  12: 507031.792 ops/s
Iteration  13: 507757.832 ops/s
Iteration  14: 512075.767 ops/s
Iteration  15: 513192.518 ops/s
Iteration  16: 512690.529 ops/s
Iteration  17: 514461.021 ops/s
Iteration  18: 512773.033 ops/s
Iteration  19: 512080.742 ops/s
Iteration  20: 514631.033 ops/s
Iteration  21: 513798.004 ops/s
Iteration  22: 511978.081 ops/s
Iteration  23: 509594.226 ops/s
Iteration  24: 512809.283 ops/s
Iteration  25: 513045.835 ops/s
Iteration  26: 510959.724 ops/s
Iteration  27: 510989.346 ops/s
Iteration  28: 509707.239 ops/s
Iteration  29: 510886.444 ops/s
Iteration  30: 511783.187 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_get":
  511643.280 ±(99.9%) 1421.337 ops/s [Average]
  (min, avg, max) = (507031.792, 511643.280, 515287.436), stdev = 2127.390
  CI (99.9%): [510221.943, 513064.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_get  thrpt   30  511643.280 ± 1421.337  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 43024226.202 ops/s
# Warmup Iteration   2: 82784112.101 ops/s
# Warmup Iteration   3: 75479579.925 ops/s
# Warmup Iteration   4: 88470566.731 ops/s
# Warmup Iteration   5: 88350871.729 ops/s
# Warmup Iteration   6: 88173954.213 ops/s
# Warmup Iteration   7: 87990689.816 ops/s
# Warmup Iteration   8: 88504784.535 ops/s
# Warmup Iteration   9: 88645331.073 ops/s
# Warmup Iteration  10: 88444177.731 ops/s
# Warmup Iteration  11: 88712114.333 ops/s
# Warmup Iteration  12: 88693084.098 ops/s
# Warmup Iteration  13: 88621873.763 ops/s
# Warmup Iteration  14: 88270736.207 ops/s
# Warmup Iteration  15: 88150189.411 ops/s
# Warmup Iteration  16: 88375701.792 ops/s
# Warmup Iteration  17: 88068333.943 ops/s
# Warmup Iteration  18: 88055962.275 ops/s
# Warmup Iteration  19: 88293149.333 ops/s
# Warmup Iteration  20: 87954010.786 ops/s
# Warmup Iteration  21: 88146215.717 ops/s
# Warmup Iteration  22: 88388803.989 ops/s
# Warmup Iteration  23: 88386788.820 ops/s
# Warmup Iteration  24: 88275387.747 ops/s
# Warmup Iteration  25: 88651076.599 ops/s
# Warmup Iteration  26: 88193732.792 ops/s
# Warmup Iteration  27: 88128807.240 ops/s
# Warmup Iteration  28: 88645844.092 ops/s
# Warmup Iteration  29: 88634229.591 ops/s
# Warmup Iteration  30: 87860734.496 ops/s
Iteration   1: 80626661.381 ops/s
Iteration   2: 88605893.027 ops/s
Iteration   3: 88398418.947 ops/s
Iteration   4: 88497218.549 ops/s
Iteration   5: 88354860.521 ops/s
Iteration   6: 88233875.409 ops/s
Iteration   7: 88568404.429 ops/s
Iteration   8: 88276177.808 ops/s
Iteration   9: 87828804.939 ops/s
Iteration  10: 88274656.562 ops/s
Iteration  11: 88531350.055 ops/s
Iteration  12: 88341007.476 ops/s
Iteration  13: 89011838.786 ops/s
Iteration  14: 88482463.050 ops/s
Iteration  15: 88641952.057 ops/s
Iteration  16: 88418143.226 ops/s
Iteration  17: 88219083.676 ops/s
Iteration  18: 88187351.183 ops/s
Iteration  19: 88412947.187 ops/s
Iteration  20: 88852695.688 ops/s
Iteration  21: 88519242.912 ops/s
Iteration  22: 88497677.092 ops/s
Iteration  23: 88213869.383 ops/s
Iteration  24: 88212757.161 ops/s
Iteration  25: 87762610.834 ops/s
Iteration  26: 88094553.300 ops/s
Iteration  27: 87581830.606 ops/s
Iteration  28: 88361042.435 ops/s
Iteration  29: 87627204.833 ops/s
Iteration  30: 88076557.372 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_getFirst":
  88057038.330 ±(99.9%) 961589.944 ops/s [Average]
  (min, avg, max) = (80626661.381, 88057038.330, 89011838.786), stdev = 1439262.669
  CI (99.9%): [87095448.385, 89018628.274] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_getFirst  thrpt   30  88057038.330 ± 961589.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 43703535.324 ops/s
# Warmup Iteration   2: 82616368.023 ops/s
# Warmup Iteration   3: 75918232.248 ops/s
# Warmup Iteration   4: 88786601.976 ops/s
# Warmup Iteration   5: 88527552.340 ops/s
# Warmup Iteration   6: 88757532.246 ops/s
# Warmup Iteration   7: 88382340.176 ops/s
# Warmup Iteration   8: 88083348.818 ops/s
# Warmup Iteration   9: 88268456.452 ops/s
# Warmup Iteration  10: 88951976.477 ops/s
# Warmup Iteration  11: 88965528.537 ops/s
# Warmup Iteration  12: 88557303.002 ops/s
# Warmup Iteration  13: 88487689.389 ops/s
# Warmup Iteration  14: 88609187.158 ops/s
# Warmup Iteration  15: 88518166.752 ops/s
# Warmup Iteration  16: 88369421.371 ops/s
# Warmup Iteration  17: 88749683.764 ops/s
# Warmup Iteration  18: 88719343.663 ops/s
# Warmup Iteration  19: 88965418.941 ops/s
# Warmup Iteration  20: 89066414.348 ops/s
# Warmup Iteration  21: 89094923.827 ops/s
# Warmup Iteration  22: 88905908.194 ops/s
# Warmup Iteration  23: 89145916.771 ops/s
# Warmup Iteration  24: 88729245.129 ops/s
# Warmup Iteration  25: 88835959.785 ops/s
# Warmup Iteration  26: 88871430.478 ops/s
# Warmup Iteration  27: 89001644.925 ops/s
# Warmup Iteration  28: 88972020.741 ops/s
# Warmup Iteration  29: 88594598.758 ops/s
# Warmup Iteration  30: 88784829.714 ops/s
Iteration   1: 88825242.308 ops/s
Iteration   2: 88813529.845 ops/s
Iteration   3: 88765914.459 ops/s
Iteration   4: 88971017.310 ops/s
Iteration   5: 88835316.121 ops/s
Iteration   6: 89419437.231 ops/s
Iteration   7: 89000430.530 ops/s
Iteration   8: 89398746.733 ops/s
Iteration   9: 88581899.136 ops/s
Iteration  10: 89211358.459 ops/s
Iteration  11: 88566752.694 ops/s
Iteration  12: 89112427.155 ops/s
Iteration  13: 88883543.707 ops/s
Iteration  14: 89016447.191 ops/s
Iteration  15: 89002183.277 ops/s
Iteration  16: 88999869.788 ops/s
Iteration  17: 88601414.541 ops/s
Iteration  18: 88853429.528 ops/s
Iteration  19: 88822050.092 ops/s
Iteration  20: 89023468.573 ops/s
Iteration  21: 88726704.409 ops/s
Iteration  22: 88364616.010 ops/s
Iteration  23: 88504267.331 ops/s
Iteration  24: 88575088.110 ops/s
Iteration  25: 88801161.876 ops/s
Iteration  26: 88642161.560 ops/s
Iteration  27: 88617538.950 ops/s
Iteration  28: 88439640.716 ops/s
Iteration  29: 88686392.780 ops/s
Iteration  30: 88655959.167 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_getLast":
  88823933.653 ±(99.9%) 173182.541 ops/s [Average]
  (min, avg, max) = (88364616.010, 88823933.653, 89419437.231), stdev = 259211.494
  CI (99.9%): [88650751.112, 88997116.194] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_getLast  thrpt   30  88823933.653 ± 173182.541  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 798202.645 ops/s
# Warmup Iteration   2: 815908.280 ops/s
# Warmup Iteration   3: 1084730.685 ops/s
# Warmup Iteration   4: 1085961.143 ops/s
# Warmup Iteration   5: 1080901.812 ops/s
# Warmup Iteration   6: 1084132.769 ops/s
# Warmup Iteration   7: 1083251.807 ops/s
# Warmup Iteration   8: 1081683.873 ops/s
# Warmup Iteration   9: 1088915.814 ops/s
# Warmup Iteration  10: 1085312.334 ops/s
# Warmup Iteration  11: 1070569.358 ops/s
# Warmup Iteration  12: 927083.247 ops/s
# Warmup Iteration  13: 1087860.213 ops/s
# Warmup Iteration  14: 1088703.866 ops/s
# Warmup Iteration  15: 1088583.374 ops/s
# Warmup Iteration  16: 1086124.679 ops/s
# Warmup Iteration  17: 1156106.202 ops/s
# Warmup Iteration  18: 1158116.697 ops/s
# Warmup Iteration  19: 1160174.737 ops/s
# Warmup Iteration  20: 1161328.894 ops/s
# Warmup Iteration  21: 1159925.617 ops/s
# Warmup Iteration  22: 1160643.483 ops/s
# Warmup Iteration  23: 1159130.719 ops/s
# Warmup Iteration  24: 1157121.724 ops/s
# Warmup Iteration  25: 1155514.901 ops/s
# Warmup Iteration  26: 1155251.383 ops/s
# Warmup Iteration  27: 1156979.431 ops/s
# Warmup Iteration  28: 1156979.062 ops/s
# Warmup Iteration  29: 1154838.521 ops/s
# Warmup Iteration  30: 1158412.996 ops/s
Iteration   1: 1160123.020 ops/s
Iteration   2: 1157599.138 ops/s
Iteration   3: 1161004.565 ops/s
Iteration   4: 1159500.996 ops/s
Iteration   5: 1160188.804 ops/s
Iteration   6: 1156907.256 ops/s
Iteration   7: 1156562.864 ops/s
Iteration   8: 1160373.320 ops/s
Iteration   9: 1152609.222 ops/s
Iteration  10: 1157280.640 ops/s
Iteration  11: 1156235.153 ops/s
Iteration  12: 1162153.493 ops/s
Iteration  13: 1159931.495 ops/s
Iteration  14: 1162936.860 ops/s
Iteration  15: 1158395.900 ops/s
Iteration  16: 1147940.281 ops/s
Iteration  17: 1158872.584 ops/s
Iteration  18: 1160603.518 ops/s
Iteration  19: 1158160.126 ops/s
Iteration  20: 1162707.440 ops/s
Iteration  21: 1155058.641 ops/s
Iteration  22: 1158379.551 ops/s
Iteration  23: 1154561.765 ops/s
Iteration  24: 1152820.860 ops/s
Iteration  25: 1157447.244 ops/s
Iteration  26: 1153348.291 ops/s
Iteration  27: 1156872.529 ops/s
Iteration  28: 1154830.525 ops/s
Iteration  29: 1161142.654 ops/s
Iteration  30: 1160996.093 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_getOnly":
  1157851.494 ±(99.9%) 2279.738 ops/s [Average]
  (min, avg, max) = (1147940.281, 1157851.494, 1162936.860), stdev = 3412.205
  CI (99.9%): [1155571.756, 1160131.233] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_getOnly  thrpt   30  1157851.494 ± 2279.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 914554.694 ops/s
# Warmup Iteration   2: 1966004.926 ops/s
# Warmup Iteration   3: 2119746.038 ops/s
# Warmup Iteration   4: 2131697.331 ops/s
# Warmup Iteration   5: 1763461.697 ops/s
# Warmup Iteration   6: 2130730.815 ops/s
# Warmup Iteration   7: 2132748.352 ops/s
# Warmup Iteration   8: 2137129.706 ops/s
# Warmup Iteration   9: 2133876.248 ops/s
# Warmup Iteration  10: 2135415.015 ops/s
# Warmup Iteration  11: 2131991.474 ops/s
# Warmup Iteration  12: 2137499.387 ops/s
# Warmup Iteration  13: 2135803.113 ops/s
# Warmup Iteration  14: 2134393.842 ops/s
# Warmup Iteration  15: 2134530.102 ops/s
# Warmup Iteration  16: 2129721.439 ops/s
# Warmup Iteration  17: 2114710.855 ops/s
# Warmup Iteration  18: 2130138.562 ops/s
# Warmup Iteration  19: 2128991.781 ops/s
# Warmup Iteration  20: 2126164.284 ops/s
# Warmup Iteration  21: 2126216.165 ops/s
# Warmup Iteration  22: 2125871.279 ops/s
# Warmup Iteration  23: 2128942.983 ops/s
# Warmup Iteration  24: 2126299.145 ops/s
# Warmup Iteration  25: 2127911.071 ops/s
# Warmup Iteration  26: 2119370.303 ops/s
# Warmup Iteration  27: 2122134.192 ops/s
# Warmup Iteration  28: 2118898.367 ops/s
# Warmup Iteration  29: 2124015.796 ops/s
# Warmup Iteration  30: 2124679.416 ops/s
Iteration   1: 2124619.617 ops/s
Iteration   2: 2119882.375 ops/s
Iteration   3: 2129293.821 ops/s
Iteration   4: 2130252.319 ops/s
Iteration   5: 2126904.737 ops/s
Iteration   6: 2130656.547 ops/s
Iteration   7: 2113289.973 ops/s
Iteration   8: 2128831.596 ops/s
Iteration   9: 2133713.579 ops/s
Iteration  10: 2123678.116 ops/s
Iteration  11: 2128239.516 ops/s
Iteration  12: 2103695.111 ops/s
Iteration  13: 2106562.122 ops/s
Iteration  14: 2124940.226 ops/s
Iteration  15: 2114365.969 ops/s
Iteration  16: 2121555.656 ops/s
Iteration  17: 2129881.685 ops/s
Iteration  18: 2123388.860 ops/s
Iteration  19: 2125942.048 ops/s
Iteration  20: 2130417.472 ops/s
Iteration  21: 2126475.847 ops/s
Iteration  22: 2125002.445 ops/s
Iteration  23: 2124903.617 ops/s
Iteration  24: 2130811.242 ops/s
Iteration  25: 2120625.813 ops/s
Iteration  26: 2120847.651 ops/s
Iteration  27: 2126956.129 ops/s
Iteration  28: 2130291.477 ops/s
Iteration  29: 2109431.414 ops/s
Iteration  30: 2124093.222 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_groupBy":
  2123651.673 ±(99.9%) 4987.750 ops/s [Average]
  (min, avg, max) = (2103695.111, 2123651.673, 2133713.579), stdev = 7465.430
  CI (99.9%): [2118663.923, 2128639.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_groupBy  thrpt   30  2123651.673 ± 4987.750  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 185791.245 ops/s
# Warmup Iteration   2: 290097.477 ops/s
# Warmup Iteration   3: 352488.270 ops/s
# Warmup Iteration   4: 348654.619 ops/s
# Warmup Iteration   5: 351325.649 ops/s
# Warmup Iteration   6: 351459.895 ops/s
# Warmup Iteration   7: 292355.880 ops/s
# Warmup Iteration   8: 348226.789 ops/s
# Warmup Iteration   9: 348234.482 ops/s
# Warmup Iteration  10: 349246.734 ops/s
# Warmup Iteration  11: 348094.169 ops/s
# Warmup Iteration  12: 348955.921 ops/s
# Warmup Iteration  13: 348565.201 ops/s
# Warmup Iteration  14: 347164.009 ops/s
# Warmup Iteration  15: 349026.748 ops/s
# Warmup Iteration  16: 348311.519 ops/s
# Warmup Iteration  17: 352003.977 ops/s
# Warmup Iteration  18: 352022.340 ops/s
# Warmup Iteration  19: 351479.039 ops/s
# Warmup Iteration  20: 351262.700 ops/s
# Warmup Iteration  21: 351548.957 ops/s
# Warmup Iteration  22: 351784.608 ops/s
# Warmup Iteration  23: 351547.228 ops/s
# Warmup Iteration  24: 352115.651 ops/s
# Warmup Iteration  25: 351848.562 ops/s
# Warmup Iteration  26: 351720.457 ops/s
# Warmup Iteration  27: 351990.574 ops/s
# Warmup Iteration  28: 350365.673 ops/s
# Warmup Iteration  29: 351322.709 ops/s
# Warmup Iteration  30: 351747.165 ops/s
Iteration   1: 352500.743 ops/s
Iteration   2: 351831.304 ops/s
Iteration   3: 352389.019 ops/s
Iteration   4: 351410.664 ops/s
Iteration   5: 352318.214 ops/s
Iteration   6: 352006.755 ops/s
Iteration   7: 351762.277 ops/s
Iteration   8: 351405.995 ops/s
Iteration   9: 351814.510 ops/s
Iteration  10: 351613.772 ops/s
Iteration  11: 350309.411 ops/s
Iteration  12: 350929.610 ops/s
Iteration  13: 350617.238 ops/s
Iteration  14: 351354.272 ops/s
Iteration  15: 351866.638 ops/s
Iteration  16: 352081.068 ops/s
Iteration  17: 351549.127 ops/s
Iteration  18: 352317.429 ops/s
Iteration  19: 351598.438 ops/s
Iteration  20: 352016.221 ops/s
Iteration  21: 351251.166 ops/s
Iteration  22: 349428.089 ops/s
Iteration  23: 351925.737 ops/s
Iteration  24: 349505.679 ops/s
Iteration  25: 348189.789 ops/s
Iteration  26: 351805.937 ops/s
Iteration  27: 352611.992 ops/s
Iteration  28: 351116.653 ops/s
Iteration  29: 349727.021 ops/s
Iteration  30: 349681.868 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_groupByEach":
  351297.888 ±(99.9%) 714.417 ops/s [Average]
  (min, avg, max) = (348189.789, 351297.888, 352611.992), stdev = 1069.305
  CI (99.9%): [350583.471, 352012.304] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_groupByEach  thrpt   30  351297.888 ± 714.417  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38025750.889 ops/s
# Warmup Iteration   2: 74063752.168 ops/s
# Warmup Iteration   3: 63328201.266 ops/s
# Warmup Iteration   4: 74374159.329 ops/s
# Warmup Iteration   5: 74371589.818 ops/s
# Warmup Iteration   6: 74177208.004 ops/s
# Warmup Iteration   7: 74524089.969 ops/s
# Warmup Iteration   8: 74503197.388 ops/s
# Warmup Iteration   9: 74594404.143 ops/s
# Warmup Iteration  10: 74256643.420 ops/s
# Warmup Iteration  11: 74593301.367 ops/s
# Warmup Iteration  12: 74374545.998 ops/s
# Warmup Iteration  13: 74287317.512 ops/s
# Warmup Iteration  14: 74105803.962 ops/s
# Warmup Iteration  15: 74307713.842 ops/s
# Warmup Iteration  16: 74258675.395 ops/s
# Warmup Iteration  17: 74454956.107 ops/s
# Warmup Iteration  18: 74278111.035 ops/s
# Warmup Iteration  19: 74558626.600 ops/s
# Warmup Iteration  20: 74695404.913 ops/s
# Warmup Iteration  21: 74345858.183 ops/s
# Warmup Iteration  22: 73988432.466 ops/s
# Warmup Iteration  23: 74112618.000 ops/s
# Warmup Iteration  24: 74184177.973 ops/s
# Warmup Iteration  25: 74283896.002 ops/s
# Warmup Iteration  26: 74379468.099 ops/s
# Warmup Iteration  27: 74236396.213 ops/s
# Warmup Iteration  28: 74186688.675 ops/s
# Warmup Iteration  29: 74538477.683 ops/s
# Warmup Iteration  30: 74303277.529 ops/s
Iteration   1: 74745376.854 ops/s
Iteration   2: 74324075.206 ops/s
Iteration   3: 74366832.440 ops/s
Iteration   4: 74073574.477 ops/s
Iteration   5: 74277900.360 ops/s
Iteration   6: 74041173.180 ops/s
Iteration   7: 74355249.263 ops/s
Iteration   8: 74564567.179 ops/s
Iteration   9: 74486990.863 ops/s
Iteration  10: 74350255.570 ops/s
Iteration  11: 73917121.151 ops/s
Iteration  12: 74685455.038 ops/s
Iteration  13: 74684488.144 ops/s
Iteration  14: 74504649.744 ops/s
Iteration  15: 74567307.898 ops/s
Iteration  16: 74170779.555 ops/s
Iteration  17: 74209021.516 ops/s
Iteration  18: 74373665.131 ops/s
Iteration  19: 75015805.631 ops/s
Iteration  20: 74655795.719 ops/s
Iteration  21: 74545889.776 ops/s
Iteration  22: 74704942.034 ops/s
Iteration  23: 74561913.257 ops/s
Iteration  24: 74587298.253 ops/s
Iteration  25: 74333873.427 ops/s
Iteration  26: 74364117.757 ops/s
Iteration  27: 74534052.323 ops/s
Iteration  28: 74493318.414 ops/s
Iteration  29: 74613481.981 ops/s
Iteration  30: 74298196.760 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_indexOf":
  74446905.630 ±(99.9%) 156057.777 ops/s [Average]
  (min, avg, max) = (73917121.151, 74446905.630, 75015805.631), stdev = 233579.951
  CI (99.9%): [74290847.854, 74602963.407] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_indexOf  thrpt   30  74446905.630 ± 156057.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13036165.088 ops/s
# Warmup Iteration   2: 27537254.278 ops/s
# Warmup Iteration   3: 26710907.084 ops/s
# Warmup Iteration   4: 24352652.580 ops/s
# Warmup Iteration   5: 27642899.003 ops/s
# Warmup Iteration   6: 27546201.982 ops/s
# Warmup Iteration   7: 27718805.563 ops/s
# Warmup Iteration   8: 27589965.157 ops/s
# Warmup Iteration   9: 27723657.426 ops/s
# Warmup Iteration  10: 27713132.478 ops/s
# Warmup Iteration  11: 27696262.615 ops/s
# Warmup Iteration  12: 27693112.082 ops/s
# Warmup Iteration  13: 27654095.548 ops/s
# Warmup Iteration  14: 27743557.705 ops/s
# Warmup Iteration  15: 27550874.196 ops/s
# Warmup Iteration  16: 27603105.397 ops/s
# Warmup Iteration  17: 27748604.376 ops/s
# Warmup Iteration  18: 27752747.116 ops/s
# Warmup Iteration  19: 27738763.334 ops/s
# Warmup Iteration  20: 27839491.105 ops/s
# Warmup Iteration  21: 27859978.587 ops/s
# Warmup Iteration  22: 27871048.921 ops/s
# Warmup Iteration  23: 27718876.336 ops/s
# Warmup Iteration  24: 27870864.971 ops/s
# Warmup Iteration  25: 27864699.442 ops/s
# Warmup Iteration  26: 27863344.031 ops/s
# Warmup Iteration  27: 27834130.404 ops/s
# Warmup Iteration  28: 27792690.533 ops/s
# Warmup Iteration  29: 27759066.944 ops/s
# Warmup Iteration  30: 27790384.505 ops/s
Iteration   1: 27789321.099 ops/s
Iteration   2: 27879579.322 ops/s
Iteration   3: 27871525.567 ops/s
Iteration   4: 27824829.564 ops/s
Iteration   5: 27900894.610 ops/s
Iteration   6: 27905454.824 ops/s
Iteration   7: 27812236.159 ops/s
Iteration   8: 27780558.885 ops/s
Iteration   9: 27783251.338 ops/s
Iteration  10: 27770894.194 ops/s
Iteration  11: 27867298.750 ops/s
Iteration  12: 27966167.419 ops/s
Iteration  13: 27829207.053 ops/s
Iteration  14: 27954275.131 ops/s
Iteration  15: 27764420.013 ops/s
Iteration  16: 27730691.951 ops/s
Iteration  17: 27866853.442 ops/s
Iteration  18: 27953822.019 ops/s
Iteration  19: 27959986.835 ops/s
Iteration  20: 27834701.253 ops/s
Iteration  21: 27769005.388 ops/s
Iteration  22: 27792313.448 ops/s
Iteration  23: 27800818.471 ops/s
Iteration  24: 27842596.858 ops/s
Iteration  25: 27859871.657 ops/s
Iteration  26: 27943974.675 ops/s
Iteration  27: 27793149.946 ops/s
Iteration  28: 27681936.876 ops/s
Iteration  29: 27636659.805 ops/s
Iteration  30: 27916228.360 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectInto":
  27836084.164 ±(99.9%) 54812.632 ops/s [Average]
  (min, avg, max) = (27636659.805, 27836084.164, 27966167.419), stdev = 82040.973
  CI (99.9%): [27781271.532, 27890896.795] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_injectInto  thrpt   30  27836084.164 ± 54812.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15542543.818 ops/s
# Warmup Iteration   2: 30742698.368 ops/s
# Warmup Iteration   3: 30016295.549 ops/s
# Warmup Iteration   4: 25328061.521 ops/s
# Warmup Iteration   5: 30058988.166 ops/s
# Warmup Iteration   6: 30010945.464 ops/s
# Warmup Iteration   7: 30081975.847 ops/s
# Warmup Iteration   8: 30032779.227 ops/s
# Warmup Iteration   9: 30011870.851 ops/s
# Warmup Iteration  10: 30026587.647 ops/s
# Warmup Iteration  11: 30043540.382 ops/s
# Warmup Iteration  12: 30077573.991 ops/s
# Warmup Iteration  13: 30084147.802 ops/s
# Warmup Iteration  14: 30064660.159 ops/s
# Warmup Iteration  15: 29967456.464 ops/s
# Warmup Iteration  16: 29993255.766 ops/s
# Warmup Iteration  17: 30060139.121 ops/s
# Warmup Iteration  18: 29979277.254 ops/s
# Warmup Iteration  19: 30112417.923 ops/s
# Warmup Iteration  20: 30039348.578 ops/s
# Warmup Iteration  21: 30128307.282 ops/s
# Warmup Iteration  22: 30121052.794 ops/s
# Warmup Iteration  23: 30122213.090 ops/s
# Warmup Iteration  24: 30110316.749 ops/s
# Warmup Iteration  25: 30115373.706 ops/s
# Warmup Iteration  26: 30073385.183 ops/s
# Warmup Iteration  27: 30194290.459 ops/s
# Warmup Iteration  28: 30103214.640 ops/s
# Warmup Iteration  29: 30105519.413 ops/s
# Warmup Iteration  30: 30080859.337 ops/s
Iteration   1: 30207021.480 ops/s
Iteration   2: 30165382.532 ops/s
Iteration   3: 30113033.151 ops/s
Iteration   4: 30007139.747 ops/s
Iteration   5: 29978499.159 ops/s
Iteration   6: 30103209.750 ops/s
Iteration   7: 30058669.438 ops/s
Iteration   8: 30128457.729 ops/s
Iteration   9: 30012611.904 ops/s
Iteration  10: 30070959.258 ops/s
Iteration  11: 30153209.459 ops/s
Iteration  12: 30132172.569 ops/s
Iteration  13: 30224588.247 ops/s
Iteration  14: 30111583.874 ops/s
Iteration  15: 30118848.560 ops/s
Iteration  16: 30126257.975 ops/s
Iteration  17: 30073462.509 ops/s
Iteration  18: 29971199.667 ops/s
Iteration  19: 30141510.276 ops/s
Iteration  20: 29930701.924 ops/s
Iteration  21: 29835136.946 ops/s
Iteration  22: 29909417.157 ops/s
Iteration  23: 29776273.810 ops/s
Iteration  24: 29722392.118 ops/s
Iteration  25: 29641012.195 ops/s
Iteration  26: 29851893.169 ops/s
Iteration  27: 30068842.710 ops/s
Iteration  28: 30150193.150 ops/s
Iteration  29: 29944795.590 ops/s
Iteration  30: 30100857.000 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoDouble":
  30027644.435 ±(99.9%) 97306.018 ops/s [Average]
  (min, avg, max) = (29641012.195, 30027644.435, 30224588.247), stdev = 145643.077
  CI (99.9%): [29930338.418, 30124950.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  30027644.435 ± 97306.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14617149.084 ops/s
# Warmup Iteration   2: 29713782.144 ops/s
# Warmup Iteration   3: 28616134.071 ops/s
# Warmup Iteration   4: 25084286.732 ops/s
# Warmup Iteration   5: 30132595.051 ops/s
# Warmup Iteration   6: 30024142.668 ops/s
# Warmup Iteration   7: 30025664.082 ops/s
# Warmup Iteration   8: 30135096.421 ops/s
# Warmup Iteration   9: 30101678.483 ops/s
# Warmup Iteration  10: 30099928.475 ops/s
# Warmup Iteration  11: 30155018.059 ops/s
# Warmup Iteration  12: 30006814.964 ops/s
# Warmup Iteration  13: 30061778.200 ops/s
# Warmup Iteration  14: 30012287.232 ops/s
# Warmup Iteration  15: 30110591.422 ops/s
# Warmup Iteration  16: 29958967.589 ops/s
# Warmup Iteration  17: 30109032.396 ops/s
# Warmup Iteration  18: 30087222.910 ops/s
# Warmup Iteration  19: 30063843.988 ops/s
# Warmup Iteration  20: 30052958.903 ops/s
# Warmup Iteration  21: 30068003.083 ops/s
# Warmup Iteration  22: 29988068.647 ops/s
# Warmup Iteration  23: 30178977.001 ops/s
# Warmup Iteration  24: 30038590.922 ops/s
# Warmup Iteration  25: 30143815.954 ops/s
# Warmup Iteration  26: 30126685.887 ops/s
# Warmup Iteration  27: 30131322.768 ops/s
# Warmup Iteration  28: 30086273.259 ops/s
# Warmup Iteration  29: 30066305.237 ops/s
# Warmup Iteration  30: 30075184.298 ops/s
Iteration   1: 30202113.921 ops/s
Iteration   2: 30056361.295 ops/s
Iteration   3: 30127588.147 ops/s
Iteration   4: 30071315.255 ops/s
Iteration   5: 30053230.862 ops/s
Iteration   6: 29954906.574 ops/s
Iteration   7: 30060260.605 ops/s
Iteration   8: 30240064.320 ops/s
Iteration   9: 30161714.917 ops/s
Iteration  10: 30188948.976 ops/s
Iteration  11: 30142405.086 ops/s
Iteration  12: 29938798.153 ops/s
Iteration  13: 30121096.884 ops/s
Iteration  14: 29911455.042 ops/s
Iteration  15: 30197412.152 ops/s
Iteration  16: 30079699.748 ops/s
Iteration  17: 30108994.514 ops/s
Iteration  18: 30114088.389 ops/s
Iteration  19: 30117493.112 ops/s
Iteration  20: 30095132.810 ops/s
Iteration  21: 29945176.390 ops/s
Iteration  22: 29994360.355 ops/s
Iteration  23: 29890843.710 ops/s
Iteration  24: 29976304.873 ops/s
Iteration  25: 30204280.785 ops/s
Iteration  26: 30056472.471 ops/s
Iteration  27: 30128927.397 ops/s
Iteration  28: 30111417.011 ops/s
Iteration  29: 29989916.287 ops/s
Iteration  30: 30023573.621 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoFloat":
  30075478.455 ±(99.9%) 62304.464 ops/s [Average]
  (min, avg, max) = (29890843.710, 30075478.455, 30240064.320), stdev = 93254.396
  CI (99.9%): [30013173.991, 30137782.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  30075478.455 ± 62304.464  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15730179.202 ops/s
# Warmup Iteration   2: 31015477.592 ops/s
# Warmup Iteration   3: 31788705.876 ops/s
# Warmup Iteration   4: 26643239.245 ops/s
# Warmup Iteration   5: 29301850.430 ops/s
# Warmup Iteration   6: 29264893.025 ops/s
# Warmup Iteration   7: 29291410.430 ops/s
# Warmup Iteration   8: 29352843.902 ops/s
# Warmup Iteration   9: 29227390.388 ops/s
# Warmup Iteration  10: 29219238.265 ops/s
# Warmup Iteration  11: 29300988.091 ops/s
# Warmup Iteration  12: 29218002.175 ops/s
# Warmup Iteration  13: 29290311.397 ops/s
# Warmup Iteration  14: 29222485.722 ops/s
# Warmup Iteration  15: 29286036.622 ops/s
# Warmup Iteration  16: 29148608.316 ops/s
# Warmup Iteration  17: 29308183.836 ops/s
# Warmup Iteration  18: 29368755.857 ops/s
# Warmup Iteration  19: 29248585.259 ops/s
# Warmup Iteration  20: 29278811.389 ops/s
# Warmup Iteration  21: 29277850.610 ops/s
# Warmup Iteration  22: 29298771.591 ops/s
# Warmup Iteration  23: 29318590.133 ops/s
# Warmup Iteration  24: 29327916.055 ops/s
# Warmup Iteration  25: 29325588.643 ops/s
# Warmup Iteration  26: 29324645.751 ops/s
# Warmup Iteration  27: 29280442.007 ops/s
# Warmup Iteration  28: 29203627.623 ops/s
# Warmup Iteration  29: 29112382.020 ops/s
# Warmup Iteration  30: 29277269.033 ops/s
Iteration   1: 29397212.997 ops/s
Iteration   2: 29380448.194 ops/s
Iteration   3: 29215249.252 ops/s
Iteration   4: 29232012.338 ops/s
Iteration   5: 29221500.662 ops/s
Iteration   6: 29360276.498 ops/s
Iteration   7: 29324247.995 ops/s
Iteration   8: 29256705.427 ops/s
Iteration   9: 29303267.919 ops/s
Iteration  10: 29345562.653 ops/s
Iteration  11: 29272567.437 ops/s
Iteration  12: 29374521.751 ops/s
Iteration  13: 29314585.425 ops/s
Iteration  14: 29200933.685 ops/s
Iteration  15: 29311607.108 ops/s
Iteration  16: 29300641.952 ops/s
Iteration  17: 29151790.781 ops/s
Iteration  18: 29230771.680 ops/s
Iteration  19: 29234448.037 ops/s
Iteration  20: 29223821.222 ops/s
Iteration  21: 29193273.847 ops/s
Iteration  22: 29259262.465 ops/s
Iteration  23: 29250055.421 ops/s
Iteration  24: 29223478.219 ops/s
Iteration  25: 29294644.443 ops/s
Iteration  26: 29181520.870 ops/s
Iteration  27: 29156856.147 ops/s
Iteration  28: 29216917.637 ops/s
Iteration  29: 29202935.801 ops/s
Iteration  30: 29210913.512 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoInt":
  29261401.046 ±(99.9%) 44890.255 ops/s [Average]
  (min, avg, max) = (29151790.781, 29261401.046, 29397212.997), stdev = 67189.626
  CI (99.9%): [29216510.791, 29306291.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  29261401.046 ± 44890.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16566421.851 ops/s
# Warmup Iteration   2: 32932115.191 ops/s
# Warmup Iteration   3: 32561000.465 ops/s
# Warmup Iteration   4: 27792204.543 ops/s
# Warmup Iteration   5: 32646205.322 ops/s
# Warmup Iteration   6: 32876867.654 ops/s
# Warmup Iteration   7: 32758333.753 ops/s
# Warmup Iteration   8: 32809801.228 ops/s
# Warmup Iteration   9: 32804883.211 ops/s
# Warmup Iteration  10: 32645392.414 ops/s
# Warmup Iteration  11: 32843971.945 ops/s
# Warmup Iteration  12: 32736873.976 ops/s
# Warmup Iteration  13: 32730529.181 ops/s
# Warmup Iteration  14: 32650710.710 ops/s
# Warmup Iteration  15: 32634436.449 ops/s
# Warmup Iteration  16: 32679015.392 ops/s
# Warmup Iteration  17: 32759871.313 ops/s
# Warmup Iteration  18: 32664775.812 ops/s
# Warmup Iteration  19: 32728251.896 ops/s
# Warmup Iteration  20: 32621248.768 ops/s
# Warmup Iteration  21: 32826349.379 ops/s
# Warmup Iteration  22: 32773224.222 ops/s
# Warmup Iteration  23: 32704567.096 ops/s
# Warmup Iteration  24: 32751631.898 ops/s
# Warmup Iteration  25: 32728865.672 ops/s
# Warmup Iteration  26: 32689061.389 ops/s
# Warmup Iteration  27: 32742738.279 ops/s
# Warmup Iteration  28: 32764814.739 ops/s
# Warmup Iteration  29: 32648288.867 ops/s
# Warmup Iteration  30: 32776815.579 ops/s
Iteration   1: 32723856.043 ops/s
Iteration   2: 32626828.903 ops/s
Iteration   3: 32753363.860 ops/s
Iteration   4: 32626266.103 ops/s
Iteration   5: 32752819.666 ops/s
Iteration   6: 32680456.665 ops/s
Iteration   7: 32635852.849 ops/s
Iteration   8: 32659796.922 ops/s
Iteration   9: 32712753.321 ops/s
Iteration  10: 32495029.364 ops/s
Iteration  11: 32621482.014 ops/s
Iteration  12: 32668150.960 ops/s
Iteration  13: 32740336.096 ops/s
Iteration  14: 32703202.902 ops/s
Iteration  15: 32779602.804 ops/s
Iteration  16: 32602856.816 ops/s
Iteration  17: 32630973.993 ops/s
Iteration  18: 32683461.751 ops/s
Iteration  19: 32759551.605 ops/s
Iteration  20: 32791198.576 ops/s
Iteration  21: 32770620.858 ops/s
Iteration  22: 32689099.155 ops/s
Iteration  23: 32781305.663 ops/s
Iteration  24: 32825167.947 ops/s
Iteration  25: 32747419.422 ops/s
Iteration  26: 32717685.798 ops/s
Iteration  27: 32740650.376 ops/s
Iteration  28: 32618922.804 ops/s
Iteration  29: 32676550.521 ops/s
Iteration  30: 32800762.944 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoLong":
  32700534.223 ±(99.9%) 48945.903 ops/s [Average]
  (min, avg, max) = (32495029.364, 32700534.223, 32825167.947), stdev = 73259.929
  CI (99.9%): [32651588.320, 32749480.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  32700534.223 ± 48945.903  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44184850.098 ops/s
# Warmup Iteration   2: 86498106.099 ops/s
# Warmup Iteration   3: 76941712.557 ops/s
# Warmup Iteration   4: 89838468.691 ops/s
# Warmup Iteration   5: 89801073.723 ops/s
# Warmup Iteration   6: 90002108.676 ops/s
# Warmup Iteration   7: 90130749.942 ops/s
# Warmup Iteration   8: 90077125.822 ops/s
# Warmup Iteration   9: 89964151.611 ops/s
# Warmup Iteration  10: 90149723.904 ops/s
# Warmup Iteration  11: 90018490.307 ops/s
# Warmup Iteration  12: 90062261.990 ops/s
# Warmup Iteration  13: 89717163.457 ops/s
# Warmup Iteration  14: 90148185.315 ops/s
# Warmup Iteration  15: 90103107.381 ops/s
# Warmup Iteration  16: 90342842.571 ops/s
# Warmup Iteration  17: 90212733.964 ops/s
# Warmup Iteration  18: 89837378.450 ops/s
# Warmup Iteration  19: 90087772.568 ops/s
# Warmup Iteration  20: 89999334.073 ops/s
# Warmup Iteration  21: 90470086.734 ops/s
# Warmup Iteration  22: 90119586.913 ops/s
# Warmup Iteration  23: 90084412.619 ops/s
# Warmup Iteration  24: 90011934.263 ops/s
# Warmup Iteration  25: 90065652.700 ops/s
# Warmup Iteration  26: 89869738.291 ops/s
# Warmup Iteration  27: 89833552.486 ops/s
# Warmup Iteration  28: 89407523.094 ops/s
# Warmup Iteration  29: 90135239.871 ops/s
# Warmup Iteration  30: 90104375.198 ops/s
Iteration   1: 90024371.030 ops/s
Iteration   2: 89965256.060 ops/s
Iteration   3: 90171951.500 ops/s
Iteration   4: 90102477.022 ops/s
Iteration   5: 89886208.456 ops/s
Iteration   6: 89866949.674 ops/s
Iteration   7: 90224201.650 ops/s
Iteration   8: 89852968.398 ops/s
Iteration   9: 90036447.077 ops/s
Iteration  10: 89693364.843 ops/s
Iteration  11: 89420841.321 ops/s
Iteration  12: 89652446.635 ops/s
Iteration  13: 89530628.548 ops/s
Iteration  14: 90161454.513 ops/s
Iteration  15: 90410920.071 ops/s
Iteration  16: 89991040.894 ops/s
Iteration  17: 90198482.603 ops/s
Iteration  18: 90110604.013 ops/s
Iteration  19: 90064469.634 ops/s
Iteration  20: 89381331.195 ops/s
Iteration  21: 89435087.122 ops/s
Iteration  22: 90139274.502 ops/s
Iteration  23: 90395905.491 ops/s
Iteration  24: 89941830.476 ops/s
Iteration  25: 90449206.323 ops/s
Iteration  26: 90040857.458 ops/s
Iteration  27: 89808069.446 ops/s
Iteration  28: 90190779.129 ops/s
Iteration  29: 89987782.920 ops/s
Iteration  30: 90349344.372 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_isEmpty":
  89982818.413 ±(99.9%) 193736.804 ops/s [Average]
  (min, avg, max) = (89381331.195, 89982818.413, 90449206.323), stdev = 289976.150
  CI (99.9%): [89789081.608, 90176555.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_isEmpty  thrpt   30  89982818.413 ± 193736.804  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 382127.159 ops/s
# Warmup Iteration   2: 393682.601 ops/s
# Warmup Iteration   3: 467908.031 ops/s
# Warmup Iteration   4: 495029.286 ops/s
# Warmup Iteration   5: 496890.778 ops/s
# Warmup Iteration   6: 493484.398 ops/s
# Warmup Iteration   7: 498138.817 ops/s
# Warmup Iteration   8: 494740.195 ops/s
# Warmup Iteration   9: 495184.114 ops/s
# Warmup Iteration  10: 494863.091 ops/s
# Warmup Iteration  11: 496491.156 ops/s
# Warmup Iteration  12: 496286.828 ops/s
# Warmup Iteration  13: 494889.273 ops/s
# Warmup Iteration  14: 419924.244 ops/s
# Warmup Iteration  15: 495502.933 ops/s
# Warmup Iteration  16: 495214.800 ops/s
# Warmup Iteration  17: 526563.265 ops/s
# Warmup Iteration  18: 525088.892 ops/s
# Warmup Iteration  19: 525383.202 ops/s
# Warmup Iteration  20: 525211.390 ops/s
# Warmup Iteration  21: 525225.703 ops/s
# Warmup Iteration  22: 526561.803 ops/s
# Warmup Iteration  23: 525063.962 ops/s
# Warmup Iteration  24: 522740.945 ops/s
# Warmup Iteration  25: 521631.679 ops/s
# Warmup Iteration  26: 523252.698 ops/s
# Warmup Iteration  27: 522286.710 ops/s
# Warmup Iteration  28: 525854.799 ops/s
# Warmup Iteration  29: 524949.283 ops/s
# Warmup Iteration  30: 524523.754 ops/s
Iteration   1: 525428.418 ops/s
Iteration   2: 527972.077 ops/s
Iteration   3: 527862.608 ops/s
Iteration   4: 527363.373 ops/s
Iteration   5: 526176.524 ops/s
Iteration   6: 527009.992 ops/s
Iteration   7: 525865.279 ops/s
Iteration   8: 525601.443 ops/s
Iteration   9: 525007.945 ops/s
Iteration  10: 529447.094 ops/s
Iteration  11: 528052.959 ops/s
Iteration  12: 525198.289 ops/s
Iteration  13: 527082.136 ops/s
Iteration  14: 525196.888 ops/s
Iteration  15: 529079.252 ops/s
Iteration  16: 526328.004 ops/s
Iteration  17: 525188.360 ops/s
Iteration  18: 524085.177 ops/s
Iteration  19: 522941.411 ops/s
Iteration  20: 525500.784 ops/s
Iteration  21: 525124.596 ops/s
Iteration  22: 525342.540 ops/s
Iteration  23: 521741.662 ops/s
Iteration  24: 526351.219 ops/s
Iteration  25: 527396.727 ops/s
Iteration  26: 527784.799 ops/s
Iteration  27: 524372.627 ops/s
Iteration  28: 524309.479 ops/s
Iteration  29: 525439.318 ops/s
Iteration  30: 527989.046 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_iterator":
  526074.668 ±(99.9%) 1164.051 ops/s [Average]
  (min, avg, max) = (521741.662, 526074.668, 529447.094), stdev = 1742.297
  CI (99.9%): [524910.616, 527238.719] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_iterator  thrpt   30  526074.668 ± 1164.051  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 741376.467 ops/s
# Warmup Iteration   2: 788929.021 ops/s
# Warmup Iteration   3: 995238.394 ops/s
# Warmup Iteration   4: 988800.800 ops/s
# Warmup Iteration   5: 983994.500 ops/s
# Warmup Iteration   6: 989365.232 ops/s
# Warmup Iteration   7: 984231.545 ops/s
# Warmup Iteration   8: 985457.493 ops/s
# Warmup Iteration   9: 988109.447 ops/s
# Warmup Iteration  10: 984024.892 ops/s
# Warmup Iteration  11: 931683.328 ops/s
# Warmup Iteration  12: 897583.211 ops/s
# Warmup Iteration  13: 989152.472 ops/s
# Warmup Iteration  14: 988618.802 ops/s
# Warmup Iteration  15: 989547.943 ops/s
# Warmup Iteration  16: 986738.136 ops/s
# Warmup Iteration  17: 1054277.363 ops/s
# Warmup Iteration  18: 1050077.674 ops/s
# Warmup Iteration  19: 1050334.202 ops/s
# Warmup Iteration  20: 1049933.238 ops/s
# Warmup Iteration  21: 1047207.275 ops/s
# Warmup Iteration  22: 1044215.263 ops/s
# Warmup Iteration  23: 1045421.714 ops/s
# Warmup Iteration  24: 1050507.299 ops/s
# Warmup Iteration  25: 1039922.581 ops/s
# Warmup Iteration  26: 1051027.650 ops/s
# Warmup Iteration  27: 1049677.344 ops/s
# Warmup Iteration  28: 1053355.505 ops/s
# Warmup Iteration  29: 1052548.105 ops/s
# Warmup Iteration  30: 1054126.913 ops/s
Iteration   1: 1051017.489 ops/s
Iteration   2: 1044087.607 ops/s
Iteration   3: 1047310.259 ops/s
Iteration   4: 1050050.269 ops/s
Iteration   5: 1048385.390 ops/s
Iteration   6: 1049139.890 ops/s
Iteration   7: 1053295.187 ops/s
Iteration   8: 1048637.868 ops/s
Iteration   9: 1049315.688 ops/s
Iteration  10: 1049793.757 ops/s
Iteration  11: 1051992.292 ops/s
Iteration  12: 858648.752 ops/s
Iteration  13: 889898.948 ops/s
Iteration  14: 1044379.378 ops/s
Iteration  15: 1047976.732 ops/s
Iteration  16: 1047814.131 ops/s
Iteration  17: 1048957.610 ops/s
Iteration  18: 1050181.216 ops/s
Iteration  19: 1047333.966 ops/s
Iteration  20: 1046871.087 ops/s
Iteration  21: 1052103.223 ops/s
Iteration  22: 1050695.018 ops/s
Iteration  23: 1050495.725 ops/s
Iteration  24: 1048770.687 ops/s
Iteration  25: 1051606.896 ops/s
Iteration  26: 1048598.761 ops/s
Iteration  27: 1044143.025 ops/s
Iteration  28: 1042766.426 ops/s
Iteration  29: 1049762.320 ops/s
Iteration  30: 1046976.599 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_iteratorRemove":
  1037033.540 ±(99.9%) 29732.528 ops/s [Average]
  (min, avg, max) = (858648.752, 1037033.540, 1053295.187), stdev = 44502.251
  CI (99.9%): [1007301.012, 1066766.067] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1037033.540 ± 29732.528  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 39061790.621 ops/s
# Warmup Iteration   2: 76431824.321 ops/s
# Warmup Iteration   3: 70578184.963 ops/s
# Warmup Iteration   4: 82145817.365 ops/s
# Warmup Iteration   5: 83015234.819 ops/s
# Warmup Iteration   6: 82847661.020 ops/s
# Warmup Iteration   7: 82608247.425 ops/s
# Warmup Iteration   8: 82539928.814 ops/s
# Warmup Iteration   9: 82608701.788 ops/s
# Warmup Iteration  10: 82810826.283 ops/s
# Warmup Iteration  11: 82302826.279 ops/s
# Warmup Iteration  12: 82407869.457 ops/s
# Warmup Iteration  13: 82219967.929 ops/s
# Warmup Iteration  14: 82710404.285 ops/s
# Warmup Iteration  15: 82716838.904 ops/s
# Warmup Iteration  16: 83011474.179 ops/s
# Warmup Iteration  17: 82770039.679 ops/s
# Warmup Iteration  18: 82947297.156 ops/s
# Warmup Iteration  19: 82271608.306 ops/s
# Warmup Iteration  20: 81912271.642 ops/s
# Warmup Iteration  21: 82025422.226 ops/s
# Warmup Iteration  22: 82972758.835 ops/s
# Warmup Iteration  23: 82297090.060 ops/s
# Warmup Iteration  24: 82804928.877 ops/s
# Warmup Iteration  25: 82782953.564 ops/s
# Warmup Iteration  26: 82315219.807 ops/s
# Warmup Iteration  27: 82989482.626 ops/s
# Warmup Iteration  28: 82813931.071 ops/s
# Warmup Iteration  29: 82582740.200 ops/s
# Warmup Iteration  30: 82530744.217 ops/s
Iteration   1: 82313181.323 ops/s
Iteration   2: 82248935.149 ops/s
Iteration   3: 82439026.877 ops/s
Iteration   4: 82523477.567 ops/s
Iteration   5: 82861028.371 ops/s
Iteration   6: 83217837.443 ops/s
Iteration   7: 81477805.837 ops/s
Iteration   8: 82450242.134 ops/s
Iteration   9: 82734795.199 ops/s
Iteration  10: 82557553.729 ops/s
Iteration  11: 82191496.818 ops/s
Iteration  12: 82246058.114 ops/s
Iteration  13: 82432785.142 ops/s
Iteration  14: 82848371.246 ops/s
Iteration  15: 82685192.208 ops/s
Iteration  16: 82776522.508 ops/s
Iteration  17: 82315441.912 ops/s
Iteration  18: 82608361.938 ops/s
Iteration  19: 82561121.728 ops/s
Iteration  20: 82408489.040 ops/s
Iteration  21: 82184762.312 ops/s
Iteration  22: 82244159.400 ops/s
Iteration  23: 82665907.952 ops/s
Iteration  24: 82682549.574 ops/s
Iteration  25: 82708745.698 ops/s
Iteration  26: 82682017.211 ops/s
Iteration  27: 82422128.826 ops/s
Iteration  28: 82754859.502 ops/s
Iteration  29: 83079872.626 ops/s
Iteration  30: 82589769.097 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_lastIndexOf":
  82530416.549 ±(99.9%) 214809.101 ops/s [Average]
  (min, avg, max) = (81477805.837, 82530416.549, 83217837.443), stdev = 321516.174
  CI (99.9%): [82315607.449, 82745225.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  82530416.549 ± 214809.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 147952.850 ops/s
# Warmup Iteration   2: 155353.250 ops/s
# Warmup Iteration   3: 188834.786 ops/s
# Warmup Iteration   4: 196834.939 ops/s
# Warmup Iteration   5: 196714.057 ops/s
# Warmup Iteration   6: 195548.140 ops/s
# Warmup Iteration   7: 196119.667 ops/s
# Warmup Iteration   8: 196913.049 ops/s
# Warmup Iteration   9: 196702.936 ops/s
# Warmup Iteration  10: 197524.972 ops/s
# Warmup Iteration  11: 196902.720 ops/s
# Warmup Iteration  12: 197034.524 ops/s
# Warmup Iteration  13: 175836.389 ops/s
# Warmup Iteration  14: 188510.174 ops/s
# Warmup Iteration  15: 194976.403 ops/s
# Warmup Iteration  16: 194476.891 ops/s
# Warmup Iteration  17: 207031.510 ops/s
# Warmup Iteration  18: 208863.826 ops/s
# Warmup Iteration  19: 208903.159 ops/s
# Warmup Iteration  20: 208494.336 ops/s
# Warmup Iteration  21: 208583.520 ops/s
# Warmup Iteration  22: 209286.362 ops/s
# Warmup Iteration  23: 209029.082 ops/s
# Warmup Iteration  24: 208632.869 ops/s
# Warmup Iteration  25: 208854.587 ops/s
# Warmup Iteration  26: 209221.523 ops/s
# Warmup Iteration  27: 208882.520 ops/s
# Warmup Iteration  28: 209135.982 ops/s
# Warmup Iteration  29: 208812.164 ops/s
# Warmup Iteration  30: 209269.803 ops/s
Iteration   1: 208408.205 ops/s
Iteration   2: 208374.015 ops/s
Iteration   3: 208713.305 ops/s
Iteration   4: 209088.453 ops/s
Iteration   5: 207677.616 ops/s
Iteration   6: 206791.065 ops/s
Iteration   7: 208728.119 ops/s
Iteration   8: 208294.686 ops/s
Iteration   9: 208771.906 ops/s
Iteration  10: 208317.651 ops/s
Iteration  11: 208545.917 ops/s
Iteration  12: 206907.326 ops/s
Iteration  13: 206751.853 ops/s
Iteration  14: 207034.817 ops/s
Iteration  15: 208118.229 ops/s
Iteration  16: 208824.229 ops/s
Iteration  17: 208600.801 ops/s
Iteration  18: 209484.974 ops/s
Iteration  19: 206872.507 ops/s
Iteration  20: 209328.171 ops/s
Iteration  21: 209485.545 ops/s
Iteration  22: 209392.675 ops/s
Iteration  23: 208820.293 ops/s
Iteration  24: 208403.213 ops/s
Iteration  25: 209244.619 ops/s
Iteration  26: 209156.836 ops/s
Iteration  27: 208956.412 ops/s
Iteration  28: 208540.008 ops/s
Iteration  29: 209277.932 ops/s
Iteration  30: 209070.188 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_listIterator":
  208466.052 ±(99.9%) 561.637 ops/s [Average]
  (min, avg, max) = (206751.853, 208466.052, 209485.545), stdev = 840.632
  CI (99.9%): [207904.415, 209027.689] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_listIterator  thrpt   30  208466.052 ± 561.637  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 772273.248 ops/s
# Warmup Iteration   2: 799012.086 ops/s
# Warmup Iteration   3: 993232.522 ops/s
# Warmup Iteration   4: 1022532.339 ops/s
# Warmup Iteration   5: 1020333.888 ops/s
# Warmup Iteration   6: 1018357.454 ops/s
# Warmup Iteration   7: 1024352.572 ops/s
# Warmup Iteration   8: 1021284.597 ops/s
# Warmup Iteration   9: 1018713.518 ops/s
# Warmup Iteration  10: 1022283.458 ops/s
# Warmup Iteration  11: 1022441.113 ops/s
# Warmup Iteration  12: 1014286.250 ops/s
# Warmup Iteration  13: 872166.219 ops/s
# Warmup Iteration  14: 1023944.576 ops/s
# Warmup Iteration  15: 1022164.959 ops/s
# Warmup Iteration  16: 1024864.380 ops/s
# Warmup Iteration  17: 1089923.854 ops/s
# Warmup Iteration  18: 1087255.318 ops/s
# Warmup Iteration  19: 1086638.026 ops/s
# Warmup Iteration  20: 1085345.717 ops/s
# Warmup Iteration  21: 1087378.185 ops/s
# Warmup Iteration  22: 1085113.062 ops/s
# Warmup Iteration  23: 1084713.944 ops/s
# Warmup Iteration  24: 1086087.816 ops/s
# Warmup Iteration  25: 1086692.460 ops/s
# Warmup Iteration  26: 1084479.428 ops/s
# Warmup Iteration  27: 1085674.916 ops/s
# Warmup Iteration  28: 1084496.347 ops/s
# Warmup Iteration  29: 1086026.002 ops/s
# Warmup Iteration  30: 1082532.191 ops/s
Iteration   1: 1089929.405 ops/s
Iteration   2: 1089338.977 ops/s
Iteration   3: 1089683.970 ops/s
Iteration   4: 1083014.675 ops/s
Iteration   5: 1086472.983 ops/s
Iteration   6: 1090616.919 ops/s
Iteration   7: 1085633.630 ops/s
Iteration   8: 1085465.646 ops/s
Iteration   9: 1089136.171 ops/s
Iteration  10: 1088751.882 ops/s
Iteration  11: 1088785.502 ops/s
Iteration  12: 1084447.414 ops/s
Iteration  13: 1086355.144 ops/s
Iteration  14: 1087803.823 ops/s
Iteration  15: 1088446.604 ops/s
Iteration  16: 1082474.167 ops/s
Iteration  17: 1088758.420 ops/s
Iteration  18: 1088970.351 ops/s
Iteration  19: 1089362.092 ops/s
Iteration  20: 1080241.184 ops/s
Iteration  21: 1085353.755 ops/s
Iteration  22: 1083196.756 ops/s
Iteration  23: 1087032.822 ops/s
Iteration  24: 1084650.677 ops/s
Iteration  25: 1081277.412 ops/s
Iteration  26: 1083563.039 ops/s
Iteration  27: 1089305.237 ops/s
Iteration  28: 1087941.904 ops/s
Iteration  29: 1086319.232 ops/s
Iteration  30: 1088355.775 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize":
  1086689.519 ±(99.9%) 1868.394 ops/s [Average]
  (min, avg, max) = (1080241.184, 1086689.519, 1090616.919), stdev = 2796.524
  CI (99.9%): [1084821.125, 1088557.913] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize  thrpt   30  1086689.519 ± 1868.394  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_listIterator_throwsNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_listIterator_throwsNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 772877.180 ops/s
# Warmup Iteration   2: 803467.889 ops/s
# Warmup Iteration   3: 1004755.155 ops/s
# Warmup Iteration   4: 1032345.400 ops/s
# Warmup Iteration   5: 1031361.209 ops/s
# Warmup Iteration   6: 1026627.537 ops/s
# Warmup Iteration   7: 1029303.063 ops/s
# Warmup Iteration   8: 1029500.715 ops/s
# Warmup Iteration   9: 1030653.171 ops/s
# Warmup Iteration  10: 1028452.031 ops/s
# Warmup Iteration  11: 1025297.699 ops/s
# Warmup Iteration  12: 1000280.326 ops/s
# Warmup Iteration  13: 885343.727 ops/s
# Warmup Iteration  14: 1014652.575 ops/s
# Warmup Iteration  15: 1025803.735 ops/s
# Warmup Iteration  16: 1026401.166 ops/s
# Warmup Iteration  17: 1092773.442 ops/s
# Warmup Iteration  18: 1093729.358 ops/s
# Warmup Iteration  19: 1096701.293 ops/s
# Warmup Iteration  20: 1092714.800 ops/s
# Warmup Iteration  21: 1093332.331 ops/s
# Warmup Iteration  22: 1092752.135 ops/s
# Warmup Iteration  23: 1095201.395 ops/s
# Warmup Iteration  24: 1095985.888 ops/s
# Warmup Iteration  25: 1094417.754 ops/s
# Warmup Iteration  26: 1094728.047 ops/s
# Warmup Iteration  27: 1091948.500 ops/s
# Warmup Iteration  28: 1088993.422 ops/s
# Warmup Iteration  29: 1093905.426 ops/s
# Warmup Iteration  30: 1090197.207 ops/s
Iteration   1: 1093560.284 ops/s
Iteration   2: 1091011.736 ops/s
Iteration   3: 1095905.253 ops/s
Iteration   4: 1097632.324 ops/s
Iteration   5: 1084590.412 ops/s
Iteration   6: 1087834.444 ops/s
Iteration   7: 1083889.569 ops/s
Iteration   8: 1095491.964 ops/s
Iteration   9: 1094087.379 ops/s
Iteration  10: 1097279.296 ops/s
Iteration  11: 1096431.361 ops/s
Iteration  12: 1092342.918 ops/s
Iteration  13: 1097003.552 ops/s
Iteration  14: 1093729.767 ops/s
Iteration  15: 1094055.338 ops/s
Iteration  16: 1089010.775 ops/s
Iteration  17: 1095177.241 ops/s
Iteration  18: 1095306.386 ops/s
Iteration  19: 1092274.747 ops/s
Iteration  20: 1094426.659 ops/s
Iteration  21: 1095460.566 ops/s
Iteration  22: 1094484.620 ops/s
Iteration  23: 1096811.570 ops/s
Iteration  24: 1097312.597 ops/s
Iteration  25: 1098731.179 ops/s
Iteration  26: 1098065.756 ops/s
Iteration  27: 1098013.076 ops/s
Iteration  28: 1096326.714 ops/s
Iteration  29: 1095023.640 ops/s
Iteration  30: 1093690.855 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_listIterator_throwsNegative":
  1094165.399 ±(99.9%) 2476.993 ops/s [Average]
  (min, avg, max) = (1083889.569, 1094165.399, 1098731.179), stdev = 3707.446
  CI (99.9%): [1091688.407, 1096642.392] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_listIterator_throwsNegative  thrpt   30  1094165.399 ± 2476.993  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 472327.837 ops/s
# Warmup Iteration   2: 1089066.649 ops/s
# Warmup Iteration   3: 1093262.121 ops/s
# Warmup Iteration   4: 915940.987 ops/s
# Warmup Iteration   5: 1091111.257 ops/s
# Warmup Iteration   6: 1092052.760 ops/s
# Warmup Iteration   7: 1095386.144 ops/s
# Warmup Iteration   8: 1094028.102 ops/s
# Warmup Iteration   9: 1090285.224 ops/s
# Warmup Iteration  10: 1095096.561 ops/s
# Warmup Iteration  11: 1093444.600 ops/s
# Warmup Iteration  12: 1088864.902 ops/s
# Warmup Iteration  13: 1094819.840 ops/s
# Warmup Iteration  14: 1091637.074 ops/s
# Warmup Iteration  15: 1093812.817 ops/s
# Warmup Iteration  16: 1095044.768 ops/s
# Warmup Iteration  17: 1094309.595 ops/s
# Warmup Iteration  18: 1094093.956 ops/s
# Warmup Iteration  19: 1092069.805 ops/s
# Warmup Iteration  20: 1093056.524 ops/s
# Warmup Iteration  21: 1085748.636 ops/s
# Warmup Iteration  22: 1092110.221 ops/s
# Warmup Iteration  23: 1092021.025 ops/s
# Warmup Iteration  24: 1097120.613 ops/s
# Warmup Iteration  25: 1095665.519 ops/s
# Warmup Iteration  26: 1094638.624 ops/s
# Warmup Iteration  27: 1093350.796 ops/s
# Warmup Iteration  28: 1094056.008 ops/s
# Warmup Iteration  29: 1092714.623 ops/s
# Warmup Iteration  30: 1093421.659 ops/s
Iteration   1: 1093614.404 ops/s
Iteration   2: 1092245.581 ops/s
Iteration   3: 1092101.025 ops/s
Iteration   4: 1093424.903 ops/s
Iteration   5: 1095917.496 ops/s
Iteration   6: 1095434.454 ops/s
Iteration   7: 1097456.735 ops/s
Iteration   8: 1093304.758 ops/s
Iteration   9: 1096983.233 ops/s
Iteration  10: 1089765.514 ops/s
Iteration  11: 1095459.420 ops/s
Iteration  12: 1092238.590 ops/s
Iteration  13: 1093841.519 ops/s
Iteration  14: 1092297.869 ops/s
Iteration  15: 1093946.963 ops/s
Iteration  16: 1095263.613 ops/s
Iteration  17: 1093637.682 ops/s
Iteration  18: 1085268.643 ops/s
Iteration  19: 1081352.923 ops/s
Iteration  20: 1091803.567 ops/s
Iteration  21: 1092893.712 ops/s
Iteration  22: 1094971.254 ops/s
Iteration  23: 1093973.359 ops/s
Iteration  24: 1098667.213 ops/s
Iteration  25: 1094028.500 ops/s
Iteration  26: 1094761.708 ops/s
Iteration  27: 1092291.281 ops/s
Iteration  28: 1095324.009 ops/s
Iteration  29: 1094001.808 ops/s
Iteration  30: 1093849.722 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_makeString":
  1093337.382 ±(99.9%) 2216.266 ops/s [Average]
  (min, avg, max) = (1081352.923, 1093337.382, 1098667.213), stdev = 3317.203
  CI (99.9%): [1091121.116, 1095553.648] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_makeString  thrpt   30  1093337.382 ± 2216.266  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21459568.077 ops/s
# Warmup Iteration   2: 42139988.310 ops/s
# Warmup Iteration   3: 40013738.732 ops/s
# Warmup Iteration   4: 40328342.942 ops/s
# Warmup Iteration   5: 33973576.184 ops/s
# Warmup Iteration   6: 40498165.060 ops/s
# Warmup Iteration   7: 40473380.598 ops/s
# Warmup Iteration   8: 39951761.367 ops/s
# Warmup Iteration   9: 39845712.548 ops/s
# Warmup Iteration  10: 40343470.744 ops/s
# Warmup Iteration  11: 40462934.117 ops/s
# Warmup Iteration  12: 40327857.925 ops/s
# Warmup Iteration  13: 40292860.880 ops/s
# Warmup Iteration  14: 40467576.133 ops/s
# Warmup Iteration  15: 40425056.132 ops/s
# Warmup Iteration  16: 40482347.516 ops/s
# Warmup Iteration  17: 40485670.521 ops/s
# Warmup Iteration  18: 40299392.570 ops/s
# Warmup Iteration  19: 40430055.603 ops/s
# Warmup Iteration  20: 40179897.976 ops/s
# Warmup Iteration  21: 40386481.423 ops/s
# Warmup Iteration  22: 40337353.162 ops/s
# Warmup Iteration  23: 40388671.451 ops/s
# Warmup Iteration  24: 40301574.028 ops/s
# Warmup Iteration  25: 40519114.126 ops/s
# Warmup Iteration  26: 40437971.174 ops/s
# Warmup Iteration  27: 40467133.924 ops/s
# Warmup Iteration  28: 40424973.187 ops/s
# Warmup Iteration  29: 40458572.882 ops/s
# Warmup Iteration  30: 40456462.490 ops/s
Iteration   1: 40368868.582 ops/s
Iteration   2: 40403207.090 ops/s
Iteration   3: 40533064.477 ops/s
Iteration   4: 40545193.402 ops/s
Iteration   5: 40127579.478 ops/s
Iteration   6: 39975961.884 ops/s
Iteration   7: 39975960.041 ops/s
Iteration   8: 40276513.158 ops/s
Iteration   9: 40173087.967 ops/s
Iteration  10: 40002406.980 ops/s
Iteration  11: 39620295.181 ops/s
Iteration  12: 39549769.248 ops/s
Iteration  13: 39709148.463 ops/s
Iteration  14: 40286228.151 ops/s
Iteration  15: 40356638.068 ops/s
Iteration  16: 40471944.303 ops/s
Iteration  17: 40605116.527 ops/s
Iteration  18: 40308934.866 ops/s
Iteration  19: 40484478.032 ops/s
Iteration  20: 40445870.236 ops/s
Iteration  21: 40219085.169 ops/s
Iteration  22: 40459247.489 ops/s
Iteration  23: 40515171.742 ops/s
Iteration  24: 40411132.468 ops/s
Iteration  25: 40506579.183 ops/s
Iteration  26: 40451073.239 ops/s
Iteration  27: 40522663.147 ops/s
Iteration  28: 40361877.832 ops/s
Iteration  29: 40545690.112 ops/s
Iteration  30: 40591455.402 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_max":
  40293474.731 ±(99.9%) 191546.701 ops/s [Average]
  (min, avg, max) = (39549769.248, 40293474.731, 40605116.527), stdev = 286698.106
  CI (99.9%): [40101928.030, 40485021.432] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_max  thrpt   30  40293474.731 ± 191546.701  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21373746.700 ops/s
# Warmup Iteration   2: 40268593.385 ops/s
# Warmup Iteration   3: 35604572.840 ops/s
# Warmup Iteration   4: 39594085.501 ops/s
# Warmup Iteration   5: 40612899.474 ops/s
# Warmup Iteration   6: 40641822.869 ops/s
# Warmup Iteration   7: 40732836.969 ops/s
# Warmup Iteration   8: 40712641.331 ops/s
# Warmup Iteration   9: 40634502.741 ops/s
# Warmup Iteration  10: 40691749.235 ops/s
# Warmup Iteration  11: 40713783.296 ops/s
# Warmup Iteration  12: 40718219.631 ops/s
# Warmup Iteration  13: 40611277.338 ops/s
# Warmup Iteration  14: 40644422.892 ops/s
# Warmup Iteration  15: 40601791.134 ops/s
# Warmup Iteration  16: 40568467.217 ops/s
# Warmup Iteration  17: 40718008.090 ops/s
# Warmup Iteration  18: 40717240.658 ops/s
# Warmup Iteration  19: 40619857.755 ops/s
# Warmup Iteration  20: 40653217.498 ops/s
# Warmup Iteration  21: 40630649.061 ops/s
# Warmup Iteration  22: 40701449.890 ops/s
# Warmup Iteration  23: 40812373.249 ops/s
# Warmup Iteration  24: 40850810.417 ops/s
# Warmup Iteration  25: 40832160.710 ops/s
# Warmup Iteration  26: 40682818.577 ops/s
# Warmup Iteration  27: 40905673.429 ops/s
# Warmup Iteration  28: 40902339.627 ops/s
# Warmup Iteration  29: 40849507.406 ops/s
# Warmup Iteration  30: 40751342.502 ops/s
Iteration   1: 40789062.097 ops/s
Iteration   2: 40877384.988 ops/s
Iteration   3: 40846518.347 ops/s
Iteration   4: 40750820.557 ops/s
Iteration   5: 40772017.527 ops/s
Iteration   6: 40742557.965 ops/s
Iteration   7: 40858222.313 ops/s
Iteration   8: 40801249.988 ops/s
Iteration   9: 40768544.351 ops/s
Iteration  10: 40828627.878 ops/s
Iteration  11: 40743520.439 ops/s
Iteration  12: 40620606.687 ops/s
Iteration  13: 40302099.132 ops/s
Iteration  14: 40659464.073 ops/s
Iteration  15: 40635186.308 ops/s
Iteration  16: 40773911.121 ops/s
Iteration  17: 40863088.926 ops/s
Iteration  18: 40817050.535 ops/s
Iteration  19: 40794284.090 ops/s
Iteration  20: 40515112.500 ops/s
Iteration  21: 40593047.497 ops/s
Iteration  22: 40667568.698 ops/s
Iteration  23: 40603159.007 ops/s
Iteration  24: 40668120.867 ops/s
Iteration  25: 40695186.788 ops/s
Iteration  26: 40543719.420 ops/s
Iteration  27: 40497726.034 ops/s
Iteration  28: 40660620.122 ops/s
Iteration  29: 40679184.305 ops/s
Iteration  30: 40781061.416 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_maxBy":
  40704957.466 ±(99.9%) 86333.882 ops/s [Average]
  (min, avg, max) = (40302099.132, 40704957.466, 40877384.988), stdev = 129220.499
  CI (99.9%): [40618623.584, 40791291.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_maxBy  thrpt   30  40704957.466 ± 86333.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5793044.346 ops/s
# Warmup Iteration   2: 12341078.570 ops/s
# Warmup Iteration   3: 12595715.749 ops/s
# Warmup Iteration   4: 12028398.568 ops/s
# Warmup Iteration   5: 11181401.432 ops/s
# Warmup Iteration   6: 12607960.511 ops/s
# Warmup Iteration   7: 12646843.739 ops/s
# Warmup Iteration   8: 12678997.579 ops/s
# Warmup Iteration   9: 12637045.043 ops/s
# Warmup Iteration  10: 12629475.398 ops/s
# Warmup Iteration  11: 12671766.925 ops/s
# Warmup Iteration  12: 12646141.456 ops/s
# Warmup Iteration  13: 12639577.077 ops/s
# Warmup Iteration  14: 12622317.713 ops/s
# Warmup Iteration  15: 12663764.472 ops/s
# Warmup Iteration  16: 12620754.434 ops/s
# Warmup Iteration  17: 12576307.019 ops/s
# Warmup Iteration  18: 12635403.536 ops/s
# Warmup Iteration  19: 12640700.638 ops/s
# Warmup Iteration  20: 12644746.340 ops/s
# Warmup Iteration  21: 12666101.914 ops/s
# Warmup Iteration  22: 12635308.078 ops/s
# Warmup Iteration  23: 12660863.160 ops/s
# Warmup Iteration  24: 12665084.596 ops/s
# Warmup Iteration  25: 12610005.513 ops/s
# Warmup Iteration  26: 12606235.643 ops/s
# Warmup Iteration  27: 12651603.854 ops/s
# Warmup Iteration  28: 12625598.426 ops/s
# Warmup Iteration  29: 12679023.556 ops/s
# Warmup Iteration  30: 12663962.683 ops/s
Iteration   1: 12632065.118 ops/s
Iteration   2: 12585108.476 ops/s
Iteration   3: 12606684.449 ops/s
Iteration   4: 12642552.122 ops/s
Iteration   5: 12630232.997 ops/s
Iteration   6: 12670455.163 ops/s
Iteration   7: 12608874.712 ops/s
Iteration   8: 12634872.826 ops/s
Iteration   9: 12603348.708 ops/s
Iteration  10: 12638018.950 ops/s
Iteration  11: 12650549.074 ops/s
Iteration  12: 12662471.713 ops/s
Iteration  13: 12608086.201 ops/s
Iteration  14: 12667839.663 ops/s
Iteration  15: 12626141.061 ops/s
Iteration  16: 12669166.256 ops/s
Iteration  17: 12671974.616 ops/s
Iteration  18: 12651408.661 ops/s
Iteration  19: 12681052.049 ops/s
Iteration  20: 12652374.220 ops/s
Iteration  21: 12576969.860 ops/s
Iteration  22: 12655167.207 ops/s
Iteration  23: 12634570.570 ops/s
Iteration  24: 12664884.272 ops/s
Iteration  25: 12644447.275 ops/s
Iteration  26: 12666450.644 ops/s
Iteration  27: 12570322.732 ops/s
Iteration  28: 12577750.032 ops/s
Iteration  29: 12536727.706 ops/s
Iteration  30: 12590859.829 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_max_null_throws":
  12630380.905 ±(99.9%) 24376.959 ops/s [Average]
  (min, avg, max) = (12536727.706, 12630380.905, 12681052.049), stdev = 36486.288
  CI (99.9%): [12606003.946, 12654757.865] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_max_null_throws  thrpt   30  12630380.905 ± 24376.959  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5716465.728 ops/s
# Warmup Iteration   2: 12424075.934 ops/s
# Warmup Iteration   3: 12867477.881 ops/s
# Warmup Iteration   4: 11966366.730 ops/s
# Warmup Iteration   5: 11665954.130 ops/s
# Warmup Iteration   6: 12874143.194 ops/s
# Warmup Iteration   7: 12868452.597 ops/s
# Warmup Iteration   8: 12878933.133 ops/s
# Warmup Iteration   9: 12929874.562 ops/s
# Warmup Iteration  10: 12865175.896 ops/s
# Warmup Iteration  11: 12923923.635 ops/s
# Warmup Iteration  12: 12848586.524 ops/s
# Warmup Iteration  13: 12904755.723 ops/s
# Warmup Iteration  14: 12911551.993 ops/s
# Warmup Iteration  15: 12930410.396 ops/s
# Warmup Iteration  16: 12930932.805 ops/s
# Warmup Iteration  17: 12916570.326 ops/s
# Warmup Iteration  18: 12879338.049 ops/s
# Warmup Iteration  19: 12951372.464 ops/s
# Warmup Iteration  20: 12870300.141 ops/s
# Warmup Iteration  21: 12915475.449 ops/s
# Warmup Iteration  22: 12918421.988 ops/s
# Warmup Iteration  23: 12951483.887 ops/s
# Warmup Iteration  24: 12938976.977 ops/s
# Warmup Iteration  25: 12936237.570 ops/s
# Warmup Iteration  26: 12966501.079 ops/s
# Warmup Iteration  27: 12871140.709 ops/s
# Warmup Iteration  28: 12884791.792 ops/s
# Warmup Iteration  29: 12949322.488 ops/s
# Warmup Iteration  30: 12970066.649 ops/s
Iteration   1: 12925621.004 ops/s
Iteration   2: 12905874.806 ops/s
Iteration   3: 12964318.670 ops/s
Iteration   4: 12916505.613 ops/s
Iteration   5: 12957082.616 ops/s
Iteration   6: 12937260.275 ops/s
Iteration   7: 12865983.616 ops/s
Iteration   8: 12865885.281 ops/s
Iteration   9: 12922109.418 ops/s
Iteration  10: 12897669.018 ops/s
Iteration  11: 12915975.954 ops/s
Iteration  12: 12952684.770 ops/s
Iteration  13: 12907148.263 ops/s
Iteration  14: 12922829.040 ops/s
Iteration  15: 12948923.389 ops/s
Iteration  16: 12932534.736 ops/s
Iteration  17: 12974669.745 ops/s
Iteration  18: 12890684.195 ops/s
Iteration  19: 12942105.002 ops/s
Iteration  20: 12825662.540 ops/s
Iteration  21: 12947314.280 ops/s
Iteration  22: 12912640.628 ops/s
Iteration  23: 12908491.336 ops/s
Iteration  24: 12910474.629 ops/s
Iteration  25: 12846590.815 ops/s
Iteration  26: 12914005.421 ops/s
Iteration  27: 12935363.245 ops/s
Iteration  28: 12938936.648 ops/s
Iteration  29: 12936722.164 ops/s
Iteration  30: 12872186.011 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  12916475.104 ±(99.9%) 23195.088 ops/s [Average]
  (min, avg, max) = (12825662.540, 12916475.104, 12974669.745), stdev = 34717.318
  CI (99.9%): [12893280.017, 12939670.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  12916475.104 ± 23195.088  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23954461.390 ops/s
# Warmup Iteration   2: 45904165.905 ops/s
# Warmup Iteration   3: 38265634.682 ops/s
# Warmup Iteration   4: 44727692.750 ops/s
# Warmup Iteration   5: 44888795.643 ops/s
# Warmup Iteration   6: 44785522.202 ops/s
# Warmup Iteration   7: 44743842.665 ops/s
# Warmup Iteration   8: 44896038.145 ops/s
# Warmup Iteration   9: 44755079.694 ops/s
# Warmup Iteration  10: 44687338.077 ops/s
# Warmup Iteration  11: 44655969.138 ops/s
# Warmup Iteration  12: 44852086.087 ops/s
# Warmup Iteration  13: 44711251.021 ops/s
# Warmup Iteration  14: 44732320.526 ops/s
# Warmup Iteration  15: 44815052.072 ops/s
# Warmup Iteration  16: 44759780.208 ops/s
# Warmup Iteration  17: 44874065.514 ops/s
# Warmup Iteration  18: 44691865.423 ops/s
# Warmup Iteration  19: 44365431.268 ops/s
# Warmup Iteration  20: 44875218.332 ops/s
# Warmup Iteration  21: 44914526.336 ops/s
# Warmup Iteration  22: 44764744.116 ops/s
# Warmup Iteration  23: 44939892.470 ops/s
# Warmup Iteration  24: 44849259.106 ops/s
# Warmup Iteration  25: 44844292.656 ops/s
# Warmup Iteration  26: 44867657.259 ops/s
# Warmup Iteration  27: 44845091.084 ops/s
# Warmup Iteration  28: 44952623.680 ops/s
# Warmup Iteration  29: 44928606.198 ops/s
# Warmup Iteration  30: 44860788.662 ops/s
Iteration   1: 44850326.673 ops/s
Iteration   2: 44677690.069 ops/s
Iteration   3: 44736713.766 ops/s
Iteration   4: 45128640.335 ops/s
Iteration   5: 45000765.390 ops/s
Iteration   6: 44889369.822 ops/s
Iteration   7: 44840024.932 ops/s
Iteration   8: 45031396.092 ops/s
Iteration   9: 44895624.111 ops/s
Iteration  10: 44594806.841 ops/s
Iteration  11: 44768054.208 ops/s
Iteration  12: 45014228.262 ops/s
Iteration  13: 44865846.535 ops/s
Iteration  14: 44840095.792 ops/s
Iteration  15: 44698597.840 ops/s
Iteration  16: 44577230.229 ops/s
Iteration  17: 44416055.062 ops/s
Iteration  18: 44406113.944 ops/s
Iteration  19: 44886157.776 ops/s
Iteration  20: 44795638.141 ops/s
Iteration  21: 44784346.273 ops/s
Iteration  22: 44959421.022 ops/s
Iteration  23: 44823134.437 ops/s
Iteration  24: 44603841.962 ops/s
Iteration  25: 44712905.589 ops/s
Iteration  26: 44883564.714 ops/s
Iteration  27: 44507777.765 ops/s
Iteration  28: 44687176.907 ops/s
Iteration  29: 44667297.908 ops/s
Iteration  30: 44801138.786 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_max_without_comparator":
  44778132.706 ±(99.9%) 116884.485 ops/s [Average]
  (min, avg, max) = (44406113.944, 44778132.706, 45128640.335), stdev = 174947.207
  CI (99.9%): [44661248.221, 44895017.191] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  44778132.706 ± 116884.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37095977.353 ops/s
# Warmup Iteration   2: 70274417.361 ops/s
# Warmup Iteration   3: 59735989.211 ops/s
# Warmup Iteration   4: 70176667.191 ops/s
# Warmup Iteration   5: 69796906.783 ops/s
# Warmup Iteration   6: 70344080.843 ops/s
# Warmup Iteration   7: 70269987.622 ops/s
# Warmup Iteration   8: 70115549.784 ops/s
# Warmup Iteration   9: 69995956.782 ops/s
# Warmup Iteration  10: 69669118.096 ops/s
# Warmup Iteration  11: 69995120.009 ops/s
# Warmup Iteration  12: 69977532.631 ops/s
# Warmup Iteration  13: 70148671.843 ops/s
# Warmup Iteration  14: 69922059.910 ops/s
# Warmup Iteration  15: 70465594.511 ops/s
# Warmup Iteration  16: 70279245.550 ops/s
# Warmup Iteration  17: 70085945.330 ops/s
# Warmup Iteration  18: 70265661.314 ops/s
# Warmup Iteration  19: 70169732.972 ops/s
# Warmup Iteration  20: 69945788.460 ops/s
# Warmup Iteration  21: 70036772.823 ops/s
# Warmup Iteration  22: 70360774.462 ops/s
# Warmup Iteration  23: 70297577.850 ops/s
# Warmup Iteration  24: 70462149.305 ops/s
# Warmup Iteration  25: 70151344.054 ops/s
# Warmup Iteration  26: 70417610.053 ops/s
# Warmup Iteration  27: 70442204.052 ops/s
# Warmup Iteration  28: 70390469.544 ops/s
# Warmup Iteration  29: 70028298.103 ops/s
# Warmup Iteration  30: 70191907.643 ops/s
Iteration   1: 70315833.346 ops/s
Iteration   2: 69883600.921 ops/s
Iteration   3: 70050514.694 ops/s
Iteration   4: 70081303.005 ops/s
Iteration   5: 69936725.586 ops/s
Iteration   6: 70149986.308 ops/s
Iteration   7: 69915779.705 ops/s
Iteration   8: 70160760.520 ops/s
Iteration   9: 69898083.759 ops/s
Iteration  10: 69941644.742 ops/s
Iteration  11: 69836926.309 ops/s
Iteration  12: 70436944.396 ops/s
Iteration  13: 70620767.477 ops/s
Iteration  14: 70434589.539 ops/s
Iteration  15: 70209468.464 ops/s
Iteration  16: 70370143.198 ops/s
Iteration  17: 69905456.866 ops/s
Iteration  18: 70143360.230 ops/s
Iteration  19: 70194972.355 ops/s
Iteration  20: 69925662.865 ops/s
Iteration  21: 70307414.633 ops/s
Iteration  22: 70396350.098 ops/s
Iteration  23: 69938004.908 ops/s
Iteration  24: 70060366.849 ops/s
Iteration  25: 69989645.648 ops/s
Iteration  26: 70351661.299 ops/s
Iteration  27: 70063043.439 ops/s
Iteration  28: 70183360.727 ops/s
Iteration  29: 70074220.986 ops/s
Iteration  30: 70224334.338 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_min":
  70133364.240 ±(99.9%) 135000.369 ops/s [Average]
  (min, avg, max) = (69836926.309, 70133364.240, 70620767.477), stdev = 202062.212
  CI (99.9%): [69998363.872, 70268364.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_min  thrpt   30  70133364.240 ± 135000.369  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12410122.210 ops/s
# Warmup Iteration   2: 24300097.742 ops/s
# Warmup Iteration   3: 21333190.575 ops/s
# Warmup Iteration   4: 25204793.005 ops/s
# Warmup Iteration   5: 25254695.606 ops/s
# Warmup Iteration   6: 25282748.198 ops/s
# Warmup Iteration   7: 25276854.617 ops/s
# Warmup Iteration   8: 25274088.830 ops/s
# Warmup Iteration   9: 25175285.871 ops/s
# Warmup Iteration  10: 25265756.131 ops/s
# Warmup Iteration  11: 25296062.671 ops/s
# Warmup Iteration  12: 25259558.401 ops/s
# Warmup Iteration  13: 25313966.442 ops/s
# Warmup Iteration  14: 25279497.258 ops/s
# Warmup Iteration  15: 25314322.593 ops/s
# Warmup Iteration  16: 25265072.288 ops/s
# Warmup Iteration  17: 25290282.971 ops/s
# Warmup Iteration  18: 25236762.339 ops/s
# Warmup Iteration  19: 25228464.705 ops/s
# Warmup Iteration  20: 25291493.666 ops/s
# Warmup Iteration  21: 25310903.611 ops/s
# Warmup Iteration  22: 25288421.482 ops/s
# Warmup Iteration  23: 25256904.663 ops/s
# Warmup Iteration  24: 25201404.587 ops/s
# Warmup Iteration  25: 25293268.767 ops/s
# Warmup Iteration  26: 24977773.805 ops/s
# Warmup Iteration  27: 25205730.003 ops/s
# Warmup Iteration  28: 25288664.727 ops/s
# Warmup Iteration  29: 25269766.181 ops/s
# Warmup Iteration  30: 25264552.865 ops/s
Iteration   1: 25254463.047 ops/s
Iteration   2: 25249902.209 ops/s
Iteration   3: 25247822.116 ops/s
Iteration   4: 25242146.453 ops/s
Iteration   5: 25340130.944 ops/s
Iteration   6: 25180195.642 ops/s
Iteration   7: 25177956.927 ops/s
Iteration   8: 25283374.236 ops/s
Iteration   9: 25303829.669 ops/s
Iteration  10: 25177019.551 ops/s
Iteration  11: 25171831.614 ops/s
Iteration  12: 25098556.271 ops/s
Iteration  13: 25238971.614 ops/s
Iteration  14: 25300529.669 ops/s
Iteration  15: 25358361.800 ops/s
Iteration  16: 25313718.512 ops/s
Iteration  17: 25351430.325 ops/s
Iteration  18: 25257310.827 ops/s
Iteration  19: 25214246.953 ops/s
Iteration  20: 25313904.583 ops/s
Iteration  21: 24445671.201 ops/s
Iteration  22: 25275925.703 ops/s
Iteration  23: 25296897.733 ops/s
Iteration  24: 25315957.628 ops/s
Iteration  25: 25295073.670 ops/s
Iteration  26: 25294851.464 ops/s
Iteration  27: 25310110.978 ops/s
Iteration  28: 25241881.191 ops/s
Iteration  29: 25311889.210 ops/s
Iteration  30: 25257949.701 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_minBy":
  25237397.048 ±(99.9%) 107576.584 ops/s [Average]
  (min, avg, max) = (24445671.201, 25237397.048, 25358361.800), stdev = 161015.579
  CI (99.9%): [25129820.464, 25344973.632] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_minBy  thrpt   30  25237397.048 ± 107576.584  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5712431.250 ops/s
# Warmup Iteration   2: 12311647.746 ops/s
# Warmup Iteration   3: 12699041.579 ops/s
# Warmup Iteration   4: 12056247.919 ops/s
# Warmup Iteration   5: 11263121.739 ops/s
# Warmup Iteration   6: 12699375.607 ops/s
# Warmup Iteration   7: 12706717.745 ops/s
# Warmup Iteration   8: 12747598.132 ops/s
# Warmup Iteration   9: 12743260.688 ops/s
# Warmup Iteration  10: 12763862.130 ops/s
# Warmup Iteration  11: 12742630.941 ops/s
# Warmup Iteration  12: 12687828.351 ops/s
# Warmup Iteration  13: 12756044.685 ops/s
# Warmup Iteration  14: 12691522.870 ops/s
# Warmup Iteration  15: 12691838.500 ops/s
# Warmup Iteration  16: 12747543.592 ops/s
# Warmup Iteration  17: 12708417.082 ops/s
# Warmup Iteration  18: 12724222.810 ops/s
# Warmup Iteration  19: 12646489.879 ops/s
# Warmup Iteration  20: 12767558.625 ops/s
# Warmup Iteration  21: 12751309.387 ops/s
# Warmup Iteration  22: 12737691.055 ops/s
# Warmup Iteration  23: 12708533.376 ops/s
# Warmup Iteration  24: 12728446.214 ops/s
# Warmup Iteration  25: 12757504.443 ops/s
# Warmup Iteration  26: 12745066.621 ops/s
# Warmup Iteration  27: 12658716.587 ops/s
# Warmup Iteration  28: 12622314.858 ops/s
# Warmup Iteration  29: 12747166.587 ops/s
# Warmup Iteration  30: 12728827.928 ops/s
Iteration   1: 12765632.414 ops/s
Iteration   2: 12762648.191 ops/s
Iteration   3: 12752585.707 ops/s
Iteration   4: 12640158.528 ops/s
Iteration   5: 12645186.636 ops/s
Iteration   6: 12721147.533 ops/s
Iteration   7: 12673722.516 ops/s
Iteration   8: 12691675.830 ops/s
Iteration   9: 12668030.307 ops/s
Iteration  10: 12767728.746 ops/s
Iteration  11: 12764761.242 ops/s
Iteration  12: 12798273.743 ops/s
Iteration  13: 12744590.140 ops/s
Iteration  14: 12681277.004 ops/s
Iteration  15: 12712528.897 ops/s
Iteration  16: 12758084.914 ops/s
Iteration  17: 12767902.914 ops/s
Iteration  18: 12754511.818 ops/s
Iteration  19: 12685977.136 ops/s
Iteration  20: 12709855.696 ops/s
Iteration  21: 12632176.548 ops/s
Iteration  22: 12665206.413 ops/s
Iteration  23: 12773251.011 ops/s
Iteration  24: 12768414.403 ops/s
Iteration  25: 12782729.555 ops/s
Iteration  26: 12797634.900 ops/s
Iteration  27: 12634129.869 ops/s
Iteration  28: 12731824.081 ops/s
Iteration  29: 12695016.852 ops/s
Iteration  30: 12773016.278 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_min_null_throws":
  12723989.327 ±(99.9%) 34577.063 ops/s [Average]
  (min, avg, max) = (12632176.548, 12723989.327, 12798273.743), stdev = 51753.324
  CI (99.9%): [12689412.264, 12758566.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_min_null_throws  thrpt   30  12723989.327 ± 34577.063  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4310231.461 ops/s
# Warmup Iteration   2: 5605906.725 ops/s
# Warmup Iteration   3: 6963802.656 ops/s
# Warmup Iteration   4: 6948221.497 ops/s
# Warmup Iteration   5: 6968579.030 ops/s
# Warmup Iteration   6: 6975925.468 ops/s
# Warmup Iteration   7: 6968912.455 ops/s
# Warmup Iteration   8: 6882751.581 ops/s
# Warmup Iteration   9: 5890634.284 ops/s
# Warmup Iteration  10: 6913490.742 ops/s
# Warmup Iteration  11: 6920665.584 ops/s
# Warmup Iteration  12: 6918633.384 ops/s
# Warmup Iteration  13: 6918886.217 ops/s
# Warmup Iteration  14: 6919202.100 ops/s
# Warmup Iteration  15: 6908954.967 ops/s
# Warmup Iteration  16: 6930609.546 ops/s
# Warmup Iteration  17: 6945718.710 ops/s
# Warmup Iteration  18: 6944755.771 ops/s
# Warmup Iteration  19: 6941349.110 ops/s
# Warmup Iteration  20: 6918933.265 ops/s
# Warmup Iteration  21: 6911125.966 ops/s
# Warmup Iteration  22: 6947596.277 ops/s
# Warmup Iteration  23: 6914229.550 ops/s
# Warmup Iteration  24: 6916201.319 ops/s
# Warmup Iteration  25: 6927181.204 ops/s
# Warmup Iteration  26: 6926775.437 ops/s
# Warmup Iteration  27: 6924611.005 ops/s
# Warmup Iteration  28: 6923990.398 ops/s
# Warmup Iteration  29: 6885615.442 ops/s
# Warmup Iteration  30: 6925623.813 ops/s
Iteration   1: 6952177.932 ops/s
Iteration   2: 6954301.352 ops/s
Iteration   3: 6919116.770 ops/s
Iteration   4: 6947355.096 ops/s
Iteration   5: 6923739.181 ops/s
Iteration   6: 6909493.642 ops/s
Iteration   7: 6906575.698 ops/s
Iteration   8: 6914251.747 ops/s
Iteration   9: 6911794.743 ops/s
Iteration  10: 6950530.707 ops/s
Iteration  11: 6956821.729 ops/s
Iteration  12: 6933653.365 ops/s
Iteration  13: 6955590.597 ops/s
Iteration  14: 6950293.270 ops/s
Iteration  15: 6940505.856 ops/s
Iteration  16: 6917321.546 ops/s
Iteration  17: 6938904.839 ops/s
Iteration  18: 6928095.487 ops/s
Iteration  19: 6947738.893 ops/s
Iteration  20: 6937383.929 ops/s
Iteration  21: 6920884.607 ops/s
Iteration  22: 6942873.090 ops/s
Iteration  23: 6896003.335 ops/s
Iteration  24: 6929495.417 ops/s
Iteration  25: 6932710.604 ops/s
Iteration  26: 6920674.925 ops/s
Iteration  27: 6904156.061 ops/s
Iteration  28: 6931408.788 ops/s
Iteration  29: 6903245.596 ops/s
Iteration  30: 6882706.157 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  6928660.165 ±(99.9%) 13072.153 ops/s [Average]
  (min, avg, max) = (6882706.157, 6928660.165, 6956821.729), stdev = 19565.784
  CI (99.9%): [6915588.012, 6941732.318] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  6928660.165 ± 13072.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37066967.730 ops/s
# Warmup Iteration   2: 72694979.746 ops/s
# Warmup Iteration   3: 57910586.197 ops/s
# Warmup Iteration   4: 67693750.797 ops/s
# Warmup Iteration   5: 68069427.090 ops/s
# Warmup Iteration   6: 67943579.200 ops/s
# Warmup Iteration   7: 68248034.065 ops/s
# Warmup Iteration   8: 68001238.924 ops/s
# Warmup Iteration   9: 67835354.349 ops/s
# Warmup Iteration  10: 68107085.262 ops/s
# Warmup Iteration  11: 68150479.278 ops/s
# Warmup Iteration  12: 68046199.838 ops/s
# Warmup Iteration  13: 68028255.872 ops/s
# Warmup Iteration  14: 67725198.952 ops/s
# Warmup Iteration  15: 67980736.180 ops/s
# Warmup Iteration  16: 68056985.797 ops/s
# Warmup Iteration  17: 67911037.548 ops/s
# Warmup Iteration  18: 68092907.949 ops/s
# Warmup Iteration  19: 68096224.255 ops/s
# Warmup Iteration  20: 67983613.191 ops/s
# Warmup Iteration  21: 68218972.328 ops/s
# Warmup Iteration  22: 68174965.773 ops/s
# Warmup Iteration  23: 67793156.008 ops/s
# Warmup Iteration  24: 67755061.453 ops/s
# Warmup Iteration  25: 68205522.913 ops/s
# Warmup Iteration  26: 68328428.288 ops/s
# Warmup Iteration  27: 68149168.285 ops/s
# Warmup Iteration  28: 68180328.560 ops/s
# Warmup Iteration  29: 68055472.233 ops/s
# Warmup Iteration  30: 67853560.267 ops/s
Iteration   1: 67769495.210 ops/s
Iteration   2: 68146555.779 ops/s
Iteration   3: 68294751.326 ops/s
Iteration   4: 68015730.240 ops/s
Iteration   5: 67933529.701 ops/s
Iteration   6: 68267943.061 ops/s
Iteration   7: 67992178.642 ops/s
Iteration   8: 68084027.316 ops/s
Iteration   9: 68179120.712 ops/s
Iteration  10: 68293959.478 ops/s
Iteration  11: 68005226.014 ops/s
Iteration  12: 68094430.444 ops/s
Iteration  13: 67985995.443 ops/s
Iteration  14: 68357063.675 ops/s
Iteration  15: 68149729.304 ops/s
Iteration  16: 67921366.627 ops/s
Iteration  17: 67946986.386 ops/s
Iteration  18: 68241752.002 ops/s
Iteration  19: 68051015.108 ops/s
Iteration  20: 68257881.307 ops/s
Iteration  21: 68014956.931 ops/s
Iteration  22: 68113844.157 ops/s
Iteration  23: 67859564.753 ops/s
Iteration  24: 67798254.518 ops/s
Iteration  25: 67676664.384 ops/s
Iteration  26: 68010681.155 ops/s
Iteration  27: 67957778.040 ops/s
Iteration  28: 67961719.069 ops/s
Iteration  29: 68092856.102 ops/s
Iteration  30: 67951063.135 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_min_without_comparator":
  68047537.334 ±(99.9%) 109845.395 ops/s [Average]
  (min, avg, max) = (67676664.384, 68047537.334, 68357063.675), stdev = 164411.429
  CI (99.9%): [67937691.939, 68157382.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  68047537.334 ± 109845.395  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10188538.866 ops/s
# Warmup Iteration   2: 20846180.350 ops/s
# Warmup Iteration   3: 20506641.908 ops/s
# Warmup Iteration   4: 17425766.441 ops/s
# Warmup Iteration   5: 20572574.975 ops/s
# Warmup Iteration   6: 20552903.538 ops/s
# Warmup Iteration   7: 20574561.449 ops/s
# Warmup Iteration   8: 20555290.124 ops/s
# Warmup Iteration   9: 20528468.519 ops/s
# Warmup Iteration  10: 20590088.771 ops/s
# Warmup Iteration  11: 20545064.368 ops/s
# Warmup Iteration  12: 20595390.555 ops/s
# Warmup Iteration  13: 20537568.628 ops/s
# Warmup Iteration  14: 20572182.139 ops/s
# Warmup Iteration  15: 20526234.957 ops/s
# Warmup Iteration  16: 20582634.886 ops/s
# Warmup Iteration  17: 20548862.234 ops/s
# Warmup Iteration  18: 20509667.379 ops/s
# Warmup Iteration  19: 20539382.421 ops/s
# Warmup Iteration  20: 20557707.424 ops/s
# Warmup Iteration  21: 20587852.079 ops/s
# Warmup Iteration  22: 20535146.191 ops/s
# Warmup Iteration  23: 20567366.240 ops/s
# Warmup Iteration  24: 20619778.598 ops/s
# Warmup Iteration  25: 20566438.940 ops/s
# Warmup Iteration  26: 20553550.827 ops/s
# Warmup Iteration  27: 20589915.404 ops/s
# Warmup Iteration  28: 20529867.106 ops/s
# Warmup Iteration  29: 20572651.678 ops/s
# Warmup Iteration  30: 20588128.747 ops/s
Iteration   1: 20505799.013 ops/s
Iteration   2: 20525418.124 ops/s
Iteration   3: 20492990.120 ops/s
Iteration   4: 20496163.301 ops/s
Iteration   5: 20547380.911 ops/s
Iteration   6: 20482130.036 ops/s
Iteration   7: 20585306.804 ops/s
Iteration   8: 20600347.027 ops/s
Iteration   9: 20597654.323 ops/s
Iteration  10: 20595709.814 ops/s
Iteration  11: 20558284.847 ops/s
Iteration  12: 20615996.694 ops/s
Iteration  13: 20600365.736 ops/s
Iteration  14: 20591161.765 ops/s
Iteration  15: 20532196.521 ops/s
Iteration  16: 20504964.413 ops/s
Iteration  17: 20607618.099 ops/s
Iteration  18: 20612025.455 ops/s
Iteration  19: 20596841.393 ops/s
Iteration  20: 20603829.393 ops/s
Iteration  21: 20617419.135 ops/s
Iteration  22: 20577964.994 ops/s
Iteration  23: 20622149.084 ops/s
Iteration  24: 20521181.481 ops/s
Iteration  25: 20544408.203 ops/s
Iteration  26: 20429957.265 ops/s
Iteration  27: 20571877.650 ops/s
Iteration  28: 20527358.099 ops/s
Iteration  29: 20519682.087 ops/s
Iteration  30: 20520523.842 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_noneSatisfy":
  20556823.521 ±(99.9%) 33268.957 ops/s [Average]
  (min, avg, max) = (20429957.265, 20556823.521, 20622149.084), stdev = 49795.412
  CI (99.9%): [20523554.564, 20590092.478] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  20556823.521 ± 33268.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10480396.194 ops/s
# Warmup Iteration   2: 21077593.116 ops/s
# Warmup Iteration   3: 20977687.294 ops/s
# Warmup Iteration   4: 18115576.165 ops/s
# Warmup Iteration   5: 21204754.937 ops/s
# Warmup Iteration   6: 21216953.525 ops/s
# Warmup Iteration   7: 21244239.208 ops/s
# Warmup Iteration   8: 21272643.729 ops/s
# Warmup Iteration   9: 21200915.031 ops/s
# Warmup Iteration  10: 21172471.495 ops/s
# Warmup Iteration  11: 21184361.413 ops/s
# Warmup Iteration  12: 21281558.800 ops/s
# Warmup Iteration  13: 21235838.233 ops/s
# Warmup Iteration  14: 21189775.262 ops/s
# Warmup Iteration  15: 21254115.161 ops/s
# Warmup Iteration  16: 21308288.636 ops/s
# Warmup Iteration  17: 21234096.381 ops/s
# Warmup Iteration  18: 21193927.272 ops/s
# Warmup Iteration  19: 21249961.268 ops/s
# Warmup Iteration  20: 21210887.621 ops/s
# Warmup Iteration  21: 21238041.389 ops/s
# Warmup Iteration  22: 21222467.691 ops/s
# Warmup Iteration  23: 21261062.255 ops/s
# Warmup Iteration  24: 21246158.219 ops/s
# Warmup Iteration  25: 21168512.122 ops/s
# Warmup Iteration  26: 21225800.725 ops/s
# Warmup Iteration  27: 21109687.243 ops/s
# Warmup Iteration  28: 21207519.899 ops/s
# Warmup Iteration  29: 21265360.606 ops/s
# Warmup Iteration  30: 21199982.826 ops/s
Iteration   1: 21299957.440 ops/s
Iteration   2: 21200418.753 ops/s
Iteration   3: 21243345.031 ops/s
Iteration   4: 21279574.625 ops/s
Iteration   5: 21214723.917 ops/s
Iteration   6: 21186889.375 ops/s
Iteration   7: 21232707.610 ops/s
Iteration   8: 21232575.554 ops/s
Iteration   9: 21222549.526 ops/s
Iteration  10: 21213781.433 ops/s
Iteration  11: 21231234.354 ops/s
Iteration  12: 21093794.251 ops/s
Iteration  13: 21104099.960 ops/s
Iteration  14: 21259609.857 ops/s
Iteration  15: 21189124.093 ops/s
Iteration  16: 21255875.369 ops/s
Iteration  17: 21250307.679 ops/s
Iteration  18: 21285963.587 ops/s
Iteration  19: 21228460.195 ops/s
Iteration  20: 21192274.781 ops/s
Iteration  21: 21172703.935 ops/s
Iteration  22: 21271178.858 ops/s
Iteration  23: 21217184.610 ops/s
Iteration  24: 21111596.398 ops/s
Iteration  25: 21259312.273 ops/s
Iteration  26: 21242486.078 ops/s
Iteration  27: 21154083.956 ops/s
Iteration  28: 21220271.822 ops/s
Iteration  29: 21235377.952 ops/s
Iteration  30: 21247595.230 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_noneSatisfyWith":
  21218301.950 ±(99.9%) 34132.420 ops/s [Average]
  (min, avg, max) = (21093794.251, 21218301.950, 21299957.440), stdev = 51087.803
  CI (99.9%): [21184169.530, 21252434.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  21218301.950 ± 34132.420  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15324.953 ops/s
# Warmup Iteration   2: 16132.836 ops/s
# Warmup Iteration   3: 15849.971 ops/s
# Warmup Iteration   4: 16006.470 ops/s
# Warmup Iteration   5: 16130.667 ops/s
# Warmup Iteration   6: 15951.105 ops/s
# Warmup Iteration   7: 20683.765 ops/s
# Warmup Iteration   8: 22897.153 ops/s
# Warmup Iteration   9: 25281.720 ops/s
# Warmup Iteration  10: 23863.268 ops/s
# Warmup Iteration  11: 21834.799 ops/s
# Warmup Iteration  12: 22918.621 ops/s
# Warmup Iteration  13: 23273.942 ops/s
# Warmup Iteration  14: 23956.912 ops/s
# Warmup Iteration  15: 23236.778 ops/s
# Warmup Iteration  16: 22433.948 ops/s
# Warmup Iteration  17: 23458.987 ops/s
# Warmup Iteration  18: 22952.122 ops/s
# Warmup Iteration  19: 22628.981 ops/s
# Warmup Iteration  20: 22276.578 ops/s
# Warmup Iteration  21: 22989.372 ops/s
# Warmup Iteration  22: 22972.625 ops/s
# Warmup Iteration  23: 23252.185 ops/s
# Warmup Iteration  24: 22705.225 ops/s
# Warmup Iteration  25: 23365.941 ops/s
# Warmup Iteration  26: 24281.643 ops/s
# Warmup Iteration  27: 23214.532 ops/s
# Warmup Iteration  28: 24200.813 ops/s
# Warmup Iteration  29: 24600.731 ops/s
# Warmup Iteration  30: 24662.764 ops/s
Iteration   1: 24174.877 ops/s
Iteration   2: 22475.771 ops/s
Iteration   3: 22210.343 ops/s
Iteration   4: 24154.811 ops/s
Iteration   5: 21440.178 ops/s
Iteration   6: 16044.962 ops/s
Iteration   7: 15953.202 ops/s
Iteration   8: 16198.807 ops/s
Iteration   9: 15840.630 ops/s
Iteration  10: 22219.800 ops/s
Iteration  11: 24389.773 ops/s
Iteration  12: 23904.478 ops/s
Iteration  13: 25087.160 ops/s
Iteration  14: 25163.251 ops/s
Iteration  15: 24264.856 ops/s
Iteration  16: 24941.007 ops/s
Iteration  17: 24951.360 ops/s
Iteration  18: 24557.275 ops/s
Iteration  19: 24319.260 ops/s
Iteration  20: 23981.160 ops/s
Iteration  21: 23661.831 ops/s
Iteration  22: 23969.667 ops/s
Iteration  23: 22505.915 ops/s
Iteration  24: 22981.651 ops/s
Iteration  25: 22902.758 ops/s
Iteration  26: 22610.481 ops/s
Iteration  27: 22907.771 ops/s
Iteration  28: 23281.346 ops/s
Iteration  29: 24281.229 ops/s
Iteration  30: 24143.405 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_parallelStream":
  22650.634 ±(99.9%) 1879.272 ops/s [Average]
  (min, avg, max) = (15840.630, 22650.634, 25163.251), stdev = 2812.806
  CI (99.9%): [20771.362, 24529.906] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_parallelStream  thrpt   30  22650.634 ± 1879.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1425093.550 ops/s
# Warmup Iteration   2: 1948350.799 ops/s
# Warmup Iteration   3: 2347624.463 ops/s
# Warmup Iteration   4: 2341365.546 ops/s
# Warmup Iteration   5: 2347747.998 ops/s
# Warmup Iteration   6: 2349854.920 ops/s
# Warmup Iteration   7: 2352882.878 ops/s
# Warmup Iteration   8: 1972261.695 ops/s
# Warmup Iteration   9: 2353719.298 ops/s
# Warmup Iteration  10: 2354811.830 ops/s
# Warmup Iteration  11: 2353369.022 ops/s
# Warmup Iteration  12: 2352565.685 ops/s
# Warmup Iteration  13: 2348577.376 ops/s
# Warmup Iteration  14: 2350232.178 ops/s
# Warmup Iteration  15: 2339106.959 ops/s
# Warmup Iteration  16: 2350824.095 ops/s
# Warmup Iteration  17: 2350028.879 ops/s
# Warmup Iteration  18: 2353290.962 ops/s
# Warmup Iteration  19: 2347843.950 ops/s
# Warmup Iteration  20: 2353970.557 ops/s
# Warmup Iteration  21: 2355591.261 ops/s
# Warmup Iteration  22: 2355393.765 ops/s
# Warmup Iteration  23: 2355541.195 ops/s
# Warmup Iteration  24: 2354766.595 ops/s
# Warmup Iteration  25: 2352177.197 ops/s
# Warmup Iteration  26: 2356741.954 ops/s
# Warmup Iteration  27: 2355360.797 ops/s
# Warmup Iteration  28: 2352980.038 ops/s
# Warmup Iteration  29: 2354294.876 ops/s
# Warmup Iteration  30: 2331101.293 ops/s
Iteration   1: 2350586.102 ops/s
Iteration   2: 2358914.624 ops/s
Iteration   3: 2347631.064 ops/s
Iteration   4: 2354452.000 ops/s
Iteration   5: 2347338.481 ops/s
Iteration   6: 2353745.178 ops/s
Iteration   7: 2347686.932 ops/s
Iteration   8: 2339070.038 ops/s
Iteration   9: 2352555.020 ops/s
Iteration  10: 2346767.514 ops/s
Iteration  11: 2341583.680 ops/s
Iteration  12: 2350642.463 ops/s
Iteration  13: 2349385.251 ops/s
Iteration  14: 2347007.325 ops/s
Iteration  15: 2346517.164 ops/s
Iteration  16: 2348291.507 ops/s
Iteration  17: 2347780.807 ops/s
Iteration  18: 2345633.271 ops/s
Iteration  19: 2351806.800 ops/s
Iteration  20: 2353114.419 ops/s
Iteration  21: 2355592.632 ops/s
Iteration  22: 2352281.337 ops/s
Iteration  23: 2347460.501 ops/s
Iteration  24: 2350681.474 ops/s
Iteration  25: 2340447.956 ops/s
Iteration  26: 2349297.442 ops/s
Iteration  27: 2347270.864 ops/s
Iteration  28: 2342806.097 ops/s
Iteration  29: 2346967.935 ops/s
Iteration  30: 2331502.035 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_partition":
  2348160.597 ±(99.9%) 3606.300 ops/s [Average]
  (min, avg, max) = (2331502.035, 2348160.597, 2358914.624), stdev = 5397.740
  CI (99.9%): [2344554.297, 2351766.897] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_partition  thrpt   30  2348160.597 ± 3606.300  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2554033.538 ops/s
# Warmup Iteration   2: 5997257.749 ops/s
# Warmup Iteration   3: 5986631.226 ops/s
# Warmup Iteration   4: 4996309.271 ops/s
# Warmup Iteration   5: 6007211.312 ops/s
# Warmup Iteration   6: 6009968.795 ops/s
# Warmup Iteration   7: 6005786.944 ops/s
# Warmup Iteration   8: 6013660.667 ops/s
# Warmup Iteration   9: 6006562.180 ops/s
# Warmup Iteration  10: 5976589.721 ops/s
# Warmup Iteration  11: 6003416.589 ops/s
# Warmup Iteration  12: 6012715.753 ops/s
# Warmup Iteration  13: 5994730.037 ops/s
# Warmup Iteration  14: 6001759.207 ops/s
# Warmup Iteration  15: 6001424.225 ops/s
# Warmup Iteration  16: 6006003.209 ops/s
# Warmup Iteration  17: 6018296.106 ops/s
# Warmup Iteration  18: 6027431.453 ops/s
# Warmup Iteration  19: 6011698.320 ops/s
# Warmup Iteration  20: 6030394.562 ops/s
# Warmup Iteration  21: 6031838.814 ops/s
# Warmup Iteration  22: 6008655.245 ops/s
# Warmup Iteration  23: 6005171.510 ops/s
# Warmup Iteration  24: 6020859.695 ops/s
# Warmup Iteration  25: 6012536.075 ops/s
# Warmup Iteration  26: 6026560.628 ops/s
# Warmup Iteration  27: 5996047.299 ops/s
# Warmup Iteration  28: 6012188.853 ops/s
# Warmup Iteration  29: 6018395.468 ops/s
# Warmup Iteration  30: 6017483.562 ops/s
Iteration   1: 6017305.004 ops/s
Iteration   2: 5958903.320 ops/s
Iteration   3: 5973516.603 ops/s
Iteration   4: 6014764.823 ops/s
Iteration   5: 6025236.985 ops/s
Iteration   6: 6016882.090 ops/s
Iteration   7: 6003687.858 ops/s
Iteration   8: 6026573.629 ops/s
Iteration   9: 6031967.541 ops/s
Iteration  10: 6011287.817 ops/s
Iteration  11: 6022956.481 ops/s
Iteration  12: 6027161.670 ops/s
Iteration  13: 6033846.472 ops/s
Iteration  14: 6021346.172 ops/s
Iteration  15: 6026165.796 ops/s
Iteration  16: 6012571.207 ops/s
Iteration  17: 6015927.147 ops/s
Iteration  18: 6041302.612 ops/s
Iteration  19: 6028230.050 ops/s
Iteration  20: 6024398.050 ops/s
Iteration  21: 6005960.506 ops/s
Iteration  22: 6022475.432 ops/s
Iteration  23: 6026461.631 ops/s
Iteration  24: 6026674.543 ops/s
Iteration  25: 6004346.149 ops/s
Iteration  26: 6017647.625 ops/s
Iteration  27: 6022722.069 ops/s
Iteration  28: 6005740.573 ops/s
Iteration  29: 6026985.401 ops/s
Iteration  30: 6019287.447 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_partitionWhile":
  6017077.757 ±(99.9%) 11056.425 ops/s [Average]
  (min, avg, max) = (5958903.320, 6017077.757, 6041302.612), stdev = 16548.738
  CI (99.9%): [6006021.331, 6028134.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_partitionWhile  thrpt   30  6017077.757 ± 11056.425  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 996768.194 ops/s
# Warmup Iteration   2: 1429690.878 ops/s
# Warmup Iteration   3: 1692692.086 ops/s
# Warmup Iteration   4: 1681322.777 ops/s
# Warmup Iteration   5: 1689199.794 ops/s
# Warmup Iteration   6: 1693073.240 ops/s
# Warmup Iteration   7: 1520569.561 ops/s
# Warmup Iteration   8: 1577536.399 ops/s
# Warmup Iteration   9: 1692927.349 ops/s
# Warmup Iteration  10: 1688420.061 ops/s
# Warmup Iteration  11: 1687842.532 ops/s
# Warmup Iteration  12: 1682037.572 ops/s
# Warmup Iteration  13: 1693791.170 ops/s
# Warmup Iteration  14: 1693035.084 ops/s
# Warmup Iteration  15: 1684383.006 ops/s
# Warmup Iteration  16: 1691893.108 ops/s
# Warmup Iteration  17: 1691891.159 ops/s
# Warmup Iteration  18: 1692358.101 ops/s
# Warmup Iteration  19: 1689000.854 ops/s
# Warmup Iteration  20: 1688247.119 ops/s
# Warmup Iteration  21: 1685266.361 ops/s
# Warmup Iteration  22: 1692312.882 ops/s
# Warmup Iteration  23: 1691528.031 ops/s
# Warmup Iteration  24: 1691904.040 ops/s
# Warmup Iteration  25: 1685230.383 ops/s
# Warmup Iteration  26: 1694506.200 ops/s
# Warmup Iteration  27: 1691411.640 ops/s
# Warmup Iteration  28: 1691908.715 ops/s
# Warmup Iteration  29: 1692184.935 ops/s
# Warmup Iteration  30: 1691597.693 ops/s
Iteration   1: 1690007.942 ops/s
Iteration   2: 1681779.961 ops/s
Iteration   3: 1695166.635 ops/s
Iteration   4: 1686561.836 ops/s
Iteration   5: 1688835.110 ops/s
Iteration   6: 1691431.962 ops/s
Iteration   7: 1693344.981 ops/s
Iteration   8: 1691740.578 ops/s
Iteration   9: 1691517.338 ops/s
Iteration  10: 1694802.867 ops/s
Iteration  11: 1691936.171 ops/s
Iteration  12: 1684143.629 ops/s
Iteration  13: 1689663.512 ops/s
Iteration  14: 1691417.403 ops/s
Iteration  15: 1695951.838 ops/s
Iteration  16: 1693035.124 ops/s
Iteration  17: 1693120.809 ops/s
Iteration  18: 1693772.757 ops/s
Iteration  19: 1687972.191 ops/s
Iteration  20: 1690446.074 ops/s
Iteration  21: 1678930.806 ops/s
Iteration  22: 1695165.993 ops/s
Iteration  23: 1695624.865 ops/s
Iteration  24: 1691563.585 ops/s
Iteration  25: 1690599.121 ops/s
Iteration  26: 1692787.849 ops/s
Iteration  27: 1690277.360 ops/s
Iteration  28: 1693530.836 ops/s
Iteration  29: 1688723.261 ops/s
Iteration  30: 1689013.359 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_partitionWith":
  1690762.192 ±(99.9%) 2635.675 ops/s [Average]
  (min, avg, max) = (1678930.806, 1690762.192, 1695951.838), stdev = 3944.954
  CI (99.9%): [1688126.517, 1693397.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_partitionWith  thrpt   30  1690762.192 ± 2635.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4221480.378 ops/s
# Warmup Iteration   2: 9518419.673 ops/s
# Warmup Iteration   3: 9559373.897 ops/s
# Warmup Iteration   4: 8011038.704 ops/s
# Warmup Iteration   5: 9563730.014 ops/s
# Warmup Iteration   6: 9552851.959 ops/s
# Warmup Iteration   7: 9548871.582 ops/s
# Warmup Iteration   8: 9549588.587 ops/s
# Warmup Iteration   9: 9574228.230 ops/s
# Warmup Iteration  10: 9536550.731 ops/s
# Warmup Iteration  11: 9530362.035 ops/s
# Warmup Iteration  12: 9529030.281 ops/s
# Warmup Iteration  13: 9540826.539 ops/s
# Warmup Iteration  14: 9525312.686 ops/s
# Warmup Iteration  15: 9554761.198 ops/s
# Warmup Iteration  16: 9540224.342 ops/s
# Warmup Iteration  17: 9587811.811 ops/s
# Warmup Iteration  18: 9542792.107 ops/s
# Warmup Iteration  19: 9241025.788 ops/s
# Warmup Iteration  20: 9562212.091 ops/s
# Warmup Iteration  21: 9518164.554 ops/s
# Warmup Iteration  22: 9540594.469 ops/s
# Warmup Iteration  23: 9569402.113 ops/s
# Warmup Iteration  24: 9560300.769 ops/s
# Warmup Iteration  25: 9554436.263 ops/s
# Warmup Iteration  26: 9558586.828 ops/s
# Warmup Iteration  27: 9485749.534 ops/s
# Warmup Iteration  28: 9535050.012 ops/s
# Warmup Iteration  29: 9557464.892 ops/s
# Warmup Iteration  30: 9530367.195 ops/s
Iteration   1: 9546157.589 ops/s
Iteration   2: 9573136.422 ops/s
Iteration   3: 9523717.721 ops/s
Iteration   4: 9570577.632 ops/s
Iteration   5: 9546978.681 ops/s
Iteration   6: 9557097.839 ops/s
Iteration   7: 9550953.473 ops/s
Iteration   8: 9509005.705 ops/s
Iteration   9: 9496005.209 ops/s
Iteration  10: 9542721.607 ops/s
Iteration  11: 9553561.748 ops/s
Iteration  12: 9561923.712 ops/s
Iteration  13: 9537206.311 ops/s
Iteration  14: 9544583.804 ops/s
Iteration  15: 9565550.662 ops/s
Iteration  16: 9551281.676 ops/s
Iteration  17: 9568322.930 ops/s
Iteration  18: 9557656.185 ops/s
Iteration  19: 9552838.920 ops/s
Iteration  20: 9546775.351 ops/s
Iteration  21: 9533648.481 ops/s
Iteration  22: 9552464.402 ops/s
Iteration  23: 9560812.553 ops/s
Iteration  24: 9535830.422 ops/s
Iteration  25: 9548299.565 ops/s
Iteration  26: 9578010.388 ops/s
Iteration  27: 9552038.995 ops/s
Iteration  28: 9510968.803 ops/s
Iteration  29: 9571932.801 ops/s
Iteration  30: 9539413.026 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_reject":
  9547982.420 ±(99.9%) 12866.355 ops/s [Average]
  (min, avg, max) = (9496005.209, 9547982.420, 9578010.388), stdev = 19257.756
  CI (99.9%): [9535116.066, 9560848.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_reject  thrpt   30  9547982.420 ± 12866.355  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2882366.758 ops/s
# Warmup Iteration   2: 6639939.879 ops/s
# Warmup Iteration   3: 6714510.098 ops/s
# Warmup Iteration   4: 5570611.144 ops/s
# Warmup Iteration   5: 6705855.257 ops/s
# Warmup Iteration   6: 6723981.243 ops/s
# Warmup Iteration   7: 6726322.062 ops/s
# Warmup Iteration   8: 6733922.041 ops/s
# Warmup Iteration   9: 6741466.966 ops/s
# Warmup Iteration  10: 6728638.282 ops/s
# Warmup Iteration  11: 6725502.575 ops/s
# Warmup Iteration  12: 6745600.030 ops/s
# Warmup Iteration  13: 6702594.258 ops/s
# Warmup Iteration  14: 6734604.857 ops/s
# Warmup Iteration  15: 6731940.555 ops/s
# Warmup Iteration  16: 6724775.648 ops/s
# Warmup Iteration  17: 6757243.540 ops/s
# Warmup Iteration  18: 6736207.166 ops/s
# Warmup Iteration  19: 6736246.819 ops/s
# Warmup Iteration  20: 6693301.123 ops/s
# Warmup Iteration  21: 6721082.598 ops/s
# Warmup Iteration  22: 6745745.870 ops/s
# Warmup Iteration  23: 6740508.861 ops/s
# Warmup Iteration  24: 6730215.209 ops/s
# Warmup Iteration  25: 6708270.168 ops/s
# Warmup Iteration  26: 6721609.395 ops/s
# Warmup Iteration  27: 6706113.438 ops/s
# Warmup Iteration  28: 6716806.696 ops/s
# Warmup Iteration  29: 6646331.387 ops/s
# Warmup Iteration  30: 6726355.012 ops/s
Iteration   1: 6733914.374 ops/s
Iteration   2: 6754777.445 ops/s
Iteration   3: 6648527.045 ops/s
Iteration   4: 6748719.348 ops/s
Iteration   5: 6770391.713 ops/s
Iteration   6: 6741303.142 ops/s
Iteration   7: 6719239.346 ops/s
Iteration   8: 6740761.797 ops/s
Iteration   9: 6742736.788 ops/s
Iteration  10: 6752652.122 ops/s
Iteration  11: 6757506.618 ops/s
Iteration  12: 6731736.480 ops/s
Iteration  13: 6741099.781 ops/s
Iteration  14: 6751341.140 ops/s
Iteration  15: 6757025.964 ops/s
Iteration  16: 6745587.262 ops/s
Iteration  17: 6766480.766 ops/s
Iteration  18: 6751482.676 ops/s
Iteration  19: 6727591.200 ops/s
Iteration  20: 6744482.466 ops/s
Iteration  21: 6715649.905 ops/s
Iteration  22: 6656680.182 ops/s
Iteration  23: 6696494.645 ops/s
Iteration  24: 6738933.797 ops/s
Iteration  25: 6730390.384 ops/s
Iteration  26: 6761290.720 ops/s
Iteration  27: 6747214.020 ops/s
Iteration  28: 6754072.828 ops/s
Iteration  29: 6733616.495 ops/s
Iteration  30: 6747187.661 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWith":
  6736962.937 ±(99.9%) 18442.191 ops/s [Average]
  (min, avg, max) = (6648527.045, 6736962.937, 6770391.713), stdev = 27603.406
  CI (99.9%): [6718520.746, 6755405.128] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWith  thrpt   30  6736962.937 ± 18442.191  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3968585.080 ops/s
# Warmup Iteration   2: 9064630.903 ops/s
# Warmup Iteration   3: 9012630.901 ops/s
# Warmup Iteration   4: 7600309.538 ops/s
# Warmup Iteration   5: 9002975.773 ops/s
# Warmup Iteration   6: 9039985.672 ops/s
# Warmup Iteration   7: 9036891.302 ops/s
# Warmup Iteration   8: 9046673.908 ops/s
# Warmup Iteration   9: 9035470.654 ops/s
# Warmup Iteration  10: 9025995.014 ops/s
# Warmup Iteration  11: 9015945.364 ops/s
# Warmup Iteration  12: 9022680.245 ops/s
# Warmup Iteration  13: 9022768.649 ops/s
# Warmup Iteration  14: 9019309.622 ops/s
# Warmup Iteration  15: 9025815.345 ops/s
# Warmup Iteration  16: 9020738.195 ops/s
# Warmup Iteration  17: 9126196.990 ops/s
# Warmup Iteration  18: 9121095.426 ops/s
# Warmup Iteration  19: 9129528.706 ops/s
# Warmup Iteration  20: 9114380.678 ops/s
# Warmup Iteration  21: 9135061.631 ops/s
# Warmup Iteration  22: 9135087.854 ops/s
# Warmup Iteration  23: 9123113.661 ops/s
# Warmup Iteration  24: 9103641.764 ops/s
# Warmup Iteration  25: 9120008.740 ops/s
# Warmup Iteration  26: 9123431.593 ops/s
# Warmup Iteration  27: 9120054.289 ops/s
# Warmup Iteration  28: 9117872.964 ops/s
# Warmup Iteration  29: 9135139.905 ops/s
# Warmup Iteration  30: 9137046.285 ops/s
Iteration   1: 9142900.371 ops/s
Iteration   2: 9098115.021 ops/s
Iteration   3: 9111407.011 ops/s
Iteration   4: 9067392.130 ops/s
Iteration   5: 9132113.295 ops/s
Iteration   6: 9116188.768 ops/s
Iteration   7: 9104819.227 ops/s
Iteration   8: 9132529.971 ops/s
Iteration   9: 9118851.098 ops/s
Iteration  10: 9129109.659 ops/s
Iteration  11: 9126661.879 ops/s
Iteration  12: 9123636.873 ops/s
Iteration  13: 9110901.883 ops/s
Iteration  14: 9098349.192 ops/s
Iteration  15: 9124226.072 ops/s
Iteration  16: 9102233.394 ops/s
Iteration  17: 9139287.192 ops/s
Iteration  18: 9077060.576 ops/s
Iteration  19: 9122271.324 ops/s
Iteration  20: 9176418.425 ops/s
Iteration  21: 9137571.826 ops/s
Iteration  22: 9143005.694 ops/s
Iteration  23: 9131089.736 ops/s
Iteration  24: 9155384.054 ops/s
Iteration  25: 9144867.924 ops/s
Iteration  26: 9121208.361 ops/s
Iteration  27: 9036871.966 ops/s
Iteration  28: 9125207.938 ops/s
Iteration  29: 9120247.430 ops/s
Iteration  30: 9133261.754 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWithIndex":
  9120106.335 ±(99.9%) 17880.226 ops/s [Average]
  (min, avg, max) = (9036871.966, 9120106.335, 9176418.425), stdev = 26762.283
  CI (99.9%): [9102226.109, 9137986.561] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  9120106.335 ± 17880.226  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3948160.285 ops/s
# Warmup Iteration   2: 9301460.713 ops/s
# Warmup Iteration   3: 7621089.033 ops/s
# Warmup Iteration   4: 9107680.976 ops/s
# Warmup Iteration   5: 9115906.422 ops/s
# Warmup Iteration   6: 9131092.568 ops/s
# Warmup Iteration   7: 9088544.891 ops/s
# Warmup Iteration   8: 9086318.338 ops/s
# Warmup Iteration   9: 9042014.778 ops/s
# Warmup Iteration  10: 9091340.996 ops/s
# Warmup Iteration  11: 9118949.140 ops/s
# Warmup Iteration  12: 9078709.818 ops/s
# Warmup Iteration  13: 9077622.348 ops/s
# Warmup Iteration  14: 9061098.825 ops/s
# Warmup Iteration  15: 9076489.143 ops/s
# Warmup Iteration  16: 8996054.966 ops/s
# Warmup Iteration  17: 9127292.845 ops/s
# Warmup Iteration  18: 9127808.732 ops/s
# Warmup Iteration  19: 9109148.333 ops/s
# Warmup Iteration  20: 9064371.189 ops/s
# Warmup Iteration  21: 9027447.446 ops/s
# Warmup Iteration  22: 9059849.314 ops/s
# Warmup Iteration  23: 9088289.340 ops/s
# Warmup Iteration  24: 9090484.872 ops/s
# Warmup Iteration  25: 9062735.388 ops/s
# Warmup Iteration  26: 9109914.491 ops/s
# Warmup Iteration  27: 9108712.709 ops/s
# Warmup Iteration  28: 9114582.708 ops/s
# Warmup Iteration  29: 9077293.609 ops/s
# Warmup Iteration  30: 9119927.436 ops/s
Iteration   1: 9136853.168 ops/s
Iteration   2: 9142463.666 ops/s
Iteration   3: 9065451.531 ops/s
Iteration   4: 9155865.335 ops/s
Iteration   5: 9085233.336 ops/s
Iteration   6: 9082803.881 ops/s
Iteration   7: 9113979.956 ops/s
Iteration   8: 9066805.342 ops/s
Iteration   9: 9089937.672 ops/s
Iteration  10: 9084088.283 ops/s
Iteration  11: 9084793.129 ops/s
Iteration  12: 9074457.438 ops/s
Iteration  13: 9072172.407 ops/s
Iteration  14: 9116073.746 ops/s
Iteration  15: 9113823.473 ops/s
Iteration  16: 9105412.466 ops/s
Iteration  17: 9093773.055 ops/s
Iteration  18: 9097134.671 ops/s
Iteration  19: 9097028.991 ops/s
Iteration  20: 9106153.560 ops/s
Iteration  21: 9125735.287 ops/s
Iteration  22: 9103294.180 ops/s
Iteration  23: 9029302.023 ops/s
Iteration  24: 9087458.822 ops/s
Iteration  25: 9082357.107 ops/s
Iteration  26: 9114888.810 ops/s
Iteration  27: 9112761.938 ops/s
Iteration  28: 9094355.073 ops/s
Iteration  29: 9091024.238 ops/s
Iteration  30: 9097889.352 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  9097445.731 ±(99.9%) 16791.265 ops/s [Average]
  (min, avg, max) = (9029302.023, 9097445.731, 9155865.335), stdev = 25132.377
  CI (99.9%): [9080654.466, 9114236.997] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  9097445.731 ± 16791.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4144030.543 ops/s
# Warmup Iteration   2: 9152453.350 ops/s
# Warmup Iteration   3: 8933450.450 ops/s
# Warmup Iteration   4: 8018607.221 ops/s
# Warmup Iteration   5: 9156556.788 ops/s
# Warmup Iteration   6: 9159266.430 ops/s
# Warmup Iteration   7: 9146859.162 ops/s
# Warmup Iteration   8: 9139897.940 ops/s
# Warmup Iteration   9: 9150950.001 ops/s
# Warmup Iteration  10: 9157278.719 ops/s
# Warmup Iteration  11: 9152560.928 ops/s
# Warmup Iteration  12: 9135675.792 ops/s
# Warmup Iteration  13: 9169422.057 ops/s
# Warmup Iteration  14: 9149302.398 ops/s
# Warmup Iteration  15: 9123514.113 ops/s
# Warmup Iteration  16: 9122412.769 ops/s
# Warmup Iteration  17: 9141146.607 ops/s
# Warmup Iteration  18: 9128751.185 ops/s
# Warmup Iteration  19: 9135842.314 ops/s
# Warmup Iteration  20: 9144665.910 ops/s
# Warmup Iteration  21: 9176954.336 ops/s
# Warmup Iteration  22: 9189389.831 ops/s
# Warmup Iteration  23: 9169013.904 ops/s
# Warmup Iteration  24: 9135943.420 ops/s
# Warmup Iteration  25: 9143139.862 ops/s
# Warmup Iteration  26: 9145346.594 ops/s
# Warmup Iteration  27: 9144051.750 ops/s
# Warmup Iteration  28: 9159692.495 ops/s
# Warmup Iteration  29: 9124671.967 ops/s
# Warmup Iteration  30: 9120753.525 ops/s
Iteration   1: 9170275.674 ops/s
Iteration   2: 9170804.205 ops/s
Iteration   3: 9170288.976 ops/s
Iteration   4: 9183607.504 ops/s
Iteration   5: 9164650.614 ops/s
Iteration   6: 9150621.922 ops/s
Iteration   7: 9166948.108 ops/s
Iteration   8: 9164901.732 ops/s
Iteration   9: 9163939.375 ops/s
Iteration  10: 9153364.233 ops/s
Iteration  11: 9139943.344 ops/s
Iteration  12: 9160718.377 ops/s
Iteration  13: 9189144.742 ops/s
Iteration  14: 9139359.383 ops/s
Iteration  15: 9178275.300 ops/s
Iteration  16: 9163095.084 ops/s
Iteration  17: 9103336.123 ops/s
Iteration  18: 9159837.278 ops/s
Iteration  19: 9168462.468 ops/s
Iteration  20: 9169491.066 ops/s
Iteration  21: 9170684.707 ops/s
Iteration  22: 9150676.211 ops/s
Iteration  23: 9127484.687 ops/s
Iteration  24: 9162688.941 ops/s
Iteration  25: 9184274.405 ops/s
Iteration  26: 8976426.638 ops/s
Iteration  27: 9165422.658 ops/s
Iteration  28: 9146104.059 ops/s
Iteration  29: 9191038.953 ops/s
Iteration  30: 9188661.390 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWith_target":
  9156484.272 ±(99.9%) 25938.828 ops/s [Average]
  (min, avg, max) = (8976426.638, 9156484.272, 9191038.953), stdev = 38824.019
  CI (99.9%): [9130545.444, 9182423.100] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  9156484.272 ± 25938.828  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_reject_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_reject_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5264353.450 ops/s
# Warmup Iteration   2: 11225816.639 ops/s
# Warmup Iteration   3: 11389782.552 ops/s
# Warmup Iteration   4: 9562715.184 ops/s
# Warmup Iteration   5: 11307904.733 ops/s
# Warmup Iteration   6: 11306392.359 ops/s
# Warmup Iteration   7: 11307230.089 ops/s
# Warmup Iteration   8: 11302782.294 ops/s
# Warmup Iteration   9: 11356433.302 ops/s
# Warmup Iteration  10: 11345720.555 ops/s
# Warmup Iteration  11: 11346373.363 ops/s
# Warmup Iteration  12: 11297296.852 ops/s
# Warmup Iteration  13: 11333255.150 ops/s
# Warmup Iteration  14: 11314330.734 ops/s
# Warmup Iteration  15: 11329715.088 ops/s
# Warmup Iteration  16: 11352650.081 ops/s
# Warmup Iteration  17: 11356762.275 ops/s
# Warmup Iteration  18: 11381344.315 ops/s
# Warmup Iteration  19: 11327897.173 ops/s
# Warmup Iteration  20: 11355813.006 ops/s
# Warmup Iteration  21: 11379978.430 ops/s
# Warmup Iteration  22: 11366482.898 ops/s
# Warmup Iteration  23: 11352249.937 ops/s
# Warmup Iteration  24: 11355582.355 ops/s
# Warmup Iteration  25: 11322845.366 ops/s
# Warmup Iteration  26: 11364322.578 ops/s
# Warmup Iteration  27: 11362326.948 ops/s
# Warmup Iteration  28: 11316746.717 ops/s
# Warmup Iteration  29: 11266411.481 ops/s
# Warmup Iteration  30: 11376396.661 ops/s
Iteration   1: 11335989.043 ops/s
Iteration   2: 11361842.950 ops/s
Iteration   3: 11333501.601 ops/s
Iteration   4: 11354251.005 ops/s
Iteration   5: 11347087.527 ops/s
Iteration   6: 11331707.371 ops/s
Iteration   7: 11377761.867 ops/s
Iteration   8: 11335805.249 ops/s
Iteration   9: 11363288.213 ops/s
Iteration  10: 11378055.553 ops/s
Iteration  11: 11381417.589 ops/s
Iteration  12: 11352806.080 ops/s
Iteration  13: 11394274.110 ops/s
Iteration  14: 11373479.261 ops/s
Iteration  15: 11353625.045 ops/s
Iteration  16: 11250852.625 ops/s
Iteration  17: 11309905.169 ops/s
Iteration  18: 11353458.449 ops/s
Iteration  19: 11351880.677 ops/s
Iteration  20: 11337910.820 ops/s
Iteration  21: 11307062.368 ops/s
Iteration  22: 11315481.354 ops/s
Iteration  23: 11360929.344 ops/s
Iteration  24: 11366561.706 ops/s
Iteration  25: 11369801.983 ops/s
Iteration  26: 11326216.463 ops/s
Iteration  27: 11356925.921 ops/s
Iteration  28: 11361204.929 ops/s
Iteration  29: 11308437.369 ops/s
Iteration  30: 11378021.837 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_reject_target":
  11347651.449 ±(99.9%) 19589.871 ops/s [Average]
  (min, avg, max) = (11250852.625, 11347651.449, 11394274.110), stdev = 29321.199
  CI (99.9%): [11328061.578, 11367241.321] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_reject_target  thrpt   30  11347651.449 ± 19589.871  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748862.156 ops/s
# Warmup Iteration   2: 784609.436 ops/s
# Warmup Iteration   3: 977564.965 ops/s
# Warmup Iteration   4: 972004.360 ops/s
# Warmup Iteration   5: 967168.702 ops/s
# Warmup Iteration   6: 969297.685 ops/s
# Warmup Iteration   7: 968223.464 ops/s
# Warmup Iteration   8: 969571.610 ops/s
# Warmup Iteration   9: 973592.714 ops/s
# Warmup Iteration  10: 974938.012 ops/s
# Warmup Iteration  11: 969809.108 ops/s
# Warmup Iteration  12: 836092.958 ops/s
# Warmup Iteration  13: 974308.242 ops/s
# Warmup Iteration  14: 973560.202 ops/s
# Warmup Iteration  15: 973463.742 ops/s
# Warmup Iteration  16: 969561.450 ops/s
# Warmup Iteration  17: 1057183.866 ops/s
# Warmup Iteration  18: 1054755.980 ops/s
# Warmup Iteration  19: 1055593.917 ops/s
# Warmup Iteration  20: 1055923.530 ops/s
# Warmup Iteration  21: 1054485.676 ops/s
# Warmup Iteration  22: 1054927.291 ops/s
# Warmup Iteration  23: 1051915.016 ops/s
# Warmup Iteration  24: 1051441.431 ops/s
# Warmup Iteration  25: 1054327.664 ops/s
# Warmup Iteration  26: 1058861.807 ops/s
# Warmup Iteration  27: 1057705.871 ops/s
# Warmup Iteration  28: 1055624.489 ops/s
# Warmup Iteration  29: 1053884.930 ops/s
# Warmup Iteration  30: 1052593.716 ops/s
Iteration   1: 1055954.539 ops/s
Iteration   2: 1054110.983 ops/s
Iteration   3: 1056758.353 ops/s
Iteration   4: 1060662.969 ops/s
Iteration   5: 1052905.936 ops/s
Iteration   6: 1051179.162 ops/s
Iteration   7: 1059337.079 ops/s
Iteration   8: 1056384.274 ops/s
Iteration   9: 1056586.481 ops/s
Iteration  10: 1055530.936 ops/s
Iteration  11: 1056741.277 ops/s
Iteration  12: 1056189.021 ops/s
Iteration  13: 1051828.303 ops/s
Iteration  14: 1052930.258 ops/s
Iteration  15: 1061350.971 ops/s
Iteration  16: 1054692.711 ops/s
Iteration  17: 1054994.641 ops/s
Iteration  18: 1051548.179 ops/s
Iteration  19: 1056919.778 ops/s
Iteration  20: 1055042.550 ops/s
Iteration  21: 1054148.263 ops/s
Iteration  22: 1052245.917 ops/s
Iteration  23: 1051511.504 ops/s
Iteration  24: 1052929.691 ops/s
Iteration  25: 1052845.557 ops/s
Iteration  26: 1057889.180 ops/s
Iteration  27: 1061222.416 ops/s
Iteration  28: 1059632.298 ops/s
Iteration  29: 1057925.616 ops/s
Iteration  30: 1055736.625 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_remove":
  1055591.182 ±(99.9%) 1964.554 ops/s [Average]
  (min, avg, max) = (1051179.162, 1055591.182, 1061350.971), stdev = 2940.452
  CI (99.9%): [1053626.628, 1057555.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_remove  thrpt   30  1055591.182 ± 1964.554  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 744414.061 ops/s
# Warmup Iteration   2: 780929.432 ops/s
# Warmup Iteration   3: 976141.052 ops/s
# Warmup Iteration   4: 971345.038 ops/s
# Warmup Iteration   5: 970714.692 ops/s
# Warmup Iteration   6: 976212.627 ops/s
# Warmup Iteration   7: 976871.562 ops/s
# Warmup Iteration   8: 974337.591 ops/s
# Warmup Iteration   9: 970696.093 ops/s
# Warmup Iteration  10: 970855.487 ops/s
# Warmup Iteration  11: 974452.370 ops/s
# Warmup Iteration  12: 837352.646 ops/s
# Warmup Iteration  13: 979234.028 ops/s
# Warmup Iteration  14: 978038.005 ops/s
# Warmup Iteration  15: 976233.624 ops/s
# Warmup Iteration  16: 973196.313 ops/s
# Warmup Iteration  17: 1034898.604 ops/s
# Warmup Iteration  18: 1022931.144 ops/s
# Warmup Iteration  19: 1025727.909 ops/s
# Warmup Iteration  20: 1024002.775 ops/s
# Warmup Iteration  21: 1024091.243 ops/s
# Warmup Iteration  22: 1022673.091 ops/s
# Warmup Iteration  23: 1025512.578 ops/s
# Warmup Iteration  24: 1021811.129 ops/s
# Warmup Iteration  25: 1024889.133 ops/s
# Warmup Iteration  26: 1023230.671 ops/s
# Warmup Iteration  27: 1031166.760 ops/s
# Warmup Iteration  28: 1033317.291 ops/s
# Warmup Iteration  29: 1033875.993 ops/s
# Warmup Iteration  30: 1035254.849 ops/s
Iteration   1: 1032727.757 ops/s
Iteration   2: 1028115.351 ops/s
Iteration   3: 1027961.584 ops/s
Iteration   4: 1037289.732 ops/s
Iteration   5: 1025957.910 ops/s
Iteration   6: 1027782.494 ops/s
Iteration   7: 1032412.876 ops/s
Iteration   8: 1034404.902 ops/s
Iteration   9: 1037086.100 ops/s
Iteration  10: 1034415.487 ops/s
Iteration  11: 1035263.734 ops/s
Iteration  12: 1039481.709 ops/s
Iteration  13: 1039661.887 ops/s
Iteration  14: 1031179.448 ops/s
Iteration  15: 1034139.164 ops/s
Iteration  16: 1026952.182 ops/s
Iteration  17: 1026958.453 ops/s
Iteration  18: 1031422.194 ops/s
Iteration  19: 1029421.130 ops/s
Iteration  20: 1032356.214 ops/s
Iteration  21: 1032523.172 ops/s
Iteration  22: 1029837.903 ops/s
Iteration  23: 1030792.747 ops/s
Iteration  24: 1032760.537 ops/s
Iteration  25: 1032995.919 ops/s
Iteration  26: 1031385.620 ops/s
Iteration  27: 1023726.477 ops/s
Iteration  28: 1031910.569 ops/s
Iteration  29: 1032229.430 ops/s
Iteration  30: 1029713.918 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_removeAll":
  1031762.220 ±(99.9%) 2545.149 ops/s [Average]
  (min, avg, max) = (1023726.477, 1031762.220, 1039661.887), stdev = 3809.460
  CI (99.9%): [1029217.071, 1034307.369] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_removeAll  thrpt   30  1031762.220 ± 2545.149  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 759012.421 ops/s
# Warmup Iteration   2: 805436.642 ops/s
# Warmup Iteration   3: 1009573.295 ops/s
# Warmup Iteration   4: 1006976.737 ops/s
# Warmup Iteration   5: 1001016.782 ops/s
# Warmup Iteration   6: 1007893.672 ops/s
# Warmup Iteration   7: 1005975.271 ops/s
# Warmup Iteration   8: 997110.504 ops/s
# Warmup Iteration   9: 999691.874 ops/s
# Warmup Iteration  10: 1003184.265 ops/s
# Warmup Iteration  11: 958809.725 ops/s
# Warmup Iteration  12: 901068.964 ops/s
# Warmup Iteration  13: 1004348.973 ops/s
# Warmup Iteration  14: 1007054.920 ops/s
# Warmup Iteration  15: 1009004.412 ops/s
# Warmup Iteration  16: 1007400.222 ops/s
# Warmup Iteration  17: 1073385.963 ops/s
# Warmup Iteration  18: 1074032.226 ops/s
# Warmup Iteration  19: 1074403.492 ops/s
# Warmup Iteration  20: 1074085.055 ops/s
# Warmup Iteration  21: 1072556.547 ops/s
# Warmup Iteration  22: 1070257.819 ops/s
# Warmup Iteration  23: 1068486.940 ops/s
# Warmup Iteration  24: 1070245.851 ops/s
# Warmup Iteration  25: 1069170.415 ops/s
# Warmup Iteration  26: 1072572.953 ops/s
# Warmup Iteration  27: 1073085.907 ops/s
# Warmup Iteration  28: 1073390.889 ops/s
# Warmup Iteration  29: 1073712.494 ops/s
# Warmup Iteration  30: 1075669.122 ops/s
Iteration   1: 1070811.612 ops/s
Iteration   2: 1069718.453 ops/s
Iteration   3: 1074703.767 ops/s
Iteration   4: 1066776.916 ops/s
Iteration   5: 1069900.110 ops/s
Iteration   6: 1072004.687 ops/s
Iteration   7: 1072596.856 ops/s
Iteration   8: 1074732.541 ops/s
Iteration   9: 1071676.685 ops/s
Iteration  10: 1072587.711 ops/s
Iteration  11: 1073390.808 ops/s
Iteration  12: 1072456.526 ops/s
Iteration  13: 1069162.381 ops/s
Iteration  14: 1074144.846 ops/s
Iteration  15: 1072939.072 ops/s
Iteration  16: 1067580.961 ops/s
Iteration  17: 1072820.968 ops/s
Iteration  18: 1071326.286 ops/s
Iteration  19: 1071799.286 ops/s
Iteration  20: 1072578.095 ops/s
Iteration  21: 1071291.321 ops/s
Iteration  22: 1070257.223 ops/s
Iteration  23: 1070397.177 ops/s
Iteration  24: 1064954.317 ops/s
Iteration  25: 1073390.180 ops/s
Iteration  26: 1074914.147 ops/s
Iteration  27: 1071384.390 ops/s
Iteration  28: 1071611.641 ops/s
Iteration  29: 1073126.001 ops/s
Iteration  30: 1071444.583 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_removeAtIndex":
  1071549.318 ±(99.9%) 1533.533 ops/s [Average]
  (min, avg, max) = (1064954.317, 1071549.318, 1074914.147), stdev = 2295.320
  CI (99.9%): [1070015.785, 1073082.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1071549.318 ± 1533.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 757354.627 ops/s
# Warmup Iteration   2: 803742.496 ops/s
# Warmup Iteration   3: 1002127.792 ops/s
# Warmup Iteration   4: 1002681.200 ops/s
# Warmup Iteration   5: 995220.621 ops/s
# Warmup Iteration   6: 1002656.431 ops/s
# Warmup Iteration   7: 1006548.834 ops/s
# Warmup Iteration   8: 1004565.276 ops/s
# Warmup Iteration   9: 1004100.885 ops/s
# Warmup Iteration  10: 999686.030 ops/s
# Warmup Iteration  11: 934496.642 ops/s
# Warmup Iteration  12: 926625.905 ops/s
# Warmup Iteration  13: 1007359.982 ops/s
# Warmup Iteration  14: 1007066.060 ops/s
# Warmup Iteration  15: 1008473.580 ops/s
# Warmup Iteration  16: 1001576.597 ops/s
# Warmup Iteration  17: 1059653.600 ops/s
# Warmup Iteration  18: 1062583.192 ops/s
# Warmup Iteration  19: 1060671.207 ops/s
# Warmup Iteration  20: 1069694.785 ops/s
# Warmup Iteration  21: 1064911.595 ops/s
# Warmup Iteration  22: 1065025.870 ops/s
# Warmup Iteration  23: 1062661.434 ops/s
# Warmup Iteration  24: 1062080.375 ops/s
# Warmup Iteration  25: 1060683.501 ops/s
# Warmup Iteration  26: 1062715.012 ops/s
# Warmup Iteration  27: 1060074.073 ops/s
# Warmup Iteration  28: 1052185.676 ops/s
# Warmup Iteration  29: 1056442.946 ops/s
# Warmup Iteration  30: 1059393.323 ops/s
Iteration   1: 1058236.176 ops/s
Iteration   2: 1054150.820 ops/s
Iteration   3: 1059486.250 ops/s
Iteration   4: 1064728.285 ops/s
Iteration   5: 1062264.747 ops/s
Iteration   6: 1061770.253 ops/s
Iteration   7: 1065738.628 ops/s
Iteration   8: 1057801.523 ops/s
Iteration   9: 1060133.729 ops/s
Iteration  10: 1057366.455 ops/s
Iteration  11: 1053391.888 ops/s
Iteration  12: 1061799.736 ops/s
Iteration  13: 1059786.892 ops/s
Iteration  14: 1058941.126 ops/s
Iteration  15: 1055310.651 ops/s
Iteration  16: 1058281.961 ops/s
Iteration  17: 1055788.460 ops/s
Iteration  18: 1053079.283 ops/s
Iteration  19: 1060871.094 ops/s
Iteration  20: 1057549.163 ops/s
Iteration  21: 1054534.545 ops/s
Iteration  22: 1057889.644 ops/s
Iteration  23: 1051140.983 ops/s
Iteration  24: 1055411.464 ops/s
Iteration  25: 1055400.251 ops/s
Iteration  26: 1064963.232 ops/s
Iteration  27: 1065363.931 ops/s
Iteration  28: 1058920.037 ops/s
Iteration  29: 1065011.949 ops/s
Iteration  30: 1057693.037 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_replaceAll":
  1058760.206 ±(99.9%) 2638.425 ops/s [Average]
  (min, avg, max) = (1051140.983, 1058760.206, 1065738.628), stdev = 3949.070
  CI (99.9%): [1056121.782, 1061398.631] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_replaceAll  thrpt   30  1058760.206 ± 2638.425  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 740608.025 ops/s
# Warmup Iteration   2: 784468.778 ops/s
# Warmup Iteration   3: 984274.817 ops/s
# Warmup Iteration   4: 975070.158 ops/s
# Warmup Iteration   5: 967870.898 ops/s
# Warmup Iteration   6: 973399.804 ops/s
# Warmup Iteration   7: 972976.777 ops/s
# Warmup Iteration   8: 975070.461 ops/s
# Warmup Iteration   9: 965494.167 ops/s
# Warmup Iteration  10: 968418.030 ops/s
# Warmup Iteration  11: 969671.789 ops/s
# Warmup Iteration  12: 835614.225 ops/s
# Warmup Iteration  13: 973838.702 ops/s
# Warmup Iteration  14: 975309.443 ops/s
# Warmup Iteration  15: 975971.482 ops/s
# Warmup Iteration  16: 971856.308 ops/s
# Warmup Iteration  17: 1028256.942 ops/s
# Warmup Iteration  18: 1024660.142 ops/s
# Warmup Iteration  19: 1025482.355 ops/s
# Warmup Iteration  20: 1024853.822 ops/s
# Warmup Iteration  21: 1025171.433 ops/s
# Warmup Iteration  22: 1023291.169 ops/s
# Warmup Iteration  23: 1021736.075 ops/s
# Warmup Iteration  24: 1024916.624 ops/s
# Warmup Iteration  25: 1026536.905 ops/s
# Warmup Iteration  26: 1019103.398 ops/s
# Warmup Iteration  27: 1032761.785 ops/s
# Warmup Iteration  28: 1030653.168 ops/s
# Warmup Iteration  29: 1031498.276 ops/s
# Warmup Iteration  30: 1027177.922 ops/s
Iteration   1: 1030409.036 ops/s
Iteration   2: 1018341.862 ops/s
Iteration   3: 1022285.405 ops/s
Iteration   4: 1025666.398 ops/s
Iteration   5: 1023954.601 ops/s
Iteration   6: 1031435.075 ops/s
Iteration   7: 1031055.464 ops/s
Iteration   8: 1028301.898 ops/s
Iteration   9: 1032136.428 ops/s
Iteration  10: 1021558.446 ops/s
Iteration  11: 1028127.824 ops/s
Iteration  12: 1028088.438 ops/s
Iteration  13: 1027216.894 ops/s
Iteration  14: 1026324.747 ops/s
Iteration  15: 1029303.407 ops/s
Iteration  16: 1030716.166 ops/s
Iteration  17: 1027207.393 ops/s
Iteration  18: 1025974.955 ops/s
Iteration  19: 1022847.366 ops/s
Iteration  20: 1021994.801 ops/s
Iteration  21: 1027089.569 ops/s
Iteration  22: 1024904.777 ops/s
Iteration  23: 1023896.274 ops/s
Iteration  24: 1026209.076 ops/s
Iteration  25: 1022056.469 ops/s
Iteration  26: 1025849.306 ops/s
Iteration  27: 1022604.266 ops/s
Iteration  28: 1026625.411 ops/s
Iteration  29: 1030723.236 ops/s
Iteration  30: 1030326.472 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_retainAll":
  1026441.049 ±(99.9%) 2336.165 ops/s [Average]
  (min, avg, max) = (1018341.862, 1026441.049, 1032136.428), stdev = 3496.662
  CI (99.9%): [1024104.883, 1028777.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_retainAll  thrpt   30  1026441.049 ± 2336.165  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7027387.927 ops/s
# Warmup Iteration   2: 14345634.102 ops/s
# Warmup Iteration   3: 14481550.820 ops/s
# Warmup Iteration   4: 12633295.610 ops/s
# Warmup Iteration   5: 14684560.014 ops/s
# Warmup Iteration   6: 14628631.391 ops/s
# Warmup Iteration   7: 14667882.185 ops/s
# Warmup Iteration   8: 14713545.306 ops/s
# Warmup Iteration   9: 14679846.564 ops/s
# Warmup Iteration  10: 14657995.155 ops/s
# Warmup Iteration  11: 14315483.515 ops/s
# Warmup Iteration  12: 14668522.324 ops/s
# Warmup Iteration  13: 14691517.395 ops/s
# Warmup Iteration  14: 14702127.724 ops/s
# Warmup Iteration  15: 14672401.686 ops/s
# Warmup Iteration  16: 14673917.768 ops/s
# Warmup Iteration  17: 14551969.272 ops/s
# Warmup Iteration  18: 14702373.008 ops/s
# Warmup Iteration  19: 14631459.766 ops/s
# Warmup Iteration  20: 14631532.979 ops/s
# Warmup Iteration  21: 14672495.058 ops/s
# Warmup Iteration  22: 14658442.018 ops/s
# Warmup Iteration  23: 14676780.022 ops/s
# Warmup Iteration  24: 14680033.097 ops/s
# Warmup Iteration  25: 14701409.896 ops/s
# Warmup Iteration  26: 14642515.135 ops/s
# Warmup Iteration  27: 14718913.521 ops/s
# Warmup Iteration  28: 14717892.336 ops/s
# Warmup Iteration  29: 14718477.692 ops/s
# Warmup Iteration  30: 14643852.686 ops/s
Iteration   1: 14721483.728 ops/s
Iteration   2: 14677579.711 ops/s
Iteration   3: 14700853.942 ops/s
Iteration   4: 14648436.200 ops/s
Iteration   5: 14600397.696 ops/s
Iteration   6: 14650133.849 ops/s
Iteration   7: 14639602.183 ops/s
Iteration   8: 14710174.302 ops/s
Iteration   9: 14731051.971 ops/s
Iteration  10: 14738813.170 ops/s
Iteration  11: 14679936.037 ops/s
Iteration  12: 14699342.066 ops/s
Iteration  13: 14712004.490 ops/s
Iteration  14: 14705669.090 ops/s
Iteration  15: 14692446.316 ops/s
Iteration  16: 14697302.309 ops/s
Iteration  17: 14728462.483 ops/s
Iteration  18: 14747661.669 ops/s
Iteration  19: 14711590.460 ops/s
Iteration  20: 14692320.780 ops/s
Iteration  21: 14697453.272 ops/s
Iteration  22: 14734011.813 ops/s
Iteration  23: 14759245.171 ops/s
Iteration  24: 14703887.153 ops/s
Iteration  25: 14691388.124 ops/s
Iteration  26: 14617044.426 ops/s
Iteration  27: 14687052.308 ops/s
Iteration  28: 14683881.863 ops/s
Iteration  29: 14667324.164 ops/s
Iteration  30: 14695250.984 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_reverseForEach":
  14694060.058 ±(99.9%) 24272.211 ops/s [Average]
  (min, avg, max) = (14600397.696, 14694060.058, 14759245.171), stdev = 36329.505
  CI (99.9%): [14669787.847, 14718332.268] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_reverseForEach  thrpt   30  14694060.058 ± 24272.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4126919.906 ops/s
# Warmup Iteration   2: 8166095.753 ops/s
# Warmup Iteration   3: 8584869.266 ops/s
# Warmup Iteration   4: 8596133.216 ops/s
# Warmup Iteration   5: 7200540.759 ops/s
# Warmup Iteration   6: 8626211.391 ops/s
# Warmup Iteration   7: 8663194.724 ops/s
# Warmup Iteration   8: 8623626.528 ops/s
# Warmup Iteration   9: 8644981.458 ops/s
# Warmup Iteration  10: 8642099.855 ops/s
# Warmup Iteration  11: 8598859.538 ops/s
# Warmup Iteration  12: 8614628.249 ops/s
# Warmup Iteration  13: 8630894.518 ops/s
# Warmup Iteration  14: 8652764.415 ops/s
# Warmup Iteration  15: 8601739.480 ops/s
# Warmup Iteration  16: 8613042.972 ops/s
# Warmup Iteration  17: 8631908.608 ops/s
# Warmup Iteration  18: 8631857.125 ops/s
# Warmup Iteration  19: 8602725.557 ops/s
# Warmup Iteration  20: 8602201.072 ops/s
# Warmup Iteration  21: 8616992.444 ops/s
# Warmup Iteration  22: 8614094.099 ops/s
# Warmup Iteration  23: 8631085.067 ops/s
# Warmup Iteration  24: 8634420.795 ops/s
# Warmup Iteration  25: 8648738.375 ops/s
# Warmup Iteration  26: 8646196.027 ops/s
# Warmup Iteration  27: 8641021.932 ops/s
# Warmup Iteration  28: 8657873.648 ops/s
# Warmup Iteration  29: 8636895.560 ops/s
# Warmup Iteration  30: 8630053.940 ops/s
Iteration   1: 8650476.897 ops/s
Iteration   2: 8591793.709 ops/s
Iteration   3: 8618259.081 ops/s
Iteration   4: 8624779.477 ops/s
Iteration   5: 8617351.084 ops/s
Iteration   6: 8633020.922 ops/s
Iteration   7: 8591650.161 ops/s
Iteration   8: 8660120.748 ops/s
Iteration   9: 8637015.157 ops/s
Iteration  10: 8636807.983 ops/s
Iteration  11: 8649182.192 ops/s
Iteration  12: 8613928.725 ops/s
Iteration  13: 8624643.621 ops/s
Iteration  14: 8641700.608 ops/s
Iteration  15: 8649502.774 ops/s
Iteration  16: 8627408.300 ops/s
Iteration  17: 8613950.027 ops/s
Iteration  18: 8611834.863 ops/s
Iteration  19: 8635186.137 ops/s
Iteration  20: 8633702.103 ops/s
Iteration  21: 8638970.771 ops/s
Iteration  22: 8652392.350 ops/s
Iteration  23: 8628537.902 ops/s
Iteration  24: 8652267.479 ops/s
Iteration  25: 8625334.837 ops/s
Iteration  26: 8634383.330 ops/s
Iteration  27: 8627784.373 ops/s
Iteration  28: 8632203.336 ops/s
Iteration  29: 8634711.603 ops/s
Iteration  30: 8587132.319 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_reverseForEachWithIndex":
  8629201.096 ±(99.9%) 12070.215 ops/s [Average]
  (min, avg, max) = (8587132.319, 8629201.096, 8660120.748), stdev = 18066.131
  CI (99.9%): [8617130.880, 8641271.311] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  8629201.096 ± 12070.215  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4111928.980 ops/s
# Warmup Iteration   2: 9561057.422 ops/s
# Warmup Iteration   3: 9638587.337 ops/s
# Warmup Iteration   4: 8047921.032 ops/s
# Warmup Iteration   5: 9646798.461 ops/s
# Warmup Iteration   6: 9639008.336 ops/s
# Warmup Iteration   7: 9633157.345 ops/s
# Warmup Iteration   8: 9631768.854 ops/s
# Warmup Iteration   9: 9641335.688 ops/s
# Warmup Iteration  10: 9621709.133 ops/s
# Warmup Iteration  11: 9634162.092 ops/s
# Warmup Iteration  12: 9643520.478 ops/s
# Warmup Iteration  13: 9656000.759 ops/s
# Warmup Iteration  14: 9630959.809 ops/s
# Warmup Iteration  15: 9647027.141 ops/s
# Warmup Iteration  16: 9660440.199 ops/s
# Warmup Iteration  17: 9674588.882 ops/s
# Warmup Iteration  18: 9657486.367 ops/s
# Warmup Iteration  19: 9651835.269 ops/s
# Warmup Iteration  20: 9639700.058 ops/s
# Warmup Iteration  21: 9624168.391 ops/s
# Warmup Iteration  22: 9668004.239 ops/s
# Warmup Iteration  23: 9654473.268 ops/s
# Warmup Iteration  24: 9638602.125 ops/s
# Warmup Iteration  25: 9656541.371 ops/s
# Warmup Iteration  26: 9533754.392 ops/s
# Warmup Iteration  27: 9632016.497 ops/s
# Warmup Iteration  28: 9655673.362 ops/s
# Warmup Iteration  29: 9630772.791 ops/s
# Warmup Iteration  30: 9653665.123 ops/s
Iteration   1: 9654386.459 ops/s
Iteration   2: 9655793.134 ops/s
Iteration   3: 9667945.087 ops/s
Iteration   4: 9647610.021 ops/s
Iteration   5: 9639326.543 ops/s
Iteration   6: 9627110.759 ops/s
Iteration   7: 9593104.740 ops/s
Iteration   8: 9577773.397 ops/s
Iteration   9: 9565017.007 ops/s
Iteration  10: 9601053.775 ops/s
Iteration  11: 9668230.038 ops/s
Iteration  12: 9662507.212 ops/s
Iteration  13: 9671768.527 ops/s
Iteration  14: 9653475.693 ops/s
Iteration  15: 9637225.003 ops/s
Iteration  16: 9665306.783 ops/s
Iteration  17: 9650516.940 ops/s
Iteration  18: 9615728.462 ops/s
Iteration  19: 9641968.698 ops/s
Iteration  20: 9656224.846 ops/s
Iteration  21: 9601385.143 ops/s
Iteration  22: 9649314.109 ops/s
Iteration  23: 9662937.116 ops/s
Iteration  24: 9647624.157 ops/s
Iteration  25: 9612476.837 ops/s
Iteration  26: 9612220.591 ops/s
Iteration  27: 9637666.494 ops/s
Iteration  28: 9572334.942 ops/s
Iteration  29: 9646576.254 ops/s
Iteration  30: 9654497.515 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_select":
  9634970.209 ±(99.9%) 20216.004 ops/s [Average]
  (min, avg, max) = (9565017.007, 9634970.209, 9671768.527), stdev = 30258.365
  CI (99.9%): [9614754.206, 9655186.213] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_select  thrpt   30  9634970.209 ± 20216.004  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5875028.312 ops/s
# Warmup Iteration   2: 8515286.667 ops/s
# Warmup Iteration   3: 9195800.917 ops/s
# Warmup Iteration   4: 9242547.877 ops/s
# Warmup Iteration   5: 9262584.350 ops/s
# Warmup Iteration   6: 7727299.513 ops/s
# Warmup Iteration   7: 9245229.813 ops/s
# Warmup Iteration   8: 9243018.747 ops/s
# Warmup Iteration   9: 9264097.528 ops/s
# Warmup Iteration  10: 9263441.340 ops/s
# Warmup Iteration  11: 9254012.271 ops/s
# Warmup Iteration  12: 9245352.189 ops/s
# Warmup Iteration  13: 9260383.447 ops/s
# Warmup Iteration  14: 9230075.547 ops/s
# Warmup Iteration  15: 9258245.932 ops/s
# Warmup Iteration  16: 9247814.748 ops/s
# Warmup Iteration  17: 9246741.920 ops/s
# Warmup Iteration  18: 9250077.673 ops/s
# Warmup Iteration  19: 9241501.694 ops/s
# Warmup Iteration  20: 9257170.180 ops/s
# Warmup Iteration  21: 9251962.276 ops/s
# Warmup Iteration  22: 9254472.093 ops/s
# Warmup Iteration  23: 9229089.605 ops/s
# Warmup Iteration  24: 9221360.729 ops/s
# Warmup Iteration  25: 9201426.953 ops/s
# Warmup Iteration  26: 9250825.508 ops/s
# Warmup Iteration  27: 9247945.052 ops/s
# Warmup Iteration  28: 9247227.008 ops/s
# Warmup Iteration  29: 9228014.576 ops/s
# Warmup Iteration  30: 9223564.006 ops/s
Iteration   1: 9246455.684 ops/s
Iteration   2: 9251153.875 ops/s
Iteration   3: 9161746.167 ops/s
Iteration   4: 9231320.040 ops/s
Iteration   5: 9238865.354 ops/s
Iteration   6: 9261466.887 ops/s
Iteration   7: 9231134.374 ops/s
Iteration   8: 9260793.025 ops/s
Iteration   9: 9237944.093 ops/s
Iteration  10: 9253582.901 ops/s
Iteration  11: 9235477.548 ops/s
Iteration  12: 9220930.505 ops/s
Iteration  13: 9215200.979 ops/s
Iteration  14: 9256833.947 ops/s
Iteration  15: 9254585.948 ops/s
Iteration  16: 9248612.708 ops/s
Iteration  17: 9263444.055 ops/s
Iteration  18: 9262517.674 ops/s
Iteration  19: 9247251.622 ops/s
Iteration  20: 9220742.380 ops/s
Iteration  21: 9197915.228 ops/s
Iteration  22: 9240034.348 ops/s
Iteration  23: 9198745.521 ops/s
Iteration  24: 8728990.444 ops/s
Iteration  25: 9128349.594 ops/s
Iteration  26: 9222573.729 ops/s
Iteration  27: 9224712.792 ops/s
Iteration  28: 9249668.911 ops/s
Iteration  29: 9233126.949 ops/s
Iteration  30: 9253413.698 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectInstancesOf":
  9215919.699 ±(99.9%) 64598.466 ops/s [Average]
  (min, avg, max) = (8728990.444, 9215919.699, 9263444.055), stdev = 96687.950
  CI (99.9%): [9151321.234, 9280518.165] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  9215919.699 ± 64598.466  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2816604.486 ops/s
# Warmup Iteration   2: 6422673.218 ops/s
# Warmup Iteration   3: 6363048.293 ops/s
# Warmup Iteration   4: 5343423.321 ops/s
# Warmup Iteration   5: 6355451.947 ops/s
# Warmup Iteration   6: 6369183.823 ops/s
# Warmup Iteration   7: 6352076.867 ops/s
# Warmup Iteration   8: 6343525.850 ops/s
# Warmup Iteration   9: 6340989.800 ops/s
# Warmup Iteration  10: 6375953.026 ops/s
# Warmup Iteration  11: 6363165.687 ops/s
# Warmup Iteration  12: 6371656.390 ops/s
# Warmup Iteration  13: 6356563.765 ops/s
# Warmup Iteration  14: 6365959.554 ops/s
# Warmup Iteration  15: 6373215.938 ops/s
# Warmup Iteration  16: 6360997.188 ops/s
# Warmup Iteration  17: 6370215.799 ops/s
# Warmup Iteration  18: 6362061.405 ops/s
# Warmup Iteration  19: 6350256.346 ops/s
# Warmup Iteration  20: 6323166.939 ops/s
# Warmup Iteration  21: 6353817.525 ops/s
# Warmup Iteration  22: 6363325.151 ops/s
# Warmup Iteration  23: 6369705.664 ops/s
# Warmup Iteration  24: 6364333.329 ops/s
# Warmup Iteration  25: 6367802.170 ops/s
# Warmup Iteration  26: 6366867.191 ops/s
# Warmup Iteration  27: 6360759.274 ops/s
# Warmup Iteration  28: 6374778.962 ops/s
# Warmup Iteration  29: 6370427.292 ops/s
# Warmup Iteration  30: 6364946.623 ops/s
Iteration   1: 6354858.565 ops/s
Iteration   2: 6371415.472 ops/s
Iteration   3: 6357254.300 ops/s
Iteration   4: 6363101.547 ops/s
Iteration   5: 6387543.634 ops/s
Iteration   6: 6357324.980 ops/s
Iteration   7: 6372514.380 ops/s
Iteration   8: 6365084.979 ops/s
Iteration   9: 6378453.425 ops/s
Iteration  10: 6375655.884 ops/s
Iteration  11: 6370757.323 ops/s
Iteration  12: 6378630.739 ops/s
Iteration  13: 6374493.518 ops/s
Iteration  14: 6355707.164 ops/s
Iteration  15: 6360701.956 ops/s
Iteration  16: 6383394.633 ops/s
Iteration  17: 6367541.439 ops/s
Iteration  18: 6361261.228 ops/s
Iteration  19: 6365701.511 ops/s
Iteration  20: 6372160.705 ops/s
Iteration  21: 6371818.285 ops/s
Iteration  22: 6361437.594 ops/s
Iteration  23: 6363605.407 ops/s
Iteration  24: 6375002.791 ops/s
Iteration  25: 6347573.710 ops/s
Iteration  26: 6376706.084 ops/s
Iteration  27: 6370516.882 ops/s
Iteration  28: 6367524.387 ops/s
Iteration  29: 6366149.714 ops/s
Iteration  30: 6374353.367 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectWith":
  6368274.853 ±(99.9%) 6021.939 ops/s [Average]
  (min, avg, max) = (6347573.710, 6368274.853, 6387543.634), stdev = 9013.355
  CI (99.9%): [6362252.915, 6374296.792] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_selectWith  thrpt   30  6368274.853 ± 6021.939  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4083333.291 ops/s
# Warmup Iteration   2: 10639152.910 ops/s
# Warmup Iteration   3: 10716250.269 ops/s
# Warmup Iteration   4: 9496580.943 ops/s
# Warmup Iteration   5: 10318503.218 ops/s
# Warmup Iteration   6: 10726446.641 ops/s
# Warmup Iteration   7: 10728636.745 ops/s
# Warmup Iteration   8: 10702837.293 ops/s
# Warmup Iteration   9: 10736523.607 ops/s
# Warmup Iteration  10: 10748315.250 ops/s
# Warmup Iteration  11: 10727222.972 ops/s
# Warmup Iteration  12: 10742705.297 ops/s
# Warmup Iteration  13: 10729454.365 ops/s
# Warmup Iteration  14: 10726647.968 ops/s
# Warmup Iteration  15: 10764879.168 ops/s
# Warmup Iteration  16: 10711000.205 ops/s
# Warmup Iteration  17: 10926652.913 ops/s
# Warmup Iteration  18: 10913568.387 ops/s
# Warmup Iteration  19: 10890206.653 ops/s
# Warmup Iteration  20: 10891103.233 ops/s
# Warmup Iteration  21: 10915852.436 ops/s
# Warmup Iteration  22: 10916674.407 ops/s
# Warmup Iteration  23: 10905466.776 ops/s
# Warmup Iteration  24: 10901653.370 ops/s
# Warmup Iteration  25: 10893386.654 ops/s
# Warmup Iteration  26: 10900123.248 ops/s
# Warmup Iteration  27: 10880942.161 ops/s
# Warmup Iteration  28: 10898572.172 ops/s
# Warmup Iteration  29: 10919323.249 ops/s
# Warmup Iteration  30: 10913667.957 ops/s
Iteration   1: 10879199.803 ops/s
Iteration   2: 10843883.185 ops/s
Iteration   3: 10914115.453 ops/s
Iteration   4: 10925486.089 ops/s
Iteration   5: 10911806.225 ops/s
Iteration   6: 10894122.843 ops/s
Iteration   7: 10910365.060 ops/s
Iteration   8: 10915239.427 ops/s
Iteration   9: 10931560.128 ops/s
Iteration  10: 10900617.676 ops/s
Iteration  11: 10930032.838 ops/s
Iteration  12: 10905897.016 ops/s
Iteration  13: 10931425.975 ops/s
Iteration  14: 10927133.961 ops/s
Iteration  15: 10916141.462 ops/s
Iteration  16: 10895775.647 ops/s
Iteration  17: 10936410.866 ops/s
Iteration  18: 10930880.276 ops/s
Iteration  19: 10897223.881 ops/s
Iteration  20: 10876605.107 ops/s
Iteration  21: 10928769.309 ops/s
Iteration  22: 10898117.831 ops/s
Iteration  23: 10921894.970 ops/s
Iteration  24: 10913808.684 ops/s
Iteration  25: 10926441.302 ops/s
Iteration  26: 10924342.653 ops/s
Iteration  27: 10929726.941 ops/s
Iteration  28: 10915907.798 ops/s
Iteration  29: 10926694.230 ops/s
Iteration  30: 10917144.479 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectWithIndex":
  10912559.037 ±(99.9%) 13544.336 ops/s [Average]
  (min, avg, max) = (10843883.185, 10912559.037, 10936410.866), stdev = 20272.526
  CI (99.9%): [10899014.701, 10926103.373] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  10912559.037 ± 13544.336  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3821872.511 ops/s
# Warmup Iteration   2: 9256641.325 ops/s
# Warmup Iteration   3: 7777455.157 ops/s
# Warmup Iteration   4: 9314303.737 ops/s
# Warmup Iteration   5: 9305841.443 ops/s
# Warmup Iteration   6: 9312389.811 ops/s
# Warmup Iteration   7: 9338729.146 ops/s
# Warmup Iteration   8: 9334058.215 ops/s
# Warmup Iteration   9: 9309395.607 ops/s
# Warmup Iteration  10: 9314665.874 ops/s
# Warmup Iteration  11: 9327206.943 ops/s
# Warmup Iteration  12: 9350062.091 ops/s
# Warmup Iteration  13: 9322551.667 ops/s
# Warmup Iteration  14: 9314920.428 ops/s
# Warmup Iteration  15: 9350039.890 ops/s
# Warmup Iteration  16: 9323089.801 ops/s
# Warmup Iteration  17: 9296722.625 ops/s
# Warmup Iteration  18: 9326736.448 ops/s
# Warmup Iteration  19: 9333634.838 ops/s
# Warmup Iteration  20: 9367299.693 ops/s
# Warmup Iteration  21: 9319741.855 ops/s
# Warmup Iteration  22: 9294594.836 ops/s
# Warmup Iteration  23: 9330743.523 ops/s
# Warmup Iteration  24: 9353736.525 ops/s
# Warmup Iteration  25: 9303910.677 ops/s
# Warmup Iteration  26: 9321309.684 ops/s
# Warmup Iteration  27: 9324049.014 ops/s
# Warmup Iteration  28: 9315932.597 ops/s
# Warmup Iteration  29: 9298362.366 ops/s
# Warmup Iteration  30: 9335541.500 ops/s
Iteration   1: 9292906.690 ops/s
Iteration   2: 9328252.809 ops/s
Iteration   3: 9356216.533 ops/s
Iteration   4: 9330958.343 ops/s
Iteration   5: 9327129.249 ops/s
Iteration   6: 9317623.398 ops/s
Iteration   7: 9331026.405 ops/s
Iteration   8: 9331137.208 ops/s
Iteration   9: 9333815.475 ops/s
Iteration  10: 9363949.858 ops/s
Iteration  11: 9375122.611 ops/s
Iteration  12: 9325980.659 ops/s
Iteration  13: 9352200.497 ops/s
Iteration  14: 9371894.531 ops/s
Iteration  15: 9365619.528 ops/s
Iteration  16: 9381607.808 ops/s
Iteration  17: 9309145.308 ops/s
Iteration  18: 9317280.720 ops/s
Iteration  19: 9361535.279 ops/s
Iteration  20: 9289794.243 ops/s
Iteration  21: 9359298.253 ops/s
Iteration  22: 9294783.600 ops/s
Iteration  23: 9352560.105 ops/s
Iteration  24: 9360986.885 ops/s
Iteration  25: 9352219.229 ops/s
Iteration  26: 9349665.864 ops/s
Iteration  27: 9354621.223 ops/s
Iteration  28: 9352758.315 ops/s
Iteration  29: 9295260.128 ops/s
Iteration  30: 9304096.092 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  9337981.562 ±(99.9%) 17710.162 ops/s [Average]
  (min, avg, max) = (9289794.243, 9337981.562, 9381607.808), stdev = 26507.739
  CI (99.9%): [9320271.400, 9355691.724] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  9337981.562 ± 17710.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4060347.020 ops/s
# Warmup Iteration   2: 8805439.302 ops/s
# Warmup Iteration   3: 8866448.232 ops/s
# Warmup Iteration   4: 7528192.346 ops/s
# Warmup Iteration   5: 8898164.097 ops/s
# Warmup Iteration   6: 8890731.123 ops/s
# Warmup Iteration   7: 8869790.840 ops/s
# Warmup Iteration   8: 8894983.734 ops/s
# Warmup Iteration   9: 8889997.507 ops/s
# Warmup Iteration  10: 8864237.067 ops/s
# Warmup Iteration  11: 8876247.788 ops/s
# Warmup Iteration  12: 8897478.440 ops/s
# Warmup Iteration  13: 8881701.068 ops/s
# Warmup Iteration  14: 8893024.410 ops/s
# Warmup Iteration  15: 8894994.522 ops/s
# Warmup Iteration  16: 8884068.423 ops/s
# Warmup Iteration  17: 8869257.498 ops/s
# Warmup Iteration  18: 8882159.059 ops/s
# Warmup Iteration  19: 8834191.684 ops/s
# Warmup Iteration  20: 8892781.213 ops/s
# Warmup Iteration  21: 8870759.586 ops/s
# Warmup Iteration  22: 8917536.887 ops/s
# Warmup Iteration  23: 8886204.610 ops/s
# Warmup Iteration  24: 8929940.436 ops/s
# Warmup Iteration  25: 8897255.499 ops/s
# Warmup Iteration  26: 8890820.665 ops/s
# Warmup Iteration  27: 8839495.896 ops/s
# Warmup Iteration  28: 8905899.625 ops/s
# Warmup Iteration  29: 8923061.679 ops/s
# Warmup Iteration  30: 8897605.112 ops/s
Iteration   1: 8874941.485 ops/s
Iteration   2: 8919944.260 ops/s
Iteration   3: 8843181.885 ops/s
Iteration   4: 8920843.273 ops/s
Iteration   5: 8873461.022 ops/s
Iteration   6: 8877074.840 ops/s
Iteration   7: 8881531.532 ops/s
Iteration   8: 8927808.032 ops/s
Iteration   9: 8942299.511 ops/s
Iteration  10: 8899562.813 ops/s
Iteration  11: 8891450.896 ops/s
Iteration  12: 8890908.564 ops/s
Iteration  13: 8926670.378 ops/s
Iteration  14: 8895294.298 ops/s
Iteration  15: 8904326.952 ops/s
Iteration  16: 8916579.257 ops/s
Iteration  17: 8927285.455 ops/s
Iteration  18: 8901601.986 ops/s
Iteration  19: 8913760.403 ops/s
Iteration  20: 8857956.431 ops/s
Iteration  21: 8885107.145 ops/s
Iteration  22: 8881360.246 ops/s
Iteration  23: 8927715.114 ops/s
Iteration  24: 8894052.028 ops/s
Iteration  25: 8903782.781 ops/s
Iteration  26: 8889255.771 ops/s
Iteration  27: 8859933.831 ops/s
Iteration  28: 8885320.734 ops/s
Iteration  29: 8895253.909 ops/s
Iteration  30: 8895925.573 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_selectWith_target":
  8896806.347 ±(99.9%) 15577.705 ops/s [Average]
  (min, avg, max) = (8843181.885, 8896806.347, 8942299.511), stdev = 23315.977
  CI (99.9%): [8881228.642, 8912384.052] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_selectWith_target  thrpt   30  8896806.347 ± 15577.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_select_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_select_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5245957.184 ops/s
# Warmup Iteration   2: 11333699.164 ops/s
# Warmup Iteration   3: 11237157.184 ops/s
# Warmup Iteration   4: 9451048.735 ops/s
# Warmup Iteration   5: 11273702.132 ops/s
# Warmup Iteration   6: 11261656.085 ops/s
# Warmup Iteration   7: 11231853.586 ops/s
# Warmup Iteration   8: 11221313.725 ops/s
# Warmup Iteration   9: 11185103.413 ops/s
# Warmup Iteration  10: 11252560.741 ops/s
# Warmup Iteration  11: 11266113.287 ops/s
# Warmup Iteration  12: 11260325.351 ops/s
# Warmup Iteration  13: 11247156.130 ops/s
# Warmup Iteration  14: 11252367.409 ops/s
# Warmup Iteration  15: 11269362.161 ops/s
# Warmup Iteration  16: 11227823.274 ops/s
# Warmup Iteration  17: 11281541.364 ops/s
# Warmup Iteration  18: 11284734.780 ops/s
# Warmup Iteration  19: 11293999.230 ops/s
# Warmup Iteration  20: 11282787.881 ops/s
# Warmup Iteration  21: 11291686.282 ops/s
# Warmup Iteration  22: 11228297.786 ops/s
# Warmup Iteration  23: 11291552.184 ops/s
# Warmup Iteration  24: 11253924.154 ops/s
# Warmup Iteration  25: 11274947.292 ops/s
# Warmup Iteration  26: 11285300.577 ops/s
# Warmup Iteration  27: 11264060.286 ops/s
# Warmup Iteration  28: 11272122.994 ops/s
# Warmup Iteration  29: 11272661.140 ops/s
# Warmup Iteration  30: 11272798.004 ops/s
Iteration   1: 11271232.435 ops/s
Iteration   2: 11266811.519 ops/s
Iteration   3: 11270551.351 ops/s
Iteration   4: 11228306.292 ops/s
Iteration   5: 11285086.806 ops/s
Iteration   6: 11250082.574 ops/s
Iteration   7: 11296897.688 ops/s
Iteration   8: 11285323.220 ops/s
Iteration   9: 11288483.763 ops/s
Iteration  10: 11278867.180 ops/s
Iteration  11: 11289951.001 ops/s
Iteration  12: 11292437.874 ops/s
Iteration  13: 11286363.284 ops/s
Iteration  14: 11275835.102 ops/s
Iteration  15: 11297738.217 ops/s
Iteration  16: 11294035.452 ops/s
Iteration  17: 11285447.494 ops/s
Iteration  18: 11296546.486 ops/s
Iteration  19: 11296333.899 ops/s
Iteration  20: 11266973.506 ops/s
Iteration  21: 11225081.779 ops/s
Iteration  22: 11215606.406 ops/s
Iteration  23: 11293161.154 ops/s
Iteration  24: 11285107.969 ops/s
Iteration  25: 11262716.568 ops/s
Iteration  26: 11248029.280 ops/s
Iteration  27: 11302340.911 ops/s
Iteration  28: 11281589.115 ops/s
Iteration  29: 11275027.158 ops/s
Iteration  30: 11278250.759 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_select_target":
  11275673.875 ±(99.9%) 14957.061 ops/s [Average]
  (min, avg, max) = (11215606.406, 11275673.875, 11302340.911), stdev = 22387.027
  CI (99.9%): [11260716.814, 11290630.936] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_select_target  thrpt   30  11275673.875 ± 14957.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 760342.880 ops/s
# Warmup Iteration   2: 800999.702 ops/s
# Warmup Iteration   3: 1000092.532 ops/s
# Warmup Iteration   4: 1002800.112 ops/s
# Warmup Iteration   5: 997876.216 ops/s
# Warmup Iteration   6: 1004649.562 ops/s
# Warmup Iteration   7: 1008050.769 ops/s
# Warmup Iteration   8: 1007161.819 ops/s
# Warmup Iteration   9: 1009882.888 ops/s
# Warmup Iteration  10: 1003706.986 ops/s
# Warmup Iteration  11: 984636.888 ops/s
# Warmup Iteration  12: 865524.826 ops/s
# Warmup Iteration  13: 995517.667 ops/s
# Warmup Iteration  14: 1000656.070 ops/s
# Warmup Iteration  15: 1004814.372 ops/s
# Warmup Iteration  16: 1002655.295 ops/s
# Warmup Iteration  17: 1051241.421 ops/s
# Warmup Iteration  18: 1049592.548 ops/s
# Warmup Iteration  19: 1054953.491 ops/s
# Warmup Iteration  20: 1045109.727 ops/s
# Warmup Iteration  21: 1052297.442 ops/s
# Warmup Iteration  22: 1053137.604 ops/s
# Warmup Iteration  23: 1054608.574 ops/s
# Warmup Iteration  24: 1055090.737 ops/s
# Warmup Iteration  25: 1057261.095 ops/s
# Warmup Iteration  26: 1057373.584 ops/s
# Warmup Iteration  27: 1061974.765 ops/s
# Warmup Iteration  28: 1050360.408 ops/s
# Warmup Iteration  29: 1060317.999 ops/s
# Warmup Iteration  30: 1053411.969 ops/s
Iteration   1: 1060381.784 ops/s
Iteration   2: 1055935.988 ops/s
Iteration   3: 1054090.640 ops/s
Iteration   4: 1059034.194 ops/s
Iteration   5: 1061079.240 ops/s
Iteration   6: 1047004.769 ops/s
Iteration   7: 1059123.478 ops/s
Iteration   8: 1058717.100 ops/s
Iteration   9: 1055040.736 ops/s
Iteration  10: 1056238.733 ops/s
Iteration  11: 1058174.585 ops/s
Iteration  12: 1060333.974 ops/s
Iteration  13: 1061564.699 ops/s
Iteration  14: 1058675.061 ops/s
Iteration  15: 1057757.528 ops/s
Iteration  16: 1061845.435 ops/s
Iteration  17: 1058896.148 ops/s
Iteration  18: 1059090.392 ops/s
Iteration  19: 1054573.488 ops/s
Iteration  20: 1060917.578 ops/s
Iteration  21: 1058737.117 ops/s
Iteration  22: 1058794.843 ops/s
Iteration  23: 1053296.210 ops/s
Iteration  24: 1057480.713 ops/s
Iteration  25: 1062899.069 ops/s
Iteration  26: 1059166.098 ops/s
Iteration  27: 1059788.428 ops/s
Iteration  28: 1057060.013 ops/s
Iteration  29: 1058880.231 ops/s
Iteration  30: 1058225.805 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_set":
  1058093.469 ±(99.9%) 2074.555 ops/s [Average]
  (min, avg, max) = (1047004.769, 1058093.469, 1062899.069), stdev = 3105.097
  CI (99.9%): [1056018.914, 1060168.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_set  thrpt   30  1058093.469 ± 2074.555  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 764722.681 ops/s
# Warmup Iteration   2: 800738.550 ops/s
# Warmup Iteration   3: 1008041.574 ops/s
# Warmup Iteration   4: 1003110.515 ops/s
# Warmup Iteration   5: 996276.887 ops/s
# Warmup Iteration   6: 1001702.280 ops/s
# Warmup Iteration   7: 1003032.522 ops/s
# Warmup Iteration   8: 1002246.989 ops/s
# Warmup Iteration   9: 1007828.506 ops/s
# Warmup Iteration  10: 996254.315 ops/s
# Warmup Iteration  11: 981260.149 ops/s
# Warmup Iteration  12: 866788.964 ops/s
# Warmup Iteration  13: 996185.131 ops/s
# Warmup Iteration  14: 998160.758 ops/s
# Warmup Iteration  15: 998413.094 ops/s
# Warmup Iteration  16: 997266.580 ops/s
# Warmup Iteration  17: 1060007.406 ops/s
# Warmup Iteration  18: 1058200.410 ops/s
# Warmup Iteration  19: 1057206.102 ops/s
# Warmup Iteration  20: 1058286.306 ops/s
# Warmup Iteration  21: 1059659.200 ops/s
# Warmup Iteration  22: 1060782.253 ops/s
# Warmup Iteration  23: 1062754.424 ops/s
# Warmup Iteration  24: 1056176.338 ops/s
# Warmup Iteration  25: 1057658.579 ops/s
# Warmup Iteration  26: 1059875.841 ops/s
# Warmup Iteration  27: 1059285.256 ops/s
# Warmup Iteration  28: 1055604.178 ops/s
# Warmup Iteration  29: 1060728.060 ops/s
# Warmup Iteration  30: 1055224.417 ops/s
Iteration   1: 1057614.203 ops/s
Iteration   2: 1055938.793 ops/s
Iteration   3: 1059107.278 ops/s
Iteration   4: 1062321.104 ops/s
Iteration   5: 1059519.933 ops/s
Iteration   6: 1057135.008 ops/s
Iteration   7: 1060951.906 ops/s
Iteration   8: 1064163.120 ops/s
Iteration   9: 1060686.449 ops/s
Iteration  10: 1055005.086 ops/s
Iteration  11: 1058042.145 ops/s
Iteration  12: 1056882.339 ops/s
Iteration  13: 1060894.936 ops/s
Iteration  14: 1054849.408 ops/s
Iteration  15: 1061223.903 ops/s
Iteration  16: 1064964.056 ops/s
Iteration  17: 1059889.075 ops/s
Iteration  18: 1058770.287 ops/s
Iteration  19: 1063588.837 ops/s
Iteration  20: 1063400.330 ops/s
Iteration  21: 1060187.405 ops/s
Iteration  22: 1055888.531 ops/s
Iteration  23: 1051087.085 ops/s
Iteration  24: 1062815.627 ops/s
Iteration  25: 1052906.743 ops/s
Iteration  26: 1063152.955 ops/s
Iteration  27: 1061562.841 ops/s
Iteration  28: 1060185.043 ops/s
Iteration  29: 1057093.811 ops/s
Iteration  30: 1063153.495 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sort":
  1059432.724 ±(99.9%) 2318.501 ops/s [Average]
  (min, avg, max) = (1051087.085, 1059432.724, 1064964.056), stdev = 3470.223
  CI (99.9%): [1057114.223, 1061751.225] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_sort  thrpt   30  1059432.724 ± 2318.501  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 232658.761 ops/s
# Warmup Iteration   2: 454900.938 ops/s
# Warmup Iteration   3: 534695.609 ops/s
# Warmup Iteration   4: 536970.608 ops/s
# Warmup Iteration   5: 536385.217 ops/s
# Warmup Iteration   6: 443687.396 ops/s
# Warmup Iteration   7: 533847.434 ops/s
# Warmup Iteration   8: 533272.322 ops/s
# Warmup Iteration   9: 537400.854 ops/s
# Warmup Iteration  10: 533345.385 ops/s
# Warmup Iteration  11: 535594.757 ops/s
# Warmup Iteration  12: 535821.261 ops/s
# Warmup Iteration  13: 534588.230 ops/s
# Warmup Iteration  14: 535770.229 ops/s
# Warmup Iteration  15: 538159.004 ops/s
# Warmup Iteration  16: 538226.484 ops/s
# Warmup Iteration  17: 538498.041 ops/s
# Warmup Iteration  18: 538780.597 ops/s
# Warmup Iteration  19: 537838.821 ops/s
# Warmup Iteration  20: 539234.031 ops/s
# Warmup Iteration  21: 536794.165 ops/s
# Warmup Iteration  22: 535232.431 ops/s
# Warmup Iteration  23: 538442.712 ops/s
# Warmup Iteration  24: 538243.698 ops/s
# Warmup Iteration  25: 539129.601 ops/s
# Warmup Iteration  26: 538904.305 ops/s
# Warmup Iteration  27: 539443.514 ops/s
# Warmup Iteration  28: 537709.118 ops/s
# Warmup Iteration  29: 537204.997 ops/s
# Warmup Iteration  30: 538199.003 ops/s
Iteration   1: 536478.936 ops/s
Iteration   2: 533298.296 ops/s
Iteration   3: 536665.133 ops/s
Iteration   4: 536767.500 ops/s
Iteration   5: 539936.942 ops/s
Iteration   6: 539428.979 ops/s
Iteration   7: 538679.146 ops/s
Iteration   8: 536560.681 ops/s
Iteration   9: 539440.650 ops/s
Iteration  10: 536359.341 ops/s
Iteration  11: 537187.572 ops/s
Iteration  12: 535564.038 ops/s
Iteration  13: 536156.316 ops/s
Iteration  14: 536343.042 ops/s
Iteration  15: 540139.424 ops/s
Iteration  16: 537041.273 ops/s
Iteration  17: 538313.261 ops/s
Iteration  18: 539823.348 ops/s
Iteration  19: 538897.924 ops/s
Iteration  20: 538424.886 ops/s
Iteration  21: 537953.327 ops/s
Iteration  22: 539735.366 ops/s
Iteration  23: 540698.727 ops/s
Iteration  24: 538152.136 ops/s
Iteration  25: 537923.136 ops/s
Iteration  26: 538056.857 ops/s
Iteration  27: 538040.441 ops/s
Iteration  28: 537460.628 ops/s
Iteration  29: 535971.894 ops/s
Iteration  30: 537327.710 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_stream":
  537760.897 ±(99.9%) 1088.179 ops/s [Average]
  (min, avg, max) = (533298.296, 537760.897, 540698.727), stdev = 1628.735
  CI (99.9%): [536672.718, 538849.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_stream  thrpt   30  537760.897 ± 1088.179  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20671024.597 ops/s
# Warmup Iteration   2: 38792378.485 ops/s
# Warmup Iteration   3: 38033710.827 ops/s
# Warmup Iteration   4: 41379546.145 ops/s
# Warmup Iteration   5: 41261899.813 ops/s
# Warmup Iteration   6: 41309690.163 ops/s
# Warmup Iteration   7: 41306930.850 ops/s
# Warmup Iteration   8: 41312716.044 ops/s
# Warmup Iteration   9: 41436133.034 ops/s
# Warmup Iteration  10: 41377444.533 ops/s
# Warmup Iteration  11: 41262304.957 ops/s
# Warmup Iteration  12: 41106105.204 ops/s
# Warmup Iteration  13: 41058666.811 ops/s
# Warmup Iteration  14: 41445680.588 ops/s
# Warmup Iteration  15: 41361005.977 ops/s
# Warmup Iteration  16: 41414352.998 ops/s
# Warmup Iteration  17: 41280202.198 ops/s
# Warmup Iteration  18: 41005713.098 ops/s
# Warmup Iteration  19: 41323736.764 ops/s
# Warmup Iteration  20: 41312358.718 ops/s
# Warmup Iteration  21: 41281475.911 ops/s
# Warmup Iteration  22: 41331323.476 ops/s
# Warmup Iteration  23: 41345701.111 ops/s
# Warmup Iteration  24: 41282162.028 ops/s
# Warmup Iteration  25: 41347352.009 ops/s
# Warmup Iteration  26: 41310635.425 ops/s
# Warmup Iteration  27: 41028779.780 ops/s
# Warmup Iteration  28: 41624405.730 ops/s
# Warmup Iteration  29: 41400513.718 ops/s
# Warmup Iteration  30: 41265007.285 ops/s
Iteration   1: 41233397.047 ops/s
Iteration   2: 41152851.727 ops/s
Iteration   3: 40924812.198 ops/s
Iteration   4: 41341622.563 ops/s
Iteration   5: 41395658.780 ops/s
Iteration   6: 41222592.604 ops/s
Iteration   7: 41380072.796 ops/s
Iteration   8: 41424744.866 ops/s
Iteration   9: 41626653.292 ops/s
Iteration  10: 41595281.831 ops/s
Iteration  11: 41530842.802 ops/s
Iteration  12: 41472835.090 ops/s
Iteration  13: 41369518.153 ops/s
Iteration  14: 41240907.866 ops/s
Iteration  15: 41292406.256 ops/s
Iteration  16: 41224764.329 ops/s
Iteration  17: 41550681.519 ops/s
Iteration  18: 41427837.872 ops/s
Iteration  19: 41267213.043 ops/s
Iteration  20: 41370847.878 ops/s
Iteration  21: 41642307.340 ops/s
Iteration  22: 41508631.392 ops/s
Iteration  23: 41393350.529 ops/s
Iteration  24: 41521959.173 ops/s
Iteration  25: 41666879.478 ops/s
Iteration  26: 41406643.318 ops/s
Iteration  27: 41333697.570 ops/s
Iteration  28: 41557916.064 ops/s
Iteration  29: 41204128.344 ops/s
Iteration  30: 41474270.246 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_subList":
  41391844.199 ±(99.9%) 111029.167 ops/s [Average]
  (min, avg, max) = (40924812.198, 41391844.199, 41666879.478), stdev = 166183.243
  CI (99.9%): [41280815.032, 41502873.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_subList  thrpt   30  41391844.199 ± 111029.167  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 648382.379 ops/s
# Warmup Iteration   2: 669639.445 ops/s
# Warmup Iteration   3: 790252.648 ops/s
# Warmup Iteration   4: 849148.644 ops/s
# Warmup Iteration   5: 849172.076 ops/s
# Warmup Iteration   6: 843965.406 ops/s
# Warmup Iteration   7: 848905.427 ops/s
# Warmup Iteration   8: 847612.056 ops/s
# Warmup Iteration   9: 848815.174 ops/s
# Warmup Iteration  10: 848624.995 ops/s
# Warmup Iteration  11: 847794.508 ops/s
# Warmup Iteration  12: 846275.466 ops/s
# Warmup Iteration  13: 847797.325 ops/s
# Warmup Iteration  14: 711966.012 ops/s
# Warmup Iteration  15: 847197.850 ops/s
# Warmup Iteration  16: 845004.644 ops/s
# Warmup Iteration  17: 888151.593 ops/s
# Warmup Iteration  18: 892645.024 ops/s
# Warmup Iteration  19: 893133.240 ops/s
# Warmup Iteration  20: 893563.293 ops/s
# Warmup Iteration  21: 894802.131 ops/s
# Warmup Iteration  22: 892972.448 ops/s
# Warmup Iteration  23: 893435.722 ops/s
# Warmup Iteration  24: 888714.587 ops/s
# Warmup Iteration  25: 892810.015 ops/s
# Warmup Iteration  26: 892172.649 ops/s
# Warmup Iteration  27: 892596.198 ops/s
# Warmup Iteration  28: 890831.817 ops/s
# Warmup Iteration  29: 892018.275 ops/s
# Warmup Iteration  30: 891089.944 ops/s
Iteration   1: 891464.364 ops/s
Iteration   2: 892915.366 ops/s
Iteration   3: 893123.549 ops/s
Iteration   4: 893840.990 ops/s
Iteration   5: 891254.842 ops/s
Iteration   6: 888654.450 ops/s
Iteration   7: 891523.431 ops/s
Iteration   8: 889322.380 ops/s
Iteration   9: 888047.223 ops/s
Iteration  10: 889547.268 ops/s
Iteration  11: 892442.074 ops/s
Iteration  12: 891893.775 ops/s
Iteration  13: 892706.312 ops/s
Iteration  14: 893668.360 ops/s
Iteration  15: 889102.816 ops/s
Iteration  16: 894232.839 ops/s
Iteration  17: 892714.405 ops/s
Iteration  18: 893815.779 ops/s
Iteration  19: 892997.783 ops/s
Iteration  20: 891491.140 ops/s
Iteration  21: 894617.404 ops/s
Iteration  22: 893855.138 ops/s
Iteration  23: 889833.463 ops/s
Iteration  24: 891784.743 ops/s
Iteration  25: 892584.157 ops/s
Iteration  26: 891342.859 ops/s
Iteration  27: 888993.427 ops/s
Iteration  28: 891321.329 ops/s
Iteration  29: 890864.973 ops/s
Iteration  30: 892221.355 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO":
  891739.266 ±(99.9%) 1197.056 ops/s [Average]
  (min, avg, max) = (888047.223, 891739.266, 894617.404), stdev = 1791.697
  CI (99.9%): [890542.210, 892936.323] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO  thrpt   30  891739.266 ± 1197.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_subListFromNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_subListFromNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 671281.480 ops/s
# Warmup Iteration   2: 694161.216 ops/s
# Warmup Iteration   3: 815861.409 ops/s
# Warmup Iteration   4: 877185.569 ops/s
# Warmup Iteration   5: 874135.756 ops/s
# Warmup Iteration   6: 873194.666 ops/s
# Warmup Iteration   7: 875648.386 ops/s
# Warmup Iteration   8: 874481.307 ops/s
# Warmup Iteration   9: 876811.161 ops/s
# Warmup Iteration  10: 877442.365 ops/s
# Warmup Iteration  11: 870744.696 ops/s
# Warmup Iteration  12: 871490.026 ops/s
# Warmup Iteration  13: 867865.399 ops/s
# Warmup Iteration  14: 740983.252 ops/s
# Warmup Iteration  15: 862141.194 ops/s
# Warmup Iteration  16: 872906.154 ops/s
# Warmup Iteration  17: 923010.397 ops/s
# Warmup Iteration  18: 921041.133 ops/s
# Warmup Iteration  19: 918614.571 ops/s
# Warmup Iteration  20: 920752.630 ops/s
# Warmup Iteration  21: 917913.216 ops/s
# Warmup Iteration  22: 922231.401 ops/s
# Warmup Iteration  23: 918477.292 ops/s
# Warmup Iteration  24: 915454.715 ops/s
# Warmup Iteration  25: 921100.852 ops/s
# Warmup Iteration  26: 918502.733 ops/s
# Warmup Iteration  27: 923002.136 ops/s
# Warmup Iteration  28: 921526.781 ops/s
# Warmup Iteration  29: 922011.463 ops/s
# Warmup Iteration  30: 921465.078 ops/s
Iteration   1: 922561.428 ops/s
Iteration   2: 923583.199 ops/s
Iteration   3: 923079.149 ops/s
Iteration   4: 924536.017 ops/s
Iteration   5: 922207.448 ops/s
Iteration   6: 919239.919 ops/s
Iteration   7: 920763.819 ops/s
Iteration   8: 920394.213 ops/s
Iteration   9: 922304.717 ops/s
Iteration  10: 922452.246 ops/s
Iteration  11: 920406.230 ops/s
Iteration  12: 918411.474 ops/s
Iteration  13: 921338.830 ops/s
Iteration  14: 920026.807 ops/s
Iteration  15: 921083.606 ops/s
Iteration  16: 921602.745 ops/s
Iteration  17: 915428.337 ops/s
Iteration  18: 914937.425 ops/s
Iteration  19: 920649.070 ops/s
Iteration  20: 921911.693 ops/s
Iteration  21: 922625.349 ops/s
Iteration  22: 922456.775 ops/s
Iteration  23: 921769.512 ops/s
Iteration  24: 923949.149 ops/s
Iteration  25: 919657.062 ops/s
Iteration  26: 918189.739 ops/s
Iteration  27: 920773.124 ops/s
Iteration  28: 917936.282 ops/s
Iteration  29: 916662.201 ops/s
Iteration  30: 920752.387 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_subListFromNegative":
  920722.998 ±(99.9%) 1577.795 ops/s [Average]
  (min, avg, max) = (914937.425, 920722.998, 924536.017), stdev = 2361.570
  CI (99.9%): [919145.203, 922300.793] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_subListFromNegative  thrpt   30  920722.998 ± 1577.795  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_subListToGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_subListToGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 666614.301 ops/s
# Warmup Iteration   2: 687600.764 ops/s
# Warmup Iteration   3: 804590.577 ops/s
# Warmup Iteration   4: 868243.231 ops/s
# Warmup Iteration   5: 867849.158 ops/s
# Warmup Iteration   6: 862602.830 ops/s
# Warmup Iteration   7: 868013.214 ops/s
# Warmup Iteration   8: 865613.240 ops/s
# Warmup Iteration   9: 866655.209 ops/s
# Warmup Iteration  10: 865236.658 ops/s
# Warmup Iteration  11: 867458.750 ops/s
# Warmup Iteration  12: 867772.131 ops/s
# Warmup Iteration  13: 866579.090 ops/s
# Warmup Iteration  14: 758290.246 ops/s
# Warmup Iteration  15: 839306.666 ops/s
# Warmup Iteration  16: 868772.659 ops/s
# Warmup Iteration  17: 904856.749 ops/s
# Warmup Iteration  18: 906223.349 ops/s
# Warmup Iteration  19: 907873.261 ops/s
# Warmup Iteration  20: 907474.650 ops/s
# Warmup Iteration  21: 908040.875 ops/s
# Warmup Iteration  22: 908033.485 ops/s
# Warmup Iteration  23: 909112.308 ops/s
# Warmup Iteration  24: 907655.650 ops/s
# Warmup Iteration  25: 909552.834 ops/s
# Warmup Iteration  26: 907709.426 ops/s
# Warmup Iteration  27: 903316.069 ops/s
# Warmup Iteration  28: 910338.841 ops/s
# Warmup Iteration  29: 906774.941 ops/s
# Warmup Iteration  30: 909845.051 ops/s
Iteration   1: 909551.975 ops/s
Iteration   2: 907754.931 ops/s
Iteration   3: 909279.581 ops/s
Iteration   4: 910052.116 ops/s
Iteration   5: 909603.851 ops/s
Iteration   6: 907259.439 ops/s
Iteration   7: 908244.720 ops/s
Iteration   8: 909382.698 ops/s
Iteration   9: 910951.538 ops/s
Iteration  10: 911159.937 ops/s
Iteration  11: 912036.421 ops/s
Iteration  12: 909283.109 ops/s
Iteration  13: 908689.257 ops/s
Iteration  14: 909276.109 ops/s
Iteration  15: 904062.442 ops/s
Iteration  16: 901249.359 ops/s
Iteration  17: 910320.509 ops/s
Iteration  18: 908690.591 ops/s
Iteration  19: 910777.147 ops/s
Iteration  20: 908284.255 ops/s
Iteration  21: 907878.518 ops/s
Iteration  22: 901193.971 ops/s
Iteration  23: 904483.467 ops/s
Iteration  24: 907731.031 ops/s
Iteration  25: 907033.217 ops/s
Iteration  26: 908198.888 ops/s
Iteration  27: 908583.693 ops/s
Iteration  28: 907844.266 ops/s
Iteration  29: 907531.597 ops/s
Iteration  30: 907705.646 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_subListToGreaterThanSize":
  908136.476 ±(99.9%) 1695.395 ops/s [Average]
  (min, avg, max) = (901193.971, 908136.476, 912036.421), stdev = 2537.588
  CI (99.9%): [906441.081, 909831.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_subListToGreaterThanSize  thrpt   30  908136.476 ± 1695.395  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 991714.618 ops/s
# Warmup Iteration   2: 1828875.738 ops/s
# Warmup Iteration   3: 2043701.453 ops/s
# Warmup Iteration   4: 2056553.267 ops/s
# Warmup Iteration   5: 2056846.068 ops/s
# Warmup Iteration   6: 1697759.946 ops/s
# Warmup Iteration   7: 2056831.186 ops/s
# Warmup Iteration   8: 2054396.089 ops/s
# Warmup Iteration   9: 2055818.510 ops/s
# Warmup Iteration  10: 2064270.984 ops/s
# Warmup Iteration  11: 2059395.139 ops/s
# Warmup Iteration  12: 2057259.342 ops/s
# Warmup Iteration  13: 2055350.596 ops/s
# Warmup Iteration  14: 2062688.581 ops/s
# Warmup Iteration  15: 2059572.499 ops/s
# Warmup Iteration  16: 2056739.914 ops/s
# Warmup Iteration  17: 2059415.973 ops/s
# Warmup Iteration  18: 2059230.840 ops/s
# Warmup Iteration  19: 2053830.436 ops/s
# Warmup Iteration  20: 2058999.153 ops/s
# Warmup Iteration  21: 2058064.288 ops/s
# Warmup Iteration  22: 2052711.854 ops/s
# Warmup Iteration  23: 2048188.397 ops/s
# Warmup Iteration  24: 2043662.729 ops/s
# Warmup Iteration  25: 2060898.589 ops/s
# Warmup Iteration  26: 2056015.580 ops/s
# Warmup Iteration  27: 2056181.901 ops/s
# Warmup Iteration  28: 2043979.597 ops/s
# Warmup Iteration  29: 2039794.827 ops/s
# Warmup Iteration  30: 2061852.735 ops/s
Iteration   1: 2057369.363 ops/s
Iteration   2: 2057193.979 ops/s
Iteration   3: 2061577.555 ops/s
Iteration   4: 2062812.852 ops/s
Iteration   5: 2057912.430 ops/s
Iteration   6: 2064141.640 ops/s
Iteration   7: 2060123.826 ops/s
Iteration   8: 2065078.496 ops/s
Iteration   9: 2062139.761 ops/s
Iteration  10: 2057516.986 ops/s
Iteration  11: 2064114.722 ops/s
Iteration  12: 2052776.385 ops/s
Iteration  13: 2065486.770 ops/s
Iteration  14: 2059298.846 ops/s
Iteration  15: 2062625.850 ops/s
Iteration  16: 2057509.771 ops/s
Iteration  17: 2062335.204 ops/s
Iteration  18: 2063837.571 ops/s
Iteration  19: 2063600.182 ops/s
Iteration  20: 2047895.784 ops/s
Iteration  21: 2049670.560 ops/s
Iteration  22: 2052059.486 ops/s
Iteration  23: 2063964.721 ops/s
Iteration  24: 2059436.857 ops/s
Iteration  25: 2060010.655 ops/s
Iteration  26: 2061420.373 ops/s
Iteration  27: 2052840.944 ops/s
Iteration  28: 2058069.457 ops/s
Iteration  29: 2060135.872 ops/s
Iteration  30: 2064968.470 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByDouble":
  2059597.512 ±(99.9%) 3134.562 ops/s [Average]
  (min, avg, max) = (2047895.784, 2059597.512, 2065486.770), stdev = 4691.666
  CI (99.9%): [2056462.950, 2062732.075] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_sumByDouble  thrpt   30  2059597.512 ± 3134.562  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.179 ops/s
# Warmup Iteration   2: 74.456 ops/s
# Warmup Iteration   3: 100.682 ops/s
# Warmup Iteration   4: 101.147 ops/s
# Warmup Iteration   5: 100.726 ops/s
# Warmup Iteration   6: 101.454 ops/s
# Warmup Iteration   7: 102.721 ops/s
# Warmup Iteration   8: 101.192 ops/s
# Warmup Iteration   9: 86.410 ops/s
# Warmup Iteration  10: 96.512 ops/s
# Warmup Iteration  11: 99.167 ops/s
# Warmup Iteration  12: 100.266 ops/s
# Warmup Iteration  13: 100.176 ops/s
# Warmup Iteration  14: 97.985 ops/s
# Warmup Iteration  15: 98.872 ops/s
# Warmup Iteration  16: 100.621 ops/s
# Warmup Iteration  17: 99.578 ops/s
# Warmup Iteration  18: 100.725 ops/s
# Warmup Iteration  19: 100.144 ops/s
# Warmup Iteration  20: 100.872 ops/s
# Warmup Iteration  21: 101.923 ops/s
# Warmup Iteration  22: 99.786 ops/s
# Warmup Iteration  23: 99.210 ops/s
# Warmup Iteration  24: 99.803 ops/s
# Warmup Iteration  25: 99.931 ops/s
# Warmup Iteration  26: 100.776 ops/s
# Warmup Iteration  27: 100.760 ops/s
# Warmup Iteration  28: 99.755 ops/s
# Warmup Iteration  29: 99.973 ops/s
# Warmup Iteration  30: 100.844 ops/s
Iteration   1: 100.854 ops/s
Iteration   2: 100.646 ops/s
Iteration   3: 100.779 ops/s
Iteration   4: 100.943 ops/s
Iteration   5: 101.115 ops/s
Iteration   6: 100.563 ops/s
Iteration   7: 100.930 ops/s
Iteration   8: 100.098 ops/s
Iteration   9: 98.587 ops/s
Iteration  10: 98.937 ops/s
Iteration  11: 99.228 ops/s
Iteration  12: 100.039 ops/s
Iteration  13: 98.995 ops/s
Iteration  14: 101.104 ops/s
Iteration  15: 99.424 ops/s
Iteration  16: 100.375 ops/s
Iteration  17: 100.726 ops/s
Iteration  18: 99.469 ops/s
Iteration  19: 98.490 ops/s
Iteration  20: 99.500 ops/s
Iteration  21: 101.782 ops/s
Iteration  22: 100.032 ops/s
Iteration  23: 100.093 ops/s
Iteration  24: 101.475 ops/s
Iteration  25: 99.924 ops/s
Iteration  26: 99.966 ops/s
Iteration  27: 100.966 ops/s
Iteration  28: 99.983 ops/s
Iteration  29: 100.093 ops/s
Iteration  30: 101.181 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  100.210 ±(99.9%) 0.572 ops/s [Average]
  (min, avg, max) = (98.490, 100.210, 101.782), stdev = 0.856
  CI (99.9%): [99.638, 100.781] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt    Score   Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  100.210 ± 0.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1023793.858 ops/s
# Warmup Iteration   2: 1864070.282 ops/s
# Warmup Iteration   3: 2071871.628 ops/s
# Warmup Iteration   4: 2071452.413 ops/s
# Warmup Iteration   5: 2025674.988 ops/s
# Warmup Iteration   6: 1759643.130 ops/s
# Warmup Iteration   7: 2068345.078 ops/s
# Warmup Iteration   8: 2075613.634 ops/s
# Warmup Iteration   9: 2075837.820 ops/s
# Warmup Iteration  10: 2074250.322 ops/s
# Warmup Iteration  11: 2078538.453 ops/s
# Warmup Iteration  12: 2074606.538 ops/s
# Warmup Iteration  13: 2081413.725 ops/s
# Warmup Iteration  14: 2078777.877 ops/s
# Warmup Iteration  15: 2080851.398 ops/s
# Warmup Iteration  16: 2081216.383 ops/s
# Warmup Iteration  17: 2070617.497 ops/s
# Warmup Iteration  18: 2080348.146 ops/s
# Warmup Iteration  19: 2074199.706 ops/s
# Warmup Iteration  20: 2074251.916 ops/s
# Warmup Iteration  21: 2084775.874 ops/s
# Warmup Iteration  22: 2074336.383 ops/s
# Warmup Iteration  23: 2074429.416 ops/s
# Warmup Iteration  24: 2077287.262 ops/s
# Warmup Iteration  25: 2073669.762 ops/s
# Warmup Iteration  26: 2074778.436 ops/s
# Warmup Iteration  27: 2079772.106 ops/s
# Warmup Iteration  28: 2072479.985 ops/s
# Warmup Iteration  29: 2074502.758 ops/s
# Warmup Iteration  30: 2077148.517 ops/s
Iteration   1: 2076479.340 ops/s
Iteration   2: 2084834.870 ops/s
Iteration   3: 2068525.387 ops/s
Iteration   4: 2082845.566 ops/s
Iteration   5: 2062640.971 ops/s
Iteration   6: 2073215.263 ops/s
Iteration   7: 2075601.315 ops/s
Iteration   8: 2079656.710 ops/s
Iteration   9: 2080779.384 ops/s
Iteration  10: 2067842.140 ops/s
Iteration  11: 2063152.295 ops/s
Iteration  12: 2082365.376 ops/s
Iteration  13: 2075917.503 ops/s
Iteration  14: 2077740.287 ops/s
Iteration  15: 2081172.973 ops/s
Iteration  16: 2070318.996 ops/s
Iteration  17: 2084486.482 ops/s
Iteration  18: 2077171.595 ops/s
Iteration  19: 2074937.254 ops/s
Iteration  20: 2081130.081 ops/s
Iteration  21: 2078812.000 ops/s
Iteration  22: 2073519.160 ops/s
Iteration  23: 2081180.835 ops/s
Iteration  24: 2085896.465 ops/s
Iteration  25: 2077999.375 ops/s
Iteration  26: 2074524.080 ops/s
Iteration  27: 2079005.485 ops/s
Iteration  28: 2080801.341 ops/s
Iteration  29: 2082287.020 ops/s
Iteration  30: 2071861.310 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByFloat":
  2076890.029 ±(99.9%) 4017.584 ops/s [Average]
  (min, avg, max) = (2062640.971, 2076890.029, 2085896.465), stdev = 6013.331
  CI (99.9%): [2072872.444, 2080907.613] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_sumByFloat  thrpt   30  2076890.029 ± 4017.584  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61.003 ops/s
# Warmup Iteration   2: 73.488 ops/s
# Warmup Iteration   3: 101.005 ops/s
# Warmup Iteration   4: 99.168 ops/s
# Warmup Iteration   5: 99.156 ops/s
# Warmup Iteration   6: 100.048 ops/s
# Warmup Iteration   7: 100.029 ops/s
# Warmup Iteration   8: 99.613 ops/s
# Warmup Iteration   9: 90.320 ops/s
# Warmup Iteration  10: 93.109 ops/s
# Warmup Iteration  11: 100.829 ops/s
# Warmup Iteration  12: 101.311 ops/s
# Warmup Iteration  13: 100.884 ops/s
# Warmup Iteration  14: 101.172 ops/s
# Warmup Iteration  15: 100.819 ops/s
# Warmup Iteration  16: 100.557 ops/s
# Warmup Iteration  17: 101.184 ops/s
# Warmup Iteration  18: 101.046 ops/s
# Warmup Iteration  19: 100.769 ops/s
# Warmup Iteration  20: 101.319 ops/s
# Warmup Iteration  21: 101.451 ops/s
# Warmup Iteration  22: 99.798 ops/s
# Warmup Iteration  23: 98.139 ops/s
# Warmup Iteration  24: 101.021 ops/s
# Warmup Iteration  25: 101.243 ops/s
# Warmup Iteration  26: 100.298 ops/s
# Warmup Iteration  27: 100.226 ops/s
# Warmup Iteration  28: 100.694 ops/s
# Warmup Iteration  29: 96.963 ops/s
# Warmup Iteration  30: 97.842 ops/s
Iteration   1: 97.595 ops/s
Iteration   2: 97.635 ops/s
Iteration   3: 97.853 ops/s
Iteration   4: 97.677 ops/s
Iteration   5: 97.760 ops/s
Iteration   6: 97.710 ops/s
Iteration   7: 97.673 ops/s
Iteration   8: 98.360 ops/s
Iteration   9: 98.751 ops/s
Iteration  10: 97.930 ops/s
Iteration  11: 98.539 ops/s
Iteration  12: 98.452 ops/s
Iteration  13: 97.534 ops/s
Iteration  14: 96.783 ops/s
Iteration  15: 97.752 ops/s
Iteration  16: 96.213 ops/s
Iteration  17: 96.324 ops/s
Iteration  18: 97.819 ops/s
Iteration  19: 97.544 ops/s
Iteration  20: 96.974 ops/s
Iteration  21: 97.297 ops/s
Iteration  22: 97.083 ops/s
Iteration  23: 96.421 ops/s
Iteration  24: 98.513 ops/s
Iteration  25: 99.722 ops/s
Iteration  26: 99.367 ops/s
Iteration  27: 99.890 ops/s
Iteration  28: 100.263 ops/s
Iteration  29: 100.143 ops/s
Iteration  30: 98.261 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  97.995 ±(99.9%) 0.715 ops/s [Average]
  (min, avg, max) = (96.213, 97.995, 100.263), stdev = 1.070
  CI (99.9%): [97.280, 98.710] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt   Score   Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  97.995 ± 0.715  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1390294.038 ops/s
# Warmup Iteration   2: 2623717.532 ops/s
# Warmup Iteration   3: 2868452.971 ops/s
# Warmup Iteration   4: 2899645.713 ops/s
# Warmup Iteration   5: 2397853.163 ops/s
# Warmup Iteration   6: 2911138.963 ops/s
# Warmup Iteration   7: 2909204.267 ops/s
# Warmup Iteration   8: 2910870.779 ops/s
# Warmup Iteration   9: 2906730.963 ops/s
# Warmup Iteration  10: 2904590.549 ops/s
# Warmup Iteration  11: 2897984.451 ops/s
# Warmup Iteration  12: 2903110.692 ops/s
# Warmup Iteration  13: 2911374.870 ops/s
# Warmup Iteration  14: 2911266.548 ops/s
# Warmup Iteration  15: 2900483.631 ops/s
# Warmup Iteration  16: 2907686.041 ops/s
# Warmup Iteration  17: 2912121.483 ops/s
# Warmup Iteration  18: 2904448.476 ops/s
# Warmup Iteration  19: 2903137.683 ops/s
# Warmup Iteration  20: 2897322.275 ops/s
# Warmup Iteration  21: 2905426.044 ops/s
# Warmup Iteration  22: 2900981.539 ops/s
# Warmup Iteration  23: 2910847.413 ops/s
# Warmup Iteration  24: 2901901.103 ops/s
# Warmup Iteration  25: 2900061.400 ops/s
# Warmup Iteration  26: 2902462.620 ops/s
# Warmup Iteration  27: 2914055.564 ops/s
# Warmup Iteration  28: 2907005.645 ops/s
# Warmup Iteration  29: 2898634.311 ops/s
# Warmup Iteration  30: 2911338.314 ops/s
Iteration   1: 2913265.478 ops/s
Iteration   2: 2907842.952 ops/s
Iteration   3: 2904421.083 ops/s
Iteration   4: 2912048.974 ops/s
Iteration   5: 2910007.026 ops/s
Iteration   6: 2911040.855 ops/s
Iteration   7: 2905908.211 ops/s
Iteration   8: 2913941.596 ops/s
Iteration   9: 2909677.514 ops/s
Iteration  10: 2898223.478 ops/s
Iteration  11: 2906248.689 ops/s
Iteration  12: 2910053.114 ops/s
Iteration  13: 2903307.661 ops/s
Iteration  14: 2913130.576 ops/s
Iteration  15: 2907482.227 ops/s
Iteration  16: 2904931.360 ops/s
Iteration  17: 2902087.470 ops/s
Iteration  18: 2905492.058 ops/s
Iteration  19: 2914732.202 ops/s
Iteration  20: 2909876.623 ops/s
Iteration  21: 2890678.018 ops/s
Iteration  22: 2908784.826 ops/s
Iteration  23: 2910660.093 ops/s
Iteration  24: 2900956.054 ops/s
Iteration  25: 2914658.577 ops/s
Iteration  26: 2903980.621 ops/s
Iteration  27: 2903528.168 ops/s
Iteration  28: 2916799.010 ops/s
Iteration  29: 2905786.253 ops/s
Iteration  30: 2908529.532 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByInt":
  2907602.677 ±(99.9%) 3679.158 ops/s [Average]
  (min, avg, max) = (2890678.018, 2907602.677, 2916799.010), stdev = 5506.791
  CI (99.9%): [2903923.519, 2911281.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_sumByInt  thrpt   30  2907602.677 ± 3679.158  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1369579.454 ops/s
# Warmup Iteration   2: 2793580.288 ops/s
# Warmup Iteration   3: 3002545.793 ops/s
# Warmup Iteration   4: 3027476.326 ops/s
# Warmup Iteration   5: 2505254.825 ops/s
# Warmup Iteration   6: 3017994.983 ops/s
# Warmup Iteration   7: 3032336.925 ops/s
# Warmup Iteration   8: 3026395.796 ops/s
# Warmup Iteration   9: 3023830.475 ops/s
# Warmup Iteration  10: 3029732.708 ops/s
# Warmup Iteration  11: 3025339.290 ops/s
# Warmup Iteration  12: 3025185.614 ops/s
# Warmup Iteration  13: 3031617.179 ops/s
# Warmup Iteration  14: 3030264.903 ops/s
# Warmup Iteration  15: 3033479.543 ops/s
# Warmup Iteration  16: 3029626.785 ops/s
# Warmup Iteration  17: 3021223.169 ops/s
# Warmup Iteration  18: 3027265.853 ops/s
# Warmup Iteration  19: 3023627.440 ops/s
# Warmup Iteration  20: 3032566.583 ops/s
# Warmup Iteration  21: 3019134.934 ops/s
# Warmup Iteration  22: 3019754.478 ops/s
# Warmup Iteration  23: 3031188.952 ops/s
# Warmup Iteration  24: 3023817.218 ops/s
# Warmup Iteration  25: 3036871.645 ops/s
# Warmup Iteration  26: 3021544.631 ops/s
# Warmup Iteration  27: 3033930.867 ops/s
# Warmup Iteration  28: 3023930.690 ops/s
# Warmup Iteration  29: 3028041.445 ops/s
# Warmup Iteration  30: 3030088.681 ops/s
Iteration   1: 3031378.749 ops/s
Iteration   2: 3028746.576 ops/s
Iteration   3: 3032528.387 ops/s
Iteration   4: 3011536.181 ops/s
Iteration   5: 3024449.046 ops/s
Iteration   6: 3022071.935 ops/s
Iteration   7: 3025792.992 ops/s
Iteration   8: 3031029.341 ops/s
Iteration   9: 3034002.684 ops/s
Iteration  10: 3024314.581 ops/s
Iteration  11: 3031755.300 ops/s
Iteration  12: 3028025.711 ops/s
Iteration  13: 3021927.815 ops/s
Iteration  14: 3026297.352 ops/s
Iteration  15: 3025906.024 ops/s
Iteration  16: 3028950.129 ops/s
Iteration  17: 3019436.534 ops/s
Iteration  18: 3032273.735 ops/s
Iteration  19: 3030580.897 ops/s
Iteration  20: 3018822.307 ops/s
Iteration  21: 3024292.406 ops/s
Iteration  22: 3017744.754 ops/s
Iteration  23: 3030239.981 ops/s
Iteration  24: 3023961.631 ops/s
Iteration  25: 3017557.110 ops/s
Iteration  26: 3037740.232 ops/s
Iteration  27: 3031002.119 ops/s
Iteration  28: 3033942.006 ops/s
Iteration  29: 3033620.176 ops/s
Iteration  30: 3036483.289 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumByLong":
  3027213.666 ±(99.9%) 4170.688 ops/s [Average]
  (min, avg, max) = (3011536.181, 3027213.666, 3037740.232), stdev = 6242.490
  CI (99.9%): [3023042.978, 3031384.354] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_sumByLong  thrpt   30  3027213.666 ± 4170.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14312327.000 ops/s
# Warmup Iteration   2: 28276632.096 ops/s
# Warmup Iteration   3: 28951722.982 ops/s
# Warmup Iteration   4: 25370959.457 ops/s
# Warmup Iteration   5: 27784433.654 ops/s
# Warmup Iteration   6: 28975917.497 ops/s
# Warmup Iteration   7: 28934492.773 ops/s
# Warmup Iteration   8: 28774642.417 ops/s
# Warmup Iteration   9: 28992615.628 ops/s
# Warmup Iteration  10: 28935159.179 ops/s
# Warmup Iteration  11: 28956781.988 ops/s
# Warmup Iteration  12: 28952584.544 ops/s
# Warmup Iteration  13: 28905524.185 ops/s
# Warmup Iteration  14: 28978354.426 ops/s
# Warmup Iteration  15: 28988838.497 ops/s
# Warmup Iteration  16: 28948556.933 ops/s
# Warmup Iteration  17: 28890360.544 ops/s
# Warmup Iteration  18: 28988000.989 ops/s
# Warmup Iteration  19: 28920518.999 ops/s
# Warmup Iteration  20: 28932926.945 ops/s
# Warmup Iteration  21: 28913929.926 ops/s
# Warmup Iteration  22: 28960994.297 ops/s
# Warmup Iteration  23: 28857169.172 ops/s
# Warmup Iteration  24: 28859686.433 ops/s
# Warmup Iteration  25: 28797928.659 ops/s
# Warmup Iteration  26: 28956154.710 ops/s
# Warmup Iteration  27: 28976014.400 ops/s
# Warmup Iteration  28: 28947305.562 ops/s
# Warmup Iteration  29: 28890677.288 ops/s
# Warmup Iteration  30: 28919201.569 ops/s
Iteration   1: 29004378.357 ops/s
Iteration   2: 28915911.632 ops/s
Iteration   3: 28954122.802 ops/s
Iteration   4: 28798461.378 ops/s
Iteration   5: 28909527.091 ops/s
Iteration   6: 29010877.180 ops/s
Iteration   7: 28903673.177 ops/s
Iteration   8: 28947440.852 ops/s
Iteration   9: 28928145.319 ops/s
Iteration  10: 28998093.707 ops/s
Iteration  11: 28971341.774 ops/s
Iteration  12: 29019681.966 ops/s
Iteration  13: 28826206.134 ops/s
Iteration  14: 28849210.577 ops/s
Iteration  15: 28890560.279 ops/s
Iteration  16: 28992355.265 ops/s
Iteration  17: 28966917.801 ops/s
Iteration  18: 28979873.007 ops/s
Iteration  19: 28852993.344 ops/s
Iteration  20: 28981910.590 ops/s
Iteration  21: 28841373.116 ops/s
Iteration  22: 28924079.734 ops/s
Iteration  23: 28982794.648 ops/s
Iteration  24: 28840734.009 ops/s
Iteration  25: 28968427.891 ops/s
Iteration  26: 28913916.315 ops/s
Iteration  27: 28943505.001 ops/s
Iteration  28: 28735684.667 ops/s
Iteration  29: 28846367.285 ops/s
Iteration  30: 28980722.847 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumDouble":
  28922642.925 ±(99.9%) 47639.929 ops/s [Average]
  (min, avg, max) = (28735684.667, 28922642.925, 29019681.966), stdev = 71305.208
  CI (99.9%): [28875002.996, 28970282.853] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_sumDouble  thrpt   30  28922642.925 ± 47639.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13214531.340 ops/s
# Warmup Iteration   2: 22832942.404 ops/s
# Warmup Iteration   3: 25402991.755 ops/s
# Warmup Iteration   4: 26000412.878 ops/s
# Warmup Iteration   5: 21977311.502 ops/s
# Warmup Iteration   6: 26104929.952 ops/s
# Warmup Iteration   7: 26100438.666 ops/s
# Warmup Iteration   8: 26069720.075 ops/s
# Warmup Iteration   9: 26107445.864 ops/s
# Warmup Iteration  10: 26062172.885 ops/s
# Warmup Iteration  11: 26050375.669 ops/s
# Warmup Iteration  12: 26069209.402 ops/s
# Warmup Iteration  13: 26029129.591 ops/s
# Warmup Iteration  14: 25961996.377 ops/s
# Warmup Iteration  15: 25956194.825 ops/s
# Warmup Iteration  16: 26046562.563 ops/s
# Warmup Iteration  17: 26096182.997 ops/s
# Warmup Iteration  18: 26058602.658 ops/s
# Warmup Iteration  19: 26079131.586 ops/s
# Warmup Iteration  20: 26086477.328 ops/s
# Warmup Iteration  21: 26096174.638 ops/s
# Warmup Iteration  22: 26109860.063 ops/s
# Warmup Iteration  23: 26057437.870 ops/s
# Warmup Iteration  24: 26103607.143 ops/s
# Warmup Iteration  25: 25985658.341 ops/s
# Warmup Iteration  26: 26086001.170 ops/s
# Warmup Iteration  27: 26098452.592 ops/s
# Warmup Iteration  28: 25939439.439 ops/s
# Warmup Iteration  29: 26020913.084 ops/s
# Warmup Iteration  30: 26036712.749 ops/s
Iteration   1: 26037604.013 ops/s
Iteration   2: 26131235.039 ops/s
Iteration   3: 26119957.740 ops/s
Iteration   4: 26019755.503 ops/s
Iteration   5: 26109508.189 ops/s
Iteration   6: 26098282.070 ops/s
Iteration   7: 26101472.587 ops/s
Iteration   8: 26156419.202 ops/s
Iteration   9: 26081476.528 ops/s
Iteration  10: 25978333.811 ops/s
Iteration  11: 26100428.810 ops/s
Iteration  12: 26164681.945 ops/s
Iteration  13: 26014026.511 ops/s
Iteration  14: 25981708.796 ops/s
Iteration  15: 26082794.650 ops/s
Iteration  16: 26120180.856 ops/s
Iteration  17: 25978813.990 ops/s
Iteration  18: 26063559.618 ops/s
Iteration  19: 26040944.012 ops/s
Iteration  20: 26167113.690 ops/s
Iteration  21: 26003517.571 ops/s
Iteration  22: 26012156.987 ops/s
Iteration  23: 26075859.836 ops/s
Iteration  24: 26087108.168 ops/s
Iteration  25: 26093804.702 ops/s
Iteration  26: 26025272.508 ops/s
Iteration  27: 26024202.363 ops/s
Iteration  28: 26000692.123 ops/s
Iteration  29: 26071756.247 ops/s
Iteration  30: 26042538.314 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumFloat":
  26066173.546 ±(99.9%) 37050.708 ops/s [Average]
  (min, avg, max) = (25978333.811, 26066173.546, 26167113.690), stdev = 55455.760
  CI (99.9%): [26029122.838, 26103224.254] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_sumFloat  thrpt   30  26066173.546 ± 37050.708  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20222533.013 ops/s
# Warmup Iteration   2: 39584517.236 ops/s
# Warmup Iteration   3: 35831140.964 ops/s
# Warmup Iteration   4: 35197087.615 ops/s
# Warmup Iteration   5: 38561769.260 ops/s
# Warmup Iteration   6: 38612600.864 ops/s
# Warmup Iteration   7: 38657126.738 ops/s
# Warmup Iteration   8: 38554003.134 ops/s
# Warmup Iteration   9: 38585050.221 ops/s
# Warmup Iteration  10: 38587719.496 ops/s
# Warmup Iteration  11: 38601944.173 ops/s
# Warmup Iteration  12: 38559491.552 ops/s
# Warmup Iteration  13: 38494292.234 ops/s
# Warmup Iteration  14: 38610865.075 ops/s
# Warmup Iteration  15: 38519837.828 ops/s
# Warmup Iteration  16: 38554140.497 ops/s
# Warmup Iteration  17: 38604224.068 ops/s
# Warmup Iteration  18: 38521972.669 ops/s
# Warmup Iteration  19: 38462366.274 ops/s
# Warmup Iteration  20: 38451821.003 ops/s
# Warmup Iteration  21: 38574573.863 ops/s
# Warmup Iteration  22: 38573885.906 ops/s
# Warmup Iteration  23: 38577997.495 ops/s
# Warmup Iteration  24: 38335327.011 ops/s
# Warmup Iteration  25: 38518224.211 ops/s
# Warmup Iteration  26: 38534635.335 ops/s
# Warmup Iteration  27: 38555085.261 ops/s
# Warmup Iteration  28: 38604285.568 ops/s
# Warmup Iteration  29: 38538384.291 ops/s
# Warmup Iteration  30: 38637964.735 ops/s
Iteration   1: 38413224.504 ops/s
Iteration   2: 38557461.377 ops/s
Iteration   3: 38635061.234 ops/s
Iteration   4: 38610799.426 ops/s
Iteration   5: 38641909.137 ops/s
Iteration   6: 38612907.498 ops/s
Iteration   7: 38483168.655 ops/s
Iteration   8: 38610942.243 ops/s
Iteration   9: 38673069.849 ops/s
Iteration  10: 38579575.869 ops/s
Iteration  11: 38506568.132 ops/s
Iteration  12: 38578592.614 ops/s
Iteration  13: 38693312.834 ops/s
Iteration  14: 38685165.738 ops/s
Iteration  15: 38626168.071 ops/s
Iteration  16: 38463426.183 ops/s
Iteration  17: 38652793.611 ops/s
Iteration  18: 38658781.482 ops/s
Iteration  19: 38561353.309 ops/s
Iteration  20: 38624258.728 ops/s
Iteration  21: 38640282.602 ops/s
Iteration  22: 38601557.781 ops/s
Iteration  23: 38741098.219 ops/s
Iteration  24: 38707596.104 ops/s
Iteration  25: 38704764.559 ops/s
Iteration  26: 38509839.912 ops/s
Iteration  27: 38573279.380 ops/s
Iteration  28: 38595852.441 ops/s
Iteration  29: 38640474.401 ops/s
Iteration  30: 38630448.957 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumInteger":
  38607124.495 ±(99.9%) 50591.945 ops/s [Average]
  (min, avg, max) = (38413224.504, 38607124.495, 38741098.219), stdev = 75723.647
  CI (99.9%): [38556532.550, 38657716.440] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_sumInteger  thrpt   30  38607124.495 ± 50591.945  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19877283.470 ops/s
# Warmup Iteration   2: 39721582.221 ops/s
# Warmup Iteration   3: 35630694.481 ops/s
# Warmup Iteration   4: 34479519.325 ops/s
# Warmup Iteration   5: 37912232.578 ops/s
# Warmup Iteration   6: 37802133.339 ops/s
# Warmup Iteration   7: 37898592.291 ops/s
# Warmup Iteration   8: 37963584.551 ops/s
# Warmup Iteration   9: 37928154.485 ops/s
# Warmup Iteration  10: 37954791.347 ops/s
# Warmup Iteration  11: 37663539.069 ops/s
# Warmup Iteration  12: 37864253.121 ops/s
# Warmup Iteration  13: 37608897.260 ops/s
# Warmup Iteration  14: 37808347.025 ops/s
# Warmup Iteration  15: 37964196.964 ops/s
# Warmup Iteration  16: 37826546.353 ops/s
# Warmup Iteration  17: 37842265.740 ops/s
# Warmup Iteration  18: 37803082.878 ops/s
# Warmup Iteration  19: 37887428.923 ops/s
# Warmup Iteration  20: 37780700.109 ops/s
# Warmup Iteration  21: 37768143.521 ops/s
# Warmup Iteration  22: 37864785.634 ops/s
# Warmup Iteration  23: 37890292.980 ops/s
# Warmup Iteration  24: 37597811.804 ops/s
# Warmup Iteration  25: 37666842.249 ops/s
# Warmup Iteration  26: 37929050.797 ops/s
# Warmup Iteration  27: 37674053.655 ops/s
# Warmup Iteration  28: 37877877.550 ops/s
# Warmup Iteration  29: 37879410.785 ops/s
# Warmup Iteration  30: 37811228.080 ops/s
Iteration   1: 37851011.941 ops/s
Iteration   2: 37982843.580 ops/s
Iteration   3: 37962655.493 ops/s
Iteration   4: 37887054.031 ops/s
Iteration   5: 37570830.020 ops/s
Iteration   6: 37841496.845 ops/s
Iteration   7: 37729888.992 ops/s
Iteration   8: 37840680.011 ops/s
Iteration   9: 37885663.478 ops/s
Iteration  10: 37952907.811 ops/s
Iteration  11: 37881867.591 ops/s
Iteration  12: 37756592.232 ops/s
Iteration  13: 37858728.374 ops/s
Iteration  14: 37771825.623 ops/s
Iteration  15: 37785967.820 ops/s
Iteration  16: 37967846.693 ops/s
Iteration  17: 37748739.267 ops/s
Iteration  18: 37952142.241 ops/s
Iteration  19: 37951884.213 ops/s
Iteration  20: 37806506.053 ops/s
Iteration  21: 37875105.494 ops/s
Iteration  22: 37778160.978 ops/s
Iteration  23: 37632758.395 ops/s
Iteration  24: 37784610.207 ops/s
Iteration  25: 37739115.060 ops/s
Iteration  26: 37838451.481 ops/s
Iteration  27: 37789624.380 ops/s
Iteration  28: 37823889.243 ops/s
Iteration  29: 37722826.549 ops/s
Iteration  30: 37968866.484 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_sumLong":
  37831351.353 ±(99.9%) 67596.544 ops/s [Average]
  (min, avg, max) = (37570830.020, 37831351.353, 37982843.580), stdev = 101175.333
  CI (99.9%): [37763754.809, 37898947.897] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_sumLong  thrpt   30  37831351.353 ± 67596.544  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2964546.348 ops/s
# Warmup Iteration   2: 6456334.063 ops/s
# Warmup Iteration   3: 6704740.935 ops/s
# Warmup Iteration   4: 6620697.752 ops/s
# Warmup Iteration   5: 5747305.753 ops/s
# Warmup Iteration   6: 6741473.627 ops/s
# Warmup Iteration   7: 6735668.349 ops/s
# Warmup Iteration   8: 6777987.391 ops/s
# Warmup Iteration   9: 6737727.540 ops/s
# Warmup Iteration  10: 6750087.814 ops/s
# Warmup Iteration  11: 6769852.245 ops/s
# Warmup Iteration  12: 6766078.912 ops/s
# Warmup Iteration  13: 6759208.567 ops/s
# Warmup Iteration  14: 6773176.697 ops/s
# Warmup Iteration  15: 6771169.229 ops/s
# Warmup Iteration  16: 6763183.194 ops/s
# Warmup Iteration  17: 6760765.254 ops/s
# Warmup Iteration  18: 6750350.037 ops/s
# Warmup Iteration  19: 6770656.457 ops/s
# Warmup Iteration  20: 6757177.572 ops/s
# Warmup Iteration  21: 6766449.568 ops/s
# Warmup Iteration  22: 6733644.817 ops/s
# Warmup Iteration  23: 6745030.412 ops/s
# Warmup Iteration  24: 6761135.487 ops/s
# Warmup Iteration  25: 6745060.497 ops/s
# Warmup Iteration  26: 6768207.315 ops/s
# Warmup Iteration  27: 6760531.429 ops/s
# Warmup Iteration  28: 6745887.599 ops/s
# Warmup Iteration  29: 6770347.848 ops/s
# Warmup Iteration  30: 6763147.059 ops/s
Iteration   1: 6711270.169 ops/s
Iteration   2: 6770353.111 ops/s
Iteration   3: 6737181.097 ops/s
Iteration   4: 6736422.594 ops/s
Iteration   5: 6774739.315 ops/s
Iteration   6: 6743461.079 ops/s
Iteration   7: 6770175.257 ops/s
Iteration   8: 6767043.211 ops/s
Iteration   9: 6764293.005 ops/s
Iteration  10: 6744521.639 ops/s
Iteration  11: 6737168.239 ops/s
Iteration  12: 6679400.480 ops/s
Iteration  13: 6696011.044 ops/s
Iteration  14: 6715559.605 ops/s
Iteration  15: 6761384.936 ops/s
Iteration  16: 6748998.424 ops/s
Iteration  17: 6771511.889 ops/s
Iteration  18: 6772889.136 ops/s
Iteration  19: 6763856.459 ops/s
Iteration  20: 6741055.064 ops/s
Iteration  21: 6769301.901 ops/s
Iteration  22: 6772641.302 ops/s
Iteration  23: 6754052.397 ops/s
Iteration  24: 6753690.339 ops/s
Iteration  25: 6771947.996 ops/s
Iteration  26: 6776774.928 ops/s
Iteration  27: 6768779.331 ops/s
Iteration  28: 6763126.615 ops/s
Iteration  29: 6754592.092 ops/s
Iteration  30: 6761122.342 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_take":
  6751777.500 ±(99.9%) 16260.409 ops/s [Average]
  (min, avg, max) = (6679400.480, 6751777.500, 6776774.928), stdev = 24337.817
  CI (99.9%): [6735517.091, 6768037.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_take  thrpt   30  6751777.500 ± 16260.409  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8888351.089 ops/s
# Warmup Iteration   2: 19032368.629 ops/s
# Warmup Iteration   3: 18958933.526 ops/s
# Warmup Iteration   4: 15977611.138 ops/s
# Warmup Iteration   5: 19036718.607 ops/s
# Warmup Iteration   6: 18994661.545 ops/s
# Warmup Iteration   7: 18968257.650 ops/s
# Warmup Iteration   8: 18941809.696 ops/s
# Warmup Iteration   9: 19019169.468 ops/s
# Warmup Iteration  10: 18983113.037 ops/s
# Warmup Iteration  11: 19011481.640 ops/s
# Warmup Iteration  12: 18956846.636 ops/s
# Warmup Iteration  13: 18983436.793 ops/s
# Warmup Iteration  14: 18995000.792 ops/s
# Warmup Iteration  15: 18889610.929 ops/s
# Warmup Iteration  16: 18963054.875 ops/s
# Warmup Iteration  17: 18970536.993 ops/s
# Warmup Iteration  18: 19014333.458 ops/s
# Warmup Iteration  19: 19019983.591 ops/s
# Warmup Iteration  20: 18957518.378 ops/s
# Warmup Iteration  21: 19003027.088 ops/s
# Warmup Iteration  22: 18994123.575 ops/s
# Warmup Iteration  23: 18965662.673 ops/s
# Warmup Iteration  24: 19017556.745 ops/s
# Warmup Iteration  25: 19036081.724 ops/s
# Warmup Iteration  26: 17869404.909 ops/s
# Warmup Iteration  27: 19035955.893 ops/s
# Warmup Iteration  28: 19001878.435 ops/s
# Warmup Iteration  29: 18949847.295 ops/s
# Warmup Iteration  30: 18933787.800 ops/s
Iteration   1: 18986990.174 ops/s
Iteration   2: 19017041.658 ops/s
Iteration   3: 19049090.556 ops/s
Iteration   4: 19043101.617 ops/s
Iteration   5: 19015403.647 ops/s
Iteration   6: 19017515.607 ops/s
Iteration   7: 18992610.925 ops/s
Iteration   8: 18988685.260 ops/s
Iteration   9: 18942912.885 ops/s
Iteration  10: 19017927.513 ops/s
Iteration  11: 19053374.579 ops/s
Iteration  12: 18946924.160 ops/s
Iteration  13: 18991128.058 ops/s
Iteration  14: 19028295.373 ops/s
Iteration  15: 19020213.516 ops/s
Iteration  16: 18974261.356 ops/s
Iteration  17: 19026296.254 ops/s
Iteration  18: 19025106.539 ops/s
Iteration  19: 18988411.642 ops/s
Iteration  20: 19048098.532 ops/s
Iteration  21: 19029774.589 ops/s
Iteration  22: 19046561.029 ops/s
Iteration  23: 19094712.445 ops/s
Iteration  24: 18931241.758 ops/s
Iteration  25: 18997154.182 ops/s
Iteration  26: 19026206.483 ops/s
Iteration  27: 18997022.934 ops/s
Iteration  28: 19019989.098 ops/s
Iteration  29: 18976434.435 ops/s
Iteration  30: 19030165.162 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_takeWhile":
  19010755.065 ±(99.9%) 23628.280 ops/s [Average]
  (min, avg, max) = (18931241.758, 19010755.065, 19094712.445), stdev = 35365.700
  CI (99.9%): [18987126.786, 19034383.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_takeWhile  thrpt   30  19010755.065 ± 23628.280  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 746379.865 ops/s
# Warmup Iteration   2: 767007.033 ops/s
# Warmup Iteration   3: 993822.627 ops/s
# Warmup Iteration   4: 994340.363 ops/s
# Warmup Iteration   5: 993561.906 ops/s
# Warmup Iteration   6: 988063.218 ops/s
# Warmup Iteration   7: 987218.128 ops/s
# Warmup Iteration   8: 991351.777 ops/s
# Warmup Iteration   9: 993360.445 ops/s
# Warmup Iteration  10: 993300.668 ops/s
# Warmup Iteration  11: 992497.869 ops/s
# Warmup Iteration  12: 847962.724 ops/s
# Warmup Iteration  13: 992839.386 ops/s
# Warmup Iteration  14: 989886.299 ops/s
# Warmup Iteration  15: 991718.951 ops/s
# Warmup Iteration  16: 985445.325 ops/s
# Warmup Iteration  17: 1039458.786 ops/s
# Warmup Iteration  18: 1040285.812 ops/s
# Warmup Iteration  19: 1044711.991 ops/s
# Warmup Iteration  20: 1039172.070 ops/s
# Warmup Iteration  21: 1040408.936 ops/s
# Warmup Iteration  22: 1044177.863 ops/s
# Warmup Iteration  23: 1045488.503 ops/s
# Warmup Iteration  24: 1043460.796 ops/s
# Warmup Iteration  25: 1037762.090 ops/s
# Warmup Iteration  26: 1038807.945 ops/s
# Warmup Iteration  27: 1045544.256 ops/s
# Warmup Iteration  28: 1042495.282 ops/s
# Warmup Iteration  29: 1040525.348 ops/s
# Warmup Iteration  30: 1005478.166 ops/s
Iteration   1: 1045143.849 ops/s
Iteration   2: 1044731.671 ops/s
Iteration   3: 1040837.732 ops/s
Iteration   4: 1041180.552 ops/s
Iteration   5: 1044496.613 ops/s
Iteration   6: 1047106.952 ops/s
Iteration   7: 1041974.955 ops/s
Iteration   8: 1044650.900 ops/s
Iteration   9: 1043004.221 ops/s
Iteration  10: 1045474.284 ops/s
Iteration  11: 1039156.650 ops/s
Iteration  12: 1044487.426 ops/s
Iteration  13: 1045341.090 ops/s
Iteration  14: 1042967.345 ops/s
Iteration  15: 1040919.530 ops/s
Iteration  16: 1041217.942 ops/s
Iteration  17: 1044721.993 ops/s
Iteration  18: 1042912.532 ops/s
Iteration  19: 1045117.495 ops/s
Iteration  20: 1041303.867 ops/s
Iteration  21: 1046410.507 ops/s
Iteration  22: 1039983.791 ops/s
Iteration  23: 1043365.299 ops/s
Iteration  24: 1044699.912 ops/s
Iteration  25: 1042130.053 ops/s
Iteration  26: 1046142.561 ops/s
Iteration  27: 1046037.417 ops/s
Iteration  28: 1045113.606 ops/s
Iteration  29: 1047777.922 ops/s
Iteration  30: 1040950.942 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_take_throws":
  1043645.320 ±(99.9%) 1506.774 ops/s [Average]
  (min, avg, max) = (1039156.650, 1043645.320, 1047777.922), stdev = 2255.269
  CI (99.9%): [1042138.546, 1045152.095] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_take_throws  thrpt   30  1043645.320 ± 1506.774  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13598289.657 ops/s
# Warmup Iteration   2: 27412151.477 ops/s
# Warmup Iteration   3: 23709533.559 ops/s
# Warmup Iteration   4: 28082090.414 ops/s
# Warmup Iteration   5: 27949997.571 ops/s
# Warmup Iteration   6: 28004129.225 ops/s
# Warmup Iteration   7: 28015621.190 ops/s
# Warmup Iteration   8: 28010069.491 ops/s
# Warmup Iteration   9: 28009008.795 ops/s
# Warmup Iteration  10: 28087295.067 ops/s
# Warmup Iteration  11: 27996715.606 ops/s
# Warmup Iteration  12: 28051299.806 ops/s
# Warmup Iteration  13: 28031036.323 ops/s
# Warmup Iteration  14: 28010849.310 ops/s
# Warmup Iteration  15: 28091169.613 ops/s
# Warmup Iteration  16: 28115865.638 ops/s
# Warmup Iteration  17: 28048867.060 ops/s
# Warmup Iteration  18: 28033457.981 ops/s
# Warmup Iteration  19: 28034140.040 ops/s
# Warmup Iteration  20: 28000945.240 ops/s
# Warmup Iteration  21: 27927015.821 ops/s
# Warmup Iteration  22: 27973597.334 ops/s
# Warmup Iteration  23: 28036196.329 ops/s
# Warmup Iteration  24: 28034537.508 ops/s
# Warmup Iteration  25: 27868290.122 ops/s
# Warmup Iteration  26: 27910978.107 ops/s
# Warmup Iteration  27: 27996797.394 ops/s
# Warmup Iteration  28: 27905872.659 ops/s
# Warmup Iteration  29: 27892598.976 ops/s
# Warmup Iteration  30: 28054408.702 ops/s
Iteration   1: 28071559.545 ops/s
Iteration   2: 28001684.028 ops/s
Iteration   3: 27914143.000 ops/s
Iteration   4: 27831347.458 ops/s
Iteration   5: 27885567.811 ops/s
Iteration   6: 28035352.060 ops/s
Iteration   7: 27949489.929 ops/s
Iteration   8: 27948189.792 ops/s
Iteration   9: 28028239.906 ops/s
Iteration  10: 28000745.924 ops/s
Iteration  11: 27987329.247 ops/s
Iteration  12: 28115856.920 ops/s
Iteration  13: 28030463.401 ops/s
Iteration  14: 27959021.321 ops/s
Iteration  15: 28060975.948 ops/s
Iteration  16: 27911173.195 ops/s
Iteration  17: 27920788.780 ops/s
Iteration  18: 27994856.652 ops/s
Iteration  19: 27993444.774 ops/s
Iteration  20: 27987300.096 ops/s
Iteration  21: 27987204.893 ops/s
Iteration  22: 28021936.568 ops/s
Iteration  23: 27974833.879 ops/s
Iteration  24: 27980498.143 ops/s
Iteration  25: 27961611.878 ops/s
Iteration  26: 28066277.370 ops/s
Iteration  27: 27910271.362 ops/s
Iteration  28: 28021206.024 ops/s
Iteration  29: 28001860.069 ops/s
Iteration  30: 28142573.988 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_tap":
  27989860.132 ±(99.9%) 44541.570 ops/s [Average]
  (min, avg, max) = (27831347.458, 27989860.132, 28142573.988), stdev = 66667.730
  CI (99.9%): [27945318.563, 28034401.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_tap  thrpt   30  27989860.132 ± 44541.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1427962.754 ops/s
# Warmup Iteration   2: 3100738.498 ops/s
# Warmup Iteration   3: 3165693.853 ops/s
# Warmup Iteration   4: 2667360.010 ops/s
# Warmup Iteration   5: 3176473.078 ops/s
# Warmup Iteration   6: 3180718.994 ops/s
# Warmup Iteration   7: 3180534.332 ops/s
# Warmup Iteration   8: 3179231.858 ops/s
# Warmup Iteration   9: 3168299.960 ops/s
# Warmup Iteration  10: 3178200.238 ops/s
# Warmup Iteration  11: 3184538.386 ops/s
# Warmup Iteration  12: 3170883.066 ops/s
# Warmup Iteration  13: 3183596.901 ops/s
# Warmup Iteration  14: 3184137.393 ops/s
# Warmup Iteration  15: 3181460.338 ops/s
# Warmup Iteration  16: 3183227.888 ops/s
# Warmup Iteration  17: 3182599.560 ops/s
# Warmup Iteration  18: 3165298.303 ops/s
# Warmup Iteration  19: 3174697.101 ops/s
# Warmup Iteration  20: 3174746.161 ops/s
# Warmup Iteration  21: 3176726.448 ops/s
# Warmup Iteration  22: 3172623.864 ops/s
# Warmup Iteration  23: 3153832.659 ops/s
# Warmup Iteration  24: 3160175.195 ops/s
# Warmup Iteration  25: 3184298.452 ops/s
# Warmup Iteration  26: 3178864.102 ops/s
# Warmup Iteration  27: 3174062.832 ops/s
# Warmup Iteration  28: 3179671.790 ops/s
# Warmup Iteration  29: 3177223.100 ops/s
# Warmup Iteration  30: 3176695.815 ops/s
Iteration   1: 3183356.258 ops/s
Iteration   2: 3168225.768 ops/s
Iteration   3: 3173200.325 ops/s
Iteration   4: 3171987.795 ops/s
Iteration   5: 3181917.137 ops/s
Iteration   6: 3166067.368 ops/s
Iteration   7: 3182455.736 ops/s
Iteration   8: 3174043.312 ops/s
Iteration   9: 3186930.672 ops/s
Iteration  10: 3190616.702 ops/s
Iteration  11: 3165545.444 ops/s
Iteration  12: 3179380.509 ops/s
Iteration  13: 3181457.508 ops/s
Iteration  14: 3163043.817 ops/s
Iteration  15: 3184250.801 ops/s
Iteration  16: 3180760.566 ops/s
Iteration  17: 3158993.256 ops/s
Iteration  18: 3153245.235 ops/s
Iteration  19: 3175923.831 ops/s
Iteration  20: 3177960.616 ops/s
Iteration  21: 3185333.346 ops/s
Iteration  22: 3187857.314 ops/s
Iteration  23: 3181485.217 ops/s
Iteration  24: 3165703.587 ops/s
Iteration  25: 3176829.677 ops/s
Iteration  26: 3165357.645 ops/s
Iteration  27: 3179615.304 ops/s
Iteration  28: 3181114.190 ops/s
Iteration  29: 3180301.091 ops/s
Iteration  30: 3182002.882 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_testToString":
  3176165.430 ±(99.9%) 6130.213 ops/s [Average]
  (min, avg, max) = (3153245.235, 3176165.430, 3190616.702), stdev = 9175.415
  CI (99.9%): [3170035.217, 3182295.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_testToString  thrpt   30  3176165.430 ± 6130.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7003144.654 ops/s
# Warmup Iteration   2: 14220764.808 ops/s
# Warmup Iteration   3: 12063231.363 ops/s
# Warmup Iteration   4: 14294877.262 ops/s
# Warmup Iteration   5: 14315906.718 ops/s
# Warmup Iteration   6: 14271696.662 ops/s
# Warmup Iteration   7: 14311063.552 ops/s
# Warmup Iteration   8: 14290239.656 ops/s
# Warmup Iteration   9: 14284454.778 ops/s
# Warmup Iteration  10: 14290656.356 ops/s
# Warmup Iteration  11: 14250131.565 ops/s
# Warmup Iteration  12: 14247167.914 ops/s
# Warmup Iteration  13: 14311265.981 ops/s
# Warmup Iteration  14: 14319207.206 ops/s
# Warmup Iteration  15: 14267296.246 ops/s
# Warmup Iteration  16: 14207029.078 ops/s
# Warmup Iteration  17: 14274429.774 ops/s
# Warmup Iteration  18: 14287551.953 ops/s
# Warmup Iteration  19: 14325575.505 ops/s
# Warmup Iteration  20: 14329026.712 ops/s
# Warmup Iteration  21: 14325283.869 ops/s
# Warmup Iteration  22: 14263922.557 ops/s
# Warmup Iteration  23: 14285451.615 ops/s
# Warmup Iteration  24: 14218991.351 ops/s
# Warmup Iteration  25: 14295505.010 ops/s
# Warmup Iteration  26: 14260753.171 ops/s
# Warmup Iteration  27: 14292479.736 ops/s
# Warmup Iteration  28: 14280260.819 ops/s
# Warmup Iteration  29: 14308450.651 ops/s
# Warmup Iteration  30: 14268272.036 ops/s
Iteration   1: 14232618.527 ops/s
Iteration   2: 14286677.220 ops/s
Iteration   3: 14319060.316 ops/s
Iteration   4: 14302177.731 ops/s
Iteration   5: 14257671.847 ops/s
Iteration   6: 14344520.299 ops/s
Iteration   7: 14280378.045 ops/s
Iteration   8: 14235622.527 ops/s
Iteration   9: 14280476.895 ops/s
Iteration  10: 14345811.519 ops/s
Iteration  11: 14270675.532 ops/s
Iteration  12: 14291647.968 ops/s
Iteration  13: 14305032.498 ops/s
Iteration  14: 14335779.567 ops/s
Iteration  15: 14287335.150 ops/s
Iteration  16: 14310169.978 ops/s
Iteration  17: 14309951.682 ops/s
Iteration  18: 14327402.711 ops/s
Iteration  19: 14276072.470 ops/s
Iteration  20: 14296916.940 ops/s
Iteration  21: 14306125.601 ops/s
Iteration  22: 14290585.093 ops/s
Iteration  23: 14324211.205 ops/s
Iteration  24: 14185391.574 ops/s
Iteration  25: 14314070.223 ops/s
Iteration  26: 14285301.485 ops/s
Iteration  27: 14314180.811 ops/s
Iteration  28: 14262808.329 ops/s
Iteration  29: 14142885.658 ops/s
Iteration  30: 14117166.696 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toArray":
  14281290.870 ±(99.9%) 35798.332 ops/s [Average]
  (min, avg, max) = (14117166.696, 14281290.870, 14345811.519), stdev = 53581.263
  CI (99.9%): [14245492.538, 14317089.202] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_toArray  thrpt   30  14281290.870 ± 35798.332  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165307245.766 ops/s
# Warmup Iteration   2: 302462186.728 ops/s
# Warmup Iteration   3: 280311953.439 ops/s
# Warmup Iteration   4: 318919228.736 ops/s
# Warmup Iteration   5: 318607355.692 ops/s
# Warmup Iteration   6: 318804256.376 ops/s
# Warmup Iteration   7: 318053526.633 ops/s
# Warmup Iteration   8: 318261259.181 ops/s
# Warmup Iteration   9: 318539768.085 ops/s
# Warmup Iteration  10: 317475754.374 ops/s
# Warmup Iteration  11: 317892097.595 ops/s
# Warmup Iteration  12: 317233069.585 ops/s
# Warmup Iteration  13: 317339572.722 ops/s
# Warmup Iteration  14: 317062942.708 ops/s
# Warmup Iteration  15: 315979678.962 ops/s
# Warmup Iteration  16: 317846660.066 ops/s
# Warmup Iteration  17: 316351549.882 ops/s
# Warmup Iteration  18: 317113075.322 ops/s
# Warmup Iteration  19: 317576403.092 ops/s
# Warmup Iteration  20: 317594546.418 ops/s
# Warmup Iteration  21: 317121794.792 ops/s
# Warmup Iteration  22: 316499135.741 ops/s
# Warmup Iteration  23: 314378934.364 ops/s
# Warmup Iteration  24: 317443828.816 ops/s
# Warmup Iteration  25: 318213170.570 ops/s
# Warmup Iteration  26: 317679952.689 ops/s
# Warmup Iteration  27: 317914943.882 ops/s
# Warmup Iteration  28: 317052512.874 ops/s
# Warmup Iteration  29: 317675615.699 ops/s
# Warmup Iteration  30: 317051288.201 ops/s
Iteration   1: 316536324.518 ops/s
Iteration   2: 315690281.058 ops/s
Iteration   3: 316816574.434 ops/s
Iteration   4: 317060532.182 ops/s
Iteration   5: 318860823.052 ops/s
Iteration   6: 317649471.967 ops/s
Iteration   7: 317448293.171 ops/s
Iteration   8: 317564712.787 ops/s
Iteration   9: 317184579.074 ops/s
Iteration  10: 316487388.754 ops/s
Iteration  11: 316708433.406 ops/s
Iteration  12: 316357876.926 ops/s
Iteration  13: 317975207.742 ops/s
Iteration  14: 317918664.056 ops/s
Iteration  15: 316909991.243 ops/s
Iteration  16: 318430504.558 ops/s
Iteration  17: 317531923.218 ops/s
Iteration  18: 316449497.203 ops/s
Iteration  19: 318225013.041 ops/s
Iteration  20: 315506756.128 ops/s
Iteration  21: 315611705.253 ops/s
Iteration  22: 316209351.031 ops/s
Iteration  23: 319533664.673 ops/s
Iteration  24: 316578321.593 ops/s
Iteration  25: 315417531.428 ops/s
Iteration  26: 316553501.794 ops/s
Iteration  27: 318891818.556 ops/s
Iteration  28: 318119093.750 ops/s
Iteration  29: 315375754.706 ops/s
Iteration  30: 313817225.135 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toImmutable":
  316980693.881 ±(99.9%) 830161.524 ops/s [Average]
  (min, avg, max) = (313817225.135, 316980693.881, 319533664.673), stdev = 1242546.782
  CI (99.9%): [316150532.357, 317810855.405] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score        Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_toImmutable  thrpt   30  316980693.881 ± 830161.524  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3444831.210 ops/s
# Warmup Iteration   2: 7225178.488 ops/s
# Warmup Iteration   3: 6268236.659 ops/s
# Warmup Iteration   4: 7382055.291 ops/s
# Warmup Iteration   5: 7395502.562 ops/s
# Warmup Iteration   6: 7365081.124 ops/s
# Warmup Iteration   7: 7387646.999 ops/s
# Warmup Iteration   8: 7391935.639 ops/s
# Warmup Iteration   9: 7361153.676 ops/s
# Warmup Iteration  10: 7380379.390 ops/s
# Warmup Iteration  11: 7374079.055 ops/s
# Warmup Iteration  12: 7390158.785 ops/s
# Warmup Iteration  13: 7398657.224 ops/s
# Warmup Iteration  14: 7374487.078 ops/s
# Warmup Iteration  15: 7393878.188 ops/s
# Warmup Iteration  16: 7372308.724 ops/s
# Warmup Iteration  17: 7363607.904 ops/s
# Warmup Iteration  18: 7401968.463 ops/s
# Warmup Iteration  19: 7387402.074 ops/s
# Warmup Iteration  20: 7312921.081 ops/s
# Warmup Iteration  21: 7335079.994 ops/s
# Warmup Iteration  22: 7375394.490 ops/s
# Warmup Iteration  23: 7401331.866 ops/s
# Warmup Iteration  24: 7391380.450 ops/s
# Warmup Iteration  25: 7384781.893 ops/s
# Warmup Iteration  26: 7394408.475 ops/s
# Warmup Iteration  27: 7366638.186 ops/s
# Warmup Iteration  28: 7391525.624 ops/s
# Warmup Iteration  29: 7366943.988 ops/s
# Warmup Iteration  30: 7370412.175 ops/s
Iteration   1: 7352165.767 ops/s
Iteration   2: 7361760.543 ops/s
Iteration   3: 7387283.426 ops/s
Iteration   4: 7383526.153 ops/s
Iteration   5: 7114725.657 ops/s
Iteration   6: 7397932.198 ops/s
Iteration   7: 7396896.348 ops/s
Iteration   8: 7386215.874 ops/s
Iteration   9: 7353959.262 ops/s
Iteration  10: 7397613.344 ops/s
Iteration  11: 7396714.939 ops/s
Iteration  12: 7387439.888 ops/s
Iteration  13: 7399466.404 ops/s
Iteration  14: 7390921.460 ops/s
Iteration  15: 7355782.658 ops/s
Iteration  16: 7376959.481 ops/s
Iteration  17: 7410376.050 ops/s
Iteration  18: 7354074.434 ops/s
Iteration  19: 7383697.721 ops/s
Iteration  20: 7420898.603 ops/s
Iteration  21: 7392021.743 ops/s
Iteration  22: 7404478.543 ops/s
Iteration  23: 7399948.330 ops/s
Iteration  24: 7396271.574 ops/s
Iteration  25: 7403603.982 ops/s
Iteration  26: 7381081.785 ops/s
Iteration  27: 7331097.654 ops/s
Iteration  28: 7373795.417 ops/s
Iteration  29: 7371748.689 ops/s
Iteration  30: 7384189.059 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toList":
  7374888.233 ±(99.9%) 35436.644 ops/s [Average]
  (min, avg, max) = (7114725.657, 7374888.233, 7420898.603), stdev = 53039.905
  CI (99.9%): [7339451.588, 7410324.877] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_toList  thrpt   30  7374888.233 ± 35436.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1832292.379 ops/s
# Warmup Iteration   2: 2277007.644 ops/s
# Warmup Iteration   3: 2933153.925 ops/s
# Warmup Iteration   4: 2911975.587 ops/s
# Warmup Iteration   5: 2941434.853 ops/s
# Warmup Iteration   6: 2942331.598 ops/s
# Warmup Iteration   7: 2930660.617 ops/s
# Warmup Iteration   8: 2939918.554 ops/s
# Warmup Iteration   9: 2427151.629 ops/s
# Warmup Iteration  10: 2942033.649 ops/s
# Warmup Iteration  11: 2936073.517 ops/s
# Warmup Iteration  12: 2941209.184 ops/s
# Warmup Iteration  13: 2935886.335 ops/s
# Warmup Iteration  14: 2939166.511 ops/s
# Warmup Iteration  15: 2939355.777 ops/s
# Warmup Iteration  16: 2942009.527 ops/s
# Warmup Iteration  17: 2944335.329 ops/s
# Warmup Iteration  18: 2936805.260 ops/s
# Warmup Iteration  19: 2931964.463 ops/s
# Warmup Iteration  20: 2936507.618 ops/s
# Warmup Iteration  21: 2944707.542 ops/s
# Warmup Iteration  22: 2945759.180 ops/s
# Warmup Iteration  23: 2947744.477 ops/s
# Warmup Iteration  24: 2939048.571 ops/s
# Warmup Iteration  25: 2940945.014 ops/s
# Warmup Iteration  26: 2941314.722 ops/s
# Warmup Iteration  27: 2943364.865 ops/s
# Warmup Iteration  28: 2946960.488 ops/s
# Warmup Iteration  29: 2941676.011 ops/s
# Warmup Iteration  30: 2945230.210 ops/s
Iteration   1: 2934850.944 ops/s
Iteration   2: 2944010.686 ops/s
Iteration   3: 2945975.449 ops/s
Iteration   4: 2939041.769 ops/s
Iteration   5: 2947482.758 ops/s
Iteration   6: 2945786.545 ops/s
Iteration   7: 2848808.820 ops/s
Iteration   8: 2947966.415 ops/s
Iteration   9: 2948114.068 ops/s
Iteration  10: 2940645.648 ops/s
Iteration  11: 2946560.330 ops/s
Iteration  12: 2947755.875 ops/s
Iteration  13: 2943334.844 ops/s
Iteration  14: 2944456.320 ops/s
Iteration  15: 2945017.262 ops/s
Iteration  16: 2940502.626 ops/s
Iteration  17: 2949400.584 ops/s
Iteration  18: 2940602.648 ops/s
Iteration  19: 2947786.762 ops/s
Iteration  20: 2945388.844 ops/s
Iteration  21: 2934542.905 ops/s
Iteration  22: 2947967.225 ops/s
Iteration  23: 2950143.873 ops/s
Iteration  24: 2944952.584 ops/s
Iteration  25: 2948337.686 ops/s
Iteration  26: 2948047.594 ops/s
Iteration  27: 2944696.336 ops/s
Iteration  28: 2947262.182 ops/s
Iteration  29: 2947221.765 ops/s
Iteration  30: 2942878.072 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toReversed":
  2941651.314 ±(99.9%) 12003.384 ops/s [Average]
  (min, avg, max) = (2848808.820, 2941651.314, 2950143.873), stdev = 17966.102
  CI (99.9%): [2929647.930, 2953654.698] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_toReversed  thrpt   30  2941651.314 ± 12003.384  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3644905.525 ops/s
# Warmup Iteration   2: 6512338.399 ops/s
# Warmup Iteration   3: 7133402.238 ops/s
# Warmup Iteration   4: 7162493.215 ops/s
# Warmup Iteration   5: 6837014.086 ops/s
# Warmup Iteration   6: 6310433.366 ops/s
# Warmup Iteration   7: 7171454.012 ops/s
# Warmup Iteration   8: 7173282.378 ops/s
# Warmup Iteration   9: 7179834.063 ops/s
# Warmup Iteration  10: 7178535.243 ops/s
# Warmup Iteration  11: 7175130.249 ops/s
# Warmup Iteration  12: 7173749.629 ops/s
# Warmup Iteration  13: 7164157.281 ops/s
# Warmup Iteration  14: 7159340.921 ops/s
# Warmup Iteration  15: 7174430.274 ops/s
# Warmup Iteration  16: 7160163.673 ops/s
# Warmup Iteration  17: 7156059.875 ops/s
# Warmup Iteration  18: 7180042.514 ops/s
# Warmup Iteration  19: 7170354.524 ops/s
# Warmup Iteration  20: 7169129.621 ops/s
# Warmup Iteration  21: 7177267.495 ops/s
# Warmup Iteration  22: 7156618.923 ops/s
# Warmup Iteration  23: 7171793.025 ops/s
# Warmup Iteration  24: 7166681.161 ops/s
# Warmup Iteration  25: 7178963.545 ops/s
# Warmup Iteration  26: 7175522.007 ops/s
# Warmup Iteration  27: 7169576.992 ops/s
# Warmup Iteration  28: 7172245.158 ops/s
# Warmup Iteration  29: 7184726.074 ops/s
# Warmup Iteration  30: 7163899.184 ops/s
Iteration   1: 7160886.323 ops/s
Iteration   2: 7168320.852 ops/s
Iteration   3: 7188274.370 ops/s
Iteration   4: 7161307.944 ops/s
Iteration   5: 7179259.702 ops/s
Iteration   6: 7173972.548 ops/s
Iteration   7: 7173374.976 ops/s
Iteration   8: 7180693.571 ops/s
Iteration   9: 7161735.380 ops/s
Iteration  10: 7177588.694 ops/s
Iteration  11: 7173153.735 ops/s
Iteration  12: 7168079.729 ops/s
Iteration  13: 7178919.995 ops/s
Iteration  14: 7179316.131 ops/s
Iteration  15: 7187567.606 ops/s
Iteration  16: 7156876.875 ops/s
Iteration  17: 7147085.751 ops/s
Iteration  18: 7151613.836 ops/s
Iteration  19: 7155234.714 ops/s
Iteration  20: 7159091.501 ops/s
Iteration  21: 7151966.413 ops/s
Iteration  22: 7181208.945 ops/s
Iteration  23: 7191485.461 ops/s
Iteration  24: 7180207.833 ops/s
Iteration  25: 7188275.228 ops/s
Iteration  26: 7176989.294 ops/s
Iteration  27: 7185180.116 ops/s
Iteration  28: 7188476.657 ops/s
Iteration  29: 7176402.036 ops/s
Iteration  30: 7189776.686 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedList":
  7173077.430 ±(99.9%) 8621.264 ops/s [Average]
  (min, avg, max) = (7147085.751, 7173077.430, 7191485.461), stdev = 12903.902
  CI (99.9%): [7164456.166, 7181698.694] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedList  thrpt   30  7173077.430 ± 8621.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1983067.247 ops/s
# Warmup Iteration   2: 2148173.876 ops/s
# Warmup Iteration   3: 2669213.641 ops/s
# Warmup Iteration   4: 2850059.256 ops/s
# Warmup Iteration   5: 2852508.607 ops/s
# Warmup Iteration   6: 2830544.782 ops/s
# Warmup Iteration   7: 2854042.077 ops/s
# Warmup Iteration   8: 2848686.832 ops/s
# Warmup Iteration   9: 2892583.515 ops/s
# Warmup Iteration  10: 2918277.709 ops/s
# Warmup Iteration  11: 2923404.928 ops/s
# Warmup Iteration  12: 2946808.643 ops/s
# Warmup Iteration  13: 2651712.008 ops/s
# Warmup Iteration  14: 2733768.601 ops/s
# Warmup Iteration  15: 2940515.618 ops/s
# Warmup Iteration  16: 2944338.402 ops/s
# Warmup Iteration  17: 2944996.794 ops/s
# Warmup Iteration  18: 2948104.875 ops/s
# Warmup Iteration  19: 2942326.560 ops/s
# Warmup Iteration  20: 2945495.118 ops/s
# Warmup Iteration  21: 2942918.016 ops/s
# Warmup Iteration  22: 2945149.485 ops/s
# Warmup Iteration  23: 2944873.959 ops/s
# Warmup Iteration  24: 2942259.107 ops/s
# Warmup Iteration  25: 2946791.758 ops/s
# Warmup Iteration  26: 2943766.216 ops/s
# Warmup Iteration  27: 2945233.721 ops/s
# Warmup Iteration  28: 2941359.021 ops/s
# Warmup Iteration  29: 2943258.565 ops/s
# Warmup Iteration  30: 2947799.967 ops/s
Iteration   1: 2942756.744 ops/s
Iteration   2: 2945904.105 ops/s
Iteration   3: 2929186.191 ops/s
Iteration   4: 2947482.032 ops/s
Iteration   5: 2939966.542 ops/s
Iteration   6: 2927386.566 ops/s
Iteration   7: 2933746.848 ops/s
Iteration   8: 2940224.280 ops/s
Iteration   9: 2943963.164 ops/s
Iteration  10: 2943991.891 ops/s
Iteration  11: 2940912.992 ops/s
Iteration  12: 2945330.118 ops/s
Iteration  13: 2948390.935 ops/s
Iteration  14: 2946165.904 ops/s
Iteration  15: 2948114.140 ops/s
Iteration  16: 2943271.365 ops/s
Iteration  17: 2945367.514 ops/s
Iteration  18: 2945797.466 ops/s
Iteration  19: 2945544.257 ops/s
Iteration  20: 2938943.131 ops/s
Iteration  21: 2942937.492 ops/s
Iteration  22: 2947486.014 ops/s
Iteration  23: 2948609.507 ops/s
Iteration  24: 2947575.557 ops/s
Iteration  25: 2938993.131 ops/s
Iteration  26: 2946246.459 ops/s
Iteration  27: 2947284.260 ops/s
Iteration  28: 2947669.603 ops/s
Iteration  29: 2947178.697 ops/s
Iteration  30: 2945438.865 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedListBy":
  2943395.526 ±(99.9%) 3589.510 ops/s [Average]
  (min, avg, max) = (2927386.566, 2943395.526, 2948609.507), stdev = 5372.610
  CI (99.9%): [2939806.016, 2946985.035] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  2943395.526 ± 3589.510  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2111623.627 ops/s
# Warmup Iteration   2: 4945418.896 ops/s
# Warmup Iteration   3: 4980057.690 ops/s
# Warmup Iteration   4: 4194208.772 ops/s
# Warmup Iteration   5: 5006818.006 ops/s
# Warmup Iteration   6: 5016771.109 ops/s
# Warmup Iteration   7: 5010507.090 ops/s
# Warmup Iteration   8: 5016514.828 ops/s
# Warmup Iteration   9: 4993440.805 ops/s
# Warmup Iteration  10: 5012036.214 ops/s
# Warmup Iteration  11: 5011952.931 ops/s
# Warmup Iteration  12: 5007954.844 ops/s
# Warmup Iteration  13: 5009398.990 ops/s
# Warmup Iteration  14: 4985037.884 ops/s
# Warmup Iteration  15: 5008307.236 ops/s
# Warmup Iteration  16: 5013381.150 ops/s
# Warmup Iteration  17: 4996371.619 ops/s
# Warmup Iteration  18: 5012015.408 ops/s
# Warmup Iteration  19: 5012515.851 ops/s
# Warmup Iteration  20: 5008962.475 ops/s
# Warmup Iteration  21: 5009729.128 ops/s
# Warmup Iteration  22: 4998981.961 ops/s
# Warmup Iteration  23: 5007232.873 ops/s
# Warmup Iteration  24: 5011189.688 ops/s
# Warmup Iteration  25: 5011589.464 ops/s
# Warmup Iteration  26: 4993120.634 ops/s
# Warmup Iteration  27: 5013229.168 ops/s
# Warmup Iteration  28: 5008924.121 ops/s
# Warmup Iteration  29: 5008095.096 ops/s
# Warmup Iteration  30: 5007690.057 ops/s
Iteration   1: 4997790.433 ops/s
Iteration   2: 5012999.712 ops/s
Iteration   3: 5007208.624 ops/s
Iteration   4: 5004731.725 ops/s
Iteration   5: 5005491.752 ops/s
Iteration   6: 5005138.266 ops/s
Iteration   7: 5005553.802 ops/s
Iteration   8: 5003612.969 ops/s
Iteration   9: 5008104.190 ops/s
Iteration  10: 5011644.316 ops/s
Iteration  11: 5006044.722 ops/s
Iteration  12: 5011254.102 ops/s
Iteration  13: 5019787.333 ops/s
Iteration  14: 5006385.089 ops/s
Iteration  15: 5003955.138 ops/s
Iteration  16: 5007650.159 ops/s
Iteration  17: 5014702.376 ops/s
Iteration  18: 5008436.165 ops/s
Iteration  19: 4992924.988 ops/s
Iteration  20: 5006939.903 ops/s
Iteration  21: 5001143.312 ops/s
Iteration  22: 4972632.316 ops/s
Iteration  23: 5012007.210 ops/s
Iteration  24: 5009468.803 ops/s
Iteration  25: 5003012.031 ops/s
Iteration  26: 5013620.897 ops/s
Iteration  27: 5007977.083 ops/s
Iteration  28: 5016799.610 ops/s
Iteration  29: 5004994.700 ops/s
Iteration  30: 5010710.634 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedSet":
  5006424.079 ±(99.9%) 5591.710 ops/s [Average]
  (min, avg, max) = (4972632.316, 5006424.079, 5019787.333), stdev = 8369.409
  CI (99.9%): [5000832.368, 5012015.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedSet  thrpt   30  5006424.079 ± 5591.710  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 645310.015 ops/s
# Warmup Iteration   2: 1308343.060 ops/s
# Warmup Iteration   3: 1381205.480 ops/s
# Warmup Iteration   4: 1389058.416 ops/s
# Warmup Iteration   5: 1161793.281 ops/s
# Warmup Iteration   6: 1389252.577 ops/s
# Warmup Iteration   7: 1390208.401 ops/s
# Warmup Iteration   8: 1389141.194 ops/s
# Warmup Iteration   9: 1388173.922 ops/s
# Warmup Iteration  10: 1390257.195 ops/s
# Warmup Iteration  11: 1388358.047 ops/s
# Warmup Iteration  12: 1389643.770 ops/s
# Warmup Iteration  13: 1386992.047 ops/s
# Warmup Iteration  14: 1389382.769 ops/s
# Warmup Iteration  15: 1387940.674 ops/s
# Warmup Iteration  16: 1388637.932 ops/s
# Warmup Iteration  17: 1385464.933 ops/s
# Warmup Iteration  18: 1380957.465 ops/s
# Warmup Iteration  19: 1386429.892 ops/s
# Warmup Iteration  20: 1388004.921 ops/s
# Warmup Iteration  21: 1385649.879 ops/s
# Warmup Iteration  22: 1388218.151 ops/s
# Warmup Iteration  23: 1387085.209 ops/s
# Warmup Iteration  24: 1386598.772 ops/s
# Warmup Iteration  25: 1385749.678 ops/s
# Warmup Iteration  26: 1385780.680 ops/s
# Warmup Iteration  27: 1376944.567 ops/s
# Warmup Iteration  28: 1381850.520 ops/s
# Warmup Iteration  29: 1383009.134 ops/s
# Warmup Iteration  30: 1387298.042 ops/s
Iteration   1: 1383812.318 ops/s
Iteration   2: 1385873.124 ops/s
Iteration   3: 1385042.556 ops/s
Iteration   4: 1386016.360 ops/s
Iteration   5: 1384466.576 ops/s
Iteration   6: 1384695.276 ops/s
Iteration   7: 1387525.379 ops/s
Iteration   8: 1378134.957 ops/s
Iteration   9: 1382700.731 ops/s
Iteration  10: 1390340.576 ops/s
Iteration  11: 1384503.773 ops/s
Iteration  12: 1386543.473 ops/s
Iteration  13: 1384840.079 ops/s
Iteration  14: 1378051.330 ops/s
Iteration  15: 1386717.372 ops/s
Iteration  16: 1386420.443 ops/s
Iteration  17: 1386803.737 ops/s
Iteration  18: 1385677.782 ops/s
Iteration  19: 1386505.250 ops/s
Iteration  20: 1381856.465 ops/s
Iteration  21: 1387605.287 ops/s
Iteration  22: 1384335.612 ops/s
Iteration  23: 1384372.568 ops/s
Iteration  24: 1387176.043 ops/s
Iteration  25: 1385218.873 ops/s
Iteration  26: 1386442.119 ops/s
Iteration  27: 1386864.874 ops/s
Iteration  28: 1388011.125 ops/s
Iteration  29: 1385832.503 ops/s
Iteration  30: 1384986.537 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedSetBy":
  1385245.770 ±(99.9%) 1703.707 ops/s [Average]
  (min, avg, max) = (1378051.330, 1385245.770, 1390340.576), stdev = 2550.028
  CI (99.9%): [1383542.063, 1386949.477] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1385245.770 ± 1703.707  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1378868.930 ops/s
# Warmup Iteration   2: 3054292.374 ops/s
# Warmup Iteration   3: 3158923.187 ops/s
# Warmup Iteration   4: 3123873.342 ops/s
# Warmup Iteration   5: 2715574.730 ops/s
# Warmup Iteration   6: 3160110.068 ops/s
# Warmup Iteration   7: 3172125.017 ops/s
# Warmup Iteration   8: 3189013.382 ops/s
# Warmup Iteration   9: 3182854.086 ops/s
# Warmup Iteration  10: 3185594.971 ops/s
# Warmup Iteration  11: 3174457.206 ops/s
# Warmup Iteration  12: 3186897.551 ops/s
# Warmup Iteration  13: 3170631.839 ops/s
# Warmup Iteration  14: 3156105.202 ops/s
# Warmup Iteration  15: 3162086.735 ops/s
# Warmup Iteration  16: 3161014.960 ops/s
# Warmup Iteration  17: 3182797.633 ops/s
# Warmup Iteration  18: 3181634.059 ops/s
# Warmup Iteration  19: 3184708.494 ops/s
# Warmup Iteration  20: 3177196.745 ops/s
# Warmup Iteration  21: 3184627.510 ops/s
# Warmup Iteration  22: 3182487.978 ops/s
# Warmup Iteration  23: 3181513.321 ops/s
# Warmup Iteration  24: 3185877.000 ops/s
# Warmup Iteration  25: 3181998.839 ops/s
# Warmup Iteration  26: 3185258.027 ops/s
# Warmup Iteration  27: 3184607.764 ops/s
# Warmup Iteration  28: 3174393.549 ops/s
# Warmup Iteration  29: 3181784.764 ops/s
# Warmup Iteration  30: 3185061.461 ops/s
Iteration   1: 3183463.361 ops/s
Iteration   2: 3162162.078 ops/s
Iteration   3: 3179543.986 ops/s
Iteration   4: 3187022.218 ops/s
Iteration   5: 3179928.949 ops/s
Iteration   6: 3180087.229 ops/s
Iteration   7: 3180808.060 ops/s
Iteration   8: 3180346.394 ops/s
Iteration   9: 3189526.265 ops/s
Iteration  10: 3181904.779 ops/s
Iteration  11: 3180808.911 ops/s
Iteration  12: 3179385.790 ops/s
Iteration  13: 3191282.046 ops/s
Iteration  14: 3185307.393 ops/s
Iteration  15: 3187379.618 ops/s
Iteration  16: 3189186.487 ops/s
Iteration  17: 3182112.727 ops/s
Iteration  18: 3188771.867 ops/s
Iteration  19: 3181025.611 ops/s
Iteration  20: 3183461.569 ops/s
Iteration  21: 3180292.591 ops/s
Iteration  22: 3186197.730 ops/s
Iteration  23: 3189001.453 ops/s
Iteration  24: 3183341.395 ops/s
Iteration  25: 3185942.912 ops/s
Iteration  26: 3190066.290 ops/s
Iteration  27: 3186234.441 ops/s
Iteration  28: 3181053.346 ops/s
Iteration  29: 3178745.148 ops/s
Iteration  30: 3172703.074 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedSetWithComparator":
  3182903.124 ±(99.9%) 3871.833 ops/s [Average]
  (min, avg, max) = (3162162.078, 3182903.124, 3191282.046), stdev = 5795.178
  CI (99.9%): [3179031.291, 3186774.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  3182903.124 ± 3871.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3090193.591 ops/s
# Warmup Iteration   2: 7506642.814 ops/s
# Warmup Iteration   3: 7395275.711 ops/s
# Warmup Iteration   4: 6161279.640 ops/s
# Warmup Iteration   5: 7389248.222 ops/s
# Warmup Iteration   6: 7399701.755 ops/s
# Warmup Iteration   7: 7417893.648 ops/s
# Warmup Iteration   8: 7439300.343 ops/s
# Warmup Iteration   9: 7403500.349 ops/s
# Warmup Iteration  10: 7431939.783 ops/s
# Warmup Iteration  11: 7427376.002 ops/s
# Warmup Iteration  12: 7425807.334 ops/s
# Warmup Iteration  13: 7415535.793 ops/s
# Warmup Iteration  14: 7444824.702 ops/s
# Warmup Iteration  15: 7423930.985 ops/s
# Warmup Iteration  16: 7415448.563 ops/s
# Warmup Iteration  17: 7407055.102 ops/s
# Warmup Iteration  18: 7419534.127 ops/s
# Warmup Iteration  19: 7429241.526 ops/s
# Warmup Iteration  20: 7428202.913 ops/s
# Warmup Iteration  21: 7415929.693 ops/s
# Warmup Iteration  22: 7420645.676 ops/s
# Warmup Iteration  23: 7423180.305 ops/s
# Warmup Iteration  24: 7418128.210 ops/s
# Warmup Iteration  25: 7418590.649 ops/s
# Warmup Iteration  26: 7428568.451 ops/s
# Warmup Iteration  27: 7424992.329 ops/s
# Warmup Iteration  28: 7414236.982 ops/s
# Warmup Iteration  29: 7411644.723 ops/s
# Warmup Iteration  30: 7394849.093 ops/s
Iteration   1: 7393335.460 ops/s
Iteration   2: 7422820.854 ops/s
Iteration   3: 7432927.090 ops/s
Iteration   4: 7401581.023 ops/s
Iteration   5: 7407966.722 ops/s
Iteration   6: 7413887.109 ops/s
Iteration   7: 7406711.544 ops/s
Iteration   8: 7429335.861 ops/s
Iteration   9: 7405152.736 ops/s
Iteration  10: 7406833.820 ops/s
Iteration  11: 7411636.976 ops/s
Iteration  12: 7432196.958 ops/s
Iteration  13: 7427540.017 ops/s
Iteration  14: 7420253.976 ops/s
Iteration  15: 7424305.773 ops/s
Iteration  16: 7427105.239 ops/s
Iteration  17: 7438020.880 ops/s
Iteration  18: 7431808.013 ops/s
Iteration  19: 7434531.159 ops/s
Iteration  20: 7439191.463 ops/s
Iteration  21: 7432548.856 ops/s
Iteration  22: 7423418.227 ops/s
Iteration  23: 7418465.593 ops/s
Iteration  24: 7424506.040 ops/s
Iteration  25: 7432771.391 ops/s
Iteration  26: 7401541.025 ops/s
Iteration  27: 7416396.180 ops/s
Iteration  28: 7422297.472 ops/s
Iteration  29: 7421781.415 ops/s
Iteration  30: 7424583.483 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_toStack":
  7420848.412 ±(99.9%) 8011.428 ops/s [Average]
  (min, avg, max) = (7393335.460, 7420848.412, 7439191.463), stdev = 11991.130
  CI (99.9%): [7412836.983, 7428859.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_toStack  thrpt   30  7420848.412 ± 8011.428  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 415908.217 ops/s
# Warmup Iteration   2: 671932.279 ops/s
# Warmup Iteration   3: 770288.941 ops/s
# Warmup Iteration   4: 775544.678 ops/s
# Warmup Iteration   5: 774253.553 ops/s
# Warmup Iteration   6: 694633.092 ops/s
# Warmup Iteration   7: 725798.146 ops/s
# Warmup Iteration   8: 774622.350 ops/s
# Warmup Iteration   9: 775815.467 ops/s
# Warmup Iteration  10: 774121.970 ops/s
# Warmup Iteration  11: 773375.176 ops/s
# Warmup Iteration  12: 773760.941 ops/s
# Warmup Iteration  13: 775944.301 ops/s
# Warmup Iteration  14: 775126.344 ops/s
# Warmup Iteration  15: 775308.331 ops/s
# Warmup Iteration  16: 774167.909 ops/s
# Warmup Iteration  17: 773640.704 ops/s
# Warmup Iteration  18: 772942.306 ops/s
# Warmup Iteration  19: 773619.651 ops/s
# Warmup Iteration  20: 775487.476 ops/s
# Warmup Iteration  21: 775004.711 ops/s
# Warmup Iteration  22: 773559.171 ops/s
# Warmup Iteration  23: 769040.526 ops/s
# Warmup Iteration  24: 772676.416 ops/s
# Warmup Iteration  25: 773272.806 ops/s
# Warmup Iteration  26: 775434.229 ops/s
# Warmup Iteration  27: 773503.897 ops/s
# Warmup Iteration  28: 775361.966 ops/s
# Warmup Iteration  29: 775725.339 ops/s
# Warmup Iteration  30: 773006.731 ops/s
Iteration   1: 775185.916 ops/s
Iteration   2: 771690.921 ops/s
Iteration   3: 768992.539 ops/s
Iteration   4: 773687.486 ops/s
Iteration   5: 772066.980 ops/s
Iteration   6: 774171.291 ops/s
Iteration   7: 771677.907 ops/s
Iteration   8: 770823.561 ops/s
Iteration   9: 767610.649 ops/s
Iteration  10: 768679.300 ops/s
Iteration  11: 774898.613 ops/s
Iteration  12: 772934.704 ops/s
Iteration  13: 775912.735 ops/s
Iteration  14: 768518.926 ops/s
Iteration  15: 775097.636 ops/s
Iteration  16: 773742.208 ops/s
Iteration  17: 776790.444 ops/s
Iteration  18: 774940.794 ops/s
Iteration  19: 775738.658 ops/s
Iteration  20: 775113.285 ops/s
Iteration  21: 774763.313 ops/s
Iteration  22: 777887.808 ops/s
Iteration  23: 775308.815 ops/s
Iteration  24: 772880.447 ops/s
Iteration  25: 776447.925 ops/s
Iteration  26: 775372.412 ops/s
Iteration  27: 773183.317 ops/s
Iteration  28: 773000.675 ops/s
Iteration  29: 774172.062 ops/s
Iteration  30: 773310.193 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_zip":
  773486.717 ±(99.9%) 1714.383 ops/s [Average]
  (min, avg, max) = (767610.649, 773486.717, 777887.808), stdev = 2566.009
  CI (99.9%): [771772.334, 775201.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_zip  thrpt   30  773486.717 ± 1714.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 885318.918 ops/s
# Warmup Iteration   2: 1657072.069 ops/s
# Warmup Iteration   3: 1785743.980 ops/s
# Warmup Iteration   4: 1793693.038 ops/s
# Warmup Iteration   5: 1488871.793 ops/s
# Warmup Iteration   6: 1789829.640 ops/s
# Warmup Iteration   7: 1793282.585 ops/s
# Warmup Iteration   8: 1789020.640 ops/s
# Warmup Iteration   9: 1790468.689 ops/s
# Warmup Iteration  10: 1793090.673 ops/s
# Warmup Iteration  11: 1796643.216 ops/s
# Warmup Iteration  12: 1795871.843 ops/s
# Warmup Iteration  13: 1795734.263 ops/s
# Warmup Iteration  14: 1791771.170 ops/s
# Warmup Iteration  15: 1792111.069 ops/s
# Warmup Iteration  16: 1788750.994 ops/s
# Warmup Iteration  17: 1793309.432 ops/s
# Warmup Iteration  18: 1789757.117 ops/s
# Warmup Iteration  19: 1792596.019 ops/s
# Warmup Iteration  20: 1796166.948 ops/s
# Warmup Iteration  21: 1796124.621 ops/s
# Warmup Iteration  22: 1795415.279 ops/s
# Warmup Iteration  23: 1790725.443 ops/s
# Warmup Iteration  24: 1794023.023 ops/s
# Warmup Iteration  25: 1796748.134 ops/s
# Warmup Iteration  26: 1791548.640 ops/s
# Warmup Iteration  27: 1788216.326 ops/s
# Warmup Iteration  28: 1796306.477 ops/s
# Warmup Iteration  29: 1786665.356 ops/s
# Warmup Iteration  30: 1791839.052 ops/s
Iteration   1: 1794369.074 ops/s
Iteration   2: 1793981.015 ops/s
Iteration   3: 1785650.705 ops/s
Iteration   4: 1791066.787 ops/s
Iteration   5: 1793316.746 ops/s
Iteration   6: 1797017.113 ops/s
Iteration   7: 1799668.141 ops/s
Iteration   8: 1795272.928 ops/s
Iteration   9: 1790474.895 ops/s
Iteration  10: 1794073.285 ops/s
Iteration  11: 1793109.128 ops/s
Iteration  12: 1792686.248 ops/s
Iteration  13: 1796256.706 ops/s
Iteration  14: 1794435.890 ops/s
Iteration  15: 1790045.436 ops/s
Iteration  16: 1780654.515 ops/s
Iteration  17: 1790437.971 ops/s
Iteration  18: 1794473.895 ops/s
Iteration  19: 1787815.447 ops/s
Iteration  20: 1795098.329 ops/s
Iteration  21: 1796365.649 ops/s
Iteration  22: 1794978.540 ops/s
Iteration  23: 1796364.385 ops/s
Iteration  24: 1795948.761 ops/s
Iteration  25: 1797961.334 ops/s
Iteration  26: 1799750.411 ops/s
Iteration  27: 1793840.756 ops/s
Iteration  28: 1793603.448 ops/s
Iteration  29: 1794559.125 ops/s
Iteration  30: 1788013.873 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableQuintupletonListTest._Benchmark.benchmark_zipWithIndex":
  1793376.351 ±(99.9%) 2710.974 ops/s [Average]
  (min, avg, max) = (1780654.515, 1793376.351, 1799750.411), stdev = 4057.659
  CI (99.9%): [1790665.377, 1796087.326] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableQuintupletonListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  1793376.351 ± 2710.974  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750087.328 ops/s
# Warmup Iteration   2: 785248.445 ops/s
# Warmup Iteration   3: 989262.255 ops/s
# Warmup Iteration   4: 975672.582 ops/s
# Warmup Iteration   5: 973804.948 ops/s
# Warmup Iteration   6: 981023.867 ops/s
# Warmup Iteration   7: 981979.404 ops/s
# Warmup Iteration   8: 976136.622 ops/s
# Warmup Iteration   9: 975247.925 ops/s
# Warmup Iteration  10: 973236.825 ops/s
# Warmup Iteration  11: 982026.501 ops/s
# Warmup Iteration  12: 833839.625 ops/s
# Warmup Iteration  13: 983295.090 ops/s
# Warmup Iteration  14: 980714.923 ops/s
# Warmup Iteration  15: 983869.859 ops/s
# Warmup Iteration  16: 982915.433 ops/s
# Warmup Iteration  17: 1042039.068 ops/s
# Warmup Iteration  18: 1040616.299 ops/s
# Warmup Iteration  19: 1041589.407 ops/s
# Warmup Iteration  20: 1041068.078 ops/s
# Warmup Iteration  21: 1044464.933 ops/s
# Warmup Iteration  22: 1043400.020 ops/s
# Warmup Iteration  23: 1042140.768 ops/s
# Warmup Iteration  24: 1041530.961 ops/s
# Warmup Iteration  25: 1037682.642 ops/s
# Warmup Iteration  26: 1037695.396 ops/s
# Warmup Iteration  27: 1042356.071 ops/s
# Warmup Iteration  28: 1043560.270 ops/s
# Warmup Iteration  29: 1045174.254 ops/s
# Warmup Iteration  30: 1043349.357 ops/s
Iteration   1: 1045355.539 ops/s
Iteration   2: 1038865.928 ops/s
Iteration   3: 1037270.077 ops/s
Iteration   4: 1041500.227 ops/s
Iteration   5: 1039470.861 ops/s
Iteration   6: 1041174.152 ops/s
Iteration   7: 1040977.862 ops/s
Iteration   8: 1037990.306 ops/s
Iteration   9: 1040662.270 ops/s
Iteration  10: 1036405.450 ops/s
Iteration  11: 1039269.266 ops/s
Iteration  12: 1035895.114 ops/s
Iteration  13: 1036318.108 ops/s
Iteration  14: 1031804.813 ops/s
Iteration  15: 1041269.392 ops/s
Iteration  16: 1040125.269 ops/s
Iteration  17: 1041841.104 ops/s
Iteration  18: 1036302.100 ops/s
Iteration  19: 1039481.879 ops/s
Iteration  20: 1034755.357 ops/s
Iteration  21: 1036449.528 ops/s
Iteration  22: 1037324.550 ops/s
Iteration  23: 1040229.614 ops/s
Iteration  24: 1036527.861 ops/s
Iteration  25: 1034006.312 ops/s
Iteration  26: 1038418.838 ops/s
Iteration  27: 1045677.064 ops/s
Iteration  28: 1042603.678 ops/s
Iteration  29: 1043351.520 ops/s
Iteration  30: 1040061.193 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_add":
  1039046.174 ±(99.9%) 2139.902 ops/s [Average]
  (min, avg, max) = (1031804.813, 1039046.174, 1045677.064), stdev = 3202.905
  CI (99.9%): [1036906.272, 1041186.077] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_add  thrpt   30  1039046.174 ± 2139.902  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 737818.406 ops/s
# Warmup Iteration   2: 780379.633 ops/s
# Warmup Iteration   3: 985092.651 ops/s
# Warmup Iteration   4: 979474.557 ops/s
# Warmup Iteration   5: 972658.127 ops/s
# Warmup Iteration   6: 967356.194 ops/s
# Warmup Iteration   7: 978652.315 ops/s
# Warmup Iteration   8: 979379.148 ops/s
# Warmup Iteration   9: 983194.597 ops/s
# Warmup Iteration  10: 981797.595 ops/s
# Warmup Iteration  11: 983747.142 ops/s
# Warmup Iteration  12: 836934.347 ops/s
# Warmup Iteration  13: 985711.770 ops/s
# Warmup Iteration  14: 984573.621 ops/s
# Warmup Iteration  15: 981338.871 ops/s
# Warmup Iteration  16: 979996.072 ops/s
# Warmup Iteration  17: 1041934.212 ops/s
# Warmup Iteration  18: 1040145.012 ops/s
# Warmup Iteration  19: 1040061.084 ops/s
# Warmup Iteration  20: 1043200.438 ops/s
# Warmup Iteration  21: 1043992.803 ops/s
# Warmup Iteration  22: 1038258.073 ops/s
# Warmup Iteration  23: 1042908.025 ops/s
# Warmup Iteration  24: 1023933.931 ops/s
# Warmup Iteration  25: 1018365.339 ops/s
# Warmup Iteration  26: 1048079.279 ops/s
# Warmup Iteration  27: 1038737.128 ops/s
# Warmup Iteration  28: 1047718.588 ops/s
# Warmup Iteration  29: 1050705.899 ops/s
# Warmup Iteration  30: 1044122.422 ops/s
Iteration   1: 1051350.384 ops/s
Iteration   2: 1048684.417 ops/s
Iteration   3: 1043713.751 ops/s
Iteration   4: 1047277.748 ops/s
Iteration   5: 1046095.269 ops/s
Iteration   6: 1046600.646 ops/s
Iteration   7: 1042878.177 ops/s
Iteration   8: 1049415.725 ops/s
Iteration   9: 1050288.452 ops/s
Iteration  10: 1044658.137 ops/s
Iteration  11: 1044366.849 ops/s
Iteration  12: 1050826.570 ops/s
Iteration  13: 1050226.266 ops/s
Iteration  14: 1047192.796 ops/s
Iteration  15: 1049301.720 ops/s
Iteration  16: 1050192.704 ops/s
Iteration  17: 1051170.239 ops/s
Iteration  18: 1044656.955 ops/s
Iteration  19: 1047005.614 ops/s
Iteration  20: 1047243.632 ops/s
Iteration  21: 1047378.466 ops/s
Iteration  22: 1041170.651 ops/s
Iteration  23: 1048019.844 ops/s
Iteration  24: 1047186.015 ops/s
Iteration  25: 1045684.014 ops/s
Iteration  26: 1047566.601 ops/s
Iteration  27: 1049512.940 ops/s
Iteration  28: 1051117.489 ops/s
Iteration  29: 1051268.568 ops/s
Iteration  30: 1046453.562 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_addAll":
  1047616.807 ±(99.9%) 1801.390 ops/s [Average]
  (min, avg, max) = (1041170.651, 1047616.807, 1051350.384), stdev = 2696.236
  CI (99.9%): [1045815.416, 1049418.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_addAll  thrpt   30  1047616.807 ± 1801.390  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 638147.110 ops/s
# Warmup Iteration   2: 777757.815 ops/s
# Warmup Iteration   3: 972033.761 ops/s
# Warmup Iteration   4: 972034.359 ops/s
# Warmup Iteration   5: 975663.535 ops/s
# Warmup Iteration   6: 977286.386 ops/s
# Warmup Iteration   7: 975706.159 ops/s
# Warmup Iteration   8: 973569.428 ops/s
# Warmup Iteration   9: 812947.656 ops/s
# Warmup Iteration  10: 978727.101 ops/s
# Warmup Iteration  11: 976509.801 ops/s
# Warmup Iteration  12: 978088.032 ops/s
# Warmup Iteration  13: 977261.572 ops/s
# Warmup Iteration  14: 972568.714 ops/s
# Warmup Iteration  15: 976199.221 ops/s
# Warmup Iteration  16: 974588.767 ops/s
# Warmup Iteration  17: 1028460.745 ops/s
# Warmup Iteration  18: 1023368.440 ops/s
# Warmup Iteration  19: 1025564.175 ops/s
# Warmup Iteration  20: 1029806.112 ops/s
# Warmup Iteration  21: 1027279.210 ops/s
# Warmup Iteration  22: 1026322.101 ops/s
# Warmup Iteration  23: 1029443.108 ops/s
# Warmup Iteration  24: 1027146.514 ops/s
# Warmup Iteration  25: 1027825.435 ops/s
# Warmup Iteration  26: 954862.185 ops/s
# Warmup Iteration  27: 1027495.760 ops/s
# Warmup Iteration  28: 1026003.850 ops/s
# Warmup Iteration  29: 1028658.344 ops/s
# Warmup Iteration  30: 1028024.132 ops/s
Iteration   1: 1027507.764 ops/s
Iteration   2: 1030911.387 ops/s
Iteration   3: 1029493.444 ops/s
Iteration   4: 1028808.192 ops/s
Iteration   5: 1027908.255 ops/s
Iteration   6: 1026947.632 ops/s
Iteration   7: 1027088.113 ops/s
Iteration   8: 1022251.295 ops/s
Iteration   9: 1029103.638 ops/s
Iteration  10: 1024064.640 ops/s
Iteration  11: 1031007.127 ops/s
Iteration  12: 1028546.102 ops/s
Iteration  13: 1026031.513 ops/s
Iteration  14: 1027667.692 ops/s
Iteration  15: 1027797.796 ops/s
Iteration  16: 1029342.246 ops/s
Iteration  17: 1026036.779 ops/s
Iteration  18: 1026247.979 ops/s
Iteration  19: 1023979.931 ops/s
Iteration  20: 1022507.711 ops/s
Iteration  21: 1020109.849 ops/s
Iteration  22: 1016859.813 ops/s
Iteration  23: 1027032.038 ops/s
Iteration  24: 1028800.592 ops/s
Iteration  25: 1029795.743 ops/s
Iteration  26: 1028873.620 ops/s
Iteration  27: 1022898.239 ops/s
Iteration  28: 1027710.425 ops/s
Iteration  29: 1028615.987 ops/s
Iteration  30: 1027016.593 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_addAllAtIndex":
  1026698.738 ±(99.9%) 2149.969 ops/s [Average]
  (min, avg, max) = (1016859.813, 1026698.738, 1031007.127), stdev = 3217.972
  CI (99.9%): [1024548.769, 1028848.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1026698.738 ± 2149.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 752093.632 ops/s
# Warmup Iteration   2: 796352.107 ops/s
# Warmup Iteration   3: 1006024.500 ops/s
# Warmup Iteration   4: 1002549.980 ops/s
# Warmup Iteration   5: 996037.886 ops/s
# Warmup Iteration   6: 998859.661 ops/s
# Warmup Iteration   7: 995622.457 ops/s
# Warmup Iteration   8: 993704.104 ops/s
# Warmup Iteration   9: 998833.999 ops/s
# Warmup Iteration  10: 996222.504 ops/s
# Warmup Iteration  11: 973906.525 ops/s
# Warmup Iteration  12: 884064.382 ops/s
# Warmup Iteration  13: 996482.055 ops/s
# Warmup Iteration  14: 999264.272 ops/s
# Warmup Iteration  15: 1000833.333 ops/s
# Warmup Iteration  16: 999498.728 ops/s
# Warmup Iteration  17: 1060113.223 ops/s
# Warmup Iteration  18: 1065735.464 ops/s
# Warmup Iteration  19: 1064766.168 ops/s
# Warmup Iteration  20: 1065933.864 ops/s
# Warmup Iteration  21: 1057921.032 ops/s
# Warmup Iteration  22: 1064434.786 ops/s
# Warmup Iteration  23: 1066582.476 ops/s
# Warmup Iteration  24: 1058430.891 ops/s
# Warmup Iteration  25: 1058721.962 ops/s
# Warmup Iteration  26: 1063064.070 ops/s
# Warmup Iteration  27: 1056900.983 ops/s
# Warmup Iteration  28: 1063897.070 ops/s
# Warmup Iteration  29: 1062049.103 ops/s
# Warmup Iteration  30: 1063734.705 ops/s
Iteration   1: 1061535.903 ops/s
Iteration   2: 1059707.974 ops/s
Iteration   3: 1064471.643 ops/s
Iteration   4: 1058817.509 ops/s
Iteration   5: 1064246.838 ops/s
Iteration   6: 1061731.324 ops/s
Iteration   7: 1062977.496 ops/s
Iteration   8: 1065359.907 ops/s
Iteration   9: 1061316.667 ops/s
Iteration  10: 1063166.531 ops/s
Iteration  11: 1060355.725 ops/s
Iteration  12: 1063378.369 ops/s
Iteration  13: 1061842.089 ops/s
Iteration  14: 1059961.266 ops/s
Iteration  15: 1066577.131 ops/s
Iteration  16: 1068156.902 ops/s
Iteration  17: 1065978.017 ops/s
Iteration  18: 1067063.238 ops/s
Iteration  19: 1068967.090 ops/s
Iteration  20: 1063420.361 ops/s
Iteration  21: 1064989.782 ops/s
Iteration  22: 1063509.993 ops/s
Iteration  23: 1057404.784 ops/s
Iteration  24: 1058586.995 ops/s
Iteration  25: 1062461.822 ops/s
Iteration  26: 1063040.453 ops/s
Iteration  27: 1062245.416 ops/s
Iteration  28: 1060250.821 ops/s
Iteration  29: 1066858.128 ops/s
Iteration  30: 1065780.433 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_addAtIndex":
  1063138.687 ±(99.9%) 1953.603 ops/s [Average]
  (min, avg, max) = (1057404.784, 1063138.687, 1068967.090), stdev = 2924.062
  CI (99.9%): [1061185.084, 1065092.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_addAtIndex  thrpt   30  1063138.687 ± 1953.603  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 503421.242 ops/s
# Warmup Iteration   2: 1020177.803 ops/s
# Warmup Iteration   3: 1044218.101 ops/s
# Warmup Iteration   4: 1042121.595 ops/s
# Warmup Iteration   5: 885469.521 ops/s
# Warmup Iteration   6: 1046165.398 ops/s
# Warmup Iteration   7: 1039462.777 ops/s
# Warmup Iteration   8: 1046764.276 ops/s
# Warmup Iteration   9: 1050343.467 ops/s
# Warmup Iteration  10: 1052363.888 ops/s
# Warmup Iteration  11: 1052839.166 ops/s
# Warmup Iteration  12: 1052784.146 ops/s
# Warmup Iteration  13: 1041951.440 ops/s
# Warmup Iteration  14: 1053689.344 ops/s
# Warmup Iteration  15: 1042625.368 ops/s
# Warmup Iteration  16: 1054482.610 ops/s
# Warmup Iteration  17: 1048342.742 ops/s
# Warmup Iteration  18: 1046859.300 ops/s
# Warmup Iteration  19: 1048403.575 ops/s
# Warmup Iteration  20: 1050071.722 ops/s
# Warmup Iteration  21: 1049459.490 ops/s
# Warmup Iteration  22: 1051798.724 ops/s
# Warmup Iteration  23: 1050335.326 ops/s
# Warmup Iteration  24: 1049698.902 ops/s
# Warmup Iteration  25: 1049692.444 ops/s
# Warmup Iteration  26: 1051041.490 ops/s
# Warmup Iteration  27: 1052585.995 ops/s
# Warmup Iteration  28: 1050716.159 ops/s
# Warmup Iteration  29: 1043909.071 ops/s
# Warmup Iteration  30: 1055674.382 ops/s
Iteration   1: 1052968.766 ops/s
Iteration   2: 1050230.940 ops/s
Iteration   3: 1049609.448 ops/s
Iteration   4: 1047579.345 ops/s
Iteration   5: 1047998.844 ops/s
Iteration   6: 1044017.138 ops/s
Iteration   7: 1046382.091 ops/s
Iteration   8: 1047972.785 ops/s
Iteration   9: 1050071.924 ops/s
Iteration  10: 1049112.309 ops/s
Iteration  11: 1049309.361 ops/s
Iteration  12: 1043116.910 ops/s
Iteration  13: 1044578.399 ops/s
Iteration  14: 1050437.100 ops/s
Iteration  15: 1047412.600 ops/s
Iteration  16: 1047800.249 ops/s
Iteration  17: 1048333.597 ops/s
Iteration  18: 1046413.751 ops/s
Iteration  19: 1048396.666 ops/s
Iteration  20: 1048215.059 ops/s
Iteration  21: 1054197.493 ops/s
Iteration  22: 1051787.717 ops/s
Iteration  23: 1049187.956 ops/s
Iteration  24: 1049034.887 ops/s
Iteration  25: 1053481.750 ops/s
Iteration  26: 1052709.818 ops/s
Iteration  27: 1044201.888 ops/s
Iteration  28: 1045677.312 ops/s
Iteration  29: 1046772.870 ops/s
Iteration  30: 1043906.637 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_aggregateByMutating":
  1048363.854 ±(99.9%) 1939.738 ops/s [Average]
  (min, avg, max) = (1043116.910, 1048363.854, 1054197.493), stdev = 2903.308
  CI (99.9%): [1046424.116, 1050303.591] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  1048363.854 ± 1939.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 503296.175 ops/s
# Warmup Iteration   2: 1027353.840 ops/s
# Warmup Iteration   3: 1122170.928 ops/s
# Warmup Iteration   4: 1124063.994 ops/s
# Warmup Iteration   5: 937891.332 ops/s
# Warmup Iteration   6: 1121060.988 ops/s
# Warmup Iteration   7: 1126840.669 ops/s
# Warmup Iteration   8: 1119264.572 ops/s
# Warmup Iteration   9: 1125681.804 ops/s
# Warmup Iteration  10: 1126626.900 ops/s
# Warmup Iteration  11: 1128342.312 ops/s
# Warmup Iteration  12: 1129644.571 ops/s
# Warmup Iteration  13: 1130940.740 ops/s
# Warmup Iteration  14: 1126296.043 ops/s
# Warmup Iteration  15: 1124383.843 ops/s
# Warmup Iteration  16: 1127046.693 ops/s
# Warmup Iteration  17: 1130181.556 ops/s
# Warmup Iteration  18: 1128240.334 ops/s
# Warmup Iteration  19: 1128331.365 ops/s
# Warmup Iteration  20: 1124438.697 ops/s
# Warmup Iteration  21: 1127912.766 ops/s
# Warmup Iteration  22: 1128718.597 ops/s
# Warmup Iteration  23: 1131404.356 ops/s
# Warmup Iteration  24: 1127323.698 ops/s
# Warmup Iteration  25: 1126770.924 ops/s
# Warmup Iteration  26: 1128998.241 ops/s
# Warmup Iteration  27: 1126833.706 ops/s
# Warmup Iteration  28: 1129033.861 ops/s
# Warmup Iteration  29: 1130619.053 ops/s
# Warmup Iteration  30: 1123468.025 ops/s
Iteration   1: 1129632.127 ops/s
Iteration   2: 1128097.730 ops/s
Iteration   3: 1128921.407 ops/s
Iteration   4: 1128715.737 ops/s
Iteration   5: 1127379.419 ops/s
Iteration   6: 1128618.630 ops/s
Iteration   7: 1130343.272 ops/s
Iteration   8: 1124579.789 ops/s
Iteration   9: 1118621.639 ops/s
Iteration  10: 1118080.347 ops/s
Iteration  11: 1122895.607 ops/s
Iteration  12: 1123433.105 ops/s
Iteration  13: 1131564.743 ops/s
Iteration  14: 1128744.144 ops/s
Iteration  15: 1132145.108 ops/s
Iteration  16: 1120443.992 ops/s
Iteration  17: 1130540.303 ops/s
Iteration  18: 1131585.271 ops/s
Iteration  19: 1129739.873 ops/s
Iteration  20: 1125712.848 ops/s
Iteration  21: 1127092.590 ops/s
Iteration  22: 1125297.446 ops/s
Iteration  23: 1128998.198 ops/s
Iteration  24: 1132872.203 ops/s
Iteration  25: 1127910.652 ops/s
Iteration  26: 1126730.837 ops/s
Iteration  27: 1130524.145 ops/s
Iteration  28: 1123238.593 ops/s
Iteration  29: 1118296.510 ops/s
Iteration  30: 1130976.468 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_aggregateByNonMutating":
  1127057.758 ±(99.9%) 2802.515 ops/s [Average]
  (min, avg, max) = (1118080.347, 1127057.758, 1132872.203), stdev = 4194.673
  CI (99.9%): [1124255.243, 1129860.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  1127057.758 ± 2802.515  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9452654.843 ops/s
# Warmup Iteration   2: 18996854.673 ops/s
# Warmup Iteration   3: 19254524.419 ops/s
# Warmup Iteration   4: 16216649.245 ops/s
# Warmup Iteration   5: 19266992.570 ops/s
# Warmup Iteration   6: 19277232.396 ops/s
# Warmup Iteration   7: 19226614.875 ops/s
# Warmup Iteration   8: 19261656.701 ops/s
# Warmup Iteration   9: 19309019.678 ops/s
# Warmup Iteration  10: 19259817.215 ops/s
# Warmup Iteration  11: 19223705.655 ops/s
# Warmup Iteration  12: 19298637.247 ops/s
# Warmup Iteration  13: 19278734.824 ops/s
# Warmup Iteration  14: 19272429.671 ops/s
# Warmup Iteration  15: 19321412.383 ops/s
# Warmup Iteration  16: 19314692.239 ops/s
# Warmup Iteration  17: 19269503.750 ops/s
# Warmup Iteration  18: 19271231.377 ops/s
# Warmup Iteration  19: 19196228.112 ops/s
# Warmup Iteration  20: 19235003.939 ops/s
# Warmup Iteration  21: 19295531.389 ops/s
# Warmup Iteration  22: 19263420.199 ops/s
# Warmup Iteration  23: 19292352.241 ops/s
# Warmup Iteration  24: 19243298.097 ops/s
# Warmup Iteration  25: 19267265.271 ops/s
# Warmup Iteration  26: 19240224.203 ops/s
# Warmup Iteration  27: 19220232.865 ops/s
# Warmup Iteration  28: 19192140.542 ops/s
# Warmup Iteration  29: 19157579.245 ops/s
# Warmup Iteration  30: 19238798.196 ops/s
Iteration   1: 19221607.944 ops/s
Iteration   2: 19317403.259 ops/s
Iteration   3: 19285736.680 ops/s
Iteration   4: 19352868.446 ops/s
Iteration   5: 19322479.636 ops/s
Iteration   6: 19254081.065 ops/s
Iteration   7: 19253843.490 ops/s
Iteration   8: 19241132.397 ops/s
Iteration   9: 19249000.958 ops/s
Iteration  10: 19127625.418 ops/s
Iteration  11: 19273581.592 ops/s
Iteration  12: 19248399.763 ops/s
Iteration  13: 19277400.616 ops/s
Iteration  14: 19350473.719 ops/s
Iteration  15: 19281358.629 ops/s
Iteration  16: 19363858.265 ops/s
Iteration  17: 19300056.779 ops/s
Iteration  18: 19275048.438 ops/s
Iteration  19: 19334218.395 ops/s
Iteration  20: 19322769.624 ops/s
Iteration  21: 19238896.667 ops/s
Iteration  22: 19250958.728 ops/s
Iteration  23: 19314538.526 ops/s
Iteration  24: 19223958.131 ops/s
Iteration  25: 19315253.291 ops/s
Iteration  26: 19315250.346 ops/s
Iteration  27: 19308531.264 ops/s
Iteration  28: 19302081.053 ops/s
Iteration  29: 19272642.787 ops/s
Iteration  30: 19206550.935 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_allSatisfy":
  19280053.561 ±(99.9%) 33600.109 ops/s [Average]
  (min, avg, max) = (19127625.418, 19280053.561, 19363858.265), stdev = 50291.065
  CI (99.9%): [19246453.453, 19313653.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_allSatisfy  thrpt   30  19280053.561 ± 33600.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9211267.010 ops/s
# Warmup Iteration   2: 18695788.571 ops/s
# Warmup Iteration   3: 18443737.702 ops/s
# Warmup Iteration   4: 15600073.492 ops/s
# Warmup Iteration   5: 18518930.020 ops/s
# Warmup Iteration   6: 18530577.904 ops/s
# Warmup Iteration   7: 18563536.744 ops/s
# Warmup Iteration   8: 18462930.412 ops/s
# Warmup Iteration   9: 18531289.424 ops/s
# Warmup Iteration  10: 18540853.037 ops/s
# Warmup Iteration  11: 18506484.213 ops/s
# Warmup Iteration  12: 18475225.643 ops/s
# Warmup Iteration  13: 18483394.132 ops/s
# Warmup Iteration  14: 18492592.922 ops/s
# Warmup Iteration  15: 18509629.586 ops/s
# Warmup Iteration  16: 18424464.653 ops/s
# Warmup Iteration  17: 18482809.853 ops/s
# Warmup Iteration  18: 18506274.532 ops/s
# Warmup Iteration  19: 18412883.544 ops/s
# Warmup Iteration  20: 18363144.624 ops/s
# Warmup Iteration  21: 18466040.462 ops/s
# Warmup Iteration  22: 18514146.209 ops/s
# Warmup Iteration  23: 18521969.870 ops/s
# Warmup Iteration  24: 18470473.679 ops/s
# Warmup Iteration  25: 18477563.176 ops/s
# Warmup Iteration  26: 18509030.031 ops/s
# Warmup Iteration  27: 18468582.061 ops/s
# Warmup Iteration  28: 18412360.462 ops/s
# Warmup Iteration  29: 18434813.197 ops/s
# Warmup Iteration  30: 18456124.628 ops/s
Iteration   1: 18478014.802 ops/s
Iteration   2: 18520015.566 ops/s
Iteration   3: 18452205.752 ops/s
Iteration   4: 18541340.440 ops/s
Iteration   5: 18550101.132 ops/s
Iteration   6: 18521577.245 ops/s
Iteration   7: 18384787.081 ops/s
Iteration   8: 18489622.752 ops/s
Iteration   9: 18538283.276 ops/s
Iteration  10: 18419528.931 ops/s
Iteration  11: 18408214.908 ops/s
Iteration  12: 18371998.235 ops/s
Iteration  13: 18549259.428 ops/s
Iteration  14: 18478759.671 ops/s
Iteration  15: 18481620.059 ops/s
Iteration  16: 18529153.195 ops/s
Iteration  17: 18515491.762 ops/s
Iteration  18: 18420774.574 ops/s
Iteration  19: 18505316.341 ops/s
Iteration  20: 18406732.720 ops/s
Iteration  21: 18525951.983 ops/s
Iteration  22: 18503643.697 ops/s
Iteration  23: 18450938.059 ops/s
Iteration  24: 18538630.091 ops/s
Iteration  25: 18499423.802 ops/s
Iteration  26: 18563380.866 ops/s
Iteration  27: 18558103.402 ops/s
Iteration  28: 18481002.612 ops/s
Iteration  29: 18536041.310 ops/s
Iteration  30: 18489350.049 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_allSatisfyWith":
  18490308.791 ±(99.9%) 36006.620 ops/s [Average]
  (min, avg, max) = (18371998.235, 18490308.791, 18563380.866), stdev = 53893.018
  CI (99.9%): [18454302.171, 18526315.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  18490308.791 ± 36006.620  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8843431.750 ops/s
# Warmup Iteration   2: 17773381.188 ops/s
# Warmup Iteration   3: 18160437.237 ops/s
# Warmup Iteration   4: 15264788.371 ops/s
# Warmup Iteration   5: 18142059.855 ops/s
# Warmup Iteration   6: 18192587.604 ops/s
# Warmup Iteration   7: 18122388.137 ops/s
# Warmup Iteration   8: 18123167.792 ops/s
# Warmup Iteration   9: 18188843.834 ops/s
# Warmup Iteration  10: 18111415.077 ops/s
# Warmup Iteration  11: 18117980.990 ops/s
# Warmup Iteration  12: 18098818.415 ops/s
# Warmup Iteration  13: 18175717.912 ops/s
# Warmup Iteration  14: 18132214.942 ops/s
# Warmup Iteration  15: 18129300.833 ops/s
# Warmup Iteration  16: 18145659.693 ops/s
# Warmup Iteration  17: 18174202.253 ops/s
# Warmup Iteration  18: 18156354.617 ops/s
# Warmup Iteration  19: 18069957.339 ops/s
# Warmup Iteration  20: 18093545.073 ops/s
# Warmup Iteration  21: 18065519.375 ops/s
# Warmup Iteration  22: 18110142.115 ops/s
# Warmup Iteration  23: 18087449.662 ops/s
# Warmup Iteration  24: 18155433.250 ops/s
# Warmup Iteration  25: 18036614.570 ops/s
# Warmup Iteration  26: 18098641.635 ops/s
# Warmup Iteration  27: 18158771.037 ops/s
# Warmup Iteration  28: 18148525.030 ops/s
# Warmup Iteration  29: 18160556.672 ops/s
# Warmup Iteration  30: 18158138.427 ops/s
Iteration   1: 18189700.403 ops/s
Iteration   2: 18115888.430 ops/s
Iteration   3: 18100275.333 ops/s
Iteration   4: 18167786.548 ops/s
Iteration   5: 18076767.224 ops/s
Iteration   6: 18185378.521 ops/s
Iteration   7: 18129924.914 ops/s
Iteration   8: 18159173.809 ops/s
Iteration   9: 18205444.712 ops/s
Iteration  10: 18113241.250 ops/s
Iteration  11: 18150848.619 ops/s
Iteration  12: 18130239.267 ops/s
Iteration  13: 18093374.258 ops/s
Iteration  14: 18134352.930 ops/s
Iteration  15: 18145336.437 ops/s
Iteration  16: 18193601.709 ops/s
Iteration  17: 18151890.259 ops/s
Iteration  18: 18156822.780 ops/s
Iteration  19: 18184257.957 ops/s
Iteration  20: 18129491.514 ops/s
Iteration  21: 18162324.735 ops/s
Iteration  22: 18048148.570 ops/s
Iteration  23: 18187760.498 ops/s
Iteration  24: 18166660.119 ops/s
Iteration  25: 18158029.104 ops/s
Iteration  26: 18164346.558 ops/s
Iteration  27: 18158922.083 ops/s
Iteration  28: 18180490.634 ops/s
Iteration  29: 18173962.485 ops/s
Iteration  30: 18110951.985 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_anySatisfy":
  18147513.122 ±(99.9%) 24778.173 ops/s [Average]
  (min, avg, max) = (18048148.570, 18147513.122, 18205444.712), stdev = 37086.806
  CI (99.9%): [18122734.948, 18172291.295] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_anySatisfy  thrpt   30  18147513.122 ± 24778.173  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7950225.041 ops/s
# Warmup Iteration   2: 11840690.292 ops/s
# Warmup Iteration   3: 12950353.621 ops/s
# Warmup Iteration   4: 13019735.762 ops/s
# Warmup Iteration   5: 13002702.666 ops/s
# Warmup Iteration   6: 12951322.136 ops/s
# Warmup Iteration   7: 11057660.342 ops/s
# Warmup Iteration   8: 12993698.680 ops/s
# Warmup Iteration   9: 12992064.077 ops/s
# Warmup Iteration  10: 13028078.788 ops/s
# Warmup Iteration  11: 13041813.417 ops/s
# Warmup Iteration  12: 13041022.164 ops/s
# Warmup Iteration  13: 13007760.722 ops/s
# Warmup Iteration  14: 13001295.745 ops/s
# Warmup Iteration  15: 12961125.440 ops/s
# Warmup Iteration  16: 12998703.931 ops/s
# Warmup Iteration  17: 13058711.992 ops/s
# Warmup Iteration  18: 13018529.919 ops/s
# Warmup Iteration  19: 13056167.955 ops/s
# Warmup Iteration  20: 13033908.688 ops/s
# Warmup Iteration  21: 13045456.176 ops/s
# Warmup Iteration  22: 13024757.793 ops/s
# Warmup Iteration  23: 12993955.601 ops/s
# Warmup Iteration  24: 13044934.536 ops/s
# Warmup Iteration  25: 13003112.990 ops/s
# Warmup Iteration  26: 13035069.554 ops/s
# Warmup Iteration  27: 13042460.652 ops/s
# Warmup Iteration  28: 13055544.518 ops/s
# Warmup Iteration  29: 13061764.852 ops/s
# Warmup Iteration  30: 13022092.696 ops/s
Iteration   1: 12936690.915 ops/s
Iteration   2: 12912343.121 ops/s
Iteration   3: 13051673.353 ops/s
Iteration   4: 12964349.690 ops/s
Iteration   5: 13060436.707 ops/s
Iteration   6: 12995154.406 ops/s
Iteration   7: 12998614.619 ops/s
Iteration   8: 12981899.278 ops/s
Iteration   9: 13030216.127 ops/s
Iteration  10: 12991842.309 ops/s
Iteration  11: 13060624.035 ops/s
Iteration  12: 13008826.413 ops/s
Iteration  13: 13072517.034 ops/s
Iteration  14: 13009924.053 ops/s
Iteration  15: 13054947.758 ops/s
Iteration  16: 12950998.281 ops/s
Iteration  17: 13049439.956 ops/s
Iteration  18: 13080399.788 ops/s
Iteration  19: 13060458.201 ops/s
Iteration  20: 13059600.954 ops/s
Iteration  21: 13017644.651 ops/s
Iteration  22: 13081810.189 ops/s
Iteration  23: 12985143.209 ops/s
Iteration  24: 13068928.193 ops/s
Iteration  25: 13013901.256 ops/s
Iteration  26: 12983453.273 ops/s
Iteration  27: 12957411.134 ops/s
Iteration  28: 13077796.556 ops/s
Iteration  29: 13003642.742 ops/s
Iteration  30: 13055549.786 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_anySatisfyWith":
  13019207.933 ±(99.9%) 31289.267 ops/s [Average]
  (min, avg, max) = (12912343.121, 13019207.933, 13081810.189), stdev = 46832.305
  CI (99.9%): [12987918.666, 13050497.200] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  13019207.933 ± 31289.267  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 291335.097 ops/s
# Warmup Iteration   2: 701975.772 ops/s
# Warmup Iteration   3: 698975.056 ops/s
# Warmup Iteration   4: 590887.680 ops/s
# Warmup Iteration   5: 706064.636 ops/s
# Warmup Iteration   6: 707646.325 ops/s
# Warmup Iteration   7: 705221.439 ops/s
# Warmup Iteration   8: 706259.542 ops/s
# Warmup Iteration   9: 707037.824 ops/s
# Warmup Iteration  10: 705708.406 ops/s
# Warmup Iteration  11: 707233.830 ops/s
# Warmup Iteration  12: 704435.009 ops/s
# Warmup Iteration  13: 706195.586 ops/s
# Warmup Iteration  14: 706300.198 ops/s
# Warmup Iteration  15: 704340.371 ops/s
# Warmup Iteration  16: 701866.500 ops/s
# Warmup Iteration  17: 699797.937 ops/s
# Warmup Iteration  18: 701954.092 ops/s
# Warmup Iteration  19: 706212.160 ops/s
# Warmup Iteration  20: 704992.903 ops/s
# Warmup Iteration  21: 707225.712 ops/s
# Warmup Iteration  22: 706204.435 ops/s
# Warmup Iteration  23: 707453.773 ops/s
# Warmup Iteration  24: 705961.658 ops/s
# Warmup Iteration  25: 706437.878 ops/s
# Warmup Iteration  26: 706318.670 ops/s
# Warmup Iteration  27: 704015.127 ops/s
# Warmup Iteration  28: 705647.187 ops/s
# Warmup Iteration  29: 706019.739 ops/s
# Warmup Iteration  30: 706166.944 ops/s
Iteration   1: 701165.968 ops/s
Iteration   2: 705908.474 ops/s
Iteration   3: 703993.206 ops/s
Iteration   4: 703918.901 ops/s
Iteration   5: 708306.614 ops/s
Iteration   6: 705290.189 ops/s
Iteration   7: 705699.763 ops/s
Iteration   8: 708143.593 ops/s
Iteration   9: 706223.646 ops/s
Iteration  10: 707715.471 ops/s
Iteration  11: 704417.813 ops/s
Iteration  12: 704842.955 ops/s
Iteration  13: 703607.616 ops/s
Iteration  14: 699409.056 ops/s
Iteration  15: 704240.112 ops/s
Iteration  16: 706341.014 ops/s
Iteration  17: 707315.427 ops/s
Iteration  18: 707568.714 ops/s
Iteration  19: 707536.905 ops/s
Iteration  20: 706852.322 ops/s
Iteration  21: 705891.344 ops/s
Iteration  22: 705807.475 ops/s
Iteration  23: 699019.170 ops/s
Iteration  24: 708412.674 ops/s
Iteration  25: 707646.913 ops/s
Iteration  26: 707907.809 ops/s
Iteration  27: 706655.928 ops/s
Iteration  28: 706647.609 ops/s
Iteration  29: 706407.014 ops/s
Iteration  30: 706420.452 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_appendString":
  705643.805 ±(99.9%) 1603.643 ops/s [Average]
  (min, avg, max) = (699019.170, 705643.805, 708412.674), stdev = 2400.257
  CI (99.9%): [704040.162, 707247.448] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_appendString  thrpt   30  705643.805 ± 1603.643  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2762355.022 ops/s
# Warmup Iteration   2: 6300379.299 ops/s
# Warmup Iteration   3: 6317485.808 ops/s
# Warmup Iteration   4: 5304466.350 ops/s
# Warmup Iteration   5: 6334179.599 ops/s
# Warmup Iteration   6: 6323893.917 ops/s
# Warmup Iteration   7: 6331134.926 ops/s
# Warmup Iteration   8: 6333933.982 ops/s
# Warmup Iteration   9: 6314403.892 ops/s
# Warmup Iteration  10: 6298397.751 ops/s
# Warmup Iteration  11: 6283180.671 ops/s
# Warmup Iteration  12: 6262160.671 ops/s
# Warmup Iteration  13: 6242826.321 ops/s
# Warmup Iteration  14: 6299340.703 ops/s
# Warmup Iteration  15: 6337130.227 ops/s
# Warmup Iteration  16: 6305435.333 ops/s
# Warmup Iteration  17: 6321394.444 ops/s
# Warmup Iteration  18: 6319083.305 ops/s
# Warmup Iteration  19: 6335658.534 ops/s
# Warmup Iteration  20: 6332665.476 ops/s
# Warmup Iteration  21: 6312439.647 ops/s
# Warmup Iteration  22: 6318624.774 ops/s
# Warmup Iteration  23: 6336063.657 ops/s
# Warmup Iteration  24: 6327631.185 ops/s
# Warmup Iteration  25: 6312771.774 ops/s
# Warmup Iteration  26: 6294817.483 ops/s
# Warmup Iteration  27: 6341911.609 ops/s
# Warmup Iteration  28: 6329446.283 ops/s
# Warmup Iteration  29: 6286429.686 ops/s
# Warmup Iteration  30: 6327300.648 ops/s
Iteration   1: 6346918.701 ops/s
Iteration   2: 6339060.903 ops/s
Iteration   3: 6345963.422 ops/s
Iteration   4: 6309172.618 ops/s
Iteration   5: 6332539.838 ops/s
Iteration   6: 6320500.719 ops/s
Iteration   7: 6318965.247 ops/s
Iteration   8: 6332443.212 ops/s
Iteration   9: 6325303.082 ops/s
Iteration  10: 6326010.977 ops/s
Iteration  11: 6326871.615 ops/s
Iteration  12: 6332144.202 ops/s
Iteration  13: 6319974.488 ops/s
Iteration  14: 6329539.948 ops/s
Iteration  15: 6313509.329 ops/s
Iteration  16: 6322132.973 ops/s
Iteration  17: 6326381.508 ops/s
Iteration  18: 6326135.211 ops/s
Iteration  19: 6311276.227 ops/s
Iteration  20: 6340555.802 ops/s
Iteration  21: 6315948.973 ops/s
Iteration  22: 6261248.574 ops/s
Iteration  23: 6137089.249 ops/s
Iteration  24: 6309103.959 ops/s
Iteration  25: 6323417.528 ops/s
Iteration  26: 6336572.164 ops/s
Iteration  27: 6311201.148 ops/s
Iteration  28: 6286309.545 ops/s
Iteration  29: 6320380.283 ops/s
Iteration  30: 6342154.699 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_asReversed":
  6316294.205 ±(99.9%) 25361.388 ops/s [Average]
  (min, avg, max) = (6137089.249, 6316294.205, 6346918.701), stdev = 37959.734
  CI (99.9%): [6290932.817, 6341655.593] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_asReversed  thrpt   30  6316294.205 ± 25361.388  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 630190.575 ops/s
# Warmup Iteration   2: 715388.240 ops/s
# Warmup Iteration   3: 889606.869 ops/s
# Warmup Iteration   4: 898016.229 ops/s
# Warmup Iteration   5: 888307.168 ops/s
# Warmup Iteration   6: 894096.378 ops/s
# Warmup Iteration   7: 893955.624 ops/s
# Warmup Iteration   8: 894803.864 ops/s
# Warmup Iteration   9: 894427.133 ops/s
# Warmup Iteration  10: 753465.508 ops/s
# Warmup Iteration  11: 889036.136 ops/s
# Warmup Iteration  12: 896059.212 ops/s
# Warmup Iteration  13: 894487.080 ops/s
# Warmup Iteration  14: 894894.702 ops/s
# Warmup Iteration  15: 895604.119 ops/s
# Warmup Iteration  16: 892745.567 ops/s
# Warmup Iteration  17: 943754.331 ops/s
# Warmup Iteration  18: 940372.750 ops/s
# Warmup Iteration  19: 940500.638 ops/s
# Warmup Iteration  20: 942745.132 ops/s
# Warmup Iteration  21: 939665.100 ops/s
# Warmup Iteration  22: 946842.827 ops/s
# Warmup Iteration  23: 945502.853 ops/s
# Warmup Iteration  24: 943720.482 ops/s
# Warmup Iteration  25: 946244.660 ops/s
# Warmup Iteration  26: 943204.449 ops/s
# Warmup Iteration  27: 943706.728 ops/s
# Warmup Iteration  28: 943398.675 ops/s
# Warmup Iteration  29: 941126.726 ops/s
# Warmup Iteration  30: 945980.812 ops/s
Iteration   1: 941177.981 ops/s
Iteration   2: 943183.425 ops/s
Iteration   3: 938708.078 ops/s
Iteration   4: 940671.478 ops/s
Iteration   5: 942353.224 ops/s
Iteration   6: 940799.308 ops/s
Iteration   7: 938608.206 ops/s
Iteration   8: 937284.652 ops/s
Iteration   9: 937174.361 ops/s
Iteration  10: 934415.267 ops/s
Iteration  11: 941838.716 ops/s
Iteration  12: 939693.887 ops/s
Iteration  13: 940262.340 ops/s
Iteration  14: 938918.100 ops/s
Iteration  15: 931395.550 ops/s
Iteration  16: 944079.986 ops/s
Iteration  17: 943111.028 ops/s
Iteration  18: 939330.638 ops/s
Iteration  19: 938990.144 ops/s
Iteration  20: 942771.777 ops/s
Iteration  21: 942189.264 ops/s
Iteration  22: 941047.915 ops/s
Iteration  23: 939890.955 ops/s
Iteration  24: 940673.820 ops/s
Iteration  25: 939559.835 ops/s
Iteration  26: 941633.537 ops/s
Iteration  27: 939421.371 ops/s
Iteration  28: 937959.606 ops/s
Iteration  29: 940133.645 ops/s
Iteration  30: 940881.050 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_castToCollection":
  939938.638 ±(99.9%) 1741.015 ops/s [Average]
  (min, avg, max) = (931395.550, 939938.638, 944079.986), stdev = 2605.870
  CI (99.9%): [938197.623, 941679.653] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_castToCollection  thrpt   30  939938.638 ± 1741.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3922599.091 ops/s
# Warmup Iteration   2: 8490461.970 ops/s
# Warmup Iteration   3: 8527806.920 ops/s
# Warmup Iteration   4: 7172789.956 ops/s
# Warmup Iteration   5: 8535347.334 ops/s
# Warmup Iteration   6: 8516958.631 ops/s
# Warmup Iteration   7: 8529685.720 ops/s
# Warmup Iteration   8: 8543931.341 ops/s
# Warmup Iteration   9: 8539500.926 ops/s
# Warmup Iteration  10: 8519008.439 ops/s
# Warmup Iteration  11: 8520727.589 ops/s
# Warmup Iteration  12: 8521741.403 ops/s
# Warmup Iteration  13: 8504369.320 ops/s
# Warmup Iteration  14: 8504380.428 ops/s
# Warmup Iteration  15: 8523163.506 ops/s
# Warmup Iteration  16: 8510681.167 ops/s
# Warmup Iteration  17: 8482086.716 ops/s
# Warmup Iteration  18: 8483810.021 ops/s
# Warmup Iteration  19: 8521351.683 ops/s
# Warmup Iteration  20: 8528506.853 ops/s
# Warmup Iteration  21: 8485727.336 ops/s
# Warmup Iteration  22: 8529716.500 ops/s
# Warmup Iteration  23: 8542812.811 ops/s
# Warmup Iteration  24: 8523173.239 ops/s
# Warmup Iteration  25: 8512086.877 ops/s
# Warmup Iteration  26: 8530443.744 ops/s
# Warmup Iteration  27: 8537896.007 ops/s
# Warmup Iteration  28: 8535745.817 ops/s
# Warmup Iteration  29: 8527278.231 ops/s
# Warmup Iteration  30: 8542425.569 ops/s
Iteration   1: 8546424.655 ops/s
Iteration   2: 8503684.313 ops/s
Iteration   3: 8528278.377 ops/s
Iteration   4: 8510584.423 ops/s
Iteration   5: 8528948.456 ops/s
Iteration   6: 8541948.407 ops/s
Iteration   7: 8541906.609 ops/s
Iteration   8: 8513930.533 ops/s
Iteration   9: 8559428.167 ops/s
Iteration  10: 8505759.894 ops/s
Iteration  11: 8514914.673 ops/s
Iteration  12: 8493475.235 ops/s
Iteration  13: 8534937.836 ops/s
Iteration  14: 8549656.829 ops/s
Iteration  15: 8509952.450 ops/s
Iteration  16: 8501524.412 ops/s
Iteration  17: 8505247.046 ops/s
Iteration  18: 8517827.236 ops/s
Iteration  19: 8468173.345 ops/s
Iteration  20: 8507510.999 ops/s
Iteration  21: 8531393.787 ops/s
Iteration  22: 8530606.666 ops/s
Iteration  23: 8469927.978 ops/s
Iteration  24: 8536690.030 ops/s
Iteration  25: 8530155.534 ops/s
Iteration  26: 8525864.285 ops/s
Iteration  27: 8531908.099 ops/s
Iteration  28: 8533729.817 ops/s
Iteration  29: 8533395.230 ops/s
Iteration  30: 8469586.060 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_chunk_large_size":
  8519245.713 ±(99.9%) 15444.102 ops/s [Average]
  (min, avg, max) = (8468173.345, 8519245.713, 8559428.167), stdev = 23116.006
  CI (99.9%): [8503801.611, 8534689.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  8519245.713 ± 15444.102  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 783665.439 ops/s
# Warmup Iteration   2: 834238.019 ops/s
# Warmup Iteration   3: 1041087.920 ops/s
# Warmup Iteration   4: 1040883.189 ops/s
# Warmup Iteration   5: 1034458.286 ops/s
# Warmup Iteration   6: 1041219.662 ops/s
# Warmup Iteration   7: 1032563.736 ops/s
# Warmup Iteration   8: 1033911.061 ops/s
# Warmup Iteration   9: 1033639.462 ops/s
# Warmup Iteration  10: 1037065.344 ops/s
# Warmup Iteration  11: 898456.837 ops/s
# Warmup Iteration  12: 972656.424 ops/s
# Warmup Iteration  13: 1030813.101 ops/s
# Warmup Iteration  14: 1034334.926 ops/s
# Warmup Iteration  15: 1033756.688 ops/s
# Warmup Iteration  16: 1034263.106 ops/s
# Warmup Iteration  17: 1111431.611 ops/s
# Warmup Iteration  18: 1108158.617 ops/s
# Warmup Iteration  19: 1113295.265 ops/s
# Warmup Iteration  20: 1094498.994 ops/s
# Warmup Iteration  21: 1106143.848 ops/s
# Warmup Iteration  22: 1112104.656 ops/s
# Warmup Iteration  23: 1108826.613 ops/s
# Warmup Iteration  24: 1111863.448 ops/s
# Warmup Iteration  25: 1108862.936 ops/s
# Warmup Iteration  26: 1112810.545 ops/s
# Warmup Iteration  27: 1110328.198 ops/s
# Warmup Iteration  28: 1109147.525 ops/s
# Warmup Iteration  29: 1104094.979 ops/s
# Warmup Iteration  30: 1098995.331 ops/s
Iteration   1: 1113182.411 ops/s
Iteration   2: 1109333.346 ops/s
Iteration   3: 1107488.018 ops/s
Iteration   4: 1112490.690 ops/s
Iteration   5: 1097969.509 ops/s
Iteration   6: 1106327.678 ops/s
Iteration   7: 1106338.167 ops/s
Iteration   8: 1107506.112 ops/s
Iteration   9: 1108099.392 ops/s
Iteration  10: 1110130.178 ops/s
Iteration  11: 1105363.426 ops/s
Iteration  12: 1115787.146 ops/s
Iteration  13: 1115739.450 ops/s
Iteration  14: 1113850.899 ops/s
Iteration  15: 1098883.035 ops/s
Iteration  16: 1115385.818 ops/s
Iteration  17: 1110327.504 ops/s
Iteration  18: 1115324.058 ops/s
Iteration  19: 1105548.440 ops/s
Iteration  20: 1108217.691 ops/s
Iteration  21: 1104629.010 ops/s
Iteration  22: 1100711.942 ops/s
Iteration  23: 1105643.897 ops/s
Iteration  24: 1109010.010 ops/s
Iteration  25: 1100738.798 ops/s
Iteration  26: 1106903.676 ops/s
Iteration  27: 1114609.265 ops/s
Iteration  28: 1109665.866 ops/s
Iteration  29: 1104829.993 ops/s
Iteration  30: 1108113.818 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_chunk_zero_throws":
  1108271.641 ±(99.9%) 3291.400 ops/s [Average]
  (min, avg, max) = (1097969.509, 1108271.641, 1115787.146), stdev = 4926.413
  CI (99.9%): [1104980.241, 1111563.042] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1108271.641 ± 3291.400  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748433.057 ops/s
# Warmup Iteration   2: 783610.664 ops/s
# Warmup Iteration   3: 974387.381 ops/s
# Warmup Iteration   4: 974666.690 ops/s
# Warmup Iteration   5: 966645.236 ops/s
# Warmup Iteration   6: 975507.831 ops/s
# Warmup Iteration   7: 977676.285 ops/s
# Warmup Iteration   8: 976550.585 ops/s
# Warmup Iteration   9: 972286.196 ops/s
# Warmup Iteration  10: 972816.437 ops/s
# Warmup Iteration  11: 976345.418 ops/s
# Warmup Iteration  12: 834312.899 ops/s
# Warmup Iteration  13: 974238.361 ops/s
# Warmup Iteration  14: 968690.444 ops/s
# Warmup Iteration  15: 972649.065 ops/s
# Warmup Iteration  16: 968848.122 ops/s
# Warmup Iteration  17: 1030850.210 ops/s
# Warmup Iteration  18: 1024920.774 ops/s
# Warmup Iteration  19: 1030915.974 ops/s
# Warmup Iteration  20: 1028382.954 ops/s
# Warmup Iteration  21: 1030057.617 ops/s
# Warmup Iteration  22: 1028758.060 ops/s
# Warmup Iteration  23: 1033862.702 ops/s
# Warmup Iteration  24: 1032080.397 ops/s
# Warmup Iteration  25: 1036748.304 ops/s
# Warmup Iteration  26: 1032848.710 ops/s
# Warmup Iteration  27: 1031959.319 ops/s
# Warmup Iteration  28: 1030254.852 ops/s
# Warmup Iteration  29: 1034962.314 ops/s
# Warmup Iteration  30: 1035206.594 ops/s
Iteration   1: 1034013.550 ops/s
Iteration   2: 1035680.902 ops/s
Iteration   3: 1029088.275 ops/s
Iteration   4: 1036596.308 ops/s
Iteration   5: 1036704.073 ops/s
Iteration   6: 1032358.457 ops/s
Iteration   7: 1026046.107 ops/s
Iteration   8: 1031153.820 ops/s
Iteration   9: 1029400.914 ops/s
Iteration  10: 1023545.525 ops/s
Iteration  11: 1029481.942 ops/s
Iteration  12: 1032191.149 ops/s
Iteration  13: 1023112.396 ops/s
Iteration  14: 1029647.337 ops/s
Iteration  15: 1029446.241 ops/s
Iteration  16: 1035469.416 ops/s
Iteration  17: 1033135.446 ops/s
Iteration  18: 1033978.238 ops/s
Iteration  19: 1031270.176 ops/s
Iteration  20: 1033199.444 ops/s
Iteration  21: 1031594.218 ops/s
Iteration  22: 1033864.557 ops/s
Iteration  23: 1029483.288 ops/s
Iteration  24: 1032640.103 ops/s
Iteration  25: 1030892.925 ops/s
Iteration  26: 1030392.429 ops/s
Iteration  27: 1032505.877 ops/s
Iteration  28: 1034469.211 ops/s
Iteration  29: 1034243.117 ops/s
Iteration  30: 1031775.917 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_clear":
  1031579.379 ±(99.9%) 2222.187 ops/s [Average]
  (min, avg, max) = (1023112.396, 1031579.379, 1036704.073), stdev = 3326.065
  CI (99.9%): [1029357.192, 1033801.566] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_clear  thrpt   30  1031579.379 ± 2222.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6751954.077 ops/s
# Warmup Iteration   2: 12263234.857 ops/s
# Warmup Iteration   3: 13054236.273 ops/s
# Warmup Iteration   4: 13138630.071 ops/s
# Warmup Iteration   5: 11351912.620 ops/s
# Warmup Iteration   6: 12579884.695 ops/s
# Warmup Iteration   7: 13107374.798 ops/s
# Warmup Iteration   8: 13088986.322 ops/s
# Warmup Iteration   9: 13131481.681 ops/s
# Warmup Iteration  10: 13125441.025 ops/s
# Warmup Iteration  11: 13123574.937 ops/s
# Warmup Iteration  12: 13110411.543 ops/s
# Warmup Iteration  13: 13106403.478 ops/s
# Warmup Iteration  14: 13098618.650 ops/s
# Warmup Iteration  15: 13132020.512 ops/s
# Warmup Iteration  16: 13064851.039 ops/s
# Warmup Iteration  17: 13127385.495 ops/s
# Warmup Iteration  18: 13113666.259 ops/s
# Warmup Iteration  19: 13103070.702 ops/s
# Warmup Iteration  20: 13125751.483 ops/s
# Warmup Iteration  21: 13135626.732 ops/s
# Warmup Iteration  22: 13099710.664 ops/s
# Warmup Iteration  23: 13127775.620 ops/s
# Warmup Iteration  24: 13080063.203 ops/s
# Warmup Iteration  25: 13127662.481 ops/s
# Warmup Iteration  26: 13106338.200 ops/s
# Warmup Iteration  27: 13135342.433 ops/s
# Warmup Iteration  28: 13136910.838 ops/s
# Warmup Iteration  29: 13114791.323 ops/s
# Warmup Iteration  30: 13099783.869 ops/s
Iteration   1: 13097679.748 ops/s
Iteration   2: 13092946.475 ops/s
Iteration   3: 13093053.939 ops/s
Iteration   4: 13145019.105 ops/s
Iteration   5: 13126844.053 ops/s
Iteration   6: 13135777.001 ops/s
Iteration   7: 13134325.710 ops/s
Iteration   8: 13114645.027 ops/s
Iteration   9: 13159130.550 ops/s
Iteration  10: 13129008.665 ops/s
Iteration  11: 13124957.075 ops/s
Iteration  12: 13116381.169 ops/s
Iteration  13: 13118050.546 ops/s
Iteration  14: 13117501.092 ops/s
Iteration  15: 13062252.601 ops/s
Iteration  16: 13040253.221 ops/s
Iteration  17: 13119346.432 ops/s
Iteration  18: 13114763.874 ops/s
Iteration  19: 13099421.427 ops/s
Iteration  20: 13116205.741 ops/s
Iteration  21: 13128430.633 ops/s
Iteration  22: 13122867.602 ops/s
Iteration  23: 13108500.312 ops/s
Iteration  24: 13077316.794 ops/s
Iteration  25: 13131594.291 ops/s
Iteration  26: 13109696.670 ops/s
Iteration  27: 13138382.439 ops/s
Iteration  28: 13105951.909 ops/s
Iteration  29: 13074944.813 ops/s
Iteration  30: 13141425.672 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collect":
  13113222.486 ±(99.9%) 17034.563 ops/s [Average]
  (min, avg, max) = (13040253.221, 13113222.486, 13159130.550), stdev = 25496.533
  CI (99.9%): [13096187.924, 13130257.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collect  thrpt   30  13113222.486 ± 17034.563  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7415350.018 ops/s
# Warmup Iteration   2: 6908955.147 ops/s
# Warmup Iteration   3: 6951801.256 ops/s
# Warmup Iteration   4: 5683035.757 ops/s
# Warmup Iteration   5: 6956136.673 ops/s
# Warmup Iteration   6: 6950922.682 ops/s
# Warmup Iteration   7: 6929083.855 ops/s
# Warmup Iteration   8: 6937221.757 ops/s
# Warmup Iteration   9: 6952216.861 ops/s
# Warmup Iteration  10: 6940637.988 ops/s
# Warmup Iteration  11: 6952052.162 ops/s
# Warmup Iteration  12: 6954859.568 ops/s
# Warmup Iteration  13: 6947162.455 ops/s
# Warmup Iteration  14: 6937304.229 ops/s
# Warmup Iteration  15: 6952069.652 ops/s
# Warmup Iteration  16: 6970876.284 ops/s
# Warmup Iteration  17: 6953168.830 ops/s
# Warmup Iteration  18: 6973631.487 ops/s
# Warmup Iteration  19: 6959649.781 ops/s
# Warmup Iteration  20: 6965746.506 ops/s
# Warmup Iteration  21: 6964824.972 ops/s
# Warmup Iteration  22: 6954104.546 ops/s
# Warmup Iteration  23: 6949170.175 ops/s
# Warmup Iteration  24: 6941173.373 ops/s
# Warmup Iteration  25: 6943790.495 ops/s
# Warmup Iteration  26: 6949371.901 ops/s
# Warmup Iteration  27: 6972490.945 ops/s
# Warmup Iteration  28: 6950556.930 ops/s
# Warmup Iteration  29: 6966788.061 ops/s
# Warmup Iteration  30: 6974638.913 ops/s
Iteration   1: 6964868.433 ops/s
Iteration   2: 6956331.707 ops/s
Iteration   3: 6982135.218 ops/s
Iteration   4: 6974229.855 ops/s
Iteration   5: 6964130.542 ops/s
Iteration   6: 6962464.359 ops/s
Iteration   7: 6959774.874 ops/s
Iteration   8: 6980479.773 ops/s
Iteration   9: 6937028.741 ops/s
Iteration  10: 6970208.022 ops/s
Iteration  11: 6981077.764 ops/s
Iteration  12: 6949480.311 ops/s
Iteration  13: 6975066.784 ops/s
Iteration  14: 6953984.375 ops/s
Iteration  15: 6955155.000 ops/s
Iteration  16: 6966185.250 ops/s
Iteration  17: 6953847.411 ops/s
Iteration  18: 6978672.459 ops/s
Iteration  19: 6963411.098 ops/s
Iteration  20: 6957880.477 ops/s
Iteration  21: 6956840.302 ops/s
Iteration  22: 6981710.468 ops/s
Iteration  23: 6960052.556 ops/s
Iteration  24: 6957236.036 ops/s
Iteration  25: 6980211.673 ops/s
Iteration  26: 6976549.088 ops/s
Iteration  27: 6957425.226 ops/s
Iteration  28: 6962481.830 ops/s
Iteration  29: 6960045.299 ops/s
Iteration  30: 6950869.171 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectBoolean":
  6964327.803 ±(99.9%) 7640.085 ops/s [Average]
  (min, avg, max) = (6937028.741, 6964327.803, 6982135.218), stdev = 11435.321
  CI (99.9%): [6956687.718, 6971967.889] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collectBoolean  thrpt   30  6964327.803 ± 7640.085  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2733122.700 ops/s
# Warmup Iteration   2: 4973582.795 ops/s
# Warmup Iteration   3: 5732674.243 ops/s
# Warmup Iteration   4: 5765427.121 ops/s
# Warmup Iteration   5: 5773195.668 ops/s
# Warmup Iteration   6: 4719491.332 ops/s
# Warmup Iteration   7: 5779049.363 ops/s
# Warmup Iteration   8: 5788072.513 ops/s
# Warmup Iteration   9: 5777524.510 ops/s
# Warmup Iteration  10: 5786397.234 ops/s
# Warmup Iteration  11: 5777494.705 ops/s
# Warmup Iteration  12: 5776079.002 ops/s
# Warmup Iteration  13: 5780572.821 ops/s
# Warmup Iteration  14: 5782156.822 ops/s
# Warmup Iteration  15: 5774999.642 ops/s
# Warmup Iteration  16: 5787483.091 ops/s
# Warmup Iteration  17: 5784417.906 ops/s
# Warmup Iteration  18: 5780094.216 ops/s
# Warmup Iteration  19: 5784825.875 ops/s
# Warmup Iteration  20: 5788901.524 ops/s
# Warmup Iteration  21: 5764599.014 ops/s
# Warmup Iteration  22: 5752136.779 ops/s
# Warmup Iteration  23: 5730266.151 ops/s
# Warmup Iteration  24: 5724027.325 ops/s
# Warmup Iteration  25: 5771546.268 ops/s
# Warmup Iteration  26: 5790486.984 ops/s
# Warmup Iteration  27: 5779039.477 ops/s
# Warmup Iteration  28: 5783089.864 ops/s
# Warmup Iteration  29: 5778443.199 ops/s
# Warmup Iteration  30: 5784034.648 ops/s
Iteration   1: 5800938.825 ops/s
Iteration   2: 5784738.988 ops/s
Iteration   3: 5782936.843 ops/s
Iteration   4: 5759401.807 ops/s
Iteration   5: 5777114.592 ops/s
Iteration   6: 5780323.218 ops/s
Iteration   7: 5759661.572 ops/s
Iteration   8: 5765133.034 ops/s
Iteration   9: 5776627.876 ops/s
Iteration  10: 5763749.463 ops/s
Iteration  11: 5778261.859 ops/s
Iteration  12: 5785732.749 ops/s
Iteration  13: 5757749.979 ops/s
Iteration  14: 5797307.123 ops/s
Iteration  15: 5789441.599 ops/s
Iteration  16: 5799875.385 ops/s
Iteration  17: 5787499.426 ops/s
Iteration  18: 5772607.282 ops/s
Iteration  19: 5795171.644 ops/s
Iteration  20: 5783048.262 ops/s
Iteration  21: 5782668.097 ops/s
Iteration  22: 5777342.883 ops/s
Iteration  23: 5729192.248 ops/s
Iteration  24: 5773442.231 ops/s
Iteration  25: 5782849.295 ops/s
Iteration  26: 5768552.088 ops/s
Iteration  27: 5790745.234 ops/s
Iteration  28: 5783741.203 ops/s
Iteration  29: 5769631.373 ops/s
Iteration  30: 5775115.570 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectByte":
  5777686.725 ±(99.9%) 9890.636 ops/s [Average]
  (min, avg, max) = (5729192.248, 5777686.725, 5800938.825), stdev = 14803.840
  CI (99.9%): [5767796.088, 5787577.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collectByte  thrpt   30  5777686.725 ± 9890.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2818165.845 ops/s
# Warmup Iteration   2: 5602610.399 ops/s
# Warmup Iteration   3: 6049626.700 ops/s
# Warmup Iteration   4: 6099148.948 ops/s
# Warmup Iteration   5: 5031432.790 ops/s
# Warmup Iteration   6: 6015558.735 ops/s
# Warmup Iteration   7: 6084038.414 ops/s
# Warmup Iteration   8: 6034959.889 ops/s
# Warmup Iteration   9: 6020828.169 ops/s
# Warmup Iteration  10: 6043994.268 ops/s
# Warmup Iteration  11: 6103925.190 ops/s
# Warmup Iteration  12: 6094032.107 ops/s
# Warmup Iteration  13: 6088648.665 ops/s
# Warmup Iteration  14: 6085904.481 ops/s
# Warmup Iteration  15: 6078813.469 ops/s
# Warmup Iteration  16: 6082964.066 ops/s
# Warmup Iteration  17: 6102872.668 ops/s
# Warmup Iteration  18: 6077635.056 ops/s
# Warmup Iteration  19: 6074042.126 ops/s
# Warmup Iteration  20: 6093834.908 ops/s
# Warmup Iteration  21: 6093928.297 ops/s
# Warmup Iteration  22: 6080565.267 ops/s
# Warmup Iteration  23: 6091517.821 ops/s
# Warmup Iteration  24: 6099797.528 ops/s
# Warmup Iteration  25: 6047855.891 ops/s
# Warmup Iteration  26: 6095435.758 ops/s
# Warmup Iteration  27: 6105304.007 ops/s
# Warmup Iteration  28: 6097015.255 ops/s
# Warmup Iteration  29: 6055688.312 ops/s
# Warmup Iteration  30: 6087408.206 ops/s
Iteration   1: 6098306.618 ops/s
Iteration   2: 6098018.412 ops/s
Iteration   3: 6094783.233 ops/s
Iteration   4: 6095719.367 ops/s
Iteration   5: 6023966.110 ops/s
Iteration   6: 6100812.687 ops/s
Iteration   7: 6104944.987 ops/s
Iteration   8: 6087766.877 ops/s
Iteration   9: 6101944.882 ops/s
Iteration  10: 6099031.807 ops/s
Iteration  11: 6086461.213 ops/s
Iteration  12: 6091581.352 ops/s
Iteration  13: 6087538.894 ops/s
Iteration  14: 6094867.864 ops/s
Iteration  15: 6087553.244 ops/s
Iteration  16: 6100438.768 ops/s
Iteration  17: 6097655.447 ops/s
Iteration  18: 6083775.136 ops/s
Iteration  19: 6107697.696 ops/s
Iteration  20: 6086202.930 ops/s
Iteration  21: 6104964.635 ops/s
Iteration  22: 6082197.678 ops/s
Iteration  23: 6097607.955 ops/s
Iteration  24: 6101926.816 ops/s
Iteration  25: 6080501.532 ops/s
Iteration  26: 6097978.619 ops/s
Iteration  27: 6091227.762 ops/s
Iteration  28: 6100482.060 ops/s
Iteration  29: 6086959.900 ops/s
Iteration  30: 6123264.673 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectChar":
  6093205.972 ±(99.9%) 10571.963 ops/s [Average]
  (min, avg, max) = (6023966.110, 6093205.972, 6123264.673), stdev = 15823.618
  CI (99.9%): [6082634.009, 6103777.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collectChar  thrpt   30  6093205.972 ± 10571.963  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2520737.319 ops/s
# Warmup Iteration   2: 5772889.851 ops/s
# Warmup Iteration   3: 5944572.064 ops/s
# Warmup Iteration   4: 5467541.424 ops/s
# Warmup Iteration   5: 5398612.663 ops/s
# Warmup Iteration   6: 5971371.718 ops/s
# Warmup Iteration   7: 5957804.481 ops/s
# Warmup Iteration   8: 5955162.025 ops/s
# Warmup Iteration   9: 5957140.180 ops/s
# Warmup Iteration  10: 5960172.597 ops/s
# Warmup Iteration  11: 5929298.966 ops/s
# Warmup Iteration  12: 5949887.080 ops/s
# Warmup Iteration  13: 5937677.413 ops/s
# Warmup Iteration  14: 5946716.810 ops/s
# Warmup Iteration  15: 5946069.530 ops/s
# Warmup Iteration  16: 5925007.579 ops/s
# Warmup Iteration  17: 5955641.938 ops/s
# Warmup Iteration  18: 5934939.307 ops/s
# Warmup Iteration  19: 5963431.011 ops/s
# Warmup Iteration  20: 5951037.723 ops/s
# Warmup Iteration  21: 5951379.240 ops/s
# Warmup Iteration  22: 5957109.464 ops/s
# Warmup Iteration  23: 5956536.985 ops/s
# Warmup Iteration  24: 5969651.122 ops/s
# Warmup Iteration  25: 5943318.026 ops/s
# Warmup Iteration  26: 5932984.543 ops/s
# Warmup Iteration  27: 5957967.889 ops/s
# Warmup Iteration  28: 5959671.312 ops/s
# Warmup Iteration  29: 5951180.926 ops/s
# Warmup Iteration  30: 5953508.898 ops/s
Iteration   1: 5938743.246 ops/s
Iteration   2: 5947797.111 ops/s
Iteration   3: 5868366.368 ops/s
Iteration   4: 5945422.753 ops/s
Iteration   5: 5956874.606 ops/s
Iteration   6: 5956661.847 ops/s
Iteration   7: 5956296.427 ops/s
Iteration   8: 5958068.638 ops/s
Iteration   9: 5953099.277 ops/s
Iteration  10: 5949004.013 ops/s
Iteration  11: 5954555.455 ops/s
Iteration  12: 5947463.356 ops/s
Iteration  13: 5961145.403 ops/s
Iteration  14: 5948324.501 ops/s
Iteration  15: 5923118.817 ops/s
Iteration  16: 5968757.222 ops/s
Iteration  17: 5959925.054 ops/s
Iteration  18: 5925973.769 ops/s
Iteration  19: 5950309.579 ops/s
Iteration  20: 5953386.816 ops/s
Iteration  21: 5944582.255 ops/s
Iteration  22: 5961187.604 ops/s
Iteration  23: 5960713.243 ops/s
Iteration  24: 5921582.928 ops/s
Iteration  25: 5952416.151 ops/s
Iteration  26: 5950681.814 ops/s
Iteration  27: 5963948.560 ops/s
Iteration  28: 5950426.408 ops/s
Iteration  29: 5913643.630 ops/s
Iteration  30: 5949594.716 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectDouble":
  5946402.385 ±(99.9%) 13101.137 ops/s [Average]
  (min, avg, max) = (5868366.368, 5946402.385, 5968757.222), stdev = 19609.166
  CI (99.9%): [5933301.249, 5959503.522] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collectDouble  thrpt   30  5946402.385 ± 13101.137  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2664050.518 ops/s
# Warmup Iteration   2: 5636927.769 ops/s
# Warmup Iteration   3: 5997818.369 ops/s
# Warmup Iteration   4: 6027486.027 ops/s
# Warmup Iteration   5: 5001419.594 ops/s
# Warmup Iteration   6: 6022776.845 ops/s
# Warmup Iteration   7: 6035757.023 ops/s
# Warmup Iteration   8: 6039978.433 ops/s
# Warmup Iteration   9: 6038259.853 ops/s
# Warmup Iteration  10: 6027237.219 ops/s
# Warmup Iteration  11: 6010085.636 ops/s
# Warmup Iteration  12: 6017012.211 ops/s
# Warmup Iteration  13: 6038551.802 ops/s
# Warmup Iteration  14: 6022901.719 ops/s
# Warmup Iteration  15: 6035633.972 ops/s
# Warmup Iteration  16: 6033364.656 ops/s
# Warmup Iteration  17: 6110551.571 ops/s
# Warmup Iteration  18: 6112624.618 ops/s
# Warmup Iteration  19: 6072168.566 ops/s
# Warmup Iteration  20: 6096903.042 ops/s
# Warmup Iteration  21: 6084307.473 ops/s
# Warmup Iteration  22: 6093257.833 ops/s
# Warmup Iteration  23: 6106409.406 ops/s
# Warmup Iteration  24: 6124547.662 ops/s
# Warmup Iteration  25: 6112422.092 ops/s
# Warmup Iteration  26: 6114215.251 ops/s
# Warmup Iteration  27: 6125915.549 ops/s
# Warmup Iteration  28: 6087184.339 ops/s
# Warmup Iteration  29: 6116220.505 ops/s
# Warmup Iteration  30: 6107664.801 ops/s
Iteration   1: 6106107.767 ops/s
Iteration   2: 6089874.031 ops/s
Iteration   3: 6110550.191 ops/s
Iteration   4: 6105905.958 ops/s
Iteration   5: 6117229.133 ops/s
Iteration   6: 6097405.520 ops/s
Iteration   7: 6083782.446 ops/s
Iteration   8: 6110292.592 ops/s
Iteration   9: 6131140.435 ops/s
Iteration  10: 6112709.641 ops/s
Iteration  11: 6111578.302 ops/s
Iteration  12: 6121400.973 ops/s
Iteration  13: 6091478.378 ops/s
Iteration  14: 6092364.394 ops/s
Iteration  15: 6089540.296 ops/s
Iteration  16: 6111861.572 ops/s
Iteration  17: 6114950.012 ops/s
Iteration  18: 6119218.735 ops/s
Iteration  19: 6129825.235 ops/s
Iteration  20: 6083232.311 ops/s
Iteration  21: 6105571.877 ops/s
Iteration  22: 6107085.675 ops/s
Iteration  23: 6101052.369 ops/s
Iteration  24: 6082387.196 ops/s
Iteration  25: 6119736.742 ops/s
Iteration  26: 6125282.087 ops/s
Iteration  27: 6108580.333 ops/s
Iteration  28: 6126164.876 ops/s
Iteration  29: 6113731.988 ops/s
Iteration  30: 6122963.696 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectFloat":
  6108100.159 ±(99.9%) 9410.585 ops/s [Average]
  (min, avg, max) = (6082387.196, 6108100.159, 6131140.435), stdev = 14085.321
  CI (99.9%): [6098689.574, 6117510.743] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collectFloat  thrpt   30  6108100.159 ± 9410.585  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5939289.257 ops/s
# Warmup Iteration   2: 11197709.815 ops/s
# Warmup Iteration   3: 12029621.434 ops/s
# Warmup Iteration   4: 12087038.056 ops/s
# Warmup Iteration   5: 10163089.740 ops/s
# Warmup Iteration   6: 12193511.380 ops/s
# Warmup Iteration   7: 12153776.395 ops/s
# Warmup Iteration   8: 12164345.804 ops/s
# Warmup Iteration   9: 12168772.355 ops/s
# Warmup Iteration  10: 12184268.020 ops/s
# Warmup Iteration  11: 12138363.468 ops/s
# Warmup Iteration  12: 12195331.350 ops/s
# Warmup Iteration  13: 12171435.460 ops/s
# Warmup Iteration  14: 12169008.864 ops/s
# Warmup Iteration  15: 12191128.822 ops/s
# Warmup Iteration  16: 12192646.139 ops/s
# Warmup Iteration  17: 12198691.417 ops/s
# Warmup Iteration  18: 12139162.029 ops/s
# Warmup Iteration  19: 12139316.559 ops/s
# Warmup Iteration  20: 12192883.864 ops/s
# Warmup Iteration  21: 12170198.030 ops/s
# Warmup Iteration  22: 12185759.356 ops/s
# Warmup Iteration  23: 12181645.465 ops/s
# Warmup Iteration  24: 12175967.996 ops/s
# Warmup Iteration  25: 12181784.441 ops/s
# Warmup Iteration  26: 12180098.278 ops/s
# Warmup Iteration  27: 12196299.750 ops/s
# Warmup Iteration  28: 12199640.889 ops/s
# Warmup Iteration  29: 12182314.078 ops/s
# Warmup Iteration  30: 12141918.791 ops/s
Iteration   1: 12170444.226 ops/s
Iteration   2: 12154921.846 ops/s
Iteration   3: 12165449.871 ops/s
Iteration   4: 12135757.330 ops/s
Iteration   5: 12213451.301 ops/s
Iteration   6: 12184159.104 ops/s
Iteration   7: 12173055.128 ops/s
Iteration   8: 12144517.929 ops/s
Iteration   9: 12157746.528 ops/s
Iteration  10: 12212509.586 ops/s
Iteration  11: 12179442.751 ops/s
Iteration  12: 12182040.694 ops/s
Iteration  13: 12218233.013 ops/s
Iteration  14: 12172774.174 ops/s
Iteration  15: 12130237.235 ops/s
Iteration  16: 12209193.777 ops/s
Iteration  17: 12126872.272 ops/s
Iteration  18: 12122147.509 ops/s
Iteration  19: 12208188.945 ops/s
Iteration  20: 12186079.093 ops/s
Iteration  21: 12194507.332 ops/s
Iteration  22: 12219771.111 ops/s
Iteration  23: 12197657.072 ops/s
Iteration  24: 12218005.516 ops/s
Iteration  25: 12112482.224 ops/s
Iteration  26: 12179856.244 ops/s
Iteration  27: 12187884.976 ops/s
Iteration  28: 12195713.541 ops/s
Iteration  29: 12190151.008 ops/s
Iteration  30: 12169580.368 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectIf":
  12177094.390 ±(99.9%) 20426.584 ops/s [Average]
  (min, avg, max) = (12112482.224, 12177094.390, 12219771.111), stdev = 30573.552
  CI (99.9%): [12156667.806, 12197520.974] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collectIf  thrpt   30  12177094.390 ± 20426.584  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6249020.497 ops/s
# Warmup Iteration   2: 11472418.446 ops/s
# Warmup Iteration   3: 12294823.739 ops/s
# Warmup Iteration   4: 12362544.537 ops/s
# Warmup Iteration   5: 10371954.620 ops/s
# Warmup Iteration   6: 12389034.473 ops/s
# Warmup Iteration   7: 12384263.431 ops/s
# Warmup Iteration   8: 12379880.277 ops/s
# Warmup Iteration   9: 12383952.576 ops/s
# Warmup Iteration  10: 12393818.268 ops/s
# Warmup Iteration  11: 12331862.289 ops/s
# Warmup Iteration  12: 12403552.298 ops/s
# Warmup Iteration  13: 12376743.630 ops/s
# Warmup Iteration  14: 12354018.480 ops/s
# Warmup Iteration  15: 12376437.376 ops/s
# Warmup Iteration  16: 12412201.487 ops/s
# Warmup Iteration  17: 12355916.289 ops/s
# Warmup Iteration  18: 12403123.683 ops/s
# Warmup Iteration  19: 12366455.091 ops/s
# Warmup Iteration  20: 12397213.499 ops/s
# Warmup Iteration  21: 12369222.033 ops/s
# Warmup Iteration  22: 12393071.126 ops/s
# Warmup Iteration  23: 12397111.534 ops/s
# Warmup Iteration  24: 12393858.480 ops/s
# Warmup Iteration  25: 12358514.382 ops/s
# Warmup Iteration  26: 12396460.129 ops/s
# Warmup Iteration  27: 12317701.879 ops/s
# Warmup Iteration  28: 12372025.018 ops/s
# Warmup Iteration  29: 12382415.801 ops/s
# Warmup Iteration  30: 12393346.259 ops/s
Iteration   1: 12406613.449 ops/s
Iteration   2: 12390819.038 ops/s
Iteration   3: 12378996.511 ops/s
Iteration   4: 12417819.703 ops/s
Iteration   5: 12376088.429 ops/s
Iteration   6: 12402207.505 ops/s
Iteration   7: 12415710.465 ops/s
Iteration   8: 12392584.979 ops/s
Iteration   9: 12395533.820 ops/s
Iteration  10: 12317174.430 ops/s
Iteration  11: 12382966.053 ops/s
Iteration  12: 12347181.088 ops/s
Iteration  13: 12395226.062 ops/s
Iteration  14: 12387469.503 ops/s
Iteration  15: 12334607.456 ops/s
Iteration  16: 12405138.425 ops/s
Iteration  17: 12401358.370 ops/s
Iteration  18: 12414162.155 ops/s
Iteration  19: 12400008.718 ops/s
Iteration  20: 12383479.426 ops/s
Iteration  21: 12343830.934 ops/s
Iteration  22: 12327973.474 ops/s
Iteration  23: 12382667.848 ops/s
Iteration  24: 12392152.453 ops/s
Iteration  25: 12350607.372 ops/s
Iteration  26: 12414022.266 ops/s
Iteration  27: 12396819.035 ops/s
Iteration  28: 12364278.408 ops/s
Iteration  29: 12382116.755 ops/s
Iteration  30: 12385817.987 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectIfWithTarget":
  12382847.737 ±(99.9%) 17980.939 ops/s [Average]
  (min, avg, max) = (12317174.430, 12382847.737, 12417819.703), stdev = 26913.025
  CI (99.9%): [12364866.798, 12400828.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  12382847.737 ± 17980.939  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2704085.329 ops/s
# Warmup Iteration   2: 5787933.798 ops/s
# Warmup Iteration   3: 6190604.276 ops/s
# Warmup Iteration   4: 6223888.974 ops/s
# Warmup Iteration   5: 5155349.534 ops/s
# Warmup Iteration   6: 6201083.801 ops/s
# Warmup Iteration   7: 6230750.198 ops/s
# Warmup Iteration   8: 6224985.490 ops/s
# Warmup Iteration   9: 6220932.070 ops/s
# Warmup Iteration  10: 6174558.038 ops/s
# Warmup Iteration  11: 6191428.713 ops/s
# Warmup Iteration  12: 6217092.149 ops/s
# Warmup Iteration  13: 6209014.070 ops/s
# Warmup Iteration  14: 6217677.321 ops/s
# Warmup Iteration  15: 6209839.268 ops/s
# Warmup Iteration  16: 6231759.669 ops/s
# Warmup Iteration  17: 6220003.730 ops/s
# Warmup Iteration  18: 6228941.916 ops/s
# Warmup Iteration  19: 6209526.470 ops/s
# Warmup Iteration  20: 6226903.147 ops/s
# Warmup Iteration  21: 6228845.837 ops/s
# Warmup Iteration  22: 6234028.821 ops/s
# Warmup Iteration  23: 6209417.606 ops/s
# Warmup Iteration  24: 6224740.682 ops/s
# Warmup Iteration  25: 6221884.158 ops/s
# Warmup Iteration  26: 6226871.081 ops/s
# Warmup Iteration  27: 6220874.326 ops/s
# Warmup Iteration  28: 6224340.687 ops/s
# Warmup Iteration  29: 6208169.293 ops/s
# Warmup Iteration  30: 6201799.246 ops/s
Iteration   1: 6207211.494 ops/s
Iteration   2: 6233252.051 ops/s
Iteration   3: 6238588.302 ops/s
Iteration   4: 6230080.308 ops/s
Iteration   5: 6239910.116 ops/s
Iteration   6: 6224120.127 ops/s
Iteration   7: 6215263.053 ops/s
Iteration   8: 6203460.980 ops/s
Iteration   9: 6245361.760 ops/s
Iteration  10: 6227333.171 ops/s
Iteration  11: 6235007.034 ops/s
Iteration  12: 6228246.894 ops/s
Iteration  13: 6239975.343 ops/s
Iteration  14: 6223876.942 ops/s
Iteration  15: 6210546.823 ops/s
Iteration  16: 6199369.138 ops/s
Iteration  17: 6227597.120 ops/s
Iteration  18: 6231318.204 ops/s
Iteration  19: 6222052.913 ops/s
Iteration  20: 6239012.534 ops/s
Iteration  21: 6219666.297 ops/s
Iteration  22: 6200161.839 ops/s
Iteration  23: 6144196.766 ops/s
Iteration  24: 6106739.375 ops/s
Iteration  25: 6193402.699 ops/s
Iteration  26: 6192837.500 ops/s
Iteration  27: 6190209.111 ops/s
Iteration  28: 6244066.827 ops/s
Iteration  29: 6203537.386 ops/s
Iteration  30: 6226689.417 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectInt":
  6214769.717 ±(99.9%) 19749.884 ops/s [Average]
  (min, avg, max) = (6106739.375, 6214769.717, 6245361.760), stdev = 29560.699
  CI (99.9%): [6195019.833, 6234519.602] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collectInt  thrpt   30  6214769.717 ± 19749.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2502315.419 ops/s
# Warmup Iteration   2: 5706043.618 ops/s
# Warmup Iteration   3: 6005111.121 ops/s
# Warmup Iteration   4: 5500255.339 ops/s
# Warmup Iteration   5: 5488537.161 ops/s
# Warmup Iteration   6: 6002414.335 ops/s
# Warmup Iteration   7: 6016940.755 ops/s
# Warmup Iteration   8: 6011630.621 ops/s
# Warmup Iteration   9: 6006459.732 ops/s
# Warmup Iteration  10: 6000593.410 ops/s
# Warmup Iteration  11: 6016784.765 ops/s
# Warmup Iteration  12: 6010274.576 ops/s
# Warmup Iteration  13: 6017082.505 ops/s
# Warmup Iteration  14: 5971699.709 ops/s
# Warmup Iteration  15: 5977390.297 ops/s
# Warmup Iteration  16: 6003676.393 ops/s
# Warmup Iteration  17: 5995438.569 ops/s
# Warmup Iteration  18: 5995993.748 ops/s
# Warmup Iteration  19: 6007939.174 ops/s
# Warmup Iteration  20: 6004575.415 ops/s
# Warmup Iteration  21: 6000723.341 ops/s
# Warmup Iteration  22: 6011649.202 ops/s
# Warmup Iteration  23: 6001255.874 ops/s
# Warmup Iteration  24: 5984473.103 ops/s
# Warmup Iteration  25: 6015840.816 ops/s
# Warmup Iteration  26: 6008639.418 ops/s
# Warmup Iteration  27: 6026625.985 ops/s
# Warmup Iteration  28: 6017363.282 ops/s
# Warmup Iteration  29: 5986592.518 ops/s
# Warmup Iteration  30: 6020229.403 ops/s
Iteration   1: 5994384.849 ops/s
Iteration   2: 5994354.884 ops/s
Iteration   3: 6031823.662 ops/s
Iteration   4: 6011938.301 ops/s
Iteration   5: 6016756.019 ops/s
Iteration   6: 6014279.701 ops/s
Iteration   7: 6016893.003 ops/s
Iteration   8: 6005101.976 ops/s
Iteration   9: 6024141.538 ops/s
Iteration  10: 6020000.008 ops/s
Iteration  11: 6016069.692 ops/s
Iteration  12: 6014593.227 ops/s
Iteration  13: 6011413.119 ops/s
Iteration  14: 6019557.440 ops/s
Iteration  15: 6022584.393 ops/s
Iteration  16: 6019179.652 ops/s
Iteration  17: 6009555.662 ops/s
Iteration  18: 5999420.617 ops/s
Iteration  19: 6022726.668 ops/s
Iteration  20: 6027939.275 ops/s
Iteration  21: 6018153.866 ops/s
Iteration  22: 6019398.849 ops/s
Iteration  23: 6013940.744 ops/s
Iteration  24: 6007721.306 ops/s
Iteration  25: 6030317.953 ops/s
Iteration  26: 6008122.286 ops/s
Iteration  27: 6017641.388 ops/s
Iteration  28: 6006023.770 ops/s
Iteration  29: 6004800.774 ops/s
Iteration  30: 5997774.388 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectLong":
  6013886.967 ±(99.9%) 6545.241 ops/s [Average]
  (min, avg, max) = (5994354.884, 6013886.967, 6031823.662), stdev = 9796.609
  CI (99.9%): [6007341.726, 6020432.208] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collectLong  thrpt   30  6013886.967 ± 6545.241  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2651796.385 ops/s
# Warmup Iteration   2: 5038583.544 ops/s
# Warmup Iteration   3: 5709664.830 ops/s
# Warmup Iteration   4: 5731301.356 ops/s
# Warmup Iteration   5: 5474956.642 ops/s
# Warmup Iteration   6: 4961372.909 ops/s
# Warmup Iteration   7: 5726197.855 ops/s
# Warmup Iteration   8: 5738995.522 ops/s
# Warmup Iteration   9: 5738844.865 ops/s
# Warmup Iteration  10: 5733819.480 ops/s
# Warmup Iteration  11: 5735512.612 ops/s
# Warmup Iteration  12: 5680440.376 ops/s
# Warmup Iteration  13: 5739602.222 ops/s
# Warmup Iteration  14: 5741598.241 ops/s
# Warmup Iteration  15: 5735785.618 ops/s
# Warmup Iteration  16: 5738747.126 ops/s
# Warmup Iteration  17: 5739726.667 ops/s
# Warmup Iteration  18: 5742135.472 ops/s
# Warmup Iteration  19: 5735971.297 ops/s
# Warmup Iteration  20: 5735921.173 ops/s
# Warmup Iteration  21: 5738583.198 ops/s
# Warmup Iteration  22: 5742311.144 ops/s
# Warmup Iteration  23: 5739392.252 ops/s
# Warmup Iteration  24: 5710295.699 ops/s
# Warmup Iteration  25: 5739063.418 ops/s
# Warmup Iteration  26: 5729296.693 ops/s
# Warmup Iteration  27: 5663638.920 ops/s
# Warmup Iteration  28: 5734862.694 ops/s
# Warmup Iteration  29: 5723681.122 ops/s
# Warmup Iteration  30: 5732570.115 ops/s
Iteration   1: 5746993.636 ops/s
Iteration   2: 5724160.532 ops/s
Iteration   3: 5722588.234 ops/s
Iteration   4: 5733795.887 ops/s
Iteration   5: 5704102.708 ops/s
Iteration   6: 5745154.905 ops/s
Iteration   7: 5725349.232 ops/s
Iteration   8: 5733038.017 ops/s
Iteration   9: 5696759.053 ops/s
Iteration  10: 5555923.600 ops/s
Iteration  11: 5735079.692 ops/s
Iteration  12: 5717516.993 ops/s
Iteration  13: 5723981.407 ops/s
Iteration  14: 5696225.741 ops/s
Iteration  15: 5713215.711 ops/s
Iteration  16: 5726994.312 ops/s
Iteration  17: 5729486.852 ops/s
Iteration  18: 5735344.569 ops/s
Iteration  19: 5740191.666 ops/s
Iteration  20: 5712188.124 ops/s
Iteration  21: 5731267.911 ops/s
Iteration  22: 5715658.924 ops/s
Iteration  23: 5735066.579 ops/s
Iteration  24: 5728623.432 ops/s
Iteration  25: 5711956.384 ops/s
Iteration  26: 5755179.644 ops/s
Iteration  27: 5716864.090 ops/s
Iteration  28: 5729539.497 ops/s
Iteration  29: 5749454.769 ops/s
Iteration  30: 5736106.909 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectShort":
  5720926.967 ±(99.9%) 22924.802 ops/s [Average]
  (min, avg, max) = (5555923.600, 5720926.967, 5755179.644), stdev = 34312.767
  CI (99.9%): [5698002.165, 5743851.769] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collectShort  thrpt   30  5720926.967 ± 22924.802  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 967064.506 ops/s
# Warmup Iteration   2: 2043655.323 ops/s
# Warmup Iteration   3: 1734656.131 ops/s
# Warmup Iteration   4: 2056466.983 ops/s
# Warmup Iteration   5: 2054414.039 ops/s
# Warmup Iteration   6: 2061357.442 ops/s
# Warmup Iteration   7: 2056576.627 ops/s
# Warmup Iteration   8: 2062236.134 ops/s
# Warmup Iteration   9: 2056785.330 ops/s
# Warmup Iteration  10: 2045772.447 ops/s
# Warmup Iteration  11: 2060733.965 ops/s
# Warmup Iteration  12: 2049753.210 ops/s
# Warmup Iteration  13: 2061944.433 ops/s
# Warmup Iteration  14: 2054044.736 ops/s
# Warmup Iteration  15: 2061050.969 ops/s
# Warmup Iteration  16: 2046576.882 ops/s
# Warmup Iteration  17: 2057877.432 ops/s
# Warmup Iteration  18: 2056087.676 ops/s
# Warmup Iteration  19: 2048549.539 ops/s
# Warmup Iteration  20: 2058930.204 ops/s
# Warmup Iteration  21: 2048863.764 ops/s
# Warmup Iteration  22: 2065168.998 ops/s
# Warmup Iteration  23: 2062865.310 ops/s
# Warmup Iteration  24: 2057231.789 ops/s
# Warmup Iteration  25: 2058443.884 ops/s
# Warmup Iteration  26: 2058683.220 ops/s
# Warmup Iteration  27: 2065205.847 ops/s
# Warmup Iteration  28: 2058674.619 ops/s
# Warmup Iteration  29: 2065965.029 ops/s
# Warmup Iteration  30: 2062657.381 ops/s
Iteration   1: 2056494.968 ops/s
Iteration   2: 2061849.767 ops/s
Iteration   3: 2061094.463 ops/s
Iteration   4: 2068280.989 ops/s
Iteration   5: 2059012.768 ops/s
Iteration   6: 2051608.952 ops/s
Iteration   7: 2061088.266 ops/s
Iteration   8: 2062873.457 ops/s
Iteration   9: 2057164.150 ops/s
Iteration  10: 2047967.854 ops/s
Iteration  11: 2048832.578 ops/s
Iteration  12: 2064626.836 ops/s
Iteration  13: 2057059.619 ops/s
Iteration  14: 2056797.671 ops/s
Iteration  15: 2051904.823 ops/s
Iteration  16: 2062630.534 ops/s
Iteration  17: 2060925.794 ops/s
Iteration  18: 2052538.958 ops/s
Iteration  19: 2054824.605 ops/s
Iteration  20: 2060041.879 ops/s
Iteration  21: 2056834.195 ops/s
Iteration  22: 2066233.141 ops/s
Iteration  23: 2062485.636 ops/s
Iteration  24: 2063784.323 ops/s
Iteration  25: 2063017.394 ops/s
Iteration  26: 2062668.083 ops/s
Iteration  27: 2056142.092 ops/s
Iteration  28: 2052660.254 ops/s
Iteration  29: 2066676.075 ops/s
Iteration  30: 2057475.716 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectWith":
  2058853.195 ±(99.9%) 3521.670 ops/s [Average]
  (min, avg, max) = (2047967.854, 2058853.195, 2068280.989), stdev = 5271.070
  CI (99.9%): [2055331.525, 2062374.864] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collectWith  thrpt   30  2058853.195 ± 3521.670  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1872400.714 ops/s
# Warmup Iteration   2: 4561140.282 ops/s
# Warmup Iteration   3: 4015087.003 ops/s
# Warmup Iteration   4: 4464961.124 ops/s
# Warmup Iteration   5: 4643707.014 ops/s
# Warmup Iteration   6: 4639802.238 ops/s
# Warmup Iteration   7: 4637550.929 ops/s
# Warmup Iteration   8: 4627840.917 ops/s
# Warmup Iteration   9: 4631418.688 ops/s
# Warmup Iteration  10: 4649694.809 ops/s
# Warmup Iteration  11: 4643434.399 ops/s
# Warmup Iteration  12: 4642852.294 ops/s
# Warmup Iteration  13: 4641386.568 ops/s
# Warmup Iteration  14: 4629814.694 ops/s
# Warmup Iteration  15: 4621042.588 ops/s
# Warmup Iteration  16: 4648013.739 ops/s
# Warmup Iteration  17: 4638683.611 ops/s
# Warmup Iteration  18: 4641191.616 ops/s
# Warmup Iteration  19: 4642597.733 ops/s
# Warmup Iteration  20: 4644762.477 ops/s
# Warmup Iteration  21: 4638563.783 ops/s
# Warmup Iteration  22: 4632253.517 ops/s
# Warmup Iteration  23: 4637771.079 ops/s
# Warmup Iteration  24: 4636219.445 ops/s
# Warmup Iteration  25: 4629865.027 ops/s
# Warmup Iteration  26: 4645941.465 ops/s
# Warmup Iteration  27: 4637152.569 ops/s
# Warmup Iteration  28: 4639901.691 ops/s
# Warmup Iteration  29: 4639101.041 ops/s
# Warmup Iteration  30: 4641962.064 ops/s
Iteration   1: 4639893.408 ops/s
Iteration   2: 4643044.932 ops/s
Iteration   3: 4649028.140 ops/s
Iteration   4: 4632389.153 ops/s
Iteration   5: 4649895.199 ops/s
Iteration   6: 4629008.826 ops/s
Iteration   7: 4646662.455 ops/s
Iteration   8: 4653982.804 ops/s
Iteration   9: 4624919.767 ops/s
Iteration  10: 4653379.171 ops/s
Iteration  11: 4650128.139 ops/s
Iteration  12: 4632184.642 ops/s
Iteration  13: 4638730.498 ops/s
Iteration  14: 4633773.548 ops/s
Iteration  15: 4621997.935 ops/s
Iteration  16: 4634051.622 ops/s
Iteration  17: 4650427.854 ops/s
Iteration  18: 4632738.263 ops/s
Iteration  19: 4637332.868 ops/s
Iteration  20: 4651495.308 ops/s
Iteration  21: 4648014.582 ops/s
Iteration  22: 4650107.975 ops/s
Iteration  23: 4650674.601 ops/s
Iteration  24: 4638507.103 ops/s
Iteration  25: 4650119.877 ops/s
Iteration  26: 4649134.553 ops/s
Iteration  27: 4634946.269 ops/s
Iteration  28: 4649637.884 ops/s
Iteration  29: 4638440.771 ops/s
Iteration  30: 4633308.612 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectWithIndex":
  4641598.559 ±(99.9%) 6122.589 ops/s [Average]
  (min, avg, max) = (4621997.935, 4641598.559, 4653982.804), stdev = 9164.004
  CI (99.9%): [4635475.969, 4647721.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  4641598.559 ± 6122.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 447717.099 ops/s
# Warmup Iteration   2: 1158175.960 ops/s
# Warmup Iteration   3: 1308520.350 ops/s
# Warmup Iteration   4: 1314950.690 ops/s
# Warmup Iteration   5: 1100999.758 ops/s
# Warmup Iteration   6: 1316544.125 ops/s
# Warmup Iteration   7: 1320198.261 ops/s
# Warmup Iteration   8: 1312629.865 ops/s
# Warmup Iteration   9: 1318982.273 ops/s
# Warmup Iteration  10: 1318474.178 ops/s
# Warmup Iteration  11: 1318196.393 ops/s
# Warmup Iteration  12: 1316779.896 ops/s
# Warmup Iteration  13: 1315529.770 ops/s
# Warmup Iteration  14: 1319316.016 ops/s
# Warmup Iteration  15: 1317038.920 ops/s
# Warmup Iteration  16: 1316596.113 ops/s
# Warmup Iteration  17: 1305764.742 ops/s
# Warmup Iteration  18: 1315343.784 ops/s
# Warmup Iteration  19: 1312551.170 ops/s
# Warmup Iteration  20: 1317790.382 ops/s
# Warmup Iteration  21: 1316924.524 ops/s
# Warmup Iteration  22: 1316709.135 ops/s
# Warmup Iteration  23: 1315180.907 ops/s
# Warmup Iteration  24: 1318659.259 ops/s
# Warmup Iteration  25: 1316606.907 ops/s
# Warmup Iteration  26: 1315971.944 ops/s
# Warmup Iteration  27: 1316504.677 ops/s
# Warmup Iteration  28: 1313325.866 ops/s
# Warmup Iteration  29: 1317012.451 ops/s
# Warmup Iteration  30: 1317671.904 ops/s
Iteration   1: 1299596.405 ops/s
Iteration   2: 1315606.833 ops/s
Iteration   3: 1315678.208 ops/s
Iteration   4: 1312759.621 ops/s
Iteration   5: 1320133.250 ops/s
Iteration   6: 1315390.767 ops/s
Iteration   7: 1313062.699 ops/s
Iteration   8: 1315605.849 ops/s
Iteration   9: 1314504.058 ops/s
Iteration  10: 1317332.998 ops/s
Iteration  11: 1310721.440 ops/s
Iteration  12: 1316800.779 ops/s
Iteration  13: 1318833.017 ops/s
Iteration  14: 1317388.048 ops/s
Iteration  15: 1317235.575 ops/s
Iteration  16: 1318080.145 ops/s
Iteration  17: 1321711.692 ops/s
Iteration  18: 1317214.411 ops/s
Iteration  19: 1316310.370 ops/s
Iteration  20: 1316451.841 ops/s
Iteration  21: 1317610.563 ops/s
Iteration  22: 1314921.353 ops/s
Iteration  23: 1312239.712 ops/s
Iteration  24: 1318229.468 ops/s
Iteration  25: 1317626.896 ops/s
Iteration  26: 1317012.170 ops/s
Iteration  27: 1315869.872 ops/s
Iteration  28: 1315678.357 ops/s
Iteration  29: 1318560.185 ops/s
Iteration  30: 1310557.439 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  1315624.134 ±(99.9%) 2624.198 ops/s [Average]
  (min, avg, max) = (1299596.405, 1315624.134, 1321711.692), stdev = 3927.777
  CI (99.9%): [1312999.936, 1318248.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  1315624.134 ± 2624.198  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 950552.414 ops/s
# Warmup Iteration   2: 2234467.296 ops/s
# Warmup Iteration   3: 1912072.025 ops/s
# Warmup Iteration   4: 2264694.672 ops/s
# Warmup Iteration   5: 2269152.303 ops/s
# Warmup Iteration   6: 2271088.291 ops/s
# Warmup Iteration   7: 2259738.613 ops/s
# Warmup Iteration   8: 2263045.177 ops/s
# Warmup Iteration   9: 2272227.541 ops/s
# Warmup Iteration  10: 2267516.119 ops/s
# Warmup Iteration  11: 2268308.926 ops/s
# Warmup Iteration  12: 2262010.951 ops/s
# Warmup Iteration  13: 2259360.629 ops/s
# Warmup Iteration  14: 2263869.162 ops/s
# Warmup Iteration  15: 2262127.020 ops/s
# Warmup Iteration  16: 2266445.158 ops/s
# Warmup Iteration  17: 2257227.895 ops/s
# Warmup Iteration  18: 2254685.657 ops/s
# Warmup Iteration  19: 2260306.624 ops/s
# Warmup Iteration  20: 2261086.577 ops/s
# Warmup Iteration  21: 2258710.097 ops/s
# Warmup Iteration  22: 2260233.757 ops/s
# Warmup Iteration  23: 2266760.340 ops/s
# Warmup Iteration  24: 2268129.455 ops/s
# Warmup Iteration  25: 2264644.222 ops/s
# Warmup Iteration  26: 2264272.400 ops/s
# Warmup Iteration  27: 2258116.619 ops/s
# Warmup Iteration  28: 2260140.791 ops/s
# Warmup Iteration  29: 2264117.051 ops/s
# Warmup Iteration  30: 2261803.397 ops/s
Iteration   1: 2257028.516 ops/s
Iteration   2: 2253297.448 ops/s
Iteration   3: 2260798.054 ops/s
Iteration   4: 2264394.830 ops/s
Iteration   5: 2256819.228 ops/s
Iteration   6: 2256196.704 ops/s
Iteration   7: 2251980.052 ops/s
Iteration   8: 2256314.152 ops/s
Iteration   9: 2262998.999 ops/s
Iteration  10: 2253912.154 ops/s
Iteration  11: 2268239.490 ops/s
Iteration  12: 2255398.653 ops/s
Iteration  13: 2275944.940 ops/s
Iteration  14: 2273026.956 ops/s
Iteration  15: 2266819.096 ops/s
Iteration  16: 2266390.968 ops/s
Iteration  17: 2269098.197 ops/s
Iteration  18: 2271621.272 ops/s
Iteration  19: 2267621.653 ops/s
Iteration  20: 2272214.752 ops/s
Iteration  21: 2257556.509 ops/s
Iteration  22: 2263703.734 ops/s
Iteration  23: 2270676.674 ops/s
Iteration  24: 2256832.902 ops/s
Iteration  25: 2277593.725 ops/s
Iteration  26: 2271416.766 ops/s
Iteration  27: 2261510.687 ops/s
Iteration  28: 2267689.189 ops/s
Iteration  29: 2262756.188 ops/s
Iteration  30: 2265025.993 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collectWith_target":
  2263829.283 ±(99.9%) 4782.029 ops/s [Average]
  (min, avg, max) = (2251980.052, 2263829.283, 2277593.725), stdev = 7157.516
  CI (99.9%): [2259047.254, 2268611.311] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collectWith_target  thrpt   30  2263829.283 ± 4782.029  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2026657.769 ops/s
# Warmup Iteration   2: 4193444.402 ops/s
# Warmup Iteration   3: 3583895.122 ops/s
# Warmup Iteration   4: 4285036.566 ops/s
# Warmup Iteration   5: 4255277.707 ops/s
# Warmup Iteration   6: 4264814.424 ops/s
# Warmup Iteration   7: 4282542.343 ops/s
# Warmup Iteration   8: 4292153.434 ops/s
# Warmup Iteration   9: 4281207.121 ops/s
# Warmup Iteration  10: 4289188.293 ops/s
# Warmup Iteration  11: 4292694.777 ops/s
# Warmup Iteration  12: 4271733.531 ops/s
# Warmup Iteration  13: 4294683.394 ops/s
# Warmup Iteration  14: 4288772.302 ops/s
# Warmup Iteration  15: 4288671.630 ops/s
# Warmup Iteration  16: 4274138.706 ops/s
# Warmup Iteration  17: 4286148.055 ops/s
# Warmup Iteration  18: 4266743.397 ops/s
# Warmup Iteration  19: 4275882.593 ops/s
# Warmup Iteration  20: 4275911.764 ops/s
# Warmup Iteration  21: 4278639.589 ops/s
# Warmup Iteration  22: 4284566.113 ops/s
# Warmup Iteration  23: 4286308.679 ops/s
# Warmup Iteration  24: 4274829.833 ops/s
# Warmup Iteration  25: 4271029.669 ops/s
# Warmup Iteration  26: 4287866.643 ops/s
# Warmup Iteration  27: 4279280.220 ops/s
# Warmup Iteration  28: 4287224.522 ops/s
# Warmup Iteration  29: 4294184.579 ops/s
# Warmup Iteration  30: 4291803.134 ops/s
Iteration   1: 4288895.811 ops/s
Iteration   2: 4292288.709 ops/s
Iteration   3: 4283548.790 ops/s
Iteration   4: 4299103.357 ops/s
Iteration   5: 4291691.860 ops/s
Iteration   6: 4261760.302 ops/s
Iteration   7: 4287741.603 ops/s
Iteration   8: 4266594.120 ops/s
Iteration   9: 4263320.160 ops/s
Iteration  10: 4277398.726 ops/s
Iteration  11: 4275401.728 ops/s
Iteration  12: 4267557.563 ops/s
Iteration  13: 4276191.582 ops/s
Iteration  14: 4262809.135 ops/s
Iteration  15: 4293366.889 ops/s
Iteration  16: 4288908.368 ops/s
Iteration  17: 4280810.255 ops/s
Iteration  18: 4259293.203 ops/s
Iteration  19: 4252155.003 ops/s
Iteration  20: 4226588.457 ops/s
Iteration  21: 4256498.834 ops/s
Iteration  22: 4279505.590 ops/s
Iteration  23: 4275009.231 ops/s
Iteration  24: 4282559.860 ops/s
Iteration  25: 4281155.500 ops/s
Iteration  26: 4265223.269 ops/s
Iteration  27: 4280195.669 ops/s
Iteration  28: 4257201.961 ops/s
Iteration  29: 4277341.449 ops/s
Iteration  30: 4289439.546 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_collect_target":
  4274651.884 ±(99.9%) 10353.984 ops/s [Average]
  (min, avg, max) = (4226588.457, 4274651.884, 4299103.357), stdev = 15497.357
  CI (99.9%): [4264297.900, 4285005.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_collect_target  thrpt   30  4274651.884 ± 10353.984  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1974417.750 ops/s
# Warmup Iteration   2: 2904546.045 ops/s
# Warmup Iteration   3: 3044844.034 ops/s
# Warmup Iteration   4: 3080421.812 ops/s
# Warmup Iteration   5: 3065540.249 ops/s
# Warmup Iteration   6: 3045755.001 ops/s
# Warmup Iteration   7: 2603397.403 ops/s
# Warmup Iteration   8: 3075019.357 ops/s
# Warmup Iteration   9: 3071205.318 ops/s
# Warmup Iteration  10: 3081526.366 ops/s
# Warmup Iteration  11: 3087844.883 ops/s
# Warmup Iteration  12: 3079740.720 ops/s
# Warmup Iteration  13: 3074070.976 ops/s
# Warmup Iteration  14: 3066802.665 ops/s
# Warmup Iteration  15: 3078759.856 ops/s
# Warmup Iteration  16: 3084578.033 ops/s
# Warmup Iteration  17: 3078578.060 ops/s
# Warmup Iteration  18: 3078760.310 ops/s
# Warmup Iteration  19: 3082117.907 ops/s
# Warmup Iteration  20: 3080136.147 ops/s
# Warmup Iteration  21: 3083204.491 ops/s
# Warmup Iteration  22: 3081224.098 ops/s
# Warmup Iteration  23: 3084462.261 ops/s
# Warmup Iteration  24: 3084195.655 ops/s
# Warmup Iteration  25: 3084942.353 ops/s
# Warmup Iteration  26: 3082501.124 ops/s
# Warmup Iteration  27: 3076161.774 ops/s
# Warmup Iteration  28: 3083021.565 ops/s
# Warmup Iteration  29: 3084133.617 ops/s
# Warmup Iteration  30: 3073730.601 ops/s
Iteration   1: 3073210.968 ops/s
Iteration   2: 3083457.107 ops/s
Iteration   3: 3066946.356 ops/s
Iteration   4: 3075527.609 ops/s
Iteration   5: 3085896.660 ops/s
Iteration   6: 3072111.271 ops/s
Iteration   7: 3082991.333 ops/s
Iteration   8: 3082234.072 ops/s
Iteration   9: 3080143.929 ops/s
Iteration  10: 3072671.542 ops/s
Iteration  11: 3079149.968 ops/s
Iteration  12: 3083787.687 ops/s
Iteration  13: 3075996.373 ops/s
Iteration  14: 3075398.113 ops/s
Iteration  15: 3089009.306 ops/s
Iteration  16: 2937268.615 ops/s
Iteration  17: 3067680.568 ops/s
Iteration  18: 3086073.789 ops/s
Iteration  19: 3087280.239 ops/s
Iteration  20: 3083555.340 ops/s
Iteration  21: 3081899.825 ops/s
Iteration  22: 3088896.043 ops/s
Iteration  23: 3082997.469 ops/s
Iteration  24: 3088595.214 ops/s
Iteration  25: 3083066.300 ops/s
Iteration  26: 3089898.549 ops/s
Iteration  27: 3077603.740 ops/s
Iteration  28: 3081204.547 ops/s
Iteration  29: 3079607.780 ops/s
Iteration  30: 3084977.990 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_contains":
  3075971.277 ±(99.9%) 17975.071 ops/s [Average]
  (min, avg, max) = (2937268.615, 3075971.277, 3089898.549), stdev = 26904.242
  CI (99.9%): [3057996.206, 3093946.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_contains  thrpt   30  3075971.277 ± 17975.071  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6109848.724 ops/s
# Warmup Iteration   2: 8499591.378 ops/s
# Warmup Iteration   3: 10200366.069 ops/s
# Warmup Iteration   4: 10165326.273 ops/s
# Warmup Iteration   5: 10221760.347 ops/s
# Warmup Iteration   6: 10188204.155 ops/s
# Warmup Iteration   7: 10153401.554 ops/s
# Warmup Iteration   8: 8492381.783 ops/s
# Warmup Iteration   9: 10200428.480 ops/s
# Warmup Iteration  10: 10204294.895 ops/s
# Warmup Iteration  11: 10233341.495 ops/s
# Warmup Iteration  12: 10204552.820 ops/s
# Warmup Iteration  13: 10180378.075 ops/s
# Warmup Iteration  14: 10203348.043 ops/s
# Warmup Iteration  15: 10222786.963 ops/s
# Warmup Iteration  16: 10198719.093 ops/s
# Warmup Iteration  17: 10200274.058 ops/s
# Warmup Iteration  18: 10194401.068 ops/s
# Warmup Iteration  19: 10203204.009 ops/s
# Warmup Iteration  20: 10192905.554 ops/s
# Warmup Iteration  21: 10198723.947 ops/s
# Warmup Iteration  22: 10167856.331 ops/s
# Warmup Iteration  23: 10185239.865 ops/s
# Warmup Iteration  24: 10163503.832 ops/s
# Warmup Iteration  25: 10203054.236 ops/s
# Warmup Iteration  26: 10210463.577 ops/s
# Warmup Iteration  27: 10215071.299 ops/s
# Warmup Iteration  28: 10208382.384 ops/s
# Warmup Iteration  29: 10202838.296 ops/s
# Warmup Iteration  30: 10218377.464 ops/s
Iteration   1: 10215776.730 ops/s
Iteration   2: 10152180.916 ops/s
Iteration   3: 10167495.665 ops/s
Iteration   4: 10209757.411 ops/s
Iteration   5: 10194406.492 ops/s
Iteration   6: 10211245.233 ops/s
Iteration   7: 10222388.344 ops/s
Iteration   8: 10162587.849 ops/s
Iteration   9: 10209619.947 ops/s
Iteration  10: 10169430.889 ops/s
Iteration  11: 10182534.351 ops/s
Iteration  12: 10174166.207 ops/s
Iteration  13: 10156659.711 ops/s
Iteration  14: 10181031.932 ops/s
Iteration  15: 10152624.563 ops/s
Iteration  16: 10177354.679 ops/s
Iteration  17: 10154127.095 ops/s
Iteration  18: 10203335.330 ops/s
Iteration  19: 10237764.632 ops/s
Iteration  20: 10211064.699 ops/s
Iteration  21: 10190461.658 ops/s
Iteration  22: 10206775.764 ops/s
Iteration  23: 10197877.480 ops/s
Iteration  24: 10214418.363 ops/s
Iteration  25: 10187019.711 ops/s
Iteration  26: 10170356.766 ops/s
Iteration  27: 10203869.365 ops/s
Iteration  28: 10175332.353 ops/s
Iteration  29: 10197534.596 ops/s
Iteration  30: 10217165.928 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_containsAll":
  10190212.155 ±(99.9%) 15620.185 ops/s [Average]
  (min, avg, max) = (10152180.916, 10190212.155, 10237764.632), stdev = 23379.559
  CI (99.9%): [10174591.971, 10205832.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_containsAll  thrpt   30  10190212.155 ± 15620.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7485783.542 ops/s
# Warmup Iteration   2: 11238902.075 ops/s
# Warmup Iteration   3: 12908014.143 ops/s
# Warmup Iteration   4: 13015417.958 ops/s
# Warmup Iteration   5: 13037988.382 ops/s
# Warmup Iteration   6: 13027413.272 ops/s
# Warmup Iteration   7: 10888244.469 ops/s
# Warmup Iteration   8: 12982580.025 ops/s
# Warmup Iteration   9: 13002706.570 ops/s
# Warmup Iteration  10: 13040788.629 ops/s
# Warmup Iteration  11: 12980033.100 ops/s
# Warmup Iteration  12: 13013981.010 ops/s
# Warmup Iteration  13: 12971672.170 ops/s
# Warmup Iteration  14: 13017386.048 ops/s
# Warmup Iteration  15: 12931595.030 ops/s
# Warmup Iteration  16: 12992966.210 ops/s
# Warmup Iteration  17: 12993054.060 ops/s
# Warmup Iteration  18: 13025239.279 ops/s
# Warmup Iteration  19: 13047331.263 ops/s
# Warmup Iteration  20: 13031998.792 ops/s
# Warmup Iteration  21: 13000850.793 ops/s
# Warmup Iteration  22: 13005294.407 ops/s
# Warmup Iteration  23: 13036417.185 ops/s
# Warmup Iteration  24: 12957133.001 ops/s
# Warmup Iteration  25: 12921258.026 ops/s
# Warmup Iteration  26: 12933703.890 ops/s
# Warmup Iteration  27: 13017633.061 ops/s
# Warmup Iteration  28: 12994203.934 ops/s
# Warmup Iteration  29: 12970558.789 ops/s
# Warmup Iteration  30: 13034206.112 ops/s
Iteration   1: 13018571.186 ops/s
Iteration   2: 13018750.355 ops/s
Iteration   3: 13040655.108 ops/s
Iteration   4: 13013831.946 ops/s
Iteration   5: 13016226.514 ops/s
Iteration   6: 13030818.757 ops/s
Iteration   7: 12984797.266 ops/s
Iteration   8: 13019235.765 ops/s
Iteration   9: 12993103.973 ops/s
Iteration  10: 13000615.300 ops/s
Iteration  11: 12984631.520 ops/s
Iteration  12: 13000914.704 ops/s
Iteration  13: 13045498.930 ops/s
Iteration  14: 13019587.629 ops/s
Iteration  15: 13019958.321 ops/s
Iteration  16: 12983888.540 ops/s
Iteration  17: 12928012.286 ops/s
Iteration  18: 13037115.378 ops/s
Iteration  19: 13007458.844 ops/s
Iteration  20: 13024076.425 ops/s
Iteration  21: 13005316.615 ops/s
Iteration  22: 13031976.199 ops/s
Iteration  23: 13011297.601 ops/s
Iteration  24: 13088473.591 ops/s
Iteration  25: 13035613.108 ops/s
Iteration  26: 13037351.622 ops/s
Iteration  27: 13018569.697 ops/s
Iteration  28: 13050719.087 ops/s
Iteration  29: 13017799.258 ops/s
Iteration  30: 13040732.711 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_containsAllArray":
  13017519.941 ±(99.9%) 18527.264 ops/s [Average]
  (min, avg, max) = (12928012.286, 13017519.941, 13088473.591), stdev = 27730.738
  CI (99.9%): [12998992.678, 13036047.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_containsAllArray  thrpt   30  13017519.941 ± 18527.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7074630.596 ops/s
# Warmup Iteration   2: 7401330.256 ops/s
# Warmup Iteration   3: 8280999.395 ops/s
# Warmup Iteration   4: 9238505.045 ops/s
# Warmup Iteration   5: 9236701.831 ops/s
# Warmup Iteration   6: 9236882.880 ops/s
# Warmup Iteration   7: 9187483.282 ops/s
# Warmup Iteration   8: 9255243.591 ops/s
# Warmup Iteration   9: 9229253.610 ops/s
# Warmup Iteration  10: 9235761.202 ops/s
# Warmup Iteration  11: 9214393.640 ops/s
# Warmup Iteration  12: 9204088.911 ops/s
# Warmup Iteration  13: 9226916.988 ops/s
# Warmup Iteration  14: 9242494.006 ops/s
# Warmup Iteration  15: 8897007.594 ops/s
# Warmup Iteration  16: 8025735.716 ops/s
# Warmup Iteration  17: 9220827.964 ops/s
# Warmup Iteration  18: 9223856.288 ops/s
# Warmup Iteration  19: 9224723.668 ops/s
# Warmup Iteration  20: 9228364.937 ops/s
# Warmup Iteration  21: 9223391.990 ops/s
# Warmup Iteration  22: 9241525.084 ops/s
# Warmup Iteration  23: 9205401.076 ops/s
# Warmup Iteration  24: 9192037.046 ops/s
# Warmup Iteration  25: 9246617.935 ops/s
# Warmup Iteration  26: 9216510.143 ops/s
# Warmup Iteration  27: 9196976.826 ops/s
# Warmup Iteration  28: 9226300.922 ops/s
# Warmup Iteration  29: 9250631.533 ops/s
# Warmup Iteration  30: 9213531.287 ops/s
Iteration   1: 9209480.928 ops/s
Iteration   2: 9263237.384 ops/s
Iteration   3: 9199713.605 ops/s
Iteration   4: 9259192.165 ops/s
Iteration   5: 9226601.491 ops/s
Iteration   6: 9245341.292 ops/s
Iteration   7: 9192369.667 ops/s
Iteration   8: 9207640.990 ops/s
Iteration   9: 9166422.313 ops/s
Iteration  10: 9193754.840 ops/s
Iteration  11: 9254741.651 ops/s
Iteration  12: 9218976.474 ops/s
Iteration  13: 9196956.739 ops/s
Iteration  14: 9284410.311 ops/s
Iteration  15: 9258850.929 ops/s
Iteration  16: 9257286.869 ops/s
Iteration  17: 9246156.788 ops/s
Iteration  18: 9259725.571 ops/s
Iteration  19: 9248424.587 ops/s
Iteration  20: 9229910.585 ops/s
Iteration  21: 9199791.839 ops/s
Iteration  22: 9241184.490 ops/s
Iteration  23: 9237245.073 ops/s
Iteration  24: 9249608.158 ops/s
Iteration  25: 9253240.222 ops/s
Iteration  26: 9248573.554 ops/s
Iteration  27: 9215068.552 ops/s
Iteration  28: 9230240.093 ops/s
Iteration  29: 9226465.394 ops/s
Iteration  30: 9243498.351 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_containsAllIterable":
  9232137.030 ±(99.9%) 18107.339 ops/s [Average]
  (min, avg, max) = (9166422.313, 9232137.030, 9284410.311), stdev = 27102.214
  CI (99.9%): [9214029.691, 9250244.369] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  9232137.030 ± 18107.339  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4175618.303 ops/s
# Warmup Iteration   2: 10873193.235 ops/s
# Warmup Iteration   3: 11573264.379 ops/s
# Warmup Iteration   4: 11575399.634 ops/s
# Warmup Iteration   5: 11574757.274 ops/s
# Warmup Iteration   6: 9678325.830 ops/s
# Warmup Iteration   7: 11627056.279 ops/s
# Warmup Iteration   8: 11576325.707 ops/s
# Warmup Iteration   9: 11623543.660 ops/s
# Warmup Iteration  10: 11585247.549 ops/s
# Warmup Iteration  11: 11622864.200 ops/s
# Warmup Iteration  12: 11628223.512 ops/s
# Warmup Iteration  13: 11617443.326 ops/s
# Warmup Iteration  14: 11611262.055 ops/s
# Warmup Iteration  15: 11613895.756 ops/s
# Warmup Iteration  16: 11640494.841 ops/s
# Warmup Iteration  17: 11633390.976 ops/s
# Warmup Iteration  18: 11633339.209 ops/s
# Warmup Iteration  19: 11628551.702 ops/s
# Warmup Iteration  20: 11616178.316 ops/s
# Warmup Iteration  21: 11621427.523 ops/s
# Warmup Iteration  22: 11604335.523 ops/s
# Warmup Iteration  23: 11625115.712 ops/s
# Warmup Iteration  24: 11633726.262 ops/s
# Warmup Iteration  25: 11612333.178 ops/s
# Warmup Iteration  26: 11620741.117 ops/s
# Warmup Iteration  27: 11645255.069 ops/s
# Warmup Iteration  28: 11604954.753 ops/s
# Warmup Iteration  29: 11595182.669 ops/s
# Warmup Iteration  30: 11609471.312 ops/s
Iteration   1: 11543958.176 ops/s
Iteration   2: 11603701.421 ops/s
Iteration   3: 11644764.106 ops/s
Iteration   4: 11597827.562 ops/s
Iteration   5: 11634365.565 ops/s
Iteration   6: 11580906.391 ops/s
Iteration   7: 11642787.272 ops/s
Iteration   8: 11617066.581 ops/s
Iteration   9: 11598657.877 ops/s
Iteration  10: 11625671.552 ops/s
Iteration  11: 11603204.449 ops/s
Iteration  12: 11656142.352 ops/s
Iteration  13: 11608027.540 ops/s
Iteration  14: 11653982.801 ops/s
Iteration  15: 11592978.586 ops/s
Iteration  16: 11601797.627 ops/s
Iteration  17: 11628149.081 ops/s
Iteration  18: 11643116.651 ops/s
Iteration  19: 11597046.129 ops/s
Iteration  20: 11601057.794 ops/s
Iteration  21: 11618351.479 ops/s
Iteration  22: 11616109.695 ops/s
Iteration  23: 11627711.405 ops/s
Iteration  24: 11506422.531 ops/s
Iteration  25: 11649731.813 ops/s
Iteration  26: 11610742.795 ops/s
Iteration  27: 11633587.778 ops/s
Iteration  28: 11626851.055 ops/s
Iteration  29: 11586989.313 ops/s
Iteration  30: 11622291.022 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_corresponds":
  11612466.613 ±(99.9%) 21094.178 ops/s [Average]
  (min, avg, max) = (11506422.531, 11612466.613, 11656142.352), stdev = 31572.775
  CI (99.9%): [11591372.435, 11633560.791] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_corresponds  thrpt   30  11612466.613 ± 21094.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12948625.117 ops/s
# Warmup Iteration   2: 27417512.609 ops/s
# Warmup Iteration   3: 27305635.988 ops/s
# Warmup Iteration   4: 22919725.111 ops/s
# Warmup Iteration   5: 27190328.609 ops/s
# Warmup Iteration   6: 27361715.825 ops/s
# Warmup Iteration   7: 27193799.236 ops/s
# Warmup Iteration   8: 27169575.982 ops/s
# Warmup Iteration   9: 27284476.067 ops/s
# Warmup Iteration  10: 27231374.195 ops/s
# Warmup Iteration  11: 27202931.041 ops/s
# Warmup Iteration  12: 27285684.011 ops/s
# Warmup Iteration  13: 27137729.389 ops/s
# Warmup Iteration  14: 27210983.938 ops/s
# Warmup Iteration  15: 27136359.046 ops/s
# Warmup Iteration  16: 27285883.278 ops/s
# Warmup Iteration  17: 27183611.313 ops/s
# Warmup Iteration  18: 27194850.589 ops/s
# Warmup Iteration  19: 27199796.653 ops/s
# Warmup Iteration  20: 27179414.729 ops/s
# Warmup Iteration  21: 27177734.308 ops/s
# Warmup Iteration  22: 27224992.992 ops/s
# Warmup Iteration  23: 27174919.055 ops/s
# Warmup Iteration  24: 27240835.062 ops/s
# Warmup Iteration  25: 27196321.417 ops/s
# Warmup Iteration  26: 27002811.106 ops/s
# Warmup Iteration  27: 27186850.093 ops/s
# Warmup Iteration  28: 27142921.415 ops/s
# Warmup Iteration  29: 27207927.336 ops/s
# Warmup Iteration  30: 27231046.887 ops/s
Iteration   1: 27205404.327 ops/s
Iteration   2: 27197616.547 ops/s
Iteration   3: 27208653.957 ops/s
Iteration   4: 27227852.787 ops/s
Iteration   5: 27279294.338 ops/s
Iteration   6: 27202958.524 ops/s
Iteration   7: 27239907.626 ops/s
Iteration   8: 27206413.415 ops/s
Iteration   9: 27126287.907 ops/s
Iteration  10: 27193488.660 ops/s
Iteration  11: 27147097.380 ops/s
Iteration  12: 27260538.178 ops/s
Iteration  13: 27157612.054 ops/s
Iteration  14: 27164723.281 ops/s
Iteration  15: 27221959.951 ops/s
Iteration  16: 27195464.166 ops/s
Iteration  17: 27261734.720 ops/s
Iteration  18: 27233085.206 ops/s
Iteration  19: 27258293.060 ops/s
Iteration  20: 26985492.831 ops/s
Iteration  21: 27113060.988 ops/s
Iteration  22: 27230333.099 ops/s
Iteration  23: 27069792.696 ops/s
Iteration  24: 27134412.488 ops/s
Iteration  25: 27225717.364 ops/s
Iteration  26: 27051434.340 ops/s
Iteration  27: 27135925.986 ops/s
Iteration  28: 27222456.054 ops/s
Iteration  29: 27157176.108 ops/s
Iteration  30: 27243085.916 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_count":
  27185242.465 ±(99.9%) 45220.124 ops/s [Average]
  (min, avg, max) = (26985492.831, 27185242.465, 27279294.338), stdev = 67683.358
  CI (99.9%): [27140022.341, 27230462.589] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_count  thrpt   30  27185242.465 ± 45220.124  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697538.359 ops/s
# Warmup Iteration   2: 1376446.403 ops/s
# Warmup Iteration   3: 1514268.388 ops/s
# Warmup Iteration   4: 1524424.300 ops/s
# Warmup Iteration   5: 1255221.209 ops/s
# Warmup Iteration   6: 1514355.856 ops/s
# Warmup Iteration   7: 1518258.619 ops/s
# Warmup Iteration   8: 1515593.097 ops/s
# Warmup Iteration   9: 1515448.327 ops/s
# Warmup Iteration  10: 1515939.486 ops/s
# Warmup Iteration  11: 1517393.955 ops/s
# Warmup Iteration  12: 1525336.256 ops/s
# Warmup Iteration  13: 1514913.697 ops/s
# Warmup Iteration  14: 1520223.926 ops/s
# Warmup Iteration  15: 1510878.365 ops/s
# Warmup Iteration  16: 1517592.391 ops/s
# Warmup Iteration  17: 1520270.512 ops/s
# Warmup Iteration  18: 1513550.026 ops/s
# Warmup Iteration  19: 1531886.527 ops/s
# Warmup Iteration  20: 1530714.532 ops/s
# Warmup Iteration  21: 1521119.752 ops/s
# Warmup Iteration  22: 1533444.612 ops/s
# Warmup Iteration  23: 1523754.284 ops/s
# Warmup Iteration  24: 1527382.305 ops/s
# Warmup Iteration  25: 1524627.245 ops/s
# Warmup Iteration  26: 1529348.961 ops/s
# Warmup Iteration  27: 1523752.116 ops/s
# Warmup Iteration  28: 1527340.794 ops/s
# Warmup Iteration  29: 1527784.783 ops/s
# Warmup Iteration  30: 1514923.026 ops/s
Iteration   1: 1522852.652 ops/s
Iteration   2: 1526666.036 ops/s
Iteration   3: 1525332.819 ops/s
Iteration   4: 1517148.112 ops/s
Iteration   5: 1519127.308 ops/s
Iteration   6: 1521521.573 ops/s
Iteration   7: 1520068.719 ops/s
Iteration   8: 1510143.789 ops/s
Iteration   9: 1521982.156 ops/s
Iteration  10: 1516517.996 ops/s
Iteration  11: 1516536.758 ops/s
Iteration  12: 1522049.290 ops/s
Iteration  13: 1528892.403 ops/s
Iteration  14: 1523007.430 ops/s
Iteration  15: 1521805.404 ops/s
Iteration  16: 1525203.632 ops/s
Iteration  17: 1520788.617 ops/s
Iteration  18: 1532940.640 ops/s
Iteration  19: 1533078.051 ops/s
Iteration  20: 1523856.396 ops/s
Iteration  21: 1525876.607 ops/s
Iteration  22: 1521399.772 ops/s
Iteration  23: 1525620.717 ops/s
Iteration  24: 1527301.912 ops/s
Iteration  25: 1516668.744 ops/s
Iteration  26: 1528452.284 ops/s
Iteration  27: 1523522.689 ops/s
Iteration  28: 1512009.722 ops/s
Iteration  29: 1523391.510 ops/s
Iteration  30: 1519967.105 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_countBy":
  1522457.695 ±(99.9%) 3519.082 ops/s [Average]
  (min, avg, max) = (1510143.789, 1522457.695, 1533078.051), stdev = 5267.196
  CI (99.9%): [1518938.613, 1525976.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_countBy  thrpt   30  1522457.695 ± 3519.082  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 110456.845 ops/s
# Warmup Iteration   2: 185082.489 ops/s
# Warmup Iteration   3: 218284.653 ops/s
# Warmup Iteration   4: 220457.619 ops/s
# Warmup Iteration   5: 220505.254 ops/s
# Warmup Iteration   6: 194405.828 ops/s
# Warmup Iteration   7: 209406.121 ops/s
# Warmup Iteration   8: 219907.008 ops/s
# Warmup Iteration   9: 219785.830 ops/s
# Warmup Iteration  10: 219198.899 ops/s
# Warmup Iteration  11: 220151.793 ops/s
# Warmup Iteration  12: 219859.948 ops/s
# Warmup Iteration  13: 220015.187 ops/s
# Warmup Iteration  14: 219853.128 ops/s
# Warmup Iteration  15: 219965.194 ops/s
# Warmup Iteration  16: 219220.988 ops/s
# Warmup Iteration  17: 220760.162 ops/s
# Warmup Iteration  18: 221178.378 ops/s
# Warmup Iteration  19: 221200.603 ops/s
# Warmup Iteration  20: 221386.895 ops/s
# Warmup Iteration  21: 221152.286 ops/s
# Warmup Iteration  22: 220754.478 ops/s
# Warmup Iteration  23: 220842.802 ops/s
# Warmup Iteration  24: 220251.875 ops/s
# Warmup Iteration  25: 220633.919 ops/s
# Warmup Iteration  26: 220507.127 ops/s
# Warmup Iteration  27: 221208.007 ops/s
# Warmup Iteration  28: 221066.251 ops/s
# Warmup Iteration  29: 220793.242 ops/s
# Warmup Iteration  30: 220793.693 ops/s
Iteration   1: 220680.992 ops/s
Iteration   2: 222007.767 ops/s
Iteration   3: 221464.891 ops/s
Iteration   4: 221802.326 ops/s
Iteration   5: 220496.238 ops/s
Iteration   6: 221728.803 ops/s
Iteration   7: 221010.875 ops/s
Iteration   8: 220243.554 ops/s
Iteration   9: 220588.744 ops/s
Iteration  10: 221511.451 ops/s
Iteration  11: 221041.900 ops/s
Iteration  12: 220310.521 ops/s
Iteration  13: 220741.606 ops/s
Iteration  14: 220759.092 ops/s
Iteration  15: 220784.454 ops/s
Iteration  16: 220728.302 ops/s
Iteration  17: 221214.535 ops/s
Iteration  18: 221387.461 ops/s
Iteration  19: 221004.356 ops/s
Iteration  20: 221090.341 ops/s
Iteration  21: 218948.978 ops/s
Iteration  22: 221481.398 ops/s
Iteration  23: 221048.244 ops/s
Iteration  24: 220287.173 ops/s
Iteration  25: 221558.724 ops/s
Iteration  26: 220310.073 ops/s
Iteration  27: 221382.242 ops/s
Iteration  28: 221017.485 ops/s
Iteration  29: 220430.415 ops/s
Iteration  30: 220346.357 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_countByEach":
  220913.643 ±(99.9%) 413.403 ops/s [Average]
  (min, avg, max) = (218948.978, 220913.643, 222007.767), stdev = 618.763
  CI (99.9%): [220500.240, 221327.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_countByEach  thrpt   30  220913.643 ± 413.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 657534.112 ops/s
# Warmup Iteration   2: 1188216.927 ops/s
# Warmup Iteration   3: 1344304.096 ops/s
# Warmup Iteration   4: 1347068.616 ops/s
# Warmup Iteration   5: 1349546.450 ops/s
# Warmup Iteration   6: 1113923.040 ops/s
# Warmup Iteration   7: 1348752.909 ops/s
# Warmup Iteration   8: 1344188.116 ops/s
# Warmup Iteration   9: 1343574.890 ops/s
# Warmup Iteration  10: 1340644.922 ops/s
# Warmup Iteration  11: 1341961.080 ops/s
# Warmup Iteration  12: 1344323.111 ops/s
# Warmup Iteration  13: 1334011.655 ops/s
# Warmup Iteration  14: 1341250.050 ops/s
# Warmup Iteration  15: 1343887.221 ops/s
# Warmup Iteration  16: 1344936.415 ops/s
# Warmup Iteration  17: 1341527.057 ops/s
# Warmup Iteration  18: 1343969.752 ops/s
# Warmup Iteration  19: 1345181.587 ops/s
# Warmup Iteration  20: 1345046.980 ops/s
# Warmup Iteration  21: 1344478.337 ops/s
# Warmup Iteration  22: 1345873.736 ops/s
# Warmup Iteration  23: 1341333.252 ops/s
# Warmup Iteration  24: 1343816.269 ops/s
# Warmup Iteration  25: 1346499.647 ops/s
# Warmup Iteration  26: 1341662.991 ops/s
# Warmup Iteration  27: 1343251.446 ops/s
# Warmup Iteration  28: 1346366.042 ops/s
# Warmup Iteration  29: 1344122.680 ops/s
# Warmup Iteration  30: 1346301.931 ops/s
Iteration   1: 1347460.710 ops/s
Iteration   2: 1345985.702 ops/s
Iteration   3: 1346829.883 ops/s
Iteration   4: 1344278.552 ops/s
Iteration   5: 1338284.075 ops/s
Iteration   6: 1339782.198 ops/s
Iteration   7: 1337294.114 ops/s
Iteration   8: 1334681.783 ops/s
Iteration   9: 1340148.243 ops/s
Iteration  10: 1345960.032 ops/s
Iteration  11: 1345889.956 ops/s
Iteration  12: 1339550.247 ops/s
Iteration  13: 1343183.087 ops/s
Iteration  14: 1345956.485 ops/s
Iteration  15: 1340454.484 ops/s
Iteration  16: 1341395.466 ops/s
Iteration  17: 1346163.948 ops/s
Iteration  18: 1336756.577 ops/s
Iteration  19: 1340089.366 ops/s
Iteration  20: 1340421.510 ops/s
Iteration  21: 1345217.520 ops/s
Iteration  22: 1343687.378 ops/s
Iteration  23: 1347025.273 ops/s
Iteration  24: 1344844.298 ops/s
Iteration  25: 1341167.697 ops/s
Iteration  26: 1345033.555 ops/s
Iteration  27: 1342309.137 ops/s
Iteration  28: 1341490.998 ops/s
Iteration  29: 1345206.639 ops/s
Iteration  30: 1342053.622 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_countByWith":
  1342620.084 ±(99.9%) 2271.522 ops/s [Average]
  (min, avg, max) = (1334681.783, 1342620.084, 1347460.710), stdev = 3399.908
  CI (99.9%): [1340348.562, 1344891.607] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_countByWith  thrpt   30  1342620.084 ± 2271.522  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17635633.126 ops/s
# Warmup Iteration   2: 32461655.754 ops/s
# Warmup Iteration   3: 31281840.394 ops/s
# Warmup Iteration   4: 31439655.355 ops/s
# Warmup Iteration   5: 26318208.029 ops/s
# Warmup Iteration   6: 31406340.381 ops/s
# Warmup Iteration   7: 31521293.428 ops/s
# Warmup Iteration   8: 31436874.507 ops/s
# Warmup Iteration   9: 31440440.459 ops/s
# Warmup Iteration  10: 31337361.790 ops/s
# Warmup Iteration  11: 31401279.833 ops/s
# Warmup Iteration  12: 31520900.824 ops/s
# Warmup Iteration  13: 31473989.105 ops/s
# Warmup Iteration  14: 31393888.502 ops/s
# Warmup Iteration  15: 31413248.696 ops/s
# Warmup Iteration  16: 31470084.559 ops/s
# Warmup Iteration  17: 31410946.216 ops/s
# Warmup Iteration  18: 31255590.306 ops/s
# Warmup Iteration  19: 31370114.313 ops/s
# Warmup Iteration  20: 31424992.814 ops/s
# Warmup Iteration  21: 31427392.066 ops/s
# Warmup Iteration  22: 31440036.678 ops/s
# Warmup Iteration  23: 31416852.888 ops/s
# Warmup Iteration  24: 31477479.188 ops/s
# Warmup Iteration  25: 31358747.681 ops/s
# Warmup Iteration  26: 31436588.052 ops/s
# Warmup Iteration  27: 31442594.682 ops/s
# Warmup Iteration  28: 31429354.849 ops/s
# Warmup Iteration  29: 31390187.309 ops/s
# Warmup Iteration  30: 31384868.224 ops/s
Iteration   1: 31505792.663 ops/s
Iteration   2: 31424677.335 ops/s
Iteration   3: 31469617.122 ops/s
Iteration   4: 31340546.718 ops/s
Iteration   5: 31529054.620 ops/s
Iteration   6: 31446893.810 ops/s
Iteration   7: 31294007.486 ops/s
Iteration   8: 31554906.007 ops/s
Iteration   9: 31460481.434 ops/s
Iteration  10: 31493372.873 ops/s
Iteration  11: 31489565.456 ops/s
Iteration  12: 31469256.817 ops/s
Iteration  13: 31456815.374 ops/s
Iteration  14: 31349770.980 ops/s
Iteration  15: 31350568.833 ops/s
Iteration  16: 31477599.367 ops/s
Iteration  17: 31181784.998 ops/s
Iteration  18: 31224897.198 ops/s
Iteration  19: 31403805.532 ops/s
Iteration  20: 31305119.189 ops/s
Iteration  21: 31544531.718 ops/s
Iteration  22: 31477576.826 ops/s
Iteration  23: 31487909.817 ops/s
Iteration  24: 31441402.381 ops/s
Iteration  25: 31441694.898 ops/s
Iteration  26: 31529645.484 ops/s
Iteration  27: 31474666.309 ops/s
Iteration  28: 31435524.800 ops/s
Iteration  29: 31511769.172 ops/s
Iteration  30: 31458990.598 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_countWith":
  31434408.194 ±(99.9%) 61178.387 ops/s [Average]
  (min, avg, max) = (31181784.998, 31434408.194, 31554906.007), stdev = 91568.937
  CI (99.9%): [31373229.807, 31495586.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_countWith  thrpt   30  31434408.194 ± 61178.387  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13079030.145 ops/s
# Warmup Iteration   2: 27445440.003 ops/s
# Warmup Iteration   3: 27410460.892 ops/s
# Warmup Iteration   4: 23097458.846 ops/s
# Warmup Iteration   5: 27539613.192 ops/s
# Warmup Iteration   6: 27321886.827 ops/s
# Warmup Iteration   7: 27464989.776 ops/s
# Warmup Iteration   8: 27479757.328 ops/s
# Warmup Iteration   9: 27403110.205 ops/s
# Warmup Iteration  10: 27431609.370 ops/s
# Warmup Iteration  11: 27401361.850 ops/s
# Warmup Iteration  12: 27288221.708 ops/s
# Warmup Iteration  13: 27491850.336 ops/s
# Warmup Iteration  14: 27511612.454 ops/s
# Warmup Iteration  15: 27460224.364 ops/s
# Warmup Iteration  16: 27388205.180 ops/s
# Warmup Iteration  17: 27514808.109 ops/s
# Warmup Iteration  18: 27449628.977 ops/s
# Warmup Iteration  19: 27496590.359 ops/s
# Warmup Iteration  20: 27495107.413 ops/s
# Warmup Iteration  21: 27394621.621 ops/s
# Warmup Iteration  22: 27369141.530 ops/s
# Warmup Iteration  23: 27419908.308 ops/s
# Warmup Iteration  24: 27440541.575 ops/s
# Warmup Iteration  25: 27426680.920 ops/s
# Warmup Iteration  26: 27524035.472 ops/s
# Warmup Iteration  27: 27300494.341 ops/s
# Warmup Iteration  28: 27343387.455 ops/s
# Warmup Iteration  29: 27387446.371 ops/s
# Warmup Iteration  30: 27350562.336 ops/s
Iteration   1: 27428013.874 ops/s
Iteration   2: 27453111.205 ops/s
Iteration   3: 27411885.775 ops/s
Iteration   4: 27379505.884 ops/s
Iteration   5: 27426114.370 ops/s
Iteration   6: 27427457.939 ops/s
Iteration   7: 27365623.888 ops/s
Iteration   8: 27498905.165 ops/s
Iteration   9: 27367000.767 ops/s
Iteration  10: 27520062.098 ops/s
Iteration  11: 27433730.843 ops/s
Iteration  12: 27494014.509 ops/s
Iteration  13: 27363741.813 ops/s
Iteration  14: 27541137.406 ops/s
Iteration  15: 27444254.585 ops/s
Iteration  16: 27371429.943 ops/s
Iteration  17: 27463413.824 ops/s
Iteration  18: 27535802.895 ops/s
Iteration  19: 27519443.260 ops/s
Iteration  20: 27380853.184 ops/s
Iteration  21: 27455846.819 ops/s
Iteration  22: 27471944.833 ops/s
Iteration  23: 27451361.271 ops/s
Iteration  24: 27302617.720 ops/s
Iteration  25: 27452952.719 ops/s
Iteration  26: 27411030.403 ops/s
Iteration  27: 27489368.787 ops/s
Iteration  28: 27480032.148 ops/s
Iteration  29: 27445377.858 ops/s
Iteration  30: 27429635.742 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detect":
  27440522.384 ±(99.9%) 38151.397 ops/s [Average]
  (min, avg, max) = (27302617.720, 27440522.384, 27541137.406), stdev = 57103.219
  CI (99.9%): [27402370.988, 27478673.781] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_detect  thrpt   30  27440522.384 ± 38151.397  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13232268.378 ops/s
# Warmup Iteration   2: 28408594.356 ops/s
# Warmup Iteration   3: 28024341.326 ops/s
# Warmup Iteration   4: 23900017.823 ops/s
# Warmup Iteration   5: 28254078.998 ops/s
# Warmup Iteration   6: 28255649.407 ops/s
# Warmup Iteration   7: 28100918.577 ops/s
# Warmup Iteration   8: 28102382.078 ops/s
# Warmup Iteration   9: 28069575.656 ops/s
# Warmup Iteration  10: 28233382.353 ops/s
# Warmup Iteration  11: 28174975.452 ops/s
# Warmup Iteration  12: 28203439.691 ops/s
# Warmup Iteration  13: 28233752.987 ops/s
# Warmup Iteration  14: 28154783.066 ops/s
# Warmup Iteration  15: 28189479.939 ops/s
# Warmup Iteration  16: 28311057.045 ops/s
# Warmup Iteration  17: 28228257.087 ops/s
# Warmup Iteration  18: 28220330.188 ops/s
# Warmup Iteration  19: 28176429.481 ops/s
# Warmup Iteration  20: 28151591.121 ops/s
# Warmup Iteration  21: 28082539.876 ops/s
# Warmup Iteration  22: 28222989.152 ops/s
# Warmup Iteration  23: 28010531.458 ops/s
# Warmup Iteration  24: 28144933.417 ops/s
# Warmup Iteration  25: 28183251.514 ops/s
# Warmup Iteration  26: 28222474.781 ops/s
# Warmup Iteration  27: 28223936.088 ops/s
# Warmup Iteration  28: 28148063.169 ops/s
# Warmup Iteration  29: 28020334.509 ops/s
# Warmup Iteration  30: 28167157.257 ops/s
Iteration   1: 28192073.306 ops/s
Iteration   2: 28197468.810 ops/s
Iteration   3: 28192877.482 ops/s
Iteration   4: 28113823.816 ops/s
Iteration   5: 28195959.213 ops/s
Iteration   6: 28183356.963 ops/s
Iteration   7: 28171844.964 ops/s
Iteration   8: 27938089.664 ops/s
Iteration   9: 28013803.830 ops/s
Iteration  10: 28155825.429 ops/s
Iteration  11: 27859951.136 ops/s
Iteration  12: 28021711.562 ops/s
Iteration  13: 27959957.364 ops/s
Iteration  14: 28162955.867 ops/s
Iteration  15: 28248874.357 ops/s
Iteration  16: 28212736.959 ops/s
Iteration  17: 28185901.579 ops/s
Iteration  18: 28255229.717 ops/s
Iteration  19: 28047638.130 ops/s
Iteration  20: 27953788.925 ops/s
Iteration  21: 28136734.457 ops/s
Iteration  22: 28149480.417 ops/s
Iteration  23: 28291850.166 ops/s
Iteration  24: 28065189.978 ops/s
Iteration  25: 28218798.562 ops/s
Iteration  26: 28309420.754 ops/s
Iteration  27: 28231771.704 ops/s
Iteration  28: 28248815.919 ops/s
Iteration  29: 28210559.339 ops/s
Iteration  30: 28168725.154 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectIfNone":
  28143173.851 ±(99.9%) 74748.120 ops/s [Average]
  (min, avg, max) = (27859951.136, 28143173.851, 28309420.754), stdev = 111879.476
  CI (99.9%): [28068425.730, 28217921.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_detectIfNone  thrpt   30  28143173.851 ± 74748.120  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46947614.438 ops/s
# Warmup Iteration   2: 64942563.330 ops/s
# Warmup Iteration   3: 72366764.636 ops/s
# Warmup Iteration   4: 72181878.451 ops/s
# Warmup Iteration   5: 72364790.126 ops/s
# Warmup Iteration   6: 71001253.274 ops/s
# Warmup Iteration   7: 69319896.331 ops/s
# Warmup Iteration   8: 64217543.985 ops/s
# Warmup Iteration   9: 72565476.796 ops/s
# Warmup Iteration  10: 72332904.150 ops/s
# Warmup Iteration  11: 72608833.233 ops/s
# Warmup Iteration  12: 72535509.302 ops/s
# Warmup Iteration  13: 72345584.883 ops/s
# Warmup Iteration  14: 72655906.778 ops/s
# Warmup Iteration  15: 72524458.567 ops/s
# Warmup Iteration  16: 72319631.189 ops/s
# Warmup Iteration  17: 72780912.439 ops/s
# Warmup Iteration  18: 72543775.994 ops/s
# Warmup Iteration  19: 72424673.553 ops/s
# Warmup Iteration  20: 72413003.549 ops/s
# Warmup Iteration  21: 72278459.942 ops/s
# Warmup Iteration  22: 72601496.462 ops/s
# Warmup Iteration  23: 72445693.241 ops/s
# Warmup Iteration  24: 72809426.340 ops/s
# Warmup Iteration  25: 72464777.967 ops/s
# Warmup Iteration  26: 72415217.786 ops/s
# Warmup Iteration  27: 72468551.513 ops/s
# Warmup Iteration  28: 72282710.158 ops/s
# Warmup Iteration  29: 72339484.805 ops/s
# Warmup Iteration  30: 72332396.099 ops/s
Iteration   1: 72666097.860 ops/s
Iteration   2: 72081294.431 ops/s
Iteration   3: 72639240.293 ops/s
Iteration   4: 72382195.571 ops/s
Iteration   5: 72724891.061 ops/s
Iteration   6: 72711863.148 ops/s
Iteration   7: 72179852.256 ops/s
Iteration   8: 72767031.284 ops/s
Iteration   9: 72287367.186 ops/s
Iteration  10: 72878828.291 ops/s
Iteration  11: 72741441.673 ops/s
Iteration  12: 72152209.264 ops/s
Iteration  13: 72610347.893 ops/s
Iteration  14: 72127646.461 ops/s
Iteration  15: 72419750.826 ops/s
Iteration  16: 72260118.839 ops/s
Iteration  17: 72073990.749 ops/s
Iteration  18: 72644699.265 ops/s
Iteration  19: 72203461.348 ops/s
Iteration  20: 72858700.695 ops/s
Iteration  21: 72515875.961 ops/s
Iteration  22: 72554131.965 ops/s
Iteration  23: 72055216.267 ops/s
Iteration  24: 72328063.918 ops/s
Iteration  25: 72225014.812 ops/s
Iteration  26: 72682306.966 ops/s
Iteration  27: 72475637.811 ops/s
Iteration  28: 72159369.948 ops/s
Iteration  29: 72242122.415 ops/s
Iteration  30: 71379644.011 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectIndex":
  72400947.082 ±(99.9%) 214552.271 ops/s [Average]
  (min, avg, max) = (71379644.011, 72400947.082, 72878828.291), stdev = 321131.763
  CI (99.9%): [72186394.811, 72615499.353] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_detectIndex  thrpt   30  72400947.082 ± 214552.271  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31327064.061 ops/s
# Warmup Iteration   2: 34136734.910 ops/s
# Warmup Iteration   3: 48859290.837 ops/s
# Warmup Iteration   4: 48716227.317 ops/s
# Warmup Iteration   5: 48556941.238 ops/s
# Warmup Iteration   6: 48731961.744 ops/s
# Warmup Iteration   7: 48608839.387 ops/s
# Warmup Iteration   8: 48693526.415 ops/s
# Warmup Iteration   9: 48785426.129 ops/s
# Warmup Iteration  10: 48931776.686 ops/s
# Warmup Iteration  11: 41325855.617 ops/s
# Warmup Iteration  12: 48565516.270 ops/s
# Warmup Iteration  13: 48948959.041 ops/s
# Warmup Iteration  14: 48903485.820 ops/s
# Warmup Iteration  15: 48584042.245 ops/s
# Warmup Iteration  16: 48769220.124 ops/s
# Warmup Iteration  17: 48736233.540 ops/s
# Warmup Iteration  18: 48830779.757 ops/s
# Warmup Iteration  19: 48558225.453 ops/s
# Warmup Iteration  20: 48759364.275 ops/s
# Warmup Iteration  21: 48901514.342 ops/s
# Warmup Iteration  22: 48718096.780 ops/s
# Warmup Iteration  23: 48874598.245 ops/s
# Warmup Iteration  24: 48547048.308 ops/s
# Warmup Iteration  25: 48868171.253 ops/s
# Warmup Iteration  26: 48867008.965 ops/s
# Warmup Iteration  27: 48990079.609 ops/s
# Warmup Iteration  28: 48856388.705 ops/s
# Warmup Iteration  29: 48934852.009 ops/s
# Warmup Iteration  30: 48831258.867 ops/s
Iteration   1: 48840187.155 ops/s
Iteration   2: 48669578.716 ops/s
Iteration   3: 48880479.946 ops/s
Iteration   4: 48905137.436 ops/s
Iteration   5: 48977771.547 ops/s
Iteration   6: 48649709.134 ops/s
Iteration   7: 48769781.502 ops/s
Iteration   8: 49022110.303 ops/s
Iteration   9: 48860668.475 ops/s
Iteration  10: 48152690.484 ops/s
Iteration  11: 48399516.150 ops/s
Iteration  12: 48284130.925 ops/s
Iteration  13: 47937170.158 ops/s
Iteration  14: 48480294.178 ops/s
Iteration  15: 48785810.757 ops/s
Iteration  16: 48844072.008 ops/s
Iteration  17: 48742060.434 ops/s
Iteration  18: 48863192.419 ops/s
Iteration  19: 48993384.265 ops/s
Iteration  20: 49009892.668 ops/s
Iteration  21: 48793176.494 ops/s
Iteration  22: 48598338.391 ops/s
Iteration  23: 48673696.550 ops/s
Iteration  24: 48701856.762 ops/s
Iteration  25: 48880829.803 ops/s
Iteration  26: 48816684.491 ops/s
Iteration  27: 48891425.691 ops/s
Iteration  28: 48744147.085 ops/s
Iteration  29: 48853163.831 ops/s
Iteration  30: 48886299.069 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectLastIndex":
  48730241.894 ±(99.9%) 169942.523 ops/s [Average]
  (min, avg, max) = (47937170.158, 48730241.894, 49022110.303), stdev = 254361.988
  CI (99.9%): [48560299.371, 48900184.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  48730241.894 ± 169942.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8012017.555 ops/s
# Warmup Iteration   2: 16242644.335 ops/s
# Warmup Iteration   3: 14085975.519 ops/s
# Warmup Iteration   4: 16510105.187 ops/s
# Warmup Iteration   5: 16523655.631 ops/s
# Warmup Iteration   6: 16506202.020 ops/s
# Warmup Iteration   7: 16573861.918 ops/s
# Warmup Iteration   8: 16542302.236 ops/s
# Warmup Iteration   9: 16550254.806 ops/s
# Warmup Iteration  10: 16553660.245 ops/s
# Warmup Iteration  11: 16609546.043 ops/s
# Warmup Iteration  12: 16488875.188 ops/s
# Warmup Iteration  13: 16593903.082 ops/s
# Warmup Iteration  14: 16625032.954 ops/s
# Warmup Iteration  15: 16566095.911 ops/s
# Warmup Iteration  16: 16621440.789 ops/s
# Warmup Iteration  17: 16588734.344 ops/s
# Warmup Iteration  18: 16536480.982 ops/s
# Warmup Iteration  19: 16565417.467 ops/s
# Warmup Iteration  20: 16556045.943 ops/s
# Warmup Iteration  21: 16577227.894 ops/s
# Warmup Iteration  22: 16610702.072 ops/s
# Warmup Iteration  23: 16576477.527 ops/s
# Warmup Iteration  24: 16577344.262 ops/s
# Warmup Iteration  25: 16574351.451 ops/s
# Warmup Iteration  26: 16565803.018 ops/s
# Warmup Iteration  27: 16496436.726 ops/s
# Warmup Iteration  28: 16605858.112 ops/s
# Warmup Iteration  29: 16583165.229 ops/s
# Warmup Iteration  30: 16558922.817 ops/s
Iteration   1: 16482779.344 ops/s
Iteration   2: 16559707.429 ops/s
Iteration   3: 16581770.385 ops/s
Iteration   4: 16585039.896 ops/s
Iteration   5: 16600511.828 ops/s
Iteration   6: 16535241.275 ops/s
Iteration   7: 16530941.600 ops/s
Iteration   8: 16523885.916 ops/s
Iteration   9: 16589147.770 ops/s
Iteration  10: 16588510.671 ops/s
Iteration  11: 16605642.694 ops/s
Iteration  12: 16634339.266 ops/s
Iteration  13: 16610430.680 ops/s
Iteration  14: 16630003.928 ops/s
Iteration  15: 16519743.538 ops/s
Iteration  16: 16592649.382 ops/s
Iteration  17: 16583612.214 ops/s
Iteration  18: 16594171.477 ops/s
Iteration  19: 16552538.248 ops/s
Iteration  20: 16614354.161 ops/s
Iteration  21: 16588514.521 ops/s
Iteration  22: 16594198.706 ops/s
Iteration  23: 16579600.051 ops/s
Iteration  24: 16573577.493 ops/s
Iteration  25: 16516742.439 ops/s
Iteration  26: 16585681.086 ops/s
Iteration  27: 16576654.179 ops/s
Iteration  28: 16580971.550 ops/s
Iteration  29: 16576459.483 ops/s
Iteration  30: 16564827.762 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectWith":
  16575074.966 ±(99.9%) 23170.759 ops/s [Average]
  (min, avg, max) = (16482779.344, 16575074.966, 16634339.266), stdev = 34680.904
  CI (99.9%): [16551904.207, 16598245.725] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_detectWith  thrpt   30  16575074.966 ± 23170.759  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9468224.486 ops/s
# Warmup Iteration   2: 18764911.561 ops/s
# Warmup Iteration   3: 18970177.923 ops/s
# Warmup Iteration   4: 16086593.202 ops/s
# Warmup Iteration   5: 19039739.660 ops/s
# Warmup Iteration   6: 19016405.263 ops/s
# Warmup Iteration   7: 19099240.732 ops/s
# Warmup Iteration   8: 19092351.430 ops/s
# Warmup Iteration   9: 19109298.581 ops/s
# Warmup Iteration  10: 19095271.374 ops/s
# Warmup Iteration  11: 19036176.395 ops/s
# Warmup Iteration  12: 19082065.804 ops/s
# Warmup Iteration  13: 18999592.152 ops/s
# Warmup Iteration  14: 19051770.061 ops/s
# Warmup Iteration  15: 19056150.896 ops/s
# Warmup Iteration  16: 19015699.353 ops/s
# Warmup Iteration  17: 19076735.211 ops/s
# Warmup Iteration  18: 19035002.988 ops/s
# Warmup Iteration  19: 19018709.191 ops/s
# Warmup Iteration  20: 19006716.725 ops/s
# Warmup Iteration  21: 19064735.349 ops/s
# Warmup Iteration  22: 19097425.833 ops/s
# Warmup Iteration  23: 19112543.223 ops/s
# Warmup Iteration  24: 19105734.419 ops/s
# Warmup Iteration  25: 19118793.414 ops/s
# Warmup Iteration  26: 19105319.952 ops/s
# Warmup Iteration  27: 19079996.236 ops/s
# Warmup Iteration  28: 19056317.296 ops/s
# Warmup Iteration  29: 19068131.862 ops/s
# Warmup Iteration  30: 19049037.308 ops/s
Iteration   1: 19004585.909 ops/s
Iteration   2: 19081283.575 ops/s
Iteration   3: 18927204.205 ops/s
Iteration   4: 19070683.969 ops/s
Iteration   5: 19050806.307 ops/s
Iteration   6: 19111932.257 ops/s
Iteration   7: 19007346.459 ops/s
Iteration   8: 19111441.404 ops/s
Iteration   9: 19023984.238 ops/s
Iteration  10: 18933940.911 ops/s
Iteration  11: 18917018.002 ops/s
Iteration  12: 19065823.954 ops/s
Iteration  13: 19021664.401 ops/s
Iteration  14: 19125468.156 ops/s
Iteration  15: 19032434.355 ops/s
Iteration  16: 19071207.928 ops/s
Iteration  17: 19099190.070 ops/s
Iteration  18: 19111453.520 ops/s
Iteration  19: 19045065.696 ops/s
Iteration  20: 18988613.505 ops/s
Iteration  21: 19005371.500 ops/s
Iteration  22: 19133150.669 ops/s
Iteration  23: 19055816.056 ops/s
Iteration  24: 19098955.932 ops/s
Iteration  25: 19066152.674 ops/s
Iteration  26: 18997062.566 ops/s
Iteration  27: 19059123.164 ops/s
Iteration  28: 18998499.977 ops/s
Iteration  29: 19088614.494 ops/s
Iteration  30: 19131401.184 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_detectWithIfNone":
  19047843.235 ±(99.9%) 39704.379 ops/s [Average]
  (min, avg, max) = (18917018.002, 19047843.235, 19133150.669), stdev = 59427.650
  CI (99.9%): [19008138.856, 19087547.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  19047843.235 ± 39704.379  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1591543.098 ops/s
# Warmup Iteration   2: 3284001.203 ops/s
# Warmup Iteration   3: 3404789.985 ops/s
# Warmup Iteration   4: 3432247.519 ops/s
# Warmup Iteration   5: 2873361.505 ops/s
# Warmup Iteration   6: 3436145.620 ops/s
# Warmup Iteration   7: 3429667.983 ops/s
# Warmup Iteration   8: 3417504.308 ops/s
# Warmup Iteration   9: 3435134.173 ops/s
# Warmup Iteration  10: 3431368.318 ops/s
# Warmup Iteration  11: 3439491.498 ops/s
# Warmup Iteration  12: 3427558.012 ops/s
# Warmup Iteration  13: 3420855.029 ops/s
# Warmup Iteration  14: 3433519.419 ops/s
# Warmup Iteration  15: 3423486.739 ops/s
# Warmup Iteration  16: 3441930.454 ops/s
# Warmup Iteration  17: 3436216.456 ops/s
# Warmup Iteration  18: 3426669.344 ops/s
# Warmup Iteration  19: 3417606.333 ops/s
# Warmup Iteration  20: 3407349.242 ops/s
# Warmup Iteration  21: 3433336.821 ops/s
# Warmup Iteration  22: 3420158.791 ops/s
# Warmup Iteration  23: 3423693.516 ops/s
# Warmup Iteration  24: 3425301.193 ops/s
# Warmup Iteration  25: 3433625.870 ops/s
# Warmup Iteration  26: 3436385.337 ops/s
# Warmup Iteration  27: 3420680.085 ops/s
# Warmup Iteration  28: 3417036.926 ops/s
# Warmup Iteration  29: 3439731.596 ops/s
# Warmup Iteration  30: 3434230.852 ops/s
Iteration   1: 3429246.886 ops/s
Iteration   2: 3430961.013 ops/s
Iteration   3: 3444555.044 ops/s
Iteration   4: 3421268.573 ops/s
Iteration   5: 3433611.592 ops/s
Iteration   6: 3430723.408 ops/s
Iteration   7: 3434690.524 ops/s
Iteration   8: 3418956.886 ops/s
Iteration   9: 3422062.909 ops/s
Iteration  10: 3434011.992 ops/s
Iteration  11: 3430036.163 ops/s
Iteration  12: 3422964.686 ops/s
Iteration  13: 3428015.902 ops/s
Iteration  14: 3435622.574 ops/s
Iteration  15: 3416908.710 ops/s
Iteration  16: 3418159.628 ops/s
Iteration  17: 3441275.707 ops/s
Iteration  18: 3440847.011 ops/s
Iteration  19: 3428553.714 ops/s
Iteration  20: 3425801.705 ops/s
Iteration  21: 3436400.062 ops/s
Iteration  22: 3423157.985 ops/s
Iteration  23: 3435417.267 ops/s
Iteration  24: 3442992.513 ops/s
Iteration  25: 3444256.311 ops/s
Iteration  26: 3432143.626 ops/s
Iteration  27: 3418659.326 ops/s
Iteration  28: 3436151.721 ops/s
Iteration  29: 3435240.413 ops/s
Iteration  30: 3441322.961 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_distinct":
  3431133.894 ±(99.9%) 5499.120 ops/s [Average]
  (min, avg, max) = (3416908.710, 3431133.894, 3444555.044), stdev = 8230.824
  CI (99.9%): [3425634.774, 3436633.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_distinct  thrpt   30  3431133.894 ± 5499.120  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4154026.681 ops/s
# Warmup Iteration   2: 9014429.126 ops/s
# Warmup Iteration   3: 8876914.300 ops/s
# Warmup Iteration   4: 7539297.223 ops/s
# Warmup Iteration   5: 8764912.977 ops/s
# Warmup Iteration   6: 8842903.790 ops/s
# Warmup Iteration   7: 8854264.051 ops/s
# Warmup Iteration   8: 8832366.310 ops/s
# Warmup Iteration   9: 8840946.371 ops/s
# Warmup Iteration  10: 8933652.175 ops/s
# Warmup Iteration  11: 8831057.312 ops/s
# Warmup Iteration  12: 8855052.282 ops/s
# Warmup Iteration  13: 8859012.320 ops/s
# Warmup Iteration  14: 8847612.839 ops/s
# Warmup Iteration  15: 8828048.744 ops/s
# Warmup Iteration  16: 8814867.122 ops/s
# Warmup Iteration  17: 8879698.311 ops/s
# Warmup Iteration  18: 8854176.518 ops/s
# Warmup Iteration  19: 8867482.156 ops/s
# Warmup Iteration  20: 8880534.415 ops/s
# Warmup Iteration  21: 8847358.066 ops/s
# Warmup Iteration  22: 8912603.629 ops/s
# Warmup Iteration  23: 8927694.825 ops/s
# Warmup Iteration  24: 8935114.701 ops/s
# Warmup Iteration  25: 8971508.723 ops/s
# Warmup Iteration  26: 8941211.492 ops/s
# Warmup Iteration  27: 8873727.947 ops/s
# Warmup Iteration  28: 8868585.361 ops/s
# Warmup Iteration  29: 8865041.497 ops/s
# Warmup Iteration  30: 8845306.207 ops/s
Iteration   1: 8857553.793 ops/s
Iteration   2: 8955619.316 ops/s
Iteration   3: 8977800.292 ops/s
Iteration   4: 8883286.234 ops/s
Iteration   5: 8940228.834 ops/s
Iteration   6: 8953462.906 ops/s
Iteration   7: 8888845.536 ops/s
Iteration   8: 8876402.192 ops/s
Iteration   9: 8856793.341 ops/s
Iteration  10: 8842988.097 ops/s
Iteration  11: 8905321.055 ops/s
Iteration  12: 8895455.725 ops/s
Iteration  13: 8917280.114 ops/s
Iteration  14: 8912116.621 ops/s
Iteration  15: 8908987.215 ops/s
Iteration  16: 8913892.662 ops/s
Iteration  17: 8917797.349 ops/s
Iteration  18: 8823099.468 ops/s
Iteration  19: 8884841.392 ops/s
Iteration  20: 8880676.096 ops/s
Iteration  21: 8870765.877 ops/s
Iteration  22: 8869438.561 ops/s
Iteration  23: 8869375.958 ops/s
Iteration  24: 8911654.339 ops/s
Iteration  25: 8888621.420 ops/s
Iteration  26: 8866114.153 ops/s
Iteration  27: 8947012.464 ops/s
Iteration  28: 8921753.423 ops/s
Iteration  29: 8922707.702 ops/s
Iteration  30: 8975797.731 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_distinctBy":
  8901189.662 ±(99.9%) 25470.060 ops/s [Average]
  (min, avg, max) = (8823099.468, 8901189.662, 8977800.292), stdev = 38122.389
  CI (99.9%): [8875719.603, 8926659.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_distinctBy  thrpt   30  8901189.662 ± 25470.060  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4102651.339 ops/s
# Warmup Iteration   2: 8470004.457 ops/s
# Warmup Iteration   3: 8475888.992 ops/s
# Warmup Iteration   4: 7208196.573 ops/s
# Warmup Iteration   5: 8526757.359 ops/s
# Warmup Iteration   6: 8474545.846 ops/s
# Warmup Iteration   7: 8483834.198 ops/s
# Warmup Iteration   8: 8547449.230 ops/s
# Warmup Iteration   9: 8493962.151 ops/s
# Warmup Iteration  10: 8511179.844 ops/s
# Warmup Iteration  11: 8508495.863 ops/s
# Warmup Iteration  12: 8475785.430 ops/s
# Warmup Iteration  13: 8529425.696 ops/s
# Warmup Iteration  14: 8486425.669 ops/s
# Warmup Iteration  15: 8483146.178 ops/s
# Warmup Iteration  16: 8446475.055 ops/s
# Warmup Iteration  17: 8535094.311 ops/s
# Warmup Iteration  18: 8541771.137 ops/s
# Warmup Iteration  19: 8466431.901 ops/s
# Warmup Iteration  20: 8465995.124 ops/s
# Warmup Iteration  21: 8536629.270 ops/s
# Warmup Iteration  22: 8503175.784 ops/s
# Warmup Iteration  23: 8439944.888 ops/s
# Warmup Iteration  24: 8508809.695 ops/s
# Warmup Iteration  25: 8499883.208 ops/s
# Warmup Iteration  26: 8483010.420 ops/s
# Warmup Iteration  27: 8504985.224 ops/s
# Warmup Iteration  28: 8522607.504 ops/s
# Warmup Iteration  29: 8502288.497 ops/s
# Warmup Iteration  30: 8505200.455 ops/s
Iteration   1: 8499347.946 ops/s
Iteration   2: 8517965.022 ops/s
Iteration   3: 8524182.136 ops/s
Iteration   4: 8505533.874 ops/s
Iteration   5: 8504878.187 ops/s
Iteration   6: 8507597.948 ops/s
Iteration   7: 8492040.524 ops/s
Iteration   8: 8562110.322 ops/s
Iteration   9: 8543572.490 ops/s
Iteration  10: 8568463.683 ops/s
Iteration  11: 8517673.319 ops/s
Iteration  12: 8501571.060 ops/s
Iteration  13: 8514448.133 ops/s
Iteration  14: 8534175.489 ops/s
Iteration  15: 8549804.968 ops/s
Iteration  16: 8492811.349 ops/s
Iteration  17: 8495080.880 ops/s
Iteration  18: 8520682.965 ops/s
Iteration  19: 8507341.577 ops/s
Iteration  20: 8502258.527 ops/s
Iteration  21: 8479905.028 ops/s
Iteration  22: 8545312.422 ops/s
Iteration  23: 8486223.512 ops/s
Iteration  24: 8538411.702 ops/s
Iteration  25: 8485709.574 ops/s
Iteration  26: 8531782.508 ops/s
Iteration  27: 8492222.587 ops/s
Iteration  28: 8485108.784 ops/s
Iteration  29: 8497200.109 ops/s
Iteration  30: 8494309.111 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  8513257.525 ±(99.9%) 16007.769 ops/s [Average]
  (min, avg, max) = (8479905.028, 8513257.525, 8568463.683), stdev = 23959.677
  CI (99.9%): [8497249.755, 8529265.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  8513257.525 ± 16007.769  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 980260.777 ops/s
# Warmup Iteration   2: 1093000.076 ops/s
# Warmup Iteration   3: 1536733.985 ops/s
# Warmup Iteration   4: 1537434.145 ops/s
# Warmup Iteration   5: 1526221.369 ops/s
# Warmup Iteration   6: 1537219.598 ops/s
# Warmup Iteration   7: 1539712.810 ops/s
# Warmup Iteration   8: 1535330.256 ops/s
# Warmup Iteration   9: 1536825.142 ops/s
# Warmup Iteration  10: 1438480.060 ops/s
# Warmup Iteration  11: 1351491.741 ops/s
# Warmup Iteration  12: 1532860.102 ops/s
# Warmup Iteration  13: 1534045.022 ops/s
# Warmup Iteration  14: 1532827.134 ops/s
# Warmup Iteration  15: 1534231.342 ops/s
# Warmup Iteration  16: 1534208.357 ops/s
# Warmup Iteration  17: 1530331.431 ops/s
# Warmup Iteration  18: 1527663.757 ops/s
# Warmup Iteration  19: 1531071.068 ops/s
# Warmup Iteration  20: 1530481.324 ops/s
# Warmup Iteration  21: 1530404.856 ops/s
# Warmup Iteration  22: 1534728.338 ops/s
# Warmup Iteration  23: 1531881.879 ops/s
# Warmup Iteration  24: 1525031.264 ops/s
# Warmup Iteration  25: 1529988.498 ops/s
# Warmup Iteration  26: 1531892.048 ops/s
# Warmup Iteration  27: 1532765.157 ops/s
# Warmup Iteration  28: 1528250.586 ops/s
# Warmup Iteration  29: 1531607.769 ops/s
# Warmup Iteration  30: 1530426.116 ops/s
Iteration   1: 1532380.971 ops/s
Iteration   2: 1527383.323 ops/s
Iteration   3: 1533812.062 ops/s
Iteration   4: 1528571.501 ops/s
Iteration   5: 1524200.893 ops/s
Iteration   6: 1519419.628 ops/s
Iteration   7: 1531159.703 ops/s
Iteration   8: 1535822.929 ops/s
Iteration   9: 1534441.585 ops/s
Iteration  10: 1534412.422 ops/s
Iteration  11: 1529876.432 ops/s
Iteration  12: 1527679.162 ops/s
Iteration  13: 1521111.536 ops/s
Iteration  14: 1527322.381 ops/s
Iteration  15: 1531605.529 ops/s
Iteration  16: 1534479.178 ops/s
Iteration  17: 1528457.757 ops/s
Iteration  18: 1526042.274 ops/s
Iteration  19: 1533836.496 ops/s
Iteration  20: 1534330.967 ops/s
Iteration  21: 1530341.144 ops/s
Iteration  22: 1528448.005 ops/s
Iteration  23: 1532023.143 ops/s
Iteration  24: 1531537.177 ops/s
Iteration  25: 1529953.165 ops/s
Iteration  26: 1533748.339 ops/s
Iteration  27: 1527985.950 ops/s
Iteration  28: 1533959.613 ops/s
Iteration  29: 1532494.196 ops/s
Iteration  30: 1521962.373 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_drop":
  1529959.995 ±(99.9%) 2851.861 ops/s [Average]
  (min, avg, max) = (1519419.628, 1529959.995, 1535822.929), stdev = 4268.532
  CI (99.9%): [1527108.134, 1532811.856] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_drop  thrpt   30  1529959.995 ± 2851.861  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3699957.683 ops/s
# Warmup Iteration   2: 7929296.677 ops/s
# Warmup Iteration   3: 8124406.084 ops/s
# Warmup Iteration   4: 7838681.821 ops/s
# Warmup Iteration   5: 7120036.082 ops/s
# Warmup Iteration   6: 8158023.796 ops/s
# Warmup Iteration   7: 8144773.098 ops/s
# Warmup Iteration   8: 8076878.969 ops/s
# Warmup Iteration   9: 8141395.436 ops/s
# Warmup Iteration  10: 8175072.807 ops/s
# Warmup Iteration  11: 8109067.923 ops/s
# Warmup Iteration  12: 8164310.147 ops/s
# Warmup Iteration  13: 8174679.600 ops/s
# Warmup Iteration  14: 8158634.427 ops/s
# Warmup Iteration  15: 8133943.546 ops/s
# Warmup Iteration  16: 8144214.807 ops/s
# Warmup Iteration  17: 8146827.704 ops/s
# Warmup Iteration  18: 8162337.722 ops/s
# Warmup Iteration  19: 8176935.809 ops/s
# Warmup Iteration  20: 8143408.987 ops/s
# Warmup Iteration  21: 8181339.169 ops/s
# Warmup Iteration  22: 8172227.946 ops/s
# Warmup Iteration  23: 8157496.626 ops/s
# Warmup Iteration  24: 8168398.323 ops/s
# Warmup Iteration  25: 8163636.523 ops/s
# Warmup Iteration  26: 8156066.525 ops/s
# Warmup Iteration  27: 8158938.024 ops/s
# Warmup Iteration  28: 8172555.916 ops/s
# Warmup Iteration  29: 8153082.714 ops/s
# Warmup Iteration  30: 8163928.800 ops/s
Iteration   1: 8152376.054 ops/s
Iteration   2: 8153053.032 ops/s
Iteration   3: 8159432.616 ops/s
Iteration   4: 8136647.433 ops/s
Iteration   5: 8144830.646 ops/s
Iteration   6: 8152849.206 ops/s
Iteration   7: 8167301.683 ops/s
Iteration   8: 8197921.773 ops/s
Iteration   9: 8164720.763 ops/s
Iteration  10: 8165084.275 ops/s
Iteration  11: 8174744.178 ops/s
Iteration  12: 8129330.578 ops/s
Iteration  13: 8124251.157 ops/s
Iteration  14: 8194722.190 ops/s
Iteration  15: 8181479.734 ops/s
Iteration  16: 8163897.871 ops/s
Iteration  17: 8163221.512 ops/s
Iteration  18: 8173525.935 ops/s
Iteration  19: 8171414.947 ops/s
Iteration  20: 8104239.844 ops/s
Iteration  21: 8166909.470 ops/s
Iteration  22: 8165601.019 ops/s
Iteration  23: 8188769.672 ops/s
Iteration  24: 8170334.443 ops/s
Iteration  25: 8153721.813 ops/s
Iteration  26: 8207527.696 ops/s
Iteration  27: 8176216.882 ops/s
Iteration  28: 8149868.564 ops/s
Iteration  29: 8168186.339 ops/s
Iteration  30: 8165025.803 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_dropWhile":
  8162906.904 ±(99.9%) 14436.509 ops/s [Average]
  (min, avg, max) = (8104239.844, 8162906.904, 8207527.696), stdev = 21607.889
  CI (99.9%): [8148470.395, 8177343.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_dropWhile  thrpt   30  8162906.904 ± 14436.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 740040.152 ops/s
# Warmup Iteration   2: 765280.596 ops/s
# Warmup Iteration   3: 977501.242 ops/s
# Warmup Iteration   4: 969585.245 ops/s
# Warmup Iteration   5: 978541.711 ops/s
# Warmup Iteration   6: 961690.348 ops/s
# Warmup Iteration   7: 973441.429 ops/s
# Warmup Iteration   8: 985488.113 ops/s
# Warmup Iteration   9: 970316.762 ops/s
# Warmup Iteration  10: 969711.418 ops/s
# Warmup Iteration  11: 970457.834 ops/s
# Warmup Iteration  12: 824196.730 ops/s
# Warmup Iteration  13: 971202.823 ops/s
# Warmup Iteration  14: 968029.291 ops/s
# Warmup Iteration  15: 969707.079 ops/s
# Warmup Iteration  16: 969283.882 ops/s
# Warmup Iteration  17: 866733.416 ops/s
# Warmup Iteration  18: 932269.814 ops/s
# Warmup Iteration  19: 1015025.940 ops/s
# Warmup Iteration  20: 1016734.382 ops/s
# Warmup Iteration  21: 1010796.474 ops/s
# Warmup Iteration  22: 1006578.737 ops/s
# Warmup Iteration  23: 1014091.769 ops/s
# Warmup Iteration  24: 1010114.686 ops/s
# Warmup Iteration  25: 1011252.615 ops/s
# Warmup Iteration  26: 1017742.102 ops/s
# Warmup Iteration  27: 1013855.845 ops/s
# Warmup Iteration  28: 1014890.833 ops/s
# Warmup Iteration  29: 1009773.654 ops/s
# Warmup Iteration  30: 1012382.123 ops/s
Iteration   1: 1008386.411 ops/s
Iteration   2: 1003380.195 ops/s
Iteration   3: 1004752.810 ops/s
Iteration   4: 1008345.097 ops/s
Iteration   5: 1011236.177 ops/s
Iteration   6: 1012307.920 ops/s
Iteration   7: 1008275.174 ops/s
Iteration   8: 1008762.773 ops/s
Iteration   9: 1002345.359 ops/s
Iteration  10: 1022341.482 ops/s
Iteration  11: 1020871.363 ops/s
Iteration  12: 1018164.667 ops/s
Iteration  13: 1008352.907 ops/s
Iteration  14: 1025292.007 ops/s
Iteration  15: 1010347.544 ops/s
Iteration  16: 1002993.790 ops/s
Iteration  17: 1012525.759 ops/s
Iteration  18: 1012637.701 ops/s
Iteration  19: 1011717.665 ops/s
Iteration  20: 1012341.679 ops/s
Iteration  21: 1012539.661 ops/s
Iteration  22: 1011777.347 ops/s
Iteration  23: 1018585.140 ops/s
Iteration  24: 1007977.926 ops/s
Iteration  25: 1008897.446 ops/s
Iteration  26: 1016841.522 ops/s
Iteration  27: 1013316.659 ops/s
Iteration  28: 1005670.979 ops/s
Iteration  29: 1006606.954 ops/s
Iteration  30: 1014045.719 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_drop_throws":
  1011387.928 ±(99.9%) 3776.573 ops/s [Average]
  (min, avg, max) = (1002345.359, 1011387.928, 1025292.007), stdev = 5652.597
  CI (99.9%): [1007611.355, 1015164.501] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_drop_throws  thrpt   30  1011387.928 ± 3776.573  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_each$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_each

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16156970.662 ops/s
# Warmup Iteration   2: 33221416.142 ops/s
# Warmup Iteration   3: 30223788.439 ops/s
# Warmup Iteration   4: 31681228.390 ops/s
# Warmup Iteration   5: 33506768.065 ops/s
# Warmup Iteration   6: 33695222.248 ops/s
# Warmup Iteration   7: 33651294.459 ops/s
# Warmup Iteration   8: 33598507.896 ops/s
# Warmup Iteration   9: 33610674.493 ops/s
# Warmup Iteration  10: 33519981.158 ops/s
# Warmup Iteration  11: 33513163.364 ops/s
# Warmup Iteration  12: 33179577.551 ops/s
# Warmup Iteration  13: 33646079.811 ops/s
# Warmup Iteration  14: 33600463.613 ops/s
# Warmup Iteration  15: 33634602.258 ops/s
# Warmup Iteration  16: 33664015.424 ops/s
# Warmup Iteration  17: 33637916.381 ops/s
# Warmup Iteration  18: 33719863.170 ops/s
# Warmup Iteration  19: 33674150.957 ops/s
# Warmup Iteration  20: 33627005.883 ops/s
# Warmup Iteration  21: 33484509.884 ops/s
# Warmup Iteration  22: 33625596.713 ops/s
# Warmup Iteration  23: 33701870.417 ops/s
# Warmup Iteration  24: 33682426.556 ops/s
# Warmup Iteration  25: 33631837.647 ops/s
# Warmup Iteration  26: 33568495.858 ops/s
# Warmup Iteration  27: 33663496.039 ops/s
# Warmup Iteration  28: 33629985.823 ops/s
# Warmup Iteration  29: 33646277.223 ops/s
# Warmup Iteration  30: 33715021.747 ops/s
Iteration   1: 33602653.871 ops/s
Iteration   2: 33549282.800 ops/s
Iteration   3: 33498687.457 ops/s
Iteration   4: 33328735.089 ops/s
Iteration   5: 33265529.303 ops/s
Iteration   6: 33642818.279 ops/s
Iteration   7: 33630473.178 ops/s
Iteration   8: 33600372.137 ops/s
Iteration   9: 33574765.786 ops/s
Iteration  10: 33658012.860 ops/s
Iteration  11: 33717244.919 ops/s
Iteration  12: 33671743.128 ops/s
Iteration  13: 33684622.379 ops/s
Iteration  14: 33632492.711 ops/s
Iteration  15: 33550587.293 ops/s
Iteration  16: 33664461.202 ops/s
Iteration  17: 33571838.951 ops/s
Iteration  18: 33659362.211 ops/s
Iteration  19: 33688142.385 ops/s
Iteration  20: 33654343.386 ops/s
Iteration  21: 33739841.087 ops/s
Iteration  22: 33687127.284 ops/s
Iteration  23: 33640249.182 ops/s
Iteration  24: 33661762.660 ops/s
Iteration  25: 33478052.965 ops/s
Iteration  26: 33609295.014 ops/s
Iteration  27: 33672154.985 ops/s
Iteration  28: 33702067.218 ops/s
Iteration  29: 33585127.386 ops/s
Iteration  30: 33677965.367 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_each":
  33609993.749 ±(99.9%) 70212.260 ops/s [Average]
  (min, avg, max) = (33265529.303, 33609993.749, 33739841.087), stdev = 105090.413
  CI (99.9%): [33539781.489, 33680206.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_each  thrpt   30  33609993.749 ± 70212.260  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28002.565 ops/s
# Warmup Iteration   2: 38517.960 ops/s
# Warmup Iteration   3: 55869.731 ops/s
# Warmup Iteration   4: 55674.364 ops/s
# Warmup Iteration   5: 55591.669 ops/s
# Warmup Iteration   6: 55944.171 ops/s
# Warmup Iteration   7: 55900.610 ops/s
# Warmup Iteration   8: 55440.259 ops/s
# Warmup Iteration   9: 55290.982 ops/s
# Warmup Iteration  10: 47332.042 ops/s
# Warmup Iteration  11: 55720.753 ops/s
# Warmup Iteration  12: 55505.146 ops/s
# Warmup Iteration  13: 55527.184 ops/s
# Warmup Iteration  14: 55568.172 ops/s
# Warmup Iteration  15: 55412.259 ops/s
# Warmup Iteration  16: 55435.275 ops/s
# Warmup Iteration  17: 55856.746 ops/s
# Warmup Iteration  18: 55735.523 ops/s
# Warmup Iteration  19: 55781.518 ops/s
# Warmup Iteration  20: 55504.638 ops/s
# Warmup Iteration  21: 55577.631 ops/s
# Warmup Iteration  22: 55729.769 ops/s
# Warmup Iteration  23: 55799.701 ops/s
# Warmup Iteration  24: 55619.132 ops/s
# Warmup Iteration  25: 55681.435 ops/s
# Warmup Iteration  26: 55478.976 ops/s
# Warmup Iteration  27: 55612.064 ops/s
# Warmup Iteration  28: 55560.901 ops/s
# Warmup Iteration  29: 55578.357 ops/s
# Warmup Iteration  30: 55614.665 ops/s
Iteration   1: 55642.844 ops/s
Iteration   2: 55919.502 ops/s
Iteration   3: 55693.938 ops/s
Iteration   4: 55585.715 ops/s
Iteration   5: 55821.305 ops/s
Iteration   6: 55693.661 ops/s
Iteration   7: 55530.774 ops/s
Iteration   8: 55701.193 ops/s
Iteration   9: 55712.024 ops/s
Iteration  10: 55611.459 ops/s
Iteration  11: 55850.306 ops/s
Iteration  12: 55514.412 ops/s
Iteration  13: 55690.446 ops/s
Iteration  14: 55652.008 ops/s
Iteration  15: 56338.258 ops/s
Iteration  16: 56423.310 ops/s
Iteration  17: 56625.891 ops/s
Iteration  18: 56637.853 ops/s
Iteration  19: 56644.856 ops/s
Iteration  20: 56174.750 ops/s
Iteration  21: 56488.398 ops/s
Iteration  22: 56247.038 ops/s
Iteration  23: 56247.759 ops/s
Iteration  24: 56193.056 ops/s
Iteration  25: 56118.652 ops/s
Iteration  26: 56454.577 ops/s
Iteration  27: 56577.992 ops/s
Iteration  28: 56536.691 ops/s
Iteration  29: 56480.181 ops/s
Iteration  30: 56518.258 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_equalsAndHashCode":
  56077.570 ±(99.9%) 267.299 ops/s [Average]
  (min, avg, max) = (55514.412, 56077.570, 56644.856), stdev = 400.081
  CI (99.9%): [55810.271, 56344.870] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt      Score     Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  56077.570 ± 267.299  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 862474.073 ops/s
# Warmup Iteration   2: 2015775.178 ops/s
# Warmup Iteration   3: 2027617.611 ops/s
# Warmup Iteration   4: 1690995.276 ops/s
# Warmup Iteration   5: 2035372.779 ops/s
# Warmup Iteration   6: 2021708.643 ops/s
# Warmup Iteration   7: 2033953.771 ops/s
# Warmup Iteration   8: 2034963.826 ops/s
# Warmup Iteration   9: 2027627.986 ops/s
# Warmup Iteration  10: 2027495.576 ops/s
# Warmup Iteration  11: 2031526.781 ops/s
# Warmup Iteration  12: 2027959.131 ops/s
# Warmup Iteration  13: 2025363.859 ops/s
# Warmup Iteration  14: 2031715.585 ops/s
# Warmup Iteration  15: 2034365.896 ops/s
# Warmup Iteration  16: 2026152.399 ops/s
# Warmup Iteration  17: 2035151.534 ops/s
# Warmup Iteration  18: 2031548.041 ops/s
# Warmup Iteration  19: 2027658.257 ops/s
# Warmup Iteration  20: 2034651.768 ops/s
# Warmup Iteration  21: 2037025.219 ops/s
# Warmup Iteration  22: 2037167.042 ops/s
# Warmup Iteration  23: 2029683.036 ops/s
# Warmup Iteration  24: 2030203.109 ops/s
# Warmup Iteration  25: 2035810.485 ops/s
# Warmup Iteration  26: 2037855.077 ops/s
# Warmup Iteration  27: 2039780.847 ops/s
# Warmup Iteration  28: 2028286.059 ops/s
# Warmup Iteration  29: 2032205.424 ops/s
# Warmup Iteration  30: 2034046.988 ops/s
Iteration   1: 2030349.457 ops/s
Iteration   2: 2031791.527 ops/s
Iteration   3: 2034472.593 ops/s
Iteration   4: 2035504.937 ops/s
Iteration   5: 2036908.170 ops/s
Iteration   6: 2035102.782 ops/s
Iteration   7: 2035742.785 ops/s
Iteration   8: 2034561.342 ops/s
Iteration   9: 2034212.072 ops/s
Iteration  10: 2041985.943 ops/s
Iteration  11: 2036872.681 ops/s
Iteration  12: 2039294.853 ops/s
Iteration  13: 2025885.163 ops/s
Iteration  14: 2031110.653 ops/s
Iteration  15: 2022116.309 ops/s
Iteration  16: 2024288.289 ops/s
Iteration  17: 2031242.169 ops/s
Iteration  18: 2029823.475 ops/s
Iteration  19: 2029353.183 ops/s
Iteration  20: 2024332.960 ops/s
Iteration  21: 2022818.309 ops/s
Iteration  22: 2025810.739 ops/s
Iteration  23: 2025645.764 ops/s
Iteration  24: 2034521.531 ops/s
Iteration  25: 2035516.755 ops/s
Iteration  26: 2030609.343 ops/s
Iteration  27: 2031941.535 ops/s
Iteration  28: 2031252.383 ops/s
Iteration  29: 2031944.273 ops/s
Iteration  30: 2036775.774 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_flatCollect":
  2031726.258 ±(99.9%) 3348.009 ops/s [Average]
  (min, avg, max) = (2022116.309, 2031726.258, 2041985.943), stdev = 5011.143
  CI (99.9%): [2028378.249, 2035074.268] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_flatCollect  thrpt   30  2031726.258 ± 3348.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 944142.735 ops/s
# Warmup Iteration   2: 2179294.630 ops/s
# Warmup Iteration   3: 2254225.446 ops/s
# Warmup Iteration   4: 1856276.341 ops/s
# Warmup Iteration   5: 2250791.574 ops/s
# Warmup Iteration   6: 2249764.534 ops/s
# Warmup Iteration   7: 2247311.029 ops/s
# Warmup Iteration   8: 2253453.581 ops/s
# Warmup Iteration   9: 2247792.252 ops/s
# Warmup Iteration  10: 2234531.255 ops/s
# Warmup Iteration  11: 2231814.485 ops/s
# Warmup Iteration  12: 2235016.929 ops/s
# Warmup Iteration  13: 2247561.434 ops/s
# Warmup Iteration  14: 2237464.096 ops/s
# Warmup Iteration  15: 2248717.065 ops/s
# Warmup Iteration  16: 2240438.048 ops/s
# Warmup Iteration  17: 2255840.658 ops/s
# Warmup Iteration  18: 2248660.892 ops/s
# Warmup Iteration  19: 2254688.313 ops/s
# Warmup Iteration  20: 2250814.620 ops/s
# Warmup Iteration  21: 2253957.478 ops/s
# Warmup Iteration  22: 2248155.626 ops/s
# Warmup Iteration  23: 2255513.158 ops/s
# Warmup Iteration  24: 2256912.195 ops/s
# Warmup Iteration  25: 2247717.162 ops/s
# Warmup Iteration  26: 2238091.711 ops/s
# Warmup Iteration  27: 2254650.856 ops/s
# Warmup Iteration  28: 2258084.463 ops/s
# Warmup Iteration  29: 2246625.402 ops/s
# Warmup Iteration  30: 2254294.146 ops/s
Iteration   1: 2257031.927 ops/s
Iteration   2: 2252196.509 ops/s
Iteration   3: 2247231.403 ops/s
Iteration   4: 2248813.900 ops/s
Iteration   5: 2252829.747 ops/s
Iteration   6: 2253654.976 ops/s
Iteration   7: 2254019.857 ops/s
Iteration   8: 2256209.921 ops/s
Iteration   9: 2258149.142 ops/s
Iteration  10: 2252035.661 ops/s
Iteration  11: 2260197.913 ops/s
Iteration  12: 2253270.991 ops/s
Iteration  13: 2255239.547 ops/s
Iteration  14: 2243803.420 ops/s
Iteration  15: 2247355.284 ops/s
Iteration  16: 2253648.062 ops/s
Iteration  17: 2249806.234 ops/s
Iteration  18: 2239397.063 ops/s
Iteration  19: 2241616.793 ops/s
Iteration  20: 2246506.636 ops/s
Iteration  21: 2248083.016 ops/s
Iteration  22: 2255423.353 ops/s
Iteration  23: 2257117.289 ops/s
Iteration  24: 2253732.115 ops/s
Iteration  25: 2254547.036 ops/s
Iteration  26: 2254660.125 ops/s
Iteration  27: 2224969.056 ops/s
Iteration  28: 2228404.595 ops/s
Iteration  29: 2254606.536 ops/s
Iteration  30: 2251337.626 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_flatCollectWith":
  2250196.524 ±(99.9%) 5351.526 ops/s [Average]
  (min, avg, max) = (2224969.056, 2250196.524, 2260197.913), stdev = 8009.913
  CI (99.9%): [2244844.999, 2255548.050] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  2250196.524 ± 5351.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1257302.264 ops/s
# Warmup Iteration   2: 3097725.147 ops/s
# Warmup Iteration   3: 3074189.240 ops/s
# Warmup Iteration   4: 2585716.123 ops/s
# Warmup Iteration   5: 3087813.044 ops/s
# Warmup Iteration   6: 3099648.991 ops/s
# Warmup Iteration   7: 3080191.931 ops/s
# Warmup Iteration   8: 3100452.334 ops/s
# Warmup Iteration   9: 3098844.763 ops/s
# Warmup Iteration  10: 3107157.425 ops/s
# Warmup Iteration  11: 3104690.935 ops/s
# Warmup Iteration  12: 3079590.598 ops/s
# Warmup Iteration  13: 3071598.043 ops/s
# Warmup Iteration  14: 3099554.798 ops/s
# Warmup Iteration  15: 3092604.452 ops/s
# Warmup Iteration  16: 3093297.829 ops/s
# Warmup Iteration  17: 3098801.101 ops/s
# Warmup Iteration  18: 3092117.681 ops/s
# Warmup Iteration  19: 3102118.808 ops/s
# Warmup Iteration  20: 3101179.107 ops/s
# Warmup Iteration  21: 3099825.899 ops/s
# Warmup Iteration  22: 3098815.987 ops/s
# Warmup Iteration  23: 3093436.791 ops/s
# Warmup Iteration  24: 3104399.345 ops/s
# Warmup Iteration  25: 3107791.864 ops/s
# Warmup Iteration  26: 3091696.317 ops/s
# Warmup Iteration  27: 3095571.416 ops/s
# Warmup Iteration  28: 3105459.234 ops/s
# Warmup Iteration  29: 3091490.621 ops/s
# Warmup Iteration  30: 3097531.828 ops/s
Iteration   1: 3100718.113 ops/s
Iteration   2: 3103460.049 ops/s
Iteration   3: 3094558.396 ops/s
Iteration   4: 3108128.097 ops/s
Iteration   5: 3095792.057 ops/s
Iteration   6: 3078511.586 ops/s
Iteration   7: 3074867.402 ops/s
Iteration   8: 3106282.514 ops/s
Iteration   9: 3106688.250 ops/s
Iteration  10: 3108389.190 ops/s
Iteration  11: 3099997.591 ops/s
Iteration  12: 3089027.059 ops/s
Iteration  13: 3104358.707 ops/s
Iteration  14: 3101272.991 ops/s
Iteration  15: 3106054.988 ops/s
Iteration  16: 3097051.173 ops/s
Iteration  17: 3106909.817 ops/s
Iteration  18: 3103356.814 ops/s
Iteration  19: 3103162.942 ops/s
Iteration  20: 3096208.537 ops/s
Iteration  21: 3082179.539 ops/s
Iteration  22: 3063177.177 ops/s
Iteration  23: 3063517.793 ops/s
Iteration  24: 3066788.926 ops/s
Iteration  25: 3090956.088 ops/s
Iteration  26: 3082057.311 ops/s
Iteration  27: 3105597.369 ops/s
Iteration  28: 3101719.541 ops/s
Iteration  29: 3104553.923 ops/s
Iteration  30: 3104898.271 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_flatCollectWithTarget":
  3095008.074 ±(99.9%) 9189.402 ops/s [Average]
  (min, avg, max) = (3063177.177, 3095008.074, 3108389.190), stdev = 13754.266
  CI (99.9%): [3085818.671, 3104197.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  3095008.074 ± 9189.402  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7185953.526 ops/s
# Warmup Iteration   2: 12813507.079 ops/s
# Warmup Iteration   3: 14297545.012 ops/s
# Warmup Iteration   4: 14405451.086 ops/s
# Warmup Iteration   5: 11985297.946 ops/s
# Warmup Iteration   6: 14344556.357 ops/s
# Warmup Iteration   7: 14343120.069 ops/s
# Warmup Iteration   8: 14347992.410 ops/s
# Warmup Iteration   9: 14428852.627 ops/s
# Warmup Iteration  10: 14423833.050 ops/s
# Warmup Iteration  11: 14348410.217 ops/s
# Warmup Iteration  12: 14382622.712 ops/s
# Warmup Iteration  13: 14399311.817 ops/s
# Warmup Iteration  14: 14405270.871 ops/s
# Warmup Iteration  15: 14347370.094 ops/s
# Warmup Iteration  16: 14451746.341 ops/s
# Warmup Iteration  17: 14414595.328 ops/s
# Warmup Iteration  18: 14410649.032 ops/s
# Warmup Iteration  19: 14387493.275 ops/s
# Warmup Iteration  20: 14352206.789 ops/s
# Warmup Iteration  21: 14352766.087 ops/s
# Warmup Iteration  22: 14412506.176 ops/s
# Warmup Iteration  23: 14400511.592 ops/s
# Warmup Iteration  24: 14415174.566 ops/s
# Warmup Iteration  25: 14406191.490 ops/s
# Warmup Iteration  26: 14391346.017 ops/s
# Warmup Iteration  27: 14398915.209 ops/s
# Warmup Iteration  28: 14324747.271 ops/s
# Warmup Iteration  29: 14405727.722 ops/s
# Warmup Iteration  30: 14415254.689 ops/s
Iteration   1: 14367439.133 ops/s
Iteration   2: 14343084.195 ops/s
Iteration   3: 14343605.750 ops/s
Iteration   4: 14373479.905 ops/s
Iteration   5: 14412042.341 ops/s
Iteration   6: 14340990.524 ops/s
Iteration   7: 14432814.679 ops/s
Iteration   8: 14414031.884 ops/s
Iteration   9: 14401052.755 ops/s
Iteration  10: 14440178.530 ops/s
Iteration  11: 14422480.029 ops/s
Iteration  12: 14379477.437 ops/s
Iteration  13: 14413827.517 ops/s
Iteration  14: 14429252.790 ops/s
Iteration  15: 14372685.546 ops/s
Iteration  16: 14395181.542 ops/s
Iteration  17: 14424736.578 ops/s
Iteration  18: 14461874.998 ops/s
Iteration  19: 14405755.134 ops/s
Iteration  20: 14435585.277 ops/s
Iteration  21: 14417094.200 ops/s
Iteration  22: 14342799.415 ops/s
Iteration  23: 14365146.080 ops/s
Iteration  24: 14391772.635 ops/s
Iteration  25: 14399611.195 ops/s
Iteration  26: 14420021.506 ops/s
Iteration  27: 14383508.285 ops/s
Iteration  28: 14421447.125 ops/s
Iteration  29: 14384113.411 ops/s
Iteration  30: 14378990.950 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEach":
  14397136.045 ±(99.9%) 21348.404 ops/s [Average]
  (min, avg, max) = (14340990.524, 14397136.045, 14461874.998), stdev = 31953.289
  CI (99.9%): [14375787.641, 14418484.449] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_forEach  thrpt   30  14397136.045 ± 21348.404  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 292562.035 ops/s
# Warmup Iteration   2: 313292.736 ops/s
# Warmup Iteration   3: 366006.618 ops/s
# Warmup Iteration   4: 392030.482 ops/s
# Warmup Iteration   5: 391737.378 ops/s
# Warmup Iteration   6: 389443.385 ops/s
# Warmup Iteration   7: 392743.905 ops/s
# Warmup Iteration   8: 392664.236 ops/s
# Warmup Iteration   9: 391936.693 ops/s
# Warmup Iteration  10: 391542.054 ops/s
# Warmup Iteration  11: 393015.010 ops/s
# Warmup Iteration  12: 391519.955 ops/s
# Warmup Iteration  13: 393522.179 ops/s
# Warmup Iteration  14: 334155.241 ops/s
# Warmup Iteration  15: 393297.075 ops/s
# Warmup Iteration  16: 393500.799 ops/s
# Warmup Iteration  17: 407638.205 ops/s
# Warmup Iteration  18: 407781.468 ops/s
# Warmup Iteration  19: 407792.932 ops/s
# Warmup Iteration  20: 409613.236 ops/s
# Warmup Iteration  21: 408766.421 ops/s
# Warmup Iteration  22: 410637.227 ops/s
# Warmup Iteration  23: 408699.109 ops/s
# Warmup Iteration  24: 408659.989 ops/s
# Warmup Iteration  25: 409478.832 ops/s
# Warmup Iteration  26: 410002.354 ops/s
# Warmup Iteration  27: 410633.468 ops/s
# Warmup Iteration  28: 410166.576 ops/s
# Warmup Iteration  29: 409348.333 ops/s
# Warmup Iteration  30: 408651.548 ops/s
Iteration   1: 409383.737 ops/s
Iteration   2: 410069.504 ops/s
Iteration   3: 408286.537 ops/s
Iteration   4: 410827.297 ops/s
Iteration   5: 409261.625 ops/s
Iteration   6: 408937.052 ops/s
Iteration   7: 410178.826 ops/s
Iteration   8: 410104.849 ops/s
Iteration   9: 410181.554 ops/s
Iteration  10: 410206.067 ops/s
Iteration  11: 411261.537 ops/s
Iteration  12: 409731.778 ops/s
Iteration  13: 408845.272 ops/s
Iteration  14: 410284.584 ops/s
Iteration  15: 407640.547 ops/s
Iteration  16: 411161.330 ops/s
Iteration  17: 408593.098 ops/s
Iteration  18: 410220.191 ops/s
Iteration  19: 410667.229 ops/s
Iteration  20: 410770.069 ops/s
Iteration  21: 411238.946 ops/s
Iteration  22: 409469.406 ops/s
Iteration  23: 411301.971 ops/s
Iteration  24: 410713.736 ops/s
Iteration  25: 411086.459 ops/s
Iteration  26: 410012.241 ops/s
Iteration  27: 408003.677 ops/s
Iteration  28: 410897.121 ops/s
Iteration  29: 410079.184 ops/s
Iteration  30: 410375.929 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEachFromTo":
  409993.045 ±(99.9%) 668.066 ops/s [Average]
  (min, avg, max) = (407640.547, 409993.045, 411301.971), stdev = 999.929
  CI (99.9%): [409324.980, 410661.111] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  409993.045 ± 668.066  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4963934.547 ops/s
# Warmup Iteration   2: 9119763.826 ops/s
# Warmup Iteration   3: 9783182.166 ops/s
# Warmup Iteration   4: 9812687.052 ops/s
# Warmup Iteration   5: 8318324.152 ops/s
# Warmup Iteration   6: 9840017.610 ops/s
# Warmup Iteration   7: 9821284.978 ops/s
# Warmup Iteration   8: 9779614.036 ops/s
# Warmup Iteration   9: 9875937.516 ops/s
# Warmup Iteration  10: 9824132.629 ops/s
# Warmup Iteration  11: 9864219.232 ops/s
# Warmup Iteration  12: 9847088.838 ops/s
# Warmup Iteration  13: 9858579.891 ops/s
# Warmup Iteration  14: 9868455.342 ops/s
# Warmup Iteration  15: 9807435.921 ops/s
# Warmup Iteration  16: 9846276.627 ops/s
# Warmup Iteration  17: 9850688.404 ops/s
# Warmup Iteration  18: 9781411.843 ops/s
# Warmup Iteration  19: 9790873.556 ops/s
# Warmup Iteration  20: 9789210.489 ops/s
# Warmup Iteration  21: 9844383.411 ops/s
# Warmup Iteration  22: 9880734.334 ops/s
# Warmup Iteration  23: 9868048.020 ops/s
# Warmup Iteration  24: 9837655.645 ops/s
# Warmup Iteration  25: 9861315.489 ops/s
# Warmup Iteration  26: 9853416.573 ops/s
# Warmup Iteration  27: 9862096.233 ops/s
# Warmup Iteration  28: 9852530.582 ops/s
# Warmup Iteration  29: 9841569.881 ops/s
# Warmup Iteration  30: 9869189.967 ops/s
Iteration   1: 9869309.842 ops/s
Iteration   2: 9859706.353 ops/s
Iteration   3: 9846072.404 ops/s
Iteration   4: 9889898.464 ops/s
Iteration   5: 9866032.635 ops/s
Iteration   6: 9870255.397 ops/s
Iteration   7: 9850336.328 ops/s
Iteration   8: 9878718.827 ops/s
Iteration   9: 9806707.215 ops/s
Iteration  10: 9890876.552 ops/s
Iteration  11: 9871098.840 ops/s
Iteration  12: 9839205.763 ops/s
Iteration  13: 9842517.922 ops/s
Iteration  14: 9876893.156 ops/s
Iteration  15: 9860974.519 ops/s
Iteration  16: 9860561.350 ops/s
Iteration  17: 9870027.717 ops/s
Iteration  18: 9861111.073 ops/s
Iteration  19: 9864710.937 ops/s
Iteration  20: 9864268.439 ops/s
Iteration  21: 9863955.742 ops/s
Iteration  22: 9801656.606 ops/s
Iteration  23: 9834043.194 ops/s
Iteration  24: 9860226.911 ops/s
Iteration  25: 9883918.616 ops/s
Iteration  26: 9837732.707 ops/s
Iteration  27: 9846848.597 ops/s
Iteration  28: 9798666.054 ops/s
Iteration  29: 9806438.879 ops/s
Iteration  30: 9828339.059 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEachWith":
  9853370.337 ±(99.9%) 16871.225 ops/s [Average]
  (min, avg, max) = (9798666.054, 9853370.337, 9890876.552), stdev = 25252.057
  CI (99.9%): [9836499.112, 9870241.562] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_forEachWith  thrpt   30  9853370.337 ± 16871.225  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8001240.141 ops/s
# Warmup Iteration   2: 12078872.052 ops/s
# Warmup Iteration   3: 13898403.557 ops/s
# Warmup Iteration   4: 13960461.885 ops/s
# Warmup Iteration   5: 14002499.065 ops/s
# Warmup Iteration   6: 13958831.334 ops/s
# Warmup Iteration   7: 11674627.120 ops/s
# Warmup Iteration   8: 14009124.909 ops/s
# Warmup Iteration   9: 13986302.234 ops/s
# Warmup Iteration  10: 13927021.175 ops/s
# Warmup Iteration  11: 13950465.288 ops/s
# Warmup Iteration  12: 13975526.137 ops/s
# Warmup Iteration  13: 13973313.135 ops/s
# Warmup Iteration  14: 13975265.190 ops/s
# Warmup Iteration  15: 13980296.611 ops/s
# Warmup Iteration  16: 13974936.313 ops/s
# Warmup Iteration  17: 14002850.160 ops/s
# Warmup Iteration  18: 13972274.679 ops/s
# Warmup Iteration  19: 13962437.309 ops/s
# Warmup Iteration  20: 13938191.059 ops/s
# Warmup Iteration  21: 13970057.666 ops/s
# Warmup Iteration  22: 13986138.430 ops/s
# Warmup Iteration  23: 13994755.008 ops/s
# Warmup Iteration  24: 13975090.417 ops/s
# Warmup Iteration  25: 13953548.290 ops/s
# Warmup Iteration  26: 13987795.583 ops/s
# Warmup Iteration  27: 13934892.249 ops/s
# Warmup Iteration  28: 13970537.393 ops/s
# Warmup Iteration  29: 13997992.993 ops/s
# Warmup Iteration  30: 13867585.940 ops/s
Iteration   1: 14001213.229 ops/s
Iteration   2: 13838503.775 ops/s
Iteration   3: 13980385.545 ops/s
Iteration   4: 14027543.838 ops/s
Iteration   5: 13992586.919 ops/s
Iteration   6: 13932167.172 ops/s
Iteration   7: 14000783.680 ops/s
Iteration   8: 13988431.114 ops/s
Iteration   9: 13996568.437 ops/s
Iteration  10: 13993704.074 ops/s
Iteration  11: 13944391.078 ops/s
Iteration  12: 13990165.030 ops/s
Iteration  13: 13863869.381 ops/s
Iteration  14: 13993269.854 ops/s
Iteration  15: 13890242.450 ops/s
Iteration  16: 13986877.210 ops/s
Iteration  17: 13999698.109 ops/s
Iteration  18: 14010601.442 ops/s
Iteration  19: 14022046.699 ops/s
Iteration  20: 13983180.023 ops/s
Iteration  21: 13972615.575 ops/s
Iteration  22: 13931529.294 ops/s
Iteration  23: 13992539.674 ops/s
Iteration  24: 13986988.259 ops/s
Iteration  25: 14005041.653 ops/s
Iteration  26: 13980791.542 ops/s
Iteration  27: 14001759.913 ops/s
Iteration  28: 13941484.341 ops/s
Iteration  29: 13968865.543 ops/s
Iteration  30: 13967888.491 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEachWithIndex":
  13972857.778 ±(99.9%) 29442.608 ops/s [Average]
  (min, avg, max) = (13838503.775, 13972857.778, 14027543.838), stdev = 44068.313
  CI (99.9%): [13943415.170, 14002300.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  13972857.778 ± 29442.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 285484.417 ops/s
# Warmup Iteration   2: 306978.106 ops/s
# Warmup Iteration   3: 360579.530 ops/s
# Warmup Iteration   4: 384628.201 ops/s
# Warmup Iteration   5: 384914.384 ops/s
# Warmup Iteration   6: 381668.377 ops/s
# Warmup Iteration   7: 385700.898 ops/s
# Warmup Iteration   8: 385896.176 ops/s
# Warmup Iteration   9: 384075.259 ops/s
# Warmup Iteration  10: 385003.681 ops/s
# Warmup Iteration  11: 385074.806 ops/s
# Warmup Iteration  12: 383278.282 ops/s
# Warmup Iteration  13: 385227.634 ops/s
# Warmup Iteration  14: 327240.248 ops/s
# Warmup Iteration  15: 385753.164 ops/s
# Warmup Iteration  16: 385040.957 ops/s
# Warmup Iteration  17: 403146.241 ops/s
# Warmup Iteration  18: 403901.694 ops/s
# Warmup Iteration  19: 404461.686 ops/s
# Warmup Iteration  20: 404589.634 ops/s
# Warmup Iteration  21: 403229.252 ops/s
# Warmup Iteration  22: 403756.149 ops/s
# Warmup Iteration  23: 403664.617 ops/s
# Warmup Iteration  24: 403539.503 ops/s
# Warmup Iteration  25: 402653.681 ops/s
# Warmup Iteration  26: 404251.780 ops/s
# Warmup Iteration  27: 405367.250 ops/s
# Warmup Iteration  28: 403456.269 ops/s
# Warmup Iteration  29: 404212.734 ops/s
# Warmup Iteration  30: 403574.109 ops/s
Iteration   1: 403838.406 ops/s
Iteration   2: 403933.522 ops/s
Iteration   3: 402272.424 ops/s
Iteration   4: 402648.885 ops/s
Iteration   5: 401965.059 ops/s
Iteration   6: 402389.230 ops/s
Iteration   7: 404511.055 ops/s
Iteration   8: 404990.440 ops/s
Iteration   9: 405150.802 ops/s
Iteration  10: 404332.702 ops/s
Iteration  11: 405242.747 ops/s
Iteration  12: 403703.218 ops/s
Iteration  13: 402964.014 ops/s
Iteration  14: 403473.344 ops/s
Iteration  15: 404795.257 ops/s
Iteration  16: 404817.253 ops/s
Iteration  17: 404741.941 ops/s
Iteration  18: 405115.104 ops/s
Iteration  19: 402290.023 ops/s
Iteration  20: 404248.959 ops/s
Iteration  21: 402968.071 ops/s
Iteration  22: 404851.730 ops/s
Iteration  23: 403964.073 ops/s
Iteration  24: 406304.778 ops/s
Iteration  25: 403801.269 ops/s
Iteration  26: 404003.185 ops/s
Iteration  27: 404183.856 ops/s
Iteration  28: 403550.421 ops/s
Iteration  29: 404262.291 ops/s
Iteration  30: 402525.255 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo":
  403927.977 ±(99.9%) 710.363 ops/s [Average]
  (min, avg, max) = (401965.059, 403927.977, 406304.778), stdev = 1063.238
  CI (99.9%): [403217.614, 404638.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo  thrpt   30  403927.977 ± 710.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26833607.078 ops/s
# Warmup Iteration   2: 54854744.803 ops/s
# Warmup Iteration   3: 52295970.842 ops/s
# Warmup Iteration   4: 47819321.169 ops/s
# Warmup Iteration   5: 54090370.083 ops/s
# Warmup Iteration   6: 54259904.255 ops/s
# Warmup Iteration   7: 54088252.341 ops/s
# Warmup Iteration   8: 54131674.452 ops/s
# Warmup Iteration   9: 54263102.587 ops/s
# Warmup Iteration  10: 54283601.660 ops/s
# Warmup Iteration  11: 54134095.487 ops/s
# Warmup Iteration  12: 53925944.285 ops/s
# Warmup Iteration  13: 54023489.973 ops/s
# Warmup Iteration  14: 53654298.514 ops/s
# Warmup Iteration  15: 54084202.571 ops/s
# Warmup Iteration  16: 54316856.719 ops/s
# Warmup Iteration  17: 54161477.466 ops/s
# Warmup Iteration  18: 54222449.787 ops/s
# Warmup Iteration  19: 53977464.541 ops/s
# Warmup Iteration  20: 54314317.545 ops/s
# Warmup Iteration  21: 54297592.436 ops/s
# Warmup Iteration  22: 54254869.415 ops/s
# Warmup Iteration  23: 54261497.786 ops/s
# Warmup Iteration  24: 53105586.211 ops/s
# Warmup Iteration  25: 54325258.463 ops/s
# Warmup Iteration  26: 54115301.261 ops/s
# Warmup Iteration  27: 54228384.719 ops/s
# Warmup Iteration  28: 54230345.120 ops/s
# Warmup Iteration  29: 54119779.374 ops/s
# Warmup Iteration  30: 54168408.217 ops/s
Iteration   1: 53898453.574 ops/s
Iteration   2: 54112015.057 ops/s
Iteration   3: 54122403.271 ops/s
Iteration   4: 54049662.725 ops/s
Iteration   5: 54241301.810 ops/s
Iteration   6: 54114899.629 ops/s
Iteration   7: 54197672.901 ops/s
Iteration   8: 54104285.336 ops/s
Iteration   9: 54175905.179 ops/s
Iteration  10: 54212790.025 ops/s
Iteration  11: 53886613.441 ops/s
Iteration  12: 54322639.622 ops/s
Iteration  13: 54246613.143 ops/s
Iteration  14: 54335627.088 ops/s
Iteration  15: 54103983.994 ops/s
Iteration  16: 54028808.576 ops/s
Iteration  17: 54215678.302 ops/s
Iteration  18: 53598169.745 ops/s
Iteration  19: 53950188.877 ops/s
Iteration  20: 54158505.596 ops/s
Iteration  21: 54058806.832 ops/s
Iteration  22: 54282099.286 ops/s
Iteration  23: 54229257.224 ops/s
Iteration  24: 54237079.859 ops/s
Iteration  25: 54131548.489 ops/s
Iteration  26: 54262689.879 ops/s
Iteration  27: 54355342.010 ops/s
Iteration  28: 54273223.564 ops/s
Iteration  29: 54303436.943 ops/s
Iteration  30: 54232585.833 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_forLoop":
  54148076.260 ±(99.9%) 106938.689 ops/s [Average]
  (min, avg, max) = (53598169.745, 54148076.260, 54355342.010), stdev = 160060.808
  CI (99.9%): [54041137.571, 54255014.950] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_forLoop  thrpt   30  54148076.260 ± 106938.689  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 365078.505 ops/s
# Warmup Iteration   2: 382387.168 ops/s
# Warmup Iteration   3: 455418.565 ops/s
# Warmup Iteration   4: 472157.120 ops/s
# Warmup Iteration   5: 469924.703 ops/s
# Warmup Iteration   6: 468321.391 ops/s
# Warmup Iteration   7: 472770.199 ops/s
# Warmup Iteration   8: 470878.618 ops/s
# Warmup Iteration   9: 474179.869 ops/s
# Warmup Iteration  10: 472037.851 ops/s
# Warmup Iteration  11: 469822.037 ops/s
# Warmup Iteration  12: 472738.337 ops/s
# Warmup Iteration  13: 438829.680 ops/s
# Warmup Iteration  14: 437694.051 ops/s
# Warmup Iteration  15: 473239.103 ops/s
# Warmup Iteration  16: 471942.857 ops/s
# Warmup Iteration  17: 504238.313 ops/s
# Warmup Iteration  18: 504953.505 ops/s
# Warmup Iteration  19: 505835.166 ops/s
# Warmup Iteration  20: 504497.735 ops/s
# Warmup Iteration  21: 503130.671 ops/s
# Warmup Iteration  22: 504451.024 ops/s
# Warmup Iteration  23: 504818.555 ops/s
# Warmup Iteration  24: 504498.375 ops/s
# Warmup Iteration  25: 503668.102 ops/s
# Warmup Iteration  26: 504253.973 ops/s
# Warmup Iteration  27: 503222.838 ops/s
# Warmup Iteration  28: 503742.272 ops/s
# Warmup Iteration  29: 503467.856 ops/s
# Warmup Iteration  30: 502850.359 ops/s
Iteration   1: 502173.722 ops/s
Iteration   2: 502388.467 ops/s
Iteration   3: 503690.630 ops/s
Iteration   4: 505495.643 ops/s
Iteration   5: 505050.590 ops/s
Iteration   6: 504606.748 ops/s
Iteration   7: 503852.970 ops/s
Iteration   8: 505884.863 ops/s
Iteration   9: 504874.770 ops/s
Iteration  10: 506543.351 ops/s
Iteration  11: 505212.061 ops/s
Iteration  12: 497670.504 ops/s
Iteration  13: 500899.553 ops/s
Iteration  14: 503098.144 ops/s
Iteration  15: 504759.757 ops/s
Iteration  16: 504218.998 ops/s
Iteration  17: 504321.232 ops/s
Iteration  18: 503868.211 ops/s
Iteration  19: 504584.607 ops/s
Iteration  20: 502799.928 ops/s
Iteration  21: 503044.554 ops/s
Iteration  22: 504289.793 ops/s
Iteration  23: 500867.343 ops/s
Iteration  24: 504490.004 ops/s
Iteration  25: 502441.284 ops/s
Iteration  26: 504800.959 ops/s
Iteration  27: 503952.527 ops/s
Iteration  28: 505027.415 ops/s
Iteration  29: 503476.614 ops/s
Iteration  30: 503785.537 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_get":
  503739.026 ±(99.9%) 1167.051 ops/s [Average]
  (min, avg, max) = (497670.504, 503739.026, 506543.351), stdev = 1746.787
  CI (99.9%): [502571.975, 504906.077] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_get  thrpt   30  503739.026 ± 1167.051  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38153858.866 ops/s
# Warmup Iteration   2: 75985225.257 ops/s
# Warmup Iteration   3: 65411172.232 ops/s
# Warmup Iteration   4: 76771499.836 ops/s
# Warmup Iteration   5: 76675688.898 ops/s
# Warmup Iteration   6: 77057971.850 ops/s
# Warmup Iteration   7: 76758050.241 ops/s
# Warmup Iteration   8: 76725424.644 ops/s
# Warmup Iteration   9: 76832216.907 ops/s
# Warmup Iteration  10: 76963886.075 ops/s
# Warmup Iteration  11: 77003030.099 ops/s
# Warmup Iteration  12: 76879330.759 ops/s
# Warmup Iteration  13: 76761029.391 ops/s
# Warmup Iteration  14: 77013510.094 ops/s
# Warmup Iteration  15: 76885356.811 ops/s
# Warmup Iteration  16: 76645855.198 ops/s
# Warmup Iteration  17: 76618528.872 ops/s
# Warmup Iteration  18: 77012497.003 ops/s
# Warmup Iteration  19: 76971764.551 ops/s
# Warmup Iteration  20: 77067867.660 ops/s
# Warmup Iteration  21: 77050716.974 ops/s
# Warmup Iteration  22: 76956666.406 ops/s
# Warmup Iteration  23: 77108809.749 ops/s
# Warmup Iteration  24: 77021972.291 ops/s
# Warmup Iteration  25: 77010921.808 ops/s
# Warmup Iteration  26: 76759054.910 ops/s
# Warmup Iteration  27: 76877579.277 ops/s
# Warmup Iteration  28: 76759476.639 ops/s
# Warmup Iteration  29: 76772040.570 ops/s
# Warmup Iteration  30: 76910982.877 ops/s
Iteration   1: 76795293.393 ops/s
Iteration   2: 77116779.241 ops/s
Iteration   3: 76621099.670 ops/s
Iteration   4: 76983042.496 ops/s
Iteration   5: 76922478.679 ops/s
Iteration   6: 77309545.095 ops/s
Iteration   7: 76805837.214 ops/s
Iteration   8: 77003969.021 ops/s
Iteration   9: 76738381.843 ops/s
Iteration  10: 76934436.302 ops/s
Iteration  11: 76545697.919 ops/s
Iteration  12: 77014214.247 ops/s
Iteration  13: 76811348.104 ops/s
Iteration  14: 77297736.407 ops/s
Iteration  15: 76612645.734 ops/s
Iteration  16: 76570495.708 ops/s
Iteration  17: 77225368.578 ops/s
Iteration  18: 77065468.269 ops/s
Iteration  19: 77197478.687 ops/s
Iteration  20: 76982297.720 ops/s
Iteration  21: 76689164.023 ops/s
Iteration  22: 77098000.162 ops/s
Iteration  23: 77108428.564 ops/s
Iteration  24: 76957429.234 ops/s
Iteration  25: 77249799.750 ops/s
Iteration  26: 77151171.003 ops/s
Iteration  27: 77263837.665 ops/s
Iteration  28: 77153762.950 ops/s
Iteration  29: 77125410.997 ops/s
Iteration  30: 76701718.294 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_getFirst":
  76968411.232 ±(99.9%) 154184.825 ops/s [Average]
  (min, avg, max) = (76545697.919, 76968411.232, 77309545.095), stdev = 230776.605
  CI (99.9%): [76814226.407, 77122596.057] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_getFirst  thrpt   30  76968411.232 ± 154184.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37734039.623 ops/s
# Warmup Iteration   2: 76414127.701 ops/s
# Warmup Iteration   3: 65390059.922 ops/s
# Warmup Iteration   4: 76853928.464 ops/s
# Warmup Iteration   5: 76818340.002 ops/s
# Warmup Iteration   6: 76836461.355 ops/s
# Warmup Iteration   7: 76909177.211 ops/s
# Warmup Iteration   8: 76872623.496 ops/s
# Warmup Iteration   9: 76694634.121 ops/s
# Warmup Iteration  10: 76496157.464 ops/s
# Warmup Iteration  11: 76704902.974 ops/s
# Warmup Iteration  12: 76775168.542 ops/s
# Warmup Iteration  13: 77016096.410 ops/s
# Warmup Iteration  14: 76830530.151 ops/s
# Warmup Iteration  15: 76760840.267 ops/s
# Warmup Iteration  16: 76736332.908 ops/s
# Warmup Iteration  17: 76657031.963 ops/s
# Warmup Iteration  18: 76902739.323 ops/s
# Warmup Iteration  19: 76961134.077 ops/s
# Warmup Iteration  20: 76608788.381 ops/s
# Warmup Iteration  21: 76815599.119 ops/s
# Warmup Iteration  22: 76932142.011 ops/s
# Warmup Iteration  23: 76882588.529 ops/s
# Warmup Iteration  24: 76528992.911 ops/s
# Warmup Iteration  25: 76579748.076 ops/s
# Warmup Iteration  26: 76621335.779 ops/s
# Warmup Iteration  27: 76925267.868 ops/s
# Warmup Iteration  28: 76474185.549 ops/s
# Warmup Iteration  29: 76789253.195 ops/s
# Warmup Iteration  30: 76789721.579 ops/s
Iteration   1: 76673052.567 ops/s
Iteration   2: 76832558.825 ops/s
Iteration   3: 76380688.274 ops/s
Iteration   4: 76936058.543 ops/s
Iteration   5: 76658223.002 ops/s
Iteration   6: 76941351.038 ops/s
Iteration   7: 76074316.234 ops/s
Iteration   8: 76556457.780 ops/s
Iteration   9: 76633969.934 ops/s
Iteration  10: 77028772.815 ops/s
Iteration  11: 76409880.718 ops/s
Iteration  12: 76970788.987 ops/s
Iteration  13: 76813183.613 ops/s
Iteration  14: 77086164.597 ops/s
Iteration  15: 76684351.336 ops/s
Iteration  16: 76963628.307 ops/s
Iteration  17: 76879476.520 ops/s
Iteration  18: 77155977.159 ops/s
Iteration  19: 76932602.602 ops/s
Iteration  20: 77113136.953 ops/s
Iteration  21: 76981826.851 ops/s
Iteration  22: 76866866.267 ops/s
Iteration  23: 76949105.847 ops/s
Iteration  24: 77006718.957 ops/s
Iteration  25: 77014803.915 ops/s
Iteration  26: 76969211.580 ops/s
Iteration  27: 76794905.667 ops/s
Iteration  28: 76640981.041 ops/s
Iteration  29: 76548470.212 ops/s
Iteration  30: 76520785.929 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_getLast":
  76800610.536 ±(99.9%) 167073.047 ops/s [Average]
  (min, avg, max) = (76074316.234, 76800610.536, 77155977.159), stdev = 250067.090
  CI (99.9%): [76633537.489, 76967683.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_getLast  thrpt   30  76800610.536 ± 167073.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 797853.608 ops/s
# Warmup Iteration   2: 826451.710 ops/s
# Warmup Iteration   3: 1077410.133 ops/s
# Warmup Iteration   4: 1075974.876 ops/s
# Warmup Iteration   5: 1070264.693 ops/s
# Warmup Iteration   6: 1079763.472 ops/s
# Warmup Iteration   7: 1077775.767 ops/s
# Warmup Iteration   8: 1075410.051 ops/s
# Warmup Iteration   9: 1078593.304 ops/s
# Warmup Iteration  10: 1074783.366 ops/s
# Warmup Iteration  11: 1041390.501 ops/s
# Warmup Iteration  12: 943989.026 ops/s
# Warmup Iteration  13: 1078274.166 ops/s
# Warmup Iteration  14: 1078109.953 ops/s
# Warmup Iteration  15: 1076554.528 ops/s
# Warmup Iteration  16: 1074069.142 ops/s
# Warmup Iteration  17: 1142781.243 ops/s
# Warmup Iteration  18: 1140574.856 ops/s
# Warmup Iteration  19: 1147463.387 ops/s
# Warmup Iteration  20: 1145622.834 ops/s
# Warmup Iteration  21: 1146162.161 ops/s
# Warmup Iteration  22: 1147510.908 ops/s
# Warmup Iteration  23: 1147405.921 ops/s
# Warmup Iteration  24: 1145128.239 ops/s
# Warmup Iteration  25: 1148076.111 ops/s
# Warmup Iteration  26: 1147486.650 ops/s
# Warmup Iteration  27: 1141819.238 ops/s
# Warmup Iteration  28: 1145515.725 ops/s
# Warmup Iteration  29: 1144176.817 ops/s
# Warmup Iteration  30: 1143956.298 ops/s
Iteration   1: 1137118.275 ops/s
Iteration   2: 1137495.155 ops/s
Iteration   3: 1142763.654 ops/s
Iteration   4: 1143175.701 ops/s
Iteration   5: 1141126.745 ops/s
Iteration   6: 1147260.087 ops/s
Iteration   7: 1148507.984 ops/s
Iteration   8: 1147245.075 ops/s
Iteration   9: 1140891.387 ops/s
Iteration  10: 1147743.333 ops/s
Iteration  11: 1138934.582 ops/s
Iteration  12: 1145069.928 ops/s
Iteration  13: 1141837.849 ops/s
Iteration  14: 1147837.962 ops/s
Iteration  15: 1145807.497 ops/s
Iteration  16: 1144843.688 ops/s
Iteration  17: 1139647.298 ops/s
Iteration  18: 1148220.710 ops/s
Iteration  19: 1148185.444 ops/s
Iteration  20: 1144800.300 ops/s
Iteration  21: 1148049.741 ops/s
Iteration  22: 1140127.050 ops/s
Iteration  23: 1132366.700 ops/s
Iteration  24: 1142902.266 ops/s
Iteration  25: 1138969.589 ops/s
Iteration  26: 1147525.114 ops/s
Iteration  27: 1143266.051 ops/s
Iteration  28: 1145451.946 ops/s
Iteration  29: 1149776.938 ops/s
Iteration  30: 1150137.106 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_getOnly":
  1143902.839 ±(99.9%) 2908.185 ops/s [Average]
  (min, avg, max) = (1132366.700, 1143902.839, 1150137.106), stdev = 4352.835
  CI (99.9%): [1140994.653, 1146811.024] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_getOnly  thrpt   30  1143902.839 ± 2908.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 840631.007 ops/s
# Warmup Iteration   2: 1756312.397 ops/s
# Warmup Iteration   3: 1913468.024 ops/s
# Warmup Iteration   4: 1923067.740 ops/s
# Warmup Iteration   5: 1593284.545 ops/s
# Warmup Iteration   6: 1925217.695 ops/s
# Warmup Iteration   7: 1924371.022 ops/s
# Warmup Iteration   8: 1929220.201 ops/s
# Warmup Iteration   9: 1924687.072 ops/s
# Warmup Iteration  10: 1923062.868 ops/s
# Warmup Iteration  11: 1926227.336 ops/s
# Warmup Iteration  12: 1927393.065 ops/s
# Warmup Iteration  13: 1927960.596 ops/s
# Warmup Iteration  14: 1924248.082 ops/s
# Warmup Iteration  15: 1927236.110 ops/s
# Warmup Iteration  16: 1924414.061 ops/s
# Warmup Iteration  17: 1931407.526 ops/s
# Warmup Iteration  18: 1923529.161 ops/s
# Warmup Iteration  19: 1939326.219 ops/s
# Warmup Iteration  20: 1929750.434 ops/s
# Warmup Iteration  21: 1928042.389 ops/s
# Warmup Iteration  22: 1927097.785 ops/s
# Warmup Iteration  23: 1932988.647 ops/s
# Warmup Iteration  24: 1931398.835 ops/s
# Warmup Iteration  25: 1934786.648 ops/s
# Warmup Iteration  26: 1936677.491 ops/s
# Warmup Iteration  27: 1931076.079 ops/s
# Warmup Iteration  28: 1926021.492 ops/s
# Warmup Iteration  29: 1914363.091 ops/s
# Warmup Iteration  30: 1916314.034 ops/s
Iteration   1: 1929364.621 ops/s
Iteration   2: 1918695.528 ops/s
Iteration   3: 1928108.198 ops/s
Iteration   4: 1931797.592 ops/s
Iteration   5: 1933114.580 ops/s
Iteration   6: 1931953.699 ops/s
Iteration   7: 1934975.838 ops/s
Iteration   8: 1919044.905 ops/s
Iteration   9: 1925043.885 ops/s
Iteration  10: 1924615.586 ops/s
Iteration  11: 1926448.958 ops/s
Iteration  12: 1928180.349 ops/s
Iteration  13: 1923886.439 ops/s
Iteration  14: 1928217.877 ops/s
Iteration  15: 1915284.136 ops/s
Iteration  16: 1924949.644 ops/s
Iteration  17: 1930924.995 ops/s
Iteration  18: 1916790.655 ops/s
Iteration  19: 1928121.189 ops/s
Iteration  20: 1935118.925 ops/s
Iteration  21: 1923954.907 ops/s
Iteration  22: 1928422.639 ops/s
Iteration  23: 1934190.058 ops/s
Iteration  24: 1934404.605 ops/s
Iteration  25: 1921385.830 ops/s
Iteration  26: 1932823.502 ops/s
Iteration  27: 1935676.289 ops/s
Iteration  28: 1933204.404 ops/s
Iteration  29: 1933277.934 ops/s
Iteration  30: 1924063.025 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_groupBy":
  1927868.026 ±(99.9%) 3845.524 ops/s [Average]
  (min, avg, max) = (1915284.136, 1927868.026, 1935676.289), stdev = 5755.800
  CI (99.9%): [1924022.502, 1931713.551] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_groupBy  thrpt   30  1927868.026 ± 3845.524  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 131116.883 ops/s
# Warmup Iteration   2: 195045.178 ops/s
# Warmup Iteration   3: 243273.236 ops/s
# Warmup Iteration   4: 242309.565 ops/s
# Warmup Iteration   5: 242411.151 ops/s
# Warmup Iteration   6: 244250.839 ops/s
# Warmup Iteration   7: 222257.454 ops/s
# Warmup Iteration   8: 223054.809 ops/s
# Warmup Iteration   9: 243806.448 ops/s
# Warmup Iteration  10: 243752.164 ops/s
# Warmup Iteration  11: 242620.352 ops/s
# Warmup Iteration  12: 242266.584 ops/s
# Warmup Iteration  13: 242980.535 ops/s
# Warmup Iteration  14: 243694.323 ops/s
# Warmup Iteration  15: 243671.155 ops/s
# Warmup Iteration  16: 243463.804 ops/s
# Warmup Iteration  17: 243649.879 ops/s
# Warmup Iteration  18: 244052.521 ops/s
# Warmup Iteration  19: 244214.172 ops/s
# Warmup Iteration  20: 244190.084 ops/s
# Warmup Iteration  21: 243775.887 ops/s
# Warmup Iteration  22: 243861.519 ops/s
# Warmup Iteration  23: 243582.591 ops/s
# Warmup Iteration  24: 243929.850 ops/s
# Warmup Iteration  25: 244086.899 ops/s
# Warmup Iteration  26: 243916.552 ops/s
# Warmup Iteration  27: 244531.487 ops/s
# Warmup Iteration  28: 243691.085 ops/s
# Warmup Iteration  29: 242894.387 ops/s
# Warmup Iteration  30: 243517.740 ops/s
Iteration   1: 244278.589 ops/s
Iteration   2: 242627.929 ops/s
Iteration   3: 244448.988 ops/s
Iteration   4: 243859.971 ops/s
Iteration   5: 243892.341 ops/s
Iteration   6: 243279.373 ops/s
Iteration   7: 243829.736 ops/s
Iteration   8: 244468.728 ops/s
Iteration   9: 243451.923 ops/s
Iteration  10: 244402.266 ops/s
Iteration  11: 242864.753 ops/s
Iteration  12: 243160.722 ops/s
Iteration  13: 244076.900 ops/s
Iteration  14: 243243.292 ops/s
Iteration  15: 245235.222 ops/s
Iteration  16: 244145.820 ops/s
Iteration  17: 244692.512 ops/s
Iteration  18: 243687.740 ops/s
Iteration  19: 243748.467 ops/s
Iteration  20: 243191.526 ops/s
Iteration  21: 243397.796 ops/s
Iteration  22: 243356.948 ops/s
Iteration  23: 243094.543 ops/s
Iteration  24: 244274.727 ops/s
Iteration  25: 242883.928 ops/s
Iteration  26: 244119.985 ops/s
Iteration  27: 244126.542 ops/s
Iteration  28: 243694.624 ops/s
Iteration  29: 242854.530 ops/s
Iteration  30: 242379.285 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_groupByEach":
  243692.324 ±(99.9%) 446.903 ops/s [Average]
  (min, avg, max) = (242379.285, 243692.324, 245235.222), stdev = 668.904
  CI (99.9%): [243245.420, 244139.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_groupByEach  thrpt   30  243692.324 ± 446.903  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15660449.079 ops/s
# Warmup Iteration   2: 29532942.953 ops/s
# Warmup Iteration   3: 30818829.602 ops/s
# Warmup Iteration   4: 30976899.035 ops/s
# Warmup Iteration   5: 26149059.507 ops/s
# Warmup Iteration   6: 31058526.870 ops/s
# Warmup Iteration   7: 31082940.149 ops/s
# Warmup Iteration   8: 30992455.754 ops/s
# Warmup Iteration   9: 31020005.407 ops/s
# Warmup Iteration  10: 31071294.528 ops/s
# Warmup Iteration  11: 30941445.032 ops/s
# Warmup Iteration  12: 31015696.062 ops/s
# Warmup Iteration  13: 31046245.335 ops/s
# Warmup Iteration  14: 31090925.047 ops/s
# Warmup Iteration  15: 30991244.044 ops/s
# Warmup Iteration  16: 31100673.245 ops/s
# Warmup Iteration  17: 30978147.020 ops/s
# Warmup Iteration  18: 31073349.045 ops/s
# Warmup Iteration  19: 30560723.090 ops/s
# Warmup Iteration  20: 31089583.889 ops/s
# Warmup Iteration  21: 31119374.812 ops/s
# Warmup Iteration  22: 31120787.815 ops/s
# Warmup Iteration  23: 31080475.588 ops/s
# Warmup Iteration  24: 30910313.676 ops/s
# Warmup Iteration  25: 31150403.442 ops/s
# Warmup Iteration  26: 31003203.746 ops/s
# Warmup Iteration  27: 31026242.256 ops/s
# Warmup Iteration  28: 31119712.676 ops/s
# Warmup Iteration  29: 31135984.152 ops/s
# Warmup Iteration  30: 31022447.592 ops/s
Iteration   1: 31053858.123 ops/s
Iteration   2: 31067629.540 ops/s
Iteration   3: 31053412.022 ops/s
Iteration   4: 31029812.934 ops/s
Iteration   5: 31159111.146 ops/s
Iteration   6: 30899163.513 ops/s
Iteration   7: 30945012.074 ops/s
Iteration   8: 31115628.269 ops/s
Iteration   9: 31030771.827 ops/s
Iteration  10: 31138554.328 ops/s
Iteration  11: 31183765.915 ops/s
Iteration  12: 31135389.342 ops/s
Iteration  13: 30885473.457 ops/s
Iteration  14: 31164433.041 ops/s
Iteration  15: 31133997.015 ops/s
Iteration  16: 31040682.165 ops/s
Iteration  17: 30877074.104 ops/s
Iteration  18: 31160111.297 ops/s
Iteration  19: 31163839.670 ops/s
Iteration  20: 31031318.102 ops/s
Iteration  21: 30946301.163 ops/s
Iteration  22: 30661968.044 ops/s
Iteration  23: 30753465.539 ops/s
Iteration  24: 30981359.469 ops/s
Iteration  25: 30970280.498 ops/s
Iteration  26: 31064314.039 ops/s
Iteration  27: 31073543.005 ops/s
Iteration  28: 31022091.749 ops/s
Iteration  29: 31252829.020 ops/s
Iteration  30: 31114467.942 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_indexOf":
  31036988.612 ±(99.9%) 86743.544 ops/s [Average]
  (min, avg, max) = (30661968.044, 31036988.612, 31252829.020), stdev = 129833.663
  CI (99.9%): [30950245.068, 31123732.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_indexOf  thrpt   30  31036988.612 ± 86743.544  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9441255.250 ops/s
# Warmup Iteration   2: 20163038.255 ops/s
# Warmup Iteration   3: 21410067.422 ops/s
# Warmup Iteration   4: 17931017.570 ops/s
# Warmup Iteration   5: 21509344.236 ops/s
# Warmup Iteration   6: 21579800.444 ops/s
# Warmup Iteration   7: 21417636.305 ops/s
# Warmup Iteration   8: 21414982.323 ops/s
# Warmup Iteration   9: 21447522.028 ops/s
# Warmup Iteration  10: 21385906.712 ops/s
# Warmup Iteration  11: 21318609.954 ops/s
# Warmup Iteration  12: 21492074.369 ops/s
# Warmup Iteration  13: 21474988.605 ops/s
# Warmup Iteration  14: 21451686.663 ops/s
# Warmup Iteration  15: 21491916.217 ops/s
# Warmup Iteration  16: 21392653.646 ops/s
# Warmup Iteration  17: 21555186.560 ops/s
# Warmup Iteration  18: 21476162.760 ops/s
# Warmup Iteration  19: 21438475.755 ops/s
# Warmup Iteration  20: 21430621.270 ops/s
# Warmup Iteration  21: 21538220.060 ops/s
# Warmup Iteration  22: 21473152.244 ops/s
# Warmup Iteration  23: 21550139.760 ops/s
# Warmup Iteration  24: 21482231.783 ops/s
# Warmup Iteration  25: 21510666.189 ops/s
# Warmup Iteration  26: 21509025.836 ops/s
# Warmup Iteration  27: 21558411.018 ops/s
# Warmup Iteration  28: 21505363.932 ops/s
# Warmup Iteration  29: 21491149.530 ops/s
# Warmup Iteration  30: 21524604.707 ops/s
Iteration   1: 21415116.318 ops/s
Iteration   2: 21549533.351 ops/s
Iteration   3: 21424002.144 ops/s
Iteration   4: 21463765.745 ops/s
Iteration   5: 21028898.563 ops/s
Iteration   6: 21448669.970 ops/s
Iteration   7: 21564350.976 ops/s
Iteration   8: 21335376.000 ops/s
Iteration   9: 21548588.151 ops/s
Iteration  10: 21583511.808 ops/s
Iteration  11: 21549634.555 ops/s
Iteration  12: 21534022.281 ops/s
Iteration  13: 21534121.819 ops/s
Iteration  14: 21549950.627 ops/s
Iteration  15: 21578266.638 ops/s
Iteration  16: 21475058.292 ops/s
Iteration  17: 21504740.927 ops/s
Iteration  18: 21441761.575 ops/s
Iteration  19: 21525865.398 ops/s
Iteration  20: 21517171.674 ops/s
Iteration  21: 21479728.628 ops/s
Iteration  22: 21499555.893 ops/s
Iteration  23: 21529721.168 ops/s
Iteration  24: 21442353.050 ops/s
Iteration  25: 21427402.060 ops/s
Iteration  26: 21428411.246 ops/s
Iteration  27: 21531056.182 ops/s
Iteration  28: 21378146.376 ops/s
Iteration  29: 21416173.621 ops/s
Iteration  30: 21385620.810 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectInto":
  21469685.862 ±(99.9%) 70583.217 ops/s [Average]
  (min, avg, max) = (21028898.563, 21469685.862, 21583511.808), stdev = 105645.644
  CI (99.9%): [21399102.645, 21540269.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_injectInto  thrpt   30  21469685.862 ± 70583.217  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11014717.609 ops/s
# Warmup Iteration   2: 22606422.738 ops/s
# Warmup Iteration   3: 23245537.661 ops/s
# Warmup Iteration   4: 21985464.569 ops/s
# Warmup Iteration   5: 20774146.383 ops/s
# Warmup Iteration   6: 23267342.837 ops/s
# Warmup Iteration   7: 23264211.282 ops/s
# Warmup Iteration   8: 23198075.086 ops/s
# Warmup Iteration   9: 23312846.355 ops/s
# Warmup Iteration  10: 23321208.111 ops/s
# Warmup Iteration  11: 23178879.679 ops/s
# Warmup Iteration  12: 23208620.808 ops/s
# Warmup Iteration  13: 23305589.370 ops/s
# Warmup Iteration  14: 23270381.133 ops/s
# Warmup Iteration  15: 23200981.182 ops/s
# Warmup Iteration  16: 23194449.582 ops/s
# Warmup Iteration  17: 23214434.850 ops/s
# Warmup Iteration  18: 23295941.232 ops/s
# Warmup Iteration  19: 23217907.736 ops/s
# Warmup Iteration  20: 23261967.648 ops/s
# Warmup Iteration  21: 23229125.960 ops/s
# Warmup Iteration  22: 23271060.222 ops/s
# Warmup Iteration  23: 23222874.749 ops/s
# Warmup Iteration  24: 23249785.589 ops/s
# Warmup Iteration  25: 23289036.537 ops/s
# Warmup Iteration  26: 23297623.568 ops/s
# Warmup Iteration  27: 23284939.092 ops/s
# Warmup Iteration  28: 23163950.660 ops/s
# Warmup Iteration  29: 23202297.402 ops/s
# Warmup Iteration  30: 23066403.050 ops/s
Iteration   1: 23230007.798 ops/s
Iteration   2: 23214619.788 ops/s
Iteration   3: 23173196.100 ops/s
Iteration   4: 23151834.877 ops/s
Iteration   5: 23203320.826 ops/s
Iteration   6: 23338636.636 ops/s
Iteration   7: 23280475.173 ops/s
Iteration   8: 23182559.885 ops/s
Iteration   9: 23318508.891 ops/s
Iteration  10: 23310371.633 ops/s
Iteration  11: 23345183.325 ops/s
Iteration  12: 23172365.660 ops/s
Iteration  13: 23207913.300 ops/s
Iteration  14: 23312852.988 ops/s
Iteration  15: 23294061.773 ops/s
Iteration  16: 23327647.143 ops/s
Iteration  17: 23310661.003 ops/s
Iteration  18: 23336236.006 ops/s
Iteration  19: 23192855.552 ops/s
Iteration  20: 23344333.593 ops/s
Iteration  21: 23265251.757 ops/s
Iteration  22: 23320618.125 ops/s
Iteration  23: 23294542.692 ops/s
Iteration  24: 23321000.164 ops/s
Iteration  25: 23149496.911 ops/s
Iteration  26: 23277752.368 ops/s
Iteration  27: 23307171.994 ops/s
Iteration  28: 23305899.638 ops/s
Iteration  29: 23291408.863 ops/s
Iteration  30: 23211065.233 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoDouble":
  23266394.990 ±(99.9%) 42576.867 ops/s [Average]
  (min, avg, max) = (23149496.911, 23266394.990, 23345183.325), stdev = 63727.055
  CI (99.9%): [23223818.123, 23308971.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  23266394.990 ± 42576.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10999825.038 ops/s
# Warmup Iteration   2: 22181919.503 ops/s
# Warmup Iteration   3: 22059017.578 ops/s
# Warmup Iteration   4: 22332712.190 ops/s
# Warmup Iteration   5: 18739561.937 ops/s
# Warmup Iteration   6: 22338798.292 ops/s
# Warmup Iteration   7: 22240269.628 ops/s
# Warmup Iteration   8: 22366481.748 ops/s
# Warmup Iteration   9: 22365155.790 ops/s
# Warmup Iteration  10: 22298248.328 ops/s
# Warmup Iteration  11: 22329444.581 ops/s
# Warmup Iteration  12: 22404952.468 ops/s
# Warmup Iteration  13: 22385271.829 ops/s
# Warmup Iteration  14: 22421750.923 ops/s
# Warmup Iteration  15: 22379724.857 ops/s
# Warmup Iteration  16: 22420651.211 ops/s
# Warmup Iteration  17: 22439091.356 ops/s
# Warmup Iteration  18: 22425959.892 ops/s
# Warmup Iteration  19: 22406511.112 ops/s
# Warmup Iteration  20: 22446033.442 ops/s
# Warmup Iteration  21: 22427127.583 ops/s
# Warmup Iteration  22: 22452265.985 ops/s
# Warmup Iteration  23: 22417517.864 ops/s
# Warmup Iteration  24: 22426206.960 ops/s
# Warmup Iteration  25: 22398863.513 ops/s
# Warmup Iteration  26: 22388917.077 ops/s
# Warmup Iteration  27: 22381535.428 ops/s
# Warmup Iteration  28: 22331299.051 ops/s
# Warmup Iteration  29: 22433806.117 ops/s
# Warmup Iteration  30: 22415960.846 ops/s
Iteration   1: 22320636.305 ops/s
Iteration   2: 22394138.626 ops/s
Iteration   3: 22348611.499 ops/s
Iteration   4: 22372965.259 ops/s
Iteration   5: 22249764.556 ops/s
Iteration   6: 22238653.764 ops/s
Iteration   7: 22379455.494 ops/s
Iteration   8: 22264925.285 ops/s
Iteration   9: 22314770.575 ops/s
Iteration  10: 22394584.428 ops/s
Iteration  11: 22347511.151 ops/s
Iteration  12: 22274607.340 ops/s
Iteration  13: 22416027.411 ops/s
Iteration  14: 22286167.679 ops/s
Iteration  15: 22322222.402 ops/s
Iteration  16: 22315645.220 ops/s
Iteration  17: 22398739.653 ops/s
Iteration  18: 22318721.521 ops/s
Iteration  19: 22415961.180 ops/s
Iteration  20: 22368876.614 ops/s
Iteration  21: 22275165.152 ops/s
Iteration  22: 22349256.469 ops/s
Iteration  23: 22399945.516 ops/s
Iteration  24: 22368798.797 ops/s
Iteration  25: 22324346.346 ops/s
Iteration  26: 22395064.690 ops/s
Iteration  27: 22449969.278 ops/s
Iteration  28: 22440038.654 ops/s
Iteration  29: 22405590.190 ops/s
Iteration  30: 22322699.241 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoFloat":
  22349128.676 ±(99.9%) 38099.979 ops/s [Average]
  (min, avg, max) = (22238653.764, 22349128.676, 22449969.278), stdev = 57026.259
  CI (99.9%): [22311028.698, 22387228.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  22349128.676 ± 38099.979  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11452473.651 ops/s
# Warmup Iteration   2: 23463386.550 ops/s
# Warmup Iteration   3: 23932551.905 ops/s
# Warmup Iteration   4: 21396007.275 ops/s
# Warmup Iteration   5: 22919028.455 ops/s
# Warmup Iteration   6: 24054108.907 ops/s
# Warmup Iteration   7: 24104172.569 ops/s
# Warmup Iteration   8: 24101614.059 ops/s
# Warmup Iteration   9: 24090786.847 ops/s
# Warmup Iteration  10: 24134997.983 ops/s
# Warmup Iteration  11: 24058026.194 ops/s
# Warmup Iteration  12: 24084503.747 ops/s
# Warmup Iteration  13: 24129719.978 ops/s
# Warmup Iteration  14: 24052540.496 ops/s
# Warmup Iteration  15: 24135045.839 ops/s
# Warmup Iteration  16: 24150304.145 ops/s
# Warmup Iteration  17: 24253438.053 ops/s
# Warmup Iteration  18: 24165923.260 ops/s
# Warmup Iteration  19: 24196926.005 ops/s
# Warmup Iteration  20: 24217251.723 ops/s
# Warmup Iteration  21: 24150707.344 ops/s
# Warmup Iteration  22: 24171958.757 ops/s
# Warmup Iteration  23: 24155646.118 ops/s
# Warmup Iteration  24: 24135577.689 ops/s
# Warmup Iteration  25: 24213130.231 ops/s
# Warmup Iteration  26: 24127454.941 ops/s
# Warmup Iteration  27: 24233084.605 ops/s
# Warmup Iteration  28: 24111033.943 ops/s
# Warmup Iteration  29: 24165528.891 ops/s
# Warmup Iteration  30: 24222726.702 ops/s
Iteration   1: 24247988.303 ops/s
Iteration   2: 24145135.328 ops/s
Iteration   3: 24178019.263 ops/s
Iteration   4: 24228899.708 ops/s
Iteration   5: 24176096.396 ops/s
Iteration   6: 24272804.806 ops/s
Iteration   7: 24165909.653 ops/s
Iteration   8: 24221024.923 ops/s
Iteration   9: 24220335.785 ops/s
Iteration  10: 24189033.723 ops/s
Iteration  11: 24216064.246 ops/s
Iteration  12: 24085463.264 ops/s
Iteration  13: 24204807.145 ops/s
Iteration  14: 24198181.964 ops/s
Iteration  15: 24263709.603 ops/s
Iteration  16: 24161916.920 ops/s
Iteration  17: 24209375.760 ops/s
Iteration  18: 24043101.394 ops/s
Iteration  19: 24117793.712 ops/s
Iteration  20: 24133173.487 ops/s
Iteration  21: 24211103.919 ops/s
Iteration  22: 24108436.421 ops/s
Iteration  23: 24245012.789 ops/s
Iteration  24: 24187216.387 ops/s
Iteration  25: 24245851.463 ops/s
Iteration  26: 24224976.566 ops/s
Iteration  27: 24276244.344 ops/s
Iteration  28: 24067147.275 ops/s
Iteration  29: 23936026.799 ops/s
Iteration  30: 24184164.958 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoInt":
  24178833.877 ±(99.9%) 50067.877 ops/s [Average]
  (min, avg, max) = (23936026.799, 24178833.877, 24276244.344), stdev = 74939.247
  CI (99.9%): [24128766.000, 24228901.754] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  24178833.877 ± 50067.877  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11161178.560 ops/s
# Warmup Iteration   2: 23373435.529 ops/s
# Warmup Iteration   3: 23070115.556 ops/s
# Warmup Iteration   4: 21638166.385 ops/s
# Warmup Iteration   5: 21055645.162 ops/s
# Warmup Iteration   6: 23220622.243 ops/s
# Warmup Iteration   7: 23217004.731 ops/s
# Warmup Iteration   8: 23209303.234 ops/s
# Warmup Iteration   9: 23183337.105 ops/s
# Warmup Iteration  10: 23171743.146 ops/s
# Warmup Iteration  11: 23252168.542 ops/s
# Warmup Iteration  12: 23202276.820 ops/s
# Warmup Iteration  13: 23228174.722 ops/s
# Warmup Iteration  14: 23177613.951 ops/s
# Warmup Iteration  15: 23245523.365 ops/s
# Warmup Iteration  16: 23186993.056 ops/s
# Warmup Iteration  17: 23186176.809 ops/s
# Warmup Iteration  18: 23209835.656 ops/s
# Warmup Iteration  19: 23148292.698 ops/s
# Warmup Iteration  20: 23229716.170 ops/s
# Warmup Iteration  21: 23171796.276 ops/s
# Warmup Iteration  22: 23138140.877 ops/s
# Warmup Iteration  23: 22944271.565 ops/s
# Warmup Iteration  24: 23171876.961 ops/s
# Warmup Iteration  25: 23175949.011 ops/s
# Warmup Iteration  26: 23027335.543 ops/s
# Warmup Iteration  27: 23163368.489 ops/s
# Warmup Iteration  28: 23214907.930 ops/s
# Warmup Iteration  29: 23099453.268 ops/s
# Warmup Iteration  30: 23114220.056 ops/s
Iteration   1: 23359398.363 ops/s
Iteration   2: 23245924.935 ops/s
Iteration   3: 23200195.629 ops/s
Iteration   4: 23271765.783 ops/s
Iteration   5: 23047570.343 ops/s
Iteration   6: 23297252.802 ops/s
Iteration   7: 23225360.389 ops/s
Iteration   8: 23088616.200 ops/s
Iteration   9: 23066347.500 ops/s
Iteration  10: 23194533.827 ops/s
Iteration  11: 23095654.593 ops/s
Iteration  12: 23213704.161 ops/s
Iteration  13: 23132542.198 ops/s
Iteration  14: 23219582.348 ops/s
Iteration  15: 23088307.540 ops/s
Iteration  16: 23136561.298 ops/s
Iteration  17: 23224756.836 ops/s
Iteration  18: 23191146.346 ops/s
Iteration  19: 23240853.519 ops/s
Iteration  20: 23173551.035 ops/s
Iteration  21: 23194217.955 ops/s
Iteration  22: 23163551.210 ops/s
Iteration  23: 23136112.774 ops/s
Iteration  24: 23155982.952 ops/s
Iteration  25: 23157852.425 ops/s
Iteration  26: 23140624.052 ops/s
Iteration  27: 23183388.544 ops/s
Iteration  28: 23242568.734 ops/s
Iteration  29: 23210279.471 ops/s
Iteration  30: 23233363.021 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoLong":
  23184385.559 ±(99.9%) 46511.691 ops/s [Average]
  (min, avg, max) = (23047570.343, 23184385.559, 23359398.363), stdev = 69616.514
  CI (99.9%): [23137873.869, 23230897.250] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  23184385.559 ± 46511.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38338779.051 ops/s
# Warmup Iteration   2: 76667987.276 ops/s
# Warmup Iteration   3: 68609586.699 ops/s
# Warmup Iteration   4: 80255351.801 ops/s
# Warmup Iteration   5: 80594508.526 ops/s
# Warmup Iteration   6: 80660506.053 ops/s
# Warmup Iteration   7: 80286509.578 ops/s
# Warmup Iteration   8: 80960764.203 ops/s
# Warmup Iteration   9: 80688492.161 ops/s
# Warmup Iteration  10: 80591081.264 ops/s
# Warmup Iteration  11: 80897376.820 ops/s
# Warmup Iteration  12: 81092678.500 ops/s
# Warmup Iteration  13: 80443468.659 ops/s
# Warmup Iteration  14: 80588392.392 ops/s
# Warmup Iteration  15: 80368662.242 ops/s
# Warmup Iteration  16: 80450676.229 ops/s
# Warmup Iteration  17: 77511712.593 ops/s
# Warmup Iteration  18: 77676727.932 ops/s
# Warmup Iteration  19: 77649145.403 ops/s
# Warmup Iteration  20: 78077696.756 ops/s
# Warmup Iteration  21: 77714845.515 ops/s
# Warmup Iteration  22: 77837930.640 ops/s
# Warmup Iteration  23: 78098008.423 ops/s
# Warmup Iteration  24: 77916612.996 ops/s
# Warmup Iteration  25: 77697715.252 ops/s
# Warmup Iteration  26: 77745642.374 ops/s
# Warmup Iteration  27: 77544953.511 ops/s
# Warmup Iteration  28: 78030294.612 ops/s
# Warmup Iteration  29: 77715753.231 ops/s
# Warmup Iteration  30: 77830468.290 ops/s
Iteration   1: 77953392.122 ops/s
Iteration   2: 77800007.013 ops/s
Iteration   3: 77701200.354 ops/s
Iteration   4: 77859849.520 ops/s
Iteration   5: 78186402.720 ops/s
Iteration   6: 78234002.545 ops/s
Iteration   7: 77899599.094 ops/s
Iteration   8: 78294718.385 ops/s
Iteration   9: 77454689.924 ops/s
Iteration  10: 78315634.317 ops/s
Iteration  11: 78248535.689 ops/s
Iteration  12: 77918842.120 ops/s
Iteration  13: 78000901.813 ops/s
Iteration  14: 78149283.417 ops/s
Iteration  15: 78124353.503 ops/s
Iteration  16: 77930334.569 ops/s
Iteration  17: 77937764.028 ops/s
Iteration  18: 78214106.348 ops/s
Iteration  19: 77675343.438 ops/s
Iteration  20: 77069538.036 ops/s
Iteration  21: 77771700.773 ops/s
Iteration  22: 77757748.571 ops/s
Iteration  23: 77956296.217 ops/s
Iteration  24: 77632385.423 ops/s
Iteration  25: 78096334.079 ops/s
Iteration  26: 77867980.593 ops/s
Iteration  27: 77655261.446 ops/s
Iteration  28: 77866259.896 ops/s
Iteration  29: 77607839.876 ops/s
Iteration  30: 78136938.997 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_isEmpty":
  77910574.828 ±(99.9%) 184448.771 ops/s [Average]
  (min, avg, max) = (77069538.036, 77910574.828, 78315634.317), stdev = 276074.258
  CI (99.9%): [77726126.057, 78095023.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_isEmpty  thrpt   30  77910574.828 ± 184448.771  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 375222.976 ops/s
# Warmup Iteration   2: 391763.078 ops/s
# Warmup Iteration   3: 463806.391 ops/s
# Warmup Iteration   4: 491547.300 ops/s
# Warmup Iteration   5: 490673.538 ops/s
# Warmup Iteration   6: 487645.644 ops/s
# Warmup Iteration   7: 491339.374 ops/s
# Warmup Iteration   8: 490637.012 ops/s
# Warmup Iteration   9: 491598.768 ops/s
# Warmup Iteration  10: 490432.838 ops/s
# Warmup Iteration  11: 490898.899 ops/s
# Warmup Iteration  12: 490700.502 ops/s
# Warmup Iteration  13: 488908.726 ops/s
# Warmup Iteration  14: 417926.904 ops/s
# Warmup Iteration  15: 491066.993 ops/s
# Warmup Iteration  16: 490062.338 ops/s
# Warmup Iteration  17: 519543.877 ops/s
# Warmup Iteration  18: 519261.171 ops/s
# Warmup Iteration  19: 519740.948 ops/s
# Warmup Iteration  20: 520106.791 ops/s
# Warmup Iteration  21: 518353.933 ops/s
# Warmup Iteration  22: 521170.454 ops/s
# Warmup Iteration  23: 516806.608 ops/s
# Warmup Iteration  24: 517708.624 ops/s
# Warmup Iteration  25: 516866.276 ops/s
# Warmup Iteration  26: 519997.644 ops/s
# Warmup Iteration  27: 519379.291 ops/s
# Warmup Iteration  28: 519649.294 ops/s
# Warmup Iteration  29: 519717.248 ops/s
# Warmup Iteration  30: 519570.511 ops/s
Iteration   1: 517548.827 ops/s
Iteration   2: 517346.059 ops/s
Iteration   3: 519815.103 ops/s
Iteration   4: 519635.590 ops/s
Iteration   5: 518590.176 ops/s
Iteration   6: 520329.997 ops/s
Iteration   7: 521698.044 ops/s
Iteration   8: 520485.217 ops/s
Iteration   9: 518697.288 ops/s
Iteration  10: 519139.410 ops/s
Iteration  11: 520417.062 ops/s
Iteration  12: 520820.965 ops/s
Iteration  13: 520942.596 ops/s
Iteration  14: 515441.358 ops/s
Iteration  15: 518881.320 ops/s
Iteration  16: 520374.414 ops/s
Iteration  17: 520044.695 ops/s
Iteration  18: 520698.527 ops/s
Iteration  19: 518528.713 ops/s
Iteration  20: 520134.359 ops/s
Iteration  21: 519761.920 ops/s
Iteration  22: 518993.488 ops/s
Iteration  23: 518933.627 ops/s
Iteration  24: 519728.878 ops/s
Iteration  25: 518404.215 ops/s
Iteration  26: 518168.772 ops/s
Iteration  27: 519624.727 ops/s
Iteration  28: 519584.605 ops/s
Iteration  29: 519050.966 ops/s
Iteration  30: 519330.739 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_iterator":
  519371.722 ±(99.9%) 836.442 ops/s [Average]
  (min, avg, max) = (515441.358, 519371.722, 521698.044), stdev = 1251.948
  CI (99.9%): [518535.279, 520208.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_iterator  thrpt   30  519371.722 ± 836.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 738434.776 ops/s
# Warmup Iteration   2: 683121.544 ops/s
# Warmup Iteration   3: 989182.291 ops/s
# Warmup Iteration   4: 982513.172 ops/s
# Warmup Iteration   5: 972257.129 ops/s
# Warmup Iteration   6: 987811.206 ops/s
# Warmup Iteration   7: 985581.403 ops/s
# Warmup Iteration   8: 984464.709 ops/s
# Warmup Iteration   9: 987887.276 ops/s
# Warmup Iteration  10: 983179.387 ops/s
# Warmup Iteration  11: 934482.898 ops/s
# Warmup Iteration  12: 884787.478 ops/s
# Warmup Iteration  13: 984769.282 ops/s
# Warmup Iteration  14: 985654.416 ops/s
# Warmup Iteration  15: 985862.798 ops/s
# Warmup Iteration  16: 981494.834 ops/s
# Warmup Iteration  17: 1044854.732 ops/s
# Warmup Iteration  18: 1048825.404 ops/s
# Warmup Iteration  19: 1046454.949 ops/s
# Warmup Iteration  20: 1045473.599 ops/s
# Warmup Iteration  21: 1042603.376 ops/s
# Warmup Iteration  22: 1045051.274 ops/s
# Warmup Iteration  23: 1045581.690 ops/s
# Warmup Iteration  24: 1047730.139 ops/s
# Warmup Iteration  25: 1045016.510 ops/s
# Warmup Iteration  26: 1050854.573 ops/s
# Warmup Iteration  27: 1046213.126 ops/s
# Warmup Iteration  28: 1043158.653 ops/s
# Warmup Iteration  29: 1045667.935 ops/s
# Warmup Iteration  30: 1046495.318 ops/s
Iteration   1: 1046111.842 ops/s
Iteration   2: 1046734.248 ops/s
Iteration   3: 1050123.342 ops/s
Iteration   4: 1046678.805 ops/s
Iteration   5: 1039440.363 ops/s
Iteration   6: 1044518.565 ops/s
Iteration   7: 1043812.989 ops/s
Iteration   8: 1039753.729 ops/s
Iteration   9: 1037375.203 ops/s
Iteration  10: 1044426.170 ops/s
Iteration  11: 1047110.432 ops/s
Iteration  12: 1045508.786 ops/s
Iteration  13: 1040597.876 ops/s
Iteration  14: 1039189.087 ops/s
Iteration  15: 1047995.903 ops/s
Iteration  16: 1038466.416 ops/s
Iteration  17: 1047767.097 ops/s
Iteration  18: 1043194.591 ops/s
Iteration  19: 1043072.209 ops/s
Iteration  20: 1044450.281 ops/s
Iteration  21: 1045903.439 ops/s
Iteration  22: 1045688.839 ops/s
Iteration  23: 1041656.675 ops/s
Iteration  24: 1044934.388 ops/s
Iteration  25: 1044826.872 ops/s
Iteration  26: 1047029.414 ops/s
Iteration  27: 1042360.472 ops/s
Iteration  28: 1038093.846 ops/s
Iteration  29: 1038379.069 ops/s
Iteration  30: 1039921.993 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_iteratorRemove":
  1043504.098 ±(99.9%) 2321.324 ops/s [Average]
  (min, avg, max) = (1037375.203, 1043504.098, 1050123.342), stdev = 3474.449
  CI (99.9%): [1041182.773, 1045825.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1043504.098 ± 2321.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16553567.271 ops/s
# Warmup Iteration   2: 34874573.609 ops/s
# Warmup Iteration   3: 34344123.266 ops/s
# Warmup Iteration   4: 32619310.759 ops/s
# Warmup Iteration   5: 30735057.633 ops/s
# Warmup Iteration   6: 34315512.686 ops/s
# Warmup Iteration   7: 34319225.133 ops/s
# Warmup Iteration   8: 34292567.963 ops/s
# Warmup Iteration   9: 34230843.860 ops/s
# Warmup Iteration  10: 34282283.653 ops/s
# Warmup Iteration  11: 34319737.858 ops/s
# Warmup Iteration  12: 34333190.806 ops/s
# Warmup Iteration  13: 34352961.995 ops/s
# Warmup Iteration  14: 34163438.978 ops/s
# Warmup Iteration  15: 34347788.716 ops/s
# Warmup Iteration  16: 34264348.743 ops/s
# Warmup Iteration  17: 34343809.623 ops/s
# Warmup Iteration  18: 34214796.000 ops/s
# Warmup Iteration  19: 34386581.533 ops/s
# Warmup Iteration  20: 34374887.017 ops/s
# Warmup Iteration  21: 34269089.783 ops/s
# Warmup Iteration  22: 34244028.614 ops/s
# Warmup Iteration  23: 34294743.106 ops/s
# Warmup Iteration  24: 34319544.368 ops/s
# Warmup Iteration  25: 34358852.880 ops/s
# Warmup Iteration  26: 34329733.023 ops/s
# Warmup Iteration  27: 34285567.995 ops/s
# Warmup Iteration  28: 34329614.191 ops/s
# Warmup Iteration  29: 34442733.655 ops/s
# Warmup Iteration  30: 34358102.034 ops/s
Iteration   1: 34215910.885 ops/s
Iteration   2: 34190958.482 ops/s
Iteration   3: 34330954.076 ops/s
Iteration   4: 34326783.700 ops/s
Iteration   5: 34356164.459 ops/s
Iteration   6: 34276044.876 ops/s
Iteration   7: 34356789.001 ops/s
Iteration   8: 34408298.544 ops/s
Iteration   9: 34232897.548 ops/s
Iteration  10: 34432177.766 ops/s
Iteration  11: 34204368.070 ops/s
Iteration  12: 34380986.775 ops/s
Iteration  13: 34285159.870 ops/s
Iteration  14: 34212921.998 ops/s
Iteration  15: 34246562.496 ops/s
Iteration  16: 34300843.448 ops/s
Iteration  17: 34254624.049 ops/s
Iteration  18: 34239053.411 ops/s
Iteration  19: 34338461.429 ops/s
Iteration  20: 34208853.103 ops/s
Iteration  21: 34329264.352 ops/s
Iteration  22: 34332902.189 ops/s
Iteration  23: 34277963.007 ops/s
Iteration  24: 34321923.350 ops/s
Iteration  25: 34238849.829 ops/s
Iteration  26: 34243092.694 ops/s
Iteration  27: 34375475.119 ops/s
Iteration  28: 34307548.592 ops/s
Iteration  29: 34420162.344 ops/s
Iteration  30: 33997008.907 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_lastIndexOf":
  34288100.146 ±(99.9%) 58303.752 ops/s [Average]
  (min, avg, max) = (33997008.907, 34288100.146, 34432177.766), stdev = 87266.318
  CI (99.9%): [34229796.393, 34346403.898] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  34288100.146 ± 58303.752  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 146898.209 ops/s
# Warmup Iteration   2: 153931.017 ops/s
# Warmup Iteration   3: 185695.348 ops/s
# Warmup Iteration   4: 192958.840 ops/s
# Warmup Iteration   5: 194110.076 ops/s
# Warmup Iteration   6: 192783.423 ops/s
# Warmup Iteration   7: 194141.473 ops/s
# Warmup Iteration   8: 194007.217 ops/s
# Warmup Iteration   9: 194065.852 ops/s
# Warmup Iteration  10: 193502.772 ops/s
# Warmup Iteration  11: 193318.681 ops/s
# Warmup Iteration  12: 193562.698 ops/s
# Warmup Iteration  13: 178926.855 ops/s
# Warmup Iteration  14: 180156.640 ops/s
# Warmup Iteration  15: 193664.757 ops/s
# Warmup Iteration  16: 194036.965 ops/s
# Warmup Iteration  17: 205294.088 ops/s
# Warmup Iteration  18: 204693.238 ops/s
# Warmup Iteration  19: 205683.243 ops/s
# Warmup Iteration  20: 205930.680 ops/s
# Warmup Iteration  21: 205357.504 ops/s
# Warmup Iteration  22: 205959.776 ops/s
# Warmup Iteration  23: 205584.070 ops/s
# Warmup Iteration  24: 205574.737 ops/s
# Warmup Iteration  25: 204787.491 ops/s
# Warmup Iteration  26: 205184.255 ops/s
# Warmup Iteration  27: 203465.255 ops/s
# Warmup Iteration  28: 203401.195 ops/s
# Warmup Iteration  29: 204171.391 ops/s
# Warmup Iteration  30: 204133.624 ops/s
Iteration   1: 205599.238 ops/s
Iteration   2: 204885.360 ops/s
Iteration   3: 204258.796 ops/s
Iteration   4: 205522.244 ops/s
Iteration   5: 204806.201 ops/s
Iteration   6: 205363.184 ops/s
Iteration   7: 204790.767 ops/s
Iteration   8: 204148.377 ops/s
Iteration   9: 205467.920 ops/s
Iteration  10: 205362.272 ops/s
Iteration  11: 205157.226 ops/s
Iteration  12: 204881.786 ops/s
Iteration  13: 205286.007 ops/s
Iteration  14: 205185.906 ops/s
Iteration  15: 205946.536 ops/s
Iteration  16: 204116.124 ops/s
Iteration  17: 205807.029 ops/s
Iteration  18: 205522.172 ops/s
Iteration  19: 205968.789 ops/s
Iteration  20: 205446.010 ops/s
Iteration  21: 205541.276 ops/s
Iteration  22: 206006.968 ops/s
Iteration  23: 205141.678 ops/s
Iteration  24: 205328.640 ops/s
Iteration  25: 205839.681 ops/s
Iteration  26: 205318.699 ops/s
Iteration  27: 205095.100 ops/s
Iteration  28: 206155.163 ops/s
Iteration  29: 204943.837 ops/s
Iteration  30: 204510.152 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_listIterator":
  205246.771 ±(99.9%) 359.106 ops/s [Average]
  (min, avg, max) = (204116.124, 205246.771, 206155.163), stdev = 537.492
  CI (99.9%): [204887.666, 205605.877] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_listIterator  thrpt   30  205246.771 ± 359.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 767885.504 ops/s
# Warmup Iteration   2: 794687.833 ops/s
# Warmup Iteration   3: 984198.280 ops/s
# Warmup Iteration   4: 1003110.429 ops/s
# Warmup Iteration   5: 1011281.967 ops/s
# Warmup Iteration   6: 996245.091 ops/s
# Warmup Iteration   7: 1008882.620 ops/s
# Warmup Iteration   8: 1008278.537 ops/s
# Warmup Iteration   9: 1010538.684 ops/s
# Warmup Iteration  10: 1011223.855 ops/s
# Warmup Iteration  11: 1011299.148 ops/s
# Warmup Iteration  12: 1003427.168 ops/s
# Warmup Iteration  13: 869152.520 ops/s
# Warmup Iteration  14: 1014677.120 ops/s
# Warmup Iteration  15: 1012924.091 ops/s
# Warmup Iteration  16: 1013702.426 ops/s
# Warmup Iteration  17: 1079644.726 ops/s
# Warmup Iteration  18: 1074300.635 ops/s
# Warmup Iteration  19: 1074595.023 ops/s
# Warmup Iteration  20: 1074705.190 ops/s
# Warmup Iteration  21: 1076450.452 ops/s
# Warmup Iteration  22: 1075893.374 ops/s
# Warmup Iteration  23: 1080275.539 ops/s
# Warmup Iteration  24: 1079165.266 ops/s
# Warmup Iteration  25: 1080062.964 ops/s
# Warmup Iteration  26: 1078414.838 ops/s
# Warmup Iteration  27: 1080094.742 ops/s
# Warmup Iteration  28: 1080078.968 ops/s
# Warmup Iteration  29: 1080345.331 ops/s
# Warmup Iteration  30: 1078705.059 ops/s
Iteration   1: 1082968.083 ops/s
Iteration   2: 1075587.937 ops/s
Iteration   3: 1077233.425 ops/s
Iteration   4: 1083924.046 ops/s
Iteration   5: 1082658.838 ops/s
Iteration   6: 1083081.678 ops/s
Iteration   7: 1077861.191 ops/s
Iteration   8: 1082776.264 ops/s
Iteration   9: 1084941.820 ops/s
Iteration  10: 1083757.504 ops/s
Iteration  11: 1080267.599 ops/s
Iteration  12: 1070422.211 ops/s
Iteration  13: 1077029.063 ops/s
Iteration  14: 1080449.582 ops/s
Iteration  15: 1075081.493 ops/s
Iteration  16: 1078272.169 ops/s
Iteration  17: 1085080.935 ops/s
Iteration  18: 1078958.093 ops/s
Iteration  19: 1080241.333 ops/s
Iteration  20: 1080342.140 ops/s
Iteration  21: 1073350.203 ops/s
Iteration  22: 1080280.196 ops/s
Iteration  23: 1080061.811 ops/s
Iteration  24: 1074175.586 ops/s
Iteration  25: 1080615.974 ops/s
Iteration  26: 1080892.446 ops/s
Iteration  27: 1075797.772 ops/s
Iteration  28: 1075810.781 ops/s
Iteration  29: 1076463.012 ops/s
Iteration  30: 1078392.953 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize":
  1079225.871 ±(99.9%) 2436.013 ops/s [Average]
  (min, avg, max) = (1070422.211, 1079225.871, 1085080.935), stdev = 3646.110
  CI (99.9%): [1076789.858, 1081661.884] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize  thrpt   30  1079225.871 ± 2436.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_listIterator_throwsNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_listIterator_throwsNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 773023.499 ops/s
# Warmup Iteration   2: 795650.577 ops/s
# Warmup Iteration   3: 1001499.512 ops/s
# Warmup Iteration   4: 1022715.894 ops/s
# Warmup Iteration   5: 1021967.257 ops/s
# Warmup Iteration   6: 1011535.631 ops/s
# Warmup Iteration   7: 1018987.495 ops/s
# Warmup Iteration   8: 1018381.892 ops/s
# Warmup Iteration   9: 1021352.564 ops/s
# Warmup Iteration  10: 1024787.489 ops/s
# Warmup Iteration  11: 1020842.740 ops/s
# Warmup Iteration  12: 983931.985 ops/s
# Warmup Iteration  13: 900672.707 ops/s
# Warmup Iteration  14: 1021392.908 ops/s
# Warmup Iteration  15: 1019398.745 ops/s
# Warmup Iteration  16: 1014815.399 ops/s
# Warmup Iteration  17: 1076455.643 ops/s
# Warmup Iteration  18: 1089149.232 ops/s
# Warmup Iteration  19: 1087080.450 ops/s
# Warmup Iteration  20: 1087842.848 ops/s
# Warmup Iteration  21: 1076091.348 ops/s
# Warmup Iteration  22: 1082897.393 ops/s
# Warmup Iteration  23: 1084881.078 ops/s
# Warmup Iteration  24: 1080786.459 ops/s
# Warmup Iteration  25: 1079564.932 ops/s
# Warmup Iteration  26: 1078074.036 ops/s
# Warmup Iteration  27: 1077951.090 ops/s
# Warmup Iteration  28: 1082041.796 ops/s
# Warmup Iteration  29: 1080197.474 ops/s
# Warmup Iteration  30: 1079793.424 ops/s
Iteration   1: 1078547.554 ops/s
Iteration   2: 1085307.826 ops/s
Iteration   3: 1082099.539 ops/s
Iteration   4: 1077151.959 ops/s
Iteration   5: 1082443.410 ops/s
Iteration   6: 1083411.965 ops/s
Iteration   7: 1080652.626 ops/s
Iteration   8: 1081466.880 ops/s
Iteration   9: 1085532.516 ops/s
Iteration  10: 1085580.919 ops/s
Iteration  11: 1081051.185 ops/s
Iteration  12: 1082304.100 ops/s
Iteration  13: 1081602.361 ops/s
Iteration  14: 1076272.823 ops/s
Iteration  15: 1083638.656 ops/s
Iteration  16: 1075860.125 ops/s
Iteration  17: 1072279.368 ops/s
Iteration  18: 1079916.467 ops/s
Iteration  19: 1080534.542 ops/s
Iteration  20: 1081049.127 ops/s
Iteration  21: 1084096.623 ops/s
Iteration  22: 1084611.629 ops/s
Iteration  23: 1085086.647 ops/s
Iteration  24: 1079682.218 ops/s
Iteration  25: 1082298.256 ops/s
Iteration  26: 1087778.598 ops/s
Iteration  27: 1088128.309 ops/s
Iteration  28: 1085351.929 ops/s
Iteration  29: 1082510.738 ops/s
Iteration  30: 1083507.702 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_listIterator_throwsNegative":
  1081991.887 ±(99.9%) 2364.106 ops/s [Average]
  (min, avg, max) = (1072279.368, 1081991.887, 1088128.309), stdev = 3538.483
  CI (99.9%): [1079627.781, 1084355.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_listIterator_throwsNegative  thrpt   30  1081991.887 ± 2364.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 279535.980 ops/s
# Warmup Iteration   2: 713352.161 ops/s
# Warmup Iteration   3: 717355.792 ops/s
# Warmup Iteration   4: 600939.030 ops/s
# Warmup Iteration   5: 716391.915 ops/s
# Warmup Iteration   6: 717213.137 ops/s
# Warmup Iteration   7: 718126.691 ops/s
# Warmup Iteration   8: 716733.149 ops/s
# Warmup Iteration   9: 715305.968 ops/s
# Warmup Iteration  10: 715139.369 ops/s
# Warmup Iteration  11: 717231.188 ops/s
# Warmup Iteration  12: 712739.037 ops/s
# Warmup Iteration  13: 717257.273 ops/s
# Warmup Iteration  14: 715614.713 ops/s
# Warmup Iteration  15: 715518.051 ops/s
# Warmup Iteration  16: 717054.853 ops/s
# Warmup Iteration  17: 717147.645 ops/s
# Warmup Iteration  18: 716699.288 ops/s
# Warmup Iteration  19: 717231.885 ops/s
# Warmup Iteration  20: 716523.471 ops/s
# Warmup Iteration  21: 719419.376 ops/s
# Warmup Iteration  22: 718226.515 ops/s
# Warmup Iteration  23: 717981.071 ops/s
# Warmup Iteration  24: 718572.905 ops/s
# Warmup Iteration  25: 716499.894 ops/s
# Warmup Iteration  26: 717536.573 ops/s
# Warmup Iteration  27: 718800.956 ops/s
# Warmup Iteration  28: 717015.765 ops/s
# Warmup Iteration  29: 717108.186 ops/s
# Warmup Iteration  30: 717974.803 ops/s
Iteration   1: 719738.663 ops/s
Iteration   2: 716930.269 ops/s
Iteration   3: 717590.985 ops/s
Iteration   4: 716791.578 ops/s
Iteration   5: 719004.395 ops/s
Iteration   6: 718995.284 ops/s
Iteration   7: 719245.597 ops/s
Iteration   8: 719047.416 ops/s
Iteration   9: 718281.035 ops/s
Iteration  10: 715240.064 ops/s
Iteration  11: 715845.808 ops/s
Iteration  12: 717515.017 ops/s
Iteration  13: 718424.266 ops/s
Iteration  14: 713153.589 ops/s
Iteration  15: 719467.254 ops/s
Iteration  16: 717583.607 ops/s
Iteration  17: 718438.411 ops/s
Iteration  18: 716759.838 ops/s
Iteration  19: 719993.825 ops/s
Iteration  20: 716739.257 ops/s
Iteration  21: 721606.844 ops/s
Iteration  22: 715661.162 ops/s
Iteration  23: 716209.414 ops/s
Iteration  24: 718394.074 ops/s
Iteration  25: 716908.808 ops/s
Iteration  26: 717592.273 ops/s
Iteration  27: 714761.395 ops/s
Iteration  28: 715866.384 ops/s
Iteration  29: 716940.724 ops/s
Iteration  30: 717742.993 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_makeString":
  717549.008 ±(99.9%) 1174.559 ops/s [Average]
  (min, avg, max) = (713153.589, 717549.008, 721606.844), stdev = 1758.024
  CI (99.9%): [716374.449, 718723.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_makeString  thrpt   30  717549.008 ± 1174.559  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17437384.771 ops/s
# Warmup Iteration   2: 30812325.270 ops/s
# Warmup Iteration   3: 29101074.250 ops/s
# Warmup Iteration   4: 29342425.259 ops/s
# Warmup Iteration   5: 27847034.714 ops/s
# Warmup Iteration   6: 26158692.853 ops/s
# Warmup Iteration   7: 29401458.862 ops/s
# Warmup Iteration   8: 29404955.283 ops/s
# Warmup Iteration   9: 29410560.612 ops/s
# Warmup Iteration  10: 29381923.862 ops/s
# Warmup Iteration  11: 29419973.825 ops/s
# Warmup Iteration  12: 29477966.661 ops/s
# Warmup Iteration  13: 29493616.315 ops/s
# Warmup Iteration  14: 29364027.533 ops/s
# Warmup Iteration  15: 29476340.730 ops/s
# Warmup Iteration  16: 29319233.320 ops/s
# Warmup Iteration  17: 29408563.672 ops/s
# Warmup Iteration  18: 29392980.901 ops/s
# Warmup Iteration  19: 29384700.731 ops/s
# Warmup Iteration  20: 29388681.843 ops/s
# Warmup Iteration  21: 29386920.060 ops/s
# Warmup Iteration  22: 29409294.273 ops/s
# Warmup Iteration  23: 29379282.911 ops/s
# Warmup Iteration  24: 29290993.217 ops/s
# Warmup Iteration  25: 29436107.145 ops/s
# Warmup Iteration  26: 29460394.663 ops/s
# Warmup Iteration  27: 29438428.280 ops/s
# Warmup Iteration  28: 29426664.078 ops/s
# Warmup Iteration  29: 29361289.550 ops/s
# Warmup Iteration  30: 29469909.640 ops/s
Iteration   1: 29387040.327 ops/s
Iteration   2: 29342853.440 ops/s
Iteration   3: 29347465.119 ops/s
Iteration   4: 29444938.531 ops/s
Iteration   5: 29396644.253 ops/s
Iteration   6: 29484998.863 ops/s
Iteration   7: 29333323.610 ops/s
Iteration   8: 29325503.046 ops/s
Iteration   9: 29422160.451 ops/s
Iteration  10: 29495888.279 ops/s
Iteration  11: 29509301.129 ops/s
Iteration  12: 29394349.569 ops/s
Iteration  13: 29463240.151 ops/s
Iteration  14: 29401737.161 ops/s
Iteration  15: 29444783.377 ops/s
Iteration  16: 29508019.917 ops/s
Iteration  17: 29502550.211 ops/s
Iteration  18: 29484737.062 ops/s
Iteration  19: 29406893.722 ops/s
Iteration  20: 29483893.211 ops/s
Iteration  21: 29421809.639 ops/s
Iteration  22: 29582700.008 ops/s
Iteration  23: 29515838.473 ops/s
Iteration  24: 29390735.077 ops/s
Iteration  25: 29477764.794 ops/s
Iteration  26: 29269713.309 ops/s
Iteration  27: 29431584.054 ops/s
Iteration  28: 29301100.168 ops/s
Iteration  29: 29473839.770 ops/s
Iteration  30: 29395724.328 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_max":
  29428037.702 ±(99.9%) 48467.363 ops/s [Average]
  (min, avg, max) = (29269713.309, 29428037.702, 29582700.008), stdev = 72543.673
  CI (99.9%): [29379570.338, 29476505.065] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_max  thrpt   30  29428037.702 ± 48467.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16812572.374 ops/s
# Warmup Iteration   2: 32568076.770 ops/s
# Warmup Iteration   3: 30603172.060 ops/s
# Warmup Iteration   4: 31154463.299 ops/s
# Warmup Iteration   5: 33394423.875 ops/s
# Warmup Iteration   6: 33488124.241 ops/s
# Warmup Iteration   7: 33397878.569 ops/s
# Warmup Iteration   8: 33386447.164 ops/s
# Warmup Iteration   9: 33407319.870 ops/s
# Warmup Iteration  10: 33485359.809 ops/s
# Warmup Iteration  11: 33497016.493 ops/s
# Warmup Iteration  12: 33449577.815 ops/s
# Warmup Iteration  13: 33377172.521 ops/s
# Warmup Iteration  14: 33429223.209 ops/s
# Warmup Iteration  15: 33527413.064 ops/s
# Warmup Iteration  16: 33468224.465 ops/s
# Warmup Iteration  17: 33240208.277 ops/s
# Warmup Iteration  18: 33399776.909 ops/s
# Warmup Iteration  19: 33443460.638 ops/s
# Warmup Iteration  20: 33301599.709 ops/s
# Warmup Iteration  21: 33282178.692 ops/s
# Warmup Iteration  22: 33361846.642 ops/s
# Warmup Iteration  23: 33197972.082 ops/s
# Warmup Iteration  24: 33334590.606 ops/s
# Warmup Iteration  25: 33357900.498 ops/s
# Warmup Iteration  26: 33290649.064 ops/s
# Warmup Iteration  27: 33438979.173 ops/s
# Warmup Iteration  28: 33502247.576 ops/s
# Warmup Iteration  29: 33504938.332 ops/s
# Warmup Iteration  30: 33492151.469 ops/s
Iteration   1: 33474171.122 ops/s
Iteration   2: 33349677.711 ops/s
Iteration   3: 33447312.293 ops/s
Iteration   4: 33396021.819 ops/s
Iteration   5: 33464096.702 ops/s
Iteration   6: 33377097.943 ops/s
Iteration   7: 33304466.977 ops/s
Iteration   8: 33441911.673 ops/s
Iteration   9: 33192982.282 ops/s
Iteration  10: 33320798.323 ops/s
Iteration  11: 33357677.739 ops/s
Iteration  12: 33450231.466 ops/s
Iteration  13: 33452119.538 ops/s
Iteration  14: 33344299.558 ops/s
Iteration  15: 33474193.169 ops/s
Iteration  16: 33456243.371 ops/s
Iteration  17: 33557724.903 ops/s
Iteration  18: 33439534.312 ops/s
Iteration  19: 33403960.827 ops/s
Iteration  20: 33550282.005 ops/s
Iteration  21: 33397482.774 ops/s
Iteration  22: 33387008.940 ops/s
Iteration  23: 33403054.071 ops/s
Iteration  24: 33490114.724 ops/s
Iteration  25: 33374576.311 ops/s
Iteration  26: 33403305.375 ops/s
Iteration  27: 33494068.474 ops/s
Iteration  28: 33424942.855 ops/s
Iteration  29: 33367103.922 ops/s
Iteration  30: 33261197.332 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_maxBy":
  33408588.617 ±(99.9%) 52540.485 ops/s [Average]
  (min, avg, max) = (33192982.282, 33408588.617, 33557724.903), stdev = 78640.131
  CI (99.9%): [33356048.132, 33461129.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_maxBy  thrpt   30  33408588.617 ± 52540.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3853691.181 ops/s
# Warmup Iteration   2: 4607664.811 ops/s
# Warmup Iteration   3: 5933105.931 ops/s
# Warmup Iteration   4: 5957647.464 ops/s
# Warmup Iteration   5: 5879392.218 ops/s
# Warmup Iteration   6: 5933489.444 ops/s
# Warmup Iteration   7: 5906168.085 ops/s
# Warmup Iteration   8: 5919782.092 ops/s
# Warmup Iteration   9: 5590263.548 ops/s
# Warmup Iteration  10: 5332160.079 ops/s
# Warmup Iteration  11: 5936031.175 ops/s
# Warmup Iteration  12: 5952042.995 ops/s
# Warmup Iteration  13: 5945720.862 ops/s
# Warmup Iteration  14: 5955514.969 ops/s
# Warmup Iteration  15: 5948451.207 ops/s
# Warmup Iteration  16: 5953500.020 ops/s
# Warmup Iteration  17: 5980090.764 ops/s
# Warmup Iteration  18: 5975537.036 ops/s
# Warmup Iteration  19: 5974540.926 ops/s
# Warmup Iteration  20: 5979337.838 ops/s
# Warmup Iteration  21: 5984471.806 ops/s
# Warmup Iteration  22: 5974046.825 ops/s
# Warmup Iteration  23: 5982436.802 ops/s
# Warmup Iteration  24: 5978554.492 ops/s
# Warmup Iteration  25: 5977923.329 ops/s
# Warmup Iteration  26: 5979648.974 ops/s
# Warmup Iteration  27: 5979424.117 ops/s
# Warmup Iteration  28: 5986931.526 ops/s
# Warmup Iteration  29: 5962674.436 ops/s
# Warmup Iteration  30: 5966505.284 ops/s
Iteration   1: 5979098.645 ops/s
Iteration   2: 5987976.620 ops/s
Iteration   3: 5928763.124 ops/s
Iteration   4: 5981039.358 ops/s
Iteration   5: 5992033.495 ops/s
Iteration   6: 5940585.232 ops/s
Iteration   7: 5984912.603 ops/s
Iteration   8: 5992843.159 ops/s
Iteration   9: 5972803.810 ops/s
Iteration  10: 5984266.712 ops/s
Iteration  11: 5958375.182 ops/s
Iteration  12: 5951857.225 ops/s
Iteration  13: 5974142.599 ops/s
Iteration  14: 5984855.469 ops/s
Iteration  15: 5985503.359 ops/s
Iteration  16: 5968667.348 ops/s
Iteration  17: 5990535.784 ops/s
Iteration  18: 5948079.524 ops/s
Iteration  19: 5990138.335 ops/s
Iteration  20: 5991489.775 ops/s
Iteration  21: 5990992.453 ops/s
Iteration  22: 5982314.181 ops/s
Iteration  23: 5993014.468 ops/s
Iteration  24: 5972305.596 ops/s
Iteration  25: 5977879.452 ops/s
Iteration  26: 5989523.183 ops/s
Iteration  27: 5990610.240 ops/s
Iteration  28: 5978897.003 ops/s
Iteration  29: 5983468.049 ops/s
Iteration  30: 5989672.838 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_max_null_throws":
  5977888.161 ±(99.9%) 11113.835 ops/s [Average]
  (min, avg, max) = (5928763.124, 5977888.161, 5993014.468), stdev = 16634.667
  CI (99.9%): [5966774.325, 5989001.996] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_max_null_throws  thrpt   30  5977888.161 ± 11113.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3719611.604 ops/s
# Warmup Iteration   2: 8033453.548 ops/s
# Warmup Iteration   3: 10377326.111 ops/s
# Warmup Iteration   4: 10485040.155 ops/s
# Warmup Iteration   5: 8684702.450 ops/s
# Warmup Iteration   6: 10518902.780 ops/s
# Warmup Iteration   7: 10518035.148 ops/s
# Warmup Iteration   8: 10461056.710 ops/s
# Warmup Iteration   9: 10472763.621 ops/s
# Warmup Iteration  10: 10495506.852 ops/s
# Warmup Iteration  11: 10509977.254 ops/s
# Warmup Iteration  12: 10486964.302 ops/s
# Warmup Iteration  13: 10475296.256 ops/s
# Warmup Iteration  14: 10525252.998 ops/s
# Warmup Iteration  15: 10451599.858 ops/s
# Warmup Iteration  16: 10527087.088 ops/s
# Warmup Iteration  17: 10488477.297 ops/s
# Warmup Iteration  18: 10497599.479 ops/s
# Warmup Iteration  19: 10504655.807 ops/s
# Warmup Iteration  20: 10511453.810 ops/s
# Warmup Iteration  21: 10541864.016 ops/s
# Warmup Iteration  22: 10542258.245 ops/s
# Warmup Iteration  23: 10551473.252 ops/s
# Warmup Iteration  24: 10511577.419 ops/s
# Warmup Iteration  25: 10475438.564 ops/s
# Warmup Iteration  26: 10476397.488 ops/s
# Warmup Iteration  27: 10488533.625 ops/s
# Warmup Iteration  28: 10474969.117 ops/s
# Warmup Iteration  29: 10493869.926 ops/s
# Warmup Iteration  30: 10474073.899 ops/s
Iteration   1: 10526427.047 ops/s
Iteration   2: 10510713.913 ops/s
Iteration   3: 10550866.286 ops/s
Iteration   4: 10486138.192 ops/s
Iteration   5: 10560425.561 ops/s
Iteration   6: 10535312.363 ops/s
Iteration   7: 10548032.284 ops/s
Iteration   8: 10535356.594 ops/s
Iteration   9: 10260365.431 ops/s
Iteration  10: 10549708.969 ops/s
Iteration  11: 10534257.993 ops/s
Iteration  12: 10556279.561 ops/s
Iteration  13: 10543422.433 ops/s
Iteration  14: 10535971.753 ops/s
Iteration  15: 10549300.806 ops/s
Iteration  16: 10524337.449 ops/s
Iteration  17: 10521646.807 ops/s
Iteration  18: 10527339.840 ops/s
Iteration  19: 10530554.862 ops/s
Iteration  20: 10519028.968 ops/s
Iteration  21: 10532676.562 ops/s
Iteration  22: 10518750.245 ops/s
Iteration  23: 10513532.456 ops/s
Iteration  24: 10522228.526 ops/s
Iteration  25: 10553164.610 ops/s
Iteration  26: 10495012.004 ops/s
Iteration  27: 10537118.565 ops/s
Iteration  28: 10510779.349 ops/s
Iteration  29: 10541243.907 ops/s
Iteration  30: 10522974.855 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  10521765.606 ±(99.9%) 34971.821 ops/s [Average]
  (min, avg, max) = (10260365.431, 10521765.606, 10560425.561), stdev = 52344.179
  CI (99.9%): [10486793.786, 10556737.427] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  10521765.606 ± 34971.821  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17986734.980 ops/s
# Warmup Iteration   2: 33731613.634 ops/s
# Warmup Iteration   3: 30275303.317 ops/s
# Warmup Iteration   4: 35662660.275 ops/s
# Warmup Iteration   5: 35662650.556 ops/s
# Warmup Iteration   6: 35625963.011 ops/s
# Warmup Iteration   7: 35681457.174 ops/s
# Warmup Iteration   8: 35483221.859 ops/s
# Warmup Iteration   9: 35562302.421 ops/s
# Warmup Iteration  10: 35596189.571 ops/s
# Warmup Iteration  11: 35547480.114 ops/s
# Warmup Iteration  12: 35667476.582 ops/s
# Warmup Iteration  13: 35711147.059 ops/s
# Warmup Iteration  14: 35691132.745 ops/s
# Warmup Iteration  15: 35711817.292 ops/s
# Warmup Iteration  16: 35613525.578 ops/s
# Warmup Iteration  17: 35541320.357 ops/s
# Warmup Iteration  18: 35596241.385 ops/s
# Warmup Iteration  19: 35505086.510 ops/s
# Warmup Iteration  20: 35615627.254 ops/s
# Warmup Iteration  21: 35668353.489 ops/s
# Warmup Iteration  22: 35570522.698 ops/s
# Warmup Iteration  23: 35424480.266 ops/s
# Warmup Iteration  24: 35538986.509 ops/s
# Warmup Iteration  25: 35682745.085 ops/s
# Warmup Iteration  26: 35562895.319 ops/s
# Warmup Iteration  27: 34840946.819 ops/s
# Warmup Iteration  28: 35486981.759 ops/s
# Warmup Iteration  29: 35547236.568 ops/s
# Warmup Iteration  30: 35672859.233 ops/s
Iteration   1: 35450048.188 ops/s
Iteration   2: 35771351.040 ops/s
Iteration   3: 35683059.453 ops/s
Iteration   4: 35718968.308 ops/s
Iteration   5: 35702327.731 ops/s
Iteration   6: 35439252.560 ops/s
Iteration   7: 35367732.724 ops/s
Iteration   8: 35504523.718 ops/s
Iteration   9: 35557818.537 ops/s
Iteration  10: 35673397.202 ops/s
Iteration  11: 35532402.550 ops/s
Iteration  12: 35620346.825 ops/s
Iteration  13: 35493453.141 ops/s
Iteration  14: 35417796.697 ops/s
Iteration  15: 35624033.532 ops/s
Iteration  16: 35627605.337 ops/s
Iteration  17: 35597965.409 ops/s
Iteration  18: 35737757.718 ops/s
Iteration  19: 35532027.763 ops/s
Iteration  20: 35581397.155 ops/s
Iteration  21: 35593564.871 ops/s
Iteration  22: 35667196.558 ops/s
Iteration  23: 35391361.853 ops/s
Iteration  24: 35584274.337 ops/s
Iteration  25: 35469776.047 ops/s
Iteration  26: 35505985.511 ops/s
Iteration  27: 35476330.056 ops/s
Iteration  28: 35607754.842 ops/s
Iteration  29: 35219267.303 ops/s
Iteration  30: 35583765.731 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_max_without_comparator":
  35557751.423 ±(99.9%) 81866.182 ops/s [Average]
  (min, avg, max) = (35219267.303, 35557751.423, 35771351.040), stdev = 122533.456
  CI (99.9%): [35475885.241, 35639617.605] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  35557751.423 ± 81866.182  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24970599.181 ops/s
# Warmup Iteration   2: 46914933.345 ops/s
# Warmup Iteration   3: 49413333.970 ops/s
# Warmup Iteration   4: 42004107.008 ops/s
# Warmup Iteration   5: 49247057.124 ops/s
# Warmup Iteration   6: 49399589.526 ops/s
# Warmup Iteration   7: 49334436.580 ops/s
# Warmup Iteration   8: 49413647.372 ops/s
# Warmup Iteration   9: 49426057.309 ops/s
# Warmup Iteration  10: 49054412.665 ops/s
# Warmup Iteration  11: 49435657.958 ops/s
# Warmup Iteration  12: 49380200.219 ops/s
# Warmup Iteration  13: 49427613.705 ops/s
# Warmup Iteration  14: 49394665.037 ops/s
# Warmup Iteration  15: 49226290.948 ops/s
# Warmup Iteration  16: 49530116.266 ops/s
# Warmup Iteration  17: 49519898.070 ops/s
# Warmup Iteration  18: 49264415.790 ops/s
# Warmup Iteration  19: 49104623.460 ops/s
# Warmup Iteration  20: 49097574.359 ops/s
# Warmup Iteration  21: 49137869.134 ops/s
# Warmup Iteration  22: 49227113.686 ops/s
# Warmup Iteration  23: 49342597.409 ops/s
# Warmup Iteration  24: 49402879.608 ops/s
# Warmup Iteration  25: 49328203.674 ops/s
# Warmup Iteration  26: 49216302.364 ops/s
# Warmup Iteration  27: 49425400.395 ops/s
# Warmup Iteration  28: 49289332.988 ops/s
# Warmup Iteration  29: 49410939.770 ops/s
# Warmup Iteration  30: 49390527.927 ops/s
Iteration   1: 49307121.465 ops/s
Iteration   2: 49543306.075 ops/s
Iteration   3: 49539173.235 ops/s
Iteration   4: 49476206.978 ops/s
Iteration   5: 48959668.870 ops/s
Iteration   6: 49487887.672 ops/s
Iteration   7: 49587670.524 ops/s
Iteration   8: 49405064.926 ops/s
Iteration   9: 49657074.911 ops/s
Iteration  10: 49566853.552 ops/s
Iteration  11: 49579442.563 ops/s
Iteration  12: 49625602.645 ops/s
Iteration  13: 49577836.277 ops/s
Iteration  14: 49572597.134 ops/s
Iteration  15: 49464101.068 ops/s
Iteration  16: 49489702.255 ops/s
Iteration  17: 49601174.977 ops/s
Iteration  18: 49318585.889 ops/s
Iteration  19: 49591966.714 ops/s
Iteration  20: 49387952.910 ops/s
Iteration  21: 49527811.589 ops/s
Iteration  22: 49519343.716 ops/s
Iteration  23: 49413428.963 ops/s
Iteration  24: 49553847.407 ops/s
Iteration  25: 49600148.113 ops/s
Iteration  26: 49640730.950 ops/s
Iteration  27: 49641620.582 ops/s
Iteration  28: 49431869.114 ops/s
Iteration  29: 49688161.398 ops/s
Iteration  30: 49561745.313 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_min":
  49510589.926 ±(99.9%) 94487.189 ops/s [Average]
  (min, avg, max) = (48959668.870, 49510589.926, 49688161.398), stdev = 141423.988
  CI (99.9%): [49416102.737, 49605077.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_min  thrpt   30  49510589.926 ± 94487.189  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9312238.144 ops/s
# Warmup Iteration   2: 18345174.876 ops/s
# Warmup Iteration   3: 16173508.026 ops/s
# Warmup Iteration   4: 19063745.204 ops/s
# Warmup Iteration   5: 19075576.666 ops/s
# Warmup Iteration   6: 19088478.626 ops/s
# Warmup Iteration   7: 19068705.203 ops/s
# Warmup Iteration   8: 19066658.743 ops/s
# Warmup Iteration   9: 19061221.354 ops/s
# Warmup Iteration  10: 19064846.783 ops/s
# Warmup Iteration  11: 19081323.669 ops/s
# Warmup Iteration  12: 19040266.872 ops/s
# Warmup Iteration  13: 19125706.174 ops/s
# Warmup Iteration  14: 19035169.480 ops/s
# Warmup Iteration  15: 19134094.820 ops/s
# Warmup Iteration  16: 19114540.134 ops/s
# Warmup Iteration  17: 19119039.719 ops/s
# Warmup Iteration  18: 19065191.113 ops/s
# Warmup Iteration  19: 19109056.949 ops/s
# Warmup Iteration  20: 19059114.612 ops/s
# Warmup Iteration  21: 19128646.076 ops/s
# Warmup Iteration  22: 19120249.588 ops/s
# Warmup Iteration  23: 19121879.194 ops/s
# Warmup Iteration  24: 19108100.987 ops/s
# Warmup Iteration  25: 19152586.075 ops/s
# Warmup Iteration  26: 19125450.757 ops/s
# Warmup Iteration  27: 19155070.806 ops/s
# Warmup Iteration  28: 19094369.312 ops/s
# Warmup Iteration  29: 19020185.140 ops/s
# Warmup Iteration  30: 19060053.714 ops/s
Iteration   1: 19133192.254 ops/s
Iteration   2: 19048298.594 ops/s
Iteration   3: 19137377.973 ops/s
Iteration   4: 19161192.172 ops/s
Iteration   5: 19137820.638 ops/s
Iteration   6: 19151204.839 ops/s
Iteration   7: 19161254.942 ops/s
Iteration   8: 19134248.122 ops/s
Iteration   9: 19123145.066 ops/s
Iteration  10: 19118897.264 ops/s
Iteration  11: 19149515.618 ops/s
Iteration  12: 19106997.848 ops/s
Iteration  13: 19133600.321 ops/s
Iteration  14: 19000861.492 ops/s
Iteration  15: 19176161.164 ops/s
Iteration  16: 19055546.009 ops/s
Iteration  17: 19099472.497 ops/s
Iteration  18: 19136956.868 ops/s
Iteration  19: 18924214.082 ops/s
Iteration  20: 19008682.339 ops/s
Iteration  21: 19104073.710 ops/s
Iteration  22: 19087302.595 ops/s
Iteration  23: 19146874.100 ops/s
Iteration  24: 19134748.387 ops/s
Iteration  25: 19170930.123 ops/s
Iteration  26: 19150808.681 ops/s
Iteration  27: 19141080.021 ops/s
Iteration  28: 19012802.517 ops/s
Iteration  29: 19133882.334 ops/s
Iteration  30: 19078346.185 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_minBy":
  19108649.625 ±(99.9%) 39328.083 ops/s [Average]
  (min, avg, max) = (18924214.082, 19108649.625, 19176161.164), stdev = 58864.427
  CI (99.9%): [19069321.543, 19147977.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_minBy  thrpt   30  19108649.625 ± 39328.083  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3810651.149 ops/s
# Warmup Iteration   2: 7987179.026 ops/s
# Warmup Iteration   3: 10278941.138 ops/s
# Warmup Iteration   4: 10319809.379 ops/s
# Warmup Iteration   5: 8723947.332 ops/s
# Warmup Iteration   6: 10093723.420 ops/s
# Warmup Iteration   7: 10341066.756 ops/s
# Warmup Iteration   8: 10285732.627 ops/s
# Warmup Iteration   9: 10344763.295 ops/s
# Warmup Iteration  10: 10321578.680 ops/s
# Warmup Iteration  11: 10322616.026 ops/s
# Warmup Iteration  12: 10288516.072 ops/s
# Warmup Iteration  13: 10320152.740 ops/s
# Warmup Iteration  14: 10287070.037 ops/s
# Warmup Iteration  15: 10319282.375 ops/s
# Warmup Iteration  16: 10321486.933 ops/s
# Warmup Iteration  17: 10261517.674 ops/s
# Warmup Iteration  18: 10305926.764 ops/s
# Warmup Iteration  19: 10311070.467 ops/s
# Warmup Iteration  20: 10337719.741 ops/s
# Warmup Iteration  21: 10337192.814 ops/s
# Warmup Iteration  22: 10259695.579 ops/s
# Warmup Iteration  23: 10311374.042 ops/s
# Warmup Iteration  24: 10316551.955 ops/s
# Warmup Iteration  25: 10321123.454 ops/s
# Warmup Iteration  26: 10217408.448 ops/s
# Warmup Iteration  27: 10333535.874 ops/s
# Warmup Iteration  28: 10316167.680 ops/s
# Warmup Iteration  29: 10050284.159 ops/s
# Warmup Iteration  30: 9798210.065 ops/s
Iteration   1: 10038447.479 ops/s
Iteration   2: 9801258.814 ops/s
Iteration   3: 9765988.785 ops/s
Iteration   4: 9723688.497 ops/s
Iteration   5: 9659916.809 ops/s
Iteration   6: 10183939.317 ops/s
Iteration   7: 10143436.955 ops/s
Iteration   8: 10354955.614 ops/s
Iteration   9: 10029259.076 ops/s
Iteration  10: 9739960.034 ops/s
Iteration  11: 10099221.391 ops/s
Iteration  12: 9793667.593 ops/s
Iteration  13: 9652800.293 ops/s
Iteration  14: 9887448.954 ops/s
Iteration  15: 9813074.873 ops/s
Iteration  16: 9765634.452 ops/s
Iteration  17: 9822085.537 ops/s
Iteration  18: 9864088.090 ops/s
Iteration  19: 9620136.146 ops/s
Iteration  20: 9764898.606 ops/s
Iteration  21: 9961402.307 ops/s
Iteration  22: 9790429.383 ops/s
Iteration  23: 9729491.980 ops/s
Iteration  24: 9713659.319 ops/s
Iteration  25: 9859571.475 ops/s
Iteration  26: 10091720.594 ops/s
Iteration  27: 9965076.353 ops/s
Iteration  28: 10030366.767 ops/s
Iteration  29: 9821902.159 ops/s
Iteration  30: 9925026.143 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_min_null_throws":
  9880418.460 ±(99.9%) 117765.112 ops/s [Average]
  (min, avg, max) = (9620136.146, 9880418.460, 10354955.614), stdev = 176265.288
  CI (99.9%): [9762653.348, 9998183.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_min_null_throws  thrpt   30  9880418.460 ± 117765.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4593649.260 ops/s
# Warmup Iteration   2: 8844852.515 ops/s
# Warmup Iteration   3: 9795369.058 ops/s
# Warmup Iteration   4: 10025263.782 ops/s
# Warmup Iteration   5: 8240056.633 ops/s
# Warmup Iteration   6: 9933684.294 ops/s
# Warmup Iteration   7: 9944499.395 ops/s
# Warmup Iteration   8: 10132470.848 ops/s
# Warmup Iteration   9: 9828782.612 ops/s
# Warmup Iteration  10: 9899334.904 ops/s
# Warmup Iteration  11: 9995198.856 ops/s
# Warmup Iteration  12: 10066660.892 ops/s
# Warmup Iteration  13: 10064275.477 ops/s
# Warmup Iteration  14: 10108995.327 ops/s
# Warmup Iteration  15: 10078853.744 ops/s
# Warmup Iteration  16: 9979230.386 ops/s
# Warmup Iteration  17: 9832615.722 ops/s
# Warmup Iteration  18: 10103299.491 ops/s
# Warmup Iteration  19: 10096594.000 ops/s
# Warmup Iteration  20: 9988930.225 ops/s
# Warmup Iteration  21: 10102070.728 ops/s
# Warmup Iteration  22: 9863677.227 ops/s
# Warmup Iteration  23: 10037934.103 ops/s
# Warmup Iteration  24: 9966019.282 ops/s
# Warmup Iteration  25: 10094832.607 ops/s
# Warmup Iteration  26: 9835613.582 ops/s
# Warmup Iteration  27: 10099928.283 ops/s
# Warmup Iteration  28: 9960102.891 ops/s
# Warmup Iteration  29: 10168484.475 ops/s
# Warmup Iteration  30: 9911224.720 ops/s
Iteration   1: 10037550.007 ops/s
Iteration   2: 10133069.495 ops/s
Iteration   3: 10178006.635 ops/s
Iteration   4: 10455283.008 ops/s
Iteration   5: 10395279.195 ops/s
Iteration   6: 10482649.182 ops/s
Iteration   7: 10323226.958 ops/s
Iteration   8: 10003121.075 ops/s
Iteration   9: 9840157.304 ops/s
Iteration  10: 9852997.223 ops/s
Iteration  11: 9759471.461 ops/s
Iteration  12: 9897744.845 ops/s
Iteration  13: 9857471.234 ops/s
Iteration  14: 10015134.720 ops/s
Iteration  15: 9910892.893 ops/s
Iteration  16: 9611383.034 ops/s
Iteration  17: 9635088.290 ops/s
Iteration  18: 9709209.511 ops/s
Iteration  19: 9948854.417 ops/s
Iteration  20: 9854611.324 ops/s
Iteration  21: 10116655.350 ops/s
Iteration  22: 9853634.281 ops/s
Iteration  23: 9896129.239 ops/s
Iteration  24: 10120502.058 ops/s
Iteration  25: 10013183.299 ops/s
Iteration  26: 9943416.429 ops/s
Iteration  27: 9847092.965 ops/s
Iteration  28: 9805165.114 ops/s
Iteration  29: 9660565.832 ops/s
Iteration  30: 9835208.968 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  9966425.178 ±(99.9%) 153050.159 ops/s [Average]
  (min, avg, max) = (9611383.034, 9966425.178, 10482649.182), stdev = 229078.291
  CI (99.9%): [9813375.019, 10119475.338] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  9966425.178 ± 153050.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23489092.123 ops/s
# Warmup Iteration   2: 48179540.373 ops/s
# Warmup Iteration   3: 49672047.262 ops/s
# Warmup Iteration   4: 42061285.409 ops/s
# Warmup Iteration   5: 52059771.655 ops/s
# Warmup Iteration   6: 50859534.625 ops/s
# Warmup Iteration   7: 50085746.409 ops/s
# Warmup Iteration   8: 50413920.641 ops/s
# Warmup Iteration   9: 49858759.922 ops/s
# Warmup Iteration  10: 50902264.262 ops/s
# Warmup Iteration  11: 50003143.758 ops/s
# Warmup Iteration  12: 51468945.127 ops/s
# Warmup Iteration  13: 52906013.290 ops/s
# Warmup Iteration  14: 53021494.419 ops/s
# Warmup Iteration  15: 52956803.026 ops/s
# Warmup Iteration  16: 52984789.959 ops/s
# Warmup Iteration  17: 52923645.460 ops/s
# Warmup Iteration  18: 51613304.570 ops/s
# Warmup Iteration  19: 51789236.573 ops/s
# Warmup Iteration  20: 52759110.273 ops/s
# Warmup Iteration  21: 50864672.030 ops/s
# Warmup Iteration  22: 52785342.546 ops/s
# Warmup Iteration  23: 52314127.675 ops/s
# Warmup Iteration  24: 51991553.117 ops/s
# Warmup Iteration  25: 50563451.843 ops/s
# Warmup Iteration  26: 51177032.967 ops/s
# Warmup Iteration  27: 51785031.836 ops/s
# Warmup Iteration  28: 51055406.507 ops/s
# Warmup Iteration  29: 51636237.106 ops/s
# Warmup Iteration  30: 50808260.911 ops/s
Iteration   1: 51730549.665 ops/s
Iteration   2: 50305520.163 ops/s
Iteration   3: 50701115.220 ops/s
Iteration   4: 50504701.925 ops/s
Iteration   5: 51128805.096 ops/s
Iteration   6: 50494091.828 ops/s
Iteration   7: 49707462.163 ops/s
Iteration   8: 51213698.864 ops/s
Iteration   9: 52355705.094 ops/s
Iteration  10: 52257947.981 ops/s
Iteration  11: 52485663.847 ops/s
Iteration  12: 52439887.645 ops/s
Iteration  13: 51013960.922 ops/s
Iteration  14: 50660637.215 ops/s
Iteration  15: 52594094.933 ops/s
Iteration  16: 52949845.826 ops/s
Iteration  17: 53029623.567 ops/s
Iteration  18: 52753712.716 ops/s
Iteration  19: 52791922.121 ops/s
Iteration  20: 52965424.554 ops/s
Iteration  21: 52945622.527 ops/s
Iteration  22: 52592387.012 ops/s
Iteration  23: 52874097.142 ops/s
Iteration  24: 52849931.466 ops/s
Iteration  25: 52632039.855 ops/s
Iteration  26: 52905225.081 ops/s
Iteration  27: 52831690.010 ops/s
Iteration  28: 52365914.332 ops/s
Iteration  29: 52793261.954 ops/s
Iteration  30: 53011699.417 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_min_without_comparator":
  52062874.671 ±(99.9%) 678503.455 ops/s [Average]
  (min, avg, max) = (49707462.163, 52062874.671, 53029623.567), stdev = 1015552.106
  CI (99.9%): [51384371.217, 52741378.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  52062874.671 ± 678503.455  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8913230.907 ops/s
# Warmup Iteration   2: 17973964.864 ops/s
# Warmup Iteration   3: 18017714.631 ops/s
# Warmup Iteration   4: 15227471.885 ops/s
# Warmup Iteration   5: 17994250.769 ops/s
# Warmup Iteration   6: 17378726.008 ops/s
# Warmup Iteration   7: 18001775.604 ops/s
# Warmup Iteration   8: 17980389.524 ops/s
# Warmup Iteration   9: 17886895.057 ops/s
# Warmup Iteration  10: 17978843.612 ops/s
# Warmup Iteration  11: 17855949.422 ops/s
# Warmup Iteration  12: 16997460.671 ops/s
# Warmup Iteration  13: 17224864.222 ops/s
# Warmup Iteration  14: 16938244.064 ops/s
# Warmup Iteration  15: 17813405.843 ops/s
# Warmup Iteration  16: 17857156.524 ops/s
# Warmup Iteration  17: 18064357.027 ops/s
# Warmup Iteration  18: 17896579.404 ops/s
# Warmup Iteration  19: 18010736.499 ops/s
# Warmup Iteration  20: 17855071.067 ops/s
# Warmup Iteration  21: 17926955.827 ops/s
# Warmup Iteration  22: 18063711.851 ops/s
# Warmup Iteration  23: 18027533.999 ops/s
# Warmup Iteration  24: 18066811.850 ops/s
# Warmup Iteration  25: 18066592.334 ops/s
# Warmup Iteration  26: 18068356.715 ops/s
# Warmup Iteration  27: 18038880.029 ops/s
# Warmup Iteration  28: 17993685.309 ops/s
# Warmup Iteration  29: 17981834.525 ops/s
# Warmup Iteration  30: 18021729.443 ops/s
Iteration   1: 18029651.319 ops/s
Iteration   2: 18015488.498 ops/s
Iteration   3: 18016747.670 ops/s
Iteration   4: 18101057.610 ops/s
Iteration   5: 17943768.982 ops/s
Iteration   6: 18022508.340 ops/s
Iteration   7: 17990921.620 ops/s
Iteration   8: 18076486.407 ops/s
Iteration   9: 18048488.831 ops/s
Iteration  10: 18041075.050 ops/s
Iteration  11: 18040997.370 ops/s
Iteration  12: 18085377.068 ops/s
Iteration  13: 18066255.722 ops/s
Iteration  14: 18075264.735 ops/s
Iteration  15: 18067103.840 ops/s
Iteration  16: 18008357.345 ops/s
Iteration  17: 18036588.403 ops/s
Iteration  18: 18104244.109 ops/s
Iteration  19: 17950525.893 ops/s
Iteration  20: 18052447.588 ops/s
Iteration  21: 18050000.702 ops/s
Iteration  22: 18080938.818 ops/s
Iteration  23: 18066806.760 ops/s
Iteration  24: 18009955.048 ops/s
Iteration  25: 18120281.330 ops/s
Iteration  26: 18118580.925 ops/s
Iteration  27: 18054336.408 ops/s
Iteration  28: 18051136.073 ops/s
Iteration  29: 18044624.890 ops/s
Iteration  30: 18056063.510 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_noneSatisfy":
  18047536.029 ±(99.9%) 28102.161 ops/s [Average]
  (min, avg, max) = (17943768.982, 18047536.029, 18120281.330), stdev = 42061.995
  CI (99.9%): [18019433.868, 18075638.190] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  18047536.029 ± 28102.161  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8437627.884 ops/s
# Warmup Iteration   2: 17242360.838 ops/s
# Warmup Iteration   3: 17242190.802 ops/s
# Warmup Iteration   4: 14569046.563 ops/s
# Warmup Iteration   5: 17307883.572 ops/s
# Warmup Iteration   6: 17284251.282 ops/s
# Warmup Iteration   7: 17274813.372 ops/s
# Warmup Iteration   8: 17229616.767 ops/s
# Warmup Iteration   9: 17287002.162 ops/s
# Warmup Iteration  10: 17301162.633 ops/s
# Warmup Iteration  11: 17195682.664 ops/s
# Warmup Iteration  12: 17138271.865 ops/s
# Warmup Iteration  13: 17208118.628 ops/s
# Warmup Iteration  14: 17253238.301 ops/s
# Warmup Iteration  15: 17239674.038 ops/s
# Warmup Iteration  16: 17177780.925 ops/s
# Warmup Iteration  17: 17191836.734 ops/s
# Warmup Iteration  18: 17153567.712 ops/s
# Warmup Iteration  19: 17185299.090 ops/s
# Warmup Iteration  20: 17186486.833 ops/s
# Warmup Iteration  21: 17213590.366 ops/s
# Warmup Iteration  22: 17210142.793 ops/s
# Warmup Iteration  23: 17122684.847 ops/s
# Warmup Iteration  24: 17151054.892 ops/s
# Warmup Iteration  25: 17169351.865 ops/s
# Warmup Iteration  26: 17123838.565 ops/s
# Warmup Iteration  27: 17182783.476 ops/s
# Warmup Iteration  28: 17175720.826 ops/s
# Warmup Iteration  29: 17219830.192 ops/s
# Warmup Iteration  30: 17227669.834 ops/s
Iteration   1: 17174730.785 ops/s
Iteration   2: 17122137.072 ops/s
Iteration   3: 17224049.307 ops/s
Iteration   4: 17266937.369 ops/s
Iteration   5: 17248538.307 ops/s
Iteration   6: 17199318.517 ops/s
Iteration   7: 17227776.640 ops/s
Iteration   8: 17174449.184 ops/s
Iteration   9: 17211146.102 ops/s
Iteration  10: 17184241.671 ops/s
Iteration  11: 17139874.144 ops/s
Iteration  12: 17200862.637 ops/s
Iteration  13: 17195411.892 ops/s
Iteration  14: 17163898.995 ops/s
Iteration  15: 17209865.894 ops/s
Iteration  16: 17249177.074 ops/s
Iteration  17: 17223572.401 ops/s
Iteration  18: 17136992.192 ops/s
Iteration  19: 17072746.671 ops/s
Iteration  20: 17004611.139 ops/s
Iteration  21: 17193042.568 ops/s
Iteration  22: 17092976.443 ops/s
Iteration  23: 17139320.621 ops/s
Iteration  24: 17150187.714 ops/s
Iteration  25: 16967026.313 ops/s
Iteration  26: 17137079.043 ops/s
Iteration  27: 17270839.452 ops/s
Iteration  28: 17253647.650 ops/s
Iteration  29: 17238335.726 ops/s
Iteration  30: 17183409.861 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_noneSatisfyWith":
  17175206.780 ±(99.9%) 47948.822 ops/s [Average]
  (min, avg, max) = (16967026.313, 17175206.780, 17270839.452), stdev = 71767.544
  CI (99.9%): [17127257.958, 17223155.601] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  17175206.780 ± 47948.822  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11987.167 ops/s
# Warmup Iteration   2: 12142.787 ops/s
# Warmup Iteration   3: 12457.568 ops/s
# Warmup Iteration   4: 12171.811 ops/s
# Warmup Iteration   5: 12266.531 ops/s
# Warmup Iteration   6: 12152.101 ops/s
# Warmup Iteration   7: 13988.695 ops/s
# Warmup Iteration   8: 16711.846 ops/s
# Warmup Iteration   9: 16780.864 ops/s
# Warmup Iteration  10: 17565.456 ops/s
# Warmup Iteration  11: 16604.731 ops/s
# Warmup Iteration  12: 16547.025 ops/s
# Warmup Iteration  13: 17529.436 ops/s
# Warmup Iteration  14: 16931.310 ops/s
# Warmup Iteration  15: 17555.112 ops/s
# Warmup Iteration  16: 16762.827 ops/s
# Warmup Iteration  17: 16325.235 ops/s
# Warmup Iteration  18: 17298.373 ops/s
# Warmup Iteration  19: 16776.729 ops/s
# Warmup Iteration  20: 16814.021 ops/s
# Warmup Iteration  21: 16563.747 ops/s
# Warmup Iteration  22: 16642.040 ops/s
# Warmup Iteration  23: 16737.777 ops/s
# Warmup Iteration  24: 16664.424 ops/s
# Warmup Iteration  25: 16734.584 ops/s
# Warmup Iteration  26: 12914.577 ops/s
# Warmup Iteration  27: 9541.899 ops/s
# Warmup Iteration  28: 10046.886 ops/s
# Warmup Iteration  29: 9008.996 ops/s
# Warmup Iteration  30: 10157.877 ops/s
Iteration   1: 9420.953 ops/s
Iteration   2: 9965.862 ops/s
Iteration   3: 9261.890 ops/s
Iteration   4: 9286.494 ops/s
Iteration   5: 9846.711 ops/s
Iteration   6: 10849.086 ops/s
Iteration   7: 9148.655 ops/s
Iteration   8: 9884.103 ops/s
Iteration   9: 9932.308 ops/s
Iteration  10: 9651.156 ops/s
Iteration  11: 10376.519 ops/s
Iteration  12: 8865.233 ops/s
Iteration  13: 9081.278 ops/s
Iteration  14: 9283.666 ops/s
Iteration  15: 10209.171 ops/s
Iteration  16: 10381.161 ops/s
Iteration  17: 9440.587 ops/s
Iteration  18: 10468.822 ops/s
Iteration  19: 9651.869 ops/s
Iteration  20: 10725.368 ops/s
Iteration  21: 9772.810 ops/s
Iteration  22: 9065.303 ops/s
Iteration  23: 9970.066 ops/s
Iteration  24: 10381.711 ops/s
Iteration  25: 8773.916 ops/s
Iteration  26: 10576.284 ops/s
Iteration  27: 9005.653 ops/s
Iteration  28: 9846.841 ops/s
Iteration  29: 7696.567 ops/s
Iteration  30: 7605.152 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_parallelStream":
  9614.173 ±(99.9%) 521.219 ops/s [Average]
  (min, avg, max) = (7605.152, 9614.173, 10849.086), stdev = 780.136
  CI (99.9%): [9092.954, 10135.392] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt     Score     Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_parallelStream  thrpt   30  9614.173 ± 521.219  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1085727.605 ops/s
# Warmup Iteration   2: 1677428.974 ops/s
# Warmup Iteration   3: 2178879.275 ops/s
# Warmup Iteration   4: 2166246.746 ops/s
# Warmup Iteration   5: 2179216.352 ops/s
# Warmup Iteration   6: 2177174.451 ops/s
# Warmup Iteration   7: 2174591.100 ops/s
# Warmup Iteration   8: 1825794.790 ops/s
# Warmup Iteration   9: 2172776.105 ops/s
# Warmup Iteration  10: 2170760.663 ops/s
# Warmup Iteration  11: 2167020.090 ops/s
# Warmup Iteration  12: 2163120.740 ops/s
# Warmup Iteration  13: 2159518.049 ops/s
# Warmup Iteration  14: 2148827.715 ops/s
# Warmup Iteration  15: 2158685.714 ops/s
# Warmup Iteration  16: 2178514.446 ops/s
# Warmup Iteration  17: 2174939.681 ops/s
# Warmup Iteration  18: 2180106.786 ops/s
# Warmup Iteration  19: 2129348.679 ops/s
# Warmup Iteration  20: 2174844.688 ops/s
# Warmup Iteration  21: 2149710.989 ops/s
# Warmup Iteration  22: 2170417.003 ops/s
# Warmup Iteration  23: 2133103.004 ops/s
# Warmup Iteration  24: 2149065.713 ops/s
# Warmup Iteration  25: 2167085.923 ops/s
# Warmup Iteration  26: 2181838.045 ops/s
# Warmup Iteration  27: 2181754.437 ops/s
# Warmup Iteration  28: 2178167.964 ops/s
# Warmup Iteration  29: 2175285.536 ops/s
# Warmup Iteration  30: 2169741.046 ops/s
Iteration   1: 2181477.248 ops/s
Iteration   2: 2177143.015 ops/s
Iteration   3: 2164689.339 ops/s
Iteration   4: 2114420.478 ops/s
Iteration   5: 2144419.659 ops/s
Iteration   6: 2180497.486 ops/s
Iteration   7: 2163087.253 ops/s
Iteration   8: 2167001.278 ops/s
Iteration   9: 2169577.396 ops/s
Iteration  10: 2112823.535 ops/s
Iteration  11: 2148350.340 ops/s
Iteration  12: 2154766.356 ops/s
Iteration  13: 2121618.470 ops/s
Iteration  14: 2171820.205 ops/s
Iteration  15: 2177276.158 ops/s
Iteration  16: 2161324.535 ops/s
Iteration  17: 2182279.759 ops/s
Iteration  18: 2176867.671 ops/s
Iteration  19: 2181997.196 ops/s
Iteration  20: 2182943.117 ops/s
Iteration  21: 2140963.396 ops/s
Iteration  22: 2122118.343 ops/s
Iteration  23: 2146885.518 ops/s
Iteration  24: 2147210.918 ops/s
Iteration  25: 2121046.295 ops/s
Iteration  26: 2140805.498 ops/s
Iteration  27: 2090003.068 ops/s
Iteration  28: 2103984.484 ops/s
Iteration  29: 2153082.264 ops/s
Iteration  30: 2177005.309 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_partition":
  2152582.853 ±(99.9%) 17764.979 ops/s [Average]
  (min, avg, max) = (2090003.068, 2152582.853, 2182943.117), stdev = 26589.786
  CI (99.9%): [2134817.874, 2170347.832] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_partition  thrpt   30  2152582.853 ± 17764.979  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2091756.388 ops/s
# Warmup Iteration   2: 4451678.455 ops/s
# Warmup Iteration   3: 4529040.280 ops/s
# Warmup Iteration   4: 4554943.427 ops/s
# Warmup Iteration   5: 3797666.645 ops/s
# Warmup Iteration   6: 4554126.146 ops/s
# Warmup Iteration   7: 4562786.181 ops/s
# Warmup Iteration   8: 4563713.121 ops/s
# Warmup Iteration   9: 4560693.363 ops/s
# Warmup Iteration  10: 4556683.079 ops/s
# Warmup Iteration  11: 4576087.411 ops/s
# Warmup Iteration  12: 4558730.260 ops/s
# Warmup Iteration  13: 4566759.506 ops/s
# Warmup Iteration  14: 4566885.122 ops/s
# Warmup Iteration  15: 4565989.093 ops/s
# Warmup Iteration  16: 4561292.344 ops/s
# Warmup Iteration  17: 4549680.419 ops/s
# Warmup Iteration  18: 4561804.362 ops/s
# Warmup Iteration  19: 4542451.220 ops/s
# Warmup Iteration  20: 4509511.535 ops/s
# Warmup Iteration  21: 4528196.452 ops/s
# Warmup Iteration  22: 4518359.145 ops/s
# Warmup Iteration  23: 4510692.916 ops/s
# Warmup Iteration  24: 4510130.408 ops/s
# Warmup Iteration  25: 4465722.152 ops/s
# Warmup Iteration  26: 4510862.279 ops/s
# Warmup Iteration  27: 4497295.073 ops/s
# Warmup Iteration  28: 4490940.936 ops/s
# Warmup Iteration  29: 4518895.215 ops/s
# Warmup Iteration  30: 4489548.338 ops/s
Iteration   1: 4507932.103 ops/s
Iteration   2: 4492590.536 ops/s
Iteration   3: 4566875.983 ops/s
Iteration   4: 4545440.397 ops/s
Iteration   5: 4549742.481 ops/s
Iteration   6: 4528282.541 ops/s
Iteration   7: 4446190.687 ops/s
Iteration   8: 4537927.004 ops/s
Iteration   9: 4511220.403 ops/s
Iteration  10: 4522959.626 ops/s
Iteration  11: 4553831.640 ops/s
Iteration  12: 4540147.628 ops/s
Iteration  13: 4546448.438 ops/s
Iteration  14: 4520324.290 ops/s
Iteration  15: 4521172.168 ops/s
Iteration  16: 4540978.023 ops/s
Iteration  17: 4555098.463 ops/s
Iteration  18: 4556224.843 ops/s
Iteration  19: 4558125.455 ops/s
Iteration  20: 4539011.423 ops/s
Iteration  21: 4483262.474 ops/s
Iteration  22: 4546131.990 ops/s
Iteration  23: 4527549.689 ops/s
Iteration  24: 4553452.904 ops/s
Iteration  25: 4551479.880 ops/s
Iteration  26: 4491135.524 ops/s
Iteration  27: 4541526.898 ops/s
Iteration  28: 4486631.026 ops/s
Iteration  29: 4536320.755 ops/s
Iteration  30: 4489035.083 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_partitionWhile":
  4528235.012 ±(99.9%) 18978.701 ops/s [Average]
  (min, avg, max) = (4446190.687, 4528235.012, 4566875.983), stdev = 28406.429
  CI (99.9%): [4509256.311, 4547213.713] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_partitionWhile  thrpt   30  4528235.012 ± 18978.701  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 839615.134 ops/s
# Warmup Iteration   2: 1124344.724 ops/s
# Warmup Iteration   3: 1371970.789 ops/s
# Warmup Iteration   4: 1363894.966 ops/s
# Warmup Iteration   5: 1380278.240 ops/s
# Warmup Iteration   6: 1380408.057 ops/s
# Warmup Iteration   7: 1380208.537 ops/s
# Warmup Iteration   8: 1147774.721 ops/s
# Warmup Iteration   9: 1368970.269 ops/s
# Warmup Iteration  10: 1373626.082 ops/s
# Warmup Iteration  11: 1375313.868 ops/s
# Warmup Iteration  12: 1374884.281 ops/s
# Warmup Iteration  13: 1375001.341 ops/s
# Warmup Iteration  14: 1372391.006 ops/s
# Warmup Iteration  15: 1371830.502 ops/s
# Warmup Iteration  16: 1369652.277 ops/s
# Warmup Iteration  17: 1382118.598 ops/s
# Warmup Iteration  18: 1381533.879 ops/s
# Warmup Iteration  19: 1374023.264 ops/s
# Warmup Iteration  20: 1375767.245 ops/s
# Warmup Iteration  21: 1379006.362 ops/s
# Warmup Iteration  22: 1377995.889 ops/s
# Warmup Iteration  23: 1380282.618 ops/s
# Warmup Iteration  24: 1375618.121 ops/s
# Warmup Iteration  25: 1379731.575 ops/s
# Warmup Iteration  26: 1381092.713 ops/s
# Warmup Iteration  27: 1381430.412 ops/s
# Warmup Iteration  28: 1376113.537 ops/s
# Warmup Iteration  29: 1378506.470 ops/s
# Warmup Iteration  30: 1378733.854 ops/s
Iteration   1: 1375586.140 ops/s
Iteration   2: 1381534.854 ops/s
Iteration   3: 1381035.998 ops/s
Iteration   4: 1380506.678 ops/s
Iteration   5: 1369183.457 ops/s
Iteration   6: 1362974.410 ops/s
Iteration   7: 1365320.421 ops/s
Iteration   8: 1382490.285 ops/s
Iteration   9: 1374044.239 ops/s
Iteration  10: 1374569.457 ops/s
Iteration  11: 1371786.884 ops/s
Iteration  12: 1380816.785 ops/s
Iteration  13: 1383881.944 ops/s
Iteration  14: 1379696.166 ops/s
Iteration  15: 1380120.223 ops/s
Iteration  16: 1382110.847 ops/s
Iteration  17: 1383478.785 ops/s
Iteration  18: 1381768.751 ops/s
Iteration  19: 1377916.573 ops/s
Iteration  20: 1380871.567 ops/s
Iteration  21: 1381749.284 ops/s
Iteration  22: 1381154.371 ops/s
Iteration  23: 1381627.393 ops/s
Iteration  24: 1378865.545 ops/s
Iteration  25: 1375171.450 ops/s
Iteration  26: 1370209.656 ops/s
Iteration  27: 1379043.953 ops/s
Iteration  28: 1382971.646 ops/s
Iteration  29: 1381148.075 ops/s
Iteration  30: 1381786.145 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_partitionWith":
  1378114.066 ±(99.9%) 3637.931 ops/s [Average]
  (min, avg, max) = (1362974.410, 1378114.066, 1383881.944), stdev = 5445.084
  CI (99.9%): [1374476.136, 1381751.997] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_partitionWith  thrpt   30  1378114.066 ± 3637.931  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2929090.166 ops/s
# Warmup Iteration   2: 7249855.993 ops/s
# Warmup Iteration   3: 7737184.092 ops/s
# Warmup Iteration   4: 7102953.364 ops/s
# Warmup Iteration   5: 7223083.888 ops/s
# Warmup Iteration   6: 7726469.257 ops/s
# Warmup Iteration   7: 7790980.859 ops/s
# Warmup Iteration   8: 7801100.394 ops/s
# Warmup Iteration   9: 7804541.737 ops/s
# Warmup Iteration  10: 7796350.474 ops/s
# Warmup Iteration  11: 7801017.912 ops/s
# Warmup Iteration  12: 7764854.000 ops/s
# Warmup Iteration  13: 7797149.254 ops/s
# Warmup Iteration  14: 7775564.481 ops/s
# Warmup Iteration  15: 7777527.014 ops/s
# Warmup Iteration  16: 7759593.644 ops/s
# Warmup Iteration  17: 7765668.452 ops/s
# Warmup Iteration  18: 7771317.638 ops/s
# Warmup Iteration  19: 7802352.240 ops/s
# Warmup Iteration  20: 7762024.182 ops/s
# Warmup Iteration  21: 7754674.511 ops/s
# Warmup Iteration  22: 7799579.686 ops/s
# Warmup Iteration  23: 7710384.311 ops/s
# Warmup Iteration  24: 7761563.750 ops/s
# Warmup Iteration  25: 7779420.333 ops/s
# Warmup Iteration  26: 7764783.906 ops/s
# Warmup Iteration  27: 7788302.914 ops/s
# Warmup Iteration  28: 7797910.062 ops/s
# Warmup Iteration  29: 7809565.105 ops/s
# Warmup Iteration  30: 7811772.663 ops/s
Iteration   1: 7786414.935 ops/s
Iteration   2: 7801669.354 ops/s
Iteration   3: 7798525.564 ops/s
Iteration   4: 7759194.036 ops/s
Iteration   5: 7715614.660 ops/s
Iteration   6: 7759089.870 ops/s
Iteration   7: 7699478.842 ops/s
Iteration   8: 7679676.623 ops/s
Iteration   9: 7700228.693 ops/s
Iteration  10: 7760072.839 ops/s
Iteration  11: 7762769.260 ops/s
Iteration  12: 7799264.765 ops/s
Iteration  13: 7798247.433 ops/s
Iteration  14: 7823016.258 ops/s
Iteration  15: 7599993.334 ops/s
Iteration  16: 7548605.971 ops/s
Iteration  17: 7656726.909 ops/s
Iteration  18: 7507886.469 ops/s
Iteration  19: 7669388.520 ops/s
Iteration  20: 7717338.260 ops/s
Iteration  21: 7788921.055 ops/s
Iteration  22: 7767454.769 ops/s
Iteration  23: 7822972.996 ops/s
Iteration  24: 7811126.666 ops/s
Iteration  25: 7787233.842 ops/s
Iteration  26: 7773922.878 ops/s
Iteration  27: 7785568.490 ops/s
Iteration  28: 7814930.523 ops/s
Iteration  29: 7732791.475 ops/s
Iteration  30: 7783908.261 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_reject":
  7740401.118 ±(99.9%) 53069.510 ops/s [Average]
  (min, avg, max) = (7507886.469, 7740401.118, 7823016.258), stdev = 79431.951
  CI (99.9%): [7687331.608, 7793470.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_reject  thrpt   30  7740401.118 ± 53069.510  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2280406.638 ops/s
# Warmup Iteration   2: 4824826.455 ops/s
# Warmup Iteration   3: 4972743.256 ops/s
# Warmup Iteration   4: 5027160.021 ops/s
# Warmup Iteration   5: 4250825.897 ops/s
# Warmup Iteration   6: 5088501.389 ops/s
# Warmup Iteration   7: 5077339.739 ops/s
# Warmup Iteration   8: 5104977.652 ops/s
# Warmup Iteration   9: 5081579.774 ops/s
# Warmup Iteration  10: 5056713.314 ops/s
# Warmup Iteration  11: 5057782.524 ops/s
# Warmup Iteration  12: 5055838.992 ops/s
# Warmup Iteration  13: 5052259.431 ops/s
# Warmup Iteration  14: 5093451.415 ops/s
# Warmup Iteration  15: 5089037.769 ops/s
# Warmup Iteration  16: 5024179.749 ops/s
# Warmup Iteration  17: 4988653.895 ops/s
# Warmup Iteration  18: 5055342.693 ops/s
# Warmup Iteration  19: 5084963.631 ops/s
# Warmup Iteration  20: 5033749.229 ops/s
# Warmup Iteration  21: 5104601.121 ops/s
# Warmup Iteration  22: 5099113.741 ops/s
# Warmup Iteration  23: 5107433.134 ops/s
# Warmup Iteration  24: 5089378.679 ops/s
# Warmup Iteration  25: 5106764.642 ops/s
# Warmup Iteration  26: 5086557.804 ops/s
# Warmup Iteration  27: 5107532.065 ops/s
# Warmup Iteration  28: 5090468.839 ops/s
# Warmup Iteration  29: 5106111.465 ops/s
# Warmup Iteration  30: 5100831.749 ops/s
Iteration   1: 5075866.927 ops/s
Iteration   2: 5098410.434 ops/s
Iteration   3: 5092921.247 ops/s
Iteration   4: 5094270.612 ops/s
Iteration   5: 5087818.383 ops/s
Iteration   6: 5103418.487 ops/s
Iteration   7: 5110680.137 ops/s
Iteration   8: 5061267.250 ops/s
Iteration   9: 5013000.667 ops/s
Iteration  10: 4999565.095 ops/s
Iteration  11: 5104830.529 ops/s
Iteration  12: 5099613.990 ops/s
Iteration  13: 5107919.011 ops/s
Iteration  14: 5088287.814 ops/s
Iteration  15: 5105950.493 ops/s
Iteration  16: 5110006.433 ops/s
Iteration  17: 5101180.324 ops/s
Iteration  18: 5097761.300 ops/s
Iteration  19: 5097222.929 ops/s
Iteration  20: 5112698.682 ops/s
Iteration  21: 5105113.748 ops/s
Iteration  22: 5089694.630 ops/s
Iteration  23: 5095075.399 ops/s
Iteration  24: 5107391.535 ops/s
Iteration  25: 5082025.002 ops/s
Iteration  26: 4852323.897 ops/s
Iteration  27: 4878900.850 ops/s
Iteration  28: 4876168.164 ops/s
Iteration  29: 4820471.661 ops/s
Iteration  30: 4860963.326 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWith":
  5051027.299 ±(99.9%) 61386.795 ops/s [Average]
  (min, avg, max) = (4820471.661, 5051027.299, 5112698.682), stdev = 91880.872
  CI (99.9%): [4989640.504, 5112414.094] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWith  thrpt   30  5051027.299 ± 61386.795  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3234184.171 ops/s
# Warmup Iteration   2: 8531109.882 ops/s
# Warmup Iteration   3: 9143307.410 ops/s
# Warmup Iteration   4: 9219890.940 ops/s
# Warmup Iteration   5: 7890886.726 ops/s
# Warmup Iteration   6: 9351567.260 ops/s
# Warmup Iteration   7: 9147526.339 ops/s
# Warmup Iteration   8: 9526282.283 ops/s
# Warmup Iteration   9: 9500950.579 ops/s
# Warmup Iteration  10: 9259813.331 ops/s
# Warmup Iteration  11: 9143386.726 ops/s
# Warmup Iteration  12: 9175114.640 ops/s
# Warmup Iteration  13: 9058530.573 ops/s
# Warmup Iteration  14: 9447570.958 ops/s
# Warmup Iteration  15: 9493594.362 ops/s
# Warmup Iteration  16: 9479944.189 ops/s
# Warmup Iteration  17: 9251012.625 ops/s
# Warmup Iteration  18: 8908275.635 ops/s
# Warmup Iteration  19: 9118356.108 ops/s
# Warmup Iteration  20: 9113452.139 ops/s
# Warmup Iteration  21: 9101030.419 ops/s
# Warmup Iteration  22: 9109023.270 ops/s
# Warmup Iteration  23: 9197226.763 ops/s
# Warmup Iteration  24: 9541111.617 ops/s
# Warmup Iteration  25: 9190742.160 ops/s
# Warmup Iteration  26: 9112671.272 ops/s
# Warmup Iteration  27: 9033640.676 ops/s
# Warmup Iteration  28: 9333466.615 ops/s
# Warmup Iteration  29: 9205588.063 ops/s
# Warmup Iteration  30: 8939364.532 ops/s
Iteration   1: 9081081.122 ops/s
Iteration   2: 9072195.344 ops/s
Iteration   3: 9081575.439 ops/s
Iteration   4: 8903739.273 ops/s
Iteration   5: 9233152.902 ops/s
Iteration   6: 8857642.892 ops/s
Iteration   7: 9030070.094 ops/s
Iteration   8: 8908402.987 ops/s
Iteration   9: 9126679.163 ops/s
Iteration  10: 9139473.689 ops/s
Iteration  11: 9018307.912 ops/s
Iteration  12: 9076820.630 ops/s
Iteration  13: 8991501.550 ops/s
Iteration  14: 9163429.660 ops/s
Iteration  15: 9032610.228 ops/s
Iteration  16: 9120563.309 ops/s
Iteration  17: 9457771.209 ops/s
Iteration  18: 8986771.203 ops/s
Iteration  19: 9057637.797 ops/s
Iteration  20: 9127598.303 ops/s
Iteration  21: 9068655.174 ops/s
Iteration  22: 9117700.004 ops/s
Iteration  23: 9047696.519 ops/s
Iteration  24: 8979715.588 ops/s
Iteration  25: 8962190.753 ops/s
Iteration  26: 9072085.711 ops/s
Iteration  27: 9239233.173 ops/s
Iteration  28: 8961845.033 ops/s
Iteration  29: 8862932.344 ops/s
Iteration  30: 9196113.263 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWithIndex":
  9065839.742 ±(99.9%) 82187.787 ops/s [Average]
  (min, avg, max) = (8857642.892, 9065839.742, 9457771.209), stdev = 123014.820
  CI (99.9%): [8983651.955, 9148027.530] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  9065839.742 ± 82187.787  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2655849.589 ops/s
# Warmup Iteration   2: 6526301.685 ops/s
# Warmup Iteration   3: 6492461.384 ops/s
# Warmup Iteration   4: 5217412.743 ops/s
# Warmup Iteration   5: 6295103.226 ops/s
# Warmup Iteration   6: 6395274.233 ops/s
# Warmup Iteration   7: 6336102.249 ops/s
# Warmup Iteration   8: 6359670.644 ops/s
# Warmup Iteration   9: 6614000.435 ops/s
# Warmup Iteration  10: 6444079.755 ops/s
# Warmup Iteration  11: 6441052.729 ops/s
# Warmup Iteration  12: 6303951.742 ops/s
# Warmup Iteration  13: 6537892.387 ops/s
# Warmup Iteration  14: 6529903.612 ops/s
# Warmup Iteration  15: 5980489.503 ops/s
# Warmup Iteration  16: 6530710.537 ops/s
# Warmup Iteration  17: 6429671.519 ops/s
# Warmup Iteration  18: 6364485.969 ops/s
# Warmup Iteration  19: 6432003.466 ops/s
# Warmup Iteration  20: 6338794.506 ops/s
# Warmup Iteration  21: 6477745.010 ops/s
# Warmup Iteration  22: 6450809.715 ops/s
# Warmup Iteration  23: 6475039.274 ops/s
# Warmup Iteration  24: 6575383.629 ops/s
# Warmup Iteration  25: 6481868.632 ops/s
# Warmup Iteration  26: 6341591.178 ops/s
# Warmup Iteration  27: 6373671.536 ops/s
# Warmup Iteration  28: 6454759.302 ops/s
# Warmup Iteration  29: 6394810.214 ops/s
# Warmup Iteration  30: 6379074.661 ops/s
Iteration   1: 6402979.628 ops/s
Iteration   2: 6543014.369 ops/s
Iteration   3: 6412230.737 ops/s
Iteration   4: 6427047.194 ops/s
Iteration   5: 6457767.425 ops/s
Iteration   6: 6469295.261 ops/s
Iteration   7: 6304119.989 ops/s
Iteration   8: 6219520.736 ops/s
Iteration   9: 6332228.992 ops/s
Iteration  10: 6450094.669 ops/s
Iteration  11: 6443898.214 ops/s
Iteration  12: 6355850.217 ops/s
Iteration  13: 6733001.083 ops/s
Iteration  14: 6752631.876 ops/s
Iteration  15: 6710213.330 ops/s
Iteration  16: 6757178.676 ops/s
Iteration  17: 6645326.907 ops/s
Iteration  18: 6744664.241 ops/s
Iteration  19: 6544495.408 ops/s
Iteration  20: 6440118.032 ops/s
Iteration  21: 6251837.053 ops/s
Iteration  22: 6562541.314 ops/s
Iteration  23: 6455300.671 ops/s
Iteration  24: 6525387.511 ops/s
Iteration  25: 6688277.445 ops/s
Iteration  26: 6544575.055 ops/s
Iteration  27: 6585612.722 ops/s
Iteration  28: 6360785.119 ops/s
Iteration  29: 6294925.368 ops/s
Iteration  30: 6616571.669 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  6501049.697 ±(99.9%) 103911.905 ops/s [Average]
  (min, avg, max) = (6219520.736, 6501049.697, 6757178.676), stdev = 155530.459
  CI (99.9%): [6397137.792, 6604961.602] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  6501049.697 ± 103911.905  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2662551.174 ops/s
# Warmup Iteration   2: 6090803.767 ops/s
# Warmup Iteration   3: 6118788.079 ops/s
# Warmup Iteration   4: 5275257.958 ops/s
# Warmup Iteration   5: 6251334.541 ops/s
# Warmup Iteration   6: 6224083.861 ops/s
# Warmup Iteration   7: 6220748.352 ops/s
# Warmup Iteration   8: 6291971.515 ops/s
# Warmup Iteration   9: 6391826.559 ops/s
# Warmup Iteration  10: 6073680.453 ops/s
# Warmup Iteration  11: 6101356.068 ops/s
# Warmup Iteration  12: 6264871.709 ops/s
# Warmup Iteration  13: 6251867.007 ops/s
# Warmup Iteration  14: 6127618.700 ops/s
# Warmup Iteration  15: 6178577.808 ops/s
# Warmup Iteration  16: 6187107.403 ops/s
# Warmup Iteration  17: 6399850.514 ops/s
# Warmup Iteration  18: 6277606.525 ops/s
# Warmup Iteration  19: 6184145.121 ops/s
# Warmup Iteration  20: 6176022.346 ops/s
# Warmup Iteration  21: 6309840.381 ops/s
# Warmup Iteration  22: 6200373.899 ops/s
# Warmup Iteration  23: 6072977.815 ops/s
# Warmup Iteration  24: 6159135.413 ops/s
# Warmup Iteration  25: 6167507.611 ops/s
# Warmup Iteration  26: 6068994.899 ops/s
# Warmup Iteration  27: 6156342.968 ops/s
# Warmup Iteration  28: 6272338.506 ops/s
# Warmup Iteration  29: 6233546.406 ops/s
# Warmup Iteration  30: 6220996.700 ops/s
Iteration   1: 6070734.745 ops/s
Iteration   2: 6382680.888 ops/s
Iteration   3: 6223934.908 ops/s
Iteration   4: 6246520.644 ops/s
Iteration   5: 6173001.402 ops/s
Iteration   6: 6077677.416 ops/s
Iteration   7: 6203949.241 ops/s
Iteration   8: 6280496.389 ops/s
Iteration   9: 6348262.139 ops/s
Iteration  10: 6374225.557 ops/s
Iteration  11: 6361704.918 ops/s
Iteration  12: 6284498.014 ops/s
Iteration  13: 6358612.327 ops/s
Iteration  14: 6469161.751 ops/s
Iteration  15: 6233555.005 ops/s
Iteration  16: 6354794.021 ops/s
Iteration  17: 6416010.494 ops/s
Iteration  18: 6407449.800 ops/s
Iteration  19: 6334736.883 ops/s
Iteration  20: 6487501.447 ops/s
Iteration  21: 6493204.995 ops/s
Iteration  22: 6507211.226 ops/s
Iteration  23: 6511817.373 ops/s
Iteration  24: 6517556.971 ops/s
Iteration  25: 6496868.720 ops/s
Iteration  26: 6500001.375 ops/s
Iteration  27: 6503662.917 ops/s
Iteration  28: 6514813.140 ops/s
Iteration  29: 6507900.419 ops/s
Iteration  30: 6477323.322 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWith_target":
  6370662.282 ±(99.9%) 89434.220 ops/s [Average]
  (min, avg, max) = (6070734.745, 6370662.282, 6517556.971), stdev = 133860.941
  CI (99.9%): [6281228.061, 6460096.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  6370662.282 ± 89434.220  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_reject_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_reject_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5907950.467 ops/s
# Warmup Iteration   2: 13054909.532 ops/s
# Warmup Iteration   3: 10968076.380 ops/s
# Warmup Iteration   4: 13060578.840 ops/s
# Warmup Iteration   5: 12554640.761 ops/s
# Warmup Iteration   6: 12997356.198 ops/s
# Warmup Iteration   7: 13063380.167 ops/s
# Warmup Iteration   8: 13066900.547 ops/s
# Warmup Iteration   9: 13047623.357 ops/s
# Warmup Iteration  10: 12545919.055 ops/s
# Warmup Iteration  11: 12172388.965 ops/s
# Warmup Iteration  12: 12536071.265 ops/s
# Warmup Iteration  13: 12248241.253 ops/s
# Warmup Iteration  14: 12529404.013 ops/s
# Warmup Iteration  15: 12493865.738 ops/s
# Warmup Iteration  16: 12540962.017 ops/s
# Warmup Iteration  17: 12487259.228 ops/s
# Warmup Iteration  18: 12730803.588 ops/s
# Warmup Iteration  19: 12943745.411 ops/s
# Warmup Iteration  20: 12738194.432 ops/s
# Warmup Iteration  21: 12408938.895 ops/s
# Warmup Iteration  22: 12490863.976 ops/s
# Warmup Iteration  23: 12547581.964 ops/s
# Warmup Iteration  24: 12345474.634 ops/s
# Warmup Iteration  25: 12622883.366 ops/s
# Warmup Iteration  26: 12364381.585 ops/s
# Warmup Iteration  27: 12366950.209 ops/s
# Warmup Iteration  28: 12235942.753 ops/s
# Warmup Iteration  29: 12334007.557 ops/s
# Warmup Iteration  30: 12480323.144 ops/s
Iteration   1: 12272233.262 ops/s
Iteration   2: 12781880.520 ops/s
Iteration   3: 12820986.829 ops/s
Iteration   4: 12692506.807 ops/s
Iteration   5: 12118118.522 ops/s
Iteration   6: 12231097.423 ops/s
Iteration   7: 12582076.777 ops/s
Iteration   8: 12463800.554 ops/s
Iteration   9: 12672234.739 ops/s
Iteration  10: 12437763.076 ops/s
Iteration  11: 12649883.828 ops/s
Iteration  12: 12509081.496 ops/s
Iteration  13: 12514142.636 ops/s
Iteration  14: 12501015.943 ops/s
Iteration  15: 12375614.389 ops/s
Iteration  16: 12384461.724 ops/s
Iteration  17: 12774895.692 ops/s
Iteration  18: 13082043.387 ops/s
Iteration  19: 12949418.781 ops/s
Iteration  20: 11964625.914 ops/s
Iteration  21: 12214912.440 ops/s
Iteration  22: 12354362.191 ops/s
Iteration  23: 11989259.526 ops/s
Iteration  24: 12370554.015 ops/s
Iteration  25: 12381287.826 ops/s
Iteration  26: 12238873.047 ops/s
Iteration  27: 13038667.564 ops/s
Iteration  28: 12865053.887 ops/s
Iteration  29: 12685899.203 ops/s
Iteration  30: 12428898.780 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_reject_target":
  12511521.693 ±(99.9%) 192485.581 ops/s [Average]
  (min, avg, max) = (11964625.914, 12511521.693, 13082043.387), stdev = 288103.378
  CI (99.9%): [12319036.112, 12704007.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_reject_target  thrpt   30  12511521.693 ± 192485.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 721757.818 ops/s
# Warmup Iteration   2: 729635.175 ops/s
# Warmup Iteration   3: 938521.668 ops/s
# Warmup Iteration   4: 949337.627 ops/s
# Warmup Iteration   5: 921059.593 ops/s
# Warmup Iteration   6: 933246.679 ops/s
# Warmup Iteration   7: 925454.620 ops/s
# Warmup Iteration   8: 944658.401 ops/s
# Warmup Iteration   9: 926271.910 ops/s
# Warmup Iteration  10: 951706.671 ops/s
# Warmup Iteration  11: 953707.666 ops/s
# Warmup Iteration  12: 854242.749 ops/s
# Warmup Iteration  13: 899079.954 ops/s
# Warmup Iteration  14: 948854.112 ops/s
# Warmup Iteration  15: 969669.984 ops/s
# Warmup Iteration  16: 916963.587 ops/s
# Warmup Iteration  17: 1033122.458 ops/s
# Warmup Iteration  18: 995493.321 ops/s
# Warmup Iteration  19: 1001625.486 ops/s
# Warmup Iteration  20: 993598.114 ops/s
# Warmup Iteration  21: 966777.359 ops/s
# Warmup Iteration  22: 983386.651 ops/s
# Warmup Iteration  23: 993870.460 ops/s
# Warmup Iteration  24: 973917.858 ops/s
# Warmup Iteration  25: 979752.014 ops/s
# Warmup Iteration  26: 992504.887 ops/s
# Warmup Iteration  27: 1002007.358 ops/s
# Warmup Iteration  28: 981972.298 ops/s
# Warmup Iteration  29: 973747.049 ops/s
# Warmup Iteration  30: 981470.234 ops/s
Iteration   1: 993521.827 ops/s
Iteration   2: 993722.101 ops/s
Iteration   3: 978543.740 ops/s
Iteration   4: 1037735.858 ops/s
Iteration   5: 993275.594 ops/s
Iteration   6: 998967.010 ops/s
Iteration   7: 989127.361 ops/s
Iteration   8: 1036269.219 ops/s
Iteration   9: 1022987.659 ops/s
Iteration  10: 1016427.087 ops/s
Iteration  11: 1049382.784 ops/s
Iteration  12: 1045166.414 ops/s
Iteration  13: 1037202.176 ops/s
Iteration  14: 1044559.859 ops/s
Iteration  15: 1022757.601 ops/s
Iteration  16: 999779.482 ops/s
Iteration  17: 980274.748 ops/s
Iteration  18: 984926.364 ops/s
Iteration  19: 993547.890 ops/s
Iteration  20: 990224.223 ops/s
Iteration  21: 1030466.760 ops/s
Iteration  22: 1022073.453 ops/s
Iteration  23: 1000969.857 ops/s
Iteration  24: 995380.466 ops/s
Iteration  25: 1020888.668 ops/s
Iteration  26: 991958.052 ops/s
Iteration  27: 1028533.342 ops/s
Iteration  28: 1044860.761 ops/s
Iteration  29: 1028233.893 ops/s
Iteration  30: 1045225.891 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_remove":
  1013899.671 ±(99.9%) 15283.524 ops/s [Average]
  (min, avg, max) = (978543.740, 1013899.671, 1049382.784), stdev = 22875.661
  CI (99.9%): [998616.147, 1029183.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_remove  thrpt   30  1013899.671 ± 15283.524  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 716949.679 ops/s
# Warmup Iteration   2: 715292.114 ops/s
# Warmup Iteration   3: 908479.876 ops/s
# Warmup Iteration   4: 909539.890 ops/s
# Warmup Iteration   5: 898603.845 ops/s
# Warmup Iteration   6: 879669.959 ops/s
# Warmup Iteration   7: 900734.383 ops/s
# Warmup Iteration   8: 918259.499 ops/s
# Warmup Iteration   9: 915383.663 ops/s
# Warmup Iteration  10: 933198.486 ops/s
# Warmup Iteration  11: 951912.264 ops/s
# Warmup Iteration  12: 884715.670 ops/s
# Warmup Iteration  13: 877306.699 ops/s
# Warmup Iteration  14: 915982.337 ops/s
# Warmup Iteration  15: 890258.436 ops/s
# Warmup Iteration  16: 908347.991 ops/s
# Warmup Iteration  17: 964527.419 ops/s
# Warmup Iteration  18: 944835.018 ops/s
# Warmup Iteration  19: 968722.301 ops/s
# Warmup Iteration  20: 959056.054 ops/s
# Warmup Iteration  21: 951544.890 ops/s
# Warmup Iteration  22: 953333.810 ops/s
# Warmup Iteration  23: 952813.753 ops/s
# Warmup Iteration  24: 938036.471 ops/s
# Warmup Iteration  25: 937594.010 ops/s
# Warmup Iteration  26: 977717.321 ops/s
# Warmup Iteration  27: 955335.183 ops/s
# Warmup Iteration  28: 963618.596 ops/s
# Warmup Iteration  29: 958636.844 ops/s
# Warmup Iteration  30: 941888.546 ops/s
Iteration   1: 975576.838 ops/s
Iteration   2: 983573.398 ops/s
Iteration   3: 940115.646 ops/s
Iteration   4: 988664.902 ops/s
Iteration   5: 977659.091 ops/s
Iteration   6: 925042.222 ops/s
Iteration   7: 939898.480 ops/s
Iteration   8: 964246.993 ops/s
Iteration   9: 977439.518 ops/s
Iteration  10: 966894.862 ops/s
Iteration  11: 960082.401 ops/s
Iteration  12: 946928.637 ops/s
Iteration  13: 934403.975 ops/s
Iteration  14: 925831.258 ops/s
Iteration  15: 960291.687 ops/s
Iteration  16: 969423.409 ops/s
Iteration  17: 954687.521 ops/s
Iteration  18: 976631.316 ops/s
Iteration  19: 957333.939 ops/s
Iteration  20: 956045.651 ops/s
Iteration  21: 967499.737 ops/s
Iteration  22: 953431.906 ops/s
Iteration  23: 934382.954 ops/s
Iteration  24: 984974.448 ops/s
Iteration  25: 993851.723 ops/s
Iteration  26: 962482.971 ops/s
Iteration  27: 955391.319 ops/s
Iteration  28: 939659.558 ops/s
Iteration  29: 975321.446 ops/s
Iteration  30: 979593.869 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_removeAll":
  960912.056 ±(99.9%) 12587.106 ops/s [Average]
  (min, avg, max) = (925042.222, 960912.056, 993851.723), stdev = 18839.789
  CI (99.9%): [948324.950, 973499.162] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_removeAll  thrpt   30  960912.056 ± 12587.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709857.216 ops/s
# Warmup Iteration   2: 743395.286 ops/s
# Warmup Iteration   3: 978383.224 ops/s
# Warmup Iteration   4: 952039.143 ops/s
# Warmup Iteration   5: 956949.087 ops/s
# Warmup Iteration   6: 982753.192 ops/s
# Warmup Iteration   7: 967256.987 ops/s
# Warmup Iteration   8: 956383.469 ops/s
# Warmup Iteration   9: 971135.720 ops/s
# Warmup Iteration  10: 963404.446 ops/s
# Warmup Iteration  11: 957461.418 ops/s
# Warmup Iteration  12: 831973.287 ops/s
# Warmup Iteration  13: 960601.255 ops/s
# Warmup Iteration  14: 936973.550 ops/s
# Warmup Iteration  15: 933979.286 ops/s
# Warmup Iteration  16: 938395.356 ops/s
# Warmup Iteration  17: 1005926.335 ops/s
# Warmup Iteration  18: 1025019.840 ops/s
# Warmup Iteration  19: 1043086.700 ops/s
# Warmup Iteration  20: 996363.579 ops/s
# Warmup Iteration  21: 1003976.480 ops/s
# Warmup Iteration  22: 1026354.766 ops/s
# Warmup Iteration  23: 1011712.250 ops/s
# Warmup Iteration  24: 1027275.977 ops/s
# Warmup Iteration  25: 1008790.240 ops/s
# Warmup Iteration  26: 1004408.967 ops/s
# Warmup Iteration  27: 1017789.296 ops/s
# Warmup Iteration  28: 1005423.503 ops/s
# Warmup Iteration  29: 1009528.742 ops/s
# Warmup Iteration  30: 1031467.834 ops/s
Iteration   1: 1048521.743 ops/s
Iteration   2: 1027667.579 ops/s
Iteration   3: 1027055.564 ops/s
Iteration   4: 1024158.762 ops/s
Iteration   5: 1011598.479 ops/s
Iteration   6: 1056667.591 ops/s
Iteration   7: 1038562.529 ops/s
Iteration   8: 1037499.029 ops/s
Iteration   9: 1039767.370 ops/s
Iteration  10: 993287.531 ops/s
Iteration  11: 1039529.401 ops/s
Iteration  12: 1023290.110 ops/s
Iteration  13: 1010149.854 ops/s
Iteration  14: 992178.202 ops/s
Iteration  15: 1039114.004 ops/s
Iteration  16: 1019677.449 ops/s
Iteration  17: 1007925.345 ops/s
Iteration  18: 1033169.897 ops/s
Iteration  19: 1031368.032 ops/s
Iteration  20: 1024190.768 ops/s
Iteration  21: 1022056.416 ops/s
Iteration  22: 1016674.311 ops/s
Iteration  23: 1016066.412 ops/s
Iteration  24: 1024685.909 ops/s
Iteration  25: 1050984.359 ops/s
Iteration  26: 1037646.629 ops/s
Iteration  27: 1070650.626 ops/s
Iteration  28: 1037664.721 ops/s
Iteration  29: 1027547.967 ops/s
Iteration  30: 1037720.807 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_removeAtIndex":
  1028902.580 ±(99.9%) 11370.336 ops/s [Average]
  (min, avg, max) = (992178.202, 1028902.580, 1070650.626), stdev = 17018.585
  CI (99.9%): [1017532.244, 1040272.916] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1028902.580 ± 11370.336  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 622045.094 ops/s
# Warmup Iteration   2: 736160.479 ops/s
# Warmup Iteration   3: 912905.593 ops/s
# Warmup Iteration   4: 903967.270 ops/s
# Warmup Iteration   5: 899034.084 ops/s
# Warmup Iteration   6: 919925.086 ops/s
# Warmup Iteration   7: 887114.867 ops/s
# Warmup Iteration   8: 903413.390 ops/s
# Warmup Iteration   9: 785421.311 ops/s
# Warmup Iteration  10: 895659.344 ops/s
# Warmup Iteration  11: 937948.845 ops/s
# Warmup Iteration  12: 903920.198 ops/s
# Warmup Iteration  13: 917277.886 ops/s
# Warmup Iteration  14: 894584.201 ops/s
# Warmup Iteration  15: 927912.744 ops/s
# Warmup Iteration  16: 933821.851 ops/s
# Warmup Iteration  17: 983221.006 ops/s
# Warmup Iteration  18: 986308.717 ops/s
# Warmup Iteration  19: 966354.623 ops/s
# Warmup Iteration  20: 952629.609 ops/s
# Warmup Iteration  21: 964727.456 ops/s
# Warmup Iteration  22: 968516.415 ops/s
# Warmup Iteration  23: 950161.172 ops/s
# Warmup Iteration  24: 966151.168 ops/s
# Warmup Iteration  25: 961683.526 ops/s
# Warmup Iteration  26: 963370.113 ops/s
# Warmup Iteration  27: 963697.234 ops/s
# Warmup Iteration  28: 987358.033 ops/s
# Warmup Iteration  29: 951888.381 ops/s
# Warmup Iteration  30: 957243.614 ops/s
Iteration   1: 977211.721 ops/s
Iteration   2: 969950.914 ops/s
Iteration   3: 985709.269 ops/s
Iteration   4: 980618.311 ops/s
Iteration   5: 969113.598 ops/s
Iteration   6: 963331.549 ops/s
Iteration   7: 979840.068 ops/s
Iteration   8: 980894.136 ops/s
Iteration   9: 934139.652 ops/s
Iteration  10: 971471.700 ops/s
Iteration  11: 970308.973 ops/s
Iteration  12: 972120.308 ops/s
Iteration  13: 980504.400 ops/s
Iteration  14: 960304.632 ops/s
Iteration  15: 976480.008 ops/s
Iteration  16: 957279.168 ops/s
Iteration  17: 960932.325 ops/s
Iteration  18: 945220.305 ops/s
Iteration  19: 969358.325 ops/s
Iteration  20: 959228.866 ops/s
Iteration  21: 978959.165 ops/s
Iteration  22: 952099.012 ops/s
Iteration  23: 924423.196 ops/s
Iteration  24: 966957.946 ops/s
Iteration  25: 963696.111 ops/s
Iteration  26: 1005890.648 ops/s
Iteration  27: 982785.453 ops/s
Iteration  28: 961950.428 ops/s
Iteration  29: 957229.037 ops/s
Iteration  30: 964044.219 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_replaceAll":
  967401.781 ±(99.9%) 10545.755 ops/s [Average]
  (min, avg, max) = (924423.196, 967401.781, 1005890.648), stdev = 15784.390
  CI (99.9%): [956856.027, 977947.536] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_replaceAll  thrpt   30  967401.781 ± 10545.755  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709704.615 ops/s
# Warmup Iteration   2: 738478.204 ops/s
# Warmup Iteration   3: 955957.030 ops/s
# Warmup Iteration   4: 916864.892 ops/s
# Warmup Iteration   5: 908012.075 ops/s
# Warmup Iteration   6: 915422.396 ops/s
# Warmup Iteration   7: 902728.402 ops/s
# Warmup Iteration   8: 901428.167 ops/s
# Warmup Iteration   9: 907245.914 ops/s
# Warmup Iteration  10: 919885.745 ops/s
# Warmup Iteration  11: 957795.528 ops/s
# Warmup Iteration  12: 868349.441 ops/s
# Warmup Iteration  13: 891876.092 ops/s
# Warmup Iteration  14: 925901.740 ops/s
# Warmup Iteration  15: 907440.337 ops/s
# Warmup Iteration  16: 932772.209 ops/s
# Warmup Iteration  17: 975516.354 ops/s
# Warmup Iteration  18: 973661.344 ops/s
# Warmup Iteration  19: 952836.554 ops/s
# Warmup Iteration  20: 983812.731 ops/s
# Warmup Iteration  21: 993038.774 ops/s
# Warmup Iteration  22: 981405.402 ops/s
# Warmup Iteration  23: 977514.313 ops/s
# Warmup Iteration  24: 992276.446 ops/s
# Warmup Iteration  25: 1040152.458 ops/s
# Warmup Iteration  26: 1044568.120 ops/s
# Warmup Iteration  27: 973563.963 ops/s
# Warmup Iteration  28: 983211.284 ops/s
# Warmup Iteration  29: 985662.712 ops/s
# Warmup Iteration  30: 982208.287 ops/s
Iteration   1: 999545.849 ops/s
Iteration   2: 964329.794 ops/s
Iteration   3: 990016.854 ops/s
Iteration   4: 1000013.860 ops/s
Iteration   5: 1000451.471 ops/s
Iteration   6: 1008965.942 ops/s
Iteration   7: 975254.657 ops/s
Iteration   8: 970492.117 ops/s
Iteration   9: 945532.657 ops/s
Iteration  10: 961099.617 ops/s
Iteration  11: 967805.704 ops/s
Iteration  12: 1008777.480 ops/s
Iteration  13: 1011295.285 ops/s
Iteration  14: 982011.303 ops/s
Iteration  15: 965442.514 ops/s
Iteration  16: 954562.597 ops/s
Iteration  17: 978390.799 ops/s
Iteration  18: 987253.520 ops/s
Iteration  19: 972550.884 ops/s
Iteration  20: 1005575.657 ops/s
Iteration  21: 981791.118 ops/s
Iteration  22: 978782.546 ops/s
Iteration  23: 986842.092 ops/s
Iteration  24: 988128.223 ops/s
Iteration  25: 978207.567 ops/s
Iteration  26: 1038101.585 ops/s
Iteration  27: 1000193.195 ops/s
Iteration  28: 990331.324 ops/s
Iteration  29: 977352.726 ops/s
Iteration  30: 951338.632 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_retainAll":
  984014.586 ±(99.9%) 13581.651 ops/s [Average]
  (min, avg, max) = (945532.657, 984014.586, 1038101.585), stdev = 20328.378
  CI (99.9%): [970432.934, 997596.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_retainAll  thrpt   30  984014.586 ± 13581.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4653958.737 ops/s
# Warmup Iteration   2: 10970314.788 ops/s
# Warmup Iteration   3: 11120885.857 ops/s
# Warmup Iteration   4: 9161334.814 ops/s
# Warmup Iteration   5: 10931644.104 ops/s
# Warmup Iteration   6: 10807542.490 ops/s
# Warmup Iteration   7: 10875680.811 ops/s
# Warmup Iteration   8: 10896268.728 ops/s
# Warmup Iteration   9: 10961565.973 ops/s
# Warmup Iteration  10: 10969152.557 ops/s
# Warmup Iteration  11: 10894561.676 ops/s
# Warmup Iteration  12: 10873950.430 ops/s
# Warmup Iteration  13: 10707022.919 ops/s
# Warmup Iteration  14: 10752396.163 ops/s
# Warmup Iteration  15: 11071482.892 ops/s
# Warmup Iteration  16: 10657935.637 ops/s
# Warmup Iteration  17: 11114143.927 ops/s
# Warmup Iteration  18: 11028915.983 ops/s
# Warmup Iteration  19: 10775052.469 ops/s
# Warmup Iteration  20: 10939358.495 ops/s
# Warmup Iteration  21: 10770762.663 ops/s
# Warmup Iteration  22: 10827324.231 ops/s
# Warmup Iteration  23: 10693599.336 ops/s
# Warmup Iteration  24: 10887770.876 ops/s
# Warmup Iteration  25: 11006947.778 ops/s
# Warmup Iteration  26: 10602402.281 ops/s
# Warmup Iteration  27: 10895036.035 ops/s
# Warmup Iteration  28: 11037593.323 ops/s
# Warmup Iteration  29: 11269414.005 ops/s
# Warmup Iteration  30: 10807610.110 ops/s
Iteration   1: 10895908.542 ops/s
Iteration   2: 10958850.056 ops/s
Iteration   3: 10747630.499 ops/s
Iteration   4: 11061159.968 ops/s
Iteration   5: 10989776.226 ops/s
Iteration   6: 10951804.564 ops/s
Iteration   7: 10775154.979 ops/s
Iteration   8: 10793672.953 ops/s
Iteration   9: 10413248.398 ops/s
Iteration  10: 10943515.477 ops/s
Iteration  11: 10842745.864 ops/s
Iteration  12: 10795494.330 ops/s
Iteration  13: 10958716.157 ops/s
Iteration  14: 10901418.351 ops/s
Iteration  15: 11086050.928 ops/s
Iteration  16: 11042277.417 ops/s
Iteration  17: 10899941.515 ops/s
Iteration  18: 11034381.638 ops/s
Iteration  19: 10920344.384 ops/s
Iteration  20: 10949984.880 ops/s
Iteration  21: 10524293.659 ops/s
Iteration  22: 11006563.301 ops/s
Iteration  23: 10961144.120 ops/s
Iteration  24: 10769039.983 ops/s
Iteration  25: 11041219.123 ops/s
Iteration  26: 11135347.215 ops/s
Iteration  27: 10702589.619 ops/s
Iteration  28: 10879402.002 ops/s
Iteration  29: 10816674.250 ops/s
Iteration  30: 10872962.263 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_reverseForEach":
  10889043.755 ±(99.9%) 104892.340 ops/s [Average]
  (min, avg, max) = (10413248.398, 10889043.755, 11135347.215), stdev = 156997.928
  CI (99.9%): [10784151.416, 10993936.095] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_reverseForEach  thrpt   30  10889043.755 ± 104892.340  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3622143.226 ops/s
# Warmup Iteration   2: 6916253.417 ops/s
# Warmup Iteration   3: 7310411.123 ops/s
# Warmup Iteration   4: 7332244.016 ops/s
# Warmup Iteration   5: 6085121.975 ops/s
# Warmup Iteration   6: 7257143.313 ops/s
# Warmup Iteration   7: 7381457.098 ops/s
# Warmup Iteration   8: 7143225.346 ops/s
# Warmup Iteration   9: 7170345.672 ops/s
# Warmup Iteration  10: 7271795.872 ops/s
# Warmup Iteration  11: 7083069.581 ops/s
# Warmup Iteration  12: 7404716.119 ops/s
# Warmup Iteration  13: 7164454.166 ops/s
# Warmup Iteration  14: 7427842.988 ops/s
# Warmup Iteration  15: 7344688.762 ops/s
# Warmup Iteration  16: 7336495.586 ops/s
# Warmup Iteration  17: 7346232.615 ops/s
# Warmup Iteration  18: 7378772.521 ops/s
# Warmup Iteration  19: 7275598.861 ops/s
# Warmup Iteration  20: 7481737.551 ops/s
# Warmup Iteration  21: 7223275.903 ops/s
# Warmup Iteration  22: 7511179.335 ops/s
# Warmup Iteration  23: 7627530.618 ops/s
# Warmup Iteration  24: 7324372.267 ops/s
# Warmup Iteration  25: 7170694.074 ops/s
# Warmup Iteration  26: 7201646.675 ops/s
# Warmup Iteration  27: 7200530.857 ops/s
# Warmup Iteration  28: 7281276.200 ops/s
# Warmup Iteration  29: 7164793.555 ops/s
# Warmup Iteration  30: 6795584.832 ops/s
Iteration   1: 7237655.776 ops/s
Iteration   2: 7509920.276 ops/s
Iteration   3: 7202716.221 ops/s
Iteration   4: 7308624.974 ops/s
Iteration   5: 7454092.923 ops/s
Iteration   6: 7361816.238 ops/s
Iteration   7: 7060617.180 ops/s
Iteration   8: 7150712.282 ops/s
Iteration   9: 7090209.502 ops/s
Iteration  10: 7441128.080 ops/s
Iteration  11: 7214045.592 ops/s
Iteration  12: 7274730.565 ops/s
Iteration  13: 7359762.580 ops/s
Iteration  14: 7200695.199 ops/s
Iteration  15: 7309727.396 ops/s
Iteration  16: 7065550.091 ops/s
Iteration  17: 7394519.631 ops/s
Iteration  18: 7262035.414 ops/s
Iteration  19: 7340654.315 ops/s
Iteration  20: 7219003.637 ops/s
Iteration  21: 7184666.763 ops/s
Iteration  22: 7176787.324 ops/s
Iteration  23: 6883150.983 ops/s
Iteration  24: 7439376.265 ops/s
Iteration  25: 7413214.321 ops/s
Iteration  26: 7155591.144 ops/s
Iteration  27: 7279999.782 ops/s
Iteration  28: 7256011.300 ops/s
Iteration  29: 7551555.336 ops/s
Iteration  30: 7583219.026 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_reverseForEachWithIndex":
  7279393.004 ±(99.9%) 104695.322 ops/s [Average]
  (min, avg, max) = (6883150.983, 7279393.004, 7583219.026), stdev = 156703.042
  CI (99.9%): [7174697.682, 7384088.326] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  7279393.004 ± 104695.322  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3269609.601 ops/s
# Warmup Iteration   2: 7618583.330 ops/s
# Warmup Iteration   3: 7828258.481 ops/s
# Warmup Iteration   4: 6590590.304 ops/s
# Warmup Iteration   5: 7517761.829 ops/s
# Warmup Iteration   6: 7563225.501 ops/s
# Warmup Iteration   7: 7774026.360 ops/s
# Warmup Iteration   8: 7718868.413 ops/s
# Warmup Iteration   9: 7597771.075 ops/s
# Warmup Iteration  10: 7649873.414 ops/s
# Warmup Iteration  11: 7582998.053 ops/s
# Warmup Iteration  12: 7716063.323 ops/s
# Warmup Iteration  13: 7745790.160 ops/s
# Warmup Iteration  14: 7655579.345 ops/s
# Warmup Iteration  15: 7559877.706 ops/s
# Warmup Iteration  16: 7772505.850 ops/s
# Warmup Iteration  17: 7639676.069 ops/s
# Warmup Iteration  18: 7743300.903 ops/s
# Warmup Iteration  19: 7686094.531 ops/s
# Warmup Iteration  20: 7714386.019 ops/s
# Warmup Iteration  21: 7863133.749 ops/s
# Warmup Iteration  22: 7577674.349 ops/s
# Warmup Iteration  23: 7742432.742 ops/s
# Warmup Iteration  24: 7642728.587 ops/s
# Warmup Iteration  25: 7730252.197 ops/s
# Warmup Iteration  26: 7631790.995 ops/s
# Warmup Iteration  27: 7637127.760 ops/s
# Warmup Iteration  28: 7420170.563 ops/s
# Warmup Iteration  29: 7699557.383 ops/s
# Warmup Iteration  30: 7959829.290 ops/s
Iteration   1: 7466353.616 ops/s
Iteration   2: 7791182.620 ops/s
Iteration   3: 7473270.931 ops/s
Iteration   4: 7656675.885 ops/s
Iteration   5: 7831114.594 ops/s
Iteration   6: 7661490.395 ops/s
Iteration   7: 7544829.474 ops/s
Iteration   8: 7665599.669 ops/s
Iteration   9: 7637759.602 ops/s
Iteration  10: 7725896.266 ops/s
Iteration  11: 7723887.669 ops/s
Iteration  12: 7741918.210 ops/s
Iteration  13: 7443013.914 ops/s
Iteration  14: 7560782.912 ops/s
Iteration  15: 7748649.509 ops/s
Iteration  16: 7660796.078 ops/s
Iteration  17: 7509663.400 ops/s
Iteration  18: 7660438.173 ops/s
Iteration  19: 7808961.666 ops/s
Iteration  20: 7938104.062 ops/s
Iteration  21: 7520762.946 ops/s
Iteration  22: 7533362.879 ops/s
Iteration  23: 7701206.987 ops/s
Iteration  24: 7595456.361 ops/s
Iteration  25: 7496092.028 ops/s
Iteration  26: 7688272.008 ops/s
Iteration  27: 7707673.185 ops/s
Iteration  28: 7838425.139 ops/s
Iteration  29: 7792189.567 ops/s
Iteration  30: 7987581.626 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_select":
  7670380.379 ±(99.9%) 92786.139 ops/s [Average]
  (min, avg, max) = (7443013.914, 7670380.379, 7987581.626), stdev = 138877.935
  CI (99.9%): [7577594.240, 7763166.518] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_select  thrpt   30  7670380.379 ± 92786.139  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4686178.929 ops/s
# Warmup Iteration   2: 7319810.898 ops/s
# Warmup Iteration   3: 7955632.546 ops/s
# Warmup Iteration   4: 8180316.899 ops/s
# Warmup Iteration   5: 7905600.909 ops/s
# Warmup Iteration   6: 7744394.013 ops/s
# Warmup Iteration   7: 6503237.263 ops/s
# Warmup Iteration   8: 7835950.389 ops/s
# Warmup Iteration   9: 7802093.139 ops/s
# Warmup Iteration  10: 7798024.096 ops/s
# Warmup Iteration  11: 7696317.966 ops/s
# Warmup Iteration  12: 7886048.418 ops/s
# Warmup Iteration  13: 7735677.860 ops/s
# Warmup Iteration  14: 7671591.635 ops/s
# Warmup Iteration  15: 8165168.350 ops/s
# Warmup Iteration  16: 7758720.367 ops/s
# Warmup Iteration  17: 7789661.170 ops/s
# Warmup Iteration  18: 7715551.994 ops/s
# Warmup Iteration  19: 7941831.362 ops/s
# Warmup Iteration  20: 7873221.205 ops/s
# Warmup Iteration  21: 7957588.713 ops/s
# Warmup Iteration  22: 7671346.559 ops/s
# Warmup Iteration  23: 7916194.196 ops/s
# Warmup Iteration  24: 7738871.064 ops/s
# Warmup Iteration  25: 7833940.632 ops/s
# Warmup Iteration  26: 7684657.262 ops/s
# Warmup Iteration  27: 7847947.587 ops/s
# Warmup Iteration  28: 7902133.115 ops/s
# Warmup Iteration  29: 7962374.156 ops/s
# Warmup Iteration  30: 8073208.386 ops/s
Iteration   1: 7720885.906 ops/s
Iteration   2: 7646872.544 ops/s
Iteration   3: 7989352.215 ops/s
Iteration   4: 7894489.104 ops/s
Iteration   5: 8211147.732 ops/s
Iteration   6: 8306230.366 ops/s
Iteration   7: 7990228.754 ops/s
Iteration   8: 8230087.464 ops/s
Iteration   9: 7911971.607 ops/s
Iteration  10: 7774017.198 ops/s
Iteration  11: 7986138.981 ops/s
Iteration  12: 7926380.071 ops/s
Iteration  13: 7599757.594 ops/s
Iteration  14: 7894845.669 ops/s
Iteration  15: 7879402.374 ops/s
Iteration  16: 7789794.550 ops/s
Iteration  17: 7806553.506 ops/s
Iteration  18: 7941669.533 ops/s
Iteration  19: 7709235.218 ops/s
Iteration  20: 7458720.967 ops/s
Iteration  21: 8065853.842 ops/s
Iteration  22: 8280753.002 ops/s
Iteration  23: 7973866.626 ops/s
Iteration  24: 7953145.895 ops/s
Iteration  25: 8043592.628 ops/s
Iteration  26: 7739310.202 ops/s
Iteration  27: 7754614.587 ops/s
Iteration  28: 7943072.435 ops/s
Iteration  29: 7760735.694 ops/s
Iteration  30: 8000094.849 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectInstancesOf":
  7906094.037 ±(99.9%) 131886.687 ops/s [Average]
  (min, avg, max) = (7458720.967, 7906094.037, 8306230.366), stdev = 197401.799
  CI (99.9%): [7774207.350, 8037980.724] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  7906094.037 ± 131886.687  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2186517.652 ops/s
# Warmup Iteration   2: 4504658.530 ops/s
# Warmup Iteration   3: 4735554.550 ops/s
# Warmup Iteration   4: 4811594.532 ops/s
# Warmup Iteration   5: 3868762.982 ops/s
# Warmup Iteration   6: 4978421.367 ops/s
# Warmup Iteration   7: 4870674.196 ops/s
# Warmup Iteration   8: 4751690.907 ops/s
# Warmup Iteration   9: 4621951.431 ops/s
# Warmup Iteration  10: 4742523.429 ops/s
# Warmup Iteration  11: 4758872.139 ops/s
# Warmup Iteration  12: 4853022.821 ops/s
# Warmup Iteration  13: 4802210.629 ops/s
# Warmup Iteration  14: 4817513.095 ops/s
# Warmup Iteration  15: 4851303.146 ops/s
# Warmup Iteration  16: 4821801.371 ops/s
# Warmup Iteration  17: 4797902.660 ops/s
# Warmup Iteration  18: 5060965.870 ops/s
# Warmup Iteration  19: 4925084.654 ops/s
# Warmup Iteration  20: 4838977.515 ops/s
# Warmup Iteration  21: 4832345.137 ops/s
# Warmup Iteration  22: 4739303.045 ops/s
# Warmup Iteration  23: 4828128.330 ops/s
# Warmup Iteration  24: 4865087.028 ops/s
# Warmup Iteration  25: 4840620.521 ops/s
# Warmup Iteration  26: 4821302.582 ops/s
# Warmup Iteration  27: 4664277.113 ops/s
# Warmup Iteration  28: 4784260.158 ops/s
# Warmup Iteration  29: 4707721.309 ops/s
# Warmup Iteration  30: 4788968.815 ops/s
Iteration   1: 4690288.881 ops/s
Iteration   2: 4987647.311 ops/s
Iteration   3: 4969558.209 ops/s
Iteration   4: 4672335.948 ops/s
Iteration   5: 4641661.109 ops/s
Iteration   6: 5056770.851 ops/s
Iteration   7: 5010310.943 ops/s
Iteration   8: 4743560.788 ops/s
Iteration   9: 5067840.215 ops/s
Iteration  10: 5064127.341 ops/s
Iteration  11: 4914122.496 ops/s
Iteration  12: 4781764.509 ops/s
Iteration  13: 4841413.876 ops/s
Iteration  14: 4766201.584 ops/s
Iteration  15: 4735191.302 ops/s
Iteration  16: 4737219.403 ops/s
Iteration  17: 4876581.436 ops/s
Iteration  18: 4537123.686 ops/s
Iteration  19: 4754603.832 ops/s
Iteration  20: 5012696.007 ops/s
Iteration  21: 4750300.998 ops/s
Iteration  22: 4624446.969 ops/s
Iteration  23: 4769115.842 ops/s
Iteration  24: 5059816.480 ops/s
Iteration  25: 4765981.059 ops/s
Iteration  26: 4950751.170 ops/s
Iteration  27: 4658700.997 ops/s
Iteration  28: 5076335.103 ops/s
Iteration  29: 4895432.004 ops/s
Iteration  30: 4785215.775 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectWith":
  4839903.871 ±(99.9%) 103975.001 ops/s [Average]
  (min, avg, max) = (4537123.686, 4839903.871, 5076335.103), stdev = 155624.898
  CI (99.9%): [4735928.870, 4943878.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_selectWith  thrpt   30  4839903.871 ± 103975.001  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3163275.771 ops/s
# Warmup Iteration   2: 8152823.409 ops/s
# Warmup Iteration   3: 8894917.586 ops/s
# Warmup Iteration   4: 8744034.821 ops/s
# Warmup Iteration   5: 7313791.381 ops/s
# Warmup Iteration   6: 8781266.444 ops/s
# Warmup Iteration   7: 8935085.416 ops/s
# Warmup Iteration   8: 8815801.200 ops/s
# Warmup Iteration   9: 8879780.484 ops/s
# Warmup Iteration  10: 8629188.070 ops/s
# Warmup Iteration  11: 8752625.224 ops/s
# Warmup Iteration  12: 8810850.974 ops/s
# Warmup Iteration  13: 9000476.526 ops/s
# Warmup Iteration  14: 8865248.201 ops/s
# Warmup Iteration  15: 8805565.347 ops/s
# Warmup Iteration  16: 8917222.638 ops/s
# Warmup Iteration  17: 8959265.642 ops/s
# Warmup Iteration  18: 8660485.606 ops/s
# Warmup Iteration  19: 8625921.783 ops/s
# Warmup Iteration  20: 8802948.057 ops/s
# Warmup Iteration  21: 8984254.869 ops/s
# Warmup Iteration  22: 8814997.178 ops/s
# Warmup Iteration  23: 8868313.711 ops/s
# Warmup Iteration  24: 9100031.168 ops/s
# Warmup Iteration  25: 8896593.760 ops/s
# Warmup Iteration  26: 9261393.867 ops/s
# Warmup Iteration  27: 9059641.177 ops/s
# Warmup Iteration  28: 8738404.960 ops/s
# Warmup Iteration  29: 8889348.762 ops/s
# Warmup Iteration  30: 8839205.653 ops/s
Iteration   1: 8924142.740 ops/s
Iteration   2: 9050165.476 ops/s
Iteration   3: 9123319.297 ops/s
Iteration   4: 9333614.493 ops/s
Iteration   5: 9355273.205 ops/s
Iteration   6: 9239439.996 ops/s
Iteration   7: 8810964.761 ops/s
Iteration   8: 8665831.650 ops/s
Iteration   9: 8923969.221 ops/s
Iteration  10: 8727269.982 ops/s
Iteration  11: 8907191.566 ops/s
Iteration  12: 8771839.768 ops/s
Iteration  13: 9099948.508 ops/s
Iteration  14: 9266454.195 ops/s
Iteration  15: 9053476.696 ops/s
Iteration  16: 9157172.713 ops/s
Iteration  17: 8907107.094 ops/s
Iteration  18: 8924494.701 ops/s
Iteration  19: 8756115.020 ops/s
Iteration  20: 8992820.929 ops/s
Iteration  21: 8892958.813 ops/s
Iteration  22: 8768989.589 ops/s
Iteration  23: 8777115.183 ops/s
Iteration  24: 8719609.138 ops/s
Iteration  25: 8927587.748 ops/s
Iteration  26: 8988389.825 ops/s
Iteration  27: 9074136.133 ops/s
Iteration  28: 8983987.974 ops/s
Iteration  29: 8727210.453 ops/s
Iteration  30: 9060596.190 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectWithIndex":
  8963706.435 ±(99.9%) 126022.411 ops/s [Average]
  (min, avg, max) = (8665831.650, 8963706.435, 9355273.205), stdev = 188624.426
  CI (99.9%): [8837684.025, 9089728.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  8963706.435 ± 126022.411  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2324181.104 ops/s
# Warmup Iteration   2: 6646188.427 ops/s
# Warmup Iteration   3: 6541818.131 ops/s
# Warmup Iteration   4: 5500674.947 ops/s
# Warmup Iteration   5: 6670948.414 ops/s
# Warmup Iteration   6: 6633270.381 ops/s
# Warmup Iteration   7: 6587398.198 ops/s
# Warmup Iteration   8: 6452518.513 ops/s
# Warmup Iteration   9: 6561271.729 ops/s
# Warmup Iteration  10: 6671149.070 ops/s
# Warmup Iteration  11: 6533712.582 ops/s
# Warmup Iteration  12: 6542835.400 ops/s
# Warmup Iteration  13: 6706635.304 ops/s
# Warmup Iteration  14: 6621199.768 ops/s
# Warmup Iteration  15: 6593734.154 ops/s
# Warmup Iteration  16: 6563060.818 ops/s
# Warmup Iteration  17: 6649115.822 ops/s
# Warmup Iteration  18: 6597644.651 ops/s
# Warmup Iteration  19: 6664483.696 ops/s
# Warmup Iteration  20: 6714725.664 ops/s
# Warmup Iteration  21: 6699721.911 ops/s
# Warmup Iteration  22: 6589368.673 ops/s
# Warmup Iteration  23: 6422868.082 ops/s
# Warmup Iteration  24: 6673056.513 ops/s
# Warmup Iteration  25: 6589840.861 ops/s
# Warmup Iteration  26: 6475727.036 ops/s
# Warmup Iteration  27: 6572359.004 ops/s
# Warmup Iteration  28: 6717881.672 ops/s
# Warmup Iteration  29: 6621546.315 ops/s
# Warmup Iteration  30: 6716290.360 ops/s
Iteration   1: 6611336.723 ops/s
Iteration   2: 6476195.897 ops/s
Iteration   3: 6493835.414 ops/s
Iteration   4: 6882488.628 ops/s
Iteration   5: 6468370.470 ops/s
Iteration   6: 6408748.860 ops/s
Iteration   7: 6342074.246 ops/s
Iteration   8: 6345851.744 ops/s
Iteration   9: 6585654.791 ops/s
Iteration  10: 6433055.211 ops/s
Iteration  11: 6548283.335 ops/s
Iteration  12: 6851077.709 ops/s
Iteration  13: 6526636.889 ops/s
Iteration  14: 6423309.175 ops/s
Iteration  15: 6237437.180 ops/s
Iteration  16: 6320123.102 ops/s
Iteration  17: 6572726.914 ops/s
Iteration  18: 6585121.385 ops/s
Iteration  19: 6559050.818 ops/s
Iteration  20: 6612999.260 ops/s
Iteration  21: 6542504.169 ops/s
Iteration  22: 6594986.316 ops/s
Iteration  23: 6603357.805 ops/s
Iteration  24: 6705227.755 ops/s
Iteration  25: 6664331.753 ops/s
Iteration  26: 6721740.819 ops/s
Iteration  27: 6650388.525 ops/s
Iteration  28: 6583743.387 ops/s
Iteration  29: 6456736.481 ops/s
Iteration  30: 6571212.806 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  6545953.586 ±(99.9%) 96455.137 ops/s [Average]
  (min, avg, max) = (6237437.180, 6545953.586, 6882488.628), stdev = 144369.518
  CI (99.9%): [6449498.449, 6642408.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  6545953.586 ± 96455.137  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2634825.611 ops/s
# Warmup Iteration   2: 6059725.953 ops/s
# Warmup Iteration   3: 6157007.018 ops/s
# Warmup Iteration   4: 5380510.958 ops/s
# Warmup Iteration   5: 6535474.525 ops/s
# Warmup Iteration   6: 6196418.397 ops/s
# Warmup Iteration   7: 6217666.208 ops/s
# Warmup Iteration   8: 6106289.249 ops/s
# Warmup Iteration   9: 6192940.569 ops/s
# Warmup Iteration  10: 6190332.649 ops/s
# Warmup Iteration  11: 6101363.558 ops/s
# Warmup Iteration  12: 6133064.241 ops/s
# Warmup Iteration  13: 6147383.665 ops/s
# Warmup Iteration  14: 6268258.137 ops/s
# Warmup Iteration  15: 6177800.467 ops/s
# Warmup Iteration  16: 6261255.150 ops/s
# Warmup Iteration  17: 6428229.849 ops/s
# Warmup Iteration  18: 6254713.189 ops/s
# Warmup Iteration  19: 6254586.943 ops/s
# Warmup Iteration  20: 6134912.744 ops/s
# Warmup Iteration  21: 6190903.067 ops/s
# Warmup Iteration  22: 6178706.339 ops/s
# Warmup Iteration  23: 6042664.733 ops/s
# Warmup Iteration  24: 6293399.512 ops/s
# Warmup Iteration  25: 6063139.615 ops/s
# Warmup Iteration  26: 6041686.359 ops/s
# Warmup Iteration  27: 6073830.533 ops/s
# Warmup Iteration  28: 6343228.094 ops/s
# Warmup Iteration  29: 6019241.686 ops/s
# Warmup Iteration  30: 6234170.388 ops/s
Iteration   1: 6007086.676 ops/s
Iteration   2: 6320201.700 ops/s
Iteration   3: 6144488.774 ops/s
Iteration   4: 6170592.999 ops/s
Iteration   5: 5977739.411 ops/s
Iteration   6: 6084475.841 ops/s
Iteration   7: 6267333.971 ops/s
Iteration   8: 6076186.938 ops/s
Iteration   9: 6154901.288 ops/s
Iteration  10: 6216645.305 ops/s
Iteration  11: 6026878.999 ops/s
Iteration  12: 6111662.924 ops/s
Iteration  13: 6211146.299 ops/s
Iteration  14: 6016406.405 ops/s
Iteration  15: 6123313.766 ops/s
Iteration  16: 5916385.062 ops/s
Iteration  17: 6111603.991 ops/s
Iteration  18: 6231004.656 ops/s
Iteration  19: 6471814.094 ops/s
Iteration  20: 6120466.804 ops/s
Iteration  21: 6095921.395 ops/s
Iteration  22: 6104835.754 ops/s
Iteration  23: 5895193.588 ops/s
Iteration  24: 6053787.611 ops/s
Iteration  25: 6227284.804 ops/s
Iteration  26: 5974765.759 ops/s
Iteration  27: 6420929.599 ops/s
Iteration  28: 6356375.646 ops/s
Iteration  29: 6098862.519 ops/s
Iteration  30: 6030966.739 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_selectWith_target":
  6133975.311 ±(99.9%) 92374.398 ops/s [Average]
  (min, avg, max) = (5895193.588, 6133975.311, 6471814.094), stdev = 138261.661
  CI (99.9%): [6041600.912, 6226349.709] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_selectWith_target  thrpt   30  6133975.311 ± 92374.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_select_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_select_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5215296.408 ops/s
# Warmup Iteration   2: 12027141.345 ops/s
# Warmup Iteration   3: 11428700.666 ops/s
# Warmup Iteration   4: 10863853.920 ops/s
# Warmup Iteration   5: 11998598.364 ops/s
# Warmup Iteration   6: 11979224.213 ops/s
# Warmup Iteration   7: 12078215.797 ops/s
# Warmup Iteration   8: 12096937.648 ops/s
# Warmup Iteration   9: 12042668.849 ops/s
# Warmup Iteration  10: 12037167.361 ops/s
# Warmup Iteration  11: 12266542.131 ops/s
# Warmup Iteration  12: 12185736.785 ops/s
# Warmup Iteration  13: 12254330.085 ops/s
# Warmup Iteration  14: 12121596.012 ops/s
# Warmup Iteration  15: 12115074.298 ops/s
# Warmup Iteration  16: 12327037.787 ops/s
# Warmup Iteration  17: 12289648.504 ops/s
# Warmup Iteration  18: 12074642.680 ops/s
# Warmup Iteration  19: 12218554.393 ops/s
# Warmup Iteration  20: 12157325.658 ops/s
# Warmup Iteration  21: 12143491.118 ops/s
# Warmup Iteration  22: 11849731.855 ops/s
# Warmup Iteration  23: 11930495.956 ops/s
# Warmup Iteration  24: 11897012.052 ops/s
# Warmup Iteration  25: 11963357.606 ops/s
# Warmup Iteration  26: 11982736.494 ops/s
# Warmup Iteration  27: 12137548.701 ops/s
# Warmup Iteration  28: 11933885.533 ops/s
# Warmup Iteration  29: 11901535.964 ops/s
# Warmup Iteration  30: 11792676.834 ops/s
Iteration   1: 11717238.924 ops/s
Iteration   2: 12031550.522 ops/s
Iteration   3: 12170475.415 ops/s
Iteration   4: 12024104.755 ops/s
Iteration   5: 12661522.618 ops/s
Iteration   6: 12537269.578 ops/s
Iteration   7: 12699599.734 ops/s
Iteration   8: 12371892.347 ops/s
Iteration   9: 12137230.190 ops/s
Iteration  10: 12097364.479 ops/s
Iteration  11: 12157486.978 ops/s
Iteration  12: 12168846.206 ops/s
Iteration  13: 12013739.798 ops/s
Iteration  14: 11835551.797 ops/s
Iteration  15: 11829163.658 ops/s
Iteration  16: 11706127.577 ops/s
Iteration  17: 11921944.695 ops/s
Iteration  18: 12142887.503 ops/s
Iteration  19: 12146142.287 ops/s
Iteration  20: 12157919.956 ops/s
Iteration  21: 12000124.675 ops/s
Iteration  22: 12116688.414 ops/s
Iteration  23: 12252118.380 ops/s
Iteration  24: 12402039.585 ops/s
Iteration  25: 12467728.387 ops/s
Iteration  26: 12177187.949 ops/s
Iteration  27: 12244311.117 ops/s
Iteration  28: 12332518.178 ops/s
Iteration  29: 12170956.529 ops/s
Iteration  30: 12515989.642 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_select_target":
  12173590.729 ±(99.9%) 167028.693 ops/s [Average]
  (min, avg, max) = (11706127.577, 12173590.729, 12699599.734), stdev = 250000.703
  CI (99.9%): [12006562.036, 12340619.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_select_target  thrpt   30  12173590.729 ± 167028.693  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 603743.414 ops/s
# Warmup Iteration   2: 720837.990 ops/s
# Warmup Iteration   3: 898339.581 ops/s
# Warmup Iteration   4: 915561.476 ops/s
# Warmup Iteration   5: 903181.166 ops/s
# Warmup Iteration   6: 898268.693 ops/s
# Warmup Iteration   7: 911215.684 ops/s
# Warmup Iteration   8: 905030.558 ops/s
# Warmup Iteration   9: 802467.774 ops/s
# Warmup Iteration  10: 826503.606 ops/s
# Warmup Iteration  11: 901533.348 ops/s
# Warmup Iteration  12: 900199.739 ops/s
# Warmup Iteration  13: 875817.766 ops/s
# Warmup Iteration  14: 894874.335 ops/s
# Warmup Iteration  15: 885812.429 ops/s
# Warmup Iteration  16: 885256.656 ops/s
# Warmup Iteration  17: 963548.895 ops/s
# Warmup Iteration  18: 958841.689 ops/s
# Warmup Iteration  19: 992779.806 ops/s
# Warmup Iteration  20: 960573.348 ops/s
# Warmup Iteration  21: 962814.896 ops/s
# Warmup Iteration  22: 957784.755 ops/s
# Warmup Iteration  23: 939739.704 ops/s
# Warmup Iteration  24: 950989.272 ops/s
# Warmup Iteration  25: 951884.185 ops/s
# Warmup Iteration  26: 956008.542 ops/s
# Warmup Iteration  27: 971890.802 ops/s
# Warmup Iteration  28: 966418.099 ops/s
# Warmup Iteration  29: 954733.836 ops/s
# Warmup Iteration  30: 923872.175 ops/s
Iteration   1: 967268.608 ops/s
Iteration   2: 960072.519 ops/s
Iteration   3: 929608.509 ops/s
Iteration   4: 942866.159 ops/s
Iteration   5: 939289.761 ops/s
Iteration   6: 945080.539 ops/s
Iteration   7: 944768.474 ops/s
Iteration   8: 943748.030 ops/s
Iteration   9: 951212.341 ops/s
Iteration  10: 925928.837 ops/s
Iteration  11: 937108.230 ops/s
Iteration  12: 936413.875 ops/s
Iteration  13: 951474.140 ops/s
Iteration  14: 953556.279 ops/s
Iteration  15: 928289.304 ops/s
Iteration  16: 941240.744 ops/s
Iteration  17: 970610.093 ops/s
Iteration  18: 946542.894 ops/s
Iteration  19: 927797.243 ops/s
Iteration  20: 951763.891 ops/s
Iteration  21: 955004.382 ops/s
Iteration  22: 944342.705 ops/s
Iteration  23: 940781.524 ops/s
Iteration  24: 952395.735 ops/s
Iteration  25: 945369.179 ops/s
Iteration  26: 953851.769 ops/s
Iteration  27: 947105.872 ops/s
Iteration  28: 953472.963 ops/s
Iteration  29: 933976.501 ops/s
Iteration  30: 931205.407 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_set":
  945071.550 ±(99.9%) 7428.289 ops/s [Average]
  (min, avg, max) = (925928.837, 945071.550, 970610.093), stdev = 11118.314
  CI (99.9%): [937643.261, 952499.839] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_set  thrpt   30  945071.550 ± 7428.289  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696694.837 ops/s
# Warmup Iteration   2: 742433.987 ops/s
# Warmup Iteration   3: 933146.100 ops/s
# Warmup Iteration   4: 982751.669 ops/s
# Warmup Iteration   5: 942991.991 ops/s
# Warmup Iteration   6: 955275.349 ops/s
# Warmup Iteration   7: 941218.943 ops/s
# Warmup Iteration   8: 933206.532 ops/s
# Warmup Iteration   9: 939105.954 ops/s
# Warmup Iteration  10: 963936.455 ops/s
# Warmup Iteration  11: 969250.101 ops/s
# Warmup Iteration  12: 826671.486 ops/s
# Warmup Iteration  13: 921130.899 ops/s
# Warmup Iteration  14: 947177.572 ops/s
# Warmup Iteration  15: 929830.353 ops/s
# Warmup Iteration  16: 976072.635 ops/s
# Warmup Iteration  17: 1012044.073 ops/s
# Warmup Iteration  18: 997413.517 ops/s
# Warmup Iteration  19: 994675.424 ops/s
# Warmup Iteration  20: 1012154.481 ops/s
# Warmup Iteration  21: 993152.983 ops/s
# Warmup Iteration  22: 991254.046 ops/s
# Warmup Iteration  23: 1023419.725 ops/s
# Warmup Iteration  24: 1023678.669 ops/s
# Warmup Iteration  25: 978784.049 ops/s
# Warmup Iteration  26: 1015195.409 ops/s
# Warmup Iteration  27: 1000946.385 ops/s
# Warmup Iteration  28: 991461.271 ops/s
# Warmup Iteration  29: 1006372.117 ops/s
# Warmup Iteration  30: 995490.841 ops/s
Iteration   1: 992539.798 ops/s
Iteration   2: 989109.120 ops/s
Iteration   3: 1002668.817 ops/s
Iteration   4: 1001273.837 ops/s
Iteration   5: 988172.555 ops/s
Iteration   6: 997745.885 ops/s
Iteration   7: 1002524.934 ops/s
Iteration   8: 1022668.310 ops/s
Iteration   9: 1003754.062 ops/s
Iteration  10: 1036545.290 ops/s
Iteration  11: 1015103.431 ops/s
Iteration  12: 1016774.374 ops/s
Iteration  13: 1015542.069 ops/s
Iteration  14: 1023141.875 ops/s
Iteration  15: 998537.868 ops/s
Iteration  16: 1010371.439 ops/s
Iteration  17: 1011931.289 ops/s
Iteration  18: 994224.063 ops/s
Iteration  19: 1013752.073 ops/s
Iteration  20: 1016727.189 ops/s
Iteration  21: 994466.158 ops/s
Iteration  22: 1016225.747 ops/s
Iteration  23: 1019114.236 ops/s
Iteration  24: 1001750.482 ops/s
Iteration  25: 1012212.565 ops/s
Iteration  26: 1019523.962 ops/s
Iteration  27: 1020996.868 ops/s
Iteration  28: 1021041.370 ops/s
Iteration  29: 984427.968 ops/s
Iteration  30: 1001999.307 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sort":
  1008162.231 ±(99.9%) 8380.505 ops/s [Average]
  (min, avg, max) = (984427.968, 1008162.231, 1036545.290), stdev = 12543.546
  CI (99.9%): [999781.727, 1016542.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_sort  thrpt   30  1008162.231 ± 8380.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 197655.905 ops/s
# Warmup Iteration   2: 352554.572 ops/s
# Warmup Iteration   3: 457992.354 ops/s
# Warmup Iteration   4: 456400.649 ops/s
# Warmup Iteration   5: 453297.574 ops/s
# Warmup Iteration   6: 407366.019 ops/s
# Warmup Iteration   7: 418333.586 ops/s
# Warmup Iteration   8: 455894.462 ops/s
# Warmup Iteration   9: 454718.602 ops/s
# Warmup Iteration  10: 443110.181 ops/s
# Warmup Iteration  11: 452756.066 ops/s
# Warmup Iteration  12: 454264.756 ops/s
# Warmup Iteration  13: 450853.159 ops/s
# Warmup Iteration  14: 440044.250 ops/s
# Warmup Iteration  15: 462041.039 ops/s
# Warmup Iteration  16: 456696.250 ops/s
# Warmup Iteration  17: 461556.545 ops/s
# Warmup Iteration  18: 452178.045 ops/s
# Warmup Iteration  19: 459861.467 ops/s
# Warmup Iteration  20: 455916.928 ops/s
# Warmup Iteration  21: 459337.252 ops/s
# Warmup Iteration  22: 461847.675 ops/s
# Warmup Iteration  23: 457246.762 ops/s
# Warmup Iteration  24: 464979.194 ops/s
# Warmup Iteration  25: 458606.065 ops/s
# Warmup Iteration  26: 468746.986 ops/s
# Warmup Iteration  27: 465582.249 ops/s
# Warmup Iteration  28: 467854.360 ops/s
# Warmup Iteration  29: 464280.896 ops/s
# Warmup Iteration  30: 453451.013 ops/s
Iteration   1: 464650.129 ops/s
Iteration   2: 458547.020 ops/s
Iteration   3: 476905.913 ops/s
Iteration   4: 477692.073 ops/s
Iteration   5: 475544.397 ops/s
Iteration   6: 459522.762 ops/s
Iteration   7: 453795.843 ops/s
Iteration   8: 453850.683 ops/s
Iteration   9: 454824.524 ops/s
Iteration  10: 440666.764 ops/s
Iteration  11: 450124.197 ops/s
Iteration  12: 445284.865 ops/s
Iteration  13: 455432.329 ops/s
Iteration  14: 467213.403 ops/s
Iteration  15: 453864.078 ops/s
Iteration  16: 459437.046 ops/s
Iteration  17: 472766.175 ops/s
Iteration  18: 482259.106 ops/s
Iteration  19: 446985.870 ops/s
Iteration  20: 450182.131 ops/s
Iteration  21: 461359.804 ops/s
Iteration  22: 474518.699 ops/s
Iteration  23: 456337.791 ops/s
Iteration  24: 476315.024 ops/s
Iteration  25: 482281.539 ops/s
Iteration  26: 482752.738 ops/s
Iteration  27: 481085.219 ops/s
Iteration  28: 483157.234 ops/s
Iteration  29: 481746.364 ops/s
Iteration  30: 482279.053 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_stream":
  465379.426 ±(99.9%) 9013.978 ops/s [Average]
  (min, avg, max) = (440666.764, 465379.426, 483157.234), stdev = 13491.699
  CI (99.9%): [456365.448, 474393.403] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_stream  thrpt   30  465379.426 ± 9013.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20292464.903 ops/s
# Warmup Iteration   2: 36136377.785 ops/s
# Warmup Iteration   3: 36144290.484 ops/s
# Warmup Iteration   4: 37683409.587 ops/s
# Warmup Iteration   5: 38233007.731 ops/s
# Warmup Iteration   6: 38245614.351 ops/s
# Warmup Iteration   7: 38186658.711 ops/s
# Warmup Iteration   8: 39299571.339 ops/s
# Warmup Iteration   9: 39437115.217 ops/s
# Warmup Iteration  10: 39370893.281 ops/s
# Warmup Iteration  11: 38535453.699 ops/s
# Warmup Iteration  12: 38621914.031 ops/s
# Warmup Iteration  13: 39147380.900 ops/s
# Warmup Iteration  14: 39352488.482 ops/s
# Warmup Iteration  15: 38378174.718 ops/s
# Warmup Iteration  16: 37375418.512 ops/s
# Warmup Iteration  17: 37598095.308 ops/s
# Warmup Iteration  18: 38786271.841 ops/s
# Warmup Iteration  19: 39123566.023 ops/s
# Warmup Iteration  20: 38062892.462 ops/s
# Warmup Iteration  21: 37616696.114 ops/s
# Warmup Iteration  22: 37760435.026 ops/s
# Warmup Iteration  23: 37357409.204 ops/s
# Warmup Iteration  24: 37156879.265 ops/s
# Warmup Iteration  25: 37818803.856 ops/s
# Warmup Iteration  26: 37272582.672 ops/s
# Warmup Iteration  27: 38109179.117 ops/s
# Warmup Iteration  28: 38101712.909 ops/s
# Warmup Iteration  29: 37775528.535 ops/s
# Warmup Iteration  30: 38190696.510 ops/s
Iteration   1: 36934695.463 ops/s
Iteration   2: 37247584.296 ops/s
Iteration   3: 38037555.021 ops/s
Iteration   4: 36994988.742 ops/s
Iteration   5: 37484929.441 ops/s
Iteration   6: 37904223.819 ops/s
Iteration   7: 38218963.922 ops/s
Iteration   8: 37453580.081 ops/s
Iteration   9: 37022142.849 ops/s
Iteration  10: 37628077.438 ops/s
Iteration  11: 38491849.557 ops/s
Iteration  12: 39208845.278 ops/s
Iteration  13: 37690761.825 ops/s
Iteration  14: 38021546.125 ops/s
Iteration  15: 37656045.409 ops/s
Iteration  16: 36539967.775 ops/s
Iteration  17: 37384212.401 ops/s
Iteration  18: 38415499.067 ops/s
Iteration  19: 38173750.888 ops/s
Iteration  20: 38359503.334 ops/s
Iteration  21: 38619719.669 ops/s
Iteration  22: 37808097.893 ops/s
Iteration  23: 38351158.044 ops/s
Iteration  24: 38034249.074 ops/s
Iteration  25: 37876542.607 ops/s
Iteration  26: 39204762.286 ops/s
Iteration  27: 39011128.135 ops/s
Iteration  28: 37897526.046 ops/s
Iteration  29: 37162853.832 ops/s
Iteration  30: 37589706.297 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_subList":
  37880815.554 ±(99.9%) 441723.675 ops/s [Average]
  (min, avg, max) = (36539967.775, 37880815.554, 39208845.278), stdev = 661151.252
  CI (99.9%): [37439091.879, 38322539.229] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_subList  thrpt   30  37880815.554 ± 441723.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 613944.377 ops/s
# Warmup Iteration   2: 640110.593 ops/s
# Warmup Iteration   3: 743255.598 ops/s
# Warmup Iteration   4: 817246.828 ops/s
# Warmup Iteration   5: 824839.002 ops/s
# Warmup Iteration   6: 835083.654 ops/s
# Warmup Iteration   7: 814864.459 ops/s
# Warmup Iteration   8: 800813.634 ops/s
# Warmup Iteration   9: 792104.704 ops/s
# Warmup Iteration  10: 799444.808 ops/s
# Warmup Iteration  11: 789264.131 ops/s
# Warmup Iteration  12: 817942.539 ops/s
# Warmup Iteration  13: 806972.222 ops/s
# Warmup Iteration  14: 772943.400 ops/s
# Warmup Iteration  15: 728309.100 ops/s
# Warmup Iteration  16: 802627.151 ops/s
# Warmup Iteration  17: 859655.877 ops/s
# Warmup Iteration  18: 861582.418 ops/s
# Warmup Iteration  19: 877561.808 ops/s
# Warmup Iteration  20: 863843.214 ops/s
# Warmup Iteration  21: 886662.701 ops/s
# Warmup Iteration  22: 859382.394 ops/s
# Warmup Iteration  23: 843650.510 ops/s
# Warmup Iteration  24: 855499.019 ops/s
# Warmup Iteration  25: 865379.595 ops/s
# Warmup Iteration  26: 849619.222 ops/s
# Warmup Iteration  27: 876122.071 ops/s
# Warmup Iteration  28: 829622.170 ops/s
# Warmup Iteration  29: 862989.246 ops/s
# Warmup Iteration  30: 859727.412 ops/s
Iteration   1: 855075.084 ops/s
Iteration   2: 868578.303 ops/s
Iteration   3: 843036.263 ops/s
Iteration   4: 876182.359 ops/s
Iteration   5: 881874.811 ops/s
Iteration   6: 856612.439 ops/s
Iteration   7: 853811.211 ops/s
Iteration   8: 870362.368 ops/s
Iteration   9: 848055.075 ops/s
Iteration  10: 841949.741 ops/s
Iteration  11: 859658.530 ops/s
Iteration  12: 847901.948 ops/s
Iteration  13: 872799.224 ops/s
Iteration  14: 890038.157 ops/s
Iteration  15: 849695.291 ops/s
Iteration  16: 881305.799 ops/s
Iteration  17: 850914.245 ops/s
Iteration  18: 873997.618 ops/s
Iteration  19: 879015.269 ops/s
Iteration  20: 874260.644 ops/s
Iteration  21: 883094.081 ops/s
Iteration  22: 892653.773 ops/s
Iteration  23: 894366.463 ops/s
Iteration  24: 880445.556 ops/s
Iteration  25: 887253.604 ops/s
Iteration  26: 851114.955 ops/s
Iteration  27: 848903.158 ops/s
Iteration  28: 868425.826 ops/s
Iteration  29: 910996.199 ops/s
Iteration  30: 911353.822 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO":
  870124.394 ±(99.9%) 12860.402 ops/s [Average]
  (min, avg, max) = (841949.741, 870124.394, 911353.822), stdev = 19248.846
  CI (99.9%): [857263.991, 882984.796] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO  thrpt   30  870124.394 ± 12860.402  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_subListFromNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_subListFromNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 655199.545 ops/s
# Warmup Iteration   2: 662458.238 ops/s
# Warmup Iteration   3: 761200.155 ops/s
# Warmup Iteration   4: 860415.466 ops/s
# Warmup Iteration   5: 870989.600 ops/s
# Warmup Iteration   6: 856573.300 ops/s
# Warmup Iteration   7: 849566.095 ops/s
# Warmup Iteration   8: 827174.396 ops/s
# Warmup Iteration   9: 820910.191 ops/s
# Warmup Iteration  10: 817765.446 ops/s
# Warmup Iteration  11: 830644.439 ops/s
# Warmup Iteration  12: 812540.212 ops/s
# Warmup Iteration  13: 813765.499 ops/s
# Warmup Iteration  14: 780259.509 ops/s
# Warmup Iteration  15: 741275.586 ops/s
# Warmup Iteration  16: 825144.196 ops/s
# Warmup Iteration  17: 891278.781 ops/s
# Warmup Iteration  18: 867778.933 ops/s
# Warmup Iteration  19: 882476.253 ops/s
# Warmup Iteration  20: 883042.305 ops/s
# Warmup Iteration  21: 865154.238 ops/s
# Warmup Iteration  22: 873816.743 ops/s
# Warmup Iteration  23: 864372.174 ops/s
# Warmup Iteration  24: 874577.649 ops/s
# Warmup Iteration  25: 862113.758 ops/s
# Warmup Iteration  26: 868001.497 ops/s
# Warmup Iteration  27: 870761.837 ops/s
# Warmup Iteration  28: 864336.902 ops/s
# Warmup Iteration  29: 880811.658 ops/s
# Warmup Iteration  30: 863517.956 ops/s
Iteration   1: 877858.009 ops/s
Iteration   2: 875393.208 ops/s
Iteration   3: 907502.058 ops/s
Iteration   4: 891319.502 ops/s
Iteration   5: 873018.035 ops/s
Iteration   6: 874653.135 ops/s
Iteration   7: 883175.533 ops/s
Iteration   8: 871810.063 ops/s
Iteration   9: 849998.552 ops/s
Iteration  10: 879231.866 ops/s
Iteration  11: 882481.214 ops/s
Iteration  12: 844619.878 ops/s
Iteration  13: 862831.168 ops/s
Iteration  14: 881794.700 ops/s
Iteration  15: 916843.533 ops/s
Iteration  16: 867820.832 ops/s
Iteration  17: 873785.467 ops/s
Iteration  18: 864983.403 ops/s
Iteration  19: 884008.334 ops/s
Iteration  20: 887774.986 ops/s
Iteration  21: 895559.714 ops/s
Iteration  22: 856703.331 ops/s
Iteration  23: 876732.818 ops/s
Iteration  24: 878066.760 ops/s
Iteration  25: 917424.044 ops/s
Iteration  26: 913835.659 ops/s
Iteration  27: 916055.650 ops/s
Iteration  28: 892039.588 ops/s
Iteration  29: 895369.843 ops/s
Iteration  30: 901443.050 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_subListFromNegative":
  883137.798 ±(99.9%) 12748.036 ops/s [Average]
  (min, avg, max) = (844619.878, 883137.798, 917424.044), stdev = 19080.662
  CI (99.9%): [870389.762, 895885.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_subListFromNegative  thrpt   30  883137.798 ± 12748.036  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_subListToGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_subListToGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 627351.372 ops/s
# Warmup Iteration   2: 635051.109 ops/s
# Warmup Iteration   3: 736333.014 ops/s
# Warmup Iteration   4: 806835.780 ops/s
# Warmup Iteration   5: 803139.316 ops/s
# Warmup Iteration   6: 806614.408 ops/s
# Warmup Iteration   7: 802525.311 ops/s
# Warmup Iteration   8: 815322.457 ops/s
# Warmup Iteration   9: 827423.627 ops/s
# Warmup Iteration  10: 843381.658 ops/s
# Warmup Iteration  11: 838269.413 ops/s
# Warmup Iteration  12: 832837.875 ops/s
# Warmup Iteration  13: 825055.154 ops/s
# Warmup Iteration  14: 810935.621 ops/s
# Warmup Iteration  15: 686339.186 ops/s
# Warmup Iteration  16: 820019.093 ops/s
# Warmup Iteration  17: 865942.185 ops/s
# Warmup Iteration  18: 858752.138 ops/s
# Warmup Iteration  19: 909364.118 ops/s
# Warmup Iteration  20: 850900.992 ops/s
# Warmup Iteration  21: 856855.500 ops/s
# Warmup Iteration  22: 871564.450 ops/s
# Warmup Iteration  23: 870451.321 ops/s
# Warmup Iteration  24: 889951.340 ops/s
# Warmup Iteration  25: 898493.483 ops/s
# Warmup Iteration  26: 910897.352 ops/s
# Warmup Iteration  27: 904350.543 ops/s
# Warmup Iteration  28: 863059.213 ops/s
# Warmup Iteration  29: 886688.491 ops/s
# Warmup Iteration  30: 870257.774 ops/s
Iteration   1: 854288.248 ops/s
Iteration   2: 854324.557 ops/s
Iteration   3: 882974.040 ops/s
Iteration   4: 873437.983 ops/s
Iteration   5: 897537.778 ops/s
Iteration   6: 908244.033 ops/s
Iteration   7: 912431.617 ops/s
Iteration   8: 914295.175 ops/s
Iteration   9: 909661.341 ops/s
Iteration  10: 909709.120 ops/s
Iteration  11: 887461.544 ops/s
Iteration  12: 835095.952 ops/s
Iteration  13: 857284.511 ops/s
Iteration  14: 865756.951 ops/s
Iteration  15: 891809.407 ops/s
Iteration  16: 864156.054 ops/s
Iteration  17: 910291.152 ops/s
Iteration  18: 892645.089 ops/s
Iteration  19: 821298.486 ops/s
Iteration  20: 890028.049 ops/s
Iteration  21: 864728.628 ops/s
Iteration  22: 864021.083 ops/s
Iteration  23: 862944.332 ops/s
Iteration  24: 874615.605 ops/s
Iteration  25: 857109.136 ops/s
Iteration  26: 865439.146 ops/s
Iteration  27: 866356.137 ops/s
Iteration  28: 876998.513 ops/s
Iteration  29: 856580.534 ops/s
Iteration  30: 858968.917 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_subListToGreaterThanSize":
  876016.437 ±(99.9%) 15949.780 ops/s [Average]
  (min, avg, max) = (821298.486, 876016.437, 914295.175), stdev = 23872.881
  CI (99.9%): [860066.657, 891966.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_subListToGreaterThanSize  thrpt   30  876016.437 ± 15949.780  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 996849.121 ops/s
# Warmup Iteration   2: 1747591.663 ops/s
# Warmup Iteration   3: 2002018.663 ops/s
# Warmup Iteration   4: 1982938.686 ops/s
# Warmup Iteration   5: 1957048.944 ops/s
# Warmup Iteration   6: 1621677.469 ops/s
# Warmup Iteration   7: 2011878.377 ops/s
# Warmup Iteration   8: 1992743.485 ops/s
# Warmup Iteration   9: 1894501.732 ops/s
# Warmup Iteration  10: 1894258.553 ops/s
# Warmup Iteration  11: 1891548.844 ops/s
# Warmup Iteration  12: 1906685.888 ops/s
# Warmup Iteration  13: 1936068.826 ops/s
# Warmup Iteration  14: 1929108.452 ops/s
# Warmup Iteration  15: 1914566.344 ops/s
# Warmup Iteration  16: 1922869.161 ops/s
# Warmup Iteration  17: 1857525.756 ops/s
# Warmup Iteration  18: 1897077.006 ops/s
# Warmup Iteration  19: 1886525.094 ops/s
# Warmup Iteration  20: 1895471.370 ops/s
# Warmup Iteration  21: 1912368.466 ops/s
# Warmup Iteration  22: 1902513.760 ops/s
# Warmup Iteration  23: 1923730.197 ops/s
# Warmup Iteration  24: 1889575.889 ops/s
# Warmup Iteration  25: 1940121.211 ops/s
# Warmup Iteration  26: 1874867.196 ops/s
# Warmup Iteration  27: 1887245.697 ops/s
# Warmup Iteration  28: 1897991.144 ops/s
# Warmup Iteration  29: 1913221.996 ops/s
# Warmup Iteration  30: 1892932.711 ops/s
Iteration   1: 1909111.885 ops/s
Iteration   2: 1919101.325 ops/s
Iteration   3: 1858435.353 ops/s
Iteration   4: 1902832.378 ops/s
Iteration   5: 1886497.912 ops/s
Iteration   6: 1910339.117 ops/s
Iteration   7: 1978353.816 ops/s
Iteration   8: 1916326.530 ops/s
Iteration   9: 1958591.289 ops/s
Iteration  10: 1917062.186 ops/s
Iteration  11: 1872352.117 ops/s
Iteration  12: 1890110.207 ops/s
Iteration  13: 1945619.187 ops/s
Iteration  14: 1952683.419 ops/s
Iteration  15: 1948963.869 ops/s
Iteration  16: 1976247.170 ops/s
Iteration  17: 1957339.259 ops/s
Iteration  18: 1988794.471 ops/s
Iteration  19: 1978580.291 ops/s
Iteration  20: 1874265.333 ops/s
Iteration  21: 1911887.598 ops/s
Iteration  22: 1915482.331 ops/s
Iteration  23: 1917419.372 ops/s
Iteration  24: 1873567.214 ops/s
Iteration  25: 1920761.627 ops/s
Iteration  26: 1901057.405 ops/s
Iteration  27: 1928950.303 ops/s
Iteration  28: 1913011.406 ops/s
Iteration  29: 1903298.418 ops/s
Iteration  30: 1939229.734 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByDouble":
  1922209.084 ±(99.9%) 22915.960 ops/s [Average]
  (min, avg, max) = (1858435.353, 1922209.084, 1988794.471), stdev = 34299.533
  CI (99.9%): [1899293.124, 1945125.044] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_sumByDouble  thrpt   30  1922209.084 ± 22915.960  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 59.323 ops/s
# Warmup Iteration   2: 69.181 ops/s
# Warmup Iteration   3: 93.950 ops/s
# Warmup Iteration   4: 97.664 ops/s
# Warmup Iteration   5: 93.803 ops/s
# Warmup Iteration   6: 94.570 ops/s
# Warmup Iteration   7: 92.565 ops/s
# Warmup Iteration   8: 93.727 ops/s
# Warmup Iteration   9: 93.127 ops/s
# Warmup Iteration  10: 75.422 ops/s
# Warmup Iteration  11: 94.834 ops/s
# Warmup Iteration  12: 96.914 ops/s
# Warmup Iteration  13: 94.985 ops/s
# Warmup Iteration  14: 93.943 ops/s
# Warmup Iteration  15: 96.953 ops/s
# Warmup Iteration  16: 98.523 ops/s
# Warmup Iteration  17: 96.653 ops/s
# Warmup Iteration  18: 95.888 ops/s
# Warmup Iteration  19: 96.881 ops/s
# Warmup Iteration  20: 95.339 ops/s
# Warmup Iteration  21: 95.887 ops/s
# Warmup Iteration  22: 95.336 ops/s
# Warmup Iteration  23: 96.537 ops/s
# Warmup Iteration  24: 97.896 ops/s
# Warmup Iteration  25: 96.024 ops/s
# Warmup Iteration  26: 94.450 ops/s
# Warmup Iteration  27: 95.169 ops/s
# Warmup Iteration  28: 95.106 ops/s
# Warmup Iteration  29: 94.107 ops/s
# Warmup Iteration  30: 94.368 ops/s
Iteration   1: 96.674 ops/s
Iteration   2: 95.937 ops/s
Iteration   3: 91.431 ops/s
Iteration   4: 93.796 ops/s
Iteration   5: 95.031 ops/s
Iteration   6: 93.161 ops/s
Iteration   7: 94.417 ops/s
Iteration   8: 93.663 ops/s
Iteration   9: 91.510 ops/s
Iteration  10: 94.596 ops/s
Iteration  11: 97.423 ops/s
Iteration  12: 93.308 ops/s
Iteration  13: 94.634 ops/s
Iteration  14: 94.450 ops/s
Iteration  15: 98.502 ops/s
Iteration  16: 98.315 ops/s
Iteration  17: 93.133 ops/s
Iteration  18: 93.444 ops/s
Iteration  19: 95.057 ops/s
Iteration  20: 94.949 ops/s
Iteration  21: 93.984 ops/s
Iteration  22: 96.926 ops/s
Iteration  23: 96.218 ops/s
Iteration  24: 95.530 ops/s
Iteration  25: 94.973 ops/s
Iteration  26: 95.154 ops/s
Iteration  27: 94.796 ops/s
Iteration  28: 97.014 ops/s
Iteration  29: 96.943 ops/s
Iteration  30: 95.661 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  95.021 ±(99.9%) 1.170 ops/s [Average]
  (min, avg, max) = (91.431, 95.021, 98.502), stdev = 1.751
  CI (99.9%): [93.852, 96.191] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt   Score   Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  95.021 ± 1.170  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 949662.833 ops/s
# Warmup Iteration   2: 1614836.141 ops/s
# Warmup Iteration   3: 1855659.454 ops/s
# Warmup Iteration   4: 1893770.725 ops/s
# Warmup Iteration   5: 1978289.353 ops/s
# Warmup Iteration   6: 1540538.885 ops/s
# Warmup Iteration   7: 1916304.788 ops/s
# Warmup Iteration   8: 1914286.047 ops/s
# Warmup Iteration   9: 1970322.355 ops/s
# Warmup Iteration  10: 1895782.081 ops/s
# Warmup Iteration  11: 1903084.666 ops/s
# Warmup Iteration  12: 1903006.927 ops/s
# Warmup Iteration  13: 1936024.393 ops/s
# Warmup Iteration  14: 1886190.065 ops/s
# Warmup Iteration  15: 1907461.207 ops/s
# Warmup Iteration  16: 1897806.549 ops/s
# Warmup Iteration  17: 1859851.429 ops/s
# Warmup Iteration  18: 1903345.597 ops/s
# Warmup Iteration  19: 1893211.883 ops/s
# Warmup Iteration  20: 1890706.175 ops/s
# Warmup Iteration  21: 1901421.089 ops/s
# Warmup Iteration  22: 1907811.036 ops/s
# Warmup Iteration  23: 1882116.958 ops/s
# Warmup Iteration  24: 1881445.735 ops/s
# Warmup Iteration  25: 1899602.087 ops/s
# Warmup Iteration  26: 1891692.202 ops/s
# Warmup Iteration  27: 1859018.101 ops/s
# Warmup Iteration  28: 1901336.437 ops/s
# Warmup Iteration  29: 1886304.258 ops/s
# Warmup Iteration  30: 1889986.602 ops/s
Iteration   1: 1899417.348 ops/s
Iteration   2: 1874386.551 ops/s
Iteration   3: 1936939.286 ops/s
Iteration   4: 1945372.351 ops/s
Iteration   5: 1922115.549 ops/s
Iteration   6: 1940543.696 ops/s
Iteration   7: 1891849.384 ops/s
Iteration   8: 1906593.215 ops/s
Iteration   9: 1887315.660 ops/s
Iteration  10: 1910885.914 ops/s
Iteration  11: 1906355.422 ops/s
Iteration  12: 1924771.140 ops/s
Iteration  13: 1853436.994 ops/s
Iteration  14: 1927312.332 ops/s
Iteration  15: 1939154.430 ops/s
Iteration  16: 1879155.479 ops/s
Iteration  17: 1928202.245 ops/s
Iteration  18: 1863175.166 ops/s
Iteration  19: 2008307.333 ops/s
Iteration  20: 1991308.984 ops/s
Iteration  21: 1909122.281 ops/s
Iteration  22: 1904889.279 ops/s
Iteration  23: 1914466.192 ops/s
Iteration  24: 1932687.020 ops/s
Iteration  25: 1929885.223 ops/s
Iteration  26: 1885027.412 ops/s
Iteration  27: 1894936.366 ops/s
Iteration  28: 1918339.341 ops/s
Iteration  29: 1914293.704 ops/s
Iteration  30: 1889919.453 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByFloat":
  1914338.825 ±(99.9%) 21969.957 ops/s [Average]
  (min, avg, max) = (1853436.994, 1914338.825, 2008307.333), stdev = 32883.599
  CI (99.9%): [1892368.868, 1936308.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_sumByFloat  thrpt   30  1914338.825 ± 21969.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 57.909 ops/s
# Warmup Iteration   2: 67.450 ops/s
# Warmup Iteration   3: 95.012 ops/s
# Warmup Iteration   4: 95.284 ops/s
# Warmup Iteration   5: 96.564 ops/s
# Warmup Iteration   6: 95.014 ops/s
# Warmup Iteration   7: 96.441 ops/s
# Warmup Iteration   8: 97.387 ops/s
# Warmup Iteration   9: 96.428 ops/s
# Warmup Iteration  10: 75.676 ops/s
# Warmup Iteration  11: 96.658 ops/s
# Warmup Iteration  12: 95.244 ops/s
# Warmup Iteration  13: 97.909 ops/s
# Warmup Iteration  14: 96.201 ops/s
# Warmup Iteration  15: 98.317 ops/s
# Warmup Iteration  16: 96.311 ops/s
# Warmup Iteration  17: 95.417 ops/s
# Warmup Iteration  18: 94.653 ops/s
# Warmup Iteration  19: 93.606 ops/s
# Warmup Iteration  20: 95.093 ops/s
# Warmup Iteration  21: 93.463 ops/s
# Warmup Iteration  22: 96.043 ops/s
# Warmup Iteration  23: 93.636 ops/s
# Warmup Iteration  24: 94.621 ops/s
# Warmup Iteration  25: 96.321 ops/s
# Warmup Iteration  26: 94.845 ops/s
# Warmup Iteration  27: 95.102 ops/s
# Warmup Iteration  28: 97.722 ops/s
# Warmup Iteration  29: 97.551 ops/s
# Warmup Iteration  30: 95.875 ops/s
Iteration   1: 95.591 ops/s
Iteration   2: 94.898 ops/s
Iteration   3: 93.819 ops/s
Iteration   4: 95.291 ops/s
Iteration   5: 95.973 ops/s
Iteration   6: 96.390 ops/s
Iteration   7: 94.922 ops/s
Iteration   8: 96.845 ops/s
Iteration   9: 96.589 ops/s
Iteration  10: 94.553 ops/s
Iteration  11: 94.453 ops/s
Iteration  12: 94.368 ops/s
Iteration  13: 94.210 ops/s
Iteration  14: 93.611 ops/s
Iteration  15: 94.551 ops/s
Iteration  16: 93.616 ops/s
Iteration  17: 96.308 ops/s
Iteration  18: 93.669 ops/s
Iteration  19: 94.167 ops/s
Iteration  20: 92.651 ops/s
Iteration  21: 94.019 ops/s
Iteration  22: 97.191 ops/s
Iteration  23: 96.768 ops/s
Iteration  24: 97.157 ops/s
Iteration  25: 95.458 ops/s
Iteration  26: 92.717 ops/s
Iteration  27: 92.923 ops/s
Iteration  28: 96.500 ops/s
Iteration  29: 94.820 ops/s
Iteration  30: 94.884 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  94.964 ±(99.9%) 0.890 ops/s [Average]
  (min, avg, max) = (92.651, 94.964, 97.191), stdev = 1.332
  CI (99.9%): [94.074, 95.854] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt   Score   Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  94.964 ± 0.890  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1327402.049 ops/s
# Warmup Iteration   2: 2492965.577 ops/s
# Warmup Iteration   3: 2905500.348 ops/s
# Warmup Iteration   4: 2878007.599 ops/s
# Warmup Iteration   5: 2612165.384 ops/s
# Warmup Iteration   6: 2703662.451 ops/s
# Warmup Iteration   7: 2895918.771 ops/s
# Warmup Iteration   8: 2885317.915 ops/s
# Warmup Iteration   9: 2935669.858 ops/s
# Warmup Iteration  10: 2928968.068 ops/s
# Warmup Iteration  11: 2889043.531 ops/s
# Warmup Iteration  12: 3008439.024 ops/s
# Warmup Iteration  13: 2929850.716 ops/s
# Warmup Iteration  14: 2860822.037 ops/s
# Warmup Iteration  15: 2915465.416 ops/s
# Warmup Iteration  16: 2868799.706 ops/s
# Warmup Iteration  17: 2864861.684 ops/s
# Warmup Iteration  18: 3008981.223 ops/s
# Warmup Iteration  19: 3009126.014 ops/s
# Warmup Iteration  20: 3001627.802 ops/s
# Warmup Iteration  21: 2979557.257 ops/s
# Warmup Iteration  22: 2955914.198 ops/s
# Warmup Iteration  23: 2978595.413 ops/s
# Warmup Iteration  24: 2999306.653 ops/s
# Warmup Iteration  25: 3010238.505 ops/s
# Warmup Iteration  26: 3002953.617 ops/s
# Warmup Iteration  27: 2986798.720 ops/s
# Warmup Iteration  28: 3027623.813 ops/s
# Warmup Iteration  29: 3000541.224 ops/s
# Warmup Iteration  30: 2993601.678 ops/s
Iteration   1: 2958637.105 ops/s
Iteration   2: 3010943.037 ops/s
Iteration   3: 3000792.807 ops/s
Iteration   4: 2973878.800 ops/s
Iteration   5: 2974609.500 ops/s
Iteration   6: 3033163.873 ops/s
Iteration   7: 2991825.587 ops/s
Iteration   8: 2969139.179 ops/s
Iteration   9: 3019021.975 ops/s
Iteration  10: 3009483.204 ops/s
Iteration  11: 3024660.994 ops/s
Iteration  12: 2999734.591 ops/s
Iteration  13: 3004036.939 ops/s
Iteration  14: 3015114.892 ops/s
Iteration  15: 3013372.366 ops/s
Iteration  16: 3012950.234 ops/s
Iteration  17: 3004257.862 ops/s
Iteration  18: 2999345.889 ops/s
Iteration  19: 2999371.165 ops/s
Iteration  20: 2994434.272 ops/s
Iteration  21: 2992981.702 ops/s
Iteration  22: 3044750.313 ops/s
Iteration  23: 3016288.309 ops/s
Iteration  24: 2998775.438 ops/s
Iteration  25: 2959486.744 ops/s
Iteration  26: 2992411.280 ops/s
Iteration  27: 2968903.695 ops/s
Iteration  28: 2993907.331 ops/s
Iteration  29: 3026909.130 ops/s
Iteration  30: 3012018.925 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByInt":
  3000506.905 ±(99.9%) 14069.837 ops/s [Average]
  (min, avg, max) = (2958637.105, 3000506.905, 3044750.313), stdev = 21059.071
  CI (99.9%): [2986437.068, 3014576.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_sumByInt  thrpt   30  3000506.905 ± 14069.837  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1318504.100 ops/s
# Warmup Iteration   2: 2567238.821 ops/s
# Warmup Iteration   3: 2834860.742 ops/s
# Warmup Iteration   4: 2835709.729 ops/s
# Warmup Iteration   5: 2368768.167 ops/s
# Warmup Iteration   6: 2835059.963 ops/s
# Warmup Iteration   7: 2852754.479 ops/s
# Warmup Iteration   8: 2833796.830 ops/s
# Warmup Iteration   9: 2845150.950 ops/s
# Warmup Iteration  10: 2864892.761 ops/s
# Warmup Iteration  11: 2874859.706 ops/s
# Warmup Iteration  12: 2876266.286 ops/s
# Warmup Iteration  13: 2851420.304 ops/s
# Warmup Iteration  14: 2781394.446 ops/s
# Warmup Iteration  15: 2812177.074 ops/s
# Warmup Iteration  16: 2831481.514 ops/s
# Warmup Iteration  17: 2840398.268 ops/s
# Warmup Iteration  18: 2819333.322 ops/s
# Warmup Iteration  19: 2795672.047 ops/s
# Warmup Iteration  20: 2844210.361 ops/s
# Warmup Iteration  21: 2819070.920 ops/s
# Warmup Iteration  22: 2810124.424 ops/s
# Warmup Iteration  23: 2809011.705 ops/s
# Warmup Iteration  24: 2845372.766 ops/s
# Warmup Iteration  25: 2785731.693 ops/s
# Warmup Iteration  26: 2848525.249 ops/s
# Warmup Iteration  27: 2804919.977 ops/s
# Warmup Iteration  28: 2795076.712 ops/s
# Warmup Iteration  29: 2791780.490 ops/s
# Warmup Iteration  30: 2820454.625 ops/s
Iteration   1: 2790030.019 ops/s
Iteration   2: 2826632.318 ops/s
Iteration   3: 2891733.385 ops/s
Iteration   4: 2839449.700 ops/s
Iteration   5: 2769253.448 ops/s
Iteration   6: 2850411.568 ops/s
Iteration   7: 2827473.555 ops/s
Iteration   8: 2850520.383 ops/s
Iteration   9: 2839094.265 ops/s
Iteration  10: 2830434.903 ops/s
Iteration  11: 2840757.703 ops/s
Iteration  12: 2855559.489 ops/s
Iteration  13: 2817409.589 ops/s
Iteration  14: 2816138.015 ops/s
Iteration  15: 2811444.708 ops/s
Iteration  16: 2804735.709 ops/s
Iteration  17: 2822251.332 ops/s
Iteration  18: 2811475.487 ops/s
Iteration  19: 2845693.441 ops/s
Iteration  20: 2791277.394 ops/s
Iteration  21: 2836520.145 ops/s
Iteration  22: 2873048.260 ops/s
Iteration  23: 2872898.451 ops/s
Iteration  24: 2854783.082 ops/s
Iteration  25: 2820704.737 ops/s
Iteration  26: 2829352.137 ops/s
Iteration  27: 2856736.692 ops/s
Iteration  28: 2804195.050 ops/s
Iteration  29: 2846883.057 ops/s
Iteration  30: 2850573.537 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumByLong":
  2832582.385 ±(99.9%) 17851.437 ops/s [Average]
  (min, avg, max) = (2769253.448, 2832582.385, 2891733.385), stdev = 26719.192
  CI (99.9%): [2814730.949, 2850433.822] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_sumByLong  thrpt   30  2832582.385 ± 17851.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10806850.810 ops/s
# Warmup Iteration   2: 20590736.630 ops/s
# Warmup Iteration   3: 21543392.679 ops/s
# Warmup Iteration   4: 22278592.240 ops/s
# Warmup Iteration   5: 18672240.349 ops/s
# Warmup Iteration   6: 22300689.067 ops/s
# Warmup Iteration   7: 22196611.617 ops/s
# Warmup Iteration   8: 22091763.578 ops/s
# Warmup Iteration   9: 22122874.052 ops/s
# Warmup Iteration  10: 22278930.210 ops/s
# Warmup Iteration  11: 22013080.071 ops/s
# Warmup Iteration  12: 22173158.861 ops/s
# Warmup Iteration  13: 22272130.575 ops/s
# Warmup Iteration  14: 22160884.841 ops/s
# Warmup Iteration  15: 22327787.003 ops/s
# Warmup Iteration  16: 22135297.201 ops/s
# Warmup Iteration  17: 21858719.348 ops/s
# Warmup Iteration  18: 22199440.515 ops/s
# Warmup Iteration  19: 22424336.450 ops/s
# Warmup Iteration  20: 22188378.584 ops/s
# Warmup Iteration  21: 22423067.635 ops/s
# Warmup Iteration  22: 22412007.852 ops/s
# Warmup Iteration  23: 22403911.125 ops/s
# Warmup Iteration  24: 22427684.010 ops/s
# Warmup Iteration  25: 22395835.773 ops/s
# Warmup Iteration  26: 22426153.854 ops/s
# Warmup Iteration  27: 22423127.469 ops/s
# Warmup Iteration  28: 22404346.888 ops/s
# Warmup Iteration  29: 22396601.872 ops/s
# Warmup Iteration  30: 22410290.398 ops/s
Iteration   1: 22393112.140 ops/s
Iteration   2: 22375206.072 ops/s
Iteration   3: 22367653.698 ops/s
Iteration   4: 22379133.384 ops/s
Iteration   5: 22360541.419 ops/s
Iteration   6: 22460457.384 ops/s
Iteration   7: 22435277.970 ops/s
Iteration   8: 22417916.686 ops/s
Iteration   9: 22386697.245 ops/s
Iteration  10: 22400095.715 ops/s
Iteration  11: 22406117.889 ops/s
Iteration  12: 22440996.881 ops/s
Iteration  13: 22415795.080 ops/s
Iteration  14: 22425124.879 ops/s
Iteration  15: 22423995.071 ops/s
Iteration  16: 22392695.839 ops/s
Iteration  17: 22307550.072 ops/s
Iteration  18: 22426153.841 ops/s
Iteration  19: 22427721.951 ops/s
Iteration  20: 22371446.737 ops/s
Iteration  21: 22319302.418 ops/s
Iteration  22: 22329068.122 ops/s
Iteration  23: 22368501.538 ops/s
Iteration  24: 22354424.952 ops/s
Iteration  25: 22358399.741 ops/s
Iteration  26: 22423727.537 ops/s
Iteration  27: 22407039.429 ops/s
Iteration  28: 22367443.423 ops/s
Iteration  29: 22329728.272 ops/s
Iteration  30: 22418937.306 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumDouble":
  22389675.423 ±(99.9%) 25803.189 ops/s [Average]
  (min, avg, max) = (22307550.072, 22389675.423, 22460457.384), stdev = 38621.002
  CI (99.9%): [22363872.234, 22415478.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_sumDouble  thrpt   30  22389675.423 ± 25803.189  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10536086.701 ops/s
# Warmup Iteration   2: 19075148.731 ops/s
# Warmup Iteration   3: 20036105.713 ops/s
# Warmup Iteration   4: 20174390.812 ops/s
# Warmup Iteration   5: 17004245.792 ops/s
# Warmup Iteration   6: 20162703.764 ops/s
# Warmup Iteration   7: 20212673.714 ops/s
# Warmup Iteration   8: 20232219.227 ops/s
# Warmup Iteration   9: 20167717.465 ops/s
# Warmup Iteration  10: 20223595.281 ops/s
# Warmup Iteration  11: 20143559.135 ops/s
# Warmup Iteration  12: 20219504.592 ops/s
# Warmup Iteration  13: 20128062.311 ops/s
# Warmup Iteration  14: 20076838.176 ops/s
# Warmup Iteration  15: 20217426.536 ops/s
# Warmup Iteration  16: 20186579.419 ops/s
# Warmup Iteration  17: 20015244.503 ops/s
# Warmup Iteration  18: 20053121.336 ops/s
# Warmup Iteration  19: 20006177.793 ops/s
# Warmup Iteration  20: 20203170.944 ops/s
# Warmup Iteration  21: 20102134.248 ops/s
# Warmup Iteration  22: 20126207.582 ops/s
# Warmup Iteration  23: 20176877.983 ops/s
# Warmup Iteration  24: 20162906.967 ops/s
# Warmup Iteration  25: 20185950.454 ops/s
# Warmup Iteration  26: 19997197.944 ops/s
# Warmup Iteration  27: 19672203.671 ops/s
# Warmup Iteration  28: 19555771.413 ops/s
# Warmup Iteration  29: 19879094.139 ops/s
# Warmup Iteration  30: 19111696.501 ops/s
Iteration   1: 19221882.824 ops/s
Iteration   2: 18969340.594 ops/s
Iteration   3: 19267438.466 ops/s
Iteration   4: 19484016.536 ops/s
Iteration   5: 18976478.343 ops/s
Iteration   6: 18722345.732 ops/s
Iteration   7: 18858267.471 ops/s
Iteration   8: 19090753.219 ops/s
Iteration   9: 19688327.143 ops/s
Iteration  10: 19056231.034 ops/s
Iteration  11: 18797258.504 ops/s
Iteration  12: 19507214.800 ops/s
Iteration  13: 18743461.383 ops/s
Iteration  14: 18144716.151 ops/s
Iteration  15: 19089399.602 ops/s
Iteration  16: 19260439.096 ops/s
Iteration  17: 19136392.951 ops/s
Iteration  18: 19223966.218 ops/s
Iteration  19: 19030968.651 ops/s
Iteration  20: 20271995.109 ops/s
Iteration  21: 19973986.678 ops/s
Iteration  22: 19570694.790 ops/s
Iteration  23: 19222828.679 ops/s
Iteration  24: 19550447.404 ops/s
Iteration  25: 19703663.408 ops/s
Iteration  26: 19778762.817 ops/s
Iteration  27: 18895972.449 ops/s
Iteration  28: 19312472.991 ops/s
Iteration  29: 18983176.344 ops/s
Iteration  30: 19053975.113 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumFloat":
  19219562.483 ±(99.9%) 282698.582 ops/s [Average]
  (min, avg, max) = (18144716.151, 19219562.483, 20271995.109), stdev = 423129.961
  CI (99.9%): [18936863.901, 19502261.065] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_sumFloat  thrpt   30  19219562.483 ± 282698.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12044932.575 ops/s
# Warmup Iteration   2: 24930895.115 ops/s
# Warmup Iteration   3: 25841851.681 ops/s
# Warmup Iteration   4: 22678925.296 ops/s
# Warmup Iteration   5: 27015141.372 ops/s
# Warmup Iteration   6: 25622920.600 ops/s
# Warmup Iteration   7: 25786195.694 ops/s
# Warmup Iteration   8: 25970222.971 ops/s
# Warmup Iteration   9: 25268024.130 ops/s
# Warmup Iteration  10: 25247542.343 ops/s
# Warmup Iteration  11: 25570494.227 ops/s
# Warmup Iteration  12: 25922066.388 ops/s
# Warmup Iteration  13: 26543336.893 ops/s
# Warmup Iteration  14: 26004546.195 ops/s
# Warmup Iteration  15: 26248231.460 ops/s
# Warmup Iteration  16: 25927981.203 ops/s
# Warmup Iteration  17: 25766246.914 ops/s
# Warmup Iteration  18: 25744507.195 ops/s
# Warmup Iteration  19: 26135740.164 ops/s
# Warmup Iteration  20: 25588427.468 ops/s
# Warmup Iteration  21: 25823617.502 ops/s
# Warmup Iteration  22: 25302986.463 ops/s
# Warmup Iteration  23: 25820229.556 ops/s
# Warmup Iteration  24: 25864587.345 ops/s
# Warmup Iteration  25: 25984868.061 ops/s
# Warmup Iteration  26: 25896817.691 ops/s
# Warmup Iteration  27: 25631869.420 ops/s
# Warmup Iteration  28: 25442296.208 ops/s
# Warmup Iteration  29: 25877416.745 ops/s
# Warmup Iteration  30: 26078434.526 ops/s
Iteration   1: 25558887.928 ops/s
Iteration   2: 25736703.779 ops/s
Iteration   3: 26383712.040 ops/s
Iteration   4: 26514573.790 ops/s
Iteration   5: 25617452.942 ops/s
Iteration   6: 26012057.927 ops/s
Iteration   7: 26379521.339 ops/s
Iteration   8: 26665551.569 ops/s
Iteration   9: 26103462.187 ops/s
Iteration  10: 26597925.577 ops/s
Iteration  11: 26704732.792 ops/s
Iteration  12: 26571742.282 ops/s
Iteration  13: 26090141.961 ops/s
Iteration  14: 26837047.668 ops/s
Iteration  15: 25441321.925 ops/s
Iteration  16: 25967155.982 ops/s
Iteration  17: 25327711.573 ops/s
Iteration  18: 25116749.763 ops/s
Iteration  19: 24985970.949 ops/s
Iteration  20: 25097065.490 ops/s
Iteration  21: 26099776.794 ops/s
Iteration  22: 25875117.117 ops/s
Iteration  23: 25106583.870 ops/s
Iteration  24: 26178664.610 ops/s
Iteration  25: 26204106.235 ops/s
Iteration  26: 26627581.690 ops/s
Iteration  27: 26809023.042 ops/s
Iteration  28: 26632365.467 ops/s
Iteration  29: 25663242.630 ops/s
Iteration  30: 25201625.055 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumInteger":
  26003585.866 ±(99.9%) 388283.193 ops/s [Average]
  (min, avg, max) = (24985970.949, 26003585.866, 26837047.668), stdev = 581164.048
  CI (99.9%): [25615302.673, 26391869.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_sumInteger  thrpt   30  26003585.866 ± 388283.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12095694.279 ops/s
# Warmup Iteration   2: 26002361.875 ops/s
# Warmup Iteration   3: 26279755.283 ops/s
# Warmup Iteration   4: 22342994.713 ops/s
# Warmup Iteration   5: 26776883.370 ops/s
# Warmup Iteration   6: 26318809.461 ops/s
# Warmup Iteration   7: 26227764.723 ops/s
# Warmup Iteration   8: 25719910.382 ops/s
# Warmup Iteration   9: 26258715.002 ops/s
# Warmup Iteration  10: 26439788.411 ops/s
# Warmup Iteration  11: 26324951.645 ops/s
# Warmup Iteration  12: 26413138.799 ops/s
# Warmup Iteration  13: 26558610.125 ops/s
# Warmup Iteration  14: 26615060.992 ops/s
# Warmup Iteration  15: 26739534.667 ops/s
# Warmup Iteration  16: 26087102.908 ops/s
# Warmup Iteration  17: 26099398.029 ops/s
# Warmup Iteration  18: 27078597.934 ops/s
# Warmup Iteration  19: 27488964.666 ops/s
# Warmup Iteration  20: 26954332.900 ops/s
# Warmup Iteration  21: 26513819.361 ops/s
# Warmup Iteration  22: 27442805.502 ops/s
# Warmup Iteration  23: 27200212.325 ops/s
# Warmup Iteration  24: 26216129.730 ops/s
# Warmup Iteration  25: 26407579.599 ops/s
# Warmup Iteration  26: 26494287.160 ops/s
# Warmup Iteration  27: 26614651.439 ops/s
# Warmup Iteration  28: 26815926.076 ops/s
# Warmup Iteration  29: 26752228.146 ops/s
# Warmup Iteration  30: 26255352.323 ops/s
Iteration   1: 25800708.824 ops/s
Iteration   2: 26733778.528 ops/s
Iteration   3: 26701875.789 ops/s
Iteration   4: 26709276.740 ops/s
Iteration   5: 26781779.003 ops/s
Iteration   6: 26930907.398 ops/s
Iteration   7: 26485551.439 ops/s
Iteration   8: 26557190.847 ops/s
Iteration   9: 26800031.175 ops/s
Iteration  10: 26703086.467 ops/s
Iteration  11: 26809979.438 ops/s
Iteration  12: 25996241.987 ops/s
Iteration  13: 26690466.239 ops/s
Iteration  14: 26269203.868 ops/s
Iteration  15: 26579277.664 ops/s
Iteration  16: 26559470.712 ops/s
Iteration  17: 26321848.118 ops/s
Iteration  18: 26299473.555 ops/s
Iteration  19: 25750550.475 ops/s
Iteration  20: 26703037.255 ops/s
Iteration  21: 26722458.585 ops/s
Iteration  22: 26934694.110 ops/s
Iteration  23: 26225124.399 ops/s
Iteration  24: 26040074.750 ops/s
Iteration  25: 26413900.422 ops/s
Iteration  26: 26958200.409 ops/s
Iteration  27: 26983506.261 ops/s
Iteration  28: 26638877.712 ops/s
Iteration  29: 27211705.012 ops/s
Iteration  30: 26460319.810 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_sumLong":
  26559086.566 ±(99.9%) 233804.283 ops/s [Average]
  (min, avg, max) = (25750550.475, 26559086.566, 27211705.012), stdev = 349947.271
  CI (99.9%): [26325282.283, 26792890.850] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_sumLong  thrpt   30  26559086.566 ± 233804.283  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2090459.641 ops/s
# Warmup Iteration   2: 4793077.578 ops/s
# Warmup Iteration   3: 5390515.721 ops/s
# Warmup Iteration   4: 5161849.588 ops/s
# Warmup Iteration   5: 4320463.068 ops/s
# Warmup Iteration   6: 5236396.922 ops/s
# Warmup Iteration   7: 5263180.569 ops/s
# Warmup Iteration   8: 5314242.767 ops/s
# Warmup Iteration   9: 5366278.727 ops/s
# Warmup Iteration  10: 5320671.887 ops/s
# Warmup Iteration  11: 5321206.532 ops/s
# Warmup Iteration  12: 5360910.126 ops/s
# Warmup Iteration  13: 5303613.420 ops/s
# Warmup Iteration  14: 5316537.269 ops/s
# Warmup Iteration  15: 5410706.608 ops/s
# Warmup Iteration  16: 5158118.607 ops/s
# Warmup Iteration  17: 5236801.477 ops/s
# Warmup Iteration  18: 5265133.326 ops/s
# Warmup Iteration  19: 5164008.737 ops/s
# Warmup Iteration  20: 5092281.812 ops/s
# Warmup Iteration  21: 5195892.407 ops/s
# Warmup Iteration  22: 5279712.108 ops/s
# Warmup Iteration  23: 5185737.855 ops/s
# Warmup Iteration  24: 5177779.304 ops/s
# Warmup Iteration  25: 5320397.035 ops/s
# Warmup Iteration  26: 5242716.678 ops/s
# Warmup Iteration  27: 5204267.971 ops/s
# Warmup Iteration  28: 5231056.416 ops/s
# Warmup Iteration  29: 5224901.948 ops/s
# Warmup Iteration  30: 5186474.488 ops/s
Iteration   1: 5170771.750 ops/s
Iteration   2: 5221886.662 ops/s
Iteration   3: 5231907.998 ops/s
Iteration   4: 5325052.385 ops/s
Iteration   5: 5269800.741 ops/s
Iteration   6: 5330295.449 ops/s
Iteration   7: 5151228.237 ops/s
Iteration   8: 5049295.674 ops/s
Iteration   9: 5106263.378 ops/s
Iteration  10: 5342675.681 ops/s
Iteration  11: 5393322.469 ops/s
Iteration  12: 5498047.914 ops/s
Iteration  13: 5238059.674 ops/s
Iteration  14: 5155338.333 ops/s
Iteration  15: 5129171.119 ops/s
Iteration  16: 5164314.870 ops/s
Iteration  17: 5277374.525 ops/s
Iteration  18: 5284107.013 ops/s
Iteration  19: 5319691.092 ops/s
Iteration  20: 5302368.147 ops/s
Iteration  21: 5339649.900 ops/s
Iteration  22: 5280354.933 ops/s
Iteration  23: 5136441.604 ops/s
Iteration  24: 5321463.291 ops/s
Iteration  25: 5294957.040 ops/s
Iteration  26: 5398457.815 ops/s
Iteration  27: 5227690.419 ops/s
Iteration  28: 5118731.343 ops/s
Iteration  29: 5189555.237 ops/s
Iteration  30: 5433733.598 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_take":
  5256733.610 ±(99.9%) 70900.185 ops/s [Average]
  (min, avg, max) = (5049295.674, 5256733.610, 5498047.914), stdev = 106120.067
  CI (99.9%): [5185833.425, 5327633.794] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_take  thrpt   30  5256733.610 ± 70900.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5878521.570 ops/s
# Warmup Iteration   2: 13638171.255 ops/s
# Warmup Iteration   3: 13936715.128 ops/s
# Warmup Iteration   4: 11607485.129 ops/s
# Warmup Iteration   5: 13956930.640 ops/s
# Warmup Iteration   6: 13752443.499 ops/s
# Warmup Iteration   7: 13741227.237 ops/s
# Warmup Iteration   8: 13904500.708 ops/s
# Warmup Iteration   9: 13859864.694 ops/s
# Warmup Iteration  10: 14150454.543 ops/s
# Warmup Iteration  11: 13997267.588 ops/s
# Warmup Iteration  12: 13663355.911 ops/s
# Warmup Iteration  13: 13884301.167 ops/s
# Warmup Iteration  14: 13825849.746 ops/s
# Warmup Iteration  15: 14179132.751 ops/s
# Warmup Iteration  16: 13980967.807 ops/s
# Warmup Iteration  17: 14459438.972 ops/s
# Warmup Iteration  18: 14179538.658 ops/s
# Warmup Iteration  19: 14010671.716 ops/s
# Warmup Iteration  20: 14014830.674 ops/s
# Warmup Iteration  21: 14478640.261 ops/s
# Warmup Iteration  22: 14168767.447 ops/s
# Warmup Iteration  23: 13978109.867 ops/s
# Warmup Iteration  24: 13843595.059 ops/s
# Warmup Iteration  25: 14060054.570 ops/s
# Warmup Iteration  26: 14110090.350 ops/s
# Warmup Iteration  27: 13923145.258 ops/s
# Warmup Iteration  28: 13943937.960 ops/s
# Warmup Iteration  29: 14170847.814 ops/s
# Warmup Iteration  30: 14601764.188 ops/s
Iteration   1: 14054539.380 ops/s
Iteration   2: 14412123.618 ops/s
Iteration   3: 14799026.901 ops/s
Iteration   4: 14241082.084 ops/s
Iteration   5: 13901006.606 ops/s
Iteration   6: 13987986.062 ops/s
Iteration   7: 13986297.423 ops/s
Iteration   8: 13975241.759 ops/s
Iteration   9: 13884765.555 ops/s
Iteration  10: 14080876.753 ops/s
Iteration  11: 13761338.797 ops/s
Iteration  12: 14216817.286 ops/s
Iteration  13: 14262400.102 ops/s
Iteration  14: 13936372.332 ops/s
Iteration  15: 14255534.357 ops/s
Iteration  16: 14045054.971 ops/s
Iteration  17: 13650682.004 ops/s
Iteration  18: 14213774.063 ops/s
Iteration  19: 13843982.027 ops/s
Iteration  20: 14302636.167 ops/s
Iteration  21: 14160121.232 ops/s
Iteration  22: 13949149.960 ops/s
Iteration  23: 14142139.501 ops/s
Iteration  24: 14316383.478 ops/s
Iteration  25: 14398328.874 ops/s
Iteration  26: 14269210.232 ops/s
Iteration  27: 14746881.469 ops/s
Iteration  28: 14763966.409 ops/s
Iteration  29: 14149972.201 ops/s
Iteration  30: 13877847.570 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_takeWhile":
  14152851.306 ±(99.9%) 187558.564 ops/s [Average]
  (min, avg, max) = (13650682.004, 14152851.306, 14799026.901), stdev = 280728.851
  CI (99.9%): [13965292.741, 14340409.870] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_takeWhile  thrpt   30  14152851.306 ± 187558.564  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706197.633 ops/s
# Warmup Iteration   2: 732841.143 ops/s
# Warmup Iteration   3: 914007.043 ops/s
# Warmup Iteration   4: 952847.414 ops/s
# Warmup Iteration   5: 954961.908 ops/s
# Warmup Iteration   6: 952909.733 ops/s
# Warmup Iteration   7: 946332.264 ops/s
# Warmup Iteration   8: 934741.662 ops/s
# Warmup Iteration   9: 927084.752 ops/s
# Warmup Iteration  10: 941227.828 ops/s
# Warmup Iteration  11: 955336.409 ops/s
# Warmup Iteration  12: 887152.677 ops/s
# Warmup Iteration  13: 893018.513 ops/s
# Warmup Iteration  14: 948910.287 ops/s
# Warmup Iteration  15: 942763.391 ops/s
# Warmup Iteration  16: 932908.824 ops/s
# Warmup Iteration  17: 1019792.337 ops/s
# Warmup Iteration  18: 1013771.055 ops/s
# Warmup Iteration  19: 1010591.211 ops/s
# Warmup Iteration  20: 985239.902 ops/s
# Warmup Iteration  21: 1007749.417 ops/s
# Warmup Iteration  22: 1026507.927 ops/s
# Warmup Iteration  23: 1014940.516 ops/s
# Warmup Iteration  24: 995706.616 ops/s
# Warmup Iteration  25: 998963.208 ops/s
# Warmup Iteration  26: 989105.223 ops/s
# Warmup Iteration  27: 989880.184 ops/s
# Warmup Iteration  28: 971752.842 ops/s
# Warmup Iteration  29: 964445.127 ops/s
# Warmup Iteration  30: 974990.937 ops/s
Iteration   1: 1001905.167 ops/s
Iteration   2: 986869.627 ops/s
Iteration   3: 1017763.112 ops/s
Iteration   4: 1035795.839 ops/s
Iteration   5: 1035101.060 ops/s
Iteration   6: 1015952.191 ops/s
Iteration   7: 991367.529 ops/s
Iteration   8: 1000375.444 ops/s
Iteration   9: 1008981.726 ops/s
Iteration  10: 997144.275 ops/s
Iteration  11: 1002562.677 ops/s
Iteration  12: 999865.027 ops/s
Iteration  13: 987789.296 ops/s
Iteration  14: 989230.975 ops/s
Iteration  15: 1020326.017 ops/s
Iteration  16: 977441.612 ops/s
Iteration  17: 996962.542 ops/s
Iteration  18: 1009296.907 ops/s
Iteration  19: 994906.260 ops/s
Iteration  20: 1013322.792 ops/s
Iteration  21: 1007678.966 ops/s
Iteration  22: 1004354.269 ops/s
Iteration  23: 992434.827 ops/s
Iteration  24: 1002920.187 ops/s
Iteration  25: 1016864.944 ops/s
Iteration  26: 1029787.871 ops/s
Iteration  27: 1010630.816 ops/s
Iteration  28: 1029188.767 ops/s
Iteration  29: 995699.485 ops/s
Iteration  30: 977340.898 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_take_throws":
  1004995.370 ±(99.9%) 10364.838 ops/s [Average]
  (min, avg, max) = (977340.898, 1004995.370, 1035795.839), stdev = 15513.602
  CI (99.9%): [994630.532, 1015360.208] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_take_throws  thrpt   30  1004995.370 ± 10364.838  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11473940.244 ops/s
# Warmup Iteration   2: 23994231.309 ops/s
# Warmup Iteration   3: 20778566.658 ops/s
# Warmup Iteration   4: 24262197.737 ops/s
# Warmup Iteration   5: 24107557.242 ops/s
# Warmup Iteration   6: 24063490.739 ops/s
# Warmup Iteration   7: 24018853.794 ops/s
# Warmup Iteration   8: 24369609.399 ops/s
# Warmup Iteration   9: 24248466.847 ops/s
# Warmup Iteration  10: 23980378.475 ops/s
# Warmup Iteration  11: 23783409.213 ops/s
# Warmup Iteration  12: 24272665.609 ops/s
# Warmup Iteration  13: 24493031.275 ops/s
# Warmup Iteration  14: 24557354.169 ops/s
# Warmup Iteration  15: 24354646.045 ops/s
# Warmup Iteration  16: 24079955.227 ops/s
# Warmup Iteration  17: 24149614.335 ops/s
# Warmup Iteration  18: 24464534.102 ops/s
# Warmup Iteration  19: 24290196.949 ops/s
# Warmup Iteration  20: 24250042.820 ops/s
# Warmup Iteration  21: 24400296.724 ops/s
# Warmup Iteration  22: 23983737.035 ops/s
# Warmup Iteration  23: 24488850.588 ops/s
# Warmup Iteration  24: 24452838.171 ops/s
# Warmup Iteration  25: 24494941.527 ops/s
# Warmup Iteration  26: 24286994.597 ops/s
# Warmup Iteration  27: 24306110.055 ops/s
# Warmup Iteration  28: 24554761.996 ops/s
# Warmup Iteration  29: 23602610.953 ops/s
# Warmup Iteration  30: 23553225.656 ops/s
Iteration   1: 24279537.803 ops/s
Iteration   2: 24449616.029 ops/s
Iteration   3: 23840850.912 ops/s
Iteration   4: 23824769.299 ops/s
Iteration   5: 23987657.565 ops/s
Iteration   6: 24490965.073 ops/s
Iteration   7: 24377772.969 ops/s
Iteration   8: 24486151.203 ops/s
Iteration   9: 24456826.248 ops/s
Iteration  10: 24445465.646 ops/s
Iteration  11: 24589305.913 ops/s
Iteration  12: 24533539.415 ops/s
Iteration  13: 24515313.169 ops/s
Iteration  14: 22374795.475 ops/s
Iteration  15: 24522788.379 ops/s
Iteration  16: 24446167.458 ops/s
Iteration  17: 24507774.902 ops/s
Iteration  18: 24469623.519 ops/s
Iteration  19: 24510365.005 ops/s
Iteration  20: 24468734.768 ops/s
Iteration  21: 24488317.738 ops/s
Iteration  22: 24516778.180 ops/s
Iteration  23: 24466793.299 ops/s
Iteration  24: 23594526.187 ops/s
Iteration  25: 24410093.003 ops/s
Iteration  26: 24476313.944 ops/s
Iteration  27: 24521453.858 ops/s
Iteration  28: 24326849.165 ops/s
Iteration  29: 24497591.498 ops/s
Iteration  30: 24457067.811 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_tap":
  24311126.848 ±(99.9%) 292214.631 ops/s [Average]
  (min, avg, max) = (22374795.475, 24311126.848, 24589305.913), stdev = 437373.136
  CI (99.9%): [24018912.217, 24603341.479] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_tap  thrpt   30  24311126.848 ± 292214.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1052863.170 ops/s
# Warmup Iteration   2: 2405776.499 ops/s
# Warmup Iteration   3: 2439729.098 ops/s
# Warmup Iteration   4: 2040122.737 ops/s
# Warmup Iteration   5: 2439855.023 ops/s
# Warmup Iteration   6: 2432237.236 ops/s
# Warmup Iteration   7: 2436077.890 ops/s
# Warmup Iteration   8: 2422696.562 ops/s
# Warmup Iteration   9: 2387331.229 ops/s
# Warmup Iteration  10: 2381031.042 ops/s
# Warmup Iteration  11: 2347515.444 ops/s
# Warmup Iteration  12: 2394750.388 ops/s
# Warmup Iteration  13: 2402037.007 ops/s
# Warmup Iteration  14: 2357360.732 ops/s
# Warmup Iteration  15: 2414488.195 ops/s
# Warmup Iteration  16: 2427144.544 ops/s
# Warmup Iteration  17: 2391993.545 ops/s
# Warmup Iteration  18: 2341096.120 ops/s
# Warmup Iteration  19: 2331879.465 ops/s
# Warmup Iteration  20: 2330801.888 ops/s
# Warmup Iteration  21: 2332355.692 ops/s
# Warmup Iteration  22: 2359028.804 ops/s
# Warmup Iteration  23: 2350270.098 ops/s
# Warmup Iteration  24: 2399303.000 ops/s
# Warmup Iteration  25: 2363889.571 ops/s
# Warmup Iteration  26: 2405821.645 ops/s
# Warmup Iteration  27: 2359686.799 ops/s
# Warmup Iteration  28: 2309974.955 ops/s
# Warmup Iteration  29: 2388461.220 ops/s
# Warmup Iteration  30: 2366816.066 ops/s
Iteration   1: 2406391.796 ops/s
Iteration   2: 2387463.924 ops/s
Iteration   3: 2390131.273 ops/s
Iteration   4: 2384973.973 ops/s
Iteration   5: 2401463.299 ops/s
Iteration   6: 2442861.556 ops/s
Iteration   7: 2425474.704 ops/s
Iteration   8: 2438877.415 ops/s
Iteration   9: 2439828.300 ops/s
Iteration  10: 2436808.662 ops/s
Iteration  11: 2365961.860 ops/s
Iteration  12: 2347118.316 ops/s
Iteration  13: 2333178.406 ops/s
Iteration  14: 2364446.762 ops/s
Iteration  15: 2370064.525 ops/s
Iteration  16: 2409272.139 ops/s
Iteration  17: 2441423.587 ops/s
Iteration  18: 2427164.872 ops/s
Iteration  19: 2443320.077 ops/s
Iteration  20: 2435643.682 ops/s
Iteration  21: 2417004.727 ops/s
Iteration  22: 2338485.691 ops/s
Iteration  23: 2397177.174 ops/s
Iteration  24: 2301415.511 ops/s
Iteration  25: 2389060.489 ops/s
Iteration  26: 2401414.538 ops/s
Iteration  27: 2384844.197 ops/s
Iteration  28: 2396661.564 ops/s
Iteration  29: 2363707.404 ops/s
Iteration  30: 2406745.268 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_testToString":
  2396279.523 ±(99.9%) 24450.416 ops/s [Average]
  (min, avg, max) = (2301415.511, 2396279.523, 2443320.077), stdev = 36596.235
  CI (99.9%): [2371829.107, 2420729.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_testToString  thrpt   30  2396279.523 ± 24450.416  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5987611.351 ops/s
# Warmup Iteration   2: 12500049.461 ops/s
# Warmup Iteration   3: 10414678.435 ops/s
# Warmup Iteration   4: 12387531.597 ops/s
# Warmup Iteration   5: 12338804.941 ops/s
# Warmup Iteration   6: 12263620.451 ops/s
# Warmup Iteration   7: 12077738.361 ops/s
# Warmup Iteration   8: 12172448.782 ops/s
# Warmup Iteration   9: 12227507.954 ops/s
# Warmup Iteration  10: 12202691.611 ops/s
# Warmup Iteration  11: 12121876.565 ops/s
# Warmup Iteration  12: 12174764.580 ops/s
# Warmup Iteration  13: 12320386.761 ops/s
# Warmup Iteration  14: 12195097.459 ops/s
# Warmup Iteration  15: 12284853.548 ops/s
# Warmup Iteration  16: 12213479.220 ops/s
# Warmup Iteration  17: 12436259.918 ops/s
# Warmup Iteration  18: 12263962.300 ops/s
# Warmup Iteration  19: 12419345.861 ops/s
# Warmup Iteration  20: 12399719.003 ops/s
# Warmup Iteration  21: 12353567.440 ops/s
# Warmup Iteration  22: 11971456.974 ops/s
# Warmup Iteration  23: 12316611.582 ops/s
# Warmup Iteration  24: 12188138.264 ops/s
# Warmup Iteration  25: 12346439.644 ops/s
# Warmup Iteration  26: 12071282.151 ops/s
# Warmup Iteration  27: 12402521.446 ops/s
# Warmup Iteration  28: 12368902.024 ops/s
# Warmup Iteration  29: 12189159.167 ops/s
# Warmup Iteration  30: 12334882.036 ops/s
Iteration   1: 12434207.740 ops/s
Iteration   2: 12372410.930 ops/s
Iteration   3: 12371358.108 ops/s
Iteration   4: 12406934.354 ops/s
Iteration   5: 11013753.146 ops/s
Iteration   6: 12391031.245 ops/s
Iteration   7: 12355801.884 ops/s
Iteration   8: 12430639.754 ops/s
Iteration   9: 12388703.153 ops/s
Iteration  10: 12436601.267 ops/s
Iteration  11: 12380940.416 ops/s
Iteration  12: 12338765.712 ops/s
Iteration  13: 12245921.090 ops/s
Iteration  14: 12395225.886 ops/s
Iteration  15: 12380564.865 ops/s
Iteration  16: 12335013.006 ops/s
Iteration  17: 12384874.062 ops/s
Iteration  18: 12337378.526 ops/s
Iteration  19: 12155923.681 ops/s
Iteration  20: 12358653.122 ops/s
Iteration  21: 12334004.733 ops/s
Iteration  22: 12303278.541 ops/s
Iteration  23: 11805160.807 ops/s
Iteration  24: 12363853.885 ops/s
Iteration  25: 12407741.679 ops/s
Iteration  26: 12352429.584 ops/s
Iteration  27: 12358326.956 ops/s
Iteration  28: 12402028.223 ops/s
Iteration  29: 12422910.957 ops/s
Iteration  30: 12351361.790 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toArray":
  12300526.637 ±(99.9%) 180035.449 ops/s [Average]
  (min, avg, max) = (11013753.146, 12300526.637, 12436601.267), stdev = 269468.604
  CI (99.9%): [12120491.188, 12480562.085] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_toArray  thrpt   30  12300526.637 ± 180035.449  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 166344227.513 ops/s
# Warmup Iteration   2: 301723505.239 ops/s
# Warmup Iteration   3: 280137089.997 ops/s
# Warmup Iteration   4: 316687514.520 ops/s
# Warmup Iteration   5: 317614378.431 ops/s
# Warmup Iteration   6: 315476751.681 ops/s
# Warmup Iteration   7: 316089098.211 ops/s
# Warmup Iteration   8: 316947267.672 ops/s
# Warmup Iteration   9: 317886299.975 ops/s
# Warmup Iteration  10: 317838845.875 ops/s
# Warmup Iteration  11: 318233857.191 ops/s
# Warmup Iteration  12: 316806846.448 ops/s
# Warmup Iteration  13: 317486082.628 ops/s
# Warmup Iteration  14: 317367575.911 ops/s
# Warmup Iteration  15: 317008287.837 ops/s
# Warmup Iteration  16: 314866263.057 ops/s
# Warmup Iteration  17: 315597758.161 ops/s
# Warmup Iteration  18: 317390588.719 ops/s
# Warmup Iteration  19: 315827791.684 ops/s
# Warmup Iteration  20: 316952325.054 ops/s
# Warmup Iteration  21: 317829917.784 ops/s
# Warmup Iteration  22: 316867551.485 ops/s
# Warmup Iteration  23: 318052865.893 ops/s
# Warmup Iteration  24: 315647565.057 ops/s
# Warmup Iteration  25: 316466283.481 ops/s
# Warmup Iteration  26: 317272972.832 ops/s
# Warmup Iteration  27: 316094001.474 ops/s
# Warmup Iteration  28: 315508694.341 ops/s
# Warmup Iteration  29: 315377790.131 ops/s
# Warmup Iteration  30: 314744554.902 ops/s
Iteration   1: 315346395.217 ops/s
Iteration   2: 317228724.433 ops/s
Iteration   3: 316632992.589 ops/s
Iteration   4: 317664229.399 ops/s
Iteration   5: 316456850.077 ops/s
Iteration   6: 314964067.379 ops/s
Iteration   7: 317246396.891 ops/s
Iteration   8: 317404066.365 ops/s
Iteration   9: 317918633.456 ops/s
Iteration  10: 316346412.751 ops/s
Iteration  11: 315577211.223 ops/s
Iteration  12: 315701741.631 ops/s
Iteration  13: 316702999.322 ops/s
Iteration  14: 317930067.933 ops/s
Iteration  15: 315716454.300 ops/s
Iteration  16: 316631561.882 ops/s
Iteration  17: 316220767.524 ops/s
Iteration  18: 317788400.244 ops/s
Iteration  19: 318272853.849 ops/s
Iteration  20: 315956009.461 ops/s
Iteration  21: 315647607.007 ops/s
Iteration  22: 317714096.838 ops/s
Iteration  23: 317077716.170 ops/s
Iteration  24: 314781331.092 ops/s
Iteration  25: 314928862.969 ops/s
Iteration  26: 316085239.935 ops/s
Iteration  27: 314055341.864 ops/s
Iteration  28: 314399319.739 ops/s
Iteration  29: 312868163.868 ops/s
Iteration  30: 316801700.960 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toImmutable":
  316268873.879 ±(99.9%) 864783.616 ops/s [Average]
  (min, avg, max) = (312868163.868, 316268873.879, 318272853.849), stdev = 1294367.504
  CI (99.9%): [315404090.263, 317133657.495] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt          Score        Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_toImmutable  thrpt   30  316268873.879 ± 864783.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2595178.960 ops/s
# Warmup Iteration   2: 5718895.001 ops/s
# Warmup Iteration   3: 5758229.550 ops/s
# Warmup Iteration   4: 4857077.791 ops/s
# Warmup Iteration   5: 5768367.736 ops/s
# Warmup Iteration   6: 5762074.571 ops/s
# Warmup Iteration   7: 5765552.110 ops/s
# Warmup Iteration   8: 5775133.577 ops/s
# Warmup Iteration   9: 5778684.475 ops/s
# Warmup Iteration  10: 5693682.965 ops/s
# Warmup Iteration  11: 5712431.792 ops/s
# Warmup Iteration  12: 5745315.211 ops/s
# Warmup Iteration  13: 5728341.738 ops/s
# Warmup Iteration  14: 5760187.124 ops/s
# Warmup Iteration  15: 5754982.365 ops/s
# Warmup Iteration  16: 5744622.723 ops/s
# Warmup Iteration  17: 5728654.849 ops/s
# Warmup Iteration  18: 5739281.710 ops/s
# Warmup Iteration  19: 5716070.964 ops/s
# Warmup Iteration  20: 5748138.153 ops/s
# Warmup Iteration  21: 5717296.172 ops/s
# Warmup Iteration  22: 5758067.352 ops/s
# Warmup Iteration  23: 5771769.207 ops/s
# Warmup Iteration  24: 5755863.355 ops/s
# Warmup Iteration  25: 5755619.348 ops/s
# Warmup Iteration  26: 5761225.030 ops/s
# Warmup Iteration  27: 5749468.323 ops/s
# Warmup Iteration  28: 5708046.942 ops/s
# Warmup Iteration  29: 5725948.894 ops/s
# Warmup Iteration  30: 5739183.146 ops/s
Iteration   1: 5758534.467 ops/s
Iteration   2: 5768808.123 ops/s
Iteration   3: 5746660.361 ops/s
Iteration   4: 5772182.049 ops/s
Iteration   5: 5780737.961 ops/s
Iteration   6: 5769533.517 ops/s
Iteration   7: 5769545.022 ops/s
Iteration   8: 5768197.069 ops/s
Iteration   9: 5780227.198 ops/s
Iteration  10: 5773853.341 ops/s
Iteration  11: 5769190.303 ops/s
Iteration  12: 5775576.779 ops/s
Iteration  13: 5746314.403 ops/s
Iteration  14: 5759048.239 ops/s
Iteration  15: 5765568.431 ops/s
Iteration  16: 5777003.050 ops/s
Iteration  17: 5776404.341 ops/s
Iteration  18: 5768209.674 ops/s
Iteration  19: 5767717.409 ops/s
Iteration  20: 5755473.491 ops/s
Iteration  21: 5768648.061 ops/s
Iteration  22: 5752505.449 ops/s
Iteration  23: 5768555.382 ops/s
Iteration  24: 5778717.226 ops/s
Iteration  25: 5764515.561 ops/s
Iteration  26: 5774057.268 ops/s
Iteration  27: 5780246.641 ops/s
Iteration  28: 5754717.043 ops/s
Iteration  29: 5753562.439 ops/s
Iteration  30: 5760209.445 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toList":
  5766817.325 ±(99.9%) 6560.085 ops/s [Average]
  (min, avg, max) = (5746314.403, 5766817.325, 5780737.961), stdev = 9818.826
  CI (99.9%): [5760257.240, 5773377.409] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_toList  thrpt   30  5766817.325 ± 6560.085  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1701003.930 ops/s
# Warmup Iteration   2: 2140048.229 ops/s
# Warmup Iteration   3: 2793498.159 ops/s
# Warmup Iteration   4: 2780678.504 ops/s
# Warmup Iteration   5: 2792759.422 ops/s
# Warmup Iteration   6: 2793764.787 ops/s
# Warmup Iteration   7: 2793422.545 ops/s
# Warmup Iteration   8: 2644650.511 ops/s
# Warmup Iteration   9: 2472843.908 ops/s
# Warmup Iteration  10: 2796270.390 ops/s
# Warmup Iteration  11: 2760839.113 ops/s
# Warmup Iteration  12: 2781977.987 ops/s
# Warmup Iteration  13: 2785854.702 ops/s
# Warmup Iteration  14: 2684731.790 ops/s
# Warmup Iteration  15: 2674673.631 ops/s
# Warmup Iteration  16: 2705118.416 ops/s
# Warmup Iteration  17: 2699929.847 ops/s
# Warmup Iteration  18: 2669327.644 ops/s
# Warmup Iteration  19: 2737530.845 ops/s
# Warmup Iteration  20: 2624078.627 ops/s
# Warmup Iteration  21: 2707604.223 ops/s
# Warmup Iteration  22: 2657739.368 ops/s
# Warmup Iteration  23: 2720437.697 ops/s
# Warmup Iteration  24: 2791238.736 ops/s
# Warmup Iteration  25: 2794712.577 ops/s
# Warmup Iteration  26: 2787660.845 ops/s
# Warmup Iteration  27: 2789555.568 ops/s
# Warmup Iteration  28: 2791800.694 ops/s
# Warmup Iteration  29: 2786789.592 ops/s
# Warmup Iteration  30: 2790220.644 ops/s
Iteration   1: 2795134.289 ops/s
Iteration   2: 2792615.049 ops/s
Iteration   3: 2789139.144 ops/s
Iteration   4: 2792840.175 ops/s
Iteration   5: 2797121.236 ops/s
Iteration   6: 2799325.618 ops/s
Iteration   7: 2799869.448 ops/s
Iteration   8: 2786792.334 ops/s
Iteration   9: 2802188.763 ops/s
Iteration  10: 2797909.123 ops/s
Iteration  11: 2793076.662 ops/s
Iteration  12: 2801112.076 ops/s
Iteration  13: 2791315.599 ops/s
Iteration  14: 2801007.165 ops/s
Iteration  15: 2796117.238 ops/s
Iteration  16: 2793254.900 ops/s
Iteration  17: 2792900.459 ops/s
Iteration  18: 2790574.467 ops/s
Iteration  19: 2779669.405 ops/s
Iteration  20: 2790423.592 ops/s
Iteration  21: 2800353.125 ops/s
Iteration  22: 2779255.241 ops/s
Iteration  23: 2778709.270 ops/s
Iteration  24: 2797172.473 ops/s
Iteration  25: 2785671.179 ops/s
Iteration  26: 2769798.634 ops/s
Iteration  27: 2795469.368 ops/s
Iteration  28: 2801427.429 ops/s
Iteration  29: 2799748.803 ops/s
Iteration  30: 2798845.894 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toReversed":
  2792961.272 ±(99.9%) 5288.599 ops/s [Average]
  (min, avg, max) = (2769798.634, 2792961.272, 2802188.763), stdev = 7915.727
  CI (99.9%): [2787672.673, 2798249.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_toReversed  thrpt   30  2792961.272 ± 5288.599  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2774348.370 ops/s
# Warmup Iteration   2: 4428515.094 ops/s
# Warmup Iteration   3: 5035696.348 ops/s
# Warmup Iteration   4: 5069211.014 ops/s
# Warmup Iteration   5: 5067238.204 ops/s
# Warmup Iteration   6: 4395845.816 ops/s
# Warmup Iteration   7: 4873561.740 ops/s
# Warmup Iteration   8: 5060744.703 ops/s
# Warmup Iteration   9: 5067922.758 ops/s
# Warmup Iteration  10: 5059030.510 ops/s
# Warmup Iteration  11: 5074313.735 ops/s
# Warmup Iteration  12: 5072453.344 ops/s
# Warmup Iteration  13: 5061763.548 ops/s
# Warmup Iteration  14: 5067813.584 ops/s
# Warmup Iteration  15: 5072769.176 ops/s
# Warmup Iteration  16: 5072560.706 ops/s
# Warmup Iteration  17: 5060456.840 ops/s
# Warmup Iteration  18: 5059896.427 ops/s
# Warmup Iteration  19: 5062326.244 ops/s
# Warmup Iteration  20: 5054736.770 ops/s
# Warmup Iteration  21: 5052336.375 ops/s
# Warmup Iteration  22: 5061783.136 ops/s
# Warmup Iteration  23: 5076671.325 ops/s
# Warmup Iteration  24: 5066417.092 ops/s
# Warmup Iteration  25: 5070216.308 ops/s
# Warmup Iteration  26: 5068264.290 ops/s
# Warmup Iteration  27: 5067086.143 ops/s
# Warmup Iteration  28: 5061006.591 ops/s
# Warmup Iteration  29: 5068837.213 ops/s
# Warmup Iteration  30: 5069069.722 ops/s
Iteration   1: 5059123.137 ops/s
Iteration   2: 5065899.098 ops/s
Iteration   3: 5062131.686 ops/s
Iteration   4: 5045091.270 ops/s
Iteration   5: 5080026.621 ops/s
Iteration   6: 5070049.454 ops/s
Iteration   7: 5070124.473 ops/s
Iteration   8: 5075173.687 ops/s
Iteration   9: 5068418.027 ops/s
Iteration  10: 5074554.533 ops/s
Iteration  11: 5053699.359 ops/s
Iteration  12: 5016292.758 ops/s
Iteration  13: 4969034.056 ops/s
Iteration  14: 4961832.037 ops/s
Iteration  15: 4832247.638 ops/s
Iteration  16: 4807273.181 ops/s
Iteration  17: 4885107.050 ops/s
Iteration  18: 5046429.219 ops/s
Iteration  19: 5009670.118 ops/s
Iteration  20: 5054471.241 ops/s
Iteration  21: 5056203.485 ops/s
Iteration  22: 5070777.498 ops/s
Iteration  23: 5069641.203 ops/s
Iteration  24: 5091084.085 ops/s
Iteration  25: 5071216.584 ops/s
Iteration  26: 5078276.636 ops/s
Iteration  27: 5059381.939 ops/s
Iteration  28: 5063600.239 ops/s
Iteration  29: 5073195.486 ops/s
Iteration  30: 5081008.277 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedList":
  5034034.469 ±(99.9%) 48428.635 ops/s [Average]
  (min, avg, max) = (4807273.181, 5034034.469, 5091084.085), stdev = 72485.706
  CI (99.9%): [4985605.834, 5082463.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedList  thrpt   30  5034034.469 ± 48428.635  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1501652.864 ops/s
# Warmup Iteration   2: 1639818.658 ops/s
# Warmup Iteration   3: 1700328.964 ops/s
# Warmup Iteration   4: 2058683.061 ops/s
# Warmup Iteration   5: 2060231.969 ops/s
# Warmup Iteration   6: 2062104.332 ops/s
# Warmup Iteration   7: 2061870.738 ops/s
# Warmup Iteration   8: 2048122.426 ops/s
# Warmup Iteration   9: 2055608.828 ops/s
# Warmup Iteration  10: 2054575.046 ops/s
# Warmup Iteration  11: 2064234.795 ops/s
# Warmup Iteration  12: 2061455.907 ops/s
# Warmup Iteration  13: 2061072.583 ops/s
# Warmup Iteration  14: 2054103.047 ops/s
# Warmup Iteration  15: 2064482.710 ops/s
# Warmup Iteration  16: 2061342.382 ops/s
# Warmup Iteration  17: 1717833.566 ops/s
# Warmup Iteration  18: 2036242.802 ops/s
# Warmup Iteration  19: 2063395.962 ops/s
# Warmup Iteration  20: 2061159.156 ops/s
# Warmup Iteration  21: 2059796.789 ops/s
# Warmup Iteration  22: 2062542.672 ops/s
# Warmup Iteration  23: 2061717.432 ops/s
# Warmup Iteration  24: 2059951.704 ops/s
# Warmup Iteration  25: 2056835.426 ops/s
# Warmup Iteration  26: 2154934.656 ops/s
# Warmup Iteration  27: 2158401.402 ops/s
# Warmup Iteration  28: 2157954.392 ops/s
# Warmup Iteration  29: 2157407.190 ops/s
# Warmup Iteration  30: 2155168.057 ops/s
Iteration   1: 2160276.865 ops/s
Iteration   2: 2159512.128 ops/s
Iteration   3: 2156986.719 ops/s
Iteration   4: 2158710.563 ops/s
Iteration   5: 2153770.120 ops/s
Iteration   6: 2158500.553 ops/s
Iteration   7: 2159900.961 ops/s
Iteration   8: 2160740.496 ops/s
Iteration   9: 2160842.173 ops/s
Iteration  10: 2160772.234 ops/s
Iteration  11: 2159397.725 ops/s
Iteration  12: 2155921.087 ops/s
Iteration  13: 2125440.186 ops/s
Iteration  14: 2029674.071 ops/s
Iteration  15: 2029361.436 ops/s
Iteration  16: 2030429.718 ops/s
Iteration  17: 2030581.592 ops/s
Iteration  18: 2031155.914 ops/s
Iteration  19: 2041593.358 ops/s
Iteration  20: 2034156.492 ops/s
Iteration  21: 2021702.450 ops/s
Iteration  22: 2030946.803 ops/s
Iteration  23: 2028360.135 ops/s
Iteration  24: 2028154.178 ops/s
Iteration  25: 2028640.996 ops/s
Iteration  26: 2030084.426 ops/s
Iteration  27: 2028876.516 ops/s
Iteration  28: 2030821.040 ops/s
Iteration  29: 2030179.419 ops/s
Iteration  30: 2026699.513 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedListBy":
  2084739.662 ±(99.9%) 42711.272 ops/s [Average]
  (min, avg, max) = (2021702.450, 2084739.662, 2160842.173), stdev = 63928.227
  CI (99.9%): [2042028.390, 2127450.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  2084739.662 ± 42711.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1565456.721 ops/s
# Warmup Iteration   2: 3647887.764 ops/s
# Warmup Iteration   3: 3673232.203 ops/s
# Warmup Iteration   4: 3074100.786 ops/s
# Warmup Iteration   5: 3682100.405 ops/s
# Warmup Iteration   6: 3677412.262 ops/s
# Warmup Iteration   7: 3670923.139 ops/s
# Warmup Iteration   8: 3672558.430 ops/s
# Warmup Iteration   9: 3677132.397 ops/s
# Warmup Iteration  10: 3671085.941 ops/s
# Warmup Iteration  11: 3673550.646 ops/s
# Warmup Iteration  12: 3680403.035 ops/s
# Warmup Iteration  13: 3680598.736 ops/s
# Warmup Iteration  14: 3657132.795 ops/s
# Warmup Iteration  15: 3687152.685 ops/s
# Warmup Iteration  16: 3672922.025 ops/s
# Warmup Iteration  17: 3660237.968 ops/s
# Warmup Iteration  18: 3681060.099 ops/s
# Warmup Iteration  19: 3683923.473 ops/s
# Warmup Iteration  20: 3680715.164 ops/s
# Warmup Iteration  21: 3683033.972 ops/s
# Warmup Iteration  22: 3681452.642 ops/s
# Warmup Iteration  23: 3687562.218 ops/s
# Warmup Iteration  24: 3678538.110 ops/s
# Warmup Iteration  25: 3686181.892 ops/s
# Warmup Iteration  26: 3681203.432 ops/s
# Warmup Iteration  27: 3685181.596 ops/s
# Warmup Iteration  28: 3686971.921 ops/s
# Warmup Iteration  29: 3681156.123 ops/s
# Warmup Iteration  30: 3681115.537 ops/s
Iteration   1: 3683382.508 ops/s
Iteration   2: 3681743.396 ops/s
Iteration   3: 3679272.575 ops/s
Iteration   4: 3685367.676 ops/s
Iteration   5: 3676216.372 ops/s
Iteration   6: 3677261.876 ops/s
Iteration   7: 3678257.073 ops/s
Iteration   8: 3675178.931 ops/s
Iteration   9: 3680315.922 ops/s
Iteration  10: 3679185.670 ops/s
Iteration  11: 3679659.589 ops/s
Iteration  12: 3622478.582 ops/s
Iteration  13: 3663560.860 ops/s
Iteration  14: 3577235.277 ops/s
Iteration  15: 3681217.022 ops/s
Iteration  16: 3663404.461 ops/s
Iteration  17: 3673651.192 ops/s
Iteration  18: 3688747.197 ops/s
Iteration  19: 3684025.806 ops/s
Iteration  20: 3669755.573 ops/s
Iteration  21: 3694205.297 ops/s
Iteration  22: 3676491.146 ops/s
Iteration  23: 3683917.758 ops/s
Iteration  24: 3672441.350 ops/s
Iteration  25: 3677511.109 ops/s
Iteration  26: 3677358.741 ops/s
Iteration  27: 3690027.639 ops/s
Iteration  28: 3683637.063 ops/s
Iteration  29: 3681393.751 ops/s
Iteration  30: 3689992.828 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedSet":
  3674229.808 ±(99.9%) 14817.224 ops/s [Average]
  (min, avg, max) = (3577235.277, 3674229.808, 3694205.297), stdev = 22177.725
  CI (99.9%): [3659412.584, 3689047.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedSet  thrpt   30  3674229.808 ± 14817.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 487172.979 ops/s
# Warmup Iteration   2: 1020695.431 ops/s
# Warmup Iteration   3: 1052900.487 ops/s
# Warmup Iteration   4: 1054167.345 ops/s
# Warmup Iteration   5: 884227.299 ops/s
# Warmup Iteration   6: 1058018.853 ops/s
# Warmup Iteration   7: 1052719.224 ops/s
# Warmup Iteration   8: 1053944.987 ops/s
# Warmup Iteration   9: 1056767.321 ops/s
# Warmup Iteration  10: 1058262.830 ops/s
# Warmup Iteration  11: 1059863.973 ops/s
# Warmup Iteration  12: 1056331.942 ops/s
# Warmup Iteration  13: 1057653.959 ops/s
# Warmup Iteration  14: 1057649.327 ops/s
# Warmup Iteration  15: 1060531.581 ops/s
# Warmup Iteration  16: 1058646.136 ops/s
# Warmup Iteration  17: 1053971.297 ops/s
# Warmup Iteration  18: 1052980.678 ops/s
# Warmup Iteration  19: 1054236.547 ops/s
# Warmup Iteration  20: 1054458.557 ops/s
# Warmup Iteration  21: 1048468.601 ops/s
# Warmup Iteration  22: 1057384.049 ops/s
# Warmup Iteration  23: 1056447.075 ops/s
# Warmup Iteration  24: 1057077.256 ops/s
# Warmup Iteration  25: 1056603.416 ops/s
# Warmup Iteration  26: 1056935.331 ops/s
# Warmup Iteration  27: 1053976.922 ops/s
# Warmup Iteration  28: 1055837.625 ops/s
# Warmup Iteration  29: 1054745.039 ops/s
# Warmup Iteration  30: 1055567.636 ops/s
Iteration   1: 1050003.183 ops/s
Iteration   2: 1054263.480 ops/s
Iteration   3: 1055164.560 ops/s
Iteration   4: 1055625.151 ops/s
Iteration   5: 1056015.854 ops/s
Iteration   6: 1053516.996 ops/s
Iteration   7: 1058631.517 ops/s
Iteration   8: 1056281.407 ops/s
Iteration   9: 1057248.534 ops/s
Iteration  10: 1057344.049 ops/s
Iteration  11: 1054095.789 ops/s
Iteration  12: 1051995.814 ops/s
Iteration  13: 1051665.755 ops/s
Iteration  14: 1059238.758 ops/s
Iteration  15: 1051271.631 ops/s
Iteration  16: 1052779.583 ops/s
Iteration  17: 1051858.160 ops/s
Iteration  18: 1058785.758 ops/s
Iteration  19: 1053975.047 ops/s
Iteration  20: 1050433.803 ops/s
Iteration  21: 1049571.021 ops/s
Iteration  22: 1053588.486 ops/s
Iteration  23: 1051983.683 ops/s
Iteration  24: 1056626.195 ops/s
Iteration  25: 1057108.144 ops/s
Iteration  26: 1057838.182 ops/s
Iteration  27: 1055260.553 ops/s
Iteration  28: 1055931.372 ops/s
Iteration  29: 1058230.665 ops/s
Iteration  30: 1054809.066 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedSetBy":
  1054704.740 ±(99.9%) 1852.293 ops/s [Average]
  (min, avg, max) = (1049571.021, 1054704.740, 1059238.758), stdev = 2772.426
  CI (99.9%): [1052852.446, 1056557.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1054704.740 ± 1852.293  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1135024.836 ops/s
# Warmup Iteration   2: 2262729.520 ops/s
# Warmup Iteration   3: 2430320.443 ops/s
# Warmup Iteration   4: 2444108.308 ops/s
# Warmup Iteration   5: 2049483.521 ops/s
# Warmup Iteration   6: 2452262.283 ops/s
# Warmup Iteration   7: 2451575.642 ops/s
# Warmup Iteration   8: 2447143.627 ops/s
# Warmup Iteration   9: 2451806.464 ops/s
# Warmup Iteration  10: 2450919.802 ops/s
# Warmup Iteration  11: 2447867.205 ops/s
# Warmup Iteration  12: 2450967.810 ops/s
# Warmup Iteration  13: 2447146.863 ops/s
# Warmup Iteration  14: 2449849.209 ops/s
# Warmup Iteration  15: 2442328.330 ops/s
# Warmup Iteration  16: 2429463.175 ops/s
# Warmup Iteration  17: 2444539.982 ops/s
# Warmup Iteration  18: 2458127.226 ops/s
# Warmup Iteration  19: 2455681.194 ops/s
# Warmup Iteration  20: 2458950.577 ops/s
# Warmup Iteration  21: 2458872.076 ops/s
# Warmup Iteration  22: 2456246.898 ops/s
# Warmup Iteration  23: 2458808.328 ops/s
# Warmup Iteration  24: 2450303.916 ops/s
# Warmup Iteration  25: 2459673.596 ops/s
# Warmup Iteration  26: 2445028.832 ops/s
# Warmup Iteration  27: 2440881.795 ops/s
# Warmup Iteration  28: 2448295.314 ops/s
# Warmup Iteration  29: 2462043.600 ops/s
# Warmup Iteration  30: 2458261.202 ops/s
Iteration   1: 2455275.973 ops/s
Iteration   2: 2455577.217 ops/s
Iteration   3: 2465169.879 ops/s
Iteration   4: 2453472.483 ops/s
Iteration   5: 2446531.601 ops/s
Iteration   6: 2456702.852 ops/s
Iteration   7: 2456349.456 ops/s
Iteration   8: 2453373.579 ops/s
Iteration   9: 2462448.481 ops/s
Iteration  10: 2455169.223 ops/s
Iteration  11: 2455054.985 ops/s
Iteration  12: 2459144.037 ops/s
Iteration  13: 2459917.161 ops/s
Iteration  14: 2456575.628 ops/s
Iteration  15: 2462343.834 ops/s
Iteration  16: 2462362.726 ops/s
Iteration  17: 2457040.569 ops/s
Iteration  18: 2453751.501 ops/s
Iteration  19: 2462003.076 ops/s
Iteration  20: 2455127.537 ops/s
Iteration  21: 2453870.283 ops/s
Iteration  22: 2438700.853 ops/s
Iteration  23: 2431399.934 ops/s
Iteration  24: 2434047.924 ops/s
Iteration  25: 2463875.181 ops/s
Iteration  26: 2460849.548 ops/s
Iteration  27: 2458536.353 ops/s
Iteration  28: 2461681.706 ops/s
Iteration  29: 2457684.155 ops/s
Iteration  30: 2462871.417 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedSetWithComparator":
  2455563.638 ±(99.9%) 5464.769 ops/s [Average]
  (min, avg, max) = (2431399.934, 2455563.638, 2465169.879), stdev = 8179.410
  CI (99.9%): [2450098.869, 2461028.407] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  2455563.638 ± 5464.769  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2772323.932 ops/s
# Warmup Iteration   2: 6259621.232 ops/s
# Warmup Iteration   3: 6398808.246 ops/s
# Warmup Iteration   4: 5477100.156 ops/s
# Warmup Iteration   5: 6191554.339 ops/s
# Warmup Iteration   6: 6418046.093 ops/s
# Warmup Iteration   7: 6412323.831 ops/s
# Warmup Iteration   8: 6421044.077 ops/s
# Warmup Iteration   9: 6407293.580 ops/s
# Warmup Iteration  10: 6398407.734 ops/s
# Warmup Iteration  11: 6397619.342 ops/s
# Warmup Iteration  12: 6418335.373 ops/s
# Warmup Iteration  13: 6428442.417 ops/s
# Warmup Iteration  14: 6416603.950 ops/s
# Warmup Iteration  15: 6416720.539 ops/s
# Warmup Iteration  16: 6417486.042 ops/s
# Warmup Iteration  17: 6404820.696 ops/s
# Warmup Iteration  18: 6402499.278 ops/s
# Warmup Iteration  19: 6415190.385 ops/s
# Warmup Iteration  20: 6402193.321 ops/s
# Warmup Iteration  21: 6400052.458 ops/s
# Warmup Iteration  22: 6428015.673 ops/s
# Warmup Iteration  23: 6412853.856 ops/s
# Warmup Iteration  24: 6415492.859 ops/s
# Warmup Iteration  25: 6402747.343 ops/s
# Warmup Iteration  26: 6400450.016 ops/s
# Warmup Iteration  27: 6378687.146 ops/s
# Warmup Iteration  28: 6407217.938 ops/s
# Warmup Iteration  29: 6411779.857 ops/s
# Warmup Iteration  30: 6424950.108 ops/s
Iteration   1: 6413379.287 ops/s
Iteration   2: 6374363.594 ops/s
Iteration   3: 6416510.900 ops/s
Iteration   4: 6413817.050 ops/s
Iteration   5: 6431525.034 ops/s
Iteration   6: 6421059.207 ops/s
Iteration   7: 6416300.563 ops/s
Iteration   8: 6423056.628 ops/s
Iteration   9: 6410444.358 ops/s
Iteration  10: 6411088.408 ops/s
Iteration  11: 6422889.458 ops/s
Iteration  12: 6420133.584 ops/s
Iteration  13: 6401794.962 ops/s
Iteration  14: 6397693.984 ops/s
Iteration  15: 6415999.985 ops/s
Iteration  16: 6413748.304 ops/s
Iteration  17: 6429600.798 ops/s
Iteration  18: 6424087.269 ops/s
Iteration  19: 6415815.010 ops/s
Iteration  20: 6405065.649 ops/s
Iteration  21: 6425144.394 ops/s
Iteration  22: 6419899.832 ops/s
Iteration  23: 6411333.190 ops/s
Iteration  24: 6413811.995 ops/s
Iteration  25: 5942293.432 ops/s
Iteration  26: 6429418.352 ops/s
Iteration  27: 6418528.695 ops/s
Iteration  28: 6437851.895 ops/s
Iteration  29: 6392582.445 ops/s
Iteration  30: 6411166.262 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_toStack":
  6399346.817 ±(99.9%) 58262.254 ops/s [Average]
  (min, avg, max) = (5942293.432, 6399346.817, 6437851.895), stdev = 87204.205
  CI (99.9%): [6341084.564, 6457609.071] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_toStack  thrpt   30  6399346.817 ± 58262.254  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 345100.940 ops/s
# Warmup Iteration   2: 567255.091 ops/s
# Warmup Iteration   3: 646413.612 ops/s
# Warmup Iteration   4: 651002.189 ops/s
# Warmup Iteration   5: 650770.812 ops/s
# Warmup Iteration   6: 558223.989 ops/s
# Warmup Iteration   7: 638599.724 ops/s
# Warmup Iteration   8: 651796.437 ops/s
# Warmup Iteration   9: 653454.438 ops/s
# Warmup Iteration  10: 649285.070 ops/s
# Warmup Iteration  11: 652320.670 ops/s
# Warmup Iteration  12: 650282.359 ops/s
# Warmup Iteration  13: 651890.341 ops/s
# Warmup Iteration  14: 653518.800 ops/s
# Warmup Iteration  15: 652536.802 ops/s
# Warmup Iteration  16: 652612.568 ops/s
# Warmup Iteration  17: 650145.639 ops/s
# Warmup Iteration  18: 651441.048 ops/s
# Warmup Iteration  19: 650529.879 ops/s
# Warmup Iteration  20: 650898.285 ops/s
# Warmup Iteration  21: 643137.420 ops/s
# Warmup Iteration  22: 642037.950 ops/s
# Warmup Iteration  23: 644342.154 ops/s
# Warmup Iteration  24: 640870.019 ops/s
# Warmup Iteration  25: 647155.786 ops/s
# Warmup Iteration  26: 647718.979 ops/s
# Warmup Iteration  27: 649141.268 ops/s
# Warmup Iteration  28: 642170.799 ops/s
# Warmup Iteration  29: 644193.071 ops/s
# Warmup Iteration  30: 643888.506 ops/s
Iteration   1: 634188.559 ops/s
Iteration   2: 641985.379 ops/s
Iteration   3: 643091.367 ops/s
Iteration   4: 649792.873 ops/s
Iteration   5: 646012.597 ops/s
Iteration   6: 643254.345 ops/s
Iteration   7: 639570.232 ops/s
Iteration   8: 643626.866 ops/s
Iteration   9: 632102.575 ops/s
Iteration  10: 649998.183 ops/s
Iteration  11: 647094.249 ops/s
Iteration  12: 647653.292 ops/s
Iteration  13: 647406.819 ops/s
Iteration  14: 647762.215 ops/s
Iteration  15: 644547.081 ops/s
Iteration  16: 650021.171 ops/s
Iteration  17: 650589.419 ops/s
Iteration  18: 647341.102 ops/s
Iteration  19: 645731.098 ops/s
Iteration  20: 640374.754 ops/s
Iteration  21: 643801.034 ops/s
Iteration  22: 645815.638 ops/s
Iteration  23: 637402.698 ops/s
Iteration  24: 643027.343 ops/s
Iteration  25: 642207.338 ops/s
Iteration  26: 637073.737 ops/s
Iteration  27: 641162.140 ops/s
Iteration  28: 646928.810 ops/s
Iteration  29: 640284.065 ops/s
Iteration  30: 651595.075 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_zip":
  644048.068 ±(99.9%) 3234.299 ops/s [Average]
  (min, avg, max) = (632102.575, 644048.068, 651595.075), stdev = 4840.947
  CI (99.9%): [640813.769, 647282.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_zip  thrpt   30  644048.068 ± 3234.299  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 790171.867 ops/s
# Warmup Iteration   2: 1455576.711 ops/s
# Warmup Iteration   3: 1548999.548 ops/s
# Warmup Iteration   4: 1577935.896 ops/s
# Warmup Iteration   5: 1330148.546 ops/s
# Warmup Iteration   6: 1531992.138 ops/s
# Warmup Iteration   7: 1560620.551 ops/s
# Warmup Iteration   8: 1570694.115 ops/s
# Warmup Iteration   9: 1560704.454 ops/s
# Warmup Iteration  10: 1568588.919 ops/s
# Warmup Iteration  11: 1570992.497 ops/s
# Warmup Iteration  12: 1574612.869 ops/s
# Warmup Iteration  13: 1565048.296 ops/s
# Warmup Iteration  14: 1562549.323 ops/s
# Warmup Iteration  15: 1575252.632 ops/s
# Warmup Iteration  16: 1568092.507 ops/s
# Warmup Iteration  17: 1565373.701 ops/s
# Warmup Iteration  18: 1569111.699 ops/s
# Warmup Iteration  19: 1570488.828 ops/s
# Warmup Iteration  20: 1568813.494 ops/s
# Warmup Iteration  21: 1576650.455 ops/s
# Warmup Iteration  22: 1572442.765 ops/s
# Warmup Iteration  23: 1571332.246 ops/s
# Warmup Iteration  24: 1573023.294 ops/s
# Warmup Iteration  25: 1568313.489 ops/s
# Warmup Iteration  26: 1568132.001 ops/s
# Warmup Iteration  27: 1569910.053 ops/s
# Warmup Iteration  28: 1571371.786 ops/s
# Warmup Iteration  29: 1569241.427 ops/s
# Warmup Iteration  30: 1566884.176 ops/s
Iteration   1: 1572326.475 ops/s
Iteration   2: 1572805.552 ops/s
Iteration   3: 1572506.369 ops/s
Iteration   4: 1578085.724 ops/s
Iteration   5: 1572091.638 ops/s
Iteration   6: 1569935.510 ops/s
Iteration   7: 1579411.224 ops/s
Iteration   8: 1579975.172 ops/s
Iteration   9: 1574271.884 ops/s
Iteration  10: 1579251.866 ops/s
Iteration  11: 1580856.261 ops/s
Iteration  12: 1577440.298 ops/s
Iteration  13: 1581701.801 ops/s
Iteration  14: 1578323.006 ops/s
Iteration  15: 1574830.462 ops/s
Iteration  16: 1564540.357 ops/s
Iteration  17: 1576351.894 ops/s
Iteration  18: 1570002.701 ops/s
Iteration  19: 1581246.251 ops/s
Iteration  20: 1576230.893 ops/s
Iteration  21: 1576017.405 ops/s
Iteration  22: 1574996.345 ops/s
Iteration  23: 1575568.741 ops/s
Iteration  24: 1576907.440 ops/s
Iteration  25: 1568583.302 ops/s
Iteration  26: 1579587.153 ops/s
Iteration  27: 1580287.827 ops/s
Iteration  28: 1568965.354 ops/s
Iteration  29: 1571143.722 ops/s
Iteration  30: 1579138.839 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSeptupletonListTest._Benchmark.benchmark_zipWithIndex":
  1575446.049 ±(99.9%) 2923.381 ops/s [Average]
  (min, avg, max) = (1564540.357, 1575446.049, 1581701.801), stdev = 4375.580
  CI (99.9%): [1572522.668, 1578369.430] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSeptupletonListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  1575446.049 ± 2923.381  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747843.971 ops/s
# Warmup Iteration   2: 782782.144 ops/s
# Warmup Iteration   3: 994012.781 ops/s
# Warmup Iteration   4: 988968.831 ops/s
# Warmup Iteration   5: 978953.939 ops/s
# Warmup Iteration   6: 984013.339 ops/s
# Warmup Iteration   7: 980469.506 ops/s
# Warmup Iteration   8: 985355.190 ops/s
# Warmup Iteration   9: 997196.369 ops/s
# Warmup Iteration  10: 991040.795 ops/s
# Warmup Iteration  11: 984411.045 ops/s
# Warmup Iteration  12: 839670.853 ops/s
# Warmup Iteration  13: 986335.250 ops/s
# Warmup Iteration  14: 978446.813 ops/s
# Warmup Iteration  15: 981416.223 ops/s
# Warmup Iteration  16: 985573.438 ops/s
# Warmup Iteration  17: 1047075.874 ops/s
# Warmup Iteration  18: 1043950.074 ops/s
# Warmup Iteration  19: 1041447.100 ops/s
# Warmup Iteration  20: 1047486.489 ops/s
# Warmup Iteration  21: 1046706.752 ops/s
# Warmup Iteration  22: 1043313.244 ops/s
# Warmup Iteration  23: 1051241.925 ops/s
# Warmup Iteration  24: 1038369.402 ops/s
# Warmup Iteration  25: 1052305.597 ops/s
# Warmup Iteration  26: 1046456.698 ops/s
# Warmup Iteration  27: 1036939.266 ops/s
# Warmup Iteration  28: 1036182.488 ops/s
# Warmup Iteration  29: 1043710.108 ops/s
# Warmup Iteration  30: 1049072.370 ops/s
Iteration   1: 1052417.817 ops/s
Iteration   2: 1050202.676 ops/s
Iteration   3: 1041473.229 ops/s
Iteration   4: 1043353.370 ops/s
Iteration   5: 1039040.248 ops/s
Iteration   6: 1040414.190 ops/s
Iteration   7: 1047443.910 ops/s
Iteration   8: 1044119.059 ops/s
Iteration   9: 1044880.807 ops/s
Iteration  10: 1041715.168 ops/s
Iteration  11: 1051507.709 ops/s
Iteration  12: 1046886.561 ops/s
Iteration  13: 1040167.404 ops/s
Iteration  14: 1046766.307 ops/s
Iteration  15: 1049277.810 ops/s
Iteration  16: 1045334.872 ops/s
Iteration  17: 1045905.210 ops/s
Iteration  18: 1046967.876 ops/s
Iteration  19: 1045165.209 ops/s
Iteration  20: 1049280.056 ops/s
Iteration  21: 1048076.949 ops/s
Iteration  22: 1033493.638 ops/s
Iteration  23: 1046159.472 ops/s
Iteration  24: 1043033.565 ops/s
Iteration  25: 1039716.786 ops/s
Iteration  26: 1034124.016 ops/s
Iteration  27: 1039308.233 ops/s
Iteration  28: 1040451.088 ops/s
Iteration  29: 1049563.172 ops/s
Iteration  30: 1051000.447 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_add":
  1044574.895 ±(99.9%) 3242.231 ops/s [Average]
  (min, avg, max) = (1033493.638, 1044574.895, 1052417.817), stdev = 4852.819
  CI (99.9%): [1041332.664, 1047817.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_add  thrpt   30  1044574.895 ± 3242.231  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 740172.756 ops/s
# Warmup Iteration   2: 783717.625 ops/s
# Warmup Iteration   3: 971459.917 ops/s
# Warmup Iteration   4: 966780.897 ops/s
# Warmup Iteration   5: 961610.251 ops/s
# Warmup Iteration   6: 967452.667 ops/s
# Warmup Iteration   7: 965775.215 ops/s
# Warmup Iteration   8: 962021.963 ops/s
# Warmup Iteration   9: 967994.719 ops/s
# Warmup Iteration  10: 962638.713 ops/s
# Warmup Iteration  11: 963587.707 ops/s
# Warmup Iteration  12: 827848.139 ops/s
# Warmup Iteration  13: 969040.893 ops/s
# Warmup Iteration  14: 971177.164 ops/s
# Warmup Iteration  15: 964666.792 ops/s
# Warmup Iteration  16: 967209.787 ops/s
# Warmup Iteration  17: 1022162.930 ops/s
# Warmup Iteration  18: 1023951.750 ops/s
# Warmup Iteration  19: 1030168.916 ops/s
# Warmup Iteration  20: 1025383.732 ops/s
# Warmup Iteration  21: 1032178.175 ops/s
# Warmup Iteration  22: 1026798.996 ops/s
# Warmup Iteration  23: 1029993.580 ops/s
# Warmup Iteration  24: 1023858.711 ops/s
# Warmup Iteration  25: 1032956.349 ops/s
# Warmup Iteration  26: 1030790.408 ops/s
# Warmup Iteration  27: 1027203.754 ops/s
# Warmup Iteration  28: 1031247.389 ops/s
# Warmup Iteration  29: 1028282.713 ops/s
# Warmup Iteration  30: 1023699.958 ops/s
Iteration   1: 1030365.033 ops/s
Iteration   2: 1013206.491 ops/s
Iteration   3: 1020566.414 ops/s
Iteration   4: 1012688.935 ops/s
Iteration   5: 1017963.031 ops/s
Iteration   6: 1018441.715 ops/s
Iteration   7: 1019893.343 ops/s
Iteration   8: 1032695.858 ops/s
Iteration   9: 1030388.360 ops/s
Iteration  10: 1016562.081 ops/s
Iteration  11: 1020902.803 ops/s
Iteration  12: 1014406.483 ops/s
Iteration  13: 1024849.651 ops/s
Iteration  14: 1028853.458 ops/s
Iteration  15: 1018281.903 ops/s
Iteration  16: 1034058.232 ops/s
Iteration  17: 1030171.747 ops/s
Iteration  18: 1009644.537 ops/s
Iteration  19: 976114.633 ops/s
Iteration  20: 1005738.017 ops/s
Iteration  21: 1000333.654 ops/s
Iteration  22: 1023024.836 ops/s
Iteration  23: 1025659.777 ops/s
Iteration  24: 1027453.586 ops/s
Iteration  25: 1028167.961 ops/s
Iteration  26: 1024591.053 ops/s
Iteration  27: 1028821.966 ops/s
Iteration  28: 1019750.306 ops/s
Iteration  29: 1031434.633 ops/s
Iteration  30: 1035460.010 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_addAll":
  1020683.017 ±(99.9%) 8015.861 ops/s [Average]
  (min, avg, max) = (976114.633, 1020683.017, 1035460.010), stdev = 11997.764
  CI (99.9%): [1012667.156, 1028698.878] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_addAll  thrpt   30  1020683.017 ± 8015.861  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 744577.560 ops/s
# Warmup Iteration   2: 792535.322 ops/s
# Warmup Iteration   3: 998475.337 ops/s
# Warmup Iteration   4: 995587.070 ops/s
# Warmup Iteration   5: 994999.699 ops/s
# Warmup Iteration   6: 1000483.340 ops/s
# Warmup Iteration   7: 1002176.002 ops/s
# Warmup Iteration   8: 1000611.702 ops/s
# Warmup Iteration   9: 1001932.508 ops/s
# Warmup Iteration  10: 998902.818 ops/s
# Warmup Iteration  11: 972789.658 ops/s
# Warmup Iteration  12: 885059.130 ops/s
# Warmup Iteration  13: 1002612.006 ops/s
# Warmup Iteration  14: 1000162.145 ops/s
# Warmup Iteration  15: 1002701.591 ops/s
# Warmup Iteration  16: 999899.593 ops/s
# Warmup Iteration  17: 1054240.336 ops/s
# Warmup Iteration  18: 1057342.960 ops/s
# Warmup Iteration  19: 1056269.624 ops/s
# Warmup Iteration  20: 1060721.941 ops/s
# Warmup Iteration  21: 1061604.231 ops/s
# Warmup Iteration  22: 1061892.030 ops/s
# Warmup Iteration  23: 1060051.577 ops/s
# Warmup Iteration  24: 1059816.671 ops/s
# Warmup Iteration  25: 1057308.419 ops/s
# Warmup Iteration  26: 1057869.558 ops/s
# Warmup Iteration  27: 1060503.585 ops/s
# Warmup Iteration  28: 1056549.136 ops/s
# Warmup Iteration  29: 1061011.898 ops/s
# Warmup Iteration  30: 1057650.550 ops/s
Iteration   1: 1062420.589 ops/s
Iteration   2: 1059650.197 ops/s
Iteration   3: 1065056.946 ops/s
Iteration   4: 1064189.451 ops/s
Iteration   5: 1058875.518 ops/s
Iteration   6: 1042307.574 ops/s
Iteration   7: 1061832.278 ops/s
Iteration   8: 1062628.666 ops/s
Iteration   9: 1061294.029 ops/s
Iteration  10: 1064932.844 ops/s
Iteration  11: 1066230.267 ops/s
Iteration  12: 1066789.302 ops/s
Iteration  13: 1063692.087 ops/s
Iteration  14: 1066765.967 ops/s
Iteration  15: 1063536.022 ops/s
Iteration  16: 1058980.710 ops/s
Iteration  17: 1061973.472 ops/s
Iteration  18: 1062967.941 ops/s
Iteration  19: 1062234.007 ops/s
Iteration  20: 1050352.968 ops/s
Iteration  21: 1059882.134 ops/s
Iteration  22: 1065513.012 ops/s
Iteration  23: 1056963.076 ops/s
Iteration  24: 1058097.330 ops/s
Iteration  25: 1062575.555 ops/s
Iteration  26: 1064203.864 ops/s
Iteration  27: 1057057.823 ops/s
Iteration  28: 1055414.666 ops/s
Iteration  29: 1061468.866 ops/s
Iteration  30: 1062156.006 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_addAllAtIndex":
  1061001.439 ±(99.9%) 3380.064 ops/s [Average]
  (min, avg, max) = (1042307.574, 1061001.439, 1066789.302), stdev = 5059.121
  CI (99.9%): [1057621.375, 1064381.503] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1061001.439 ± 3380.064  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 644101.382 ops/s
# Warmup Iteration   2: 775321.766 ops/s
# Warmup Iteration   3: 965337.299 ops/s
# Warmup Iteration   4: 958399.523 ops/s
# Warmup Iteration   5: 964689.272 ops/s
# Warmup Iteration   6: 959478.822 ops/s
# Warmup Iteration   7: 953114.133 ops/s
# Warmup Iteration   8: 958499.019 ops/s
# Warmup Iteration   9: 795775.081 ops/s
# Warmup Iteration  10: 958050.015 ops/s
# Warmup Iteration  11: 958745.583 ops/s
# Warmup Iteration  12: 958850.710 ops/s
# Warmup Iteration  13: 962029.374 ops/s
# Warmup Iteration  14: 954430.066 ops/s
# Warmup Iteration  15: 956997.462 ops/s
# Warmup Iteration  16: 960085.830 ops/s
# Warmup Iteration  17: 1020405.280 ops/s
# Warmup Iteration  18: 1021189.654 ops/s
# Warmup Iteration  19: 1019624.414 ops/s
# Warmup Iteration  20: 1020106.836 ops/s
# Warmup Iteration  21: 1012683.015 ops/s
# Warmup Iteration  22: 1015751.216 ops/s
# Warmup Iteration  23: 1014187.854 ops/s
# Warmup Iteration  24: 1017996.529 ops/s
# Warmup Iteration  25: 1009647.916 ops/s
# Warmup Iteration  26: 1010688.645 ops/s
# Warmup Iteration  27: 1018162.572 ops/s
# Warmup Iteration  28: 1014177.828 ops/s
# Warmup Iteration  29: 1011277.110 ops/s
# Warmup Iteration  30: 1012721.936 ops/s
Iteration   1: 1014851.979 ops/s
Iteration   2: 1016834.517 ops/s
Iteration   3: 1018773.935 ops/s
Iteration   4: 1013476.594 ops/s
Iteration   5: 1017788.979 ops/s
Iteration   6: 1012560.998 ops/s
Iteration   7: 1020881.460 ops/s
Iteration   8: 1014526.715 ops/s
Iteration   9: 1020238.689 ops/s
Iteration  10: 1017363.856 ops/s
Iteration  11: 1014192.657 ops/s
Iteration  12: 1015225.546 ops/s
Iteration  13: 1009725.242 ops/s
Iteration  14: 1018136.834 ops/s
Iteration  15: 1014757.437 ops/s
Iteration  16: 1022689.547 ops/s
Iteration  17: 1021083.692 ops/s
Iteration  18: 1017601.279 ops/s
Iteration  19: 1025289.748 ops/s
Iteration  20: 1019961.400 ops/s
Iteration  21: 1021355.573 ops/s
Iteration  22: 1022420.802 ops/s
Iteration  23: 1018462.796 ops/s
Iteration  24: 1021385.772 ops/s
Iteration  25: 1015983.257 ops/s
Iteration  26: 1014535.942 ops/s
Iteration  27: 1017368.113 ops/s
Iteration  28: 1021572.375 ops/s
Iteration  29: 1017622.048 ops/s
Iteration  30: 1022005.896 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_addAtIndex":
  1017955.789 ±(99.9%) 2371.646 ops/s [Average]
  (min, avg, max) = (1009725.242, 1017955.789, 1025289.748), stdev = 3549.768
  CI (99.9%): [1015584.143, 1020327.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_addAtIndex  thrpt   30  1017955.789 ± 2371.646  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 547811.017 ops/s
# Warmup Iteration   2: 1141186.395 ops/s
# Warmup Iteration   3: 1147072.946 ops/s
# Warmup Iteration   4: 1162000.341 ops/s
# Warmup Iteration   5: 981418.034 ops/s
# Warmup Iteration   6: 1154712.616 ops/s
# Warmup Iteration   7: 1150204.791 ops/s
# Warmup Iteration   8: 1159520.141 ops/s
# Warmup Iteration   9: 1150876.215 ops/s
# Warmup Iteration  10: 1153971.875 ops/s
# Warmup Iteration  11: 1149499.545 ops/s
# Warmup Iteration  12: 1158884.309 ops/s
# Warmup Iteration  13: 1154596.306 ops/s
# Warmup Iteration  14: 1156691.074 ops/s
# Warmup Iteration  15: 1159175.691 ops/s
# Warmup Iteration  16: 1156312.622 ops/s
# Warmup Iteration  17: 1157408.344 ops/s
# Warmup Iteration  18: 1160262.255 ops/s
# Warmup Iteration  19: 1158028.548 ops/s
# Warmup Iteration  20: 1160311.629 ops/s
# Warmup Iteration  21: 1161454.364 ops/s
# Warmup Iteration  22: 1159136.785 ops/s
# Warmup Iteration  23: 1163382.131 ops/s
# Warmup Iteration  24: 1164071.947 ops/s
# Warmup Iteration  25: 1164544.930 ops/s
# Warmup Iteration  26: 1163458.287 ops/s
# Warmup Iteration  27: 1160495.313 ops/s
# Warmup Iteration  28: 1143462.287 ops/s
# Warmup Iteration  29: 1153435.038 ops/s
# Warmup Iteration  30: 1156577.082 ops/s
Iteration   1: 1152723.613 ops/s
Iteration   2: 1157442.488 ops/s
Iteration   3: 1138167.078 ops/s
Iteration   4: 1151837.109 ops/s
Iteration   5: 1153589.242 ops/s
Iteration   6: 1170806.184 ops/s
Iteration   7: 1169966.972 ops/s
Iteration   8: 1170126.959 ops/s
Iteration   9: 1160243.607 ops/s
Iteration  10: 1149374.693 ops/s
Iteration  11: 1156886.258 ops/s
Iteration  12: 1154146.972 ops/s
Iteration  13: 1162682.308 ops/s
Iteration  14: 1164943.610 ops/s
Iteration  15: 1159269.573 ops/s
Iteration  16: 1154674.023 ops/s
Iteration  17: 1148836.712 ops/s
Iteration  18: 1159681.366 ops/s
Iteration  19: 1158094.348 ops/s
Iteration  20: 1160026.566 ops/s
Iteration  21: 1151650.148 ops/s
Iteration  22: 1161645.165 ops/s
Iteration  23: 1150046.096 ops/s
Iteration  24: 1160759.398 ops/s
Iteration  25: 1159791.973 ops/s
Iteration  26: 1165494.805 ops/s
Iteration  27: 1155236.752 ops/s
Iteration  28: 1162864.281 ops/s
Iteration  29: 1164562.737 ops/s
Iteration  30: 1162615.566 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_aggregateByMutating":
  1158272.887 ±(99.9%) 4772.480 ops/s [Average]
  (min, avg, max) = (1138167.078, 1158272.887, 1170806.184), stdev = 7143.224
  CI (99.9%): [1153500.407, 1163045.367] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  1158272.887 ± 4772.480  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 586608.040 ops/s
# Warmup Iteration   2: 1246872.528 ops/s
# Warmup Iteration   3: 1310837.760 ops/s
# Warmup Iteration   4: 1317703.186 ops/s
# Warmup Iteration   5: 1098979.631 ops/s
# Warmup Iteration   6: 1326884.595 ops/s
# Warmup Iteration   7: 1322318.958 ops/s
# Warmup Iteration   8: 1314433.853 ops/s
# Warmup Iteration   9: 1321697.949 ops/s
# Warmup Iteration  10: 1309037.518 ops/s
# Warmup Iteration  11: 1324733.425 ops/s
# Warmup Iteration  12: 1329047.974 ops/s
# Warmup Iteration  13: 1329096.606 ops/s
# Warmup Iteration  14: 1328154.003 ops/s
# Warmup Iteration  15: 1320830.827 ops/s
# Warmup Iteration  16: 1321535.008 ops/s
# Warmup Iteration  17: 1314837.597 ops/s
# Warmup Iteration  18: 1318948.067 ops/s
# Warmup Iteration  19: 1318796.582 ops/s
# Warmup Iteration  20: 1319466.613 ops/s
# Warmup Iteration  21: 1326646.437 ops/s
# Warmup Iteration  22: 1318202.210 ops/s
# Warmup Iteration  23: 1312251.422 ops/s
# Warmup Iteration  24: 1304116.727 ops/s
# Warmup Iteration  25: 1306445.240 ops/s
# Warmup Iteration  26: 1316535.798 ops/s
# Warmup Iteration  27: 1325420.255 ops/s
# Warmup Iteration  28: 1329447.235 ops/s
# Warmup Iteration  29: 1316455.392 ops/s
# Warmup Iteration  30: 1327189.255 ops/s
Iteration   1: 1330811.251 ops/s
Iteration   2: 1322460.952 ops/s
Iteration   3: 1328279.820 ops/s
Iteration   4: 1318492.909 ops/s
Iteration   5: 1328648.608 ops/s
Iteration   6: 1325896.351 ops/s
Iteration   7: 1313402.953 ops/s
Iteration   8: 1328604.037 ops/s
Iteration   9: 1328676.830 ops/s
Iteration  10: 1321734.528 ops/s
Iteration  11: 1323931.684 ops/s
Iteration  12: 1321670.242 ops/s
Iteration  13: 1332318.481 ops/s
Iteration  14: 1326860.982 ops/s
Iteration  15: 1327158.472 ops/s
Iteration  16: 1325301.229 ops/s
Iteration  17: 1330262.893 ops/s
Iteration  18: 1323492.345 ops/s
Iteration  19: 1326196.958 ops/s
Iteration  20: 1326445.506 ops/s
Iteration  21: 1321911.715 ops/s
Iteration  22: 1320463.302 ops/s
Iteration  23: 1321001.673 ops/s
Iteration  24: 1314603.094 ops/s
Iteration  25: 1331626.164 ops/s
Iteration  26: 1324965.071 ops/s
Iteration  27: 1322712.905 ops/s
Iteration  28: 1319901.620 ops/s
Iteration  29: 1327226.710 ops/s
Iteration  30: 1320323.406 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_aggregateByNonMutating":
  1324512.756 ±(99.9%) 3127.902 ops/s [Average]
  (min, avg, max) = (1313402.953, 1324512.756, 1332318.481), stdev = 4681.696
  CI (99.9%): [1321384.855, 1327640.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  1324512.756 ± 3127.902  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10123744.112 ops/s
# Warmup Iteration   2: 20029597.670 ops/s
# Warmup Iteration   3: 20563152.793 ops/s
# Warmup Iteration   4: 17391702.099 ops/s
# Warmup Iteration   5: 20537246.183 ops/s
# Warmup Iteration   6: 20549252.028 ops/s
# Warmup Iteration   7: 20464052.494 ops/s
# Warmup Iteration   8: 20460263.176 ops/s
# Warmup Iteration   9: 20527908.821 ops/s
# Warmup Iteration  10: 20521385.189 ops/s
# Warmup Iteration  11: 20505089.644 ops/s
# Warmup Iteration  12: 20548390.854 ops/s
# Warmup Iteration  13: 20529091.381 ops/s
# Warmup Iteration  14: 20414703.119 ops/s
# Warmup Iteration  15: 20462803.825 ops/s
# Warmup Iteration  16: 20417114.192 ops/s
# Warmup Iteration  17: 20605283.778 ops/s
# Warmup Iteration  18: 20494969.987 ops/s
# Warmup Iteration  19: 20263947.810 ops/s
# Warmup Iteration  20: 19711763.531 ops/s
# Warmup Iteration  21: 19950771.551 ops/s
# Warmup Iteration  22: 20068680.219 ops/s
# Warmup Iteration  23: 19773544.771 ops/s
# Warmup Iteration  24: 19391648.510 ops/s
# Warmup Iteration  25: 19353450.527 ops/s
# Warmup Iteration  26: 19644447.113 ops/s
# Warmup Iteration  27: 19877751.548 ops/s
# Warmup Iteration  28: 19889993.589 ops/s
# Warmup Iteration  29: 19841242.166 ops/s
# Warmup Iteration  30: 19997286.059 ops/s
Iteration   1: 20064888.631 ops/s
Iteration   2: 19764202.814 ops/s
Iteration   3: 19875435.914 ops/s
Iteration   4: 20183181.055 ops/s
Iteration   5: 19947969.763 ops/s
Iteration   6: 20106328.659 ops/s
Iteration   7: 20058789.877 ops/s
Iteration   8: 19801402.238 ops/s
Iteration   9: 19440176.021 ops/s
Iteration  10: 19418691.746 ops/s
Iteration  11: 19949383.123 ops/s
Iteration  12: 20035165.060 ops/s
Iteration  13: 20063054.469 ops/s
Iteration  14: 19909660.003 ops/s
Iteration  15: 20556282.573 ops/s
Iteration  16: 20252750.057 ops/s
Iteration  17: 20062912.930 ops/s
Iteration  18: 20094088.379 ops/s
Iteration  19: 20373069.244 ops/s
Iteration  20: 20237705.513 ops/s
Iteration  21: 20061541.717 ops/s
Iteration  22: 20429202.982 ops/s
Iteration  23: 20084171.980 ops/s
Iteration  24: 19980745.139 ops/s
Iteration  25: 20193651.622 ops/s
Iteration  26: 20495505.410 ops/s
Iteration  27: 20529819.164 ops/s
Iteration  28: 20452652.635 ops/s
Iteration  29: 20526278.612 ops/s
Iteration  30: 17133227.727 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_allSatisfy":
  20002731.169 ±(99.9%) 409116.894 ops/s [Average]
  (min, avg, max) = (17133227.727, 20002731.169, 20556282.573), stdev = 612346.954
  CI (99.9%): [19593614.274, 20411848.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_allSatisfy  thrpt   30  20002731.169 ± 409116.894  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9389469.611 ops/s
# Warmup Iteration   2: 20101439.415 ops/s
# Warmup Iteration   3: 19688677.348 ops/s
# Warmup Iteration   4: 16902615.574 ops/s
# Warmup Iteration   5: 19981594.909 ops/s
# Warmup Iteration   6: 19098362.741 ops/s
# Warmup Iteration   7: 19788258.493 ops/s
# Warmup Iteration   8: 19954429.586 ops/s
# Warmup Iteration   9: 20044094.238 ops/s
# Warmup Iteration  10: 20124916.852 ops/s
# Warmup Iteration  11: 19650789.128 ops/s
# Warmup Iteration  12: 19908509.842 ops/s
# Warmup Iteration  13: 20068410.288 ops/s
# Warmup Iteration  14: 19922350.823 ops/s
# Warmup Iteration  15: 20088954.867 ops/s
# Warmup Iteration  16: 19955550.885 ops/s
# Warmup Iteration  17: 19708692.481 ops/s
# Warmup Iteration  18: 19912350.617 ops/s
# Warmup Iteration  19: 19732115.454 ops/s
# Warmup Iteration  20: 19903456.699 ops/s
# Warmup Iteration  21: 19840070.551 ops/s
# Warmup Iteration  22: 20131989.007 ops/s
# Warmup Iteration  23: 19343689.353 ops/s
# Warmup Iteration  24: 19256040.831 ops/s
# Warmup Iteration  25: 19353194.972 ops/s
# Warmup Iteration  26: 19328988.850 ops/s
# Warmup Iteration  27: 19392656.095 ops/s
# Warmup Iteration  28: 19561446.522 ops/s
# Warmup Iteration  29: 19626375.776 ops/s
# Warmup Iteration  30: 18179630.087 ops/s
Iteration   1: 19785756.732 ops/s
Iteration   2: 19343028.076 ops/s
Iteration   3: 19360564.098 ops/s
Iteration   4: 19415019.138 ops/s
Iteration   5: 19745732.456 ops/s
Iteration   6: 19494274.693 ops/s
Iteration   7: 19762165.720 ops/s
Iteration   8: 19335011.387 ops/s
Iteration   9: 18885935.354 ops/s
Iteration  10: 19700100.539 ops/s
Iteration  11: 19314606.312 ops/s
Iteration  12: 18782401.228 ops/s
Iteration  13: 19007096.864 ops/s
Iteration  14: 19271604.736 ops/s
Iteration  15: 19537433.548 ops/s
Iteration  16: 19828018.417 ops/s
Iteration  17: 19618709.097 ops/s
Iteration  18: 19288038.375 ops/s
Iteration  19: 19836722.778 ops/s
Iteration  20: 19393910.694 ops/s
Iteration  21: 19587400.867 ops/s
Iteration  22: 19538013.693 ops/s
Iteration  23: 19825634.291 ops/s
Iteration  24: 19501024.829 ops/s
Iteration  25: 19386167.908 ops/s
Iteration  26: 19698417.017 ops/s
Iteration  27: 19841139.322 ops/s
Iteration  28: 19611051.688 ops/s
Iteration  29: 19284954.358 ops/s
Iteration  30: 18872672.281 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_allSatisfyWith":
  19461753.550 ±(99.9%) 197556.307 ops/s [Average]
  (min, avg, max) = (18782401.228, 19461753.550, 19841139.322), stdev = 295693.003
  CI (99.9%): [19264197.243, 19659309.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  19461753.550 ± 197556.307  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9173289.246 ops/s
# Warmup Iteration   2: 18399786.812 ops/s
# Warmup Iteration   3: 18997195.299 ops/s
# Warmup Iteration   4: 16347330.054 ops/s
# Warmup Iteration   5: 19084325.918 ops/s
# Warmup Iteration   6: 19063088.653 ops/s
# Warmup Iteration   7: 18923257.081 ops/s
# Warmup Iteration   8: 18785420.208 ops/s
# Warmup Iteration   9: 18668833.781 ops/s
# Warmup Iteration  10: 19252939.987 ops/s
# Warmup Iteration  11: 18771001.558 ops/s
# Warmup Iteration  12: 18604967.665 ops/s
# Warmup Iteration  13: 18992359.200 ops/s
# Warmup Iteration  14: 19062941.798 ops/s
# Warmup Iteration  15: 18196463.960 ops/s
# Warmup Iteration  16: 18687217.413 ops/s
# Warmup Iteration  17: 18251093.619 ops/s
# Warmup Iteration  18: 19249376.435 ops/s
# Warmup Iteration  19: 18597270.193 ops/s
# Warmup Iteration  20: 18863820.185 ops/s
# Warmup Iteration  21: 18612671.039 ops/s
# Warmup Iteration  22: 18702127.310 ops/s
# Warmup Iteration  23: 18741754.457 ops/s
# Warmup Iteration  24: 18808045.375 ops/s
# Warmup Iteration  25: 18717327.123 ops/s
# Warmup Iteration  26: 18634225.200 ops/s
# Warmup Iteration  27: 18812604.852 ops/s
# Warmup Iteration  28: 18700047.390 ops/s
# Warmup Iteration  29: 19143005.104 ops/s
# Warmup Iteration  30: 18145685.454 ops/s
Iteration   1: 18935210.657 ops/s
Iteration   2: 18961501.748 ops/s
Iteration   3: 19016623.364 ops/s
Iteration   4: 19304661.795 ops/s
Iteration   5: 18718672.441 ops/s
Iteration   6: 18950502.356 ops/s
Iteration   7: 19019979.497 ops/s
Iteration   8: 18861183.679 ops/s
Iteration   9: 19241870.797 ops/s
Iteration  10: 19085290.281 ops/s
Iteration  11: 18784600.293 ops/s
Iteration  12: 18986588.192 ops/s
Iteration  13: 19071963.800 ops/s
Iteration  14: 18883408.884 ops/s
Iteration  15: 18601786.044 ops/s
Iteration  16: 18650064.520 ops/s
Iteration  17: 18939018.212 ops/s
Iteration  18: 19261853.468 ops/s
Iteration  19: 19026678.432 ops/s
Iteration  20: 19006757.008 ops/s
Iteration  21: 18776383.773 ops/s
Iteration  22: 18490229.453 ops/s
Iteration  23: 18746905.170 ops/s
Iteration  24: 19129336.114 ops/s
Iteration  25: 19060429.883 ops/s
Iteration  26: 18956973.554 ops/s
Iteration  27: 18908997.083 ops/s
Iteration  28: 18768287.188 ops/s
Iteration  29: 19375587.690 ops/s
Iteration  30: 19389835.136 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_anySatisfy":
  18963706.017 ±(99.9%) 146632.944 ops/s [Average]
  (min, avg, max) = (18490229.453, 18963706.017, 19389835.136), stdev = 219473.304
  CI (99.9%): [18817073.074, 19110338.961] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_anySatisfy  thrpt   30  18963706.017 ± 146632.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8311705.448 ops/s
# Warmup Iteration   2: 12981588.580 ops/s
# Warmup Iteration   3: 13923138.403 ops/s
# Warmup Iteration   4: 13821589.899 ops/s
# Warmup Iteration   5: 13994044.168 ops/s
# Warmup Iteration   6: 12126634.519 ops/s
# Warmup Iteration   7: 13717568.488 ops/s
# Warmup Iteration   8: 13868111.790 ops/s
# Warmup Iteration   9: 13846080.717 ops/s
# Warmup Iteration  10: 13736882.431 ops/s
# Warmup Iteration  11: 13884805.538 ops/s
# Warmup Iteration  12: 13909976.575 ops/s
# Warmup Iteration  13: 13941264.466 ops/s
# Warmup Iteration  14: 13998809.297 ops/s
# Warmup Iteration  15: 13821225.320 ops/s
# Warmup Iteration  16: 13711619.267 ops/s
# Warmup Iteration  17: 13810120.201 ops/s
# Warmup Iteration  18: 13928382.130 ops/s
# Warmup Iteration  19: 14242707.515 ops/s
# Warmup Iteration  20: 14167313.177 ops/s
# Warmup Iteration  21: 14066493.696 ops/s
# Warmup Iteration  22: 14011712.811 ops/s
# Warmup Iteration  23: 13716213.370 ops/s
# Warmup Iteration  24: 13535412.419 ops/s
# Warmup Iteration  25: 13724332.192 ops/s
# Warmup Iteration  26: 13780834.007 ops/s
# Warmup Iteration  27: 14083265.836 ops/s
# Warmup Iteration  28: 14198058.531 ops/s
# Warmup Iteration  29: 13897634.624 ops/s
# Warmup Iteration  30: 14457396.209 ops/s
Iteration   1: 13932020.190 ops/s
Iteration   2: 13736747.429 ops/s
Iteration   3: 14028041.150 ops/s
Iteration   4: 13379900.887 ops/s
Iteration   5: 13618539.381 ops/s
Iteration   6: 13843830.771 ops/s
Iteration   7: 13334487.573 ops/s
Iteration   8: 14035792.573 ops/s
Iteration   9: 14010940.539 ops/s
Iteration  10: 13714543.832 ops/s
Iteration  11: 13994263.739 ops/s
Iteration  12: 13984960.880 ops/s
Iteration  13: 14030097.888 ops/s
Iteration  14: 14040733.698 ops/s
Iteration  15: 13947179.481 ops/s
Iteration  16: 13716802.197 ops/s
Iteration  17: 13926719.546 ops/s
Iteration  18: 13999875.867 ops/s
Iteration  19: 13992066.390 ops/s
Iteration  20: 13967507.755 ops/s
Iteration  21: 13689965.285 ops/s
Iteration  22: 14144976.513 ops/s
Iteration  23: 14058901.396 ops/s
Iteration  24: 13448880.208 ops/s
Iteration  25: 13898850.442 ops/s
Iteration  26: 13978111.478 ops/s
Iteration  27: 14198470.091 ops/s
Iteration  28: 14383815.760 ops/s
Iteration  29: 13670252.497 ops/s
Iteration  30: 13645833.901 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_anySatisfyWith":
  13878436.978 ±(99.9%) 159838.846 ops/s [Average]
  (min, avg, max) = (13334487.573, 13878436.978, 14383815.760), stdev = 239239.277
  CI (99.9%): [13718598.132, 14038275.823] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  13878436.978 ± 159838.846  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 337372.058 ops/s
# Warmup Iteration   2: 780482.143 ops/s
# Warmup Iteration   3: 786679.533 ops/s
# Warmup Iteration   4: 665239.374 ops/s
# Warmup Iteration   5: 784451.537 ops/s
# Warmup Iteration   6: 780587.743 ops/s
# Warmup Iteration   7: 790670.391 ops/s
# Warmup Iteration   8: 776990.522 ops/s
# Warmup Iteration   9: 778095.068 ops/s
# Warmup Iteration  10: 781137.699 ops/s
# Warmup Iteration  11: 766355.233 ops/s
# Warmup Iteration  12: 779992.315 ops/s
# Warmup Iteration  13: 784287.544 ops/s
# Warmup Iteration  14: 784012.052 ops/s
# Warmup Iteration  15: 785303.187 ops/s
# Warmup Iteration  16: 799301.390 ops/s
# Warmup Iteration  17: 798025.179 ops/s
# Warmup Iteration  18: 799993.727 ops/s
# Warmup Iteration  19: 800922.806 ops/s
# Warmup Iteration  20: 796838.816 ops/s
# Warmup Iteration  21: 791562.412 ops/s
# Warmup Iteration  22: 775855.157 ops/s
# Warmup Iteration  23: 769566.652 ops/s
# Warmup Iteration  24: 779741.767 ops/s
# Warmup Iteration  25: 781236.155 ops/s
# Warmup Iteration  26: 788280.500 ops/s
# Warmup Iteration  27: 789499.278 ops/s
# Warmup Iteration  28: 786145.558 ops/s
# Warmup Iteration  29: 787245.807 ops/s
# Warmup Iteration  30: 780103.083 ops/s
Iteration   1: 789759.724 ops/s
Iteration   2: 781036.072 ops/s
Iteration   3: 796272.014 ops/s
Iteration   4: 762945.640 ops/s
Iteration   5: 767351.078 ops/s
Iteration   6: 780080.013 ops/s
Iteration   7: 791120.053 ops/s
Iteration   8: 810838.937 ops/s
Iteration   9: 798642.282 ops/s
Iteration  10: 764815.467 ops/s
Iteration  11: 781419.470 ops/s
Iteration  12: 760590.088 ops/s
Iteration  13: 778997.134 ops/s
Iteration  14: 795181.701 ops/s
Iteration  15: 784896.354 ops/s
Iteration  16: 783726.491 ops/s
Iteration  17: 787258.471 ops/s
Iteration  18: 789372.899 ops/s
Iteration  19: 786312.446 ops/s
Iteration  20: 795411.096 ops/s
Iteration  21: 781189.787 ops/s
Iteration  22: 761650.213 ops/s
Iteration  23: 787107.155 ops/s
Iteration  24: 782657.223 ops/s
Iteration  25: 793223.771 ops/s
Iteration  26: 798045.880 ops/s
Iteration  27: 764454.136 ops/s
Iteration  28: 770350.447 ops/s
Iteration  29: 785193.535 ops/s
Iteration  30: 748741.534 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_appendString":
  781954.704 ±(99.9%) 9326.557 ops/s [Average]
  (min, avg, max) = (748741.534, 781954.704, 810838.937), stdev = 13959.552
  CI (99.9%): [772628.147, 791281.261] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_appendString  thrpt   30  781954.704 ± 9326.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2810840.132 ops/s
# Warmup Iteration   2: 6344995.826 ops/s
# Warmup Iteration   3: 6420137.241 ops/s
# Warmup Iteration   4: 5494738.884 ops/s
# Warmup Iteration   5: 6406465.203 ops/s
# Warmup Iteration   6: 6408341.849 ops/s
# Warmup Iteration   7: 6523769.902 ops/s
# Warmup Iteration   8: 6393957.876 ops/s
# Warmup Iteration   9: 6558402.081 ops/s
# Warmup Iteration  10: 6414648.061 ops/s
# Warmup Iteration  11: 6379642.404 ops/s
# Warmup Iteration  12: 6315887.911 ops/s
# Warmup Iteration  13: 6407446.598 ops/s
# Warmup Iteration  14: 6506254.134 ops/s
# Warmup Iteration  15: 6407725.067 ops/s
# Warmup Iteration  16: 6428679.605 ops/s
# Warmup Iteration  17: 6641328.876 ops/s
# Warmup Iteration  18: 6667931.286 ops/s
# Warmup Iteration  19: 6606392.978 ops/s
# Warmup Iteration  20: 6466924.748 ops/s
# Warmup Iteration  21: 6394126.069 ops/s
# Warmup Iteration  22: 6412149.996 ops/s
# Warmup Iteration  23: 6446952.050 ops/s
# Warmup Iteration  24: 6580495.509 ops/s
# Warmup Iteration  25: 6449978.824 ops/s
# Warmup Iteration  26: 6565115.349 ops/s
# Warmup Iteration  27: 6578114.278 ops/s
# Warmup Iteration  28: 6442209.587 ops/s
# Warmup Iteration  29: 6475031.138 ops/s
# Warmup Iteration  30: 6358226.904 ops/s
Iteration   1: 6254745.890 ops/s
Iteration   2: 6638159.821 ops/s
Iteration   3: 6705770.725 ops/s
Iteration   4: 6539285.625 ops/s
Iteration   5: 6333201.742 ops/s
Iteration   6: 6339019.863 ops/s
Iteration   7: 6422236.313 ops/s
Iteration   8: 6526288.947 ops/s
Iteration   9: 6507844.752 ops/s
Iteration  10: 6607155.490 ops/s
Iteration  11: 6612086.370 ops/s
Iteration  12: 6508547.299 ops/s
Iteration  13: 6554478.986 ops/s
Iteration  14: 6497472.584 ops/s
Iteration  15: 6408750.163 ops/s
Iteration  16: 6555988.504 ops/s
Iteration  17: 6661586.974 ops/s
Iteration  18: 6463673.663 ops/s
Iteration  19: 6378977.636 ops/s
Iteration  20: 6488600.508 ops/s
Iteration  21: 6373110.856 ops/s
Iteration  22: 6516879.858 ops/s
Iteration  23: 6537365.260 ops/s
Iteration  24: 6534962.684 ops/s
Iteration  25: 6520129.667 ops/s
Iteration  26: 6668085.985 ops/s
Iteration  27: 6522486.754 ops/s
Iteration  28: 6343615.841 ops/s
Iteration  29: 6412477.187 ops/s
Iteration  30: 6518407.352 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_asReversed":
  6498379.777 ±(99.9%) 72868.129 ops/s [Average]
  (min, avg, max) = (6254745.890, 6498379.777, 6705770.725), stdev = 109065.593
  CI (99.9%): [6425511.648, 6571247.905] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_asReversed  thrpt   30  6498379.777 ± 72868.129  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 746102.240 ops/s
# Warmup Iteration   2: 768352.705 ops/s
# Warmup Iteration   3: 1033388.610 ops/s
# Warmup Iteration   4: 1035721.366 ops/s
# Warmup Iteration   5: 1041461.433 ops/s
# Warmup Iteration   6: 1039902.155 ops/s
# Warmup Iteration   7: 1013999.354 ops/s
# Warmup Iteration   8: 1014619.101 ops/s
# Warmup Iteration   9: 1009281.469 ops/s
# Warmup Iteration  10: 1028574.168 ops/s
# Warmup Iteration  11: 958951.243 ops/s
# Warmup Iteration  12: 978870.632 ops/s
# Warmup Iteration  13: 1023045.720 ops/s
# Warmup Iteration  14: 1021757.960 ops/s
# Warmup Iteration  15: 1012592.884 ops/s
# Warmup Iteration  16: 1001400.620 ops/s
# Warmup Iteration  17: 1083164.384 ops/s
# Warmup Iteration  18: 1073660.362 ops/s
# Warmup Iteration  19: 1056786.847 ops/s
# Warmup Iteration  20: 1057872.724 ops/s
# Warmup Iteration  21: 1062307.233 ops/s
# Warmup Iteration  22: 1052285.868 ops/s
# Warmup Iteration  23: 1049673.963 ops/s
# Warmup Iteration  24: 1097388.137 ops/s
# Warmup Iteration  25: 1105267.234 ops/s
# Warmup Iteration  26: 1110082.128 ops/s
# Warmup Iteration  27: 1110687.174 ops/s
# Warmup Iteration  28: 1070521.014 ops/s
# Warmup Iteration  29: 1040814.882 ops/s
# Warmup Iteration  30: 1068260.643 ops/s
Iteration   1: 1060845.147 ops/s
Iteration   2: 1076443.132 ops/s
Iteration   3: 1078840.977 ops/s
Iteration   4: 1112310.509 ops/s
Iteration   5: 1078530.248 ops/s
Iteration   6: 1070235.220 ops/s
Iteration   7: 1051151.193 ops/s
Iteration   8: 1042620.222 ops/s
Iteration   9: 1051007.165 ops/s
Iteration  10: 1033092.598 ops/s
Iteration  11: 1064616.912 ops/s
Iteration  12: 1081682.324 ops/s
Iteration  13: 1115230.257 ops/s
Iteration  14: 1113685.074 ops/s
Iteration  15: 1102856.967 ops/s
Iteration  16: 1063357.367 ops/s
Iteration  17: 1067940.349 ops/s
Iteration  18: 1068205.485 ops/s
Iteration  19: 1055075.013 ops/s
Iteration  20: 1059267.552 ops/s
Iteration  21: 1081792.193 ops/s
Iteration  22: 1089228.022 ops/s
Iteration  23: 1102910.286 ops/s
Iteration  24: 1080373.660 ops/s
Iteration  25: 1066053.318 ops/s
Iteration  26: 1084270.165 ops/s
Iteration  27: 1031170.785 ops/s
Iteration  28: 1057647.839 ops/s
Iteration  29: 1067108.193 ops/s
Iteration  30: 1101185.676 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_castToCollection":
  1073624.462 ±(99.9%) 15015.919 ops/s [Average]
  (min, avg, max) = (1031170.785, 1073624.462, 1115230.257), stdev = 22475.123
  CI (99.9%): [1058608.542, 1088640.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_castToCollection  thrpt   30  1073624.462 ± 15015.919  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3711831.885 ops/s
# Warmup Iteration   2: 8604818.732 ops/s
# Warmup Iteration   3: 8509738.793 ops/s
# Warmup Iteration   4: 7025388.415 ops/s
# Warmup Iteration   5: 8335342.586 ops/s
# Warmup Iteration   6: 8446193.834 ops/s
# Warmup Iteration   7: 8331771.687 ops/s
# Warmup Iteration   8: 8473728.974 ops/s
# Warmup Iteration   9: 8302956.965 ops/s
# Warmup Iteration  10: 8454834.036 ops/s
# Warmup Iteration  11: 8441233.839 ops/s
# Warmup Iteration  12: 8319607.204 ops/s
# Warmup Iteration  13: 8418949.218 ops/s
# Warmup Iteration  14: 8562155.782 ops/s
# Warmup Iteration  15: 8479118.993 ops/s
# Warmup Iteration  16: 8406299.675 ops/s
# Warmup Iteration  17: 8367865.503 ops/s
# Warmup Iteration  18: 8389889.717 ops/s
# Warmup Iteration  19: 8486329.840 ops/s
# Warmup Iteration  20: 8344679.399 ops/s
# Warmup Iteration  21: 8273858.692 ops/s
# Warmup Iteration  22: 8314896.825 ops/s
# Warmup Iteration  23: 8352594.605 ops/s
# Warmup Iteration  24: 8401865.788 ops/s
# Warmup Iteration  25: 8355213.608 ops/s
# Warmup Iteration  26: 8471047.969 ops/s
# Warmup Iteration  27: 8351135.091 ops/s
# Warmup Iteration  28: 8454734.167 ops/s
# Warmup Iteration  29: 8390877.477 ops/s
# Warmup Iteration  30: 8386397.617 ops/s
Iteration   1: 8422173.429 ops/s
Iteration   2: 8198956.818 ops/s
Iteration   3: 8267311.939 ops/s
Iteration   4: 8517078.090 ops/s
Iteration   5: 8288283.387 ops/s
Iteration   6: 8619288.588 ops/s
Iteration   7: 8550809.033 ops/s
Iteration   8: 8324726.790 ops/s
Iteration   9: 8107191.669 ops/s
Iteration  10: 8183672.586 ops/s
Iteration  11: 8359078.117 ops/s
Iteration  12: 8221140.547 ops/s
Iteration  13: 8349833.966 ops/s
Iteration  14: 8428746.462 ops/s
Iteration  15: 8457717.810 ops/s
Iteration  16: 8426693.805 ops/s
Iteration  17: 8056590.491 ops/s
Iteration  18: 8341033.799 ops/s
Iteration  19: 8305788.951 ops/s
Iteration  20: 8554747.353 ops/s
Iteration  21: 8266469.822 ops/s
Iteration  22: 8185631.755 ops/s
Iteration  23: 8429490.972 ops/s
Iteration  24: 8422347.612 ops/s
Iteration  25: 8389165.010 ops/s
Iteration  26: 8339107.816 ops/s
Iteration  27: 8303807.746 ops/s
Iteration  28: 8117104.478 ops/s
Iteration  29: 8627368.085 ops/s
Iteration  30: 8581724.441 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_chunk_large_size":
  8354769.379 ±(99.9%) 101599.224 ops/s [Average]
  (min, avg, max) = (8056590.491, 8354769.379, 8627368.085), stdev = 152068.948
  CI (99.9%): [8253170.155, 8456368.603] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  8354769.379 ± 101599.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 754610.509 ops/s
# Warmup Iteration   2: 789182.363 ops/s
# Warmup Iteration   3: 1000603.942 ops/s
# Warmup Iteration   4: 1011242.333 ops/s
# Warmup Iteration   5: 993154.982 ops/s
# Warmup Iteration   6: 994626.823 ops/s
# Warmup Iteration   7: 994050.407 ops/s
# Warmup Iteration   8: 1012497.098 ops/s
# Warmup Iteration   9: 1037088.615 ops/s
# Warmup Iteration  10: 1027559.959 ops/s
# Warmup Iteration  11: 1003335.322 ops/s
# Warmup Iteration  12: 897875.481 ops/s
# Warmup Iteration  13: 1039349.493 ops/s
# Warmup Iteration  14: 1001972.496 ops/s
# Warmup Iteration  15: 1009290.059 ops/s
# Warmup Iteration  16: 994797.986 ops/s
# Warmup Iteration  17: 1066464.830 ops/s
# Warmup Iteration  18: 1072915.465 ops/s
# Warmup Iteration  19: 1035352.492 ops/s
# Warmup Iteration  20: 1056715.805 ops/s
# Warmup Iteration  21: 1046630.018 ops/s
# Warmup Iteration  22: 1071920.589 ops/s
# Warmup Iteration  23: 1081323.184 ops/s
# Warmup Iteration  24: 1092946.965 ops/s
# Warmup Iteration  25: 1070299.317 ops/s
# Warmup Iteration  26: 1060382.315 ops/s
# Warmup Iteration  27: 1062534.062 ops/s
# Warmup Iteration  28: 1065330.439 ops/s
# Warmup Iteration  29: 1052787.369 ops/s
# Warmup Iteration  30: 1047122.983 ops/s
Iteration   1: 1080633.870 ops/s
Iteration   2: 1098325.917 ops/s
Iteration   3: 1101611.815 ops/s
Iteration   4: 1094610.924 ops/s
Iteration   5: 1058285.330 ops/s
Iteration   6: 1075260.414 ops/s
Iteration   7: 1066059.208 ops/s
Iteration   8: 1057362.559 ops/s
Iteration   9: 1081462.760 ops/s
Iteration  10: 1101077.077 ops/s
Iteration  11: 1089165.380 ops/s
Iteration  12: 1060114.336 ops/s
Iteration  13: 1080157.174 ops/s
Iteration  14: 1067851.353 ops/s
Iteration  15: 1074576.792 ops/s
Iteration  16: 1067511.612 ops/s
Iteration  17: 1080093.281 ops/s
Iteration  18: 1088094.695 ops/s
Iteration  19: 1083274.225 ops/s
Iteration  20: 1068411.405 ops/s
Iteration  21: 1038976.855 ops/s
Iteration  22: 1070324.662 ops/s
Iteration  23: 1049593.609 ops/s
Iteration  24: 1047679.999 ops/s
Iteration  25: 1066086.841 ops/s
Iteration  26: 1062829.328 ops/s
Iteration  27: 1071718.440 ops/s
Iteration  28: 1064184.028 ops/s
Iteration  29: 1082517.481 ops/s
Iteration  30: 1072975.262 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_chunk_zero_throws":
  1073360.888 ±(99.9%) 10360.075 ops/s [Average]
  (min, avg, max) = (1038976.855, 1073360.888, 1101611.815), stdev = 15506.473
  CI (99.9%): [1063000.813, 1083720.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1073360.888 ± 10360.075  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 719047.518 ops/s
# Warmup Iteration   2: 775378.564 ops/s
# Warmup Iteration   3: 971637.134 ops/s
# Warmup Iteration   4: 963648.834 ops/s
# Warmup Iteration   5: 966224.368 ops/s
# Warmup Iteration   6: 973479.993 ops/s
# Warmup Iteration   7: 970256.606 ops/s
# Warmup Iteration   8: 973048.770 ops/s
# Warmup Iteration   9: 939127.171 ops/s
# Warmup Iteration  10: 945584.393 ops/s
# Warmup Iteration  11: 949206.420 ops/s
# Warmup Iteration  12: 784616.324 ops/s
# Warmup Iteration  13: 943123.113 ops/s
# Warmup Iteration  14: 943992.164 ops/s
# Warmup Iteration  15: 929673.013 ops/s
# Warmup Iteration  16: 942356.132 ops/s
# Warmup Iteration  17: 995891.307 ops/s
# Warmup Iteration  18: 995135.135 ops/s
# Warmup Iteration  19: 995120.328 ops/s
# Warmup Iteration  20: 1020375.563 ops/s
# Warmup Iteration  21: 994245.159 ops/s
# Warmup Iteration  22: 975885.196 ops/s
# Warmup Iteration  23: 987298.704 ops/s
# Warmup Iteration  24: 1006034.022 ops/s
# Warmup Iteration  25: 990391.555 ops/s
# Warmup Iteration  26: 996357.086 ops/s
# Warmup Iteration  27: 1006825.815 ops/s
# Warmup Iteration  28: 993362.509 ops/s
# Warmup Iteration  29: 998213.431 ops/s
# Warmup Iteration  30: 971630.093 ops/s
Iteration   1: 991098.673 ops/s
Iteration   2: 1002178.822 ops/s
Iteration   3: 990430.898 ops/s
Iteration   4: 1006307.057 ops/s
Iteration   5: 980626.959 ops/s
Iteration   6: 1013389.694 ops/s
Iteration   7: 1030233.655 ops/s
Iteration   8: 1019123.090 ops/s
Iteration   9: 972714.732 ops/s
Iteration  10: 1010473.108 ops/s
Iteration  11: 1011146.329 ops/s
Iteration  12: 1034550.571 ops/s
Iteration  13: 999984.083 ops/s
Iteration  14: 981123.119 ops/s
Iteration  15: 990855.527 ops/s
Iteration  16: 996077.290 ops/s
Iteration  17: 991968.735 ops/s
Iteration  18: 1001155.197 ops/s
Iteration  19: 1005854.380 ops/s
Iteration  20: 1009978.937 ops/s
Iteration  21: 1001472.568 ops/s
Iteration  22: 983127.002 ops/s
Iteration  23: 988036.878 ops/s
Iteration  24: 977294.548 ops/s
Iteration  25: 998981.524 ops/s
Iteration  26: 1028259.656 ops/s
Iteration  27: 1034064.850 ops/s
Iteration  28: 1013289.491 ops/s
Iteration  29: 995369.024 ops/s
Iteration  30: 1011313.754 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_clear":
  1002349.338 ±(99.9%) 11057.105 ops/s [Average]
  (min, avg, max) = (972714.732, 1002349.338, 1034550.571), stdev = 16549.755
  CI (99.9%): [991292.234, 1013406.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_clear  thrpt   30  1002349.338 ± 11057.105  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6593820.761 ops/s
# Warmup Iteration   2: 12245067.643 ops/s
# Warmup Iteration   3: 13079256.246 ops/s
# Warmup Iteration   4: 12983320.043 ops/s
# Warmup Iteration   5: 11632381.289 ops/s
# Warmup Iteration   6: 12561797.922 ops/s
# Warmup Iteration   7: 13237650.926 ops/s
# Warmup Iteration   8: 13266634.020 ops/s
# Warmup Iteration   9: 13560555.545 ops/s
# Warmup Iteration  10: 13477960.500 ops/s
# Warmup Iteration  11: 13247860.925 ops/s
# Warmup Iteration  12: 13107222.737 ops/s
# Warmup Iteration  13: 13307489.641 ops/s
# Warmup Iteration  14: 13253566.015 ops/s
# Warmup Iteration  15: 13241422.942 ops/s
# Warmup Iteration  16: 13348630.768 ops/s
# Warmup Iteration  17: 13202266.824 ops/s
# Warmup Iteration  18: 13244807.837 ops/s
# Warmup Iteration  19: 13729050.606 ops/s
# Warmup Iteration  20: 13137914.773 ops/s
# Warmup Iteration  21: 13174092.991 ops/s
# Warmup Iteration  22: 13071755.354 ops/s
# Warmup Iteration  23: 13312654.523 ops/s
# Warmup Iteration  24: 13219718.386 ops/s
# Warmup Iteration  25: 13346437.181 ops/s
# Warmup Iteration  26: 13748141.677 ops/s
# Warmup Iteration  27: 13430198.039 ops/s
# Warmup Iteration  28: 13418352.115 ops/s
# Warmup Iteration  29: 13277869.616 ops/s
# Warmup Iteration  30: 13535187.711 ops/s
Iteration   1: 13094971.424 ops/s
Iteration   2: 13370083.917 ops/s
Iteration   3: 13166767.673 ops/s
Iteration   4: 13318314.817 ops/s
Iteration   5: 13456996.787 ops/s
Iteration   6: 13424042.022 ops/s
Iteration   7: 13463209.812 ops/s
Iteration   8: 13896079.463 ops/s
Iteration   9: 13693648.941 ops/s
Iteration  10: 13429734.020 ops/s
Iteration  11: 13188312.508 ops/s
Iteration  12: 13478610.088 ops/s
Iteration  13: 12880524.613 ops/s
Iteration  14: 12972371.284 ops/s
Iteration  15: 13224938.290 ops/s
Iteration  16: 13134363.848 ops/s
Iteration  17: 13458263.385 ops/s
Iteration  18: 13493464.569 ops/s
Iteration  19: 13317307.213 ops/s
Iteration  20: 13406182.810 ops/s
Iteration  21: 13298770.428 ops/s
Iteration  22: 13373973.895 ops/s
Iteration  23: 13407107.666 ops/s
Iteration  24: 13584846.701 ops/s
Iteration  25: 13464022.272 ops/s
Iteration  26: 13566336.839 ops/s
Iteration  27: 13383244.110 ops/s
Iteration  28: 13450679.188 ops/s
Iteration  29: 13285955.344 ops/s
Iteration  30: 13554408.966 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collect":
  13374584.430 ±(99.9%) 136877.153 ops/s [Average]
  (min, avg, max) = (12880524.613, 13374584.430, 13896079.463), stdev = 204871.294
  CI (99.9%): [13237707.277, 13511461.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collect  thrpt   30  13374584.430 ± 136877.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3107042.459 ops/s
# Warmup Iteration   2: 6797628.023 ops/s
# Warmup Iteration   3: 7023449.814 ops/s
# Warmup Iteration   4: 7255109.256 ops/s
# Warmup Iteration   5: 5935727.424 ops/s
# Warmup Iteration   6: 7081241.784 ops/s
# Warmup Iteration   7: 7052743.628 ops/s
# Warmup Iteration   8: 7122244.043 ops/s
# Warmup Iteration   9: 7054995.547 ops/s
# Warmup Iteration  10: 7169371.375 ops/s
# Warmup Iteration  11: 7205306.993 ops/s
# Warmup Iteration  12: 7223332.232 ops/s
# Warmup Iteration  13: 7064936.828 ops/s
# Warmup Iteration  14: 7196941.271 ops/s
# Warmup Iteration  15: 7284348.306 ops/s
# Warmup Iteration  16: 7185937.776 ops/s
# Warmup Iteration  17: 7230059.389 ops/s
# Warmup Iteration  18: 7170254.627 ops/s
# Warmup Iteration  19: 7200879.059 ops/s
# Warmup Iteration  20: 7339476.963 ops/s
# Warmup Iteration  21: 7086317.544 ops/s
# Warmup Iteration  22: 7196506.411 ops/s
# Warmup Iteration  23: 7364850.911 ops/s
# Warmup Iteration  24: 7133596.592 ops/s
# Warmup Iteration  25: 7028428.463 ops/s
# Warmup Iteration  26: 7297547.615 ops/s
# Warmup Iteration  27: 7041810.469 ops/s
# Warmup Iteration  28: 7202433.301 ops/s
# Warmup Iteration  29: 7077927.746 ops/s
# Warmup Iteration  30: 7180601.430 ops/s
Iteration   1: 7124674.972 ops/s
Iteration   2: 7182652.433 ops/s
Iteration   3: 7079695.766 ops/s
Iteration   4: 7174718.493 ops/s
Iteration   5: 7212289.015 ops/s
Iteration   6: 7245245.561 ops/s
Iteration   7: 7277031.245 ops/s
Iteration   8: 7401197.160 ops/s
Iteration   9: 7403815.316 ops/s
Iteration  10: 7442800.468 ops/s
Iteration  11: 7445528.210 ops/s
Iteration  12: 7358697.031 ops/s
Iteration  13: 6935914.426 ops/s
Iteration  14: 7103749.100 ops/s
Iteration  15: 7238973.886 ops/s
Iteration  16: 7134459.677 ops/s
Iteration  17: 7118295.225 ops/s
Iteration  18: 6962020.740 ops/s
Iteration  19: 7201316.558 ops/s
Iteration  20: 7264018.057 ops/s
Iteration  21: 7120681.110 ops/s
Iteration  22: 7256880.294 ops/s
Iteration  23: 7348621.696 ops/s
Iteration  24: 7308579.566 ops/s
Iteration  25: 7135859.900 ops/s
Iteration  26: 7439104.309 ops/s
Iteration  27: 7277166.946 ops/s
Iteration  28: 7141327.862 ops/s
Iteration  29: 7418194.325 ops/s
Iteration  30: 7431272.232 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectBoolean":
  7239492.719 ±(99.9%) 94182.172 ops/s [Average]
  (min, avg, max) = (6935914.426, 7239492.719, 7445528.210), stdev = 140967.451
  CI (99.9%): [7145310.548, 7333674.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collectBoolean  thrpt   30  7239492.719 ± 94182.172  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2787435.567 ops/s
# Warmup Iteration   2: 4990413.852 ops/s
# Warmup Iteration   3: 5661069.572 ops/s
# Warmup Iteration   4: 5718567.889 ops/s
# Warmup Iteration   5: 5716411.375 ops/s
# Warmup Iteration   6: 4692254.820 ops/s
# Warmup Iteration   7: 5780101.579 ops/s
# Warmup Iteration   8: 5735734.489 ops/s
# Warmup Iteration   9: 5802761.403 ops/s
# Warmup Iteration  10: 5748118.016 ops/s
# Warmup Iteration  11: 5768246.061 ops/s
# Warmup Iteration  12: 5665640.529 ops/s
# Warmup Iteration  13: 5760141.532 ops/s
# Warmup Iteration  14: 5712738.617 ops/s
# Warmup Iteration  15: 5830560.983 ops/s
# Warmup Iteration  16: 5747128.310 ops/s
# Warmup Iteration  17: 5935314.579 ops/s
# Warmup Iteration  18: 5747963.939 ops/s
# Warmup Iteration  19: 5829148.074 ops/s
# Warmup Iteration  20: 5823014.535 ops/s
# Warmup Iteration  21: 5786510.804 ops/s
# Warmup Iteration  22: 5786666.309 ops/s
# Warmup Iteration  23: 5877426.390 ops/s
# Warmup Iteration  24: 5793951.283 ops/s
# Warmup Iteration  25: 5788692.670 ops/s
# Warmup Iteration  26: 5792786.871 ops/s
# Warmup Iteration  27: 5746727.564 ops/s
# Warmup Iteration  28: 5824828.491 ops/s
# Warmup Iteration  29: 5849686.627 ops/s
# Warmup Iteration  30: 5891726.086 ops/s
Iteration   1: 5723972.547 ops/s
Iteration   2: 5861217.554 ops/s
Iteration   3: 5722194.637 ops/s
Iteration   4: 5821654.871 ops/s
Iteration   5: 5976329.483 ops/s
Iteration   6: 5740057.415 ops/s
Iteration   7: 5817149.715 ops/s
Iteration   8: 5753811.985 ops/s
Iteration   9: 5955373.245 ops/s
Iteration  10: 5752290.958 ops/s
Iteration  11: 5726844.542 ops/s
Iteration  12: 5732512.354 ops/s
Iteration  13: 5774877.215 ops/s
Iteration  14: 5849148.033 ops/s
Iteration  15: 5808119.835 ops/s
Iteration  16: 5741886.367 ops/s
Iteration  17: 5868581.910 ops/s
Iteration  18: 5968672.836 ops/s
Iteration  19: 5862957.269 ops/s
Iteration  20: 5908906.464 ops/s
Iteration  21: 5822080.917 ops/s
Iteration  22: 5834484.498 ops/s
Iteration  23: 5834980.940 ops/s
Iteration  24: 5774722.748 ops/s
Iteration  25: 5882513.782 ops/s
Iteration  26: 5822074.915 ops/s
Iteration  27: 5701994.202 ops/s
Iteration  28: 5621524.958 ops/s
Iteration  29: 5764010.725 ops/s
Iteration  30: 5819510.106 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectByte":
  5808148.568 ±(99.9%) 55056.540 ops/s [Average]
  (min, avg, max) = (5621524.958, 5808148.568, 5976329.483), stdev = 82406.043
  CI (99.9%): [5753092.028, 5863205.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collectByte  thrpt   30  5808148.568 ± 55056.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2816031.636 ops/s
# Warmup Iteration   2: 5514788.370 ops/s
# Warmup Iteration   3: 6053167.739 ops/s
# Warmup Iteration   4: 6190505.391 ops/s
# Warmup Iteration   5: 5239816.866 ops/s
# Warmup Iteration   6: 5844548.382 ops/s
# Warmup Iteration   7: 6117403.555 ops/s
# Warmup Iteration   8: 6154566.364 ops/s
# Warmup Iteration   9: 6227961.562 ops/s
# Warmup Iteration  10: 6154754.748 ops/s
# Warmup Iteration  11: 6262584.923 ops/s
# Warmup Iteration  12: 6190212.538 ops/s
# Warmup Iteration  13: 6160769.149 ops/s
# Warmup Iteration  14: 6141623.064 ops/s
# Warmup Iteration  15: 6031240.230 ops/s
# Warmup Iteration  16: 6002077.904 ops/s
# Warmup Iteration  17: 6163247.069 ops/s
# Warmup Iteration  18: 6086367.027 ops/s
# Warmup Iteration  19: 6118798.829 ops/s
# Warmup Iteration  20: 6159788.068 ops/s
# Warmup Iteration  21: 6015734.400 ops/s
# Warmup Iteration  22: 6118530.213 ops/s
# Warmup Iteration  23: 6235643.405 ops/s
# Warmup Iteration  24: 6242725.517 ops/s
# Warmup Iteration  25: 6127134.122 ops/s
# Warmup Iteration  26: 6040655.330 ops/s
# Warmup Iteration  27: 6036548.955 ops/s
# Warmup Iteration  28: 6078505.333 ops/s
# Warmup Iteration  29: 6086224.836 ops/s
# Warmup Iteration  30: 6204612.209 ops/s
Iteration   1: 6066062.581 ops/s
Iteration   2: 6207565.181 ops/s
Iteration   3: 6000253.163 ops/s
Iteration   4: 6021380.783 ops/s
Iteration   5: 6120588.002 ops/s
Iteration   6: 6089772.863 ops/s
Iteration   7: 6184937.859 ops/s
Iteration   8: 6148734.290 ops/s
Iteration   9: 6109497.794 ops/s
Iteration  10: 6017013.637 ops/s
Iteration  11: 5978379.969 ops/s
Iteration  12: 6335592.378 ops/s
Iteration  13: 6113752.397 ops/s
Iteration  14: 6022945.478 ops/s
Iteration  15: 6219866.949 ops/s
Iteration  16: 6091009.131 ops/s
Iteration  17: 6030413.293 ops/s
Iteration  18: 6107686.087 ops/s
Iteration  19: 6004506.950 ops/s
Iteration  20: 5988198.219 ops/s
Iteration  21: 6194286.970 ops/s
Iteration  22: 6113573.798 ops/s
Iteration  23: 6164566.470 ops/s
Iteration  24: 6215754.650 ops/s
Iteration  25: 6220860.783 ops/s
Iteration  26: 6276342.100 ops/s
Iteration  27: 6166703.277 ops/s
Iteration  28: 6118832.467 ops/s
Iteration  29: 6077187.076 ops/s
Iteration  30: 6172972.183 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectChar":
  6119307.893 ±(99.9%) 60162.090 ops/s [Average]
  (min, avg, max) = (5978379.969, 6119307.893, 6335592.378), stdev = 90047.790
  CI (99.9%): [6059145.803, 6179469.982] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collectChar  thrpt   30  6119307.893 ± 60162.090  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2559548.726 ops/s
# Warmup Iteration   2: 5598678.358 ops/s
# Warmup Iteration   3: 5852456.024 ops/s
# Warmup Iteration   4: 5849171.087 ops/s
# Warmup Iteration   5: 4869227.525 ops/s
# Warmup Iteration   6: 5874537.274 ops/s
# Warmup Iteration   7: 5798461.320 ops/s
# Warmup Iteration   8: 5921460.135 ops/s
# Warmup Iteration   9: 5724922.880 ops/s
# Warmup Iteration  10: 5826162.210 ops/s
# Warmup Iteration  11: 5936658.874 ops/s
# Warmup Iteration  12: 5792734.046 ops/s
# Warmup Iteration  13: 5895200.969 ops/s
# Warmup Iteration  14: 5888642.654 ops/s
# Warmup Iteration  15: 5851300.642 ops/s
# Warmup Iteration  16: 5851003.935 ops/s
# Warmup Iteration  17: 5799532.222 ops/s
# Warmup Iteration  18: 5881745.721 ops/s
# Warmup Iteration  19: 5787364.522 ops/s
# Warmup Iteration  20: 5885890.929 ops/s
# Warmup Iteration  21: 5922838.875 ops/s
# Warmup Iteration  22: 6091698.600 ops/s
# Warmup Iteration  23: 5925847.994 ops/s
# Warmup Iteration  24: 5895554.134 ops/s
# Warmup Iteration  25: 5905311.225 ops/s
# Warmup Iteration  26: 5886035.501 ops/s
# Warmup Iteration  27: 6004675.736 ops/s
# Warmup Iteration  28: 6059812.271 ops/s
# Warmup Iteration  29: 5950603.845 ops/s
# Warmup Iteration  30: 5880687.159 ops/s
Iteration   1: 5856900.742 ops/s
Iteration   2: 6023545.378 ops/s
Iteration   3: 5866420.622 ops/s
Iteration   4: 6107158.447 ops/s
Iteration   5: 6163891.635 ops/s
Iteration   6: 5985343.528 ops/s
Iteration   7: 5914753.401 ops/s
Iteration   8: 5963693.136 ops/s
Iteration   9: 5842774.320 ops/s
Iteration  10: 5882620.966 ops/s
Iteration  11: 5968092.351 ops/s
Iteration  12: 6065624.459 ops/s
Iteration  13: 6007951.518 ops/s
Iteration  14: 6074585.731 ops/s
Iteration  15: 5866276.699 ops/s
Iteration  16: 5799990.741 ops/s
Iteration  17: 5869825.072 ops/s
Iteration  18: 5853907.042 ops/s
Iteration  19: 5838458.890 ops/s
Iteration  20: 5990563.301 ops/s
Iteration  21: 5988743.334 ops/s
Iteration  22: 5940968.873 ops/s
Iteration  23: 5955120.019 ops/s
Iteration  24: 5892304.407 ops/s
Iteration  25: 5982279.848 ops/s
Iteration  26: 5780217.099 ops/s
Iteration  27: 5798756.926 ops/s
Iteration  28: 5977265.431 ops/s
Iteration  29: 5778117.368 ops/s
Iteration  30: 5910696.764 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectDouble":
  5931561.602 ±(99.9%) 65810.471 ops/s [Average]
  (min, avg, max) = (5778117.368, 5931561.602, 6163891.635), stdev = 98502.023
  CI (99.9%): [5865751.130, 5997372.073] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collectDouble  thrpt   30  5931561.602 ± 65810.471  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2729290.112 ops/s
# Warmup Iteration   2: 5636259.751 ops/s
# Warmup Iteration   3: 6079525.333 ops/s
# Warmup Iteration   4: 6170615.870 ops/s
# Warmup Iteration   5: 5063650.225 ops/s
# Warmup Iteration   6: 6096447.108 ops/s
# Warmup Iteration   7: 6190456.754 ops/s
# Warmup Iteration   8: 6071840.255 ops/s
# Warmup Iteration   9: 6064151.091 ops/s
# Warmup Iteration  10: 5930597.096 ops/s
# Warmup Iteration  11: 6052641.688 ops/s
# Warmup Iteration  12: 6168151.754 ops/s
# Warmup Iteration  13: 6330770.983 ops/s
# Warmup Iteration  14: 6038623.849 ops/s
# Warmup Iteration  15: 6042261.912 ops/s
# Warmup Iteration  16: 6003813.276 ops/s
# Warmup Iteration  17: 5996558.664 ops/s
# Warmup Iteration  18: 5938036.489 ops/s
# Warmup Iteration  19: 6145779.878 ops/s
# Warmup Iteration  20: 5895102.096 ops/s
# Warmup Iteration  21: 6351053.549 ops/s
# Warmup Iteration  22: 6025048.428 ops/s
# Warmup Iteration  23: 6000269.762 ops/s
# Warmup Iteration  24: 6085918.295 ops/s
# Warmup Iteration  25: 6096724.797 ops/s
# Warmup Iteration  26: 6140014.463 ops/s
# Warmup Iteration  27: 6090889.722 ops/s
# Warmup Iteration  28: 6079421.641 ops/s
# Warmup Iteration  29: 6055652.626 ops/s
# Warmup Iteration  30: 6076015.986 ops/s
Iteration   1: 6069393.860 ops/s
Iteration   2: 5944176.171 ops/s
Iteration   3: 6038395.641 ops/s
Iteration   4: 6065809.056 ops/s
Iteration   5: 6330924.251 ops/s
Iteration   6: 6102543.166 ops/s
Iteration   7: 5933888.178 ops/s
Iteration   8: 6057813.565 ops/s
Iteration   9: 6048320.261 ops/s
Iteration  10: 5951016.645 ops/s
Iteration  11: 6020235.395 ops/s
Iteration  12: 5948636.009 ops/s
Iteration  13: 5989962.115 ops/s
Iteration  14: 6026692.730 ops/s
Iteration  15: 6320267.149 ops/s
Iteration  16: 6270229.850 ops/s
Iteration  17: 6092278.651 ops/s
Iteration  18: 5907556.316 ops/s
Iteration  19: 6041586.811 ops/s
Iteration  20: 5939864.112 ops/s
Iteration  21: 6034949.913 ops/s
Iteration  22: 5871256.053 ops/s
Iteration  23: 5935422.850 ops/s
Iteration  24: 6034818.770 ops/s
Iteration  25: 6127942.893 ops/s
Iteration  26: 6158310.564 ops/s
Iteration  27: 6071696.100 ops/s
Iteration  28: 5921295.025 ops/s
Iteration  29: 5992648.030 ops/s
Iteration  30: 6040636.600 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectFloat":
  6042952.224 ±(99.9%) 75504.551 ops/s [Average]
  (min, avg, max) = (5871256.053, 6042952.224, 6330924.251), stdev = 113011.666
  CI (99.9%): [5967447.673, 6118456.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collectFloat  thrpt   30  6042952.224 ± 75504.551  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3936394.082 ops/s
# Warmup Iteration   2: 6509554.023 ops/s
# Warmup Iteration   3: 7090780.637 ops/s
# Warmup Iteration   4: 6957837.634 ops/s
# Warmup Iteration   5: 7058739.756 ops/s
# Warmup Iteration   6: 5855207.953 ops/s
# Warmup Iteration   7: 7169085.588 ops/s
# Warmup Iteration   8: 7202774.132 ops/s
# Warmup Iteration   9: 6935578.224 ops/s
# Warmup Iteration  10: 7014458.842 ops/s
# Warmup Iteration  11: 7068304.428 ops/s
# Warmup Iteration  12: 7243760.347 ops/s
# Warmup Iteration  13: 7051026.731 ops/s
# Warmup Iteration  14: 7093734.547 ops/s
# Warmup Iteration  15: 7162646.335 ops/s
# Warmup Iteration  16: 7168631.954 ops/s
# Warmup Iteration  17: 7160557.890 ops/s
# Warmup Iteration  18: 7095896.656 ops/s
# Warmup Iteration  19: 7229447.137 ops/s
# Warmup Iteration  20: 7095386.513 ops/s
# Warmup Iteration  21: 7047864.400 ops/s
# Warmup Iteration  22: 7081939.645 ops/s
# Warmup Iteration  23: 7297044.161 ops/s
# Warmup Iteration  24: 6894612.632 ops/s
# Warmup Iteration  25: 7016872.487 ops/s
# Warmup Iteration  26: 7066758.390 ops/s
# Warmup Iteration  27: 7109905.433 ops/s
# Warmup Iteration  28: 7142292.482 ops/s
# Warmup Iteration  29: 7007416.341 ops/s
# Warmup Iteration  30: 7030455.785 ops/s
Iteration   1: 6926143.258 ops/s
Iteration   2: 7210787.173 ops/s
Iteration   3: 7103280.536 ops/s
Iteration   4: 7016340.718 ops/s
Iteration   5: 6933391.664 ops/s
Iteration   6: 7020411.116 ops/s
Iteration   7: 6789852.548 ops/s
Iteration   8: 6920730.319 ops/s
Iteration   9: 6876500.000 ops/s
Iteration  10: 7026361.008 ops/s
Iteration  11: 7163470.218 ops/s
Iteration  12: 7027368.409 ops/s
Iteration  13: 7175419.873 ops/s
Iteration  14: 7015060.211 ops/s
Iteration  15: 7040574.579 ops/s
Iteration  16: 6972200.215 ops/s
Iteration  17: 7000352.117 ops/s
Iteration  18: 7032656.304 ops/s
Iteration  19: 7166705.010 ops/s
Iteration  20: 7134147.932 ops/s
Iteration  21: 7056933.799 ops/s
Iteration  22: 6943007.537 ops/s
Iteration  23: 6909926.173 ops/s
Iteration  24: 6912258.598 ops/s
Iteration  25: 6944843.612 ops/s
Iteration  26: 7136437.102 ops/s
Iteration  27: 6936121.777 ops/s
Iteration  28: 7036541.003 ops/s
Iteration  29: 6878972.367 ops/s
Iteration  30: 6968880.704 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectIf":
  7009189.196 ±(99.9%) 68209.565 ops/s [Average]
  (min, avg, max) = (6789852.548, 7009189.196, 7210787.173), stdev = 102092.874
  CI (99.9%): [6940979.631, 7077398.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collectIf  thrpt   30  7009189.196 ± 68209.565  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15957444.055 ops/s
# Warmup Iteration   2: 34177611.203 ops/s
# Warmup Iteration   3: 28613909.904 ops/s
# Warmup Iteration   4: 34796350.391 ops/s
# Warmup Iteration   5: 34993956.027 ops/s
# Warmup Iteration   6: 34819534.299 ops/s
# Warmup Iteration   7: 34510382.580 ops/s
# Warmup Iteration   8: 35469621.854 ops/s
# Warmup Iteration   9: 33605948.595 ops/s
# Warmup Iteration  10: 34339624.914 ops/s
# Warmup Iteration  11: 34782259.772 ops/s
# Warmup Iteration  12: 35006601.587 ops/s
# Warmup Iteration  13: 34228664.931 ops/s
# Warmup Iteration  14: 33924763.155 ops/s
# Warmup Iteration  15: 34258278.771 ops/s
# Warmup Iteration  16: 33749870.152 ops/s
# Warmup Iteration  17: 33719367.991 ops/s
# Warmup Iteration  18: 34212524.311 ops/s
# Warmup Iteration  19: 34415669.850 ops/s
# Warmup Iteration  20: 33880122.789 ops/s
# Warmup Iteration  21: 33768359.149 ops/s
# Warmup Iteration  22: 33297042.845 ops/s
# Warmup Iteration  23: 33745738.214 ops/s
# Warmup Iteration  24: 33574574.282 ops/s
# Warmup Iteration  25: 34027819.043 ops/s
# Warmup Iteration  26: 33936781.230 ops/s
# Warmup Iteration  27: 34237400.083 ops/s
# Warmup Iteration  28: 34357780.906 ops/s
# Warmup Iteration  29: 33840662.369 ops/s
# Warmup Iteration  30: 33538647.972 ops/s
Iteration   1: 32768519.584 ops/s
Iteration   2: 32593615.763 ops/s
Iteration   3: 33380161.712 ops/s
Iteration   4: 33268130.528 ops/s
Iteration   5: 32862084.253 ops/s
Iteration   6: 34019221.059 ops/s
Iteration   7: 35312408.655 ops/s
Iteration   8: 35540945.772 ops/s
Iteration   9: 34288668.247 ops/s
Iteration  10: 33745835.400 ops/s
Iteration  11: 33507605.458 ops/s
Iteration  12: 33983474.105 ops/s
Iteration  13: 33383962.668 ops/s
Iteration  14: 33773515.466 ops/s
Iteration  15: 35868299.512 ops/s
Iteration  16: 36075793.008 ops/s
Iteration  17: 35831291.406 ops/s
Iteration  18: 35999981.883 ops/s
Iteration  19: 34957685.471 ops/s
Iteration  20: 34214988.466 ops/s
Iteration  21: 34582208.993 ops/s
Iteration  22: 33941891.129 ops/s
Iteration  23: 33594372.122 ops/s
Iteration  24: 36066223.647 ops/s
Iteration  25: 34744890.354 ops/s
Iteration  26: 34439912.942 ops/s
Iteration  27: 33481611.885 ops/s
Iteration  28: 33561768.770 ops/s
Iteration  29: 34422180.385 ops/s
Iteration  30: 33873815.291 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectIfWithTarget":
  34269502.131 ±(99.9%) 687918.323 ops/s [Average]
  (min, avg, max) = (32593615.763, 34269502.131, 36075793.008), stdev = 1029643.839
  CI (99.9%): [33581583.808, 34957420.454] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  34269502.131 ± 687918.323  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2713283.021 ops/s
# Warmup Iteration   2: 5401666.332 ops/s
# Warmup Iteration   3: 6061431.996 ops/s
# Warmup Iteration   4: 6273821.727 ops/s
# Warmup Iteration   5: 5109142.114 ops/s
# Warmup Iteration   6: 5971192.067 ops/s
# Warmup Iteration   7: 6168486.096 ops/s
# Warmup Iteration   8: 6133251.948 ops/s
# Warmup Iteration   9: 6125575.176 ops/s
# Warmup Iteration  10: 6037947.867 ops/s
# Warmup Iteration  11: 6232885.438 ops/s
# Warmup Iteration  12: 6087855.125 ops/s
# Warmup Iteration  13: 5940047.867 ops/s
# Warmup Iteration  14: 5969060.411 ops/s
# Warmup Iteration  15: 6148803.824 ops/s
# Warmup Iteration  16: 6194152.869 ops/s
# Warmup Iteration  17: 6064128.901 ops/s
# Warmup Iteration  18: 5869508.709 ops/s
# Warmup Iteration  19: 6010472.173 ops/s
# Warmup Iteration  20: 5932071.706 ops/s
# Warmup Iteration  21: 6186119.056 ops/s
# Warmup Iteration  22: 6456083.526 ops/s
# Warmup Iteration  23: 6104207.558 ops/s
# Warmup Iteration  24: 6322375.031 ops/s
# Warmup Iteration  25: 6054371.524 ops/s
# Warmup Iteration  26: 6206256.291 ops/s
# Warmup Iteration  27: 6383019.827 ops/s
# Warmup Iteration  28: 6089369.214 ops/s
# Warmup Iteration  29: 6257865.005 ops/s
# Warmup Iteration  30: 5962574.085 ops/s
Iteration   1: 5889613.034 ops/s
Iteration   2: 5961196.300 ops/s
Iteration   3: 5969084.591 ops/s
Iteration   4: 6021678.925 ops/s
Iteration   5: 6223119.319 ops/s
Iteration   6: 5829340.581 ops/s
Iteration   7: 5885378.430 ops/s
Iteration   8: 6184741.679 ops/s
Iteration   9: 6078985.877 ops/s
Iteration  10: 5926916.953 ops/s
Iteration  11: 5929949.743 ops/s
Iteration  12: 5876997.967 ops/s
Iteration  13: 5957121.106 ops/s
Iteration  14: 6270582.114 ops/s
Iteration  15: 5779068.465 ops/s
Iteration  16: 5925670.111 ops/s
Iteration  17: 6005859.926 ops/s
Iteration  18: 6037005.974 ops/s
Iteration  19: 6173457.605 ops/s
Iteration  20: 6137022.481 ops/s
Iteration  21: 5926594.451 ops/s
Iteration  22: 5989779.686 ops/s
Iteration  23: 6413726.334 ops/s
Iteration  24: 6300268.245 ops/s
Iteration  25: 6314999.985 ops/s
Iteration  26: 6430159.775 ops/s
Iteration  27: 6069956.840 ops/s
Iteration  28: 6157588.461 ops/s
Iteration  29: 6020231.963 ops/s
Iteration  30: 6285032.427 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectInt":
  6065704.312 ±(99.9%) 116748.029 ops/s [Average]
  (min, avg, max) = (5779068.465, 6065704.312, 6430159.775), stdev = 174742.968
  CI (99.9%): [5948956.282, 6182452.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collectInt  thrpt   30  6065704.312 ± 116748.029  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2486934.659 ops/s
# Warmup Iteration   2: 5662573.281 ops/s
# Warmup Iteration   3: 5919341.247 ops/s
# Warmup Iteration   4: 6096236.400 ops/s
# Warmup Iteration   5: 4764249.856 ops/s
# Warmup Iteration   6: 5767734.308 ops/s
# Warmup Iteration   7: 5752438.988 ops/s
# Warmup Iteration   8: 5836162.093 ops/s
# Warmup Iteration   9: 5919130.446 ops/s
# Warmup Iteration  10: 6154368.344 ops/s
# Warmup Iteration  11: 6004838.919 ops/s
# Warmup Iteration  12: 6040757.732 ops/s
# Warmup Iteration  13: 6101471.604 ops/s
# Warmup Iteration  14: 5859242.876 ops/s
# Warmup Iteration  15: 5698087.600 ops/s
# Warmup Iteration  16: 5571627.023 ops/s
# Warmup Iteration  17: 5728738.697 ops/s
# Warmup Iteration  18: 5655891.124 ops/s
# Warmup Iteration  19: 5858580.718 ops/s
# Warmup Iteration  20: 5589338.540 ops/s
# Warmup Iteration  21: 5682832.149 ops/s
# Warmup Iteration  22: 5766646.007 ops/s
# Warmup Iteration  23: 5757212.469 ops/s
# Warmup Iteration  24: 5861719.644 ops/s
# Warmup Iteration  25: 5797741.757 ops/s
# Warmup Iteration  26: 5795083.571 ops/s
# Warmup Iteration  27: 5862548.533 ops/s
# Warmup Iteration  28: 5964835.155 ops/s
# Warmup Iteration  29: 5839430.434 ops/s
# Warmup Iteration  30: 5780844.674 ops/s
Iteration   1: 5747665.266 ops/s
Iteration   2: 5611892.364 ops/s
Iteration   3: 5808526.175 ops/s
Iteration   4: 5743170.068 ops/s
Iteration   5: 5661740.503 ops/s
Iteration   6: 5666328.399 ops/s
Iteration   7: 5733423.533 ops/s
Iteration   8: 5680890.317 ops/s
Iteration   9: 5855789.932 ops/s
Iteration  10: 5690852.442 ops/s
Iteration  11: 5792502.356 ops/s
Iteration  12: 5518870.351 ops/s
Iteration  13: 5425859.743 ops/s
Iteration  14: 5554151.169 ops/s
Iteration  15: 5598076.989 ops/s
Iteration  16: 5552568.967 ops/s
Iteration  17: 5488029.159 ops/s
Iteration  18: 5558901.325 ops/s
Iteration  19: 5956449.496 ops/s
Iteration  20: 5972747.566 ops/s
Iteration  21: 5854547.503 ops/s
Iteration  22: 5829257.954 ops/s
Iteration  23: 5742811.868 ops/s
Iteration  24: 5660998.438 ops/s
Iteration  25: 5611893.531 ops/s
Iteration  26: 5599902.140 ops/s
Iteration  27: 5766499.622 ops/s
Iteration  28: 5674795.706 ops/s
Iteration  29: 5748442.250 ops/s
Iteration  30: 5839407.397 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectLong":
  5698233.084 ±(99.9%) 89076.571 ops/s [Average]
  (min, avg, max) = (5425859.743, 5698233.084, 5972747.566), stdev = 133325.628
  CI (99.9%): [5609156.514, 5787309.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collectLong  thrpt   30  5698233.084 ± 89076.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2492669.765 ops/s
# Warmup Iteration   2: 4308911.326 ops/s
# Warmup Iteration   3: 5506897.332 ops/s
# Warmup Iteration   4: 5364661.753 ops/s
# Warmup Iteration   5: 5286450.364 ops/s
# Warmup Iteration   6: 4303558.372 ops/s
# Warmup Iteration   7: 5553765.400 ops/s
# Warmup Iteration   8: 5266734.990 ops/s
# Warmup Iteration   9: 5327196.788 ops/s
# Warmup Iteration  10: 5687655.544 ops/s
# Warmup Iteration  11: 5699959.702 ops/s
# Warmup Iteration  12: 5252844.220 ops/s
# Warmup Iteration  13: 5296074.999 ops/s
# Warmup Iteration  14: 5388190.119 ops/s
# Warmup Iteration  15: 5258785.132 ops/s
# Warmup Iteration  16: 5340107.431 ops/s
# Warmup Iteration  17: 5297384.186 ops/s
# Warmup Iteration  18: 5418122.552 ops/s
# Warmup Iteration  19: 5493771.326 ops/s
# Warmup Iteration  20: 5355632.985 ops/s
# Warmup Iteration  21: 5287237.506 ops/s
# Warmup Iteration  22: 5354843.612 ops/s
# Warmup Iteration  23: 5288087.552 ops/s
# Warmup Iteration  24: 5342716.846 ops/s
# Warmup Iteration  25: 5477078.339 ops/s
# Warmup Iteration  26: 5623223.497 ops/s
# Warmup Iteration  27: 5388968.334 ops/s
# Warmup Iteration  28: 5330544.557 ops/s
# Warmup Iteration  29: 5415298.555 ops/s
# Warmup Iteration  30: 5346094.254 ops/s
Iteration   1: 5350927.213 ops/s
Iteration   2: 5316487.263 ops/s
Iteration   3: 5246089.722 ops/s
Iteration   4: 5407510.281 ops/s
Iteration   5: 5159449.274 ops/s
Iteration   6: 5395733.545 ops/s
Iteration   7: 5260646.684 ops/s
Iteration   8: 5240431.109 ops/s
Iteration   9: 5222180.454 ops/s
Iteration  10: 5182667.635 ops/s
Iteration  11: 5183627.899 ops/s
Iteration  12: 5345886.786 ops/s
Iteration  13: 5448450.042 ops/s
Iteration  14: 5431044.129 ops/s
Iteration  15: 5508910.699 ops/s
Iteration  16: 5503178.867 ops/s
Iteration  17: 5250048.614 ops/s
Iteration  18: 5377849.310 ops/s
Iteration  19: 5292527.007 ops/s
Iteration  20: 5192958.397 ops/s
Iteration  21: 5506314.889 ops/s
Iteration  22: 5389878.056 ops/s
Iteration  23: 5340994.347 ops/s
Iteration  24: 5389940.944 ops/s
Iteration  25: 5558567.939 ops/s
Iteration  26: 5504944.172 ops/s
Iteration  27: 5342690.559 ops/s
Iteration  28: 5353961.334 ops/s
Iteration  29: 5817779.984 ops/s
Iteration  30: 5863480.053 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectShort":
  5379505.240 ±(99.9%) 111037.072 ops/s [Average]
  (min, avg, max) = (5159449.274, 5379505.240, 5863480.053), stdev = 166195.075
  CI (99.9%): [5268468.168, 5490542.312] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collectShort  thrpt   30  5379505.240 ± 111037.072  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1013935.445 ops/s
# Warmup Iteration   2: 2198774.493 ops/s
# Warmup Iteration   3: 1938277.797 ops/s
# Warmup Iteration   4: 2240051.246 ops/s
# Warmup Iteration   5: 2238134.157 ops/s
# Warmup Iteration   6: 2126504.119 ops/s
# Warmup Iteration   7: 2158392.468 ops/s
# Warmup Iteration   8: 2280307.795 ops/s
# Warmup Iteration   9: 2358797.892 ops/s
# Warmup Iteration  10: 2243943.660 ops/s
# Warmup Iteration  11: 2317251.338 ops/s
# Warmup Iteration  12: 2145024.486 ops/s
# Warmup Iteration  13: 2214969.989 ops/s
# Warmup Iteration  14: 2223607.746 ops/s
# Warmup Iteration  15: 2174470.753 ops/s
# Warmup Iteration  16: 2152115.005 ops/s
# Warmup Iteration  17: 2146276.020 ops/s
# Warmup Iteration  18: 2181147.845 ops/s
# Warmup Iteration  19: 2147584.966 ops/s
# Warmup Iteration  20: 2144365.502 ops/s
# Warmup Iteration  21: 2205824.506 ops/s
# Warmup Iteration  22: 2146469.179 ops/s
# Warmup Iteration  23: 2192436.784 ops/s
# Warmup Iteration  24: 2223081.828 ops/s
# Warmup Iteration  25: 2185444.222 ops/s
# Warmup Iteration  26: 2141792.055 ops/s
# Warmup Iteration  27: 2220799.427 ops/s
# Warmup Iteration  28: 2168056.788 ops/s
# Warmup Iteration  29: 2175208.095 ops/s
# Warmup Iteration  30: 2170417.866 ops/s
Iteration   1: 2166752.746 ops/s
Iteration   2: 2157704.596 ops/s
Iteration   3: 2141399.868 ops/s
Iteration   4: 2201074.457 ops/s
Iteration   5: 2379282.171 ops/s
Iteration   6: 2341488.495 ops/s
Iteration   7: 2331852.977 ops/s
Iteration   8: 2150981.109 ops/s
Iteration   9: 2209467.946 ops/s
Iteration  10: 2222958.667 ops/s
Iteration  11: 2294376.357 ops/s
Iteration  12: 2272142.385 ops/s
Iteration  13: 2271937.007 ops/s
Iteration  14: 2360469.366 ops/s
Iteration  15: 2386119.255 ops/s
Iteration  16: 2375778.672 ops/s
Iteration  17: 2377931.672 ops/s
Iteration  18: 2253187.773 ops/s
Iteration  19: 2312893.339 ops/s
Iteration  20: 2381154.329 ops/s
Iteration  21: 2282266.501 ops/s
Iteration  22: 2212696.816 ops/s
Iteration  23: 2383963.011 ops/s
Iteration  24: 2134570.081 ops/s
Iteration  25: 2097388.713 ops/s
Iteration  26: 2177422.450 ops/s
Iteration  27: 2171213.137 ops/s
Iteration  28: 2231367.842 ops/s
Iteration  29: 2162308.772 ops/s
Iteration  30: 2173518.041 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectWith":
  2253855.618 ±(99.9%) 61099.431 ops/s [Average]
  (min, avg, max) = (2097388.713, 2253855.618, 2386119.255), stdev = 91450.759
  CI (99.9%): [2192756.187, 2314955.050] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collectWith  thrpt   30  2253855.618 ± 61099.431  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1638790.223 ops/s
# Warmup Iteration   2: 4594364.424 ops/s
# Warmup Iteration   3: 4468178.395 ops/s
# Warmup Iteration   4: 3877187.381 ops/s
# Warmup Iteration   5: 4555308.050 ops/s
# Warmup Iteration   6: 4454170.245 ops/s
# Warmup Iteration   7: 4491456.107 ops/s
# Warmup Iteration   8: 4505551.188 ops/s
# Warmup Iteration   9: 4564014.605 ops/s
# Warmup Iteration  10: 4587381.469 ops/s
# Warmup Iteration  11: 4380497.421 ops/s
# Warmup Iteration  12: 4625740.391 ops/s
# Warmup Iteration  13: 4498906.608 ops/s
# Warmup Iteration  14: 4462383.403 ops/s
# Warmup Iteration  15: 4495698.719 ops/s
# Warmup Iteration  16: 4473733.387 ops/s
# Warmup Iteration  17: 4488542.353 ops/s
# Warmup Iteration  18: 4527211.390 ops/s
# Warmup Iteration  19: 4551427.794 ops/s
# Warmup Iteration  20: 4469880.512 ops/s
# Warmup Iteration  21: 4687226.186 ops/s
# Warmup Iteration  22: 4589075.316 ops/s
# Warmup Iteration  23: 4476796.444 ops/s
# Warmup Iteration  24: 4486456.549 ops/s
# Warmup Iteration  25: 4698347.897 ops/s
# Warmup Iteration  26: 4653442.714 ops/s
# Warmup Iteration  27: 4764286.256 ops/s
# Warmup Iteration  28: 4603043.443 ops/s
# Warmup Iteration  29: 4431119.165 ops/s
# Warmup Iteration  30: 4524717.722 ops/s
Iteration   1: 4645019.841 ops/s
Iteration   2: 4606672.305 ops/s
Iteration   3: 4599957.996 ops/s
Iteration   4: 4592302.805 ops/s
Iteration   5: 4560732.701 ops/s
Iteration   6: 4514555.570 ops/s
Iteration   7: 4376064.743 ops/s
Iteration   8: 4375737.782 ops/s
Iteration   9: 4282022.749 ops/s
Iteration  10: 4511992.148 ops/s
Iteration  11: 4441039.314 ops/s
Iteration  12: 4411185.448 ops/s
Iteration  13: 4559375.924 ops/s
Iteration  14: 4535548.461 ops/s
Iteration  15: 4408985.094 ops/s
Iteration  16: 4749306.646 ops/s
Iteration  17: 4490996.440 ops/s
Iteration  18: 4415089.955 ops/s
Iteration  19: 4493836.325 ops/s
Iteration  20: 4526290.772 ops/s
Iteration  21: 4480919.932 ops/s
Iteration  22: 4431160.534 ops/s
Iteration  23: 4504501.487 ops/s
Iteration  24: 4498895.983 ops/s
Iteration  25: 4413676.505 ops/s
Iteration  26: 4565284.147 ops/s
Iteration  27: 4544294.719 ops/s
Iteration  28: 4439381.424 ops/s
Iteration  29: 4459870.120 ops/s
Iteration  30: 4289112.839 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectWithIndex":
  4490793.690 ±(99.9%) 67259.884 ops/s [Average]
  (min, avg, max) = (4282022.749, 4490793.690, 4749306.646), stdev = 100671.436
  CI (99.9%): [4423533.806, 4558053.575] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  4490793.690 ± 67259.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 487073.914 ops/s
# Warmup Iteration   2: 1196757.104 ops/s
# Warmup Iteration   3: 1316606.095 ops/s
# Warmup Iteration   4: 1296693.544 ops/s
# Warmup Iteration   5: 1031254.846 ops/s
# Warmup Iteration   6: 1311113.811 ops/s
# Warmup Iteration   7: 1326609.723 ops/s
# Warmup Iteration   8: 1366158.611 ops/s
# Warmup Iteration   9: 1358116.156 ops/s
# Warmup Iteration  10: 1358333.169 ops/s
# Warmup Iteration  11: 1299447.680 ops/s
# Warmup Iteration  12: 1380704.863 ops/s
# Warmup Iteration  13: 1352130.904 ops/s
# Warmup Iteration  14: 1386921.334 ops/s
# Warmup Iteration  15: 1323207.640 ops/s
# Warmup Iteration  16: 1295665.173 ops/s
# Warmup Iteration  17: 1325813.509 ops/s
# Warmup Iteration  18: 1312416.399 ops/s
# Warmup Iteration  19: 1309731.805 ops/s
# Warmup Iteration  20: 1325956.301 ops/s
# Warmup Iteration  21: 1274911.320 ops/s
# Warmup Iteration  22: 1316515.906 ops/s
# Warmup Iteration  23: 1322484.365 ops/s
# Warmup Iteration  24: 1315862.658 ops/s
# Warmup Iteration  25: 1321680.479 ops/s
# Warmup Iteration  26: 1319179.898 ops/s
# Warmup Iteration  27: 1338248.151 ops/s
# Warmup Iteration  28: 1324328.453 ops/s
# Warmup Iteration  29: 1330345.558 ops/s
# Warmup Iteration  30: 1345697.951 ops/s
Iteration   1: 1305641.445 ops/s
Iteration   2: 1325505.072 ops/s
Iteration   3: 1384993.464 ops/s
Iteration   4: 1371126.010 ops/s
Iteration   5: 1353125.236 ops/s
Iteration   6: 1371912.337 ops/s
Iteration   7: 1292715.112 ops/s
Iteration   8: 1299718.914 ops/s
Iteration   9: 1304000.905 ops/s
Iteration  10: 1332283.831 ops/s
Iteration  11: 1309904.564 ops/s
Iteration  12: 1313949.580 ops/s
Iteration  13: 1319094.643 ops/s
Iteration  14: 1313497.315 ops/s
Iteration  15: 1300717.548 ops/s
Iteration  16: 1353276.218 ops/s
Iteration  17: 1363769.406 ops/s
Iteration  18: 1417050.773 ops/s
Iteration  19: 1385242.064 ops/s
Iteration  20: 1416172.165 ops/s
Iteration  21: 1386180.246 ops/s
Iteration  22: 1347408.583 ops/s
Iteration  23: 1384741.527 ops/s
Iteration  24: 1415197.936 ops/s
Iteration  25: 1451327.304 ops/s
Iteration  26: 1450953.941 ops/s
Iteration  27: 1377300.714 ops/s
Iteration  28: 1329762.629 ops/s
Iteration  29: 1326059.665 ops/s
Iteration  30: 1351175.036 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  1355126.806 ±(99.9%) 30156.267 ops/s [Average]
  (min, avg, max) = (1292715.112, 1355126.806, 1451327.304), stdev = 45136.484
  CI (99.9%): [1324970.539, 1385283.073] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  1355126.806 ± 30156.267  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 974824.064 ops/s
# Warmup Iteration   2: 2366089.501 ops/s
# Warmup Iteration   3: 1970079.077 ops/s
# Warmup Iteration   4: 2417834.396 ops/s
# Warmup Iteration   5: 2453727.166 ops/s
# Warmup Iteration   6: 2394886.351 ops/s
# Warmup Iteration   7: 2316036.362 ops/s
# Warmup Iteration   8: 2344579.877 ops/s
# Warmup Iteration   9: 2432440.313 ops/s
# Warmup Iteration  10: 2429551.794 ops/s
# Warmup Iteration  11: 2395396.494 ops/s
# Warmup Iteration  12: 2380898.674 ops/s
# Warmup Iteration  13: 2328221.612 ops/s
# Warmup Iteration  14: 2362040.232 ops/s
# Warmup Iteration  15: 2440423.491 ops/s
# Warmup Iteration  16: 2390224.308 ops/s
# Warmup Iteration  17: 2384735.052 ops/s
# Warmup Iteration  18: 2389451.074 ops/s
# Warmup Iteration  19: 2388092.849 ops/s
# Warmup Iteration  20: 2624176.084 ops/s
# Warmup Iteration  21: 2398622.199 ops/s
# Warmup Iteration  22: 2343909.315 ops/s
# Warmup Iteration  23: 2412722.030 ops/s
# Warmup Iteration  24: 2464154.347 ops/s
# Warmup Iteration  25: 2393675.006 ops/s
# Warmup Iteration  26: 2433245.892 ops/s
# Warmup Iteration  27: 2447531.608 ops/s
# Warmup Iteration  28: 2504719.385 ops/s
# Warmup Iteration  29: 2434549.898 ops/s
# Warmup Iteration  30: 2393500.384 ops/s
Iteration   1: 2419202.396 ops/s
Iteration   2: 2478455.102 ops/s
Iteration   3: 2484378.131 ops/s
Iteration   4: 2450500.308 ops/s
Iteration   5: 2367177.952 ops/s
Iteration   6: 2421213.611 ops/s
Iteration   7: 2423000.171 ops/s
Iteration   8: 2544206.836 ops/s
Iteration   9: 2553828.639 ops/s
Iteration  10: 2461794.824 ops/s
Iteration  11: 2520033.219 ops/s
Iteration  12: 2517725.242 ops/s
Iteration  13: 2514223.583 ops/s
Iteration  14: 2434106.448 ops/s
Iteration  15: 2364687.979 ops/s
Iteration  16: 2400300.642 ops/s
Iteration  17: 2440931.439 ops/s
Iteration  18: 2415603.162 ops/s
Iteration  19: 2611535.204 ops/s
Iteration  20: 2545069.074 ops/s
Iteration  21: 2374431.904 ops/s
Iteration  22: 2329187.650 ops/s
Iteration  23: 2431051.595 ops/s
Iteration  24: 2465366.684 ops/s
Iteration  25: 2400519.053 ops/s
Iteration  26: 2438039.818 ops/s
Iteration  27: 2369318.515 ops/s
Iteration  28: 2438229.647 ops/s
Iteration  29: 2512647.942 ops/s
Iteration  30: 2410931.138 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collectWith_target":
  2451256.597 ±(99.9%) 44162.831 ops/s [Average]
  (min, avg, max) = (2329187.650, 2451256.597, 2611535.204), stdev = 66100.852
  CI (99.9%): [2407093.765, 2495419.428] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collectWith_target  thrpt   30  2451256.597 ± 44162.831  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2004592.999 ops/s
# Warmup Iteration   2: 4433214.165 ops/s
# Warmup Iteration   3: 3777534.958 ops/s
# Warmup Iteration   4: 4643790.546 ops/s
# Warmup Iteration   5: 4537036.605 ops/s
# Warmup Iteration   6: 4618924.617 ops/s
# Warmup Iteration   7: 4811875.750 ops/s
# Warmup Iteration   8: 5066543.172 ops/s
# Warmup Iteration   9: 5090390.809 ops/s
# Warmup Iteration  10: 4702043.423 ops/s
# Warmup Iteration  11: 4739743.548 ops/s
# Warmup Iteration  12: 4836310.794 ops/s
# Warmup Iteration  13: 4871086.029 ops/s
# Warmup Iteration  14: 4790822.783 ops/s
# Warmup Iteration  15: 4701155.414 ops/s
# Warmup Iteration  16: 4725819.747 ops/s
# Warmup Iteration  17: 4674391.753 ops/s
# Warmup Iteration  18: 4673945.285 ops/s
# Warmup Iteration  19: 4755572.807 ops/s
# Warmup Iteration  20: 4632062.596 ops/s
# Warmup Iteration  21: 4763496.901 ops/s
# Warmup Iteration  22: 4834757.296 ops/s
# Warmup Iteration  23: 4688073.809 ops/s
# Warmup Iteration  24: 4751980.875 ops/s
# Warmup Iteration  25: 4568758.165 ops/s
# Warmup Iteration  26: 4710233.268 ops/s
# Warmup Iteration  27: 4868492.656 ops/s
# Warmup Iteration  28: 4651593.005 ops/s
# Warmup Iteration  29: 4711781.858 ops/s
# Warmup Iteration  30: 4625893.751 ops/s
Iteration   1: 4794008.662 ops/s
Iteration   2: 4800573.019 ops/s
Iteration   3: 4657636.543 ops/s
Iteration   4: 4651896.294 ops/s
Iteration   5: 4784629.428 ops/s
Iteration   6: 4693937.445 ops/s
Iteration   7: 5163476.931 ops/s
Iteration   8: 5106195.882 ops/s
Iteration   9: 5161365.708 ops/s
Iteration  10: 5052086.980 ops/s
Iteration  11: 5006282.292 ops/s
Iteration  12: 4958478.329 ops/s
Iteration  13: 4666178.109 ops/s
Iteration  14: 4809084.506 ops/s
Iteration  15: 5184625.855 ops/s
Iteration  16: 5123965.300 ops/s
Iteration  17: 5137229.867 ops/s
Iteration  18: 5203026.162 ops/s
Iteration  19: 5198866.982 ops/s
Iteration  20: 5187350.306 ops/s
Iteration  21: 5179897.582 ops/s
Iteration  22: 4882726.944 ops/s
Iteration  23: 4767040.228 ops/s
Iteration  24: 4621202.248 ops/s
Iteration  25: 4721562.632 ops/s
Iteration  26: 4756549.452 ops/s
Iteration  27: 5049172.851 ops/s
Iteration  28: 4934565.444 ops/s
Iteration  29: 4685377.355 ops/s
Iteration  30: 5139549.610 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_collect_target":
  4935951.298 ±(99.9%) 138374.554 ops/s [Average]
  (min, avg, max) = (4621202.248, 4935951.298, 5203026.162), stdev = 207112.534
  CI (99.9%): [4797576.744, 5074325.852] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_collect_target  thrpt   30  4935951.298 ± 138374.554  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2193615.306 ops/s
# Warmup Iteration   2: 3579196.155 ops/s
# Warmup Iteration   3: 3822737.214 ops/s
# Warmup Iteration   4: 3862046.726 ops/s
# Warmup Iteration   5: 3582991.287 ops/s
# Warmup Iteration   6: 3079933.318 ops/s
# Warmup Iteration   7: 3579670.754 ops/s
# Warmup Iteration   8: 3551569.327 ops/s
# Warmup Iteration   9: 3560541.813 ops/s
# Warmup Iteration  10: 3590874.847 ops/s
# Warmup Iteration  11: 3538086.225 ops/s
# Warmup Iteration  12: 3467595.048 ops/s
# Warmup Iteration  13: 3590464.418 ops/s
# Warmup Iteration  14: 3703816.735 ops/s
# Warmup Iteration  15: 3867519.461 ops/s
# Warmup Iteration  16: 3872270.864 ops/s
# Warmup Iteration  17: 3703201.794 ops/s
# Warmup Iteration  18: 3509523.421 ops/s
# Warmup Iteration  19: 3422373.724 ops/s
# Warmup Iteration  20: 3442101.297 ops/s
# Warmup Iteration  21: 3524500.506 ops/s
# Warmup Iteration  22: 3598854.843 ops/s
# Warmup Iteration  23: 3512719.229 ops/s
# Warmup Iteration  24: 3675564.334 ops/s
# Warmup Iteration  25: 3439195.558 ops/s
# Warmup Iteration  26: 3512188.049 ops/s
# Warmup Iteration  27: 3597157.988 ops/s
# Warmup Iteration  28: 3480977.996 ops/s
# Warmup Iteration  29: 3716914.653 ops/s
# Warmup Iteration  30: 3611018.096 ops/s
Iteration   1: 3510614.516 ops/s
Iteration   2: 3426029.590 ops/s
Iteration   3: 3507986.187 ops/s
Iteration   4: 3532566.901 ops/s
Iteration   5: 3532529.081 ops/s
Iteration   6: 3579536.551 ops/s
Iteration   7: 3531666.097 ops/s
Iteration   8: 3380401.498 ops/s
Iteration   9: 3453537.446 ops/s
Iteration  10: 3398484.001 ops/s
Iteration  11: 3443187.470 ops/s
Iteration  12: 3636875.582 ops/s
Iteration  13: 3564645.503 ops/s
Iteration  14: 3581261.606 ops/s
Iteration  15: 3701837.917 ops/s
Iteration  16: 3699111.242 ops/s
Iteration  17: 3679886.148 ops/s
Iteration  18: 3558817.614 ops/s
Iteration  19: 3569238.280 ops/s
Iteration  20: 3505798.618 ops/s
Iteration  21: 3376807.799 ops/s
Iteration  22: 3610762.174 ops/s
Iteration  23: 3586750.302 ops/s
Iteration  24: 3516227.601 ops/s
Iteration  25: 3447420.814 ops/s
Iteration  26: 3414878.248 ops/s
Iteration  27: 3502426.944 ops/s
Iteration  28: 3592111.970 ops/s
Iteration  29: 3688703.156 ops/s
Iteration  30: 3662017.600 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_contains":
  3539737.282 ±(99.9%) 63729.084 ops/s [Average]
  (min, avg, max) = (3376807.799, 3539737.282, 3701837.917), stdev = 95386.699
  CI (99.9%): [3476008.198, 3603466.365] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_contains  thrpt   30  3539737.282 ± 63729.084  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6995139.693 ops/s
# Warmup Iteration   2: 11987562.698 ops/s
# Warmup Iteration   3: 12095757.347 ops/s
# Warmup Iteration   4: 12400710.590 ops/s
# Warmup Iteration   5: 12315957.847 ops/s
# Warmup Iteration   6: 11784169.225 ops/s
# Warmup Iteration   7: 11599681.225 ops/s
# Warmup Iteration   8: 12589995.376 ops/s
# Warmup Iteration   9: 12785110.531 ops/s
# Warmup Iteration  10: 12489169.207 ops/s
# Warmup Iteration  11: 12816766.029 ops/s
# Warmup Iteration  12: 12411570.490 ops/s
# Warmup Iteration  13: 12903856.990 ops/s
# Warmup Iteration  14: 13191699.976 ops/s
# Warmup Iteration  15: 13443671.639 ops/s
# Warmup Iteration  16: 12733728.539 ops/s
# Warmup Iteration  17: 12233389.856 ops/s
# Warmup Iteration  18: 12196699.188 ops/s
# Warmup Iteration  19: 13263330.559 ops/s
# Warmup Iteration  20: 13306862.271 ops/s
# Warmup Iteration  21: 12559705.694 ops/s
# Warmup Iteration  22: 12594178.648 ops/s
# Warmup Iteration  23: 12746150.357 ops/s
# Warmup Iteration  24: 12916390.027 ops/s
# Warmup Iteration  25: 13075753.800 ops/s
# Warmup Iteration  26: 13268443.064 ops/s
# Warmup Iteration  27: 12727326.182 ops/s
# Warmup Iteration  28: 12750749.528 ops/s
# Warmup Iteration  29: 12651373.194 ops/s
# Warmup Iteration  30: 13006844.804 ops/s
Iteration   1: 12698956.692 ops/s
Iteration   2: 12716395.275 ops/s
Iteration   3: 12110759.646 ops/s
Iteration   4: 12255337.642 ops/s
Iteration   5: 12744347.901 ops/s
Iteration   6: 12135250.379 ops/s
Iteration   7: 12278998.185 ops/s
Iteration   8: 12613816.141 ops/s
Iteration   9: 12203733.793 ops/s
Iteration  10: 12528382.547 ops/s
Iteration  11: 12836135.376 ops/s
Iteration  12: 13213391.175 ops/s
Iteration  13: 12902931.255 ops/s
Iteration  14: 13378882.943 ops/s
Iteration  15: 12955078.281 ops/s
Iteration  16: 12268218.776 ops/s
Iteration  17: 12764231.595 ops/s
Iteration  18: 12578656.047 ops/s
Iteration  19: 12227883.770 ops/s
Iteration  20: 12698009.190 ops/s
Iteration  21: 12436210.195 ops/s
Iteration  22: 12427307.676 ops/s
Iteration  23: 12769947.978 ops/s
Iteration  24: 12391186.254 ops/s
Iteration  25: 12502108.778 ops/s
Iteration  26: 12070177.525 ops/s
Iteration  27: 12029583.417 ops/s
Iteration  28: 12534742.599 ops/s
Iteration  29: 12374303.466 ops/s
Iteration  30: 13118008.232 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_containsAll":
  12558765.758 ±(99.9%) 230211.822 ops/s [Average]
  (min, avg, max) = (12029583.417, 12558765.758, 13378882.943), stdev = 344570.243
  CI (99.9%): [12328553.936, 12788977.579] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_containsAll  thrpt   30  12558765.758 ± 230211.822  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4658049.161 ops/s
# Warmup Iteration   2: 10840766.155 ops/s
# Warmup Iteration   3: 11057940.242 ops/s
# Warmup Iteration   4: 9276813.813 ops/s
# Warmup Iteration   5: 11293633.921 ops/s
# Warmup Iteration   6: 11347150.765 ops/s
# Warmup Iteration   7: 8983476.920 ops/s
# Warmup Iteration   8: 11189576.960 ops/s
# Warmup Iteration   9: 10907637.757 ops/s
# Warmup Iteration  10: 11083012.053 ops/s
# Warmup Iteration  11: 11884104.260 ops/s
# Warmup Iteration  12: 11902812.202 ops/s
# Warmup Iteration  13: 11208423.345 ops/s
# Warmup Iteration  14: 11799710.391 ops/s
# Warmup Iteration  15: 11094337.303 ops/s
# Warmup Iteration  16: 11014461.605 ops/s
# Warmup Iteration  17: 11513230.200 ops/s
# Warmup Iteration  18: 11379623.183 ops/s
# Warmup Iteration  19: 10874082.019 ops/s
# Warmup Iteration  20: 11025397.954 ops/s
# Warmup Iteration  21: 12093364.204 ops/s
# Warmup Iteration  22: 12003351.325 ops/s
# Warmup Iteration  23: 11344239.120 ops/s
# Warmup Iteration  24: 11873688.842 ops/s
# Warmup Iteration  25: 11301747.106 ops/s
# Warmup Iteration  26: 11213241.910 ops/s
# Warmup Iteration  27: 11708725.023 ops/s
# Warmup Iteration  28: 11112849.597 ops/s
# Warmup Iteration  29: 11119505.091 ops/s
# Warmup Iteration  30: 11233943.536 ops/s
Iteration   1: 11890595.037 ops/s
Iteration   2: 10852423.605 ops/s
Iteration   3: 11011086.788 ops/s
Iteration   4: 10875574.552 ops/s
Iteration   5: 10927658.496 ops/s
Iteration   6: 11258633.317 ops/s
Iteration   7: 11427527.097 ops/s
Iteration   8: 11277527.214 ops/s
Iteration   9: 10943515.049 ops/s
Iteration  10: 10833974.776 ops/s
Iteration  11: 11100614.309 ops/s
Iteration  12: 11319248.171 ops/s
Iteration  13: 11186335.652 ops/s
Iteration  14: 11550561.239 ops/s
Iteration  15: 11417636.443 ops/s
Iteration  16: 11534515.775 ops/s
Iteration  17: 11040099.350 ops/s
Iteration  18: 10723507.672 ops/s
Iteration  19: 11172109.436 ops/s
Iteration  20: 11127210.294 ops/s
Iteration  21: 11319958.111 ops/s
Iteration  22: 12101913.874 ops/s
Iteration  23: 10986641.528 ops/s
Iteration  24: 10939187.884 ops/s
Iteration  25: 10743420.762 ops/s
Iteration  26: 10894081.959 ops/s
Iteration  27: 11092554.597 ops/s
Iteration  28: 11041738.198 ops/s
Iteration  29: 11080676.273 ops/s
Iteration  30: 11360563.511 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_containsAllArray":
  11167703.032 ±(99.9%) 212282.517 ops/s [Average]
  (min, avg, max) = (10723507.672, 11167703.032, 12101913.874), stdev = 317734.501
  CI (99.9%): [10955420.516, 11379985.549] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_containsAllArray  thrpt   30  11167703.032 ± 212282.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7347114.224 ops/s
# Warmup Iteration   2: 7903040.125 ops/s
# Warmup Iteration   3: 9622266.250 ops/s
# Warmup Iteration   4: 10505450.202 ops/s
# Warmup Iteration   5: 9851329.472 ops/s
# Warmup Iteration   6: 10097515.385 ops/s
# Warmup Iteration   7: 10008829.191 ops/s
# Warmup Iteration   8: 9886038.575 ops/s
# Warmup Iteration   9: 9915609.164 ops/s
# Warmup Iteration  10: 9700712.697 ops/s
# Warmup Iteration  11: 10109755.436 ops/s
# Warmup Iteration  12: 10267452.577 ops/s
# Warmup Iteration  13: 10866614.862 ops/s
# Warmup Iteration  14: 9662980.452 ops/s
# Warmup Iteration  15: 10178382.697 ops/s
# Warmup Iteration  16: 10817700.372 ops/s
# Warmup Iteration  17: 10292619.300 ops/s
# Warmup Iteration  18: 10454350.678 ops/s
# Warmup Iteration  19: 9664553.745 ops/s
# Warmup Iteration  20: 9867804.225 ops/s
# Warmup Iteration  21: 9902665.486 ops/s
# Warmup Iteration  22: 9716416.505 ops/s
# Warmup Iteration  23: 9597441.094 ops/s
# Warmup Iteration  24: 10075264.831 ops/s
# Warmup Iteration  25: 9943712.155 ops/s
# Warmup Iteration  26: 9798629.635 ops/s
# Warmup Iteration  27: 9485512.041 ops/s
# Warmup Iteration  28: 9759781.460 ops/s
# Warmup Iteration  29: 9940376.870 ops/s
# Warmup Iteration  30: 9786452.022 ops/s
Iteration   1: 9604845.086 ops/s
Iteration   2: 10066425.142 ops/s
Iteration   3: 9459708.270 ops/s
Iteration   4: 9608311.314 ops/s
Iteration   5: 9601236.455 ops/s
Iteration   6: 9696072.202 ops/s
Iteration   7: 9460792.079 ops/s
Iteration   8: 9660266.407 ops/s
Iteration   9: 9886126.408 ops/s
Iteration  10: 9701846.620 ops/s
Iteration  11: 10310998.347 ops/s
Iteration  12: 10166177.330 ops/s
Iteration  13: 9819478.116 ops/s
Iteration  14: 10056790.097 ops/s
Iteration  15: 9679461.519 ops/s
Iteration  16: 9617201.858 ops/s
Iteration  17: 9909081.531 ops/s
Iteration  18: 9778697.261 ops/s
Iteration  19: 10048185.566 ops/s
Iteration  20: 9775366.742 ops/s
Iteration  21: 10085304.990 ops/s
Iteration  22: 10048315.102 ops/s
Iteration  23: 9468102.791 ops/s
Iteration  24: 9538499.973 ops/s
Iteration  25: 9555855.560 ops/s
Iteration  26: 9763911.727 ops/s
Iteration  27: 9911474.052 ops/s
Iteration  28: 9651229.493 ops/s
Iteration  29: 9874557.200 ops/s
Iteration  30: 9357315.742 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_containsAllIterable":
  9772054.499 ±(99.9%) 159014.395 ops/s [Average]
  (min, avg, max) = (9357315.742, 9772054.499, 10310998.347), stdev = 238005.279
  CI (99.9%): [9613040.104, 9931068.894] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  9772054.499 ± 159014.395  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6142773.147 ops/s
# Warmup Iteration   2: 10615266.379 ops/s
# Warmup Iteration   3: 11710518.495 ops/s
# Warmup Iteration   4: 11357310.189 ops/s
# Warmup Iteration   5: 11706947.003 ops/s
# Warmup Iteration   6: 9766687.060 ops/s
# Warmup Iteration   7: 12136316.468 ops/s
# Warmup Iteration   8: 12174952.491 ops/s
# Warmup Iteration   9: 12097646.933 ops/s
# Warmup Iteration  10: 11804642.983 ops/s
# Warmup Iteration  11: 11840775.507 ops/s
# Warmup Iteration  12: 11683352.295 ops/s
# Warmup Iteration  13: 12104803.171 ops/s
# Warmup Iteration  14: 12249065.900 ops/s
# Warmup Iteration  15: 11733031.028 ops/s
# Warmup Iteration  16: 12279476.431 ops/s
# Warmup Iteration  17: 11725273.113 ops/s
# Warmup Iteration  18: 11693003.233 ops/s
# Warmup Iteration  19: 11857541.425 ops/s
# Warmup Iteration  20: 12013425.544 ops/s
# Warmup Iteration  21: 11933856.615 ops/s
# Warmup Iteration  22: 11502771.563 ops/s
# Warmup Iteration  23: 11762313.474 ops/s
# Warmup Iteration  24: 11801192.840 ops/s
# Warmup Iteration  25: 11718179.932 ops/s
# Warmup Iteration  26: 11462921.279 ops/s
# Warmup Iteration  27: 11602562.300 ops/s
# Warmup Iteration  28: 11871477.813 ops/s
# Warmup Iteration  29: 11705521.712 ops/s
# Warmup Iteration  30: 11958993.099 ops/s
Iteration   1: 11869612.341 ops/s
Iteration   2: 12175153.333 ops/s
Iteration   3: 12944889.669 ops/s
Iteration   4: 12953555.372 ops/s
Iteration   5: 11852040.055 ops/s
Iteration   6: 11891492.243 ops/s
Iteration   7: 11477956.704 ops/s
Iteration   8: 11529021.444 ops/s
Iteration   9: 11505274.180 ops/s
Iteration  10: 11783155.475 ops/s
Iteration  11: 12084946.226 ops/s
Iteration  12: 11862271.712 ops/s
Iteration  13: 11431215.534 ops/s
Iteration  14: 11764036.357 ops/s
Iteration  15: 11424560.979 ops/s
Iteration  16: 11601256.817 ops/s
Iteration  17: 11897011.553 ops/s
Iteration  18: 11932716.725 ops/s
Iteration  19: 11776499.979 ops/s
Iteration  20: 11837700.856 ops/s
Iteration  21: 11875721.467 ops/s
Iteration  22: 11833553.879 ops/s
Iteration  23: 12243288.975 ops/s
Iteration  24: 11925587.242 ops/s
Iteration  25: 11659730.796 ops/s
Iteration  26: 12007913.150 ops/s
Iteration  27: 11918003.405 ops/s
Iteration  28: 11627371.802 ops/s
Iteration  29: 11924393.403 ops/s
Iteration  30: 11826500.791 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_corresponds":
  11881214.416 ±(99.9%) 236646.609 ops/s [Average]
  (min, avg, max) = (11424560.979, 11881214.416, 12953555.372), stdev = 354201.531
  CI (99.9%): [11644567.807, 12117861.024] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_corresponds  thrpt   30  11881214.416 ± 236646.609  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11680566.547 ops/s
# Warmup Iteration   2: 25568397.617 ops/s
# Warmup Iteration   3: 25780942.898 ops/s
# Warmup Iteration   4: 23716099.655 ops/s
# Warmup Iteration   5: 24764504.819 ops/s
# Warmup Iteration   6: 26441602.277 ops/s
# Warmup Iteration   7: 26139471.097 ops/s
# Warmup Iteration   8: 26840214.082 ops/s
# Warmup Iteration   9: 26416330.062 ops/s
# Warmup Iteration  10: 26383225.101 ops/s
# Warmup Iteration  11: 26288728.022 ops/s
# Warmup Iteration  12: 26387752.377 ops/s
# Warmup Iteration  13: 27242381.108 ops/s
# Warmup Iteration  14: 27079988.992 ops/s
# Warmup Iteration  15: 26893039.000 ops/s
# Warmup Iteration  16: 26378088.142 ops/s
# Warmup Iteration  17: 27862545.012 ops/s
# Warmup Iteration  18: 27294863.303 ops/s
# Warmup Iteration  19: 27082387.287 ops/s
# Warmup Iteration  20: 28572702.624 ops/s
# Warmup Iteration  21: 26248686.505 ops/s
# Warmup Iteration  22: 26851242.860 ops/s
# Warmup Iteration  23: 27299788.183 ops/s
# Warmup Iteration  24: 26578121.520 ops/s
# Warmup Iteration  25: 28599663.321 ops/s
# Warmup Iteration  26: 28308467.335 ops/s
# Warmup Iteration  27: 27329397.007 ops/s
# Warmup Iteration  28: 27307112.473 ops/s
# Warmup Iteration  29: 27005583.878 ops/s
# Warmup Iteration  30: 27116438.534 ops/s
Iteration   1: 26791815.075 ops/s
Iteration   2: 25889159.375 ops/s
Iteration   3: 26425745.514 ops/s
Iteration   4: 27570758.806 ops/s
Iteration   5: 26321109.737 ops/s
Iteration   6: 27157933.140 ops/s
Iteration   7: 26187167.223 ops/s
Iteration   8: 27211993.137 ops/s
Iteration   9: 28629827.841 ops/s
Iteration  10: 28900337.815 ops/s
Iteration  11: 28847119.602 ops/s
Iteration  12: 27227496.598 ops/s
Iteration  13: 26518255.143 ops/s
Iteration  14: 26382850.255 ops/s
Iteration  15: 26308471.687 ops/s
Iteration  16: 28421086.396 ops/s
Iteration  17: 26255704.570 ops/s
Iteration  18: 26413144.842 ops/s
Iteration  19: 27496039.503 ops/s
Iteration  20: 26017218.334 ops/s
Iteration  21: 26274535.597 ops/s
Iteration  22: 25470587.878 ops/s
Iteration  23: 26439882.369 ops/s
Iteration  24: 26989039.692 ops/s
Iteration  25: 26516216.021 ops/s
Iteration  26: 26239629.439 ops/s
Iteration  27: 25582480.998 ops/s
Iteration  28: 28016617.094 ops/s
Iteration  29: 25930910.770 ops/s
Iteration  30: 25333659.086 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_count":
  26792226.451 ±(99.9%) 653382.930 ops/s [Average]
  (min, avg, max) = (25333659.086, 26792226.451, 28900337.815), stdev = 977952.885
  CI (99.9%): [26138843.521, 27445609.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_count  thrpt   30  26792226.451 ± 653382.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698825.619 ops/s
# Warmup Iteration   2: 1417306.521 ops/s
# Warmup Iteration   3: 1513234.538 ops/s
# Warmup Iteration   4: 1491572.294 ops/s
# Warmup Iteration   5: 1408875.952 ops/s
# Warmup Iteration   6: 1339845.513 ops/s
# Warmup Iteration   7: 1470595.201 ops/s
# Warmup Iteration   8: 1568585.727 ops/s
# Warmup Iteration   9: 1483621.684 ops/s
# Warmup Iteration  10: 1620362.693 ops/s
# Warmup Iteration  11: 1542114.872 ops/s
# Warmup Iteration  12: 1581892.582 ops/s
# Warmup Iteration  13: 1560726.449 ops/s
# Warmup Iteration  14: 1485121.985 ops/s
# Warmup Iteration  15: 1510066.725 ops/s
# Warmup Iteration  16: 1517883.499 ops/s
# Warmup Iteration  17: 1488458.089 ops/s
# Warmup Iteration  18: 1483669.559 ops/s
# Warmup Iteration  19: 1525481.239 ops/s
# Warmup Iteration  20: 1526537.112 ops/s
# Warmup Iteration  21: 1511601.573 ops/s
# Warmup Iteration  22: 1471872.433 ops/s
# Warmup Iteration  23: 1539239.829 ops/s
# Warmup Iteration  24: 1529395.595 ops/s
# Warmup Iteration  25: 1438380.912 ops/s
# Warmup Iteration  26: 1536040.666 ops/s
# Warmup Iteration  27: 1492649.286 ops/s
# Warmup Iteration  28: 1524140.828 ops/s
# Warmup Iteration  29: 1463421.028 ops/s
# Warmup Iteration  30: 1563306.402 ops/s
Iteration   1: 1438359.451 ops/s
Iteration   2: 1478427.957 ops/s
Iteration   3: 1487095.108 ops/s
Iteration   4: 1484975.791 ops/s
Iteration   5: 1647207.497 ops/s
Iteration   6: 1577627.342 ops/s
Iteration   7: 1511969.087 ops/s
Iteration   8: 1568488.826 ops/s
Iteration   9: 1542257.283 ops/s
Iteration  10: 1581609.701 ops/s
Iteration  11: 1509660.400 ops/s
Iteration  12: 1474975.852 ops/s
Iteration  13: 1479229.584 ops/s
Iteration  14: 1488044.060 ops/s
Iteration  15: 1506260.772 ops/s
Iteration  16: 1554218.953 ops/s
Iteration  17: 1511585.783 ops/s
Iteration  18: 1496483.340 ops/s
Iteration  19: 1452037.680 ops/s
Iteration  20: 1437829.334 ops/s
Iteration  21: 1488159.515 ops/s
Iteration  22: 1453240.782 ops/s
Iteration  23: 1503980.938 ops/s
Iteration  24: 1560984.030 ops/s
Iteration  25: 1608469.617 ops/s
Iteration  26: 1508691.263 ops/s
Iteration  27: 1529469.570 ops/s
Iteration  28: 1477131.913 ops/s
Iteration  29: 1551451.705 ops/s
Iteration  30: 1530427.801 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_countBy":
  1514678.365 ±(99.9%) 33433.646 ops/s [Average]
  (min, avg, max) = (1437829.334, 1514678.365, 1647207.497), stdev = 50041.912
  CI (99.9%): [1481244.718, 1548112.011] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_countBy  thrpt   30  1514678.365 ± 33433.646  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 130915.513 ops/s
# Warmup Iteration   2: 200557.465 ops/s
# Warmup Iteration   3: 263864.057 ops/s
# Warmup Iteration   4: 264854.615 ops/s
# Warmup Iteration   5: 259520.700 ops/s
# Warmup Iteration   6: 265210.010 ops/s
# Warmup Iteration   7: 209995.077 ops/s
# Warmup Iteration   8: 261994.415 ops/s
# Warmup Iteration   9: 262888.669 ops/s
# Warmup Iteration  10: 255454.644 ops/s
# Warmup Iteration  11: 258526.332 ops/s
# Warmup Iteration  12: 259133.639 ops/s
# Warmup Iteration  13: 262295.161 ops/s
# Warmup Iteration  14: 265141.735 ops/s
# Warmup Iteration  15: 260864.409 ops/s
# Warmup Iteration  16: 257154.404 ops/s
# Warmup Iteration  17: 269284.595 ops/s
# Warmup Iteration  18: 277448.530 ops/s
# Warmup Iteration  19: 269913.364 ops/s
# Warmup Iteration  20: 256466.636 ops/s
# Warmup Iteration  21: 263020.602 ops/s
# Warmup Iteration  22: 256215.371 ops/s
# Warmup Iteration  23: 259984.448 ops/s
# Warmup Iteration  24: 258658.530 ops/s
# Warmup Iteration  25: 257396.334 ops/s
# Warmup Iteration  26: 255828.401 ops/s
# Warmup Iteration  27: 260427.169 ops/s
# Warmup Iteration  28: 254059.803 ops/s
# Warmup Iteration  29: 260761.285 ops/s
# Warmup Iteration  30: 259557.708 ops/s
Iteration   1: 266604.318 ops/s
Iteration   2: 259696.187 ops/s
Iteration   3: 251845.082 ops/s
Iteration   4: 265857.886 ops/s
Iteration   5: 255347.280 ops/s
Iteration   6: 268131.462 ops/s
Iteration   7: 279736.794 ops/s
Iteration   8: 267577.378 ops/s
Iteration   9: 269544.073 ops/s
Iteration  10: 255126.775 ops/s
Iteration  11: 259361.155 ops/s
Iteration  12: 256153.258 ops/s
Iteration  13: 257026.652 ops/s
Iteration  14: 257533.940 ops/s
Iteration  15: 269226.245 ops/s
Iteration  16: 269731.127 ops/s
Iteration  17: 261019.671 ops/s
Iteration  18: 252691.300 ops/s
Iteration  19: 257056.657 ops/s
Iteration  20: 263308.686 ops/s
Iteration  21: 268539.199 ops/s
Iteration  22: 262315.579 ops/s
Iteration  23: 283539.196 ops/s
Iteration  24: 268041.519 ops/s
Iteration  25: 259760.503 ops/s
Iteration  26: 265665.202 ops/s
Iteration  27: 258004.615 ops/s
Iteration  28: 250592.071 ops/s
Iteration  29: 270576.697 ops/s
Iteration  30: 259655.945 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_countByEach":
  262975.548 ±(99.9%) 5184.325 ops/s [Average]
  (min, avg, max) = (250592.071, 262975.548, 283539.196), stdev = 7759.654
  CI (99.9%): [257791.223, 268159.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_countByEach  thrpt   30  262975.548 ± 5184.325  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 644505.425 ops/s
# Warmup Iteration   2: 1089866.729 ops/s
# Warmup Iteration   3: 1285779.525 ops/s
# Warmup Iteration   4: 1315862.180 ops/s
# Warmup Iteration   5: 1279372.143 ops/s
# Warmup Iteration   6: 1068030.280 ops/s
# Warmup Iteration   7: 1277467.330 ops/s
# Warmup Iteration   8: 1281037.206 ops/s
# Warmup Iteration   9: 1277495.037 ops/s
# Warmup Iteration  10: 1269370.445 ops/s
# Warmup Iteration  11: 1307092.933 ops/s
# Warmup Iteration  12: 1345761.208 ops/s
# Warmup Iteration  13: 1272641.292 ops/s
# Warmup Iteration  14: 1233704.295 ops/s
# Warmup Iteration  15: 1266093.503 ops/s
# Warmup Iteration  16: 1258782.334 ops/s
# Warmup Iteration  17: 1296165.642 ops/s
# Warmup Iteration  18: 1338172.604 ops/s
# Warmup Iteration  19: 1313917.793 ops/s
# Warmup Iteration  20: 1324972.514 ops/s
# Warmup Iteration  21: 1287294.201 ops/s
# Warmup Iteration  22: 1305120.883 ops/s
# Warmup Iteration  23: 1327670.301 ops/s
# Warmup Iteration  24: 1375742.447 ops/s
# Warmup Iteration  25: 1330249.341 ops/s
# Warmup Iteration  26: 1277532.612 ops/s
# Warmup Iteration  27: 1260630.641 ops/s
# Warmup Iteration  28: 1261659.904 ops/s
# Warmup Iteration  29: 1272159.859 ops/s
# Warmup Iteration  30: 1264405.088 ops/s
Iteration   1: 1285784.978 ops/s
Iteration   2: 1229107.998 ops/s
Iteration   3: 1299389.272 ops/s
Iteration   4: 1236050.396 ops/s
Iteration   5: 1313197.097 ops/s
Iteration   6: 1295617.234 ops/s
Iteration   7: 1311797.626 ops/s
Iteration   8: 1396975.670 ops/s
Iteration   9: 1307820.393 ops/s
Iteration  10: 1359002.657 ops/s
Iteration  11: 1243363.272 ops/s
Iteration  12: 1314712.990 ops/s
Iteration  13: 1391656.566 ops/s
Iteration  14: 1304274.053 ops/s
Iteration  15: 1307754.394 ops/s
Iteration  16: 1285690.215 ops/s
Iteration  17: 1310806.350 ops/s
Iteration  18: 1265732.096 ops/s
Iteration  19: 1270353.021 ops/s
Iteration  20: 1251980.199 ops/s
Iteration  21: 1303939.623 ops/s
Iteration  22: 1296670.126 ops/s
Iteration  23: 1249454.272 ops/s
Iteration  24: 1258979.365 ops/s
Iteration  25: 1265337.244 ops/s
Iteration  26: 1291822.037 ops/s
Iteration  27: 1315464.058 ops/s
Iteration  28: 1280305.735 ops/s
Iteration  29: 1293885.111 ops/s
Iteration  30: 1282463.526 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_countByWith":
  1293979.586 ±(99.9%) 26200.523 ops/s [Average]
  (min, avg, max) = (1229107.998, 1293979.586, 1396975.670), stdev = 39215.712
  CI (99.9%): [1267779.063, 1320180.108] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_countByWith  thrpt   30  1293979.586 ± 26200.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18089295.379 ops/s
# Warmup Iteration   2: 35931373.595 ops/s
# Warmup Iteration   3: 36433747.522 ops/s
# Warmup Iteration   4: 35280234.706 ops/s
# Warmup Iteration   5: 29235923.528 ops/s
# Warmup Iteration   6: 35053133.836 ops/s
# Warmup Iteration   7: 35202718.213 ops/s
# Warmup Iteration   8: 35121120.451 ops/s
# Warmup Iteration   9: 34049297.463 ops/s
# Warmup Iteration  10: 33424282.760 ops/s
# Warmup Iteration  11: 34906296.771 ops/s
# Warmup Iteration  12: 33854956.783 ops/s
# Warmup Iteration  13: 33362436.202 ops/s
# Warmup Iteration  14: 33153645.266 ops/s
# Warmup Iteration  15: 32276824.591 ops/s
# Warmup Iteration  16: 33175604.841 ops/s
# Warmup Iteration  17: 32951126.743 ops/s
# Warmup Iteration  18: 34424980.199 ops/s
# Warmup Iteration  19: 35374655.425 ops/s
# Warmup Iteration  20: 34887913.426 ops/s
# Warmup Iteration  21: 36472849.645 ops/s
# Warmup Iteration  22: 36041603.880 ops/s
# Warmup Iteration  23: 33299716.503 ops/s
# Warmup Iteration  24: 33376621.343 ops/s
# Warmup Iteration  25: 33292585.687 ops/s
# Warmup Iteration  26: 33947427.630 ops/s
# Warmup Iteration  27: 33578502.539 ops/s
# Warmup Iteration  28: 33000483.481 ops/s
# Warmup Iteration  29: 33365999.994 ops/s
# Warmup Iteration  30: 33628020.578 ops/s
Iteration   1: 34218013.469 ops/s
Iteration   2: 36626582.110 ops/s
Iteration   3: 34952136.633 ops/s
Iteration   4: 33754550.047 ops/s
Iteration   5: 35020036.154 ops/s
Iteration   6: 35332386.461 ops/s
Iteration   7: 34659835.407 ops/s
Iteration   8: 34499976.691 ops/s
Iteration   9: 33582624.773 ops/s
Iteration  10: 34143209.424 ops/s
Iteration  11: 33941737.847 ops/s
Iteration  12: 33833392.004 ops/s
Iteration  13: 33106831.172 ops/s
Iteration  14: 34885204.050 ops/s
Iteration  15: 36497099.981 ops/s
Iteration  16: 36260038.252 ops/s
Iteration  17: 33959363.063 ops/s
Iteration  18: 34374564.139 ops/s
Iteration  19: 33620100.023 ops/s
Iteration  20: 33774676.162 ops/s
Iteration  21: 33846632.521 ops/s
Iteration  22: 33891403.895 ops/s
Iteration  23: 33581246.635 ops/s
Iteration  24: 33348973.677 ops/s
Iteration  25: 32615361.201 ops/s
Iteration  26: 33503302.878 ops/s
Iteration  27: 33589238.380 ops/s
Iteration  28: 32985713.875 ops/s
Iteration  29: 32468474.167 ops/s
Iteration  30: 34142883.710 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_countWith":
  34167186.293 ±(99.9%) 684333.978 ops/s [Average]
  (min, avg, max) = (32468474.167, 34167186.293, 36626582.110), stdev = 1024278.960
  CI (99.9%): [33482852.315, 34851520.272] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_countWith  thrpt   30  34167186.293 ± 684333.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12929477.869 ops/s
# Warmup Iteration   2: 28744749.283 ops/s
# Warmup Iteration   3: 28051192.505 ops/s
# Warmup Iteration   4: 23742001.999 ops/s
# Warmup Iteration   5: 28202543.433 ops/s
# Warmup Iteration   6: 27742067.777 ops/s
# Warmup Iteration   7: 27266619.477 ops/s
# Warmup Iteration   8: 26813665.257 ops/s
# Warmup Iteration   9: 26940361.047 ops/s
# Warmup Iteration  10: 28233474.713 ops/s
# Warmup Iteration  11: 27180865.436 ops/s
# Warmup Iteration  12: 25727638.633 ops/s
# Warmup Iteration  13: 27224479.620 ops/s
# Warmup Iteration  14: 27213346.254 ops/s
# Warmup Iteration  15: 26407895.288 ops/s
# Warmup Iteration  16: 26420273.615 ops/s
# Warmup Iteration  17: 27267883.864 ops/s
# Warmup Iteration  18: 27117747.276 ops/s
# Warmup Iteration  19: 26500138.082 ops/s
# Warmup Iteration  20: 27299072.689 ops/s
# Warmup Iteration  21: 27218161.572 ops/s
# Warmup Iteration  22: 26954290.047 ops/s
# Warmup Iteration  23: 26953973.517 ops/s
# Warmup Iteration  24: 27099048.276 ops/s
# Warmup Iteration  25: 26965900.323 ops/s
# Warmup Iteration  26: 26158855.558 ops/s
# Warmup Iteration  27: 26949246.688 ops/s
# Warmup Iteration  28: 27352657.021 ops/s
# Warmup Iteration  29: 26749804.665 ops/s
# Warmup Iteration  30: 26498158.965 ops/s
Iteration   1: 26497207.989 ops/s
Iteration   2: 26063273.888 ops/s
Iteration   3: 25277049.059 ops/s
Iteration   4: 26600192.577 ops/s
Iteration   5: 27449424.845 ops/s
Iteration   6: 25936094.711 ops/s
Iteration   7: 26823220.703 ops/s
Iteration   8: 28049713.999 ops/s
Iteration   9: 28586090.948 ops/s
Iteration  10: 27800153.920 ops/s
Iteration  11: 26902787.475 ops/s
Iteration  12: 27792439.914 ops/s
Iteration  13: 27278224.091 ops/s
Iteration  14: 26946512.635 ops/s
Iteration  15: 27159105.948 ops/s
Iteration  16: 26372436.168 ops/s
Iteration  17: 26774452.055 ops/s
Iteration  18: 27154826.888 ops/s
Iteration  19: 27573646.324 ops/s
Iteration  20: 27318970.631 ops/s
Iteration  21: 26374753.102 ops/s
Iteration  22: 27120914.158 ops/s
Iteration  23: 26337319.368 ops/s
Iteration  24: 25852616.485 ops/s
Iteration  25: 27835107.238 ops/s
Iteration  26: 26017664.193 ops/s
Iteration  27: 25704824.584 ops/s
Iteration  28: 26900833.978 ops/s
Iteration  29: 26513425.166 ops/s
Iteration  30: 26465243.459 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detect":
  26849284.217 ±(99.9%) 509669.852 ops/s [Average]
  (min, avg, max) = (25277049.059, 26849284.217, 28586090.948), stdev = 762849.898
  CI (99.9%): [26339614.365, 27358954.068] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_detect  thrpt   30  26849284.217 ± 509669.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12031003.740 ops/s
# Warmup Iteration   2: 27283613.578 ops/s
# Warmup Iteration   3: 29188545.242 ops/s
# Warmup Iteration   4: 23529366.595 ops/s
# Warmup Iteration   5: 28759202.034 ops/s
# Warmup Iteration   6: 29946310.236 ops/s
# Warmup Iteration   7: 28706682.098 ops/s
# Warmup Iteration   8: 28692815.967 ops/s
# Warmup Iteration   9: 29607376.667 ops/s
# Warmup Iteration  10: 30106395.055 ops/s
# Warmup Iteration  11: 31567927.840 ops/s
# Warmup Iteration  12: 29728635.143 ops/s
# Warmup Iteration  13: 29605430.352 ops/s
# Warmup Iteration  14: 29706299.183 ops/s
# Warmup Iteration  15: 28772474.444 ops/s
# Warmup Iteration  16: 28296617.800 ops/s
# Warmup Iteration  17: 29136800.681 ops/s
# Warmup Iteration  18: 28397447.731 ops/s
# Warmup Iteration  19: 28407528.734 ops/s
# Warmup Iteration  20: 29313433.188 ops/s
# Warmup Iteration  21: 29423556.627 ops/s
# Warmup Iteration  22: 28359593.418 ops/s
# Warmup Iteration  23: 28851589.431 ops/s
# Warmup Iteration  24: 29190765.383 ops/s
# Warmup Iteration  25: 30329893.584 ops/s
# Warmup Iteration  26: 29247986.900 ops/s
# Warmup Iteration  27: 28093190.960 ops/s
# Warmup Iteration  28: 28484975.953 ops/s
# Warmup Iteration  29: 28892092.522 ops/s
# Warmup Iteration  30: 28833150.759 ops/s
Iteration   1: 28654198.247 ops/s
Iteration   2: 29524690.547 ops/s
Iteration   3: 30345229.450 ops/s
Iteration   4: 30087319.612 ops/s
Iteration   5: 29795688.507 ops/s
Iteration   6: 29448930.206 ops/s
Iteration   7: 27766326.684 ops/s
Iteration   8: 28289371.446 ops/s
Iteration   9: 28749712.012 ops/s
Iteration  10: 28633620.358 ops/s
Iteration  11: 30723124.116 ops/s
Iteration  12: 28643210.958 ops/s
Iteration  13: 28947376.899 ops/s
Iteration  14: 28535138.938 ops/s
Iteration  15: 28795806.352 ops/s
Iteration  16: 28100177.527 ops/s
Iteration  17: 28285065.395 ops/s
Iteration  18: 28463538.828 ops/s
Iteration  19: 29149495.714 ops/s
Iteration  20: 28706164.808 ops/s
Iteration  21: 29201261.804 ops/s
Iteration  22: 28432595.032 ops/s
Iteration  23: 28673425.481 ops/s
Iteration  24: 28314155.707 ops/s
Iteration  25: 28919294.382 ops/s
Iteration  26: 28623094.939 ops/s
Iteration  27: 28650976.725 ops/s
Iteration  28: 29274641.104 ops/s
Iteration  29: 29907618.021 ops/s
Iteration  30: 31233258.419 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectIfNone":
  29029150.274 ±(99.9%) 534930.681 ops/s [Average]
  (min, avg, max) = (27766326.684, 29029150.274, 31233258.419), stdev = 800659.121
  CI (99.9%): [28494219.593, 29564080.955] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_detectIfNone  thrpt   30  29029150.274 ± 534930.681  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54121479.525 ops/s
# Warmup Iteration   2: 83803008.942 ops/s
# Warmup Iteration   3: 87858036.899 ops/s
# Warmup Iteration   4: 87287637.845 ops/s
# Warmup Iteration   5: 83679952.801 ops/s
# Warmup Iteration   6: 80279770.307 ops/s
# Warmup Iteration   7: 80727827.015 ops/s
# Warmup Iteration   8: 84093420.977 ops/s
# Warmup Iteration   9: 86825228.296 ops/s
# Warmup Iteration  10: 86369404.256 ops/s
# Warmup Iteration  11: 82805818.234 ops/s
# Warmup Iteration  12: 84926839.470 ops/s
# Warmup Iteration  13: 88686908.203 ops/s
# Warmup Iteration  14: 87972142.718 ops/s
# Warmup Iteration  15: 88781854.054 ops/s
# Warmup Iteration  16: 90464225.192 ops/s
# Warmup Iteration  17: 93809447.912 ops/s
# Warmup Iteration  18: 92040028.721 ops/s
# Warmup Iteration  19: 85191484.075 ops/s
# Warmup Iteration  20: 85612318.190 ops/s
# Warmup Iteration  21: 83992849.437 ops/s
# Warmup Iteration  22: 86558802.388 ops/s
# Warmup Iteration  23: 84122557.421 ops/s
# Warmup Iteration  24: 89985454.708 ops/s
# Warmup Iteration  25: 92328815.065 ops/s
# Warmup Iteration  26: 86460324.519 ops/s
# Warmup Iteration  27: 83756692.641 ops/s
# Warmup Iteration  28: 84377714.302 ops/s
# Warmup Iteration  29: 83783949.946 ops/s
# Warmup Iteration  30: 88242642.805 ops/s
Iteration   1: 88245359.657 ops/s
Iteration   2: 87549961.208 ops/s
Iteration   3: 87947511.306 ops/s
Iteration   4: 89381425.183 ops/s
Iteration   5: 92178985.167 ops/s
Iteration   6: 87472098.243 ops/s
Iteration   7: 87105727.572 ops/s
Iteration   8: 84766621.261 ops/s
Iteration   9: 87311315.502 ops/s
Iteration  10: 85681743.916 ops/s
Iteration  11: 86821886.730 ops/s
Iteration  12: 87336352.585 ops/s
Iteration  13: 92705176.745 ops/s
Iteration  14: 85649735.028 ops/s
Iteration  15: 85549595.643 ops/s
Iteration  16: 83809801.677 ops/s
Iteration  17: 85495988.918 ops/s
Iteration  18: 88116183.387 ops/s
Iteration  19: 85682673.469 ops/s
Iteration  20: 85140998.812 ops/s
Iteration  21: 82887719.127 ops/s
Iteration  22: 83283379.511 ops/s
Iteration  23: 84856954.267 ops/s
Iteration  24: 83225221.209 ops/s
Iteration  25: 82449077.838 ops/s
Iteration  26: 83839513.284 ops/s
Iteration  27: 84773433.231 ops/s
Iteration  28: 83899885.340 ops/s
Iteration  29: 84193414.254 ops/s
Iteration  30: 86129843.855 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectIndex":
  86116252.798 ±(99.9%) 1654475.478 ops/s [Average]
  (min, avg, max) = (82449077.838, 86116252.798, 92705176.745), stdev = 2476341.196
  CI (99.9%): [84461777.319, 87770728.276] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score         Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_detectIndex  thrpt   30  86116252.798 ± 1654475.478  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 73200176.914 ops/s
# Warmup Iteration   2: 144755486.360 ops/s
# Warmup Iteration   3: 149503454.474 ops/s
# Warmup Iteration   4: 122653255.201 ops/s
# Warmup Iteration   5: 165178170.710 ops/s
# Warmup Iteration   6: 159053351.567 ops/s
# Warmup Iteration   7: 157547636.123 ops/s
# Warmup Iteration   8: 150695847.169 ops/s
# Warmup Iteration   9: 149311476.046 ops/s
# Warmup Iteration  10: 149356376.742 ops/s
# Warmup Iteration  11: 148416881.312 ops/s
# Warmup Iteration  12: 148007116.322 ops/s
# Warmup Iteration  13: 150907669.974 ops/s
# Warmup Iteration  14: 148818776.496 ops/s
# Warmup Iteration  15: 151620677.574 ops/s
# Warmup Iteration  16: 153611632.994 ops/s
# Warmup Iteration  17: 152111199.093 ops/s
# Warmup Iteration  18: 149708315.497 ops/s
# Warmup Iteration  19: 151301164.145 ops/s
# Warmup Iteration  20: 152188053.490 ops/s
# Warmup Iteration  21: 152752466.335 ops/s
# Warmup Iteration  22: 159794867.930 ops/s
# Warmup Iteration  23: 151796024.446 ops/s
# Warmup Iteration  24: 154792317.534 ops/s
# Warmup Iteration  25: 153832661.462 ops/s
# Warmup Iteration  26: 148487968.118 ops/s
# Warmup Iteration  27: 151087346.566 ops/s
# Warmup Iteration  28: 149834115.249 ops/s
# Warmup Iteration  29: 146915074.399 ops/s
# Warmup Iteration  30: 150272727.046 ops/s
Iteration   1: 151715645.176 ops/s
Iteration   2: 153990756.469 ops/s
Iteration   3: 151690721.346 ops/s
Iteration   4: 151209725.724 ops/s
Iteration   5: 149135143.323 ops/s
Iteration   6: 150035536.936 ops/s
Iteration   7: 148460950.528 ops/s
Iteration   8: 155148691.215 ops/s
Iteration   9: 164153982.034 ops/s
Iteration  10: 152387847.675 ops/s
Iteration  11: 150561662.995 ops/s
Iteration  12: 156431422.448 ops/s
Iteration  13: 153388760.933 ops/s
Iteration  14: 149564613.578 ops/s
Iteration  15: 152269426.297 ops/s
Iteration  16: 159353461.827 ops/s
Iteration  17: 156696153.688 ops/s
Iteration  18: 156089349.941 ops/s
Iteration  19: 153892039.347 ops/s
Iteration  20: 149888948.002 ops/s
Iteration  21: 145054333.281 ops/s
Iteration  22: 152691085.031 ops/s
Iteration  23: 150914263.216 ops/s
Iteration  24: 151110685.426 ops/s
Iteration  25: 153004030.752 ops/s
Iteration  26: 150119232.958 ops/s
Iteration  27: 147492184.485 ops/s
Iteration  28: 150903575.790 ops/s
Iteration  29: 145954104.420 ops/s
Iteration  30: 149913528.699 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectLastIndex":
  152107395.451 ±(99.9%) 2587537.393 ops/s [Average]
  (min, avg, max) = (145054333.281, 152107395.451, 164153982.034), stdev = 3872904.451
  CI (99.9%): [149519858.058, 154694932.845] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score         Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  152107395.451 ± 2587537.393  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6465344.956 ops/s
# Warmup Iteration   2: 15398144.827 ops/s
# Warmup Iteration   3: 14390977.724 ops/s
# Warmup Iteration   4: 13410409.751 ops/s
# Warmup Iteration   5: 14976076.844 ops/s
# Warmup Iteration   6: 15356186.863 ops/s
# Warmup Iteration   7: 16094114.492 ops/s
# Warmup Iteration   8: 15906991.951 ops/s
# Warmup Iteration   9: 15450254.743 ops/s
# Warmup Iteration  10: 15130808.820 ops/s
# Warmup Iteration  11: 15364802.067 ops/s
# Warmup Iteration  12: 15432236.451 ops/s
# Warmup Iteration  13: 15315877.249 ops/s
# Warmup Iteration  14: 15331991.569 ops/s
# Warmup Iteration  15: 15674657.392 ops/s
# Warmup Iteration  16: 15378755.868 ops/s
# Warmup Iteration  17: 15740051.133 ops/s
# Warmup Iteration  18: 15400767.265 ops/s
# Warmup Iteration  19: 15741790.451 ops/s
# Warmup Iteration  20: 15694693.760 ops/s
# Warmup Iteration  21: 14538838.098 ops/s
# Warmup Iteration  22: 15316872.550 ops/s
# Warmup Iteration  23: 15573289.561 ops/s
# Warmup Iteration  24: 15078108.638 ops/s
# Warmup Iteration  25: 15363675.090 ops/s
# Warmup Iteration  26: 16741041.676 ops/s
# Warmup Iteration  27: 15533615.229 ops/s
# Warmup Iteration  28: 15555669.069 ops/s
# Warmup Iteration  29: 16180206.749 ops/s
# Warmup Iteration  30: 15267163.807 ops/s
Iteration   1: 15321604.105 ops/s
Iteration   2: 15612430.928 ops/s
Iteration   3: 15209028.691 ops/s
Iteration   4: 14838049.117 ops/s
Iteration   5: 14856140.341 ops/s
Iteration   6: 15153667.058 ops/s
Iteration   7: 15150300.053 ops/s
Iteration   8: 15217304.345 ops/s
Iteration   9: 15786889.690 ops/s
Iteration  10: 15360864.180 ops/s
Iteration  11: 15348694.933 ops/s
Iteration  12: 15218302.493 ops/s
Iteration  13: 15968594.303 ops/s
Iteration  14: 15750153.760 ops/s
Iteration  15: 15922649.329 ops/s
Iteration  16: 16724201.148 ops/s
Iteration  17: 15642407.496 ops/s
Iteration  18: 15459024.016 ops/s
Iteration  19: 15396039.954 ops/s
Iteration  20: 15254333.973 ops/s
Iteration  21: 14810857.403 ops/s
Iteration  22: 14771883.372 ops/s
Iteration  23: 14732777.241 ops/s
Iteration  24: 14682959.949 ops/s
Iteration  25: 15299313.829 ops/s
Iteration  26: 14935472.997 ops/s
Iteration  27: 15124174.451 ops/s
Iteration  28: 15078119.265 ops/s
Iteration  29: 15582775.511 ops/s
Iteration  30: 15687088.506 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectWith":
  15329870.081 ±(99.9%) 295512.452 ops/s [Average]
  (min, avg, max) = (14682959.949, 15329870.081, 16724201.148), stdev = 442309.160
  CI (99.9%): [15034357.629, 15625382.533] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_detectWith  thrpt   30  15329870.081 ± 295512.452  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7492222.635 ops/s
# Warmup Iteration   2: 17601706.552 ops/s
# Warmup Iteration   3: 17609710.068 ops/s
# Warmup Iteration   4: 14886904.316 ops/s
# Warmup Iteration   5: 17473660.311 ops/s
# Warmup Iteration   6: 18448894.019 ops/s
# Warmup Iteration   7: 18492602.060 ops/s
# Warmup Iteration   8: 17485266.846 ops/s
# Warmup Iteration   9: 17690771.684 ops/s
# Warmup Iteration  10: 17556975.044 ops/s
# Warmup Iteration  11: 17520042.059 ops/s
# Warmup Iteration  12: 17442267.473 ops/s
# Warmup Iteration  13: 17048705.695 ops/s
# Warmup Iteration  14: 17625723.740 ops/s
# Warmup Iteration  15: 17972527.864 ops/s
# Warmup Iteration  16: 17616712.902 ops/s
# Warmup Iteration  17: 18143619.067 ops/s
# Warmup Iteration  18: 17609129.753 ops/s
# Warmup Iteration  19: 17051728.045 ops/s
# Warmup Iteration  20: 17614481.914 ops/s
# Warmup Iteration  21: 17550683.068 ops/s
# Warmup Iteration  22: 18881924.006 ops/s
# Warmup Iteration  23: 19518987.921 ops/s
# Warmup Iteration  24: 19124878.156 ops/s
# Warmup Iteration  25: 18798015.488 ops/s
# Warmup Iteration  26: 19509900.286 ops/s
# Warmup Iteration  27: 19531973.084 ops/s
# Warmup Iteration  28: 19479112.723 ops/s
# Warmup Iteration  29: 19490592.466 ops/s
# Warmup Iteration  30: 19497802.023 ops/s
Iteration   1: 19525609.551 ops/s
Iteration   2: 19511295.681 ops/s
Iteration   3: 19502948.782 ops/s
Iteration   4: 19455486.928 ops/s
Iteration   5: 19361678.750 ops/s
Iteration   6: 19490553.814 ops/s
Iteration   7: 19478284.141 ops/s
Iteration   8: 19345595.644 ops/s
Iteration   9: 19327630.681 ops/s
Iteration  10: 19516761.673 ops/s
Iteration  11: 19455616.847 ops/s
Iteration  12: 19466403.680 ops/s
Iteration  13: 19532233.856 ops/s
Iteration  14: 19491036.624 ops/s
Iteration  15: 19469442.910 ops/s
Iteration  16: 19529844.906 ops/s
Iteration  17: 19435242.426 ops/s
Iteration  18: 19305143.866 ops/s
Iteration  19: 19325934.597 ops/s
Iteration  20: 19346689.254 ops/s
Iteration  21: 17319271.467 ops/s
Iteration  22: 17790682.769 ops/s
Iteration  23: 17950837.678 ops/s
Iteration  24: 17771638.241 ops/s
Iteration  25: 17619794.867 ops/s
Iteration  26: 18307667.310 ops/s
Iteration  27: 18383081.561 ops/s
Iteration  28: 17575165.768 ops/s
Iteration  29: 18316818.127 ops/s
Iteration  30: 18236592.745 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_detectWithIfNone":
  18938166.171 ±(99.9%) 506675.006 ops/s [Average]
  (min, avg, max) = (17319271.467, 18938166.171, 19532233.856), stdev = 758367.354
  CI (99.9%): [18431491.165, 19444841.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  18938166.171 ± 506675.006  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1627503.012 ops/s
# Warmup Iteration   2: 3301743.821 ops/s
# Warmup Iteration   3: 3315830.594 ops/s
# Warmup Iteration   4: 3286124.740 ops/s
# Warmup Iteration   5: 2649956.318 ops/s
# Warmup Iteration   6: 3336491.085 ops/s
# Warmup Iteration   7: 3311871.301 ops/s
# Warmup Iteration   8: 3465794.337 ops/s
# Warmup Iteration   9: 3328765.251 ops/s
# Warmup Iteration  10: 3212945.095 ops/s
# Warmup Iteration  11: 3304712.394 ops/s
# Warmup Iteration  12: 3286569.111 ops/s
# Warmup Iteration  13: 3348324.860 ops/s
# Warmup Iteration  14: 3388371.324 ops/s
# Warmup Iteration  15: 3332121.679 ops/s
# Warmup Iteration  16: 3401555.585 ops/s
# Warmup Iteration  17: 3639543.297 ops/s
# Warmup Iteration  18: 3620452.820 ops/s
# Warmup Iteration  19: 3643336.439 ops/s
# Warmup Iteration  20: 3442937.871 ops/s
# Warmup Iteration  21: 3471065.855 ops/s
# Warmup Iteration  22: 3416398.317 ops/s
# Warmup Iteration  23: 3321652.176 ops/s
# Warmup Iteration  24: 3349512.291 ops/s
# Warmup Iteration  25: 3370416.518 ops/s
# Warmup Iteration  26: 3405979.742 ops/s
# Warmup Iteration  27: 3322628.368 ops/s
# Warmup Iteration  28: 3335359.672 ops/s
# Warmup Iteration  29: 3400369.233 ops/s
# Warmup Iteration  30: 3470880.107 ops/s
Iteration   1: 3492036.877 ops/s
Iteration   2: 3226270.873 ops/s
Iteration   3: 3270550.679 ops/s
Iteration   4: 3492234.196 ops/s
Iteration   5: 3637785.291 ops/s
Iteration   6: 3363551.937 ops/s
Iteration   7: 3287483.891 ops/s
Iteration   8: 3321761.965 ops/s
Iteration   9: 3304036.021 ops/s
Iteration  10: 3334328.062 ops/s
Iteration  11: 3461857.988 ops/s
Iteration  12: 3298657.650 ops/s
Iteration  13: 3487934.450 ops/s
Iteration  14: 3371519.867 ops/s
Iteration  15: 3346624.095 ops/s
Iteration  16: 3364504.616 ops/s
Iteration  17: 3589663.841 ops/s
Iteration  18: 3309331.181 ops/s
Iteration  19: 3320158.953 ops/s
Iteration  20: 3360597.279 ops/s
Iteration  21: 3334649.934 ops/s
Iteration  22: 3431381.518 ops/s
Iteration  23: 3302991.094 ops/s
Iteration  24: 3329167.712 ops/s
Iteration  25: 3342724.711 ops/s
Iteration  26: 3384533.389 ops/s
Iteration  27: 3447290.742 ops/s
Iteration  28: 3415572.652 ops/s
Iteration  29: 3345629.835 ops/s
Iteration  30: 3326215.861 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_distinct":
  3376701.572 ±(99.9%) 62126.616 ops/s [Average]
  (min, avg, max) = (3226270.873, 3376701.572, 3637785.291), stdev = 92988.201
  CI (99.9%): [3314574.956, 3438828.188] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_distinct  thrpt   30  3376701.572 ± 62126.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3705224.399 ops/s
# Warmup Iteration   2: 8897648.628 ops/s
# Warmup Iteration   3: 9364640.573 ops/s
# Warmup Iteration   4: 7127233.977 ops/s
# Warmup Iteration   5: 8682411.711 ops/s
# Warmup Iteration   6: 8819900.146 ops/s
# Warmup Iteration   7: 8637838.362 ops/s
# Warmup Iteration   8: 8366058.688 ops/s
# Warmup Iteration   9: 8549098.160 ops/s
# Warmup Iteration  10: 8337093.400 ops/s
# Warmup Iteration  11: 8446260.187 ops/s
# Warmup Iteration  12: 8498713.550 ops/s
# Warmup Iteration  13: 8593973.945 ops/s
# Warmup Iteration  14: 8634555.096 ops/s
# Warmup Iteration  15: 8581772.112 ops/s
# Warmup Iteration  16: 8590027.199 ops/s
# Warmup Iteration  17: 8663159.473 ops/s
# Warmup Iteration  18: 9143226.597 ops/s
# Warmup Iteration  19: 8977969.341 ops/s
# Warmup Iteration  20: 8563902.135 ops/s
# Warmup Iteration  21: 8760159.534 ops/s
# Warmup Iteration  22: 8866006.472 ops/s
# Warmup Iteration  23: 8594263.425 ops/s
# Warmup Iteration  24: 8978922.212 ops/s
# Warmup Iteration  25: 8705231.679 ops/s
# Warmup Iteration  26: 8608487.385 ops/s
# Warmup Iteration  27: 8526257.024 ops/s
# Warmup Iteration  28: 8939145.336 ops/s
# Warmup Iteration  29: 8596430.864 ops/s
# Warmup Iteration  30: 8830231.569 ops/s
Iteration   1: 8243991.204 ops/s
Iteration   2: 8380977.166 ops/s
Iteration   3: 8476226.004 ops/s
Iteration   4: 8297323.541 ops/s
Iteration   5: 8307316.621 ops/s
Iteration   6: 9034962.678 ops/s
Iteration   7: 9453117.396 ops/s
Iteration   8: 9460254.663 ops/s
Iteration   9: 9403754.381 ops/s
Iteration  10: 8793446.784 ops/s
Iteration  11: 8754578.455 ops/s
Iteration  12: 8504448.999 ops/s
Iteration  13: 8525460.003 ops/s
Iteration  14: 8351649.850 ops/s
Iteration  15: 8338144.185 ops/s
Iteration  16: 8626590.607 ops/s
Iteration  17: 8576325.398 ops/s
Iteration  18: 8465849.013 ops/s
Iteration  19: 8669053.159 ops/s
Iteration  20: 8856828.946 ops/s
Iteration  21: 8728437.918 ops/s
Iteration  22: 8506080.535 ops/s
Iteration  23: 8311845.289 ops/s
Iteration  24: 8671773.591 ops/s
Iteration  25: 8428760.269 ops/s
Iteration  26: 8384910.033 ops/s
Iteration  27: 8712879.181 ops/s
Iteration  28: 8900869.882 ops/s
Iteration  29: 8851517.059 ops/s
Iteration  30: 8995917.395 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_distinctBy":
  8667109.673 ±(99.9%) 226869.069 ops/s [Average]
  (min, avg, max) = (8243991.204, 8667109.673, 9460254.663), stdev = 339566.968
  CI (99.9%): [8440240.605, 8893978.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_distinctBy  thrpt   30  8667109.673 ± 226869.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3768996.030 ops/s
# Warmup Iteration   2: 8134532.715 ops/s
# Warmup Iteration   3: 8331414.863 ops/s
# Warmup Iteration   4: 7601810.791 ops/s
# Warmup Iteration   5: 8563445.630 ops/s
# Warmup Iteration   6: 8304139.696 ops/s
# Warmup Iteration   7: 8313212.622 ops/s
# Warmup Iteration   8: 8245591.931 ops/s
# Warmup Iteration   9: 8607311.996 ops/s
# Warmup Iteration  10: 8410466.534 ops/s
# Warmup Iteration  11: 8074820.482 ops/s
# Warmup Iteration  12: 8065688.930 ops/s
# Warmup Iteration  13: 8108790.223 ops/s
# Warmup Iteration  14: 8195116.595 ops/s
# Warmup Iteration  15: 8108176.121 ops/s
# Warmup Iteration  16: 8016603.708 ops/s
# Warmup Iteration  17: 8144510.632 ops/s
# Warmup Iteration  18: 8195448.379 ops/s
# Warmup Iteration  19: 8331450.804 ops/s
# Warmup Iteration  20: 8988470.905 ops/s
# Warmup Iteration  21: 8503067.455 ops/s
# Warmup Iteration  22: 8112239.832 ops/s
# Warmup Iteration  23: 7994916.518 ops/s
# Warmup Iteration  24: 8207819.648 ops/s
# Warmup Iteration  25: 8610291.012 ops/s
# Warmup Iteration  26: 8503605.815 ops/s
# Warmup Iteration  27: 8228850.347 ops/s
# Warmup Iteration  28: 8049339.569 ops/s
# Warmup Iteration  29: 8142959.905 ops/s
# Warmup Iteration  30: 8724565.472 ops/s
Iteration   1: 8519990.898 ops/s
Iteration   2: 8155425.874 ops/s
Iteration   3: 8016136.331 ops/s
Iteration   4: 8004660.898 ops/s
Iteration   5: 8086881.731 ops/s
Iteration   6: 8347581.869 ops/s
Iteration   7: 8188999.798 ops/s
Iteration   8: 8123494.313 ops/s
Iteration   9: 8676846.908 ops/s
Iteration  10: 8663765.283 ops/s
Iteration  11: 9009905.038 ops/s
Iteration  12: 8762511.332 ops/s
Iteration  13: 8427574.622 ops/s
Iteration  14: 8651852.190 ops/s
Iteration  15: 8530847.462 ops/s
Iteration  16: 8190879.433 ops/s
Iteration  17: 8250533.581 ops/s
Iteration  18: 7903189.352 ops/s
Iteration  19: 7998924.496 ops/s
Iteration  20: 8570936.604 ops/s
Iteration  21: 8517385.940 ops/s
Iteration  22: 8121316.783 ops/s
Iteration  23: 8013795.587 ops/s
Iteration  24: 8288050.354 ops/s
Iteration  25: 8292522.898 ops/s
Iteration  26: 8532864.249 ops/s
Iteration  27: 8269792.052 ops/s
Iteration  28: 8461857.651 ops/s
Iteration  29: 8664810.501 ops/s
Iteration  30: 8994904.858 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  8374607.963 ±(99.9%) 197779.700 ops/s [Average]
  (min, avg, max) = (7903189.352, 8374607.963, 9009905.038), stdev = 296027.367
  CI (99.9%): [8176828.262, 8572387.663] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  8374607.963 ± 197779.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 918911.628 ops/s
# Warmup Iteration   2: 989369.519 ops/s
# Warmup Iteration   3: 1310051.761 ops/s
# Warmup Iteration   4: 1447248.051 ops/s
# Warmup Iteration   5: 1468630.370 ops/s
# Warmup Iteration   6: 1514320.660 ops/s
# Warmup Iteration   7: 1379090.955 ops/s
# Warmup Iteration   8: 1389221.066 ops/s
# Warmup Iteration   9: 1367782.030 ops/s
# Warmup Iteration  10: 1385237.196 ops/s
# Warmup Iteration  11: 1363541.381 ops/s
# Warmup Iteration  12: 1097970.241 ops/s
# Warmup Iteration  13: 1357770.071 ops/s
# Warmup Iteration  14: 1367362.933 ops/s
# Warmup Iteration  15: 1388639.240 ops/s
# Warmup Iteration  16: 1383811.643 ops/s
# Warmup Iteration  17: 1397357.340 ops/s
# Warmup Iteration  18: 1372875.115 ops/s
# Warmup Iteration  19: 1394843.866 ops/s
# Warmup Iteration  20: 1489233.916 ops/s
# Warmup Iteration  21: 1534904.935 ops/s
# Warmup Iteration  22: 1493603.596 ops/s
# Warmup Iteration  23: 1409839.533 ops/s
# Warmup Iteration  24: 1464383.277 ops/s
# Warmup Iteration  25: 1474820.189 ops/s
# Warmup Iteration  26: 1442218.037 ops/s
# Warmup Iteration  27: 1420063.740 ops/s
# Warmup Iteration  28: 1508806.669 ops/s
# Warmup Iteration  29: 1548781.397 ops/s
# Warmup Iteration  30: 1554179.107 ops/s
Iteration   1: 1543345.711 ops/s
Iteration   2: 1387076.060 ops/s
Iteration   3: 1377459.881 ops/s
Iteration   4: 1441801.445 ops/s
Iteration   5: 1362147.391 ops/s
Iteration   6: 1368375.040 ops/s
Iteration   7: 1389967.815 ops/s
Iteration   8: 1344663.001 ops/s
Iteration   9: 1396304.910 ops/s
Iteration  10: 1415766.838 ops/s
Iteration  11: 1439213.052 ops/s
Iteration  12: 1495899.799 ops/s
Iteration  13: 1473484.331 ops/s
Iteration  14: 1561374.759 ops/s
Iteration  15: 1517168.537 ops/s
Iteration  16: 1564191.311 ops/s
Iteration  17: 1565141.686 ops/s
Iteration  18: 1553347.953 ops/s
Iteration  19: 1563075.811 ops/s
Iteration  20: 1563450.764 ops/s
Iteration  21: 1478344.029 ops/s
Iteration  22: 1549272.964 ops/s
Iteration  23: 1547679.130 ops/s
Iteration  24: 1561955.259 ops/s
Iteration  25: 1549123.787 ops/s
Iteration  26: 1562994.854 ops/s
Iteration  27: 1443804.123 ops/s
Iteration  28: 1401136.584 ops/s
Iteration  29: 1430778.878 ops/s
Iteration  30: 1382688.489 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_drop":
  1474367.806 ±(99.9%) 52387.835 ops/s [Average]
  (min, avg, max) = (1344663.001, 1474367.806, 1565141.686), stdev = 78411.652
  CI (99.9%): [1421979.971, 1526755.642] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_drop  thrpt   30  1474367.806 ± 52387.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3683697.862 ops/s
# Warmup Iteration   2: 7806840.078 ops/s
# Warmup Iteration   3: 7923243.984 ops/s
# Warmup Iteration   4: 7813701.581 ops/s
# Warmup Iteration   5: 6482114.025 ops/s
# Warmup Iteration   6: 8447375.511 ops/s
# Warmup Iteration   7: 8097517.223 ops/s
# Warmup Iteration   8: 8221089.190 ops/s
# Warmup Iteration   9: 7687630.970 ops/s
# Warmup Iteration  10: 7822526.782 ops/s
# Warmup Iteration  11: 8572583.979 ops/s
# Warmup Iteration  12: 8026580.607 ops/s
# Warmup Iteration  13: 7861869.376 ops/s
# Warmup Iteration  14: 7649033.217 ops/s
# Warmup Iteration  15: 7771663.747 ops/s
# Warmup Iteration  16: 7573173.729 ops/s
# Warmup Iteration  17: 7815964.198 ops/s
# Warmup Iteration  18: 7817518.683 ops/s
# Warmup Iteration  19: 7907209.958 ops/s
# Warmup Iteration  20: 7996356.327 ops/s
# Warmup Iteration  21: 8190347.483 ops/s
# Warmup Iteration  22: 8549497.308 ops/s
# Warmup Iteration  23: 8537618.145 ops/s
# Warmup Iteration  24: 8041418.753 ops/s
# Warmup Iteration  25: 7731205.408 ops/s
# Warmup Iteration  26: 7488752.655 ops/s
# Warmup Iteration  27: 7540284.005 ops/s
# Warmup Iteration  28: 7812639.595 ops/s
# Warmup Iteration  29: 7781043.905 ops/s
# Warmup Iteration  30: 7829853.110 ops/s
Iteration   1: 7583332.104 ops/s
Iteration   2: 7604180.426 ops/s
Iteration   3: 7706600.008 ops/s
Iteration   4: 7879594.289 ops/s
Iteration   5: 7744959.401 ops/s
Iteration   6: 7770637.795 ops/s
Iteration   7: 8015228.576 ops/s
Iteration   8: 8115417.842 ops/s
Iteration   9: 7734988.127 ops/s
Iteration  10: 7952258.780 ops/s
Iteration  11: 8015837.297 ops/s
Iteration  12: 7979230.840 ops/s
Iteration  13: 8227598.374 ops/s
Iteration  14: 8416328.903 ops/s
Iteration  15: 7508041.637 ops/s
Iteration  16: 8291969.315 ops/s
Iteration  17: 8272188.146 ops/s
Iteration  18: 8643061.499 ops/s
Iteration  19: 7859822.954 ops/s
Iteration  20: 8173452.465 ops/s
Iteration  21: 8088810.337 ops/s
Iteration  22: 7848065.141 ops/s
Iteration  23: 7931987.807 ops/s
Iteration  24: 8402975.527 ops/s
Iteration  25: 7834878.043 ops/s
Iteration  26: 7533306.111 ops/s
Iteration  27: 8314503.925 ops/s
Iteration  28: 7919903.659 ops/s
Iteration  29: 7816680.092 ops/s
Iteration  30: 7772103.922 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_dropWhile":
  7965264.778 ±(99.9%) 189082.601 ops/s [Average]
  (min, avg, max) = (7508041.637, 7965264.778, 8643061.499), stdev = 283009.957
  CI (99.9%): [7776182.177, 8154347.379] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_dropWhile  thrpt   30  7965264.778 ± 189082.601  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 665471.490 ops/s
# Warmup Iteration   2: 661462.348 ops/s
# Warmup Iteration   3: 812209.544 ops/s
# Warmup Iteration   4: 894265.238 ops/s
# Warmup Iteration   5: 895891.818 ops/s
# Warmup Iteration   6: 909079.693 ops/s
# Warmup Iteration   7: 929620.546 ops/s
# Warmup Iteration   8: 864940.507 ops/s
# Warmup Iteration   9: 959029.494 ops/s
# Warmup Iteration  10: 921044.844 ops/s
# Warmup Iteration  11: 902177.261 ops/s
# Warmup Iteration  12: 893415.507 ops/s
# Warmup Iteration  13: 742307.628 ops/s
# Warmup Iteration  14: 886693.810 ops/s
# Warmup Iteration  15: 880260.854 ops/s
# Warmup Iteration  16: 894375.639 ops/s
# Warmup Iteration  17: 1027300.954 ops/s
# Warmup Iteration  18: 937384.653 ops/s
# Warmup Iteration  19: 917706.582 ops/s
# Warmup Iteration  20: 942816.582 ops/s
# Warmup Iteration  21: 910066.077 ops/s
# Warmup Iteration  22: 913082.262 ops/s
# Warmup Iteration  23: 949905.767 ops/s
# Warmup Iteration  24: 948274.091 ops/s
# Warmup Iteration  25: 1010660.165 ops/s
# Warmup Iteration  26: 965370.575 ops/s
# Warmup Iteration  27: 996774.291 ops/s
# Warmup Iteration  28: 990417.911 ops/s
# Warmup Iteration  29: 1029376.038 ops/s
# Warmup Iteration  30: 1034080.578 ops/s
Iteration   1: 1025719.864 ops/s
Iteration   2: 1036428.956 ops/s
Iteration   3: 1059106.804 ops/s
Iteration   4: 1038402.718 ops/s
Iteration   5: 1030487.293 ops/s
Iteration   6: 913377.668 ops/s
Iteration   7: 935323.066 ops/s
Iteration   8: 926471.682 ops/s
Iteration   9: 929264.851 ops/s
Iteration  10: 916126.844 ops/s
Iteration  11: 949207.909 ops/s
Iteration  12: 934811.728 ops/s
Iteration  13: 908805.535 ops/s
Iteration  14: 925613.008 ops/s
Iteration  15: 937949.551 ops/s
Iteration  16: 1014352.899 ops/s
Iteration  17: 901192.273 ops/s
Iteration  18: 976405.482 ops/s
Iteration  19: 998126.492 ops/s
Iteration  20: 1035103.784 ops/s
Iteration  21: 1033930.083 ops/s
Iteration  22: 1003436.842 ops/s
Iteration  23: 998569.570 ops/s
Iteration  24: 977417.026 ops/s
Iteration  25: 1010707.319 ops/s
Iteration  26: 1026699.333 ops/s
Iteration  27: 1012465.893 ops/s
Iteration  28: 997150.760 ops/s
Iteration  29: 1036948.947 ops/s
Iteration  30: 1030314.596 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_drop_throws":
  983997.293 ±(99.9%) 32959.450 ops/s [Average]
  (min, avg, max) = (901192.273, 983997.293, 1059106.804), stdev = 49332.157
  CI (99.9%): [951037.842, 1016956.743] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_drop_throws  thrpt   30  983997.293 ± 32959.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_each$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_each

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7268052.215 ops/s
# Warmup Iteration   2: 13345357.935 ops/s
# Warmup Iteration   3: 14063738.422 ops/s
# Warmup Iteration   4: 14606567.126 ops/s
# Warmup Iteration   5: 12016586.441 ops/s
# Warmup Iteration   6: 14896593.299 ops/s
# Warmup Iteration   7: 14226931.175 ops/s
# Warmup Iteration   8: 14947801.706 ops/s
# Warmup Iteration   9: 14108360.565 ops/s
# Warmup Iteration  10: 14235930.330 ops/s
# Warmup Iteration  11: 15195328.452 ops/s
# Warmup Iteration  12: 14859619.545 ops/s
# Warmup Iteration  13: 14378957.430 ops/s
# Warmup Iteration  14: 13829843.102 ops/s
# Warmup Iteration  15: 13864816.253 ops/s
# Warmup Iteration  16: 13787374.496 ops/s
# Warmup Iteration  17: 14059238.969 ops/s
# Warmup Iteration  18: 14264017.255 ops/s
# Warmup Iteration  19: 14405478.927 ops/s
# Warmup Iteration  20: 13558669.909 ops/s
# Warmup Iteration  21: 14215540.378 ops/s
# Warmup Iteration  22: 14960149.568 ops/s
# Warmup Iteration  23: 15253442.421 ops/s
# Warmup Iteration  24: 15267598.767 ops/s
# Warmup Iteration  25: 15292293.129 ops/s
# Warmup Iteration  26: 15135615.926 ops/s
# Warmup Iteration  27: 15144788.047 ops/s
# Warmup Iteration  28: 15203975.085 ops/s
# Warmup Iteration  29: 15271729.117 ops/s
# Warmup Iteration  30: 15260066.282 ops/s
Iteration   1: 15244118.084 ops/s
Iteration   2: 15201970.267 ops/s
Iteration   3: 15282698.814 ops/s
Iteration   4: 15140841.633 ops/s
Iteration   5: 14969502.662 ops/s
Iteration   6: 15020928.299 ops/s
Iteration   7: 15053543.326 ops/s
Iteration   8: 15252762.235 ops/s
Iteration   9: 15231897.533 ops/s
Iteration  10: 14862067.564 ops/s
Iteration  11: 15190539.046 ops/s
Iteration  12: 15244014.493 ops/s
Iteration  13: 15039747.874 ops/s
Iteration  14: 15089967.326 ops/s
Iteration  15: 15190009.544 ops/s
Iteration  16: 15138154.921 ops/s
Iteration  17: 15094494.112 ops/s
Iteration  18: 15271239.719 ops/s
Iteration  19: 15203175.217 ops/s
Iteration  20: 15171214.485 ops/s
Iteration  21: 15133697.221 ops/s
Iteration  22: 14582169.760 ops/s
Iteration  23: 15235401.700 ops/s
Iteration  24: 15255626.629 ops/s
Iteration  25: 15061700.787 ops/s
Iteration  26: 15183164.858 ops/s
Iteration  27: 15113918.486 ops/s
Iteration  28: 15032403.190 ops/s
Iteration  29: 14741423.350 ops/s
Iteration  30: 14783885.316 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_each":
  15100542.615 ±(99.9%) 113013.758 ops/s [Average]
  (min, avg, max) = (14582169.760, 15100542.615, 15282698.814), stdev = 169153.686
  CI (99.9%): [14987528.857, 15213556.373] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_each  thrpt   30  15100542.615 ± 113013.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29960.560 ops/s
# Warmup Iteration   2: 41789.534 ops/s
# Warmup Iteration   3: 59896.200 ops/s
# Warmup Iteration   4: 60253.706 ops/s
# Warmup Iteration   5: 59871.368 ops/s
# Warmup Iteration   6: 60183.425 ops/s
# Warmup Iteration   7: 59398.216 ops/s
# Warmup Iteration   8: 58075.389 ops/s
# Warmup Iteration   9: 53889.605 ops/s
# Warmup Iteration  10: 56594.914 ops/s
# Warmup Iteration  11: 56191.010 ops/s
# Warmup Iteration  12: 60095.550 ops/s
# Warmup Iteration  13: 56486.801 ops/s
# Warmup Iteration  14: 56833.303 ops/s
# Warmup Iteration  15: 55701.923 ops/s
# Warmup Iteration  16: 58192.831 ops/s
# Warmup Iteration  17: 55993.741 ops/s
# Warmup Iteration  18: 56351.233 ops/s
# Warmup Iteration  19: 57232.692 ops/s
# Warmup Iteration  20: 55446.563 ops/s
# Warmup Iteration  21: 56094.955 ops/s
# Warmup Iteration  22: 56815.302 ops/s
# Warmup Iteration  23: 54543.505 ops/s
# Warmup Iteration  24: 57220.815 ops/s
# Warmup Iteration  25: 58702.012 ops/s
# Warmup Iteration  26: 56439.348 ops/s
# Warmup Iteration  27: 57926.153 ops/s
# Warmup Iteration  28: 58963.162 ops/s
# Warmup Iteration  29: 57404.087 ops/s
# Warmup Iteration  30: 59815.869 ops/s
Iteration   1: 60174.774 ops/s
Iteration   2: 59407.429 ops/s
Iteration   3: 59627.237 ops/s
Iteration   4: 59962.333 ops/s
Iteration   5: 59789.966 ops/s
Iteration   6: 59825.570 ops/s
Iteration   7: 59806.899 ops/s
Iteration   8: 59850.254 ops/s
Iteration   9: 59849.012 ops/s
Iteration  10: 60099.731 ops/s
Iteration  11: 60131.451 ops/s
Iteration  12: 59611.145 ops/s
Iteration  13: 59727.510 ops/s
Iteration  14: 59832.882 ops/s
Iteration  15: 59492.558 ops/s
Iteration  16: 59423.356 ops/s
Iteration  17: 59803.993 ops/s
Iteration  18: 60150.148 ops/s
Iteration  19: 58129.417 ops/s
Iteration  20: 59497.840 ops/s
Iteration  21: 58693.436 ops/s
Iteration  22: 56045.904 ops/s
Iteration  23: 56195.622 ops/s
Iteration  24: 56079.435 ops/s
Iteration  25: 58360.395 ops/s
Iteration  26: 60260.264 ops/s
Iteration  27: 59557.548 ops/s
Iteration  28: 56188.339 ops/s
Iteration  29: 56071.756 ops/s
Iteration  30: 55305.008 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_equalsAndHashCode":
  58898.374 ±(99.9%) 1046.095 ops/s [Average]
  (min, avg, max) = (55305.008, 58898.374, 60260.264), stdev = 1565.746
  CI (99.9%): [57852.279, 59944.469] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt      Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  58898.374 ± 1046.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 936460.711 ops/s
# Warmup Iteration   2: 2214155.673 ops/s
# Warmup Iteration   3: 2234608.966 ops/s
# Warmup Iteration   4: 1858649.071 ops/s
# Warmup Iteration   5: 2232047.080 ops/s
# Warmup Iteration   6: 2222397.608 ops/s
# Warmup Iteration   7: 2228086.905 ops/s
# Warmup Iteration   8: 2230150.579 ops/s
# Warmup Iteration   9: 2219040.546 ops/s
# Warmup Iteration  10: 2207490.495 ops/s
# Warmup Iteration  11: 2199393.124 ops/s
# Warmup Iteration  12: 2221264.886 ops/s
# Warmup Iteration  13: 2223161.383 ops/s
# Warmup Iteration  14: 2208570.315 ops/s
# Warmup Iteration  15: 2195086.215 ops/s
# Warmup Iteration  16: 2178464.871 ops/s
# Warmup Iteration  17: 2193907.697 ops/s
# Warmup Iteration  18: 2212807.230 ops/s
# Warmup Iteration  19: 2203352.946 ops/s
# Warmup Iteration  20: 2182993.343 ops/s
# Warmup Iteration  21: 2214171.156 ops/s
# Warmup Iteration  22: 2205645.833 ops/s
# Warmup Iteration  23: 2162620.935 ops/s
# Warmup Iteration  24: 2191639.083 ops/s
# Warmup Iteration  25: 2175406.911 ops/s
# Warmup Iteration  26: 2202584.928 ops/s
# Warmup Iteration  27: 2193008.271 ops/s
# Warmup Iteration  28: 2192293.843 ops/s
# Warmup Iteration  29: 2238434.939 ops/s
# Warmup Iteration  30: 2165755.717 ops/s
Iteration   1: 2149577.370 ops/s
Iteration   2: 2219776.326 ops/s
Iteration   3: 2214151.811 ops/s
Iteration   4: 2177637.668 ops/s
Iteration   5: 2189341.584 ops/s
Iteration   6: 2225357.912 ops/s
Iteration   7: 2161099.829 ops/s
Iteration   8: 2153197.667 ops/s
Iteration   9: 2197904.008 ops/s
Iteration  10: 2127082.231 ops/s
Iteration  11: 2174584.748 ops/s
Iteration  12: 2197690.375 ops/s
Iteration  13: 2200087.599 ops/s
Iteration  14: 2172136.085 ops/s
Iteration  15: 2178895.366 ops/s
Iteration  16: 2169303.298 ops/s
Iteration  17: 2200375.375 ops/s
Iteration  18: 2201863.821 ops/s
Iteration  19: 2216287.632 ops/s
Iteration  20: 2190082.915 ops/s
Iteration  21: 2193243.517 ops/s
Iteration  22: 2207456.906 ops/s
Iteration  23: 2226644.802 ops/s
Iteration  24: 2201880.315 ops/s
Iteration  25: 2213639.751 ops/s
Iteration  26: 2178448.213 ops/s
Iteration  27: 2174434.678 ops/s
Iteration  28: 2225522.774 ops/s
Iteration  29: 2239292.404 ops/s
Iteration  30: 2231754.712 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_flatCollect":
  2193625.056 ±(99.9%) 17850.568 ops/s [Average]
  (min, avg, max) = (2127082.231, 2193625.056, 2239292.404), stdev = 26717.891
  CI (99.9%): [2175774.489, 2211475.624] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_flatCollect  thrpt   30  2193625.056 ± 17850.568  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 933617.397 ops/s
# Warmup Iteration   2: 2331505.390 ops/s
# Warmup Iteration   3: 2297101.935 ops/s
# Warmup Iteration   4: 1887383.804 ops/s
# Warmup Iteration   5: 2258333.429 ops/s
# Warmup Iteration   6: 2293866.768 ops/s
# Warmup Iteration   7: 2294849.289 ops/s
# Warmup Iteration   8: 2300120.920 ops/s
# Warmup Iteration   9: 2279503.026 ops/s
# Warmup Iteration  10: 2266316.224 ops/s
# Warmup Iteration  11: 2290220.344 ops/s
# Warmup Iteration  12: 2296415.719 ops/s
# Warmup Iteration  13: 2280478.751 ops/s
# Warmup Iteration  14: 2324912.117 ops/s
# Warmup Iteration  15: 2336385.086 ops/s
# Warmup Iteration  16: 2343560.908 ops/s
# Warmup Iteration  17: 2284409.809 ops/s
# Warmup Iteration  18: 2300679.198 ops/s
# Warmup Iteration  19: 2293210.391 ops/s
# Warmup Iteration  20: 2296334.091 ops/s
# Warmup Iteration  21: 2302158.253 ops/s
# Warmup Iteration  22: 2276478.426 ops/s
# Warmup Iteration  23: 2284560.938 ops/s
# Warmup Iteration  24: 2329900.513 ops/s
# Warmup Iteration  25: 2332311.962 ops/s
# Warmup Iteration  26: 2336247.048 ops/s
# Warmup Iteration  27: 2326034.220 ops/s
# Warmup Iteration  28: 2311435.765 ops/s
# Warmup Iteration  29: 2260067.973 ops/s
# Warmup Iteration  30: 2337973.150 ops/s
Iteration   1: 2327158.488 ops/s
Iteration   2: 2302621.365 ops/s
Iteration   3: 2248308.342 ops/s
Iteration   4: 2302866.649 ops/s
Iteration   5: 2262535.495 ops/s
Iteration   6: 2288084.157 ops/s
Iteration   7: 2305670.794 ops/s
Iteration   8: 2273198.063 ops/s
Iteration   9: 2313017.601 ops/s
Iteration  10: 2303403.794 ops/s
Iteration  11: 2268359.669 ops/s
Iteration  12: 2333058.580 ops/s
Iteration  13: 2267837.567 ops/s
Iteration  14: 2285728.724 ops/s
Iteration  15: 2297783.447 ops/s
Iteration  16: 2302265.537 ops/s
Iteration  17: 2318429.180 ops/s
Iteration  18: 2333032.713 ops/s
Iteration  19: 2309672.656 ops/s
Iteration  20: 2342889.869 ops/s
Iteration  21: 2341214.329 ops/s
Iteration  22: 2343586.353 ops/s
Iteration  23: 2341272.048 ops/s
Iteration  24: 2348196.499 ops/s
Iteration  25: 2346306.043 ops/s
Iteration  26: 2342501.762 ops/s
Iteration  27: 2343664.679 ops/s
Iteration  28: 2349350.710 ops/s
Iteration  29: 2335237.500 ops/s
Iteration  30: 2290851.705 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_flatCollectWith":
  2312270.144 ±(99.9%) 19747.049 ops/s [Average]
  (min, avg, max) = (2248308.342, 2312270.144, 2349350.710), stdev = 29556.455
  CI (99.9%): [2292523.095, 2332017.193] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  2312270.144 ± 19747.049  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1376012.713 ops/s
# Warmup Iteration   2: 3382102.980 ops/s
# Warmup Iteration   3: 3408104.958 ops/s
# Warmup Iteration   4: 2786739.916 ops/s
# Warmup Iteration   5: 3373484.334 ops/s
# Warmup Iteration   6: 3371037.202 ops/s
# Warmup Iteration   7: 3412245.277 ops/s
# Warmup Iteration   8: 3390460.504 ops/s
# Warmup Iteration   9: 3377480.951 ops/s
# Warmup Iteration  10: 3437212.502 ops/s
# Warmup Iteration  11: 3394756.204 ops/s
# Warmup Iteration  12: 3390041.750 ops/s
# Warmup Iteration  13: 3426443.877 ops/s
# Warmup Iteration  14: 3385005.465 ops/s
# Warmup Iteration  15: 3378382.774 ops/s
# Warmup Iteration  16: 3464958.220 ops/s
# Warmup Iteration  17: 3402196.999 ops/s
# Warmup Iteration  18: 3365724.886 ops/s
# Warmup Iteration  19: 3385531.429 ops/s
# Warmup Iteration  20: 3369587.976 ops/s
# Warmup Iteration  21: 3421747.406 ops/s
# Warmup Iteration  22: 3402690.169 ops/s
# Warmup Iteration  23: 3316205.469 ops/s
# Warmup Iteration  24: 3406174.282 ops/s
# Warmup Iteration  25: 3355009.507 ops/s
# Warmup Iteration  26: 3344338.743 ops/s
# Warmup Iteration  27: 3405673.056 ops/s
# Warmup Iteration  28: 3427940.240 ops/s
# Warmup Iteration  29: 3388973.371 ops/s
# Warmup Iteration  30: 3401704.079 ops/s
Iteration   1: 3431181.742 ops/s
Iteration   2: 3453403.907 ops/s
Iteration   3: 3446782.055 ops/s
Iteration   4: 3395820.095 ops/s
Iteration   5: 3443524.533 ops/s
Iteration   6: 3436040.328 ops/s
Iteration   7: 3414730.914 ops/s
Iteration   8: 3402009.096 ops/s
Iteration   9: 3365134.305 ops/s
Iteration  10: 3445007.353 ops/s
Iteration  11: 3401266.981 ops/s
Iteration  12: 3358591.920 ops/s
Iteration  13: 3364995.820 ops/s
Iteration  14: 3362526.418 ops/s
Iteration  15: 3384425.431 ops/s
Iteration  16: 3373107.620 ops/s
Iteration  17: 3367517.697 ops/s
Iteration  18: 3404049.223 ops/s
Iteration  19: 3359160.405 ops/s
Iteration  20: 3392458.066 ops/s
Iteration  21: 3374580.784 ops/s
Iteration  22: 3402755.946 ops/s
Iteration  23: 3438737.665 ops/s
Iteration  24: 3379443.285 ops/s
Iteration  25: 3353436.394 ops/s
Iteration  26: 3359834.429 ops/s
Iteration  27: 3464228.414 ops/s
Iteration  28: 3385326.819 ops/s
Iteration  29: 3409703.221 ops/s
Iteration  30: 3393611.196 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_flatCollectWithTarget":
  3398779.735 ±(99.9%) 22048.416 ops/s [Average]
  (min, avg, max) = (3353436.394, 3398779.735, 3464228.414), stdev = 33001.033
  CI (99.9%): [3376731.320, 3420828.151] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  3398779.735 ± 22048.416  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7058179.962 ops/s
# Warmup Iteration   2: 15503598.211 ops/s
# Warmup Iteration   3: 15692862.346 ops/s
# Warmup Iteration   4: 12956478.792 ops/s
# Warmup Iteration   5: 15784673.863 ops/s
# Warmup Iteration   6: 15613847.796 ops/s
# Warmup Iteration   7: 15658165.110 ops/s
# Warmup Iteration   8: 15527206.483 ops/s
# Warmup Iteration   9: 15632743.841 ops/s
# Warmup Iteration  10: 15592292.860 ops/s
# Warmup Iteration  11: 15775576.729 ops/s
# Warmup Iteration  12: 15613881.544 ops/s
# Warmup Iteration  13: 15579107.331 ops/s
# Warmup Iteration  14: 15942540.995 ops/s
# Warmup Iteration  15: 15735771.984 ops/s
# Warmup Iteration  16: 15659591.384 ops/s
# Warmup Iteration  17: 16092533.447 ops/s
# Warmup Iteration  18: 16086835.702 ops/s
# Warmup Iteration  19: 15632177.810 ops/s
# Warmup Iteration  20: 15677367.635 ops/s
# Warmup Iteration  21: 15535919.935 ops/s
# Warmup Iteration  22: 15799685.334 ops/s
# Warmup Iteration  23: 15843837.364 ops/s
# Warmup Iteration  24: 15682728.086 ops/s
# Warmup Iteration  25: 15718519.174 ops/s
# Warmup Iteration  26: 15570042.528 ops/s
# Warmup Iteration  27: 15596847.844 ops/s
# Warmup Iteration  28: 15563545.860 ops/s
# Warmup Iteration  29: 15835075.705 ops/s
# Warmup Iteration  30: 15633192.024 ops/s
Iteration   1: 15579808.579 ops/s
Iteration   2: 15549897.497 ops/s
Iteration   3: 15920651.801 ops/s
Iteration   4: 15759559.594 ops/s
Iteration   5: 16140359.873 ops/s
Iteration   6: 16185785.210 ops/s
Iteration   7: 15919337.231 ops/s
Iteration   8: 15495074.350 ops/s
Iteration   9: 15585044.920 ops/s
Iteration  10: 15492902.704 ops/s
Iteration  11: 15675274.752 ops/s
Iteration  12: 15571470.346 ops/s
Iteration  13: 15688934.636 ops/s
Iteration  14: 15492641.121 ops/s
Iteration  15: 15779111.640 ops/s
Iteration  16: 15802341.039 ops/s
Iteration  17: 15422265.242 ops/s
Iteration  18: 15720816.580 ops/s
Iteration  19: 15724592.165 ops/s
Iteration  20: 15590825.777 ops/s
Iteration  21: 15521568.432 ops/s
Iteration  22: 15835289.595 ops/s
Iteration  23: 15719726.794 ops/s
Iteration  24: 15746947.633 ops/s
Iteration  25: 16015201.190 ops/s
Iteration  26: 15798518.641 ops/s
Iteration  27: 15686512.820 ops/s
Iteration  28: 15644745.041 ops/s
Iteration  29: 15994597.919 ops/s
Iteration  30: 16108742.367 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEach":
  15738951.516 ±(99.9%) 136233.173 ops/s [Average]
  (min, avg, max) = (15422265.242, 15738951.516, 16185785.210), stdev = 203907.416
  CI (99.9%): [15602718.343, 15875184.690] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_forEach  thrpt   30  15738951.516 ± 136233.173  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 282091.914 ops/s
# Warmup Iteration   2: 298909.641 ops/s
# Warmup Iteration   3: 358310.132 ops/s
# Warmup Iteration   4: 388542.052 ops/s
# Warmup Iteration   5: 378046.930 ops/s
# Warmup Iteration   6: 377156.189 ops/s
# Warmup Iteration   7: 376288.881 ops/s
# Warmup Iteration   8: 380683.112 ops/s
# Warmup Iteration   9: 380913.405 ops/s
# Warmup Iteration  10: 382918.720 ops/s
# Warmup Iteration  11: 378393.625 ops/s
# Warmup Iteration  12: 379440.833 ops/s
# Warmup Iteration  13: 376428.785 ops/s
# Warmup Iteration  14: 348413.683 ops/s
# Warmup Iteration  15: 359694.494 ops/s
# Warmup Iteration  16: 378943.793 ops/s
# Warmup Iteration  17: 402994.982 ops/s
# Warmup Iteration  18: 398674.697 ops/s
# Warmup Iteration  19: 398441.740 ops/s
# Warmup Iteration  20: 406997.247 ops/s
# Warmup Iteration  21: 400793.657 ops/s
# Warmup Iteration  22: 402219.137 ops/s
# Warmup Iteration  23: 398406.281 ops/s
# Warmup Iteration  24: 400021.848 ops/s
# Warmup Iteration  25: 394439.204 ops/s
# Warmup Iteration  26: 397029.912 ops/s
# Warmup Iteration  27: 396919.905 ops/s
# Warmup Iteration  28: 396349.896 ops/s
# Warmup Iteration  29: 402535.458 ops/s
# Warmup Iteration  30: 400115.725 ops/s
Iteration   1: 410426.618 ops/s
Iteration   2: 397702.268 ops/s
Iteration   3: 395900.185 ops/s
Iteration   4: 395568.838 ops/s
Iteration   5: 398232.841 ops/s
Iteration   6: 404499.951 ops/s
Iteration   7: 401596.385 ops/s
Iteration   8: 400448.212 ops/s
Iteration   9: 407857.824 ops/s
Iteration  10: 395257.956 ops/s
Iteration  11: 409809.119 ops/s
Iteration  12: 410530.358 ops/s
Iteration  13: 393643.092 ops/s
Iteration  14: 398057.521 ops/s
Iteration  15: 399822.789 ops/s
Iteration  16: 408038.623 ops/s
Iteration  17: 409881.363 ops/s
Iteration  18: 406429.613 ops/s
Iteration  19: 408777.290 ops/s
Iteration  20: 397526.369 ops/s
Iteration  21: 409383.651 ops/s
Iteration  22: 403061.016 ops/s
Iteration  23: 392984.960 ops/s
Iteration  24: 398242.981 ops/s
Iteration  25: 394611.125 ops/s
Iteration  26: 401479.496 ops/s
Iteration  27: 404392.187 ops/s
Iteration  28: 399729.516 ops/s
Iteration  29: 406013.615 ops/s
Iteration  30: 401800.878 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEachFromTo":
  402056.888 ±(99.9%) 3746.019 ops/s [Average]
  (min, avg, max) = (392984.960, 402056.888, 410530.358), stdev = 5606.866
  CI (99.9%): [398310.869, 405802.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  402056.888 ± 3746.019  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9833595.820 ops/s
# Warmup Iteration   2: 17219434.871 ops/s
# Warmup Iteration   3: 18381947.737 ops/s
# Warmup Iteration   4: 18429297.428 ops/s
# Warmup Iteration   5: 16240657.132 ops/s
# Warmup Iteration   6: 18337505.459 ops/s
# Warmup Iteration   7: 18443422.928 ops/s
# Warmup Iteration   8: 18450550.643 ops/s
# Warmup Iteration   9: 18290266.532 ops/s
# Warmup Iteration  10: 18289044.900 ops/s
# Warmup Iteration  11: 18370342.956 ops/s
# Warmup Iteration  12: 18466850.416 ops/s
# Warmup Iteration  13: 18776151.627 ops/s
# Warmup Iteration  14: 18526941.389 ops/s
# Warmup Iteration  15: 18507506.541 ops/s
# Warmup Iteration  16: 18793150.426 ops/s
# Warmup Iteration  17: 18520718.986 ops/s
# Warmup Iteration  18: 18190489.199 ops/s
# Warmup Iteration  19: 18398807.130 ops/s
# Warmup Iteration  20: 18725927.680 ops/s
# Warmup Iteration  21: 18491053.132 ops/s
# Warmup Iteration  22: 18888996.945 ops/s
# Warmup Iteration  23: 18619587.290 ops/s
# Warmup Iteration  24: 18563340.118 ops/s
# Warmup Iteration  25: 18641324.744 ops/s
# Warmup Iteration  26: 18356925.168 ops/s
# Warmup Iteration  27: 18424490.550 ops/s
# Warmup Iteration  28: 18616195.432 ops/s
# Warmup Iteration  29: 18827659.002 ops/s
# Warmup Iteration  30: 18381468.532 ops/s
Iteration   1: 18644314.419 ops/s
Iteration   2: 18861264.195 ops/s
Iteration   3: 18961080.774 ops/s
Iteration   4: 18540725.038 ops/s
Iteration   5: 18479727.230 ops/s
Iteration   6: 18508405.265 ops/s
Iteration   7: 18560100.184 ops/s
Iteration   8: 18608262.789 ops/s
Iteration   9: 18370347.993 ops/s
Iteration  10: 18549958.792 ops/s
Iteration  11: 19007349.065 ops/s
Iteration  12: 19036422.460 ops/s
Iteration  13: 18904519.736 ops/s
Iteration  14: 19021131.356 ops/s
Iteration  15: 18699957.788 ops/s
Iteration  16: 18471661.024 ops/s
Iteration  17: 18488920.416 ops/s
Iteration  18: 18353423.161 ops/s
Iteration  19: 18600267.430 ops/s
Iteration  20: 18459346.839 ops/s
Iteration  21: 18470638.250 ops/s
Iteration  22: 18404855.103 ops/s
Iteration  23: 18631529.388 ops/s
Iteration  24: 18463555.849 ops/s
Iteration  25: 18640120.708 ops/s
Iteration  26: 18228448.341 ops/s
Iteration  27: 18598171.148 ops/s
Iteration  28: 18292517.664 ops/s
Iteration  29: 18653823.763 ops/s
Iteration  30: 18508366.716 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEachWith":
  18600640.429 ±(99.9%) 144132.820 ops/s [Average]
  (min, avg, max) = (18228448.341, 18600640.429, 19036422.460), stdev = 215731.236
  CI (99.9%): [18456507.610, 18744773.249] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_forEachWith  thrpt   30  18600640.429 ± 144132.820  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6874278.204 ops/s
# Warmup Iteration   2: 15153948.288 ops/s
# Warmup Iteration   3: 15692313.198 ops/s
# Warmup Iteration   4: 13040921.691 ops/s
# Warmup Iteration   5: 15239064.606 ops/s
# Warmup Iteration   6: 15444382.175 ops/s
# Warmup Iteration   7: 15681811.780 ops/s
# Warmup Iteration   8: 15596708.958 ops/s
# Warmup Iteration   9: 15419701.839 ops/s
# Warmup Iteration  10: 15070488.239 ops/s
# Warmup Iteration  11: 15169512.668 ops/s
# Warmup Iteration  12: 15451215.975 ops/s
# Warmup Iteration  13: 15511709.470 ops/s
# Warmup Iteration  14: 15487263.790 ops/s
# Warmup Iteration  15: 15723308.412 ops/s
# Warmup Iteration  16: 15400136.225 ops/s
# Warmup Iteration  17: 15423972.672 ops/s
# Warmup Iteration  18: 15472860.091 ops/s
# Warmup Iteration  19: 15507112.405 ops/s
# Warmup Iteration  20: 15454681.179 ops/s
# Warmup Iteration  21: 15330051.482 ops/s
# Warmup Iteration  22: 15487510.956 ops/s
# Warmup Iteration  23: 15601070.096 ops/s
# Warmup Iteration  24: 15250136.512 ops/s
# Warmup Iteration  25: 15275712.711 ops/s
# Warmup Iteration  26: 15169289.034 ops/s
# Warmup Iteration  27: 15405446.975 ops/s
# Warmup Iteration  28: 15278580.376 ops/s
# Warmup Iteration  29: 15565742.382 ops/s
# Warmup Iteration  30: 15344210.949 ops/s
Iteration   1: 15611307.757 ops/s
Iteration   2: 15221656.949 ops/s
Iteration   3: 15159679.033 ops/s
Iteration   4: 15345679.084 ops/s
Iteration   5: 15542577.010 ops/s
Iteration   6: 15306203.865 ops/s
Iteration   7: 15672433.219 ops/s
Iteration   8: 15520779.277 ops/s
Iteration   9: 15373947.947 ops/s
Iteration  10: 15700327.843 ops/s
Iteration  11: 15497838.492 ops/s
Iteration  12: 15443637.976 ops/s
Iteration  13: 15519847.839 ops/s
Iteration  14: 15163850.695 ops/s
Iteration  15: 15281762.086 ops/s
Iteration  16: 15380696.989 ops/s
Iteration  17: 15747363.700 ops/s
Iteration  18: 15438365.709 ops/s
Iteration  19: 15451333.785 ops/s
Iteration  20: 15101153.271 ops/s
Iteration  21: 15194173.471 ops/s
Iteration  22: 15223949.116 ops/s
Iteration  23: 15224523.889 ops/s
Iteration  24: 15277847.532 ops/s
Iteration  25: 15300758.590 ops/s
Iteration  26: 15352619.455 ops/s
Iteration  27: 15440206.771 ops/s
Iteration  28: 15554852.364 ops/s
Iteration  29: 15398642.837 ops/s
Iteration  30: 15427979.329 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEachWithIndex":
  15395866.529 ±(99.9%) 111868.366 ops/s [Average]
  (min, avg, max) = (15101153.271, 15395866.529, 15747363.700), stdev = 167439.316
  CI (99.9%): [15283998.163, 15507734.895] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  15395866.529 ± 111868.366  ops/s
----------------------------------------
