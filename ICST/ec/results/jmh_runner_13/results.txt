=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1100355.570 ops/s
# Warmup Iteration   2: 2360874.645 ops/s
# Warmup Iteration   3: 2054709.201 ops/s
# Warmup Iteration   4: 2409037.632 ops/s
# Warmup Iteration   5: 2428336.767 ops/s
# Warmup Iteration   6: 2411655.976 ops/s
# Warmup Iteration   7: 2416139.853 ops/s
# Warmup Iteration   8: 2445391.523 ops/s
# Warmup Iteration   9: 2422511.785 ops/s
# Warmup Iteration  10: 2434392.854 ops/s
# Warmup Iteration  11: 2406493.848 ops/s
# Warmup Iteration  12: 2412242.145 ops/s
# Warmup Iteration  13: 2396635.533 ops/s
# Warmup Iteration  14: 2421032.879 ops/s
# Warmup Iteration  15: 2417377.388 ops/s
# Warmup Iteration  16: 2423690.323 ops/s
# Warmup Iteration  17: 2435013.234 ops/s
# Warmup Iteration  18: 2403419.528 ops/s
# Warmup Iteration  19: 2416766.914 ops/s
# Warmup Iteration  20: 2441598.052 ops/s
# Warmup Iteration  21: 2403576.957 ops/s
# Warmup Iteration  22: 2408694.378 ops/s
# Warmup Iteration  23: 2412503.990 ops/s
# Warmup Iteration  24: 2411356.565 ops/s
# Warmup Iteration  25: 2423186.618 ops/s
# Warmup Iteration  26: 2418563.124 ops/s
# Warmup Iteration  27: 2430356.648 ops/s
# Warmup Iteration  28: 2413293.959 ops/s
# Warmup Iteration  29: 2405886.629 ops/s
# Warmup Iteration  30: 2412947.061 ops/s
Iteration   1: 2437668.956 ops/s
Iteration   2: 2408923.439 ops/s
Iteration   3: 2448762.368 ops/s
Iteration   4: 2438371.756 ops/s
Iteration   5: 2400127.287 ops/s
Iteration   6: 2419020.799 ops/s
Iteration   7: 2437573.116 ops/s
Iteration   8: 2440606.085 ops/s
Iteration   9: 2443687.320 ops/s
Iteration  10: 2424949.026 ops/s
Iteration  11: 2416550.796 ops/s
Iteration  12: 2432572.684 ops/s
Iteration  13: 2430649.916 ops/s
Iteration  14: 2387150.386 ops/s
Iteration  15: 2431343.717 ops/s
Iteration  16: 2429221.559 ops/s
Iteration  17: 2408794.335 ops/s
Iteration  18: 2413104.644 ops/s
Iteration  19: 2423671.891 ops/s
Iteration  20: 2399317.369 ops/s
Iteration  21: 2400322.381 ops/s
Iteration  22: 2351554.995 ops/s
Iteration  23: 2435321.577 ops/s
Iteration  24: 2423648.265 ops/s
Iteration  25: 2397260.848 ops/s
Iteration  26: 2386263.219 ops/s
Iteration  27: 2429678.733 ops/s
Iteration  28: 2433941.422 ops/s
Iteration  29: 2430631.221 ops/s
Iteration  30: 2445107.380 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectIf":
  2420193.250 ±(99.9%) 14420.809 ops/s [Average]
  (min, avg, max) = (2351554.995, 2420193.250, 2448762.368), stdev = 21584.390
  CI (99.9%): [2405772.440, 2434614.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectIf  thrpt   30  2420193.250 ± 14420.809  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 588484.975 ops/s
# Warmup Iteration   2: 1371923.140 ops/s
# Warmup Iteration   3: 1390291.204 ops/s
# Warmup Iteration   4: 1173882.006 ops/s
# Warmup Iteration   5: 1381525.000 ops/s
# Warmup Iteration   6: 1383832.884 ops/s
# Warmup Iteration   7: 1397090.186 ops/s
# Warmup Iteration   8: 1378171.289 ops/s
# Warmup Iteration   9: 1378726.901 ops/s
# Warmup Iteration  10: 1382559.202 ops/s
# Warmup Iteration  11: 1383605.241 ops/s
# Warmup Iteration  12: 1383850.607 ops/s
# Warmup Iteration  13: 1390296.081 ops/s
# Warmup Iteration  14: 1388101.435 ops/s
# Warmup Iteration  15: 1389763.694 ops/s
# Warmup Iteration  16: 1383284.017 ops/s
# Warmup Iteration  17: 1395931.697 ops/s
# Warmup Iteration  18: 1392880.263 ops/s
# Warmup Iteration  19: 1393417.845 ops/s
# Warmup Iteration  20: 1384076.706 ops/s
# Warmup Iteration  21: 1380951.654 ops/s
# Warmup Iteration  22: 1397837.702 ops/s
# Warmup Iteration  23: 1393544.227 ops/s
# Warmup Iteration  24: 1394937.100 ops/s
# Warmup Iteration  25: 1390280.395 ops/s
# Warmup Iteration  26: 1387729.992 ops/s
# Warmup Iteration  27: 1397731.018 ops/s
# Warmup Iteration  28: 1397088.042 ops/s
# Warmup Iteration  29: 1391102.808 ops/s
# Warmup Iteration  30: 1386424.174 ops/s
Iteration   1: 1392590.979 ops/s
Iteration   2: 1398422.114 ops/s
Iteration   3: 1404298.260 ops/s
Iteration   4: 1382888.208 ops/s
Iteration   5: 1390965.011 ops/s
Iteration   6: 1379297.540 ops/s
Iteration   7: 1375714.535 ops/s
Iteration   8: 1362066.128 ops/s
Iteration   9: 1402460.814 ops/s
Iteration  10: 1396732.176 ops/s
Iteration  11: 1399269.372 ops/s
Iteration  12: 1384711.527 ops/s
Iteration  13: 1402345.431 ops/s
Iteration  14: 1399704.808 ops/s
Iteration  15: 1388655.702 ops/s
Iteration  16: 1384093.913 ops/s
Iteration  17: 1365140.542 ops/s
Iteration  18: 1401119.940 ops/s
Iteration  19: 1378718.816 ops/s
Iteration  20: 1400740.216 ops/s
Iteration  21: 1398168.811 ops/s
Iteration  22: 1401286.096 ops/s
Iteration  23: 1386881.047 ops/s
Iteration  24: 1399946.800 ops/s
Iteration  25: 1384677.765 ops/s
Iteration  26: 1399868.021 ops/s
Iteration  27: 1390803.584 ops/s
Iteration  28: 1376542.686 ops/s
Iteration  29: 1392856.371 ops/s
Iteration  30: 1395119.097 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectInt":
  1390536.210 ±(99.9%) 7495.956 ops/s [Average]
  (min, avg, max) = (1362066.128, 1390536.210, 1404298.260), stdev = 11219.596
  CI (99.9%): [1383040.254, 1398032.167] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectInt  thrpt   30  1390536.210 ± 7495.956  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1943998.786 ops/s
# Warmup Iteration   2: 4573417.517 ops/s
# Warmup Iteration   3: 3804692.907 ops/s
# Warmup Iteration   4: 4593972.545 ops/s
# Warmup Iteration   5: 4558405.934 ops/s
# Warmup Iteration   6: 4587492.006 ops/s
# Warmup Iteration   7: 4564230.116 ops/s
# Warmup Iteration   8: 4620511.663 ops/s
# Warmup Iteration   9: 4620040.744 ops/s
# Warmup Iteration  10: 4585768.491 ops/s
# Warmup Iteration  11: 4610505.890 ops/s
# Warmup Iteration  12: 4605448.283 ops/s
# Warmup Iteration  13: 4624249.753 ops/s
# Warmup Iteration  14: 4599432.503 ops/s
# Warmup Iteration  15: 4613240.161 ops/s
# Warmup Iteration  16: 4626851.870 ops/s
# Warmup Iteration  17: 4626666.374 ops/s
# Warmup Iteration  18: 4601087.378 ops/s
# Warmup Iteration  19: 4572041.297 ops/s
# Warmup Iteration  20: 4626535.237 ops/s
# Warmup Iteration  21: 4603373.993 ops/s
# Warmup Iteration  22: 4639730.344 ops/s
# Warmup Iteration  23: 4637766.332 ops/s
# Warmup Iteration  24: 4603661.332 ops/s
# Warmup Iteration  25: 4617081.407 ops/s
# Warmup Iteration  26: 4606588.881 ops/s
# Warmup Iteration  27: 4599481.729 ops/s
# Warmup Iteration  28: 4601713.106 ops/s
# Warmup Iteration  29: 4605218.856 ops/s
# Warmup Iteration  30: 4608506.386 ops/s
Iteration   1: 4620982.215 ops/s
Iteration   2: 4631527.416 ops/s
Iteration   3: 4582859.076 ops/s
Iteration   4: 4612674.845 ops/s
Iteration   5: 4606602.405 ops/s
Iteration   6: 4609067.877 ops/s
Iteration   7: 4639563.191 ops/s
Iteration   8: 4617773.132 ops/s
Iteration   9: 4603871.466 ops/s
Iteration  10: 4546564.927 ops/s
Iteration  11: 4644793.577 ops/s
Iteration  12: 4527089.735 ops/s
Iteration  13: 4587614.158 ops/s
Iteration  14: 4599211.946 ops/s
Iteration  15: 4588591.448 ops/s
Iteration  16: 4565827.154 ops/s
Iteration  17: 4586487.188 ops/s
Iteration  18: 4562894.286 ops/s
Iteration  19: 4614382.134 ops/s
Iteration  20: 4619026.966 ops/s
Iteration  21: 4573158.489 ops/s
Iteration  22: 4624722.484 ops/s
Iteration  23: 4619682.213 ops/s
Iteration  24: 4530905.073 ops/s
Iteration  25: 4576108.526 ops/s
Iteration  26: 4576967.790 ops/s
Iteration  27: 4596094.546 ops/s
Iteration  28: 4592518.920 ops/s
Iteration  29: 4611922.869 ops/s
Iteration  30: 4609587.369 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithBagTarget":
  4595969.114 ±(99.9%) 19648.176 ops/s [Average]
  (min, avg, max) = (4527089.735, 4595969.114, 4644793.577), stdev = 29408.468
  CI (99.9%): [4576320.938, 4615617.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  4595969.114 ± 19648.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1452364.652 ops/s
# Warmup Iteration   2: 3644290.978 ops/s
# Warmup Iteration   3: 3046248.476 ops/s
# Warmup Iteration   4: 3681808.290 ops/s
# Warmup Iteration   5: 3657256.622 ops/s
# Warmup Iteration   6: 3657961.863 ops/s
# Warmup Iteration   7: 3634836.516 ops/s
# Warmup Iteration   8: 3691661.428 ops/s
# Warmup Iteration   9: 3667883.334 ops/s
# Warmup Iteration  10: 3632201.297 ops/s
# Warmup Iteration  11: 3670494.160 ops/s
# Warmup Iteration  12: 3683445.192 ops/s
# Warmup Iteration  13: 3624885.248 ops/s
# Warmup Iteration  14: 3682211.402 ops/s
# Warmup Iteration  15: 3688798.278 ops/s
# Warmup Iteration  16: 3677473.679 ops/s
# Warmup Iteration  17: 3664100.127 ops/s
# Warmup Iteration  18: 3675890.904 ops/s
# Warmup Iteration  19: 3672503.556 ops/s
# Warmup Iteration  20: 3665916.634 ops/s
# Warmup Iteration  21: 3617641.627 ops/s
# Warmup Iteration  22: 3685133.552 ops/s
# Warmup Iteration  23: 3652259.601 ops/s
# Warmup Iteration  24: 3678867.322 ops/s
# Warmup Iteration  25: 3663649.331 ops/s
# Warmup Iteration  26: 3675883.015 ops/s
# Warmup Iteration  27: 3671339.081 ops/s
# Warmup Iteration  28: 3695335.528 ops/s
# Warmup Iteration  29: 3667940.415 ops/s
# Warmup Iteration  30: 3680088.406 ops/s
Iteration   1: 3678834.638 ops/s
Iteration   2: 3676401.506 ops/s
Iteration   3: 3672411.779 ops/s
Iteration   4: 3694093.891 ops/s
Iteration   5: 3628352.557 ops/s
Iteration   6: 3685468.279 ops/s
Iteration   7: 3684113.292 ops/s
Iteration   8: 3657197.664 ops/s
Iteration   9: 3656213.397 ops/s
Iteration  10: 3674126.574 ops/s
Iteration  11: 3670083.322 ops/s
Iteration  12: 3688980.629 ops/s
Iteration  13: 3679139.593 ops/s
Iteration  14: 3657209.927 ops/s
Iteration  15: 3589281.181 ops/s
Iteration  16: 3687429.278 ops/s
Iteration  17: 3669287.206 ops/s
Iteration  18: 3692041.868 ops/s
Iteration  19: 3666152.084 ops/s
Iteration  20: 3618793.225 ops/s
Iteration  21: 3679831.830 ops/s
Iteration  22: 3683659.624 ops/s
Iteration  23: 3675356.042 ops/s
Iteration  24: 3682119.687 ops/s
Iteration  25: 3675418.456 ops/s
Iteration  26: 3688690.628 ops/s
Iteration  27: 3637577.473 ops/s
Iteration  28: 3688946.502 ops/s
Iteration  29: 3685055.378 ops/s
Iteration  30: 3685129.257 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithTarget":
  3670246.559 ±(99.9%) 15936.863 ops/s [Average]
  (min, avg, max) = (3589281.181, 3670246.559, 3694093.891), stdev = 23853.548
  CI (99.9%): [3654309.696, 3686183.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  3670246.559 ± 15936.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 554521.217 ops/s
# Warmup Iteration   2: 1229800.995 ops/s
# Warmup Iteration   3: 1236097.084 ops/s
# Warmup Iteration   4: 1051806.139 ops/s
# Warmup Iteration   5: 1223441.546 ops/s
# Warmup Iteration   6: 1237547.356 ops/s
# Warmup Iteration   7: 1233912.035 ops/s
# Warmup Iteration   8: 1231319.878 ops/s
# Warmup Iteration   9: 1236400.551 ops/s
# Warmup Iteration  10: 1234610.731 ops/s
# Warmup Iteration  11: 1235454.736 ops/s
# Warmup Iteration  12: 1238896.827 ops/s
# Warmup Iteration  13: 1226315.825 ops/s
# Warmup Iteration  14: 1233556.120 ops/s
# Warmup Iteration  15: 1227708.823 ops/s
# Warmup Iteration  16: 1241247.816 ops/s
# Warmup Iteration  17: 1242338.594 ops/s
# Warmup Iteration  18: 1224544.697 ops/s
# Warmup Iteration  19: 1228367.313 ops/s
# Warmup Iteration  20: 1232216.558 ops/s
# Warmup Iteration  21: 1232786.497 ops/s
# Warmup Iteration  22: 1237182.689 ops/s
# Warmup Iteration  23: 1239367.685 ops/s
# Warmup Iteration  24: 1229860.066 ops/s
# Warmup Iteration  25: 1242457.413 ops/s
# Warmup Iteration  26: 1234806.612 ops/s
# Warmup Iteration  27: 1224981.498 ops/s
# Warmup Iteration  28: 1236099.174 ops/s
# Warmup Iteration  29: 1234081.135 ops/s
# Warmup Iteration  30: 1237363.034 ops/s
Iteration   1: 1234353.288 ops/s
Iteration   2: 1228402.346 ops/s
Iteration   3: 1221717.898 ops/s
Iteration   4: 1220096.931 ops/s
Iteration   5: 1224853.481 ops/s
Iteration   6: 1234364.421 ops/s
Iteration   7: 1236796.124 ops/s
Iteration   8: 1218174.261 ops/s
Iteration   9: 1237850.016 ops/s
Iteration  10: 1219677.863 ops/s
Iteration  11: 1210616.584 ops/s
Iteration  12: 1236237.608 ops/s
Iteration  13: 1231555.663 ops/s
Iteration  14: 1214986.405 ops/s
Iteration  15: 1241331.412 ops/s
Iteration  16: 1230794.477 ops/s
Iteration  17: 1241933.829 ops/s
Iteration  18: 1234460.683 ops/s
Iteration  19: 1174419.671 ops/s
Iteration  20: 1239232.384 ops/s
Iteration  21: 1243792.369 ops/s
Iteration  22: 1235182.401 ops/s
Iteration  23: 1239732.631 ops/s
Iteration  24: 1241430.940 ops/s
Iteration  25: 1231927.979 ops/s
Iteration  26: 1241970.836 ops/s
Iteration  27: 1233197.815 ops/s
Iteration  28: 1234776.915 ops/s
Iteration  29: 1238516.478 ops/s
Iteration  30: 1243047.366 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectLong":
  1230514.369 ±(99.9%) 9245.567 ops/s [Average]
  (min, avg, max) = (1174419.671, 1230514.369, 1243792.369), stdev = 13838.331
  CI (99.9%): [1221268.802, 1239759.937] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectLong  thrpt   30  1230514.369 ± 9245.567  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1786371.255 ops/s
# Warmup Iteration   2: 4023198.067 ops/s
# Warmup Iteration   3: 3466956.679 ops/s
# Warmup Iteration   4: 4133172.863 ops/s
# Warmup Iteration   5: 4076871.033 ops/s
# Warmup Iteration   6: 4085322.092 ops/s
# Warmup Iteration   7: 4103979.523 ops/s
# Warmup Iteration   8: 4123535.600 ops/s
# Warmup Iteration   9: 4129247.554 ops/s
# Warmup Iteration  10: 4142129.713 ops/s
# Warmup Iteration  11: 4096905.412 ops/s
# Warmup Iteration  12: 4128767.317 ops/s
# Warmup Iteration  13: 4112535.759 ops/s
# Warmup Iteration  14: 4100304.547 ops/s
# Warmup Iteration  15: 4131580.702 ops/s
# Warmup Iteration  16: 4122161.366 ops/s
# Warmup Iteration  17: 4101293.209 ops/s
# Warmup Iteration  18: 4061019.701 ops/s
# Warmup Iteration  19: 4060808.185 ops/s
# Warmup Iteration  20: 4139803.409 ops/s
# Warmup Iteration  21: 4122370.599 ops/s
# Warmup Iteration  22: 4122136.519 ops/s
# Warmup Iteration  23: 4107224.250 ops/s
# Warmup Iteration  24: 4081218.748 ops/s
# Warmup Iteration  25: 4096429.999 ops/s
# Warmup Iteration  26: 4093411.415 ops/s
# Warmup Iteration  27: 4081402.921 ops/s
# Warmup Iteration  28: 4142513.007 ops/s
# Warmup Iteration  29: 4115501.305 ops/s
# Warmup Iteration  30: 4131268.962 ops/s
Iteration   1: 4105169.136 ops/s
Iteration   2: 4166219.531 ops/s
Iteration   3: 4122500.896 ops/s
Iteration   4: 4125992.553 ops/s
Iteration   5: 4141885.460 ops/s
Iteration   6: 4095368.188 ops/s
Iteration   7: 4052200.322 ops/s
Iteration   8: 4124311.545 ops/s
Iteration   9: 4117671.197 ops/s
Iteration  10: 4133711.613 ops/s
Iteration  11: 4127686.951 ops/s
Iteration  12: 4090826.535 ops/s
Iteration  13: 4128822.261 ops/s
Iteration  14: 4116124.258 ops/s
Iteration  15: 4106271.837 ops/s
Iteration  16: 4114035.264 ops/s
Iteration  17: 4063108.521 ops/s
Iteration  18: 4104606.100 ops/s
Iteration  19: 4076037.643 ops/s
Iteration  20: 4140224.330 ops/s
Iteration  21: 4105552.373 ops/s
Iteration  22: 4130462.819 ops/s
Iteration  23: 4143948.325 ops/s
Iteration  24: 4146709.176 ops/s
Iteration  25: 4145269.158 ops/s
Iteration  26: 4156197.627 ops/s
Iteration  27: 4126365.286 ops/s
Iteration  28: 4103295.957 ops/s
Iteration  29: 4142854.627 ops/s
Iteration  30: 4088667.031 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithBagTarget":
  4118069.884 ±(99.9%) 17807.199 ops/s [Average]
  (min, avg, max) = (4052200.322, 4118069.884, 4166219.531), stdev = 26652.979
  CI (99.9%): [4100262.685, 4135877.083] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  4118069.884 ± 17807.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1349629.662 ops/s
# Warmup Iteration   2: 3353209.233 ops/s
# Warmup Iteration   3: 2786042.013 ops/s
# Warmup Iteration   4: 3330020.907 ops/s
# Warmup Iteration   5: 3369786.190 ops/s
# Warmup Iteration   6: 3370875.402 ops/s
# Warmup Iteration   7: 3383600.732 ops/s
# Warmup Iteration   8: 3335372.556 ops/s
# Warmup Iteration   9: 3346294.162 ops/s
# Warmup Iteration  10: 3367888.594 ops/s
# Warmup Iteration  11: 3379690.205 ops/s
# Warmup Iteration  12: 3372562.246 ops/s
# Warmup Iteration  13: 3352588.436 ops/s
# Warmup Iteration  14: 3381708.520 ops/s
# Warmup Iteration  15: 3393907.339 ops/s
# Warmup Iteration  16: 3402261.802 ops/s
# Warmup Iteration  17: 3392000.371 ops/s
# Warmup Iteration  18: 3362554.716 ops/s
# Warmup Iteration  19: 3377215.968 ops/s
# Warmup Iteration  20: 3357291.592 ops/s
# Warmup Iteration  21: 3334464.324 ops/s
# Warmup Iteration  22: 3377027.537 ops/s
# Warmup Iteration  23: 3356976.744 ops/s
# Warmup Iteration  24: 3371366.380 ops/s
# Warmup Iteration  25: 3388304.766 ops/s
# Warmup Iteration  26: 3382157.405 ops/s
# Warmup Iteration  27: 3384419.154 ops/s
# Warmup Iteration  28: 3398159.731 ops/s
# Warmup Iteration  29: 3388512.552 ops/s
# Warmup Iteration  30: 3377472.694 ops/s
Iteration   1: 3384154.847 ops/s
Iteration   2: 3390666.543 ops/s
Iteration   3: 3364615.464 ops/s
Iteration   4: 3389956.562 ops/s
Iteration   5: 3380725.778 ops/s
Iteration   6: 3391363.339 ops/s
Iteration   7: 3330860.795 ops/s
Iteration   8: 3392267.997 ops/s
Iteration   9: 3380960.168 ops/s
Iteration  10: 3376840.400 ops/s
Iteration  11: 3398062.656 ops/s
Iteration  12: 3383461.911 ops/s
Iteration  13: 3375778.391 ops/s
Iteration  14: 3371222.022 ops/s
Iteration  15: 3376123.959 ops/s
Iteration  16: 3377295.106 ops/s
Iteration  17: 3383296.858 ops/s
Iteration  18: 3389636.311 ops/s
Iteration  19: 3399401.581 ops/s
Iteration  20: 3316489.154 ops/s
Iteration  21: 3371369.957 ops/s
Iteration  22: 3382488.429 ops/s
Iteration  23: 3404922.449 ops/s
Iteration  24: 3352161.670 ops/s
Iteration  25: 3360556.427 ops/s
Iteration  26: 3356089.051 ops/s
Iteration  27: 3341748.494 ops/s
Iteration  28: 3345784.581 ops/s
Iteration  29: 3389885.148 ops/s
Iteration  30: 3365078.073 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithTarget":
  3374108.804 ±(99.9%) 13860.636 ops/s [Average]
  (min, avg, max) = (3316489.154, 3374108.804, 3404922.449), stdev = 20745.949
  CI (99.9%): [3360248.168, 3387969.440] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  3374108.804 ± 13860.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 588492.803 ops/s
# Warmup Iteration   2: 1509878.730 ops/s
# Warmup Iteration   3: 1520252.754 ops/s
# Warmup Iteration   4: 1272611.202 ops/s
# Warmup Iteration   5: 1511942.676 ops/s
# Warmup Iteration   6: 1518494.213 ops/s
# Warmup Iteration   7: 1507040.471 ops/s
# Warmup Iteration   8: 1512212.380 ops/s
# Warmup Iteration   9: 1501832.751 ops/s
# Warmup Iteration  10: 1516736.370 ops/s
# Warmup Iteration  11: 1518110.109 ops/s
# Warmup Iteration  12: 1502505.837 ops/s
# Warmup Iteration  13: 1517920.609 ops/s
# Warmup Iteration  14: 1515002.182 ops/s
# Warmup Iteration  15: 1519815.725 ops/s
# Warmup Iteration  16: 1515050.697 ops/s
# Warmup Iteration  17: 1516618.267 ops/s
# Warmup Iteration  18: 1517916.554 ops/s
# Warmup Iteration  19: 1523443.024 ops/s
# Warmup Iteration  20: 1522545.743 ops/s
# Warmup Iteration  21: 1513229.247 ops/s
# Warmup Iteration  22: 1523052.629 ops/s
# Warmup Iteration  23: 1515921.151 ops/s
# Warmup Iteration  24: 1519337.283 ops/s
# Warmup Iteration  25: 1507706.080 ops/s
# Warmup Iteration  26: 1520555.880 ops/s
# Warmup Iteration  27: 1516291.051 ops/s
# Warmup Iteration  28: 1503246.127 ops/s
# Warmup Iteration  29: 1518418.597 ops/s
# Warmup Iteration  30: 1520323.222 ops/s
Iteration   1: 1526264.630 ops/s
Iteration   2: 1518950.933 ops/s
Iteration   3: 1520311.925 ops/s
Iteration   4: 1485973.394 ops/s
Iteration   5: 1527317.988 ops/s
Iteration   6: 1527215.592 ops/s
Iteration   7: 1523736.320 ops/s
Iteration   8: 1519834.895 ops/s
Iteration   9: 1516490.051 ops/s
Iteration  10: 1517292.999 ops/s
Iteration  11: 1520082.236 ops/s
Iteration  12: 1528034.106 ops/s
Iteration  13: 1525629.754 ops/s
Iteration  14: 1515292.204 ops/s
Iteration  15: 1512967.345 ops/s
Iteration  16: 1497677.917 ops/s
Iteration  17: 1512289.927 ops/s
Iteration  18: 1521100.708 ops/s
Iteration  19: 1518370.094 ops/s
Iteration  20: 1514439.374 ops/s
Iteration  21: 1508168.222 ops/s
Iteration  22: 1483669.834 ops/s
Iteration  23: 1513648.316 ops/s
Iteration  24: 1518768.045 ops/s
Iteration  25: 1514979.506 ops/s
Iteration  26: 1512908.830 ops/s
Iteration  27: 1507571.385 ops/s
Iteration  28: 1520223.973 ops/s
Iteration  29: 1521380.673 ops/s
Iteration  30: 1526776.252 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectShort":
  1515912.248 ±(99.9%) 7208.791 ops/s [Average]
  (min, avg, max) = (1483669.834, 1515912.248, 1528034.106), stdev = 10789.780
  CI (99.9%): [1508703.457, 1523121.039] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectShort  thrpt   30  1515912.248 ± 7208.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2086490.207 ops/s
# Warmup Iteration   2: 4874502.088 ops/s
# Warmup Iteration   3: 4139501.187 ops/s
# Warmup Iteration   4: 4922474.311 ops/s
# Warmup Iteration   5: 4942883.300 ops/s
# Warmup Iteration   6: 4917224.414 ops/s
# Warmup Iteration   7: 4878817.628 ops/s
# Warmup Iteration   8: 4830687.806 ops/s
# Warmup Iteration   9: 4920129.942 ops/s
# Warmup Iteration  10: 4893174.236 ops/s
# Warmup Iteration  11: 4919871.797 ops/s
# Warmup Iteration  12: 4890940.126 ops/s
# Warmup Iteration  13: 4894915.669 ops/s
# Warmup Iteration  14: 4936473.650 ops/s
# Warmup Iteration  15: 4910345.576 ops/s
# Warmup Iteration  16: 4907076.353 ops/s
# Warmup Iteration  17: 4901217.364 ops/s
# Warmup Iteration  18: 4930108.952 ops/s
# Warmup Iteration  19: 4923447.054 ops/s
# Warmup Iteration  20: 4918176.123 ops/s
# Warmup Iteration  21: 4934061.375 ops/s
# Warmup Iteration  22: 4945075.851 ops/s
# Warmup Iteration  23: 4938623.625 ops/s
# Warmup Iteration  24: 4937986.088 ops/s
# Warmup Iteration  25: 4917707.993 ops/s
# Warmup Iteration  26: 4945759.094 ops/s
# Warmup Iteration  27: 4939670.091 ops/s
# Warmup Iteration  28: 4939073.288 ops/s
# Warmup Iteration  29: 4921928.473 ops/s
# Warmup Iteration  30: 4891649.721 ops/s
Iteration   1: 4928631.273 ops/s
Iteration   2: 4944201.126 ops/s
Iteration   3: 4910324.391 ops/s
Iteration   4: 4888774.645 ops/s
Iteration   5: 4946060.817 ops/s
Iteration   6: 4927966.134 ops/s
Iteration   7: 4937239.323 ops/s
Iteration   8: 4900129.110 ops/s
Iteration   9: 4904248.393 ops/s
Iteration  10: 4900434.033 ops/s
Iteration  11: 4948344.638 ops/s
Iteration  12: 4917806.809 ops/s
Iteration  13: 4875449.168 ops/s
Iteration  14: 4874428.768 ops/s
Iteration  15: 4933995.167 ops/s
Iteration  16: 4866325.932 ops/s
Iteration  17: 4936062.472 ops/s
Iteration  18: 4875528.707 ops/s
Iteration  19: 4921421.796 ops/s
Iteration  20: 4897175.455 ops/s
Iteration  21: 4963350.050 ops/s
Iteration  22: 4914716.952 ops/s
Iteration  23: 4948342.304 ops/s
Iteration  24: 4893426.046 ops/s
Iteration  25: 4943455.849 ops/s
Iteration  26: 4941755.172 ops/s
Iteration  27: 4938304.817 ops/s
Iteration  28: 4927174.719 ops/s
Iteration  29: 4947057.162 ops/s
Iteration  30: 4910051.455 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithBagTarget":
  4918739.423 ±(99.9%) 17593.529 ops/s [Average]
  (min, avg, max) = (4866325.932, 4918739.423, 4963350.050), stdev = 26333.168
  CI (99.9%): [4901145.894, 4936332.952] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  4918739.423 ± 17593.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1534558.477 ops/s
# Warmup Iteration   2: 3698422.760 ops/s
# Warmup Iteration   3: 3181255.239 ops/s
# Warmup Iteration   4: 3866191.831 ops/s
# Warmup Iteration   5: 3849767.238 ops/s
# Warmup Iteration   6: 3840335.628 ops/s
# Warmup Iteration   7: 3791137.081 ops/s
# Warmup Iteration   8: 3853977.978 ops/s
# Warmup Iteration   9: 3865941.957 ops/s
# Warmup Iteration  10: 3823017.378 ops/s
# Warmup Iteration  11: 3864936.405 ops/s
# Warmup Iteration  12: 3845045.016 ops/s
# Warmup Iteration  13: 3843748.448 ops/s
# Warmup Iteration  14: 3849288.906 ops/s
# Warmup Iteration  15: 3849516.237 ops/s
# Warmup Iteration  16: 3832406.896 ops/s
# Warmup Iteration  17: 3859493.695 ops/s
# Warmup Iteration  18: 3854039.765 ops/s
# Warmup Iteration  19: 3850080.802 ops/s
# Warmup Iteration  20: 3852202.215 ops/s
# Warmup Iteration  21: 3844617.743 ops/s
# Warmup Iteration  22: 3850296.573 ops/s
# Warmup Iteration  23: 3850579.491 ops/s
# Warmup Iteration  24: 3850843.947 ops/s
# Warmup Iteration  25: 3853090.053 ops/s
# Warmup Iteration  26: 3846752.404 ops/s
# Warmup Iteration  27: 3858671.503 ops/s
# Warmup Iteration  28: 3864171.648 ops/s
# Warmup Iteration  29: 3837020.981 ops/s
# Warmup Iteration  30: 3849657.568 ops/s
Iteration   1: 3810680.242 ops/s
Iteration   2: 3860917.701 ops/s
Iteration   3: 3852044.906 ops/s
Iteration   4: 3869640.843 ops/s
Iteration   5: 3871525.210 ops/s
Iteration   6: 3835765.509 ops/s
Iteration   7: 3883071.861 ops/s
Iteration   8: 3840851.978 ops/s
Iteration   9: 3860823.688 ops/s
Iteration  10: 3858789.628 ops/s
Iteration  11: 3876973.614 ops/s
Iteration  12: 3854881.581 ops/s
Iteration  13: 3853003.533 ops/s
Iteration  14: 3855146.413 ops/s
Iteration  15: 3834483.400 ops/s
Iteration  16: 3858580.234 ops/s
Iteration  17: 3798957.569 ops/s
Iteration  18: 3874364.949 ops/s
Iteration  19: 3841174.514 ops/s
Iteration  20: 3782664.180 ops/s
Iteration  21: 3828770.474 ops/s
Iteration  22: 3843758.801 ops/s
Iteration  23: 3884055.606 ops/s
Iteration  24: 3852232.380 ops/s
Iteration  25: 3849871.929 ops/s
Iteration  26: 3837449.567 ops/s
Iteration  27: 3841987.153 ops/s
Iteration  28: 3831840.222 ops/s
Iteration  29: 3868326.575 ops/s
Iteration  30: 3834924.975 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithTarget":
  3848251.974 ±(99.9%) 15536.760 ops/s [Average]
  (min, avg, max) = (3782664.180, 3848251.974, 3884055.606), stdev = 23254.693
  CI (99.9%): [3832715.214, 3863788.735] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  3848251.974 ± 15536.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 119468.864 ops/s
# Warmup Iteration   2: 247044.043 ops/s
# Warmup Iteration   3: 300983.509 ops/s
# Warmup Iteration   4: 302165.674 ops/s
# Warmup Iteration   5: 301831.232 ops/s
# Warmup Iteration   6: 245612.553 ops/s
# Warmup Iteration   7: 303195.930 ops/s
# Warmup Iteration   8: 301653.711 ops/s
# Warmup Iteration   9: 304861.267 ops/s
# Warmup Iteration  10: 302676.234 ops/s
# Warmup Iteration  11: 302183.751 ops/s
# Warmup Iteration  12: 302997.085 ops/s
# Warmup Iteration  13: 304772.765 ops/s
# Warmup Iteration  14: 303835.002 ops/s
# Warmup Iteration  15: 302791.684 ops/s
# Warmup Iteration  16: 303758.834 ops/s
# Warmup Iteration  17: 298658.537 ops/s
# Warmup Iteration  18: 304393.572 ops/s
# Warmup Iteration  19: 300492.499 ops/s
# Warmup Iteration  20: 304121.376 ops/s
# Warmup Iteration  21: 303711.244 ops/s
# Warmup Iteration  22: 303659.828 ops/s
# Warmup Iteration  23: 301064.758 ops/s
# Warmup Iteration  24: 303482.969 ops/s
# Warmup Iteration  25: 304371.845 ops/s
# Warmup Iteration  26: 304444.969 ops/s
# Warmup Iteration  27: 302843.727 ops/s
# Warmup Iteration  28: 303777.059 ops/s
# Warmup Iteration  29: 303805.614 ops/s
# Warmup Iteration  30: 299908.638 ops/s
Iteration   1: 304297.687 ops/s
Iteration   2: 297135.443 ops/s
Iteration   3: 303535.255 ops/s
Iteration   4: 304655.510 ops/s
Iteration   5: 299682.146 ops/s
Iteration   6: 302477.442 ops/s
Iteration   7: 302999.361 ops/s
Iteration   8: 300709.362 ops/s
Iteration   9: 305778.981 ops/s
Iteration  10: 303812.071 ops/s
Iteration  11: 302284.330 ops/s
Iteration  12: 303897.499 ops/s
Iteration  13: 300190.228 ops/s
Iteration  14: 303104.072 ops/s
Iteration  15: 304065.321 ops/s
Iteration  16: 305897.938 ops/s
Iteration  17: 302827.218 ops/s
Iteration  18: 304923.908 ops/s
Iteration  19: 294444.265 ops/s
Iteration  20: 303230.417 ops/s
Iteration  21: 303569.063 ops/s
Iteration  22: 304977.573 ops/s
Iteration  23: 302634.415 ops/s
Iteration  24: 304582.242 ops/s
Iteration  25: 299467.213 ops/s
Iteration  26: 302121.149 ops/s
Iteration  27: 305095.063 ops/s
Iteration  28: 302831.285 ops/s
Iteration  29: 304423.308 ops/s
Iteration  30: 304596.029 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectTarget":
  302808.193 ±(99.9%) 1700.049 ops/s [Average]
  (min, avg, max) = (294444.265, 302808.193, 305897.938), stdev = 2544.554
  CI (99.9%): [301108.144, 304508.242] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectTarget  thrpt   30  302808.193 ± 1700.049  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 914685.793 ops/s
# Warmup Iteration   2: 1981146.671 ops/s
# Warmup Iteration   3: 2152917.231 ops/s
# Warmup Iteration   4: 2173200.497 ops/s
# Warmup Iteration   5: 1776165.193 ops/s
# Warmup Iteration   6: 2178238.486 ops/s
# Warmup Iteration   7: 2166371.010 ops/s
# Warmup Iteration   8: 2174613.011 ops/s
# Warmup Iteration   9: 2159740.323 ops/s
# Warmup Iteration  10: 2132916.179 ops/s
# Warmup Iteration  11: 2176068.032 ops/s
# Warmup Iteration  12: 2170448.733 ops/s
# Warmup Iteration  13: 2165219.952 ops/s
# Warmup Iteration  14: 2175413.994 ops/s
# Warmup Iteration  15: 2147484.167 ops/s
# Warmup Iteration  16: 2161141.760 ops/s
# Warmup Iteration  17: 2139901.621 ops/s
# Warmup Iteration  18: 2173373.384 ops/s
# Warmup Iteration  19: 2167845.678 ops/s
# Warmup Iteration  20: 2169153.890 ops/s
# Warmup Iteration  21: 2167859.761 ops/s
# Warmup Iteration  22: 2176486.122 ops/s
# Warmup Iteration  23: 2157953.627 ops/s
# Warmup Iteration  24: 2172441.190 ops/s
# Warmup Iteration  25: 2171822.270 ops/s
# Warmup Iteration  26: 2170804.084 ops/s
# Warmup Iteration  27: 2176029.623 ops/s
# Warmup Iteration  28: 2155256.820 ops/s
# Warmup Iteration  29: 2174805.306 ops/s
# Warmup Iteration  30: 2172420.175 ops/s
Iteration   1: 2164346.839 ops/s
Iteration   2: 2169207.337 ops/s
Iteration   3: 2169260.273 ops/s
Iteration   4: 2169472.497 ops/s
Iteration   5: 2178975.916 ops/s
Iteration   6: 2175549.151 ops/s
Iteration   7: 2179503.686 ops/s
Iteration   8: 2166503.624 ops/s
Iteration   9: 2177203.530 ops/s
Iteration  10: 2183432.899 ops/s
Iteration  11: 2176968.777 ops/s
Iteration  12: 2157985.835 ops/s
Iteration  13: 2180276.840 ops/s
Iteration  14: 2164931.191 ops/s
Iteration  15: 2155655.887 ops/s
Iteration  16: 2178695.483 ops/s
Iteration  17: 2179871.041 ops/s
Iteration  18: 2168374.279 ops/s
Iteration  19: 2170185.942 ops/s
Iteration  20: 2167888.060 ops/s
Iteration  21: 2146483.728 ops/s
Iteration  22: 2181301.002 ops/s
Iteration  23: 2142813.086 ops/s
Iteration  24: 2172764.597 ops/s
Iteration  25: 2179815.413 ops/s
Iteration  26: 2180682.513 ops/s
Iteration  27: 2137780.049 ops/s
Iteration  28: 2181330.142 ops/s
Iteration  29: 2171768.601 ops/s
Iteration  30: 2177150.850 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWith":
  2170205.969 ±(99.9%) 7892.792 ops/s [Average]
  (min, avg, max) = (2137780.049, 2170205.969, 2183432.899), stdev = 11813.560
  CI (99.9%): [2162313.177, 2178098.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWith  thrpt   30  2170205.969 ± 7892.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2468934.931 ops/s
# Warmup Iteration   2: 6006091.457 ops/s
# Warmup Iteration   3: 5042586.232 ops/s
# Warmup Iteration   4: 6023875.274 ops/s
# Warmup Iteration   5: 6054294.104 ops/s
# Warmup Iteration   6: 6037174.108 ops/s
# Warmup Iteration   7: 6045904.160 ops/s
# Warmup Iteration   8: 6069595.919 ops/s
# Warmup Iteration   9: 6054695.657 ops/s
# Warmup Iteration  10: 6071010.850 ops/s
# Warmup Iteration  11: 6014037.483 ops/s
# Warmup Iteration  12: 6017452.969 ops/s
# Warmup Iteration  13: 6056974.835 ops/s
# Warmup Iteration  14: 6019927.795 ops/s
# Warmup Iteration  15: 6040506.569 ops/s
# Warmup Iteration  16: 6077855.876 ops/s
# Warmup Iteration  17: 5978470.532 ops/s
# Warmup Iteration  18: 5940011.098 ops/s
# Warmup Iteration  19: 5977346.497 ops/s
# Warmup Iteration  20: 5991272.647 ops/s
# Warmup Iteration  21: 5963584.131 ops/s
# Warmup Iteration  22: 6021690.625 ops/s
# Warmup Iteration  23: 6029577.476 ops/s
# Warmup Iteration  24: 6023026.668 ops/s
# Warmup Iteration  25: 6042104.164 ops/s
# Warmup Iteration  26: 6027572.217 ops/s
# Warmup Iteration  27: 6056321.072 ops/s
# Warmup Iteration  28: 6013986.383 ops/s
# Warmup Iteration  29: 6034685.870 ops/s
# Warmup Iteration  30: 5984166.591 ops/s
Iteration   1: 5969955.966 ops/s
Iteration   2: 6034857.436 ops/s
Iteration   3: 6013922.321 ops/s
Iteration   4: 6035211.629 ops/s
Iteration   5: 6039613.540 ops/s
Iteration   6: 6052876.320 ops/s
Iteration   7: 6003924.393 ops/s
Iteration   8: 6065969.722 ops/s
Iteration   9: 6049444.236 ops/s
Iteration  10: 6017918.724 ops/s
Iteration  11: 6063174.479 ops/s
Iteration  12: 6028669.990 ops/s
Iteration  13: 5907250.241 ops/s
Iteration  14: 5998006.848 ops/s
Iteration  15: 6020561.043 ops/s
Iteration  16: 5937291.779 ops/s
Iteration  17: 6027610.212 ops/s
Iteration  18: 6061248.660 ops/s
Iteration  19: 6052837.763 ops/s
Iteration  20: 6034476.209 ops/s
Iteration  21: 6043606.978 ops/s
Iteration  22: 6029179.082 ops/s
Iteration  23: 6079913.798 ops/s
Iteration  24: 5978473.209 ops/s
Iteration  25: 6045759.622 ops/s
Iteration  26: 6028931.163 ops/s
Iteration  27: 6059041.791 ops/s
Iteration  28: 6020366.476 ops/s
Iteration  29: 6040953.507 ops/s
Iteration  30: 6040695.469 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWithIndex":
  6026058.087 ±(99.9%) 25033.974 ops/s [Average]
  (min, avg, max) = (5907250.241, 6026058.087, 6079913.798), stdev = 37469.676
  CI (99.9%): [6001024.113, 6051092.061] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWithIndex  thrpt   30  6026058.087 ± 25033.974  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 576624.313 ops/s
# Warmup Iteration   2: 1814388.567 ops/s
# Warmup Iteration   3: 1725065.236 ops/s
# Warmup Iteration   4: 1640937.332 ops/s
# Warmup Iteration   5: 1840344.805 ops/s
# Warmup Iteration   6: 1848174.506 ops/s
# Warmup Iteration   7: 1845045.651 ops/s
# Warmup Iteration   8: 1843908.854 ops/s
# Warmup Iteration   9: 1842962.263 ops/s
# Warmup Iteration  10: 1838673.479 ops/s
# Warmup Iteration  11: 1836494.002 ops/s
# Warmup Iteration  12: 1846589.309 ops/s
# Warmup Iteration  13: 1845710.404 ops/s
# Warmup Iteration  14: 1827950.826 ops/s
# Warmup Iteration  15: 1840349.389 ops/s
# Warmup Iteration  16: 1838794.401 ops/s
# Warmup Iteration  17: 1836486.367 ops/s
# Warmup Iteration  18: 1831462.919 ops/s
# Warmup Iteration  19: 1821085.082 ops/s
# Warmup Iteration  20: 1841830.865 ops/s
# Warmup Iteration  21: 1828726.582 ops/s
# Warmup Iteration  22: 1823971.584 ops/s
# Warmup Iteration  23: 1824117.588 ops/s
# Warmup Iteration  24: 1837823.115 ops/s
# Warmup Iteration  25: 1846843.137 ops/s
# Warmup Iteration  26: 1848398.158 ops/s
# Warmup Iteration  27: 1843330.854 ops/s
# Warmup Iteration  28: 1821391.223 ops/s
# Warmup Iteration  29: 1825461.836 ops/s
# Warmup Iteration  30: 1838572.468 ops/s
Iteration   1: 1846944.314 ops/s
Iteration   2: 1833179.087 ops/s
Iteration   3: 1802130.418 ops/s
Iteration   4: 1840120.054 ops/s
Iteration   5: 1843028.448 ops/s
Iteration   6: 1841498.303 ops/s
Iteration   7: 1842062.253 ops/s
Iteration   8: 1846939.214 ops/s
Iteration   9: 1841984.359 ops/s
Iteration  10: 1846463.826 ops/s
Iteration  11: 1835616.156 ops/s
Iteration  12: 1841666.577 ops/s
Iteration  13: 1842774.015 ops/s
Iteration  14: 1846204.861 ops/s
Iteration  15: 1842606.778 ops/s
Iteration  16: 1836435.777 ops/s
Iteration  17: 1838885.645 ops/s
Iteration  18: 1841491.014 ops/s
Iteration  19: 1809486.445 ops/s
Iteration  20: 1847283.919 ops/s
Iteration  21: 1845050.248 ops/s
Iteration  22: 1818249.046 ops/s
Iteration  23: 1828888.007 ops/s
Iteration  24: 1801326.182 ops/s
Iteration  25: 1840168.708 ops/s
Iteration  26: 1842696.415 ops/s
Iteration  27: 1836634.952 ops/s
Iteration  28: 1843950.137 ops/s
Iteration  29: 1842720.582 ops/s
Iteration  30: 1848916.030 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWithIndexWithTarget":
  1837180.059 ±(99.9%) 8518.163 ops/s [Average]
  (min, avg, max) = (1801326.182, 1837180.059, 1848916.030), stdev = 12749.587
  CI (99.9%): [1828661.896, 1845698.222] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  1837180.059 ± 8518.163  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 126285.494 ops/s
# Warmup Iteration   2: 252945.473 ops/s
# Warmup Iteration   3: 298064.784 ops/s
# Warmup Iteration   4: 296465.585 ops/s
# Warmup Iteration   5: 293208.012 ops/s
# Warmup Iteration   6: 254912.907 ops/s
# Warmup Iteration   7: 298084.572 ops/s
# Warmup Iteration   8: 297866.987 ops/s
# Warmup Iteration   9: 299986.138 ops/s
# Warmup Iteration  10: 298979.545 ops/s
# Warmup Iteration  11: 299132.217 ops/s
# Warmup Iteration  12: 299947.020 ops/s
# Warmup Iteration  13: 294916.962 ops/s
# Warmup Iteration  14: 296365.345 ops/s
# Warmup Iteration  15: 299643.487 ops/s
# Warmup Iteration  16: 299762.956 ops/s
# Warmup Iteration  17: 300345.760 ops/s
# Warmup Iteration  18: 300067.710 ops/s
# Warmup Iteration  19: 300001.781 ops/s
# Warmup Iteration  20: 299306.669 ops/s
# Warmup Iteration  21: 299248.641 ops/s
# Warmup Iteration  22: 297856.729 ops/s
# Warmup Iteration  23: 297623.258 ops/s
# Warmup Iteration  24: 299546.083 ops/s
# Warmup Iteration  25: 300765.702 ops/s
# Warmup Iteration  26: 297701.873 ops/s
# Warmup Iteration  27: 296747.808 ops/s
# Warmup Iteration  28: 299171.975 ops/s
# Warmup Iteration  29: 298832.067 ops/s
# Warmup Iteration  30: 299742.754 ops/s
Iteration   1: 300440.826 ops/s
Iteration   2: 299131.490 ops/s
Iteration   3: 300054.319 ops/s
Iteration   4: 301782.019 ops/s
Iteration   5: 298947.272 ops/s
Iteration   6: 298627.988 ops/s
Iteration   7: 300637.107 ops/s
Iteration   8: 299335.049 ops/s
Iteration   9: 300391.602 ops/s
Iteration  10: 300613.606 ops/s
Iteration  11: 300540.204 ops/s
Iteration  12: 299156.395 ops/s
Iteration  13: 298856.781 ops/s
Iteration  14: 290732.286 ops/s
Iteration  15: 299924.037 ops/s
Iteration  16: 299423.690 ops/s
Iteration  17: 299992.478 ops/s
Iteration  18: 300392.899 ops/s
Iteration  19: 299091.901 ops/s
Iteration  20: 298195.843 ops/s
Iteration  21: 300421.361 ops/s
Iteration  22: 300753.924 ops/s
Iteration  23: 300495.654 ops/s
Iteration  24: 299672.733 ops/s
Iteration  25: 301632.883 ops/s
Iteration  26: 299920.042 ops/s
Iteration  27: 299049.401 ops/s
Iteration  28: 299807.014 ops/s
Iteration  29: 294633.295 ops/s
Iteration  30: 296127.983 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWith_target":
  299292.736 ±(99.9%) 1440.273 ops/s [Average]
  (min, avg, max) = (290732.286, 299292.736, 301782.019), stdev = 2155.733
  CI (99.9%): [297852.463, 300733.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectWith_target  thrpt   30  299292.736 ± 1440.273  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6189380.859 ops/s
# Warmup Iteration   2: 12615404.126 ops/s
# Warmup Iteration   3: 11107542.193 ops/s
# Warmup Iteration   4: 13299826.440 ops/s
# Warmup Iteration   5: 13312492.690 ops/s
# Warmup Iteration   6: 13272829.672 ops/s
# Warmup Iteration   7: 13286949.462 ops/s
# Warmup Iteration   8: 13254719.482 ops/s
# Warmup Iteration   9: 13049122.792 ops/s
# Warmup Iteration  10: 13261781.615 ops/s
# Warmup Iteration  11: 13262636.427 ops/s
# Warmup Iteration  12: 13275378.483 ops/s
# Warmup Iteration  13: 13293910.706 ops/s
# Warmup Iteration  14: 13273362.621 ops/s
# Warmup Iteration  15: 13252377.982 ops/s
# Warmup Iteration  16: 13211952.256 ops/s
# Warmup Iteration  17: 13261021.785 ops/s
# Warmup Iteration  18: 13291310.330 ops/s
# Warmup Iteration  19: 13292463.521 ops/s
# Warmup Iteration  20: 13337916.808 ops/s
# Warmup Iteration  21: 13246708.727 ops/s
# Warmup Iteration  22: 13257067.475 ops/s
# Warmup Iteration  23: 13314372.994 ops/s
# Warmup Iteration  24: 13215989.829 ops/s
# Warmup Iteration  25: 13357603.647 ops/s
# Warmup Iteration  26: 13309397.185 ops/s
# Warmup Iteration  27: 13362321.738 ops/s
# Warmup Iteration  28: 13286379.706 ops/s
# Warmup Iteration  29: 13203205.417 ops/s
# Warmup Iteration  30: 13258527.850 ops/s
Iteration   1: 13326103.335 ops/s
Iteration   2: 13375246.610 ops/s
Iteration   3: 13088330.574 ops/s
Iteration   4: 13288596.337 ops/s
Iteration   5: 13350921.907 ops/s
Iteration   6: 13350601.794 ops/s
Iteration   7: 13090785.422 ops/s
Iteration   8: 13275323.271 ops/s
Iteration   9: 13246896.254 ops/s
Iteration  10: 13092431.707 ops/s
Iteration  11: 13312168.953 ops/s
Iteration  12: 13295961.841 ops/s
Iteration  13: 13381392.821 ops/s
Iteration  14: 13262417.813 ops/s
Iteration  15: 13251635.153 ops/s
Iteration  16: 13322806.967 ops/s
Iteration  17: 13297111.251 ops/s
Iteration  18: 13326002.370 ops/s
Iteration  19: 13251306.112 ops/s
Iteration  20: 13271035.347 ops/s
Iteration  21: 13324187.873 ops/s
Iteration  22: 13300070.020 ops/s
Iteration  23: 13308857.085 ops/s
Iteration  24: 13339123.510 ops/s
Iteration  25: 13278855.368 ops/s
Iteration  26: 13119150.430 ops/s
Iteration  27: 13356464.900 ops/s
Iteration  28: 13213824.377 ops/s
Iteration  29: 13311660.526 ops/s
Iteration  30: 13309365.172 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_contains":
  13277287.837 ±(99.9%) 54416.734 ops/s [Average]
  (min, avg, max) = (13088330.574, 13277287.837, 13381392.821), stdev = 81448.412
  CI (99.9%): [13222871.103, 13331704.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_contains  thrpt   30  13277287.837 ± 54416.734  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5398143.290 ops/s
# Warmup Iteration   2: 11272933.836 ops/s
# Warmup Iteration   3: 9646055.167 ops/s
# Warmup Iteration   4: 11333630.329 ops/s
# Warmup Iteration   5: 11376521.165 ops/s
# Warmup Iteration   6: 11312319.961 ops/s
# Warmup Iteration   7: 11394796.061 ops/s
# Warmup Iteration   8: 11354262.637 ops/s
# Warmup Iteration   9: 11383285.465 ops/s
# Warmup Iteration  10: 11426471.016 ops/s
# Warmup Iteration  11: 11323478.165 ops/s
# Warmup Iteration  12: 11407342.432 ops/s
# Warmup Iteration  13: 11354030.068 ops/s
# Warmup Iteration  14: 11278823.157 ops/s
# Warmup Iteration  15: 11404537.692 ops/s
# Warmup Iteration  16: 11373879.551 ops/s
# Warmup Iteration  17: 11279744.816 ops/s
# Warmup Iteration  18: 11311965.769 ops/s
# Warmup Iteration  19: 11368310.437 ops/s
# Warmup Iteration  20: 11345497.726 ops/s
# Warmup Iteration  21: 11217211.805 ops/s
# Warmup Iteration  22: 11364407.410 ops/s
# Warmup Iteration  23: 11321577.861 ops/s
# Warmup Iteration  24: 11318619.031 ops/s
# Warmup Iteration  25: 11373056.161 ops/s
# Warmup Iteration  26: 11394678.702 ops/s
# Warmup Iteration  27: 11329294.775 ops/s
# Warmup Iteration  28: 11381851.340 ops/s
# Warmup Iteration  29: 11352219.367 ops/s
# Warmup Iteration  30: 11357140.052 ops/s
Iteration   1: 11387284.360 ops/s
Iteration   2: 11288861.382 ops/s
Iteration   3: 11105075.309 ops/s
Iteration   4: 11354933.447 ops/s
Iteration   5: 11299154.587 ops/s
Iteration   6: 11330071.542 ops/s
Iteration   7: 11372996.677 ops/s
Iteration   8: 11172472.811 ops/s
Iteration   9: 11377036.159 ops/s
Iteration  10: 11332426.925 ops/s
Iteration  11: 11319420.554 ops/s
Iteration  12: 11289553.900 ops/s
Iteration  13: 11292703.019 ops/s
Iteration  14: 11238490.708 ops/s
Iteration  15: 11357762.416 ops/s
Iteration  16: 11387010.871 ops/s
Iteration  17: 11304819.687 ops/s
Iteration  18: 11325591.645 ops/s
Iteration  19: 11322968.164 ops/s
Iteration  20: 11285850.411 ops/s
Iteration  21: 11332803.373 ops/s
Iteration  22: 11360153.612 ops/s
Iteration  23: 11415269.436 ops/s
Iteration  24: 11287360.359 ops/s
Iteration  25: 11394097.622 ops/s
Iteration  26: 11245205.442 ops/s
Iteration  27: 11393112.964 ops/s
Iteration  28: 11371581.821 ops/s
Iteration  29: 11383272.281 ops/s
Iteration  30: 11313258.992 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAllArray":
  11321353.349 ±(99.9%) 45091.974 ops/s [Average]
  (min, avg, max) = (11105075.309, 11321353.349, 11415269.436), stdev = 67491.549
  CI (99.9%): [11276261.375, 11366445.323] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAllArray  thrpt   30  11321353.349 ± 45091.974  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5370712.030 ops/s
# Warmup Iteration   2: 11177668.325 ops/s
# Warmup Iteration   3: 9545300.770 ops/s
# Warmup Iteration   4: 11303678.664 ops/s
# Warmup Iteration   5: 11277112.075 ops/s
# Warmup Iteration   6: 11245018.626 ops/s
# Warmup Iteration   7: 11287257.237 ops/s
# Warmup Iteration   8: 11305665.534 ops/s
# Warmup Iteration   9: 11321067.135 ops/s
# Warmup Iteration  10: 11294648.529 ops/s
# Warmup Iteration  11: 11227333.162 ops/s
# Warmup Iteration  12: 11325027.625 ops/s
# Warmup Iteration  13: 11218690.999 ops/s
# Warmup Iteration  14: 11295531.112 ops/s
# Warmup Iteration  15: 11288245.962 ops/s
# Warmup Iteration  16: 11184689.174 ops/s
# Warmup Iteration  17: 11309814.738 ops/s
# Warmup Iteration  18: 11306222.802 ops/s
# Warmup Iteration  19: 11293669.259 ops/s
# Warmup Iteration  20: 11261437.673 ops/s
# Warmup Iteration  21: 11323037.507 ops/s
# Warmup Iteration  22: 11312913.055 ops/s
# Warmup Iteration  23: 11345820.508 ops/s
# Warmup Iteration  24: 11272241.934 ops/s
# Warmup Iteration  25: 11199807.041 ops/s
# Warmup Iteration  26: 11297600.276 ops/s
# Warmup Iteration  27: 11296592.847 ops/s
# Warmup Iteration  28: 11329519.541 ops/s
# Warmup Iteration  29: 11323044.728 ops/s
# Warmup Iteration  30: 11345959.990 ops/s
Iteration   1: 11239145.250 ops/s
Iteration   2: 11259685.487 ops/s
Iteration   3: 11366778.732 ops/s
Iteration   4: 11302384.745 ops/s
Iteration   5: 11287880.625 ops/s
Iteration   6: 11364080.254 ops/s
Iteration   7: 11306059.279 ops/s
Iteration   8: 11257010.936 ops/s
Iteration   9: 11323458.564 ops/s
Iteration  10: 11290232.200 ops/s
Iteration  11: 11360580.864 ops/s
Iteration  12: 11328896.842 ops/s
Iteration  13: 11357807.875 ops/s
Iteration  14: 11292159.794 ops/s
Iteration  15: 11324573.705 ops/s
Iteration  16: 11198933.615 ops/s
Iteration  17: 11300237.699 ops/s
Iteration  18: 11132180.157 ops/s
Iteration  19: 11032740.884 ops/s
Iteration  20: 11068740.242 ops/s
Iteration  21: 11317514.920 ops/s
Iteration  22: 11112294.210 ops/s
Iteration  23: 11334639.505 ops/s
Iteration  24: 11312080.004 ops/s
Iteration  25: 10949156.423 ops/s
Iteration  26: 11329344.492 ops/s
Iteration  27: 11306621.217 ops/s
Iteration  28: 11320654.807 ops/s
Iteration  29: 11380707.603 ops/s
Iteration  30: 11310598.416 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAllCollection":
  11268905.978 ±(99.9%) 70978.630 ops/s [Average]
  (min, avg, max) = (10949156.423, 11268905.978, 11380707.603), stdev = 106237.480
  CI (99.9%): [11197927.348, 11339884.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAllCollection  thrpt   30  11268905.978 ± 70978.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5827466.353 ops/s
# Warmup Iteration   2: 12178906.893 ops/s
# Warmup Iteration   3: 10352103.183 ops/s
# Warmup Iteration   4: 12198419.840 ops/s
# Warmup Iteration   5: 12177807.807 ops/s
# Warmup Iteration   6: 12179846.274 ops/s
# Warmup Iteration   7: 12198792.616 ops/s
# Warmup Iteration   8: 12123643.778 ops/s
# Warmup Iteration   9: 12193168.001 ops/s
# Warmup Iteration  10: 12262222.665 ops/s
# Warmup Iteration  11: 12151933.640 ops/s
# Warmup Iteration  12: 11957794.013 ops/s
# Warmup Iteration  13: 12128761.382 ops/s
# Warmup Iteration  14: 12225730.675 ops/s
# Warmup Iteration  15: 12047596.810 ops/s
# Warmup Iteration  16: 12246508.270 ops/s
# Warmup Iteration  17: 12258322.498 ops/s
# Warmup Iteration  18: 12081443.144 ops/s
# Warmup Iteration  19: 12262528.146 ops/s
# Warmup Iteration  20: 12320490.383 ops/s
# Warmup Iteration  21: 12133632.659 ops/s
# Warmup Iteration  22: 12181588.201 ops/s
# Warmup Iteration  23: 12158762.155 ops/s
# Warmup Iteration  24: 12218480.473 ops/s
# Warmup Iteration  25: 12233843.923 ops/s
# Warmup Iteration  26: 12126779.616 ops/s
# Warmup Iteration  27: 12128300.720 ops/s
# Warmup Iteration  28: 12292516.241 ops/s
# Warmup Iteration  29: 12292369.471 ops/s
# Warmup Iteration  30: 12222339.674 ops/s
Iteration   1: 12240612.077 ops/s
Iteration   2: 12247102.495 ops/s
Iteration   3: 12286922.701 ops/s
Iteration   4: 12223509.463 ops/s
Iteration   5: 12334526.075 ops/s
Iteration   6: 12312039.007 ops/s
Iteration   7: 12222334.008 ops/s
Iteration   8: 12261913.808 ops/s
Iteration   9: 12211345.517 ops/s
Iteration  10: 12272420.120 ops/s
Iteration  11: 12251437.149 ops/s
Iteration  12: 12174778.243 ops/s
Iteration  13: 12284929.955 ops/s
Iteration  14: 12260636.161 ops/s
Iteration  15: 12158915.634 ops/s
Iteration  16: 12198698.917 ops/s
Iteration  17: 12336415.520 ops/s
Iteration  18: 12231616.447 ops/s
Iteration  19: 12295722.587 ops/s
Iteration  20: 12273569.547 ops/s
Iteration  21: 12257618.439 ops/s
Iteration  22: 12323341.822 ops/s
Iteration  23: 12234156.131 ops/s
Iteration  24: 12299856.027 ops/s
Iteration  25: 12205256.762 ops/s
Iteration  26: 12121042.341 ops/s
Iteration  27: 12238052.437 ops/s
Iteration  28: 12287244.487 ops/s
Iteration  29: 12240827.187 ops/s
Iteration  30: 12263566.960 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAllIterable":
  12251680.267 ±(99.9%) 33509.578 ops/s [Average]
  (min, avg, max) = (12121042.341, 12251680.267, 12336415.520), stdev = 50155.562
  CI (99.9%): [12218170.690, 12285189.845] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAllIterable  thrpt   30  12251680.267 ± 33509.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 137180.927 ops/s
# Warmup Iteration   2: 179462.691 ops/s
# Warmup Iteration   3: 227153.454 ops/s
# Warmup Iteration   4: 226259.804 ops/s
# Warmup Iteration   5: 227258.326 ops/s
# Warmup Iteration   6: 226104.795 ops/s
# Warmup Iteration   7: 225527.339 ops/s
# Warmup Iteration   8: 227433.198 ops/s
# Warmup Iteration   9: 193166.842 ops/s
# Warmup Iteration  10: 227428.083 ops/s
# Warmup Iteration  11: 226033.627 ops/s
# Warmup Iteration  12: 225796.814 ops/s
# Warmup Iteration  13: 226288.676 ops/s
# Warmup Iteration  14: 226398.035 ops/s
# Warmup Iteration  15: 227148.413 ops/s
# Warmup Iteration  16: 227514.458 ops/s
# Warmup Iteration  17: 227002.373 ops/s
# Warmup Iteration  18: 226205.612 ops/s
# Warmup Iteration  19: 225474.447 ops/s
# Warmup Iteration  20: 226870.940 ops/s
# Warmup Iteration  21: 224630.231 ops/s
# Warmup Iteration  22: 224555.358 ops/s
# Warmup Iteration  23: 226242.425 ops/s
# Warmup Iteration  24: 226203.519 ops/s
# Warmup Iteration  25: 225498.706 ops/s
# Warmup Iteration  26: 226382.626 ops/s
# Warmup Iteration  27: 225332.659 ops/s
# Warmup Iteration  28: 226928.691 ops/s
# Warmup Iteration  29: 225938.293 ops/s
# Warmup Iteration  30: 226796.139 ops/s
Iteration   1: 224405.962 ops/s
Iteration   2: 224726.671 ops/s
Iteration   3: 223540.698 ops/s
Iteration   4: 228133.124 ops/s
Iteration   5: 225235.449 ops/s
Iteration   6: 227224.997 ops/s
Iteration   7: 226876.696 ops/s
Iteration   8: 226711.653 ops/s
Iteration   9: 226854.961 ops/s
Iteration  10: 227012.106 ops/s
Iteration  11: 226550.322 ops/s
Iteration  12: 227378.876 ops/s
Iteration  13: 227417.576 ops/s
Iteration  14: 224021.316 ops/s
Iteration  15: 226848.667 ops/s
Iteration  16: 228107.975 ops/s
Iteration  17: 226741.917 ops/s
Iteration  18: 227231.609 ops/s
Iteration  19: 227022.484 ops/s
Iteration  20: 222790.910 ops/s
Iteration  21: 226815.501 ops/s
Iteration  22: 224301.566 ops/s
Iteration  23: 226628.484 ops/s
Iteration  24: 226782.839 ops/s
Iteration  25: 226495.811 ops/s
Iteration  26: 226422.523 ops/s
Iteration  27: 225736.026 ops/s
Iteration  28: 226607.618 ops/s
Iteration  29: 227732.750 ops/s
Iteration  30: 225740.680 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAnyCollection":
  226269.926 ±(99.9%) 902.226 ops/s [Average]
  (min, avg, max) = (222790.910, 226269.926, 228133.124), stdev = 1350.410
  CI (99.9%): [225367.699, 227172.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score     Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  226269.926 ± 902.226  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 119199.879 ops/s
# Warmup Iteration   2: 140355.365 ops/s
# Warmup Iteration   3: 185385.428 ops/s
# Warmup Iteration   4: 185926.960 ops/s
# Warmup Iteration   5: 184096.137 ops/s
# Warmup Iteration   6: 185648.917 ops/s
# Warmup Iteration   7: 184285.654 ops/s
# Warmup Iteration   8: 186083.391 ops/s
# Warmup Iteration   9: 185986.146 ops/s
# Warmup Iteration  10: 167052.276 ops/s
# Warmup Iteration  11: 173054.148 ops/s
# Warmup Iteration  12: 185641.152 ops/s
# Warmup Iteration  13: 186839.976 ops/s
# Warmup Iteration  14: 185545.141 ops/s
# Warmup Iteration  15: 185140.004 ops/s
# Warmup Iteration  16: 182414.134 ops/s
# Warmup Iteration  17: 186276.254 ops/s
# Warmup Iteration  18: 186552.120 ops/s
# Warmup Iteration  19: 186175.891 ops/s
# Warmup Iteration  20: 184341.465 ops/s
# Warmup Iteration  21: 184571.684 ops/s
# Warmup Iteration  22: 184064.110 ops/s
# Warmup Iteration  23: 185908.015 ops/s
# Warmup Iteration  24: 185745.744 ops/s
# Warmup Iteration  25: 186025.902 ops/s
# Warmup Iteration  26: 185831.578 ops/s
# Warmup Iteration  27: 186270.917 ops/s
# Warmup Iteration  28: 184182.643 ops/s
# Warmup Iteration  29: 185953.781 ops/s
# Warmup Iteration  30: 185591.176 ops/s
Iteration   1: 186719.377 ops/s
Iteration   2: 186299.315 ops/s
Iteration   3: 185886.974 ops/s
Iteration   4: 185831.530 ops/s
Iteration   5: 185370.191 ops/s
Iteration   6: 186265.011 ops/s
Iteration   7: 186200.535 ops/s
Iteration   8: 185686.879 ops/s
Iteration   9: 186305.707 ops/s
Iteration  10: 184924.375 ops/s
Iteration  11: 186680.766 ops/s
Iteration  12: 185766.621 ops/s
Iteration  13: 185998.175 ops/s
Iteration  14: 182893.204 ops/s
Iteration  15: 186118.508 ops/s
Iteration  16: 183498.085 ops/s
Iteration  17: 186318.506 ops/s
Iteration  18: 185631.072 ops/s
Iteration  19: 186467.384 ops/s
Iteration  20: 184556.018 ops/s
Iteration  21: 185032.103 ops/s
Iteration  22: 185302.549 ops/s
Iteration  23: 187028.790 ops/s
Iteration  24: 185164.089 ops/s
Iteration  25: 186312.127 ops/s
Iteration  26: 186686.298 ops/s
Iteration  27: 185615.702 ops/s
Iteration  28: 182738.635 ops/s
Iteration  29: 186954.954 ops/s
Iteration  30: 185435.123 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAnyIterable":
  185656.287 ±(99.9%) 720.312 ops/s [Average]
  (min, avg, max) = (182738.635, 185656.287, 187028.790), stdev = 1078.129
  CI (99.9%): [184935.975, 186376.599] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score     Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  185656.287 ± 720.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 657924.587 ops/s
# Warmup Iteration   2: 692811.871 ops/s
# Warmup Iteration   3: 846379.534 ops/s
# Warmup Iteration   4: 903907.771 ops/s
# Warmup Iteration   5: 906561.243 ops/s
# Warmup Iteration   6: 900204.556 ops/s
# Warmup Iteration   7: 910384.928 ops/s
# Warmup Iteration   8: 891529.499 ops/s
# Warmup Iteration   9: 903405.565 ops/s
# Warmup Iteration  10: 908055.226 ops/s
# Warmup Iteration  11: 894292.733 ops/s
# Warmup Iteration  12: 910197.321 ops/s
# Warmup Iteration  13: 796880.502 ops/s
# Warmup Iteration  14: 857625.643 ops/s
# Warmup Iteration  15: 907143.555 ops/s
# Warmup Iteration  16: 907176.312 ops/s
# Warmup Iteration  17: 960008.883 ops/s
# Warmup Iteration  18: 949562.521 ops/s
# Warmup Iteration  19: 953576.606 ops/s
# Warmup Iteration  20: 948439.886 ops/s
# Warmup Iteration  21: 957946.785 ops/s
# Warmup Iteration  22: 953732.582 ops/s
# Warmup Iteration  23: 951786.251 ops/s
# Warmup Iteration  24: 960237.198 ops/s
# Warmup Iteration  25: 956626.090 ops/s
# Warmup Iteration  26: 950962.421 ops/s
# Warmup Iteration  27: 946486.714 ops/s
# Warmup Iteration  28: 945125.970 ops/s
# Warmup Iteration  29: 954417.969 ops/s
# Warmup Iteration  30: 950519.870 ops/s
Iteration   1: 952029.484 ops/s
Iteration   2: 953702.436 ops/s
Iteration   3: 952445.967 ops/s
Iteration   4: 958390.103 ops/s
Iteration   5: 954276.262 ops/s
Iteration   6: 956487.407 ops/s
Iteration   7: 952942.863 ops/s
Iteration   8: 959616.834 ops/s
Iteration   9: 962215.555 ops/s
Iteration  10: 952549.864 ops/s
Iteration  11: 956157.468 ops/s
Iteration  12: 960973.010 ops/s
Iteration  13: 954615.746 ops/s
Iteration  14: 943128.313 ops/s
Iteration  15: 959334.540 ops/s
Iteration  16: 960497.946 ops/s
Iteration  17: 942296.802 ops/s
Iteration  18: 955529.921 ops/s
Iteration  19: 955864.384 ops/s
Iteration  20: 957220.292 ops/s
Iteration  21: 958271.048 ops/s
Iteration  22: 960852.642 ops/s
Iteration  23: 961217.816 ops/s
Iteration  24: 955660.220 ops/s
Iteration  25: 950562.494 ops/s
Iteration  26: 954738.280 ops/s
Iteration  27: 953302.741 ops/s
Iteration  28: 955423.936 ops/s
Iteration  29: 957707.862 ops/s
Iteration  30: 956369.825 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsBy":
  955479.402 ±(99.9%) 3085.477 ops/s [Average]
  (min, avg, max) = (942296.802, 955479.402, 962215.555), stdev = 4618.197
  CI (99.9%): [952393.925, 958564.879] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsBy  thrpt   30  955479.402 ± 3085.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 142654.136 ops/s
# Warmup Iteration   2: 185749.976 ops/s
# Warmup Iteration   3: 226655.754 ops/s
# Warmup Iteration   4: 225802.320 ops/s
# Warmup Iteration   5: 226781.494 ops/s
# Warmup Iteration   6: 226541.521 ops/s
# Warmup Iteration   7: 226431.160 ops/s
# Warmup Iteration   8: 227489.166 ops/s
# Warmup Iteration   9: 193346.885 ops/s
# Warmup Iteration  10: 228465.019 ops/s
# Warmup Iteration  11: 228158.297 ops/s
# Warmup Iteration  12: 227251.896 ops/s
# Warmup Iteration  13: 228167.345 ops/s
# Warmup Iteration  14: 223400.336 ops/s
# Warmup Iteration  15: 226026.989 ops/s
# Warmup Iteration  16: 227643.021 ops/s
# Warmup Iteration  17: 226463.230 ops/s
# Warmup Iteration  18: 225918.130 ops/s
# Warmup Iteration  19: 226578.013 ops/s
# Warmup Iteration  20: 227938.876 ops/s
# Warmup Iteration  21: 228317.144 ops/s
# Warmup Iteration  22: 226943.491 ops/s
# Warmup Iteration  23: 226431.977 ops/s
# Warmup Iteration  24: 227091.699 ops/s
# Warmup Iteration  25: 227318.970 ops/s
# Warmup Iteration  26: 227428.029 ops/s
# Warmup Iteration  27: 226979.784 ops/s
# Warmup Iteration  28: 226501.555 ops/s
# Warmup Iteration  29: 227923.536 ops/s
# Warmup Iteration  30: 228326.586 ops/s
Iteration   1: 224098.966 ops/s
Iteration   2: 226541.033 ops/s
Iteration   3: 228706.892 ops/s
Iteration   4: 225237.367 ops/s
Iteration   5: 227470.093 ops/s
Iteration   6: 226324.902 ops/s
Iteration   7: 227052.518 ops/s
Iteration   8: 227889.692 ops/s
Iteration   9: 227460.584 ops/s
Iteration  10: 227992.812 ops/s
Iteration  11: 227276.594 ops/s
Iteration  12: 227330.686 ops/s
Iteration  13: 228417.845 ops/s
Iteration  14: 224822.187 ops/s
Iteration  15: 227386.481 ops/s
Iteration  16: 227266.629 ops/s
Iteration  17: 227925.685 ops/s
Iteration  18: 226344.563 ops/s
Iteration  19: 227829.311 ops/s
Iteration  20: 226298.682 ops/s
Iteration  21: 227207.543 ops/s
Iteration  22: 226810.520 ops/s
Iteration  23: 227677.814 ops/s
Iteration  24: 228274.795 ops/s
Iteration  25: 227363.584 ops/s
Iteration  26: 226403.883 ops/s
Iteration  27: 227525.311 ops/s
Iteration  28: 227377.681 ops/s
Iteration  29: 227795.571 ops/s
Iteration  30: 227100.574 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsNoneCollection":
  227107.027 ±(99.9%) 683.042 ops/s [Average]
  (min, avg, max) = (224098.966, 227107.027, 228706.892), stdev = 1022.345
  CI (99.9%): [226423.985, 227790.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score     Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  227107.027 ± 683.042  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 120635.319 ops/s
# Warmup Iteration   2: 141608.276 ops/s
# Warmup Iteration   3: 186568.969 ops/s
# Warmup Iteration   4: 187113.572 ops/s
# Warmup Iteration   5: 186979.172 ops/s
# Warmup Iteration   6: 186818.326 ops/s
# Warmup Iteration   7: 185683.261 ops/s
# Warmup Iteration   8: 187584.665 ops/s
# Warmup Iteration   9: 187474.945 ops/s
# Warmup Iteration  10: 161827.897 ops/s
# Warmup Iteration  11: 182596.374 ops/s
# Warmup Iteration  12: 188164.208 ops/s
# Warmup Iteration  13: 186691.108 ops/s
# Warmup Iteration  14: 185907.387 ops/s
# Warmup Iteration  15: 188027.461 ops/s
# Warmup Iteration  16: 187360.282 ops/s
# Warmup Iteration  17: 187445.010 ops/s
# Warmup Iteration  18: 186300.771 ops/s
# Warmup Iteration  19: 187164.910 ops/s
# Warmup Iteration  20: 185894.832 ops/s
# Warmup Iteration  21: 187089.648 ops/s
# Warmup Iteration  22: 186953.277 ops/s
# Warmup Iteration  23: 187426.679 ops/s
# Warmup Iteration  24: 187526.480 ops/s
# Warmup Iteration  25: 186259.657 ops/s
# Warmup Iteration  26: 187350.654 ops/s
# Warmup Iteration  27: 186943.960 ops/s
# Warmup Iteration  28: 187217.171 ops/s
# Warmup Iteration  29: 186893.454 ops/s
# Warmup Iteration  30: 187273.665 ops/s
Iteration   1: 187006.996 ops/s
Iteration   2: 187505.635 ops/s
Iteration   3: 188314.210 ops/s
Iteration   4: 186778.993 ops/s
Iteration   5: 186507.403 ops/s
Iteration   6: 186140.935 ops/s
Iteration   7: 186886.975 ops/s
Iteration   8: 187618.509 ops/s
Iteration   9: 186456.492 ops/s
Iteration  10: 188347.998 ops/s
Iteration  11: 187785.687 ops/s
Iteration  12: 187221.052 ops/s
Iteration  13: 187701.333 ops/s
Iteration  14: 184011.897 ops/s
Iteration  15: 186728.915 ops/s
Iteration  16: 187298.404 ops/s
Iteration  17: 187543.363 ops/s
Iteration  18: 185980.686 ops/s
Iteration  19: 183581.856 ops/s
Iteration  20: 187461.097 ops/s
Iteration  21: 188314.816 ops/s
Iteration  22: 187740.314 ops/s
Iteration  23: 188042.494 ops/s
Iteration  24: 187979.419 ops/s
Iteration  25: 186434.012 ops/s
Iteration  26: 187729.257 ops/s
Iteration  27: 186686.130 ops/s
Iteration  28: 187473.425 ops/s
Iteration  29: 187521.390 ops/s
Iteration  30: 188012.741 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsNoneIterable":
  187093.748 ±(99.9%) 739.534 ops/s [Average]
  (min, avg, max) = (183581.856, 187093.748, 188347.998), stdev = 1106.900
  CI (99.9%): [186354.214, 187833.282] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score     Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  187093.748 ± 739.534  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 465281.736 ops/s
# Warmup Iteration   2: 969915.231 ops/s
# Warmup Iteration   3: 1011746.017 ops/s
# Warmup Iteration   4: 1008578.664 ops/s
# Warmup Iteration   5: 851410.164 ops/s
# Warmup Iteration   6: 1004101.967 ops/s
# Warmup Iteration   7: 1004761.428 ops/s
# Warmup Iteration   8: 1020450.035 ops/s
# Warmup Iteration   9: 1017839.356 ops/s
# Warmup Iteration  10: 1013873.619 ops/s
# Warmup Iteration  11: 1012697.967 ops/s
# Warmup Iteration  12: 1010924.293 ops/s
# Warmup Iteration  13: 1017298.881 ops/s
# Warmup Iteration  14: 1020541.165 ops/s
# Warmup Iteration  15: 1009924.890 ops/s
# Warmup Iteration  16: 1018378.624 ops/s
# Warmup Iteration  17: 1010637.027 ops/s
# Warmup Iteration  18: 1017243.372 ops/s
# Warmup Iteration  19: 1017618.225 ops/s
# Warmup Iteration  20: 1018460.594 ops/s
# Warmup Iteration  21: 1010472.119 ops/s
# Warmup Iteration  22: 1020657.883 ops/s
# Warmup Iteration  23: 1018993.202 ops/s
# Warmup Iteration  24: 1014809.994 ops/s
# Warmup Iteration  25: 1007489.744 ops/s
# Warmup Iteration  26: 1019166.036 ops/s
# Warmup Iteration  27: 1017200.918 ops/s
# Warmup Iteration  28: 1015827.758 ops/s
# Warmup Iteration  29: 1011298.945 ops/s
# Warmup Iteration  30: 1014936.864 ops/s
Iteration   1: 1011819.588 ops/s
Iteration   2: 1020439.595 ops/s
Iteration   3: 1017497.940 ops/s
Iteration   4: 1017542.358 ops/s
Iteration   5: 1016299.001 ops/s
Iteration   6: 1020823.387 ops/s
Iteration   7: 1020681.402 ops/s
Iteration   8: 1019604.084 ops/s
Iteration   9: 998643.456 ops/s
Iteration  10: 1022165.605 ops/s
Iteration  11: 1014197.853 ops/s
Iteration  12: 1017835.672 ops/s
Iteration  13: 1013330.601 ops/s
Iteration  14: 994173.535 ops/s
Iteration  15: 1011590.067 ops/s
Iteration  16: 1015684.816 ops/s
Iteration  17: 1017354.835 ops/s
Iteration  18: 1019046.498 ops/s
Iteration  19: 1016341.050 ops/s
Iteration  20: 1020466.296 ops/s
Iteration  21: 1021168.882 ops/s
Iteration  22: 1023639.836 ops/s
Iteration  23: 1012306.786 ops/s
Iteration  24: 1018298.438 ops/s
Iteration  25: 998780.759 ops/s
Iteration  26: 1014956.606 ops/s
Iteration  27: 1013226.054 ops/s
Iteration  28: 1017586.531 ops/s
Iteration  29: 1018745.071 ops/s
Iteration  30: 1014708.007 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_corresponds":
  1015298.487 ±(99.9%) 4619.583 ops/s [Average]
  (min, avg, max) = (994173.535, 1015298.487, 1023639.836), stdev = 6914.374
  CI (99.9%): [1010678.904, 1019918.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_corresponds  thrpt   30  1015298.487 ± 4619.583  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6763009.730 ops/s
# Warmup Iteration   2: 13607713.300 ops/s
# Warmup Iteration   3: 11821276.595 ops/s
# Warmup Iteration   4: 13921649.325 ops/s
# Warmup Iteration   5: 13829726.217 ops/s
# Warmup Iteration   6: 13667847.745 ops/s
# Warmup Iteration   7: 13745201.356 ops/s
# Warmup Iteration   8: 13881994.772 ops/s
# Warmup Iteration   9: 13852300.675 ops/s
# Warmup Iteration  10: 13711407.263 ops/s
# Warmup Iteration  11: 13877480.135 ops/s
# Warmup Iteration  12: 13913786.813 ops/s
# Warmup Iteration  13: 13803465.159 ops/s
# Warmup Iteration  14: 13854952.412 ops/s
# Warmup Iteration  15: 13874067.556 ops/s
# Warmup Iteration  16: 13811581.150 ops/s
# Warmup Iteration  17: 13739387.933 ops/s
# Warmup Iteration  18: 13904234.254 ops/s
# Warmup Iteration  19: 13927420.628 ops/s
# Warmup Iteration  20: 13778656.321 ops/s
# Warmup Iteration  21: 13803366.846 ops/s
# Warmup Iteration  22: 13768623.496 ops/s
# Warmup Iteration  23: 13815813.091 ops/s
# Warmup Iteration  24: 13890105.235 ops/s
# Warmup Iteration  25: 13766801.433 ops/s
# Warmup Iteration  26: 13906198.311 ops/s
# Warmup Iteration  27: 13805051.502 ops/s
# Warmup Iteration  28: 13887737.442 ops/s
# Warmup Iteration  29: 13849650.912 ops/s
# Warmup Iteration  30: 13898788.627 ops/s
Iteration   1: 13927393.130 ops/s
Iteration   2: 13796471.633 ops/s
Iteration   3: 13925136.333 ops/s
Iteration   4: 13984471.145 ops/s
Iteration   5: 13806261.406 ops/s
Iteration   6: 13921014.471 ops/s
Iteration   7: 13896576.193 ops/s
Iteration   8: 13969448.010 ops/s
Iteration   9: 13895484.573 ops/s
Iteration  10: 13823601.472 ops/s
Iteration  11: 13755802.115 ops/s
Iteration  12: 13580351.207 ops/s
Iteration  13: 13862284.429 ops/s
Iteration  14: 13885624.558 ops/s
Iteration  15: 13874889.512 ops/s
Iteration  16: 13751480.686 ops/s
Iteration  17: 13879456.695 ops/s
Iteration  18: 13887034.529 ops/s
Iteration  19: 13818316.656 ops/s
Iteration  20: 13849223.324 ops/s
Iteration  21: 13853107.247 ops/s
Iteration  22: 13909938.719 ops/s
Iteration  23: 13838197.364 ops/s
Iteration  24: 13933499.853 ops/s
Iteration  25: 13911665.862 ops/s
Iteration  26: 13676344.085 ops/s
Iteration  27: 13866558.296 ops/s
Iteration  28: 13825533.823 ops/s
Iteration  29: 13904397.769 ops/s
Iteration  30: 13865720.928 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_count":
  13855842.868 ±(99.9%) 55904.210 ops/s [Average]
  (min, avg, max) = (13580351.207, 13855842.868, 13984471.145), stdev = 83674.796
  CI (99.9%): [13799938.658, 13911747.077] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_count  thrpt   30  13855842.868 ± 55904.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1303645.707 ops/s
# Warmup Iteration   2: 2764476.919 ops/s
# Warmup Iteration   3: 3005949.466 ops/s
# Warmup Iteration   4: 3030451.027 ops/s
# Warmup Iteration   5: 2458660.003 ops/s
# Warmup Iteration   6: 3044413.276 ops/s
# Warmup Iteration   7: 3011881.074 ops/s
# Warmup Iteration   8: 3022930.030 ops/s
# Warmup Iteration   9: 3020183.472 ops/s
# Warmup Iteration  10: 3003666.493 ops/s
# Warmup Iteration  11: 3034700.103 ops/s
# Warmup Iteration  12: 3024601.569 ops/s
# Warmup Iteration  13: 3038153.826 ops/s
# Warmup Iteration  14: 3032639.071 ops/s
# Warmup Iteration  15: 3019306.721 ops/s
# Warmup Iteration  16: 3023253.941 ops/s
# Warmup Iteration  17: 3008702.128 ops/s
# Warmup Iteration  18: 2997806.009 ops/s
# Warmup Iteration  19: 2987657.651 ops/s
# Warmup Iteration  20: 3019970.669 ops/s
# Warmup Iteration  21: 2996058.611 ops/s
# Warmup Iteration  22: 3014649.723 ops/s
# Warmup Iteration  23: 3024749.401 ops/s
# Warmup Iteration  24: 2980064.844 ops/s
# Warmup Iteration  25: 3021998.814 ops/s
# Warmup Iteration  26: 2990992.412 ops/s
# Warmup Iteration  27: 2985191.017 ops/s
# Warmup Iteration  28: 2982146.039 ops/s
# Warmup Iteration  29: 3006798.155 ops/s
# Warmup Iteration  30: 3004613.890 ops/s
Iteration   1: 3025451.075 ops/s
Iteration   2: 2995680.648 ops/s
Iteration   3: 3024109.805 ops/s
Iteration   4: 2978861.386 ops/s
Iteration   5: 2961097.179 ops/s
Iteration   6: 3020926.456 ops/s
Iteration   7: 3022218.058 ops/s
Iteration   8: 3017334.391 ops/s
Iteration   9: 2998498.958 ops/s
Iteration  10: 3014626.346 ops/s
Iteration  11: 2962097.397 ops/s
Iteration  12: 3022054.324 ops/s
Iteration  13: 3019380.010 ops/s
Iteration  14: 3016986.579 ops/s
Iteration  15: 3027732.728 ops/s
Iteration  16: 3018550.763 ops/s
Iteration  17: 3016293.640 ops/s
Iteration  18: 3002537.042 ops/s
Iteration  19: 2967778.627 ops/s
Iteration  20: 3010410.700 ops/s
Iteration  21: 3013990.724 ops/s
Iteration  22: 3021685.351 ops/s
Iteration  23: 3017743.243 ops/s
Iteration  24: 3024740.991 ops/s
Iteration  25: 3017891.264 ops/s
Iteration  26: 3036283.539 ops/s
Iteration  27: 2987352.549 ops/s
Iteration  28: 3019123.367 ops/s
Iteration  29: 3018352.470 ops/s
Iteration  30: 2976416.147 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countBy":
  3008540.192 ±(99.9%) 13723.246 ops/s [Average]
  (min, avg, max) = (2961097.179, 3008540.192, 3036283.539), stdev = 20540.310
  CI (99.9%): [2994816.946, 3022263.438] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countBy  thrpt   30  3008540.192 ± 13723.246  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 256601.841 ops/s
# Warmup Iteration   2: 452779.768 ops/s
# Warmup Iteration   3: 528023.365 ops/s
# Warmup Iteration   4: 530872.657 ops/s
# Warmup Iteration   5: 531020.320 ops/s
# Warmup Iteration   6: 437339.275 ops/s
# Warmup Iteration   7: 531991.632 ops/s
# Warmup Iteration   8: 532652.543 ops/s
# Warmup Iteration   9: 532122.449 ops/s
# Warmup Iteration  10: 530403.698 ops/s
# Warmup Iteration  11: 525281.708 ops/s
# Warmup Iteration  12: 530426.777 ops/s
# Warmup Iteration  13: 526369.968 ops/s
# Warmup Iteration  14: 527500.564 ops/s
# Warmup Iteration  15: 529088.804 ops/s
# Warmup Iteration  16: 528159.585 ops/s
# Warmup Iteration  17: 533587.344 ops/s
# Warmup Iteration  18: 529253.390 ops/s
# Warmup Iteration  19: 529953.631 ops/s
# Warmup Iteration  20: 532797.067 ops/s
# Warmup Iteration  21: 527921.982 ops/s
# Warmup Iteration  22: 531701.128 ops/s
# Warmup Iteration  23: 531411.515 ops/s
# Warmup Iteration  24: 530919.079 ops/s
# Warmup Iteration  25: 525760.357 ops/s
# Warmup Iteration  26: 528708.669 ops/s
# Warmup Iteration  27: 531278.251 ops/s
# Warmup Iteration  28: 532763.170 ops/s
# Warmup Iteration  29: 530205.843 ops/s
# Warmup Iteration  30: 533578.586 ops/s
Iteration   1: 531543.975 ops/s
Iteration   2: 530744.821 ops/s
Iteration   3: 531461.407 ops/s
Iteration   4: 530045.366 ops/s
Iteration   5: 530972.406 ops/s
Iteration   6: 529431.641 ops/s
Iteration   7: 530528.537 ops/s
Iteration   8: 530358.027 ops/s
Iteration   9: 531679.733 ops/s
Iteration  10: 529204.515 ops/s
Iteration  11: 524315.583 ops/s
Iteration  12: 525441.340 ops/s
Iteration  13: 534149.217 ops/s
Iteration  14: 530492.180 ops/s
Iteration  15: 530692.090 ops/s
Iteration  16: 526986.690 ops/s
Iteration  17: 530928.352 ops/s
Iteration  18: 533180.814 ops/s
Iteration  19: 529950.767 ops/s
Iteration  20: 531504.827 ops/s
Iteration  21: 530781.471 ops/s
Iteration  22: 530119.457 ops/s
Iteration  23: 523684.837 ops/s
Iteration  24: 532867.076 ops/s
Iteration  25: 533445.026 ops/s
Iteration  26: 530886.984 ops/s
Iteration  27: 528488.791 ops/s
Iteration  28: 532420.269 ops/s
Iteration  29: 532664.982 ops/s
Iteration  30: 530718.519 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countByEach":
  530322.990 ±(99.9%) 1653.267 ops/s [Average]
  (min, avg, max) = (523684.837, 530322.990, 534149.217), stdev = 2474.532
  CI (99.9%): [528669.723, 531976.257] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countByEach  thrpt   30  530322.990 ± 1653.267  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1202407.413 ops/s
# Warmup Iteration   2: 2428550.487 ops/s
# Warmup Iteration   3: 2627603.294 ops/s
# Warmup Iteration   4: 2609430.453 ops/s
# Warmup Iteration   5: 2196114.731 ops/s
# Warmup Iteration   6: 2633370.262 ops/s
# Warmup Iteration   7: 2644439.622 ops/s
# Warmup Iteration   8: 2640398.227 ops/s
# Warmup Iteration   9: 2615739.304 ops/s
# Warmup Iteration  10: 2644692.302 ops/s
# Warmup Iteration  11: 2646157.375 ops/s
# Warmup Iteration  12: 2651184.642 ops/s
# Warmup Iteration  13: 2650395.974 ops/s
# Warmup Iteration  14: 2653595.286 ops/s
# Warmup Iteration  15: 2650135.883 ops/s
# Warmup Iteration  16: 2620516.808 ops/s
# Warmup Iteration  17: 2645464.181 ops/s
# Warmup Iteration  18: 2619683.242 ops/s
# Warmup Iteration  19: 2616218.232 ops/s
# Warmup Iteration  20: 2618994.642 ops/s
# Warmup Iteration  21: 2639966.760 ops/s
# Warmup Iteration  22: 2635269.906 ops/s
# Warmup Iteration  23: 2617698.743 ops/s
# Warmup Iteration  24: 2649209.782 ops/s
# Warmup Iteration  25: 2612241.419 ops/s
# Warmup Iteration  26: 2638489.218 ops/s
# Warmup Iteration  27: 2636650.201 ops/s
# Warmup Iteration  28: 2648347.414 ops/s
# Warmup Iteration  29: 2633231.013 ops/s
# Warmup Iteration  30: 2650459.943 ops/s
Iteration   1: 2625882.065 ops/s
Iteration   2: 2619049.204 ops/s
Iteration   3: 2623687.671 ops/s
Iteration   4: 2633691.470 ops/s
Iteration   5: 2650019.702 ops/s
Iteration   6: 2656176.224 ops/s
Iteration   7: 2645178.403 ops/s
Iteration   8: 2646462.037 ops/s
Iteration   9: 2652037.444 ops/s
Iteration  10: 2598785.085 ops/s
Iteration  11: 2652156.885 ops/s
Iteration  12: 2650183.693 ops/s
Iteration  13: 2570736.950 ops/s
Iteration  14: 2653058.388 ops/s
Iteration  15: 2626374.144 ops/s
Iteration  16: 2640425.116 ops/s
Iteration  17: 2639867.441 ops/s
Iteration  18: 2643708.655 ops/s
Iteration  19: 2637686.638 ops/s
Iteration  20: 2643663.954 ops/s
Iteration  21: 2648973.935 ops/s
Iteration  22: 2640473.129 ops/s
Iteration  23: 2647064.796 ops/s
Iteration  24: 2618579.399 ops/s
Iteration  25: 2628434.935 ops/s
Iteration  26: 2627240.481 ops/s
Iteration  27: 2614896.882 ops/s
Iteration  28: 2650286.830 ops/s
Iteration  29: 2641683.930 ops/s
Iteration  30: 2650081.403 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countByWith":
  2635884.896 ±(99.9%) 12328.529 ops/s [Average]
  (min, avg, max) = (2570736.950, 2635884.896, 2656176.224), stdev = 18452.763
  CI (99.9%): [2623556.368, 2648213.425] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countByWith  thrpt   30  2635884.896 ± 12328.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7379927.489 ops/s
# Warmup Iteration   2: 14851558.289 ops/s
# Warmup Iteration   3: 12491597.457 ops/s
# Warmup Iteration   4: 14661756.963 ops/s
# Warmup Iteration   5: 14646093.352 ops/s
# Warmup Iteration   6: 14560579.979 ops/s
# Warmup Iteration   7: 14668597.899 ops/s
# Warmup Iteration   8: 14500605.947 ops/s
# Warmup Iteration   9: 14487407.453 ops/s
# Warmup Iteration  10: 14699644.082 ops/s
# Warmup Iteration  11: 14715675.685 ops/s
# Warmup Iteration  12: 14728855.942 ops/s
# Warmup Iteration  13: 14676771.346 ops/s
# Warmup Iteration  14: 14602336.211 ops/s
# Warmup Iteration  15: 14658217.358 ops/s
# Warmup Iteration  16: 14746496.339 ops/s
# Warmup Iteration  17: 15031476.213 ops/s
# Warmup Iteration  18: 14784028.570 ops/s
# Warmup Iteration  19: 14998032.691 ops/s
# Warmup Iteration  20: 15027449.803 ops/s
# Warmup Iteration  21: 15064458.209 ops/s
# Warmup Iteration  22: 14818483.325 ops/s
# Warmup Iteration  23: 15044707.729 ops/s
# Warmup Iteration  24: 14905733.004 ops/s
# Warmup Iteration  25: 14906153.492 ops/s
# Warmup Iteration  26: 15038866.887 ops/s
# Warmup Iteration  27: 14934725.061 ops/s
# Warmup Iteration  28: 15028813.718 ops/s
# Warmup Iteration  29: 14877572.437 ops/s
# Warmup Iteration  30: 14957139.402 ops/s
Iteration   1: 14743623.885 ops/s
Iteration   2: 14791876.257 ops/s
Iteration   3: 14918951.720 ops/s
Iteration   4: 14681948.233 ops/s
Iteration   5: 15027499.148 ops/s
Iteration   6: 15174118.824 ops/s
Iteration   7: 15019076.482 ops/s
Iteration   8: 15044824.438 ops/s
Iteration   9: 15001431.715 ops/s
Iteration  10: 14995852.413 ops/s
Iteration  11: 14974852.433 ops/s
Iteration  12: 14918983.518 ops/s
Iteration  13: 14569459.095 ops/s
Iteration  14: 14804148.683 ops/s
Iteration  15: 15148927.749 ops/s
Iteration  16: 15028076.950 ops/s
Iteration  17: 14964749.785 ops/s
Iteration  18: 14954010.292 ops/s
Iteration  19: 15021339.516 ops/s
Iteration  20: 14958797.410 ops/s
Iteration  21: 15042401.141 ops/s
Iteration  22: 14972337.375 ops/s
Iteration  23: 14810752.138 ops/s
Iteration  24: 15036432.722 ops/s
Iteration  25: 15011317.786 ops/s
Iteration  26: 14896644.462 ops/s
Iteration  27: 15109320.652 ops/s
Iteration  28: 15119168.961 ops/s
Iteration  29: 14819074.095 ops/s
Iteration  30: 15051534.726 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countWith":
  14953717.753 ±(99.9%) 92628.809 ops/s [Average]
  (min, avg, max) = (14569459.095, 14953717.753, 15174118.824), stdev = 138642.451
  CI (99.9%): [14861088.945, 15046346.562] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_countWith  thrpt   30  14953717.753 ± 92628.809  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3591389.872 ops/s
# Warmup Iteration   2: 7335594.827 ops/s
# Warmup Iteration   3: 6325341.777 ops/s
# Warmup Iteration   4: 7437904.739 ops/s
# Warmup Iteration   5: 7416088.949 ops/s
# Warmup Iteration   6: 7449289.084 ops/s
# Warmup Iteration   7: 7415982.147 ops/s
# Warmup Iteration   8: 7428980.005 ops/s
# Warmup Iteration   9: 7392351.638 ops/s
# Warmup Iteration  10: 7440591.983 ops/s
# Warmup Iteration  11: 7419488.530 ops/s
# Warmup Iteration  12: 7335658.987 ops/s
# Warmup Iteration  13: 7371799.375 ops/s
# Warmup Iteration  14: 7470073.866 ops/s
# Warmup Iteration  15: 7427836.874 ops/s
# Warmup Iteration  16: 7447946.605 ops/s
# Warmup Iteration  17: 7524625.203 ops/s
# Warmup Iteration  18: 7480827.913 ops/s
# Warmup Iteration  19: 7483562.851 ops/s
# Warmup Iteration  20: 7459341.500 ops/s
# Warmup Iteration  21: 7502795.369 ops/s
# Warmup Iteration  22: 7519389.645 ops/s
# Warmup Iteration  23: 7475836.780 ops/s
# Warmup Iteration  24: 7466720.080 ops/s
# Warmup Iteration  25: 7424042.585 ops/s
# Warmup Iteration  26: 7458744.564 ops/s
# Warmup Iteration  27: 7486553.390 ops/s
# Warmup Iteration  28: 7453239.648 ops/s
# Warmup Iteration  29: 7508381.398 ops/s
# Warmup Iteration  30: 7421953.962 ops/s
Iteration   1: 7532182.807 ops/s
Iteration   2: 7497799.110 ops/s
Iteration   3: 7521818.547 ops/s
Iteration   4: 7486595.798 ops/s
Iteration   5: 7512558.046 ops/s
Iteration   6: 7430062.139 ops/s
Iteration   7: 7407894.691 ops/s
Iteration   8: 7467460.924 ops/s
Iteration   9: 7446448.510 ops/s
Iteration  10: 7284678.542 ops/s
Iteration  11: 7502336.923 ops/s
Iteration  12: 7537992.197 ops/s
Iteration  13: 7480705.006 ops/s
Iteration  14: 7532598.957 ops/s
Iteration  15: 7376335.196 ops/s
Iteration  16: 7496611.312 ops/s
Iteration  17: 7499967.250 ops/s
Iteration  18: 7494303.342 ops/s
Iteration  19: 7405245.012 ops/s
Iteration  20: 7457659.186 ops/s
Iteration  21: 7474221.492 ops/s
Iteration  22: 7524083.420 ops/s
Iteration  23: 7516464.026 ops/s
Iteration  24: 7468607.813 ops/s
Iteration  25: 7418988.395 ops/s
Iteration  26: 7513028.120 ops/s
Iteration  27: 7507564.623 ops/s
Iteration  28: 7508686.269 ops/s
Iteration  29: 7491550.322 ops/s
Iteration  30: 7379257.156 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detect":
  7472456.838 ±(99.9%) 38393.883 ops/s [Average]
  (min, avg, max) = (7284678.542, 7472456.838, 7537992.197), stdev = 57466.161
  CI (99.9%): [7434062.955, 7510850.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detect  thrpt   30  7472456.838 ± 38393.883  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3534552.728 ops/s
# Warmup Iteration   2: 7282782.386 ops/s
# Warmup Iteration   3: 6261882.997 ops/s
# Warmup Iteration   4: 7297338.462 ops/s
# Warmup Iteration   5: 7374151.564 ops/s
# Warmup Iteration   6: 7369777.382 ops/s
# Warmup Iteration   7: 7227462.090 ops/s
# Warmup Iteration   8: 7368123.941 ops/s
# Warmup Iteration   9: 7363998.999 ops/s
# Warmup Iteration  10: 7345090.126 ops/s
# Warmup Iteration  11: 7269899.696 ops/s
# Warmup Iteration  12: 7365139.904 ops/s
# Warmup Iteration  13: 7387779.514 ops/s
# Warmup Iteration  14: 7374326.971 ops/s
# Warmup Iteration  15: 7401628.829 ops/s
# Warmup Iteration  16: 7387142.152 ops/s
# Warmup Iteration  17: 7426159.274 ops/s
# Warmup Iteration  18: 7409794.071 ops/s
# Warmup Iteration  19: 7381863.467 ops/s
# Warmup Iteration  20: 7372391.459 ops/s
# Warmup Iteration  21: 7376927.493 ops/s
# Warmup Iteration  22: 7388043.570 ops/s
# Warmup Iteration  23: 7414837.891 ops/s
# Warmup Iteration  24: 7413975.104 ops/s
# Warmup Iteration  25: 7369930.803 ops/s
# Warmup Iteration  26: 7367313.487 ops/s
# Warmup Iteration  27: 7412171.960 ops/s
# Warmup Iteration  28: 7430349.993 ops/s
# Warmup Iteration  29: 7397931.306 ops/s
# Warmup Iteration  30: 7330666.862 ops/s
Iteration   1: 7434403.741 ops/s
Iteration   2: 7385057.055 ops/s
Iteration   3: 7363779.734 ops/s
Iteration   4: 7294895.894 ops/s
Iteration   5: 7402039.144 ops/s
Iteration   6: 7262070.133 ops/s
Iteration   7: 7388600.277 ops/s
Iteration   8: 7402160.885 ops/s
Iteration   9: 7377030.312 ops/s
Iteration  10: 7368287.598 ops/s
Iteration  11: 7382986.292 ops/s
Iteration  12: 7262769.009 ops/s
Iteration  13: 7415682.964 ops/s
Iteration  14: 7407129.121 ops/s
Iteration  15: 7380740.559 ops/s
Iteration  16: 7346558.603 ops/s
Iteration  17: 7352293.829 ops/s
Iteration  18: 7281109.114 ops/s
Iteration  19: 7368774.921 ops/s
Iteration  20: 7371518.452 ops/s
Iteration  21: 7274463.028 ops/s
Iteration  22: 7375189.384 ops/s
Iteration  23: 7281194.493 ops/s
Iteration  24: 7410403.800 ops/s
Iteration  25: 7412423.707 ops/s
Iteration  26: 7446863.484 ops/s
Iteration  27: 7401715.034 ops/s
Iteration  28: 7427983.467 ops/s
Iteration  29: 7392170.205 ops/s
Iteration  30: 7429234.984 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectIfNone":
  7369984.307 ±(99.9%) 35727.274 ops/s [Average]
  (min, avg, max) = (7262070.133, 7369984.307, 7446863.484), stdev = 53474.905
  CI (99.9%): [7334257.034, 7405711.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectIfNone  thrpt   30  7369984.307 ± 35727.274  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1030712.697 ops/s
# Warmup Iteration   2: 2560596.372 ops/s
# Warmup Iteration   3: 2173060.367 ops/s
# Warmup Iteration   4: 2543796.394 ops/s
# Warmup Iteration   5: 2588231.530 ops/s
# Warmup Iteration   6: 2564721.108 ops/s
# Warmup Iteration   7: 2566566.646 ops/s
# Warmup Iteration   8: 2574815.996 ops/s
# Warmup Iteration   9: 2574491.384 ops/s
# Warmup Iteration  10: 2557306.865 ops/s
# Warmup Iteration  11: 2578369.460 ops/s
# Warmup Iteration  12: 2558697.682 ops/s
# Warmup Iteration  13: 2552456.496 ops/s
# Warmup Iteration  14: 2591614.196 ops/s
# Warmup Iteration  15: 2575823.601 ops/s
# Warmup Iteration  16: 2577583.796 ops/s
# Warmup Iteration  17: 2580684.009 ops/s
# Warmup Iteration  18: 2575623.687 ops/s
# Warmup Iteration  19: 2559359.051 ops/s
# Warmup Iteration  20: 2555609.211 ops/s
# Warmup Iteration  21: 2586936.376 ops/s
# Warmup Iteration  22: 2567170.559 ops/s
# Warmup Iteration  23: 2572106.904 ops/s
# Warmup Iteration  24: 2576505.746 ops/s
# Warmup Iteration  25: 2579155.401 ops/s
# Warmup Iteration  26: 2577391.771 ops/s
# Warmup Iteration  27: 2569024.539 ops/s
# Warmup Iteration  28: 2525408.698 ops/s
# Warmup Iteration  29: 2578755.575 ops/s
# Warmup Iteration  30: 2575459.904 ops/s
Iteration   1: 2589415.917 ops/s
Iteration   2: 2566628.195 ops/s
Iteration   3: 2581778.998 ops/s
Iteration   4: 2591269.654 ops/s
Iteration   5: 2588607.521 ops/s
Iteration   6: 2564424.821 ops/s
Iteration   7: 2575641.619 ops/s
Iteration   8: 2531268.681 ops/s
Iteration   9: 2593595.532 ops/s
Iteration  10: 2534408.769 ops/s
Iteration  11: 2544425.824 ops/s
Iteration  12: 2578609.476 ops/s
Iteration  13: 2584039.910 ops/s
Iteration  14: 2510795.790 ops/s
Iteration  15: 2563533.903 ops/s
Iteration  16: 2560105.041 ops/s
Iteration  17: 2576503.354 ops/s
Iteration  18: 2574042.472 ops/s
Iteration  19: 2565921.240 ops/s
Iteration  20: 2581336.925 ops/s
Iteration  21: 2590815.320 ops/s
Iteration  22: 2556271.502 ops/s
Iteration  23: 2553405.044 ops/s
Iteration  24: 2579846.693 ops/s
Iteration  25: 2561614.574 ops/s
Iteration  26: 2582506.348 ops/s
Iteration  27: 2561704.058 ops/s
Iteration  28: 2585226.064 ops/s
Iteration  29: 2578394.774 ops/s
Iteration  30: 2581898.839 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectIndex":
  2569601.229 ±(99.9%) 13138.607 ops/s [Average]
  (min, avg, max) = (2510795.790, 2569601.229, 2593595.532), stdev = 19665.251
  CI (99.9%): [2556462.621, 2582739.836] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectIndex  thrpt   30  2569601.229 ± 13138.607  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1013925.983 ops/s
# Warmup Iteration   2: 2544633.204 ops/s
# Warmup Iteration   3: 2182752.355 ops/s
# Warmup Iteration   4: 2592907.560 ops/s
# Warmup Iteration   5: 2562697.282 ops/s
# Warmup Iteration   6: 2581920.427 ops/s
# Warmup Iteration   7: 2576509.233 ops/s
# Warmup Iteration   8: 2559359.306 ops/s
# Warmup Iteration   9: 2569733.688 ops/s
# Warmup Iteration  10: 2555338.573 ops/s
# Warmup Iteration  11: 2582209.535 ops/s
# Warmup Iteration  12: 2571704.728 ops/s
# Warmup Iteration  13: 2555293.760 ops/s
# Warmup Iteration  14: 2555712.534 ops/s
# Warmup Iteration  15: 2555950.392 ops/s
# Warmup Iteration  16: 2574275.561 ops/s
# Warmup Iteration  17: 2551803.623 ops/s
# Warmup Iteration  18: 2564873.640 ops/s
# Warmup Iteration  19: 2564224.497 ops/s
# Warmup Iteration  20: 2553330.296 ops/s
# Warmup Iteration  21: 2581786.031 ops/s
# Warmup Iteration  22: 2588784.339 ops/s
# Warmup Iteration  23: 2561750.006 ops/s
# Warmup Iteration  24: 2567233.857 ops/s
# Warmup Iteration  25: 2562178.092 ops/s
# Warmup Iteration  26: 2582087.016 ops/s
# Warmup Iteration  27: 2575640.909 ops/s
# Warmup Iteration  28: 2566804.274 ops/s
# Warmup Iteration  29: 2580654.381 ops/s
# Warmup Iteration  30: 2568394.240 ops/s
Iteration   1: 2556620.586 ops/s
Iteration   2: 2574598.817 ops/s
Iteration   3: 2539533.638 ops/s
Iteration   4: 2556184.616 ops/s
Iteration   5: 2561127.194 ops/s
Iteration   6: 2544335.641 ops/s
Iteration   7: 2561468.227 ops/s
Iteration   8: 2538049.565 ops/s
Iteration   9: 2566952.151 ops/s
Iteration  10: 2568215.617 ops/s
Iteration  11: 2570183.329 ops/s
Iteration  12: 2596750.778 ops/s
Iteration  13: 2584169.722 ops/s
Iteration  14: 2580834.442 ops/s
Iteration  15: 2574862.698 ops/s
Iteration  16: 2567824.376 ops/s
Iteration  17: 2581531.715 ops/s
Iteration  18: 2570462.083 ops/s
Iteration  19: 2500874.276 ops/s
Iteration  20: 2547538.054 ops/s
Iteration  21: 2580128.386 ops/s
Iteration  22: 2566434.678 ops/s
Iteration  23: 2570963.218 ops/s
Iteration  24: 2561490.462 ops/s
Iteration  25: 2573500.679 ops/s
Iteration  26: 2576862.187 ops/s
Iteration  27: 2560202.900 ops/s
Iteration  28: 2542218.098 ops/s
Iteration  29: 2573350.444 ops/s
Iteration  30: 2563738.265 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectLastIndex":
  2563700.228 ±(99.9%) 12166.389 ops/s [Average]
  (min, avg, max) = (2500874.276, 2563700.228, 2596750.778), stdev = 18210.080
  CI (99.9%): [2551533.839, 2575866.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectLastIndex  thrpt   30  2563700.228 ± 12166.389  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 477069.305 ops/s
# Warmup Iteration   2: 639250.022 ops/s
# Warmup Iteration   3: 751088.136 ops/s
# Warmup Iteration   4: 743033.234 ops/s
# Warmup Iteration   5: 749275.532 ops/s
# Warmup Iteration   6: 753794.640 ops/s
# Warmup Iteration   7: 749908.235 ops/s
# Warmup Iteration   8: 644268.644 ops/s
# Warmup Iteration   9: 744943.054 ops/s
# Warmup Iteration  10: 750362.139 ops/s
# Warmup Iteration  11: 752490.209 ops/s
# Warmup Iteration  12: 749019.876 ops/s
# Warmup Iteration  13: 750006.037 ops/s
# Warmup Iteration  14: 747919.699 ops/s
# Warmup Iteration  15: 748400.558 ops/s
# Warmup Iteration  16: 750068.694 ops/s
# Warmup Iteration  17: 787714.487 ops/s
# Warmup Iteration  18: 786008.540 ops/s
# Warmup Iteration  19: 785784.532 ops/s
# Warmup Iteration  20: 784716.821 ops/s
# Warmup Iteration  21: 787143.661 ops/s
# Warmup Iteration  22: 783745.680 ops/s
# Warmup Iteration  23: 781730.277 ops/s
# Warmup Iteration  24: 782867.921 ops/s
# Warmup Iteration  25: 785084.440 ops/s
# Warmup Iteration  26: 774029.063 ops/s
# Warmup Iteration  27: 781384.045 ops/s
# Warmup Iteration  28: 781748.315 ops/s
# Warmup Iteration  29: 773188.581 ops/s
# Warmup Iteration  30: 769847.709 ops/s
Iteration   1: 772205.135 ops/s
Iteration   2: 781886.022 ops/s
Iteration   3: 784211.725 ops/s
Iteration   4: 778347.515 ops/s
Iteration   5: 781794.262 ops/s
Iteration   6: 777021.829 ops/s
Iteration   7: 779550.385 ops/s
Iteration   8: 782116.131 ops/s
Iteration   9: 781939.293 ops/s
Iteration  10: 781419.373 ops/s
Iteration  11: 784102.201 ops/s
Iteration  12: 779216.782 ops/s
Iteration  13: 790702.810 ops/s
Iteration  14: 774145.761 ops/s
Iteration  15: 790890.994 ops/s
Iteration  16: 785356.167 ops/s
Iteration  17: 784258.624 ops/s
Iteration  18: 791656.143 ops/s
Iteration  19: 784463.914 ops/s
Iteration  20: 779590.889 ops/s
Iteration  21: 774930.082 ops/s
Iteration  22: 785581.697 ops/s
Iteration  23: 775971.973 ops/s
Iteration  24: 771240.277 ops/s
Iteration  25: 781780.475 ops/s
Iteration  26: 786134.421 ops/s
Iteration  27: 782201.649 ops/s
Iteration  28: 784792.212 ops/s
Iteration  29: 783506.092 ops/s
Iteration  30: 781239.866 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectOptional":
  781741.823 ±(99.9%) 3366.348 ops/s [Average]
  (min, avg, max) = (771240.277, 781741.823, 791656.143), stdev = 5038.591
  CI (99.9%): [778375.475, 785108.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectOptional  thrpt   30  781741.823 ± 3366.348  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2891075.557 ops/s
# Warmup Iteration   2: 7186058.066 ops/s
# Warmup Iteration   3: 6145125.005 ops/s
# Warmup Iteration   4: 7261803.059 ops/s
# Warmup Iteration   5: 7255520.499 ops/s
# Warmup Iteration   6: 7203199.161 ops/s
# Warmup Iteration   7: 7247257.706 ops/s
# Warmup Iteration   8: 7195660.387 ops/s
# Warmup Iteration   9: 7227449.370 ops/s
# Warmup Iteration  10: 7183894.485 ops/s
# Warmup Iteration  11: 7212049.094 ops/s
# Warmup Iteration  12: 7236263.505 ops/s
# Warmup Iteration  13: 7243265.096 ops/s
# Warmup Iteration  14: 7223703.027 ops/s
# Warmup Iteration  15: 7268367.842 ops/s
# Warmup Iteration  16: 7267955.946 ops/s
# Warmup Iteration  17: 7252420.890 ops/s
# Warmup Iteration  18: 7115804.055 ops/s
# Warmup Iteration  19: 7304750.767 ops/s
# Warmup Iteration  20: 7302146.957 ops/s
# Warmup Iteration  21: 7291417.995 ops/s
# Warmup Iteration  22: 7317393.391 ops/s
# Warmup Iteration  23: 7258510.755 ops/s
# Warmup Iteration  24: 7261762.512 ops/s
# Warmup Iteration  25: 7237287.403 ops/s
# Warmup Iteration  26: 7229658.178 ops/s
# Warmup Iteration  27: 7320144.279 ops/s
# Warmup Iteration  28: 7289897.866 ops/s
# Warmup Iteration  29: 7273033.424 ops/s
# Warmup Iteration  30: 7319374.075 ops/s
Iteration   1: 7300112.885 ops/s
Iteration   2: 7274136.295 ops/s
Iteration   3: 7260600.451 ops/s
Iteration   4: 7326642.884 ops/s
Iteration   5: 7289775.178 ops/s
Iteration   6: 7298627.225 ops/s
Iteration   7: 7326781.890 ops/s
Iteration   8: 7323882.666 ops/s
Iteration   9: 7163572.903 ops/s
Iteration  10: 7201530.727 ops/s
Iteration  11: 7334320.963 ops/s
Iteration  12: 7349859.555 ops/s
Iteration  13: 7316698.843 ops/s
Iteration  14: 7319329.444 ops/s
Iteration  15: 7297286.741 ops/s
Iteration  16: 7105635.242 ops/s
Iteration  17: 7080677.192 ops/s
Iteration  18: 7183286.320 ops/s
Iteration  19: 7292803.448 ops/s
Iteration  20: 7306604.306 ops/s
Iteration  21: 7320211.579 ops/s
Iteration  22: 7231843.480 ops/s
Iteration  23: 7293698.944 ops/s
Iteration  24: 7337990.610 ops/s
Iteration  25: 7334083.464 ops/s
Iteration  26: 7319222.308 ops/s
Iteration  27: 7322424.272 ops/s
Iteration  28: 7250163.941 ops/s
Iteration  29: 7282472.773 ops/s
Iteration  30: 7337797.940 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectWith":
  7279402.482 ±(99.9%) 45856.872 ops/s [Average]
  (min, avg, max) = (7080677.192, 7279402.482, 7349859.555), stdev = 68636.413
  CI (99.9%): [7233545.610, 7325259.355] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectWith  thrpt   30  7279402.482 ± 45856.872  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3046767.796 ops/s
# Warmup Iteration   2: 6458201.704 ops/s
# Warmup Iteration   3: 5600188.299 ops/s
# Warmup Iteration   4: 6599804.248 ops/s
# Warmup Iteration   5: 6649729.924 ops/s
# Warmup Iteration   6: 6628258.131 ops/s
# Warmup Iteration   7: 6657577.908 ops/s
# Warmup Iteration   8: 6660796.750 ops/s
# Warmup Iteration   9: 6630133.006 ops/s
# Warmup Iteration  10: 6635528.456 ops/s
# Warmup Iteration  11: 6619600.425 ops/s
# Warmup Iteration  12: 6637422.403 ops/s
# Warmup Iteration  13: 6639266.855 ops/s
# Warmup Iteration  14: 6641074.807 ops/s
# Warmup Iteration  15: 6666500.362 ops/s
# Warmup Iteration  16: 6636037.859 ops/s
# Warmup Iteration  17: 6503032.412 ops/s
# Warmup Iteration  18: 6543592.766 ops/s
# Warmup Iteration  19: 6540988.174 ops/s
# Warmup Iteration  20: 6560963.712 ops/s
# Warmup Iteration  21: 6537333.681 ops/s
# Warmup Iteration  22: 6461049.238 ops/s
# Warmup Iteration  23: 6519508.202 ops/s
# Warmup Iteration  24: 6486709.310 ops/s
# Warmup Iteration  25: 6533512.192 ops/s
# Warmup Iteration  26: 6493030.243 ops/s
# Warmup Iteration  27: 6541889.321 ops/s
# Warmup Iteration  28: 6547692.566 ops/s
# Warmup Iteration  29: 6450647.696 ops/s
# Warmup Iteration  30: 6460693.812 ops/s
Iteration   1: 6552357.242 ops/s
Iteration   2: 6562619.062 ops/s
Iteration   3: 6556968.610 ops/s
Iteration   4: 6547507.584 ops/s
Iteration   5: 6544384.462 ops/s
Iteration   6: 6468807.936 ops/s
Iteration   7: 6548806.159 ops/s
Iteration   8: 6520301.281 ops/s
Iteration   9: 6549602.229 ops/s
Iteration  10: 6551036.333 ops/s
Iteration  11: 6564734.529 ops/s
Iteration  12: 6571986.944 ops/s
Iteration  13: 6546126.339 ops/s
Iteration  14: 6534953.839 ops/s
Iteration  15: 6519113.643 ops/s
Iteration  16: 6508539.473 ops/s
Iteration  17: 6478558.969 ops/s
Iteration  18: 6478153.751 ops/s
Iteration  19: 6540719.314 ops/s
Iteration  20: 6548270.201 ops/s
Iteration  21: 6442407.045 ops/s
Iteration  22: 6519756.294 ops/s
Iteration  23: 6432258.501 ops/s
Iteration  24: 6524219.389 ops/s
Iteration  25: 6553066.570 ops/s
Iteration  26: 6478011.041 ops/s
Iteration  27: 6534872.217 ops/s
Iteration  28: 6490052.940 ops/s
Iteration  29: 6571595.284 ops/s
Iteration  30: 6555537.372 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectWithIfNoneBlock":
  6526510.818 ±(99.9%) 25327.387 ops/s [Average]
  (min, avg, max) = (6432258.501, 6526510.818, 6571986.944), stdev = 37908.843
  CI (99.9%): [6501183.432, 6551838.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  6526510.818 ± 25327.387  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 477788.848 ops/s
# Warmup Iteration   2: 647748.508 ops/s
# Warmup Iteration   3: 763661.266 ops/s
# Warmup Iteration   4: 759740.788 ops/s
# Warmup Iteration   5: 766768.374 ops/s
# Warmup Iteration   6: 770572.276 ops/s
# Warmup Iteration   7: 760941.219 ops/s
# Warmup Iteration   8: 647240.777 ops/s
# Warmup Iteration   9: 768376.835 ops/s
# Warmup Iteration  10: 771184.237 ops/s
# Warmup Iteration  11: 763844.651 ops/s
# Warmup Iteration  12: 765535.343 ops/s
# Warmup Iteration  13: 764071.218 ops/s
# Warmup Iteration  14: 768502.969 ops/s
# Warmup Iteration  15: 764361.768 ops/s
# Warmup Iteration  16: 759651.463 ops/s
# Warmup Iteration  17: 809182.780 ops/s
# Warmup Iteration  18: 810773.732 ops/s
# Warmup Iteration  19: 804788.816 ops/s
# Warmup Iteration  20: 804468.665 ops/s
# Warmup Iteration  21: 809664.168 ops/s
# Warmup Iteration  22: 805833.926 ops/s
# Warmup Iteration  23: 808231.231 ops/s
# Warmup Iteration  24: 805348.838 ops/s
# Warmup Iteration  25: 804623.780 ops/s
# Warmup Iteration  26: 806773.446 ops/s
# Warmup Iteration  27: 808433.395 ops/s
# Warmup Iteration  28: 802647.120 ops/s
# Warmup Iteration  29: 800811.395 ops/s
# Warmup Iteration  30: 797664.465 ops/s
Iteration   1: 808458.591 ops/s
Iteration   2: 809234.337 ops/s
Iteration   3: 812107.159 ops/s
Iteration   4: 811334.916 ops/s
Iteration   5: 812218.502 ops/s
Iteration   6: 809757.931 ops/s
Iteration   7: 795781.318 ops/s
Iteration   8: 798531.790 ops/s
Iteration   9: 811432.894 ops/s
Iteration  10: 808641.173 ops/s
Iteration  11: 813603.046 ops/s
Iteration  12: 803743.780 ops/s
Iteration  13: 797690.664 ops/s
Iteration  14: 806706.441 ops/s
Iteration  15: 812408.477 ops/s
Iteration  16: 807674.759 ops/s
Iteration  17: 810505.368 ops/s
Iteration  18: 811042.403 ops/s
Iteration  19: 804318.425 ops/s
Iteration  20: 811510.337 ops/s
Iteration  21: 795049.252 ops/s
Iteration  22: 810676.586 ops/s
Iteration  23: 805621.883 ops/s
Iteration  24: 807601.722 ops/s
Iteration  25: 812813.204 ops/s
Iteration  26: 803854.350 ops/s
Iteration  27: 813952.151 ops/s
Iteration  28: 792743.110 ops/s
Iteration  29: 807908.119 ops/s
Iteration  30: 807069.219 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectWithOptional":
  807133.064 ±(99.9%) 3899.182 ops/s [Average]
  (min, avg, max) = (792743.110, 807133.064, 813952.151), stdev = 5836.113
  CI (99.9%): [803233.881, 811032.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_detectWithOptional  thrpt   30  807133.064 ± 3899.182  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3223011.804 ops/s
# Warmup Iteration   2: 7208909.003 ops/s
# Warmup Iteration   3: 6049109.938 ops/s
# Warmup Iteration   4: 7241236.806 ops/s
# Warmup Iteration   5: 7253237.269 ops/s
# Warmup Iteration   6: 7114943.732 ops/s
# Warmup Iteration   7: 7222444.389 ops/s
# Warmup Iteration   8: 7213737.802 ops/s
# Warmup Iteration   9: 7215804.338 ops/s
# Warmup Iteration  10: 7233206.655 ops/s
# Warmup Iteration  11: 7219343.090 ops/s
# Warmup Iteration  12: 7236199.438 ops/s
# Warmup Iteration  13: 7274102.361 ops/s
# Warmup Iteration  14: 7229811.360 ops/s
# Warmup Iteration  15: 7255611.241 ops/s
# Warmup Iteration  16: 7208645.591 ops/s
# Warmup Iteration  17: 7279355.407 ops/s
# Warmup Iteration  18: 7223795.228 ops/s
# Warmup Iteration  19: 7173900.616 ops/s
# Warmup Iteration  20: 7239989.456 ops/s
# Warmup Iteration  21: 7292904.846 ops/s
# Warmup Iteration  22: 7198387.023 ops/s
# Warmup Iteration  23: 7262608.266 ops/s
# Warmup Iteration  24: 7298855.648 ops/s
# Warmup Iteration  25: 7280516.295 ops/s
# Warmup Iteration  26: 7267560.364 ops/s
# Warmup Iteration  27: 7251163.293 ops/s
# Warmup Iteration  28: 7252583.326 ops/s
# Warmup Iteration  29: 7203560.297 ops/s
# Warmup Iteration  30: 7263336.756 ops/s
Iteration   1: 7299732.266 ops/s
Iteration   2: 7266037.258 ops/s
Iteration   3: 7245470.838 ops/s
Iteration   4: 7243316.848 ops/s
Iteration   5: 7253809.114 ops/s
Iteration   6: 7291749.079 ops/s
Iteration   7: 7281788.031 ops/s
Iteration   8: 7296189.281 ops/s
Iteration   9: 7317089.973 ops/s
Iteration  10: 7286973.284 ops/s
Iteration  11: 7290584.503 ops/s
Iteration  12: 7263638.261 ops/s
Iteration  13: 7254830.146 ops/s
Iteration  14: 7104587.636 ops/s
Iteration  15: 7256391.415 ops/s
Iteration  16: 7291080.170 ops/s
Iteration  17: 7300416.772 ops/s
Iteration  18: 7268191.911 ops/s
Iteration  19: 7288402.812 ops/s
Iteration  20: 7252421.931 ops/s
Iteration  21: 7247455.239 ops/s
Iteration  22: 7273154.582 ops/s
Iteration  23: 7230146.995 ops/s
Iteration  24: 7300690.858 ops/s
Iteration  25: 7317833.814 ops/s
Iteration  26: 7325638.421 ops/s
Iteration  27: 7313287.355 ops/s
Iteration  28: 7300957.189 ops/s
Iteration  29: 7182647.453 ops/s
Iteration  30: 7265578.938 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_distinct":
  7270336.412 ±(99.9%) 29214.991 ops/s [Average]
  (min, avg, max) = (7104587.636, 7270336.412, 7325638.421), stdev = 43727.627
  CI (99.9%): [7241121.421, 7299551.404] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_distinct  thrpt   30  7270336.412 ± 29214.991  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1057646.049 ops/s
# Warmup Iteration   2: 2436857.877 ops/s
# Warmup Iteration   3: 2460368.272 ops/s
# Warmup Iteration   4: 2053897.409 ops/s
# Warmup Iteration   5: 2446812.204 ops/s
# Warmup Iteration   6: 2454777.931 ops/s
# Warmup Iteration   7: 2470105.010 ops/s
# Warmup Iteration   8: 2447985.354 ops/s
# Warmup Iteration   9: 2452417.241 ops/s
# Warmup Iteration  10: 2443344.501 ops/s
# Warmup Iteration  11: 2454842.254 ops/s
# Warmup Iteration  12: 2455743.619 ops/s
# Warmup Iteration  13: 2443321.642 ops/s
# Warmup Iteration  14: 2422458.064 ops/s
# Warmup Iteration  15: 2456163.094 ops/s
# Warmup Iteration  16: 2451089.897 ops/s
# Warmup Iteration  17: 2468717.807 ops/s
# Warmup Iteration  18: 2450027.732 ops/s
# Warmup Iteration  19: 2478824.432 ops/s
# Warmup Iteration  20: 2469898.481 ops/s
# Warmup Iteration  21: 2474290.830 ops/s
# Warmup Iteration  22: 2459670.106 ops/s
# Warmup Iteration  23: 2458933.952 ops/s
# Warmup Iteration  24: 2484984.477 ops/s
# Warmup Iteration  25: 2485240.594 ops/s
# Warmup Iteration  26: 2488850.268 ops/s
# Warmup Iteration  27: 2474450.796 ops/s
# Warmup Iteration  28: 2470119.886 ops/s
# Warmup Iteration  29: 2455883.717 ops/s
# Warmup Iteration  30: 2482045.035 ops/s
Iteration   1: 2436035.678 ops/s
Iteration   2: 2454226.136 ops/s
Iteration   3: 2465283.288 ops/s
Iteration   4: 2499224.426 ops/s
Iteration   5: 2433493.806 ops/s
Iteration   6: 2484617.875 ops/s
Iteration   7: 2487185.862 ops/s
Iteration   8: 2467469.317 ops/s
Iteration   9: 2483637.420 ops/s
Iteration  10: 2487707.912 ops/s
Iteration  11: 2476260.706 ops/s
Iteration  12: 2475274.882 ops/s
Iteration  13: 2479869.775 ops/s
Iteration  14: 2477635.522 ops/s
Iteration  15: 2479702.014 ops/s
Iteration  16: 2450182.849 ops/s
Iteration  17: 2484321.351 ops/s
Iteration  18: 2473121.243 ops/s
Iteration  19: 2468718.862 ops/s
Iteration  20: 2482873.226 ops/s
Iteration  21: 2462209.884 ops/s
Iteration  22: 2476918.318 ops/s
Iteration  23: 2483806.042 ops/s
Iteration  24: 2477714.579 ops/s
Iteration  25: 2483933.258 ops/s
Iteration  26: 2480785.170 ops/s
Iteration  27: 2438782.196 ops/s
Iteration  28: 2483304.798 ops/s
Iteration  29: 2475820.768 ops/s
Iteration  30: 2483740.250 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_distinctBy":
  2473128.580 ±(99.9%) 10721.376 ops/s [Average]
  (min, avg, max) = (2433493.806, 2473128.580, 2499224.426), stdev = 16047.252
  CI (99.9%): [2462407.205, 2483849.956] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_distinctBy  thrpt   30  2473128.580 ± 10721.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1096499.269 ops/s
# Warmup Iteration   2: 2484801.715 ops/s
# Warmup Iteration   3: 2511198.921 ops/s
# Warmup Iteration   4: 2106810.857 ops/s
# Warmup Iteration   5: 2517993.499 ops/s
# Warmup Iteration   6: 2531996.015 ops/s
# Warmup Iteration   7: 2492300.342 ops/s
# Warmup Iteration   8: 2524344.584 ops/s
# Warmup Iteration   9: 2527278.077 ops/s
# Warmup Iteration  10: 2532401.641 ops/s
# Warmup Iteration  11: 2536188.292 ops/s
# Warmup Iteration  12: 2530938.676 ops/s
# Warmup Iteration  13: 2524955.306 ops/s
# Warmup Iteration  14: 2521715.590 ops/s
# Warmup Iteration  15: 2514307.964 ops/s
# Warmup Iteration  16: 2528342.616 ops/s
# Warmup Iteration  17: 2522573.717 ops/s
# Warmup Iteration  18: 2535102.800 ops/s
# Warmup Iteration  19: 2538377.135 ops/s
# Warmup Iteration  20: 2539383.120 ops/s
# Warmup Iteration  21: 2528680.591 ops/s
# Warmup Iteration  22: 2541425.134 ops/s
# Warmup Iteration  23: 2527159.139 ops/s
# Warmup Iteration  24: 2531026.325 ops/s
# Warmup Iteration  25: 2536644.729 ops/s
# Warmup Iteration  26: 2532007.135 ops/s
# Warmup Iteration  27: 2528916.071 ops/s
# Warmup Iteration  28: 2534450.961 ops/s
# Warmup Iteration  29: 2514610.159 ops/s
# Warmup Iteration  30: 2516548.489 ops/s
Iteration   1: 2524811.612 ops/s
Iteration   2: 2512477.825 ops/s
Iteration   3: 2532974.064 ops/s
Iteration   4: 2529167.978 ops/s
Iteration   5: 2535909.833 ops/s
Iteration   6: 2535666.659 ops/s
Iteration   7: 2521646.275 ops/s
Iteration   8: 2536783.722 ops/s
Iteration   9: 2535541.094 ops/s
Iteration  10: 2504023.207 ops/s
Iteration  11: 2532976.546 ops/s
Iteration  12: 2546226.829 ops/s
Iteration  13: 2489805.424 ops/s
Iteration  14: 2545251.888 ops/s
Iteration  15: 2532112.453 ops/s
Iteration  16: 2536164.416 ops/s
Iteration  17: 2517474.541 ops/s
Iteration  18: 2540200.111 ops/s
Iteration  19: 2485871.731 ops/s
Iteration  20: 2523319.132 ops/s
Iteration  21: 2540438.148 ops/s
Iteration  22: 2546461.342 ops/s
Iteration  23: 2538770.366 ops/s
Iteration  24: 2528277.311 ops/s
Iteration  25: 2535479.200 ops/s
Iteration  26: 2531326.381 ops/s
Iteration  27: 2529289.505 ops/s
Iteration  28: 2521679.557 ops/s
Iteration  29: 2524116.289 ops/s
Iteration  30: 2540074.537 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_distinctWithHashingStrategy":
  2528477.266 ±(99.9%) 9828.170 ops/s [Average]
  (min, avg, max) = (2485871.731, 2528477.266, 2546461.342), stdev = 14710.343
  CI (99.9%): [2518649.096, 2538305.436] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  2528477.266 ± 9828.170  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1322428.931 ops/s
# Warmup Iteration   2: 3034754.843 ops/s
# Warmup Iteration   3: 3120774.076 ops/s
# Warmup Iteration   4: 2581970.543 ops/s
# Warmup Iteration   5: 3129978.658 ops/s
# Warmup Iteration   6: 3080525.492 ops/s
# Warmup Iteration   7: 3125314.395 ops/s
# Warmup Iteration   8: 3104496.929 ops/s
# Warmup Iteration   9: 3092213.793 ops/s
# Warmup Iteration  10: 3125807.890 ops/s
# Warmup Iteration  11: 3124407.004 ops/s
# Warmup Iteration  12: 3134320.215 ops/s
# Warmup Iteration  13: 3129696.100 ops/s
# Warmup Iteration  14: 3109498.947 ops/s
# Warmup Iteration  15: 3125682.581 ops/s
# Warmup Iteration  16: 3129598.425 ops/s
# Warmup Iteration  17: 3120573.388 ops/s
# Warmup Iteration  18: 3121233.381 ops/s
# Warmup Iteration  19: 3119776.397 ops/s
# Warmup Iteration  20: 3130578.572 ops/s
# Warmup Iteration  21: 3100733.531 ops/s
# Warmup Iteration  22: 3133920.787 ops/s
# Warmup Iteration  23: 3109146.078 ops/s
# Warmup Iteration  24: 3130837.556 ops/s
# Warmup Iteration  25: 3098440.029 ops/s
# Warmup Iteration  26: 3127373.887 ops/s
# Warmup Iteration  27: 3051671.456 ops/s
# Warmup Iteration  28: 3121847.726 ops/s
# Warmup Iteration  29: 3094211.422 ops/s
# Warmup Iteration  30: 3083963.768 ops/s
Iteration   1: 3138204.281 ops/s
Iteration   2: 3130725.273 ops/s
Iteration   3: 3116752.629 ops/s
Iteration   4: 3080006.266 ops/s
Iteration   5: 3037738.651 ops/s
Iteration   6: 3117074.694 ops/s
Iteration   7: 3066039.631 ops/s
Iteration   8: 3125211.533 ops/s
Iteration   9: 3078464.507 ops/s
Iteration  10: 3116244.142 ops/s
Iteration  11: 3120531.160 ops/s
Iteration  12: 3132853.641 ops/s
Iteration  13: 3128241.901 ops/s
Iteration  14: 3119625.242 ops/s
Iteration  15: 3136439.234 ops/s
Iteration  16: 3130258.958 ops/s
Iteration  17: 3123513.641 ops/s
Iteration  18: 3116309.477 ops/s
Iteration  19: 3137639.144 ops/s
Iteration  20: 3129681.045 ops/s
Iteration  21: 3114223.006 ops/s
Iteration  22: 3132746.075 ops/s
Iteration  23: 3133118.021 ops/s
Iteration  24: 3131712.426 ops/s
Iteration  25: 3127208.088 ops/s
Iteration  26: 3128656.221 ops/s
Iteration  27: 3075898.159 ops/s
Iteration  28: 3129569.568 ops/s
Iteration  29: 3108539.837 ops/s
Iteration  30: 3130016.472 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_drop":
  3116441.431 ±(99.9%) 16209.582 ops/s [Average]
  (min, avg, max) = (3037738.651, 3116441.431, 3138204.281), stdev = 24261.742
  CI (99.9%): [3100231.848, 3132651.013] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_drop  thrpt   30  3116441.431 ± 16209.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1498845.848 ops/s
# Warmup Iteration   2: 3396855.805 ops/s
# Warmup Iteration   3: 2848611.086 ops/s
# Warmup Iteration   4: 3363477.213 ops/s
# Warmup Iteration   5: 3420940.179 ops/s
# Warmup Iteration   6: 3423339.403 ops/s
# Warmup Iteration   7: 3418055.014 ops/s
# Warmup Iteration   8: 3412485.265 ops/s
# Warmup Iteration   9: 3408016.153 ops/s
# Warmup Iteration  10: 3410870.600 ops/s
# Warmup Iteration  11: 3404510.010 ops/s
# Warmup Iteration  12: 3369034.695 ops/s
# Warmup Iteration  13: 3388311.371 ops/s
# Warmup Iteration  14: 3412152.892 ops/s
# Warmup Iteration  15: 3410278.580 ops/s
# Warmup Iteration  16: 3414237.131 ops/s
# Warmup Iteration  17: 3380032.462 ops/s
# Warmup Iteration  18: 3380762.293 ops/s
# Warmup Iteration  19: 3379248.084 ops/s
# Warmup Iteration  20: 3366451.003 ops/s
# Warmup Iteration  21: 3403421.419 ops/s
# Warmup Iteration  22: 3374679.160 ops/s
# Warmup Iteration  23: 3359384.644 ops/s
# Warmup Iteration  24: 3377854.592 ops/s
# Warmup Iteration  25: 3368310.578 ops/s
# Warmup Iteration  26: 3388399.547 ops/s
# Warmup Iteration  27: 3385629.905 ops/s
# Warmup Iteration  28: 3351288.816 ops/s
# Warmup Iteration  29: 3336097.739 ops/s
# Warmup Iteration  30: 3385974.897 ops/s
Iteration   1: 3322972.434 ops/s
Iteration   2: 3395038.805 ops/s
Iteration   3: 3398179.067 ops/s
Iteration   4: 3348312.069 ops/s
Iteration   5: 3394663.905 ops/s
Iteration   6: 3388501.497 ops/s
Iteration   7: 3324472.760 ops/s
Iteration   8: 3359506.941 ops/s
Iteration   9: 3375887.905 ops/s
Iteration  10: 3393936.232 ops/s
Iteration  11: 3360714.768 ops/s
Iteration  12: 3406706.365 ops/s
Iteration  13: 3382746.342 ops/s
Iteration  14: 3377079.624 ops/s
Iteration  15: 3380595.118 ops/s
Iteration  16: 3379189.454 ops/s
Iteration  17: 3392755.239 ops/s
Iteration  18: 3381026.741 ops/s
Iteration  19: 3380021.488 ops/s
Iteration  20: 3384793.444 ops/s
Iteration  21: 3298770.788 ops/s
Iteration  22: 3396720.927 ops/s
Iteration  23: 3377865.935 ops/s
Iteration  24: 3352259.563 ops/s
Iteration  25: 3383910.136 ops/s
Iteration  26: 3397923.408 ops/s
Iteration  27: 3378635.044 ops/s
Iteration  28: 3388908.518 ops/s
Iteration  29: 3380969.824 ops/s
Iteration  30: 3386248.239 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_dropWhile":
  3375643.753 ±(99.9%) 16479.630 ops/s [Average]
  (min, avg, max) = (3298770.788, 3375643.753, 3406706.365), stdev = 24665.936
  CI (99.9%): [3359164.123, 3392123.382] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_dropWhile  thrpt   30  3375643.753 ± 16479.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 615705.579 ops/s
# Warmup Iteration   2: 722657.841 ops/s
# Warmup Iteration   3: 906024.176 ops/s
# Warmup Iteration   4: 911551.109 ops/s
# Warmup Iteration   5: 911884.595 ops/s
# Warmup Iteration   6: 915792.553 ops/s
# Warmup Iteration   7: 905227.492 ops/s
# Warmup Iteration   8: 912280.663 ops/s
# Warmup Iteration   9: 875190.614 ops/s
# Warmup Iteration  10: 805477.384 ops/s
# Warmup Iteration  11: 913536.149 ops/s
# Warmup Iteration  12: 912896.721 ops/s
# Warmup Iteration  13: 911793.451 ops/s
# Warmup Iteration  14: 914115.062 ops/s
# Warmup Iteration  15: 898420.988 ops/s
# Warmup Iteration  16: 897791.698 ops/s
# Warmup Iteration  17: 958824.235 ops/s
# Warmup Iteration  18: 963682.474 ops/s
# Warmup Iteration  19: 961667.166 ops/s
# Warmup Iteration  20: 958389.134 ops/s
# Warmup Iteration  21: 962364.279 ops/s
# Warmup Iteration  22: 956370.980 ops/s
# Warmup Iteration  23: 958103.958 ops/s
# Warmup Iteration  24: 956932.005 ops/s
# Warmup Iteration  25: 951128.696 ops/s
# Warmup Iteration  26: 949156.757 ops/s
# Warmup Iteration  27: 961831.212 ops/s
# Warmup Iteration  28: 951462.377 ops/s
# Warmup Iteration  29: 958684.879 ops/s
# Warmup Iteration  30: 960889.733 ops/s
Iteration   1: 961932.819 ops/s
Iteration   2: 962165.007 ops/s
Iteration   3: 960344.261 ops/s
Iteration   4: 963678.763 ops/s
Iteration   5: 955138.783 ops/s
Iteration   6: 964435.045 ops/s
Iteration   7: 943167.509 ops/s
Iteration   8: 964035.509 ops/s
Iteration   9: 960291.898 ops/s
Iteration  10: 961420.425 ops/s
Iteration  11: 960931.003 ops/s
Iteration  12: 958110.757 ops/s
Iteration  13: 962599.417 ops/s
Iteration  14: 965064.279 ops/s
Iteration  15: 958453.733 ops/s
Iteration  16: 964821.889 ops/s
Iteration  17: 965508.759 ops/s
Iteration  18: 961073.860 ops/s
Iteration  19: 968428.493 ops/s
Iteration  20: 947577.060 ops/s
Iteration  21: 962055.098 ops/s
Iteration  22: 963950.229 ops/s
Iteration  23: 961314.467 ops/s
Iteration  24: 962780.005 ops/s
Iteration  25: 954682.859 ops/s
Iteration  26: 955307.786 ops/s
Iteration  27: 960013.603 ops/s
Iteration  28: 958582.867 ops/s
Iteration  29: 962694.312 ops/s
Iteration  30: 949962.484 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_drop_throws":
  960017.433 ±(99.9%) 3672.065 ops/s [Average]
  (min, avg, max) = (943167.509, 960017.433, 968428.493), stdev = 5496.174
  CI (99.9%): [956345.368, 963689.497] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_drop_throws  thrpt   30  960017.433 ± 3672.065  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2482984.519 ops/s
# Warmup Iteration   2: 5258052.841 ops/s
# Warmup Iteration   3: 4427434.241 ops/s
# Warmup Iteration   4: 5217561.727 ops/s
# Warmup Iteration   5: 5157877.966 ops/s
# Warmup Iteration   6: 5169519.922 ops/s
# Warmup Iteration   7: 5172676.230 ops/s
# Warmup Iteration   8: 5213888.409 ops/s
# Warmup Iteration   9: 5196532.865 ops/s
# Warmup Iteration  10: 5211363.807 ops/s
# Warmup Iteration  11: 5200707.811 ops/s
# Warmup Iteration  12: 5184300.213 ops/s
# Warmup Iteration  13: 5200067.809 ops/s
# Warmup Iteration  14: 5198210.555 ops/s
# Warmup Iteration  15: 5198595.201 ops/s
# Warmup Iteration  16: 5182670.730 ops/s
# Warmup Iteration  17: 5219014.771 ops/s
# Warmup Iteration  18: 5210059.262 ops/s
# Warmup Iteration  19: 5314901.592 ops/s
# Warmup Iteration  20: 5249153.809 ops/s
# Warmup Iteration  21: 5256016.861 ops/s
# Warmup Iteration  22: 5257654.511 ops/s
# Warmup Iteration  23: 5164060.549 ops/s
# Warmup Iteration  24: 5256712.205 ops/s
# Warmup Iteration  25: 5257731.002 ops/s
# Warmup Iteration  26: 5231758.809 ops/s
# Warmup Iteration  27: 5265851.349 ops/s
# Warmup Iteration  28: 5249593.250 ops/s
# Warmup Iteration  29: 5250806.187 ops/s
# Warmup Iteration  30: 5265928.399 ops/s
Iteration   1: 5252617.971 ops/s
Iteration   2: 5280109.797 ops/s
Iteration   3: 5262388.245 ops/s
Iteration   4: 5265111.049 ops/s
Iteration   5: 5288549.775 ops/s
Iteration   6: 5288510.981 ops/s
Iteration   7: 5195101.864 ops/s
Iteration   8: 5282238.382 ops/s
Iteration   9: 5270571.870 ops/s
Iteration  10: 5275723.377 ops/s
Iteration  11: 5228058.642 ops/s
Iteration  12: 5272820.531 ops/s
Iteration  13: 5259489.381 ops/s
Iteration  14: 5274769.744 ops/s
Iteration  15: 5266636.018 ops/s
Iteration  16: 5268496.850 ops/s
Iteration  17: 5298831.051 ops/s
Iteration  18: 5278180.307 ops/s
Iteration  19: 5272682.323 ops/s
Iteration  20: 5262125.581 ops/s
Iteration  21: 5262689.904 ops/s
Iteration  22: 5258538.523 ops/s
Iteration  23: 5258913.410 ops/s
Iteration  24: 5251484.615 ops/s
Iteration  25: 5251157.747 ops/s
Iteration  26: 5249530.401 ops/s
Iteration  27: 5238542.545 ops/s
Iteration  28: 5252889.171 ops/s
Iteration  29: 5162685.153 ops/s
Iteration  30: 5150117.152 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_empty":
  5255985.412 ±(99.9%) 22383.327 ops/s [Average]
  (min, avg, max) = (5150117.152, 5255985.412, 5298831.051), stdev = 33502.312
  CI (99.9%): [5233602.085, 5278368.739] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_empty  thrpt   30  5255985.412 ± 22383.327  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 116721.266 ops/s
# Warmup Iteration   2: 246342.551 ops/s
# Warmup Iteration   3: 257825.501 ops/s
# Warmup Iteration   4: 259286.969 ops/s
# Warmup Iteration   5: 216955.619 ops/s
# Warmup Iteration   6: 260670.551 ops/s
# Warmup Iteration   7: 260835.363 ops/s
# Warmup Iteration   8: 260368.501 ops/s
# Warmup Iteration   9: 261424.095 ops/s
# Warmup Iteration  10: 260786.872 ops/s
# Warmup Iteration  11: 260180.575 ops/s
# Warmup Iteration  12: 260241.722 ops/s
# Warmup Iteration  13: 259317.156 ops/s
# Warmup Iteration  14: 260737.201 ops/s
# Warmup Iteration  15: 260128.772 ops/s
# Warmup Iteration  16: 258683.042 ops/s
# Warmup Iteration  17: 257985.910 ops/s
# Warmup Iteration  18: 259520.997 ops/s
# Warmup Iteration  19: 260529.516 ops/s
# Warmup Iteration  20: 258074.445 ops/s
# Warmup Iteration  21: 260379.791 ops/s
# Warmup Iteration  22: 260621.584 ops/s
# Warmup Iteration  23: 259066.552 ops/s
# Warmup Iteration  24: 261011.603 ops/s
# Warmup Iteration  25: 258201.078 ops/s
# Warmup Iteration  26: 259870.977 ops/s
# Warmup Iteration  27: 259375.815 ops/s
# Warmup Iteration  28: 260347.483 ops/s
# Warmup Iteration  29: 261129.450 ops/s
# Warmup Iteration  30: 261334.804 ops/s
Iteration   1: 260429.322 ops/s
Iteration   2: 261130.643 ops/s
Iteration   3: 257624.295 ops/s
Iteration   4: 260683.585 ops/s
Iteration   5: 260370.882 ops/s
Iteration   6: 262113.307 ops/s
Iteration   7: 257980.861 ops/s
Iteration   8: 260074.798 ops/s
Iteration   9: 259593.591 ops/s
Iteration  10: 256012.431 ops/s
Iteration  11: 260262.027 ops/s
Iteration  12: 257648.243 ops/s
Iteration  13: 259677.144 ops/s
Iteration  14: 260818.226 ops/s
Iteration  15: 260667.667 ops/s
Iteration  16: 256536.371 ops/s
Iteration  17: 260917.729 ops/s
Iteration  18: 261517.533 ops/s
Iteration  19: 259738.052 ops/s
Iteration  20: 260140.741 ops/s
Iteration  21: 258734.829 ops/s
Iteration  22: 260860.563 ops/s
Iteration  23: 261105.598 ops/s
Iteration  24: 261125.627 ops/s
Iteration  25: 260181.801 ops/s
Iteration  26: 260543.164 ops/s
Iteration  27: 259074.400 ops/s
Iteration  28: 259559.478 ops/s
Iteration  29: 261490.296 ops/s
Iteration  30: 261343.710 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_equalsAndHashCode":
  259931.897 ±(99.9%) 996.177 ops/s [Average]
  (min, avg, max) = (256012.431, 259931.897, 262113.307), stdev = 1491.031
  CI (99.9%): [258935.720, 260928.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score     Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  259931.897 ± 996.177  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 437204.428 ops/s
# Warmup Iteration   2: 666495.116 ops/s
# Warmup Iteration   3: 780146.005 ops/s
# Warmup Iteration   4: 792176.351 ops/s
# Warmup Iteration   5: 787975.340 ops/s
# Warmup Iteration   6: 787690.669 ops/s
# Warmup Iteration   7: 656218.254 ops/s
# Warmup Iteration   8: 789959.095 ops/s
# Warmup Iteration   9: 786337.021 ops/s
# Warmup Iteration  10: 787341.270 ops/s
# Warmup Iteration  11: 787082.671 ops/s
# Warmup Iteration  12: 786609.014 ops/s
# Warmup Iteration  13: 789827.924 ops/s
# Warmup Iteration  14: 785912.877 ops/s
# Warmup Iteration  15: 787082.762 ops/s
# Warmup Iteration  16: 788713.453 ops/s
# Warmup Iteration  17: 783742.688 ops/s
# Warmup Iteration  18: 787442.253 ops/s
# Warmup Iteration  19: 780995.581 ops/s
# Warmup Iteration  20: 786516.402 ops/s
# Warmup Iteration  21: 783963.930 ops/s
# Warmup Iteration  22: 788489.068 ops/s
# Warmup Iteration  23: 787791.958 ops/s
# Warmup Iteration  24: 786584.238 ops/s
# Warmup Iteration  25: 775872.440 ops/s
# Warmup Iteration  26: 777219.282 ops/s
# Warmup Iteration  27: 791081.079 ops/s
# Warmup Iteration  28: 789680.662 ops/s
# Warmup Iteration  29: 784474.204 ops/s
# Warmup Iteration  30: 780609.231 ops/s
Iteration   1: 778115.662 ops/s
Iteration   2: 788181.443 ops/s
Iteration   3: 780510.477 ops/s
Iteration   4: 790615.542 ops/s
Iteration   5: 788453.436 ops/s
Iteration   6: 777071.309 ops/s
Iteration   7: 785443.947 ops/s
Iteration   8: 791704.180 ops/s
Iteration   9: 792844.296 ops/s
Iteration  10: 787099.061 ops/s
Iteration  11: 788725.099 ops/s
Iteration  12: 787074.039 ops/s
Iteration  13: 789089.312 ops/s
Iteration  14: 786100.191 ops/s
Iteration  15: 783976.110 ops/s
Iteration  16: 791989.250 ops/s
Iteration  17: 789967.206 ops/s
Iteration  18: 794426.942 ops/s
Iteration  19: 787491.199 ops/s
Iteration  20: 782463.554 ops/s
Iteration  21: 783947.379 ops/s
Iteration  22: 788233.923 ops/s
Iteration  23: 793032.206 ops/s
Iteration  24: 786695.972 ops/s
Iteration  25: 787411.433 ops/s
Iteration  26: 786615.094 ops/s
Iteration  27: 790347.804 ops/s
Iteration  28: 787082.607 ops/s
Iteration  29: 778409.453 ops/s
Iteration  30: 788350.609 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollect":
  787048.958 ±(99.9%) 2926.212 ops/s [Average]
  (min, avg, max) = (777071.309, 787048.958, 794426.942), stdev = 4379.816
  CI (99.9%): [784122.746, 789975.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollect  thrpt   30  787048.958 ± 2926.212  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1611368.517 ops/s
# Warmup Iteration   2: 3858234.319 ops/s
# Warmup Iteration   3: 3252015.393 ops/s
# Warmup Iteration   4: 3842396.208 ops/s
# Warmup Iteration   5: 3879268.576 ops/s
# Warmup Iteration   6: 3869879.864 ops/s
# Warmup Iteration   7: 3865527.165 ops/s
# Warmup Iteration   8: 3866292.778 ops/s
# Warmup Iteration   9: 3877665.127 ops/s
# Warmup Iteration  10: 3825513.099 ops/s
# Warmup Iteration  11: 3868861.462 ops/s
# Warmup Iteration  12: 3871727.092 ops/s
# Warmup Iteration  13: 3889654.078 ops/s
# Warmup Iteration  14: 3892489.936 ops/s
# Warmup Iteration  15: 3897671.911 ops/s
# Warmup Iteration  16: 3893295.568 ops/s
# Warmup Iteration  17: 3888557.319 ops/s
# Warmup Iteration  18: 3891050.340 ops/s
# Warmup Iteration  19: 3898780.237 ops/s
# Warmup Iteration  20: 3895059.976 ops/s
# Warmup Iteration  21: 3865993.849 ops/s
# Warmup Iteration  22: 3908378.740 ops/s
# Warmup Iteration  23: 3865364.661 ops/s
# Warmup Iteration  24: 3895815.987 ops/s
# Warmup Iteration  25: 3890348.563 ops/s
# Warmup Iteration  26: 3886987.558 ops/s
# Warmup Iteration  27: 3866113.688 ops/s
# Warmup Iteration  28: 3909070.041 ops/s
# Warmup Iteration  29: 3866252.337 ops/s
# Warmup Iteration  30: 3847333.303 ops/s
Iteration   1: 3826688.628 ops/s
Iteration   2: 3900543.648 ops/s
Iteration   3: 3832536.002 ops/s
Iteration   4: 3876732.903 ops/s
Iteration   5: 3877268.727 ops/s
Iteration   6: 3828912.577 ops/s
Iteration   7: 3881080.289 ops/s
Iteration   8: 3913544.223 ops/s
Iteration   9: 3838361.636 ops/s
Iteration  10: 3896834.100 ops/s
Iteration  11: 3886112.196 ops/s
Iteration  12: 3909891.047 ops/s
Iteration  13: 3910171.495 ops/s
Iteration  14: 3876317.158 ops/s
Iteration  15: 3908619.121 ops/s
Iteration  16: 3926944.290 ops/s
Iteration  17: 3916419.533 ops/s
Iteration  18: 3894977.091 ops/s
Iteration  19: 3908290.741 ops/s
Iteration  20: 3860124.829 ops/s
Iteration  21: 3879877.889 ops/s
Iteration  22: 3779272.635 ops/s
Iteration  23: 3906462.576 ops/s
Iteration  24: 3905927.603 ops/s
Iteration  25: 3891085.578 ops/s
Iteration  26: 3865972.139 ops/s
Iteration  27: 3898207.112 ops/s
Iteration  28: 3883444.332 ops/s
Iteration  29: 3875293.156 ops/s
Iteration  30: 3900319.288 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectBoolean":
  3881874.418 ±(99.9%) 21992.630 ops/s [Average]
  (min, avg, max) = (3779272.635, 3881874.418, 3926944.290), stdev = 32917.535
  CI (99.9%): [3859881.788, 3903867.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  3881874.418 ± 21992.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 666493.388 ops/s
# Warmup Iteration   2: 1123696.136 ops/s
# Warmup Iteration   3: 1308806.796 ops/s
# Warmup Iteration   4: 1297594.679 ops/s
# Warmup Iteration   5: 1311424.761 ops/s
# Warmup Iteration   6: 1094413.785 ops/s
# Warmup Iteration   7: 1313040.180 ops/s
# Warmup Iteration   8: 1312087.065 ops/s
# Warmup Iteration   9: 1318719.332 ops/s
# Warmup Iteration  10: 1302281.657 ops/s
# Warmup Iteration  11: 1311982.691 ops/s
# Warmup Iteration  12: 1309427.827 ops/s
# Warmup Iteration  13: 1313867.735 ops/s
# Warmup Iteration  14: 1308235.498 ops/s
# Warmup Iteration  15: 1309806.406 ops/s
# Warmup Iteration  16: 1309314.050 ops/s
# Warmup Iteration  17: 1303278.729 ops/s
# Warmup Iteration  18: 1314589.965 ops/s
# Warmup Iteration  19: 1301682.327 ops/s
# Warmup Iteration  20: 1309389.734 ops/s
# Warmup Iteration  21: 1319668.608 ops/s
# Warmup Iteration  22: 1314537.511 ops/s
# Warmup Iteration  23: 1314630.392 ops/s
# Warmup Iteration  24: 1314411.103 ops/s
# Warmup Iteration  25: 1310569.101 ops/s
# Warmup Iteration  26: 1291174.484 ops/s
# Warmup Iteration  27: 1307800.521 ops/s
# Warmup Iteration  28: 1298722.699 ops/s
# Warmup Iteration  29: 1307486.360 ops/s
# Warmup Iteration  30: 1308094.303 ops/s
Iteration   1: 1299498.967 ops/s
Iteration   2: 1301204.947 ops/s
Iteration   3: 1303489.458 ops/s
Iteration   4: 1300642.151 ops/s
Iteration   5: 1308216.675 ops/s
Iteration   6: 1304820.445 ops/s
Iteration   7: 1292577.931 ops/s
Iteration   8: 1312266.522 ops/s
Iteration   9: 1311029.047 ops/s
Iteration  10: 1313036.436 ops/s
Iteration  11: 1308507.133 ops/s
Iteration  12: 1310634.674 ops/s
Iteration  13: 1313366.715 ops/s
Iteration  14: 1311412.643 ops/s
Iteration  15: 1314678.352 ops/s
Iteration  16: 1313138.535 ops/s
Iteration  17: 1310027.247 ops/s
Iteration  18: 1310985.119 ops/s
Iteration  19: 1316464.718 ops/s
Iteration  20: 1316113.048 ops/s
Iteration  21: 1309853.927 ops/s
Iteration  22: 1302539.971 ops/s
Iteration  23: 1312253.223 ops/s
Iteration  24: 1300282.791 ops/s
Iteration  25: 1308332.331 ops/s
Iteration  26: 1312769.488 ops/s
Iteration  27: 1315360.937 ops/s
Iteration  28: 1318722.799 ops/s
Iteration  29: 1311057.293 ops/s
Iteration  30: 1310753.889 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectByte":
  1309134.580 ±(99.9%) 4008.747 ops/s [Average]
  (min, avg, max) = (1292577.931, 1309134.580, 1318722.799), stdev = 6000.104
  CI (99.9%): [1305125.833, 1313143.327] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1309134.580 ± 4008.747  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 883220.426 ops/s
# Warmup Iteration   2: 2207332.782 ops/s
# Warmup Iteration   3: 2199448.300 ops/s
# Warmup Iteration   4: 1843686.262 ops/s
# Warmup Iteration   5: 2197524.642 ops/s
# Warmup Iteration   6: 2199395.133 ops/s
# Warmup Iteration   7: 2196153.010 ops/s
# Warmup Iteration   8: 2193240.896 ops/s
# Warmup Iteration   9: 2200777.482 ops/s
# Warmup Iteration  10: 2201357.782 ops/s
# Warmup Iteration  11: 2199026.288 ops/s
# Warmup Iteration  12: 2185285.915 ops/s
# Warmup Iteration  13: 2188112.994 ops/s
# Warmup Iteration  14: 2202243.558 ops/s
# Warmup Iteration  15: 2199581.808 ops/s
# Warmup Iteration  16: 2200753.103 ops/s
# Warmup Iteration  17: 2213074.321 ops/s
# Warmup Iteration  18: 2194516.807 ops/s
# Warmup Iteration  19: 2216998.637 ops/s
# Warmup Iteration  20: 2184005.439 ops/s
# Warmup Iteration  21: 2209786.785 ops/s
# Warmup Iteration  22: 2193445.957 ops/s
# Warmup Iteration  23: 2206363.569 ops/s
# Warmup Iteration  24: 2194472.318 ops/s
# Warmup Iteration  25: 2209411.024 ops/s
# Warmup Iteration  26: 2210723.953 ops/s
# Warmup Iteration  27: 2215441.284 ops/s
# Warmup Iteration  28: 2210183.130 ops/s
# Warmup Iteration  29: 2199830.060 ops/s
# Warmup Iteration  30: 2175720.764 ops/s
Iteration   1: 2208979.848 ops/s
Iteration   2: 2178537.318 ops/s
Iteration   3: 2205671.839 ops/s
Iteration   4: 2217225.141 ops/s
Iteration   5: 2215596.368 ops/s
Iteration   6: 2215100.828 ops/s
Iteration   7: 2212908.988 ops/s
Iteration   8: 2217190.718 ops/s
Iteration   9: 2224367.373 ops/s
Iteration  10: 2211925.387 ops/s
Iteration  11: 2133603.410 ops/s
Iteration  12: 2206159.056 ops/s
Iteration  13: 2208837.786 ops/s
Iteration  14: 2199669.034 ops/s
Iteration  15: 2215170.715 ops/s
Iteration  16: 2205355.916 ops/s
Iteration  17: 2205078.913 ops/s
Iteration  18: 2214870.108 ops/s
Iteration  19: 2215990.255 ops/s
Iteration  20: 2209413.836 ops/s
Iteration  21: 2199807.363 ops/s
Iteration  22: 2207427.275 ops/s
Iteration  23: 2169426.375 ops/s
Iteration  24: 2195655.916 ops/s
Iteration  25: 2208918.138 ops/s
Iteration  26: 2203968.601 ops/s
Iteration  27: 2176688.126 ops/s
Iteration  28: 2214593.306 ops/s
Iteration  29: 2220511.004 ops/s
Iteration  30: 2214527.402 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectChar":
  2204439.211 ±(99.9%) 12291.477 ops/s [Average]
  (min, avg, max) = (2133603.410, 2204439.211, 2224367.373), stdev = 18397.305
  CI (99.9%): [2192147.735, 2216730.688] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectChar  thrpt   30  2204439.211 ± 12291.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 449115.532 ops/s
# Warmup Iteration   2: 1100351.083 ops/s
# Warmup Iteration   3: 1120677.136 ops/s
# Warmup Iteration   4: 934057.149 ops/s
# Warmup Iteration   5: 1132809.139 ops/s
# Warmup Iteration   6: 1125878.495 ops/s
# Warmup Iteration   7: 1122101.704 ops/s
# Warmup Iteration   8: 1127396.303 ops/s
# Warmup Iteration   9: 1124501.503 ops/s
# Warmup Iteration  10: 1122822.642 ops/s
# Warmup Iteration  11: 1116981.145 ops/s
# Warmup Iteration  12: 1122830.966 ops/s
# Warmup Iteration  13: 1128398.418 ops/s
# Warmup Iteration  14: 1124193.135 ops/s
# Warmup Iteration  15: 1123222.874 ops/s
# Warmup Iteration  16: 1128379.565 ops/s
# Warmup Iteration  17: 1126613.817 ops/s
# Warmup Iteration  18: 1123383.593 ops/s
# Warmup Iteration  19: 1125263.752 ops/s
# Warmup Iteration  20: 1125326.243 ops/s
# Warmup Iteration  21: 1120170.202 ops/s
# Warmup Iteration  22: 1114869.865 ops/s
# Warmup Iteration  23: 1115285.860 ops/s
# Warmup Iteration  24: 1115816.908 ops/s
# Warmup Iteration  25: 1123795.036 ops/s
# Warmup Iteration  26: 1125507.627 ops/s
# Warmup Iteration  27: 1127788.186 ops/s
# Warmup Iteration  28: 1129261.695 ops/s
# Warmup Iteration  29: 1121886.498 ops/s
# Warmup Iteration  30: 1118371.182 ops/s
Iteration   1: 1126545.683 ops/s
Iteration   2: 1126294.025 ops/s
Iteration   3: 1102015.527 ops/s
Iteration   4: 1125998.095 ops/s
Iteration   5: 1120980.755 ops/s
Iteration   6: 1124122.734 ops/s
Iteration   7: 1128811.648 ops/s
Iteration   8: 1117143.463 ops/s
Iteration   9: 1125392.082 ops/s
Iteration  10: 1128597.041 ops/s
Iteration  11: 1123642.896 ops/s
Iteration  12: 1121736.805 ops/s
Iteration  13: 1112606.425 ops/s
Iteration  14: 1128200.529 ops/s
Iteration  15: 1125708.894 ops/s
Iteration  16: 1124290.316 ops/s
Iteration  17: 1117599.070 ops/s
Iteration  18: 1127714.170 ops/s
Iteration  19: 1113891.880 ops/s
Iteration  20: 1120697.784 ops/s
Iteration  21: 1126780.863 ops/s
Iteration  22: 1118779.284 ops/s
Iteration  23: 1128960.700 ops/s
Iteration  24: 1126257.746 ops/s
Iteration  25: 1126597.193 ops/s
Iteration  26: 1120183.308 ops/s
Iteration  27: 1113825.766 ops/s
Iteration  28: 1128316.278 ops/s
Iteration  29: 1119604.479 ops/s
Iteration  30: 1121335.789 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectDouble":
  1122421.041 ±(99.9%) 4086.171 ops/s [Average]
  (min, avg, max) = (1102015.527, 1122421.041, 1128960.700), stdev = 6115.988
  CI (99.9%): [1118334.870, 1126507.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  1122421.041 ± 4086.171  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 650803.427 ops/s
# Warmup Iteration   2: 1570997.783 ops/s
# Warmup Iteration   3: 1607946.346 ops/s
# Warmup Iteration   4: 1343347.398 ops/s
# Warmup Iteration   5: 1613522.604 ops/s
# Warmup Iteration   6: 1607183.757 ops/s
# Warmup Iteration   7: 1607561.008 ops/s
# Warmup Iteration   8: 1591105.339 ops/s
# Warmup Iteration   9: 1611370.130 ops/s
# Warmup Iteration  10: 1602966.204 ops/s
# Warmup Iteration  11: 1601488.316 ops/s
# Warmup Iteration  12: 1605390.612 ops/s
# Warmup Iteration  13: 1593961.570 ops/s
# Warmup Iteration  14: 1593925.809 ops/s
# Warmup Iteration  15: 1606083.493 ops/s
# Warmup Iteration  16: 1594460.417 ops/s
# Warmup Iteration  17: 1598902.265 ops/s
# Warmup Iteration  18: 1599407.481 ops/s
# Warmup Iteration  19: 1599542.804 ops/s
# Warmup Iteration  20: 1604410.555 ops/s
# Warmup Iteration  21: 1596832.090 ops/s
# Warmup Iteration  22: 1607896.357 ops/s
# Warmup Iteration  23: 1594119.201 ops/s
# Warmup Iteration  24: 1598926.055 ops/s
# Warmup Iteration  25: 1594776.001 ops/s
# Warmup Iteration  26: 1605074.812 ops/s
# Warmup Iteration  27: 1608049.974 ops/s
# Warmup Iteration  28: 1611664.826 ops/s
# Warmup Iteration  29: 1600091.721 ops/s
# Warmup Iteration  30: 1592815.761 ops/s
Iteration   1: 1583216.713 ops/s
Iteration   2: 1600430.781 ops/s
Iteration   3: 1580965.888 ops/s
Iteration   4: 1606928.551 ops/s
Iteration   5: 1611266.139 ops/s
Iteration   6: 1601650.845 ops/s
Iteration   7: 1608997.375 ops/s
Iteration   8: 1616516.222 ops/s
Iteration   9: 1597906.423 ops/s
Iteration  10: 1613651.982 ops/s
Iteration  11: 1609892.904 ops/s
Iteration  12: 1584466.721 ops/s
Iteration  13: 1603877.638 ops/s
Iteration  14: 1594420.415 ops/s
Iteration  15: 1584447.606 ops/s
Iteration  16: 1603036.740 ops/s
Iteration  17: 1578615.176 ops/s
Iteration  18: 1607037.796 ops/s
Iteration  19: 1604299.815 ops/s
Iteration  20: 1616802.810 ops/s
Iteration  21: 1608275.186 ops/s
Iteration  22: 1615488.486 ops/s
Iteration  23: 1607071.107 ops/s
Iteration  24: 1606160.785 ops/s
Iteration  25: 1604973.452 ops/s
Iteration  26: 1613201.041 ops/s
Iteration  27: 1613332.596 ops/s
Iteration  28: 1608116.587 ops/s
Iteration  29: 1601552.102 ops/s
Iteration  30: 1585856.732 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectFloat":
  1602415.220 ±(99.9%) 7522.919 ops/s [Average]
  (min, avg, max) = (1578615.176, 1602415.220, 1616802.810), stdev = 11259.951
  CI (99.9%): [1594892.302, 1609938.139] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1602415.220 ± 7522.919  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 817920.587 ops/s
# Warmup Iteration   2: 2055182.014 ops/s
# Warmup Iteration   3: 2061398.286 ops/s
# Warmup Iteration   4: 1720530.848 ops/s
# Warmup Iteration   5: 2072739.614 ops/s
# Warmup Iteration   6: 2059888.350 ops/s
# Warmup Iteration   7: 2056935.580 ops/s
# Warmup Iteration   8: 2062863.439 ops/s
# Warmup Iteration   9: 2060637.785 ops/s
# Warmup Iteration  10: 2051145.513 ops/s
# Warmup Iteration  11: 2043393.670 ops/s
# Warmup Iteration  12: 2064254.682 ops/s
# Warmup Iteration  13: 2055043.712 ops/s
# Warmup Iteration  14: 2061036.864 ops/s
# Warmup Iteration  15: 2060921.735 ops/s
# Warmup Iteration  16: 2065019.648 ops/s
# Warmup Iteration  17: 2065532.209 ops/s
# Warmup Iteration  18: 2058619.935 ops/s
# Warmup Iteration  19: 2070185.561 ops/s
# Warmup Iteration  20: 2067068.973 ops/s
# Warmup Iteration  21: 2068943.173 ops/s
# Warmup Iteration  22: 2062958.810 ops/s
# Warmup Iteration  23: 2046966.385 ops/s
# Warmup Iteration  24: 2057084.771 ops/s
# Warmup Iteration  25: 2062276.169 ops/s
# Warmup Iteration  26: 2068295.666 ops/s
# Warmup Iteration  27: 2066528.913 ops/s
# Warmup Iteration  28: 2063035.329 ops/s
# Warmup Iteration  29: 2066375.615 ops/s
# Warmup Iteration  30: 2065290.628 ops/s
Iteration   1: 2047458.901 ops/s
Iteration   2: 2062977.340 ops/s
Iteration   3: 2059391.377 ops/s
Iteration   4: 2062939.829 ops/s
Iteration   5: 2071172.558 ops/s
Iteration   6: 2049388.979 ops/s
Iteration   7: 2053475.105 ops/s
Iteration   8: 2065860.123 ops/s
Iteration   9: 2061560.425 ops/s
Iteration  10: 2068491.421 ops/s
Iteration  11: 2051351.286 ops/s
Iteration  12: 2072925.718 ops/s
Iteration  13: 2047497.204 ops/s
Iteration  14: 2050898.381 ops/s
Iteration  15: 2040616.968 ops/s
Iteration  16: 2064420.429 ops/s
Iteration  17: 2054844.127 ops/s
Iteration  18: 2053834.479 ops/s
Iteration  19: 2066080.597 ops/s
Iteration  20: 2039153.023 ops/s
Iteration  21: 2073942.808 ops/s
Iteration  22: 2059905.417 ops/s
Iteration  23: 2067410.863 ops/s
Iteration  24: 2057103.266 ops/s
Iteration  25: 2059403.764 ops/s
Iteration  26: 2066221.001 ops/s
Iteration  27: 2074555.655 ops/s
Iteration  28: 2020048.096 ops/s
Iteration  29: 2065176.423 ops/s
Iteration  30: 2059003.587 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectInt":
  2058236.972 ±(99.9%) 7862.084 ops/s [Average]
  (min, avg, max) = (2020048.096, 2058236.972, 2074555.655), stdev = 11767.598
  CI (99.9%): [2050374.888, 2066099.056] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectInt  thrpt   30  2058236.972 ± 7862.084  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709842.831 ops/s
# Warmup Iteration   2: 1840404.888 ops/s
# Warmup Iteration   3: 1569134.563 ops/s
# Warmup Iteration   4: 1800951.354 ops/s
# Warmup Iteration   5: 1831817.352 ops/s
# Warmup Iteration   6: 1817385.112 ops/s
# Warmup Iteration   7: 1843459.617 ops/s
# Warmup Iteration   8: 1834065.281 ops/s
# Warmup Iteration   9: 1843691.719 ops/s
# Warmup Iteration  10: 1844585.681 ops/s
# Warmup Iteration  11: 1841006.710 ops/s
# Warmup Iteration  12: 1815026.069 ops/s
# Warmup Iteration  13: 1855785.683 ops/s
# Warmup Iteration  14: 1844358.154 ops/s
# Warmup Iteration  15: 1841974.772 ops/s
# Warmup Iteration  16: 1834782.655 ops/s
# Warmup Iteration  17: 1838800.559 ops/s
# Warmup Iteration  18: 1821261.958 ops/s
# Warmup Iteration  19: 1850858.106 ops/s
# Warmup Iteration  20: 1839290.200 ops/s
# Warmup Iteration  21: 1816001.491 ops/s
# Warmup Iteration  22: 1830716.519 ops/s
# Warmup Iteration  23: 1844997.249 ops/s
# Warmup Iteration  24: 1851654.099 ops/s
# Warmup Iteration  25: 1852384.352 ops/s
# Warmup Iteration  26: 1839765.046 ops/s
# Warmup Iteration  27: 1848426.688 ops/s
# Warmup Iteration  28: 1841722.371 ops/s
# Warmup Iteration  29: 1823506.285 ops/s
# Warmup Iteration  30: 1843976.147 ops/s
Iteration   1: 1827027.751 ops/s
Iteration   2: 1849160.791 ops/s
Iteration   3: 1852816.310 ops/s
Iteration   4: 1851429.198 ops/s
Iteration   5: 1841998.497 ops/s
Iteration   6: 1835829.733 ops/s
Iteration   7: 1857587.973 ops/s
Iteration   8: 1834613.752 ops/s
Iteration   9: 1849421.552 ops/s
Iteration  10: 1837907.187 ops/s
Iteration  11: 1844651.098 ops/s
Iteration  12: 1816843.584 ops/s
Iteration  13: 1843480.665 ops/s
Iteration  14: 1827518.760 ops/s
Iteration  15: 1847982.155 ops/s
Iteration  16: 1834870.553 ops/s
Iteration  17: 1822675.006 ops/s
Iteration  18: 1845578.356 ops/s
Iteration  19: 1847894.045 ops/s
Iteration  20: 1846166.321 ops/s
Iteration  21: 1814915.644 ops/s
Iteration  22: 1831916.168 ops/s
Iteration  23: 1840261.393 ops/s
Iteration  24: 1839573.572 ops/s
Iteration  25: 1846225.479 ops/s
Iteration  26: 1831442.991 ops/s
Iteration  27: 1844612.701 ops/s
Iteration  28: 1848814.789 ops/s
Iteration  29: 1837717.175 ops/s
Iteration  30: 1839644.160 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectLong":
  1839685.912 ±(99.9%) 6969.242 ops/s [Average]
  (min, avg, max) = (1814915.644, 1839685.912, 1857587.973), stdev = 10431.234
  CI (99.9%): [1832716.670, 1846655.154] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1839685.912 ± 6969.242  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 851370.215 ops/s
# Warmup Iteration   2: 2148856.704 ops/s
# Warmup Iteration   3: 2187942.713 ops/s
# Warmup Iteration   4: 1824987.170 ops/s
# Warmup Iteration   5: 2167955.012 ops/s
# Warmup Iteration   6: 2187491.571 ops/s
# Warmup Iteration   7: 2188817.541 ops/s
# Warmup Iteration   8: 2178151.404 ops/s
# Warmup Iteration   9: 2186550.501 ops/s
# Warmup Iteration  10: 2195342.176 ops/s
# Warmup Iteration  11: 2185825.003 ops/s
# Warmup Iteration  12: 2195102.756 ops/s
# Warmup Iteration  13: 2170632.219 ops/s
# Warmup Iteration  14: 2178398.132 ops/s
# Warmup Iteration  15: 2169965.345 ops/s
# Warmup Iteration  16: 2193008.809 ops/s
# Warmup Iteration  17: 2189381.915 ops/s
# Warmup Iteration  18: 2215502.612 ops/s
# Warmup Iteration  19: 2188095.648 ops/s
# Warmup Iteration  20: 2215957.903 ops/s
# Warmup Iteration  21: 2210513.032 ops/s
# Warmup Iteration  22: 2212779.637 ops/s
# Warmup Iteration  23: 2198685.758 ops/s
# Warmup Iteration  24: 2188457.306 ops/s
# Warmup Iteration  25: 2212905.891 ops/s
# Warmup Iteration  26: 2210343.456 ops/s
# Warmup Iteration  27: 2187313.251 ops/s
# Warmup Iteration  28: 2209696.068 ops/s
# Warmup Iteration  29: 2204766.688 ops/s
# Warmup Iteration  30: 2205999.851 ops/s
Iteration   1: 2203647.061 ops/s
Iteration   2: 2206709.504 ops/s
Iteration   3: 2204164.786 ops/s
Iteration   4: 2136616.256 ops/s
Iteration   5: 2208435.422 ops/s
Iteration   6: 2195403.462 ops/s
Iteration   7: 2179417.451 ops/s
Iteration   8: 2199583.368 ops/s
Iteration   9: 2205913.462 ops/s
Iteration  10: 2197066.070 ops/s
Iteration  11: 2212103.387 ops/s
Iteration  12: 2194441.852 ops/s
Iteration  13: 2214764.924 ops/s
Iteration  14: 2192371.826 ops/s
Iteration  15: 2177729.588 ops/s
Iteration  16: 2204282.105 ops/s
Iteration  17: 2170388.105 ops/s
Iteration  18: 2167944.207 ops/s
Iteration  19: 2211457.138 ops/s
Iteration  20: 2196919.491 ops/s
Iteration  21: 2189859.398 ops/s
Iteration  22: 2192129.985 ops/s
Iteration  23: 2190893.073 ops/s
Iteration  24: 2215779.708 ops/s
Iteration  25: 2212146.465 ops/s
Iteration  26: 2211583.488 ops/s
Iteration  27: 2207628.619 ops/s
Iteration  28: 2160141.596 ops/s
Iteration  29: 2212118.989 ops/s
Iteration  30: 2191719.329 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectShort":
  2195445.337 ±(99.9%) 12209.146 ops/s [Average]
  (min, avg, max) = (2136616.256, 2195445.337, 2215779.708), stdev = 18274.077
  CI (99.9%): [2183236.191, 2207654.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectShort  thrpt   30  2195445.337 ± 12209.146  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 212855.180 ops/s
# Warmup Iteration   2: 382854.698 ops/s
# Warmup Iteration   3: 443764.826 ops/s
# Warmup Iteration   4: 450418.524 ops/s
# Warmup Iteration   5: 449420.057 ops/s
# Warmup Iteration   6: 370528.066 ops/s
# Warmup Iteration   7: 450217.124 ops/s
# Warmup Iteration   8: 449631.466 ops/s
# Warmup Iteration   9: 451262.251 ops/s
# Warmup Iteration  10: 443593.736 ops/s
# Warmup Iteration  11: 450063.829 ops/s
# Warmup Iteration  12: 449713.879 ops/s
# Warmup Iteration  13: 446869.558 ops/s
# Warmup Iteration  14: 451309.235 ops/s
# Warmup Iteration  15: 447954.147 ops/s
# Warmup Iteration  16: 450009.223 ops/s
# Warmup Iteration  17: 449533.127 ops/s
# Warmup Iteration  18: 451332.355 ops/s
# Warmup Iteration  19: 451244.039 ops/s
# Warmup Iteration  20: 446721.890 ops/s
# Warmup Iteration  21: 451861.607 ops/s
# Warmup Iteration  22: 450462.329 ops/s
# Warmup Iteration  23: 449242.358 ops/s
# Warmup Iteration  24: 449169.770 ops/s
# Warmup Iteration  25: 450902.443 ops/s
# Warmup Iteration  26: 450618.048 ops/s
# Warmup Iteration  27: 443229.489 ops/s
# Warmup Iteration  28: 447202.834 ops/s
# Warmup Iteration  29: 451113.791 ops/s
# Warmup Iteration  30: 450330.866 ops/s
Iteration   1: 445164.157 ops/s
Iteration   2: 451662.538 ops/s
Iteration   3: 448677.689 ops/s
Iteration   4: 451195.367 ops/s
Iteration   5: 447315.867 ops/s
Iteration   6: 452961.790 ops/s
Iteration   7: 450325.334 ops/s
Iteration   8: 451967.273 ops/s
Iteration   9: 452546.490 ops/s
Iteration  10: 448618.372 ops/s
Iteration  11: 450440.343 ops/s
Iteration  12: 451665.359 ops/s
Iteration  13: 451642.788 ops/s
Iteration  14: 450808.937 ops/s
Iteration  15: 450680.785 ops/s
Iteration  16: 447055.647 ops/s
Iteration  17: 446926.099 ops/s
Iteration  18: 448106.320 ops/s
Iteration  19: 447831.338 ops/s
Iteration  20: 447580.386 ops/s
Iteration  21: 450935.949 ops/s
Iteration  22: 451394.853 ops/s
Iteration  23: 451568.453 ops/s
Iteration  24: 450748.884 ops/s
Iteration  25: 449460.504 ops/s
Iteration  26: 451357.184 ops/s
Iteration  27: 448779.105 ops/s
Iteration  28: 449659.284 ops/s
Iteration  29: 450002.328 ops/s
Iteration  30: 450740.459 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectWith":
  449927.329 ±(99.9%) 1281.487 ops/s [Average]
  (min, avg, max) = (445164.157, 449927.329, 452961.790), stdev = 1918.070
  CI (99.9%): [448645.842, 451208.817] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_flatCollectWith  thrpt   30  449927.329 ± 1281.487  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1132685.216 ops/s
# Warmup Iteration   2: 2578272.895 ops/s
# Warmup Iteration   3: 2147691.595 ops/s
# Warmup Iteration   4: 2546217.241 ops/s
# Warmup Iteration   5: 2551647.419 ops/s
# Warmup Iteration   6: 2553616.629 ops/s
# Warmup Iteration   7: 2541171.353 ops/s
# Warmup Iteration   8: 2550227.101 ops/s
# Warmup Iteration   9: 2496689.620 ops/s
# Warmup Iteration  10: 2547452.946 ops/s
# Warmup Iteration  11: 2551685.322 ops/s
# Warmup Iteration  12: 2543758.638 ops/s
# Warmup Iteration  13: 2566882.718 ops/s
# Warmup Iteration  14: 2553006.953 ops/s
# Warmup Iteration  15: 2545269.577 ops/s
# Warmup Iteration  16: 2554853.558 ops/s
# Warmup Iteration  17: 2554195.068 ops/s
# Warmup Iteration  18: 2551342.148 ops/s
# Warmup Iteration  19: 2581242.641 ops/s
# Warmup Iteration  20: 2575694.196 ops/s
# Warmup Iteration  21: 2533383.871 ops/s
# Warmup Iteration  22: 2573241.564 ops/s
# Warmup Iteration  23: 2573426.945 ops/s
# Warmup Iteration  24: 2572986.642 ops/s
# Warmup Iteration  25: 2556399.408 ops/s
# Warmup Iteration  26: 2572950.291 ops/s
# Warmup Iteration  27: 2574438.409 ops/s
# Warmup Iteration  28: 2549582.352 ops/s
# Warmup Iteration  29: 2580724.583 ops/s
# Warmup Iteration  30: 2576866.850 ops/s
Iteration   1: 2565760.058 ops/s
Iteration   2: 2576695.611 ops/s
Iteration   3: 2549548.014 ops/s
Iteration   4: 2588388.111 ops/s
Iteration   5: 2543023.465 ops/s
Iteration   6: 2565517.918 ops/s
Iteration   7: 2584657.123 ops/s
Iteration   8: 2580018.209 ops/s
Iteration   9: 2569881.706 ops/s
Iteration  10: 2570194.241 ops/s
Iteration  11: 2520901.530 ops/s
Iteration  12: 2505190.230 ops/s
Iteration  13: 2576758.047 ops/s
Iteration  14: 2564414.369 ops/s
Iteration  15: 2581902.598 ops/s
Iteration  16: 2583750.738 ops/s
Iteration  17: 2582216.479 ops/s
Iteration  18: 2557322.122 ops/s
Iteration  19: 2559487.936 ops/s
Iteration  20: 2537508.491 ops/s
Iteration  21: 2535141.014 ops/s
Iteration  22: 2572049.710 ops/s
Iteration  23: 2559628.732 ops/s
Iteration  24: 2532744.928 ops/s
Iteration  25: 2562564.874 ops/s
Iteration  26: 2548710.253 ops/s
Iteration  27: 2546569.604 ops/s
Iteration  28: 2586564.306 ops/s
Iteration  29: 2538842.057 ops/s
Iteration  30: 2574459.934 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEach":
  2560680.414 ±(99.9%) 14041.263 ops/s [Average]
  (min, avg, max) = (2505190.230, 2560680.414, 2588388.111), stdev = 21016.302
  CI (99.9%): [2546639.151, 2574721.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEach  thrpt   30  2560680.414 ± 14041.263  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 223032.079 ops/s
# Warmup Iteration   2: 276775.661 ops/s
# Warmup Iteration   3: 340317.056 ops/s
# Warmup Iteration   4: 340765.235 ops/s
# Warmup Iteration   5: 340675.198 ops/s
# Warmup Iteration   6: 341249.855 ops/s
# Warmup Iteration   7: 340472.901 ops/s
# Warmup Iteration   8: 341541.412 ops/s
# Warmup Iteration   9: 287909.128 ops/s
# Warmup Iteration  10: 339586.655 ops/s
# Warmup Iteration  11: 341681.537 ops/s
# Warmup Iteration  12: 343086.400 ops/s
# Warmup Iteration  13: 339405.166 ops/s
# Warmup Iteration  14: 340638.305 ops/s
# Warmup Iteration  15: 341731.854 ops/s
# Warmup Iteration  16: 341459.400 ops/s
# Warmup Iteration  17: 355939.158 ops/s
# Warmup Iteration  18: 357105.832 ops/s
# Warmup Iteration  19: 352663.832 ops/s
# Warmup Iteration  20: 357532.428 ops/s
# Warmup Iteration  21: 355966.889 ops/s
# Warmup Iteration  22: 355364.114 ops/s
# Warmup Iteration  23: 357469.933 ops/s
# Warmup Iteration  24: 354381.535 ops/s
# Warmup Iteration  25: 351584.672 ops/s
# Warmup Iteration  26: 356146.265 ops/s
# Warmup Iteration  27: 354134.587 ops/s
# Warmup Iteration  28: 355170.416 ops/s
# Warmup Iteration  29: 356795.931 ops/s
# Warmup Iteration  30: 354755.015 ops/s
Iteration   1: 356611.692 ops/s
Iteration   2: 356468.131 ops/s
Iteration   3: 355638.420 ops/s
Iteration   4: 356012.384 ops/s
Iteration   5: 347322.614 ops/s
Iteration   6: 356223.236 ops/s
Iteration   7: 356710.641 ops/s
Iteration   8: 357533.813 ops/s
Iteration   9: 355934.500 ops/s
Iteration  10: 357088.927 ops/s
Iteration  11: 354043.259 ops/s
Iteration  12: 356116.597 ops/s
Iteration  13: 355396.061 ops/s
Iteration  14: 353876.002 ops/s
Iteration  15: 356753.104 ops/s
Iteration  16: 355465.828 ops/s
Iteration  17: 348879.122 ops/s
Iteration  18: 354782.338 ops/s
Iteration  19: 355462.883 ops/s
Iteration  20: 356215.657 ops/s
Iteration  21: 356386.592 ops/s
Iteration  22: 353333.503 ops/s
Iteration  23: 354604.687 ops/s
Iteration  24: 353480.072 ops/s
Iteration  25: 354586.824 ops/s
Iteration  26: 352569.147 ops/s
Iteration  27: 352442.725 ops/s
Iteration  28: 351810.855 ops/s
Iteration  29: 356345.560 ops/s
Iteration  30: 355634.942 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachFromTo":
  354791.004 ±(99.9%) 1560.191 ops/s [Average]
  (min, avg, max) = (347322.614, 354791.004, 357533.813), stdev = 2335.221
  CI (99.9%): [353230.813, 356351.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachFromTo  thrpt   30  354791.004 ± 1560.191  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachFromToInReverse$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachFromToInReverse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4915714.543 ops/s
# Warmup Iteration   2: 10151883.873 ops/s
# Warmup Iteration   3: 8720153.023 ops/s
# Warmup Iteration   4: 10330575.824 ops/s
# Warmup Iteration   5: 10329659.443 ops/s
# Warmup Iteration   6: 10223707.278 ops/s
# Warmup Iteration   7: 10247275.905 ops/s
# Warmup Iteration   8: 10285382.821 ops/s
# Warmup Iteration   9: 10244584.756 ops/s
# Warmup Iteration  10: 10318767.333 ops/s
# Warmup Iteration  11: 10337141.133 ops/s
# Warmup Iteration  12: 10334293.914 ops/s
# Warmup Iteration  13: 10328017.103 ops/s
# Warmup Iteration  14: 10303365.241 ops/s
# Warmup Iteration  15: 10282634.862 ops/s
# Warmup Iteration  16: 10262228.137 ops/s
# Warmup Iteration  17: 10375434.160 ops/s
# Warmup Iteration  18: 10363372.137 ops/s
# Warmup Iteration  19: 10356398.742 ops/s
# Warmup Iteration  20: 10357607.394 ops/s
# Warmup Iteration  21: 10375696.678 ops/s
# Warmup Iteration  22: 10364743.062 ops/s
# Warmup Iteration  23: 10378352.286 ops/s
# Warmup Iteration  24: 10386049.452 ops/s
# Warmup Iteration  25: 10371408.989 ops/s
# Warmup Iteration  26: 10323202.698 ops/s
# Warmup Iteration  27: 10369768.829 ops/s
# Warmup Iteration  28: 10327209.160 ops/s
# Warmup Iteration  29: 10383145.198 ops/s
# Warmup Iteration  30: 10386376.678 ops/s
Iteration   1: 10346057.162 ops/s
Iteration   2: 10378283.574 ops/s
Iteration   3: 10408976.616 ops/s
Iteration   4: 10328911.576 ops/s
Iteration   5: 10269715.024 ops/s
Iteration   6: 10367436.615 ops/s
Iteration   7: 10376479.958 ops/s
Iteration   8: 10291577.872 ops/s
Iteration   9: 10361740.312 ops/s
Iteration  10: 10149426.190 ops/s
Iteration  11: 10310072.759 ops/s
Iteration  12: 10348407.860 ops/s
Iteration  13: 10376202.518 ops/s
Iteration  14: 10360933.927 ops/s
Iteration  15: 10391352.256 ops/s
Iteration  16: 10272680.063 ops/s
Iteration  17: 10347565.873 ops/s
Iteration  18: 10393878.787 ops/s
Iteration  19: 10381196.196 ops/s
Iteration  20: 10348110.633 ops/s
Iteration  21: 10332865.105 ops/s
Iteration  22: 10368589.192 ops/s
Iteration  23: 10261666.747 ops/s
Iteration  24: 10233189.087 ops/s
Iteration  25: 10324923.535 ops/s
Iteration  26: 10392938.661 ops/s
Iteration  27: 10363526.721 ops/s
Iteration  28: 10341629.243 ops/s
Iteration  29: 10293893.450 ops/s
Iteration  30: 10252577.808 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachFromToInReverse":
  10332493.511 ±(99.9%) 38685.052 ops/s [Average]
  (min, avg, max) = (10149426.190, 10332493.511, 10408976.616), stdev = 57901.969
  CI (99.9%): [10293808.459, 10371178.562] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachFromToInReverse  thrpt   30  10332493.511 ± 38685.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachInBoth$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachInBoth

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2071116.626 ops/s
# Warmup Iteration   2: 4864721.833 ops/s
# Warmup Iteration   3: 4078690.831 ops/s
# Warmup Iteration   4: 4843546.628 ops/s
# Warmup Iteration   5: 4836226.461 ops/s
# Warmup Iteration   6: 4867284.154 ops/s
# Warmup Iteration   7: 4826257.670 ops/s
# Warmup Iteration   8: 4830996.774 ops/s
# Warmup Iteration   9: 4865574.427 ops/s
# Warmup Iteration  10: 4867724.582 ops/s
# Warmup Iteration  11: 4818777.472 ops/s
# Warmup Iteration  12: 4857465.832 ops/s
# Warmup Iteration  13: 4814118.796 ops/s
# Warmup Iteration  14: 4863244.353 ops/s
# Warmup Iteration  15: 4873319.103 ops/s
# Warmup Iteration  16: 4856190.192 ops/s
# Warmup Iteration  17: 4835148.963 ops/s
# Warmup Iteration  18: 4817917.141 ops/s
# Warmup Iteration  19: 4888335.787 ops/s
# Warmup Iteration  20: 4882653.176 ops/s
# Warmup Iteration  21: 4840163.712 ops/s
# Warmup Iteration  22: 4886336.733 ops/s
# Warmup Iteration  23: 4880263.320 ops/s
# Warmup Iteration  24: 4847588.765 ops/s
# Warmup Iteration  25: 4860867.338 ops/s
# Warmup Iteration  26: 4846645.478 ops/s
# Warmup Iteration  27: 4873906.776 ops/s
# Warmup Iteration  28: 4874967.463 ops/s
# Warmup Iteration  29: 4846820.089 ops/s
# Warmup Iteration  30: 4895606.559 ops/s
Iteration   1: 4895776.540 ops/s
Iteration   2: 4827361.060 ops/s
Iteration   3: 4876500.438 ops/s
Iteration   4: 4893439.000 ops/s
Iteration   5: 4889603.252 ops/s
Iteration   6: 4885439.451 ops/s
Iteration   7: 4877819.690 ops/s
Iteration   8: 4896526.893 ops/s
Iteration   9: 4892539.182 ops/s
Iteration  10: 4839942.560 ops/s
Iteration  11: 4878581.999 ops/s
Iteration  12: 4858134.361 ops/s
Iteration  13: 4892165.803 ops/s
Iteration  14: 4907881.780 ops/s
Iteration  15: 4892747.690 ops/s
Iteration  16: 4865815.168 ops/s
Iteration  17: 4886069.160 ops/s
Iteration  18: 4867973.807 ops/s
Iteration  19: 4858841.063 ops/s
Iteration  20: 4888317.604 ops/s
Iteration  21: 4902260.844 ops/s
Iteration  22: 4869348.028 ops/s
Iteration  23: 4877551.401 ops/s
Iteration  24: 4885467.042 ops/s
Iteration  25: 4907112.119 ops/s
Iteration  26: 4751573.767 ops/s
Iteration  27: 4877026.809 ops/s
Iteration  28: 4858237.072 ops/s
Iteration  29: 4810595.862 ops/s
Iteration  30: 4880940.982 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachInBoth":
  4873053.014 ±(99.9%) 21333.286 ops/s [Average]
  (min, avg, max) = (4751573.767, 4873053.014, 4907881.780), stdev = 31930.660
  CI (99.9%): [4851719.729, 4894386.300] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachInBoth  thrpt   30  4873053.014 ± 21333.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 525384.094 ops/s
# Warmup Iteration   2: 683693.835 ops/s
# Warmup Iteration   3: 825893.589 ops/s
# Warmup Iteration   4: 816554.719 ops/s
# Warmup Iteration   5: 821476.138 ops/s
# Warmup Iteration   6: 821830.752 ops/s
# Warmup Iteration   7: 818518.555 ops/s
# Warmup Iteration   8: 703404.382 ops/s
# Warmup Iteration   9: 824153.419 ops/s
# Warmup Iteration  10: 822375.772 ops/s
# Warmup Iteration  11: 823491.769 ops/s
# Warmup Iteration  12: 817178.193 ops/s
# Warmup Iteration  13: 818465.037 ops/s
# Warmup Iteration  14: 823303.439 ops/s
# Warmup Iteration  15: 819062.387 ops/s
# Warmup Iteration  16: 824315.129 ops/s
# Warmup Iteration  17: 863344.671 ops/s
# Warmup Iteration  18: 852035.337 ops/s
# Warmup Iteration  19: 859148.306 ops/s
# Warmup Iteration  20: 868032.984 ops/s
# Warmup Iteration  21: 869038.369 ops/s
# Warmup Iteration  22: 865419.480 ops/s
# Warmup Iteration  23: 867688.307 ops/s
# Warmup Iteration  24: 866566.910 ops/s
# Warmup Iteration  25: 868452.616 ops/s
# Warmup Iteration  26: 862258.528 ops/s
# Warmup Iteration  27: 860869.311 ops/s
# Warmup Iteration  28: 857630.563 ops/s
# Warmup Iteration  29: 867268.915 ops/s
# Warmup Iteration  30: 868292.170 ops/s
Iteration   1: 866586.580 ops/s
Iteration   2: 864877.509 ops/s
Iteration   3: 862136.819 ops/s
Iteration   4: 871146.012 ops/s
Iteration   5: 869377.679 ops/s
Iteration   6: 868365.060 ops/s
Iteration   7: 868258.901 ops/s
Iteration   8: 868712.641 ops/s
Iteration   9: 863982.655 ops/s
Iteration  10: 844251.172 ops/s
Iteration  11: 856005.019 ops/s
Iteration  12: 866127.411 ops/s
Iteration  13: 869234.226 ops/s
Iteration  14: 863187.579 ops/s
Iteration  15: 861465.785 ops/s
Iteration  16: 856880.318 ops/s
Iteration  17: 864078.461 ops/s
Iteration  18: 856628.239 ops/s
Iteration  19: 866031.115 ops/s
Iteration  20: 850078.013 ops/s
Iteration  21: 864986.965 ops/s
Iteration  22: 867512.704 ops/s
Iteration  23: 869187.242 ops/s
Iteration  24: 866404.246 ops/s
Iteration  25: 867795.959 ops/s
Iteration  26: 866375.458 ops/s
Iteration  27: 869812.551 ops/s
Iteration  28: 866356.403 ops/s
Iteration  29: 867577.311 ops/s
Iteration  30: 870068.852 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes":
  864449.630 ±(99.9%) 4105.798 ops/s [Average]
  (min, avg, max) = (844251.172, 864449.630, 871146.012), stdev = 6145.365
  CI (99.9%): [860343.832, 868555.427] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes  thrpt   30  864449.630 ± 4105.798  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachInBothThrowsOnNullList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachInBothThrowsOnNullList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 617684.645 ops/s
# Warmup Iteration   2: 645104.630 ops/s
# Warmup Iteration   3: 839219.464 ops/s
# Warmup Iteration   4: 845273.944 ops/s
# Warmup Iteration   5: 841221.194 ops/s
# Warmup Iteration   6: 840112.718 ops/s
# Warmup Iteration   7: 845868.478 ops/s
# Warmup Iteration   8: 845725.635 ops/s
# Warmup Iteration   9: 838422.667 ops/s
# Warmup Iteration  10: 838779.502 ops/s
# Warmup Iteration  11: 838165.869 ops/s
# Warmup Iteration  12: 718188.263 ops/s
# Warmup Iteration  13: 839668.319 ops/s
# Warmup Iteration  14: 838479.044 ops/s
# Warmup Iteration  15: 841395.133 ops/s
# Warmup Iteration  16: 843615.207 ops/s
# Warmup Iteration  17: 896299.359 ops/s
# Warmup Iteration  18: 890658.684 ops/s
# Warmup Iteration  19: 897929.967 ops/s
# Warmup Iteration  20: 895382.796 ops/s
# Warmup Iteration  21: 892629.190 ops/s
# Warmup Iteration  22: 895682.021 ops/s
# Warmup Iteration  23: 899288.198 ops/s
# Warmup Iteration  24: 889435.120 ops/s
# Warmup Iteration  25: 896251.185 ops/s
# Warmup Iteration  26: 897834.510 ops/s
# Warmup Iteration  27: 894102.893 ops/s
# Warmup Iteration  28: 890066.645 ops/s
# Warmup Iteration  29: 892414.698 ops/s
# Warmup Iteration  30: 896761.037 ops/s
Iteration   1: 900906.751 ops/s
Iteration   2: 893940.545 ops/s
Iteration   3: 896058.007 ops/s
Iteration   4: 892229.108 ops/s
Iteration   5: 893846.005 ops/s
Iteration   6: 898760.063 ops/s
Iteration   7: 896137.166 ops/s
Iteration   8: 893030.639 ops/s
Iteration   9: 892900.095 ops/s
Iteration  10: 896223.849 ops/s
Iteration  11: 887349.056 ops/s
Iteration  12: 899865.276 ops/s
Iteration  13: 895052.939 ops/s
Iteration  14: 898559.441 ops/s
Iteration  15: 899434.300 ops/s
Iteration  16: 895317.336 ops/s
Iteration  17: 894092.689 ops/s
Iteration  18: 899487.244 ops/s
Iteration  19: 900669.522 ops/s
Iteration  20: 899463.590 ops/s
Iteration  21: 884732.269 ops/s
Iteration  22: 893912.351 ops/s
Iteration  23: 894237.670 ops/s
Iteration  24: 893599.371 ops/s
Iteration  25: 899511.221 ops/s
Iteration  26: 898011.056 ops/s
Iteration  27: 896382.964 ops/s
Iteration  28: 898242.432 ops/s
Iteration  29: 892313.672 ops/s
Iteration  30: 897733.225 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachInBothThrowsOnNullList":
  895733.328 ±(99.9%) 2507.771 ops/s [Average]
  (min, avg, max) = (884732.269, 895733.328, 900906.751), stdev = 3753.514
  CI (99.9%): [893225.557, 898241.100] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachInBothThrowsOnNullList  thrpt   30  895733.328 ± 2507.771  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachOnRange$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachOnRange

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 363538.169 ops/s
# Warmup Iteration   2: 501866.319 ops/s
# Warmup Iteration   3: 610321.045 ops/s
# Warmup Iteration   4: 609246.730 ops/s
# Warmup Iteration   5: 615501.928 ops/s
# Warmup Iteration   6: 614093.580 ops/s
# Warmup Iteration   7: 612926.591 ops/s
# Warmup Iteration   8: 512641.777 ops/s
# Warmup Iteration   9: 613948.554 ops/s
# Warmup Iteration  10: 615600.026 ops/s
# Warmup Iteration  11: 615440.660 ops/s
# Warmup Iteration  12: 616263.833 ops/s
# Warmup Iteration  13: 614534.849 ops/s
# Warmup Iteration  14: 612938.063 ops/s
# Warmup Iteration  15: 614914.025 ops/s
# Warmup Iteration  16: 613673.408 ops/s
# Warmup Iteration  17: 638719.578 ops/s
# Warmup Iteration  18: 628427.250 ops/s
# Warmup Iteration  19: 636163.131 ops/s
# Warmup Iteration  20: 639073.980 ops/s
# Warmup Iteration  21: 637057.108 ops/s
# Warmup Iteration  22: 639148.404 ops/s
# Warmup Iteration  23: 633317.118 ops/s
# Warmup Iteration  24: 641317.289 ops/s
# Warmup Iteration  25: 631240.595 ops/s
# Warmup Iteration  26: 637804.354 ops/s
# Warmup Iteration  27: 637829.700 ops/s
# Warmup Iteration  28: 636359.082 ops/s
# Warmup Iteration  29: 638077.651 ops/s
# Warmup Iteration  30: 638364.845 ops/s
Iteration   1: 629185.526 ops/s
Iteration   2: 638111.277 ops/s
Iteration   3: 636758.428 ops/s
Iteration   4: 638069.033 ops/s
Iteration   5: 638679.578 ops/s
Iteration   6: 635863.127 ops/s
Iteration   7: 638293.427 ops/s
Iteration   8: 637692.667 ops/s
Iteration   9: 629262.982 ops/s
Iteration  10: 641478.264 ops/s
Iteration  11: 641392.738 ops/s
Iteration  12: 628995.171 ops/s
Iteration  13: 639180.620 ops/s
Iteration  14: 638189.371 ops/s
Iteration  15: 616675.522 ops/s
Iteration  16: 624671.274 ops/s
Iteration  17: 640289.760 ops/s
Iteration  18: 629948.214 ops/s
Iteration  19: 638053.597 ops/s
Iteration  20: 626533.569 ops/s
Iteration  21: 636431.218 ops/s
Iteration  22: 633603.228 ops/s
Iteration  23: 635432.038 ops/s
Iteration  24: 639861.724 ops/s
Iteration  25: 636149.928 ops/s
Iteration  26: 640042.672 ops/s
Iteration  27: 635424.777 ops/s
Iteration  28: 639697.524 ops/s
Iteration  29: 638897.766 ops/s
Iteration  30: 637967.220 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachOnRange":
  635361.075 ±(99.9%) 3807.251 ops/s [Average]
  (min, avg, max) = (616675.522, 635361.075, 641478.264), stdev = 5698.514
  CI (99.9%): [631553.824, 639168.325] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachOnRange  thrpt   30  635361.075 ± 3807.251  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3075497.148 ops/s
# Warmup Iteration   2: 6585259.229 ops/s
# Warmup Iteration   3: 5589487.421 ops/s
# Warmup Iteration   4: 6564183.293 ops/s
# Warmup Iteration   5: 6573333.385 ops/s
# Warmup Iteration   6: 6574984.427 ops/s
# Warmup Iteration   7: 6603765.500 ops/s
# Warmup Iteration   8: 6591888.253 ops/s
# Warmup Iteration   9: 6595266.446 ops/s
# Warmup Iteration  10: 6620866.140 ops/s
# Warmup Iteration  11: 6613928.380 ops/s
# Warmup Iteration  12: 6503800.941 ops/s
# Warmup Iteration  13: 6560373.979 ops/s
# Warmup Iteration  14: 6597932.958 ops/s
# Warmup Iteration  15: 6585742.288 ops/s
# Warmup Iteration  16: 6450489.931 ops/s
# Warmup Iteration  17: 6636893.505 ops/s
# Warmup Iteration  18: 6629361.250 ops/s
# Warmup Iteration  19: 6675277.849 ops/s
# Warmup Iteration  20: 6677201.529 ops/s
# Warmup Iteration  21: 6658466.138 ops/s
# Warmup Iteration  22: 6674334.854 ops/s
# Warmup Iteration  23: 6643722.786 ops/s
# Warmup Iteration  24: 6654175.156 ops/s
# Warmup Iteration  25: 6666984.340 ops/s
# Warmup Iteration  26: 6606242.392 ops/s
# Warmup Iteration  27: 6670804.699 ops/s
# Warmup Iteration  28: 6625238.430 ops/s
# Warmup Iteration  29: 6611127.507 ops/s
# Warmup Iteration  30: 6636437.949 ops/s
Iteration   1: 6658259.644 ops/s
Iteration   2: 6687517.141 ops/s
Iteration   3: 6611628.484 ops/s
Iteration   4: 6680803.158 ops/s
Iteration   5: 6674792.871 ops/s
Iteration   6: 6652230.588 ops/s
Iteration   7: 6532902.726 ops/s
Iteration   8: 6597817.619 ops/s
Iteration   9: 6671795.917 ops/s
Iteration  10: 6691314.921 ops/s
Iteration  11: 6656500.200 ops/s
Iteration  12: 6662560.531 ops/s
Iteration  13: 6583133.848 ops/s
Iteration  14: 6692716.246 ops/s
Iteration  15: 6691013.611 ops/s
Iteration  16: 6654447.615 ops/s
Iteration  17: 6688496.708 ops/s
Iteration  18: 6622894.792 ops/s
Iteration  19: 6674316.824 ops/s
Iteration  20: 6692138.842 ops/s
Iteration  21: 6582501.060 ops/s
Iteration  22: 6681894.040 ops/s
Iteration  23: 6664670.395 ops/s
Iteration  24: 6564131.977 ops/s
Iteration  25: 6676971.465 ops/s
Iteration  26: 6682243.341 ops/s
Iteration  27: 6669232.355 ops/s
Iteration  28: 6699140.024 ops/s
Iteration  29: 6639991.271 ops/s
Iteration  30: 6697506.599 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWith":
  6654518.827 ±(99.9%) 29194.367 ops/s [Average]
  (min, avg, max) = (6532902.726, 6654518.827, 6699140.024), stdev = 43696.757
  CI (99.9%): [6625324.460, 6683713.194] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWith  thrpt   30  6654518.827 ± 29194.367  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 434716.544 ops/s
# Warmup Iteration   2: 900077.893 ops/s
# Warmup Iteration   3: 978994.649 ops/s
# Warmup Iteration   4: 975564.861 ops/s
# Warmup Iteration   5: 813029.846 ops/s
# Warmup Iteration   6: 985877.691 ops/s
# Warmup Iteration   7: 986915.559 ops/s
# Warmup Iteration   8: 982546.460 ops/s
# Warmup Iteration   9: 979767.296 ops/s
# Warmup Iteration  10: 984156.023 ops/s
# Warmup Iteration  11: 984155.561 ops/s
# Warmup Iteration  12: 977825.123 ops/s
# Warmup Iteration  13: 985318.844 ops/s
# Warmup Iteration  14: 983911.113 ops/s
# Warmup Iteration  15: 981924.923 ops/s
# Warmup Iteration  16: 967869.918 ops/s
# Warmup Iteration  17: 984496.978 ops/s
# Warmup Iteration  18: 983795.487 ops/s
# Warmup Iteration  19: 980953.734 ops/s
# Warmup Iteration  20: 986393.632 ops/s
# Warmup Iteration  21: 983153.592 ops/s
# Warmup Iteration  22: 988001.789 ops/s
# Warmup Iteration  23: 984421.008 ops/s
# Warmup Iteration  24: 975291.794 ops/s
# Warmup Iteration  25: 981043.996 ops/s
# Warmup Iteration  26: 984281.412 ops/s
# Warmup Iteration  27: 977936.439 ops/s
# Warmup Iteration  28: 980815.352 ops/s
# Warmup Iteration  29: 980716.013 ops/s
# Warmup Iteration  30: 983515.638 ops/s
Iteration   1: 980957.041 ops/s
Iteration   2: 982840.533 ops/s
Iteration   3: 986069.722 ops/s
Iteration   4: 980989.666 ops/s
Iteration   5: 983371.800 ops/s
Iteration   6: 980228.691 ops/s
Iteration   7: 977748.410 ops/s
Iteration   8: 976059.608 ops/s
Iteration   9: 977829.500 ops/s
Iteration  10: 980400.582 ops/s
Iteration  11: 982941.852 ops/s
Iteration  12: 985362.154 ops/s
Iteration  13: 987016.248 ops/s
Iteration  14: 979903.364 ops/s
Iteration  15: 980159.423 ops/s
Iteration  16: 980104.123 ops/s
Iteration  17: 980916.889 ops/s
Iteration  18: 987986.499 ops/s
Iteration  19: 981910.358 ops/s
Iteration  20: 973569.532 ops/s
Iteration  21: 984529.418 ops/s
Iteration  22: 973762.153 ops/s
Iteration  23: 986803.134 ops/s
Iteration  24: 982694.788 ops/s
Iteration  25: 985433.931 ops/s
Iteration  26: 983070.053 ops/s
Iteration  27: 984034.569 ops/s
Iteration  28: 965731.729 ops/s
Iteration  29: 969177.236 ops/s
Iteration  30: 984985.733 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndex":
  980886.291 ±(99.9%) 3443.146 ops/s [Average]
  (min, avg, max) = (965731.729, 980886.291, 987986.499), stdev = 5153.539
  CI (99.9%): [977443.146, 984329.437] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  980886.291 ± 3443.146  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndexOnRange$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndexOnRange

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 363043.013 ops/s
# Warmup Iteration   2: 499840.796 ops/s
# Warmup Iteration   3: 609951.153 ops/s
# Warmup Iteration   4: 598501.257 ops/s
# Warmup Iteration   5: 608163.857 ops/s
# Warmup Iteration   6: 605644.472 ops/s
# Warmup Iteration   7: 608701.510 ops/s
# Warmup Iteration   8: 509217.091 ops/s
# Warmup Iteration   9: 610670.132 ops/s
# Warmup Iteration  10: 608795.884 ops/s
# Warmup Iteration  11: 610529.591 ops/s
# Warmup Iteration  12: 599662.639 ops/s
# Warmup Iteration  13: 609706.292 ops/s
# Warmup Iteration  14: 607127.114 ops/s
# Warmup Iteration  15: 607948.473 ops/s
# Warmup Iteration  16: 607590.049 ops/s
# Warmup Iteration  17: 631399.681 ops/s
# Warmup Iteration  18: 634471.378 ops/s
# Warmup Iteration  19: 628317.711 ops/s
# Warmup Iteration  20: 626671.470 ops/s
# Warmup Iteration  21: 634954.481 ops/s
# Warmup Iteration  22: 632949.413 ops/s
# Warmup Iteration  23: 636635.960 ops/s
# Warmup Iteration  24: 635298.223 ops/s
# Warmup Iteration  25: 634216.478 ops/s
# Warmup Iteration  26: 635695.471 ops/s
# Warmup Iteration  27: 636720.340 ops/s
# Warmup Iteration  28: 632081.102 ops/s
# Warmup Iteration  29: 636225.760 ops/s
# Warmup Iteration  30: 628380.204 ops/s
Iteration   1: 627173.583 ops/s
Iteration   2: 624846.126 ops/s
Iteration   3: 622104.885 ops/s
Iteration   4: 622619.846 ops/s
Iteration   5: 637432.346 ops/s
Iteration   6: 632594.874 ops/s
Iteration   7: 635680.877 ops/s
Iteration   8: 635742.849 ops/s
Iteration   9: 636130.647 ops/s
Iteration  10: 634966.681 ops/s
Iteration  11: 632028.178 ops/s
Iteration  12: 626458.173 ops/s
Iteration  13: 636980.744 ops/s
Iteration  14: 634633.059 ops/s
Iteration  15: 638869.602 ops/s
Iteration  16: 635022.287 ops/s
Iteration  17: 634921.279 ops/s
Iteration  18: 636299.042 ops/s
Iteration  19: 634087.063 ops/s
Iteration  20: 635962.917 ops/s
Iteration  21: 633522.475 ops/s
Iteration  22: 636081.895 ops/s
Iteration  23: 632539.642 ops/s
Iteration  24: 636286.388 ops/s
Iteration  25: 635973.049 ops/s
Iteration  26: 634410.039 ops/s
Iteration  27: 633817.601 ops/s
Iteration  28: 626701.441 ops/s
Iteration  29: 634135.831 ops/s
Iteration  30: 634628.028 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndexOnRange":
  633088.382 ±(99.9%) 2977.727 ops/s [Average]
  (min, avg, max) = (622104.885, 633088.382, 638869.602), stdev = 4456.922
  CI (99.9%): [630110.654, 636066.109] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndexOnRange  thrpt   30  633088.382 ± 2977.727  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndexWithFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndexWithFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 167994.906 ops/s
# Warmup Iteration   2: 183606.509 ops/s
# Warmup Iteration   3: 252299.021 ops/s
# Warmup Iteration   4: 250926.238 ops/s
# Warmup Iteration   5: 251192.576 ops/s
# Warmup Iteration   6: 253035.764 ops/s
# Warmup Iteration   7: 253154.435 ops/s
# Warmup Iteration   8: 250743.311 ops/s
# Warmup Iteration   9: 252259.139 ops/s
# Warmup Iteration  10: 252379.740 ops/s
# Warmup Iteration  11: 209675.318 ops/s
# Warmup Iteration  12: 250950.255 ops/s
# Warmup Iteration  13: 252833.558 ops/s
# Warmup Iteration  14: 252758.958 ops/s
# Warmup Iteration  15: 252861.571 ops/s
# Warmup Iteration  16: 253099.396 ops/s
# Warmup Iteration  17: 260180.696 ops/s
# Warmup Iteration  18: 259960.833 ops/s
# Warmup Iteration  19: 258415.063 ops/s
# Warmup Iteration  20: 257527.727 ops/s
# Warmup Iteration  21: 258671.591 ops/s
# Warmup Iteration  22: 260986.030 ops/s
# Warmup Iteration  23: 259724.611 ops/s
# Warmup Iteration  24: 259010.917 ops/s
# Warmup Iteration  25: 259195.419 ops/s
# Warmup Iteration  26: 259686.720 ops/s
# Warmup Iteration  27: 258401.128 ops/s
# Warmup Iteration  28: 260090.223 ops/s
# Warmup Iteration  29: 260784.392 ops/s
# Warmup Iteration  30: 259380.877 ops/s
Iteration   1: 258521.969 ops/s
Iteration   2: 259139.352 ops/s
Iteration   3: 260913.460 ops/s
Iteration   4: 260976.768 ops/s
Iteration   5: 260047.782 ops/s
Iteration   6: 258952.153 ops/s
Iteration   7: 260931.128 ops/s
Iteration   8: 259464.982 ops/s
Iteration   9: 260360.212 ops/s
Iteration  10: 261236.081 ops/s
Iteration  11: 261209.221 ops/s
Iteration  12: 260440.903 ops/s
Iteration  13: 254819.987 ops/s
Iteration  14: 258511.258 ops/s
Iteration  15: 261042.571 ops/s
Iteration  16: 261749.978 ops/s
Iteration  17: 255890.535 ops/s
Iteration  18: 260506.195 ops/s
Iteration  19: 259544.329 ops/s
Iteration  20: 258651.860 ops/s
Iteration  21: 261697.636 ops/s
Iteration  22: 258285.224 ops/s
Iteration  23: 259734.010 ops/s
Iteration  24: 258638.753 ops/s
Iteration  25: 260486.118 ops/s
Iteration  26: 259116.638 ops/s
Iteration  27: 261275.475 ops/s
Iteration  28: 258300.956 ops/s
Iteration  29: 260660.759 ops/s
Iteration  30: 259459.586 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndexWithFromTo":
  259685.529 ±(99.9%) 1064.993 ops/s [Average]
  (min, avg, max) = (254819.987, 259685.529, 261749.978), stdev = 1594.032
  CI (99.9%): [258620.536, 260750.522] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndexWithFromTo  thrpt   30  259685.529 ± 1064.993  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6154661.664 ops/s
# Warmup Iteration   2: 12089264.309 ops/s
# Warmup Iteration   3: 10379894.871 ops/s
# Warmup Iteration   4: 12168786.897 ops/s
# Warmup Iteration   5: 12072551.078 ops/s
# Warmup Iteration   6: 12162413.144 ops/s
# Warmup Iteration   7: 12173466.763 ops/s
# Warmup Iteration   8: 12149403.853 ops/s
# Warmup Iteration   9: 12205808.627 ops/s
# Warmup Iteration  10: 12165543.529 ops/s
# Warmup Iteration  11: 12186481.494 ops/s
# Warmup Iteration  12: 12124236.871 ops/s
# Warmup Iteration  13: 12111481.317 ops/s
# Warmup Iteration  14: 12159211.083 ops/s
# Warmup Iteration  15: 12168561.252 ops/s
# Warmup Iteration  16: 12148628.782 ops/s
# Warmup Iteration  17: 12298450.891 ops/s
# Warmup Iteration  18: 12258710.186 ops/s
# Warmup Iteration  19: 12300066.197 ops/s
# Warmup Iteration  20: 12311255.895 ops/s
# Warmup Iteration  21: 12224631.065 ops/s
# Warmup Iteration  22: 12269723.386 ops/s
# Warmup Iteration  23: 12118897.412 ops/s
# Warmup Iteration  24: 12145426.461 ops/s
# Warmup Iteration  25: 12199531.029 ops/s
# Warmup Iteration  26: 11915619.430 ops/s
# Warmup Iteration  27: 12110355.901 ops/s
# Warmup Iteration  28: 12256712.545 ops/s
# Warmup Iteration  29: 12267939.230 ops/s
# Warmup Iteration  30: 12179197.819 ops/s
Iteration   1: 12341842.602 ops/s
Iteration   2: 12255787.903 ops/s
Iteration   3: 12210773.242 ops/s
Iteration   4: 12314086.443 ops/s
Iteration   5: 12262538.512 ops/s
Iteration   6: 12016261.599 ops/s
Iteration   7: 12366174.634 ops/s
Iteration   8: 12303636.473 ops/s
Iteration   9: 12050480.390 ops/s
Iteration  10: 12303097.977 ops/s
Iteration  11: 12234733.833 ops/s
Iteration  12: 12337387.746 ops/s
Iteration  13: 12337298.331 ops/s
Iteration  14: 12019946.868 ops/s
Iteration  15: 12064737.934 ops/s
Iteration  16: 12274480.453 ops/s
Iteration  17: 12280515.803 ops/s
Iteration  18: 12265001.953 ops/s
Iteration  19: 12301814.274 ops/s
Iteration  20: 12240311.377 ops/s
Iteration  21: 12252660.439 ops/s
Iteration  22: 12059481.057 ops/s
Iteration  23: 12278528.780 ops/s
Iteration  24: 12162078.563 ops/s
Iteration  25: 12266842.592 ops/s
Iteration  26: 12231329.989 ops/s
Iteration  27: 12220710.435 ops/s
Iteration  28: 12304480.852 ops/s
Iteration  29: 12052133.556 ops/s
Iteration  30: 12335950.121 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse":
  12231503.491 ±(99.9%) 70265.226 ops/s [Average]
  (min, avg, max) = (12016261.599, 12231503.491, 12366174.634), stdev = 105169.690
  CI (99.9%): [12161238.265, 12301768.717] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse  thrpt   30  12231503.491 ± 70265.226  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1654990.871 ops/s
# Warmup Iteration   2: 3727407.822 ops/s
# Warmup Iteration   3: 3192031.762 ops/s
# Warmup Iteration   4: 3687190.661 ops/s
# Warmup Iteration   5: 3805965.774 ops/s
# Warmup Iteration   6: 3794914.333 ops/s
# Warmup Iteration   7: 3789836.237 ops/s
# Warmup Iteration   8: 3802377.330 ops/s
# Warmup Iteration   9: 3813290.156 ops/s
# Warmup Iteration  10: 3812083.554 ops/s
# Warmup Iteration  11: 3801059.035 ops/s
# Warmup Iteration  12: 3791863.194 ops/s
# Warmup Iteration  13: 3810223.932 ops/s
# Warmup Iteration  14: 3762950.098 ops/s
# Warmup Iteration  15: 3763893.853 ops/s
# Warmup Iteration  16: 3798093.692 ops/s
# Warmup Iteration  17: 3826238.072 ops/s
# Warmup Iteration  18: 3795420.218 ops/s
# Warmup Iteration  19: 3780290.229 ops/s
# Warmup Iteration  20: 3785420.255 ops/s
# Warmup Iteration  21: 3814757.198 ops/s
# Warmup Iteration  22: 3816225.893 ops/s
# Warmup Iteration  23: 3806601.455 ops/s
# Warmup Iteration  24: 3823521.863 ops/s
# Warmup Iteration  25: 3776912.273 ops/s
# Warmup Iteration  26: 3821867.411 ops/s
# Warmup Iteration  27: 3809027.560 ops/s
# Warmup Iteration  28: 3804664.787 ops/s
# Warmup Iteration  29: 3811165.721 ops/s
# Warmup Iteration  30: 3833682.388 ops/s
Iteration   1: 3814082.704 ops/s
Iteration   2: 3818352.933 ops/s
Iteration   3: 3811270.376 ops/s
Iteration   4: 3777900.179 ops/s
Iteration   5: 3835391.018 ops/s
Iteration   6: 3830291.439 ops/s
Iteration   7: 3812621.219 ops/s
Iteration   8: 3827403.721 ops/s
Iteration   9: 3700103.876 ops/s
Iteration  10: 3774126.105 ops/s
Iteration  11: 3807314.401 ops/s
Iteration  12: 3821791.518 ops/s
Iteration  13: 3817886.484 ops/s
Iteration  14: 3791156.759 ops/s
Iteration  15: 3804535.772 ops/s
Iteration  16: 3835837.104 ops/s
Iteration  17: 3802010.293 ops/s
Iteration  18: 3815702.000 ops/s
Iteration  19: 3766217.582 ops/s
Iteration  20: 3835558.432 ops/s
Iteration  21: 3796354.008 ops/s
Iteration  22: 3821139.009 ops/s
Iteration  23: 3840395.845 ops/s
Iteration  24: 3822620.050 ops/s
Iteration  25: 3795039.514 ops/s
Iteration  26: 3780806.114 ops/s
Iteration  27: 3835252.230 ops/s
Iteration  28: 3832634.240 ops/s
Iteration  29: 3841540.345 ops/s
Iteration  30: 3790627.800 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_fusedCollectMakeString":
  3808532.102 ±(99.9%) 19498.868 ops/s [Average]
  (min, avg, max) = (3700103.876, 3808532.102, 3841540.345), stdev = 29184.990
  CI (99.9%): [3789033.234, 3828030.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  3808532.102 ± 19498.868  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3818337.992 ops/s
# Warmup Iteration   2: 7618825.233 ops/s
# Warmup Iteration   3: 6531366.767 ops/s
# Warmup Iteration   4: 7640869.365 ops/s
# Warmup Iteration   5: 7646664.566 ops/s
# Warmup Iteration   6: 7605499.721 ops/s
# Warmup Iteration   7: 7600927.314 ops/s
# Warmup Iteration   8: 7553148.865 ops/s
# Warmup Iteration   9: 7587100.515 ops/s
# Warmup Iteration  10: 7690559.857 ops/s
# Warmup Iteration  11: 7651741.802 ops/s
# Warmup Iteration  12: 7614486.481 ops/s
# Warmup Iteration  13: 7640295.570 ops/s
# Warmup Iteration  14: 7603889.411 ops/s
# Warmup Iteration  15: 7535908.170 ops/s
# Warmup Iteration  16: 7652057.796 ops/s
# Warmup Iteration  17: 7678301.663 ops/s
# Warmup Iteration  18: 7647139.532 ops/s
# Warmup Iteration  19: 7671639.348 ops/s
# Warmup Iteration  20: 7709859.024 ops/s
# Warmup Iteration  21: 7713183.564 ops/s
# Warmup Iteration  22: 7564065.745 ops/s
# Warmup Iteration  23: 7703304.751 ops/s
# Warmup Iteration  24: 7688530.779 ops/s
# Warmup Iteration  25: 7648015.951 ops/s
# Warmup Iteration  26: 7684903.882 ops/s
# Warmup Iteration  27: 7698111.548 ops/s
# Warmup Iteration  28: 7679344.856 ops/s
# Warmup Iteration  29: 7709482.236 ops/s
# Warmup Iteration  30: 7721922.812 ops/s
Iteration   1: 7730815.893 ops/s
Iteration   2: 7654914.925 ops/s
Iteration   3: 7734129.996 ops/s
Iteration   4: 7678229.191 ops/s
Iteration   5: 7665273.293 ops/s
Iteration   6: 7666598.117 ops/s
Iteration   7: 7700071.945 ops/s
Iteration   8: 7693282.512 ops/s
Iteration   9: 7711899.405 ops/s
Iteration  10: 7697907.698 ops/s
Iteration  11: 7741751.659 ops/s
Iteration  12: 7695713.673 ops/s
Iteration  13: 7719097.331 ops/s
Iteration  14: 7450211.994 ops/s
Iteration  15: 7705669.348 ops/s
Iteration  16: 7721057.254 ops/s
Iteration  17: 7714681.127 ops/s
Iteration  18: 7726320.363 ops/s
Iteration  19: 7761412.526 ops/s
Iteration  20: 7723973.428 ops/s
Iteration  21: 7754543.198 ops/s
Iteration  22: 7699427.775 ops/s
Iteration  23: 7698330.995 ops/s
Iteration  24: 7703547.149 ops/s
Iteration  25: 7719136.799 ops/s
Iteration  26: 7574091.219 ops/s
Iteration  27: 7704837.362 ops/s
Iteration  28: 7707723.714 ops/s
Iteration  29: 7740483.143 ops/s
Iteration  30: 7635539.133 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getAny":
  7694355.739 ±(99.9%) 39529.119 ops/s [Average]
  (min, avg, max) = (7450211.994, 7694355.739, 7761412.526), stdev = 59165.329
  CI (99.9%): [7654826.620, 7733884.858] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getAny  thrpt   30  7694355.739 ± 39529.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3836360.988 ops/s
# Warmup Iteration   2: 7705794.813 ops/s
# Warmup Iteration   3: 6610368.872 ops/s
# Warmup Iteration   4: 7750622.468 ops/s
# Warmup Iteration   5: 7735112.349 ops/s
# Warmup Iteration   6: 7749761.995 ops/s
# Warmup Iteration   7: 7677636.594 ops/s
# Warmup Iteration   8: 7651464.876 ops/s
# Warmup Iteration   9: 7703312.279 ops/s
# Warmup Iteration  10: 7619549.383 ops/s
# Warmup Iteration  11: 7766362.011 ops/s
# Warmup Iteration  12: 7684434.533 ops/s
# Warmup Iteration  13: 7734473.950 ops/s
# Warmup Iteration  14: 7756671.781 ops/s
# Warmup Iteration  15: 7693186.304 ops/s
# Warmup Iteration  16: 7771693.259 ops/s
# Warmup Iteration  17: 7757675.633 ops/s
# Warmup Iteration  18: 7849394.744 ops/s
# Warmup Iteration  19: 7843489.432 ops/s
# Warmup Iteration  20: 7799243.352 ops/s
# Warmup Iteration  21: 7798927.174 ops/s
# Warmup Iteration  22: 7833293.344 ops/s
# Warmup Iteration  23: 7700281.347 ops/s
# Warmup Iteration  24: 7763854.237 ops/s
# Warmup Iteration  25: 7784918.356 ops/s
# Warmup Iteration  26: 7725074.399 ops/s
# Warmup Iteration  27: 7813324.505 ops/s
# Warmup Iteration  28: 7792581.080 ops/s
# Warmup Iteration  29: 7721714.456 ops/s
# Warmup Iteration  30: 7751322.126 ops/s
Iteration   1: 7851010.765 ops/s
Iteration   2: 7790057.984 ops/s
Iteration   3: 7791871.501 ops/s
Iteration   4: 7812200.111 ops/s
Iteration   5: 7814506.932 ops/s
Iteration   6: 7859987.268 ops/s
Iteration   7: 7807833.853 ops/s
Iteration   8: 7858523.494 ops/s
Iteration   9: 7843116.556 ops/s
Iteration  10: 7779182.042 ops/s
Iteration  11: 7776898.928 ops/s
Iteration  12: 7839254.671 ops/s
Iteration  13: 7782829.459 ops/s
Iteration  14: 7820450.986 ops/s
Iteration  15: 7868776.161 ops/s
Iteration  16: 7814939.781 ops/s
Iteration  17: 7828694.482 ops/s
Iteration  18: 7792884.178 ops/s
Iteration  19: 7705296.427 ops/s
Iteration  20: 7689682.371 ops/s
Iteration  21: 7788484.059 ops/s
Iteration  22: 7815127.698 ops/s
Iteration  23: 7836615.902 ops/s
Iteration  24: 7862819.810 ops/s
Iteration  25: 7757096.448 ops/s
Iteration  26: 7780026.285 ops/s
Iteration  27: 7820984.845 ops/s
Iteration  28: 7821087.899 ops/s
Iteration  29: 7819197.957 ops/s
Iteration  30: 7682251.409 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getFirst":
  7803723.009 ±(99.9%) 31593.616 ops/s [Average]
  (min, avg, max) = (7682251.409, 7803723.009, 7868776.161), stdev = 47287.841
  CI (99.9%): [7772129.392, 7835316.625] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getFirst  thrpt   30  7803723.009 ± 31593.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getFirstOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getFirstOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2513070.865 ops/s
# Warmup Iteration   2: 5115651.465 ops/s
# Warmup Iteration   3: 4315193.336 ops/s
# Warmup Iteration   4: 5053640.680 ops/s
# Warmup Iteration   5: 5144818.732 ops/s
# Warmup Iteration   6: 5132268.502 ops/s
# Warmup Iteration   7: 5104304.078 ops/s
# Warmup Iteration   8: 5089258.467 ops/s
# Warmup Iteration   9: 5133973.008 ops/s
# Warmup Iteration  10: 5140541.112 ops/s
# Warmup Iteration  11: 5068308.031 ops/s
# Warmup Iteration  12: 5116825.550 ops/s
# Warmup Iteration  13: 5123880.509 ops/s
# Warmup Iteration  14: 5141566.616 ops/s
# Warmup Iteration  15: 5156210.701 ops/s
# Warmup Iteration  16: 5111038.472 ops/s
# Warmup Iteration  17: 5090530.013 ops/s
# Warmup Iteration  18: 5105875.912 ops/s
# Warmup Iteration  19: 5141552.265 ops/s
# Warmup Iteration  20: 5173884.972 ops/s
# Warmup Iteration  21: 5145259.328 ops/s
# Warmup Iteration  22: 5130192.480 ops/s
# Warmup Iteration  23: 5131626.300 ops/s
# Warmup Iteration  24: 5151966.455 ops/s
# Warmup Iteration  25: 5144644.323 ops/s
# Warmup Iteration  26: 5163162.420 ops/s
# Warmup Iteration  27: 5177618.620 ops/s
# Warmup Iteration  28: 5112592.201 ops/s
# Warmup Iteration  29: 5178751.683 ops/s
# Warmup Iteration  30: 5109994.895 ops/s
Iteration   1: 5169957.684 ops/s
Iteration   2: 5165090.837 ops/s
Iteration   3: 5154361.679 ops/s
Iteration   4: 5175023.925 ops/s
Iteration   5: 5189499.131 ops/s
Iteration   6: 5203389.605 ops/s
Iteration   7: 5162839.878 ops/s
Iteration   8: 5169088.325 ops/s
Iteration   9: 5166565.765 ops/s
Iteration  10: 5115850.128 ops/s
Iteration  11: 5157895.738 ops/s
Iteration  12: 5173762.585 ops/s
Iteration  13: 5195501.839 ops/s
Iteration  14: 5105234.728 ops/s
Iteration  15: 5161552.738 ops/s
Iteration  16: 5192262.915 ops/s
Iteration  17: 5180362.069 ops/s
Iteration  18: 5199120.342 ops/s
Iteration  19: 5147449.800 ops/s
Iteration  20: 5175827.930 ops/s
Iteration  21: 5178700.979 ops/s
Iteration  22: 5139274.079 ops/s
Iteration  23: 5178027.143 ops/s
Iteration  24: 5171892.560 ops/s
Iteration  25: 5086289.483 ops/s
Iteration  26: 5152366.893 ops/s
Iteration  27: 5171889.155 ops/s
Iteration  28: 5146649.986 ops/s
Iteration  29: 5206480.803 ops/s
Iteration  30: 5172052.284 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getFirstOptional":
  5165475.367 ±(99.9%) 18204.820 ops/s [Average]
  (min, avg, max) = (5086289.483, 5165475.367, 5206480.803), stdev = 27248.119
  CI (99.9%): [5147270.547, 5183680.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getFirstOptional  thrpt   30  5165475.367 ± 18204.820  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3795516.857 ops/s
# Warmup Iteration   2: 7625384.407 ops/s
# Warmup Iteration   3: 6525757.390 ops/s
# Warmup Iteration   4: 7738103.680 ops/s
# Warmup Iteration   5: 7767903.496 ops/s
# Warmup Iteration   6: 7740323.169 ops/s
# Warmup Iteration   7: 7754957.930 ops/s
# Warmup Iteration   8: 7693553.410 ops/s
# Warmup Iteration   9: 7731895.618 ops/s
# Warmup Iteration  10: 7764791.422 ops/s
# Warmup Iteration  11: 7728981.185 ops/s
# Warmup Iteration  12: 7729958.919 ops/s
# Warmup Iteration  13: 7729104.542 ops/s
# Warmup Iteration  14: 7641834.518 ops/s
# Warmup Iteration  15: 7692771.927 ops/s
# Warmup Iteration  16: 7699007.063 ops/s
# Warmup Iteration  17: 7744095.412 ops/s
# Warmup Iteration  18: 7740757.356 ops/s
# Warmup Iteration  19: 7803124.552 ops/s
# Warmup Iteration  20: 7736857.392 ops/s
# Warmup Iteration  21: 7807308.578 ops/s
# Warmup Iteration  22: 7829597.929 ops/s
# Warmup Iteration  23: 7751401.768 ops/s
# Warmup Iteration  24: 7800984.439 ops/s
# Warmup Iteration  25: 7719354.313 ops/s
# Warmup Iteration  26: 7788288.284 ops/s
# Warmup Iteration  27: 7811181.544 ops/s
# Warmup Iteration  28: 7793562.642 ops/s
# Warmup Iteration  29: 7793928.575 ops/s
# Warmup Iteration  30: 7828067.760 ops/s
Iteration   1: 7775578.620 ops/s
Iteration   2: 7849024.949 ops/s
Iteration   3: 7680578.311 ops/s
Iteration   4: 7809172.516 ops/s
Iteration   5: 7734185.353 ops/s
Iteration   6: 7822788.741 ops/s
Iteration   7: 7784938.117 ops/s
Iteration   8: 7693724.730 ops/s
Iteration   9: 7815733.725 ops/s
Iteration  10: 7878968.910 ops/s
Iteration  11: 7813709.459 ops/s
Iteration  12: 7771149.957 ops/s
Iteration  13: 7848527.364 ops/s
Iteration  14: 7763743.970 ops/s
Iteration  15: 7832893.285 ops/s
Iteration  16: 7838257.949 ops/s
Iteration  17: 7815364.070 ops/s
Iteration  18: 7777571.763 ops/s
Iteration  19: 7806850.644 ops/s
Iteration  20: 7765049.362 ops/s
Iteration  21: 7820610.579 ops/s
Iteration  22: 7802223.152 ops/s
Iteration  23: 7680499.907 ops/s
Iteration  24: 7839447.772 ops/s
Iteration  25: 7807840.367 ops/s
Iteration  26: 7738499.499 ops/s
Iteration  27: 7810730.722 ops/s
Iteration  28: 7833161.075 ops/s
Iteration  29: 7754843.780 ops/s
Iteration  30: 7682893.317 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getLast":
  7788285.399 ±(99.9%) 35614.576 ops/s [Average]
  (min, avg, max) = (7680499.907, 7788285.399, 7878968.910), stdev = 53306.225
  CI (99.9%): [7752670.822, 7823899.975] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getLast  thrpt   30  7788285.399 ± 35614.576  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getLastOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getLastOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2501335.064 ops/s
# Warmup Iteration   2: 5094352.096 ops/s
# Warmup Iteration   3: 4333012.429 ops/s
# Warmup Iteration   4: 5114751.944 ops/s
# Warmup Iteration   5: 5084297.897 ops/s
# Warmup Iteration   6: 5057865.037 ops/s
# Warmup Iteration   7: 5114107.211 ops/s
# Warmup Iteration   8: 5115833.388 ops/s
# Warmup Iteration   9: 5035625.685 ops/s
# Warmup Iteration  10: 5066791.946 ops/s
# Warmup Iteration  11: 5095615.983 ops/s
# Warmup Iteration  12: 5093324.861 ops/s
# Warmup Iteration  13: 5107968.349 ops/s
# Warmup Iteration  14: 5100998.852 ops/s
# Warmup Iteration  15: 5126470.325 ops/s
# Warmup Iteration  16: 5098490.548 ops/s
# Warmup Iteration  17: 5144817.178 ops/s
# Warmup Iteration  18: 5121858.339 ops/s
# Warmup Iteration  19: 5128486.221 ops/s
# Warmup Iteration  20: 5146647.974 ops/s
# Warmup Iteration  21: 5133658.022 ops/s
# Warmup Iteration  22: 5137794.671 ops/s
# Warmup Iteration  23: 5136402.503 ops/s
# Warmup Iteration  24: 5097119.208 ops/s
# Warmup Iteration  25: 5115148.948 ops/s
# Warmup Iteration  26: 5152993.475 ops/s
# Warmup Iteration  27: 5149930.081 ops/s
# Warmup Iteration  28: 5089788.060 ops/s
# Warmup Iteration  29: 5131294.462 ops/s
# Warmup Iteration  30: 5100847.717 ops/s
Iteration   1: 5127547.477 ops/s
Iteration   2: 5122543.884 ops/s
Iteration   3: 5161963.495 ops/s
Iteration   4: 5158935.647 ops/s
Iteration   5: 5116347.214 ops/s
Iteration   6: 5143785.040 ops/s
Iteration   7: 5111667.386 ops/s
Iteration   8: 5153969.664 ops/s
Iteration   9: 5080378.191 ops/s
Iteration  10: 5146515.644 ops/s
Iteration  11: 5133418.040 ops/s
Iteration  12: 5133648.210 ops/s
Iteration  13: 5051604.393 ops/s
Iteration  14: 5151402.433 ops/s
Iteration  15: 5102851.235 ops/s
Iteration  16: 5144452.048 ops/s
Iteration  17: 5064053.480 ops/s
Iteration  18: 5132149.064 ops/s
Iteration  19: 5077115.259 ops/s
Iteration  20: 5144313.740 ops/s
Iteration  21: 5145949.885 ops/s
Iteration  22: 5117751.157 ops/s
Iteration  23: 5114346.222 ops/s
Iteration  24: 5121898.429 ops/s
Iteration  25: 5143842.604 ops/s
Iteration  26: 5128387.196 ops/s
Iteration  27: 5142973.983 ops/s
Iteration  28: 5165102.740 ops/s
Iteration  29: 5142811.285 ops/s
Iteration  30: 5115663.052 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getLastOptional":
  5126579.603 ±(99.9%) 18897.630 ops/s [Average]
  (min, avg, max) = (5051604.393, 5126579.603, 5165102.740), stdev = 28285.085
  CI (99.9%): [5107681.973, 5145477.233] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getLastOptional  thrpt   30  5126579.603 ± 18897.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3815047.323 ops/s
# Warmup Iteration   2: 7745688.220 ops/s
# Warmup Iteration   3: 6599362.678 ops/s
# Warmup Iteration   4: 7607497.098 ops/s
# Warmup Iteration   5: 7675054.184 ops/s
# Warmup Iteration   6: 7721750.165 ops/s
# Warmup Iteration   7: 7690863.275 ops/s
# Warmup Iteration   8: 7726121.425 ops/s
# Warmup Iteration   9: 7749159.487 ops/s
# Warmup Iteration  10: 7725768.386 ops/s
# Warmup Iteration  11: 7612574.600 ops/s
# Warmup Iteration  12: 7742469.584 ops/s
# Warmup Iteration  13: 7741755.823 ops/s
# Warmup Iteration  14: 7625108.555 ops/s
# Warmup Iteration  15: 7697561.475 ops/s
# Warmup Iteration  16: 7674515.057 ops/s
# Warmup Iteration  17: 7794771.033 ops/s
# Warmup Iteration  18: 7807592.937 ops/s
# Warmup Iteration  19: 7733738.863 ops/s
# Warmup Iteration  20: 7802068.541 ops/s
# Warmup Iteration  21: 7759617.515 ops/s
# Warmup Iteration  22: 7740193.188 ops/s
# Warmup Iteration  23: 7822467.135 ops/s
# Warmup Iteration  24: 7784602.326 ops/s
# Warmup Iteration  25: 7807866.723 ops/s
# Warmup Iteration  26: 7731621.492 ops/s
# Warmup Iteration  27: 7749354.010 ops/s
# Warmup Iteration  28: 7807835.657 ops/s
# Warmup Iteration  29: 7820050.378 ops/s
# Warmup Iteration  30: 7814182.146 ops/s
Iteration   1: 7819162.550 ops/s
Iteration   2: 7801054.695 ops/s
Iteration   3: 7790064.551 ops/s
Iteration   4: 7823283.017 ops/s
Iteration   5: 7832477.570 ops/s
Iteration   6: 7797855.540 ops/s
Iteration   7: 7836705.284 ops/s
Iteration   8: 7678833.654 ops/s
Iteration   9: 7779298.679 ops/s
Iteration  10: 7694114.920 ops/s
Iteration  11: 7787583.271 ops/s
Iteration  12: 7817890.370 ops/s
Iteration  13: 7785538.415 ops/s
Iteration  14: 7695260.698 ops/s
Iteration  15: 7819392.084 ops/s
Iteration  16: 7829638.439 ops/s
Iteration  17: 7830863.655 ops/s
Iteration  18: 7748281.278 ops/s
Iteration  19: 7818154.637 ops/s
Iteration  20: 7847757.539 ops/s
Iteration  21: 7821304.631 ops/s
Iteration  22: 7769551.217 ops/s
Iteration  23: 7858239.068 ops/s
Iteration  24: 7816335.020 ops/s
Iteration  25: 7783823.050 ops/s
Iteration  26: 7787848.481 ops/s
Iteration  27: 7814068.979 ops/s
Iteration  28: 7796459.203 ops/s
Iteration  29: 7843174.367 ops/s
Iteration  30: 7722689.068 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getOnly":
  7794890.131 ±(99.9%) 30792.329 ops/s [Average]
  (min, avg, max) = (7678833.654, 7794890.131, 7858239.068), stdev = 46088.512
  CI (99.9%): [7764097.802, 7825682.460] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getOnly  thrpt   30  7794890.131 ± 30792.329  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 638691.970 ops/s
# Warmup Iteration   2: 728073.803 ops/s
# Warmup Iteration   3: 940072.807 ops/s
# Warmup Iteration   4: 931935.422 ops/s
# Warmup Iteration   5: 928635.993 ops/s
# Warmup Iteration   6: 939547.254 ops/s
# Warmup Iteration   7: 937595.019 ops/s
# Warmup Iteration   8: 939285.990 ops/s
# Warmup Iteration   9: 934698.416 ops/s
# Warmup Iteration  10: 786813.284 ops/s
# Warmup Iteration  11: 937803.516 ops/s
# Warmup Iteration  12: 931362.496 ops/s
# Warmup Iteration  13: 932756.624 ops/s
# Warmup Iteration  14: 934794.726 ops/s
# Warmup Iteration  15: 939269.932 ops/s
# Warmup Iteration  16: 941480.180 ops/s
# Warmup Iteration  17: 987574.972 ops/s
# Warmup Iteration  18: 990385.452 ops/s
# Warmup Iteration  19: 995574.471 ops/s
# Warmup Iteration  20: 990806.685 ops/s
# Warmup Iteration  21: 994888.349 ops/s
# Warmup Iteration  22: 986443.029 ops/s
# Warmup Iteration  23: 986907.665 ops/s
# Warmup Iteration  24: 995391.718 ops/s
# Warmup Iteration  25: 986542.660 ops/s
# Warmup Iteration  26: 987895.671 ops/s
# Warmup Iteration  27: 991505.234 ops/s
# Warmup Iteration  28: 992010.446 ops/s
# Warmup Iteration  29: 995297.639 ops/s
# Warmup Iteration  30: 991353.079 ops/s
Iteration   1: 988245.473 ops/s
Iteration   2: 993898.025 ops/s
Iteration   3: 988474.739 ops/s
Iteration   4: 997495.368 ops/s
Iteration   5: 991110.981 ops/s
Iteration   6: 987806.539 ops/s
Iteration   7: 991772.870 ops/s
Iteration   8: 998630.881 ops/s
Iteration   9: 979725.966 ops/s
Iteration  10: 997154.336 ops/s
Iteration  11: 991981.084 ops/s
Iteration  12: 999292.047 ops/s
Iteration  13: 994308.294 ops/s
Iteration  14: 973692.501 ops/s
Iteration  15: 996885.342 ops/s
Iteration  16: 997590.063 ops/s
Iteration  17: 994060.975 ops/s
Iteration  18: 997945.256 ops/s
Iteration  19: 971147.586 ops/s
Iteration  20: 995788.096 ops/s
Iteration  21: 997013.892 ops/s
Iteration  22: 993660.439 ops/s
Iteration  23: 993829.711 ops/s
Iteration  24: 992451.633 ops/s
Iteration  25: 998268.879 ops/s
Iteration  26: 988346.203 ops/s
Iteration  27: 988526.065 ops/s
Iteration  28: 992805.599 ops/s
Iteration  29: 993276.252 ops/s
Iteration  30: 994704.524 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getOnly_empty_throws":
  991996.321 ±(99.9%) 4547.039 ops/s [Average]
  (min, avg, max) = (971147.586, 991996.321, 999292.047), stdev = 6805.794
  CI (99.9%): [987449.282, 996543.360] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  991996.321 ± 4547.039  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 640131.392 ops/s
# Warmup Iteration   2: 734944.647 ops/s
# Warmup Iteration   3: 942889.571 ops/s
# Warmup Iteration   4: 933280.479 ops/s
# Warmup Iteration   5: 936737.287 ops/s
# Warmup Iteration   6: 940559.748 ops/s
# Warmup Iteration   7: 936485.306 ops/s
# Warmup Iteration   8: 932743.893 ops/s
# Warmup Iteration   9: 941302.979 ops/s
# Warmup Iteration  10: 787401.449 ops/s
# Warmup Iteration  11: 942169.819 ops/s
# Warmup Iteration  12: 943797.301 ops/s
# Warmup Iteration  13: 944147.475 ops/s
# Warmup Iteration  14: 936193.177 ops/s
# Warmup Iteration  15: 935605.201 ops/s
# Warmup Iteration  16: 941240.993 ops/s
# Warmup Iteration  17: 986561.550 ops/s
# Warmup Iteration  18: 977542.455 ops/s
# Warmup Iteration  19: 990112.721 ops/s
# Warmup Iteration  20: 986582.404 ops/s
# Warmup Iteration  21: 979326.775 ops/s
# Warmup Iteration  22: 979091.435 ops/s
# Warmup Iteration  23: 989078.486 ops/s
# Warmup Iteration  24: 983714.029 ops/s
# Warmup Iteration  25: 987044.461 ops/s
# Warmup Iteration  26: 984616.538 ops/s
# Warmup Iteration  27: 986207.239 ops/s
# Warmup Iteration  28: 977550.903 ops/s
# Warmup Iteration  29: 979660.827 ops/s
# Warmup Iteration  30: 976329.431 ops/s
Iteration   1: 989673.769 ops/s
Iteration   2: 981554.237 ops/s
Iteration   3: 987125.525 ops/s
Iteration   4: 982748.157 ops/s
Iteration   5: 991572.731 ops/s
Iteration   6: 983890.830 ops/s
Iteration   7: 985809.162 ops/s
Iteration   8: 984426.399 ops/s
Iteration   9: 981644.882 ops/s
Iteration  10: 984431.869 ops/s
Iteration  11: 977581.308 ops/s
Iteration  12: 987004.112 ops/s
Iteration  13: 982615.312 ops/s
Iteration  14: 985175.336 ops/s
Iteration  15: 980420.614 ops/s
Iteration  16: 987480.199 ops/s
Iteration  17: 989854.022 ops/s
Iteration  18: 984167.232 ops/s
Iteration  19: 985212.967 ops/s
Iteration  20: 991979.013 ops/s
Iteration  21: 986536.751 ops/s
Iteration  22: 984483.601 ops/s
Iteration  23: 986761.070 ops/s
Iteration  24: 987155.799 ops/s
Iteration  25: 988082.940 ops/s
Iteration  26: 991354.488 ops/s
Iteration  27: 984871.395 ops/s
Iteration  28: 967366.297 ops/s
Iteration  29: 981737.879 ops/s
Iteration  30: 985018.240 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  984924.538 ±(99.9%) 3155.501 ops/s [Average]
  (min, avg, max) = (967366.297, 984924.538, 991979.013), stdev = 4723.006
  CI (99.9%): [981769.037, 988080.039] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  984924.538 ± 3155.501  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6818747.272 ops/s
# Warmup Iteration   2: 14037513.006 ops/s
# Warmup Iteration   3: 12068836.551 ops/s
# Warmup Iteration   4: 14184702.351 ops/s
# Warmup Iteration   5: 14172365.791 ops/s
# Warmup Iteration   6: 14157001.925 ops/s
# Warmup Iteration   7: 14106585.304 ops/s
# Warmup Iteration   8: 14156418.314 ops/s
# Warmup Iteration   9: 14035659.017 ops/s
# Warmup Iteration  10: 14070947.970 ops/s
# Warmup Iteration  11: 14042968.884 ops/s
# Warmup Iteration  12: 14106939.400 ops/s
# Warmup Iteration  13: 14051871.537 ops/s
# Warmup Iteration  14: 14189352.282 ops/s
# Warmup Iteration  15: 14088650.232 ops/s
# Warmup Iteration  16: 14161294.043 ops/s
# Warmup Iteration  17: 14384328.342 ops/s
# Warmup Iteration  18: 14401301.121 ops/s
# Warmup Iteration  19: 14419103.247 ops/s
# Warmup Iteration  20: 14407318.995 ops/s
# Warmup Iteration  21: 14312422.140 ops/s
# Warmup Iteration  22: 14423754.856 ops/s
# Warmup Iteration  23: 14470459.129 ops/s
# Warmup Iteration  24: 14403034.852 ops/s
# Warmup Iteration  25: 14405000.919 ops/s
# Warmup Iteration  26: 14478965.718 ops/s
# Warmup Iteration  27: 14329146.524 ops/s
# Warmup Iteration  28: 14431918.860 ops/s
# Warmup Iteration  29: 14220475.474 ops/s
# Warmup Iteration  30: 14422593.037 ops/s
Iteration   1: 14394638.551 ops/s
Iteration   2: 14362398.034 ops/s
Iteration   3: 14355266.183 ops/s
Iteration   4: 14234840.496 ops/s
Iteration   5: 14342802.617 ops/s
Iteration   6: 14312972.350 ops/s
Iteration   7: 14386665.130 ops/s
Iteration   8: 14456240.228 ops/s
Iteration   9: 14437206.377 ops/s
Iteration  10: 13974663.430 ops/s
Iteration  11: 14317337.490 ops/s
Iteration  12: 14222684.342 ops/s
Iteration  13: 14472228.760 ops/s
Iteration  14: 14283658.073 ops/s
Iteration  15: 14454950.008 ops/s
Iteration  16: 14332400.184 ops/s
Iteration  17: 14346910.249 ops/s
Iteration  18: 14396700.925 ops/s
Iteration  19: 14416608.410 ops/s
Iteration  20: 14439365.148 ops/s
Iteration  21: 14320067.989 ops/s
Iteration  22: 14405635.560 ops/s
Iteration  23: 14345742.275 ops/s
Iteration  24: 14319079.273 ops/s
Iteration  25: 14354936.420 ops/s
Iteration  26: 14236153.565 ops/s
Iteration  27: 14173345.796 ops/s
Iteration  28: 14381705.959 ops/s
Iteration  29: 14450338.919 ops/s
Iteration  30: 14453184.068 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException":
  14346024.227 ±(99.9%) 69180.335 ops/s [Average]
  (min, avg, max) = (13974663.430, 14346024.227, 14472228.760), stdev = 103545.876
  CI (99.9%): [14276843.892, 14415204.562] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException  thrpt   30  14346024.227 ± 69180.335  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getWithIndexOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getWithIndexOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 602858.210 ops/s
# Warmup Iteration   2: 674685.444 ops/s
# Warmup Iteration   3: 867156.191 ops/s
# Warmup Iteration   4: 867303.484 ops/s
# Warmup Iteration   5: 858191.593 ops/s
# Warmup Iteration   6: 870276.765 ops/s
# Warmup Iteration   7: 865871.823 ops/s
# Warmup Iteration   8: 865227.010 ops/s
# Warmup Iteration   9: 868417.117 ops/s
# Warmup Iteration  10: 771550.835 ops/s
# Warmup Iteration  11: 824166.824 ops/s
# Warmup Iteration  12: 869831.820 ops/s
# Warmup Iteration  13: 866713.975 ops/s
# Warmup Iteration  14: 860750.427 ops/s
# Warmup Iteration  15: 859296.559 ops/s
# Warmup Iteration  16: 864739.688 ops/s
# Warmup Iteration  17: 902515.939 ops/s
# Warmup Iteration  18: 903640.660 ops/s
# Warmup Iteration  19: 904760.687 ops/s
# Warmup Iteration  20: 894420.396 ops/s
# Warmup Iteration  21: 901653.456 ops/s
# Warmup Iteration  22: 903028.588 ops/s
# Warmup Iteration  23: 899527.228 ops/s
# Warmup Iteration  24: 896692.844 ops/s
# Warmup Iteration  25: 902944.311 ops/s
# Warmup Iteration  26: 902454.428 ops/s
# Warmup Iteration  27: 903393.389 ops/s
# Warmup Iteration  28: 905350.043 ops/s
# Warmup Iteration  29: 897667.258 ops/s
# Warmup Iteration  30: 899975.532 ops/s
Iteration   1: 899776.896 ops/s
Iteration   2: 906212.128 ops/s
Iteration   3: 894409.483 ops/s
Iteration   4: 876846.626 ops/s
Iteration   5: 904021.288 ops/s
Iteration   6: 903941.750 ops/s
Iteration   7: 895678.236 ops/s
Iteration   8: 903167.045 ops/s
Iteration   9: 905664.942 ops/s
Iteration  10: 900083.735 ops/s
Iteration  11: 899518.299 ops/s
Iteration  12: 888832.166 ops/s
Iteration  13: 906098.071 ops/s
Iteration  14: 903798.317 ops/s
Iteration  15: 903230.626 ops/s
Iteration  16: 891637.273 ops/s
Iteration  17: 905435.665 ops/s
Iteration  18: 889375.278 ops/s
Iteration  19: 888760.008 ops/s
Iteration  20: 903861.094 ops/s
Iteration  21: 887843.953 ops/s
Iteration  22: 903955.861 ops/s
Iteration  23: 905072.195 ops/s
Iteration  24: 907593.918 ops/s
Iteration  25: 901116.103 ops/s
Iteration  26: 903150.205 ops/s
Iteration  27: 904546.493 ops/s
Iteration  28: 907037.102 ops/s
Iteration  29: 904574.415 ops/s
Iteration  30: 908616.211 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getWithIndexOutOfBoundsException":
  900128.513 ±(99.9%) 5057.772 ops/s [Average]
  (min, avg, max) = (876846.626, 900128.513, 908616.211), stdev = 7570.235
  CI (99.9%): [895070.741, 905186.284] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_getWithIndexOutOfBoundsException  thrpt   30  900128.513 ± 5057.772  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 279342.927 ops/s
# Warmup Iteration   2: 617674.073 ops/s
# Warmup Iteration   3: 657528.822 ops/s
# Warmup Iteration   4: 662995.628 ops/s
# Warmup Iteration   5: 545275.100 ops/s
# Warmup Iteration   6: 662974.245 ops/s
# Warmup Iteration   7: 661832.237 ops/s
# Warmup Iteration   8: 663053.201 ops/s
# Warmup Iteration   9: 664872.682 ops/s
# Warmup Iteration  10: 664580.276 ops/s
# Warmup Iteration  11: 661666.675 ops/s
# Warmup Iteration  12: 658285.908 ops/s
# Warmup Iteration  13: 657601.237 ops/s
# Warmup Iteration  14: 664271.858 ops/s
# Warmup Iteration  15: 664354.434 ops/s
# Warmup Iteration  16: 659152.306 ops/s
# Warmup Iteration  17: 659015.157 ops/s
# Warmup Iteration  18: 664260.320 ops/s
# Warmup Iteration  19: 659313.954 ops/s
# Warmup Iteration  20: 665985.012 ops/s
# Warmup Iteration  21: 658035.722 ops/s
# Warmup Iteration  22: 664784.757 ops/s
# Warmup Iteration  23: 662695.416 ops/s
# Warmup Iteration  24: 663967.358 ops/s
# Warmup Iteration  25: 657148.087 ops/s
# Warmup Iteration  26: 666145.983 ops/s
# Warmup Iteration  27: 659444.628 ops/s
# Warmup Iteration  28: 664829.694 ops/s
# Warmup Iteration  29: 656703.438 ops/s
# Warmup Iteration  30: 658881.400 ops/s
Iteration   1: 653417.352 ops/s
Iteration   2: 658300.073 ops/s
Iteration   3: 663172.366 ops/s
Iteration   4: 665282.835 ops/s
Iteration   5: 660999.561 ops/s
Iteration   6: 664205.023 ops/s
Iteration   7: 663486.473 ops/s
Iteration   8: 655840.027 ops/s
Iteration   9: 666303.595 ops/s
Iteration  10: 662173.370 ops/s
Iteration  11: 665472.345 ops/s
Iteration  12: 660410.299 ops/s
Iteration  13: 665477.819 ops/s
Iteration  14: 662357.916 ops/s
Iteration  15: 660587.896 ops/s
Iteration  16: 666694.199 ops/s
Iteration  17: 662528.598 ops/s
Iteration  18: 665186.035 ops/s
Iteration  19: 648601.895 ops/s
Iteration  20: 664766.992 ops/s
Iteration  21: 659224.770 ops/s
Iteration  22: 661495.679 ops/s
Iteration  23: 665879.230 ops/s
Iteration  24: 662344.184 ops/s
Iteration  25: 664850.501 ops/s
Iteration  26: 661290.155 ops/s
Iteration  27: 662345.140 ops/s
Iteration  28: 663651.220 ops/s
Iteration  29: 657740.013 ops/s
Iteration  30: 663518.794 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupBy":
  661920.145 ±(99.9%) 2682.126 ops/s [Average]
  (min, avg, max) = (648601.895, 661920.145, 666694.199), stdev = 4014.480
  CI (99.9%): [659238.019, 664602.271] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupBy  thrpt   30  661920.145 ± 2682.126  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 122082.754 ops/s
# Warmup Iteration   2: 217268.411 ops/s
# Warmup Iteration   3: 255733.567 ops/s
# Warmup Iteration   4: 258726.258 ops/s
# Warmup Iteration   5: 258474.738 ops/s
# Warmup Iteration   6: 208163.348 ops/s
# Warmup Iteration   7: 258572.178 ops/s
# Warmup Iteration   8: 257277.262 ops/s
# Warmup Iteration   9: 258317.331 ops/s
# Warmup Iteration  10: 258964.573 ops/s
# Warmup Iteration  11: 257332.066 ops/s
# Warmup Iteration  12: 256235.350 ops/s
# Warmup Iteration  13: 259011.586 ops/s
# Warmup Iteration  14: 254417.297 ops/s
# Warmup Iteration  15: 258881.721 ops/s
# Warmup Iteration  16: 258395.027 ops/s
# Warmup Iteration  17: 257238.633 ops/s
# Warmup Iteration  18: 259159.995 ops/s
# Warmup Iteration  19: 258227.453 ops/s
# Warmup Iteration  20: 259041.593 ops/s
# Warmup Iteration  21: 259940.192 ops/s
# Warmup Iteration  22: 259014.934 ops/s
# Warmup Iteration  23: 259423.663 ops/s
# Warmup Iteration  24: 258373.146 ops/s
# Warmup Iteration  25: 258899.808 ops/s
# Warmup Iteration  26: 260181.519 ops/s
# Warmup Iteration  27: 258356.107 ops/s
# Warmup Iteration  28: 256893.965 ops/s
# Warmup Iteration  29: 257690.072 ops/s
# Warmup Iteration  30: 256925.758 ops/s
Iteration   1: 258644.356 ops/s
Iteration   2: 259384.568 ops/s
Iteration   3: 254773.318 ops/s
Iteration   4: 259138.719 ops/s
Iteration   5: 258613.667 ops/s
Iteration   6: 259658.902 ops/s
Iteration   7: 257843.696 ops/s
Iteration   8: 259401.142 ops/s
Iteration   9: 259500.854 ops/s
Iteration  10: 258850.219 ops/s
Iteration  11: 258140.378 ops/s
Iteration  12: 259443.473 ops/s
Iteration  13: 256466.788 ops/s
Iteration  14: 254983.234 ops/s
Iteration  15: 258617.594 ops/s
Iteration  16: 259383.159 ops/s
Iteration  17: 257177.220 ops/s
Iteration  18: 255715.129 ops/s
Iteration  19: 258803.254 ops/s
Iteration  20: 259381.372 ops/s
Iteration  21: 258076.732 ops/s
Iteration  22: 258784.822 ops/s
Iteration  23: 259453.193 ops/s
Iteration  24: 259298.249 ops/s
Iteration  25: 259679.489 ops/s
Iteration  26: 258992.085 ops/s
Iteration  27: 258991.330 ops/s
Iteration  28: 258936.311 ops/s
Iteration  29: 258292.879 ops/s
Iteration  30: 255930.300 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByEach":
  258345.214 ±(99.9%) 939.218 ops/s [Average]
  (min, avg, max) = (254773.318, 258345.214, 259679.489), stdev = 1405.778
  CI (99.9%): [257405.996, 259284.433] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByEach  thrpt   30  258345.214 ± 939.218  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2908552.035 ops/s
# Warmup Iteration   2: 6608683.125 ops/s
# Warmup Iteration   3: 6256658.028 ops/s
# Warmup Iteration   4: 6109147.817 ops/s
# Warmup Iteration   5: 6729488.962 ops/s
# Warmup Iteration   6: 6755200.453 ops/s
# Warmup Iteration   7: 6702146.825 ops/s
# Warmup Iteration   8: 6786717.582 ops/s
# Warmup Iteration   9: 6790229.407 ops/s
# Warmup Iteration  10: 6764545.808 ops/s
# Warmup Iteration  11: 6722031.244 ops/s
# Warmup Iteration  12: 6760085.105 ops/s
# Warmup Iteration  13: 6718232.996 ops/s
# Warmup Iteration  14: 6774616.692 ops/s
# Warmup Iteration  15: 6769780.569 ops/s
# Warmup Iteration  16: 6755106.811 ops/s
# Warmup Iteration  17: 6778234.547 ops/s
# Warmup Iteration  18: 6694896.825 ops/s
# Warmup Iteration  19: 6777292.578 ops/s
# Warmup Iteration  20: 6768999.941 ops/s
# Warmup Iteration  21: 6806002.753 ops/s
# Warmup Iteration  22: 6789638.839 ops/s
# Warmup Iteration  23: 6780440.936 ops/s
# Warmup Iteration  24: 6785269.079 ops/s
# Warmup Iteration  25: 6766108.586 ops/s
# Warmup Iteration  26: 6781443.933 ops/s
# Warmup Iteration  27: 6782243.546 ops/s
# Warmup Iteration  28: 6769657.210 ops/s
# Warmup Iteration  29: 6794534.523 ops/s
# Warmup Iteration  30: 6783755.663 ops/s
Iteration   1: 6787836.173 ops/s
Iteration   2: 6807444.341 ops/s
Iteration   3: 6776117.260 ops/s
Iteration   4: 6753666.209 ops/s
Iteration   5: 6773662.674 ops/s
Iteration   6: 6762262.476 ops/s
Iteration   7: 6773621.034 ops/s
Iteration   8: 6748233.167 ops/s
Iteration   9: 6637967.984 ops/s
Iteration  10: 6757229.711 ops/s
Iteration  11: 6810663.081 ops/s
Iteration  12: 6597919.755 ops/s
Iteration  13: 6746995.699 ops/s
Iteration  14: 6673005.878 ops/s
Iteration  15: 6727525.330 ops/s
Iteration  16: 6745017.329 ops/s
Iteration  17: 6671730.402 ops/s
Iteration  18: 6796940.129 ops/s
Iteration  19: 6773022.244 ops/s
Iteration  20: 6716323.592 ops/s
Iteration  21: 6796930.603 ops/s
Iteration  22: 6804563.184 ops/s
Iteration  23: 6616695.458 ops/s
Iteration  24: 6757593.021 ops/s
Iteration  25: 6748568.614 ops/s
Iteration  26: 6776580.075 ops/s
Iteration  27: 6618162.530 ops/s
Iteration  28: 6681323.075 ops/s
Iteration  29: 6644316.831 ops/s
Iteration  30: 6755048.375 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey":
  6734565.541 ±(99.9%) 41600.274 ops/s [Average]
  (min, avg, max) = (6597919.755, 6734565.541, 6810663.081), stdev = 62265.337
  CI (99.9%): [6692965.267, 6776165.816] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  6734565.541 ± 41600.274  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1675358.240 ops/s
# Warmup Iteration   2: 3989557.971 ops/s
# Warmup Iteration   3: 4035116.293 ops/s
# Warmup Iteration   4: 3322749.400 ops/s
# Warmup Iteration   5: 4044411.096 ops/s
# Warmup Iteration   6: 4033695.218 ops/s
# Warmup Iteration   7: 4029183.968 ops/s
# Warmup Iteration   8: 4008165.606 ops/s
# Warmup Iteration   9: 4025669.183 ops/s
# Warmup Iteration  10: 4043073.299 ops/s
# Warmup Iteration  11: 4024357.798 ops/s
# Warmup Iteration  12: 4044506.485 ops/s
# Warmup Iteration  13: 4010932.819 ops/s
# Warmup Iteration  14: 4044811.579 ops/s
# Warmup Iteration  15: 4034768.160 ops/s
# Warmup Iteration  16: 4031394.826 ops/s
# Warmup Iteration  17: 4049758.639 ops/s
# Warmup Iteration  18: 4039578.886 ops/s
# Warmup Iteration  19: 4043820.307 ops/s
# Warmup Iteration  20: 4048292.161 ops/s
# Warmup Iteration  21: 4051526.530 ops/s
# Warmup Iteration  22: 4035829.406 ops/s
# Warmup Iteration  23: 4011647.633 ops/s
# Warmup Iteration  24: 4024460.226 ops/s
# Warmup Iteration  25: 4028868.447 ops/s
# Warmup Iteration  26: 4014074.040 ops/s
# Warmup Iteration  27: 4046699.762 ops/s
# Warmup Iteration  28: 4018475.902 ops/s
# Warmup Iteration  29: 4017962.166 ops/s
# Warmup Iteration  30: 4016427.110 ops/s
Iteration   1: 4059877.812 ops/s
Iteration   2: 4042892.684 ops/s
Iteration   3: 4031816.145 ops/s
Iteration   4: 4055950.042 ops/s
Iteration   5: 4010095.428 ops/s
Iteration   6: 4047179.673 ops/s
Iteration   7: 3988453.811 ops/s
Iteration   8: 4062630.526 ops/s
Iteration   9: 3978798.324 ops/s
Iteration  10: 4048817.180 ops/s
Iteration  11: 4035632.193 ops/s
Iteration  12: 4050518.183 ops/s
Iteration  13: 4035231.529 ops/s
Iteration  14: 3999449.526 ops/s
Iteration  15: 3978067.485 ops/s
Iteration  16: 4028178.130 ops/s
Iteration  17: 3988118.676 ops/s
Iteration  18: 4047522.615 ops/s
Iteration  19: 4018016.626 ops/s
Iteration  20: 4021014.315 ops/s
Iteration  21: 4004647.018 ops/s
Iteration  22: 4033491.799 ops/s
Iteration  23: 3930909.073 ops/s
Iteration  24: 4054502.130 ops/s
Iteration  25: 4045308.317 ops/s
Iteration  26: 4064795.517 ops/s
Iteration  27: 3965970.251 ops/s
Iteration  28: 4039113.448 ops/s
Iteration  29: 3974986.089 ops/s
Iteration  30: 3976039.018 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target":
  4020600.785 ±(99.9%) 23071.791 ops/s [Average]
  (min, avg, max) = (3930909.073, 4020600.785, 4064795.517), stdev = 34532.773
  CI (99.9%): [3997528.995, 4043672.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  4020600.785 ± 23071.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 463660.746 ops/s
# Warmup Iteration   2: 588503.076 ops/s
# Warmup Iteration   3: 740110.371 ops/s
# Warmup Iteration   4: 743734.032 ops/s
# Warmup Iteration   5: 740233.724 ops/s
# Warmup Iteration   6: 743923.774 ops/s
# Warmup Iteration   7: 741058.771 ops/s
# Warmup Iteration   8: 737493.448 ops/s
# Warmup Iteration   9: 619646.725 ops/s
# Warmup Iteration  10: 741837.008 ops/s
# Warmup Iteration  11: 742195.294 ops/s
# Warmup Iteration  12: 737173.662 ops/s
# Warmup Iteration  13: 740024.738 ops/s
# Warmup Iteration  14: 741842.458 ops/s
# Warmup Iteration  15: 736801.979 ops/s
# Warmup Iteration  16: 737387.974 ops/s
# Warmup Iteration  17: 776068.020 ops/s
# Warmup Iteration  18: 780247.350 ops/s
# Warmup Iteration  19: 776641.680 ops/s
# Warmup Iteration  20: 780409.102 ops/s
# Warmup Iteration  21: 782080.708 ops/s
# Warmup Iteration  22: 782883.697 ops/s
# Warmup Iteration  23: 781959.354 ops/s
# Warmup Iteration  24: 783260.719 ops/s
# Warmup Iteration  25: 778737.564 ops/s
# Warmup Iteration  26: 784315.588 ops/s
# Warmup Iteration  27: 779088.748 ops/s
# Warmup Iteration  28: 781854.153 ops/s
# Warmup Iteration  29: 777007.096 ops/s
# Warmup Iteration  30: 780256.650 ops/s
Iteration   1: 781335.863 ops/s
Iteration   2: 784505.142 ops/s
Iteration   3: 780501.874 ops/s
Iteration   4: 783478.528 ops/s
Iteration   5: 784197.334 ops/s
Iteration   6: 781647.411 ops/s
Iteration   7: 783556.552 ops/s
Iteration   8: 780474.719 ops/s
Iteration   9: 779476.466 ops/s
Iteration  10: 780011.910 ops/s
Iteration  11: 780602.642 ops/s
Iteration  12: 781715.210 ops/s
Iteration  13: 781729.863 ops/s
Iteration  14: 771951.233 ops/s
Iteration  15: 780475.779 ops/s
Iteration  16: 783508.559 ops/s
Iteration  17: 778156.074 ops/s
Iteration  18: 780114.802 ops/s
Iteration  19: 780277.302 ops/s
Iteration  20: 767095.416 ops/s
Iteration  21: 778778.865 ops/s
Iteration  22: 779149.163 ops/s
Iteration  23: 779758.717 ops/s
Iteration  24: 785346.235 ops/s
Iteration  25: 770384.802 ops/s
Iteration  26: 781956.807 ops/s
Iteration  27: 785301.633 ops/s
Iteration  28: 776114.408 ops/s
Iteration  29: 781004.197 ops/s
Iteration  30: 783378.787 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  780199.543 ±(99.9%) 2782.830 ops/s [Average]
  (min, avg, max) = (767095.416, 780199.543, 785346.235), stdev = 4165.209
  CI (99.9%): [777416.713, 782982.373] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                     Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  780199.543 ± 2782.830  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 485616.923 ops/s
# Warmup Iteration   2: 573929.649 ops/s
# Warmup Iteration   3: 734731.990 ops/s
# Warmup Iteration   4: 737884.459 ops/s
# Warmup Iteration   5: 734837.022 ops/s
# Warmup Iteration   6: 739623.968 ops/s
# Warmup Iteration   7: 731361.647 ops/s
# Warmup Iteration   8: 738090.043 ops/s
# Warmup Iteration   9: 691242.670 ops/s
# Warmup Iteration  10: 662722.972 ops/s
# Warmup Iteration  11: 735900.870 ops/s
# Warmup Iteration  12: 740664.176 ops/s
# Warmup Iteration  13: 730220.907 ops/s
# Warmup Iteration  14: 735580.776 ops/s
# Warmup Iteration  15: 740343.120 ops/s
# Warmup Iteration  16: 732711.192 ops/s
# Warmup Iteration  17: 773843.497 ops/s
# Warmup Iteration  18: 770943.894 ops/s
# Warmup Iteration  19: 764265.407 ops/s
# Warmup Iteration  20: 769514.674 ops/s
# Warmup Iteration  21: 772894.069 ops/s
# Warmup Iteration  22: 767168.504 ops/s
# Warmup Iteration  23: 769977.913 ops/s
# Warmup Iteration  24: 762821.233 ops/s
# Warmup Iteration  25: 770209.903 ops/s
# Warmup Iteration  26: 769312.180 ops/s
# Warmup Iteration  27: 768301.246 ops/s
# Warmup Iteration  28: 770999.283 ops/s
# Warmup Iteration  29: 771974.234 ops/s
# Warmup Iteration  30: 771896.096 ops/s
Iteration   1: 767884.508 ops/s
Iteration   2: 773298.068 ops/s
Iteration   3: 775667.077 ops/s
Iteration   4: 773053.344 ops/s
Iteration   5: 769391.643 ops/s
Iteration   6: 766904.488 ops/s
Iteration   7: 775032.598 ops/s
Iteration   8: 756865.877 ops/s
Iteration   9: 773127.838 ops/s
Iteration  10: 770452.038 ops/s
Iteration  11: 764172.304 ops/s
Iteration  12: 768964.760 ops/s
Iteration  13: 768356.453 ops/s
Iteration  14: 768069.855 ops/s
Iteration  15: 764507.092 ops/s
Iteration  16: 768163.359 ops/s
Iteration  17: 768200.352 ops/s
Iteration  18: 766292.390 ops/s
Iteration  19: 768279.174 ops/s
Iteration  20: 765379.023 ops/s
Iteration  21: 772185.335 ops/s
Iteration  22: 770035.814 ops/s
Iteration  23: 767197.047 ops/s
Iteration  24: 770347.066 ops/s
Iteration  25: 772472.537 ops/s
Iteration  26: 770888.738 ops/s
Iteration  27: 766665.648 ops/s
Iteration  28: 774593.753 ops/s
Iteration  29: 773217.772 ops/s
Iteration  30: 768967.836 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  769287.793 ±(99.9%) 2599.309 ops/s [Average]
  (min, avg, max) = (756865.877, 769287.793, 775667.077), stdev = 3890.523
  CI (99.9%): [766688.484, 771887.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  769287.793 ± 2599.309  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7423839.826 ops/s
# Warmup Iteration   2: 14879431.507 ops/s
# Warmup Iteration   3: 12479929.894 ops/s
# Warmup Iteration   4: 14767524.217 ops/s
# Warmup Iteration   5: 14675795.007 ops/s
# Warmup Iteration   6: 14715566.021 ops/s
# Warmup Iteration   7: 14759398.519 ops/s
# Warmup Iteration   8: 14747616.365 ops/s
# Warmup Iteration   9: 14805834.103 ops/s
# Warmup Iteration  10: 14723566.626 ops/s
# Warmup Iteration  11: 14747343.466 ops/s
# Warmup Iteration  12: 14671442.755 ops/s
# Warmup Iteration  13: 14636126.405 ops/s
# Warmup Iteration  14: 14797042.408 ops/s
# Warmup Iteration  15: 14800750.227 ops/s
# Warmup Iteration  16: 14738879.292 ops/s
# Warmup Iteration  17: 14967832.469 ops/s
# Warmup Iteration  18: 14947657.776 ops/s
# Warmup Iteration  19: 14906524.209 ops/s
# Warmup Iteration  20: 14919189.871 ops/s
# Warmup Iteration  21: 14857387.777 ops/s
# Warmup Iteration  22: 14836330.193 ops/s
# Warmup Iteration  23: 14828049.226 ops/s
# Warmup Iteration  24: 14933469.222 ops/s
# Warmup Iteration  25: 14858402.837 ops/s
# Warmup Iteration  26: 14860774.611 ops/s
# Warmup Iteration  27: 14921659.980 ops/s
# Warmup Iteration  28: 14899115.050 ops/s
# Warmup Iteration  29: 14823868.939 ops/s
# Warmup Iteration  30: 14757187.269 ops/s
Iteration   1: 14531821.553 ops/s
Iteration   2: 15006623.278 ops/s
Iteration   3: 14882935.788 ops/s
Iteration   4: 14980567.418 ops/s
Iteration   5: 14870004.737 ops/s
Iteration   6: 14914068.666 ops/s
Iteration   7: 14939173.677 ops/s
Iteration   8: 14939789.464 ops/s
Iteration   9: 14930777.172 ops/s
Iteration  10: 14938288.809 ops/s
Iteration  11: 14719355.367 ops/s
Iteration  12: 14903401.957 ops/s
Iteration  13: 14438549.287 ops/s
Iteration  14: 14904327.346 ops/s
Iteration  15: 14920544.208 ops/s
Iteration  16: 14849990.000 ops/s
Iteration  17: 14744536.518 ops/s
Iteration  18: 14731082.393 ops/s
Iteration  19: 14872574.650 ops/s
Iteration  20: 14597073.977 ops/s
Iteration  21: 14945238.633 ops/s
Iteration  22: 14880674.501 ops/s
Iteration  23: 14881645.805 ops/s
Iteration  24: 14939786.281 ops/s
Iteration  25: 14937535.629 ops/s
Iteration  26: 14901728.463 ops/s
Iteration  27: 14814033.632 ops/s
Iteration  28: 14905558.098 ops/s
Iteration  29: 14920622.813 ops/s
Iteration  30: 14951132.063 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_indexOf":
  14856448.073 ±(99.9%) 88894.032 ops/s [Average]
  (min, avg, max) = (14438549.287, 14856448.073, 15006623.278), stdev = 133052.413
  CI (99.9%): [14767554.040, 14945342.105] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_indexOf  thrpt   30  14856448.073 ± 88894.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6252615.141 ops/s
# Warmup Iteration   2: 13021293.771 ops/s
# Warmup Iteration   3: 10970008.229 ops/s
# Warmup Iteration   4: 12862755.088 ops/s
# Warmup Iteration   5: 12934558.879 ops/s
# Warmup Iteration   6: 12948732.355 ops/s
# Warmup Iteration   7: 12995893.682 ops/s
# Warmup Iteration   8: 12971850.501 ops/s
# Warmup Iteration   9: 12941227.183 ops/s
# Warmup Iteration  10: 13029529.319 ops/s
# Warmup Iteration  11: 12953694.565 ops/s
# Warmup Iteration  12: 12857649.497 ops/s
# Warmup Iteration  13: 13009420.312 ops/s
# Warmup Iteration  14: 12890513.433 ops/s
# Warmup Iteration  15: 13007061.474 ops/s
# Warmup Iteration  16: 12899876.988 ops/s
# Warmup Iteration  17: 13157088.559 ops/s
# Warmup Iteration  18: 13257374.408 ops/s
# Warmup Iteration  19: 13122972.921 ops/s
# Warmup Iteration  20: 13191291.881 ops/s
# Warmup Iteration  21: 13191693.393 ops/s
# Warmup Iteration  22: 13224195.532 ops/s
# Warmup Iteration  23: 13162812.934 ops/s
# Warmup Iteration  24: 13274805.802 ops/s
# Warmup Iteration  25: 13190375.216 ops/s
# Warmup Iteration  26: 13185853.793 ops/s
# Warmup Iteration  27: 13196065.363 ops/s
# Warmup Iteration  28: 13100932.497 ops/s
# Warmup Iteration  29: 13200831.910 ops/s
# Warmup Iteration  30: 13219944.980 ops/s
Iteration   1: 13207020.369 ops/s
Iteration   2: 13105316.686 ops/s
Iteration   3: 13088444.353 ops/s
Iteration   4: 13239199.080 ops/s
Iteration   5: 13167730.589 ops/s
Iteration   6: 13207230.688 ops/s
Iteration   7: 13149798.133 ops/s
Iteration   8: 13181673.367 ops/s
Iteration   9: 13208396.558 ops/s
Iteration  10: 13049750.472 ops/s
Iteration  11: 13162570.510 ops/s
Iteration  12: 13201761.559 ops/s
Iteration  13: 13270938.878 ops/s
Iteration  14: 13162735.576 ops/s
Iteration  15: 13211371.128 ops/s
Iteration  16: 13227360.431 ops/s
Iteration  17: 13143735.620 ops/s
Iteration  18: 13126329.524 ops/s
Iteration  19: 13148949.448 ops/s
Iteration  20: 13178558.794 ops/s
Iteration  21: 13214965.602 ops/s
Iteration  22: 13228201.998 ops/s
Iteration  23: 13190017.959 ops/s
Iteration  24: 13152767.789 ops/s
Iteration  25: 12979643.310 ops/s
Iteration  26: 13253552.568 ops/s
Iteration  27: 13189990.649 ops/s
Iteration  28: 12907857.785 ops/s
Iteration  29: 13264503.145 ops/s
Iteration  30: 13007438.967 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectInto":
  13160927.051 ±(99.9%) 56257.080 ops/s [Average]
  (min, avg, max) = (12907857.785, 13160927.051, 13270938.878), stdev = 84202.955
  CI (99.9%): [13104669.971, 13217184.131] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectInto  thrpt   30  13160927.051 ± 56257.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6363807.784 ops/s
# Warmup Iteration   2: 13158717.903 ops/s
# Warmup Iteration   3: 11150067.269 ops/s
# Warmup Iteration   4: 13235943.659 ops/s
# Warmup Iteration   5: 13186142.030 ops/s
# Warmup Iteration   6: 13086695.066 ops/s
# Warmup Iteration   7: 13160643.751 ops/s
# Warmup Iteration   8: 13216287.576 ops/s
# Warmup Iteration   9: 13180184.778 ops/s
# Warmup Iteration  10: 13218852.327 ops/s
# Warmup Iteration  11: 13091633.043 ops/s
# Warmup Iteration  12: 13244523.487 ops/s
# Warmup Iteration  13: 13205948.759 ops/s
# Warmup Iteration  14: 13088149.135 ops/s
# Warmup Iteration  15: 12999538.628 ops/s
# Warmup Iteration  16: 13100518.757 ops/s
# Warmup Iteration  17: 13349512.146 ops/s
# Warmup Iteration  18: 13333375.972 ops/s
# Warmup Iteration  19: 13354865.344 ops/s
# Warmup Iteration  20: 13379063.282 ops/s
# Warmup Iteration  21: 13271977.512 ops/s
# Warmup Iteration  22: 13091852.602 ops/s
# Warmup Iteration  23: 13329880.350 ops/s
# Warmup Iteration  24: 13277231.240 ops/s
# Warmup Iteration  25: 13291566.141 ops/s
# Warmup Iteration  26: 13278628.208 ops/s
# Warmup Iteration  27: 13356553.686 ops/s
# Warmup Iteration  28: 13378074.737 ops/s
# Warmup Iteration  29: 13272088.410 ops/s
# Warmup Iteration  30: 13136125.661 ops/s
Iteration   1: 13406639.196 ops/s
Iteration   2: 13367993.969 ops/s
Iteration   3: 13370266.498 ops/s
Iteration   4: 13367051.719 ops/s
Iteration   5: 13323154.709 ops/s
Iteration   6: 13150142.181 ops/s
Iteration   7: 13355150.604 ops/s
Iteration   8: 13308786.438 ops/s
Iteration   9: 13425804.807 ops/s
Iteration  10: 13334065.759 ops/s
Iteration  11: 13388429.127 ops/s
Iteration  12: 13062724.361 ops/s
Iteration  13: 13370090.659 ops/s
Iteration  14: 13309717.714 ops/s
Iteration  15: 13376962.885 ops/s
Iteration  16: 13339119.889 ops/s
Iteration  17: 13343543.832 ops/s
Iteration  18: 13314437.641 ops/s
Iteration  19: 13288544.316 ops/s
Iteration  20: 13334958.086 ops/s
Iteration  21: 13294948.233 ops/s
Iteration  22: 13313404.366 ops/s
Iteration  23: 13403223.843 ops/s
Iteration  24: 13315843.508 ops/s
Iteration  25: 13142925.376 ops/s
Iteration  26: 13276358.755 ops/s
Iteration  27: 13054812.291 ops/s
Iteration  28: 13347116.394 ops/s
Iteration  29: 13333520.719 ops/s
Iteration  30: 13234877.131 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoDouble":
  13308487.167 ±(99.9%) 62088.458 ops/s [Average]
  (min, avg, max) = (13054812.291, 13308487.167, 13425804.807), stdev = 92931.088
  CI (99.9%): [13246398.709, 13370575.625] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  13308487.167 ± 62088.458  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6659092.554 ops/s
# Warmup Iteration   2: 13360561.735 ops/s
# Warmup Iteration   3: 11406499.031 ops/s
# Warmup Iteration   4: 13394964.601 ops/s
# Warmup Iteration   5: 13420241.700 ops/s
# Warmup Iteration   6: 13437009.728 ops/s
# Warmup Iteration   7: 13264654.460 ops/s
# Warmup Iteration   8: 13411935.522 ops/s
# Warmup Iteration   9: 13376995.355 ops/s
# Warmup Iteration  10: 13391388.300 ops/s
# Warmup Iteration  11: 13385837.008 ops/s
# Warmup Iteration  12: 13291603.992 ops/s
# Warmup Iteration  13: 13386250.299 ops/s
# Warmup Iteration  14: 13239213.769 ops/s
# Warmup Iteration  15: 13398197.382 ops/s
# Warmup Iteration  16: 13353899.684 ops/s
# Warmup Iteration  17: 13311051.611 ops/s
# Warmup Iteration  18: 13375657.074 ops/s
# Warmup Iteration  19: 13452810.670 ops/s
# Warmup Iteration  20: 13351775.722 ops/s
# Warmup Iteration  21: 13342572.002 ops/s
# Warmup Iteration  22: 13480408.306 ops/s
# Warmup Iteration  23: 13489488.668 ops/s
# Warmup Iteration  24: 13383086.527 ops/s
# Warmup Iteration  25: 13459575.154 ops/s
# Warmup Iteration  26: 13454313.599 ops/s
# Warmup Iteration  27: 13444154.559 ops/s
# Warmup Iteration  28: 13476489.417 ops/s
# Warmup Iteration  29: 13397247.955 ops/s
# Warmup Iteration  30: 13453796.333 ops/s
Iteration   1: 13482471.098 ops/s
Iteration   2: 13337121.122 ops/s
Iteration   3: 13377481.173 ops/s
Iteration   4: 13365287.883 ops/s
Iteration   5: 13383419.015 ops/s
Iteration   6: 13323099.819 ops/s
Iteration   7: 13458559.883 ops/s
Iteration   8: 13460784.984 ops/s
Iteration   9: 13504626.873 ops/s
Iteration  10: 13431306.480 ops/s
Iteration  11: 13246967.099 ops/s
Iteration  12: 13514983.575 ops/s
Iteration  13: 13466206.892 ops/s
Iteration  14: 13523595.807 ops/s
Iteration  15: 13440365.816 ops/s
Iteration  16: 13455315.067 ops/s
Iteration  17: 13413615.739 ops/s
Iteration  18: 13498809.378 ops/s
Iteration  19: 13392066.329 ops/s
Iteration  20: 13227848.791 ops/s
Iteration  21: 13436718.823 ops/s
Iteration  22: 13491826.902 ops/s
Iteration  23: 13407743.031 ops/s
Iteration  24: 13462921.141 ops/s
Iteration  25: 13504735.276 ops/s
Iteration  26: 13476146.781 ops/s
Iteration  27: 13420906.511 ops/s
Iteration  28: 13462149.235 ops/s
Iteration  29: 13480764.185 ops/s
Iteration  30: 13490358.208 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoFloat":
  13431273.430 ±(99.9%) 49401.843 ops/s [Average]
  (min, avg, max) = (13227848.791, 13431273.430, 13523595.807), stdev = 73942.359
  CI (99.9%): [13381871.587, 13480675.274] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  13431273.430 ± 49401.843  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7709737.017 ops/s
# Warmup Iteration   2: 15284658.705 ops/s
# Warmup Iteration   3: 13033320.393 ops/s
# Warmup Iteration   4: 15314265.348 ops/s
# Warmup Iteration   5: 15327035.302 ops/s
# Warmup Iteration   6: 15288169.344 ops/s
# Warmup Iteration   7: 15398042.183 ops/s
# Warmup Iteration   8: 15303086.142 ops/s
# Warmup Iteration   9: 15354490.116 ops/s
# Warmup Iteration  10: 15208385.660 ops/s
# Warmup Iteration  11: 15361435.650 ops/s
# Warmup Iteration  12: 15317549.668 ops/s
# Warmup Iteration  13: 15230345.424 ops/s
# Warmup Iteration  14: 15252418.253 ops/s
# Warmup Iteration  15: 15273761.526 ops/s
# Warmup Iteration  16: 15345563.925 ops/s
# Warmup Iteration  17: 15560293.831 ops/s
# Warmup Iteration  18: 15544436.210 ops/s
# Warmup Iteration  19: 15348165.293 ops/s
# Warmup Iteration  20: 15475522.087 ops/s
# Warmup Iteration  21: 15485055.507 ops/s
# Warmup Iteration  22: 15526912.585 ops/s
# Warmup Iteration  23: 15485960.872 ops/s
# Warmup Iteration  24: 15357934.262 ops/s
# Warmup Iteration  25: 15404394.105 ops/s
# Warmup Iteration  26: 15468168.461 ops/s
# Warmup Iteration  27: 15434811.119 ops/s
# Warmup Iteration  28: 15506030.599 ops/s
# Warmup Iteration  29: 15262933.688 ops/s
# Warmup Iteration  30: 15558139.894 ops/s
Iteration   1: 15495649.261 ops/s
Iteration   2: 15446586.210 ops/s
Iteration   3: 15310965.030 ops/s
Iteration   4: 15483458.351 ops/s
Iteration   5: 15441725.701 ops/s
Iteration   6: 15547652.478 ops/s
Iteration   7: 15240148.231 ops/s
Iteration   8: 15631722.098 ops/s
Iteration   9: 15462472.026 ops/s
Iteration  10: 15528665.397 ops/s
Iteration  11: 15529196.242 ops/s
Iteration  12: 15499489.436 ops/s
Iteration  13: 15565313.756 ops/s
Iteration  14: 15478530.841 ops/s
Iteration  15: 15500517.676 ops/s
Iteration  16: 15532690.313 ops/s
Iteration  17: 15535279.640 ops/s
Iteration  18: 15570819.470 ops/s
Iteration  19: 15405195.334 ops/s
Iteration  20: 15552097.399 ops/s
Iteration  21: 15549280.595 ops/s
Iteration  22: 15483770.750 ops/s
Iteration  23: 15511733.886 ops/s
Iteration  24: 15403837.585 ops/s
Iteration  25: 15590909.956 ops/s
Iteration  26: 15563848.810 ops/s
Iteration  27: 15437965.282 ops/s
Iteration  28: 15557519.468 ops/s
Iteration  29: 15278400.818 ops/s
Iteration  30: 15522285.836 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoInt":
  15488590.929 ±(99.9%) 59955.005 ops/s [Average]
  (min, avg, max) = (15240148.231, 15488590.929, 15631722.098), stdev = 89737.835
  CI (99.9%): [15428635.925, 15548545.934] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoInt  thrpt   30  15488590.929 ± 59955.005  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7713295.380 ops/s
# Warmup Iteration   2: 15253813.781 ops/s
# Warmup Iteration   3: 12967712.784 ops/s
# Warmup Iteration   4: 15190016.949 ops/s
# Warmup Iteration   5: 15221625.312 ops/s
# Warmup Iteration   6: 15041965.553 ops/s
# Warmup Iteration   7: 15223174.889 ops/s
# Warmup Iteration   8: 15257353.714 ops/s
# Warmup Iteration   9: 15096127.944 ops/s
# Warmup Iteration  10: 15192985.957 ops/s
# Warmup Iteration  11: 15181061.404 ops/s
# Warmup Iteration  12: 14992815.913 ops/s
# Warmup Iteration  13: 15165560.400 ops/s
# Warmup Iteration  14: 15064124.205 ops/s
# Warmup Iteration  15: 15110262.279 ops/s
# Warmup Iteration  16: 15148419.231 ops/s
# Warmup Iteration  17: 15357358.379 ops/s
# Warmup Iteration  18: 15353693.512 ops/s
# Warmup Iteration  19: 15404495.366 ops/s
# Warmup Iteration  20: 15210036.772 ops/s
# Warmup Iteration  21: 15305723.762 ops/s
# Warmup Iteration  22: 15331806.252 ops/s
# Warmup Iteration  23: 15384397.187 ops/s
# Warmup Iteration  24: 15363400.945 ops/s
# Warmup Iteration  25: 15382035.982 ops/s
# Warmup Iteration  26: 15323311.359 ops/s
# Warmup Iteration  27: 15356443.577 ops/s
# Warmup Iteration  28: 15387539.149 ops/s
# Warmup Iteration  29: 15326464.095 ops/s
# Warmup Iteration  30: 15443172.691 ops/s
Iteration   1: 15352303.534 ops/s
Iteration   2: 15419341.119 ops/s
Iteration   3: 15367560.153 ops/s
Iteration   4: 15380092.679 ops/s
Iteration   5: 15410727.069 ops/s
Iteration   6: 15441115.059 ops/s
Iteration   7: 15369307.373 ops/s
Iteration   8: 15435745.848 ops/s
Iteration   9: 15403753.269 ops/s
Iteration  10: 15378367.848 ops/s
Iteration  11: 15418282.519 ops/s
Iteration  12: 15371689.992 ops/s
Iteration  13: 15405650.242 ops/s
Iteration  14: 15462062.577 ops/s
Iteration  15: 15388580.905 ops/s
Iteration  16: 15398938.786 ops/s
Iteration  17: 15161797.173 ops/s
Iteration  18: 15223984.816 ops/s
Iteration  19: 15358402.909 ops/s
Iteration  20: 15313372.912 ops/s
Iteration  21: 15486000.200 ops/s
Iteration  22: 15418713.810 ops/s
Iteration  23: 15374281.686 ops/s
Iteration  24: 14998673.920 ops/s
Iteration  25: 15449381.834 ops/s
Iteration  26: 15392610.286 ops/s
Iteration  27: 15281764.518 ops/s
Iteration  28: 15428942.703 ops/s
Iteration  29: 15002383.625 ops/s
Iteration  30: 15376419.338 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoLong":
  15355674.957 ±(99.9%) 78191.434 ops/s [Average]
  (min, avg, max) = (14998673.920, 15355674.957, 15486000.200), stdev = 117033.266
  CI (99.9%): [15277483.523, 15433866.391] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoLong  thrpt   30  15355674.957 ± 78191.434  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6430211.712 ops/s
# Warmup Iteration   2: 13297425.225 ops/s
# Warmup Iteration   3: 11241207.522 ops/s
# Warmup Iteration   4: 13267967.453 ops/s
# Warmup Iteration   5: 13260927.039 ops/s
# Warmup Iteration   6: 13200440.085 ops/s
# Warmup Iteration   7: 13230536.149 ops/s
# Warmup Iteration   8: 13242181.436 ops/s
# Warmup Iteration   9: 13298593.472 ops/s
# Warmup Iteration  10: 13249907.382 ops/s
# Warmup Iteration  11: 13075154.330 ops/s
# Warmup Iteration  12: 13197636.159 ops/s
# Warmup Iteration  13: 13160658.998 ops/s
# Warmup Iteration  14: 13148618.468 ops/s
# Warmup Iteration  15: 13273881.502 ops/s
# Warmup Iteration  16: 13242196.940 ops/s
# Warmup Iteration  17: 13355770.072 ops/s
# Warmup Iteration  18: 13393337.034 ops/s
# Warmup Iteration  19: 13337582.052 ops/s
# Warmup Iteration  20: 13351030.228 ops/s
# Warmup Iteration  21: 13359292.061 ops/s
# Warmup Iteration  22: 13366591.855 ops/s
# Warmup Iteration  23: 13366541.171 ops/s
# Warmup Iteration  24: 13363710.130 ops/s
# Warmup Iteration  25: 13374029.902 ops/s
# Warmup Iteration  26: 13437649.115 ops/s
# Warmup Iteration  27: 13391826.437 ops/s
# Warmup Iteration  28: 13390233.919 ops/s
# Warmup Iteration  29: 13392237.044 ops/s
# Warmup Iteration  30: 13160962.021 ops/s
Iteration   1: 13352927.837 ops/s
Iteration   2: 13377512.641 ops/s
Iteration   3: 13336627.056 ops/s
Iteration   4: 13272636.537 ops/s
Iteration   5: 13415383.497 ops/s
Iteration   6: 13334728.639 ops/s
Iteration   7: 13375947.356 ops/s
Iteration   8: 13386505.947 ops/s
Iteration   9: 13207308.005 ops/s
Iteration  10: 13438561.053 ops/s
Iteration  11: 13333830.703 ops/s
Iteration  12: 13351585.609 ops/s
Iteration  13: 13404141.681 ops/s
Iteration  14: 13216064.426 ops/s
Iteration  15: 13408824.077 ops/s
Iteration  16: 13395730.880 ops/s
Iteration  17: 12987441.094 ops/s
Iteration  18: 13342283.904 ops/s
Iteration  19: 13340467.236 ops/s
Iteration  20: 13324830.581 ops/s
Iteration  21: 13367725.321 ops/s
Iteration  22: 13377821.748 ops/s
Iteration  23: 13321204.778 ops/s
Iteration  24: 13398739.600 ops/s
Iteration  25: 13425067.056 ops/s
Iteration  26: 13374128.312 ops/s
Iteration  27: 13377573.060 ops/s
Iteration  28: 13365527.595 ops/s
Iteration  29: 13392847.747 ops/s
Iteration  30: 13413825.390 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoWith":
  13347259.979 ±(99.9%) 57895.127 ops/s [Average]
  (min, avg, max) = (12987441.094, 13347259.979, 13438561.053), stdev = 86654.708
  CI (99.9%): [13289364.852, 13405155.106] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_injectIntoWith  thrpt   30  13347259.979 ± 57895.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1849030.727 ops/s
# Warmup Iteration   2: 3742985.464 ops/s
# Warmup Iteration   3: 3277301.031 ops/s
# Warmup Iteration   4: 3823356.755 ops/s
# Warmup Iteration   5: 3804135.933 ops/s
# Warmup Iteration   6: 3762692.974 ops/s
# Warmup Iteration   7: 3807864.280 ops/s
# Warmup Iteration   8: 3770881.614 ops/s
# Warmup Iteration   9: 3801616.520 ops/s
# Warmup Iteration  10: 3760337.550 ops/s
# Warmup Iteration  11: 3820597.612 ops/s
# Warmup Iteration  12: 3832010.178 ops/s
# Warmup Iteration  13: 3773362.931 ops/s
# Warmup Iteration  14: 3807078.500 ops/s
# Warmup Iteration  15: 3787435.567 ops/s
# Warmup Iteration  16: 3789717.749 ops/s
# Warmup Iteration  17: 3836541.263 ops/s
# Warmup Iteration  18: 3809377.348 ops/s
# Warmup Iteration  19: 3793082.194 ops/s
# Warmup Iteration  20: 3808361.723 ops/s
# Warmup Iteration  21: 3833564.091 ops/s
# Warmup Iteration  22: 3809653.722 ops/s
# Warmup Iteration  23: 3811016.631 ops/s
# Warmup Iteration  24: 3834400.453 ops/s
# Warmup Iteration  25: 3764644.864 ops/s
# Warmup Iteration  26: 3794874.669 ops/s
# Warmup Iteration  27: 3813858.076 ops/s
# Warmup Iteration  28: 3838924.361 ops/s
# Warmup Iteration  29: 3824886.919 ops/s
# Warmup Iteration  30: 3796542.032 ops/s
Iteration   1: 3831292.305 ops/s
Iteration   2: 3817950.808 ops/s
Iteration   3: 3720537.892 ops/s
Iteration   4: 3816695.819 ops/s
Iteration   5: 3832883.575 ops/s
Iteration   6: 3820463.939 ops/s
Iteration   7: 3766879.052 ops/s
Iteration   8: 3784397.408 ops/s
Iteration   9: 3760284.207 ops/s
Iteration  10: 3751785.607 ops/s
Iteration  11: 3796965.056 ops/s
Iteration  12: 3828798.108 ops/s
Iteration  13: 3788161.649 ops/s
Iteration  14: 3776417.078 ops/s
Iteration  15: 3831902.723 ops/s
Iteration  16: 3795601.743 ops/s
Iteration  17: 3819097.924 ops/s
Iteration  18: 3791676.002 ops/s
Iteration  19: 3758281.965 ops/s
Iteration  20: 3805071.366 ops/s
Iteration  21: 3811787.394 ops/s
Iteration  22: 3877816.009 ops/s
Iteration  23: 3850621.894 ops/s
Iteration  24: 3756293.934 ops/s
Iteration  25: 3836282.243 ops/s
Iteration  26: 3793763.266 ops/s
Iteration  27: 3793522.395 ops/s
Iteration  28: 3813861.135 ops/s
Iteration  29: 3807527.913 ops/s
Iteration  30: 3780290.279 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_isEmpty":
  3800563.690 ±(99.9%) 22228.534 ops/s [Average]
  (min, avg, max) = (3720537.892, 3800563.690, 3877816.009), stdev = 33270.626
  CI (99.9%): [3778335.156, 3822792.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_isEmpty  thrpt   30  3800563.690 ± 22228.534  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5491618.066 ops/s
# Warmup Iteration   2: 10889612.430 ops/s
# Warmup Iteration   3: 9377850.749 ops/s
# Warmup Iteration   4: 10981243.744 ops/s
# Warmup Iteration   5: 11014337.840 ops/s
# Warmup Iteration   6: 10947234.181 ops/s
# Warmup Iteration   7: 10933222.298 ops/s
# Warmup Iteration   8: 10859261.247 ops/s
# Warmup Iteration   9: 10971414.298 ops/s
# Warmup Iteration  10: 10992971.751 ops/s
# Warmup Iteration  11: 10965221.469 ops/s
# Warmup Iteration  12: 10851535.555 ops/s
# Warmup Iteration  13: 11011307.215 ops/s
# Warmup Iteration  14: 10986023.157 ops/s
# Warmup Iteration  15: 10921586.688 ops/s
# Warmup Iteration  16: 10963063.983 ops/s
# Warmup Iteration  17: 11097519.700 ops/s
# Warmup Iteration  18: 11078484.995 ops/s
# Warmup Iteration  19: 11018327.144 ops/s
# Warmup Iteration  20: 11081273.799 ops/s
# Warmup Iteration  21: 11044971.877 ops/s
# Warmup Iteration  22: 11100211.612 ops/s
# Warmup Iteration  23: 11046355.232 ops/s
# Warmup Iteration  24: 11062578.708 ops/s
# Warmup Iteration  25: 10850069.165 ops/s
# Warmup Iteration  26: 11018395.332 ops/s
# Warmup Iteration  27: 11090356.266 ops/s
# Warmup Iteration  28: 11067512.109 ops/s
# Warmup Iteration  29: 11091398.574 ops/s
# Warmup Iteration  30: 10975972.576 ops/s
Iteration   1: 11049801.822 ops/s
Iteration   2: 11097909.982 ops/s
Iteration   3: 11050824.396 ops/s
Iteration   4: 10929461.316 ops/s
Iteration   5: 10937539.450 ops/s
Iteration   6: 10995643.595 ops/s
Iteration   7: 11050807.374 ops/s
Iteration   8: 11144145.550 ops/s
Iteration   9: 11064624.737 ops/s
Iteration  10: 11057209.090 ops/s
Iteration  11: 11019557.368 ops/s
Iteration  12: 11113745.484 ops/s
Iteration  13: 10916008.065 ops/s
Iteration  14: 11137536.747 ops/s
Iteration  15: 11076059.264 ops/s
Iteration  16: 11092307.347 ops/s
Iteration  17: 11140078.805 ops/s
Iteration  18: 11121949.998 ops/s
Iteration  19: 11135621.538 ops/s
Iteration  20: 11081501.825 ops/s
Iteration  21: 11047436.713 ops/s
Iteration  22: 11075300.551 ops/s
Iteration  23: 11125765.590 ops/s
Iteration  24: 11129002.476 ops/s
Iteration  25: 11178587.856 ops/s
Iteration  26: 10752597.301 ops/s
Iteration  27: 10965612.650 ops/s
Iteration  28: 11067841.408 ops/s
Iteration  29: 11080371.518 ops/s
Iteration  30: 11058589.748 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_iterator":
  11056447.986 ±(99.9%) 58330.275 ops/s [Average]
  (min, avg, max) = (10752597.301, 11056447.986, 11178587.856), stdev = 87306.016
  CI (99.9%): [10998117.711, 11114778.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_iterator  thrpt   30  11056447.986 ± 58330.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 315687.282 ops/s
# Warmup Iteration   2: 333630.079 ops/s
# Warmup Iteration   3: 413416.966 ops/s
# Warmup Iteration   4: 424759.631 ops/s
# Warmup Iteration   5: 425236.433 ops/s
# Warmup Iteration   6: 424335.517 ops/s
# Warmup Iteration   7: 425059.248 ops/s
# Warmup Iteration   8: 425308.609 ops/s
# Warmup Iteration   9: 423593.906 ops/s
# Warmup Iteration  10: 425469.669 ops/s
# Warmup Iteration  11: 420241.216 ops/s
# Warmup Iteration  12: 417363.140 ops/s
# Warmup Iteration  13: 367084.276 ops/s
# Warmup Iteration  14: 425120.587 ops/s
# Warmup Iteration  15: 423754.936 ops/s
# Warmup Iteration  16: 426289.019 ops/s
# Warmup Iteration  17: 445235.959 ops/s
# Warmup Iteration  18: 441770.447 ops/s
# Warmup Iteration  19: 444947.365 ops/s
# Warmup Iteration  20: 440296.142 ops/s
# Warmup Iteration  21: 436272.250 ops/s
# Warmup Iteration  22: 444816.758 ops/s
# Warmup Iteration  23: 444943.252 ops/s
# Warmup Iteration  24: 446852.066 ops/s
# Warmup Iteration  25: 443569.551 ops/s
# Warmup Iteration  26: 443485.836 ops/s
# Warmup Iteration  27: 447045.685 ops/s
# Warmup Iteration  28: 445461.475 ops/s
# Warmup Iteration  29: 447191.658 ops/s
# Warmup Iteration  30: 445957.402 ops/s
Iteration   1: 443071.568 ops/s
Iteration   2: 446575.981 ops/s
Iteration   3: 448237.850 ops/s
Iteration   4: 439745.036 ops/s
Iteration   5: 443720.671 ops/s
Iteration   6: 438254.464 ops/s
Iteration   7: 443920.386 ops/s
Iteration   8: 432111.762 ops/s
Iteration   9: 446411.823 ops/s
Iteration  10: 448254.036 ops/s
Iteration  11: 445726.261 ops/s
Iteration  12: 436369.232 ops/s
Iteration  13: 445806.319 ops/s
Iteration  14: 446275.973 ops/s
Iteration  15: 443880.091 ops/s
Iteration  16: 444747.405 ops/s
Iteration  17: 436175.316 ops/s
Iteration  18: 445868.764 ops/s
Iteration  19: 446138.131 ops/s
Iteration  20: 444898.207 ops/s
Iteration  21: 446366.159 ops/s
Iteration  22: 446294.047 ops/s
Iteration  23: 438452.557 ops/s
Iteration  24: 446283.866 ops/s
Iteration  25: 446180.831 ops/s
Iteration  26: 446527.279 ops/s
Iteration  27: 447687.523 ops/s
Iteration  28: 445636.600 ops/s
Iteration  29: 444961.522 ops/s
Iteration  30: 441942.493 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_iterator_throws":
  443884.072 ±(99.9%) 2664.514 ops/s [Average]
  (min, avg, max) = (432111.762, 443884.072, 448254.036), stdev = 3988.119
  CI (99.9%): [441219.558, 446548.585] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_iterator_throws  thrpt   30  443884.072 ± 2664.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5.279 ops/s
# Warmup Iteration   2: 6.468 ops/s
# Warmup Iteration   3: 7.590 ops/s
# Warmup Iteration   4: 7.888 ops/s
# Warmup Iteration   5: 7.968 ops/s
# Warmup Iteration   6: 8.121 ops/s
# Warmup Iteration   7: 8.160 ops/s
# Warmup Iteration   8: 8.152 ops/s
# Warmup Iteration   9: 8.076 ops/s
# Warmup Iteration  10: 8.141 ops/s
# Warmup Iteration  11: 8.026 ops/s
# Warmup Iteration  12: 8.172 ops/s
# Warmup Iteration  13: 7.568 ops/s
# Warmup Iteration  14: 7.592 ops/s
# Warmup Iteration  15: 8.160 ops/s
# Warmup Iteration  16: 8.068 ops/s
# Warmup Iteration  17: 8.126 ops/s
# Warmup Iteration  18: 8.087 ops/s
# Warmup Iteration  19: 8.178 ops/s
# Warmup Iteration  20: 8.096 ops/s
# Warmup Iteration  21: 8.131 ops/s
# Warmup Iteration  22: 8.175 ops/s
# Warmup Iteration  23: 8.121 ops/s
# Warmup Iteration  24: 8.172 ops/s
# Warmup Iteration  25: 8.085 ops/s
# Warmup Iteration  26: 8.177 ops/s
# Warmup Iteration  27: 8.091 ops/s
# Warmup Iteration  28: 8.024 ops/s
# Warmup Iteration  29: 8.181 ops/s
# Warmup Iteration  30: 8.088 ops/s
Iteration   1: 8.162 ops/s
Iteration   2: 8.109 ops/s
Iteration   3: 8.135 ops/s
Iteration   4: 8.230 ops/s
Iteration   5: 8.153 ops/s
Iteration   6: 8.157 ops/s
Iteration   7: 8.146 ops/s
Iteration   8: 8.133 ops/s
Iteration   9: 8.220 ops/s
Iteration  10: 8.134 ops/s
Iteration  11: 8.140 ops/s
Iteration  12: 8.177 ops/s
Iteration  13: 8.076 ops/s
Iteration  14: 8.036 ops/s
Iteration  15: 8.183 ops/s
Iteration  16: 8.187 ops/s
Iteration  17: 8.168 ops/s
Iteration  18: 7.994 ops/s
Iteration  19: 8.125 ops/s
Iteration  20: 8.146 ops/s
Iteration  21: 8.254 ops/s
Iteration  22: 8.175 ops/s
Iteration  23: 8.155 ops/s
Iteration  24: 8.227 ops/s
Iteration  25: 8.070 ops/s
Iteration  26: 8.199 ops/s
Iteration  27: 8.183 ops/s
Iteration  28: 8.171 ops/s
Iteration  29: 8.138 ops/s
Iteration  30: 8.148 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  8.151 ±(99.9%) 0.037 ops/s [Average]
  (min, avg, max) = (7.994, 8.151, 8.254), stdev = 0.055
  CI (99.9%): [8.114, 8.188] (assumes normal distribution)


# Run complete. Total time: 00:01:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt  Score   Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  8.151 ± 0.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5925982.730 ops/s
# Warmup Iteration   2: 12529983.106 ops/s
# Warmup Iteration   3: 10500291.879 ops/s
# Warmup Iteration   4: 12324020.327 ops/s
# Warmup Iteration   5: 12516270.553 ops/s
# Warmup Iteration   6: 12473237.580 ops/s
# Warmup Iteration   7: 12486691.220 ops/s
# Warmup Iteration   8: 12446589.515 ops/s
# Warmup Iteration   9: 12472515.221 ops/s
# Warmup Iteration  10: 12388351.352 ops/s
# Warmup Iteration  11: 12436249.273 ops/s
# Warmup Iteration  12: 12401687.420 ops/s
# Warmup Iteration  13: 12529365.716 ops/s
# Warmup Iteration  14: 12359446.660 ops/s
# Warmup Iteration  15: 12483455.372 ops/s
# Warmup Iteration  16: 12451303.221 ops/s
# Warmup Iteration  17: 12561269.553 ops/s
# Warmup Iteration  18: 12496104.141 ops/s
# Warmup Iteration  19: 12597741.532 ops/s
# Warmup Iteration  20: 12553044.324 ops/s
# Warmup Iteration  21: 12574502.959 ops/s
# Warmup Iteration  22: 12604246.446 ops/s
# Warmup Iteration  23: 12399648.891 ops/s
# Warmup Iteration  24: 12486745.864 ops/s
# Warmup Iteration  25: 12449214.860 ops/s
# Warmup Iteration  26: 12510640.313 ops/s
# Warmup Iteration  27: 12468588.168 ops/s
# Warmup Iteration  28: 12549449.516 ops/s
# Warmup Iteration  29: 12552269.956 ops/s
# Warmup Iteration  30: 12525808.426 ops/s
Iteration   1: 12517884.106 ops/s
Iteration   2: 12384118.958 ops/s
Iteration   3: 12010902.390 ops/s
Iteration   4: 12528054.575 ops/s
Iteration   5: 12550811.128 ops/s
Iteration   6: 12432394.514 ops/s
Iteration   7: 12485746.146 ops/s
Iteration   8: 12510863.658 ops/s
Iteration   9: 12527003.051 ops/s
Iteration  10: 12597565.597 ops/s
Iteration  11: 12460508.649 ops/s
Iteration  12: 12444625.655 ops/s
Iteration  13: 12394909.675 ops/s
Iteration  14: 12438883.202 ops/s
Iteration  15: 12585547.195 ops/s
Iteration  16: 12532561.380 ops/s
Iteration  17: 12452032.036 ops/s
Iteration  18: 12552543.724 ops/s
Iteration  19: 12505337.634 ops/s
Iteration  20: 12637058.273 ops/s
Iteration  21: 12488328.049 ops/s
Iteration  22: 12511852.171 ops/s
Iteration  23: 12557921.764 ops/s
Iteration  24: 12427583.953 ops/s
Iteration  25: 12505087.007 ops/s
Iteration  26: 12542907.315 ops/s
Iteration  27: 12432218.194 ops/s
Iteration  28: 12531326.181 ops/s
Iteration  29: 12068194.332 ops/s
Iteration  30: 12449562.904 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_lastIndexOf":
  12468811.114 ±(99.9%) 87663.312 ops/s [Average]
  (min, avg, max) = (12010902.390, 12468811.114, 12637058.273), stdev = 131210.329
  CI (99.9%): [12381147.802, 12556474.426] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_lastIndexOf  thrpt   30  12468811.114 ± 87663.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5286684.367 ops/s
# Warmup Iteration   2: 10672434.702 ops/s
# Warmup Iteration   3: 9131194.466 ops/s
# Warmup Iteration   4: 10753985.121 ops/s
# Warmup Iteration   5: 10793735.254 ops/s
# Warmup Iteration   6: 10795136.798 ops/s
# Warmup Iteration   7: 10851898.952 ops/s
# Warmup Iteration   8: 10767413.914 ops/s
# Warmup Iteration   9: 10826563.482 ops/s
# Warmup Iteration  10: 10855886.798 ops/s
# Warmup Iteration  11: 10709815.562 ops/s
# Warmup Iteration  12: 10839702.354 ops/s
# Warmup Iteration  13: 10840591.747 ops/s
# Warmup Iteration  14: 10766889.605 ops/s
# Warmup Iteration  15: 10843736.880 ops/s
# Warmup Iteration  16: 10816645.163 ops/s
# Warmup Iteration  17: 10818270.711 ops/s
# Warmup Iteration  18: 10818261.163 ops/s
# Warmup Iteration  19: 10822158.814 ops/s
# Warmup Iteration  20: 10875041.780 ops/s
# Warmup Iteration  21: 10813496.596 ops/s
# Warmup Iteration  22: 10841537.394 ops/s
# Warmup Iteration  23: 10886685.138 ops/s
# Warmup Iteration  24: 10893988.685 ops/s
# Warmup Iteration  25: 10856678.197 ops/s
# Warmup Iteration  26: 10779336.279 ops/s
# Warmup Iteration  27: 10891554.065 ops/s
# Warmup Iteration  28: 10863882.083 ops/s
# Warmup Iteration  29: 10820035.113 ops/s
# Warmup Iteration  30: 10669763.477 ops/s
Iteration   1: 10869880.463 ops/s
Iteration   2: 10853927.113 ops/s
Iteration   3: 10752881.244 ops/s
Iteration   4: 10929294.006 ops/s
Iteration   5: 10666144.711 ops/s
Iteration   6: 10913589.722 ops/s
Iteration   7: 10771764.198 ops/s
Iteration   8: 10940529.217 ops/s
Iteration   9: 10865376.956 ops/s
Iteration  10: 10839852.735 ops/s
Iteration  11: 10826476.800 ops/s
Iteration  12: 10865175.743 ops/s
Iteration  13: 10872788.043 ops/s
Iteration  14: 10791245.833 ops/s
Iteration  15: 10625695.989 ops/s
Iteration  16: 10797926.706 ops/s
Iteration  17: 10845518.052 ops/s
Iteration  18: 10791149.956 ops/s
Iteration  19: 10875050.392 ops/s
Iteration  20: 10794032.418 ops/s
Iteration  21: 10906976.182 ops/s
Iteration  22: 10906750.973 ops/s
Iteration  23: 10777272.079 ops/s
Iteration  24: 10650873.368 ops/s
Iteration  25: 10862243.361 ops/s
Iteration  26: 10910273.032 ops/s
Iteration  27: 10885926.811 ops/s
Iteration  28: 10860584.959 ops/s
Iteration  29: 10704820.434 ops/s
Iteration  30: 10871752.632 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_listIterator":
  10827525.804 ±(99.9%) 55016.490 ops/s [Average]
  (min, avg, max) = (10625695.989, 10827525.804, 10940529.217), stdev = 82346.099
  CI (99.9%): [10772509.314, 10882542.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_listIterator  thrpt   30  10827525.804 ± 55016.490  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_listIteratorIndexTooBig$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_listIteratorIndexTooBig

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 648743.324 ops/s
# Warmup Iteration   2: 738609.061 ops/s
# Warmup Iteration   3: 943856.194 ops/s
# Warmup Iteration   4: 947940.079 ops/s
# Warmup Iteration   5: 942996.535 ops/s
# Warmup Iteration   6: 935045.808 ops/s
# Warmup Iteration   7: 945603.042 ops/s
# Warmup Iteration   8: 943321.654 ops/s
# Warmup Iteration   9: 944692.504 ops/s
# Warmup Iteration  10: 790485.723 ops/s
# Warmup Iteration  11: 943922.918 ops/s
# Warmup Iteration  12: 939302.754 ops/s
# Warmup Iteration  13: 946551.762 ops/s
# Warmup Iteration  14: 945326.985 ops/s
# Warmup Iteration  15: 943230.493 ops/s
# Warmup Iteration  16: 937976.607 ops/s
# Warmup Iteration  17: 990357.174 ops/s
# Warmup Iteration  18: 987891.858 ops/s
# Warmup Iteration  19: 995983.064 ops/s
# Warmup Iteration  20: 995285.617 ops/s
# Warmup Iteration  21: 994164.205 ops/s
# Warmup Iteration  22: 995209.979 ops/s
# Warmup Iteration  23: 991410.302 ops/s
# Warmup Iteration  24: 990445.404 ops/s
# Warmup Iteration  25: 993190.464 ops/s
# Warmup Iteration  26: 988721.300 ops/s
# Warmup Iteration  27: 999866.975 ops/s
# Warmup Iteration  28: 995000.112 ops/s
# Warmup Iteration  29: 1001126.482 ops/s
# Warmup Iteration  30: 995080.431 ops/s
Iteration   1: 994589.930 ops/s
Iteration   2: 983512.193 ops/s
Iteration   3: 982192.153 ops/s
Iteration   4: 996899.663 ops/s
Iteration   5: 983928.948 ops/s
Iteration   6: 994898.092 ops/s
Iteration   7: 986309.329 ops/s
Iteration   8: 999403.696 ops/s
Iteration   9: 998994.373 ops/s
Iteration  10: 994337.534 ops/s
Iteration  11: 994176.673 ops/s
Iteration  12: 998151.263 ops/s
Iteration  13: 994453.021 ops/s
Iteration  14: 993182.278 ops/s
Iteration  15: 991613.701 ops/s
Iteration  16: 981201.504 ops/s
Iteration  17: 999178.040 ops/s
Iteration  18: 993860.302 ops/s
Iteration  19: 997606.242 ops/s
Iteration  20: 995133.257 ops/s
Iteration  21: 995263.261 ops/s
Iteration  22: 1000633.922 ops/s
Iteration  23: 973004.968 ops/s
Iteration  24: 996674.952 ops/s
Iteration  25: 989723.005 ops/s
Iteration  26: 983156.666 ops/s
Iteration  27: 994040.353 ops/s
Iteration  28: 983761.399 ops/s
Iteration  29: 996309.402 ops/s
Iteration  30: 984598.073 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_listIteratorIndexTooBig":
  991692.940 ±(99.9%) 4593.561 ops/s [Average]
  (min, avg, max) = (973004.968, 991692.940, 1000633.922), stdev = 6875.427
  CI (99.9%): [987099.378, 996286.501] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_listIteratorIndexTooBig  thrpt   30  991692.940 ± 4593.561  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_listIteratorIndexTooSmall$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_listIteratorIndexTooSmall

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 644379.313 ops/s
# Warmup Iteration   2: 745172.832 ops/s
# Warmup Iteration   3: 950562.925 ops/s
# Warmup Iteration   4: 950619.007 ops/s
# Warmup Iteration   5: 945303.917 ops/s
# Warmup Iteration   6: 947383.454 ops/s
# Warmup Iteration   7: 944414.566 ops/s
# Warmup Iteration   8: 954497.412 ops/s
# Warmup Iteration   9: 950011.805 ops/s
# Warmup Iteration  10: 800916.671 ops/s
# Warmup Iteration  11: 951961.269 ops/s
# Warmup Iteration  12: 952884.346 ops/s
# Warmup Iteration  13: 955164.350 ops/s
# Warmup Iteration  14: 957266.597 ops/s
# Warmup Iteration  15: 955727.367 ops/s
# Warmup Iteration  16: 953069.844 ops/s
# Warmup Iteration  17: 1001011.762 ops/s
# Warmup Iteration  18: 1015946.352 ops/s
# Warmup Iteration  19: 1008507.331 ops/s
# Warmup Iteration  20: 1010261.731 ops/s
# Warmup Iteration  21: 1002381.032 ops/s
# Warmup Iteration  22: 1007902.325 ops/s
# Warmup Iteration  23: 1005989.044 ops/s
# Warmup Iteration  24: 1011994.573 ops/s
# Warmup Iteration  25: 1016703.434 ops/s
# Warmup Iteration  26: 1016512.525 ops/s
# Warmup Iteration  27: 1012065.217 ops/s
# Warmup Iteration  28: 1011138.240 ops/s
# Warmup Iteration  29: 1014153.243 ops/s
# Warmup Iteration  30: 1012740.440 ops/s
Iteration   1: 1016467.051 ops/s
Iteration   2: 1009702.394 ops/s
Iteration   3: 1008636.221 ops/s
Iteration   4: 1015218.985 ops/s
Iteration   5: 987873.988 ops/s
Iteration   6: 1012278.382 ops/s
Iteration   7: 1015004.242 ops/s
Iteration   8: 1013359.763 ops/s
Iteration   9: 1005956.843 ops/s
Iteration  10: 1008239.006 ops/s
Iteration  11: 1009714.739 ops/s
Iteration  12: 1014684.617 ops/s
Iteration  13: 1010260.532 ops/s
Iteration  14: 1000576.484 ops/s
Iteration  15: 1003766.134 ops/s
Iteration  16: 1014469.371 ops/s
Iteration  17: 1012180.237 ops/s
Iteration  18: 1006968.036 ops/s
Iteration  19: 1007081.300 ops/s
Iteration  20: 1007881.984 ops/s
Iteration  21: 1008918.811 ops/s
Iteration  22: 1011521.049 ops/s
Iteration  23: 1012141.451 ops/s
Iteration  24: 1011205.929 ops/s
Iteration  25: 1015893.623 ops/s
Iteration  26: 1007761.019 ops/s
Iteration  27: 1012685.217 ops/s
Iteration  28: 1015850.400 ops/s
Iteration  29: 1014453.909 ops/s
Iteration  30: 1008620.393 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_listIteratorIndexTooSmall":
  1009979.070 ±(99.9%) 3784.829 ops/s [Average]
  (min, avg, max) = (987873.988, 1009979.070, 1016467.051), stdev = 5664.954
  CI (99.9%): [1006194.241, 1013763.899] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_listIteratorIndexTooSmall  thrpt   30  1009979.070 ± 3784.829  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3054290.490 ops/s
# Warmup Iteration   2: 6434105.160 ops/s
# Warmup Iteration   3: 5268869.508 ops/s
# Warmup Iteration   4: 6252961.740 ops/s
# Warmup Iteration   5: 6295456.995 ops/s
# Warmup Iteration   6: 6324443.530 ops/s
# Warmup Iteration   7: 6283178.243 ops/s
# Warmup Iteration   8: 6338865.590 ops/s
# Warmup Iteration   9: 6238551.643 ops/s
# Warmup Iteration  10: 6240083.261 ops/s
# Warmup Iteration  11: 6277456.657 ops/s
# Warmup Iteration  12: 6284599.868 ops/s
# Warmup Iteration  13: 6254093.656 ops/s
# Warmup Iteration  14: 6287782.200 ops/s
# Warmup Iteration  15: 6320935.621 ops/s
# Warmup Iteration  16: 6316505.995 ops/s
# Warmup Iteration  17: 6313945.739 ops/s
# Warmup Iteration  18: 6321636.465 ops/s
# Warmup Iteration  19: 6325508.525 ops/s
# Warmup Iteration  20: 6294891.875 ops/s
# Warmup Iteration  21: 6320379.081 ops/s
# Warmup Iteration  22: 6359529.679 ops/s
# Warmup Iteration  23: 6342297.550 ops/s
# Warmup Iteration  24: 6303198.477 ops/s
# Warmup Iteration  25: 6284636.885 ops/s
# Warmup Iteration  26: 6353968.245 ops/s
# Warmup Iteration  27: 6367154.102 ops/s
# Warmup Iteration  28: 6348328.041 ops/s
# Warmup Iteration  29: 6336816.692 ops/s
# Warmup Iteration  30: 6363687.567 ops/s
Iteration   1: 6361392.714 ops/s
Iteration   2: 6379931.485 ops/s
Iteration   3: 6341493.885 ops/s
Iteration   4: 6394791.037 ops/s
Iteration   5: 6308141.269 ops/s
Iteration   6: 6332660.513 ops/s
Iteration   7: 6362587.763 ops/s
Iteration   8: 6267361.243 ops/s
Iteration   9: 6353985.920 ops/s
Iteration  10: 6404894.488 ops/s
Iteration  11: 6356525.156 ops/s
Iteration  12: 6341234.916 ops/s
Iteration  13: 6339606.863 ops/s
Iteration  14: 6377422.022 ops/s
Iteration  15: 6360704.351 ops/s
Iteration  16: 6283793.566 ops/s
Iteration  17: 6382900.101 ops/s
Iteration  18: 6343039.569 ops/s
Iteration  19: 6315101.920 ops/s
Iteration  20: 6212649.618 ops/s
Iteration  21: 6359676.391 ops/s
Iteration  22: 6383305.995 ops/s
Iteration  23: 6281375.333 ops/s
Iteration  24: 6323255.794 ops/s
Iteration  25: 6268215.768 ops/s
Iteration  26: 6362336.941 ops/s
Iteration  27: 6376437.297 ops/s
Iteration  28: 6381097.106 ops/s
Iteration  29: 6347180.948 ops/s
Iteration  30: 6344463.004 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_makeString":
  6341585.433 ±(99.9%) 29073.151 ops/s [Average]
  (min, avg, max) = (6212649.618, 6341585.433, 6404894.488), stdev = 43515.327
  CI (99.9%): [6312512.281, 6370658.584] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_makeString  thrpt   30  6341585.433 ± 29073.151  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2145795.481 ops/s
# Warmup Iteration   2: 4933832.267 ops/s
# Warmup Iteration   3: 4846715.982 ops/s
# Warmup Iteration   4: 4061586.833 ops/s
# Warmup Iteration   5: 4874739.985 ops/s
# Warmup Iteration   6: 4887273.376 ops/s
# Warmup Iteration   7: 4873602.410 ops/s
# Warmup Iteration   8: 4816118.301 ops/s
# Warmup Iteration   9: 4880300.968 ops/s
# Warmup Iteration  10: 4861633.519 ops/s
# Warmup Iteration  11: 4890940.445 ops/s
# Warmup Iteration  12: 4884059.071 ops/s
# Warmup Iteration  13: 4895600.690 ops/s
# Warmup Iteration  14: 4896267.287 ops/s
# Warmup Iteration  15: 4838412.767 ops/s
# Warmup Iteration  16: 4863968.681 ops/s
# Warmup Iteration  17: 4901431.920 ops/s
# Warmup Iteration  18: 4896926.392 ops/s
# Warmup Iteration  19: 4890452.107 ops/s
# Warmup Iteration  20: 4882477.722 ops/s
# Warmup Iteration  21: 4887758.133 ops/s
# Warmup Iteration  22: 4902796.387 ops/s
# Warmup Iteration  23: 4880892.876 ops/s
# Warmup Iteration  24: 4890818.153 ops/s
# Warmup Iteration  25: 4881734.076 ops/s
# Warmup Iteration  26: 4899644.772 ops/s
# Warmup Iteration  27: 4898686.686 ops/s
# Warmup Iteration  28: 4918589.967 ops/s
# Warmup Iteration  29: 4900189.906 ops/s
# Warmup Iteration  30: 4889728.779 ops/s
Iteration   1: 4884813.368 ops/s
Iteration   2: 4932432.503 ops/s
Iteration   3: 4856155.295 ops/s
Iteration   4: 4905508.571 ops/s
Iteration   5: 4886638.660 ops/s
Iteration   6: 4905844.376 ops/s
Iteration   7: 4920050.672 ops/s
Iteration   8: 4757267.522 ops/s
Iteration   9: 4919285.165 ops/s
Iteration  10: 4889247.209 ops/s
Iteration  11: 4865014.263 ops/s
Iteration  12: 4890257.342 ops/s
Iteration  13: 4910230.800 ops/s
Iteration  14: 4897793.192 ops/s
Iteration  15: 4927174.105 ops/s
Iteration  16: 4885975.303 ops/s
Iteration  17: 4890854.513 ops/s
Iteration  18: 4899677.032 ops/s
Iteration  19: 4884597.707 ops/s
Iteration  20: 4872523.673 ops/s
Iteration  21: 4884397.394 ops/s
Iteration  22: 4882022.359 ops/s
Iteration  23: 4909038.011 ops/s
Iteration  24: 4833193.563 ops/s
Iteration  25: 4889240.482 ops/s
Iteration  26: 4888163.943 ops/s
Iteration  27: 4898423.638 ops/s
Iteration  28: 4899447.750 ops/s
Iteration  29: 4809191.327 ops/s
Iteration  30: 4928429.563 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparator":
  4886762.977 ±(99.9%) 23966.634 ops/s [Average]
  (min, avg, max) = (4757267.522, 4886762.977, 4932432.503), stdev = 35872.133
  CI (99.9%): [4862796.343, 4910729.611] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  4886762.977 ± 23966.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2871400.096 ops/s
# Warmup Iteration   2: 6233236.524 ops/s
# Warmup Iteration   3: 5254486.772 ops/s
# Warmup Iteration   4: 6236008.744 ops/s
# Warmup Iteration   5: 6254425.978 ops/s
# Warmup Iteration   6: 6271628.701 ops/s
# Warmup Iteration   7: 6253422.590 ops/s
# Warmup Iteration   8: 6236797.955 ops/s
# Warmup Iteration   9: 6272813.548 ops/s
# Warmup Iteration  10: 6201297.551 ops/s
# Warmup Iteration  11: 6237777.756 ops/s
# Warmup Iteration  12: 6193049.429 ops/s
# Warmup Iteration  13: 6231895.770 ops/s
# Warmup Iteration  14: 6280593.959 ops/s
# Warmup Iteration  15: 6243728.519 ops/s
# Warmup Iteration  16: 6277929.537 ops/s
# Warmup Iteration  17: 6290742.163 ops/s
# Warmup Iteration  18: 6259959.206 ops/s
# Warmup Iteration  19: 6189294.601 ops/s
# Warmup Iteration  20: 6276631.469 ops/s
# Warmup Iteration  21: 6220456.785 ops/s
# Warmup Iteration  22: 6273533.337 ops/s
# Warmup Iteration  23: 6271473.998 ops/s
# Warmup Iteration  24: 6258306.148 ops/s
# Warmup Iteration  25: 6288231.130 ops/s
# Warmup Iteration  26: 6256016.100 ops/s
# Warmup Iteration  27: 6275586.089 ops/s
# Warmup Iteration  28: 6193900.943 ops/s
# Warmup Iteration  29: 6277498.941 ops/s
# Warmup Iteration  30: 6276998.980 ops/s
Iteration   1: 6274869.310 ops/s
Iteration   2: 6275966.689 ops/s
Iteration   3: 6271493.325 ops/s
Iteration   4: 6247838.891 ops/s
Iteration   5: 6231771.122 ops/s
Iteration   6: 6208808.368 ops/s
Iteration   7: 6277605.514 ops/s
Iteration   8: 6305879.169 ops/s
Iteration   9: 6253499.111 ops/s
Iteration  10: 6260095.574 ops/s
Iteration  11: 6293908.674 ops/s
Iteration  12: 6309389.512 ops/s
Iteration  13: 6257980.983 ops/s
Iteration  14: 6312524.842 ops/s
Iteration  15: 6293036.621 ops/s
Iteration  16: 6292988.895 ops/s
Iteration  17: 6300231.775 ops/s
Iteration  18: 6280624.411 ops/s
Iteration  19: 6273869.334 ops/s
Iteration  20: 6254186.980 ops/s
Iteration  21: 6269071.229 ops/s
Iteration  22: 6166926.135 ops/s
Iteration  23: 6282287.936 ops/s
Iteration  24: 6299678.848 ops/s
Iteration  25: 6234104.430 ops/s
Iteration  26: 6283836.478 ops/s
Iteration  27: 6253342.211 ops/s
Iteration  28: 6269826.626 ops/s
Iteration  29: 6239472.688 ops/s
Iteration  30: 6069918.679 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  6261501.145 ±(99.9%) 31900.257 ops/s [Average]
  (min, avg, max) = (6069918.679, 6261501.145, 6312524.842), stdev = 47746.807
  CI (99.9%): [6229600.888, 6293401.402] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  6261501.145 ± 31900.257  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7296478.941 ops/s
# Warmup Iteration   2: 14594674.384 ops/s
# Warmup Iteration   3: 12372541.358 ops/s
# Warmup Iteration   4: 14525332.610 ops/s
# Warmup Iteration   5: 14583066.685 ops/s
# Warmup Iteration   6: 14599143.714 ops/s
# Warmup Iteration   7: 14585156.659 ops/s
# Warmup Iteration   8: 14653688.028 ops/s
# Warmup Iteration   9: 14622890.552 ops/s
# Warmup Iteration  10: 14636028.303 ops/s
# Warmup Iteration  11: 14626579.747 ops/s
# Warmup Iteration  12: 14426840.372 ops/s
# Warmup Iteration  13: 14591302.925 ops/s
# Warmup Iteration  14: 14585631.071 ops/s
# Warmup Iteration  15: 14632251.937 ops/s
# Warmup Iteration  16: 14628394.591 ops/s
# Warmup Iteration  17: 14724889.979 ops/s
# Warmup Iteration  18: 14771557.358 ops/s
# Warmup Iteration  19: 14598845.613 ops/s
# Warmup Iteration  20: 14649541.812 ops/s
# Warmup Iteration  21: 14718523.230 ops/s
# Warmup Iteration  22: 14628800.738 ops/s
# Warmup Iteration  23: 14721836.068 ops/s
# Warmup Iteration  24: 14737284.340 ops/s
# Warmup Iteration  25: 14501341.643 ops/s
# Warmup Iteration  26: 14664961.536 ops/s
# Warmup Iteration  27: 14694206.656 ops/s
# Warmup Iteration  28: 14611491.768 ops/s
# Warmup Iteration  29: 14663974.804 ops/s
# Warmup Iteration  30: 14717187.615 ops/s
Iteration   1: 14591006.302 ops/s
Iteration   2: 14307024.574 ops/s
Iteration   3: 14494598.330 ops/s
Iteration   4: 14710767.604 ops/s
Iteration   5: 14703986.195 ops/s
Iteration   6: 14712076.314 ops/s
Iteration   7: 14744320.904 ops/s
Iteration   8: 14523491.978 ops/s
Iteration   9: 14719857.731 ops/s
Iteration  10: 14695112.532 ops/s
Iteration  11: 14663092.850 ops/s
Iteration  12: 14674101.073 ops/s
Iteration  13: 14672394.414 ops/s
Iteration  14: 14732293.767 ops/s
Iteration  15: 14735141.218 ops/s
Iteration  16: 14707396.316 ops/s
Iteration  17: 14707661.503 ops/s
Iteration  18: 14653232.930 ops/s
Iteration  19: 14704619.940 ops/s
Iteration  20: 14631762.486 ops/s
Iteration  21: 14719105.739 ops/s
Iteration  22: 14488567.431 ops/s
Iteration  23: 14631715.037 ops/s
Iteration  24: 14643851.250 ops/s
Iteration  25: 14658704.771 ops/s
Iteration  26: 14504958.350 ops/s
Iteration  27: 14692370.541 ops/s
Iteration  28: 14456026.979 ops/s
Iteration  29: 14707865.126 ops/s
Iteration  30: 14676548.247 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max":
  14642121.748 ±(99.9%) 68707.221 ops/s [Average]
  (min, avg, max) = (14307024.574, 14642121.748, 14744320.904), stdev = 102837.741
  CI (99.9%): [14573414.527, 14710828.969] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max  thrpt   30  14642121.748 ± 68707.221  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5007264.602 ops/s
# Warmup Iteration   2: 10023741.475 ops/s
# Warmup Iteration   3: 8686226.410 ops/s
# Warmup Iteration   4: 10260489.506 ops/s
# Warmup Iteration   5: 10229445.486 ops/s
# Warmup Iteration   6: 10238299.226 ops/s
# Warmup Iteration   7: 10161316.758 ops/s
# Warmup Iteration   8: 10209920.930 ops/s
# Warmup Iteration   9: 10212759.778 ops/s
# Warmup Iteration  10: 10112017.866 ops/s
# Warmup Iteration  11: 10218958.073 ops/s
# Warmup Iteration  12: 10206395.333 ops/s
# Warmup Iteration  13: 10101913.167 ops/s
# Warmup Iteration  14: 10144537.791 ops/s
# Warmup Iteration  15: 10192673.561 ops/s
# Warmup Iteration  16: 10077172.448 ops/s
# Warmup Iteration  17: 10252336.621 ops/s
# Warmup Iteration  18: 10166593.801 ops/s
# Warmup Iteration  19: 10193441.149 ops/s
# Warmup Iteration  20: 10237516.476 ops/s
# Warmup Iteration  21: 10239793.952 ops/s
# Warmup Iteration  22: 10247449.427 ops/s
# Warmup Iteration  23: 10180088.900 ops/s
# Warmup Iteration  24: 10217904.805 ops/s
# Warmup Iteration  25: 10194207.722 ops/s
# Warmup Iteration  26: 10175046.915 ops/s
# Warmup Iteration  27: 10195129.158 ops/s
# Warmup Iteration  28: 10225713.057 ops/s
# Warmup Iteration  29: 10117762.146 ops/s
# Warmup Iteration  30: 10226080.406 ops/s
Iteration   1: 10193166.513 ops/s
Iteration   2: 10218880.831 ops/s
Iteration   3: 10235422.315 ops/s
Iteration   4: 10226344.822 ops/s
Iteration   5: 10300518.966 ops/s
Iteration   6: 10241482.087 ops/s
Iteration   7: 10247653.735 ops/s
Iteration   8: 10236231.426 ops/s
Iteration   9: 10211758.561 ops/s
Iteration  10: 10234571.414 ops/s
Iteration  11: 10219429.881 ops/s
Iteration  12: 10181251.693 ops/s
Iteration  13: 10200874.199 ops/s
Iteration  14: 10221499.773 ops/s
Iteration  15: 10202839.033 ops/s
Iteration  16: 10154760.853 ops/s
Iteration  17: 10311276.227 ops/s
Iteration  18: 10184871.039 ops/s
Iteration  19: 10157112.136 ops/s
Iteration  20: 10269175.767 ops/s
Iteration  21: 10248124.126 ops/s
Iteration  22: 10209967.667 ops/s
Iteration  23: 10288470.749 ops/s
Iteration  24: 10220432.696 ops/s
Iteration  25: 10201629.844 ops/s
Iteration  26: 10191103.089 ops/s
Iteration  27: 10261220.903 ops/s
Iteration  28: 10182950.682 ops/s
Iteration  29: 10166139.362 ops/s
Iteration  30: 10210143.318 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxBy":
  10220976.790 ±(99.9%) 26143.815 ops/s [Average]
  (min, avg, max) = (10154760.853, 10220976.790, 10311276.227), stdev = 39130.835
  CI (99.9%): [10194832.975, 10247120.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxBy  thrpt   30  10220976.790 ± 26143.815  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2870713.397 ops/s
# Warmup Iteration   2: 6147585.953 ops/s
# Warmup Iteration   3: 5254533.019 ops/s
# Warmup Iteration   4: 6211573.315 ops/s
# Warmup Iteration   5: 6221274.282 ops/s
# Warmup Iteration   6: 6176902.533 ops/s
# Warmup Iteration   7: 6186623.287 ops/s
# Warmup Iteration   8: 6204913.807 ops/s
# Warmup Iteration   9: 6213320.847 ops/s
# Warmup Iteration  10: 6232456.561 ops/s
# Warmup Iteration  11: 6193462.307 ops/s
# Warmup Iteration  12: 6204961.458 ops/s
# Warmup Iteration  13: 6191845.378 ops/s
# Warmup Iteration  14: 6186203.448 ops/s
# Warmup Iteration  15: 6213812.216 ops/s
# Warmup Iteration  16: 6202586.267 ops/s
# Warmup Iteration  17: 6215582.577 ops/s
# Warmup Iteration  18: 6231047.740 ops/s
# Warmup Iteration  19: 6271141.369 ops/s
# Warmup Iteration  20: 6078598.701 ops/s
# Warmup Iteration  21: 6223059.337 ops/s
# Warmup Iteration  22: 6159584.902 ops/s
# Warmup Iteration  23: 6209271.205 ops/s
# Warmup Iteration  24: 6198709.430 ops/s
# Warmup Iteration  25: 6230989.899 ops/s
# Warmup Iteration  26: 6236450.463 ops/s
# Warmup Iteration  27: 6213154.771 ops/s
# Warmup Iteration  28: 6231159.167 ops/s
# Warmup Iteration  29: 6207022.798 ops/s
# Warmup Iteration  30: 6178938.126 ops/s
Iteration   1: 6237777.004 ops/s
Iteration   2: 6109701.325 ops/s
Iteration   3: 6231054.297 ops/s
Iteration   4: 6179565.060 ops/s
Iteration   5: 6247623.281 ops/s
Iteration   6: 6222520.026 ops/s
Iteration   7: 6261813.851 ops/s
Iteration   8: 6198255.084 ops/s
Iteration   9: 6209724.254 ops/s
Iteration  10: 6115700.359 ops/s
Iteration  11: 6201423.466 ops/s
Iteration  12: 6201590.145 ops/s
Iteration  13: 6241664.222 ops/s
Iteration  14: 6182029.769 ops/s
Iteration  15: 6256757.313 ops/s
Iteration  16: 6182958.248 ops/s
Iteration  17: 6253032.917 ops/s
Iteration  18: 6221183.865 ops/s
Iteration  19: 6218243.447 ops/s
Iteration  20: 6219098.743 ops/s
Iteration  21: 6234993.517 ops/s
Iteration  22: 6232393.782 ops/s
Iteration  23: 6244937.078 ops/s
Iteration  24: 6182561.633 ops/s
Iteration  25: 6264585.828 ops/s
Iteration  26: 6216344.570 ops/s
Iteration  27: 6206597.584 ops/s
Iteration  28: 6145817.927 ops/s
Iteration  29: 6245180.232 ops/s
Iteration  30: 6211421.252 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxByOptional":
  6212551.669 ±(99.9%) 25952.365 ops/s [Average]
  (min, avg, max) = (6109701.325, 6212551.669, 6264585.828), stdev = 38844.282
  CI (99.9%): [6186599.304, 6238504.035] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxByOptional  thrpt   30  6212551.669 ± 25952.365  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3271529.417 ops/s
# Warmup Iteration   2: 7030295.590 ops/s
# Warmup Iteration   3: 7082160.926 ops/s
# Warmup Iteration   4: 6413473.549 ops/s
# Warmup Iteration   5: 6591445.500 ops/s
# Warmup Iteration   6: 7098816.626 ops/s
# Warmup Iteration   7: 7133307.827 ops/s
# Warmup Iteration   8: 7131757.026 ops/s
# Warmup Iteration   9: 7052109.382 ops/s
# Warmup Iteration  10: 7033911.312 ops/s
# Warmup Iteration  11: 7109355.503 ops/s
# Warmup Iteration  12: 7096814.359 ops/s
# Warmup Iteration  13: 7093655.299 ops/s
# Warmup Iteration  14: 7062880.852 ops/s
# Warmup Iteration  15: 7112290.196 ops/s
# Warmup Iteration  16: 7122586.965 ops/s
# Warmup Iteration  17: 7125391.378 ops/s
# Warmup Iteration  18: 7147210.112 ops/s
# Warmup Iteration  19: 7124538.449 ops/s
# Warmup Iteration  20: 7112899.150 ops/s
# Warmup Iteration  21: 7078199.347 ops/s
# Warmup Iteration  22: 7139692.363 ops/s
# Warmup Iteration  23: 7116817.460 ops/s
# Warmup Iteration  24: 7110411.100 ops/s
# Warmup Iteration  25: 7045681.882 ops/s
# Warmup Iteration  26: 7137496.033 ops/s
# Warmup Iteration  27: 7125012.749 ops/s
# Warmup Iteration  28: 7100889.680 ops/s
# Warmup Iteration  29: 7107751.623 ops/s
# Warmup Iteration  30: 7078887.478 ops/s
Iteration   1: 7154730.028 ops/s
Iteration   2: 7134288.457 ops/s
Iteration   3: 7106552.826 ops/s
Iteration   4: 7125393.456 ops/s
Iteration   5: 7113785.130 ops/s
Iteration   6: 7124277.941 ops/s
Iteration   7: 7144868.130 ops/s
Iteration   8: 7123844.698 ops/s
Iteration   9: 7086553.441 ops/s
Iteration  10: 7151712.769 ops/s
Iteration  11: 7115713.737 ops/s
Iteration  12: 7070134.558 ops/s
Iteration  13: 7102250.528 ops/s
Iteration  14: 7128952.621 ops/s
Iteration  15: 7135467.107 ops/s
Iteration  16: 7157383.327 ops/s
Iteration  17: 7116572.601 ops/s
Iteration  18: 7091696.257 ops/s
Iteration  19: 7114358.460 ops/s
Iteration  20: 7162156.285 ops/s
Iteration  21: 7142845.547 ops/s
Iteration  22: 7142192.160 ops/s
Iteration  23: 7115081.265 ops/s
Iteration  24: 7169652.118 ops/s
Iteration  25: 7155188.307 ops/s
Iteration  26: 7092577.735 ops/s
Iteration  27: 7083077.712 ops/s
Iteration  28: 7122392.441 ops/s
Iteration  29: 7038543.440 ops/s
Iteration  30: 7100351.164 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxBy_null_throws":
  7120753.141 ±(99.9%) 19796.430 ops/s [Average]
  (min, avg, max) = (7038543.440, 7120753.141, 7169652.118), stdev = 29630.366
  CI (99.9%): [7100956.712, 7140549.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  7120753.141 ± 19796.430  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1852707.650 ops/s
# Warmup Iteration   2: 3850768.045 ops/s
# Warmup Iteration   3: 3293749.494 ops/s
# Warmup Iteration   4: 3890130.231 ops/s
# Warmup Iteration   5: 3900324.429 ops/s
# Warmup Iteration   6: 3856858.338 ops/s
# Warmup Iteration   7: 3885549.966 ops/s
# Warmup Iteration   8: 3894639.216 ops/s
# Warmup Iteration   9: 3885174.862 ops/s
# Warmup Iteration  10: 3896541.891 ops/s
# Warmup Iteration  11: 3906420.773 ops/s
# Warmup Iteration  12: 3886695.327 ops/s
# Warmup Iteration  13: 3903580.234 ops/s
# Warmup Iteration  14: 3921674.984 ops/s
# Warmup Iteration  15: 3901449.947 ops/s
# Warmup Iteration  16: 3896669.411 ops/s
# Warmup Iteration  17: 3869173.020 ops/s
# Warmup Iteration  18: 3894920.562 ops/s
# Warmup Iteration  19: 3851459.638 ops/s
# Warmup Iteration  20: 3878280.746 ops/s
# Warmup Iteration  21: 3845570.652 ops/s
# Warmup Iteration  22: 3904151.274 ops/s
# Warmup Iteration  23: 3887818.786 ops/s
# Warmup Iteration  24: 3841930.158 ops/s
# Warmup Iteration  25: 3904743.635 ops/s
# Warmup Iteration  26: 3859027.137 ops/s
# Warmup Iteration  27: 3866085.743 ops/s
# Warmup Iteration  28: 3886265.814 ops/s
# Warmup Iteration  29: 3893670.338 ops/s
# Warmup Iteration  30: 3854789.159 ops/s
Iteration   1: 3919755.489 ops/s
Iteration   2: 3875492.444 ops/s
Iteration   3: 3859415.543 ops/s
Iteration   4: 3862554.077 ops/s
Iteration   5: 3878236.089 ops/s
Iteration   6: 3891365.856 ops/s
Iteration   7: 3919127.683 ops/s
Iteration   8: 3915308.634 ops/s
Iteration   9: 3859836.967 ops/s
Iteration  10: 3861809.278 ops/s
Iteration  11: 3863483.104 ops/s
Iteration  12: 3882116.875 ops/s
Iteration  13: 3879183.744 ops/s
Iteration  14: 3881348.611 ops/s
Iteration  15: 3861251.766 ops/s
Iteration  16: 3867073.827 ops/s
Iteration  17: 3859767.057 ops/s
Iteration  18: 3910848.896 ops/s
Iteration  19: 3792519.392 ops/s
Iteration  20: 3882268.484 ops/s
Iteration  21: 3832646.715 ops/s
Iteration  22: 3854051.539 ops/s
Iteration  23: 3891430.543 ops/s
Iteration  24: 3873603.639 ops/s
Iteration  25: 3877007.270 ops/s
Iteration  26: 3861312.467 ops/s
Iteration  27: 3883577.764 ops/s
Iteration  28: 3875574.058 ops/s
Iteration  29: 3889119.525 ops/s
Iteration  30: 3868607.292 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxOptional":
  3874323.154 ±(99.9%) 16882.778 ops/s [Average]
  (min, avg, max) = (3792519.392, 3874323.154, 3919755.489), stdev = 25269.350
  CI (99.9%): [3857440.376, 3891205.933] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_maxOptional  thrpt   30  3874323.154 ± 16882.778  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 654235.904 ops/s
# Warmup Iteration   2: 715495.156 ops/s
# Warmup Iteration   3: 930545.303 ops/s
# Warmup Iteration   4: 925665.114 ops/s
# Warmup Iteration   5: 925996.915 ops/s
# Warmup Iteration   6: 934796.720 ops/s
# Warmup Iteration   7: 928391.556 ops/s
# Warmup Iteration   8: 921228.181 ops/s
# Warmup Iteration   9: 936584.725 ops/s
# Warmup Iteration  10: 932066.541 ops/s
# Warmup Iteration  11: 787069.825 ops/s
# Warmup Iteration  12: 935931.217 ops/s
# Warmup Iteration  13: 934969.086 ops/s
# Warmup Iteration  14: 927489.269 ops/s
# Warmup Iteration  15: 929487.391 ops/s
# Warmup Iteration  16: 928768.525 ops/s
# Warmup Iteration  17: 991696.569 ops/s
# Warmup Iteration  18: 991200.618 ops/s
# Warmup Iteration  19: 985240.534 ops/s
# Warmup Iteration  20: 974278.902 ops/s
# Warmup Iteration  21: 989941.941 ops/s
# Warmup Iteration  22: 990613.633 ops/s
# Warmup Iteration  23: 982751.477 ops/s
# Warmup Iteration  24: 991881.813 ops/s
# Warmup Iteration  25: 989158.955 ops/s
# Warmup Iteration  26: 986284.657 ops/s
# Warmup Iteration  27: 992972.996 ops/s
# Warmup Iteration  28: 992361.013 ops/s
# Warmup Iteration  29: 988816.464 ops/s
# Warmup Iteration  30: 972091.040 ops/s
Iteration   1: 990801.435 ops/s
Iteration   2: 975561.197 ops/s
Iteration   3: 981864.397 ops/s
Iteration   4: 991937.286 ops/s
Iteration   5: 976104.940 ops/s
Iteration   6: 975019.281 ops/s
Iteration   7: 990922.875 ops/s
Iteration   8: 980745.260 ops/s
Iteration   9: 991263.597 ops/s
Iteration  10: 993765.082 ops/s
Iteration  11: 991101.329 ops/s
Iteration  12: 989013.063 ops/s
Iteration  13: 992658.878 ops/s
Iteration  14: 990617.093 ops/s
Iteration  15: 985270.014 ops/s
Iteration  16: 993852.266 ops/s
Iteration  17: 979596.174 ops/s
Iteration  18: 994215.864 ops/s
Iteration  19: 992354.176 ops/s
Iteration  20: 989396.536 ops/s
Iteration  21: 989294.031 ops/s
Iteration  22: 981065.869 ops/s
Iteration  23: 988770.836 ops/s
Iteration  24: 996042.710 ops/s
Iteration  25: 993855.833 ops/s
Iteration  26: 988912.071 ops/s
Iteration  27: 992652.153 ops/s
Iteration  28: 989539.954 ops/s
Iteration  29: 991412.738 ops/s
Iteration  30: 990337.589 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_empty_throws":
  988264.818 ±(99.9%) 3983.687 ops/s [Average]
  (min, avg, max) = (975019.281, 988264.818, 996042.710), stdev = 5962.596
  CI (99.9%): [984281.130, 992248.505] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_empty_throws  thrpt   30  988264.818 ± 3983.687  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6298934.959 ops/s
# Warmup Iteration   2: 12896854.223 ops/s
# Warmup Iteration   3: 10934204.996 ops/s
# Warmup Iteration   4: 12998624.225 ops/s
# Warmup Iteration   5: 12975372.082 ops/s
# Warmup Iteration   6: 12934190.156 ops/s
# Warmup Iteration   7: 13003904.076 ops/s
# Warmup Iteration   8: 12997629.161 ops/s
# Warmup Iteration   9: 13010316.465 ops/s
# Warmup Iteration  10: 12951134.236 ops/s
# Warmup Iteration  11: 13065721.047 ops/s
# Warmup Iteration  12: 13042826.912 ops/s
# Warmup Iteration  13: 13013362.927 ops/s
# Warmup Iteration  14: 12993637.290 ops/s
# Warmup Iteration  15: 12957399.045 ops/s
# Warmup Iteration  16: 12954388.871 ops/s
# Warmup Iteration  17: 12964815.236 ops/s
# Warmup Iteration  18: 12896381.318 ops/s
# Warmup Iteration  19: 13018115.641 ops/s
# Warmup Iteration  20: 13034821.456 ops/s
# Warmup Iteration  21: 12923139.563 ops/s
# Warmup Iteration  22: 12992879.865 ops/s
# Warmup Iteration  23: 13057649.173 ops/s
# Warmup Iteration  24: 12984910.258 ops/s
# Warmup Iteration  25: 12969095.378 ops/s
# Warmup Iteration  26: 13085494.857 ops/s
# Warmup Iteration  27: 13042150.613 ops/s
# Warmup Iteration  28: 13055926.305 ops/s
# Warmup Iteration  29: 12887003.192 ops/s
# Warmup Iteration  30: 13020024.987 ops/s
Iteration   1: 13113990.633 ops/s
Iteration   2: 13064442.536 ops/s
Iteration   3: 13097153.354 ops/s
Iteration   4: 12903765.140 ops/s
Iteration   5: 13034870.343 ops/s
Iteration   6: 13075809.151 ops/s
Iteration   7: 13035374.691 ops/s
Iteration   8: 13072036.126 ops/s
Iteration   9: 12943729.760 ops/s
Iteration  10: 13093048.085 ops/s
Iteration  11: 13096017.122 ops/s
Iteration  12: 13063069.925 ops/s
Iteration  13: 12888707.616 ops/s
Iteration  14: 13018519.476 ops/s
Iteration  15: 12968099.843 ops/s
Iteration  16: 13062144.336 ops/s
Iteration  17: 13006313.664 ops/s
Iteration  18: 13025475.420 ops/s
Iteration  19: 13054713.588 ops/s
Iteration  20: 13038174.407 ops/s
Iteration  21: 12974251.966 ops/s
Iteration  22: 12967447.287 ops/s
Iteration  23: 13065799.123 ops/s
Iteration  24: 13055053.513 ops/s
Iteration  25: 12960741.799 ops/s
Iteration  26: 13053034.500 ops/s
Iteration  27: 12645879.919 ops/s
Iteration  28: 13042744.908 ops/s
Iteration  29: 12994145.233 ops/s
Iteration  30: 13052029.133 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_null_safe":
  13015552.753 ±(99.9%) 59908.266 ops/s [Average]
  (min, avg, max) = (12645879.919, 13015552.753, 13113990.633), stdev = 89667.879
  CI (99.9%): [12955644.488, 13075461.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_null_safe  thrpt   30  13015552.753 ± 59908.266  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6419676.437 ops/s
# Warmup Iteration   2: 13666358.403 ops/s
# Warmup Iteration   3: 11802182.545 ops/s
# Warmup Iteration   4: 13842837.626 ops/s
# Warmup Iteration   5: 13885715.058 ops/s
# Warmup Iteration   6: 13832556.018 ops/s
# Warmup Iteration   7: 13914844.390 ops/s
# Warmup Iteration   8: 13854182.254 ops/s
# Warmup Iteration   9: 13912325.727 ops/s
# Warmup Iteration  10: 13918285.459 ops/s
# Warmup Iteration  11: 13943435.903 ops/s
# Warmup Iteration  12: 13938326.403 ops/s
# Warmup Iteration  13: 13928586.737 ops/s
# Warmup Iteration  14: 13934525.307 ops/s
# Warmup Iteration  15: 13879859.259 ops/s
# Warmup Iteration  16: 13916113.604 ops/s
# Warmup Iteration  17: 13901084.867 ops/s
# Warmup Iteration  18: 13879185.131 ops/s
# Warmup Iteration  19: 13803822.137 ops/s
# Warmup Iteration  20: 13798710.841 ops/s
# Warmup Iteration  21: 13878790.449 ops/s
# Warmup Iteration  22: 13873417.710 ops/s
# Warmup Iteration  23: 13806415.434 ops/s
# Warmup Iteration  24: 13898483.672 ops/s
# Warmup Iteration  25: 13754547.157 ops/s
# Warmup Iteration  26: 13727531.424 ops/s
# Warmup Iteration  27: 13909884.192 ops/s
# Warmup Iteration  28: 13763583.156 ops/s
# Warmup Iteration  29: 13668046.420 ops/s
# Warmup Iteration  30: 13878154.675 ops/s
Iteration   1: 13882045.546 ops/s
Iteration   2: 13831989.374 ops/s
Iteration   3: 13851117.033 ops/s
Iteration   4: 13828377.732 ops/s
Iteration   5: 13747720.312 ops/s
Iteration   6: 13917337.593 ops/s
Iteration   7: 13852721.678 ops/s
Iteration   8: 13836667.671 ops/s
Iteration   9: 13750985.416 ops/s
Iteration  10: 13897324.757 ops/s
Iteration  11: 13859914.307 ops/s
Iteration  12: 13719526.318 ops/s
Iteration  13: 13873698.419 ops/s
Iteration  14: 13293337.750 ops/s
Iteration  15: 13800632.284 ops/s
Iteration  16: 13846653.906 ops/s
Iteration  17: 13780946.713 ops/s
Iteration  18: 13863670.369 ops/s
Iteration  19: 13900443.923 ops/s
Iteration  20: 13748390.234 ops/s
Iteration  21: 13789894.835 ops/s
Iteration  22: 13879714.082 ops/s
Iteration  23: 13884897.520 ops/s
Iteration  24: 13803128.000 ops/s
Iteration  25: 13834251.088 ops/s
Iteration  26: 13896606.976 ops/s
Iteration  27: 13861413.223 ops/s
Iteration  28: 13848543.921 ops/s
Iteration  29: 13855098.767 ops/s
Iteration  30: 13855365.972 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws":
  13819747.191 ±(99.9%) 74432.439 ops/s [Average]
  (min, avg, max) = (13293337.750, 13819747.191, 13917337.593), stdev = 111406.980
  CI (99.9%): [13745314.751, 13894179.630] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws  thrpt   30  13819747.191 ± 74432.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 140069.903 ops/s
# Warmup Iteration   2: 145690.998 ops/s
# Warmup Iteration   3: 147198.283 ops/s
# Warmup Iteration   4: 147516.387 ops/s
# Warmup Iteration   5: 148173.501 ops/s
# Warmup Iteration   6: 147591.172 ops/s
# Warmup Iteration   7: 147401.900 ops/s
# Warmup Iteration   8: 148032.692 ops/s
# Warmup Iteration   9: 148220.851 ops/s
# Warmup Iteration  10: 157662.562 ops/s
# Warmup Iteration  11: 155743.755 ops/s
# Warmup Iteration  12: 156933.246 ops/s
# Warmup Iteration  13: 155095.050 ops/s
# Warmup Iteration  14: 156424.651 ops/s
# Warmup Iteration  15: 156556.405 ops/s
# Warmup Iteration  16: 154639.459 ops/s
# Warmup Iteration  17: 155140.614 ops/s
# Warmup Iteration  18: 157141.565 ops/s
# Warmup Iteration  19: 157567.983 ops/s
# Warmup Iteration  20: 157685.979 ops/s
# Warmup Iteration  21: 156639.036 ops/s
# Warmup Iteration  22: 155891.536 ops/s
# Warmup Iteration  23: 156694.708 ops/s
# Warmup Iteration  24: 155831.470 ops/s
# Warmup Iteration  25: 156793.279 ops/s
# Warmup Iteration  26: 156122.806 ops/s
# Warmup Iteration  27: 156432.383 ops/s
# Warmup Iteration  28: 156178.587 ops/s
# Warmup Iteration  29: 155996.381 ops/s
# Warmup Iteration  30: 156903.722 ops/s
Iteration   1: 155212.897 ops/s
Iteration   2: 156690.780 ops/s
Iteration   3: 158659.121 ops/s
Iteration   4: 157138.651 ops/s
Iteration   5: 157415.132 ops/s
Iteration   6: 158059.273 ops/s
Iteration   7: 156658.784 ops/s
Iteration   8: 157780.474 ops/s
Iteration   9: 156442.455 ops/s
Iteration  10: 156297.254 ops/s
Iteration  11: 157838.298 ops/s
Iteration  12: 159007.476 ops/s
Iteration  13: 157290.924 ops/s
Iteration  14: 157576.952 ops/s
Iteration  15: 156765.751 ops/s
Iteration  16: 157210.226 ops/s
Iteration  17: 155157.056 ops/s
Iteration  18: 158267.851 ops/s
Iteration  19: 157322.333 ops/s
Iteration  20: 155799.433 ops/s
Iteration  21: 159488.089 ops/s
Iteration  22: 157925.937 ops/s
Iteration  23: 157060.308 ops/s
Iteration  24: 157368.762 ops/s
Iteration  25: 156403.554 ops/s
Iteration  26: 155970.137 ops/s
Iteration  27: 158023.521 ops/s
Iteration  28: 158284.557 ops/s
Iteration  29: 158035.550 ops/s
Iteration  30: 157005.358 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws_without_comparator":
  157271.896 ±(99.9%) 688.988 ops/s [Average]
  (min, avg, max) = (155157.056, 157271.896, 159488.089), stdev = 1031.245
  CI (99.9%): [156582.908, 157960.885] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt       Score     Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  157271.896 ± 688.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7336753.138 ops/s
# Warmup Iteration   2: 14542044.404 ops/s
# Warmup Iteration   3: 12343814.624 ops/s
# Warmup Iteration   4: 14562446.054 ops/s
# Warmup Iteration   5: 14631359.899 ops/s
# Warmup Iteration   6: 14639544.083 ops/s
# Warmup Iteration   7: 14621904.976 ops/s
# Warmup Iteration   8: 14614777.942 ops/s
# Warmup Iteration   9: 14681853.836 ops/s
# Warmup Iteration  10: 14588022.400 ops/s
# Warmup Iteration  11: 14733278.137 ops/s
# Warmup Iteration  12: 14665426.433 ops/s
# Warmup Iteration  13: 14640276.827 ops/s
# Warmup Iteration  14: 14676786.888 ops/s
# Warmup Iteration  15: 14563740.561 ops/s
# Warmup Iteration  16: 14640122.180 ops/s
# Warmup Iteration  17: 14838594.482 ops/s
# Warmup Iteration  18: 14824488.981 ops/s
# Warmup Iteration  19: 14850107.480 ops/s
# Warmup Iteration  20: 14763022.496 ops/s
# Warmup Iteration  21: 14809664.684 ops/s
# Warmup Iteration  22: 14855592.503 ops/s
# Warmup Iteration  23: 14709983.117 ops/s
# Warmup Iteration  24: 14824633.621 ops/s
# Warmup Iteration  25: 14765323.676 ops/s
# Warmup Iteration  26: 14735558.073 ops/s
# Warmup Iteration  27: 14790677.199 ops/s
# Warmup Iteration  28: 14874304.704 ops/s
# Warmup Iteration  29: 14848542.208 ops/s
# Warmup Iteration  30: 14711352.235 ops/s
Iteration   1: 14847542.727 ops/s
Iteration   2: 14854168.033 ops/s
Iteration   3: 14853311.213 ops/s
Iteration   4: 14779142.030 ops/s
Iteration   5: 14542315.541 ops/s
Iteration   6: 14724354.193 ops/s
Iteration   7: 14875291.991 ops/s
Iteration   8: 14861644.560 ops/s
Iteration   9: 14857470.352 ops/s
Iteration  10: 14789057.684 ops/s
Iteration  11: 14840959.229 ops/s
Iteration  12: 14771051.134 ops/s
Iteration  13: 14875314.208 ops/s
Iteration  14: 14592586.111 ops/s
Iteration  15: 14826655.884 ops/s
Iteration  16: 14828516.221 ops/s
Iteration  17: 14569051.809 ops/s
Iteration  18: 14743007.254 ops/s
Iteration  19: 14789695.176 ops/s
Iteration  20: 14776753.212 ops/s
Iteration  21: 14810510.428 ops/s
Iteration  22: 14769281.892 ops/s
Iteration  23: 14744053.873 ops/s
Iteration  24: 14825965.996 ops/s
Iteration  25: 14841250.474 ops/s
Iteration  26: 14606169.747 ops/s
Iteration  27: 14849427.663 ops/s
Iteration  28: 14888792.414 ops/s
Iteration  29: 14551762.489 ops/s
Iteration  30: 14903726.702 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_without_comparator":
  14779627.675 ±(99.9%) 69944.540 ops/s [Average]
  (min, avg, max) = (14542315.541, 14779627.675, 14903726.702), stdev = 104689.702
  CI (99.9%): [14709683.135, 14849572.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_max_without_comparator  thrpt   30  14779627.675 ± 69944.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7292826.061 ops/s
# Warmup Iteration   2: 14454469.583 ops/s
# Warmup Iteration   3: 12504836.894 ops/s
# Warmup Iteration   4: 14504773.588 ops/s
# Warmup Iteration   5: 14454691.217 ops/s
# Warmup Iteration   6: 14592850.408 ops/s
# Warmup Iteration   7: 14569657.991 ops/s
# Warmup Iteration   8: 14552252.383 ops/s
# Warmup Iteration   9: 14485068.122 ops/s
# Warmup Iteration  10: 14561534.383 ops/s
# Warmup Iteration  11: 14538014.012 ops/s
# Warmup Iteration  12: 14628141.618 ops/s
# Warmup Iteration  13: 14631779.027 ops/s
# Warmup Iteration  14: 14592545.624 ops/s
# Warmup Iteration  15: 14479295.124 ops/s
# Warmup Iteration  16: 14555468.664 ops/s
# Warmup Iteration  17: 14660645.344 ops/s
# Warmup Iteration  18: 14739120.318 ops/s
# Warmup Iteration  19: 14781576.363 ops/s
# Warmup Iteration  20: 14734858.593 ops/s
# Warmup Iteration  21: 14721587.574 ops/s
# Warmup Iteration  22: 14762770.544 ops/s
# Warmup Iteration  23: 14840191.146 ops/s
# Warmup Iteration  24: 14780848.747 ops/s
# Warmup Iteration  25: 14772471.647 ops/s
# Warmup Iteration  26: 14807736.808 ops/s
# Warmup Iteration  27: 14789611.903 ops/s
# Warmup Iteration  28: 14662407.203 ops/s
# Warmup Iteration  29: 14794009.031 ops/s
# Warmup Iteration  30: 14741914.509 ops/s
Iteration   1: 14687884.956 ops/s
Iteration   2: 14768163.596 ops/s
Iteration   3: 14746005.415 ops/s
Iteration   4: 14661459.785 ops/s
Iteration   5: 14586510.819 ops/s
Iteration   6: 14849419.402 ops/s
Iteration   7: 14754209.294 ops/s
Iteration   8: 14853977.947 ops/s
Iteration   9: 14707604.230 ops/s
Iteration  10: 14538069.605 ops/s
Iteration  11: 14830323.262 ops/s
Iteration  12: 14806907.090 ops/s
Iteration  13: 14822212.209 ops/s
Iteration  14: 14840901.787 ops/s
Iteration  15: 14782688.663 ops/s
Iteration  16: 14784371.886 ops/s
Iteration  17: 14703905.112 ops/s
Iteration  18: 14761421.571 ops/s
Iteration  19: 14659943.456 ops/s
Iteration  20: 14810298.819 ops/s
Iteration  21: 14747081.048 ops/s
Iteration  22: 14762038.085 ops/s
Iteration  23: 14803093.379 ops/s
Iteration  24: 14783189.308 ops/s
Iteration  25: 14719894.266 ops/s
Iteration  26: 14732728.607 ops/s
Iteration  27: 14663948.596 ops/s
Iteration  28: 14656048.618 ops/s
Iteration  29: 14795664.306 ops/s
Iteration  30: 14846039.214 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min":
  14748866.811 ±(99.9%) 52401.642 ops/s [Average]
  (min, avg, max) = (14538069.605, 14748866.811, 14853977.947), stdev = 78432.317
  CI (99.9%): [14696465.169, 14801268.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min  thrpt   30  14748866.811 ± 52401.642  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6062234.274 ops/s
# Warmup Iteration   2: 12388706.701 ops/s
# Warmup Iteration   3: 10538687.139 ops/s
# Warmup Iteration   4: 12496463.279 ops/s
# Warmup Iteration   5: 12469768.828 ops/s
# Warmup Iteration   6: 12491046.412 ops/s
# Warmup Iteration   7: 12342265.898 ops/s
# Warmup Iteration   8: 12482079.339 ops/s
# Warmup Iteration   9: 12474045.283 ops/s
# Warmup Iteration  10: 12441318.867 ops/s
# Warmup Iteration  11: 12439359.927 ops/s
# Warmup Iteration  12: 12500932.179 ops/s
# Warmup Iteration  13: 12459239.659 ops/s
# Warmup Iteration  14: 12461335.097 ops/s
# Warmup Iteration  15: 12466396.087 ops/s
# Warmup Iteration  16: 12499361.555 ops/s
# Warmup Iteration  17: 12516713.656 ops/s
# Warmup Iteration  18: 12569808.377 ops/s
# Warmup Iteration  19: 12429376.407 ops/s
# Warmup Iteration  20: 12493373.184 ops/s
# Warmup Iteration  21: 12468364.993 ops/s
# Warmup Iteration  22: 12546358.366 ops/s
# Warmup Iteration  23: 12471738.304 ops/s
# Warmup Iteration  24: 12519767.366 ops/s
# Warmup Iteration  25: 12443752.967 ops/s
# Warmup Iteration  26: 12509032.192 ops/s
# Warmup Iteration  27: 12564069.349 ops/s
# Warmup Iteration  28: 12466830.579 ops/s
# Warmup Iteration  29: 12510939.009 ops/s
# Warmup Iteration  30: 12449012.022 ops/s
Iteration   1: 12472435.815 ops/s
Iteration   2: 12564185.118 ops/s
Iteration   3: 12524787.651 ops/s
Iteration   4: 12441127.526 ops/s
Iteration   5: 12359144.163 ops/s
Iteration   6: 12571272.860 ops/s
Iteration   7: 12488258.479 ops/s
Iteration   8: 12480405.951 ops/s
Iteration   9: 12479896.858 ops/s
Iteration  10: 12556159.097 ops/s
Iteration  11: 12409246.741 ops/s
Iteration  12: 12513788.968 ops/s
Iteration  13: 12479898.395 ops/s
Iteration  14: 12522591.166 ops/s
Iteration  15: 12533275.006 ops/s
Iteration  16: 12479608.879 ops/s
Iteration  17: 12447544.522 ops/s
Iteration  18: 12486593.412 ops/s
Iteration  19: 12304908.509 ops/s
Iteration  20: 12476145.450 ops/s
Iteration  21: 12490359.292 ops/s
Iteration  22: 12336635.093 ops/s
Iteration  23: 12454675.432 ops/s
Iteration  24: 12479752.880 ops/s
Iteration  25: 12546485.369 ops/s
Iteration  26: 12514509.433 ops/s
Iteration  27: 12501795.196 ops/s
Iteration  28: 12451909.506 ops/s
Iteration  29: 12484382.847 ops/s
Iteration  30: 12311244.093 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minBy":
  12472100.790 ±(99.9%) 45893.988 ops/s [Average]
  (min, avg, max) = (12304908.509, 12472100.790, 12571272.860), stdev = 68691.966
  CI (99.9%): [12426206.802, 12517994.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minBy  thrpt   30  12472100.790 ± 45893.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3225031.845 ops/s
# Warmup Iteration   2: 6536448.317 ops/s
# Warmup Iteration   3: 5610546.130 ops/s
# Warmup Iteration   4: 6607282.904 ops/s
# Warmup Iteration   5: 6587459.294 ops/s
# Warmup Iteration   6: 6601613.343 ops/s
# Warmup Iteration   7: 6611020.230 ops/s
# Warmup Iteration   8: 6608308.059 ops/s
# Warmup Iteration   9: 6562342.522 ops/s
# Warmup Iteration  10: 6592161.605 ops/s
# Warmup Iteration  11: 6597268.746 ops/s
# Warmup Iteration  12: 6550943.243 ops/s
# Warmup Iteration  13: 6584093.892 ops/s
# Warmup Iteration  14: 6619603.649 ops/s
# Warmup Iteration  15: 6643578.650 ops/s
# Warmup Iteration  16: 6551829.061 ops/s
# Warmup Iteration  17: 6658660.826 ops/s
# Warmup Iteration  18: 6577733.131 ops/s
# Warmup Iteration  19: 6665662.213 ops/s
# Warmup Iteration  20: 6662113.250 ops/s
# Warmup Iteration  21: 6623298.436 ops/s
# Warmup Iteration  22: 6635816.486 ops/s
# Warmup Iteration  23: 6650682.480 ops/s
# Warmup Iteration  24: 6645967.204 ops/s
# Warmup Iteration  25: 6663043.902 ops/s
# Warmup Iteration  26: 6633758.025 ops/s
# Warmup Iteration  27: 6614391.645 ops/s
# Warmup Iteration  28: 6634023.413 ops/s
# Warmup Iteration  29: 6640569.869 ops/s
# Warmup Iteration  30: 6642612.514 ops/s
Iteration   1: 6679434.420 ops/s
Iteration   2: 6660244.252 ops/s
Iteration   3: 6650436.981 ops/s
Iteration   4: 6636255.225 ops/s
Iteration   5: 6585005.599 ops/s
Iteration   6: 6573211.129 ops/s
Iteration   7: 6650881.589 ops/s
Iteration   8: 6590327.579 ops/s
Iteration   9: 6600759.680 ops/s
Iteration  10: 6670079.474 ops/s
Iteration  11: 6667694.674 ops/s
Iteration  12: 6675441.956 ops/s
Iteration  13: 6615792.092 ops/s
Iteration  14: 6654915.597 ops/s
Iteration  15: 6622041.218 ops/s
Iteration  16: 6682869.335 ops/s
Iteration  17: 6676562.631 ops/s
Iteration  18: 6675860.724 ops/s
Iteration  19: 6657579.417 ops/s
Iteration  20: 6652277.360 ops/s
Iteration  21: 6655588.628 ops/s
Iteration  22: 6563013.936 ops/s
Iteration  23: 6650368.107 ops/s
Iteration  24: 6664878.692 ops/s
Iteration  25: 6650284.192 ops/s
Iteration  26: 6673727.157 ops/s
Iteration  27: 6673749.015 ops/s
Iteration  28: 6666607.399 ops/s
Iteration  29: 6689520.515 ops/s
Iteration  30: 6671275.427 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minByOptional":
  6647889.467 ±(99.9%) 22952.948 ops/s [Average]
  (min, avg, max) = (6563013.936, 6647889.467, 6689520.515), stdev = 34354.895
  CI (99.9%): [6624936.519, 6670842.415] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minByOptional  thrpt   30  6647889.467 ± 22952.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3182446.719 ops/s
# Warmup Iteration   2: 6802280.412 ops/s
# Warmup Iteration   3: 7030003.102 ops/s
# Warmup Iteration   4: 6568320.833 ops/s
# Warmup Iteration   5: 6290422.291 ops/s
# Warmup Iteration   6: 6943468.934 ops/s
# Warmup Iteration   7: 7029771.568 ops/s
# Warmup Iteration   8: 6999739.018 ops/s
# Warmup Iteration   9: 6948893.908 ops/s
# Warmup Iteration  10: 6913680.135 ops/s
# Warmup Iteration  11: 7016851.754 ops/s
# Warmup Iteration  12: 6954533.199 ops/s
# Warmup Iteration  13: 6991843.328 ops/s
# Warmup Iteration  14: 7007142.553 ops/s
# Warmup Iteration  15: 6996112.552 ops/s
# Warmup Iteration  16: 6981992.446 ops/s
# Warmup Iteration  17: 7041511.779 ops/s
# Warmup Iteration  18: 7048033.553 ops/s
# Warmup Iteration  19: 6997911.511 ops/s
# Warmup Iteration  20: 7023918.164 ops/s
# Warmup Iteration  21: 7035361.891 ops/s
# Warmup Iteration  22: 6980751.354 ops/s
# Warmup Iteration  23: 7017392.283 ops/s
# Warmup Iteration  24: 7036658.558 ops/s
# Warmup Iteration  25: 7006656.311 ops/s
# Warmup Iteration  26: 7011613.117 ops/s
# Warmup Iteration  27: 7041694.441 ops/s
# Warmup Iteration  28: 7024165.521 ops/s
# Warmup Iteration  29: 7046443.702 ops/s
# Warmup Iteration  30: 6994090.245 ops/s
Iteration   1: 6907718.422 ops/s
Iteration   2: 7033926.224 ops/s
Iteration   3: 7025966.853 ops/s
Iteration   4: 7044202.160 ops/s
Iteration   5: 7026027.161 ops/s
Iteration   6: 7056000.433 ops/s
Iteration   7: 6917667.213 ops/s
Iteration   8: 6930446.143 ops/s
Iteration   9: 6903991.761 ops/s
Iteration  10: 7015997.268 ops/s
Iteration  11: 6908134.067 ops/s
Iteration  12: 6990500.948 ops/s
Iteration  13: 7045780.889 ops/s
Iteration  14: 6901978.674 ops/s
Iteration  15: 7046900.117 ops/s
Iteration  16: 6998579.476 ops/s
Iteration  17: 7033846.120 ops/s
Iteration  18: 7008354.385 ops/s
Iteration  19: 7047925.658 ops/s
Iteration  20: 6917257.274 ops/s
Iteration  21: 7057210.487 ops/s
Iteration  22: 6980599.147 ops/s
Iteration  23: 7034293.195 ops/s
Iteration  24: 7041531.085 ops/s
Iteration  25: 7057170.388 ops/s
Iteration  26: 7035675.862 ops/s
Iteration  27: 6919163.375 ops/s
Iteration  28: 6906877.841 ops/s
Iteration  29: 7004869.887 ops/s
Iteration  30: 7014991.266 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minBy_null_throws":
  6993786.126 ±(99.9%) 38315.969 ops/s [Average]
  (min, avg, max) = (6901978.674, 6993786.126, 7057210.487), stdev = 57349.544
  CI (99.9%): [6955470.157, 7032102.095] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  6993786.126 ± 38315.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1417992.770 ops/s
# Warmup Iteration   2: 3815998.544 ops/s
# Warmup Iteration   3: 3277756.637 ops/s
# Warmup Iteration   4: 3809855.431 ops/s
# Warmup Iteration   5: 3816223.404 ops/s
# Warmup Iteration   6: 3810585.664 ops/s
# Warmup Iteration   7: 3832909.175 ops/s
# Warmup Iteration   8: 3770039.271 ops/s
# Warmup Iteration   9: 3799626.585 ops/s
# Warmup Iteration  10: 3821758.277 ops/s
# Warmup Iteration  11: 3775876.595 ops/s
# Warmup Iteration  12: 3823072.643 ops/s
# Warmup Iteration  13: 3818919.821 ops/s
# Warmup Iteration  14: 3785551.917 ops/s
# Warmup Iteration  15: 3793830.077 ops/s
# Warmup Iteration  16: 3816012.330 ops/s
# Warmup Iteration  17: 3868342.545 ops/s
# Warmup Iteration  18: 3881480.205 ops/s
# Warmup Iteration  19: 3765927.129 ops/s
# Warmup Iteration  20: 3851120.189 ops/s
# Warmup Iteration  21: 3813139.031 ops/s
# Warmup Iteration  22: 3883000.696 ops/s
# Warmup Iteration  23: 3890832.415 ops/s
# Warmup Iteration  24: 3890082.467 ops/s
# Warmup Iteration  25: 3868675.126 ops/s
# Warmup Iteration  26: 3868098.213 ops/s
# Warmup Iteration  27: 3878647.102 ops/s
# Warmup Iteration  28: 3865190.952 ops/s
# Warmup Iteration  29: 3837669.184 ops/s
# Warmup Iteration  30: 3850885.287 ops/s
Iteration   1: 3854308.157 ops/s
Iteration   2: 3845483.520 ops/s
Iteration   3: 3852620.634 ops/s
Iteration   4: 3877539.554 ops/s
Iteration   5: 3876893.666 ops/s
Iteration   6: 3881068.785 ops/s
Iteration   7: 3879561.822 ops/s
Iteration   8: 3877900.888 ops/s
Iteration   9: 3865010.021 ops/s
Iteration  10: 3869718.240 ops/s
Iteration  11: 3864377.248 ops/s
Iteration  12: 3874843.758 ops/s
Iteration  13: 3904949.640 ops/s
Iteration  14: 3857675.052 ops/s
Iteration  15: 3874540.236 ops/s
Iteration  16: 3830685.499 ops/s
Iteration  17: 3891642.787 ops/s
Iteration  18: 3855591.142 ops/s
Iteration  19: 3872857.024 ops/s
Iteration  20: 3893247.634 ops/s
Iteration  21: 3889279.793 ops/s
Iteration  22: 3821680.569 ops/s
Iteration  23: 3793835.187 ops/s
Iteration  24: 3869972.508 ops/s
Iteration  25: 3881720.627 ops/s
Iteration  26: 3853517.355 ops/s
Iteration  27: 3860713.418 ops/s
Iteration  28: 3879017.879 ops/s
Iteration  29: 3843029.989 ops/s
Iteration  30: 3893105.803 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minOptional":
  3866212.948 ±(99.9%) 15540.193 ops/s [Average]
  (min, avg, max) = (3793835.187, 3866212.948, 3904949.640), stdev = 23259.831
  CI (99.9%): [3850672.755, 3881753.141] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_minOptional  thrpt   30  3866212.948 ± 15540.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 669553.207 ops/s
# Warmup Iteration   2: 722684.040 ops/s
# Warmup Iteration   3: 928512.356 ops/s
# Warmup Iteration   4: 941331.620 ops/s
# Warmup Iteration   5: 930442.779 ops/s
# Warmup Iteration   6: 930573.859 ops/s
# Warmup Iteration   7: 929333.045 ops/s
# Warmup Iteration   8: 944461.714 ops/s
# Warmup Iteration   9: 938435.498 ops/s
# Warmup Iteration  10: 936245.387 ops/s
# Warmup Iteration  11: 799757.020 ops/s
# Warmup Iteration  12: 927256.163 ops/s
# Warmup Iteration  13: 935553.148 ops/s
# Warmup Iteration  14: 937864.204 ops/s
# Warmup Iteration  15: 934949.606 ops/s
# Warmup Iteration  16: 928450.598 ops/s
# Warmup Iteration  17: 991031.608 ops/s
# Warmup Iteration  18: 991193.437 ops/s
# Warmup Iteration  19: 989458.703 ops/s
# Warmup Iteration  20: 993222.220 ops/s
# Warmup Iteration  21: 995008.570 ops/s
# Warmup Iteration  22: 996492.591 ops/s
# Warmup Iteration  23: 989609.513 ops/s
# Warmup Iteration  24: 989282.084 ops/s
# Warmup Iteration  25: 992873.857 ops/s
# Warmup Iteration  26: 994771.589 ops/s
# Warmup Iteration  27: 995557.222 ops/s
# Warmup Iteration  28: 983354.218 ops/s
# Warmup Iteration  29: 999480.774 ops/s
# Warmup Iteration  30: 993302.323 ops/s
Iteration   1: 985361.766 ops/s
Iteration   2: 993088.529 ops/s
Iteration   3: 993707.259 ops/s
Iteration   4: 991178.103 ops/s
Iteration   5: 995961.335 ops/s
Iteration   6: 961016.148 ops/s
Iteration   7: 990058.224 ops/s
Iteration   8: 994402.307 ops/s
Iteration   9: 991801.075 ops/s
Iteration  10: 991266.162 ops/s
Iteration  11: 991457.753 ops/s
Iteration  12: 993552.098 ops/s
Iteration  13: 990412.701 ops/s
Iteration  14: 993247.886 ops/s
Iteration  15: 991139.464 ops/s
Iteration  16: 986910.813 ops/s
Iteration  17: 989646.035 ops/s
Iteration  18: 994718.083 ops/s
Iteration  19: 988807.728 ops/s
Iteration  20: 996079.417 ops/s
Iteration  21: 986635.654 ops/s
Iteration  22: 986635.507 ops/s
Iteration  23: 994725.851 ops/s
Iteration  24: 993204.869 ops/s
Iteration  25: 987744.312 ops/s
Iteration  26: 976878.007 ops/s
Iteration  27: 992213.016 ops/s
Iteration  28: 989609.748 ops/s
Iteration  29: 988034.495 ops/s
Iteration  30: 993420.601 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_empty_throws":
  989763.831 ±(99.9%) 4463.846 ops/s [Average]
  (min, avg, max) = (961016.148, 989763.831, 996079.417), stdev = 6681.275
  CI (99.9%): [985299.985, 994227.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_empty_throws  thrpt   30  989763.831 ± 4463.846  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5536505.270 ops/s
# Warmup Iteration   2: 11581308.724 ops/s
# Warmup Iteration   3: 9655660.753 ops/s
# Warmup Iteration   4: 11544702.257 ops/s
# Warmup Iteration   5: 11580428.086 ops/s
# Warmup Iteration   6: 11602862.867 ops/s
# Warmup Iteration   7: 11362148.612 ops/s
# Warmup Iteration   8: 11572354.613 ops/s
# Warmup Iteration   9: 11403154.484 ops/s
# Warmup Iteration  10: 11507197.671 ops/s
# Warmup Iteration  11: 11558548.700 ops/s
# Warmup Iteration  12: 11467196.713 ops/s
# Warmup Iteration  13: 11561419.883 ops/s
# Warmup Iteration  14: 11554476.628 ops/s
# Warmup Iteration  15: 11621712.314 ops/s
# Warmup Iteration  16: 11553273.458 ops/s
# Warmup Iteration  17: 11752403.257 ops/s
# Warmup Iteration  18: 11768971.417 ops/s
# Warmup Iteration  19: 11707775.114 ops/s
# Warmup Iteration  20: 11663419.581 ops/s
# Warmup Iteration  21: 11699507.027 ops/s
# Warmup Iteration  22: 11737343.391 ops/s
# Warmup Iteration  23: 11680176.147 ops/s
# Warmup Iteration  24: 11472447.990 ops/s
# Warmup Iteration  25: 11710471.101 ops/s
# Warmup Iteration  26: 11667627.845 ops/s
# Warmup Iteration  27: 11635340.094 ops/s
# Warmup Iteration  28: 11712243.837 ops/s
# Warmup Iteration  29: 11687919.236 ops/s
# Warmup Iteration  30: 11684456.573 ops/s
Iteration   1: 11722388.050 ops/s
Iteration   2: 11635451.630 ops/s
Iteration   3: 11769774.163 ops/s
Iteration   4: 11711518.251 ops/s
Iteration   5: 11631014.466 ops/s
Iteration   6: 11718754.695 ops/s
Iteration   7: 11708139.289 ops/s
Iteration   8: 11741548.474 ops/s
Iteration   9: 11682572.241 ops/s
Iteration  10: 11746233.657 ops/s
Iteration  11: 11767747.985 ops/s
Iteration  12: 11763710.115 ops/s
Iteration  13: 11682123.955 ops/s
Iteration  14: 11512778.820 ops/s
Iteration  15: 11749469.340 ops/s
Iteration  16: 11771701.666 ops/s
Iteration  17: 11784928.987 ops/s
Iteration  18: 11745856.937 ops/s
Iteration  19: 11756250.605 ops/s
Iteration  20: 11761529.796 ops/s
Iteration  21: 11567116.196 ops/s
Iteration  22: 11529835.322 ops/s
Iteration  23: 11700407.493 ops/s
Iteration  24: 11755007.605 ops/s
Iteration  25: 11729391.856 ops/s
Iteration  26: 11680559.719 ops/s
Iteration  27: 11678730.850 ops/s
Iteration  28: 11543866.027 ops/s
Iteration  29: 11744469.226 ops/s
Iteration  30: 11713707.937 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_null_safe":
  11700219.512 ±(99.9%) 50359.530 ops/s [Average]
  (min, avg, max) = (11512778.820, 11700219.512, 11784928.987), stdev = 75375.780
  CI (99.9%): [11649859.981, 11750579.042] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_null_safe  thrpt   30  11700219.512 ± 50359.530  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6372565.536 ops/s
# Warmup Iteration   2: 13233290.219 ops/s
# Warmup Iteration   3: 11534523.520 ops/s
# Warmup Iteration   4: 13474898.902 ops/s
# Warmup Iteration   5: 13608182.234 ops/s
# Warmup Iteration   6: 13425641.773 ops/s
# Warmup Iteration   7: 13518051.646 ops/s
# Warmup Iteration   8: 13552146.862 ops/s
# Warmup Iteration   9: 13613138.955 ops/s
# Warmup Iteration  10: 13577112.551 ops/s
# Warmup Iteration  11: 13574905.818 ops/s
# Warmup Iteration  12: 13550037.254 ops/s
# Warmup Iteration  13: 13597944.681 ops/s
# Warmup Iteration  14: 13604469.023 ops/s
# Warmup Iteration  15: 13590651.090 ops/s
# Warmup Iteration  16: 13549611.598 ops/s
# Warmup Iteration  17: 13513218.852 ops/s
# Warmup Iteration  18: 13528108.195 ops/s
# Warmup Iteration  19: 13424578.742 ops/s
# Warmup Iteration  20: 13541836.097 ops/s
# Warmup Iteration  21: 13490221.251 ops/s
# Warmup Iteration  22: 13575575.658 ops/s
# Warmup Iteration  23: 13549142.208 ops/s
# Warmup Iteration  24: 13409696.267 ops/s
# Warmup Iteration  25: 13436315.724 ops/s
# Warmup Iteration  26: 13461131.777 ops/s
# Warmup Iteration  27: 13578049.515 ops/s
# Warmup Iteration  28: 13594982.685 ops/s
# Warmup Iteration  29: 13479741.133 ops/s
# Warmup Iteration  30: 13574729.563 ops/s
Iteration   1: 13573898.711 ops/s
Iteration   2: 13569749.598 ops/s
Iteration   3: 13561324.016 ops/s
Iteration   4: 13529569.795 ops/s
Iteration   5: 13608190.749 ops/s
Iteration   6: 13643025.859 ops/s
Iteration   7: 13604109.656 ops/s
Iteration   8: 13561725.834 ops/s
Iteration   9: 13539853.451 ops/s
Iteration  10: 13333816.796 ops/s
Iteration  11: 13536651.431 ops/s
Iteration  12: 13354667.302 ops/s
Iteration  13: 13590203.017 ops/s
Iteration  14: 13599196.449 ops/s
Iteration  15: 13488949.220 ops/s
Iteration  16: 13513386.225 ops/s
Iteration  17: 13595480.238 ops/s
Iteration  18: 13546130.396 ops/s
Iteration  19: 13511266.817 ops/s
Iteration  20: 13470929.780 ops/s
Iteration  21: 13085429.323 ops/s
Iteration  22: 13602615.264 ops/s
Iteration  23: 13607644.968 ops/s
Iteration  24: 13555546.882 ops/s
Iteration  25: 13561640.671 ops/s
Iteration  26: 13648861.031 ops/s
Iteration  27: 13523639.527 ops/s
Iteration  28: 13499453.877 ops/s
Iteration  29: 13605710.281 ops/s
Iteration  30: 13550496.816 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws":
  13532438.799 ±(99.9%) 73364.784 ops/s [Average]
  (min, avg, max) = (13085429.323, 13532438.799, 13648861.031), stdev = 109808.963
  CI (99.9%): [13459074.016, 13605803.583] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws  thrpt   30  13532438.799 ± 73364.784  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 140008.609 ops/s
# Warmup Iteration   2: 147263.883 ops/s
# Warmup Iteration   3: 148923.487 ops/s
# Warmup Iteration   4: 148232.843 ops/s
# Warmup Iteration   5: 148683.873 ops/s
# Warmup Iteration   6: 149001.175 ops/s
# Warmup Iteration   7: 148732.184 ops/s
# Warmup Iteration   8: 149239.874 ops/s
# Warmup Iteration   9: 151562.251 ops/s
# Warmup Iteration  10: 158687.698 ops/s
# Warmup Iteration  11: 159625.812 ops/s
# Warmup Iteration  12: 158939.772 ops/s
# Warmup Iteration  13: 158869.615 ops/s
# Warmup Iteration  14: 157484.015 ops/s
# Warmup Iteration  15: 157142.279 ops/s
# Warmup Iteration  16: 158107.316 ops/s
# Warmup Iteration  17: 157902.327 ops/s
# Warmup Iteration  18: 158496.540 ops/s
# Warmup Iteration  19: 159294.755 ops/s
# Warmup Iteration  20: 158749.363 ops/s
# Warmup Iteration  21: 158869.283 ops/s
# Warmup Iteration  22: 157277.904 ops/s
# Warmup Iteration  23: 157739.460 ops/s
# Warmup Iteration  24: 157527.131 ops/s
# Warmup Iteration  25: 157836.390 ops/s
# Warmup Iteration  26: 159109.243 ops/s
# Warmup Iteration  27: 158732.057 ops/s
# Warmup Iteration  28: 159289.998 ops/s
# Warmup Iteration  29: 157996.470 ops/s
# Warmup Iteration  30: 157648.021 ops/s
Iteration   1: 157866.439 ops/s
Iteration   2: 157810.760 ops/s
Iteration   3: 157658.238 ops/s
Iteration   4: 160413.571 ops/s
Iteration   5: 156850.797 ops/s
Iteration   6: 158742.733 ops/s
Iteration   7: 159423.589 ops/s
Iteration   8: 157313.450 ops/s
Iteration   9: 160181.344 ops/s
Iteration  10: 158790.194 ops/s
Iteration  11: 158475.660 ops/s
Iteration  12: 158691.886 ops/s
Iteration  13: 157579.253 ops/s
Iteration  14: 159621.778 ops/s
Iteration  15: 156855.854 ops/s
Iteration  16: 159286.996 ops/s
Iteration  17: 157825.220 ops/s
Iteration  18: 157561.864 ops/s
Iteration  19: 156463.157 ops/s
Iteration  20: 158680.562 ops/s
Iteration  21: 158019.378 ops/s
Iteration  22: 158935.148 ops/s
Iteration  23: 158229.305 ops/s
Iteration  24: 159222.994 ops/s
Iteration  25: 156609.533 ops/s
Iteration  26: 160269.254 ops/s
Iteration  27: 160667.926 ops/s
Iteration  28: 156803.182 ops/s
Iteration  29: 158309.931 ops/s
Iteration  30: 159229.220 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws_without_comparator":
  158412.974 ±(99.9%) 782.899 ops/s [Average]
  (min, avg, max) = (156463.157, 158412.974, 160667.926), stdev = 1171.806
  CI (99.9%): [157630.075, 159195.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt       Score     Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  158412.974 ± 782.899  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7262555.433 ops/s
# Warmup Iteration   2: 14592701.457 ops/s
# Warmup Iteration   3: 12317318.600 ops/s
# Warmup Iteration   4: 14632653.458 ops/s
# Warmup Iteration   5: 14473522.516 ops/s
# Warmup Iteration   6: 14608295.458 ops/s
# Warmup Iteration   7: 14634453.230 ops/s
# Warmup Iteration   8: 14644332.744 ops/s
# Warmup Iteration   9: 14671620.426 ops/s
# Warmup Iteration  10: 14622815.337 ops/s
# Warmup Iteration  11: 14552652.297 ops/s
# Warmup Iteration  12: 14549241.856 ops/s
# Warmup Iteration  13: 14574425.432 ops/s
# Warmup Iteration  14: 14539912.568 ops/s
# Warmup Iteration  15: 14603189.769 ops/s
# Warmup Iteration  16: 14655300.991 ops/s
# Warmup Iteration  17: 14793631.781 ops/s
# Warmup Iteration  18: 14758304.816 ops/s
# Warmup Iteration  19: 14837603.606 ops/s
# Warmup Iteration  20: 14709410.534 ops/s
# Warmup Iteration  21: 14683398.368 ops/s
# Warmup Iteration  22: 14822406.691 ops/s
# Warmup Iteration  23: 14623060.974 ops/s
# Warmup Iteration  24: 14814782.909 ops/s
# Warmup Iteration  25: 14863562.878 ops/s
# Warmup Iteration  26: 14811185.535 ops/s
# Warmup Iteration  27: 14811365.782 ops/s
# Warmup Iteration  28: 14826252.791 ops/s
# Warmup Iteration  29: 14788584.847 ops/s
# Warmup Iteration  30: 14784556.345 ops/s
Iteration   1: 14843908.299 ops/s
Iteration   2: 14750255.985 ops/s
Iteration   3: 14834665.339 ops/s
Iteration   4: 14828281.564 ops/s
Iteration   5: 14808833.744 ops/s
Iteration   6: 14672719.724 ops/s
Iteration   7: 14834898.442 ops/s
Iteration   8: 14813157.848 ops/s
Iteration   9: 14824943.743 ops/s
Iteration  10: 14802056.021 ops/s
Iteration  11: 14061198.004 ops/s
Iteration  12: 14842195.198 ops/s
Iteration  13: 14584217.310 ops/s
Iteration  14: 14827297.939 ops/s
Iteration  15: 14809924.028 ops/s
Iteration  16: 14786353.623 ops/s
Iteration  17: 14840269.190 ops/s
Iteration  18: 14863436.192 ops/s
Iteration  19: 14555220.958 ops/s
Iteration  20: 14583779.948 ops/s
Iteration  21: 14888628.181 ops/s
Iteration  22: 14745155.419 ops/s
Iteration  23: 14870166.290 ops/s
Iteration  24: 14741643.041 ops/s
Iteration  25: 14813133.687 ops/s
Iteration  26: 14735540.838 ops/s
Iteration  27: 14842840.562 ops/s
Iteration  28: 14815798.612 ops/s
Iteration  29: 14709782.543 ops/s
Iteration  30: 14783571.119 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_without_comparator":
  14757129.113 ±(99.9%) 104619.623 ops/s [Average]
  (min, avg, max) = (14061198.004, 14757129.113, 14888628.181), stdev = 156589.739
  CI (99.9%): [14652509.490, 14861748.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt         Score        Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_min_without_comparator  thrpt   30  14757129.113 ± 104619.623  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7258321.751 ops/s
# Warmup Iteration   2: 14971694.785 ops/s
# Warmup Iteration   3: 12670416.646 ops/s
# Warmup Iteration   4: 14955171.940 ops/s
# Warmup Iteration   5: 14781530.131 ops/s
# Warmup Iteration   6: 14850650.400 ops/s
# Warmup Iteration   7: 14699434.452 ops/s
# Warmup Iteration   8: 14862225.814 ops/s
# Warmup Iteration   9: 14723333.204 ops/s
# Warmup Iteration  10: 14786338.350 ops/s
# Warmup Iteration  11: 14841600.124 ops/s
# Warmup Iteration  12: 14873004.968 ops/s
# Warmup Iteration  13: 14817845.526 ops/s
# Warmup Iteration  14: 14903306.166 ops/s
# Warmup Iteration  15: 14847709.458 ops/s
# Warmup Iteration  16: 14881151.069 ops/s
# Warmup Iteration  17: 15198723.998 ops/s
# Warmup Iteration  18: 15080863.927 ops/s
# Warmup Iteration  19: 15024404.584 ops/s
# Warmup Iteration  20: 15202267.580 ops/s
# Warmup Iteration  21: 15077835.778 ops/s
# Warmup Iteration  22: 15234825.397 ops/s
# Warmup Iteration  23: 15210173.999 ops/s
# Warmup Iteration  24: 15180281.913 ops/s
# Warmup Iteration  25: 15179690.134 ops/s
# Warmup Iteration  26: 15037244.601 ops/s
# Warmup Iteration  27: 15109768.499 ops/s
# Warmup Iteration  28: 15212990.582 ops/s
# Warmup Iteration  29: 15067218.625 ops/s
# Warmup Iteration  30: 15192812.599 ops/s
Iteration   1: 15203817.056 ops/s
Iteration   2: 15243675.396 ops/s
Iteration   3: 15194360.475 ops/s
Iteration   4: 15180620.525 ops/s
Iteration   5: 15213148.846 ops/s
Iteration   6: 15123457.346 ops/s
Iteration   7: 15286239.003 ops/s
Iteration   8: 15147176.087 ops/s
Iteration   9: 15216789.688 ops/s
Iteration  10: 15319378.475 ops/s
Iteration  11: 15189670.912 ops/s
Iteration  12: 15224063.725 ops/s
Iteration  13: 15118947.080 ops/s
Iteration  14: 15220384.812 ops/s
Iteration  15: 15229468.795 ops/s
Iteration  16: 15173760.877 ops/s
Iteration  17: 15147472.579 ops/s
Iteration  18: 15160319.007 ops/s
Iteration  19: 15056108.486 ops/s
Iteration  20: 15115619.686 ops/s
Iteration  21: 14837606.890 ops/s
Iteration  22: 15159306.334 ops/s
Iteration  23: 15222551.536 ops/s
Iteration  24: 15163867.526 ops/s
Iteration  25: 15171377.607 ops/s
Iteration  26: 15131424.666 ops/s
Iteration  27: 15196480.126 ops/s
Iteration  28: 15126829.274 ops/s
Iteration  29: 15275277.064 ops/s
Iteration  30: 15143433.267 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_newEmpty":
  15173087.772 ±(99.9%) 56491.824 ops/s [Average]
  (min, avg, max) = (14837606.890, 15173087.772, 15319378.475), stdev = 84554.309
  CI (99.9%): [15116595.948, 15229579.595] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_newEmpty  thrpt   30  15173087.772 ± 56491.824  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_newListWithSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_newListWithSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4312065.239 ops/s
# Warmup Iteration   2: 8885518.033 ops/s
# Warmup Iteration   3: 7603938.554 ops/s
# Warmup Iteration   4: 8956992.187 ops/s
# Warmup Iteration   5: 8929639.663 ops/s
# Warmup Iteration   6: 8824139.559 ops/s
# Warmup Iteration   7: 8931121.294 ops/s
# Warmup Iteration   8: 8901495.039 ops/s
# Warmup Iteration   9: 8886975.028 ops/s
# Warmup Iteration  10: 8845567.445 ops/s
# Warmup Iteration  11: 8950105.448 ops/s
# Warmup Iteration  12: 8943934.843 ops/s
# Warmup Iteration  13: 8975234.021 ops/s
# Warmup Iteration  14: 8942864.093 ops/s
# Warmup Iteration  15: 8954801.178 ops/s
# Warmup Iteration  16: 8970018.684 ops/s
# Warmup Iteration  17: 8921827.818 ops/s
# Warmup Iteration  18: 8971641.050 ops/s
# Warmup Iteration  19: 8910602.991 ops/s
# Warmup Iteration  20: 8969085.795 ops/s
# Warmup Iteration  21: 8971024.603 ops/s
# Warmup Iteration  22: 8966012.345 ops/s
# Warmup Iteration  23: 8896728.767 ops/s
# Warmup Iteration  24: 8930670.812 ops/s
# Warmup Iteration  25: 8958728.723 ops/s
# Warmup Iteration  26: 8963799.918 ops/s
# Warmup Iteration  27: 8950607.674 ops/s
# Warmup Iteration  28: 8974231.972 ops/s
# Warmup Iteration  29: 9011370.869 ops/s
# Warmup Iteration  30: 9015552.886 ops/s
Iteration   1: 8936286.772 ops/s
Iteration   2: 8976260.580 ops/s
Iteration   3: 8926017.493 ops/s
Iteration   4: 8968334.890 ops/s
Iteration   5: 8968725.052 ops/s
Iteration   6: 9023163.743 ops/s
Iteration   7: 8999239.494 ops/s
Iteration   8: 8994859.986 ops/s
Iteration   9: 9019013.481 ops/s
Iteration  10: 9012599.372 ops/s
Iteration  11: 8997035.574 ops/s
Iteration  12: 8955714.200 ops/s
Iteration  13: 9006793.112 ops/s
Iteration  14: 8958611.580 ops/s
Iteration  15: 8940728.430 ops/s
Iteration  16: 8903387.979 ops/s
Iteration  17: 8944227.506 ops/s
Iteration  18: 8947382.560 ops/s
Iteration  19: 9027001.130 ops/s
Iteration  20: 8996165.601 ops/s
Iteration  21: 8991831.305 ops/s
Iteration  22: 8953290.720 ops/s
Iteration  23: 8972495.945 ops/s
Iteration  24: 8978143.075 ops/s
Iteration  25: 8998513.850 ops/s
Iteration  26: 8965745.280 ops/s
Iteration  27: 8969738.006 ops/s
Iteration  28: 8959126.337 ops/s
Iteration  29: 8998290.582 ops/s
Iteration  30: 8989689.122 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_newListWithSize":
  8975947.092 ±(99.9%) 20142.112 ops/s [Average]
  (min, avg, max) = (8903387.979, 8975947.092, 9027001.130), stdev = 30147.767
  CI (99.9%): [8955804.980, 8996089.204] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_newListWithSize  thrpt   30  8975947.092 ± 20142.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2570245.022 ops/s
# Warmup Iteration   2: 5329449.508 ops/s
# Warmup Iteration   3: 4501301.684 ops/s
# Warmup Iteration   4: 5301387.253 ops/s
# Warmup Iteration   5: 5328681.504 ops/s
# Warmup Iteration   6: 5320299.471 ops/s
# Warmup Iteration   7: 5284653.892 ops/s
# Warmup Iteration   8: 5324228.263 ops/s
# Warmup Iteration   9: 5266713.540 ops/s
# Warmup Iteration  10: 5322185.041 ops/s
# Warmup Iteration  11: 5328076.255 ops/s
# Warmup Iteration  12: 5302670.069 ops/s
# Warmup Iteration  13: 5291475.436 ops/s
# Warmup Iteration  14: 5324361.230 ops/s
# Warmup Iteration  15: 5262194.796 ops/s
# Warmup Iteration  16: 5321094.225 ops/s
# Warmup Iteration  17: 5314445.664 ops/s
# Warmup Iteration  18: 5373172.111 ops/s
# Warmup Iteration  19: 5384425.436 ops/s
# Warmup Iteration  20: 5351339.712 ops/s
# Warmup Iteration  21: 5368098.173 ops/s
# Warmup Iteration  22: 5363776.267 ops/s
# Warmup Iteration  23: 5344117.931 ops/s
# Warmup Iteration  24: 5386540.808 ops/s
# Warmup Iteration  25: 5375699.786 ops/s
# Warmup Iteration  26: 5378033.409 ops/s
# Warmup Iteration  27: 5372109.966 ops/s
# Warmup Iteration  28: 5305253.839 ops/s
# Warmup Iteration  29: 5356668.955 ops/s
# Warmup Iteration  30: 5353964.989 ops/s
Iteration   1: 5393918.965 ops/s
Iteration   2: 5401350.086 ops/s
Iteration   3: 5283566.608 ops/s
Iteration   4: 5405131.493 ops/s
Iteration   5: 5366747.997 ops/s
Iteration   6: 5369604.146 ops/s
Iteration   7: 5383253.271 ops/s
Iteration   8: 5344044.006 ops/s
Iteration   9: 5403825.799 ops/s
Iteration  10: 5381991.962 ops/s
Iteration  11: 5392912.149 ops/s
Iteration  12: 5390259.767 ops/s
Iteration  13: 5373232.993 ops/s
Iteration  14: 5368832.911 ops/s
Iteration  15: 5381224.410 ops/s
Iteration  16: 5400765.428 ops/s
Iteration  17: 5359138.985 ops/s
Iteration  18: 5380794.289 ops/s
Iteration  19: 5377572.245 ops/s
Iteration  20: 5285033.785 ops/s
Iteration  21: 5364560.552 ops/s
Iteration  22: 5368628.118 ops/s
Iteration  23: 5289709.963 ops/s
Iteration  24: 5413008.143 ops/s
Iteration  25: 5242445.834 ops/s
Iteration  26: 5353623.598 ops/s
Iteration  27: 5372535.816 ops/s
Iteration  28: 5362682.564 ops/s
Iteration  29: 5364269.867 ops/s
Iteration  30: 5376771.763 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfy":
  5365047.917 ±(99.9%) 26669.074 ops/s [Average]
  (min, avg, max) = (5242445.834, 5365047.917, 5413008.143), stdev = 39917.018
  CI (99.9%): [5338378.843, 5391716.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfy  thrpt   30  5365047.917 ± 26669.074  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3809131.598 ops/s
# Warmup Iteration   2: 7778654.544 ops/s
# Warmup Iteration   3: 6563444.872 ops/s
# Warmup Iteration   4: 7753881.958 ops/s
# Warmup Iteration   5: 7766141.728 ops/s
# Warmup Iteration   6: 7722205.658 ops/s
# Warmup Iteration   7: 7751699.071 ops/s
# Warmup Iteration   8: 7764533.195 ops/s
# Warmup Iteration   9: 7738711.677 ops/s
# Warmup Iteration  10: 7753945.365 ops/s
# Warmup Iteration  11: 7787379.788 ops/s
# Warmup Iteration  12: 7783489.515 ops/s
# Warmup Iteration  13: 7747338.742 ops/s
# Warmup Iteration  14: 7773399.381 ops/s
# Warmup Iteration  15: 7751244.126 ops/s
# Warmup Iteration  16: 7712055.332 ops/s
# Warmup Iteration  17: 7867350.204 ops/s
# Warmup Iteration  18: 7824392.635 ops/s
# Warmup Iteration  19: 7786296.436 ops/s
# Warmup Iteration  20: 7847845.196 ops/s
# Warmup Iteration  21: 7797734.763 ops/s
# Warmup Iteration  22: 7795463.520 ops/s
# Warmup Iteration  23: 7882663.223 ops/s
# Warmup Iteration  24: 7853258.224 ops/s
# Warmup Iteration  25: 7878812.538 ops/s
# Warmup Iteration  26: 7805976.722 ops/s
# Warmup Iteration  27: 7870643.589 ops/s
# Warmup Iteration  28: 7808879.010 ops/s
# Warmup Iteration  29: 7763473.068 ops/s
# Warmup Iteration  30: 7872620.999 ops/s
Iteration   1: 7845442.412 ops/s
Iteration   2: 7767540.012 ops/s
Iteration   3: 7828848.513 ops/s
Iteration   4: 7862389.047 ops/s
Iteration   5: 7808065.261 ops/s
Iteration   6: 7749126.183 ops/s
Iteration   7: 7749309.052 ops/s
Iteration   8: 7891041.392 ops/s
Iteration   9: 7838437.329 ops/s
Iteration  10: 7833515.642 ops/s
Iteration  11: 7812562.366 ops/s
Iteration  12: 7772409.146 ops/s
Iteration  13: 7868392.114 ops/s
Iteration  14: 7889917.453 ops/s
Iteration  15: 7890110.668 ops/s
Iteration  16: 7837921.050 ops/s
Iteration  17: 7849494.347 ops/s
Iteration  18: 7844143.162 ops/s
Iteration  19: 7878031.102 ops/s
Iteration  20: 7861845.003 ops/s
Iteration  21: 7777790.301 ops/s
Iteration  22: 7857104.599 ops/s
Iteration  23: 7894805.752 ops/s
Iteration  24: 7859873.113 ops/s
Iteration  25: 7896920.821 ops/s
Iteration  26: 7813915.544 ops/s
Iteration  27: 7884493.975 ops/s
Iteration  28: 7897445.930 ops/s
Iteration  29: 7841807.344 ops/s
Iteration  30: 7903816.313 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfyWith":
  7843550.498 ±(99.9%) 30309.213 ops/s [Average]
  (min, avg, max) = (7749126.183, 7843550.498, 7903816.313), stdev = 45365.407
  CI (99.9%): [7813241.285, 7873859.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  7843550.498 ± 30309.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4111130.406 ops/s
# Warmup Iteration   2: 7000968.596 ops/s
# Warmup Iteration   3: 8100125.846 ops/s
# Warmup Iteration   4: 8207228.061 ops/s
# Warmup Iteration   5: 8138679.342 ops/s
# Warmup Iteration   6: 8144091.057 ops/s
# Warmup Iteration   7: 8177701.952 ops/s
# Warmup Iteration   8: 8220275.485 ops/s
# Warmup Iteration   9: 8116470.469 ops/s
# Warmup Iteration  10: 8201436.214 ops/s
# Warmup Iteration  11: 8060774.117 ops/s
# Warmup Iteration  12: 8192066.529 ops/s
# Warmup Iteration  13: 8218065.287 ops/s
# Warmup Iteration  14: 8174617.856 ops/s
# Warmup Iteration  15: 8122772.371 ops/s
# Warmup Iteration  16: 8180133.788 ops/s
# Warmup Iteration  17: 8218691.591 ops/s
# Warmup Iteration  18: 8229621.177 ops/s
# Warmup Iteration  19: 8142686.829 ops/s
# Warmup Iteration  20: 8251773.988 ops/s
# Warmup Iteration  21: 8262792.280 ops/s
# Warmup Iteration  22: 8258985.547 ops/s
# Warmup Iteration  23: 8283458.008 ops/s
# Warmup Iteration  24: 8062783.256 ops/s
# Warmup Iteration  25: 8299127.625 ops/s
# Warmup Iteration  26: 8288680.454 ops/s
# Warmup Iteration  27: 8165772.534 ops/s
# Warmup Iteration  28: 8240309.434 ops/s
# Warmup Iteration  29: 8251306.175 ops/s
# Warmup Iteration  30: 8183060.047 ops/s
Iteration   1: 8284014.912 ops/s
Iteration   2: 8130741.052 ops/s
Iteration   3: 8254443.603 ops/s
Iteration   4: 8171478.093 ops/s
Iteration   5: 8226602.880 ops/s
Iteration   6: 8287143.589 ops/s
Iteration   7: 8123813.911 ops/s
Iteration   8: 8284010.710 ops/s
Iteration   9: 8125640.339 ops/s
Iteration  10: 8228857.473 ops/s
Iteration  11: 8209531.028 ops/s
Iteration  12: 8248284.770 ops/s
Iteration  13: 8254231.832 ops/s
Iteration  14: 8080855.164 ops/s
Iteration  15: 8181459.813 ops/s
Iteration  16: 8271918.632 ops/s
Iteration  17: 8102945.001 ops/s
Iteration  18: 8300716.843 ops/s
Iteration  19: 8266773.519 ops/s
Iteration  20: 8236865.302 ops/s
Iteration  21: 8253490.046 ops/s
Iteration  22: 8313291.129 ops/s
Iteration  23: 8227151.344 ops/s
Iteration  24: 8218840.568 ops/s
Iteration  25: 8230445.432 ops/s
Iteration  26: 8275765.671 ops/s
Iteration  27: 8247030.797 ops/s
Iteration  28: 8247768.602 ops/s
Iteration  29: 8233857.949 ops/s
Iteration  30: 8275519.260 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_notEmpty":
  8226449.642 ±(99.9%) 40663.647 ops/s [Average]
  (min, avg, max) = (8080855.164, 8226449.642, 8313291.129), stdev = 60863.437
  CI (99.9%): [8185785.995, 8267113.289] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_notEmpty  thrpt   30  8226449.642 ± 40663.647  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1517091.845 ops/s
# Warmup Iteration   2: 3486246.049 ops/s
# Warmup Iteration   3: 2975220.176 ops/s
# Warmup Iteration   4: 3431512.919 ops/s
# Warmup Iteration   5: 3463326.919 ops/s
# Warmup Iteration   6: 3419394.450 ops/s
# Warmup Iteration   7: 3445753.422 ops/s
# Warmup Iteration   8: 3441603.494 ops/s
# Warmup Iteration   9: 3436486.495 ops/s
# Warmup Iteration  10: 3463534.724 ops/s
# Warmup Iteration  11: 3455969.103 ops/s
# Warmup Iteration  12: 3447917.977 ops/s
# Warmup Iteration  13: 3477544.161 ops/s
# Warmup Iteration  14: 3470381.125 ops/s
# Warmup Iteration  15: 3474796.042 ops/s
# Warmup Iteration  16: 3441845.143 ops/s
# Warmup Iteration  17: 3556033.947 ops/s
# Warmup Iteration  18: 3558912.483 ops/s
# Warmup Iteration  19: 3551317.225 ops/s
# Warmup Iteration  20: 3568238.447 ops/s
# Warmup Iteration  21: 3565198.092 ops/s
# Warmup Iteration  22: 3549201.971 ops/s
# Warmup Iteration  23: 3539088.043 ops/s
# Warmup Iteration  24: 3543055.877 ops/s
# Warmup Iteration  25: 3564312.561 ops/s
# Warmup Iteration  26: 3557837.329 ops/s
# Warmup Iteration  27: 3561918.686 ops/s
# Warmup Iteration  28: 3521933.038 ops/s
# Warmup Iteration  29: 3561312.118 ops/s
# Warmup Iteration  30: 3565161.126 ops/s
Iteration   1: 3557272.326 ops/s
Iteration   2: 3536126.318 ops/s
Iteration   3: 3496881.670 ops/s
Iteration   4: 3547512.399 ops/s
Iteration   5: 3553924.589 ops/s
Iteration   6: 3540729.726 ops/s
Iteration   7: 3499973.112 ops/s
Iteration   8: 3525322.447 ops/s
Iteration   9: 3537647.168 ops/s
Iteration  10: 3522264.286 ops/s
Iteration  11: 3535496.564 ops/s
Iteration  12: 3540771.729 ops/s
Iteration  13: 3559049.366 ops/s
Iteration  14: 3551453.150 ops/s
Iteration  15: 3554154.813 ops/s
Iteration  16: 3566884.296 ops/s
Iteration  17: 3544286.488 ops/s
Iteration  18: 3464955.832 ops/s
Iteration  19: 3591786.147 ops/s
Iteration  20: 3575648.162 ops/s
Iteration  21: 3455715.687 ops/s
Iteration  22: 3553190.533 ops/s
Iteration  23: 3551507.946 ops/s
Iteration  24: 3514023.108 ops/s
Iteration  25: 3520279.250 ops/s
Iteration  26: 3565315.757 ops/s
Iteration  27: 3559615.698 ops/s
Iteration  28: 3511505.312 ops/s
Iteration  29: 3572385.302 ops/s
Iteration  30: 3491521.982 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_partition":
  3536573.372 ±(99.9%) 21113.000 ops/s [Average]
  (min, avg, max) = (3455715.687, 3536573.372, 3591786.147), stdev = 31600.947
  CI (99.9%): [3515460.372, 3557686.372] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_partition  thrpt   30  3536573.372 ± 21113.000  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 864453.109 ops/s
# Warmup Iteration   2: 2093020.414 ops/s
# Warmup Iteration   3: 2092680.645 ops/s
# Warmup Iteration   4: 1752834.937 ops/s
# Warmup Iteration   5: 2097714.334 ops/s
# Warmup Iteration   6: 2111158.386 ops/s
# Warmup Iteration   7: 2102042.999 ops/s
# Warmup Iteration   8: 2108660.462 ops/s
# Warmup Iteration   9: 2109346.126 ops/s
# Warmup Iteration  10: 2081944.863 ops/s
# Warmup Iteration  11: 2113429.778 ops/s
# Warmup Iteration  12: 2117425.376 ops/s
# Warmup Iteration  13: 2100056.042 ops/s
# Warmup Iteration  14: 2107597.403 ops/s
# Warmup Iteration  15: 2111630.723 ops/s
# Warmup Iteration  16: 2118408.772 ops/s
# Warmup Iteration  17: 2092756.752 ops/s
# Warmup Iteration  18: 2093803.947 ops/s
# Warmup Iteration  19: 2104940.709 ops/s
# Warmup Iteration  20: 2096677.741 ops/s
# Warmup Iteration  21: 2107244.304 ops/s
# Warmup Iteration  22: 2088204.392 ops/s
# Warmup Iteration  23: 2115168.704 ops/s
# Warmup Iteration  24: 2117345.603 ops/s
# Warmup Iteration  25: 2100142.124 ops/s
# Warmup Iteration  26: 2111362.338 ops/s
# Warmup Iteration  27: 2099900.343 ops/s
# Warmup Iteration  28: 2100939.837 ops/s
# Warmup Iteration  29: 2108599.245 ops/s
# Warmup Iteration  30: 2116756.301 ops/s
Iteration   1: 2111868.827 ops/s
Iteration   2: 2118561.746 ops/s
Iteration   3: 2081179.498 ops/s
Iteration   4: 2108470.199 ops/s
Iteration   5: 2105375.482 ops/s
Iteration   6: 2120169.007 ops/s
Iteration   7: 2083908.696 ops/s
Iteration   8: 2076904.108 ops/s
Iteration   9: 2109264.319 ops/s
Iteration  10: 2120590.449 ops/s
Iteration  11: 2097805.902 ops/s
Iteration  12: 2106385.690 ops/s
Iteration  13: 2110722.553 ops/s
Iteration  14: 2123393.581 ops/s
Iteration  15: 2116509.461 ops/s
Iteration  16: 2111782.674 ops/s
Iteration  17: 2096327.900 ops/s
Iteration  18: 2107878.940 ops/s
Iteration  19: 2113037.996 ops/s
Iteration  20: 2108431.518 ops/s
Iteration  21: 2074623.457 ops/s
Iteration  22: 2112780.168 ops/s
Iteration  23: 2110497.855 ops/s
Iteration  24: 2120662.327 ops/s
Iteration  25: 2110360.821 ops/s
Iteration  26: 2083461.944 ops/s
Iteration  27: 2123863.131 ops/s
Iteration  28: 2108723.800 ops/s
Iteration  29: 2117276.059 ops/s
Iteration  30: 2109460.102 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_partitionWhile":
  2106675.940 ±(99.9%) 9206.633 ops/s [Average]
  (min, avg, max) = (2074623.457, 2106675.940, 2123863.131), stdev = 13780.056
  CI (99.9%): [2097469.308, 2115882.573] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_partitionWhile  thrpt   30  2106675.940 ± 9206.633  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1252301.871 ops/s
# Warmup Iteration   2: 2761805.053 ops/s
# Warmup Iteration   3: 2600660.062 ops/s
# Warmup Iteration   4: 2501532.362 ops/s
# Warmup Iteration   5: 2761882.441 ops/s
# Warmup Iteration   6: 2790105.611 ops/s
# Warmup Iteration   7: 2797025.090 ops/s
# Warmup Iteration   8: 2782292.630 ops/s
# Warmup Iteration   9: 2784257.926 ops/s
# Warmup Iteration  10: 2798401.429 ops/s
# Warmup Iteration  11: 2767168.285 ops/s
# Warmup Iteration  12: 2789721.323 ops/s
# Warmup Iteration  13: 2784375.883 ops/s
# Warmup Iteration  14: 2759131.242 ops/s
# Warmup Iteration  15: 2777706.667 ops/s
# Warmup Iteration  16: 2802111.150 ops/s
# Warmup Iteration  17: 2771104.365 ops/s
# Warmup Iteration  18: 2770630.373 ops/s
# Warmup Iteration  19: 2750513.384 ops/s
# Warmup Iteration  20: 2774055.138 ops/s
# Warmup Iteration  21: 2775174.813 ops/s
# Warmup Iteration  22: 2780882.885 ops/s
# Warmup Iteration  23: 2752497.877 ops/s
# Warmup Iteration  24: 2765146.503 ops/s
# Warmup Iteration  25: 2783445.919 ops/s
# Warmup Iteration  26: 2774650.076 ops/s
# Warmup Iteration  27: 2776470.036 ops/s
# Warmup Iteration  28: 2773743.220 ops/s
# Warmup Iteration  29: 2776698.269 ops/s
# Warmup Iteration  30: 2776084.594 ops/s
Iteration   1: 2801498.344 ops/s
Iteration   2: 2779084.417 ops/s
Iteration   3: 2782680.646 ops/s
Iteration   4: 2775603.335 ops/s
Iteration   5: 2726765.965 ops/s
Iteration   6: 2777164.107 ops/s
Iteration   7: 2731068.129 ops/s
Iteration   8: 2798016.263 ops/s
Iteration   9: 2783059.595 ops/s
Iteration  10: 2729696.072 ops/s
Iteration  11: 2777949.658 ops/s
Iteration  12: 2777392.982 ops/s
Iteration  13: 2763743.944 ops/s
Iteration  14: 2738657.904 ops/s
Iteration  15: 2786637.351 ops/s
Iteration  16: 2778750.074 ops/s
Iteration  17: 2773839.567 ops/s
Iteration  18: 2776595.304 ops/s
Iteration  19: 2776035.777 ops/s
Iteration  20: 2780680.025 ops/s
Iteration  21: 2786819.374 ops/s
Iteration  22: 2769604.561 ops/s
Iteration  23: 2769701.274 ops/s
Iteration  24: 2770891.188 ops/s
Iteration  25: 2771119.158 ops/s
Iteration  26: 2779451.265 ops/s
Iteration  27: 2724720.434 ops/s
Iteration  28: 2775592.271 ops/s
Iteration  29: 2717256.443 ops/s
Iteration  30: 2767772.090 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_partitionWith":
  2768261.584 ±(99.9%) 14751.043 ops/s [Average]
  (min, avg, max) = (2717256.443, 2768261.584, 2801498.344), stdev = 22078.668
  CI (99.9%): [2753510.541, 2783012.626] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_partitionWith  thrpt   30  2768261.584 ± 14751.043  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_randomAccess_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_randomAccess_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 776898.741 ops/s
# Warmup Iteration   2: 801878.191 ops/s
# Warmup Iteration   3: 962030.134 ops/s
# Warmup Iteration   4: 998000.939 ops/s
# Warmup Iteration   5: 1002551.128 ops/s
# Warmup Iteration   6: 997955.329 ops/s
# Warmup Iteration   7: 1003973.167 ops/s
# Warmup Iteration   8: 999963.623 ops/s
# Warmup Iteration   9: 999684.726 ops/s
# Warmup Iteration  10: 1002775.375 ops/s
# Warmup Iteration  11: 1002690.622 ops/s
# Warmup Iteration  12: 993222.798 ops/s
# Warmup Iteration  13: 927585.112 ops/s
# Warmup Iteration  14: 919275.791 ops/s
# Warmup Iteration  15: 1002247.663 ops/s
# Warmup Iteration  16: 1001599.146 ops/s
# Warmup Iteration  17: 1068096.627 ops/s
# Warmup Iteration  18: 1056568.203 ops/s
# Warmup Iteration  19: 1066661.981 ops/s
# Warmup Iteration  20: 1068677.540 ops/s
# Warmup Iteration  21: 1064335.655 ops/s
# Warmup Iteration  22: 1068968.010 ops/s
# Warmup Iteration  23: 1066057.333 ops/s
# Warmup Iteration  24: 1069517.720 ops/s
# Warmup Iteration  25: 1064668.447 ops/s
# Warmup Iteration  26: 1067508.297 ops/s
# Warmup Iteration  27: 1055195.859 ops/s
# Warmup Iteration  28: 1060095.257 ops/s
# Warmup Iteration  29: 1062417.065 ops/s
# Warmup Iteration  30: 1066718.387 ops/s
Iteration   1: 1050408.884 ops/s
Iteration   2: 1037386.990 ops/s
Iteration   3: 1068462.291 ops/s
Iteration   4: 1064448.858 ops/s
Iteration   5: 1069759.120 ops/s
Iteration   6: 1064371.473 ops/s
Iteration   7: 1064694.893 ops/s
Iteration   8: 1064274.009 ops/s
Iteration   9: 1070707.329 ops/s
Iteration  10: 1068641.419 ops/s
Iteration  11: 1073499.816 ops/s
Iteration  12: 1055758.368 ops/s
Iteration  13: 1067425.334 ops/s
Iteration  14: 1062563.054 ops/s
Iteration  15: 1049738.871 ops/s
Iteration  16: 1050761.282 ops/s
Iteration  17: 1061961.193 ops/s
Iteration  18: 1066219.468 ops/s
Iteration  19: 1052915.248 ops/s
Iteration  20: 1064630.139 ops/s
Iteration  21: 1065000.422 ops/s
Iteration  22: 1064358.159 ops/s
Iteration  23: 1061684.168 ops/s
Iteration  24: 1060373.074 ops/s
Iteration  25: 1065947.118 ops/s
Iteration  26: 1063472.435 ops/s
Iteration  27: 1066147.728 ops/s
Iteration  28: 1067530.338 ops/s
Iteration  29: 1066563.630 ops/s
Iteration  30: 1068524.839 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_randomAccess_throws":
  1062607.665 ±(99.9%) 5124.554 ops/s [Average]
  (min, avg, max) = (1037386.990, 1062607.665, 1073499.816), stdev = 7670.191
  CI (99.9%): [1057483.111, 1067732.219] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_randomAccess_throws  thrpt   30  1062607.665 ± 5124.554  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 942929.867 ops/s
# Warmup Iteration   2: 2252699.384 ops/s
# Warmup Iteration   3: 2259906.196 ops/s
# Warmup Iteration   4: 1877866.547 ops/s
# Warmup Iteration   5: 2232194.742 ops/s
# Warmup Iteration   6: 2268272.365 ops/s
# Warmup Iteration   7: 2259002.290 ops/s
# Warmup Iteration   8: 2252568.634 ops/s
# Warmup Iteration   9: 2269886.662 ops/s
# Warmup Iteration  10: 2265893.880 ops/s
# Warmup Iteration  11: 2265529.744 ops/s
# Warmup Iteration  12: 2255294.803 ops/s
# Warmup Iteration  13: 2265715.915 ops/s
# Warmup Iteration  14: 2266761.450 ops/s
# Warmup Iteration  15: 2261334.651 ops/s
# Warmup Iteration  16: 2261740.203 ops/s
# Warmup Iteration  17: 2265393.304 ops/s
# Warmup Iteration  18: 2252441.795 ops/s
# Warmup Iteration  19: 2267103.624 ops/s
# Warmup Iteration  20: 2237731.900 ops/s
# Warmup Iteration  21: 2262311.392 ops/s
# Warmup Iteration  22: 2270312.270 ops/s
# Warmup Iteration  23: 2274303.946 ops/s
# Warmup Iteration  24: 2265892.504 ops/s
# Warmup Iteration  25: 2278070.529 ops/s
# Warmup Iteration  26: 2269447.316 ops/s
# Warmup Iteration  27: 2268728.431 ops/s
# Warmup Iteration  28: 2263148.421 ops/s
# Warmup Iteration  29: 2266798.986 ops/s
# Warmup Iteration  30: 2259576.632 ops/s
Iteration   1: 2220751.620 ops/s
Iteration   2: 2259552.058 ops/s
Iteration   3: 2255442.384 ops/s
Iteration   4: 2260125.335 ops/s
Iteration   5: 2264225.982 ops/s
Iteration   6: 2274932.086 ops/s
Iteration   7: 2264105.953 ops/s
Iteration   8: 2267998.304 ops/s
Iteration   9: 2270423.551 ops/s
Iteration  10: 2260960.110 ops/s
Iteration  11: 2254626.502 ops/s
Iteration  12: 2264230.981 ops/s
Iteration  13: 2268463.754 ops/s
Iteration  14: 2220960.056 ops/s
Iteration  15: 2274227.019 ops/s
Iteration  16: 2249896.766 ops/s
Iteration  17: 2244666.920 ops/s
Iteration  18: 2254646.867 ops/s
Iteration  19: 2262901.513 ops/s
Iteration  20: 2278091.574 ops/s
Iteration  21: 2255411.191 ops/s
Iteration  22: 2260343.123 ops/s
Iteration  23: 2269246.320 ops/s
Iteration  24: 2260598.654 ops/s
Iteration  25: 2258526.306 ops/s
Iteration  26: 2270245.050 ops/s
Iteration  27: 2266182.801 ops/s
Iteration  28: 2273109.296 ops/s
Iteration  29: 2236464.004 ops/s
Iteration  30: 2264114.475 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reduceOptional":
  2259515.685 ±(99.9%) 9223.684 ops/s [Average]
  (min, avg, max) = (2220751.620, 2259515.685, 2278091.574), stdev = 13805.577
  CI (99.9%): [2250292.001, 2268739.369] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reduceOptional  thrpt   30  2259515.685 ± 9223.684  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1602581.015 ops/s
# Warmup Iteration   2: 3557002.709 ops/s
# Warmup Iteration   3: 3016147.620 ops/s
# Warmup Iteration   4: 3585561.472 ops/s
# Warmup Iteration   5: 3547917.730 ops/s
# Warmup Iteration   6: 3554589.874 ops/s
# Warmup Iteration   7: 3549122.172 ops/s
# Warmup Iteration   8: 3561412.267 ops/s
# Warmup Iteration   9: 3510281.977 ops/s
# Warmup Iteration  10: 3555094.080 ops/s
# Warmup Iteration  11: 3519612.462 ops/s
# Warmup Iteration  12: 3569517.386 ops/s
# Warmup Iteration  13: 3543226.394 ops/s
# Warmup Iteration  14: 3553620.709 ops/s
# Warmup Iteration  15: 3555784.181 ops/s
# Warmup Iteration  16: 3532997.474 ops/s
# Warmup Iteration  17: 3566347.952 ops/s
# Warmup Iteration  18: 3574385.279 ops/s
# Warmup Iteration  19: 3567408.494 ops/s
# Warmup Iteration  20: 3555319.063 ops/s
# Warmup Iteration  21: 3573425.044 ops/s
# Warmup Iteration  22: 3525540.895 ops/s
# Warmup Iteration  23: 3543741.818 ops/s
# Warmup Iteration  24: 3519747.403 ops/s
# Warmup Iteration  25: 3539278.018 ops/s
# Warmup Iteration  26: 3548986.556 ops/s
# Warmup Iteration  27: 3533079.485 ops/s
# Warmup Iteration  28: 3570837.716 ops/s
# Warmup Iteration  29: 3568674.079 ops/s
# Warmup Iteration  30: 3551535.725 ops/s
Iteration   1: 3567190.620 ops/s
Iteration   2: 3558968.716 ops/s
Iteration   3: 3570884.126 ops/s
Iteration   4: 3600688.759 ops/s
Iteration   5: 3593002.242 ops/s
Iteration   6: 3550525.883 ops/s
Iteration   7: 3575450.624 ops/s
Iteration   8: 3565848.465 ops/s
Iteration   9: 3572580.210 ops/s
Iteration  10: 3509238.603 ops/s
Iteration  11: 3575387.392 ops/s
Iteration  12: 3552998.705 ops/s
Iteration  13: 3589665.837 ops/s
Iteration  14: 3594058.356 ops/s
Iteration  15: 3580969.580 ops/s
Iteration  16: 3501831.959 ops/s
Iteration  17: 3577397.126 ops/s
Iteration  18: 3573164.311 ops/s
Iteration  19: 3582356.947 ops/s
Iteration  20: 3597933.290 ops/s
Iteration  21: 3588134.793 ops/s
Iteration  22: 3525156.097 ops/s
Iteration  23: 3588681.332 ops/s
Iteration  24: 3592370.323 ops/s
Iteration  25: 3577672.777 ops/s
Iteration  26: 3565177.239 ops/s
Iteration  27: 3551805.586 ops/s
Iteration  28: 3570031.789 ops/s
Iteration  29: 3594883.409 ops/s
Iteration  30: 3580718.239 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reject":
  3570825.778 ±(99.9%) 16219.216 ops/s [Average]
  (min, avg, max) = (3501831.959, 3570825.778, 3600688.759), stdev = 24276.161
  CI (99.9%): [3554606.562, 3587044.994] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reject  thrpt   30  3570825.778 ± 16219.216  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1735550.486 ops/s
# Warmup Iteration   2: 3811539.496 ops/s
# Warmup Iteration   3: 3221397.679 ops/s
# Warmup Iteration   4: 3830635.728 ops/s
# Warmup Iteration   5: 3845994.918 ops/s
# Warmup Iteration   6: 3845819.217 ops/s
# Warmup Iteration   7: 3812920.974 ops/s
# Warmup Iteration   8: 3845509.185 ops/s
# Warmup Iteration   9: 3807210.254 ops/s
# Warmup Iteration  10: 3806057.682 ops/s
# Warmup Iteration  11: 3817115.592 ops/s
# Warmup Iteration  12: 3829501.494 ops/s
# Warmup Iteration  13: 3819946.478 ops/s
# Warmup Iteration  14: 3807673.657 ops/s
# Warmup Iteration  15: 3824487.697 ops/s
# Warmup Iteration  16: 3800701.285 ops/s
# Warmup Iteration  17: 3845481.245 ops/s
# Warmup Iteration  18: 3826437.562 ops/s
# Warmup Iteration  19: 3835757.682 ops/s
# Warmup Iteration  20: 3780093.627 ops/s
# Warmup Iteration  21: 3801816.439 ops/s
# Warmup Iteration  22: 3829756.394 ops/s
# Warmup Iteration  23: 3856153.822 ops/s
# Warmup Iteration  24: 3868459.846 ops/s
# Warmup Iteration  25: 3802169.226 ops/s
# Warmup Iteration  26: 3841540.775 ops/s
# Warmup Iteration  27: 3835504.526 ops/s
# Warmup Iteration  28: 3836808.345 ops/s
# Warmup Iteration  29: 3808210.725 ops/s
# Warmup Iteration  30: 3753175.288 ops/s
Iteration   1: 3848310.250 ops/s
Iteration   2: 3793519.197 ops/s
Iteration   3: 3738532.380 ops/s
Iteration   4: 3862292.675 ops/s
Iteration   5: 3806778.397 ops/s
Iteration   6: 3860700.402 ops/s
Iteration   7: 3813645.532 ops/s
Iteration   8: 3819607.771 ops/s
Iteration   9: 3843830.336 ops/s
Iteration  10: 3833654.587 ops/s
Iteration  11: 3857283.428 ops/s
Iteration  12: 3809141.826 ops/s
Iteration  13: 3829285.689 ops/s
Iteration  14: 3831092.929 ops/s
Iteration  15: 3822361.562 ops/s
Iteration  16: 3865032.558 ops/s
Iteration  17: 3855278.108 ops/s
Iteration  18: 3737421.336 ops/s
Iteration  19: 3850620.708 ops/s
Iteration  20: 3867094.159 ops/s
Iteration  21: 3857460.272 ops/s
Iteration  22: 3875142.201 ops/s
Iteration  23: 3753158.383 ops/s
Iteration  24: 3832452.277 ops/s
Iteration  25: 3807619.259 ops/s
Iteration  26: 3745164.338 ops/s
Iteration  27: 3778156.976 ops/s
Iteration  28: 3845817.921 ops/s
Iteration  29: 3744395.325 ops/s
Iteration  30: 3818192.760 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWith":
  3820101.451 ±(99.9%) 27875.117 ops/s [Average]
  (min, avg, max) = (3737421.336, 3820101.451, 3875142.201), stdev = 41722.166
  CI (99.9%): [3792226.334, 3847976.569] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWith  thrpt   30  3820101.451 ± 27875.117  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1872921.288 ops/s
# Warmup Iteration   2: 4084062.756 ops/s
# Warmup Iteration   3: 3534562.303 ops/s
# Warmup Iteration   4: 4219991.681 ops/s
# Warmup Iteration   5: 4221488.541 ops/s
# Warmup Iteration   6: 4193708.880 ops/s
# Warmup Iteration   7: 4216305.945 ops/s
# Warmup Iteration   8: 4223530.760 ops/s
# Warmup Iteration   9: 4135899.414 ops/s
# Warmup Iteration  10: 4192275.478 ops/s
# Warmup Iteration  11: 4225260.304 ops/s
# Warmup Iteration  12: 4240920.241 ops/s
# Warmup Iteration  13: 4247929.414 ops/s
# Warmup Iteration  14: 4232870.778 ops/s
# Warmup Iteration  15: 4204396.201 ops/s
# Warmup Iteration  16: 4232078.998 ops/s
# Warmup Iteration  17: 4180739.027 ops/s
# Warmup Iteration  18: 4225657.211 ops/s
# Warmup Iteration  19: 4209516.788 ops/s
# Warmup Iteration  20: 4214641.087 ops/s
# Warmup Iteration  21: 4224791.405 ops/s
# Warmup Iteration  22: 4232987.177 ops/s
# Warmup Iteration  23: 4223181.280 ops/s
# Warmup Iteration  24: 4223923.385 ops/s
# Warmup Iteration  25: 4219233.389 ops/s
# Warmup Iteration  26: 4231593.569 ops/s
# Warmup Iteration  27: 4199619.525 ops/s
# Warmup Iteration  28: 4198660.286 ops/s
# Warmup Iteration  29: 4219557.007 ops/s
# Warmup Iteration  30: 4245731.197 ops/s
Iteration   1: 4239064.926 ops/s
Iteration   2: 4176570.793 ops/s
Iteration   3: 4210619.968 ops/s
Iteration   4: 4218246.031 ops/s
Iteration   5: 4209873.836 ops/s
Iteration   6: 4207630.187 ops/s
Iteration   7: 4248006.083 ops/s
Iteration   8: 4188092.300 ops/s
Iteration   9: 4176603.567 ops/s
Iteration  10: 4216178.246 ops/s
Iteration  11: 4208302.175 ops/s
Iteration  12: 4232991.804 ops/s
Iteration  13: 4195620.653 ops/s
Iteration  14: 4142587.241 ops/s
Iteration  15: 4208604.565 ops/s
Iteration  16: 4227185.442 ops/s
Iteration  17: 4144423.351 ops/s
Iteration  18: 4064185.255 ops/s
Iteration  19: 4139967.812 ops/s
Iteration  20: 4187240.303 ops/s
Iteration  21: 4241159.998 ops/s
Iteration  22: 4223469.530 ops/s
Iteration  23: 4233226.702 ops/s
Iteration  24: 4192684.078 ops/s
Iteration  25: 4205466.138 ops/s
Iteration  26: 4207223.566 ops/s
Iteration  27: 4173398.873 ops/s
Iteration  28: 4250520.623 ops/s
Iteration  29: 4233840.949 ops/s
Iteration  30: 4247781.135 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWithIndex":
  4201692.204 ±(99.9%) 26783.695 ops/s [Average]
  (min, avg, max) = (4064185.255, 4201692.204, 4250520.623), stdev = 40088.577
  CI (99.9%): [4174908.509, 4228475.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  4201692.204 ± 26783.695  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2402421.571 ops/s
# Warmup Iteration   2: 5727183.400 ops/s
# Warmup Iteration   3: 4900816.533 ops/s
# Warmup Iteration   4: 5840624.298 ops/s
# Warmup Iteration   5: 5840094.791 ops/s
# Warmup Iteration   6: 5825625.826 ops/s
# Warmup Iteration   7: 5767649.607 ops/s
# Warmup Iteration   8: 5796629.796 ops/s
# Warmup Iteration   9: 5784997.066 ops/s
# Warmup Iteration  10: 5821068.577 ops/s
# Warmup Iteration  11: 5823699.021 ops/s
# Warmup Iteration  12: 5819555.060 ops/s
# Warmup Iteration  13: 5844293.947 ops/s
# Warmup Iteration  14: 5799453.735 ops/s
# Warmup Iteration  15: 5828168.642 ops/s
# Warmup Iteration  16: 5820430.719 ops/s
# Warmup Iteration  17: 5794766.858 ops/s
# Warmup Iteration  18: 5799797.603 ops/s
# Warmup Iteration  19: 5843280.391 ops/s
# Warmup Iteration  20: 5801519.700 ops/s
# Warmup Iteration  21: 5793947.743 ops/s
# Warmup Iteration  22: 5805585.929 ops/s
# Warmup Iteration  23: 5783426.378 ops/s
# Warmup Iteration  24: 5707186.249 ops/s
# Warmup Iteration  25: 5800252.047 ops/s
# Warmup Iteration  26: 5821614.826 ops/s
# Warmup Iteration  27: 5843103.642 ops/s
# Warmup Iteration  28: 5844543.836 ops/s
# Warmup Iteration  29: 5774985.305 ops/s
# Warmup Iteration  30: 5829261.456 ops/s
Iteration   1: 5843267.777 ops/s
Iteration   2: 5752228.400 ops/s
Iteration   3: 5801989.509 ops/s
Iteration   4: 5847226.189 ops/s
Iteration   5: 5836773.870 ops/s
Iteration   6: 5808010.884 ops/s
Iteration   7: 5834788.388 ops/s
Iteration   8: 5815360.121 ops/s
Iteration   9: 5855696.714 ops/s
Iteration  10: 5831321.543 ops/s
Iteration  11: 5845467.009 ops/s
Iteration  12: 5846581.204 ops/s
Iteration  13: 5856296.210 ops/s
Iteration  14: 5821214.072 ops/s
Iteration  15: 5861002.760 ops/s
Iteration  16: 5797216.374 ops/s
Iteration  17: 5817035.865 ops/s
Iteration  18: 5831915.512 ops/s
Iteration  19: 5756681.351 ops/s
Iteration  20: 5741900.403 ops/s
Iteration  21: 5850638.226 ops/s
Iteration  22: 5828652.735 ops/s
Iteration  23: 5871643.588 ops/s
Iteration  24: 5806298.284 ops/s
Iteration  25: 5631450.422 ops/s
Iteration  26: 5826554.737 ops/s
Iteration  27: 5817935.209 ops/s
Iteration  28: 5828691.283 ops/s
Iteration  29: 5841281.520 ops/s
Iteration  30: 5820464.297 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  5817519.482 ±(99.9%) 31192.603 ops/s [Average]
  (min, avg, max) = (5631450.422, 5817519.482, 5871643.588), stdev = 46687.623
  CI (99.9%): [5786326.879, 5848712.085] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  5817519.482 ± 31192.603  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1192249.760 ops/s
# Warmup Iteration   2: 3031793.292 ops/s
# Warmup Iteration   3: 2567793.926 ops/s
# Warmup Iteration   4: 3061719.549 ops/s
# Warmup Iteration   5: 3041304.723 ops/s
# Warmup Iteration   6: 3069723.447 ops/s
# Warmup Iteration   7: 3075229.148 ops/s
# Warmup Iteration   8: 3051776.645 ops/s
# Warmup Iteration   9: 3086798.335 ops/s
# Warmup Iteration  10: 3078448.439 ops/s
# Warmup Iteration  11: 3063922.845 ops/s
# Warmup Iteration  12: 3064962.360 ops/s
# Warmup Iteration  13: 3027362.151 ops/s
# Warmup Iteration  14: 3059034.578 ops/s
# Warmup Iteration  15: 3063702.251 ops/s
# Warmup Iteration  16: 3074742.079 ops/s
# Warmup Iteration  17: 3014512.136 ops/s
# Warmup Iteration  18: 3013623.793 ops/s
# Warmup Iteration  19: 3011955.095 ops/s
# Warmup Iteration  20: 3013222.169 ops/s
# Warmup Iteration  21: 2990741.631 ops/s
# Warmup Iteration  22: 3016598.646 ops/s
# Warmup Iteration  23: 3004657.223 ops/s
# Warmup Iteration  24: 2996319.949 ops/s
# Warmup Iteration  25: 3008738.885 ops/s
# Warmup Iteration  26: 3019955.961 ops/s
# Warmup Iteration  27: 3004148.207 ops/s
# Warmup Iteration  28: 2989964.467 ops/s
# Warmup Iteration  29: 3007302.526 ops/s
# Warmup Iteration  30: 3008220.506 ops/s
Iteration   1: 3017726.532 ops/s
Iteration   2: 2997933.770 ops/s
Iteration   3: 2991117.749 ops/s
Iteration   4: 3001359.952 ops/s
Iteration   5: 2988771.917 ops/s
Iteration   6: 2995130.203 ops/s
Iteration   7: 2997347.491 ops/s
Iteration   8: 3006317.718 ops/s
Iteration   9: 3008170.636 ops/s
Iteration  10: 3011021.916 ops/s
Iteration  11: 2991401.308 ops/s
Iteration  12: 2993460.639 ops/s
Iteration  13: 2993990.132 ops/s
Iteration  14: 3010505.443 ops/s
Iteration  15: 2993849.238 ops/s
Iteration  16: 3004330.047 ops/s
Iteration  17: 3014035.486 ops/s
Iteration  18: 3025155.774 ops/s
Iteration  19: 2984496.364 ops/s
Iteration  20: 3003441.091 ops/s
Iteration  21: 2998106.091 ops/s
Iteration  22: 2980431.517 ops/s
Iteration  23: 2996048.222 ops/s
Iteration  24: 3030538.817 ops/s
Iteration  25: 2990622.736 ops/s
Iteration  26: 3008957.218 ops/s
Iteration  27: 3023394.252 ops/s
Iteration  28: 3016339.281 ops/s
Iteration  29: 3025800.004 ops/s
Iteration  30: 3024447.173 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWith_target":
  3004141.624 ±(99.9%) 8991.009 ops/s [Average]
  (min, avg, max) = (2980431.517, 3004141.624, 3030538.817), stdev = 13457.321
  CI (99.9%): [2995150.615, 3013132.633] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_rejectWith_target  thrpt   30  3004141.624 ± 8991.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 491995.079 ops/s
# Warmup Iteration   2: 1203068.157 ops/s
# Warmup Iteration   3: 1320020.008 ops/s
# Warmup Iteration   4: 1326509.211 ops/s
# Warmup Iteration   5: 1088042.767 ops/s
# Warmup Iteration   6: 1327335.242 ops/s
# Warmup Iteration   7: 1326123.462 ops/s
# Warmup Iteration   8: 1315006.133 ops/s
# Warmup Iteration   9: 1327775.767 ops/s
# Warmup Iteration  10: 1325890.794 ops/s
# Warmup Iteration  11: 1325954.731 ops/s
# Warmup Iteration  12: 1328457.015 ops/s
# Warmup Iteration  13: 1326634.257 ops/s
# Warmup Iteration  14: 1326854.912 ops/s
# Warmup Iteration  15: 1323136.706 ops/s
# Warmup Iteration  16: 1326619.769 ops/s
# Warmup Iteration  17: 1300127.920 ops/s
# Warmup Iteration  18: 1320556.548 ops/s
# Warmup Iteration  19: 1323203.997 ops/s
# Warmup Iteration  20: 1325750.436 ops/s
# Warmup Iteration  21: 1310229.755 ops/s
# Warmup Iteration  22: 1328961.683 ops/s
# Warmup Iteration  23: 1323060.852 ops/s
# Warmup Iteration  24: 1314666.158 ops/s
# Warmup Iteration  25: 1312113.278 ops/s
# Warmup Iteration  26: 1314950.835 ops/s
# Warmup Iteration  27: 1316122.611 ops/s
# Warmup Iteration  28: 1326272.154 ops/s
# Warmup Iteration  29: 1326048.549 ops/s
# Warmup Iteration  30: 1326725.807 ops/s
Iteration   1: 1326378.372 ops/s
Iteration   2: 1323473.295 ops/s
Iteration   3: 1320784.632 ops/s
Iteration   4: 1318567.433 ops/s
Iteration   5: 1322247.443 ops/s
Iteration   6: 1329950.865 ops/s
Iteration   7: 1282980.672 ops/s
Iteration   8: 1329478.463 ops/s
Iteration   9: 1325302.915 ops/s
Iteration  10: 1328099.026 ops/s
Iteration  11: 1322438.719 ops/s
Iteration  12: 1327686.094 ops/s
Iteration  13: 1330934.719 ops/s
Iteration  14: 1326449.809 ops/s
Iteration  15: 1302766.173 ops/s
Iteration  16: 1327197.231 ops/s
Iteration  17: 1326607.576 ops/s
Iteration  18: 1281584.575 ops/s
Iteration  19: 1326495.324 ops/s
Iteration  20: 1305105.698 ops/s
Iteration  21: 1323734.835 ops/s
Iteration  22: 1306130.193 ops/s
Iteration  23: 1323015.724 ops/s
Iteration  24: 1329290.149 ops/s
Iteration  25: 1322589.387 ops/s
Iteration  26: 1332096.100 ops/s
Iteration  27: 1324736.930 ops/s
Iteration  28: 1316934.970 ops/s
Iteration  29: 1329322.709 ops/s
Iteration  30: 1321251.493 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeAll":
  1320454.384 ±(99.9%) 8451.730 ops/s [Average]
  (min, avg, max) = (1281584.575, 1320454.384, 1332096.100), stdev = 12650.153
  CI (99.9%): [1312002.654, 1328906.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeAll  thrpt   30  1320454.384 ± 8451.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 425685.161 ops/s
# Warmup Iteration   2: 885888.453 ops/s
# Warmup Iteration   3: 978116.147 ops/s
# Warmup Iteration   4: 992388.364 ops/s
# Warmup Iteration   5: 820804.071 ops/s
# Warmup Iteration   6: 994489.482 ops/s
# Warmup Iteration   7: 991489.769 ops/s
# Warmup Iteration   8: 988994.403 ops/s
# Warmup Iteration   9: 993598.947 ops/s
# Warmup Iteration  10: 995551.280 ops/s
# Warmup Iteration  11: 993340.114 ops/s
# Warmup Iteration  12: 992539.065 ops/s
# Warmup Iteration  13: 989464.948 ops/s
# Warmup Iteration  14: 982668.114 ops/s
# Warmup Iteration  15: 990260.766 ops/s
# Warmup Iteration  16: 989769.166 ops/s
# Warmup Iteration  17: 992178.249 ops/s
# Warmup Iteration  18: 994190.949 ops/s
# Warmup Iteration  19: 985998.858 ops/s
# Warmup Iteration  20: 994415.627 ops/s
# Warmup Iteration  21: 991623.443 ops/s
# Warmup Iteration  22: 992241.860 ops/s
# Warmup Iteration  23: 997536.271 ops/s
# Warmup Iteration  24: 995010.570 ops/s
# Warmup Iteration  25: 985370.486 ops/s
# Warmup Iteration  26: 986991.336 ops/s
# Warmup Iteration  27: 993235.489 ops/s
# Warmup Iteration  28: 993041.856 ops/s
# Warmup Iteration  29: 994407.240 ops/s
# Warmup Iteration  30: 992582.317 ops/s
Iteration   1: 990355.525 ops/s
Iteration   2: 987592.715 ops/s
Iteration   3: 990076.860 ops/s
Iteration   4: 992944.372 ops/s
Iteration   5: 992173.978 ops/s
Iteration   6: 995235.959 ops/s
Iteration   7: 984819.561 ops/s
Iteration   8: 989348.107 ops/s
Iteration   9: 987748.156 ops/s
Iteration  10: 990763.275 ops/s
Iteration  11: 991958.780 ops/s
Iteration  12: 976315.414 ops/s
Iteration  13: 995187.010 ops/s
Iteration  14: 993497.505 ops/s
Iteration  15: 954892.085 ops/s
Iteration  16: 992717.672 ops/s
Iteration  17: 991583.143 ops/s
Iteration  18: 987647.131 ops/s
Iteration  19: 977646.568 ops/s
Iteration  20: 974118.418 ops/s
Iteration  21: 997621.427 ops/s
Iteration  22: 991631.653 ops/s
Iteration  23: 989066.206 ops/s
Iteration  24: 995660.611 ops/s
Iteration  25: 994318.418 ops/s
Iteration  26: 991547.477 ops/s
Iteration  27: 995891.460 ops/s
Iteration  28: 981768.948 ops/s
Iteration  29: 996521.499 ops/s
Iteration  30: 979305.749 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeAllIterable":
  988331.856 ±(99.9%) 5889.259 ops/s [Average]
  (min, avg, max) = (954892.085, 988331.856, 997621.427), stdev = 8814.766
  CI (99.9%): [982442.597, 994221.115] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeAllIterable  thrpt   30  988331.856 ± 5889.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3666852.047 ops/s
# Warmup Iteration   2: 8070103.405 ops/s
# Warmup Iteration   3: 6721227.308 ops/s
# Warmup Iteration   4: 7961819.758 ops/s
# Warmup Iteration   5: 7965483.811 ops/s
# Warmup Iteration   6: 7989019.779 ops/s
# Warmup Iteration   7: 7959876.870 ops/s
# Warmup Iteration   8: 7897627.883 ops/s
# Warmup Iteration   9: 8019285.350 ops/s
# Warmup Iteration  10: 8026086.062 ops/s
# Warmup Iteration  11: 8000750.661 ops/s
# Warmup Iteration  12: 8019314.890 ops/s
# Warmup Iteration  13: 8015420.560 ops/s
# Warmup Iteration  14: 7908821.383 ops/s
# Warmup Iteration  15: 7994677.406 ops/s
# Warmup Iteration  16: 7977127.322 ops/s
# Warmup Iteration  17: 8099903.550 ops/s
# Warmup Iteration  18: 8080163.562 ops/s
# Warmup Iteration  19: 8113310.206 ops/s
# Warmup Iteration  20: 8120522.775 ops/s
# Warmup Iteration  21: 8031658.455 ops/s
# Warmup Iteration  22: 8118501.547 ops/s
# Warmup Iteration  23: 8106148.070 ops/s
# Warmup Iteration  24: 8132548.098 ops/s
# Warmup Iteration  25: 8110915.649 ops/s
# Warmup Iteration  26: 8086682.262 ops/s
# Warmup Iteration  27: 8110228.736 ops/s
# Warmup Iteration  28: 8128225.677 ops/s
# Warmup Iteration  29: 8134623.453 ops/s
# Warmup Iteration  30: 8046461.492 ops/s
Iteration   1: 8102200.200 ops/s
Iteration   2: 8124512.968 ops/s
Iteration   3: 7917045.410 ops/s
Iteration   4: 8109367.209 ops/s
Iteration   5: 8158632.738 ops/s
Iteration   6: 8017439.113 ops/s
Iteration   7: 8137946.989 ops/s
Iteration   8: 8116377.178 ops/s
Iteration   9: 7959495.002 ops/s
Iteration  10: 8116586.752 ops/s
Iteration  11: 8097662.507 ops/s
Iteration  12: 8138750.702 ops/s
Iteration  13: 8088671.008 ops/s
Iteration  14: 8011158.152 ops/s
Iteration  15: 8099782.483 ops/s
Iteration  16: 8098332.894 ops/s
Iteration  17: 8086146.839 ops/s
Iteration  18: 7918392.620 ops/s
Iteration  19: 8132064.737 ops/s
Iteration  20: 8024815.304 ops/s
Iteration  21: 8065224.421 ops/s
Iteration  22: 8034693.488 ops/s
Iteration  23: 8109007.632 ops/s
Iteration  24: 8111967.765 ops/s
Iteration  25: 7993476.178 ops/s
Iteration  26: 8076786.970 ops/s
Iteration  27: 8054153.931 ops/s
Iteration  28: 8088682.613 ops/s
Iteration  29: 8100861.201 ops/s
Iteration  30: 8145999.712 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeIf":
  8074541.157 ±(99.9%) 42620.946 ops/s [Average]
  (min, avg, max) = (7917045.410, 8074541.157, 8158632.738), stdev = 63793.030
  CI (99.9%): [8031920.211, 8117162.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeIf  thrpt   30  8074541.157 ± 42620.946  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2278717.077 ops/s
# Warmup Iteration   2: 5038142.560 ops/s
# Warmup Iteration   3: 4279922.691 ops/s
# Warmup Iteration   4: 5003210.572 ops/s
# Warmup Iteration   5: 5045405.432 ops/s
# Warmup Iteration   6: 4994035.236 ops/s
# Warmup Iteration   7: 5038146.440 ops/s
# Warmup Iteration   8: 4959755.561 ops/s
# Warmup Iteration   9: 5016681.264 ops/s
# Warmup Iteration  10: 5044637.141 ops/s
# Warmup Iteration  11: 5035085.787 ops/s
# Warmup Iteration  12: 5035891.716 ops/s
# Warmup Iteration  13: 5021893.425 ops/s
# Warmup Iteration  14: 5062949.734 ops/s
# Warmup Iteration  15: 4985839.768 ops/s
# Warmup Iteration  16: 5019991.284 ops/s
# Warmup Iteration  17: 5110352.811 ops/s
# Warmup Iteration  18: 5111898.171 ops/s
# Warmup Iteration  19: 5031049.409 ops/s
# Warmup Iteration  20: 5100955.079 ops/s
# Warmup Iteration  21: 5066237.582 ops/s
# Warmup Iteration  22: 5130497.165 ops/s
# Warmup Iteration  23: 5107459.555 ops/s
# Warmup Iteration  24: 5073473.974 ops/s
# Warmup Iteration  25: 5120092.669 ops/s
# Warmup Iteration  26: 5082737.453 ops/s
# Warmup Iteration  27: 5092461.007 ops/s
# Warmup Iteration  28: 5012823.586 ops/s
# Warmup Iteration  29: 5034428.659 ops/s
# Warmup Iteration  30: 5074947.305 ops/s
Iteration   1: 5082045.129 ops/s
Iteration   2: 5100702.431 ops/s
Iteration   3: 5091660.894 ops/s
Iteration   4: 5094506.945 ops/s
Iteration   5: 5045516.986 ops/s
Iteration   6: 5038564.041 ops/s
Iteration   7: 5089087.708 ops/s
Iteration   8: 5089470.476 ops/s
Iteration   9: 5107609.306 ops/s
Iteration  10: 5039099.174 ops/s
Iteration  11: 5118744.036 ops/s
Iteration  12: 5046024.560 ops/s
Iteration  13: 5113509.202 ops/s
Iteration  14: 5084581.899 ops/s
Iteration  15: 5052365.400 ops/s
Iteration  16: 5078253.771 ops/s
Iteration  17: 5075519.790 ops/s
Iteration  18: 5043982.885 ops/s
Iteration  19: 5095547.921 ops/s
Iteration  20: 5015212.494 ops/s
Iteration  21: 5113792.601 ops/s
Iteration  22: 5106194.090 ops/s
Iteration  23: 5102985.566 ops/s
Iteration  24: 5095109.516 ops/s
Iteration  25: 5078188.489 ops/s
Iteration  26: 5081056.409 ops/s
Iteration  27: 5116625.612 ops/s
Iteration  28: 5081143.027 ops/s
Iteration  29: 5010049.941 ops/s
Iteration  30: 5092050.831 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeIfWith":
  5079306.704 ±(99.9%) 19839.139 ops/s [Average]
  (min, avg, max) = (5010049.941, 5079306.704, 5118744.036), stdev = 29694.292
  CI (99.9%): [5059467.565, 5099145.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeIfWith  thrpt   30  5079306.704 ± 19839.139  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3727216.751 ops/s
# Warmup Iteration   2: 8033160.728 ops/s
# Warmup Iteration   3: 6808824.705 ops/s
# Warmup Iteration   4: 7997248.220 ops/s
# Warmup Iteration   5: 8051028.396 ops/s
# Warmup Iteration   6: 8043229.227 ops/s
# Warmup Iteration   7: 8068951.657 ops/s
# Warmup Iteration   8: 8094202.088 ops/s
# Warmup Iteration   9: 8093101.781 ops/s
# Warmup Iteration  10: 8017559.979 ops/s
# Warmup Iteration  11: 8072441.955 ops/s
# Warmup Iteration  12: 8013776.695 ops/s
# Warmup Iteration  13: 8092562.426 ops/s
# Warmup Iteration  14: 8059559.824 ops/s
# Warmup Iteration  15: 8074299.322 ops/s
# Warmup Iteration  16: 8015755.270 ops/s
# Warmup Iteration  17: 8079402.418 ops/s
# Warmup Iteration  18: 8099254.668 ops/s
# Warmup Iteration  19: 8106831.499 ops/s
# Warmup Iteration  20: 8113194.401 ops/s
# Warmup Iteration  21: 8070017.853 ops/s
# Warmup Iteration  22: 8094696.761 ops/s
# Warmup Iteration  23: 8107057.070 ops/s
# Warmup Iteration  24: 8082091.869 ops/s
# Warmup Iteration  25: 8114640.970 ops/s
# Warmup Iteration  26: 8109367.620 ops/s
# Warmup Iteration  27: 8121291.913 ops/s
# Warmup Iteration  28: 8103843.700 ops/s
# Warmup Iteration  29: 8124912.952 ops/s
# Warmup Iteration  30: 8095601.638 ops/s
Iteration   1: 8104703.236 ops/s
Iteration   2: 8024946.850 ops/s
Iteration   3: 7875790.603 ops/s
Iteration   4: 8063671.665 ops/s
Iteration   5: 8104242.272 ops/s
Iteration   6: 8014903.889 ops/s
Iteration   7: 8093907.942 ops/s
Iteration   8: 8087131.019 ops/s
Iteration   9: 8026551.927 ops/s
Iteration  10: 7993410.720 ops/s
Iteration  11: 8048738.947 ops/s
Iteration  12: 8114830.102 ops/s
Iteration  13: 8086180.662 ops/s
Iteration  14: 8116857.587 ops/s
Iteration  15: 8112721.204 ops/s
Iteration  16: 8048840.473 ops/s
Iteration  17: 8124846.790 ops/s
Iteration  18: 8093895.899 ops/s
Iteration  19: 8106400.991 ops/s
Iteration  20: 8114164.893 ops/s
Iteration  21: 8105618.276 ops/s
Iteration  22: 7866423.726 ops/s
Iteration  23: 8115198.087 ops/s
Iteration  24: 8116436.872 ops/s
Iteration  25: 8081519.989 ops/s
Iteration  26: 8094997.115 ops/s
Iteration  27: 8018630.167 ops/s
Iteration  28: 8116147.968 ops/s
Iteration  29: 8147242.292 ops/s
Iteration  30: 8113219.306 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeIndex":
  8071072.382 ±(99.9%) 44404.707 ops/s [Average]
  (min, avg, max) = (7866423.726, 8071072.382, 8147242.292), stdev = 66462.880
  CI (99.9%): [8026667.675, 8115477.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeIndex  thrpt   30  8071072.382 ± 44404.707  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5668573.081 ops/s
# Warmup Iteration   2: 11772184.645 ops/s
# Warmup Iteration   3: 9943577.858 ops/s
# Warmup Iteration   4: 11644401.472 ops/s
# Warmup Iteration   5: 11660290.393 ops/s
# Warmup Iteration   6: 11643596.775 ops/s
# Warmup Iteration   7: 11629328.291 ops/s
# Warmup Iteration   8: 11546670.604 ops/s
# Warmup Iteration   9: 11638697.509 ops/s
# Warmup Iteration  10: 11591194.385 ops/s
# Warmup Iteration  11: 11584342.401 ops/s
# Warmup Iteration  12: 11673639.064 ops/s
# Warmup Iteration  13: 11718783.359 ops/s
# Warmup Iteration  14: 11722134.715 ops/s
# Warmup Iteration  15: 11630072.107 ops/s
# Warmup Iteration  16: 11618365.374 ops/s
# Warmup Iteration  17: 11726807.135 ops/s
# Warmup Iteration  18: 11754058.760 ops/s
# Warmup Iteration  19: 11747011.340 ops/s
# Warmup Iteration  20: 11724450.255 ops/s
# Warmup Iteration  21: 11691531.896 ops/s
# Warmup Iteration  22: 11585920.763 ops/s
# Warmup Iteration  23: 11715864.636 ops/s
# Warmup Iteration  24: 11703742.307 ops/s
# Warmup Iteration  25: 11729353.640 ops/s
# Warmup Iteration  26: 11575235.496 ops/s
# Warmup Iteration  27: 11728273.870 ops/s
# Warmup Iteration  28: 11736885.340 ops/s
# Warmup Iteration  29: 11582312.430 ops/s
# Warmup Iteration  30: 11731725.504 ops/s
Iteration   1: 11803845.262 ops/s
Iteration   2: 11749055.227 ops/s
Iteration   3: 11810809.248 ops/s
Iteration   4: 11789987.786 ops/s
Iteration   5: 11740505.392 ops/s
Iteration   6: 11722310.189 ops/s
Iteration   7: 11823316.202 ops/s
Iteration   8: 11675153.358 ops/s
Iteration   9: 11736374.667 ops/s
Iteration  10: 11603250.410 ops/s
Iteration  11: 11698517.198 ops/s
Iteration  12: 11760944.224 ops/s
Iteration  13: 11751552.857 ops/s
Iteration  14: 11715885.440 ops/s
Iteration  15: 11690784.024 ops/s
Iteration  16: 11580145.820 ops/s
Iteration  17: 11523555.474 ops/s
Iteration  18: 11710955.402 ops/s
Iteration  19: 11706987.461 ops/s
Iteration  20: 11647080.929 ops/s
Iteration  21: 11558653.015 ops/s
Iteration  22: 11634772.397 ops/s
Iteration  23: 11679985.259 ops/s
Iteration  24: 11690702.513 ops/s
Iteration  25: 11471551.848 ops/s
Iteration  26: 11706328.533 ops/s
Iteration  27: 11742475.832 ops/s
Iteration  28: 11664779.237 ops/s
Iteration  29: 11764379.074 ops/s
Iteration  30: 11709366.852 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeObject":
  11695467.038 ±(99.9%) 55622.470 ops/s [Average]
  (min, avg, max) = (11471551.848, 11695467.038, 11823316.202), stdev = 83253.100
  CI (99.9%): [11639844.568, 11751089.507] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_removeObject  thrpt   30  11695467.038 ± 55622.470  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2840859.494 ops/s
# Warmup Iteration   2: 6716118.158 ops/s
# Warmup Iteration   3: 6083524.376 ops/s
# Warmup Iteration   4: 6281864.840 ops/s
# Warmup Iteration   5: 6764092.591 ops/s
# Warmup Iteration   6: 6720513.467 ops/s
# Warmup Iteration   7: 6732410.041 ops/s
# Warmup Iteration   8: 6756699.118 ops/s
# Warmup Iteration   9: 6620562.497 ops/s
# Warmup Iteration  10: 6678933.779 ops/s
# Warmup Iteration  11: 6733246.213 ops/s
# Warmup Iteration  12: 6767604.667 ops/s
# Warmup Iteration  13: 6727471.984 ops/s
# Warmup Iteration  14: 6661596.445 ops/s
# Warmup Iteration  15: 6693439.706 ops/s
# Warmup Iteration  16: 6694150.370 ops/s
# Warmup Iteration  17: 6740537.531 ops/s
# Warmup Iteration  18: 6736867.526 ops/s
# Warmup Iteration  19: 6693909.911 ops/s
# Warmup Iteration  20: 6759682.962 ops/s
# Warmup Iteration  21: 6768882.480 ops/s
# Warmup Iteration  22: 6787540.286 ops/s
# Warmup Iteration  23: 6758395.250 ops/s
# Warmup Iteration  24: 6724406.034 ops/s
# Warmup Iteration  25: 6765480.078 ops/s
# Warmup Iteration  26: 6745861.913 ops/s
# Warmup Iteration  27: 6682449.004 ops/s
# Warmup Iteration  28: 6698952.590 ops/s
# Warmup Iteration  29: 6711873.046 ops/s
# Warmup Iteration  30: 6773364.286 ops/s
Iteration   1: 6730792.721 ops/s
Iteration   2: 6759865.562 ops/s
Iteration   3: 6681171.072 ops/s
Iteration   4: 6754267.418 ops/s
Iteration   5: 6743833.817 ops/s
Iteration   6: 6564552.669 ops/s
Iteration   7: 6779037.690 ops/s
Iteration   8: 6774532.726 ops/s
Iteration   9: 6742775.935 ops/s
Iteration  10: 6769220.292 ops/s
Iteration  11: 6672068.961 ops/s
Iteration  12: 6795881.382 ops/s
Iteration  13: 6755095.320 ops/s
Iteration  14: 6780021.608 ops/s
Iteration  15: 6630223.845 ops/s
Iteration  16: 6694833.440 ops/s
Iteration  17: 6783418.691 ops/s
Iteration  18: 6795619.058 ops/s
Iteration  19: 6706360.517 ops/s
Iteration  20: 6780996.512 ops/s
Iteration  21: 6819465.342 ops/s
Iteration  22: 6772096.694 ops/s
Iteration  23: 6774559.011 ops/s
Iteration  24: 6752459.179 ops/s
Iteration  25: 6770163.001 ops/s
Iteration  26: 6758673.313 ops/s
Iteration  27: 6767040.545 ops/s
Iteration  28: 6755548.783 ops/s
Iteration  29: 6736276.883 ops/s
Iteration  30: 6751514.977 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_replaceAll":
  6745078.899 ±(99.9%) 35149.206 ops/s [Average]
  (min, avg, max) = (6564552.669, 6745078.899, 6819465.342), stdev = 52609.681
  CI (99.9%): [6709929.693, 6780228.105] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_replaceAll  thrpt   30  6745078.899 ± 35149.206  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 300123.291 ops/s
# Warmup Iteration   2: 904900.031 ops/s
# Warmup Iteration   3: 1063927.864 ops/s
# Warmup Iteration   4: 1071395.848 ops/s
# Warmup Iteration   5: 893781.207 ops/s
# Warmup Iteration   6: 1072969.834 ops/s
# Warmup Iteration   7: 1073905.689 ops/s
# Warmup Iteration   8: 1068674.494 ops/s
# Warmup Iteration   9: 1058229.276 ops/s
# Warmup Iteration  10: 1076640.295 ops/s
# Warmup Iteration  11: 1074202.679 ops/s
# Warmup Iteration  12: 1066783.576 ops/s
# Warmup Iteration  13: 1055163.503 ops/s
# Warmup Iteration  14: 1065101.555 ops/s
# Warmup Iteration  15: 1058936.421 ops/s
# Warmup Iteration  16: 1065277.789 ops/s
# Warmup Iteration  17: 1072095.223 ops/s
# Warmup Iteration  18: 1063374.613 ops/s
# Warmup Iteration  19: 1073018.346 ops/s
# Warmup Iteration  20: 1074033.021 ops/s
# Warmup Iteration  21: 1040125.888 ops/s
# Warmup Iteration  22: 1074777.052 ops/s
# Warmup Iteration  23: 1070064.603 ops/s
# Warmup Iteration  24: 1061497.992 ops/s
# Warmup Iteration  25: 1070752.706 ops/s
# Warmup Iteration  26: 1072755.727 ops/s
# Warmup Iteration  27: 1073889.881 ops/s
# Warmup Iteration  28: 1078637.309 ops/s
# Warmup Iteration  29: 1074988.025 ops/s
# Warmup Iteration  30: 1074516.755 ops/s
Iteration   1: 1072294.875 ops/s
Iteration   2: 1066390.300 ops/s
Iteration   3: 1074899.604 ops/s
Iteration   4: 1063117.049 ops/s
Iteration   5: 1075096.062 ops/s
Iteration   6: 1057592.759 ops/s
Iteration   7: 1069517.952 ops/s
Iteration   8: 1068446.607 ops/s
Iteration   9: 1073260.321 ops/s
Iteration  10: 1072905.652 ops/s
Iteration  11: 1067526.692 ops/s
Iteration  12: 1062814.288 ops/s
Iteration  13: 1061617.303 ops/s
Iteration  14: 1078861.306 ops/s
Iteration  15: 1075563.507 ops/s
Iteration  16: 1074794.236 ops/s
Iteration  17: 1056924.832 ops/s
Iteration  18: 1068625.284 ops/s
Iteration  19: 1071348.240 ops/s
Iteration  20: 1064171.054 ops/s
Iteration  21: 1077412.863 ops/s
Iteration  22: 1074251.874 ops/s
Iteration  23: 1074713.289 ops/s
Iteration  24: 1078934.684 ops/s
Iteration  25: 1071742.897 ops/s
Iteration  26: 1051158.594 ops/s
Iteration  27: 1073005.575 ops/s
Iteration  28: 1066822.876 ops/s
Iteration  29: 1066255.996 ops/s
Iteration  30: 1069026.428 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_retainAll":
  1069303.100 ±(99.9%) 4495.661 ops/s [Average]
  (min, avg, max) = (1051158.594, 1069303.100, 1078934.684), stdev = 6728.894
  CI (99.9%): [1064807.439, 1073798.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_retainAll  thrpt   30  1069303.100 ± 4495.661  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 499431.214 ops/s
# Warmup Iteration   2: 971666.158 ops/s
# Warmup Iteration   3: 1115424.325 ops/s
# Warmup Iteration   4: 1122255.500 ops/s
# Warmup Iteration   5: 1125909.563 ops/s
# Warmup Iteration   6: 930088.341 ops/s
# Warmup Iteration   7: 1122050.795 ops/s
# Warmup Iteration   8: 1125584.818 ops/s
# Warmup Iteration   9: 1124973.224 ops/s
# Warmup Iteration  10: 1113282.834 ops/s
# Warmup Iteration  11: 1122842.583 ops/s
# Warmup Iteration  12: 1124670.459 ops/s
# Warmup Iteration  13: 1122704.811 ops/s
# Warmup Iteration  14: 1128340.706 ops/s
# Warmup Iteration  15: 1116901.990 ops/s
# Warmup Iteration  16: 1123508.306 ops/s
# Warmup Iteration  17: 1124619.008 ops/s
# Warmup Iteration  18: 1126054.012 ops/s
# Warmup Iteration  19: 1128116.150 ops/s
# Warmup Iteration  20: 1127809.376 ops/s
# Warmup Iteration  21: 1123184.514 ops/s
# Warmup Iteration  22: 1127347.733 ops/s
# Warmup Iteration  23: 1117824.735 ops/s
# Warmup Iteration  24: 1119695.087 ops/s
# Warmup Iteration  25: 1116994.265 ops/s
# Warmup Iteration  26: 1117745.021 ops/s
# Warmup Iteration  27: 1114841.722 ops/s
# Warmup Iteration  28: 1118267.330 ops/s
# Warmup Iteration  29: 1120167.914 ops/s
# Warmup Iteration  30: 1123013.383 ops/s
Iteration   1: 1123982.820 ops/s
Iteration   2: 1120950.682 ops/s
Iteration   3: 1119065.208 ops/s
Iteration   4: 1124879.859 ops/s
Iteration   5: 1122469.108 ops/s
Iteration   6: 1128778.213 ops/s
Iteration   7: 1124539.434 ops/s
Iteration   8: 1126010.188 ops/s
Iteration   9: 1120229.868 ops/s
Iteration  10: 1127935.172 ops/s
Iteration  11: 1122170.737 ops/s
Iteration  12: 1122863.272 ops/s
Iteration  13: 1131132.267 ops/s
Iteration  14: 1106293.882 ops/s
Iteration  15: 1119008.321 ops/s
Iteration  16: 1126800.697 ops/s
Iteration  17: 1125745.762 ops/s
Iteration  18: 1123866.730 ops/s
Iteration  19: 1115158.908 ops/s
Iteration  20: 1110724.287 ops/s
Iteration  21: 1124721.734 ops/s
Iteration  22: 1125818.863 ops/s
Iteration  23: 1123468.901 ops/s
Iteration  24: 1123901.978 ops/s
Iteration  25: 1126067.782 ops/s
Iteration  26: 1108254.734 ops/s
Iteration  27: 1117402.681 ops/s
Iteration  28: 1126480.380 ops/s
Iteration  29: 1121275.808 ops/s
Iteration  30: 1121894.765 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_retainAllIterable":
  1122063.101 ±(99.9%) 3840.370 ops/s [Average]
  (min, avg, max) = (1106293.882, 1122063.101, 1131132.267), stdev = 5748.085
  CI (99.9%): [1118222.732, 1125903.471] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_retainAllIterable  thrpt   30  1122063.101 ± 3840.370  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4708214.236 ops/s
# Warmup Iteration   2: 9623052.522 ops/s
# Warmup Iteration   3: 8165002.609 ops/s
# Warmup Iteration   4: 9604869.512 ops/s
# Warmup Iteration   5: 9567927.972 ops/s
# Warmup Iteration   6: 9572050.869 ops/s
# Warmup Iteration   7: 9550997.122 ops/s
# Warmup Iteration   8: 9639953.113 ops/s
# Warmup Iteration   9: 9598052.136 ops/s
# Warmup Iteration  10: 9575268.682 ops/s
# Warmup Iteration  11: 9559813.586 ops/s
# Warmup Iteration  12: 9528106.871 ops/s
# Warmup Iteration  13: 9564630.486 ops/s
# Warmup Iteration  14: 9561184.374 ops/s
# Warmup Iteration  15: 9579116.606 ops/s
# Warmup Iteration  16: 9535320.895 ops/s
# Warmup Iteration  17: 9665665.149 ops/s
# Warmup Iteration  18: 9651321.287 ops/s
# Warmup Iteration  19: 9644265.121 ops/s
# Warmup Iteration  20: 9676873.446 ops/s
# Warmup Iteration  21: 9643849.420 ops/s
# Warmup Iteration  22: 9575323.875 ops/s
# Warmup Iteration  23: 9585308.162 ops/s
# Warmup Iteration  24: 9688699.803 ops/s
# Warmup Iteration  25: 9656249.516 ops/s
# Warmup Iteration  26: 9697888.910 ops/s
# Warmup Iteration  27: 9597489.801 ops/s
# Warmup Iteration  28: 9662787.969 ops/s
# Warmup Iteration  29: 9683834.727 ops/s
# Warmup Iteration  30: 9550289.961 ops/s
Iteration   1: 9631902.020 ops/s
Iteration   2: 9676966.495 ops/s
Iteration   3: 9635488.014 ops/s
Iteration   4: 9643713.406 ops/s
Iteration   5: 9637207.743 ops/s
Iteration   6: 9386815.940 ops/s
Iteration   7: 9636533.590 ops/s
Iteration   8: 9607159.625 ops/s
Iteration   9: 9546339.683 ops/s
Iteration  10: 9651504.796 ops/s
Iteration  11: 9637891.938 ops/s
Iteration  12: 9677953.536 ops/s
Iteration  13: 9666569.961 ops/s
Iteration  14: 9695760.525 ops/s
Iteration  15: 9661358.057 ops/s
Iteration  16: 9673821.208 ops/s
Iteration  17: 9565853.542 ops/s
Iteration  18: 9670337.085 ops/s
Iteration  19: 9676239.891 ops/s
Iteration  20: 9571121.700 ops/s
Iteration  21: 9689079.443 ops/s
Iteration  22: 9716858.014 ops/s
Iteration  23: 9723203.230 ops/s
Iteration  24: 9592343.645 ops/s
Iteration  25: 9706174.102 ops/s
Iteration  26: 9681602.056 ops/s
Iteration  27: 9734250.601 ops/s
Iteration  28: 9635206.505 ops/s
Iteration  29: 9680046.518 ops/s
Iteration  30: 9607973.238 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEach":
  9643909.204 ±(99.9%) 44664.217 ops/s [Average]
  (min, avg, max) = (9386815.940, 9643909.204, 9734250.601), stdev = 66851.302
  CI (99.9%): [9599244.987, 9688573.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEach  thrpt   30  9643909.204 ± 44664.217  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4429956.333 ops/s
# Warmup Iteration   2: 9327461.347 ops/s
# Warmup Iteration   3: 7869842.524 ops/s
# Warmup Iteration   4: 9365070.021 ops/s
# Warmup Iteration   5: 9418651.664 ops/s
# Warmup Iteration   6: 9468017.764 ops/s
# Warmup Iteration   7: 9443620.639 ops/s
# Warmup Iteration   8: 9443269.365 ops/s
# Warmup Iteration   9: 9397151.698 ops/s
# Warmup Iteration  10: 9487688.807 ops/s
# Warmup Iteration  11: 9242127.640 ops/s
# Warmup Iteration  12: 9482105.289 ops/s
# Warmup Iteration  13: 9436960.410 ops/s
# Warmup Iteration  14: 9529450.228 ops/s
# Warmup Iteration  15: 9487563.389 ops/s
# Warmup Iteration  16: 9461939.586 ops/s
# Warmup Iteration  17: 9552211.864 ops/s
# Warmup Iteration  18: 9494446.512 ops/s
# Warmup Iteration  19: 9509724.827 ops/s
# Warmup Iteration  20: 9480802.529 ops/s
# Warmup Iteration  21: 9523157.884 ops/s
# Warmup Iteration  22: 9480378.925 ops/s
# Warmup Iteration  23: 9499894.844 ops/s
# Warmup Iteration  24: 9542821.301 ops/s
# Warmup Iteration  25: 9399792.119 ops/s
# Warmup Iteration  26: 9518741.094 ops/s
# Warmup Iteration  27: 9498734.022 ops/s
# Warmup Iteration  28: 9502277.206 ops/s
# Warmup Iteration  29: 9422143.321 ops/s
# Warmup Iteration  30: 9556209.445 ops/s
Iteration   1: 9576184.198 ops/s
Iteration   2: 9525848.004 ops/s
Iteration   3: 9564378.995 ops/s
Iteration   4: 9546628.970 ops/s
Iteration   5: 9537529.651 ops/s
Iteration   6: 9495975.433 ops/s
Iteration   7: 9491402.875 ops/s
Iteration   8: 9535344.581 ops/s
Iteration   9: 9512542.381 ops/s
Iteration  10: 9574586.017 ops/s
Iteration  11: 9501997.647 ops/s
Iteration  12: 9525634.978 ops/s
Iteration  13: 9564020.791 ops/s
Iteration  14: 9520433.427 ops/s
Iteration  15: 9536985.942 ops/s
Iteration  16: 9451418.839 ops/s
Iteration  17: 9499116.151 ops/s
Iteration  18: 9512272.072 ops/s
Iteration  19: 9519299.262 ops/s
Iteration  20: 9348076.942 ops/s
Iteration  21: 9471478.314 ops/s
Iteration  22: 9419672.566 ops/s
Iteration  23: 9500409.742 ops/s
Iteration  24: 9497662.021 ops/s
Iteration  25: 9391165.334 ops/s
Iteration  26: 9487508.261 ops/s
Iteration  27: 9524043.566 ops/s
Iteration  28: 9508665.813 ops/s
Iteration  29: 9465468.836 ops/s
Iteration  30: 9501646.560 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEachWithIndex":
  9503579.939 ±(99.9%) 33864.555 ops/s [Average]
  (min, avg, max) = (9348076.942, 9503579.939, 9576184.198), stdev = 50686.876
  CI (99.9%): [9469715.384, 9537444.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  9503579.939 ± 33864.555  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56955317.712 ops/s
# Warmup Iteration   2: 108126583.145 ops/s
# Warmup Iteration   3: 95794474.106 ops/s
# Warmup Iteration   4: 111183105.525 ops/s
# Warmup Iteration   5: 111267412.819 ops/s
# Warmup Iteration   6: 111768158.891 ops/s
# Warmup Iteration   7: 111448905.034 ops/s
# Warmup Iteration   8: 111567792.548 ops/s
# Warmup Iteration   9: 110735497.807 ops/s
# Warmup Iteration  10: 111165210.750 ops/s
# Warmup Iteration  11: 110972809.158 ops/s
# Warmup Iteration  12: 111232557.106 ops/s
# Warmup Iteration  13: 111020655.620 ops/s
# Warmup Iteration  14: 111142567.779 ops/s
# Warmup Iteration  15: 110159775.426 ops/s
# Warmup Iteration  16: 109648256.180 ops/s
# Warmup Iteration  17: 111439375.290 ops/s
# Warmup Iteration  18: 112181927.309 ops/s
# Warmup Iteration  19: 111868068.337 ops/s
# Warmup Iteration  20: 112844728.576 ops/s
# Warmup Iteration  21: 112715414.945 ops/s
# Warmup Iteration  22: 112613542.449 ops/s
# Warmup Iteration  23: 113129436.144 ops/s
# Warmup Iteration  24: 112255597.463 ops/s
# Warmup Iteration  25: 112622959.382 ops/s
# Warmup Iteration  26: 112680603.930 ops/s
# Warmup Iteration  27: 112313345.501 ops/s
# Warmup Iteration  28: 111982568.150 ops/s
# Warmup Iteration  29: 111298243.330 ops/s
# Warmup Iteration  30: 112205058.382 ops/s
Iteration   1: 111899597.679 ops/s
Iteration   2: 111428200.767 ops/s
Iteration   3: 110142992.829 ops/s
Iteration   4: 111829164.884 ops/s
Iteration   5: 112607065.429 ops/s
Iteration   6: 111539853.817 ops/s
Iteration   7: 110597497.057 ops/s
Iteration   8: 111997965.098 ops/s
Iteration   9: 112220404.736 ops/s
Iteration  10: 112533038.858 ops/s
Iteration  11: 112359221.558 ops/s
Iteration  12: 112035718.102 ops/s
Iteration  13: 112925371.604 ops/s
Iteration  14: 112995594.944 ops/s
Iteration  15: 112755064.328 ops/s
Iteration  16: 113115158.434 ops/s
Iteration  17: 112997984.637 ops/s
Iteration  18: 112884028.033 ops/s
Iteration  19: 113050467.873 ops/s
Iteration  20: 113535042.305 ops/s
Iteration  21: 112168834.521 ops/s
Iteration  22: 111109020.627 ops/s
Iteration  23: 111898259.808 ops/s
Iteration  24: 112904103.683 ops/s
Iteration  25: 112730644.223 ops/s
Iteration  26: 112663362.948 ops/s
Iteration  27: 112800148.302 ops/s
Iteration  28: 112383116.057 ops/s
Iteration  29: 112201027.531 ops/s
Iteration  30: 112113917.044 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList":
  112280728.924 ±(99.9%) 508875.249 ops/s [Average]
  (min, avg, max) = (110142992.829, 112280728.924, 113535042.305), stdev = 761660.575
  CI (99.9%): [111771853.675, 112789604.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt          Score        Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList  thrpt   30  112280728.924 ± 508875.249  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEach_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEach_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34848068.768 ops/s
# Warmup Iteration   2: 66019167.815 ops/s
# Warmup Iteration   3: 60341666.166 ops/s
# Warmup Iteration   4: 70709322.327 ops/s
# Warmup Iteration   5: 70876783.219 ops/s
# Warmup Iteration   6: 70373412.351 ops/s
# Warmup Iteration   7: 70850112.399 ops/s
# Warmup Iteration   8: 71346212.578 ops/s
# Warmup Iteration   9: 70859709.483 ops/s
# Warmup Iteration  10: 72129998.579 ops/s
# Warmup Iteration  11: 71898512.972 ops/s
# Warmup Iteration  12: 71462672.703 ops/s
# Warmup Iteration  13: 70454761.898 ops/s
# Warmup Iteration  14: 70530827.226 ops/s
# Warmup Iteration  15: 71094026.700 ops/s
# Warmup Iteration  16: 71301228.066 ops/s
# Warmup Iteration  17: 69774098.989 ops/s
# Warmup Iteration  18: 70061229.106 ops/s
# Warmup Iteration  19: 69902405.527 ops/s
# Warmup Iteration  20: 69353629.986 ops/s
# Warmup Iteration  21: 70699626.915 ops/s
# Warmup Iteration  22: 70487777.380 ops/s
# Warmup Iteration  23: 70413577.418 ops/s
# Warmup Iteration  24: 70323059.741 ops/s
# Warmup Iteration  25: 70587963.136 ops/s
# Warmup Iteration  26: 70359634.947 ops/s
# Warmup Iteration  27: 70795091.584 ops/s
# Warmup Iteration  28: 70543345.286 ops/s
# Warmup Iteration  29: 70924731.354 ops/s
# Warmup Iteration  30: 70922301.712 ops/s
Iteration   1: 70183189.396 ops/s
Iteration   2: 69844744.414 ops/s
Iteration   3: 70669592.801 ops/s
Iteration   4: 70529687.143 ops/s
Iteration   5: 69550404.073 ops/s
Iteration   6: 70603072.240 ops/s
Iteration   7: 70089022.594 ops/s
Iteration   8: 66843948.242 ops/s
Iteration   9: 69966098.831 ops/s
Iteration  10: 70825479.598 ops/s
Iteration  11: 70088578.767 ops/s
Iteration  12: 70010725.498 ops/s
Iteration  13: 70273086.028 ops/s
Iteration  14: 68943534.607 ops/s
Iteration  15: 69777336.562 ops/s
Iteration  16: 70641948.755 ops/s
Iteration  17: 70525356.697 ops/s
Iteration  18: 70286349.039 ops/s
Iteration  19: 70336522.999 ops/s
Iteration  20: 70919922.095 ops/s
Iteration  21: 70384475.965 ops/s
Iteration  22: 70721141.485 ops/s
Iteration  23: 70536808.752 ops/s
Iteration  24: 70552208.509 ops/s
Iteration  25: 70150621.989 ops/s
Iteration  26: 69971970.713 ops/s
Iteration  27: 70239121.371 ops/s
Iteration  28: 70654425.205 ops/s
Iteration  29: 69487696.114 ops/s
Iteration  30: 71064947.238 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEach_emptyList":
  70155733.924 ±(99.9%) 517819.375 ops/s [Average]
  (min, avg, max) = (66843948.242, 70155733.924, 71064947.238), stdev = 775047.721
  CI (99.9%): [69637914.550, 70673553.299] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt         Score        Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseForEach_emptyList  thrpt   30  70155733.924 ± 517819.375  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3474086.209 ops/s
# Warmup Iteration   2: 7753487.012 ops/s
# Warmup Iteration   3: 6496214.024 ops/s
# Warmup Iteration   4: 7741152.679 ops/s
# Warmup Iteration   5: 7728427.342 ops/s
# Warmup Iteration   6: 7768799.302 ops/s
# Warmup Iteration   7: 7744901.289 ops/s
# Warmup Iteration   8: 7715405.613 ops/s
# Warmup Iteration   9: 7725988.969 ops/s
# Warmup Iteration  10: 7661641.640 ops/s
# Warmup Iteration  11: 7649278.468 ops/s
# Warmup Iteration  12: 7725945.175 ops/s
# Warmup Iteration  13: 7721172.143 ops/s
# Warmup Iteration  14: 7680598.250 ops/s
# Warmup Iteration  15: 7651347.328 ops/s
# Warmup Iteration  16: 7775727.141 ops/s
# Warmup Iteration  17: 7744901.086 ops/s
# Warmup Iteration  18: 7742048.593 ops/s
# Warmup Iteration  19: 7705349.436 ops/s
# Warmup Iteration  20: 7706481.573 ops/s
# Warmup Iteration  21: 7626675.759 ops/s
# Warmup Iteration  22: 7680025.699 ops/s
# Warmup Iteration  23: 7737489.298 ops/s
# Warmup Iteration  24: 7681231.543 ops/s
# Warmup Iteration  25: 7669880.800 ops/s
# Warmup Iteration  26: 7750830.300 ops/s
# Warmup Iteration  27: 7696248.138 ops/s
# Warmup Iteration  28: 7699331.680 ops/s
# Warmup Iteration  29: 7740485.723 ops/s
# Warmup Iteration  30: 7668428.936 ops/s
Iteration   1: 7738252.216 ops/s
Iteration   2: 7725123.459 ops/s
Iteration   3: 7637437.221 ops/s
Iteration   4: 7760272.850 ops/s
Iteration   5: 7717025.287 ops/s
Iteration   6: 7713515.294 ops/s
Iteration   7: 7676126.758 ops/s
Iteration   8: 7671456.413 ops/s
Iteration   9: 7759262.151 ops/s
Iteration  10: 7726315.878 ops/s
Iteration  11: 7720657.814 ops/s
Iteration  12: 7619147.534 ops/s
Iteration  13: 7696892.892 ops/s
Iteration  14: 7594725.932 ops/s
Iteration  15: 7727659.856 ops/s
Iteration  16: 7729652.982 ops/s
Iteration  17: 7650798.908 ops/s
Iteration  18: 7634181.864 ops/s
Iteration  19: 7727186.777 ops/s
Iteration  20: 7724918.164 ops/s
Iteration  21: 7683494.586 ops/s
Iteration  22: 7670814.621 ops/s
Iteration  23: 7657846.691 ops/s
Iteration  24: 7657534.500 ops/s
Iteration  25: 7632995.034 ops/s
Iteration  26: 7737120.896 ops/s
Iteration  27: 7798179.962 ops/s
Iteration  28: 7672828.414 ops/s
Iteration  29: 7749061.708 ops/s
Iteration  30: 7740445.113 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseThis":
  7698364.393 ±(99.9%) 32454.120 ops/s [Average]
  (min, avg, max) = (7594725.932, 7698364.393, 7798179.962), stdev = 48575.802
  CI (99.9%): [7665910.273, 7730818.512] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_reverseThis  thrpt   30  7698364.393 ± 32454.120  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1028390.311 ops/s
# Warmup Iteration   2: 2253824.998 ops/s
# Warmup Iteration   3: 1934030.498 ops/s
# Warmup Iteration   4: 2297780.010 ops/s
# Warmup Iteration   5: 2289625.601 ops/s
# Warmup Iteration   6: 2290208.157 ops/s
# Warmup Iteration   7: 2293860.947 ops/s
# Warmup Iteration   8: 2291432.332 ops/s
# Warmup Iteration   9: 2286895.175 ops/s
# Warmup Iteration  10: 2298175.734 ops/s
# Warmup Iteration  11: 2298425.163 ops/s
# Warmup Iteration  12: 2296434.563 ops/s
# Warmup Iteration  13: 2279765.544 ops/s
# Warmup Iteration  14: 2294843.971 ops/s
# Warmup Iteration  15: 2277894.814 ops/s
# Warmup Iteration  16: 2286797.770 ops/s
# Warmup Iteration  17: 2272493.387 ops/s
# Warmup Iteration  18: 2286780.709 ops/s
# Warmup Iteration  19: 2287147.525 ops/s
# Warmup Iteration  20: 2284375.349 ops/s
# Warmup Iteration  21: 2294790.885 ops/s
# Warmup Iteration  22: 2256464.994 ops/s
# Warmup Iteration  23: 2271337.716 ops/s
# Warmup Iteration  24: 2299842.412 ops/s
# Warmup Iteration  25: 2281960.049 ops/s
# Warmup Iteration  26: 2277649.463 ops/s
# Warmup Iteration  27: 2284137.764 ops/s
# Warmup Iteration  28: 2290444.296 ops/s
# Warmup Iteration  29: 2291310.643 ops/s
# Warmup Iteration  30: 2262242.446 ops/s
Iteration   1: 2292176.242 ops/s
Iteration   2: 2261613.335 ops/s
Iteration   3: 2290109.398 ops/s
Iteration   4: 2272212.533 ops/s
Iteration   5: 2263789.590 ops/s
Iteration   6: 2292893.378 ops/s
Iteration   7: 2291510.147 ops/s
Iteration   8: 2293908.940 ops/s
Iteration   9: 2291746.453 ops/s
Iteration  10: 2282310.956 ops/s
Iteration  11: 2292466.464 ops/s
Iteration  12: 2268405.644 ops/s
Iteration  13: 2286666.109 ops/s
Iteration  14: 2300084.639 ops/s
Iteration  15: 2285263.986 ops/s
Iteration  16: 2283188.589 ops/s
Iteration  17: 2241288.951 ops/s
Iteration  18: 2280909.225 ops/s
Iteration  19: 2270202.884 ops/s
Iteration  20: 2294331.158 ops/s
Iteration  21: 2263470.745 ops/s
Iteration  22: 2268773.768 ops/s
Iteration  23: 2301881.147 ops/s
Iteration  24: 2291876.433 ops/s
Iteration  25: 2288730.594 ops/s
Iteration  26: 2304194.446 ops/s
Iteration  27: 2309128.587 ops/s
Iteration  28: 2286063.004 ops/s
Iteration  29: 2292720.502 ops/s
Iteration  30: 2290396.858 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_select":
  2284410.490 ±(99.9%) 9906.593 ops/s [Average]
  (min, avg, max) = (2241288.951, 2284410.490, 2309128.587), stdev = 14827.723
  CI (99.9%): [2274503.897, 2294317.083] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_select  thrpt   30  2284410.490 ± 9906.593  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3997854.154 ops/s
# Warmup Iteration   2: 8118748.384 ops/s
# Warmup Iteration   3: 7178021.202 ops/s
# Warmup Iteration   4: 8318795.018 ops/s
# Warmup Iteration   5: 8313007.584 ops/s
# Warmup Iteration   6: 8315170.551 ops/s
# Warmup Iteration   7: 8368599.714 ops/s
# Warmup Iteration   8: 8348617.627 ops/s
# Warmup Iteration   9: 8266492.449 ops/s
# Warmup Iteration  10: 8280507.762 ops/s
# Warmup Iteration  11: 8375006.338 ops/s
# Warmup Iteration  12: 8376956.551 ops/s
# Warmup Iteration  13: 8388366.971 ops/s
# Warmup Iteration  14: 8338310.118 ops/s
# Warmup Iteration  15: 8415569.997 ops/s
# Warmup Iteration  16: 8324062.561 ops/s
# Warmup Iteration  17: 8399463.930 ops/s
# Warmup Iteration  18: 8337565.171 ops/s
# Warmup Iteration  19: 8351643.707 ops/s
# Warmup Iteration  20: 8375274.831 ops/s
# Warmup Iteration  21: 8391679.022 ops/s
# Warmup Iteration  22: 8380314.009 ops/s
# Warmup Iteration  23: 8375274.236 ops/s
# Warmup Iteration  24: 8326120.519 ops/s
# Warmup Iteration  25: 8319769.190 ops/s
# Warmup Iteration  26: 8366505.109 ops/s
# Warmup Iteration  27: 8323695.097 ops/s
# Warmup Iteration  28: 8371150.775 ops/s
# Warmup Iteration  29: 8319887.346 ops/s
# Warmup Iteration  30: 8376880.721 ops/s
Iteration   1: 8428258.974 ops/s
Iteration   2: 8409858.180 ops/s
Iteration   3: 8407625.930 ops/s
Iteration   4: 8304427.240 ops/s
Iteration   5: 8252100.018 ops/s
Iteration   6: 8349774.747 ops/s
Iteration   7: 8178733.543 ops/s
Iteration   8: 8360240.357 ops/s
Iteration   9: 8289014.910 ops/s
Iteration  10: 8354607.884 ops/s
Iteration  11: 8364241.477 ops/s
Iteration  12: 8425666.888 ops/s
Iteration  13: 8423319.143 ops/s
Iteration  14: 8436110.012 ops/s
Iteration  15: 8374074.711 ops/s
Iteration  16: 8313998.693 ops/s
Iteration  17: 8376541.533 ops/s
Iteration  18: 8401134.585 ops/s
Iteration  19: 8269303.913 ops/s
Iteration  20: 8336004.253 ops/s
Iteration  21: 8339561.051 ops/s
Iteration  22: 8370600.704 ops/s
Iteration  23: 8275897.274 ops/s
Iteration  24: 8063383.481 ops/s
Iteration  25: 8317738.954 ops/s
Iteration  26: 8344083.330 ops/s
Iteration  27: 8258795.419 ops/s
Iteration  28: 8359364.488 ops/s
Iteration  29: 8332577.449 ops/s
Iteration  30: 8385123.377 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectAndRejectWith":
  8336738.751 ±(99.9%) 52987.032 ops/s [Average]
  (min, avg, max) = (8063383.481, 8336738.751, 8436110.012), stdev = 79308.501
  CI (99.9%): [8283751.719, 8389725.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  8336738.751 ± 52987.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 368655.346 ops/s
# Warmup Iteration   2: 710801.233 ops/s
# Warmup Iteration   3: 777281.083 ops/s
# Warmup Iteration   4: 789851.164 ops/s
# Warmup Iteration   5: 689010.349 ops/s
# Warmup Iteration   6: 759912.732 ops/s
# Warmup Iteration   7: 794198.442 ops/s
# Warmup Iteration   8: 784528.087 ops/s
# Warmup Iteration   9: 790458.387 ops/s
# Warmup Iteration  10: 788710.142 ops/s
# Warmup Iteration  11: 787896.991 ops/s
# Warmup Iteration  12: 790974.527 ops/s
# Warmup Iteration  13: 793457.105 ops/s
# Warmup Iteration  14: 792884.244 ops/s
# Warmup Iteration  15: 790766.846 ops/s
# Warmup Iteration  16: 791239.033 ops/s
# Warmup Iteration  17: 787304.567 ops/s
# Warmup Iteration  18: 787635.811 ops/s
# Warmup Iteration  19: 788023.315 ops/s
# Warmup Iteration  20: 791763.810 ops/s
# Warmup Iteration  21: 790113.587 ops/s
# Warmup Iteration  22: 786159.371 ops/s
# Warmup Iteration  23: 792780.074 ops/s
# Warmup Iteration  24: 791181.134 ops/s
# Warmup Iteration  25: 783250.621 ops/s
# Warmup Iteration  26: 785668.136 ops/s
# Warmup Iteration  27: 791958.588 ops/s
# Warmup Iteration  28: 786397.302 ops/s
# Warmup Iteration  29: 790666.632 ops/s
# Warmup Iteration  30: 783684.329 ops/s
Iteration   1: 787602.912 ops/s
Iteration   2: 792142.076 ops/s
Iteration   3: 792939.072 ops/s
Iteration   4: 788727.219 ops/s
Iteration   5: 792007.048 ops/s
Iteration   6: 773436.346 ops/s
Iteration   7: 792255.010 ops/s
Iteration   8: 790942.374 ops/s
Iteration   9: 789073.166 ops/s
Iteration  10: 787499.098 ops/s
Iteration  11: 781739.755 ops/s
Iteration  12: 787338.574 ops/s
Iteration  13: 795058.097 ops/s
Iteration  14: 794474.012 ops/s
Iteration  15: 793016.461 ops/s
Iteration  16: 795102.460 ops/s
Iteration  17: 778527.297 ops/s
Iteration  18: 789099.227 ops/s
Iteration  19: 789158.756 ops/s
Iteration  20: 784956.336 ops/s
Iteration  21: 786887.724 ops/s
Iteration  22: 789768.534 ops/s
Iteration  23: 787868.573 ops/s
Iteration  24: 790190.789 ops/s
Iteration  25: 783849.376 ops/s
Iteration  26: 790023.765 ops/s
Iteration  27: 789452.565 ops/s
Iteration  28: 789997.720 ops/s
Iteration  29: 788700.038 ops/s
Iteration  30: 791379.659 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectInstancesOf":
  788773.801 ±(99.9%) 3132.816 ops/s [Average]
  (min, avg, max) = (773436.346, 788773.801, 795102.460), stdev = 4689.052
  CI (99.9%): [785640.985, 791906.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  788773.801 ± 3132.816  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1055502.587 ops/s
# Warmup Iteration   2: 2323154.605 ops/s
# Warmup Iteration   3: 1972621.455 ops/s
# Warmup Iteration   4: 2320738.395 ops/s
# Warmup Iteration   5: 2342958.833 ops/s
# Warmup Iteration   6: 2346576.395 ops/s
# Warmup Iteration   7: 2339431.301 ops/s
# Warmup Iteration   8: 2326683.962 ops/s
# Warmup Iteration   9: 2345733.815 ops/s
# Warmup Iteration  10: 2352720.280 ops/s
# Warmup Iteration  11: 2354689.554 ops/s
# Warmup Iteration  12: 2347431.059 ops/s
# Warmup Iteration  13: 2334930.615 ops/s
# Warmup Iteration  14: 2345592.545 ops/s
# Warmup Iteration  15: 2341978.655 ops/s
# Warmup Iteration  16: 2345871.238 ops/s
# Warmup Iteration  17: 2284204.187 ops/s
# Warmup Iteration  18: 2336871.994 ops/s
# Warmup Iteration  19: 2319834.412 ops/s
# Warmup Iteration  20: 2341665.331 ops/s
# Warmup Iteration  21: 2315647.710 ops/s
# Warmup Iteration  22: 2326340.074 ops/s
# Warmup Iteration  23: 2347958.334 ops/s
# Warmup Iteration  24: 2333042.727 ops/s
# Warmup Iteration  25: 2332326.303 ops/s
# Warmup Iteration  26: 2329257.531 ops/s
# Warmup Iteration  27: 2330847.013 ops/s
# Warmup Iteration  28: 2346381.998 ops/s
# Warmup Iteration  29: 2345485.625 ops/s
# Warmup Iteration  30: 2347102.860 ops/s
Iteration   1: 2370677.325 ops/s
Iteration   2: 2347329.774 ops/s
Iteration   3: 2349162.265 ops/s
Iteration   4: 2338732.597 ops/s
Iteration   5: 2364145.961 ops/s
Iteration   6: 2344903.204 ops/s
Iteration   7: 2357222.185 ops/s
Iteration   8: 2336874.499 ops/s
Iteration   9: 2333656.821 ops/s
Iteration  10: 2345869.099 ops/s
Iteration  11: 2345055.198 ops/s
Iteration  12: 2355584.855 ops/s
Iteration  13: 2343671.342 ops/s
Iteration  14: 2346967.805 ops/s
Iteration  15: 2341779.626 ops/s
Iteration  16: 2342989.647 ops/s
Iteration  17: 2318937.414 ops/s
Iteration  18: 2330365.578 ops/s
Iteration  19: 2348128.074 ops/s
Iteration  20: 2321090.760 ops/s
Iteration  21: 2348412.556 ops/s
Iteration  22: 2353103.710 ops/s
Iteration  23: 2349151.182 ops/s
Iteration  24: 2354421.637 ops/s
Iteration  25: 2339025.525 ops/s
Iteration  26: 2343899.175 ops/s
Iteration  27: 2340594.249 ops/s
Iteration  28: 2348278.374 ops/s
Iteration  29: 2355827.307 ops/s
Iteration  30: 2343548.098 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWith":
  2345313.528 ±(99.9%) 7241.094 ops/s [Average]
  (min, avg, max) = (2318937.414, 2345313.528, 2370677.325), stdev = 10838.129
  CI (99.9%): [2338072.434, 2352554.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWith  thrpt   30  2345313.528 ± 7241.094  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1738841.747 ops/s
# Warmup Iteration   2: 4401381.116 ops/s
# Warmup Iteration   3: 3779514.861 ops/s
# Warmup Iteration   4: 4456647.051 ops/s
# Warmup Iteration   5: 4432719.973 ops/s
# Warmup Iteration   6: 4418226.227 ops/s
# Warmup Iteration   7: 4440005.029 ops/s
# Warmup Iteration   8: 4457146.978 ops/s
# Warmup Iteration   9: 4448661.992 ops/s
# Warmup Iteration  10: 4445623.336 ops/s
# Warmup Iteration  11: 4401313.894 ops/s
# Warmup Iteration  12: 4405902.322 ops/s
# Warmup Iteration  13: 4439175.761 ops/s
# Warmup Iteration  14: 4425179.234 ops/s
# Warmup Iteration  15: 4432250.994 ops/s
# Warmup Iteration  16: 4473854.130 ops/s
# Warmup Iteration  17: 4472360.272 ops/s
# Warmup Iteration  18: 4453297.463 ops/s
# Warmup Iteration  19: 4454560.501 ops/s
# Warmup Iteration  20: 4429010.259 ops/s
# Warmup Iteration  21: 4484623.811 ops/s
# Warmup Iteration  22: 4455839.857 ops/s
# Warmup Iteration  23: 4471417.371 ops/s
# Warmup Iteration  24: 4427910.322 ops/s
# Warmup Iteration  25: 4423700.922 ops/s
# Warmup Iteration  26: 4459256.777 ops/s
# Warmup Iteration  27: 4450937.348 ops/s
# Warmup Iteration  28: 4450188.295 ops/s
# Warmup Iteration  29: 4455525.998 ops/s
# Warmup Iteration  30: 4443950.682 ops/s
Iteration   1: 4432614.461 ops/s
Iteration   2: 4402652.032 ops/s
Iteration   3: 4435853.430 ops/s
Iteration   4: 4442668.680 ops/s
Iteration   5: 4458359.462 ops/s
Iteration   6: 4366310.799 ops/s
Iteration   7: 4447790.400 ops/s
Iteration   8: 4494236.922 ops/s
Iteration   9: 4447507.448 ops/s
Iteration  10: 4470148.508 ops/s
Iteration  11: 4475744.417 ops/s
Iteration  12: 4482406.701 ops/s
Iteration  13: 4481469.964 ops/s
Iteration  14: 4465563.207 ops/s
Iteration  15: 4435985.878 ops/s
Iteration  16: 4465816.248 ops/s
Iteration  17: 4487540.542 ops/s
Iteration  18: 4427240.660 ops/s
Iteration  19: 4460951.166 ops/s
Iteration  20: 4305148.029 ops/s
Iteration  21: 4454616.560 ops/s
Iteration  22: 4431936.211 ops/s
Iteration  23: 4439914.397 ops/s
Iteration  24: 4480205.007 ops/s
Iteration  25: 4383409.006 ops/s
Iteration  26: 4455182.614 ops/s
Iteration  27: 4454262.191 ops/s
Iteration  28: 4438067.655 ops/s
Iteration  29: 4454498.213 ops/s
Iteration  30: 4335994.806 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWithIndex":
  4440469.854 ±(99.9%) 29080.906 ops/s [Average]
  (min, avg, max) = (4305148.029, 4440469.854, 4494236.922), stdev = 43526.935
  CI (99.9%): [4411388.947, 4469550.760] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWithIndex  thrpt   30  4440469.854 ± 29080.906  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1506639.173 ops/s
# Warmup Iteration   2: 3816365.199 ops/s
# Warmup Iteration   3: 3636658.244 ops/s
# Warmup Iteration   4: 3417618.301 ops/s
# Warmup Iteration   5: 3815788.415 ops/s
# Warmup Iteration   6: 3851958.682 ops/s
# Warmup Iteration   7: 3831444.145 ops/s
# Warmup Iteration   8: 3852282.927 ops/s
# Warmup Iteration   9: 3874304.249 ops/s
# Warmup Iteration  10: 3870434.885 ops/s
# Warmup Iteration  11: 3853411.881 ops/s
# Warmup Iteration  12: 3869032.546 ops/s
# Warmup Iteration  13: 3854704.927 ops/s
# Warmup Iteration  14: 3847203.888 ops/s
# Warmup Iteration  15: 3837666.812 ops/s
# Warmup Iteration  16: 3834014.113 ops/s
# Warmup Iteration  17: 3830997.370 ops/s
# Warmup Iteration  18: 3856721.251 ops/s
# Warmup Iteration  19: 3852834.566 ops/s
# Warmup Iteration  20: 3878650.586 ops/s
# Warmup Iteration  21: 3847039.376 ops/s
# Warmup Iteration  22: 3849492.047 ops/s
# Warmup Iteration  23: 3806140.492 ops/s
# Warmup Iteration  24: 3860888.654 ops/s
# Warmup Iteration  25: 3851998.341 ops/s
# Warmup Iteration  26: 3866319.285 ops/s
# Warmup Iteration  27: 3844456.809 ops/s
# Warmup Iteration  28: 3860537.873 ops/s
# Warmup Iteration  29: 3851333.176 ops/s
# Warmup Iteration  30: 3840543.129 ops/s
Iteration   1: 3875273.417 ops/s
Iteration   2: 3860600.772 ops/s
Iteration   3: 3778321.220 ops/s
Iteration   4: 3858964.925 ops/s
Iteration   5: 3862621.656 ops/s
Iteration   6: 3843964.172 ops/s
Iteration   7: 3864378.646 ops/s
Iteration   8: 3851637.114 ops/s
Iteration   9: 3867326.226 ops/s
Iteration  10: 3851097.218 ops/s
Iteration  11: 3839498.847 ops/s
Iteration  12: 3779432.615 ops/s
Iteration  13: 3854161.293 ops/s
Iteration  14: 3876966.117 ops/s
Iteration  15: 3812279.682 ops/s
Iteration  16: 3863220.956 ops/s
Iteration  17: 3811805.083 ops/s
Iteration  18: 3837435.738 ops/s
Iteration  19: 3860729.247 ops/s
Iteration  20: 3869228.848 ops/s
Iteration  21: 3879606.814 ops/s
Iteration  22: 3866103.946 ops/s
Iteration  23: 3874001.099 ops/s
Iteration  24: 3878628.582 ops/s
Iteration  25: 3857856.761 ops/s
Iteration  26: 3853264.844 ops/s
Iteration  27: 3864694.913 ops/s
Iteration  28: 3843196.139 ops/s
Iteration  29: 3843744.222 ops/s
Iteration  30: 3875988.590 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWithIndexWithTarget":
  3851867.657 ±(99.9%) 17407.087 ops/s [Average]
  (min, avg, max) = (3778321.220, 3851867.657, 3879606.814), stdev = 26054.110
  CI (99.9%): [3834460.570, 3869274.744] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  3851867.657 ± 17407.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 398677.060 ops/s
# Warmup Iteration   2: 1047761.204 ops/s
# Warmup Iteration   3: 1098329.827 ops/s
# Warmup Iteration   4: 919320.171 ops/s
# Warmup Iteration   5: 1104903.105 ops/s
# Warmup Iteration   6: 1098320.953 ops/s
# Warmup Iteration   7: 1107889.793 ops/s
# Warmup Iteration   8: 1105250.685 ops/s
# Warmup Iteration   9: 1103752.565 ops/s
# Warmup Iteration  10: 1097513.327 ops/s
# Warmup Iteration  11: 1101838.808 ops/s
# Warmup Iteration  12: 1098276.329 ops/s
# Warmup Iteration  13: 1082607.936 ops/s
# Warmup Iteration  14: 1092694.116 ops/s
# Warmup Iteration  15: 1102383.801 ops/s
# Warmup Iteration  16: 1102048.475 ops/s
# Warmup Iteration  17: 1103927.522 ops/s
# Warmup Iteration  18: 1107554.652 ops/s
# Warmup Iteration  19: 1094878.693 ops/s
# Warmup Iteration  20: 1105260.829 ops/s
# Warmup Iteration  21: 1102629.476 ops/s
# Warmup Iteration  22: 1093715.769 ops/s
# Warmup Iteration  23: 1100826.756 ops/s
# Warmup Iteration  24: 1105392.193 ops/s
# Warmup Iteration  25: 1095784.107 ops/s
# Warmup Iteration  26: 1101072.514 ops/s
# Warmup Iteration  27: 1105224.039 ops/s
# Warmup Iteration  28: 1104240.762 ops/s
# Warmup Iteration  29: 1098482.076 ops/s
# Warmup Iteration  30: 1106255.617 ops/s
Iteration   1: 1110027.951 ops/s
Iteration   2: 1109058.911 ops/s
Iteration   3: 1109915.465 ops/s
Iteration   4: 1114827.459 ops/s
Iteration   5: 1093400.297 ops/s
Iteration   6: 1100682.825 ops/s
Iteration   7: 1105595.058 ops/s
Iteration   8: 1110186.082 ops/s
Iteration   9: 1091114.388 ops/s
Iteration  10: 1107996.418 ops/s
Iteration  11: 1105906.232 ops/s
Iteration  12: 1104139.880 ops/s
Iteration  13: 1100706.363 ops/s
Iteration  14: 1100355.961 ops/s
Iteration  15: 1090792.776 ops/s
Iteration  16: 1105555.840 ops/s
Iteration  17: 1106825.677 ops/s
Iteration  18: 1107825.898 ops/s
Iteration  19: 1106116.118 ops/s
Iteration  20: 1108196.251 ops/s
Iteration  21: 1105805.544 ops/s
Iteration  22: 1105048.527 ops/s
Iteration  23: 1103735.320 ops/s
Iteration  24: 1082627.772 ops/s
Iteration  25: 1099873.658 ops/s
Iteration  26: 1093395.572 ops/s
Iteration  27: 1102874.206 ops/s
Iteration  28: 1088838.999 ops/s
Iteration  29: 1103005.848 ops/s
Iteration  30: 1102765.869 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWith_target":
  1102573.239 ±(99.9%) 4920.447 ops/s [Average]
  (min, avg, max) = (1082627.772, 1102573.239, 1114827.459), stdev = 7364.694
  CI (99.9%): [1097652.792, 1107493.685] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_selectWith_target  thrpt   30  1102573.239 ± 4920.447  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5272850.515 ops/s
# Warmup Iteration   2: 11053464.108 ops/s
# Warmup Iteration   3: 9444108.122 ops/s
# Warmup Iteration   4: 10970129.407 ops/s
# Warmup Iteration   5: 11205796.643 ops/s
# Warmup Iteration   6: 11174253.198 ops/s
# Warmup Iteration   7: 11080053.672 ops/s
# Warmup Iteration   8: 11126710.530 ops/s
# Warmup Iteration   9: 11193318.058 ops/s
# Warmup Iteration  10: 11082472.557 ops/s
# Warmup Iteration  11: 11171427.915 ops/s
# Warmup Iteration  12: 11122193.439 ops/s
# Warmup Iteration  13: 11219977.742 ops/s
# Warmup Iteration  14: 11122974.977 ops/s
# Warmup Iteration  15: 11125183.758 ops/s
# Warmup Iteration  16: 11167276.202 ops/s
# Warmup Iteration  17: 11250911.373 ops/s
# Warmup Iteration  18: 11260847.136 ops/s
# Warmup Iteration  19: 11246287.830 ops/s
# Warmup Iteration  20: 11158297.780 ops/s
# Warmup Iteration  21: 11173108.357 ops/s
# Warmup Iteration  22: 11275252.171 ops/s
# Warmup Iteration  23: 11211116.864 ops/s
# Warmup Iteration  24: 11159465.056 ops/s
# Warmup Iteration  25: 11238515.879 ops/s
# Warmup Iteration  26: 11207573.160 ops/s
# Warmup Iteration  27: 11219754.105 ops/s
# Warmup Iteration  28: 11270590.449 ops/s
# Warmup Iteration  29: 11149194.059 ops/s
# Warmup Iteration  30: 11180810.461 ops/s
Iteration   1: 11195506.076 ops/s
Iteration   2: 11161000.182 ops/s
Iteration   3: 10959614.893 ops/s
Iteration   4: 11064276.724 ops/s
Iteration   5: 11250039.933 ops/s
Iteration   6: 11201795.617 ops/s
Iteration   7: 11203997.056 ops/s
Iteration   8: 11238967.283 ops/s
Iteration   9: 11238659.638 ops/s
Iteration  10: 11188513.164 ops/s
Iteration  11: 11212517.722 ops/s
Iteration  12: 11232134.805 ops/s
Iteration  13: 11186661.954 ops/s
Iteration  14: 11242376.689 ops/s
Iteration  15: 11215545.517 ops/s
Iteration  16: 11220880.552 ops/s
Iteration  17: 11293705.135 ops/s
Iteration  18: 11276993.227 ops/s
Iteration  19: 11197659.437 ops/s
Iteration  20: 11078724.308 ops/s
Iteration  21: 11014110.997 ops/s
Iteration  22: 11151185.260 ops/s
Iteration  23: 11149540.268 ops/s
Iteration  24: 11190058.880 ops/s
Iteration  25: 11222613.387 ops/s
Iteration  26: 11225751.475 ops/s
Iteration  27: 11237883.559 ops/s
Iteration  28: 11251648.836 ops/s
Iteration  29: 11223584.821 ops/s
Iteration  30: 11203999.368 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_serialization":
  11190998.225 ±(99.9%) 49576.354 ops/s [Average]
  (min, avg, max) = (10959614.893, 11190998.225, 11293705.135), stdev = 74203.559
  CI (99.9%): [11141421.871, 11240574.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_serialization  thrpt   30  11190998.225 ± 49576.354  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3650955.757 ops/s
# Warmup Iteration   2: 7814389.748 ops/s
# Warmup Iteration   3: 6596508.189 ops/s
# Warmup Iteration   4: 7879911.908 ops/s
# Warmup Iteration   5: 7911546.013 ops/s
# Warmup Iteration   6: 7896818.708 ops/s
# Warmup Iteration   7: 7905788.980 ops/s
# Warmup Iteration   8: 7895611.007 ops/s
# Warmup Iteration   9: 7846300.472 ops/s
# Warmup Iteration  10: 7849299.843 ops/s
# Warmup Iteration  11: 7915661.003 ops/s
# Warmup Iteration  12: 7902566.623 ops/s
# Warmup Iteration  13: 7886821.514 ops/s
# Warmup Iteration  14: 7871563.527 ops/s
# Warmup Iteration  15: 7866214.083 ops/s
# Warmup Iteration  16: 7818728.340 ops/s
# Warmup Iteration  17: 7921781.803 ops/s
# Warmup Iteration  18: 7918860.379 ops/s
# Warmup Iteration  19: 7848034.073 ops/s
# Warmup Iteration  20: 7907380.370 ops/s
# Warmup Iteration  21: 7926992.038 ops/s
# Warmup Iteration  22: 7892883.553 ops/s
# Warmup Iteration  23: 7912924.962 ops/s
# Warmup Iteration  24: 7905462.575 ops/s
# Warmup Iteration  25: 7959121.848 ops/s
# Warmup Iteration  26: 7922949.100 ops/s
# Warmup Iteration  27: 7878949.500 ops/s
# Warmup Iteration  28: 7959799.967 ops/s
# Warmup Iteration  29: 7880459.724 ops/s
# Warmup Iteration  30: 7942357.044 ops/s
Iteration   1: 7872034.142 ops/s
Iteration   2: 7878213.019 ops/s
Iteration   3: 7958352.861 ops/s
Iteration   4: 7932499.233 ops/s
Iteration   5: 7915896.868 ops/s
Iteration   6: 7926592.351 ops/s
Iteration   7: 7950839.770 ops/s
Iteration   8: 7908543.201 ops/s
Iteration   9: 7915512.084 ops/s
Iteration  10: 7930127.165 ops/s
Iteration  11: 7938864.112 ops/s
Iteration  12: 7838478.856 ops/s
Iteration  13: 7952475.363 ops/s
Iteration  14: 7918232.722 ops/s
Iteration  15: 7952332.455 ops/s
Iteration  16: 7946711.669 ops/s
Iteration  17: 7898380.648 ops/s
Iteration  18: 7941085.678 ops/s
Iteration  19: 7919565.656 ops/s
Iteration  20: 7937086.674 ops/s
Iteration  21: 7907425.845 ops/s
Iteration  22: 7939139.344 ops/s
Iteration  23: 7919520.313 ops/s
Iteration  24: 7851118.147 ops/s
Iteration  25: 7967041.416 ops/s
Iteration  26: 7965091.926 ops/s
Iteration  27: 7925938.073 ops/s
Iteration  28: 7949903.361 ops/s
Iteration  29: 7943253.504 ops/s
Iteration  30: 7954456.774 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_set":
  7925157.108 ±(99.9%) 21249.952 ops/s [Average]
  (min, avg, max) = (7838478.856, 7925157.108, 7967041.416), stdev = 31805.930
  CI (99.9%): [7903907.156, 7946407.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_set  thrpt   30  7925157.108 ± 21249.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2944926.039 ops/s
# Warmup Iteration   2: 6771841.049 ops/s
# Warmup Iteration   3: 6658692.472 ops/s
# Warmup Iteration   4: 5541993.988 ops/s
# Warmup Iteration   5: 6611288.384 ops/s
# Warmup Iteration   6: 6664232.417 ops/s
# Warmup Iteration   7: 6656163.152 ops/s
# Warmup Iteration   8: 6603505.772 ops/s
# Warmup Iteration   9: 6663564.710 ops/s
# Warmup Iteration  10: 6652204.278 ops/s
# Warmup Iteration  11: 6596901.415 ops/s
# Warmup Iteration  12: 6603400.818 ops/s
# Warmup Iteration  13: 6667663.887 ops/s
# Warmup Iteration  14: 6616712.910 ops/s
# Warmup Iteration  15: 6655278.874 ops/s
# Warmup Iteration  16: 6681332.075 ops/s
# Warmup Iteration  17: 6690277.880 ops/s
# Warmup Iteration  18: 6653028.818 ops/s
# Warmup Iteration  19: 6713185.295 ops/s
# Warmup Iteration  20: 6742972.665 ops/s
# Warmup Iteration  21: 6732235.202 ops/s
# Warmup Iteration  22: 6700049.824 ops/s
# Warmup Iteration  23: 6717791.383 ops/s
# Warmup Iteration  24: 6682601.144 ops/s
# Warmup Iteration  25: 6740864.158 ops/s
# Warmup Iteration  26: 6718880.978 ops/s
# Warmup Iteration  27: 6693919.602 ops/s
# Warmup Iteration  28: 6715408.408 ops/s
# Warmup Iteration  29: 6729046.656 ops/s
# Warmup Iteration  30: 6733741.411 ops/s
Iteration   1: 6627257.399 ops/s
Iteration   2: 6625026.418 ops/s
Iteration   3: 6739329.398 ops/s
Iteration   4: 6746950.238 ops/s
Iteration   5: 6755221.634 ops/s
Iteration   6: 6692547.310 ops/s
Iteration   7: 6662439.222 ops/s
Iteration   8: 6728018.209 ops/s
Iteration   9: 6714025.614 ops/s
Iteration  10: 6724390.956 ops/s
Iteration  11: 6733211.467 ops/s
Iteration  12: 6727477.372 ops/s
Iteration  13: 6750955.129 ops/s
Iteration  14: 6770844.465 ops/s
Iteration  15: 6713296.835 ops/s
Iteration  16: 6700615.280 ops/s
Iteration  17: 6714869.762 ops/s
Iteration  18: 6747211.950 ops/s
Iteration  19: 6731547.103 ops/s
Iteration  20: 6746528.088 ops/s
Iteration  21: 6718517.906 ops/s
Iteration  22: 6708856.440 ops/s
Iteration  23: 6684168.190 ops/s
Iteration  24: 6747029.671 ops/s
Iteration  25: 6711736.537 ops/s
Iteration  26: 6723523.671 ops/s
Iteration  27: 6713172.721 ops/s
Iteration  28: 6682650.124 ops/s
Iteration  29: 6690669.157 ops/s
Iteration  30: 6726881.025 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sort":
  6715298.976 ±(99.9%) 22827.414 ops/s [Average]
  (min, avg, max) = (6625026.418, 6715298.976, 6770844.465), stdev = 34167.001
  CI (99.9%): [6692471.563, 6738126.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sort  thrpt   30  6715298.976 ± 22827.414  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1151967.604 ops/s
# Warmup Iteration   2: 1418957.815 ops/s
# Warmup Iteration   3: 1783158.058 ops/s
# Warmup Iteration   4: 1784448.113 ops/s
# Warmup Iteration   5: 1807200.038 ops/s
# Warmup Iteration   6: 1777966.578 ops/s
# Warmup Iteration   7: 1802426.717 ops/s
# Warmup Iteration   8: 1806907.183 ops/s
# Warmup Iteration   9: 1523686.060 ops/s
# Warmup Iteration  10: 1789823.340 ops/s
# Warmup Iteration  11: 1789690.429 ops/s
# Warmup Iteration  12: 1786426.113 ops/s
# Warmup Iteration  13: 1801575.189 ops/s
# Warmup Iteration  14: 1799650.857 ops/s
# Warmup Iteration  15: 1800654.240 ops/s
# Warmup Iteration  16: 1807703.603 ops/s
# Warmup Iteration  17: 1801938.495 ops/s
# Warmup Iteration  18: 1793213.410 ops/s
# Warmup Iteration  19: 1802250.712 ops/s
# Warmup Iteration  20: 1801387.281 ops/s
# Warmup Iteration  21: 1803162.907 ops/s
# Warmup Iteration  22: 1801060.414 ops/s
# Warmup Iteration  23: 1786964.287 ops/s
# Warmup Iteration  24: 1795870.056 ops/s
# Warmup Iteration  25: 1803990.798 ops/s
# Warmup Iteration  26: 1793224.799 ops/s
# Warmup Iteration  27: 1801223.270 ops/s
# Warmup Iteration  28: 1774602.719 ops/s
# Warmup Iteration  29: 1798822.213 ops/s
# Warmup Iteration  30: 1809089.291 ops/s
Iteration   1: 1799084.612 ops/s
Iteration   2: 1781174.207 ops/s
Iteration   3: 1809775.565 ops/s
Iteration   4: 1769576.959 ops/s
Iteration   5: 1810068.641 ops/s
Iteration   6: 1797771.207 ops/s
Iteration   7: 1808236.296 ops/s
Iteration   8: 1812705.889 ops/s
Iteration   9: 1808297.671 ops/s
Iteration  10: 1804246.127 ops/s
Iteration  11: 1778570.469 ops/s
Iteration  12: 1806982.343 ops/s
Iteration  13: 1801759.264 ops/s
Iteration  14: 1801736.912 ops/s
Iteration  15: 1805993.189 ops/s
Iteration  16: 1804167.780 ops/s
Iteration  17: 1801015.420 ops/s
Iteration  18: 1810733.031 ops/s
Iteration  19: 1780114.502 ops/s
Iteration  20: 1759002.324 ops/s
Iteration  21: 1802360.748 ops/s
Iteration  22: 1775619.662 ops/s
Iteration  23: 1796259.669 ops/s
Iteration  24: 1809924.857 ops/s
Iteration  25: 1803585.415 ops/s
Iteration  26: 1787023.338 ops/s
Iteration  27: 1808902.489 ops/s
Iteration  28: 1779885.813 ops/s
Iteration  29: 1799051.137 ops/s
Iteration  30: 1812844.980 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis":
  1797549.017 ±(99.9%) 9547.357 ops/s [Average]
  (min, avg, max) = (1759002.324, 1797549.017, 1812844.980), stdev = 14290.036
  CI (99.9%): [1788001.660, 1807096.375] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis  thrpt   30  1797549.017 ± 9547.357  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 379607.654 ops/s
# Warmup Iteration   2: 504804.979 ops/s
# Warmup Iteration   3: 696045.847 ops/s
# Warmup Iteration   4: 690605.580 ops/s
# Warmup Iteration   5: 699980.360 ops/s
# Warmup Iteration   6: 694906.710 ops/s
# Warmup Iteration   7: 692045.966 ops/s
# Warmup Iteration   8: 541826.517 ops/s
# Warmup Iteration   9: 690412.212 ops/s
# Warmup Iteration  10: 693251.919 ops/s
# Warmup Iteration  11: 688696.109 ops/s
# Warmup Iteration  12: 694605.714 ops/s
# Warmup Iteration  13: 697914.656 ops/s
# Warmup Iteration  14: 694998.881 ops/s
# Warmup Iteration  15: 694796.114 ops/s
# Warmup Iteration  16: 693787.784 ops/s
# Warmup Iteration  17: 690164.491 ops/s
# Warmup Iteration  18: 697472.275 ops/s
# Warmup Iteration  19: 693824.726 ops/s
# Warmup Iteration  20: 695049.587 ops/s
# Warmup Iteration  21: 693991.483 ops/s
# Warmup Iteration  22: 693877.828 ops/s
# Warmup Iteration  23: 696423.091 ops/s
# Warmup Iteration  24: 696807.362 ops/s
# Warmup Iteration  25: 697597.311 ops/s
# Warmup Iteration  26: 695793.795 ops/s
# Warmup Iteration  27: 690379.317 ops/s
# Warmup Iteration  28: 694371.727 ops/s
# Warmup Iteration  29: 690370.694 ops/s
# Warmup Iteration  30: 695385.444 ops/s
Iteration   1: 696495.234 ops/s
Iteration   2: 687718.583 ops/s
Iteration   3: 687799.477 ops/s
Iteration   4: 698129.579 ops/s
Iteration   5: 696852.121 ops/s
Iteration   6: 695957.086 ops/s
Iteration   7: 698562.100 ops/s
Iteration   8: 699382.670 ops/s
Iteration   9: 696453.565 ops/s
Iteration  10: 691312.537 ops/s
Iteration  11: 696387.238 ops/s
Iteration  12: 695198.300 ops/s
Iteration  13: 694183.665 ops/s
Iteration  14: 690738.394 ops/s
Iteration  15: 697951.614 ops/s
Iteration  16: 697104.285 ops/s
Iteration  17: 695438.539 ops/s
Iteration  18: 690067.818 ops/s
Iteration  19: 693832.857 ops/s
Iteration  20: 691263.461 ops/s
Iteration  21: 697838.050 ops/s
Iteration  22: 697224.988 ops/s
Iteration  23: 696780.193 ops/s
Iteration  24: 700161.767 ops/s
Iteration  25: 695257.362 ops/s
Iteration  26: 692710.336 ops/s
Iteration  27: 695019.478 ops/s
Iteration  28: 696424.390 ops/s
Iteration  29: 698007.416 ops/s
Iteration  30: 697946.440 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisBy":
  695273.318 ±(99.9%) 2178.275 ops/s [Average]
  (min, avg, max) = (687718.583, 695273.318, 700161.767), stdev = 3260.340
  CI (99.9%): [693095.043, 697451.593] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisBy  thrpt   30  695273.318 ± 2178.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1833157.765 ops/s
# Warmup Iteration   2: 3625837.613 ops/s
# Warmup Iteration   3: 3826095.658 ops/s
# Warmup Iteration   4: 3860381.548 ops/s
# Warmup Iteration   5: 3207780.169 ops/s
# Warmup Iteration   6: 3861933.806 ops/s
# Warmup Iteration   7: 3839902.834 ops/s
# Warmup Iteration   8: 3823844.609 ops/s
# Warmup Iteration   9: 3846340.877 ops/s
# Warmup Iteration  10: 3851619.389 ops/s
# Warmup Iteration  11: 3843531.651 ops/s
# Warmup Iteration  12: 3836307.513 ops/s
# Warmup Iteration  13: 3851469.808 ops/s
# Warmup Iteration  14: 3846795.396 ops/s
# Warmup Iteration  15: 3859137.724 ops/s
# Warmup Iteration  16: 3823879.895 ops/s
# Warmup Iteration  17: 3798002.470 ops/s
# Warmup Iteration  18: 3871998.899 ops/s
# Warmup Iteration  19: 3866514.670 ops/s
# Warmup Iteration  20: 3870665.929 ops/s
# Warmup Iteration  21: 3873547.502 ops/s
# Warmup Iteration  22: 3862909.148 ops/s
# Warmup Iteration  23: 3877767.988 ops/s
# Warmup Iteration  24: 3875036.055 ops/s
# Warmup Iteration  25: 3832092.981 ops/s
# Warmup Iteration  26: 3830169.224 ops/s
# Warmup Iteration  27: 3835482.175 ops/s
# Warmup Iteration  28: 3860685.658 ops/s
# Warmup Iteration  29: 3833615.876 ops/s
# Warmup Iteration  30: 3800127.048 ops/s
Iteration   1: 3854861.317 ops/s
Iteration   2: 3853280.830 ops/s
Iteration   3: 3868996.586 ops/s
Iteration   4: 3804070.926 ops/s
Iteration   5: 3858259.562 ops/s
Iteration   6: 3864077.565 ops/s
Iteration   7: 3820164.383 ops/s
Iteration   8: 3808648.082 ops/s
Iteration   9: 3859568.220 ops/s
Iteration  10: 3852323.131 ops/s
Iteration  11: 3837489.349 ops/s
Iteration  12: 3889210.348 ops/s
Iteration  13: 3879570.660 ops/s
Iteration  14: 3863835.180 ops/s
Iteration  15: 3855289.988 ops/s
Iteration  16: 3832806.464 ops/s
Iteration  17: 3884540.038 ops/s
Iteration  18: 3868862.578 ops/s
Iteration  19: 3858070.040 ops/s
Iteration  20: 3852903.859 ops/s
Iteration  21: 3830401.944 ops/s
Iteration  22: 3849148.513 ops/s
Iteration  23: 3864518.644 ops/s
Iteration  24: 3859773.927 ops/s
Iteration  25: 3867029.463 ops/s
Iteration  26: 3849413.159 ops/s
Iteration  27: 3861396.634 ops/s
Iteration  28: 3872026.329 ops/s
Iteration  29: 3880216.707 ops/s
Iteration  30: 3864577.643 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByBoolean":
  3855511.069 ±(99.9%) 13582.153 ops/s [Average]
  (min, avg, max) = (3804070.926, 3855511.069, 3889210.348), stdev = 20329.129
  CI (99.9%): [3841928.916, 3869093.222] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByBoolean  thrpt   30  3855511.069 ± 13582.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 804297.915 ops/s
# Warmup Iteration   2: 886333.309 ops/s
# Warmup Iteration   3: 1052136.212 ops/s
# Warmup Iteration   4: 1159512.231 ops/s
# Warmup Iteration   5: 1152834.506 ops/s
# Warmup Iteration   6: 1149837.670 ops/s
# Warmup Iteration   7: 1147236.794 ops/s
# Warmup Iteration   8: 1159963.960 ops/s
# Warmup Iteration   9: 1161012.283 ops/s
# Warmup Iteration  10: 1140174.098 ops/s
# Warmup Iteration  11: 1133444.589 ops/s
# Warmup Iteration  12: 1155975.724 ops/s
# Warmup Iteration  13: 1145993.182 ops/s
# Warmup Iteration  14: 966919.129 ops/s
# Warmup Iteration  15: 1157280.290 ops/s
# Warmup Iteration  16: 1152006.679 ops/s
# Warmup Iteration  17: 1149930.774 ops/s
# Warmup Iteration  18: 1149517.462 ops/s
# Warmup Iteration  19: 1156827.904 ops/s
# Warmup Iteration  20: 1146501.273 ops/s
# Warmup Iteration  21: 1155098.725 ops/s
# Warmup Iteration  22: 1150210.781 ops/s
# Warmup Iteration  23: 1158278.184 ops/s
# Warmup Iteration  24: 1152514.799 ops/s
# Warmup Iteration  25: 1144173.159 ops/s
# Warmup Iteration  26: 1148168.593 ops/s
# Warmup Iteration  27: 1153559.974 ops/s
# Warmup Iteration  28: 1154748.357 ops/s
# Warmup Iteration  29: 1144950.124 ops/s
# Warmup Iteration  30: 1154376.264 ops/s
Iteration   1: 1151958.477 ops/s
Iteration   2: 1151464.163 ops/s
Iteration   3: 1156828.070 ops/s
Iteration   4: 1152239.967 ops/s
Iteration   5: 1153292.847 ops/s
Iteration   6: 1161331.273 ops/s
Iteration   7: 1157982.018 ops/s
Iteration   8: 1139554.795 ops/s
Iteration   9: 1138802.806 ops/s
Iteration  10: 1152175.006 ops/s
Iteration  11: 1153217.079 ops/s
Iteration  12: 1146638.247 ops/s
Iteration  13: 1155577.830 ops/s
Iteration  14: 1153758.610 ops/s
Iteration  15: 1151666.927 ops/s
Iteration  16: 1154153.046 ops/s
Iteration  17: 1152017.903 ops/s
Iteration  18: 1159580.857 ops/s
Iteration  19: 1163698.363 ops/s
Iteration  20: 1151557.200 ops/s
Iteration  21: 1149473.344 ops/s
Iteration  22: 1156481.492 ops/s
Iteration  23: 1160787.596 ops/s
Iteration  24: 1155418.964 ops/s
Iteration  25: 1156311.971 ops/s
Iteration  26: 1150537.961 ops/s
Iteration  27: 1155140.787 ops/s
Iteration  28: 1156938.481 ops/s
Iteration  29: 1157701.276 ops/s
Iteration  30: 1159395.020 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByByte":
  1153856.079 ±(99.9%) 3673.793 ops/s [Average]
  (min, avg, max) = (1138802.806, 1153856.079, 1163698.363), stdev = 5498.762
  CI (99.9%): [1150182.286, 1157529.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByByte  thrpt   30  1153856.079 ± 3673.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1203906.094 ops/s
# Warmup Iteration   2: 1539777.223 ops/s
# Warmup Iteration   3: 1934349.938 ops/s
# Warmup Iteration   4: 1926067.874 ops/s
# Warmup Iteration   5: 1941320.572 ops/s
# Warmup Iteration   6: 1921973.490 ops/s
# Warmup Iteration   7: 1935164.059 ops/s
# Warmup Iteration   8: 1928027.276 ops/s
# Warmup Iteration   9: 1605601.741 ops/s
# Warmup Iteration  10: 1949270.471 ops/s
# Warmup Iteration  11: 1921581.835 ops/s
# Warmup Iteration  12: 1937493.298 ops/s
# Warmup Iteration  13: 1943300.062 ops/s
# Warmup Iteration  14: 1942306.972 ops/s
# Warmup Iteration  15: 1942114.831 ops/s
# Warmup Iteration  16: 1947695.015 ops/s
# Warmup Iteration  17: 1950317.835 ops/s
# Warmup Iteration  18: 1921155.225 ops/s
# Warmup Iteration  19: 1937726.857 ops/s
# Warmup Iteration  20: 1947855.217 ops/s
# Warmup Iteration  21: 1939725.272 ops/s
# Warmup Iteration  22: 1944352.205 ops/s
# Warmup Iteration  23: 1944997.416 ops/s
# Warmup Iteration  24: 1940994.727 ops/s
# Warmup Iteration  25: 1943328.722 ops/s
# Warmup Iteration  26: 1940241.259 ops/s
# Warmup Iteration  27: 1947576.966 ops/s
# Warmup Iteration  28: 1932519.681 ops/s
# Warmup Iteration  29: 1938517.797 ops/s
# Warmup Iteration  30: 1940828.773 ops/s
Iteration   1: 1936771.494 ops/s
Iteration   2: 1941898.508 ops/s
Iteration   3: 1941329.567 ops/s
Iteration   4: 1935413.395 ops/s
Iteration   5: 1933321.668 ops/s
Iteration   6: 1947443.652 ops/s
Iteration   7: 1949746.766 ops/s
Iteration   8: 1898099.940 ops/s
Iteration   9: 1938018.016 ops/s
Iteration  10: 1934185.612 ops/s
Iteration  11: 1949654.630 ops/s
Iteration  12: 1942596.929 ops/s
Iteration  13: 1945848.829 ops/s
Iteration  14: 1950239.940 ops/s
Iteration  15: 1948165.327 ops/s
Iteration  16: 1925452.136 ops/s
Iteration  17: 1949093.645 ops/s
Iteration  18: 1939741.234 ops/s
Iteration  19: 1952376.197 ops/s
Iteration  20: 1953172.876 ops/s
Iteration  21: 1951216.845 ops/s
Iteration  22: 1924731.191 ops/s
Iteration  23: 1946981.922 ops/s
Iteration  24: 1931797.205 ops/s
Iteration  25: 1938906.239 ops/s
Iteration  26: 1944877.828 ops/s
Iteration  27: 1946630.196 ops/s
Iteration  28: 1912863.326 ops/s
Iteration  29: 1947552.857 ops/s
Iteration  30: 1936029.837 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByChar":
  1939805.260 ±(99.9%) 8139.285 ops/s [Average]
  (min, avg, max) = (1898099.940, 1939805.260, 1953172.876), stdev = 12182.500
  CI (99.9%): [1931665.975, 1947944.545] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByChar  thrpt   30  1939805.260 ± 8139.285  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 251625.664 ops/s
# Warmup Iteration   2: 424953.428 ops/s
# Warmup Iteration   3: 500192.247 ops/s
# Warmup Iteration   4: 505639.836 ops/s
# Warmup Iteration   5: 507621.893 ops/s
# Warmup Iteration   6: 408683.989 ops/s
# Warmup Iteration   7: 507615.513 ops/s
# Warmup Iteration   8: 505449.348 ops/s
# Warmup Iteration   9: 509549.424 ops/s
# Warmup Iteration  10: 501855.858 ops/s
# Warmup Iteration  11: 507299.926 ops/s
# Warmup Iteration  12: 507551.681 ops/s
# Warmup Iteration  13: 505026.759 ops/s
# Warmup Iteration  14: 509016.024 ops/s
# Warmup Iteration  15: 507053.810 ops/s
# Warmup Iteration  16: 509875.467 ops/s
# Warmup Iteration  17: 508561.795 ops/s
# Warmup Iteration  18: 509025.820 ops/s
# Warmup Iteration  19: 508986.283 ops/s
# Warmup Iteration  20: 506895.782 ops/s
# Warmup Iteration  21: 507222.706 ops/s
# Warmup Iteration  22: 507902.650 ops/s
# Warmup Iteration  23: 502867.760 ops/s
# Warmup Iteration  24: 507608.789 ops/s
# Warmup Iteration  25: 508316.996 ops/s
# Warmup Iteration  26: 509307.430 ops/s
# Warmup Iteration  27: 508294.056 ops/s
# Warmup Iteration  28: 509318.166 ops/s
# Warmup Iteration  29: 509509.088 ops/s
# Warmup Iteration  30: 504827.268 ops/s
Iteration   1: 504887.502 ops/s
Iteration   2: 507998.196 ops/s
Iteration   3: 507984.623 ops/s
Iteration   4: 510516.973 ops/s
Iteration   5: 508031.281 ops/s
Iteration   6: 509358.022 ops/s
Iteration   7: 509273.980 ops/s
Iteration   8: 506992.205 ops/s
Iteration   9: 507636.866 ops/s
Iteration  10: 509392.667 ops/s
Iteration  11: 507961.171 ops/s
Iteration  12: 509335.977 ops/s
Iteration  13: 506259.624 ops/s
Iteration  14: 505130.679 ops/s
Iteration  15: 505822.170 ops/s
Iteration  16: 503438.312 ops/s
Iteration  17: 508658.144 ops/s
Iteration  18: 509745.766 ops/s
Iteration  19: 507899.197 ops/s
Iteration  20: 506579.728 ops/s
Iteration  21: 508781.011 ops/s
Iteration  22: 506925.561 ops/s
Iteration  23: 507082.328 ops/s
Iteration  24: 509394.937 ops/s
Iteration  25: 507631.453 ops/s
Iteration  26: 507543.101 ops/s
Iteration  27: 506834.262 ops/s
Iteration  28: 508359.217 ops/s
Iteration  29: 496311.540 ops/s
Iteration  30: 505746.651 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByDouble":
  507250.438 ±(99.9%) 1745.376 ops/s [Average]
  (min, avg, max) = (496311.540, 507250.438, 510516.973), stdev = 2612.397
  CI (99.9%): [505505.062, 508995.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByDouble  thrpt   30  507250.438 ± 1745.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 253910.393 ops/s
# Warmup Iteration   2: 427191.529 ops/s
# Warmup Iteration   3: 498036.018 ops/s
# Warmup Iteration   4: 506899.396 ops/s
# Warmup Iteration   5: 499666.291 ops/s
# Warmup Iteration   6: 408874.769 ops/s
# Warmup Iteration   7: 507385.702 ops/s
# Warmup Iteration   8: 505068.473 ops/s
# Warmup Iteration   9: 498583.368 ops/s
# Warmup Iteration  10: 499527.377 ops/s
# Warmup Iteration  11: 499486.908 ops/s
# Warmup Iteration  12: 499463.032 ops/s
# Warmup Iteration  13: 498257.075 ops/s
# Warmup Iteration  14: 494332.049 ops/s
# Warmup Iteration  15: 487941.404 ops/s
# Warmup Iteration  16: 497248.093 ops/s
# Warmup Iteration  17: 502190.251 ops/s
# Warmup Iteration  18: 497993.937 ops/s
# Warmup Iteration  19: 500549.152 ops/s
# Warmup Iteration  20: 499245.107 ops/s
# Warmup Iteration  21: 502294.984 ops/s
# Warmup Iteration  22: 503061.728 ops/s
# Warmup Iteration  23: 498906.669 ops/s
# Warmup Iteration  24: 503104.869 ops/s
# Warmup Iteration  25: 494955.116 ops/s
# Warmup Iteration  26: 502945.315 ops/s
# Warmup Iteration  27: 500637.876 ops/s
# Warmup Iteration  28: 503690.631 ops/s
# Warmup Iteration  29: 503112.108 ops/s
# Warmup Iteration  30: 501646.175 ops/s
Iteration   1: 500149.564 ops/s
Iteration   2: 498876.069 ops/s
Iteration   3: 502400.257 ops/s
Iteration   4: 502459.185 ops/s
Iteration   5: 503877.245 ops/s
Iteration   6: 499800.855 ops/s
Iteration   7: 503260.403 ops/s
Iteration   8: 501319.588 ops/s
Iteration   9: 503776.685 ops/s
Iteration  10: 497753.648 ops/s
Iteration  11: 499956.152 ops/s
Iteration  12: 501831.110 ops/s
Iteration  13: 500122.778 ops/s
Iteration  14: 501832.155 ops/s
Iteration  15: 503050.343 ops/s
Iteration  16: 495038.096 ops/s
Iteration  17: 499995.254 ops/s
Iteration  18: 501868.799 ops/s
Iteration  19: 503151.574 ops/s
Iteration  20: 504071.890 ops/s
Iteration  21: 504238.122 ops/s
Iteration  22: 503504.764 ops/s
Iteration  23: 502617.986 ops/s
Iteration  24: 498805.081 ops/s
Iteration  25: 503538.998 ops/s
Iteration  26: 502417.720 ops/s
Iteration  27: 504203.506 ops/s
Iteration  28: 502077.484 ops/s
Iteration  29: 501164.973 ops/s
Iteration  30: 501322.880 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByFloat":
  501616.105 ±(99.9%) 1436.913 ops/s [Average]
  (min, avg, max) = (495038.096, 501616.105, 504238.122), stdev = 2150.704
  CI (99.9%): [500179.192, 503053.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByFloat  thrpt   30  501616.105 ± 1436.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 844236.145 ops/s
# Warmup Iteration   2: 913830.117 ops/s
# Warmup Iteration   3: 1072848.477 ops/s
# Warmup Iteration   4: 1159053.041 ops/s
# Warmup Iteration   5: 1172632.512 ops/s
# Warmup Iteration   6: 1168280.231 ops/s
# Warmup Iteration   7: 1174857.378 ops/s
# Warmup Iteration   8: 1174873.746 ops/s
# Warmup Iteration   9: 1177653.863 ops/s
# Warmup Iteration  10: 1166303.335 ops/s
# Warmup Iteration  11: 1162579.887 ops/s
# Warmup Iteration  12: 1171608.873 ops/s
# Warmup Iteration  13: 1159457.339 ops/s
# Warmup Iteration  14: 994034.574 ops/s
# Warmup Iteration  15: 1174972.994 ops/s
# Warmup Iteration  16: 1169353.490 ops/s
# Warmup Iteration  17: 1175818.360 ops/s
# Warmup Iteration  18: 1178254.491 ops/s
# Warmup Iteration  19: 1175673.657 ops/s
# Warmup Iteration  20: 1175349.552 ops/s
# Warmup Iteration  21: 1177874.254 ops/s
# Warmup Iteration  22: 1172535.631 ops/s
# Warmup Iteration  23: 1173575.171 ops/s
# Warmup Iteration  24: 1170304.892 ops/s
# Warmup Iteration  25: 1178159.034 ops/s
# Warmup Iteration  26: 1174802.286 ops/s
# Warmup Iteration  27: 1178329.089 ops/s
# Warmup Iteration  28: 1178568.245 ops/s
# Warmup Iteration  29: 1175288.635 ops/s
# Warmup Iteration  30: 1169660.341 ops/s
Iteration   1: 1177475.249 ops/s
Iteration   2: 1174527.842 ops/s
Iteration   3: 1176851.448 ops/s
Iteration   4: 1178131.887 ops/s
Iteration   5: 1154529.174 ops/s
Iteration   6: 1172400.120 ops/s
Iteration   7: 1169230.550 ops/s
Iteration   8: 1176870.557 ops/s
Iteration   9: 1178279.461 ops/s
Iteration  10: 1168555.556 ops/s
Iteration  11: 1170890.075 ops/s
Iteration  12: 1175555.759 ops/s
Iteration  13: 1179851.039 ops/s
Iteration  14: 1179575.986 ops/s
Iteration  15: 1176354.045 ops/s
Iteration  16: 1184924.085 ops/s
Iteration  17: 1176232.569 ops/s
Iteration  18: 1176615.983 ops/s
Iteration  19: 1174096.386 ops/s
Iteration  20: 1169146.677 ops/s
Iteration  21: 1174243.632 ops/s
Iteration  22: 1168368.549 ops/s
Iteration  23: 1178581.356 ops/s
Iteration  24: 1178788.861 ops/s
Iteration  25: 1171346.901 ops/s
Iteration  26: 1159439.966 ops/s
Iteration  27: 1150049.420 ops/s
Iteration  28: 1174728.183 ops/s
Iteration  29: 1175293.636 ops/s
Iteration  30: 1176700.329 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByInt":
  1173254.509 ±(99.9%) 4958.031 ops/s [Average]
  (min, avg, max) = (1150049.420, 1173254.509, 1184924.085), stdev = 7420.949
  CI (99.9%): [1168296.478, 1178212.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByInt  thrpt   30  1173254.509 ± 4958.031  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 806813.704 ops/s
# Warmup Iteration   2: 876674.825 ops/s
# Warmup Iteration   3: 1029376.941 ops/s
# Warmup Iteration   4: 1132907.329 ops/s
# Warmup Iteration   5: 1131371.222 ops/s
# Warmup Iteration   6: 1126511.698 ops/s
# Warmup Iteration   7: 1123207.957 ops/s
# Warmup Iteration   8: 1134451.238 ops/s
# Warmup Iteration   9: 1132950.965 ops/s
# Warmup Iteration  10: 1129404.083 ops/s
# Warmup Iteration  11: 1127108.161 ops/s
# Warmup Iteration  12: 1119298.519 ops/s
# Warmup Iteration  13: 1120191.998 ops/s
# Warmup Iteration  14: 984412.541 ops/s
# Warmup Iteration  15: 1088673.275 ops/s
# Warmup Iteration  16: 1140489.788 ops/s
# Warmup Iteration  17: 1127628.668 ops/s
# Warmup Iteration  18: 1127021.101 ops/s
# Warmup Iteration  19: 1135539.356 ops/s
# Warmup Iteration  20: 1138115.213 ops/s
# Warmup Iteration  21: 1135741.666 ops/s
# Warmup Iteration  22: 1132933.526 ops/s
# Warmup Iteration  23: 1135893.150 ops/s
# Warmup Iteration  24: 1125819.592 ops/s
# Warmup Iteration  25: 1134047.313 ops/s
# Warmup Iteration  26: 1134106.159 ops/s
# Warmup Iteration  27: 1132270.319 ops/s
# Warmup Iteration  28: 1135724.813 ops/s
# Warmup Iteration  29: 1131619.303 ops/s
# Warmup Iteration  30: 1126752.580 ops/s
Iteration   1: 1133919.066 ops/s
Iteration   2: 1130964.890 ops/s
Iteration   3: 1123756.375 ops/s
Iteration   4: 1137453.167 ops/s
Iteration   5: 1135158.410 ops/s
Iteration   6: 1136612.954 ops/s
Iteration   7: 1130656.461 ops/s
Iteration   8: 1120754.745 ops/s
Iteration   9: 1136052.203 ops/s
Iteration  10: 1138275.493 ops/s
Iteration  11: 1138025.123 ops/s
Iteration  12: 1137198.915 ops/s
Iteration  13: 1135595.992 ops/s
Iteration  14: 1135128.808 ops/s
Iteration  15: 1138307.295 ops/s
Iteration  16: 1137885.192 ops/s
Iteration  17: 1137047.951 ops/s
Iteration  18: 1132530.074 ops/s
Iteration  19: 1098865.195 ops/s
Iteration  20: 1116484.112 ops/s
Iteration  21: 1132318.006 ops/s
Iteration  22: 1134123.640 ops/s
Iteration  23: 1120564.553 ops/s
Iteration  24: 1136072.794 ops/s
Iteration  25: 1137219.866 ops/s
Iteration  26: 1133154.097 ops/s
Iteration  27: 1131424.514 ops/s
Iteration  28: 1126599.891 ops/s
Iteration  29: 1133693.934 ops/s
Iteration  30: 1124413.815 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByLong":
  1131341.918 ±(99.9%) 5685.560 ops/s [Average]
  (min, avg, max) = (1098865.195, 1131341.918, 1138307.295), stdev = 8509.879
  CI (99.9%): [1125656.358, 1137027.477] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByLong  thrpt   30  1131341.918 ± 5685.560  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 851981.882 ops/s
# Warmup Iteration   2: 924998.962 ops/s
# Warmup Iteration   3: 1111971.742 ops/s
# Warmup Iteration   4: 1165302.215 ops/s
# Warmup Iteration   5: 1154247.288 ops/s
# Warmup Iteration   6: 1160997.183 ops/s
# Warmup Iteration   7: 1168930.827 ops/s
# Warmup Iteration   8: 1172729.887 ops/s
# Warmup Iteration   9: 1172119.614 ops/s
# Warmup Iteration  10: 1170621.449 ops/s
# Warmup Iteration  11: 1177279.059 ops/s
# Warmup Iteration  12: 1178027.292 ops/s
# Warmup Iteration  13: 1150848.274 ops/s
# Warmup Iteration  14: 999405.663 ops/s
# Warmup Iteration  15: 1157865.101 ops/s
# Warmup Iteration  16: 1172773.090 ops/s
# Warmup Iteration  17: 1178502.114 ops/s
# Warmup Iteration  18: 1174543.167 ops/s
# Warmup Iteration  19: 1175079.960 ops/s
# Warmup Iteration  20: 1180982.905 ops/s
# Warmup Iteration  21: 1166815.302 ops/s
# Warmup Iteration  22: 1178405.958 ops/s
# Warmup Iteration  23: 1166372.452 ops/s
# Warmup Iteration  24: 1176397.994 ops/s
# Warmup Iteration  25: 1179780.632 ops/s
# Warmup Iteration  26: 1175797.259 ops/s
# Warmup Iteration  27: 1175516.481 ops/s
# Warmup Iteration  28: 1175144.112 ops/s
# Warmup Iteration  29: 1177965.138 ops/s
# Warmup Iteration  30: 1173557.100 ops/s
Iteration   1: 1172507.819 ops/s
Iteration   2: 1180532.877 ops/s
Iteration   3: 1160010.891 ops/s
Iteration   4: 1180573.125 ops/s
Iteration   5: 1177333.369 ops/s
Iteration   6: 1174104.491 ops/s
Iteration   7: 1173415.943 ops/s
Iteration   8: 1178364.315 ops/s
Iteration   9: 1178990.966 ops/s
Iteration  10: 1171717.571 ops/s
Iteration  11: 1180185.240 ops/s
Iteration  12: 1168416.206 ops/s
Iteration  13: 1159697.159 ops/s
Iteration  14: 1172726.194 ops/s
Iteration  15: 1178996.982 ops/s
Iteration  16: 1179345.059 ops/s
Iteration  17: 1176464.901 ops/s
Iteration  18: 1181635.135 ops/s
Iteration  19: 1168600.505 ops/s
Iteration  20: 1177649.062 ops/s
Iteration  21: 1173185.767 ops/s
Iteration  22: 1154873.456 ops/s
Iteration  23: 1180166.014 ops/s
Iteration  24: 1175215.999 ops/s
Iteration  25: 1168393.214 ops/s
Iteration  26: 1169941.896 ops/s
Iteration  27: 1178590.402 ops/s
Iteration  28: 1171317.855 ops/s
Iteration  29: 1172903.568 ops/s
Iteration  30: 1172489.405 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByShort":
  1173611.513 ±(99.9%) 4406.610 ops/s [Average]
  (min, avg, max) = (1154873.456, 1173611.513, 1181635.135), stdev = 6595.607
  CI (99.9%): [1169204.903, 1178018.123] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisByShort  thrpt   30  1173611.513 ± 4406.610  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisWithNullWithNoComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisWithNullWithNoComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2969535.365 ops/s
# Warmup Iteration   2: 6266204.108 ops/s
# Warmup Iteration   3: 6436766.715 ops/s
# Warmup Iteration   4: 6477240.876 ops/s
# Warmup Iteration   5: 5442744.067 ops/s
# Warmup Iteration   6: 6434123.942 ops/s
# Warmup Iteration   7: 6467753.538 ops/s
# Warmup Iteration   8: 6452579.159 ops/s
# Warmup Iteration   9: 6469018.068 ops/s
# Warmup Iteration  10: 6501627.947 ops/s
# Warmup Iteration  11: 6453282.570 ops/s
# Warmup Iteration  12: 6490665.983 ops/s
# Warmup Iteration  13: 6490671.165 ops/s
# Warmup Iteration  14: 6463704.617 ops/s
# Warmup Iteration  15: 6482542.139 ops/s
# Warmup Iteration  16: 6492921.968 ops/s
# Warmup Iteration  17: 6463373.905 ops/s
# Warmup Iteration  18: 6500803.158 ops/s
# Warmup Iteration  19: 6508198.773 ops/s
# Warmup Iteration  20: 6449746.984 ops/s
# Warmup Iteration  21: 6493111.734 ops/s
# Warmup Iteration  22: 6495748.621 ops/s
# Warmup Iteration  23: 6455609.902 ops/s
# Warmup Iteration  24: 6478910.462 ops/s
# Warmup Iteration  25: 6427834.656 ops/s
# Warmup Iteration  26: 6440939.399 ops/s
# Warmup Iteration  27: 6415991.700 ops/s
# Warmup Iteration  28: 6458706.179 ops/s
# Warmup Iteration  29: 6501677.893 ops/s
# Warmup Iteration  30: 6423657.657 ops/s
Iteration   1: 6506772.452 ops/s
Iteration   2: 6457669.347 ops/s
Iteration   3: 6442320.794 ops/s
Iteration   4: 6512673.124 ops/s
Iteration   5: 6471718.851 ops/s
Iteration   6: 6487880.936 ops/s
Iteration   7: 6500541.039 ops/s
Iteration   8: 6371088.696 ops/s
Iteration   9: 6473808.701 ops/s
Iteration  10: 6488969.196 ops/s
Iteration  11: 6508229.948 ops/s
Iteration  12: 6485301.118 ops/s
Iteration  13: 6453083.775 ops/s
Iteration  14: 6478216.272 ops/s
Iteration  15: 6479374.701 ops/s
Iteration  16: 6461168.670 ops/s
Iteration  17: 6501789.445 ops/s
Iteration  18: 6439437.247 ops/s
Iteration  19: 6406826.078 ops/s
Iteration  20: 6383869.038 ops/s
Iteration  21: 6491286.885 ops/s
Iteration  22: 6384574.596 ops/s
Iteration  23: 6339463.018 ops/s
Iteration  24: 6459370.152 ops/s
Iteration  25: 6505194.099 ops/s
Iteration  26: 6503053.094 ops/s
Iteration  27: 6464917.911 ops/s
Iteration  28: 6496927.566 ops/s
Iteration  29: 6483871.782 ops/s
Iteration  30: 6488683.661 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisWithNullWithNoComparator":
  6464269.407 ±(99.9%) 30037.125 ops/s [Average]
  (min, avg, max) = (6339463.018, 6464269.407, 6512673.124), stdev = 44958.158
  CI (99.9%): [6434232.282, 6494306.531] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisWithNullWithNoComparator  thrpt   30  6464269.407 ± 30037.125  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2218247.547 ops/s
# Warmup Iteration   2: 3579887.141 ops/s
# Warmup Iteration   3: 4314829.960 ops/s
# Warmup Iteration   4: 4339968.461 ops/s
# Warmup Iteration   5: 4370294.938 ops/s
# Warmup Iteration   6: 3647093.290 ops/s
# Warmup Iteration   7: 4371867.369 ops/s
# Warmup Iteration   8: 4355553.813 ops/s
# Warmup Iteration   9: 4351864.665 ops/s
# Warmup Iteration  10: 4373954.671 ops/s
# Warmup Iteration  11: 4379749.296 ops/s
# Warmup Iteration  12: 4355215.250 ops/s
# Warmup Iteration  13: 4370132.912 ops/s
# Warmup Iteration  14: 4368151.272 ops/s
# Warmup Iteration  15: 4291056.985 ops/s
# Warmup Iteration  16: 4347651.083 ops/s
# Warmup Iteration  17: 4318725.512 ops/s
# Warmup Iteration  18: 4368433.724 ops/s
# Warmup Iteration  19: 4360595.046 ops/s
# Warmup Iteration  20: 4378409.281 ops/s
# Warmup Iteration  21: 4352487.138 ops/s
# Warmup Iteration  22: 4350801.136 ops/s
# Warmup Iteration  23: 4362164.697 ops/s
# Warmup Iteration  24: 4364402.427 ops/s
# Warmup Iteration  25: 4321140.342 ops/s
# Warmup Iteration  26: 4367477.861 ops/s
# Warmup Iteration  27: 4369941.227 ops/s
# Warmup Iteration  28: 4330154.662 ops/s
# Warmup Iteration  29: 4373269.160 ops/s
# Warmup Iteration  30: 4353691.823 ops/s
Iteration   1: 4373699.288 ops/s
Iteration   2: 4282520.682 ops/s
Iteration   3: 4354717.427 ops/s
Iteration   4: 4341737.909 ops/s
Iteration   5: 4386226.101 ops/s
Iteration   6: 4362967.802 ops/s
Iteration   7: 4358308.102 ops/s
Iteration   8: 4308917.376 ops/s
Iteration   9: 4305219.180 ops/s
Iteration  10: 4361152.854 ops/s
Iteration  11: 4353110.528 ops/s
Iteration  12: 4357982.568 ops/s
Iteration  13: 4338389.997 ops/s
Iteration  14: 4366842.588 ops/s
Iteration  15: 4374480.926 ops/s
Iteration  16: 4281501.301 ops/s
Iteration  17: 4308388.959 ops/s
Iteration  18: 4249801.128 ops/s
Iteration  19: 4375084.111 ops/s
Iteration  20: 4375581.238 ops/s
Iteration  21: 4352552.755 ops/s
Iteration  22: 4373016.355 ops/s
Iteration  23: 4354999.058 ops/s
Iteration  24: 4344715.837 ops/s
Iteration  25: 4355352.927 ops/s
Iteration  26: 4349213.801 ops/s
Iteration  27: 4378820.047 ops/s
Iteration  28: 4376547.567 ops/s
Iteration  29: 4351592.369 ops/s
Iteration  30: 4242487.461 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements":
  4343197.608 ±(99.9%) 25346.399 ops/s [Average]
  (min, avg, max) = (4242487.461, 4343197.608, 4386226.101), stdev = 37937.300
  CI (99.9%): [4317851.209, 4368544.007] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements  thrpt   30  4343197.608 ± 25346.399  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_large$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_large

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5332.911 ops/s
# Warmup Iteration   2: 5896.330 ops/s
# Warmup Iteration   3: 5915.137 ops/s
# Warmup Iteration   4: 5920.224 ops/s
# Warmup Iteration   5: 6155.031 ops/s
# Warmup Iteration   6: 6821.049 ops/s
# Warmup Iteration   7: 6946.314 ops/s
# Warmup Iteration   8: 6885.011 ops/s
# Warmup Iteration   9: 6829.299 ops/s
# Warmup Iteration  10: 6894.355 ops/s
# Warmup Iteration  11: 6908.659 ops/s
# Warmup Iteration  12: 6851.793 ops/s
# Warmup Iteration  13: 6942.557 ops/s
# Warmup Iteration  14: 6946.629 ops/s
# Warmup Iteration  15: 6927.374 ops/s
# Warmup Iteration  16: 6927.198 ops/s
# Warmup Iteration  17: 6898.942 ops/s
# Warmup Iteration  18: 6905.647 ops/s
# Warmup Iteration  19: 6892.250 ops/s
# Warmup Iteration  20: 6887.657 ops/s
# Warmup Iteration  21: 6844.774 ops/s
# Warmup Iteration  22: 6890.675 ops/s
# Warmup Iteration  23: 6904.023 ops/s
# Warmup Iteration  24: 6865.826 ops/s
# Warmup Iteration  25: 6904.524 ops/s
# Warmup Iteration  26: 6892.709 ops/s
# Warmup Iteration  27: 6908.140 ops/s
# Warmup Iteration  28: 6757.430 ops/s
# Warmup Iteration  29: 6250.200 ops/s
# Warmup Iteration  30: 6679.093 ops/s
Iteration   1: 6904.220 ops/s
Iteration   2: 6876.686 ops/s
Iteration   3: 6851.910 ops/s
Iteration   4: 6867.196 ops/s
Iteration   5: 6873.548 ops/s
Iteration   6: 6893.277 ops/s
Iteration   7: 6850.798 ops/s
Iteration   8: 6877.447 ops/s
Iteration   9: 6809.471 ops/s
Iteration  10: 6856.448 ops/s
Iteration  11: 6864.893 ops/s
Iteration  12: 6824.251 ops/s
Iteration  13: 6888.169 ops/s
Iteration  14: 6876.852 ops/s
Iteration  15: 6901.907 ops/s
Iteration  16: 6890.559 ops/s
Iteration  17: 6860.314 ops/s
Iteration  18: 6854.509 ops/s
Iteration  19: 6835.309 ops/s
Iteration  20: 6849.767 ops/s
Iteration  21: 6844.832 ops/s
Iteration  22: 6782.917 ops/s
Iteration  23: 6862.673 ops/s
Iteration  24: 6895.691 ops/s
Iteration  25: 6892.971 ops/s
Iteration  26: 6805.532 ops/s
Iteration  27: 6785.206 ops/s
Iteration  28: 6884.544 ops/s
Iteration  29: 6873.043 ops/s
Iteration  30: 6878.822 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_large":
  6860.459 ±(99.9%) 21.714 ops/s [Average]
  (min, avg, max) = (6782.917, 6860.459, 6904.220), stdev = 32.501
  CI (99.9%): [6838.745, 6882.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt     Score    Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_large  thrpt   30  6860.459 ± 21.714  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_small$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_small

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2317752.986 ops/s
# Warmup Iteration   2: 5290616.199 ops/s
# Warmup Iteration   3: 5401877.167 ops/s
# Warmup Iteration   4: 4521224.870 ops/s
# Warmup Iteration   5: 5412264.888 ops/s
# Warmup Iteration   6: 5395964.606 ops/s
# Warmup Iteration   7: 5398768.653 ops/s
# Warmup Iteration   8: 5427804.531 ops/s
# Warmup Iteration   9: 5408400.787 ops/s
# Warmup Iteration  10: 5417587.106 ops/s
# Warmup Iteration  11: 5404494.529 ops/s
# Warmup Iteration  12: 5412015.696 ops/s
# Warmup Iteration  13: 5412957.098 ops/s
# Warmup Iteration  14: 5414145.498 ops/s
# Warmup Iteration  15: 5373587.295 ops/s
# Warmup Iteration  16: 5393439.550 ops/s
# Warmup Iteration  17: 5371696.713 ops/s
# Warmup Iteration  18: 5437076.186 ops/s
# Warmup Iteration  19: 5396141.617 ops/s
# Warmup Iteration  20: 5375882.028 ops/s
# Warmup Iteration  21: 5372847.899 ops/s
# Warmup Iteration  22: 5405475.484 ops/s
# Warmup Iteration  23: 5446572.825 ops/s
# Warmup Iteration  24: 5409032.370 ops/s
# Warmup Iteration  25: 5349412.426 ops/s
# Warmup Iteration  26: 5364593.315 ops/s
# Warmup Iteration  27: 5417308.953 ops/s
# Warmup Iteration  28: 5408159.445 ops/s
# Warmup Iteration  29: 5322084.564 ops/s
# Warmup Iteration  30: 5384684.041 ops/s
Iteration   1: 5394904.454 ops/s
Iteration   2: 5435870.380 ops/s
Iteration   3: 5404370.995 ops/s
Iteration   4: 5349566.402 ops/s
Iteration   5: 5343060.390 ops/s
Iteration   6: 5420759.257 ops/s
Iteration   7: 5427736.936 ops/s
Iteration   8: 5392774.169 ops/s
Iteration   9: 5449970.589 ops/s
Iteration  10: 5403658.785 ops/s
Iteration  11: 5323857.367 ops/s
Iteration  12: 5412502.475 ops/s
Iteration  13: 5427779.736 ops/s
Iteration  14: 5454242.894 ops/s
Iteration  15: 5412805.877 ops/s
Iteration  16: 5433033.011 ops/s
Iteration  17: 5429094.924 ops/s
Iteration  18: 5440237.658 ops/s
Iteration  19: 5461677.064 ops/s
Iteration  20: 5358370.869 ops/s
Iteration  21: 5448449.031 ops/s
Iteration  22: 5416063.666 ops/s
Iteration  23: 5423938.316 ops/s
Iteration  24: 5421287.110 ops/s
Iteration  25: 5376720.905 ops/s
Iteration  26: 5430926.369 ops/s
Iteration  27: 5425357.615 ops/s
Iteration  28: 5423465.017 ops/s
Iteration  29: 5412294.458 ops/s
Iteration  30: 5322748.897 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_small":
  5409250.854 ±(99.9%) 24714.020 ops/s [Average]
  (min, avg, max) = (5322748.897, 5409250.854, 5461677.064), stdev = 36990.784
  CI (99.9%): [5384536.834, 5433964.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_small  thrpt   30  5409250.854 ± 24714.020  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1153943.449 ops/s
# Warmup Iteration   2: 1347957.896 ops/s
# Warmup Iteration   3: 1745151.993 ops/s
# Warmup Iteration   4: 1757660.617 ops/s
# Warmup Iteration   5: 1749371.150 ops/s
# Warmup Iteration   6: 1750577.714 ops/s
# Warmup Iteration   7: 1736452.636 ops/s
# Warmup Iteration   8: 1752665.001 ops/s
# Warmup Iteration   9: 1757734.058 ops/s
# Warmup Iteration  10: 1459152.211 ops/s
# Warmup Iteration  11: 1752061.768 ops/s
# Warmup Iteration  12: 1741881.097 ops/s
# Warmup Iteration  13: 1756554.769 ops/s
# Warmup Iteration  14: 1753168.110 ops/s
# Warmup Iteration  15: 1758637.706 ops/s
# Warmup Iteration  16: 1742646.497 ops/s
# Warmup Iteration  17: 1760536.891 ops/s
# Warmup Iteration  18: 1754084.237 ops/s
# Warmup Iteration  19: 1760093.480 ops/s
# Warmup Iteration  20: 1760361.859 ops/s
# Warmup Iteration  21: 1753799.651 ops/s
# Warmup Iteration  22: 1728195.157 ops/s
# Warmup Iteration  23: 1758491.924 ops/s
# Warmup Iteration  24: 1753782.284 ops/s
# Warmup Iteration  25: 1754747.237 ops/s
# Warmup Iteration  26: 1754514.025 ops/s
# Warmup Iteration  27: 1746902.602 ops/s
# Warmup Iteration  28: 1743043.194 ops/s
# Warmup Iteration  29: 1741193.728 ops/s
# Warmup Iteration  30: 1752450.137 ops/s
Iteration   1: 1730731.609 ops/s
Iteration   2: 1755422.937 ops/s
Iteration   3: 1754027.678 ops/s
Iteration   4: 1757193.404 ops/s
Iteration   5: 1759156.225 ops/s
Iteration   6: 1728991.903 ops/s
Iteration   7: 1755870.024 ops/s
Iteration   8: 1745997.446 ops/s
Iteration   9: 1762703.361 ops/s
Iteration  10: 1753476.925 ops/s
Iteration  11: 1751706.588 ops/s
Iteration  12: 1752360.461 ops/s
Iteration  13: 1760767.909 ops/s
Iteration  14: 1754404.837 ops/s
Iteration  15: 1743031.668 ops/s
Iteration  16: 1751586.217 ops/s
Iteration  17: 1749620.189 ops/s
Iteration  18: 1749117.145 ops/s
Iteration  19: 1756693.044 ops/s
Iteration  20: 1749667.871 ops/s
Iteration  21: 1762167.225 ops/s
Iteration  22: 1746725.286 ops/s
Iteration  23: 1750876.456 ops/s
Iteration  24: 1705915.625 ops/s
Iteration  25: 1747143.828 ops/s
Iteration  26: 1736186.097 ops/s
Iteration  27: 1752158.875 ops/s
Iteration  28: 1752595.564 ops/s
Iteration  29: 1749756.342 ops/s
Iteration  30: 1749890.709 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_comparator":
  1749198.115 ±(99.9%) 7600.090 ops/s [Average]
  (min, avg, max) = (1705915.625, 1749198.115, 1762703.361), stdev = 11375.457
  CI (99.9%): [1741598.025, 1756798.204] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_comparator  thrpt   30  1749198.115 ± 7600.090  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_comparator_large$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_comparator_large

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5059.612 ops/s
# Warmup Iteration   2: 5795.523 ops/s
# Warmup Iteration   3: 5826.752 ops/s
# Warmup Iteration   4: 5868.391 ops/s
# Warmup Iteration   5: 6028.485 ops/s
# Warmup Iteration   6: 6654.409 ops/s
# Warmup Iteration   7: 6789.340 ops/s
# Warmup Iteration   8: 6758.123 ops/s
# Warmup Iteration   9: 6739.135 ops/s
# Warmup Iteration  10: 6765.933 ops/s
# Warmup Iteration  11: 6775.984 ops/s
# Warmup Iteration  12: 6777.848 ops/s
# Warmup Iteration  13: 6744.042 ops/s
# Warmup Iteration  14: 6778.608 ops/s
# Warmup Iteration  15: 6782.890 ops/s
# Warmup Iteration  16: 6718.796 ops/s
# Warmup Iteration  17: 6656.377 ops/s
# Warmup Iteration  18: 6787.267 ops/s
# Warmup Iteration  19: 6744.001 ops/s
# Warmup Iteration  20: 6758.899 ops/s
# Warmup Iteration  21: 6769.544 ops/s
# Warmup Iteration  22: 6777.112 ops/s
# Warmup Iteration  23: 6756.613 ops/s
# Warmup Iteration  24: 6683.500 ops/s
# Warmup Iteration  25: 6733.784 ops/s
# Warmup Iteration  26: 6780.285 ops/s
# Warmup Iteration  27: 6772.908 ops/s
# Warmup Iteration  28: 6736.722 ops/s
# Warmup Iteration  29: 6367.469 ops/s
# Warmup Iteration  30: 6089.406 ops/s
Iteration   1: 6758.947 ops/s
Iteration   2: 6764.326 ops/s
Iteration   3: 6780.257 ops/s
Iteration   4: 6748.439 ops/s
Iteration   5: 6790.690 ops/s
Iteration   6: 6763.718 ops/s
Iteration   7: 6759.419 ops/s
Iteration   8: 6759.216 ops/s
Iteration   9: 6737.923 ops/s
Iteration  10: 6773.363 ops/s
Iteration  11: 6759.896 ops/s
Iteration  12: 6768.768 ops/s
Iteration  13: 6757.301 ops/s
Iteration  14: 6773.691 ops/s
Iteration  15: 6759.303 ops/s
Iteration  16: 6747.449 ops/s
Iteration  17: 6765.636 ops/s
Iteration  18: 6816.388 ops/s
Iteration  19: 6784.445 ops/s
Iteration  20: 6764.199 ops/s
Iteration  21: 6755.606 ops/s
Iteration  22: 6766.980 ops/s
Iteration  23: 6786.122 ops/s
Iteration  24: 6759.331 ops/s
Iteration  25: 6731.640 ops/s
Iteration  26: 6576.447 ops/s
Iteration  27: 6778.688 ops/s
Iteration  28: 6719.738 ops/s
Iteration  29: 6755.975 ops/s
Iteration  30: 6762.802 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_comparator_large":
  6757.557 ±(99.9%) 25.877 ops/s [Average]
  (min, avg, max) = (6576.447, 6757.557, 6816.388), stdev = 38.732
  CI (99.9%): [6731.679, 6783.434] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt     Score    Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_comparator_large  thrpt   30  6757.557 ± 25.877  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_comparator_small$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_comparator_small

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2333730.008 ops/s
# Warmup Iteration   2: 5465650.484 ops/s
# Warmup Iteration   3: 5502509.507 ops/s
# Warmup Iteration   4: 4646395.672 ops/s
# Warmup Iteration   5: 5557615.419 ops/s
# Warmup Iteration   6: 5455359.520 ops/s
# Warmup Iteration   7: 5559840.911 ops/s
# Warmup Iteration   8: 5519093.695 ops/s
# Warmup Iteration   9: 5583743.444 ops/s
# Warmup Iteration  10: 5559335.582 ops/s
# Warmup Iteration  11: 5513523.370 ops/s
# Warmup Iteration  12: 5594441.260 ops/s
# Warmup Iteration  13: 5577995.229 ops/s
# Warmup Iteration  14: 5568539.136 ops/s
# Warmup Iteration  15: 5510123.006 ops/s
# Warmup Iteration  16: 5532415.959 ops/s
# Warmup Iteration  17: 5564460.284 ops/s
# Warmup Iteration  18: 5561059.221 ops/s
# Warmup Iteration  19: 5561479.166 ops/s
# Warmup Iteration  20: 5579288.626 ops/s
# Warmup Iteration  21: 5578550.693 ops/s
# Warmup Iteration  22: 5592345.977 ops/s
# Warmup Iteration  23: 5558934.701 ops/s
# Warmup Iteration  24: 5553821.215 ops/s
# Warmup Iteration  25: 5577334.811 ops/s
# Warmup Iteration  26: 5509645.563 ops/s
# Warmup Iteration  27: 5559590.097 ops/s
# Warmup Iteration  28: 5601750.024 ops/s
# Warmup Iteration  29: 5588324.898 ops/s
# Warmup Iteration  30: 5580397.217 ops/s
Iteration   1: 5500300.391 ops/s
Iteration   2: 5555320.054 ops/s
Iteration   3: 5572343.207 ops/s
Iteration   4: 5578474.259 ops/s
Iteration   5: 5576476.289 ops/s
Iteration   6: 5567917.848 ops/s
Iteration   7: 5554302.631 ops/s
Iteration   8: 5617424.980 ops/s
Iteration   9: 5561829.591 ops/s
Iteration  10: 5475783.726 ops/s
Iteration  11: 5570131.386 ops/s
Iteration  12: 5579816.965 ops/s
Iteration  13: 5592671.072 ops/s
Iteration  14: 5530784.684 ops/s
Iteration  15: 5529705.109 ops/s
Iteration  16: 5567100.872 ops/s
Iteration  17: 5594150.636 ops/s
Iteration  18: 5577337.276 ops/s
Iteration  19: 5575307.215 ops/s
Iteration  20: 5488347.113 ops/s
Iteration  21: 5546291.857 ops/s
Iteration  22: 5538698.544 ops/s
Iteration  23: 5572738.712 ops/s
Iteration  24: 5582590.555 ops/s
Iteration  25: 5572344.945 ops/s
Iteration  26: 5578931.454 ops/s
Iteration  27: 5486112.644 ops/s
Iteration  28: 5571671.322 ops/s
Iteration  29: 5584988.597 ops/s
Iteration  30: 5548060.392 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_comparator_small":
  5558265.144 ±(99.9%) 22591.050 ops/s [Average]
  (min, avg, max) = (5475783.726, 5558265.144, 5617424.980), stdev = 33813.223
  CI (99.9%): [5535674.094, 5580856.194] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_comparator_small  thrpt   30  5558265.144 ± 22591.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2179526.980 ops/s
# Warmup Iteration   2: 4774583.275 ops/s
# Warmup Iteration   3: 4077460.947 ops/s
# Warmup Iteration   4: 4871868.876 ops/s
# Warmup Iteration   5: 4874719.220 ops/s
# Warmup Iteration   6: 4891148.808 ops/s
# Warmup Iteration   7: 4849970.122 ops/s
# Warmup Iteration   8: 4870103.396 ops/s
# Warmup Iteration   9: 4821005.166 ops/s
# Warmup Iteration  10: 4853980.485 ops/s
# Warmup Iteration  11: 4821418.147 ops/s
# Warmup Iteration  12: 4844925.799 ops/s
# Warmup Iteration  13: 4814271.786 ops/s
# Warmup Iteration  14: 4881804.054 ops/s
# Warmup Iteration  15: 4878805.422 ops/s
# Warmup Iteration  16: 4838088.977 ops/s
# Warmup Iteration  17: 4880095.831 ops/s
# Warmup Iteration  18: 4903485.157 ops/s
# Warmup Iteration  19: 4901843.587 ops/s
# Warmup Iteration  20: 4908758.636 ops/s
# Warmup Iteration  21: 4890656.781 ops/s
# Warmup Iteration  22: 4893713.997 ops/s
# Warmup Iteration  23: 4910088.679 ops/s
# Warmup Iteration  24: 4901864.332 ops/s
# Warmup Iteration  25: 4899675.998 ops/s
# Warmup Iteration  26: 4902555.797 ops/s
# Warmup Iteration  27: 4898243.540 ops/s
# Warmup Iteration  28: 4903895.420 ops/s
# Warmup Iteration  29: 4894998.119 ops/s
# Warmup Iteration  30: 4816359.039 ops/s
Iteration   1: 4883166.115 ops/s
Iteration   2: 4884629.085 ops/s
Iteration   3: 4858432.322 ops/s
Iteration   4: 4895937.333 ops/s
Iteration   5: 4907594.736 ops/s
Iteration   6: 4903664.959 ops/s
Iteration   7: 4894597.520 ops/s
Iteration   8: 4889555.223 ops/s
Iteration   9: 4916757.402 ops/s
Iteration  10: 4893059.625 ops/s
Iteration  11: 4803734.547 ops/s
Iteration  12: 4879488.793 ops/s
Iteration  13: 4891481.916 ops/s
Iteration  14: 4848848.958 ops/s
Iteration  15: 4895428.391 ops/s
Iteration  16: 4907241.153 ops/s
Iteration  17: 4894725.234 ops/s
Iteration  18: 4891239.596 ops/s
Iteration  19: 4883626.787 ops/s
Iteration  20: 4901377.884 ops/s
Iteration  21: 4889280.240 ops/s
Iteration  22: 4882745.197 ops/s
Iteration  23: 4896922.877 ops/s
Iteration  24: 4892628.722 ops/s
Iteration  25: 4903837.117 ops/s
Iteration  26: 4890953.045 ops/s
Iteration  27: 4894749.625 ops/s
Iteration  28: 4897330.459 ops/s
Iteration  29: 4916238.756 ops/s
Iteration  30: 4918497.861 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_null":
  4890259.049 ±(99.9%) 14676.478 ops/s [Average]
  (min, avg, max) = (4803734.547, 4890259.049, 4918497.861), stdev = 21967.063
  CI (99.9%): [4875582.571, 4904935.527] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sortThis_with_null  thrpt   30  4890259.049 ± 14676.478  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 326474.983 ops/s
# Warmup Iteration   2: 811757.652 ops/s
# Warmup Iteration   3: 820944.920 ops/s
# Warmup Iteration   4: 693859.189 ops/s
# Warmup Iteration   5: 819152.694 ops/s
# Warmup Iteration   6: 824189.519 ops/s
# Warmup Iteration   7: 832945.032 ops/s
# Warmup Iteration   8: 835856.736 ops/s
# Warmup Iteration   9: 826510.455 ops/s
# Warmup Iteration  10: 815265.356 ops/s
# Warmup Iteration  11: 824760.064 ops/s
# Warmup Iteration  12: 812505.070 ops/s
# Warmup Iteration  13: 830165.667 ops/s
# Warmup Iteration  14: 824247.304 ops/s
# Warmup Iteration  15: 818731.869 ops/s
# Warmup Iteration  16: 822596.449 ops/s
# Warmup Iteration  17: 811141.216 ops/s
# Warmup Iteration  18: 828504.476 ops/s
# Warmup Iteration  19: 827944.603 ops/s
# Warmup Iteration  20: 825430.508 ops/s
# Warmup Iteration  21: 832125.495 ops/s
# Warmup Iteration  22: 821226.728 ops/s
# Warmup Iteration  23: 819175.913 ops/s
# Warmup Iteration  24: 818474.007 ops/s
# Warmup Iteration  25: 832100.063 ops/s
# Warmup Iteration  26: 828737.388 ops/s
# Warmup Iteration  27: 824290.870 ops/s
# Warmup Iteration  28: 830172.153 ops/s
# Warmup Iteration  29: 831395.205 ops/s
# Warmup Iteration  30: 828068.662 ops/s
Iteration   1: 827725.254 ops/s
Iteration   2: 839482.626 ops/s
Iteration   3: 827354.380 ops/s
Iteration   4: 827857.899 ops/s
Iteration   5: 829787.134 ops/s
Iteration   6: 828051.971 ops/s
Iteration   7: 822987.573 ops/s
Iteration   8: 827222.251 ops/s
Iteration   9: 836278.146 ops/s
Iteration  10: 815665.454 ops/s
Iteration  11: 833858.342 ops/s
Iteration  12: 837408.387 ops/s
Iteration  13: 822164.300 ops/s
Iteration  14: 833148.164 ops/s
Iteration  15: 812240.705 ops/s
Iteration  16: 818725.209 ops/s
Iteration  17: 821176.990 ops/s
Iteration  18: 831925.604 ops/s
Iteration  19: 828570.478 ops/s
Iteration  20: 820375.079 ops/s
Iteration  21: 823132.886 ops/s
Iteration  22: 809896.257 ops/s
Iteration  23: 815621.166 ops/s
Iteration  24: 833515.168 ops/s
Iteration  25: 825746.410 ops/s
Iteration  26: 833437.299 ops/s
Iteration  27: 818735.265 ops/s
Iteration  28: 825057.773 ops/s
Iteration  29: 824358.453 ops/s
Iteration  30: 828796.642 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subList":
  826010.109 ±(99.9%) 4930.705 ops/s [Average]
  (min, avg, max) = (809896.257, 826010.109, 839482.626), stdev = 7380.047
  CI (99.9%): [821079.404, 830940.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subList  thrpt   30  826010.109 ± 4930.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subListFromGreaterThanToException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subListFromGreaterThanToException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 629043.047 ops/s
# Warmup Iteration   2: 717357.115 ops/s
# Warmup Iteration   3: 929806.591 ops/s
# Warmup Iteration   4: 928529.631 ops/s
# Warmup Iteration   5: 920938.884 ops/s
# Warmup Iteration   6: 926242.782 ops/s
# Warmup Iteration   7: 925599.408 ops/s
# Warmup Iteration   8: 926479.513 ops/s
# Warmup Iteration   9: 921684.107 ops/s
# Warmup Iteration  10: 768545.673 ops/s
# Warmup Iteration  11: 924130.607 ops/s
# Warmup Iteration  12: 928854.066 ops/s
# Warmup Iteration  13: 924428.599 ops/s
# Warmup Iteration  14: 918083.593 ops/s
# Warmup Iteration  15: 919414.281 ops/s
# Warmup Iteration  16: 924971.980 ops/s
# Warmup Iteration  17: 981087.846 ops/s
# Warmup Iteration  18: 978426.114 ops/s
# Warmup Iteration  19: 964050.823 ops/s
# Warmup Iteration  20: 971243.087 ops/s
# Warmup Iteration  21: 978363.536 ops/s
# Warmup Iteration  22: 979875.235 ops/s
# Warmup Iteration  23: 973655.579 ops/s
# Warmup Iteration  24: 967841.022 ops/s
# Warmup Iteration  25: 977108.664 ops/s
# Warmup Iteration  26: 983731.146 ops/s
# Warmup Iteration  27: 982437.521 ops/s
# Warmup Iteration  28: 978720.214 ops/s
# Warmup Iteration  29: 971217.434 ops/s
# Warmup Iteration  30: 978322.517 ops/s
Iteration   1: 982681.358 ops/s
Iteration   2: 980117.983 ops/s
Iteration   3: 968119.275 ops/s
Iteration   4: 974856.998 ops/s
Iteration   5: 977842.598 ops/s
Iteration   6: 981457.149 ops/s
Iteration   7: 977865.519 ops/s
Iteration   8: 978975.791 ops/s
Iteration   9: 975434.013 ops/s
Iteration  10: 973666.935 ops/s
Iteration  11: 974119.411 ops/s
Iteration  12: 963209.166 ops/s
Iteration  13: 980858.920 ops/s
Iteration  14: 979329.709 ops/s
Iteration  15: 970928.351 ops/s
Iteration  16: 963581.424 ops/s
Iteration  17: 957763.703 ops/s
Iteration  18: 978953.425 ops/s
Iteration  19: 983305.575 ops/s
Iteration  20: 979707.785 ops/s
Iteration  21: 973067.385 ops/s
Iteration  22: 964982.399 ops/s
Iteration  23: 945300.818 ops/s
Iteration  24: 979370.661 ops/s
Iteration  25: 964289.600 ops/s
Iteration  26: 982300.650 ops/s
Iteration  27: 979515.097 ops/s
Iteration  28: 983350.855 ops/s
Iteration  29: 980799.299 ops/s
Iteration  30: 977029.337 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subListFromGreaterThanToException":
  974426.040 ±(99.9%) 5876.112 ops/s [Average]
  (min, avg, max) = (945300.818, 974426.040, 983350.855), stdev = 8795.089
  CI (99.9%): [968549.927, 980302.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subListFromGreaterThanToException  thrpt   30  974426.040 ± 5876.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subListFromOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subListFromOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 588503.557 ops/s
# Warmup Iteration   2: 637307.859 ops/s
# Warmup Iteration   3: 839572.395 ops/s
# Warmup Iteration   4: 832365.359 ops/s
# Warmup Iteration   5: 838870.422 ops/s
# Warmup Iteration   6: 839182.771 ops/s
# Warmup Iteration   7: 839401.674 ops/s
# Warmup Iteration   8: 837637.475 ops/s
# Warmup Iteration   9: 838401.755 ops/s
# Warmup Iteration  10: 834282.643 ops/s
# Warmup Iteration  11: 699153.164 ops/s
# Warmup Iteration  12: 836248.321 ops/s
# Warmup Iteration  13: 838607.480 ops/s
# Warmup Iteration  14: 838892.569 ops/s
# Warmup Iteration  15: 836369.991 ops/s
# Warmup Iteration  16: 837404.280 ops/s
# Warmup Iteration  17: 879683.336 ops/s
# Warmup Iteration  18: 884901.442 ops/s
# Warmup Iteration  19: 884649.576 ops/s
# Warmup Iteration  20: 885826.618 ops/s
# Warmup Iteration  21: 876127.499 ops/s
# Warmup Iteration  22: 879006.392 ops/s
# Warmup Iteration  23: 883694.111 ops/s
# Warmup Iteration  24: 883830.932 ops/s
# Warmup Iteration  25: 886580.518 ops/s
# Warmup Iteration  26: 883536.627 ops/s
# Warmup Iteration  27: 886701.225 ops/s
# Warmup Iteration  28: 876647.334 ops/s
# Warmup Iteration  29: 881664.280 ops/s
# Warmup Iteration  30: 878242.714 ops/s
Iteration   1: 881843.204 ops/s
Iteration   2: 876057.449 ops/s
Iteration   3: 882647.290 ops/s
Iteration   4: 884669.537 ops/s
Iteration   5: 886645.531 ops/s
Iteration   6: 876777.563 ops/s
Iteration   7: 882648.596 ops/s
Iteration   8: 886024.694 ops/s
Iteration   9: 879132.904 ops/s
Iteration  10: 887712.155 ops/s
Iteration  11: 880120.664 ops/s
Iteration  12: 884626.580 ops/s
Iteration  13: 878809.137 ops/s
Iteration  14: 874197.119 ops/s
Iteration  15: 880375.496 ops/s
Iteration  16: 884985.907 ops/s
Iteration  17: 886592.747 ops/s
Iteration  18: 887756.847 ops/s
Iteration  19: 881595.579 ops/s
Iteration  20: 884803.008 ops/s
Iteration  21: 886392.313 ops/s
Iteration  22: 881102.626 ops/s
Iteration  23: 886117.141 ops/s
Iteration  24: 877749.449 ops/s
Iteration  25: 869241.375 ops/s
Iteration  26: 880153.914 ops/s
Iteration  27: 884664.956 ops/s
Iteration  28: 890142.391 ops/s
Iteration  29: 883333.547 ops/s
Iteration  30: 886865.746 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subListFromOutOfBoundsException":
  882459.516 ±(99.9%) 3085.065 ops/s [Average]
  (min, avg, max) = (869241.375, 882459.516, 890142.391), stdev = 4617.581
  CI (99.9%): [879374.450, 885544.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subListFromOutOfBoundsException  thrpt   30  882459.516 ± 3085.065  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subListToGreaterThanSizeException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subListToGreaterThanSizeException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 637701.269 ops/s
# Warmup Iteration   2: 721687.863 ops/s
# Warmup Iteration   3: 925094.054 ops/s
# Warmup Iteration   4: 924249.925 ops/s
# Warmup Iteration   5: 906892.082 ops/s
# Warmup Iteration   6: 929932.469 ops/s
# Warmup Iteration   7: 930168.088 ops/s
# Warmup Iteration   8: 925342.332 ops/s
# Warmup Iteration   9: 922859.281 ops/s
# Warmup Iteration  10: 790565.361 ops/s
# Warmup Iteration  11: 912326.555 ops/s
# Warmup Iteration  12: 925172.209 ops/s
# Warmup Iteration  13: 924946.438 ops/s
# Warmup Iteration  14: 927238.869 ops/s
# Warmup Iteration  15: 923168.526 ops/s
# Warmup Iteration  16: 923829.526 ops/s
# Warmup Iteration  17: 973821.626 ops/s
# Warmup Iteration  18: 980751.977 ops/s
# Warmup Iteration  19: 981731.289 ops/s
# Warmup Iteration  20: 976752.502 ops/s
# Warmup Iteration  21: 980894.025 ops/s
# Warmup Iteration  22: 977516.540 ops/s
# Warmup Iteration  23: 979123.735 ops/s
# Warmup Iteration  24: 981390.625 ops/s
# Warmup Iteration  25: 977164.993 ops/s
# Warmup Iteration  26: 968781.277 ops/s
# Warmup Iteration  27: 981597.422 ops/s
# Warmup Iteration  28: 983054.018 ops/s
# Warmup Iteration  29: 982801.889 ops/s
# Warmup Iteration  30: 964238.283 ops/s
Iteration   1: 976975.863 ops/s
Iteration   2: 977685.022 ops/s
Iteration   3: 980195.063 ops/s
Iteration   4: 975051.893 ops/s
Iteration   5: 979337.895 ops/s
Iteration   6: 978392.921 ops/s
Iteration   7: 983222.513 ops/s
Iteration   8: 985613.781 ops/s
Iteration   9: 978905.997 ops/s
Iteration  10: 971831.755 ops/s
Iteration  11: 982701.194 ops/s
Iteration  12: 980026.243 ops/s
Iteration  13: 983135.331 ops/s
Iteration  14: 982350.993 ops/s
Iteration  15: 984506.934 ops/s
Iteration  16: 976324.913 ops/s
Iteration  17: 985380.903 ops/s
Iteration  18: 981458.787 ops/s
Iteration  19: 980672.923 ops/s
Iteration  20: 976801.087 ops/s
Iteration  21: 983732.218 ops/s
Iteration  22: 983095.018 ops/s
Iteration  23: 982032.498 ops/s
Iteration  24: 978443.486 ops/s
Iteration  25: 976708.285 ops/s
Iteration  26: 979458.796 ops/s
Iteration  27: 970060.811 ops/s
Iteration  28: 979970.941 ops/s
Iteration  29: 982655.618 ops/s
Iteration  30: 974670.472 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subListToGreaterThanSizeException":
  979713.339 ±(99.9%) 2551.876 ops/s [Average]
  (min, avg, max) = (970060.811, 979713.339, 985613.781), stdev = 3819.527
  CI (99.9%): [977161.463, 982265.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_subListToGreaterThanSizeException  thrpt   30  979713.339 ± 2551.876  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1310633.315 ops/s
# Warmup Iteration   2: 2396116.097 ops/s
# Warmup Iteration   3: 2646369.306 ops/s
# Warmup Iteration   4: 2668711.480 ops/s
# Warmup Iteration   5: 2418081.855 ops/s
# Warmup Iteration   6: 2433394.374 ops/s
# Warmup Iteration   7: 2638558.158 ops/s
# Warmup Iteration   8: 2651508.068 ops/s
# Warmup Iteration   9: 2672320.298 ops/s
# Warmup Iteration  10: 2668501.644 ops/s
# Warmup Iteration  11: 2630333.388 ops/s
# Warmup Iteration  12: 2668333.289 ops/s
# Warmup Iteration  13: 2644418.406 ops/s
# Warmup Iteration  14: 2659468.700 ops/s
# Warmup Iteration  15: 2667452.468 ops/s
# Warmup Iteration  16: 2664113.967 ops/s
# Warmup Iteration  17: 2667520.108 ops/s
# Warmup Iteration  18: 2666840.239 ops/s
# Warmup Iteration  19: 2673800.477 ops/s
# Warmup Iteration  20: 2671748.135 ops/s
# Warmup Iteration  21: 2678127.378 ops/s
# Warmup Iteration  22: 2665240.535 ops/s
# Warmup Iteration  23: 2658644.645 ops/s
# Warmup Iteration  24: 2650731.219 ops/s
# Warmup Iteration  25: 2678372.681 ops/s
# Warmup Iteration  26: 2669681.951 ops/s
# Warmup Iteration  27: 2667135.080 ops/s
# Warmup Iteration  28: 2675206.955 ops/s
# Warmup Iteration  29: 2676465.538 ops/s
# Warmup Iteration  30: 2668020.279 ops/s
Iteration   1: 2678885.739 ops/s
Iteration   2: 2675388.348 ops/s
Iteration   3: 2663936.040 ops/s
Iteration   4: 2666487.358 ops/s
Iteration   5: 2680766.074 ops/s
Iteration   6: 2671863.333 ops/s
Iteration   7: 2661277.311 ops/s
Iteration   8: 2669474.865 ops/s
Iteration   9: 2654501.734 ops/s
Iteration  10: 2628509.890 ops/s
Iteration  11: 2668300.834 ops/s
Iteration  12: 2667969.889 ops/s
Iteration  13: 2675629.871 ops/s
Iteration  14: 2659768.550 ops/s
Iteration  15: 2670552.784 ops/s
Iteration  16: 2666180.789 ops/s
Iteration  17: 2666858.471 ops/s
Iteration  18: 2688154.967 ops/s
Iteration  19: 2665960.852 ops/s
Iteration  20: 2665253.235 ops/s
Iteration  21: 2671366.320 ops/s
Iteration  22: 2674496.748 ops/s
Iteration  23: 2675347.879 ops/s
Iteration  24: 2661101.991 ops/s
Iteration  25: 2660606.669 ops/s
Iteration  26: 2669639.277 ops/s
Iteration  27: 2664106.271 ops/s
Iteration  28: 2649573.134 ops/s
Iteration  29: 2679952.895 ops/s
Iteration  30: 2651818.997 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByDouble":
  2666791.037 ±(99.9%) 7487.193 ops/s [Average]
  (min, avg, max) = (2628509.890, 2666791.037, 2688154.967), stdev = 11206.479
  CI (99.9%): [2659303.844, 2674278.230] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByDouble  thrpt   30  2666791.037 ± 7487.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 59.012 ops/s
# Warmup Iteration   2: 62.256 ops/s
# Warmup Iteration   3: 84.662 ops/s
# Warmup Iteration   4: 87.097 ops/s
# Warmup Iteration   5: 89.648 ops/s
# Warmup Iteration   6: 91.541 ops/s
# Warmup Iteration   7: 88.405 ops/s
# Warmup Iteration   8: 88.905 ops/s
# Warmup Iteration   9: 89.352 ops/s
# Warmup Iteration  10: 92.877 ops/s
# Warmup Iteration  11: 77.137 ops/s
# Warmup Iteration  12: 90.021 ops/s
# Warmup Iteration  13: 90.728 ops/s
# Warmup Iteration  14: 90.654 ops/s
# Warmup Iteration  15: 92.130 ops/s
# Warmup Iteration  16: 94.259 ops/s
# Warmup Iteration  17: 91.611 ops/s
# Warmup Iteration  18: 89.838 ops/s
# Warmup Iteration  19: 91.377 ops/s
# Warmup Iteration  20: 89.059 ops/s
# Warmup Iteration  21: 89.005 ops/s
# Warmup Iteration  22: 88.130 ops/s
# Warmup Iteration  23: 89.273 ops/s
# Warmup Iteration  24: 89.164 ops/s
# Warmup Iteration  25: 90.394 ops/s
# Warmup Iteration  26: 90.283 ops/s
# Warmup Iteration  27: 92.472 ops/s
# Warmup Iteration  28: 88.522 ops/s
# Warmup Iteration  29: 89.872 ops/s
# Warmup Iteration  30: 89.264 ops/s
Iteration   1: 89.444 ops/s
Iteration   2: 88.961 ops/s
Iteration   3: 87.949 ops/s
Iteration   4: 87.087 ops/s
Iteration   5: 86.654 ops/s
Iteration   6: 88.710 ops/s
Iteration   7: 86.940 ops/s
Iteration   8: 88.281 ops/s
Iteration   9: 88.527 ops/s
Iteration  10: 88.162 ops/s
Iteration  11: 88.471 ops/s
Iteration  12: 92.223 ops/s
Iteration  13: 88.912 ops/s
Iteration  14: 91.266 ops/s
Iteration  15: 89.460 ops/s
Iteration  16: 85.660 ops/s
Iteration  17: 88.134 ops/s
Iteration  18: 88.454 ops/s
Iteration  19: 91.990 ops/s
Iteration  20: 91.998 ops/s
Iteration  21: 90.262 ops/s
Iteration  22: 89.815 ops/s
Iteration  23: 89.354 ops/s
Iteration  24: 88.761 ops/s
Iteration  25: 87.983 ops/s
Iteration  26: 91.995 ops/s
Iteration  27: 92.082 ops/s
Iteration  28: 89.169 ops/s
Iteration  29: 87.414 ops/s
Iteration  30: 91.114 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  89.174 ±(99.9%) 1.180 ops/s [Average]
  (min, avg, max) = (85.660, 89.174, 92.223), stdev = 1.766
  CI (99.9%): [87.995, 90.354] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt   Score   Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  89.174 ± 1.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1344562.446 ops/s
# Warmup Iteration   2: 2495057.714 ops/s
# Warmup Iteration   3: 2753134.479 ops/s
# Warmup Iteration   4: 2735568.077 ops/s
# Warmup Iteration   5: 2526361.996 ops/s
# Warmup Iteration   6: 2506329.434 ops/s
# Warmup Iteration   7: 2735559.547 ops/s
# Warmup Iteration   8: 2750732.227 ops/s
# Warmup Iteration   9: 2772967.413 ops/s
# Warmup Iteration  10: 2742930.052 ops/s
# Warmup Iteration  11: 2764647.798 ops/s
# Warmup Iteration  12: 2766315.178 ops/s
# Warmup Iteration  13: 2765593.193 ops/s
# Warmup Iteration  14: 2769701.977 ops/s
# Warmup Iteration  15: 2744126.997 ops/s
# Warmup Iteration  16: 2774917.434 ops/s
# Warmup Iteration  17: 2780065.240 ops/s
# Warmup Iteration  18: 2775759.138 ops/s
# Warmup Iteration  19: 2761249.579 ops/s
# Warmup Iteration  20: 2767225.521 ops/s
# Warmup Iteration  21: 2763520.971 ops/s
# Warmup Iteration  22: 2773324.528 ops/s
# Warmup Iteration  23: 2769871.088 ops/s
# Warmup Iteration  24: 2762783.299 ops/s
# Warmup Iteration  25: 2751934.492 ops/s
# Warmup Iteration  26: 2755199.616 ops/s
# Warmup Iteration  27: 2765330.040 ops/s
# Warmup Iteration  28: 2777937.216 ops/s
# Warmup Iteration  29: 2775101.761 ops/s
# Warmup Iteration  30: 2767439.582 ops/s
Iteration   1: 2762473.869 ops/s
Iteration   2: 2779848.310 ops/s
Iteration   3: 2747685.963 ops/s
Iteration   4: 2737090.814 ops/s
Iteration   5: 2771070.507 ops/s
Iteration   6: 2755847.628 ops/s
Iteration   7: 2780735.190 ops/s
Iteration   8: 2768156.609 ops/s
Iteration   9: 2781864.448 ops/s
Iteration  10: 2773304.215 ops/s
Iteration  11: 2772381.010 ops/s
Iteration  12: 2768577.935 ops/s
Iteration  13: 2790674.944 ops/s
Iteration  14: 2782916.721 ops/s
Iteration  15: 2727471.698 ops/s
Iteration  16: 2760908.215 ops/s
Iteration  17: 2787514.067 ops/s
Iteration  18: 2777095.868 ops/s
Iteration  19: 2700595.552 ops/s
Iteration  20: 2775157.148 ops/s
Iteration  21: 2759988.671 ops/s
Iteration  22: 2749748.664 ops/s
Iteration  23: 2782425.301 ops/s
Iteration  24: 2765759.661 ops/s
Iteration  25: 2780593.831 ops/s
Iteration  26: 2778192.607 ops/s
Iteration  27: 2768471.326 ops/s
Iteration  28: 2727589.966 ops/s
Iteration  29: 2779951.595 ops/s
Iteration  30: 2776245.596 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByFloat":
  2765677.931 ±(99.9%) 13670.265 ops/s [Average]
  (min, avg, max) = (2700595.552, 2765677.931, 2790674.944), stdev = 20461.011
  CI (99.9%): [2752007.666, 2779348.196] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByFloat  thrpt   30  2765677.931 ± 13670.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 58.616 ops/s
# Warmup Iteration   2: 62.990 ops/s
# Warmup Iteration   3: 88.468 ops/s
# Warmup Iteration   4: 86.921 ops/s
# Warmup Iteration   5: 90.581 ops/s
# Warmup Iteration   6: 90.627 ops/s
# Warmup Iteration   7: 91.506 ops/s
# Warmup Iteration   8: 92.978 ops/s
# Warmup Iteration   9: 89.556 ops/s
# Warmup Iteration  10: 91.515 ops/s
# Warmup Iteration  11: 74.346 ops/s
# Warmup Iteration  12: 92.863 ops/s
# Warmup Iteration  13: 92.794 ops/s
# Warmup Iteration  14: 94.258 ops/s
# Warmup Iteration  15: 93.207 ops/s
# Warmup Iteration  16: 92.708 ops/s
# Warmup Iteration  17: 91.706 ops/s
# Warmup Iteration  18: 91.091 ops/s
# Warmup Iteration  19: 93.227 ops/s
# Warmup Iteration  20: 89.839 ops/s
# Warmup Iteration  21: 91.746 ops/s
# Warmup Iteration  22: 94.068 ops/s
# Warmup Iteration  23: 89.746 ops/s
# Warmup Iteration  24: 93.091 ops/s
# Warmup Iteration  25: 91.882 ops/s
# Warmup Iteration  26: 90.745 ops/s
# Warmup Iteration  27: 93.652 ops/s
# Warmup Iteration  28: 91.508 ops/s
# Warmup Iteration  29: 89.739 ops/s
# Warmup Iteration  30: 92.926 ops/s
Iteration   1: 90.846 ops/s
Iteration   2: 91.997 ops/s
Iteration   3: 91.342 ops/s
Iteration   4: 90.997 ops/s
Iteration   5: 86.724 ops/s
Iteration   6: 89.101 ops/s
Iteration   7: 90.754 ops/s
Iteration   8: 88.524 ops/s
Iteration   9: 83.797 ops/s
Iteration  10: 87.359 ops/s
Iteration  11: 91.536 ops/s
Iteration  12: 90.913 ops/s
Iteration  13: 84.736 ops/s
Iteration  14: 86.374 ops/s
Iteration  15: 89.918 ops/s
Iteration  16: 89.500 ops/s
Iteration  17: 87.265 ops/s
Iteration  18: 88.271 ops/s
Iteration  19: 92.224 ops/s
Iteration  20: 84.973 ops/s
Iteration  21: 85.172 ops/s
Iteration  22: 88.854 ops/s
Iteration  23: 91.165 ops/s
Iteration  24: 88.156 ops/s
Iteration  25: 87.500 ops/s
Iteration  26: 90.936 ops/s
Iteration  27: 90.392 ops/s
Iteration  28: 90.176 ops/s
Iteration  29: 89.986 ops/s
Iteration  30: 92.635 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  89.071 ±(99.9%) 1.617 ops/s [Average]
  (min, avg, max) = (83.797, 89.071, 92.635), stdev = 2.421
  CI (99.9%): [87.453, 90.688] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt   Score   Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  89.071 ± 1.617  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2146589.303 ops/s
# Warmup Iteration   2: 5040414.504 ops/s
# Warmup Iteration   3: 5003650.407 ops/s
# Warmup Iteration   4: 4156318.411 ops/s
# Warmup Iteration   5: 4974290.103 ops/s
# Warmup Iteration   6: 4946907.023 ops/s
# Warmup Iteration   7: 4987073.101 ops/s
# Warmup Iteration   8: 5015766.477 ops/s
# Warmup Iteration   9: 5020702.322 ops/s
# Warmup Iteration  10: 5017835.951 ops/s
# Warmup Iteration  11: 5030662.189 ops/s
# Warmup Iteration  12: 4992634.328 ops/s
# Warmup Iteration  13: 4979622.735 ops/s
# Warmup Iteration  14: 5021664.034 ops/s
# Warmup Iteration  15: 4979657.510 ops/s
# Warmup Iteration  16: 5030723.655 ops/s
# Warmup Iteration  17: 5057447.656 ops/s
# Warmup Iteration  18: 5051769.046 ops/s
# Warmup Iteration  19: 4985306.912 ops/s
# Warmup Iteration  20: 5002263.675 ops/s
# Warmup Iteration  21: 5018032.757 ops/s
# Warmup Iteration  22: 5040990.044 ops/s
# Warmup Iteration  23: 5061210.720 ops/s
# Warmup Iteration  24: 5055472.334 ops/s
# Warmup Iteration  25: 5026143.932 ops/s
# Warmup Iteration  26: 5035879.610 ops/s
# Warmup Iteration  27: 5004622.479 ops/s
# Warmup Iteration  28: 5049732.929 ops/s
# Warmup Iteration  29: 5067778.136 ops/s
# Warmup Iteration  30: 5031230.166 ops/s
Iteration   1: 5046416.826 ops/s
Iteration   2: 5053472.772 ops/s
Iteration   3: 5051191.476 ops/s
Iteration   4: 5063265.133 ops/s
Iteration   5: 5061507.065 ops/s
Iteration   6: 5074089.823 ops/s
Iteration   7: 5053431.596 ops/s
Iteration   8: 5071915.466 ops/s
Iteration   9: 5050262.758 ops/s
Iteration  10: 4990528.542 ops/s
Iteration  11: 5014600.550 ops/s
Iteration  12: 5046990.147 ops/s
Iteration  13: 5033241.857 ops/s
Iteration  14: 5057095.172 ops/s
Iteration  15: 5054223.158 ops/s
Iteration  16: 5070844.286 ops/s
Iteration  17: 4965360.155 ops/s
Iteration  18: 5056540.516 ops/s
Iteration  19: 5072129.672 ops/s
Iteration  20: 5063671.098 ops/s
Iteration  21: 4873206.336 ops/s
Iteration  22: 5071413.937 ops/s
Iteration  23: 5060076.325 ops/s
Iteration  24: 5069097.819 ops/s
Iteration  25: 5078644.963 ops/s
Iteration  26: 5053126.571 ops/s
Iteration  27: 5052174.250 ops/s
Iteration  28: 5064246.462 ops/s
Iteration  29: 5055466.743 ops/s
Iteration  30: 5036793.250 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByInt":
  5045500.824 ±(99.9%) 27093.128 ops/s [Average]
  (min, avg, max) = (4873206.336, 5045500.824, 5078644.963), stdev = 40551.721
  CI (99.9%): [5018407.696, 5072593.952] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByInt  thrpt   30  5045500.824 ± 27093.128  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2151016.117 ops/s
# Warmup Iteration   2: 5022387.161 ops/s
# Warmup Iteration   3: 4994320.120 ops/s
# Warmup Iteration   4: 4184610.489 ops/s
# Warmup Iteration   5: 5041967.553 ops/s
# Warmup Iteration   6: 5039947.929 ops/s
# Warmup Iteration   7: 5005938.467 ops/s
# Warmup Iteration   8: 5044891.546 ops/s
# Warmup Iteration   9: 5027186.630 ops/s
# Warmup Iteration  10: 5027401.054 ops/s
# Warmup Iteration  11: 5014414.439 ops/s
# Warmup Iteration  12: 5036154.639 ops/s
# Warmup Iteration  13: 4945296.341 ops/s
# Warmup Iteration  14: 5042383.969 ops/s
# Warmup Iteration  15: 5008124.134 ops/s
# Warmup Iteration  16: 5050682.357 ops/s
# Warmup Iteration  17: 5090526.215 ops/s
# Warmup Iteration  18: 5082631.467 ops/s
# Warmup Iteration  19: 5086743.028 ops/s
# Warmup Iteration  20: 5012155.315 ops/s
# Warmup Iteration  21: 5072372.682 ops/s
# Warmup Iteration  22: 5070572.169 ops/s
# Warmup Iteration  23: 5056581.957 ops/s
# Warmup Iteration  24: 5090883.716 ops/s
# Warmup Iteration  25: 5009904.021 ops/s
# Warmup Iteration  26: 5055033.984 ops/s
# Warmup Iteration  27: 5046816.057 ops/s
# Warmup Iteration  28: 5076672.548 ops/s
# Warmup Iteration  29: 5048824.749 ops/s
# Warmup Iteration  30: 4985313.861 ops/s
Iteration   1: 5094386.173 ops/s
Iteration   2: 5074695.781 ops/s
Iteration   3: 5112534.311 ops/s
Iteration   4: 5064861.995 ops/s
Iteration   5: 5084596.933 ops/s
Iteration   6: 5097342.988 ops/s
Iteration   7: 5076968.298 ops/s
Iteration   8: 5063982.271 ops/s
Iteration   9: 5027962.671 ops/s
Iteration  10: 5095140.605 ops/s
Iteration  11: 5065645.467 ops/s
Iteration  12: 5052835.621 ops/s
Iteration  13: 4960547.183 ops/s
Iteration  14: 5102615.727 ops/s
Iteration  15: 5080982.964 ops/s
Iteration  16: 5082983.096 ops/s
Iteration  17: 4947841.891 ops/s
Iteration  18: 5083995.559 ops/s
Iteration  19: 5079300.100 ops/s
Iteration  20: 5078057.285 ops/s
Iteration  21: 5106846.040 ops/s
Iteration  22: 4950723.747 ops/s
Iteration  23: 5071459.203 ops/s
Iteration  24: 5062643.302 ops/s
Iteration  25: 5076523.903 ops/s
Iteration  26: 5060476.194 ops/s
Iteration  27: 5051827.061 ops/s
Iteration  28: 5004841.262 ops/s
Iteration  29: 4996458.555 ops/s
Iteration  30: 5015315.451 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByLong":
  5057479.721 ±(99.9%) 30099.423 ops/s [Average]
  (min, avg, max) = (4947841.891, 5057479.721, 5112534.311), stdev = 45051.403
  CI (99.9%): [5027380.298, 5087579.144] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumByLong  thrpt   30  5057479.721 ± 30099.423  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5511460.581 ops/s
# Warmup Iteration   2: 11607684.645 ops/s
# Warmup Iteration   3: 9857924.272 ops/s
# Warmup Iteration   4: 11719477.915 ops/s
# Warmup Iteration   5: 11662719.653 ops/s
# Warmup Iteration   6: 11678101.442 ops/s
# Warmup Iteration   7: 11667092.391 ops/s
# Warmup Iteration   8: 11705402.866 ops/s
# Warmup Iteration   9: 11684897.510 ops/s
# Warmup Iteration  10: 11659426.304 ops/s
# Warmup Iteration  11: 11670145.873 ops/s
# Warmup Iteration  12: 11604203.811 ops/s
# Warmup Iteration  13: 11686434.172 ops/s
# Warmup Iteration  14: 11689802.228 ops/s
# Warmup Iteration  15: 11672377.940 ops/s
# Warmup Iteration  16: 11739564.635 ops/s
# Warmup Iteration  17: 11827019.498 ops/s
# Warmup Iteration  18: 11777991.342 ops/s
# Warmup Iteration  19: 11832057.891 ops/s
# Warmup Iteration  20: 11791175.273 ops/s
# Warmup Iteration  21: 11817918.857 ops/s
# Warmup Iteration  22: 11805902.263 ops/s
# Warmup Iteration  23: 11837007.744 ops/s
# Warmup Iteration  24: 11821364.125 ops/s
# Warmup Iteration  25: 11700700.723 ops/s
# Warmup Iteration  26: 11863487.792 ops/s
# Warmup Iteration  27: 11768499.173 ops/s
# Warmup Iteration  28: 11882012.817 ops/s
# Warmup Iteration  29: 11823564.007 ops/s
# Warmup Iteration  30: 11707223.535 ops/s
Iteration   1: 11855970.906 ops/s
Iteration   2: 11856513.376 ops/s
Iteration   3: 11834882.241 ops/s
Iteration   4: 11832946.203 ops/s
Iteration   5: 11787301.992 ops/s
Iteration   6: 11851937.698 ops/s
Iteration   7: 11778140.786 ops/s
Iteration   8: 11836913.254 ops/s
Iteration   9: 11782408.002 ops/s
Iteration  10: 11768515.873 ops/s
Iteration  11: 11602802.377 ops/s
Iteration  12: 11848537.129 ops/s
Iteration  13: 11627492.959 ops/s
Iteration  14: 11792475.761 ops/s
Iteration  15: 11799048.665 ops/s
Iteration  16: 11842467.707 ops/s
Iteration  17: 11869246.587 ops/s
Iteration  18: 11817647.000 ops/s
Iteration  19: 11660502.471 ops/s
Iteration  20: 11771038.403 ops/s
Iteration  21: 11838240.255 ops/s
Iteration  22: 11815702.740 ops/s
Iteration  23: 11633171.426 ops/s
Iteration  24: 11616872.002 ops/s
Iteration  25: 11827980.936 ops/s
Iteration  26: 11851624.134 ops/s
Iteration  27: 11757580.802 ops/s
Iteration  28: 11859392.019 ops/s
Iteration  29: 11775695.373 ops/s
Iteration  30: 11791142.674 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumDouble":
  11786139.725 ±(99.9%) 52585.781 ops/s [Average]
  (min, avg, max) = (11602802.377, 11786139.725, 11869246.587), stdev = 78707.928
  CI (99.9%): [11733553.944, 11838725.506] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumDouble  thrpt   30  11786139.725 ± 52585.781  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 176.171 ops/s
# Warmup Iteration   2: 197.134 ops/s
# Warmup Iteration   3: 236.177 ops/s
# Warmup Iteration   4: 252.645 ops/s
# Warmup Iteration   5: 254.216 ops/s
# Warmup Iteration   6: 252.525 ops/s
# Warmup Iteration   7: 252.978 ops/s
# Warmup Iteration   8: 254.854 ops/s
# Warmup Iteration   9: 254.764 ops/s
# Warmup Iteration  10: 253.421 ops/s
# Warmup Iteration  11: 251.626 ops/s
# Warmup Iteration  12: 247.492 ops/s
# Warmup Iteration  13: 234.903 ops/s
# Warmup Iteration  14: 214.018 ops/s
# Warmup Iteration  15: 247.637 ops/s
# Warmup Iteration  16: 248.952 ops/s
# Warmup Iteration  17: 245.768 ops/s
# Warmup Iteration  18: 249.115 ops/s
# Warmup Iteration  19: 246.859 ops/s
# Warmup Iteration  20: 248.652 ops/s
# Warmup Iteration  21: 247.764 ops/s
# Warmup Iteration  22: 247.570 ops/s
# Warmup Iteration  23: 249.056 ops/s
# Warmup Iteration  24: 249.198 ops/s
# Warmup Iteration  25: 246.090 ops/s
# Warmup Iteration  26: 246.227 ops/s
# Warmup Iteration  27: 247.661 ops/s
# Warmup Iteration  28: 247.469 ops/s
# Warmup Iteration  29: 248.452 ops/s
# Warmup Iteration  30: 248.260 ops/s
Iteration   1: 247.320 ops/s
Iteration   2: 248.932 ops/s
Iteration   3: 248.781 ops/s
Iteration   4: 242.573 ops/s
Iteration   5: 248.691 ops/s
Iteration   6: 247.490 ops/s
Iteration   7: 249.367 ops/s
Iteration   8: 248.651 ops/s
Iteration   9: 247.889 ops/s
Iteration  10: 246.758 ops/s
Iteration  11: 246.555 ops/s
Iteration  12: 247.876 ops/s
Iteration  13: 248.900 ops/s
Iteration  14: 248.446 ops/s
Iteration  15: 244.073 ops/s
Iteration  16: 249.271 ops/s
Iteration  17: 247.698 ops/s
Iteration  18: 238.784 ops/s
Iteration  19: 248.372 ops/s
Iteration  20: 246.354 ops/s
Iteration  21: 248.562 ops/s
Iteration  22: 248.190 ops/s
Iteration  23: 248.335 ops/s
Iteration  24: 249.218 ops/s
Iteration  25: 248.101 ops/s
Iteration  26: 249.462 ops/s
Iteration  27: 249.766 ops/s
Iteration  28: 246.489 ops/s
Iteration  29: 248.266 ops/s
Iteration  30: 241.899 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  247.369 ±(99.9%) 1.659 ops/s [Average]
  (min, avg, max) = (238.784, 247.369, 249.766), stdev = 2.483
  CI (99.9%): [245.710, 249.028] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt    Score   Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  247.369 ± 1.659  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 210.928 ops/s
# Warmup Iteration   2: 240.234 ops/s
# Warmup Iteration   3: 326.664 ops/s
# Warmup Iteration   4: 322.527 ops/s
# Warmup Iteration   5: 323.621 ops/s
# Warmup Iteration   6: 325.344 ops/s
# Warmup Iteration   7: 325.893 ops/s
# Warmup Iteration   8: 325.885 ops/s
# Warmup Iteration   9: 322.931 ops/s
# Warmup Iteration  10: 301.821 ops/s
# Warmup Iteration  11: 249.634 ops/s
# Warmup Iteration  12: 302.366 ops/s
# Warmup Iteration  13: 302.218 ops/s
# Warmup Iteration  14: 300.851 ops/s
# Warmup Iteration  15: 303.457 ops/s
# Warmup Iteration  16: 301.786 ops/s
# Warmup Iteration  17: 302.564 ops/s
# Warmup Iteration  18: 303.855 ops/s
# Warmup Iteration  19: 302.190 ops/s
# Warmup Iteration  20: 304.327 ops/s
# Warmup Iteration  21: 302.613 ops/s
# Warmup Iteration  22: 303.773 ops/s
# Warmup Iteration  23: 297.864 ops/s
# Warmup Iteration  24: 303.286 ops/s
# Warmup Iteration  25: 300.577 ops/s
# Warmup Iteration  26: 304.634 ops/s
# Warmup Iteration  27: 301.687 ops/s
# Warmup Iteration  28: 305.019 ops/s
# Warmup Iteration  29: 301.043 ops/s
# Warmup Iteration  30: 305.623 ops/s
Iteration   1: 299.903 ops/s
Iteration   2: 303.654 ops/s
Iteration   3: 301.472 ops/s
Iteration   4: 304.060 ops/s
Iteration   5: 299.544 ops/s
Iteration   6: 298.626 ops/s
Iteration   7: 303.848 ops/s
Iteration   8: 303.677 ops/s
Iteration   9: 302.327 ops/s
Iteration  10: 303.730 ops/s
Iteration  11: 304.567 ops/s
Iteration  12: 302.905 ops/s
Iteration  13: 301.124 ops/s
Iteration  14: 298.710 ops/s
Iteration  15: 302.948 ops/s
Iteration  16: 304.140 ops/s
Iteration  17: 303.304 ops/s
Iteration  18: 302.938 ops/s
Iteration  19: 306.117 ops/s
Iteration  20: 304.499 ops/s
Iteration  21: 302.351 ops/s
Iteration  22: 305.225 ops/s
Iteration  23: 304.805 ops/s
Iteration  24: 305.462 ops/s
Iteration  25: 299.780 ops/s
Iteration  26: 304.452 ops/s
Iteration  27: 301.763 ops/s
Iteration  28: 303.965 ops/s
Iteration  29: 299.686 ops/s
Iteration  30: 302.753 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  302.744 ±(99.9%) 1.377 ops/s [Average]
  (min, avg, max) = (298.626, 302.744, 306.117), stdev = 2.061
  CI (99.9%): [301.367, 304.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt    Score   Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  302.744 ± 1.377  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5638289.459 ops/s
# Warmup Iteration   2: 11615660.773 ops/s
# Warmup Iteration   3: 9727997.254 ops/s
# Warmup Iteration   4: 11402777.095 ops/s
# Warmup Iteration   5: 11473212.272 ops/s
# Warmup Iteration   6: 11419604.104 ops/s
# Warmup Iteration   7: 11501139.657 ops/s
# Warmup Iteration   8: 11407810.073 ops/s
# Warmup Iteration   9: 11418832.126 ops/s
# Warmup Iteration  10: 11392271.938 ops/s
# Warmup Iteration  11: 11402893.784 ops/s
# Warmup Iteration  12: 11286400.806 ops/s
# Warmup Iteration  13: 11317531.126 ops/s
# Warmup Iteration  14: 11375916.225 ops/s
# Warmup Iteration  15: 11425022.459 ops/s
# Warmup Iteration  16: 11449948.800 ops/s
# Warmup Iteration  17: 11676875.490 ops/s
# Warmup Iteration  18: 11692115.312 ops/s
# Warmup Iteration  19: 11749366.506 ops/s
# Warmup Iteration  20: 11691962.878 ops/s
# Warmup Iteration  21: 11689069.033 ops/s
# Warmup Iteration  22: 11659520.258 ops/s
# Warmup Iteration  23: 11706870.437 ops/s
# Warmup Iteration  24: 11674355.235 ops/s
# Warmup Iteration  25: 11559519.518 ops/s
# Warmup Iteration  26: 11696038.316 ops/s
# Warmup Iteration  27: 11666242.081 ops/s
# Warmup Iteration  28: 11653206.896 ops/s
# Warmup Iteration  29: 11642929.157 ops/s
# Warmup Iteration  30: 11747977.204 ops/s
Iteration   1: 11682737.466 ops/s
Iteration   2: 11733264.352 ops/s
Iteration   3: 11700269.271 ops/s
Iteration   4: 11691969.543 ops/s
Iteration   5: 11629011.344 ops/s
Iteration   6: 11746720.372 ops/s
Iteration   7: 11544309.011 ops/s
Iteration   8: 11553216.095 ops/s
Iteration   9: 11496001.194 ops/s
Iteration  10: 11656694.983 ops/s
Iteration  11: 11645863.345 ops/s
Iteration  12: 11664733.351 ops/s
Iteration  13: 11667998.620 ops/s
Iteration  14: 11751492.817 ops/s
Iteration  15: 11647636.904 ops/s
Iteration  16: 11644950.369 ops/s
Iteration  17: 11698348.588 ops/s
Iteration  18: 11513556.011 ops/s
Iteration  19: 11585183.985 ops/s
Iteration  20: 11650639.143 ops/s
Iteration  21: 11737770.835 ops/s
Iteration  22: 11484564.246 ops/s
Iteration  23: 11360709.876 ops/s
Iteration  24: 11706525.210 ops/s
Iteration  25: 11614965.769 ops/s
Iteration  26: 11590129.086 ops/s
Iteration  27: 11598850.221 ops/s
Iteration  28: 11677082.414 ops/s
Iteration  29: 11710569.609 ops/s
Iteration  30: 11711984.681 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumFloat":
  11636591.624 ±(99.9%) 60100.490 ops/s [Average]
  (min, avg, max) = (11360709.876, 11636591.624, 11751492.817), stdev = 89955.591
  CI (99.9%): [11576491.134, 11696692.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumFloat  thrpt   30  11636591.624 ± 60100.490  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 172.580 ops/s
# Warmup Iteration   2: 193.374 ops/s
# Warmup Iteration   3: 226.900 ops/s
# Warmup Iteration   4: 248.324 ops/s
# Warmup Iteration   5: 247.184 ops/s
# Warmup Iteration   6: 248.798 ops/s
# Warmup Iteration   7: 249.970 ops/s
# Warmup Iteration   8: 246.996 ops/s
# Warmup Iteration   9: 248.240 ops/s
# Warmup Iteration  10: 249.926 ops/s
# Warmup Iteration  11: 249.138 ops/s
# Warmup Iteration  12: 236.861 ops/s
# Warmup Iteration  13: 226.900 ops/s
# Warmup Iteration  14: 188.631 ops/s
# Warmup Iteration  15: 226.044 ops/s
# Warmup Iteration  16: 224.003 ops/s
# Warmup Iteration  17: 224.866 ops/s
# Warmup Iteration  18: 225.962 ops/s
# Warmup Iteration  19: 228.692 ops/s
# Warmup Iteration  20: 227.855 ops/s
# Warmup Iteration  21: 228.194 ops/s
# Warmup Iteration  22: 226.971 ops/s
# Warmup Iteration  23: 228.243 ops/s
# Warmup Iteration  24: 223.667 ops/s
# Warmup Iteration  25: 228.458 ops/s
# Warmup Iteration  26: 227.191 ops/s
# Warmup Iteration  27: 227.790 ops/s
# Warmup Iteration  28: 226.891 ops/s
# Warmup Iteration  29: 228.414 ops/s
# Warmup Iteration  30: 227.300 ops/s
Iteration   1: 228.674 ops/s
Iteration   2: 229.736 ops/s
Iteration   3: 228.401 ops/s
Iteration   4: 228.117 ops/s
Iteration   5: 226.038 ops/s
Iteration   6: 228.029 ops/s
Iteration   7: 226.994 ops/s
Iteration   8: 226.107 ops/s
Iteration   9: 225.380 ops/s
Iteration  10: 224.921 ops/s
Iteration  11: 227.460 ops/s
Iteration  12: 226.700 ops/s
Iteration  13: 227.177 ops/s
Iteration  14: 226.179 ops/s
Iteration  15: 226.581 ops/s
Iteration  16: 228.181 ops/s
Iteration  17: 227.793 ops/s
Iteration  18: 228.641 ops/s
Iteration  19: 223.309 ops/s
Iteration  20: 226.032 ops/s
Iteration  21: 226.862 ops/s
Iteration  22: 226.405 ops/s
Iteration  23: 222.885 ops/s
Iteration  24: 226.225 ops/s
Iteration  25: 228.204 ops/s
Iteration  26: 220.291 ops/s
Iteration  27: 228.057 ops/s
Iteration  28: 228.649 ops/s
Iteration  29: 223.039 ops/s
Iteration  30: 223.487 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  226.485 ±(99.9%) 1.425 ops/s [Average]
  (min, avg, max) = (220.291, 226.485, 229.736), stdev = 2.133
  CI (99.9%): [225.060, 227.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt    Score   Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  226.485 ± 1.425  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 209.795 ops/s
# Warmup Iteration   2: 238.348 ops/s
# Warmup Iteration   3: 324.324 ops/s
# Warmup Iteration   4: 323.218 ops/s
# Warmup Iteration   5: 319.383 ops/s
# Warmup Iteration   6: 323.612 ops/s
# Warmup Iteration   7: 319.070 ops/s
# Warmup Iteration   8: 323.385 ops/s
# Warmup Iteration   9: 321.556 ops/s
# Warmup Iteration  10: 300.974 ops/s
# Warmup Iteration  11: 251.609 ops/s
# Warmup Iteration  12: 300.233 ops/s
# Warmup Iteration  13: 301.240 ops/s
# Warmup Iteration  14: 304.572 ops/s
# Warmup Iteration  15: 297.318 ops/s
# Warmup Iteration  16: 302.520 ops/s
# Warmup Iteration  17: 301.094 ops/s
# Warmup Iteration  18: 303.068 ops/s
# Warmup Iteration  19: 301.490 ops/s
# Warmup Iteration  20: 297.417 ops/s
# Warmup Iteration  21: 301.011 ops/s
# Warmup Iteration  22: 303.609 ops/s
# Warmup Iteration  23: 297.725 ops/s
# Warmup Iteration  24: 302.643 ops/s
# Warmup Iteration  25: 301.373 ops/s
# Warmup Iteration  26: 300.640 ops/s
# Warmup Iteration  27: 298.586 ops/s
# Warmup Iteration  28: 301.768 ops/s
# Warmup Iteration  29: 300.168 ops/s
# Warmup Iteration  30: 301.527 ops/s
Iteration   1: 299.198 ops/s
Iteration   2: 301.906 ops/s
Iteration   3: 300.384 ops/s
Iteration   4: 300.935 ops/s
Iteration   5: 301.903 ops/s
Iteration   6: 301.489 ops/s
Iteration   7: 303.197 ops/s
Iteration   8: 300.808 ops/s
Iteration   9: 300.459 ops/s
Iteration  10: 301.266 ops/s
Iteration  11: 300.080 ops/s
Iteration  12: 298.533 ops/s
Iteration  13: 298.090 ops/s
Iteration  14: 304.475 ops/s
Iteration  15: 303.105 ops/s
Iteration  16: 302.027 ops/s
Iteration  17: 302.647 ops/s
Iteration  18: 299.863 ops/s
Iteration  19: 302.008 ops/s
Iteration  20: 302.140 ops/s
Iteration  21: 299.750 ops/s
Iteration  22: 302.562 ops/s
Iteration  23: 302.712 ops/s
Iteration  24: 301.241 ops/s
Iteration  25: 302.091 ops/s
Iteration  26: 302.149 ops/s
Iteration  27: 300.253 ops/s
Iteration  28: 301.708 ops/s
Iteration  29: 301.284 ops/s
Iteration  30: 302.508 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  301.359 ±(99.9%) 0.953 ops/s [Average]
  (min, avg, max) = (298.090, 301.359, 304.475), stdev = 1.427
  CI (99.9%): [300.406, 302.312] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt    Score   Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  301.359 ± 0.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6519001.682 ops/s
# Warmup Iteration   2: 13334253.727 ops/s
# Warmup Iteration   3: 11203544.671 ops/s
# Warmup Iteration   4: 13060620.360 ops/s
# Warmup Iteration   5: 13302063.730 ops/s
# Warmup Iteration   6: 13423955.993 ops/s
# Warmup Iteration   7: 13386148.316 ops/s
# Warmup Iteration   8: 13368101.124 ops/s
# Warmup Iteration   9: 13387591.621 ops/s
# Warmup Iteration  10: 13284227.298 ops/s
# Warmup Iteration  11: 13384178.223 ops/s
# Warmup Iteration  12: 13322111.793 ops/s
# Warmup Iteration  13: 13295366.057 ops/s
# Warmup Iteration  14: 13308272.294 ops/s
# Warmup Iteration  15: 13276190.743 ops/s
# Warmup Iteration  16: 13474233.886 ops/s
# Warmup Iteration  17: 13213509.246 ops/s
# Warmup Iteration  18: 13430253.748 ops/s
# Warmup Iteration  19: 13441431.591 ops/s
# Warmup Iteration  20: 13436793.559 ops/s
# Warmup Iteration  21: 13386701.074 ops/s
# Warmup Iteration  22: 13381146.291 ops/s
# Warmup Iteration  23: 13335317.970 ops/s
# Warmup Iteration  24: 13393056.320 ops/s
# Warmup Iteration  25: 13466149.263 ops/s
# Warmup Iteration  26: 13406752.600 ops/s
# Warmup Iteration  27: 13468908.372 ops/s
# Warmup Iteration  28: 13413662.465 ops/s
# Warmup Iteration  29: 13458315.122 ops/s
# Warmup Iteration  30: 13421708.873 ops/s
Iteration   1: 13376946.810 ops/s
Iteration   2: 13458467.448 ops/s
Iteration   3: 13455036.023 ops/s
Iteration   4: 13320985.546 ops/s
Iteration   5: 13362678.469 ops/s
Iteration   6: 13420993.360 ops/s
Iteration   7: 13460690.973 ops/s
Iteration   8: 13190364.528 ops/s
Iteration   9: 13386550.191 ops/s
Iteration  10: 13241302.973 ops/s
Iteration  11: 13421595.648 ops/s
Iteration  12: 13361829.047 ops/s
Iteration  13: 13329958.778 ops/s
Iteration  14: 13394009.719 ops/s
Iteration  15: 13464813.384 ops/s
Iteration  16: 13399831.393 ops/s
Iteration  17: 13200324.016 ops/s
Iteration  18: 13449854.019 ops/s
Iteration  19: 13416420.365 ops/s
Iteration  20: 13456175.606 ops/s
Iteration  21: 13406610.424 ops/s
Iteration  22: 13446445.747 ops/s
Iteration  23: 13403343.202 ops/s
Iteration  24: 13460032.974 ops/s
Iteration  25: 13450771.241 ops/s
Iteration  26: 13250716.213 ops/s
Iteration  27: 13451911.274 ops/s
Iteration  28: 13480602.471 ops/s
Iteration  29: 13235375.617 ops/s
Iteration  30: 13240297.796 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumInteger":
  13379831.175 ±(99.9%) 58871.953 ops/s [Average]
  (min, avg, max) = (13190364.528, 13379831.175, 13480602.471), stdev = 88116.775
  CI (99.9%): [13320959.222, 13438703.128] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumInteger  thrpt   30  13379831.175 ± 58871.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6483487.720 ops/s
# Warmup Iteration   2: 13400994.960 ops/s
# Warmup Iteration   3: 11254707.387 ops/s
# Warmup Iteration   4: 13168526.668 ops/s
# Warmup Iteration   5: 13274462.005 ops/s
# Warmup Iteration   6: 13281515.035 ops/s
# Warmup Iteration   7: 13081316.804 ops/s
# Warmup Iteration   8: 13113710.422 ops/s
# Warmup Iteration   9: 13296943.210 ops/s
# Warmup Iteration  10: 13328673.592 ops/s
# Warmup Iteration  11: 13313833.656 ops/s
# Warmup Iteration  12: 13176766.667 ops/s
# Warmup Iteration  13: 13303931.186 ops/s
# Warmup Iteration  14: 13313596.182 ops/s
# Warmup Iteration  15: 13260541.386 ops/s
# Warmup Iteration  16: 13336114.393 ops/s
# Warmup Iteration  17: 13450863.222 ops/s
# Warmup Iteration  18: 13453952.776 ops/s
# Warmup Iteration  19: 13283261.673 ops/s
# Warmup Iteration  20: 13424375.430 ops/s
# Warmup Iteration  21: 13233780.537 ops/s
# Warmup Iteration  22: 13354432.602 ops/s
# Warmup Iteration  23: 13295022.141 ops/s
# Warmup Iteration  24: 13282881.976 ops/s
# Warmup Iteration  25: 13366975.729 ops/s
# Warmup Iteration  26: 13319564.466 ops/s
# Warmup Iteration  27: 13363400.040 ops/s
# Warmup Iteration  28: 13354449.296 ops/s
# Warmup Iteration  29: 13290116.291 ops/s
# Warmup Iteration  30: 13440250.752 ops/s
Iteration   1: 13436869.457 ops/s
Iteration   2: 13141266.256 ops/s
Iteration   3: 13274262.479 ops/s
Iteration   4: 13157830.996 ops/s
Iteration   5: 13398096.659 ops/s
Iteration   6: 13329955.162 ops/s
Iteration   7: 13366508.849 ops/s
Iteration   8: 13243583.541 ops/s
Iteration   9: 13406655.279 ops/s
Iteration  10: 13394899.970 ops/s
Iteration  11: 13486432.627 ops/s
Iteration  12: 13392127.221 ops/s
Iteration  13: 13379823.379 ops/s
Iteration  14: 13457124.457 ops/s
Iteration  15: 13392585.544 ops/s
Iteration  16: 13366391.784 ops/s
Iteration  17: 13484055.045 ops/s
Iteration  18: 13481715.260 ops/s
Iteration  19: 13308083.087 ops/s
Iteration  20: 13150539.221 ops/s
Iteration  21: 13403158.903 ops/s
Iteration  22: 13369713.473 ops/s
Iteration  23: 13294814.425 ops/s
Iteration  24: 13428952.411 ops/s
Iteration  25: 13327934.196 ops/s
Iteration  26: 13428958.166 ops/s
Iteration  27: 13400829.368 ops/s
Iteration  28: 13380769.998 ops/s
Iteration  29: 13380561.704 ops/s
Iteration  30: 13413108.294 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumLong":
  13362586.907 ±(99.9%) 61774.772 ops/s [Average]
  (min, avg, max) = (13141266.256, 13362586.907, 13486432.627), stdev = 92461.577
  CI (99.9%): [13300812.136, 13424361.679] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_sumLong  thrpt   30  13362586.907 ± 61774.772  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5358559.647 ops/s
# Warmup Iteration   2: 10775573.857 ops/s
# Warmup Iteration   3: 9285165.870 ops/s
# Warmup Iteration   4: 11002088.010 ops/s
# Warmup Iteration   5: 10961753.582 ops/s
# Warmup Iteration   6: 10925566.617 ops/s
# Warmup Iteration   7: 10914804.897 ops/s
# Warmup Iteration   8: 10927635.235 ops/s
# Warmup Iteration   9: 10844676.965 ops/s
# Warmup Iteration  10: 11001505.310 ops/s
# Warmup Iteration  11: 11005978.894 ops/s
# Warmup Iteration  12: 10868181.859 ops/s
# Warmup Iteration  13: 10962452.922 ops/s
# Warmup Iteration  14: 10986445.015 ops/s
# Warmup Iteration  15: 10934564.301 ops/s
# Warmup Iteration  16: 11010918.494 ops/s
# Warmup Iteration  17: 10975630.309 ops/s
# Warmup Iteration  18: 11004143.353 ops/s
# Warmup Iteration  19: 10971982.887 ops/s
# Warmup Iteration  20: 10900415.184 ops/s
# Warmup Iteration  21: 10965799.713 ops/s
# Warmup Iteration  22: 10926477.420 ops/s
# Warmup Iteration  23: 10976625.047 ops/s
# Warmup Iteration  24: 10988392.618 ops/s
# Warmup Iteration  25: 10996325.520 ops/s
# Warmup Iteration  26: 11011501.286 ops/s
# Warmup Iteration  27: 10930921.860 ops/s
# Warmup Iteration  28: 10959713.351 ops/s
# Warmup Iteration  29: 10997429.011 ops/s
# Warmup Iteration  30: 10987438.157 ops/s
Iteration   1: 10778826.768 ops/s
Iteration   2: 10978481.015 ops/s
Iteration   3: 10983301.000 ops/s
Iteration   4: 10900714.616 ops/s
Iteration   5: 10807051.183 ops/s
Iteration   6: 10855781.766 ops/s
Iteration   7: 10965943.193 ops/s
Iteration   8: 11043062.476 ops/s
Iteration   9: 11038922.469 ops/s
Iteration  10: 10992822.617 ops/s
Iteration  11: 10702285.200 ops/s
Iteration  12: 11031219.732 ops/s
Iteration  13: 11019654.825 ops/s
Iteration  14: 11005606.428 ops/s
Iteration  15: 11024362.722 ops/s
Iteration  16: 11009726.251 ops/s
Iteration  17: 10999732.710 ops/s
Iteration  18: 10914615.290 ops/s
Iteration  19: 11006297.403 ops/s
Iteration  20: 10969933.179 ops/s
Iteration  21: 10983633.074 ops/s
Iteration  22: 10978552.804 ops/s
Iteration  23: 10994542.718 ops/s
Iteration  24: 10936327.739 ops/s
Iteration  25: 11006525.923 ops/s
Iteration  26: 10995719.679 ops/s
Iteration  27: 11011794.444 ops/s
Iteration  28: 10954642.029 ops/s
Iteration  29: 11038702.472 ops/s
Iteration  30: 10886897.348 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeDouble":
  10960522.636 ±(99.9%) 54881.303 ops/s [Average]
  (min, avg, max) = (10702285.200, 10960522.636, 11043062.476), stdev = 82143.757
  CI (99.9%): [10905641.333, 11015403.938] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeDouble  thrpt   30  10960522.636 ± 54881.303  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5281661.989 ops/s
# Warmup Iteration   2: 10863160.256 ops/s
# Warmup Iteration   3: 9201226.494 ops/s
# Warmup Iteration   4: 10858881.401 ops/s
# Warmup Iteration   5: 10834696.916 ops/s
# Warmup Iteration   6: 10857525.496 ops/s
# Warmup Iteration   7: 10800755.872 ops/s
# Warmup Iteration   8: 10883122.569 ops/s
# Warmup Iteration   9: 10873430.390 ops/s
# Warmup Iteration  10: 10874970.162 ops/s
# Warmup Iteration  11: 10874316.325 ops/s
# Warmup Iteration  12: 10879709.091 ops/s
# Warmup Iteration  13: 10877010.677 ops/s
# Warmup Iteration  14: 10852142.938 ops/s
# Warmup Iteration  15: 10899058.981 ops/s
# Warmup Iteration  16: 10859209.687 ops/s
# Warmup Iteration  17: 10926054.200 ops/s
# Warmup Iteration  18: 10844109.917 ops/s
# Warmup Iteration  19: 10815143.962 ops/s
# Warmup Iteration  20: 10807162.284 ops/s
# Warmup Iteration  21: 10917096.273 ops/s
# Warmup Iteration  22: 10949665.510 ops/s
# Warmup Iteration  23: 10924303.133 ops/s
# Warmup Iteration  24: 10859489.069 ops/s
# Warmup Iteration  25: 10873578.672 ops/s
# Warmup Iteration  26: 10948651.172 ops/s
# Warmup Iteration  27: 10908035.445 ops/s
# Warmup Iteration  28: 10769868.089 ops/s
# Warmup Iteration  29: 10849991.694 ops/s
# Warmup Iteration  30: 10901920.075 ops/s
Iteration   1: 10941482.815 ops/s
Iteration   2: 10830787.006 ops/s
Iteration   3: 10840965.067 ops/s
Iteration   4: 10912856.578 ops/s
Iteration   5: 10948016.588 ops/s
Iteration   6: 10860096.858 ops/s
Iteration   7: 10889428.733 ops/s
Iteration   8: 10865720.547 ops/s
Iteration   9: 10880540.648 ops/s
Iteration  10: 10926916.056 ops/s
Iteration  11: 10876510.153 ops/s
Iteration  12: 10887256.157 ops/s
Iteration  13: 10892003.788 ops/s
Iteration  14: 10885561.809 ops/s
Iteration  15: 10908463.073 ops/s
Iteration  16: 10947683.454 ops/s
Iteration  17: 10850709.736 ops/s
Iteration  18: 10911663.722 ops/s
Iteration  19: 10905911.789 ops/s
Iteration  20: 10940756.313 ops/s
Iteration  21: 10896765.128 ops/s
Iteration  22: 10840170.850 ops/s
Iteration  23: 10890256.564 ops/s
Iteration  24: 10858623.388 ops/s
Iteration  25: 10882686.492 ops/s
Iteration  26: 10652708.425 ops/s
Iteration  27: 10932635.145 ops/s
Iteration  28: 10955856.977 ops/s
Iteration  29: 10968779.918 ops/s
Iteration  30: 10919287.247 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeFloat":
  10890036.701 ±(99.9%) 38680.288 ops/s [Average]
  (min, avg, max) = (10652708.425, 10890036.701, 10968779.918), stdev = 57894.839
  CI (99.9%): [10851356.413, 10928716.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeFloat  thrpt   30  10890036.701 ± 38680.288  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6523427.733 ops/s
# Warmup Iteration   2: 12940919.852 ops/s
# Warmup Iteration   3: 11145401.910 ops/s
# Warmup Iteration   4: 13059638.648 ops/s
# Warmup Iteration   5: 12942595.232 ops/s
# Warmup Iteration   6: 12830263.085 ops/s
# Warmup Iteration   7: 12963371.635 ops/s
# Warmup Iteration   8: 12999551.984 ops/s
# Warmup Iteration   9: 12893124.934 ops/s
# Warmup Iteration  10: 12951174.168 ops/s
# Warmup Iteration  11: 12938839.882 ops/s
# Warmup Iteration  12: 13029337.402 ops/s
# Warmup Iteration  13: 12903569.218 ops/s
# Warmup Iteration  14: 13024122.556 ops/s
# Warmup Iteration  15: 12966025.510 ops/s
# Warmup Iteration  16: 13092102.871 ops/s
# Warmup Iteration  17: 13235439.821 ops/s
# Warmup Iteration  18: 13278591.523 ops/s
# Warmup Iteration  19: 13286391.735 ops/s
# Warmup Iteration  20: 13275982.013 ops/s
# Warmup Iteration  21: 13314836.868 ops/s
# Warmup Iteration  22: 13219658.413 ops/s
# Warmup Iteration  23: 13261154.987 ops/s
# Warmup Iteration  24: 13293887.786 ops/s
# Warmup Iteration  25: 13017374.487 ops/s
# Warmup Iteration  26: 13213237.963 ops/s
# Warmup Iteration  27: 13254788.638 ops/s
# Warmup Iteration  28: 13111635.030 ops/s
# Warmup Iteration  29: 13229179.995 ops/s
# Warmup Iteration  30: 13196998.764 ops/s
Iteration   1: 13203274.574 ops/s
Iteration   2: 13199378.820 ops/s
Iteration   3: 13311882.935 ops/s
Iteration   4: 13294646.637 ops/s
Iteration   5: 13242203.193 ops/s
Iteration   6: 13306027.311 ops/s
Iteration   7: 13270621.699 ops/s
Iteration   8: 13222383.214 ops/s
Iteration   9: 13259045.269 ops/s
Iteration  10: 13010185.072 ops/s
Iteration  11: 13342393.130 ops/s
Iteration  12: 13294516.011 ops/s
Iteration  13: 13216602.322 ops/s
Iteration  14: 13056503.613 ops/s
Iteration  15: 13283265.102 ops/s
Iteration  16: 13144208.704 ops/s
Iteration  17: 13294251.386 ops/s
Iteration  18: 13141692.563 ops/s
Iteration  19: 13241734.492 ops/s
Iteration  20: 13352255.517 ops/s
Iteration  21: 13324269.154 ops/s
Iteration  22: 13334980.643 ops/s
Iteration  23: 13236798.148 ops/s
Iteration  24: 13229016.480 ops/s
Iteration  25: 13057798.478 ops/s
Iteration  26: 13274730.872 ops/s
Iteration  27: 13301419.113 ops/s
Iteration  28: 13209329.131 ops/s
Iteration  29: 12995352.027 ops/s
Iteration  30: 13062667.468 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeInt":
  13223781.103 ±(99.9%) 67116.407 ops/s [Average]
  (min, avg, max) = (12995352.027, 13223781.103, 13352255.517), stdev = 100456.686
  CI (99.9%): [13156664.695, 13290897.510] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeInt  thrpt   30  13223781.103 ± 67116.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6765735.972 ops/s
# Warmup Iteration   2: 13441453.441 ops/s
# Warmup Iteration   3: 11553895.939 ops/s
# Warmup Iteration   4: 13666828.578 ops/s
# Warmup Iteration   5: 13705520.175 ops/s
# Warmup Iteration   6: 13640616.422 ops/s
# Warmup Iteration   7: 13704043.369 ops/s
# Warmup Iteration   8: 13717064.344 ops/s
# Warmup Iteration   9: 13613586.959 ops/s
# Warmup Iteration  10: 13721904.807 ops/s
# Warmup Iteration  11: 13692520.891 ops/s
# Warmup Iteration  12: 13632167.382 ops/s
# Warmup Iteration  13: 13647216.066 ops/s
# Warmup Iteration  14: 13709458.254 ops/s
# Warmup Iteration  15: 13628395.045 ops/s
# Warmup Iteration  16: 13699632.435 ops/s
# Warmup Iteration  17: 13706328.182 ops/s
# Warmup Iteration  18: 13628567.972 ops/s
# Warmup Iteration  19: 13568229.176 ops/s
# Warmup Iteration  20: 13690657.386 ops/s
# Warmup Iteration  21: 13678234.599 ops/s
# Warmup Iteration  22: 13711361.398 ops/s
# Warmup Iteration  23: 13697859.731 ops/s
# Warmup Iteration  24: 13750769.847 ops/s
# Warmup Iteration  25: 13762927.943 ops/s
# Warmup Iteration  26: 13722880.788 ops/s
# Warmup Iteration  27: 13632422.401 ops/s
# Warmup Iteration  28: 13547259.754 ops/s
# Warmup Iteration  29: 13701444.849 ops/s
# Warmup Iteration  30: 13592490.531 ops/s
Iteration   1: 13631142.093 ops/s
Iteration   2: 13772288.621 ops/s
Iteration   3: 13710603.062 ops/s
Iteration   4: 13719263.375 ops/s
Iteration   5: 13647810.214 ops/s
Iteration   6: 13513784.857 ops/s
Iteration   7: 13745834.419 ops/s
Iteration   8: 13614072.485 ops/s
Iteration   9: 13762526.903 ops/s
Iteration  10: 13640059.484 ops/s
Iteration  11: 13521404.637 ops/s
Iteration  12: 13703614.107 ops/s
Iteration  13: 13739689.125 ops/s
Iteration  14: 13597459.377 ops/s
Iteration  15: 13601063.390 ops/s
Iteration  16: 13511824.772 ops/s
Iteration  17: 13805000.150 ops/s
Iteration  18: 13496000.011 ops/s
Iteration  19: 13695969.751 ops/s
Iteration  20: 13755764.712 ops/s
Iteration  21: 13734830.923 ops/s
Iteration  22: 13690110.354 ops/s
Iteration  23: 13670831.583 ops/s
Iteration  24: 13717599.564 ops/s
Iteration  25: 13735142.652 ops/s
Iteration  26: 13676762.152 ops/s
Iteration  27: 13721566.406 ops/s
Iteration  28: 13681461.075 ops/s
Iteration  29: 13702574.846 ops/s
Iteration  30: 13715858.269 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeLong":
  13674397.112 ±(99.9%) 54848.991 ops/s [Average]
  (min, avg, max) = (13496000.011, 13674397.112, 13805000.150), stdev = 82095.394
  CI (99.9%): [13619548.121, 13729246.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_summarizeLong  thrpt   30  13674397.112 ± 54848.991  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1056763.528 ops/s
# Warmup Iteration   2: 2003715.773 ops/s
# Warmup Iteration   3: 2205938.807 ops/s
# Warmup Iteration   4: 2205760.907 ops/s
# Warmup Iteration   5: 1961609.828 ops/s
# Warmup Iteration   6: 2058422.354 ops/s
# Warmup Iteration   7: 2209305.955 ops/s
# Warmup Iteration   8: 2219635.349 ops/s
# Warmup Iteration   9: 2231722.817 ops/s
# Warmup Iteration  10: 2210022.351 ops/s
# Warmup Iteration  11: 2227748.820 ops/s
# Warmup Iteration  12: 2232346.586 ops/s
# Warmup Iteration  13: 2229843.796 ops/s
# Warmup Iteration  14: 2219963.873 ops/s
# Warmup Iteration  15: 2229965.775 ops/s
# Warmup Iteration  16: 2209077.618 ops/s
# Warmup Iteration  17: 2211153.446 ops/s
# Warmup Iteration  18: 2216221.194 ops/s
# Warmup Iteration  19: 2202742.733 ops/s
# Warmup Iteration  20: 2229498.148 ops/s
# Warmup Iteration  21: 2210285.181 ops/s
# Warmup Iteration  22: 2223196.911 ops/s
# Warmup Iteration  23: 2205269.569 ops/s
# Warmup Iteration  24: 2223519.826 ops/s
# Warmup Iteration  25: 2233955.710 ops/s
# Warmup Iteration  26: 2204671.094 ops/s
# Warmup Iteration  27: 2228011.833 ops/s
# Warmup Iteration  28: 2227741.749 ops/s
# Warmup Iteration  29: 2211922.057 ops/s
# Warmup Iteration  30: 2229909.363 ops/s
Iteration   1: 2194790.890 ops/s
Iteration   2: 2227238.788 ops/s
Iteration   3: 2213985.934 ops/s
Iteration   4: 2220543.663 ops/s
Iteration   5: 2229855.714 ops/s
Iteration   6: 2194777.380 ops/s
Iteration   7: 2233565.934 ops/s
Iteration   8: 2239274.050 ops/s
Iteration   9: 2228304.244 ops/s
Iteration  10: 2213130.210 ops/s
Iteration  11: 2222343.277 ops/s
Iteration  12: 2220403.499 ops/s
Iteration  13: 2231552.668 ops/s
Iteration  14: 2228347.873 ops/s
Iteration  15: 2200127.628 ops/s
Iteration  16: 2229039.397 ops/s
Iteration  17: 2229118.645 ops/s
Iteration  18: 2213125.519 ops/s
Iteration  19: 2226290.339 ops/s
Iteration  20: 2231445.177 ops/s
Iteration  21: 2228379.382 ops/s
Iteration  22: 2214213.587 ops/s
Iteration  23: 2231759.386 ops/s
Iteration  24: 2232751.688 ops/s
Iteration  25: 2225654.693 ops/s
Iteration  26: 2234407.955 ops/s
Iteration  27: 2230107.396 ops/s
Iteration  28: 2227609.820 ops/s
Iteration  29: 2233974.342 ops/s
Iteration  30: 2215573.032 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_take":
  2223389.737 ±(99.9%) 7637.982 ops/s [Average]
  (min, avg, max) = (2194777.380, 2223389.737, 2239274.050), stdev = 11432.173
  CI (99.9%): [2215751.755, 2231027.719] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_take  thrpt   30  2223389.737 ± 7637.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1271589.726 ops/s
# Warmup Iteration   2: 3209819.876 ops/s
# Warmup Iteration   3: 2678995.933 ops/s
# Warmup Iteration   4: 3235092.601 ops/s
# Warmup Iteration   5: 3193506.865 ops/s
# Warmup Iteration   6: 3227889.749 ops/s
# Warmup Iteration   7: 3212419.784 ops/s
# Warmup Iteration   8: 3202022.316 ops/s
# Warmup Iteration   9: 3231030.103 ops/s
# Warmup Iteration  10: 3221436.274 ops/s
# Warmup Iteration  11: 3223912.338 ops/s
# Warmup Iteration  12: 3229546.234 ops/s
# Warmup Iteration  13: 3217171.401 ops/s
# Warmup Iteration  14: 3201453.162 ops/s
# Warmup Iteration  15: 3234082.207 ops/s
# Warmup Iteration  16: 3229863.211 ops/s
# Warmup Iteration  17: 3211051.417 ops/s
# Warmup Iteration  18: 3238182.052 ops/s
# Warmup Iteration  19: 3226795.033 ops/s
# Warmup Iteration  20: 3233689.024 ops/s
# Warmup Iteration  21: 3193872.566 ops/s
# Warmup Iteration  22: 3227653.967 ops/s
# Warmup Iteration  23: 3227337.227 ops/s
# Warmup Iteration  24: 3242632.374 ops/s
# Warmup Iteration  25: 3222722.665 ops/s
# Warmup Iteration  26: 3240124.399 ops/s
# Warmup Iteration  27: 3222652.313 ops/s
# Warmup Iteration  28: 3209927.555 ops/s
# Warmup Iteration  29: 3212622.628 ops/s
# Warmup Iteration  30: 3239494.076 ops/s
Iteration   1: 3208945.242 ops/s
Iteration   2: 3231598.033 ops/s
Iteration   3: 3213239.494 ops/s
Iteration   4: 3228749.951 ops/s
Iteration   5: 3252052.870 ops/s
Iteration   6: 3234563.438 ops/s
Iteration   7: 3225067.690 ops/s
Iteration   8: 3198422.998 ops/s
Iteration   9: 3244050.535 ops/s
Iteration  10: 3228286.915 ops/s
Iteration  11: 3234387.422 ops/s
Iteration  12: 3212967.048 ops/s
Iteration  13: 3184898.382 ops/s
Iteration  14: 3232450.185 ops/s
Iteration  15: 3249076.259 ops/s
Iteration  16: 3237675.002 ops/s
Iteration  17: 3225896.589 ops/s
Iteration  18: 3200917.420 ops/s
Iteration  19: 3241960.173 ops/s
Iteration  20: 3214988.792 ops/s
Iteration  21: 3234622.668 ops/s
Iteration  22: 3245039.315 ops/s
Iteration  23: 3250805.864 ops/s
Iteration  24: 3168835.884 ops/s
Iteration  25: 3222871.481 ops/s
Iteration  26: 3215501.318 ops/s
Iteration  27: 3235602.989 ops/s
Iteration  28: 3229779.148 ops/s
Iteration  29: 3178783.928 ops/s
Iteration  30: 3229411.394 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_takeWhile":
  3223714.948 ±(99.9%) 13933.472 ops/s [Average]
  (min, avg, max) = (3168835.884, 3223714.948, 3252052.870), stdev = 20854.967
  CI (99.9%): [3209781.475, 3237648.420] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_takeWhile  thrpt   30  3223714.948 ± 13933.472  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 580292.315 ops/s
# Warmup Iteration   2: 645205.075 ops/s
# Warmup Iteration   3: 817974.779 ops/s
# Warmup Iteration   4: 824317.747 ops/s
# Warmup Iteration   5: 810146.552 ops/s
# Warmup Iteration   6: 824609.075 ops/s
# Warmup Iteration   7: 821645.235 ops/s
# Warmup Iteration   8: 823134.089 ops/s
# Warmup Iteration   9: 821306.978 ops/s
# Warmup Iteration  10: 770329.173 ops/s
# Warmup Iteration  11: 736006.414 ops/s
# Warmup Iteration  12: 808128.904 ops/s
# Warmup Iteration  13: 820261.866 ops/s
# Warmup Iteration  14: 822663.717 ops/s
# Warmup Iteration  15: 823630.671 ops/s
# Warmup Iteration  16: 823379.434 ops/s
# Warmup Iteration  17: 868771.646 ops/s
# Warmup Iteration  18: 867328.999 ops/s
# Warmup Iteration  19: 866979.553 ops/s
# Warmup Iteration  20: 871674.425 ops/s
# Warmup Iteration  21: 872093.359 ops/s
# Warmup Iteration  22: 870032.722 ops/s
# Warmup Iteration  23: 861343.830 ops/s
# Warmup Iteration  24: 869909.225 ops/s
# Warmup Iteration  25: 870882.208 ops/s
# Warmup Iteration  26: 865071.078 ops/s
# Warmup Iteration  27: 871245.023 ops/s
# Warmup Iteration  28: 870680.063 ops/s
# Warmup Iteration  29: 869047.819 ops/s
# Warmup Iteration  30: 868501.665 ops/s
Iteration   1: 871651.253 ops/s
Iteration   2: 863039.646 ops/s
Iteration   3: 854844.147 ops/s
Iteration   4: 860862.546 ops/s
Iteration   5: 863946.584 ops/s
Iteration   6: 867460.866 ops/s
Iteration   7: 868978.263 ops/s
Iteration   8: 857382.938 ops/s
Iteration   9: 864807.797 ops/s
Iteration  10: 867449.587 ops/s
Iteration  11: 868843.507 ops/s
Iteration  12: 872592.533 ops/s
Iteration  13: 869609.358 ops/s
Iteration  14: 863538.817 ops/s
Iteration  15: 862781.239 ops/s
Iteration  16: 866959.125 ops/s
Iteration  17: 869131.641 ops/s
Iteration  18: 865122.570 ops/s
Iteration  19: 862498.885 ops/s
Iteration  20: 853092.544 ops/s
Iteration  21: 865925.764 ops/s
Iteration  22: 853962.398 ops/s
Iteration  23: 865924.699 ops/s
Iteration  24: 856281.602 ops/s
Iteration  25: 855328.370 ops/s
Iteration  26: 868928.593 ops/s
Iteration  27: 867512.014 ops/s
Iteration  28: 869563.676 ops/s
Iteration  29: 869477.982 ops/s
Iteration  30: 871610.340 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_take_throws":
  864636.976 ±(99.9%) 3764.194 ops/s [Average]
  (min, avg, max) = (853092.544, 864636.976, 872592.533), stdev = 5634.069
  CI (99.9%): [860872.782, 868401.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_take_throws  thrpt   30  864636.976 ± 3764.194  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4027765.704 ops/s
# Warmup Iteration   2: 8802808.158 ops/s
# Warmup Iteration   3: 7390156.406 ops/s
# Warmup Iteration   4: 8776722.808 ops/s
# Warmup Iteration   5: 8855687.248 ops/s
# Warmup Iteration   6: 8878204.354 ops/s
# Warmup Iteration   7: 8876336.823 ops/s
# Warmup Iteration   8: 8780768.600 ops/s
# Warmup Iteration   9: 8829438.816 ops/s
# Warmup Iteration  10: 8806321.258 ops/s
# Warmup Iteration  11: 8864634.750 ops/s
# Warmup Iteration  12: 8779243.165 ops/s
# Warmup Iteration  13: 8861582.026 ops/s
# Warmup Iteration  14: 8823073.550 ops/s
# Warmup Iteration  15: 8789465.206 ops/s
# Warmup Iteration  16: 8837466.766 ops/s
# Warmup Iteration  17: 8816242.115 ops/s
# Warmup Iteration  18: 8866848.034 ops/s
# Warmup Iteration  19: 8823625.323 ops/s
# Warmup Iteration  20: 8822475.919 ops/s
# Warmup Iteration  21: 8766243.244 ops/s
# Warmup Iteration  22: 8807345.053 ops/s
# Warmup Iteration  23: 8785403.064 ops/s
# Warmup Iteration  24: 8802057.372 ops/s
# Warmup Iteration  25: 8838039.831 ops/s
# Warmup Iteration  26: 8765026.659 ops/s
# Warmup Iteration  27: 8824757.947 ops/s
# Warmup Iteration  28: 8816643.398 ops/s
# Warmup Iteration  29: 8779069.865 ops/s
# Warmup Iteration  30: 8868303.405 ops/s
Iteration   1: 8872864.449 ops/s
Iteration   2: 8866760.811 ops/s
Iteration   3: 8699209.762 ops/s
Iteration   4: 8749783.228 ops/s
Iteration   5: 8750187.920 ops/s
Iteration   6: 8840961.220 ops/s
Iteration   7: 8775742.382 ops/s
Iteration   8: 8788465.377 ops/s
Iteration   9: 8821108.455 ops/s
Iteration  10: 8670014.468 ops/s
Iteration  11: 8795785.908 ops/s
Iteration  12: 8836545.703 ops/s
Iteration  13: 8676300.482 ops/s
Iteration  14: 8820727.199 ops/s
Iteration  15: 8826227.234 ops/s
Iteration  16: 8774661.105 ops/s
Iteration  17: 8846813.337 ops/s
Iteration  18: 8832153.323 ops/s
Iteration  19: 8782513.900 ops/s
Iteration  20: 8876183.504 ops/s
Iteration  21: 8838914.892 ops/s
Iteration  22: 8851727.840 ops/s
Iteration  23: 8812867.984 ops/s
Iteration  24: 8796790.427 ops/s
Iteration  25: 8790005.087 ops/s
Iteration  26: 8843288.833 ops/s
Iteration  27: 8833205.717 ops/s
Iteration  28: 8794669.860 ops/s
Iteration  29: 8853834.327 ops/s
Iteration  30: 8779951.232 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_tap":
  8803275.532 ±(99.9%) 35714.378 ops/s [Average]
  (min, avg, max) = (8670014.468, 8803275.532, 8876183.504), stdev = 53455.604
  CI (99.9%): [8767561.154, 8838989.911] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_tap  thrpt   30  8803275.532 ± 35714.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 658910.173 ops/s
# Warmup Iteration   2: 1267068.505 ops/s
# Warmup Iteration   3: 1333838.232 ops/s
# Warmup Iteration   4: 1354304.763 ops/s
# Warmup Iteration   5: 1132736.623 ops/s
# Warmup Iteration   6: 1353895.954 ops/s
# Warmup Iteration   7: 1353391.637 ops/s
# Warmup Iteration   8: 1341172.125 ops/s
# Warmup Iteration   9: 1355733.309 ops/s
# Warmup Iteration  10: 1357542.160 ops/s
# Warmup Iteration  11: 1358728.133 ops/s
# Warmup Iteration  12: 1359675.746 ops/s
# Warmup Iteration  13: 1354429.092 ops/s
# Warmup Iteration  14: 1359555.568 ops/s
# Warmup Iteration  15: 1344053.297 ops/s
# Warmup Iteration  16: 1353402.841 ops/s
# Warmup Iteration  17: 1359333.338 ops/s
# Warmup Iteration  18: 1347671.852 ops/s
# Warmup Iteration  19: 1359630.324 ops/s
# Warmup Iteration  20: 1357733.252 ops/s
# Warmup Iteration  21: 1355094.175 ops/s
# Warmup Iteration  22: 1360445.847 ops/s
# Warmup Iteration  23: 1360062.902 ops/s
# Warmup Iteration  24: 1355036.000 ops/s
# Warmup Iteration  25: 1355759.475 ops/s
# Warmup Iteration  26: 1354143.353 ops/s
# Warmup Iteration  27: 1356915.522 ops/s
# Warmup Iteration  28: 1362605.510 ops/s
# Warmup Iteration  29: 1352102.888 ops/s
# Warmup Iteration  30: 1357886.777 ops/s
Iteration   1: 1363499.049 ops/s
Iteration   2: 1361024.143 ops/s
Iteration   3: 1359083.141 ops/s
Iteration   4: 1366631.843 ops/s
Iteration   5: 1346414.203 ops/s
Iteration   6: 1362927.162 ops/s
Iteration   7: 1347202.330 ops/s
Iteration   8: 1359192.584 ops/s
Iteration   9: 1358205.674 ops/s
Iteration  10: 1367151.430 ops/s
Iteration  11: 1362650.687 ops/s
Iteration  12: 1351583.420 ops/s
Iteration  13: 1362426.366 ops/s
Iteration  14: 1357815.336 ops/s
Iteration  15: 1358915.840 ops/s
Iteration  16: 1360323.104 ops/s
Iteration  17: 1356639.495 ops/s
Iteration  18: 1366553.882 ops/s
Iteration  19: 1360502.620 ops/s
Iteration  20: 1359859.308 ops/s
Iteration  21: 1354000.516 ops/s
Iteration  22: 1348043.921 ops/s
Iteration  23: 1344419.182 ops/s
Iteration  24: 1354173.458 ops/s
Iteration  25: 1362432.563 ops/s
Iteration  26: 1355990.560 ops/s
Iteration  27: 1356161.538 ops/s
Iteration  28: 1352689.963 ops/s
Iteration  29: 1353005.669 ops/s
Iteration  30: 1343569.440 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testClone":
  1357102.948 ±(99.9%) 4346.342 ops/s [Average]
  (min, avg, max) = (1343569.440, 1357102.948, 1367151.430), stdev = 6505.400
  CI (99.9%): [1352756.606, 1361449.289] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testClone  thrpt   30  1357102.948 ± 4346.342  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5383306.884 ops/s
# Warmup Iteration   2: 9947547.503 ops/s
# Warmup Iteration   3: 8845218.939 ops/s
# Warmup Iteration   4: 10427780.841 ops/s
# Warmup Iteration   5: 9504973.635 ops/s
# Warmup Iteration   6: 10316148.122 ops/s
# Warmup Iteration   7: 10919569.112 ops/s
# Warmup Iteration   8: 9987525.765 ops/s
# Warmup Iteration   9: 10166138.929 ops/s
# Warmup Iteration  10: 9961048.226 ops/s
# Warmup Iteration  11: 10404547.965 ops/s
# Warmup Iteration  12: 10690741.286 ops/s
# Warmup Iteration  13: 10371169.870 ops/s
# Warmup Iteration  14: 9558794.653 ops/s
# Warmup Iteration  15: 10540777.888 ops/s
# Warmup Iteration  16: 10926626.288 ops/s
# Warmup Iteration  17: 9740639.131 ops/s
# Warmup Iteration  18: 10435197.997 ops/s
# Warmup Iteration  19: 10348816.612 ops/s
# Warmup Iteration  20: 10528808.513 ops/s
# Warmup Iteration  21: 10774938.556 ops/s
# Warmup Iteration  22: 10579373.196 ops/s
# Warmup Iteration  23: 10243378.813 ops/s
# Warmup Iteration  24: 10132785.976 ops/s
# Warmup Iteration  25: 10589275.637 ops/s
# Warmup Iteration  26: 10431016.381 ops/s
# Warmup Iteration  27: 10561479.300 ops/s
# Warmup Iteration  28: 9925459.685 ops/s
# Warmup Iteration  29: 10549506.964 ops/s
# Warmup Iteration  30: 10163726.791 ops/s
Iteration   1: 10747257.902 ops/s
Iteration   2: 10945354.130 ops/s
Iteration   3: 10117469.623 ops/s
Iteration   4: 10112281.799 ops/s
Iteration   5: 10447820.368 ops/s
Iteration   6: 10938620.817 ops/s
Iteration   7: 11490660.890 ops/s
Iteration   8: 10282229.252 ops/s
Iteration   9: 9339507.257 ops/s
Iteration  10: 10423201.446 ops/s
Iteration  11: 10909849.430 ops/s
Iteration  12: 10085580.343 ops/s
Iteration  13: 10219187.157 ops/s
Iteration  14: 10910009.996 ops/s
Iteration  15: 10477334.345 ops/s
Iteration  16: 9617700.945 ops/s
Iteration  17: 10108809.541 ops/s
Iteration  18: 9123397.506 ops/s
Iteration  19: 11229814.394 ops/s
Iteration  20: 10501237.984 ops/s
Iteration  21: 10294795.734 ops/s
Iteration  22: 10913725.842 ops/s
Iteration  23: 10402753.026 ops/s
Iteration  24: 10757507.230 ops/s
Iteration  25: 10476347.780 ops/s
Iteration  26: 10942443.466 ops/s
Iteration  27: 10009158.540 ops/s
Iteration  28: 10377860.173 ops/s
Iteration  29: 10842634.569 ops/s
Iteration  30: 10978296.490 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewCollection":
  10467428.266 ±(99.9%) 353849.889 ops/s [Average]
  (min, avg, max) = (9123397.506, 10467428.266, 11490660.890), stdev = 529625.896
  CI (99.9%): [10113578.377, 10821278.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt         Score        Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewCollection  thrpt   30  10467428.266 ± 353849.889  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3284281.408 ops/s
# Warmup Iteration   2: 5823337.167 ops/s
# Warmup Iteration   3: 6744157.727 ops/s
# Warmup Iteration   4: 6841320.682 ops/s
# Warmup Iteration   5: 6848793.402 ops/s
# Warmup Iteration   6: 6751336.726 ops/s
# Warmup Iteration   7: 6845402.648 ops/s
# Warmup Iteration   8: 6784566.682 ops/s
# Warmup Iteration   9: 6845252.454 ops/s
# Warmup Iteration  10: 6831769.632 ops/s
# Warmup Iteration  11: 6796354.446 ops/s
# Warmup Iteration  12: 6855212.698 ops/s
# Warmup Iteration  13: 6841722.050 ops/s
# Warmup Iteration  14: 6865189.504 ops/s
# Warmup Iteration  15: 6897481.267 ops/s
# Warmup Iteration  16: 6863961.172 ops/s
# Warmup Iteration  17: 6805550.285 ops/s
# Warmup Iteration  18: 6778056.706 ops/s
# Warmup Iteration  19: 6807169.625 ops/s
# Warmup Iteration  20: 6859090.706 ops/s
# Warmup Iteration  21: 6861870.130 ops/s
# Warmup Iteration  22: 6844521.475 ops/s
# Warmup Iteration  23: 6825118.294 ops/s
# Warmup Iteration  24: 6878430.721 ops/s
# Warmup Iteration  25: 6892265.227 ops/s
# Warmup Iteration  26: 6827595.639 ops/s
# Warmup Iteration  27: 6860980.494 ops/s
# Warmup Iteration  28: 6829726.015 ops/s
# Warmup Iteration  29: 6814147.591 ops/s
# Warmup Iteration  30: 6910612.321 ops/s
Iteration   1: 6814520.522 ops/s
Iteration   2: 6939477.640 ops/s
Iteration   3: 6854705.379 ops/s
Iteration   4: 6838573.138 ops/s
Iteration   5: 6779577.701 ops/s
Iteration   6: 6934967.713 ops/s
Iteration   7: 6806312.671 ops/s
Iteration   8: 6930809.212 ops/s
Iteration   9: 6957923.122 ops/s
Iteration  10: 6946304.889 ops/s
Iteration  11: 6854889.464 ops/s
Iteration  12: 6879251.054 ops/s
Iteration  13: 6869870.832 ops/s
Iteration  14: 6766390.535 ops/s
Iteration  15: 6867991.372 ops/s
Iteration  16: 6879110.280 ops/s
Iteration  17: 6859624.069 ops/s
Iteration  18: 6840996.819 ops/s
Iteration  19: 6872863.108 ops/s
Iteration  20: 6880865.226 ops/s
Iteration  21: 6880813.380 ops/s
Iteration  22: 6718024.057 ops/s
Iteration  23: 6855676.714 ops/s
Iteration  24: 6826981.316 ops/s
Iteration  25: 6843822.881 ops/s
Iteration  26: 6761255.572 ops/s
Iteration  27: 6748050.142 ops/s
Iteration  28: 6896667.751 ops/s
Iteration  29: 6871357.549 ops/s
Iteration  30: 6909415.945 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWith":
  6856236.335 ±(99.9%) 40063.079 ops/s [Average]
  (min, avg, max) = (6718024.057, 6856236.335, 6957923.122), stdev = 59964.536
  CI (99.9%): [6816173.256, 6896299.415] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWith  thrpt   30  6856236.335 ± 40063.079  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2537964.542 ops/s
# Warmup Iteration   2: 5066804.814 ops/s
# Warmup Iteration   3: 4939258.204 ops/s
# Warmup Iteration   4: 5445359.842 ops/s
# Warmup Iteration   5: 5438777.996 ops/s
# Warmup Iteration   6: 5464071.736 ops/s
# Warmup Iteration   7: 5441112.358 ops/s
# Warmup Iteration   8: 5365454.409 ops/s
# Warmup Iteration   9: 5428469.899 ops/s
# Warmup Iteration  10: 5431985.849 ops/s
# Warmup Iteration  11: 5429400.652 ops/s
# Warmup Iteration  12: 5415772.560 ops/s
# Warmup Iteration  13: 5448197.237 ops/s
# Warmup Iteration  14: 5458049.415 ops/s
# Warmup Iteration  15: 5432113.402 ops/s
# Warmup Iteration  16: 5429138.251 ops/s
# Warmup Iteration  17: 5483611.618 ops/s
# Warmup Iteration  18: 5484616.036 ops/s
# Warmup Iteration  19: 5483224.792 ops/s
# Warmup Iteration  20: 5451279.334 ops/s
# Warmup Iteration  21: 5426374.912 ops/s
# Warmup Iteration  22: 5467790.478 ops/s
# Warmup Iteration  23: 5433261.220 ops/s
# Warmup Iteration  24: 5479902.226 ops/s
# Warmup Iteration  25: 5393491.597 ops/s
# Warmup Iteration  26: 5459896.017 ops/s
# Warmup Iteration  27: 5426155.220 ops/s
# Warmup Iteration  28: 5441271.543 ops/s
# Warmup Iteration  29: 5450559.530 ops/s
# Warmup Iteration  30: 5515314.094 ops/s
Iteration   1: 5536440.108 ops/s
Iteration   2: 5428787.323 ops/s
Iteration   3: 5374614.180 ops/s
Iteration   4: 5426061.392 ops/s
Iteration   5: 5500852.176 ops/s
Iteration   6: 5461914.274 ops/s
Iteration   7: 5512947.932 ops/s
Iteration   8: 5472299.409 ops/s
Iteration   9: 5484266.527 ops/s
Iteration  10: 5515489.768 ops/s
Iteration  11: 5433927.484 ops/s
Iteration  12: 5483333.636 ops/s
Iteration  13: 5434646.215 ops/s
Iteration  14: 5481401.949 ops/s
Iteration  15: 5441132.664 ops/s
Iteration  16: 5451085.633 ops/s
Iteration  17: 5475229.916 ops/s
Iteration  18: 5495176.595 ops/s
Iteration  19: 5402514.243 ops/s
Iteration  20: 5481232.818 ops/s
Iteration  21: 5570548.913 ops/s
Iteration  22: 5553341.507 ops/s
Iteration  23: 5465531.627 ops/s
Iteration  24: 5520591.039 ops/s
Iteration  25: 5391046.175 ops/s
Iteration  26: 5465093.332 ops/s
Iteration  27: 5437785.783 ops/s
Iteration  28: 5454530.218 ops/s
Iteration  29: 5393698.866 ops/s
Iteration  30: 5473590.996 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWithVarArgs":
  5467303.757 ±(99.9%) 31499.008 ops/s [Average]
  (min, avg, max) = (5374614.180, 5467303.757, 5570548.913), stdev = 47146.235
  CI (99.9%): [5435804.749, 5498802.764] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  5467303.757 ± 31499.008  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2799787.192 ops/s
# Warmup Iteration   2: 5071464.697 ops/s
# Warmup Iteration   3: 5664991.537 ops/s
# Warmup Iteration   4: 5789898.238 ops/s
# Warmup Iteration   5: 5821438.461 ops/s
# Warmup Iteration   6: 5803643.801 ops/s
# Warmup Iteration   7: 5831255.737 ops/s
# Warmup Iteration   8: 5808653.070 ops/s
# Warmup Iteration   9: 5805125.394 ops/s
# Warmup Iteration  10: 5838968.566 ops/s
# Warmup Iteration  11: 5866725.084 ops/s
# Warmup Iteration  12: 5848373.983 ops/s
# Warmup Iteration  13: 5792805.704 ops/s
# Warmup Iteration  14: 5789215.032 ops/s
# Warmup Iteration  15: 5849426.998 ops/s
# Warmup Iteration  16: 5812407.748 ops/s
# Warmup Iteration  17: 5868468.858 ops/s
# Warmup Iteration  18: 5840139.107 ops/s
# Warmup Iteration  19: 5876311.344 ops/s
# Warmup Iteration  20: 5886997.051 ops/s
# Warmup Iteration  21: 5827389.387 ops/s
# Warmup Iteration  22: 5849585.240 ops/s
# Warmup Iteration  23: 5859839.998 ops/s
# Warmup Iteration  24: 5892177.030 ops/s
# Warmup Iteration  25: 5829966.614 ops/s
# Warmup Iteration  26: 5842344.110 ops/s
# Warmup Iteration  27: 5851021.695 ops/s
# Warmup Iteration  28: 5871461.100 ops/s
# Warmup Iteration  29: 5854083.612 ops/s
# Warmup Iteration  30: 5865871.214 ops/s
Iteration   1: 5884051.688 ops/s
Iteration   2: 5820380.430 ops/s
Iteration   3: 5825718.392 ops/s
Iteration   4: 5914297.796 ops/s
Iteration   5: 5884424.904 ops/s
Iteration   6: 5876267.887 ops/s
Iteration   7: 5913513.502 ops/s
Iteration   8: 5837234.836 ops/s
Iteration   9: 5876983.675 ops/s
Iteration  10: 5818470.984 ops/s
Iteration  11: 5835935.109 ops/s
Iteration  12: 5779805.580 ops/s
Iteration  13: 5800888.216 ops/s
Iteration  14: 5869086.918 ops/s
Iteration  15: 5885111.529 ops/s
Iteration  16: 5847912.645 ops/s
Iteration  17: 5837086.341 ops/s
Iteration  18: 5886181.711 ops/s
Iteration  19: 5883579.199 ops/s
Iteration  20: 5854995.802 ops/s
Iteration  21: 5858800.902 ops/s
Iteration  22: 5829633.917 ops/s
Iteration  23: 5896094.641 ops/s
Iteration  24: 5757954.119 ops/s
Iteration  25: 5899017.586 ops/s
Iteration  26: 5865235.371 ops/s
Iteration  27: 5897912.984 ops/s
Iteration  28: 5854565.280 ops/s
Iteration  29: 5864757.943 ops/s
Iteration  30: 5850454.537 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWith":
  5856878.481 ±(99.9%) 25170.641 ops/s [Average]
  (min, avg, max) = (5757954.119, 5856878.481, 5914297.796), stdev = 37674.233
  CI (99.9%): [5831707.840, 5882049.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWith  thrpt   30  5856878.481 ± 25170.641  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2678433.014 ops/s
# Warmup Iteration   2: 5033134.246 ops/s
# Warmup Iteration   3: 5368493.229 ops/s
# Warmup Iteration   4: 5590354.675 ops/s
# Warmup Iteration   5: 5595163.882 ops/s
# Warmup Iteration   6: 5592457.570 ops/s
# Warmup Iteration   7: 5602424.331 ops/s
# Warmup Iteration   8: 5628424.586 ops/s
# Warmup Iteration   9: 5632856.273 ops/s
# Warmup Iteration  10: 5628504.325 ops/s
# Warmup Iteration  11: 5615156.088 ops/s
# Warmup Iteration  12: 5644952.261 ops/s
# Warmup Iteration  13: 5646218.434 ops/s
# Warmup Iteration  14: 5563491.095 ops/s
# Warmup Iteration  15: 5586592.419 ops/s
# Warmup Iteration  16: 5602798.422 ops/s
# Warmup Iteration  17: 5670693.166 ops/s
# Warmup Iteration  18: 5579872.317 ops/s
# Warmup Iteration  19: 5622637.561 ops/s
# Warmup Iteration  20: 5635608.909 ops/s
# Warmup Iteration  21: 5650685.193 ops/s
# Warmup Iteration  22: 5578145.554 ops/s
# Warmup Iteration  23: 5592631.519 ops/s
# Warmup Iteration  24: 5614606.976 ops/s
# Warmup Iteration  25: 5596326.988 ops/s
# Warmup Iteration  26: 5646707.154 ops/s
# Warmup Iteration  27: 5639220.354 ops/s
# Warmup Iteration  28: 5571196.116 ops/s
# Warmup Iteration  29: 5649559.115 ops/s
# Warmup Iteration  30: 5659574.784 ops/s
Iteration   1: 5634523.712 ops/s
Iteration   2: 5604285.306 ops/s
Iteration   3: 5606842.238 ops/s
Iteration   4: 5653441.899 ops/s
Iteration   5: 5647270.007 ops/s
Iteration   6: 5704461.540 ops/s
Iteration   7: 5562124.779 ops/s
Iteration   8: 5626974.501 ops/s
Iteration   9: 5628802.087 ops/s
Iteration  10: 5595820.278 ops/s
Iteration  11: 5596826.838 ops/s
Iteration  12: 5579331.499 ops/s
Iteration  13: 5579714.288 ops/s
Iteration  14: 5652014.583 ops/s
Iteration  15: 5606814.321 ops/s
Iteration  16: 5654769.097 ops/s
Iteration  17: 5698362.907 ops/s
Iteration  18: 5682116.892 ops/s
Iteration  19: 5662615.498 ops/s
Iteration  20: 5680331.072 ops/s
Iteration  21: 5647678.935 ops/s
Iteration  22: 5650210.637 ops/s
Iteration  23: 5644411.407 ops/s
Iteration  24: 5509926.742 ops/s
Iteration  25: 5626108.016 ops/s
Iteration  26: 5614292.413 ops/s
Iteration  27: 5600565.353 ops/s
Iteration  28: 5512319.839 ops/s
Iteration  29: 5616523.615 ops/s
Iteration  30: 5657456.614 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWithWith":
  5624564.564 ±(99.9%) 31038.017 ops/s [Average]
  (min, avg, max) = (5509926.742, 5624564.564, 5704461.540), stdev = 46456.245
  CI (99.9%): [5593526.547, 5655602.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  5624564.564 ± 31038.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2100674.027 ops/s
# Warmup Iteration   2: 4865502.008 ops/s
# Warmup Iteration   3: 4892303.388 ops/s
# Warmup Iteration   4: 4021113.649 ops/s
# Warmup Iteration   5: 4861249.310 ops/s
# Warmup Iteration   6: 4876116.841 ops/s
# Warmup Iteration   7: 4889420.345 ops/s
# Warmup Iteration   8: 4880861.002 ops/s
# Warmup Iteration   9: 4906254.540 ops/s
# Warmup Iteration  10: 4890246.232 ops/s
# Warmup Iteration  11: 4894953.463 ops/s
# Warmup Iteration  12: 4897100.618 ops/s
# Warmup Iteration  13: 4919255.387 ops/s
# Warmup Iteration  14: 4780018.598 ops/s
# Warmup Iteration  15: 4866591.888 ops/s
# Warmup Iteration  16: 4850673.372 ops/s
# Warmup Iteration  17: 4923478.031 ops/s
# Warmup Iteration  18: 4935422.981 ops/s
# Warmup Iteration  19: 4871219.848 ops/s
# Warmup Iteration  20: 4908176.739 ops/s
# Warmup Iteration  21: 4933031.439 ops/s
# Warmup Iteration  22: 4914541.793 ops/s
# Warmup Iteration  23: 4898423.516 ops/s
# Warmup Iteration  24: 4937488.630 ops/s
# Warmup Iteration  25: 4914494.862 ops/s
# Warmup Iteration  26: 4938459.551 ops/s
# Warmup Iteration  27: 4859377.751 ops/s
# Warmup Iteration  28: 4909030.524 ops/s
# Warmup Iteration  29: 4872626.627 ops/s
# Warmup Iteration  30: 4921045.727 ops/s
Iteration   1: 4919040.347 ops/s
Iteration   2: 4956193.776 ops/s
Iteration   3: 4951559.167 ops/s
Iteration   4: 4900838.195 ops/s
Iteration   5: 4911820.803 ops/s
Iteration   6: 4832828.637 ops/s
Iteration   7: 4927146.708 ops/s
Iteration   8: 4899384.227 ops/s
Iteration   9: 4889529.416 ops/s
Iteration  10: 4928415.542 ops/s
Iteration  11: 4905494.048 ops/s
Iteration  12: 4929725.584 ops/s
Iteration  13: 4918166.168 ops/s
Iteration  14: 4925452.880 ops/s
Iteration  15: 4926322.376 ops/s
Iteration  16: 4941400.335 ops/s
Iteration  17: 4931003.034 ops/s
Iteration  18: 4966169.400 ops/s
Iteration  19: 4943286.356 ops/s
Iteration  20: 4939082.592 ops/s
Iteration  21: 4930579.969 ops/s
Iteration  22: 4912950.854 ops/s
Iteration  23: 4924031.927 ops/s
Iteration  24: 4921126.114 ops/s
Iteration  25: 4943075.659 ops/s
Iteration  26: 4958777.111 ops/s
Iteration  27: 4917307.255 ops/s
Iteration  28: 4867016.882 ops/s
Iteration  29: 4904061.790 ops/s
Iteration  30: 4911509.247 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testToString":
  4921109.880 ±(99.9%) 18034.028 ops/s [Average]
  (min, avg, max) = (4832828.637, 4921109.880, 4966169.400), stdev = 26992.487
  CI (99.9%): [4903075.852, 4939143.908] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_testToString  thrpt   30  4921109.880 ± 18034.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4732031.469 ops/s
# Warmup Iteration   2: 10197231.193 ops/s
# Warmup Iteration   3: 8618409.832 ops/s
# Warmup Iteration   4: 10251000.524 ops/s
# Warmup Iteration   5: 10271881.066 ops/s
# Warmup Iteration   6: 10260292.748 ops/s
# Warmup Iteration   7: 10181953.138 ops/s
# Warmup Iteration   8: 10211701.472 ops/s
# Warmup Iteration   9: 10187246.735 ops/s
# Warmup Iteration  10: 10122763.626 ops/s
# Warmup Iteration  11: 10178937.341 ops/s
# Warmup Iteration  12: 10147009.823 ops/s
# Warmup Iteration  13: 10141145.473 ops/s
# Warmup Iteration  14: 10240577.397 ops/s
# Warmup Iteration  15: 10242118.127 ops/s
# Warmup Iteration  16: 10265704.526 ops/s
# Warmup Iteration  17: 10196778.234 ops/s
# Warmup Iteration  18: 10273259.935 ops/s
# Warmup Iteration  19: 10269542.703 ops/s
# Warmup Iteration  20: 10124180.238 ops/s
# Warmup Iteration  21: 10143422.166 ops/s
# Warmup Iteration  22: 10271092.737 ops/s
# Warmup Iteration  23: 10225558.338 ops/s
# Warmup Iteration  24: 10156545.828 ops/s
# Warmup Iteration  25: 10252453.457 ops/s
# Warmup Iteration  26: 10264470.136 ops/s
# Warmup Iteration  27: 10260269.757 ops/s
# Warmup Iteration  28: 10258982.353 ops/s
# Warmup Iteration  29: 10273117.473 ops/s
# Warmup Iteration  30: 10249615.408 ops/s
Iteration   1: 10230202.509 ops/s
Iteration   2: 10112820.908 ops/s
Iteration   3: 10267551.094 ops/s
Iteration   4: 10145897.540 ops/s
Iteration   5: 10285495.788 ops/s
Iteration   6: 10258566.395 ops/s
Iteration   7: 10296851.098 ops/s
Iteration   8: 10267543.554 ops/s
Iteration   9: 10244908.550 ops/s
Iteration  10: 10249179.946 ops/s
Iteration  11: 10255288.170 ops/s
Iteration  12: 10285163.248 ops/s
Iteration  13: 10265628.139 ops/s
Iteration  14: 10194718.684 ops/s
Iteration  15: 10177439.278 ops/s
Iteration  16: 10225279.246 ops/s
Iteration  17: 10202166.513 ops/s
Iteration  18: 10250258.689 ops/s
Iteration  19: 10278656.150 ops/s
Iteration  20: 10059626.975 ops/s
Iteration  21: 10264984.315 ops/s
Iteration  22: 10235775.414 ops/s
Iteration  23: 10276583.787 ops/s
Iteration  24: 10279939.868 ops/s
Iteration  25: 10237756.896 ops/s
Iteration  26: 10293867.679 ops/s
Iteration  27: 10299102.610 ops/s
Iteration  28: 10321981.138 ops/s
Iteration  29: 10222787.396 ops/s
Iteration  30: 10274433.906 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toArray":
  10242015.183 ±(99.9%) 38266.010 ops/s [Average]
  (min, avg, max) = (10059626.975, 10242015.183, 10321981.138), stdev = 57274.767
  CI (99.9%): [10203749.173, 10280281.193] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toArray  thrpt   30  10242015.183 ± 38266.010  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 904845.075 ops/s
# Warmup Iteration   2: 1716603.489 ops/s
# Warmup Iteration   3: 1943635.906 ops/s
# Warmup Iteration   4: 1971405.415 ops/s
# Warmup Iteration   5: 1744517.718 ops/s
# Warmup Iteration   6: 1811479.467 ops/s
# Warmup Iteration   7: 1956934.929 ops/s
# Warmup Iteration   8: 1963069.540 ops/s
# Warmup Iteration   9: 1967687.328 ops/s
# Warmup Iteration  10: 1961849.416 ops/s
# Warmup Iteration  11: 1966098.928 ops/s
# Warmup Iteration  12: 1971662.505 ops/s
# Warmup Iteration  13: 1953119.696 ops/s
# Warmup Iteration  14: 1957281.251 ops/s
# Warmup Iteration  15: 1964013.289 ops/s
# Warmup Iteration  16: 1967280.587 ops/s
# Warmup Iteration  17: 1962159.163 ops/s
# Warmup Iteration  18: 1950863.940 ops/s
# Warmup Iteration  19: 1962088.808 ops/s
# Warmup Iteration  20: 1963619.023 ops/s
# Warmup Iteration  21: 1966786.101 ops/s
# Warmup Iteration  22: 1958053.895 ops/s
# Warmup Iteration  23: 1955544.848 ops/s
# Warmup Iteration  24: 1963982.921 ops/s
# Warmup Iteration  25: 1929624.738 ops/s
# Warmup Iteration  26: 1970177.949 ops/s
# Warmup Iteration  27: 1950198.220 ops/s
# Warmup Iteration  28: 1957402.212 ops/s
# Warmup Iteration  29: 1960950.449 ops/s
# Warmup Iteration  30: 1955663.060 ops/s
Iteration   1: 1971201.838 ops/s
Iteration   2: 1955562.562 ops/s
Iteration   3: 1964936.245 ops/s
Iteration   4: 1967858.334 ops/s
Iteration   5: 1961587.626 ops/s
Iteration   6: 1931041.590 ops/s
Iteration   7: 1961625.803 ops/s
Iteration   8: 1967001.352 ops/s
Iteration   9: 1957586.888 ops/s
Iteration  10: 1975057.838 ops/s
Iteration  11: 1968814.435 ops/s
Iteration  12: 1969311.112 ops/s
Iteration  13: 1961717.423 ops/s
Iteration  14: 1957387.060 ops/s
Iteration  15: 1965845.789 ops/s
Iteration  16: 1971056.406 ops/s
Iteration  17: 1970079.807 ops/s
Iteration  18: 1970458.765 ops/s
Iteration  19: 1962856.957 ops/s
Iteration  20: 1960911.236 ops/s
Iteration  21: 1942092.251 ops/s
Iteration  22: 1960512.240 ops/s
Iteration  23: 1965265.219 ops/s
Iteration  24: 1964326.387 ops/s
Iteration  25: 1965099.898 ops/s
Iteration  26: 1971301.930 ops/s
Iteration  27: 1962775.208 ops/s
Iteration  28: 1945273.535 ops/s
Iteration  29: 1975574.513 ops/s
Iteration  30: 1972473.456 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toBag":
  1963219.790 ±(99.9%) 6494.250 ops/s [Average]
  (min, avg, max) = (1931041.590, 1963219.790, 1975574.513), stdev = 9720.289
  CI (99.9%): [1956725.540, 1969714.040] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toBag  thrpt   30  1963219.790 ± 6494.250  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 99070.729 ops/s
# Warmup Iteration   2: 135829.955 ops/s
# Warmup Iteration   3: 167812.907 ops/s
# Warmup Iteration   4: 167452.758 ops/s
# Warmup Iteration   5: 166997.637 ops/s
# Warmup Iteration   6: 168072.637 ops/s
# Warmup Iteration   7: 167250.424 ops/s
# Warmup Iteration   8: 141053.950 ops/s
# Warmup Iteration   9: 168102.857 ops/s
# Warmup Iteration  10: 168330.183 ops/s
# Warmup Iteration  11: 166984.452 ops/s
# Warmup Iteration  12: 167876.607 ops/s
# Warmup Iteration  13: 167800.267 ops/s
# Warmup Iteration  14: 167049.721 ops/s
# Warmup Iteration  15: 167957.917 ops/s
# Warmup Iteration  16: 168243.681 ops/s
# Warmup Iteration  17: 174502.902 ops/s
# Warmup Iteration  18: 172081.923 ops/s
# Warmup Iteration  19: 173735.339 ops/s
# Warmup Iteration  20: 172697.899 ops/s
# Warmup Iteration  21: 173966.253 ops/s
# Warmup Iteration  22: 174552.661 ops/s
# Warmup Iteration  23: 173633.422 ops/s
# Warmup Iteration  24: 170353.953 ops/s
# Warmup Iteration  25: 172675.516 ops/s
# Warmup Iteration  26: 173249.152 ops/s
# Warmup Iteration  27: 173045.221 ops/s
# Warmup Iteration  28: 171564.637 ops/s
# Warmup Iteration  29: 172510.772 ops/s
# Warmup Iteration  30: 174068.594 ops/s
Iteration   1: 174306.123 ops/s
Iteration   2: 171867.144 ops/s
Iteration   3: 173742.962 ops/s
Iteration   4: 173865.440 ops/s
Iteration   5: 169940.260 ops/s
Iteration   6: 173701.570 ops/s
Iteration   7: 172921.576 ops/s
Iteration   8: 171546.581 ops/s
Iteration   9: 171554.072 ops/s
Iteration  10: 174080.729 ops/s
Iteration  11: 174092.774 ops/s
Iteration  12: 175110.786 ops/s
Iteration  13: 173952.381 ops/s
Iteration  14: 172821.559 ops/s
Iteration  15: 172620.189 ops/s
Iteration  16: 171095.380 ops/s
Iteration  17: 174379.127 ops/s
Iteration  18: 170584.656 ops/s
Iteration  19: 171210.913 ops/s
Iteration  20: 174148.445 ops/s
Iteration  21: 171044.456 ops/s
Iteration  22: 173125.627 ops/s
Iteration  23: 173461.936 ops/s
Iteration  24: 172876.438 ops/s
Iteration  25: 173013.088 ops/s
Iteration  26: 174244.848 ops/s
Iteration  27: 173839.046 ops/s
Iteration  28: 173692.143 ops/s
Iteration  29: 174623.198 ops/s
Iteration  30: 173375.326 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toBiMap":
  173027.959 ±(99.9%) 891.990 ops/s [Average]
  (min, avg, max) = (169940.260, 173027.959, 175110.786), stdev = 1335.088
  CI (99.9%): [172135.970, 173919.949] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toBiMap  thrpt   30  173027.959 ± 891.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2759060.994 ops/s
# Warmup Iteration   2: 6111208.198 ops/s
# Warmup Iteration   3: 5184354.450 ops/s
# Warmup Iteration   4: 6170252.779 ops/s
# Warmup Iteration   5: 6207040.751 ops/s
# Warmup Iteration   6: 6218326.402 ops/s
# Warmup Iteration   7: 6190727.733 ops/s
# Warmup Iteration   8: 6183118.985 ops/s
# Warmup Iteration   9: 6163270.116 ops/s
# Warmup Iteration  10: 6211919.615 ops/s
# Warmup Iteration  11: 6147749.993 ops/s
# Warmup Iteration  12: 6217538.128 ops/s
# Warmup Iteration  13: 6205704.199 ops/s
# Warmup Iteration  14: 6222919.676 ops/s
# Warmup Iteration  15: 6132758.228 ops/s
# Warmup Iteration  16: 6190990.823 ops/s
# Warmup Iteration  17: 6232351.609 ops/s
# Warmup Iteration  18: 6226618.528 ops/s
# Warmup Iteration  19: 6223221.463 ops/s
# Warmup Iteration  20: 6151535.598 ops/s
# Warmup Iteration  21: 6141346.937 ops/s
# Warmup Iteration  22: 6246869.430 ops/s
# Warmup Iteration  23: 6229231.091 ops/s
# Warmup Iteration  24: 6239307.572 ops/s
# Warmup Iteration  25: 6218779.860 ops/s
# Warmup Iteration  26: 6153388.653 ops/s
# Warmup Iteration  27: 6224468.221 ops/s
# Warmup Iteration  28: 6221691.592 ops/s
# Warmup Iteration  29: 6228115.923 ops/s
# Warmup Iteration  30: 6242996.225 ops/s
Iteration   1: 6226851.775 ops/s
Iteration   2: 6256525.946 ops/s
Iteration   3: 6247917.053 ops/s
Iteration   4: 6233353.923 ops/s
Iteration   5: 6234071.447 ops/s
Iteration   6: 6225652.487 ops/s
Iteration   7: 6115586.196 ops/s
Iteration   8: 6250467.757 ops/s
Iteration   9: 6211018.094 ops/s
Iteration  10: 6235687.908 ops/s
Iteration  11: 6220253.035 ops/s
Iteration  12: 6223446.800 ops/s
Iteration  13: 6255368.559 ops/s
Iteration  14: 6221919.004 ops/s
Iteration  15: 6270290.320 ops/s
Iteration  16: 6216488.659 ops/s
Iteration  17: 6251009.279 ops/s
Iteration  18: 6210515.976 ops/s
Iteration  19: 6232640.499 ops/s
Iteration  20: 6240315.894 ops/s
Iteration  21: 6235596.457 ops/s
Iteration  22: 6187838.127 ops/s
Iteration  23: 6240124.756 ops/s
Iteration  24: 6216172.514 ops/s
Iteration  25: 6219144.698 ops/s
Iteration  26: 6268858.575 ops/s
Iteration  27: 6236515.998 ops/s
Iteration  28: 6239903.935 ops/s
Iteration  29: 6176739.936 ops/s
Iteration  30: 6238460.682 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toCollection":
  6227957.876 ±(99.9%) 19704.398 ops/s [Average]
  (min, avg, max) = (6115586.196, 6227957.876, 6270290.320), stdev = 29492.618
  CI (99.9%): [6208253.478, 6247662.274] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toCollection  thrpt   30  6227957.876 ± 19704.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1348902.223 ops/s
# Warmup Iteration   2: 2795597.293 ops/s
# Warmup Iteration   3: 2370313.308 ops/s
# Warmup Iteration   4: 2821686.170 ops/s
# Warmup Iteration   5: 2821107.577 ops/s
# Warmup Iteration   6: 2808265.113 ops/s
# Warmup Iteration   7: 2828468.174 ops/s
# Warmup Iteration   8: 2809343.125 ops/s
# Warmup Iteration   9: 2812104.559 ops/s
# Warmup Iteration  10: 2807925.175 ops/s
# Warmup Iteration  11: 2811855.125 ops/s
# Warmup Iteration  12: 2809130.359 ops/s
# Warmup Iteration  13: 2798946.473 ops/s
# Warmup Iteration  14: 2813681.903 ops/s
# Warmup Iteration  15: 2811937.431 ops/s
# Warmup Iteration  16: 2812764.157 ops/s
# Warmup Iteration  17: 2707412.403 ops/s
# Warmup Iteration  18: 2728101.391 ops/s
# Warmup Iteration  19: 2719017.219 ops/s
# Warmup Iteration  20: 2711408.419 ops/s
# Warmup Iteration  21: 2703153.523 ops/s
# Warmup Iteration  22: 2715754.202 ops/s
# Warmup Iteration  23: 2703392.258 ops/s
# Warmup Iteration  24: 2712982.206 ops/s
# Warmup Iteration  25: 2713148.687 ops/s
# Warmup Iteration  26: 2717237.854 ops/s
# Warmup Iteration  27: 2699648.607 ops/s
# Warmup Iteration  28: 2713309.634 ops/s
# Warmup Iteration  29: 2716025.411 ops/s
# Warmup Iteration  30: 2725279.431 ops/s
Iteration   1: 2717994.396 ops/s
Iteration   2: 2714008.722 ops/s
Iteration   3: 2697830.717 ops/s
Iteration   4: 2725524.426 ops/s
Iteration   5: 2676959.468 ops/s
Iteration   6: 2680837.483 ops/s
Iteration   7: 2667974.133 ops/s
Iteration   8: 2681852.126 ops/s
Iteration   9: 2729087.577 ops/s
Iteration  10: 2701515.228 ops/s
Iteration  11: 2707172.471 ops/s
Iteration  12: 2724937.908 ops/s
Iteration  13: 2712699.479 ops/s
Iteration  14: 2643671.954 ops/s
Iteration  15: 2719380.489 ops/s
Iteration  16: 2722358.471 ops/s
Iteration  17: 2683424.328 ops/s
Iteration  18: 2730535.608 ops/s
Iteration  19: 2726837.862 ops/s
Iteration  20: 2716438.508 ops/s
Iteration  21: 2711902.728 ops/s
Iteration  22: 2698278.460 ops/s
Iteration  23: 2683741.184 ops/s
Iteration  24: 2699586.042 ops/s
Iteration  25: 2693799.647 ops/s
Iteration  26: 2703672.830 ops/s
Iteration  27: 2724570.488 ops/s
Iteration  28: 2717997.706 ops/s
Iteration  29: 2710327.044 ops/s
Iteration  30: 2714087.930 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutable":
  2704633.514 ±(99.9%) 13819.853 ops/s [Average]
  (min, avg, max) = (2643671.954, 2704633.514, 2730535.608), stdev = 20684.907
  CI (99.9%): [2690813.660, 2718453.367] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutable  thrpt   30  2704633.514 ± 13819.853  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 460721.119 ops/s
# Warmup Iteration   2: 1001836.593 ops/s
# Warmup Iteration   3: 1090536.640 ops/s
# Warmup Iteration   4: 1098987.651 ops/s
# Warmup Iteration   5: 908535.706 ops/s
# Warmup Iteration   6: 1106701.486 ops/s
# Warmup Iteration   7: 1097015.222 ops/s
# Warmup Iteration   8: 1107875.581 ops/s
# Warmup Iteration   9: 1100300.711 ops/s
# Warmup Iteration  10: 1101031.402 ops/s
# Warmup Iteration  11: 1087715.002 ops/s
# Warmup Iteration  12: 1102040.432 ops/s
# Warmup Iteration  13: 1097394.710 ops/s
# Warmup Iteration  14: 1108060.528 ops/s
# Warmup Iteration  15: 1083974.299 ops/s
# Warmup Iteration  16: 1100920.666 ops/s
# Warmup Iteration  17: 1104152.763 ops/s
# Warmup Iteration  18: 1093738.365 ops/s
# Warmup Iteration  19: 1105708.571 ops/s
# Warmup Iteration  20: 1107001.486 ops/s
# Warmup Iteration  21: 1102335.189 ops/s
# Warmup Iteration  22: 1093900.235 ops/s
# Warmup Iteration  23: 1098973.227 ops/s
# Warmup Iteration  24: 1107308.776 ops/s
# Warmup Iteration  25: 1104848.066 ops/s
# Warmup Iteration  26: 1103242.227 ops/s
# Warmup Iteration  27: 1105073.533 ops/s
# Warmup Iteration  28: 1102941.631 ops/s
# Warmup Iteration  29: 1096321.190 ops/s
# Warmup Iteration  30: 1100670.152 ops/s
Iteration   1: 1100446.204 ops/s
Iteration   2: 1080192.627 ops/s
Iteration   3: 1104554.126 ops/s
Iteration   4: 1096390.253 ops/s
Iteration   5: 1110281.816 ops/s
Iteration   6: 1108709.520 ops/s
Iteration   7: 1093556.540 ops/s
Iteration   8: 1091550.499 ops/s
Iteration   9: 1089755.237 ops/s
Iteration  10: 1099167.997 ops/s
Iteration  11: 1106976.945 ops/s
Iteration  12: 1096773.034 ops/s
Iteration  13: 1096932.635 ops/s
Iteration  14: 1104392.717 ops/s
Iteration  15: 1102362.712 ops/s
Iteration  16: 1104230.919 ops/s
Iteration  17: 1105742.450 ops/s
Iteration  18: 1107587.254 ops/s
Iteration  19: 1110270.362 ops/s
Iteration  20: 1103984.886 ops/s
Iteration  21: 1114467.657 ops/s
Iteration  22: 1108958.755 ops/s
Iteration  23: 1103604.137 ops/s
Iteration  24: 1087594.285 ops/s
Iteration  25: 1100634.427 ops/s
Iteration  26: 1110993.598 ops/s
Iteration  27: 1100354.389 ops/s
Iteration  28: 1110618.207 ops/s
Iteration  29: 1086924.050 ops/s
Iteration  30: 1096605.735 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBag":
  1101153.799 ±(99.9%) 5524.431 ops/s [Average]
  (min, avg, max) = (1080192.627, 1101153.799, 1114467.657), stdev = 8268.709
  CI (99.9%): [1095629.368, 1106678.230] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1101153.799 ± 5524.431  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 87121.336 ops/s
# Warmup Iteration   2: 125011.242 ops/s
# Warmup Iteration   3: 157038.116 ops/s
# Warmup Iteration   4: 158043.767 ops/s
# Warmup Iteration   5: 158321.736 ops/s
# Warmup Iteration   6: 157867.215 ops/s
# Warmup Iteration   7: 157195.463 ops/s
# Warmup Iteration   8: 130550.199 ops/s
# Warmup Iteration   9: 157860.038 ops/s
# Warmup Iteration  10: 157457.771 ops/s
# Warmup Iteration  11: 157571.755 ops/s
# Warmup Iteration  12: 157736.892 ops/s
# Warmup Iteration  13: 158434.134 ops/s
# Warmup Iteration  14: 157952.552 ops/s
# Warmup Iteration  15: 158249.595 ops/s
# Warmup Iteration  16: 158206.137 ops/s
# Warmup Iteration  17: 163583.986 ops/s
# Warmup Iteration  18: 163103.695 ops/s
# Warmup Iteration  19: 161963.200 ops/s
# Warmup Iteration  20: 163585.558 ops/s
# Warmup Iteration  21: 163305.760 ops/s
# Warmup Iteration  22: 163450.500 ops/s
# Warmup Iteration  23: 163006.894 ops/s
# Warmup Iteration  24: 163357.789 ops/s
# Warmup Iteration  25: 163272.447 ops/s
# Warmup Iteration  26: 164195.374 ops/s
# Warmup Iteration  27: 164196.664 ops/s
# Warmup Iteration  28: 162097.635 ops/s
# Warmup Iteration  29: 164247.667 ops/s
# Warmup Iteration  30: 162613.608 ops/s
Iteration   1: 163514.268 ops/s
Iteration   2: 163278.530 ops/s
Iteration   3: 164154.723 ops/s
Iteration   4: 162592.799 ops/s
Iteration   5: 162972.559 ops/s
Iteration   6: 163198.967 ops/s
Iteration   7: 162595.022 ops/s
Iteration   8: 163639.469 ops/s
Iteration   9: 163742.569 ops/s
Iteration  10: 164143.818 ops/s
Iteration  11: 162080.099 ops/s
Iteration  12: 163643.300 ops/s
Iteration  13: 162973.544 ops/s
Iteration  14: 163737.955 ops/s
Iteration  15: 163253.062 ops/s
Iteration  16: 160629.169 ops/s
Iteration  17: 162952.458 ops/s
Iteration  18: 158131.909 ops/s
Iteration  19: 163145.206 ops/s
Iteration  20: 162613.885 ops/s
Iteration  21: 160786.069 ops/s
Iteration  22: 163753.459 ops/s
Iteration  23: 160849.897 ops/s
Iteration  24: 162771.709 ops/s
Iteration  25: 164078.995 ops/s
Iteration  26: 163435.470 ops/s
Iteration  27: 164011.391 ops/s
Iteration  28: 163451.448 ops/s
Iteration  29: 164173.879 ops/s
Iteration  30: 162942.861 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBiMap":
  162908.283 ±(99.9%) 873.133 ops/s [Average]
  (min, avg, max) = (158131.909, 162908.283, 164173.879), stdev = 1306.864
  CI (99.9%): [162035.150, 163781.416] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  162908.283 ± 873.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1308334.063 ops/s
# Warmup Iteration   2: 3117416.870 ops/s
# Warmup Iteration   3: 2693006.304 ops/s
# Warmup Iteration   4: 3202130.227 ops/s
# Warmup Iteration   5: 3205835.760 ops/s
# Warmup Iteration   6: 3175702.826 ops/s
# Warmup Iteration   7: 3178161.551 ops/s
# Warmup Iteration   8: 3198629.756 ops/s
# Warmup Iteration   9: 3183398.875 ops/s
# Warmup Iteration  10: 3193138.138 ops/s
# Warmup Iteration  11: 3219866.781 ops/s
# Warmup Iteration  12: 3172083.330 ops/s
# Warmup Iteration  13: 3168780.570 ops/s
# Warmup Iteration  14: 3218254.800 ops/s
# Warmup Iteration  15: 3172605.937 ops/s
# Warmup Iteration  16: 3200778.983 ops/s
# Warmup Iteration  17: 3180281.785 ops/s
# Warmup Iteration  18: 3194266.780 ops/s
# Warmup Iteration  19: 3198800.363 ops/s
# Warmup Iteration  20: 3230332.807 ops/s
# Warmup Iteration  21: 3213652.364 ops/s
# Warmup Iteration  22: 3229973.260 ops/s
# Warmup Iteration  23: 3226152.970 ops/s
# Warmup Iteration  24: 3225263.697 ops/s
# Warmup Iteration  25: 3209328.312 ops/s
# Warmup Iteration  26: 3215735.496 ops/s
# Warmup Iteration  27: 3180455.685 ops/s
# Warmup Iteration  28: 3206043.596 ops/s
# Warmup Iteration  29: 3189856.008 ops/s
# Warmup Iteration  30: 3199826.388 ops/s
Iteration   1: 3214718.630 ops/s
Iteration   2: 3211366.084 ops/s
Iteration   3: 3214828.891 ops/s
Iteration   4: 3158205.606 ops/s
Iteration   5: 3164693.291 ops/s
Iteration   6: 3131870.769 ops/s
Iteration   7: 3220744.215 ops/s
Iteration   8: 3223713.837 ops/s
Iteration   9: 3236740.564 ops/s
Iteration  10: 3205036.389 ops/s
Iteration  11: 3209888.542 ops/s
Iteration  12: 3203393.215 ops/s
Iteration  13: 3238274.562 ops/s
Iteration  14: 3222164.991 ops/s
Iteration  15: 3232653.806 ops/s
Iteration  16: 3153607.979 ops/s
Iteration  17: 3191121.921 ops/s
Iteration  18: 3208688.430 ops/s
Iteration  19: 3199357.200 ops/s
Iteration  20: 3226855.589 ops/s
Iteration  21: 3224581.727 ops/s
Iteration  22: 3217101.630 ops/s
Iteration  23: 3192625.528 ops/s
Iteration  24: 3222707.748 ops/s
Iteration  25: 3223026.355 ops/s
Iteration  26: 3214358.428 ops/s
Iteration  27: 3203264.285 ops/s
Iteration  28: 3206990.572 ops/s
Iteration  29: 3201575.523 ops/s
Iteration  30: 3198731.919 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableList":
  3205762.941 ±(99.9%) 16644.624 ops/s [Average]
  (min, avg, max) = (3131870.769, 3205762.941, 3238274.562), stdev = 24912.891
  CI (99.9%): [3189118.317, 3222407.565] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableList  thrpt   30  3205762.941 ± 16644.624  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 771968.296 ops/s
# Warmup Iteration   2: 1861254.089 ops/s
# Warmup Iteration   3: 1693673.618 ops/s
# Warmup Iteration   4: 1756270.614 ops/s
# Warmup Iteration   5: 1891180.909 ops/s
# Warmup Iteration   6: 1889161.840 ops/s
# Warmup Iteration   7: 1882952.901 ops/s
# Warmup Iteration   8: 1868092.450 ops/s
# Warmup Iteration   9: 1902041.991 ops/s
# Warmup Iteration  10: 1869341.441 ops/s
# Warmup Iteration  11: 1874014.544 ops/s
# Warmup Iteration  12: 1876329.370 ops/s
# Warmup Iteration  13: 1871713.362 ops/s
# Warmup Iteration  14: 1893711.870 ops/s
# Warmup Iteration  15: 1873616.437 ops/s
# Warmup Iteration  16: 1876256.986 ops/s
# Warmup Iteration  17: 1859727.288 ops/s
# Warmup Iteration  18: 1887209.615 ops/s
# Warmup Iteration  19: 1874315.395 ops/s
# Warmup Iteration  20: 1880522.129 ops/s
# Warmup Iteration  21: 1888579.136 ops/s
# Warmup Iteration  22: 1889996.146 ops/s
# Warmup Iteration  23: 1896902.619 ops/s
# Warmup Iteration  24: 1853117.826 ops/s
# Warmup Iteration  25: 1850046.648 ops/s
# Warmup Iteration  26: 1891225.645 ops/s
# Warmup Iteration  27: 1889862.355 ops/s
# Warmup Iteration  28: 1885786.901 ops/s
# Warmup Iteration  29: 1865836.377 ops/s
# Warmup Iteration  30: 1891802.388 ops/s
Iteration   1: 1876797.878 ops/s
Iteration   2: 1852596.662 ops/s
Iteration   3: 1866170.189 ops/s
Iteration   4: 1886841.726 ops/s
Iteration   5: 1887256.410 ops/s
Iteration   6: 1861145.705 ops/s
Iteration   7: 1917952.364 ops/s
Iteration   8: 1881936.485 ops/s
Iteration   9: 1880173.141 ops/s
Iteration  10: 1914993.868 ops/s
Iteration  11: 1902201.110 ops/s
Iteration  12: 1886730.786 ops/s
Iteration  13: 1897602.020 ops/s
Iteration  14: 1910018.757 ops/s
Iteration  15: 1910752.149 ops/s
Iteration  16: 1881745.174 ops/s
Iteration  17: 1885404.997 ops/s
Iteration  18: 1808275.253 ops/s
Iteration  19: 1830855.730 ops/s
Iteration  20: 1885906.677 ops/s
Iteration  21: 1854796.645 ops/s
Iteration  22: 1840413.928 ops/s
Iteration  23: 1875787.175 ops/s
Iteration  24: 1891448.600 ops/s
Iteration  25: 1856732.769 ops/s
Iteration  26: 1889795.899 ops/s
Iteration  27: 1894043.939 ops/s
Iteration  28: 1839811.223 ops/s
Iteration  29: 1900935.970 ops/s
Iteration  30: 1860219.350 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableMap":
  1877644.753 ±(99.9%) 17484.729 ops/s [Average]
  (min, avg, max) = (1808275.253, 1877644.753, 1917952.364), stdev = 26170.321
  CI (99.9%): [1860160.024, 1895129.481] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1877644.753 ± 17484.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 782056.240 ops/s
# Warmup Iteration   2: 1755566.618 ops/s
# Warmup Iteration   3: 1848113.915 ops/s
# Warmup Iteration   4: 1692107.090 ops/s
# Warmup Iteration   5: 1702061.527 ops/s
# Warmup Iteration   6: 1849083.106 ops/s
# Warmup Iteration   7: 1858771.779 ops/s
# Warmup Iteration   8: 1859215.428 ops/s
# Warmup Iteration   9: 1854774.255 ops/s
# Warmup Iteration  10: 1825610.355 ops/s
# Warmup Iteration  11: 1850364.502 ops/s
# Warmup Iteration  12: 1862067.080 ops/s
# Warmup Iteration  13: 1854345.730 ops/s
# Warmup Iteration  14: 1858791.569 ops/s
# Warmup Iteration  15: 1852077.606 ops/s
# Warmup Iteration  16: 1854604.527 ops/s
# Warmup Iteration  17: 1861989.652 ops/s
# Warmup Iteration  18: 1865456.851 ops/s
# Warmup Iteration  19: 1854177.392 ops/s
# Warmup Iteration  20: 1865547.576 ops/s
# Warmup Iteration  21: 1855637.321 ops/s
# Warmup Iteration  22: 1862285.889 ops/s
# Warmup Iteration  23: 1859489.200 ops/s
# Warmup Iteration  24: 1851548.558 ops/s
# Warmup Iteration  25: 1854070.808 ops/s
# Warmup Iteration  26: 1857860.232 ops/s
# Warmup Iteration  27: 1854977.122 ops/s
# Warmup Iteration  28: 1859152.741 ops/s
# Warmup Iteration  29: 1852086.522 ops/s
# Warmup Iteration  30: 1815655.352 ops/s
Iteration   1: 1861844.439 ops/s
Iteration   2: 1846857.845 ops/s
Iteration   3: 1862497.894 ops/s
Iteration   4: 1851378.624 ops/s
Iteration   5: 1863404.115 ops/s
Iteration   6: 1838230.194 ops/s
Iteration   7: 1813036.377 ops/s
Iteration   8: 1858507.453 ops/s
Iteration   9: 1859187.564 ops/s
Iteration  10: 1861666.997 ops/s
Iteration  11: 1855869.668 ops/s
Iteration  12: 1833887.769 ops/s
Iteration  13: 1826038.158 ops/s
Iteration  14: 1863091.008 ops/s
Iteration  15: 1832323.861 ops/s
Iteration  16: 1867033.394 ops/s
Iteration  17: 1861460.639 ops/s
Iteration  18: 1863208.190 ops/s
Iteration  19: 1872909.943 ops/s
Iteration  20: 1863005.824 ops/s
Iteration  21: 1838660.622 ops/s
Iteration  22: 1815796.592 ops/s
Iteration  23: 1861480.010 ops/s
Iteration  24: 1859528.876 ops/s
Iteration  25: 1858898.805 ops/s
Iteration  26: 1859277.226 ops/s
Iteration  27: 1851210.642 ops/s
Iteration  28: 1858612.257 ops/s
Iteration  29: 1865835.317 ops/s
Iteration  30: 1826457.575 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSet":
  1851706.596 ±(99.9%) 10677.737 ops/s [Average]
  (min, avg, max) = (1813036.377, 1851706.596, 1872909.943), stdev = 15981.936
  CI (99.9%): [1841028.859, 1862384.333] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSet  thrpt   30  1851706.596 ± 10677.737  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 704044.349 ops/s
# Warmup Iteration   2: 1803208.940 ops/s
# Warmup Iteration   3: 1799097.763 ops/s
# Warmup Iteration   4: 1499947.017 ops/s
# Warmup Iteration   5: 1815684.419 ops/s
# Warmup Iteration   6: 1816854.134 ops/s
# Warmup Iteration   7: 1821760.458 ops/s
# Warmup Iteration   8: 1819025.158 ops/s
# Warmup Iteration   9: 1804346.120 ops/s
# Warmup Iteration  10: 1799982.061 ops/s
# Warmup Iteration  11: 1818200.445 ops/s
# Warmup Iteration  12: 1797856.987 ops/s
# Warmup Iteration  13: 1814227.687 ops/s
# Warmup Iteration  14: 1810075.393 ops/s
# Warmup Iteration  15: 1815982.905 ops/s
# Warmup Iteration  16: 1818653.677 ops/s
# Warmup Iteration  17: 1820853.834 ops/s
# Warmup Iteration  18: 1821695.721 ops/s
# Warmup Iteration  19: 1811004.177 ops/s
# Warmup Iteration  20: 1788507.875 ops/s
# Warmup Iteration  21: 1805645.333 ops/s
# Warmup Iteration  22: 1821253.273 ops/s
# Warmup Iteration  23: 1819686.897 ops/s
# Warmup Iteration  24: 1814115.401 ops/s
# Warmup Iteration  25: 1804427.523 ops/s
# Warmup Iteration  26: 1817681.090 ops/s
# Warmup Iteration  27: 1818359.880 ops/s
# Warmup Iteration  28: 1813823.887 ops/s
# Warmup Iteration  29: 1799611.629 ops/s
# Warmup Iteration  30: 1804445.515 ops/s
Iteration   1: 1801913.220 ops/s
Iteration   2: 1818540.029 ops/s
Iteration   3: 1819870.771 ops/s
Iteration   4: 1819765.802 ops/s
Iteration   5: 1825055.878 ops/s
Iteration   6: 1799291.196 ops/s
Iteration   7: 1819444.942 ops/s
Iteration   8: 1825992.889 ops/s
Iteration   9: 1799566.457 ops/s
Iteration  10: 1813540.888 ops/s
Iteration  11: 1806860.983 ops/s
Iteration  12: 1823023.513 ops/s
Iteration  13: 1814873.295 ops/s
Iteration  14: 1821232.921 ops/s
Iteration  15: 1820995.873 ops/s
Iteration  16: 1820767.750 ops/s
Iteration  17: 1822228.642 ops/s
Iteration  18: 1814471.993 ops/s
Iteration  19: 1820851.623 ops/s
Iteration  20: 1826562.886 ops/s
Iteration  21: 1817126.094 ops/s
Iteration  22: 1812493.832 ops/s
Iteration  23: 1814567.897 ops/s
Iteration  24: 1818463.350 ops/s
Iteration  25: 1835003.216 ops/s
Iteration  26: 1816968.917 ops/s
Iteration  27: 1785731.156 ops/s
Iteration  28: 1816200.004 ops/s
Iteration  29: 1824233.623 ops/s
Iteration  30: 1827577.953 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  1816773.920 ±(99.9%) 6626.042 ops/s [Average]
  (min, avg, max) = (1785731.156, 1816773.920, 1835003.216), stdev = 9917.549
  CI (99.9%): [1810147.877, 1823399.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  1816773.920 ± 6626.042  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 262662.935 ops/s
# Warmup Iteration   2: 475458.399 ops/s
# Warmup Iteration   3: 589162.954 ops/s
# Warmup Iteration   4: 593874.160 ops/s
# Warmup Iteration   5: 592586.970 ops/s
# Warmup Iteration   6: 470434.129 ops/s
# Warmup Iteration   7: 593493.022 ops/s
# Warmup Iteration   8: 593233.360 ops/s
# Warmup Iteration   9: 587617.933 ops/s
# Warmup Iteration  10: 593361.439 ops/s
# Warmup Iteration  11: 593839.654 ops/s
# Warmup Iteration  12: 587563.287 ops/s
# Warmup Iteration  13: 581652.167 ops/s
# Warmup Iteration  14: 593529.185 ops/s
# Warmup Iteration  15: 594801.800 ops/s
# Warmup Iteration  16: 594221.892 ops/s
# Warmup Iteration  17: 592154.600 ops/s
# Warmup Iteration  18: 592438.739 ops/s
# Warmup Iteration  19: 588754.399 ops/s
# Warmup Iteration  20: 587955.015 ops/s
# Warmup Iteration  21: 592794.458 ops/s
# Warmup Iteration  22: 594268.692 ops/s
# Warmup Iteration  23: 594800.953 ops/s
# Warmup Iteration  24: 593862.353 ops/s
# Warmup Iteration  25: 593122.903 ops/s
# Warmup Iteration  26: 588426.347 ops/s
# Warmup Iteration  27: 595384.985 ops/s
# Warmup Iteration  28: 588646.576 ops/s
# Warmup Iteration  29: 592725.207 ops/s
# Warmup Iteration  30: 592326.895 ops/s
Iteration   1: 595163.690 ops/s
Iteration   2: 582055.149 ops/s
Iteration   3: 591936.064 ops/s
Iteration   4: 594372.637 ops/s
Iteration   5: 596181.835 ops/s
Iteration   6: 595592.964 ops/s
Iteration   7: 595035.352 ops/s
Iteration   8: 595064.648 ops/s
Iteration   9: 595813.470 ops/s
Iteration  10: 593493.564 ops/s
Iteration  11: 590216.244 ops/s
Iteration  12: 585297.479 ops/s
Iteration  13: 591051.868 ops/s
Iteration  14: 593138.273 ops/s
Iteration  15: 595734.485 ops/s
Iteration  16: 593527.202 ops/s
Iteration  17: 596091.680 ops/s
Iteration  18: 595102.404 ops/s
Iteration  19: 594026.872 ops/s
Iteration  20: 591383.772 ops/s
Iteration  21: 595446.729 ops/s
Iteration  22: 591918.058 ops/s
Iteration  23: 591748.499 ops/s
Iteration  24: 586499.068 ops/s
Iteration  25: 595370.431 ops/s
Iteration  26: 590785.185 ops/s
Iteration  27: 583340.469 ops/s
Iteration  28: 583668.267 ops/s
Iteration  29: 593238.635 ops/s
Iteration  30: 586059.753 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBagBy":
  591945.158 ±(99.9%) 2812.576 ops/s [Average]
  (min, avg, max) = (582055.149, 591945.158, 596181.835), stdev = 4209.732
  CI (99.9%): [589132.582, 594757.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  591945.158 ± 2812.576  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 319944.428 ops/s
# Warmup Iteration   2: 619819.130 ops/s
# Warmup Iteration   3: 706597.879 ops/s
# Warmup Iteration   4: 712818.964 ops/s
# Warmup Iteration   5: 630227.867 ops/s
# Warmup Iteration   6: 666006.200 ops/s
# Warmup Iteration   7: 714675.199 ops/s
# Warmup Iteration   8: 714007.268 ops/s
# Warmup Iteration   9: 708476.227 ops/s
# Warmup Iteration  10: 712290.646 ops/s
# Warmup Iteration  11: 713429.131 ops/s
# Warmup Iteration  12: 714636.897 ops/s
# Warmup Iteration  13: 710767.498 ops/s
# Warmup Iteration  14: 716448.014 ops/s
# Warmup Iteration  15: 713546.199 ops/s
# Warmup Iteration  16: 708861.443 ops/s
# Warmup Iteration  17: 706186.768 ops/s
# Warmup Iteration  18: 714038.964 ops/s
# Warmup Iteration  19: 714446.379 ops/s
# Warmup Iteration  20: 712543.394 ops/s
# Warmup Iteration  21: 712258.292 ops/s
# Warmup Iteration  22: 711865.960 ops/s
# Warmup Iteration  23: 708286.000 ops/s
# Warmup Iteration  24: 702217.679 ops/s
# Warmup Iteration  25: 712596.336 ops/s
# Warmup Iteration  26: 707540.760 ops/s
# Warmup Iteration  27: 713624.291 ops/s
# Warmup Iteration  28: 711737.165 ops/s
# Warmup Iteration  29: 714352.423 ops/s
# Warmup Iteration  30: 706184.969 ops/s
Iteration   1: 713158.357 ops/s
Iteration   2: 715701.576 ops/s
Iteration   3: 711807.200 ops/s
Iteration   4: 711047.029 ops/s
Iteration   5: 715003.319 ops/s
Iteration   6: 704033.031 ops/s
Iteration   7: 711761.757 ops/s
Iteration   8: 714807.473 ops/s
Iteration   9: 710972.413 ops/s
Iteration  10: 704462.800 ops/s
Iteration  11: 708475.086 ops/s
Iteration  12: 712219.563 ops/s
Iteration  13: 713715.007 ops/s
Iteration  14: 689556.705 ops/s
Iteration  15: 713257.305 ops/s
Iteration  16: 713164.700 ops/s
Iteration  17: 713110.473 ops/s
Iteration  18: 714149.743 ops/s
Iteration  19: 709642.493 ops/s
Iteration  20: 713600.334 ops/s
Iteration  21: 715419.190 ops/s
Iteration  22: 713990.887 ops/s
Iteration  23: 713389.237 ops/s
Iteration  24: 713010.154 ops/s
Iteration  25: 709430.062 ops/s
Iteration  26: 713305.451 ops/s
Iteration  27: 715581.199 ops/s
Iteration  28: 711871.355 ops/s
Iteration  29: 713440.940 ops/s
Iteration  30: 711223.650 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  711476.950 ±(99.9%) 3339.502 ops/s [Average]
  (min, avg, max) = (689556.705, 711476.950, 715701.576), stdev = 4998.409
  CI (99.9%): [708137.448, 714816.451] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  711476.950 ± 3339.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 527625.196 ops/s
# Warmup Iteration   2: 1151910.118 ops/s
# Warmup Iteration   3: 1290434.472 ops/s
# Warmup Iteration   4: 1307093.304 ops/s
# Warmup Iteration   5: 1084675.396 ops/s
# Warmup Iteration   6: 1309854.923 ops/s
# Warmup Iteration   7: 1310510.738 ops/s
# Warmup Iteration   8: 1307488.067 ops/s
# Warmup Iteration   9: 1296635.164 ops/s
# Warmup Iteration  10: 1304074.898 ops/s
# Warmup Iteration  11: 1302266.292 ops/s
# Warmup Iteration  12: 1312110.317 ops/s
# Warmup Iteration  13: 1307983.374 ops/s
# Warmup Iteration  14: 1311992.524 ops/s
# Warmup Iteration  15: 1306577.872 ops/s
# Warmup Iteration  16: 1310274.037 ops/s
# Warmup Iteration  17: 1309018.256 ops/s
# Warmup Iteration  18: 1308506.785 ops/s
# Warmup Iteration  19: 1310756.662 ops/s
# Warmup Iteration  20: 1304977.985 ops/s
# Warmup Iteration  21: 1306326.201 ops/s
# Warmup Iteration  22: 1306980.021 ops/s
# Warmup Iteration  23: 1303196.900 ops/s
# Warmup Iteration  24: 1313243.603 ops/s
# Warmup Iteration  25: 1311101.167 ops/s
# Warmup Iteration  26: 1295563.020 ops/s
# Warmup Iteration  27: 1307595.569 ops/s
# Warmup Iteration  28: 1311494.836 ops/s
# Warmup Iteration  29: 1306544.745 ops/s
# Warmup Iteration  30: 1305095.415 ops/s
Iteration   1: 1309473.624 ops/s
Iteration   2: 1311262.494 ops/s
Iteration   3: 1305445.228 ops/s
Iteration   4: 1303376.295 ops/s
Iteration   5: 1312993.183 ops/s
Iteration   6: 1307300.684 ops/s
Iteration   7: 1306716.440 ops/s
Iteration   8: 1297084.716 ops/s
Iteration   9: 1309963.964 ops/s
Iteration  10: 1302422.954 ops/s
Iteration  11: 1315009.307 ops/s
Iteration  12: 1310357.234 ops/s
Iteration  13: 1308638.416 ops/s
Iteration  14: 1311975.975 ops/s
Iteration  15: 1311669.687 ops/s
Iteration  16: 1310966.865 ops/s
Iteration  17: 1303132.623 ops/s
Iteration  18: 1300810.125 ops/s
Iteration  19: 1304435.588 ops/s
Iteration  20: 1309954.998 ops/s
Iteration  21: 1314422.910 ops/s
Iteration  22: 1307622.213 ops/s
Iteration  23: 1317753.320 ops/s
Iteration  24: 1315285.968 ops/s
Iteration  25: 1313879.412 ops/s
Iteration  26: 1308042.884 ops/s
Iteration  27: 1308507.447 ops/s
Iteration  28: 1315676.483 ops/s
Iteration  29: 1307050.327 ops/s
Iteration  30: 1303441.885 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1308822.442 ±(99.9%) 3263.011 ops/s [Average]
  (min, avg, max) = (1297084.716, 1308822.442, 1317753.320), stdev = 4883.922
  CI (99.9%): [1305559.430, 1312085.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1308822.442 ± 3263.011  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2201627.538 ops/s
# Warmup Iteration   2: 5260918.304 ops/s
# Warmup Iteration   3: 4341722.974 ops/s
# Warmup Iteration   4: 5211061.312 ops/s
# Warmup Iteration   5: 5194599.970 ops/s
# Warmup Iteration   6: 5185681.641 ops/s
# Warmup Iteration   7: 5174274.033 ops/s
# Warmup Iteration   8: 5206227.556 ops/s
# Warmup Iteration   9: 5206146.436 ops/s
# Warmup Iteration  10: 5158658.083 ops/s
# Warmup Iteration  11: 5211879.409 ops/s
# Warmup Iteration  12: 5187201.778 ops/s
# Warmup Iteration  13: 5204168.353 ops/s
# Warmup Iteration  14: 5187191.041 ops/s
# Warmup Iteration  15: 5206362.862 ops/s
# Warmup Iteration  16: 5204454.290 ops/s
# Warmup Iteration  17: 5247425.618 ops/s
# Warmup Iteration  18: 5223592.982 ops/s
# Warmup Iteration  19: 5179030.070 ops/s
# Warmup Iteration  20: 5197655.592 ops/s
# Warmup Iteration  21: 5242481.668 ops/s
# Warmup Iteration  22: 5227775.871 ops/s
# Warmup Iteration  23: 5166419.048 ops/s
# Warmup Iteration  24: 5165233.366 ops/s
# Warmup Iteration  25: 5174465.399 ops/s
# Warmup Iteration  26: 5232017.958 ops/s
# Warmup Iteration  27: 5231161.733 ops/s
# Warmup Iteration  28: 5239262.184 ops/s
# Warmup Iteration  29: 5248167.528 ops/s
# Warmup Iteration  30: 5188475.151 ops/s
Iteration   1: 5268084.782 ops/s
Iteration   2: 5240812.992 ops/s
Iteration   3: 5258659.296 ops/s
Iteration   4: 5161493.844 ops/s
Iteration   5: 5202812.910 ops/s
Iteration   6: 5248827.601 ops/s
Iteration   7: 5155776.456 ops/s
Iteration   8: 5196982.002 ops/s
Iteration   9: 5106255.904 ops/s
Iteration  10: 5230550.358 ops/s
Iteration  11: 5223527.343 ops/s
Iteration  12: 5160190.114 ops/s
Iteration  13: 5214298.626 ops/s
Iteration  14: 5250845.748 ops/s
Iteration  15: 5199006.628 ops/s
Iteration  16: 5182046.383 ops/s
Iteration  17: 5198602.145 ops/s
Iteration  18: 5250893.474 ops/s
Iteration  19: 5249233.366 ops/s
Iteration  20: 5253892.999 ops/s
Iteration  21: 5263971.597 ops/s
Iteration  22: 5241811.114 ops/s
Iteration  23: 5241842.315 ops/s
Iteration  24: 5226093.262 ops/s
Iteration  25: 5242392.113 ops/s
Iteration  26: 5246467.473 ops/s
Iteration  27: 5225921.049 ops/s
Iteration  28: 5236297.796 ops/s
Iteration  29: 5221295.060 ops/s
Iteration  30: 5231650.818 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedListBy":
  5221017.852 ±(99.9%) 25089.336 ops/s [Average]
  (min, avg, max) = (5106255.904, 5221017.852, 5268084.782), stdev = 37552.540
  CI (99.9%): [5195928.516, 5246107.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  5221017.852 ± 25089.336  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1023740.830 ops/s
# Warmup Iteration   2: 2378458.605 ops/s
# Warmup Iteration   3: 2413252.490 ops/s
# Warmup Iteration   4: 1996266.535 ops/s
# Warmup Iteration   5: 2413063.893 ops/s
# Warmup Iteration   6: 2393580.309 ops/s
# Warmup Iteration   7: 2374560.518 ops/s
# Warmup Iteration   8: 2421021.400 ops/s
# Warmup Iteration   9: 2410437.431 ops/s
# Warmup Iteration  10: 2385103.536 ops/s
# Warmup Iteration  11: 2395170.172 ops/s
# Warmup Iteration  12: 2412086.295 ops/s
# Warmup Iteration  13: 2399507.349 ops/s
# Warmup Iteration  14: 2413287.020 ops/s
# Warmup Iteration  15: 2403054.181 ops/s
# Warmup Iteration  16: 2402157.533 ops/s
# Warmup Iteration  17: 2407024.344 ops/s
# Warmup Iteration  18: 2399134.934 ops/s
# Warmup Iteration  19: 2370586.360 ops/s
# Warmup Iteration  20: 2413400.303 ops/s
# Warmup Iteration  21: 2381590.709 ops/s
# Warmup Iteration  22: 2403430.800 ops/s
# Warmup Iteration  23: 2410917.998 ops/s
# Warmup Iteration  24: 2406536.358 ops/s
# Warmup Iteration  25: 2401770.480 ops/s
# Warmup Iteration  26: 2410560.608 ops/s
# Warmup Iteration  27: 2391386.464 ops/s
# Warmup Iteration  28: 2403789.827 ops/s
# Warmup Iteration  29: 2402727.597 ops/s
# Warmup Iteration  30: 2407526.573 ops/s
Iteration   1: 2409957.080 ops/s
Iteration   2: 2405166.716 ops/s
Iteration   3: 2411388.349 ops/s
Iteration   4: 2348442.779 ops/s
Iteration   5: 2394697.482 ops/s
Iteration   6: 2412040.043 ops/s
Iteration   7: 2370690.939 ops/s
Iteration   8: 2309182.198 ops/s
Iteration   9: 2400912.369 ops/s
Iteration  10: 2415834.350 ops/s
Iteration  11: 2367152.986 ops/s
Iteration  12: 2407175.469 ops/s
Iteration  13: 2399531.726 ops/s
Iteration  14: 2414749.354 ops/s
Iteration  15: 2409021.163 ops/s
Iteration  16: 2419873.050 ops/s
Iteration  17: 2398459.048 ops/s
Iteration  18: 2400186.049 ops/s
Iteration  19: 2409443.298 ops/s
Iteration  20: 2367842.259 ops/s
Iteration  21: 2377083.079 ops/s
Iteration  22: 2409841.775 ops/s
Iteration  23: 2369645.354 ops/s
Iteration  24: 2411564.476 ops/s
Iteration  25: 2368231.301 ops/s
Iteration  26: 2370356.794 ops/s
Iteration  27: 2372489.819 ops/s
Iteration  28: 2416880.593 ops/s
Iteration  29: 2412942.544 ops/s
Iteration  30: 2407038.818 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  2392927.375 ±(99.9%) 16974.189 ops/s [Average]
  (min, avg, max) = (2309182.198, 2392927.375, 2419873.050), stdev = 25406.169
  CI (99.9%): [2375953.186, 2409901.564] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  2392927.375 ± 16974.189  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4253182.298 ops/s
# Warmup Iteration   2: 9932057.380 ops/s
# Warmup Iteration   3: 8347379.555 ops/s
# Warmup Iteration   4: 10001423.556 ops/s
# Warmup Iteration   5: 9916135.500 ops/s
# Warmup Iteration   6: 10000053.960 ops/s
# Warmup Iteration   7: 9988028.021 ops/s
# Warmup Iteration   8: 10047252.867 ops/s
# Warmup Iteration   9: 9999776.262 ops/s
# Warmup Iteration  10: 9931479.460 ops/s
# Warmup Iteration  11: 10004807.660 ops/s
# Warmup Iteration  12: 9964922.379 ops/s
# Warmup Iteration  13: 9994280.319 ops/s
# Warmup Iteration  14: 10007644.718 ops/s
# Warmup Iteration  15: 9969398.229 ops/s
# Warmup Iteration  16: 10002616.233 ops/s
# Warmup Iteration  17: 10003535.554 ops/s
# Warmup Iteration  18: 10030344.492 ops/s
# Warmup Iteration  19: 9956291.826 ops/s
# Warmup Iteration  20: 10029175.954 ops/s
# Warmup Iteration  21: 10033530.043 ops/s
# Warmup Iteration  22: 9979212.613 ops/s
# Warmup Iteration  23: 10035675.427 ops/s
# Warmup Iteration  24: 10019033.373 ops/s
# Warmup Iteration  25: 9969048.883 ops/s
# Warmup Iteration  26: 9902220.533 ops/s
# Warmup Iteration  27: 10028303.926 ops/s
# Warmup Iteration  28: 10058049.218 ops/s
# Warmup Iteration  29: 9908228.183 ops/s
# Warmup Iteration  30: 9957794.786 ops/s
Iteration   1: 10002090.383 ops/s
Iteration   2: 9960657.071 ops/s
Iteration   3: 10013379.271 ops/s
Iteration   4: 9980720.035 ops/s
Iteration   5: 9954494.886 ops/s
Iteration   6: 10017038.431 ops/s
Iteration   7: 9895600.957 ops/s
Iteration   8: 10018981.294 ops/s
Iteration   9: 9811260.087 ops/s
Iteration  10: 9990553.088 ops/s
Iteration  11: 10015372.939 ops/s
Iteration  12: 9911757.406 ops/s
Iteration  13: 10008571.712 ops/s
Iteration  14: 10003962.003 ops/s
Iteration  15: 9904903.597 ops/s
Iteration  16: 10002998.529 ops/s
Iteration  17: 9974150.030 ops/s
Iteration  18: 9985606.579 ops/s
Iteration  19: 10021802.489 ops/s
Iteration  20: 9964945.937 ops/s
Iteration  21: 9954159.006 ops/s
Iteration  22: 9979111.732 ops/s
Iteration  23: 9955513.776 ops/s
Iteration  24: 9954586.366 ops/s
Iteration  25: 10026991.170 ops/s
Iteration  26: 9984939.479 ops/s
Iteration  27: 10022695.286 ops/s
Iteration  28: 9996695.241 ops/s
Iteration  29: 9923498.411 ops/s
Iteration  30: 9954847.402 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  9973062.820 ±(99.9%) 31718.784 ops/s [Average]
  (min, avg, max) = (9811260.087, 9973062.820, 10026991.170), stdev = 47475.187
  CI (99.9%): [9941344.035, 10004781.604] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  9973062.820 ± 31718.784  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 629535.798 ops/s
# Warmup Iteration   2: 1765453.182 ops/s
# Warmup Iteration   3: 1724170.518 ops/s
# Warmup Iteration   4: 1545006.904 ops/s
# Warmup Iteration   5: 1788782.310 ops/s
# Warmup Iteration   6: 1790709.299 ops/s
# Warmup Iteration   7: 1777450.395 ops/s
# Warmup Iteration   8: 1784247.382 ops/s
# Warmup Iteration   9: 1785474.927 ops/s
# Warmup Iteration  10: 1773189.948 ops/s
# Warmup Iteration  11: 1767920.149 ops/s
# Warmup Iteration  12: 1784314.578 ops/s
# Warmup Iteration  13: 1790906.395 ops/s
# Warmup Iteration  14: 1783722.422 ops/s
# Warmup Iteration  15: 1790368.364 ops/s
# Warmup Iteration  16: 1786119.957 ops/s
# Warmup Iteration  17: 1786448.127 ops/s
# Warmup Iteration  18: 1770536.118 ops/s
# Warmup Iteration  19: 1786834.385 ops/s
# Warmup Iteration  20: 1790389.814 ops/s
# Warmup Iteration  21: 1791799.977 ops/s
# Warmup Iteration  22: 1784076.469 ops/s
# Warmup Iteration  23: 1781018.184 ops/s
# Warmup Iteration  24: 1780491.064 ops/s
# Warmup Iteration  25: 1788095.444 ops/s
# Warmup Iteration  26: 1775215.259 ops/s
# Warmup Iteration  27: 1789559.899 ops/s
# Warmup Iteration  28: 1782169.152 ops/s
# Warmup Iteration  29: 1790965.214 ops/s
# Warmup Iteration  30: 1794657.779 ops/s
Iteration   1: 1769663.761 ops/s
Iteration   2: 1790452.531 ops/s
Iteration   3: 1790725.510 ops/s
Iteration   4: 1777067.362 ops/s
Iteration   5: 1786536.797 ops/s
Iteration   6: 1792479.627 ops/s
Iteration   7: 1791575.423 ops/s
Iteration   8: 1790686.002 ops/s
Iteration   9: 1783203.499 ops/s
Iteration  10: 1791255.260 ops/s
Iteration  11: 1790962.655 ops/s
Iteration  12: 1785305.207 ops/s
Iteration  13: 1735403.742 ops/s
Iteration  14: 1769285.368 ops/s
Iteration  15: 1792506.838 ops/s
Iteration  16: 1759106.930 ops/s
Iteration  17: 1784530.287 ops/s
Iteration  18: 1779384.270 ops/s
Iteration  19: 1794263.047 ops/s
Iteration  20: 1791740.606 ops/s
Iteration  21: 1763326.663 ops/s
Iteration  22: 1788305.596 ops/s
Iteration  23: 1779288.929 ops/s
Iteration  24: 1775586.881 ops/s
Iteration  25: 1783593.762 ops/s
Iteration  26: 1781066.978 ops/s
Iteration  27: 1789652.753 ops/s
Iteration  28: 1788200.871 ops/s
Iteration  29: 1794924.946 ops/s
Iteration  30: 1779498.366 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1782319.349 ±(99.9%) 8535.732 ops/s [Average]
  (min, avg, max) = (1735403.742, 1782319.349, 1794924.946), stdev = 12775.883
  CI (99.9%): [1773783.617, 1790855.081] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1782319.349 ± 8535.732  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 845135.701 ops/s
# Warmup Iteration   2: 2228276.333 ops/s
# Warmup Iteration   3: 2244263.382 ops/s
# Warmup Iteration   4: 1871190.271 ops/s
# Warmup Iteration   5: 2253834.750 ops/s
# Warmup Iteration   6: 2249122.066 ops/s
# Warmup Iteration   7: 2253716.461 ops/s
# Warmup Iteration   8: 2257582.075 ops/s
# Warmup Iteration   9: 2255616.045 ops/s
# Warmup Iteration  10: 2238231.508 ops/s
# Warmup Iteration  11: 2259492.965 ops/s
# Warmup Iteration  12: 2251468.323 ops/s
# Warmup Iteration  13: 2253307.848 ops/s
# Warmup Iteration  14: 2239767.769 ops/s
# Warmup Iteration  15: 2256939.896 ops/s
# Warmup Iteration  16: 2253940.377 ops/s
# Warmup Iteration  17: 2262260.338 ops/s
# Warmup Iteration  18: 2256071.992 ops/s
# Warmup Iteration  19: 2254061.121 ops/s
# Warmup Iteration  20: 2245635.166 ops/s
# Warmup Iteration  21: 2239526.334 ops/s
# Warmup Iteration  22: 2251853.801 ops/s
# Warmup Iteration  23: 2255952.718 ops/s
# Warmup Iteration  24: 2250723.754 ops/s
# Warmup Iteration  25: 2261384.319 ops/s
# Warmup Iteration  26: 2253711.027 ops/s
# Warmup Iteration  27: 2263848.502 ops/s
# Warmup Iteration  28: 2261931.347 ops/s
# Warmup Iteration  29: 2238961.663 ops/s
# Warmup Iteration  30: 2258931.996 ops/s
Iteration   1: 2253302.176 ops/s
Iteration   2: 2251813.404 ops/s
Iteration   3: 2263962.891 ops/s
Iteration   4: 2252223.390 ops/s
Iteration   5: 2257503.260 ops/s
Iteration   6: 2260107.165 ops/s
Iteration   7: 2255507.952 ops/s
Iteration   8: 2256520.968 ops/s
Iteration   9: 2260194.017 ops/s
Iteration  10: 2247824.026 ops/s
Iteration  11: 2246157.974 ops/s
Iteration  12: 2224057.476 ops/s
Iteration  13: 2260629.700 ops/s
Iteration  14: 2260940.835 ops/s
Iteration  15: 2233463.527 ops/s
Iteration  16: 2244393.888 ops/s
Iteration  17: 2229995.091 ops/s
Iteration  18: 2253292.233 ops/s
Iteration  19: 2259767.028 ops/s
Iteration  20: 2244657.279 ops/s
Iteration  21: 2259301.206 ops/s
Iteration  22: 2272422.491 ops/s
Iteration  23: 2263278.397 ops/s
Iteration  24: 2264213.437 ops/s
Iteration  25: 2267626.089 ops/s
Iteration  26: 2270257.140 ops/s
Iteration  27: 2244841.309 ops/s
Iteration  28: 2242211.663 ops/s
Iteration  29: 2258911.824 ops/s
Iteration  30: 2251841.163 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  2253707.300 ±(99.9%) 7608.358 ops/s [Average]
  (min, avg, max) = (2224057.476, 2253707.300, 2272422.491), stdev = 11387.833
  CI (99.9%): [2246098.942, 2261315.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  2253707.300 ± 7608.358  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5329793.379 ops/s
# Warmup Iteration   2: 11438264.028 ops/s
# Warmup Iteration   3: 9738257.144 ops/s
# Warmup Iteration   4: 11578791.788 ops/s
# Warmup Iteration   5: 11594406.391 ops/s
# Warmup Iteration   6: 11560861.541 ops/s
# Warmup Iteration   7: 11527742.490 ops/s
# Warmup Iteration   8: 11568419.062 ops/s
# Warmup Iteration   9: 11613771.404 ops/s
# Warmup Iteration  10: 11665819.502 ops/s
# Warmup Iteration  11: 11650300.867 ops/s
# Warmup Iteration  12: 11704295.337 ops/s
# Warmup Iteration  13: 11685178.857 ops/s
# Warmup Iteration  14: 11676987.713 ops/s
# Warmup Iteration  15: 11707833.146 ops/s
# Warmup Iteration  16: 11723043.911 ops/s
# Warmup Iteration  17: 11664525.216 ops/s
# Warmup Iteration  18: 11705408.181 ops/s
# Warmup Iteration  19: 11684766.015 ops/s
# Warmup Iteration  20: 11663078.838 ops/s
# Warmup Iteration  21: 11680646.570 ops/s
# Warmup Iteration  22: 11658857.790 ops/s
# Warmup Iteration  23: 11573097.912 ops/s
# Warmup Iteration  24: 11656866.387 ops/s
# Warmup Iteration  25: 11707916.262 ops/s
# Warmup Iteration  26: 11550921.557 ops/s
# Warmup Iteration  27: 11607595.251 ops/s
# Warmup Iteration  28: 11728687.178 ops/s
# Warmup Iteration  29: 11719275.932 ops/s
# Warmup Iteration  30: 11694055.135 ops/s
Iteration   1: 11730420.754 ops/s
Iteration   2: 11570547.478 ops/s
Iteration   3: 11722600.891 ops/s
Iteration   4: 11674714.463 ops/s
Iteration   5: 11708860.640 ops/s
Iteration   6: 11694698.868 ops/s
Iteration   7: 11596558.872 ops/s
Iteration   8: 11632665.523 ops/s
Iteration   9: 11525349.753 ops/s
Iteration  10: 11706649.952 ops/s
Iteration  11: 11686685.007 ops/s
Iteration  12: 11679051.886 ops/s
Iteration  13: 11705569.751 ops/s
Iteration  14: 11724607.786 ops/s
Iteration  15: 11686332.191 ops/s
Iteration  16: 11624374.692 ops/s
Iteration  17: 11628970.889 ops/s
Iteration  18: 11711959.309 ops/s
Iteration  19: 11646985.875 ops/s
Iteration  20: 11732267.653 ops/s
Iteration  21: 11710448.180 ops/s
Iteration  22: 11710961.324 ops/s
Iteration  23: 11698302.210 ops/s
Iteration  24: 11700060.103 ops/s
Iteration  25: 11715055.773 ops/s
Iteration  26: 11696291.720 ops/s
Iteration  27: 11681194.032 ops/s
Iteration  28: 11667592.057 ops/s
Iteration  29: 11717667.938 ops/s
Iteration  30: 11704195.578 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toList":
  11679721.372 ±(99.9%) 33009.164 ops/s [Average]
  (min, avg, max) = (11525349.753, 11679721.372, 11732267.653), stdev = 49406.566
  CI (99.9%): [11646712.208, 11712730.536] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toList  thrpt   30  11679721.372 ± 33009.164  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1468929.664 ops/s
# Warmup Iteration   2: 3223233.755 ops/s
# Warmup Iteration   3: 2951052.898 ops/s
# Warmup Iteration   4: 2976864.044 ops/s
# Warmup Iteration   5: 3192527.308 ops/s
# Warmup Iteration   6: 3196771.065 ops/s
# Warmup Iteration   7: 3192467.983 ops/s
# Warmup Iteration   8: 3190112.170 ops/s
# Warmup Iteration   9: 3127960.874 ops/s
# Warmup Iteration  10: 3186055.116 ops/s
# Warmup Iteration  11: 3192487.714 ops/s
# Warmup Iteration  12: 3168008.185 ops/s
# Warmup Iteration  13: 3103987.312 ops/s
# Warmup Iteration  14: 3226314.727 ops/s
# Warmup Iteration  15: 3264826.826 ops/s
# Warmup Iteration  16: 3198764.988 ops/s
# Warmup Iteration  17: 3167429.863 ops/s
# Warmup Iteration  18: 3174980.805 ops/s
# Warmup Iteration  19: 3169973.255 ops/s
# Warmup Iteration  20: 3192727.889 ops/s
# Warmup Iteration  21: 3208844.562 ops/s
# Warmup Iteration  22: 3172678.994 ops/s
# Warmup Iteration  23: 3159124.272 ops/s
# Warmup Iteration  24: 3242352.877 ops/s
# Warmup Iteration  25: 3186606.540 ops/s
# Warmup Iteration  26: 3186112.685 ops/s
# Warmup Iteration  27: 3178003.248 ops/s
# Warmup Iteration  28: 3194850.838 ops/s
# Warmup Iteration  29: 3208848.016 ops/s
# Warmup Iteration  30: 3119646.349 ops/s
Iteration   1: 3166767.161 ops/s
Iteration   2: 3206127.499 ops/s
Iteration   3: 3194418.316 ops/s
Iteration   4: 3126629.717 ops/s
Iteration   5: 3198538.140 ops/s
Iteration   6: 3190466.468 ops/s
Iteration   7: 3097264.203 ops/s
Iteration   8: 3199256.199 ops/s
Iteration   9: 3195677.613 ops/s
Iteration  10: 3212932.785 ops/s
Iteration  11: 3185583.595 ops/s
Iteration  12: 3200100.009 ops/s
Iteration  13: 3234161.070 ops/s
Iteration  14: 3264940.901 ops/s
Iteration  15: 3221928.848 ops/s
Iteration  16: 3214494.565 ops/s
Iteration  17: 3132059.044 ops/s
Iteration  18: 3193601.047 ops/s
Iteration  19: 3180823.936 ops/s
Iteration  20: 3153217.853 ops/s
Iteration  21: 3207261.611 ops/s
Iteration  22: 3152751.467 ops/s
Iteration  23: 3177652.748 ops/s
Iteration  24: 3195287.791 ops/s
Iteration  25: 3248969.290 ops/s
Iteration  26: 3199480.992 ops/s
Iteration  27: 3164000.751 ops/s
Iteration  28: 3227611.855 ops/s
Iteration  29: 3202726.348 ops/s
Iteration  30: 3209111.794 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toMap":
  3191794.787 ±(99.9%) 23611.867 ops/s [Average]
  (min, avg, max) = (3097264.203, 3191794.787, 3264940.901), stdev = 35341.134
  CI (99.9%): [3168182.920, 3215406.654] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toMap  thrpt   30  3191794.787 ± 23611.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1345770.167 ops/s
# Warmup Iteration   2: 3057669.787 ops/s
# Warmup Iteration   3: 2574933.519 ops/s
# Warmup Iteration   4: 3081019.745 ops/s
# Warmup Iteration   5: 3013422.622 ops/s
# Warmup Iteration   6: 3074922.485 ops/s
# Warmup Iteration   7: 3040078.165 ops/s
# Warmup Iteration   8: 3093283.486 ops/s
# Warmup Iteration   9: 3043819.046 ops/s
# Warmup Iteration  10: 3053566.236 ops/s
# Warmup Iteration  11: 3080106.931 ops/s
# Warmup Iteration  12: 3038618.210 ops/s
# Warmup Iteration  13: 3043150.066 ops/s
# Warmup Iteration  14: 3015273.475 ops/s
# Warmup Iteration  15: 3076747.406 ops/s
# Warmup Iteration  16: 3081024.228 ops/s
# Warmup Iteration  17: 3078528.651 ops/s
# Warmup Iteration  18: 3046048.531 ops/s
# Warmup Iteration  19: 3096088.761 ops/s
# Warmup Iteration  20: 3061959.011 ops/s
# Warmup Iteration  21: 3020473.183 ops/s
# Warmup Iteration  22: 3047293.122 ops/s
# Warmup Iteration  23: 3034364.290 ops/s
# Warmup Iteration  24: 3065094.104 ops/s
# Warmup Iteration  25: 3078677.635 ops/s
# Warmup Iteration  26: 3065275.149 ops/s
# Warmup Iteration  27: 3047803.242 ops/s
# Warmup Iteration  28: 3045877.661 ops/s
# Warmup Iteration  29: 3045800.798 ops/s
# Warmup Iteration  30: 3076681.168 ops/s
Iteration   1: 3071676.171 ops/s
Iteration   2: 3078641.990 ops/s
Iteration   3: 3065545.838 ops/s
Iteration   4: 3071728.173 ops/s
Iteration   5: 3047601.415 ops/s
Iteration   6: 3087854.740 ops/s
Iteration   7: 3076607.632 ops/s
Iteration   8: 3046764.377 ops/s
Iteration   9: 3090529.409 ops/s
Iteration  10: 3041465.825 ops/s
Iteration  11: 3084891.854 ops/s
Iteration  12: 3058518.052 ops/s
Iteration  13: 3081605.928 ops/s
Iteration  14: 3038604.880 ops/s
Iteration  15: 3060898.478 ops/s
Iteration  16: 2994821.743 ops/s
Iteration  17: 3073334.788 ops/s
Iteration  18: 3087384.732 ops/s
Iteration  19: 3039996.016 ops/s
Iteration  20: 3015163.217 ops/s
Iteration  21: 3054452.800 ops/s
Iteration  22: 3076780.075 ops/s
Iteration  23: 3055774.430 ops/s
Iteration  24: 3056723.248 ops/s
Iteration  25: 3034257.404 ops/s
Iteration  26: 3048837.923 ops/s
Iteration  27: 3076844.129 ops/s
Iteration  28: 3081808.195 ops/s
Iteration  29: 3097515.468 ops/s
Iteration  30: 3028595.617 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toMapTarget":
  3060840.818 ±(99.9%) 16033.708 ops/s [Average]
  (min, avg, max) = (2994821.743, 3060840.818, 3097515.468), stdev = 23998.501
  CI (99.9%): [3044807.110, 3076874.526] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toMapTarget  thrpt   30  3060840.818 ± 16033.708  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3136813.393 ops/s
# Warmup Iteration   2: 6722960.745 ops/s
# Warmup Iteration   3: 5639831.840 ops/s
# Warmup Iteration   4: 6758862.592 ops/s
# Warmup Iteration   5: 6767740.376 ops/s
# Warmup Iteration   6: 6737363.266 ops/s
# Warmup Iteration   7: 6781472.439 ops/s
# Warmup Iteration   8: 6781859.899 ops/s
# Warmup Iteration   9: 6733289.059 ops/s
# Warmup Iteration  10: 6761076.875 ops/s
# Warmup Iteration  11: 6743431.816 ops/s
# Warmup Iteration  12: 6730616.203 ops/s
# Warmup Iteration  13: 6745669.558 ops/s
# Warmup Iteration  14: 6731977.642 ops/s
# Warmup Iteration  15: 6677390.011 ops/s
# Warmup Iteration  16: 6685366.535 ops/s
# Warmup Iteration  17: 6745684.700 ops/s
# Warmup Iteration  18: 6754572.766 ops/s
# Warmup Iteration  19: 6762041.289 ops/s
# Warmup Iteration  20: 6759740.480 ops/s
# Warmup Iteration  21: 6704893.651 ops/s
# Warmup Iteration  22: 6763139.502 ops/s
# Warmup Iteration  23: 6728801.459 ops/s
# Warmup Iteration  24: 6757861.555 ops/s
# Warmup Iteration  25: 6762567.706 ops/s
# Warmup Iteration  26: 6748661.509 ops/s
# Warmup Iteration  27: 6726432.349 ops/s
# Warmup Iteration  28: 6730370.731 ops/s
# Warmup Iteration  29: 6747215.176 ops/s
# Warmup Iteration  30: 6729572.190 ops/s
Iteration   1: 6750148.506 ops/s
Iteration   2: 6747336.945 ops/s
Iteration   3: 6691160.108 ops/s
Iteration   4: 6772305.708 ops/s
Iteration   5: 6762597.347 ops/s
Iteration   6: 6749286.539 ops/s
Iteration   7: 6737120.349 ops/s
Iteration   8: 6768570.080 ops/s
Iteration   9: 6676161.320 ops/s
Iteration  10: 6753562.481 ops/s
Iteration  11: 6754948.443 ops/s
Iteration  12: 6788492.124 ops/s
Iteration  13: 6788123.350 ops/s
Iteration  14: 6793619.487 ops/s
Iteration  15: 6664398.169 ops/s
Iteration  16: 6657045.970 ops/s
Iteration  17: 6749409.103 ops/s
Iteration  18: 6761873.819 ops/s
Iteration  19: 6717314.959 ops/s
Iteration  20: 6767576.214 ops/s
Iteration  21: 6771481.405 ops/s
Iteration  22: 6784918.235 ops/s
Iteration  23: 6732382.570 ops/s
Iteration  24: 6781182.446 ops/s
Iteration  25: 6732251.453 ops/s
Iteration  26: 6704750.584 ops/s
Iteration  27: 6766904.760 ops/s
Iteration  28: 6653564.066 ops/s
Iteration  29: 6608346.828 ops/s
Iteration  30: 6627839.927 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toReversed":
  6733822.443 ±(99.9%) 33863.137 ops/s [Average]
  (min, avg, max) = (6608346.828, 6733822.443, 6793619.487), stdev = 50684.754
  CI (99.9%): [6699959.306, 6767685.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toReversed  thrpt   30  6733822.443 ± 33863.137  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3463947.374 ops/s
# Warmup Iteration   2: 7321152.493 ops/s
# Warmup Iteration   3: 6790969.071 ops/s
# Warmup Iteration   4: 6836611.412 ops/s
# Warmup Iteration   5: 7464002.004 ops/s
# Warmup Iteration   6: 7275692.461 ops/s
# Warmup Iteration   7: 7405906.646 ops/s
# Warmup Iteration   8: 7360068.280 ops/s
# Warmup Iteration   9: 7378653.353 ops/s
# Warmup Iteration  10: 7432376.457 ops/s
# Warmup Iteration  11: 7363637.558 ops/s
# Warmup Iteration  12: 7356897.804 ops/s
# Warmup Iteration  13: 7434334.920 ops/s
# Warmup Iteration  14: 7409162.499 ops/s
# Warmup Iteration  15: 7348428.954 ops/s
# Warmup Iteration  16: 7390672.190 ops/s
# Warmup Iteration  17: 7392401.372 ops/s
# Warmup Iteration  18: 7391123.194 ops/s
# Warmup Iteration  19: 7409837.468 ops/s
# Warmup Iteration  20: 7419354.681 ops/s
# Warmup Iteration  21: 7332093.584 ops/s
# Warmup Iteration  22: 7362180.603 ops/s
# Warmup Iteration  23: 7460707.269 ops/s
# Warmup Iteration  24: 7420946.985 ops/s
# Warmup Iteration  25: 7434500.051 ops/s
# Warmup Iteration  26: 7451148.254 ops/s
# Warmup Iteration  27: 7394755.309 ops/s
# Warmup Iteration  28: 7416790.511 ops/s
# Warmup Iteration  29: 7429786.383 ops/s
# Warmup Iteration  30: 7437632.749 ops/s
Iteration   1: 7431215.251 ops/s
Iteration   2: 7419562.757 ops/s
Iteration   3: 7373751.549 ops/s
Iteration   4: 7456819.447 ops/s
Iteration   5: 7290768.527 ops/s
Iteration   6: 7475711.224 ops/s
Iteration   7: 7433810.745 ops/s
Iteration   8: 7405506.209 ops/s
Iteration   9: 7379503.671 ops/s
Iteration  10: 7431293.472 ops/s
Iteration  11: 7446611.083 ops/s
Iteration  12: 7434960.109 ops/s
Iteration  13: 7304595.350 ops/s
Iteration  14: 7480264.841 ops/s
Iteration  15: 7445458.953 ops/s
Iteration  16: 7384336.545 ops/s
Iteration  17: 7246904.873 ops/s
Iteration  18: 7484851.357 ops/s
Iteration  19: 7409065.615 ops/s
Iteration  20: 7217165.404 ops/s
Iteration  21: 7355951.837 ops/s
Iteration  22: 7422097.055 ops/s
Iteration  23: 7444465.983 ops/s
Iteration  24: 7373732.952 ops/s
Iteration  25: 7363359.659 ops/s
Iteration  26: 7417090.239 ops/s
Iteration  27: 7403092.537 ops/s
Iteration  28: 7334067.739 ops/s
Iteration  29: 7456400.777 ops/s
Iteration  30: 7368510.569 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSet":
  7396364.211 ±(99.9%) 43999.314 ops/s [Average]
  (min, avg, max) = (7217165.404, 7396364.211, 7484851.357), stdev = 65856.107
  CI (99.9%): [7352364.897, 7440363.525] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSet  thrpt   30  7396364.211 ± 43999.314  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 252426.403 ops/s
# Warmup Iteration   2: 430343.108 ops/s
# Warmup Iteration   3: 542700.285 ops/s
# Warmup Iteration   4: 542296.643 ops/s
# Warmup Iteration   5: 538826.286 ops/s
# Warmup Iteration   6: 506003.891 ops/s
# Warmup Iteration   7: 488573.229 ops/s
# Warmup Iteration   8: 550399.505 ops/s
# Warmup Iteration   9: 541674.417 ops/s
# Warmup Iteration  10: 551029.709 ops/s
# Warmup Iteration  11: 552196.389 ops/s
# Warmup Iteration  12: 543469.908 ops/s
# Warmup Iteration  13: 553222.359 ops/s
# Warmup Iteration  14: 547219.399 ops/s
# Warmup Iteration  15: 549919.260 ops/s
# Warmup Iteration  16: 550238.244 ops/s
# Warmup Iteration  17: 550090.734 ops/s
# Warmup Iteration  18: 551434.144 ops/s
# Warmup Iteration  19: 546955.052 ops/s
# Warmup Iteration  20: 548044.903 ops/s
# Warmup Iteration  21: 551485.319 ops/s
# Warmup Iteration  22: 551578.432 ops/s
# Warmup Iteration  23: 551560.176 ops/s
# Warmup Iteration  24: 552101.918 ops/s
# Warmup Iteration  25: 551597.922 ops/s
# Warmup Iteration  26: 549253.029 ops/s
# Warmup Iteration  27: 551370.273 ops/s
# Warmup Iteration  28: 548476.179 ops/s
# Warmup Iteration  29: 552343.938 ops/s
# Warmup Iteration  30: 552682.131 ops/s
Iteration   1: 551492.586 ops/s
Iteration   2: 549988.064 ops/s
Iteration   3: 544805.786 ops/s
Iteration   4: 551867.020 ops/s
Iteration   5: 551083.063 ops/s
Iteration   6: 552888.942 ops/s
Iteration   7: 544358.181 ops/s
Iteration   8: 554369.372 ops/s
Iteration   9: 544972.863 ops/s
Iteration  10: 552916.518 ops/s
Iteration  11: 551649.460 ops/s
Iteration  12: 543843.001 ops/s
Iteration  13: 552161.223 ops/s
Iteration  14: 555571.194 ops/s
Iteration  15: 553643.503 ops/s
Iteration  16: 553998.221 ops/s
Iteration  17: 552753.091 ops/s
Iteration  18: 554368.735 ops/s
Iteration  19: 544669.242 ops/s
Iteration  20: 555640.531 ops/s
Iteration  21: 554226.546 ops/s
Iteration  22: 550535.874 ops/s
Iteration  23: 552936.038 ops/s
Iteration  24: 555133.329 ops/s
Iteration  25: 552119.405 ops/s
Iteration  26: 556138.046 ops/s
Iteration  27: 554601.201 ops/s
Iteration  28: 553785.551 ops/s
Iteration  29: 555396.760 ops/s
Iteration  30: 553829.450 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBagBy":
  551858.093 ±(99.9%) 2451.400 ops/s [Average]
  (min, avg, max) = (543843.001, 551858.093, 556138.046), stdev = 3669.140
  CI (99.9%): [549406.693, 554309.493] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  551858.093 ± 2451.400  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 517475.889 ops/s
# Warmup Iteration   2: 1123252.283 ops/s
# Warmup Iteration   3: 1223212.806 ops/s
# Warmup Iteration   4: 1220608.935 ops/s
# Warmup Iteration   5: 1023188.720 ops/s
# Warmup Iteration   6: 1234513.219 ops/s
# Warmup Iteration   7: 1236324.478 ops/s
# Warmup Iteration   8: 1234356.952 ops/s
# Warmup Iteration   9: 1235768.914 ops/s
# Warmup Iteration  10: 1229113.765 ops/s
# Warmup Iteration  11: 1229676.401 ops/s
# Warmup Iteration  12: 1236352.032 ops/s
# Warmup Iteration  13: 1230356.444 ops/s
# Warmup Iteration  14: 1233298.340 ops/s
# Warmup Iteration  15: 1222990.853 ops/s
# Warmup Iteration  16: 1235882.645 ops/s
# Warmup Iteration  17: 1233329.603 ops/s
# Warmup Iteration  18: 1231699.106 ops/s
# Warmup Iteration  19: 1228961.573 ops/s
# Warmup Iteration  20: 1220753.813 ops/s
# Warmup Iteration  21: 1234054.475 ops/s
# Warmup Iteration  22: 1233485.787 ops/s
# Warmup Iteration  23: 1233798.666 ops/s
# Warmup Iteration  24: 1226882.432 ops/s
# Warmup Iteration  25: 1233163.960 ops/s
# Warmup Iteration  26: 1223865.014 ops/s
# Warmup Iteration  27: 1234484.860 ops/s
# Warmup Iteration  28: 1234044.764 ops/s
# Warmup Iteration  29: 1235484.803 ops/s
# Warmup Iteration  30: 1232197.733 ops/s
Iteration   1: 1236081.801 ops/s
Iteration   2: 1234996.121 ops/s
Iteration   3: 1238274.976 ops/s
Iteration   4: 1234844.757 ops/s
Iteration   5: 1228924.234 ops/s
Iteration   6: 1228888.539 ops/s
Iteration   7: 1234450.678 ops/s
Iteration   8: 1235334.619 ops/s
Iteration   9: 1211462.230 ops/s
Iteration  10: 1226889.921 ops/s
Iteration  11: 1225116.106 ops/s
Iteration  12: 1233547.372 ops/s
Iteration  13: 1228334.143 ops/s
Iteration  14: 1231039.736 ops/s
Iteration  15: 1229965.104 ops/s
Iteration  16: 1234880.266 ops/s
Iteration  17: 1231173.783 ops/s
Iteration  18: 1229807.874 ops/s
Iteration  19: 1229210.388 ops/s
Iteration  20: 1239749.965 ops/s
Iteration  21: 1237911.760 ops/s
Iteration  22: 1224942.015 ops/s
Iteration  23: 1234007.689 ops/s
Iteration  24: 1235997.084 ops/s
Iteration  25: 1223964.910 ops/s
Iteration  26: 1232395.632 ops/s
Iteration  27: 1237528.830 ops/s
Iteration  28: 1235712.467 ops/s
Iteration  29: 1233425.229 ops/s
Iteration  30: 1229202.269 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  1231602.017 ±(99.9%) 3775.639 ops/s [Average]
  (min, avg, max) = (1211462.230, 1231602.017, 1239749.965), stdev = 5651.199
  CI (99.9%): [1227826.378, 1235377.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  1231602.017 ± 3775.639  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 568256.180 ops/s
# Warmup Iteration   2: 1252038.949 ops/s
# Warmup Iteration   3: 1350161.154 ops/s
# Warmup Iteration   4: 1346358.119 ops/s
# Warmup Iteration   5: 1147445.566 ops/s
# Warmup Iteration   6: 1374467.417 ops/s
# Warmup Iteration   7: 1376542.174 ops/s
# Warmup Iteration   8: 1376567.215 ops/s
# Warmup Iteration   9: 1372761.388 ops/s
# Warmup Iteration  10: 1378640.627 ops/s
# Warmup Iteration  11: 1376996.982 ops/s
# Warmup Iteration  12: 1374092.793 ops/s
# Warmup Iteration  13: 1378903.116 ops/s
# Warmup Iteration  14: 1375363.510 ops/s
# Warmup Iteration  15: 1363259.190 ops/s
# Warmup Iteration  16: 1365053.678 ops/s
# Warmup Iteration  17: 1373059.316 ops/s
# Warmup Iteration  18: 1377435.881 ops/s
# Warmup Iteration  19: 1360409.857 ops/s
# Warmup Iteration  20: 1373675.285 ops/s
# Warmup Iteration  21: 1351969.559 ops/s
# Warmup Iteration  22: 1379596.083 ops/s
# Warmup Iteration  23: 1374694.274 ops/s
# Warmup Iteration  24: 1377374.093 ops/s
# Warmup Iteration  25: 1371026.498 ops/s
# Warmup Iteration  26: 1376412.636 ops/s
# Warmup Iteration  27: 1375679.136 ops/s
# Warmup Iteration  28: 1363669.554 ops/s
# Warmup Iteration  29: 1326624.832 ops/s
# Warmup Iteration  30: 1373087.851 ops/s
Iteration   1: 1374848.809 ops/s
Iteration   2: 1380442.267 ops/s
Iteration   3: 1375517.812 ops/s
Iteration   4: 1381563.559 ops/s
Iteration   5: 1381449.792 ops/s
Iteration   6: 1377908.325 ops/s
Iteration   7: 1383239.530 ops/s
Iteration   8: 1357626.113 ops/s
Iteration   9: 1365616.142 ops/s
Iteration  10: 1376009.479 ops/s
Iteration  11: 1374021.552 ops/s
Iteration  12: 1376890.578 ops/s
Iteration  13: 1375159.934 ops/s
Iteration  14: 1365294.826 ops/s
Iteration  15: 1369531.348 ops/s
Iteration  16: 1379860.599 ops/s
Iteration  17: 1375076.302 ops/s
Iteration  18: 1382614.213 ops/s
Iteration  19: 1381711.954 ops/s
Iteration  20: 1358122.376 ops/s
Iteration  21: 1372727.660 ops/s
Iteration  22: 1385908.444 ops/s
Iteration  23: 1369579.749 ops/s
Iteration  24: 1380472.305 ops/s
Iteration  25: 1387059.594 ops/s
Iteration  26: 1383459.744 ops/s
Iteration  27: 1379338.915 ops/s
Iteration  28: 1383865.273 ops/s
Iteration  29: 1383659.808 ops/s
Iteration  30: 1377456.508 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1376534.450 ±(99.9%) 5009.426 ops/s [Average]
  (min, avg, max) = (1357626.113, 1376534.450, 1387059.594), stdev = 7497.873
  CI (99.9%): [1371525.025, 1381543.876] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1376534.450 ± 5009.426  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 483569.263 ops/s
# Warmup Iteration   2: 535647.528 ops/s
# Warmup Iteration   3: 716514.287 ops/s
# Warmup Iteration   4: 716735.732 ops/s
# Warmup Iteration   5: 710035.866 ops/s
# Warmup Iteration   6: 715417.944 ops/s
# Warmup Iteration   7: 711524.709 ops/s
# Warmup Iteration   8: 717625.499 ops/s
# Warmup Iteration   9: 719692.741 ops/s
# Warmup Iteration  10: 715896.608 ops/s
# Warmup Iteration  11: 614720.644 ops/s
# Warmup Iteration  12: 699643.015 ops/s
# Warmup Iteration  13: 714385.181 ops/s
# Warmup Iteration  14: 718053.478 ops/s
# Warmup Iteration  15: 714627.152 ops/s
# Warmup Iteration  16: 715534.153 ops/s
# Warmup Iteration  17: 744676.472 ops/s
# Warmup Iteration  18: 746761.499 ops/s
# Warmup Iteration  19: 747434.343 ops/s
# Warmup Iteration  20: 741298.594 ops/s
# Warmup Iteration  21: 742363.690 ops/s
# Warmup Iteration  22: 741681.328 ops/s
# Warmup Iteration  23: 750193.314 ops/s
# Warmup Iteration  24: 746971.721 ops/s
# Warmup Iteration  25: 745819.606 ops/s
# Warmup Iteration  26: 748828.608 ops/s
# Warmup Iteration  27: 746268.819 ops/s
# Warmup Iteration  28: 742815.947 ops/s
# Warmup Iteration  29: 744978.705 ops/s
# Warmup Iteration  30: 747877.376 ops/s
Iteration   1: 750327.957 ops/s
Iteration   2: 748695.927 ops/s
Iteration   3: 728530.944 ops/s
Iteration   4: 748626.861 ops/s
Iteration   5: 750714.674 ops/s
Iteration   6: 748058.521 ops/s
Iteration   7: 746135.180 ops/s
Iteration   8: 734183.525 ops/s
Iteration   9: 733124.344 ops/s
Iteration  10: 750196.757 ops/s
Iteration  11: 748243.345 ops/s
Iteration  12: 746478.450 ops/s
Iteration  13: 750830.558 ops/s
Iteration  14: 745941.613 ops/s
Iteration  15: 712863.455 ops/s
Iteration  16: 746064.459 ops/s
Iteration  17: 747298.906 ops/s
Iteration  18: 744793.272 ops/s
Iteration  19: 748948.714 ops/s
Iteration  20: 741758.673 ops/s
Iteration  21: 736250.582 ops/s
Iteration  22: 746877.321 ops/s
Iteration  23: 744843.715 ops/s
Iteration  24: 739509.973 ops/s
Iteration  25: 746057.777 ops/s
Iteration  26: 742311.882 ops/s
Iteration  27: 747976.749 ops/s
Iteration  28: 748691.342 ops/s
Iteration  29: 744977.851 ops/s
Iteration  30: 745173.844 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_null":
  743816.239 ±(99.9%) 5360.338 ops/s [Average]
  (min, avg, max) = (712863.455, 743816.239, 750830.558), stdev = 8023.102
  CI (99.9%): [738455.901, 749176.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  743816.239 ± 5360.338  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1306932.848 ops/s
# Warmup Iteration   2: 2515103.992 ops/s
# Warmup Iteration   3: 2691921.043 ops/s
# Warmup Iteration   4: 2651789.847 ops/s
# Warmup Iteration   5: 2223807.155 ops/s
# Warmup Iteration   6: 2693707.962 ops/s
# Warmup Iteration   7: 2692473.202 ops/s
# Warmup Iteration   8: 2704485.484 ops/s
# Warmup Iteration   9: 2712776.354 ops/s
# Warmup Iteration  10: 2658041.033 ops/s
# Warmup Iteration  11: 2703616.997 ops/s
# Warmup Iteration  12: 2685391.315 ops/s
# Warmup Iteration  13: 2712372.809 ops/s
# Warmup Iteration  14: 2659673.057 ops/s
# Warmup Iteration  15: 2711439.581 ops/s
# Warmup Iteration  16: 2712669.867 ops/s
# Warmup Iteration  17: 2697809.703 ops/s
# Warmup Iteration  18: 2707357.653 ops/s
# Warmup Iteration  19: 2686755.502 ops/s
# Warmup Iteration  20: 2699296.770 ops/s
# Warmup Iteration  21: 2704295.846 ops/s
# Warmup Iteration  22: 2689216.115 ops/s
# Warmup Iteration  23: 2686819.831 ops/s
# Warmup Iteration  24: 2697660.606 ops/s
# Warmup Iteration  25: 2687030.729 ops/s
# Warmup Iteration  26: 2690251.717 ops/s
# Warmup Iteration  27: 2716579.095 ops/s
# Warmup Iteration  28: 2706820.085 ops/s
# Warmup Iteration  29: 2708279.434 ops/s
# Warmup Iteration  30: 2680002.972 ops/s
Iteration   1: 2712094.166 ops/s
Iteration   2: 2709936.466 ops/s
Iteration   3: 2696830.009 ops/s
Iteration   4: 2700060.893 ops/s
Iteration   5: 2706357.878 ops/s
Iteration   6: 2699204.996 ops/s
Iteration   7: 2694931.378 ops/s
Iteration   8: 2686216.194 ops/s
Iteration   9: 2711547.641 ops/s
Iteration  10: 2708870.552 ops/s
Iteration  11: 2701814.907 ops/s
Iteration  12: 2699732.394 ops/s
Iteration  13: 2663378.726 ops/s
Iteration  14: 2713276.582 ops/s
Iteration  15: 2714016.012 ops/s
Iteration  16: 2712036.255 ops/s
Iteration  17: 2668717.535 ops/s
Iteration  18: 2717167.567 ops/s
Iteration  19: 2690843.363 ops/s
Iteration  20: 2718735.211 ops/s
Iteration  21: 2694793.027 ops/s
Iteration  22: 2695666.506 ops/s
Iteration  23: 2696646.737 ops/s
Iteration  24: 2707037.966 ops/s
Iteration  25: 2715188.092 ops/s
Iteration  26: 2700488.235 ops/s
Iteration  27: 2707250.081 ops/s
Iteration  28: 2695430.232 ops/s
Iteration  29: 2702642.794 ops/s
Iteration  30: 2652562.693 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy":
  2699782.503 ±(99.9%) 10351.078 ops/s [Average]
  (min, avg, max) = (2652562.693, 2699782.503, 2718735.211), stdev = 15493.007
  CI (99.9%): [2689431.425, 2710133.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy  thrpt   30  2699782.503 ± 10351.078  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1803383.383 ops/s
# Warmup Iteration   2: 2653118.115 ops/s
# Warmup Iteration   3: 3136400.948 ops/s
# Warmup Iteration   4: 3107860.408 ops/s
# Warmup Iteration   5: 3132730.405 ops/s
# Warmup Iteration   6: 3083862.488 ops/s
# Warmup Iteration   7: 2577477.543 ops/s
# Warmup Iteration   8: 3098040.302 ops/s
# Warmup Iteration   9: 3139853.138 ops/s
# Warmup Iteration  10: 3116387.741 ops/s
# Warmup Iteration  11: 3130813.700 ops/s
# Warmup Iteration  12: 3085521.806 ops/s
# Warmup Iteration  13: 3132161.564 ops/s
# Warmup Iteration  14: 3132072.441 ops/s
# Warmup Iteration  15: 3132084.024 ops/s
# Warmup Iteration  16: 3134284.189 ops/s
# Warmup Iteration  17: 3133590.516 ops/s
# Warmup Iteration  18: 3120621.154 ops/s
# Warmup Iteration  19: 3106347.307 ops/s
# Warmup Iteration  20: 3125859.807 ops/s
# Warmup Iteration  21: 3123548.822 ops/s
# Warmup Iteration  22: 3108590.930 ops/s
# Warmup Iteration  23: 3139467.929 ops/s
# Warmup Iteration  24: 3129579.848 ops/s
# Warmup Iteration  25: 3134384.843 ops/s
# Warmup Iteration  26: 3134361.508 ops/s
# Warmup Iteration  27: 3119541.292 ops/s
# Warmup Iteration  28: 3135255.516 ops/s
# Warmup Iteration  29: 3134875.347 ops/s
# Warmup Iteration  30: 3112246.997 ops/s
Iteration   1: 3121967.358 ops/s
Iteration   2: 3131446.351 ops/s
Iteration   3: 3070518.454 ops/s
Iteration   4: 3134783.832 ops/s
Iteration   5: 3138013.514 ops/s
Iteration   6: 3127691.547 ops/s
Iteration   7: 3070371.004 ops/s
Iteration   8: 3082502.496 ops/s
Iteration   9: 3102107.730 ops/s
Iteration  10: 3134671.010 ops/s
Iteration  11: 3139647.973 ops/s
Iteration  12: 3129433.262 ops/s
Iteration  13: 3110943.374 ops/s
Iteration  14: 3139135.160 ops/s
Iteration  15: 3130622.396 ops/s
Iteration  16: 3135029.558 ops/s
Iteration  17: 3121223.594 ops/s
Iteration  18: 3129155.753 ops/s
Iteration  19: 3090612.413 ops/s
Iteration  20: 3135644.188 ops/s
Iteration  21: 3132882.667 ops/s
Iteration  22: 3119053.656 ops/s
Iteration  23: 3137963.688 ops/s
Iteration  24: 3134284.022 ops/s
Iteration  25: 3095766.618 ops/s
Iteration  26: 3125148.100 ops/s
Iteration  27: 3092782.247 ops/s
Iteration  28: 3087160.521 ops/s
Iteration  29: 3139214.412 ops/s
Iteration  30: 3145365.035 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy_with_null":
  3119504.731 ±(99.9%) 14772.346 ops/s [Average]
  (min, avg, max) = (3070371.004, 3119504.731, 3145365.035), stdev = 22110.554
  CI (99.9%): [3104732.385, 3134277.077] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  3119504.731 ± 14772.346  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 515414.054 ops/s
# Warmup Iteration   2: 550729.257 ops/s
# Warmup Iteration   3: 684428.438 ops/s
# Warmup Iteration   4: 709617.145 ops/s
# Warmup Iteration   5: 721677.314 ops/s
# Warmup Iteration   6: 714396.079 ops/s
# Warmup Iteration   7: 717821.038 ops/s
# Warmup Iteration   8: 715745.197 ops/s
# Warmup Iteration   9: 716051.433 ops/s
# Warmup Iteration  10: 721144.345 ops/s
# Warmup Iteration  11: 719999.826 ops/s
# Warmup Iteration  12: 714143.691 ops/s
# Warmup Iteration  13: 590608.539 ops/s
# Warmup Iteration  14: 722344.910 ops/s
# Warmup Iteration  15: 723755.438 ops/s
# Warmup Iteration  16: 720795.768 ops/s
# Warmup Iteration  17: 753324.982 ops/s
# Warmup Iteration  18: 751701.518 ops/s
# Warmup Iteration  19: 754679.715 ops/s
# Warmup Iteration  20: 747165.079 ops/s
# Warmup Iteration  21: 750560.240 ops/s
# Warmup Iteration  22: 736911.279 ops/s
# Warmup Iteration  23: 752789.420 ops/s
# Warmup Iteration  24: 750557.997 ops/s
# Warmup Iteration  25: 748795.311 ops/s
# Warmup Iteration  26: 749008.746 ops/s
# Warmup Iteration  27: 751290.436 ops/s
# Warmup Iteration  28: 752972.781 ops/s
# Warmup Iteration  29: 747527.802 ops/s
# Warmup Iteration  30: 751879.530 ops/s
Iteration   1: 752645.437 ops/s
Iteration   2: 752222.891 ops/s
Iteration   3: 747593.015 ops/s
Iteration   4: 751086.841 ops/s
Iteration   5: 750341.574 ops/s
Iteration   6: 748156.253 ops/s
Iteration   7: 753512.509 ops/s
Iteration   8: 754635.519 ops/s
Iteration   9: 749012.441 ops/s
Iteration  10: 748720.149 ops/s
Iteration  11: 745917.975 ops/s
Iteration  12: 754127.506 ops/s
Iteration  13: 751823.915 ops/s
Iteration  14: 749498.297 ops/s
Iteration  15: 752221.156 ops/s
Iteration  16: 753529.270 ops/s
Iteration  17: 751775.697 ops/s
Iteration  18: 736052.170 ops/s
Iteration  19: 750844.574 ops/s
Iteration  20: 747424.209 ops/s
Iteration  21: 741971.708 ops/s
Iteration  22: 748556.759 ops/s
Iteration  23: 751841.192 ops/s
Iteration  24: 748927.006 ops/s
Iteration  25: 748354.817 ops/s
Iteration  26: 754484.981 ops/s
Iteration  27: 746250.828 ops/s
Iteration  28: 750296.499 ops/s
Iteration  29: 753568.881 ops/s
Iteration  30: 749159.599 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator":
  749818.456 ±(99.9%) 2599.689 ops/s [Average]
  (min, avg, max) = (736052.170, 749818.456, 754635.519), stdev = 3891.093
  CI (99.9%): [747218.766, 752418.145] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator  thrpt   30  749818.456 ± 2599.689  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 503970.277 ops/s
# Warmup Iteration   2: 539966.336 ops/s
# Warmup Iteration   3: 683826.479 ops/s
# Warmup Iteration   4: 703887.151 ops/s
# Warmup Iteration   5: 701638.478 ops/s
# Warmup Iteration   6: 701064.606 ops/s
# Warmup Iteration   7: 697468.801 ops/s
# Warmup Iteration   8: 697731.150 ops/s
# Warmup Iteration   9: 700457.862 ops/s
# Warmup Iteration  10: 702494.681 ops/s
# Warmup Iteration  11: 703455.957 ops/s
# Warmup Iteration  12: 629090.368 ops/s
# Warmup Iteration  13: 668366.317 ops/s
# Warmup Iteration  14: 702798.071 ops/s
# Warmup Iteration  15: 701441.650 ops/s
# Warmup Iteration  16: 706768.384 ops/s
# Warmup Iteration  17: 733097.144 ops/s
# Warmup Iteration  18: 735492.444 ops/s
# Warmup Iteration  19: 730559.928 ops/s
# Warmup Iteration  20: 726255.790 ops/s
# Warmup Iteration  21: 731632.588 ops/s
# Warmup Iteration  22: 732509.758 ops/s
# Warmup Iteration  23: 732922.735 ops/s
# Warmup Iteration  24: 738360.449 ops/s
# Warmup Iteration  25: 734484.191 ops/s
# Warmup Iteration  26: 738040.553 ops/s
# Warmup Iteration  27: 728607.203 ops/s
# Warmup Iteration  28: 734103.824 ops/s
# Warmup Iteration  29: 736747.886 ops/s
# Warmup Iteration  30: 732346.409 ops/s
Iteration   1: 733495.689 ops/s
Iteration   2: 723074.603 ops/s
Iteration   3: 737380.457 ops/s
Iteration   4: 732898.557 ops/s
Iteration   5: 733516.213 ops/s
Iteration   6: 733733.420 ops/s
Iteration   7: 731299.470 ops/s
Iteration   8: 740595.810 ops/s
Iteration   9: 738515.623 ops/s
Iteration  10: 736320.014 ops/s
Iteration  11: 738520.549 ops/s
Iteration  12: 731825.063 ops/s
Iteration  13: 738526.016 ops/s
Iteration  14: 735161.445 ops/s
Iteration  15: 733611.525 ops/s
Iteration  16: 733132.156 ops/s
Iteration  17: 738541.720 ops/s
Iteration  18: 733819.200 ops/s
Iteration  19: 735813.901 ops/s
Iteration  20: 733349.800 ops/s
Iteration  21: 738196.299 ops/s
Iteration  22: 736040.686 ops/s
Iteration  23: 728739.878 ops/s
Iteration  24: 732736.356 ops/s
Iteration  25: 739056.197 ops/s
Iteration  26: 722882.478 ops/s
Iteration  27: 741051.506 ops/s
Iteration  28: 727459.744 ops/s
Iteration  29: 735053.483 ops/s
Iteration  30: 734608.704 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements":
  734298.552 ±(99.9%) 2969.600 ops/s [Average]
  (min, avg, max) = (722882.478, 734298.552, 741051.506), stdev = 4444.758
  CI (99.9%): [731328.952, 737268.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                         Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements  thrpt   30  734298.552 ± 2969.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2275300.640 ops/s
# Warmup Iteration   2: 5016755.553 ops/s
# Warmup Iteration   3: 4267307.082 ops/s
# Warmup Iteration   4: 5025155.842 ops/s
# Warmup Iteration   5: 5049536.200 ops/s
# Warmup Iteration   6: 5065565.350 ops/s
# Warmup Iteration   7: 5059458.125 ops/s
# Warmup Iteration   8: 5050302.883 ops/s
# Warmup Iteration   9: 5087427.537 ops/s
# Warmup Iteration  10: 5059937.861 ops/s
# Warmup Iteration  11: 5079615.286 ops/s
# Warmup Iteration  12: 5088546.514 ops/s
# Warmup Iteration  13: 5078352.622 ops/s
# Warmup Iteration  14: 5075697.866 ops/s
# Warmup Iteration  15: 5030187.471 ops/s
# Warmup Iteration  16: 5086352.129 ops/s
# Warmup Iteration  17: 5094026.293 ops/s
# Warmup Iteration  18: 5044799.906 ops/s
# Warmup Iteration  19: 4974784.461 ops/s
# Warmup Iteration  20: 5076561.676 ops/s
# Warmup Iteration  21: 5097812.148 ops/s
# Warmup Iteration  22: 5038815.246 ops/s
# Warmup Iteration  23: 5089918.588 ops/s
# Warmup Iteration  24: 5073417.281 ops/s
# Warmup Iteration  25: 5034898.063 ops/s
# Warmup Iteration  26: 5057234.298 ops/s
# Warmup Iteration  27: 5083819.539 ops/s
# Warmup Iteration  28: 5039874.158 ops/s
# Warmup Iteration  29: 5053762.734 ops/s
# Warmup Iteration  30: 5093474.628 ops/s
Iteration   1: 5003118.582 ops/s
Iteration   2: 5075643.958 ops/s
Iteration   3: 5061106.833 ops/s
Iteration   4: 5085515.767 ops/s
Iteration   5: 5066115.768 ops/s
Iteration   6: 5072412.187 ops/s
Iteration   7: 5105363.591 ops/s
Iteration   8: 5098387.399 ops/s
Iteration   9: 5057434.181 ops/s
Iteration  10: 5078907.965 ops/s
Iteration  11: 5072065.383 ops/s
Iteration  12: 5065596.088 ops/s
Iteration  13: 5088761.966 ops/s
Iteration  14: 5047482.418 ops/s
Iteration  15: 5046036.311 ops/s
Iteration  16: 5075651.138 ops/s
Iteration  17: 5036144.630 ops/s
Iteration  18: 5096742.989 ops/s
Iteration  19: 5089699.920 ops/s
Iteration  20: 5093263.054 ops/s
Iteration  21: 5076204.289 ops/s
Iteration  22: 5075542.279 ops/s
Iteration  23: 5014898.577 ops/s
Iteration  24: 5076661.511 ops/s
Iteration  25: 4957444.710 ops/s
Iteration  26: 5079210.858 ops/s
Iteration  27: 5084975.469 ops/s
Iteration  28: 5075287.588 ops/s
Iteration  29: 5093723.697 ops/s
Iteration  30: 4992139.896 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_natural_ordering":
  5064717.967 ±(99.9%) 22661.039 ops/s [Average]
  (min, avg, max) = (4957444.710, 5064717.967, 5105363.591), stdev = 33917.979
  CI (99.9%): [5042056.927, 5087379.006] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  5064717.967 ± 22661.039  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4329355.380 ops/s
# Warmup Iteration   2: 9469200.520 ops/s
# Warmup Iteration   3: 7982684.272 ops/s
# Warmup Iteration   4: 9492589.826 ops/s
# Warmup Iteration   5: 9478652.172 ops/s
# Warmup Iteration   6: 9460981.611 ops/s
# Warmup Iteration   7: 9508088.975 ops/s
# Warmup Iteration   8: 9509795.766 ops/s
# Warmup Iteration   9: 9410712.979 ops/s
# Warmup Iteration  10: 9517073.035 ops/s
# Warmup Iteration  11: 9513115.469 ops/s
# Warmup Iteration  12: 9459766.152 ops/s
# Warmup Iteration  13: 9505927.773 ops/s
# Warmup Iteration  14: 9537520.655 ops/s
# Warmup Iteration  15: 9406457.754 ops/s
# Warmup Iteration  16: 9539488.198 ops/s
# Warmup Iteration  17: 9398107.944 ops/s
# Warmup Iteration  18: 9529511.022 ops/s
# Warmup Iteration  19: 9435111.413 ops/s
# Warmup Iteration  20: 9545924.857 ops/s
# Warmup Iteration  21: 9416935.520 ops/s
# Warmup Iteration  22: 9548262.995 ops/s
# Warmup Iteration  23: 9519543.376 ops/s
# Warmup Iteration  24: 9508231.136 ops/s
# Warmup Iteration  25: 9527160.241 ops/s
# Warmup Iteration  26: 9518958.909 ops/s
# Warmup Iteration  27: 9359716.886 ops/s
# Warmup Iteration  28: 9517265.674 ops/s
# Warmup Iteration  29: 9496979.121 ops/s
# Warmup Iteration  30: 9527883.449 ops/s
Iteration   1: 9487616.082 ops/s
Iteration   2: 9399135.765 ops/s
Iteration   3: 9496060.623 ops/s
Iteration   4: 9541610.773 ops/s
Iteration   5: 9542447.449 ops/s
Iteration   6: 9552715.590 ops/s
Iteration   7: 9497558.654 ops/s
Iteration   8: 9550546.602 ops/s
Iteration   9: 9512192.364 ops/s
Iteration  10: 9486688.232 ops/s
Iteration  11: 9527713.604 ops/s
Iteration  12: 9558253.406 ops/s
Iteration  13: 9541450.047 ops/s
Iteration  14: 9484885.947 ops/s
Iteration  15: 9500150.266 ops/s
Iteration  16: 9332502.626 ops/s
Iteration  17: 9311463.123 ops/s
Iteration  18: 9484282.355 ops/s
Iteration  19: 9531153.786 ops/s
Iteration  20: 9544406.043 ops/s
Iteration  21: 9503866.829 ops/s
Iteration  22: 9207531.841 ops/s
Iteration  23: 9524000.742 ops/s
Iteration  24: 9512076.226 ops/s
Iteration  25: 9516168.897 ops/s
Iteration  26: 9529614.667 ops/s
Iteration  27: 9577417.635 ops/s
Iteration  28: 9556593.124 ops/s
Iteration  29: 9541406.248 ops/s
Iteration  30: 9602567.320 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_comparator":
  9498469.229 ±(99.9%) 55651.885 ops/s [Average]
  (min, avg, max) = (9207531.841, 9498469.229, 9602567.320), stdev = 83297.127
  CI (99.9%): [9442817.344, 9554121.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  9498469.229 ± 55651.885  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 509996.192 ops/s
# Warmup Iteration   2: 543819.812 ops/s
# Warmup Iteration   3: 674712.863 ops/s
# Warmup Iteration   4: 706457.161 ops/s
# Warmup Iteration   5: 702590.651 ops/s
# Warmup Iteration   6: 696839.493 ops/s
# Warmup Iteration   7: 709574.184 ops/s
# Warmup Iteration   8: 709822.289 ops/s
# Warmup Iteration   9: 706989.353 ops/s
# Warmup Iteration  10: 707468.241 ops/s
# Warmup Iteration  11: 698148.633 ops/s
# Warmup Iteration  12: 709444.601 ops/s
# Warmup Iteration  13: 592103.172 ops/s
# Warmup Iteration  14: 711152.962 ops/s
# Warmup Iteration  15: 703606.237 ops/s
# Warmup Iteration  16: 709505.035 ops/s
# Warmup Iteration  17: 737888.059 ops/s
# Warmup Iteration  18: 742378.364 ops/s
# Warmup Iteration  19: 741263.578 ops/s
# Warmup Iteration  20: 738000.014 ops/s
# Warmup Iteration  21: 740307.988 ops/s
# Warmup Iteration  22: 733817.565 ops/s
# Warmup Iteration  23: 739055.118 ops/s
# Warmup Iteration  24: 737912.783 ops/s
# Warmup Iteration  25: 734203.932 ops/s
# Warmup Iteration  26: 739541.675 ops/s
# Warmup Iteration  27: 740329.107 ops/s
# Warmup Iteration  28: 736433.870 ops/s
# Warmup Iteration  29: 745650.256 ops/s
# Warmup Iteration  30: 740366.734 ops/s
Iteration   1: 737907.178 ops/s
Iteration   2: 733694.507 ops/s
Iteration   3: 745710.753 ops/s
Iteration   4: 743909.861 ops/s
Iteration   5: 731369.161 ops/s
Iteration   6: 737329.625 ops/s
Iteration   7: 740901.629 ops/s
Iteration   8: 744414.939 ops/s
Iteration   9: 742223.726 ops/s
Iteration  10: 744336.521 ops/s
Iteration  11: 740069.139 ops/s
Iteration  12: 741525.842 ops/s
Iteration  13: 740082.413 ops/s
Iteration  14: 741329.054 ops/s
Iteration  15: 733788.818 ops/s
Iteration  16: 722215.311 ops/s
Iteration  17: 740587.038 ops/s
Iteration  18: 741665.987 ops/s
Iteration  19: 740519.949 ops/s
Iteration  20: 739272.544 ops/s
Iteration  21: 741089.883 ops/s
Iteration  22: 739878.518 ops/s
Iteration  23: 732682.270 ops/s
Iteration  24: 743943.022 ops/s
Iteration  25: 743227.918 ops/s
Iteration  26: 719279.326 ops/s
Iteration  27: 729515.660 ops/s
Iteration  28: 743948.442 ops/s
Iteration  29: 730442.188 ops/s
Iteration  30: 741735.695 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_null":
  738286.564 ±(99.9%) 4337.824 ops/s [Average]
  (min, avg, max) = (719279.326, 738286.564, 745710.753), stdev = 6492.651
  CI (99.9%): [733948.740, 742624.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  738286.564 ± 4337.824  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 560779.457 ops/s
# Warmup Iteration   2: 1326209.115 ops/s
# Warmup Iteration   3: 1373511.223 ops/s
# Warmup Iteration   4: 1155055.685 ops/s
# Warmup Iteration   5: 1363388.639 ops/s
# Warmup Iteration   6: 1371946.496 ops/s
# Warmup Iteration   7: 1354888.353 ops/s
# Warmup Iteration   8: 1374721.017 ops/s
# Warmup Iteration   9: 1374228.188 ops/s
# Warmup Iteration  10: 1362151.701 ops/s
# Warmup Iteration  11: 1375324.942 ops/s
# Warmup Iteration  12: 1369111.806 ops/s
# Warmup Iteration  13: 1344150.757 ops/s
# Warmup Iteration  14: 1368812.407 ops/s
# Warmup Iteration  15: 1370257.021 ops/s
# Warmup Iteration  16: 1361754.577 ops/s
# Warmup Iteration  17: 1373332.280 ops/s
# Warmup Iteration  18: 1378417.755 ops/s
# Warmup Iteration  19: 1360348.040 ops/s
# Warmup Iteration  20: 1374310.151 ops/s
# Warmup Iteration  21: 1355813.425 ops/s
# Warmup Iteration  22: 1367171.721 ops/s
# Warmup Iteration  23: 1377592.353 ops/s
# Warmup Iteration  24: 1368877.243 ops/s
# Warmup Iteration  25: 1370519.231 ops/s
# Warmup Iteration  26: 1376311.342 ops/s
# Warmup Iteration  27: 1366598.225 ops/s
# Warmup Iteration  28: 1370089.270 ops/s
# Warmup Iteration  29: 1369625.414 ops/s
# Warmup Iteration  30: 1374161.868 ops/s
Iteration   1: 1363189.495 ops/s
Iteration   2: 1374423.181 ops/s
Iteration   3: 1370774.614 ops/s
Iteration   4: 1370744.012 ops/s
Iteration   5: 1369264.386 ops/s
Iteration   6: 1381316.016 ops/s
Iteration   7: 1371477.080 ops/s
Iteration   8: 1343047.818 ops/s
Iteration   9: 1369936.665 ops/s
Iteration  10: 1380348.978 ops/s
Iteration  11: 1351880.156 ops/s
Iteration  12: 1368035.601 ops/s
Iteration  13: 1375354.243 ops/s
Iteration  14: 1371003.512 ops/s
Iteration  15: 1378674.262 ops/s
Iteration  16: 1374001.856 ops/s
Iteration  17: 1380126.291 ops/s
Iteration  18: 1376354.770 ops/s
Iteration  19: 1373625.879 ops/s
Iteration  20: 1353899.646 ops/s
Iteration  21: 1352764.104 ops/s
Iteration  22: 1365413.157 ops/s
Iteration  23: 1368809.933 ops/s
Iteration  24: 1369214.108 ops/s
Iteration  25: 1333087.105 ops/s
Iteration  26: 1361451.425 ops/s
Iteration  27: 1383377.138 ops/s
Iteration  28: 1371425.095 ops/s
Iteration  29: 1376307.807 ops/s
Iteration  30: 1371970.597 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap":
  1368376.631 ±(99.9%) 7649.110 ops/s [Average]
  (min, avg, max) = (1333087.105, 1368376.631, 1383377.138), stdev = 11448.829
  CI (99.9%): [1360727.521, 1376025.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap  thrpt   30  1368376.631 ± 7649.110  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 462405.533 ops/s
# Warmup Iteration   2: 846194.686 ops/s
# Warmup Iteration   3: 938600.835 ops/s
# Warmup Iteration   4: 959319.480 ops/s
# Warmup Iteration   5: 945380.411 ops/s
# Warmup Iteration   6: 797481.041 ops/s
# Warmup Iteration   7: 955081.426 ops/s
# Warmup Iteration   8: 945859.860 ops/s
# Warmup Iteration   9: 955161.268 ops/s
# Warmup Iteration  10: 958022.131 ops/s
# Warmup Iteration  11: 960143.641 ops/s
# Warmup Iteration  12: 956301.132 ops/s
# Warmup Iteration  13: 957648.183 ops/s
# Warmup Iteration  14: 958527.664 ops/s
# Warmup Iteration  15: 962279.589 ops/s
# Warmup Iteration  16: 958780.166 ops/s
# Warmup Iteration  17: 950634.351 ops/s
# Warmup Iteration  18: 955658.451 ops/s
# Warmup Iteration  19: 958315.260 ops/s
# Warmup Iteration  20: 953301.646 ops/s
# Warmup Iteration  21: 957501.143 ops/s
# Warmup Iteration  22: 948891.994 ops/s
# Warmup Iteration  23: 956651.282 ops/s
# Warmup Iteration  24: 948495.811 ops/s
# Warmup Iteration  25: 959145.758 ops/s
# Warmup Iteration  26: 957967.039 ops/s
# Warmup Iteration  27: 950575.734 ops/s
# Warmup Iteration  28: 956290.589 ops/s
# Warmup Iteration  29: 958104.711 ops/s
# Warmup Iteration  30: 958646.837 ops/s
Iteration   1: 960106.943 ops/s
Iteration   2: 958875.392 ops/s
Iteration   3: 942478.155 ops/s
Iteration   4: 958744.612 ops/s
Iteration   5: 958962.895 ops/s
Iteration   6: 939298.671 ops/s
Iteration   7: 953121.634 ops/s
Iteration   8: 960878.379 ops/s
Iteration   9: 958730.554 ops/s
Iteration  10: 957817.028 ops/s
Iteration  11: 961014.749 ops/s
Iteration  12: 961203.784 ops/s
Iteration  13: 958714.163 ops/s
Iteration  14: 955653.597 ops/s
Iteration  15: 953781.695 ops/s
Iteration  16: 954687.331 ops/s
Iteration  17: 958301.934 ops/s
Iteration  18: 958800.487 ops/s
Iteration  19: 956904.839 ops/s
Iteration  20: 960969.895 ops/s
Iteration  21: 963655.478 ops/s
Iteration  22: 960733.168 ops/s
Iteration  23: 959812.520 ops/s
Iteration  24: 959703.890 ops/s
Iteration  25: 950399.810 ops/s
Iteration  26: 954049.837 ops/s
Iteration  27: 949387.765 ops/s
Iteration  28: 957861.532 ops/s
Iteration  29: 961029.286 ops/s
Iteration  30: 960211.764 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedMapBy":
  956863.060 ±(99.9%) 3645.461 ops/s [Average]
  (min, avg, max) = (939298.671, 956863.060, 963655.478), stdev = 5456.354
  CI (99.9%): [953217.599, 960508.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  956863.060 ± 3645.461  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 551116.550 ops/s
# Warmup Iteration   2: 1262963.266 ops/s
# Warmup Iteration   3: 1314081.705 ops/s
# Warmup Iteration   4: 1203983.291 ops/s
# Warmup Iteration   5: 1214588.747 ops/s
# Warmup Iteration   6: 1318862.253 ops/s
# Warmup Iteration   7: 1322009.502 ops/s
# Warmup Iteration   8: 1315555.916 ops/s
# Warmup Iteration   9: 1311051.158 ops/s
# Warmup Iteration  10: 1320008.975 ops/s
# Warmup Iteration  11: 1318066.547 ops/s
# Warmup Iteration  12: 1328741.744 ops/s
# Warmup Iteration  13: 1321932.048 ops/s
# Warmup Iteration  14: 1320566.341 ops/s
# Warmup Iteration  15: 1320401.474 ops/s
# Warmup Iteration  16: 1301636.612 ops/s
# Warmup Iteration  17: 1316106.799 ops/s
# Warmup Iteration  18: 1322705.728 ops/s
# Warmup Iteration  19: 1327132.680 ops/s
# Warmup Iteration  20: 1316766.781 ops/s
# Warmup Iteration  21: 1321779.763 ops/s
# Warmup Iteration  22: 1311136.589 ops/s
# Warmup Iteration  23: 1323323.895 ops/s
# Warmup Iteration  24: 1319950.341 ops/s
# Warmup Iteration  25: 1319421.510 ops/s
# Warmup Iteration  26: 1316039.669 ops/s
# Warmup Iteration  27: 1316770.761 ops/s
# Warmup Iteration  28: 1320491.996 ops/s
# Warmup Iteration  29: 1316793.508 ops/s
# Warmup Iteration  30: 1315768.444 ops/s
Iteration   1: 1317893.315 ops/s
Iteration   2: 1311535.561 ops/s
Iteration   3: 1326847.904 ops/s
Iteration   4: 1325544.622 ops/s
Iteration   5: 1314681.176 ops/s
Iteration   6: 1323958.444 ops/s
Iteration   7: 1318761.081 ops/s
Iteration   8: 1319939.200 ops/s
Iteration   9: 1320733.046 ops/s
Iteration  10: 1323994.709 ops/s
Iteration  11: 1323740.586 ops/s
Iteration  12: 1320626.550 ops/s
Iteration  13: 1306619.420 ops/s
Iteration  14: 1323006.534 ops/s
Iteration  15: 1324338.540 ops/s
Iteration  16: 1320122.828 ops/s
Iteration  17: 1305873.262 ops/s
Iteration  18: 1323511.356 ops/s
Iteration  19: 1325383.556 ops/s
Iteration  20: 1334959.029 ops/s
Iteration  21: 1326229.203 ops/s
Iteration  22: 1331197.999 ops/s
Iteration  23: 1326571.903 ops/s
Iteration  24: 1322165.928 ops/s
Iteration  25: 1331250.223 ops/s
Iteration  26: 1331548.704 ops/s
Iteration  27: 1314195.371 ops/s
Iteration  28: 1330139.019 ops/s
Iteration  29: 1320962.079 ops/s
Iteration  30: 1316493.489 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap_with_comparator":
  1322094.155 ±(99.9%) 4628.548 ops/s [Average]
  (min, avg, max) = (1305873.262, 1322094.155, 1334959.029), stdev = 6927.793
  CI (99.9%): [1317465.607, 1326722.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  1322094.155 ± 4628.548  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 639471.528 ops/s
# Warmup Iteration   2: 1454406.310 ops/s
# Warmup Iteration   3: 1505464.998 ops/s
# Warmup Iteration   4: 1320300.193 ops/s
# Warmup Iteration   5: 1445413.954 ops/s
# Warmup Iteration   6: 1489827.233 ops/s
# Warmup Iteration   7: 1503704.287 ops/s
# Warmup Iteration   8: 1510994.203 ops/s
# Warmup Iteration   9: 1493070.341 ops/s
# Warmup Iteration  10: 1512687.517 ops/s
# Warmup Iteration  11: 1509670.129 ops/s
# Warmup Iteration  12: 1509180.706 ops/s
# Warmup Iteration  13: 1512265.767 ops/s
# Warmup Iteration  14: 1506673.404 ops/s
# Warmup Iteration  15: 1512223.738 ops/s
# Warmup Iteration  16: 1511275.252 ops/s
# Warmup Iteration  17: 1511923.970 ops/s
# Warmup Iteration  18: 1501121.307 ops/s
# Warmup Iteration  19: 1506123.489 ops/s
# Warmup Iteration  20: 1503413.405 ops/s
# Warmup Iteration  21: 1500511.958 ops/s
# Warmup Iteration  22: 1509178.062 ops/s
# Warmup Iteration  23: 1507218.681 ops/s
# Warmup Iteration  24: 1509847.281 ops/s
# Warmup Iteration  25: 1512096.784 ops/s
# Warmup Iteration  26: 1506607.883 ops/s
# Warmup Iteration  27: 1508087.670 ops/s
# Warmup Iteration  28: 1510238.738 ops/s
# Warmup Iteration  29: 1507379.643 ops/s
# Warmup Iteration  30: 1503825.574 ops/s
Iteration   1: 1480892.469 ops/s
Iteration   2: 1506776.498 ops/s
Iteration   3: 1512669.031 ops/s
Iteration   4: 1513078.866 ops/s
Iteration   5: 1494721.543 ops/s
Iteration   6: 1510105.326 ops/s
Iteration   7: 1503815.592 ops/s
Iteration   8: 1507408.219 ops/s
Iteration   9: 1510772.676 ops/s
Iteration  10: 1503548.072 ops/s
Iteration  11: 1507882.024 ops/s
Iteration  12: 1507271.428 ops/s
Iteration  13: 1512122.335 ops/s
Iteration  14: 1507961.183 ops/s
Iteration  15: 1492689.466 ops/s
Iteration  16: 1505409.607 ops/s
Iteration  17: 1515247.926 ops/s
Iteration  18: 1501788.335 ops/s
Iteration  19: 1511006.458 ops/s
Iteration  20: 1507552.224 ops/s
Iteration  21: 1516904.535 ops/s
Iteration  22: 1504529.030 ops/s
Iteration  23: 1508943.736 ops/s
Iteration  24: 1495549.543 ops/s
Iteration  25: 1490948.790 ops/s
Iteration  26: 1505854.472 ops/s
Iteration  27: 1507610.478 ops/s
Iteration  28: 1503172.631 ops/s
Iteration  29: 1508765.950 ops/s
Iteration  30: 1484739.847 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedSetBy":
  1504657.943 ±(99.9%) 5741.472 ops/s [Average]
  (min, avg, max) = (1480892.469, 1504657.943, 1516904.535), stdev = 8593.566
  CI (99.9%): [1498916.471, 1510399.415] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1504657.943 ± 5741.472  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 970172.100 ops/s
# Warmup Iteration   2: 2563948.318 ops/s
# Warmup Iteration   3: 2323641.333 ops/s
# Warmup Iteration   4: 2342324.751 ops/s
# Warmup Iteration   5: 2555883.513 ops/s
# Warmup Iteration   6: 2545843.279 ops/s
# Warmup Iteration   7: 2557095.713 ops/s
# Warmup Iteration   8: 2548275.928 ops/s
# Warmup Iteration   9: 2537004.139 ops/s
# Warmup Iteration  10: 2540417.788 ops/s
# Warmup Iteration  11: 2552728.685 ops/s
# Warmup Iteration  12: 2536388.656 ops/s
# Warmup Iteration  13: 2533402.186 ops/s
# Warmup Iteration  14: 2553953.195 ops/s
# Warmup Iteration  15: 2545752.007 ops/s
# Warmup Iteration  16: 2530364.222 ops/s
# Warmup Iteration  17: 2557722.640 ops/s
# Warmup Iteration  18: 2530563.078 ops/s
# Warmup Iteration  19: 2528016.416 ops/s
# Warmup Iteration  20: 2534695.645 ops/s
# Warmup Iteration  21: 2560195.510 ops/s
# Warmup Iteration  22: 2542053.084 ops/s
# Warmup Iteration  23: 2553420.404 ops/s
# Warmup Iteration  24: 2548932.479 ops/s
# Warmup Iteration  25: 2554159.469 ops/s
# Warmup Iteration  26: 2563380.129 ops/s
# Warmup Iteration  27: 2540275.515 ops/s
# Warmup Iteration  28: 2552948.085 ops/s
# Warmup Iteration  29: 2564064.218 ops/s
# Warmup Iteration  30: 2545894.159 ops/s
Iteration   1: 2556183.986 ops/s
Iteration   2: 2557985.860 ops/s
Iteration   3: 2476815.132 ops/s
Iteration   4: 2569475.603 ops/s
Iteration   5: 2534843.375 ops/s
Iteration   6: 2556660.364 ops/s
Iteration   7: 2550647.629 ops/s
Iteration   8: 2541580.877 ops/s
Iteration   9: 2555109.188 ops/s
Iteration  10: 2538444.862 ops/s
Iteration  11: 2557492.558 ops/s
Iteration  12: 2556024.991 ops/s
Iteration  13: 2554087.234 ops/s
Iteration  14: 2548888.955 ops/s
Iteration  15: 2547961.346 ops/s
Iteration  16: 2552985.185 ops/s
Iteration  17: 2551638.544 ops/s
Iteration  18: 2563665.145 ops/s
Iteration  19: 2538249.286 ops/s
Iteration  20: 2545709.645 ops/s
Iteration  21: 2560825.191 ops/s
Iteration  22: 2539604.810 ops/s
Iteration  23: 2552763.796 ops/s
Iteration  24: 2537271.704 ops/s
Iteration  25: 2558285.252 ops/s
Iteration  26: 2549124.549 ops/s
Iteration  27: 2549597.735 ops/s
Iteration  28: 2551029.861 ops/s
Iteration  29: 2555558.849 ops/s
Iteration  30: 2547739.537 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  2548541.702 ±(99.9%) 10563.386 ops/s [Average]
  (min, avg, max) = (2476815.132, 2548541.702, 2569475.603), stdev = 15810.780
  CI (99.9%): [2537978.316, 2559105.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  2548541.702 ± 10563.386  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 941211.521 ops/s
# Warmup Iteration   2: 2357399.404 ops/s
# Warmup Iteration   3: 2378507.969 ops/s
# Warmup Iteration   4: 1985507.922 ops/s
# Warmup Iteration   5: 2374625.911 ops/s
# Warmup Iteration   6: 2387447.528 ops/s
# Warmup Iteration   7: 2371360.235 ops/s
# Warmup Iteration   8: 2355030.948 ops/s
# Warmup Iteration   9: 2394037.676 ops/s
# Warmup Iteration  10: 2388316.677 ops/s
# Warmup Iteration  11: 2392335.430 ops/s
# Warmup Iteration  12: 2391364.877 ops/s
# Warmup Iteration  13: 2383479.801 ops/s
# Warmup Iteration  14: 2376370.438 ops/s
# Warmup Iteration  15: 2349533.375 ops/s
# Warmup Iteration  16: 2384854.792 ops/s
# Warmup Iteration  17: 2393581.581 ops/s
# Warmup Iteration  18: 2383612.003 ops/s
# Warmup Iteration  19: 2384864.613 ops/s
# Warmup Iteration  20: 2388601.053 ops/s
# Warmup Iteration  21: 2386949.206 ops/s
# Warmup Iteration  22: 2391148.476 ops/s
# Warmup Iteration  23: 2386243.576 ops/s
# Warmup Iteration  24: 2389101.942 ops/s
# Warmup Iteration  25: 2384779.537 ops/s
# Warmup Iteration  26: 2394012.059 ops/s
# Warmup Iteration  27: 2396482.850 ops/s
# Warmup Iteration  28: 2391484.404 ops/s
# Warmup Iteration  29: 2392468.447 ops/s
# Warmup Iteration  30: 2370582.146 ops/s
Iteration   1: 2400707.792 ops/s
Iteration   2: 2387012.848 ops/s
Iteration   3: 2388512.375 ops/s
Iteration   4: 2351405.022 ops/s
Iteration   5: 2383275.463 ops/s
Iteration   6: 2388643.290 ops/s
Iteration   7: 2411104.452 ops/s
Iteration   8: 2403453.570 ops/s
Iteration   9: 2393141.737 ops/s
Iteration  10: 2368083.488 ops/s
Iteration  11: 2398963.011 ops/s
Iteration  12: 2383421.116 ops/s
Iteration  13: 2389087.739 ops/s
Iteration  14: 2401682.550 ops/s
Iteration  15: 2368196.173 ops/s
Iteration  16: 2400648.154 ops/s
Iteration  17: 2393718.299 ops/s
Iteration  18: 2387412.991 ops/s
Iteration  19: 2395994.457 ops/s
Iteration  20: 2395888.030 ops/s
Iteration  21: 2394320.659 ops/s
Iteration  22: 2381197.973 ops/s
Iteration  23: 2384311.509 ops/s
Iteration  24: 2387016.366 ops/s
Iteration  25: 2395180.373 ops/s
Iteration  26: 2389937.890 ops/s
Iteration  27: 2387717.096 ops/s
Iteration  28: 2387680.823 ops/s
Iteration  29: 2385246.193 ops/s
Iteration  30: 2396636.554 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_with_comparator":
  2389319.933 ±(99.9%) 7794.896 ops/s [Average]
  (min, avg, max) = (2351405.022, 2389319.933, 2411104.452), stdev = 11667.034
  CI (99.9%): [2381525.037, 2397114.829] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  2389319.933 ± 7794.896  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4518530.484 ops/s
# Warmup Iteration   2: 9835996.634 ops/s
# Warmup Iteration   3: 8033390.512 ops/s
# Warmup Iteration   4: 9649197.783 ops/s
# Warmup Iteration   5: 9605447.864 ops/s
# Warmup Iteration   6: 9576853.544 ops/s
# Warmup Iteration   7: 9618426.589 ops/s
# Warmup Iteration   8: 9663672.297 ops/s
# Warmup Iteration   9: 9660406.959 ops/s
# Warmup Iteration  10: 9625689.524 ops/s
# Warmup Iteration  11: 9601497.377 ops/s
# Warmup Iteration  12: 9642048.531 ops/s
# Warmup Iteration  13: 9623751.185 ops/s
# Warmup Iteration  14: 9659190.197 ops/s
# Warmup Iteration  15: 9552340.336 ops/s
# Warmup Iteration  16: 9637402.456 ops/s
# Warmup Iteration  17: 9664715.644 ops/s
# Warmup Iteration  18: 9604498.733 ops/s
# Warmup Iteration  19: 9656169.786 ops/s
# Warmup Iteration  20: 9593069.957 ops/s
# Warmup Iteration  21: 9679786.943 ops/s
# Warmup Iteration  22: 9644238.085 ops/s
# Warmup Iteration  23: 9696462.094 ops/s
# Warmup Iteration  24: 9625371.030 ops/s
# Warmup Iteration  25: 9673196.214 ops/s
# Warmup Iteration  26: 9660969.610 ops/s
# Warmup Iteration  27: 9564468.419 ops/s
# Warmup Iteration  28: 9671931.301 ops/s
# Warmup Iteration  29: 9625681.494 ops/s
# Warmup Iteration  30: 9712003.752 ops/s
Iteration   1: 9521564.067 ops/s
Iteration   2: 9523174.498 ops/s
Iteration   3: 9694236.901 ops/s
Iteration   4: 9667728.877 ops/s
Iteration   5: 9655667.579 ops/s
Iteration   6: 9692162.767 ops/s
Iteration   7: 9594501.627 ops/s
Iteration   8: 9670254.844 ops/s
Iteration   9: 9620067.544 ops/s
Iteration  10: 9713180.198 ops/s
Iteration  11: 9579556.654 ops/s
Iteration  12: 9493290.339 ops/s
Iteration  13: 9633086.906 ops/s
Iteration  14: 9691406.399 ops/s
Iteration  15: 9648309.062 ops/s
Iteration  16: 9383104.977 ops/s
Iteration  17: 9639886.696 ops/s
Iteration  18: 9673076.830 ops/s
Iteration  19: 9668809.398 ops/s
Iteration  20: 9724785.818 ops/s
Iteration  21: 9564813.648 ops/s
Iteration  22: 9673020.691 ops/s
Iteration  23: 9462694.655 ops/s
Iteration  24: 9603112.818 ops/s
Iteration  25: 9639095.539 ops/s
Iteration  26: 9694236.224 ops/s
Iteration  27: 9443508.194 ops/s
Iteration  28: 9571858.730 ops/s
Iteration  29: 9672702.768 ops/s
Iteration  30: 9508651.922 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toStack":
  9610718.239 ±(99.9%) 58780.012 ops/s [Average]
  (min, avg, max) = (9383104.977, 9610718.239, 9724785.818), stdev = 87979.162
  CI (99.9%): [9551938.227, 9669498.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_toStack  thrpt   30  9610718.239 ± 58780.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2268080.997 ops/s
# Warmup Iteration   2: 5093362.284 ops/s
# Warmup Iteration   3: 4259392.276 ops/s
# Warmup Iteration   4: 5121985.043 ops/s
# Warmup Iteration   5: 5122797.504 ops/s
# Warmup Iteration   6: 5139778.613 ops/s
# Warmup Iteration   7: 5089841.452 ops/s
# Warmup Iteration   8: 5118936.996 ops/s
# Warmup Iteration   9: 5154283.655 ops/s
# Warmup Iteration  10: 5143803.103 ops/s
# Warmup Iteration  11: 5143836.828 ops/s
# Warmup Iteration  12: 5147052.701 ops/s
# Warmup Iteration  13: 5135371.656 ops/s
# Warmup Iteration  14: 5056840.105 ops/s
# Warmup Iteration  15: 5140989.371 ops/s
# Warmup Iteration  16: 5125670.344 ops/s
# Warmup Iteration  17: 5109954.181 ops/s
# Warmup Iteration  18: 5121872.743 ops/s
# Warmup Iteration  19: 5127157.213 ops/s
# Warmup Iteration  20: 5144292.758 ops/s
# Warmup Iteration  21: 5102122.005 ops/s
# Warmup Iteration  22: 5136049.285 ops/s
# Warmup Iteration  23: 5149778.878 ops/s
# Warmup Iteration  24: 5148075.834 ops/s
# Warmup Iteration  25: 5135184.497 ops/s
# Warmup Iteration  26: 5120534.809 ops/s
# Warmup Iteration  27: 5137781.263 ops/s
# Warmup Iteration  28: 5063005.858 ops/s
# Warmup Iteration  29: 5110469.480 ops/s
# Warmup Iteration  30: 5099724.993 ops/s
Iteration   1: 5100860.436 ops/s
Iteration   2: 5139705.912 ops/s
Iteration   3: 5133705.656 ops/s
Iteration   4: 5138054.238 ops/s
Iteration   5: 5059639.062 ops/s
Iteration   6: 5069759.504 ops/s
Iteration   7: 5157381.327 ops/s
Iteration   8: 5083587.968 ops/s
Iteration   9: 5153605.532 ops/s
Iteration  10: 5119092.362 ops/s
Iteration  11: 5134158.527 ops/s
Iteration  12: 5152297.439 ops/s
Iteration  13: 5129083.884 ops/s
Iteration  14: 5100403.873 ops/s
Iteration  15: 5155633.923 ops/s
Iteration  16: 5138810.033 ops/s
Iteration  17: 5135445.432 ops/s
Iteration  18: 5129474.917 ops/s
Iteration  19: 5123356.120 ops/s
Iteration  20: 5065558.605 ops/s
Iteration  21: 5118220.623 ops/s
Iteration  22: 5152751.008 ops/s
Iteration  23: 5002877.580 ops/s
Iteration  24: 5180397.073 ops/s
Iteration  25: 5143458.771 ops/s
Iteration  26: 5135573.099 ops/s
Iteration  27: 5160822.606 ops/s
Iteration  28: 5131808.630 ops/s
Iteration  29: 5106096.193 ops/s
Iteration  30: 5146530.576 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_with":
  5123271.697 ±(99.9%) 24670.819 ops/s [Average]
  (min, avg, max) = (5002877.580, 5123271.697, 5180397.073), stdev = 36926.123
  CI (99.9%): [5098600.878, 5147942.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_with  thrpt   30  5123271.697 ± 24670.819  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2151601.207 ops/s
# Warmup Iteration   2: 4779495.437 ops/s
# Warmup Iteration   3: 3998822.680 ops/s
# Warmup Iteration   4: 4815808.560 ops/s
# Warmup Iteration   5: 4772201.318 ops/s
# Warmup Iteration   6: 4838322.332 ops/s
# Warmup Iteration   7: 4822901.447 ops/s
# Warmup Iteration   8: 4781604.733 ops/s
# Warmup Iteration   9: 4828317.387 ops/s
# Warmup Iteration  10: 4840833.806 ops/s
# Warmup Iteration  11: 4837932.626 ops/s
# Warmup Iteration  12: 4830441.828 ops/s
# Warmup Iteration  13: 4820663.680 ops/s
# Warmup Iteration  14: 4819826.010 ops/s
# Warmup Iteration  15: 4835697.994 ops/s
# Warmup Iteration  16: 4820516.436 ops/s
# Warmup Iteration  17: 4810571.916 ops/s
# Warmup Iteration  18: 4805444.043 ops/s
# Warmup Iteration  19: 4834245.689 ops/s
# Warmup Iteration  20: 4806214.695 ops/s
# Warmup Iteration  21: 4831586.702 ops/s
# Warmup Iteration  22: 4798633.528 ops/s
# Warmup Iteration  23: 4824285.283 ops/s
# Warmup Iteration  24: 4827037.684 ops/s
# Warmup Iteration  25: 4783523.822 ops/s
# Warmup Iteration  26: 4801487.720 ops/s
# Warmup Iteration  27: 4836948.354 ops/s
# Warmup Iteration  28: 4825695.285 ops/s
# Warmup Iteration  29: 4849995.875 ops/s
# Warmup Iteration  30: 4838728.269 ops/s
Iteration   1: 4812545.398 ops/s
Iteration   2: 4823751.016 ops/s
Iteration   3: 4844560.888 ops/s
Iteration   4: 4826235.269 ops/s
Iteration   5: 4815279.436 ops/s
Iteration   6: 4854786.788 ops/s
Iteration   7: 4850758.704 ops/s
Iteration   8: 4821516.784 ops/s
Iteration   9: 4844891.087 ops/s
Iteration  10: 4864128.165 ops/s
Iteration  11: 4838711.633 ops/s
Iteration  12: 4815386.278 ops/s
Iteration  13: 4803172.218 ops/s
Iteration  14: 4827179.423 ops/s
Iteration  15: 4823751.132 ops/s
Iteration  16: 4804950.143 ops/s
Iteration  17: 4796720.254 ops/s
Iteration  18: 4840252.609 ops/s
Iteration  19: 4807355.848 ops/s
Iteration  20: 4818258.728 ops/s
Iteration  21: 4821998.198 ops/s
Iteration  22: 4795916.229 ops/s
Iteration  23: 4756109.679 ops/s
Iteration  24: 4831046.220 ops/s
Iteration  25: 4814044.318 ops/s
Iteration  26: 4832696.903 ops/s
Iteration  27: 4741151.398 ops/s
Iteration  28: 4853248.356 ops/s
Iteration  29: 4838256.833 ops/s
Iteration  30: 4803765.812 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_withAll":
  4820747.525 ±(99.9%) 17723.777 ops/s [Average]
  (min, avg, max) = (4741151.398, 4820747.525, 4864128.165), stdev = 26528.117
  CI (99.9%): [4803023.748, 4838471.302] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_withAll  thrpt   30  4820747.525 ± 17723.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_withMethods$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_withMethods

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1291069.324 ops/s
# Warmup Iteration   2: 2780529.683 ops/s
# Warmup Iteration   3: 2339285.331 ops/s
# Warmup Iteration   4: 2786206.522 ops/s
# Warmup Iteration   5: 2792436.903 ops/s
# Warmup Iteration   6: 2790783.971 ops/s
# Warmup Iteration   7: 2803908.816 ops/s
# Warmup Iteration   8: 2804481.874 ops/s
# Warmup Iteration   9: 2801636.361 ops/s
# Warmup Iteration  10: 2800265.988 ops/s
# Warmup Iteration  11: 2771351.349 ops/s
# Warmup Iteration  12: 2806328.252 ops/s
# Warmup Iteration  13: 2786570.060 ops/s
# Warmup Iteration  14: 2798011.579 ops/s
# Warmup Iteration  15: 2804595.075 ops/s
# Warmup Iteration  16: 2801538.005 ops/s
# Warmup Iteration  17: 2809537.324 ops/s
# Warmup Iteration  18: 2775953.325 ops/s
# Warmup Iteration  19: 2795651.366 ops/s
# Warmup Iteration  20: 2795862.503 ops/s
# Warmup Iteration  21: 2795478.050 ops/s
# Warmup Iteration  22: 2792152.978 ops/s
# Warmup Iteration  23: 2808155.940 ops/s
# Warmup Iteration  24: 2807554.941 ops/s
# Warmup Iteration  25: 2810019.901 ops/s
# Warmup Iteration  26: 2802135.151 ops/s
# Warmup Iteration  27: 2791108.433 ops/s
# Warmup Iteration  28: 2796805.785 ops/s
# Warmup Iteration  29: 2775451.233 ops/s
# Warmup Iteration  30: 2766525.948 ops/s
Iteration   1: 2788340.364 ops/s
Iteration   2: 2791064.842 ops/s
Iteration   3: 2815821.080 ops/s
Iteration   4: 2799260.285 ops/s
Iteration   5: 2802091.917 ops/s
Iteration   6: 2754046.064 ops/s
Iteration   7: 2813576.231 ops/s
Iteration   8: 2766556.073 ops/s
Iteration   9: 2813903.380 ops/s
Iteration  10: 2751864.951 ops/s
Iteration  11: 2798624.285 ops/s
Iteration  12: 2754897.046 ops/s
Iteration  13: 2814894.005 ops/s
Iteration  14: 2767142.943 ops/s
Iteration  15: 2801541.289 ops/s
Iteration  16: 2799130.878 ops/s
Iteration  17: 2778996.488 ops/s
Iteration  18: 2809538.882 ops/s
Iteration  19: 2773474.351 ops/s
Iteration  20: 2814132.514 ops/s
Iteration  21: 2807139.524 ops/s
Iteration  22: 2798543.165 ops/s
Iteration  23: 2804745.868 ops/s
Iteration  24: 2802497.687 ops/s
Iteration  25: 2794120.105 ops/s
Iteration  26: 2806853.372 ops/s
Iteration  27: 2787083.915 ops/s
Iteration  28: 2807169.622 ops/s
Iteration  29: 2795888.458 ops/s
Iteration  30: 2782572.870 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_withMethods":
  2793183.748 ±(99.9%) 12701.095 ops/s [Average]
  (min, avg, max) = (2751864.951, 2793183.748, 2815821.080), stdev = 19010.403
  CI (99.9%): [2780482.653, 2805884.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_withMethods  thrpt   30  2793183.748 ± 12701.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2600215.072 ops/s
# Warmup Iteration   2: 5683387.626 ops/s
# Warmup Iteration   3: 4762920.741 ops/s
# Warmup Iteration   4: 5716403.210 ops/s
# Warmup Iteration   5: 5669572.622 ops/s
# Warmup Iteration   6: 5668691.941 ops/s
# Warmup Iteration   7: 5621214.406 ops/s
# Warmup Iteration   8: 5677046.808 ops/s
# Warmup Iteration   9: 5649757.731 ops/s
# Warmup Iteration  10: 5674174.772 ops/s
# Warmup Iteration  11: 5677979.321 ops/s
# Warmup Iteration  12: 5665653.667 ops/s
# Warmup Iteration  13: 5669045.860 ops/s
# Warmup Iteration  14: 5642797.854 ops/s
# Warmup Iteration  15: 5684842.923 ops/s
# Warmup Iteration  16: 5672039.318 ops/s
# Warmup Iteration  17: 5631714.389 ops/s
# Warmup Iteration  18: 5636352.182 ops/s
# Warmup Iteration  19: 5662953.491 ops/s
# Warmup Iteration  20: 5684526.464 ops/s
# Warmup Iteration  21: 5649674.757 ops/s
# Warmup Iteration  22: 5688686.884 ops/s
# Warmup Iteration  23: 5689236.998 ops/s
# Warmup Iteration  24: 5666519.614 ops/s
# Warmup Iteration  25: 5691475.830 ops/s
# Warmup Iteration  26: 5706238.744 ops/s
# Warmup Iteration  27: 5710554.909 ops/s
# Warmup Iteration  28: 5673135.408 ops/s
# Warmup Iteration  29: 5636153.987 ops/s
# Warmup Iteration  30: 5701001.844 ops/s
Iteration   1: 5732891.579 ops/s
Iteration   2: 5686387.331 ops/s
Iteration   3: 5723980.046 ops/s
Iteration   4: 5678067.221 ops/s
Iteration   5: 5599777.005 ops/s
Iteration   6: 5738419.706 ops/s
Iteration   7: 5663893.666 ops/s
Iteration   8: 5702514.840 ops/s
Iteration   9: 5688535.478 ops/s
Iteration  10: 5684790.726 ops/s
Iteration  11: 5701914.218 ops/s
Iteration  12: 5708094.677 ops/s
Iteration  13: 5706852.962 ops/s
Iteration  14: 5686576.250 ops/s
Iteration  15: 5703291.750 ops/s
Iteration  16: 5655168.716 ops/s
Iteration  17: 5735657.588 ops/s
Iteration  18: 5713988.454 ops/s
Iteration  19: 5717933.320 ops/s
Iteration  20: 5687674.876 ops/s
Iteration  21: 5696617.079 ops/s
Iteration  22: 5705331.372 ops/s
Iteration  23: 5682383.827 ops/s
Iteration  24: 5686888.872 ops/s
Iteration  25: 5740894.992 ops/s
Iteration  26: 5522088.977 ops/s
Iteration  27: 5712525.002 ops/s
Iteration  28: 5616363.004 ops/s
Iteration  29: 5586308.951 ops/s
Iteration  30: 5613003.238 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_without":
  5682627.191 ±(99.9%) 33339.439 ops/s [Average]
  (min, avg, max) = (5522088.977, 5682627.191, 5740894.992), stdev = 49900.906
  CI (99.9%): [5649287.752, 5715966.630] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_without  thrpt   30  5682627.191 ± 33339.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1284279.080 ops/s
# Warmup Iteration   2: 3201646.772 ops/s
# Warmup Iteration   3: 3183939.548 ops/s
# Warmup Iteration   4: 2708887.396 ops/s
# Warmup Iteration   5: 3213696.280 ops/s
# Warmup Iteration   6: 3193988.584 ops/s
# Warmup Iteration   7: 3204627.325 ops/s
# Warmup Iteration   8: 3222571.489 ops/s
# Warmup Iteration   9: 3210761.104 ops/s
# Warmup Iteration  10: 3233226.729 ops/s
# Warmup Iteration  11: 3229901.498 ops/s
# Warmup Iteration  12: 3199566.442 ops/s
# Warmup Iteration  13: 3198724.300 ops/s
# Warmup Iteration  14: 3192953.821 ops/s
# Warmup Iteration  15: 3234818.300 ops/s
# Warmup Iteration  16: 3211192.090 ops/s
# Warmup Iteration  17: 3233457.037 ops/s
# Warmup Iteration  18: 3220676.332 ops/s
# Warmup Iteration  19: 3223411.856 ops/s
# Warmup Iteration  20: 3243706.758 ops/s
# Warmup Iteration  21: 3245823.973 ops/s
# Warmup Iteration  22: 3229696.443 ops/s
# Warmup Iteration  23: 3196475.993 ops/s
# Warmup Iteration  24: 3241322.038 ops/s
# Warmup Iteration  25: 3226269.958 ops/s
# Warmup Iteration  26: 3208449.114 ops/s
# Warmup Iteration  27: 3214145.536 ops/s
# Warmup Iteration  28: 3245112.378 ops/s
# Warmup Iteration  29: 3244529.163 ops/s
# Warmup Iteration  30: 3246184.633 ops/s
Iteration   1: 3241525.149 ops/s
Iteration   2: 3246089.126 ops/s
Iteration   3: 3224848.089 ops/s
Iteration   4: 3238258.084 ops/s
Iteration   5: 3233508.595 ops/s
Iteration   6: 3233341.287 ops/s
Iteration   7: 3228814.179 ops/s
Iteration   8: 3227556.909 ops/s
Iteration   9: 3250161.498 ops/s
Iteration  10: 3224608.179 ops/s
Iteration  11: 3236538.047 ops/s
Iteration  12: 3185584.397 ops/s
Iteration  13: 3248327.806 ops/s
Iteration  14: 3243578.560 ops/s
Iteration  15: 3245817.359 ops/s
Iteration  16: 3255171.861 ops/s
Iteration  17: 3245744.629 ops/s
Iteration  18: 3170297.740 ops/s
Iteration  19: 3231719.559 ops/s
Iteration  20: 3236295.158 ops/s
Iteration  21: 3235666.067 ops/s
Iteration  22: 3217219.855 ops/s
Iteration  23: 3225484.188 ops/s
Iteration  24: 3225659.579 ops/s
Iteration  25: 3241256.240 ops/s
Iteration  26: 3246285.226 ops/s
Iteration  27: 3244271.990 ops/s
Iteration  28: 3232951.611 ops/s
Iteration  29: 3246231.374 ops/s
Iteration  30: 3216211.344 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_withoutAll":
  3232634.123 ±(99.9%) 11971.943 ops/s [Average]
  (min, avg, max) = (3170297.740, 3232634.123, 3255171.861), stdev = 17919.042
  CI (99.9%): [3220662.180, 3244606.066] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_withoutAll  thrpt   30  3232634.123 ± 11971.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 184809.835 ops/s
# Warmup Iteration   2: 207956.113 ops/s
# Warmup Iteration   3: 284411.408 ops/s
# Warmup Iteration   4: 283073.035 ops/s
# Warmup Iteration   5: 284197.061 ops/s
# Warmup Iteration   6: 285839.915 ops/s
# Warmup Iteration   7: 284019.214 ops/s
# Warmup Iteration   8: 282852.590 ops/s
# Warmup Iteration   9: 278800.032 ops/s
# Warmup Iteration  10: 285336.865 ops/s
# Warmup Iteration  11: 238492.604 ops/s
# Warmup Iteration  12: 281185.266 ops/s
# Warmup Iteration  13: 281519.893 ops/s
# Warmup Iteration  14: 284474.349 ops/s
# Warmup Iteration  15: 285378.201 ops/s
# Warmup Iteration  16: 284908.002 ops/s
# Warmup Iteration  17: 283688.010 ops/s
# Warmup Iteration  18: 285063.630 ops/s
# Warmup Iteration  19: 285104.212 ops/s
# Warmup Iteration  20: 285663.461 ops/s
# Warmup Iteration  21: 282338.238 ops/s
# Warmup Iteration  22: 283666.119 ops/s
# Warmup Iteration  23: 285394.731 ops/s
# Warmup Iteration  24: 285304.838 ops/s
# Warmup Iteration  25: 285415.523 ops/s
# Warmup Iteration  26: 282794.998 ops/s
# Warmup Iteration  27: 284794.057 ops/s
# Warmup Iteration  28: 285000.631 ops/s
# Warmup Iteration  29: 284086.200 ops/s
# Warmup Iteration  30: 285464.589 ops/s
Iteration   1: 286303.816 ops/s
Iteration   2: 286575.595 ops/s
Iteration   3: 284469.580 ops/s
Iteration   4: 285323.495 ops/s
Iteration   5: 285360.344 ops/s
Iteration   6: 284038.362 ops/s
Iteration   7: 284895.104 ops/s
Iteration   8: 285820.838 ops/s
Iteration   9: 283870.000 ops/s
Iteration  10: 285647.933 ops/s
Iteration  11: 284699.382 ops/s
Iteration  12: 285336.366 ops/s
Iteration  13: 285670.973 ops/s
Iteration  14: 281048.500 ops/s
Iteration  15: 283770.029 ops/s
Iteration  16: 285386.493 ops/s
Iteration  17: 285464.538 ops/s
Iteration  18: 285737.554 ops/s
Iteration  19: 283016.013 ops/s
Iteration  20: 285925.271 ops/s
Iteration  21: 285858.984 ops/s
Iteration  22: 284866.047 ops/s
Iteration  23: 284849.415 ops/s
Iteration  24: 287124.379 ops/s
Iteration  25: 283923.352 ops/s
Iteration  26: 281604.575 ops/s
Iteration  27: 285843.552 ops/s
Iteration  28: 285842.411 ops/s
Iteration  29: 286864.166 ops/s
Iteration  30: 284372.766 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_zip":
  284983.661 ±(99.9%) 917.986 ops/s [Average]
  (min, avg, max) = (281048.500, 284983.661, 287124.379), stdev = 1373.998
  CI (99.9%): [284065.676, 285901.647] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_zip  thrpt   30  284983.661 ± 917.986  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 418027.599 ops/s
# Warmup Iteration   2: 707091.110 ops/s
# Warmup Iteration   3: 804607.130 ops/s
# Warmup Iteration   4: 804403.741 ops/s
# Warmup Iteration   5: 797811.356 ops/s
# Warmup Iteration   6: 676530.751 ops/s
# Warmup Iteration   7: 803541.111 ops/s
# Warmup Iteration   8: 803757.555 ops/s
# Warmup Iteration   9: 812394.857 ops/s
# Warmup Iteration  10: 808790.012 ops/s
# Warmup Iteration  11: 809777.428 ops/s
# Warmup Iteration  12: 808312.670 ops/s
# Warmup Iteration  13: 817464.756 ops/s
# Warmup Iteration  14: 808679.164 ops/s
# Warmup Iteration  15: 807332.074 ops/s
# Warmup Iteration  16: 817758.240 ops/s
# Warmup Iteration  17: 809802.126 ops/s
# Warmup Iteration  18: 809253.226 ops/s
# Warmup Iteration  19: 810326.170 ops/s
# Warmup Iteration  20: 800062.053 ops/s
# Warmup Iteration  21: 808733.470 ops/s
# Warmup Iteration  22: 807413.562 ops/s
# Warmup Iteration  23: 801869.988 ops/s
# Warmup Iteration  24: 796803.885 ops/s
# Warmup Iteration  25: 795581.088 ops/s
# Warmup Iteration  26: 806511.377 ops/s
# Warmup Iteration  27: 807092.115 ops/s
# Warmup Iteration  28: 813407.182 ops/s
# Warmup Iteration  29: 805114.004 ops/s
# Warmup Iteration  30: 806524.609 ops/s
Iteration   1: 808733.606 ops/s
Iteration   2: 813122.800 ops/s
Iteration   3: 815110.683 ops/s
Iteration   4: 813730.957 ops/s
Iteration   5: 808228.956 ops/s
Iteration   6: 813118.569 ops/s
Iteration   7: 811930.274 ops/s
Iteration   8: 801703.099 ops/s
Iteration   9: 809669.872 ops/s
Iteration  10: 815511.310 ops/s
Iteration  11: 812711.519 ops/s
Iteration  12: 812022.215 ops/s
Iteration  13: 815286.364 ops/s
Iteration  14: 813329.756 ops/s
Iteration  15: 808523.347 ops/s
Iteration  16: 807993.072 ops/s
Iteration  17: 811600.086 ops/s
Iteration  18: 808757.312 ops/s
Iteration  19: 808453.344 ops/s
Iteration  20: 806733.704 ops/s
Iteration  21: 815985.862 ops/s
Iteration  22: 791380.169 ops/s
Iteration  23: 814783.968 ops/s
Iteration  24: 817540.258 ops/s
Iteration  25: 810998.722 ops/s
Iteration  26: 795648.059 ops/s
Iteration  27: 813971.490 ops/s
Iteration  28: 808664.736 ops/s
Iteration  29: 808057.210 ops/s
Iteration  30: 810579.563 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_zipWithIndex":
  810129.363 ±(99.9%) 3786.666 ops/s [Average]
  (min, avg, max) = (791380.169, 810129.363, 817540.258), stdev = 5667.704
  CI (99.9%): [806342.697, 813916.029] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_zipWithIndex  thrpt   30  810129.363 ± 3786.666  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 319077.322 ops/s
# Warmup Iteration   2: 690229.568 ops/s
# Warmup Iteration   3: 710036.430 ops/s
# Warmup Iteration   4: 707500.245 ops/s
# Warmup Iteration   5: 607858.751 ops/s
# Warmup Iteration   6: 712627.979 ops/s
# Warmup Iteration   7: 715919.304 ops/s
# Warmup Iteration   8: 711285.611 ops/s
# Warmup Iteration   9: 712924.497 ops/s
# Warmup Iteration  10: 715133.274 ops/s
# Warmup Iteration  11: 713447.983 ops/s
# Warmup Iteration  12: 711152.773 ops/s
# Warmup Iteration  13: 708124.397 ops/s
# Warmup Iteration  14: 716120.170 ops/s
# Warmup Iteration  15: 715215.579 ops/s
# Warmup Iteration  16: 713615.495 ops/s
# Warmup Iteration  17: 715766.173 ops/s
# Warmup Iteration  18: 712315.605 ops/s
# Warmup Iteration  19: 711557.991 ops/s
# Warmup Iteration  20: 713706.443 ops/s
# Warmup Iteration  21: 708914.947 ops/s
# Warmup Iteration  22: 714080.068 ops/s
# Warmup Iteration  23: 714913.953 ops/s
# Warmup Iteration  24: 711601.269 ops/s
# Warmup Iteration  25: 709115.063 ops/s
# Warmup Iteration  26: 714621.284 ops/s
# Warmup Iteration  27: 715927.644 ops/s
# Warmup Iteration  28: 715131.973 ops/s
# Warmup Iteration  29: 716895.597 ops/s
# Warmup Iteration  30: 713850.012 ops/s
Iteration   1: 709315.708 ops/s
Iteration   2: 715252.806 ops/s
Iteration   3: 716982.302 ops/s
Iteration   4: 711752.411 ops/s
Iteration   5: 717048.877 ops/s
Iteration   6: 713251.696 ops/s
Iteration   7: 715701.921 ops/s
Iteration   8: 715182.098 ops/s
Iteration   9: 712468.465 ops/s
Iteration  10: 713142.391 ops/s
Iteration  11: 720098.599 ops/s
Iteration  12: 713244.413 ops/s
Iteration  13: 718425.824 ops/s
Iteration  14: 715341.002 ops/s
Iteration  15: 695825.964 ops/s
Iteration  16: 710443.698 ops/s
Iteration  17: 716408.274 ops/s
Iteration  18: 711724.152 ops/s
Iteration  19: 717538.830 ops/s
Iteration  20: 713151.089 ops/s
Iteration  21: 716061.232 ops/s
Iteration  22: 714983.921 ops/s
Iteration  23: 718882.048 ops/s
Iteration  24: 712342.833 ops/s
Iteration  25: 715323.996 ops/s
Iteration  26: 710638.579 ops/s
Iteration  27: 716674.642 ops/s
Iteration  28: 717212.035 ops/s
Iteration  29: 717746.825 ops/s
Iteration  30: 716633.758 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAll":
  714293.346 ±(99.9%) 2940.427 ops/s [Average]
  (min, avg, max) = (695825.964, 714293.346, 720098.599), stdev = 4401.092
  CI (99.9%): [711352.920, 717233.773] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_addAll  thrpt   30  714293.346 ± 2940.427  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 517394.003 ops/s
# Warmup Iteration   2: 1015567.486 ops/s
# Warmup Iteration   3: 1055138.372 ops/s
# Warmup Iteration   4: 1058176.716 ops/s
# Warmup Iteration   5: 877223.274 ops/s
# Warmup Iteration   6: 1048736.318 ops/s
# Warmup Iteration   7: 1057595.281 ops/s
# Warmup Iteration   8: 1052032.984 ops/s
# Warmup Iteration   9: 1062241.315 ops/s
# Warmup Iteration  10: 1046211.517 ops/s
# Warmup Iteration  11: 1051731.504 ops/s
# Warmup Iteration  12: 1053670.286 ops/s
# Warmup Iteration  13: 1059757.550 ops/s
# Warmup Iteration  14: 1060123.861 ops/s
# Warmup Iteration  15: 1058872.745 ops/s
# Warmup Iteration  16: 1060970.589 ops/s
# Warmup Iteration  17: 1055507.739 ops/s
# Warmup Iteration  18: 1052683.249 ops/s
# Warmup Iteration  19: 1050335.143 ops/s
# Warmup Iteration  20: 1043161.872 ops/s
# Warmup Iteration  21: 1053825.912 ops/s
# Warmup Iteration  22: 1051431.123 ops/s
# Warmup Iteration  23: 1049148.742 ops/s
# Warmup Iteration  24: 1040559.413 ops/s
# Warmup Iteration  25: 1050562.241 ops/s
# Warmup Iteration  26: 1041955.770 ops/s
# Warmup Iteration  27: 1039182.174 ops/s
# Warmup Iteration  28: 1053683.088 ops/s
# Warmup Iteration  29: 1051055.100 ops/s
# Warmup Iteration  30: 1055342.534 ops/s
Iteration   1: 1055297.586 ops/s
Iteration   2: 1049595.716 ops/s
Iteration   3: 1039446.516 ops/s
Iteration   4: 1052791.821 ops/s
Iteration   5: 1050470.154 ops/s
Iteration   6: 1052396.586 ops/s
Iteration   7: 1043092.012 ops/s
Iteration   8: 1046880.675 ops/s
Iteration   9: 1039058.382 ops/s
Iteration  10: 1027430.417 ops/s
Iteration  11: 1051424.204 ops/s
Iteration  12: 1045578.088 ops/s
Iteration  13: 1051098.749 ops/s
Iteration  14: 1037936.677 ops/s
Iteration  15: 1057504.086 ops/s
Iteration  16: 1052554.550 ops/s
Iteration  17: 1053159.731 ops/s
Iteration  18: 1050567.055 ops/s
Iteration  19: 1053392.249 ops/s
Iteration  20: 1053587.843 ops/s
Iteration  21: 1047544.385 ops/s
Iteration  22: 1044192.388 ops/s
Iteration  23: 1045087.306 ops/s
Iteration  24: 1052071.825 ops/s
Iteration  25: 1053074.516 ops/s
Iteration  26: 1042454.735 ops/s
Iteration  27: 1040989.934 ops/s
Iteration  28: 1026224.514 ops/s
Iteration  29: 1032893.703 ops/s
Iteration  30: 1049197.572 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAllAtIndex":
  1046566.466 ±(99.9%) 5302.071 ops/s [Average]
  (min, avg, max) = (1026224.514, 1046566.466, 1057504.086), stdev = 7935.890
  CI (99.9%): [1041264.395, 1051868.536] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1046566.466 ± 5302.071  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAllAtIndexEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAllAtIndexEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 806958.820 ops/s
# Warmup Iteration   2: 1884848.151 ops/s
# Warmup Iteration   3: 1849691.402 ops/s
# Warmup Iteration   4: 1569998.876 ops/s
# Warmup Iteration   5: 1890060.116 ops/s
# Warmup Iteration   6: 1884689.118 ops/s
# Warmup Iteration   7: 1887009.305 ops/s
# Warmup Iteration   8: 1889007.553 ops/s
# Warmup Iteration   9: 1883397.415 ops/s
# Warmup Iteration  10: 1884153.043 ops/s
# Warmup Iteration  11: 1893628.193 ops/s
# Warmup Iteration  12: 1888454.438 ops/s
# Warmup Iteration  13: 1891449.266 ops/s
# Warmup Iteration  14: 1885376.457 ops/s
# Warmup Iteration  15: 1878203.953 ops/s
# Warmup Iteration  16: 1892813.322 ops/s
# Warmup Iteration  17: 1893970.828 ops/s
# Warmup Iteration  18: 1898690.538 ops/s
# Warmup Iteration  19: 1894089.932 ops/s
# Warmup Iteration  20: 1896676.894 ops/s
# Warmup Iteration  21: 1899723.401 ops/s
# Warmup Iteration  22: 1892421.656 ops/s
# Warmup Iteration  23: 1869520.304 ops/s
# Warmup Iteration  24: 1890658.195 ops/s
# Warmup Iteration  25: 1889480.597 ops/s
# Warmup Iteration  26: 1890156.395 ops/s
# Warmup Iteration  27: 1882589.399 ops/s
# Warmup Iteration  28: 1899100.743 ops/s
# Warmup Iteration  29: 1879844.237 ops/s
# Warmup Iteration  30: 1882739.338 ops/s
Iteration   1: 1897702.826 ops/s
Iteration   2: 1890060.404 ops/s
Iteration   3: 1876970.528 ops/s
Iteration   4: 1881554.641 ops/s
Iteration   5: 1901102.978 ops/s
Iteration   6: 1901696.390 ops/s
Iteration   7: 1905148.234 ops/s
Iteration   8: 1895453.838 ops/s
Iteration   9: 1878457.101 ops/s
Iteration  10: 1889591.714 ops/s
Iteration  11: 1895203.826 ops/s
Iteration  12: 1890196.624 ops/s
Iteration  13: 1893251.392 ops/s
Iteration  14: 1898044.646 ops/s
Iteration  15: 1891064.304 ops/s
Iteration  16: 1867647.775 ops/s
Iteration  17: 1898151.943 ops/s
Iteration  18: 1905415.898 ops/s
Iteration  19: 1891892.382 ops/s
Iteration  20: 1861458.505 ops/s
Iteration  21: 1890020.069 ops/s
Iteration  22: 1890891.764 ops/s
Iteration  23: 1894622.643 ops/s
Iteration  24: 1890298.481 ops/s
Iteration  25: 1840042.739 ops/s
Iteration  26: 1892004.796 ops/s
Iteration  27: 1862116.955 ops/s
Iteration  28: 1893992.127 ops/s
Iteration  29: 1898136.725 ops/s
Iteration  30: 1897611.502 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAllAtIndexEmpty":
  1888660.125 ±(99.9%) 9661.407 ops/s [Average]
  (min, avg, max) = (1840042.739, 1888660.125, 1905415.898), stdev = 14460.740
  CI (99.9%): [1878998.718, 1898321.532] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_addAllAtIndexEmpty  thrpt   30  1888660.125 ± 9661.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAllEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAllEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1196166.465 ops/s
# Warmup Iteration   2: 1578806.745 ops/s
# Warmup Iteration   3: 1933576.175 ops/s
# Warmup Iteration   4: 1902739.684 ops/s
# Warmup Iteration   5: 1914023.717 ops/s
# Warmup Iteration   6: 1932802.452 ops/s
# Warmup Iteration   7: 1925691.402 ops/s
# Warmup Iteration   8: 1703986.609 ops/s
# Warmup Iteration   9: 1846728.953 ops/s
# Warmup Iteration  10: 1932238.141 ops/s
# Warmup Iteration  11: 1930594.421 ops/s
# Warmup Iteration  12: 1939241.192 ops/s
# Warmup Iteration  13: 1932074.233 ops/s
# Warmup Iteration  14: 1928685.637 ops/s
# Warmup Iteration  15: 1928751.875 ops/s
# Warmup Iteration  16: 1923147.189 ops/s
# Warmup Iteration  17: 1936213.185 ops/s
# Warmup Iteration  18: 1909640.552 ops/s
# Warmup Iteration  19: 1931570.578 ops/s
# Warmup Iteration  20: 1940067.021 ops/s
# Warmup Iteration  21: 1926182.928 ops/s
# Warmup Iteration  22: 1936147.403 ops/s
# Warmup Iteration  23: 1937525.134 ops/s
# Warmup Iteration  24: 1911813.160 ops/s
# Warmup Iteration  25: 1936705.066 ops/s
# Warmup Iteration  26: 1939059.139 ops/s
# Warmup Iteration  27: 1937644.861 ops/s
# Warmup Iteration  28: 1936207.980 ops/s
# Warmup Iteration  29: 1934216.957 ops/s
# Warmup Iteration  30: 1912059.104 ops/s
Iteration   1: 1937167.919 ops/s
Iteration   2: 1942173.900 ops/s
Iteration   3: 1929952.212 ops/s
Iteration   4: 1842315.388 ops/s
Iteration   5: 1928278.179 ops/s
Iteration   6: 1938915.484 ops/s
Iteration   7: 1928090.030 ops/s
Iteration   8: 1931289.456 ops/s
Iteration   9: 1928593.191 ops/s
Iteration  10: 1937919.535 ops/s
Iteration  11: 1931785.857 ops/s
Iteration  12: 1937583.032 ops/s
Iteration  13: 1935321.735 ops/s
Iteration  14: 1934765.748 ops/s
Iteration  15: 1920177.388 ops/s
Iteration  16: 1939160.695 ops/s
Iteration  17: 1923044.795 ops/s
Iteration  18: 1911699.040 ops/s
Iteration  19: 1929812.575 ops/s
Iteration  20: 1944369.076 ops/s
Iteration  21: 1905266.198 ops/s
Iteration  22: 1936894.316 ops/s
Iteration  23: 1933570.543 ops/s
Iteration  24: 1931207.329 ops/s
Iteration  25: 1920604.827 ops/s
Iteration  26: 1935125.297 ops/s
Iteration  27: 1927146.347 ops/s
Iteration  28: 1914910.676 ops/s
Iteration  29: 1936725.342 ops/s
Iteration  30: 1936200.294 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAllEmpty":
  1927668.880 ±(99.9%) 12323.819 ops/s [Average]
  (min, avg, max) = (1842315.388, 1927668.880, 1944369.076), stdev = 18445.714
  CI (99.9%): [1915345.061, 1939992.699] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_addAllEmpty  thrpt   30  1927668.880 ± 12323.819  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 213147.805 ops/s
# Warmup Iteration   2: 417290.593 ops/s
# Warmup Iteration   3: 456269.643 ops/s
# Warmup Iteration   4: 450552.815 ops/s
# Warmup Iteration   5: 383359.146 ops/s
# Warmup Iteration   6: 460390.251 ops/s
# Warmup Iteration   7: 450482.119 ops/s
# Warmup Iteration   8: 457986.207 ops/s
# Warmup Iteration   9: 455682.588 ops/s
# Warmup Iteration  10: 460147.603 ops/s
# Warmup Iteration  11: 457627.632 ops/s
# Warmup Iteration  12: 458381.731 ops/s
# Warmup Iteration  13: 456140.445 ops/s
# Warmup Iteration  14: 459224.053 ops/s
# Warmup Iteration  15: 458565.787 ops/s
# Warmup Iteration  16: 460659.970 ops/s
# Warmup Iteration  17: 457367.185 ops/s
# Warmup Iteration  18: 455249.846 ops/s
# Warmup Iteration  19: 456259.026 ops/s
# Warmup Iteration  20: 458081.616 ops/s
# Warmup Iteration  21: 457980.817 ops/s
# Warmup Iteration  22: 459218.924 ops/s
# Warmup Iteration  23: 459490.513 ops/s
# Warmup Iteration  24: 453990.928 ops/s
# Warmup Iteration  25: 455421.245 ops/s
# Warmup Iteration  26: 455447.827 ops/s
# Warmup Iteration  27: 458591.424 ops/s
# Warmup Iteration  28: 459015.781 ops/s
# Warmup Iteration  29: 459380.972 ops/s
# Warmup Iteration  30: 454970.026 ops/s
Iteration   1: 458954.177 ops/s
Iteration   2: 459796.611 ops/s
Iteration   3: 456779.474 ops/s
Iteration   4: 459630.852 ops/s
Iteration   5: 458116.675 ops/s
Iteration   6: 458973.026 ops/s
Iteration   7: 455590.723 ops/s
Iteration   8: 457250.801 ops/s
Iteration   9: 458282.967 ops/s
Iteration  10: 457821.173 ops/s
Iteration  11: 459476.864 ops/s
Iteration  12: 459307.130 ops/s
Iteration  13: 457363.065 ops/s
Iteration  14: 457524.943 ops/s
Iteration  15: 457599.902 ops/s
Iteration  16: 459597.116 ops/s
Iteration  17: 454808.743 ops/s
Iteration  18: 459643.548 ops/s
Iteration  19: 459088.935 ops/s
Iteration  20: 459750.376 ops/s
Iteration  21: 459202.506 ops/s
Iteration  22: 458915.416 ops/s
Iteration  23: 457972.183 ops/s
Iteration  24: 459247.326 ops/s
Iteration  25: 459052.133 ops/s
Iteration  26: 450614.964 ops/s
Iteration  27: 458184.480 ops/s
Iteration  28: 457219.209 ops/s
Iteration  29: 451654.627 ops/s
Iteration  30: 460236.047 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAllIterable":
  457921.866 ±(99.9%) 1495.508 ops/s [Average]
  (min, avg, max) = (450614.964, 457921.866, 460236.047), stdev = 2238.406
  CI (99.9%): [456426.358, 459417.374] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_addAllIterable  thrpt   30  457921.866 ± 1495.508  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 216719.712 ops/s
# Warmup Iteration   2: 360890.707 ops/s
# Warmup Iteration   3: 412059.129 ops/s
# Warmup Iteration   4: 412500.432 ops/s
# Warmup Iteration   5: 414118.650 ops/s
# Warmup Iteration   6: 345806.965 ops/s
# Warmup Iteration   7: 414705.779 ops/s
# Warmup Iteration   8: 412430.739 ops/s
# Warmup Iteration   9: 415479.091 ops/s
# Warmup Iteration  10: 411104.363 ops/s
# Warmup Iteration  11: 416441.410 ops/s
# Warmup Iteration  12: 414830.697 ops/s
# Warmup Iteration  13: 414633.132 ops/s
# Warmup Iteration  14: 414493.914 ops/s
# Warmup Iteration  15: 417044.957 ops/s
# Warmup Iteration  16: 414321.224 ops/s
# Warmup Iteration  17: 423785.561 ops/s
# Warmup Iteration  18: 424142.051 ops/s
# Warmup Iteration  19: 420709.815 ops/s
# Warmup Iteration  20: 423891.149 ops/s
# Warmup Iteration  21: 424766.026 ops/s
# Warmup Iteration  22: 418815.094 ops/s
# Warmup Iteration  23: 425045.954 ops/s
# Warmup Iteration  24: 425332.559 ops/s
# Warmup Iteration  25: 424581.103 ops/s
# Warmup Iteration  26: 423615.656 ops/s
# Warmup Iteration  27: 419935.027 ops/s
# Warmup Iteration  28: 422465.601 ops/s
# Warmup Iteration  29: 424748.641 ops/s
# Warmup Iteration  30: 421666.923 ops/s
Iteration   1: 427013.371 ops/s
Iteration   2: 422555.486 ops/s
Iteration   3: 423002.681 ops/s
Iteration   4: 426773.374 ops/s
Iteration   5: 423735.276 ops/s
Iteration   6: 419127.325 ops/s
Iteration   7: 424864.298 ops/s
Iteration   8: 426048.001 ops/s
Iteration   9: 423826.268 ops/s
Iteration  10: 423464.613 ops/s
Iteration  11: 423416.125 ops/s
Iteration  12: 424029.825 ops/s
Iteration  13: 425798.526 ops/s
Iteration  14: 423951.737 ops/s
Iteration  15: 426107.747 ops/s
Iteration  16: 424969.972 ops/s
Iteration  17: 425333.334 ops/s
Iteration  18: 425540.706 ops/s
Iteration  19: 421216.701 ops/s
Iteration  20: 425922.737 ops/s
Iteration  21: 422134.490 ops/s
Iteration  22: 425854.436 ops/s
Iteration  23: 417919.235 ops/s
Iteration  24: 424787.307 ops/s
Iteration  25: 426928.227 ops/s
Iteration  26: 423694.912 ops/s
Iteration  27: 423765.701 ops/s
Iteration  28: 424563.645 ops/s
Iteration  29: 425738.111 ops/s
Iteration  30: 424278.136 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_addAtIndex":
  424212.077 ±(99.9%) 1407.943 ops/s [Average]
  (min, avg, max) = (417919.235, 424212.077, 427013.371), stdev = 2107.342
  CI (99.9%): [422804.134, 425620.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_addAtIndex  thrpt   30  424212.077 ± 1407.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1166958.669 ops/s
# Warmup Iteration   2: 2441436.448 ops/s
# Warmup Iteration   3: 2579966.923 ops/s
# Warmup Iteration   4: 2587607.279 ops/s
# Warmup Iteration   5: 2139038.275 ops/s
# Warmup Iteration   6: 2607780.499 ops/s
# Warmup Iteration   7: 2668918.372 ops/s
# Warmup Iteration   8: 2638407.387 ops/s
# Warmup Iteration   9: 2620607.061 ops/s
# Warmup Iteration  10: 2642150.324 ops/s
# Warmup Iteration  11: 2666140.377 ops/s
# Warmup Iteration  12: 2649330.103 ops/s
# Warmup Iteration  13: 2658731.713 ops/s
# Warmup Iteration  14: 2652708.519 ops/s
# Warmup Iteration  15: 2620281.003 ops/s
# Warmup Iteration  16: 2599719.624 ops/s
# Warmup Iteration  17: 2639781.472 ops/s
# Warmup Iteration  18: 2619349.642 ops/s
# Warmup Iteration  19: 2624130.115 ops/s
# Warmup Iteration  20: 2608639.942 ops/s
# Warmup Iteration  21: 2621263.660 ops/s
# Warmup Iteration  22: 2626284.467 ops/s
# Warmup Iteration  23: 2619913.271 ops/s
# Warmup Iteration  24: 2606364.362 ops/s
# Warmup Iteration  25: 2626239.238 ops/s
# Warmup Iteration  26: 2634767.882 ops/s
# Warmup Iteration  27: 2623153.826 ops/s
# Warmup Iteration  28: 2609860.344 ops/s
# Warmup Iteration  29: 2627137.275 ops/s
# Warmup Iteration  30: 2612096.458 ops/s
Iteration   1: 2616398.909 ops/s
Iteration   2: 2581842.448 ops/s
Iteration   3: 2616338.800 ops/s
Iteration   4: 2632124.252 ops/s
Iteration   5: 2668078.469 ops/s
Iteration   6: 2580487.937 ops/s
Iteration   7: 2606290.322 ops/s
Iteration   8: 2576993.855 ops/s
Iteration   9: 2653912.206 ops/s
Iteration  10: 2637648.466 ops/s
Iteration  11: 2623317.229 ops/s
Iteration  12: 2628239.693 ops/s
Iteration  13: 2611198.349 ops/s
Iteration  14: 2638147.949 ops/s
Iteration  15: 2664329.070 ops/s
Iteration  16: 2618077.309 ops/s
Iteration  17: 2635593.168 ops/s
Iteration  18: 2650799.701 ops/s
Iteration  19: 2611120.114 ops/s
Iteration  20: 2620498.543 ops/s
Iteration  21: 2647722.310 ops/s
Iteration  22: 2581135.102 ops/s
Iteration  23: 2620705.719 ops/s
Iteration  24: 2609828.643 ops/s
Iteration  25: 2618011.444 ops/s
Iteration  26: 2621226.212 ops/s
Iteration  27: 2630140.157 ops/s
Iteration  28: 2612221.954 ops/s
Iteration  29: 2677317.954 ops/s
Iteration  30: 2686475.400 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_aggregateByMutating":
  2625874.056 ±(99.9%) 18379.859 ops/s [Average]
  (min, avg, max) = (2576993.855, 2625874.056, 2686475.400), stdev = 27510.110
  CI (99.9%): [2607494.197, 2644253.915] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  2625874.056 ± 18379.859  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1035977.365 ops/s
# Warmup Iteration   2: 2446805.557 ops/s
# Warmup Iteration   3: 2535192.891 ops/s
# Warmup Iteration   4: 2053637.302 ops/s
# Warmup Iteration   5: 2561347.508 ops/s
# Warmup Iteration   6: 2523463.055 ops/s
# Warmup Iteration   7: 2543732.116 ops/s
# Warmup Iteration   8: 2517530.510 ops/s
# Warmup Iteration   9: 2543447.209 ops/s
# Warmup Iteration  10: 2539958.278 ops/s
# Warmup Iteration  11: 2522217.811 ops/s
# Warmup Iteration  12: 2537660.250 ops/s
# Warmup Iteration  13: 2519599.107 ops/s
# Warmup Iteration  14: 2526348.083 ops/s
# Warmup Iteration  15: 2542581.993 ops/s
# Warmup Iteration  16: 2531545.159 ops/s
# Warmup Iteration  17: 2483863.240 ops/s
# Warmup Iteration  18: 2514384.295 ops/s
# Warmup Iteration  19: 2544402.002 ops/s
# Warmup Iteration  20: 2545994.567 ops/s
# Warmup Iteration  21: 2536583.836 ops/s
# Warmup Iteration  22: 2541007.764 ops/s
# Warmup Iteration  23: 2524981.086 ops/s
# Warmup Iteration  24: 2505956.193 ops/s
# Warmup Iteration  25: 2532675.545 ops/s
# Warmup Iteration  26: 2505118.385 ops/s
# Warmup Iteration  27: 2535470.955 ops/s
# Warmup Iteration  28: 2526433.200 ops/s
# Warmup Iteration  29: 2529846.699 ops/s
# Warmup Iteration  30: 2546427.221 ops/s
Iteration   1: 2570386.768 ops/s
Iteration   2: 2534244.671 ops/s
Iteration   3: 2564014.852 ops/s
Iteration   4: 2556357.280 ops/s
Iteration   5: 2543618.584 ops/s
Iteration   6: 2530991.425 ops/s
Iteration   7: 2549516.769 ops/s
Iteration   8: 2575469.869 ops/s
Iteration   9: 2523340.936 ops/s
Iteration  10: 2553171.867 ops/s
Iteration  11: 2545174.915 ops/s
Iteration  12: 2577935.461 ops/s
Iteration  13: 2527544.844 ops/s
Iteration  14: 2547263.395 ops/s
Iteration  15: 2540382.301 ops/s
Iteration  16: 2554943.464 ops/s
Iteration  17: 2539954.667 ops/s
Iteration  18: 2534287.670 ops/s
Iteration  19: 2546296.880 ops/s
Iteration  20: 2540007.883 ops/s
Iteration  21: 2563203.182 ops/s
Iteration  22: 2552401.308 ops/s
Iteration  23: 2536240.370 ops/s
Iteration  24: 2552679.057 ops/s
Iteration  25: 2583637.004 ops/s
Iteration  26: 2572739.447 ops/s
Iteration  27: 2536363.252 ops/s
Iteration  28: 2532371.426 ops/s
Iteration  29: 2532529.796 ops/s
Iteration  30: 2536802.777 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_aggregateByNonMutating":
  2548462.404 ±(99.9%) 10741.818 ops/s [Average]
  (min, avg, max) = (2523340.936, 2548462.404, 2583637.004), stdev = 16077.849
  CI (99.9%): [2537720.585, 2559204.222] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  2548462.404 ± 10741.818  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3251170.923 ops/s
# Warmup Iteration   2: 7553021.268 ops/s
# Warmup Iteration   3: 7557910.286 ops/s
# Warmup Iteration   4: 6351465.319 ops/s
# Warmup Iteration   5: 7556533.769 ops/s
# Warmup Iteration   6: 7555095.101 ops/s
# Warmup Iteration   7: 7578815.059 ops/s
# Warmup Iteration   8: 7546147.432 ops/s
# Warmup Iteration   9: 7565421.155 ops/s
# Warmup Iteration  10: 7586782.566 ops/s
# Warmup Iteration  11: 7558974.997 ops/s
# Warmup Iteration  12: 7587614.072 ops/s
# Warmup Iteration  13: 7542689.001 ops/s
# Warmup Iteration  14: 7581600.525 ops/s
# Warmup Iteration  15: 7550380.428 ops/s
# Warmup Iteration  16: 7609654.268 ops/s
# Warmup Iteration  17: 7621653.137 ops/s
# Warmup Iteration  18: 7569621.416 ops/s
# Warmup Iteration  19: 7622598.048 ops/s
# Warmup Iteration  20: 7595572.676 ops/s
# Warmup Iteration  21: 7578835.842 ops/s
# Warmup Iteration  22: 7630924.773 ops/s
# Warmup Iteration  23: 7616752.977 ops/s
# Warmup Iteration  24: 7522321.480 ops/s
# Warmup Iteration  25: 7640413.237 ops/s
# Warmup Iteration  26: 7646791.614 ops/s
# Warmup Iteration  27: 7610151.178 ops/s
# Warmup Iteration  28: 7614208.422 ops/s
# Warmup Iteration  29: 7606685.480 ops/s
# Warmup Iteration  30: 7642372.050 ops/s
Iteration   1: 7659996.160 ops/s
Iteration   2: 7614508.079 ops/s
Iteration   3: 7578385.349 ops/s
Iteration   4: 7680632.401 ops/s
Iteration   5: 7636283.206 ops/s
Iteration   6: 7633870.156 ops/s
Iteration   7: 7602587.513 ops/s
Iteration   8: 7623834.097 ops/s
Iteration   9: 7654063.766 ops/s
Iteration  10: 7644060.817 ops/s
Iteration  11: 7651019.604 ops/s
Iteration  12: 7589204.871 ops/s
Iteration  13: 7651984.570 ops/s
Iteration  14: 7499728.606 ops/s
Iteration  15: 7670433.372 ops/s
Iteration  16: 7643157.073 ops/s
Iteration  17: 7661610.384 ops/s
Iteration  18: 7636823.629 ops/s
Iteration  19: 7605120.161 ops/s
Iteration  20: 7615537.430 ops/s
Iteration  21: 7690517.332 ops/s
Iteration  22: 7626813.804 ops/s
Iteration  23: 7615525.481 ops/s
Iteration  24: 7617820.950 ops/s
Iteration  25: 7627876.654 ops/s
Iteration  26: 7623473.900 ops/s
Iteration  27: 7625257.407 ops/s
Iteration  28: 7639517.120 ops/s
Iteration  29: 7669455.919 ops/s
Iteration  30: 7611710.710 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_allSatisfy":
  7630027.017 ±(99.9%) 23964.829 ops/s [Average]
  (min, avg, max) = (7499728.606, 7630027.017, 7690517.332), stdev = 35869.431
  CI (99.9%): [7606062.188, 7653991.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_allSatisfy  thrpt   30  7630027.017 ± 23964.829  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3299425.808 ops/s
# Warmup Iteration   2: 7360734.997 ops/s
# Warmup Iteration   3: 7317881.604 ops/s
# Warmup Iteration   4: 5999403.845 ops/s
# Warmup Iteration   5: 7304671.245 ops/s
# Warmup Iteration   6: 7314707.911 ops/s
# Warmup Iteration   7: 7291600.649 ops/s
# Warmup Iteration   8: 7284639.485 ops/s
# Warmup Iteration   9: 7281215.778 ops/s
# Warmup Iteration  10: 7308823.166 ops/s
# Warmup Iteration  11: 7287966.666 ops/s
# Warmup Iteration  12: 7317262.556 ops/s
# Warmup Iteration  13: 7275595.950 ops/s
# Warmup Iteration  14: 7295761.855 ops/s
# Warmup Iteration  15: 7302119.286 ops/s
# Warmup Iteration  16: 7268521.673 ops/s
# Warmup Iteration  17: 7410590.672 ops/s
# Warmup Iteration  18: 7393741.892 ops/s
# Warmup Iteration  19: 7415541.012 ops/s
# Warmup Iteration  20: 7345721.933 ops/s
# Warmup Iteration  21: 7426757.148 ops/s
# Warmup Iteration  22: 7395503.698 ops/s
# Warmup Iteration  23: 7418886.482 ops/s
# Warmup Iteration  24: 7375799.813 ops/s
# Warmup Iteration  25: 7427160.606 ops/s
# Warmup Iteration  26: 7328085.569 ops/s
# Warmup Iteration  27: 7400502.191 ops/s
# Warmup Iteration  28: 7375366.097 ops/s
# Warmup Iteration  29: 7365160.662 ops/s
# Warmup Iteration  30: 7409049.603 ops/s
Iteration   1: 7423294.169 ops/s
Iteration   2: 7404846.313 ops/s
Iteration   3: 7309721.041 ops/s
Iteration   4: 7381518.724 ops/s
Iteration   5: 7413563.798 ops/s
Iteration   6: 7394971.390 ops/s
Iteration   7: 7425218.874 ops/s
Iteration   8: 7438158.235 ops/s
Iteration   9: 7428137.810 ops/s
Iteration  10: 7416735.457 ops/s
Iteration  11: 7391482.180 ops/s
Iteration  12: 7419948.572 ops/s
Iteration  13: 7405852.819 ops/s
Iteration  14: 7275568.128 ops/s
Iteration  15: 7394728.518 ops/s
Iteration  16: 7348331.608 ops/s
Iteration  17: 7406665.598 ops/s
Iteration  18: 7407416.798 ops/s
Iteration  19: 7372304.343 ops/s
Iteration  20: 7455985.187 ops/s
Iteration  21: 7416681.914 ops/s
Iteration  22: 7307178.323 ops/s
Iteration  23: 7401318.124 ops/s
Iteration  24: 7365442.014 ops/s
Iteration  25: 7299889.968 ops/s
Iteration  26: 7406229.553 ops/s
Iteration  27: 7378357.488 ops/s
Iteration  28: 7417686.553 ops/s
Iteration  29: 7391829.067 ops/s
Iteration  30: 7419416.425 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_allSatisfyWith":
  7390615.966 ±(99.9%) 28790.535 ops/s [Average]
  (min, avg, max) = (7275568.128, 7390615.966, 7455985.187), stdev = 43092.321
  CI (99.9%): [7361825.431, 7419406.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  7390615.966 ± 28790.535  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3352466.157 ops/s
# Warmup Iteration   2: 7519958.543 ops/s
# Warmup Iteration   3: 7550259.486 ops/s
# Warmup Iteration   4: 6292443.085 ops/s
# Warmup Iteration   5: 7645193.554 ops/s
# Warmup Iteration   6: 7589159.037 ops/s
# Warmup Iteration   7: 7578139.351 ops/s
# Warmup Iteration   8: 7633324.393 ops/s
# Warmup Iteration   9: 7594504.154 ops/s
# Warmup Iteration  10: 7621544.031 ops/s
# Warmup Iteration  11: 7596684.203 ops/s
# Warmup Iteration  12: 7640987.840 ops/s
# Warmup Iteration  13: 7634482.234 ops/s
# Warmup Iteration  14: 7662197.694 ops/s
# Warmup Iteration  15: 7587605.263 ops/s
# Warmup Iteration  16: 7668421.407 ops/s
# Warmup Iteration  17: 7612296.031 ops/s
# Warmup Iteration  18: 7616651.642 ops/s
# Warmup Iteration  19: 7681680.157 ops/s
# Warmup Iteration  20: 7665612.015 ops/s
# Warmup Iteration  21: 7701652.819 ops/s
# Warmup Iteration  22: 7694191.275 ops/s
# Warmup Iteration  23: 7610496.221 ops/s
# Warmup Iteration  24: 7695428.617 ops/s
# Warmup Iteration  25: 7694266.224 ops/s
# Warmup Iteration  26: 7698723.859 ops/s
# Warmup Iteration  27: 7691547.870 ops/s
# Warmup Iteration  28: 7633495.851 ops/s
# Warmup Iteration  29: 7694679.964 ops/s
# Warmup Iteration  30: 7672626.185 ops/s
Iteration   1: 7683545.317 ops/s
Iteration   2: 7689745.710 ops/s
Iteration   3: 7705675.047 ops/s
Iteration   4: 7662713.170 ops/s
Iteration   5: 7702076.354 ops/s
Iteration   6: 7721306.966 ops/s
Iteration   7: 7686423.298 ops/s
Iteration   8: 7690019.221 ops/s
Iteration   9: 7703122.923 ops/s
Iteration  10: 7630886.616 ops/s
Iteration  11: 7695322.481 ops/s
Iteration  12: 7673652.773 ops/s
Iteration  13: 7650995.918 ops/s
Iteration  14: 7666914.316 ops/s
Iteration  15: 7736534.309 ops/s
Iteration  16: 7613531.536 ops/s
Iteration  17: 7696930.759 ops/s
Iteration  18: 7676646.049 ops/s
Iteration  19: 7672970.811 ops/s
Iteration  20: 7710443.299 ops/s
Iteration  21: 7575135.894 ops/s
Iteration  22: 7669021.219 ops/s
Iteration  23: 7644226.405 ops/s
Iteration  24: 7670617.877 ops/s
Iteration  25: 7631716.494 ops/s
Iteration  26: 7677033.261 ops/s
Iteration  27: 7671881.200 ops/s
Iteration  28: 7709109.301 ops/s
Iteration  29: 7706155.976 ops/s
Iteration  30: 7671135.543 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_anySatisfy":
  7676516.335 ±(99.9%) 22421.299 ops/s [Average]
  (min, avg, max) = (7575135.894, 7676516.335, 7736534.309), stdev = 33559.147
  CI (99.9%): [7654095.036, 7698937.634] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_anySatisfy  thrpt   30  7676516.335 ± 22421.299  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3330733.169 ops/s
# Warmup Iteration   2: 7430632.388 ops/s
# Warmup Iteration   3: 7434876.493 ops/s
# Warmup Iteration   4: 6297823.661 ops/s
# Warmup Iteration   5: 7451057.478 ops/s
# Warmup Iteration   6: 7497108.579 ops/s
# Warmup Iteration   7: 7466094.283 ops/s
# Warmup Iteration   8: 7485874.139 ops/s
# Warmup Iteration   9: 7458110.444 ops/s
# Warmup Iteration  10: 7469527.036 ops/s
# Warmup Iteration  11: 7488695.652 ops/s
# Warmup Iteration  12: 7506572.765 ops/s
# Warmup Iteration  13: 7412024.183 ops/s
# Warmup Iteration  14: 7270493.915 ops/s
# Warmup Iteration  15: 7477874.686 ops/s
# Warmup Iteration  16: 7440236.044 ops/s
# Warmup Iteration  17: 7550514.972 ops/s
# Warmup Iteration  18: 7533994.310 ops/s
# Warmup Iteration  19: 7506896.639 ops/s
# Warmup Iteration  20: 7510527.019 ops/s
# Warmup Iteration  21: 7487645.855 ops/s
# Warmup Iteration  22: 7464949.802 ops/s
# Warmup Iteration  23: 7523062.059 ops/s
# Warmup Iteration  24: 7540740.094 ops/s
# Warmup Iteration  25: 7472810.071 ops/s
# Warmup Iteration  26: 7497115.739 ops/s
# Warmup Iteration  27: 7529820.806 ops/s
# Warmup Iteration  28: 7493903.966 ops/s
# Warmup Iteration  29: 7559836.444 ops/s
# Warmup Iteration  30: 7541841.327 ops/s
Iteration   1: 7548051.122 ops/s
Iteration   2: 7532551.628 ops/s
Iteration   3: 7552947.904 ops/s
Iteration   4: 7547480.032 ops/s
Iteration   5: 7536505.297 ops/s
Iteration   6: 7516771.019 ops/s
Iteration   7: 7558662.222 ops/s
Iteration   8: 7541365.109 ops/s
Iteration   9: 7531356.805 ops/s
Iteration  10: 7544329.584 ops/s
Iteration  11: 7517991.348 ops/s
Iteration  12: 7516601.079 ops/s
Iteration  13: 7571977.038 ops/s
Iteration  14: 7475811.747 ops/s
Iteration  15: 7507706.298 ops/s
Iteration  16: 7549000.379 ops/s
Iteration  17: 7473143.100 ops/s
Iteration  18: 7534932.242 ops/s
Iteration  19: 7514038.535 ops/s
Iteration  20: 7537148.333 ops/s
Iteration  21: 7526354.008 ops/s
Iteration  22: 7560417.222 ops/s
Iteration  23: 7510154.870 ops/s
Iteration  24: 7424848.465 ops/s
Iteration  25: 7538788.183 ops/s
Iteration  26: 7487206.055 ops/s
Iteration  27: 7482954.612 ops/s
Iteration  28: 7537371.224 ops/s
Iteration  29: 7525783.860 ops/s
Iteration  30: 7529168.332 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_anySatisfyWith":
  7524380.588 ±(99.9%) 20618.495 ops/s [Average]
  (min, avg, max) = (7424848.465, 7524380.588, 7571977.038), stdev = 30860.795
  CI (99.9%): [7503762.093, 7544999.083] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  7524380.588 ± 20618.495  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2189402.617 ops/s
# Warmup Iteration   2: 5179638.087 ops/s
# Warmup Iteration   3: 5226216.278 ops/s
# Warmup Iteration   4: 4300497.150 ops/s
# Warmup Iteration   5: 5157039.987 ops/s
# Warmup Iteration   6: 5186085.532 ops/s
# Warmup Iteration   7: 5217226.023 ops/s
# Warmup Iteration   8: 5179356.783 ops/s
# Warmup Iteration   9: 5222734.989 ops/s
# Warmup Iteration  10: 5207729.362 ops/s
# Warmup Iteration  11: 5207828.094 ops/s
# Warmup Iteration  12: 5209168.587 ops/s
# Warmup Iteration  13: 5193577.034 ops/s
# Warmup Iteration  14: 5208816.187 ops/s
# Warmup Iteration  15: 5208535.293 ops/s
# Warmup Iteration  16: 5169926.645 ops/s
# Warmup Iteration  17: 5209056.360 ops/s
# Warmup Iteration  18: 5141993.226 ops/s
# Warmup Iteration  19: 5183577.961 ops/s
# Warmup Iteration  20: 5183567.501 ops/s
# Warmup Iteration  21: 5155235.152 ops/s
# Warmup Iteration  22: 5197162.928 ops/s
# Warmup Iteration  23: 5213741.730 ops/s
# Warmup Iteration  24: 5131862.318 ops/s
# Warmup Iteration  25: 5153914.797 ops/s
# Warmup Iteration  26: 5199470.879 ops/s
# Warmup Iteration  27: 5177509.361 ops/s
# Warmup Iteration  28: 5150636.891 ops/s
# Warmup Iteration  29: 5158801.345 ops/s
# Warmup Iteration  30: 5163617.810 ops/s
Iteration   1: 5178468.664 ops/s
Iteration   2: 5216556.197 ops/s
Iteration   3: 5141196.080 ops/s
Iteration   4: 5186896.713 ops/s
Iteration   5: 5218136.947 ops/s
Iteration   6: 5202733.340 ops/s
Iteration   7: 5186304.593 ops/s
Iteration   8: 5125308.472 ops/s
Iteration   9: 5206042.158 ops/s
Iteration  10: 5224577.515 ops/s
Iteration  11: 5236824.441 ops/s
Iteration  12: 5158239.452 ops/s
Iteration  13: 5212929.100 ops/s
Iteration  14: 5218951.471 ops/s
Iteration  15: 5236181.323 ops/s
Iteration  16: 5173470.567 ops/s
Iteration  17: 5211348.021 ops/s
Iteration  18: 5189447.598 ops/s
Iteration  19: 5218483.335 ops/s
Iteration  20: 5193319.096 ops/s
Iteration  21: 5190494.773 ops/s
Iteration  22: 5218840.766 ops/s
Iteration  23: 5061984.429 ops/s
Iteration  24: 5204079.078 ops/s
Iteration  25: 5184143.132 ops/s
Iteration  26: 5215448.030 ops/s
Iteration  27: 5155004.546 ops/s
Iteration  28: 5172700.591 ops/s
Iteration  29: 5198604.779 ops/s
Iteration  30: 5179708.322 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_appendString":
  5190547.451 ±(99.9%) 24146.478 ops/s [Average]
  (min, avg, max) = (5061984.429, 5190547.451, 5236824.441), stdev = 36141.314
  CI (99.9%): [5166400.973, 5214693.929] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_appendString  thrpt   30  5190547.451 ± 24146.478  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 105836.350 ops/s
# Warmup Iteration   2: 113106.160 ops/s
# Warmup Iteration   3: 127143.670 ops/s
# Warmup Iteration   4: 139619.800 ops/s
# Warmup Iteration   5: 139295.314 ops/s
# Warmup Iteration   6: 140036.532 ops/s
# Warmup Iteration   7: 137566.957 ops/s
# Warmup Iteration   8: 139461.875 ops/s
# Warmup Iteration   9: 138690.852 ops/s
# Warmup Iteration  10: 138149.980 ops/s
# Warmup Iteration  11: 139259.894 ops/s
# Warmup Iteration  12: 137632.929 ops/s
# Warmup Iteration  13: 139912.578 ops/s
# Warmup Iteration  14: 137823.471 ops/s
# Warmup Iteration  15: 118444.340 ops/s
# Warmup Iteration  16: 138509.353 ops/s
# Warmup Iteration  17: 146970.230 ops/s
# Warmup Iteration  18: 146517.969 ops/s
# Warmup Iteration  19: 146587.066 ops/s
# Warmup Iteration  20: 145013.967 ops/s
# Warmup Iteration  21: 145552.815 ops/s
# Warmup Iteration  22: 145925.579 ops/s
# Warmup Iteration  23: 146369.152 ops/s
# Warmup Iteration  24: 146439.263 ops/s
# Warmup Iteration  25: 145726.524 ops/s
# Warmup Iteration  26: 147454.420 ops/s
# Warmup Iteration  27: 146433.633 ops/s
# Warmup Iteration  28: 146173.136 ops/s
# Warmup Iteration  29: 147036.070 ops/s
# Warmup Iteration  30: 145861.840 ops/s
Iteration   1: 146715.458 ops/s
Iteration   2: 147753.327 ops/s
Iteration   3: 147207.267 ops/s
Iteration   4: 146447.673 ops/s
Iteration   5: 146953.779 ops/s
Iteration   6: 147241.699 ops/s
Iteration   7: 144923.533 ops/s
Iteration   8: 147173.078 ops/s
Iteration   9: 146821.237 ops/s
Iteration  10: 147045.980 ops/s
Iteration  11: 148090.377 ops/s
Iteration  12: 147405.909 ops/s
Iteration  13: 147323.420 ops/s
Iteration  14: 146455.059 ops/s
Iteration  15: 142069.016 ops/s
Iteration  16: 146822.925 ops/s
Iteration  17: 146843.175 ops/s
Iteration  18: 146630.081 ops/s
Iteration  19: 146465.504 ops/s
Iteration  20: 146566.517 ops/s
Iteration  21: 146620.846 ops/s
Iteration  22: 147203.599 ops/s
Iteration  23: 146784.451 ops/s
Iteration  24: 147547.845 ops/s
Iteration  25: 146710.965 ops/s
Iteration  26: 146743.861 ops/s
Iteration  27: 147017.295 ops/s
Iteration  28: 147142.661 ops/s
Iteration  29: 145014.666 ops/s
Iteration  30: 144222.803 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_appendStringThrows":
  146598.800 ±(99.9%) 781.673 ops/s [Average]
  (min, avg, max) = (142069.016, 146598.800, 148090.377), stdev = 1169.971
  CI (99.9%): [145817.127, 147380.473] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_appendStringThrows  thrpt   30  146598.800 ± 781.673  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2786937.234 ops/s
# Warmup Iteration   2: 6116151.018 ops/s
# Warmup Iteration   3: 6041845.025 ops/s
# Warmup Iteration   4: 4988411.801 ops/s
# Warmup Iteration   5: 5897401.246 ops/s
# Warmup Iteration   6: 5966476.093 ops/s
# Warmup Iteration   7: 5936708.903 ops/s
# Warmup Iteration   8: 5914811.124 ops/s
# Warmup Iteration   9: 5919302.234 ops/s
# Warmup Iteration  10: 5910931.787 ops/s
# Warmup Iteration  11: 5915134.979 ops/s
# Warmup Iteration  12: 5940966.846 ops/s
# Warmup Iteration  13: 5936908.258 ops/s
# Warmup Iteration  14: 5935598.158 ops/s
# Warmup Iteration  15: 5979002.007 ops/s
# Warmup Iteration  16: 6041347.511 ops/s
# Warmup Iteration  17: 5899064.256 ops/s
# Warmup Iteration  18: 5880466.321 ops/s
# Warmup Iteration  19: 5908457.160 ops/s
# Warmup Iteration  20: 5873365.279 ops/s
# Warmup Iteration  21: 5883464.413 ops/s
# Warmup Iteration  22: 5907491.608 ops/s
# Warmup Iteration  23: 5892821.947 ops/s
# Warmup Iteration  24: 5848948.608 ops/s
# Warmup Iteration  25: 5903308.208 ops/s
# Warmup Iteration  26: 5883073.402 ops/s
# Warmup Iteration  27: 5917762.198 ops/s
# Warmup Iteration  28: 5852163.436 ops/s
# Warmup Iteration  29: 5895869.640 ops/s
# Warmup Iteration  30: 5870681.591 ops/s
Iteration   1: 5869355.194 ops/s
Iteration   2: 5842736.874 ops/s
Iteration   3: 5910190.950 ops/s
Iteration   4: 5896253.352 ops/s
Iteration   5: 5809991.043 ops/s
Iteration   6: 5891938.761 ops/s
Iteration   7: 5892655.981 ops/s
Iteration   8: 5890934.442 ops/s
Iteration   9: 5894832.078 ops/s
Iteration  10: 5884610.042 ops/s
Iteration  11: 5933218.559 ops/s
Iteration  12: 5877638.859 ops/s
Iteration  13: 5860856.229 ops/s
Iteration  14: 5835600.293 ops/s
Iteration  15: 5899144.230 ops/s
Iteration  16: 5882109.692 ops/s
Iteration  17: 5892439.836 ops/s
Iteration  18: 5885811.680 ops/s
Iteration  19: 5946662.612 ops/s
Iteration  20: 5919575.791 ops/s
Iteration  21: 5914445.278 ops/s
Iteration  22: 5901026.908 ops/s
Iteration  23: 5921612.071 ops/s
Iteration  24: 5906411.495 ops/s
Iteration  25: 5870009.165 ops/s
Iteration  26: 5878495.356 ops/s
Iteration  27: 5857185.901 ops/s
Iteration  28: 5898159.822 ops/s
Iteration  29: 5915218.558 ops/s
Iteration  30: 5913532.799 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_appendStringWithSeparator":
  5889755.128 ±(99.9%) 19422.294 ops/s [Average]
  (min, avg, max) = (5809991.043, 5889755.128, 5946662.612), stdev = 29070.378
  CI (99.9%): [5870332.834, 5909177.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  5889755.128 ± 19422.294  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3261982.507 ops/s
# Warmup Iteration   2: 5673925.828 ops/s
# Warmup Iteration   3: 5715843.807 ops/s
# Warmup Iteration   4: 4809814.428 ops/s
# Warmup Iteration   5: 5672795.915 ops/s
# Warmup Iteration   6: 5704244.096 ops/s
# Warmup Iteration   7: 5723126.099 ops/s
# Warmup Iteration   8: 5703474.906 ops/s
# Warmup Iteration   9: 5727388.499 ops/s
# Warmup Iteration  10: 5705995.590 ops/s
# Warmup Iteration  11: 5701599.506 ops/s
# Warmup Iteration  12: 5702012.508 ops/s
# Warmup Iteration  13: 5703238.589 ops/s
# Warmup Iteration  14: 5686534.088 ops/s
# Warmup Iteration  15: 5677871.112 ops/s
# Warmup Iteration  16: 5720361.677 ops/s
# Warmup Iteration  17: 5695647.394 ops/s
# Warmup Iteration  18: 5663836.242 ops/s
# Warmup Iteration  19: 5637382.636 ops/s
# Warmup Iteration  20: 5701557.755 ops/s
# Warmup Iteration  21: 5670890.066 ops/s
# Warmup Iteration  22: 5700980.514 ops/s
# Warmup Iteration  23: 5689992.884 ops/s
# Warmup Iteration  24: 5654151.503 ops/s
# Warmup Iteration  25: 5614705.510 ops/s
# Warmup Iteration  26: 5649219.433 ops/s
# Warmup Iteration  27: 5699070.400 ops/s
# Warmup Iteration  28: 5670330.196 ops/s
# Warmup Iteration  29: 5650948.762 ops/s
# Warmup Iteration  30: 5706533.426 ops/s
Iteration   1: 5663985.151 ops/s
Iteration   2: 5689789.166 ops/s
Iteration   3: 5671303.892 ops/s
Iteration   4: 5698624.581 ops/s
Iteration   5: 5714330.862 ops/s
Iteration   6: 5702688.060 ops/s
Iteration   7: 5681777.027 ops/s
Iteration   8: 5688183.349 ops/s
Iteration   9: 5624133.921 ops/s
Iteration  10: 5692487.691 ops/s
Iteration  11: 5648221.620 ops/s
Iteration  12: 5689194.723 ops/s
Iteration  13: 5689874.350 ops/s
Iteration  14: 5709596.443 ops/s
Iteration  15: 5668854.375 ops/s
Iteration  16: 5652842.087 ops/s
Iteration  17: 5733273.819 ops/s
Iteration  18: 5725665.110 ops/s
Iteration  19: 5731050.228 ops/s
Iteration  20: 5695216.822 ops/s
Iteration  21: 5700758.328 ops/s
Iteration  22: 5688463.426 ops/s
Iteration  23: 5640792.156 ops/s
Iteration  24: 5676951.837 ops/s
Iteration  25: 5686325.392 ops/s
Iteration  26: 5629520.802 ops/s
Iteration  27: 5678631.197 ops/s
Iteration  28: 5652111.666 ops/s
Iteration  29: 5576441.384 ops/s
Iteration  30: 5703822.758 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  5680163.741 ±(99.9%) 22610.547 ops/s [Average]
  (min, avg, max) = (5576441.384, 5680163.741, 5733273.819), stdev = 33842.405
  CI (99.9%): [5657553.194, 5702774.288] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  5680163.741 ± 22610.547  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6613598.898 ops/s
# Warmup Iteration   2: 13922719.908 ops/s
# Warmup Iteration   3: 12419527.062 ops/s
# Warmup Iteration   4: 13168116.351 ops/s
# Warmup Iteration   5: 13915495.746 ops/s
# Warmup Iteration   6: 13987590.017 ops/s
# Warmup Iteration   7: 13978310.937 ops/s
# Warmup Iteration   8: 13853088.169 ops/s
# Warmup Iteration   9: 13876523.800 ops/s
# Warmup Iteration  10: 13968211.036 ops/s
# Warmup Iteration  11: 14018974.489 ops/s
# Warmup Iteration  12: 13979334.907 ops/s
# Warmup Iteration  13: 13872548.524 ops/s
# Warmup Iteration  14: 13860342.132 ops/s
# Warmup Iteration  15: 13939193.607 ops/s
# Warmup Iteration  16: 13907392.446 ops/s
# Warmup Iteration  17: 14020786.416 ops/s
# Warmup Iteration  18: 14041243.349 ops/s
# Warmup Iteration  19: 13979801.340 ops/s
# Warmup Iteration  20: 13846662.477 ops/s
# Warmup Iteration  21: 13985044.051 ops/s
# Warmup Iteration  22: 14002699.118 ops/s
# Warmup Iteration  23: 13998180.406 ops/s
# Warmup Iteration  24: 14002118.198 ops/s
# Warmup Iteration  25: 13958947.193 ops/s
# Warmup Iteration  26: 14045744.432 ops/s
# Warmup Iteration  27: 14028850.024 ops/s
# Warmup Iteration  28: 14051958.234 ops/s
# Warmup Iteration  29: 14032787.102 ops/s
# Warmup Iteration  30: 13747192.978 ops/s
Iteration   1: 14003492.096 ops/s
Iteration   2: 14046372.121 ops/s
Iteration   3: 13872929.990 ops/s
Iteration   4: 14015634.444 ops/s
Iteration   5: 13782402.316 ops/s
Iteration   6: 14037137.773 ops/s
Iteration   7: 14016143.310 ops/s
Iteration   8: 13951726.951 ops/s
Iteration   9: 14063905.106 ops/s
Iteration  10: 14117402.332 ops/s
Iteration  11: 14048116.408 ops/s
Iteration  12: 13770537.082 ops/s
Iteration  13: 13996396.782 ops/s
Iteration  14: 14013796.279 ops/s
Iteration  15: 14064322.771 ops/s
Iteration  16: 14057769.913 ops/s
Iteration  17: 14091991.140 ops/s
Iteration  18: 13745028.732 ops/s
Iteration  19: 13996992.073 ops/s
Iteration  20: 13999116.336 ops/s
Iteration  21: 14046952.813 ops/s
Iteration  22: 13794999.127 ops/s
Iteration  23: 13947367.149 ops/s
Iteration  24: 14045781.140 ops/s
Iteration  25: 14021873.634 ops/s
Iteration  26: 13978989.666 ops/s
Iteration  27: 14008404.389 ops/s
Iteration  28: 13984997.211 ops/s
Iteration  29: 14026776.778 ops/s
Iteration  30: 14041571.733 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_asLazy":
  13986297.587 ±(99.9%) 64584.745 ops/s [Average]
  (min, avg, max) = (13745028.732, 13986297.587, 14117402.332), stdev = 96667.413
  CI (99.9%): [13921712.842, 14050882.331] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_asLazy  thrpt   30  13986297.587 ± 64584.745  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2659233.699 ops/s
# Warmup Iteration   2: 6154239.303 ops/s
# Warmup Iteration   3: 5227394.838 ops/s
# Warmup Iteration   4: 6216088.301 ops/s
# Warmup Iteration   5: 6180167.656 ops/s
# Warmup Iteration   6: 6192060.472 ops/s
# Warmup Iteration   7: 6166637.864 ops/s
# Warmup Iteration   8: 6145226.027 ops/s
# Warmup Iteration   9: 6172114.691 ops/s
# Warmup Iteration  10: 6208748.749 ops/s
# Warmup Iteration  11: 6194189.363 ops/s
# Warmup Iteration  12: 6210883.801 ops/s
# Warmup Iteration  13: 6193652.177 ops/s
# Warmup Iteration  14: 6206142.151 ops/s
# Warmup Iteration  15: 6136232.443 ops/s
# Warmup Iteration  16: 6197927.416 ops/s
# Warmup Iteration  17: 6220001.127 ops/s
# Warmup Iteration  18: 6160392.783 ops/s
# Warmup Iteration  19: 6081724.555 ops/s
# Warmup Iteration  20: 6147515.165 ops/s
# Warmup Iteration  21: 6221291.426 ops/s
# Warmup Iteration  22: 6142130.846 ops/s
# Warmup Iteration  23: 6183799.985 ops/s
# Warmup Iteration  24: 6209325.186 ops/s
# Warmup Iteration  25: 6206417.922 ops/s
# Warmup Iteration  26: 6145246.073 ops/s
# Warmup Iteration  27: 6136975.811 ops/s
# Warmup Iteration  28: 6212428.462 ops/s
# Warmup Iteration  29: 6172478.441 ops/s
# Warmup Iteration  30: 6186872.561 ops/s
Iteration   1: 6210240.851 ops/s
Iteration   2: 6219831.664 ops/s
Iteration   3: 6158191.922 ops/s
Iteration   4: 6231645.757 ops/s
Iteration   5: 6218004.895 ops/s
Iteration   6: 6219789.607 ops/s
Iteration   7: 6233752.670 ops/s
Iteration   8: 6208130.020 ops/s
Iteration   9: 6209762.383 ops/s
Iteration  10: 6129711.630 ops/s
Iteration  11: 6168967.801 ops/s
Iteration  12: 6072298.771 ops/s
Iteration  13: 6154709.294 ops/s
Iteration  14: 6223546.788 ops/s
Iteration  15: 6109515.436 ops/s
Iteration  16: 6206617.673 ops/s
Iteration  17: 6235595.356 ops/s
Iteration  18: 6181220.373 ops/s
Iteration  19: 6093082.027 ops/s
Iteration  20: 6196370.900 ops/s
Iteration  21: 6185701.809 ops/s
Iteration  22: 6195128.116 ops/s
Iteration  23: 6199998.987 ops/s
Iteration  24: 6221626.574 ops/s
Iteration  25: 6217986.610 ops/s
Iteration  26: 6209804.860 ops/s
Iteration  27: 6207262.597 ops/s
Iteration  28: 6192965.495 ops/s
Iteration  29: 6121711.222 ops/s
Iteration  30: 6162069.512 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_asReversed":
  6186508.053 ±(99.9%) 29016.721 ops/s [Average]
  (min, avg, max) = (6072298.771, 6186508.053, 6235595.356), stdev = 43430.865
  CI (99.9%): [6157491.332, 6215524.774] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_asReversed  thrpt   30  6186508.053 ± 29016.721  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6082141.085 ops/s
# Warmup Iteration   2: 12663949.223 ops/s
# Warmup Iteration   3: 10479948.931 ops/s
# Warmup Iteration   4: 12463525.067 ops/s
# Warmup Iteration   5: 12418464.414 ops/s
# Warmup Iteration   6: 12487810.700 ops/s
# Warmup Iteration   7: 12372015.396 ops/s
# Warmup Iteration   8: 12364789.131 ops/s
# Warmup Iteration   9: 12533456.555 ops/s
# Warmup Iteration  10: 12469068.980 ops/s
# Warmup Iteration  11: 12492747.149 ops/s
# Warmup Iteration  12: 12527776.172 ops/s
# Warmup Iteration  13: 12474617.564 ops/s
# Warmup Iteration  14: 12338495.193 ops/s
# Warmup Iteration  15: 12506764.770 ops/s
# Warmup Iteration  16: 12506249.729 ops/s
# Warmup Iteration  17: 12651618.060 ops/s
# Warmup Iteration  18: 12715765.640 ops/s
# Warmup Iteration  19: 12710006.509 ops/s
# Warmup Iteration  20: 12586271.277 ops/s
# Warmup Iteration  21: 12645849.056 ops/s
# Warmup Iteration  22: 12530083.358 ops/s
# Warmup Iteration  23: 12683794.410 ops/s
# Warmup Iteration  24: 12679161.057 ops/s
# Warmup Iteration  25: 12641799.152 ops/s
# Warmup Iteration  26: 12624724.425 ops/s
# Warmup Iteration  27: 12711128.039 ops/s
# Warmup Iteration  28: 12713358.052 ops/s
# Warmup Iteration  29: 12720603.476 ops/s
# Warmup Iteration  30: 12518512.140 ops/s
Iteration   1: 12674557.544 ops/s
Iteration   2: 12711760.179 ops/s
Iteration   3: 12681495.576 ops/s
Iteration   4: 12691610.591 ops/s
Iteration   5: 12573750.509 ops/s
Iteration   6: 12682779.623 ops/s
Iteration   7: 12745849.682 ops/s
Iteration   8: 12751720.852 ops/s
Iteration   9: 12653081.724 ops/s
Iteration  10: 12558549.753 ops/s
Iteration  11: 12735408.110 ops/s
Iteration  12: 12688694.823 ops/s
Iteration  13: 12740846.825 ops/s
Iteration  14: 12707539.156 ops/s
Iteration  15: 12381812.682 ops/s
Iteration  16: 12218343.193 ops/s
Iteration  17: 12648704.325 ops/s
Iteration  18: 12733925.539 ops/s
Iteration  19: 12682070.735 ops/s
Iteration  20: 12685899.049 ops/s
Iteration  21: 12716246.403 ops/s
Iteration  22: 12646425.401 ops/s
Iteration  23: 12759379.117 ops/s
Iteration  24: 12629240.105 ops/s
Iteration  25: 12730407.938 ops/s
Iteration  26: 12719764.470 ops/s
Iteration  27: 12634673.656 ops/s
Iteration  28: 12741284.698 ops/s
Iteration  29: 12557571.943 ops/s
Iteration  30: 12544688.574 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_asSynchronized":
  12654269.426 ±(99.9%) 77049.488 ops/s [Average]
  (min, avg, max) = (12218343.193, 12654269.426, 12759379.117), stdev = 115324.055
  CI (99.9%): [12577219.938, 12731318.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_asSynchronized  thrpt   30  12654269.426 ± 77049.488  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6168619.571 ops/s
# Warmup Iteration   2: 12911717.518 ops/s
# Warmup Iteration   3: 11131901.157 ops/s
# Warmup Iteration   4: 12751840.816 ops/s
# Warmup Iteration   5: 12908876.795 ops/s
# Warmup Iteration   6: 12879044.872 ops/s
# Warmup Iteration   7: 12902862.414 ops/s
# Warmup Iteration   8: 12936374.363 ops/s
# Warmup Iteration   9: 12972428.284 ops/s
# Warmup Iteration  10: 12888898.760 ops/s
# Warmup Iteration  11: 12921340.597 ops/s
# Warmup Iteration  12: 12865490.917 ops/s
# Warmup Iteration  13: 12808893.647 ops/s
# Warmup Iteration  14: 12889143.170 ops/s
# Warmup Iteration  15: 12932473.246 ops/s
# Warmup Iteration  16: 12869212.079 ops/s
# Warmup Iteration  17: 13109784.499 ops/s
# Warmup Iteration  18: 13185636.801 ops/s
# Warmup Iteration  19: 13004240.239 ops/s
# Warmup Iteration  20: 13094364.853 ops/s
# Warmup Iteration  21: 13080170.581 ops/s
# Warmup Iteration  22: 13011213.990 ops/s
# Warmup Iteration  23: 13147932.127 ops/s
# Warmup Iteration  24: 13034279.379 ops/s
# Warmup Iteration  25: 12944275.442 ops/s
# Warmup Iteration  26: 13107211.958 ops/s
# Warmup Iteration  27: 13125425.847 ops/s
# Warmup Iteration  28: 13093761.573 ops/s
# Warmup Iteration  29: 13096156.337 ops/s
# Warmup Iteration  30: 13057250.974 ops/s
Iteration   1: 12981187.118 ops/s
Iteration   2: 13121268.537 ops/s
Iteration   3: 13089768.605 ops/s
Iteration   4: 13140835.542 ops/s
Iteration   5: 13139452.141 ops/s
Iteration   6: 13099661.304 ops/s
Iteration   7: 12929389.444 ops/s
Iteration   8: 13098796.969 ops/s
Iteration   9: 13162006.783 ops/s
Iteration  10: 13156255.032 ops/s
Iteration  11: 12909881.444 ops/s
Iteration  12: 13140734.262 ops/s
Iteration  13: 13072313.547 ops/s
Iteration  14: 12984175.789 ops/s
Iteration  15: 13015853.731 ops/s
Iteration  16: 13075949.479 ops/s
Iteration  17: 13080164.396 ops/s
Iteration  18: 13053430.527 ops/s
Iteration  19: 12981027.377 ops/s
Iteration  20: 13028085.815 ops/s
Iteration  21: 13022172.344 ops/s
Iteration  22: 12987164.193 ops/s
Iteration  23: 13097224.295 ops/s
Iteration  24: 13056146.581 ops/s
Iteration  25: 12886985.146 ops/s
Iteration  26: 12987994.707 ops/s
Iteration  27: 12910687.456 ops/s
Iteration  28: 13037519.291 ops/s
Iteration  29: 13079747.112 ops/s
Iteration  30: 12913962.017 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_asUnmodifiable":
  13041328.033 ±(99.9%) 53460.808 ops/s [Average]
  (min, avg, max) = (12886985.146, 13041328.033, 13162006.783), stdev = 80017.627
  CI (99.9%): [12987867.225, 13094788.841] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  13041328.033 ± 53460.808  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_binarySearch$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_binarySearch

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2040064.224 ops/s
# Warmup Iteration   2: 2255199.015 ops/s
# Warmup Iteration   3: 2926687.593 ops/s
# Warmup Iteration   4: 2915261.421 ops/s
# Warmup Iteration   5: 2945377.995 ops/s
# Warmup Iteration   6: 2941833.993 ops/s
# Warmup Iteration   7: 2941244.464 ops/s
# Warmup Iteration   8: 2938880.815 ops/s
# Warmup Iteration   9: 2893468.627 ops/s
# Warmup Iteration  10: 2604153.923 ops/s
# Warmup Iteration  11: 2800193.208 ops/s
# Warmup Iteration  12: 2947826.907 ops/s
# Warmup Iteration  13: 2924640.761 ops/s
# Warmup Iteration  14: 2932449.495 ops/s
# Warmup Iteration  15: 2928582.514 ops/s
# Warmup Iteration  16: 2912835.146 ops/s
# Warmup Iteration  17: 2966409.003 ops/s
# Warmup Iteration  18: 2957787.855 ops/s
# Warmup Iteration  19: 2958598.766 ops/s
# Warmup Iteration  20: 2934710.384 ops/s
# Warmup Iteration  21: 2957801.584 ops/s
# Warmup Iteration  22: 2956630.296 ops/s
# Warmup Iteration  23: 2925267.086 ops/s
# Warmup Iteration  24: 2933523.131 ops/s
# Warmup Iteration  25: 2960340.940 ops/s
# Warmup Iteration  26: 2944223.979 ops/s
# Warmup Iteration  27: 2961644.632 ops/s
# Warmup Iteration  28: 2939059.206 ops/s
# Warmup Iteration  29: 2928010.015 ops/s
# Warmup Iteration  30: 2921997.787 ops/s
Iteration   1: 2967176.192 ops/s
Iteration   2: 2939529.677 ops/s
Iteration   3: 2956399.709 ops/s
Iteration   4: 2960454.358 ops/s
Iteration   5: 2953478.262 ops/s
Iteration   6: 2956669.710 ops/s
Iteration   7: 2950144.535 ops/s
Iteration   8: 2964412.304 ops/s
Iteration   9: 2951422.198 ops/s
Iteration  10: 2963848.206 ops/s
Iteration  11: 2965348.817 ops/s
Iteration  12: 2961784.605 ops/s
Iteration  13: 2951957.714 ops/s
Iteration  14: 2944023.749 ops/s
Iteration  15: 2924825.806 ops/s
Iteration  16: 2933410.377 ops/s
Iteration  17: 2961572.706 ops/s
Iteration  18: 2968103.573 ops/s
Iteration  19: 2954566.671 ops/s
Iteration  20: 2956658.776 ops/s
Iteration  21: 2947824.582 ops/s
Iteration  22: 2951088.953 ops/s
Iteration  23: 2952105.615 ops/s
Iteration  24: 2958918.268 ops/s
Iteration  25: 2973004.877 ops/s
Iteration  26: 2930925.667 ops/s
Iteration  27: 2960879.469 ops/s
Iteration  28: 2957782.357 ops/s
Iteration  29: 2963036.174 ops/s
Iteration  30: 2914755.343 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_binarySearch":
  2953203.642 ±(99.9%) 8885.147 ops/s [Average]
  (min, avg, max) = (2914755.343, 2953203.642, 2973004.877), stdev = 13298.871
  CI (99.9%): [2944318.495, 2962088.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_binarySearch  thrpt   30  2953203.642 ± 8885.147  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_binarySearchWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_binarySearchWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2170315.225 ops/s
# Warmup Iteration   2: 2537392.761 ops/s
# Warmup Iteration   3: 3174187.672 ops/s
# Warmup Iteration   4: 3158799.023 ops/s
# Warmup Iteration   5: 3132782.042 ops/s
# Warmup Iteration   6: 3186842.658 ops/s
# Warmup Iteration   7: 3182962.128 ops/s
# Warmup Iteration   8: 3180217.947 ops/s
# Warmup Iteration   9: 3040939.012 ops/s
# Warmup Iteration  10: 2746179.357 ops/s
# Warmup Iteration  11: 3180631.739 ops/s
# Warmup Iteration  12: 3186275.493 ops/s
# Warmup Iteration  13: 3138669.786 ops/s
# Warmup Iteration  14: 3174248.715 ops/s
# Warmup Iteration  15: 3173019.788 ops/s
# Warmup Iteration  16: 3182386.001 ops/s
# Warmup Iteration  17: 3186546.592 ops/s
# Warmup Iteration  18: 3170779.585 ops/s
# Warmup Iteration  19: 3185346.133 ops/s
# Warmup Iteration  20: 3188833.195 ops/s
# Warmup Iteration  21: 3190548.168 ops/s
# Warmup Iteration  22: 3177507.804 ops/s
# Warmup Iteration  23: 3200799.907 ops/s
# Warmup Iteration  24: 3200956.030 ops/s
# Warmup Iteration  25: 3197215.829 ops/s
# Warmup Iteration  26: 3188636.169 ops/s
# Warmup Iteration  27: 3189393.115 ops/s
# Warmup Iteration  28: 3202005.594 ops/s
# Warmup Iteration  29: 3186223.529 ops/s
# Warmup Iteration  30: 3189908.266 ops/s
Iteration   1: 3194306.614 ops/s
Iteration   2: 3190323.677 ops/s
Iteration   3: 3195334.150 ops/s
Iteration   4: 3189303.656 ops/s
Iteration   5: 3193688.864 ops/s
Iteration   6: 3194169.548 ops/s
Iteration   7: 3192380.484 ops/s
Iteration   8: 3198298.147 ops/s
Iteration   9: 3144100.607 ops/s
Iteration  10: 3203129.406 ops/s
Iteration  11: 3164919.753 ops/s
Iteration  12: 3154556.328 ops/s
Iteration  13: 3173699.588 ops/s
Iteration  14: 3180065.054 ops/s
Iteration  15: 3199534.948 ops/s
Iteration  16: 3189695.509 ops/s
Iteration  17: 3195597.962 ops/s
Iteration  18: 3177564.579 ops/s
Iteration  19: 3206447.190 ops/s
Iteration  20: 3182611.305 ops/s
Iteration  21: 3195100.474 ops/s
Iteration  22: 3205752.969 ops/s
Iteration  23: 3121414.594 ops/s
Iteration  24: 3207518.323 ops/s
Iteration  25: 3203702.658 ops/s
Iteration  26: 3194549.866 ops/s
Iteration  27: 3195883.555 ops/s
Iteration  28: 3127817.186 ops/s
Iteration  29: 3140578.500 ops/s
Iteration  30: 3182010.762 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_binarySearchWithComparator":
  3183135.209 ±(99.9%) 15580.648 ops/s [Average]
  (min, avg, max) = (3121414.594, 3183135.209, 3207518.323), stdev = 23320.382
  CI (99.9%): [3167554.561, 3198715.856] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_binarySearchWithComparator  thrpt   30  3183135.209 ± 15580.648  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 932512.470 ops/s
# Warmup Iteration   2: 2331140.269 ops/s
# Warmup Iteration   3: 2273807.846 ops/s
# Warmup Iteration   4: 1932545.327 ops/s
# Warmup Iteration   5: 2283025.547 ops/s
# Warmup Iteration   6: 2306369.089 ops/s
# Warmup Iteration   7: 2296964.377 ops/s
# Warmup Iteration   8: 2294845.513 ops/s
# Warmup Iteration   9: 2289596.060 ops/s
# Warmup Iteration  10: 2306882.224 ops/s
# Warmup Iteration  11: 2307583.244 ops/s
# Warmup Iteration  12: 2306015.421 ops/s
# Warmup Iteration  13: 2312909.942 ops/s
# Warmup Iteration  14: 2312229.818 ops/s
# Warmup Iteration  15: 2294065.383 ops/s
# Warmup Iteration  16: 2316114.281 ops/s
# Warmup Iteration  17: 2307326.145 ops/s
# Warmup Iteration  18: 2296049.550 ops/s
# Warmup Iteration  19: 2293366.350 ops/s
# Warmup Iteration  20: 2309859.664 ops/s
# Warmup Iteration  21: 2297852.613 ops/s
# Warmup Iteration  22: 2303911.222 ops/s
# Warmup Iteration  23: 2311975.039 ops/s
# Warmup Iteration  24: 2312286.215 ops/s
# Warmup Iteration  25: 2317972.624 ops/s
# Warmup Iteration  26: 2307800.674 ops/s
# Warmup Iteration  27: 2289829.796 ops/s
# Warmup Iteration  28: 2319441.678 ops/s
# Warmup Iteration  29: 2306741.327 ops/s
# Warmup Iteration  30: 2315481.195 ops/s
Iteration   1: 2308982.771 ops/s
Iteration   2: 2317083.213 ops/s
Iteration   3: 2319288.359 ops/s
Iteration   4: 2316088.706 ops/s
Iteration   5: 2311799.797 ops/s
Iteration   6: 2314938.915 ops/s
Iteration   7: 2297916.155 ops/s
Iteration   8: 2304548.235 ops/s
Iteration   9: 2317389.317 ops/s
Iteration  10: 2306556.610 ops/s
Iteration  11: 2313680.231 ops/s
Iteration  12: 2298002.958 ops/s
Iteration  13: 2292494.792 ops/s
Iteration  14: 2314341.017 ops/s
Iteration  15: 2317210.239 ops/s
Iteration  16: 2281605.499 ops/s
Iteration  17: 2308928.491 ops/s
Iteration  18: 2310459.009 ops/s
Iteration  19: 2317760.159 ops/s
Iteration  20: 2322373.464 ops/s
Iteration  21: 2269783.675 ops/s
Iteration  22: 2317100.049 ops/s
Iteration  23: 2305565.019 ops/s
Iteration  24: 2278034.394 ops/s
Iteration  25: 2307230.378 ops/s
Iteration  26: 2321253.280 ops/s
Iteration  27: 2301988.577 ops/s
Iteration  28: 2313765.567 ops/s
Iteration  29: 2315618.035 ops/s
Iteration  30: 2236548.447 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk":
  2305277.845 ±(99.9%) 12206.227 ops/s [Average]
  (min, avg, max) = (2236548.447, 2305277.845, 2322373.464), stdev = 18269.707
  CI (99.9%): [2293071.618, 2317484.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_chunk  thrpt   30  2305277.845 ± 12206.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6707426.949 ops/s
# Warmup Iteration   2: 13747700.001 ops/s
# Warmup Iteration   3: 12439950.260 ops/s
# Warmup Iteration   4: 13043208.778 ops/s
# Warmup Iteration   5: 14000655.473 ops/s
# Warmup Iteration   6: 13713351.148 ops/s
# Warmup Iteration   7: 13871798.472 ops/s
# Warmup Iteration   8: 13980265.897 ops/s
# Warmup Iteration   9: 14012764.035 ops/s
# Warmup Iteration  10: 13905048.745 ops/s
# Warmup Iteration  11: 13942308.028 ops/s
# Warmup Iteration  12: 13841612.880 ops/s
# Warmup Iteration  13: 13948358.056 ops/s
# Warmup Iteration  14: 13896339.474 ops/s
# Warmup Iteration  15: 13764110.144 ops/s
# Warmup Iteration  16: 13873615.462 ops/s
# Warmup Iteration  17: 14022047.492 ops/s
# Warmup Iteration  18: 14046744.595 ops/s
# Warmup Iteration  19: 14048854.376 ops/s
# Warmup Iteration  20: 13988193.302 ops/s
# Warmup Iteration  21: 14059975.832 ops/s
# Warmup Iteration  22: 13952915.874 ops/s
# Warmup Iteration  23: 13879418.106 ops/s
# Warmup Iteration  24: 14001164.843 ops/s
# Warmup Iteration  25: 13974651.388 ops/s
# Warmup Iteration  26: 14008622.492 ops/s
# Warmup Iteration  27: 14012105.102 ops/s
# Warmup Iteration  28: 13981783.297 ops/s
# Warmup Iteration  29: 14036009.446 ops/s
# Warmup Iteration  30: 13828239.545 ops/s
Iteration   1: 13741223.608 ops/s
Iteration   2: 14074691.146 ops/s
Iteration   3: 14054061.432 ops/s
Iteration   4: 14079728.372 ops/s
Iteration   5: 14040930.793 ops/s
Iteration   6: 13815390.311 ops/s
Iteration   7: 14029045.380 ops/s
Iteration   8: 14046463.971 ops/s
Iteration   9: 14016297.537 ops/s
Iteration  10: 14054270.250 ops/s
Iteration  11: 13988293.170 ops/s
Iteration  12: 14039140.145 ops/s
Iteration  13: 13859053.406 ops/s
Iteration  14: 13994819.594 ops/s
Iteration  15: 14079857.200 ops/s
Iteration  16: 13997349.374 ops/s
Iteration  17: 14066335.099 ops/s
Iteration  18: 14051368.007 ops/s
Iteration  19: 14008987.451 ops/s
Iteration  20: 13981969.230 ops/s
Iteration  21: 14047270.844 ops/s
Iteration  22: 14062527.562 ops/s
Iteration  23: 14013505.054 ops/s
Iteration  24: 14076604.667 ops/s
Iteration  25: 13974924.613 ops/s
Iteration  26: 13933027.045 ops/s
Iteration  27: 14050446.520 ops/s
Iteration  28: 13977505.407 ops/s
Iteration  29: 13993960.866 ops/s
Iteration  30: 14023179.714 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk_empty":
  14005740.926 ±(99.9%) 52508.936 ops/s [Average]
  (min, avg, max) = (13741223.608, 14005740.926, 14079857.200), stdev = 78592.909
  CI (99.9%): [13953231.990, 14058249.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_chunk_empty  thrpt   30  14005740.926 ± 52508.936  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3158104.013 ops/s
# Warmup Iteration   2: 6751577.082 ops/s
# Warmup Iteration   3: 6751315.661 ops/s
# Warmup Iteration   4: 5730567.313 ops/s
# Warmup Iteration   5: 6870071.862 ops/s
# Warmup Iteration   6: 6841497.883 ops/s
# Warmup Iteration   7: 6798099.082 ops/s
# Warmup Iteration   8: 6850285.253 ops/s
# Warmup Iteration   9: 6807129.136 ops/s
# Warmup Iteration  10: 6837090.850 ops/s
# Warmup Iteration  11: 6870833.350 ops/s
# Warmup Iteration  12: 6854154.513 ops/s
# Warmup Iteration  13: 6833955.281 ops/s
# Warmup Iteration  14: 6749728.500 ops/s
# Warmup Iteration  15: 6869941.542 ops/s
# Warmup Iteration  16: 6853726.743 ops/s
# Warmup Iteration  17: 6778694.899 ops/s
# Warmup Iteration  18: 6820260.641 ops/s
# Warmup Iteration  19: 6757866.917 ops/s
# Warmup Iteration  20: 6831245.021 ops/s
# Warmup Iteration  21: 6765261.577 ops/s
# Warmup Iteration  22: 6758203.663 ops/s
# Warmup Iteration  23: 6853694.034 ops/s
# Warmup Iteration  24: 6845078.433 ops/s
# Warmup Iteration  25: 6809874.977 ops/s
# Warmup Iteration  26: 6828206.762 ops/s
# Warmup Iteration  27: 6743507.629 ops/s
# Warmup Iteration  28: 6728927.167 ops/s
# Warmup Iteration  29: 6796496.736 ops/s
# Warmup Iteration  30: 6724023.942 ops/s
Iteration   1: 6830793.558 ops/s
Iteration   2: 6827515.265 ops/s
Iteration   3: 6808400.624 ops/s
Iteration   4: 6844569.169 ops/s
Iteration   5: 6794594.709 ops/s
Iteration   6: 6797537.161 ops/s
Iteration   7: 6854801.307 ops/s
Iteration   8: 6733173.824 ops/s
Iteration   9: 6844489.096 ops/s
Iteration  10: 6731002.357 ops/s
Iteration  11: 6808371.829 ops/s
Iteration  12: 6811509.809 ops/s
Iteration  13: 6833764.556 ops/s
Iteration  14: 6814746.179 ops/s
Iteration  15: 6824594.233 ops/s
Iteration  16: 6815149.393 ops/s
Iteration  17: 6851445.033 ops/s
Iteration  18: 6846131.395 ops/s
Iteration  19: 6852996.418 ops/s
Iteration  20: 6710869.069 ops/s
Iteration  21: 6841572.742 ops/s
Iteration  22: 6700065.939 ops/s
Iteration  23: 6861104.421 ops/s
Iteration  24: 6865408.740 ops/s
Iteration  25: 6675595.493 ops/s
Iteration  26: 6814355.474 ops/s
Iteration  27: 6854382.804 ops/s
Iteration  28: 6806544.593 ops/s
Iteration  29: 6853179.185 ops/s
Iteration  30: 6846481.148 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk_large_size":
  6811838.184 ±(99.9%) 34004.536 ops/s [Average]
  (min, avg, max) = (6675595.493, 6811838.184, 6865408.740), stdev = 50896.393
  CI (99.9%): [6777833.648, 6845842.720] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  6811838.184 ± 34004.536  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3652127.949 ops/s
# Warmup Iteration   2: 8980007.831 ops/s
# Warmup Iteration   3: 7488099.484 ops/s
# Warmup Iteration   4: 9181421.849 ops/s
# Warmup Iteration   5: 9268420.577 ops/s
# Warmup Iteration   6: 9299069.264 ops/s
# Warmup Iteration   7: 9289464.911 ops/s
# Warmup Iteration   8: 9205391.267 ops/s
# Warmup Iteration   9: 9285306.062 ops/s
# Warmup Iteration  10: 9255410.361 ops/s
# Warmup Iteration  11: 9273056.449 ops/s
# Warmup Iteration  12: 9285657.773 ops/s
# Warmup Iteration  13: 9281060.514 ops/s
# Warmup Iteration  14: 9275962.568 ops/s
# Warmup Iteration  15: 9289888.170 ops/s
# Warmup Iteration  16: 9269593.002 ops/s
# Warmup Iteration  17: 9331211.953 ops/s
# Warmup Iteration  18: 9325815.145 ops/s
# Warmup Iteration  19: 9245443.828 ops/s
# Warmup Iteration  20: 9275241.694 ops/s
# Warmup Iteration  21: 9243300.564 ops/s
# Warmup Iteration  22: 9330731.253 ops/s
# Warmup Iteration  23: 9319457.676 ops/s
# Warmup Iteration  24: 9282233.294 ops/s
# Warmup Iteration  25: 9325312.387 ops/s
# Warmup Iteration  26: 9366522.600 ops/s
# Warmup Iteration  27: 9260725.088 ops/s
# Warmup Iteration  28: 9287954.481 ops/s
# Warmup Iteration  29: 9265761.393 ops/s
# Warmup Iteration  30: 9327440.335 ops/s
Iteration   1: 9311297.924 ops/s
Iteration   2: 9384775.186 ops/s
Iteration   3: 9371413.503 ops/s
Iteration   4: 9342152.617 ops/s
Iteration   5: 9326197.428 ops/s
Iteration   6: 9318329.913 ops/s
Iteration   7: 9193609.668 ops/s
Iteration   8: 9229651.043 ops/s
Iteration   9: 9321589.362 ops/s
Iteration  10: 9313471.878 ops/s
Iteration  11: 9342175.679 ops/s
Iteration  12: 9331451.212 ops/s
Iteration  13: 9307488.427 ops/s
Iteration  14: 9315304.673 ops/s
Iteration  15: 9311945.245 ops/s
Iteration  16: 9317855.817 ops/s
Iteration  17: 9277467.187 ops/s
Iteration  18: 9342404.184 ops/s
Iteration  19: 9311408.119 ops/s
Iteration  20: 9372725.941 ops/s
Iteration  21: 9319312.975 ops/s
Iteration  22: 9346647.847 ops/s
Iteration  23: 9373169.783 ops/s
Iteration  24: 9339310.468 ops/s
Iteration  25: 9335274.726 ops/s
Iteration  26: 9385085.876 ops/s
Iteration  27: 9349660.651 ops/s
Iteration  28: 9363332.209 ops/s
Iteration  29: 9391724.843 ops/s
Iteration  30: 9274055.930 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk_single":
  9327343.010 ±(99.9%) 28947.517 ops/s [Average]
  (min, avg, max) = (9193609.668, 9327343.010, 9391724.843), stdev = 43327.284
  CI (99.9%): [9298395.493, 9356290.528] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_chunk_single  thrpt   30  9327343.010 ± 28947.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 640021.496 ops/s
# Warmup Iteration   2: 740685.812 ops/s
# Warmup Iteration   3: 954928.863 ops/s
# Warmup Iteration   4: 951448.893 ops/s
# Warmup Iteration   5: 949233.918 ops/s
# Warmup Iteration   6: 949722.848 ops/s
# Warmup Iteration   7: 951883.373 ops/s
# Warmup Iteration   8: 954170.093 ops/s
# Warmup Iteration   9: 949032.862 ops/s
# Warmup Iteration  10: 798471.919 ops/s
# Warmup Iteration  11: 952892.511 ops/s
# Warmup Iteration  12: 953090.688 ops/s
# Warmup Iteration  13: 944117.299 ops/s
# Warmup Iteration  14: 951243.815 ops/s
# Warmup Iteration  15: 947299.105 ops/s
# Warmup Iteration  16: 953721.064 ops/s
# Warmup Iteration  17: 1002447.933 ops/s
# Warmup Iteration  18: 1006746.411 ops/s
# Warmup Iteration  19: 1006914.231 ops/s
# Warmup Iteration  20: 1005378.422 ops/s
# Warmup Iteration  21: 1002850.575 ops/s
# Warmup Iteration  22: 1009701.089 ops/s
# Warmup Iteration  23: 1008414.066 ops/s
# Warmup Iteration  24: 1009925.155 ops/s
# Warmup Iteration  25: 1010551.027 ops/s
# Warmup Iteration  26: 1005798.387 ops/s
# Warmup Iteration  27: 1011434.188 ops/s
# Warmup Iteration  28: 1004381.526 ops/s
# Warmup Iteration  29: 1006985.871 ops/s
# Warmup Iteration  30: 1000131.763 ops/s
Iteration   1: 1007003.226 ops/s
Iteration   2: 1005156.832 ops/s
Iteration   3: 1008963.316 ops/s
Iteration   4: 999231.839 ops/s
Iteration   5: 1008283.951 ops/s
Iteration   6: 1011405.813 ops/s
Iteration   7: 1006490.226 ops/s
Iteration   8: 1007441.410 ops/s
Iteration   9: 1008468.198 ops/s
Iteration  10: 1001683.316 ops/s
Iteration  11: 1010553.747 ops/s
Iteration  12: 1008093.120 ops/s
Iteration  13: 981784.821 ops/s
Iteration  14: 1007023.444 ops/s
Iteration  15: 1004111.199 ops/s
Iteration  16: 1012054.596 ops/s
Iteration  17: 1003852.547 ops/s
Iteration  18: 1008691.582 ops/s
Iteration  19: 1010287.643 ops/s
Iteration  20: 1009042.432 ops/s
Iteration  21: 1010460.360 ops/s
Iteration  22: 1011566.979 ops/s
Iteration  23: 1009325.254 ops/s
Iteration  24: 1003706.236 ops/s
Iteration  25: 999035.093 ops/s
Iteration  26: 1009002.752 ops/s
Iteration  27: 1011424.878 ops/s
Iteration  28: 1010537.661 ops/s
Iteration  29: 1008543.702 ops/s
Iteration  30: 1005207.013 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_chunk_zero_throws":
  1006614.439 ±(99.9%) 3885.004 ops/s [Average]
  (min, avg, max) = (981784.821, 1006614.439, 1012054.596), stdev = 5814.891
  CI (99.9%): [1002729.436, 1010499.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1006614.439 ± 3885.004  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1538587.429 ops/s
# Warmup Iteration   2: 3323844.087 ops/s
# Warmup Iteration   3: 3336359.054 ops/s
# Warmup Iteration   4: 2835590.189 ops/s
# Warmup Iteration   5: 3360735.576 ops/s
# Warmup Iteration   6: 3383886.855 ops/s
# Warmup Iteration   7: 3349596.271 ops/s
# Warmup Iteration   8: 3416189.615 ops/s
# Warmup Iteration   9: 3350521.489 ops/s
# Warmup Iteration  10: 3342305.022 ops/s
# Warmup Iteration  11: 3314722.835 ops/s
# Warmup Iteration  12: 3363603.686 ops/s
# Warmup Iteration  13: 3376037.784 ops/s
# Warmup Iteration  14: 3370486.084 ops/s
# Warmup Iteration  15: 3365735.566 ops/s
# Warmup Iteration  16: 3329132.741 ops/s
# Warmup Iteration  17: 3371113.434 ops/s
# Warmup Iteration  18: 3401618.136 ops/s
# Warmup Iteration  19: 3377549.210 ops/s
# Warmup Iteration  20: 3346829.005 ops/s
# Warmup Iteration  21: 3278689.950 ops/s
# Warmup Iteration  22: 3380331.376 ops/s
# Warmup Iteration  23: 3358010.782 ops/s
# Warmup Iteration  24: 3371299.366 ops/s
# Warmup Iteration  25: 3406841.689 ops/s
# Warmup Iteration  26: 3357495.586 ops/s
# Warmup Iteration  27: 3312875.267 ops/s
# Warmup Iteration  28: 3357184.381 ops/s
# Warmup Iteration  29: 3421006.659 ops/s
# Warmup Iteration  30: 3414493.280 ops/s
Iteration   1: 3249723.175 ops/s
Iteration   2: 3357978.990 ops/s
Iteration   3: 3290315.266 ops/s
Iteration   4: 3346655.686 ops/s
Iteration   5: 3303574.714 ops/s
Iteration   6: 3451442.122 ops/s
Iteration   7: 3327174.913 ops/s
Iteration   8: 3377119.167 ops/s
Iteration   9: 3267029.098 ops/s
Iteration  10: 3407760.251 ops/s
Iteration  11: 3425772.900 ops/s
Iteration  12: 3332826.896 ops/s
Iteration  13: 3334342.564 ops/s
Iteration  14: 3363215.268 ops/s
Iteration  15: 3335880.745 ops/s
Iteration  16: 3353130.455 ops/s
Iteration  17: 3373071.712 ops/s
Iteration  18: 3349484.552 ops/s
Iteration  19: 3319137.461 ops/s
Iteration  20: 3373254.964 ops/s
Iteration  21: 3309247.492 ops/s
Iteration  22: 3329719.678 ops/s
Iteration  23: 3349068.003 ops/s
Iteration  24: 3385999.022 ops/s
Iteration  25: 3383886.534 ops/s
Iteration  26: 3411675.752 ops/s
Iteration  27: 3398547.228 ops/s
Iteration  28: 3314744.553 ops/s
Iteration  29: 3442707.021 ops/s
Iteration  30: 3360069.649 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_clear":
  3354151.861 ±(99.9%) 31970.913 ops/s [Average]
  (min, avg, max) = (3249723.175, 3354151.861, 3451442.122), stdev = 47852.562
  CI (99.9%): [3322180.948, 3386122.774] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_clear  thrpt   30  3354151.861 ± 31970.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5201041.674 ops/s
# Warmup Iteration   2: 11162041.060 ops/s
# Warmup Iteration   3: 9257951.129 ops/s
# Warmup Iteration   4: 11320471.715 ops/s
# Warmup Iteration   5: 11352781.892 ops/s
# Warmup Iteration   6: 11326031.087 ops/s
# Warmup Iteration   7: 11313555.988 ops/s
# Warmup Iteration   8: 11349586.217 ops/s
# Warmup Iteration   9: 11348105.244 ops/s
# Warmup Iteration  10: 11251199.833 ops/s
# Warmup Iteration  11: 11261383.824 ops/s
# Warmup Iteration  12: 11344983.747 ops/s
# Warmup Iteration  13: 11127671.164 ops/s
# Warmup Iteration  14: 11275199.316 ops/s
# Warmup Iteration  15: 11360602.852 ops/s
# Warmup Iteration  16: 11317243.820 ops/s
# Warmup Iteration  17: 11337168.047 ops/s
# Warmup Iteration  18: 11364448.511 ops/s
# Warmup Iteration  19: 11211429.695 ops/s
# Warmup Iteration  20: 11376333.605 ops/s
# Warmup Iteration  21: 11334081.622 ops/s
# Warmup Iteration  22: 11363368.655 ops/s
# Warmup Iteration  23: 11168530.482 ops/s
# Warmup Iteration  24: 11338576.366 ops/s
# Warmup Iteration  25: 11400600.637 ops/s
# Warmup Iteration  26: 11277348.623 ops/s
# Warmup Iteration  27: 11389397.113 ops/s
# Warmup Iteration  28: 11375112.709 ops/s
# Warmup Iteration  29: 11384074.323 ops/s
# Warmup Iteration  30: 11348304.748 ops/s
Iteration   1: 11294112.219 ops/s
Iteration   2: 11335989.129 ops/s
Iteration   3: 11372265.854 ops/s
Iteration   4: 11398430.782 ops/s
Iteration   5: 11294910.508 ops/s
Iteration   6: 11376162.231 ops/s
Iteration   7: 11315445.551 ops/s
Iteration   8: 11251079.716 ops/s
Iteration   9: 11190863.026 ops/s
Iteration  10: 11395233.343 ops/s
Iteration  11: 11378051.190 ops/s
Iteration  12: 11165753.057 ops/s
Iteration  13: 11330801.245 ops/s
Iteration  14: 11089376.035 ops/s
Iteration  15: 11227662.714 ops/s
Iteration  16: 11237424.723 ops/s
Iteration  17: 11357065.957 ops/s
Iteration  18: 11303788.262 ops/s
Iteration  19: 11432739.676 ops/s
Iteration  20: 11365749.282 ops/s
Iteration  21: 11309705.794 ops/s
Iteration  22: 11399598.952 ops/s
Iteration  23: 11144183.986 ops/s
Iteration  24: 11197983.711 ops/s
Iteration  25: 11334417.868 ops/s
Iteration  26: 11415733.020 ops/s
Iteration  27: 11291044.293 ops/s
Iteration  28: 11405238.174 ops/s
Iteration  29: 11289424.012 ops/s
Iteration  30: 11362239.006 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collect":
  11308749.110 ±(99.9%) 58401.777 ops/s [Average]
  (min, avg, max) = (11089376.035, 11308749.110, 11432739.676), stdev = 87413.036
  CI (99.9%): [11250347.334, 11367150.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collect  thrpt   30  11308749.110 ± 58401.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 987981.664 ops/s
# Warmup Iteration   2: 3236885.171 ops/s
# Warmup Iteration   3: 3307483.327 ops/s
# Warmup Iteration   4: 2791341.526 ops/s
# Warmup Iteration   5: 3349021.223 ops/s
# Warmup Iteration   6: 3319462.603 ops/s
# Warmup Iteration   7: 3272043.440 ops/s
# Warmup Iteration   8: 3330181.086 ops/s
# Warmup Iteration   9: 3357072.229 ops/s
# Warmup Iteration  10: 3346327.301 ops/s
# Warmup Iteration  11: 3330509.741 ops/s
# Warmup Iteration  12: 3342266.358 ops/s
# Warmup Iteration  13: 3345556.008 ops/s
# Warmup Iteration  14: 3326796.292 ops/s
# Warmup Iteration  15: 3321899.286 ops/s
# Warmup Iteration  16: 3356139.433 ops/s
# Warmup Iteration  17: 3345931.550 ops/s
# Warmup Iteration  18: 3320561.092 ops/s
# Warmup Iteration  19: 3340704.855 ops/s
# Warmup Iteration  20: 3327673.247 ops/s
# Warmup Iteration  21: 3346178.804 ops/s
# Warmup Iteration  22: 3344644.290 ops/s
# Warmup Iteration  23: 3340461.424 ops/s
# Warmup Iteration  24: 3343581.014 ops/s
# Warmup Iteration  25: 3292927.030 ops/s
# Warmup Iteration  26: 3350559.963 ops/s
# Warmup Iteration  27: 3346083.515 ops/s
# Warmup Iteration  28: 3344322.177 ops/s
# Warmup Iteration  29: 3349730.967 ops/s
# Warmup Iteration  30: 3351459.543 ops/s
Iteration   1: 3365593.713 ops/s
Iteration   2: 3354614.676 ops/s
Iteration   3: 3337831.356 ops/s
Iteration   4: 3347378.034 ops/s
Iteration   5: 3359206.109 ops/s
Iteration   6: 3348274.932 ops/s
Iteration   7: 3349467.777 ops/s
Iteration   8: 3281341.408 ops/s
Iteration   9: 3359312.154 ops/s
Iteration  10: 3346369.976 ops/s
Iteration  11: 3347275.261 ops/s
Iteration  12: 3302211.950 ops/s
Iteration  13: 3353540.611 ops/s
Iteration  14: 3340461.221 ops/s
Iteration  15: 3349046.527 ops/s
Iteration  16: 3255663.875 ops/s
Iteration  17: 3346240.588 ops/s
Iteration  18: 3341654.492 ops/s
Iteration  19: 3334852.718 ops/s
Iteration  20: 3348357.953 ops/s
Iteration  21: 3349927.161 ops/s
Iteration  22: 3340920.850 ops/s
Iteration  23: 3347538.556 ops/s
Iteration  24: 3362314.064 ops/s
Iteration  25: 3345403.644 ops/s
Iteration  26: 3335489.085 ops/s
Iteration  27: 3350126.552 ops/s
Iteration  28: 3346948.375 ops/s
Iteration  29: 3277182.569 ops/s
Iteration  30: 3340613.409 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectBoolean":
  3338838.653 ±(99.9%) 17131.126 ops/s [Average]
  (min, avg, max) = (3255663.875, 3338838.653, 3365593.713), stdev = 25641.066
  CI (99.9%): [3321707.527, 3355969.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectBoolean  thrpt   30  3338838.653 ± 17131.126  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6335377.279 ops/s
# Warmup Iteration   2: 13092996.344 ops/s
# Warmup Iteration   3: 11244455.555 ops/s
# Warmup Iteration   4: 13308012.332 ops/s
# Warmup Iteration   5: 13160793.744 ops/s
# Warmup Iteration   6: 13341272.124 ops/s
# Warmup Iteration   7: 13275767.202 ops/s
# Warmup Iteration   8: 13312296.449 ops/s
# Warmup Iteration   9: 13356134.771 ops/s
# Warmup Iteration  10: 13305703.905 ops/s
# Warmup Iteration  11: 13316423.185 ops/s
# Warmup Iteration  12: 13268059.088 ops/s
# Warmup Iteration  13: 13229773.898 ops/s
# Warmup Iteration  14: 13325318.550 ops/s
# Warmup Iteration  15: 13203856.447 ops/s
# Warmup Iteration  16: 13101247.021 ops/s
# Warmup Iteration  17: 13423771.964 ops/s
# Warmup Iteration  18: 13412025.225 ops/s
# Warmup Iteration  19: 13294429.006 ops/s
# Warmup Iteration  20: 13359310.458 ops/s
# Warmup Iteration  21: 13412100.225 ops/s
# Warmup Iteration  22: 13383362.986 ops/s
# Warmup Iteration  23: 13215281.638 ops/s
# Warmup Iteration  24: 13424998.820 ops/s
# Warmup Iteration  25: 13414532.325 ops/s
# Warmup Iteration  26: 13495119.053 ops/s
# Warmup Iteration  27: 13446085.602 ops/s
# Warmup Iteration  28: 13450286.107 ops/s
# Warmup Iteration  29: 13444081.339 ops/s
# Warmup Iteration  30: 13352874.681 ops/s
Iteration   1: 13472856.106 ops/s
Iteration   2: 13442057.585 ops/s
Iteration   3: 13275255.309 ops/s
Iteration   4: 13515752.384 ops/s
Iteration   5: 13378469.228 ops/s
Iteration   6: 13435914.072 ops/s
Iteration   7: 13460094.459 ops/s
Iteration   8: 13293623.620 ops/s
Iteration   9: 13436280.439 ops/s
Iteration  10: 13278844.675 ops/s
Iteration  11: 13431448.262 ops/s
Iteration  12: 13487000.052 ops/s
Iteration  13: 13374573.959 ops/s
Iteration  14: 13404573.707 ops/s
Iteration  15: 13332186.176 ops/s
Iteration  16: 13444405.311 ops/s
Iteration  17: 13482345.413 ops/s
Iteration  18: 13396397.823 ops/s
Iteration  19: 13400783.716 ops/s
Iteration  20: 13410954.973 ops/s
Iteration  21: 13496972.818 ops/s
Iteration  22: 13433211.060 ops/s
Iteration  23: 13424627.109 ops/s
Iteration  24: 13423272.951 ops/s
Iteration  25: 13498424.122 ops/s
Iteration  26: 13489193.367 ops/s
Iteration  27: 13442337.662 ops/s
Iteration  28: 13360908.183 ops/s
Iteration  29: 13340480.780 ops/s
Iteration  30: 13450742.132 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  13417132.915 ±(99.9%) 43218.964 ops/s [Average]
  (min, avg, max) = (13275255.309, 13417132.915, 13515752.384), stdev = 64688.116
  CI (99.9%): [13373913.951, 13460351.879] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  13417132.915 ± 43218.964  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3742715.405 ops/s
# Warmup Iteration   2: 7931897.770 ops/s
# Warmup Iteration   3: 8093707.864 ops/s
# Warmup Iteration   4: 6815949.428 ops/s
# Warmup Iteration   5: 8111496.612 ops/s
# Warmup Iteration   6: 8023792.413 ops/s
# Warmup Iteration   7: 8123489.985 ops/s
# Warmup Iteration   8: 8159372.041 ops/s
# Warmup Iteration   9: 8056780.829 ops/s
# Warmup Iteration  10: 8152301.145 ops/s
# Warmup Iteration  11: 8104982.839 ops/s
# Warmup Iteration  12: 8144619.633 ops/s
# Warmup Iteration  13: 8135233.362 ops/s
# Warmup Iteration  14: 8125160.526 ops/s
# Warmup Iteration  15: 8160771.529 ops/s
# Warmup Iteration  16: 8069377.463 ops/s
# Warmup Iteration  17: 8119137.625 ops/s
# Warmup Iteration  18: 8148840.059 ops/s
# Warmup Iteration  19: 8061538.414 ops/s
# Warmup Iteration  20: 8117150.510 ops/s
# Warmup Iteration  21: 8107839.245 ops/s
# Warmup Iteration  22: 8118154.180 ops/s
# Warmup Iteration  23: 8155875.914 ops/s
# Warmup Iteration  24: 8092618.136 ops/s
# Warmup Iteration  25: 8129941.535 ops/s
# Warmup Iteration  26: 8120737.632 ops/s
# Warmup Iteration  27: 8091755.560 ops/s
# Warmup Iteration  28: 8084895.389 ops/s
# Warmup Iteration  29: 8112149.041 ops/s
# Warmup Iteration  30: 8097821.263 ops/s
Iteration   1: 8127024.933 ops/s
Iteration   2: 8148876.034 ops/s
Iteration   3: 8147512.218 ops/s
Iteration   4: 8147389.241 ops/s
Iteration   5: 8144015.735 ops/s
Iteration   6: 8024060.030 ops/s
Iteration   7: 8137214.167 ops/s
Iteration   8: 8144552.398 ops/s
Iteration   9: 8120370.940 ops/s
Iteration  10: 7845918.981 ops/s
Iteration  11: 8140592.345 ops/s
Iteration  12: 8102982.186 ops/s
Iteration  13: 8160920.407 ops/s
Iteration  14: 8098912.637 ops/s
Iteration  15: 8150753.985 ops/s
Iteration  16: 8019238.962 ops/s
Iteration  17: 8093409.933 ops/s
Iteration  18: 8137227.800 ops/s
Iteration  19: 8042921.019 ops/s
Iteration  20: 7976973.586 ops/s
Iteration  21: 8162770.571 ops/s
Iteration  22: 7981852.130 ops/s
Iteration  23: 8002763.751 ops/s
Iteration  24: 8142376.956 ops/s
Iteration  25: 8128534.044 ops/s
Iteration  26: 8108195.925 ops/s
Iteration  27: 8067136.677 ops/s
Iteration  28: 8095816.406 ops/s
Iteration  29: 8163148.535 ops/s
Iteration  30: 8073508.021 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectBooleanWithTarget":
  8094565.685 ±(99.9%) 48511.190 ops/s [Average]
  (min, avg, max) = (7845918.981, 8094565.685, 8163148.535), stdev = 72609.271
  CI (99.9%): [8046054.495, 8143076.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  8094565.685 ± 48511.190  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 630030.886 ops/s
# Warmup Iteration   2: 1475521.194 ops/s
# Warmup Iteration   3: 1485457.294 ops/s
# Warmup Iteration   4: 1238697.507 ops/s
# Warmup Iteration   5: 1475174.896 ops/s
# Warmup Iteration   6: 1476836.359 ops/s
# Warmup Iteration   7: 1473225.502 ops/s
# Warmup Iteration   8: 1482707.997 ops/s
# Warmup Iteration   9: 1488352.444 ops/s
# Warmup Iteration  10: 1455808.331 ops/s
# Warmup Iteration  11: 1484813.539 ops/s
# Warmup Iteration  12: 1484972.332 ops/s
# Warmup Iteration  13: 1487411.338 ops/s
# Warmup Iteration  14: 1480655.515 ops/s
# Warmup Iteration  15: 1478880.885 ops/s
# Warmup Iteration  16: 1487607.466 ops/s
# Warmup Iteration  17: 1485914.606 ops/s
# Warmup Iteration  18: 1486747.893 ops/s
# Warmup Iteration  19: 1483437.094 ops/s
# Warmup Iteration  20: 1483061.313 ops/s
# Warmup Iteration  21: 1469758.431 ops/s
# Warmup Iteration  22: 1480246.155 ops/s
# Warmup Iteration  23: 1479494.148 ops/s
# Warmup Iteration  24: 1479416.746 ops/s
# Warmup Iteration  25: 1482038.439 ops/s
# Warmup Iteration  26: 1486638.655 ops/s
# Warmup Iteration  27: 1484800.868 ops/s
# Warmup Iteration  28: 1473539.413 ops/s
# Warmup Iteration  29: 1473014.155 ops/s
# Warmup Iteration  30: 1480428.294 ops/s
Iteration   1: 1490015.946 ops/s
Iteration   2: 1481479.885 ops/s
Iteration   3: 1490807.636 ops/s
Iteration   4: 1488206.521 ops/s
Iteration   5: 1481757.034 ops/s
Iteration   6: 1482278.040 ops/s
Iteration   7: 1479145.809 ops/s
Iteration   8: 1484993.073 ops/s
Iteration   9: 1490075.440 ops/s
Iteration  10: 1475831.234 ops/s
Iteration  11: 1481219.244 ops/s
Iteration  12: 1482118.657 ops/s
Iteration  13: 1461958.431 ops/s
Iteration  14: 1478686.547 ops/s
Iteration  15: 1485396.721 ops/s
Iteration  16: 1479634.363 ops/s
Iteration  17: 1486370.989 ops/s
Iteration  18: 1477563.349 ops/s
Iteration  19: 1484191.480 ops/s
Iteration  20: 1481675.300 ops/s
Iteration  21: 1483318.432 ops/s
Iteration  22: 1480167.818 ops/s
Iteration  23: 1484552.711 ops/s
Iteration  24: 1488667.942 ops/s
Iteration  25: 1460659.676 ops/s
Iteration  26: 1488437.771 ops/s
Iteration  27: 1479402.761 ops/s
Iteration  28: 1479826.517 ops/s
Iteration  29: 1478004.630 ops/s
Iteration  30: 1476673.624 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectByte":
  1481437.253 ±(99.9%) 4599.562 ops/s [Average]
  (min, avg, max) = (1460659.676, 1481437.253, 1490807.636), stdev = 6884.408
  CI (99.9%): [1476837.691, 1486036.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectByte  thrpt   30  1481437.253 ± 4599.562  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2239571.511 ops/s
# Warmup Iteration   2: 5127837.662 ops/s
# Warmup Iteration   3: 4355872.760 ops/s
# Warmup Iteration   4: 5191222.453 ops/s
# Warmup Iteration   5: 5174351.852 ops/s
# Warmup Iteration   6: 5142785.936 ops/s
# Warmup Iteration   7: 5160191.418 ops/s
# Warmup Iteration   8: 5187623.783 ops/s
# Warmup Iteration   9: 5209592.176 ops/s
# Warmup Iteration  10: 5207360.862 ops/s
# Warmup Iteration  11: 5206339.083 ops/s
# Warmup Iteration  12: 5198819.775 ops/s
# Warmup Iteration  13: 5199204.938 ops/s
# Warmup Iteration  14: 5171603.648 ops/s
# Warmup Iteration  15: 5216134.630 ops/s
# Warmup Iteration  16: 5190261.099 ops/s
# Warmup Iteration  17: 5217639.747 ops/s
# Warmup Iteration  18: 5209863.696 ops/s
# Warmup Iteration  19: 5212462.951 ops/s
# Warmup Iteration  20: 5230772.105 ops/s
# Warmup Iteration  21: 5224651.764 ops/s
# Warmup Iteration  22: 5219153.039 ops/s
# Warmup Iteration  23: 5205261.738 ops/s
# Warmup Iteration  24: 5219400.823 ops/s
# Warmup Iteration  25: 5165660.530 ops/s
# Warmup Iteration  26: 5190261.954 ops/s
# Warmup Iteration  27: 5224170.966 ops/s
# Warmup Iteration  28: 5204299.551 ops/s
# Warmup Iteration  29: 5191112.090 ops/s
# Warmup Iteration  30: 5205261.741 ops/s
Iteration   1: 5223427.208 ops/s
Iteration   2: 5212232.722 ops/s
Iteration   3: 5226559.161 ops/s
Iteration   4: 5187872.533 ops/s
Iteration   5: 5175104.495 ops/s
Iteration   6: 5199312.735 ops/s
Iteration   7: 5214045.493 ops/s
Iteration   8: 5215514.051 ops/s
Iteration   9: 5222288.081 ops/s
Iteration  10: 5185855.640 ops/s
Iteration  11: 5182366.085 ops/s
Iteration  12: 5189136.936 ops/s
Iteration  13: 5134415.838 ops/s
Iteration  14: 5199678.336 ops/s
Iteration  15: 5183382.812 ops/s
Iteration  16: 5205364.991 ops/s
Iteration  17: 5203826.849 ops/s
Iteration  18: 5205721.367 ops/s
Iteration  19: 5173567.175 ops/s
Iteration  20: 5170702.577 ops/s
Iteration  21: 5199891.379 ops/s
Iteration  22: 5216213.871 ops/s
Iteration  23: 5213781.807 ops/s
Iteration  24: 5226215.272 ops/s
Iteration  25: 5187976.664 ops/s
Iteration  26: 5188694.718 ops/s
Iteration  27: 5200299.314 ops/s
Iteration  28: 5214415.886 ops/s
Iteration  29: 5212898.071 ops/s
Iteration  30: 5231252.789 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectByteWithBagTarget":
  5200067.162 ±(99.9%) 13986.404 ops/s [Average]
  (min, avg, max) = (5134415.838, 5200067.162, 5231252.789), stdev = 20934.192
  CI (99.9%): [5186080.758, 5214053.566] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  5200067.162 ± 13986.404  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1615638.200 ops/s
# Warmup Iteration   2: 3920915.294 ops/s
# Warmup Iteration   3: 3544239.779 ops/s
# Warmup Iteration   4: 3641452.087 ops/s
# Warmup Iteration   5: 3898778.379 ops/s
# Warmup Iteration   6: 3961670.644 ops/s
# Warmup Iteration   7: 3929375.700 ops/s
# Warmup Iteration   8: 3948302.717 ops/s
# Warmup Iteration   9: 3902009.880 ops/s
# Warmup Iteration  10: 3930772.809 ops/s
# Warmup Iteration  11: 3879915.369 ops/s
# Warmup Iteration  12: 3932992.011 ops/s
# Warmup Iteration  13: 3950361.741 ops/s
# Warmup Iteration  14: 3951224.281 ops/s
# Warmup Iteration  15: 3941693.611 ops/s
# Warmup Iteration  16: 3943153.943 ops/s
# Warmup Iteration  17: 3926494.900 ops/s
# Warmup Iteration  18: 3928896.910 ops/s
# Warmup Iteration  19: 3895982.620 ops/s
# Warmup Iteration  20: 3860156.082 ops/s
# Warmup Iteration  21: 3911610.135 ops/s
# Warmup Iteration  22: 3935014.950 ops/s
# Warmup Iteration  23: 3931956.252 ops/s
# Warmup Iteration  24: 3908874.052 ops/s
# Warmup Iteration  25: 3931600.406 ops/s
# Warmup Iteration  26: 3906443.053 ops/s
# Warmup Iteration  27: 3921164.038 ops/s
# Warmup Iteration  28: 3937165.978 ops/s
# Warmup Iteration  29: 3931429.208 ops/s
# Warmup Iteration  30: 3937108.845 ops/s
Iteration   1: 3918948.706 ops/s
Iteration   2: 3954954.486 ops/s
Iteration   3: 3885827.129 ops/s
Iteration   4: 3910860.944 ops/s
Iteration   5: 3952023.213 ops/s
Iteration   6: 3939469.019 ops/s
Iteration   7: 3842058.235 ops/s
Iteration   8: 3886978.105 ops/s
Iteration   9: 3854462.596 ops/s
Iteration  10: 3941722.184 ops/s
Iteration  11: 3847328.275 ops/s
Iteration  12: 3870189.751 ops/s
Iteration  13: 3869930.050 ops/s
Iteration  14: 3922718.264 ops/s
Iteration  15: 3945660.404 ops/s
Iteration  16: 3938347.490 ops/s
Iteration  17: 3919334.678 ops/s
Iteration  18: 3949392.742 ops/s
Iteration  19: 3949247.997 ops/s
Iteration  20: 3940759.263 ops/s
Iteration  21: 3923712.610 ops/s
Iteration  22: 3942177.970 ops/s
Iteration  23: 3912686.155 ops/s
Iteration  24: 3924851.774 ops/s
Iteration  25: 3937057.794 ops/s
Iteration  26: 3925266.443 ops/s
Iteration  27: 3941223.421 ops/s
Iteration  28: 3951449.986 ops/s
Iteration  29: 3931975.292 ops/s
Iteration  30: 3949347.167 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectByteWithTarget":
  3919332.071 ±(99.9%) 22388.850 ops/s [Average]
  (min, avg, max) = (3842058.235, 3919332.071, 3954954.486), stdev = 33510.579
  CI (99.9%): [3896943.222, 3941720.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  3919332.071 ± 22388.850  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651085.222 ops/s
# Warmup Iteration   2: 1562366.095 ops/s
# Warmup Iteration   3: 1567071.876 ops/s
# Warmup Iteration   4: 1306901.225 ops/s
# Warmup Iteration   5: 1567047.035 ops/s
# Warmup Iteration   6: 1568223.886 ops/s
# Warmup Iteration   7: 1570437.785 ops/s
# Warmup Iteration   8: 1569738.350 ops/s
# Warmup Iteration   9: 1568603.467 ops/s
# Warmup Iteration  10: 1567264.137 ops/s
# Warmup Iteration  11: 1565776.587 ops/s
# Warmup Iteration  12: 1568484.122 ops/s
# Warmup Iteration  13: 1562408.129 ops/s
# Warmup Iteration  14: 1574740.206 ops/s
# Warmup Iteration  15: 1581305.745 ops/s
# Warmup Iteration  16: 1563268.842 ops/s
# Warmup Iteration  17: 1572397.006 ops/s
# Warmup Iteration  18: 1568795.564 ops/s
# Warmup Iteration  19: 1573044.129 ops/s
# Warmup Iteration  20: 1572092.961 ops/s
# Warmup Iteration  21: 1572508.356 ops/s
# Warmup Iteration  22: 1571517.988 ops/s
# Warmup Iteration  23: 1580420.333 ops/s
# Warmup Iteration  24: 1560126.709 ops/s
# Warmup Iteration  25: 1569837.266 ops/s
# Warmup Iteration  26: 1560080.935 ops/s
# Warmup Iteration  27: 1566005.160 ops/s
# Warmup Iteration  28: 1577237.366 ops/s
# Warmup Iteration  29: 1575270.174 ops/s
# Warmup Iteration  30: 1578037.497 ops/s
Iteration   1: 1559270.597 ops/s
Iteration   2: 1577170.328 ops/s
Iteration   3: 1563283.424 ops/s
Iteration   4: 1562167.904 ops/s
Iteration   5: 1563516.535 ops/s
Iteration   6: 1558638.883 ops/s
Iteration   7: 1558318.534 ops/s
Iteration   8: 1565389.709 ops/s
Iteration   9: 1496166.930 ops/s
Iteration  10: 1567189.280 ops/s
Iteration  11: 1560804.625 ops/s
Iteration  12: 1568836.570 ops/s
Iteration  13: 1552785.733 ops/s
Iteration  14: 1570578.070 ops/s
Iteration  15: 1563795.299 ops/s
Iteration  16: 1571969.058 ops/s
Iteration  17: 1565339.611 ops/s
Iteration  18: 1570770.847 ops/s
Iteration  19: 1561652.794 ops/s
Iteration  20: 1577352.574 ops/s
Iteration  21: 1574932.713 ops/s
Iteration  22: 1572875.865 ops/s
Iteration  23: 1564717.314 ops/s
Iteration  24: 1571021.700 ops/s
Iteration  25: 1548525.344 ops/s
Iteration  26: 1585505.215 ops/s
Iteration  27: 1565140.889 ops/s
Iteration  28: 1540442.901 ops/s
Iteration  29: 1571861.421 ops/s
Iteration  30: 1570820.512 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectChar":
  1563361.373 ±(99.9%) 10361.052 ops/s [Average]
  (min, avg, max) = (1496166.930, 1563361.373, 1585505.215), stdev = 15507.936
  CI (99.9%): [1553000.321, 1573722.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectChar  thrpt   30  1563361.373 ± 10361.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2325296.258 ops/s
# Warmup Iteration   2: 5464228.998 ops/s
# Warmup Iteration   3: 4615107.196 ops/s
# Warmup Iteration   4: 5470411.856 ops/s
# Warmup Iteration   5: 5469982.996 ops/s
# Warmup Iteration   6: 5501555.449 ops/s
# Warmup Iteration   7: 5446142.212 ops/s
# Warmup Iteration   8: 5493353.412 ops/s
# Warmup Iteration   9: 5453701.201 ops/s
# Warmup Iteration  10: 5458659.387 ops/s
# Warmup Iteration  11: 5463778.785 ops/s
# Warmup Iteration  12: 5487178.536 ops/s
# Warmup Iteration  13: 5459656.773 ops/s
# Warmup Iteration  14: 5490651.427 ops/s
# Warmup Iteration  15: 5501903.246 ops/s
# Warmup Iteration  16: 5479786.191 ops/s
# Warmup Iteration  17: 5406591.824 ops/s
# Warmup Iteration  18: 5489498.618 ops/s
# Warmup Iteration  19: 5470304.903 ops/s
# Warmup Iteration  20: 5473073.295 ops/s
# Warmup Iteration  21: 5482394.482 ops/s
# Warmup Iteration  22: 5448284.030 ops/s
# Warmup Iteration  23: 5531666.141 ops/s
# Warmup Iteration  24: 5466710.096 ops/s
# Warmup Iteration  25: 5481299.885 ops/s
# Warmup Iteration  26: 5464379.461 ops/s
# Warmup Iteration  27: 5439290.709 ops/s
# Warmup Iteration  28: 5490789.388 ops/s
# Warmup Iteration  29: 5523264.402 ops/s
# Warmup Iteration  30: 5469584.118 ops/s
Iteration   1: 5403591.540 ops/s
Iteration   2: 5484465.065 ops/s
Iteration   3: 5505078.635 ops/s
Iteration   4: 5495801.345 ops/s
Iteration   5: 5485685.944 ops/s
Iteration   6: 5501327.995 ops/s
Iteration   7: 5479417.822 ops/s
Iteration   8: 5452052.883 ops/s
Iteration   9: 5492244.434 ops/s
Iteration  10: 5474794.982 ops/s
Iteration  11: 5514965.310 ops/s
Iteration  12: 5450013.555 ops/s
Iteration  13: 5496867.223 ops/s
Iteration  14: 5534314.734 ops/s
Iteration  15: 5479158.033 ops/s
Iteration  16: 5490538.948 ops/s
Iteration  17: 5405261.255 ops/s
Iteration  18: 5485128.618 ops/s
Iteration  19: 5499498.278 ops/s
Iteration  20: 5472567.783 ops/s
Iteration  21: 5509206.651 ops/s
Iteration  22: 5419342.237 ops/s
Iteration  23: 5509554.138 ops/s
Iteration  24: 5543636.875 ops/s
Iteration  25: 5457884.704 ops/s
Iteration  26: 5463891.143 ops/s
Iteration  27: 5513856.372 ops/s
Iteration  28: 5478787.873 ops/s
Iteration  29: 5506038.487 ops/s
Iteration  30: 5450884.714 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectCharWithBagTarget":
  5481861.919 ±(99.9%) 22356.461 ops/s [Average]
  (min, avg, max) = (5403591.540, 5481861.919, 5543636.875), stdev = 33462.101
  CI (99.9%): [5459505.458, 5504218.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  5481861.919 ± 22356.461  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1674229.889 ops/s
# Warmup Iteration   2: 3892046.273 ops/s
# Warmup Iteration   3: 3283232.076 ops/s
# Warmup Iteration   4: 3901752.336 ops/s
# Warmup Iteration   5: 3941997.188 ops/s
# Warmup Iteration   6: 3963629.722 ops/s
# Warmup Iteration   7: 3964565.069 ops/s
# Warmup Iteration   8: 3934392.978 ops/s
# Warmup Iteration   9: 3965872.121 ops/s
# Warmup Iteration  10: 3965215.377 ops/s
# Warmup Iteration  11: 3966534.808 ops/s
# Warmup Iteration  12: 3967526.282 ops/s
# Warmup Iteration  13: 3962064.707 ops/s
# Warmup Iteration  14: 3925139.066 ops/s
# Warmup Iteration  15: 3925573.054 ops/s
# Warmup Iteration  16: 3929053.419 ops/s
# Warmup Iteration  17: 3940415.288 ops/s
# Warmup Iteration  18: 3930296.550 ops/s
# Warmup Iteration  19: 3931580.900 ops/s
# Warmup Iteration  20: 3909647.615 ops/s
# Warmup Iteration  21: 3946976.356 ops/s
# Warmup Iteration  22: 3929221.202 ops/s
# Warmup Iteration  23: 3949742.205 ops/s
# Warmup Iteration  24: 3907760.383 ops/s
# Warmup Iteration  25: 3909525.155 ops/s
# Warmup Iteration  26: 3918966.587 ops/s
# Warmup Iteration  27: 3883929.751 ops/s
# Warmup Iteration  28: 3940731.641 ops/s
# Warmup Iteration  29: 3922486.493 ops/s
# Warmup Iteration  30: 3950472.392 ops/s
Iteration   1: 3887690.054 ops/s
Iteration   2: 3946016.719 ops/s
Iteration   3: 3867165.746 ops/s
Iteration   4: 3878464.258 ops/s
Iteration   5: 3943849.000 ops/s
Iteration   6: 3938725.109 ops/s
Iteration   7: 3934225.187 ops/s
Iteration   8: 3936896.824 ops/s
Iteration   9: 3888226.944 ops/s
Iteration  10: 3943872.512 ops/s
Iteration  11: 3946997.352 ops/s
Iteration  12: 3950882.770 ops/s
Iteration  13: 3944179.964 ops/s
Iteration  14: 3949368.221 ops/s
Iteration  15: 3950600.535 ops/s
Iteration  16: 3938972.042 ops/s
Iteration  17: 3946625.757 ops/s
Iteration  18: 3925226.232 ops/s
Iteration  19: 3939345.856 ops/s
Iteration  20: 3950579.159 ops/s
Iteration  21: 3960290.971 ops/s
Iteration  22: 3862821.825 ops/s
Iteration  23: 3953856.982 ops/s
Iteration  24: 3955928.800 ops/s
Iteration  25: 3948567.862 ops/s
Iteration  26: 3930334.877 ops/s
Iteration  27: 3946290.043 ops/s
Iteration  28: 3946735.754 ops/s
Iteration  29: 3951376.215 ops/s
Iteration  30: 3947511.673 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectCharWithTarget":
  3933720.841 ±(99.9%) 18169.616 ops/s [Average]
  (min, avg, max) = (3862821.825, 3933720.841, 3960290.971), stdev = 27195.428
  CI (99.9%): [3915551.226, 3951890.457] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  3933720.841 ± 18169.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 506930.478 ops/s
# Warmup Iteration   2: 1090422.791 ops/s
# Warmup Iteration   3: 1104414.307 ops/s
# Warmup Iteration   4: 927152.576 ops/s
# Warmup Iteration   5: 1102002.827 ops/s
# Warmup Iteration   6: 1100506.415 ops/s
# Warmup Iteration   7: 1097896.618 ops/s
# Warmup Iteration   8: 1104406.539 ops/s
# Warmup Iteration   9: 1083566.693 ops/s
# Warmup Iteration  10: 1101967.042 ops/s
# Warmup Iteration  11: 1101449.505 ops/s
# Warmup Iteration  12: 1097329.006 ops/s
# Warmup Iteration  13: 1098673.499 ops/s
# Warmup Iteration  14: 1103069.495 ops/s
# Warmup Iteration  15: 1099713.291 ops/s
# Warmup Iteration  16: 1101789.773 ops/s
# Warmup Iteration  17: 1092983.151 ops/s
# Warmup Iteration  18: 1102937.340 ops/s
# Warmup Iteration  19: 1087477.098 ops/s
# Warmup Iteration  20: 1094891.539 ops/s
# Warmup Iteration  21: 1068361.714 ops/s
# Warmup Iteration  22: 1098097.211 ops/s
# Warmup Iteration  23: 1104396.331 ops/s
# Warmup Iteration  24: 1104157.738 ops/s
# Warmup Iteration  25: 1096092.132 ops/s
# Warmup Iteration  26: 1097427.743 ops/s
# Warmup Iteration  27: 1102701.648 ops/s
# Warmup Iteration  28: 1105699.597 ops/s
# Warmup Iteration  29: 1100236.598 ops/s
# Warmup Iteration  30: 1099935.313 ops/s
Iteration   1: 1103551.535 ops/s
Iteration   2: 1105246.813 ops/s
Iteration   3: 1104063.241 ops/s
Iteration   4: 1086572.087 ops/s
Iteration   5: 1097846.453 ops/s
Iteration   6: 1084260.797 ops/s
Iteration   7: 1097638.504 ops/s
Iteration   8: 1102421.248 ops/s
Iteration   9: 1105558.967 ops/s
Iteration  10: 1102256.225 ops/s
Iteration  11: 1091144.404 ops/s
Iteration  12: 1107509.105 ops/s
Iteration  13: 1085556.179 ops/s
Iteration  14: 1095905.747 ops/s
Iteration  15: 1101569.010 ops/s
Iteration  16: 1105917.709 ops/s
Iteration  17: 1107633.390 ops/s
Iteration  18: 1108144.292 ops/s
Iteration  19: 1092531.464 ops/s
Iteration  20: 1106967.581 ops/s
Iteration  21: 1089029.486 ops/s
Iteration  22: 1103867.644 ops/s
Iteration  23: 1107436.489 ops/s
Iteration  24: 1101815.229 ops/s
Iteration  25: 1096327.159 ops/s
Iteration  26: 1100773.634 ops/s
Iteration  27: 1101081.478 ops/s
Iteration  28: 1086339.231 ops/s
Iteration  29: 1104053.336 ops/s
Iteration  30: 1097719.106 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectDouble":
  1099357.918 ±(99.9%) 4913.367 ops/s [Average]
  (min, avg, max) = (1084260.797, 1099357.918, 1108144.292), stdev = 7354.097
  CI (99.9%): [1094444.551, 1104271.285] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectDouble  thrpt   30  1099357.918 ± 4913.367  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1610603.318 ops/s
# Warmup Iteration   2: 3670576.720 ops/s
# Warmup Iteration   3: 3106630.336 ops/s
# Warmup Iteration   4: 3775497.670 ops/s
# Warmup Iteration   5: 3784484.759 ops/s
# Warmup Iteration   6: 3787934.420 ops/s
# Warmup Iteration   7: 3752056.325 ops/s
# Warmup Iteration   8: 3752830.041 ops/s
# Warmup Iteration   9: 3795406.681 ops/s
# Warmup Iteration  10: 3793163.862 ops/s
# Warmup Iteration  11: 3793612.179 ops/s
# Warmup Iteration  12: 3770800.597 ops/s
# Warmup Iteration  13: 3795522.237 ops/s
# Warmup Iteration  14: 3792604.900 ops/s
# Warmup Iteration  15: 3800084.945 ops/s
# Warmup Iteration  16: 3759047.360 ops/s
# Warmup Iteration  17: 3765372.364 ops/s
# Warmup Iteration  18: 3757676.087 ops/s
# Warmup Iteration  19: 3776530.864 ops/s
# Warmup Iteration  20: 3744013.439 ops/s
# Warmup Iteration  21: 3794248.261 ops/s
# Warmup Iteration  22: 3779966.875 ops/s
# Warmup Iteration  23: 3784838.200 ops/s
# Warmup Iteration  24: 3776459.925 ops/s
# Warmup Iteration  25: 3772081.572 ops/s
# Warmup Iteration  26: 3734510.462 ops/s
# Warmup Iteration  27: 3793937.006 ops/s
# Warmup Iteration  28: 3789129.912 ops/s
# Warmup Iteration  29: 3788925.113 ops/s
# Warmup Iteration  30: 3789591.536 ops/s
Iteration   1: 3806512.249 ops/s
Iteration   2: 3716143.407 ops/s
Iteration   3: 3767838.005 ops/s
Iteration   4: 3763977.929 ops/s
Iteration   5: 3795758.038 ops/s
Iteration   6: 3740453.789 ops/s
Iteration   7: 3773143.010 ops/s
Iteration   8: 3781185.005 ops/s
Iteration   9: 3783915.523 ops/s
Iteration  10: 3750030.004 ops/s
Iteration  11: 3755138.056 ops/s
Iteration  12: 3780795.649 ops/s
Iteration  13: 3771889.867 ops/s
Iteration  14: 3809044.150 ops/s
Iteration  15: 3786608.241 ops/s
Iteration  16: 3804595.678 ops/s
Iteration  17: 3779524.811 ops/s
Iteration  18: 3766197.443 ops/s
Iteration  19: 3790244.526 ops/s
Iteration  20: 3776057.785 ops/s
Iteration  21: 3770608.121 ops/s
Iteration  22: 3786142.139 ops/s
Iteration  23: 3798228.709 ops/s
Iteration  24: 3793464.539 ops/s
Iteration  25: 3723591.518 ops/s
Iteration  26: 3754373.205 ops/s
Iteration  27: 3789683.885 ops/s
Iteration  28: 3813003.748 ops/s
Iteration  29: 3783574.895 ops/s
Iteration  30: 3788662.935 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  3776679.562 ±(99.9%) 15627.097 ops/s [Average]
  (min, avg, max) = (3716143.407, 3776679.562, 3813003.748), stdev = 23389.905
  CI (99.9%): [3761052.465, 3792306.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  3776679.562 ± 15627.097  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1178087.756 ops/s
# Warmup Iteration   2: 2832182.676 ops/s
# Warmup Iteration   3: 2581135.913 ops/s
# Warmup Iteration   4: 2718141.483 ops/s
# Warmup Iteration   5: 2898112.952 ops/s
# Warmup Iteration   6: 2899615.898 ops/s
# Warmup Iteration   7: 2898698.491 ops/s
# Warmup Iteration   8: 2869419.639 ops/s
# Warmup Iteration   9: 2866697.712 ops/s
# Warmup Iteration  10: 2867539.423 ops/s
# Warmup Iteration  11: 2914495.991 ops/s
# Warmup Iteration  12: 2911469.436 ops/s
# Warmup Iteration  13: 2903490.637 ops/s
# Warmup Iteration  14: 2905698.001 ops/s
# Warmup Iteration  15: 2906860.629 ops/s
# Warmup Iteration  16: 2890304.565 ops/s
# Warmup Iteration  17: 2899736.535 ops/s
# Warmup Iteration  18: 2901857.736 ops/s
# Warmup Iteration  19: 2885532.825 ops/s
# Warmup Iteration  20: 2897753.043 ops/s
# Warmup Iteration  21: 2898822.915 ops/s
# Warmup Iteration  22: 2904107.188 ops/s
# Warmup Iteration  23: 2907569.873 ops/s
# Warmup Iteration  24: 2876456.040 ops/s
# Warmup Iteration  25: 2901221.939 ops/s
# Warmup Iteration  26: 2914903.617 ops/s
# Warmup Iteration  27: 2889597.994 ops/s
# Warmup Iteration  28: 2898953.401 ops/s
# Warmup Iteration  29: 2883121.367 ops/s
# Warmup Iteration  30: 2917079.634 ops/s
Iteration   1: 2906178.429 ops/s
Iteration   2: 2851986.955 ops/s
Iteration   3: 2913726.631 ops/s
Iteration   4: 2906525.725 ops/s
Iteration   5: 2905663.376 ops/s
Iteration   6: 2901037.424 ops/s
Iteration   7: 2815156.505 ops/s
Iteration   8: 2905874.666 ops/s
Iteration   9: 2909413.093 ops/s
Iteration  10: 2908596.414 ops/s
Iteration  11: 2895895.051 ops/s
Iteration  12: 2903856.317 ops/s
Iteration  13: 2896548.853 ops/s
Iteration  14: 2902323.716 ops/s
Iteration  15: 2884814.148 ops/s
Iteration  16: 2902308.305 ops/s
Iteration  17: 2903807.511 ops/s
Iteration  18: 2908845.770 ops/s
Iteration  19: 2895039.922 ops/s
Iteration  20: 2902213.573 ops/s
Iteration  21: 2880067.181 ops/s
Iteration  22: 2906255.780 ops/s
Iteration  23: 2892057.162 ops/s
Iteration  24: 2911667.203 ops/s
Iteration  25: 2885271.954 ops/s
Iteration  26: 2910660.756 ops/s
Iteration  27: 2850924.000 ops/s
Iteration  28: 2889038.841 ops/s
Iteration  29: 2908769.875 ops/s
Iteration  30: 2922023.763 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectDoubleWithTarget":
  2895884.963 ±(99.9%) 14658.120 ops/s [Average]
  (min, avg, max) = (2815156.505, 2895884.963, 2922023.763), stdev = 21939.585
  CI (99.9%): [2881226.843, 2910543.083] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  2895884.963 ± 14658.120  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 546655.414 ops/s
# Warmup Iteration   2: 1274214.617 ops/s
# Warmup Iteration   3: 1302629.957 ops/s
# Warmup Iteration   4: 1080066.935 ops/s
# Warmup Iteration   5: 1299081.403 ops/s
# Warmup Iteration   6: 1292261.692 ops/s
# Warmup Iteration   7: 1300162.566 ops/s
# Warmup Iteration   8: 1300412.402 ops/s
# Warmup Iteration   9: 1306425.183 ops/s
# Warmup Iteration  10: 1296584.890 ops/s
# Warmup Iteration  11: 1293208.644 ops/s
# Warmup Iteration  12: 1301080.815 ops/s
# Warmup Iteration  13: 1298054.179 ops/s
# Warmup Iteration  14: 1300723.320 ops/s
# Warmup Iteration  15: 1296784.304 ops/s
# Warmup Iteration  16: 1296252.968 ops/s
# Warmup Iteration  17: 1283696.144 ops/s
# Warmup Iteration  18: 1308211.217 ops/s
# Warmup Iteration  19: 1302121.960 ops/s
# Warmup Iteration  20: 1296704.893 ops/s
# Warmup Iteration  21: 1306009.918 ops/s
# Warmup Iteration  22: 1301207.469 ops/s
# Warmup Iteration  23: 1297595.806 ops/s
# Warmup Iteration  24: 1307589.129 ops/s
# Warmup Iteration  25: 1298526.942 ops/s
# Warmup Iteration  26: 1301115.182 ops/s
# Warmup Iteration  27: 1304391.981 ops/s
# Warmup Iteration  28: 1308232.206 ops/s
# Warmup Iteration  29: 1293246.560 ops/s
# Warmup Iteration  30: 1300933.963 ops/s
Iteration   1: 1264351.554 ops/s
Iteration   2: 1311030.536 ops/s
Iteration   3: 1301641.512 ops/s
Iteration   4: 1297957.028 ops/s
Iteration   5: 1297287.268 ops/s
Iteration   6: 1300472.538 ops/s
Iteration   7: 1297774.221 ops/s
Iteration   8: 1307156.704 ops/s
Iteration   9: 1299839.201 ops/s
Iteration  10: 1301565.083 ops/s
Iteration  11: 1305392.819 ops/s
Iteration  12: 1300065.298 ops/s
Iteration  13: 1277632.370 ops/s
Iteration  14: 1308078.569 ops/s
Iteration  15: 1285401.727 ops/s
Iteration  16: 1302391.142 ops/s
Iteration  17: 1303553.146 ops/s
Iteration  18: 1309964.930 ops/s
Iteration  19: 1310536.617 ops/s
Iteration  20: 1307928.323 ops/s
Iteration  21: 1291099.002 ops/s
Iteration  22: 1308864.296 ops/s
Iteration  23: 1298124.539 ops/s
Iteration  24: 1296893.052 ops/s
Iteration  25: 1311130.474 ops/s
Iteration  26: 1297467.567 ops/s
Iteration  27: 1284312.686 ops/s
Iteration  28: 1297651.232 ops/s
Iteration  29: 1298717.657 ops/s
Iteration  30: 1302308.958 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectFloat":
  1299219.668 ±(99.9%) 6914.872 ops/s [Average]
  (min, avg, max) = (1264351.554, 1299219.668, 1311130.474), stdev = 10349.855
  CI (99.9%): [1292304.797, 1306134.540] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectFloat  thrpt   30  1299219.668 ± 6914.872  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1911439.187 ops/s
# Warmup Iteration   2: 4277576.525 ops/s
# Warmup Iteration   3: 3641857.271 ops/s
# Warmup Iteration   4: 4342765.493 ops/s
# Warmup Iteration   5: 4371275.438 ops/s
# Warmup Iteration   6: 4356957.740 ops/s
# Warmup Iteration   7: 4348638.046 ops/s
# Warmup Iteration   8: 4328448.277 ops/s
# Warmup Iteration   9: 4370632.852 ops/s
# Warmup Iteration  10: 4350852.658 ops/s
# Warmup Iteration  11: 4369403.070 ops/s
# Warmup Iteration  12: 4355495.519 ops/s
# Warmup Iteration  13: 4374070.517 ops/s
# Warmup Iteration  14: 4373306.969 ops/s
# Warmup Iteration  15: 4314033.022 ops/s
# Warmup Iteration  16: 4352601.737 ops/s
# Warmup Iteration  17: 4358330.179 ops/s
# Warmup Iteration  18: 4358887.893 ops/s
# Warmup Iteration  19: 4382557.456 ops/s
# Warmup Iteration  20: 4377388.964 ops/s
# Warmup Iteration  21: 4353515.508 ops/s
# Warmup Iteration  22: 4389382.966 ops/s
# Warmup Iteration  23: 4364413.623 ops/s
# Warmup Iteration  24: 4375497.957 ops/s
# Warmup Iteration  25: 4372501.269 ops/s
# Warmup Iteration  26: 4367836.139 ops/s
# Warmup Iteration  27: 4383028.532 ops/s
# Warmup Iteration  28: 4375064.855 ops/s
# Warmup Iteration  29: 4377483.568 ops/s
# Warmup Iteration  30: 4375632.542 ops/s
Iteration   1: 4381564.146 ops/s
Iteration   2: 4361923.434 ops/s
Iteration   3: 4376465.878 ops/s
Iteration   4: 4341769.624 ops/s
Iteration   5: 4391342.838 ops/s
Iteration   6: 4379558.229 ops/s
Iteration   7: 4308537.069 ops/s
Iteration   8: 4380820.575 ops/s
Iteration   9: 4377874.954 ops/s
Iteration  10: 4385647.749 ops/s
Iteration  11: 4357717.505 ops/s
Iteration  12: 4380093.477 ops/s
Iteration  13: 4376607.743 ops/s
Iteration  14: 4380112.155 ops/s
Iteration  15: 4369212.724 ops/s
Iteration  16: 4388000.798 ops/s
Iteration  17: 4366502.019 ops/s
Iteration  18: 4373440.485 ops/s
Iteration  19: 4379550.608 ops/s
Iteration  20: 4392919.964 ops/s
Iteration  21: 4390261.172 ops/s
Iteration  22: 4376184.197 ops/s
Iteration  23: 4313687.469 ops/s
Iteration  24: 4371725.842 ops/s
Iteration  25: 4377336.089 ops/s
Iteration  26: 4380753.924 ops/s
Iteration  27: 4379168.680 ops/s
Iteration  28: 4380093.902 ops/s
Iteration  29: 4343300.170 ops/s
Iteration  30: 4396459.990 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectFloatWithBagTarget":
  4371954.447 ±(99.9%) 13830.282 ops/s [Average]
  (min, avg, max) = (4308537.069, 4371954.447, 4396459.990), stdev = 20700.517
  CI (99.9%): [4358124.165, 4385784.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  4371954.447 ± 13830.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1365296.489 ops/s
# Warmup Iteration   2: 3276988.323 ops/s
# Warmup Iteration   3: 3123989.779 ops/s
# Warmup Iteration   4: 2934581.421 ops/s
# Warmup Iteration   5: 3325842.131 ops/s
# Warmup Iteration   6: 3332397.508 ops/s
# Warmup Iteration   7: 3316388.084 ops/s
# Warmup Iteration   8: 3331472.302 ops/s
# Warmup Iteration   9: 3330773.085 ops/s
# Warmup Iteration  10: 3289510.768 ops/s
# Warmup Iteration  11: 3325189.309 ops/s
# Warmup Iteration  12: 3328325.107 ops/s
# Warmup Iteration  13: 3318635.380 ops/s
# Warmup Iteration  14: 3331631.958 ops/s
# Warmup Iteration  15: 3318933.359 ops/s
# Warmup Iteration  16: 3344049.173 ops/s
# Warmup Iteration  17: 3319184.543 ops/s
# Warmup Iteration  18: 3310732.797 ops/s
# Warmup Iteration  19: 3319720.422 ops/s
# Warmup Iteration  20: 3342314.602 ops/s
# Warmup Iteration  21: 3290780.014 ops/s
# Warmup Iteration  22: 3291922.667 ops/s
# Warmup Iteration  23: 3285587.661 ops/s
# Warmup Iteration  24: 3291449.057 ops/s
# Warmup Iteration  25: 3323936.352 ops/s
# Warmup Iteration  26: 3339710.798 ops/s
# Warmup Iteration  27: 3334799.610 ops/s
# Warmup Iteration  28: 3330875.244 ops/s
# Warmup Iteration  29: 3327779.616 ops/s
# Warmup Iteration  30: 3325504.293 ops/s
Iteration   1: 3319533.337 ops/s
Iteration   2: 3332819.351 ops/s
Iteration   3: 3318555.150 ops/s
Iteration   4: 3330265.405 ops/s
Iteration   5: 3335519.806 ops/s
Iteration   6: 3327665.653 ops/s
Iteration   7: 3316842.475 ops/s
Iteration   8: 3311166.444 ops/s
Iteration   9: 3339418.660 ops/s
Iteration  10: 3330558.398 ops/s
Iteration  11: 3337780.484 ops/s
Iteration  12: 3325692.173 ops/s
Iteration  13: 3333840.531 ops/s
Iteration  14: 3328811.672 ops/s
Iteration  15: 3332043.831 ops/s
Iteration  16: 3292437.631 ops/s
Iteration  17: 3338223.019 ops/s
Iteration  18: 3316536.009 ops/s
Iteration  19: 3335840.199 ops/s
Iteration  20: 3321009.486 ops/s
Iteration  21: 3334250.932 ops/s
Iteration  22: 3308604.556 ops/s
Iteration  23: 3346652.794 ops/s
Iteration  24: 3326115.332 ops/s
Iteration  25: 3316235.545 ops/s
Iteration  26: 3338588.100 ops/s
Iteration  27: 3328622.703 ops/s
Iteration  28: 3324928.160 ops/s
Iteration  29: 3313871.668 ops/s
Iteration  30: 3323597.742 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectFloatWithTarget":
  3326200.908 ±(99.9%) 7549.374 ops/s [Average]
  (min, avg, max) = (3292437.631, 3326200.908, 3346652.794), stdev = 11299.548
  CI (99.9%): [3318651.535, 3333750.282] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  3326200.908 ± 7549.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1102145.944 ops/s
# Warmup Iteration   2: 2700199.324 ops/s
# Warmup Iteration   3: 2765671.060 ops/s
# Warmup Iteration   4: 2281750.225 ops/s
# Warmup Iteration   5: 2782456.266 ops/s
# Warmup Iteration   6: 2784422.202 ops/s
# Warmup Iteration   7: 2775023.102 ops/s
# Warmup Iteration   8: 2772659.901 ops/s
# Warmup Iteration   9: 2784557.214 ops/s
# Warmup Iteration  10: 2769949.642 ops/s
# Warmup Iteration  11: 2783991.635 ops/s
# Warmup Iteration  12: 2789731.048 ops/s
# Warmup Iteration  13: 2786084.377 ops/s
# Warmup Iteration  14: 2755144.684 ops/s
# Warmup Iteration  15: 2790863.615 ops/s
# Warmup Iteration  16: 2785019.606 ops/s
# Warmup Iteration  17: 2758065.781 ops/s
# Warmup Iteration  18: 2771394.737 ops/s
# Warmup Iteration  19: 2724457.586 ops/s
# Warmup Iteration  20: 2769637.900 ops/s
# Warmup Iteration  21: 2768331.314 ops/s
# Warmup Iteration  22: 2791387.784 ops/s
# Warmup Iteration  23: 2789085.455 ops/s
# Warmup Iteration  24: 2754861.474 ops/s
# Warmup Iteration  25: 2779763.003 ops/s
# Warmup Iteration  26: 2763049.013 ops/s
# Warmup Iteration  27: 2765773.729 ops/s
# Warmup Iteration  28: 2761651.962 ops/s
# Warmup Iteration  29: 2781062.843 ops/s
# Warmup Iteration  30: 2783894.455 ops/s
Iteration   1: 2774598.951 ops/s
Iteration   2: 2775405.760 ops/s
Iteration   3: 2771571.820 ops/s
Iteration   4: 2777044.652 ops/s
Iteration   5: 2772450.885 ops/s
Iteration   6: 2745879.951 ops/s
Iteration   7: 2789487.131 ops/s
Iteration   8: 2794593.198 ops/s
Iteration   9: 2784798.023 ops/s
Iteration  10: 2775389.205 ops/s
Iteration  11: 2766508.417 ops/s
Iteration  12: 2776177.129 ops/s
Iteration  13: 2780987.970 ops/s
Iteration  14: 2775731.496 ops/s
Iteration  15: 2771324.445 ops/s
Iteration  16: 2770025.909 ops/s
Iteration  17: 2786710.528 ops/s
Iteration  18: 2763489.498 ops/s
Iteration  19: 2767669.789 ops/s
Iteration  20: 2763707.233 ops/s
Iteration  21: 2782575.164 ops/s
Iteration  22: 2784854.582 ops/s
Iteration  23: 2777038.210 ops/s
Iteration  24: 2772962.401 ops/s
Iteration  25: 2780786.163 ops/s
Iteration  26: 2780205.570 ops/s
Iteration  27: 2731218.032 ops/s
Iteration  28: 2773514.521 ops/s
Iteration  29: 2765422.644 ops/s
Iteration  30: 2768019.244 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectIf":
  2773338.284 ±(99.9%) 8191.837 ops/s [Average]
  (min, avg, max) = (2731218.032, 2773338.284, 2794593.198), stdev = 12261.157
  CI (99.9%): [2765146.447, 2781530.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectIf  thrpt   30  2773338.284 ± 8191.837  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 594938.191 ops/s
# Warmup Iteration   2: 1447609.910 ops/s
# Warmup Iteration   3: 1446176.572 ops/s
# Warmup Iteration   4: 1219496.204 ops/s
# Warmup Iteration   5: 1454032.189 ops/s
# Warmup Iteration   6: 1464647.580 ops/s
# Warmup Iteration   7: 1455207.719 ops/s
# Warmup Iteration   8: 1454794.927 ops/s
# Warmup Iteration   9: 1438724.847 ops/s
# Warmup Iteration  10: 1463219.294 ops/s
# Warmup Iteration  11: 1457071.084 ops/s
# Warmup Iteration  12: 1457812.698 ops/s
# Warmup Iteration  13: 1461900.391 ops/s
# Warmup Iteration  14: 1461208.189 ops/s
# Warmup Iteration  15: 1460657.779 ops/s
# Warmup Iteration  16: 1457862.427 ops/s
# Warmup Iteration  17: 1448886.000 ops/s
# Warmup Iteration  18: 1467185.726 ops/s
# Warmup Iteration  19: 1468429.595 ops/s
# Warmup Iteration  20: 1462486.009 ops/s
# Warmup Iteration  21: 1459402.773 ops/s
# Warmup Iteration  22: 1463083.531 ops/s
# Warmup Iteration  23: 1452420.857 ops/s
# Warmup Iteration  24: 1458022.210 ops/s
# Warmup Iteration  25: 1457205.161 ops/s
# Warmup Iteration  26: 1451030.292 ops/s
# Warmup Iteration  27: 1432131.351 ops/s
# Warmup Iteration  28: 1459293.780 ops/s
# Warmup Iteration  29: 1463296.427 ops/s
# Warmup Iteration  30: 1444895.418 ops/s
Iteration   1: 1455678.891 ops/s
Iteration   2: 1448015.539 ops/s
Iteration   3: 1418225.878 ops/s
Iteration   4: 1457550.045 ops/s
Iteration   5: 1411007.184 ops/s
Iteration   6: 1460274.118 ops/s
Iteration   7: 1458401.415 ops/s
Iteration   8: 1464043.258 ops/s
Iteration   9: 1461884.958 ops/s
Iteration  10: 1455104.345 ops/s
Iteration  11: 1458592.358 ops/s
Iteration  12: 1458766.693 ops/s
Iteration  13: 1463089.625 ops/s
Iteration  14: 1448046.000 ops/s
Iteration  15: 1441675.424 ops/s
Iteration  16: 1461969.147 ops/s
Iteration  17: 1468502.207 ops/s
Iteration  18: 1440704.775 ops/s
Iteration  19: 1454277.188 ops/s
Iteration  20: 1462507.270 ops/s
Iteration  21: 1452573.192 ops/s
Iteration  22: 1449538.472 ops/s
Iteration  23: 1463205.230 ops/s
Iteration  24: 1461917.536 ops/s
Iteration  25: 1458973.808 ops/s
Iteration  26: 1466524.759 ops/s
Iteration  27: 1456638.749 ops/s
Iteration  28: 1460111.855 ops/s
Iteration  29: 1456172.119 ops/s
Iteration  30: 1465503.850 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectInt":
  1454649.196 ±(99.9%) 8558.644 ops/s [Average]
  (min, avg, max) = (1411007.184, 1454649.196, 1468502.207), stdev = 12810.176
  CI (99.9%): [1446090.553, 1463207.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectInt  thrpt   30  1454649.196 ± 8558.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2079657.089 ops/s
# Warmup Iteration   2: 4985055.327 ops/s
# Warmup Iteration   3: 4074312.760 ops/s
# Warmup Iteration   4: 4891813.516 ops/s
# Warmup Iteration   5: 4911520.691 ops/s
# Warmup Iteration   6: 4878425.373 ops/s
# Warmup Iteration   7: 4913366.186 ops/s
# Warmup Iteration   8: 4913919.294 ops/s
# Warmup Iteration   9: 4889146.504 ops/s
# Warmup Iteration  10: 4860582.589 ops/s
# Warmup Iteration  11: 4896541.528 ops/s
# Warmup Iteration  12: 4858162.648 ops/s
# Warmup Iteration  13: 4862728.544 ops/s
# Warmup Iteration  14: 4891228.383 ops/s
# Warmup Iteration  15: 4864574.343 ops/s
# Warmup Iteration  16: 4915246.898 ops/s
# Warmup Iteration  17: 4892790.985 ops/s
# Warmup Iteration  18: 4871070.328 ops/s
# Warmup Iteration  19: 4904468.044 ops/s
# Warmup Iteration  20: 4917320.111 ops/s
# Warmup Iteration  21: 4900619.381 ops/s
# Warmup Iteration  22: 4850786.838 ops/s
# Warmup Iteration  23: 4891018.492 ops/s
# Warmup Iteration  24: 4891372.649 ops/s
# Warmup Iteration  25: 4914452.902 ops/s
# Warmup Iteration  26: 4913033.003 ops/s
# Warmup Iteration  27: 4900126.553 ops/s
# Warmup Iteration  28: 4914065.910 ops/s
# Warmup Iteration  29: 4879714.579 ops/s
# Warmup Iteration  30: 4919735.043 ops/s
Iteration   1: 4886751.861 ops/s
Iteration   2: 4846565.402 ops/s
Iteration   3: 4915732.001 ops/s
Iteration   4: 4936955.036 ops/s
Iteration   5: 4883121.303 ops/s
Iteration   6: 4909102.394 ops/s
Iteration   7: 4917737.804 ops/s
Iteration   8: 4892566.712 ops/s
Iteration   9: 4826214.830 ops/s
Iteration  10: 4886903.265 ops/s
Iteration  11: 4859098.174 ops/s
Iteration  12: 4920358.856 ops/s
Iteration  13: 4942389.299 ops/s
Iteration  14: 4938263.732 ops/s
Iteration  15: 4905414.771 ops/s
Iteration  16: 4922773.657 ops/s
Iteration  17: 4909827.690 ops/s
Iteration  18: 4825545.443 ops/s
Iteration  19: 4912381.836 ops/s
Iteration  20: 4895433.260 ops/s
Iteration  21: 4817148.119 ops/s
Iteration  22: 4895682.713 ops/s
Iteration  23: 4918353.014 ops/s
Iteration  24: 4842388.140 ops/s
Iteration  25: 4895502.830 ops/s
Iteration  26: 4874786.048 ops/s
Iteration  27: 4903694.041 ops/s
Iteration  28: 4898303.077 ops/s
Iteration  29: 4938284.667 ops/s
Iteration  30: 4861097.533 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectIntWithBagTarget":
  4892612.584 ±(99.9%) 23297.023 ops/s [Average]
  (min, avg, max) = (4817148.119, 4892612.584, 4942389.299), stdev = 34869.889
  CI (99.9%): [4869315.561, 4915909.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  4892612.584 ± 23297.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1527294.215 ops/s
# Warmup Iteration   2: 3671366.279 ops/s
# Warmup Iteration   3: 3179114.030 ops/s
# Warmup Iteration   4: 3625151.229 ops/s
# Warmup Iteration   5: 3720555.663 ops/s
# Warmup Iteration   6: 3734862.505 ops/s
# Warmup Iteration   7: 3749510.228 ops/s
# Warmup Iteration   8: 3733551.995 ops/s
# Warmup Iteration   9: 3715743.947 ops/s
# Warmup Iteration  10: 3711951.357 ops/s
# Warmup Iteration  11: 3744927.914 ops/s
# Warmup Iteration  12: 3712081.226 ops/s
# Warmup Iteration  13: 3736328.877 ops/s
# Warmup Iteration  14: 3732542.443 ops/s
# Warmup Iteration  15: 3730460.333 ops/s
# Warmup Iteration  16: 3705312.100 ops/s
# Warmup Iteration  17: 3736291.470 ops/s
# Warmup Iteration  18: 3714061.157 ops/s
# Warmup Iteration  19: 3719639.115 ops/s
# Warmup Iteration  20: 3702502.275 ops/s
# Warmup Iteration  21: 3728423.703 ops/s
# Warmup Iteration  22: 3722468.923 ops/s
# Warmup Iteration  23: 3735482.834 ops/s
# Warmup Iteration  24: 3724744.292 ops/s
# Warmup Iteration  25: 3724165.998 ops/s
# Warmup Iteration  26: 3692357.303 ops/s
# Warmup Iteration  27: 3719507.315 ops/s
# Warmup Iteration  28: 3724989.268 ops/s
# Warmup Iteration  29: 3738542.717 ops/s
# Warmup Iteration  30: 3736528.910 ops/s
Iteration   1: 3747590.824 ops/s
Iteration   2: 3716841.585 ops/s
Iteration   3: 3728531.250 ops/s
Iteration   4: 3731953.305 ops/s
Iteration   5: 3727062.576 ops/s
Iteration   6: 3664469.748 ops/s
Iteration   7: 3708185.956 ops/s
Iteration   8: 3729829.598 ops/s
Iteration   9: 3628717.576 ops/s
Iteration  10: 3722633.242 ops/s
Iteration  11: 3714926.820 ops/s
Iteration  12: 3752016.941 ops/s
Iteration  13: 3717289.559 ops/s
Iteration  14: 3708450.602 ops/s
Iteration  15: 3732883.211 ops/s
Iteration  16: 3659536.453 ops/s
Iteration  17: 3708392.130 ops/s
Iteration  18: 3711823.264 ops/s
Iteration  19: 3729947.502 ops/s
Iteration  20: 3686137.015 ops/s
Iteration  21: 3719116.153 ops/s
Iteration  22: 3713314.964 ops/s
Iteration  23: 3699747.480 ops/s
Iteration  24: 3709579.272 ops/s
Iteration  25: 3727781.345 ops/s
Iteration  26: 3727300.866 ops/s
Iteration  27: 3717854.144 ops/s
Iteration  28: 3716849.945 ops/s
Iteration  29: 3747301.866 ops/s
Iteration  30: 3725916.271 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectIntWithTarget":
  3714399.382 ±(99.9%) 17408.382 ops/s [Average]
  (min, avg, max) = (3628717.576, 3714399.382, 3752016.941), stdev = 26056.049
  CI (99.9%): [3696991.000, 3731807.764] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  3714399.382 ± 17408.382  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 552921.635 ops/s
# Warmup Iteration   2: 1194722.425 ops/s
# Warmup Iteration   3: 1196018.169 ops/s
# Warmup Iteration   4: 1014491.806 ops/s
# Warmup Iteration   5: 1189660.118 ops/s
# Warmup Iteration   6: 1191753.879 ops/s
# Warmup Iteration   7: 1202676.175 ops/s
# Warmup Iteration   8: 1207375.221 ops/s
# Warmup Iteration   9: 1190448.008 ops/s
# Warmup Iteration  10: 1192987.626 ops/s
# Warmup Iteration  11: 1200325.168 ops/s
# Warmup Iteration  12: 1192259.649 ops/s
# Warmup Iteration  13: 1202746.546 ops/s
# Warmup Iteration  14: 1200879.921 ops/s
# Warmup Iteration  15: 1206594.693 ops/s
# Warmup Iteration  16: 1203020.430 ops/s
# Warmup Iteration  17: 1205042.721 ops/s
# Warmup Iteration  18: 1202835.716 ops/s
# Warmup Iteration  19: 1199436.068 ops/s
# Warmup Iteration  20: 1190786.641 ops/s
# Warmup Iteration  21: 1205668.657 ops/s
# Warmup Iteration  22: 1205342.925 ops/s
# Warmup Iteration  23: 1210597.219 ops/s
# Warmup Iteration  24: 1201031.321 ops/s
# Warmup Iteration  25: 1208701.316 ops/s
# Warmup Iteration  26: 1204067.272 ops/s
# Warmup Iteration  27: 1197058.998 ops/s
# Warmup Iteration  28: 1210399.252 ops/s
# Warmup Iteration  29: 1198340.043 ops/s
# Warmup Iteration  30: 1206030.344 ops/s
Iteration   1: 1192497.130 ops/s
Iteration   2: 1210197.944 ops/s
Iteration   3: 1205161.184 ops/s
Iteration   4: 1207528.675 ops/s
Iteration   5: 1211511.513 ops/s
Iteration   6: 1207278.625 ops/s
Iteration   7: 1202183.619 ops/s
Iteration   8: 1203334.594 ops/s
Iteration   9: 1210017.467 ops/s
Iteration  10: 1198563.590 ops/s
Iteration  11: 1202580.750 ops/s
Iteration  12: 1171840.892 ops/s
Iteration  13: 1203402.102 ops/s
Iteration  14: 1203803.831 ops/s
Iteration  15: 1204797.444 ops/s
Iteration  16: 1198209.035 ops/s
Iteration  17: 1208077.281 ops/s
Iteration  18: 1199076.778 ops/s
Iteration  19: 1204128.605 ops/s
Iteration  20: 1210079.138 ops/s
Iteration  21: 1203384.671 ops/s
Iteration  22: 1211681.834 ops/s
Iteration  23: 1202940.601 ops/s
Iteration  24: 1206536.353 ops/s
Iteration  25: 1185360.569 ops/s
Iteration  26: 1211400.585 ops/s
Iteration  27: 1212325.917 ops/s
Iteration  28: 1206824.376 ops/s
Iteration  29: 1205447.848 ops/s
Iteration  30: 1211598.648 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectLong":
  1203725.720 ±(99.9%) 5649.887 ops/s [Average]
  (min, avg, max) = (1171840.892, 1203725.720, 1212325.917), stdev = 8456.485
  CI (99.9%): [1198075.833, 1209375.607] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectLong  thrpt   30  1203725.720 ± 5649.887  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1961604.288 ops/s
# Warmup Iteration   2: 4579746.083 ops/s
# Warmup Iteration   3: 3858331.651 ops/s
# Warmup Iteration   4: 4578632.574 ops/s
# Warmup Iteration   5: 4585147.007 ops/s
# Warmup Iteration   6: 4552817.585 ops/s
# Warmup Iteration   7: 4629960.016 ops/s
# Warmup Iteration   8: 4633663.290 ops/s
# Warmup Iteration   9: 4586024.660 ops/s
# Warmup Iteration  10: 4608943.373 ops/s
# Warmup Iteration  11: 4626578.364 ops/s
# Warmup Iteration  12: 4629997.510 ops/s
# Warmup Iteration  13: 4602565.223 ops/s
# Warmup Iteration  14: 4612879.951 ops/s
# Warmup Iteration  15: 4619571.146 ops/s
# Warmup Iteration  16: 4615058.687 ops/s
# Warmup Iteration  17: 4603816.468 ops/s
# Warmup Iteration  18: 4630824.659 ops/s
# Warmup Iteration  19: 4590832.118 ops/s
# Warmup Iteration  20: 4631872.667 ops/s
# Warmup Iteration  21: 4592916.655 ops/s
# Warmup Iteration  22: 4622589.477 ops/s
# Warmup Iteration  23: 4594051.954 ops/s
# Warmup Iteration  24: 4608493.585 ops/s
# Warmup Iteration  25: 4602213.591 ops/s
# Warmup Iteration  26: 4626452.531 ops/s
# Warmup Iteration  27: 4608179.009 ops/s
# Warmup Iteration  28: 4629586.027 ops/s
# Warmup Iteration  29: 4625927.114 ops/s
# Warmup Iteration  30: 4636308.814 ops/s
Iteration   1: 4578152.777 ops/s
Iteration   2: 4625201.432 ops/s
Iteration   3: 4662869.433 ops/s
Iteration   4: 4641361.394 ops/s
Iteration   5: 4629513.034 ops/s
Iteration   6: 4634128.562 ops/s
Iteration   7: 4624689.659 ops/s
Iteration   8: 4644730.064 ops/s
Iteration   9: 4645894.677 ops/s
Iteration  10: 4603283.897 ops/s
Iteration  11: 4617447.769 ops/s
Iteration  12: 4643378.332 ops/s
Iteration  13: 4655305.751 ops/s
Iteration  14: 4643721.556 ops/s
Iteration  15: 4629305.998 ops/s
Iteration  16: 4645798.252 ops/s
Iteration  17: 4591651.413 ops/s
Iteration  18: 4613021.707 ops/s
Iteration  19: 4569372.563 ops/s
Iteration  20: 4608512.046 ops/s
Iteration  21: 4629544.997 ops/s
Iteration  22: 4616639.682 ops/s
Iteration  23: 4658898.270 ops/s
Iteration  24: 4648482.002 ops/s
Iteration  25: 4628574.419 ops/s
Iteration  26: 4636142.751 ops/s
Iteration  27: 4579897.048 ops/s
Iteration  28: 4607606.913 ops/s
Iteration  29: 4641912.441 ops/s
Iteration  30: 4635220.609 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectLongWithBagTarget":
  4626341.981 ±(99.9%) 16001.894 ops/s [Average]
  (min, avg, max) = (4569372.563, 4626341.981, 4662869.433), stdev = 23950.884
  CI (99.9%): [4610340.087, 4642343.876] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  4626341.981 ± 16001.894  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1432564.454 ops/s
# Warmup Iteration   2: 3444634.263 ops/s
# Warmup Iteration   3: 2903398.191 ops/s
# Warmup Iteration   4: 3449179.869 ops/s
# Warmup Iteration   5: 3483489.261 ops/s
# Warmup Iteration   6: 3487539.903 ops/s
# Warmup Iteration   7: 3493782.767 ops/s
# Warmup Iteration   8: 3446180.142 ops/s
# Warmup Iteration   9: 3501097.717 ops/s
# Warmup Iteration  10: 3487378.141 ops/s
# Warmup Iteration  11: 3487543.192 ops/s
# Warmup Iteration  12: 3497270.829 ops/s
# Warmup Iteration  13: 3495615.915 ops/s
# Warmup Iteration  14: 3488313.372 ops/s
# Warmup Iteration  15: 3489324.661 ops/s
# Warmup Iteration  16: 3451087.794 ops/s
# Warmup Iteration  17: 3500046.481 ops/s
# Warmup Iteration  18: 3483617.160 ops/s
# Warmup Iteration  19: 3474338.776 ops/s
# Warmup Iteration  20: 3494223.333 ops/s
# Warmup Iteration  21: 3484143.393 ops/s
# Warmup Iteration  22: 3492104.140 ops/s
# Warmup Iteration  23: 3481961.457 ops/s
# Warmup Iteration  24: 3493878.662 ops/s
# Warmup Iteration  25: 3481823.306 ops/s
# Warmup Iteration  26: 3476284.439 ops/s
# Warmup Iteration  27: 3486392.247 ops/s
# Warmup Iteration  28: 3488609.305 ops/s
# Warmup Iteration  29: 3505102.840 ops/s
# Warmup Iteration  30: 3493157.614 ops/s
Iteration   1: 3485321.958 ops/s
Iteration   2: 3503576.367 ops/s
Iteration   3: 3491631.152 ops/s
Iteration   4: 3439334.200 ops/s
Iteration   5: 3470157.956 ops/s
Iteration   6: 3454945.069 ops/s
Iteration   7: 3480462.676 ops/s
Iteration   8: 3484603.218 ops/s
Iteration   9: 3496728.467 ops/s
Iteration  10: 3476983.504 ops/s
Iteration  11: 3446977.777 ops/s
Iteration  12: 3498856.185 ops/s
Iteration  13: 3412380.222 ops/s
Iteration  14: 3492506.851 ops/s
Iteration  15: 3495955.668 ops/s
Iteration  16: 3486271.715 ops/s
Iteration  17: 3485941.133 ops/s
Iteration  18: 3489154.915 ops/s
Iteration  19: 3485505.738 ops/s
Iteration  20: 3463914.178 ops/s
Iteration  21: 3463085.440 ops/s
Iteration  22: 3503936.903 ops/s
Iteration  23: 3487418.393 ops/s
Iteration  24: 3461967.881 ops/s
Iteration  25: 3468778.018 ops/s
Iteration  26: 3491653.902 ops/s
Iteration  27: 3499149.212 ops/s
Iteration  28: 3445959.683 ops/s
Iteration  29: 3491277.896 ops/s
Iteration  30: 3477069.539 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectLongWithTarget":
  3477716.861 ±(99.9%) 14303.050 ops/s [Average]
  (min, avg, max) = (3412380.222, 3477716.861, 3503936.903), stdev = 21408.134
  CI (99.9%): [3463413.810, 3492019.911] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  3477716.861 ± 14303.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 627512.669 ops/s
# Warmup Iteration   2: 1442632.224 ops/s
# Warmup Iteration   3: 1452033.210 ops/s
# Warmup Iteration   4: 1217115.139 ops/s
# Warmup Iteration   5: 1441640.350 ops/s
# Warmup Iteration   6: 1460005.027 ops/s
# Warmup Iteration   7: 1441890.376 ops/s
# Warmup Iteration   8: 1427749.273 ops/s
# Warmup Iteration   9: 1444231.264 ops/s
# Warmup Iteration  10: 1450550.002 ops/s
# Warmup Iteration  11: 1456855.487 ops/s
# Warmup Iteration  12: 1456032.167 ops/s
# Warmup Iteration  13: 1454164.942 ops/s
# Warmup Iteration  14: 1456241.353 ops/s
# Warmup Iteration  15: 1457335.040 ops/s
# Warmup Iteration  16: 1436424.893 ops/s
# Warmup Iteration  17: 1456248.111 ops/s
# Warmup Iteration  18: 1457073.092 ops/s
# Warmup Iteration  19: 1449704.913 ops/s
# Warmup Iteration  20: 1454326.435 ops/s
# Warmup Iteration  21: 1453838.958 ops/s
# Warmup Iteration  22: 1458587.405 ops/s
# Warmup Iteration  23: 1451596.376 ops/s
# Warmup Iteration  24: 1445544.051 ops/s
# Warmup Iteration  25: 1449431.723 ops/s
# Warmup Iteration  26: 1455292.393 ops/s
# Warmup Iteration  27: 1449521.999 ops/s
# Warmup Iteration  28: 1451235.437 ops/s
# Warmup Iteration  29: 1442033.418 ops/s
# Warmup Iteration  30: 1453241.587 ops/s
Iteration   1: 1449569.621 ops/s
Iteration   2: 1455691.319 ops/s
Iteration   3: 1448599.706 ops/s
Iteration   4: 1456805.141 ops/s
Iteration   5: 1459340.645 ops/s
Iteration   6: 1451961.346 ops/s
Iteration   7: 1455429.098 ops/s
Iteration   8: 1453555.255 ops/s
Iteration   9: 1448916.831 ops/s
Iteration  10: 1454153.705 ops/s
Iteration  11: 1455373.447 ops/s
Iteration  12: 1462240.269 ops/s
Iteration  13: 1462979.286 ops/s
Iteration  14: 1447790.185 ops/s
Iteration  15: 1420138.427 ops/s
Iteration  16: 1456117.868 ops/s
Iteration  17: 1454277.273 ops/s
Iteration  18: 1455436.294 ops/s
Iteration  19: 1434421.627 ops/s
Iteration  20: 1464959.095 ops/s
Iteration  21: 1457852.576 ops/s
Iteration  22: 1455343.324 ops/s
Iteration  23: 1453876.219 ops/s
Iteration  24: 1455498.690 ops/s
Iteration  25: 1451439.995 ops/s
Iteration  26: 1455254.184 ops/s
Iteration  27: 1449698.369 ops/s
Iteration  28: 1460313.452 ops/s
Iteration  29: 1458023.198 ops/s
Iteration  30: 1459290.949 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectShort":
  1453478.246 ±(99.9%) 5668.226 ops/s [Average]
  (min, avg, max) = (1420138.427, 1453478.246, 1464959.095), stdev = 8483.935
  CI (99.9%): [1447810.020, 1459146.473] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectShort  thrpt   30  1453478.246 ± 5668.226  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2109824.288 ops/s
# Warmup Iteration   2: 4738328.636 ops/s
# Warmup Iteration   3: 4007263.139 ops/s
# Warmup Iteration   4: 4798377.433 ops/s
# Warmup Iteration   5: 4820775.602 ops/s
# Warmup Iteration   6: 4803501.780 ops/s
# Warmup Iteration   7: 4804766.204 ops/s
# Warmup Iteration   8: 4793257.191 ops/s
# Warmup Iteration   9: 4805533.285 ops/s
# Warmup Iteration  10: 4785174.472 ops/s
# Warmup Iteration  11: 4776503.561 ops/s
# Warmup Iteration  12: 4815759.989 ops/s
# Warmup Iteration  13: 4814488.854 ops/s
# Warmup Iteration  14: 4803727.406 ops/s
# Warmup Iteration  15: 4764251.077 ops/s
# Warmup Iteration  16: 4818049.413 ops/s
# Warmup Iteration  17: 4756691.337 ops/s
# Warmup Iteration  18: 4843814.198 ops/s
# Warmup Iteration  19: 4834880.289 ops/s
# Warmup Iteration  20: 4785131.566 ops/s
# Warmup Iteration  21: 4815334.898 ops/s
# Warmup Iteration  22: 4794711.494 ops/s
# Warmup Iteration  23: 4787720.533 ops/s
# Warmup Iteration  24: 4830329.310 ops/s
# Warmup Iteration  25: 4806750.048 ops/s
# Warmup Iteration  26: 4801286.874 ops/s
# Warmup Iteration  27: 4751534.832 ops/s
# Warmup Iteration  28: 4821606.913 ops/s
# Warmup Iteration  29: 4791240.598 ops/s
# Warmup Iteration  30: 4818827.932 ops/s
Iteration   1: 4839078.100 ops/s
Iteration   2: 4841364.921 ops/s
Iteration   3: 4801242.927 ops/s
Iteration   4: 4821618.248 ops/s
Iteration   5: 4821662.373 ops/s
Iteration   6: 4805177.404 ops/s
Iteration   7: 4831019.285 ops/s
Iteration   8: 4823393.447 ops/s
Iteration   9: 4849524.154 ops/s
Iteration  10: 4816827.064 ops/s
Iteration  11: 4852783.171 ops/s
Iteration  12: 4814345.107 ops/s
Iteration  13: 4838495.051 ops/s
Iteration  14: 4822607.101 ops/s
Iteration  15: 4847302.428 ops/s
Iteration  16: 4827233.651 ops/s
Iteration  17: 4808545.628 ops/s
Iteration  18: 4820900.207 ops/s
Iteration  19: 4829224.854 ops/s
Iteration  20: 4828028.613 ops/s
Iteration  21: 4826014.880 ops/s
Iteration  22: 4827724.685 ops/s
Iteration  23: 4749697.380 ops/s
Iteration  24: 4787487.294 ops/s
Iteration  25: 4807287.379 ops/s
Iteration  26: 4812738.517 ops/s
Iteration  27: 4758462.072 ops/s
Iteration  28: 4829929.287 ops/s
Iteration  29: 4824701.948 ops/s
Iteration  30: 4750764.260 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectShortWithBagTarget":
  4817172.715 ±(99.9%) 17421.393 ops/s [Average]
  (min, avg, max) = (4749697.380, 4817172.715, 4852783.171), stdev = 26075.522
  CI (99.9%): [4799751.322, 4834594.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  4817172.715 ± 17421.393  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1633678.650 ops/s
# Warmup Iteration   2: 3827837.192 ops/s
# Warmup Iteration   3: 3353241.060 ops/s
# Warmup Iteration   4: 3974582.145 ops/s
# Warmup Iteration   5: 3958545.063 ops/s
# Warmup Iteration   6: 3910509.717 ops/s
# Warmup Iteration   7: 3950511.307 ops/s
# Warmup Iteration   8: 3985036.191 ops/s
# Warmup Iteration   9: 3990212.652 ops/s
# Warmup Iteration  10: 3940010.436 ops/s
# Warmup Iteration  11: 3996006.719 ops/s
# Warmup Iteration  12: 3976544.213 ops/s
# Warmup Iteration  13: 3965260.922 ops/s
# Warmup Iteration  14: 3883541.008 ops/s
# Warmup Iteration  15: 3977513.985 ops/s
# Warmup Iteration  16: 3979618.241 ops/s
# Warmup Iteration  17: 3948312.290 ops/s
# Warmup Iteration  18: 3943262.186 ops/s
# Warmup Iteration  19: 3967069.289 ops/s
# Warmup Iteration  20: 3973915.919 ops/s
# Warmup Iteration  21: 3888092.812 ops/s
# Warmup Iteration  22: 3945647.321 ops/s
# Warmup Iteration  23: 3951788.796 ops/s
# Warmup Iteration  24: 3972713.308 ops/s
# Warmup Iteration  25: 3953087.402 ops/s
# Warmup Iteration  26: 3911292.261 ops/s
# Warmup Iteration  27: 3947561.566 ops/s
# Warmup Iteration  28: 3918217.819 ops/s
# Warmup Iteration  29: 3914065.261 ops/s
# Warmup Iteration  30: 3933286.609 ops/s
Iteration   1: 3938571.958 ops/s
Iteration   2: 3930143.867 ops/s
Iteration   3: 3967056.860 ops/s
Iteration   4: 3974067.424 ops/s
Iteration   5: 3949096.754 ops/s
Iteration   6: 3950301.313 ops/s
Iteration   7: 3919651.235 ops/s
Iteration   8: 3981620.642 ops/s
Iteration   9: 3927264.141 ops/s
Iteration  10: 3963790.919 ops/s
Iteration  11: 3943954.982 ops/s
Iteration  12: 3905417.448 ops/s
Iteration  13: 3963960.917 ops/s
Iteration  14: 3963566.925 ops/s
Iteration  15: 3895414.154 ops/s
Iteration  16: 3898385.958 ops/s
Iteration  17: 3962927.656 ops/s
Iteration  18: 3957704.541 ops/s
Iteration  19: 3897913.755 ops/s
Iteration  20: 3945090.752 ops/s
Iteration  21: 3942220.558 ops/s
Iteration  22: 3987692.264 ops/s
Iteration  23: 3954473.920 ops/s
Iteration  24: 3950626.344 ops/s
Iteration  25: 3909861.787 ops/s
Iteration  26: 3976774.714 ops/s
Iteration  27: 3988696.803 ops/s
Iteration  28: 3968826.083 ops/s
Iteration  29: 3984393.570 ops/s
Iteration  30: 3962504.746 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectShortWithTarget":
  3948732.433 ±(99.9%) 18404.731 ops/s [Average]
  (min, avg, max) = (3895414.154, 3948732.433, 3988696.803), stdev = 27547.337
  CI (99.9%): [3930327.702, 3967137.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  3948732.433 ± 18404.731  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 127121.410 ops/s
# Warmup Iteration   2: 232834.569 ops/s
# Warmup Iteration   3: 276804.532 ops/s
# Warmup Iteration   4: 277481.697 ops/s
# Warmup Iteration   5: 278200.660 ops/s
# Warmup Iteration   6: 229295.522 ops/s
# Warmup Iteration   7: 278283.062 ops/s
# Warmup Iteration   8: 277703.409 ops/s
# Warmup Iteration   9: 278287.834 ops/s
# Warmup Iteration  10: 276352.013 ops/s
# Warmup Iteration  11: 277510.011 ops/s
# Warmup Iteration  12: 277519.518 ops/s
# Warmup Iteration  13: 277828.387 ops/s
# Warmup Iteration  14: 277677.846 ops/s
# Warmup Iteration  15: 277407.598 ops/s
# Warmup Iteration  16: 278307.146 ops/s
# Warmup Iteration  17: 274095.136 ops/s
# Warmup Iteration  18: 275709.283 ops/s
# Warmup Iteration  19: 277907.483 ops/s
# Warmup Iteration  20: 276718.098 ops/s
# Warmup Iteration  21: 277848.741 ops/s
# Warmup Iteration  22: 278438.954 ops/s
# Warmup Iteration  23: 274648.145 ops/s
# Warmup Iteration  24: 277415.431 ops/s
# Warmup Iteration  25: 277380.935 ops/s
# Warmup Iteration  26: 277640.510 ops/s
# Warmup Iteration  27: 278694.663 ops/s
# Warmup Iteration  28: 277713.949 ops/s
# Warmup Iteration  29: 276086.659 ops/s
# Warmup Iteration  30: 278691.493 ops/s
Iteration   1: 278773.302 ops/s
Iteration   2: 277380.862 ops/s
Iteration   3: 277929.124 ops/s
Iteration   4: 278856.879 ops/s
Iteration   5: 276700.705 ops/s
Iteration   6: 276391.025 ops/s
Iteration   7: 280209.062 ops/s
Iteration   8: 277808.244 ops/s
Iteration   9: 278714.322 ops/s
Iteration  10: 278839.438 ops/s
Iteration  11: 273607.705 ops/s
Iteration  12: 278367.203 ops/s
Iteration  13: 278556.840 ops/s
Iteration  14: 278457.372 ops/s
Iteration  15: 278436.601 ops/s
Iteration  16: 278271.336 ops/s
Iteration  17: 276394.874 ops/s
Iteration  18: 278430.427 ops/s
Iteration  19: 278548.022 ops/s
Iteration  20: 274215.971 ops/s
Iteration  21: 277740.781 ops/s
Iteration  22: 279827.221 ops/s
Iteration  23: 278498.436 ops/s
Iteration  24: 274554.186 ops/s
Iteration  25: 274465.636 ops/s
Iteration  26: 278589.105 ops/s
Iteration  27: 276093.129 ops/s
Iteration  28: 277908.770 ops/s
Iteration  29: 278345.524 ops/s
Iteration  30: 276464.275 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectTarget":
  277579.213 ±(99.9%) 1102.005 ops/s [Average]
  (min, avg, max) = (273607.705, 277579.213, 280209.062), stdev = 1649.430
  CI (99.9%): [276477.207, 278681.218] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectTarget  thrpt   30  277579.213 ± 1102.005  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1535134.075 ops/s
# Warmup Iteration   2: 3775469.871 ops/s
# Warmup Iteration   3: 3159222.333 ops/s
# Warmup Iteration   4: 3801789.647 ops/s
# Warmup Iteration   5: 3785658.947 ops/s
# Warmup Iteration   6: 3810883.381 ops/s
# Warmup Iteration   7: 3782664.719 ops/s
# Warmup Iteration   8: 3781514.210 ops/s
# Warmup Iteration   9: 3811212.426 ops/s
# Warmup Iteration  10: 3811039.772 ops/s
# Warmup Iteration  11: 3777675.070 ops/s
# Warmup Iteration  12: 3790198.416 ops/s
# Warmup Iteration  13: 3793874.158 ops/s
# Warmup Iteration  14: 3766089.469 ops/s
# Warmup Iteration  15: 3802686.235 ops/s
# Warmup Iteration  16: 3806102.527 ops/s
# Warmup Iteration  17: 3805048.262 ops/s
# Warmup Iteration  18: 3788853.303 ops/s
# Warmup Iteration  19: 3807121.996 ops/s
# Warmup Iteration  20: 3790381.166 ops/s
# Warmup Iteration  21: 3808994.625 ops/s
# Warmup Iteration  22: 3803412.702 ops/s
# Warmup Iteration  23: 3802974.962 ops/s
# Warmup Iteration  24: 3794302.550 ops/s
# Warmup Iteration  25: 3795390.954 ops/s
# Warmup Iteration  26: 3791613.572 ops/s
# Warmup Iteration  27: 3809024.673 ops/s
# Warmup Iteration  28: 3800479.119 ops/s
# Warmup Iteration  29: 3790121.577 ops/s
# Warmup Iteration  30: 3800328.801 ops/s
Iteration   1: 3777282.984 ops/s
Iteration   2: 3796595.315 ops/s
Iteration   3: 3777965.995 ops/s
Iteration   4: 3787729.512 ops/s
Iteration   5: 3797859.173 ops/s
Iteration   6: 3796637.536 ops/s
Iteration   7: 3797387.891 ops/s
Iteration   8: 3806460.255 ops/s
Iteration   9: 3805982.973 ops/s
Iteration  10: 3792581.230 ops/s
Iteration  11: 3734755.355 ops/s
Iteration  12: 3798207.044 ops/s
Iteration  13: 3786243.445 ops/s
Iteration  14: 3790166.151 ops/s
Iteration  15: 3812602.628 ops/s
Iteration  16: 3788159.087 ops/s
Iteration  17: 3803338.281 ops/s
Iteration  18: 3791706.080 ops/s
Iteration  19: 3809614.672 ops/s
Iteration  20: 3821771.708 ops/s
Iteration  21: 3799413.140 ops/s
Iteration  22: 3801859.093 ops/s
Iteration  23: 3795091.997 ops/s
Iteration  24: 3805071.382 ops/s
Iteration  25: 3772419.787 ops/s
Iteration  26: 3786775.825 ops/s
Iteration  27: 3724124.836 ops/s
Iteration  28: 3775029.423 ops/s
Iteration  29: 3800568.543 ops/s
Iteration  30: 3771064.465 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectWith":
  3790148.860 ±(99.9%) 13650.811 ops/s [Average]
  (min, avg, max) = (3724124.836, 3790148.860, 3821771.708), stdev = 20431.893
  CI (99.9%): [3776498.049, 3803799.671] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectWith  thrpt   30  3790148.860 ± 13650.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2542201.860 ops/s
# Warmup Iteration   2: 5969696.435 ops/s
# Warmup Iteration   3: 5076589.982 ops/s
# Warmup Iteration   4: 6117032.202 ops/s
# Warmup Iteration   5: 6078328.606 ops/s
# Warmup Iteration   6: 6051197.231 ops/s
# Warmup Iteration   7: 6050295.080 ops/s
# Warmup Iteration   8: 6101607.960 ops/s
# Warmup Iteration   9: 6103142.281 ops/s
# Warmup Iteration  10: 6060286.723 ops/s
# Warmup Iteration  11: 6104915.512 ops/s
# Warmup Iteration  12: 6031687.254 ops/s
# Warmup Iteration  13: 6054029.670 ops/s
# Warmup Iteration  14: 6076938.126 ops/s
# Warmup Iteration  15: 6100334.588 ops/s
# Warmup Iteration  16: 6109539.867 ops/s
# Warmup Iteration  17: 5992057.056 ops/s
# Warmup Iteration  18: 6046736.706 ops/s
# Warmup Iteration  19: 5975314.770 ops/s
# Warmup Iteration  20: 5962499.622 ops/s
# Warmup Iteration  21: 5976107.488 ops/s
# Warmup Iteration  22: 5994773.858 ops/s
# Warmup Iteration  23: 5954814.650 ops/s
# Warmup Iteration  24: 5977840.438 ops/s
# Warmup Iteration  25: 6004369.123 ops/s
# Warmup Iteration  26: 5971494.230 ops/s
# Warmup Iteration  27: 6007360.164 ops/s
# Warmup Iteration  28: 5970133.962 ops/s
# Warmup Iteration  29: 5998185.999 ops/s
# Warmup Iteration  30: 5988406.787 ops/s
Iteration   1: 5992279.791 ops/s
Iteration   2: 6022855.599 ops/s
Iteration   3: 6007259.203 ops/s
Iteration   4: 6016903.720 ops/s
Iteration   5: 5877335.877 ops/s
Iteration   6: 6013647.740 ops/s
Iteration   7: 5998992.779 ops/s
Iteration   8: 5895801.143 ops/s
Iteration   9: 5911159.497 ops/s
Iteration  10: 6011813.898 ops/s
Iteration  11: 6016542.394 ops/s
Iteration  12: 5998840.426 ops/s
Iteration  13: 6026769.759 ops/s
Iteration  14: 5989714.407 ops/s
Iteration  15: 5985155.452 ops/s
Iteration  16: 5892831.103 ops/s
Iteration  17: 5875253.283 ops/s
Iteration  18: 5992308.957 ops/s
Iteration  19: 5945215.649 ops/s
Iteration  20: 5990559.572 ops/s
Iteration  21: 6021006.469 ops/s
Iteration  22: 5999251.213 ops/s
Iteration  23: 6028595.168 ops/s
Iteration  24: 6016120.860 ops/s
Iteration  25: 5998919.186 ops/s
Iteration  26: 5925405.008 ops/s
Iteration  27: 6026254.508 ops/s
Iteration  28: 5994426.858 ops/s
Iteration  29: 6033139.690 ops/s
Iteration  30: 5994890.306 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectWithIndex":
  5983308.317 ±(99.9%) 32144.537 ops/s [Average]
  (min, avg, max) = (5875253.283, 5983308.317, 6033139.690), stdev = 48112.434
  CI (99.9%): [5951163.780, 6015452.854] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  5983308.317 ± 32144.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 612825.093 ops/s
# Warmup Iteration   2: 1751506.215 ops/s
# Warmup Iteration   3: 1746433.841 ops/s
# Warmup Iteration   4: 1474855.467 ops/s
# Warmup Iteration   5: 1755820.239 ops/s
# Warmup Iteration   6: 1769898.406 ops/s
# Warmup Iteration   7: 1762088.276 ops/s
# Warmup Iteration   8: 1772254.789 ops/s
# Warmup Iteration   9: 1768034.465 ops/s
# Warmup Iteration  10: 1777536.010 ops/s
# Warmup Iteration  11: 1773896.425 ops/s
# Warmup Iteration  12: 1770901.933 ops/s
# Warmup Iteration  13: 1773060.926 ops/s
# Warmup Iteration  14: 1769093.543 ops/s
# Warmup Iteration  15: 1763536.839 ops/s
# Warmup Iteration  16: 1778025.593 ops/s
# Warmup Iteration  17: 1777945.605 ops/s
# Warmup Iteration  18: 1773965.786 ops/s
# Warmup Iteration  19: 1765933.890 ops/s
# Warmup Iteration  20: 1777771.219 ops/s
# Warmup Iteration  21: 1772976.803 ops/s
# Warmup Iteration  22: 1743192.512 ops/s
# Warmup Iteration  23: 1751637.259 ops/s
# Warmup Iteration  24: 1772292.984 ops/s
# Warmup Iteration  25: 1760942.122 ops/s
# Warmup Iteration  26: 1775627.020 ops/s
# Warmup Iteration  27: 1770892.145 ops/s
# Warmup Iteration  28: 1770707.078 ops/s
# Warmup Iteration  29: 1776275.136 ops/s
# Warmup Iteration  30: 1775602.287 ops/s
Iteration   1: 1738809.943 ops/s
Iteration   2: 1766116.151 ops/s
Iteration   3: 1775036.644 ops/s
Iteration   4: 1775797.499 ops/s
Iteration   5: 1751377.406 ops/s
Iteration   6: 1771019.551 ops/s
Iteration   7: 1771025.981 ops/s
Iteration   8: 1768541.714 ops/s
Iteration   9: 1779452.844 ops/s
Iteration  10: 1768339.180 ops/s
Iteration  11: 1762012.578 ops/s
Iteration  12: 1774434.037 ops/s
Iteration  13: 1775402.024 ops/s
Iteration  14: 1769096.345 ops/s
Iteration  15: 1774195.617 ops/s
Iteration  16: 1770634.994 ops/s
Iteration  17: 1776420.288 ops/s
Iteration  18: 1756422.163 ops/s
Iteration  19: 1772538.811 ops/s
Iteration  20: 1769995.289 ops/s
Iteration  21: 1774982.563 ops/s
Iteration  22: 1771850.105 ops/s
Iteration  23: 1773561.014 ops/s
Iteration  24: 1758646.709 ops/s
Iteration  25: 1768597.581 ops/s
Iteration  26: 1764146.551 ops/s
Iteration  27: 1771934.733 ops/s
Iteration  28: 1742311.249 ops/s
Iteration  29: 1773919.416 ops/s
Iteration  30: 1769040.276 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  1767855.308 ±(99.9%) 6456.487 ops/s [Average]
  (min, avg, max) = (1738809.943, 1767855.308, 1779452.844), stdev = 9663.767
  CI (99.9%): [1761398.821, 1774311.796] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  1767855.308 ± 6456.487  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 134627.745 ops/s
# Warmup Iteration   2: 246776.509 ops/s
# Warmup Iteration   3: 290484.107 ops/s
# Warmup Iteration   4: 292080.792 ops/s
# Warmup Iteration   5: 293567.755 ops/s
# Warmup Iteration   6: 240716.730 ops/s
# Warmup Iteration   7: 293565.464 ops/s
# Warmup Iteration   8: 294565.955 ops/s
# Warmup Iteration   9: 290530.786 ops/s
# Warmup Iteration  10: 293191.267 ops/s
# Warmup Iteration  11: 294034.613 ops/s
# Warmup Iteration  12: 291021.191 ops/s
# Warmup Iteration  13: 290533.708 ops/s
# Warmup Iteration  14: 292455.555 ops/s
# Warmup Iteration  15: 293578.944 ops/s
# Warmup Iteration  16: 288992.849 ops/s
# Warmup Iteration  17: 293210.696 ops/s
# Warmup Iteration  18: 291524.628 ops/s
# Warmup Iteration  19: 292622.040 ops/s
# Warmup Iteration  20: 294163.195 ops/s
# Warmup Iteration  21: 291484.101 ops/s
# Warmup Iteration  22: 290979.807 ops/s
# Warmup Iteration  23: 292096.929 ops/s
# Warmup Iteration  24: 292185.603 ops/s
# Warmup Iteration  25: 293373.622 ops/s
# Warmup Iteration  26: 293471.238 ops/s
# Warmup Iteration  27: 294037.777 ops/s
# Warmup Iteration  28: 293384.141 ops/s
# Warmup Iteration  29: 292977.016 ops/s
# Warmup Iteration  30: 293596.502 ops/s
Iteration   1: 291849.963 ops/s
Iteration   2: 292698.553 ops/s
Iteration   3: 289638.494 ops/s
Iteration   4: 293342.380 ops/s
Iteration   5: 293602.866 ops/s
Iteration   6: 293972.192 ops/s
Iteration   7: 293944.135 ops/s
Iteration   8: 291178.060 ops/s
Iteration   9: 294805.910 ops/s
Iteration  10: 292996.649 ops/s
Iteration  11: 294979.600 ops/s
Iteration  12: 292779.560 ops/s
Iteration  13: 291809.727 ops/s
Iteration  14: 292916.473 ops/s
Iteration  15: 292428.215 ops/s
Iteration  16: 292660.650 ops/s
Iteration  17: 295316.785 ops/s
Iteration  18: 294683.808 ops/s
Iteration  19: 292530.611 ops/s
Iteration  20: 293780.539 ops/s
Iteration  21: 294787.613 ops/s
Iteration  22: 290720.071 ops/s
Iteration  23: 294365.552 ops/s
Iteration  24: 294110.718 ops/s
Iteration  25: 294885.002 ops/s
Iteration  26: 292470.048 ops/s
Iteration  27: 293682.669 ops/s
Iteration  28: 289688.743 ops/s
Iteration  29: 294118.181 ops/s
Iteration  30: 287486.674 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_collectWith_target":
  292941.015 ±(99.9%) 1207.814 ops/s [Average]
  (min, avg, max) = (287486.674, 292941.015, 295316.785), stdev = 1807.799
  CI (99.9%): [291733.201, 294148.829] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_collectWith_target  thrpt   30  292941.015 ± 1207.814  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3986881.515 ops/s
# Warmup Iteration   2: 7563997.107 ops/s
# Warmup Iteration   3: 7814567.008 ops/s
# Warmup Iteration   4: 7813179.023 ops/s
# Warmup Iteration   5: 6507450.263 ops/s
# Warmup Iteration   6: 7872705.572 ops/s
# Warmup Iteration   7: 7846851.827 ops/s
# Warmup Iteration   8: 7863918.664 ops/s
# Warmup Iteration   9: 7774384.655 ops/s
# Warmup Iteration  10: 7866467.114 ops/s
# Warmup Iteration  11: 7723525.308 ops/s
# Warmup Iteration  12: 7879772.663 ops/s
# Warmup Iteration  13: 7738016.265 ops/s
# Warmup Iteration  14: 7843848.515 ops/s
# Warmup Iteration  15: 7833727.366 ops/s
# Warmup Iteration  16: 7865148.561 ops/s
# Warmup Iteration  17: 7900993.939 ops/s
# Warmup Iteration  18: 7820967.152 ops/s
# Warmup Iteration  19: 7864499.813 ops/s
# Warmup Iteration  20: 7915157.131 ops/s
# Warmup Iteration  21: 7864027.281 ops/s
# Warmup Iteration  22: 7896400.998 ops/s
# Warmup Iteration  23: 7897460.268 ops/s
# Warmup Iteration  24: 7884260.339 ops/s
# Warmup Iteration  25: 7871402.101 ops/s
# Warmup Iteration  26: 7794076.190 ops/s
# Warmup Iteration  27: 7923738.364 ops/s
# Warmup Iteration  28: 7903533.062 ops/s
# Warmup Iteration  29: 7864691.985 ops/s
# Warmup Iteration  30: 7901563.030 ops/s
Iteration   1: 7913676.290 ops/s
Iteration   2: 7813673.353 ops/s
Iteration   3: 7896014.963 ops/s
Iteration   4: 7887039.590 ops/s
Iteration   5: 7880909.878 ops/s
Iteration   6: 7921165.508 ops/s
Iteration   7: 7928376.523 ops/s
Iteration   8: 7862611.833 ops/s
Iteration   9: 7910415.625 ops/s
Iteration  10: 7857968.773 ops/s
Iteration  11: 7839491.056 ops/s
Iteration  12: 7806854.090 ops/s
Iteration  13: 7874453.028 ops/s
Iteration  14: 7796995.334 ops/s
Iteration  15: 7908896.234 ops/s
Iteration  16: 7874978.855 ops/s
Iteration  17: 7878317.556 ops/s
Iteration  18: 7791960.588 ops/s
Iteration  19: 7850727.983 ops/s
Iteration  20: 7844096.680 ops/s
Iteration  21: 7874640.046 ops/s
Iteration  22: 7767070.922 ops/s
Iteration  23: 7875916.248 ops/s
Iteration  24: 7937265.192 ops/s
Iteration  25: 7855694.183 ops/s
Iteration  26: 7921534.119 ops/s
Iteration  27: 7683916.348 ops/s
Iteration  28: 7903649.232 ops/s
Iteration  29: 7940495.878 ops/s
Iteration  30: 7893193.914 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_contains":
  7866399.994 ±(99.9%) 37619.923 ops/s [Average]
  (min, avg, max) = (7683916.348, 7866399.994, 7940495.878), stdev = 56307.734
  CI (99.9%): [7828780.071, 7904019.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_contains  thrpt   30  7866399.994 ± 37619.923  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1388624.397 ops/s
# Warmup Iteration   2: 1691227.566 ops/s
# Warmup Iteration   3: 2147144.771 ops/s
# Warmup Iteration   4: 2142048.634 ops/s
# Warmup Iteration   5: 2153946.007 ops/s
# Warmup Iteration   6: 2117563.277 ops/s
# Warmup Iteration   7: 2158681.147 ops/s
# Warmup Iteration   8: 2149936.938 ops/s
# Warmup Iteration   9: 1864314.159 ops/s
# Warmup Iteration  10: 2095624.370 ops/s
# Warmup Iteration  11: 2159020.130 ops/s
# Warmup Iteration  12: 2164495.074 ops/s
# Warmup Iteration  13: 2146035.915 ops/s
# Warmup Iteration  14: 2159313.068 ops/s
# Warmup Iteration  15: 2143325.729 ops/s
# Warmup Iteration  16: 2165938.396 ops/s
# Warmup Iteration  17: 2143644.434 ops/s
# Warmup Iteration  18: 2145386.294 ops/s
# Warmup Iteration  19: 2127242.779 ops/s
# Warmup Iteration  20: 2166009.966 ops/s
# Warmup Iteration  21: 2171298.396 ops/s
# Warmup Iteration  22: 2123411.905 ops/s
# Warmup Iteration  23: 2172785.973 ops/s
# Warmup Iteration  24: 2169795.828 ops/s
# Warmup Iteration  25: 2148756.585 ops/s
# Warmup Iteration  26: 2140565.908 ops/s
# Warmup Iteration  27: 2162124.311 ops/s
# Warmup Iteration  28: 2143030.777 ops/s
# Warmup Iteration  29: 2159983.542 ops/s
# Warmup Iteration  30: 2169941.433 ops/s
Iteration   1: 2158892.929 ops/s
Iteration   2: 2165223.598 ops/s
Iteration   3: 2150350.516 ops/s
Iteration   4: 2160949.081 ops/s
Iteration   5: 2169415.641 ops/s
Iteration   6: 2170686.479 ops/s
Iteration   7: 2160335.330 ops/s
Iteration   8: 2169109.960 ops/s
Iteration   9: 2163354.257 ops/s
Iteration  10: 2160311.317 ops/s
Iteration  11: 2123306.928 ops/s
Iteration  12: 2120116.372 ops/s
Iteration  13: 2166817.718 ops/s
Iteration  14: 2159300.723 ops/s
Iteration  15: 2156068.221 ops/s
Iteration  16: 2162134.149 ops/s
Iteration  17: 2160624.026 ops/s
Iteration  18: 2142169.412 ops/s
Iteration  19: 2159880.199 ops/s
Iteration  20: 2153335.596 ops/s
Iteration  21: 2155802.820 ops/s
Iteration  22: 2167226.547 ops/s
Iteration  23: 2165539.538 ops/s
Iteration  24: 2173039.865 ops/s
Iteration  25: 2092434.050 ops/s
Iteration  26: 2165494.921 ops/s
Iteration  27: 2175044.152 ops/s
Iteration  28: 2166733.824 ops/s
Iteration  29: 2165657.404 ops/s
Iteration  30: 2168390.689 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAll":
  2157591.542 ±(99.9%) 11673.118 ops/s [Average]
  (min, avg, max) = (2092434.050, 2157591.542, 2175044.152), stdev = 17471.775
  CI (99.9%): [2145918.424, 2169264.660] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_containsAll  thrpt   30  2157591.542 ± 11673.118  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4186086.399 ops/s
# Warmup Iteration   2: 8756460.930 ops/s
# Warmup Iteration   3: 8650528.939 ops/s
# Warmup Iteration   4: 7366975.134 ops/s
# Warmup Iteration   5: 8746643.563 ops/s
# Warmup Iteration   6: 8733463.830 ops/s
# Warmup Iteration   7: 8798069.381 ops/s
# Warmup Iteration   8: 8749386.816 ops/s
# Warmup Iteration   9: 8747746.973 ops/s
# Warmup Iteration  10: 8709848.608 ops/s
# Warmup Iteration  11: 8753178.852 ops/s
# Warmup Iteration  12: 8748323.944 ops/s
# Warmup Iteration  13: 8770064.164 ops/s
# Warmup Iteration  14: 8671276.941 ops/s
# Warmup Iteration  15: 8739842.356 ops/s
# Warmup Iteration  16: 8748351.701 ops/s
# Warmup Iteration  17: 8791711.297 ops/s
# Warmup Iteration  18: 8812322.704 ops/s
# Warmup Iteration  19: 8738700.749 ops/s
# Warmup Iteration  20: 8771351.554 ops/s
# Warmup Iteration  21: 8823229.435 ops/s
# Warmup Iteration  22: 8795933.306 ops/s
# Warmup Iteration  23: 8739848.470 ops/s
# Warmup Iteration  24: 8808967.604 ops/s
# Warmup Iteration  25: 8797475.074 ops/s
# Warmup Iteration  26: 8774575.020 ops/s
# Warmup Iteration  27: 8745644.224 ops/s
# Warmup Iteration  28: 8798562.974 ops/s
# Warmup Iteration  29: 8767469.691 ops/s
# Warmup Iteration  30: 8804075.910 ops/s
Iteration   1: 8743359.250 ops/s
Iteration   2: 8782309.779 ops/s
Iteration   3: 8773732.869 ops/s
Iteration   4: 8814880.230 ops/s
Iteration   5: 8738592.812 ops/s
Iteration   6: 8724490.092 ops/s
Iteration   7: 8552569.456 ops/s
Iteration   8: 8781574.462 ops/s
Iteration   9: 8815695.851 ops/s
Iteration  10: 8772336.159 ops/s
Iteration  11: 8675472.607 ops/s
Iteration  12: 8670531.352 ops/s
Iteration  13: 8778119.305 ops/s
Iteration  14: 8780476.300 ops/s
Iteration  15: 8765678.042 ops/s
Iteration  16: 8774460.350 ops/s
Iteration  17: 8731104.041 ops/s
Iteration  18: 8753679.652 ops/s
Iteration  19: 8804945.081 ops/s
Iteration  20: 8668760.344 ops/s
Iteration  21: 8772250.728 ops/s
Iteration  22: 8788076.615 ops/s
Iteration  23: 8808257.172 ops/s
Iteration  24: 8782614.567 ops/s
Iteration  25: 8783410.961 ops/s
Iteration  26: 8812026.030 ops/s
Iteration  27: 8769982.681 ops/s
Iteration  28: 8824597.118 ops/s
Iteration  29: 8810087.364 ops/s
Iteration  30: 8787578.974 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAllArray":
  8761388.341 ±(99.9%) 38101.788 ops/s [Average]
  (min, avg, max) = (8552569.456, 8761388.341, 8824597.118), stdev = 57028.967
  CI (99.9%): [8723286.553, 8799490.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_containsAllArray  thrpt   30  8761388.341 ± 38101.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3335994.930 ops/s
# Warmup Iteration   2: 8580503.100 ops/s
# Warmup Iteration   3: 8674308.934 ops/s
# Warmup Iteration   4: 7352976.669 ops/s
# Warmup Iteration   5: 8698134.050 ops/s
# Warmup Iteration   6: 8686512.580 ops/s
# Warmup Iteration   7: 8696762.221 ops/s
# Warmup Iteration   8: 8734453.977 ops/s
# Warmup Iteration   9: 8592102.057 ops/s
# Warmup Iteration  10: 8632687.737 ops/s
# Warmup Iteration  11: 8720446.475 ops/s
# Warmup Iteration  12: 8703093.285 ops/s
# Warmup Iteration  13: 8688843.305 ops/s
# Warmup Iteration  14: 8656837.359 ops/s
# Warmup Iteration  15: 8705654.193 ops/s
# Warmup Iteration  16: 8653647.286 ops/s
# Warmup Iteration  17: 8734411.167 ops/s
# Warmup Iteration  18: 8721812.102 ops/s
# Warmup Iteration  19: 8713930.376 ops/s
# Warmup Iteration  20: 8736163.343 ops/s
# Warmup Iteration  21: 8735592.013 ops/s
# Warmup Iteration  22: 8729489.219 ops/s
# Warmup Iteration  23: 8672346.558 ops/s
# Warmup Iteration  24: 8731635.457 ops/s
# Warmup Iteration  25: 8681514.706 ops/s
# Warmup Iteration  26: 8749494.770 ops/s
# Warmup Iteration  27: 8731836.446 ops/s
# Warmup Iteration  28: 8762191.903 ops/s
# Warmup Iteration  29: 8727672.792 ops/s
# Warmup Iteration  30: 8681727.643 ops/s
Iteration   1: 8754545.743 ops/s
Iteration   2: 8767270.422 ops/s
Iteration   3: 8818296.629 ops/s
Iteration   4: 8743063.381 ops/s
Iteration   5: 8727589.774 ops/s
Iteration   6: 8754063.810 ops/s
Iteration   7: 8677255.121 ops/s
Iteration   8: 8722912.227 ops/s
Iteration   9: 8732226.623 ops/s
Iteration  10: 8629660.830 ops/s
Iteration  11: 8702161.203 ops/s
Iteration  12: 8650024.291 ops/s
Iteration  13: 8590488.277 ops/s
Iteration  14: 8737511.017 ops/s
Iteration  15: 8751817.560 ops/s
Iteration  16: 8723014.546 ops/s
Iteration  17: 8733616.591 ops/s
Iteration  18: 8714524.117 ops/s
Iteration  19: 8662784.158 ops/s
Iteration  20: 8751642.580 ops/s
Iteration  21: 8595906.655 ops/s
Iteration  22: 8742479.891 ops/s
Iteration  23: 8718285.096 ops/s
Iteration  24: 8670018.926 ops/s
Iteration  25: 8736090.017 ops/s
Iteration  26: 8668611.032 ops/s
Iteration  27: 8710344.919 ops/s
Iteration  28: 8694041.397 ops/s
Iteration  29: 8709760.936 ops/s
Iteration  30: 8617162.056 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAllCollection":
  8706905.661 ±(99.9%) 35179.002 ops/s [Average]
  (min, avg, max) = (8590488.277, 8706905.661, 8818296.629), stdev = 52654.278
  CI (99.9%): [8671726.659, 8742084.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_containsAllCollection  thrpt   30  8706905.661 ± 35179.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4010677.979 ops/s
# Warmup Iteration   2: 8653461.984 ops/s
# Warmup Iteration   3: 8593566.385 ops/s
# Warmup Iteration   4: 7321501.211 ops/s
# Warmup Iteration   5: 8696804.303 ops/s
# Warmup Iteration   6: 8714487.889 ops/s
# Warmup Iteration   7: 8714040.675 ops/s
# Warmup Iteration   8: 8740246.289 ops/s
# Warmup Iteration   9: 8728577.215 ops/s
# Warmup Iteration  10: 8608883.504 ops/s
# Warmup Iteration  11: 8636127.117 ops/s
# Warmup Iteration  12: 8693081.844 ops/s
# Warmup Iteration  13: 8706978.183 ops/s
# Warmup Iteration  14: 8727388.261 ops/s
# Warmup Iteration  15: 8692235.814 ops/s
# Warmup Iteration  16: 8613992.305 ops/s
# Warmup Iteration  17: 8644400.605 ops/s
# Warmup Iteration  18: 8721876.769 ops/s
# Warmup Iteration  19: 8680395.232 ops/s
# Warmup Iteration  20: 8735672.618 ops/s
# Warmup Iteration  21: 8678866.206 ops/s
# Warmup Iteration  22: 8596097.524 ops/s
# Warmup Iteration  23: 8737198.343 ops/s
# Warmup Iteration  24: 8746248.597 ops/s
# Warmup Iteration  25: 8718507.530 ops/s
# Warmup Iteration  26: 8756548.348 ops/s
# Warmup Iteration  27: 8747655.277 ops/s
# Warmup Iteration  28: 8784940.233 ops/s
# Warmup Iteration  29: 8762522.545 ops/s
# Warmup Iteration  30: 8764807.030 ops/s
Iteration   1: 8789775.174 ops/s
Iteration   2: 8673772.093 ops/s
Iteration   3: 8699815.527 ops/s
Iteration   4: 8751371.933 ops/s
Iteration   5: 8779714.074 ops/s
Iteration   6: 8742790.576 ops/s
Iteration   7: 8784114.869 ops/s
Iteration   8: 8737216.947 ops/s
Iteration   9: 8747291.769 ops/s
Iteration  10: 8752314.647 ops/s
Iteration  11: 8689458.269 ops/s
Iteration  12: 8756876.828 ops/s
Iteration  13: 8703562.362 ops/s
Iteration  14: 8741988.877 ops/s
Iteration  15: 8719464.959 ops/s
Iteration  16: 8692810.256 ops/s
Iteration  17: 8543908.503 ops/s
Iteration  18: 8758214.778 ops/s
Iteration  19: 8753356.679 ops/s
Iteration  20: 8711688.627 ops/s
Iteration  21: 8621975.813 ops/s
Iteration  22: 8756675.574 ops/s
Iteration  23: 8643171.993 ops/s
Iteration  24: 8603220.579 ops/s
Iteration  25: 8741202.459 ops/s
Iteration  26: 8745956.947 ops/s
Iteration  27: 8621518.398 ops/s
Iteration  28: 8731660.776 ops/s
Iteration  29: 8715558.153 ops/s
Iteration  30: 8730543.770 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAllIterable":
  8714699.740 ±(99.9%) 38611.023 ops/s [Average]
  (min, avg, max) = (8543908.503, 8714699.740, 8789775.174), stdev = 57791.166
  CI (99.9%): [8676088.717, 8753310.763] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  8714699.740 ± 38611.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 109821.192 ops/s
# Warmup Iteration   2: 125111.419 ops/s
# Warmup Iteration   3: 154346.992 ops/s
# Warmup Iteration   4: 158905.909 ops/s
# Warmup Iteration   5: 158933.126 ops/s
# Warmup Iteration   6: 158976.000 ops/s
# Warmup Iteration   7: 158750.217 ops/s
# Warmup Iteration   8: 158153.838 ops/s
# Warmup Iteration   9: 158283.866 ops/s
# Warmup Iteration  10: 159595.721 ops/s
# Warmup Iteration  11: 159613.204 ops/s
# Warmup Iteration  12: 151242.901 ops/s
# Warmup Iteration  13: 144066.143 ops/s
# Warmup Iteration  14: 158348.687 ops/s
# Warmup Iteration  15: 159686.358 ops/s
# Warmup Iteration  16: 158519.221 ops/s
# Warmup Iteration  17: 159265.907 ops/s
# Warmup Iteration  18: 160277.865 ops/s
# Warmup Iteration  19: 160150.380 ops/s
# Warmup Iteration  20: 159655.628 ops/s
# Warmup Iteration  21: 159567.303 ops/s
# Warmup Iteration  22: 160201.735 ops/s
# Warmup Iteration  23: 159381.147 ops/s
# Warmup Iteration  24: 159111.378 ops/s
# Warmup Iteration  25: 158155.014 ops/s
# Warmup Iteration  26: 158761.598 ops/s
# Warmup Iteration  27: 157586.264 ops/s
# Warmup Iteration  28: 159718.429 ops/s
# Warmup Iteration  29: 158559.533 ops/s
# Warmup Iteration  30: 159659.264 ops/s
Iteration   1: 159537.477 ops/s
Iteration   2: 157253.530 ops/s
Iteration   3: 160072.370 ops/s
Iteration   4: 157034.789 ops/s
Iteration   5: 158251.992 ops/s
Iteration   6: 159356.325 ops/s
Iteration   7: 157505.097 ops/s
Iteration   8: 157107.442 ops/s
Iteration   9: 159950.479 ops/s
Iteration  10: 156662.475 ops/s
Iteration  11: 158385.986 ops/s
Iteration  12: 159942.592 ops/s
Iteration  13: 159190.828 ops/s
Iteration  14: 160533.019 ops/s
Iteration  15: 160045.842 ops/s
Iteration  16: 157421.279 ops/s
Iteration  17: 160133.404 ops/s
Iteration  18: 160001.001 ops/s
Iteration  19: 159900.317 ops/s
Iteration  20: 160442.281 ops/s
Iteration  21: 159261.819 ops/s
Iteration  22: 160544.094 ops/s
Iteration  23: 160250.492 ops/s
Iteration  24: 159143.482 ops/s
Iteration  25: 159340.904 ops/s
Iteration  26: 159686.057 ops/s
Iteration  27: 159423.506 ops/s
Iteration  28: 160018.464 ops/s
Iteration  29: 160080.278 ops/s
Iteration  30: 158699.330 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAnyCollection":
  159172.565 ±(99.9%) 783.105 ops/s [Average]
  (min, avg, max) = (156662.475, 159172.565, 160544.094), stdev = 1172.114
  CI (99.9%): [158389.460, 159955.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  159172.565 ± 783.105  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79457.048 ops/s
# Warmup Iteration   2: 92089.775 ops/s
# Warmup Iteration   3: 96036.432 ops/s
# Warmup Iteration   4: 111181.055 ops/s
# Warmup Iteration   5: 110711.556 ops/s
# Warmup Iteration   6: 111006.587 ops/s
# Warmup Iteration   7: 110793.113 ops/s
# Warmup Iteration   8: 109896.728 ops/s
# Warmup Iteration   9: 110842.738 ops/s
# Warmup Iteration  10: 111035.933 ops/s
# Warmup Iteration  11: 109994.848 ops/s
# Warmup Iteration  12: 110311.899 ops/s
# Warmup Iteration  13: 109987.593 ops/s
# Warmup Iteration  14: 110694.764 ops/s
# Warmup Iteration  15: 109940.215 ops/s
# Warmup Iteration  16: 110945.625 ops/s
# Warmup Iteration  17: 94407.276 ops/s
# Warmup Iteration  18: 110923.732 ops/s
# Warmup Iteration  19: 111211.263 ops/s
# Warmup Iteration  20: 110097.671 ops/s
# Warmup Iteration  21: 110953.315 ops/s
# Warmup Iteration  22: 110338.877 ops/s
# Warmup Iteration  23: 110710.156 ops/s
# Warmup Iteration  24: 110975.220 ops/s
# Warmup Iteration  25: 110591.040 ops/s
# Warmup Iteration  26: 110760.985 ops/s
# Warmup Iteration  27: 111296.289 ops/s
# Warmup Iteration  28: 110915.429 ops/s
# Warmup Iteration  29: 110562.501 ops/s
# Warmup Iteration  30: 110119.524 ops/s
Iteration   1: 108239.341 ops/s
Iteration   2: 109009.463 ops/s
Iteration   3: 110972.423 ops/s
Iteration   4: 111267.076 ops/s
Iteration   5: 109230.757 ops/s
Iteration   6: 110878.894 ops/s
Iteration   7: 110365.028 ops/s
Iteration   8: 109522.816 ops/s
Iteration   9: 111396.941 ops/s
Iteration  10: 110871.934 ops/s
Iteration  11: 111144.961 ops/s
Iteration  12: 111080.606 ops/s
Iteration  13: 110761.690 ops/s
Iteration  14: 110933.496 ops/s
Iteration  15: 109504.930 ops/s
Iteration  16: 111124.464 ops/s
Iteration  17: 111208.384 ops/s
Iteration  18: 109492.700 ops/s
Iteration  19: 110216.586 ops/s
Iteration  20: 110935.594 ops/s
Iteration  21: 111312.154 ops/s
Iteration  22: 110729.657 ops/s
Iteration  23: 110225.159 ops/s
Iteration  24: 111415.775 ops/s
Iteration  25: 110789.123 ops/s
Iteration  26: 110315.831 ops/s
Iteration  27: 110060.761 ops/s
Iteration  28: 110622.977 ops/s
Iteration  29: 111227.874 ops/s
Iteration  30: 110077.230 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsAnyIterable":
  110497.821 ±(99.9%) 535.798 ops/s [Average]
  (min, avg, max) = (108239.341, 110497.821, 111415.775), stdev = 801.958
  CI (99.9%): [109962.023, 111033.619] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  110497.821 ± 535.798  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 654167.662 ops/s
# Warmup Iteration   2: 681711.465 ops/s
# Warmup Iteration   3: 846089.980 ops/s
# Warmup Iteration   4: 893000.980 ops/s
# Warmup Iteration   5: 897374.370 ops/s
# Warmup Iteration   6: 886047.428 ops/s
# Warmup Iteration   7: 892796.157 ops/s
# Warmup Iteration   8: 897655.062 ops/s
# Warmup Iteration   9: 895324.016 ops/s
# Warmup Iteration  10: 893741.386 ops/s
# Warmup Iteration  11: 893200.457 ops/s
# Warmup Iteration  12: 887530.845 ops/s
# Warmup Iteration  13: 818463.978 ops/s
# Warmup Iteration  14: 819444.633 ops/s
# Warmup Iteration  15: 899843.010 ops/s
# Warmup Iteration  16: 900242.888 ops/s
# Warmup Iteration  17: 940057.730 ops/s
# Warmup Iteration  18: 937633.961 ops/s
# Warmup Iteration  19: 933954.220 ops/s
# Warmup Iteration  20: 944942.392 ops/s
# Warmup Iteration  21: 938883.414 ops/s
# Warmup Iteration  22: 938585.329 ops/s
# Warmup Iteration  23: 944008.750 ops/s
# Warmup Iteration  24: 939820.115 ops/s
# Warmup Iteration  25: 933851.800 ops/s
# Warmup Iteration  26: 930978.286 ops/s
# Warmup Iteration  27: 938024.664 ops/s
# Warmup Iteration  28: 936975.024 ops/s
# Warmup Iteration  29: 932154.938 ops/s
# Warmup Iteration  30: 941144.833 ops/s
Iteration   1: 930146.734 ops/s
Iteration   2: 934293.480 ops/s
Iteration   3: 936195.959 ops/s
Iteration   4: 938913.763 ops/s
Iteration   5: 935534.404 ops/s
Iteration   6: 929149.550 ops/s
Iteration   7: 944227.341 ops/s
Iteration   8: 938918.125 ops/s
Iteration   9: 945201.003 ops/s
Iteration  10: 944178.945 ops/s
Iteration  11: 942275.561 ops/s
Iteration  12: 922303.113 ops/s
Iteration  13: 939135.214 ops/s
Iteration  14: 937617.226 ops/s
Iteration  15: 940244.495 ops/s
Iteration  16: 942987.535 ops/s
Iteration  17: 943792.642 ops/s
Iteration  18: 933095.296 ops/s
Iteration  19: 939832.902 ops/s
Iteration  20: 932490.716 ops/s
Iteration  21: 939264.190 ops/s
Iteration  22: 938167.371 ops/s
Iteration  23: 934442.437 ops/s
Iteration  24: 945811.499 ops/s
Iteration  25: 933295.345 ops/s
Iteration  26: 941217.217 ops/s
Iteration  27: 943742.090 ops/s
Iteration  28: 941232.071 ops/s
Iteration  29: 944236.468 ops/s
Iteration  30: 947196.992 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsBy":
  938637.989 ±(99.9%) 3810.613 ops/s [Average]
  (min, avg, max) = (922303.113, 938637.989, 947196.992), stdev = 5703.547
  CI (99.9%): [934827.376, 942448.602] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_containsBy  thrpt   30  938637.989 ± 3810.613  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 109588.070 ops/s
# Warmup Iteration   2: 121678.287 ops/s
# Warmup Iteration   3: 152830.851 ops/s
# Warmup Iteration   4: 157157.134 ops/s
# Warmup Iteration   5: 157988.089 ops/s
# Warmup Iteration   6: 156956.736 ops/s
# Warmup Iteration   7: 157665.402 ops/s
# Warmup Iteration   8: 157818.721 ops/s
# Warmup Iteration   9: 157867.065 ops/s
# Warmup Iteration  10: 157931.542 ops/s
# Warmup Iteration  11: 157244.502 ops/s
# Warmup Iteration  12: 145396.023 ops/s
# Warmup Iteration  13: 145317.315 ops/s
# Warmup Iteration  14: 157780.888 ops/s
# Warmup Iteration  15: 157460.452 ops/s
# Warmup Iteration  16: 156042.752 ops/s
# Warmup Iteration  17: 157726.183 ops/s
# Warmup Iteration  18: 157833.481 ops/s
# Warmup Iteration  19: 157742.284 ops/s
# Warmup Iteration  20: 157632.260 ops/s
# Warmup Iteration  21: 155761.208 ops/s
# Warmup Iteration  22: 157329.504 ops/s
# Warmup Iteration  23: 156992.591 ops/s
# Warmup Iteration  24: 157795.805 ops/s
# Warmup Iteration  25: 158039.627 ops/s
# Warmup Iteration  26: 157688.883 ops/s
# Warmup Iteration  27: 157162.587 ops/s
# Warmup Iteration  28: 158118.705 ops/s
# Warmup Iteration  29: 158253.501 ops/s
# Warmup Iteration  30: 157961.751 ops/s
Iteration   1: 157777.366 ops/s
Iteration   2: 158011.189 ops/s
Iteration   3: 158294.383 ops/s
Iteration   4: 157935.827 ops/s
Iteration   5: 157681.046 ops/s
Iteration   6: 157203.952 ops/s
Iteration   7: 157981.681 ops/s
Iteration   8: 157660.725 ops/s
Iteration   9: 158081.484 ops/s
Iteration  10: 155150.263 ops/s
Iteration  11: 157141.170 ops/s
Iteration  12: 157470.390 ops/s
Iteration  13: 157565.464 ops/s
Iteration  14: 158292.643 ops/s
Iteration  15: 157128.580 ops/s
Iteration  16: 156578.333 ops/s
Iteration  17: 158375.081 ops/s
Iteration  18: 155007.887 ops/s
Iteration  19: 157403.102 ops/s
Iteration  20: 157129.304 ops/s
Iteration  21: 157230.735 ops/s
Iteration  22: 158522.240 ops/s
Iteration  23: 157255.696 ops/s
Iteration  24: 157341.411 ops/s
Iteration  25: 157085.949 ops/s
Iteration  26: 157100.630 ops/s
Iteration  27: 158288.361 ops/s
Iteration  28: 158067.960 ops/s
Iteration  29: 157958.284 ops/s
Iteration  30: 158483.281 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsNoneCollection":
  157506.814 ±(99.9%) 553.762 ops/s [Average]
  (min, avg, max) = (155007.887, 157506.814, 158522.240), stdev = 828.845
  CI (99.9%): [156953.052, 158060.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  157506.814 ± 553.762  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 81673.432 ops/s
# Warmup Iteration   2: 90729.440 ops/s
# Warmup Iteration   3: 94968.799 ops/s
# Warmup Iteration   4: 109924.323 ops/s
# Warmup Iteration   5: 110219.815 ops/s
# Warmup Iteration   6: 110466.002 ops/s
# Warmup Iteration   7: 110698.199 ops/s
# Warmup Iteration   8: 110173.324 ops/s
# Warmup Iteration   9: 109927.336 ops/s
# Warmup Iteration  10: 110522.820 ops/s
# Warmup Iteration  11: 109793.044 ops/s
# Warmup Iteration  12: 110394.873 ops/s
# Warmup Iteration  13: 110523.213 ops/s
# Warmup Iteration  14: 109678.722 ops/s
# Warmup Iteration  15: 110048.363 ops/s
# Warmup Iteration  16: 110775.357 ops/s
# Warmup Iteration  17: 93600.519 ops/s
# Warmup Iteration  18: 109709.653 ops/s
# Warmup Iteration  19: 110353.503 ops/s
# Warmup Iteration  20: 110222.167 ops/s
# Warmup Iteration  21: 110816.334 ops/s
# Warmup Iteration  22: 110583.560 ops/s
# Warmup Iteration  23: 110219.590 ops/s
# Warmup Iteration  24: 110082.184 ops/s
# Warmup Iteration  25: 109699.607 ops/s
# Warmup Iteration  26: 110766.650 ops/s
# Warmup Iteration  27: 110241.662 ops/s
# Warmup Iteration  28: 110146.786 ops/s
# Warmup Iteration  29: 110327.527 ops/s
# Warmup Iteration  30: 110692.902 ops/s
Iteration   1: 110380.700 ops/s
Iteration   2: 110761.507 ops/s
Iteration   3: 110240.356 ops/s
Iteration   4: 110561.715 ops/s
Iteration   5: 110044.681 ops/s
Iteration   6: 108694.744 ops/s
Iteration   7: 110874.044 ops/s
Iteration   8: 110802.831 ops/s
Iteration   9: 110532.623 ops/s
Iteration  10: 110621.600 ops/s
Iteration  11: 110671.719 ops/s
Iteration  12: 109152.033 ops/s
Iteration  13: 110908.920 ops/s
Iteration  14: 110974.696 ops/s
Iteration  15: 110396.797 ops/s
Iteration  16: 110628.767 ops/s
Iteration  17: 110094.399 ops/s
Iteration  18: 111022.734 ops/s
Iteration  19: 110552.033 ops/s
Iteration  20: 109657.755 ops/s
Iteration  21: 110815.583 ops/s
Iteration  22: 110199.792 ops/s
Iteration  23: 110785.573 ops/s
Iteration  24: 110802.044 ops/s
Iteration  25: 109094.589 ops/s
Iteration  26: 110869.196 ops/s
Iteration  27: 110584.749 ops/s
Iteration  28: 110137.136 ops/s
Iteration  29: 108442.948 ops/s
Iteration  30: 110034.427 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_containsNoneIterable":
  110311.356 ±(99.9%) 452.068 ops/s [Average]
  (min, avg, max) = (108442.948, 110311.356, 111022.734), stdev = 676.634
  CI (99.9%): [109859.289, 110763.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  110311.356 ± 452.068  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 333784.737 ops/s
# Warmup Iteration   2: 353680.845 ops/s
# Warmup Iteration   3: 477749.793 ops/s
# Warmup Iteration   4: 487001.050 ops/s
# Warmup Iteration   5: 479674.077 ops/s
# Warmup Iteration   6: 486556.838 ops/s
# Warmup Iteration   7: 485084.409 ops/s
# Warmup Iteration   8: 485703.419 ops/s
# Warmup Iteration   9: 487341.054 ops/s
# Warmup Iteration  10: 484940.207 ops/s
# Warmup Iteration  11: 436164.417 ops/s
# Warmup Iteration  12: 449417.061 ops/s
# Warmup Iteration  13: 483577.716 ops/s
# Warmup Iteration  14: 485823.829 ops/s
# Warmup Iteration  15: 485427.202 ops/s
# Warmup Iteration  16: 482439.331 ops/s
# Warmup Iteration  17: 486742.563 ops/s
# Warmup Iteration  18: 480781.824 ops/s
# Warmup Iteration  19: 485314.365 ops/s
# Warmup Iteration  20: 485585.400 ops/s
# Warmup Iteration  21: 485552.454 ops/s
# Warmup Iteration  22: 486324.728 ops/s
# Warmup Iteration  23: 484285.332 ops/s
# Warmup Iteration  24: 486218.904 ops/s
# Warmup Iteration  25: 481313.433 ops/s
# Warmup Iteration  26: 486887.556 ops/s
# Warmup Iteration  27: 485030.479 ops/s
# Warmup Iteration  28: 487368.079 ops/s
# Warmup Iteration  29: 486499.466 ops/s
# Warmup Iteration  30: 485930.655 ops/s
Iteration   1: 481692.024 ops/s
Iteration   2: 486362.392 ops/s
Iteration   3: 487510.308 ops/s
Iteration   4: 485728.150 ops/s
Iteration   5: 483630.248 ops/s
Iteration   6: 486669.047 ops/s
Iteration   7: 486021.188 ops/s
Iteration   8: 486458.474 ops/s
Iteration   9: 479963.671 ops/s
Iteration  10: 486691.266 ops/s
Iteration  11: 477054.724 ops/s
Iteration  12: 485332.186 ops/s
Iteration  13: 484616.564 ops/s
Iteration  14: 487123.636 ops/s
Iteration  15: 486246.202 ops/s
Iteration  16: 486175.824 ops/s
Iteration  17: 486191.304 ops/s
Iteration  18: 485431.242 ops/s
Iteration  19: 485132.781 ops/s
Iteration  20: 485796.240 ops/s
Iteration  21: 483437.499 ops/s
Iteration  22: 487744.785 ops/s
Iteration  23: 487955.160 ops/s
Iteration  24: 479663.369 ops/s
Iteration  25: 482169.891 ops/s
Iteration  26: 484551.001 ops/s
Iteration  27: 486116.959 ops/s
Iteration  28: 487347.888 ops/s
Iteration  29: 484201.129 ops/s
Iteration  30: 484161.477 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_corresponds":
  484905.888 ±(99.9%) 1719.143 ops/s [Average]
  (min, avg, max) = (477054.724, 484905.888, 487955.160), stdev = 2573.132
  CI (99.9%): [483186.745, 486625.031] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_corresponds  thrpt   30  484905.888 ± 1719.143  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3271181.708 ops/s
# Warmup Iteration   2: 7281327.104 ops/s
# Warmup Iteration   3: 7309349.887 ops/s
# Warmup Iteration   4: 6165695.980 ops/s
# Warmup Iteration   5: 7316788.712 ops/s
# Warmup Iteration   6: 7325471.308 ops/s
# Warmup Iteration   7: 7351766.468 ops/s
# Warmup Iteration   8: 7324772.808 ops/s
# Warmup Iteration   9: 7236986.357 ops/s
# Warmup Iteration  10: 7352779.095 ops/s
# Warmup Iteration  11: 7357928.264 ops/s
# Warmup Iteration  12: 7284519.475 ops/s
# Warmup Iteration  13: 7351115.712 ops/s
# Warmup Iteration  14: 7363993.083 ops/s
# Warmup Iteration  15: 7296357.624 ops/s
# Warmup Iteration  16: 7270363.353 ops/s
# Warmup Iteration  17: 7315332.292 ops/s
# Warmup Iteration  18: 7363370.191 ops/s
# Warmup Iteration  19: 7359397.678 ops/s
# Warmup Iteration  20: 7408664.901 ops/s
# Warmup Iteration  21: 7389025.542 ops/s
# Warmup Iteration  22: 7389300.855 ops/s
# Warmup Iteration  23: 7405180.912 ops/s
# Warmup Iteration  24: 7390690.492 ops/s
# Warmup Iteration  25: 7332388.998 ops/s
# Warmup Iteration  26: 7355618.438 ops/s
# Warmup Iteration  27: 7371571.567 ops/s
# Warmup Iteration  28: 7369588.533 ops/s
# Warmup Iteration  29: 7340365.018 ops/s
# Warmup Iteration  30: 7394328.837 ops/s
Iteration   1: 7386352.248 ops/s
Iteration   2: 7342278.477 ops/s
Iteration   3: 7402808.254 ops/s
Iteration   4: 7402116.898 ops/s
Iteration   5: 7413951.638 ops/s
Iteration   6: 7383578.586 ops/s
Iteration   7: 7392958.354 ops/s
Iteration   8: 7385053.495 ops/s
Iteration   9: 7388410.773 ops/s
Iteration  10: 7387830.381 ops/s
Iteration  11: 7377247.820 ops/s
Iteration  12: 7324414.269 ops/s
Iteration  13: 7404915.911 ops/s
Iteration  14: 7314622.429 ops/s
Iteration  15: 7352657.681 ops/s
Iteration  16: 7384174.523 ops/s
Iteration  17: 7379654.656 ops/s
Iteration  18: 7343636.886 ops/s
Iteration  19: 7413264.107 ops/s
Iteration  20: 7372470.372 ops/s
Iteration  21: 7403593.523 ops/s
Iteration  22: 7371228.826 ops/s
Iteration  23: 7412720.891 ops/s
Iteration  24: 7377112.417 ops/s
Iteration  25: 7396282.902 ops/s
Iteration  26: 7424106.837 ops/s
Iteration  27: 7381474.028 ops/s
Iteration  28: 7340135.541 ops/s
Iteration  29: 7255911.027 ops/s
Iteration  30: 7361739.110 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_count":
  7375890.095 ±(99.9%) 23522.082 ops/s [Average]
  (min, avg, max) = (7255911.027, 7375890.095, 7424106.837), stdev = 35206.748
  CI (99.9%): [7352368.013, 7399412.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_count  thrpt   30  7375890.095 ± 23522.082  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1358157.935 ops/s
# Warmup Iteration   2: 2678757.980 ops/s
# Warmup Iteration   3: 3018803.509 ops/s
# Warmup Iteration   4: 3053710.306 ops/s
# Warmup Iteration   5: 2742847.464 ops/s
# Warmup Iteration   6: 2778389.867 ops/s
# Warmup Iteration   7: 3051649.908 ops/s
# Warmup Iteration   8: 3047887.705 ops/s
# Warmup Iteration   9: 3050670.545 ops/s
# Warmup Iteration  10: 3059818.664 ops/s
# Warmup Iteration  11: 3055001.681 ops/s
# Warmup Iteration  12: 3056080.920 ops/s
# Warmup Iteration  13: 3035593.188 ops/s
# Warmup Iteration  14: 3066881.323 ops/s
# Warmup Iteration  15: 3040410.933 ops/s
# Warmup Iteration  16: 3071775.175 ops/s
# Warmup Iteration  17: 3058150.259 ops/s
# Warmup Iteration  18: 3070707.139 ops/s
# Warmup Iteration  19: 3063887.040 ops/s
# Warmup Iteration  20: 3062562.999 ops/s
# Warmup Iteration  21: 3049824.307 ops/s
# Warmup Iteration  22: 3061737.049 ops/s
# Warmup Iteration  23: 3047133.912 ops/s
# Warmup Iteration  24: 3066349.210 ops/s
# Warmup Iteration  25: 3013276.747 ops/s
# Warmup Iteration  26: 3061812.285 ops/s
# Warmup Iteration  27: 3068436.311 ops/s
# Warmup Iteration  28: 3051154.508 ops/s
# Warmup Iteration  29: 3056186.858 ops/s
# Warmup Iteration  30: 3055827.100 ops/s
Iteration   1: 3062612.132 ops/s
Iteration   2: 3068861.485 ops/s
Iteration   3: 3067529.407 ops/s
Iteration   4: 3042410.011 ops/s
Iteration   5: 3032033.246 ops/s
Iteration   6: 3064064.758 ops/s
Iteration   7: 3075778.035 ops/s
Iteration   8: 3068398.235 ops/s
Iteration   9: 3037034.237 ops/s
Iteration  10: 3052993.935 ops/s
Iteration  11: 3067212.266 ops/s
Iteration  12: 3070709.520 ops/s
Iteration  13: 3016288.129 ops/s
Iteration  14: 3007488.254 ops/s
Iteration  15: 3069101.438 ops/s
Iteration  16: 3062923.307 ops/s
Iteration  17: 3073515.678 ops/s
Iteration  18: 3082634.233 ops/s
Iteration  19: 3053140.924 ops/s
Iteration  20: 3069436.208 ops/s
Iteration  21: 3060184.335 ops/s
Iteration  22: 3058515.462 ops/s
Iteration  23: 3059180.585 ops/s
Iteration  24: 3068155.286 ops/s
Iteration  25: 3055916.430 ops/s
Iteration  26: 3076333.546 ops/s
Iteration  27: 3053569.499 ops/s
Iteration  28: 3072005.624 ops/s
Iteration  29: 3069145.693 ops/s
Iteration  30: 3021687.267 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_countBy":
  3057961.972 ±(99.9%) 12324.852 ops/s [Average]
  (min, avg, max) = (3007488.254, 3057961.972, 3082634.233), stdev = 18447.259
  CI (99.9%): [3045637.120, 3070286.824] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_countBy  thrpt   30  3057961.972 ± 12324.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 263001.726 ops/s
# Warmup Iteration   2: 450999.530 ops/s
# Warmup Iteration   3: 524639.455 ops/s
# Warmup Iteration   4: 531301.889 ops/s
# Warmup Iteration   5: 532211.665 ops/s
# Warmup Iteration   6: 434785.013 ops/s
# Warmup Iteration   7: 531636.812 ops/s
# Warmup Iteration   8: 532965.124 ops/s
# Warmup Iteration   9: 533842.476 ops/s
# Warmup Iteration  10: 531636.033 ops/s
# Warmup Iteration  11: 532695.277 ops/s
# Warmup Iteration  12: 533402.340 ops/s
# Warmup Iteration  13: 532764.415 ops/s
# Warmup Iteration  14: 532765.824 ops/s
# Warmup Iteration  15: 531532.584 ops/s
# Warmup Iteration  16: 531335.097 ops/s
# Warmup Iteration  17: 526645.238 ops/s
# Warmup Iteration  18: 535111.898 ops/s
# Warmup Iteration  19: 533783.151 ops/s
# Warmup Iteration  20: 532843.441 ops/s
# Warmup Iteration  21: 534761.843 ops/s
# Warmup Iteration  22: 532057.118 ops/s
# Warmup Iteration  23: 531317.951 ops/s
# Warmup Iteration  24: 533632.475 ops/s
# Warmup Iteration  25: 532906.645 ops/s
# Warmup Iteration  26: 534291.051 ops/s
# Warmup Iteration  27: 532928.293 ops/s
# Warmup Iteration  28: 533505.433 ops/s
# Warmup Iteration  29: 533753.709 ops/s
# Warmup Iteration  30: 534168.934 ops/s
Iteration   1: 532098.807 ops/s
Iteration   2: 531475.683 ops/s
Iteration   3: 525426.956 ops/s
Iteration   4: 532817.016 ops/s
Iteration   5: 531293.487 ops/s
Iteration   6: 530289.036 ops/s
Iteration   7: 533807.917 ops/s
Iteration   8: 533038.561 ops/s
Iteration   9: 532280.238 ops/s
Iteration  10: 533826.357 ops/s
Iteration  11: 533860.610 ops/s
Iteration  12: 535486.334 ops/s
Iteration  13: 533622.474 ops/s
Iteration  14: 532461.376 ops/s
Iteration  15: 532522.582 ops/s
Iteration  16: 532728.507 ops/s
Iteration  17: 533937.125 ops/s
Iteration  18: 530289.842 ops/s
Iteration  19: 534195.318 ops/s
Iteration  20: 528960.589 ops/s
Iteration  21: 534096.728 ops/s
Iteration  22: 531287.209 ops/s
Iteration  23: 532095.245 ops/s
Iteration  24: 533763.174 ops/s
Iteration  25: 533831.347 ops/s
Iteration  26: 536295.935 ops/s
Iteration  27: 533071.029 ops/s
Iteration  28: 534458.338 ops/s
Iteration  29: 534520.449 ops/s
Iteration  30: 534911.814 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_countByEach":
  532758.336 ±(99.9%) 1414.268 ops/s [Average]
  (min, avg, max) = (525426.956, 532758.336, 536295.935), stdev = 2116.810
  CI (99.9%): [531344.068, 534172.604] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_countByEach  thrpt   30  532758.336 ± 1414.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1290036.444 ops/s
# Warmup Iteration   2: 2420256.171 ops/s
# Warmup Iteration   3: 2744306.010 ops/s
# Warmup Iteration   4: 2745404.813 ops/s
# Warmup Iteration   5: 2439607.414 ops/s
# Warmup Iteration   6: 2567205.648 ops/s
# Warmup Iteration   7: 2739920.533 ops/s
# Warmup Iteration   8: 2739849.717 ops/s
# Warmup Iteration   9: 2748015.806 ops/s
# Warmup Iteration  10: 2682885.521 ops/s
# Warmup Iteration  11: 2758873.810 ops/s
# Warmup Iteration  12: 2743316.620 ops/s
# Warmup Iteration  13: 2744983.381 ops/s
# Warmup Iteration  14: 2729889.787 ops/s
# Warmup Iteration  15: 2760103.638 ops/s
# Warmup Iteration  16: 2743284.534 ops/s
# Warmup Iteration  17: 2765054.251 ops/s
# Warmup Iteration  18: 2753089.968 ops/s
# Warmup Iteration  19: 2749645.997 ops/s
# Warmup Iteration  20: 2766966.843 ops/s
# Warmup Iteration  21: 2757630.252 ops/s
# Warmup Iteration  22: 2698180.522 ops/s
# Warmup Iteration  23: 2764155.034 ops/s
# Warmup Iteration  24: 2765812.453 ops/s
# Warmup Iteration  25: 2715096.566 ops/s
# Warmup Iteration  26: 2764203.215 ops/s
# Warmup Iteration  27: 2769466.847 ops/s
# Warmup Iteration  28: 2768458.133 ops/s
# Warmup Iteration  29: 2734458.736 ops/s
# Warmup Iteration  30: 2761492.611 ops/s
Iteration   1: 2762641.203 ops/s
Iteration   2: 2754438.779 ops/s
Iteration   3: 2752266.489 ops/s
Iteration   4: 2733970.846 ops/s
Iteration   5: 2745707.090 ops/s
Iteration   6: 2765613.473 ops/s
Iteration   7: 2782015.505 ops/s
Iteration   8: 2761869.977 ops/s
Iteration   9: 2722301.158 ops/s
Iteration  10: 2762422.057 ops/s
Iteration  11: 2758703.892 ops/s
Iteration  12: 2726353.051 ops/s
Iteration  13: 2762223.220 ops/s
Iteration  14: 2764857.605 ops/s
Iteration  15: 2780629.251 ops/s
Iteration  16: 2760581.256 ops/s
Iteration  17: 2752521.523 ops/s
Iteration  18: 2766083.494 ops/s
Iteration  19: 2763996.101 ops/s
Iteration  20: 2766581.470 ops/s
Iteration  21: 2761690.409 ops/s
Iteration  22: 2774893.277 ops/s
Iteration  23: 2776676.935 ops/s
Iteration  24: 2696685.920 ops/s
Iteration  25: 2772557.004 ops/s
Iteration  26: 2771627.768 ops/s
Iteration  27: 2756639.534 ops/s
Iteration  28: 2692761.043 ops/s
Iteration  29: 2776553.507 ops/s
Iteration  30: 2750246.424 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_countByWith":
  2755870.309 ±(99.9%) 14606.550 ops/s [Average]
  (min, avg, max) = (2692761.043, 2755870.309, 2782015.505), stdev = 21862.398
  CI (99.9%): [2741263.759, 2770476.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_countByWith  thrpt   30  2755870.309 ± 14606.550  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3667195.136 ops/s
# Warmup Iteration   2: 8238829.616 ops/s
# Warmup Iteration   3: 8176782.519 ops/s
# Warmup Iteration   4: 6916245.504 ops/s
# Warmup Iteration   5: 8245414.663 ops/s
# Warmup Iteration   6: 8111365.337 ops/s
# Warmup Iteration   7: 8233396.148 ops/s
# Warmup Iteration   8: 8080256.881 ops/s
# Warmup Iteration   9: 8152763.233 ops/s
# Warmup Iteration  10: 8133644.849 ops/s
# Warmup Iteration  11: 8234991.674 ops/s
# Warmup Iteration  12: 8221051.442 ops/s
# Warmup Iteration  13: 8116659.108 ops/s
# Warmup Iteration  14: 8231736.742 ops/s
# Warmup Iteration  15: 8238971.250 ops/s
# Warmup Iteration  16: 8133578.709 ops/s
# Warmup Iteration  17: 8229647.772 ops/s
# Warmup Iteration  18: 8245693.691 ops/s
# Warmup Iteration  19: 8299839.077 ops/s
# Warmup Iteration  20: 8274410.940 ops/s
# Warmup Iteration  21: 8263719.829 ops/s
# Warmup Iteration  22: 8272958.296 ops/s
# Warmup Iteration  23: 8271051.857 ops/s
# Warmup Iteration  24: 8264686.212 ops/s
# Warmup Iteration  25: 8217536.200 ops/s
# Warmup Iteration  26: 8244280.219 ops/s
# Warmup Iteration  27: 8266404.838 ops/s
# Warmup Iteration  28: 8288462.266 ops/s
# Warmup Iteration  29: 8264863.047 ops/s
# Warmup Iteration  30: 8285469.311 ops/s
Iteration   1: 8295212.664 ops/s
Iteration   2: 8025435.991 ops/s
Iteration   3: 8289666.974 ops/s
Iteration   4: 8222941.128 ops/s
Iteration   5: 8276806.040 ops/s
Iteration   6: 8230424.243 ops/s
Iteration   7: 8291372.909 ops/s
Iteration   8: 8277973.324 ops/s
Iteration   9: 8323304.837 ops/s
Iteration  10: 8225988.960 ops/s
Iteration  11: 8258218.862 ops/s
Iteration  12: 8289407.497 ops/s
Iteration  13: 8300698.847 ops/s
Iteration  14: 8261916.933 ops/s
Iteration  15: 8278728.064 ops/s
Iteration  16: 8281817.858 ops/s
Iteration  17: 8171344.483 ops/s
Iteration  18: 8248313.420 ops/s
Iteration  19: 8246832.872 ops/s
Iteration  20: 8243096.080 ops/s
Iteration  21: 8260395.157 ops/s
Iteration  22: 8249935.700 ops/s
Iteration  23: 8237669.158 ops/s
Iteration  24: 8233517.860 ops/s
Iteration  25: 8259008.769 ops/s
Iteration  26: 8315698.976 ops/s
Iteration  27: 8011034.415 ops/s
Iteration  28: 8260437.319 ops/s
Iteration  29: 8296905.558 ops/s
Iteration  30: 8266057.921 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_countWith":
  8247672.094 ±(99.9%) 46616.417 ops/s [Average]
  (min, avg, max) = (8011034.415, 8247672.094, 8323304.837), stdev = 69773.264
  CI (99.9%): [8201055.677, 8294288.511] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_countWith  thrpt   30  8247672.094 ± 46616.417  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2160434.816 ops/s
# Warmup Iteration   2: 4731930.683 ops/s
# Warmup Iteration   3: 4636251.899 ops/s
# Warmup Iteration   4: 4167022.306 ops/s
# Warmup Iteration   5: 4835672.959 ops/s
# Warmup Iteration   6: 4830223.978 ops/s
# Warmup Iteration   7: 4835319.101 ops/s
# Warmup Iteration   8: 4840278.697 ops/s
# Warmup Iteration   9: 4845046.356 ops/s
# Warmup Iteration  10: 4833147.981 ops/s
# Warmup Iteration  11: 4832945.455 ops/s
# Warmup Iteration  12: 4822435.267 ops/s
# Warmup Iteration  13: 4850182.709 ops/s
# Warmup Iteration  14: 4836615.799 ops/s
# Warmup Iteration  15: 4833001.515 ops/s
# Warmup Iteration  16: 4843750.714 ops/s
# Warmup Iteration  17: 4793554.388 ops/s
# Warmup Iteration  18: 4843282.195 ops/s
# Warmup Iteration  19: 4836755.958 ops/s
# Warmup Iteration  20: 4835995.974 ops/s
# Warmup Iteration  21: 4850450.091 ops/s
# Warmup Iteration  22: 4846191.694 ops/s
# Warmup Iteration  23: 4807209.579 ops/s
# Warmup Iteration  24: 4822091.538 ops/s
# Warmup Iteration  25: 4837317.788 ops/s
# Warmup Iteration  26: 4861127.620 ops/s
# Warmup Iteration  27: 4830681.618 ops/s
# Warmup Iteration  28: 4812447.027 ops/s
# Warmup Iteration  29: 4808090.101 ops/s
# Warmup Iteration  30: 4868356.344 ops/s
Iteration   1: 4867199.440 ops/s
Iteration   2: 4821020.182 ops/s
Iteration   3: 4840127.970 ops/s
Iteration   4: 4826359.768 ops/s
Iteration   5: 4832831.040 ops/s
Iteration   6: 4875824.771 ops/s
Iteration   7: 4866173.313 ops/s
Iteration   8: 4866189.339 ops/s
Iteration   9: 4851432.815 ops/s
Iteration  10: 4864855.704 ops/s
Iteration  11: 4830479.431 ops/s
Iteration  12: 4829011.266 ops/s
Iteration  13: 4860044.034 ops/s
Iteration  14: 4842520.345 ops/s
Iteration  15: 4842945.376 ops/s
Iteration  16: 4705027.659 ops/s
Iteration  17: 4845556.194 ops/s
Iteration  18: 4836247.560 ops/s
Iteration  19: 4871635.954 ops/s
Iteration  20: 4851067.360 ops/s
Iteration  21: 4848948.469 ops/s
Iteration  22: 4764062.071 ops/s
Iteration  23: 4838913.859 ops/s
Iteration  24: 4851646.032 ops/s
Iteration  25: 4882575.691 ops/s
Iteration  26: 4831178.616 ops/s
Iteration  27: 4844885.996 ops/s
Iteration  28: 4865184.781 ops/s
Iteration  29: 4838772.810 ops/s
Iteration  30: 4851160.862 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detect":
  4841462.624 ±(99.9%) 22656.250 ops/s [Average]
  (min, avg, max) = (4705027.659, 4841462.624, 4882575.691), stdev = 33910.811
  CI (99.9%): [4818806.373, 4864118.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_detect  thrpt   30  4841462.624 ± 22656.250  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2917406.786 ops/s
# Warmup Iteration   2: 6034983.965 ops/s
# Warmup Iteration   3: 5095299.501 ops/s
# Warmup Iteration   4: 6047683.284 ops/s
# Warmup Iteration   5: 6043399.586 ops/s
# Warmup Iteration   6: 6063910.356 ops/s
# Warmup Iteration   7: 6049884.701 ops/s
# Warmup Iteration   8: 6048090.937 ops/s
# Warmup Iteration   9: 6049626.606 ops/s
# Warmup Iteration  10: 6079019.005 ops/s
# Warmup Iteration  11: 6050247.119 ops/s
# Warmup Iteration  12: 6047364.504 ops/s
# Warmup Iteration  13: 6024628.703 ops/s
# Warmup Iteration  14: 6029105.834 ops/s
# Warmup Iteration  15: 5999747.428 ops/s
# Warmup Iteration  16: 6022153.417 ops/s
# Warmup Iteration  17: 5944741.884 ops/s
# Warmup Iteration  18: 6033256.932 ops/s
# Warmup Iteration  19: 6045443.979 ops/s
# Warmup Iteration  20: 5997697.717 ops/s
# Warmup Iteration  21: 6001462.283 ops/s
# Warmup Iteration  22: 6043545.715 ops/s
# Warmup Iteration  23: 6019393.106 ops/s
# Warmup Iteration  24: 6065363.553 ops/s
# Warmup Iteration  25: 6031845.809 ops/s
# Warmup Iteration  26: 5922958.108 ops/s
# Warmup Iteration  27: 6054570.277 ops/s
# Warmup Iteration  28: 5981314.748 ops/s
# Warmup Iteration  29: 6027230.881 ops/s
# Warmup Iteration  30: 6039194.339 ops/s
Iteration   1: 6016398.521 ops/s
Iteration   2: 6064722.305 ops/s
Iteration   3: 6055562.071 ops/s
Iteration   4: 6055210.575 ops/s
Iteration   5: 6042807.430 ops/s
Iteration   6: 6070824.175 ops/s
Iteration   7: 5760442.650 ops/s
Iteration   8: 6015685.479 ops/s
Iteration   9: 6033320.419 ops/s
Iteration  10: 6036700.428 ops/s
Iteration  11: 6066643.083 ops/s
Iteration  12: 6040298.430 ops/s
Iteration  13: 6027892.779 ops/s
Iteration  14: 5958299.042 ops/s
Iteration  15: 6031003.920 ops/s
Iteration  16: 6072945.256 ops/s
Iteration  17: 6046577.957 ops/s
Iteration  18: 6038543.205 ops/s
Iteration  19: 6062856.636 ops/s
Iteration  20: 5980567.100 ops/s
Iteration  21: 6034120.678 ops/s
Iteration  22: 6040900.282 ops/s
Iteration  23: 6008139.851 ops/s
Iteration  24: 6046522.744 ops/s
Iteration  25: 6030222.441 ops/s
Iteration  26: 6023521.966 ops/s
Iteration  27: 6049405.534 ops/s
Iteration  28: 6049605.127 ops/s
Iteration  29: 6058775.071 ops/s
Iteration  30: 6057323.319 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectIfNone":
  6029194.616 ±(99.9%) 37832.338 ops/s [Average]
  (min, avg, max) = (5760442.650, 6029194.616, 6072945.256), stdev = 56625.667
  CI (99.9%): [5991362.278, 6067026.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_detectIfNone  thrpt   30  6029194.616 ± 37832.338  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 993213.520 ops/s
# Warmup Iteration   2: 2220138.021 ops/s
# Warmup Iteration   3: 1972036.414 ops/s
# Warmup Iteration   4: 2181774.575 ops/s
# Warmup Iteration   5: 2257892.834 ops/s
# Warmup Iteration   6: 2248425.509 ops/s
# Warmup Iteration   7: 2247165.641 ops/s
# Warmup Iteration   8: 2270588.602 ops/s
# Warmup Iteration   9: 2239226.515 ops/s
# Warmup Iteration  10: 2238231.891 ops/s
# Warmup Iteration  11: 2214235.469 ops/s
# Warmup Iteration  12: 2247704.308 ops/s
# Warmup Iteration  13: 2268612.555 ops/s
# Warmup Iteration  14: 2226527.303 ops/s
# Warmup Iteration  15: 2269501.578 ops/s
# Warmup Iteration  16: 2265055.952 ops/s
# Warmup Iteration  17: 2267156.068 ops/s
# Warmup Iteration  18: 2265530.602 ops/s
# Warmup Iteration  19: 2241208.169 ops/s
# Warmup Iteration  20: 2246084.442 ops/s
# Warmup Iteration  21: 2266363.199 ops/s
# Warmup Iteration  22: 2247286.893 ops/s
# Warmup Iteration  23: 2247362.367 ops/s
# Warmup Iteration  24: 2265097.604 ops/s
# Warmup Iteration  25: 2269109.323 ops/s
# Warmup Iteration  26: 2252187.198 ops/s
# Warmup Iteration  27: 2269957.186 ops/s
# Warmup Iteration  28: 2233536.825 ops/s
# Warmup Iteration  29: 2258981.856 ops/s
# Warmup Iteration  30: 2266588.456 ops/s
Iteration   1: 2269049.546 ops/s
Iteration   2: 2270977.898 ops/s
Iteration   3: 2235080.029 ops/s
Iteration   4: 2280609.469 ops/s
Iteration   5: 2266097.022 ops/s
Iteration   6: 2264514.832 ops/s
Iteration   7: 2258085.540 ops/s
Iteration   8: 2274395.887 ops/s
Iteration   9: 2262824.804 ops/s
Iteration  10: 2271232.579 ops/s
Iteration  11: 2213596.069 ops/s
Iteration  12: 2275836.775 ops/s
Iteration  13: 2252708.494 ops/s
Iteration  14: 2267978.427 ops/s
Iteration  15: 2207621.869 ops/s
Iteration  16: 2266546.333 ops/s
Iteration  17: 2265760.737 ops/s
Iteration  18: 2262433.528 ops/s
Iteration  19: 2219665.229 ops/s
Iteration  20: 2259214.835 ops/s
Iteration  21: 2276467.263 ops/s
Iteration  22: 2274372.483 ops/s
Iteration  23: 2269366.860 ops/s
Iteration  24: 2256093.168 ops/s
Iteration  25: 2246047.380 ops/s
Iteration  26: 2268946.467 ops/s
Iteration  27: 2276994.712 ops/s
Iteration  28: 2272195.000 ops/s
Iteration  29: 2242547.815 ops/s
Iteration  30: 2231636.070 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectIndex":
  2258629.904 ±(99.9%) 12994.598 ops/s [Average]
  (min, avg, max) = (2207621.869, 2258629.904, 2280609.469), stdev = 19449.705
  CI (99.9%): [2245635.306, 2271624.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_detectIndex  thrpt   30  2258629.904 ± 12994.598  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1019419.753 ops/s
# Warmup Iteration   2: 2272779.056 ops/s
# Warmup Iteration   3: 1936653.571 ops/s
# Warmup Iteration   4: 2241029.165 ops/s
# Warmup Iteration   5: 2277128.431 ops/s
# Warmup Iteration   6: 2275432.293 ops/s
# Warmup Iteration   7: 2266845.968 ops/s
# Warmup Iteration   8: 2249593.765 ops/s
# Warmup Iteration   9: 2267939.798 ops/s
# Warmup Iteration  10: 2261589.418 ops/s
# Warmup Iteration  11: 2267393.851 ops/s
# Warmup Iteration  12: 2273122.304 ops/s
# Warmup Iteration  13: 2262722.118 ops/s
# Warmup Iteration  14: 2263299.484 ops/s
# Warmup Iteration  15: 2273682.005 ops/s
# Warmup Iteration  16: 2262049.444 ops/s
# Warmup Iteration  17: 2270948.065 ops/s
# Warmup Iteration  18: 2273210.761 ops/s
# Warmup Iteration  19: 2282895.126 ops/s
# Warmup Iteration  20: 2267258.360 ops/s
# Warmup Iteration  21: 2282519.117 ops/s
# Warmup Iteration  22: 2267527.681 ops/s
# Warmup Iteration  23: 2286717.914 ops/s
# Warmup Iteration  24: 2270856.123 ops/s
# Warmup Iteration  25: 2277532.530 ops/s
# Warmup Iteration  26: 2276887.006 ops/s
# Warmup Iteration  27: 2286937.493 ops/s
# Warmup Iteration  28: 2285172.031 ops/s
# Warmup Iteration  29: 2276753.591 ops/s
# Warmup Iteration  30: 2282947.085 ops/s
Iteration   1: 2244711.083 ops/s
Iteration   2: 2277954.269 ops/s
Iteration   3: 2221298.133 ops/s
Iteration   4: 2276727.195 ops/s
Iteration   5: 2249313.009 ops/s
Iteration   6: 2243988.813 ops/s
Iteration   7: 2277416.093 ops/s
Iteration   8: 2242358.393 ops/s
Iteration   9: 2282576.967 ops/s
Iteration  10: 2274334.610 ops/s
Iteration  11: 2231357.250 ops/s
Iteration  12: 2275375.940 ops/s
Iteration  13: 2276986.123 ops/s
Iteration  14: 2282830.134 ops/s
Iteration  15: 2274157.121 ops/s
Iteration  16: 2247958.358 ops/s
Iteration  17: 2249266.240 ops/s
Iteration  18: 2289236.226 ops/s
Iteration  19: 2282970.290 ops/s
Iteration  20: 2269131.248 ops/s
Iteration  21: 2256328.072 ops/s
Iteration  22: 2278270.549 ops/s
Iteration  23: 2286717.070 ops/s
Iteration  24: 2276278.021 ops/s
Iteration  25: 2282991.650 ops/s
Iteration  26: 2282553.684 ops/s
Iteration  27: 2256594.669 ops/s
Iteration  28: 2290888.959 ops/s
Iteration  29: 2279035.914 ops/s
Iteration  30: 2277738.296 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectLastIndex":
  2267911.479 ±(99.9%) 12378.838 ops/s [Average]
  (min, avg, max) = (2221298.133, 2267911.479, 2290888.959), stdev = 18528.064
  CI (99.9%): [2255532.641, 2280290.318] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  2267911.479 ± 12378.838  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 485375.666 ops/s
# Warmup Iteration   2: 607389.071 ops/s
# Warmup Iteration   3: 781608.485 ops/s
# Warmup Iteration   4: 776324.911 ops/s
# Warmup Iteration   5: 786408.551 ops/s
# Warmup Iteration   6: 775233.549 ops/s
# Warmup Iteration   7: 778524.102 ops/s
# Warmup Iteration   8: 756190.464 ops/s
# Warmup Iteration   9: 668567.783 ops/s
# Warmup Iteration  10: 781520.098 ops/s
# Warmup Iteration  11: 783044.228 ops/s
# Warmup Iteration  12: 782865.872 ops/s
# Warmup Iteration  13: 784275.627 ops/s
# Warmup Iteration  14: 786530.530 ops/s
# Warmup Iteration  15: 780719.634 ops/s
# Warmup Iteration  16: 782383.728 ops/s
# Warmup Iteration  17: 821508.402 ops/s
# Warmup Iteration  18: 820887.596 ops/s
# Warmup Iteration  19: 817668.193 ops/s
# Warmup Iteration  20: 817864.083 ops/s
# Warmup Iteration  21: 817623.895 ops/s
# Warmup Iteration  22: 821558.496 ops/s
# Warmup Iteration  23: 827239.460 ops/s
# Warmup Iteration  24: 820696.260 ops/s
# Warmup Iteration  25: 825379.818 ops/s
# Warmup Iteration  26: 822787.585 ops/s
# Warmup Iteration  27: 824279.000 ops/s
# Warmup Iteration  28: 811323.539 ops/s
# Warmup Iteration  29: 822965.502 ops/s
# Warmup Iteration  30: 824769.465 ops/s
Iteration   1: 819727.826 ops/s
Iteration   2: 820130.242 ops/s
Iteration   3: 823075.587 ops/s
Iteration   4: 821315.295 ops/s
Iteration   5: 803926.421 ops/s
Iteration   6: 820577.425 ops/s
Iteration   7: 826311.334 ops/s
Iteration   8: 825986.435 ops/s
Iteration   9: 807136.095 ops/s
Iteration  10: 803854.385 ops/s
Iteration  11: 820838.291 ops/s
Iteration  12: 816435.893 ops/s
Iteration  13: 821262.016 ops/s
Iteration  14: 821280.205 ops/s
Iteration  15: 823240.498 ops/s
Iteration  16: 811957.430 ops/s
Iteration  17: 825927.327 ops/s
Iteration  18: 818320.558 ops/s
Iteration  19: 821932.958 ops/s
Iteration  20: 820239.563 ops/s
Iteration  21: 810357.041 ops/s
Iteration  22: 823786.088 ops/s
Iteration  23: 817749.794 ops/s
Iteration  24: 828629.650 ops/s
Iteration  25: 824982.725 ops/s
Iteration  26: 824625.666 ops/s
Iteration  27: 823520.252 ops/s
Iteration  28: 815186.591 ops/s
Iteration  29: 825846.827 ops/s
Iteration  30: 824068.993 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectOptional":
  819740.980 ±(99.9%) 4338.289 ops/s [Average]
  (min, avg, max) = (803854.385, 819740.980, 828629.650), stdev = 6493.348
  CI (99.9%): [815402.691, 824079.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_detectOptional  thrpt   30  819740.980 ± 4338.289  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2247362.943 ops/s
# Warmup Iteration   2: 5150257.344 ops/s
# Warmup Iteration   3: 4875282.098 ops/s
# Warmup Iteration   4: 4706916.838 ops/s
# Warmup Iteration   5: 5196862.410 ops/s
# Warmup Iteration   6: 5164514.635 ops/s
# Warmup Iteration   7: 5234783.509 ops/s
# Warmup Iteration   8: 5210911.055 ops/s
# Warmup Iteration   9: 5199388.326 ops/s
# Warmup Iteration  10: 5216459.043 ops/s
# Warmup Iteration  11: 5218923.412 ops/s
# Warmup Iteration  12: 5205164.351 ops/s
# Warmup Iteration  13: 5167610.585 ops/s
# Warmup Iteration  14: 5230595.473 ops/s
# Warmup Iteration  15: 5230810.937 ops/s
# Warmup Iteration  16: 5217487.309 ops/s
# Warmup Iteration  17: 5159393.763 ops/s
# Warmup Iteration  18: 5118165.394 ops/s
# Warmup Iteration  19: 5227974.974 ops/s
# Warmup Iteration  20: 5213219.151 ops/s
# Warmup Iteration  21: 5198284.642 ops/s
# Warmup Iteration  22: 5215682.147 ops/s
# Warmup Iteration  23: 5191311.382 ops/s
# Warmup Iteration  24: 5186424.843 ops/s
# Warmup Iteration  25: 5131779.575 ops/s
# Warmup Iteration  26: 5224731.638 ops/s
# Warmup Iteration  27: 5205655.478 ops/s
# Warmup Iteration  28: 5201938.015 ops/s
# Warmup Iteration  29: 5228670.320 ops/s
# Warmup Iteration  30: 5211386.645 ops/s
Iteration   1: 5144629.203 ops/s
Iteration   2: 5203884.504 ops/s
Iteration   3: 5231081.784 ops/s
Iteration   4: 5139749.792 ops/s
Iteration   5: 5227211.520 ops/s
Iteration   6: 5199137.417 ops/s
Iteration   7: 5225073.668 ops/s
Iteration   8: 5218809.708 ops/s
Iteration   9: 5217491.180 ops/s
Iteration  10: 5137792.775 ops/s
Iteration  11: 5171233.516 ops/s
Iteration  12: 5220377.472 ops/s
Iteration  13: 5205583.892 ops/s
Iteration  14: 5213323.947 ops/s
Iteration  15: 5231336.212 ops/s
Iteration  16: 5196914.698 ops/s
Iteration  17: 5244036.182 ops/s
Iteration  18: 5234795.033 ops/s
Iteration  19: 5208199.794 ops/s
Iteration  20: 5229898.263 ops/s
Iteration  21: 5231579.405 ops/s
Iteration  22: 5224279.666 ops/s
Iteration  23: 5233689.596 ops/s
Iteration  24: 5112352.143 ops/s
Iteration  25: 5219850.963 ops/s
Iteration  26: 5234444.122 ops/s
Iteration  27: 5189759.101 ops/s
Iteration  28: 5216941.222 ops/s
Iteration  29: 5224863.990 ops/s
Iteration  30: 5188802.712 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectWith":
  5205904.116 ±(99.9%) 22264.339 ops/s [Average]
  (min, avg, max) = (5112352.143, 5205904.116, 5244036.182), stdev = 33324.217
  CI (99.9%): [5183639.777, 5228168.455] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_detectWith  thrpt   30  5205904.116 ± 22264.339  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2816482.001 ops/s
# Warmup Iteration   2: 6383484.305 ops/s
# Warmup Iteration   3: 6618315.853 ops/s
# Warmup Iteration   4: 5492758.375 ops/s
# Warmup Iteration   5: 6606888.540 ops/s
# Warmup Iteration   6: 6626205.480 ops/s
# Warmup Iteration   7: 6595839.541 ops/s
# Warmup Iteration   8: 6533670.388 ops/s
# Warmup Iteration   9: 6586435.578 ops/s
# Warmup Iteration  10: 6594550.651 ops/s
# Warmup Iteration  11: 6566366.171 ops/s
# Warmup Iteration  12: 6591290.940 ops/s
# Warmup Iteration  13: 6597089.994 ops/s
# Warmup Iteration  14: 6627163.668 ops/s
# Warmup Iteration  15: 6574051.555 ops/s
# Warmup Iteration  16: 6613429.732 ops/s
# Warmup Iteration  17: 6607894.482 ops/s
# Warmup Iteration  18: 6612403.725 ops/s
# Warmup Iteration  19: 6620938.214 ops/s
# Warmup Iteration  20: 6617189.465 ops/s
# Warmup Iteration  21: 6610800.209 ops/s
# Warmup Iteration  22: 6591343.530 ops/s
# Warmup Iteration  23: 6580931.439 ops/s
# Warmup Iteration  24: 6643809.198 ops/s
# Warmup Iteration  25: 6608758.694 ops/s
# Warmup Iteration  26: 6565279.306 ops/s
# Warmup Iteration  27: 6615916.314 ops/s
# Warmup Iteration  28: 6629877.950 ops/s
# Warmup Iteration  29: 6623628.880 ops/s
# Warmup Iteration  30: 6567924.990 ops/s
Iteration   1: 6609808.804 ops/s
Iteration   2: 6518596.065 ops/s
Iteration   3: 6623124.565 ops/s
Iteration   4: 6592297.330 ops/s
Iteration   5: 6631907.899 ops/s
Iteration   6: 6624766.049 ops/s
Iteration   7: 6621348.595 ops/s
Iteration   8: 6620764.241 ops/s
Iteration   9: 6614165.960 ops/s
Iteration  10: 6621750.643 ops/s
Iteration  11: 6606077.139 ops/s
Iteration  12: 6628373.525 ops/s
Iteration  13: 6635858.957 ops/s
Iteration  14: 6621575.602 ops/s
Iteration  15: 6600367.875 ops/s
Iteration  16: 6614616.404 ops/s
Iteration  17: 6528727.587 ops/s
Iteration  18: 6615046.838 ops/s
Iteration  19: 6652030.275 ops/s
Iteration  20: 6609065.394 ops/s
Iteration  21: 6620024.959 ops/s
Iteration  22: 6615860.358 ops/s
Iteration  23: 6638296.853 ops/s
Iteration  24: 6599456.969 ops/s
Iteration  25: 6617469.238 ops/s
Iteration  26: 6605411.076 ops/s
Iteration  27: 6620284.557 ops/s
Iteration  28: 6397336.322 ops/s
Iteration  29: 6580998.218 ops/s
Iteration  30: 6576855.386 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectWithIfNone":
  6602075.456 ±(99.9%) 31901.269 ops/s [Average]
  (min, avg, max) = (6397336.322, 6602075.456, 6652030.275), stdev = 47748.322
  CI (99.9%): [6570174.187, 6633976.725] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  6602075.456 ± 31901.269  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2738478.844 ops/s
# Warmup Iteration   2: 5456277.166 ops/s
# Warmup Iteration   3: 4778101.045 ops/s
# Warmup Iteration   4: 5628560.258 ops/s
# Warmup Iteration   5: 5633892.934 ops/s
# Warmup Iteration   6: 5589968.358 ops/s
# Warmup Iteration   7: 5578951.324 ops/s
# Warmup Iteration   8: 5628851.884 ops/s
# Warmup Iteration   9: 5632070.855 ops/s
# Warmup Iteration  10: 5583384.738 ops/s
# Warmup Iteration  11: 5630078.511 ops/s
# Warmup Iteration  12: 5638735.576 ops/s
# Warmup Iteration  13: 5629700.934 ops/s
# Warmup Iteration  14: 5592637.653 ops/s
# Warmup Iteration  15: 5658336.208 ops/s
# Warmup Iteration  16: 5623257.743 ops/s
# Warmup Iteration  17: 5624227.005 ops/s
# Warmup Iteration  18: 5524207.145 ops/s
# Warmup Iteration  19: 5636588.028 ops/s
# Warmup Iteration  20: 5618199.357 ops/s
# Warmup Iteration  21: 5622997.632 ops/s
# Warmup Iteration  22: 5629826.877 ops/s
# Warmup Iteration  23: 5563756.075 ops/s
# Warmup Iteration  24: 5625834.959 ops/s
# Warmup Iteration  25: 5598932.456 ops/s
# Warmup Iteration  26: 5633638.342 ops/s
# Warmup Iteration  27: 5629780.610 ops/s
# Warmup Iteration  28: 5630345.509 ops/s
# Warmup Iteration  29: 5643775.971 ops/s
# Warmup Iteration  30: 5634869.227 ops/s
Iteration   1: 5614700.977 ops/s
Iteration   2: 5580430.133 ops/s
Iteration   3: 5587373.893 ops/s
Iteration   4: 5556640.554 ops/s
Iteration   5: 5629200.759 ops/s
Iteration   6: 5556316.667 ops/s
Iteration   7: 5644555.870 ops/s
Iteration   8: 5637148.347 ops/s
Iteration   9: 5632513.158 ops/s
Iteration  10: 5648279.362 ops/s
Iteration  11: 5617568.859 ops/s
Iteration  12: 5563558.235 ops/s
Iteration  13: 5606396.358 ops/s
Iteration  14: 5653040.115 ops/s
Iteration  15: 5609058.301 ops/s
Iteration  16: 5625473.325 ops/s
Iteration  17: 5646068.386 ops/s
Iteration  18: 5624986.345 ops/s
Iteration  19: 5639440.256 ops/s
Iteration  20: 5640508.335 ops/s
Iteration  21: 5656664.363 ops/s
Iteration  22: 5595526.242 ops/s
Iteration  23: 5507883.246 ops/s
Iteration  24: 5519495.934 ops/s
Iteration  25: 5538909.245 ops/s
Iteration  26: 5626123.364 ops/s
Iteration  27: 5620192.372 ops/s
Iteration  28: 5604575.229 ops/s
Iteration  29: 5614564.060 ops/s
Iteration  30: 5545190.607 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectWithIfNoneBlock":
  5604746.097 ±(99.9%) 27434.575 ops/s [Average]
  (min, avg, max) = (5507883.246, 5604746.097, 5656664.363), stdev = 41062.783
  CI (99.9%): [5577311.522, 5632180.671] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  5604746.097 ± 27434.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 497525.589 ops/s
# Warmup Iteration   2: 631247.051 ops/s
# Warmup Iteration   3: 768684.353 ops/s
# Warmup Iteration   4: 762204.998 ops/s
# Warmup Iteration   5: 774518.253 ops/s
# Warmup Iteration   6: 776437.579 ops/s
# Warmup Iteration   7: 777974.004 ops/s
# Warmup Iteration   8: 764530.483 ops/s
# Warmup Iteration   9: 667199.330 ops/s
# Warmup Iteration  10: 780639.969 ops/s
# Warmup Iteration  11: 781270.818 ops/s
# Warmup Iteration  12: 782464.378 ops/s
# Warmup Iteration  13: 778772.592 ops/s
# Warmup Iteration  14: 776988.456 ops/s
# Warmup Iteration  15: 772913.498 ops/s
# Warmup Iteration  16: 779049.227 ops/s
# Warmup Iteration  17: 816296.337 ops/s
# Warmup Iteration  18: 822697.382 ops/s
# Warmup Iteration  19: 818992.762 ops/s
# Warmup Iteration  20: 823954.016 ops/s
# Warmup Iteration  21: 823948.661 ops/s
# Warmup Iteration  22: 822322.498 ops/s
# Warmup Iteration  23: 815186.200 ops/s
# Warmup Iteration  24: 821498.660 ops/s
# Warmup Iteration  25: 821362.103 ops/s
# Warmup Iteration  26: 820108.488 ops/s
# Warmup Iteration  27: 815297.517 ops/s
# Warmup Iteration  28: 823803.072 ops/s
# Warmup Iteration  29: 815884.880 ops/s
# Warmup Iteration  30: 818414.023 ops/s
Iteration   1: 823854.952 ops/s
Iteration   2: 823464.473 ops/s
Iteration   3: 820628.514 ops/s
Iteration   4: 820509.197 ops/s
Iteration   5: 811422.831 ops/s
Iteration   6: 822457.956 ops/s
Iteration   7: 819226.862 ops/s
Iteration   8: 817692.984 ops/s
Iteration   9: 821082.040 ops/s
Iteration  10: 822424.087 ops/s
Iteration  11: 823990.154 ops/s
Iteration  12: 805672.541 ops/s
Iteration  13: 818083.068 ops/s
Iteration  14: 823122.534 ops/s
Iteration  15: 806551.279 ops/s
Iteration  16: 821574.556 ops/s
Iteration  17: 820933.390 ops/s
Iteration  18: 819267.047 ops/s
Iteration  19: 820306.364 ops/s
Iteration  20: 804515.568 ops/s
Iteration  21: 822998.060 ops/s
Iteration  22: 824190.219 ops/s
Iteration  23: 819168.533 ops/s
Iteration  24: 820494.070 ops/s
Iteration  25: 819973.335 ops/s
Iteration  26: 811026.831 ops/s
Iteration  27: 822601.093 ops/s
Iteration  28: 821120.618 ops/s
Iteration  29: 820746.436 ops/s
Iteration  30: 818540.583 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_detectWithOptional":
  818921.339 ±(99.9%) 3644.943 ops/s [Average]
  (min, avg, max) = (804515.568, 818921.339, 824190.219), stdev = 5455.579
  CI (99.9%): [815276.396, 822566.282] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_detectWithOptional  thrpt   30  818921.339 ± 3644.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3167176.891 ops/s
# Warmup Iteration   2: 7091622.103 ops/s
# Warmup Iteration   3: 6029596.383 ops/s
# Warmup Iteration   4: 7152804.068 ops/s
# Warmup Iteration   5: 7148332.385 ops/s
# Warmup Iteration   6: 7181727.552 ops/s
# Warmup Iteration   7: 7163843.689 ops/s
# Warmup Iteration   8: 7141577.847 ops/s
# Warmup Iteration   9: 7160222.867 ops/s
# Warmup Iteration  10: 7130582.311 ops/s
# Warmup Iteration  11: 7175668.746 ops/s
# Warmup Iteration  12: 7164374.213 ops/s
# Warmup Iteration  13: 7172889.247 ops/s
# Warmup Iteration  14: 7167591.867 ops/s
# Warmup Iteration  15: 7138196.611 ops/s
# Warmup Iteration  16: 7178824.748 ops/s
# Warmup Iteration  17: 7185739.806 ops/s
# Warmup Iteration  18: 7215134.145 ops/s
# Warmup Iteration  19: 7214214.790 ops/s
# Warmup Iteration  20: 7209182.937 ops/s
# Warmup Iteration  21: 7173941.074 ops/s
# Warmup Iteration  22: 7151336.172 ops/s
# Warmup Iteration  23: 7158523.702 ops/s
# Warmup Iteration  24: 7171933.044 ops/s
# Warmup Iteration  25: 7202307.320 ops/s
# Warmup Iteration  26: 7214379.672 ops/s
# Warmup Iteration  27: 7195646.780 ops/s
# Warmup Iteration  28: 7172795.663 ops/s
# Warmup Iteration  29: 7145739.886 ops/s
# Warmup Iteration  30: 7191663.682 ops/s
Iteration   1: 7182635.161 ops/s
Iteration   2: 7085800.939 ops/s
Iteration   3: 7217022.541 ops/s
Iteration   4: 7162495.067 ops/s
Iteration   5: 7163282.478 ops/s
Iteration   6: 7022420.654 ops/s
Iteration   7: 7171713.196 ops/s
Iteration   8: 7230962.811 ops/s
Iteration   9: 7184247.486 ops/s
Iteration  10: 7172225.713 ops/s
Iteration  11: 7209307.410 ops/s
Iteration  12: 7164455.331 ops/s
Iteration  13: 7180628.520 ops/s
Iteration  14: 7017609.314 ops/s
Iteration  15: 7204408.060 ops/s
Iteration  16: 7057479.952 ops/s
Iteration  17: 7159128.871 ops/s
Iteration  18: 7161824.242 ops/s
Iteration  19: 7222113.281 ops/s
Iteration  20: 7161665.995 ops/s
Iteration  21: 7160227.628 ops/s
Iteration  22: 7174281.007 ops/s
Iteration  23: 7182233.656 ops/s
Iteration  24: 7212403.297 ops/s
Iteration  25: 7169661.258 ops/s
Iteration  26: 7161242.012 ops/s
Iteration  27: 7190524.767 ops/s
Iteration  28: 7215748.747 ops/s
Iteration  29: 7142893.957 ops/s
Iteration  30: 7202594.055 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_distinct":
  7164774.580 ±(99.9%) 35662.263 ops/s [Average]
  (min, avg, max) = (7017609.314, 7164774.580, 7230962.811), stdev = 53377.600
  CI (99.9%): [7129112.318, 7200436.843] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_distinct  thrpt   30  7164774.580 ± 35662.263  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1068266.258 ops/s
# Warmup Iteration   2: 2377966.351 ops/s
# Warmup Iteration   3: 2463422.873 ops/s
# Warmup Iteration   4: 2125487.475 ops/s
# Warmup Iteration   5: 2421537.499 ops/s
# Warmup Iteration   6: 2475122.113 ops/s
# Warmup Iteration   7: 2500820.630 ops/s
# Warmup Iteration   8: 2460619.099 ops/s
# Warmup Iteration   9: 2472543.669 ops/s
# Warmup Iteration  10: 2493723.239 ops/s
# Warmup Iteration  11: 2376308.959 ops/s
# Warmup Iteration  12: 2506524.827 ops/s
# Warmup Iteration  13: 2470388.095 ops/s
# Warmup Iteration  14: 2468773.522 ops/s
# Warmup Iteration  15: 2511232.440 ops/s
# Warmup Iteration  16: 2472619.218 ops/s
# Warmup Iteration  17: 2456947.030 ops/s
# Warmup Iteration  18: 2462009.711 ops/s
# Warmup Iteration  19: 2490048.921 ops/s
# Warmup Iteration  20: 2483123.770 ops/s
# Warmup Iteration  21: 2491299.806 ops/s
# Warmup Iteration  22: 2421838.550 ops/s
# Warmup Iteration  23: 2455511.694 ops/s
# Warmup Iteration  24: 2451795.491 ops/s
# Warmup Iteration  25: 2481806.876 ops/s
# Warmup Iteration  26: 2518302.944 ops/s
# Warmup Iteration  27: 2486842.766 ops/s
# Warmup Iteration  28: 2485534.655 ops/s
# Warmup Iteration  29: 2477088.090 ops/s
# Warmup Iteration  30: 2473423.074 ops/s
Iteration   1: 2438382.254 ops/s
Iteration   2: 2425869.036 ops/s
Iteration   3: 2483252.125 ops/s
Iteration   4: 2487648.083 ops/s
Iteration   5: 2485359.773 ops/s
Iteration   6: 2481765.562 ops/s
Iteration   7: 2439162.846 ops/s
Iteration   8: 2463411.617 ops/s
Iteration   9: 2411429.225 ops/s
Iteration  10: 2463193.309 ops/s
Iteration  11: 2525000.613 ops/s
Iteration  12: 2383183.507 ops/s
Iteration  13: 2530431.274 ops/s
Iteration  14: 2502495.662 ops/s
Iteration  15: 2470402.034 ops/s
Iteration  16: 2485850.417 ops/s
Iteration  17: 2447649.993 ops/s
Iteration  18: 2476594.381 ops/s
Iteration  19: 2542804.610 ops/s
Iteration  20: 2491369.645 ops/s
Iteration  21: 2512694.420 ops/s
Iteration  22: 2501124.307 ops/s
Iteration  23: 2519715.612 ops/s
Iteration  24: 2476875.520 ops/s
Iteration  25: 2463463.296 ops/s
Iteration  26: 2481470.574 ops/s
Iteration  27: 2489028.757 ops/s
Iteration  28: 2481177.912 ops/s
Iteration  29: 2449580.441 ops/s
Iteration  30: 2462069.215 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_distinctBy":
  2475748.534 ±(99.9%) 23396.056 ops/s [Average]
  (min, avg, max) = (2383183.507, 2475748.534, 2542804.610), stdev = 35018.118
  CI (99.9%): [2452352.478, 2499144.590] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_distinctBy  thrpt   30  2475748.534 ± 23396.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1081999.336 ops/s
# Warmup Iteration   2: 2389505.747 ops/s
# Warmup Iteration   3: 2462225.287 ops/s
# Warmup Iteration   4: 2105850.475 ops/s
# Warmup Iteration   5: 2428000.538 ops/s
# Warmup Iteration   6: 2474242.800 ops/s
# Warmup Iteration   7: 2492802.039 ops/s
# Warmup Iteration   8: 2466327.003 ops/s
# Warmup Iteration   9: 2472456.454 ops/s
# Warmup Iteration  10: 2480576.771 ops/s
# Warmup Iteration  11: 2505642.087 ops/s
# Warmup Iteration  12: 2436127.882 ops/s
# Warmup Iteration  13: 2479700.630 ops/s
# Warmup Iteration  14: 2457452.381 ops/s
# Warmup Iteration  15: 2462752.596 ops/s
# Warmup Iteration  16: 2462031.495 ops/s
# Warmup Iteration  17: 2465443.652 ops/s
# Warmup Iteration  18: 2398577.987 ops/s
# Warmup Iteration  19: 2439218.988 ops/s
# Warmup Iteration  20: 2421267.500 ops/s
# Warmup Iteration  21: 2418235.253 ops/s
# Warmup Iteration  22: 2454203.167 ops/s
# Warmup Iteration  23: 2416064.926 ops/s
# Warmup Iteration  24: 2442953.899 ops/s
# Warmup Iteration  25: 2441939.929 ops/s
# Warmup Iteration  26: 2422851.720 ops/s
# Warmup Iteration  27: 2440601.103 ops/s
# Warmup Iteration  28: 2432547.049 ops/s
# Warmup Iteration  29: 2488333.658 ops/s
# Warmup Iteration  30: 2455244.273 ops/s
Iteration   1: 2472221.208 ops/s
Iteration   2: 2425773.729 ops/s
Iteration   3: 2420283.607 ops/s
Iteration   4: 2381639.327 ops/s
Iteration   5: 2395046.405 ops/s
Iteration   6: 2434476.203 ops/s
Iteration   7: 2426258.239 ops/s
Iteration   8: 2469586.563 ops/s
Iteration   9: 2379491.177 ops/s
Iteration  10: 2457048.333 ops/s
Iteration  11: 2430682.291 ops/s
Iteration  12: 2460695.313 ops/s
Iteration  13: 2464551.351 ops/s
Iteration  14: 2492352.430 ops/s
Iteration  15: 2460324.503 ops/s
Iteration  16: 2455259.662 ops/s
Iteration  17: 2460902.058 ops/s
Iteration  18: 2380009.891 ops/s
Iteration  19: 2411070.125 ops/s
Iteration  20: 2479558.920 ops/s
Iteration  21: 2463701.018 ops/s
Iteration  22: 2450527.759 ops/s
Iteration  23: 2488451.680 ops/s
Iteration  24: 2471346.562 ops/s
Iteration  25: 2429076.991 ops/s
Iteration  26: 2459783.813 ops/s
Iteration  27: 2452704.507 ops/s
Iteration  28: 2439559.545 ops/s
Iteration  29: 2391010.840 ops/s
Iteration  30: 2399732.972 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  2440104.234 ±(99.9%) 22103.526 ops/s [Average]
  (min, avg, max) = (2379491.177, 2440104.234, 2492352.430), stdev = 33083.519
  CI (99.9%): [2418000.708, 2462207.760] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  2440104.234 ± 22103.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1277201.215 ops/s
# Warmup Iteration   2: 2187083.008 ops/s
# Warmup Iteration   3: 2480458.986 ops/s
# Warmup Iteration   4: 2486746.171 ops/s
# Warmup Iteration   5: 2472167.783 ops/s
# Warmup Iteration   6: 2047965.261 ops/s
# Warmup Iteration   7: 2496712.192 ops/s
# Warmup Iteration   8: 2500890.606 ops/s
# Warmup Iteration   9: 2496814.964 ops/s
# Warmup Iteration  10: 2506636.301 ops/s
# Warmup Iteration  11: 2489839.681 ops/s
# Warmup Iteration  12: 2480276.478 ops/s
# Warmup Iteration  13: 2503029.372 ops/s
# Warmup Iteration  14: 2492304.560 ops/s
# Warmup Iteration  15: 2494724.146 ops/s
# Warmup Iteration  16: 2501128.356 ops/s
# Warmup Iteration  17: 2497959.375 ops/s
# Warmup Iteration  18: 2485955.153 ops/s
# Warmup Iteration  19: 2501671.776 ops/s
# Warmup Iteration  20: 2508165.789 ops/s
# Warmup Iteration  21: 2484830.775 ops/s
# Warmup Iteration  22: 2504315.157 ops/s
# Warmup Iteration  23: 2491374.846 ops/s
# Warmup Iteration  24: 2485097.583 ops/s
# Warmup Iteration  25: 2508107.366 ops/s
# Warmup Iteration  26: 2495255.830 ops/s
# Warmup Iteration  27: 2498631.002 ops/s
# Warmup Iteration  28: 2502380.193 ops/s
# Warmup Iteration  29: 2474082.973 ops/s
# Warmup Iteration  30: 2509055.162 ops/s
Iteration   1: 2473425.848 ops/s
Iteration   2: 2502475.709 ops/s
Iteration   3: 2514217.025 ops/s
Iteration   4: 2505167.511 ops/s
Iteration   5: 2508899.295 ops/s
Iteration   6: 2484197.528 ops/s
Iteration   7: 2505554.775 ops/s
Iteration   8: 2460541.698 ops/s
Iteration   9: 2497269.416 ops/s
Iteration  10: 2503505.867 ops/s
Iteration  11: 2505204.813 ops/s
Iteration  12: 2486039.437 ops/s
Iteration  13: 2506529.503 ops/s
Iteration  14: 2496492.372 ops/s
Iteration  15: 2499864.414 ops/s
Iteration  16: 2512907.298 ops/s
Iteration  17: 2511602.545 ops/s
Iteration  18: 2516542.219 ops/s
Iteration  19: 2508047.032 ops/s
Iteration  20: 2514173.821 ops/s
Iteration  21: 2507944.109 ops/s
Iteration  22: 2502829.525 ops/s
Iteration  23: 2481212.278 ops/s
Iteration  24: 2491481.184 ops/s
Iteration  25: 2490896.119 ops/s
Iteration  26: 2501667.038 ops/s
Iteration  27: 2489454.305 ops/s
Iteration  28: 2506161.449 ops/s
Iteration  29: 2511771.506 ops/s
Iteration  30: 2503236.964 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_drop":
  2499977.087 ±(99.9%) 8662.936 ops/s [Average]
  (min, avg, max) = (2460541.698, 2499977.087, 2516542.219), stdev = 12966.275
  CI (99.9%): [2491314.151, 2508640.023] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_drop  thrpt   30  2499977.087 ± 8662.936  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1269524.959 ops/s
# Warmup Iteration   2: 2938442.034 ops/s
# Warmup Iteration   3: 2835508.634 ops/s
# Warmup Iteration   4: 2580749.744 ops/s
# Warmup Iteration   5: 2980538.207 ops/s
# Warmup Iteration   6: 2942212.836 ops/s
# Warmup Iteration   7: 2972341.547 ops/s
# Warmup Iteration   8: 2957641.751 ops/s
# Warmup Iteration   9: 2975468.276 ops/s
# Warmup Iteration  10: 2938394.358 ops/s
# Warmup Iteration  11: 2922596.794 ops/s
# Warmup Iteration  12: 2969357.834 ops/s
# Warmup Iteration  13: 2969846.188 ops/s
# Warmup Iteration  14: 2940055.380 ops/s
# Warmup Iteration  15: 2954794.035 ops/s
# Warmup Iteration  16: 2966663.266 ops/s
# Warmup Iteration  17: 2931900.441 ops/s
# Warmup Iteration  18: 2967274.801 ops/s
# Warmup Iteration  19: 2898779.971 ops/s
# Warmup Iteration  20: 2966860.132 ops/s
# Warmup Iteration  21: 2954252.471 ops/s
# Warmup Iteration  22: 2958099.531 ops/s
# Warmup Iteration  23: 2964366.092 ops/s
# Warmup Iteration  24: 2948544.034 ops/s
# Warmup Iteration  25: 2936344.271 ops/s
# Warmup Iteration  26: 2959187.029 ops/s
# Warmup Iteration  27: 2961074.644 ops/s
# Warmup Iteration  28: 2948784.805 ops/s
# Warmup Iteration  29: 2922699.276 ops/s
# Warmup Iteration  30: 2943482.034 ops/s
Iteration   1: 2972933.405 ops/s
Iteration   2: 2956648.539 ops/s
Iteration   3: 2964621.015 ops/s
Iteration   4: 2954967.429 ops/s
Iteration   5: 2948925.006 ops/s
Iteration   6: 2949653.606 ops/s
Iteration   7: 2956822.198 ops/s
Iteration   8: 2956909.194 ops/s
Iteration   9: 2959965.449 ops/s
Iteration  10: 2954134.721 ops/s
Iteration  11: 2936055.035 ops/s
Iteration  12: 2947492.040 ops/s
Iteration  13: 2959312.813 ops/s
Iteration  14: 2952773.038 ops/s
Iteration  15: 2935355.383 ops/s
Iteration  16: 2927103.233 ops/s
Iteration  17: 2928263.061 ops/s
Iteration  18: 2963065.212 ops/s
Iteration  19: 2946122.644 ops/s
Iteration  20: 2957331.734 ops/s
Iteration  21: 2962407.800 ops/s
Iteration  22: 2906825.522 ops/s
Iteration  23: 2965812.857 ops/s
Iteration  24: 2960976.379 ops/s
Iteration  25: 2949197.551 ops/s
Iteration  26: 2967504.025 ops/s
Iteration  27: 2943589.461 ops/s
Iteration  28: 2947234.003 ops/s
Iteration  29: 2950751.331 ops/s
Iteration  30: 2961507.675 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_dropWhile":
  2951475.379 ±(99.9%) 9266.302 ops/s [Average]
  (min, avg, max) = (2906825.522, 2951475.379, 2972933.405), stdev = 13869.366
  CI (99.9%): [2942209.077, 2960741.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_dropWhile  thrpt   30  2951475.379 ± 9266.302  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 637635.298 ops/s
# Warmup Iteration   2: 729261.014 ops/s
# Warmup Iteration   3: 935973.772 ops/s
# Warmup Iteration   4: 934151.645 ops/s
# Warmup Iteration   5: 929635.178 ops/s
# Warmup Iteration   6: 937965.796 ops/s
# Warmup Iteration   7: 939653.534 ops/s
# Warmup Iteration   8: 929938.272 ops/s
# Warmup Iteration   9: 935638.778 ops/s
# Warmup Iteration  10: 785320.340 ops/s
# Warmup Iteration  11: 928924.648 ops/s
# Warmup Iteration  12: 926102.701 ops/s
# Warmup Iteration  13: 936697.031 ops/s
# Warmup Iteration  14: 918475.677 ops/s
# Warmup Iteration  15: 935587.398 ops/s
# Warmup Iteration  16: 934375.046 ops/s
# Warmup Iteration  17: 988581.489 ops/s
# Warmup Iteration  18: 993605.907 ops/s
# Warmup Iteration  19: 989542.807 ops/s
# Warmup Iteration  20: 993890.486 ops/s
# Warmup Iteration  21: 988931.535 ops/s
# Warmup Iteration  22: 975679.905 ops/s
# Warmup Iteration  23: 982821.344 ops/s
# Warmup Iteration  24: 983936.671 ops/s
# Warmup Iteration  25: 984515.717 ops/s
# Warmup Iteration  26: 991450.225 ops/s
# Warmup Iteration  27: 979136.011 ops/s
# Warmup Iteration  28: 988976.653 ops/s
# Warmup Iteration  29: 989591.572 ops/s
# Warmup Iteration  30: 984076.827 ops/s
Iteration   1: 994656.505 ops/s
Iteration   2: 992002.556 ops/s
Iteration   3: 978390.427 ops/s
Iteration   4: 991900.901 ops/s
Iteration   5: 990140.566 ops/s
Iteration   6: 980413.745 ops/s
Iteration   7: 986248.658 ops/s
Iteration   8: 981425.266 ops/s
Iteration   9: 974354.572 ops/s
Iteration  10: 986562.262 ops/s
Iteration  11: 990130.775 ops/s
Iteration  12: 996627.110 ops/s
Iteration  13: 995750.409 ops/s
Iteration  14: 988324.340 ops/s
Iteration  15: 990165.441 ops/s
Iteration  16: 976172.288 ops/s
Iteration  17: 991541.538 ops/s
Iteration  18: 988288.586 ops/s
Iteration  19: 976631.760 ops/s
Iteration  20: 989646.233 ops/s
Iteration  21: 991255.882 ops/s
Iteration  22: 988574.312 ops/s
Iteration  23: 992247.645 ops/s
Iteration  24: 992495.413 ops/s
Iteration  25: 992803.536 ops/s
Iteration  26: 990071.805 ops/s
Iteration  27: 990376.581 ops/s
Iteration  28: 994004.109 ops/s
Iteration  29: 979444.516 ops/s
Iteration  30: 990209.578 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_drop_throws":
  988028.577 ±(99.9%) 4094.499 ops/s [Average]
  (min, avg, max) = (974354.572, 988028.577, 996627.110), stdev = 6128.454
  CI (99.9%): [983934.078, 992123.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_drop_throws  thrpt   30  988028.577 ± 4094.499  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1679503.206 ops/s
# Warmup Iteration   2: 3637256.664 ops/s
# Warmup Iteration   3: 3619060.200 ops/s
# Warmup Iteration   4: 3049561.017 ops/s
# Warmup Iteration   5: 3619300.007 ops/s
# Warmup Iteration   6: 3586442.371 ops/s
# Warmup Iteration   7: 3597544.700 ops/s
# Warmup Iteration   8: 3630582.869 ops/s
# Warmup Iteration   9: 3619986.712 ops/s
# Warmup Iteration  10: 3555213.989 ops/s
# Warmup Iteration  11: 3621898.170 ops/s
# Warmup Iteration  12: 3616316.646 ops/s
# Warmup Iteration  13: 3628794.531 ops/s
# Warmup Iteration  14: 3627425.672 ops/s
# Warmup Iteration  15: 3612665.574 ops/s
# Warmup Iteration  16: 3601138.771 ops/s
# Warmup Iteration  17: 3603394.258 ops/s
# Warmup Iteration  18: 3578738.010 ops/s
# Warmup Iteration  19: 3622250.456 ops/s
# Warmup Iteration  20: 3606747.950 ops/s
# Warmup Iteration  21: 3615907.108 ops/s
# Warmup Iteration  22: 3629982.683 ops/s
# Warmup Iteration  23: 3630824.188 ops/s
# Warmup Iteration  24: 3627100.952 ops/s
# Warmup Iteration  25: 3630571.721 ops/s
# Warmup Iteration  26: 3588807.791 ops/s
# Warmup Iteration  27: 3632316.338 ops/s
# Warmup Iteration  28: 3616301.003 ops/s
# Warmup Iteration  29: 3626268.568 ops/s
# Warmup Iteration  30: 3628276.249 ops/s
Iteration   1: 3641262.712 ops/s
Iteration   2: 3628489.045 ops/s
Iteration   3: 3638864.167 ops/s
Iteration   4: 3565266.990 ops/s
Iteration   5: 3633614.972 ops/s
Iteration   6: 3561640.932 ops/s
Iteration   7: 3623768.322 ops/s
Iteration   8: 3581218.200 ops/s
Iteration   9: 3629323.162 ops/s
Iteration  10: 3644770.537 ops/s
Iteration  11: 3629912.549 ops/s
Iteration  12: 3577505.747 ops/s
Iteration  13: 3620675.546 ops/s
Iteration  14: 3620069.257 ops/s
Iteration  15: 3572250.564 ops/s
Iteration  16: 3631599.518 ops/s
Iteration  17: 3557236.208 ops/s
Iteration  18: 3647458.599 ops/s
Iteration  19: 3619025.286 ops/s
Iteration  20: 3629695.720 ops/s
Iteration  21: 3635244.848 ops/s
Iteration  22: 3638391.366 ops/s
Iteration  23: 3624464.916 ops/s
Iteration  24: 3620849.371 ops/s
Iteration  25: 3633474.190 ops/s
Iteration  26: 3631568.223 ops/s
Iteration  27: 3641629.407 ops/s
Iteration  28: 3597334.486 ops/s
Iteration  29: 3624080.725 ops/s
Iteration  30: 3574379.013 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_empty":
  3615835.486 ±(99.9%) 18509.774 ops/s [Average]
  (min, avg, max) = (3557236.208, 3615835.486, 3647458.599), stdev = 27704.561
  CI (99.9%): [3597325.712, 3634345.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_empty  thrpt   30  3615835.486 ± 18509.774  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31006.586 ops/s
# Warmup Iteration   2: 38430.711 ops/s
# Warmup Iteration   3: 53988.240 ops/s
# Warmup Iteration   4: 55833.372 ops/s
# Warmup Iteration   5: 55112.108 ops/s
# Warmup Iteration   6: 56080.698 ops/s
# Warmup Iteration   7: 56219.530 ops/s
# Warmup Iteration   8: 56281.075 ops/s
# Warmup Iteration   9: 56461.141 ops/s
# Warmup Iteration  10: 56066.370 ops/s
# Warmup Iteration  11: 48891.491 ops/s
# Warmup Iteration  12: 54603.106 ops/s
# Warmup Iteration  13: 56144.322 ops/s
# Warmup Iteration  14: 56139.319 ops/s
# Warmup Iteration  15: 55224.886 ops/s
# Warmup Iteration  16: 56090.393 ops/s
# Warmup Iteration  17: 56320.605 ops/s
# Warmup Iteration  18: 55930.572 ops/s
# Warmup Iteration  19: 56214.709 ops/s
# Warmup Iteration  20: 55936.509 ops/s
# Warmup Iteration  21: 56294.528 ops/s
# Warmup Iteration  22: 56384.930 ops/s
# Warmup Iteration  23: 56178.528 ops/s
# Warmup Iteration  24: 56135.340 ops/s
# Warmup Iteration  25: 55621.706 ops/s
# Warmup Iteration  26: 56009.105 ops/s
# Warmup Iteration  27: 56073.102 ops/s
# Warmup Iteration  28: 55454.995 ops/s
# Warmup Iteration  29: 56294.614 ops/s
# Warmup Iteration  30: 55899.264 ops/s
Iteration   1: 56050.322 ops/s
Iteration   2: 56147.673 ops/s
Iteration   3: 56189.520 ops/s
Iteration   4: 55958.518 ops/s
Iteration   5: 55142.828 ops/s
Iteration   6: 56022.334 ops/s
Iteration   7: 56247.586 ops/s
Iteration   8: 55995.918 ops/s
Iteration   9: 56302.773 ops/s
Iteration  10: 56124.043 ops/s
Iteration  11: 56003.055 ops/s
Iteration  12: 55871.176 ops/s
Iteration  13: 56241.331 ops/s
Iteration  14: 56313.045 ops/s
Iteration  15: 55808.430 ops/s
Iteration  16: 56446.332 ops/s
Iteration  17: 55281.862 ops/s
Iteration  18: 56281.826 ops/s
Iteration  19: 56423.201 ops/s
Iteration  20: 56298.414 ops/s
Iteration  21: 56369.832 ops/s
Iteration  22: 56418.297 ops/s
Iteration  23: 56362.153 ops/s
Iteration  24: 56184.370 ops/s
Iteration  25: 56373.439 ops/s
Iteration  26: 55582.725 ops/s
Iteration  27: 56552.298 ops/s
Iteration  28: 56322.967 ops/s
Iteration  29: 56533.515 ops/s
Iteration  30: 56137.060 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_equalsAndHashCode":
  56132.895 ±(99.9%) 222.318 ops/s [Average]
  (min, avg, max) = (55142.828, 56132.895, 56552.298), stdev = 332.755
  CI (99.9%): [55910.577, 56355.213] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt      Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  56132.895 ± 222.318  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_fastListNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_fastListNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3008100.844 ops/s
# Warmup Iteration   2: 4710774.261 ops/s
# Warmup Iteration   3: 5175073.573 ops/s
# Warmup Iteration   4: 5230100.474 ops/s
# Warmup Iteration   5: 5232638.046 ops/s
# Warmup Iteration   6: 4396824.457 ops/s
# Warmup Iteration   7: 5197559.913 ops/s
# Warmup Iteration   8: 5228123.315 ops/s
# Warmup Iteration   9: 5243342.956 ops/s
# Warmup Iteration  10: 5196846.009 ops/s
# Warmup Iteration  11: 5212491.230 ops/s
# Warmup Iteration  12: 5215319.660 ops/s
# Warmup Iteration  13: 5232054.845 ops/s
# Warmup Iteration  14: 5144572.368 ops/s
# Warmup Iteration  15: 5230738.233 ops/s
# Warmup Iteration  16: 5211551.805 ops/s
# Warmup Iteration  17: 5181395.937 ops/s
# Warmup Iteration  18: 5204523.262 ops/s
# Warmup Iteration  19: 5207477.777 ops/s
# Warmup Iteration  20: 5193716.199 ops/s
# Warmup Iteration  21: 5205710.237 ops/s
# Warmup Iteration  22: 5194926.675 ops/s
# Warmup Iteration  23: 5184118.519 ops/s
# Warmup Iteration  24: 5149520.533 ops/s
# Warmup Iteration  25: 5209852.999 ops/s
# Warmup Iteration  26: 5200920.473 ops/s
# Warmup Iteration  27: 5180770.005 ops/s
# Warmup Iteration  28: 5172859.712 ops/s
# Warmup Iteration  29: 5179650.865 ops/s
# Warmup Iteration  30: 5202269.872 ops/s
Iteration   1: 5158178.202 ops/s
Iteration   2: 5190748.820 ops/s
Iteration   3: 5214912.128 ops/s
Iteration   4: 5202312.069 ops/s
Iteration   5: 5197017.398 ops/s
Iteration   6: 5193402.935 ops/s
Iteration   7: 5214404.225 ops/s
Iteration   8: 5209489.447 ops/s
Iteration   9: 5219802.460 ops/s
Iteration  10: 5213961.102 ops/s
Iteration  11: 5224291.650 ops/s
Iteration  12: 5223386.978 ops/s
Iteration  13: 5169134.443 ops/s
Iteration  14: 5160875.040 ops/s
Iteration  15: 5197738.757 ops/s
Iteration  16: 5210228.513 ops/s
Iteration  17: 5177273.483 ops/s
Iteration  18: 5129021.764 ops/s
Iteration  19: 5196435.953 ops/s
Iteration  20: 5201714.241 ops/s
Iteration  21: 5215427.256 ops/s
Iteration  22: 5097822.576 ops/s
Iteration  23: 5067322.705 ops/s
Iteration  24: 5200112.724 ops/s
Iteration  25: 5192338.651 ops/s
Iteration  26: 5209895.861 ops/s
Iteration  27: 5179210.610 ops/s
Iteration  28: 5193278.370 ops/s
Iteration  29: 5207463.856 ops/s
Iteration  30: 5207311.220 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_fastListNewWith":
  5189150.448 ±(99.9%) 24118.818 ops/s [Average]
  (min, avg, max) = (5067322.705, 5189150.448, 5224291.650), stdev = 36099.914
  CI (99.9%): [5165031.630, 5213269.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_fastListNewWith  thrpt   30  5189150.448 ± 24118.818  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 443708.909 ops/s
# Warmup Iteration   2: 651895.856 ops/s
# Warmup Iteration   3: 774052.181 ops/s
# Warmup Iteration   4: 775365.284 ops/s
# Warmup Iteration   5: 779919.823 ops/s
# Warmup Iteration   6: 782844.725 ops/s
# Warmup Iteration   7: 653064.460 ops/s
# Warmup Iteration   8: 780369.982 ops/s
# Warmup Iteration   9: 778464.186 ops/s
# Warmup Iteration  10: 776747.421 ops/s
# Warmup Iteration  11: 777539.860 ops/s
# Warmup Iteration  12: 768645.869 ops/s
# Warmup Iteration  13: 772914.309 ops/s
# Warmup Iteration  14: 775799.651 ops/s
# Warmup Iteration  15: 772490.548 ops/s
# Warmup Iteration  16: 770887.641 ops/s
# Warmup Iteration  17: 777280.416 ops/s
# Warmup Iteration  18: 776674.920 ops/s
# Warmup Iteration  19: 776018.921 ops/s
# Warmup Iteration  20: 774171.647 ops/s
# Warmup Iteration  21: 780659.187 ops/s
# Warmup Iteration  22: 777641.880 ops/s
# Warmup Iteration  23: 775539.093 ops/s
# Warmup Iteration  24: 775738.533 ops/s
# Warmup Iteration  25: 762543.129 ops/s
# Warmup Iteration  26: 781590.795 ops/s
# Warmup Iteration  27: 774356.439 ops/s
# Warmup Iteration  28: 776941.292 ops/s
# Warmup Iteration  29: 776505.844 ops/s
# Warmup Iteration  30: 765261.151 ops/s
Iteration   1: 779938.124 ops/s
Iteration   2: 777643.127 ops/s
Iteration   3: 782113.316 ops/s
Iteration   4: 770953.995 ops/s
Iteration   5: 781475.208 ops/s
Iteration   6: 766680.684 ops/s
Iteration   7: 779737.614 ops/s
Iteration   8: 783379.228 ops/s
Iteration   9: 779345.352 ops/s
Iteration  10: 780276.407 ops/s
Iteration  11: 767512.452 ops/s
Iteration  12: 776954.269 ops/s
Iteration  13: 776566.880 ops/s
Iteration  14: 777936.045 ops/s
Iteration  15: 780428.474 ops/s
Iteration  16: 779353.684 ops/s
Iteration  17: 766370.269 ops/s
Iteration  18: 781112.098 ops/s
Iteration  19: 766075.365 ops/s
Iteration  20: 778563.860 ops/s
Iteration  21: 769287.240 ops/s
Iteration  22: 782477.849 ops/s
Iteration  23: 780123.752 ops/s
Iteration  24: 780220.052 ops/s
Iteration  25: 767573.546 ops/s
Iteration  26: 756060.591 ops/s
Iteration  27: 779256.951 ops/s
Iteration  28: 761461.723 ops/s
Iteration  29: 777124.911 ops/s
Iteration  30: 782843.202 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollect":
  775628.209 ±(99.9%) 4779.222 ops/s [Average]
  (min, avg, max) = (756060.591, 775628.209, 783379.228), stdev = 7153.315
  CI (99.9%): [770848.987, 780407.431] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_flatCollect  thrpt   30  775628.209 ± 4779.222  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1539499.986 ops/s
# Warmup Iteration   2: 3659806.720 ops/s
# Warmup Iteration   3: 3501779.372 ops/s
# Warmup Iteration   4: 3256997.319 ops/s
# Warmup Iteration   5: 3631935.593 ops/s
# Warmup Iteration   6: 3707437.421 ops/s
# Warmup Iteration   7: 3695372.324 ops/s
# Warmup Iteration   8: 3692348.751 ops/s
# Warmup Iteration   9: 3697532.920 ops/s
# Warmup Iteration  10: 3684266.040 ops/s
# Warmup Iteration  11: 3669729.307 ops/s
# Warmup Iteration  12: 3698091.250 ops/s
# Warmup Iteration  13: 3696828.426 ops/s
# Warmup Iteration  14: 3655127.725 ops/s
# Warmup Iteration  15: 3650869.523 ops/s
# Warmup Iteration  16: 3693134.253 ops/s
# Warmup Iteration  17: 3655784.418 ops/s
# Warmup Iteration  18: 3640292.083 ops/s
# Warmup Iteration  19: 3696148.484 ops/s
# Warmup Iteration  20: 3693112.665 ops/s
# Warmup Iteration  21: 3687205.170 ops/s
# Warmup Iteration  22: 3690166.268 ops/s
# Warmup Iteration  23: 3639437.471 ops/s
# Warmup Iteration  24: 3681865.756 ops/s
# Warmup Iteration  25: 3702851.731 ops/s
# Warmup Iteration  26: 3647054.277 ops/s
# Warmup Iteration  27: 3684019.167 ops/s
# Warmup Iteration  28: 3688775.522 ops/s
# Warmup Iteration  29: 3692117.075 ops/s
# Warmup Iteration  30: 3656804.077 ops/s
Iteration   1: 3710009.650 ops/s
Iteration   2: 3692819.376 ops/s
Iteration   3: 3700027.105 ops/s
Iteration   4: 3697147.391 ops/s
Iteration   5: 3703931.668 ops/s
Iteration   6: 3681990.265 ops/s
Iteration   7: 3685780.603 ops/s
Iteration   8: 3690258.357 ops/s
Iteration   9: 3705665.284 ops/s
Iteration  10: 3679489.555 ops/s
Iteration  11: 3695766.967 ops/s
Iteration  12: 3675645.700 ops/s
Iteration  13: 3694797.794 ops/s
Iteration  14: 3691460.949 ops/s
Iteration  15: 3701998.125 ops/s
Iteration  16: 3697940.441 ops/s
Iteration  17: 3689230.141 ops/s
Iteration  18: 3703204.092 ops/s
Iteration  19: 3697173.164 ops/s
Iteration  20: 3703396.293 ops/s
Iteration  21: 3690993.323 ops/s
Iteration  22: 3694552.249 ops/s
Iteration  23: 3694313.231 ops/s
Iteration  24: 3649445.860 ops/s
Iteration  25: 3674212.260 ops/s
Iteration  26: 3669368.857 ops/s
Iteration  27: 3695655.066 ops/s
Iteration  28: 3686064.481 ops/s
Iteration  29: 3688285.575 ops/s
Iteration  30: 3600964.804 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectBoolean":
  3688052.954 ±(99.9%) 13755.643 ops/s [Average]
  (min, avg, max) = (3600964.804, 3688052.954, 3710009.650), stdev = 20588.800
  CI (99.9%): [3674297.312, 3701808.597] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  3688052.954 ± 13755.643  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687687.487 ops/s
# Warmup Iteration   2: 1158300.720 ops/s
# Warmup Iteration   3: 1312406.264 ops/s
# Warmup Iteration   4: 1329385.394 ops/s
# Warmup Iteration   5: 1326609.555 ops/s
# Warmup Iteration   6: 1078172.783 ops/s
# Warmup Iteration   7: 1325251.281 ops/s
# Warmup Iteration   8: 1313576.667 ops/s
# Warmup Iteration   9: 1326379.076 ops/s
# Warmup Iteration  10: 1326150.792 ops/s
# Warmup Iteration  11: 1319577.624 ops/s
# Warmup Iteration  12: 1323909.259 ops/s
# Warmup Iteration  13: 1310083.282 ops/s
# Warmup Iteration  14: 1322138.221 ops/s
# Warmup Iteration  15: 1318890.720 ops/s
# Warmup Iteration  16: 1311431.547 ops/s
# Warmup Iteration  17: 1323189.202 ops/s
# Warmup Iteration  18: 1308163.725 ops/s
# Warmup Iteration  19: 1325964.889 ops/s
# Warmup Iteration  20: 1316418.559 ops/s
# Warmup Iteration  21: 1312256.741 ops/s
# Warmup Iteration  22: 1313850.207 ops/s
# Warmup Iteration  23: 1324961.587 ops/s
# Warmup Iteration  24: 1323038.200 ops/s
# Warmup Iteration  25: 1325475.343 ops/s
# Warmup Iteration  26: 1317421.452 ops/s
# Warmup Iteration  27: 1324684.256 ops/s
# Warmup Iteration  28: 1317744.580 ops/s
# Warmup Iteration  29: 1323172.033 ops/s
# Warmup Iteration  30: 1317796.045 ops/s
Iteration   1: 1326910.232 ops/s
Iteration   2: 1317804.170 ops/s
Iteration   3: 1320101.519 ops/s
Iteration   4: 1325301.573 ops/s
Iteration   5: 1325135.000 ops/s
Iteration   6: 1327278.214 ops/s
Iteration   7: 1328417.407 ops/s
Iteration   8: 1329593.727 ops/s
Iteration   9: 1327008.666 ops/s
Iteration  10: 1329276.717 ops/s
Iteration  11: 1322258.659 ops/s
Iteration  12: 1323761.499 ops/s
Iteration  13: 1324788.854 ops/s
Iteration  14: 1326434.118 ops/s
Iteration  15: 1319470.791 ops/s
Iteration  16: 1324466.395 ops/s
Iteration  17: 1323047.755 ops/s
Iteration  18: 1321617.006 ops/s
Iteration  19: 1326565.491 ops/s
Iteration  20: 1330840.059 ops/s
Iteration  21: 1320331.315 ops/s
Iteration  22: 1323472.161 ops/s
Iteration  23: 1317439.361 ops/s
Iteration  24: 1314434.315 ops/s
Iteration  25: 1328657.155 ops/s
Iteration  26: 1325954.630 ops/s
Iteration  27: 1314637.959 ops/s
Iteration  28: 1325385.418 ops/s
Iteration  29: 1318300.157 ops/s
Iteration  30: 1320293.339 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectByte":
  1323632.789 ±(99.9%) 2934.211 ops/s [Average]
  (min, avg, max) = (1314434.315, 1323632.789, 1330840.059), stdev = 4391.789
  CI (99.9%): [1320698.578, 1326567.000] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1323632.789 ± 2934.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 908019.730 ops/s
# Warmup Iteration   2: 2210711.734 ops/s
# Warmup Iteration   3: 2217528.640 ops/s
# Warmup Iteration   4: 1839427.274 ops/s
# Warmup Iteration   5: 2230182.179 ops/s
# Warmup Iteration   6: 2229764.486 ops/s
# Warmup Iteration   7: 2211917.841 ops/s
# Warmup Iteration   8: 2215629.063 ops/s
# Warmup Iteration   9: 2212243.200 ops/s
# Warmup Iteration  10: 2224683.371 ops/s
# Warmup Iteration  11: 2230966.637 ops/s
# Warmup Iteration  12: 2225402.778 ops/s
# Warmup Iteration  13: 2222445.445 ops/s
# Warmup Iteration  14: 2225088.564 ops/s
# Warmup Iteration  15: 2224436.997 ops/s
# Warmup Iteration  16: 2228063.430 ops/s
# Warmup Iteration  17: 2200935.110 ops/s
# Warmup Iteration  18: 2231067.536 ops/s
# Warmup Iteration  19: 2229323.686 ops/s
# Warmup Iteration  20: 2235709.570 ops/s
# Warmup Iteration  21: 2231436.247 ops/s
# Warmup Iteration  22: 2223995.941 ops/s
# Warmup Iteration  23: 2224996.241 ops/s
# Warmup Iteration  24: 2223881.138 ops/s
# Warmup Iteration  25: 2231152.455 ops/s
# Warmup Iteration  26: 2228401.972 ops/s
# Warmup Iteration  27: 2235463.821 ops/s
# Warmup Iteration  28: 2222147.471 ops/s
# Warmup Iteration  29: 2230561.712 ops/s
# Warmup Iteration  30: 2229143.440 ops/s
Iteration   1: 2237336.883 ops/s
Iteration   2: 2234272.995 ops/s
Iteration   3: 2221291.410 ops/s
Iteration   4: 2226678.895 ops/s
Iteration   5: 2226780.216 ops/s
Iteration   6: 2191499.182 ops/s
Iteration   7: 2234647.125 ops/s
Iteration   8: 2234978.926 ops/s
Iteration   9: 2230986.499 ops/s
Iteration  10: 2224848.654 ops/s
Iteration  11: 2230923.077 ops/s
Iteration  12: 2227894.169 ops/s
Iteration  13: 2219979.339 ops/s
Iteration  14: 2201535.939 ops/s
Iteration  15: 2238341.551 ops/s
Iteration  16: 2222250.525 ops/s
Iteration  17: 2185789.604 ops/s
Iteration  18: 2208146.307 ops/s
Iteration  19: 2223590.786 ops/s
Iteration  20: 2233989.495 ops/s
Iteration  21: 2228698.685 ops/s
Iteration  22: 2187725.223 ops/s
Iteration  23: 2234973.131 ops/s
Iteration  24: 2232954.671 ops/s
Iteration  25: 2231338.508 ops/s
Iteration  26: 2239123.192 ops/s
Iteration  27: 2233134.632 ops/s
Iteration  28: 2210807.899 ops/s
Iteration  29: 2236662.660 ops/s
Iteration  30: 2230762.975 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectChar":
  2224064.772 ±(99.9%) 10028.505 ops/s [Average]
  (min, avg, max) = (2185789.604, 2224064.772, 2239123.192), stdev = 15010.195
  CI (99.9%): [2214036.267, 2234093.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_flatCollectChar  thrpt   30  2224064.772 ± 10028.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 440874.685 ops/s
# Warmup Iteration   2: 1105494.355 ops/s
# Warmup Iteration   3: 1097227.291 ops/s
# Warmup Iteration   4: 918515.976 ops/s
# Warmup Iteration   5: 1110480.835 ops/s
# Warmup Iteration   6: 1112096.359 ops/s
# Warmup Iteration   7: 1109969.853 ops/s
# Warmup Iteration   8: 1108144.123 ops/s
# Warmup Iteration   9: 1115541.273 ops/s
# Warmup Iteration  10: 1109305.529 ops/s
# Warmup Iteration  11: 1111120.923 ops/s
# Warmup Iteration  12: 1099879.944 ops/s
# Warmup Iteration  13: 1105936.148 ops/s
# Warmup Iteration  14: 1110532.122 ops/s
# Warmup Iteration  15: 1113213.871 ops/s
# Warmup Iteration  16: 1109690.693 ops/s
# Warmup Iteration  17: 1116517.629 ops/s
# Warmup Iteration  18: 1104381.390 ops/s
# Warmup Iteration  19: 1111473.435 ops/s
# Warmup Iteration  20: 1114380.917 ops/s
# Warmup Iteration  21: 1113916.497 ops/s
# Warmup Iteration  22: 1106572.079 ops/s
# Warmup Iteration  23: 1089336.718 ops/s
# Warmup Iteration  24: 1107848.482 ops/s
# Warmup Iteration  25: 1105154.934 ops/s
# Warmup Iteration  26: 1102125.771 ops/s
# Warmup Iteration  27: 1105132.441 ops/s
# Warmup Iteration  28: 1099092.553 ops/s
# Warmup Iteration  29: 1105884.112 ops/s
# Warmup Iteration  30: 1112390.634 ops/s
Iteration   1: 1109077.775 ops/s
Iteration   2: 1075506.019 ops/s
Iteration   3: 1109572.371 ops/s
Iteration   4: 1109367.110 ops/s
Iteration   5: 1089598.179 ops/s
Iteration   6: 1100788.149 ops/s
Iteration   7: 1099568.284 ops/s
Iteration   8: 1102009.381 ops/s
Iteration   9: 1110987.171 ops/s
Iteration  10: 1114368.551 ops/s
Iteration  11: 1105483.386 ops/s
Iteration  12: 1106051.033 ops/s
Iteration  13: 1086218.089 ops/s
Iteration  14: 1103592.462 ops/s
Iteration  15: 1114217.347 ops/s
Iteration  16: 1113509.423 ops/s
Iteration  17: 1108339.639 ops/s
Iteration  18: 1106281.974 ops/s
Iteration  19: 1108884.027 ops/s
Iteration  20: 1108096.961 ops/s
Iteration  21: 1114167.771 ops/s
Iteration  22: 1109480.670 ops/s
Iteration  23: 1108569.080 ops/s
Iteration  24: 1110814.633 ops/s
Iteration  25: 1109427.812 ops/s
Iteration  26: 1098388.082 ops/s
Iteration  27: 1099081.251 ops/s
Iteration  28: 1110563.182 ops/s
Iteration  29: 1115429.620 ops/s
Iteration  30: 1104857.193 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectDouble":
  1105409.888 ±(99.9%) 5921.675 ops/s [Average]
  (min, avg, max) = (1075506.019, 1105409.888, 1115429.620), stdev = 8863.285
  CI (99.9%): [1099488.213, 1111331.563] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  1105409.888 ± 5921.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651710.265 ops/s
# Warmup Iteration   2: 1497980.013 ops/s
# Warmup Iteration   3: 1570248.297 ops/s
# Warmup Iteration   4: 1507802.808 ops/s
# Warmup Iteration   5: 1402846.041 ops/s
# Warmup Iteration   6: 1593020.278 ops/s
# Warmup Iteration   7: 1593438.165 ops/s
# Warmup Iteration   8: 1590002.906 ops/s
# Warmup Iteration   9: 1598357.851 ops/s
# Warmup Iteration  10: 1576140.045 ops/s
# Warmup Iteration  11: 1580032.558 ops/s
# Warmup Iteration  12: 1579638.696 ops/s
# Warmup Iteration  13: 1584584.533 ops/s
# Warmup Iteration  14: 1585767.133 ops/s
# Warmup Iteration  15: 1589704.143 ops/s
# Warmup Iteration  16: 1582075.326 ops/s
# Warmup Iteration  17: 1582477.280 ops/s
# Warmup Iteration  18: 1583224.825 ops/s
# Warmup Iteration  19: 1598103.488 ops/s
# Warmup Iteration  20: 1595587.229 ops/s
# Warmup Iteration  21: 1591951.842 ops/s
# Warmup Iteration  22: 1576423.536 ops/s
# Warmup Iteration  23: 1596891.038 ops/s
# Warmup Iteration  24: 1569907.941 ops/s
# Warmup Iteration  25: 1591384.162 ops/s
# Warmup Iteration  26: 1594311.991 ops/s
# Warmup Iteration  27: 1588945.416 ops/s
# Warmup Iteration  28: 1587621.396 ops/s
# Warmup Iteration  29: 1587155.614 ops/s
# Warmup Iteration  30: 1588758.851 ops/s
Iteration   1: 1597605.517 ops/s
Iteration   2: 1592400.128 ops/s
Iteration   3: 1595624.003 ops/s
Iteration   4: 1597310.677 ops/s
Iteration   5: 1589468.547 ops/s
Iteration   6: 1577456.506 ops/s
Iteration   7: 1582825.928 ops/s
Iteration   8: 1593481.756 ops/s
Iteration   9: 1590830.569 ops/s
Iteration  10: 1583890.222 ops/s
Iteration  11: 1575314.807 ops/s
Iteration  12: 1603104.523 ops/s
Iteration  13: 1593843.818 ops/s
Iteration  14: 1577327.853 ops/s
Iteration  15: 1588667.884 ops/s
Iteration  16: 1599674.848 ops/s
Iteration  17: 1596710.100 ops/s
Iteration  18: 1568680.747 ops/s
Iteration  19: 1562090.195 ops/s
Iteration  20: 1596059.949 ops/s
Iteration  21: 1550117.883 ops/s
Iteration  22: 1568575.364 ops/s
Iteration  23: 1587158.860 ops/s
Iteration  24: 1597849.642 ops/s
Iteration  25: 1601925.324 ops/s
Iteration  26: 1585567.663 ops/s
Iteration  27: 1595899.272 ops/s
Iteration  28: 1594682.719 ops/s
Iteration  29: 1585174.703 ops/s
Iteration  30: 1587328.914 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectFloat":
  1587221.631 ±(99.9%) 8339.154 ops/s [Average]
  (min, avg, max) = (1550117.883, 1587221.631, 1603104.523), stdev = 12481.655
  CI (99.9%): [1578882.476, 1595560.785] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1587221.631 ± 8339.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 779441.398 ops/s
# Warmup Iteration   2: 2024633.766 ops/s
# Warmup Iteration   3: 2014422.405 ops/s
# Warmup Iteration   4: 1684631.319 ops/s
# Warmup Iteration   5: 2061795.449 ops/s
# Warmup Iteration   6: 2047454.361 ops/s
# Warmup Iteration   7: 2053299.815 ops/s
# Warmup Iteration   8: 2063681.981 ops/s
# Warmup Iteration   9: 2053702.862 ops/s
# Warmup Iteration  10: 2064276.500 ops/s
# Warmup Iteration  11: 2068595.225 ops/s
# Warmup Iteration  12: 2060936.668 ops/s
# Warmup Iteration  13: 2059030.129 ops/s
# Warmup Iteration  14: 2053671.265 ops/s
# Warmup Iteration  15: 2045657.042 ops/s
# Warmup Iteration  16: 2048129.102 ops/s
# Warmup Iteration  17: 2056442.654 ops/s
# Warmup Iteration  18: 2061262.708 ops/s
# Warmup Iteration  19: 2031619.181 ops/s
# Warmup Iteration  20: 2058070.785 ops/s
# Warmup Iteration  21: 2059699.166 ops/s
# Warmup Iteration  22: 2059140.526 ops/s
# Warmup Iteration  23: 2059689.871 ops/s
# Warmup Iteration  24: 2059520.989 ops/s
# Warmup Iteration  25: 2060703.666 ops/s
# Warmup Iteration  26: 2059933.024 ops/s
# Warmup Iteration  27: 2032755.689 ops/s
# Warmup Iteration  28: 2060481.770 ops/s
# Warmup Iteration  29: 2041906.969 ops/s
# Warmup Iteration  30: 2060314.630 ops/s
Iteration   1: 2064218.265 ops/s
Iteration   2: 2035752.471 ops/s
Iteration   3: 2059567.900 ops/s
Iteration   4: 2032954.218 ops/s
Iteration   5: 2044140.251 ops/s
Iteration   6: 2061732.783 ops/s
Iteration   7: 2045241.634 ops/s
Iteration   8: 2071248.788 ops/s
Iteration   9: 2075145.138 ops/s
Iteration  10: 2054501.546 ops/s
Iteration  11: 2069792.159 ops/s
Iteration  12: 2053272.770 ops/s
Iteration  13: 2053217.806 ops/s
Iteration  14: 2030048.072 ops/s
Iteration  15: 2042534.194 ops/s
Iteration  16: 2067241.499 ops/s
Iteration  17: 2036528.681 ops/s
Iteration  18: 2038916.361 ops/s
Iteration  19: 2053250.987 ops/s
Iteration  20: 2039610.409 ops/s
Iteration  21: 2052488.059 ops/s
Iteration  22: 2063805.379 ops/s
Iteration  23: 2003713.438 ops/s
Iteration  24: 2057893.027 ops/s
Iteration  25: 2030567.952 ops/s
Iteration  26: 2064681.918 ops/s
Iteration  27: 2060439.955 ops/s
Iteration  28: 2054543.360 ops/s
Iteration  29: 2043966.993 ops/s
Iteration  30: 2065720.365 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectInt":
  2050891.213 ±(99.9%) 10422.003 ops/s [Average]
  (min, avg, max) = (2003713.438, 2050891.213, 2075145.138), stdev = 15599.164
  CI (99.9%): [2040469.210, 2061313.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_flatCollectInt  thrpt   30  2050891.213 ± 10422.003  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 799474.370 ops/s
# Warmup Iteration   2: 1918498.270 ops/s
# Warmup Iteration   3: 1607067.967 ops/s
# Warmup Iteration   4: 1929287.549 ops/s
# Warmup Iteration   5: 1941310.021 ops/s
# Warmup Iteration   6: 1936164.786 ops/s
# Warmup Iteration   7: 1938132.742 ops/s
# Warmup Iteration   8: 1941741.043 ops/s
# Warmup Iteration   9: 1939555.042 ops/s
# Warmup Iteration  10: 1947581.844 ops/s
# Warmup Iteration  11: 1926138.323 ops/s
# Warmup Iteration  12: 1936629.113 ops/s
# Warmup Iteration  13: 1930096.636 ops/s
# Warmup Iteration  14: 1949885.133 ops/s
# Warmup Iteration  15: 1941790.927 ops/s
# Warmup Iteration  16: 1938842.231 ops/s
# Warmup Iteration  17: 1929451.843 ops/s
# Warmup Iteration  18: 1938876.706 ops/s
# Warmup Iteration  19: 1944708.837 ops/s
# Warmup Iteration  20: 1944530.002 ops/s
# Warmup Iteration  21: 1933183.356 ops/s
# Warmup Iteration  22: 1936328.220 ops/s
# Warmup Iteration  23: 1910642.224 ops/s
# Warmup Iteration  24: 1945446.016 ops/s
# Warmup Iteration  25: 1933705.975 ops/s
# Warmup Iteration  26: 1941861.456 ops/s
# Warmup Iteration  27: 1923357.342 ops/s
# Warmup Iteration  28: 1933510.457 ops/s
# Warmup Iteration  29: 1950866.490 ops/s
# Warmup Iteration  30: 1948220.726 ops/s
Iteration   1: 1934814.349 ops/s
Iteration   2: 1898345.686 ops/s
Iteration   3: 1935572.940 ops/s
Iteration   4: 1948533.731 ops/s
Iteration   5: 1946855.272 ops/s
Iteration   6: 1940260.363 ops/s
Iteration   7: 1936734.736 ops/s
Iteration   8: 1955392.943 ops/s
Iteration   9: 1949945.324 ops/s
Iteration  10: 1930337.418 ops/s
Iteration  11: 1938342.822 ops/s
Iteration  12: 1928583.819 ops/s
Iteration  13: 1939126.040 ops/s
Iteration  14: 1940311.022 ops/s
Iteration  15: 1955507.698 ops/s
Iteration  16: 1954092.130 ops/s
Iteration  17: 1940227.404 ops/s
Iteration  18: 1948286.243 ops/s
Iteration  19: 1940247.260 ops/s
Iteration  20: 1940319.020 ops/s
Iteration  21: 1941912.375 ops/s
Iteration  22: 1948675.982 ops/s
Iteration  23: 1937807.332 ops/s
Iteration  24: 1933197.370 ops/s
Iteration  25: 1934254.023 ops/s
Iteration  26: 1937397.439 ops/s
Iteration  27: 1937983.591 ops/s
Iteration  28: 1901383.330 ops/s
Iteration  29: 1943618.888 ops/s
Iteration  30: 1908895.588 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectLong":
  1937565.405 ±(99.9%) 9159.952 ops/s [Average]
  (min, avg, max) = (1898345.686, 1937565.405, 1955507.698), stdev = 13710.186
  CI (99.9%): [1928405.453, 1946725.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1937565.405 ± 9159.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 837537.326 ops/s
# Warmup Iteration   2: 2105488.560 ops/s
# Warmup Iteration   3: 2095615.383 ops/s
# Warmup Iteration   4: 1771399.584 ops/s
# Warmup Iteration   5: 2127842.968 ops/s
# Warmup Iteration   6: 2129653.424 ops/s
# Warmup Iteration   7: 2104978.694 ops/s
# Warmup Iteration   8: 2105066.919 ops/s
# Warmup Iteration   9: 2104998.942 ops/s
# Warmup Iteration  10: 2121244.346 ops/s
# Warmup Iteration  11: 2111830.287 ops/s
# Warmup Iteration  12: 2121004.709 ops/s
# Warmup Iteration  13: 2126450.495 ops/s
# Warmup Iteration  14: 2122940.275 ops/s
# Warmup Iteration  15: 2127301.515 ops/s
# Warmup Iteration  16: 2126552.014 ops/s
# Warmup Iteration  17: 2107558.029 ops/s
# Warmup Iteration  18: 2132281.829 ops/s
# Warmup Iteration  19: 2121796.921 ops/s
# Warmup Iteration  20: 2122066.792 ops/s
# Warmup Iteration  21: 2108974.423 ops/s
# Warmup Iteration  22: 2118220.281 ops/s
# Warmup Iteration  23: 2113319.915 ops/s
# Warmup Iteration  24: 2128162.958 ops/s
# Warmup Iteration  25: 2124473.758 ops/s
# Warmup Iteration  26: 2120595.236 ops/s
# Warmup Iteration  27: 2108235.786 ops/s
# Warmup Iteration  28: 2123553.332 ops/s
# Warmup Iteration  29: 2125015.609 ops/s
# Warmup Iteration  30: 2131456.148 ops/s
Iteration   1: 2105562.579 ops/s
Iteration   2: 2116525.910 ops/s
Iteration   3: 2064194.043 ops/s
Iteration   4: 2132160.632 ops/s
Iteration   5: 2100433.356 ops/s
Iteration   6: 2122762.669 ops/s
Iteration   7: 2117411.091 ops/s
Iteration   8: 2121115.274 ops/s
Iteration   9: 2126700.529 ops/s
Iteration  10: 2129508.720 ops/s
Iteration  11: 2132852.643 ops/s
Iteration  12: 2109302.230 ops/s
Iteration  13: 2131827.412 ops/s
Iteration  14: 2113224.466 ops/s
Iteration  15: 2126047.825 ops/s
Iteration  16: 2132163.240 ops/s
Iteration  17: 2122872.383 ops/s
Iteration  18: 2123294.538 ops/s
Iteration  19: 2123074.793 ops/s
Iteration  20: 2129801.803 ops/s
Iteration  21: 2116747.166 ops/s
Iteration  22: 2119939.244 ops/s
Iteration  23: 2131963.022 ops/s
Iteration  24: 2109216.318 ops/s
Iteration  25: 2128127.439 ops/s
Iteration  26: 2117267.602 ops/s
Iteration  27: 2080647.143 ops/s
Iteration  28: 2125907.217 ops/s
Iteration  29: 2129427.893 ops/s
Iteration  30: 2131004.898 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectShort":
  2119036.136 ±(99.9%) 10305.795 ops/s [Average]
  (min, avg, max) = (2064194.043, 2119036.136, 2132852.643), stdev = 15425.231
  CI (99.9%): [2108730.341, 2129341.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_flatCollectShort  thrpt   30  2119036.136 ± 10305.795  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 201997.316 ops/s
# Warmup Iteration   2: 338208.310 ops/s
# Warmup Iteration   3: 415545.644 ops/s
# Warmup Iteration   4: 411219.291 ops/s
# Warmup Iteration   5: 415534.508 ops/s
# Warmup Iteration   6: 406155.332 ops/s
# Warmup Iteration   7: 348315.174 ops/s
# Warmup Iteration   8: 417222.273 ops/s
# Warmup Iteration   9: 418348.078 ops/s
# Warmup Iteration  10: 418681.785 ops/s
# Warmup Iteration  11: 415927.753 ops/s
# Warmup Iteration  12: 417908.815 ops/s
# Warmup Iteration  13: 415567.484 ops/s
# Warmup Iteration  14: 415256.654 ops/s
# Warmup Iteration  15: 418094.243 ops/s
# Warmup Iteration  16: 416334.893 ops/s
# Warmup Iteration  17: 418960.952 ops/s
# Warmup Iteration  18: 418220.205 ops/s
# Warmup Iteration  19: 418028.500 ops/s
# Warmup Iteration  20: 415827.324 ops/s
# Warmup Iteration  21: 413913.550 ops/s
# Warmup Iteration  22: 416613.310 ops/s
# Warmup Iteration  23: 418704.089 ops/s
# Warmup Iteration  24: 410270.312 ops/s
# Warmup Iteration  25: 417512.150 ops/s
# Warmup Iteration  26: 418087.217 ops/s
# Warmup Iteration  27: 419628.765 ops/s
# Warmup Iteration  28: 418673.177 ops/s
# Warmup Iteration  29: 418097.843 ops/s
# Warmup Iteration  30: 418291.174 ops/s
Iteration   1: 418767.700 ops/s
Iteration   2: 415280.480 ops/s
Iteration   3: 418619.169 ops/s
Iteration   4: 418982.726 ops/s
Iteration   5: 419248.031 ops/s
Iteration   6: 411712.524 ops/s
Iteration   7: 419192.644 ops/s
Iteration   8: 417411.924 ops/s
Iteration   9: 417060.055 ops/s
Iteration  10: 417622.125 ops/s
Iteration  11: 419025.104 ops/s
Iteration  12: 418137.663 ops/s
Iteration  13: 417186.777 ops/s
Iteration  14: 419210.547 ops/s
Iteration  15: 418566.465 ops/s
Iteration  16: 417928.086 ops/s
Iteration  17: 412514.958 ops/s
Iteration  18: 419112.670 ops/s
Iteration  19: 419177.430 ops/s
Iteration  20: 416849.077 ops/s
Iteration  21: 417441.732 ops/s
Iteration  22: 416805.932 ops/s
Iteration  23: 410561.308 ops/s
Iteration  24: 415182.247 ops/s
Iteration  25: 408794.313 ops/s
Iteration  26: 408429.729 ops/s
Iteration  27: 416701.522 ops/s
Iteration  28: 419625.201 ops/s
Iteration  29: 417578.129 ops/s
Iteration  30: 418713.976 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_flatCollectWith":
  416714.675 ±(99.9%) 2103.908 ops/s [Average]
  (min, avg, max) = (408429.729, 416714.675, 419625.201), stdev = 3149.030
  CI (99.9%): [414610.767, 418818.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  416714.675 ± 2103.908  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5264772.940 ops/s
# Warmup Iteration   2: 10710830.660 ops/s
# Warmup Iteration   3: 8748460.021 ops/s
# Warmup Iteration   4: 10561422.757 ops/s
# Warmup Iteration   5: 10662359.229 ops/s
# Warmup Iteration   6: 10545407.163 ops/s
# Warmup Iteration   7: 10663816.441 ops/s
# Warmup Iteration   8: 10620029.480 ops/s
# Warmup Iteration   9: 10650998.326 ops/s
# Warmup Iteration  10: 10626397.528 ops/s
# Warmup Iteration  11: 10624175.352 ops/s
# Warmup Iteration  12: 10620966.588 ops/s
# Warmup Iteration  13: 10625101.524 ops/s
# Warmup Iteration  14: 10649822.862 ops/s
# Warmup Iteration  15: 10547034.676 ops/s
# Warmup Iteration  16: 10616315.004 ops/s
# Warmup Iteration  17: 10806443.712 ops/s
# Warmup Iteration  18: 10816334.164 ops/s
# Warmup Iteration  19: 10708296.926 ops/s
# Warmup Iteration  20: 10796728.575 ops/s
# Warmup Iteration  21: 10786185.811 ops/s
# Warmup Iteration  22: 10830090.957 ops/s
# Warmup Iteration  23: 10804143.095 ops/s
# Warmup Iteration  24: 10836733.688 ops/s
# Warmup Iteration  25: 10846885.863 ops/s
# Warmup Iteration  26: 10854213.679 ops/s
# Warmup Iteration  27: 10651325.601 ops/s
# Warmup Iteration  28: 10757841.965 ops/s
# Warmup Iteration  29: 10881099.796 ops/s
# Warmup Iteration  30: 10841081.480 ops/s
Iteration   1: 10809492.948 ops/s
Iteration   2: 10718174.655 ops/s
Iteration   3: 10804924.595 ops/s
Iteration   4: 10847239.893 ops/s
Iteration   5: 10848565.576 ops/s
Iteration   6: 10869288.093 ops/s
Iteration   7: 10825165.750 ops/s
Iteration   8: 10831104.687 ops/s
Iteration   9: 10775843.349 ops/s
Iteration  10: 10823390.241 ops/s
Iteration  11: 10803387.036 ops/s
Iteration  12: 10882083.332 ops/s
Iteration  13: 10841538.523 ops/s
Iteration  14: 10786756.236 ops/s
Iteration  15: 10670784.703 ops/s
Iteration  16: 10884033.102 ops/s
Iteration  17: 10706800.014 ops/s
Iteration  18: 10794341.467 ops/s
Iteration  19: 10524703.099 ops/s
Iteration  20: 10882063.908 ops/s
Iteration  21: 10699631.463 ops/s
Iteration  22: 10846812.152 ops/s
Iteration  23: 10818487.292 ops/s
Iteration  24: 10839783.010 ops/s
Iteration  25: 10847361.855 ops/s
Iteration  26: 10846789.618 ops/s
Iteration  27: 10815839.487 ops/s
Iteration  28: 10780435.507 ops/s
Iteration  29: 10861847.436 ops/s
Iteration  30: 10854673.644 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEach":
  10804711.422 ±(99.9%) 50849.538 ops/s [Average]
  (min, avg, max) = (10524703.099, 10804711.422, 10884033.102), stdev = 76109.200
  CI (99.9%): [10753861.884, 10855560.960] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_forEach  thrpt   30  10804711.422 ± 50849.538  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 227259.798 ops/s
# Warmup Iteration   2: 271463.839 ops/s
# Warmup Iteration   3: 337815.246 ops/s
# Warmup Iteration   4: 337634.104 ops/s
# Warmup Iteration   5: 337968.758 ops/s
# Warmup Iteration   6: 336646.308 ops/s
# Warmup Iteration   7: 338594.095 ops/s
# Warmup Iteration   8: 339321.883 ops/s
# Warmup Iteration   9: 312916.691 ops/s
# Warmup Iteration  10: 314112.789 ops/s
# Warmup Iteration  11: 335270.759 ops/s
# Warmup Iteration  12: 339679.890 ops/s
# Warmup Iteration  13: 339775.222 ops/s
# Warmup Iteration  14: 339414.709 ops/s
# Warmup Iteration  15: 339831.347 ops/s
# Warmup Iteration  16: 340038.732 ops/s
# Warmup Iteration  17: 356917.037 ops/s
# Warmup Iteration  18: 353220.017 ops/s
# Warmup Iteration  19: 356030.561 ops/s
# Warmup Iteration  20: 356572.437 ops/s
# Warmup Iteration  21: 357148.950 ops/s
# Warmup Iteration  22: 356585.097 ops/s
# Warmup Iteration  23: 354735.657 ops/s
# Warmup Iteration  24: 357004.037 ops/s
# Warmup Iteration  25: 356572.305 ops/s
# Warmup Iteration  26: 356876.333 ops/s
# Warmup Iteration  27: 355719.319 ops/s
# Warmup Iteration  28: 357485.101 ops/s
# Warmup Iteration  29: 356521.459 ops/s
# Warmup Iteration  30: 356659.910 ops/s
Iteration   1: 358373.671 ops/s
Iteration   2: 355618.842 ops/s
Iteration   3: 351902.842 ops/s
Iteration   4: 357086.728 ops/s
Iteration   5: 356727.872 ops/s
Iteration   6: 356810.890 ops/s
Iteration   7: 351298.031 ops/s
Iteration   8: 355899.815 ops/s
Iteration   9: 356566.396 ops/s
Iteration  10: 358047.980 ops/s
Iteration  11: 357861.812 ops/s
Iteration  12: 355943.993 ops/s
Iteration  13: 357685.762 ops/s
Iteration  14: 356379.027 ops/s
Iteration  15: 350806.826 ops/s
Iteration  16: 355871.108 ops/s
Iteration  17: 357582.628 ops/s
Iteration  18: 357856.735 ops/s
Iteration  19: 356883.339 ops/s
Iteration  20: 351135.448 ops/s
Iteration  21: 356566.140 ops/s
Iteration  22: 357110.133 ops/s
Iteration  23: 349808.531 ops/s
Iteration  24: 358388.358 ops/s
Iteration  25: 353650.715 ops/s
Iteration  26: 356739.834 ops/s
Iteration  27: 356221.627 ops/s
Iteration  28: 355427.096 ops/s
Iteration  29: 354726.161 ops/s
Iteration  30: 356999.275 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachFromTo":
  355732.587 ±(99.9%) 1607.672 ops/s [Average]
  (min, avg, max) = (349808.531, 355732.587, 358388.358), stdev = 2406.287
  CI (99.9%): [354124.916, 357340.259] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  355732.587 ± 1607.672  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachFromToInReverse$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachFromToInReverse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5521309.963 ops/s
# Warmup Iteration   2: 11572327.545 ops/s
# Warmup Iteration   3: 9739507.206 ops/s
# Warmup Iteration   4: 11465402.626 ops/s
# Warmup Iteration   5: 11560291.771 ops/s
# Warmup Iteration   6: 11588576.831 ops/s
# Warmup Iteration   7: 11581711.467 ops/s
# Warmup Iteration   8: 11578126.835 ops/s
# Warmup Iteration   9: 11291452.202 ops/s
# Warmup Iteration  10: 11509907.314 ops/s
# Warmup Iteration  11: 11560376.242 ops/s
# Warmup Iteration  12: 11586572.221 ops/s
# Warmup Iteration  13: 11540110.222 ops/s
# Warmup Iteration  14: 11494966.805 ops/s
# Warmup Iteration  15: 11587966.247 ops/s
# Warmup Iteration  16: 11513576.935 ops/s
# Warmup Iteration  17: 11662217.624 ops/s
# Warmup Iteration  18: 11703862.462 ops/s
# Warmup Iteration  19: 11705207.213 ops/s
# Warmup Iteration  20: 11678885.372 ops/s
# Warmup Iteration  21: 11644972.826 ops/s
# Warmup Iteration  22: 11511442.217 ops/s
# Warmup Iteration  23: 11685426.930 ops/s
# Warmup Iteration  24: 11689903.671 ops/s
# Warmup Iteration  25: 11732103.602 ops/s
# Warmup Iteration  26: 11619340.519 ops/s
# Warmup Iteration  27: 11701710.041 ops/s
# Warmup Iteration  28: 11612302.013 ops/s
# Warmup Iteration  29: 11659390.612 ops/s
# Warmup Iteration  30: 11660058.394 ops/s
Iteration   1: 11715081.362 ops/s
Iteration   2: 11342315.222 ops/s
Iteration   3: 11714378.809 ops/s
Iteration   4: 11741181.829 ops/s
Iteration   5: 11555292.563 ops/s
Iteration   6: 11760255.923 ops/s
Iteration   7: 11642636.147 ops/s
Iteration   8: 11658695.165 ops/s
Iteration   9: 11649287.804 ops/s
Iteration  10: 11496310.804 ops/s
Iteration  11: 11467687.660 ops/s
Iteration  12: 11688939.477 ops/s
Iteration  13: 11719996.324 ops/s
Iteration  14: 11715010.073 ops/s
Iteration  15: 11643861.380 ops/s
Iteration  16: 11542599.566 ops/s
Iteration  17: 11517141.745 ops/s
Iteration  18: 11738839.054 ops/s
Iteration  19: 11708585.455 ops/s
Iteration  20: 11459865.259 ops/s
Iteration  21: 11660859.426 ops/s
Iteration  22: 11697151.962 ops/s
Iteration  23: 11688247.671 ops/s
Iteration  24: 11711034.269 ops/s
Iteration  25: 11534266.906 ops/s
Iteration  26: 11662449.958 ops/s
Iteration  27: 11478287.603 ops/s
Iteration  28: 11713678.721 ops/s
Iteration  29: 11700532.396 ops/s
Iteration  30: 11666928.088 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachFromToInReverse":
  11633046.621 ±(99.9%) 70799.594 ops/s [Average]
  (min, avg, max) = (11342315.222, 11633046.621, 11760255.923), stdev = 105969.508
  CI (99.9%): [11562247.026, 11703846.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_forEachFromToInReverse  thrpt   30  11633046.621 ± 70799.594  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachInBoth$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachInBoth

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1146724.118 ops/s
# Warmup Iteration   2: 2548313.017 ops/s
# Warmup Iteration   3: 2544717.508 ops/s
# Warmup Iteration   4: 2165840.915 ops/s
# Warmup Iteration   5: 2581307.184 ops/s
# Warmup Iteration   6: 2566907.788 ops/s
# Warmup Iteration   7: 2570777.497 ops/s
# Warmup Iteration   8: 2547174.339 ops/s
# Warmup Iteration   9: 2549834.773 ops/s
# Warmup Iteration  10: 2549150.457 ops/s
# Warmup Iteration  11: 2586253.677 ops/s
# Warmup Iteration  12: 2565320.102 ops/s
# Warmup Iteration  13: 2564477.740 ops/s
# Warmup Iteration  14: 2572740.076 ops/s
# Warmup Iteration  15: 2572828.984 ops/s
# Warmup Iteration  16: 2576676.723 ops/s
# Warmup Iteration  17: 2574099.809 ops/s
# Warmup Iteration  18: 2560272.535 ops/s
# Warmup Iteration  19: 2579332.896 ops/s
# Warmup Iteration  20: 2580479.786 ops/s
# Warmup Iteration  21: 2571141.759 ops/s
# Warmup Iteration  22: 2584660.286 ops/s
# Warmup Iteration  23: 2582690.765 ops/s
# Warmup Iteration  24: 2540033.799 ops/s
# Warmup Iteration  25: 2575489.354 ops/s
# Warmup Iteration  26: 2571637.335 ops/s
# Warmup Iteration  27: 2584108.951 ops/s
# Warmup Iteration  28: 2537482.889 ops/s
# Warmup Iteration  29: 2549585.764 ops/s
# Warmup Iteration  30: 2574979.887 ops/s
Iteration   1: 2578578.842 ops/s
Iteration   2: 2584913.168 ops/s
Iteration   3: 2589665.840 ops/s
Iteration   4: 2591417.061 ops/s
Iteration   5: 2575678.994 ops/s
Iteration   6: 2580502.309 ops/s
Iteration   7: 2574273.879 ops/s
Iteration   8: 2557257.107 ops/s
Iteration   9: 2571667.611 ops/s
Iteration  10: 2583195.019 ops/s
Iteration  11: 2584523.635 ops/s
Iteration  12: 2588330.531 ops/s
Iteration  13: 2583805.710 ops/s
Iteration  14: 2541253.807 ops/s
Iteration  15: 2568274.057 ops/s
Iteration  16: 2569736.546 ops/s
Iteration  17: 2576646.557 ops/s
Iteration  18: 2563192.034 ops/s
Iteration  19: 2565399.370 ops/s
Iteration  20: 2565217.459 ops/s
Iteration  21: 2588119.239 ops/s
Iteration  22: 2539688.979 ops/s
Iteration  23: 2575091.320 ops/s
Iteration  24: 2585150.949 ops/s
Iteration  25: 2579581.505 ops/s
Iteration  26: 2581717.686 ops/s
Iteration  27: 2581538.788 ops/s
Iteration  28: 2537520.419 ops/s
Iteration  29: 2576736.654 ops/s
Iteration  30: 2573884.762 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachInBoth":
  2573751.995 ±(99.9%) 9530.361 ops/s [Average]
  (min, avg, max) = (2537520.419, 2573751.995, 2591417.061), stdev = 14264.596
  CI (99.9%): [2564221.634, 2583282.355] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_forEachInBoth  thrpt   30  2573751.995 ± 9530.361  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 525965.604 ops/s
# Warmup Iteration   2: 670900.993 ops/s
# Warmup Iteration   3: 827245.395 ops/s
# Warmup Iteration   4: 824949.026 ops/s
# Warmup Iteration   5: 832616.727 ops/s
# Warmup Iteration   6: 828263.127 ops/s
# Warmup Iteration   7: 821048.143 ops/s
# Warmup Iteration   8: 828843.483 ops/s
# Warmup Iteration   9: 700959.268 ops/s
# Warmup Iteration  10: 832552.713 ops/s
# Warmup Iteration  11: 828365.453 ops/s
# Warmup Iteration  12: 833766.673 ops/s
# Warmup Iteration  13: 834565.603 ops/s
# Warmup Iteration  14: 834344.569 ops/s
# Warmup Iteration  15: 829612.862 ops/s
# Warmup Iteration  16: 829085.559 ops/s
# Warmup Iteration  17: 876883.547 ops/s
# Warmup Iteration  18: 869793.173 ops/s
# Warmup Iteration  19: 872996.542 ops/s
# Warmup Iteration  20: 877235.940 ops/s
# Warmup Iteration  21: 872053.138 ops/s
# Warmup Iteration  22: 877020.049 ops/s
# Warmup Iteration  23: 872965.865 ops/s
# Warmup Iteration  24: 869814.485 ops/s
# Warmup Iteration  25: 874094.579 ops/s
# Warmup Iteration  26: 875753.379 ops/s
# Warmup Iteration  27: 878790.195 ops/s
# Warmup Iteration  28: 867647.563 ops/s
# Warmup Iteration  29: 878085.632 ops/s
# Warmup Iteration  30: 869863.437 ops/s
Iteration   1: 884255.160 ops/s
Iteration   2: 858871.587 ops/s
Iteration   3: 864670.634 ops/s
Iteration   4: 880365.162 ops/s
Iteration   5: 873127.226 ops/s
Iteration   6: 876016.036 ops/s
Iteration   7: 872749.739 ops/s
Iteration   8: 878230.688 ops/s
Iteration   9: 875160.702 ops/s
Iteration  10: 874828.236 ops/s
Iteration  11: 872926.267 ops/s
Iteration  12: 866522.729 ops/s
Iteration  13: 862541.211 ops/s
Iteration  14: 861915.510 ops/s
Iteration  15: 877702.992 ops/s
Iteration  16: 876133.642 ops/s
Iteration  17: 879071.557 ops/s
Iteration  18: 883260.722 ops/s
Iteration  19: 863159.911 ops/s
Iteration  20: 880080.352 ops/s
Iteration  21: 873230.882 ops/s
Iteration  22: 858659.889 ops/s
Iteration  23: 863131.471 ops/s
Iteration  24: 876303.326 ops/s
Iteration  25: 862142.465 ops/s
Iteration  26: 878368.852 ops/s
Iteration  27: 871749.815 ops/s
Iteration  28: 847381.301 ops/s
Iteration  29: 877451.590 ops/s
Iteration  30: 877713.122 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes":
  871590.759 ±(99.9%) 5806.941 ops/s [Average]
  (min, avg, max) = (847381.301, 871590.759, 884255.160), stdev = 8691.556
  CI (99.9%): [865783.818, 877397.700] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes  thrpt   30  871590.759 ± 5806.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachInBothThrowsOnNullList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachInBothThrowsOnNullList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 666173.488 ops/s
# Warmup Iteration   2: 711404.444 ops/s
# Warmup Iteration   3: 950241.310 ops/s
# Warmup Iteration   4: 940715.561 ops/s
# Warmup Iteration   5: 951334.693 ops/s
# Warmup Iteration   6: 931195.404 ops/s
# Warmup Iteration   7: 943725.987 ops/s
# Warmup Iteration   8: 941077.157 ops/s
# Warmup Iteration   9: 942539.111 ops/s
# Warmup Iteration  10: 943614.705 ops/s
# Warmup Iteration  11: 888598.172 ops/s
# Warmup Iteration  12: 847968.151 ops/s
# Warmup Iteration  13: 927744.920 ops/s
# Warmup Iteration  14: 943987.948 ops/s
# Warmup Iteration  15: 944532.903 ops/s
# Warmup Iteration  16: 934509.843 ops/s
# Warmup Iteration  17: 1003279.381 ops/s
# Warmup Iteration  18: 991881.934 ops/s
# Warmup Iteration  19: 998173.646 ops/s
# Warmup Iteration  20: 994396.488 ops/s
# Warmup Iteration  21: 1000708.239 ops/s
# Warmup Iteration  22: 994880.312 ops/s
# Warmup Iteration  23: 998757.395 ops/s
# Warmup Iteration  24: 999074.139 ops/s
# Warmup Iteration  25: 1001568.088 ops/s
# Warmup Iteration  26: 994562.933 ops/s
# Warmup Iteration  27: 998257.402 ops/s
# Warmup Iteration  28: 995043.204 ops/s
# Warmup Iteration  29: 1000710.994 ops/s
# Warmup Iteration  30: 1003466.822 ops/s
Iteration   1: 995712.580 ops/s
Iteration   2: 1000114.541 ops/s
Iteration   3: 1000663.644 ops/s
Iteration   4: 998695.039 ops/s
Iteration   5: 996984.051 ops/s
Iteration   6: 1002849.990 ops/s
Iteration   7: 1003585.784 ops/s
Iteration   8: 1000991.149 ops/s
Iteration   9: 1003051.360 ops/s
Iteration  10: 998823.667 ops/s
Iteration  11: 980373.575 ops/s
Iteration  12: 989630.054 ops/s
Iteration  13: 987869.908 ops/s
Iteration  14: 995925.696 ops/s
Iteration  15: 994599.705 ops/s
Iteration  16: 992629.977 ops/s
Iteration  17: 986683.201 ops/s
Iteration  18: 998913.225 ops/s
Iteration  19: 998316.335 ops/s
Iteration  20: 994689.782 ops/s
Iteration  21: 992096.784 ops/s
Iteration  22: 986400.735 ops/s
Iteration  23: 996626.016 ops/s
Iteration  24: 1004729.701 ops/s
Iteration  25: 998382.328 ops/s
Iteration  26: 1000606.785 ops/s
Iteration  27: 997727.140 ops/s
Iteration  28: 996375.277 ops/s
Iteration  29: 993417.171 ops/s
Iteration  30: 999146.219 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachInBothThrowsOnNullList":
  996220.381 ±(99.9%) 3782.951 ops/s [Average]
  (min, avg, max) = (980373.575, 996220.381, 1004729.701), stdev = 5662.143
  CI (99.9%): [992437.430, 1000003.331] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_forEachInBothThrowsOnNullList  thrpt   30  996220.381 ± 3782.951  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachInBothUsingListIterate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachInBothUsingListIterate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1026990.834 ops/s
# Warmup Iteration   2: 2017597.524 ops/s
# Warmup Iteration   3: 2076201.226 ops/s
# Warmup Iteration   4: 2074008.551 ops/s
# Warmup Iteration   5: 1761299.060 ops/s
# Warmup Iteration   6: 2102066.870 ops/s
# Warmup Iteration   7: 2063573.749 ops/s
# Warmup Iteration   8: 2090861.981 ops/s
# Warmup Iteration   9: 2050792.208 ops/s
# Warmup Iteration  10: 2092976.918 ops/s
# Warmup Iteration  11: 2051599.894 ops/s
# Warmup Iteration  12: 2081283.302 ops/s
# Warmup Iteration  13: 2095168.308 ops/s
# Warmup Iteration  14: 2077733.201 ops/s
# Warmup Iteration  15: 2076160.186 ops/s
# Warmup Iteration  16: 2101450.452 ops/s
# Warmup Iteration  17: 2100500.096 ops/s
# Warmup Iteration  18: 2069432.946 ops/s
# Warmup Iteration  19: 2048529.233 ops/s
# Warmup Iteration  20: 2061643.691 ops/s
# Warmup Iteration  21: 2080172.193 ops/s
# Warmup Iteration  22: 2093070.204 ops/s
# Warmup Iteration  23: 2098842.798 ops/s
# Warmup Iteration  24: 2094845.015 ops/s
# Warmup Iteration  25: 2102752.904 ops/s
# Warmup Iteration  26: 2080503.144 ops/s
# Warmup Iteration  27: 2102580.565 ops/s
# Warmup Iteration  28: 2100217.643 ops/s
# Warmup Iteration  29: 2090400.960 ops/s
# Warmup Iteration  30: 2090944.135 ops/s
Iteration   1: 2103948.847 ops/s
Iteration   2: 2098340.890 ops/s
Iteration   3: 2099936.560 ops/s
Iteration   4: 2097458.490 ops/s
Iteration   5: 2059253.908 ops/s
Iteration   6: 2094708.776 ops/s
Iteration   7: 2088717.729 ops/s
Iteration   8: 2078770.079 ops/s
Iteration   9: 2097240.418 ops/s
Iteration  10: 2097161.968 ops/s
Iteration  11: 2097254.506 ops/s
Iteration  12: 2095789.973 ops/s
Iteration  13: 2102826.865 ops/s
Iteration  14: 2098086.234 ops/s
Iteration  15: 2089647.857 ops/s
Iteration  16: 2098129.204 ops/s
Iteration  17: 2107341.727 ops/s
Iteration  18: 2092813.739 ops/s
Iteration  19: 2099920.760 ops/s
Iteration  20: 2091178.913 ops/s
Iteration  21: 2077507.197 ops/s
Iteration  22: 2089061.110 ops/s
Iteration  23: 2100400.891 ops/s
Iteration  24: 2100231.145 ops/s
Iteration  25: 2026470.037 ops/s
Iteration  26: 2104786.612 ops/s
Iteration  27: 2100428.872 ops/s
Iteration  28: 2101049.932 ops/s
Iteration  29: 2105515.569 ops/s
Iteration  30: 2090925.446 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachInBothUsingListIterate":
  2092830.142 ±(99.9%) 10574.627 ops/s [Average]
  (min, avg, max) = (2026470.037, 2092830.142, 2107341.727), stdev = 15827.605
  CI (99.9%): [2082255.515, 2103404.769] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_forEachInBothUsingListIterate  thrpt   30  2092830.142 ± 10574.627  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachOnRange$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachOnRange

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 340475.347 ops/s
# Warmup Iteration   2: 442053.750 ops/s
# Warmup Iteration   3: 554023.420 ops/s
# Warmup Iteration   4: 556179.226 ops/s
# Warmup Iteration   5: 557751.564 ops/s
# Warmup Iteration   6: 556070.707 ops/s
# Warmup Iteration   7: 557897.159 ops/s
# Warmup Iteration   8: 461623.666 ops/s
# Warmup Iteration   9: 557206.089 ops/s
# Warmup Iteration  10: 557372.070 ops/s
# Warmup Iteration  11: 555337.692 ops/s
# Warmup Iteration  12: 549735.520 ops/s
# Warmup Iteration  13: 560714.727 ops/s
# Warmup Iteration  14: 557138.825 ops/s
# Warmup Iteration  15: 557470.336 ops/s
# Warmup Iteration  16: 557665.353 ops/s
# Warmup Iteration  17: 573602.230 ops/s
# Warmup Iteration  18: 573532.912 ops/s
# Warmup Iteration  19: 578725.367 ops/s
# Warmup Iteration  20: 574792.707 ops/s
# Warmup Iteration  21: 577878.691 ops/s
# Warmup Iteration  22: 578858.393 ops/s
# Warmup Iteration  23: 574490.461 ops/s
# Warmup Iteration  24: 572293.949 ops/s
# Warmup Iteration  25: 580401.425 ops/s
# Warmup Iteration  26: 575995.533 ops/s
# Warmup Iteration  27: 578279.988 ops/s
# Warmup Iteration  28: 577772.400 ops/s
# Warmup Iteration  29: 578844.484 ops/s
# Warmup Iteration  30: 569504.705 ops/s
Iteration   1: 581565.474 ops/s
Iteration   2: 577532.488 ops/s
Iteration   3: 577484.387 ops/s
Iteration   4: 575352.793 ops/s
Iteration   5: 578518.606 ops/s
Iteration   6: 578604.725 ops/s
Iteration   7: 569056.131 ops/s
Iteration   8: 575425.070 ops/s
Iteration   9: 579611.955 ops/s
Iteration  10: 577856.853 ops/s
Iteration  11: 579962.904 ops/s
Iteration  12: 577183.306 ops/s
Iteration  13: 578187.110 ops/s
Iteration  14: 576011.670 ops/s
Iteration  15: 579061.312 ops/s
Iteration  16: 576825.065 ops/s
Iteration  17: 580264.981 ops/s
Iteration  18: 575638.475 ops/s
Iteration  19: 578472.446 ops/s
Iteration  20: 576309.744 ops/s
Iteration  21: 580993.598 ops/s
Iteration  22: 580335.605 ops/s
Iteration  23: 576275.251 ops/s
Iteration  24: 579020.243 ops/s
Iteration  25: 566310.848 ops/s
Iteration  26: 573980.737 ops/s
Iteration  27: 577507.471 ops/s
Iteration  28: 573609.591 ops/s
Iteration  29: 575831.430 ops/s
Iteration  30: 576908.717 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachOnRange":
  576989.966 ±(99.9%) 2152.146 ops/s [Average]
  (min, avg, max) = (566310.848, 576989.966, 581565.474), stdev = 3221.232
  CI (99.9%): [574837.820, 579142.113] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_forEachOnRange  thrpt   30  576989.966 ± 2152.146  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4592576.360 ops/s
# Warmup Iteration   2: 9461068.342 ops/s
# Warmup Iteration   3: 7972876.145 ops/s
# Warmup Iteration   4: 9580109.984 ops/s
# Warmup Iteration   5: 9611630.703 ops/s
# Warmup Iteration   6: 9592324.798 ops/s
# Warmup Iteration   7: 9525009.673 ops/s
# Warmup Iteration   8: 9581699.912 ops/s
# Warmup Iteration   9: 9443261.658 ops/s
# Warmup Iteration  10: 9605983.490 ops/s
# Warmup Iteration  11: 9589020.762 ops/s
# Warmup Iteration  12: 9571095.233 ops/s
# Warmup Iteration  13: 9583742.200 ops/s
# Warmup Iteration  14: 9593029.606 ops/s
# Warmup Iteration  15: 9609643.764 ops/s
# Warmup Iteration  16: 9549285.561 ops/s
# Warmup Iteration  17: 9499941.859 ops/s
# Warmup Iteration  18: 9487422.358 ops/s
# Warmup Iteration  19: 9497386.200 ops/s
# Warmup Iteration  20: 9503139.946 ops/s
# Warmup Iteration  21: 9451435.669 ops/s
# Warmup Iteration  22: 9475890.767 ops/s
# Warmup Iteration  23: 9513531.729 ops/s
# Warmup Iteration  24: 9520172.099 ops/s
# Warmup Iteration  25: 9435674.420 ops/s
# Warmup Iteration  26: 9508563.351 ops/s
# Warmup Iteration  27: 9439039.813 ops/s
# Warmup Iteration  28: 9541170.968 ops/s
# Warmup Iteration  29: 9476515.245 ops/s
# Warmup Iteration  30: 9504574.798 ops/s
Iteration   1: 9495419.537 ops/s
Iteration   2: 9517246.423 ops/s
Iteration   3: 9510155.042 ops/s
Iteration   4: 9557718.359 ops/s
Iteration   5: 9554283.847 ops/s
Iteration   6: 9582775.810 ops/s
Iteration   7: 9292579.950 ops/s
Iteration   8: 9491278.305 ops/s
Iteration   9: 9572691.876 ops/s
Iteration  10: 9471442.427 ops/s
Iteration  11: 9514959.033 ops/s
Iteration  12: 9507857.100 ops/s
Iteration  13: 9504549.323 ops/s
Iteration  14: 9551813.911 ops/s
Iteration  15: 9597650.496 ops/s
Iteration  16: 9484219.819 ops/s
Iteration  17: 9428925.135 ops/s
Iteration  18: 9514964.722 ops/s
Iteration  19: 9487919.577 ops/s
Iteration  20: 9548755.669 ops/s
Iteration  21: 9498470.722 ops/s
Iteration  22: 9546108.481 ops/s
Iteration  23: 9366593.090 ops/s
Iteration  24: 9573773.153 ops/s
Iteration  25: 9278684.101 ops/s
Iteration  26: 9493651.410 ops/s
Iteration  27: 9452154.497 ops/s
Iteration  28: 9504083.110 ops/s
Iteration  29: 9546756.884 ops/s
Iteration  30: 9459442.715 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWith":
  9496897.484 ±(99.9%) 50175.525 ops/s [Average]
  (min, avg, max) = (9278684.101, 9496897.484, 9597650.496), stdev = 75100.370
  CI (99.9%): [9446721.959, 9547073.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_forEachWith  thrpt   30  9496897.484 ± 50175.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 332986.419 ops/s
# Warmup Iteration   2: 759850.272 ops/s
# Warmup Iteration   3: 872500.952 ops/s
# Warmup Iteration   4: 882540.732 ops/s
# Warmup Iteration   5: 721860.227 ops/s
# Warmup Iteration   6: 876311.595 ops/s
# Warmup Iteration   7: 881380.313 ops/s
# Warmup Iteration   8: 881659.352 ops/s
# Warmup Iteration   9: 881853.460 ops/s
# Warmup Iteration  10: 883978.894 ops/s
# Warmup Iteration  11: 874502.746 ops/s
# Warmup Iteration  12: 879956.452 ops/s
# Warmup Iteration  13: 875678.679 ops/s
# Warmup Iteration  14: 884250.808 ops/s
# Warmup Iteration  15: 885717.965 ops/s
# Warmup Iteration  16: 882882.516 ops/s
# Warmup Iteration  17: 877146.115 ops/s
# Warmup Iteration  18: 873333.466 ops/s
# Warmup Iteration  19: 872613.823 ops/s
# Warmup Iteration  20: 877373.885 ops/s
# Warmup Iteration  21: 882948.808 ops/s
# Warmup Iteration  22: 880487.957 ops/s
# Warmup Iteration  23: 880508.900 ops/s
# Warmup Iteration  24: 876246.744 ops/s
# Warmup Iteration  25: 880431.739 ops/s
# Warmup Iteration  26: 871787.083 ops/s
# Warmup Iteration  27: 872148.545 ops/s
# Warmup Iteration  28: 879336.662 ops/s
# Warmup Iteration  29: 876882.852 ops/s
# Warmup Iteration  30: 882280.442 ops/s
Iteration   1: 881442.571 ops/s
Iteration   2: 882168.650 ops/s
Iteration   3: 881079.024 ops/s
Iteration   4: 878456.102 ops/s
Iteration   5: 878597.902 ops/s
Iteration   6: 880844.762 ops/s
Iteration   7: 884402.464 ops/s
Iteration   8: 877302.754 ops/s
Iteration   9: 877176.205 ops/s
Iteration  10: 879275.525 ops/s
Iteration  11: 862654.511 ops/s
Iteration  12: 877758.380 ops/s
Iteration  13: 877632.584 ops/s
Iteration  14: 875140.829 ops/s
Iteration  15: 869267.719 ops/s
Iteration  16: 877367.877 ops/s
Iteration  17: 882649.072 ops/s
Iteration  18: 884495.783 ops/s
Iteration  19: 886626.104 ops/s
Iteration  20: 878925.564 ops/s
Iteration  21: 882321.172 ops/s
Iteration  22: 875865.285 ops/s
Iteration  23: 881671.361 ops/s
Iteration  24: 878379.314 ops/s
Iteration  25: 879189.681 ops/s
Iteration  26: 854781.509 ops/s
Iteration  27: 879381.704 ops/s
Iteration  28: 883533.817 ops/s
Iteration  29: 870696.435 ops/s
Iteration  30: 866086.046 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndex":
  877505.690 ±(99.9%) 4556.063 ops/s [Average]
  (min, avg, max) = (854781.509, 877505.690, 886626.104), stdev = 6819.301
  CI (99.9%): [872949.627, 882061.753] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  877505.690 ± 4556.063  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndexOnRange$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndexOnRange

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 341653.952 ops/s
# Warmup Iteration   2: 454795.340 ops/s
# Warmup Iteration   3: 559675.926 ops/s
# Warmup Iteration   4: 562568.544 ops/s
# Warmup Iteration   5: 563106.937 ops/s
# Warmup Iteration   6: 556067.472 ops/s
# Warmup Iteration   7: 559794.252 ops/s
# Warmup Iteration   8: 466341.692 ops/s
# Warmup Iteration   9: 561206.400 ops/s
# Warmup Iteration  10: 560524.379 ops/s
# Warmup Iteration  11: 557496.173 ops/s
# Warmup Iteration  12: 560055.254 ops/s
# Warmup Iteration  13: 558894.839 ops/s
# Warmup Iteration  14: 562548.316 ops/s
# Warmup Iteration  15: 562098.540 ops/s
# Warmup Iteration  16: 560944.079 ops/s
# Warmup Iteration  17: 579641.916 ops/s
# Warmup Iteration  18: 578626.495 ops/s
# Warmup Iteration  19: 579106.548 ops/s
# Warmup Iteration  20: 577290.453 ops/s
# Warmup Iteration  21: 578080.826 ops/s
# Warmup Iteration  22: 578167.663 ops/s
# Warmup Iteration  23: 577634.406 ops/s
# Warmup Iteration  24: 577257.849 ops/s
# Warmup Iteration  25: 577568.094 ops/s
# Warmup Iteration  26: 576295.487 ops/s
# Warmup Iteration  27: 580423.418 ops/s
# Warmup Iteration  28: 574667.839 ops/s
# Warmup Iteration  29: 579348.149 ops/s
# Warmup Iteration  30: 577136.427 ops/s
Iteration   1: 581458.176 ops/s
Iteration   2: 577856.338 ops/s
Iteration   3: 579381.423 ops/s
Iteration   4: 569582.612 ops/s
Iteration   5: 578068.823 ops/s
Iteration   6: 576440.290 ops/s
Iteration   7: 577890.412 ops/s
Iteration   8: 578752.530 ops/s
Iteration   9: 570554.089 ops/s
Iteration  10: 565285.777 ops/s
Iteration  11: 577733.058 ops/s
Iteration  12: 581598.354 ops/s
Iteration  13: 579068.169 ops/s
Iteration  14: 582048.661 ops/s
Iteration  15: 580797.622 ops/s
Iteration  16: 579283.036 ops/s
Iteration  17: 581103.220 ops/s
Iteration  18: 579919.169 ops/s
Iteration  19: 577640.254 ops/s
Iteration  20: 580404.093 ops/s
Iteration  21: 578711.308 ops/s
Iteration  22: 581431.721 ops/s
Iteration  23: 577848.094 ops/s
Iteration  24: 579683.974 ops/s
Iteration  25: 570340.017 ops/s
Iteration  26: 579530.139 ops/s
Iteration  27: 578501.234 ops/s
Iteration  28: 576726.471 ops/s
Iteration  29: 580945.975 ops/s
Iteration  30: 580222.653 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndexOnRange":
  577960.256 ±(99.9%) 2648.439 ops/s [Average]
  (min, avg, max) = (565285.777, 577960.256, 582048.661), stdev = 3964.059
  CI (99.9%): [575311.817, 580608.696] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndexOnRange  thrpt   30  577960.256 ± 2648.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndexWithFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndexWithFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158400.567 ops/s
# Warmup Iteration   2: 184090.407 ops/s
# Warmup Iteration   3: 246122.100 ops/s
# Warmup Iteration   4: 243881.549 ops/s
# Warmup Iteration   5: 247459.637 ops/s
# Warmup Iteration   6: 248136.057 ops/s
# Warmup Iteration   7: 248958.983 ops/s
# Warmup Iteration   8: 245542.278 ops/s
# Warmup Iteration   9: 237636.540 ops/s
# Warmup Iteration  10: 213372.751 ops/s
# Warmup Iteration  11: 249510.610 ops/s
# Warmup Iteration  12: 248892.979 ops/s
# Warmup Iteration  13: 248613.629 ops/s
# Warmup Iteration  14: 249079.541 ops/s
# Warmup Iteration  15: 247614.672 ops/s
# Warmup Iteration  16: 248375.211 ops/s
# Warmup Iteration  17: 254852.233 ops/s
# Warmup Iteration  18: 252496.257 ops/s
# Warmup Iteration  19: 253690.921 ops/s
# Warmup Iteration  20: 250949.701 ops/s
# Warmup Iteration  21: 254876.102 ops/s
# Warmup Iteration  22: 254792.974 ops/s
# Warmup Iteration  23: 250359.127 ops/s
# Warmup Iteration  24: 256596.886 ops/s
# Warmup Iteration  25: 254955.484 ops/s
# Warmup Iteration  26: 254350.485 ops/s
# Warmup Iteration  27: 254009.585 ops/s
# Warmup Iteration  28: 253496.669 ops/s
# Warmup Iteration  29: 254767.680 ops/s
# Warmup Iteration  30: 253213.691 ops/s
Iteration   1: 254506.188 ops/s
Iteration   2: 252081.963 ops/s
Iteration   3: 252808.859 ops/s
Iteration   4: 253574.816 ops/s
Iteration   5: 254352.508 ops/s
Iteration   6: 254070.959 ops/s
Iteration   7: 254025.019 ops/s
Iteration   8: 251288.760 ops/s
Iteration   9: 250213.197 ops/s
Iteration  10: 255613.985 ops/s
Iteration  11: 250343.762 ops/s
Iteration  12: 255186.229 ops/s
Iteration  13: 256139.457 ops/s
Iteration  14: 256010.711 ops/s
Iteration  15: 253877.207 ops/s
Iteration  16: 254466.665 ops/s
Iteration  17: 253366.922 ops/s
Iteration  18: 255545.007 ops/s
Iteration  19: 253538.307 ops/s
Iteration  20: 254887.540 ops/s
Iteration  21: 255325.398 ops/s
Iteration  22: 251787.672 ops/s
Iteration  23: 253452.784 ops/s
Iteration  24: 256595.295 ops/s
Iteration  25: 256409.529 ops/s
Iteration  26: 256438.824 ops/s
Iteration  27: 256617.885 ops/s
Iteration  28: 250787.988 ops/s
Iteration  29: 253303.105 ops/s
Iteration  30: 256042.204 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndexWithFromTo":
  254088.625 ±(99.9%) 1267.704 ops/s [Average]
  (min, avg, max) = (250213.197, 254088.625, 256617.885), stdev = 1897.440
  CI (99.9%): [252820.921, 255356.329] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndexWithFromTo  thrpt   30  254088.625 ± 1267.704  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5654266.511 ops/s
# Warmup Iteration   2: 11580931.489 ops/s
# Warmup Iteration   3: 9902434.842 ops/s
# Warmup Iteration   4: 11615997.139 ops/s
# Warmup Iteration   5: 11692903.282 ops/s
# Warmup Iteration   6: 11675965.717 ops/s
# Warmup Iteration   7: 11684327.441 ops/s
# Warmup Iteration   8: 11616669.668 ops/s
# Warmup Iteration   9: 11674852.219 ops/s
# Warmup Iteration  10: 11690281.158 ops/s
# Warmup Iteration  11: 11632633.588 ops/s
# Warmup Iteration  12: 11717970.194 ops/s
# Warmup Iteration  13: 11703764.731 ops/s
# Warmup Iteration  14: 11735971.486 ops/s
# Warmup Iteration  15: 11560802.978 ops/s
# Warmup Iteration  16: 11628679.916 ops/s
# Warmup Iteration  17: 11749041.100 ops/s
# Warmup Iteration  18: 11753136.060 ops/s
# Warmup Iteration  19: 11747215.658 ops/s
# Warmup Iteration  20: 11663377.887 ops/s
# Warmup Iteration  21: 11791193.874 ops/s
# Warmup Iteration  22: 11832492.067 ops/s
# Warmup Iteration  23: 11822206.581 ops/s
# Warmup Iteration  24: 11704822.956 ops/s
# Warmup Iteration  25: 11791542.386 ops/s
# Warmup Iteration  26: 11811154.008 ops/s
# Warmup Iteration  27: 11806977.518 ops/s
# Warmup Iteration  28: 11833285.554 ops/s
# Warmup Iteration  29: 11795162.032 ops/s
# Warmup Iteration  30: 11785160.843 ops/s
Iteration   1: 11768615.650 ops/s
Iteration   2: 11621463.747 ops/s
Iteration   3: 11840546.858 ops/s
Iteration   4: 11849654.903 ops/s
Iteration   5: 11767092.008 ops/s
Iteration   6: 11759454.379 ops/s
Iteration   7: 11847171.567 ops/s
Iteration   8: 11853967.265 ops/s
Iteration   9: 11628417.858 ops/s
Iteration  10: 11619263.741 ops/s
Iteration  11: 11754704.957 ops/s
Iteration  12: 11678222.529 ops/s
Iteration  13: 11803591.115 ops/s
Iteration  14: 11807250.686 ops/s
Iteration  15: 11824870.546 ops/s
Iteration  16: 11814874.115 ops/s
Iteration  17: 11879148.112 ops/s
Iteration  18: 11893389.520 ops/s
Iteration  19: 11766779.163 ops/s
Iteration  20: 11745521.080 ops/s
Iteration  21: 11856162.237 ops/s
Iteration  22: 11629106.889 ops/s
Iteration  23: 11626744.037 ops/s
Iteration  24: 11793656.452 ops/s
Iteration  25: 11765469.554 ops/s
Iteration  26: 11627630.567 ops/s
Iteration  27: 11813115.238 ops/s
Iteration  28: 11846646.229 ops/s
Iteration  29: 11746941.922 ops/s
Iteration  30: 11852003.570 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse":
  11769382.550 ±(99.9%) 57773.654 ops/s [Average]
  (min, avg, max) = (11619263.741, 11769382.550, 11893389.520), stdev = 86472.891
  CI (99.9%): [11711608.896, 11827156.203] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse  thrpt   30  11769382.550 ± 57773.654  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1527304.700 ops/s
# Warmup Iteration   2: 3397057.787 ops/s
# Warmup Iteration   3: 3083593.021 ops/s
# Warmup Iteration   4: 3236002.988 ops/s
# Warmup Iteration   5: 3469499.534 ops/s
# Warmup Iteration   6: 3476799.379 ops/s
# Warmup Iteration   7: 3475994.406 ops/s
# Warmup Iteration   8: 3476248.079 ops/s
# Warmup Iteration   9: 3449086.642 ops/s
# Warmup Iteration  10: 3474103.039 ops/s
# Warmup Iteration  11: 3462552.024 ops/s
# Warmup Iteration  12: 3472417.405 ops/s
# Warmup Iteration  13: 3487739.399 ops/s
# Warmup Iteration  14: 3492678.682 ops/s
# Warmup Iteration  15: 3473092.051 ops/s
# Warmup Iteration  16: 3472851.477 ops/s
# Warmup Iteration  17: 3435251.195 ops/s
# Warmup Iteration  18: 3480824.624 ops/s
# Warmup Iteration  19: 3469039.100 ops/s
# Warmup Iteration  20: 3479328.619 ops/s
# Warmup Iteration  21: 3465307.713 ops/s
# Warmup Iteration  22: 3487281.787 ops/s
# Warmup Iteration  23: 3458527.100 ops/s
# Warmup Iteration  24: 3479442.427 ops/s
# Warmup Iteration  25: 3425370.879 ops/s
# Warmup Iteration  26: 3458339.258 ops/s
# Warmup Iteration  27: 3467747.764 ops/s
# Warmup Iteration  28: 3448383.342 ops/s
# Warmup Iteration  29: 3482697.315 ops/s
# Warmup Iteration  30: 3465570.793 ops/s
Iteration   1: 3462155.118 ops/s
Iteration   2: 3457600.816 ops/s
Iteration   3: 3478972.166 ops/s
Iteration   4: 3501028.866 ops/s
Iteration   5: 3426268.754 ops/s
Iteration   6: 3473260.584 ops/s
Iteration   7: 3478037.945 ops/s
Iteration   8: 3431379.461 ops/s
Iteration   9: 3474426.224 ops/s
Iteration  10: 3470882.194 ops/s
Iteration  11: 3473960.572 ops/s
Iteration  12: 3489062.230 ops/s
Iteration  13: 3461094.734 ops/s
Iteration  14: 3447048.806 ops/s
Iteration  15: 3456640.049 ops/s
Iteration  16: 3481275.998 ops/s
Iteration  17: 3479548.258 ops/s
Iteration  18: 3451849.283 ops/s
Iteration  19: 3450558.287 ops/s
Iteration  20: 3408401.199 ops/s
Iteration  21: 3471992.115 ops/s
Iteration  22: 3475272.990 ops/s
Iteration  23: 3458752.376 ops/s
Iteration  24: 3394170.740 ops/s
Iteration  25: 3424068.321 ops/s
Iteration  26: 3418458.537 ops/s
Iteration  27: 3469796.512 ops/s
Iteration  28: 3487808.099 ops/s
Iteration  29: 3449925.998 ops/s
Iteration  30: 3491881.659 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_fusedCollectMakeString":
  3459852.630 ±(99.9%) 17292.063 ops/s [Average]
  (min, avg, max) = (3394170.740, 3459852.630, 3501028.866), stdev = 25881.948
  CI (99.9%): [3442560.567, 3477144.693] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  3459852.630 ± 17292.063  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2416828.828 ops/s
# Warmup Iteration   2: 4998506.305 ops/s
# Warmup Iteration   3: 5056602.445 ops/s
# Warmup Iteration   4: 4263186.500 ops/s
# Warmup Iteration   5: 5032145.794 ops/s
# Warmup Iteration   6: 5056770.616 ops/s
# Warmup Iteration   7: 5034929.238 ops/s
# Warmup Iteration   8: 5065529.302 ops/s
# Warmup Iteration   9: 5014539.354 ops/s
# Warmup Iteration  10: 5050460.269 ops/s
# Warmup Iteration  11: 5047321.137 ops/s
# Warmup Iteration  12: 5053234.692 ops/s
# Warmup Iteration  13: 5042693.484 ops/s
# Warmup Iteration  14: 5028360.235 ops/s
# Warmup Iteration  15: 5013732.012 ops/s
# Warmup Iteration  16: 5038274.540 ops/s
# Warmup Iteration  17: 5050901.202 ops/s
# Warmup Iteration  18: 5033383.017 ops/s
# Warmup Iteration  19: 5056436.449 ops/s
# Warmup Iteration  20: 5055240.231 ops/s
# Warmup Iteration  21: 5004566.537 ops/s
# Warmup Iteration  22: 5022975.306 ops/s
# Warmup Iteration  23: 5055749.704 ops/s
# Warmup Iteration  24: 5052840.819 ops/s
# Warmup Iteration  25: 5059551.908 ops/s
# Warmup Iteration  26: 5067937.230 ops/s
# Warmup Iteration  27: 5024942.537 ops/s
# Warmup Iteration  28: 5047860.335 ops/s
# Warmup Iteration  29: 5054534.541 ops/s
# Warmup Iteration  30: 4984713.212 ops/s
Iteration   1: 4957670.431 ops/s
Iteration   2: 5029666.678 ops/s
Iteration   3: 5061796.854 ops/s
Iteration   4: 5075313.735 ops/s
Iteration   5: 5058446.998 ops/s
Iteration   6: 5036122.636 ops/s
Iteration   7: 5054465.103 ops/s
Iteration   8: 5062938.180 ops/s
Iteration   9: 5064459.444 ops/s
Iteration  10: 4959565.062 ops/s
Iteration  11: 5037071.584 ops/s
Iteration  12: 5075497.955 ops/s
Iteration  13: 5036273.969 ops/s
Iteration  14: 5064380.230 ops/s
Iteration  15: 5023394.214 ops/s
Iteration  16: 5071790.013 ops/s
Iteration  17: 5059765.653 ops/s
Iteration  18: 5000870.786 ops/s
Iteration  19: 5052032.983 ops/s
Iteration  20: 5050041.619 ops/s
Iteration  21: 5064661.961 ops/s
Iteration  22: 5079809.533 ops/s
Iteration  23: 5081279.696 ops/s
Iteration  24: 5003038.575 ops/s
Iteration  25: 5029282.907 ops/s
Iteration  26: 5060599.585 ops/s
Iteration  27: 5073106.715 ops/s
Iteration  28: 5065693.257 ops/s
Iteration  29: 5043420.592 ops/s
Iteration  30: 5068683.954 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getAny":
  5046704.697 ±(99.9%) 21178.897 ops/s [Average]
  (min, avg, max) = (4957670.431, 5046704.697, 5081279.696), stdev = 31699.579
  CI (99.9%): [5025525.799, 5067883.594] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_getAny  thrpt   30  5046704.697 ± 21178.897  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3561744.691 ops/s
# Warmup Iteration   2: 7139695.236 ops/s
# Warmup Iteration   3: 6447531.284 ops/s
# Warmup Iteration   4: 7009495.282 ops/s
# Warmup Iteration   5: 7273121.869 ops/s
# Warmup Iteration   6: 7331398.417 ops/s
# Warmup Iteration   7: 7299193.482 ops/s
# Warmup Iteration   8: 7307803.812 ops/s
# Warmup Iteration   9: 7255189.530 ops/s
# Warmup Iteration  10: 7283383.464 ops/s
# Warmup Iteration  11: 7271981.849 ops/s
# Warmup Iteration  12: 7304175.039 ops/s
# Warmup Iteration  13: 7326239.330 ops/s
# Warmup Iteration  14: 7320382.934 ops/s
# Warmup Iteration  15: 7294650.910 ops/s
# Warmup Iteration  16: 7263317.726 ops/s
# Warmup Iteration  17: 7211122.980 ops/s
# Warmup Iteration  18: 7294166.386 ops/s
# Warmup Iteration  19: 7260001.177 ops/s
# Warmup Iteration  20: 7294241.414 ops/s
# Warmup Iteration  21: 7286038.406 ops/s
# Warmup Iteration  22: 7219572.849 ops/s
# Warmup Iteration  23: 7194772.023 ops/s
# Warmup Iteration  24: 7203311.335 ops/s
# Warmup Iteration  25: 7311393.916 ops/s
# Warmup Iteration  26: 7237514.878 ops/s
# Warmup Iteration  27: 7284173.967 ops/s
# Warmup Iteration  28: 7214655.140 ops/s
# Warmup Iteration  29: 7282004.536 ops/s
# Warmup Iteration  30: 7259898.394 ops/s
Iteration   1: 7292274.062 ops/s
Iteration   2: 7298447.386 ops/s
Iteration   3: 7314657.447 ops/s
Iteration   4: 7210166.167 ops/s
Iteration   5: 7306215.511 ops/s
Iteration   6: 7296432.497 ops/s
Iteration   7: 7294773.875 ops/s
Iteration   8: 7317520.825 ops/s
Iteration   9: 7315826.525 ops/s
Iteration  10: 7196477.307 ops/s
Iteration  11: 7273652.802 ops/s
Iteration  12: 7298480.125 ops/s
Iteration  13: 7300465.648 ops/s
Iteration  14: 7256713.523 ops/s
Iteration  15: 7245167.462 ops/s
Iteration  16: 7284278.077 ops/s
Iteration  17: 7311446.916 ops/s
Iteration  18: 7275734.148 ops/s
Iteration  19: 7259653.573 ops/s
Iteration  20: 7313615.562 ops/s
Iteration  21: 7310032.954 ops/s
Iteration  22: 7176460.683 ops/s
Iteration  23: 7298327.439 ops/s
Iteration  24: 7298308.838 ops/s
Iteration  25: 7200147.570 ops/s
Iteration  26: 7305999.651 ops/s
Iteration  27: 7273580.001 ops/s
Iteration  28: 7299903.435 ops/s
Iteration  29: 7250207.135 ops/s
Iteration  30: 7133592.360 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getFirst":
  7273618.650 ±(99.9%) 31244.252 ops/s [Average]
  (min, avg, max) = (7133592.360, 7273618.650, 7317520.825), stdev = 46764.929
  CI (99.9%): [7242374.398, 7304862.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_getFirst  thrpt   30  7273618.650 ± 31244.252  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getFirstOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getFirstOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2283065.212 ops/s
# Warmup Iteration   2: 4692680.145 ops/s
# Warmup Iteration   3: 3978914.324 ops/s
# Warmup Iteration   4: 4753364.975 ops/s
# Warmup Iteration   5: 4724494.018 ops/s
# Warmup Iteration   6: 4750581.973 ops/s
# Warmup Iteration   7: 4733818.880 ops/s
# Warmup Iteration   8: 4754485.190 ops/s
# Warmup Iteration   9: 4703279.614 ops/s
# Warmup Iteration  10: 4748471.710 ops/s
# Warmup Iteration  11: 4764100.543 ops/s
# Warmup Iteration  12: 4758847.063 ops/s
# Warmup Iteration  13: 4749967.395 ops/s
# Warmup Iteration  14: 4753754.701 ops/s
# Warmup Iteration  15: 4744793.342 ops/s
# Warmup Iteration  16: 4712637.596 ops/s
# Warmup Iteration  17: 4742944.766 ops/s
# Warmup Iteration  18: 4749023.639 ops/s
# Warmup Iteration  19: 4686641.172 ops/s
# Warmup Iteration  20: 4729859.558 ops/s
# Warmup Iteration  21: 4721947.846 ops/s
# Warmup Iteration  22: 4709821.658 ops/s
# Warmup Iteration  23: 4710156.805 ops/s
# Warmup Iteration  24: 4735777.702 ops/s
# Warmup Iteration  25: 4716271.912 ops/s
# Warmup Iteration  26: 4735573.481 ops/s
# Warmup Iteration  27: 4692958.207 ops/s
# Warmup Iteration  28: 4697819.919 ops/s
# Warmup Iteration  29: 4732284.970 ops/s
# Warmup Iteration  30: 4723289.943 ops/s
Iteration   1: 4730598.450 ops/s
Iteration   2: 4728635.662 ops/s
Iteration   3: 4737741.918 ops/s
Iteration   4: 4687582.828 ops/s
Iteration   5: 4733138.040 ops/s
Iteration   6: 4717781.499 ops/s
Iteration   7: 4720889.867 ops/s
Iteration   8: 4764487.903 ops/s
Iteration   9: 4699013.285 ops/s
Iteration  10: 4759584.587 ops/s
Iteration  11: 4719213.912 ops/s
Iteration  12: 4751743.220 ops/s
Iteration  13: 4719273.948 ops/s
Iteration  14: 4736955.919 ops/s
Iteration  15: 4743902.312 ops/s
Iteration  16: 4744169.485 ops/s
Iteration  17: 4789765.118 ops/s
Iteration  18: 4706192.299 ops/s
Iteration  19: 4759336.605 ops/s
Iteration  20: 4760055.928 ops/s
Iteration  21: 4772661.393 ops/s
Iteration  22: 4748148.172 ops/s
Iteration  23: 4682681.014 ops/s
Iteration  24: 4754530.000 ops/s
Iteration  25: 4746573.301 ops/s
Iteration  26: 4680936.907 ops/s
Iteration  27: 4759003.604 ops/s
Iteration  28: 4766655.112 ops/s
Iteration  29: 4756574.129 ops/s
Iteration  30: 4751405.097 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getFirstOptional":
  4737641.050 ±(99.9%) 18169.225 ops/s [Average]
  (min, avg, max) = (4680936.907, 4737641.050, 4789765.118), stdev = 27194.843
  CI (99.9%): [4719471.825, 4755810.276] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_getFirstOptional  thrpt   30  4737641.050 ± 18169.225  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2290396.188 ops/s
# Warmup Iteration   2: 4911472.416 ops/s
# Warmup Iteration   3: 4171654.991 ops/s
# Warmup Iteration   4: 4845847.268 ops/s
# Warmup Iteration   5: 4940874.958 ops/s
# Warmup Iteration   6: 4896171.410 ops/s
# Warmup Iteration   7: 4942124.001 ops/s
# Warmup Iteration   8: 4947549.734 ops/s
# Warmup Iteration   9: 4906218.356 ops/s
# Warmup Iteration  10: 4907348.179 ops/s
# Warmup Iteration  11: 4955613.362 ops/s
# Warmup Iteration  12: 4937664.916 ops/s
# Warmup Iteration  13: 4911087.962 ops/s
# Warmup Iteration  14: 4973816.643 ops/s
# Warmup Iteration  15: 4948398.545 ops/s
# Warmup Iteration  16: 4920694.435 ops/s
# Warmup Iteration  17: 4943457.082 ops/s
# Warmup Iteration  18: 4902860.149 ops/s
# Warmup Iteration  19: 4919207.966 ops/s
# Warmup Iteration  20: 4938667.542 ops/s
# Warmup Iteration  21: 4908551.031 ops/s
# Warmup Iteration  22: 4907220.278 ops/s
# Warmup Iteration  23: 4922415.492 ops/s
# Warmup Iteration  24: 4939384.811 ops/s
# Warmup Iteration  25: 4927669.463 ops/s
# Warmup Iteration  26: 4947783.098 ops/s
# Warmup Iteration  27: 4870852.084 ops/s
# Warmup Iteration  28: 4935266.755 ops/s
# Warmup Iteration  29: 4939446.236 ops/s
# Warmup Iteration  30: 4927434.020 ops/s
Iteration   1: 4941679.739 ops/s
Iteration   2: 4934688.134 ops/s
Iteration   3: 4925578.976 ops/s
Iteration   4: 4907354.865 ops/s
Iteration   5: 4846277.099 ops/s
Iteration   6: 4942076.486 ops/s
Iteration   7: 4897690.934 ops/s
Iteration   8: 4828027.363 ops/s
Iteration   9: 4965421.724 ops/s
Iteration  10: 4933410.459 ops/s
Iteration  11: 4909810.471 ops/s
Iteration  12: 4863396.776 ops/s
Iteration  13: 4910231.627 ops/s
Iteration  14: 4944523.200 ops/s
Iteration  15: 4914727.480 ops/s
Iteration  16: 4945902.848 ops/s
Iteration  17: 4914637.260 ops/s
Iteration  18: 4957592.516 ops/s
Iteration  19: 4925638.871 ops/s
Iteration  20: 4914180.660 ops/s
Iteration  21: 4925891.409 ops/s
Iteration  22: 4936311.946 ops/s
Iteration  23: 4943581.543 ops/s
Iteration  24: 4921045.352 ops/s
Iteration  25: 4945732.270 ops/s
Iteration  26: 4903963.665 ops/s
Iteration  27: 4926167.235 ops/s
Iteration  28: 4864559.021 ops/s
Iteration  29: 4948991.027 ops/s
Iteration  30: 4940375.345 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getLast":
  4919315.543 ±(99.9%) 21610.329 ops/s [Average]
  (min, avg, max) = (4828027.363, 4919315.543, 4965421.724), stdev = 32345.326
  CI (99.9%): [4897705.214, 4940925.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_getLast  thrpt   30  4919315.543 ± 21610.329  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getLastOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getLastOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2217530.501 ops/s
# Warmup Iteration   2: 4682532.389 ops/s
# Warmup Iteration   3: 3988484.688 ops/s
# Warmup Iteration   4: 4770754.093 ops/s
# Warmup Iteration   5: 4739404.573 ops/s
# Warmup Iteration   6: 4747143.441 ops/s
# Warmup Iteration   7: 4723182.277 ops/s
# Warmup Iteration   8: 4690819.758 ops/s
# Warmup Iteration   9: 4739033.753 ops/s
# Warmup Iteration  10: 4700849.421 ops/s
# Warmup Iteration  11: 4726792.875 ops/s
# Warmup Iteration  12: 4707253.129 ops/s
# Warmup Iteration  13: 4725214.700 ops/s
# Warmup Iteration  14: 4690209.411 ops/s
# Warmup Iteration  15: 4739539.469 ops/s
# Warmup Iteration  16: 4755930.624 ops/s
# Warmup Iteration  17: 4757070.453 ops/s
# Warmup Iteration  18: 4727393.536 ops/s
# Warmup Iteration  19: 4748761.200 ops/s
# Warmup Iteration  20: 4732651.725 ops/s
# Warmup Iteration  21: 4712981.921 ops/s
# Warmup Iteration  22: 4739780.886 ops/s
# Warmup Iteration  23: 4747514.132 ops/s
# Warmup Iteration  24: 4769714.443 ops/s
# Warmup Iteration  25: 4716725.090 ops/s
# Warmup Iteration  26: 4715891.298 ops/s
# Warmup Iteration  27: 4748015.971 ops/s
# Warmup Iteration  28: 4736052.798 ops/s
# Warmup Iteration  29: 4746801.689 ops/s
# Warmup Iteration  30: 4729819.501 ops/s
Iteration   1: 4714611.718 ops/s
Iteration   2: 4749425.422 ops/s
Iteration   3: 4697212.875 ops/s
Iteration   4: 4643699.916 ops/s
Iteration   5: 4759064.949 ops/s
Iteration   6: 4754410.024 ops/s
Iteration   7: 4753464.371 ops/s
Iteration   8: 4741059.051 ops/s
Iteration   9: 4745661.174 ops/s
Iteration  10: 4738189.611 ops/s
Iteration  11: 4785170.202 ops/s
Iteration  12: 4731538.293 ops/s
Iteration  13: 4755733.383 ops/s
Iteration  14: 4771388.472 ops/s
Iteration  15: 4773169.194 ops/s
Iteration  16: 4776207.423 ops/s
Iteration  17: 4742061.189 ops/s
Iteration  18: 4737590.916 ops/s
Iteration  19: 4742229.240 ops/s
Iteration  20: 4761527.985 ops/s
Iteration  21: 4744129.526 ops/s
Iteration  22: 4691658.663 ops/s
Iteration  23: 4740486.849 ops/s
Iteration  24: 4739317.126 ops/s
Iteration  25: 4767212.038 ops/s
Iteration  26: 4749049.518 ops/s
Iteration  27: 4766360.659 ops/s
Iteration  28: 4752309.112 ops/s
Iteration  29: 4731640.296 ops/s
Iteration  30: 4729668.310 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getLastOptional":
  4742841.583 ±(99.9%) 18741.234 ops/s [Average]
  (min, avg, max) = (4643699.916, 4742841.583, 4785170.202), stdev = 28050.998
  CI (99.9%): [4724100.350, 4761582.817] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_getLastOptional  thrpt   30  4742841.583 ± 18741.234  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2819685.046 ops/s
# Warmup Iteration   2: 6803677.516 ops/s
# Warmup Iteration   3: 6443536.789 ops/s
# Warmup Iteration   4: 6263146.121 ops/s
# Warmup Iteration   5: 6933345.638 ops/s
# Warmup Iteration   6: 6928568.687 ops/s
# Warmup Iteration   7: 6899870.374 ops/s
# Warmup Iteration   8: 6810564.733 ops/s
# Warmup Iteration   9: 6879537.674 ops/s
# Warmup Iteration  10: 6942678.970 ops/s
# Warmup Iteration  11: 6899989.393 ops/s
# Warmup Iteration  12: 6879189.361 ops/s
# Warmup Iteration  13: 6908650.012 ops/s
# Warmup Iteration  14: 6940256.578 ops/s
# Warmup Iteration  15: 6917237.368 ops/s
# Warmup Iteration  16: 6917149.293 ops/s
# Warmup Iteration  17: 6929201.842 ops/s
# Warmup Iteration  18: 6917289.584 ops/s
# Warmup Iteration  19: 6917418.102 ops/s
# Warmup Iteration  20: 6857989.748 ops/s
# Warmup Iteration  21: 6918011.856 ops/s
# Warmup Iteration  22: 6952118.225 ops/s
# Warmup Iteration  23: 6924704.581 ops/s
# Warmup Iteration  24: 6899491.410 ops/s
# Warmup Iteration  25: 6901500.884 ops/s
# Warmup Iteration  26: 6886113.539 ops/s
# Warmup Iteration  27: 6933148.422 ops/s
# Warmup Iteration  28: 6915633.181 ops/s
# Warmup Iteration  29: 6890542.756 ops/s
# Warmup Iteration  30: 6850433.907 ops/s
Iteration   1: 6916622.457 ops/s
Iteration   2: 6898309.623 ops/s
Iteration   3: 6907151.303 ops/s
Iteration   4: 6913289.571 ops/s
Iteration   5: 6945203.946 ops/s
Iteration   6: 6806837.052 ops/s
Iteration   7: 6889573.851 ops/s
Iteration   8: 6929425.421 ops/s
Iteration   9: 6914693.708 ops/s
Iteration  10: 6909349.330 ops/s
Iteration  11: 6922741.407 ops/s
Iteration  12: 6801256.746 ops/s
Iteration  13: 6925206.587 ops/s
Iteration  14: 6916824.942 ops/s
Iteration  15: 6867194.155 ops/s
Iteration  16: 6930406.742 ops/s
Iteration  17: 6915911.694 ops/s
Iteration  18: 6871362.383 ops/s
Iteration  19: 6916002.011 ops/s
Iteration  20: 6832777.373 ops/s
Iteration  21: 6880994.144 ops/s
Iteration  22: 6885203.651 ops/s
Iteration  23: 6924205.265 ops/s
Iteration  24: 6883994.203 ops/s
Iteration  25: 6877990.929 ops/s
Iteration  26: 6899112.792 ops/s
Iteration  27: 6924300.660 ops/s
Iteration  28: 6787503.460 ops/s
Iteration  29: 6876290.314 ops/s
Iteration  30: 6883358.894 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getOnly":
  6891769.820 ±(99.9%) 26464.886 ops/s [Average]
  (min, avg, max) = (6787503.460, 6891769.820, 6945203.946), stdev = 39611.399
  CI (99.9%): [6865304.934, 6918234.707] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_getOnly  thrpt   30  6891769.820 ± 26464.886  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661898.534 ops/s
# Warmup Iteration   2: 728683.518 ops/s
# Warmup Iteration   3: 958583.380 ops/s
# Warmup Iteration   4: 957445.323 ops/s
# Warmup Iteration   5: 943313.017 ops/s
# Warmup Iteration   6: 958534.059 ops/s
# Warmup Iteration   7: 957260.461 ops/s
# Warmup Iteration   8: 949482.943 ops/s
# Warmup Iteration   9: 960759.534 ops/s
# Warmup Iteration  10: 895047.597 ops/s
# Warmup Iteration  11: 848596.020 ops/s
# Warmup Iteration  12: 955278.926 ops/s
# Warmup Iteration  13: 940608.134 ops/s
# Warmup Iteration  14: 954362.341 ops/s
# Warmup Iteration  15: 955933.930 ops/s
# Warmup Iteration  16: 957105.608 ops/s
# Warmup Iteration  17: 997404.000 ops/s
# Warmup Iteration  18: 1014843.446 ops/s
# Warmup Iteration  19: 1015735.962 ops/s
# Warmup Iteration  20: 1016305.258 ops/s
# Warmup Iteration  21: 1014436.158 ops/s
# Warmup Iteration  22: 1000482.629 ops/s
# Warmup Iteration  23: 1008917.510 ops/s
# Warmup Iteration  24: 1011980.826 ops/s
# Warmup Iteration  25: 1004307.712 ops/s
# Warmup Iteration  26: 1007241.568 ops/s
# Warmup Iteration  27: 1013679.844 ops/s
# Warmup Iteration  28: 1010569.129 ops/s
# Warmup Iteration  29: 1014421.259 ops/s
# Warmup Iteration  30: 1013335.792 ops/s
Iteration   1: 1012974.602 ops/s
Iteration   2: 1005584.140 ops/s
Iteration   3: 1011734.833 ops/s
Iteration   4: 1017846.086 ops/s
Iteration   5: 1016415.604 ops/s
Iteration   6: 1012667.632 ops/s
Iteration   7: 1008636.957 ops/s
Iteration   8: 1013847.171 ops/s
Iteration   9: 1008270.724 ops/s
Iteration  10: 1002083.820 ops/s
Iteration  11: 1011633.291 ops/s
Iteration  12: 1013520.082 ops/s
Iteration  13: 1010934.503 ops/s
Iteration  14: 1013295.317 ops/s
Iteration  15: 1018033.256 ops/s
Iteration  16: 1011938.463 ops/s
Iteration  17: 998832.380 ops/s
Iteration  18: 1013745.423 ops/s
Iteration  19: 996450.107 ops/s
Iteration  20: 1013177.650 ops/s
Iteration  21: 1011635.909 ops/s
Iteration  22: 1005928.267 ops/s
Iteration  23: 1013562.306 ops/s
Iteration  24: 1014097.703 ops/s
Iteration  25: 1018589.022 ops/s
Iteration  26: 1009863.458 ops/s
Iteration  27: 1013934.732 ops/s
Iteration  28: 1008609.555 ops/s
Iteration  29: 1011866.727 ops/s
Iteration  30: 1009557.090 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getOnly_empty_throws":
  1010975.560 ±(99.9%) 3433.956 ops/s [Average]
  (min, avg, max) = (996450.107, 1010975.560, 1018589.022), stdev = 5139.784
  CI (99.9%): [1007541.605, 1014409.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  1010975.560 ± 3433.956  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661963.258 ops/s
# Warmup Iteration   2: 731093.937 ops/s
# Warmup Iteration   3: 958960.586 ops/s
# Warmup Iteration   4: 964395.982 ops/s
# Warmup Iteration   5: 951420.053 ops/s
# Warmup Iteration   6: 959810.409 ops/s
# Warmup Iteration   7: 960659.507 ops/s
# Warmup Iteration   8: 961217.285 ops/s
# Warmup Iteration   9: 956401.267 ops/s
# Warmup Iteration  10: 871439.549 ops/s
# Warmup Iteration  11: 891140.298 ops/s
# Warmup Iteration  12: 964532.620 ops/s
# Warmup Iteration  13: 959381.225 ops/s
# Warmup Iteration  14: 963572.186 ops/s
# Warmup Iteration  15: 960597.790 ops/s
# Warmup Iteration  16: 966052.006 ops/s
# Warmup Iteration  17: 1023273.471 ops/s
# Warmup Iteration  18: 1017160.684 ops/s
# Warmup Iteration  19: 1009835.563 ops/s
# Warmup Iteration  20: 1020727.351 ops/s
# Warmup Iteration  21: 1015216.132 ops/s
# Warmup Iteration  22: 1010910.053 ops/s
# Warmup Iteration  23: 1013735.085 ops/s
# Warmup Iteration  24: 1011762.427 ops/s
# Warmup Iteration  25: 1020195.905 ops/s
# Warmup Iteration  26: 1009517.285 ops/s
# Warmup Iteration  27: 1016100.380 ops/s
# Warmup Iteration  28: 1012615.874 ops/s
# Warmup Iteration  29: 990716.057 ops/s
# Warmup Iteration  30: 1018839.498 ops/s
Iteration   1: 1014571.843 ops/s
Iteration   2: 1018487.385 ops/s
Iteration   3: 1017037.449 ops/s
Iteration   4: 1017829.618 ops/s
Iteration   5: 1018172.899 ops/s
Iteration   6: 1014060.026 ops/s
Iteration   7: 1013202.137 ops/s
Iteration   8: 1018175.822 ops/s
Iteration   9: 1021510.668 ops/s
Iteration  10: 1024425.226 ops/s
Iteration  11: 1016038.368 ops/s
Iteration  12: 1023567.894 ops/s
Iteration  13: 1003545.315 ops/s
Iteration  14: 1018663.478 ops/s
Iteration  15: 1017691.623 ops/s
Iteration  16: 1025663.778 ops/s
Iteration  17: 1004183.942 ops/s
Iteration  18: 1002255.821 ops/s
Iteration  19: 1018275.301 ops/s
Iteration  20: 1013278.406 ops/s
Iteration  21: 1018853.970 ops/s
Iteration  22: 1023833.208 ops/s
Iteration  23: 1008632.022 ops/s
Iteration  24: 1011897.138 ops/s
Iteration  25: 1009959.049 ops/s
Iteration  26: 1011591.250 ops/s
Iteration  27: 1012924.164 ops/s
Iteration  28: 1016518.866 ops/s
Iteration  29: 998513.068 ops/s
Iteration  30: 1016514.265 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  1014995.800 ±(99.9%) 4428.256 ops/s [Average]
  (min, avg, max) = (998513.068, 1014995.800, 1025663.778), stdev = 6628.005
  CI (99.9%): [1010567.544, 1019424.056] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  1014995.800 ± 4428.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6346120.000 ops/s
# Warmup Iteration   2: 13306748.727 ops/s
# Warmup Iteration   3: 11140083.245 ops/s
# Warmup Iteration   4: 13213098.336 ops/s
# Warmup Iteration   5: 13195462.833 ops/s
# Warmup Iteration   6: 13272996.822 ops/s
# Warmup Iteration   7: 13210685.070 ops/s
# Warmup Iteration   8: 13293174.114 ops/s
# Warmup Iteration   9: 13052155.627 ops/s
# Warmup Iteration  10: 13302012.310 ops/s
# Warmup Iteration  11: 13269687.454 ops/s
# Warmup Iteration  12: 13297626.765 ops/s
# Warmup Iteration  13: 13282417.772 ops/s
# Warmup Iteration  14: 13095822.264 ops/s
# Warmup Iteration  15: 13215601.714 ops/s
# Warmup Iteration  16: 13194773.429 ops/s
# Warmup Iteration  17: 13299184.906 ops/s
# Warmup Iteration  18: 13371847.369 ops/s
# Warmup Iteration  19: 13322124.299 ops/s
# Warmup Iteration  20: 13272890.126 ops/s
# Warmup Iteration  21: 13306415.047 ops/s
# Warmup Iteration  22: 13297269.875 ops/s
# Warmup Iteration  23: 13318367.819 ops/s
# Warmup Iteration  24: 13253916.057 ops/s
# Warmup Iteration  25: 13220113.903 ops/s
# Warmup Iteration  26: 13268795.438 ops/s
# Warmup Iteration  27: 13277408.094 ops/s
# Warmup Iteration  28: 13247566.166 ops/s
# Warmup Iteration  29: 13225279.003 ops/s
# Warmup Iteration  30: 13194300.066 ops/s
Iteration   1: 13287760.338 ops/s
Iteration   2: 13262724.360 ops/s
Iteration   3: 13372998.570 ops/s
Iteration   4: 13296952.718 ops/s
Iteration   5: 13302734.309 ops/s
Iteration   6: 13360191.072 ops/s
Iteration   7: 13261288.094 ops/s
Iteration   8: 13350023.951 ops/s
Iteration   9: 13286970.218 ops/s
Iteration  10: 13156899.737 ops/s
Iteration  11: 13258154.582 ops/s
Iteration  12: 13328575.984 ops/s
Iteration  13: 13244411.120 ops/s
Iteration  14: 13295136.516 ops/s
Iteration  15: 13253256.999 ops/s
Iteration  16: 13241516.055 ops/s
Iteration  17: 13267510.608 ops/s
Iteration  18: 13219587.197 ops/s
Iteration  19: 13223611.780 ops/s
Iteration  20: 13340468.547 ops/s
Iteration  21: 13111305.608 ops/s
Iteration  22: 13232061.222 ops/s
Iteration  23: 13346248.559 ops/s
Iteration  24: 13377547.834 ops/s
Iteration  25: 13242163.710 ops/s
Iteration  26: 13072409.165 ops/s
Iteration  27: 13251914.132 ops/s
Iteration  28: 13023588.607 ops/s
Iteration  29: 13250680.097 ops/s
Iteration  30: 12942901.491 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException":
  13248719.773 ±(99.9%) 67354.117 ops/s [Average]
  (min, avg, max) = (12942901.491, 13248719.773, 13377547.834), stdev = 100812.479
  CI (99.9%): [13181365.656, 13316073.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException  thrpt   30  13248719.773 ± 67354.117  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getWithIndexOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getWithIndexOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 610656.836 ops/s
# Warmup Iteration   2: 648739.191 ops/s
# Warmup Iteration   3: 862732.048 ops/s
# Warmup Iteration   4: 868886.853 ops/s
# Warmup Iteration   5: 867371.880 ops/s
# Warmup Iteration   6: 868061.932 ops/s
# Warmup Iteration   7: 865674.441 ops/s
# Warmup Iteration   8: 862608.423 ops/s
# Warmup Iteration   9: 867200.014 ops/s
# Warmup Iteration  10: 869563.120 ops/s
# Warmup Iteration  11: 724635.998 ops/s
# Warmup Iteration  12: 869681.894 ops/s
# Warmup Iteration  13: 868211.293 ops/s
# Warmup Iteration  14: 871382.903 ops/s
# Warmup Iteration  15: 868674.888 ops/s
# Warmup Iteration  16: 862932.458 ops/s
# Warmup Iteration  17: 917532.550 ops/s
# Warmup Iteration  18: 914705.616 ops/s
# Warmup Iteration  19: 920134.364 ops/s
# Warmup Iteration  20: 919406.162 ops/s
# Warmup Iteration  21: 917728.044 ops/s
# Warmup Iteration  22: 922172.843 ops/s
# Warmup Iteration  23: 918881.360 ops/s
# Warmup Iteration  24: 921523.432 ops/s
# Warmup Iteration  25: 913872.982 ops/s
# Warmup Iteration  26: 919920.150 ops/s
# Warmup Iteration  27: 920898.857 ops/s
# Warmup Iteration  28: 920766.745 ops/s
# Warmup Iteration  29: 922435.644 ops/s
# Warmup Iteration  30: 922856.904 ops/s
Iteration   1: 921285.658 ops/s
Iteration   2: 908252.443 ops/s
Iteration   3: 918923.160 ops/s
Iteration   4: 914437.826 ops/s
Iteration   5: 912558.763 ops/s
Iteration   6: 905511.337 ops/s
Iteration   7: 918181.744 ops/s
Iteration   8: 913770.753 ops/s
Iteration   9: 891485.935 ops/s
Iteration  10: 919462.628 ops/s
Iteration  11: 920134.892 ops/s
Iteration  12: 901962.730 ops/s
Iteration  13: 921345.610 ops/s
Iteration  14: 921197.600 ops/s
Iteration  15: 921180.350 ops/s
Iteration  16: 918619.738 ops/s
Iteration  17: 916339.045 ops/s
Iteration  18: 911381.192 ops/s
Iteration  19: 923399.690 ops/s
Iteration  20: 923184.667 ops/s
Iteration  21: 919592.237 ops/s
Iteration  22: 921230.319 ops/s
Iteration  23: 919383.236 ops/s
Iteration  24: 920369.114 ops/s
Iteration  25: 919801.166 ops/s
Iteration  26: 918860.685 ops/s
Iteration  27: 913044.271 ops/s
Iteration  28: 923744.746 ops/s
Iteration  29: 924720.004 ops/s
Iteration  30: 904789.408 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_getWithIndexOutOfBoundsException":
  916271.698 ±(99.9%) 5018.693 ops/s [Average]
  (min, avg, max) = (891485.935, 916271.698, 924720.004), stdev = 7511.745
  CI (99.9%): [911253.005, 921290.392] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_getWithIndexOutOfBoundsException  thrpt   30  916271.698 ± 5018.693  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 279789.313 ops/s
# Warmup Iteration   2: 497289.543 ops/s
# Warmup Iteration   3: 565998.456 ops/s
# Warmup Iteration   4: 567230.389 ops/s
# Warmup Iteration   5: 565528.360 ops/s
# Warmup Iteration   6: 470860.167 ops/s
# Warmup Iteration   7: 566322.543 ops/s
# Warmup Iteration   8: 564683.585 ops/s
# Warmup Iteration   9: 566427.470 ops/s
# Warmup Iteration  10: 564386.796 ops/s
# Warmup Iteration  11: 566375.240 ops/s
# Warmup Iteration  12: 567427.441 ops/s
# Warmup Iteration  13: 558084.048 ops/s
# Warmup Iteration  14: 561333.339 ops/s
# Warmup Iteration  15: 566735.170 ops/s
# Warmup Iteration  16: 569670.569 ops/s
# Warmup Iteration  17: 566307.479 ops/s
# Warmup Iteration  18: 562794.540 ops/s
# Warmup Iteration  19: 565903.106 ops/s
# Warmup Iteration  20: 564759.293 ops/s
# Warmup Iteration  21: 565690.611 ops/s
# Warmup Iteration  22: 567915.849 ops/s
# Warmup Iteration  23: 567148.198 ops/s
# Warmup Iteration  24: 565087.679 ops/s
# Warmup Iteration  25: 566747.894 ops/s
# Warmup Iteration  26: 566731.767 ops/s
# Warmup Iteration  27: 560171.463 ops/s
# Warmup Iteration  28: 567421.234 ops/s
# Warmup Iteration  29: 567569.461 ops/s
# Warmup Iteration  30: 567047.058 ops/s
Iteration   1: 564322.590 ops/s
Iteration   2: 566763.557 ops/s
Iteration   3: 567727.678 ops/s
Iteration   4: 567604.280 ops/s
Iteration   5: 566636.556 ops/s
Iteration   6: 565233.989 ops/s
Iteration   7: 565097.902 ops/s
Iteration   8: 566462.189 ops/s
Iteration   9: 566003.680 ops/s
Iteration  10: 559525.253 ops/s
Iteration  11: 556033.470 ops/s
Iteration  12: 568742.265 ops/s
Iteration  13: 561114.432 ops/s
Iteration  14: 557909.999 ops/s
Iteration  15: 566734.204 ops/s
Iteration  16: 568633.058 ops/s
Iteration  17: 567177.622 ops/s
Iteration  18: 558457.797 ops/s
Iteration  19: 564793.482 ops/s
Iteration  20: 566999.947 ops/s
Iteration  21: 567403.386 ops/s
Iteration  22: 555498.797 ops/s
Iteration  23: 566605.623 ops/s
Iteration  24: 557662.773 ops/s
Iteration  25: 567001.505 ops/s
Iteration  26: 566931.586 ops/s
Iteration  27: 567958.241 ops/s
Iteration  28: 568517.638 ops/s
Iteration  29: 565718.433 ops/s
Iteration  30: 568095.171 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupBy":
  564778.903 ±(99.9%) 2693.011 ops/s [Average]
  (min, avg, max) = (555498.797, 564778.903, 568742.265), stdev = 4030.772
  CI (99.9%): [562085.893, 567471.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_groupBy  thrpt   30  564778.903 ± 2693.011  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 121340.974 ops/s
# Warmup Iteration   2: 213104.949 ops/s
# Warmup Iteration   3: 254268.237 ops/s
# Warmup Iteration   4: 255575.122 ops/s
# Warmup Iteration   5: 253607.807 ops/s
# Warmup Iteration   6: 208034.192 ops/s
# Warmup Iteration   7: 256667.074 ops/s
# Warmup Iteration   8: 256400.592 ops/s
# Warmup Iteration   9: 253469.504 ops/s
# Warmup Iteration  10: 255256.005 ops/s
# Warmup Iteration  11: 256147.883 ops/s
# Warmup Iteration  12: 256368.985 ops/s
# Warmup Iteration  13: 256647.184 ops/s
# Warmup Iteration  14: 255945.182 ops/s
# Warmup Iteration  15: 255734.395 ops/s
# Warmup Iteration  16: 253555.741 ops/s
# Warmup Iteration  17: 255713.324 ops/s
# Warmup Iteration  18: 255953.979 ops/s
# Warmup Iteration  19: 255300.636 ops/s
# Warmup Iteration  20: 252869.138 ops/s
# Warmup Iteration  21: 253949.731 ops/s
# Warmup Iteration  22: 256995.351 ops/s
# Warmup Iteration  23: 255300.017 ops/s
# Warmup Iteration  24: 256515.422 ops/s
# Warmup Iteration  25: 256040.232 ops/s
# Warmup Iteration  26: 256290.282 ops/s
# Warmup Iteration  27: 255702.678 ops/s
# Warmup Iteration  28: 256086.128 ops/s
# Warmup Iteration  29: 256667.304 ops/s
# Warmup Iteration  30: 255975.903 ops/s
Iteration   1: 256961.682 ops/s
Iteration   2: 255872.179 ops/s
Iteration   3: 256704.118 ops/s
Iteration   4: 256689.291 ops/s
Iteration   5: 257001.208 ops/s
Iteration   6: 251379.562 ops/s
Iteration   7: 256126.835 ops/s
Iteration   8: 256345.080 ops/s
Iteration   9: 256744.644 ops/s
Iteration  10: 256776.598 ops/s
Iteration  11: 248882.417 ops/s
Iteration  12: 256812.473 ops/s
Iteration  13: 255683.387 ops/s
Iteration  14: 250904.596 ops/s
Iteration  15: 255524.217 ops/s
Iteration  16: 252268.292 ops/s
Iteration  17: 255320.611 ops/s
Iteration  18: 256175.316 ops/s
Iteration  19: 252235.648 ops/s
Iteration  20: 257083.181 ops/s
Iteration  21: 256731.876 ops/s
Iteration  22: 257375.858 ops/s
Iteration  23: 255804.626 ops/s
Iteration  24: 256149.593 ops/s
Iteration  25: 257182.865 ops/s
Iteration  26: 256576.122 ops/s
Iteration  27: 251569.676 ops/s
Iteration  28: 256337.720 ops/s
Iteration  29: 255924.416 ops/s
Iteration  30: 255960.020 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByEach":
  255370.137 ±(99.9%) 1493.919 ops/s [Average]
  (min, avg, max) = (248882.417, 255370.137, 257375.858), stdev = 2236.027
  CI (99.9%): [253876.218, 256864.055] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_groupByEach  thrpt   30  255370.137 ± 1493.919  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3074248.366 ops/s
# Warmup Iteration   2: 7290817.157 ops/s
# Warmup Iteration   3: 7295318.615 ops/s
# Warmup Iteration   4: 6067645.237 ops/s
# Warmup Iteration   5: 7345809.955 ops/s
# Warmup Iteration   6: 7220839.454 ops/s
# Warmup Iteration   7: 7348505.551 ops/s
# Warmup Iteration   8: 7240588.384 ops/s
# Warmup Iteration   9: 7374119.004 ops/s
# Warmup Iteration  10: 7383546.806 ops/s
# Warmup Iteration  11: 7346628.239 ops/s
# Warmup Iteration  12: 7382835.236 ops/s
# Warmup Iteration  13: 7355524.327 ops/s
# Warmup Iteration  14: 7388384.662 ops/s
# Warmup Iteration  15: 7291579.443 ops/s
# Warmup Iteration  16: 7345175.624 ops/s
# Warmup Iteration  17: 7360348.370 ops/s
# Warmup Iteration  18: 7380662.417 ops/s
# Warmup Iteration  19: 7346999.298 ops/s
# Warmup Iteration  20: 7369118.638 ops/s
# Warmup Iteration  21: 7344337.007 ops/s
# Warmup Iteration  22: 7365866.282 ops/s
# Warmup Iteration  23: 7239369.089 ops/s
# Warmup Iteration  24: 7381071.273 ops/s
# Warmup Iteration  25: 7364197.327 ops/s
# Warmup Iteration  26: 7324763.690 ops/s
# Warmup Iteration  27: 7292718.180 ops/s
# Warmup Iteration  28: 7311648.963 ops/s
# Warmup Iteration  29: 7218166.499 ops/s
# Warmup Iteration  30: 7356054.110 ops/s
Iteration   1: 7356753.640 ops/s
Iteration   2: 7254556.783 ops/s
Iteration   3: 7382379.109 ops/s
Iteration   4: 7274806.050 ops/s
Iteration   5: 7359591.346 ops/s
Iteration   6: 7333327.888 ops/s
Iteration   7: 7370798.256 ops/s
Iteration   8: 7402269.015 ops/s
Iteration   9: 7415081.679 ops/s
Iteration  10: 7370764.776 ops/s
Iteration  11: 7326503.497 ops/s
Iteration  12: 7359826.923 ops/s
Iteration  13: 7340550.212 ops/s
Iteration  14: 7367815.947 ops/s
Iteration  15: 7369271.055 ops/s
Iteration  16: 7379152.976 ops/s
Iteration  17: 7403773.153 ops/s
Iteration  18: 7402368.609 ops/s
Iteration  19: 7351193.549 ops/s
Iteration  20: 7389642.509 ops/s
Iteration  21: 7332689.305 ops/s
Iteration  22: 7230937.851 ops/s
Iteration  23: 7382332.400 ops/s
Iteration  24: 7340896.504 ops/s
Iteration  25: 7342286.499 ops/s
Iteration  26: 7376505.868 ops/s
Iteration  27: 7233173.769 ops/s
Iteration  28: 7357436.019 ops/s
Iteration  29: 7394465.787 ops/s
Iteration  30: 7367088.347 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey":
  7352274.644 ±(99.9%) 31806.754 ops/s [Average]
  (min, avg, max) = (7230937.851, 7352274.644, 7415081.679), stdev = 47606.855
  CI (99.9%): [7320467.890, 7384081.398] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  7352274.644 ± 31806.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1864597.554 ops/s
# Warmup Iteration   2: 4116171.000 ops/s
# Warmup Iteration   3: 4185843.886 ops/s
# Warmup Iteration   4: 3706717.531 ops/s
# Warmup Iteration   5: 3989299.084 ops/s
# Warmup Iteration   6: 4199879.014 ops/s
# Warmup Iteration   7: 4198763.886 ops/s
# Warmup Iteration   8: 4192572.160 ops/s
# Warmup Iteration   9: 4211590.443 ops/s
# Warmup Iteration  10: 4206144.150 ops/s
# Warmup Iteration  11: 4188392.684 ops/s
# Warmup Iteration  12: 4164927.638 ops/s
# Warmup Iteration  13: 4179712.514 ops/s
# Warmup Iteration  14: 4160806.574 ops/s
# Warmup Iteration  15: 4154912.488 ops/s
# Warmup Iteration  16: 4201076.990 ops/s
# Warmup Iteration  17: 4203632.247 ops/s
# Warmup Iteration  18: 4209643.187 ops/s
# Warmup Iteration  19: 4188039.337 ops/s
# Warmup Iteration  20: 4227582.973 ops/s
# Warmup Iteration  21: 4179838.913 ops/s
# Warmup Iteration  22: 4174378.681 ops/s
# Warmup Iteration  23: 4222755.739 ops/s
# Warmup Iteration  24: 4212290.676 ops/s
# Warmup Iteration  25: 4221057.410 ops/s
# Warmup Iteration  26: 4216985.504 ops/s
# Warmup Iteration  27: 4222810.416 ops/s
# Warmup Iteration  28: 4217415.879 ops/s
# Warmup Iteration  29: 4213103.992 ops/s
# Warmup Iteration  30: 4180264.176 ops/s
Iteration   1: 4223631.996 ops/s
Iteration   2: 4147452.064 ops/s
Iteration   3: 4214369.281 ops/s
Iteration   4: 4141535.099 ops/s
Iteration   5: 4214445.163 ops/s
Iteration   6: 4170441.608 ops/s
Iteration   7: 4208825.083 ops/s
Iteration   8: 4209275.473 ops/s
Iteration   9: 4221942.776 ops/s
Iteration  10: 4157210.435 ops/s
Iteration  11: 4209887.757 ops/s
Iteration  12: 4198565.088 ops/s
Iteration  13: 4214946.630 ops/s
Iteration  14: 4205477.508 ops/s
Iteration  15: 4204285.852 ops/s
Iteration  16: 4116187.383 ops/s
Iteration  17: 4212907.369 ops/s
Iteration  18: 4216725.168 ops/s
Iteration  19: 4211520.774 ops/s
Iteration  20: 4194537.394 ops/s
Iteration  21: 4085795.112 ops/s
Iteration  22: 4158562.473 ops/s
Iteration  23: 4215656.506 ops/s
Iteration  24: 4192327.865 ops/s
Iteration  25: 4214132.259 ops/s
Iteration  26: 4172557.880 ops/s
Iteration  27: 4228039.582 ops/s
Iteration  28: 4212339.964 ops/s
Iteration  29: 4216078.462 ops/s
Iteration  30: 4205308.357 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey_target":
  4193165.612 ±(99.9%) 22993.538 ops/s [Average]
  (min, avg, max) = (4085795.112, 4193165.612, 4228039.582), stdev = 34415.648
  CI (99.9%): [4170172.074, 4216159.150] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  4193165.612 ± 22993.538  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 496376.973 ops/s
# Warmup Iteration   2: 643675.458 ops/s
# Warmup Iteration   3: 807691.783 ops/s
# Warmup Iteration   4: 810378.729 ops/s
# Warmup Iteration   5: 807765.876 ops/s
# Warmup Iteration   6: 813366.006 ops/s
# Warmup Iteration   7: 810033.314 ops/s
# Warmup Iteration   8: 755278.157 ops/s
# Warmup Iteration   9: 731036.761 ops/s
# Warmup Iteration  10: 807933.051 ops/s
# Warmup Iteration  11: 804518.636 ops/s
# Warmup Iteration  12: 812182.873 ops/s
# Warmup Iteration  13: 806374.185 ops/s
# Warmup Iteration  14: 808693.042 ops/s
# Warmup Iteration  15: 810735.272 ops/s
# Warmup Iteration  16: 800892.325 ops/s
# Warmup Iteration  17: 849428.424 ops/s
# Warmup Iteration  18: 852536.379 ops/s
# Warmup Iteration  19: 845961.682 ops/s
# Warmup Iteration  20: 853601.793 ops/s
# Warmup Iteration  21: 849950.383 ops/s
# Warmup Iteration  22: 844185.227 ops/s
# Warmup Iteration  23: 840214.936 ops/s
# Warmup Iteration  24: 840449.172 ops/s
# Warmup Iteration  25: 847039.128 ops/s
# Warmup Iteration  26: 851937.763 ops/s
# Warmup Iteration  27: 853513.741 ops/s
# Warmup Iteration  28: 849848.749 ops/s
# Warmup Iteration  29: 846595.459 ops/s
# Warmup Iteration  30: 847223.783 ops/s
Iteration   1: 850260.861 ops/s
Iteration   2: 852297.232 ops/s
Iteration   3: 839489.831 ops/s
Iteration   4: 837604.709 ops/s
Iteration   5: 845723.846 ops/s
Iteration   6: 849055.481 ops/s
Iteration   7: 854137.629 ops/s
Iteration   8: 833398.952 ops/s
Iteration   9: 850353.322 ops/s
Iteration  10: 835517.694 ops/s
Iteration  11: 849221.574 ops/s
Iteration  12: 853648.893 ops/s
Iteration  13: 848291.156 ops/s
Iteration  14: 848462.226 ops/s
Iteration  15: 849640.873 ops/s
Iteration  16: 837108.704 ops/s
Iteration  17: 844675.794 ops/s
Iteration  18: 846381.766 ops/s
Iteration  19: 839011.719 ops/s
Iteration  20: 849532.544 ops/s
Iteration  21: 837135.850 ops/s
Iteration  22: 847577.513 ops/s
Iteration  23: 847026.667 ops/s
Iteration  24: 847809.703 ops/s
Iteration  25: 837109.856 ops/s
Iteration  26: 854607.970 ops/s
Iteration  27: 847735.627 ops/s
Iteration  28: 848076.269 ops/s
Iteration  29: 838894.074 ops/s
Iteration  30: 848359.650 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  845604.933 ±(99.9%) 4052.347 ops/s [Average]
  (min, avg, max) = (833398.952, 845604.933, 854607.970), stdev = 6065.363
  CI (99.9%): [841552.586, 849657.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  845604.933 ± 4052.347  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 525389.956 ops/s
# Warmup Iteration   2: 633150.614 ops/s
# Warmup Iteration   3: 808884.226 ops/s
# Warmup Iteration   4: 803128.350 ops/s
# Warmup Iteration   5: 805617.797 ops/s
# Warmup Iteration   6: 809698.033 ops/s
# Warmup Iteration   7: 801564.932 ops/s
# Warmup Iteration   8: 809811.012 ops/s
# Warmup Iteration   9: 695025.527 ops/s
# Warmup Iteration  10: 789804.760 ops/s
# Warmup Iteration  11: 808059.261 ops/s
# Warmup Iteration  12: 806767.361 ops/s
# Warmup Iteration  13: 807909.741 ops/s
# Warmup Iteration  14: 810643.980 ops/s
# Warmup Iteration  15: 810341.852 ops/s
# Warmup Iteration  16: 799693.427 ops/s
# Warmup Iteration  17: 848432.030 ops/s
# Warmup Iteration  18: 849920.259 ops/s
# Warmup Iteration  19: 852215.615 ops/s
# Warmup Iteration  20: 842617.967 ops/s
# Warmup Iteration  21: 849244.691 ops/s
# Warmup Iteration  22: 846488.377 ops/s
# Warmup Iteration  23: 844000.062 ops/s
# Warmup Iteration  24: 848177.300 ops/s
# Warmup Iteration  25: 845140.018 ops/s
# Warmup Iteration  26: 836892.406 ops/s
# Warmup Iteration  27: 843411.612 ops/s
# Warmup Iteration  28: 848205.673 ops/s
# Warmup Iteration  29: 847424.384 ops/s
# Warmup Iteration  30: 849242.845 ops/s
Iteration   1: 848551.821 ops/s
Iteration   2: 832796.429 ops/s
Iteration   3: 823809.530 ops/s
Iteration   4: 852623.326 ops/s
Iteration   5: 823318.005 ops/s
Iteration   6: 837300.514 ops/s
Iteration   7: 842057.360 ops/s
Iteration   8: 848396.180 ops/s
Iteration   9: 845585.001 ops/s
Iteration  10: 849884.070 ops/s
Iteration  11: 844775.643 ops/s
Iteration  12: 847528.549 ops/s
Iteration  13: 850852.813 ops/s
Iteration  14: 837443.301 ops/s
Iteration  15: 831694.782 ops/s
Iteration  16: 846593.996 ops/s
Iteration  17: 850198.260 ops/s
Iteration  18: 850240.082 ops/s
Iteration  19: 839236.514 ops/s
Iteration  20: 849535.402 ops/s
Iteration  21: 848736.376 ops/s
Iteration  22: 849849.857 ops/s
Iteration  23: 845539.405 ops/s
Iteration  24: 845917.312 ops/s
Iteration  25: 849466.033 ops/s
Iteration  26: 844050.624 ops/s
Iteration  27: 847337.070 ops/s
Iteration  28: 847378.441 ops/s
Iteration  29: 850919.483 ops/s
Iteration  30: 849413.752 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  844367.664 ±(99.9%) 5176.995 ops/s [Average]
  (min, avg, max) = (823318.005, 844367.664, 852623.326), stdev = 7748.683
  CI (99.9%): [839190.669, 849544.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  844367.664 ± 5176.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2133811.114 ops/s
# Warmup Iteration   2: 4402435.374 ops/s
# Warmup Iteration   3: 4465903.265 ops/s
# Warmup Iteration   4: 3779095.618 ops/s
# Warmup Iteration   5: 4467180.904 ops/s
# Warmup Iteration   6: 4441836.077 ops/s
# Warmup Iteration   7: 4438293.769 ops/s
# Warmup Iteration   8: 4456933.206 ops/s
# Warmup Iteration   9: 4469011.440 ops/s
# Warmup Iteration  10: 4473959.734 ops/s
# Warmup Iteration  11: 4473614.940 ops/s
# Warmup Iteration  12: 4465616.135 ops/s
# Warmup Iteration  13: 4470887.615 ops/s
# Warmup Iteration  14: 4463350.563 ops/s
# Warmup Iteration  15: 4482210.385 ops/s
# Warmup Iteration  16: 4477365.202 ops/s
# Warmup Iteration  17: 4474325.161 ops/s
# Warmup Iteration  18: 4460157.499 ops/s
# Warmup Iteration  19: 4436527.441 ops/s
# Warmup Iteration  20: 4461643.437 ops/s
# Warmup Iteration  21: 4409583.021 ops/s
# Warmup Iteration  22: 4456637.923 ops/s
# Warmup Iteration  23: 4469458.930 ops/s
# Warmup Iteration  24: 4429309.704 ops/s
# Warmup Iteration  25: 4430037.506 ops/s
# Warmup Iteration  26: 4436619.079 ops/s
# Warmup Iteration  27: 4471575.575 ops/s
# Warmup Iteration  28: 4444823.655 ops/s
# Warmup Iteration  29: 4447193.395 ops/s
# Warmup Iteration  30: 4448099.927 ops/s
Iteration   1: 4429603.842 ops/s
Iteration   2: 4471785.268 ops/s
Iteration   3: 4467861.277 ops/s
Iteration   4: 4479985.013 ops/s
Iteration   5: 4467142.273 ops/s
Iteration   6: 4468534.943 ops/s
Iteration   7: 4453499.727 ops/s
Iteration   8: 4386124.823 ops/s
Iteration   9: 4466841.273 ops/s
Iteration  10: 4445408.514 ops/s
Iteration  11: 4486839.093 ops/s
Iteration  12: 4393395.788 ops/s
Iteration  13: 4480232.654 ops/s
Iteration  14: 4472722.390 ops/s
Iteration  15: 4396586.789 ops/s
Iteration  16: 4453038.087 ops/s
Iteration  17: 4471907.146 ops/s
Iteration  18: 4468216.157 ops/s
Iteration  19: 4486844.747 ops/s
Iteration  20: 4469222.688 ops/s
Iteration  21: 4446095.202 ops/s
Iteration  22: 4443327.566 ops/s
Iteration  23: 4382257.028 ops/s
Iteration  24: 4391498.077 ops/s
Iteration  25: 4466569.121 ops/s
Iteration  26: 4471651.880 ops/s
Iteration  27: 4413671.913 ops/s
Iteration  28: 4405827.684 ops/s
Iteration  29: 4406409.895 ops/s
Iteration  30: 4416506.548 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_indexOf":
  4445320.247 ±(99.9%) 22532.869 ops/s [Average]
  (min, avg, max) = (4382257.028, 4445320.247, 4486844.747), stdev = 33726.141
  CI (99.9%): [4422787.378, 4467853.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_indexOf  thrpt   30  4445320.247 ± 22532.869  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6176734.961 ops/s
# Warmup Iteration   2: 12586496.955 ops/s
# Warmup Iteration   3: 11801889.378 ops/s
# Warmup Iteration   4: 11513095.111 ops/s
# Warmup Iteration   5: 12695058.405 ops/s
# Warmup Iteration   6: 12631079.228 ops/s
# Warmup Iteration   7: 12679542.284 ops/s
# Warmup Iteration   8: 12744166.355 ops/s
# Warmup Iteration   9: 12695998.152 ops/s
# Warmup Iteration  10: 12583892.711 ops/s
# Warmup Iteration  11: 12635227.740 ops/s
# Warmup Iteration  12: 12726240.608 ops/s
# Warmup Iteration  13: 12678051.173 ops/s
# Warmup Iteration  14: 12724337.447 ops/s
# Warmup Iteration  15: 12693301.052 ops/s
# Warmup Iteration  16: 12713696.374 ops/s
# Warmup Iteration  17: 12705825.034 ops/s
# Warmup Iteration  18: 12537592.764 ops/s
# Warmup Iteration  19: 12742880.948 ops/s
# Warmup Iteration  20: 12605873.602 ops/s
# Warmup Iteration  21: 12663797.175 ops/s
# Warmup Iteration  22: 12615374.550 ops/s
# Warmup Iteration  23: 12532731.276 ops/s
# Warmup Iteration  24: 12701534.036 ops/s
# Warmup Iteration  25: 12613108.384 ops/s
# Warmup Iteration  26: 12693125.991 ops/s
# Warmup Iteration  27: 12691985.546 ops/s
# Warmup Iteration  28: 12704570.290 ops/s
# Warmup Iteration  29: 12724158.622 ops/s
# Warmup Iteration  30: 12719869.491 ops/s
Iteration   1: 12603451.755 ops/s
Iteration   2: 12719625.615 ops/s
Iteration   3: 12689750.148 ops/s
Iteration   4: 12514944.000 ops/s
Iteration   5: 12645808.128 ops/s
Iteration   6: 12701740.044 ops/s
Iteration   7: 12743813.449 ops/s
Iteration   8: 12709400.563 ops/s
Iteration   9: 12778946.715 ops/s
Iteration  10: 12732618.168 ops/s
Iteration  11: 12782794.447 ops/s
Iteration  12: 12759479.531 ops/s
Iteration  13: 12690743.025 ops/s
Iteration  14: 12727521.748 ops/s
Iteration  15: 12728628.641 ops/s
Iteration  16: 12726403.105 ops/s
Iteration  17: 12703588.362 ops/s
Iteration  18: 12771685.845 ops/s
Iteration  19: 12748665.241 ops/s
Iteration  20: 12715099.198 ops/s
Iteration  21: 12684542.970 ops/s
Iteration  22: 12519765.467 ops/s
Iteration  23: 12697375.117 ops/s
Iteration  24: 12764091.799 ops/s
Iteration  25: 12769126.956 ops/s
Iteration  26: 12690839.870 ops/s
Iteration  27: 12789715.800 ops/s
Iteration  28: 12555317.573 ops/s
Iteration  29: 12759341.957 ops/s
Iteration  30: 12753000.375 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectInto":
  12705927.520 ±(99.9%) 48490.598 ops/s [Average]
  (min, avg, max) = (12514944.000, 12705927.520, 12789715.800), stdev = 72578.450
  CI (99.9%): [12657436.922, 12754418.119] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_injectInto  thrpt   30  12705927.520 ± 48490.598  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4792914.046 ops/s
# Warmup Iteration   2: 9868025.898 ops/s
# Warmup Iteration   3: 9945128.200 ops/s
# Warmup Iteration   4: 8283486.920 ops/s
# Warmup Iteration   5: 9961839.805 ops/s
# Warmup Iteration   6: 9940861.900 ops/s
# Warmup Iteration   7: 9924158.258 ops/s
# Warmup Iteration   8: 9929034.846 ops/s
# Warmup Iteration   9: 9891015.161 ops/s
# Warmup Iteration  10: 9943404.823 ops/s
# Warmup Iteration  11: 9774788.797 ops/s
# Warmup Iteration  12: 9933038.488 ops/s
# Warmup Iteration  13: 9846939.770 ops/s
# Warmup Iteration  14: 9924739.904 ops/s
# Warmup Iteration  15: 9934104.204 ops/s
# Warmup Iteration  16: 9858368.777 ops/s
# Warmup Iteration  17: 9906011.061 ops/s
# Warmup Iteration  18: 9953855.064 ops/s
# Warmup Iteration  19: 9944615.240 ops/s
# Warmup Iteration  20: 9947214.534 ops/s
# Warmup Iteration  21: 9806176.114 ops/s
# Warmup Iteration  22: 9896819.739 ops/s
# Warmup Iteration  23: 9743441.324 ops/s
# Warmup Iteration  24: 9918159.113 ops/s
# Warmup Iteration  25: 9962009.770 ops/s
# Warmup Iteration  26: 9908689.097 ops/s
# Warmup Iteration  27: 9881355.461 ops/s
# Warmup Iteration  28: 9917285.433 ops/s
# Warmup Iteration  29: 9864487.187 ops/s
# Warmup Iteration  30: 9937606.793 ops/s
Iteration   1: 9941873.219 ops/s
Iteration   2: 9753524.771 ops/s
Iteration   3: 9950761.170 ops/s
Iteration   4: 9883279.641 ops/s
Iteration   5: 9875432.708 ops/s
Iteration   6: 9782568.026 ops/s
Iteration   7: 9903871.235 ops/s
Iteration   8: 9925529.671 ops/s
Iteration   9: 9927393.797 ops/s
Iteration  10: 9879946.119 ops/s
Iteration  11: 9806306.118 ops/s
Iteration  12: 9730671.820 ops/s
Iteration  13: 9737647.647 ops/s
Iteration  14: 9965490.085 ops/s
Iteration  15: 9924442.098 ops/s
Iteration  16: 9902629.735 ops/s
Iteration  17: 9944179.040 ops/s
Iteration  18: 9922898.734 ops/s
Iteration  19: 9928259.715 ops/s
Iteration  20: 9946707.814 ops/s
Iteration  21: 9852838.399 ops/s
Iteration  22: 9848725.049 ops/s
Iteration  23: 9899310.340 ops/s
Iteration  24: 9943274.421 ops/s
Iteration  25: 9920374.056 ops/s
Iteration  26: 9941581.887 ops/s
Iteration  27: 9944511.695 ops/s
Iteration  28: 9918734.464 ops/s
Iteration  29: 9944664.214 ops/s
Iteration  30: 9753245.946 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoDouble":
  9886689.121 ±(99.9%) 47381.871 ops/s [Average]
  (min, avg, max) = (9730671.820, 9886689.121, 9965490.085), stdev = 70918.960
  CI (99.9%): [9839307.250, 9934070.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  9886689.121 ± 47381.871  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoDouble2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoDouble2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5831057.009 ops/s
# Warmup Iteration   2: 12026126.790 ops/s
# Warmup Iteration   3: 10291164.787 ops/s
# Warmup Iteration   4: 12200444.778 ops/s
# Warmup Iteration   5: 12055681.020 ops/s
# Warmup Iteration   6: 12195424.795 ops/s
# Warmup Iteration   7: 12089479.775 ops/s
# Warmup Iteration   8: 12197411.302 ops/s
# Warmup Iteration   9: 12097038.244 ops/s
# Warmup Iteration  10: 12191352.319 ops/s
# Warmup Iteration  11: 12208753.125 ops/s
# Warmup Iteration  12: 12230885.121 ops/s
# Warmup Iteration  13: 12100025.425 ops/s
# Warmup Iteration  14: 12120054.026 ops/s
# Warmup Iteration  15: 12223491.010 ops/s
# Warmup Iteration  16: 12240842.943 ops/s
# Warmup Iteration  17: 12213810.881 ops/s
# Warmup Iteration  18: 12261455.008 ops/s
# Warmup Iteration  19: 12220032.260 ops/s
# Warmup Iteration  20: 12242938.616 ops/s
# Warmup Iteration  21: 12266173.632 ops/s
# Warmup Iteration  22: 12284496.122 ops/s
# Warmup Iteration  23: 12238121.714 ops/s
# Warmup Iteration  24: 12188311.985 ops/s
# Warmup Iteration  25: 12283371.287 ops/s
# Warmup Iteration  26: 12224190.440 ops/s
# Warmup Iteration  27: 12218153.106 ops/s
# Warmup Iteration  28: 12240475.530 ops/s
# Warmup Iteration  29: 12198613.949 ops/s
# Warmup Iteration  30: 12295133.395 ops/s
Iteration   1: 12255673.359 ops/s
Iteration   2: 12228186.615 ops/s
Iteration   3: 12185101.951 ops/s
Iteration   4: 12141099.670 ops/s
Iteration   5: 12102920.508 ops/s
Iteration   6: 12141282.649 ops/s
Iteration   7: 11995732.359 ops/s
Iteration   8: 12274664.721 ops/s
Iteration   9: 12326786.906 ops/s
Iteration  10: 12003392.589 ops/s
Iteration  11: 12184193.287 ops/s
Iteration  12: 12248163.351 ops/s
Iteration  13: 12245984.651 ops/s
Iteration  14: 12084684.264 ops/s
Iteration  15: 12239010.852 ops/s
Iteration  16: 12248759.104 ops/s
Iteration  17: 12248917.839 ops/s
Iteration  18: 12219826.806 ops/s
Iteration  19: 12244498.749 ops/s
Iteration  20: 12253703.427 ops/s
Iteration  21: 12274944.608 ops/s
Iteration  22: 12135366.686 ops/s
Iteration  23: 12222978.054 ops/s
Iteration  24: 12231975.122 ops/s
Iteration  25: 12278545.254 ops/s
Iteration  26: 12080909.957 ops/s
Iteration  27: 12165657.214 ops/s
Iteration  28: 12181479.717 ops/s
Iteration  29: 12237263.356 ops/s
Iteration  30: 12270990.782 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoDouble2":
  12198423.147 ±(99.9%) 54304.781 ops/s [Average]
  (min, avg, max) = (11995732.359, 12198423.147, 12326786.906), stdev = 81280.846
  CI (99.9%): [12144118.366, 12252727.928] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_injectIntoDouble2  thrpt   30  12198423.147 ± 54304.781  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4738044.623 ops/s
# Warmup Iteration   2: 9882671.116 ops/s
# Warmup Iteration   3: 9941470.826 ops/s
# Warmup Iteration   4: 8359345.331 ops/s
# Warmup Iteration   5: 9960865.719 ops/s
# Warmup Iteration   6: 9880605.364 ops/s
# Warmup Iteration   7: 9954821.733 ops/s
# Warmup Iteration   8: 9913778.155 ops/s
# Warmup Iteration   9: 9931872.113 ops/s
# Warmup Iteration  10: 9955943.713 ops/s
# Warmup Iteration  11: 9972439.298 ops/s
# Warmup Iteration  12: 9954765.487 ops/s
# Warmup Iteration  13: 9951993.348 ops/s
# Warmup Iteration  14: 9922522.361 ops/s
# Warmup Iteration  15: 9931967.320 ops/s
# Warmup Iteration  16: 9919008.574 ops/s
# Warmup Iteration  17: 9841434.190 ops/s
# Warmup Iteration  18: 9833397.944 ops/s
# Warmup Iteration  19: 9895916.116 ops/s
# Warmup Iteration  20: 9937501.515 ops/s
# Warmup Iteration  21: 9888022.105 ops/s
# Warmup Iteration  22: 9834527.445 ops/s
# Warmup Iteration  23: 9920719.792 ops/s
# Warmup Iteration  24: 9813679.019 ops/s
# Warmup Iteration  25: 9955796.002 ops/s
# Warmup Iteration  26: 9858362.766 ops/s
# Warmup Iteration  27: 9862678.360 ops/s
# Warmup Iteration  28: 9939147.322 ops/s
# Warmup Iteration  29: 9919647.276 ops/s
# Warmup Iteration  30: 9883011.551 ops/s
Iteration   1: 9943868.057 ops/s
Iteration   2: 9882356.096 ops/s
Iteration   3: 9924535.555 ops/s
Iteration   4: 9930147.711 ops/s
Iteration   5: 9927451.990 ops/s
Iteration   6: 9812765.692 ops/s
Iteration   7: 9967449.687 ops/s
Iteration   8: 9995027.781 ops/s
Iteration   9: 9971357.887 ops/s
Iteration  10: 9812559.258 ops/s
Iteration  11: 9941003.990 ops/s
Iteration  12: 10005285.421 ops/s
Iteration  13: 9983665.897 ops/s
Iteration  14: 9947373.633 ops/s
Iteration  15: 9927634.670 ops/s
Iteration  16: 9984106.608 ops/s
Iteration  17: 9990229.373 ops/s
Iteration  18: 9938040.113 ops/s
Iteration  19: 9944704.442 ops/s
Iteration  20: 9809287.783 ops/s
Iteration  21: 9949558.941 ops/s
Iteration  22: 9842720.628 ops/s
Iteration  23: 9816376.502 ops/s
Iteration  24: 9931542.088 ops/s
Iteration  25: 9943502.514 ops/s
Iteration  26: 9969775.484 ops/s
Iteration  27: 9964567.534 ops/s
Iteration  28: 9954652.445 ops/s
Iteration  29: 9990972.941 ops/s
Iteration  30: 9816412.524 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoFloat":
  9927297.775 ±(99.9%) 40892.884 ops/s [Average]
  (min, avg, max) = (9809287.783, 9927297.775, 10005285.421), stdev = 61206.549
  CI (99.9%): [9886404.891, 9968190.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  9927297.775 ± 40892.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4779832.831 ops/s
# Warmup Iteration   2: 9980611.100 ops/s
# Warmup Iteration   3: 10021315.903 ops/s
# Warmup Iteration   4: 8399371.098 ops/s
# Warmup Iteration   5: 9956494.788 ops/s
# Warmup Iteration   6: 9978945.107 ops/s
# Warmup Iteration   7: 9949514.223 ops/s
# Warmup Iteration   8: 10018742.028 ops/s
# Warmup Iteration   9: 9990192.454 ops/s
# Warmup Iteration  10: 9942460.429 ops/s
# Warmup Iteration  11: 10015305.088 ops/s
# Warmup Iteration  12: 9998011.662 ops/s
# Warmup Iteration  13: 9999555.979 ops/s
# Warmup Iteration  14: 9829715.587 ops/s
# Warmup Iteration  15: 10000469.553 ops/s
# Warmup Iteration  16: 10018590.712 ops/s
# Warmup Iteration  17: 10039267.606 ops/s
# Warmup Iteration  18: 10032379.736 ops/s
# Warmup Iteration  19: 9972150.556 ops/s
# Warmup Iteration  20: 10048127.509 ops/s
# Warmup Iteration  21: 10037469.597 ops/s
# Warmup Iteration  22: 10034772.446 ops/s
# Warmup Iteration  23: 9955229.086 ops/s
# Warmup Iteration  24: 10043332.686 ops/s
# Warmup Iteration  25: 10007847.062 ops/s
# Warmup Iteration  26: 10039930.604 ops/s
# Warmup Iteration  27: 10036989.648 ops/s
# Warmup Iteration  28: 10020545.424 ops/s
# Warmup Iteration  29: 9836110.439 ops/s
# Warmup Iteration  30: 9951079.484 ops/s
Iteration   1: 9847970.889 ops/s
Iteration   2: 10036132.035 ops/s
Iteration   3: 10033644.268 ops/s
Iteration   4: 10015514.095 ops/s
Iteration   5: 10039870.738 ops/s
Iteration   6: 9864683.756 ops/s
Iteration   7: 10027678.737 ops/s
Iteration   8: 10028401.292 ops/s
Iteration   9: 10029089.309 ops/s
Iteration  10: 9863292.963 ops/s
Iteration  11: 10042635.094 ops/s
Iteration  12: 10070602.884 ops/s
Iteration  13: 10077201.806 ops/s
Iteration  14: 10068268.165 ops/s
Iteration  15: 10034582.201 ops/s
Iteration  16: 10000909.768 ops/s
Iteration  17: 10010876.001 ops/s
Iteration  18: 10040830.184 ops/s
Iteration  19: 10044992.473 ops/s
Iteration  20: 10092465.471 ops/s
Iteration  21: 10063808.443 ops/s
Iteration  22: 10057172.545 ops/s
Iteration  23: 9899217.862 ops/s
Iteration  24: 9879708.180 ops/s
Iteration  25: 10001409.753 ops/s
Iteration  26: 10054743.816 ops/s
Iteration  27: 10056561.447 ops/s
Iteration  28: 9987004.851 ops/s
Iteration  29: 10057046.532 ops/s
Iteration  30: 10011237.553 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoInt":
  10011251.770 ±(99.9%) 45701.788 ops/s [Average]
  (min, avg, max) = (9847970.889, 10011251.770, 10092465.471), stdev = 68404.291
  CI (99.9%): [9965549.982, 10056953.559] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  10011251.770 ± 45701.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4857998.537 ops/s
# Warmup Iteration   2: 9856838.677 ops/s
# Warmup Iteration   3: 9894736.821 ops/s
# Warmup Iteration   4: 8399279.156 ops/s
# Warmup Iteration   5: 9940979.096 ops/s
# Warmup Iteration   6: 9935985.020 ops/s
# Warmup Iteration   7: 9988490.558 ops/s
# Warmup Iteration   8: 9957882.207 ops/s
# Warmup Iteration   9: 9994749.454 ops/s
# Warmup Iteration  10: 9966576.832 ops/s
# Warmup Iteration  11: 9940868.741 ops/s
# Warmup Iteration  12: 9904483.882 ops/s
# Warmup Iteration  13: 9973805.583 ops/s
# Warmup Iteration  14: 9957803.856 ops/s
# Warmup Iteration  15: 10013446.256 ops/s
# Warmup Iteration  16: 9935771.515 ops/s
# Warmup Iteration  17: 9959997.284 ops/s
# Warmup Iteration  18: 9866801.898 ops/s
# Warmup Iteration  19: 9933547.606 ops/s
# Warmup Iteration  20: 9796150.942 ops/s
# Warmup Iteration  21: 9899979.805 ops/s
# Warmup Iteration  22: 9759057.983 ops/s
# Warmup Iteration  23: 9935110.632 ops/s
# Warmup Iteration  24: 9968481.702 ops/s
# Warmup Iteration  25: 9964669.470 ops/s
# Warmup Iteration  26: 9967119.219 ops/s
# Warmup Iteration  27: 9946904.369 ops/s
# Warmup Iteration  28: 9984701.097 ops/s
# Warmup Iteration  29: 9868702.584 ops/s
# Warmup Iteration  30: 9956514.158 ops/s
Iteration   1: 9940653.473 ops/s
Iteration   2: 9961482.686 ops/s
Iteration   3: 9750654.250 ops/s
Iteration   4: 9911465.821 ops/s
Iteration   5: 9919799.895 ops/s
Iteration   6: 9986327.752 ops/s
Iteration   7: 9958084.658 ops/s
Iteration   8: 9828818.728 ops/s
Iteration   9: 9895227.011 ops/s
Iteration  10: 9740827.239 ops/s
Iteration  11: 9909991.926 ops/s
Iteration  12: 9932907.268 ops/s
Iteration  13: 9974502.767 ops/s
Iteration  14: 9995869.489 ops/s
Iteration  15: 9986315.981 ops/s
Iteration  16: 9976687.106 ops/s
Iteration  17: 9776689.692 ops/s
Iteration  18: 9979050.812 ops/s
Iteration  19: 9947787.003 ops/s
Iteration  20: 9948185.822 ops/s
Iteration  21: 9958925.997 ops/s
Iteration  22: 9986930.535 ops/s
Iteration  23: 9960016.067 ops/s
Iteration  24: 9923807.164 ops/s
Iteration  25: 9943987.955 ops/s
Iteration  26: 9938801.049 ops/s
Iteration  27: 9902611.992 ops/s
Iteration  28: 9996896.749 ops/s
Iteration  29: 9774453.146 ops/s
Iteration  30: 9998041.383 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoLong":
  9923526.714 ±(99.9%) 49878.485 ops/s [Average]
  (min, avg, max) = (9740827.239, 9923526.714, 9998041.383), stdev = 74655.775
  CI (99.9%): [9873648.228, 9973405.199] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  9923526.714 ± 49878.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoMaxString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoMaxString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5747222.864 ops/s
# Warmup Iteration   2: 11699009.133 ops/s
# Warmup Iteration   3: 11177667.922 ops/s
# Warmup Iteration   4: 10829699.674 ops/s
# Warmup Iteration   5: 11979398.439 ops/s
# Warmup Iteration   6: 11945628.480 ops/s
# Warmup Iteration   7: 11967355.340 ops/s
# Warmup Iteration   8: 11915293.655 ops/s
# Warmup Iteration   9: 11896924.838 ops/s
# Warmup Iteration  10: 11967847.727 ops/s
# Warmup Iteration  11: 11904481.259 ops/s
# Warmup Iteration  12: 11950267.770 ops/s
# Warmup Iteration  13: 11886851.115 ops/s
# Warmup Iteration  14: 11924531.263 ops/s
# Warmup Iteration  15: 11818894.632 ops/s
# Warmup Iteration  16: 11827841.372 ops/s
# Warmup Iteration  17: 12030266.083 ops/s
# Warmup Iteration  18: 11898404.663 ops/s
# Warmup Iteration  19: 11963220.312 ops/s
# Warmup Iteration  20: 11926272.403 ops/s
# Warmup Iteration  21: 12024629.318 ops/s
# Warmup Iteration  22: 11901223.988 ops/s
# Warmup Iteration  23: 11969571.385 ops/s
# Warmup Iteration  24: 11972232.989 ops/s
# Warmup Iteration  25: 11996608.486 ops/s
# Warmup Iteration  26: 11997704.272 ops/s
# Warmup Iteration  27: 11881917.206 ops/s
# Warmup Iteration  28: 11874695.939 ops/s
# Warmup Iteration  29: 11873491.770 ops/s
# Warmup Iteration  30: 12007826.587 ops/s
Iteration   1: 11969232.485 ops/s
Iteration   2: 12000313.083 ops/s
Iteration   3: 11938998.158 ops/s
Iteration   4: 11968076.544 ops/s
Iteration   5: 11941448.448 ops/s
Iteration   6: 12010562.015 ops/s
Iteration   7: 11940909.195 ops/s
Iteration   8: 12033237.435 ops/s
Iteration   9: 11983205.032 ops/s
Iteration  10: 11967811.885 ops/s
Iteration  11: 11966773.041 ops/s
Iteration  12: 12012478.095 ops/s
Iteration  13: 11909778.011 ops/s
Iteration  14: 11976852.684 ops/s
Iteration  15: 11993960.109 ops/s
Iteration  16: 11970106.116 ops/s
Iteration  17: 11972983.710 ops/s
Iteration  18: 11952851.612 ops/s
Iteration  19: 12005181.525 ops/s
Iteration  20: 11965236.323 ops/s
Iteration  21: 11992357.578 ops/s
Iteration  22: 11972874.114 ops/s
Iteration  23: 11951069.682 ops/s
Iteration  24: 11982998.285 ops/s
Iteration  25: 12041810.751 ops/s
Iteration  26: 11821430.150 ops/s
Iteration  27: 11893851.255 ops/s
Iteration  28: 11945540.251 ops/s
Iteration  29: 11994006.863 ops/s
Iteration  30: 11833940.565 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoMaxString":
  11963662.500 ±(99.9%) 32716.796 ops/s [Average]
  (min, avg, max) = (11821430.150, 11963662.500, 12041810.751), stdev = 48968.964
  CI (99.9%): [11930945.704, 11996379.296] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_injectIntoMaxString  thrpt   30  11963662.500 ± 32716.796  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoMinString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoMinString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5791887.486 ops/s
# Warmup Iteration   2: 11587980.821 ops/s
# Warmup Iteration   3: 11131448.287 ops/s
# Warmup Iteration   4: 10757847.113 ops/s
# Warmup Iteration   5: 11954602.478 ops/s
# Warmup Iteration   6: 11873260.823 ops/s
# Warmup Iteration   7: 12070265.590 ops/s
# Warmup Iteration   8: 12116648.376 ops/s
# Warmup Iteration   9: 12067826.754 ops/s
# Warmup Iteration  10: 11892651.280 ops/s
# Warmup Iteration  11: 12087021.136 ops/s
# Warmup Iteration  12: 12047603.748 ops/s
# Warmup Iteration  13: 12067446.640 ops/s
# Warmup Iteration  14: 12085961.513 ops/s
# Warmup Iteration  15: 12103741.722 ops/s
# Warmup Iteration  16: 11977633.416 ops/s
# Warmup Iteration  17: 12106095.148 ops/s
# Warmup Iteration  18: 12119921.292 ops/s
# Warmup Iteration  19: 12086112.009 ops/s
# Warmup Iteration  20: 12149729.077 ops/s
# Warmup Iteration  21: 11971794.428 ops/s
# Warmup Iteration  22: 12150530.780 ops/s
# Warmup Iteration  23: 12105885.030 ops/s
# Warmup Iteration  24: 12136915.443 ops/s
# Warmup Iteration  25: 12126427.357 ops/s
# Warmup Iteration  26: 12077301.747 ops/s
# Warmup Iteration  27: 12048494.229 ops/s
# Warmup Iteration  28: 11965069.932 ops/s
# Warmup Iteration  29: 12127708.682 ops/s
# Warmup Iteration  30: 12147041.234 ops/s
Iteration   1: 12079650.202 ops/s
Iteration   2: 12149293.248 ops/s
Iteration   3: 12135179.719 ops/s
Iteration   4: 12166579.822 ops/s
Iteration   5: 12103922.598 ops/s
Iteration   6: 12128817.074 ops/s
Iteration   7: 12149346.673 ops/s
Iteration   8: 12101815.752 ops/s
Iteration   9: 12046572.801 ops/s
Iteration  10: 12124926.562 ops/s
Iteration  11: 12089241.821 ops/s
Iteration  12: 11805927.255 ops/s
Iteration  13: 12170176.721 ops/s
Iteration  14: 12183685.550 ops/s
Iteration  15: 11961804.765 ops/s
Iteration  16: 12132488.125 ops/s
Iteration  17: 11883597.386 ops/s
Iteration  18: 12107229.185 ops/s
Iteration  19: 12126674.787 ops/s
Iteration  20: 12132389.257 ops/s
Iteration  21: 12156855.459 ops/s
Iteration  22: 12134767.532 ops/s
Iteration  23: 12202886.061 ops/s
Iteration  24: 12119743.197 ops/s
Iteration  25: 12190551.342 ops/s
Iteration  26: 11898574.501 ops/s
Iteration  27: 12118751.311 ops/s
Iteration  28: 12090554.280 ops/s
Iteration  29: 12064632.678 ops/s
Iteration  30: 11960431.993 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoMinString":
  12090568.922 ±(99.9%) 63900.853 ops/s [Average]
  (min, avg, max) = (11805927.255, 12090568.922, 12202886.061), stdev = 95643.796
  CI (99.9%): [12026668.069, 12154469.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_injectIntoMinString  thrpt   30  12090568.922 ± 63900.853  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4659898.928 ops/s
# Warmup Iteration   2: 9271793.942 ops/s
# Warmup Iteration   3: 7989405.106 ops/s
# Warmup Iteration   4: 9407583.159 ops/s
# Warmup Iteration   5: 9526271.448 ops/s
# Warmup Iteration   6: 9395511.988 ops/s
# Warmup Iteration   7: 9393380.460 ops/s
# Warmup Iteration   8: 9392522.515 ops/s
# Warmup Iteration   9: 9446394.025 ops/s
# Warmup Iteration  10: 9472722.933 ops/s
# Warmup Iteration  11: 9472868.365 ops/s
# Warmup Iteration  12: 9462002.683 ops/s
# Warmup Iteration  13: 9471833.976 ops/s
# Warmup Iteration  14: 9440946.909 ops/s
# Warmup Iteration  15: 9425844.272 ops/s
# Warmup Iteration  16: 9411832.338 ops/s
# Warmup Iteration  17: 9453955.388 ops/s
# Warmup Iteration  18: 9426012.773 ops/s
# Warmup Iteration  19: 9410222.748 ops/s
# Warmup Iteration  20: 9476264.839 ops/s
# Warmup Iteration  21: 9515702.032 ops/s
# Warmup Iteration  22: 9526268.319 ops/s
# Warmup Iteration  23: 9404495.675 ops/s
# Warmup Iteration  24: 9492796.510 ops/s
# Warmup Iteration  25: 9538659.589 ops/s
# Warmup Iteration  26: 9402455.803 ops/s
# Warmup Iteration  27: 9533440.058 ops/s
# Warmup Iteration  28: 9474787.604 ops/s
# Warmup Iteration  29: 9434581.184 ops/s
# Warmup Iteration  30: 9486198.708 ops/s
Iteration   1: 9526365.288 ops/s
Iteration   2: 9484120.311 ops/s
Iteration   3: 9495036.214 ops/s
Iteration   4: 9582310.582 ops/s
Iteration   5: 9498063.057 ops/s
Iteration   6: 9515278.998 ops/s
Iteration   7: 9482879.569 ops/s
Iteration   8: 9299448.981 ops/s
Iteration   9: 9534853.541 ops/s
Iteration  10: 9409729.478 ops/s
Iteration  11: 9518562.608 ops/s
Iteration  12: 9472651.637 ops/s
Iteration  13: 9472197.081 ops/s
Iteration  14: 9507477.191 ops/s
Iteration  15: 9511843.068 ops/s
Iteration  16: 9516576.397 ops/s
Iteration  17: 9509926.578 ops/s
Iteration  18: 9504716.650 ops/s
Iteration  19: 9543954.126 ops/s
Iteration  20: 9524620.832 ops/s
Iteration  21: 9414055.457 ops/s
Iteration  22: 9503715.580 ops/s
Iteration  23: 9509068.692 ops/s
Iteration  24: 9510177.387 ops/s
Iteration  25: 9270397.062 ops/s
Iteration  26: 9496635.473 ops/s
Iteration  27: 9455923.114 ops/s
Iteration  28: 9476713.191 ops/s
Iteration  29: 9458733.330 ops/s
Iteration  30: 9523062.999 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoString":
  9484303.149 ±(99.9%) 43066.972 ops/s [Average]
  (min, avg, max) = (9270397.062, 9484303.149, 9582310.582), stdev = 64460.621
  CI (99.9%): [9441236.177, 9527370.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_injectIntoString  thrpt   30  9484303.149 ± 43066.972  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6128622.040 ops/s
# Warmup Iteration   2: 12536533.853 ops/s
# Warmup Iteration   3: 11786131.071 ops/s
# Warmup Iteration   4: 11530334.674 ops/s
# Warmup Iteration   5: 12701760.488 ops/s
# Warmup Iteration   6: 12741884.622 ops/s
# Warmup Iteration   7: 12632562.893 ops/s
# Warmup Iteration   8: 12699938.381 ops/s
# Warmup Iteration   9: 12714199.344 ops/s
# Warmup Iteration  10: 12716713.629 ops/s
# Warmup Iteration  11: 12719363.068 ops/s
# Warmup Iteration  12: 12729068.390 ops/s
# Warmup Iteration  13: 12711823.377 ops/s
# Warmup Iteration  14: 12744097.080 ops/s
# Warmup Iteration  15: 12724901.382 ops/s
# Warmup Iteration  16: 12727280.493 ops/s
# Warmup Iteration  17: 12785372.453 ops/s
# Warmup Iteration  18: 12762321.043 ops/s
# Warmup Iteration  19: 12763505.809 ops/s
# Warmup Iteration  20: 12787047.742 ops/s
# Warmup Iteration  21: 12649094.153 ops/s
# Warmup Iteration  22: 12807287.907 ops/s
# Warmup Iteration  23: 12788120.591 ops/s
# Warmup Iteration  24: 12710461.410 ops/s
# Warmup Iteration  25: 12763400.221 ops/s
# Warmup Iteration  26: 12757165.501 ops/s
# Warmup Iteration  27: 12755302.427 ops/s
# Warmup Iteration  28: 12693790.629 ops/s
# Warmup Iteration  29: 12582925.240 ops/s
# Warmup Iteration  30: 12784820.183 ops/s
Iteration   1: 12837637.081 ops/s
Iteration   2: 12601036.999 ops/s
Iteration   3: 12791291.305 ops/s
Iteration   4: 12686468.261 ops/s
Iteration   5: 12265123.920 ops/s
Iteration   6: 12705268.635 ops/s
Iteration   7: 12747376.584 ops/s
Iteration   8: 12540837.922 ops/s
Iteration   9: 12772901.169 ops/s
Iteration  10: 12825247.960 ops/s
Iteration  11: 12793443.442 ops/s
Iteration  12: 12812337.544 ops/s
Iteration  13: 12781570.141 ops/s
Iteration  14: 12864742.328 ops/s
Iteration  15: 12798498.379 ops/s
Iteration  16: 12761836.346 ops/s
Iteration  17: 12737205.701 ops/s
Iteration  18: 12784170.487 ops/s
Iteration  19: 12793312.283 ops/s
Iteration  20: 12646799.713 ops/s
Iteration  21: 12764737.102 ops/s
Iteration  22: 12608023.637 ops/s
Iteration  23: 12198648.475 ops/s
Iteration  24: 12760716.232 ops/s
Iteration  25: 12773417.460 ops/s
Iteration  26: 12721007.232 ops/s
Iteration  27: 12652322.125 ops/s
Iteration  28: 12738567.798 ops/s
Iteration  29: 12352481.324 ops/s
Iteration  30: 12829359.076 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_injectIntoWith":
  12698212.889 ±(99.9%) 109455.357 ops/s [Average]
  (min, avg, max) = (12198648.475, 12698212.889, 12864742.328), stdev = 163827.638
  CI (99.9%): [12588757.531, 12807668.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
MultiReaderFastListTest._Benchmark.benchmark_injectIntoWith  thrpt   30  12698212.889 ± 109455.357  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1199571.914 ops/s
# Warmup Iteration   2: 2620448.567 ops/s
# Warmup Iteration   3: 2664583.509 ops/s
# Warmup Iteration   4: 2235114.951 ops/s
# Warmup Iteration   5: 2664418.289 ops/s
# Warmup Iteration   6: 2658392.027 ops/s
# Warmup Iteration   7: 2646868.930 ops/s
# Warmup Iteration   8: 2642764.555 ops/s
# Warmup Iteration   9: 2653869.908 ops/s
# Warmup Iteration  10: 2683890.039 ops/s
# Warmup Iteration  11: 2663509.321 ops/s
# Warmup Iteration  12: 2653660.030 ops/s
# Warmup Iteration  13: 2660088.059 ops/s
# Warmup Iteration  14: 2653257.886 ops/s
# Warmup Iteration  15: 2615605.616 ops/s
# Warmup Iteration  16: 2662489.050 ops/s
# Warmup Iteration  17: 2651254.373 ops/s
# Warmup Iteration  18: 2673814.758 ops/s
# Warmup Iteration  19: 2649035.722 ops/s
# Warmup Iteration  20: 2663488.452 ops/s
# Warmup Iteration  21: 2655795.794 ops/s
# Warmup Iteration  22: 2674092.566 ops/s
# Warmup Iteration  23: 2664385.132 ops/s
# Warmup Iteration  24: 2675976.636 ops/s
# Warmup Iteration  25: 2663889.960 ops/s
# Warmup Iteration  26: 2669349.143 ops/s
# Warmup Iteration  27: 2684174.886 ops/s
# Warmup Iteration  28: 2650673.800 ops/s
# Warmup Iteration  29: 2670385.145 ops/s
# Warmup Iteration  30: 2638221.001 ops/s
Iteration   1: 2660356.651 ops/s
Iteration   2: 2666355.619 ops/s
Iteration   3: 2683253.837 ops/s
Iteration   4: 2676431.385 ops/s
Iteration   5: 2674531.689 ops/s
Iteration   6: 2666382.343 ops/s
Iteration   7: 2668780.182 ops/s
Iteration   8: 2642634.697 ops/s
Iteration   9: 2672440.664 ops/s
Iteration  10: 2664417.689 ops/s
Iteration  11: 2629513.894 ops/s
Iteration  12: 2655815.798 ops/s
Iteration  13: 2595810.451 ops/s
Iteration  14: 2666379.523 ops/s
Iteration  15: 2670940.563 ops/s
Iteration  16: 2652749.042 ops/s
Iteration  17: 2655947.780 ops/s
Iteration  18: 2626600.817 ops/s
Iteration  19: 2636769.657 ops/s
Iteration  20: 2657725.827 ops/s
Iteration  21: 2660949.418 ops/s
Iteration  22: 2671511.340 ops/s
Iteration  23: 2609071.568 ops/s
Iteration  24: 2629667.418 ops/s
Iteration  25: 2635942.280 ops/s
Iteration  26: 2654169.033 ops/s
Iteration  27: 2673327.797 ops/s
Iteration  28: 2671715.185 ops/s
Iteration  29: 2661993.456 ops/s
Iteration  30: 2673563.633 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_isEmpty":
  2655524.975 ±(99.9%) 14022.699 ops/s [Average]
  (min, avg, max) = (2595810.451, 2655524.975, 2683253.837), stdev = 20988.517
  CI (99.9%): [2641502.276, 2669547.673] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_isEmpty  thrpt   30  2655524.975 ± 14022.699  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685212.680 ops/s
# Warmup Iteration   2: 723255.946 ops/s
# Warmup Iteration   3: 957891.818 ops/s
# Warmup Iteration   4: 956373.468 ops/s
# Warmup Iteration   5: 959183.642 ops/s
# Warmup Iteration   6: 958557.927 ops/s
# Warmup Iteration   7: 956804.242 ops/s
# Warmup Iteration   8: 956029.056 ops/s
# Warmup Iteration   9: 960925.438 ops/s
# Warmup Iteration  10: 950905.438 ops/s
# Warmup Iteration  11: 813198.977 ops/s
# Warmup Iteration  12: 953594.311 ops/s
# Warmup Iteration  13: 953343.451 ops/s
# Warmup Iteration  14: 960273.081 ops/s
# Warmup Iteration  15: 955187.452 ops/s
# Warmup Iteration  16: 948692.717 ops/s
# Warmup Iteration  17: 1012325.831 ops/s
# Warmup Iteration  18: 1013552.404 ops/s
# Warmup Iteration  19: 1005786.286 ops/s
# Warmup Iteration  20: 1009963.637 ops/s
# Warmup Iteration  21: 1004104.861 ops/s
# Warmup Iteration  22: 993984.885 ops/s
# Warmup Iteration  23: 1012346.430 ops/s
# Warmup Iteration  24: 1002107.611 ops/s
# Warmup Iteration  25: 1015683.306 ops/s
# Warmup Iteration  26: 1010575.128 ops/s
# Warmup Iteration  27: 1011883.403 ops/s
# Warmup Iteration  28: 998202.757 ops/s
# Warmup Iteration  29: 1003079.572 ops/s
# Warmup Iteration  30: 1015633.380 ops/s
Iteration   1: 1009684.636 ops/s
Iteration   2: 998597.384 ops/s
Iteration   3: 998897.897 ops/s
Iteration   4: 1012357.933 ops/s
Iteration   5: 1005540.151 ops/s
Iteration   6: 1011271.497 ops/s
Iteration   7: 1011490.946 ops/s
Iteration   8: 1009232.143 ops/s
Iteration   9: 994625.116 ops/s
Iteration  10: 1012391.589 ops/s
Iteration  11: 1007882.500 ops/s
Iteration  12: 1015751.997 ops/s
Iteration  13: 1011718.967 ops/s
Iteration  14: 1003742.625 ops/s
Iteration  15: 1010666.303 ops/s
Iteration  16: 1006891.314 ops/s
Iteration  17: 1020381.672 ops/s
Iteration  18: 1011820.208 ops/s
Iteration  19: 1023763.619 ops/s
Iteration  20: 1009999.222 ops/s
Iteration  21: 1014052.381 ops/s
Iteration  22: 1016689.804 ops/s
Iteration  23: 1018316.016 ops/s
Iteration  24: 1012513.680 ops/s
Iteration  25: 998858.340 ops/s
Iteration  26: 1009336.242 ops/s
Iteration  27: 986781.341 ops/s
Iteration  28: 1016360.741 ops/s
Iteration  29: 991734.587 ops/s
Iteration  30: 961490.403 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_iterator":
  1007094.708 ±(99.9%) 8030.835 ops/s [Average]
  (min, avg, max) = (961490.403, 1007094.708, 1023763.619), stdev = 12020.177
  CI (99.9%): [999063.873, 1015125.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_iterator  thrpt   30  1007094.708 ± 8030.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702518.114 ops/s
# Warmup Iteration   2: 736305.666 ops/s
# Warmup Iteration   3: 957606.278 ops/s
# Warmup Iteration   4: 960924.718 ops/s
# Warmup Iteration   5: 967312.372 ops/s
# Warmup Iteration   6: 966582.888 ops/s
# Warmup Iteration   7: 969582.434 ops/s
# Warmup Iteration   8: 969001.930 ops/s
# Warmup Iteration   9: 965873.839 ops/s
# Warmup Iteration  10: 971516.999 ops/s
# Warmup Iteration  11: 856025.306 ops/s
# Warmup Iteration  12: 932393.597 ops/s
# Warmup Iteration  13: 967517.036 ops/s
# Warmup Iteration  14: 963541.571 ops/s
# Warmup Iteration  15: 960225.906 ops/s
# Warmup Iteration  16: 966846.564 ops/s
# Warmup Iteration  17: 1026939.072 ops/s
# Warmup Iteration  18: 1030178.934 ops/s
# Warmup Iteration  19: 1030443.354 ops/s
# Warmup Iteration  20: 1025753.907 ops/s
# Warmup Iteration  21: 1024764.335 ops/s
# Warmup Iteration  22: 1022057.983 ops/s
# Warmup Iteration  23: 1018398.755 ops/s
# Warmup Iteration  24: 1021630.181 ops/s
# Warmup Iteration  25: 1022943.212 ops/s
# Warmup Iteration  26: 1024963.234 ops/s
# Warmup Iteration  27: 1023947.333 ops/s
# Warmup Iteration  28: 1027533.526 ops/s
# Warmup Iteration  29: 1019129.938 ops/s
# Warmup Iteration  30: 1025438.147 ops/s
Iteration   1: 1028858.414 ops/s
Iteration   2: 1026280.130 ops/s
Iteration   3: 1028746.348 ops/s
Iteration   4: 1012365.279 ops/s
Iteration   5: 1032925.067 ops/s
Iteration   6: 1035415.310 ops/s
Iteration   7: 1029517.157 ops/s
Iteration   8: 1021128.448 ops/s
Iteration   9: 1023805.092 ops/s
Iteration  10: 1025650.101 ops/s
Iteration  11: 1004262.004 ops/s
Iteration  12: 1026491.123 ops/s
Iteration  13: 1021967.721 ops/s
Iteration  14: 1026662.561 ops/s
Iteration  15: 1027375.873 ops/s
Iteration  16: 1024667.098 ops/s
Iteration  17: 1025696.085 ops/s
Iteration  18: 1030826.468 ops/s
Iteration  19: 1025210.573 ops/s
Iteration  20: 1031277.989 ops/s
Iteration  21: 1027003.845 ops/s
Iteration  22: 1032461.027 ops/s
Iteration  23: 1019137.164 ops/s
Iteration  24: 1023515.794 ops/s
Iteration  25: 1029617.991 ops/s
Iteration  26: 1036573.602 ops/s
Iteration  27: 1033107.083 ops/s
Iteration  28: 1018011.928 ops/s
Iteration  29: 1020978.690 ops/s
Iteration  30: 1007986.015 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_iterator_throws":
  1025250.733 ±(99.9%) 4950.926 ops/s [Average]
  (min, avg, max) = (1004262.004, 1025250.733, 1036573.602), stdev = 7410.313
  CI (99.9%): [1020299.807, 1030201.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_iterator_throws  thrpt   30  1025250.733 ± 4950.926  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 87.419 ops/s
# Warmup Iteration   2: 95.327 ops/s
# Warmup Iteration   3: 118.903 ops/s
# Warmup Iteration   4: 123.837 ops/s
# Warmup Iteration   5: 124.002 ops/s
# Warmup Iteration   6: 121.705 ops/s
# Warmup Iteration   7: 123.930 ops/s
# Warmup Iteration   8: 124.582 ops/s
# Warmup Iteration   9: 123.532 ops/s
# Warmup Iteration  10: 123.204 ops/s
# Warmup Iteration  11: 123.324 ops/s
# Warmup Iteration  12: 117.990 ops/s
# Warmup Iteration  13: 109.961 ops/s
# Warmup Iteration  14: 124.213 ops/s
# Warmup Iteration  15: 123.528 ops/s
# Warmup Iteration  16: 123.979 ops/s
# Warmup Iteration  17: 123.970 ops/s
# Warmup Iteration  18: 121.919 ops/s
# Warmup Iteration  19: 122.548 ops/s
# Warmup Iteration  20: 123.173 ops/s
# Warmup Iteration  21: 122.541 ops/s
# Warmup Iteration  22: 123.153 ops/s
# Warmup Iteration  23: 121.409 ops/s
# Warmup Iteration  24: 119.637 ops/s
# Warmup Iteration  25: 119.364 ops/s
# Warmup Iteration  26: 118.890 ops/s
# Warmup Iteration  27: 119.204 ops/s
# Warmup Iteration  28: 119.881 ops/s
# Warmup Iteration  29: 119.362 ops/s
# Warmup Iteration  30: 119.412 ops/s
Iteration   1: 118.943 ops/s
Iteration   2: 120.194 ops/s
Iteration   3: 118.092 ops/s
Iteration   4: 119.497 ops/s
Iteration   5: 120.176 ops/s
Iteration   6: 119.852 ops/s
Iteration   7: 118.567 ops/s
Iteration   8: 120.183 ops/s
Iteration   9: 119.918 ops/s
Iteration  10: 119.813 ops/s
Iteration  11: 118.272 ops/s
Iteration  12: 120.371 ops/s
Iteration  13: 120.144 ops/s
Iteration  14: 119.256 ops/s
Iteration  15: 120.146 ops/s
Iteration  16: 119.861 ops/s
Iteration  17: 120.273 ops/s
Iteration  18: 120.004 ops/s
Iteration  19: 120.510 ops/s
Iteration  20: 120.366 ops/s
Iteration  21: 120.432 ops/s
Iteration  22: 119.566 ops/s
Iteration  23: 118.692 ops/s
Iteration  24: 120.259 ops/s
Iteration  25: 119.308 ops/s
Iteration  26: 119.857 ops/s
Iteration  27: 119.602 ops/s
Iteration  28: 118.280 ops/s
Iteration  29: 119.937 ops/s
Iteration  30: 120.142 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  119.684 ±(99.9%) 0.468 ops/s [Average]
  (min, avg, max) = (118.092, 119.684, 120.510), stdev = 0.701
  CI (99.9%): [119.216, 120.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt    Score   Error  Units
MultiReaderFastListTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  119.684 ± 0.468  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2277525.215 ops/s
# Warmup Iteration   2: 4456270.603 ops/s
# Warmup Iteration   3: 4464418.817 ops/s
# Warmup Iteration   4: 3695526.905 ops/s
# Warmup Iteration   5: 4470834.425 ops/s
# Warmup Iteration   6: 4470565.622 ops/s
# Warmup Iteration   7: 4455304.636 ops/s
# Warmup Iteration   8: 4451432.120 ops/s
# Warmup Iteration   9: 4412666.430 ops/s
# Warmup Iteration  10: 4466257.260 ops/s
# Warmup Iteration  11: 4464266.099 ops/s
# Warmup Iteration  12: 4411691.058 ops/s
# Warmup Iteration  13: 4392977.582 ops/s
# Warmup Iteration  14: 4404960.112 ops/s
# Warmup Iteration  15: 4460298.100 ops/s
# Warmup Iteration  16: 4449886.887 ops/s
# Warmup Iteration  17: 4407607.366 ops/s
# Warmup Iteration  18: 4385698.692 ops/s
# Warmup Iteration  19: 4462183.636 ops/s
# Warmup Iteration  20: 4455303.419 ops/s
# Warmup Iteration  21: 4462352.472 ops/s
# Warmup Iteration  22: 4458541.803 ops/s
# Warmup Iteration  23: 4455201.948 ops/s
# Warmup Iteration  24: 4478131.966 ops/s
# Warmup Iteration  25: 4389016.946 ops/s
# Warmup Iteration  26: 4429491.935 ops/s
# Warmup Iteration  27: 4412786.414 ops/s
# Warmup Iteration  28: 4445026.731 ops/s
# Warmup Iteration  29: 4430968.091 ops/s
# Warmup Iteration  30: 4390147.551 ops/s
Iteration   1: 4452986.963 ops/s
Iteration   2: 4449975.365 ops/s
Iteration   3: 4449496.743 ops/s
Iteration   4: 4472555.527 ops/s
Iteration   5: 4476511.518 ops/s
Iteration   6: 4429817.765 ops/s
Iteration   7: 4418845.879 ops/s
Iteration   8: 4479196.854 ops/s
Iteration   9: 4447495.094 ops/s
Iteration  10: 4468863.952 ops/s
Iteration  11: 4430182.727 ops/s
Iteration  12: 4357975.568 ops/s
Iteration  13: 4452553.065 ops/s
Iteration  14: 4479239.779 ops/s
Iteration  15: 4402898.896 ops/s
Iteration  16: 4446760.214 ops/s
Iteration  17: 4467158.663 ops/s
Iteration  18: 4399110.429 ops/s
Iteration  19: 4462184.466 ops/s
Iteration  20: 4444609.268 ops/s
Iteration  21: 4462797.364 ops/s
Iteration  22: 4449637.435 ops/s
Iteration  23: 4442576.941 ops/s
Iteration  24: 4445016.618 ops/s
Iteration  25: 4475502.268 ops/s
Iteration  26: 4464890.426 ops/s
Iteration  27: 4387152.412 ops/s
Iteration  28: 4462219.455 ops/s
Iteration  29: 4378558.828 ops/s
Iteration  30: 4423355.345 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_lastIndexOf":
  4442670.861 ±(99.9%) 20850.389 ops/s [Average]
  (min, avg, max) = (4357975.568, 4442670.861, 4479239.779), stdev = 31207.883
  CI (99.9%): [4421820.472, 4463521.250] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  4442670.861 ± 20850.389  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 714681.848 ops/s
# Warmup Iteration   2: 746716.532 ops/s
# Warmup Iteration   3: 981269.294 ops/s
# Warmup Iteration   4: 988707.744 ops/s
# Warmup Iteration   5: 989749.393 ops/s
# Warmup Iteration   6: 988913.659 ops/s
# Warmup Iteration   7: 981300.188 ops/s
# Warmup Iteration   8: 983641.321 ops/s
# Warmup Iteration   9: 990753.043 ops/s
# Warmup Iteration  10: 986840.320 ops/s
# Warmup Iteration  11: 835310.009 ops/s
# Warmup Iteration  12: 985418.840 ops/s
# Warmup Iteration  13: 972266.570 ops/s
# Warmup Iteration  14: 992484.830 ops/s
# Warmup Iteration  15: 990545.966 ops/s
# Warmup Iteration  16: 991503.093 ops/s
# Warmup Iteration  17: 1050949.372 ops/s
# Warmup Iteration  18: 1057714.853 ops/s
# Warmup Iteration  19: 1048302.607 ops/s
# Warmup Iteration  20: 1050018.891 ops/s
# Warmup Iteration  21: 1041151.499 ops/s
# Warmup Iteration  22: 1050613.060 ops/s
# Warmup Iteration  23: 1048251.096 ops/s
# Warmup Iteration  24: 1056576.326 ops/s
# Warmup Iteration  25: 1053423.386 ops/s
# Warmup Iteration  26: 1047355.971 ops/s
# Warmup Iteration  27: 1048631.735 ops/s
# Warmup Iteration  28: 1041545.826 ops/s
# Warmup Iteration  29: 1051545.256 ops/s
# Warmup Iteration  30: 1049445.358 ops/s
Iteration   1: 1046142.762 ops/s
Iteration   2: 1049128.664 ops/s
Iteration   3: 1054713.344 ops/s
Iteration   4: 1053995.494 ops/s
Iteration   5: 1046922.498 ops/s
Iteration   6: 1039681.904 ops/s
Iteration   7: 1047716.218 ops/s
Iteration   8: 1054285.033 ops/s
Iteration   9: 1051773.614 ops/s
Iteration  10: 1045664.310 ops/s
Iteration  11: 1049751.402 ops/s
Iteration  12: 1023227.542 ops/s
Iteration  13: 1058848.123 ops/s
Iteration  14: 1054455.699 ops/s
Iteration  15: 1057270.695 ops/s
Iteration  16: 1034997.037 ops/s
Iteration  17: 1053845.786 ops/s
Iteration  18: 1031851.685 ops/s
Iteration  19: 1055561.659 ops/s
Iteration  20: 1049544.399 ops/s
Iteration  21: 1059382.985 ops/s
Iteration  22: 1051201.202 ops/s
Iteration  23: 1045581.364 ops/s
Iteration  24: 1055592.060 ops/s
Iteration  25: 1048354.479 ops/s
Iteration  26: 1034611.986 ops/s
Iteration  27: 1054578.204 ops/s
Iteration  28: 1052428.322 ops/s
Iteration  29: 1052795.000 ops/s
Iteration  30: 1050157.624 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_listIterator":
  1048802.036 ±(99.9%) 5624.014 ops/s [Average]
  (min, avg, max) = (1023227.542, 1048802.036, 1059382.985), stdev = 8417.760
  CI (99.9%): [1043178.023, 1054426.050] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_listIterator  thrpt   30  1048802.036 ± 5624.014  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_listIteratorIndexTooBig$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_listIteratorIndexTooBig

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712619.414 ops/s
# Warmup Iteration   2: 754314.437 ops/s
# Warmup Iteration   3: 958870.934 ops/s
# Warmup Iteration   4: 975251.480 ops/s
# Warmup Iteration   5: 973165.220 ops/s
# Warmup Iteration   6: 968094.425 ops/s
# Warmup Iteration   7: 956454.758 ops/s
# Warmup Iteration   8: 975050.650 ops/s
# Warmup Iteration   9: 977530.595 ops/s
# Warmup Iteration  10: 973572.567 ops/s
# Warmup Iteration  11: 850201.134 ops/s
# Warmup Iteration  12: 924654.963 ops/s
# Warmup Iteration  13: 970201.537 ops/s
# Warmup Iteration  14: 972274.717 ops/s
# Warmup Iteration  15: 965229.713 ops/s
# Warmup Iteration  16: 977030.467 ops/s
# Warmup Iteration  17: 1032061.354 ops/s
# Warmup Iteration  18: 1047405.398 ops/s
# Warmup Iteration  19: 1037880.726 ops/s
# Warmup Iteration  20: 1046357.540 ops/s
# Warmup Iteration  21: 1035500.239 ops/s
# Warmup Iteration  22: 1044491.874 ops/s
# Warmup Iteration  23: 1040603.090 ops/s
# Warmup Iteration  24: 1042123.175 ops/s
# Warmup Iteration  25: 1045967.565 ops/s
# Warmup Iteration  26: 1043204.802 ops/s
# Warmup Iteration  27: 1049441.236 ops/s
# Warmup Iteration  28: 1036849.672 ops/s
# Warmup Iteration  29: 1039138.659 ops/s
# Warmup Iteration  30: 1045471.657 ops/s
Iteration   1: 1046961.431 ops/s
Iteration   2: 1047894.175 ops/s
Iteration   3: 1048382.085 ops/s
Iteration   4: 1049579.919 ops/s
Iteration   5: 1047452.096 ops/s
Iteration   6: 1033383.959 ops/s
Iteration   7: 1030578.276 ops/s
Iteration   8: 1046538.219 ops/s
Iteration   9: 1043456.282 ops/s
Iteration  10: 1037239.181 ops/s
Iteration  11: 1026710.162 ops/s
Iteration  12: 1045063.901 ops/s
Iteration  13: 1031065.063 ops/s
Iteration  14: 1038959.537 ops/s
Iteration  15: 1039734.967 ops/s
Iteration  16: 1036648.309 ops/s
Iteration  17: 1040010.882 ops/s
Iteration  18: 1046980.242 ops/s
Iteration  19: 1047955.306 ops/s
Iteration  20: 1047074.558 ops/s
Iteration  21: 1052340.841 ops/s
Iteration  22: 1045140.224 ops/s
Iteration  23: 1045865.744 ops/s
Iteration  24: 1044588.749 ops/s
Iteration  25: 1044119.530 ops/s
Iteration  26: 1043943.971 ops/s
Iteration  27: 1040148.984 ops/s
Iteration  28: 1039822.331 ops/s
Iteration  29: 1045820.336 ops/s
Iteration  30: 1046126.542 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_listIteratorIndexTooBig":
  1042652.860 ±(99.9%) 4127.464 ops/s [Average]
  (min, avg, max) = (1026710.162, 1042652.860, 1052340.841), stdev = 6177.795
  CI (99.9%): [1038525.396, 1046780.324] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_listIteratorIndexTooBig  thrpt   30  1042652.860 ± 4127.464  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_listIteratorIndexTooSmall$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_listIteratorIndexTooSmall

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710409.911 ops/s
# Warmup Iteration   2: 759281.358 ops/s
# Warmup Iteration   3: 999386.844 ops/s
# Warmup Iteration   4: 997925.755 ops/s
# Warmup Iteration   5: 999425.177 ops/s
# Warmup Iteration   6: 1003278.697 ops/s
# Warmup Iteration   7: 1001786.355 ops/s
# Warmup Iteration   8: 986322.446 ops/s
# Warmup Iteration   9: 998914.335 ops/s
# Warmup Iteration  10: 997430.124 ops/s
# Warmup Iteration  11: 832095.883 ops/s
# Warmup Iteration  12: 997806.049 ops/s
# Warmup Iteration  13: 999148.903 ops/s
# Warmup Iteration  14: 985812.580 ops/s
# Warmup Iteration  15: 1003189.937 ops/s
# Warmup Iteration  16: 999495.118 ops/s
# Warmup Iteration  17: 1048784.069 ops/s
# Warmup Iteration  18: 1060364.703 ops/s
# Warmup Iteration  19: 1051207.650 ops/s
# Warmup Iteration  20: 1052347.680 ops/s
# Warmup Iteration  21: 1046252.876 ops/s
# Warmup Iteration  22: 1056818.030 ops/s
# Warmup Iteration  23: 1052668.643 ops/s
# Warmup Iteration  24: 1060371.793 ops/s
# Warmup Iteration  25: 1058785.165 ops/s
# Warmup Iteration  26: 1057367.150 ops/s
# Warmup Iteration  27: 1041741.404 ops/s
# Warmup Iteration  28: 1057666.261 ops/s
# Warmup Iteration  29: 1050879.008 ops/s
# Warmup Iteration  30: 1058011.903 ops/s
Iteration   1: 1060414.616 ops/s
Iteration   2: 1055175.821 ops/s
Iteration   3: 1057048.004 ops/s
Iteration   4: 1058429.410 ops/s
Iteration   5: 1054150.760 ops/s
Iteration   6: 1052186.776 ops/s
Iteration   7: 1053916.705 ops/s
Iteration   8: 1037624.005 ops/s
Iteration   9: 1051951.162 ops/s
Iteration  10: 1060122.217 ops/s
Iteration  11: 1056075.345 ops/s
Iteration  12: 1065124.387 ops/s
Iteration  13: 1045946.891 ops/s
Iteration  14: 1058266.707 ops/s
Iteration  15: 1035196.751 ops/s
Iteration  16: 1055176.949 ops/s
Iteration  17: 1055318.797 ops/s
Iteration  18: 1051517.853 ops/s
Iteration  19: 1053047.907 ops/s
Iteration  20: 1054019.381 ops/s
Iteration  21: 1052955.985 ops/s
Iteration  22: 1057419.804 ops/s
Iteration  23: 1051749.453 ops/s
Iteration  24: 1056870.989 ops/s
Iteration  25: 1062864.166 ops/s
Iteration  26: 1055257.751 ops/s
Iteration  27: 1053430.300 ops/s
Iteration  28: 1052051.363 ops/s
Iteration  29: 1057277.156 ops/s
Iteration  30: 1040648.879 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_listIteratorIndexTooSmall":
  1053707.876 ±(99.9%) 4397.385 ops/s [Average]
  (min, avg, max) = (1035196.751, 1053707.876, 1065124.387), stdev = 6581.800
  CI (99.9%): [1049310.491, 1058105.262] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_listIteratorIndexTooSmall  thrpt   30  1053707.876 ± 4397.385  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_listIteratorWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_listIteratorWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710238.415 ops/s
# Warmup Iteration   2: 752997.143 ops/s
# Warmup Iteration   3: 963540.285 ops/s
# Warmup Iteration   4: 975808.509 ops/s
# Warmup Iteration   5: 980257.265 ops/s
# Warmup Iteration   6: 972597.116 ops/s
# Warmup Iteration   7: 979414.998 ops/s
# Warmup Iteration   8: 951703.421 ops/s
# Warmup Iteration   9: 961707.567 ops/s
# Warmup Iteration  10: 975672.855 ops/s
# Warmup Iteration  11: 841262.212 ops/s
# Warmup Iteration  12: 957470.559 ops/s
# Warmup Iteration  13: 979543.305 ops/s
# Warmup Iteration  14: 974516.187 ops/s
# Warmup Iteration  15: 976175.879 ops/s
# Warmup Iteration  16: 980652.785 ops/s
# Warmup Iteration  17: 1028673.943 ops/s
# Warmup Iteration  18: 1037024.471 ops/s
# Warmup Iteration  19: 1037043.669 ops/s
# Warmup Iteration  20: 1015004.423 ops/s
# Warmup Iteration  21: 1035403.041 ops/s
# Warmup Iteration  22: 1038015.570 ops/s
# Warmup Iteration  23: 1035295.817 ops/s
# Warmup Iteration  24: 1035978.359 ops/s
# Warmup Iteration  25: 1029487.909 ops/s
# Warmup Iteration  26: 1031689.224 ops/s
# Warmup Iteration  27: 1038259.287 ops/s
# Warmup Iteration  28: 1041536.869 ops/s
# Warmup Iteration  29: 1032430.866 ops/s
# Warmup Iteration  30: 1035548.869 ops/s
Iteration   1: 1042887.662 ops/s
Iteration   2: 1041346.834 ops/s
Iteration   3: 1035115.265 ops/s
Iteration   4: 1039038.594 ops/s
Iteration   5: 1037375.290 ops/s
Iteration   6: 1038908.539 ops/s
Iteration   7: 1041776.551 ops/s
Iteration   8: 1041381.859 ops/s
Iteration   9: 1039263.176 ops/s
Iteration  10: 1031247.497 ops/s
Iteration  11: 1039792.385 ops/s
Iteration  12: 1040698.744 ops/s
Iteration  13: 1038896.101 ops/s
Iteration  14: 1021677.445 ops/s
Iteration  15: 1037449.202 ops/s
Iteration  16: 1036712.460 ops/s
Iteration  17: 1041884.355 ops/s
Iteration  18: 1043134.579 ops/s
Iteration  19: 1008875.041 ops/s
Iteration  20: 1037807.624 ops/s
Iteration  21: 1037580.966 ops/s
Iteration  22: 1043052.807 ops/s
Iteration  23: 1037028.606 ops/s
Iteration  24: 1037542.394 ops/s
Iteration  25: 1041974.513 ops/s
Iteration  26: 1020159.097 ops/s
Iteration  27: 1044853.084 ops/s
Iteration  28: 1020503.620 ops/s
Iteration  29: 1044163.721 ops/s
Iteration  30: 1039274.236 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_listIteratorWithIndex":
  1036713.408 ±(99.9%) 5537.315 ops/s [Average]
  (min, avg, max) = (1008875.041, 1036713.408, 1044853.084), stdev = 8287.992
  CI (99.9%): [1031176.094, 1042250.723] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_listIteratorWithIndex  thrpt   30  1036713.408 ± 5537.315  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2896515.802 ops/s
# Warmup Iteration   2: 6283072.282 ops/s
# Warmup Iteration   3: 6012086.524 ops/s
# Warmup Iteration   4: 5637842.580 ops/s
# Warmup Iteration   5: 6241827.517 ops/s
# Warmup Iteration   6: 6289601.754 ops/s
# Warmup Iteration   7: 6270291.723 ops/s
# Warmup Iteration   8: 6200563.623 ops/s
# Warmup Iteration   9: 6187099.862 ops/s
# Warmup Iteration  10: 6286178.501 ops/s
# Warmup Iteration  11: 6257480.968 ops/s
# Warmup Iteration  12: 6280636.810 ops/s
# Warmup Iteration  13: 6259460.031 ops/s
# Warmup Iteration  14: 6246585.774 ops/s
# Warmup Iteration  15: 6246595.949 ops/s
# Warmup Iteration  16: 6278538.626 ops/s
# Warmup Iteration  17: 6264468.863 ops/s
# Warmup Iteration  18: 6277877.782 ops/s
# Warmup Iteration  19: 6260133.633 ops/s
# Warmup Iteration  20: 6238087.020 ops/s
# Warmup Iteration  21: 6300362.565 ops/s
# Warmup Iteration  22: 6237972.690 ops/s
# Warmup Iteration  23: 6307991.702 ops/s
# Warmup Iteration  24: 6247002.929 ops/s
# Warmup Iteration  25: 6301664.013 ops/s
# Warmup Iteration  26: 6319631.229 ops/s
# Warmup Iteration  27: 6272885.935 ops/s
# Warmup Iteration  28: 6299882.930 ops/s
# Warmup Iteration  29: 6266634.482 ops/s
# Warmup Iteration  30: 6276835.890 ops/s
Iteration   1: 6337775.947 ops/s
Iteration   2: 6253550.617 ops/s
Iteration   3: 6293727.039 ops/s
Iteration   4: 6155972.935 ops/s
Iteration   5: 6219259.406 ops/s
Iteration   6: 6290127.105 ops/s
Iteration   7: 6293413.886 ops/s
Iteration   8: 6291882.552 ops/s
Iteration   9: 6312110.538 ops/s
Iteration  10: 6316709.897 ops/s
Iteration  11: 6319757.495 ops/s
Iteration  12: 6243092.654 ops/s
Iteration  13: 6270349.074 ops/s
Iteration  14: 6239074.914 ops/s
Iteration  15: 6223626.683 ops/s
Iteration  16: 6290582.279 ops/s
Iteration  17: 6236364.153 ops/s
Iteration  18: 6126608.078 ops/s
Iteration  19: 6275624.539 ops/s
Iteration  20: 6146569.187 ops/s
Iteration  21: 6285759.453 ops/s
Iteration  22: 6303700.524 ops/s
Iteration  23: 6261765.865 ops/s
Iteration  24: 6266930.606 ops/s
Iteration  25: 6300531.059 ops/s
Iteration  26: 6306321.179 ops/s
Iteration  27: 6302015.253 ops/s
Iteration  28: 6304708.928 ops/s
Iteration  29: 6208619.114 ops/s
Iteration  30: 6319046.704 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_makeString":
  6266519.255 ±(99.9%) 35490.764 ops/s [Average]
  (min, avg, max) = (6126608.078, 6266519.255, 6337775.947), stdev = 53120.909
  CI (99.9%): [6231028.491, 6302010.020] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_makeString  thrpt   30  6266519.255 ± 35490.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2142235.509 ops/s
# Warmup Iteration   2: 4989758.372 ops/s
# Warmup Iteration   3: 5089831.457 ops/s
# Warmup Iteration   4: 4191731.729 ops/s
# Warmup Iteration   5: 5084165.955 ops/s
# Warmup Iteration   6: 5079915.172 ops/s
# Warmup Iteration   7: 5061888.796 ops/s
# Warmup Iteration   8: 5073571.712 ops/s
# Warmup Iteration   9: 5068085.970 ops/s
# Warmup Iteration  10: 5023272.106 ops/s
# Warmup Iteration  11: 5081022.810 ops/s
# Warmup Iteration  12: 5004465.539 ops/s
# Warmup Iteration  13: 5083645.571 ops/s
# Warmup Iteration  14: 5061259.029 ops/s
# Warmup Iteration  15: 5098810.188 ops/s
# Warmup Iteration  16: 5077291.088 ops/s
# Warmup Iteration  17: 5020177.325 ops/s
# Warmup Iteration  18: 5008583.836 ops/s
# Warmup Iteration  19: 5093162.284 ops/s
# Warmup Iteration  20: 5101582.824 ops/s
# Warmup Iteration  21: 5090734.560 ops/s
# Warmup Iteration  22: 5090983.811 ops/s
# Warmup Iteration  23: 5085324.915 ops/s
# Warmup Iteration  24: 5088214.072 ops/s
# Warmup Iteration  25: 5099978.267 ops/s
# Warmup Iteration  26: 5052181.889 ops/s
# Warmup Iteration  27: 4983519.040 ops/s
# Warmup Iteration  28: 5052876.451 ops/s
# Warmup Iteration  29: 5040522.267 ops/s
# Warmup Iteration  30: 5095053.612 ops/s
Iteration   1: 5065796.422 ops/s
Iteration   2: 5096953.087 ops/s
Iteration   3: 5093004.415 ops/s
Iteration   4: 4939438.101 ops/s
Iteration   5: 4975890.574 ops/s
Iteration   6: 5086988.100 ops/s
Iteration   7: 4999303.532 ops/s
Iteration   8: 5063848.606 ops/s
Iteration   9: 5104558.533 ops/s
Iteration  10: 5102031.480 ops/s
Iteration  11: 5076889.963 ops/s
Iteration  12: 5053756.735 ops/s
Iteration  13: 5071409.305 ops/s
Iteration  14: 5097582.968 ops/s
Iteration  15: 5079274.644 ops/s
Iteration  16: 5035515.220 ops/s
Iteration  17: 5076719.257 ops/s
Iteration  18: 4996986.512 ops/s
Iteration  19: 5120473.066 ops/s
Iteration  20: 5088011.486 ops/s
Iteration  21: 5061272.543 ops/s
Iteration  22: 5071270.371 ops/s
Iteration  23: 5099391.691 ops/s
Iteration  24: 5090012.506 ops/s
Iteration  25: 5076660.703 ops/s
Iteration  26: 5063753.857 ops/s
Iteration  27: 5103646.394 ops/s
Iteration  28: 5089851.947 ops/s
Iteration  29: 5102138.381 ops/s
Iteration  30: 5111123.376 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_makeStringWithSeparator":
  5069785.126 ±(99.9%) 28015.947 ops/s [Average]
  (min, avg, max) = (4939438.101, 5069785.126, 5120473.066), stdev = 41932.954
  CI (99.9%): [5041769.178, 5097801.073] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  5069785.126 ± 28015.947  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2816370.491 ops/s
# Warmup Iteration   2: 5924238.918 ops/s
# Warmup Iteration   3: 5945596.573 ops/s
# Warmup Iteration   4: 5009233.105 ops/s
# Warmup Iteration   5: 6000839.328 ops/s
# Warmup Iteration   6: 5948551.664 ops/s
# Warmup Iteration   7: 5962124.396 ops/s
# Warmup Iteration   8: 5918743.401 ops/s
# Warmup Iteration   9: 5995777.355 ops/s
# Warmup Iteration  10: 5983436.431 ops/s
# Warmup Iteration  11: 5918626.487 ops/s
# Warmup Iteration  12: 5940052.617 ops/s
# Warmup Iteration  13: 5972861.017 ops/s
# Warmup Iteration  14: 5967527.209 ops/s
# Warmup Iteration  15: 6018057.217 ops/s
# Warmup Iteration  16: 6011781.543 ops/s
# Warmup Iteration  17: 6033801.579 ops/s
# Warmup Iteration  18: 6032094.560 ops/s
# Warmup Iteration  19: 6012422.561 ops/s
# Warmup Iteration  20: 6033420.593 ops/s
# Warmup Iteration  21: 6051794.548 ops/s
# Warmup Iteration  22: 5970765.572 ops/s
# Warmup Iteration  23: 6031263.841 ops/s
# Warmup Iteration  24: 5998504.802 ops/s
# Warmup Iteration  25: 5943787.798 ops/s
# Warmup Iteration  26: 6023172.153 ops/s
# Warmup Iteration  27: 6033908.544 ops/s
# Warmup Iteration  28: 6021577.701 ops/s
# Warmup Iteration  29: 5992224.566 ops/s
# Warmup Iteration  30: 6015972.418 ops/s
Iteration   1: 6044512.285 ops/s
Iteration   2: 5988796.622 ops/s
Iteration   3: 5943526.838 ops/s
Iteration   4: 5913476.193 ops/s
Iteration   5: 6040826.163 ops/s
Iteration   6: 6088459.176 ops/s
Iteration   7: 5942978.033 ops/s
Iteration   8: 5904792.030 ops/s
Iteration   9: 6039043.913 ops/s
Iteration  10: 5953893.554 ops/s
Iteration  11: 5983214.937 ops/s
Iteration  12: 6029684.973 ops/s
Iteration  13: 6027992.525 ops/s
Iteration  14: 6008788.113 ops/s
Iteration  15: 6010890.133 ops/s
Iteration  16: 5922885.858 ops/s
Iteration  17: 6023512.749 ops/s
Iteration  18: 5957711.432 ops/s
Iteration  19: 5975859.529 ops/s
Iteration  20: 5981203.305 ops/s
Iteration  21: 5913759.940 ops/s
Iteration  22: 6018001.272 ops/s
Iteration  23: 6011347.155 ops/s
Iteration  24: 6055227.036 ops/s
Iteration  25: 6055430.317 ops/s
Iteration  26: 5896642.253 ops/s
Iteration  27: 5997261.718 ops/s
Iteration  28: 6009932.273 ops/s
Iteration  29: 6048724.229 ops/s
Iteration  30: 6007942.863 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  5993210.581 ±(99.9%) 34081.357 ops/s [Average]
  (min, avg, max) = (5896642.253, 5993210.581, 6088459.176), stdev = 51011.374
  CI (99.9%): [5959129.224, 6027291.937] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  5993210.581 ± 34081.357  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6537399.572 ops/s
# Warmup Iteration   2: 13327104.883 ops/s
# Warmup Iteration   3: 11392675.092 ops/s
# Warmup Iteration   4: 12184437.681 ops/s
# Warmup Iteration   5: 12306414.625 ops/s
# Warmup Iteration   6: 12222518.048 ops/s
# Warmup Iteration   7: 12148432.960 ops/s
# Warmup Iteration   8: 12217310.847 ops/s
# Warmup Iteration   9: 12209963.099 ops/s
# Warmup Iteration  10: 12092094.641 ops/s
# Warmup Iteration  11: 12264731.350 ops/s
# Warmup Iteration  12: 12252378.476 ops/s
# Warmup Iteration  13: 12144722.013 ops/s
# Warmup Iteration  14: 12234392.631 ops/s
# Warmup Iteration  15: 12254814.334 ops/s
# Warmup Iteration  16: 12295658.516 ops/s
# Warmup Iteration  17: 13476978.604 ops/s
# Warmup Iteration  18: 13408568.765 ops/s
# Warmup Iteration  19: 13450041.300 ops/s
# Warmup Iteration  20: 13451763.531 ops/s
# Warmup Iteration  21: 13237825.096 ops/s
# Warmup Iteration  22: 13494138.578 ops/s
# Warmup Iteration  23: 13480545.913 ops/s
# Warmup Iteration  24: 13440022.875 ops/s
# Warmup Iteration  25: 13445949.960 ops/s
# Warmup Iteration  26: 13325611.999 ops/s
# Warmup Iteration  27: 13433082.219 ops/s
# Warmup Iteration  28: 13441595.746 ops/s
# Warmup Iteration  29: 13495475.628 ops/s
# Warmup Iteration  30: 13439002.722 ops/s
Iteration   1: 13486952.395 ops/s
Iteration   2: 13479131.802 ops/s
Iteration   3: 13449796.480 ops/s
Iteration   4: 13469304.927 ops/s
Iteration   5: 13440894.627 ops/s
Iteration   6: 13505497.585 ops/s
Iteration   7: 13243168.337 ops/s
Iteration   8: 13475001.622 ops/s
Iteration   9: 13472670.861 ops/s
Iteration  10: 13295986.575 ops/s
Iteration  11: 13479802.593 ops/s
Iteration  12: 13444628.178 ops/s
Iteration  13: 13488721.604 ops/s
Iteration  14: 13464389.328 ops/s
Iteration  15: 13475910.521 ops/s
Iteration  16: 13461334.944 ops/s
Iteration  17: 13493487.345 ops/s
Iteration  18: 13525009.754 ops/s
Iteration  19: 13308351.148 ops/s
Iteration  20: 13448134.696 ops/s
Iteration  21: 13386313.440 ops/s
Iteration  22: 13468022.591 ops/s
Iteration  23: 13258083.289 ops/s
Iteration  24: 13420113.236 ops/s
Iteration  25: 13443997.892 ops/s
Iteration  26: 13444868.700 ops/s
Iteration  27: 13491409.838 ops/s
Iteration  28: 13507155.045 ops/s
Iteration  29: 13482923.001 ops/s
Iteration  30: 13410694.085 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max":
  13440725.215 ±(99.9%) 48305.159 ops/s [Average]
  (min, avg, max) = (13243168.337, 13440725.215, 13525009.754), stdev = 72300.894
  CI (99.9%): [13392420.055, 13489030.374] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_max  thrpt   30  13440725.215 ± 48305.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5047303.234 ops/s
# Warmup Iteration   2: 10091645.587 ops/s
# Warmup Iteration   3: 8774515.647 ops/s
# Warmup Iteration   4: 10454755.281 ops/s
# Warmup Iteration   5: 10434639.633 ops/s
# Warmup Iteration   6: 10376525.828 ops/s
# Warmup Iteration   7: 10373468.952 ops/s
# Warmup Iteration   8: 10479297.799 ops/s
# Warmup Iteration   9: 10469842.862 ops/s
# Warmup Iteration  10: 10453728.592 ops/s
# Warmup Iteration  11: 10361475.935 ops/s
# Warmup Iteration  12: 10349217.640 ops/s
# Warmup Iteration  13: 10361207.376 ops/s
# Warmup Iteration  14: 10476349.818 ops/s
# Warmup Iteration  15: 10427029.803 ops/s
# Warmup Iteration  16: 10463090.576 ops/s
# Warmup Iteration  17: 10338791.326 ops/s
# Warmup Iteration  18: 10319795.901 ops/s
# Warmup Iteration  19: 10398772.504 ops/s
# Warmup Iteration  20: 10326653.594 ops/s
# Warmup Iteration  21: 10242758.728 ops/s
# Warmup Iteration  22: 10315628.342 ops/s
# Warmup Iteration  23: 10356970.898 ops/s
# Warmup Iteration  24: 10348315.037 ops/s
# Warmup Iteration  25: 10342261.150 ops/s
# Warmup Iteration  26: 10380990.111 ops/s
# Warmup Iteration  27: 10312579.290 ops/s
# Warmup Iteration  28: 10239647.232 ops/s
# Warmup Iteration  29: 10361165.126 ops/s
# Warmup Iteration  30: 10333930.056 ops/s
Iteration   1: 10339602.777 ops/s
Iteration   2: 10429812.401 ops/s
Iteration   3: 10393300.573 ops/s
Iteration   4: 10336792.204 ops/s
Iteration   5: 10367843.275 ops/s
Iteration   6: 10404599.903 ops/s
Iteration   7: 10341157.785 ops/s
Iteration   8: 10303039.288 ops/s
Iteration   9: 10384771.742 ops/s
Iteration  10: 10088998.491 ops/s
Iteration  11: 10394434.909 ops/s
Iteration  12: 10339448.040 ops/s
Iteration  13: 10244067.150 ops/s
Iteration  14: 10081173.571 ops/s
Iteration  15: 10297072.150 ops/s
Iteration  16: 10149540.374 ops/s
Iteration  17: 10388768.693 ops/s
Iteration  18: 10172047.731 ops/s
Iteration  19: 10405002.827 ops/s
Iteration  20: 9988281.599 ops/s
Iteration  21: 10346439.495 ops/s
Iteration  22: 10359097.160 ops/s
Iteration  23: 10350707.704 ops/s
Iteration  24: 10289821.524 ops/s
Iteration  25: 10302831.377 ops/s
Iteration  26: 10388555.024 ops/s
Iteration  27: 10276002.129 ops/s
Iteration  28: 10291012.590 ops/s
Iteration  29: 10318613.624 ops/s
Iteration  30: 10330852.799 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_maxBy":
  10303456.297 ±(99.9%) 71462.534 ops/s [Average]
  (min, avg, max) = (9988281.599, 10303456.297, 10429812.401), stdev = 106961.765
  CI (99.9%): [10231993.763, 10374918.831] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_maxBy  thrpt   30  10303456.297 ± 71462.534  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2186849.247 ops/s
# Warmup Iteration   2: 5081435.186 ops/s
# Warmup Iteration   3: 4786196.015 ops/s
# Warmup Iteration   4: 4509942.401 ops/s
# Warmup Iteration   5: 5092945.130 ops/s
# Warmup Iteration   6: 5023664.295 ops/s
# Warmup Iteration   7: 5105352.567 ops/s
# Warmup Iteration   8: 5090834.904 ops/s
# Warmup Iteration   9: 5105516.838 ops/s
# Warmup Iteration  10: 5111533.826 ops/s
# Warmup Iteration  11: 5102104.342 ops/s
# Warmup Iteration  12: 5099145.062 ops/s
# Warmup Iteration  13: 5096600.475 ops/s
# Warmup Iteration  14: 5002200.296 ops/s
# Warmup Iteration  15: 5084133.808 ops/s
# Warmup Iteration  16: 5092054.669 ops/s
# Warmup Iteration  17: 5041679.062 ops/s
# Warmup Iteration  18: 5028700.838 ops/s
# Warmup Iteration  19: 5041253.827 ops/s
# Warmup Iteration  20: 5085281.050 ops/s
# Warmup Iteration  21: 5070798.855 ops/s
# Warmup Iteration  22: 5074468.730 ops/s
# Warmup Iteration  23: 5053047.142 ops/s
# Warmup Iteration  24: 5030901.422 ops/s
# Warmup Iteration  25: 5067297.428 ops/s
# Warmup Iteration  26: 5052461.658 ops/s
# Warmup Iteration  27: 5057013.885 ops/s
# Warmup Iteration  28: 5093880.813 ops/s
# Warmup Iteration  29: 5071679.271 ops/s
# Warmup Iteration  30: 5051415.235 ops/s
Iteration   1: 5089729.194 ops/s
Iteration   2: 5080710.013 ops/s
Iteration   3: 5033273.382 ops/s
Iteration   4: 5080676.422 ops/s
Iteration   5: 5081749.137 ops/s
Iteration   6: 4985949.782 ops/s
Iteration   7: 5078818.652 ops/s
Iteration   8: 5096951.418 ops/s
Iteration   9: 5085253.214 ops/s
Iteration  10: 5040274.663 ops/s
Iteration  11: 5078172.485 ops/s
Iteration  12: 5081344.805 ops/s
Iteration  13: 5090511.367 ops/s
Iteration  14: 5124664.624 ops/s
Iteration  15: 5051553.417 ops/s
Iteration  16: 5079757.146 ops/s
Iteration  17: 5055870.358 ops/s
Iteration  18: 5066789.712 ops/s
Iteration  19: 4986627.004 ops/s
Iteration  20: 5017580.031 ops/s
Iteration  21: 5102773.735 ops/s
Iteration  22: 5033556.290 ops/s
Iteration  23: 5073607.743 ops/s
Iteration  24: 5088500.741 ops/s
Iteration  25: 5093749.541 ops/s
Iteration  26: 5095694.157 ops/s
Iteration  27: 5083404.932 ops/s
Iteration  28: 5009534.970 ops/s
Iteration  29: 5054077.269 ops/s
Iteration  30: 5073759.771 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_maxByOptional":
  5066497.199 ±(99.9%) 22453.965 ops/s [Average]
  (min, avg, max) = (4985949.782, 5066497.199, 5124664.624), stdev = 33608.041
  CI (99.9%): [5044043.234, 5088951.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_maxByOptional  thrpt   30  5066497.199 ± 22453.965  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6246668.459 ops/s
# Warmup Iteration   2: 13046188.054 ops/s
# Warmup Iteration   3: 11635964.236 ops/s
# Warmup Iteration   4: 12647036.852 ops/s
# Warmup Iteration   5: 13224330.070 ops/s
# Warmup Iteration   6: 13272516.562 ops/s
# Warmup Iteration   7: 13239367.471 ops/s
# Warmup Iteration   8: 13274721.054 ops/s
# Warmup Iteration   9: 13269011.430 ops/s
# Warmup Iteration  10: 13304903.552 ops/s
# Warmup Iteration  11: 13127977.984 ops/s
# Warmup Iteration  12: 13198584.600 ops/s
# Warmup Iteration  13: 13225413.598 ops/s
# Warmup Iteration  14: 13120816.533 ops/s
# Warmup Iteration  15: 13122861.263 ops/s
# Warmup Iteration  16: 13195279.161 ops/s
# Warmup Iteration  17: 13291063.837 ops/s
# Warmup Iteration  18: 13192236.410 ops/s
# Warmup Iteration  19: 13285510.975 ops/s
# Warmup Iteration  20: 13280509.952 ops/s
# Warmup Iteration  21: 13269498.355 ops/s
# Warmup Iteration  22: 13301400.875 ops/s
# Warmup Iteration  23: 13315456.289 ops/s
# Warmup Iteration  24: 13292348.380 ops/s
# Warmup Iteration  25: 13180076.678 ops/s
# Warmup Iteration  26: 13301640.924 ops/s
# Warmup Iteration  27: 13315200.313 ops/s
# Warmup Iteration  28: 13348247.627 ops/s
# Warmup Iteration  29: 13184623.543 ops/s
# Warmup Iteration  30: 13214160.335 ops/s
Iteration   1: 13311837.424 ops/s
Iteration   2: 13363190.796 ops/s
Iteration   3: 13302928.173 ops/s
Iteration   4: 13356127.301 ops/s
Iteration   5: 13326263.072 ops/s
Iteration   6: 13143387.288 ops/s
Iteration   7: 13035805.504 ops/s
Iteration   8: 13274111.274 ops/s
Iteration   9: 13248039.196 ops/s
Iteration  10: 13299896.916 ops/s
Iteration  11: 13203893.961 ops/s
Iteration  12: 13327215.195 ops/s
Iteration  13: 13357169.780 ops/s
Iteration  14: 13273253.940 ops/s
Iteration  15: 13347291.896 ops/s
Iteration  16: 13298064.443 ops/s
Iteration  17: 13300099.548 ops/s
Iteration  18: 13217677.455 ops/s
Iteration  19: 13099585.672 ops/s
Iteration  20: 13294619.913 ops/s
Iteration  21: 13291013.038 ops/s
Iteration  22: 13313467.054 ops/s
Iteration  23: 13274166.704 ops/s
Iteration  24: 13263327.462 ops/s
Iteration  25: 13268145.744 ops/s
Iteration  26: 13110367.127 ops/s
Iteration  27: 13292483.317 ops/s
Iteration  28: 13164547.211 ops/s
Iteration  29: 13104360.092 ops/s
Iteration  30: 13288804.135 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_maxBy_null_throws":
  13258371.354 ±(99.9%) 57247.403 ops/s [Average]
  (min, avg, max) = (13035805.504, 13258371.354, 13363190.796), stdev = 85685.224
  CI (99.9%): [13201123.951, 13315618.758] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  13258371.354 ± 57247.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1538272.714 ops/s
# Warmup Iteration   2: 3355843.237 ops/s
# Warmup Iteration   3: 2883306.852 ops/s
# Warmup Iteration   4: 3319887.350 ops/s
# Warmup Iteration   5: 3341956.092 ops/s
# Warmup Iteration   6: 3385106.903 ops/s
# Warmup Iteration   7: 3382306.352 ops/s
# Warmup Iteration   8: 3387417.588 ops/s
# Warmup Iteration   9: 3350634.326 ops/s
# Warmup Iteration  10: 3382882.986 ops/s
# Warmup Iteration  11: 3388844.397 ops/s
# Warmup Iteration  12: 3367236.290 ops/s
# Warmup Iteration  13: 3339842.810 ops/s
# Warmup Iteration  14: 3388727.840 ops/s
# Warmup Iteration  15: 3339656.414 ops/s
# Warmup Iteration  16: 3356308.047 ops/s
# Warmup Iteration  17: 3364166.379 ops/s
# Warmup Iteration  18: 3350937.098 ops/s
# Warmup Iteration  19: 3357532.985 ops/s
# Warmup Iteration  20: 3385245.992 ops/s
# Warmup Iteration  21: 3375910.108 ops/s
# Warmup Iteration  22: 3376105.867 ops/s
# Warmup Iteration  23: 3368064.955 ops/s
# Warmup Iteration  24: 3359057.198 ops/s
# Warmup Iteration  25: 3385505.478 ops/s
# Warmup Iteration  26: 3394921.782 ops/s
# Warmup Iteration  27: 3381747.958 ops/s
# Warmup Iteration  28: 3357852.445 ops/s
# Warmup Iteration  29: 3390311.880 ops/s
# Warmup Iteration  30: 3353523.608 ops/s
Iteration   1: 3382778.009 ops/s
Iteration   2: 3363932.569 ops/s
Iteration   3: 3373203.824 ops/s
Iteration   4: 3397585.857 ops/s
Iteration   5: 3362929.938 ops/s
Iteration   6: 3316801.281 ops/s
Iteration   7: 3390796.943 ops/s
Iteration   8: 3371836.898 ops/s
Iteration   9: 3369869.564 ops/s
Iteration  10: 3393334.048 ops/s
Iteration  11: 3351150.161 ops/s
Iteration  12: 3383327.419 ops/s
Iteration  13: 3378079.959 ops/s
Iteration  14: 3382610.221 ops/s
Iteration  15: 3363931.391 ops/s
Iteration  16: 3326200.304 ops/s
Iteration  17: 3373894.408 ops/s
Iteration  18: 3347228.046 ops/s
Iteration  19: 3395929.352 ops/s
Iteration  20: 3390946.517 ops/s
Iteration  21: 3378186.968 ops/s
Iteration  22: 3322789.688 ops/s
Iteration  23: 3363093.088 ops/s
Iteration  24: 3385132.146 ops/s
Iteration  25: 3386400.925 ops/s
Iteration  26: 3369013.157 ops/s
Iteration  27: 3372684.408 ops/s
Iteration  28: 3379042.653 ops/s
Iteration  29: 3372898.722 ops/s
Iteration  30: 3378647.090 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_maxOptional":
  3370808.519 ±(99.9%) 13694.564 ops/s [Average]
  (min, avg, max) = (3316801.281, 3370808.519, 3397585.857), stdev = 20497.380
  CI (99.9%): [3357113.955, 3384503.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_maxOptional  thrpt   30  3370808.519 ± 13694.564  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 680571.343 ops/s
# Warmup Iteration   2: 713578.891 ops/s
# Warmup Iteration   3: 948554.381 ops/s
# Warmup Iteration   4: 953098.746 ops/s
# Warmup Iteration   5: 958331.237 ops/s
# Warmup Iteration   6: 952954.677 ops/s
# Warmup Iteration   7: 958108.452 ops/s
# Warmup Iteration   8: 960587.179 ops/s
# Warmup Iteration   9: 948320.641 ops/s
# Warmup Iteration  10: 950263.713 ops/s
# Warmup Iteration  11: 921492.067 ops/s
# Warmup Iteration  12: 825519.319 ops/s
# Warmup Iteration  13: 960784.927 ops/s
# Warmup Iteration  14: 948255.905 ops/s
# Warmup Iteration  15: 947214.880 ops/s
# Warmup Iteration  16: 955325.167 ops/s
# Warmup Iteration  17: 1015137.502 ops/s
# Warmup Iteration  18: 1015375.511 ops/s
# Warmup Iteration  19: 1008666.156 ops/s
# Warmup Iteration  20: 1014182.068 ops/s
# Warmup Iteration  21: 1016388.043 ops/s
# Warmup Iteration  22: 1004835.359 ops/s
# Warmup Iteration  23: 1005312.625 ops/s
# Warmup Iteration  24: 1008313.148 ops/s
# Warmup Iteration  25: 1010372.687 ops/s
# Warmup Iteration  26: 1003823.645 ops/s
# Warmup Iteration  27: 1015418.381 ops/s
# Warmup Iteration  28: 1005150.967 ops/s
# Warmup Iteration  29: 1014752.690 ops/s
# Warmup Iteration  30: 1018413.318 ops/s
Iteration   1: 1017007.299 ops/s
Iteration   2: 995411.796 ops/s
Iteration   3: 1019826.143 ops/s
Iteration   4: 1022645.301 ops/s
Iteration   5: 1014940.578 ops/s
Iteration   6: 999354.290 ops/s
Iteration   7: 1019080.004 ops/s
Iteration   8: 1016476.743 ops/s
Iteration   9: 1011814.300 ops/s
Iteration  10: 1015813.818 ops/s
Iteration  11: 1003058.448 ops/s
Iteration  12: 1015993.681 ops/s
Iteration  13: 1006930.523 ops/s
Iteration  14: 1018122.360 ops/s
Iteration  15: 1013704.993 ops/s
Iteration  16: 998625.631 ops/s
Iteration  17: 1017148.540 ops/s
Iteration  18: 1021364.402 ops/s
Iteration  19: 1019538.128 ops/s
Iteration  20: 1013134.626 ops/s
Iteration  21: 1014249.275 ops/s
Iteration  22: 1015526.097 ops/s
Iteration  23: 1013486.723 ops/s
Iteration  24: 1011951.967 ops/s
Iteration  25: 1003617.197 ops/s
Iteration  26: 1014408.781 ops/s
Iteration  27: 1016182.228 ops/s
Iteration  28: 1013894.960 ops/s
Iteration  29: 1010600.875 ops/s
Iteration  30: 1017739.642 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_empty_throws":
  1013054.978 ±(99.9%) 4574.749 ops/s [Average]
  (min, avg, max) = (995411.796, 1013054.978, 1022645.301), stdev = 6847.270
  CI (99.9%): [1008480.229, 1017629.728] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_max_empty_throws  thrpt   30  1013054.978 ± 4574.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4115459.667 ops/s
# Warmup Iteration   2: 8643372.783 ops/s
# Warmup Iteration   3: 8672847.014 ops/s
# Warmup Iteration   4: 7328423.191 ops/s
# Warmup Iteration   5: 8733099.227 ops/s
# Warmup Iteration   6: 8693971.775 ops/s
# Warmup Iteration   7: 8776562.320 ops/s
# Warmup Iteration   8: 8737937.097 ops/s
# Warmup Iteration   9: 8763136.840 ops/s
# Warmup Iteration  10: 8731706.546 ops/s
# Warmup Iteration  11: 8679849.954 ops/s
# Warmup Iteration  12: 8641727.004 ops/s
# Warmup Iteration  13: 8635595.450 ops/s
# Warmup Iteration  14: 8702725.313 ops/s
# Warmup Iteration  15: 8614521.192 ops/s
# Warmup Iteration  16: 8625195.445 ops/s
# Warmup Iteration  17: 8870214.699 ops/s
# Warmup Iteration  18: 8843166.878 ops/s
# Warmup Iteration  19: 8851045.241 ops/s
# Warmup Iteration  20: 8792102.212 ops/s
# Warmup Iteration  21: 8803766.374 ops/s
# Warmup Iteration  22: 8807370.193 ops/s
# Warmup Iteration  23: 8710180.128 ops/s
# Warmup Iteration  24: 8818486.925 ops/s
# Warmup Iteration  25: 8793248.113 ops/s
# Warmup Iteration  26: 8761586.880 ops/s
# Warmup Iteration  27: 8826103.960 ops/s
# Warmup Iteration  28: 8801837.901 ops/s
# Warmup Iteration  29: 8898355.080 ops/s
# Warmup Iteration  30: 8708978.379 ops/s
Iteration   1: 8854659.637 ops/s
Iteration   2: 8760224.316 ops/s
Iteration   3: 8624851.906 ops/s
Iteration   4: 8712998.498 ops/s
Iteration   5: 8814466.759 ops/s
Iteration   6: 8744014.097 ops/s
Iteration   7: 8684061.991 ops/s
Iteration   8: 8691467.384 ops/s
Iteration   9: 8841353.355 ops/s
Iteration  10: 8839621.407 ops/s
Iteration  11: 8638746.050 ops/s
Iteration  12: 8791902.037 ops/s
Iteration  13: 8802967.980 ops/s
Iteration  14: 8857321.161 ops/s
Iteration  15: 8896222.907 ops/s
Iteration  16: 8797946.513 ops/s
Iteration  17: 8927797.689 ops/s
Iteration  18: 8845401.502 ops/s
Iteration  19: 8701529.151 ops/s
Iteration  20: 8815348.766 ops/s
Iteration  21: 8847800.102 ops/s
Iteration  22: 8881214.064 ops/s
Iteration  23: 8829255.953 ops/s
Iteration  24: 8813923.063 ops/s
Iteration  25: 8808591.349 ops/s
Iteration  26: 8823515.638 ops/s
Iteration  27: 8727616.985 ops/s
Iteration  28: 8672591.550 ops/s
Iteration  29: 8884932.015 ops/s
Iteration  30: 8635483.469 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_null_safe":
  8785594.243 ±(99.9%) 55718.353 ops/s [Average]
  (min, avg, max) = (8624851.906, 8785594.243, 8927797.689), stdev = 83396.614
  CI (99.9%): [8729875.890, 8841312.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_max_null_safe  thrpt   30  8785594.243 ± 55718.353  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3589206.804 ops/s
# Warmup Iteration   2: 6535322.851 ops/s
# Warmup Iteration   3: 7176314.099 ops/s
# Warmup Iteration   4: 7089394.774 ops/s
# Warmup Iteration   5: 6374883.638 ops/s
# Warmup Iteration   6: 6697804.766 ops/s
# Warmup Iteration   7: 7206354.315 ops/s
# Warmup Iteration   8: 7187705.608 ops/s
# Warmup Iteration   9: 7162539.919 ops/s
# Warmup Iteration  10: 7149174.699 ops/s
# Warmup Iteration  11: 7194494.776 ops/s
# Warmup Iteration  12: 7200076.858 ops/s
# Warmup Iteration  13: 7152236.518 ops/s
# Warmup Iteration  14: 7167695.818 ops/s
# Warmup Iteration  15: 7200469.780 ops/s
# Warmup Iteration  16: 7120975.729 ops/s
# Warmup Iteration  17: 7130596.928 ops/s
# Warmup Iteration  18: 7057597.425 ops/s
# Warmup Iteration  19: 7138496.953 ops/s
# Warmup Iteration  20: 7136206.473 ops/s
# Warmup Iteration  21: 7070740.895 ops/s
# Warmup Iteration  22: 7123613.528 ops/s
# Warmup Iteration  23: 7126091.014 ops/s
# Warmup Iteration  24: 7145694.676 ops/s
# Warmup Iteration  25: 7111373.753 ops/s
# Warmup Iteration  26: 7114401.876 ops/s
# Warmup Iteration  27: 7102358.512 ops/s
# Warmup Iteration  28: 7165577.002 ops/s
# Warmup Iteration  29: 7072960.183 ops/s
# Warmup Iteration  30: 7099838.370 ops/s
Iteration   1: 7146329.067 ops/s
Iteration   2: 7161052.949 ops/s
Iteration   3: 7225094.265 ops/s
Iteration   4: 7126307.345 ops/s
Iteration   5: 7164526.291 ops/s
Iteration   6: 7130319.968 ops/s
Iteration   7: 7138229.952 ops/s
Iteration   8: 7180829.523 ops/s
Iteration   9: 7095166.503 ops/s
Iteration  10: 7161700.272 ops/s
Iteration  11: 7144563.013 ops/s
Iteration  12: 7136167.274 ops/s
Iteration  13: 7151928.045 ops/s
Iteration  14: 7110467.991 ops/s
Iteration  15: 7092012.114 ops/s
Iteration  16: 7184801.652 ops/s
Iteration  17: 7100759.441 ops/s
Iteration  18: 7117998.567 ops/s
Iteration  19: 7014042.281 ops/s
Iteration  20: 7148675.219 ops/s
Iteration  21: 7119411.122 ops/s
Iteration  22: 7131889.948 ops/s
Iteration  23: 7100651.782 ops/s
Iteration  24: 7117979.602 ops/s
Iteration  25: 7142031.132 ops/s
Iteration  26: 7209718.925 ops/s
Iteration  27: 7111575.948 ops/s
Iteration  28: 7152710.986 ops/s
Iteration  29: 7161189.868 ops/s
Iteration  30: 7152820.180 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_null_throws":
  7137698.374 ±(99.9%) 26287.319 ops/s [Average]
  (min, avg, max) = (7014042.281, 7137698.374, 7225094.265), stdev = 39345.625
  CI (99.9%): [7111411.055, 7163985.694] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_max_null_throws  thrpt   30  7137698.374 ± 26287.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 138222.314 ops/s
# Warmup Iteration   2: 146250.340 ops/s
# Warmup Iteration   3: 144982.929 ops/s
# Warmup Iteration   4: 145802.404 ops/s
# Warmup Iteration   5: 145926.804 ops/s
# Warmup Iteration   6: 145956.252 ops/s
# Warmup Iteration   7: 144286.347 ops/s
# Warmup Iteration   8: 143869.880 ops/s
# Warmup Iteration   9: 146153.915 ops/s
# Warmup Iteration  10: 150813.898 ops/s
# Warmup Iteration  11: 154464.163 ops/s
# Warmup Iteration  12: 155105.375 ops/s
# Warmup Iteration  13: 154183.276 ops/s
# Warmup Iteration  14: 155412.003 ops/s
# Warmup Iteration  15: 155180.387 ops/s
# Warmup Iteration  16: 155041.517 ops/s
# Warmup Iteration  17: 158456.650 ops/s
# Warmup Iteration  18: 157989.262 ops/s
# Warmup Iteration  19: 158237.833 ops/s
# Warmup Iteration  20: 158597.867 ops/s
# Warmup Iteration  21: 157920.664 ops/s
# Warmup Iteration  22: 158260.988 ops/s
# Warmup Iteration  23: 157824.895 ops/s
# Warmup Iteration  24: 156615.465 ops/s
# Warmup Iteration  25: 157262.009 ops/s
# Warmup Iteration  26: 157950.736 ops/s
# Warmup Iteration  27: 157829.266 ops/s
# Warmup Iteration  28: 158307.410 ops/s
# Warmup Iteration  29: 156913.179 ops/s
# Warmup Iteration  30: 157749.854 ops/s
Iteration   1: 159316.245 ops/s
Iteration   2: 156692.152 ops/s
Iteration   3: 158237.563 ops/s
Iteration   4: 155849.445 ops/s
Iteration   5: 157583.526 ops/s
Iteration   6: 156210.377 ops/s
Iteration   7: 155411.594 ops/s
Iteration   8: 158189.059 ops/s
Iteration   9: 159008.166 ops/s
Iteration  10: 159093.206 ops/s
Iteration  11: 153491.839 ops/s
Iteration  12: 158054.723 ops/s
Iteration  13: 158943.354 ops/s
Iteration  14: 156838.172 ops/s
Iteration  15: 157451.830 ops/s
Iteration  16: 158149.009 ops/s
Iteration  17: 157541.289 ops/s
Iteration  18: 159632.005 ops/s
Iteration  19: 157640.589 ops/s
Iteration  20: 157350.040 ops/s
Iteration  21: 157283.819 ops/s
Iteration  22: 157241.875 ops/s
Iteration  23: 160679.359 ops/s
Iteration  24: 157688.983 ops/s
Iteration  25: 158840.473 ops/s
Iteration  26: 159030.787 ops/s
Iteration  27: 156766.258 ops/s
Iteration  28: 157927.842 ops/s
Iteration  29: 158328.651 ops/s
Iteration  30: 158693.840 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  157772.202 ±(99.9%) 940.399 ops/s [Average]
  (min, avg, max) = (153491.839, 157772.202, 160679.359), stdev = 1407.545
  CI (99.9%): [156831.803, 158712.601] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  157772.202 ± 940.399  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6511549.935 ops/s
# Warmup Iteration   2: 13226406.955 ops/s
# Warmup Iteration   3: 11428200.109 ops/s
# Warmup Iteration   4: 13059852.490 ops/s
# Warmup Iteration   5: 13334994.068 ops/s
# Warmup Iteration   6: 13272349.269 ops/s
# Warmup Iteration   7: 13285404.506 ops/s
# Warmup Iteration   8: 13245249.462 ops/s
# Warmup Iteration   9: 13218850.913 ops/s
# Warmup Iteration  10: 13080270.790 ops/s
# Warmup Iteration  11: 13165786.521 ops/s
# Warmup Iteration  12: 13279461.202 ops/s
# Warmup Iteration  13: 13300181.188 ops/s
# Warmup Iteration  14: 13272515.534 ops/s
# Warmup Iteration  15: 13206660.108 ops/s
# Warmup Iteration  16: 13283381.079 ops/s
# Warmup Iteration  17: 13369305.063 ops/s
# Warmup Iteration  18: 13424989.949 ops/s
# Warmup Iteration  19: 13295325.954 ops/s
# Warmup Iteration  20: 13365136.091 ops/s
# Warmup Iteration  21: 13381077.008 ops/s
# Warmup Iteration  22: 13398862.697 ops/s
# Warmup Iteration  23: 13385659.619 ops/s
# Warmup Iteration  24: 13405531.358 ops/s
# Warmup Iteration  25: 13430127.430 ops/s
# Warmup Iteration  26: 13345976.452 ops/s
# Warmup Iteration  27: 13359278.424 ops/s
# Warmup Iteration  28: 13431016.683 ops/s
# Warmup Iteration  29: 13363542.572 ops/s
# Warmup Iteration  30: 13302886.569 ops/s
Iteration   1: 13259268.129 ops/s
Iteration   2: 13397216.115 ops/s
Iteration   3: 13445567.618 ops/s
Iteration   4: 13488819.961 ops/s
Iteration   5: 13354980.659 ops/s
Iteration   6: 13471479.413 ops/s
Iteration   7: 13334933.072 ops/s
Iteration   8: 13443304.367 ops/s
Iteration   9: 13374446.539 ops/s
Iteration  10: 13325700.317 ops/s
Iteration  11: 13285817.605 ops/s
Iteration  12: 13333426.569 ops/s
Iteration  13: 13440948.655 ops/s
Iteration  14: 13413077.201 ops/s
Iteration  15: 13437485.877 ops/s
Iteration  16: 13425459.454 ops/s
Iteration  17: 13365795.336 ops/s
Iteration  18: 13450818.516 ops/s
Iteration  19: 13334113.384 ops/s
Iteration  20: 13486083.807 ops/s
Iteration  21: 13430095.175 ops/s
Iteration  22: 13433834.474 ops/s
Iteration  23: 13299962.115 ops/s
Iteration  24: 13327225.638 ops/s
Iteration  25: 13381506.403 ops/s
Iteration  26: 13406286.896 ops/s
Iteration  27: 13355786.219 ops/s
Iteration  28: 13418531.532 ops/s
Iteration  29: 13396900.070 ops/s
Iteration  30: 13338429.223 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_max_without_comparator":
  13388576.678 ±(99.9%) 40391.185 ops/s [Average]
  (min, avg, max) = (13259268.129, 13388576.678, 13488819.961), stdev = 60455.629
  CI (99.9%): [13348185.493, 13428967.863] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  13388576.678 ± 40391.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6540023.508 ops/s
# Warmup Iteration   2: 13435089.538 ops/s
# Warmup Iteration   3: 11304612.143 ops/s
# Warmup Iteration   4: 13226006.243 ops/s
# Warmup Iteration   5: 13385355.157 ops/s
# Warmup Iteration   6: 13344078.815 ops/s
# Warmup Iteration   7: 13323274.220 ops/s
# Warmup Iteration   8: 13415561.688 ops/s
# Warmup Iteration   9: 13360501.802 ops/s
# Warmup Iteration  10: 13169401.698 ops/s
# Warmup Iteration  11: 13375605.462 ops/s
# Warmup Iteration  12: 13392922.311 ops/s
# Warmup Iteration  13: 13291556.557 ops/s
# Warmup Iteration  14: 13256848.302 ops/s
# Warmup Iteration  15: 13107837.902 ops/s
# Warmup Iteration  16: 13350155.225 ops/s
# Warmup Iteration  17: 13251680.117 ops/s
# Warmup Iteration  18: 13485189.592 ops/s
# Warmup Iteration  19: 13480778.868 ops/s
# Warmup Iteration  20: 13275852.072 ops/s
# Warmup Iteration  21: 13421349.517 ops/s
# Warmup Iteration  22: 13540217.470 ops/s
# Warmup Iteration  23: 13362302.513 ops/s
# Warmup Iteration  24: 13544710.269 ops/s
# Warmup Iteration  25: 13474848.633 ops/s
# Warmup Iteration  26: 13573324.126 ops/s
# Warmup Iteration  27: 13459915.157 ops/s
# Warmup Iteration  28: 13482313.279 ops/s
# Warmup Iteration  29: 13336342.891 ops/s
# Warmup Iteration  30: 13252711.823 ops/s
Iteration   1: 13567103.038 ops/s
Iteration   2: 13514808.210 ops/s
Iteration   3: 13274338.704 ops/s
Iteration   4: 13570801.997 ops/s
Iteration   5: 13425162.300 ops/s
Iteration   6: 13508619.626 ops/s
Iteration   7: 13492977.051 ops/s
Iteration   8: 13440666.654 ops/s
Iteration   9: 13432041.711 ops/s
Iteration  10: 13490195.983 ops/s
Iteration  11: 13511920.263 ops/s
Iteration  12: 13503546.580 ops/s
Iteration  13: 13512205.259 ops/s
Iteration  14: 13479482.796 ops/s
Iteration  15: 13320977.357 ops/s
Iteration  16: 13564892.503 ops/s
Iteration  17: 13437330.208 ops/s
Iteration  18: 13488067.302 ops/s
Iteration  19: 13527352.348 ops/s
Iteration  20: 13437725.956 ops/s
Iteration  21: 13459716.109 ops/s
Iteration  22: 13477724.512 ops/s
Iteration  23: 13479916.496 ops/s
Iteration  24: 13507233.263 ops/s
Iteration  25: 13460853.200 ops/s
Iteration  26: 13504569.730 ops/s
Iteration  27: 13474083.066 ops/s
Iteration  28: 13436677.367 ops/s
Iteration  29: 13393805.210 ops/s
Iteration  30: 13265597.753 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min":
  13465346.418 ±(99.9%) 49517.994 ops/s [Average]
  (min, avg, max) = (13265597.753, 13465346.418, 13570801.997), stdev = 74116.208
  CI (99.9%): [13415828.424, 13514864.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_min  thrpt   30  13465346.418 ± 49517.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5550136.993 ops/s
# Warmup Iteration   2: 11352406.203 ops/s
# Warmup Iteration   3: 9518450.874 ops/s
# Warmup Iteration   4: 11292143.033 ops/s
# Warmup Iteration   5: 11448952.328 ops/s
# Warmup Iteration   6: 11472194.555 ops/s
# Warmup Iteration   7: 11480592.671 ops/s
# Warmup Iteration   8: 11357803.304 ops/s
# Warmup Iteration   9: 11380362.660 ops/s
# Warmup Iteration  10: 11355338.058 ops/s
# Warmup Iteration  11: 11349565.298 ops/s
# Warmup Iteration  12: 11445169.543 ops/s
# Warmup Iteration  13: 11442977.636 ops/s
# Warmup Iteration  14: 11377800.559 ops/s
# Warmup Iteration  15: 11399041.852 ops/s
# Warmup Iteration  16: 11356054.574 ops/s
# Warmup Iteration  17: 11361668.721 ops/s
# Warmup Iteration  18: 11355637.109 ops/s
# Warmup Iteration  19: 11383440.543 ops/s
# Warmup Iteration  20: 11491531.181 ops/s
# Warmup Iteration  21: 11451004.779 ops/s
# Warmup Iteration  22: 11517071.586 ops/s
# Warmup Iteration  23: 11489357.368 ops/s
# Warmup Iteration  24: 11481633.195 ops/s
# Warmup Iteration  25: 11472301.322 ops/s
# Warmup Iteration  26: 11439938.982 ops/s
# Warmup Iteration  27: 11471530.669 ops/s
# Warmup Iteration  28: 11354961.795 ops/s
# Warmup Iteration  29: 11506259.524 ops/s
# Warmup Iteration  30: 11484318.339 ops/s
Iteration   1: 11360668.357 ops/s
Iteration   2: 11466046.315 ops/s
Iteration   3: 11573747.662 ops/s
Iteration   4: 11502192.165 ops/s
Iteration   5: 11461953.834 ops/s
Iteration   6: 11390938.809 ops/s
Iteration   7: 11540855.464 ops/s
Iteration   8: 11546147.047 ops/s
Iteration   9: 11497150.075 ops/s
Iteration  10: 11184128.059 ops/s
Iteration  11: 11480122.445 ops/s
Iteration  12: 11545612.859 ops/s
Iteration  13: 11524184.418 ops/s
Iteration  14: 11434925.576 ops/s
Iteration  15: 11499006.870 ops/s
Iteration  16: 11443548.200 ops/s
Iteration  17: 11549357.123 ops/s
Iteration  18: 11434639.969 ops/s
Iteration  19: 11468192.063 ops/s
Iteration  20: 11450057.652 ops/s
Iteration  21: 11612505.323 ops/s
Iteration  22: 11329943.622 ops/s
Iteration  23: 11279428.436 ops/s
Iteration  24: 11471975.080 ops/s
Iteration  25: 11507913.778 ops/s
Iteration  26: 11531555.536 ops/s
Iteration  27: 11362699.110 ops/s
Iteration  28: 11261793.299 ops/s
Iteration  29: 11534176.715 ops/s
Iteration  30: 11503866.450 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_minBy":
  11458311.077 ±(99.9%) 65689.193 ops/s [Average]
  (min, avg, max) = (11184128.059, 11458311.077, 11612505.323), stdev = 98320.499
  CI (99.9%): [11392621.884, 11524000.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_minBy  thrpt   30  11458311.077 ± 65689.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2130156.925 ops/s
# Warmup Iteration   2: 4812918.329 ops/s
# Warmup Iteration   3: 4879807.880 ops/s
# Warmup Iteration   4: 4022845.320 ops/s
# Warmup Iteration   5: 4805165.788 ops/s
# Warmup Iteration   6: 4804199.914 ops/s
# Warmup Iteration   7: 4865787.126 ops/s
# Warmup Iteration   8: 4850523.242 ops/s
# Warmup Iteration   9: 4822139.419 ops/s
# Warmup Iteration  10: 4854138.116 ops/s
# Warmup Iteration  11: 4806855.801 ops/s
# Warmup Iteration  12: 4838989.802 ops/s
# Warmup Iteration  13: 4846750.659 ops/s
# Warmup Iteration  14: 4844745.909 ops/s
# Warmup Iteration  15: 4861136.151 ops/s
# Warmup Iteration  16: 4848379.191 ops/s
# Warmup Iteration  17: 4850404.477 ops/s
# Warmup Iteration  18: 4819308.949 ops/s
# Warmup Iteration  19: 4870780.100 ops/s
# Warmup Iteration  20: 4887811.206 ops/s
# Warmup Iteration  21: 4748045.326 ops/s
# Warmup Iteration  22: 4872784.478 ops/s
# Warmup Iteration  23: 4844620.425 ops/s
# Warmup Iteration  24: 4859571.119 ops/s
# Warmup Iteration  25: 4812857.805 ops/s
# Warmup Iteration  26: 4838344.913 ops/s
# Warmup Iteration  27: 4824789.121 ops/s
# Warmup Iteration  28: 4884842.049 ops/s
# Warmup Iteration  29: 4877369.639 ops/s
# Warmup Iteration  30: 4865478.223 ops/s
Iteration   1: 4883134.037 ops/s
Iteration   2: 4846143.145 ops/s
Iteration   3: 4881855.066 ops/s
Iteration   4: 4815506.547 ops/s
Iteration   5: 4856150.905 ops/s
Iteration   6: 4878705.661 ops/s
Iteration   7: 4876778.785 ops/s
Iteration   8: 4901267.052 ops/s
Iteration   9: 4876883.136 ops/s
Iteration  10: 4773917.713 ops/s
Iteration  11: 4906700.987 ops/s
Iteration  12: 4872465.782 ops/s
Iteration  13: 4880624.405 ops/s
Iteration  14: 4894881.294 ops/s
Iteration  15: 4899375.550 ops/s
Iteration  16: 4893342.385 ops/s
Iteration  17: 4891101.726 ops/s
Iteration  18: 4889095.468 ops/s
Iteration  19: 4885075.594 ops/s
Iteration  20: 4882688.739 ops/s
Iteration  21: 4873413.916 ops/s
Iteration  22: 4912253.075 ops/s
Iteration  23: 4864077.376 ops/s
Iteration  24: 4888881.406 ops/s
Iteration  25: 4866908.904 ops/s
Iteration  26: 4878876.781 ops/s
Iteration  27: 4890684.043 ops/s
Iteration  28: 4887743.459 ops/s
Iteration  29: 4862408.116 ops/s
Iteration  30: 4878173.007 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_minByOptional":
  4876303.802 ±(99.9%) 18006.569 ops/s [Average]
  (min, avg, max) = (4773917.713, 4876303.802, 4912253.075), stdev = 26951.386
  CI (99.9%): [4858297.234, 4894310.371] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_minByOptional  thrpt   30  4876303.802 ± 18006.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3744506.546 ops/s
# Warmup Iteration   2: 6649040.585 ops/s
# Warmup Iteration   3: 7013094.219 ops/s
# Warmup Iteration   4: 7010629.615 ops/s
# Warmup Iteration   5: 6353586.051 ops/s
# Warmup Iteration   6: 6607317.894 ops/s
# Warmup Iteration   7: 7058661.165 ops/s
# Warmup Iteration   8: 7108796.442 ops/s
# Warmup Iteration   9: 7143268.008 ops/s
# Warmup Iteration  10: 7007239.386 ops/s
# Warmup Iteration  11: 7048813.695 ops/s
# Warmup Iteration  12: 7098865.679 ops/s
# Warmup Iteration  13: 7102042.669 ops/s
# Warmup Iteration  14: 7121129.133 ops/s
# Warmup Iteration  15: 7108287.137 ops/s
# Warmup Iteration  16: 7074685.439 ops/s
# Warmup Iteration  17: 7129718.337 ops/s
# Warmup Iteration  18: 7132439.215 ops/s
# Warmup Iteration  19: 7093965.349 ops/s
# Warmup Iteration  20: 7131334.486 ops/s
# Warmup Iteration  21: 7090458.881 ops/s
# Warmup Iteration  22: 7046255.029 ops/s
# Warmup Iteration  23: 7057600.262 ops/s
# Warmup Iteration  24: 7123685.329 ops/s
# Warmup Iteration  25: 7072011.916 ops/s
# Warmup Iteration  26: 7134313.382 ops/s
# Warmup Iteration  27: 7077485.052 ops/s
# Warmup Iteration  28: 7138224.534 ops/s
# Warmup Iteration  29: 7058024.766 ops/s
# Warmup Iteration  30: 7076733.162 ops/s
Iteration   1: 7006048.726 ops/s
Iteration   2: 7175704.063 ops/s
Iteration   3: 7104851.509 ops/s
Iteration   4: 7173026.319 ops/s
Iteration   5: 7141047.744 ops/s
Iteration   6: 7135854.590 ops/s
Iteration   7: 7131980.635 ops/s
Iteration   8: 7126019.374 ops/s
Iteration   9: 7046255.781 ops/s
Iteration  10: 7135663.954 ops/s
Iteration  11: 7120242.475 ops/s
Iteration  12: 7136985.723 ops/s
Iteration  13: 7154169.733 ops/s
Iteration  14: 7116587.850 ops/s
Iteration  15: 6939647.680 ops/s
Iteration  16: 7097843.894 ops/s
Iteration  17: 7135960.281 ops/s
Iteration  18: 7002548.868 ops/s
Iteration  19: 7134383.558 ops/s
Iteration  20: 7114633.265 ops/s
Iteration  21: 7092487.314 ops/s
Iteration  22: 7020575.840 ops/s
Iteration  23: 7083461.435 ops/s
Iteration  24: 7122611.049 ops/s
Iteration  25: 7096410.335 ops/s
Iteration  26: 7136969.033 ops/s
Iteration  27: 7091981.305 ops/s
Iteration  28: 7088038.896 ops/s
Iteration  29: 7133130.973 ops/s
Iteration  30: 7150123.346 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_minBy_null_throws":
  7104841.518 ±(99.9%) 35802.948 ops/s [Average]
  (min, avg, max) = (6939647.680, 7104841.518, 7175704.063), stdev = 53588.171
  CI (99.9%): [7069038.570, 7140644.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  7104841.518 ± 35802.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1636113.340 ops/s
# Warmup Iteration   2: 3502640.393 ops/s
# Warmup Iteration   3: 3029493.998 ops/s
# Warmup Iteration   4: 3460972.696 ops/s
# Warmup Iteration   5: 3508103.777 ops/s
# Warmup Iteration   6: 3495982.986 ops/s
# Warmup Iteration   7: 3516035.832 ops/s
# Warmup Iteration   8: 3534036.675 ops/s
# Warmup Iteration   9: 3524189.557 ops/s
# Warmup Iteration  10: 3511239.696 ops/s
# Warmup Iteration  11: 3528001.036 ops/s
# Warmup Iteration  12: 3520795.310 ops/s
# Warmup Iteration  13: 3520731.016 ops/s
# Warmup Iteration  14: 3525058.803 ops/s
# Warmup Iteration  15: 3510694.424 ops/s
# Warmup Iteration  16: 3543062.188 ops/s
# Warmup Iteration  17: 3517037.965 ops/s
# Warmup Iteration  18: 3495556.332 ops/s
# Warmup Iteration  19: 3508198.871 ops/s
# Warmup Iteration  20: 3511248.126 ops/s
# Warmup Iteration  21: 3528664.778 ops/s
# Warmup Iteration  22: 3491183.719 ops/s
# Warmup Iteration  23: 3520080.756 ops/s
# Warmup Iteration  24: 3522408.876 ops/s
# Warmup Iteration  25: 3525773.262 ops/s
# Warmup Iteration  26: 3466718.697 ops/s
# Warmup Iteration  27: 3519523.377 ops/s
# Warmup Iteration  28: 3494916.352 ops/s
# Warmup Iteration  29: 3513340.595 ops/s
# Warmup Iteration  30: 3538632.831 ops/s
Iteration   1: 3517001.383 ops/s
Iteration   2: 3447521.198 ops/s
Iteration   3: 3513170.094 ops/s
Iteration   4: 3534021.315 ops/s
Iteration   5: 3477045.209 ops/s
Iteration   6: 3527834.685 ops/s
Iteration   7: 3493564.660 ops/s
Iteration   8: 3513885.516 ops/s
Iteration   9: 3536905.678 ops/s
Iteration  10: 3497110.924 ops/s
Iteration  11: 3509131.139 ops/s
Iteration  12: 3516794.795 ops/s
Iteration  13: 3542778.966 ops/s
Iteration  14: 3513136.630 ops/s
Iteration  15: 3507151.143 ops/s
Iteration  16: 3526518.066 ops/s
Iteration  17: 3512168.162 ops/s
Iteration  18: 3464428.538 ops/s
Iteration  19: 3520790.856 ops/s
Iteration  20: 3503630.659 ops/s
Iteration  21: 3525271.004 ops/s
Iteration  22: 3523869.613 ops/s
Iteration  23: 3525410.537 ops/s
Iteration  24: 3531814.048 ops/s
Iteration  25: 3515437.183 ops/s
Iteration  26: 3517926.165 ops/s
Iteration  27: 3518434.542 ops/s
Iteration  28: 3512012.074 ops/s
Iteration  29: 3534117.328 ops/s
Iteration  30: 3521220.085 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_minOptional":
  3513336.740 ±(99.9%) 13843.008 ops/s [Average]
  (min, avg, max) = (3447521.198, 3513336.740, 3542778.966), stdev = 20719.564
  CI (99.9%): [3499493.732, 3527179.748] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_minOptional  thrpt   30  3513336.740 ± 13843.008  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 682261.703 ops/s
# Warmup Iteration   2: 713765.010 ops/s
# Warmup Iteration   3: 955941.542 ops/s
# Warmup Iteration   4: 947896.316 ops/s
# Warmup Iteration   5: 951988.708 ops/s
# Warmup Iteration   6: 950564.598 ops/s
# Warmup Iteration   7: 946756.550 ops/s
# Warmup Iteration   8: 945073.499 ops/s
# Warmup Iteration   9: 947867.039 ops/s
# Warmup Iteration  10: 950337.626 ops/s
# Warmup Iteration  11: 927641.359 ops/s
# Warmup Iteration  12: 823418.290 ops/s
# Warmup Iteration  13: 957112.243 ops/s
# Warmup Iteration  14: 957019.023 ops/s
# Warmup Iteration  15: 948659.166 ops/s
# Warmup Iteration  16: 950272.004 ops/s
# Warmup Iteration  17: 1012891.878 ops/s
# Warmup Iteration  18: 1005274.124 ops/s
# Warmup Iteration  19: 1000801.391 ops/s
# Warmup Iteration  20: 1012278.986 ops/s
# Warmup Iteration  21: 1013589.574 ops/s
# Warmup Iteration  22: 1009539.844 ops/s
# Warmup Iteration  23: 1012715.232 ops/s
# Warmup Iteration  24: 1015436.121 ops/s
# Warmup Iteration  25: 1009521.681 ops/s
# Warmup Iteration  26: 1008247.335 ops/s
# Warmup Iteration  27: 1006775.436 ops/s
# Warmup Iteration  28: 1012964.556 ops/s
# Warmup Iteration  29: 1003734.850 ops/s
# Warmup Iteration  30: 1004721.090 ops/s
Iteration   1: 1005361.250 ops/s
Iteration   2: 1013852.891 ops/s
Iteration   3: 1015204.678 ops/s
Iteration   4: 1011380.518 ops/s
Iteration   5: 1016198.098 ops/s
Iteration   6: 1008916.121 ops/s
Iteration   7: 1015896.566 ops/s
Iteration   8: 1009038.354 ops/s
Iteration   9: 1013836.184 ops/s
Iteration  10: 1012165.751 ops/s
Iteration  11: 1015048.554 ops/s
Iteration  12: 1007696.768 ops/s
Iteration  13: 1012410.262 ops/s
Iteration  14: 1012028.086 ops/s
Iteration  15: 1009637.484 ops/s
Iteration  16: 1014473.852 ops/s
Iteration  17: 1010428.496 ops/s
Iteration  18: 1013460.007 ops/s
Iteration  19: 1001343.291 ops/s
Iteration  20: 1014106.532 ops/s
Iteration  21: 1010007.214 ops/s
Iteration  22: 1009923.455 ops/s
Iteration  23: 1017165.231 ops/s
Iteration  24: 1008691.818 ops/s
Iteration  25: 1015605.110 ops/s
Iteration  26: 1000065.557 ops/s
Iteration  27: 1006411.565 ops/s
Iteration  28: 991773.870 ops/s
Iteration  29: 999452.980 ops/s
Iteration  30: 1014360.732 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_empty_throws":
  1010198.042 ±(99.9%) 3888.190 ops/s [Average]
  (min, avg, max) = (991773.870, 1010198.042, 1017165.231), stdev = 5819.660
  CI (99.9%): [1006309.853, 1014086.232] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_min_empty_throws  thrpt   30  1010198.042 ± 3888.190  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4217972.146 ops/s
# Warmup Iteration   2: 8871910.188 ops/s
# Warmup Iteration   3: 8863057.088 ops/s
# Warmup Iteration   4: 7405499.656 ops/s
# Warmup Iteration   5: 8850653.541 ops/s
# Warmup Iteration   6: 8810974.256 ops/s
# Warmup Iteration   7: 8670842.255 ops/s
# Warmup Iteration   8: 8890610.548 ops/s
# Warmup Iteration   9: 8807778.566 ops/s
# Warmup Iteration  10: 8876249.665 ops/s
# Warmup Iteration  11: 8824648.793 ops/s
# Warmup Iteration  12: 8866202.330 ops/s
# Warmup Iteration  13: 8808726.792 ops/s
# Warmup Iteration  14: 8856208.479 ops/s
# Warmup Iteration  15: 8827979.395 ops/s
# Warmup Iteration  16: 8791539.517 ops/s
# Warmup Iteration  17: 8953761.801 ops/s
# Warmup Iteration  18: 8923320.719 ops/s
# Warmup Iteration  19: 8888574.049 ops/s
# Warmup Iteration  20: 8960346.892 ops/s
# Warmup Iteration  21: 8863910.778 ops/s
# Warmup Iteration  22: 8902920.725 ops/s
# Warmup Iteration  23: 8925264.272 ops/s
# Warmup Iteration  24: 8913921.063 ops/s
# Warmup Iteration  25: 8949234.891 ops/s
# Warmup Iteration  26: 8853790.848 ops/s
# Warmup Iteration  27: 8939776.678 ops/s
# Warmup Iteration  28: 8876531.773 ops/s
# Warmup Iteration  29: 8923906.314 ops/s
# Warmup Iteration  30: 8923490.485 ops/s
Iteration   1: 8918809.322 ops/s
Iteration   2: 8900069.161 ops/s
Iteration   3: 8943271.255 ops/s
Iteration   4: 8824359.814 ops/s
Iteration   5: 8735389.629 ops/s
Iteration   6: 8907447.363 ops/s
Iteration   7: 8950350.759 ops/s
Iteration   8: 8999297.247 ops/s
Iteration   9: 8967649.879 ops/s
Iteration  10: 8986315.997 ops/s
Iteration  11: 8898371.434 ops/s
Iteration  12: 9027027.302 ops/s
Iteration  13: 8967238.375 ops/s
Iteration  14: 8953070.994 ops/s
Iteration  15: 8960639.948 ops/s
Iteration  16: 8900246.297 ops/s
Iteration  17: 8887522.007 ops/s
Iteration  18: 8862118.669 ops/s
Iteration  19: 8948038.262 ops/s
Iteration  20: 9002627.397 ops/s
Iteration  21: 8884097.174 ops/s
Iteration  22: 8992698.567 ops/s
Iteration  23: 8983687.984 ops/s
Iteration  24: 8882580.671 ops/s
Iteration  25: 8972571.331 ops/s
Iteration  26: 8814665.278 ops/s
Iteration  27: 8982582.758 ops/s
Iteration  28: 8970841.019 ops/s
Iteration  29: 8968494.077 ops/s
Iteration  30: 8905137.920 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_null_safe":
  8929907.263 ±(99.9%) 42893.361 ops/s [Average]
  (min, avg, max) = (8735389.629, 8929907.263, 9027027.302), stdev = 64200.769
  CI (99.9%): [8887013.902, 8972800.624] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_min_null_safe  thrpt   30  8929907.263 ± 42893.361  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3507509.384 ops/s
# Warmup Iteration   2: 6466881.425 ops/s
# Warmup Iteration   3: 7155733.843 ops/s
# Warmup Iteration   4: 7066023.132 ops/s
# Warmup Iteration   5: 6527053.590 ops/s
# Warmup Iteration   6: 6616130.481 ops/s
# Warmup Iteration   7: 7083788.651 ops/s
# Warmup Iteration   8: 7093716.089 ops/s
# Warmup Iteration   9: 6990191.725 ops/s
# Warmup Iteration  10: 7083947.984 ops/s
# Warmup Iteration  11: 7079253.816 ops/s
# Warmup Iteration  12: 7045126.596 ops/s
# Warmup Iteration  13: 7095611.316 ops/s
# Warmup Iteration  14: 7051513.670 ops/s
# Warmup Iteration  15: 7061239.266 ops/s
# Warmup Iteration  16: 7040906.347 ops/s
# Warmup Iteration  17: 7119203.945 ops/s
# Warmup Iteration  18: 7006456.787 ops/s
# Warmup Iteration  19: 7069271.356 ops/s
# Warmup Iteration  20: 7075224.652 ops/s
# Warmup Iteration  21: 7082750.091 ops/s
# Warmup Iteration  22: 7085106.276 ops/s
# Warmup Iteration  23: 7112798.510 ops/s
# Warmup Iteration  24: 6996433.563 ops/s
# Warmup Iteration  25: 7071707.750 ops/s
# Warmup Iteration  26: 7094189.724 ops/s
# Warmup Iteration  27: 7049957.978 ops/s
# Warmup Iteration  28: 7112172.267 ops/s
# Warmup Iteration  29: 7009117.463 ops/s
# Warmup Iteration  30: 7068826.341 ops/s
Iteration   1: 7081336.998 ops/s
Iteration   2: 7083752.515 ops/s
Iteration   3: 7106579.557 ops/s
Iteration   4: 7112760.163 ops/s
Iteration   5: 7013587.916 ops/s
Iteration   6: 7149677.552 ops/s
Iteration   7: 7144856.039 ops/s
Iteration   8: 7106326.100 ops/s
Iteration   9: 7114576.366 ops/s
Iteration  10: 7029262.664 ops/s
Iteration  11: 7088066.357 ops/s
Iteration  12: 7129551.255 ops/s
Iteration  13: 7097199.336 ops/s
Iteration  14: 7080466.502 ops/s
Iteration  15: 7153221.776 ops/s
Iteration  16: 7000835.331 ops/s
Iteration  17: 7103908.193 ops/s
Iteration  18: 7096829.526 ops/s
Iteration  19: 7080852.127 ops/s
Iteration  20: 7132971.492 ops/s
Iteration  21: 6998573.975 ops/s
Iteration  22: 7120408.804 ops/s
Iteration  23: 7103348.378 ops/s
Iteration  24: 7062755.331 ops/s
Iteration  25: 7125573.269 ops/s
Iteration  26: 7095140.811 ops/s
Iteration  27: 7111702.814 ops/s
Iteration  28: 7114765.744 ops/s
Iteration  29: 7112988.076 ops/s
Iteration  30: 7049730.936 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_null_throws":
  7093386.863 ±(99.9%) 27206.957 ops/s [Average]
  (min, avg, max) = (6998573.975, 7093386.863, 7153221.776), stdev = 40722.095
  CI (99.9%): [7066179.907, 7120593.820] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_min_null_throws  thrpt   30  7093386.863 ± 27206.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 140787.209 ops/s
# Warmup Iteration   2: 148398.432 ops/s
# Warmup Iteration   3: 146353.996 ops/s
# Warmup Iteration   4: 147236.040 ops/s
# Warmup Iteration   5: 149181.830 ops/s
# Warmup Iteration   6: 148351.340 ops/s
# Warmup Iteration   7: 147682.153 ops/s
# Warmup Iteration   8: 147954.840 ops/s
# Warmup Iteration   9: 149051.585 ops/s
# Warmup Iteration  10: 152333.102 ops/s
# Warmup Iteration  11: 156517.432 ops/s
# Warmup Iteration  12: 157122.813 ops/s
# Warmup Iteration  13: 155523.808 ops/s
# Warmup Iteration  14: 158537.787 ops/s
# Warmup Iteration  15: 157732.092 ops/s
# Warmup Iteration  16: 155202.741 ops/s
# Warmup Iteration  17: 157452.080 ops/s
# Warmup Iteration  18: 156711.596 ops/s
# Warmup Iteration  19: 157765.430 ops/s
# Warmup Iteration  20: 154835.493 ops/s
# Warmup Iteration  21: 156875.861 ops/s
# Warmup Iteration  22: 157399.884 ops/s
# Warmup Iteration  23: 157599.680 ops/s
# Warmup Iteration  24: 157658.605 ops/s
# Warmup Iteration  25: 154849.247 ops/s
# Warmup Iteration  26: 155582.428 ops/s
# Warmup Iteration  27: 155503.053 ops/s
# Warmup Iteration  28: 157325.989 ops/s
# Warmup Iteration  29: 156723.031 ops/s
# Warmup Iteration  30: 157481.554 ops/s
Iteration   1: 157205.952 ops/s
Iteration   2: 157227.547 ops/s
Iteration   3: 158608.012 ops/s
Iteration   4: 158333.041 ops/s
Iteration   5: 157854.151 ops/s
Iteration   6: 156463.725 ops/s
Iteration   7: 157397.586 ops/s
Iteration   8: 156353.767 ops/s
Iteration   9: 156055.922 ops/s
Iteration  10: 157240.046 ops/s
Iteration  11: 156051.300 ops/s
Iteration  12: 157513.667 ops/s
Iteration  13: 156567.924 ops/s
Iteration  14: 157374.762 ops/s
Iteration  15: 157289.787 ops/s
Iteration  16: 155797.492 ops/s
Iteration  17: 156342.924 ops/s
Iteration  18: 156654.761 ops/s
Iteration  19: 157192.264 ops/s
Iteration  20: 157027.531 ops/s
Iteration  21: 156316.676 ops/s
Iteration  22: 155429.334 ops/s
Iteration  23: 156753.191 ops/s
Iteration  24: 156919.822 ops/s
Iteration  25: 156103.785 ops/s
Iteration  26: 157744.265 ops/s
Iteration  27: 157580.499 ops/s
Iteration  28: 157543.238 ops/s
Iteration  29: 155344.682 ops/s
Iteration  30: 157378.316 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  156922.199 ±(99.9%) 530.740 ops/s [Average]
  (min, avg, max) = (155344.682, 156922.199, 158608.012), stdev = 794.386
  CI (99.9%): [156391.459, 157452.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  156922.199 ± 530.740  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6482836.690 ops/s
# Warmup Iteration   2: 13331488.624 ops/s
# Warmup Iteration   3: 11424028.968 ops/s
# Warmup Iteration   4: 13210757.842 ops/s
# Warmup Iteration   5: 13243194.451 ops/s
# Warmup Iteration   6: 13349482.818 ops/s
# Warmup Iteration   7: 13300872.058 ops/s
# Warmup Iteration   8: 13203320.108 ops/s
# Warmup Iteration   9: 13312167.727 ops/s
# Warmup Iteration  10: 13369790.263 ops/s
# Warmup Iteration  11: 13226140.388 ops/s
# Warmup Iteration  12: 13368161.403 ops/s
# Warmup Iteration  13: 13323591.096 ops/s
# Warmup Iteration  14: 13373921.762 ops/s
# Warmup Iteration  15: 13333799.283 ops/s
# Warmup Iteration  16: 13284367.669 ops/s
# Warmup Iteration  17: 13457040.063 ops/s
# Warmup Iteration  18: 13453411.311 ops/s
# Warmup Iteration  19: 13443510.389 ops/s
# Warmup Iteration  20: 13467249.142 ops/s
# Warmup Iteration  21: 13249786.127 ops/s
# Warmup Iteration  22: 13469323.513 ops/s
# Warmup Iteration  23: 13450599.679 ops/s
# Warmup Iteration  24: 13422665.476 ops/s
# Warmup Iteration  25: 13313855.289 ops/s
# Warmup Iteration  26: 13409103.221 ops/s
# Warmup Iteration  27: 13440487.348 ops/s
# Warmup Iteration  28: 13476353.759 ops/s
# Warmup Iteration  29: 13395772.546 ops/s
# Warmup Iteration  30: 13506595.174 ops/s
Iteration   1: 13246006.039 ops/s
Iteration   2: 13454215.281 ops/s
Iteration   3: 13485225.316 ops/s
Iteration   4: 13434945.420 ops/s
Iteration   5: 13448676.405 ops/s
Iteration   6: 13502959.238 ops/s
Iteration   7: 13307696.264 ops/s
Iteration   8: 13047532.891 ops/s
Iteration   9: 13461955.072 ops/s
Iteration  10: 13289153.094 ops/s
Iteration  11: 13439248.004 ops/s
Iteration  12: 13445216.283 ops/s
Iteration  13: 13475264.906 ops/s
Iteration  14: 13440831.366 ops/s
Iteration  15: 13421871.020 ops/s
Iteration  16: 13509603.901 ops/s
Iteration  17: 13438935.034 ops/s
Iteration  18: 13381341.890 ops/s
Iteration  19: 13427896.714 ops/s
Iteration  20: 13483642.276 ops/s
Iteration  21: 13226988.497 ops/s
Iteration  22: 13449076.450 ops/s
Iteration  23: 13450557.936 ops/s
Iteration  24: 13485987.720 ops/s
Iteration  25: 13449544.564 ops/s
Iteration  26: 13511211.497 ops/s
Iteration  27: 13439124.012 ops/s
Iteration  28: 13478261.069 ops/s
Iteration  29: 13493989.799 ops/s
Iteration  30: 13495198.930 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_min_without_comparator":
  13420738.563 ±(99.9%) 67930.448 ops/s [Average]
  (min, avg, max) = (13047532.891, 13420738.563, 13511211.497), stdev = 101675.104
  CI (99.9%): [13352808.115, 13488669.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  13420738.563 ± 67930.448  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1670308.641 ops/s
# Warmup Iteration   2: 3458321.761 ops/s
# Warmup Iteration   3: 3099817.480 ops/s
# Warmup Iteration   4: 3484393.417 ops/s
# Warmup Iteration   5: 3548540.876 ops/s
# Warmup Iteration   6: 3509797.076 ops/s
# Warmup Iteration   7: 3586569.170 ops/s
# Warmup Iteration   8: 3563328.959 ops/s
# Warmup Iteration   9: 3584359.905 ops/s
# Warmup Iteration  10: 3566876.859 ops/s
# Warmup Iteration  11: 3588986.058 ops/s
# Warmup Iteration  12: 3588124.931 ops/s
# Warmup Iteration  13: 3570000.802 ops/s
# Warmup Iteration  14: 3556041.461 ops/s
# Warmup Iteration  15: 3538664.726 ops/s
# Warmup Iteration  16: 3569095.704 ops/s
# Warmup Iteration  17: 3557318.855 ops/s
# Warmup Iteration  18: 3590450.113 ops/s
# Warmup Iteration  19: 3577561.991 ops/s
# Warmup Iteration  20: 3585578.453 ops/s
# Warmup Iteration  21: 3592798.518 ops/s
# Warmup Iteration  22: 3565762.892 ops/s
# Warmup Iteration  23: 3565606.669 ops/s
# Warmup Iteration  24: 3576639.553 ops/s
# Warmup Iteration  25: 3572790.789 ops/s
# Warmup Iteration  26: 3577695.338 ops/s
# Warmup Iteration  27: 3576240.708 ops/s
# Warmup Iteration  28: 3536364.634 ops/s
# Warmup Iteration  29: 3578543.288 ops/s
# Warmup Iteration  30: 3586136.400 ops/s
Iteration   1: 3552767.109 ops/s
Iteration   2: 3567191.558 ops/s
Iteration   3: 3602189.458 ops/s
Iteration   4: 3602868.217 ops/s
Iteration   5: 3596259.632 ops/s
Iteration   6: 3597041.854 ops/s
Iteration   7: 3536556.769 ops/s
Iteration   8: 3585846.296 ops/s
Iteration   9: 3582613.640 ops/s
Iteration  10: 3561174.092 ops/s
Iteration  11: 3597831.483 ops/s
Iteration  12: 3565673.307 ops/s
Iteration  13: 3594336.474 ops/s
Iteration  14: 3541903.312 ops/s
Iteration  15: 3575028.860 ops/s
Iteration  16: 3591232.253 ops/s
Iteration  17: 3593885.074 ops/s
Iteration  18: 3569397.886 ops/s
Iteration  19: 3558669.242 ops/s
Iteration  20: 3572398.127 ops/s
Iteration  21: 3573289.581 ops/s
Iteration  22: 3570455.635 ops/s
Iteration  23: 3595764.666 ops/s
Iteration  24: 3574544.288 ops/s
Iteration  25: 3580365.611 ops/s
Iteration  26: 3574956.189 ops/s
Iteration  27: 3560415.072 ops/s
Iteration  28: 3519710.798 ops/s
Iteration  29: 3577872.397 ops/s
Iteration  30: 3588960.105 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_newEmpty":
  3575373.300 ±(99.9%) 13481.806 ops/s [Average]
  (min, avg, max) = (3519710.798, 3575373.300, 3602868.217), stdev = 20178.934
  CI (99.9%): [3561891.494, 3588855.105] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_newEmpty  thrpt   30  3575373.300 ± 13481.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_newListWithCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_newListWithCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 216809.014 ops/s
# Warmup Iteration   2: 508560.834 ops/s
# Warmup Iteration   3: 510214.617 ops/s
# Warmup Iteration   4: 433082.968 ops/s
# Warmup Iteration   5: 513877.765 ops/s
# Warmup Iteration   6: 512083.843 ops/s
# Warmup Iteration   7: 510785.539 ops/s
# Warmup Iteration   8: 511611.301 ops/s
# Warmup Iteration   9: 508082.522 ops/s
# Warmup Iteration  10: 507269.355 ops/s
# Warmup Iteration  11: 510398.845 ops/s
# Warmup Iteration  12: 513553.401 ops/s
# Warmup Iteration  13: 511517.395 ops/s
# Warmup Iteration  14: 511500.178 ops/s
# Warmup Iteration  15: 511488.168 ops/s
# Warmup Iteration  16: 506372.819 ops/s
# Warmup Iteration  17: 510307.980 ops/s
# Warmup Iteration  18: 511709.258 ops/s
# Warmup Iteration  19: 512205.992 ops/s
# Warmup Iteration  20: 508106.978 ops/s
# Warmup Iteration  21: 507092.753 ops/s
# Warmup Iteration  22: 509703.793 ops/s
# Warmup Iteration  23: 508191.462 ops/s
# Warmup Iteration  24: 511233.988 ops/s
# Warmup Iteration  25: 512724.352 ops/s
# Warmup Iteration  26: 508929.137 ops/s
# Warmup Iteration  27: 509076.748 ops/s
# Warmup Iteration  28: 508077.319 ops/s
# Warmup Iteration  29: 509609.396 ops/s
# Warmup Iteration  30: 512515.447 ops/s
Iteration   1: 503945.787 ops/s
Iteration   2: 512770.508 ops/s
Iteration   3: 512836.200 ops/s
Iteration   4: 513136.009 ops/s
Iteration   5: 512152.982 ops/s
Iteration   6: 512303.099 ops/s
Iteration   7: 505997.076 ops/s
Iteration   8: 514544.627 ops/s
Iteration   9: 509964.590 ops/s
Iteration  10: 510201.042 ops/s
Iteration  11: 511995.381 ops/s
Iteration  12: 514207.016 ops/s
Iteration  13: 512607.090 ops/s
Iteration  14: 510965.688 ops/s
Iteration  15: 504915.334 ops/s
Iteration  16: 513484.682 ops/s
Iteration  17: 510238.798 ops/s
Iteration  18: 510218.375 ops/s
Iteration  19: 511330.736 ops/s
Iteration  20: 510819.371 ops/s
Iteration  21: 512731.520 ops/s
Iteration  22: 512826.969 ops/s
Iteration  23: 511028.657 ops/s
Iteration  24: 502732.588 ops/s
Iteration  25: 504057.230 ops/s
Iteration  26: 513558.223 ops/s
Iteration  27: 511333.279 ops/s
Iteration  28: 511488.388 ops/s
Iteration  29: 511916.374 ops/s
Iteration  30: 515212.518 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_newListWithCollection":
  510850.671 ±(99.9%) 2181.754 ops/s [Average]
  (min, avg, max) = (502732.588, 510850.671, 515212.518), stdev = 3265.548
  CI (99.9%): [508668.917, 513032.426] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_newListWithCollection  thrpt   30  510850.671 ± 2181.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_newListWithSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_newListWithSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2884429.920 ops/s
# Warmup Iteration   2: 6064127.382 ops/s
# Warmup Iteration   3: 5911545.031 ops/s
# Warmup Iteration   4: 5385584.889 ops/s
# Warmup Iteration   5: 6125292.804 ops/s
# Warmup Iteration   6: 6112623.263 ops/s
# Warmup Iteration   7: 6124401.081 ops/s
# Warmup Iteration   8: 6125612.363 ops/s
# Warmup Iteration   9: 6130956.987 ops/s
# Warmup Iteration  10: 6149930.665 ops/s
# Warmup Iteration  11: 6130395.030 ops/s
# Warmup Iteration  12: 6075433.336 ops/s
# Warmup Iteration  13: 6122007.605 ops/s
# Warmup Iteration  14: 6112954.316 ops/s
# Warmup Iteration  15: 6053432.455 ops/s
# Warmup Iteration  16: 6071958.615 ops/s
# Warmup Iteration  17: 6171330.134 ops/s
# Warmup Iteration  18: 6165974.706 ops/s
# Warmup Iteration  19: 6122061.585 ops/s
# Warmup Iteration  20: 6180967.219 ops/s
# Warmup Iteration  21: 6171490.133 ops/s
# Warmup Iteration  22: 6169498.608 ops/s
# Warmup Iteration  23: 6184843.864 ops/s
# Warmup Iteration  24: 6126243.925 ops/s
# Warmup Iteration  25: 6125958.955 ops/s
# Warmup Iteration  26: 6175242.573 ops/s
# Warmup Iteration  27: 6168881.957 ops/s
# Warmup Iteration  28: 6186193.428 ops/s
# Warmup Iteration  29: 6179220.987 ops/s
# Warmup Iteration  30: 6152203.169 ops/s
Iteration   1: 6172249.630 ops/s
Iteration   2: 6183117.377 ops/s
Iteration   3: 6091275.234 ops/s
Iteration   4: 6199996.442 ops/s
Iteration   5: 6025438.072 ops/s
Iteration   6: 6163689.166 ops/s
Iteration   7: 6150419.065 ops/s
Iteration   8: 6095372.736 ops/s
Iteration   9: 6193074.632 ops/s
Iteration  10: 6043396.010 ops/s
Iteration  11: 6113768.870 ops/s
Iteration  12: 6034825.956 ops/s
Iteration  13: 6053294.793 ops/s
Iteration  14: 6179723.063 ops/s
Iteration  15: 6100866.015 ops/s
Iteration  16: 6191375.296 ops/s
Iteration  17: 6163487.806 ops/s
Iteration  18: 6191158.957 ops/s
Iteration  19: 6182310.866 ops/s
Iteration  20: 6184138.954 ops/s
Iteration  21: 6160867.669 ops/s
Iteration  22: 6201239.570 ops/s
Iteration  23: 6156291.355 ops/s
Iteration  24: 6196443.167 ops/s
Iteration  25: 6175658.223 ops/s
Iteration  26: 6185520.451 ops/s
Iteration  27: 6192130.993 ops/s
Iteration  28: 6181237.012 ops/s
Iteration  29: 6154577.148 ops/s
Iteration  30: 6180595.450 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_newListWithSize":
  6149917.999 ±(99.9%) 35751.452 ops/s [Average]
  (min, avg, max) = (6025438.072, 6149917.999, 6201239.570), stdev = 53511.094
  CI (99.9%): [6114166.547, 6185669.451] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_newListWithSize  thrpt   30  6149917.999 ± 35751.452  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3263970.221 ops/s
# Warmup Iteration   2: 7399649.110 ops/s
# Warmup Iteration   3: 7391480.204 ops/s
# Warmup Iteration   4: 6227874.242 ops/s
# Warmup Iteration   5: 7390049.618 ops/s
# Warmup Iteration   6: 7458050.985 ops/s
# Warmup Iteration   7: 7407570.999 ops/s
# Warmup Iteration   8: 7357657.132 ops/s
# Warmup Iteration   9: 7385712.902 ops/s
# Warmup Iteration  10: 7322009.742 ops/s
# Warmup Iteration  11: 7413783.542 ops/s
# Warmup Iteration  12: 7442664.561 ops/s
# Warmup Iteration  13: 7370303.544 ops/s
# Warmup Iteration  14: 7414685.813 ops/s
# Warmup Iteration  15: 7426584.965 ops/s
# Warmup Iteration  16: 7425664.747 ops/s
# Warmup Iteration  17: 7505700.229 ops/s
# Warmup Iteration  18: 7488789.413 ops/s
# Warmup Iteration  19: 7473546.313 ops/s
# Warmup Iteration  20: 7496539.626 ops/s
# Warmup Iteration  21: 7475487.790 ops/s
# Warmup Iteration  22: 7509894.091 ops/s
# Warmup Iteration  23: 7430033.958 ops/s
# Warmup Iteration  24: 7478472.458 ops/s
# Warmup Iteration  25: 7515544.887 ops/s
# Warmup Iteration  26: 7520611.498 ops/s
# Warmup Iteration  27: 7517129.237 ops/s
# Warmup Iteration  28: 7520984.268 ops/s
# Warmup Iteration  29: 7535393.601 ops/s
# Warmup Iteration  30: 7417837.213 ops/s
Iteration   1: 7502373.266 ops/s
Iteration   2: 7513428.007 ops/s
Iteration   3: 7529303.397 ops/s
Iteration   4: 7496434.497 ops/s
Iteration   5: 7484375.151 ops/s
Iteration   6: 7472153.620 ops/s
Iteration   7: 7507476.824 ops/s
Iteration   8: 7507157.900 ops/s
Iteration   9: 7498625.156 ops/s
Iteration  10: 7512949.058 ops/s
Iteration  11: 7532262.438 ops/s
Iteration  12: 7509259.513 ops/s
Iteration  13: 7526687.155 ops/s
Iteration  14: 7369573.003 ops/s
Iteration  15: 7498525.212 ops/s
Iteration  16: 7487344.572 ops/s
Iteration  17: 7517411.973 ops/s
Iteration  18: 7374548.839 ops/s
Iteration  19: 7306150.978 ops/s
Iteration  20: 7456861.026 ops/s
Iteration  21: 7487485.473 ops/s
Iteration  22: 7484471.920 ops/s
Iteration  23: 7506776.776 ops/s
Iteration  24: 7495941.259 ops/s
Iteration  25: 7507162.291 ops/s
Iteration  26: 7477407.192 ops/s
Iteration  27: 7506504.820 ops/s
Iteration  28: 7446402.142 ops/s
Iteration  29: 7516536.464 ops/s
Iteration  30: 7502898.094 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_noneSatisfy":
  7484482.934 ±(99.9%) 33713.156 ops/s [Average]
  (min, avg, max) = (7306150.978, 7484482.934, 7532262.438), stdev = 50460.268
  CI (99.9%): [7450769.778, 7518196.090] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  7484482.934 ± 33713.156  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3327867.077 ops/s
# Warmup Iteration   2: 7360985.833 ops/s
# Warmup Iteration   3: 7359225.149 ops/s
# Warmup Iteration   4: 6219495.151 ops/s
# Warmup Iteration   5: 7381660.658 ops/s
# Warmup Iteration   6: 7379159.321 ops/s
# Warmup Iteration   7: 7387638.355 ops/s
# Warmup Iteration   8: 7448234.005 ops/s
# Warmup Iteration   9: 7376729.178 ops/s
# Warmup Iteration  10: 7442346.113 ops/s
# Warmup Iteration  11: 7422280.017 ops/s
# Warmup Iteration  12: 7406799.874 ops/s
# Warmup Iteration  13: 7445338.849 ops/s
# Warmup Iteration  14: 7437540.126 ops/s
# Warmup Iteration  15: 7347067.076 ops/s
# Warmup Iteration  16: 7444587.626 ops/s
# Warmup Iteration  17: 7473395.618 ops/s
# Warmup Iteration  18: 7441600.251 ops/s
# Warmup Iteration  19: 7497163.775 ops/s
# Warmup Iteration  20: 7485196.627 ops/s
# Warmup Iteration  21: 7495595.569 ops/s
# Warmup Iteration  22: 7490903.477 ops/s
# Warmup Iteration  23: 7478165.987 ops/s
# Warmup Iteration  24: 7418012.065 ops/s
# Warmup Iteration  25: 7473080.279 ops/s
# Warmup Iteration  26: 7483907.724 ops/s
# Warmup Iteration  27: 7478902.984 ops/s
# Warmup Iteration  28: 7506443.980 ops/s
# Warmup Iteration  29: 7436149.806 ops/s
# Warmup Iteration  30: 7437884.253 ops/s
Iteration   1: 7522644.237 ops/s
Iteration   2: 7504359.312 ops/s
Iteration   3: 7404729.661 ops/s
Iteration   4: 7370859.217 ops/s
Iteration   5: 7506562.790 ops/s
Iteration   6: 7308315.878 ops/s
Iteration   7: 7506753.011 ops/s
Iteration   8: 7500912.913 ops/s
Iteration   9: 7384401.200 ops/s
Iteration  10: 7421943.942 ops/s
Iteration  11: 7493837.195 ops/s
Iteration  12: 7349181.861 ops/s
Iteration  13: 7557206.004 ops/s
Iteration  14: 7465433.227 ops/s
Iteration  15: 7478678.990 ops/s
Iteration  16: 7503711.754 ops/s
Iteration  17: 7486116.929 ops/s
Iteration  18: 7506039.293 ops/s
Iteration  19: 7482436.026 ops/s
Iteration  20: 7520654.549 ops/s
Iteration  21: 7472067.896 ops/s
Iteration  22: 7507561.041 ops/s
Iteration  23: 7504498.389 ops/s
Iteration  24: 7469470.654 ops/s
Iteration  25: 7507543.421 ops/s
Iteration  26: 7516697.000 ops/s
Iteration  27: 7497574.470 ops/s
Iteration  28: 7496895.647 ops/s
Iteration  29: 7465687.624 ops/s
Iteration  30: 7387433.876 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_noneSatisfyWith":
  7470006.934 ±(99.9%) 39283.842 ops/s [Average]
  (min, avg, max) = (7308315.878, 7470006.934, 7557206.004), stdev = 58798.210
  CI (99.9%): [7430723.091, 7509290.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  7470006.934 ± 39283.842  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2914546.393 ops/s
# Warmup Iteration   2: 5856178.390 ops/s
# Warmup Iteration   3: 4877736.292 ops/s
# Warmup Iteration   4: 5724906.260 ops/s
# Warmup Iteration   5: 5794986.960 ops/s
# Warmup Iteration   6: 5796374.347 ops/s
# Warmup Iteration   7: 5915258.712 ops/s
# Warmup Iteration   8: 5807830.364 ops/s
# Warmup Iteration   9: 5836103.395 ops/s
# Warmup Iteration  10: 5783054.392 ops/s
# Warmup Iteration  11: 5728900.790 ops/s
# Warmup Iteration  12: 5804481.375 ops/s
# Warmup Iteration  13: 6023579.325 ops/s
# Warmup Iteration  14: 5898935.678 ops/s
# Warmup Iteration  15: 5843783.335 ops/s
# Warmup Iteration  16: 5684131.504 ops/s
# Warmup Iteration  17: 5726221.111 ops/s
# Warmup Iteration  18: 6014020.481 ops/s
# Warmup Iteration  19: 5715182.073 ops/s
# Warmup Iteration  20: 5908050.808 ops/s
# Warmup Iteration  21: 5815535.935 ops/s
# Warmup Iteration  22: 5797595.523 ops/s
# Warmup Iteration  23: 5966139.367 ops/s
# Warmup Iteration  24: 5719046.861 ops/s
# Warmup Iteration  25: 5953631.419 ops/s
# Warmup Iteration  26: 5674241.257 ops/s
# Warmup Iteration  27: 5683160.197 ops/s
# Warmup Iteration  28: 5828941.982 ops/s
# Warmup Iteration  29: 5789299.155 ops/s
# Warmup Iteration  30: 5758936.077 ops/s
Iteration   1: 6017836.417 ops/s
Iteration   2: 5986945.784 ops/s
Iteration   3: 5931163.023 ops/s
Iteration   4: 5845135.720 ops/s
Iteration   5: 5810949.607 ops/s
Iteration   6: 5866200.237 ops/s
Iteration   7: 5483926.424 ops/s
Iteration   8: 5760693.346 ops/s
Iteration   9: 5792297.075 ops/s
Iteration  10: 5814035.107 ops/s
Iteration  11: 5686480.562 ops/s
Iteration  12: 5621998.014 ops/s
Iteration  13: 5797626.812 ops/s
Iteration  14: 5655901.009 ops/s
Iteration  15: 5799824.898 ops/s
Iteration  16: 5762357.042 ops/s
Iteration  17: 5944697.184 ops/s
Iteration  18: 6091696.295 ops/s
Iteration  19: 5968989.004 ops/s
Iteration  20: 5621284.292 ops/s
Iteration  21: 5680155.195 ops/s
Iteration  22: 5941548.832 ops/s
Iteration  23: 5751755.882 ops/s
Iteration  24: 5699785.500 ops/s
Iteration  25: 5881259.726 ops/s
Iteration  26: 5742561.404 ops/s
Iteration  27: 5800284.007 ops/s
Iteration  28: 5824855.268 ops/s
Iteration  29: 5879598.763 ops/s
Iteration  30: 5781674.179 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_notEmpty":
  5808117.220 ±(99.9%) 88000.136 ops/s [Average]
  (min, avg, max) = (5483926.424, 5808117.220, 6091696.295), stdev = 131714.471
  CI (99.9%): [5720117.084, 5896117.356] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_notEmpty  thrpt   30  5808117.220 ± 88000.136  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_outOfBoundsCondition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_outOfBoundsCondition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 616475.815 ops/s
# Warmup Iteration   2: 665304.161 ops/s
# Warmup Iteration   3: 882412.298 ops/s
# Warmup Iteration   4: 884254.363 ops/s
# Warmup Iteration   5: 881781.731 ops/s
# Warmup Iteration   6: 879506.337 ops/s
# Warmup Iteration   7: 878372.436 ops/s
# Warmup Iteration   8: 882364.811 ops/s
# Warmup Iteration   9: 879068.882 ops/s
# Warmup Iteration  10: 883784.776 ops/s
# Warmup Iteration  11: 741966.241 ops/s
# Warmup Iteration  12: 885214.600 ops/s
# Warmup Iteration  13: 882300.358 ops/s
# Warmup Iteration  14: 878470.615 ops/s
# Warmup Iteration  15: 884576.066 ops/s
# Warmup Iteration  16: 882799.860 ops/s
# Warmup Iteration  17: 913837.688 ops/s
# Warmup Iteration  18: 922332.238 ops/s
# Warmup Iteration  19: 914374.879 ops/s
# Warmup Iteration  20: 908706.205 ops/s
# Warmup Iteration  21: 923387.001 ops/s
# Warmup Iteration  22: 921247.709 ops/s
# Warmup Iteration  23: 919139.772 ops/s
# Warmup Iteration  24: 913964.918 ops/s
# Warmup Iteration  25: 924112.332 ops/s
# Warmup Iteration  26: 917499.795 ops/s
# Warmup Iteration  27: 920455.331 ops/s
# Warmup Iteration  28: 920170.607 ops/s
# Warmup Iteration  29: 916841.243 ops/s
# Warmup Iteration  30: 922730.950 ops/s
Iteration   1: 921261.726 ops/s
Iteration   2: 918884.414 ops/s
Iteration   3: 927045.355 ops/s
Iteration   4: 916520.074 ops/s
Iteration   5: 924243.949 ops/s
Iteration   6: 916839.120 ops/s
Iteration   7: 909597.330 ops/s
Iteration   8: 926811.997 ops/s
Iteration   9: 922057.847 ops/s
Iteration  10: 911889.492 ops/s
Iteration  11: 894624.433 ops/s
Iteration  12: 917931.244 ops/s
Iteration  13: 928961.653 ops/s
Iteration  14: 918977.107 ops/s
Iteration  15: 916563.846 ops/s
Iteration  16: 914651.629 ops/s
Iteration  17: 917724.091 ops/s
Iteration  18: 926766.018 ops/s
Iteration  19: 921441.094 ops/s
Iteration  20: 917137.901 ops/s
Iteration  21: 930903.802 ops/s
Iteration  22: 928636.905 ops/s
Iteration  23: 918284.954 ops/s
Iteration  24: 933667.717 ops/s
Iteration  25: 922918.661 ops/s
Iteration  26: 921624.650 ops/s
Iteration  27: 921341.156 ops/s
Iteration  28: 927583.127 ops/s
Iteration  29: 919740.778 ops/s
Iteration  30: 921727.424 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_outOfBoundsCondition":
  920545.316 ±(99.9%) 4956.788 ops/s [Average]
  (min, avg, max) = (894624.433, 920545.316, 933667.717), stdev = 7419.088
  CI (99.9%): [915588.528, 925502.105] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_outOfBoundsCondition  thrpt   30  920545.316 ± 4956.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1279725.652 ops/s
# Warmup Iteration   2: 2730567.972 ops/s
# Warmup Iteration   3: 2772941.196 ops/s
# Warmup Iteration   4: 2326708.360 ops/s
# Warmup Iteration   5: 2785998.342 ops/s
# Warmup Iteration   6: 2761989.413 ops/s
# Warmup Iteration   7: 2769078.982 ops/s
# Warmup Iteration   8: 2775658.721 ops/s
# Warmup Iteration   9: 2773670.680 ops/s
# Warmup Iteration  10: 2775650.977 ops/s
# Warmup Iteration  11: 2776877.387 ops/s
# Warmup Iteration  12: 2777943.153 ops/s
# Warmup Iteration  13: 2776186.344 ops/s
# Warmup Iteration  14: 2791573.119 ops/s
# Warmup Iteration  15: 2779529.330 ops/s
# Warmup Iteration  16: 2755208.153 ops/s
# Warmup Iteration  17: 2717673.555 ops/s
# Warmup Iteration  18: 2750294.510 ops/s
# Warmup Iteration  19: 2735236.350 ops/s
# Warmup Iteration  20: 2752132.304 ops/s
# Warmup Iteration  21: 2746189.064 ops/s
# Warmup Iteration  22: 2748664.328 ops/s
# Warmup Iteration  23: 2745391.076 ops/s
# Warmup Iteration  24: 2732650.418 ops/s
# Warmup Iteration  25: 2733872.414 ops/s
# Warmup Iteration  26: 2747099.712 ops/s
# Warmup Iteration  27: 2759555.059 ops/s
# Warmup Iteration  28: 2701325.581 ops/s
# Warmup Iteration  29: 2727673.344 ops/s
# Warmup Iteration  30: 2744396.744 ops/s
Iteration   1: 2751221.322 ops/s
Iteration   2: 2727545.138 ops/s
Iteration   3: 2754620.313 ops/s
Iteration   4: 2761852.496 ops/s
Iteration   5: 2755058.231 ops/s
Iteration   6: 2756191.574 ops/s
Iteration   7: 2749339.017 ops/s
Iteration   8: 2748711.608 ops/s
Iteration   9: 2749593.697 ops/s
Iteration  10: 2751421.864 ops/s
Iteration  11: 2746004.448 ops/s
Iteration  12: 2755176.876 ops/s
Iteration  13: 2753106.195 ops/s
Iteration  14: 2705995.107 ops/s
Iteration  15: 2702829.565 ops/s
Iteration  16: 2740481.334 ops/s
Iteration  17: 2706861.760 ops/s
Iteration  18: 2744253.015 ops/s
Iteration  19: 2758760.857 ops/s
Iteration  20: 2745058.023 ops/s
Iteration  21: 2737348.938 ops/s
Iteration  22: 2740503.177 ops/s
Iteration  23: 2690725.816 ops/s
Iteration  24: 2763107.497 ops/s
Iteration  25: 2748914.536 ops/s
Iteration  26: 2696077.989 ops/s
Iteration  27: 2751833.196 ops/s
Iteration  28: 2758295.381 ops/s
Iteration  29: 2747697.293 ops/s
Iteration  30: 2754948.676 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_partition":
  2741784.498 ±(99.9%) 13566.160 ops/s [Average]
  (min, avg, max) = (2690725.816, 2741784.498, 2763107.497), stdev = 20305.192
  CI (99.9%): [2728218.338, 2755350.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_partition  thrpt   30  2741784.498 ± 13566.160  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 845827.802 ops/s
# Warmup Iteration   2: 2065005.369 ops/s
# Warmup Iteration   3: 2102602.757 ops/s
# Warmup Iteration   4: 1737935.574 ops/s
# Warmup Iteration   5: 2119396.181 ops/s
# Warmup Iteration   6: 2115615.448 ops/s
# Warmup Iteration   7: 2108763.467 ops/s
# Warmup Iteration   8: 2113577.213 ops/s
# Warmup Iteration   9: 2105198.885 ops/s
# Warmup Iteration  10: 2099642.713 ops/s
# Warmup Iteration  11: 2082034.918 ops/s
# Warmup Iteration  12: 2111086.717 ops/s
# Warmup Iteration  13: 2098356.981 ops/s
# Warmup Iteration  14: 2098334.783 ops/s
# Warmup Iteration  15: 2104761.399 ops/s
# Warmup Iteration  16: 2108567.737 ops/s
# Warmup Iteration  17: 2120143.922 ops/s
# Warmup Iteration  18: 2114424.717 ops/s
# Warmup Iteration  19: 2114785.455 ops/s
# Warmup Iteration  20: 2115951.959 ops/s
# Warmup Iteration  21: 2106996.417 ops/s
# Warmup Iteration  22: 2104759.169 ops/s
# Warmup Iteration  23: 2084755.306 ops/s
# Warmup Iteration  24: 2082759.984 ops/s
# Warmup Iteration  25: 2117644.776 ops/s
# Warmup Iteration  26: 2110310.549 ops/s
# Warmup Iteration  27: 2077438.361 ops/s
# Warmup Iteration  28: 2089354.360 ops/s
# Warmup Iteration  29: 2116430.033 ops/s
# Warmup Iteration  30: 2117762.001 ops/s
Iteration   1: 2078605.013 ops/s
Iteration   2: 2112184.426 ops/s
Iteration   3: 2108830.087 ops/s
Iteration   4: 2120238.645 ops/s
Iteration   5: 2085077.482 ops/s
Iteration   6: 2083820.640 ops/s
Iteration   7: 2101140.647 ops/s
Iteration   8: 2104874.253 ops/s
Iteration   9: 2117143.194 ops/s
Iteration  10: 2097634.587 ops/s
Iteration  11: 2119856.832 ops/s
Iteration  12: 2105305.777 ops/s
Iteration  13: 2073504.324 ops/s
Iteration  14: 2081755.501 ops/s
Iteration  15: 2080843.510 ops/s
Iteration  16: 2112566.208 ops/s
Iteration  17: 2111408.292 ops/s
Iteration  18: 2106358.087 ops/s
Iteration  19: 2099733.064 ops/s
Iteration  20: 2107208.228 ops/s
Iteration  21: 2067735.229 ops/s
Iteration  22: 2119549.176 ops/s
Iteration  23: 2073016.732 ops/s
Iteration  24: 2109467.799 ops/s
Iteration  25: 2115503.973 ops/s
Iteration  26: 2116553.471 ops/s
Iteration  27: 2092441.418 ops/s
Iteration  28: 2119570.353 ops/s
Iteration  29: 2113494.213 ops/s
Iteration  30: 2064437.718 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_partitionWhile":
  2099995.296 ±(99.9%) 11605.128 ops/s [Average]
  (min, avg, max) = (2064437.718, 2099995.296, 2120238.645), stdev = 17370.010
  CI (99.9%): [2088390.168, 2111600.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_partitionWhile  thrpt   30  2099995.296 ± 11605.128  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1185787.289 ops/s
# Warmup Iteration   2: 2589879.271 ops/s
# Warmup Iteration   3: 2626781.778 ops/s
# Warmup Iteration   4: 2199434.429 ops/s
# Warmup Iteration   5: 2627627.203 ops/s
# Warmup Iteration   6: 2628944.880 ops/s
# Warmup Iteration   7: 2612911.368 ops/s
# Warmup Iteration   8: 2616199.592 ops/s
# Warmup Iteration   9: 2615078.533 ops/s
# Warmup Iteration  10: 2600118.017 ops/s
# Warmup Iteration  11: 2589148.183 ops/s
# Warmup Iteration  12: 2619161.240 ops/s
# Warmup Iteration  13: 2614981.148 ops/s
# Warmup Iteration  14: 2621385.308 ops/s
# Warmup Iteration  15: 2623325.257 ops/s
# Warmup Iteration  16: 2629462.044 ops/s
# Warmup Iteration  17: 2594740.756 ops/s
# Warmup Iteration  18: 2602185.155 ops/s
# Warmup Iteration  19: 2607208.944 ops/s
# Warmup Iteration  20: 2607339.007 ops/s
# Warmup Iteration  21: 2615116.372 ops/s
# Warmup Iteration  22: 2584051.925 ops/s
# Warmup Iteration  23: 2615930.193 ops/s
# Warmup Iteration  24: 2612226.139 ops/s
# Warmup Iteration  25: 2609057.907 ops/s
# Warmup Iteration  26: 2601450.197 ops/s
# Warmup Iteration  27: 2602881.696 ops/s
# Warmup Iteration  28: 2607810.074 ops/s
# Warmup Iteration  29: 2612309.750 ops/s
# Warmup Iteration  30: 2617924.090 ops/s
Iteration   1: 2583848.114 ops/s
Iteration   2: 2608698.484 ops/s
Iteration   3: 2592516.853 ops/s
Iteration   4: 2612423.657 ops/s
Iteration   5: 2615008.351 ops/s
Iteration   6: 2615715.467 ops/s
Iteration   7: 2613790.070 ops/s
Iteration   8: 2613839.898 ops/s
Iteration   9: 2564786.055 ops/s
Iteration  10: 2620692.678 ops/s
Iteration  11: 2616778.828 ops/s
Iteration  12: 2603762.196 ops/s
Iteration  13: 2569224.000 ops/s
Iteration  14: 2574813.325 ops/s
Iteration  15: 2609734.317 ops/s
Iteration  16: 2601954.559 ops/s
Iteration  17: 2611255.750 ops/s
Iteration  18: 2602592.886 ops/s
Iteration  19: 2614789.009 ops/s
Iteration  20: 2548233.301 ops/s
Iteration  21: 2610726.919 ops/s
Iteration  22: 2599029.897 ops/s
Iteration  23: 2589286.979 ops/s
Iteration  24: 2618859.092 ops/s
Iteration  25: 2606830.482 ops/s
Iteration  26: 2601897.760 ops/s
Iteration  27: 2603679.189 ops/s
Iteration  28: 2617670.236 ops/s
Iteration  29: 2619067.398 ops/s
Iteration  30: 2605826.960 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_partitionWith":
  2602244.424 ±(99.9%) 11955.183 ops/s [Average]
  (min, avg, max) = (2548233.301, 2602244.424, 2620692.678), stdev = 17893.957
  CI (99.9%): [2590289.241, 2614199.607] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_partitionWith  thrpt   30  2602244.424 ± 11955.183  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_randomAccess_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_randomAccess_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 770533.880 ops/s
# Warmup Iteration   2: 793392.765 ops/s
# Warmup Iteration   3: 940031.054 ops/s
# Warmup Iteration   4: 984874.972 ops/s
# Warmup Iteration   5: 989759.763 ops/s
# Warmup Iteration   6: 989726.017 ops/s
# Warmup Iteration   7: 987245.662 ops/s
# Warmup Iteration   8: 979405.701 ops/s
# Warmup Iteration   9: 978997.343 ops/s
# Warmup Iteration  10: 992169.618 ops/s
# Warmup Iteration  11: 983341.950 ops/s
# Warmup Iteration  12: 987504.695 ops/s
# Warmup Iteration  13: 956375.550 ops/s
# Warmup Iteration  14: 881054.028 ops/s
# Warmup Iteration  15: 996867.003 ops/s
# Warmup Iteration  16: 992286.962 ops/s
# Warmup Iteration  17: 1062780.789 ops/s
# Warmup Iteration  18: 1061816.444 ops/s
# Warmup Iteration  19: 1064166.236 ops/s
# Warmup Iteration  20: 1052651.284 ops/s
# Warmup Iteration  21: 1063846.182 ops/s
# Warmup Iteration  22: 1059862.781 ops/s
# Warmup Iteration  23: 1061145.553 ops/s
# Warmup Iteration  24: 1062714.129 ops/s
# Warmup Iteration  25: 1058466.939 ops/s
# Warmup Iteration  26: 1057438.761 ops/s
# Warmup Iteration  27: 1058848.486 ops/s
# Warmup Iteration  28: 1046410.896 ops/s
# Warmup Iteration  29: 1061926.444 ops/s
# Warmup Iteration  30: 1061338.329 ops/s
Iteration   1: 1064527.439 ops/s
Iteration   2: 1061314.874 ops/s
Iteration   3: 1055732.919 ops/s
Iteration   4: 1062936.556 ops/s
Iteration   5: 1058237.641 ops/s
Iteration   6: 1060915.032 ops/s
Iteration   7: 1037881.305 ops/s
Iteration   8: 1042003.220 ops/s
Iteration   9: 1060136.671 ops/s
Iteration  10: 1053206.229 ops/s
Iteration  11: 1061853.946 ops/s
Iteration  12: 1050958.584 ops/s
Iteration  13: 1063083.934 ops/s
Iteration  14: 1062805.405 ops/s
Iteration  15: 1040790.554 ops/s
Iteration  16: 1062874.134 ops/s
Iteration  17: 1060134.612 ops/s
Iteration  18: 1063095.361 ops/s
Iteration  19: 1063177.496 ops/s
Iteration  20: 1046365.546 ops/s
Iteration  21: 1051031.696 ops/s
Iteration  22: 1065216.551 ops/s
Iteration  23: 1048879.261 ops/s
Iteration  24: 1064403.097 ops/s
Iteration  25: 1054133.323 ops/s
Iteration  26: 1064288.627 ops/s
Iteration  27: 1062863.501 ops/s
Iteration  28: 1070503.899 ops/s
Iteration  29: 1063646.827 ops/s
Iteration  30: 1054529.625 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_randomAccess_throws":
  1057717.595 ±(99.9%) 5417.421 ops/s [Average]
  (min, avg, max) = (1037881.305, 1057717.595, 1070503.899), stdev = 8108.541
  CI (99.9%): [1052300.174, 1063135.016] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_randomAccess_throws  thrpt   30  1057717.595 ± 5417.421  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 921337.344 ops/s
# Warmup Iteration   2: 1860664.719 ops/s
# Warmup Iteration   3: 1945049.881 ops/s
# Warmup Iteration   4: 1955997.421 ops/s
# Warmup Iteration   5: 1625984.792 ops/s
# Warmup Iteration   6: 1925213.117 ops/s
# Warmup Iteration   7: 1940568.018 ops/s
# Warmup Iteration   8: 1955966.470 ops/s
# Warmup Iteration   9: 1952874.925 ops/s
# Warmup Iteration  10: 1946818.432 ops/s
# Warmup Iteration  11: 1954503.427 ops/s
# Warmup Iteration  12: 1942854.698 ops/s
# Warmup Iteration  13: 1961526.728 ops/s
# Warmup Iteration  14: 1946360.112 ops/s
# Warmup Iteration  15: 1940378.878 ops/s
# Warmup Iteration  16: 1952536.084 ops/s
# Warmup Iteration  17: 1928345.333 ops/s
# Warmup Iteration  18: 1898474.777 ops/s
# Warmup Iteration  19: 1932434.083 ops/s
# Warmup Iteration  20: 1931358.059 ops/s
# Warmup Iteration  21: 1890606.849 ops/s
# Warmup Iteration  22: 1923141.581 ops/s
# Warmup Iteration  23: 1926577.978 ops/s
# Warmup Iteration  24: 1939037.426 ops/s
# Warmup Iteration  25: 1920987.871 ops/s
# Warmup Iteration  26: 1928935.674 ops/s
# Warmup Iteration  27: 1933228.661 ops/s
# Warmup Iteration  28: 1927361.817 ops/s
# Warmup Iteration  29: 1917016.994 ops/s
# Warmup Iteration  30: 1928208.525 ops/s
Iteration   1: 1923845.930 ops/s
Iteration   2: 1935028.235 ops/s
Iteration   3: 1926376.080 ops/s
Iteration   4: 1903920.291 ops/s
Iteration   5: 1915629.500 ops/s
Iteration   6: 1915959.328 ops/s
Iteration   7: 1908902.109 ops/s
Iteration   8: 1932294.510 ops/s
Iteration   9: 1941194.679 ops/s
Iteration  10: 1925840.164 ops/s
Iteration  11: 1936049.548 ops/s
Iteration  12: 1918976.643 ops/s
Iteration  13: 1900238.508 ops/s
Iteration  14: 1921786.050 ops/s
Iteration  15: 1929707.131 ops/s
Iteration  16: 1931905.650 ops/s
Iteration  17: 1900091.104 ops/s
Iteration  18: 1923976.452 ops/s
Iteration  19: 1927382.951 ops/s
Iteration  20: 1898966.225 ops/s
Iteration  21: 1919069.312 ops/s
Iteration  22: 1940080.677 ops/s
Iteration  23: 1920399.557 ops/s
Iteration  24: 1899368.725 ops/s
Iteration  25: 1932290.601 ops/s
Iteration  26: 1936284.504 ops/s
Iteration  27: 1922052.129 ops/s
Iteration  28: 1912384.509 ops/s
Iteration  29: 1924598.700 ops/s
Iteration  30: 1897296.272 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reduceOptional":
  1920729.869 ±(99.9%) 8736.995 ops/s [Average]
  (min, avg, max) = (1897296.272, 1920729.869, 1941194.679), stdev = 13077.123
  CI (99.9%): [1911992.875, 1929466.864] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_reduceOptional  thrpt   30  1920729.869 ± 8736.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1701609.235 ops/s
# Warmup Iteration   2: 3860183.009 ops/s
# Warmup Iteration   3: 3308450.819 ops/s
# Warmup Iteration   4: 3889371.831 ops/s
# Warmup Iteration   5: 3931966.946 ops/s
# Warmup Iteration   6: 3943952.105 ops/s
# Warmup Iteration   7: 3917616.328 ops/s
# Warmup Iteration   8: 3916233.855 ops/s
# Warmup Iteration   9: 3872249.419 ops/s
# Warmup Iteration  10: 3927429.959 ops/s
# Warmup Iteration  11: 3915822.775 ops/s
# Warmup Iteration  12: 3900182.247 ops/s
# Warmup Iteration  13: 3930114.704 ops/s
# Warmup Iteration  14: 3928110.924 ops/s
# Warmup Iteration  15: 3929367.690 ops/s
# Warmup Iteration  16: 3910896.381 ops/s
# Warmup Iteration  17: 3905219.297 ops/s
# Warmup Iteration  18: 3937555.660 ops/s
# Warmup Iteration  19: 3929138.301 ops/s
# Warmup Iteration  20: 3935161.933 ops/s
# Warmup Iteration  21: 3907757.658 ops/s
# Warmup Iteration  22: 3921930.430 ops/s
# Warmup Iteration  23: 3928503.312 ops/s
# Warmup Iteration  24: 3937846.328 ops/s
# Warmup Iteration  25: 3894129.407 ops/s
# Warmup Iteration  26: 3915369.836 ops/s
# Warmup Iteration  27: 3926749.062 ops/s
# Warmup Iteration  28: 3893145.020 ops/s
# Warmup Iteration  29: 3909862.314 ops/s
# Warmup Iteration  30: 3869500.193 ops/s
Iteration   1: 3925975.110 ops/s
Iteration   2: 3934000.263 ops/s
Iteration   3: 3920958.871 ops/s
Iteration   4: 3958825.273 ops/s
Iteration   5: 3881934.074 ops/s
Iteration   6: 3954512.345 ops/s
Iteration   7: 3930200.808 ops/s
Iteration   8: 3874438.884 ops/s
Iteration   9: 3933090.956 ops/s
Iteration  10: 3890827.920 ops/s
Iteration  11: 3924461.873 ops/s
Iteration  12: 3954505.761 ops/s
Iteration  13: 3847177.235 ops/s
Iteration  14: 3902137.306 ops/s
Iteration  15: 3936471.106 ops/s
Iteration  16: 3961876.076 ops/s
Iteration  17: 3936097.963 ops/s
Iteration  18: 3944430.238 ops/s
Iteration  19: 3794730.142 ops/s
Iteration  20: 3928828.804 ops/s
Iteration  21: 3952688.499 ops/s
Iteration  22: 3912622.435 ops/s
Iteration  23: 3910529.478 ops/s
Iteration  24: 3968681.766 ops/s
Iteration  25: 3891111.697 ops/s
Iteration  26: 3926774.110 ops/s
Iteration  27: 3950806.889 ops/s
Iteration  28: 3945578.031 ops/s
Iteration  29: 3923516.948 ops/s
Iteration  30: 3905294.805 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reject":
  3920769.522 ±(99.9%) 24608.687 ops/s [Average]
  (min, avg, max) = (3794730.142, 3920769.522, 3968681.766), stdev = 36833.127
  CI (99.9%): [3896160.835, 3945378.210] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_reject  thrpt   30  3920769.522 ± 24608.687  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4128175.570 ops/s
# Warmup Iteration   2: 9412555.681 ops/s
# Warmup Iteration   3: 8063317.767 ops/s
# Warmup Iteration   4: 9577609.679 ops/s
# Warmup Iteration   5: 9520773.422 ops/s
# Warmup Iteration   6: 9553317.180 ops/s
# Warmup Iteration   7: 9602634.849 ops/s
# Warmup Iteration   8: 9629750.743 ops/s
# Warmup Iteration   9: 9622525.539 ops/s
# Warmup Iteration  10: 9637107.847 ops/s
# Warmup Iteration  11: 9606983.997 ops/s
# Warmup Iteration  12: 9572595.978 ops/s
# Warmup Iteration  13: 9499991.917 ops/s
# Warmup Iteration  14: 9551487.639 ops/s
# Warmup Iteration  15: 9516998.188 ops/s
# Warmup Iteration  16: 9543640.304 ops/s
# Warmup Iteration  17: 9698934.112 ops/s
# Warmup Iteration  18: 9681373.032 ops/s
# Warmup Iteration  19: 9648082.964 ops/s
# Warmup Iteration  20: 9708083.369 ops/s
# Warmup Iteration  21: 9713321.105 ops/s
# Warmup Iteration  22: 9655215.808 ops/s
# Warmup Iteration  23: 9615227.695 ops/s
# Warmup Iteration  24: 9679581.856 ops/s
# Warmup Iteration  25: 9603006.109 ops/s
# Warmup Iteration  26: 9701797.121 ops/s
# Warmup Iteration  27: 9647219.482 ops/s
# Warmup Iteration  28: 9608467.843 ops/s
# Warmup Iteration  29: 9671620.422 ops/s
# Warmup Iteration  30: 9605030.308 ops/s
Iteration   1: 9623868.963 ops/s
Iteration   2: 9654416.573 ops/s
Iteration   3: 9726472.189 ops/s
Iteration   4: 9624860.288 ops/s
Iteration   5: 9560501.506 ops/s
Iteration   6: 9661402.807 ops/s
Iteration   7: 9721532.624 ops/s
Iteration   8: 9553858.800 ops/s
Iteration   9: 9707748.120 ops/s
Iteration  10: 9633937.872 ops/s
Iteration  11: 9451266.617 ops/s
Iteration  12: 9649273.760 ops/s
Iteration  13: 9738470.359 ops/s
Iteration  14: 9675613.482 ops/s
Iteration  15: 9712957.474 ops/s
Iteration  16: 9730931.204 ops/s
Iteration  17: 9661602.217 ops/s
Iteration  18: 9718180.602 ops/s
Iteration  19: 9599624.412 ops/s
Iteration  20: 9663887.146 ops/s
Iteration  21: 9707195.950 ops/s
Iteration  22: 9651131.864 ops/s
Iteration  23: 9692480.805 ops/s
Iteration  24: 9675815.803 ops/s
Iteration  25: 9711503.959 ops/s
Iteration  26: 9614657.137 ops/s
Iteration  27: 9432791.556 ops/s
Iteration  28: 9648730.878 ops/s
Iteration  29: 9712734.680 ops/s
Iteration  30: 9657718.055 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_rejectWith":
  9652505.590 ±(99.9%) 49787.915 ops/s [Average]
  (min, avg, max) = (9432791.556, 9652505.590, 9738470.359), stdev = 74520.213
  CI (99.9%): [9602717.675, 9702293.505] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_rejectWith  thrpt   30  9652505.590 ± 49787.915  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1675870.596 ops/s
# Warmup Iteration   2: 3551818.506 ops/s
# Warmup Iteration   3: 3561436.121 ops/s
# Warmup Iteration   4: 3020682.760 ops/s
# Warmup Iteration   5: 3601076.997 ops/s
# Warmup Iteration   6: 3571759.777 ops/s
# Warmup Iteration   7: 3564444.343 ops/s
# Warmup Iteration   8: 3586145.148 ops/s
# Warmup Iteration   9: 3562117.134 ops/s
# Warmup Iteration  10: 3559654.455 ops/s
# Warmup Iteration  11: 3591193.478 ops/s
# Warmup Iteration  12: 3590934.119 ops/s
# Warmup Iteration  13: 3587453.581 ops/s
# Warmup Iteration  14: 3574946.332 ops/s
# Warmup Iteration  15: 3592214.093 ops/s
# Warmup Iteration  16: 3566749.806 ops/s
# Warmup Iteration  17: 3546845.163 ops/s
# Warmup Iteration  18: 3587951.441 ops/s
# Warmup Iteration  19: 3561537.215 ops/s
# Warmup Iteration  20: 3560615.409 ops/s
# Warmup Iteration  21: 3517582.078 ops/s
# Warmup Iteration  22: 3597995.902 ops/s
# Warmup Iteration  23: 3571429.300 ops/s
# Warmup Iteration  24: 3589646.606 ops/s
# Warmup Iteration  25: 3564023.663 ops/s
# Warmup Iteration  26: 3605844.676 ops/s
# Warmup Iteration  27: 3614689.456 ops/s
# Warmup Iteration  28: 3593229.809 ops/s
# Warmup Iteration  29: 3600468.320 ops/s
# Warmup Iteration  30: 3601744.502 ops/s
Iteration   1: 3588706.891 ops/s
Iteration   2: 3573948.150 ops/s
Iteration   3: 3543298.158 ops/s
Iteration   4: 3556259.777 ops/s
Iteration   5: 3548506.181 ops/s
Iteration   6: 3593296.422 ops/s
Iteration   7: 3588251.825 ops/s
Iteration   8: 3609468.418 ops/s
Iteration   9: 3609756.541 ops/s
Iteration  10: 3563128.677 ops/s
Iteration  11: 3581883.742 ops/s
Iteration  12: 3587797.988 ops/s
Iteration  13: 3574986.415 ops/s
Iteration  14: 3579434.264 ops/s
Iteration  15: 3583207.934 ops/s
Iteration  16: 3584907.729 ops/s
Iteration  17: 3591821.945 ops/s
Iteration  18: 3583288.519 ops/s
Iteration  19: 3592438.448 ops/s
Iteration  20: 3533462.166 ops/s
Iteration  21: 3607067.789 ops/s
Iteration  22: 3509798.597 ops/s
Iteration  23: 3581334.785 ops/s
Iteration  24: 3579994.584 ops/s
Iteration  25: 3590518.077 ops/s
Iteration  26: 3556991.869 ops/s
Iteration  27: 3579662.102 ops/s
Iteration  28: 3615070.340 ops/s
Iteration  29: 3585309.221 ops/s
Iteration  30: 3593187.963 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_rejectWithIndex":
  3578892.851 ±(99.9%) 15491.598 ops/s [Average]
  (min, avg, max) = (3509798.597, 3578892.851, 3615070.340), stdev = 23187.097
  CI (99.9%): [3563401.252, 3594384.449] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  3578892.851 ± 15491.598  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2334921.206 ops/s
# Warmup Iteration   2: 5517373.541 ops/s
# Warmup Iteration   3: 4607194.018 ops/s
# Warmup Iteration   4: 5376636.564 ops/s
# Warmup Iteration   5: 5384019.280 ops/s
# Warmup Iteration   6: 5480965.230 ops/s
# Warmup Iteration   7: 5502233.338 ops/s
# Warmup Iteration   8: 5452119.953 ops/s
# Warmup Iteration   9: 5455391.482 ops/s
# Warmup Iteration  10: 5510579.433 ops/s
# Warmup Iteration  11: 5507522.425 ops/s
# Warmup Iteration  12: 5486008.759 ops/s
# Warmup Iteration  13: 5451041.705 ops/s
# Warmup Iteration  14: 5519151.474 ops/s
# Warmup Iteration  15: 5507541.296 ops/s
# Warmup Iteration  16: 5477370.548 ops/s
# Warmup Iteration  17: 5536734.743 ops/s
# Warmup Iteration  18: 5510722.706 ops/s
# Warmup Iteration  19: 5516326.273 ops/s
# Warmup Iteration  20: 5540354.974 ops/s
# Warmup Iteration  21: 5565828.661 ops/s
# Warmup Iteration  22: 5479632.623 ops/s
# Warmup Iteration  23: 5549129.484 ops/s
# Warmup Iteration  24: 5547602.438 ops/s
# Warmup Iteration  25: 5541332.028 ops/s
# Warmup Iteration  26: 5512585.684 ops/s
# Warmup Iteration  27: 5496549.485 ops/s
# Warmup Iteration  28: 5435102.936 ops/s
# Warmup Iteration  29: 5471211.673 ops/s
# Warmup Iteration  30: 5539230.913 ops/s
Iteration   1: 5509973.724 ops/s
Iteration   2: 5354093.466 ops/s
Iteration   3: 5446084.933 ops/s
Iteration   4: 5531288.941 ops/s
Iteration   5: 5526545.757 ops/s
Iteration   6: 5533313.677 ops/s
Iteration   7: 5512024.255 ops/s
Iteration   8: 5548440.207 ops/s
Iteration   9: 5487885.952 ops/s
Iteration  10: 5537235.893 ops/s
Iteration  11: 5569866.148 ops/s
Iteration  12: 5559320.285 ops/s
Iteration  13: 5371598.263 ops/s
Iteration  14: 5476662.636 ops/s
Iteration  15: 5511182.989 ops/s
Iteration  16: 5540740.579 ops/s
Iteration  17: 5515455.192 ops/s
Iteration  18: 5548845.084 ops/s
Iteration  19: 5533671.572 ops/s
Iteration  20: 5529728.190 ops/s
Iteration  21: 5530910.319 ops/s
Iteration  22: 5525113.489 ops/s
Iteration  23: 5550458.738 ops/s
Iteration  24: 5509002.915 ops/s
Iteration  25: 5532619.589 ops/s
Iteration  26: 5520508.388 ops/s
Iteration  27: 5540965.429 ops/s
Iteration  28: 5492901.768 ops/s
Iteration  29: 5536364.266 ops/s
Iteration  30: 5504520.536 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  5512910.773 ±(99.9%) 32051.252 ops/s [Average]
  (min, avg, max) = (5354093.466, 5512910.773, 5569866.148), stdev = 47972.809
  CI (99.9%): [5480859.521, 5544962.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  5512910.773 ± 32051.252  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1262287.142 ops/s
# Warmup Iteration   2: 3058651.642 ops/s
# Warmup Iteration   3: 2608770.123 ops/s
# Warmup Iteration   4: 3082591.008 ops/s
# Warmup Iteration   5: 3107089.750 ops/s
# Warmup Iteration   6: 3098756.417 ops/s
# Warmup Iteration   7: 3122912.584 ops/s
# Warmup Iteration   8: 3122432.286 ops/s
# Warmup Iteration   9: 3106198.761 ops/s
# Warmup Iteration  10: 3085410.500 ops/s
# Warmup Iteration  11: 3107436.758 ops/s
# Warmup Iteration  12: 3124340.578 ops/s
# Warmup Iteration  13: 3126565.480 ops/s
# Warmup Iteration  14: 3110882.331 ops/s
# Warmup Iteration  15: 3123677.057 ops/s
# Warmup Iteration  16: 3128764.564 ops/s
# Warmup Iteration  17: 3095929.160 ops/s
# Warmup Iteration  18: 3065748.315 ops/s
# Warmup Iteration  19: 3092111.374 ops/s
# Warmup Iteration  20: 3099824.356 ops/s
# Warmup Iteration  21: 3111752.168 ops/s
# Warmup Iteration  22: 3110837.911 ops/s
# Warmup Iteration  23: 3072710.587 ops/s
# Warmup Iteration  24: 3086468.268 ops/s
# Warmup Iteration  25: 3095118.312 ops/s
# Warmup Iteration  26: 3096287.747 ops/s
# Warmup Iteration  27: 3093822.009 ops/s
# Warmup Iteration  28: 3107355.866 ops/s
# Warmup Iteration  29: 3106182.326 ops/s
# Warmup Iteration  30: 3089551.524 ops/s
Iteration   1: 3090069.386 ops/s
Iteration   2: 3095063.827 ops/s
Iteration   3: 3114014.665 ops/s
Iteration   4: 3102102.521 ops/s
Iteration   5: 3088177.558 ops/s
Iteration   6: 3107941.400 ops/s
Iteration   7: 3099049.471 ops/s
Iteration   8: 3116057.082 ops/s
Iteration   9: 3093295.735 ops/s
Iteration  10: 3089558.674 ops/s
Iteration  11: 3082885.096 ops/s
Iteration  12: 3082682.839 ops/s
Iteration  13: 3063829.447 ops/s
Iteration  14: 3100980.553 ops/s
Iteration  15: 3119769.330 ops/s
Iteration  16: 3118809.777 ops/s
Iteration  17: 3113398.314 ops/s
Iteration  18: 3124988.062 ops/s
Iteration  19: 3087824.218 ops/s
Iteration  20: 3086569.408 ops/s
Iteration  21: 3093842.150 ops/s
Iteration  22: 3010762.584 ops/s
Iteration  23: 3098935.131 ops/s
Iteration  24: 3092409.748 ops/s
Iteration  25: 3098778.727 ops/s
Iteration  26: 3111584.136 ops/s
Iteration  27: 3100568.413 ops/s
Iteration  28: 3067075.707 ops/s
Iteration  29: 3109590.256 ops/s
Iteration  30: 3102369.474 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_rejectWith_target":
  3095432.790 ±(99.9%) 14399.297 ops/s [Average]
  (min, avg, max) = (3010762.584, 3095432.790, 3124988.062), stdev = 21552.191
  CI (99.9%): [3081033.493, 3109832.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  3095432.790 ± 14399.297  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 547228.525 ops/s
# Warmup Iteration   2: 1179746.851 ops/s
# Warmup Iteration   3: 1291638.554 ops/s
# Warmup Iteration   4: 1282883.280 ops/s
# Warmup Iteration   5: 1053916.587 ops/s
# Warmup Iteration   6: 1276817.638 ops/s
# Warmup Iteration   7: 1291102.108 ops/s
# Warmup Iteration   8: 1296815.399 ops/s
# Warmup Iteration   9: 1292159.806 ops/s
# Warmup Iteration  10: 1293969.092 ops/s
# Warmup Iteration  11: 1279493.838 ops/s
# Warmup Iteration  12: 1295520.776 ops/s
# Warmup Iteration  13: 1289317.592 ops/s
# Warmup Iteration  14: 1297422.396 ops/s
# Warmup Iteration  15: 1292631.137 ops/s
# Warmup Iteration  16: 1287008.312 ops/s
# Warmup Iteration  17: 1302622.512 ops/s
# Warmup Iteration  18: 1288417.560 ops/s
# Warmup Iteration  19: 1297872.210 ops/s
# Warmup Iteration  20: 1289208.464 ops/s
# Warmup Iteration  21: 1298173.056 ops/s
# Warmup Iteration  22: 1295376.814 ops/s
# Warmup Iteration  23: 1301902.391 ops/s
# Warmup Iteration  24: 1300196.949 ops/s
# Warmup Iteration  25: 1298646.107 ops/s
# Warmup Iteration  26: 1299910.768 ops/s
# Warmup Iteration  27: 1297450.507 ops/s
# Warmup Iteration  28: 1302257.415 ops/s
# Warmup Iteration  29: 1302351.864 ops/s
# Warmup Iteration  30: 1299532.907 ops/s
Iteration   1: 1311705.227 ops/s
Iteration   2: 1288000.195 ops/s
Iteration   3: 1287006.107 ops/s
Iteration   4: 1287521.376 ops/s
Iteration   5: 1302373.768 ops/s
Iteration   6: 1307719.945 ops/s
Iteration   7: 1300514.259 ops/s
Iteration   8: 1280241.347 ops/s
Iteration   9: 1303851.395 ops/s
Iteration  10: 1307013.417 ops/s
Iteration  11: 1301918.697 ops/s
Iteration  12: 1295877.468 ops/s
Iteration  13: 1291796.597 ops/s
Iteration  14: 1299453.218 ops/s
Iteration  15: 1299757.031 ops/s
Iteration  16: 1301842.071 ops/s
Iteration  17: 1296028.019 ops/s
Iteration  18: 1303421.201 ops/s
Iteration  19: 1304510.958 ops/s
Iteration  20: 1300649.023 ops/s
Iteration  21: 1298873.201 ops/s
Iteration  22: 1293665.028 ops/s
Iteration  23: 1285112.154 ops/s
Iteration  24: 1305547.216 ops/s
Iteration  25: 1257841.126 ops/s
Iteration  26: 1294657.722 ops/s
Iteration  27: 1280987.523 ops/s
Iteration  28: 1314127.613 ops/s
Iteration  29: 1300134.674 ops/s
Iteration  30: 1291890.613 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeAll":
  1296467.940 ±(99.9%) 7462.281 ops/s [Average]
  (min, avg, max) = (1257841.126, 1296467.940, 1314127.613), stdev = 11169.192
  CI (99.9%): [1289005.659, 1303930.221] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_removeAll  thrpt   30  1296467.940 ± 7462.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 117072.008 ops/s
# Warmup Iteration   2: 182073.024 ops/s
# Warmup Iteration   3: 229487.138 ops/s
# Warmup Iteration   4: 229129.618 ops/s
# Warmup Iteration   5: 228317.489 ops/s
# Warmup Iteration   6: 229673.722 ops/s
# Warmup Iteration   7: 192345.910 ops/s
# Warmup Iteration   8: 231652.811 ops/s
# Warmup Iteration   9: 230840.110 ops/s
# Warmup Iteration  10: 230339.688 ops/s
# Warmup Iteration  11: 228864.767 ops/s
# Warmup Iteration  12: 230254.953 ops/s
# Warmup Iteration  13: 230225.378 ops/s
# Warmup Iteration  14: 228957.278 ops/s
# Warmup Iteration  15: 228633.963 ops/s
# Warmup Iteration  16: 231323.205 ops/s
# Warmup Iteration  17: 229282.507 ops/s
# Warmup Iteration  18: 230312.581 ops/s
# Warmup Iteration  19: 229803.301 ops/s
# Warmup Iteration  20: 230604.132 ops/s
# Warmup Iteration  21: 228812.990 ops/s
# Warmup Iteration  22: 229345.670 ops/s
# Warmup Iteration  23: 227916.995 ops/s
# Warmup Iteration  24: 231205.901 ops/s
# Warmup Iteration  25: 228925.038 ops/s
# Warmup Iteration  26: 231209.261 ops/s
# Warmup Iteration  27: 230296.099 ops/s
# Warmup Iteration  28: 227520.558 ops/s
# Warmup Iteration  29: 230054.225 ops/s
# Warmup Iteration  30: 230059.845 ops/s
Iteration   1: 227769.003 ops/s
Iteration   2: 226465.061 ops/s
Iteration   3: 232341.415 ops/s
Iteration   4: 229179.622 ops/s
Iteration   5: 231136.335 ops/s
Iteration   6: 228544.256 ops/s
Iteration   7: 229398.403 ops/s
Iteration   8: 225990.760 ops/s
Iteration   9: 229603.446 ops/s
Iteration  10: 231479.315 ops/s
Iteration  11: 229029.068 ops/s
Iteration  12: 226940.092 ops/s
Iteration  13: 231407.782 ops/s
Iteration  14: 229142.676 ops/s
Iteration  15: 226175.623 ops/s
Iteration  16: 230297.613 ops/s
Iteration  17: 230392.952 ops/s
Iteration  18: 231032.295 ops/s
Iteration  19: 230367.858 ops/s
Iteration  20: 228416.053 ops/s
Iteration  21: 231833.805 ops/s
Iteration  22: 226367.873 ops/s
Iteration  23: 231014.323 ops/s
Iteration  24: 230610.496 ops/s
Iteration  25: 229894.307 ops/s
Iteration  26: 230444.883 ops/s
Iteration  27: 231659.913 ops/s
Iteration  28: 231474.415 ops/s
Iteration  29: 230363.216 ops/s
Iteration  30: 230593.308 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeAllIterable":
  229645.539 ±(99.9%) 1223.359 ops/s [Average]
  (min, avg, max) = (225990.760, 229645.539, 232341.415), stdev = 1831.067
  CI (99.9%): [228422.179, 230868.898] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_removeAllIterable  thrpt   30  229645.539 ± 1223.359  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeAllWithWeakReference$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeAllWithWeakReference

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 51.269 ops/s
# Warmup Iteration   2: 50.865 ops/s
# Warmup Iteration   3: 50.030 ops/s
# Warmup Iteration   4: 51.909 ops/s
# Warmup Iteration   5: 51.321 ops/s
# Warmup Iteration   6: 51.431 ops/s
# Warmup Iteration   7: 50.527 ops/s
# Warmup Iteration   8: 51.119 ops/s
# Warmup Iteration   9: 51.841 ops/s
# Warmup Iteration  10: 51.158 ops/s
# Warmup Iteration  11: 51.278 ops/s
# Warmup Iteration  12: 51.312 ops/s
# Warmup Iteration  13: 51.039 ops/s
# Warmup Iteration  14: 51.727 ops/s
# Warmup Iteration  15: 51.418 ops/s
# Warmup Iteration  16: 51.494 ops/s
# Warmup Iteration  17: 51.019 ops/s
# Warmup Iteration  18: 51.813 ops/s
# Warmup Iteration  19: 51.496 ops/s
# Warmup Iteration  20: 51.528 ops/s
# Warmup Iteration  21: 52.467 ops/s
# Warmup Iteration  22: 52.257 ops/s
# Warmup Iteration  23: 51.360 ops/s
# Warmup Iteration  24: 49.104 ops/s
# Warmup Iteration  25: 52.202 ops/s
# Warmup Iteration  26: 52.240 ops/s
# Warmup Iteration  27: 49.966 ops/s
# Warmup Iteration  28: 51.114 ops/s
# Warmup Iteration  29: 52.450 ops/s
# Warmup Iteration  30: 51.962 ops/s
Iteration   1: 52.312 ops/s
Iteration   2: 51.578 ops/s
Iteration   3: 48.993 ops/s
Iteration   4: 49.782 ops/s
Iteration   5: 51.660 ops/s
Iteration   6: 49.734 ops/s
Iteration   7: 49.225 ops/s
Iteration   8: 50.502 ops/s
Iteration   9: 50.521 ops/s
Iteration  10: 49.553 ops/s
Iteration  11: 48.698 ops/s
Iteration  12: 50.787 ops/s
Iteration  13: 51.033 ops/s
Iteration  14: 49.030 ops/s
Iteration  15: 48.683 ops/s
Iteration  16: 49.118 ops/s
Iteration  17: 49.219 ops/s
Iteration  18: 49.961 ops/s
Iteration  19: 48.584 ops/s
Iteration  20: 50.451 ops/s
Iteration  21: 51.411 ops/s
Iteration  22: 50.626 ops/s
Iteration  23: 47.728 ops/s
Iteration  24: 50.137 ops/s
Iteration  25: 51.089 ops/s
Iteration  26: 51.225 ops/s
Iteration  27: 52.188 ops/s
Iteration  28: 51.911 ops/s
Iteration  29: 51.418 ops/s
Iteration  30: 50.661 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeAllWithWeakReference":
  50.261 ±(99.9%) 0.802 ops/s [Average]
  (min, avg, max) = (47.728, 50.261, 52.312), stdev = 1.201
  CI (99.9%): [49.458, 51.063] (assumes normal distribution)


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt   Score   Error  Units
MultiReaderFastListTest._Benchmark.benchmark_removeAllWithWeakReference  thrpt   30  50.261 ± 0.802  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2289751.610 ops/s
# Warmup Iteration   2: 4995505.074 ops/s
# Warmup Iteration   3: 5029554.056 ops/s
# Warmup Iteration   4: 4250882.155 ops/s
# Warmup Iteration   5: 5056261.620 ops/s
# Warmup Iteration   6: 5055809.447 ops/s
# Warmup Iteration   7: 5054083.037 ops/s
# Warmup Iteration   8: 5052507.599 ops/s
# Warmup Iteration   9: 5032002.996 ops/s
# Warmup Iteration  10: 5048599.630 ops/s
# Warmup Iteration  11: 5031743.782 ops/s
# Warmup Iteration  12: 5054955.355 ops/s
# Warmup Iteration  13: 5003943.437 ops/s
# Warmup Iteration  14: 5061555.386 ops/s
# Warmup Iteration  15: 5049049.891 ops/s
# Warmup Iteration  16: 5038639.436 ops/s
# Warmup Iteration  17: 5044610.559 ops/s
# Warmup Iteration  18: 4968362.528 ops/s
# Warmup Iteration  19: 5032602.325 ops/s
# Warmup Iteration  20: 5050682.595 ops/s
# Warmup Iteration  21: 5010326.870 ops/s
# Warmup Iteration  22: 5050191.154 ops/s
# Warmup Iteration  23: 5042077.518 ops/s
# Warmup Iteration  24: 5033096.672 ops/s
# Warmup Iteration  25: 5041309.071 ops/s
# Warmup Iteration  26: 5054586.246 ops/s
# Warmup Iteration  27: 4977228.077 ops/s
# Warmup Iteration  28: 5033038.491 ops/s
# Warmup Iteration  29: 5034198.263 ops/s
# Warmup Iteration  30: 5047175.358 ops/s
Iteration   1: 5042857.971 ops/s
Iteration   2: 5060512.113 ops/s
Iteration   3: 4843579.537 ops/s
Iteration   4: 5028235.665 ops/s
Iteration   5: 4996757.104 ops/s
Iteration   6: 5049148.325 ops/s
Iteration   7: 5045377.201 ops/s
Iteration   8: 5039837.956 ops/s
Iteration   9: 5047829.405 ops/s
Iteration  10: 5036049.867 ops/s
Iteration  11: 5041865.125 ops/s
Iteration  12: 5039456.063 ops/s
Iteration  13: 5021320.246 ops/s
Iteration  14: 4966296.347 ops/s
Iteration  15: 5057725.049 ops/s
Iteration  16: 5007539.169 ops/s
Iteration  17: 5037603.474 ops/s
Iteration  18: 5062457.692 ops/s
Iteration  19: 5023115.156 ops/s
Iteration  20: 4969470.583 ops/s
Iteration  21: 5042239.648 ops/s
Iteration  22: 5039718.226 ops/s
Iteration  23: 5035205.638 ops/s
Iteration  24: 5054333.487 ops/s
Iteration  25: 5012874.344 ops/s
Iteration  26: 5072664.109 ops/s
Iteration  27: 5049084.815 ops/s
Iteration  28: 5040560.732 ops/s
Iteration  29: 5053653.365 ops/s
Iteration  30: 4991991.612 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeIf":
  5026978.667 ±(99.9%) 28737.665 ops/s [Average]
  (min, avg, max) = (4843579.537, 5026978.667, 5072664.109), stdev = 43013.187
  CI (99.9%): [4998241.003, 5055716.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_removeIf  thrpt   30  5026978.667 ± 28737.665  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2289733.363 ops/s
# Warmup Iteration   2: 5034463.612 ops/s
# Warmup Iteration   3: 5008022.908 ops/s
# Warmup Iteration   4: 4240670.278 ops/s
# Warmup Iteration   5: 5047262.123 ops/s
# Warmup Iteration   6: 5027784.717 ops/s
# Warmup Iteration   7: 4990295.438 ops/s
# Warmup Iteration   8: 5006888.490 ops/s
# Warmup Iteration   9: 5026486.467 ops/s
# Warmup Iteration  10: 5008352.305 ops/s
# Warmup Iteration  11: 5034064.126 ops/s
# Warmup Iteration  12: 4982560.777 ops/s
# Warmup Iteration  13: 5022585.489 ops/s
# Warmup Iteration  14: 4988035.724 ops/s
# Warmup Iteration  15: 5038025.586 ops/s
# Warmup Iteration  16: 5029073.820 ops/s
# Warmup Iteration  17: 5040757.439 ops/s
# Warmup Iteration  18: 5020385.063 ops/s
# Warmup Iteration  19: 5003893.181 ops/s
# Warmup Iteration  20: 4948216.997 ops/s
# Warmup Iteration  21: 5024585.852 ops/s
# Warmup Iteration  22: 5021362.159 ops/s
# Warmup Iteration  23: 4948964.761 ops/s
# Warmup Iteration  24: 5019564.711 ops/s
# Warmup Iteration  25: 5053593.301 ops/s
# Warmup Iteration  26: 5023218.284 ops/s
# Warmup Iteration  27: 5008481.368 ops/s
# Warmup Iteration  28: 5009776.537 ops/s
# Warmup Iteration  29: 5025018.261 ops/s
# Warmup Iteration  30: 5014292.490 ops/s
Iteration   1: 5045234.654 ops/s
Iteration   2: 5032975.206 ops/s
Iteration   3: 5025212.100 ops/s
Iteration   4: 4945506.207 ops/s
Iteration   5: 5053414.511 ops/s
Iteration   6: 5027831.532 ops/s
Iteration   7: 4996403.308 ops/s
Iteration   8: 5047997.717 ops/s
Iteration   9: 4953636.929 ops/s
Iteration  10: 5028020.404 ops/s
Iteration  11: 5012906.641 ops/s
Iteration  12: 5035313.795 ops/s
Iteration  13: 5055783.781 ops/s
Iteration  14: 5019763.150 ops/s
Iteration  15: 5009402.409 ops/s
Iteration  16: 5024836.020 ops/s
Iteration  17: 5042196.221 ops/s
Iteration  18: 5019336.003 ops/s
Iteration  19: 5011913.941 ops/s
Iteration  20: 4998544.982 ops/s
Iteration  21: 4960888.238 ops/s
Iteration  22: 4952951.887 ops/s
Iteration  23: 5022178.603 ops/s
Iteration  24: 5035258.520 ops/s
Iteration  25: 5005274.484 ops/s
Iteration  26: 5021098.267 ops/s
Iteration  27: 5026015.900 ops/s
Iteration  28: 5043735.516 ops/s
Iteration  29: 5025246.688 ops/s
Iteration  30: 5033990.436 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeIfWith":
  5017095.602 ±(99.9%) 19657.017 ops/s [Average]
  (min, avg, max) = (4945506.207, 5017095.602, 5055783.781), stdev = 29421.701
  CI (99.9%): [4997438.584, 5036752.619] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_removeIfWith  thrpt   30  5017095.602 ± 19657.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3322623.825 ops/s
# Warmup Iteration   2: 5753352.846 ops/s
# Warmup Iteration   3: 6212860.377 ops/s
# Warmup Iteration   4: 6236527.531 ops/s
# Warmup Iteration   5: 6018999.674 ops/s
# Warmup Iteration   6: 5478442.328 ops/s
# Warmup Iteration   7: 6198255.024 ops/s
# Warmup Iteration   8: 6239403.813 ops/s
# Warmup Iteration   9: 6245506.880 ops/s
# Warmup Iteration  10: 6254078.836 ops/s
# Warmup Iteration  11: 6220992.664 ops/s
# Warmup Iteration  12: 6186166.753 ops/s
# Warmup Iteration  13: 6258707.106 ops/s
# Warmup Iteration  14: 6194637.958 ops/s
# Warmup Iteration  15: 6215011.087 ops/s
# Warmup Iteration  16: 6221291.256 ops/s
# Warmup Iteration  17: 6277039.053 ops/s
# Warmup Iteration  18: 6256267.848 ops/s
# Warmup Iteration  19: 6267950.736 ops/s
# Warmup Iteration  20: 6244851.960 ops/s
# Warmup Iteration  21: 6259532.447 ops/s
# Warmup Iteration  22: 6275692.861 ops/s
# Warmup Iteration  23: 6256473.158 ops/s
# Warmup Iteration  24: 6189082.199 ops/s
# Warmup Iteration  25: 6262063.235 ops/s
# Warmup Iteration  26: 6263790.269 ops/s
# Warmup Iteration  27: 6268305.912 ops/s
# Warmup Iteration  28: 6253756.844 ops/s
# Warmup Iteration  29: 6270477.226 ops/s
# Warmup Iteration  30: 6239894.724 ops/s
Iteration   1: 6259312.356 ops/s
Iteration   2: 6273186.497 ops/s
Iteration   3: 6291497.249 ops/s
Iteration   4: 6257639.436 ops/s
Iteration   5: 6219103.178 ops/s
Iteration   6: 6279531.098 ops/s
Iteration   7: 6284177.395 ops/s
Iteration   8: 6211970.900 ops/s
Iteration   9: 6262126.677 ops/s
Iteration  10: 6217024.771 ops/s
Iteration  11: 6257628.835 ops/s
Iteration  12: 6279115.846 ops/s
Iteration  13: 6183479.948 ops/s
Iteration  14: 6303452.406 ops/s
Iteration  15: 6280052.745 ops/s
Iteration  16: 6275494.302 ops/s
Iteration  17: 6262917.276 ops/s
Iteration  18: 6250341.028 ops/s
Iteration  19: 6281480.154 ops/s
Iteration  20: 6126347.915 ops/s
Iteration  21: 6267172.289 ops/s
Iteration  22: 6298315.989 ops/s
Iteration  23: 6241803.016 ops/s
Iteration  24: 6283360.881 ops/s
Iteration  25: 6261964.005 ops/s
Iteration  26: 6290876.581 ops/s
Iteration  27: 6250934.586 ops/s
Iteration  28: 6243764.650 ops/s
Iteration  29: 6155955.256 ops/s
Iteration  30: 6252623.884 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeIndex":
  6253421.705 ±(99.9%) 27303.531 ops/s [Average]
  (min, avg, max) = (6126347.915, 6253421.705, 6303452.406), stdev = 40866.644
  CI (99.9%): [6226118.174, 6280725.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_removeIndex  thrpt   30  6253421.705 ± 27303.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1401953.262 ops/s
# Warmup Iteration   2: 3113003.381 ops/s
# Warmup Iteration   3: 3116235.028 ops/s
# Warmup Iteration   4: 2596694.405 ops/s
# Warmup Iteration   5: 3121315.008 ops/s
# Warmup Iteration   6: 3107768.621 ops/s
# Warmup Iteration   7: 3113887.272 ops/s
# Warmup Iteration   8: 3122656.301 ops/s
# Warmup Iteration   9: 3091555.181 ops/s
# Warmup Iteration  10: 3116009.599 ops/s
# Warmup Iteration  11: 3093466.856 ops/s
# Warmup Iteration  12: 3114527.364 ops/s
# Warmup Iteration  13: 3118361.411 ops/s
# Warmup Iteration  14: 3117263.311 ops/s
# Warmup Iteration  15: 3122270.721 ops/s
# Warmup Iteration  16: 3125643.938 ops/s
# Warmup Iteration  17: 3124680.428 ops/s
# Warmup Iteration  18: 3094028.253 ops/s
# Warmup Iteration  19: 3112639.939 ops/s
# Warmup Iteration  20: 3065365.401 ops/s
# Warmup Iteration  21: 3104720.245 ops/s
# Warmup Iteration  22: 3126066.089 ops/s
# Warmup Iteration  23: 3094173.855 ops/s
# Warmup Iteration  24: 3128329.636 ops/s
# Warmup Iteration  25: 3120853.380 ops/s
# Warmup Iteration  26: 3095991.277 ops/s
# Warmup Iteration  27: 3106312.709 ops/s
# Warmup Iteration  28: 3118193.008 ops/s
# Warmup Iteration  29: 3138976.664 ops/s
# Warmup Iteration  30: 3121630.685 ops/s
Iteration   1: 3116956.355 ops/s
Iteration   2: 3116728.659 ops/s
Iteration   3: 3130786.103 ops/s
Iteration   4: 3116563.949 ops/s
Iteration   5: 3132053.075 ops/s
Iteration   6: 3136907.818 ops/s
Iteration   7: 3120958.633 ops/s
Iteration   8: 3120032.402 ops/s
Iteration   9: 3138294.758 ops/s
Iteration  10: 3112906.352 ops/s
Iteration  11: 3121879.334 ops/s
Iteration  12: 3116148.250 ops/s
Iteration  13: 3115015.694 ops/s
Iteration  14: 3074979.469 ops/s
Iteration  15: 3109613.734 ops/s
Iteration  16: 3125888.291 ops/s
Iteration  17: 3123668.751 ops/s
Iteration  18: 3117611.457 ops/s
Iteration  19: 3123495.199 ops/s
Iteration  20: 3123322.334 ops/s
Iteration  21: 3121339.825 ops/s
Iteration  22: 3084392.227 ops/s
Iteration  23: 3121977.965 ops/s
Iteration  24: 3088126.737 ops/s
Iteration  25: 3125884.095 ops/s
Iteration  26: 3103941.829 ops/s
Iteration  27: 3133734.955 ops/s
Iteration  28: 3129388.216 ops/s
Iteration  29: 3130370.449 ops/s
Iteration  30: 3117443.059 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeObject":
  3118346.999 ±(99.9%) 9698.664 ops/s [Average]
  (min, avg, max) = (3074979.469, 3118346.999, 3138294.758), stdev = 14516.505
  CI (99.9%): [3108648.335, 3128045.663] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_removeObject  thrpt   30  3118346.999 ± 9698.664  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeUsingPredicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeUsingPredicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2153971.687 ops/s
# Warmup Iteration   2: 4756321.327 ops/s
# Warmup Iteration   3: 4773211.314 ops/s
# Warmup Iteration   4: 3955340.508 ops/s
# Warmup Iteration   5: 4784993.954 ops/s
# Warmup Iteration   6: 4759259.156 ops/s
# Warmup Iteration   7: 4739900.397 ops/s
# Warmup Iteration   8: 4794645.910 ops/s
# Warmup Iteration   9: 4748038.248 ops/s
# Warmup Iteration  10: 4769724.740 ops/s
# Warmup Iteration  11: 4782775.701 ops/s
# Warmup Iteration  12: 4792958.598 ops/s
# Warmup Iteration  13: 4773019.327 ops/s
# Warmup Iteration  14: 4744795.665 ops/s
# Warmup Iteration  15: 4781612.394 ops/s
# Warmup Iteration  16: 4790350.678 ops/s
# Warmup Iteration  17: 4773396.109 ops/s
# Warmup Iteration  18: 4790578.853 ops/s
# Warmup Iteration  19: 4752587.664 ops/s
# Warmup Iteration  20: 4763676.993 ops/s
# Warmup Iteration  21: 4727478.176 ops/s
# Warmup Iteration  22: 4753524.680 ops/s
# Warmup Iteration  23: 4768656.716 ops/s
# Warmup Iteration  24: 4783077.010 ops/s
# Warmup Iteration  25: 4778156.274 ops/s
# Warmup Iteration  26: 4787823.458 ops/s
# Warmup Iteration  27: 4774442.493 ops/s
# Warmup Iteration  28: 4777163.655 ops/s
# Warmup Iteration  29: 4799482.193 ops/s
# Warmup Iteration  30: 4769707.222 ops/s
Iteration   1: 4801795.290 ops/s
Iteration   2: 4797647.870 ops/s
Iteration   3: 4711181.057 ops/s
Iteration   4: 4705062.084 ops/s
Iteration   5: 4810674.630 ops/s
Iteration   6: 4774567.333 ops/s
Iteration   7: 4773975.651 ops/s
Iteration   8: 4796829.841 ops/s
Iteration   9: 4788133.650 ops/s
Iteration  10: 4802492.271 ops/s
Iteration  11: 4789623.783 ops/s
Iteration  12: 4768176.861 ops/s
Iteration  13: 4806657.550 ops/s
Iteration  14: 4755398.132 ops/s
Iteration  15: 4760144.639 ops/s
Iteration  16: 4695609.376 ops/s
Iteration  17: 4786297.358 ops/s
Iteration  18: 4794231.240 ops/s
Iteration  19: 4746266.005 ops/s
Iteration  20: 4698111.682 ops/s
Iteration  21: 4762912.199 ops/s
Iteration  22: 4788404.069 ops/s
Iteration  23: 4675825.695 ops/s
Iteration  24: 4798351.012 ops/s
Iteration  25: 4786095.236 ops/s
Iteration  26: 4786235.252 ops/s
Iteration  27: 4683234.078 ops/s
Iteration  28: 4782450.060 ops/s
Iteration  29: 4742695.554 ops/s
Iteration  30: 4750863.628 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_removeUsingPredicate":
  4763998.103 ±(99.9%) 26524.047 ops/s [Average]
  (min, avg, max) = (4675825.695, 4763998.103, 4810674.630), stdev = 39699.948
  CI (99.9%): [4737474.055, 4790522.150] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_removeUsingPredicate  thrpt   30  4763998.103 ± 26524.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1984229.355 ops/s
# Warmup Iteration   2: 3197694.332 ops/s
# Warmup Iteration   3: 3675825.408 ops/s
# Warmup Iteration   4: 3704650.954 ops/s
# Warmup Iteration   5: 3704010.413 ops/s
# Warmup Iteration   6: 3085583.567 ops/s
# Warmup Iteration   7: 3695178.515 ops/s
# Warmup Iteration   8: 3680727.340 ops/s
# Warmup Iteration   9: 3706709.507 ops/s
# Warmup Iteration  10: 3665827.240 ops/s
# Warmup Iteration  11: 3714666.013 ops/s
# Warmup Iteration  12: 3697723.153 ops/s
# Warmup Iteration  13: 3703037.324 ops/s
# Warmup Iteration  14: 3685422.088 ops/s
# Warmup Iteration  15: 3696817.967 ops/s
# Warmup Iteration  16: 3708763.083 ops/s
# Warmup Iteration  17: 3735030.328 ops/s
# Warmup Iteration  18: 3700857.243 ops/s
# Warmup Iteration  19: 3731396.212 ops/s
# Warmup Iteration  20: 3733777.996 ops/s
# Warmup Iteration  21: 3745567.872 ops/s
# Warmup Iteration  22: 3731124.605 ops/s
# Warmup Iteration  23: 3709544.136 ops/s
# Warmup Iteration  24: 3716120.608 ops/s
# Warmup Iteration  25: 3723250.589 ops/s
# Warmup Iteration  26: 3708441.292 ops/s
# Warmup Iteration  27: 3736988.123 ops/s
# Warmup Iteration  28: 3705051.130 ops/s
# Warmup Iteration  29: 3709672.100 ops/s
# Warmup Iteration  30: 3736284.727 ops/s
Iteration   1: 3729483.880 ops/s
Iteration   2: 3731518.885 ops/s
Iteration   3: 3742244.680 ops/s
Iteration   4: 3731019.960 ops/s
Iteration   5: 3742584.606 ops/s
Iteration   6: 3718224.964 ops/s
Iteration   7: 3671971.929 ops/s
Iteration   8: 3718575.378 ops/s
Iteration   9: 3748505.345 ops/s
Iteration  10: 3744887.365 ops/s
Iteration  11: 3737536.113 ops/s
Iteration  12: 3741850.074 ops/s
Iteration  13: 3687989.329 ops/s
Iteration  14: 3719513.463 ops/s
Iteration  15: 3760408.694 ops/s
Iteration  16: 3737155.359 ops/s
Iteration  17: 3728478.197 ops/s
Iteration  18: 3741505.993 ops/s
Iteration  19: 3710969.653 ops/s
Iteration  20: 3742636.525 ops/s
Iteration  21: 3751572.498 ops/s
Iteration  22: 3743923.690 ops/s
Iteration  23: 3747848.161 ops/s
Iteration  24: 3749810.813 ops/s
Iteration  25: 3732829.484 ops/s
Iteration  26: 3736247.015 ops/s
Iteration  27: 3746487.213 ops/s
Iteration  28: 3736159.162 ops/s
Iteration  29: 3671628.332 ops/s
Iteration  30: 3753896.968 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_replaceAll":
  3731915.458 ±(99.9%) 14580.856 ops/s [Average]
  (min, avg, max) = (3671628.332, 3731915.458, 3760408.694), stdev = 21823.941
  CI (99.9%): [3717334.601, 3746496.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_replaceAll  thrpt   30  3731915.458 ± 14580.856  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 122461.518 ops/s
# Warmup Iteration   2: 196281.773 ops/s
# Warmup Iteration   3: 240738.462 ops/s
# Warmup Iteration   4: 240746.589 ops/s
# Warmup Iteration   5: 241720.723 ops/s
# Warmup Iteration   6: 242263.230 ops/s
# Warmup Iteration   7: 207537.381 ops/s
# Warmup Iteration   8: 230260.272 ops/s
# Warmup Iteration   9: 239323.655 ops/s
# Warmup Iteration  10: 239068.258 ops/s
# Warmup Iteration  11: 237474.033 ops/s
# Warmup Iteration  12: 242217.389 ops/s
# Warmup Iteration  13: 240385.483 ops/s
# Warmup Iteration  14: 240468.963 ops/s
# Warmup Iteration  15: 241284.602 ops/s
# Warmup Iteration  16: 240126.475 ops/s
# Warmup Iteration  17: 239955.877 ops/s
# Warmup Iteration  18: 242376.373 ops/s
# Warmup Iteration  19: 242370.202 ops/s
# Warmup Iteration  20: 242057.641 ops/s
# Warmup Iteration  21: 238956.806 ops/s
# Warmup Iteration  22: 239403.417 ops/s
# Warmup Iteration  23: 240808.684 ops/s
# Warmup Iteration  24: 240031.724 ops/s
# Warmup Iteration  25: 241354.396 ops/s
# Warmup Iteration  26: 240134.274 ops/s
# Warmup Iteration  27: 240755.117 ops/s
# Warmup Iteration  28: 242053.242 ops/s
# Warmup Iteration  29: 240785.810 ops/s
# Warmup Iteration  30: 240321.487 ops/s
Iteration   1: 240107.881 ops/s
Iteration   2: 240391.228 ops/s
Iteration   3: 234951.524 ops/s
Iteration   4: 238581.686 ops/s
Iteration   5: 234404.838 ops/s
Iteration   6: 236932.700 ops/s
Iteration   7: 242774.668 ops/s
Iteration   8: 237757.822 ops/s
Iteration   9: 239088.328 ops/s
Iteration  10: 241198.108 ops/s
Iteration  11: 243860.410 ops/s
Iteration  12: 235097.071 ops/s
Iteration  13: 242496.980 ops/s
Iteration  14: 242970.700 ops/s
Iteration  15: 241868.341 ops/s
Iteration  16: 239279.824 ops/s
Iteration  17: 240501.316 ops/s
Iteration  18: 243519.760 ops/s
Iteration  19: 241296.065 ops/s
Iteration  20: 240092.415 ops/s
Iteration  21: 241739.749 ops/s
Iteration  22: 237803.540 ops/s
Iteration  23: 241357.835 ops/s
Iteration  24: 241937.115 ops/s
Iteration  25: 240796.968 ops/s
Iteration  26: 237998.298 ops/s
Iteration  27: 242117.920 ops/s
Iteration  28: 240664.230 ops/s
Iteration  29: 233737.532 ops/s
Iteration  30: 240938.251 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_retainAll":
  239875.437 ±(99.9%) 1833.312 ops/s [Average]
  (min, avg, max) = (233737.532, 239875.437, 243860.410), stdev = 2744.015
  CI (99.9%): [238042.125, 241708.748] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_retainAll  thrpt   30  239875.437 ± 1833.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 123313.485 ops/s
# Warmup Iteration   2: 204813.878 ops/s
# Warmup Iteration   3: 252575.538 ops/s
# Warmup Iteration   4: 248741.982 ops/s
# Warmup Iteration   5: 252348.680 ops/s
# Warmup Iteration   6: 249588.564 ops/s
# Warmup Iteration   7: 211378.600 ops/s
# Warmup Iteration   8: 252550.590 ops/s
# Warmup Iteration   9: 252138.041 ops/s
# Warmup Iteration  10: 251884.888 ops/s
# Warmup Iteration  11: 253197.819 ops/s
# Warmup Iteration  12: 252773.450 ops/s
# Warmup Iteration  13: 252753.470 ops/s
# Warmup Iteration  14: 252461.698 ops/s
# Warmup Iteration  15: 253352.508 ops/s
# Warmup Iteration  16: 252439.855 ops/s
# Warmup Iteration  17: 252744.079 ops/s
# Warmup Iteration  18: 246411.216 ops/s
# Warmup Iteration  19: 252481.798 ops/s
# Warmup Iteration  20: 249439.367 ops/s
# Warmup Iteration  21: 251755.823 ops/s
# Warmup Iteration  22: 252420.831 ops/s
# Warmup Iteration  23: 250454.278 ops/s
# Warmup Iteration  24: 252781.828 ops/s
# Warmup Iteration  25: 251724.569 ops/s
# Warmup Iteration  26: 251975.003 ops/s
# Warmup Iteration  27: 251633.085 ops/s
# Warmup Iteration  28: 252185.351 ops/s
# Warmup Iteration  29: 248302.139 ops/s
# Warmup Iteration  30: 253225.128 ops/s
Iteration   1: 252991.462 ops/s
Iteration   2: 252497.403 ops/s
Iteration   3: 248535.839 ops/s
Iteration   4: 249894.732 ops/s
Iteration   5: 252466.275 ops/s
Iteration   6: 252714.229 ops/s
Iteration   7: 246720.238 ops/s
Iteration   8: 252071.051 ops/s
Iteration   9: 251829.804 ops/s
Iteration  10: 252948.641 ops/s
Iteration  11: 253074.996 ops/s
Iteration  12: 253216.039 ops/s
Iteration  13: 253100.979 ops/s
Iteration  14: 252801.774 ops/s
Iteration  15: 253034.356 ops/s
Iteration  16: 252967.995 ops/s
Iteration  17: 253282.332 ops/s
Iteration  18: 252903.801 ops/s
Iteration  19: 252991.461 ops/s
Iteration  20: 253092.553 ops/s
Iteration  21: 252238.833 ops/s
Iteration  22: 247879.444 ops/s
Iteration  23: 251844.508 ops/s
Iteration  24: 247171.546 ops/s
Iteration  25: 251750.248 ops/s
Iteration  26: 253299.858 ops/s
Iteration  27: 251831.303 ops/s
Iteration  28: 252385.047 ops/s
Iteration  29: 251620.940 ops/s
Iteration  30: 251763.554 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_retainAllIterable":
  251830.708 ±(99.9%) 1240.513 ops/s [Average]
  (min, avg, max) = (246720.238, 251830.708, 253299.858), stdev = 1856.742
  CI (99.9%): [250590.195, 253071.221] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_retainAllIterable  thrpt   30  251830.708 ± 1240.513  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4826687.394 ops/s
# Warmup Iteration   2: 9872812.065 ops/s
# Warmup Iteration   3: 8470314.349 ops/s
# Warmup Iteration   4: 9914255.383 ops/s
# Warmup Iteration   5: 9946291.085 ops/s
# Warmup Iteration   6: 9891564.828 ops/s
# Warmup Iteration   7: 10019610.124 ops/s
# Warmup Iteration   8: 9997335.531 ops/s
# Warmup Iteration   9: 9989851.914 ops/s
# Warmup Iteration  10: 9951911.464 ops/s
# Warmup Iteration  11: 9923816.982 ops/s
# Warmup Iteration  12: 10014080.929 ops/s
# Warmup Iteration  13: 10034710.194 ops/s
# Warmup Iteration  14: 10001430.658 ops/s
# Warmup Iteration  15: 10019287.448 ops/s
# Warmup Iteration  16: 9996092.322 ops/s
# Warmup Iteration  17: 10009526.725 ops/s
# Warmup Iteration  18: 10071311.749 ops/s
# Warmup Iteration  19: 9946870.399 ops/s
# Warmup Iteration  20: 10033860.869 ops/s
# Warmup Iteration  21: 10082534.176 ops/s
# Warmup Iteration  22: 9996516.553 ops/s
# Warmup Iteration  23: 10008967.579 ops/s
# Warmup Iteration  24: 9977890.323 ops/s
# Warmup Iteration  25: 10049377.776 ops/s
# Warmup Iteration  26: 10042875.932 ops/s
# Warmup Iteration  27: 10053774.303 ops/s
# Warmup Iteration  28: 10026767.331 ops/s
# Warmup Iteration  29: 10057121.195 ops/s
# Warmup Iteration  30: 9935564.497 ops/s
Iteration   1: 9930085.881 ops/s
Iteration   2: 10087552.569 ops/s
Iteration   3: 10073530.922 ops/s
Iteration   4: 10088019.852 ops/s
Iteration   5: 10050187.005 ops/s
Iteration   6: 9909222.110 ops/s
Iteration   7: 10090786.572 ops/s
Iteration   8: 9730695.845 ops/s
Iteration   9: 10083552.180 ops/s
Iteration  10: 10033533.422 ops/s
Iteration  11: 10023563.737 ops/s
Iteration  12: 9997983.024 ops/s
Iteration  13: 10025776.212 ops/s
Iteration  14: 9883252.583 ops/s
Iteration  15: 10045409.296 ops/s
Iteration  16: 10065249.214 ops/s
Iteration  17: 9983945.448 ops/s
Iteration  18: 10082528.845 ops/s
Iteration  19: 9892227.285 ops/s
Iteration  20: 9993260.427 ops/s
Iteration  21: 10076239.369 ops/s
Iteration  22: 10089094.257 ops/s
Iteration  23: 10046434.711 ops/s
Iteration  24: 10038064.457 ops/s
Iteration  25: 9917477.075 ops/s
Iteration  26: 10101536.485 ops/s
Iteration  27: 9887889.125 ops/s
Iteration  28: 10102655.783 ops/s
Iteration  29: 10002489.389 ops/s
Iteration  30: 9964449.494 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseForEach":
  10009889.753 ±(99.9%) 58345.021 ops/s [Average]
  (min, avg, max) = (9730695.845, 10009889.753, 10102655.783), stdev = 87328.087
  CI (99.9%): [9951544.732, 10068234.773] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_reverseForEach  thrpt   30  10009889.753 ± 58345.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4728047.595 ops/s
# Warmup Iteration   2: 9655685.422 ops/s
# Warmup Iteration   3: 8289453.707 ops/s
# Warmup Iteration   4: 9823980.339 ops/s
# Warmup Iteration   5: 9912602.221 ops/s
# Warmup Iteration   6: 9823324.836 ops/s
# Warmup Iteration   7: 9899114.034 ops/s
# Warmup Iteration   8: 9678738.767 ops/s
# Warmup Iteration   9: 9899209.554 ops/s
# Warmup Iteration  10: 9893629.824 ops/s
# Warmup Iteration  11: 9882831.672 ops/s
# Warmup Iteration  12: 9893345.946 ops/s
# Warmup Iteration  13: 9874174.034 ops/s
# Warmup Iteration  14: 9879188.381 ops/s
# Warmup Iteration  15: 9881967.895 ops/s
# Warmup Iteration  16: 9891511.300 ops/s
# Warmup Iteration  17: 9801062.541 ops/s
# Warmup Iteration  18: 9767425.059 ops/s
# Warmup Iteration  19: 9772623.968 ops/s
# Warmup Iteration  20: 9666040.240 ops/s
# Warmup Iteration  21: 9764242.220 ops/s
# Warmup Iteration  22: 9672113.740 ops/s
# Warmup Iteration  23: 9741902.166 ops/s
# Warmup Iteration  24: 9772638.873 ops/s
# Warmup Iteration  25: 9762446.150 ops/s
# Warmup Iteration  26: 9766335.627 ops/s
# Warmup Iteration  27: 9750170.962 ops/s
# Warmup Iteration  28: 9749443.389 ops/s
# Warmup Iteration  29: 9696066.821 ops/s
# Warmup Iteration  30: 9632904.769 ops/s
Iteration   1: 9797723.073 ops/s
Iteration   2: 9751298.278 ops/s
Iteration   3: 9623270.014 ops/s
Iteration   4: 9785402.441 ops/s
Iteration   5: 9536261.284 ops/s
Iteration   6: 9736922.852 ops/s
Iteration   7: 9752213.641 ops/s
Iteration   8: 9733248.430 ops/s
Iteration   9: 9803723.350 ops/s
Iteration  10: 9647998.173 ops/s
Iteration  11: 9749286.809 ops/s
Iteration  12: 9748890.614 ops/s
Iteration  13: 9773848.856 ops/s
Iteration  14: 9543469.643 ops/s
Iteration  15: 9786175.045 ops/s
Iteration  16: 9729804.383 ops/s
Iteration  17: 9740016.669 ops/s
Iteration  18: 9755796.969 ops/s
Iteration  19: 9762095.919 ops/s
Iteration  20: 9607801.162 ops/s
Iteration  21: 9787637.902 ops/s
Iteration  22: 9616032.120 ops/s
Iteration  23: 9777316.233 ops/s
Iteration  24: 9780980.513 ops/s
Iteration  25: 9731010.491 ops/s
Iteration  26: 9731542.166 ops/s
Iteration  27: 9783452.786 ops/s
Iteration  28: 9721546.381 ops/s
Iteration  29: 9761845.237 ops/s
Iteration  30: 9649295.701 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseForEachWithIndex":
  9723530.238 ±(99.9%) 49225.756 ops/s [Average]
  (min, avg, max) = (9536261.284, 9723530.238, 9803723.350), stdev = 73678.800
  CI (99.9%): [9674304.482, 9772755.994] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  9723530.238 ± 49225.756  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56476307.028 ops/s
# Warmup Iteration   2: 108116632.434 ops/s
# Warmup Iteration   3: 93937241.214 ops/s
# Warmup Iteration   4: 112385402.521 ops/s
# Warmup Iteration   5: 109498012.021 ops/s
# Warmup Iteration   6: 112245387.826 ops/s
# Warmup Iteration   7: 112631195.084 ops/s
# Warmup Iteration   8: 112127796.819 ops/s
# Warmup Iteration   9: 110507846.070 ops/s
# Warmup Iteration  10: 111815074.183 ops/s
# Warmup Iteration  11: 110796378.366 ops/s
# Warmup Iteration  12: 110746127.534 ops/s
# Warmup Iteration  13: 112517647.784 ops/s
# Warmup Iteration  14: 112563396.984 ops/s
# Warmup Iteration  15: 112366383.323 ops/s
# Warmup Iteration  16: 111997695.756 ops/s
# Warmup Iteration  17: 113104370.898 ops/s
# Warmup Iteration  18: 113329094.514 ops/s
# Warmup Iteration  19: 113359755.170 ops/s
# Warmup Iteration  20: 113065693.074 ops/s
# Warmup Iteration  21: 112253441.023 ops/s
# Warmup Iteration  22: 112052523.237 ops/s
# Warmup Iteration  23: 112587012.162 ops/s
# Warmup Iteration  24: 113529017.568 ops/s
# Warmup Iteration  25: 113356652.696 ops/s
# Warmup Iteration  26: 112881161.958 ops/s
# Warmup Iteration  27: 111671693.130 ops/s
# Warmup Iteration  28: 112563319.159 ops/s
# Warmup Iteration  29: 112418539.931 ops/s
# Warmup Iteration  30: 111704283.145 ops/s
Iteration   1: 112761388.639 ops/s
Iteration   2: 111445769.618 ops/s
Iteration   3: 113401096.744 ops/s
Iteration   4: 112990198.101 ops/s
Iteration   5: 112866410.544 ops/s
Iteration   6: 112886472.829 ops/s
Iteration   7: 111525143.472 ops/s
Iteration   8: 113401149.214 ops/s
Iteration   9: 113158811.467 ops/s
Iteration  10: 112902116.708 ops/s
Iteration  11: 112715995.780 ops/s
Iteration  12: 112535717.521 ops/s
Iteration  13: 112730733.275 ops/s
Iteration  14: 112900610.745 ops/s
Iteration  15: 113605574.613 ops/s
Iteration  16: 113502441.744 ops/s
Iteration  17: 112450865.738 ops/s
Iteration  18: 113553185.135 ops/s
Iteration  19: 112341578.375 ops/s
Iteration  20: 112763095.632 ops/s
Iteration  21: 113378582.044 ops/s
Iteration  22: 112510649.564 ops/s
Iteration  23: 113543364.730 ops/s
Iteration  24: 113850897.001 ops/s
Iteration  25: 112976319.141 ops/s
Iteration  26: 113355956.560 ops/s
Iteration  27: 113493340.959 ops/s
Iteration  28: 113631923.438 ops/s
Iteration  29: 112762370.219 ops/s
Iteration  30: 113459821.661 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList":
  112980052.707 ±(99.9%) 383564.517 ops/s [Average]
  (min, avg, max) = (111445769.618, 112980052.707, 113850897.001), stdev = 574101.356
  CI (99.9%): [112596488.190, 113363617.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt          Score        Error  Units
MultiReaderFastListTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList  thrpt   30  112980052.707 ± 383564.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseForEach_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseForEach_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35168653.678 ops/s
# Warmup Iteration   2: 66625603.988 ops/s
# Warmup Iteration   3: 61042153.466 ops/s
# Warmup Iteration   4: 70627288.547 ops/s
# Warmup Iteration   5: 71922892.064 ops/s
# Warmup Iteration   6: 70976517.734 ops/s
# Warmup Iteration   7: 72207519.029 ops/s
# Warmup Iteration   8: 71248266.733 ops/s
# Warmup Iteration   9: 72236594.813 ops/s
# Warmup Iteration  10: 72672714.585 ops/s
# Warmup Iteration  11: 72383566.598 ops/s
# Warmup Iteration  12: 71934151.426 ops/s
# Warmup Iteration  13: 71288066.857 ops/s
# Warmup Iteration  14: 70860436.715 ops/s
# Warmup Iteration  15: 72401699.805 ops/s
# Warmup Iteration  16: 71724644.208 ops/s
# Warmup Iteration  17: 71010364.333 ops/s
# Warmup Iteration  18: 70480706.629 ops/s
# Warmup Iteration  19: 71096130.944 ops/s
# Warmup Iteration  20: 71143038.598 ops/s
# Warmup Iteration  21: 70469664.319 ops/s
# Warmup Iteration  22: 70680986.882 ops/s
# Warmup Iteration  23: 70518469.931 ops/s
# Warmup Iteration  24: 70986216.556 ops/s
# Warmup Iteration  25: 71077281.705 ops/s
# Warmup Iteration  26: 70540022.173 ops/s
# Warmup Iteration  27: 70393327.810 ops/s
# Warmup Iteration  28: 71389388.201 ops/s
# Warmup Iteration  29: 69858179.859 ops/s
# Warmup Iteration  30: 71179393.654 ops/s
Iteration   1: 71329147.651 ops/s
Iteration   2: 70757835.663 ops/s
Iteration   3: 70357582.706 ops/s
Iteration   4: 71141477.037 ops/s
Iteration   5: 70303087.485 ops/s
Iteration   6: 68744882.740 ops/s
Iteration   7: 70140799.357 ops/s
Iteration   8: 68885034.723 ops/s
Iteration   9: 69860261.320 ops/s
Iteration  10: 71035787.473 ops/s
Iteration  11: 70178192.302 ops/s
Iteration  12: 70752819.965 ops/s
Iteration  13: 71098864.933 ops/s
Iteration  14: 71021618.045 ops/s
Iteration  15: 70914743.516 ops/s
Iteration  16: 70739005.006 ops/s
Iteration  17: 71127365.829 ops/s
Iteration  18: 70265476.905 ops/s
Iteration  19: 71172941.430 ops/s
Iteration  20: 70920863.203 ops/s
Iteration  21: 70500762.346 ops/s
Iteration  22: 71057087.272 ops/s
Iteration  23: 71076822.887 ops/s
Iteration  24: 71212777.783 ops/s
Iteration  25: 70578233.537 ops/s
Iteration  26: 71401009.495 ops/s
Iteration  27: 71125638.476 ops/s
Iteration  28: 71181502.081 ops/s
Iteration  29: 70934635.812 ops/s
Iteration  30: 71363806.388 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseForEach_emptyList":
  70706002.112 ±(99.9%) 435666.229 ops/s [Average]
  (min, avg, max) = (68744882.740, 70706002.112, 71401009.495), stdev = 652084.751
  CI (99.9%): [70270335.884, 71141668.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score        Error  Units
MultiReaderFastListTest._Benchmark.benchmark_reverseForEach_emptyList  thrpt   30  70706002.112 ± 435666.229  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2574729.679 ops/s
# Warmup Iteration   2: 3976283.668 ops/s
# Warmup Iteration   3: 4533432.720 ops/s
# Warmup Iteration   4: 4521617.429 ops/s
# Warmup Iteration   5: 4462329.396 ops/s
# Warmup Iteration   6: 4451765.171 ops/s
# Warmup Iteration   7: 3914439.223 ops/s
# Warmup Iteration   8: 4546068.494 ops/s
# Warmup Iteration   9: 4559380.215 ops/s
# Warmup Iteration  10: 4553747.369 ops/s
# Warmup Iteration  11: 4568841.911 ops/s
# Warmup Iteration  12: 4546386.168 ops/s
# Warmup Iteration  13: 4522012.541 ops/s
# Warmup Iteration  14: 4571847.599 ops/s
# Warmup Iteration  15: 4485725.890 ops/s
# Warmup Iteration  16: 4563590.426 ops/s
# Warmup Iteration  17: 4529371.387 ops/s
# Warmup Iteration  18: 4536573.842 ops/s
# Warmup Iteration  19: 4543526.422 ops/s
# Warmup Iteration  20: 4541913.720 ops/s
# Warmup Iteration  21: 4533466.208 ops/s
# Warmup Iteration  22: 4540727.121 ops/s
# Warmup Iteration  23: 4498808.141 ops/s
# Warmup Iteration  24: 4496275.804 ops/s
# Warmup Iteration  25: 4479210.314 ops/s
# Warmup Iteration  26: 4547584.649 ops/s
# Warmup Iteration  27: 4509057.131 ops/s
# Warmup Iteration  28: 4552688.812 ops/s
# Warmup Iteration  29: 4543516.409 ops/s
# Warmup Iteration  30: 4549111.884 ops/s
Iteration   1: 4524901.842 ops/s
Iteration   2: 4528313.505 ops/s
Iteration   3: 4559305.678 ops/s
Iteration   4: 4556646.494 ops/s
Iteration   5: 4526792.980 ops/s
Iteration   6: 4491210.713 ops/s
Iteration   7: 4470944.288 ops/s
Iteration   8: 4553586.887 ops/s
Iteration   9: 4534956.985 ops/s
Iteration  10: 4559224.311 ops/s
Iteration  11: 4532068.712 ops/s
Iteration  12: 4551976.603 ops/s
Iteration  13: 4538675.248 ops/s
Iteration  14: 4544259.459 ops/s
Iteration  15: 4528444.012 ops/s
Iteration  16: 4548060.612 ops/s
Iteration  17: 4529259.103 ops/s
Iteration  18: 4540704.656 ops/s
Iteration  19: 4554126.906 ops/s
Iteration  20: 4478074.310 ops/s
Iteration  21: 4533319.418 ops/s
Iteration  22: 4548659.650 ops/s
Iteration  23: 4415684.514 ops/s
Iteration  24: 4552234.122 ops/s
Iteration  25: 4558771.730 ops/s
Iteration  26: 4562274.717 ops/s
Iteration  27: 4548018.779 ops/s
Iteration  28: 4532433.380 ops/s
Iteration  29: 4559273.317 ops/s
Iteration  30: 4525217.573 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_reverseThis":
  4532914.017 ±(99.9%) 21225.644 ops/s [Average]
  (min, avg, max) = (4415684.514, 4532914.017, 4562274.717), stdev = 31769.547
  CI (99.9%): [4511688.373, 4554139.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_reverseThis  thrpt   30  4532914.017 ± 21225.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3508325.453 ops/s
# Warmup Iteration   2: 8170791.816 ops/s
# Warmup Iteration   3: 6793429.161 ops/s
# Warmup Iteration   4: 8150914.456 ops/s
# Warmup Iteration   5: 7952340.214 ops/s
# Warmup Iteration   6: 8158010.249 ops/s
# Warmup Iteration   7: 8117118.726 ops/s
# Warmup Iteration   8: 8128936.988 ops/s
# Warmup Iteration   9: 8101986.580 ops/s
# Warmup Iteration  10: 8086672.179 ops/s
# Warmup Iteration  11: 8092167.784 ops/s
# Warmup Iteration  12: 8111678.025 ops/s
# Warmup Iteration  13: 8080217.352 ops/s
# Warmup Iteration  14: 8093575.216 ops/s
# Warmup Iteration  15: 8133285.078 ops/s
# Warmup Iteration  16: 8183448.536 ops/s
# Warmup Iteration  17: 8143771.714 ops/s
# Warmup Iteration  18: 8110097.719 ops/s
# Warmup Iteration  19: 8175549.850 ops/s
# Warmup Iteration  20: 8127311.750 ops/s
# Warmup Iteration  21: 8154547.540 ops/s
# Warmup Iteration  22: 8195869.583 ops/s
# Warmup Iteration  23: 8150974.339 ops/s
# Warmup Iteration  24: 8125975.750 ops/s
# Warmup Iteration  25: 8025466.582 ops/s
# Warmup Iteration  26: 8118369.012 ops/s
# Warmup Iteration  27: 8184068.900 ops/s
# Warmup Iteration  28: 8195160.601 ops/s
# Warmup Iteration  29: 8171686.556 ops/s
# Warmup Iteration  30: 8034910.580 ops/s
Iteration   1: 8154114.730 ops/s
Iteration   2: 8133019.424 ops/s
Iteration   3: 8197811.112 ops/s
Iteration   4: 8037870.580 ops/s
Iteration   5: 8056087.187 ops/s
Iteration   6: 8138256.171 ops/s
Iteration   7: 8136808.409 ops/s
Iteration   8: 8203448.528 ops/s
Iteration   9: 8189690.094 ops/s
Iteration  10: 8196707.748 ops/s
Iteration  11: 8082695.184 ops/s
Iteration  12: 8191987.325 ops/s
Iteration  13: 8199352.429 ops/s
Iteration  14: 8181636.499 ops/s
Iteration  15: 8187993.411 ops/s
Iteration  16: 8101839.354 ops/s
Iteration  17: 8216845.584 ops/s
Iteration  18: 8167988.754 ops/s
Iteration  19: 8009170.921 ops/s
Iteration  20: 8197824.895 ops/s
Iteration  21: 8175428.110 ops/s
Iteration  22: 8150378.526 ops/s
Iteration  23: 8206178.288 ops/s
Iteration  24: 8127309.804 ops/s
Iteration  25: 8204654.999 ops/s
Iteration  26: 8160945.665 ops/s
Iteration  27: 8120563.234 ops/s
Iteration  28: 8109689.371 ops/s
Iteration  29: 8205593.098 ops/s
Iteration  30: 8173515.345 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_select":
  8153846.826 ±(99.9%) 36049.365 ops/s [Average]
  (min, avg, max) = (8009170.921, 8153846.826, 8216845.584), stdev = 53956.997
  CI (99.9%): [8117797.460, 8189896.191] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_select  thrpt   30  8153846.826 ± 36049.365  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2509900.897 ops/s
# Warmup Iteration   2: 5970845.094 ops/s
# Warmup Iteration   3: 5105982.255 ops/s
# Warmup Iteration   4: 6089654.987 ops/s
# Warmup Iteration   5: 6075070.169 ops/s
# Warmup Iteration   6: 6039165.423 ops/s
# Warmup Iteration   7: 6031737.741 ops/s
# Warmup Iteration   8: 5996755.179 ops/s
# Warmup Iteration   9: 6084975.319 ops/s
# Warmup Iteration  10: 6100758.377 ops/s
# Warmup Iteration  11: 6110454.911 ops/s
# Warmup Iteration  12: 6087338.420 ops/s
# Warmup Iteration  13: 6092410.558 ops/s
# Warmup Iteration  14: 6079538.829 ops/s
# Warmup Iteration  15: 6113546.215 ops/s
# Warmup Iteration  16: 6104642.758 ops/s
# Warmup Iteration  17: 6105771.196 ops/s
# Warmup Iteration  18: 6137523.491 ops/s
# Warmup Iteration  19: 6122561.971 ops/s
# Warmup Iteration  20: 6105463.047 ops/s
# Warmup Iteration  21: 6118598.408 ops/s
# Warmup Iteration  22: 6087823.481 ops/s
# Warmup Iteration  23: 6064243.621 ops/s
# Warmup Iteration  24: 6039670.305 ops/s
# Warmup Iteration  25: 6108087.878 ops/s
# Warmup Iteration  26: 6090511.342 ops/s
# Warmup Iteration  27: 6127237.476 ops/s
# Warmup Iteration  28: 6127078.981 ops/s
# Warmup Iteration  29: 6115802.868 ops/s
# Warmup Iteration  30: 6076638.095 ops/s
Iteration   1: 6121105.279 ops/s
Iteration   2: 6140756.333 ops/s
Iteration   3: 6138195.434 ops/s
Iteration   4: 6142025.164 ops/s
Iteration   5: 6066038.829 ops/s
Iteration   6: 6149919.202 ops/s
Iteration   7: 6124199.872 ops/s
Iteration   8: 6121448.944 ops/s
Iteration   9: 6105727.586 ops/s
Iteration  10: 6121684.937 ops/s
Iteration  11: 6119299.633 ops/s
Iteration  12: 6123504.917 ops/s
Iteration  13: 6120755.880 ops/s
Iteration  14: 6129858.018 ops/s
Iteration  15: 6148348.522 ops/s
Iteration  16: 6118811.526 ops/s
Iteration  17: 6153087.175 ops/s
Iteration  18: 6006618.854 ops/s
Iteration  19: 6075878.765 ops/s
Iteration  20: 6121785.188 ops/s
Iteration  21: 6069792.214 ops/s
Iteration  22: 6062442.722 ops/s
Iteration  23: 6084637.437 ops/s
Iteration  24: 6124865.291 ops/s
Iteration  25: 6134899.643 ops/s
Iteration  26: 6035615.518 ops/s
Iteration  27: 6082568.192 ops/s
Iteration  28: 6095834.920 ops/s
Iteration  29: 6038401.506 ops/s
Iteration  30: 6000720.320 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectAndRejectWith":
  6102627.594 ±(99.9%) 27842.837 ops/s [Average]
  (min, avg, max) = (6000720.320, 6102627.594, 6153087.175), stdev = 41673.851
  CI (99.9%): [6074784.757, 6130470.431] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  6102627.594 ± 27842.837  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 380794.448 ops/s
# Warmup Iteration   2: 712885.373 ops/s
# Warmup Iteration   3: 780363.088 ops/s
# Warmup Iteration   4: 794494.431 ops/s
# Warmup Iteration   5: 711187.845 ops/s
# Warmup Iteration   6: 734394.538 ops/s
# Warmup Iteration   7: 780177.746 ops/s
# Warmup Iteration   8: 787870.140 ops/s
# Warmup Iteration   9: 794948.581 ops/s
# Warmup Iteration  10: 794328.732 ops/s
# Warmup Iteration  11: 790562.012 ops/s
# Warmup Iteration  12: 790462.192 ops/s
# Warmup Iteration  13: 791413.802 ops/s
# Warmup Iteration  14: 786456.168 ops/s
# Warmup Iteration  15: 794895.644 ops/s
# Warmup Iteration  16: 794889.787 ops/s
# Warmup Iteration  17: 794467.374 ops/s
# Warmup Iteration  18: 788666.640 ops/s
# Warmup Iteration  19: 780629.720 ops/s
# Warmup Iteration  20: 797367.223 ops/s
# Warmup Iteration  21: 791827.506 ops/s
# Warmup Iteration  22: 793348.064 ops/s
# Warmup Iteration  23: 786875.001 ops/s
# Warmup Iteration  24: 794454.786 ops/s
# Warmup Iteration  25: 794838.381 ops/s
# Warmup Iteration  26: 795725.045 ops/s
# Warmup Iteration  27: 795242.581 ops/s
# Warmup Iteration  28: 788635.845 ops/s
# Warmup Iteration  29: 793669.463 ops/s
# Warmup Iteration  30: 787047.372 ops/s
Iteration   1: 787916.271 ops/s
Iteration   2: 793129.958 ops/s
Iteration   3: 793706.387 ops/s
Iteration   4: 790722.060 ops/s
Iteration   5: 790755.739 ops/s
Iteration   6: 795935.615 ops/s
Iteration   7: 795529.357 ops/s
Iteration   8: 795998.625 ops/s
Iteration   9: 799337.818 ops/s
Iteration  10: 792431.204 ops/s
Iteration  11: 780516.876 ops/s
Iteration  12: 787553.634 ops/s
Iteration  13: 790990.920 ops/s
Iteration  14: 795358.565 ops/s
Iteration  15: 794005.197 ops/s
Iteration  16: 793046.540 ops/s
Iteration  17: 795934.496 ops/s
Iteration  18: 796353.901 ops/s
Iteration  19: 794295.907 ops/s
Iteration  20: 795398.756 ops/s
Iteration  21: 792688.932 ops/s
Iteration  22: 788093.726 ops/s
Iteration  23: 792026.853 ops/s
Iteration  24: 783065.818 ops/s
Iteration  25: 793512.573 ops/s
Iteration  26: 789545.302 ops/s
Iteration  27: 794839.103 ops/s
Iteration  28: 787528.920 ops/s
Iteration  29: 792581.941 ops/s
Iteration  30: 793857.179 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectInstancesOf":
  792221.939 ±(99.9%) 2708.338 ops/s [Average]
  (min, avg, max) = (780516.876, 792221.939, 799337.818), stdev = 4053.713
  CI (99.9%): [789513.601, 794930.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  792221.939 ± 2708.338  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3349656.131 ops/s
# Warmup Iteration   2: 7711014.325 ops/s
# Warmup Iteration   3: 6636515.258 ops/s
# Warmup Iteration   4: 7935059.109 ops/s
# Warmup Iteration   5: 7945983.060 ops/s
# Warmup Iteration   6: 7928005.802 ops/s
# Warmup Iteration   7: 7858177.182 ops/s
# Warmup Iteration   8: 7927952.885 ops/s
# Warmup Iteration   9: 7911969.223 ops/s
# Warmup Iteration  10: 7954580.939 ops/s
# Warmup Iteration  11: 7882394.410 ops/s
# Warmup Iteration  12: 7934092.451 ops/s
# Warmup Iteration  13: 7900707.692 ops/s
# Warmup Iteration  14: 7921891.912 ops/s
# Warmup Iteration  15: 7894661.313 ops/s
# Warmup Iteration  16: 7946564.216 ops/s
# Warmup Iteration  17: 7885886.687 ops/s
# Warmup Iteration  18: 7909740.428 ops/s
# Warmup Iteration  19: 7841713.811 ops/s
# Warmup Iteration  20: 7978744.196 ops/s
# Warmup Iteration  21: 7965380.860 ops/s
# Warmup Iteration  22: 7906438.214 ops/s
# Warmup Iteration  23: 7904105.897 ops/s
# Warmup Iteration  24: 7936953.838 ops/s
# Warmup Iteration  25: 7923799.178 ops/s
# Warmup Iteration  26: 7861204.700 ops/s
# Warmup Iteration  27: 7937430.873 ops/s
# Warmup Iteration  28: 7925971.893 ops/s
# Warmup Iteration  29: 7917225.004 ops/s
# Warmup Iteration  30: 7936487.617 ops/s
Iteration   1: 7944447.631 ops/s
Iteration   2: 7871337.447 ops/s
Iteration   3: 7833319.861 ops/s
Iteration   4: 7943740.407 ops/s
Iteration   5: 7829315.968 ops/s
Iteration   6: 7883721.497 ops/s
Iteration   7: 7921837.766 ops/s
Iteration   8: 7927870.719 ops/s
Iteration   9: 7922342.891 ops/s
Iteration  10: 7933422.639 ops/s
Iteration  11: 7953244.974 ops/s
Iteration  12: 7969798.242 ops/s
Iteration  13: 7928142.750 ops/s
Iteration  14: 7928629.881 ops/s
Iteration  15: 7918255.926 ops/s
Iteration  16: 7923120.574 ops/s
Iteration  17: 7923150.251 ops/s
Iteration  18: 7961280.504 ops/s
Iteration  19: 7920182.221 ops/s
Iteration  20: 7939194.581 ops/s
Iteration  21: 7852865.331 ops/s
Iteration  22: 7966324.931 ops/s
Iteration  23: 7967271.737 ops/s
Iteration  24: 7978320.857 ops/s
Iteration  25: 7959881.921 ops/s
Iteration  26: 7938933.631 ops/s
Iteration  27: 7893878.228 ops/s
Iteration  28: 7961433.360 ops/s
Iteration  29: 7822153.828 ops/s
Iteration  30: 7995993.492 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectWith":
  7923780.468 ±(99.9%) 29933.437 ops/s [Average]
  (min, avg, max) = (7822153.828, 7923780.468, 7995993.492), stdev = 44802.963
  CI (99.9%): [7893847.031, 7953713.906] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_selectWith  thrpt   30  7923780.468 ± 29933.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1611784.956 ops/s
# Warmup Iteration   2: 3530726.603 ops/s
# Warmup Iteration   3: 3352345.911 ops/s
# Warmup Iteration   4: 3196619.610 ops/s
# Warmup Iteration   5: 3582468.690 ops/s
# Warmup Iteration   6: 3589154.134 ops/s
# Warmup Iteration   7: 3556591.285 ops/s
# Warmup Iteration   8: 3566509.390 ops/s
# Warmup Iteration   9: 3575125.283 ops/s
# Warmup Iteration  10: 3580627.002 ops/s
# Warmup Iteration  11: 3560458.760 ops/s
# Warmup Iteration  12: 3578623.660 ops/s
# Warmup Iteration  13: 3580482.750 ops/s
# Warmup Iteration  14: 3582725.379 ops/s
# Warmup Iteration  15: 3579618.869 ops/s
# Warmup Iteration  16: 3565535.386 ops/s
# Warmup Iteration  17: 3568735.381 ops/s
# Warmup Iteration  18: 3549734.993 ops/s
# Warmup Iteration  19: 3536013.982 ops/s
# Warmup Iteration  20: 3554084.214 ops/s
# Warmup Iteration  21: 3518739.173 ops/s
# Warmup Iteration  22: 3574145.080 ops/s
# Warmup Iteration  23: 3554222.686 ops/s
# Warmup Iteration  24: 3555324.105 ops/s
# Warmup Iteration  25: 3562328.003 ops/s
# Warmup Iteration  26: 3529016.481 ops/s
# Warmup Iteration  27: 3574220.153 ops/s
# Warmup Iteration  28: 3567782.177 ops/s
# Warmup Iteration  29: 3576798.335 ops/s
# Warmup Iteration  30: 3574007.233 ops/s
Iteration   1: 3560852.555 ops/s
Iteration   2: 3564871.540 ops/s
Iteration   3: 3554769.375 ops/s
Iteration   4: 3576334.691 ops/s
Iteration   5: 3579049.886 ops/s
Iteration   6: 3560494.106 ops/s
Iteration   7: 3529144.898 ops/s
Iteration   8: 3551166.045 ops/s
Iteration   9: 3577759.794 ops/s
Iteration  10: 3510749.598 ops/s
Iteration  11: 3588042.932 ops/s
Iteration  12: 3438312.057 ops/s
Iteration  13: 3499373.418 ops/s
Iteration  14: 3577923.233 ops/s
Iteration  15: 3582183.922 ops/s
Iteration  16: 3546458.103 ops/s
Iteration  17: 3552231.704 ops/s
Iteration  18: 3568574.022 ops/s
Iteration  19: 3540450.200 ops/s
Iteration  20: 3560562.350 ops/s
Iteration  21: 3560308.660 ops/s
Iteration  22: 3565012.362 ops/s
Iteration  23: 3563723.048 ops/s
Iteration  24: 3564098.511 ops/s
Iteration  25: 3555644.975 ops/s
Iteration  26: 3473698.988 ops/s
Iteration  27: 3580515.395 ops/s
Iteration  28: 3571689.000 ops/s
Iteration  29: 3522076.884 ops/s
Iteration  30: 3540946.748 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectWithIndex":
  3550567.300 ±(99.9%) 22348.343 ops/s [Average]
  (min, avg, max) = (3438312.057, 3550567.300, 3588042.932), stdev = 33449.950
  CI (99.9%): [3528218.957, 3572915.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  3550567.300 ± 22348.343  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1575138.931 ops/s
# Warmup Iteration   2: 3996746.457 ops/s
# Warmup Iteration   3: 3998297.334 ops/s
# Warmup Iteration   4: 3352341.153 ops/s
# Warmup Iteration   5: 4066520.967 ops/s
# Warmup Iteration   6: 4051154.872 ops/s
# Warmup Iteration   7: 4031412.118 ops/s
# Warmup Iteration   8: 4014828.566 ops/s
# Warmup Iteration   9: 4055014.278 ops/s
# Warmup Iteration  10: 4031445.425 ops/s
# Warmup Iteration  11: 4045584.577 ops/s
# Warmup Iteration  12: 4021621.490 ops/s
# Warmup Iteration  13: 4024979.152 ops/s
# Warmup Iteration  14: 4046424.086 ops/s
# Warmup Iteration  15: 4056799.674 ops/s
# Warmup Iteration  16: 4044665.327 ops/s
# Warmup Iteration  17: 4050398.363 ops/s
# Warmup Iteration  18: 4055340.311 ops/s
# Warmup Iteration  19: 4040623.922 ops/s
# Warmup Iteration  20: 4043703.884 ops/s
# Warmup Iteration  21: 4043667.437 ops/s
# Warmup Iteration  22: 4047503.340 ops/s
# Warmup Iteration  23: 4045714.748 ops/s
# Warmup Iteration  24: 4042208.159 ops/s
# Warmup Iteration  25: 3985285.659 ops/s
# Warmup Iteration  26: 4033368.123 ops/s
# Warmup Iteration  27: 4006237.950 ops/s
# Warmup Iteration  28: 4035705.022 ops/s
# Warmup Iteration  29: 3993491.874 ops/s
# Warmup Iteration  30: 4015808.613 ops/s
Iteration   1: 4041661.080 ops/s
Iteration   2: 3995593.255 ops/s
Iteration   3: 4024577.887 ops/s
Iteration   4: 3976489.734 ops/s
Iteration   5: 4049297.622 ops/s
Iteration   6: 4051228.300 ops/s
Iteration   7: 4052268.298 ops/s
Iteration   8: 4062361.995 ops/s
Iteration   9: 4046892.400 ops/s
Iteration  10: 4026729.195 ops/s
Iteration  11: 4035971.956 ops/s
Iteration  12: 4069305.776 ops/s
Iteration  13: 4048705.479 ops/s
Iteration  14: 4060319.475 ops/s
Iteration  15: 4044226.489 ops/s
Iteration  16: 4049869.551 ops/s
Iteration  17: 3985619.191 ops/s
Iteration  18: 4034094.432 ops/s
Iteration  19: 4080314.049 ops/s
Iteration  20: 4064878.070 ops/s
Iteration  21: 4049286.441 ops/s
Iteration  22: 4018331.821 ops/s
Iteration  23: 4042600.881 ops/s
Iteration  24: 4071937.147 ops/s
Iteration  25: 4044711.897 ops/s
Iteration  26: 4032744.001 ops/s
Iteration  27: 4002691.999 ops/s
Iteration  28: 4040395.825 ops/s
Iteration  29: 3989705.812 ops/s
Iteration  30: 3940123.594 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  4034431.122 ±(99.9%) 21007.736 ops/s [Average]
  (min, avg, max) = (3940123.594, 4034431.122, 4080314.049), stdev = 31443.393
  CI (99.9%): [4013423.385, 4055438.858] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  4034431.122 ± 21007.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 435910.939 ops/s
# Warmup Iteration   2: 1082374.511 ops/s
# Warmup Iteration   3: 1109181.884 ops/s
# Warmup Iteration   4: 935278.891 ops/s
# Warmup Iteration   5: 1132403.711 ops/s
# Warmup Iteration   6: 1128757.276 ops/s
# Warmup Iteration   7: 1120686.297 ops/s
# Warmup Iteration   8: 1129692.437 ops/s
# Warmup Iteration   9: 1129284.261 ops/s
# Warmup Iteration  10: 1129594.859 ops/s
# Warmup Iteration  11: 1123781.542 ops/s
# Warmup Iteration  12: 1130047.257 ops/s
# Warmup Iteration  13: 1121313.878 ops/s
# Warmup Iteration  14: 1129744.467 ops/s
# Warmup Iteration  15: 1118652.700 ops/s
# Warmup Iteration  16: 1122896.399 ops/s
# Warmup Iteration  17: 1117544.809 ops/s
# Warmup Iteration  18: 1120952.901 ops/s
# Warmup Iteration  19: 1111628.539 ops/s
# Warmup Iteration  20: 1116338.882 ops/s
# Warmup Iteration  21: 1124016.863 ops/s
# Warmup Iteration  22: 1119140.839 ops/s
# Warmup Iteration  23: 1124901.741 ops/s
# Warmup Iteration  24: 1119666.114 ops/s
# Warmup Iteration  25: 1119286.550 ops/s
# Warmup Iteration  26: 1112155.886 ops/s
# Warmup Iteration  27: 1116105.275 ops/s
# Warmup Iteration  28: 1121892.856 ops/s
# Warmup Iteration  29: 1113139.684 ops/s
# Warmup Iteration  30: 1123786.910 ops/s
Iteration   1: 1125152.996 ops/s
Iteration   2: 1103036.086 ops/s
Iteration   3: 1129301.045 ops/s
Iteration   4: 1117256.595 ops/s
Iteration   5: 1129551.727 ops/s
Iteration   6: 1126025.469 ops/s
Iteration   7: 1121050.469 ops/s
Iteration   8: 1127986.239 ops/s
Iteration   9: 1123278.719 ops/s
Iteration  10: 1124591.996 ops/s
Iteration  11: 1107679.432 ops/s
Iteration  12: 1124173.439 ops/s
Iteration  13: 1128179.714 ops/s
Iteration  14: 1129602.678 ops/s
Iteration  15: 1122992.746 ops/s
Iteration  16: 1115961.891 ops/s
Iteration  17: 1129552.850 ops/s
Iteration  18: 1124025.164 ops/s
Iteration  19: 1093565.312 ops/s
Iteration  20: 1124131.291 ops/s
Iteration  21: 1115985.308 ops/s
Iteration  22: 1119471.466 ops/s
Iteration  23: 1127276.871 ops/s
Iteration  24: 1124189.074 ops/s
Iteration  25: 1125210.722 ops/s
Iteration  26: 1127668.991 ops/s
Iteration  27: 1103815.499 ops/s
Iteration  28: 1126864.001 ops/s
Iteration  29: 1116000.292 ops/s
Iteration  30: 1106225.949 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_selectWith_target":
  1120660.134 ±(99.9%) 6183.521 ops/s [Average]
  (min, avg, max) = (1093565.312, 1120660.134, 1129602.678), stdev = 9255.204
  CI (99.9%): [1114476.614, 1126843.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_selectWith_target  thrpt   30  1120660.134 ± 6183.521  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44387.904 ops/s
# Warmup Iteration   2: 57215.912 ops/s
# Warmup Iteration   3: 84676.744 ops/s
# Warmup Iteration   4: 84106.215 ops/s
# Warmup Iteration   5: 82731.604 ops/s
# Warmup Iteration   6: 83568.617 ops/s
# Warmup Iteration   7: 83607.241 ops/s
# Warmup Iteration   8: 83893.901 ops/s
# Warmup Iteration   9: 79555.685 ops/s
# Warmup Iteration  10: 74204.987 ops/s
# Warmup Iteration  11: 82826.454 ops/s
# Warmup Iteration  12: 83689.044 ops/s
# Warmup Iteration  13: 83176.684 ops/s
# Warmup Iteration  14: 83314.981 ops/s
# Warmup Iteration  15: 83773.686 ops/s
# Warmup Iteration  16: 83596.552 ops/s
# Warmup Iteration  17: 83896.123 ops/s
# Warmup Iteration  18: 83906.944 ops/s
# Warmup Iteration  19: 83603.103 ops/s
# Warmup Iteration  20: 84173.491 ops/s
# Warmup Iteration  21: 83785.862 ops/s
# Warmup Iteration  22: 84072.418 ops/s
# Warmup Iteration  23: 83742.314 ops/s
# Warmup Iteration  24: 84141.290 ops/s
# Warmup Iteration  25: 83813.001 ops/s
# Warmup Iteration  26: 84060.546 ops/s
# Warmup Iteration  27: 83320.616 ops/s
# Warmup Iteration  28: 84218.870 ops/s
# Warmup Iteration  29: 84201.708 ops/s
# Warmup Iteration  30: 83923.887 ops/s
Iteration   1: 82987.132 ops/s
Iteration   2: 84109.441 ops/s
Iteration   3: 83647.507 ops/s
Iteration   4: 82716.319 ops/s
Iteration   5: 83780.583 ops/s
Iteration   6: 84338.062 ops/s
Iteration   7: 84153.490 ops/s
Iteration   8: 84295.060 ops/s
Iteration   9: 83904.979 ops/s
Iteration  10: 84030.564 ops/s
Iteration  11: 83855.037 ops/s
Iteration  12: 82611.968 ops/s
Iteration  13: 84137.069 ops/s
Iteration  14: 83850.065 ops/s
Iteration  15: 80946.529 ops/s
Iteration  16: 83592.365 ops/s
Iteration  17: 81231.257 ops/s
Iteration  18: 83123.648 ops/s
Iteration  19: 82306.124 ops/s
Iteration  20: 82287.713 ops/s
Iteration  21: 83287.397 ops/s
Iteration  22: 83579.828 ops/s
Iteration  23: 83893.197 ops/s
Iteration  24: 83947.681 ops/s
Iteration  25: 83836.594 ops/s
Iteration  26: 81544.507 ops/s
Iteration  27: 83272.875 ops/s
Iteration  28: 81941.913 ops/s
Iteration  29: 83347.668 ops/s
Iteration  30: 83571.446 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_serialization":
  83270.934 ±(99.9%) 620.190 ops/s [Average]
  (min, avg, max) = (80946.529, 83270.934, 84338.062), stdev = 928.272
  CI (99.9%): [82650.744, 83891.124] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt      Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_serialization  thrpt   30  83270.934 ± 620.190  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_serializationOfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_serializationOfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 86349.712 ops/s
# Warmup Iteration   2: 121172.311 ops/s
# Warmup Iteration   3: 157186.351 ops/s
# Warmup Iteration   4: 156504.851 ops/s
# Warmup Iteration   5: 157177.234 ops/s
# Warmup Iteration   6: 156880.365 ops/s
# Warmup Iteration   7: 157083.177 ops/s
# Warmup Iteration   8: 134875.176 ops/s
# Warmup Iteration   9: 155749.333 ops/s
# Warmup Iteration  10: 155733.359 ops/s
# Warmup Iteration  11: 155537.533 ops/s
# Warmup Iteration  12: 156886.173 ops/s
# Warmup Iteration  13: 155384.419 ops/s
# Warmup Iteration  14: 155714.536 ops/s
# Warmup Iteration  15: 155516.661 ops/s
# Warmup Iteration  16: 155710.135 ops/s
# Warmup Iteration  17: 155717.839 ops/s
# Warmup Iteration  18: 156220.896 ops/s
# Warmup Iteration  19: 156103.855 ops/s
# Warmup Iteration  20: 155870.235 ops/s
# Warmup Iteration  21: 156155.953 ops/s
# Warmup Iteration  22: 155414.705 ops/s
# Warmup Iteration  23: 155690.511 ops/s
# Warmup Iteration  24: 156275.423 ops/s
# Warmup Iteration  25: 155867.103 ops/s
# Warmup Iteration  26: 155885.237 ops/s
# Warmup Iteration  27: 156620.325 ops/s
# Warmup Iteration  28: 155866.203 ops/s
# Warmup Iteration  29: 156707.633 ops/s
# Warmup Iteration  30: 155719.031 ops/s
Iteration   1: 156529.851 ops/s
Iteration   2: 156384.812 ops/s
Iteration   3: 155644.205 ops/s
Iteration   4: 153288.189 ops/s
Iteration   5: 156552.189 ops/s
Iteration   6: 156887.451 ops/s
Iteration   7: 156178.821 ops/s
Iteration   8: 156482.382 ops/s
Iteration   9: 152022.513 ops/s
Iteration  10: 155845.353 ops/s
Iteration  11: 156022.502 ops/s
Iteration  12: 153986.900 ops/s
Iteration  13: 156328.198 ops/s
Iteration  14: 154768.770 ops/s
Iteration  15: 156060.259 ops/s
Iteration  16: 156830.588 ops/s
Iteration  17: 156286.409 ops/s
Iteration  18: 157419.932 ops/s
Iteration  19: 156873.442 ops/s
Iteration  20: 157775.425 ops/s
Iteration  21: 157496.244 ops/s
Iteration  22: 156796.947 ops/s
Iteration  23: 156690.891 ops/s
Iteration  24: 155417.098 ops/s
Iteration  25: 156756.572 ops/s
Iteration  26: 156366.631 ops/s
Iteration  27: 156545.183 ops/s
Iteration  28: 156626.388 ops/s
Iteration  29: 156659.517 ops/s
Iteration  30: 156597.496 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_serializationOfEmpty":
  156137.372 ±(99.9%) 811.729 ops/s [Average]
  (min, avg, max) = (152022.513, 156137.372, 157775.425), stdev = 1214.957
  CI (99.9%): [155325.643, 156949.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_serializationOfEmpty  thrpt   30  156137.372 ± 811.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_serializationOfSublist$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_serializationOfSublist

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48099.731 ops/s
# Warmup Iteration   2: 64673.911 ops/s
# Warmup Iteration   3: 92686.414 ops/s
# Warmup Iteration   4: 91739.197 ops/s
# Warmup Iteration   5: 91589.895 ops/s
# Warmup Iteration   6: 92024.490 ops/s
# Warmup Iteration   7: 91872.689 ops/s
# Warmup Iteration   8: 91229.604 ops/s
# Warmup Iteration   9: 83753.452 ops/s
# Warmup Iteration  10: 85757.005 ops/s
# Warmup Iteration  11: 90525.160 ops/s
# Warmup Iteration  12: 90981.704 ops/s
# Warmup Iteration  13: 91909.131 ops/s
# Warmup Iteration  14: 91456.176 ops/s
# Warmup Iteration  15: 92378.475 ops/s
# Warmup Iteration  16: 91884.579 ops/s
# Warmup Iteration  17: 91705.038 ops/s
# Warmup Iteration  18: 92481.498 ops/s
# Warmup Iteration  19: 91424.194 ops/s
# Warmup Iteration  20: 92026.993 ops/s
# Warmup Iteration  21: 92001.625 ops/s
# Warmup Iteration  22: 91787.243 ops/s
# Warmup Iteration  23: 92262.094 ops/s
# Warmup Iteration  24: 92272.510 ops/s
# Warmup Iteration  25: 91599.630 ops/s
# Warmup Iteration  26: 91789.609 ops/s
# Warmup Iteration  27: 92155.118 ops/s
# Warmup Iteration  28: 92034.821 ops/s
# Warmup Iteration  29: 92159.222 ops/s
# Warmup Iteration  30: 91498.613 ops/s
Iteration   1: 92136.376 ops/s
Iteration   2: 91528.498 ops/s
Iteration   3: 92253.855 ops/s
Iteration   4: 92520.585 ops/s
Iteration   5: 90656.511 ops/s
Iteration   6: 91521.875 ops/s
Iteration   7: 91879.382 ops/s
Iteration   8: 92019.228 ops/s
Iteration   9: 91845.957 ops/s
Iteration  10: 89484.678 ops/s
Iteration  11: 91795.355 ops/s
Iteration  12: 92412.465 ops/s
Iteration  13: 91972.229 ops/s
Iteration  14: 91959.798 ops/s
Iteration  15: 91715.403 ops/s
Iteration  16: 93348.015 ops/s
Iteration  17: 92870.515 ops/s
Iteration  18: 93509.372 ops/s
Iteration  19: 93070.447 ops/s
Iteration  20: 93034.376 ops/s
Iteration  21: 93551.387 ops/s
Iteration  22: 93171.175 ops/s
Iteration  23: 93146.912 ops/s
Iteration  24: 93484.887 ops/s
Iteration  25: 91438.139 ops/s
Iteration  26: 92870.825 ops/s
Iteration  27: 92888.202 ops/s
Iteration  28: 93223.212 ops/s
Iteration  29: 92791.911 ops/s
Iteration  30: 93249.325 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_serializationOfSublist":
  92378.363 ±(99.9%) 618.972 ops/s [Average]
  (min, avg, max) = (89484.678, 92378.363, 93551.387), stdev = 926.448
  CI (99.9%): [91759.391, 92997.335] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt      Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_serializationOfSublist  thrpt   30  92378.363 ± 618.972  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2502924.552 ops/s
# Warmup Iteration   2: 3972564.379 ops/s
# Warmup Iteration   3: 4434582.121 ops/s
# Warmup Iteration   4: 4450941.436 ops/s
# Warmup Iteration   5: 4474755.373 ops/s
# Warmup Iteration   6: 3780928.897 ops/s
# Warmup Iteration   7: 4434794.778 ops/s
# Warmup Iteration   8: 4505567.839 ops/s
# Warmup Iteration   9: 4481451.743 ops/s
# Warmup Iteration  10: 4453804.488 ops/s
# Warmup Iteration  11: 4447624.950 ops/s
# Warmup Iteration  12: 4500020.375 ops/s
# Warmup Iteration  13: 4490093.200 ops/s
# Warmup Iteration  14: 4489417.521 ops/s
# Warmup Iteration  15: 4398945.876 ops/s
# Warmup Iteration  16: 4491427.899 ops/s
# Warmup Iteration  17: 4473484.074 ops/s
# Warmup Iteration  18: 4461781.061 ops/s
# Warmup Iteration  19: 4463425.538 ops/s
# Warmup Iteration  20: 4436073.793 ops/s
# Warmup Iteration  21: 4473164.671 ops/s
# Warmup Iteration  22: 4455039.483 ops/s
# Warmup Iteration  23: 4428998.363 ops/s
# Warmup Iteration  24: 4487764.131 ops/s
# Warmup Iteration  25: 4478606.533 ops/s
# Warmup Iteration  26: 4465072.140 ops/s
# Warmup Iteration  27: 4417704.712 ops/s
# Warmup Iteration  28: 4379030.768 ops/s
# Warmup Iteration  29: 4472194.911 ops/s
# Warmup Iteration  30: 4434022.400 ops/s
Iteration   1: 4474205.561 ops/s
Iteration   2: 4476130.150 ops/s
Iteration   3: 4375737.930 ops/s
Iteration   4: 4477609.930 ops/s
Iteration   5: 4481117.149 ops/s
Iteration   6: 4480131.308 ops/s
Iteration   7: 4467961.909 ops/s
Iteration   8: 4480950.745 ops/s
Iteration   9: 4473612.153 ops/s
Iteration  10: 4453181.977 ops/s
Iteration  11: 4436812.689 ops/s
Iteration  12: 4480984.173 ops/s
Iteration  13: 4474033.059 ops/s
Iteration  14: 4468550.969 ops/s
Iteration  15: 4454599.564 ops/s
Iteration  16: 4391457.795 ops/s
Iteration  17: 4463469.700 ops/s
Iteration  18: 4473019.271 ops/s
Iteration  19: 4486691.503 ops/s
Iteration  20: 4484848.354 ops/s
Iteration  21: 4479009.751 ops/s
Iteration  22: 4490586.261 ops/s
Iteration  23: 4475564.833 ops/s
Iteration  24: 4473966.021 ops/s
Iteration  25: 4488671.618 ops/s
Iteration  26: 4486476.726 ops/s
Iteration  27: 4452025.115 ops/s
Iteration  28: 4485654.650 ops/s
Iteration  29: 4457665.801 ops/s
Iteration  30: 4482621.023 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_set":
  4467578.256 ±(99.9%) 17421.123 ops/s [Average]
  (min, avg, max) = (4375737.930, 4467578.256, 4490586.261), stdev = 26075.118
  CI (99.9%): [4450157.134, 4484999.379] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_set  thrpt   30  4467578.256 ± 17421.123  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_setAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_setAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2139930.307 ops/s
# Warmup Iteration   2: 4524966.580 ops/s
# Warmup Iteration   3: 4428524.139 ops/s
# Warmup Iteration   4: 3935110.289 ops/s
# Warmup Iteration   5: 4560773.606 ops/s
# Warmup Iteration   6: 4562539.658 ops/s
# Warmup Iteration   7: 4553779.014 ops/s
# Warmup Iteration   8: 4552416.991 ops/s
# Warmup Iteration   9: 4552832.439 ops/s
# Warmup Iteration  10: 4563841.828 ops/s
# Warmup Iteration  11: 4543402.261 ops/s
# Warmup Iteration  12: 4563614.078 ops/s
# Warmup Iteration  13: 4550193.943 ops/s
# Warmup Iteration  14: 4547904.944 ops/s
# Warmup Iteration  15: 4572942.350 ops/s
# Warmup Iteration  16: 4516631.840 ops/s
# Warmup Iteration  17: 4587206.648 ops/s
# Warmup Iteration  18: 4579638.322 ops/s
# Warmup Iteration  19: 4553863.152 ops/s
# Warmup Iteration  20: 4591244.226 ops/s
# Warmup Iteration  21: 4571785.123 ops/s
# Warmup Iteration  22: 4535756.236 ops/s
# Warmup Iteration  23: 4592844.407 ops/s
# Warmup Iteration  24: 4568352.976 ops/s
# Warmup Iteration  25: 4591125.062 ops/s
# Warmup Iteration  26: 4599156.629 ops/s
# Warmup Iteration  27: 4526880.670 ops/s
# Warmup Iteration  28: 4582044.074 ops/s
# Warmup Iteration  29: 4589378.171 ops/s
# Warmup Iteration  30: 4575843.043 ops/s
Iteration   1: 4522787.133 ops/s
Iteration   2: 4587496.556 ops/s
Iteration   3: 4587622.132 ops/s
Iteration   4: 4593830.294 ops/s
Iteration   5: 4568348.655 ops/s
Iteration   6: 4594479.781 ops/s
Iteration   7: 4576328.880 ops/s
Iteration   8: 4579821.516 ops/s
Iteration   9: 4602918.355 ops/s
Iteration  10: 4586300.450 ops/s
Iteration  11: 4552212.635 ops/s
Iteration  12: 4582285.464 ops/s
Iteration  13: 4582045.991 ops/s
Iteration  14: 4555761.266 ops/s
Iteration  15: 4578240.156 ops/s
Iteration  16: 4596858.462 ops/s
Iteration  17: 4581188.734 ops/s
Iteration  18: 4577512.493 ops/s
Iteration  19: 4573276.813 ops/s
Iteration  20: 4580403.341 ops/s
Iteration  21: 4577377.502 ops/s
Iteration  22: 4583006.222 ops/s
Iteration  23: 4583018.837 ops/s
Iteration  24: 4589829.402 ops/s
Iteration  25: 4564067.150 ops/s
Iteration  26: 4594379.590 ops/s
Iteration  27: 4593478.827 ops/s
Iteration  28: 4518498.283 ops/s
Iteration  29: 4607049.094 ops/s
Iteration  30: 4569838.932 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_setAtIndex":
  4578008.765 ±(99.9%) 13289.752 ops/s [Average]
  (min, avg, max) = (4518498.283, 4578008.765, 4607049.094), stdev = 19891.477
  CI (99.9%): [4564719.013, 4591298.517] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_setAtIndex  thrpt   30  4578008.765 ± 13289.752  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1980997.537 ops/s
# Warmup Iteration   2: 3204862.739 ops/s
# Warmup Iteration   3: 3700877.519 ops/s
# Warmup Iteration   4: 3718414.811 ops/s
# Warmup Iteration   5: 3719532.631 ops/s
# Warmup Iteration   6: 3091969.153 ops/s
# Warmup Iteration   7: 3730041.191 ops/s
# Warmup Iteration   8: 3733260.406 ops/s
# Warmup Iteration   9: 3721141.308 ops/s
# Warmup Iteration  10: 3703868.079 ops/s
# Warmup Iteration  11: 3745878.502 ops/s
# Warmup Iteration  12: 3733317.026 ops/s
# Warmup Iteration  13: 3675481.881 ops/s
# Warmup Iteration  14: 3731494.141 ops/s
# Warmup Iteration  15: 3735231.397 ops/s
# Warmup Iteration  16: 3717604.204 ops/s
# Warmup Iteration  17: 3696168.117 ops/s
# Warmup Iteration  18: 3716534.930 ops/s
# Warmup Iteration  19: 3699719.143 ops/s
# Warmup Iteration  20: 3727029.114 ops/s
# Warmup Iteration  21: 3732904.774 ops/s
# Warmup Iteration  22: 3724968.263 ops/s
# Warmup Iteration  23: 3730616.387 ops/s
# Warmup Iteration  24: 3691350.536 ops/s
# Warmup Iteration  25: 3726210.150 ops/s
# Warmup Iteration  26: 3691977.565 ops/s
# Warmup Iteration  27: 3726402.724 ops/s
# Warmup Iteration  28: 3728224.736 ops/s
# Warmup Iteration  29: 3718253.849 ops/s
# Warmup Iteration  30: 3715950.750 ops/s
Iteration   1: 3729224.028 ops/s
Iteration   2: 3660426.818 ops/s
Iteration   3: 3714852.856 ops/s
Iteration   4: 3735063.865 ops/s
Iteration   5: 3741195.799 ops/s
Iteration   6: 3718835.699 ops/s
Iteration   7: 3668579.138 ops/s
Iteration   8: 3704320.089 ops/s
Iteration   9: 3734784.361 ops/s
Iteration  10: 3719853.384 ops/s
Iteration  11: 3716805.530 ops/s
Iteration  12: 3711168.984 ops/s
Iteration  13: 3745803.133 ops/s
Iteration  14: 3719561.711 ops/s
Iteration  15: 3727865.977 ops/s
Iteration  16: 3715272.948 ops/s
Iteration  17: 3727402.074 ops/s
Iteration  18: 3718301.530 ops/s
Iteration  19: 3708630.451 ops/s
Iteration  20: 3705171.065 ops/s
Iteration  21: 3744011.393 ops/s
Iteration  22: 3720705.883 ops/s
Iteration  23: 3727703.543 ops/s
Iteration  24: 3669927.367 ops/s
Iteration  25: 3716846.556 ops/s
Iteration  26: 3719248.042 ops/s
Iteration  27: 3705385.241 ops/s
Iteration  28: 3722352.572 ops/s
Iteration  29: 3665363.461 ops/s
Iteration  30: 3730941.239 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sort":
  3714853.491 ±(99.9%) 14875.154 ops/s [Average]
  (min, avg, max) = (3660426.818, 3714853.491, 3745803.133), stdev = 22264.432
  CI (99.9%): [3699978.337, 3729728.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sort  thrpt   30  3714853.491 ± 14875.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 929044.935 ops/s
# Warmup Iteration   2: 1003357.642 ops/s
# Warmup Iteration   3: 999428.335 ops/s
# Warmup Iteration   4: 1196321.468 ops/s
# Warmup Iteration   5: 1199850.011 ops/s
# Warmup Iteration   6: 1169868.081 ops/s
# Warmup Iteration   7: 1193437.473 ops/s
# Warmup Iteration   8: 1195147.877 ops/s
# Warmup Iteration   9: 1199839.641 ops/s
# Warmup Iteration  10: 1206332.878 ops/s
# Warmup Iteration  11: 1200168.644 ops/s
# Warmup Iteration  12: 1195656.427 ops/s
# Warmup Iteration  13: 1195197.992 ops/s
# Warmup Iteration  14: 1171586.738 ops/s
# Warmup Iteration  15: 1198024.792 ops/s
# Warmup Iteration  16: 1203744.771 ops/s
# Warmup Iteration  17: 1183228.179 ops/s
# Warmup Iteration  18: 1195735.183 ops/s
# Warmup Iteration  19: 1025896.166 ops/s
# Warmup Iteration  20: 1143506.133 ops/s
# Warmup Iteration  21: 1199443.846 ops/s
# Warmup Iteration  22: 1195140.041 ops/s
# Warmup Iteration  23: 1195271.725 ops/s
# Warmup Iteration  24: 1196058.604 ops/s
# Warmup Iteration  25: 1195785.303 ops/s
# Warmup Iteration  26: 1196595.006 ops/s
# Warmup Iteration  27: 1200994.159 ops/s
# Warmup Iteration  28: 1199937.198 ops/s
# Warmup Iteration  29: 1196007.069 ops/s
# Warmup Iteration  30: 1189500.172 ops/s
Iteration   1: 1171079.271 ops/s
Iteration   2: 1196259.983 ops/s
Iteration   3: 1196610.293 ops/s
Iteration   4: 1198123.520 ops/s
Iteration   5: 1194782.252 ops/s
Iteration   6: 1194977.903 ops/s
Iteration   7: 1205144.413 ops/s
Iteration   8: 1160802.152 ops/s
Iteration   9: 1202321.216 ops/s
Iteration  10: 1180066.923 ops/s
Iteration  11: 1195506.102 ops/s
Iteration  12: 1199269.624 ops/s
Iteration  13: 1195504.277 ops/s
Iteration  14: 1192988.721 ops/s
Iteration  15: 1197724.449 ops/s
Iteration  16: 1195966.260 ops/s
Iteration  17: 1197888.041 ops/s
Iteration  18: 1180592.339 ops/s
Iteration  19: 1195552.392 ops/s
Iteration  20: 1197658.395 ops/s
Iteration  21: 1187461.143 ops/s
Iteration  22: 1195570.323 ops/s
Iteration  23: 1205334.596 ops/s
Iteration  24: 1200803.905 ops/s
Iteration  25: 1189679.222 ops/s
Iteration  26: 1196536.650 ops/s
Iteration  27: 1197883.598 ops/s
Iteration  28: 1198589.038 ops/s
Iteration  29: 1197856.545 ops/s
Iteration  30: 1189111.864 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis":
  1193588.180 ±(99.9%) 6353.036 ops/s [Average]
  (min, avg, max) = (1160802.152, 1193588.180, 1205334.596), stdev = 9508.926
  CI (99.9%): [1187235.144, 1199941.216] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThis  thrpt   30  1193588.180 ± 6353.036  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 355064.953 ops/s
# Warmup Iteration   2: 390346.935 ops/s
# Warmup Iteration   3: 585916.063 ops/s
# Warmup Iteration   4: 580317.623 ops/s
# Warmup Iteration   5: 580382.589 ops/s
# Warmup Iteration   6: 585912.321 ops/s
# Warmup Iteration   7: 585250.547 ops/s
# Warmup Iteration   8: 581663.417 ops/s
# Warmup Iteration   9: 588690.020 ops/s
# Warmup Iteration  10: 454256.581 ops/s
# Warmup Iteration  11: 585816.017 ops/s
# Warmup Iteration  12: 583641.273 ops/s
# Warmup Iteration  13: 586753.356 ops/s
# Warmup Iteration  14: 586384.708 ops/s
# Warmup Iteration  15: 587951.466 ops/s
# Warmup Iteration  16: 583138.037 ops/s
# Warmup Iteration  17: 581133.627 ops/s
# Warmup Iteration  18: 583373.016 ops/s
# Warmup Iteration  19: 586653.807 ops/s
# Warmup Iteration  20: 584770.662 ops/s
# Warmup Iteration  21: 582512.929 ops/s
# Warmup Iteration  22: 582427.110 ops/s
# Warmup Iteration  23: 585510.442 ops/s
# Warmup Iteration  24: 582835.764 ops/s
# Warmup Iteration  25: 581905.485 ops/s
# Warmup Iteration  26: 578153.115 ops/s
# Warmup Iteration  27: 579526.235 ops/s
# Warmup Iteration  28: 586231.925 ops/s
# Warmup Iteration  29: 587019.389 ops/s
# Warmup Iteration  30: 585705.169 ops/s
Iteration   1: 586187.503 ops/s
Iteration   2: 583955.036 ops/s
Iteration   3: 585918.006 ops/s
Iteration   4: 588152.149 ops/s
Iteration   5: 587569.176 ops/s
Iteration   6: 582129.727 ops/s
Iteration   7: 580103.579 ops/s
Iteration   8: 584905.762 ops/s
Iteration   9: 583908.715 ops/s
Iteration  10: 586327.661 ops/s
Iteration  11: 586027.498 ops/s
Iteration  12: 583025.205 ops/s
Iteration  13: 565202.082 ops/s
Iteration  14: 586644.810 ops/s
Iteration  15: 588375.640 ops/s
Iteration  16: 586844.246 ops/s
Iteration  17: 576387.268 ops/s
Iteration  18: 583896.780 ops/s
Iteration  19: 583890.903 ops/s
Iteration  20: 586842.152 ops/s
Iteration  21: 587100.645 ops/s
Iteration  22: 583569.140 ops/s
Iteration  23: 580076.211 ops/s
Iteration  24: 583406.814 ops/s
Iteration  25: 584231.504 ops/s
Iteration  26: 586178.705 ops/s
Iteration  27: 586498.708 ops/s
Iteration  28: 582251.543 ops/s
Iteration  29: 588648.243 ops/s
Iteration  30: 586726.419 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisBy":
  584166.061 ±(99.9%) 3013.388 ops/s [Average]
  (min, avg, max) = (565202.082, 584166.061, 588648.243), stdev = 4510.297
  CI (99.9%): [581152.673, 587179.449] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThisBy  thrpt   30  584166.061 ± 3013.388  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1345889.803 ops/s
# Warmup Iteration   2: 1435189.984 ops/s
# Warmup Iteration   3: 1882759.214 ops/s
# Warmup Iteration   4: 1922295.452 ops/s
# Warmup Iteration   5: 1921778.987 ops/s
# Warmup Iteration   6: 1930235.177 ops/s
# Warmup Iteration   7: 1925192.732 ops/s
# Warmup Iteration   8: 1934369.296 ops/s
# Warmup Iteration   9: 1909476.873 ops/s
# Warmup Iteration  10: 1909768.986 ops/s
# Warmup Iteration  11: 1912605.551 ops/s
# Warmup Iteration  12: 1603869.149 ops/s
# Warmup Iteration  13: 1915017.207 ops/s
# Warmup Iteration  14: 1934136.384 ops/s
# Warmup Iteration  15: 1934110.523 ops/s
# Warmup Iteration  16: 1910107.390 ops/s
# Warmup Iteration  17: 1926595.146 ops/s
# Warmup Iteration  18: 1915095.304 ops/s
# Warmup Iteration  19: 1916093.182 ops/s
# Warmup Iteration  20: 1925786.048 ops/s
# Warmup Iteration  21: 1931271.826 ops/s
# Warmup Iteration  22: 1924574.366 ops/s
# Warmup Iteration  23: 1913740.309 ops/s
# Warmup Iteration  24: 1926948.940 ops/s
# Warmup Iteration  25: 1932820.367 ops/s
# Warmup Iteration  26: 1926651.912 ops/s
# Warmup Iteration  27: 1925934.072 ops/s
# Warmup Iteration  28: 1915941.062 ops/s
# Warmup Iteration  29: 1929566.606 ops/s
# Warmup Iteration  30: 1930875.055 ops/s
Iteration   1: 1930230.776 ops/s
Iteration   2: 1897391.428 ops/s
Iteration   3: 1928257.467 ops/s
Iteration   4: 1926948.337 ops/s
Iteration   5: 1924692.602 ops/s
Iteration   6: 1931802.399 ops/s
Iteration   7: 1937238.706 ops/s
Iteration   8: 1938984.483 ops/s
Iteration   9: 1932415.754 ops/s
Iteration  10: 1934572.778 ops/s
Iteration  11: 1939489.898 ops/s
Iteration  12: 1925595.104 ops/s
Iteration  13: 1930026.578 ops/s
Iteration  14: 1928319.999 ops/s
Iteration  15: 1897345.706 ops/s
Iteration  16: 1934681.960 ops/s
Iteration  17: 1929628.489 ops/s
Iteration  18: 1931266.481 ops/s
Iteration  19: 1935159.391 ops/s
Iteration  20: 1926723.056 ops/s
Iteration  21: 1935545.635 ops/s
Iteration  22: 1934587.843 ops/s
Iteration  23: 1904443.803 ops/s
Iteration  24: 1933093.660 ops/s
Iteration  25: 1934869.609 ops/s
Iteration  26: 1945650.298 ops/s
Iteration  27: 1933058.887 ops/s
Iteration  28: 1867577.826 ops/s
Iteration  29: 1937437.571 ops/s
Iteration  30: 1934633.458 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByBoolean":
  1927388.999 ±(99.9%) 10576.826 ops/s [Average]
  (min, avg, max) = (1867577.826, 1927388.999, 1945650.298), stdev = 15830.896
  CI (99.9%): [1916812.174, 1937965.825] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThisByBoolean  thrpt   30  1927388.999 ± 10576.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702722.328 ops/s
# Warmup Iteration   2: 751390.540 ops/s
# Warmup Iteration   3: 752811.755 ops/s
# Warmup Iteration   4: 766111.781 ops/s
# Warmup Iteration   5: 863339.202 ops/s
# Warmup Iteration   6: 862420.667 ops/s
# Warmup Iteration   7: 864389.131 ops/s
# Warmup Iteration   8: 866358.840 ops/s
# Warmup Iteration   9: 867629.575 ops/s
# Warmup Iteration  10: 872354.620 ops/s
# Warmup Iteration  11: 862279.815 ops/s
# Warmup Iteration  12: 858528.253 ops/s
# Warmup Iteration  13: 859801.551 ops/s
# Warmup Iteration  14: 864829.513 ops/s
# Warmup Iteration  15: 850661.193 ops/s
# Warmup Iteration  16: 865047.090 ops/s
# Warmup Iteration  17: 860458.555 ops/s
# Warmup Iteration  18: 866319.406 ops/s
# Warmup Iteration  19: 858885.499 ops/s
# Warmup Iteration  20: 855246.133 ops/s
# Warmup Iteration  21: 862988.730 ops/s
# Warmup Iteration  22: 861369.270 ops/s
# Warmup Iteration  23: 865789.216 ops/s
# Warmup Iteration  24: 849488.724 ops/s
# Warmup Iteration  25: 753139.086 ops/s
# Warmup Iteration  26: 852109.742 ops/s
# Warmup Iteration  27: 867422.669 ops/s
# Warmup Iteration  28: 862376.581 ops/s
# Warmup Iteration  29: 863840.246 ops/s
# Warmup Iteration  30: 864630.010 ops/s
Iteration   1: 870595.963 ops/s
Iteration   2: 869516.131 ops/s
Iteration   3: 870325.658 ops/s
Iteration   4: 863949.602 ops/s
Iteration   5: 866042.220 ops/s
Iteration   6: 863729.168 ops/s
Iteration   7: 864340.297 ops/s
Iteration   8: 868380.601 ops/s
Iteration   9: 859971.008 ops/s
Iteration  10: 867924.808 ops/s
Iteration  11: 846531.439 ops/s
Iteration  12: 866486.618 ops/s
Iteration  13: 862634.320 ops/s
Iteration  14: 867954.513 ops/s
Iteration  15: 866572.040 ops/s
Iteration  16: 858404.773 ops/s
Iteration  17: 863156.416 ops/s
Iteration  18: 860551.168 ops/s
Iteration  19: 868910.332 ops/s
Iteration  20: 863722.991 ops/s
Iteration  21: 867713.058 ops/s
Iteration  22: 867938.995 ops/s
Iteration  23: 863192.559 ops/s
Iteration  24: 865600.640 ops/s
Iteration  25: 858570.423 ops/s
Iteration  26: 871276.599 ops/s
Iteration  27: 862079.140 ops/s
Iteration  28: 864908.647 ops/s
Iteration  29: 866084.544 ops/s
Iteration  30: 864014.314 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByByte":
  864702.633 ±(99.9%) 3239.240 ops/s [Average]
  (min, avg, max) = (846531.439, 864702.633, 871276.599), stdev = 4848.343
  CI (99.9%): [861463.393, 867941.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThisByByte  thrpt   30  864702.633 ± 3239.240  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1001280.846 ops/s
# Warmup Iteration   2: 1084055.954 ops/s
# Warmup Iteration   3: 1170454.936 ops/s
# Warmup Iteration   4: 1346128.546 ops/s
# Warmup Iteration   5: 1345800.376 ops/s
# Warmup Iteration   6: 1345427.152 ops/s
# Warmup Iteration   7: 1338899.335 ops/s
# Warmup Iteration   8: 1342840.949 ops/s
# Warmup Iteration   9: 1333089.071 ops/s
# Warmup Iteration  10: 1335746.044 ops/s
# Warmup Iteration  11: 1344240.002 ops/s
# Warmup Iteration  12: 1339772.109 ops/s
# Warmup Iteration  13: 1347777.517 ops/s
# Warmup Iteration  14: 1340306.447 ops/s
# Warmup Iteration  15: 1338463.822 ops/s
# Warmup Iteration  16: 1219608.667 ops/s
# Warmup Iteration  17: 1232625.714 ops/s
# Warmup Iteration  18: 1327249.476 ops/s
# Warmup Iteration  19: 1344890.210 ops/s
# Warmup Iteration  20: 1336349.615 ops/s
# Warmup Iteration  21: 1338114.152 ops/s
# Warmup Iteration  22: 1346442.446 ops/s
# Warmup Iteration  23: 1346472.271 ops/s
# Warmup Iteration  24: 1342024.415 ops/s
# Warmup Iteration  25: 1350696.205 ops/s
# Warmup Iteration  26: 1346779.078 ops/s
# Warmup Iteration  27: 1348770.036 ops/s
# Warmup Iteration  28: 1346808.657 ops/s
# Warmup Iteration  29: 1339870.306 ops/s
# Warmup Iteration  30: 1346138.869 ops/s
Iteration   1: 1341552.225 ops/s
Iteration   2: 1340326.527 ops/s
Iteration   3: 1354320.468 ops/s
Iteration   4: 1346988.900 ops/s
Iteration   5: 1323777.582 ops/s
Iteration   6: 1351460.584 ops/s
Iteration   7: 1346980.880 ops/s
Iteration   8: 1343613.626 ops/s
Iteration   9: 1346545.760 ops/s
Iteration  10: 1342554.078 ops/s
Iteration  11: 1354346.194 ops/s
Iteration  12: 1330209.112 ops/s
Iteration  13: 1349406.065 ops/s
Iteration  14: 1348183.138 ops/s
Iteration  15: 1347770.353 ops/s
Iteration  16: 1346856.538 ops/s
Iteration  17: 1346843.199 ops/s
Iteration  18: 1351576.188 ops/s
Iteration  19: 1322205.577 ops/s
Iteration  20: 1344467.609 ops/s
Iteration  21: 1348369.391 ops/s
Iteration  22: 1347346.983 ops/s
Iteration  23: 1348275.406 ops/s
Iteration  24: 1344123.197 ops/s
Iteration  25: 1349777.435 ops/s
Iteration  26: 1324831.531 ops/s
Iteration  27: 1350698.429 ops/s
Iteration  28: 1336274.205 ops/s
Iteration  29: 1337461.243 ops/s
Iteration  30: 1341300.973 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByChar":
  1343614.780 ±(99.9%) 5717.407 ops/s [Average]
  (min, avg, max) = (1322205.577, 1343614.780, 1354346.194), stdev = 8557.547
  CI (99.9%): [1337897.372, 1349332.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThisByChar  thrpt   30  1343614.780 ± 5717.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 243141.575 ops/s
# Warmup Iteration   2: 360979.279 ops/s
# Warmup Iteration   3: 440405.145 ops/s
# Warmup Iteration   4: 439815.348 ops/s
# Warmup Iteration   5: 434821.157 ops/s
# Warmup Iteration   6: 442307.331 ops/s
# Warmup Iteration   7: 354575.904 ops/s
# Warmup Iteration   8: 441501.709 ops/s
# Warmup Iteration   9: 440957.348 ops/s
# Warmup Iteration  10: 442849.992 ops/s
# Warmup Iteration  11: 443123.847 ops/s
# Warmup Iteration  12: 440757.628 ops/s
# Warmup Iteration  13: 440601.485 ops/s
# Warmup Iteration  14: 438909.918 ops/s
# Warmup Iteration  15: 441177.310 ops/s
# Warmup Iteration  16: 441770.079 ops/s
# Warmup Iteration  17: 436064.767 ops/s
# Warmup Iteration  18: 441247.817 ops/s
# Warmup Iteration  19: 437396.107 ops/s
# Warmup Iteration  20: 437915.839 ops/s
# Warmup Iteration  21: 439287.171 ops/s
# Warmup Iteration  22: 442252.919 ops/s
# Warmup Iteration  23: 439505.056 ops/s
# Warmup Iteration  24: 439625.808 ops/s
# Warmup Iteration  25: 441626.801 ops/s
# Warmup Iteration  26: 438904.392 ops/s
# Warmup Iteration  27: 439106.387 ops/s
# Warmup Iteration  28: 442411.565 ops/s
# Warmup Iteration  29: 435600.318 ops/s
# Warmup Iteration  30: 437876.655 ops/s
Iteration   1: 438903.977 ops/s
Iteration   2: 443206.348 ops/s
Iteration   3: 438471.013 ops/s
Iteration   4: 442584.469 ops/s
Iteration   5: 443486.702 ops/s
Iteration   6: 442956.163 ops/s
Iteration   7: 443466.974 ops/s
Iteration   8: 443256.583 ops/s
Iteration   9: 438467.375 ops/s
Iteration  10: 442499.107 ops/s
Iteration  11: 442602.296 ops/s
Iteration  12: 441132.864 ops/s
Iteration  13: 441651.342 ops/s
Iteration  14: 440368.406 ops/s
Iteration  15: 443367.705 ops/s
Iteration  16: 442227.420 ops/s
Iteration  17: 441631.373 ops/s
Iteration  18: 444291.348 ops/s
Iteration  19: 441532.304 ops/s
Iteration  20: 441676.543 ops/s
Iteration  21: 441750.710 ops/s
Iteration  22: 441865.089 ops/s
Iteration  23: 440445.351 ops/s
Iteration  24: 441855.487 ops/s
Iteration  25: 437775.674 ops/s
Iteration  26: 431504.684 ops/s
Iteration  27: 432454.594 ops/s
Iteration  28: 440695.931 ops/s
Iteration  29: 441142.643 ops/s
Iteration  30: 441981.270 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByDouble":
  440975.058 ±(99.9%) 1951.817 ops/s [Average]
  (min, avg, max) = (431504.684, 440975.058, 444291.348), stdev = 2921.388
  CI (99.9%): [439023.242, 442926.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThisByDouble  thrpt   30  440975.058 ± 1951.817  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 244167.322 ops/s
# Warmup Iteration   2: 361476.880 ops/s
# Warmup Iteration   3: 444593.301 ops/s
# Warmup Iteration   4: 440900.488 ops/s
# Warmup Iteration   5: 444205.902 ops/s
# Warmup Iteration   6: 443849.835 ops/s
# Warmup Iteration   7: 360141.391 ops/s
# Warmup Iteration   8: 439647.166 ops/s
# Warmup Iteration   9: 443202.669 ops/s
# Warmup Iteration  10: 441809.162 ops/s
# Warmup Iteration  11: 440934.688 ops/s
# Warmup Iteration  12: 443773.763 ops/s
# Warmup Iteration  13: 444390.692 ops/s
# Warmup Iteration  14: 446422.160 ops/s
# Warmup Iteration  15: 444512.882 ops/s
# Warmup Iteration  16: 444864.834 ops/s
# Warmup Iteration  17: 447646.803 ops/s
# Warmup Iteration  18: 446340.464 ops/s
# Warmup Iteration  19: 446239.241 ops/s
# Warmup Iteration  20: 446105.251 ops/s
# Warmup Iteration  21: 444226.556 ops/s
# Warmup Iteration  22: 444315.313 ops/s
# Warmup Iteration  23: 446053.088 ops/s
# Warmup Iteration  24: 445589.342 ops/s
# Warmup Iteration  25: 444540.092 ops/s
# Warmup Iteration  26: 445777.852 ops/s
# Warmup Iteration  27: 445627.025 ops/s
# Warmup Iteration  28: 445302.691 ops/s
# Warmup Iteration  29: 443300.816 ops/s
# Warmup Iteration  30: 439612.154 ops/s
Iteration   1: 444632.296 ops/s
Iteration   2: 444638.151 ops/s
Iteration   3: 444766.783 ops/s
Iteration   4: 445523.489 ops/s
Iteration   5: 444355.335 ops/s
Iteration   6: 446084.667 ops/s
Iteration   7: 444833.354 ops/s
Iteration   8: 437193.866 ops/s
Iteration   9: 442025.510 ops/s
Iteration  10: 445465.004 ops/s
Iteration  11: 441739.452 ops/s
Iteration  12: 446361.093 ops/s
Iteration  13: 443680.211 ops/s
Iteration  14: 444637.503 ops/s
Iteration  15: 445703.919 ops/s
Iteration  16: 440594.749 ops/s
Iteration  17: 443078.437 ops/s
Iteration  18: 443657.322 ops/s
Iteration  19: 446753.603 ops/s
Iteration  20: 439246.605 ops/s
Iteration  21: 442224.083 ops/s
Iteration  22: 443185.400 ops/s
Iteration  23: 445218.487 ops/s
Iteration  24: 444519.780 ops/s
Iteration  25: 442973.416 ops/s
Iteration  26: 444211.349 ops/s
Iteration  27: 444387.539 ops/s
Iteration  28: 446274.063 ops/s
Iteration  29: 445813.519 ops/s
Iteration  30: 448325.744 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByFloat":
  444070.158 ±(99.9%) 1529.244 ops/s [Average]
  (min, avg, max) = (437193.866, 444070.158, 448325.744), stdev = 2288.901
  CI (99.9%): [442540.913, 445599.402] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThisByFloat  thrpt   30  444070.158 ± 1529.244  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 714442.656 ops/s
# Warmup Iteration   2: 763904.399 ops/s
# Warmup Iteration   3: 763216.836 ops/s
# Warmup Iteration   4: 810279.502 ops/s
# Warmup Iteration   5: 889725.897 ops/s
# Warmup Iteration   6: 889445.923 ops/s
# Warmup Iteration   7: 886199.114 ops/s
# Warmup Iteration   8: 880162.649 ops/s
# Warmup Iteration   9: 872564.295 ops/s
# Warmup Iteration  10: 875343.414 ops/s
# Warmup Iteration  11: 887980.914 ops/s
# Warmup Iteration  12: 888386.795 ops/s
# Warmup Iteration  13: 887252.759 ops/s
# Warmup Iteration  14: 894393.100 ops/s
# Warmup Iteration  15: 892212.524 ops/s
# Warmup Iteration  16: 885506.658 ops/s
# Warmup Iteration  17: 889406.667 ops/s
# Warmup Iteration  18: 889536.511 ops/s
# Warmup Iteration  19: 887987.067 ops/s
# Warmup Iteration  20: 895237.598 ops/s
# Warmup Iteration  21: 894708.749 ops/s
# Warmup Iteration  22: 871530.641 ops/s
# Warmup Iteration  23: 766236.947 ops/s
# Warmup Iteration  24: 894982.366 ops/s
# Warmup Iteration  25: 877685.585 ops/s
# Warmup Iteration  26: 893236.561 ops/s
# Warmup Iteration  27: 893173.242 ops/s
# Warmup Iteration  28: 890290.343 ops/s
# Warmup Iteration  29: 884534.210 ops/s
# Warmup Iteration  30: 897266.403 ops/s
Iteration   1: 881095.534 ops/s
Iteration   2: 890744.715 ops/s
Iteration   3: 888949.607 ops/s
Iteration   4: 891487.308 ops/s
Iteration   5: 891152.822 ops/s
Iteration   6: 895300.429 ops/s
Iteration   7: 895702.742 ops/s
Iteration   8: 889219.175 ops/s
Iteration   9: 893076.350 ops/s
Iteration  10: 892356.451 ops/s
Iteration  11: 892992.167 ops/s
Iteration  12: 888250.635 ops/s
Iteration  13: 895470.800 ops/s
Iteration  14: 894548.148 ops/s
Iteration  15: 890903.610 ops/s
Iteration  16: 896138.053 ops/s
Iteration  17: 890786.602 ops/s
Iteration  18: 888344.945 ops/s
Iteration  19: 887269.730 ops/s
Iteration  20: 892468.399 ops/s
Iteration  21: 893659.610 ops/s
Iteration  22: 894003.260 ops/s
Iteration  23: 880695.998 ops/s
Iteration  24: 894007.131 ops/s
Iteration  25: 888524.087 ops/s
Iteration  26: 884998.945 ops/s
Iteration  27: 889351.672 ops/s
Iteration  28: 890747.801 ops/s
Iteration  29: 877068.515 ops/s
Iteration  30: 884305.512 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByInt":
  890120.692 ±(99.9%) 3134.167 ops/s [Average]
  (min, avg, max) = (877068.515, 890120.692, 896138.053), stdev = 4691.075
  CI (99.9%): [886986.524, 893254.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThisByInt  thrpt   30  890120.692 ± 3134.167  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708449.162 ops/s
# Warmup Iteration   2: 746524.938 ops/s
# Warmup Iteration   3: 754985.814 ops/s
# Warmup Iteration   4: 764525.901 ops/s
# Warmup Iteration   5: 869521.772 ops/s
# Warmup Iteration   6: 869856.782 ops/s
# Warmup Iteration   7: 858361.686 ops/s
# Warmup Iteration   8: 860818.198 ops/s
# Warmup Iteration   9: 861568.047 ops/s
# Warmup Iteration  10: 857011.784 ops/s
# Warmup Iteration  11: 865537.250 ops/s
# Warmup Iteration  12: 868877.290 ops/s
# Warmup Iteration  13: 862409.545 ops/s
# Warmup Iteration  14: 862514.467 ops/s
# Warmup Iteration  15: 870447.230 ops/s
# Warmup Iteration  16: 868710.647 ops/s
# Warmup Iteration  17: 868961.126 ops/s
# Warmup Iteration  18: 871969.648 ops/s
# Warmup Iteration  19: 870914.793 ops/s
# Warmup Iteration  20: 873443.596 ops/s
# Warmup Iteration  21: 870809.096 ops/s
# Warmup Iteration  22: 869548.964 ops/s
# Warmup Iteration  23: 871760.090 ops/s
# Warmup Iteration  24: 840209.818 ops/s
# Warmup Iteration  25: 745822.311 ops/s
# Warmup Iteration  26: 866177.407 ops/s
# Warmup Iteration  27: 869389.469 ops/s
# Warmup Iteration  28: 873258.209 ops/s
# Warmup Iteration  29: 868347.799 ops/s
# Warmup Iteration  30: 871208.685 ops/s
Iteration   1: 872296.251 ops/s
Iteration   2: 867433.595 ops/s
Iteration   3: 858432.895 ops/s
Iteration   4: 872767.615 ops/s
Iteration   5: 874279.442 ops/s
Iteration   6: 874920.054 ops/s
Iteration   7: 868358.594 ops/s
Iteration   8: 871340.460 ops/s
Iteration   9: 869272.831 ops/s
Iteration  10: 870145.728 ops/s
Iteration  11: 868042.564 ops/s
Iteration  12: 866422.586 ops/s
Iteration  13: 871699.990 ops/s
Iteration  14: 866753.927 ops/s
Iteration  15: 870791.489 ops/s
Iteration  16: 870235.990 ops/s
Iteration  17: 869496.958 ops/s
Iteration  18: 865462.513 ops/s
Iteration  19: 871587.990 ops/s
Iteration  20: 867359.444 ops/s
Iteration  21: 869291.113 ops/s
Iteration  22: 868685.342 ops/s
Iteration  23: 872936.544 ops/s
Iteration  24: 869883.098 ops/s
Iteration  25: 870338.962 ops/s
Iteration  26: 869889.449 ops/s
Iteration  27: 857676.231 ops/s
Iteration  28: 864396.635 ops/s
Iteration  29: 869097.508 ops/s
Iteration  30: 852650.532 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByLong":
  868398.211 ±(99.9%) 3237.770 ops/s [Average]
  (min, avg, max) = (852650.532, 868398.211, 874920.054), stdev = 4846.142
  CI (99.9%): [865160.441, 871635.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThisByLong  thrpt   30  868398.211 ± 3237.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693398.058 ops/s
# Warmup Iteration   2: 743142.668 ops/s
# Warmup Iteration   3: 737426.977 ops/s
# Warmup Iteration   4: 780499.714 ops/s
# Warmup Iteration   5: 859173.953 ops/s
# Warmup Iteration   6: 865078.897 ops/s
# Warmup Iteration   7: 866862.892 ops/s
# Warmup Iteration   8: 869163.715 ops/s
# Warmup Iteration   9: 857962.022 ops/s
# Warmup Iteration  10: 866503.856 ops/s
# Warmup Iteration  11: 864287.154 ops/s
# Warmup Iteration  12: 868335.417 ops/s
# Warmup Iteration  13: 864770.667 ops/s
# Warmup Iteration  14: 870807.402 ops/s
# Warmup Iteration  15: 870438.127 ops/s
# Warmup Iteration  16: 870541.774 ops/s
# Warmup Iteration  17: 866999.771 ops/s
# Warmup Iteration  18: 871416.048 ops/s
# Warmup Iteration  19: 845417.977 ops/s
# Warmup Iteration  20: 863609.353 ops/s
# Warmup Iteration  21: 865049.657 ops/s
# Warmup Iteration  22: 863226.625 ops/s
# Warmup Iteration  23: 796045.493 ops/s
# Warmup Iteration  24: 796538.786 ops/s
# Warmup Iteration  25: 869177.429 ops/s
# Warmup Iteration  26: 869136.383 ops/s
# Warmup Iteration  27: 870327.314 ops/s
# Warmup Iteration  28: 866435.988 ops/s
# Warmup Iteration  29: 870684.769 ops/s
# Warmup Iteration  30: 860759.558 ops/s
Iteration   1: 869430.534 ops/s
Iteration   2: 871810.503 ops/s
Iteration   3: 865993.571 ops/s
Iteration   4: 869258.392 ops/s
Iteration   5: 868216.501 ops/s
Iteration   6: 869351.405 ops/s
Iteration   7: 869445.453 ops/s
Iteration   8: 865975.738 ops/s
Iteration   9: 862514.580 ops/s
Iteration  10: 861902.840 ops/s
Iteration  11: 854043.383 ops/s
Iteration  12: 854150.979 ops/s
Iteration  13: 866656.758 ops/s
Iteration  14: 855837.324 ops/s
Iteration  15: 868047.992 ops/s
Iteration  16: 873025.801 ops/s
Iteration  17: 868584.963 ops/s
Iteration  18: 868873.723 ops/s
Iteration  19: 870512.829 ops/s
Iteration  20: 871103.900 ops/s
Iteration  21: 865521.667 ops/s
Iteration  22: 870033.028 ops/s
Iteration  23: 862693.839 ops/s
Iteration  24: 861482.344 ops/s
Iteration  25: 866069.685 ops/s
Iteration  26: 870350.125 ops/s
Iteration  27: 863608.407 ops/s
Iteration  28: 869646.939 ops/s
Iteration  29: 868415.592 ops/s
Iteration  30: 866443.907 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisByShort":
  866300.090 ±(99.9%) 3292.285 ops/s [Average]
  (min, avg, max) = (854043.383, 866300.090, 873025.801), stdev = 4927.737
  CI (99.9%): [863007.806, 869592.375] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThisByShort  thrpt   30  866300.090 ± 3292.285  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisOnListWithLessThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisOnListWithLessThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 340625.257 ops/s
# Warmup Iteration   2: 728269.669 ops/s
# Warmup Iteration   3: 725918.934 ops/s
# Warmup Iteration   4: 664523.417 ops/s
# Warmup Iteration   5: 688398.586 ops/s
# Warmup Iteration   6: 733817.852 ops/s
# Warmup Iteration   7: 725923.820 ops/s
# Warmup Iteration   8: 733342.645 ops/s
# Warmup Iteration   9: 727959.649 ops/s
# Warmup Iteration  10: 726447.320 ops/s
# Warmup Iteration  11: 730396.351 ops/s
# Warmup Iteration  12: 729396.529 ops/s
# Warmup Iteration  13: 731345.328 ops/s
# Warmup Iteration  14: 736877.872 ops/s
# Warmup Iteration  15: 728143.016 ops/s
# Warmup Iteration  16: 737052.194 ops/s
# Warmup Iteration  17: 731378.952 ops/s
# Warmup Iteration  18: 739095.643 ops/s
# Warmup Iteration  19: 733831.594 ops/s
# Warmup Iteration  20: 737486.988 ops/s
# Warmup Iteration  21: 735761.455 ops/s
# Warmup Iteration  22: 734580.453 ops/s
# Warmup Iteration  23: 737548.231 ops/s
# Warmup Iteration  24: 736432.420 ops/s
# Warmup Iteration  25: 728874.395 ops/s
# Warmup Iteration  26: 732323.911 ops/s
# Warmup Iteration  27: 733886.130 ops/s
# Warmup Iteration  28: 729561.234 ops/s
# Warmup Iteration  29: 733448.045 ops/s
# Warmup Iteration  30: 735520.123 ops/s
Iteration   1: 739431.166 ops/s
Iteration   2: 729447.002 ops/s
Iteration   3: 733213.048 ops/s
Iteration   4: 732797.337 ops/s
Iteration   5: 737037.131 ops/s
Iteration   6: 719127.373 ops/s
Iteration   7: 735969.324 ops/s
Iteration   8: 734040.018 ops/s
Iteration   9: 722968.912 ops/s
Iteration  10: 737540.988 ops/s
Iteration  11: 735964.845 ops/s
Iteration  12: 734980.578 ops/s
Iteration  13: 736764.230 ops/s
Iteration  14: 734839.788 ops/s
Iteration  15: 725614.304 ops/s
Iteration  16: 737107.730 ops/s
Iteration  17: 736568.177 ops/s
Iteration  18: 734263.053 ops/s
Iteration  19: 736167.410 ops/s
Iteration  20: 733451.156 ops/s
Iteration  21: 721956.408 ops/s
Iteration  22: 733621.089 ops/s
Iteration  23: 734596.403 ops/s
Iteration  24: 734525.181 ops/s
Iteration  25: 738170.845 ops/s
Iteration  26: 734325.209 ops/s
Iteration  27: 736220.830 ops/s
Iteration  28: 737382.114 ops/s
Iteration  29: 736063.012 ops/s
Iteration  30: 736267.662 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisOnListWithLessThan10Elements":
  733680.744 ±(99.9%) 3309.693 ops/s [Average]
  (min, avg, max) = (719127.373, 733680.744, 739431.166), stdev = 4953.792
  CI (99.9%): [730371.052, 736990.437] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThisOnListWithLessThan10Elements  thrpt   30  733680.744 ± 3309.693  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisOnListWithMoreThan9Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisOnListWithMoreThan9Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 373790.491 ops/s
# Warmup Iteration   2: 814382.192 ops/s
# Warmup Iteration   3: 817158.866 ops/s
# Warmup Iteration   4: 682165.945 ops/s
# Warmup Iteration   5: 808942.786 ops/s
# Warmup Iteration   6: 807019.422 ops/s
# Warmup Iteration   7: 812181.381 ops/s
# Warmup Iteration   8: 800685.390 ops/s
# Warmup Iteration   9: 815784.074 ops/s
# Warmup Iteration  10: 811562.722 ops/s
# Warmup Iteration  11: 816707.350 ops/s
# Warmup Iteration  12: 813838.359 ops/s
# Warmup Iteration  13: 807351.288 ops/s
# Warmup Iteration  14: 809558.912 ops/s
# Warmup Iteration  15: 815718.682 ops/s
# Warmup Iteration  16: 809416.482 ops/s
# Warmup Iteration  17: 817016.735 ops/s
# Warmup Iteration  18: 812255.664 ops/s
# Warmup Iteration  19: 809041.770 ops/s
# Warmup Iteration  20: 810644.743 ops/s
# Warmup Iteration  21: 812707.418 ops/s
# Warmup Iteration  22: 812427.478 ops/s
# Warmup Iteration  23: 815977.644 ops/s
# Warmup Iteration  24: 810542.104 ops/s
# Warmup Iteration  25: 818501.946 ops/s
# Warmup Iteration  26: 815510.409 ops/s
# Warmup Iteration  27: 808880.517 ops/s
# Warmup Iteration  28: 810479.346 ops/s
# Warmup Iteration  29: 811506.762 ops/s
# Warmup Iteration  30: 809998.779 ops/s
Iteration   1: 801236.346 ops/s
Iteration   2: 816334.730 ops/s
Iteration   3: 812395.126 ops/s
Iteration   4: 814471.411 ops/s
Iteration   5: 816457.086 ops/s
Iteration   6: 812481.219 ops/s
Iteration   7: 813863.375 ops/s
Iteration   8: 819456.164 ops/s
Iteration   9: 818633.832 ops/s
Iteration  10: 802054.492 ops/s
Iteration  11: 801202.651 ops/s
Iteration  12: 812584.843 ops/s
Iteration  13: 815967.960 ops/s
Iteration  14: 818968.623 ops/s
Iteration  15: 817402.661 ops/s
Iteration  16: 810628.934 ops/s
Iteration  17: 803159.289 ops/s
Iteration  18: 816962.223 ops/s
Iteration  19: 806176.620 ops/s
Iteration  20: 819407.532 ops/s
Iteration  21: 818712.364 ops/s
Iteration  22: 816026.319 ops/s
Iteration  23: 791683.580 ops/s
Iteration  24: 800625.345 ops/s
Iteration  25: 813358.740 ops/s
Iteration  26: 818481.219 ops/s
Iteration  27: 815353.651 ops/s
Iteration  28: 815930.771 ops/s
Iteration  29: 804937.366 ops/s
Iteration  30: 811186.893 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisOnListWithMoreThan9Elements":
  811871.379 ±(99.9%) 4790.376 ops/s [Average]
  (min, avg, max) = (791683.580, 811871.379, 819456.164), stdev = 7170.010
  CI (99.9%): [807081.003, 816661.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThisOnListWithMoreThan9Elements  thrpt   30  811871.379 ± 4790.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3491482.114 ops/s
# Warmup Iteration   2: 6276940.992 ops/s
# Warmup Iteration   3: 6918155.608 ops/s
# Warmup Iteration   4: 6926099.885 ops/s
# Warmup Iteration   5: 6227200.330 ops/s
# Warmup Iteration   6: 6374441.559 ops/s
# Warmup Iteration   7: 6762505.367 ops/s
# Warmup Iteration   8: 6864710.425 ops/s
# Warmup Iteration   9: 6870093.136 ops/s
# Warmup Iteration  10: 6845202.022 ops/s
# Warmup Iteration  11: 6842405.651 ops/s
# Warmup Iteration  12: 6766548.743 ops/s
# Warmup Iteration  13: 6865652.967 ops/s
# Warmup Iteration  14: 6843190.457 ops/s
# Warmup Iteration  15: 6797619.185 ops/s
# Warmup Iteration  16: 6851953.764 ops/s
# Warmup Iteration  17: 6854929.287 ops/s
# Warmup Iteration  18: 6852362.211 ops/s
# Warmup Iteration  19: 6853828.954 ops/s
# Warmup Iteration  20: 6857945.911 ops/s
# Warmup Iteration  21: 6853145.002 ops/s
# Warmup Iteration  22: 6858296.787 ops/s
# Warmup Iteration  23: 6869663.633 ops/s
# Warmup Iteration  24: 6863171.570 ops/s
# Warmup Iteration  25: 6756158.291 ops/s
# Warmup Iteration  26: 6852734.197 ops/s
# Warmup Iteration  27: 6861796.297 ops/s
# Warmup Iteration  28: 6848195.132 ops/s
# Warmup Iteration  29: 6767351.383 ops/s
# Warmup Iteration  30: 6847739.984 ops/s
Iteration   1: 6868467.096 ops/s
Iteration   2: 6819137.753 ops/s
Iteration   3: 6750888.765 ops/s
Iteration   4: 6828290.301 ops/s
Iteration   5: 6846471.792 ops/s
Iteration   6: 6788101.234 ops/s
Iteration   7: 6865062.695 ops/s
Iteration   8: 6842929.581 ops/s
Iteration   9: 6873270.263 ops/s
Iteration  10: 6863479.300 ops/s
Iteration  11: 6726864.075 ops/s
Iteration  12: 6895078.001 ops/s
Iteration  13: 6862447.852 ops/s
Iteration  14: 6827262.534 ops/s
Iteration  15: 6824094.461 ops/s
Iteration  16: 6860921.847 ops/s
Iteration  17: 6748619.800 ops/s
Iteration  18: 6744989.550 ops/s
Iteration  19: 6847919.525 ops/s
Iteration  20: 6882063.995 ops/s
Iteration  21: 6834140.693 ops/s
Iteration  22: 6855976.409 ops/s
Iteration  23: 6844480.080 ops/s
Iteration  24: 6851615.224 ops/s
Iteration  25: 6765966.763 ops/s
Iteration  26: 6861791.102 ops/s
Iteration  27: 6857602.396 ops/s
Iteration  28: 6799660.387 ops/s
Iteration  29: 6856729.446 ops/s
Iteration  30: 6817876.542 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparator":
  6830406.649 ±(99.9%) 29645.992 ops/s [Average]
  (min, avg, max) = (6726864.075, 6830406.649, 6895078.001), stdev = 44372.729
  CI (99.9%): [6800760.656, 6860052.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparator  thrpt   30  6830406.649 ± 29645.992  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2658031.144 ops/s
# Warmup Iteration   2: 3823379.881 ops/s
# Warmup Iteration   3: 4705456.315 ops/s
# Warmup Iteration   4: 4722732.974 ops/s
# Warmup Iteration   5: 4736705.325 ops/s
# Warmup Iteration   6: 4688588.504 ops/s
# Warmup Iteration   7: 3970393.758 ops/s
# Warmup Iteration   8: 4759439.616 ops/s
# Warmup Iteration   9: 4732525.406 ops/s
# Warmup Iteration  10: 4759718.368 ops/s
# Warmup Iteration  11: 4773426.741 ops/s
# Warmup Iteration  12: 4770082.050 ops/s
# Warmup Iteration  13: 4764946.251 ops/s
# Warmup Iteration  14: 4748396.119 ops/s
# Warmup Iteration  15: 4763142.364 ops/s
# Warmup Iteration  16: 4771744.561 ops/s
# Warmup Iteration  17: 4783272.999 ops/s
# Warmup Iteration  18: 4797373.561 ops/s
# Warmup Iteration  19: 4766757.185 ops/s
# Warmup Iteration  20: 4785487.083 ops/s
# Warmup Iteration  21: 4724294.385 ops/s
# Warmup Iteration  22: 4724632.165 ops/s
# Warmup Iteration  23: 4787990.020 ops/s
# Warmup Iteration  24: 4768769.009 ops/s
# Warmup Iteration  25: 4776961.299 ops/s
# Warmup Iteration  26: 4777090.600 ops/s
# Warmup Iteration  27: 4762554.863 ops/s
# Warmup Iteration  28: 4773941.206 ops/s
# Warmup Iteration  29: 4805560.759 ops/s
# Warmup Iteration  30: 4793882.855 ops/s
Iteration   1: 4805047.805 ops/s
Iteration   2: 4771894.288 ops/s
Iteration   3: 4762518.898 ops/s
Iteration   4: 4675746.295 ops/s
Iteration   5: 4791463.432 ops/s
Iteration   6: 4733552.733 ops/s
Iteration   7: 4789600.619 ops/s
Iteration   8: 4777645.930 ops/s
Iteration   9: 4788084.673 ops/s
Iteration  10: 4782580.370 ops/s
Iteration  11: 4688031.090 ops/s
Iteration  12: 4809897.771 ops/s
Iteration  13: 4781800.175 ops/s
Iteration  14: 4798027.260 ops/s
Iteration  15: 4779993.029 ops/s
Iteration  16: 4802484.747 ops/s
Iteration  17: 4765016.434 ops/s
Iteration  18: 4766445.388 ops/s
Iteration  19: 4768738.637 ops/s
Iteration  20: 4769828.901 ops/s
Iteration  21: 4764078.323 ops/s
Iteration  22: 4766446.262 ops/s
Iteration  23: 4706734.163 ops/s
Iteration  24: 4663112.136 ops/s
Iteration  25: 4794855.402 ops/s
Iteration  26: 4781716.899 ops/s
Iteration  27: 4790654.992 ops/s
Iteration  28: 4799101.667 ops/s
Iteration  29: 4775750.096 ops/s
Iteration  30: 4753533.748 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements":
  4766812.739 ±(99.9%) 25066.674 ops/s [Average]
  (min, avg, max) = (4663112.136, 4766812.739, 4809897.771), stdev = 37518.621
  CI (99.9%): [4741746.064, 4791879.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements  thrpt   30  4766812.739 ± 25066.674  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_large$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_large

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4783.852 ops/s
# Warmup Iteration   2: 5209.147 ops/s
# Warmup Iteration   3: 5244.840 ops/s
# Warmup Iteration   4: 5231.730 ops/s
# Warmup Iteration   5: 5314.938 ops/s
# Warmup Iteration   6: 5694.681 ops/s
# Warmup Iteration   7: 6016.751 ops/s
# Warmup Iteration   8: 6025.570 ops/s
# Warmup Iteration   9: 6006.720 ops/s
# Warmup Iteration  10: 6019.458 ops/s
# Warmup Iteration  11: 6032.162 ops/s
# Warmup Iteration  12: 5983.331 ops/s
# Warmup Iteration  13: 5997.529 ops/s
# Warmup Iteration  14: 5998.447 ops/s
# Warmup Iteration  15: 6037.974 ops/s
# Warmup Iteration  16: 6024.694 ops/s
# Warmup Iteration  17: 6022.536 ops/s
# Warmup Iteration  18: 5983.753 ops/s
# Warmup Iteration  19: 6005.920 ops/s
# Warmup Iteration  20: 6014.762 ops/s
# Warmup Iteration  21: 5994.451 ops/s
# Warmup Iteration  22: 6002.610 ops/s
# Warmup Iteration  23: 5976.027 ops/s
# Warmup Iteration  24: 6043.205 ops/s
# Warmup Iteration  25: 6009.187 ops/s
# Warmup Iteration  26: 5869.970 ops/s
# Warmup Iteration  27: 6024.018 ops/s
# Warmup Iteration  28: 5986.949 ops/s
# Warmup Iteration  29: 6020.607 ops/s
# Warmup Iteration  30: 6036.028 ops/s
Iteration   1: 5890.403 ops/s
Iteration   2: 6030.774 ops/s
Iteration   3: 6030.369 ops/s
Iteration   4: 5899.408 ops/s
Iteration   5: 5436.926 ops/s
Iteration   6: 5532.520 ops/s
Iteration   7: 5504.490 ops/s
Iteration   8: 6036.869 ops/s
Iteration   9: 6050.462 ops/s
Iteration  10: 5978.387 ops/s
Iteration  11: 6032.860 ops/s
Iteration  12: 6066.620 ops/s
Iteration  13: 6085.425 ops/s
Iteration  14: 6064.757 ops/s
Iteration  15: 6053.047 ops/s
Iteration  16: 6076.029 ops/s
Iteration  17: 6071.606 ops/s
Iteration  18: 6025.569 ops/s
Iteration  19: 6030.063 ops/s
Iteration  20: 6054.940 ops/s
Iteration  21: 6054.327 ops/s
Iteration  22: 6049.135 ops/s
Iteration  23: 6062.600 ops/s
Iteration  24: 5796.718 ops/s
Iteration  25: 6072.297 ops/s
Iteration  26: 5965.119 ops/s
Iteration  27: 6053.861 ops/s
Iteration  28: 6064.855 ops/s
Iteration  29: 6062.555 ops/s
Iteration  30: 6085.845 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_large":
  5973.961 ±(99.9%) 117.692 ops/s [Average]
  (min, avg, max) = (5436.926, 5973.961, 6085.845), stdev = 176.156
  CI (99.9%): [5856.269, 6091.654] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt     Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThis_large  thrpt   30  5973.961 ± 117.692  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_small$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_small

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2173140.000 ops/s
# Warmup Iteration   2: 2813084.957 ops/s
# Warmup Iteration   3: 3453026.219 ops/s
# Warmup Iteration   4: 3437527.319 ops/s
# Warmup Iteration   5: 3426479.483 ops/s
# Warmup Iteration   6: 3442462.187 ops/s
# Warmup Iteration   7: 3426023.098 ops/s
# Warmup Iteration   8: 3051424.981 ops/s
# Warmup Iteration   9: 3313527.718 ops/s
# Warmup Iteration  10: 3435942.098 ops/s
# Warmup Iteration  11: 3449938.600 ops/s
# Warmup Iteration  12: 3416578.580 ops/s
# Warmup Iteration  13: 3449945.330 ops/s
# Warmup Iteration  14: 3435875.883 ops/s
# Warmup Iteration  15: 3450490.699 ops/s
# Warmup Iteration  16: 3447846.988 ops/s
# Warmup Iteration  17: 3469753.544 ops/s
# Warmup Iteration  18: 3458909.877 ops/s
# Warmup Iteration  19: 3464867.377 ops/s
# Warmup Iteration  20: 3463621.166 ops/s
# Warmup Iteration  21: 3456920.495 ops/s
# Warmup Iteration  22: 3465635.733 ops/s
# Warmup Iteration  23: 3437426.425 ops/s
# Warmup Iteration  24: 3438071.427 ops/s
# Warmup Iteration  25: 3432578.068 ops/s
# Warmup Iteration  26: 3463340.239 ops/s
# Warmup Iteration  27: 3438632.949 ops/s
# Warmup Iteration  28: 3457699.863 ops/s
# Warmup Iteration  29: 3458879.817 ops/s
# Warmup Iteration  30: 3465146.596 ops/s
Iteration   1: 3449954.274 ops/s
Iteration   2: 3464191.073 ops/s
Iteration   3: 3462340.988 ops/s
Iteration   4: 3427611.337 ops/s
Iteration   5: 3460178.150 ops/s
Iteration   6: 3391374.862 ops/s
Iteration   7: 3437176.251 ops/s
Iteration   8: 3420901.563 ops/s
Iteration   9: 3417669.920 ops/s
Iteration  10: 3465903.863 ops/s
Iteration  11: 3404730.614 ops/s
Iteration  12: 3405863.014 ops/s
Iteration  13: 3468718.555 ops/s
Iteration  14: 3411344.400 ops/s
Iteration  15: 3481710.768 ops/s
Iteration  16: 3467340.092 ops/s
Iteration  17: 3460095.434 ops/s
Iteration  18: 3477534.475 ops/s
Iteration  19: 3462256.877 ops/s
Iteration  20: 3458149.509 ops/s
Iteration  21: 3472641.199 ops/s
Iteration  22: 3456494.976 ops/s
Iteration  23: 3445425.300 ops/s
Iteration  24: 3443364.645 ops/s
Iteration  25: 3458849.358 ops/s
Iteration  26: 3463043.811 ops/s
Iteration  27: 3454882.909 ops/s
Iteration  28: 3449417.027 ops/s
Iteration  29: 3482761.031 ops/s
Iteration  30: 3475105.262 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_small":
  3449901.051 ±(99.9%) 16424.239 ops/s [Average]
  (min, avg, max) = (3391374.862, 3449901.051, 3482761.031), stdev = 24583.029
  CI (99.9%): [3433476.812, 3466325.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThis_small  thrpt   30  3449901.051 ± 16424.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 953902.180 ops/s
# Warmup Iteration   2: 1009803.199 ops/s
# Warmup Iteration   3: 1019323.402 ops/s
# Warmup Iteration   4: 1220205.373 ops/s
# Warmup Iteration   5: 1223434.609 ops/s
# Warmup Iteration   6: 1223098.922 ops/s
# Warmup Iteration   7: 1234470.265 ops/s
# Warmup Iteration   8: 1219517.659 ops/s
# Warmup Iteration   9: 1236582.686 ops/s
# Warmup Iteration  10: 1233127.088 ops/s
# Warmup Iteration  11: 1233339.494 ops/s
# Warmup Iteration  12: 1235920.933 ops/s
# Warmup Iteration  13: 1221517.046 ops/s
# Warmup Iteration  14: 1238658.352 ops/s
# Warmup Iteration  15: 1235264.731 ops/s
# Warmup Iteration  16: 1234888.043 ops/s
# Warmup Iteration  17: 1230622.131 ops/s
# Warmup Iteration  18: 1165136.033 ops/s
# Warmup Iteration  19: 1095914.959 ops/s
# Warmup Iteration  20: 1233454.842 ops/s
# Warmup Iteration  21: 1233516.336 ops/s
# Warmup Iteration  22: 1228027.067 ops/s
# Warmup Iteration  23: 1226833.609 ops/s
# Warmup Iteration  24: 1233963.887 ops/s
# Warmup Iteration  25: 1232451.014 ops/s
# Warmup Iteration  26: 1227446.009 ops/s
# Warmup Iteration  27: 1235548.556 ops/s
# Warmup Iteration  28: 1232168.659 ops/s
# Warmup Iteration  29: 1237209.713 ops/s
# Warmup Iteration  30: 1233097.326 ops/s
Iteration   1: 1240448.683 ops/s
Iteration   2: 1234142.251 ops/s
Iteration   3: 1208037.769 ops/s
Iteration   4: 1236211.340 ops/s
Iteration   5: 1239777.057 ops/s
Iteration   6: 1240293.814 ops/s
Iteration   7: 1235830.522 ops/s
Iteration   8: 1231352.021 ops/s
Iteration   9: 1215432.804 ops/s
Iteration  10: 1228975.363 ops/s
Iteration  11: 1237667.780 ops/s
Iteration  12: 1234752.311 ops/s
Iteration  13: 1215955.028 ops/s
Iteration  14: 1235464.808 ops/s
Iteration  15: 1241447.313 ops/s
Iteration  16: 1236012.709 ops/s
Iteration  17: 1223333.462 ops/s
Iteration  18: 1237153.417 ops/s
Iteration  19: 1223349.722 ops/s
Iteration  20: 1233443.634 ops/s
Iteration  21: 1232830.264 ops/s
Iteration  22: 1243207.363 ops/s
Iteration  23: 1237963.548 ops/s
Iteration  24: 1233027.370 ops/s
Iteration  25: 1226999.876 ops/s
Iteration  26: 1239529.645 ops/s
Iteration  27: 1236650.884 ops/s
Iteration  28: 1234023.183 ops/s
Iteration  29: 1234171.741 ops/s
Iteration  30: 1233455.157 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_comparator":
  1232698.028 ±(99.9%) 5480.695 ops/s [Average]
  (min, avg, max) = (1208037.769, 1232698.028, 1243207.363), stdev = 8203.246
  CI (99.9%): [1227217.333, 1238178.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_comparator  thrpt   30  1232698.028 ± 5480.695  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_comparator_large$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_comparator_large

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4541.617 ops/s
# Warmup Iteration   2: 5126.527 ops/s
# Warmup Iteration   3: 5120.461 ops/s
# Warmup Iteration   4: 5120.045 ops/s
# Warmup Iteration   5: 5121.543 ops/s
# Warmup Iteration   6: 5413.267 ops/s
# Warmup Iteration   7: 5920.774 ops/s
# Warmup Iteration   8: 5881.773 ops/s
# Warmup Iteration   9: 5918.924 ops/s
# Warmup Iteration  10: 5920.301 ops/s
# Warmup Iteration  11: 5871.218 ops/s
# Warmup Iteration  12: 5957.311 ops/s
# Warmup Iteration  13: 5966.233 ops/s
# Warmup Iteration  14: 5887.239 ops/s
# Warmup Iteration  15: 5918.372 ops/s
# Warmup Iteration  16: 5895.130 ops/s
# Warmup Iteration  17: 5880.023 ops/s
# Warmup Iteration  18: 5948.415 ops/s
# Warmup Iteration  19: 5921.222 ops/s
# Warmup Iteration  20: 5915.955 ops/s
# Warmup Iteration  21: 5925.654 ops/s
# Warmup Iteration  22: 5924.466 ops/s
# Warmup Iteration  23: 5944.313 ops/s
# Warmup Iteration  24: 5914.029 ops/s
# Warmup Iteration  25: 5941.554 ops/s
# Warmup Iteration  26: 5887.483 ops/s
# Warmup Iteration  27: 5928.041 ops/s
# Warmup Iteration  28: 5919.908 ops/s
# Warmup Iteration  29: 5927.975 ops/s
# Warmup Iteration  30: 5942.792 ops/s
Iteration   1: 5910.634 ops/s
Iteration   2: 5908.126 ops/s
Iteration   3: 5823.029 ops/s
Iteration   4: 5819.795 ops/s
Iteration   5: 5902.179 ops/s
Iteration   6: 5453.948 ops/s
Iteration   7: 5431.867 ops/s
Iteration   8: 5421.604 ops/s
Iteration   9: 5527.106 ops/s
Iteration  10: 5931.430 ops/s
Iteration  11: 5934.796 ops/s
Iteration  12: 5938.761 ops/s
Iteration  13: 5945.489 ops/s
Iteration  14: 5925.818 ops/s
Iteration  15: 5876.799 ops/s
Iteration  16: 5926.699 ops/s
Iteration  17: 5934.920 ops/s
Iteration  18: 5942.440 ops/s
Iteration  19: 5961.889 ops/s
Iteration  20: 5946.061 ops/s
Iteration  21: 5945.617 ops/s
Iteration  22: 5926.805 ops/s
Iteration  23: 5932.726 ops/s
Iteration  24: 5936.248 ops/s
Iteration  25: 5941.372 ops/s
Iteration  26: 5793.610 ops/s
Iteration  27: 5920.830 ops/s
Iteration  28: 5935.445 ops/s
Iteration  29: 5834.793 ops/s
Iteration  30: 5954.667 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_comparator_large":
  5852.850 ±(99.9%) 109.268 ops/s [Average]
  (min, avg, max) = (5421.604, 5852.850, 5961.889), stdev = 163.547
  CI (99.9%): [5743.583, 5962.118] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt     Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_comparator_large  thrpt   30  5852.850 ± 109.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_comparator_small$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_comparator_small

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2147350.260 ops/s
# Warmup Iteration   2: 2941973.163 ops/s
# Warmup Iteration   3: 3604831.121 ops/s
# Warmup Iteration   4: 3587802.784 ops/s
# Warmup Iteration   5: 3552177.083 ops/s
# Warmup Iteration   6: 3566321.970 ops/s
# Warmup Iteration   7: 3608001.121 ops/s
# Warmup Iteration   8: 3013713.856 ops/s
# Warmup Iteration   9: 3616426.743 ops/s
# Warmup Iteration  10: 3623109.820 ops/s
# Warmup Iteration  11: 3619452.393 ops/s
# Warmup Iteration  12: 3624634.182 ops/s
# Warmup Iteration  13: 3622066.601 ops/s
# Warmup Iteration  14: 3618868.902 ops/s
# Warmup Iteration  15: 3618634.959 ops/s
# Warmup Iteration  16: 3611046.313 ops/s
# Warmup Iteration  17: 3637855.889 ops/s
# Warmup Iteration  18: 3650131.449 ops/s
# Warmup Iteration  19: 3646876.678 ops/s
# Warmup Iteration  20: 3637610.870 ops/s
# Warmup Iteration  21: 3640139.747 ops/s
# Warmup Iteration  22: 3604244.880 ops/s
# Warmup Iteration  23: 3644381.602 ops/s
# Warmup Iteration  24: 3626901.180 ops/s
# Warmup Iteration  25: 3626319.734 ops/s
# Warmup Iteration  26: 3647436.027 ops/s
# Warmup Iteration  27: 3640872.409 ops/s
# Warmup Iteration  28: 3613054.660 ops/s
# Warmup Iteration  29: 3610112.176 ops/s
# Warmup Iteration  30: 3645220.988 ops/s
Iteration   1: 3647992.201 ops/s
Iteration   2: 3646390.104 ops/s
Iteration   3: 3575127.253 ops/s
Iteration   4: 3581234.527 ops/s
Iteration   5: 3568027.398 ops/s
Iteration   6: 3658900.665 ops/s
Iteration   7: 3627134.152 ops/s
Iteration   8: 3642402.184 ops/s
Iteration   9: 3653881.711 ops/s
Iteration  10: 3635554.686 ops/s
Iteration  11: 3650369.379 ops/s
Iteration  12: 3647088.512 ops/s
Iteration  13: 3652505.865 ops/s
Iteration  14: 3639088.327 ops/s
Iteration  15: 3639148.229 ops/s
Iteration  16: 3649323.416 ops/s
Iteration  17: 3626505.909 ops/s
Iteration  18: 3648322.846 ops/s
Iteration  19: 3629454.774 ops/s
Iteration  20: 3628809.597 ops/s
Iteration  21: 3639832.602 ops/s
Iteration  22: 3636996.621 ops/s
Iteration  23: 3620147.681 ops/s
Iteration  24: 3651329.054 ops/s
Iteration  25: 3640339.601 ops/s
Iteration  26: 3643146.665 ops/s
Iteration  27: 3653557.054 ops/s
Iteration  28: 3637475.155 ops/s
Iteration  29: 3637614.885 ops/s
Iteration  30: 3627696.434 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_comparator_small":
  3634513.250 ±(99.9%) 14972.229 ops/s [Average]
  (min, avg, max) = (3568027.398, 3634513.250, 3658900.665), stdev = 22409.730
  CI (99.9%): [3619541.020, 3649485.479] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_comparator_small  thrpt   30  3634513.250 ± 14972.229  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1478155.415 ops/s
# Warmup Iteration   2: 3435581.628 ops/s
# Warmup Iteration   3: 3412440.206 ops/s
# Warmup Iteration   4: 2889157.800 ops/s
# Warmup Iteration   5: 3460560.448 ops/s
# Warmup Iteration   6: 3440378.698 ops/s
# Warmup Iteration   7: 3456481.336 ops/s
# Warmup Iteration   8: 3432942.645 ops/s
# Warmup Iteration   9: 3436457.069 ops/s
# Warmup Iteration  10: 3454591.236 ops/s
# Warmup Iteration  11: 3423104.179 ops/s
# Warmup Iteration  12: 3452013.062 ops/s
# Warmup Iteration  13: 3453500.197 ops/s
# Warmup Iteration  14: 3444950.184 ops/s
# Warmup Iteration  15: 3439930.800 ops/s
# Warmup Iteration  16: 3444152.152 ops/s
# Warmup Iteration  17: 3405285.455 ops/s
# Warmup Iteration  18: 3448893.081 ops/s
# Warmup Iteration  19: 3450289.547 ops/s
# Warmup Iteration  20: 3456620.793 ops/s
# Warmup Iteration  21: 3478150.423 ops/s
# Warmup Iteration  22: 3419596.243 ops/s
# Warmup Iteration  23: 3467245.579 ops/s
# Warmup Iteration  24: 3463331.571 ops/s
# Warmup Iteration  25: 3447052.869 ops/s
# Warmup Iteration  26: 3450715.189 ops/s
# Warmup Iteration  27: 3463257.889 ops/s
# Warmup Iteration  28: 3477791.728 ops/s
# Warmup Iteration  29: 3476520.685 ops/s
# Warmup Iteration  30: 3442071.471 ops/s
Iteration   1: 3456898.739 ops/s
Iteration   2: 3473931.944 ops/s
Iteration   3: 3448662.488 ops/s
Iteration   4: 3464470.275 ops/s
Iteration   5: 3427341.577 ops/s
Iteration   6: 3474785.717 ops/s
Iteration   7: 3458476.643 ops/s
Iteration   8: 3452745.194 ops/s
Iteration   9: 3471645.093 ops/s
Iteration  10: 3439728.666 ops/s
Iteration  11: 3467404.812 ops/s
Iteration  12: 3474563.333 ops/s
Iteration  13: 3454667.604 ops/s
Iteration  14: 3466884.932 ops/s
Iteration  15: 3493170.072 ops/s
Iteration  16: 3459580.323 ops/s
Iteration  17: 3475941.046 ops/s
Iteration  18: 3403108.907 ops/s
Iteration  19: 3431924.076 ops/s
Iteration  20: 3465214.427 ops/s
Iteration  21: 3455284.235 ops/s
Iteration  22: 3388210.208 ops/s
Iteration  23: 3487903.867 ops/s
Iteration  24: 3462876.317 ops/s
Iteration  25: 3455679.520 ops/s
Iteration  26: 3484006.493 ops/s
Iteration  27: 3348708.525 ops/s
Iteration  28: 3445352.482 ops/s
Iteration  29: 3468615.995 ops/s
Iteration  30: 3477781.249 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_null":
  3454518.825 ±(99.9%) 20248.002 ops/s [Average]
  (min, avg, max) = (3348708.525, 3454518.825, 3493170.072), stdev = 30306.258
  CI (99.9%): [3434270.824, 3474766.827] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sortThis_with_null  thrpt   30  3454518.825 ± 20248.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24900.455 ops/s
# Warmup Iteration   2: 40698.031 ops/s
# Warmup Iteration   3: 53140.394 ops/s
# Warmup Iteration   4: 52812.834 ops/s
# Warmup Iteration   5: 53027.055 ops/s
# Warmup Iteration   6: 52778.356 ops/s
# Warmup Iteration   7: 52279.749 ops/s
# Warmup Iteration   8: 45129.854 ops/s
# Warmup Iteration   9: 52564.561 ops/s
# Warmup Iteration  10: 52674.221 ops/s
# Warmup Iteration  11: 52925.866 ops/s
# Warmup Iteration  12: 53077.465 ops/s
# Warmup Iteration  13: 53009.885 ops/s
# Warmup Iteration  14: 52514.688 ops/s
# Warmup Iteration  15: 52414.893 ops/s
# Warmup Iteration  16: 53049.105 ops/s
# Warmup Iteration  17: 52800.360 ops/s
# Warmup Iteration  18: 53161.266 ops/s
# Warmup Iteration  19: 53133.820 ops/s
# Warmup Iteration  20: 53031.434 ops/s
# Warmup Iteration  21: 53006.935 ops/s
# Warmup Iteration  22: 52650.384 ops/s
# Warmup Iteration  23: 53178.650 ops/s
# Warmup Iteration  24: 52907.477 ops/s
# Warmup Iteration  25: 52975.659 ops/s
# Warmup Iteration  26: 53081.178 ops/s
# Warmup Iteration  27: 52822.815 ops/s
# Warmup Iteration  28: 52296.761 ops/s
# Warmup Iteration  29: 53190.596 ops/s
# Warmup Iteration  30: 52674.454 ops/s
Iteration   1: 52922.187 ops/s
Iteration   2: 52881.605 ops/s
Iteration   3: 52787.144 ops/s
Iteration   4: 52327.929 ops/s
Iteration   5: 51936.558 ops/s
Iteration   6: 53287.076 ops/s
Iteration   7: 53455.433 ops/s
Iteration   8: 52249.769 ops/s
Iteration   9: 52519.738 ops/s
Iteration  10: 53113.946 ops/s
Iteration  11: 52964.822 ops/s
Iteration  12: 53284.682 ops/s
Iteration  13: 52946.540 ops/s
Iteration  14: 53005.412 ops/s
Iteration  15: 52350.263 ops/s
Iteration  16: 52507.457 ops/s
Iteration  17: 53004.612 ops/s
Iteration  18: 52232.148 ops/s
Iteration  19: 52641.316 ops/s
Iteration  20: 53015.303 ops/s
Iteration  21: 52603.284 ops/s
Iteration  22: 52640.536 ops/s
Iteration  23: 52503.949 ops/s
Iteration  24: 52634.936 ops/s
Iteration  25: 52836.597 ops/s
Iteration  26: 52564.896 ops/s
Iteration  27: 52771.161 ops/s
Iteration  28: 52871.838 ops/s
Iteration  29: 53072.470 ops/s
Iteration  30: 52399.407 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subList":
  52744.434 ±(99.9%) 234.415 ops/s [Average]
  (min, avg, max) = (51936.558, 52744.434, 53455.433), stdev = 350.861
  CI (99.9%): [52510.019, 52978.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt      Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_subList  thrpt   30  52744.434 ± 234.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListFromGreaterThanToException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListFromGreaterThanToException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 648407.803 ops/s
# Warmup Iteration   2: 702104.619 ops/s
# Warmup Iteration   3: 921323.545 ops/s
# Warmup Iteration   4: 931110.111 ops/s
# Warmup Iteration   5: 928356.342 ops/s
# Warmup Iteration   6: 931246.109 ops/s
# Warmup Iteration   7: 932276.353 ops/s
# Warmup Iteration   8: 921594.553 ops/s
# Warmup Iteration   9: 931732.496 ops/s
# Warmup Iteration  10: 900597.910 ops/s
# Warmup Iteration  11: 809277.668 ops/s
# Warmup Iteration  12: 930182.155 ops/s
# Warmup Iteration  13: 936827.741 ops/s
# Warmup Iteration  14: 937307.837 ops/s
# Warmup Iteration  15: 936904.222 ops/s
# Warmup Iteration  16: 926939.185 ops/s
# Warmup Iteration  17: 990150.754 ops/s
# Warmup Iteration  18: 978658.167 ops/s
# Warmup Iteration  19: 992367.344 ops/s
# Warmup Iteration  20: 992837.065 ops/s
# Warmup Iteration  21: 991234.333 ops/s
# Warmup Iteration  22: 990436.442 ops/s
# Warmup Iteration  23: 991071.142 ops/s
# Warmup Iteration  24: 990442.196 ops/s
# Warmup Iteration  25: 980597.053 ops/s
# Warmup Iteration  26: 990467.666 ops/s
# Warmup Iteration  27: 989724.989 ops/s
# Warmup Iteration  28: 985482.052 ops/s
# Warmup Iteration  29: 985993.970 ops/s
# Warmup Iteration  30: 990608.695 ops/s
Iteration   1: 989779.986 ops/s
Iteration   2: 983405.810 ops/s
Iteration   3: 986785.591 ops/s
Iteration   4: 976991.112 ops/s
Iteration   5: 987259.513 ops/s
Iteration   6: 989039.542 ops/s
Iteration   7: 991027.050 ops/s
Iteration   8: 990013.254 ops/s
Iteration   9: 990360.851 ops/s
Iteration  10: 991005.600 ops/s
Iteration  11: 990128.938 ops/s
Iteration  12: 985857.811 ops/s
Iteration  13: 987502.612 ops/s
Iteration  14: 976580.983 ops/s
Iteration  15: 969317.975 ops/s
Iteration  16: 991532.264 ops/s
Iteration  17: 990806.800 ops/s
Iteration  18: 973340.861 ops/s
Iteration  19: 978674.465 ops/s
Iteration  20: 974362.498 ops/s
Iteration  21: 988961.429 ops/s
Iteration  22: 974078.740 ops/s
Iteration  23: 986885.592 ops/s
Iteration  24: 984096.943 ops/s
Iteration  25: 983831.342 ops/s
Iteration  26: 983674.721 ops/s
Iteration  27: 991571.285 ops/s
Iteration  28: 985403.465 ops/s
Iteration  29: 975035.340 ops/s
Iteration  30: 982742.228 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListFromGreaterThanToException":
  984335.153 ±(99.9%) 4356.355 ops/s [Average]
  (min, avg, max) = (969317.975, 984335.153, 991571.285), stdev = 6520.387
  CI (99.9%): [979978.799, 988691.508] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_subListFromGreaterThanToException  thrpt   30  984335.153 ± 4356.355  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListFromOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListFromOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 654098.544 ops/s
# Warmup Iteration   2: 707782.649 ops/s
# Warmup Iteration   3: 936768.172 ops/s
# Warmup Iteration   4: 932295.458 ops/s
# Warmup Iteration   5: 933414.945 ops/s
# Warmup Iteration   6: 937407.702 ops/s
# Warmup Iteration   7: 939867.507 ops/s
# Warmup Iteration   8: 939225.526 ops/s
# Warmup Iteration   9: 937442.877 ops/s
# Warmup Iteration  10: 939405.130 ops/s
# Warmup Iteration  11: 786510.152 ops/s
# Warmup Iteration  12: 938491.159 ops/s
# Warmup Iteration  13: 923379.630 ops/s
# Warmup Iteration  14: 938312.041 ops/s
# Warmup Iteration  15: 934783.748 ops/s
# Warmup Iteration  16: 937536.335 ops/s
# Warmup Iteration  17: 991082.817 ops/s
# Warmup Iteration  18: 991916.696 ops/s
# Warmup Iteration  19: 995233.879 ops/s
# Warmup Iteration  20: 995763.598 ops/s
# Warmup Iteration  21: 1000060.477 ops/s
# Warmup Iteration  22: 988168.638 ops/s
# Warmup Iteration  23: 994030.577 ops/s
# Warmup Iteration  24: 996638.688 ops/s
# Warmup Iteration  25: 989852.409 ops/s
# Warmup Iteration  26: 988392.551 ops/s
# Warmup Iteration  27: 990219.028 ops/s
# Warmup Iteration  28: 988871.912 ops/s
# Warmup Iteration  29: 985182.245 ops/s
# Warmup Iteration  30: 988120.011 ops/s
Iteration   1: 990456.323 ops/s
Iteration   2: 1001345.099 ops/s
Iteration   3: 982428.113 ops/s
Iteration   4: 977755.418 ops/s
Iteration   5: 995693.268 ops/s
Iteration   6: 998435.133 ops/s
Iteration   7: 997430.420 ops/s
Iteration   8: 996212.432 ops/s
Iteration   9: 983210.333 ops/s
Iteration  10: 997008.345 ops/s
Iteration  11: 1000005.073 ops/s
Iteration  12: 997210.980 ops/s
Iteration  13: 996171.620 ops/s
Iteration  14: 974483.835 ops/s
Iteration  15: 1004771.291 ops/s
Iteration  16: 996546.781 ops/s
Iteration  17: 991394.328 ops/s
Iteration  18: 997831.626 ops/s
Iteration  19: 1001550.361 ops/s
Iteration  20: 997559.629 ops/s
Iteration  21: 992595.157 ops/s
Iteration  22: 990005.026 ops/s
Iteration  23: 997144.095 ops/s
Iteration  24: 998590.235 ops/s
Iteration  25: 994397.934 ops/s
Iteration  26: 998137.130 ops/s
Iteration  27: 994079.047 ops/s
Iteration  28: 993718.816 ops/s
Iteration  29: 995050.195 ops/s
Iteration  30: 991823.362 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListFromOutOfBoundsException":
  994101.380 ±(99.9%) 4552.333 ops/s [Average]
  (min, avg, max) = (974483.835, 994101.380, 1004771.291), stdev = 6813.718
  CI (99.9%): [989549.048, 998653.713] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_subListFromOutOfBoundsException  thrpt   30  994101.380 ± 4552.333  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListOfSubList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListOfSubList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 298123.979 ops/s
# Warmup Iteration   2: 527546.738 ops/s
# Warmup Iteration   3: 585426.429 ops/s
# Warmup Iteration   4: 592026.734 ops/s
# Warmup Iteration   5: 594854.794 ops/s
# Warmup Iteration   6: 499592.243 ops/s
# Warmup Iteration   7: 594872.879 ops/s
# Warmup Iteration   8: 594214.434 ops/s
# Warmup Iteration   9: 590724.110 ops/s
# Warmup Iteration  10: 598114.597 ops/s
# Warmup Iteration  11: 598032.438 ops/s
# Warmup Iteration  12: 591756.333 ops/s
# Warmup Iteration  13: 593296.749 ops/s
# Warmup Iteration  14: 594733.671 ops/s
# Warmup Iteration  15: 593005.446 ops/s
# Warmup Iteration  16: 593258.216 ops/s
# Warmup Iteration  17: 594228.318 ops/s
# Warmup Iteration  18: 594030.854 ops/s
# Warmup Iteration  19: 597052.644 ops/s
# Warmup Iteration  20: 596064.651 ops/s
# Warmup Iteration  21: 596071.414 ops/s
# Warmup Iteration  22: 590148.648 ops/s
# Warmup Iteration  23: 589239.785 ops/s
# Warmup Iteration  24: 594129.741 ops/s
# Warmup Iteration  25: 591821.062 ops/s
# Warmup Iteration  26: 593429.150 ops/s
# Warmup Iteration  27: 594722.903 ops/s
# Warmup Iteration  28: 596373.955 ops/s
# Warmup Iteration  29: 595993.193 ops/s
# Warmup Iteration  30: 588899.101 ops/s
Iteration   1: 594736.222 ops/s
Iteration   2: 595106.989 ops/s
Iteration   3: 595260.277 ops/s
Iteration   4: 594399.050 ops/s
Iteration   5: 596191.782 ops/s
Iteration   6: 593518.854 ops/s
Iteration   7: 596464.706 ops/s
Iteration   8: 593853.830 ops/s
Iteration   9: 593758.542 ops/s
Iteration  10: 594525.026 ops/s
Iteration  11: 596392.104 ops/s
Iteration  12: 595243.850 ops/s
Iteration  13: 595851.402 ops/s
Iteration  14: 598226.960 ops/s
Iteration  15: 595487.329 ops/s
Iteration  16: 595353.441 ops/s
Iteration  17: 593275.542 ops/s
Iteration  18: 596507.512 ops/s
Iteration  19: 598308.818 ops/s
Iteration  20: 592856.170 ops/s
Iteration  21: 600800.351 ops/s
Iteration  22: 586700.199 ops/s
Iteration  23: 597528.742 ops/s
Iteration  24: 596165.247 ops/s
Iteration  25: 595222.635 ops/s
Iteration  26: 594368.360 ops/s
Iteration  27: 599386.401 ops/s
Iteration  28: 589741.238 ops/s
Iteration  29: 594515.614 ops/s
Iteration  30: 591559.988 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListOfSubList":
  595043.573 ±(99.9%) 1811.851 ops/s [Average]
  (min, avg, max) = (586700.199, 595043.573, 600800.351), stdev = 2711.894
  CI (99.9%): [593231.722, 596855.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_subListOfSubList  thrpt   30  595043.573 ± 1811.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListSort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListSort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 540842.582 ops/s
# Warmup Iteration   2: 586740.961 ops/s
# Warmup Iteration   3: 777406.707 ops/s
# Warmup Iteration   4: 804133.759 ops/s
# Warmup Iteration   5: 797833.109 ops/s
# Warmup Iteration   6: 795155.753 ops/s
# Warmup Iteration   7: 806765.668 ops/s
# Warmup Iteration   8: 802727.456 ops/s
# Warmup Iteration   9: 804758.343 ops/s
# Warmup Iteration  10: 805633.636 ops/s
# Warmup Iteration  11: 806583.159 ops/s
# Warmup Iteration  12: 657365.774 ops/s
# Warmup Iteration  13: 812427.585 ops/s
# Warmup Iteration  14: 809291.818 ops/s
# Warmup Iteration  15: 808545.623 ops/s
# Warmup Iteration  16: 809245.012 ops/s
# Warmup Iteration  17: 809533.639 ops/s
# Warmup Iteration  18: 810706.251 ops/s
# Warmup Iteration  19: 811537.071 ops/s
# Warmup Iteration  20: 808184.425 ops/s
# Warmup Iteration  21: 811388.544 ops/s
# Warmup Iteration  22: 808355.668 ops/s
# Warmup Iteration  23: 811185.317 ops/s
# Warmup Iteration  24: 809904.819 ops/s
# Warmup Iteration  25: 808370.085 ops/s
# Warmup Iteration  26: 811217.838 ops/s
# Warmup Iteration  27: 810740.933 ops/s
# Warmup Iteration  28: 808848.591 ops/s
# Warmup Iteration  29: 813132.958 ops/s
# Warmup Iteration  30: 809411.442 ops/s
Iteration   1: 812264.067 ops/s
Iteration   2: 806652.204 ops/s
Iteration   3: 810861.022 ops/s
Iteration   4: 792124.664 ops/s
Iteration   5: 806457.481 ops/s
Iteration   6: 809958.657 ops/s
Iteration   7: 811608.376 ops/s
Iteration   8: 809311.293 ops/s
Iteration   9: 798868.387 ops/s
Iteration  10: 809863.826 ops/s
Iteration  11: 810668.754 ops/s
Iteration  12: 812462.336 ops/s
Iteration  13: 805821.591 ops/s
Iteration  14: 810058.892 ops/s
Iteration  15: 813658.884 ops/s
Iteration  16: 811673.549 ops/s
Iteration  17: 812585.031 ops/s
Iteration  18: 812546.048 ops/s
Iteration  19: 807746.037 ops/s
Iteration  20: 810576.763 ops/s
Iteration  21: 811266.105 ops/s
Iteration  22: 811260.568 ops/s
Iteration  23: 812944.175 ops/s
Iteration  24: 802976.910 ops/s
Iteration  25: 810910.676 ops/s
Iteration  26: 813485.241 ops/s
Iteration  27: 800539.937 ops/s
Iteration  28: 807883.655 ops/s
Iteration  29: 812946.264 ops/s
Iteration  30: 813475.247 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListSort":
  809115.221 ±(99.9%) 3283.143 ops/s [Average]
  (min, avg, max) = (792124.664, 809115.221, 813658.884), stdev = 4914.055
  CI (99.9%): [805832.078, 812398.365] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_subListSort  thrpt   30  809115.221 ± 3283.143  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListToGreaterThanSizeException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListToGreaterThanSizeException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 656190.170 ops/s
# Warmup Iteration   2: 699752.776 ops/s
# Warmup Iteration   3: 947077.868 ops/s
# Warmup Iteration   4: 946211.449 ops/s
# Warmup Iteration   5: 949003.927 ops/s
# Warmup Iteration   6: 946421.124 ops/s
# Warmup Iteration   7: 944506.516 ops/s
# Warmup Iteration   8: 927316.026 ops/s
# Warmup Iteration   9: 939047.527 ops/s
# Warmup Iteration  10: 952139.378 ops/s
# Warmup Iteration  11: 783196.828 ops/s
# Warmup Iteration  12: 948045.636 ops/s
# Warmup Iteration  13: 945622.117 ops/s
# Warmup Iteration  14: 945646.252 ops/s
# Warmup Iteration  15: 946257.952 ops/s
# Warmup Iteration  16: 936681.841 ops/s
# Warmup Iteration  17: 987307.046 ops/s
# Warmup Iteration  18: 987247.638 ops/s
# Warmup Iteration  19: 984648.917 ops/s
# Warmup Iteration  20: 985249.408 ops/s
# Warmup Iteration  21: 987555.688 ops/s
# Warmup Iteration  22: 988559.927 ops/s
# Warmup Iteration  23: 977184.029 ops/s
# Warmup Iteration  24: 965089.496 ops/s
# Warmup Iteration  25: 985032.792 ops/s
# Warmup Iteration  26: 986453.002 ops/s
# Warmup Iteration  27: 975965.028 ops/s
# Warmup Iteration  28: 987203.072 ops/s
# Warmup Iteration  29: 984522.831 ops/s
# Warmup Iteration  30: 974927.560 ops/s
Iteration   1: 985011.389 ops/s
Iteration   2: 984663.222 ops/s
Iteration   3: 980915.498 ops/s
Iteration   4: 987959.163 ops/s
Iteration   5: 984518.504 ops/s
Iteration   6: 986719.307 ops/s
Iteration   7: 982814.273 ops/s
Iteration   8: 982627.468 ops/s
Iteration   9: 984417.408 ops/s
Iteration  10: 991768.593 ops/s
Iteration  11: 986403.261 ops/s
Iteration  12: 980709.117 ops/s
Iteration  13: 977741.454 ops/s
Iteration  14: 981470.712 ops/s
Iteration  15: 976890.823 ops/s
Iteration  16: 986045.769 ops/s
Iteration  17: 985152.262 ops/s
Iteration  18: 990180.030 ops/s
Iteration  19: 986420.255 ops/s
Iteration  20: 984852.733 ops/s
Iteration  21: 973400.811 ops/s
Iteration  22: 983047.802 ops/s
Iteration  23: 984583.051 ops/s
Iteration  24: 986895.707 ops/s
Iteration  25: 972396.347 ops/s
Iteration  26: 985906.552 ops/s
Iteration  27: 978574.110 ops/s
Iteration  28: 986569.012 ops/s
Iteration  29: 970386.286 ops/s
Iteration  30: 989499.933 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_subListToGreaterThanSizeException":
  983284.695 ±(99.9%) 3414.980 ops/s [Average]
  (min, avg, max) = (970386.286, 983284.695, 991768.593), stdev = 5111.382
  CI (99.9%): [979869.715, 986699.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_subListToGreaterThanSizeException  thrpt   30  983284.695 ± 3414.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1359404.099 ops/s
# Warmup Iteration   2: 2397360.439 ops/s
# Warmup Iteration   3: 2685393.846 ops/s
# Warmup Iteration   4: 2692379.934 ops/s
# Warmup Iteration   5: 2696426.299 ops/s
# Warmup Iteration   6: 2226914.784 ops/s
# Warmup Iteration   7: 2691340.701 ops/s
# Warmup Iteration   8: 2686444.338 ops/s
# Warmup Iteration   9: 2704182.629 ops/s
# Warmup Iteration  10: 2705121.943 ops/s
# Warmup Iteration  11: 2703405.807 ops/s
# Warmup Iteration  12: 2697196.596 ops/s
# Warmup Iteration  13: 2700872.702 ops/s
# Warmup Iteration  14: 2703291.499 ops/s
# Warmup Iteration  15: 2689235.781 ops/s
# Warmup Iteration  16: 2681407.061 ops/s
# Warmup Iteration  17: 2702194.749 ops/s
# Warmup Iteration  18: 2704209.618 ops/s
# Warmup Iteration  19: 2708607.956 ops/s
# Warmup Iteration  20: 2697832.761 ops/s
# Warmup Iteration  21: 2698390.445 ops/s
# Warmup Iteration  22: 2702944.051 ops/s
# Warmup Iteration  23: 2680842.841 ops/s
# Warmup Iteration  24: 2703771.159 ops/s
# Warmup Iteration  25: 2682460.260 ops/s
# Warmup Iteration  26: 2701854.637 ops/s
# Warmup Iteration  27: 2698326.014 ops/s
# Warmup Iteration  28: 2700242.310 ops/s
# Warmup Iteration  29: 2717858.308 ops/s
# Warmup Iteration  30: 2704388.725 ops/s
Iteration   1: 2702203.695 ops/s
Iteration   2: 2695187.231 ops/s
Iteration   3: 2701699.709 ops/s
Iteration   4: 2710544.082 ops/s
Iteration   5: 2641622.182 ops/s
Iteration   6: 2716062.548 ops/s
Iteration   7: 2710118.944 ops/s
Iteration   8: 2709093.474 ops/s
Iteration   9: 2720939.121 ops/s
Iteration  10: 2700008.442 ops/s
Iteration  11: 2666751.384 ops/s
Iteration  12: 2717424.271 ops/s
Iteration  13: 2711772.313 ops/s
Iteration  14: 2712069.257 ops/s
Iteration  15: 2708899.068 ops/s
Iteration  16: 2716859.635 ops/s
Iteration  17: 2711402.332 ops/s
Iteration  18: 2708122.441 ops/s
Iteration  19: 2718529.414 ops/s
Iteration  20: 2702099.122 ops/s
Iteration  21: 2704976.639 ops/s
Iteration  22: 2695232.129 ops/s
Iteration  23: 2720146.217 ops/s
Iteration  24: 2700663.665 ops/s
Iteration  25: 2695379.168 ops/s
Iteration  26: 2713767.806 ops/s
Iteration  27: 2708980.306 ops/s
Iteration  28: 2700832.890 ops/s
Iteration  29: 2701772.015 ops/s
Iteration  30: 2706305.467 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByDouble":
  2704315.499 ±(99.9%) 10572.781 ops/s [Average]
  (min, avg, max) = (2641622.182, 2704315.499, 2720939.121), stdev = 15824.841
  CI (99.9%): [2693742.718, 2714888.279] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sumByDouble  thrpt   30  2704315.499 ± 10572.781  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 57.935 ops/s
# Warmup Iteration   2: 65.113 ops/s
# Warmup Iteration   3: 90.152 ops/s
# Warmup Iteration   4: 91.787 ops/s
# Warmup Iteration   5: 88.547 ops/s
# Warmup Iteration   6: 92.571 ops/s
# Warmup Iteration   7: 94.082 ops/s
# Warmup Iteration   8: 94.456 ops/s
# Warmup Iteration   9: 91.548 ops/s
# Warmup Iteration  10: 91.008 ops/s
# Warmup Iteration  11: 74.865 ops/s
# Warmup Iteration  12: 93.753 ops/s
# Warmup Iteration  13: 91.593 ops/s
# Warmup Iteration  14: 92.577 ops/s
# Warmup Iteration  15: 91.607 ops/s
# Warmup Iteration  16: 92.475 ops/s
# Warmup Iteration  17: 94.052 ops/s
# Warmup Iteration  18: 92.656 ops/s
# Warmup Iteration  19: 90.693 ops/s
# Warmup Iteration  20: 90.223 ops/s
# Warmup Iteration  21: 90.797 ops/s
# Warmup Iteration  22: 93.420 ops/s
# Warmup Iteration  23: 90.475 ops/s
# Warmup Iteration  24: 92.484 ops/s
# Warmup Iteration  25: 92.803 ops/s
# Warmup Iteration  26: 92.559 ops/s
# Warmup Iteration  27: 91.442 ops/s
# Warmup Iteration  28: 93.316 ops/s
# Warmup Iteration  29: 91.023 ops/s
# Warmup Iteration  30: 91.156 ops/s
Iteration   1: 87.217 ops/s
Iteration   2: 92.711 ops/s
Iteration   3: 91.979 ops/s
Iteration   4: 91.460 ops/s
Iteration   5: 92.713 ops/s
Iteration   6: 89.670 ops/s
Iteration   7: 85.841 ops/s
Iteration   8: 86.236 ops/s
Iteration   9: 90.724 ops/s
Iteration  10: 91.266 ops/s
Iteration  11: 90.409 ops/s
Iteration  12: 86.464 ops/s
Iteration  13: 89.668 ops/s
Iteration  14: 89.723 ops/s
Iteration  15: 91.847 ops/s
Iteration  16: 94.169 ops/s
Iteration  17: 87.151 ops/s
Iteration  18: 92.774 ops/s
Iteration  19: 91.005 ops/s
Iteration  20: 92.788 ops/s
Iteration  21: 90.492 ops/s
Iteration  22: 93.800 ops/s
Iteration  23: 92.608 ops/s
Iteration  24: 92.489 ops/s
Iteration  25: 91.206 ops/s
Iteration  26: 89.759 ops/s
Iteration  27: 88.956 ops/s
Iteration  28: 88.910 ops/s
Iteration  29: 89.889 ops/s
Iteration  30: 91.442 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  90.512 ±(99.9%) 1.500 ops/s [Average]
  (min, avg, max) = (85.841, 90.512, 94.169), stdev = 2.245
  CI (99.9%): [89.012, 92.012] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt   Score   Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  90.512 ± 1.500  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1365436.923 ops/s
# Warmup Iteration   2: 2433368.766 ops/s
# Warmup Iteration   3: 2644222.895 ops/s
# Warmup Iteration   4: 2700690.347 ops/s
# Warmup Iteration   5: 2693754.969 ops/s
# Warmup Iteration   6: 2211653.035 ops/s
# Warmup Iteration   7: 2699960.605 ops/s
# Warmup Iteration   8: 2706644.347 ops/s
# Warmup Iteration   9: 2686640.098 ops/s
# Warmup Iteration  10: 2712057.457 ops/s
# Warmup Iteration  11: 2703747.781 ops/s
# Warmup Iteration  12: 2699501.580 ops/s
# Warmup Iteration  13: 2685241.818 ops/s
# Warmup Iteration  14: 2690255.763 ops/s
# Warmup Iteration  15: 2702754.247 ops/s
# Warmup Iteration  16: 2700090.517 ops/s
# Warmup Iteration  17: 2694370.833 ops/s
# Warmup Iteration  18: 2702054.709 ops/s
# Warmup Iteration  19: 2683992.120 ops/s
# Warmup Iteration  20: 2698856.727 ops/s
# Warmup Iteration  21: 2672429.051 ops/s
# Warmup Iteration  22: 2706075.252 ops/s
# Warmup Iteration  23: 2712787.719 ops/s
# Warmup Iteration  24: 2696955.730 ops/s
# Warmup Iteration  25: 2676853.928 ops/s
# Warmup Iteration  26: 2705760.797 ops/s
# Warmup Iteration  27: 2699868.100 ops/s
# Warmup Iteration  28: 2681461.101 ops/s
# Warmup Iteration  29: 2705799.758 ops/s
# Warmup Iteration  30: 2700969.186 ops/s
Iteration   1: 2692897.129 ops/s
Iteration   2: 2703504.291 ops/s
Iteration   3: 2695205.859 ops/s
Iteration   4: 2695827.314 ops/s
Iteration   5: 2687353.896 ops/s
Iteration   6: 2712615.069 ops/s
Iteration   7: 2669807.512 ops/s
Iteration   8: 2710010.621 ops/s
Iteration   9: 2698278.010 ops/s
Iteration  10: 2689799.678 ops/s
Iteration  11: 2695700.407 ops/s
Iteration  12: 2708205.355 ops/s
Iteration  13: 2712497.599 ops/s
Iteration  14: 2680770.163 ops/s
Iteration  15: 2702332.145 ops/s
Iteration  16: 2711718.911 ops/s
Iteration  17: 2700336.228 ops/s
Iteration  18: 2695120.702 ops/s
Iteration  19: 2649673.292 ops/s
Iteration  20: 2686507.634 ops/s
Iteration  21: 2704226.811 ops/s
Iteration  22: 2698051.851 ops/s
Iteration  23: 2704162.363 ops/s
Iteration  24: 2650348.577 ops/s
Iteration  25: 2704266.270 ops/s
Iteration  26: 2710752.001 ops/s
Iteration  27: 2694829.527 ops/s
Iteration  28: 2669661.275 ops/s
Iteration  29: 2677754.821 ops/s
Iteration  30: 2706205.701 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByFloat":
  2693947.367 ±(99.9%) 11134.044 ops/s [Average]
  (min, avg, max) = (2649673.292, 2693947.367, 2712615.069), stdev = 16664.915
  CI (99.9%): [2682813.323, 2705081.411] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sumByFloat  thrpt   30  2693947.367 ± 11134.044  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 58.258 ops/s
# Warmup Iteration   2: 64.144 ops/s
# Warmup Iteration   3: 93.278 ops/s
# Warmup Iteration   4: 89.091 ops/s
# Warmup Iteration   5: 88.551 ops/s
# Warmup Iteration   6: 93.990 ops/s
# Warmup Iteration   7: 91.206 ops/s
# Warmup Iteration   8: 87.328 ops/s
# Warmup Iteration   9: 92.493 ops/s
# Warmup Iteration  10: 93.507 ops/s
# Warmup Iteration  11: 76.468 ops/s
# Warmup Iteration  12: 93.654 ops/s
# Warmup Iteration  13: 92.618 ops/s
# Warmup Iteration  14: 95.211 ops/s
# Warmup Iteration  15: 90.777 ops/s
# Warmup Iteration  16: 91.438 ops/s
# Warmup Iteration  17: 91.733 ops/s
# Warmup Iteration  18: 91.584 ops/s
# Warmup Iteration  19: 90.611 ops/s
# Warmup Iteration  20: 90.370 ops/s
# Warmup Iteration  21: 92.320 ops/s
# Warmup Iteration  22: 92.516 ops/s
# Warmup Iteration  23: 93.412 ops/s
# Warmup Iteration  24: 91.976 ops/s
# Warmup Iteration  25: 91.943 ops/s
# Warmup Iteration  26: 92.130 ops/s
# Warmup Iteration  27: 89.778 ops/s
# Warmup Iteration  28: 92.079 ops/s
# Warmup Iteration  29: 89.484 ops/s
# Warmup Iteration  30: 90.712 ops/s
Iteration   1: 91.754 ops/s
Iteration   2: 91.846 ops/s
Iteration   3: 86.808 ops/s
Iteration   4: 90.779 ops/s
Iteration   5: 92.380 ops/s
Iteration   6: 90.044 ops/s
Iteration   7: 92.436 ops/s
Iteration   8: 90.818 ops/s
Iteration   9: 88.402 ops/s
Iteration  10: 90.645 ops/s
Iteration  11: 88.881 ops/s
Iteration  12: 87.313 ops/s
Iteration  13: 89.961 ops/s
Iteration  14: 91.719 ops/s
Iteration  15: 92.776 ops/s
Iteration  16: 88.393 ops/s
Iteration  17: 86.708 ops/s
Iteration  18: 88.506 ops/s
Iteration  19: 90.962 ops/s
Iteration  20: 91.893 ops/s
Iteration  21: 92.417 ops/s
Iteration  22: 91.622 ops/s
Iteration  23: 91.091 ops/s
Iteration  24: 90.956 ops/s
Iteration  25: 91.054 ops/s
Iteration  26: 92.723 ops/s
Iteration  27: 90.210 ops/s
Iteration  28: 88.718 ops/s
Iteration  29: 93.000 ops/s
Iteration  30: 87.425 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  90.408 ±(99.9%) 1.261 ops/s [Average]
  (min, avg, max) = (86.708, 90.408, 93.000), stdev = 1.887
  CI (99.9%): [89.147, 91.669] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt   Score   Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  90.408 ± 1.261  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2190342.878 ops/s
# Warmup Iteration   2: 4714341.226 ops/s
# Warmup Iteration   3: 4840754.129 ops/s
# Warmup Iteration   4: 4716429.769 ops/s
# Warmup Iteration   5: 4230208.970 ops/s
# Warmup Iteration   6: 4888892.085 ops/s
# Warmup Iteration   7: 4863465.941 ops/s
# Warmup Iteration   8: 4882566.045 ops/s
# Warmup Iteration   9: 4880236.042 ops/s
# Warmup Iteration  10: 4883189.380 ops/s
# Warmup Iteration  11: 4802279.171 ops/s
# Warmup Iteration  12: 4885193.805 ops/s
# Warmup Iteration  13: 4899303.821 ops/s
# Warmup Iteration  14: 4890740.326 ops/s
# Warmup Iteration  15: 4876268.259 ops/s
# Warmup Iteration  16: 4886593.149 ops/s
# Warmup Iteration  17: 4904466.269 ops/s
# Warmup Iteration  18: 4910205.788 ops/s
# Warmup Iteration  19: 4844333.100 ops/s
# Warmup Iteration  20: 4872388.668 ops/s
# Warmup Iteration  21: 4878995.592 ops/s
# Warmup Iteration  22: 4886971.148 ops/s
# Warmup Iteration  23: 4840755.138 ops/s
# Warmup Iteration  24: 4887611.376 ops/s
# Warmup Iteration  25: 4900975.472 ops/s
# Warmup Iteration  26: 4886201.553 ops/s
# Warmup Iteration  27: 4842794.637 ops/s
# Warmup Iteration  28: 4884922.018 ops/s
# Warmup Iteration  29: 4894976.139 ops/s
# Warmup Iteration  30: 4877498.731 ops/s
Iteration   1: 4911081.068 ops/s
Iteration   2: 4892144.166 ops/s
Iteration   3: 4810822.202 ops/s
Iteration   4: 4867587.901 ops/s
Iteration   5: 4839101.238 ops/s
Iteration   6: 4903385.047 ops/s
Iteration   7: 4898600.541 ops/s
Iteration   8: 4893184.599 ops/s
Iteration   9: 4885029.305 ops/s
Iteration  10: 4745898.478 ops/s
Iteration  11: 4890969.418 ops/s
Iteration  12: 4896719.014 ops/s
Iteration  13: 4860993.930 ops/s
Iteration  14: 4820663.945 ops/s
Iteration  15: 4823413.240 ops/s
Iteration  16: 4889717.093 ops/s
Iteration  17: 4914499.373 ops/s
Iteration  18: 4837689.339 ops/s
Iteration  19: 4912062.185 ops/s
Iteration  20: 4887170.424 ops/s
Iteration  21: 4887896.090 ops/s
Iteration  22: 4883244.519 ops/s
Iteration  23: 4908086.217 ops/s
Iteration  24: 4874909.357 ops/s
Iteration  25: 4895737.834 ops/s
Iteration  26: 4897722.534 ops/s
Iteration  27: 4805154.903 ops/s
Iteration  28: 4917726.441 ops/s
Iteration  29: 4911040.138 ops/s
Iteration  30: 4874947.440 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByInt":
  4874573.266 ±(99.9%) 26902.233 ops/s [Average]
  (min, avg, max) = (4745898.478, 4874573.266, 4917726.441), stdev = 40265.999
  CI (99.9%): [4847671.033, 4901475.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sumByInt  thrpt   30  4874573.266 ± 26902.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2142857.185 ops/s
# Warmup Iteration   2: 4538682.765 ops/s
# Warmup Iteration   3: 4737862.389 ops/s
# Warmup Iteration   4: 4751353.745 ops/s
# Warmup Iteration   5: 3960004.166 ops/s
# Warmup Iteration   6: 4771930.377 ops/s
# Warmup Iteration   7: 4743673.359 ops/s
# Warmup Iteration   8: 4729266.095 ops/s
# Warmup Iteration   9: 4765771.380 ops/s
# Warmup Iteration  10: 4764554.112 ops/s
# Warmup Iteration  11: 4753300.850 ops/s
# Warmup Iteration  12: 4771694.298 ops/s
# Warmup Iteration  13: 4765433.976 ops/s
# Warmup Iteration  14: 4721160.383 ops/s
# Warmup Iteration  15: 4737528.518 ops/s
# Warmup Iteration  16: 4778091.214 ops/s
# Warmup Iteration  17: 4747902.488 ops/s
# Warmup Iteration  18: 4762693.836 ops/s
# Warmup Iteration  19: 4709288.776 ops/s
# Warmup Iteration  20: 4737062.460 ops/s
# Warmup Iteration  21: 4754313.946 ops/s
# Warmup Iteration  22: 4768268.984 ops/s
# Warmup Iteration  23: 4754876.961 ops/s
# Warmup Iteration  24: 4761656.634 ops/s
# Warmup Iteration  25: 4770125.809 ops/s
# Warmup Iteration  26: 4758790.054 ops/s
# Warmup Iteration  27: 4756486.998 ops/s
# Warmup Iteration  28: 4743470.296 ops/s
# Warmup Iteration  29: 4686622.143 ops/s
# Warmup Iteration  30: 4774053.302 ops/s
Iteration   1: 4760281.138 ops/s
Iteration   2: 4741654.342 ops/s
Iteration   3: 4775545.687 ops/s
Iteration   4: 4780467.598 ops/s
Iteration   5: 4686350.699 ops/s
Iteration   6: 4740246.170 ops/s
Iteration   7: 4751585.598 ops/s
Iteration   8: 4792095.764 ops/s
Iteration   9: 4763631.651 ops/s
Iteration  10: 4767036.717 ops/s
Iteration  11: 4763791.998 ops/s
Iteration  12: 4772454.619 ops/s
Iteration  13: 4767394.710 ops/s
Iteration  14: 4754082.096 ops/s
Iteration  15: 4768188.010 ops/s
Iteration  16: 4746989.450 ops/s
Iteration  17: 4770359.359 ops/s
Iteration  18: 4739434.568 ops/s
Iteration  19: 4722487.383 ops/s
Iteration  20: 4761541.254 ops/s
Iteration  21: 4788234.008 ops/s
Iteration  22: 4783341.432 ops/s
Iteration  23: 4764162.910 ops/s
Iteration  24: 4767467.644 ops/s
Iteration  25: 4756935.535 ops/s
Iteration  26: 4706551.740 ops/s
Iteration  27: 4753280.382 ops/s
Iteration  28: 4778674.702 ops/s
Iteration  29: 4769983.771 ops/s
Iteration  30: 4762708.037 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumByLong":
  4758565.299 ±(99.9%) 15261.056 ops/s [Average]
  (min, avg, max) = (4686350.699, 4758565.299, 4792095.764), stdev = 22842.032
  CI (99.9%): [4743304.243, 4773826.355] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sumByLong  thrpt   30  4758565.299 ± 15261.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4704948.174 ops/s
# Warmup Iteration   2: 9820746.435 ops/s
# Warmup Iteration   3: 9906033.129 ops/s
# Warmup Iteration   4: 8356324.590 ops/s
# Warmup Iteration   5: 9917117.263 ops/s
# Warmup Iteration   6: 9899933.488 ops/s
# Warmup Iteration   7: 9886071.295 ops/s
# Warmup Iteration   8: 9829173.396 ops/s
# Warmup Iteration   9: 9947896.311 ops/s
# Warmup Iteration  10: 9907759.881 ops/s
# Warmup Iteration  11: 9750582.070 ops/s
# Warmup Iteration  12: 9693081.735 ops/s
# Warmup Iteration  13: 9917743.279 ops/s
# Warmup Iteration  14: 9913161.710 ops/s
# Warmup Iteration  15: 9942889.629 ops/s
# Warmup Iteration  16: 9925350.087 ops/s
# Warmup Iteration  17: 9916523.613 ops/s
# Warmup Iteration  18: 9982857.439 ops/s
# Warmup Iteration  19: 9954733.699 ops/s
# Warmup Iteration  20: 9953596.741 ops/s
# Warmup Iteration  21: 9930245.814 ops/s
# Warmup Iteration  22: 9952602.248 ops/s
# Warmup Iteration  23: 9945112.642 ops/s
# Warmup Iteration  24: 9958578.909 ops/s
# Warmup Iteration  25: 9945104.905 ops/s
# Warmup Iteration  26: 9968302.654 ops/s
# Warmup Iteration  27: 9877905.845 ops/s
# Warmup Iteration  28: 9938280.808 ops/s
# Warmup Iteration  29: 9956444.554 ops/s
# Warmup Iteration  30: 9957859.330 ops/s
Iteration   1: 9935396.892 ops/s
Iteration   2: 9954020.000 ops/s
Iteration   3: 9989151.912 ops/s
Iteration   4: 9935347.746 ops/s
Iteration   5: 9983743.856 ops/s
Iteration   6: 9841995.574 ops/s
Iteration   7: 9926360.956 ops/s
Iteration   8: 9978937.083 ops/s
Iteration   9: 9957368.701 ops/s
Iteration  10: 9958581.722 ops/s
Iteration  11: 9898365.215 ops/s
Iteration  12: 9992810.784 ops/s
Iteration  13: 9969433.485 ops/s
Iteration  14: 9996340.368 ops/s
Iteration  15: 9967944.494 ops/s
Iteration  16: 9986531.422 ops/s
Iteration  17: 9962945.328 ops/s
Iteration  18: 9994558.501 ops/s
Iteration  19: 9941153.898 ops/s
Iteration  20: 9939947.534 ops/s
Iteration  21: 9807999.776 ops/s
Iteration  22: 9969226.623 ops/s
Iteration  23: 9991809.715 ops/s
Iteration  24: 9956491.894 ops/s
Iteration  25: 9954045.754 ops/s
Iteration  26: 9987513.491 ops/s
Iteration  27: 9960934.997 ops/s
Iteration  28: 9968668.510 ops/s
Iteration  29: 9947927.266 ops/s
Iteration  30: 9675809.762 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumDouble":
  9944378.775 ±(99.9%) 43998.628 ops/s [Average]
  (min, avg, max) = (9675809.762, 9944378.775, 9996340.368), stdev = 65855.081
  CI (99.9%): [9900380.147, 9988377.404] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sumDouble  thrpt   30  9944378.775 ± 43998.628  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 177.351 ops/s
# Warmup Iteration   2: 197.248 ops/s
# Warmup Iteration   3: 235.783 ops/s
# Warmup Iteration   4: 253.232 ops/s
# Warmup Iteration   5: 255.800 ops/s
# Warmup Iteration   6: 255.309 ops/s
# Warmup Iteration   7: 257.628 ops/s
# Warmup Iteration   8: 254.886 ops/s
# Warmup Iteration   9: 255.453 ops/s
# Warmup Iteration  10: 256.319 ops/s
# Warmup Iteration  11: 253.751 ops/s
# Warmup Iteration  12: 250.332 ops/s
# Warmup Iteration  13: 233.088 ops/s
# Warmup Iteration  14: 221.465 ops/s
# Warmup Iteration  15: 247.478 ops/s
# Warmup Iteration  16: 249.813 ops/s
# Warmup Iteration  17: 249.741 ops/s
# Warmup Iteration  18: 248.234 ops/s
# Warmup Iteration  19: 249.835 ops/s
# Warmup Iteration  20: 249.833 ops/s
# Warmup Iteration  21: 249.879 ops/s
# Warmup Iteration  22: 249.304 ops/s
# Warmup Iteration  23: 248.285 ops/s
# Warmup Iteration  24: 250.405 ops/s
# Warmup Iteration  25: 250.062 ops/s
# Warmup Iteration  26: 249.712 ops/s
# Warmup Iteration  27: 249.884 ops/s
# Warmup Iteration  28: 246.776 ops/s
# Warmup Iteration  29: 248.382 ops/s
# Warmup Iteration  30: 249.388 ops/s
Iteration   1: 250.312 ops/s
Iteration   2: 244.082 ops/s
Iteration   3: 248.860 ops/s
Iteration   4: 250.529 ops/s
Iteration   5: 245.775 ops/s
Iteration   6: 246.256 ops/s
Iteration   7: 250.158 ops/s
Iteration   8: 249.874 ops/s
Iteration   9: 250.042 ops/s
Iteration  10: 248.267 ops/s
Iteration  11: 250.113 ops/s
Iteration  12: 250.805 ops/s
Iteration  13: 249.681 ops/s
Iteration  14: 250.154 ops/s
Iteration  15: 250.396 ops/s
Iteration  16: 250.016 ops/s
Iteration  17: 250.895 ops/s
Iteration  18: 250.089 ops/s
Iteration  19: 249.193 ops/s
Iteration  20: 248.945 ops/s
Iteration  21: 249.607 ops/s
Iteration  22: 249.859 ops/s
Iteration  23: 250.509 ops/s
Iteration  24: 248.694 ops/s
Iteration  25: 249.096 ops/s
Iteration  26: 249.682 ops/s
Iteration  27: 249.913 ops/s
Iteration  28: 249.471 ops/s
Iteration  29: 250.281 ops/s
Iteration  30: 249.078 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  249.354 ±(99.9%) 1.015 ops/s [Average]
  (min, avg, max) = (244.082, 249.354, 250.895), stdev = 1.519
  CI (99.9%): [248.340, 250.369] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt    Score   Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  249.354 ± 1.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 210.314 ops/s
# Warmup Iteration   2: 241.077 ops/s
# Warmup Iteration   3: 324.768 ops/s
# Warmup Iteration   4: 324.497 ops/s
# Warmup Iteration   5: 318.887 ops/s
# Warmup Iteration   6: 323.517 ops/s
# Warmup Iteration   7: 325.707 ops/s
# Warmup Iteration   8: 323.681 ops/s
# Warmup Iteration   9: 320.385 ops/s
# Warmup Iteration  10: 302.432 ops/s
# Warmup Iteration  11: 251.989 ops/s
# Warmup Iteration  12: 299.471 ops/s
# Warmup Iteration  13: 302.192 ops/s
# Warmup Iteration  14: 303.092 ops/s
# Warmup Iteration  15: 301.297 ops/s
# Warmup Iteration  16: 302.101 ops/s
# Warmup Iteration  17: 303.236 ops/s
# Warmup Iteration  18: 302.590 ops/s
# Warmup Iteration  19: 302.183 ops/s
# Warmup Iteration  20: 299.469 ops/s
# Warmup Iteration  21: 303.796 ops/s
# Warmup Iteration  22: 300.630 ops/s
# Warmup Iteration  23: 300.361 ops/s
# Warmup Iteration  24: 302.668 ops/s
# Warmup Iteration  25: 301.991 ops/s
# Warmup Iteration  26: 301.002 ops/s
# Warmup Iteration  27: 303.774 ops/s
# Warmup Iteration  28: 303.943 ops/s
# Warmup Iteration  29: 303.121 ops/s
# Warmup Iteration  30: 302.228 ops/s
Iteration   1: 302.657 ops/s
Iteration   2: 303.775 ops/s
Iteration   3: 301.091 ops/s
Iteration   4: 301.329 ops/s
Iteration   5: 302.303 ops/s
Iteration   6: 302.939 ops/s
Iteration   7: 302.697 ops/s
Iteration   8: 303.077 ops/s
Iteration   9: 296.470 ops/s
Iteration  10: 302.532 ops/s
Iteration  11: 304.411 ops/s
Iteration  12: 297.731 ops/s
Iteration  13: 295.451 ops/s
Iteration  14: 300.793 ops/s
Iteration  15: 301.636 ops/s
Iteration  16: 301.179 ops/s
Iteration  17: 297.720 ops/s
Iteration  18: 302.006 ops/s
Iteration  19: 302.868 ops/s
Iteration  20: 303.228 ops/s
Iteration  21: 300.518 ops/s
Iteration  22: 301.738 ops/s
Iteration  23: 289.488 ops/s
Iteration  24: 296.698 ops/s
Iteration  25: 298.475 ops/s
Iteration  26: 302.467 ops/s
Iteration  27: 300.012 ops/s
Iteration  28: 302.176 ops/s
Iteration  29: 300.688 ops/s
Iteration  30: 298.800 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  300.565 ±(99.9%) 2.083 ops/s [Average]
  (min, avg, max) = (289.488, 300.565, 304.411), stdev = 3.118
  CI (99.9%): [298.482, 302.648] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt    Score   Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  300.565 ± 2.083  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4630252.390 ops/s
# Warmup Iteration   2: 9836140.489 ops/s
# Warmup Iteration   3: 9885807.626 ops/s
# Warmup Iteration   4: 8276766.008 ops/s
# Warmup Iteration   5: 9733517.244 ops/s
# Warmup Iteration   6: 9893045.778 ops/s
# Warmup Iteration   7: 9920576.568 ops/s
# Warmup Iteration   8: 9871936.217 ops/s
# Warmup Iteration   9: 9901096.839 ops/s
# Warmup Iteration  10: 9917509.865 ops/s
# Warmup Iteration  11: 9859155.106 ops/s
# Warmup Iteration  12: 9901415.666 ops/s
# Warmup Iteration  13: 9881136.248 ops/s
# Warmup Iteration  14: 9925883.077 ops/s
# Warmup Iteration  15: 9948796.670 ops/s
# Warmup Iteration  16: 9854265.556 ops/s
# Warmup Iteration  17: 9924301.784 ops/s
# Warmup Iteration  18: 9908778.801 ops/s
# Warmup Iteration  19: 9953589.008 ops/s
# Warmup Iteration  20: 9925073.379 ops/s
# Warmup Iteration  21: 9949139.289 ops/s
# Warmup Iteration  22: 9822172.296 ops/s
# Warmup Iteration  23: 9908831.478 ops/s
# Warmup Iteration  24: 9923615.517 ops/s
# Warmup Iteration  25: 9914074.779 ops/s
# Warmup Iteration  26: 9837137.336 ops/s
# Warmup Iteration  27: 9932790.928 ops/s
# Warmup Iteration  28: 9796234.969 ops/s
# Warmup Iteration  29: 9808149.549 ops/s
# Warmup Iteration  30: 9914510.901 ops/s
Iteration   1: 9920694.585 ops/s
Iteration   2: 9949937.896 ops/s
Iteration   3: 9875887.254 ops/s
Iteration   4: 9915754.643 ops/s
Iteration   5: 9763310.633 ops/s
Iteration   6: 9908503.690 ops/s
Iteration   7: 9963850.250 ops/s
Iteration   8: 9893057.696 ops/s
Iteration   9: 9959029.713 ops/s
Iteration  10: 9903232.682 ops/s
Iteration  11: 9925981.581 ops/s
Iteration  12: 9935289.842 ops/s
Iteration  13: 9952623.602 ops/s
Iteration  14: 9912246.228 ops/s
Iteration  15: 9807642.273 ops/s
Iteration  16: 9944676.319 ops/s
Iteration  17: 9724956.875 ops/s
Iteration  18: 9943978.022 ops/s
Iteration  19: 9963710.857 ops/s
Iteration  20: 9957153.883 ops/s
Iteration  21: 9649212.832 ops/s
Iteration  22: 9932541.655 ops/s
Iteration  23: 9936360.894 ops/s
Iteration  24: 9952401.956 ops/s
Iteration  25: 9928839.812 ops/s
Iteration  26: 9902819.595 ops/s
Iteration  27: 9951871.204 ops/s
Iteration  28: 9961789.511 ops/s
Iteration  29: 9940648.962 ops/s
Iteration  30: 9783493.301 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumFloat":
  9902049.942 ±(99.9%) 52028.104 ops/s [Average]
  (min, avg, max) = (9649212.832, 9902049.942, 9963850.250), stdev = 77873.222
  CI (99.9%): [9850021.838, 9954078.045] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sumFloat  thrpt   30  9902049.942 ± 52028.104  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171.266 ops/s
# Warmup Iteration   2: 192.043 ops/s
# Warmup Iteration   3: 224.459 ops/s
# Warmup Iteration   4: 246.759 ops/s
# Warmup Iteration   5: 244.693 ops/s
# Warmup Iteration   6: 245.910 ops/s
# Warmup Iteration   7: 248.086 ops/s
# Warmup Iteration   8: 247.426 ops/s
# Warmup Iteration   9: 247.388 ops/s
# Warmup Iteration  10: 244.670 ops/s
# Warmup Iteration  11: 246.877 ops/s
# Warmup Iteration  12: 241.173 ops/s
# Warmup Iteration  13: 233.678 ops/s
# Warmup Iteration  14: 195.028 ops/s
# Warmup Iteration  15: 232.030 ops/s
# Warmup Iteration  16: 234.818 ops/s
# Warmup Iteration  17: 232.343 ops/s
# Warmup Iteration  18: 233.999 ops/s
# Warmup Iteration  19: 234.622 ops/s
# Warmup Iteration  20: 233.494 ops/s
# Warmup Iteration  21: 232.899 ops/s
# Warmup Iteration  22: 234.661 ops/s
# Warmup Iteration  23: 233.820 ops/s
# Warmup Iteration  24: 231.410 ops/s
# Warmup Iteration  25: 234.308 ops/s
# Warmup Iteration  26: 235.494 ops/s
# Warmup Iteration  27: 235.830 ops/s
# Warmup Iteration  28: 232.518 ops/s
# Warmup Iteration  29: 235.389 ops/s
# Warmup Iteration  30: 231.610 ops/s
Iteration   1: 234.219 ops/s
Iteration   2: 235.259 ops/s
Iteration   3: 235.564 ops/s
Iteration   4: 233.138 ops/s
Iteration   5: 235.504 ops/s
Iteration   6: 235.953 ops/s
Iteration   7: 234.955 ops/s
Iteration   8: 235.758 ops/s
Iteration   9: 234.808 ops/s
Iteration  10: 235.249 ops/s
Iteration  11: 234.329 ops/s
Iteration  12: 230.934 ops/s
Iteration  13: 234.888 ops/s
Iteration  14: 235.232 ops/s
Iteration  15: 234.822 ops/s
Iteration  16: 234.233 ops/s
Iteration  17: 231.434 ops/s
Iteration  18: 233.736 ops/s
Iteration  19: 230.732 ops/s
Iteration  20: 233.438 ops/s
Iteration  21: 235.711 ops/s
Iteration  22: 229.536 ops/s
Iteration  23: 227.739 ops/s
Iteration  24: 233.140 ops/s
Iteration  25: 233.298 ops/s
Iteration  26: 231.913 ops/s
Iteration  27: 234.851 ops/s
Iteration  28: 234.660 ops/s
Iteration  29: 231.684 ops/s
Iteration  30: 235.512 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  233.741 ±(99.9%) 1.369 ops/s [Average]
  (min, avg, max) = (227.739, 233.741, 235.953), stdev = 2.049
  CI (99.9%): [232.372, 235.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt    Score   Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  233.741 ± 1.369  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 211.756 ops/s
# Warmup Iteration   2: 238.725 ops/s
# Warmup Iteration   3: 321.857 ops/s
# Warmup Iteration   4: 316.652 ops/s
# Warmup Iteration   5: 320.162 ops/s
# Warmup Iteration   6: 323.706 ops/s
# Warmup Iteration   7: 323.089 ops/s
# Warmup Iteration   8: 324.813 ops/s
# Warmup Iteration   9: 322.757 ops/s
# Warmup Iteration  10: 300.198 ops/s
# Warmup Iteration  11: 249.078 ops/s
# Warmup Iteration  12: 298.939 ops/s
# Warmup Iteration  13: 300.141 ops/s
# Warmup Iteration  14: 299.397 ops/s
# Warmup Iteration  15: 300.434 ops/s
# Warmup Iteration  16: 302.010 ops/s
# Warmup Iteration  17: 301.949 ops/s
# Warmup Iteration  18: 295.663 ops/s
# Warmup Iteration  19: 299.923 ops/s
# Warmup Iteration  20: 297.237 ops/s
# Warmup Iteration  21: 299.402 ops/s
# Warmup Iteration  22: 300.833 ops/s
# Warmup Iteration  23: 299.989 ops/s
# Warmup Iteration  24: 301.142 ops/s
# Warmup Iteration  25: 299.931 ops/s
# Warmup Iteration  26: 302.475 ops/s
# Warmup Iteration  27: 300.185 ops/s
# Warmup Iteration  28: 302.349 ops/s
# Warmup Iteration  29: 302.250 ops/s
# Warmup Iteration  30: 301.490 ops/s
Iteration   1: 302.530 ops/s
Iteration   2: 302.910 ops/s
Iteration   3: 302.330 ops/s
Iteration   4: 298.647 ops/s
Iteration   5: 302.890 ops/s
Iteration   6: 299.872 ops/s
Iteration   7: 303.508 ops/s
Iteration   8: 301.841 ops/s
Iteration   9: 301.519 ops/s
Iteration  10: 297.257 ops/s
Iteration  11: 301.883 ops/s
Iteration  12: 302.219 ops/s
Iteration  13: 302.706 ops/s
Iteration  14: 303.191 ops/s
Iteration  15: 300.299 ops/s
Iteration  16: 301.278 ops/s
Iteration  17: 302.691 ops/s
Iteration  18: 301.959 ops/s
Iteration  19: 303.055 ops/s
Iteration  20: 300.301 ops/s
Iteration  21: 301.107 ops/s
Iteration  22: 302.061 ops/s
Iteration  23: 300.128 ops/s
Iteration  24: 300.882 ops/s
Iteration  25: 301.251 ops/s
Iteration  26: 297.926 ops/s
Iteration  27: 296.021 ops/s
Iteration  28: 303.312 ops/s
Iteration  29: 300.069 ops/s
Iteration  30: 302.207 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  301.262 ±(99.9%) 1.242 ops/s [Average]
  (min, avg, max) = (296.021, 301.262, 303.508), stdev = 1.860
  CI (99.9%): [300.019, 302.504] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt    Score   Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  301.262 ± 1.242  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4715388.657 ops/s
# Warmup Iteration   2: 9879307.724 ops/s
# Warmup Iteration   3: 9782396.684 ops/s
# Warmup Iteration   4: 8351763.576 ops/s
# Warmup Iteration   5: 9853808.111 ops/s
# Warmup Iteration   6: 9921530.317 ops/s
# Warmup Iteration   7: 9925402.638 ops/s
# Warmup Iteration   8: 9926447.189 ops/s
# Warmup Iteration   9: 9917391.535 ops/s
# Warmup Iteration  10: 9922872.303 ops/s
# Warmup Iteration  11: 9816523.042 ops/s
# Warmup Iteration  12: 9928637.076 ops/s
# Warmup Iteration  13: 9912261.816 ops/s
# Warmup Iteration  14: 9906480.356 ops/s
# Warmup Iteration  15: 9856934.043 ops/s
# Warmup Iteration  16: 9932247.407 ops/s
# Warmup Iteration  17: 9971740.881 ops/s
# Warmup Iteration  18: 9989209.360 ops/s
# Warmup Iteration  19: 9988205.835 ops/s
# Warmup Iteration  20: 10013494.379 ops/s
# Warmup Iteration  21: 9999863.119 ops/s
# Warmup Iteration  22: 9912611.200 ops/s
# Warmup Iteration  23: 9968360.116 ops/s
# Warmup Iteration  24: 9964980.527 ops/s
# Warmup Iteration  25: 9911473.686 ops/s
# Warmup Iteration  26: 9829920.800 ops/s
# Warmup Iteration  27: 9970366.021 ops/s
# Warmup Iteration  28: 9986119.629 ops/s
# Warmup Iteration  29: 9752853.658 ops/s
# Warmup Iteration  30: 9951930.988 ops/s
Iteration   1: 9965582.755 ops/s
Iteration   2: 9954564.924 ops/s
Iteration   3: 9829827.186 ops/s
Iteration   4: 9782700.670 ops/s
Iteration   5: 9895803.393 ops/s
Iteration   6: 9994358.770 ops/s
Iteration   7: 9903152.513 ops/s
Iteration   8: 9872193.871 ops/s
Iteration   9: 9945780.671 ops/s
Iteration  10: 9907147.421 ops/s
Iteration  11: 9943533.067 ops/s
Iteration  12: 9936574.617 ops/s
Iteration  13: 9967946.450 ops/s
Iteration  14: 9989218.007 ops/s
Iteration  15: 10037487.045 ops/s
Iteration  16: 9986171.221 ops/s
Iteration  17: 9996833.898 ops/s
Iteration  18: 9944075.317 ops/s
Iteration  19: 9995881.426 ops/s
Iteration  20: 9982326.702 ops/s
Iteration  21: 9999795.946 ops/s
Iteration  22: 9948251.037 ops/s
Iteration  23: 9856360.020 ops/s
Iteration  24: 9769855.509 ops/s
Iteration  25: 9866133.256 ops/s
Iteration  26: 9988920.341 ops/s
Iteration  27: 10001276.863 ops/s
Iteration  28: 9986228.000 ops/s
Iteration  29: 9907994.613 ops/s
Iteration  30: 10012519.117 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumInteger":
  9938949.821 ±(99.9%) 45131.232 ops/s [Average]
  (min, avg, max) = (9769855.509, 9938949.821, 10037487.045), stdev = 67550.309
  CI (99.9%): [9893818.588, 9984081.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sumInteger  thrpt   30  9938949.821 ± 45131.232  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4762599.069 ops/s
# Warmup Iteration   2: 9904085.774 ops/s
# Warmup Iteration   3: 9882854.629 ops/s
# Warmup Iteration   4: 8320986.830 ops/s
# Warmup Iteration   5: 9945249.339 ops/s
# Warmup Iteration   6: 9864777.050 ops/s
# Warmup Iteration   7: 9837366.244 ops/s
# Warmup Iteration   8: 9945029.142 ops/s
# Warmup Iteration   9: 9980285.418 ops/s
# Warmup Iteration  10: 9944498.620 ops/s
# Warmup Iteration  11: 9882287.864 ops/s
# Warmup Iteration  12: 9955213.983 ops/s
# Warmup Iteration  13: 9948323.780 ops/s
# Warmup Iteration  14: 9860173.307 ops/s
# Warmup Iteration  15: 9975348.826 ops/s
# Warmup Iteration  16: 9962071.895 ops/s
# Warmup Iteration  17: 9866242.973 ops/s
# Warmup Iteration  18: 9918803.674 ops/s
# Warmup Iteration  19: 9968559.274 ops/s
# Warmup Iteration  20: 9916193.704 ops/s
# Warmup Iteration  21: 9900200.795 ops/s
# Warmup Iteration  22: 10008028.460 ops/s
# Warmup Iteration  23: 9900629.349 ops/s
# Warmup Iteration  24: 9939475.373 ops/s
# Warmup Iteration  25: 9982707.840 ops/s
# Warmup Iteration  26: 9978325.921 ops/s
# Warmup Iteration  27: 9937852.981 ops/s
# Warmup Iteration  28: 9888357.544 ops/s
# Warmup Iteration  29: 9895636.768 ops/s
# Warmup Iteration  30: 10007799.634 ops/s
Iteration   1: 9834783.751 ops/s
Iteration   2: 9991623.124 ops/s
Iteration   3: 9981519.481 ops/s
Iteration   4: 9986846.925 ops/s
Iteration   5: 10012090.570 ops/s
Iteration   6: 9973672.493 ops/s
Iteration   7: 9981063.757 ops/s
Iteration   8: 10016974.492 ops/s
Iteration   9: 9984543.479 ops/s
Iteration  10: 9982239.532 ops/s
Iteration  11: 9960804.497 ops/s
Iteration  12: 10019696.018 ops/s
Iteration  13: 9976455.112 ops/s
Iteration  14: 9976536.572 ops/s
Iteration  15: 10013935.655 ops/s
Iteration  16: 9816642.702 ops/s
Iteration  17: 10027274.014 ops/s
Iteration  18: 9993065.771 ops/s
Iteration  19: 10053252.404 ops/s
Iteration  20: 10001215.143 ops/s
Iteration  21: 10015540.265 ops/s
Iteration  22: 10027492.683 ops/s
Iteration  23: 9764983.545 ops/s
Iteration  24: 9989001.805 ops/s
Iteration  25: 10006199.849 ops/s
Iteration  26: 9975506.063 ops/s
Iteration  27: 10032871.362 ops/s
Iteration  28: 9871430.623 ops/s
Iteration  29: 10003394.740 ops/s
Iteration  30: 10038446.617 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_sumLong":
  9976970.101 ±(99.9%) 44830.802 ops/s [Average]
  (min, avg, max) = (9764983.545, 9976970.101, 10053252.404), stdev = 67100.639
  CI (99.9%): [9932139.300, 10021800.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_sumLong  thrpt   30  9976970.101 ± 44830.802  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5557719.919 ops/s
# Warmup Iteration   2: 11132226.728 ops/s
# Warmup Iteration   3: 9527295.377 ops/s
# Warmup Iteration   4: 11225322.047 ops/s
# Warmup Iteration   5: 11204964.533 ops/s
# Warmup Iteration   6: 11161812.093 ops/s
# Warmup Iteration   7: 11128016.332 ops/s
# Warmup Iteration   8: 11206388.095 ops/s
# Warmup Iteration   9: 11219259.937 ops/s
# Warmup Iteration  10: 11228081.036 ops/s
# Warmup Iteration  11: 11142731.644 ops/s
# Warmup Iteration  12: 11148242.970 ops/s
# Warmup Iteration  13: 11282610.818 ops/s
# Warmup Iteration  14: 11040896.345 ops/s
# Warmup Iteration  15: 11263273.027 ops/s
# Warmup Iteration  16: 11251982.561 ops/s
# Warmup Iteration  17: 10987568.721 ops/s
# Warmup Iteration  18: 11199657.012 ops/s
# Warmup Iteration  19: 11196308.694 ops/s
# Warmup Iteration  20: 11084537.449 ops/s
# Warmup Iteration  21: 11192436.912 ops/s
# Warmup Iteration  22: 11145947.880 ops/s
# Warmup Iteration  23: 11191130.956 ops/s
# Warmup Iteration  24: 11088153.711 ops/s
# Warmup Iteration  25: 11170169.622 ops/s
# Warmup Iteration  26: 11088728.077 ops/s
# Warmup Iteration  27: 11209382.394 ops/s
# Warmup Iteration  28: 11074528.542 ops/s
# Warmup Iteration  29: 11186499.238 ops/s
# Warmup Iteration  30: 11147052.130 ops/s
Iteration   1: 11098454.856 ops/s
Iteration   2: 11195297.325 ops/s
Iteration   3: 11225664.430 ops/s
Iteration   4: 11211491.991 ops/s
Iteration   5: 11162897.338 ops/s
Iteration   6: 11065466.729 ops/s
Iteration   7: 11194357.897 ops/s
Iteration   8: 11131928.432 ops/s
Iteration   9: 11125443.265 ops/s
Iteration  10: 11105508.644 ops/s
Iteration  11: 11027289.974 ops/s
Iteration  12: 11100758.229 ops/s
Iteration  13: 11199703.938 ops/s
Iteration  14: 11105621.198 ops/s
Iteration  15: 11145263.096 ops/s
Iteration  16: 11170735.226 ops/s
Iteration  17: 11192024.950 ops/s
Iteration  18: 11221175.811 ops/s
Iteration  19: 11160365.604 ops/s
Iteration  20: 11161760.266 ops/s
Iteration  21: 11094278.852 ops/s
Iteration  22: 11182554.046 ops/s
Iteration  23: 11124658.480 ops/s
Iteration  24: 11106242.896 ops/s
Iteration  25: 11125507.736 ops/s
Iteration  26: 11220125.216 ops/s
Iteration  27: 11202714.262 ops/s
Iteration  28: 11223274.072 ops/s
Iteration  29: 10987888.928 ops/s
Iteration  30: 11216813.187 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_summarizeDouble":
  11149508.896 ±(99.9%) 40579.133 ops/s [Average]
  (min, avg, max) = (10987888.928, 11149508.896, 11225664.430), stdev = 60736.940
  CI (99.9%): [11108929.763, 11190088.029] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_summarizeDouble  thrpt   30  11149508.896 ± 40579.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5339287.010 ops/s
# Warmup Iteration   2: 10919242.340 ops/s
# Warmup Iteration   3: 9299413.961 ops/s
# Warmup Iteration   4: 11019811.362 ops/s
# Warmup Iteration   5: 10986772.586 ops/s
# Warmup Iteration   6: 10947438.514 ops/s
# Warmup Iteration   7: 10959116.880 ops/s
# Warmup Iteration   8: 11011988.100 ops/s
# Warmup Iteration   9: 10991127.133 ops/s
# Warmup Iteration  10: 10991834.104 ops/s
# Warmup Iteration  11: 10797149.119 ops/s
# Warmup Iteration  12: 11031419.571 ops/s
# Warmup Iteration  13: 11032870.406 ops/s
# Warmup Iteration  14: 10936148.566 ops/s
# Warmup Iteration  15: 10935791.800 ops/s
# Warmup Iteration  16: 11024444.199 ops/s
# Warmup Iteration  17: 11019448.323 ops/s
# Warmup Iteration  18: 11007363.989 ops/s
# Warmup Iteration  19: 10989128.038 ops/s
# Warmup Iteration  20: 11001749.373 ops/s
# Warmup Iteration  21: 11013857.504 ops/s
# Warmup Iteration  22: 10986710.335 ops/s
# Warmup Iteration  23: 11067481.282 ops/s
# Warmup Iteration  24: 10989518.612 ops/s
# Warmup Iteration  25: 11040883.663 ops/s
# Warmup Iteration  26: 11004367.366 ops/s
# Warmup Iteration  27: 11006757.657 ops/s
# Warmup Iteration  28: 11026705.857 ops/s
# Warmup Iteration  29: 11011125.291 ops/s
# Warmup Iteration  30: 10947569.926 ops/s
Iteration   1: 11003228.947 ops/s
Iteration   2: 10951155.867 ops/s
Iteration   3: 11048419.932 ops/s
Iteration   4: 11024194.457 ops/s
Iteration   5: 10790992.563 ops/s
Iteration   6: 10860551.170 ops/s
Iteration   7: 11031794.025 ops/s
Iteration   8: 10814819.251 ops/s
Iteration   9: 10974431.471 ops/s
Iteration  10: 10941760.888 ops/s
Iteration  11: 10900605.015 ops/s
Iteration  12: 11013091.263 ops/s
Iteration  13: 11073524.240 ops/s
Iteration  14: 10986002.245 ops/s
Iteration  15: 10994622.293 ops/s
Iteration  16: 10988712.930 ops/s
Iteration  17: 11082809.465 ops/s
Iteration  18: 10949491.574 ops/s
Iteration  19: 11030391.851 ops/s
Iteration  20: 11019192.169 ops/s
Iteration  21: 10978424.082 ops/s
Iteration  22: 11017675.637 ops/s
Iteration  23: 11020177.932 ops/s
Iteration  24: 10932366.574 ops/s
Iteration  25: 11004668.547 ops/s
Iteration  26: 11016955.449 ops/s
Iteration  27: 11024221.697 ops/s
Iteration  28: 10979307.140 ops/s
Iteration  29: 11003755.839 ops/s
Iteration  30: 11008732.681 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_summarizeFloat":
  10982202.573 ±(99.9%) 45072.693 ops/s [Average]
  (min, avg, max) = (10790992.563, 10982202.573, 11082809.465), stdev = 67462.690
  CI (99.9%): [10937129.880, 11027275.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_summarizeFloat  thrpt   30  10982202.573 ± 45072.693  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5704802.790 ops/s
# Warmup Iteration   2: 11469117.471 ops/s
# Warmup Iteration   3: 9767149.202 ops/s
# Warmup Iteration   4: 11508107.983 ops/s
# Warmup Iteration   5: 11542232.048 ops/s
# Warmup Iteration   6: 11570776.768 ops/s
# Warmup Iteration   7: 11512984.304 ops/s
# Warmup Iteration   8: 11548873.775 ops/s
# Warmup Iteration   9: 11527253.447 ops/s
# Warmup Iteration  10: 11460959.546 ops/s
# Warmup Iteration  11: 11591239.075 ops/s
# Warmup Iteration  12: 11437764.911 ops/s
# Warmup Iteration  13: 11557138.651 ops/s
# Warmup Iteration  14: 11542099.761 ops/s
# Warmup Iteration  15: 11533894.471 ops/s
# Warmup Iteration  16: 11473374.350 ops/s
# Warmup Iteration  17: 11508471.871 ops/s
# Warmup Iteration  18: 11509961.087 ops/s
# Warmup Iteration  19: 11554947.379 ops/s
# Warmup Iteration  20: 11493460.807 ops/s
# Warmup Iteration  21: 11551250.653 ops/s
# Warmup Iteration  22: 11561105.168 ops/s
# Warmup Iteration  23: 11582727.821 ops/s
# Warmup Iteration  24: 11389564.673 ops/s
# Warmup Iteration  25: 11472386.281 ops/s
# Warmup Iteration  26: 11580162.454 ops/s
# Warmup Iteration  27: 11520987.297 ops/s
# Warmup Iteration  28: 11521755.692 ops/s
# Warmup Iteration  29: 11603113.303 ops/s
# Warmup Iteration  30: 11569568.861 ops/s
Iteration   1: 11579682.831 ops/s
Iteration   2: 11407377.384 ops/s
Iteration   3: 11471651.188 ops/s
Iteration   4: 11588291.741 ops/s
Iteration   5: 11583992.777 ops/s
Iteration   6: 11556537.882 ops/s
Iteration   7: 11396997.516 ops/s
Iteration   8: 11517755.723 ops/s
Iteration   9: 11471576.334 ops/s
Iteration  10: 11561263.750 ops/s
Iteration  11: 11538687.395 ops/s
Iteration  12: 11324239.051 ops/s
Iteration  13: 11503378.026 ops/s
Iteration  14: 11327243.314 ops/s
Iteration  15: 11574284.794 ops/s
Iteration  16: 11497866.007 ops/s
Iteration  17: 11482505.707 ops/s
Iteration  18: 11565730.272 ops/s
Iteration  19: 11572658.436 ops/s
Iteration  20: 11444454.567 ops/s
Iteration  21: 11352386.689 ops/s
Iteration  22: 11440902.607 ops/s
Iteration  23: 11410690.229 ops/s
Iteration  24: 11577338.359 ops/s
Iteration  25: 11557014.344 ops/s
Iteration  26: 11557994.945 ops/s
Iteration  27: 11580700.104 ops/s
Iteration  28: 11588343.527 ops/s
Iteration  29: 11618636.418 ops/s
Iteration  30: 11551601.302 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_summarizeInt":
  11506726.107 ±(99.9%) 56251.643 ops/s [Average]
  (min, avg, max) = (11324239.051, 11506726.107, 11618636.418), stdev = 84194.818
  CI (99.9%): [11450474.464, 11562977.751] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_summarizeInt  thrpt   30  11506726.107 ± 56251.643  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5569570.753 ops/s
# Warmup Iteration   2: 11084343.834 ops/s
# Warmup Iteration   3: 9454521.624 ops/s
# Warmup Iteration   4: 11192922.348 ops/s
# Warmup Iteration   5: 11110819.503 ops/s
# Warmup Iteration   6: 11183033.245 ops/s
# Warmup Iteration   7: 11092487.087 ops/s
# Warmup Iteration   8: 11273484.142 ops/s
# Warmup Iteration   9: 11246227.387 ops/s
# Warmup Iteration  10: 11141201.642 ops/s
# Warmup Iteration  11: 11233388.462 ops/s
# Warmup Iteration  12: 11242745.535 ops/s
# Warmup Iteration  13: 11130263.775 ops/s
# Warmup Iteration  14: 11204585.479 ops/s
# Warmup Iteration  15: 11155816.623 ops/s
# Warmup Iteration  16: 11139257.382 ops/s
# Warmup Iteration  17: 11411697.883 ops/s
# Warmup Iteration  18: 11418773.451 ops/s
# Warmup Iteration  19: 11235929.732 ops/s
# Warmup Iteration  20: 11276242.514 ops/s
# Warmup Iteration  21: 11399312.719 ops/s
# Warmup Iteration  22: 11294889.531 ops/s
# Warmup Iteration  23: 11411574.517 ops/s
# Warmup Iteration  24: 11310696.622 ops/s
# Warmup Iteration  25: 11235420.157 ops/s
# Warmup Iteration  26: 11423465.041 ops/s
# Warmup Iteration  27: 11369955.676 ops/s
# Warmup Iteration  28: 11403903.924 ops/s
# Warmup Iteration  29: 11422095.089 ops/s
# Warmup Iteration  30: 11388510.206 ops/s
Iteration   1: 11394016.038 ops/s
Iteration   2: 11318202.454 ops/s
Iteration   3: 11419117.549 ops/s
Iteration   4: 11420661.795 ops/s
Iteration   5: 11202944.327 ops/s
Iteration   6: 11401766.307 ops/s
Iteration   7: 11348974.909 ops/s
Iteration   8: 11389351.874 ops/s
Iteration   9: 11415003.352 ops/s
Iteration  10: 11409673.202 ops/s
Iteration  11: 11438482.200 ops/s
Iteration  12: 11392900.597 ops/s
Iteration  13: 11240094.806 ops/s
Iteration  14: 11398581.367 ops/s
Iteration  15: 11438507.597 ops/s
Iteration  16: 11401211.433 ops/s
Iteration  17: 11352798.452 ops/s
Iteration  18: 11392580.061 ops/s
Iteration  19: 11407900.286 ops/s
Iteration  20: 11360613.188 ops/s
Iteration  21: 11447718.373 ops/s
Iteration  22: 11402595.449 ops/s
Iteration  23: 11297282.969 ops/s
Iteration  24: 11439158.328 ops/s
Iteration  25: 11416855.965 ops/s
Iteration  26: 11436506.029 ops/s
Iteration  27: 11398018.506 ops/s
Iteration  28: 11397891.159 ops/s
Iteration  29: 11225504.327 ops/s
Iteration  30: 11452014.385 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_summarizeLong":
  11381897.576 ±(99.9%) 43189.959 ops/s [Average]
  (min, avg, max) = (11202944.327, 11381897.576, 11452014.385), stdev = 64644.702
  CI (99.9%): [11338707.617, 11425087.535] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_summarizeLong  thrpt   30  11381897.576 ± 43189.959  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1051333.141 ops/s
# Warmup Iteration   2: 1800332.008 ops/s
# Warmup Iteration   3: 2017228.663 ops/s
# Warmup Iteration   4: 2006499.376 ops/s
# Warmup Iteration   5: 1999223.641 ops/s
# Warmup Iteration   6: 1642248.996 ops/s
# Warmup Iteration   7: 2026709.936 ops/s
# Warmup Iteration   8: 2027245.100 ops/s
# Warmup Iteration   9: 2026833.467 ops/s
# Warmup Iteration  10: 2027343.303 ops/s
# Warmup Iteration  11: 2029234.580 ops/s
# Warmup Iteration  12: 1986796.558 ops/s
# Warmup Iteration  13: 2024358.320 ops/s
# Warmup Iteration  14: 2006903.352 ops/s
# Warmup Iteration  15: 2020442.475 ops/s
# Warmup Iteration  16: 1996978.265 ops/s
# Warmup Iteration  17: 2016186.726 ops/s
# Warmup Iteration  18: 2025807.302 ops/s
# Warmup Iteration  19: 2018583.679 ops/s
# Warmup Iteration  20: 2009933.420 ops/s
# Warmup Iteration  21: 2018700.413 ops/s
# Warmup Iteration  22: 2011758.380 ops/s
# Warmup Iteration  23: 1985471.378 ops/s
# Warmup Iteration  24: 2014643.563 ops/s
# Warmup Iteration  25: 2021488.319 ops/s
# Warmup Iteration  26: 2014719.443 ops/s
# Warmup Iteration  27: 2006318.855 ops/s
# Warmup Iteration  28: 2022768.987 ops/s
# Warmup Iteration  29: 2025527.119 ops/s
# Warmup Iteration  30: 2023034.003 ops/s
Iteration   1: 2012978.941 ops/s
Iteration   2: 1993256.378 ops/s
Iteration   3: 2013610.168 ops/s
Iteration   4: 2003552.619 ops/s
Iteration   5: 2025950.191 ops/s
Iteration   6: 2022900.580 ops/s
Iteration   7: 2025428.992 ops/s
Iteration   8: 2034174.087 ops/s
Iteration   9: 2029835.309 ops/s
Iteration  10: 1991607.851 ops/s
Iteration  11: 2033826.755 ops/s
Iteration  12: 2008367.679 ops/s
Iteration  13: 2017793.260 ops/s
Iteration  14: 2018618.857 ops/s
Iteration  15: 2008752.626 ops/s
Iteration  16: 2009743.489 ops/s
Iteration  17: 2011105.553 ops/s
Iteration  18: 2021669.062 ops/s
Iteration  19: 2025113.064 ops/s
Iteration  20: 2012839.193 ops/s
Iteration  21: 2008916.813 ops/s
Iteration  22: 2041496.124 ops/s
Iteration  23: 2019020.013 ops/s
Iteration  24: 2024181.320 ops/s
Iteration  25: 1996525.150 ops/s
Iteration  26: 2033456.155 ops/s
Iteration  27: 2043260.229 ops/s
Iteration  28: 2036638.733 ops/s
Iteration  29: 1999393.538 ops/s
Iteration  30: 2014162.298 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_take":
  2017939.167 ±(99.9%) 9168.992 ops/s [Average]
  (min, avg, max) = (1991607.851, 2017939.167, 2043260.229), stdev = 13723.717
  CI (99.9%): [2008770.175, 2027108.160] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_take  thrpt   30  2017939.167 ± 9168.992  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1267404.402 ops/s
# Warmup Iteration   2: 2900291.030 ops/s
# Warmup Iteration   3: 2825105.771 ops/s
# Warmup Iteration   4: 2573516.346 ops/s
# Warmup Iteration   5: 2965866.486 ops/s
# Warmup Iteration   6: 2963034.082 ops/s
# Warmup Iteration   7: 2972507.361 ops/s
# Warmup Iteration   8: 2960716.110 ops/s
# Warmup Iteration   9: 2956365.407 ops/s
# Warmup Iteration  10: 2968104.533 ops/s
# Warmup Iteration  11: 2961211.214 ops/s
# Warmup Iteration  12: 2946273.057 ops/s
# Warmup Iteration  13: 2948446.455 ops/s
# Warmup Iteration  14: 2921844.656 ops/s
# Warmup Iteration  15: 2964403.583 ops/s
# Warmup Iteration  16: 2962663.632 ops/s
# Warmup Iteration  17: 2958494.336 ops/s
# Warmup Iteration  18: 2955476.706 ops/s
# Warmup Iteration  19: 2958114.825 ops/s
# Warmup Iteration  20: 2966003.478 ops/s
# Warmup Iteration  21: 2918643.856 ops/s
# Warmup Iteration  22: 2962868.078 ops/s
# Warmup Iteration  23: 2947718.692 ops/s
# Warmup Iteration  24: 2955706.327 ops/s
# Warmup Iteration  25: 2959824.410 ops/s
# Warmup Iteration  26: 2947527.623 ops/s
# Warmup Iteration  27: 2936738.418 ops/s
# Warmup Iteration  28: 2960425.856 ops/s
# Warmup Iteration  29: 2948579.452 ops/s
# Warmup Iteration  30: 2956032.404 ops/s
Iteration   1: 2951242.361 ops/s
Iteration   2: 2968621.508 ops/s
Iteration   3: 2863593.440 ops/s
Iteration   4: 2914156.557 ops/s
Iteration   5: 2970480.337 ops/s
Iteration   6: 2948282.336 ops/s
Iteration   7: 2969602.609 ops/s
Iteration   8: 2954187.881 ops/s
Iteration   9: 2967654.165 ops/s
Iteration  10: 2967170.589 ops/s
Iteration  11: 2958998.193 ops/s
Iteration  12: 2970531.308 ops/s
Iteration  13: 2955106.461 ops/s
Iteration  14: 2969419.016 ops/s
Iteration  15: 2936688.491 ops/s
Iteration  16: 2945419.804 ops/s
Iteration  17: 2955210.447 ops/s
Iteration  18: 2895898.459 ops/s
Iteration  19: 2969904.977 ops/s
Iteration  20: 2952490.415 ops/s
Iteration  21: 2968650.967 ops/s
Iteration  22: 2966199.357 ops/s
Iteration  23: 2953572.738 ops/s
Iteration  24: 2930239.321 ops/s
Iteration  25: 2963013.570 ops/s
Iteration  26: 2962360.613 ops/s
Iteration  27: 2958407.847 ops/s
Iteration  28: 2932998.827 ops/s
Iteration  29: 2960583.246 ops/s
Iteration  30: 2961549.956 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_takeWhile":
  2951407.860 ±(99.9%) 16114.937 ops/s [Average]
  (min, avg, max) = (2863593.440, 2951407.860, 2970531.308), stdev = 24120.081
  CI (99.9%): [2935292.923, 2967522.797] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_takeWhile  thrpt   30  2951407.860 ± 16114.937  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 640968.944 ops/s
# Warmup Iteration   2: 728040.628 ops/s
# Warmup Iteration   3: 932273.099 ops/s
# Warmup Iteration   4: 927872.243 ops/s
# Warmup Iteration   5: 927008.414 ops/s
# Warmup Iteration   6: 926161.188 ops/s
# Warmup Iteration   7: 925060.476 ops/s
# Warmup Iteration   8: 918506.146 ops/s
# Warmup Iteration   9: 931666.066 ops/s
# Warmup Iteration  10: 773965.115 ops/s
# Warmup Iteration  11: 932255.740 ops/s
# Warmup Iteration  12: 934065.261 ops/s
# Warmup Iteration  13: 929616.873 ops/s
# Warmup Iteration  14: 926490.553 ops/s
# Warmup Iteration  15: 924569.818 ops/s
# Warmup Iteration  16: 922510.516 ops/s
# Warmup Iteration  17: 971007.615 ops/s
# Warmup Iteration  18: 975824.566 ops/s
# Warmup Iteration  19: 979188.316 ops/s
# Warmup Iteration  20: 980257.884 ops/s
# Warmup Iteration  21: 983639.613 ops/s
# Warmup Iteration  22: 981104.788 ops/s
# Warmup Iteration  23: 979968.753 ops/s
# Warmup Iteration  24: 983972.147 ops/s
# Warmup Iteration  25: 966996.542 ops/s
# Warmup Iteration  26: 983742.367 ops/s
# Warmup Iteration  27: 978534.152 ops/s
# Warmup Iteration  28: 971534.754 ops/s
# Warmup Iteration  29: 973436.559 ops/s
# Warmup Iteration  30: 978002.431 ops/s
Iteration   1: 979667.811 ops/s
Iteration   2: 978918.164 ops/s
Iteration   3: 971606.544 ops/s
Iteration   4: 977996.730 ops/s
Iteration   5: 975434.510 ops/s
Iteration   6: 978555.205 ops/s
Iteration   7: 980771.834 ops/s
Iteration   8: 980326.597 ops/s
Iteration   9: 980168.226 ops/s
Iteration  10: 983623.066 ops/s
Iteration  11: 959283.594 ops/s
Iteration  12: 980470.440 ops/s
Iteration  13: 977763.362 ops/s
Iteration  14: 982184.562 ops/s
Iteration  15: 984138.807 ops/s
Iteration  16: 976412.087 ops/s
Iteration  17: 965575.169 ops/s
Iteration  18: 979516.077 ops/s
Iteration  19: 978203.051 ops/s
Iteration  20: 962189.862 ops/s
Iteration  21: 975683.046 ops/s
Iteration  22: 959487.560 ops/s
Iteration  23: 968581.461 ops/s
Iteration  24: 977727.263 ops/s
Iteration  25: 979238.983 ops/s
Iteration  26: 978217.755 ops/s
Iteration  27: 979907.656 ops/s
Iteration  28: 977016.188 ops/s
Iteration  29: 971883.435 ops/s
Iteration  30: 973080.370 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_take_throws":
  975787.647 ±(99.9%) 4437.825 ops/s [Average]
  (min, avg, max) = (959283.594, 975787.647, 984138.807), stdev = 6642.328
  CI (99.9%): [971349.822, 980225.472] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_take_throws  thrpt   30  975787.647 ± 4437.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2837394.003 ops/s
# Warmup Iteration   2: 6340771.386 ops/s
# Warmup Iteration   3: 6346174.817 ops/s
# Warmup Iteration   4: 5288972.637 ops/s
# Warmup Iteration   5: 6350738.646 ops/s
# Warmup Iteration   6: 6294269.266 ops/s
# Warmup Iteration   7: 6342168.809 ops/s
# Warmup Iteration   8: 6366953.333 ops/s
# Warmup Iteration   9: 6339802.022 ops/s
# Warmup Iteration  10: 6352854.995 ops/s
# Warmup Iteration  11: 6283058.750 ops/s
# Warmup Iteration  12: 6317849.109 ops/s
# Warmup Iteration  13: 6353646.817 ops/s
# Warmup Iteration  14: 6265586.967 ops/s
# Warmup Iteration  15: 6355930.880 ops/s
# Warmup Iteration  16: 6343274.129 ops/s
# Warmup Iteration  17: 6339685.350 ops/s
# Warmup Iteration  18: 6294408.575 ops/s
# Warmup Iteration  19: 6342614.189 ops/s
# Warmup Iteration  20: 6289071.215 ops/s
# Warmup Iteration  21: 6259461.425 ops/s
# Warmup Iteration  22: 6326329.715 ops/s
# Warmup Iteration  23: 6333887.089 ops/s
# Warmup Iteration  24: 6280280.438 ops/s
# Warmup Iteration  25: 6318446.626 ops/s
# Warmup Iteration  26: 6326421.025 ops/s
# Warmup Iteration  27: 6334615.580 ops/s
# Warmup Iteration  28: 6323951.216 ops/s
# Warmup Iteration  29: 6311227.504 ops/s
# Warmup Iteration  30: 6335306.019 ops/s
Iteration   1: 6303860.386 ops/s
Iteration   2: 6252601.023 ops/s
Iteration   3: 6240749.310 ops/s
Iteration   4: 6310038.733 ops/s
Iteration   5: 6249425.962 ops/s
Iteration   6: 6272031.449 ops/s
Iteration   7: 6356697.601 ops/s
Iteration   8: 6288348.053 ops/s
Iteration   9: 6339015.443 ops/s
Iteration  10: 6314618.871 ops/s
Iteration  11: 6334294.291 ops/s
Iteration  12: 6196037.973 ops/s
Iteration  13: 6321244.739 ops/s
Iteration  14: 6325874.214 ops/s
Iteration  15: 6323130.655 ops/s
Iteration  16: 6304715.168 ops/s
Iteration  17: 6330898.132 ops/s
Iteration  18: 6333394.928 ops/s
Iteration  19: 6314143.969 ops/s
Iteration  20: 6328948.105 ops/s
Iteration  21: 6342481.740 ops/s
Iteration  22: 6352665.562 ops/s
Iteration  23: 6333459.126 ops/s
Iteration  24: 6269517.534 ops/s
Iteration  25: 6307457.724 ops/s
Iteration  26: 6300313.087 ops/s
Iteration  27: 6337649.850 ops/s
Iteration  28: 6350071.876 ops/s
Iteration  29: 6334601.286 ops/s
Iteration  30: 6342857.430 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_tap":
  6310371.474 ±(99.9%) 25269.167 ops/s [Average]
  (min, avg, max) = (6196037.973, 6310371.474, 6356697.601), stdev = 37821.703
  CI (99.9%): [6285102.307, 6335640.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_tap  thrpt   30  6310371.474 ± 25269.167  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1819309.630 ops/s
# Warmup Iteration   2: 3060488.300 ops/s
# Warmup Iteration   3: 3275911.416 ops/s
# Warmup Iteration   4: 3318525.714 ops/s
# Warmup Iteration   5: 3333093.521 ops/s
# Warmup Iteration   6: 2807699.157 ops/s
# Warmup Iteration   7: 3328912.273 ops/s
# Warmup Iteration   8: 3309346.767 ops/s
# Warmup Iteration   9: 3318832.258 ops/s
# Warmup Iteration  10: 3333207.124 ops/s
# Warmup Iteration  11: 3302217.034 ops/s
# Warmup Iteration  12: 3302454.351 ops/s
# Warmup Iteration  13: 3332452.404 ops/s
# Warmup Iteration  14: 3339805.552 ops/s
# Warmup Iteration  15: 3340321.109 ops/s
# Warmup Iteration  16: 3350597.203 ops/s
# Warmup Iteration  17: 3329184.499 ops/s
# Warmup Iteration  18: 3327496.192 ops/s
# Warmup Iteration  19: 3317284.151 ops/s
# Warmup Iteration  20: 3320946.032 ops/s
# Warmup Iteration  21: 3325082.224 ops/s
# Warmup Iteration  22: 3337140.247 ops/s
# Warmup Iteration  23: 3323789.097 ops/s
# Warmup Iteration  24: 3315717.054 ops/s
# Warmup Iteration  25: 3347536.464 ops/s
# Warmup Iteration  26: 3337076.194 ops/s
# Warmup Iteration  27: 3347176.679 ops/s
# Warmup Iteration  28: 3335117.749 ops/s
# Warmup Iteration  29: 3349287.441 ops/s
# Warmup Iteration  30: 3346132.472 ops/s
Iteration   1: 3350903.740 ops/s
Iteration   2: 3299822.793 ops/s
Iteration   3: 3274012.043 ops/s
Iteration   4: 3317056.150 ops/s
Iteration   5: 3348545.956 ops/s
Iteration   6: 3344235.470 ops/s
Iteration   7: 3325063.892 ops/s
Iteration   8: 3338853.523 ops/s
Iteration   9: 3312567.090 ops/s
Iteration  10: 3346186.344 ops/s
Iteration  11: 3333886.299 ops/s
Iteration  12: 3335449.846 ops/s
Iteration  13: 3350185.380 ops/s
Iteration  14: 3359162.681 ops/s
Iteration  15: 3344495.971 ops/s
Iteration  16: 3343525.082 ops/s
Iteration  17: 3339824.654 ops/s
Iteration  18: 3335459.091 ops/s
Iteration  19: 3347283.354 ops/s
Iteration  20: 3330583.897 ops/s
Iteration  21: 3344095.128 ops/s
Iteration  22: 3344426.057 ops/s
Iteration  23: 3328109.467 ops/s
Iteration  24: 3311947.910 ops/s
Iteration  25: 3332212.593 ops/s
Iteration  26: 3340696.150 ops/s
Iteration  27: 3340957.142 ops/s
Iteration  28: 3262103.440 ops/s
Iteration  29: 3318279.083 ops/s
Iteration  30: 3297677.841 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testClone":
  3329920.269 ±(99.9%) 15069.581 ops/s [Average]
  (min, avg, max) = (3262103.440, 3329920.269, 3359162.681), stdev = 22555.441
  CI (99.9%): [3314850.688, 3344989.850] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_testClone  thrpt   30  3329920.269 ± 15069.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2743549.765 ops/s
# Warmup Iteration   2: 5515714.477 ops/s
# Warmup Iteration   3: 5607865.041 ops/s
# Warmup Iteration   4: 5608521.984 ops/s
# Warmup Iteration   5: 4744578.834 ops/s
# Warmup Iteration   6: 5623172.647 ops/s
# Warmup Iteration   7: 5659477.461 ops/s
# Warmup Iteration   8: 5624824.284 ops/s
# Warmup Iteration   9: 5587395.650 ops/s
# Warmup Iteration  10: 5582368.685 ops/s
# Warmup Iteration  11: 5631066.280 ops/s
# Warmup Iteration  12: 5653227.799 ops/s
# Warmup Iteration  13: 5597620.937 ops/s
# Warmup Iteration  14: 5638255.016 ops/s
# Warmup Iteration  15: 5653662.690 ops/s
# Warmup Iteration  16: 5594459.373 ops/s
# Warmup Iteration  17: 5563562.651 ops/s
# Warmup Iteration  18: 5621554.856 ops/s
# Warmup Iteration  19: 5656182.097 ops/s
# Warmup Iteration  20: 5636167.284 ops/s
# Warmup Iteration  21: 5580057.708 ops/s
# Warmup Iteration  22: 5534758.246 ops/s
# Warmup Iteration  23: 5632475.388 ops/s
# Warmup Iteration  24: 5632185.482 ops/s
# Warmup Iteration  25: 5652432.173 ops/s
# Warmup Iteration  26: 5635082.362 ops/s
# Warmup Iteration  27: 5651720.398 ops/s
# Warmup Iteration  28: 5609813.723 ops/s
# Warmup Iteration  29: 5636927.890 ops/s
# Warmup Iteration  30: 5620958.199 ops/s
Iteration   1: 5626178.851 ops/s
Iteration   2: 5639677.000 ops/s
Iteration   3: 5588499.133 ops/s
Iteration   4: 5591361.517 ops/s
Iteration   5: 5616997.176 ops/s
Iteration   6: 5637963.660 ops/s
Iteration   7: 5629552.031 ops/s
Iteration   8: 5616584.239 ops/s
Iteration   9: 5620590.472 ops/s
Iteration  10: 5621128.821 ops/s
Iteration  11: 5594673.146 ops/s
Iteration  12: 5599540.582 ops/s
Iteration  13: 5645509.555 ops/s
Iteration  14: 5641793.152 ops/s
Iteration  15: 5625661.878 ops/s
Iteration  16: 5640390.965 ops/s
Iteration  17: 5463411.804 ops/s
Iteration  18: 5655075.119 ops/s
Iteration  19: 5647638.858 ops/s
Iteration  20: 5536253.453 ops/s
Iteration  21: 5636940.365 ops/s
Iteration  22: 5623398.832 ops/s
Iteration  23: 5645117.393 ops/s
Iteration  24: 5606839.984 ops/s
Iteration  25: 5636000.547 ops/s
Iteration  26: 5535035.057 ops/s
Iteration  27: 5665514.715 ops/s
Iteration  28: 5637194.541 ops/s
Iteration  29: 5646516.963 ops/s
Iteration  30: 5582197.744 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewCollection":
  5615107.918 ±(99.9%) 28071.227 ops/s [Average]
  (min, avg, max) = (5463411.804, 5615107.918, 5665514.715), stdev = 42015.694
  CI (99.9%): [5587036.692, 5643179.145] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_testNewCollection  thrpt   30  5615107.918 ± 28071.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2038077.484 ops/s
# Warmup Iteration   2: 4224526.194 ops/s
# Warmup Iteration   3: 3680342.601 ops/s
# Warmup Iteration   4: 4184235.831 ops/s
# Warmup Iteration   5: 4237595.841 ops/s
# Warmup Iteration   6: 4267428.713 ops/s
# Warmup Iteration   7: 4258810.595 ops/s
# Warmup Iteration   8: 4241968.712 ops/s
# Warmup Iteration   9: 4253231.615 ops/s
# Warmup Iteration  10: 4211597.876 ops/s
# Warmup Iteration  11: 4250858.104 ops/s
# Warmup Iteration  12: 4260782.787 ops/s
# Warmup Iteration  13: 4235649.600 ops/s
# Warmup Iteration  14: 4252057.918 ops/s
# Warmup Iteration  15: 4259832.747 ops/s
# Warmup Iteration  16: 4218894.913 ops/s
# Warmup Iteration  17: 4229224.996 ops/s
# Warmup Iteration  18: 4245246.182 ops/s
# Warmup Iteration  19: 4242813.260 ops/s
# Warmup Iteration  20: 4257845.758 ops/s
# Warmup Iteration  21: 4243926.748 ops/s
# Warmup Iteration  22: 4203134.458 ops/s
# Warmup Iteration  23: 4251559.230 ops/s
# Warmup Iteration  24: 4229072.335 ops/s
# Warmup Iteration  25: 4253930.293 ops/s
# Warmup Iteration  26: 4259783.259 ops/s
# Warmup Iteration  27: 4239239.677 ops/s
# Warmup Iteration  28: 4247060.900 ops/s
# Warmup Iteration  29: 4253815.790 ops/s
# Warmup Iteration  30: 4259564.313 ops/s
Iteration   1: 4263642.502 ops/s
Iteration   2: 4250936.158 ops/s
Iteration   3: 4250389.921 ops/s
Iteration   4: 4209254.067 ops/s
Iteration   5: 4253285.491 ops/s
Iteration   6: 4238119.065 ops/s
Iteration   7: 4195637.478 ops/s
Iteration   8: 4160814.992 ops/s
Iteration   9: 4268509.742 ops/s
Iteration  10: 4277217.637 ops/s
Iteration  11: 4272367.852 ops/s
Iteration  12: 4246850.341 ops/s
Iteration  13: 4257564.314 ops/s
Iteration  14: 4269318.210 ops/s
Iteration  15: 4253740.518 ops/s
Iteration  16: 4252650.167 ops/s
Iteration  17: 4266318.243 ops/s
Iteration  18: 4229056.530 ops/s
Iteration  19: 4229514.020 ops/s
Iteration  20: 4250096.194 ops/s
Iteration  21: 4252806.149 ops/s
Iteration  22: 4254536.910 ops/s
Iteration  23: 4256844.433 ops/s
Iteration  24: 4256099.626 ops/s
Iteration  25: 4267366.751 ops/s
Iteration  26: 4255801.228 ops/s
Iteration  27: 4233235.669 ops/s
Iteration  28: 4273860.147 ops/s
Iteration  29: 4236109.840 ops/s
Iteration  30: 4196834.657 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewWith":
  4245959.295 ±(99.9%) 17504.243 ops/s [Average]
  (min, avg, max) = (4160814.992, 4245959.295, 4277217.637), stdev = 26199.529
  CI (99.9%): [4228455.052, 4263463.538] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_testNewWith  thrpt   30  4245959.295 ± 17504.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1342208.781 ops/s
# Warmup Iteration   2: 2831110.316 ops/s
# Warmup Iteration   3: 2845776.112 ops/s
# Warmup Iteration   4: 2399069.411 ops/s
# Warmup Iteration   5: 2812573.124 ops/s
# Warmup Iteration   6: 2824880.686 ops/s
# Warmup Iteration   7: 2827211.977 ops/s
# Warmup Iteration   8: 2803198.915 ops/s
# Warmup Iteration   9: 2874339.970 ops/s
# Warmup Iteration  10: 2779716.906 ops/s
# Warmup Iteration  11: 2870406.148 ops/s
# Warmup Iteration  12: 2843011.955 ops/s
# Warmup Iteration  13: 2850832.015 ops/s
# Warmup Iteration  14: 2817962.474 ops/s
# Warmup Iteration  15: 2880809.991 ops/s
# Warmup Iteration  16: 2870627.404 ops/s
# Warmup Iteration  17: 2825753.350 ops/s
# Warmup Iteration  18: 2858228.593 ops/s
# Warmup Iteration  19: 2854310.283 ops/s
# Warmup Iteration  20: 2871281.461 ops/s
# Warmup Iteration  21: 2888810.642 ops/s
# Warmup Iteration  22: 2845643.997 ops/s
# Warmup Iteration  23: 2870678.015 ops/s
# Warmup Iteration  24: 2851865.208 ops/s
# Warmup Iteration  25: 2854567.688 ops/s
# Warmup Iteration  26: 2849000.862 ops/s
# Warmup Iteration  27: 2753820.339 ops/s
# Warmup Iteration  28: 2835635.251 ops/s
# Warmup Iteration  29: 2875610.662 ops/s
# Warmup Iteration  30: 2851448.806 ops/s
Iteration   1: 2809277.682 ops/s
Iteration   2: 2874621.315 ops/s
Iteration   3: 2751650.444 ops/s
Iteration   4: 2901417.481 ops/s
Iteration   5: 2894681.434 ops/s
Iteration   6: 2850388.424 ops/s
Iteration   7: 2823915.992 ops/s
Iteration   8: 2789235.477 ops/s
Iteration   9: 2821769.544 ops/s
Iteration  10: 2860623.894 ops/s
Iteration  11: 2798133.601 ops/s
Iteration  12: 2928265.723 ops/s
Iteration  13: 2900776.382 ops/s
Iteration  14: 2841975.489 ops/s
Iteration  15: 2860966.511 ops/s
Iteration  16: 2851234.265 ops/s
Iteration  17: 2832393.692 ops/s
Iteration  18: 2808733.095 ops/s
Iteration  19: 2832939.353 ops/s
Iteration  20: 2850837.240 ops/s
Iteration  21: 2844306.873 ops/s
Iteration  22: 2868640.451 ops/s
Iteration  23: 2884289.087 ops/s
Iteration  24: 2785627.501 ops/s
Iteration  25: 2828108.213 ops/s
Iteration  26: 2838463.111 ops/s
Iteration  27: 2866099.197 ops/s
Iteration  28: 2821047.443 ops/s
Iteration  29: 2843103.528 ops/s
Iteration  30: 2814019.887 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewWithVarArgs":
  2842584.744 ±(99.9%) 25680.819 ops/s [Average]
  (min, avg, max) = (2751650.444, 2842584.744, 2928265.723), stdev = 38437.843
  CI (99.9%): [2816903.926, 2868265.563] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  2842584.744 ± 25680.819  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1599151.807 ops/s
# Warmup Iteration   2: 3381288.325 ops/s
# Warmup Iteration   3: 3084131.906 ops/s
# Warmup Iteration   4: 3253953.060 ops/s
# Warmup Iteration   5: 3426973.072 ops/s
# Warmup Iteration   6: 3439477.271 ops/s
# Warmup Iteration   7: 3451539.585 ops/s
# Warmup Iteration   8: 3425355.056 ops/s
# Warmup Iteration   9: 3469843.614 ops/s
# Warmup Iteration  10: 3406994.756 ops/s
# Warmup Iteration  11: 3360639.153 ops/s
# Warmup Iteration  12: 3388079.558 ops/s
# Warmup Iteration  13: 3404220.420 ops/s
# Warmup Iteration  14: 3450671.106 ops/s
# Warmup Iteration  15: 3484958.510 ops/s
# Warmup Iteration  16: 3514443.112 ops/s
# Warmup Iteration  17: 3447271.002 ops/s
# Warmup Iteration  18: 3476511.133 ops/s
# Warmup Iteration  19: 3474712.100 ops/s
# Warmup Iteration  20: 3401117.992 ops/s
# Warmup Iteration  21: 3417888.557 ops/s
# Warmup Iteration  22: 3494428.908 ops/s
# Warmup Iteration  23: 3405454.554 ops/s
# Warmup Iteration  24: 3421124.332 ops/s
# Warmup Iteration  25: 3407730.221 ops/s
# Warmup Iteration  26: 3477235.289 ops/s
# Warmup Iteration  27: 3450256.356 ops/s
# Warmup Iteration  28: 3449211.172 ops/s
# Warmup Iteration  29: 3411217.147 ops/s
# Warmup Iteration  30: 3447513.480 ops/s
Iteration   1: 3420931.197 ops/s
Iteration   2: 3437025.800 ops/s
Iteration   3: 3437372.396 ops/s
Iteration   4: 3442338.691 ops/s
Iteration   5: 3431672.363 ops/s
Iteration   6: 3445409.042 ops/s
Iteration   7: 3523805.440 ops/s
Iteration   8: 3437519.055 ops/s
Iteration   9: 3518675.960 ops/s
Iteration  10: 3332289.450 ops/s
Iteration  11: 3374901.354 ops/s
Iteration  12: 3470116.768 ops/s
Iteration  13: 3451314.921 ops/s
Iteration  14: 3358479.902 ops/s
Iteration  15: 3455337.460 ops/s
Iteration  16: 3477509.041 ops/s
Iteration  17: 3416975.738 ops/s
Iteration  18: 3440352.180 ops/s
Iteration  19: 3413878.102 ops/s
Iteration  20: 3468895.894 ops/s
Iteration  21: 3436142.669 ops/s
Iteration  22: 3467295.408 ops/s
Iteration  23: 3465221.276 ops/s
Iteration  24: 3464712.271 ops/s
Iteration  25: 3402701.454 ops/s
Iteration  26: 3404023.975 ops/s
Iteration  27: 3447137.047 ops/s
Iteration  28: 3465176.000 ops/s
Iteration  29: 3449760.121 ops/s
Iteration  30: 3397947.544 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewWithWith":
  3438497.284 ±(99.9%) 27205.558 ops/s [Average]
  (min, avg, max) = (3332289.450, 3438497.284, 3523805.440), stdev = 40720.002
  CI (99.9%): [3411291.726, 3465702.842] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_testNewWithWith  thrpt   30  3438497.284 ± 27205.558  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1569777.237 ops/s
# Warmup Iteration   2: 3194368.741 ops/s
# Warmup Iteration   3: 3015146.004 ops/s
# Warmup Iteration   4: 2799657.194 ops/s
# Warmup Iteration   5: 3152978.468 ops/s
# Warmup Iteration   6: 3150930.428 ops/s
# Warmup Iteration   7: 3169446.725 ops/s
# Warmup Iteration   8: 3142829.139 ops/s
# Warmup Iteration   9: 3153726.805 ops/s
# Warmup Iteration  10: 3030798.786 ops/s
# Warmup Iteration  11: 3196275.273 ops/s
# Warmup Iteration  12: 3205315.672 ops/s
# Warmup Iteration  13: 3084565.763 ops/s
# Warmup Iteration  14: 3208453.481 ops/s
# Warmup Iteration  15: 3170158.946 ops/s
# Warmup Iteration  16: 3105617.964 ops/s
# Warmup Iteration  17: 3064655.593 ops/s
# Warmup Iteration  18: 3187991.631 ops/s
# Warmup Iteration  19: 3158115.406 ops/s
# Warmup Iteration  20: 3203870.475 ops/s
# Warmup Iteration  21: 3127492.710 ops/s
# Warmup Iteration  22: 3182478.301 ops/s
# Warmup Iteration  23: 3132751.435 ops/s
# Warmup Iteration  24: 3172158.511 ops/s
# Warmup Iteration  25: 3177370.289 ops/s
# Warmup Iteration  26: 3196954.509 ops/s
# Warmup Iteration  27: 3176747.193 ops/s
# Warmup Iteration  28: 3170750.102 ops/s
# Warmup Iteration  29: 3188491.595 ops/s
# Warmup Iteration  30: 3196300.598 ops/s
Iteration   1: 3202355.056 ops/s
Iteration   2: 3072375.482 ops/s
Iteration   3: 3151866.005 ops/s
Iteration   4: 3250886.319 ops/s
Iteration   5: 3177909.269 ops/s
Iteration   6: 3079322.868 ops/s
Iteration   7: 3165563.886 ops/s
Iteration   8: 3261336.089 ops/s
Iteration   9: 3204227.807 ops/s
Iteration  10: 3162775.608 ops/s
Iteration  11: 3185549.372 ops/s
Iteration  12: 3228145.730 ops/s
Iteration  13: 3167620.059 ops/s
Iteration  14: 3186614.619 ops/s
Iteration  15: 3197924.083 ops/s
Iteration  16: 3108638.701 ops/s
Iteration  17: 3142546.850 ops/s
Iteration  18: 3186176.911 ops/s
Iteration  19: 3156415.926 ops/s
Iteration  20: 3115127.835 ops/s
Iteration  21: 3257580.135 ops/s
Iteration  22: 3241626.363 ops/s
Iteration  23: 3182032.899 ops/s
Iteration  24: 3171925.062 ops/s
Iteration  25: 3188843.310 ops/s
Iteration  26: 3195476.988 ops/s
Iteration  27: 3192119.364 ops/s
Iteration  28: 3145006.027 ops/s
Iteration  29: 3228694.619 ops/s
Iteration  30: 3203383.137 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testNewWithWithWith":
  3180335.546 ±(99.9%) 31484.690 ops/s [Average]
  (min, avg, max) = (3072375.482, 3180335.546, 3261336.089), stdev = 47124.805
  CI (99.9%): [3148850.856, 3211820.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  3180335.546 ± 31484.690  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2097056.283 ops/s
# Warmup Iteration   2: 4884319.193 ops/s
# Warmup Iteration   3: 5042887.723 ops/s
# Warmup Iteration   4: 4144206.840 ops/s
# Warmup Iteration   5: 5027941.172 ops/s
# Warmup Iteration   6: 5026876.684 ops/s
# Warmup Iteration   7: 5045642.270 ops/s
# Warmup Iteration   8: 5040855.020 ops/s
# Warmup Iteration   9: 5024669.632 ops/s
# Warmup Iteration  10: 5053627.473 ops/s
# Warmup Iteration  11: 5040989.917 ops/s
# Warmup Iteration  12: 5028986.004 ops/s
# Warmup Iteration  13: 5047608.516 ops/s
# Warmup Iteration  14: 5002818.830 ops/s
# Warmup Iteration  15: 4986122.147 ops/s
# Warmup Iteration  16: 5027521.646 ops/s
# Warmup Iteration  17: 4959953.573 ops/s
# Warmup Iteration  18: 5031593.829 ops/s
# Warmup Iteration  19: 5044203.929 ops/s
# Warmup Iteration  20: 5034847.374 ops/s
# Warmup Iteration  21: 4991143.681 ops/s
# Warmup Iteration  22: 5029115.861 ops/s
# Warmup Iteration  23: 5036848.590 ops/s
# Warmup Iteration  24: 5050136.056 ops/s
# Warmup Iteration  25: 5001675.019 ops/s
# Warmup Iteration  26: 4967517.734 ops/s
# Warmup Iteration  27: 5007545.239 ops/s
# Warmup Iteration  28: 5020566.799 ops/s
# Warmup Iteration  29: 4940367.136 ops/s
# Warmup Iteration  30: 5025749.489 ops/s
Iteration   1: 4973892.459 ops/s
Iteration   2: 4943926.265 ops/s
Iteration   3: 5017183.039 ops/s
Iteration   4: 5034755.355 ops/s
Iteration   5: 5005378.454 ops/s
Iteration   6: 5035124.711 ops/s
Iteration   7: 5036540.650 ops/s
Iteration   8: 5015271.632 ops/s
Iteration   9: 5004127.698 ops/s
Iteration  10: 4917067.952 ops/s
Iteration  11: 5041309.496 ops/s
Iteration  12: 5048300.018 ops/s
Iteration  13: 5026188.692 ops/s
Iteration  14: 5067518.426 ops/s
Iteration  15: 5060614.136 ops/s
Iteration  16: 5065887.175 ops/s
Iteration  17: 5023419.669 ops/s
Iteration  18: 5057582.979 ops/s
Iteration  19: 5042840.365 ops/s
Iteration  20: 5018467.768 ops/s
Iteration  21: 5034668.124 ops/s
Iteration  22: 5008584.590 ops/s
Iteration  23: 5028089.630 ops/s
Iteration  24: 5036830.753 ops/s
Iteration  25: 4911433.519 ops/s
Iteration  26: 4968694.053 ops/s
Iteration  27: 5011134.476 ops/s
Iteration  28: 4960397.491 ops/s
Iteration  29: 4987517.162 ops/s
Iteration  30: 4979736.535 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_testToString":
  5012082.776 ±(99.9%) 27327.895 ops/s [Average]
  (min, avg, max) = (4911433.519, 5012082.776, 5067518.426), stdev = 40903.110
  CI (99.9%): [4984754.881, 5039410.671] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_testToString  thrpt   30  5012082.776 ± 27327.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2358284.284 ops/s
# Warmup Iteration   2: 5395325.928 ops/s
# Warmup Iteration   3: 4428166.954 ops/s
# Warmup Iteration   4: 5375886.024 ops/s
# Warmup Iteration   5: 5392137.364 ops/s
# Warmup Iteration   6: 5369435.319 ops/s
# Warmup Iteration   7: 5373256.475 ops/s
# Warmup Iteration   8: 5322039.557 ops/s
# Warmup Iteration   9: 5385607.304 ops/s
# Warmup Iteration  10: 5373742.180 ops/s
# Warmup Iteration  11: 5365740.618 ops/s
# Warmup Iteration  12: 5373034.504 ops/s
# Warmup Iteration  13: 5371572.391 ops/s
# Warmup Iteration  14: 5361988.571 ops/s
# Warmup Iteration  15: 5376682.735 ops/s
# Warmup Iteration  16: 5359565.719 ops/s
# Warmup Iteration  17: 5367117.783 ops/s
# Warmup Iteration  18: 5419637.491 ops/s
# Warmup Iteration  19: 5371833.712 ops/s
# Warmup Iteration  20: 5397018.712 ops/s
# Warmup Iteration  21: 5345790.773 ops/s
# Warmup Iteration  22: 5391225.028 ops/s
# Warmup Iteration  23: 5365966.873 ops/s
# Warmup Iteration  24: 5408653.443 ops/s
# Warmup Iteration  25: 5401360.875 ops/s
# Warmup Iteration  26: 5407465.464 ops/s
# Warmup Iteration  27: 5394303.229 ops/s
# Warmup Iteration  28: 5367450.583 ops/s
# Warmup Iteration  29: 5399211.155 ops/s
# Warmup Iteration  30: 5399991.928 ops/s
Iteration   1: 5394436.356 ops/s
Iteration   2: 5405546.048 ops/s
Iteration   3: 5367296.753 ops/s
Iteration   4: 5412733.442 ops/s
Iteration   5: 5322534.177 ops/s
Iteration   6: 5395861.124 ops/s
Iteration   7: 5343205.933 ops/s
Iteration   8: 5398818.824 ops/s
Iteration   9: 5410062.352 ops/s
Iteration  10: 5407400.042 ops/s
Iteration  11: 5432029.840 ops/s
Iteration  12: 5376592.900 ops/s
Iteration  13: 5415581.247 ops/s
Iteration  14: 5381839.872 ops/s
Iteration  15: 5409343.161 ops/s
Iteration  16: 5411742.400 ops/s
Iteration  17: 5413637.202 ops/s
Iteration  18: 5388863.661 ops/s
Iteration  19: 5407231.486 ops/s
Iteration  20: 5317389.511 ops/s
Iteration  21: 5375651.980 ops/s
Iteration  22: 5333418.630 ops/s
Iteration  23: 5388734.938 ops/s
Iteration  24: 5404652.008 ops/s
Iteration  25: 5308449.687 ops/s
Iteration  26: 5385007.044 ops/s
Iteration  27: 5400821.413 ops/s
Iteration  28: 5389329.641 ops/s
Iteration  29: 5379914.691 ops/s
Iteration  30: 5387173.428 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toArray":
  5385509.993 ±(99.9%) 20914.174 ops/s [Average]
  (min, avg, max) = (5308449.687, 5385509.993, 5432029.840), stdev = 31303.353
  CI (99.9%): [5364595.819, 5406424.167] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toArray  thrpt   30  5385509.993 ± 20914.174  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 928429.606 ops/s
# Warmup Iteration   2: 1655604.058 ops/s
# Warmup Iteration   3: 1899905.398 ops/s
# Warmup Iteration   4: 1911922.319 ops/s
# Warmup Iteration   5: 1911285.174 ops/s
# Warmup Iteration   6: 1536761.711 ops/s
# Warmup Iteration   7: 1883254.876 ops/s
# Warmup Iteration   8: 1916197.475 ops/s
# Warmup Iteration   9: 1907912.398 ops/s
# Warmup Iteration  10: 1906750.019 ops/s
# Warmup Iteration  11: 1907577.536 ops/s
# Warmup Iteration  12: 1913752.108 ops/s
# Warmup Iteration  13: 1913914.786 ops/s
# Warmup Iteration  14: 1902368.672 ops/s
# Warmup Iteration  15: 1899954.933 ops/s
# Warmup Iteration  16: 1910705.728 ops/s
# Warmup Iteration  17: 1901962.955 ops/s
# Warmup Iteration  18: 1907118.766 ops/s
# Warmup Iteration  19: 1914689.322 ops/s
# Warmup Iteration  20: 1899954.218 ops/s
# Warmup Iteration  21: 1906005.051 ops/s
# Warmup Iteration  22: 1896775.992 ops/s
# Warmup Iteration  23: 1885708.516 ops/s
# Warmup Iteration  24: 1914644.915 ops/s
# Warmup Iteration  25: 1914165.612 ops/s
# Warmup Iteration  26: 1910202.198 ops/s
# Warmup Iteration  27: 1911634.252 ops/s
# Warmup Iteration  28: 1903924.447 ops/s
# Warmup Iteration  29: 1902781.078 ops/s
# Warmup Iteration  30: 1910738.637 ops/s
Iteration   1: 1908987.748 ops/s
Iteration   2: 1912769.904 ops/s
Iteration   3: 1917745.534 ops/s
Iteration   4: 1910890.204 ops/s
Iteration   5: 1881078.124 ops/s
Iteration   6: 1911952.796 ops/s
Iteration   7: 1912365.872 ops/s
Iteration   8: 1910440.935 ops/s
Iteration   9: 1899255.995 ops/s
Iteration  10: 1904533.395 ops/s
Iteration  11: 1897548.652 ops/s
Iteration  12: 1917521.715 ops/s
Iteration  13: 1907639.291 ops/s
Iteration  14: 1914773.437 ops/s
Iteration  15: 1903410.230 ops/s
Iteration  16: 1900476.239 ops/s
Iteration  17: 1909481.062 ops/s
Iteration  18: 1913607.860 ops/s
Iteration  19: 1923700.441 ops/s
Iteration  20: 1920170.893 ops/s
Iteration  21: 1915635.758 ops/s
Iteration  22: 1913934.132 ops/s
Iteration  23: 1888675.129 ops/s
Iteration  24: 1897069.456 ops/s
Iteration  25: 1911550.724 ops/s
Iteration  26: 1906881.989 ops/s
Iteration  27: 1907509.519 ops/s
Iteration  28: 1917852.872 ops/s
Iteration  29: 1911082.371 ops/s
Iteration  30: 1897249.184 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toBag":
  1908193.049 ±(99.9%) 6270.402 ops/s [Average]
  (min, avg, max) = (1881078.124, 1908193.049, 1923700.441), stdev = 9385.244
  CI (99.9%): [1901922.647, 1914463.451] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toBag  thrpt   30  1908193.049 ± 6270.402  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 97121.845 ops/s
# Warmup Iteration   2: 129999.754 ops/s
# Warmup Iteration   3: 163116.280 ops/s
# Warmup Iteration   4: 161256.677 ops/s
# Warmup Iteration   5: 161301.315 ops/s
# Warmup Iteration   6: 162970.547 ops/s
# Warmup Iteration   7: 162163.223 ops/s
# Warmup Iteration   8: 145180.974 ops/s
# Warmup Iteration   9: 153077.201 ops/s
# Warmup Iteration  10: 163697.399 ops/s
# Warmup Iteration  11: 163092.451 ops/s
# Warmup Iteration  12: 162438.378 ops/s
# Warmup Iteration  13: 161453.843 ops/s
# Warmup Iteration  14: 162947.651 ops/s
# Warmup Iteration  15: 161717.829 ops/s
# Warmup Iteration  16: 163881.502 ops/s
# Warmup Iteration  17: 168753.924 ops/s
# Warmup Iteration  18: 168938.844 ops/s
# Warmup Iteration  19: 168260.112 ops/s
# Warmup Iteration  20: 168233.659 ops/s
# Warmup Iteration  21: 167202.318 ops/s
# Warmup Iteration  22: 169124.607 ops/s
# Warmup Iteration  23: 168135.021 ops/s
# Warmup Iteration  24: 169492.413 ops/s
# Warmup Iteration  25: 166987.650 ops/s
# Warmup Iteration  26: 167791.395 ops/s
# Warmup Iteration  27: 168243.614 ops/s
# Warmup Iteration  28: 168596.213 ops/s
# Warmup Iteration  29: 168868.479 ops/s
# Warmup Iteration  30: 168621.224 ops/s
Iteration   1: 168947.044 ops/s
Iteration   2: 168559.292 ops/s
Iteration   3: 168850.128 ops/s
Iteration   4: 167623.803 ops/s
Iteration   5: 169585.174 ops/s
Iteration   6: 169069.753 ops/s
Iteration   7: 167829.396 ops/s
Iteration   8: 169327.803 ops/s
Iteration   9: 163001.798 ops/s
Iteration  10: 168198.631 ops/s
Iteration  11: 169322.266 ops/s
Iteration  12: 169518.098 ops/s
Iteration  13: 167991.672 ops/s
Iteration  14: 166239.262 ops/s
Iteration  15: 166415.507 ops/s
Iteration  16: 163199.868 ops/s
Iteration  17: 168679.474 ops/s
Iteration  18: 166140.988 ops/s
Iteration  19: 165267.285 ops/s
Iteration  20: 169504.153 ops/s
Iteration  21: 168288.182 ops/s
Iteration  22: 169124.784 ops/s
Iteration  23: 166029.162 ops/s
Iteration  24: 167810.487 ops/s
Iteration  25: 163382.922 ops/s
Iteration  26: 168833.347 ops/s
Iteration  27: 169506.403 ops/s
Iteration  28: 168760.782 ops/s
Iteration  29: 168218.064 ops/s
Iteration  30: 168589.006 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toBiMap":
  167727.151 ±(99.9%) 1284.464 ops/s [Average]
  (min, avg, max) = (163001.798, 167727.151, 169585.174), stdev = 1922.525
  CI (99.9%): [166442.687, 169011.615] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toBiMap  thrpt   30  167727.151 ± 1284.464  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3042199.306 ops/s
# Warmup Iteration   2: 6925311.695 ops/s
# Warmup Iteration   3: 5953035.028 ops/s
# Warmup Iteration   4: 7219338.843 ops/s
# Warmup Iteration   5: 7175524.555 ops/s
# Warmup Iteration   6: 7135294.849 ops/s
# Warmup Iteration   7: 7209652.110 ops/s
# Warmup Iteration   8: 7223278.682 ops/s
# Warmup Iteration   9: 7211920.816 ops/s
# Warmup Iteration  10: 7244482.978 ops/s
# Warmup Iteration  11: 7231541.962 ops/s
# Warmup Iteration  12: 7239782.062 ops/s
# Warmup Iteration  13: 7165237.650 ops/s
# Warmup Iteration  14: 7233928.133 ops/s
# Warmup Iteration  15: 7228071.554 ops/s
# Warmup Iteration  16: 7184453.497 ops/s
# Warmup Iteration  17: 7287681.216 ops/s
# Warmup Iteration  18: 7230828.476 ops/s
# Warmup Iteration  19: 7216510.453 ops/s
# Warmup Iteration  20: 7268888.026 ops/s
# Warmup Iteration  21: 7237152.755 ops/s
# Warmup Iteration  22: 7201249.496 ops/s
# Warmup Iteration  23: 7269514.592 ops/s
# Warmup Iteration  24: 7239174.661 ops/s
# Warmup Iteration  25: 7252469.477 ops/s
# Warmup Iteration  26: 7286483.159 ops/s
# Warmup Iteration  27: 7157799.488 ops/s
# Warmup Iteration  28: 7215601.057 ops/s
# Warmup Iteration  29: 7246932.979 ops/s
# Warmup Iteration  30: 7186912.332 ops/s
Iteration   1: 7256436.178 ops/s
Iteration   2: 7127710.769 ops/s
Iteration   3: 7283561.345 ops/s
Iteration   4: 7237536.634 ops/s
Iteration   5: 7204177.653 ops/s
Iteration   6: 7282878.638 ops/s
Iteration   7: 7257482.568 ops/s
Iteration   8: 7214433.046 ops/s
Iteration   9: 7133206.539 ops/s
Iteration  10: 7223290.804 ops/s
Iteration  11: 7232363.761 ops/s
Iteration  12: 7191728.818 ops/s
Iteration  13: 7230694.420 ops/s
Iteration  14: 7114286.424 ops/s
Iteration  15: 7119993.933 ops/s
Iteration  16: 7238137.635 ops/s
Iteration  17: 7267621.550 ops/s
Iteration  18: 7276914.030 ops/s
Iteration  19: 7277258.925 ops/s
Iteration  20: 7309874.484 ops/s
Iteration  21: 7257780.105 ops/s
Iteration  22: 7265127.511 ops/s
Iteration  23: 7293076.589 ops/s
Iteration  24: 7152111.083 ops/s
Iteration  25: 7258478.479 ops/s
Iteration  26: 7206769.588 ops/s
Iteration  27: 7254942.288 ops/s
Iteration  28: 7251758.412 ops/s
Iteration  29: 7052793.606 ops/s
Iteration  30: 7269792.856 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toCollection":
  7224740.622 ±(99.9%) 41865.922 ops/s [Average]
  (min, avg, max) = (7052793.606, 7224740.622, 7309874.484), stdev = 62662.946
  CI (99.9%): [7182874.700, 7266606.545] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toCollection  thrpt   30  7224740.622 ± 41865.922  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1243416.120 ops/s
# Warmup Iteration   2: 2642687.780 ops/s
# Warmup Iteration   3: 2713728.785 ops/s
# Warmup Iteration   4: 2280256.481 ops/s
# Warmup Iteration   5: 2715281.793 ops/s
# Warmup Iteration   6: 2690811.744 ops/s
# Warmup Iteration   7: 2697071.938 ops/s
# Warmup Iteration   8: 2712189.048 ops/s
# Warmup Iteration   9: 2717858.212 ops/s
# Warmup Iteration  10: 2710881.111 ops/s
# Warmup Iteration  11: 2699094.178 ops/s
# Warmup Iteration  12: 2683394.610 ops/s
# Warmup Iteration  13: 2687098.460 ops/s
# Warmup Iteration  14: 2719455.301 ops/s
# Warmup Iteration  15: 2714884.718 ops/s
# Warmup Iteration  16: 2715522.786 ops/s
# Warmup Iteration  17: 2668556.643 ops/s
# Warmup Iteration  18: 2692647.069 ops/s
# Warmup Iteration  19: 2688540.988 ops/s
# Warmup Iteration  20: 2679970.499 ops/s
# Warmup Iteration  21: 2713955.176 ops/s
# Warmup Iteration  22: 2718212.619 ops/s
# Warmup Iteration  23: 2728020.597 ops/s
# Warmup Iteration  24: 2692059.110 ops/s
# Warmup Iteration  25: 2706490.414 ops/s
# Warmup Iteration  26: 2716568.875 ops/s
# Warmup Iteration  27: 2706458.030 ops/s
# Warmup Iteration  28: 2713741.181 ops/s
# Warmup Iteration  29: 2710886.672 ops/s
# Warmup Iteration  30: 2709359.421 ops/s
Iteration   1: 2718810.567 ops/s
Iteration   2: 2703068.046 ops/s
Iteration   3: 2724732.929 ops/s
Iteration   4: 2717733.294 ops/s
Iteration   5: 2725615.443 ops/s
Iteration   6: 2719923.070 ops/s
Iteration   7: 2716612.826 ops/s
Iteration   8: 2702408.212 ops/s
Iteration   9: 2724837.559 ops/s
Iteration  10: 2711247.924 ops/s
Iteration  11: 2711299.646 ops/s
Iteration  12: 2703312.216 ops/s
Iteration  13: 2692096.316 ops/s
Iteration  14: 2706999.340 ops/s
Iteration  15: 2720557.777 ops/s
Iteration  16: 2628566.504 ops/s
Iteration  17: 2691970.494 ops/s
Iteration  18: 2714085.126 ops/s
Iteration  19: 2684877.397 ops/s
Iteration  20: 2712641.100 ops/s
Iteration  21: 2719561.303 ops/s
Iteration  22: 2711293.059 ops/s
Iteration  23: 2703993.513 ops/s
Iteration  24: 2720290.033 ops/s
Iteration  25: 2712610.662 ops/s
Iteration  26: 2633262.171 ops/s
Iteration  27: 2711476.108 ops/s
Iteration  28: 2727523.846 ops/s
Iteration  29: 2715628.176 ops/s
Iteration  30: 2720765.181 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutable":
  2706926.661 ±(99.9%) 15431.403 ops/s [Average]
  (min, avg, max) = (2628566.504, 2706926.661, 2727523.846), stdev = 23097.000
  CI (99.9%): [2691495.258, 2722358.065] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutable  thrpt   30  2706926.661 ± 15431.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 480314.292 ops/s
# Warmup Iteration   2: 929354.855 ops/s
# Warmup Iteration   3: 1052328.808 ops/s
# Warmup Iteration   4: 1041216.805 ops/s
# Warmup Iteration   5: 927403.940 ops/s
# Warmup Iteration   6: 1004511.960 ops/s
# Warmup Iteration   7: 1059559.233 ops/s
# Warmup Iteration   8: 1061667.188 ops/s
# Warmup Iteration   9: 1059730.591 ops/s
# Warmup Iteration  10: 1052096.239 ops/s
# Warmup Iteration  11: 1062470.632 ops/s
# Warmup Iteration  12: 1062126.012 ops/s
# Warmup Iteration  13: 1059332.433 ops/s
# Warmup Iteration  14: 1058927.173 ops/s
# Warmup Iteration  15: 1063274.322 ops/s
# Warmup Iteration  16: 1050378.542 ops/s
# Warmup Iteration  17: 1062304.395 ops/s
# Warmup Iteration  18: 1060304.548 ops/s
# Warmup Iteration  19: 1057710.705 ops/s
# Warmup Iteration  20: 1062615.121 ops/s
# Warmup Iteration  21: 1057728.758 ops/s
# Warmup Iteration  22: 1054207.320 ops/s
# Warmup Iteration  23: 1057150.832 ops/s
# Warmup Iteration  24: 1051101.106 ops/s
# Warmup Iteration  25: 1057363.864 ops/s
# Warmup Iteration  26: 1057952.485 ops/s
# Warmup Iteration  27: 1060290.464 ops/s
# Warmup Iteration  28: 1062983.761 ops/s
# Warmup Iteration  29: 1060658.557 ops/s
# Warmup Iteration  30: 1057505.085 ops/s
Iteration   1: 1046616.877 ops/s
Iteration   2: 1061394.099 ops/s
Iteration   3: 1060922.493 ops/s
Iteration   4: 1060561.961 ops/s
Iteration   5: 1059168.660 ops/s
Iteration   6: 1063504.207 ops/s
Iteration   7: 1055670.864 ops/s
Iteration   8: 1053396.237 ops/s
Iteration   9: 1043529.731 ops/s
Iteration  10: 1060039.192 ops/s
Iteration  11: 1063249.207 ops/s
Iteration  12: 1064061.336 ops/s
Iteration  13: 1050013.635 ops/s
Iteration  14: 1046309.493 ops/s
Iteration  15: 1058916.268 ops/s
Iteration  16: 1047775.882 ops/s
Iteration  17: 1064107.675 ops/s
Iteration  18: 1044492.634 ops/s
Iteration  19: 1052412.056 ops/s
Iteration  20: 1063215.800 ops/s
Iteration  21: 1062778.686 ops/s
Iteration  22: 1062862.436 ops/s
Iteration  23: 1039654.104 ops/s
Iteration  24: 1041845.380 ops/s
Iteration  25: 1060823.489 ops/s
Iteration  26: 1058706.231 ops/s
Iteration  27: 1060892.997 ops/s
Iteration  28: 1059438.469 ops/s
Iteration  29: 1059643.003 ops/s
Iteration  30: 1044502.147 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableBag":
  1055683.508 ±(99.9%) 5209.518 ops/s [Average]
  (min, avg, max) = (1039654.104, 1055683.508, 1064107.675), stdev = 7797.362
  CI (99.9%): [1050473.990, 1060893.026] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1055683.508 ± 5209.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 88479.059 ops/s
# Warmup Iteration   2: 121796.380 ops/s
# Warmup Iteration   3: 155610.448 ops/s
# Warmup Iteration   4: 154283.630 ops/s
# Warmup Iteration   5: 154615.124 ops/s
# Warmup Iteration   6: 153907.537 ops/s
# Warmup Iteration   7: 155260.151 ops/s
# Warmup Iteration   8: 128913.113 ops/s
# Warmup Iteration   9: 155310.998 ops/s
# Warmup Iteration  10: 155172.736 ops/s
# Warmup Iteration  11: 153528.687 ops/s
# Warmup Iteration  12: 155497.926 ops/s
# Warmup Iteration  13: 155569.091 ops/s
# Warmup Iteration  14: 154606.699 ops/s
# Warmup Iteration  15: 155414.569 ops/s
# Warmup Iteration  16: 153599.532 ops/s
# Warmup Iteration  17: 159545.294 ops/s
# Warmup Iteration  18: 159604.344 ops/s
# Warmup Iteration  19: 156117.468 ops/s
# Warmup Iteration  20: 160120.583 ops/s
# Warmup Iteration  21: 159356.472 ops/s
# Warmup Iteration  22: 159124.334 ops/s
# Warmup Iteration  23: 159871.330 ops/s
# Warmup Iteration  24: 159593.545 ops/s
# Warmup Iteration  25: 160259.411 ops/s
# Warmup Iteration  26: 158496.459 ops/s
# Warmup Iteration  27: 159029.940 ops/s
# Warmup Iteration  28: 159446.716 ops/s
# Warmup Iteration  29: 158533.280 ops/s
# Warmup Iteration  30: 158539.059 ops/s
Iteration   1: 159255.293 ops/s
Iteration   2: 154024.357 ops/s
Iteration   3: 156894.340 ops/s
Iteration   4: 158261.347 ops/s
Iteration   5: 159940.599 ops/s
Iteration   6: 159242.851 ops/s
Iteration   7: 160297.743 ops/s
Iteration   8: 159819.438 ops/s
Iteration   9: 160610.620 ops/s
Iteration  10: 160650.250 ops/s
Iteration  11: 160576.957 ops/s
Iteration  12: 159572.149 ops/s
Iteration  13: 159556.857 ops/s
Iteration  14: 157699.803 ops/s
Iteration  15: 159532.132 ops/s
Iteration  16: 159219.820 ops/s
Iteration  17: 159180.100 ops/s
Iteration  18: 158783.694 ops/s
Iteration  19: 159019.692 ops/s
Iteration  20: 157760.908 ops/s
Iteration  21: 158177.180 ops/s
Iteration  22: 159023.303 ops/s
Iteration  23: 159560.967 ops/s
Iteration  24: 159774.977 ops/s
Iteration  25: 159662.058 ops/s
Iteration  26: 158642.986 ops/s
Iteration  27: 159869.761 ops/s
Iteration  28: 159611.470 ops/s
Iteration  29: 159524.263 ops/s
Iteration  30: 156267.374 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableBiMap":
  159000.443 ±(99.9%) 930.165 ops/s [Average]
  (min, avg, max) = (154024.357, 159000.443, 160650.250), stdev = 1392.228
  CI (99.9%): [158070.278, 159930.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  159000.443 ± 930.165  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1220400.261 ops/s
# Warmup Iteration   2: 2996106.272 ops/s
# Warmup Iteration   3: 3006631.494 ops/s
# Warmup Iteration   4: 2557103.569 ops/s
# Warmup Iteration   5: 3046505.770 ops/s
# Warmup Iteration   6: 3035977.322 ops/s
# Warmup Iteration   7: 3048879.592 ops/s
# Warmup Iteration   8: 3026710.929 ops/s
# Warmup Iteration   9: 3018033.438 ops/s
# Warmup Iteration  10: 3038747.320 ops/s
# Warmup Iteration  11: 3037868.893 ops/s
# Warmup Iteration  12: 3037067.429 ops/s
# Warmup Iteration  13: 3033957.721 ops/s
# Warmup Iteration  14: 3040271.496 ops/s
# Warmup Iteration  15: 3002884.076 ops/s
# Warmup Iteration  16: 3025518.040 ops/s
# Warmup Iteration  17: 3023556.758 ops/s
# Warmup Iteration  18: 3041647.093 ops/s
# Warmup Iteration  19: 3012807.866 ops/s
# Warmup Iteration  20: 3041508.765 ops/s
# Warmup Iteration  21: 3030647.145 ops/s
# Warmup Iteration  22: 3032328.454 ops/s
# Warmup Iteration  23: 3026084.707 ops/s
# Warmup Iteration  24: 3007479.248 ops/s
# Warmup Iteration  25: 3029015.726 ops/s
# Warmup Iteration  26: 2977945.266 ops/s
# Warmup Iteration  27: 3032649.248 ops/s
# Warmup Iteration  28: 3016048.010 ops/s
# Warmup Iteration  29: 3037999.363 ops/s
# Warmup Iteration  30: 3026197.320 ops/s
Iteration   1: 3037132.611 ops/s
Iteration   2: 2997006.093 ops/s
Iteration   3: 3030714.277 ops/s
Iteration   4: 2991131.269 ops/s
Iteration   5: 3025602.358 ops/s
Iteration   6: 3040767.332 ops/s
Iteration   7: 3030116.894 ops/s
Iteration   8: 3022981.260 ops/s
Iteration   9: 3037509.919 ops/s
Iteration  10: 3035295.582 ops/s
Iteration  11: 3041397.327 ops/s
Iteration  12: 2979141.409 ops/s
Iteration  13: 2990148.202 ops/s
Iteration  14: 2993491.452 ops/s
Iteration  15: 3028950.932 ops/s
Iteration  16: 3037334.914 ops/s
Iteration  17: 3036578.087 ops/s
Iteration  18: 3009713.056 ops/s
Iteration  19: 3041445.840 ops/s
Iteration  20: 3036678.106 ops/s
Iteration  21: 2971827.733 ops/s
Iteration  22: 3045256.501 ops/s
Iteration  23: 3027718.454 ops/s
Iteration  24: 3030455.463 ops/s
Iteration  25: 3029047.689 ops/s
Iteration  26: 3047271.558 ops/s
Iteration  27: 3045543.968 ops/s
Iteration  28: 3026909.091 ops/s
Iteration  29: 2995577.658 ops/s
Iteration  30: 3042677.151 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableList":
  3023514.073 ±(99.9%) 14414.454 ops/s [Average]
  (min, avg, max) = (2971827.733, 3023514.073, 3047271.558), stdev = 21574.878
  CI (99.9%): [3009099.619, 3037928.527] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutableList  thrpt   30  3023514.073 ± 14414.454  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 610727.209 ops/s
# Warmup Iteration   2: 1420434.568 ops/s
# Warmup Iteration   3: 1467058.352 ops/s
# Warmup Iteration   4: 1216515.054 ops/s
# Warmup Iteration   5: 1453623.941 ops/s
# Warmup Iteration   6: 1476195.461 ops/s
# Warmup Iteration   7: 1472296.123 ops/s
# Warmup Iteration   8: 1452756.092 ops/s
# Warmup Iteration   9: 1458090.469 ops/s
# Warmup Iteration  10: 1460447.045 ops/s
# Warmup Iteration  11: 1458767.521 ops/s
# Warmup Iteration  12: 1466488.332 ops/s
# Warmup Iteration  13: 1460924.291 ops/s
# Warmup Iteration  14: 1464263.500 ops/s
# Warmup Iteration  15: 1469767.339 ops/s
# Warmup Iteration  16: 1469388.470 ops/s
# Warmup Iteration  17: 1446188.885 ops/s
# Warmup Iteration  18: 1467510.593 ops/s
# Warmup Iteration  19: 1464731.010 ops/s
# Warmup Iteration  20: 1458440.376 ops/s
# Warmup Iteration  21: 1467941.961 ops/s
# Warmup Iteration  22: 1465006.481 ops/s
# Warmup Iteration  23: 1455072.576 ops/s
# Warmup Iteration  24: 1453178.610 ops/s
# Warmup Iteration  25: 1450759.967 ops/s
# Warmup Iteration  26: 1444246.877 ops/s
# Warmup Iteration  27: 1454494.925 ops/s
# Warmup Iteration  28: 1447403.256 ops/s
# Warmup Iteration  29: 1462088.931 ops/s
# Warmup Iteration  30: 1460399.930 ops/s
Iteration   1: 1476614.412 ops/s
Iteration   2: 1448725.519 ops/s
Iteration   3: 1431047.937 ops/s
Iteration   4: 1463186.193 ops/s
Iteration   5: 1454839.673 ops/s
Iteration   6: 1451071.901 ops/s
Iteration   7: 1468915.650 ops/s
Iteration   8: 1463911.202 ops/s
Iteration   9: 1453759.347 ops/s
Iteration  10: 1451292.253 ops/s
Iteration  11: 1472965.652 ops/s
Iteration  12: 1460382.656 ops/s
Iteration  13: 1445551.116 ops/s
Iteration  14: 1439340.315 ops/s
Iteration  15: 1471594.098 ops/s
Iteration  16: 1466904.996 ops/s
Iteration  17: 1455758.369 ops/s
Iteration  18: 1450891.632 ops/s
Iteration  19: 1463400.585 ops/s
Iteration  20: 1458495.342 ops/s
Iteration  21: 1459568.374 ops/s
Iteration  22: 1461207.699 ops/s
Iteration  23: 1448147.876 ops/s
Iteration  24: 1457037.411 ops/s
Iteration  25: 1459667.914 ops/s
Iteration  26: 1450394.934 ops/s
Iteration  27: 1456916.492 ops/s
Iteration  28: 1440105.235 ops/s
Iteration  29: 1454841.061 ops/s
Iteration  30: 1452782.033 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableMap":
  1456310.596 ±(99.9%) 6780.706 ops/s [Average]
  (min, avg, max) = (1431047.937, 1456310.596, 1476614.412), stdev = 10149.043
  CI (99.9%): [1449529.890, 1463091.302] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1456310.596 ± 6780.706  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 800092.508 ops/s
# Warmup Iteration   2: 1549935.889 ops/s
# Warmup Iteration   3: 1698842.072 ops/s
# Warmup Iteration   4: 1689896.892 ops/s
# Warmup Iteration   5: 1404403.120 ops/s
# Warmup Iteration   6: 1695181.108 ops/s
# Warmup Iteration   7: 1706687.163 ops/s
# Warmup Iteration   8: 1707866.308 ops/s
# Warmup Iteration   9: 1712657.432 ops/s
# Warmup Iteration  10: 1712244.873 ops/s
# Warmup Iteration  11: 1697404.570 ops/s
# Warmup Iteration  12: 1704885.703 ops/s
# Warmup Iteration  13: 1706336.321 ops/s
# Warmup Iteration  14: 1700700.979 ops/s
# Warmup Iteration  15: 1711068.179 ops/s
# Warmup Iteration  16: 1710650.317 ops/s
# Warmup Iteration  17: 1695463.137 ops/s
# Warmup Iteration  18: 1709596.558 ops/s
# Warmup Iteration  19: 1695669.560 ops/s
# Warmup Iteration  20: 1709333.461 ops/s
# Warmup Iteration  21: 1686264.710 ops/s
# Warmup Iteration  22: 1712743.220 ops/s
# Warmup Iteration  23: 1703663.300 ops/s
# Warmup Iteration  24: 1676787.223 ops/s
# Warmup Iteration  25: 1706982.608 ops/s
# Warmup Iteration  26: 1701820.635 ops/s
# Warmup Iteration  27: 1696782.045 ops/s
# Warmup Iteration  28: 1708653.858 ops/s
# Warmup Iteration  29: 1700575.370 ops/s
# Warmup Iteration  30: 1707122.313 ops/s
Iteration   1: 1681893.203 ops/s
Iteration   2: 1703650.565 ops/s
Iteration   3: 1708808.796 ops/s
Iteration   4: 1705331.897 ops/s
Iteration   5: 1706934.195 ops/s
Iteration   6: 1713177.132 ops/s
Iteration   7: 1701242.247 ops/s
Iteration   8: 1710914.949 ops/s
Iteration   9: 1716189.021 ops/s
Iteration  10: 1650784.270 ops/s
Iteration  11: 1701880.781 ops/s
Iteration  12: 1676839.864 ops/s
Iteration  13: 1705463.806 ops/s
Iteration  14: 1704504.242 ops/s
Iteration  15: 1706669.544 ops/s
Iteration  16: 1697337.325 ops/s
Iteration  17: 1698703.351 ops/s
Iteration  18: 1713546.930 ops/s
Iteration  19: 1684298.471 ops/s
Iteration  20: 1702773.651 ops/s
Iteration  21: 1685046.385 ops/s
Iteration  22: 1710004.724 ops/s
Iteration  23: 1690424.885 ops/s
Iteration  24: 1707223.135 ops/s
Iteration  25: 1708356.472 ops/s
Iteration  26: 1706885.925 ops/s
Iteration  27: 1712504.521 ops/s
Iteration  28: 1693341.729 ops/s
Iteration  29: 1708406.066 ops/s
Iteration  30: 1706096.354 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSet":
  1700641.148 ±(99.9%) 9147.211 ops/s [Average]
  (min, avg, max) = (1650784.270, 1700641.148, 1716189.021), stdev = 13691.115
  CI (99.9%): [1691493.937, 1709788.359] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutableSet  thrpt   30  1700641.148 ± 9147.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 680192.822 ops/s
# Warmup Iteration   2: 1654759.168 ops/s
# Warmup Iteration   3: 1678531.985 ops/s
# Warmup Iteration   4: 1394349.894 ops/s
# Warmup Iteration   5: 1694422.858 ops/s
# Warmup Iteration   6: 1695042.825 ops/s
# Warmup Iteration   7: 1698295.258 ops/s
# Warmup Iteration   8: 1698239.105 ops/s
# Warmup Iteration   9: 1691529.131 ops/s
# Warmup Iteration  10: 1686532.654 ops/s
# Warmup Iteration  11: 1696393.897 ops/s
# Warmup Iteration  12: 1697736.890 ops/s
# Warmup Iteration  13: 1694965.383 ops/s
# Warmup Iteration  14: 1674389.206 ops/s
# Warmup Iteration  15: 1666612.129 ops/s
# Warmup Iteration  16: 1700979.650 ops/s
# Warmup Iteration  17: 1701595.767 ops/s
# Warmup Iteration  18: 1692641.811 ops/s
# Warmup Iteration  19: 1695528.144 ops/s
# Warmup Iteration  20: 1700733.429 ops/s
# Warmup Iteration  21: 1698387.841 ops/s
# Warmup Iteration  22: 1686350.931 ops/s
# Warmup Iteration  23: 1699342.132 ops/s
# Warmup Iteration  24: 1697606.360 ops/s
# Warmup Iteration  25: 1692600.686 ops/s
# Warmup Iteration  26: 1702639.373 ops/s
# Warmup Iteration  27: 1703090.821 ops/s
# Warmup Iteration  28: 1679428.454 ops/s
# Warmup Iteration  29: 1699518.504 ops/s
# Warmup Iteration  30: 1699185.601 ops/s
Iteration   1: 1698544.750 ops/s
Iteration   2: 1668145.975 ops/s
Iteration   3: 1692150.093 ops/s
Iteration   4: 1690172.245 ops/s
Iteration   5: 1692256.335 ops/s
Iteration   6: 1671154.440 ops/s
Iteration   7: 1699252.173 ops/s
Iteration   8: 1685608.285 ops/s
Iteration   9: 1675795.867 ops/s
Iteration  10: 1699558.029 ops/s
Iteration  11: 1699777.747 ops/s
Iteration  12: 1701127.818 ops/s
Iteration  13: 1691657.401 ops/s
Iteration  14: 1660678.690 ops/s
Iteration  15: 1699909.520 ops/s
Iteration  16: 1649692.170 ops/s
Iteration  17: 1696201.691 ops/s
Iteration  18: 1696457.258 ops/s
Iteration  19: 1696506.354 ops/s
Iteration  20: 1675510.334 ops/s
Iteration  21: 1704148.474 ops/s
Iteration  22: 1691207.496 ops/s
Iteration  23: 1697452.050 ops/s
Iteration  24: 1693875.694 ops/s
Iteration  25: 1669718.825 ops/s
Iteration  26: 1691553.231 ops/s
Iteration  27: 1699994.599 ops/s
Iteration  28: 1703386.082 ops/s
Iteration  29: 1699572.996 ops/s
Iteration  30: 1708815.397 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  1689996.067 ±(99.9%) 9498.474 ops/s [Average]
  (min, avg, max) = (1649692.170, 1689996.067, 1708815.397), stdev = 14216.870
  CI (99.9%): [1680497.593, 1699494.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  1689996.067 ± 9498.474  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 267816.072 ops/s
# Warmup Iteration   2: 482192.771 ops/s
# Warmup Iteration   3: 605487.169 ops/s
# Warmup Iteration   4: 615019.769 ops/s
# Warmup Iteration   5: 611716.927 ops/s
# Warmup Iteration   6: 484708.488 ops/s
# Warmup Iteration   7: 610204.140 ops/s
# Warmup Iteration   8: 614823.158 ops/s
# Warmup Iteration   9: 614517.245 ops/s
# Warmup Iteration  10: 613143.935 ops/s
# Warmup Iteration  11: 613611.449 ops/s
# Warmup Iteration  12: 608166.232 ops/s
# Warmup Iteration  13: 615448.742 ops/s
# Warmup Iteration  14: 614212.459 ops/s
# Warmup Iteration  15: 607573.687 ops/s
# Warmup Iteration  16: 610989.349 ops/s
# Warmup Iteration  17: 615005.653 ops/s
# Warmup Iteration  18: 613282.663 ops/s
# Warmup Iteration  19: 614071.584 ops/s
# Warmup Iteration  20: 613649.801 ops/s
# Warmup Iteration  21: 605514.247 ops/s
# Warmup Iteration  22: 608775.507 ops/s
# Warmup Iteration  23: 613800.814 ops/s
# Warmup Iteration  24: 614556.836 ops/s
# Warmup Iteration  25: 613613.894 ops/s
# Warmup Iteration  26: 612083.177 ops/s
# Warmup Iteration  27: 613483.351 ops/s
# Warmup Iteration  28: 608837.978 ops/s
# Warmup Iteration  29: 614498.787 ops/s
# Warmup Iteration  30: 613432.055 ops/s
Iteration   1: 610051.852 ops/s
Iteration   2: 605785.841 ops/s
Iteration   3: 616989.100 ops/s
Iteration   4: 612161.428 ops/s
Iteration   5: 613622.283 ops/s
Iteration   6: 604013.727 ops/s
Iteration   7: 612692.003 ops/s
Iteration   8: 611026.056 ops/s
Iteration   9: 614319.526 ops/s
Iteration  10: 614620.007 ops/s
Iteration  11: 614872.055 ops/s
Iteration  12: 613276.519 ops/s
Iteration  13: 613245.892 ops/s
Iteration  14: 614298.899 ops/s
Iteration  15: 608092.699 ops/s
Iteration  16: 612639.734 ops/s
Iteration  17: 614952.547 ops/s
Iteration  18: 604957.262 ops/s
Iteration  19: 614645.092 ops/s
Iteration  20: 611729.487 ops/s
Iteration  21: 617276.527 ops/s
Iteration  22: 614613.135 ops/s
Iteration  23: 615525.548 ops/s
Iteration  24: 614221.373 ops/s
Iteration  25: 615484.785 ops/s
Iteration  26: 616819.902 ops/s
Iteration  27: 613400.081 ops/s
Iteration  28: 608891.312 ops/s
Iteration  29: 615115.058 ops/s
Iteration  30: 609900.304 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedBagBy":
  612641.334 ±(99.9%) 2307.745 ops/s [Average]
  (min, avg, max) = (604013.727, 612641.334, 617276.527), stdev = 3454.124
  CI (99.9%): [610333.590, 614949.079] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  612641.334 ± 2307.745  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 309572.290 ops/s
# Warmup Iteration   2: 569730.019 ops/s
# Warmup Iteration   3: 662744.084 ops/s
# Warmup Iteration   4: 663216.643 ops/s
# Warmup Iteration   5: 667851.122 ops/s
# Warmup Iteration   6: 556025.550 ops/s
# Warmup Iteration   7: 665632.818 ops/s
# Warmup Iteration   8: 665758.256 ops/s
# Warmup Iteration   9: 666579.752 ops/s
# Warmup Iteration  10: 665935.109 ops/s
# Warmup Iteration  11: 660729.130 ops/s
# Warmup Iteration  12: 666146.255 ops/s
# Warmup Iteration  13: 656644.683 ops/s
# Warmup Iteration  14: 656688.198 ops/s
# Warmup Iteration  15: 654581.611 ops/s
# Warmup Iteration  16: 665974.395 ops/s
# Warmup Iteration  17: 666442.977 ops/s
# Warmup Iteration  18: 667850.171 ops/s
# Warmup Iteration  19: 666852.418 ops/s
# Warmup Iteration  20: 660806.278 ops/s
# Warmup Iteration  21: 668328.355 ops/s
# Warmup Iteration  22: 657849.117 ops/s
# Warmup Iteration  23: 653888.480 ops/s
# Warmup Iteration  24: 665917.974 ops/s
# Warmup Iteration  25: 667335.219 ops/s
# Warmup Iteration  26: 654953.579 ops/s
# Warmup Iteration  27: 656948.944 ops/s
# Warmup Iteration  28: 666948.140 ops/s
# Warmup Iteration  29: 660523.074 ops/s
# Warmup Iteration  30: 663164.281 ops/s
Iteration   1: 668360.316 ops/s
Iteration   2: 664703.100 ops/s
Iteration   3: 667020.645 ops/s
Iteration   4: 668358.439 ops/s
Iteration   5: 667022.302 ops/s
Iteration   6: 668819.025 ops/s
Iteration   7: 668129.415 ops/s
Iteration   8: 667957.186 ops/s
Iteration   9: 666126.441 ops/s
Iteration  10: 656824.657 ops/s
Iteration  11: 666162.579 ops/s
Iteration  12: 669646.520 ops/s
Iteration  13: 666194.623 ops/s
Iteration  14: 668198.324 ops/s
Iteration  15: 661991.352 ops/s
Iteration  16: 668864.040 ops/s
Iteration  17: 666973.529 ops/s
Iteration  18: 661087.815 ops/s
Iteration  19: 668138.142 ops/s
Iteration  20: 666789.583 ops/s
Iteration  21: 665090.577 ops/s
Iteration  22: 667810.967 ops/s
Iteration  23: 667137.186 ops/s
Iteration  24: 667989.825 ops/s
Iteration  25: 665120.266 ops/s
Iteration  26: 666450.311 ops/s
Iteration  27: 667341.184 ops/s
Iteration  28: 662716.867 ops/s
Iteration  29: 659255.523 ops/s
Iteration  30: 668529.604 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  666160.345 ±(99.9%) 2008.882 ops/s [Average]
  (min, avg, max) = (656824.657, 666160.345, 669646.520), stdev = 3006.800
  CI (99.9%): [664151.463, 668169.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  666160.345 ± 2008.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 551186.138 ops/s
# Warmup Iteration   2: 1139068.288 ops/s
# Warmup Iteration   3: 1277400.389 ops/s
# Warmup Iteration   4: 1293732.943 ops/s
# Warmup Iteration   5: 1081246.451 ops/s
# Warmup Iteration   6: 1286168.197 ops/s
# Warmup Iteration   7: 1292852.032 ops/s
# Warmup Iteration   8: 1291794.311 ops/s
# Warmup Iteration   9: 1294950.384 ops/s
# Warmup Iteration  10: 1297299.914 ops/s
# Warmup Iteration  11: 1281188.816 ops/s
# Warmup Iteration  12: 1296273.995 ops/s
# Warmup Iteration  13: 1289654.340 ops/s
# Warmup Iteration  14: 1288214.401 ops/s
# Warmup Iteration  15: 1291438.896 ops/s
# Warmup Iteration  16: 1293989.334 ops/s
# Warmup Iteration  17: 1272287.648 ops/s
# Warmup Iteration  18: 1291832.573 ops/s
# Warmup Iteration  19: 1290232.907 ops/s
# Warmup Iteration  20: 1290608.065 ops/s
# Warmup Iteration  21: 1280278.555 ops/s
# Warmup Iteration  22: 1282700.648 ops/s
# Warmup Iteration  23: 1294504.367 ops/s
# Warmup Iteration  24: 1282351.110 ops/s
# Warmup Iteration  25: 1295079.103 ops/s
# Warmup Iteration  26: 1296446.301 ops/s
# Warmup Iteration  27: 1291113.189 ops/s
# Warmup Iteration  28: 1289559.013 ops/s
# Warmup Iteration  29: 1291890.113 ops/s
# Warmup Iteration  30: 1271976.685 ops/s
Iteration   1: 1273405.624 ops/s
Iteration   2: 1293242.689 ops/s
Iteration   3: 1280307.673 ops/s
Iteration   4: 1289469.886 ops/s
Iteration   5: 1267134.336 ops/s
Iteration   6: 1290552.425 ops/s
Iteration   7: 1294214.495 ops/s
Iteration   8: 1293318.135 ops/s
Iteration   9: 1296539.820 ops/s
Iteration  10: 1292879.727 ops/s
Iteration  11: 1295152.355 ops/s
Iteration  12: 1286986.024 ops/s
Iteration  13: 1288969.744 ops/s
Iteration  14: 1298614.858 ops/s
Iteration  15: 1299166.275 ops/s
Iteration  16: 1293712.001 ops/s
Iteration  17: 1289789.500 ops/s
Iteration  18: 1297651.877 ops/s
Iteration  19: 1292717.908 ops/s
Iteration  20: 1293021.253 ops/s
Iteration  21: 1299868.371 ops/s
Iteration  22: 1285802.183 ops/s
Iteration  23: 1291087.233 ops/s
Iteration  24: 1289868.787 ops/s
Iteration  25: 1294776.518 ops/s
Iteration  26: 1278340.286 ops/s
Iteration  27: 1300792.548 ops/s
Iteration  28: 1290446.917 ops/s
Iteration  29: 1290404.637 ops/s
Iteration  30: 1293976.383 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1290740.349 ±(99.9%) 5051.897 ops/s [Average]
  (min, avg, max) = (1267134.336, 1290740.349, 1300792.548), stdev = 7561.442
  CI (99.9%): [1285688.452, 1295792.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1290740.349 ± 5051.897  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1357694.909 ops/s
# Warmup Iteration   2: 2702841.025 ops/s
# Warmup Iteration   3: 3099829.243 ops/s
# Warmup Iteration   4: 3116496.091 ops/s
# Warmup Iteration   5: 2450446.016 ops/s
# Warmup Iteration   6: 3125472.545 ops/s
# Warmup Iteration   7: 3135660.855 ops/s
# Warmup Iteration   8: 3129029.449 ops/s
# Warmup Iteration   9: 3134621.323 ops/s
# Warmup Iteration  10: 3119796.452 ops/s
# Warmup Iteration  11: 3117636.717 ops/s
# Warmup Iteration  12: 3136700.149 ops/s
# Warmup Iteration  13: 3129351.690 ops/s
# Warmup Iteration  14: 3097788.809 ops/s
# Warmup Iteration  15: 3132848.068 ops/s
# Warmup Iteration  16: 3141795.354 ops/s
# Warmup Iteration  17: 3091197.727 ops/s
# Warmup Iteration  18: 3111036.813 ops/s
# Warmup Iteration  19: 3087801.356 ops/s
# Warmup Iteration  20: 3115409.319 ops/s
# Warmup Iteration  21: 3107919.566 ops/s
# Warmup Iteration  22: 3135301.223 ops/s
# Warmup Iteration  23: 3109129.725 ops/s
# Warmup Iteration  24: 3126507.370 ops/s
# Warmup Iteration  25: 3129777.647 ops/s
# Warmup Iteration  26: 3135892.602 ops/s
# Warmup Iteration  27: 3103272.220 ops/s
# Warmup Iteration  28: 3128813.208 ops/s
# Warmup Iteration  29: 3093568.032 ops/s
# Warmup Iteration  30: 3105015.766 ops/s
Iteration   1: 3120601.102 ops/s
Iteration   2: 3131072.139 ops/s
Iteration   3: 3140030.454 ops/s
Iteration   4: 3114278.397 ops/s
Iteration   5: 3124544.920 ops/s
Iteration   6: 3132813.071 ops/s
Iteration   7: 3128890.131 ops/s
Iteration   8: 3130321.846 ops/s
Iteration   9: 3123740.065 ops/s
Iteration  10: 3067160.807 ops/s
Iteration  11: 3114674.229 ops/s
Iteration  12: 3071536.184 ops/s
Iteration  13: 3129779.269 ops/s
Iteration  14: 3108598.428 ops/s
Iteration  15: 3080774.862 ops/s
Iteration  16: 3138109.449 ops/s
Iteration  17: 3105460.248 ops/s
Iteration  18: 3137366.845 ops/s
Iteration  19: 3068839.788 ops/s
Iteration  20: 3133101.084 ops/s
Iteration  21: 3133343.362 ops/s
Iteration  22: 3142461.335 ops/s
Iteration  23: 3116152.936 ops/s
Iteration  24: 3136786.590 ops/s
Iteration  25: 3120992.543 ops/s
Iteration  26: 3084028.472 ops/s
Iteration  27: 3116475.915 ops/s
Iteration  28: 3129103.541 ops/s
Iteration  29: 3128597.083 ops/s
Iteration  30: 3135255.077 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedListBy":
  3118163.006 ±(99.9%) 14721.173 ops/s [Average]
  (min, avg, max) = (3067160.807, 3118163.006, 3142461.335), stdev = 22033.960
  CI (99.9%): [3103441.833, 3132884.179] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  3118163.006 ± 14721.173  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1089119.536 ops/s
# Warmup Iteration   2: 2173196.438 ops/s
# Warmup Iteration   3: 2271861.680 ops/s
# Warmup Iteration   4: 2286104.756 ops/s
# Warmup Iteration   5: 1896414.003 ops/s
# Warmup Iteration   6: 2281346.423 ops/s
# Warmup Iteration   7: 2279749.424 ops/s
# Warmup Iteration   8: 2286761.471 ops/s
# Warmup Iteration   9: 2287939.181 ops/s
# Warmup Iteration  10: 2283559.636 ops/s
# Warmup Iteration  11: 2286838.196 ops/s
# Warmup Iteration  12: 2285931.340 ops/s
# Warmup Iteration  13: 2288951.270 ops/s
# Warmup Iteration  14: 2281543.986 ops/s
# Warmup Iteration  15: 2278099.238 ops/s
# Warmup Iteration  16: 2286911.184 ops/s
# Warmup Iteration  17: 2273275.206 ops/s
# Warmup Iteration  18: 2276353.523 ops/s
# Warmup Iteration  19: 2261779.149 ops/s
# Warmup Iteration  20: 2276465.515 ops/s
# Warmup Iteration  21: 2271881.506 ops/s
# Warmup Iteration  22: 2282816.482 ops/s
# Warmup Iteration  23: 2276543.894 ops/s
# Warmup Iteration  24: 2279975.260 ops/s
# Warmup Iteration  25: 2277391.169 ops/s
# Warmup Iteration  26: 2275416.373 ops/s
# Warmup Iteration  27: 2281220.918 ops/s
# Warmup Iteration  28: 2261888.134 ops/s
# Warmup Iteration  29: 2281269.018 ops/s
# Warmup Iteration  30: 2278984.474 ops/s
Iteration   1: 2276266.804 ops/s
Iteration   2: 2277886.924 ops/s
Iteration   3: 2222210.630 ops/s
Iteration   4: 2277373.482 ops/s
Iteration   5: 2276642.067 ops/s
Iteration   6: 2271141.170 ops/s
Iteration   7: 2276750.383 ops/s
Iteration   8: 2270894.921 ops/s
Iteration   9: 2262217.067 ops/s
Iteration  10: 2257708.364 ops/s
Iteration  11: 2274257.153 ops/s
Iteration  12: 2267548.024 ops/s
Iteration  13: 2271813.700 ops/s
Iteration  14: 2274573.262 ops/s
Iteration  15: 2289005.405 ops/s
Iteration  16: 2278410.601 ops/s
Iteration  17: 2237403.454 ops/s
Iteration  18: 2272368.140 ops/s
Iteration  19: 2262662.077 ops/s
Iteration  20: 2282055.393 ops/s
Iteration  21: 2280550.865 ops/s
Iteration  22: 2262103.620 ops/s
Iteration  23: 2270265.415 ops/s
Iteration  24: 2278194.702 ops/s
Iteration  25: 2283160.550 ops/s
Iteration  26: 2237427.912 ops/s
Iteration  27: 2287095.571 ops/s
Iteration  28: 2267335.469 ops/s
Iteration  29: 2210557.445 ops/s
Iteration  30: 2260301.070 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  2267206.055 ±(99.9%) 12192.811 ops/s [Average]
  (min, avg, max) = (2210557.445, 2267206.055, 2289005.405), stdev = 18249.627
  CI (99.9%): [2255013.243, 2279398.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  2267206.055 ± 12192.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3805533.612 ops/s
# Warmup Iteration   2: 8739324.213 ops/s
# Warmup Iteration   3: 8652452.498 ops/s
# Warmup Iteration   4: 7533750.130 ops/s
# Warmup Iteration   5: 8845664.730 ops/s
# Warmup Iteration   6: 8692606.382 ops/s
# Warmup Iteration   7: 8833975.831 ops/s
# Warmup Iteration   8: 8862990.128 ops/s
# Warmup Iteration   9: 8861417.026 ops/s
# Warmup Iteration  10: 8850467.553 ops/s
# Warmup Iteration  11: 8846489.366 ops/s
# Warmup Iteration  12: 8832662.731 ops/s
# Warmup Iteration  13: 8776332.795 ops/s
# Warmup Iteration  14: 8822532.347 ops/s
# Warmup Iteration  15: 8849778.361 ops/s
# Warmup Iteration  16: 8828480.006 ops/s
# Warmup Iteration  17: 8910959.348 ops/s
# Warmup Iteration  18: 8898015.385 ops/s
# Warmup Iteration  19: 8879174.370 ops/s
# Warmup Iteration  20: 8894924.864 ops/s
# Warmup Iteration  21: 8900995.594 ops/s
# Warmup Iteration  22: 8871763.178 ops/s
# Warmup Iteration  23: 8886530.355 ops/s
# Warmup Iteration  24: 8789369.743 ops/s
# Warmup Iteration  25: 8955369.540 ops/s
# Warmup Iteration  26: 8877704.531 ops/s
# Warmup Iteration  27: 8940507.032 ops/s
# Warmup Iteration  28: 8899881.824 ops/s
# Warmup Iteration  29: 8935603.986 ops/s
# Warmup Iteration  30: 8885680.836 ops/s
Iteration   1: 8923191.520 ops/s
Iteration   2: 8891822.198 ops/s
Iteration   3: 8922073.483 ops/s
Iteration   4: 8943021.405 ops/s
Iteration   5: 8921626.273 ops/s
Iteration   6: 8882132.322 ops/s
Iteration   7: 8862477.183 ops/s
Iteration   8: 8904813.174 ops/s
Iteration   9: 8952344.652 ops/s
Iteration  10: 8901212.475 ops/s
Iteration  11: 8909439.473 ops/s
Iteration  12: 8913836.489 ops/s
Iteration  13: 8932330.537 ops/s
Iteration  14: 8919626.420 ops/s
Iteration  15: 8890363.619 ops/s
Iteration  16: 8935751.325 ops/s
Iteration  17: 8782645.959 ops/s
Iteration  18: 8941511.667 ops/s
Iteration  19: 8935840.376 ops/s
Iteration  20: 8930085.612 ops/s
Iteration  21: 8824255.797 ops/s
Iteration  22: 8887312.121 ops/s
Iteration  23: 8925495.283 ops/s
Iteration  24: 8937125.729 ops/s
Iteration  25: 8783527.915 ops/s
Iteration  26: 8916669.019 ops/s
Iteration  27: 8917193.187 ops/s
Iteration  28: 8695818.704 ops/s
Iteration  29: 8936255.220 ops/s
Iteration  30: 8895840.517 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  8897187.988 ±(99.9%) 37940.390 ops/s [Average]
  (min, avg, max) = (8695818.704, 8897187.988, 8952344.652), stdev = 56787.394
  CI (99.9%): [8859247.598, 8935128.378] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  8897187.988 ± 37940.390  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 549627.394 ops/s
# Warmup Iteration   2: 1200442.570 ops/s
# Warmup Iteration   3: 1359564.214 ops/s
# Warmup Iteration   4: 1355954.518 ops/s
# Warmup Iteration   5: 1101826.768 ops/s
# Warmup Iteration   6: 1375001.595 ops/s
# Warmup Iteration   7: 1360414.719 ops/s
# Warmup Iteration   8: 1365412.972 ops/s
# Warmup Iteration   9: 1366283.333 ops/s
# Warmup Iteration  10: 1364932.485 ops/s
# Warmup Iteration  11: 1372480.257 ops/s
# Warmup Iteration  12: 1363045.422 ops/s
# Warmup Iteration  13: 1358441.803 ops/s
# Warmup Iteration  14: 1369591.369 ops/s
# Warmup Iteration  15: 1370510.482 ops/s
# Warmup Iteration  16: 1371118.637 ops/s
# Warmup Iteration  17: 1369869.216 ops/s
# Warmup Iteration  18: 1368792.522 ops/s
# Warmup Iteration  19: 1368630.138 ops/s
# Warmup Iteration  20: 1367067.105 ops/s
# Warmup Iteration  21: 1369780.575 ops/s
# Warmup Iteration  22: 1363705.593 ops/s
# Warmup Iteration  23: 1364235.493 ops/s
# Warmup Iteration  24: 1367292.711 ops/s
# Warmup Iteration  25: 1361296.096 ops/s
# Warmup Iteration  26: 1369351.994 ops/s
# Warmup Iteration  27: 1365181.872 ops/s
# Warmup Iteration  28: 1352848.700 ops/s
# Warmup Iteration  29: 1373257.605 ops/s
# Warmup Iteration  30: 1371512.948 ops/s
Iteration   1: 1366393.043 ops/s
Iteration   2: 1341902.358 ops/s
Iteration   3: 1367644.339 ops/s
Iteration   4: 1368589.580 ops/s
Iteration   5: 1368307.551 ops/s
Iteration   6: 1369420.748 ops/s
Iteration   7: 1369439.236 ops/s
Iteration   8: 1367518.460 ops/s
Iteration   9: 1367556.561 ops/s
Iteration  10: 1370623.842 ops/s
Iteration  11: 1370049.751 ops/s
Iteration  12: 1368869.120 ops/s
Iteration  13: 1370033.533 ops/s
Iteration  14: 1367768.235 ops/s
Iteration  15: 1360677.492 ops/s
Iteration  16: 1366770.912 ops/s
Iteration  17: 1364404.990 ops/s
Iteration  18: 1363177.021 ops/s
Iteration  19: 1369891.952 ops/s
Iteration  20: 1368532.346 ops/s
Iteration  21: 1366859.068 ops/s
Iteration  22: 1362445.345 ops/s
Iteration  23: 1372545.496 ops/s
Iteration  24: 1348924.905 ops/s
Iteration  25: 1366136.786 ops/s
Iteration  26: 1372207.558 ops/s
Iteration  27: 1368644.145 ops/s
Iteration  28: 1367591.131 ops/s
Iteration  29: 1377245.789 ops/s
Iteration  30: 1350688.272 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1366028.652 ±(99.9%) 4816.221 ops/s [Average]
  (min, avg, max) = (1341902.358, 1366028.652, 1377245.789), stdev = 7208.694
  CI (99.9%): [1361212.431, 1370844.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1366028.652 ± 4816.221  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 892303.181 ops/s
# Warmup Iteration   2: 2275375.545 ops/s
# Warmup Iteration   3: 2320840.590 ops/s
# Warmup Iteration   4: 1934007.975 ops/s
# Warmup Iteration   5: 2324423.669 ops/s
# Warmup Iteration   6: 2333835.583 ops/s
# Warmup Iteration   7: 2335231.917 ops/s
# Warmup Iteration   8: 2345025.842 ops/s
# Warmup Iteration   9: 2334844.515 ops/s
# Warmup Iteration  10: 2341337.823 ops/s
# Warmup Iteration  11: 2339453.784 ops/s
# Warmup Iteration  12: 2335199.521 ops/s
# Warmup Iteration  13: 2323274.913 ops/s
# Warmup Iteration  14: 2337036.291 ops/s
# Warmup Iteration  15: 2309370.925 ops/s
# Warmup Iteration  16: 2336145.604 ops/s
# Warmup Iteration  17: 2335033.603 ops/s
# Warmup Iteration  18: 2342730.891 ops/s
# Warmup Iteration  19: 2337497.352 ops/s
# Warmup Iteration  20: 2331826.771 ops/s
# Warmup Iteration  21: 2340564.204 ops/s
# Warmup Iteration  22: 2302334.036 ops/s
# Warmup Iteration  23: 2335006.718 ops/s
# Warmup Iteration  24: 2333555.690 ops/s
# Warmup Iteration  25: 2340527.845 ops/s
# Warmup Iteration  26: 2332913.487 ops/s
# Warmup Iteration  27: 2315834.806 ops/s
# Warmup Iteration  28: 2316156.766 ops/s
# Warmup Iteration  29: 2324996.307 ops/s
# Warmup Iteration  30: 2320252.836 ops/s
Iteration   1: 2310344.166 ops/s
Iteration   2: 2338127.209 ops/s
Iteration   3: 2330344.113 ops/s
Iteration   4: 2333841.104 ops/s
Iteration   5: 2331918.160 ops/s
Iteration   6: 2326058.957 ops/s
Iteration   7: 2338019.372 ops/s
Iteration   8: 2343582.374 ops/s
Iteration   9: 2336854.708 ops/s
Iteration  10: 2344900.073 ops/s
Iteration  11: 2326649.957 ops/s
Iteration  12: 2291935.314 ops/s
Iteration  13: 2341336.448 ops/s
Iteration  14: 2333457.434 ops/s
Iteration  15: 2328871.997 ops/s
Iteration  16: 2336140.724 ops/s
Iteration  17: 2337540.143 ops/s
Iteration  18: 2340096.861 ops/s
Iteration  19: 2336987.452 ops/s
Iteration  20: 2323767.292 ops/s
Iteration  21: 2337916.182 ops/s
Iteration  22: 2292043.307 ops/s
Iteration  23: 2330113.177 ops/s
Iteration  24: 2293008.089 ops/s
Iteration  25: 2325327.515 ops/s
Iteration  26: 2320393.543 ops/s
Iteration  27: 2345891.897 ops/s
Iteration  28: 2338446.520 ops/s
Iteration  29: 2330749.239 ops/s
Iteration  30: 2324348.469 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  2328967.060 ±(99.9%) 9769.425 ops/s [Average]
  (min, avg, max) = (2291935.314, 2328967.060, 2345891.897), stdev = 14622.417
  CI (99.9%): [2319197.635, 2338736.485] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  2328967.060 ± 9769.425  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2967206.121 ops/s
# Warmup Iteration   2: 6368704.971 ops/s
# Warmup Iteration   3: 5336208.642 ops/s
# Warmup Iteration   4: 6358080.473 ops/s
# Warmup Iteration   5: 6310093.399 ops/s
# Warmup Iteration   6: 6372858.070 ops/s
# Warmup Iteration   7: 6370171.761 ops/s
# Warmup Iteration   8: 6362673.106 ops/s
# Warmup Iteration   9: 6332287.327 ops/s
# Warmup Iteration  10: 6347531.444 ops/s
# Warmup Iteration  11: 6357814.122 ops/s
# Warmup Iteration  12: 6344630.628 ops/s
# Warmup Iteration  13: 6356848.592 ops/s
# Warmup Iteration  14: 6380211.593 ops/s
# Warmup Iteration  15: 6347186.386 ops/s
# Warmup Iteration  16: 6379374.297 ops/s
# Warmup Iteration  17: 6393991.653 ops/s
# Warmup Iteration  18: 6402718.962 ops/s
# Warmup Iteration  19: 6423777.032 ops/s
# Warmup Iteration  20: 6387869.015 ops/s
# Warmup Iteration  21: 6390542.919 ops/s
# Warmup Iteration  22: 6379664.626 ops/s
# Warmup Iteration  23: 6389653.354 ops/s
# Warmup Iteration  24: 6375868.139 ops/s
# Warmup Iteration  25: 6323465.010 ops/s
# Warmup Iteration  26: 6351831.324 ops/s
# Warmup Iteration  27: 6378050.907 ops/s
# Warmup Iteration  28: 6360391.481 ops/s
# Warmup Iteration  29: 6362629.116 ops/s
# Warmup Iteration  30: 6395740.865 ops/s
Iteration   1: 6289304.001 ops/s
Iteration   2: 6314332.159 ops/s
Iteration   3: 6368873.033 ops/s
Iteration   4: 6377372.382 ops/s
Iteration   5: 6285317.910 ops/s
Iteration   6: 6391986.461 ops/s
Iteration   7: 6352568.706 ops/s
Iteration   8: 6392511.816 ops/s
Iteration   9: 6408188.375 ops/s
Iteration  10: 6397869.366 ops/s
Iteration  11: 6391616.963 ops/s
Iteration  12: 6410026.077 ops/s
Iteration  13: 6410452.824 ops/s
Iteration  14: 6348448.853 ops/s
Iteration  15: 6399292.967 ops/s
Iteration  16: 6395623.073 ops/s
Iteration  17: 6374705.656 ops/s
Iteration  18: 6398491.300 ops/s
Iteration  19: 6379246.431 ops/s
Iteration  20: 6358849.979 ops/s
Iteration  21: 6169721.721 ops/s
Iteration  22: 6417495.981 ops/s
Iteration  23: 6362894.927 ops/s
Iteration  24: 6399974.993 ops/s
Iteration  25: 6384703.023 ops/s
Iteration  26: 6368500.326 ops/s
Iteration  27: 6255811.335 ops/s
Iteration  28: 6395374.479 ops/s
Iteration  29: 6328939.395 ops/s
Iteration  30: 6391056.623 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toList":
  6363985.038 ±(99.9%) 36246.792 ops/s [Average]
  (min, avg, max) = (6169721.721, 6363985.038, 6417495.981), stdev = 54252.496
  CI (99.9%): [6327738.246, 6400231.830] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toList  thrpt   30  6363985.038 ± 36246.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1042605.626 ops/s
# Warmup Iteration   2: 2218796.930 ops/s
# Warmup Iteration   3: 2279616.063 ops/s
# Warmup Iteration   4: 2286339.927 ops/s
# Warmup Iteration   5: 1886179.687 ops/s
# Warmup Iteration   6: 2301115.246 ops/s
# Warmup Iteration   7: 2288687.096 ops/s
# Warmup Iteration   8: 2288232.459 ops/s
# Warmup Iteration   9: 2294771.878 ops/s
# Warmup Iteration  10: 2304799.912 ops/s
# Warmup Iteration  11: 2303868.983 ops/s
# Warmup Iteration  12: 2310718.298 ops/s
# Warmup Iteration  13: 2295013.371 ops/s
# Warmup Iteration  14: 2315619.473 ops/s
# Warmup Iteration  15: 2286551.359 ops/s
# Warmup Iteration  16: 2311770.025 ops/s
# Warmup Iteration  17: 2283150.351 ops/s
# Warmup Iteration  18: 2290952.123 ops/s
# Warmup Iteration  19: 2292043.740 ops/s
# Warmup Iteration  20: 2292551.249 ops/s
# Warmup Iteration  21: 2299410.416 ops/s
# Warmup Iteration  22: 2292512.899 ops/s
# Warmup Iteration  23: 2303881.791 ops/s
# Warmup Iteration  24: 2307766.253 ops/s
# Warmup Iteration  25: 2286082.399 ops/s
# Warmup Iteration  26: 2297222.507 ops/s
# Warmup Iteration  27: 2294956.962 ops/s
# Warmup Iteration  28: 2298467.966 ops/s
# Warmup Iteration  29: 2287083.298 ops/s
# Warmup Iteration  30: 2303089.813 ops/s
Iteration   1: 2318389.828 ops/s
Iteration   2: 2270511.299 ops/s
Iteration   3: 2265934.893 ops/s
Iteration   4: 2285024.856 ops/s
Iteration   5: 2282771.096 ops/s
Iteration   6: 2281737.693 ops/s
Iteration   7: 2299238.158 ops/s
Iteration   8: 2292572.551 ops/s
Iteration   9: 2268038.774 ops/s
Iteration  10: 2295478.910 ops/s
Iteration  11: 2321018.304 ops/s
Iteration  12: 2277925.794 ops/s
Iteration  13: 2304785.443 ops/s
Iteration  14: 2302576.520 ops/s
Iteration  15: 2284900.875 ops/s
Iteration  16: 2303400.922 ops/s
Iteration  17: 2296532.315 ops/s
Iteration  18: 2262929.065 ops/s
Iteration  19: 2288632.099 ops/s
Iteration  20: 2265461.176 ops/s
Iteration  21: 2298591.125 ops/s
Iteration  22: 2274531.563 ops/s
Iteration  23: 2289832.531 ops/s
Iteration  24: 2289401.072 ops/s
Iteration  25: 2313358.757 ops/s
Iteration  26: 2302670.149 ops/s
Iteration  27: 2303030.822 ops/s
Iteration  28: 2323987.001 ops/s
Iteration  29: 2294487.646 ops/s
Iteration  30: 2309157.270 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toMap":
  2292230.284 ±(99.9%) 11211.806 ops/s [Average]
  (min, avg, max) = (2262929.065, 2292230.284, 2323987.001), stdev = 16781.305
  CI (99.9%): [2281018.478, 2303442.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toMap  thrpt   30  2292230.284 ± 11211.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 926270.617 ops/s
# Warmup Iteration   2: 2360089.414 ops/s
# Warmup Iteration   3: 2330700.501 ops/s
# Warmup Iteration   4: 1899800.820 ops/s
# Warmup Iteration   5: 2383577.357 ops/s
# Warmup Iteration   6: 2378912.484 ops/s
# Warmup Iteration   7: 2375907.479 ops/s
# Warmup Iteration   8: 2356478.425 ops/s
# Warmup Iteration   9: 2356444.279 ops/s
# Warmup Iteration  10: 2367779.669 ops/s
# Warmup Iteration  11: 2366489.290 ops/s
# Warmup Iteration  12: 2328256.040 ops/s
# Warmup Iteration  13: 2330564.059 ops/s
# Warmup Iteration  14: 2369025.302 ops/s
# Warmup Iteration  15: 2334038.483 ops/s
# Warmup Iteration  16: 2364207.680 ops/s
# Warmup Iteration  17: 2352905.331 ops/s
# Warmup Iteration  18: 2349222.260 ops/s
# Warmup Iteration  19: 2348809.211 ops/s
# Warmup Iteration  20: 2343209.940 ops/s
# Warmup Iteration  21: 2346184.219 ops/s
# Warmup Iteration  22: 2367256.868 ops/s
# Warmup Iteration  23: 2370809.343 ops/s
# Warmup Iteration  24: 2363185.492 ops/s
# Warmup Iteration  25: 2349159.405 ops/s
# Warmup Iteration  26: 2356867.876 ops/s
# Warmup Iteration  27: 2356952.960 ops/s
# Warmup Iteration  28: 2365328.960 ops/s
# Warmup Iteration  29: 2355609.070 ops/s
# Warmup Iteration  30: 2331477.594 ops/s
Iteration   1: 2320706.485 ops/s
Iteration   2: 2341804.850 ops/s
Iteration   3: 2369758.977 ops/s
Iteration   4: 2313920.236 ops/s
Iteration   5: 2357348.116 ops/s
Iteration   6: 2379454.854 ops/s
Iteration   7: 2354431.230 ops/s
Iteration   8: 2368289.229 ops/s
Iteration   9: 2362542.832 ops/s
Iteration  10: 2323640.870 ops/s
Iteration  11: 2383728.489 ops/s
Iteration  12: 2349244.713 ops/s
Iteration  13: 2347728.627 ops/s
Iteration  14: 2366698.991 ops/s
Iteration  15: 2343334.374 ops/s
Iteration  16: 2361967.931 ops/s
Iteration  17: 2391252.806 ops/s
Iteration  18: 2367749.285 ops/s
Iteration  19: 2346257.560 ops/s
Iteration  20: 2366687.785 ops/s
Iteration  21: 2381113.547 ops/s
Iteration  22: 2358128.018 ops/s
Iteration  23: 2356698.326 ops/s
Iteration  24: 2369730.712 ops/s
Iteration  25: 2365784.706 ops/s
Iteration  26: 2356029.276 ops/s
Iteration  27: 2356275.774 ops/s
Iteration  28: 2370726.171 ops/s
Iteration  29: 2343358.691 ops/s
Iteration  30: 2364053.250 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toMapTarget":
  2357948.224 ±(99.9%) 11921.640 ops/s [Average]
  (min, avg, max) = (2313920.236, 2357948.224, 2391252.806), stdev = 17843.751
  CI (99.9%): [2346026.584, 2369869.864] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toMapTarget  thrpt   30  2357948.224 ± 11921.640  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2712029.655 ops/s
# Warmup Iteration   2: 5975615.488 ops/s
# Warmup Iteration   3: 5462249.412 ops/s
# Warmup Iteration   4: 5439775.536 ops/s
# Warmup Iteration   5: 5982234.511 ops/s
# Warmup Iteration   6: 5997012.693 ops/s
# Warmup Iteration   7: 6003655.024 ops/s
# Warmup Iteration   8: 5935327.091 ops/s
# Warmup Iteration   9: 5977279.784 ops/s
# Warmup Iteration  10: 5984918.993 ops/s
# Warmup Iteration  11: 5989486.045 ops/s
# Warmup Iteration  12: 5936401.954 ops/s
# Warmup Iteration  13: 5984651.067 ops/s
# Warmup Iteration  14: 5943922.710 ops/s
# Warmup Iteration  15: 5939255.381 ops/s
# Warmup Iteration  16: 5982409.108 ops/s
# Warmup Iteration  17: 6017010.610 ops/s
# Warmup Iteration  18: 6008544.270 ops/s
# Warmup Iteration  19: 6020520.271 ops/s
# Warmup Iteration  20: 6032329.960 ops/s
# Warmup Iteration  21: 5917802.408 ops/s
# Warmup Iteration  22: 6035598.870 ops/s
# Warmup Iteration  23: 6026824.384 ops/s
# Warmup Iteration  24: 5992288.553 ops/s
# Warmup Iteration  25: 6009262.209 ops/s
# Warmup Iteration  26: 6031606.325 ops/s
# Warmup Iteration  27: 6041686.778 ops/s
# Warmup Iteration  28: 5964043.774 ops/s
# Warmup Iteration  29: 6017444.432 ops/s
# Warmup Iteration  30: 5985966.024 ops/s
Iteration   1: 6033178.823 ops/s
Iteration   2: 5929539.361 ops/s
Iteration   3: 5999238.490 ops/s
Iteration   4: 5905133.114 ops/s
Iteration   5: 6043983.709 ops/s
Iteration   6: 5976010.668 ops/s
Iteration   7: 6036413.562 ops/s
Iteration   8: 6026444.735 ops/s
Iteration   9: 5902776.201 ops/s
Iteration  10: 5992417.964 ops/s
Iteration  11: 6044095.233 ops/s
Iteration  12: 6027307.939 ops/s
Iteration  13: 5960237.961 ops/s
Iteration  14: 5994262.127 ops/s
Iteration  15: 6020363.796 ops/s
Iteration  16: 6028075.016 ops/s
Iteration  17: 6048154.043 ops/s
Iteration  18: 5993687.811 ops/s
Iteration  19: 6016500.180 ops/s
Iteration  20: 6037548.148 ops/s
Iteration  21: 6014289.083 ops/s
Iteration  22: 6026088.412 ops/s
Iteration  23: 6023046.675 ops/s
Iteration  24: 6029800.172 ops/s
Iteration  25: 5937922.690 ops/s
Iteration  26: 6019729.546 ops/s
Iteration  27: 6029352.216 ops/s
Iteration  28: 6033008.303 ops/s
Iteration  29: 5919135.247 ops/s
Iteration  30: 5969810.758 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toReversed":
  6000585.066 ±(99.9%) 28989.135 ops/s [Average]
  (min, avg, max) = (5902776.201, 6000585.066, 6048154.043), stdev = 43389.576
  CI (99.9%): [5971595.931, 6029574.201] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toReversed  thrpt   30  6000585.066 ± 28989.135  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3181858.955 ops/s
# Warmup Iteration   2: 7284018.836 ops/s
# Warmup Iteration   3: 6130799.758 ops/s
# Warmup Iteration   4: 7290899.705 ops/s
# Warmup Iteration   5: 7310098.152 ops/s
# Warmup Iteration   6: 7305903.831 ops/s
# Warmup Iteration   7: 7302522.737 ops/s
# Warmup Iteration   8: 7312064.325 ops/s
# Warmup Iteration   9: 7233073.839 ops/s
# Warmup Iteration  10: 7196218.796 ops/s
# Warmup Iteration  11: 7306073.300 ops/s
# Warmup Iteration  12: 7289641.235 ops/s
# Warmup Iteration  13: 7299913.893 ops/s
# Warmup Iteration  14: 7288361.781 ops/s
# Warmup Iteration  15: 7307826.488 ops/s
# Warmup Iteration  16: 7209097.789 ops/s
# Warmup Iteration  17: 7327918.070 ops/s
# Warmup Iteration  18: 7335302.320 ops/s
# Warmup Iteration  19: 7279331.963 ops/s
# Warmup Iteration  20: 7322558.728 ops/s
# Warmup Iteration  21: 7268279.814 ops/s
# Warmup Iteration  22: 7355568.476 ops/s
# Warmup Iteration  23: 7324912.483 ops/s
# Warmup Iteration  24: 7308755.724 ops/s
# Warmup Iteration  25: 7313529.856 ops/s
# Warmup Iteration  26: 7335809.268 ops/s
# Warmup Iteration  27: 7185533.683 ops/s
# Warmup Iteration  28: 7317756.585 ops/s
# Warmup Iteration  29: 7325188.468 ops/s
# Warmup Iteration  30: 7284987.285 ops/s
Iteration   1: 7346987.717 ops/s
Iteration   2: 7251783.898 ops/s
Iteration   3: 7340717.318 ops/s
Iteration   4: 7370192.288 ops/s
Iteration   5: 7361477.038 ops/s
Iteration   6: 7357423.455 ops/s
Iteration   7: 7350179.651 ops/s
Iteration   8: 7326059.720 ops/s
Iteration   9: 7262039.856 ops/s
Iteration  10: 7275654.139 ops/s
Iteration  11: 7289525.406 ops/s
Iteration  12: 7195703.061 ops/s
Iteration  13: 7234016.581 ops/s
Iteration  14: 7281344.416 ops/s
Iteration  15: 7306129.534 ops/s
Iteration  16: 7351881.255 ops/s
Iteration  17: 7310054.642 ops/s
Iteration  18: 7299038.355 ops/s
Iteration  19: 7307386.455 ops/s
Iteration  20: 7337554.597 ops/s
Iteration  21: 7353325.942 ops/s
Iteration  22: 7183083.607 ops/s
Iteration  23: 7320705.590 ops/s
Iteration  24: 7334993.113 ops/s
Iteration  25: 7308721.211 ops/s
Iteration  26: 7317744.921 ops/s
Iteration  27: 7283384.575 ops/s
Iteration  28: 7226950.727 ops/s
Iteration  29: 7296456.176 ops/s
Iteration  30: 7296668.543 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSet":
  7302572.793 ±(99.9%) 32210.549 ops/s [Average]
  (min, avg, max) = (7183083.607, 7302572.793, 7370192.288), stdev = 48211.237
  CI (99.9%): [7270362.244, 7334783.342] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSet  thrpt   30  7302572.793 ± 32210.549  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 269279.430 ops/s
# Warmup Iteration   2: 493304.857 ops/s
# Warmup Iteration   3: 607717.572 ops/s
# Warmup Iteration   4: 613780.901 ops/s
# Warmup Iteration   5: 607054.203 ops/s
# Warmup Iteration   6: 493232.977 ops/s
# Warmup Iteration   7: 615629.395 ops/s
# Warmup Iteration   8: 611405.334 ops/s
# Warmup Iteration   9: 615427.596 ops/s
# Warmup Iteration  10: 615676.141 ops/s
# Warmup Iteration  11: 616288.294 ops/s
# Warmup Iteration  12: 613237.024 ops/s
# Warmup Iteration  13: 613674.852 ops/s
# Warmup Iteration  14: 614442.754 ops/s
# Warmup Iteration  15: 607461.446 ops/s
# Warmup Iteration  16: 615544.346 ops/s
# Warmup Iteration  17: 613452.913 ops/s
# Warmup Iteration  18: 614429.206 ops/s
# Warmup Iteration  19: 612591.311 ops/s
# Warmup Iteration  20: 614531.289 ops/s
# Warmup Iteration  21: 615068.551 ops/s
# Warmup Iteration  22: 614848.066 ops/s
# Warmup Iteration  23: 613291.059 ops/s
# Warmup Iteration  24: 614654.378 ops/s
# Warmup Iteration  25: 614629.111 ops/s
# Warmup Iteration  26: 609971.412 ops/s
# Warmup Iteration  27: 615533.132 ops/s
# Warmup Iteration  28: 614232.560 ops/s
# Warmup Iteration  29: 614383.964 ops/s
# Warmup Iteration  30: 613327.247 ops/s
Iteration   1: 613714.713 ops/s
Iteration   2: 607663.122 ops/s
Iteration   3: 614152.279 ops/s
Iteration   4: 613657.921 ops/s
Iteration   5: 615234.960 ops/s
Iteration   6: 614688.630 ops/s
Iteration   7: 614559.932 ops/s
Iteration   8: 615455.356 ops/s
Iteration   9: 613305.382 ops/s
Iteration  10: 611443.267 ops/s
Iteration  11: 612571.972 ops/s
Iteration  12: 611256.255 ops/s
Iteration  13: 614633.514 ops/s
Iteration  14: 614268.426 ops/s
Iteration  15: 617485.694 ops/s
Iteration  16: 607027.385 ops/s
Iteration  17: 613373.821 ops/s
Iteration  18: 616357.887 ops/s
Iteration  19: 606175.211 ops/s
Iteration  20: 616799.923 ops/s
Iteration  21: 615155.036 ops/s
Iteration  22: 611978.609 ops/s
Iteration  23: 612627.476 ops/s
Iteration  24: 616113.096 ops/s
Iteration  25: 612538.602 ops/s
Iteration  26: 615336.370 ops/s
Iteration  27: 611971.337 ops/s
Iteration  28: 604896.989 ops/s
Iteration  29: 614132.208 ops/s
Iteration  30: 614379.747 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedBagBy":
  613098.504 ±(99.9%) 2061.528 ops/s [Average]
  (min, avg, max) = (604896.989, 613098.504, 617485.694), stdev = 3085.598
  CI (99.9%): [611036.976, 615160.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  613098.504 ± 2061.528  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 516410.126 ops/s
# Warmup Iteration   2: 1103596.729 ops/s
# Warmup Iteration   3: 1223407.096 ops/s
# Warmup Iteration   4: 1215589.887 ops/s
# Warmup Iteration   5: 1029275.063 ops/s
# Warmup Iteration   6: 1233474.996 ops/s
# Warmup Iteration   7: 1233047.685 ops/s
# Warmup Iteration   8: 1234314.299 ops/s
# Warmup Iteration   9: 1233863.386 ops/s
# Warmup Iteration  10: 1222073.964 ops/s
# Warmup Iteration  11: 1230314.178 ops/s
# Warmup Iteration  12: 1227407.018 ops/s
# Warmup Iteration  13: 1234324.382 ops/s
# Warmup Iteration  14: 1229713.602 ops/s
# Warmup Iteration  15: 1232322.537 ops/s
# Warmup Iteration  16: 1233685.845 ops/s
# Warmup Iteration  17: 1231346.505 ops/s
# Warmup Iteration  18: 1232739.931 ops/s
# Warmup Iteration  19: 1232857.386 ops/s
# Warmup Iteration  20: 1227218.558 ops/s
# Warmup Iteration  21: 1230563.144 ops/s
# Warmup Iteration  22: 1220640.101 ops/s
# Warmup Iteration  23: 1225228.627 ops/s
# Warmup Iteration  24: 1234398.018 ops/s
# Warmup Iteration  25: 1221268.608 ops/s
# Warmup Iteration  26: 1233234.341 ops/s
# Warmup Iteration  27: 1229896.754 ops/s
# Warmup Iteration  28: 1235269.544 ops/s
# Warmup Iteration  29: 1228288.535 ops/s
# Warmup Iteration  30: 1217012.891 ops/s
Iteration   1: 1237937.163 ops/s
Iteration   2: 1209761.361 ops/s
Iteration   3: 1229668.604 ops/s
Iteration   4: 1238841.412 ops/s
Iteration   5: 1222159.627 ops/s
Iteration   6: 1227873.925 ops/s
Iteration   7: 1233165.242 ops/s
Iteration   8: 1238709.400 ops/s
Iteration   9: 1229302.756 ops/s
Iteration  10: 1228986.842 ops/s
Iteration  11: 1232468.269 ops/s
Iteration  12: 1232523.043 ops/s
Iteration  13: 1216689.514 ops/s
Iteration  14: 1240815.362 ops/s
Iteration  15: 1240284.910 ops/s
Iteration  16: 1232386.151 ops/s
Iteration  17: 1235850.771 ops/s
Iteration  18: 1233730.210 ops/s
Iteration  19: 1239068.139 ops/s
Iteration  20: 1237399.634 ops/s
Iteration  21: 1242784.449 ops/s
Iteration  22: 1233440.976 ops/s
Iteration  23: 1237146.920 ops/s
Iteration  24: 1242841.446 ops/s
Iteration  25: 1236269.551 ops/s
Iteration  26: 1243385.311 ops/s
Iteration  27: 1238595.529 ops/s
Iteration  28: 1234147.754 ops/s
Iteration  29: 1232671.070 ops/s
Iteration  30: 1238448.268 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  1233911.787 ±(99.9%) 5005.441 ops/s [Average]
  (min, avg, max) = (1209761.361, 1233911.787, 1243385.311), stdev = 7491.909
  CI (99.9%): [1228906.346, 1238917.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  1233911.787 ± 5005.441  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 586190.253 ops/s
# Warmup Iteration   2: 1237804.673 ops/s
# Warmup Iteration   3: 1363432.175 ops/s
# Warmup Iteration   4: 1373350.543 ops/s
# Warmup Iteration   5: 1141884.626 ops/s
# Warmup Iteration   6: 1372355.763 ops/s
# Warmup Iteration   7: 1357259.901 ops/s
# Warmup Iteration   8: 1370635.349 ops/s
# Warmup Iteration   9: 1369195.099 ops/s
# Warmup Iteration  10: 1363500.591 ops/s
# Warmup Iteration  11: 1374021.026 ops/s
# Warmup Iteration  12: 1358149.986 ops/s
# Warmup Iteration  13: 1372663.613 ops/s
# Warmup Iteration  14: 1374067.635 ops/s
# Warmup Iteration  15: 1361949.116 ops/s
# Warmup Iteration  16: 1359161.419 ops/s
# Warmup Iteration  17: 1371762.409 ops/s
# Warmup Iteration  18: 1371843.973 ops/s
# Warmup Iteration  19: 1373893.528 ops/s
# Warmup Iteration  20: 1361463.582 ops/s
# Warmup Iteration  21: 1374149.950 ops/s
# Warmup Iteration  22: 1374971.605 ops/s
# Warmup Iteration  23: 1368388.975 ops/s
# Warmup Iteration  24: 1368373.902 ops/s
# Warmup Iteration  25: 1367964.801 ops/s
# Warmup Iteration  26: 1372999.791 ops/s
# Warmup Iteration  27: 1376395.676 ops/s
# Warmup Iteration  28: 1357679.209 ops/s
# Warmup Iteration  29: 1365621.284 ops/s
# Warmup Iteration  30: 1369404.503 ops/s
Iteration   1: 1366743.694 ops/s
Iteration   2: 1364464.980 ops/s
Iteration   3: 1379576.900 ops/s
Iteration   4: 1374834.632 ops/s
Iteration   5: 1370441.612 ops/s
Iteration   6: 1378420.325 ops/s
Iteration   7: 1368555.018 ops/s
Iteration   8: 1373965.668 ops/s
Iteration   9: 1370851.415 ops/s
Iteration  10: 1375196.282 ops/s
Iteration  11: 1349803.486 ops/s
Iteration  12: 1354522.450 ops/s
Iteration  13: 1353456.106 ops/s
Iteration  14: 1366407.206 ops/s
Iteration  15: 1364692.795 ops/s
Iteration  16: 1373894.982 ops/s
Iteration  17: 1345600.331 ops/s
Iteration  18: 1369130.263 ops/s
Iteration  19: 1377596.206 ops/s
Iteration  20: 1376092.002 ops/s
Iteration  21: 1366995.079 ops/s
Iteration  22: 1373783.668 ops/s
Iteration  23: 1366970.888 ops/s
Iteration  24: 1361178.833 ops/s
Iteration  25: 1371032.404 ops/s
Iteration  26: 1374303.659 ops/s
Iteration  27: 1374672.458 ops/s
Iteration  28: 1372602.497 ops/s
Iteration  29: 1355649.747 ops/s
Iteration  30: 1365237.757 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1367889.111 ±(99.9%) 5812.228 ops/s [Average]
  (min, avg, max) = (1345600.331, 1367889.111, 1379576.900), stdev = 8699.470
  CI (99.9%): [1362076.883, 1373701.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1367889.111 ± 5812.228  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 489687.224 ops/s
# Warmup Iteration   2: 540583.521 ops/s
# Warmup Iteration   3: 708044.980 ops/s
# Warmup Iteration   4: 723721.875 ops/s
# Warmup Iteration   5: 722843.515 ops/s
# Warmup Iteration   6: 720177.525 ops/s
# Warmup Iteration   7: 723278.399 ops/s
# Warmup Iteration   8: 726728.503 ops/s
# Warmup Iteration   9: 722131.608 ops/s
# Warmup Iteration  10: 720187.355 ops/s
# Warmup Iteration  11: 723469.106 ops/s
# Warmup Iteration  12: 604838.410 ops/s
# Warmup Iteration  13: 724148.148 ops/s
# Warmup Iteration  14: 725873.289 ops/s
# Warmup Iteration  15: 721853.526 ops/s
# Warmup Iteration  16: 722702.867 ops/s
# Warmup Iteration  17: 750230.609 ops/s
# Warmup Iteration  18: 760409.708 ops/s
# Warmup Iteration  19: 757655.403 ops/s
# Warmup Iteration  20: 757336.280 ops/s
# Warmup Iteration  21: 756874.495 ops/s
# Warmup Iteration  22: 757091.504 ops/s
# Warmup Iteration  23: 758821.390 ops/s
# Warmup Iteration  24: 757392.664 ops/s
# Warmup Iteration  25: 752279.194 ops/s
# Warmup Iteration  26: 754928.568 ops/s
# Warmup Iteration  27: 759942.964 ops/s
# Warmup Iteration  28: 754731.220 ops/s
# Warmup Iteration  29: 748152.311 ops/s
# Warmup Iteration  30: 759311.225 ops/s
Iteration   1: 753663.913 ops/s
Iteration   2: 756236.584 ops/s
Iteration   3: 758589.505 ops/s
Iteration   4: 748780.360 ops/s
Iteration   5: 758891.602 ops/s
Iteration   6: 747427.975 ops/s
Iteration   7: 758795.957 ops/s
Iteration   8: 762009.675 ops/s
Iteration   9: 758382.214 ops/s
Iteration  10: 758887.824 ops/s
Iteration  11: 760939.722 ops/s
Iteration  12: 756632.699 ops/s
Iteration  13: 755835.511 ops/s
Iteration  14: 752276.510 ops/s
Iteration  15: 753557.897 ops/s
Iteration  16: 754908.669 ops/s
Iteration  17: 753640.495 ops/s
Iteration  18: 755043.306 ops/s
Iteration  19: 756064.970 ops/s
Iteration  20: 747894.669 ops/s
Iteration  21: 756922.055 ops/s
Iteration  22: 753906.884 ops/s
Iteration  23: 748624.308 ops/s
Iteration  24: 750395.354 ops/s
Iteration  25: 748658.898 ops/s
Iteration  26: 752603.062 ops/s
Iteration  27: 752237.957 ops/s
Iteration  28: 755608.651 ops/s
Iteration  29: 755421.492 ops/s
Iteration  30: 754750.165 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedBag_with_null":
  754586.296 ±(99.9%) 2587.242 ops/s [Average]
  (min, avg, max) = (747427.975, 754586.296, 762009.675), stdev = 3872.462
  CI (99.9%): [751999.054, 757173.538] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  754586.296 ± 2587.242  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1338330.966 ops/s
# Warmup Iteration   2: 2340691.574 ops/s
# Warmup Iteration   3: 2604461.813 ops/s
# Warmup Iteration   4: 2615097.281 ops/s
# Warmup Iteration   5: 2584481.931 ops/s
# Warmup Iteration   6: 2214463.670 ops/s
# Warmup Iteration   7: 2627250.575 ops/s
# Warmup Iteration   8: 2610958.170 ops/s
# Warmup Iteration   9: 2598848.832 ops/s
# Warmup Iteration  10: 2622865.196 ops/s
# Warmup Iteration  11: 2627410.679 ops/s
# Warmup Iteration  12: 2611965.603 ops/s
# Warmup Iteration  13: 2605143.683 ops/s
# Warmup Iteration  14: 2623491.200 ops/s
# Warmup Iteration  15: 2625100.136 ops/s
# Warmup Iteration  16: 2602994.110 ops/s
# Warmup Iteration  17: 2608865.717 ops/s
# Warmup Iteration  18: 2617521.219 ops/s
# Warmup Iteration  19: 2628549.708 ops/s
# Warmup Iteration  20: 2626553.548 ops/s
# Warmup Iteration  21: 2620382.942 ops/s
# Warmup Iteration  22: 2630217.008 ops/s
# Warmup Iteration  23: 2623081.967 ops/s
# Warmup Iteration  24: 2603692.548 ops/s
# Warmup Iteration  25: 2625383.658 ops/s
# Warmup Iteration  26: 2611711.800 ops/s
# Warmup Iteration  27: 2630434.088 ops/s
# Warmup Iteration  28: 2625641.305 ops/s
# Warmup Iteration  29: 2627762.883 ops/s
# Warmup Iteration  30: 2631581.670 ops/s
Iteration   1: 2617897.783 ops/s
Iteration   2: 2623932.418 ops/s
Iteration   3: 2627552.529 ops/s
Iteration   4: 2582824.073 ops/s
Iteration   5: 2641430.793 ops/s
Iteration   6: 2624899.383 ops/s
Iteration   7: 2621172.781 ops/s
Iteration   8: 2627629.745 ops/s
Iteration   9: 2630239.636 ops/s
Iteration  10: 2614541.211 ops/s
Iteration  11: 2620657.187 ops/s
Iteration  12: 2625807.222 ops/s
Iteration  13: 2624810.863 ops/s
Iteration  14: 2627057.080 ops/s
Iteration  15: 2600018.664 ops/s
Iteration  16: 2634754.157 ops/s
Iteration  17: 2642756.802 ops/s
Iteration  18: 2633504.598 ops/s
Iteration  19: 2631272.922 ops/s
Iteration  20: 2623504.411 ops/s
Iteration  21: 2628205.048 ops/s
Iteration  22: 2629219.588 ops/s
Iteration  23: 2576632.646 ops/s
Iteration  24: 2631026.151 ops/s
Iteration  25: 2613004.595 ops/s
Iteration  26: 2618345.778 ops/s
Iteration  27: 2626739.502 ops/s
Iteration  28: 2628513.297 ops/s
Iteration  29: 2617888.939 ops/s
Iteration  30: 2585870.214 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedListBy":
  2621057.001 ±(99.9%) 10498.106 ops/s [Average]
  (min, avg, max) = (2576632.646, 2621057.001, 2642756.802), stdev = 15713.072
  CI (99.9%): [2610558.895, 2631555.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  2621057.001 ± 10498.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1594284.387 ops/s
# Warmup Iteration   2: 1806504.523 ops/s
# Warmup Iteration   3: 2424997.709 ops/s
# Warmup Iteration   4: 2411080.093 ops/s
# Warmup Iteration   5: 2418926.608 ops/s
# Warmup Iteration   6: 2428656.096 ops/s
# Warmup Iteration   7: 2428713.660 ops/s
# Warmup Iteration   8: 2427000.106 ops/s
# Warmup Iteration   9: 2427558.353 ops/s
# Warmup Iteration  10: 2064178.933 ops/s
# Warmup Iteration  11: 2369601.553 ops/s
# Warmup Iteration  12: 2434311.504 ops/s
# Warmup Iteration  13: 2435671.819 ops/s
# Warmup Iteration  14: 2431129.368 ops/s
# Warmup Iteration  15: 2431957.519 ops/s
# Warmup Iteration  16: 2429513.199 ops/s
# Warmup Iteration  17: 2421604.244 ops/s
# Warmup Iteration  18: 2415898.241 ops/s
# Warmup Iteration  19: 2416150.942 ops/s
# Warmup Iteration  20: 2426382.273 ops/s
# Warmup Iteration  21: 2423466.537 ops/s
# Warmup Iteration  22: 2426831.492 ops/s
# Warmup Iteration  23: 2409133.014 ops/s
# Warmup Iteration  24: 2435242.502 ops/s
# Warmup Iteration  25: 2437762.560 ops/s
# Warmup Iteration  26: 2420366.778 ops/s
# Warmup Iteration  27: 2413465.192 ops/s
# Warmup Iteration  28: 2403258.804 ops/s
# Warmup Iteration  29: 2383155.876 ops/s
# Warmup Iteration  30: 2400223.412 ops/s
Iteration   1: 2433431.457 ops/s
Iteration   2: 2418051.936 ops/s
Iteration   3: 2419136.978 ops/s
Iteration   4: 2438658.129 ops/s
Iteration   5: 2368410.755 ops/s
Iteration   6: 2422194.811 ops/s
Iteration   7: 2379028.308 ops/s
Iteration   8: 2423640.423 ops/s
Iteration   9: 2389065.594 ops/s
Iteration  10: 2432146.379 ops/s
Iteration  11: 2398979.956 ops/s
Iteration  12: 2422962.113 ops/s
Iteration  13: 2431587.877 ops/s
Iteration  14: 2388938.702 ops/s
Iteration  15: 2432256.460 ops/s
Iteration  16: 2412420.854 ops/s
Iteration  17: 2376749.024 ops/s
Iteration  18: 2395396.068 ops/s
Iteration  19: 2399662.218 ops/s
Iteration  20: 2431355.339 ops/s
Iteration  21: 2421889.362 ops/s
Iteration  22: 2370710.119 ops/s
Iteration  23: 2428422.447 ops/s
Iteration  24: 2437891.711 ops/s
Iteration  25: 2415450.151 ops/s
Iteration  26: 2430362.965 ops/s
Iteration  27: 2413358.699 ops/s
Iteration  28: 2424471.515 ops/s
Iteration  29: 2438484.080 ops/s
Iteration  30: 2430716.652 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedListBy_with_null":
  2414194.369 ±(99.9%) 14272.018 ops/s [Average]
  (min, avg, max) = (2368410.755, 2414194.369, 2438658.129), stdev = 21361.687
  CI (99.9%): [2399922.351, 2428466.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  2414194.369 ± 14272.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530642.477 ops/s
# Warmup Iteration   2: 563487.503 ops/s
# Warmup Iteration   3: 674494.660 ops/s
# Warmup Iteration   4: 729624.817 ops/s
# Warmup Iteration   5: 730369.276 ops/s
# Warmup Iteration   6: 727366.294 ops/s
# Warmup Iteration   7: 729845.910 ops/s
# Warmup Iteration   8: 727495.925 ops/s
# Warmup Iteration   9: 726232.897 ops/s
# Warmup Iteration  10: 724182.282 ops/s
# Warmup Iteration  11: 730321.990 ops/s
# Warmup Iteration  12: 725300.139 ops/s
# Warmup Iteration  13: 676723.170 ops/s
# Warmup Iteration  14: 657281.438 ops/s
# Warmup Iteration  15: 730349.136 ops/s
# Warmup Iteration  16: 726549.996 ops/s
# Warmup Iteration  17: 753323.926 ops/s
# Warmup Iteration  18: 761133.356 ops/s
# Warmup Iteration  19: 761114.086 ops/s
# Warmup Iteration  20: 754912.706 ops/s
# Warmup Iteration  21: 758166.622 ops/s
# Warmup Iteration  22: 758279.753 ops/s
# Warmup Iteration  23: 757122.972 ops/s
# Warmup Iteration  24: 757921.696 ops/s
# Warmup Iteration  25: 756204.517 ops/s
# Warmup Iteration  26: 759456.338 ops/s
# Warmup Iteration  27: 760316.135 ops/s
# Warmup Iteration  28: 758397.693 ops/s
# Warmup Iteration  29: 754953.686 ops/s
# Warmup Iteration  30: 762575.843 ops/s
Iteration   1: 760522.763 ops/s
Iteration   2: 758806.999 ops/s
Iteration   3: 758787.250 ops/s
Iteration   4: 762856.973 ops/s
Iteration   5: 759547.465 ops/s
Iteration   6: 762443.114 ops/s
Iteration   7: 761328.473 ops/s
Iteration   8: 758094.962 ops/s
Iteration   9: 765115.607 ops/s
Iteration  10: 742849.654 ops/s
Iteration  11: 759806.584 ops/s
Iteration  12: 758846.299 ops/s
Iteration  13: 761063.761 ops/s
Iteration  14: 754125.078 ops/s
Iteration  15: 760249.909 ops/s
Iteration  16: 764089.816 ops/s
Iteration  17: 752916.951 ops/s
Iteration  18: 760416.432 ops/s
Iteration  19: 758673.529 ops/s
Iteration  20: 754332.030 ops/s
Iteration  21: 761273.895 ops/s
Iteration  22: 761514.204 ops/s
Iteration  23: 758204.668 ops/s
Iteration  24: 759193.145 ops/s
Iteration  25: 756321.286 ops/s
Iteration  26: 759621.225 ops/s
Iteration  27: 761349.615 ops/s
Iteration  28: 762064.137 ops/s
Iteration  29: 762834.223 ops/s
Iteration  30: 755706.671 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator":
  759098.557 ±(99.9%) 2804.179 ops/s [Average]
  (min, avg, max) = (742849.654, 759098.557, 765115.607), stdev = 4197.163
  CI (99.9%): [756294.379, 761902.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator  thrpt   30  759098.557 ± 2804.179  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 507073.761 ops/s
# Warmup Iteration   2: 547432.838 ops/s
# Warmup Iteration   3: 675476.346 ops/s
# Warmup Iteration   4: 706129.741 ops/s
# Warmup Iteration   5: 717578.309 ops/s
# Warmup Iteration   6: 707965.465 ops/s
# Warmup Iteration   7: 716251.757 ops/s
# Warmup Iteration   8: 713726.347 ops/s
# Warmup Iteration   9: 712808.723 ops/s
# Warmup Iteration  10: 712141.548 ops/s
# Warmup Iteration  11: 716950.271 ops/s
# Warmup Iteration  12: 718054.673 ops/s
# Warmup Iteration  13: 593614.236 ops/s
# Warmup Iteration  14: 713964.294 ops/s
# Warmup Iteration  15: 718184.111 ops/s
# Warmup Iteration  16: 717422.589 ops/s
# Warmup Iteration  17: 749899.791 ops/s
# Warmup Iteration  18: 749762.522 ops/s
# Warmup Iteration  19: 748048.694 ops/s
# Warmup Iteration  20: 749995.991 ops/s
# Warmup Iteration  21: 746860.825 ops/s
# Warmup Iteration  22: 748377.765 ops/s
# Warmup Iteration  23: 750570.125 ops/s
# Warmup Iteration  24: 743327.138 ops/s
# Warmup Iteration  25: 752584.403 ops/s
# Warmup Iteration  26: 750851.477 ops/s
# Warmup Iteration  27: 743745.369 ops/s
# Warmup Iteration  28: 735722.906 ops/s
# Warmup Iteration  29: 744441.061 ops/s
# Warmup Iteration  30: 740267.959 ops/s
Iteration   1: 748291.672 ops/s
Iteration   2: 752205.804 ops/s
Iteration   3: 749988.169 ops/s
Iteration   4: 739598.357 ops/s
Iteration   5: 748826.328 ops/s
Iteration   6: 748200.912 ops/s
Iteration   7: 752702.402 ops/s
Iteration   8: 741627.287 ops/s
Iteration   9: 751087.867 ops/s
Iteration  10: 754933.045 ops/s
Iteration  11: 752303.142 ops/s
Iteration  12: 738284.136 ops/s
Iteration  13: 736912.377 ops/s
Iteration  14: 749695.450 ops/s
Iteration  15: 750174.524 ops/s
Iteration  16: 752275.410 ops/s
Iteration  17: 750007.577 ops/s
Iteration  18: 749953.834 ops/s
Iteration  19: 744508.999 ops/s
Iteration  20: 749858.506 ops/s
Iteration  21: 749663.024 ops/s
Iteration  22: 747584.259 ops/s
Iteration  23: 745221.218 ops/s
Iteration  24: 752529.424 ops/s
Iteration  25: 753263.241 ops/s
Iteration  26: 754826.246 ops/s
Iteration  27: 731471.652 ops/s
Iteration  28: 737125.994 ops/s
Iteration  29: 746515.492 ops/s
Iteration  30: 749167.674 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements":
  747626.801 ±(99.9%) 3913.236 ops/s [Average]
  (min, avg, max) = (731471.652, 747626.801, 754933.045), stdev = 5857.149
  CI (99.9%): [743713.564, 751540.037] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements  thrpt   30  747626.801 ± 3913.236  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2342558.998 ops/s
# Warmup Iteration   2: 5221670.623 ops/s
# Warmup Iteration   3: 4383093.832 ops/s
# Warmup Iteration   4: 5222557.921 ops/s
# Warmup Iteration   5: 5189900.143 ops/s
# Warmup Iteration   6: 5185278.723 ops/s
# Warmup Iteration   7: 5270201.902 ops/s
# Warmup Iteration   8: 5175129.823 ops/s
# Warmup Iteration   9: 5183965.070 ops/s
# Warmup Iteration  10: 5262280.939 ops/s
# Warmup Iteration  11: 5251352.940 ops/s
# Warmup Iteration  12: 5252422.266 ops/s
# Warmup Iteration  13: 5249367.459 ops/s
# Warmup Iteration  14: 5211546.509 ops/s
# Warmup Iteration  15: 5250716.916 ops/s
# Warmup Iteration  16: 5244875.040 ops/s
# Warmup Iteration  17: 5226700.715 ops/s
# Warmup Iteration  18: 5216436.774 ops/s
# Warmup Iteration  19: 5277598.659 ops/s
# Warmup Iteration  20: 5178701.133 ops/s
# Warmup Iteration  21: 5228214.931 ops/s
# Warmup Iteration  22: 5206128.415 ops/s
# Warmup Iteration  23: 5250538.587 ops/s
# Warmup Iteration  24: 5216710.333 ops/s
# Warmup Iteration  25: 5230268.477 ops/s
# Warmup Iteration  26: 5238406.758 ops/s
# Warmup Iteration  27: 5242421.723 ops/s
# Warmup Iteration  28: 5271175.890 ops/s
# Warmup Iteration  29: 5246471.383 ops/s
# Warmup Iteration  30: 5284186.410 ops/s
Iteration   1: 5179407.835 ops/s
Iteration   2: 5219493.155 ops/s
Iteration   3: 5275874.011 ops/s
Iteration   4: 5265585.497 ops/s
Iteration   5: 5192301.689 ops/s
Iteration   6: 5271501.999 ops/s
Iteration   7: 5264121.809 ops/s
Iteration   8: 5232753.235 ops/s
Iteration   9: 5242458.074 ops/s
Iteration  10: 5237375.100 ops/s
Iteration  11: 5231623.370 ops/s
Iteration  12: 5278888.436 ops/s
Iteration  13: 5281530.459 ops/s
Iteration  14: 5293376.181 ops/s
Iteration  15: 5246788.493 ops/s
Iteration  16: 5193756.922 ops/s
Iteration  17: 5207119.229 ops/s
Iteration  18: 5270663.164 ops/s
Iteration  19: 5226316.134 ops/s
Iteration  20: 5265586.400 ops/s
Iteration  21: 5227817.795 ops/s
Iteration  22: 5279346.759 ops/s
Iteration  23: 5265618.831 ops/s
Iteration  24: 5267206.512 ops/s
Iteration  25: 5270634.959 ops/s
Iteration  26: 5232145.002 ops/s
Iteration  27: 5282865.717 ops/s
Iteration  28: 5242108.560 ops/s
Iteration  29: 5259803.408 ops/s
Iteration  30: 5192189.275 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedList_natural_ordering":
  5246541.934 ±(99.9%) 20937.943 ops/s [Average]
  (min, avg, max) = (5179407.835, 5246541.934, 5293376.181), stdev = 31338.930
  CI (99.9%): [5225603.990, 5267479.877] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  5246541.934 ± 20937.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4198224.167 ops/s
# Warmup Iteration   2: 9503777.537 ops/s
# Warmup Iteration   3: 8818979.693 ops/s
# Warmup Iteration   4: 8571656.963 ops/s
# Warmup Iteration   5: 9430924.999 ops/s
# Warmup Iteration   6: 9521300.417 ops/s
# Warmup Iteration   7: 9561786.375 ops/s
# Warmup Iteration   8: 9487320.058 ops/s
# Warmup Iteration   9: 9505457.304 ops/s
# Warmup Iteration  10: 9545480.140 ops/s
# Warmup Iteration  11: 9451005.747 ops/s
# Warmup Iteration  12: 9480746.146 ops/s
# Warmup Iteration  13: 9508223.681 ops/s
# Warmup Iteration  14: 9527824.776 ops/s
# Warmup Iteration  15: 9482600.430 ops/s
# Warmup Iteration  16: 9525562.141 ops/s
# Warmup Iteration  17: 9546618.755 ops/s
# Warmup Iteration  18: 9474077.362 ops/s
# Warmup Iteration  19: 9538741.698 ops/s
# Warmup Iteration  20: 9447901.760 ops/s
# Warmup Iteration  21: 9604712.348 ops/s
# Warmup Iteration  22: 9587421.193 ops/s
# Warmup Iteration  23: 9581602.905 ops/s
# Warmup Iteration  24: 9461754.056 ops/s
# Warmup Iteration  25: 9550551.103 ops/s
# Warmup Iteration  26: 9574336.335 ops/s
# Warmup Iteration  27: 9582845.240 ops/s
# Warmup Iteration  28: 9496591.382 ops/s
# Warmup Iteration  29: 9559526.159 ops/s
# Warmup Iteration  30: 9555500.122 ops/s
Iteration   1: 9447404.288 ops/s
Iteration   2: 9591100.511 ops/s
Iteration   3: 9595435.957 ops/s
Iteration   4: 9548589.542 ops/s
Iteration   5: 9471487.409 ops/s
Iteration   6: 9480440.682 ops/s
Iteration   7: 9546652.580 ops/s
Iteration   8: 9519920.499 ops/s
Iteration   9: 9558700.071 ops/s
Iteration  10: 9558383.019 ops/s
Iteration  11: 9538591.274 ops/s
Iteration  12: 9523574.216 ops/s
Iteration  13: 9562349.439 ops/s
Iteration  14: 9585102.450 ops/s
Iteration  15: 9590273.742 ops/s
Iteration  16: 9551469.651 ops/s
Iteration  17: 9570987.912 ops/s
Iteration  18: 9499740.763 ops/s
Iteration  19: 9500661.619 ops/s
Iteration  20: 9382046.248 ops/s
Iteration  21: 9502793.381 ops/s
Iteration  22: 9397876.720 ops/s
Iteration  23: 9416163.923 ops/s
Iteration  24: 9486670.278 ops/s
Iteration  25: 9526908.884 ops/s
Iteration  26: 9566228.120 ops/s
Iteration  27: 9580100.799 ops/s
Iteration  28: 9576925.460 ops/s
Iteration  29: 9523545.744 ops/s
Iteration  30: 9592455.782 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedList_with_comparator":
  9526419.365 ±(99.9%) 39102.071 ops/s [Average]
  (min, avg, max) = (9382046.248, 9526419.365, 9595435.957), stdev = 58526.144
  CI (99.9%): [9487317.294, 9565521.437] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  9526419.365 ± 39102.071  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 526408.818 ops/s
# Warmup Iteration   2: 551502.899 ops/s
# Warmup Iteration   3: 662546.537 ops/s
# Warmup Iteration   4: 720996.569 ops/s
# Warmup Iteration   5: 723040.114 ops/s
# Warmup Iteration   6: 715400.351 ops/s
# Warmup Iteration   7: 722862.045 ops/s
# Warmup Iteration   8: 723810.915 ops/s
# Warmup Iteration   9: 718727.508 ops/s
# Warmup Iteration  10: 724444.986 ops/s
# Warmup Iteration  11: 721428.188 ops/s
# Warmup Iteration  12: 724423.559 ops/s
# Warmup Iteration  13: 690979.900 ops/s
# Warmup Iteration  14: 630240.871 ops/s
# Warmup Iteration  15: 721054.847 ops/s
# Warmup Iteration  16: 716617.160 ops/s
# Warmup Iteration  17: 755357.068 ops/s
# Warmup Iteration  18: 753046.904 ops/s
# Warmup Iteration  19: 755560.035 ops/s
# Warmup Iteration  20: 759023.327 ops/s
# Warmup Iteration  21: 754912.950 ops/s
# Warmup Iteration  22: 749007.776 ops/s
# Warmup Iteration  23: 752477.033 ops/s
# Warmup Iteration  24: 756212.391 ops/s
# Warmup Iteration  25: 749202.781 ops/s
# Warmup Iteration  26: 756854.203 ops/s
# Warmup Iteration  27: 751924.360 ops/s
# Warmup Iteration  28: 753069.767 ops/s
# Warmup Iteration  29: 755654.682 ops/s
# Warmup Iteration  30: 759296.825 ops/s
Iteration   1: 758145.426 ops/s
Iteration   2: 757038.224 ops/s
Iteration   3: 761171.346 ops/s
Iteration   4: 756488.112 ops/s
Iteration   5: 762828.638 ops/s
Iteration   6: 744426.498 ops/s
Iteration   7: 762563.008 ops/s
Iteration   8: 751101.742 ops/s
Iteration   9: 755191.555 ops/s
Iteration  10: 757955.902 ops/s
Iteration  11: 760573.663 ops/s
Iteration  12: 754670.250 ops/s
Iteration  13: 745324.416 ops/s
Iteration  14: 747109.218 ops/s
Iteration  15: 755884.752 ops/s
Iteration  16: 758268.431 ops/s
Iteration  17: 757218.722 ops/s
Iteration  18: 745885.797 ops/s
Iteration  19: 760973.000 ops/s
Iteration  20: 757650.314 ops/s
Iteration  21: 743631.194 ops/s
Iteration  22: 758067.234 ops/s
Iteration  23: 756090.944 ops/s
Iteration  24: 755303.640 ops/s
Iteration  25: 756345.414 ops/s
Iteration  26: 754878.553 ops/s
Iteration  27: 760459.383 ops/s
Iteration  28: 757358.333 ops/s
Iteration  29: 760975.951 ops/s
Iteration  30: 758035.933 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedList_with_null":
  755720.520 ±(99.9%) 3604.958 ops/s [Average]
  (min, avg, max) = (743631.194, 755720.520, 762828.638), stdev = 5395.731
  CI (99.9%): [752115.562, 759325.477] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  755720.520 ± 3604.958  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 582515.285 ops/s
# Warmup Iteration   2: 1358982.041 ops/s
# Warmup Iteration   3: 1422535.366 ops/s
# Warmup Iteration   4: 1215515.593 ops/s
# Warmup Iteration   5: 1374824.055 ops/s
# Warmup Iteration   6: 1415251.440 ops/s
# Warmup Iteration   7: 1422421.335 ops/s
# Warmup Iteration   8: 1414073.392 ops/s
# Warmup Iteration   9: 1414728.525 ops/s
# Warmup Iteration  10: 1423956.628 ops/s
# Warmup Iteration  11: 1403239.091 ops/s
# Warmup Iteration  12: 1416636.961 ops/s
# Warmup Iteration  13: 1405927.656 ops/s
# Warmup Iteration  14: 1417044.455 ops/s
# Warmup Iteration  15: 1415550.939 ops/s
# Warmup Iteration  16: 1428175.187 ops/s
# Warmup Iteration  17: 1410106.491 ops/s
# Warmup Iteration  18: 1424737.138 ops/s
# Warmup Iteration  19: 1421588.596 ops/s
# Warmup Iteration  20: 1417909.131 ops/s
# Warmup Iteration  21: 1423207.098 ops/s
# Warmup Iteration  22: 1408106.992 ops/s
# Warmup Iteration  23: 1420827.741 ops/s
# Warmup Iteration  24: 1411493.689 ops/s
# Warmup Iteration  25: 1430849.784 ops/s
# Warmup Iteration  26: 1406483.193 ops/s
# Warmup Iteration  27: 1407794.820 ops/s
# Warmup Iteration  28: 1426013.223 ops/s
# Warmup Iteration  29: 1423844.880 ops/s
# Warmup Iteration  30: 1416246.486 ops/s
Iteration   1: 1414964.145 ops/s
Iteration   2: 1410823.439 ops/s
Iteration   3: 1412371.807 ops/s
Iteration   4: 1425921.606 ops/s
Iteration   5: 1417357.720 ops/s
Iteration   6: 1431640.512 ops/s
Iteration   7: 1419030.011 ops/s
Iteration   8: 1402742.514 ops/s
Iteration   9: 1419110.790 ops/s
Iteration  10: 1369699.968 ops/s
Iteration  11: 1422185.342 ops/s
Iteration  12: 1420664.419 ops/s
Iteration  13: 1414946.923 ops/s
Iteration  14: 1419621.729 ops/s
Iteration  15: 1402341.644 ops/s
Iteration  16: 1412168.872 ops/s
Iteration  17: 1423585.276 ops/s
Iteration  18: 1422082.279 ops/s
Iteration  19: 1422382.577 ops/s
Iteration  20: 1413986.509 ops/s
Iteration  21: 1415119.910 ops/s
Iteration  22: 1421153.300 ops/s
Iteration  23: 1413205.814 ops/s
Iteration  24: 1424173.734 ops/s
Iteration  25: 1427053.861 ops/s
Iteration  26: 1423263.047 ops/s
Iteration  27: 1424259.101 ops/s
Iteration  28: 1424503.542 ops/s
Iteration  29: 1423868.375 ops/s
Iteration  30: 1423952.738 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedMap":
  1417272.717 ±(99.9%) 7477.986 ops/s [Average]
  (min, avg, max) = (1369699.968, 1417272.717, 1431640.512), stdev = 11192.698
  CI (99.9%): [1409794.731, 1424750.703] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedMap  thrpt   30  1417272.717 ± 7477.986  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 515351.509 ops/s
# Warmup Iteration   2: 1110667.985 ops/s
# Warmup Iteration   3: 1203841.356 ops/s
# Warmup Iteration   4: 1214687.151 ops/s
# Warmup Iteration   5: 993041.438 ops/s
# Warmup Iteration   6: 1216975.436 ops/s
# Warmup Iteration   7: 1205570.476 ops/s
# Warmup Iteration   8: 1216979.878 ops/s
# Warmup Iteration   9: 1214549.911 ops/s
# Warmup Iteration  10: 1215453.058 ops/s
# Warmup Iteration  11: 1220590.757 ops/s
# Warmup Iteration  12: 1216860.397 ops/s
# Warmup Iteration  13: 1214043.082 ops/s
# Warmup Iteration  14: 1212952.350 ops/s
# Warmup Iteration  15: 1209364.058 ops/s
# Warmup Iteration  16: 1218178.296 ops/s
# Warmup Iteration  17: 1186347.722 ops/s
# Warmup Iteration  18: 1211018.934 ops/s
# Warmup Iteration  19: 1216974.164 ops/s
# Warmup Iteration  20: 1210254.210 ops/s
# Warmup Iteration  21: 1218118.575 ops/s
# Warmup Iteration  22: 1215156.464 ops/s
# Warmup Iteration  23: 1213769.512 ops/s
# Warmup Iteration  24: 1212422.085 ops/s
# Warmup Iteration  25: 1211685.470 ops/s
# Warmup Iteration  26: 1212432.419 ops/s
# Warmup Iteration  27: 1211019.075 ops/s
# Warmup Iteration  28: 1213946.265 ops/s
# Warmup Iteration  29: 1204688.893 ops/s
# Warmup Iteration  30: 1218983.428 ops/s
Iteration   1: 1195748.245 ops/s
Iteration   2: 1218451.635 ops/s
Iteration   3: 1218730.505 ops/s
Iteration   4: 1216918.264 ops/s
Iteration   5: 1215501.103 ops/s
Iteration   6: 1216033.869 ops/s
Iteration   7: 1225885.335 ops/s
Iteration   8: 1204135.457 ops/s
Iteration   9: 1207628.759 ops/s
Iteration  10: 1211200.268 ops/s
Iteration  11: 1215913.025 ops/s
Iteration  12: 1195299.868 ops/s
Iteration  13: 1213241.723 ops/s
Iteration  14: 1214690.699 ops/s
Iteration  15: 1193788.697 ops/s
Iteration  16: 1213546.242 ops/s
Iteration  17: 1204691.020 ops/s
Iteration  18: 1214675.743 ops/s
Iteration  19: 1212788.377 ops/s
Iteration  20: 1210685.622 ops/s
Iteration  21: 1209113.471 ops/s
Iteration  22: 1215207.615 ops/s
Iteration  23: 1221548.361 ops/s
Iteration  24: 1204175.128 ops/s
Iteration  25: 1224089.000 ops/s
Iteration  26: 1207361.032 ops/s
Iteration  27: 1217689.334 ops/s
Iteration  28: 1201782.136 ops/s
Iteration  29: 1215692.816 ops/s
Iteration  30: 1192220.804 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedMapBy":
  1210947.805 ±(99.9%) 5852.446 ops/s [Average]
  (min, avg, max) = (1192220.804, 1210947.805, 1225885.335), stdev = 8759.667
  CI (99.9%): [1205095.359, 1216800.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  1210947.805 ± 5852.446  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 569950.034 ops/s
# Warmup Iteration   2: 1292000.233 ops/s
# Warmup Iteration   3: 1344641.057 ops/s
# Warmup Iteration   4: 1274186.804 ops/s
# Warmup Iteration   5: 1202692.089 ops/s
# Warmup Iteration   6: 1336824.323 ops/s
# Warmup Iteration   7: 1339163.967 ops/s
# Warmup Iteration   8: 1353442.272 ops/s
# Warmup Iteration   9: 1352493.693 ops/s
# Warmup Iteration  10: 1334934.627 ops/s
# Warmup Iteration  11: 1349090.963 ops/s
# Warmup Iteration  12: 1347493.420 ops/s
# Warmup Iteration  13: 1348203.049 ops/s
# Warmup Iteration  14: 1346922.951 ops/s
# Warmup Iteration  15: 1345006.828 ops/s
# Warmup Iteration  16: 1355891.472 ops/s
# Warmup Iteration  17: 1351611.720 ops/s
# Warmup Iteration  18: 1354852.140 ops/s
# Warmup Iteration  19: 1325695.666 ops/s
# Warmup Iteration  20: 1353305.706 ops/s
# Warmup Iteration  21: 1351010.617 ops/s
# Warmup Iteration  22: 1356706.244 ops/s
# Warmup Iteration  23: 1351177.279 ops/s
# Warmup Iteration  24: 1349920.016 ops/s
# Warmup Iteration  25: 1351277.412 ops/s
# Warmup Iteration  26: 1351491.389 ops/s
# Warmup Iteration  27: 1352416.336 ops/s
# Warmup Iteration  28: 1351300.004 ops/s
# Warmup Iteration  29: 1323244.810 ops/s
# Warmup Iteration  30: 1351343.415 ops/s
Iteration   1: 1335043.852 ops/s
Iteration   2: 1343226.420 ops/s
Iteration   3: 1356685.541 ops/s
Iteration   4: 1331203.980 ops/s
Iteration   5: 1320111.235 ops/s
Iteration   6: 1360528.044 ops/s
Iteration   7: 1350137.373 ops/s
Iteration   8: 1345804.125 ops/s
Iteration   9: 1357235.315 ops/s
Iteration  10: 1342805.767 ops/s
Iteration  11: 1345737.633 ops/s
Iteration  12: 1350529.313 ops/s
Iteration  13: 1346039.402 ops/s
Iteration  14: 1348857.646 ops/s
Iteration  15: 1357066.479 ops/s
Iteration  16: 1354526.437 ops/s
Iteration  17: 1332089.255 ops/s
Iteration  18: 1350291.957 ops/s
Iteration  19: 1348512.876 ops/s
Iteration  20: 1361353.534 ops/s
Iteration  21: 1355234.065 ops/s
Iteration  22: 1356658.075 ops/s
Iteration  23: 1355512.718 ops/s
Iteration  24: 1351154.939 ops/s
Iteration  25: 1345107.134 ops/s
Iteration  26: 1348998.381 ops/s
Iteration  27: 1348938.436 ops/s
Iteration  28: 1347031.799 ops/s
Iteration  29: 1358651.633 ops/s
Iteration  30: 1328026.956 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedMap_with_comparator":
  1347770.011 ±(99.9%) 6678.975 ops/s [Average]
  (min, avg, max) = (1320111.235, 1347770.011, 1361353.534), stdev = 9996.776
  CI (99.9%): [1341091.036, 1354448.986] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  1347770.011 ± 6678.975  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664076.644 ops/s
# Warmup Iteration   2: 1484437.028 ops/s
# Warmup Iteration   3: 1534219.379 ops/s
# Warmup Iteration   4: 1435613.290 ops/s
# Warmup Iteration   5: 1365214.751 ops/s
# Warmup Iteration   6: 1538639.770 ops/s
# Warmup Iteration   7: 1539145.713 ops/s
# Warmup Iteration   8: 1540665.038 ops/s
# Warmup Iteration   9: 1534558.357 ops/s
# Warmup Iteration  10: 1536350.464 ops/s
# Warmup Iteration  11: 1540162.840 ops/s
# Warmup Iteration  12: 1538852.069 ops/s
# Warmup Iteration  13: 1539898.526 ops/s
# Warmup Iteration  14: 1529353.954 ops/s
# Warmup Iteration  15: 1515111.303 ops/s
# Warmup Iteration  16: 1538050.063 ops/s
# Warmup Iteration  17: 1534122.924 ops/s
# Warmup Iteration  18: 1536532.088 ops/s
# Warmup Iteration  19: 1536639.209 ops/s
# Warmup Iteration  20: 1529841.890 ops/s
# Warmup Iteration  21: 1530797.629 ops/s
# Warmup Iteration  22: 1539768.291 ops/s
# Warmup Iteration  23: 1538932.180 ops/s
# Warmup Iteration  24: 1523662.601 ops/s
# Warmup Iteration  25: 1544552.876 ops/s
# Warmup Iteration  26: 1539472.762 ops/s
# Warmup Iteration  27: 1542509.036 ops/s
# Warmup Iteration  28: 1519034.345 ops/s
# Warmup Iteration  29: 1538191.779 ops/s
# Warmup Iteration  30: 1540871.497 ops/s
Iteration   1: 1524915.190 ops/s
Iteration   2: 1539517.073 ops/s
Iteration   3: 1540663.539 ops/s
Iteration   4: 1537247.725 ops/s
Iteration   5: 1535699.945 ops/s
Iteration   6: 1543390.072 ops/s
Iteration   7: 1506279.155 ops/s
Iteration   8: 1540834.258 ops/s
Iteration   9: 1551611.988 ops/s
Iteration  10: 1542223.283 ops/s
Iteration  11: 1544668.517 ops/s
Iteration  12: 1532231.513 ops/s
Iteration  13: 1534495.465 ops/s
Iteration  14: 1537983.276 ops/s
Iteration  15: 1541933.212 ops/s
Iteration  16: 1545978.637 ops/s
Iteration  17: 1540349.516 ops/s
Iteration  18: 1534595.718 ops/s
Iteration  19: 1548393.037 ops/s
Iteration  20: 1538578.475 ops/s
Iteration  21: 1541165.951 ops/s
Iteration  22: 1542471.749 ops/s
Iteration  23: 1543395.901 ops/s
Iteration  24: 1545616.820 ops/s
Iteration  25: 1501696.611 ops/s
Iteration  26: 1520497.611 ops/s
Iteration  27: 1536015.963 ops/s
Iteration  28: 1547341.083 ops/s
Iteration  29: 1532655.979 ops/s
Iteration  30: 1532413.472 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedSetBy":
  1536828.691 ±(99.9%) 7421.895 ops/s [Average]
  (min, avg, max) = (1501696.611, 1536828.691, 1551611.988), stdev = 11108.744
  CI (99.9%): [1529406.796, 1544250.586] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1536828.691 ± 7421.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1041054.972 ops/s
# Warmup Iteration   2: 2597052.280 ops/s
# Warmup Iteration   3: 2487900.672 ops/s
# Warmup Iteration   4: 2286583.107 ops/s
# Warmup Iteration   5: 2623026.604 ops/s
# Warmup Iteration   6: 2602059.259 ops/s
# Warmup Iteration   7: 2620208.037 ops/s
# Warmup Iteration   8: 2636410.934 ops/s
# Warmup Iteration   9: 2617089.398 ops/s
# Warmup Iteration  10: 2577806.009 ops/s
# Warmup Iteration  11: 2622502.004 ops/s
# Warmup Iteration  12: 2614164.059 ops/s
# Warmup Iteration  13: 2616772.159 ops/s
# Warmup Iteration  14: 2623628.808 ops/s
# Warmup Iteration  15: 2630899.429 ops/s
# Warmup Iteration  16: 2608584.101 ops/s
# Warmup Iteration  17: 2616186.504 ops/s
# Warmup Iteration  18: 2610102.064 ops/s
# Warmup Iteration  19: 2606686.610 ops/s
# Warmup Iteration  20: 2626097.659 ops/s
# Warmup Iteration  21: 2638174.120 ops/s
# Warmup Iteration  22: 2612517.030 ops/s
# Warmup Iteration  23: 2600855.714 ops/s
# Warmup Iteration  24: 2605912.864 ops/s
# Warmup Iteration  25: 2616393.526 ops/s
# Warmup Iteration  26: 2627422.087 ops/s
# Warmup Iteration  27: 2619187.317 ops/s
# Warmup Iteration  28: 2614605.728 ops/s
# Warmup Iteration  29: 2611485.137 ops/s
# Warmup Iteration  30: 2627244.645 ops/s
Iteration   1: 2630813.747 ops/s
Iteration   2: 2614023.895 ops/s
Iteration   3: 2590207.014 ops/s
Iteration   4: 2564955.862 ops/s
Iteration   5: 2625337.406 ops/s
Iteration   6: 2613660.441 ops/s
Iteration   7: 2614381.156 ops/s
Iteration   8: 2585891.959 ops/s
Iteration   9: 2607578.600 ops/s
Iteration  10: 2597488.424 ops/s
Iteration  11: 2618813.040 ops/s
Iteration  12: 2570377.372 ops/s
Iteration  13: 2608066.663 ops/s
Iteration  14: 2619553.356 ops/s
Iteration  15: 2605492.015 ops/s
Iteration  16: 2622560.023 ops/s
Iteration  17: 2610220.469 ops/s
Iteration  18: 2603687.954 ops/s
Iteration  19: 2622002.428 ops/s
Iteration  20: 2571775.623 ops/s
Iteration  21: 2626751.342 ops/s
Iteration  22: 2587312.319 ops/s
Iteration  23: 2607442.648 ops/s
Iteration  24: 2610073.553 ops/s
Iteration  25: 2613201.358 ops/s
Iteration  26: 2582938.335 ops/s
Iteration  27: 2589942.543 ops/s
Iteration  28: 2620970.864 ops/s
Iteration  29: 2600266.191 ops/s
Iteration  30: 2622340.643 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  2605270.908 ±(99.9%) 11828.950 ops/s [Average]
  (min, avg, max) = (2564955.862, 2605270.908, 2630813.747), stdev = 17705.017
  CI (99.9%): [2593441.958, 2617099.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  2605270.908 ± 11828.950  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 982121.347 ops/s
# Warmup Iteration   2: 2411514.989 ops/s
# Warmup Iteration   3: 2427735.658 ops/s
# Warmup Iteration   4: 1996883.040 ops/s
# Warmup Iteration   5: 2402114.881 ops/s
# Warmup Iteration   6: 2439808.361 ops/s
# Warmup Iteration   7: 2459148.120 ops/s
# Warmup Iteration   8: 2425284.841 ops/s
# Warmup Iteration   9: 2442261.119 ops/s
# Warmup Iteration  10: 2452420.825 ops/s
# Warmup Iteration  11: 2449585.386 ops/s
# Warmup Iteration  12: 2444969.371 ops/s
# Warmup Iteration  13: 2429322.812 ops/s
# Warmup Iteration  14: 2439129.584 ops/s
# Warmup Iteration  15: 2441564.055 ops/s
# Warmup Iteration  16: 2448047.958 ops/s
# Warmup Iteration  17: 2442136.497 ops/s
# Warmup Iteration  18: 2444397.787 ops/s
# Warmup Iteration  19: 2395717.272 ops/s
# Warmup Iteration  20: 2447175.231 ops/s
# Warmup Iteration  21: 2440792.575 ops/s
# Warmup Iteration  22: 2425975.258 ops/s
# Warmup Iteration  23: 2448594.680 ops/s
# Warmup Iteration  24: 2448400.794 ops/s
# Warmup Iteration  25: 2418332.297 ops/s
# Warmup Iteration  26: 2427979.757 ops/s
# Warmup Iteration  27: 2439933.961 ops/s
# Warmup Iteration  28: 2441406.987 ops/s
# Warmup Iteration  29: 2416060.221 ops/s
# Warmup Iteration  30: 2432442.121 ops/s
Iteration   1: 2379506.551 ops/s
Iteration   2: 2444249.359 ops/s
Iteration   3: 2458250.933 ops/s
Iteration   4: 2454158.727 ops/s
Iteration   5: 2442832.686 ops/s
Iteration   6: 2452805.592 ops/s
Iteration   7: 2414919.143 ops/s
Iteration   8: 2447503.398 ops/s
Iteration   9: 2452184.336 ops/s
Iteration  10: 2441055.040 ops/s
Iteration  11: 2438954.879 ops/s
Iteration  12: 2459217.797 ops/s
Iteration  13: 2443867.493 ops/s
Iteration  14: 2453973.375 ops/s
Iteration  15: 2453545.484 ops/s
Iteration  16: 2454217.352 ops/s
Iteration  17: 2447531.901 ops/s
Iteration  18: 2442446.099 ops/s
Iteration  19: 2435104.698 ops/s
Iteration  20: 2444353.553 ops/s
Iteration  21: 2456426.993 ops/s
Iteration  22: 2446906.710 ops/s
Iteration  23: 2438291.129 ops/s
Iteration  24: 2445032.595 ops/s
Iteration  25: 2451874.543 ops/s
Iteration  26: 2423807.567 ops/s
Iteration  27: 2387625.551 ops/s
Iteration  28: 2444513.240 ops/s
Iteration  29: 2433866.723 ops/s
Iteration  30: 2446519.803 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toSortedSet_with_comparator":
  2441184.775 ±(99.9%) 12307.107 ops/s [Average]
  (min, avg, max) = (2379506.551, 2441184.775, 2459217.797), stdev = 18420.700
  CI (99.9%): [2428877.668, 2453491.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  2441184.775 ± 12307.107  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4521502.062 ops/s
# Warmup Iteration   2: 9572583.469 ops/s
# Warmup Iteration   3: 8183221.958 ops/s
# Warmup Iteration   4: 9604334.159 ops/s
# Warmup Iteration   5: 9698355.525 ops/s
# Warmup Iteration   6: 9639799.792 ops/s
# Warmup Iteration   7: 9796661.104 ops/s
# Warmup Iteration   8: 9755773.145 ops/s
# Warmup Iteration   9: 9664184.430 ops/s
# Warmup Iteration  10: 9695529.182 ops/s
# Warmup Iteration  11: 9782682.177 ops/s
# Warmup Iteration  12: 9726251.088 ops/s
# Warmup Iteration  13: 9737230.707 ops/s
# Warmup Iteration  14: 9800178.454 ops/s
# Warmup Iteration  15: 9729456.408 ops/s
# Warmup Iteration  16: 9762946.893 ops/s
# Warmup Iteration  17: 9825155.883 ops/s
# Warmup Iteration  18: 9853309.087 ops/s
# Warmup Iteration  19: 9841729.245 ops/s
# Warmup Iteration  20: 9832446.836 ops/s
# Warmup Iteration  21: 9820810.863 ops/s
# Warmup Iteration  22: 9778448.295 ops/s
# Warmup Iteration  23: 9732243.782 ops/s
# Warmup Iteration  24: 9883463.130 ops/s
# Warmup Iteration  25: 9838090.868 ops/s
# Warmup Iteration  26: 9786683.095 ops/s
# Warmup Iteration  27: 9869567.950 ops/s
# Warmup Iteration  28: 9878648.394 ops/s
# Warmup Iteration  29: 9769554.352 ops/s
# Warmup Iteration  30: 9833414.394 ops/s
Iteration   1: 9848774.558 ops/s
Iteration   2: 9889687.294 ops/s
Iteration   3: 9858421.295 ops/s
Iteration   4: 9759435.161 ops/s
Iteration   5: 9866307.278 ops/s
Iteration   6: 9875679.891 ops/s
Iteration   7: 9780773.935 ops/s
Iteration   8: 9874888.357 ops/s
Iteration   9: 9801294.336 ops/s
Iteration  10: 9889354.828 ops/s
Iteration  11: 9847832.445 ops/s
Iteration  12: 9810871.052 ops/s
Iteration  13: 9892126.776 ops/s
Iteration  14: 9862809.963 ops/s
Iteration  15: 9825211.735 ops/s
Iteration  16: 9917212.684 ops/s
Iteration  17: 9867890.337 ops/s
Iteration  18: 9874341.666 ops/s
Iteration  19: 9844411.054 ops/s
Iteration  20: 9855655.769 ops/s
Iteration  21: 9654395.783 ops/s
Iteration  22: 9887021.500 ops/s
Iteration  23: 9826779.555 ops/s
Iteration  24: 9849725.837 ops/s
Iteration  25: 9817560.859 ops/s
Iteration  26: 9817047.330 ops/s
Iteration  27: 9823194.982 ops/s
Iteration  28: 9836050.376 ops/s
Iteration  29: 9870183.611 ops/s
Iteration  30: 9600269.221 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_toStack":
  9834173.649 ±(99.9%) 44416.595 ops/s [Average]
  (min, avg, max) = (9600269.221, 9834173.649, 9917212.684), stdev = 66480.674
  CI (99.9%): [9789757.054, 9878590.244] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_toStack  thrpt   30  9834173.649 ± 44416.595  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1705153.142 ops/s
# Warmup Iteration   2: 3102896.517 ops/s
# Warmup Iteration   3: 3284809.546 ops/s
# Warmup Iteration   4: 3289326.124 ops/s
# Warmup Iteration   5: 2820572.475 ops/s
# Warmup Iteration   6: 3224363.773 ops/s
# Warmup Iteration   7: 3307932.975 ops/s
# Warmup Iteration   8: 3309098.637 ops/s
# Warmup Iteration   9: 3305792.987 ops/s
# Warmup Iteration  10: 3297406.870 ops/s
# Warmup Iteration  11: 3309227.295 ops/s
# Warmup Iteration  12: 3271163.943 ops/s
# Warmup Iteration  13: 3296454.445 ops/s
# Warmup Iteration  14: 3301176.625 ops/s
# Warmup Iteration  15: 3313137.466 ops/s
# Warmup Iteration  16: 3317292.585 ops/s
# Warmup Iteration  17: 3309819.755 ops/s
# Warmup Iteration  18: 3300098.023 ops/s
# Warmup Iteration  19: 3313239.438 ops/s
# Warmup Iteration  20: 3281766.236 ops/s
# Warmup Iteration  21: 3303838.098 ops/s
# Warmup Iteration  22: 3307536.618 ops/s
# Warmup Iteration  23: 3310765.116 ops/s
# Warmup Iteration  24: 3280153.243 ops/s
# Warmup Iteration  25: 3291425.053 ops/s
# Warmup Iteration  26: 3301741.653 ops/s
# Warmup Iteration  27: 3309281.611 ops/s
# Warmup Iteration  28: 3301036.568 ops/s
# Warmup Iteration  29: 3274419.851 ops/s
# Warmup Iteration  30: 3308419.747 ops/s
Iteration   1: 3293509.460 ops/s
Iteration   2: 3296420.176 ops/s
Iteration   3: 3289664.087 ops/s
Iteration   4: 3284570.078 ops/s
Iteration   5: 3307688.346 ops/s
Iteration   6: 3323472.821 ops/s
Iteration   7: 3304497.520 ops/s
Iteration   8: 3247382.271 ops/s
Iteration   9: 3328124.897 ops/s
Iteration  10: 3302237.947 ops/s
Iteration  11: 3308447.656 ops/s
Iteration  12: 3311637.920 ops/s
Iteration  13: 3312813.827 ops/s
Iteration  14: 3307027.318 ops/s
Iteration  15: 3277677.348 ops/s
Iteration  16: 3307173.863 ops/s
Iteration  17: 3240333.164 ops/s
Iteration  18: 3309403.912 ops/s
Iteration  19: 3295114.268 ops/s
Iteration  20: 3258701.058 ops/s
Iteration  21: 3301270.333 ops/s
Iteration  22: 3295168.781 ops/s
Iteration  23: 3300240.162 ops/s
Iteration  24: 3305473.839 ops/s
Iteration  25: 3310445.554 ops/s
Iteration  26: 3324662.478 ops/s
Iteration  27: 3292132.424 ops/s
Iteration  28: 3312588.847 ops/s
Iteration  29: 3289503.129 ops/s
Iteration  30: 3312394.986 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_with":
  3298325.949 ±(99.9%) 13655.905 ops/s [Average]
  (min, avg, max) = (3240333.164, 3298325.949, 3328124.897), stdev = 20439.517
  CI (99.9%): [3284670.044, 3311981.854] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_with  thrpt   30  3298325.949 ± 13655.905  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1522856.204 ops/s
# Warmup Iteration   2: 2689239.563 ops/s
# Warmup Iteration   3: 2904611.922 ops/s
# Warmup Iteration   4: 2919218.013 ops/s
# Warmup Iteration   5: 2883576.350 ops/s
# Warmup Iteration   6: 2490651.183 ops/s
# Warmup Iteration   7: 2928447.133 ops/s
# Warmup Iteration   8: 2890101.102 ops/s
# Warmup Iteration   9: 2922725.202 ops/s
# Warmup Iteration  10: 2919851.289 ops/s
# Warmup Iteration  11: 2922303.089 ops/s
# Warmup Iteration  12: 2904485.274 ops/s
# Warmup Iteration  13: 2929989.787 ops/s
# Warmup Iteration  14: 2920148.300 ops/s
# Warmup Iteration  15: 2930623.134 ops/s
# Warmup Iteration  16: 2913148.640 ops/s
# Warmup Iteration  17: 2926697.620 ops/s
# Warmup Iteration  18: 2913777.650 ops/s
# Warmup Iteration  19: 2926461.163 ops/s
# Warmup Iteration  20: 2905105.708 ops/s
# Warmup Iteration  21: 2929464.578 ops/s
# Warmup Iteration  22: 2927856.819 ops/s
# Warmup Iteration  23: 2898982.114 ops/s
# Warmup Iteration  24: 2921268.638 ops/s
# Warmup Iteration  25: 2898247.964 ops/s
# Warmup Iteration  26: 2923876.981 ops/s
# Warmup Iteration  27: 2914777.129 ops/s
# Warmup Iteration  28: 2899462.669 ops/s
# Warmup Iteration  29: 2928797.681 ops/s
# Warmup Iteration  30: 2932854.435 ops/s
Iteration   1: 2935546.717 ops/s
Iteration   2: 2917208.146 ops/s
Iteration   3: 2930243.842 ops/s
Iteration   4: 2925886.431 ops/s
Iteration   5: 2856156.799 ops/s
Iteration   6: 2926183.122 ops/s
Iteration   7: 2900979.903 ops/s
Iteration   8: 2927607.593 ops/s
Iteration   9: 2927273.300 ops/s
Iteration  10: 2865554.857 ops/s
Iteration  11: 2943292.302 ops/s
Iteration  12: 2924056.421 ops/s
Iteration  13: 2919323.761 ops/s
Iteration  14: 2939847.018 ops/s
Iteration  15: 2939730.231 ops/s
Iteration  16: 2922280.893 ops/s
Iteration  17: 2930125.771 ops/s
Iteration  18: 2932473.169 ops/s
Iteration  19: 2916819.557 ops/s
Iteration  20: 2928777.697 ops/s
Iteration  21: 2917365.170 ops/s
Iteration  22: 2923510.545 ops/s
Iteration  23: 2922247.580 ops/s
Iteration  24: 2881191.649 ops/s
Iteration  25: 2938095.705 ops/s
Iteration  26: 2888255.495 ops/s
Iteration  27: 2937269.682 ops/s
Iteration  28: 2889262.682 ops/s
Iteration  29: 2928132.628 ops/s
Iteration  30: 2937150.217 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withAll":
  2919061.629 ±(99.9%) 14719.224 ops/s [Average]
  (min, avg, max) = (2856156.799, 2919061.629, 2943292.302), stdev = 22031.043
  CI (99.9%): [2904342.406, 2933780.853] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_withAll  thrpt   30  2919061.629 ± 14719.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withMethods$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withMethods

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1057697.593 ops/s
# Warmup Iteration   2: 2361837.200 ops/s
# Warmup Iteration   3: 2004386.482 ops/s
# Warmup Iteration   4: 2385373.150 ops/s
# Warmup Iteration   5: 2386482.681 ops/s
# Warmup Iteration   6: 2402956.526 ops/s
# Warmup Iteration   7: 2396687.723 ops/s
# Warmup Iteration   8: 2407960.694 ops/s
# Warmup Iteration   9: 2405062.676 ops/s
# Warmup Iteration  10: 2384523.854 ops/s
# Warmup Iteration  11: 2392912.291 ops/s
# Warmup Iteration  12: 2392850.247 ops/s
# Warmup Iteration  13: 2404733.137 ops/s
# Warmup Iteration  14: 2393344.579 ops/s
# Warmup Iteration  15: 2377287.880 ops/s
# Warmup Iteration  16: 2404457.438 ops/s
# Warmup Iteration  17: 2380121.546 ops/s
# Warmup Iteration  18: 2406135.644 ops/s
# Warmup Iteration  19: 2409163.301 ops/s
# Warmup Iteration  20: 2401713.397 ops/s
# Warmup Iteration  21: 2395379.111 ops/s
# Warmup Iteration  22: 2396030.197 ops/s
# Warmup Iteration  23: 2409375.290 ops/s
# Warmup Iteration  24: 2403149.420 ops/s
# Warmup Iteration  25: 2398452.219 ops/s
# Warmup Iteration  26: 2396565.405 ops/s
# Warmup Iteration  27: 2406691.206 ops/s
# Warmup Iteration  28: 2406225.235 ops/s
# Warmup Iteration  29: 2408579.032 ops/s
# Warmup Iteration  30: 2384058.013 ops/s
Iteration   1: 2319480.799 ops/s
Iteration   2: 2407110.123 ops/s
Iteration   3: 2371660.023 ops/s
Iteration   4: 2397899.839 ops/s
Iteration   5: 2410411.397 ops/s
Iteration   6: 2416643.978 ops/s
Iteration   7: 2418321.174 ops/s
Iteration   8: 2401415.705 ops/s
Iteration   9: 2363393.398 ops/s
Iteration  10: 2401043.431 ops/s
Iteration  11: 2419719.388 ops/s
Iteration  12: 2400974.481 ops/s
Iteration  13: 2405213.829 ops/s
Iteration  14: 2403654.701 ops/s
Iteration  15: 2416553.306 ops/s
Iteration  16: 2365924.081 ops/s
Iteration  17: 2421010.148 ops/s
Iteration  18: 2404391.306 ops/s
Iteration  19: 2350908.427 ops/s
Iteration  20: 2408581.115 ops/s
Iteration  21: 2390483.563 ops/s
Iteration  22: 2404417.930 ops/s
Iteration  23: 2373927.781 ops/s
Iteration  24: 2410569.700 ops/s
Iteration  25: 2378523.625 ops/s
Iteration  26: 2414295.672 ops/s
Iteration  27: 2402197.170 ops/s
Iteration  28: 2392453.409 ops/s
Iteration  29: 2405048.510 ops/s
Iteration  30: 2404585.410 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withMethods":
  2396027.114 ±(99.9%) 15404.849 ops/s [Average]
  (min, avg, max) = (2319480.799, 2396027.114, 2421010.148), stdev = 23057.254
  CI (99.9%): [2380622.265, 2411431.963] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_withMethods  thrpt   30  2396027.114 ± 15404.849  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withReadLockAndDelegate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withReadLockAndDelegate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 257350.715 ops/s
# Warmup Iteration   2: 311690.864 ops/s
# Warmup Iteration   3: 392143.924 ops/s
# Warmup Iteration   4: 391221.808 ops/s
# Warmup Iteration   5: 387032.428 ops/s
# Warmup Iteration   6: 390210.017 ops/s
# Warmup Iteration   7: 388336.310 ops/s
# Warmup Iteration   8: 389051.820 ops/s
# Warmup Iteration   9: 356751.090 ops/s
# Warmup Iteration  10: 356416.239 ops/s
# Warmup Iteration  11: 391520.046 ops/s
# Warmup Iteration  12: 390495.352 ops/s
# Warmup Iteration  13: 390228.328 ops/s
# Warmup Iteration  14: 392628.295 ops/s
# Warmup Iteration  15: 391307.957 ops/s
# Warmup Iteration  16: 390361.553 ops/s
# Warmup Iteration  17: 404329.068 ops/s
# Warmup Iteration  18: 403072.292 ops/s
# Warmup Iteration  19: 404745.722 ops/s
# Warmup Iteration  20: 404491.899 ops/s
# Warmup Iteration  21: 402905.344 ops/s
# Warmup Iteration  22: 406535.662 ops/s
# Warmup Iteration  23: 407135.082 ops/s
# Warmup Iteration  24: 404924.438 ops/s
# Warmup Iteration  25: 405042.626 ops/s
# Warmup Iteration  26: 402179.257 ops/s
# Warmup Iteration  27: 405571.406 ops/s
# Warmup Iteration  28: 404922.621 ops/s
# Warmup Iteration  29: 406307.732 ops/s
# Warmup Iteration  30: 404758.918 ops/s
Iteration   1: 406597.359 ops/s
Iteration   2: 397696.708 ops/s
Iteration   3: 406818.749 ops/s
Iteration   4: 408254.099 ops/s
Iteration   5: 406725.926 ops/s
Iteration   6: 404956.973 ops/s
Iteration   7: 405555.747 ops/s
Iteration   8: 404830.570 ops/s
Iteration   9: 408189.132 ops/s
Iteration  10: 407124.760 ops/s
Iteration  11: 400644.305 ops/s
Iteration  12: 406168.382 ops/s
Iteration  13: 406221.157 ops/s
Iteration  14: 407418.124 ops/s
Iteration  15: 407195.302 ops/s
Iteration  16: 407318.513 ops/s
Iteration  17: 405304.062 ops/s
Iteration  18: 407602.752 ops/s
Iteration  19: 405900.095 ops/s
Iteration  20: 407280.331 ops/s
Iteration  21: 409662.932 ops/s
Iteration  22: 403668.475 ops/s
Iteration  23: 405095.910 ops/s
Iteration  24: 399016.973 ops/s
Iteration  25: 403346.747 ops/s
Iteration  26: 399409.119 ops/s
Iteration  27: 407865.678 ops/s
Iteration  28: 408189.083 ops/s
Iteration  29: 404751.958 ops/s
Iteration  30: 408092.424 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withReadLockAndDelegate":
  405563.412 ±(99.9%) 1962.958 ops/s [Average]
  (min, avg, max) = (397696.708, 405563.412, 409662.932), stdev = 2938.064
  CI (99.9%): [403600.453, 407526.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_withReadLockAndDelegate  thrpt   30  405563.412 ± 1962.958  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withWritelockAndDelegate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withWritelockAndDelegate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 45137.545 ops/s
# Warmup Iteration   2: 49482.061 ops/s
# Warmup Iteration   3: 49838.699 ops/s
# Warmup Iteration   4: 49621.547 ops/s
# Warmup Iteration   5: 49834.857 ops/s
# Warmup Iteration   6: 49816.188 ops/s
# Warmup Iteration   7: 49608.681 ops/s
# Warmup Iteration   8: 49458.095 ops/s
# Warmup Iteration   9: 49769.436 ops/s
# Warmup Iteration  10: 52809.699 ops/s
# Warmup Iteration  11: 52780.746 ops/s
# Warmup Iteration  12: 52656.852 ops/s
# Warmup Iteration  13: 52046.535 ops/s
# Warmup Iteration  14: 52182.345 ops/s
# Warmup Iteration  15: 52460.712 ops/s
# Warmup Iteration  16: 52633.437 ops/s
# Warmup Iteration  17: 53121.863 ops/s
# Warmup Iteration  18: 52883.671 ops/s
# Warmup Iteration  19: 53001.612 ops/s
# Warmup Iteration  20: 53283.714 ops/s
# Warmup Iteration  21: 53141.999 ops/s
# Warmup Iteration  22: 52382.597 ops/s
# Warmup Iteration  23: 53380.643 ops/s
# Warmup Iteration  24: 53000.675 ops/s
# Warmup Iteration  25: 53405.561 ops/s
# Warmup Iteration  26: 52921.493 ops/s
# Warmup Iteration  27: 53217.754 ops/s
# Warmup Iteration  28: 53277.763 ops/s
# Warmup Iteration  29: 53331.580 ops/s
# Warmup Iteration  30: 52401.201 ops/s
Iteration   1: 52547.484 ops/s
Iteration   2: 52977.286 ops/s
Iteration   3: 52736.326 ops/s
Iteration   4: 52891.974 ops/s
Iteration   5: 53081.321 ops/s
Iteration   6: 52050.599 ops/s
Iteration   7: 52493.772 ops/s
Iteration   8: 52927.270 ops/s
Iteration   9: 52841.821 ops/s
Iteration  10: 53163.840 ops/s
Iteration  11: 53411.708 ops/s
Iteration  12: 53404.876 ops/s
Iteration  13: 52225.351 ops/s
Iteration  14: 53139.951 ops/s
Iteration  15: 53347.641 ops/s
Iteration  16: 52193.980 ops/s
Iteration  17: 53373.783 ops/s
Iteration  18: 53035.340 ops/s
Iteration  19: 53058.364 ops/s
Iteration  20: 53344.457 ops/s
Iteration  21: 51390.068 ops/s
Iteration  22: 53356.789 ops/s
Iteration  23: 53215.997 ops/s
Iteration  24: 53286.678 ops/s
Iteration  25: 53395.212 ops/s
Iteration  26: 53377.726 ops/s
Iteration  27: 52663.576 ops/s
Iteration  28: 53021.645 ops/s
Iteration  29: 53417.348 ops/s
Iteration  30: 53258.331 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withWritelockAndDelegate":
  52954.350 ±(99.9%) 326.682 ops/s [Average]
  (min, avg, max) = (51390.068, 52954.350, 53417.348), stdev = 488.963
  CI (99.9%): [52627.668, 53281.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt      Score     Error  Units
MultiReaderFastListTest._Benchmark.benchmark_withWritelockAndDelegate  thrpt   30  52954.350 ± 326.682  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2033314.743 ops/s
# Warmup Iteration   2: 4054230.345 ops/s
# Warmup Iteration   3: 4209376.150 ops/s
# Warmup Iteration   4: 4224100.049 ops/s
# Warmup Iteration   5: 3532166.586 ops/s
# Warmup Iteration   6: 4199239.804 ops/s
# Warmup Iteration   7: 4189089.281 ops/s
# Warmup Iteration   8: 4179172.760 ops/s
# Warmup Iteration   9: 4143802.899 ops/s
# Warmup Iteration  10: 4146631.531 ops/s
# Warmup Iteration  11: 4228066.051 ops/s
# Warmup Iteration  12: 4203823.833 ops/s
# Warmup Iteration  13: 4190070.254 ops/s
# Warmup Iteration  14: 4200739.822 ops/s
# Warmup Iteration  15: 4200468.584 ops/s
# Warmup Iteration  16: 4185665.052 ops/s
# Warmup Iteration  17: 4172388.250 ops/s
# Warmup Iteration  18: 4216564.263 ops/s
# Warmup Iteration  19: 4196435.501 ops/s
# Warmup Iteration  20: 4214638.646 ops/s
# Warmup Iteration  21: 4191965.716 ops/s
# Warmup Iteration  22: 4176980.405 ops/s
# Warmup Iteration  23: 4219918.833 ops/s
# Warmup Iteration  24: 4227604.134 ops/s
# Warmup Iteration  25: 4218428.843 ops/s
# Warmup Iteration  26: 4216154.414 ops/s
# Warmup Iteration  27: 4222862.247 ops/s
# Warmup Iteration  28: 4204190.357 ops/s
# Warmup Iteration  29: 4207949.041 ops/s
# Warmup Iteration  30: 4192996.053 ops/s
Iteration   1: 4220137.549 ops/s
Iteration   2: 4217274.890 ops/s
Iteration   3: 4148535.245 ops/s
Iteration   4: 4158621.883 ops/s
Iteration   5: 4231230.984 ops/s
Iteration   6: 4168158.362 ops/s
Iteration   7: 4182060.048 ops/s
Iteration   8: 4211251.066 ops/s
Iteration   9: 4217965.342 ops/s
Iteration  10: 4200287.740 ops/s
Iteration  11: 4201589.464 ops/s
Iteration  12: 4227049.676 ops/s
Iteration  13: 4232577.175 ops/s
Iteration  14: 4231503.148 ops/s
Iteration  15: 4186539.048 ops/s
Iteration  16: 4232067.668 ops/s
Iteration  17: 4229537.862 ops/s
Iteration  18: 4194774.637 ops/s
Iteration  19: 4147346.451 ops/s
Iteration  20: 4216853.537 ops/s
Iteration  21: 4135633.003 ops/s
Iteration  22: 4234539.146 ops/s
Iteration  23: 4195970.209 ops/s
Iteration  24: 4215870.442 ops/s
Iteration  25: 4203887.554 ops/s
Iteration  26: 4217737.270 ops/s
Iteration  27: 4240793.635 ops/s
Iteration  28: 4154590.080 ops/s
Iteration  29: 4218103.417 ops/s
Iteration  30: 4227819.954 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_without":
  4203343.549 ±(99.9%) 20083.784 ops/s [Average]
  (min, avg, max) = (4135633.003, 4203343.549, 4240793.635), stdev = 30060.465
  CI (99.9%): [4183259.765, 4223427.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListTest._Benchmark.benchmark_without  thrpt   30  4203343.549 ± 20083.784  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1253118.576 ops/s
# Warmup Iteration   2: 2257220.545 ops/s
# Warmup Iteration   3: 2485221.243 ops/s
# Warmup Iteration   4: 2469646.957 ops/s
# Warmup Iteration   5: 2353860.097 ops/s
# Warmup Iteration   6: 2202077.888 ops/s
# Warmup Iteration   7: 2503790.325 ops/s
# Warmup Iteration   8: 2506155.244 ops/s
# Warmup Iteration   9: 2512908.583 ops/s
# Warmup Iteration  10: 2490928.106 ops/s
# Warmup Iteration  11: 2501787.608 ops/s
# Warmup Iteration  12: 2509727.219 ops/s
# Warmup Iteration  13: 2512664.295 ops/s
# Warmup Iteration  14: 2447110.814 ops/s
# Warmup Iteration  15: 2498381.120 ops/s
# Warmup Iteration  16: 2492356.123 ops/s
# Warmup Iteration  17: 2478170.192 ops/s
# Warmup Iteration  18: 2506800.023 ops/s
# Warmup Iteration  19: 2510837.864 ops/s
# Warmup Iteration  20: 2493535.013 ops/s
# Warmup Iteration  21: 2498613.011 ops/s
# Warmup Iteration  22: 2498088.632 ops/s
# Warmup Iteration  23: 2477678.282 ops/s
# Warmup Iteration  24: 2498246.316 ops/s
# Warmup Iteration  25: 2490167.385 ops/s
# Warmup Iteration  26: 2504888.395 ops/s
# Warmup Iteration  27: 2501691.874 ops/s
# Warmup Iteration  28: 2485363.120 ops/s
# Warmup Iteration  29: 2503144.825 ops/s
# Warmup Iteration  30: 2502470.508 ops/s
Iteration   1: 2503391.825 ops/s
Iteration   2: 2494637.908 ops/s
Iteration   3: 2510612.832 ops/s
Iteration   4: 2507159.142 ops/s
Iteration   5: 2503730.208 ops/s
Iteration   6: 2461367.343 ops/s
Iteration   7: 2493933.453 ops/s
Iteration   8: 2503949.198 ops/s
Iteration   9: 2483015.674 ops/s
Iteration  10: 2484961.957 ops/s
Iteration  11: 2498659.115 ops/s
Iteration  12: 2502037.944 ops/s
Iteration  13: 2471634.992 ops/s
Iteration  14: 2501125.537 ops/s
Iteration  15: 2498989.161 ops/s
Iteration  16: 2472527.794 ops/s
Iteration  17: 2511390.528 ops/s
Iteration  18: 2501864.410 ops/s
Iteration  19: 2513764.059 ops/s
Iteration  20: 2496639.185 ops/s
Iteration  21: 2504393.337 ops/s
Iteration  22: 2494140.955 ops/s
Iteration  23: 2497744.346 ops/s
Iteration  24: 2503875.802 ops/s
Iteration  25: 2506663.327 ops/s
Iteration  26: 2512956.478 ops/s
Iteration  27: 2495844.849 ops/s
Iteration  28: 2492784.040 ops/s
Iteration  29: 2504178.325 ops/s
Iteration  30: 2502240.761 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_withoutAll":
  2497673.816 ±(99.9%) 8224.462 ops/s [Average]
  (min, avg, max) = (2461367.343, 2497673.816, 2513764.059), stdev = 12309.989
  CI (99.9%): [2489449.354, 2505898.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_withoutAll  thrpt   30  2497673.816 ± 8224.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 176005.027 ops/s
# Warmup Iteration   2: 197702.033 ops/s
# Warmup Iteration   3: 254878.289 ops/s
# Warmup Iteration   4: 263362.596 ops/s
# Warmup Iteration   5: 262254.955 ops/s
# Warmup Iteration   6: 262378.484 ops/s
# Warmup Iteration   7: 264045.590 ops/s
# Warmup Iteration   8: 259791.127 ops/s
# Warmup Iteration   9: 261926.749 ops/s
# Warmup Iteration  10: 264967.031 ops/s
# Warmup Iteration  11: 264727.666 ops/s
# Warmup Iteration  12: 218590.220 ops/s
# Warmup Iteration  13: 264581.705 ops/s
# Warmup Iteration  14: 263773.997 ops/s
# Warmup Iteration  15: 264244.627 ops/s
# Warmup Iteration  16: 263450.837 ops/s
# Warmup Iteration  17: 262593.794 ops/s
# Warmup Iteration  18: 264564.218 ops/s
# Warmup Iteration  19: 264488.151 ops/s
# Warmup Iteration  20: 262803.415 ops/s
# Warmup Iteration  21: 264235.736 ops/s
# Warmup Iteration  22: 263072.198 ops/s
# Warmup Iteration  23: 262922.688 ops/s
# Warmup Iteration  24: 262461.453 ops/s
# Warmup Iteration  25: 264635.661 ops/s
# Warmup Iteration  26: 264762.038 ops/s
# Warmup Iteration  27: 264814.289 ops/s
# Warmup Iteration  28: 264837.884 ops/s
# Warmup Iteration  29: 264286.910 ops/s
# Warmup Iteration  30: 264916.782 ops/s
Iteration   1: 263477.667 ops/s
Iteration   2: 264124.780 ops/s
Iteration   3: 264365.356 ops/s
Iteration   4: 262720.884 ops/s
Iteration   5: 263631.861 ops/s
Iteration   6: 262367.082 ops/s
Iteration   7: 264745.070 ops/s
Iteration   8: 266250.300 ops/s
Iteration   9: 264339.938 ops/s
Iteration  10: 260942.055 ops/s
Iteration  11: 265636.263 ops/s
Iteration  12: 259756.342 ops/s
Iteration  13: 259403.808 ops/s
Iteration  14: 263783.850 ops/s
Iteration  15: 264482.628 ops/s
Iteration  16: 264115.877 ops/s
Iteration  17: 263678.387 ops/s
Iteration  18: 263289.867 ops/s
Iteration  19: 263691.510 ops/s
Iteration  20: 265753.389 ops/s
Iteration  21: 263297.539 ops/s
Iteration  22: 260334.865 ops/s
Iteration  23: 263940.846 ops/s
Iteration  24: 262851.243 ops/s
Iteration  25: 263876.671 ops/s
Iteration  26: 264424.084 ops/s
Iteration  27: 264760.849 ops/s
Iteration  28: 265095.553 ops/s
Iteration  29: 265093.894 ops/s
Iteration  30: 260706.539 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_zip":
  263497.967 ±(99.9%) 1160.746 ops/s [Average]
  (min, avg, max) = (259403.808, 263497.967, 266250.300), stdev = 1737.350
  CI (99.9%): [262337.220, 264658.713] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_zip  thrpt   30  263497.967 ± 1160.746  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 411349.496 ops/s
# Warmup Iteration   2: 674314.545 ops/s
# Warmup Iteration   3: 786715.828 ops/s
# Warmup Iteration   4: 794819.956 ops/s
# Warmup Iteration   5: 784854.282 ops/s
# Warmup Iteration   6: 738762.480 ops/s
# Warmup Iteration   7: 715786.724 ops/s
# Warmup Iteration   8: 789770.193 ops/s
# Warmup Iteration   9: 793693.246 ops/s
# Warmup Iteration  10: 788433.056 ops/s
# Warmup Iteration  11: 792006.291 ops/s
# Warmup Iteration  12: 793549.744 ops/s
# Warmup Iteration  13: 791121.333 ops/s
# Warmup Iteration  14: 795185.368 ops/s
# Warmup Iteration  15: 785037.922 ops/s
# Warmup Iteration  16: 780254.124 ops/s
# Warmup Iteration  17: 792186.253 ops/s
# Warmup Iteration  18: 788533.274 ops/s
# Warmup Iteration  19: 788712.438 ops/s
# Warmup Iteration  20: 791983.259 ops/s
# Warmup Iteration  21: 788176.485 ops/s
# Warmup Iteration  22: 783799.661 ops/s
# Warmup Iteration  23: 781893.976 ops/s
# Warmup Iteration  24: 794022.992 ops/s
# Warmup Iteration  25: 791543.610 ops/s
# Warmup Iteration  26: 790940.709 ops/s
# Warmup Iteration  27: 786963.922 ops/s
# Warmup Iteration  28: 792044.408 ops/s
# Warmup Iteration  29: 791338.316 ops/s
# Warmup Iteration  30: 794768.313 ops/s
Iteration   1: 789158.849 ops/s
Iteration   2: 796848.480 ops/s
Iteration   3: 791730.882 ops/s
Iteration   4: 792016.529 ops/s
Iteration   5: 790410.372 ops/s
Iteration   6: 794814.696 ops/s
Iteration   7: 788618.300 ops/s
Iteration   8: 792192.045 ops/s
Iteration   9: 792485.943 ops/s
Iteration  10: 792557.854 ops/s
Iteration  11: 786450.205 ops/s
Iteration  12: 802163.323 ops/s
Iteration  13: 792382.944 ops/s
Iteration  14: 794823.486 ops/s
Iteration  15: 792249.192 ops/s
Iteration  16: 795877.397 ops/s
Iteration  17: 794283.897 ops/s
Iteration  18: 795277.530 ops/s
Iteration  19: 788913.008 ops/s
Iteration  20: 792850.414 ops/s
Iteration  21: 790123.591 ops/s
Iteration  22: 799150.787 ops/s
Iteration  23: 794619.463 ops/s
Iteration  24: 799820.604 ops/s
Iteration  25: 778160.263 ops/s
Iteration  26: 790348.714 ops/s
Iteration  27: 793998.496 ops/s
Iteration  28: 793914.410 ops/s
Iteration  29: 788029.090 ops/s
Iteration  30: 794095.921 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListTest._Benchmark.benchmark_zipWithIndex":
  792612.223 ±(99.9%) 2965.035 ops/s [Average]
  (min, avg, max) = (778160.263, 792612.223, 802163.323), stdev = 4437.925
  CI (99.9%): [789647.188, 795577.258] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
MultiReaderFastListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  792612.223 ± 2965.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4856347.151 ops/s
# Warmup Iteration   2: 8298642.326 ops/s
# Warmup Iteration   3: 9701278.995 ops/s
# Warmup Iteration   4: 9781094.409 ops/s
# Warmup Iteration   5: 9800149.717 ops/s
# Warmup Iteration   6: 9832985.461 ops/s
# Warmup Iteration   7: 9803156.854 ops/s
# Warmup Iteration   8: 9752516.447 ops/s
# Warmup Iteration   9: 9828768.327 ops/s
# Warmup Iteration  10: 9818014.955 ops/s
# Warmup Iteration  11: 9838748.751 ops/s
# Warmup Iteration  12: 9844304.644 ops/s
# Warmup Iteration  13: 9785283.253 ops/s
# Warmup Iteration  14: 9780765.270 ops/s
# Warmup Iteration  15: 9672987.190 ops/s
# Warmup Iteration  16: 9785683.405 ops/s
# Warmup Iteration  17: 9825193.667 ops/s
# Warmup Iteration  18: 9798949.042 ops/s
# Warmup Iteration  19: 9856239.122 ops/s
# Warmup Iteration  20: 9761854.622 ops/s
# Warmup Iteration  21: 9864296.139 ops/s
# Warmup Iteration  22: 9871283.675 ops/s
# Warmup Iteration  23: 9900031.101 ops/s
# Warmup Iteration  24: 9758550.217 ops/s
# Warmup Iteration  25: 9881351.441 ops/s
# Warmup Iteration  26: 9870191.665 ops/s
# Warmup Iteration  27: 9869319.865 ops/s
# Warmup Iteration  28: 9871358.447 ops/s
# Warmup Iteration  29: 9791210.440 ops/s
# Warmup Iteration  30: 9810331.163 ops/s
Iteration   1: 9824912.826 ops/s
Iteration   2: 9800142.597 ops/s
Iteration   3: 9827317.116 ops/s
Iteration   4: 9874869.048 ops/s
Iteration   5: 9823385.245 ops/s
Iteration   6: 9815306.306 ops/s
Iteration   7: 9748051.787 ops/s
Iteration   8: 9791565.544 ops/s
Iteration   9: 9874154.865 ops/s
Iteration  10: 9671502.164 ops/s
Iteration  11: 9732010.485 ops/s
Iteration  12: 9790292.463 ops/s
Iteration  13: 9802445.338 ops/s
Iteration  14: 9834930.535 ops/s
Iteration  15: 9816313.664 ops/s
Iteration  16: 9893796.328 ops/s
Iteration  17: 9668346.689 ops/s
Iteration  18: 9659949.114 ops/s
Iteration  19: 9870270.103 ops/s
Iteration  20: 9866002.832 ops/s
Iteration  21: 9843108.983 ops/s
Iteration  22: 9831646.817 ops/s
Iteration  23: 9868736.416 ops/s
Iteration  24: 9748371.401 ops/s
Iteration  25: 9875502.947 ops/s
Iteration  26: 9732986.910 ops/s
Iteration  27: 9847958.585 ops/s
Iteration  28: 9884189.478 ops/s
Iteration  29: 9933707.672 ops/s
Iteration  30: 9859555.352 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_add":
  9813710.987 ±(99.9%) 46320.803 ops/s [Average]
  (min, avg, max) = (9659949.114, 9813710.987, 9933707.672), stdev = 69330.802
  CI (99.9%): [9767390.184, 9860031.790] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_add  thrpt   30  9813710.987 ± 46320.803  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2416316.809 ops/s
# Warmup Iteration   2: 5292525.487 ops/s
# Warmup Iteration   3: 4471553.575 ops/s
# Warmup Iteration   4: 5409657.740 ops/s
# Warmup Iteration   5: 5385860.825 ops/s
# Warmup Iteration   6: 5372624.527 ops/s
# Warmup Iteration   7: 5376254.766 ops/s
# Warmup Iteration   8: 5378161.519 ops/s
# Warmup Iteration   9: 5388141.817 ops/s
# Warmup Iteration  10: 5376212.597 ops/s
# Warmup Iteration  11: 5297075.543 ops/s
# Warmup Iteration  12: 5378549.290 ops/s
# Warmup Iteration  13: 5373583.833 ops/s
# Warmup Iteration  14: 5388713.949 ops/s
# Warmup Iteration  15: 5401609.235 ops/s
# Warmup Iteration  16: 5312583.126 ops/s
# Warmup Iteration  17: 5342990.138 ops/s
# Warmup Iteration  18: 5333358.093 ops/s
# Warmup Iteration  19: 5399401.853 ops/s
# Warmup Iteration  20: 5342737.137 ops/s
# Warmup Iteration  21: 5341156.165 ops/s
# Warmup Iteration  22: 5382245.825 ops/s
# Warmup Iteration  23: 5351923.693 ops/s
# Warmup Iteration  24: 5322331.445 ops/s
# Warmup Iteration  25: 5319999.082 ops/s
# Warmup Iteration  26: 5368543.648 ops/s
# Warmup Iteration  27: 5384676.348 ops/s
# Warmup Iteration  28: 5383075.446 ops/s
# Warmup Iteration  29: 5363137.350 ops/s
# Warmup Iteration  30: 5281876.023 ops/s
Iteration   1: 5361548.633 ops/s
Iteration   2: 5392996.389 ops/s
Iteration   3: 5407264.186 ops/s
Iteration   4: 5398773.943 ops/s
Iteration   5: 5384114.194 ops/s
Iteration   6: 5310802.771 ops/s
Iteration   7: 5367630.416 ops/s
Iteration   8: 5309858.205 ops/s
Iteration   9: 5310200.900 ops/s
Iteration  10: 5286774.698 ops/s
Iteration  11: 5346057.162 ops/s
Iteration  12: 5399673.846 ops/s
Iteration  13: 5338820.471 ops/s
Iteration  14: 5377433.327 ops/s
Iteration  15: 5405293.702 ops/s
Iteration  16: 5401405.098 ops/s
Iteration  17: 5310385.991 ops/s
Iteration  18: 5387346.403 ops/s
Iteration  19: 5408592.734 ops/s
Iteration  20: 5361891.409 ops/s
Iteration  21: 5369693.606 ops/s
Iteration  22: 5394351.579 ops/s
Iteration  23: 5292848.392 ops/s
Iteration  24: 5362141.008 ops/s
Iteration  25: 5315899.358 ops/s
Iteration  26: 5378136.040 ops/s
Iteration  27: 5399523.671 ops/s
Iteration  28: 5291394.482 ops/s
Iteration  29: 5342402.068 ops/s
Iteration  30: 5371225.158 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAllArray":
  5359482.661 ±(99.9%) 26278.422 ops/s [Average]
  (min, avg, max) = (5286774.698, 5359482.661, 5408592.734), stdev = 39332.307
  CI (99.9%): [5333204.240, 5385761.083] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_addAllArray  thrpt   30  5359482.661 ± 26278.422  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1152988.307 ops/s
# Warmup Iteration   2: 2727809.869 ops/s
# Warmup Iteration   3: 2289996.832 ops/s
# Warmup Iteration   4: 2766625.869 ops/s
# Warmup Iteration   5: 2757114.535 ops/s
# Warmup Iteration   6: 2731864.875 ops/s
# Warmup Iteration   7: 2720676.722 ops/s
# Warmup Iteration   8: 2770456.692 ops/s
# Warmup Iteration   9: 2763170.100 ops/s
# Warmup Iteration  10: 2725795.904 ops/s
# Warmup Iteration  11: 2770498.361 ops/s
# Warmup Iteration  12: 2755806.815 ops/s
# Warmup Iteration  13: 2773091.531 ops/s
# Warmup Iteration  14: 2743791.672 ops/s
# Warmup Iteration  15: 2765621.140 ops/s
# Warmup Iteration  16: 2775981.279 ops/s
# Warmup Iteration  17: 2762593.441 ops/s
# Warmup Iteration  18: 2771444.477 ops/s
# Warmup Iteration  19: 2773196.019 ops/s
# Warmup Iteration  20: 2757884.754 ops/s
# Warmup Iteration  21: 2751131.685 ops/s
# Warmup Iteration  22: 2756595.490 ops/s
# Warmup Iteration  23: 2752441.744 ops/s
# Warmup Iteration  24: 2748515.395 ops/s
# Warmup Iteration  25: 2761636.148 ops/s
# Warmup Iteration  26: 2768095.022 ops/s
# Warmup Iteration  27: 2768012.155 ops/s
# Warmup Iteration  28: 2759546.182 ops/s
# Warmup Iteration  29: 2756727.907 ops/s
# Warmup Iteration  30: 2766026.744 ops/s
Iteration   1: 2769631.342 ops/s
Iteration   2: 2772357.101 ops/s
Iteration   3: 2751634.129 ops/s
Iteration   4: 2763657.438 ops/s
Iteration   5: 2768826.856 ops/s
Iteration   6: 2779886.994 ops/s
Iteration   7: 2775104.071 ops/s
Iteration   8: 2771528.038 ops/s
Iteration   9: 2768884.162 ops/s
Iteration  10: 2760238.150 ops/s
Iteration  11: 2747559.105 ops/s
Iteration  12: 2760778.914 ops/s
Iteration  13: 2768089.856 ops/s
Iteration  14: 2770895.168 ops/s
Iteration  15: 2767925.555 ops/s
Iteration  16: 2758929.524 ops/s
Iteration  17: 2708656.094 ops/s
Iteration  18: 2763770.937 ops/s
Iteration  19: 2766526.363 ops/s
Iteration  20: 2764449.859 ops/s
Iteration  21: 2768700.101 ops/s
Iteration  22: 2760831.918 ops/s
Iteration  23: 2768540.161 ops/s
Iteration  24: 2751425.658 ops/s
Iteration  25: 2765838.304 ops/s
Iteration  26: 2766406.315 ops/s
Iteration  27: 2748049.398 ops/s
Iteration  28: 2775721.442 ops/s
Iteration  29: 2771486.787 ops/s
Iteration  30: 2770902.046 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAllIterable":
  2763574.393 ±(99.9%) 8696.985 ops/s [Average]
  (min, avg, max) = (2708656.094, 2763574.393, 2779886.994), stdev = 13017.239
  CI (99.9%): [2754877.408, 2772271.378] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_addAllIterable  thrpt   30  2763574.393 ± 8696.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710207.198 ops/s
# Warmup Iteration   2: 723398.994 ops/s
# Warmup Iteration   3: 982642.724 ops/s
# Warmup Iteration   4: 974465.529 ops/s
# Warmup Iteration   5: 973368.016 ops/s
# Warmup Iteration   6: 970089.929 ops/s
# Warmup Iteration   7: 971185.906 ops/s
# Warmup Iteration   8: 967563.223 ops/s
# Warmup Iteration   9: 966627.929 ops/s
# Warmup Iteration  10: 969873.109 ops/s
# Warmup Iteration  11: 805402.628 ops/s
# Warmup Iteration  12: 964064.598 ops/s
# Warmup Iteration  13: 967637.192 ops/s
# Warmup Iteration  14: 958990.035 ops/s
# Warmup Iteration  15: 976136.269 ops/s
# Warmup Iteration  16: 969758.755 ops/s
# Warmup Iteration  17: 1019900.140 ops/s
# Warmup Iteration  18: 1020501.778 ops/s
# Warmup Iteration  19: 1023434.155 ops/s
# Warmup Iteration  20: 1024700.973 ops/s
# Warmup Iteration  21: 1019278.042 ops/s
# Warmup Iteration  22: 1019597.606 ops/s
# Warmup Iteration  23: 1022898.870 ops/s
# Warmup Iteration  24: 1023234.881 ops/s
# Warmup Iteration  25: 1014742.303 ops/s
# Warmup Iteration  26: 1022183.496 ops/s
# Warmup Iteration  27: 1019000.754 ops/s
# Warmup Iteration  28: 1003993.350 ops/s
# Warmup Iteration  29: 1017361.488 ops/s
# Warmup Iteration  30: 1018578.155 ops/s
Iteration   1: 1015693.898 ops/s
Iteration   2: 1024665.142 ops/s
Iteration   3: 1006652.930 ops/s
Iteration   4: 1021986.600 ops/s
Iteration   5: 1020345.771 ops/s
Iteration   6: 1020998.753 ops/s
Iteration   7: 1007136.268 ops/s
Iteration   8: 1019007.211 ops/s
Iteration   9: 1016313.443 ops/s
Iteration  10: 1012692.008 ops/s
Iteration  11: 1022960.777 ops/s
Iteration  12: 1023703.588 ops/s
Iteration  13: 1023290.721 ops/s
Iteration  14: 1008529.618 ops/s
Iteration  15: 1010724.094 ops/s
Iteration  16: 1020232.394 ops/s
Iteration  17: 1017605.893 ops/s
Iteration  18: 1023445.746 ops/s
Iteration  19: 1022703.632 ops/s
Iteration  20: 1016535.556 ops/s
Iteration  21: 1016150.467 ops/s
Iteration  22: 1009238.255 ops/s
Iteration  23: 1025513.480 ops/s
Iteration  24: 1011350.483 ops/s
Iteration  25: 1024942.297 ops/s
Iteration  26: 1017217.131 ops/s
Iteration  27: 1025300.234 ops/s
Iteration  28: 1017089.286 ops/s
Iteration  29: 1013037.434 ops/s
Iteration  30: 1009010.427 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size":
  1017469.118 ±(99.9%) 3975.008 ops/s [Average]
  (min, avg, max) = (1006652.930, 1017469.118, 1025513.480), stdev = 5949.606
  CI (99.9%): [1013494.110, 1021444.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size  thrpt   30  1017469.118 ± 3975.008  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size_empty_list$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size_empty_list

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 726673.781 ops/s
# Warmup Iteration   2: 742216.481 ops/s
# Warmup Iteration   3: 975788.950 ops/s
# Warmup Iteration   4: 969935.325 ops/s
# Warmup Iteration   5: 974737.325 ops/s
# Warmup Iteration   6: 981497.650 ops/s
# Warmup Iteration   7: 974863.797 ops/s
# Warmup Iteration   8: 972467.228 ops/s
# Warmup Iteration   9: 972178.563 ops/s
# Warmup Iteration  10: 978232.839 ops/s
# Warmup Iteration  11: 910432.905 ops/s
# Warmup Iteration  12: 884970.445 ops/s
# Warmup Iteration  13: 979012.644 ops/s
# Warmup Iteration  14: 970391.634 ops/s
# Warmup Iteration  15: 971667.799 ops/s
# Warmup Iteration  16: 980164.369 ops/s
# Warmup Iteration  17: 1028280.473 ops/s
# Warmup Iteration  18: 1020867.335 ops/s
# Warmup Iteration  19: 1007065.327 ops/s
# Warmup Iteration  20: 1029834.999 ops/s
# Warmup Iteration  21: 1030331.603 ops/s
# Warmup Iteration  22: 1030179.684 ops/s
# Warmup Iteration  23: 1029255.665 ops/s
# Warmup Iteration  24: 1030228.427 ops/s
# Warmup Iteration  25: 1024879.756 ops/s
# Warmup Iteration  26: 1028394.025 ops/s
# Warmup Iteration  27: 1025982.498 ops/s
# Warmup Iteration  28: 1026888.848 ops/s
# Warmup Iteration  29: 1028295.758 ops/s
# Warmup Iteration  30: 1027339.089 ops/s
Iteration   1: 1028690.505 ops/s
Iteration   2: 1027644.100 ops/s
Iteration   3: 1031143.482 ops/s
Iteration   4: 1007121.312 ops/s
Iteration   5: 1008382.586 ops/s
Iteration   6: 996811.609 ops/s
Iteration   7: 1021029.260 ops/s
Iteration   8: 1030849.816 ops/s
Iteration   9: 1029969.820 ops/s
Iteration  10: 1023946.341 ops/s
Iteration  11: 1027620.637 ops/s
Iteration  12: 1025737.018 ops/s
Iteration  13: 1031422.429 ops/s
Iteration  14: 1030978.328 ops/s
Iteration  15: 1034641.954 ops/s
Iteration  16: 1011534.791 ops/s
Iteration  17: 1022568.751 ops/s
Iteration  18: 1023873.576 ops/s
Iteration  19: 1030594.835 ops/s
Iteration  20: 1010784.782 ops/s
Iteration  21: 995626.938 ops/s
Iteration  22: 1017154.826 ops/s
Iteration  23: 1029058.146 ops/s
Iteration  24: 1028613.650 ops/s
Iteration  25: 1033947.042 ops/s
Iteration  26: 1028491.533 ops/s
Iteration  27: 1031260.024 ops/s
Iteration  28: 1024874.034 ops/s
Iteration  29: 1016214.139 ops/s
Iteration  30: 1030085.815 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size_empty_list":
  1023022.403 ±(99.9%) 7012.473 ops/s [Average]
  (min, avg, max) = (995626.938, 1023022.403, 1034641.954), stdev = 10495.941
  CI (99.9%): [1016009.929, 1030034.876] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size_empty_list  thrpt   30  1023022.403 ± 7012.473  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAll_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAll_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 705733.226 ops/s
# Warmup Iteration   2: 727222.962 ops/s
# Warmup Iteration   3: 963911.701 ops/s
# Warmup Iteration   4: 970100.944 ops/s
# Warmup Iteration   5: 968098.392 ops/s
# Warmup Iteration   6: 976280.249 ops/s
# Warmup Iteration   7: 958908.485 ops/s
# Warmup Iteration   8: 975656.776 ops/s
# Warmup Iteration   9: 975253.779 ops/s
# Warmup Iteration  10: 975614.650 ops/s
# Warmup Iteration  11: 817521.164 ops/s
# Warmup Iteration  12: 977037.643 ops/s
# Warmup Iteration  13: 973581.558 ops/s
# Warmup Iteration  14: 967323.579 ops/s
# Warmup Iteration  15: 975413.320 ops/s
# Warmup Iteration  16: 970496.014 ops/s
# Warmup Iteration  17: 1029342.747 ops/s
# Warmup Iteration  18: 1012404.429 ops/s
# Warmup Iteration  19: 1027037.761 ops/s
# Warmup Iteration  20: 1019589.355 ops/s
# Warmup Iteration  21: 1022797.213 ops/s
# Warmup Iteration  22: 1024183.855 ops/s
# Warmup Iteration  23: 1027041.283 ops/s
# Warmup Iteration  24: 1021749.604 ops/s
# Warmup Iteration  25: 1023944.831 ops/s
# Warmup Iteration  26: 1021008.503 ops/s
# Warmup Iteration  27: 1029308.541 ops/s
# Warmup Iteration  28: 1022499.684 ops/s
# Warmup Iteration  29: 1030818.303 ops/s
# Warmup Iteration  30: 1032217.078 ops/s
Iteration   1: 1030147.925 ops/s
Iteration   2: 1029448.039 ops/s
Iteration   3: 1004830.290 ops/s
Iteration   4: 1028288.939 ops/s
Iteration   5: 1013791.388 ops/s
Iteration   6: 1028358.007 ops/s
Iteration   7: 1026039.154 ops/s
Iteration   8: 1030850.967 ops/s
Iteration   9: 1028703.923 ops/s
Iteration  10: 1031119.890 ops/s
Iteration  11: 1024362.858 ops/s
Iteration  12: 1030885.222 ops/s
Iteration  13: 1024257.213 ops/s
Iteration  14: 1029579.966 ops/s
Iteration  15: 1031382.256 ops/s
Iteration  16: 1026215.043 ops/s
Iteration  17: 1027473.238 ops/s
Iteration  18: 1032963.009 ops/s
Iteration  19: 1030425.103 ops/s
Iteration  20: 1026146.559 ops/s
Iteration  21: 1024571.095 ops/s
Iteration  22: 1027511.750 ops/s
Iteration  23: 1021063.809 ops/s
Iteration  24: 1026096.799 ops/s
Iteration  25: 1028806.959 ops/s
Iteration  26: 1031994.572 ops/s
Iteration  27: 1028240.729 ops/s
Iteration  28: 1024815.904 ops/s
Iteration  29: 1025397.642 ops/s
Iteration  30: 1031523.031 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAll_throws_index_negative":
  1026843.043 ±(99.9%) 3771.904 ops/s [Average]
  (min, avg, max) = (1004830.290, 1026843.043, 1032963.009), stdev = 5645.608
  CI (99.9%): [1023071.139, 1030614.946] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_addAll_throws_index_negative  thrpt   30  1026843.043 ± 3771.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4214156.783 ops/s
# Warmup Iteration   2: 8488540.299 ops/s
# Warmup Iteration   3: 7050083.711 ops/s
# Warmup Iteration   4: 8368383.145 ops/s
# Warmup Iteration   5: 8488609.728 ops/s
# Warmup Iteration   6: 8505211.345 ops/s
# Warmup Iteration   7: 8493455.198 ops/s
# Warmup Iteration   8: 8426345.774 ops/s
# Warmup Iteration   9: 8368232.018 ops/s
# Warmup Iteration  10: 8450221.445 ops/s
# Warmup Iteration  11: 8419378.902 ops/s
# Warmup Iteration  12: 8418682.393 ops/s
# Warmup Iteration  13: 8394829.249 ops/s
# Warmup Iteration  14: 8452207.855 ops/s
# Warmup Iteration  15: 8472184.612 ops/s
# Warmup Iteration  16: 8460812.343 ops/s
# Warmup Iteration  17: 8385314.525 ops/s
# Warmup Iteration  18: 8483885.844 ops/s
# Warmup Iteration  19: 8443841.113 ops/s
# Warmup Iteration  20: 8459839.320 ops/s
# Warmup Iteration  21: 8470652.300 ops/s
# Warmup Iteration  22: 8497703.450 ops/s
# Warmup Iteration  23: 8469561.407 ops/s
# Warmup Iteration  24: 8463136.840 ops/s
# Warmup Iteration  25: 8323936.743 ops/s
# Warmup Iteration  26: 8472092.619 ops/s
# Warmup Iteration  27: 8476224.912 ops/s
# Warmup Iteration  28: 8473020.169 ops/s
# Warmup Iteration  29: 8463134.189 ops/s
# Warmup Iteration  30: 8444895.731 ops/s
Iteration   1: 8465881.011 ops/s
Iteration   2: 8389371.675 ops/s
Iteration   3: 8478477.455 ops/s
Iteration   4: 8466674.001 ops/s
Iteration   5: 8497702.791 ops/s
Iteration   6: 8407607.006 ops/s
Iteration   7: 8467314.399 ops/s
Iteration   8: 8506069.411 ops/s
Iteration   9: 8493737.416 ops/s
Iteration  10: 8484073.193 ops/s
Iteration  11: 8487137.647 ops/s
Iteration  12: 8442022.830 ops/s
Iteration  13: 8469127.636 ops/s
Iteration  14: 8371917.131 ops/s
Iteration  15: 8509708.081 ops/s
Iteration  16: 8542357.820 ops/s
Iteration  17: 8421940.191 ops/s
Iteration  18: 8302349.980 ops/s
Iteration  19: 8384970.716 ops/s
Iteration  20: 8303662.721 ops/s
Iteration  21: 8468107.642 ops/s
Iteration  22: 8449241.498 ops/s
Iteration  23: 8417802.858 ops/s
Iteration  24: 8325551.069 ops/s
Iteration  25: 8409777.783 ops/s
Iteration  26: 8420932.288 ops/s
Iteration  27: 8334628.825 ops/s
Iteration  28: 8362976.930 ops/s
Iteration  29: 8485494.402 ops/s
Iteration  30: 8470779.800 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAtIndex":
  8434579.874 ±(99.9%) 42725.437 ops/s [Average]
  (min, avg, max) = (8302349.980, 8434579.874, 8542357.820), stdev = 63949.428
  CI (99.9%): [8391854.436, 8477305.311] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_addAtIndex  thrpt   30  8434579.874 ± 42725.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAtIndexAtCapacity$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAtIndexAtCapacity

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1913196.423 ops/s
# Warmup Iteration   2: 2371352.359 ops/s
# Warmup Iteration   3: 3121177.047 ops/s
# Warmup Iteration   4: 3157944.797 ops/s
# Warmup Iteration   5: 3132362.870 ops/s
# Warmup Iteration   6: 3155167.319 ops/s
# Warmup Iteration   7: 3150380.710 ops/s
# Warmup Iteration   8: 2741878.026 ops/s
# Warmup Iteration   9: 2876406.998 ops/s
# Warmup Iteration  10: 3162107.052 ops/s
# Warmup Iteration  11: 3143194.245 ops/s
# Warmup Iteration  12: 3158599.894 ops/s
# Warmup Iteration  13: 3159070.279 ops/s
# Warmup Iteration  14: 3106080.505 ops/s
# Warmup Iteration  15: 3170528.631 ops/s
# Warmup Iteration  16: 3167870.531 ops/s
# Warmup Iteration  17: 3139981.451 ops/s
# Warmup Iteration  18: 3172850.699 ops/s
# Warmup Iteration  19: 3150734.027 ops/s
# Warmup Iteration  20: 3145437.194 ops/s
# Warmup Iteration  21: 3171488.537 ops/s
# Warmup Iteration  22: 3150155.434 ops/s
# Warmup Iteration  23: 3177169.373 ops/s
# Warmup Iteration  24: 3153908.990 ops/s
# Warmup Iteration  25: 3149262.337 ops/s
# Warmup Iteration  26: 3148708.309 ops/s
# Warmup Iteration  27: 3162439.635 ops/s
# Warmup Iteration  28: 3160479.879 ops/s
# Warmup Iteration  29: 3167262.026 ops/s
# Warmup Iteration  30: 3158296.844 ops/s
Iteration   1: 3182795.185 ops/s
Iteration   2: 3117899.477 ops/s
Iteration   3: 3171189.234 ops/s
Iteration   4: 3167081.340 ops/s
Iteration   5: 3175099.007 ops/s
Iteration   6: 3150299.418 ops/s
Iteration   7: 3158055.367 ops/s
Iteration   8: 3105089.653 ops/s
Iteration   9: 3156258.140 ops/s
Iteration  10: 3151878.953 ops/s
Iteration  11: 3157118.827 ops/s
Iteration  12: 3113009.901 ops/s
Iteration  13: 3126841.539 ops/s
Iteration  14: 3153971.019 ops/s
Iteration  15: 3124063.918 ops/s
Iteration  16: 3144562.386 ops/s
Iteration  17: 3151825.227 ops/s
Iteration  18: 3134619.830 ops/s
Iteration  19: 3129882.792 ops/s
Iteration  20: 3180987.536 ops/s
Iteration  21: 3171676.600 ops/s
Iteration  22: 3145666.396 ops/s
Iteration  23: 3121535.066 ops/s
Iteration  24: 3164603.290 ops/s
Iteration  25: 3148724.529 ops/s
Iteration  26: 3182367.954 ops/s
Iteration  27: 3160803.674 ops/s
Iteration  28: 3162992.453 ops/s
Iteration  29: 3139929.023 ops/s
Iteration  30: 3117995.400 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAtIndexAtCapacity":
  3148960.771 ±(99.9%) 14584.790 ops/s [Average]
  (min, avg, max) = (3105089.653, 3148960.771, 3182795.185), stdev = 21829.828
  CI (99.9%): [3134375.982, 3163545.561] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_addAtIndexAtCapacity  thrpt   30  3148960.771 ± 14584.790  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAtIndex_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAtIndex_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 717340.142 ops/s
# Warmup Iteration   2: 739301.600 ops/s
# Warmup Iteration   3: 976031.296 ops/s
# Warmup Iteration   4: 976389.920 ops/s
# Warmup Iteration   5: 978819.930 ops/s
# Warmup Iteration   6: 976965.873 ops/s
# Warmup Iteration   7: 972897.324 ops/s
# Warmup Iteration   8: 975799.866 ops/s
# Warmup Iteration   9: 967980.752 ops/s
# Warmup Iteration  10: 969292.346 ops/s
# Warmup Iteration  11: 909675.347 ops/s
# Warmup Iteration  12: 876275.069 ops/s
# Warmup Iteration  13: 980904.028 ops/s
# Warmup Iteration  14: 971242.658 ops/s
# Warmup Iteration  15: 969542.289 ops/s
# Warmup Iteration  16: 970821.702 ops/s
# Warmup Iteration  17: 1025082.687 ops/s
# Warmup Iteration  18: 1020233.926 ops/s
# Warmup Iteration  19: 1026240.445 ops/s
# Warmup Iteration  20: 1025121.721 ops/s
# Warmup Iteration  21: 1025379.639 ops/s
# Warmup Iteration  22: 1019054.641 ops/s
# Warmup Iteration  23: 1017255.386 ops/s
# Warmup Iteration  24: 1029733.813 ops/s
# Warmup Iteration  25: 1029554.969 ops/s
# Warmup Iteration  26: 1027380.359 ops/s
# Warmup Iteration  27: 1029293.518 ops/s
# Warmup Iteration  28: 1032264.907 ops/s
# Warmup Iteration  29: 1017343.969 ops/s
# Warmup Iteration  30: 1029675.097 ops/s
Iteration   1: 1024690.408 ops/s
Iteration   2: 1027233.565 ops/s
Iteration   3: 1023914.614 ops/s
Iteration   4: 1029521.348 ops/s
Iteration   5: 1020445.552 ops/s
Iteration   6: 1033240.069 ops/s
Iteration   7: 1028419.239 ops/s
Iteration   8: 1028296.637 ops/s
Iteration   9: 1021771.388 ops/s
Iteration  10: 1026185.148 ops/s
Iteration  11: 1023441.387 ops/s
Iteration  12: 1027245.036 ops/s
Iteration  13: 993749.453 ops/s
Iteration  14: 1023732.075 ops/s
Iteration  15: 1024414.884 ops/s
Iteration  16: 1025117.831 ops/s
Iteration  17: 1034359.702 ops/s
Iteration  18: 1029019.541 ops/s
Iteration  19: 1029808.384 ops/s
Iteration  20: 1023883.181 ops/s
Iteration  21: 1019313.760 ops/s
Iteration  22: 1016966.114 ops/s
Iteration  23: 1021987.531 ops/s
Iteration  24: 1025298.962 ops/s
Iteration  25: 1028348.127 ops/s
Iteration  26: 1030663.510 ops/s
Iteration  27: 1025004.833 ops/s
Iteration  28: 1022608.119 ops/s
Iteration  29: 1024032.590 ops/s
Iteration  30: 1029162.539 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAtIndex_throws_index_greater_than_size":
  1024729.184 ±(99.9%) 4699.777 ops/s [Average]
  (min, avg, max) = (993749.453, 1024729.184, 1034359.702), stdev = 7034.406
  CI (99.9%): [1020029.407, 1029428.961] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_addAtIndex_throws_index_greater_than_size  thrpt   30  1024729.184 ± 4699.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAtIndex_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAtIndex_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700064.994 ops/s
# Warmup Iteration   2: 736621.511 ops/s
# Warmup Iteration   3: 954608.563 ops/s
# Warmup Iteration   4: 967099.847 ops/s
# Warmup Iteration   5: 961556.902 ops/s
# Warmup Iteration   6: 966627.951 ops/s
# Warmup Iteration   7: 972442.389 ops/s
# Warmup Iteration   8: 971265.147 ops/s
# Warmup Iteration   9: 969319.416 ops/s
# Warmup Iteration  10: 973868.553 ops/s
# Warmup Iteration  11: 797822.798 ops/s
# Warmup Iteration  12: 973688.347 ops/s
# Warmup Iteration  13: 969238.582 ops/s
# Warmup Iteration  14: 967551.306 ops/s
# Warmup Iteration  15: 971960.925 ops/s
# Warmup Iteration  16: 974367.120 ops/s
# Warmup Iteration  17: 1025193.738 ops/s
# Warmup Iteration  18: 1012783.150 ops/s
# Warmup Iteration  19: 1023056.089 ops/s
# Warmup Iteration  20: 1022162.804 ops/s
# Warmup Iteration  21: 1024656.315 ops/s
# Warmup Iteration  22: 1020861.306 ops/s
# Warmup Iteration  23: 1020285.902 ops/s
# Warmup Iteration  24: 1007943.481 ops/s
# Warmup Iteration  25: 1018717.721 ops/s
# Warmup Iteration  26: 1005569.016 ops/s
# Warmup Iteration  27: 1016180.865 ops/s
# Warmup Iteration  28: 1008326.933 ops/s
# Warmup Iteration  29: 1021890.145 ops/s
# Warmup Iteration  30: 1018988.033 ops/s
Iteration   1: 1019055.075 ops/s
Iteration   2: 1013110.808 ops/s
Iteration   3: 1024319.295 ops/s
Iteration   4: 1016990.512 ops/s
Iteration   5: 1022305.167 ops/s
Iteration   6: 1020652.267 ops/s
Iteration   7: 1011464.305 ops/s
Iteration   8: 1024314.693 ops/s
Iteration   9: 1009701.490 ops/s
Iteration  10: 1021995.227 ops/s
Iteration  11: 1009796.056 ops/s
Iteration  12: 1022409.287 ops/s
Iteration  13: 1024086.749 ops/s
Iteration  14: 1025480.417 ops/s
Iteration  15: 1024686.565 ops/s
Iteration  16: 1017258.359 ops/s
Iteration  17: 1026856.843 ops/s
Iteration  18: 1022372.070 ops/s
Iteration  19: 1023500.550 ops/s
Iteration  20: 1018163.338 ops/s
Iteration  21: 1013920.747 ops/s
Iteration  22: 1015965.167 ops/s
Iteration  23: 1018560.416 ops/s
Iteration  24: 1016436.220 ops/s
Iteration  25: 1017282.776 ops/s
Iteration  26: 1022619.098 ops/s
Iteration  27: 1002333.294 ops/s
Iteration  28: 1006654.380 ops/s
Iteration  29: 1021107.009 ops/s
Iteration  30: 1016727.529 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_addAtIndex_throws_index_negative":
  1018337.524 ±(99.9%) 3999.499 ops/s [Average]
  (min, avg, max) = (1002333.294, 1018337.524, 1026856.843), stdev = 5986.262
  CI (99.9%): [1014338.025, 1022337.022] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_addAtIndex_throws_index_negative  thrpt   30  1018337.524 ± 3999.499  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5043749.105 ops/s
# Warmup Iteration   2: 9024117.861 ops/s
# Warmup Iteration   3: 10553638.866 ops/s
# Warmup Iteration   4: 10642057.941 ops/s
# Warmup Iteration   5: 10688902.631 ops/s
# Warmup Iteration   6: 10606652.465 ops/s
# Warmup Iteration   7: 10536494.147 ops/s
# Warmup Iteration   8: 10513138.655 ops/s
# Warmup Iteration   9: 10573912.585 ops/s
# Warmup Iteration  10: 10621152.650 ops/s
# Warmup Iteration  11: 10669638.190 ops/s
# Warmup Iteration  12: 10644369.531 ops/s
# Warmup Iteration  13: 10618790.144 ops/s
# Warmup Iteration  14: 10555198.953 ops/s
# Warmup Iteration  15: 10532213.224 ops/s
# Warmup Iteration  16: 10650173.275 ops/s
# Warmup Iteration  17: 10593516.647 ops/s
# Warmup Iteration  18: 10643334.272 ops/s
# Warmup Iteration  19: 10543725.736 ops/s
# Warmup Iteration  20: 10513925.514 ops/s
# Warmup Iteration  21: 10651286.132 ops/s
# Warmup Iteration  22: 10695467.201 ops/s
# Warmup Iteration  23: 10585654.879 ops/s
# Warmup Iteration  24: 10624472.581 ops/s
# Warmup Iteration  25: 10606601.629 ops/s
# Warmup Iteration  26: 10559795.600 ops/s
# Warmup Iteration  27: 10646553.538 ops/s
# Warmup Iteration  28: 10569394.137 ops/s
# Warmup Iteration  29: 10707050.263 ops/s
# Warmup Iteration  30: 10588004.757 ops/s
Iteration   1: 10720070.239 ops/s
Iteration   2: 10624050.236 ops/s
Iteration   3: 10617712.760 ops/s
Iteration   4: 10682811.349 ops/s
Iteration   5: 10663412.087 ops/s
Iteration   6: 10502572.667 ops/s
Iteration   7: 10638162.346 ops/s
Iteration   8: 10489258.400 ops/s
Iteration   9: 10656227.920 ops/s
Iteration  10: 10694570.031 ops/s
Iteration  11: 10721137.637 ops/s
Iteration  12: 10683883.676 ops/s
Iteration  13: 10541980.527 ops/s
Iteration  14: 10423171.528 ops/s
Iteration  15: 10673387.319 ops/s
Iteration  16: 10627868.901 ops/s
Iteration  17: 10675604.961 ops/s
Iteration  18: 10650567.966 ops/s
Iteration  19: 10667190.465 ops/s
Iteration  20: 10632116.348 ops/s
Iteration  21: 10452336.769 ops/s
Iteration  22: 10639884.677 ops/s
Iteration  23: 10530128.859 ops/s
Iteration  24: 10538221.000 ops/s
Iteration  25: 10654844.437 ops/s
Iteration  26: 10635284.163 ops/s
Iteration  27: 10536387.983 ops/s
Iteration  28: 10637622.551 ops/s
Iteration  29: 10667833.755 ops/s
Iteration  30: 10726117.155 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_allSatisfy":
  10620147.290 ±(99.9%) 53789.243 ops/s [Average]
  (min, avg, max) = (10423171.528, 10620147.290, 10726117.155), stdev = 80509.212
  CI (99.9%): [10566358.048, 10673936.533] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_allSatisfy  thrpt   30  10620147.290 ± 53789.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5700203.027 ops/s
# Warmup Iteration   2: 9650608.788 ops/s
# Warmup Iteration   3: 11021362.549 ops/s
# Warmup Iteration   4: 11277095.917 ops/s
# Warmup Iteration   5: 11065946.332 ops/s
# Warmup Iteration   6: 11171727.268 ops/s
# Warmup Iteration   7: 11083101.794 ops/s
# Warmup Iteration   8: 11303832.717 ops/s
# Warmup Iteration   9: 11196167.157 ops/s
# Warmup Iteration  10: 11306384.506 ops/s
# Warmup Iteration  11: 11258157.829 ops/s
# Warmup Iteration  12: 11215693.207 ops/s
# Warmup Iteration  13: 11278202.045 ops/s
# Warmup Iteration  14: 11328145.538 ops/s
# Warmup Iteration  15: 11278957.642 ops/s
# Warmup Iteration  16: 11297157.204 ops/s
# Warmup Iteration  17: 11315003.548 ops/s
# Warmup Iteration  18: 11308846.413 ops/s
# Warmup Iteration  19: 11323925.591 ops/s
# Warmup Iteration  20: 11363528.681 ops/s
# Warmup Iteration  21: 11221780.558 ops/s
# Warmup Iteration  22: 11121273.661 ops/s
# Warmup Iteration  23: 11176640.911 ops/s
# Warmup Iteration  24: 11318222.807 ops/s
# Warmup Iteration  25: 11165811.065 ops/s
# Warmup Iteration  26: 11301845.539 ops/s
# Warmup Iteration  27: 11303648.737 ops/s
# Warmup Iteration  28: 11266715.203 ops/s
# Warmup Iteration  29: 11258261.062 ops/s
# Warmup Iteration  30: 11203370.727 ops/s
Iteration   1: 11250108.925 ops/s
Iteration   2: 11333176.005 ops/s
Iteration   3: 11347800.870 ops/s
Iteration   4: 11278278.302 ops/s
Iteration   5: 11169493.587 ops/s
Iteration   6: 11253696.024 ops/s
Iteration   7: 11288568.236 ops/s
Iteration   8: 11062927.332 ops/s
Iteration   9: 11261754.052 ops/s
Iteration  10: 11275956.634 ops/s
Iteration  11: 11072320.818 ops/s
Iteration  12: 11110297.007 ops/s
Iteration  13: 11339524.116 ops/s
Iteration  14: 11281521.297 ops/s
Iteration  15: 11286251.298 ops/s
Iteration  16: 11322434.175 ops/s
Iteration  17: 11371663.375 ops/s
Iteration  18: 11289394.835 ops/s
Iteration  19: 11326064.167 ops/s
Iteration  20: 11270539.161 ops/s
Iteration  21: 11172927.013 ops/s
Iteration  22: 11275015.983 ops/s
Iteration  23: 11288937.636 ops/s
Iteration  24: 11251620.184 ops/s
Iteration  25: 11209588.696 ops/s
Iteration  26: 11295452.095 ops/s
Iteration  27: 11273518.051 ops/s
Iteration  28: 11340497.450 ops/s
Iteration  29: 11097182.628 ops/s
Iteration  30: 11344024.934 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_anySatisfy":
  11258017.829 ±(99.9%) 55633.746 ops/s [Average]
  (min, avg, max) = (11062927.332, 11258017.829, 11371663.375), stdev = 83269.979
  CI (99.9%): [11202384.083, 11313651.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_anySatisfy  thrpt   30  11258017.829 ± 55633.746  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 470805.794 ops/s
# Warmup Iteration   2: 1122503.748 ops/s
# Warmup Iteration   3: 1147991.198 ops/s
# Warmup Iteration   4: 939138.839 ops/s
# Warmup Iteration   5: 1146830.733 ops/s
# Warmup Iteration   6: 1130352.212 ops/s
# Warmup Iteration   7: 1140330.191 ops/s
# Warmup Iteration   8: 1131789.792 ops/s
# Warmup Iteration   9: 1142607.384 ops/s
# Warmup Iteration  10: 1136643.070 ops/s
# Warmup Iteration  11: 1137438.416 ops/s
# Warmup Iteration  12: 1147066.871 ops/s
# Warmup Iteration  13: 1144767.330 ops/s
# Warmup Iteration  14: 1128735.982 ops/s
# Warmup Iteration  15: 1123193.555 ops/s
# Warmup Iteration  16: 1139678.345 ops/s
# Warmup Iteration  17: 1141474.827 ops/s
# Warmup Iteration  18: 1133580.448 ops/s
# Warmup Iteration  19: 1145636.845 ops/s
# Warmup Iteration  20: 1132679.827 ops/s
# Warmup Iteration  21: 1144698.883 ops/s
# Warmup Iteration  22: 1147578.863 ops/s
# Warmup Iteration  23: 1138115.723 ops/s
# Warmup Iteration  24: 1137330.869 ops/s
# Warmup Iteration  25: 1141091.845 ops/s
# Warmup Iteration  26: 1126394.491 ops/s
# Warmup Iteration  27: 1140488.143 ops/s
# Warmup Iteration  28: 1145979.748 ops/s
# Warmup Iteration  29: 1144678.309 ops/s
# Warmup Iteration  30: 1139383.062 ops/s
Iteration   1: 1137384.586 ops/s
Iteration   2: 1139134.904 ops/s
Iteration   3: 1140064.044 ops/s
Iteration   4: 1142124.217 ops/s
Iteration   5: 1135988.849 ops/s
Iteration   6: 1140415.898 ops/s
Iteration   7: 1131288.566 ops/s
Iteration   8: 1141766.370 ops/s
Iteration   9: 1147880.327 ops/s
Iteration  10: 1140132.075 ops/s
Iteration  11: 1136557.029 ops/s
Iteration  12: 1140718.645 ops/s
Iteration  13: 1143089.836 ops/s
Iteration  14: 1134649.274 ops/s
Iteration  15: 1130572.113 ops/s
Iteration  16: 1133497.987 ops/s
Iteration  17: 1139930.567 ops/s
Iteration  18: 1144762.094 ops/s
Iteration  19: 1136865.978 ops/s
Iteration  20: 1142165.680 ops/s
Iteration  21: 1144825.087 ops/s
Iteration  22: 1136080.382 ops/s
Iteration  23: 1140523.691 ops/s
Iteration  24: 1153789.970 ops/s
Iteration  25: 1148538.284 ops/s
Iteration  26: 1132749.235 ops/s
Iteration  27: 1142499.306 ops/s
Iteration  28: 1140938.743 ops/s
Iteration  29: 1143856.461 ops/s
Iteration  30: 1139750.880 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_appendString":
  1140084.703 ±(99.9%) 3431.038 ops/s [Average]
  (min, avg, max) = (1130572.113, 1140084.703, 1153789.970), stdev = 5135.416
  CI (99.9%): [1136653.665, 1143515.740] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_appendString  thrpt   30  1140084.703 ± 3431.038  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4331081.521 ops/s
# Warmup Iteration   2: 9254157.051 ops/s
# Warmup Iteration   3: 9379671.117 ops/s
# Warmup Iteration   4: 9220948.763 ops/s
# Warmup Iteration   5: 7941714.619 ops/s
# Warmup Iteration   6: 9367034.487 ops/s
# Warmup Iteration   7: 9380657.499 ops/s
# Warmup Iteration   8: 9362514.302 ops/s
# Warmup Iteration   9: 9399052.729 ops/s
# Warmup Iteration  10: 9369079.621 ops/s
# Warmup Iteration  11: 9397752.663 ops/s
# Warmup Iteration  12: 9371250.264 ops/s
# Warmup Iteration  13: 9384074.878 ops/s
# Warmup Iteration  14: 9364440.640 ops/s
# Warmup Iteration  15: 9400464.533 ops/s
# Warmup Iteration  16: 9395256.332 ops/s
# Warmup Iteration  17: 9397712.048 ops/s
# Warmup Iteration  18: 9206522.729 ops/s
# Warmup Iteration  19: 9222685.288 ops/s
# Warmup Iteration  20: 9331168.437 ops/s
# Warmup Iteration  21: 9335706.146 ops/s
# Warmup Iteration  22: 9433503.644 ops/s
# Warmup Iteration  23: 9321754.555 ops/s
# Warmup Iteration  24: 9402945.777 ops/s
# Warmup Iteration  25: 9394626.433 ops/s
# Warmup Iteration  26: 9333291.254 ops/s
# Warmup Iteration  27: 9373553.654 ops/s
# Warmup Iteration  28: 9346130.707 ops/s
# Warmup Iteration  29: 9373146.689 ops/s
# Warmup Iteration  30: 9400966.462 ops/s
Iteration   1: 9439308.102 ops/s
Iteration   2: 9437313.586 ops/s
Iteration   3: 9394689.999 ops/s
Iteration   4: 9369213.848 ops/s
Iteration   5: 9300884.928 ops/s
Iteration   6: 9393805.927 ops/s
Iteration   7: 9358323.939 ops/s
Iteration   8: 9411309.614 ops/s
Iteration   9: 9382445.303 ops/s
Iteration  10: 9372170.743 ops/s
Iteration  11: 9388588.863 ops/s
Iteration  12: 9400965.117 ops/s
Iteration  13: 9435327.490 ops/s
Iteration  14: 9443397.578 ops/s
Iteration  15: 9377193.901 ops/s
Iteration  16: 9371450.423 ops/s
Iteration  17: 9328851.276 ops/s
Iteration  18: 9449319.120 ops/s
Iteration  19: 9394321.978 ops/s
Iteration  20: 9360349.739 ops/s
Iteration  21: 9204485.111 ops/s
Iteration  22: 9368602.092 ops/s
Iteration  23: 9435315.792 ops/s
Iteration  24: 9388287.990 ops/s
Iteration  25: 9398898.231 ops/s
Iteration  26: 9298279.877 ops/s
Iteration  27: 9381739.907 ops/s
Iteration  28: 9356797.906 ops/s
Iteration  29: 9426380.174 ops/s
Iteration  30: 9358766.420 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_asLazy":
  9380892.832 ±(99.9%) 33978.437 ops/s [Average]
  (min, avg, max) = (9204485.111, 9380892.832, 9449319.120), stdev = 50857.329
  CI (99.9%): [9346914.395, 9414871.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_asLazy  thrpt   30  9380892.832 ± 33978.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1812727.196 ops/s
# Warmup Iteration   2: 3663381.831 ops/s
# Warmup Iteration   3: 7775421.330 ops/s
# Warmup Iteration   4: 6513383.943 ops/s
# Warmup Iteration   5: 7735421.012 ops/s
# Warmup Iteration   6: 7795505.767 ops/s
# Warmup Iteration   7: 7758978.119 ops/s
# Warmup Iteration   8: 7789884.378 ops/s
# Warmup Iteration   9: 7802575.037 ops/s
# Warmup Iteration  10: 7775067.420 ops/s
# Warmup Iteration  11: 7771833.598 ops/s
# Warmup Iteration  12: 7758645.840 ops/s
# Warmup Iteration  13: 7811281.243 ops/s
# Warmup Iteration  14: 7761300.965 ops/s
# Warmup Iteration  15: 7791857.975 ops/s
# Warmup Iteration  16: 7785483.941 ops/s
# Warmup Iteration  17: 7810474.423 ops/s
# Warmup Iteration  18: 7760716.335 ops/s
# Warmup Iteration  19: 7826464.414 ops/s
# Warmup Iteration  20: 7868514.517 ops/s
# Warmup Iteration  21: 7859269.188 ops/s
# Warmup Iteration  22: 7786600.517 ops/s
# Warmup Iteration  23: 7809504.223 ops/s
# Warmup Iteration  24: 7747691.667 ops/s
# Warmup Iteration  25: 7777716.219 ops/s
# Warmup Iteration  26: 7824724.743 ops/s
# Warmup Iteration  27: 7847114.903 ops/s
# Warmup Iteration  28: 7833491.952 ops/s
# Warmup Iteration  29: 7839748.746 ops/s
# Warmup Iteration  30: 7824037.742 ops/s
Iteration   1: 7826952.341 ops/s
Iteration   2: 7811116.935 ops/s
Iteration   3: 7850816.060 ops/s
Iteration   4: 7825895.760 ops/s
Iteration   5: 7867138.713 ops/s
Iteration   6: 7862846.354 ops/s
Iteration   7: 7876233.322 ops/s
Iteration   8: 7831938.573 ops/s
Iteration   9: 7806603.116 ops/s
Iteration  10: 7847367.420 ops/s
Iteration  11: 7848118.918 ops/s
Iteration  12: 7864642.889 ops/s
Iteration  13: 7798587.009 ops/s
Iteration  14: 7869410.299 ops/s
Iteration  15: 7891356.131 ops/s
Iteration  16: 7849183.927 ops/s
Iteration  17: 7865069.653 ops/s
Iteration  18: 7829696.057 ops/s
Iteration  19: 7766713.478 ops/s
Iteration  20: 7801840.433 ops/s
Iteration  21: 7906685.514 ops/s
Iteration  22: 7847503.614 ops/s
Iteration  23: 7793266.331 ops/s
Iteration  24: 7877413.708 ops/s
Iteration  25: 7842825.761 ops/s
Iteration  26: 7587468.445 ops/s
Iteration  27: 7859190.963 ops/s
Iteration  28: 7810644.236 ops/s
Iteration  29: 7771725.339 ops/s
Iteration  30: 7857897.431 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_asSynchronized":
  7831538.291 ±(99.9%) 38157.756 ops/s [Average]
  (min, avg, max) = (7587468.445, 7831538.291, 7906685.514), stdev = 57112.738
  CI (99.9%): [7793380.535, 7869696.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_asSynchronized  thrpt   30  7831538.291 ± 38157.756  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3581190.812 ops/s
# Warmup Iteration   2: 6655090.872 ops/s
# Warmup Iteration   3: 6247311.148 ops/s
# Warmup Iteration   4: 7047380.911 ops/s
# Warmup Iteration   5: 7047798.422 ops/s
# Warmup Iteration   6: 7098966.449 ops/s
# Warmup Iteration   7: 7038676.958 ops/s
# Warmup Iteration   8: 6978969.258 ops/s
# Warmup Iteration   9: 7053371.412 ops/s
# Warmup Iteration  10: 6950392.588 ops/s
# Warmup Iteration  11: 7049540.455 ops/s
# Warmup Iteration  12: 7018494.710 ops/s
# Warmup Iteration  13: 7048722.178 ops/s
# Warmup Iteration  14: 7068492.690 ops/s
# Warmup Iteration  15: 6971759.921 ops/s
# Warmup Iteration  16: 7043021.318 ops/s
# Warmup Iteration  17: 7057851.949 ops/s
# Warmup Iteration  18: 7038241.222 ops/s
# Warmup Iteration  19: 7030203.562 ops/s
# Warmup Iteration  20: 6959469.980 ops/s
# Warmup Iteration  21: 7033701.335 ops/s
# Warmup Iteration  22: 7049094.540 ops/s
# Warmup Iteration  23: 7010987.292 ops/s
# Warmup Iteration  24: 6968070.424 ops/s
# Warmup Iteration  25: 7026078.158 ops/s
# Warmup Iteration  26: 6967041.880 ops/s
# Warmup Iteration  27: 7026311.362 ops/s
# Warmup Iteration  28: 6948721.765 ops/s
# Warmup Iteration  29: 6981442.193 ops/s
# Warmup Iteration  30: 7052184.541 ops/s
Iteration   1: 6986982.802 ops/s
Iteration   2: 7049576.965 ops/s
Iteration   3: 7058641.761 ops/s
Iteration   4: 7050929.362 ops/s
Iteration   5: 7038926.173 ops/s
Iteration   6: 7034148.020 ops/s
Iteration   7: 7064234.975 ops/s
Iteration   8: 7065599.453 ops/s
Iteration   9: 7092046.523 ops/s
Iteration  10: 7050783.718 ops/s
Iteration  11: 7072309.389 ops/s
Iteration  12: 7029671.398 ops/s
Iteration  13: 7052847.032 ops/s
Iteration  14: 7068525.979 ops/s
Iteration  15: 7064233.559 ops/s
Iteration  16: 7043502.497 ops/s
Iteration  17: 7042090.837 ops/s
Iteration  18: 7064214.950 ops/s
Iteration  19: 7018058.232 ops/s
Iteration  20: 7043687.443 ops/s
Iteration  21: 7017875.290 ops/s
Iteration  22: 7009829.784 ops/s
Iteration  23: 6989406.907 ops/s
Iteration  24: 7051474.120 ops/s
Iteration  25: 7066391.044 ops/s
Iteration  26: 7053587.539 ops/s
Iteration  27: 7049440.010 ops/s
Iteration  28: 7041675.065 ops/s
Iteration  29: 6876844.168 ops/s
Iteration  30: 7103458.058 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_asUnmodifiable":
  7041699.768 ±(99.9%) 26871.421 ops/s [Average]
  (min, avg, max) = (6876844.168, 7041699.768, 7103458.058), stdev = 40219.881
  CI (99.9%): [7014828.347, 7068571.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  7041699.768 ± 26871.421  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11862429.038 ops/s
# Warmup Iteration   2: 20728887.374 ops/s
# Warmup Iteration   3: 19464805.091 ops/s
# Warmup Iteration   4: 21452432.827 ops/s
# Warmup Iteration   5: 21474460.828 ops/s
# Warmup Iteration   6: 21248604.522 ops/s
# Warmup Iteration   7: 21444913.658 ops/s
# Warmup Iteration   8: 21336587.248 ops/s
# Warmup Iteration   9: 21530677.135 ops/s
# Warmup Iteration  10: 21360380.477 ops/s
# Warmup Iteration  11: 21516189.452 ops/s
# Warmup Iteration  12: 21425876.681 ops/s
# Warmup Iteration  13: 21531402.994 ops/s
# Warmup Iteration  14: 21466955.033 ops/s
# Warmup Iteration  15: 21451689.620 ops/s
# Warmup Iteration  16: 21486145.626 ops/s
# Warmup Iteration  17: 21442092.807 ops/s
# Warmup Iteration  18: 21473660.763 ops/s
# Warmup Iteration  19: 21244449.679 ops/s
# Warmup Iteration  20: 21498744.587 ops/s
# Warmup Iteration  21: 21404820.057 ops/s
# Warmup Iteration  22: 21341126.936 ops/s
# Warmup Iteration  23: 21388052.296 ops/s
# Warmup Iteration  24: 21275475.446 ops/s
# Warmup Iteration  25: 21320001.144 ops/s
# Warmup Iteration  26: 21379426.877 ops/s
# Warmup Iteration  27: 21241253.764 ops/s
# Warmup Iteration  28: 21199997.804 ops/s
# Warmup Iteration  29: 21235003.761 ops/s
# Warmup Iteration  30: 21327291.867 ops/s
Iteration   1: 21306086.085 ops/s
Iteration   2: 21394260.438 ops/s
Iteration   3: 21482320.164 ops/s
Iteration   4: 21407535.500 ops/s
Iteration   5: 21344986.898 ops/s
Iteration   6: 21442396.237 ops/s
Iteration   7: 21419755.581 ops/s
Iteration   8: 21467647.927 ops/s
Iteration   9: 20984095.582 ops/s
Iteration  10: 21284047.092 ops/s
Iteration  11: 21576153.064 ops/s
Iteration  12: 21385805.110 ops/s
Iteration  13: 21560319.032 ops/s
Iteration  14: 21485374.657 ops/s
Iteration  15: 21607472.115 ops/s
Iteration  16: 21456469.258 ops/s
Iteration  17: 21367725.318 ops/s
Iteration  18: 21536981.292 ops/s
Iteration  19: 21588007.517 ops/s
Iteration  20: 21520102.757 ops/s
Iteration  21: 21569231.761 ops/s
Iteration  22: 21527090.270 ops/s
Iteration  23: 21535499.759 ops/s
Iteration  24: 21244320.708 ops/s
Iteration  25: 21346008.915 ops/s
Iteration  26: 21517586.750 ops/s
Iteration  27: 21417140.889 ops/s
Iteration  28: 21520732.103 ops/s
Iteration  29: 21167472.259 ops/s
Iteration  30: 21127505.327 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_booleanIterator":
  21419671.012 ±(99.9%) 98289.622 ops/s [Average]
  (min, avg, max) = (20984095.582, 21419671.012, 21607472.115), stdev = 147115.291
  CI (99.9%): [21321381.390, 21517960.634] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_booleanIterator  thrpt   30  21419671.012 ± 98289.622  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 537721.840 ops/s
# Warmup Iteration   2: 727212.624 ops/s
# Warmup Iteration   3: 852502.777 ops/s
# Warmup Iteration   4: 862723.786 ops/s
# Warmup Iteration   5: 861649.262 ops/s
# Warmup Iteration   6: 853494.371 ops/s
# Warmup Iteration   7: 813987.345 ops/s
# Warmup Iteration   8: 765188.211 ops/s
# Warmup Iteration   9: 860141.644 ops/s
# Warmup Iteration  10: 853953.845 ops/s
# Warmup Iteration  11: 861828.894 ops/s
# Warmup Iteration  12: 850756.696 ops/s
# Warmup Iteration  13: 853224.182 ops/s
# Warmup Iteration  14: 857263.243 ops/s
# Warmup Iteration  15: 861444.681 ops/s
# Warmup Iteration  16: 859265.788 ops/s
# Warmup Iteration  17: 901307.363 ops/s
# Warmup Iteration  18: 897018.157 ops/s
# Warmup Iteration  19: 897929.068 ops/s
# Warmup Iteration  20: 897114.870 ops/s
# Warmup Iteration  21: 905630.527 ops/s
# Warmup Iteration  22: 906317.985 ops/s
# Warmup Iteration  23: 898696.250 ops/s
# Warmup Iteration  24: 905978.292 ops/s
# Warmup Iteration  25: 907959.536 ops/s
# Warmup Iteration  26: 907372.322 ops/s
# Warmup Iteration  27: 897473.270 ops/s
# Warmup Iteration  28: 909952.404 ops/s
# Warmup Iteration  29: 889489.567 ops/s
# Warmup Iteration  30: 907234.991 ops/s
Iteration   1: 907183.037 ops/s
Iteration   2: 909812.979 ops/s
Iteration   3: 906357.892 ops/s
Iteration   4: 902218.229 ops/s
Iteration   5: 898813.188 ops/s
Iteration   6: 907268.642 ops/s
Iteration   7: 907460.838 ops/s
Iteration   8: 910543.492 ops/s
Iteration   9: 903389.279 ops/s
Iteration  10: 909573.147 ops/s
Iteration  11: 897152.517 ops/s
Iteration  12: 904271.748 ops/s
Iteration  13: 908939.074 ops/s
Iteration  14: 903876.446 ops/s
Iteration  15: 894284.285 ops/s
Iteration  16: 909353.793 ops/s
Iteration  17: 912198.016 ops/s
Iteration  18: 908114.462 ops/s
Iteration  19: 909250.817 ops/s
Iteration  20: 896935.026 ops/s
Iteration  21: 906221.561 ops/s
Iteration  22: 909349.688 ops/s
Iteration  23: 911423.095 ops/s
Iteration  24: 910335.867 ops/s
Iteration  25: 906480.245 ops/s
Iteration  26: 910980.473 ops/s
Iteration  27: 908882.343 ops/s
Iteration  28: 909162.989 ops/s
Iteration  29: 901174.075 ops/s
Iteration  30: 901911.604 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_booleanIterator_with_remove":
  906097.295 ±(99.9%) 3155.955 ops/s [Average]
  (min, avg, max) = (894284.285, 906097.295, 912198.016), stdev = 4723.685
  CI (99.9%): [902941.340, 909253.250] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  906097.295 ± 3155.955  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 137452.193 ops/s
# Warmup Iteration   2: 229579.346 ops/s
# Warmup Iteration   3: 264199.312 ops/s
# Warmup Iteration   4: 266484.864 ops/s
# Warmup Iteration   5: 266430.172 ops/s
# Warmup Iteration   6: 219900.163 ops/s
# Warmup Iteration   7: 265250.751 ops/s
# Warmup Iteration   8: 259206.435 ops/s
# Warmup Iteration   9: 266483.621 ops/s
# Warmup Iteration  10: 267168.395 ops/s
# Warmup Iteration  11: 266202.095 ops/s
# Warmup Iteration  12: 264048.875 ops/s
# Warmup Iteration  13: 260783.948 ops/s
# Warmup Iteration  14: 265048.008 ops/s
# Warmup Iteration  15: 265825.257 ops/s
# Warmup Iteration  16: 263018.972 ops/s
# Warmup Iteration  17: 269871.550 ops/s
# Warmup Iteration  18: 274398.117 ops/s
# Warmup Iteration  19: 274426.385 ops/s
# Warmup Iteration  20: 272303.358 ops/s
# Warmup Iteration  21: 274697.826 ops/s
# Warmup Iteration  22: 274776.833 ops/s
# Warmup Iteration  23: 272125.637 ops/s
# Warmup Iteration  24: 272995.622 ops/s
# Warmup Iteration  25: 273470.404 ops/s
# Warmup Iteration  26: 274325.384 ops/s
# Warmup Iteration  27: 274477.757 ops/s
# Warmup Iteration  28: 275715.512 ops/s
# Warmup Iteration  29: 270381.723 ops/s
# Warmup Iteration  30: 275448.239 ops/s
Iteration   1: 273004.102 ops/s
Iteration   2: 275268.707 ops/s
Iteration   3: 272855.536 ops/s
Iteration   4: 272432.331 ops/s
Iteration   5: 275859.441 ops/s
Iteration   6: 274918.064 ops/s
Iteration   7: 275022.951 ops/s
Iteration   8: 266546.411 ops/s
Iteration   9: 273995.534 ops/s
Iteration  10: 275084.758 ops/s
Iteration  11: 274685.232 ops/s
Iteration  12: 274886.825 ops/s
Iteration  13: 274551.622 ops/s
Iteration  14: 276244.996 ops/s
Iteration  15: 276028.924 ops/s
Iteration  16: 276258.443 ops/s
Iteration  17: 274725.057 ops/s
Iteration  18: 274050.647 ops/s
Iteration  19: 275465.211 ops/s
Iteration  20: 274289.354 ops/s
Iteration  21: 275981.393 ops/s
Iteration  22: 274181.401 ops/s
Iteration  23: 273581.431 ops/s
Iteration  24: 275405.402 ops/s
Iteration  25: 272151.306 ops/s
Iteration  26: 276020.450 ops/s
Iteration  27: 268950.142 ops/s
Iteration  28: 274940.355 ops/s
Iteration  29: 273443.879 ops/s
Iteration  30: 275788.789 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_chunk":
  274220.623 ±(99.9%) 1409.483 ops/s [Average]
  (min, avg, max) = (266546.411, 274220.623, 276258.443), stdev = 2109.647
  CI (99.9%): [272811.140, 275630.106] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_chunk  thrpt   30  274220.623 ± 1409.483  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1665572.044 ops/s
# Warmup Iteration   2: 2918756.820 ops/s
# Warmup Iteration   3: 3457141.390 ops/s
# Warmup Iteration   4: 3403302.339 ops/s
# Warmup Iteration   5: 3443311.772 ops/s
# Warmup Iteration   6: 3469452.963 ops/s
# Warmup Iteration   7: 3464229.591 ops/s
# Warmup Iteration   8: 3396842.082 ops/s
# Warmup Iteration   9: 3443473.438 ops/s
# Warmup Iteration  10: 3443823.859 ops/s
# Warmup Iteration  11: 3469681.280 ops/s
# Warmup Iteration  12: 3470634.867 ops/s
# Warmup Iteration  13: 3450901.603 ops/s
# Warmup Iteration  14: 3421458.541 ops/s
# Warmup Iteration  15: 3464117.574 ops/s
# Warmup Iteration  16: 3448352.037 ops/s
# Warmup Iteration  17: 3464093.348 ops/s
# Warmup Iteration  18: 3451067.367 ops/s
# Warmup Iteration  19: 3446356.025 ops/s
# Warmup Iteration  20: 3433559.609 ops/s
# Warmup Iteration  21: 3459497.844 ops/s
# Warmup Iteration  22: 3451678.292 ops/s
# Warmup Iteration  23: 3463350.845 ops/s
# Warmup Iteration  24: 3447350.782 ops/s
# Warmup Iteration  25: 3466610.098 ops/s
# Warmup Iteration  26: 3471617.939 ops/s
# Warmup Iteration  27: 3482312.820 ops/s
# Warmup Iteration  28: 3443809.068 ops/s
# Warmup Iteration  29: 3453565.778 ops/s
# Warmup Iteration  30: 3468255.627 ops/s
Iteration   1: 3453812.628 ops/s
Iteration   2: 3433856.100 ops/s
Iteration   3: 3444737.457 ops/s
Iteration   4: 3444117.313 ops/s
Iteration   5: 3394056.557 ops/s
Iteration   6: 3394118.295 ops/s
Iteration   7: 3465563.843 ops/s
Iteration   8: 3463714.882 ops/s
Iteration   9: 3458072.494 ops/s
Iteration  10: 3455003.921 ops/s
Iteration  11: 3475278.339 ops/s
Iteration  12: 3428933.355 ops/s
Iteration  13: 3467311.977 ops/s
Iteration  14: 3460581.484 ops/s
Iteration  15: 3462527.727 ops/s
Iteration  16: 3413701.520 ops/s
Iteration  17: 3468603.701 ops/s
Iteration  18: 3483602.698 ops/s
Iteration  19: 3466948.278 ops/s
Iteration  20: 3475216.459 ops/s
Iteration  21: 3484033.731 ops/s
Iteration  22: 3440353.245 ops/s
Iteration  23: 3473367.692 ops/s
Iteration  24: 3402465.389 ops/s
Iteration  25: 3456137.659 ops/s
Iteration  26: 3478925.902 ops/s
Iteration  27: 3452685.358 ops/s
Iteration  28: 3475517.396 ops/s
Iteration  29: 3476012.846 ops/s
Iteration  30: 3476525.880 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_clear":
  3454192.804 ±(99.9%) 17065.360 ops/s [Average]
  (min, avg, max) = (3394056.557, 3454192.804, 3484033.731), stdev = 25542.629
  CI (99.9%): [3437127.445, 3471258.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_clear  thrpt   30  3454192.804 ± 17065.360  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1978930.172 ops/s
# Warmup Iteration   2: 4718088.143 ops/s
# Warmup Iteration   3: 4037660.004 ops/s
# Warmup Iteration   4: 4885265.135 ops/s
# Warmup Iteration   5: 4885706.475 ops/s
# Warmup Iteration   6: 4883615.408 ops/s
# Warmup Iteration   7: 4882201.611 ops/s
# Warmup Iteration   8: 4883085.129 ops/s
# Warmup Iteration   9: 4900645.992 ops/s
# Warmup Iteration  10: 4889007.234 ops/s
# Warmup Iteration  11: 4882262.670 ops/s
# Warmup Iteration  12: 4875208.812 ops/s
# Warmup Iteration  13: 4892564.612 ops/s
# Warmup Iteration  14: 4899203.028 ops/s
# Warmup Iteration  15: 4881061.861 ops/s
# Warmup Iteration  16: 4857922.737 ops/s
# Warmup Iteration  17: 4891079.529 ops/s
# Warmup Iteration  18: 4901628.336 ops/s
# Warmup Iteration  19: 4857787.043 ops/s
# Warmup Iteration  20: 4899500.379 ops/s
# Warmup Iteration  21: 4885045.486 ops/s
# Warmup Iteration  22: 4882712.364 ops/s
# Warmup Iteration  23: 4877846.562 ops/s
# Warmup Iteration  24: 4888479.772 ops/s
# Warmup Iteration  25: 4880473.190 ops/s
# Warmup Iteration  26: 4913572.601 ops/s
# Warmup Iteration  27: 4884655.864 ops/s
# Warmup Iteration  28: 4906097.806 ops/s
# Warmup Iteration  29: 4867128.541 ops/s
# Warmup Iteration  30: 4875709.364 ops/s
Iteration   1: 4915154.428 ops/s
Iteration   2: 4892881.219 ops/s
Iteration   3: 4864275.011 ops/s
Iteration   4: 4909067.705 ops/s
Iteration   5: 4893620.796 ops/s
Iteration   6: 4865767.736 ops/s
Iteration   7: 4889755.056 ops/s
Iteration   8: 4847470.544 ops/s
Iteration   9: 4906476.581 ops/s
Iteration  10: 4753213.862 ops/s
Iteration  11: 4932162.801 ops/s
Iteration  12: 4893809.562 ops/s
Iteration  13: 4929228.715 ops/s
Iteration  14: 4887342.349 ops/s
Iteration  15: 4829465.272 ops/s
Iteration  16: 4889567.840 ops/s
Iteration  17: 4884907.995 ops/s
Iteration  18: 4890931.871 ops/s
Iteration  19: 4878120.706 ops/s
Iteration  20: 4874535.159 ops/s
Iteration  21: 4814968.076 ops/s
Iteration  22: 4904188.885 ops/s
Iteration  23: 4910684.557 ops/s
Iteration  24: 4874859.359 ops/s
Iteration  25: 4918050.378 ops/s
Iteration  26: 4896851.547 ops/s
Iteration  27: 4849768.108 ops/s
Iteration  28: 4838542.885 ops/s
Iteration  29: 4906172.700 ops/s
Iteration  30: 4889533.704 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_collect":
  4881045.847 ±(99.9%) 24785.848 ops/s [Average]
  (min, avg, max) = (4753213.862, 4881045.847, 4932162.801), stdev = 37098.293
  CI (99.9%): [4856259.999, 4905831.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_collect  thrpt   30  4881045.847 ± 24785.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2851077.073 ops/s
# Warmup Iteration   2: 6825262.591 ops/s
# Warmup Iteration   3: 5786118.643 ops/s
# Warmup Iteration   4: 6962731.776 ops/s
# Warmup Iteration   5: 6921679.940 ops/s
# Warmup Iteration   6: 6962461.041 ops/s
# Warmup Iteration   7: 6868025.704 ops/s
# Warmup Iteration   8: 6910660.649 ops/s
# Warmup Iteration   9: 6912651.671 ops/s
# Warmup Iteration  10: 6951399.619 ops/s
# Warmup Iteration  11: 6918653.516 ops/s
# Warmup Iteration  12: 6956944.554 ops/s
# Warmup Iteration  13: 6889642.382 ops/s
# Warmup Iteration  14: 6914317.469 ops/s
# Warmup Iteration  15: 6939683.418 ops/s
# Warmup Iteration  16: 6908903.098 ops/s
# Warmup Iteration  17: 6952879.732 ops/s
# Warmup Iteration  18: 6908720.662 ops/s
# Warmup Iteration  19: 6967766.603 ops/s
# Warmup Iteration  20: 6941451.971 ops/s
# Warmup Iteration  21: 6962830.115 ops/s
# Warmup Iteration  22: 6882621.387 ops/s
# Warmup Iteration  23: 6855805.141 ops/s
# Warmup Iteration  24: 6977494.906 ops/s
# Warmup Iteration  25: 6979853.321 ops/s
# Warmup Iteration  26: 6973845.460 ops/s
# Warmup Iteration  27: 6970148.030 ops/s
# Warmup Iteration  28: 6963129.315 ops/s
# Warmup Iteration  29: 6906913.948 ops/s
# Warmup Iteration  30: 6948140.885 ops/s
Iteration   1: 6956150.327 ops/s
Iteration   2: 6967153.385 ops/s
Iteration   3: 6949823.851 ops/s
Iteration   4: 6963856.448 ops/s
Iteration   5: 6861553.557 ops/s
Iteration   6: 6975238.095 ops/s
Iteration   7: 6976112.410 ops/s
Iteration   8: 6848664.475 ops/s
Iteration   9: 6972032.531 ops/s
Iteration  10: 6991389.848 ops/s
Iteration  11: 6976958.339 ops/s
Iteration  12: 6942783.860 ops/s
Iteration  13: 6941828.678 ops/s
Iteration  14: 6862373.133 ops/s
Iteration  15: 6938126.403 ops/s
Iteration  16: 6930363.603 ops/s
Iteration  17: 6847963.464 ops/s
Iteration  18: 6903835.321 ops/s
Iteration  19: 6945061.755 ops/s
Iteration  20: 7011010.558 ops/s
Iteration  21: 6825984.707 ops/s
Iteration  22: 6920773.469 ops/s
Iteration  23: 6956484.250 ops/s
Iteration  24: 6985438.284 ops/s
Iteration  25: 6966881.975 ops/s
Iteration  26: 6947782.234 ops/s
Iteration  27: 6984565.491 ops/s
Iteration  28: 6929655.533 ops/s
Iteration  29: 7001861.540 ops/s
Iteration  30: 6830944.507 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_collectWithIndex":
  6937088.401 ±(99.9%) 34819.341 ops/s [Average]
  (min, avg, max) = (6825984.707, 6937088.401, 7011010.558), stdev = 52115.955
  CI (99.9%): [6902269.060, 6971907.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  6937088.401 ± 34819.341  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7922859.812 ops/s
# Warmup Iteration   2: 13118330.183 ops/s
# Warmup Iteration   3: 14717292.912 ops/s
# Warmup Iteration   4: 14998509.112 ops/s
# Warmup Iteration   5: 14894036.395 ops/s
# Warmup Iteration   6: 14951319.978 ops/s
# Warmup Iteration   7: 15026979.128 ops/s
# Warmup Iteration   8: 14975402.622 ops/s
# Warmup Iteration   9: 14931527.985 ops/s
# Warmup Iteration  10: 14993936.217 ops/s
# Warmup Iteration  11: 15033857.785 ops/s
# Warmup Iteration  12: 15015513.418 ops/s
# Warmup Iteration  13: 14827742.242 ops/s
# Warmup Iteration  14: 15006406.403 ops/s
# Warmup Iteration  15: 14991852.427 ops/s
# Warmup Iteration  16: 15055143.034 ops/s
# Warmup Iteration  17: 15029122.364 ops/s
# Warmup Iteration  18: 14896467.713 ops/s
# Warmup Iteration  19: 15043430.702 ops/s
# Warmup Iteration  20: 15000297.968 ops/s
# Warmup Iteration  21: 15066591.940 ops/s
# Warmup Iteration  22: 15074046.759 ops/s
# Warmup Iteration  23: 14949397.345 ops/s
# Warmup Iteration  24: 15043750.859 ops/s
# Warmup Iteration  25: 15015293.486 ops/s
# Warmup Iteration  26: 14954145.671 ops/s
# Warmup Iteration  27: 14990081.680 ops/s
# Warmup Iteration  28: 15054890.562 ops/s
# Warmup Iteration  29: 15029176.197 ops/s
# Warmup Iteration  30: 15112378.179 ops/s
Iteration   1: 15033601.674 ops/s
Iteration   2: 15032710.972 ops/s
Iteration   3: 15163195.227 ops/s
Iteration   4: 15079378.574 ops/s
Iteration   5: 15073970.611 ops/s
Iteration   6: 15151762.034 ops/s
Iteration   7: 15013483.567 ops/s
Iteration   8: 15021577.029 ops/s
Iteration   9: 15077740.367 ops/s
Iteration  10: 14977984.546 ops/s
Iteration  11: 15081651.142 ops/s
Iteration  12: 15080770.169 ops/s
Iteration  13: 14927450.284 ops/s
Iteration  14: 14925734.043 ops/s
Iteration  15: 14947577.971 ops/s
Iteration  16: 15042405.387 ops/s
Iteration  17: 14954986.300 ops/s
Iteration  18: 14981056.258 ops/s
Iteration  19: 14918297.526 ops/s
Iteration  20: 15140957.970 ops/s
Iteration  21: 15102573.163 ops/s
Iteration  22: 15108214.755 ops/s
Iteration  23: 15039916.035 ops/s
Iteration  24: 14945780.789 ops/s
Iteration  25: 14959674.925 ops/s
Iteration  26: 15020522.949 ops/s
Iteration  27: 15141398.434 ops/s
Iteration  28: 15002262.331 ops/s
Iteration  29: 15049366.871 ops/s
Iteration  30: 14942890.696 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_contains":
  15031296.420 ±(99.9%) 48589.070 ops/s [Average]
  (min, avg, max) = (14918297.526, 15031296.420, 15163195.227), stdev = 72725.838
  CI (99.9%): [14982707.350, 15079885.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_contains  thrpt   30  15031296.420 ± 48589.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3704765.195 ops/s
# Warmup Iteration   2: 6635876.298 ops/s
# Warmup Iteration   3: 7225978.244 ops/s
# Warmup Iteration   4: 7538703.159 ops/s
# Warmup Iteration   5: 7500329.090 ops/s
# Warmup Iteration   6: 7555079.279 ops/s
# Warmup Iteration   7: 7587643.416 ops/s
# Warmup Iteration   8: 7545645.494 ops/s
# Warmup Iteration   9: 7561190.811 ops/s
# Warmup Iteration  10: 7563358.571 ops/s
# Warmup Iteration  11: 7544959.058 ops/s
# Warmup Iteration  12: 7418677.340 ops/s
# Warmup Iteration  13: 7544990.944 ops/s
# Warmup Iteration  14: 7503456.021 ops/s
# Warmup Iteration  15: 7520957.140 ops/s
# Warmup Iteration  16: 7580437.121 ops/s
# Warmup Iteration  17: 7535641.640 ops/s
# Warmup Iteration  18: 7553855.299 ops/s
# Warmup Iteration  19: 7572605.096 ops/s
# Warmup Iteration  20: 7558886.676 ops/s
# Warmup Iteration  21: 7545309.805 ops/s
# Warmup Iteration  22: 7539907.568 ops/s
# Warmup Iteration  23: 7518452.522 ops/s
# Warmup Iteration  24: 7553382.893 ops/s
# Warmup Iteration  25: 7506018.592 ops/s
# Warmup Iteration  26: 7502295.770 ops/s
# Warmup Iteration  27: 7485643.804 ops/s
# Warmup Iteration  28: 7557806.903 ops/s
# Warmup Iteration  29: 7564046.584 ops/s
# Warmup Iteration  30: 7554588.968 ops/s
Iteration   1: 7567269.712 ops/s
Iteration   2: 7591896.667 ops/s
Iteration   3: 7514499.967 ops/s
Iteration   4: 7435561.427 ops/s
Iteration   5: 7546291.955 ops/s
Iteration   6: 7557691.107 ops/s
Iteration   7: 7594154.698 ops/s
Iteration   8: 7494061.089 ops/s
Iteration   9: 7484981.928 ops/s
Iteration  10: 7543262.936 ops/s
Iteration  11: 7555981.013 ops/s
Iteration  12: 7469507.013 ops/s
Iteration  13: 7497268.183 ops/s
Iteration  14: 7575923.736 ops/s
Iteration  15: 7554489.325 ops/s
Iteration  16: 7604152.103 ops/s
Iteration  17: 7550550.829 ops/s
Iteration  18: 7572367.741 ops/s
Iteration  19: 7551226.708 ops/s
Iteration  20: 7467578.182 ops/s
Iteration  21: 7526804.182 ops/s
Iteration  22: 7504417.144 ops/s
Iteration  23: 7516431.399 ops/s
Iteration  24: 7495726.695 ops/s
Iteration  25: 7532061.466 ops/s
Iteration  26: 7521104.874 ops/s
Iteration  27: 7523669.502 ops/s
Iteration  28: 7522936.945 ops/s
Iteration  29: 7538059.510 ops/s
Iteration  30: 7409186.286 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsAllArray":
  7527303.811 ±(99.9%) 30348.750 ops/s [Average]
  (min, avg, max) = (7409186.286, 7527303.811, 7604152.103), stdev = 45424.583
  CI (99.9%): [7496955.061, 7557652.561] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_containsAllArray  thrpt   30  7527303.811 ± 30348.750  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 602785.508 ops/s
# Warmup Iteration   2: 1391022.018 ops/s
# Warmup Iteration   3: 1157130.524 ops/s
# Warmup Iteration   4: 1386449.336 ops/s
# Warmup Iteration   5: 1384479.785 ops/s
# Warmup Iteration   6: 1378894.415 ops/s
# Warmup Iteration   7: 1381773.062 ops/s
# Warmup Iteration   8: 1383098.183 ops/s
# Warmup Iteration   9: 1377931.934 ops/s
# Warmup Iteration  10: 1385637.791 ops/s
# Warmup Iteration  11: 1385125.583 ops/s
# Warmup Iteration  12: 1364516.312 ops/s
# Warmup Iteration  13: 1372625.849 ops/s
# Warmup Iteration  14: 1384968.193 ops/s
# Warmup Iteration  15: 1388126.183 ops/s
# Warmup Iteration  16: 1386783.532 ops/s
# Warmup Iteration  17: 1375722.835 ops/s
# Warmup Iteration  18: 1386907.659 ops/s
# Warmup Iteration  19: 1386405.345 ops/s
# Warmup Iteration  20: 1377666.295 ops/s
# Warmup Iteration  21: 1383275.285 ops/s
# Warmup Iteration  22: 1388473.064 ops/s
# Warmup Iteration  23: 1379891.919 ops/s
# Warmup Iteration  24: 1376573.613 ops/s
# Warmup Iteration  25: 1378861.075 ops/s
# Warmup Iteration  26: 1387559.135 ops/s
# Warmup Iteration  27: 1383295.024 ops/s
# Warmup Iteration  28: 1388803.754 ops/s
# Warmup Iteration  29: 1385435.781 ops/s
# Warmup Iteration  30: 1380786.154 ops/s
Iteration   1: 1384345.905 ops/s
Iteration   2: 1390942.990 ops/s
Iteration   3: 1382588.750 ops/s
Iteration   4: 1383355.435 ops/s
Iteration   5: 1378783.479 ops/s
Iteration   6: 1393016.705 ops/s
Iteration   7: 1390904.470 ops/s
Iteration   8: 1395016.374 ops/s
Iteration   9: 1391311.132 ops/s
Iteration  10: 1380083.175 ops/s
Iteration  11: 1373491.639 ops/s
Iteration  12: 1388861.378 ops/s
Iteration  13: 1389720.570 ops/s
Iteration  14: 1362071.230 ops/s
Iteration  15: 1376701.381 ops/s
Iteration  16: 1380858.892 ops/s
Iteration  17: 1397206.259 ops/s
Iteration  18: 1365731.996 ops/s
Iteration  19: 1329783.322 ops/s
Iteration  20: 1352714.178 ops/s
Iteration  21: 1373859.880 ops/s
Iteration  22: 1376577.618 ops/s
Iteration  23: 1389084.419 ops/s
Iteration  24: 1383818.291 ops/s
Iteration  25: 1381402.771 ops/s
Iteration  26: 1377768.916 ops/s
Iteration  27: 1382395.766 ops/s
Iteration  28: 1392833.402 ops/s
Iteration  29: 1386683.896 ops/s
Iteration  30: 1380031.083 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsAllIterable":
  1380398.177 ±(99.9%) 9182.497 ops/s [Average]
  (min, avg, max) = (1329783.322, 1380398.177, 1397206.259), stdev = 13743.930
  CI (99.9%): [1371215.680, 1389580.673] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  1380398.177 ± 9182.497  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7598852.920 ops/s
# Warmup Iteration   2: 12345520.203 ops/s
# Warmup Iteration   3: 14592751.352 ops/s
# Warmup Iteration   4: 14611041.647 ops/s
# Warmup Iteration   5: 14583508.812 ops/s
# Warmup Iteration   6: 14565092.227 ops/s
# Warmup Iteration   7: 14590861.003 ops/s
# Warmup Iteration   8: 14476216.969 ops/s
# Warmup Iteration   9: 14577812.521 ops/s
# Warmup Iteration  10: 14590755.909 ops/s
# Warmup Iteration  11: 14621918.827 ops/s
# Warmup Iteration  12: 14666172.114 ops/s
# Warmup Iteration  13: 14526142.919 ops/s
# Warmup Iteration  14: 14375380.937 ops/s
# Warmup Iteration  15: 14540610.495 ops/s
# Warmup Iteration  16: 14370615.420 ops/s
# Warmup Iteration  17: 14624123.789 ops/s
# Warmup Iteration  18: 14375334.368 ops/s
# Warmup Iteration  19: 14630813.834 ops/s
# Warmup Iteration  20: 14541457.711 ops/s
# Warmup Iteration  21: 14500904.206 ops/s
# Warmup Iteration  22: 14464868.481 ops/s
# Warmup Iteration  23: 14637336.252 ops/s
# Warmup Iteration  24: 14630988.347 ops/s
# Warmup Iteration  25: 14517368.898 ops/s
# Warmup Iteration  26: 14530349.411 ops/s
# Warmup Iteration  27: 14511504.382 ops/s
# Warmup Iteration  28: 14571855.056 ops/s
# Warmup Iteration  29: 14525980.145 ops/s
# Warmup Iteration  30: 14392586.340 ops/s
Iteration   1: 14469890.048 ops/s
Iteration   2: 14571628.886 ops/s
Iteration   3: 14612450.711 ops/s
Iteration   4: 14582539.856 ops/s
Iteration   5: 14645937.285 ops/s
Iteration   6: 14302105.833 ops/s
Iteration   7: 14751955.267 ops/s
Iteration   8: 14683622.056 ops/s
Iteration   9: 14556180.240 ops/s
Iteration  10: 14527081.474 ops/s
Iteration  11: 14618379.636 ops/s
Iteration  12: 14637345.360 ops/s
Iteration  13: 14594399.671 ops/s
Iteration  14: 14564423.671 ops/s
Iteration  15: 14560882.611 ops/s
Iteration  16: 14594718.886 ops/s
Iteration  17: 14637043.007 ops/s
Iteration  18: 14127765.253 ops/s
Iteration  19: 14200483.072 ops/s
Iteration  20: 14606026.209 ops/s
Iteration  21: 14631242.212 ops/s
Iteration  22: 14639439.828 ops/s
Iteration  23: 14529053.182 ops/s
Iteration  24: 14675548.760 ops/s
Iteration  25: 14640039.085 ops/s
Iteration  26: 14596763.863 ops/s
Iteration  27: 14500368.850 ops/s
Iteration  28: 14565423.060 ops/s
Iteration  29: 14633617.633 ops/s
Iteration  30: 14525429.215 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsAnyArray":
  14559392.824 ±(99.9%) 89310.861 ops/s [Average]
  (min, avg, max) = (14127765.253, 14559392.824, 14751955.267), stdev = 133676.302
  CI (99.9%): [14470081.963, 14648703.684] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_containsAnyArray  thrpt   30  14559392.824 ± 89310.861  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 772811.917 ops/s
# Warmup Iteration   2: 1096232.417 ops/s
# Warmup Iteration   3: 1294112.968 ops/s
# Warmup Iteration   4: 1295836.946 ops/s
# Warmup Iteration   5: 1294404.338 ops/s
# Warmup Iteration   6: 1287378.649 ops/s
# Warmup Iteration   7: 1073464.492 ops/s
# Warmup Iteration   8: 1292105.625 ops/s
# Warmup Iteration   9: 1290611.740 ops/s
# Warmup Iteration  10: 1288624.789 ops/s
# Warmup Iteration  11: 1292113.706 ops/s
# Warmup Iteration  12: 1292565.345 ops/s
# Warmup Iteration  13: 1290785.069 ops/s
# Warmup Iteration  14: 1296708.133 ops/s
# Warmup Iteration  15: 1281487.503 ops/s
# Warmup Iteration  16: 1288796.889 ops/s
# Warmup Iteration  17: 1287208.008 ops/s
# Warmup Iteration  18: 1293006.360 ops/s
# Warmup Iteration  19: 1297583.796 ops/s
# Warmup Iteration  20: 1294413.864 ops/s
# Warmup Iteration  21: 1300655.678 ops/s
# Warmup Iteration  22: 1293853.291 ops/s
# Warmup Iteration  23: 1293742.957 ops/s
# Warmup Iteration  24: 1294743.397 ops/s
# Warmup Iteration  25: 1296288.790 ops/s
# Warmup Iteration  26: 1297093.062 ops/s
# Warmup Iteration  27: 1286714.797 ops/s
# Warmup Iteration  28: 1289298.028 ops/s
# Warmup Iteration  29: 1297736.281 ops/s
# Warmup Iteration  30: 1295802.091 ops/s
Iteration   1: 1295533.484 ops/s
Iteration   2: 1290717.817 ops/s
Iteration   3: 1298678.034 ops/s
Iteration   4: 1299413.135 ops/s
Iteration   5: 1290096.527 ops/s
Iteration   6: 1295518.461 ops/s
Iteration   7: 1296626.123 ops/s
Iteration   8: 1284677.492 ops/s
Iteration   9: 1275065.758 ops/s
Iteration  10: 1296147.806 ops/s
Iteration  11: 1296140.320 ops/s
Iteration  12: 1292573.924 ops/s
Iteration  13: 1285212.669 ops/s
Iteration  14: 1283246.475 ops/s
Iteration  15: 1295705.998 ops/s
Iteration  16: 1288081.656 ops/s
Iteration  17: 1293334.240 ops/s
Iteration  18: 1286072.922 ops/s
Iteration  19: 1303396.456 ops/s
Iteration  20: 1299084.252 ops/s
Iteration  21: 1297503.623 ops/s
Iteration  22: 1295842.718 ops/s
Iteration  23: 1300575.228 ops/s
Iteration  24: 1302127.609 ops/s
Iteration  25: 1291585.092 ops/s
Iteration  26: 1296204.519 ops/s
Iteration  27: 1297073.165 ops/s
Iteration  28: 1299047.587 ops/s
Iteration  29: 1294340.676 ops/s
Iteration  30: 1292849.199 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsAnyIterable":
  1293749.099 ±(99.9%) 4158.947 ops/s [Average]
  (min, avg, max) = (1275065.758, 1293749.099, 1303396.456), stdev = 6224.917
  CI (99.9%): [1289590.151, 1297908.046] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1293749.099 ± 4158.947  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7663665.211 ops/s
# Warmup Iteration   2: 12407419.449 ops/s
# Warmup Iteration   3: 14391894.387 ops/s
# Warmup Iteration   4: 14417568.043 ops/s
# Warmup Iteration   5: 14232902.729 ops/s
# Warmup Iteration   6: 14308516.091 ops/s
# Warmup Iteration   7: 14465495.760 ops/s
# Warmup Iteration   8: 14306789.679 ops/s
# Warmup Iteration   9: 14467887.523 ops/s
# Warmup Iteration  10: 14500328.661 ops/s
# Warmup Iteration  11: 14492168.456 ops/s
# Warmup Iteration  12: 14525565.544 ops/s
# Warmup Iteration  13: 14501534.841 ops/s
# Warmup Iteration  14: 14441974.797 ops/s
# Warmup Iteration  15: 14397582.266 ops/s
# Warmup Iteration  16: 14487556.079 ops/s
# Warmup Iteration  17: 14418460.285 ops/s
# Warmup Iteration  18: 14248815.536 ops/s
# Warmup Iteration  19: 14495758.639 ops/s
# Warmup Iteration  20: 14346145.120 ops/s
# Warmup Iteration  21: 14369448.501 ops/s
# Warmup Iteration  22: 14404517.777 ops/s
# Warmup Iteration  23: 14392488.534 ops/s
# Warmup Iteration  24: 14286829.873 ops/s
# Warmup Iteration  25: 14466977.584 ops/s
# Warmup Iteration  26: 14506931.644 ops/s
# Warmup Iteration  27: 14450879.811 ops/s
# Warmup Iteration  28: 14445360.043 ops/s
# Warmup Iteration  29: 14405956.441 ops/s
# Warmup Iteration  30: 14355305.344 ops/s
Iteration   1: 14373944.274 ops/s
Iteration   2: 14483624.001 ops/s
Iteration   3: 14559760.736 ops/s
Iteration   4: 14478484.840 ops/s
Iteration   5: 14282719.543 ops/s
Iteration   6: 14403552.807 ops/s
Iteration   7: 14179380.265 ops/s
Iteration   8: 14529269.411 ops/s
Iteration   9: 14525519.328 ops/s
Iteration  10: 14497809.072 ops/s
Iteration  11: 14503702.086 ops/s
Iteration  12: 14415630.452 ops/s
Iteration  13: 14447104.701 ops/s
Iteration  14: 14498300.786 ops/s
Iteration  15: 14311024.575 ops/s
Iteration  16: 14522430.421 ops/s
Iteration  17: 14469541.775 ops/s
Iteration  18: 14539241.488 ops/s
Iteration  19: 14460519.150 ops/s
Iteration  20: 14488100.116 ops/s
Iteration  21: 14515542.508 ops/s
Iteration  22: 14540868.465 ops/s
Iteration  23: 14481639.780 ops/s
Iteration  24: 14403600.433 ops/s
Iteration  25: 14415277.608 ops/s
Iteration  26: 14490314.528 ops/s
Iteration  27: 14520733.332 ops/s
Iteration  28: 14538260.941 ops/s
Iteration  29: 14438756.691 ops/s
Iteration  30: 14519427.112 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsNoneArray":
  14461136.041 ±(99.9%) 56969.383 ops/s [Average]
  (min, avg, max) = (14179380.265, 14461136.041, 14559760.736), stdev = 85269.098
  CI (99.9%): [14404166.657, 14518105.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_containsNoneArray  thrpt   30  14461136.041 ± 56969.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 714852.582 ops/s
# Warmup Iteration   2: 997857.170 ops/s
# Warmup Iteration   3: 1180686.991 ops/s
# Warmup Iteration   4: 1178589.165 ops/s
# Warmup Iteration   5: 1178972.194 ops/s
# Warmup Iteration   6: 1168253.994 ops/s
# Warmup Iteration   7: 1048489.424 ops/s
# Warmup Iteration   8: 1111910.822 ops/s
# Warmup Iteration   9: 1182971.006 ops/s
# Warmup Iteration  10: 1176801.868 ops/s
# Warmup Iteration  11: 1172186.006 ops/s
# Warmup Iteration  12: 1174022.538 ops/s
# Warmup Iteration  13: 1183163.919 ops/s
# Warmup Iteration  14: 1181668.336 ops/s
# Warmup Iteration  15: 1184551.766 ops/s
# Warmup Iteration  16: 1183743.244 ops/s
# Warmup Iteration  17: 1182827.355 ops/s
# Warmup Iteration  18: 1179389.542 ops/s
# Warmup Iteration  19: 1174640.942 ops/s
# Warmup Iteration  20: 1182189.201 ops/s
# Warmup Iteration  21: 1179783.725 ops/s
# Warmup Iteration  22: 1188307.170 ops/s
# Warmup Iteration  23: 1175562.350 ops/s
# Warmup Iteration  24: 1185820.787 ops/s
# Warmup Iteration  25: 1187967.338 ops/s
# Warmup Iteration  26: 1187895.566 ops/s
# Warmup Iteration  27: 1186777.252 ops/s
# Warmup Iteration  28: 1184889.796 ops/s
# Warmup Iteration  29: 1171635.191 ops/s
# Warmup Iteration  30: 1185132.225 ops/s
Iteration   1: 1172995.453 ops/s
Iteration   2: 1165144.640 ops/s
Iteration   3: 1180213.776 ops/s
Iteration   4: 1179887.958 ops/s
Iteration   5: 1166156.674 ops/s
Iteration   6: 1169654.660 ops/s
Iteration   7: 1188847.114 ops/s
Iteration   8: 1188377.679 ops/s
Iteration   9: 1181871.640 ops/s
Iteration  10: 1166663.049 ops/s
Iteration  11: 1185744.356 ops/s
Iteration  12: 1145641.060 ops/s
Iteration  13: 1182538.723 ops/s
Iteration  14: 1164372.234 ops/s
Iteration  15: 1187456.048 ops/s
Iteration  16: 1181032.189 ops/s
Iteration  17: 1189034.454 ops/s
Iteration  18: 1183181.428 ops/s
Iteration  19: 1184917.386 ops/s
Iteration  20: 1181876.281 ops/s
Iteration  21: 1183416.395 ops/s
Iteration  22: 1191282.759 ops/s
Iteration  23: 1185213.195 ops/s
Iteration  24: 1180723.966 ops/s
Iteration  25: 1181015.761 ops/s
Iteration  26: 1181953.829 ops/s
Iteration  27: 1186936.536 ops/s
Iteration  28: 1181541.914 ops/s
Iteration  29: 1178569.786 ops/s
Iteration  30: 1180070.181 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_containsNoneIterable":
  1179211.038 ±(99.9%) 6498.949 ops/s [Average]
  (min, avg, max) = (1145641.060, 1179211.038, 1191282.759), stdev = 9727.322
  CI (99.9%): [1172712.088, 1185709.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1179211.038 ± 6498.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2918004.025 ops/s
# Warmup Iteration   2: 6281883.537 ops/s
# Warmup Iteration   3: 6302385.800 ops/s
# Warmup Iteration   4: 5454427.262 ops/s
# Warmup Iteration   5: 6077169.660 ops/s
# Warmup Iteration   6: 6312623.023 ops/s
# Warmup Iteration   7: 6326012.755 ops/s
# Warmup Iteration   8: 6328257.887 ops/s
# Warmup Iteration   9: 6268905.899 ops/s
# Warmup Iteration  10: 6281694.536 ops/s
# Warmup Iteration  11: 6314691.477 ops/s
# Warmup Iteration  12: 6324898.998 ops/s
# Warmup Iteration  13: 6311298.732 ops/s
# Warmup Iteration  14: 6255760.459 ops/s
# Warmup Iteration  15: 6320851.733 ops/s
# Warmup Iteration  16: 6238080.457 ops/s
# Warmup Iteration  17: 6304244.015 ops/s
# Warmup Iteration  18: 6332368.628 ops/s
# Warmup Iteration  19: 6303931.831 ops/s
# Warmup Iteration  20: 6237758.683 ops/s
# Warmup Iteration  21: 6270010.173 ops/s
# Warmup Iteration  22: 6315918.362 ops/s
# Warmup Iteration  23: 6317842.965 ops/s
# Warmup Iteration  24: 6316276.952 ops/s
# Warmup Iteration  25: 6309943.013 ops/s
# Warmup Iteration  26: 6321958.517 ops/s
# Warmup Iteration  27: 6289052.925 ops/s
# Warmup Iteration  28: 6344423.750 ops/s
# Warmup Iteration  29: 6300090.860 ops/s
# Warmup Iteration  30: 6342884.351 ops/s
Iteration   1: 6324648.600 ops/s
Iteration   2: 6313831.580 ops/s
Iteration   3: 6325245.903 ops/s
Iteration   4: 6296555.509 ops/s
Iteration   5: 6310536.037 ops/s
Iteration   6: 6326395.790 ops/s
Iteration   7: 6279511.054 ops/s
Iteration   8: 6326835.324 ops/s
Iteration   9: 6308340.230 ops/s
Iteration  10: 6309879.299 ops/s
Iteration  11: 6309894.935 ops/s
Iteration  12: 6329396.876 ops/s
Iteration  13: 6296955.990 ops/s
Iteration  14: 6342938.913 ops/s
Iteration  15: 6317780.409 ops/s
Iteration  16: 6233286.054 ops/s
Iteration  17: 6306238.423 ops/s
Iteration  18: 6235996.459 ops/s
Iteration  19: 6346328.918 ops/s
Iteration  20: 6315840.695 ops/s
Iteration  21: 6315178.051 ops/s
Iteration  22: 6337839.612 ops/s
Iteration  23: 6328062.208 ops/s
Iteration  24: 6339058.667 ops/s
Iteration  25: 6325815.514 ops/s
Iteration  26: 6333768.648 ops/s
Iteration  27: 6340592.692 ops/s
Iteration  28: 6337237.382 ops/s
Iteration  29: 6306583.556 ops/s
Iteration  30: 6315102.887 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_count":
  6314522.541 ±(99.9%) 17736.730 ops/s [Average]
  (min, avg, max) = (6233286.054, 6314522.541, 6346328.918), stdev = 26547.504
  CI (99.9%): [6296785.811, 6332259.271] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_count  thrpt   30  6314522.541 ± 17736.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4350429.605 ops/s
# Warmup Iteration   2: 9573071.388 ops/s
# Warmup Iteration   3: 9016642.089 ops/s
# Warmup Iteration   4: 8268255.834 ops/s
# Warmup Iteration   5: 9315627.531 ops/s
# Warmup Iteration   6: 9424457.953 ops/s
# Warmup Iteration   7: 9405936.383 ops/s
# Warmup Iteration   8: 9384559.171 ops/s
# Warmup Iteration   9: 9408953.180 ops/s
# Warmup Iteration  10: 9362179.826 ops/s
# Warmup Iteration  11: 9423227.599 ops/s
# Warmup Iteration  12: 9411153.604 ops/s
# Warmup Iteration  13: 9417527.341 ops/s
# Warmup Iteration  14: 9394051.183 ops/s
# Warmup Iteration  15: 9441675.336 ops/s
# Warmup Iteration  16: 9431566.199 ops/s
# Warmup Iteration  17: 9414359.201 ops/s
# Warmup Iteration  18: 9448877.193 ops/s
# Warmup Iteration  19: 9425892.830 ops/s
# Warmup Iteration  20: 9420901.994 ops/s
# Warmup Iteration  21: 9342539.622 ops/s
# Warmup Iteration  22: 9451112.804 ops/s
# Warmup Iteration  23: 9460273.199 ops/s
# Warmup Iteration  24: 9452981.056 ops/s
# Warmup Iteration  25: 9416977.188 ops/s
# Warmup Iteration  26: 9438578.556 ops/s
# Warmup Iteration  27: 9384531.917 ops/s
# Warmup Iteration  28: 9328376.711 ops/s
# Warmup Iteration  29: 9402432.118 ops/s
# Warmup Iteration  30: 9395974.518 ops/s
Iteration   1: 9452628.926 ops/s
Iteration   2: 9393233.128 ops/s
Iteration   3: 9398448.270 ops/s
Iteration   4: 9401442.023 ops/s
Iteration   5: 9285305.745 ops/s
Iteration   6: 9483078.071 ops/s
Iteration   7: 9456034.552 ops/s
Iteration   8: 9286025.387 ops/s
Iteration   9: 9425656.656 ops/s
Iteration  10: 9428270.913 ops/s
Iteration  11: 9478460.924 ops/s
Iteration  12: 9386801.113 ops/s
Iteration  13: 9433541.416 ops/s
Iteration  14: 9313134.121 ops/s
Iteration  15: 9377432.221 ops/s
Iteration  16: 9408684.131 ops/s
Iteration  17: 9387516.554 ops/s
Iteration  18: 9458026.407 ops/s
Iteration  19: 9455090.150 ops/s
Iteration  20: 9362217.449 ops/s
Iteration  21: 9414032.335 ops/s
Iteration  22: 9432632.017 ops/s
Iteration  23: 9435228.100 ops/s
Iteration  24: 9447459.948 ops/s
Iteration  25: 9412474.824 ops/s
Iteration  26: 9468202.333 ops/s
Iteration  27: 9438041.227 ops/s
Iteration  28: 9425061.837 ops/s
Iteration  29: 9395487.026 ops/s
Iteration  30: 9377038.561 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_detectIfNone":
  9410556.212 ±(99.9%) 33492.554 ops/s [Average]
  (min, avg, max) = (9285305.745, 9410556.212, 9483078.071), stdev = 50130.082
  CI (99.9%): [9377063.658, 9444048.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_detectIfNone  thrpt   30  9410556.212 ± 33492.554  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3626880.613 ops/s
# Warmup Iteration   2: 6289982.862 ops/s
# Warmup Iteration   3: 7398875.128 ops/s
# Warmup Iteration   4: 7445577.925 ops/s
# Warmup Iteration   5: 7392959.045 ops/s
# Warmup Iteration   6: 7441841.681 ops/s
# Warmup Iteration   7: 7412154.735 ops/s
# Warmup Iteration   8: 7400143.056 ops/s
# Warmup Iteration   9: 7380395.615 ops/s
# Warmup Iteration  10: 7421999.050 ops/s
# Warmup Iteration  11: 7443122.167 ops/s
# Warmup Iteration  12: 7426582.421 ops/s
# Warmup Iteration  13: 7392345.774 ops/s
# Warmup Iteration  14: 7411853.445 ops/s
# Warmup Iteration  15: 7426980.755 ops/s
# Warmup Iteration  16: 7421845.629 ops/s
# Warmup Iteration  17: 7425751.426 ops/s
# Warmup Iteration  18: 7389618.994 ops/s
# Warmup Iteration  19: 7416005.901 ops/s
# Warmup Iteration  20: 7361744.639 ops/s
# Warmup Iteration  21: 7438915.664 ops/s
# Warmup Iteration  22: 7428452.244 ops/s
# Warmup Iteration  23: 7349032.637 ops/s
# Warmup Iteration  24: 7343804.957 ops/s
# Warmup Iteration  25: 7396760.168 ops/s
# Warmup Iteration  26: 7398283.883 ops/s
# Warmup Iteration  27: 7450175.873 ops/s
# Warmup Iteration  28: 7397142.129 ops/s
# Warmup Iteration  29: 7435481.413 ops/s
# Warmup Iteration  30: 7395014.129 ops/s
Iteration   1: 7459721.108 ops/s
Iteration   2: 7440553.739 ops/s
Iteration   3: 7439802.522 ops/s
Iteration   4: 7449517.319 ops/s
Iteration   5: 7445023.589 ops/s
Iteration   6: 7438614.567 ops/s
Iteration   7: 7449243.987 ops/s
Iteration   8: 7350761.564 ops/s
Iteration   9: 7430163.959 ops/s
Iteration  10: 7439496.205 ops/s
Iteration  11: 7377805.037 ops/s
Iteration  12: 7413357.448 ops/s
Iteration  13: 7281201.242 ops/s
Iteration  14: 7468763.762 ops/s
Iteration  15: 7366472.850 ops/s
Iteration  16: 7477622.336 ops/s
Iteration  17: 7406241.111 ops/s
Iteration  18: 7450061.123 ops/s
Iteration  19: 7355911.205 ops/s
Iteration  20: 7473934.375 ops/s
Iteration  21: 7459047.738 ops/s
Iteration  22: 7432084.491 ops/s
Iteration  23: 7455207.766 ops/s
Iteration  24: 7408059.437 ops/s
Iteration  25: 7462847.976 ops/s
Iteration  26: 7398720.760 ops/s
Iteration  27: 7449650.744 ops/s
Iteration  28: 7469614.815 ops/s
Iteration  29: 7431326.726 ops/s
Iteration  30: 7459360.943 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_distinct":
  7428006.348 ±(99.9%) 29507.814 ops/s [Average]
  (min, avg, max) = (7281201.242, 7428006.348, 7477622.336), stdev = 44165.909
  CI (99.9%): [7398498.535, 7457514.162] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_distinct  thrpt   30  7428006.348 ± 29507.814  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2628749.485 ops/s
# Warmup Iteration   2: 5506792.205 ops/s
# Warmup Iteration   3: 4759121.475 ops/s
# Warmup Iteration   4: 5672927.024 ops/s
# Warmup Iteration   5: 5634522.659 ops/s
# Warmup Iteration   6: 5649729.135 ops/s
# Warmup Iteration   7: 5666124.873 ops/s
# Warmup Iteration   8: 5688034.502 ops/s
# Warmup Iteration   9: 5697656.699 ops/s
# Warmup Iteration  10: 5679943.032 ops/s
# Warmup Iteration  11: 5584398.074 ops/s
# Warmup Iteration  12: 5629227.704 ops/s
# Warmup Iteration  13: 5677169.383 ops/s
# Warmup Iteration  14: 5644247.489 ops/s
# Warmup Iteration  15: 5656515.179 ops/s
# Warmup Iteration  16: 5635119.413 ops/s
# Warmup Iteration  17: 5660721.973 ops/s
# Warmup Iteration  18: 5656880.779 ops/s
# Warmup Iteration  19: 5685127.785 ops/s
# Warmup Iteration  20: 5655022.843 ops/s
# Warmup Iteration  21: 5653640.215 ops/s
# Warmup Iteration  22: 5663803.596 ops/s
# Warmup Iteration  23: 5672703.748 ops/s
# Warmup Iteration  24: 5652101.014 ops/s
# Warmup Iteration  25: 5663583.876 ops/s
# Warmup Iteration  26: 5673430.806 ops/s
# Warmup Iteration  27: 5642701.619 ops/s
# Warmup Iteration  28: 5677958.854 ops/s
# Warmup Iteration  29: 5697273.240 ops/s
# Warmup Iteration  30: 5668057.757 ops/s
Iteration   1: 5661317.524 ops/s
Iteration   2: 5651593.108 ops/s
Iteration   3: 5687082.118 ops/s
Iteration   4: 5669269.071 ops/s
Iteration   5: 5704531.394 ops/s
Iteration   6: 5687648.905 ops/s
Iteration   7: 5674867.147 ops/s
Iteration   8: 5655127.840 ops/s
Iteration   9: 5536404.132 ops/s
Iteration  10: 5674230.512 ops/s
Iteration  11: 5678465.145 ops/s
Iteration  12: 5700411.281 ops/s
Iteration  13: 5677017.865 ops/s
Iteration  14: 5704031.939 ops/s
Iteration  15: 5658801.658 ops/s
Iteration  16: 5676823.233 ops/s
Iteration  17: 5618429.833 ops/s
Iteration  18: 5638290.124 ops/s
Iteration  19: 5628878.873 ops/s
Iteration  20: 5598234.448 ops/s
Iteration  21: 5669321.035 ops/s
Iteration  22: 5605121.022 ops/s
Iteration  23: 5704754.854 ops/s
Iteration  24: 5481347.133 ops/s
Iteration  25: 5622387.117 ops/s
Iteration  26: 5519013.876 ops/s
Iteration  27: 5679600.609 ops/s
Iteration  28: 5657593.172 ops/s
Iteration  29: 5631040.297 ops/s
Iteration  30: 5657274.074 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_forEach":
  5646963.645 ±(99.9%) 36230.558 ops/s [Average]
  (min, avg, max) = (5481347.133, 5646963.645, 5704754.854), stdev = 54228.198
  CI (99.9%): [5610733.087, 5683194.203] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_forEach  thrpt   30  5646963.645 ± 36230.558  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2482834.885 ops/s
# Warmup Iteration   2: 5268888.342 ops/s
# Warmup Iteration   3: 4435974.114 ops/s
# Warmup Iteration   4: 5244574.175 ops/s
# Warmup Iteration   5: 5187321.360 ops/s
# Warmup Iteration   6: 5257898.417 ops/s
# Warmup Iteration   7: 5276283.351 ops/s
# Warmup Iteration   8: 5238794.453 ops/s
# Warmup Iteration   9: 5224361.773 ops/s
# Warmup Iteration  10: 5302116.484 ops/s
# Warmup Iteration  11: 5293319.865 ops/s
# Warmup Iteration  12: 5275464.420 ops/s
# Warmup Iteration  13: 5322789.235 ops/s
# Warmup Iteration  14: 5303831.132 ops/s
# Warmup Iteration  15: 5305770.452 ops/s
# Warmup Iteration  16: 5290739.843 ops/s
# Warmup Iteration  17: 5296680.285 ops/s
# Warmup Iteration  18: 5240760.184 ops/s
# Warmup Iteration  19: 5296670.298 ops/s
# Warmup Iteration  20: 5284233.783 ops/s
# Warmup Iteration  21: 5276662.557 ops/s
# Warmup Iteration  22: 5308645.719 ops/s
# Warmup Iteration  23: 5264022.044 ops/s
# Warmup Iteration  24: 5289264.115 ops/s
# Warmup Iteration  25: 5305907.378 ops/s
# Warmup Iteration  26: 5287018.836 ops/s
# Warmup Iteration  27: 5277649.347 ops/s
# Warmup Iteration  28: 5324195.685 ops/s
# Warmup Iteration  29: 5270808.818 ops/s
# Warmup Iteration  30: 5252583.234 ops/s
Iteration   1: 5224681.284 ops/s
Iteration   2: 5275028.004 ops/s
Iteration   3: 5287878.914 ops/s
Iteration   4: 5331978.454 ops/s
Iteration   5: 5278110.304 ops/s
Iteration   6: 5275651.905 ops/s
Iteration   7: 5247585.142 ops/s
Iteration   8: 5207145.009 ops/s
Iteration   9: 5252459.309 ops/s
Iteration  10: 5282003.194 ops/s
Iteration  11: 5263282.583 ops/s
Iteration  12: 5218446.149 ops/s
Iteration  13: 5276453.289 ops/s
Iteration  14: 5268307.703 ops/s
Iteration  15: 5295246.277 ops/s
Iteration  16: 5245669.870 ops/s
Iteration  17: 5295565.166 ops/s
Iteration  18: 5266270.215 ops/s
Iteration  19: 5269326.721 ops/s
Iteration  20: 5281890.104 ops/s
Iteration  21: 5307138.685 ops/s
Iteration  22: 5262820.544 ops/s
Iteration  23: 5280345.571 ops/s
Iteration  24: 5226755.172 ops/s
Iteration  25: 5309228.952 ops/s
Iteration  26: 5287443.844 ops/s
Iteration  27: 5294633.151 ops/s
Iteration  28: 5307793.636 ops/s
Iteration  29: 5301763.865 ops/s
Iteration  30: 5311393.463 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_forEachWithIndex":
  5274409.883 ±(99.9%) 19793.806 ops/s [Average]
  (min, avg, max) = (5207145.009, 5274409.883, 5331978.454), stdev = 29626.439
  CI (99.9%): [5254616.077, 5294203.689] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  5274409.883 ± 19793.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10626154.402 ops/s
# Warmup Iteration   2: 23148195.215 ops/s
# Warmup Iteration   3: 19253382.827 ops/s
# Warmup Iteration   4: 23133394.749 ops/s
# Warmup Iteration   5: 23149650.931 ops/s
# Warmup Iteration   6: 23113460.965 ops/s
# Warmup Iteration   7: 23196001.716 ops/s
# Warmup Iteration   8: 23311186.344 ops/s
# Warmup Iteration   9: 23260766.593 ops/s
# Warmup Iteration  10: 23243137.823 ops/s
# Warmup Iteration  11: 23233276.071 ops/s
# Warmup Iteration  12: 23141430.254 ops/s
# Warmup Iteration  13: 23276366.449 ops/s
# Warmup Iteration  14: 23116526.895 ops/s
# Warmup Iteration  15: 23152931.018 ops/s
# Warmup Iteration  16: 23225818.852 ops/s
# Warmup Iteration  17: 23268410.988 ops/s
# Warmup Iteration  18: 23234223.797 ops/s
# Warmup Iteration  19: 22959094.749 ops/s
# Warmup Iteration  20: 23255541.555 ops/s
# Warmup Iteration  21: 23063895.394 ops/s
# Warmup Iteration  22: 23112433.615 ops/s
# Warmup Iteration  23: 23198396.151 ops/s
# Warmup Iteration  24: 23091628.356 ops/s
# Warmup Iteration  25: 22968261.558 ops/s
# Warmup Iteration  26: 23160053.832 ops/s
# Warmup Iteration  27: 23242796.065 ops/s
# Warmup Iteration  28: 23104859.894 ops/s
# Warmup Iteration  29: 23297863.153 ops/s
# Warmup Iteration  30: 23072539.303 ops/s
Iteration   1: 23240029.046 ops/s
Iteration   2: 23257409.287 ops/s
Iteration   3: 23232439.043 ops/s
Iteration   4: 22977766.154 ops/s
Iteration   5: 23093249.094 ops/s
Iteration   6: 23186503.489 ops/s
Iteration   7: 23229964.545 ops/s
Iteration   8: 22928351.865 ops/s
Iteration   9: 23131974.423 ops/s
Iteration  10: 23224377.147 ops/s
Iteration  11: 23222419.598 ops/s
Iteration  12: 23068633.564 ops/s
Iteration  13: 23321198.847 ops/s
Iteration  14: 23187438.223 ops/s
Iteration  15: 23158522.107 ops/s
Iteration  16: 23273158.643 ops/s
Iteration  17: 23197352.606 ops/s
Iteration  18: 23175968.909 ops/s
Iteration  19: 23217407.309 ops/s
Iteration  20: 23225673.692 ops/s
Iteration  21: 23270489.103 ops/s
Iteration  22: 23364382.489 ops/s
Iteration  23: 23181274.904 ops/s
Iteration  24: 23015564.294 ops/s
Iteration  25: 23184871.988 ops/s
Iteration  26: 23177625.323 ops/s
Iteration  27: 23081034.809 ops/s
Iteration  28: 23226998.343 ops/s
Iteration  29: 23138169.041 ops/s
Iteration  30: 23284066.342 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_get":
  23182477.141 ±(99.9%) 64669.147 ops/s [Average]
  (min, avg, max) = (22928351.865, 23182477.141, 23364382.489), stdev = 96793.742
  CI (99.9%): [23117807.994, 23247146.288] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_get  thrpt   30  23182477.141 ± 64669.147  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7220302.501 ops/s
# Warmup Iteration   2: 16186919.255 ops/s
# Warmup Iteration   3: 13012019.304 ops/s
# Warmup Iteration   4: 16192596.306 ops/s
# Warmup Iteration   5: 16284869.486 ops/s
# Warmup Iteration   6: 16153017.568 ops/s
# Warmup Iteration   7: 16212149.567 ops/s
# Warmup Iteration   8: 16236212.139 ops/s
# Warmup Iteration   9: 16278255.649 ops/s
# Warmup Iteration  10: 16216268.205 ops/s
# Warmup Iteration  11: 16113609.379 ops/s
# Warmup Iteration  12: 16258760.740 ops/s
# Warmup Iteration  13: 16273085.468 ops/s
# Warmup Iteration  14: 16257269.284 ops/s
# Warmup Iteration  15: 16225715.192 ops/s
# Warmup Iteration  16: 16146520.580 ops/s
# Warmup Iteration  17: 16166736.762 ops/s
# Warmup Iteration  18: 16325579.922 ops/s
# Warmup Iteration  19: 16310617.515 ops/s
# Warmup Iteration  20: 16227320.716 ops/s
# Warmup Iteration  21: 16388245.281 ops/s
# Warmup Iteration  22: 16273658.903 ops/s
# Warmup Iteration  23: 16304667.000 ops/s
# Warmup Iteration  24: 16197658.786 ops/s
# Warmup Iteration  25: 16255019.681 ops/s
# Warmup Iteration  26: 16210482.672 ops/s
# Warmup Iteration  27: 16319859.760 ops/s
# Warmup Iteration  28: 16314465.917 ops/s
# Warmup Iteration  29: 16265776.756 ops/s
# Warmup Iteration  30: 16271942.719 ops/s
Iteration   1: 16314046.325 ops/s
Iteration   2: 16290340.938 ops/s
Iteration   3: 16306481.077 ops/s
Iteration   4: 16244215.593 ops/s
Iteration   5: 16252134.216 ops/s
Iteration   6: 16223882.522 ops/s
Iteration   7: 16312602.925 ops/s
Iteration   8: 16078795.095 ops/s
Iteration   9: 16288207.788 ops/s
Iteration  10: 16268570.134 ops/s
Iteration  11: 16256348.499 ops/s
Iteration  12: 16277743.645 ops/s
Iteration  13: 15950247.064 ops/s
Iteration  14: 16165996.883 ops/s
Iteration  15: 16198671.323 ops/s
Iteration  16: 16207974.626 ops/s
Iteration  17: 16270857.736 ops/s
Iteration  18: 16259241.274 ops/s
Iteration  19: 16203791.827 ops/s
Iteration  20: 16226867.618 ops/s
Iteration  21: 16024080.026 ops/s
Iteration  22: 16332314.491 ops/s
Iteration  23: 16335309.997 ops/s
Iteration  24: 16084223.988 ops/s
Iteration  25: 16200981.480 ops/s
Iteration  26: 16370444.924 ops/s
Iteration  27: 16210930.198 ops/s
Iteration  28: 16345879.330 ops/s
Iteration  29: 16238617.338 ops/s
Iteration  30: 16389073.396 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_getFirst":
  16237629.076 ±(99.9%) 66240.754 ops/s [Average]
  (min, avg, max) = (15950247.064, 16237629.076, 16389073.396), stdev = 99146.050
  CI (99.9%): [16171388.322, 16303869.830] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_getFirst  thrpt   30  16237629.076 ± 66240.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_getFirst_emptyList_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_getFirst_emptyList_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710738.205 ops/s
# Warmup Iteration   2: 725869.912 ops/s
# Warmup Iteration   3: 962867.950 ops/s
# Warmup Iteration   4: 964626.440 ops/s
# Warmup Iteration   5: 968131.427 ops/s
# Warmup Iteration   6: 965236.887 ops/s
# Warmup Iteration   7: 961769.240 ops/s
# Warmup Iteration   8: 953924.108 ops/s
# Warmup Iteration   9: 967046.307 ops/s
# Warmup Iteration  10: 964255.890 ops/s
# Warmup Iteration  11: 932216.961 ops/s
# Warmup Iteration  12: 845373.189 ops/s
# Warmup Iteration  13: 956411.386 ops/s
# Warmup Iteration  14: 952691.804 ops/s
# Warmup Iteration  15: 960954.215 ops/s
# Warmup Iteration  16: 962037.120 ops/s
# Warmup Iteration  17: 994693.971 ops/s
# Warmup Iteration  18: 998529.648 ops/s
# Warmup Iteration  19: 1001671.384 ops/s
# Warmup Iteration  20: 1005960.907 ops/s
# Warmup Iteration  21: 1010777.621 ops/s
# Warmup Iteration  22: 1007004.595 ops/s
# Warmup Iteration  23: 1004541.109 ops/s
# Warmup Iteration  24: 1006492.036 ops/s
# Warmup Iteration  25: 998183.456 ops/s
# Warmup Iteration  26: 1000035.763 ops/s
# Warmup Iteration  27: 1005169.379 ops/s
# Warmup Iteration  28: 1007235.980 ops/s
# Warmup Iteration  29: 1008861.258 ops/s
# Warmup Iteration  30: 1000016.869 ops/s
Iteration   1: 1012128.671 ops/s
Iteration   2: 1001177.902 ops/s
Iteration   3: 1010539.650 ops/s
Iteration   4: 1009669.612 ops/s
Iteration   5: 1004559.434 ops/s
Iteration   6: 1005813.276 ops/s
Iteration   7: 1009989.450 ops/s
Iteration   8: 1007787.880 ops/s
Iteration   9: 1009809.444 ops/s
Iteration  10: 999145.645 ops/s
Iteration  11: 1004020.354 ops/s
Iteration  12: 989822.394 ops/s
Iteration  13: 1010800.939 ops/s
Iteration  14: 1004651.410 ops/s
Iteration  15: 1002343.509 ops/s
Iteration  16: 992299.273 ops/s
Iteration  17: 999381.397 ops/s
Iteration  18: 1012280.163 ops/s
Iteration  19: 998036.762 ops/s
Iteration  20: 1009775.726 ops/s
Iteration  21: 1009596.066 ops/s
Iteration  22: 989772.962 ops/s
Iteration  23: 1009981.342 ops/s
Iteration  24: 1013840.067 ops/s
Iteration  25: 1008526.291 ops/s
Iteration  26: 1010294.193 ops/s
Iteration  27: 1009520.899 ops/s
Iteration  28: 1002984.199 ops/s
Iteration  29: 1011728.998 ops/s
Iteration  30: 1011654.233 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_getFirst_emptyList_throws":
  1005731.071 ±(99.9%) 4460.500 ops/s [Average]
  (min, avg, max) = (989772.962, 1005731.071, 1013840.067), stdev = 6676.266
  CI (99.9%): [1001270.572, 1010191.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_getFirst_emptyList_throws  thrpt   30  1005731.071 ± 4460.500  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9595860.111 ops/s
# Warmup Iteration   2: 15765281.921 ops/s
# Warmup Iteration   3: 17297331.844 ops/s
# Warmup Iteration   4: 18004870.667 ops/s
# Warmup Iteration   5: 18051166.175 ops/s
# Warmup Iteration   6: 18068491.365 ops/s
# Warmup Iteration   7: 18090261.107 ops/s
# Warmup Iteration   8: 17988067.226 ops/s
# Warmup Iteration   9: 17991844.751 ops/s
# Warmup Iteration  10: 18015851.163 ops/s
# Warmup Iteration  11: 17989377.394 ops/s
# Warmup Iteration  12: 17618954.632 ops/s
# Warmup Iteration  13: 17915889.509 ops/s
# Warmup Iteration  14: 17801903.313 ops/s
# Warmup Iteration  15: 18034045.237 ops/s
# Warmup Iteration  16: 17998914.473 ops/s
# Warmup Iteration  17: 17927026.896 ops/s
# Warmup Iteration  18: 17909719.280 ops/s
# Warmup Iteration  19: 17969811.805 ops/s
# Warmup Iteration  20: 18040845.996 ops/s
# Warmup Iteration  21: 17900836.159 ops/s
# Warmup Iteration  22: 18016518.535 ops/s
# Warmup Iteration  23: 18011462.099 ops/s
# Warmup Iteration  24: 17992678.318 ops/s
# Warmup Iteration  25: 17841806.968 ops/s
# Warmup Iteration  26: 17817299.125 ops/s
# Warmup Iteration  27: 18099809.226 ops/s
# Warmup Iteration  28: 17930923.571 ops/s
# Warmup Iteration  29: 17816266.217 ops/s
# Warmup Iteration  30: 18085700.793 ops/s
Iteration   1: 18055716.354 ops/s
Iteration   2: 18107973.595 ops/s
Iteration   3: 17789905.257 ops/s
Iteration   4: 18001261.258 ops/s
Iteration   5: 17959182.465 ops/s
Iteration   6: 18015516.352 ops/s
Iteration   7: 17864101.057 ops/s
Iteration   8: 18029622.791 ops/s
Iteration   9: 17986844.855 ops/s
Iteration  10: 18018566.508 ops/s
Iteration  11: 18170354.457 ops/s
Iteration  12: 17676121.041 ops/s
Iteration  13: 18002528.397 ops/s
Iteration  14: 18064987.665 ops/s
Iteration  15: 18022144.852 ops/s
Iteration  16: 17953593.485 ops/s
Iteration  17: 17810350.853 ops/s
Iteration  18: 18035942.832 ops/s
Iteration  19: 17806318.949 ops/s
Iteration  20: 18113933.164 ops/s
Iteration  21: 18025089.426 ops/s
Iteration  22: 18097020.667 ops/s
Iteration  23: 17939121.380 ops/s
Iteration  24: 18061890.775 ops/s
Iteration  25: 17768439.338 ops/s
Iteration  26: 17973949.502 ops/s
Iteration  27: 17987183.273 ops/s
Iteration  28: 17783417.401 ops/s
Iteration  29: 17906718.224 ops/s
Iteration  30: 18106599.828 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_getLast":
  17971146.533 ±(99.9%) 80714.865 ops/s [Average]
  (min, avg, max) = (17676121.041, 17971146.533, 18170354.457), stdev = 120810.220
  CI (99.9%): [17890431.668, 18051861.399] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_getLast  thrpt   30  17971146.533 ± 80714.865  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_getLast_emptyList_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_getLast_emptyList_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708411.401 ops/s
# Warmup Iteration   2: 719970.656 ops/s
# Warmup Iteration   3: 956751.197 ops/s
# Warmup Iteration   4: 956390.354 ops/s
# Warmup Iteration   5: 960122.408 ops/s
# Warmup Iteration   6: 947011.109 ops/s
# Warmup Iteration   7: 959276.436 ops/s
# Warmup Iteration   8: 958751.887 ops/s
# Warmup Iteration   9: 962489.420 ops/s
# Warmup Iteration  10: 960133.479 ops/s
# Warmup Iteration  11: 938106.789 ops/s
# Warmup Iteration  12: 811495.399 ops/s
# Warmup Iteration  13: 950281.294 ops/s
# Warmup Iteration  14: 959224.826 ops/s
# Warmup Iteration  15: 952772.499 ops/s
# Warmup Iteration  16: 954413.078 ops/s
# Warmup Iteration  17: 1002589.865 ops/s
# Warmup Iteration  18: 1002083.939 ops/s
# Warmup Iteration  19: 999379.011 ops/s
# Warmup Iteration  20: 989440.383 ops/s
# Warmup Iteration  21: 1000863.292 ops/s
# Warmup Iteration  22: 993563.684 ops/s
# Warmup Iteration  23: 999275.914 ops/s
# Warmup Iteration  24: 995030.210 ops/s
# Warmup Iteration  25: 1005736.893 ops/s
# Warmup Iteration  26: 1003281.302 ops/s
# Warmup Iteration  27: 997305.946 ops/s
# Warmup Iteration  28: 995644.600 ops/s
# Warmup Iteration  29: 1005259.229 ops/s
# Warmup Iteration  30: 999021.942 ops/s
Iteration   1: 1003173.577 ops/s
Iteration   2: 1000013.805 ops/s
Iteration   3: 1002428.818 ops/s
Iteration   4: 1008860.318 ops/s
Iteration   5: 1002341.009 ops/s
Iteration   6: 999813.583 ops/s
Iteration   7: 994449.927 ops/s
Iteration   8: 980810.973 ops/s
Iteration   9: 1010149.407 ops/s
Iteration  10: 1009055.261 ops/s
Iteration  11: 1005061.934 ops/s
Iteration  12: 1002875.598 ops/s
Iteration  13: 993002.770 ops/s
Iteration  14: 998407.193 ops/s
Iteration  15: 1003112.750 ops/s
Iteration  16: 992248.199 ops/s
Iteration  17: 1007258.883 ops/s
Iteration  18: 978617.510 ops/s
Iteration  19: 995705.519 ops/s
Iteration  20: 1004627.189 ops/s
Iteration  21: 1006150.666 ops/s
Iteration  22: 1006207.900 ops/s
Iteration  23: 1002704.199 ops/s
Iteration  24: 1007475.248 ops/s
Iteration  25: 998191.899 ops/s
Iteration  26: 987833.586 ops/s
Iteration  27: 1008233.913 ops/s
Iteration  28: 1006129.804 ops/s
Iteration  29: 1005100.993 ops/s
Iteration  30: 1003491.185 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_getLast_emptyList_throws":
  1000784.454 ±(99.9%) 5270.837 ops/s [Average]
  (min, avg, max) = (978617.510, 1000784.454, 1010149.407), stdev = 7889.142
  CI (99.9%): [995513.616, 1006055.291] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_getLast_emptyList_throws  thrpt   30  1000784.454 ± 5270.837  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_get_throws_empty_list$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_get_throws_empty_list

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724558.115 ops/s
# Warmup Iteration   2: 736783.345 ops/s
# Warmup Iteration   3: 972735.349 ops/s
# Warmup Iteration   4: 965683.763 ops/s
# Warmup Iteration   5: 971714.159 ops/s
# Warmup Iteration   6: 975862.457 ops/s
# Warmup Iteration   7: 968649.771 ops/s
# Warmup Iteration   8: 975845.819 ops/s
# Warmup Iteration   9: 968244.859 ops/s
# Warmup Iteration  10: 975368.436 ops/s
# Warmup Iteration  11: 916816.804 ops/s
# Warmup Iteration  12: 880065.460 ops/s
# Warmup Iteration  13: 968992.715 ops/s
# Warmup Iteration  14: 970838.761 ops/s
# Warmup Iteration  15: 963540.953 ops/s
# Warmup Iteration  16: 976435.419 ops/s
# Warmup Iteration  17: 1021661.775 ops/s
# Warmup Iteration  18: 1020798.515 ops/s
# Warmup Iteration  19: 1027727.367 ops/s
# Warmup Iteration  20: 1031572.851 ops/s
# Warmup Iteration  21: 1029924.711 ops/s
# Warmup Iteration  22: 1030603.620 ops/s
# Warmup Iteration  23: 1027414.018 ops/s
# Warmup Iteration  24: 1035555.383 ops/s
# Warmup Iteration  25: 1022976.447 ops/s
# Warmup Iteration  26: 1019900.078 ops/s
# Warmup Iteration  27: 1022990.364 ops/s
# Warmup Iteration  28: 1024100.642 ops/s
# Warmup Iteration  29: 1030084.060 ops/s
# Warmup Iteration  30: 1027222.284 ops/s
Iteration   1: 1020494.233 ops/s
Iteration   2: 1027977.437 ops/s
Iteration   3: 1031820.686 ops/s
Iteration   4: 1010775.901 ops/s
Iteration   5: 1027709.904 ops/s
Iteration   6: 1029923.375 ops/s
Iteration   7: 1033950.997 ops/s
Iteration   8: 1000771.796 ops/s
Iteration   9: 1025575.025 ops/s
Iteration  10: 1031426.693 ops/s
Iteration  11: 1031676.095 ops/s
Iteration  12: 1031677.654 ops/s
Iteration  13: 1027493.456 ops/s
Iteration  14: 1030057.415 ops/s
Iteration  15: 1033614.734 ops/s
Iteration  16: 1028102.369 ops/s
Iteration  17: 1028222.520 ops/s
Iteration  18: 1029418.477 ops/s
Iteration  19: 1001427.913 ops/s
Iteration  20: 1012727.459 ops/s
Iteration  21: 1033805.900 ops/s
Iteration  22: 1027972.270 ops/s
Iteration  23: 1035203.153 ops/s
Iteration  24: 1027496.516 ops/s
Iteration  25: 1030116.610 ops/s
Iteration  26: 1033010.498 ops/s
Iteration  27: 1031843.464 ops/s
Iteration  28: 1034396.687 ops/s
Iteration  29: 1033590.351 ops/s
Iteration  30: 1038452.642 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_get_throws_empty_list":
  1027357.741 ±(99.9%) 6165.329 ops/s [Average]
  (min, avg, max) = (1000771.796, 1027357.741, 1038452.642), stdev = 9227.975
  CI (99.9%): [1021192.412, 1033523.070] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_get_throws_empty_list  thrpt   30  1027357.741 ± 6165.329  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_get_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_get_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703975.433 ops/s
# Warmup Iteration   2: 728265.432 ops/s
# Warmup Iteration   3: 981540.560 ops/s
# Warmup Iteration   4: 971700.986 ops/s
# Warmup Iteration   5: 969070.079 ops/s
# Warmup Iteration   6: 965232.876 ops/s
# Warmup Iteration   7: 977386.842 ops/s
# Warmup Iteration   8: 967829.149 ops/s
# Warmup Iteration   9: 973115.600 ops/s
# Warmup Iteration  10: 973543.979 ops/s
# Warmup Iteration  11: 806881.706 ops/s
# Warmup Iteration  12: 968246.565 ops/s
# Warmup Iteration  13: 972091.825 ops/s
# Warmup Iteration  14: 970299.298 ops/s
# Warmup Iteration  15: 971924.861 ops/s
# Warmup Iteration  16: 975784.477 ops/s
# Warmup Iteration  17: 1016298.090 ops/s
# Warmup Iteration  18: 1022367.685 ops/s
# Warmup Iteration  19: 1025035.367 ops/s
# Warmup Iteration  20: 1024476.597 ops/s
# Warmup Iteration  21: 1016388.811 ops/s
# Warmup Iteration  22: 1022638.954 ops/s
# Warmup Iteration  23: 1025429.886 ops/s
# Warmup Iteration  24: 1021479.102 ops/s
# Warmup Iteration  25: 1022859.890 ops/s
# Warmup Iteration  26: 1023393.127 ops/s
# Warmup Iteration  27: 1026336.596 ops/s
# Warmup Iteration  28: 1025433.246 ops/s
# Warmup Iteration  29: 1024874.790 ops/s
# Warmup Iteration  30: 1014776.668 ops/s
Iteration   1: 1020862.697 ops/s
Iteration   2: 1010999.688 ops/s
Iteration   3: 1019678.584 ops/s
Iteration   4: 1024661.176 ops/s
Iteration   5: 1007645.656 ops/s
Iteration   6: 1020386.004 ops/s
Iteration   7: 1026257.974 ops/s
Iteration   8: 1023367.893 ops/s
Iteration   9: 1019212.329 ops/s
Iteration  10: 1026777.878 ops/s
Iteration  11: 1024707.895 ops/s
Iteration  12: 1024053.031 ops/s
Iteration  13: 1023992.738 ops/s
Iteration  14: 1026418.068 ops/s
Iteration  15: 1028481.821 ops/s
Iteration  16: 1014817.408 ops/s
Iteration  17: 1013095.451 ops/s
Iteration  18: 1029909.879 ops/s
Iteration  19: 1013085.350 ops/s
Iteration  20: 1019677.274 ops/s
Iteration  21: 1010413.043 ops/s
Iteration  22: 1023869.627 ops/s
Iteration  23: 1017240.171 ops/s
Iteration  24: 1026245.655 ops/s
Iteration  25: 1017076.943 ops/s
Iteration  26: 1022784.040 ops/s
Iteration  27: 1022799.456 ops/s
Iteration  28: 1021780.766 ops/s
Iteration  29: 1027227.137 ops/s
Iteration  30: 1025852.530 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_get_throws_index_greater_than_size":
  1021112.605 ±(99.9%) 3867.784 ops/s [Average]
  (min, avg, max) = (1007645.656, 1021112.605, 1029909.879), stdev = 5789.118
  CI (99.9%): [1017244.821, 1024980.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_get_throws_index_greater_than_size  thrpt   30  1021112.605 ± 3867.784  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_get_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_get_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 711433.249 ops/s
# Warmup Iteration   2: 734045.887 ops/s
# Warmup Iteration   3: 976541.560 ops/s
# Warmup Iteration   4: 973359.282 ops/s
# Warmup Iteration   5: 970278.610 ops/s
# Warmup Iteration   6: 972519.141 ops/s
# Warmup Iteration   7: 974987.170 ops/s
# Warmup Iteration   8: 966184.910 ops/s
# Warmup Iteration   9: 974247.789 ops/s
# Warmup Iteration  10: 972869.761 ops/s
# Warmup Iteration  11: 802749.698 ops/s
# Warmup Iteration  12: 963562.112 ops/s
# Warmup Iteration  13: 971340.624 ops/s
# Warmup Iteration  14: 970858.625 ops/s
# Warmup Iteration  15: 966943.945 ops/s
# Warmup Iteration  16: 949833.999 ops/s
# Warmup Iteration  17: 1026594.360 ops/s
# Warmup Iteration  18: 1021071.748 ops/s
# Warmup Iteration  19: 1021590.640 ops/s
# Warmup Iteration  20: 1027664.414 ops/s
# Warmup Iteration  21: 1030299.789 ops/s
# Warmup Iteration  22: 1028475.161 ops/s
# Warmup Iteration  23: 1023110.063 ops/s
# Warmup Iteration  24: 1022654.389 ops/s
# Warmup Iteration  25: 1027838.981 ops/s
# Warmup Iteration  26: 1025305.757 ops/s
# Warmup Iteration  27: 1030910.210 ops/s
# Warmup Iteration  28: 1025470.656 ops/s
# Warmup Iteration  29: 1028695.636 ops/s
# Warmup Iteration  30: 1022690.192 ops/s
Iteration   1: 1025502.767 ops/s
Iteration   2: 1024279.943 ops/s
Iteration   3: 1024577.921 ops/s
Iteration   4: 1023239.387 ops/s
Iteration   5: 1024787.437 ops/s
Iteration   6: 1023400.896 ops/s
Iteration   7: 1020488.843 ops/s
Iteration   8: 1020819.114 ops/s
Iteration   9: 1026373.434 ops/s
Iteration  10: 1017618.947 ops/s
Iteration  11: 1030944.045 ops/s
Iteration  12: 1027076.213 ops/s
Iteration  13: 1008576.216 ops/s
Iteration  14: 1035686.000 ops/s
Iteration  15: 1031888.660 ops/s
Iteration  16: 1028745.822 ops/s
Iteration  17: 1015381.494 ops/s
Iteration  18: 1023596.608 ops/s
Iteration  19: 1029726.709 ops/s
Iteration  20: 1028331.946 ops/s
Iteration  21: 1028314.144 ops/s
Iteration  22: 1031488.946 ops/s
Iteration  23: 1033879.987 ops/s
Iteration  24: 1023769.212 ops/s
Iteration  25: 1031430.362 ops/s
Iteration  26: 1029762.164 ops/s
Iteration  27: 1031682.863 ops/s
Iteration  28: 1032450.712 ops/s
Iteration  29: 1033358.050 ops/s
Iteration  30: 1023615.900 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_get_throws_index_negative":
  1026359.825 ±(99.9%) 3977.444 ops/s [Average]
  (min, avg, max) = (1008576.216, 1026359.825, 1035686.000), stdev = 5953.251
  CI (99.9%): [1022382.381, 1030337.269] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_get_throws_index_negative  thrpt   30  1026359.825 ± 3977.444  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4700220.703 ops/s
# Warmup Iteration   2: 10824586.922 ops/s
# Warmup Iteration   3: 9957181.098 ops/s
# Warmup Iteration   4: 9498199.019 ops/s
# Warmup Iteration   5: 10647245.241 ops/s
# Warmup Iteration   6: 10708924.173 ops/s
# Warmup Iteration   7: 10714272.112 ops/s
# Warmup Iteration   8: 10598638.973 ops/s
# Warmup Iteration   9: 10707219.621 ops/s
# Warmup Iteration  10: 10685526.943 ops/s
# Warmup Iteration  11: 10730716.656 ops/s
# Warmup Iteration  12: 10711813.505 ops/s
# Warmup Iteration  13: 10682096.003 ops/s
# Warmup Iteration  14: 10744884.676 ops/s
# Warmup Iteration  15: 10638428.712 ops/s
# Warmup Iteration  16: 10663760.376 ops/s
# Warmup Iteration  17: 10449762.470 ops/s
# Warmup Iteration  18: 10711070.601 ops/s
# Warmup Iteration  19: 10705062.295 ops/s
# Warmup Iteration  20: 10622973.142 ops/s
# Warmup Iteration  21: 10696637.078 ops/s
# Warmup Iteration  22: 10706953.154 ops/s
# Warmup Iteration  23: 10675044.806 ops/s
# Warmup Iteration  24: 10667411.530 ops/s
# Warmup Iteration  25: 10705878.868 ops/s
# Warmup Iteration  26: 10735582.169 ops/s
# Warmup Iteration  27: 10679684.068 ops/s
# Warmup Iteration  28: 10668100.399 ops/s
# Warmup Iteration  29: 10636338.116 ops/s
# Warmup Iteration  30: 10693174.322 ops/s
Iteration   1: 10660278.399 ops/s
Iteration   2: 10714534.463 ops/s
Iteration   3: 10496957.271 ops/s
Iteration   4: 10676905.269 ops/s
Iteration   5: 10737483.089 ops/s
Iteration   6: 10731811.187 ops/s
Iteration   7: 10630362.943 ops/s
Iteration   8: 10518675.048 ops/s
Iteration   9: 10722045.065 ops/s
Iteration  10: 10688278.957 ops/s
Iteration  11: 10718368.349 ops/s
Iteration  12: 10662102.625 ops/s
Iteration  13: 10644450.043 ops/s
Iteration  14: 10685105.917 ops/s
Iteration  15: 10715260.150 ops/s
Iteration  16: 10712518.700 ops/s
Iteration  17: 10602220.801 ops/s
Iteration  18: 10741193.021 ops/s
Iteration  19: 10742711.254 ops/s
Iteration  20: 10699260.191 ops/s
Iteration  21: 10650399.073 ops/s
Iteration  22: 10712157.134 ops/s
Iteration  23: 10711215.321 ops/s
Iteration  24: 10735215.310 ops/s
Iteration  25: 10731776.816 ops/s
Iteration  26: 10408744.288 ops/s
Iteration  27: 10632355.098 ops/s
Iteration  28: 10744410.729 ops/s
Iteration  29: 10682253.656 ops/s
Iteration  30: 10760659.441 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_indexOf":
  10675656.987 ±(99.9%) 53427.310 ops/s [Average]
  (min, avg, max) = (10408744.288, 10675656.987, 10760659.441), stdev = 79967.489
  CI (99.9%): [10622229.677, 10729084.297] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_indexOf  thrpt   30  10675656.987 ± 53427.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10617270.059 ops/s
# Warmup Iteration   2: 23282745.629 ops/s
# Warmup Iteration   3: 18330968.984 ops/s
# Warmup Iteration   4: 22274883.221 ops/s
# Warmup Iteration   5: 22428789.963 ops/s
# Warmup Iteration   6: 22425923.291 ops/s
# Warmup Iteration   7: 21858378.802 ops/s
# Warmup Iteration   8: 22499912.104 ops/s
# Warmup Iteration   9: 22287624.582 ops/s
# Warmup Iteration  10: 22315559.238 ops/s
# Warmup Iteration  11: 22474981.747 ops/s
# Warmup Iteration  12: 22407459.023 ops/s
# Warmup Iteration  13: 22303844.865 ops/s
# Warmup Iteration  14: 22256720.389 ops/s
# Warmup Iteration  15: 22345490.631 ops/s
# Warmup Iteration  16: 22502617.785 ops/s
# Warmup Iteration  17: 22278487.994 ops/s
# Warmup Iteration  18: 22465656.068 ops/s
# Warmup Iteration  19: 22468285.449 ops/s
# Warmup Iteration  20: 22394450.207 ops/s
# Warmup Iteration  21: 22392808.988 ops/s
# Warmup Iteration  22: 22410016.043 ops/s
# Warmup Iteration  23: 22238727.953 ops/s
# Warmup Iteration  24: 22248145.576 ops/s
# Warmup Iteration  25: 22444686.581 ops/s
# Warmup Iteration  26: 22432981.955 ops/s
# Warmup Iteration  27: 22494068.810 ops/s
# Warmup Iteration  28: 22225669.207 ops/s
# Warmup Iteration  29: 22385425.652 ops/s
# Warmup Iteration  30: 22486044.315 ops/s
Iteration   1: 22445365.210 ops/s
Iteration   2: 22436686.619 ops/s
Iteration   3: 22315190.304 ops/s
Iteration   4: 21783460.399 ops/s
Iteration   5: 22442386.067 ops/s
Iteration   6: 22442399.513 ops/s
Iteration   7: 22465212.158 ops/s
Iteration   8: 22386319.070 ops/s
Iteration   9: 22436824.652 ops/s
Iteration  10: 22431736.099 ops/s
Iteration  11: 22378371.301 ops/s
Iteration  12: 22395261.739 ops/s
Iteration  13: 22475935.571 ops/s
Iteration  14: 22416529.657 ops/s
Iteration  15: 22411033.279 ops/s
Iteration  16: 22296442.001 ops/s
Iteration  17: 22596987.810 ops/s
Iteration  18: 22498380.025 ops/s
Iteration  19: 22431033.871 ops/s
Iteration  20: 22417738.660 ops/s
Iteration  21: 22342733.620 ops/s
Iteration  22: 22307596.480 ops/s
Iteration  23: 22206198.757 ops/s
Iteration  24: 22088523.722 ops/s
Iteration  25: 22388394.889 ops/s
Iteration  26: 22407266.580 ops/s
Iteration  27: 22429317.592 ops/s
Iteration  28: 21298554.009 ops/s
Iteration  29: 22409147.105 ops/s
Iteration  30: 22482676.173 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_injectInto":
  22342123.431 ±(99.9%) 163432.575 ops/s [Average]
  (min, avg, max) = (21298554.009, 22342123.431, 22596987.810), stdev = 244618.203
  CI (99.9%): [22178690.856, 22505556.006] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
BooleanArrayListTest._Benchmark.benchmark_injectInto  thrpt   30  22342123.431 ± 163432.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_injectIntoWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_injectIntoWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10632885.808 ops/s
# Warmup Iteration   2: 23126108.300 ops/s
# Warmup Iteration   3: 19043918.147 ops/s
# Warmup Iteration   4: 22980675.650 ops/s
# Warmup Iteration   5: 22778134.932 ops/s
# Warmup Iteration   6: 22986944.117 ops/s
# Warmup Iteration   7: 22930731.896 ops/s
# Warmup Iteration   8: 22977013.811 ops/s
# Warmup Iteration   9: 23010682.208 ops/s
# Warmup Iteration  10: 23037523.221 ops/s
# Warmup Iteration  11: 23048874.336 ops/s
# Warmup Iteration  12: 22919792.438 ops/s
# Warmup Iteration  13: 23011066.457 ops/s
# Warmup Iteration  14: 22888165.653 ops/s
# Warmup Iteration  15: 22896424.055 ops/s
# Warmup Iteration  16: 23073446.626 ops/s
# Warmup Iteration  17: 22932753.551 ops/s
# Warmup Iteration  18: 22960494.257 ops/s
# Warmup Iteration  19: 22957488.816 ops/s
# Warmup Iteration  20: 23022916.304 ops/s
# Warmup Iteration  21: 23067897.689 ops/s
# Warmup Iteration  22: 22990209.803 ops/s
# Warmup Iteration  23: 23098166.930 ops/s
# Warmup Iteration  24: 23044167.061 ops/s
# Warmup Iteration  25: 23047096.195 ops/s
# Warmup Iteration  26: 22910195.414 ops/s
# Warmup Iteration  27: 22765880.099 ops/s
# Warmup Iteration  28: 23035130.898 ops/s
# Warmup Iteration  29: 23017252.392 ops/s
# Warmup Iteration  30: 23001545.461 ops/s
Iteration   1: 23136071.183 ops/s
Iteration   2: 23087114.094 ops/s
Iteration   3: 22514938.466 ops/s
Iteration   4: 23042565.484 ops/s
Iteration   5: 22982100.889 ops/s
Iteration   6: 23081094.083 ops/s
Iteration   7: 23005135.953 ops/s
Iteration   8: 23041247.226 ops/s
Iteration   9: 22924305.170 ops/s
Iteration  10: 22653503.343 ops/s
Iteration  11: 23015054.421 ops/s
Iteration  12: 22998546.171 ops/s
Iteration  13: 22924862.989 ops/s
Iteration  14: 22960389.782 ops/s
Iteration  15: 23108702.747 ops/s
Iteration  16: 23033645.148 ops/s
Iteration  17: 23025536.163 ops/s
Iteration  18: 22937414.898 ops/s
Iteration  19: 22849372.190 ops/s
Iteration  20: 23054555.422 ops/s
Iteration  21: 22472375.138 ops/s
Iteration  22: 22901459.506 ops/s
Iteration  23: 22538473.879 ops/s
Iteration  24: 23122990.825 ops/s
Iteration  25: 22923326.334 ops/s
Iteration  26: 22567974.620 ops/s
Iteration  27: 23070310.603 ops/s
Iteration  28: 23090849.787 ops/s
Iteration  29: 23120576.770 ops/s
Iteration  30: 22824796.221 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_injectIntoWithIndex":
  22933642.984 ±(99.9%) 129131.287 ops/s [Average]
  (min, avg, max) = (22472375.138, 22933642.984, 23136071.183), stdev = 193277.646
  CI (99.9%): [22804511.696, 23062774.271] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
BooleanArrayListTest._Benchmark.benchmark_injectIntoWithIndex  thrpt   30  22933642.984 ± 129131.287  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2029037.191 ops/s
# Warmup Iteration   2: 3255612.969 ops/s
# Warmup Iteration   3: 3794748.431 ops/s
# Warmup Iteration   4: 3791247.489 ops/s
# Warmup Iteration   5: 3766851.699 ops/s
# Warmup Iteration   6: 3800904.952 ops/s
# Warmup Iteration   7: 3791747.857 ops/s
# Warmup Iteration   8: 3787747.346 ops/s
# Warmup Iteration   9: 3741439.181 ops/s
# Warmup Iteration  10: 3793752.017 ops/s
# Warmup Iteration  11: 3786136.001 ops/s
# Warmup Iteration  12: 3784733.513 ops/s
# Warmup Iteration  13: 3811999.285 ops/s
# Warmup Iteration  14: 3796431.853 ops/s
# Warmup Iteration  15: 3793777.523 ops/s
# Warmup Iteration  16: 3776740.724 ops/s
# Warmup Iteration  17: 3807290.724 ops/s
# Warmup Iteration  18: 3812719.325 ops/s
# Warmup Iteration  19: 3739272.995 ops/s
# Warmup Iteration  20: 3797087.932 ops/s
# Warmup Iteration  21: 3802601.989 ops/s
# Warmup Iteration  22: 3800471.100 ops/s
# Warmup Iteration  23: 3774509.637 ops/s
# Warmup Iteration  24: 3709125.403 ops/s
# Warmup Iteration  25: 3782177.649 ops/s
# Warmup Iteration  26: 3812028.325 ops/s
# Warmup Iteration  27: 3775289.666 ops/s
# Warmup Iteration  28: 3791161.616 ops/s
# Warmup Iteration  29: 3766815.066 ops/s
# Warmup Iteration  30: 3773543.092 ops/s
Iteration   1: 3739942.510 ops/s
Iteration   2: 3796447.549 ops/s
Iteration   3: 3802593.973 ops/s
Iteration   4: 3741121.208 ops/s
Iteration   5: 3739443.091 ops/s
Iteration   6: 3787950.787 ops/s
Iteration   7: 3810303.518 ops/s
Iteration   8: 3741012.439 ops/s
Iteration   9: 3769662.459 ops/s
Iteration  10: 3805971.599 ops/s
Iteration  11: 3802892.296 ops/s
Iteration  12: 3800541.610 ops/s
Iteration  13: 3790569.633 ops/s
Iteration  14: 3813312.643 ops/s
Iteration  15: 3773636.227 ops/s
Iteration  16: 3797968.162 ops/s
Iteration  17: 3742165.385 ops/s
Iteration  18: 3800288.894 ops/s
Iteration  19: 3735882.785 ops/s
Iteration  20: 3770700.908 ops/s
Iteration  21: 3814797.349 ops/s
Iteration  22: 3775472.742 ops/s
Iteration  23: 3712842.730 ops/s
Iteration  24: 3805539.009 ops/s
Iteration  25: 3826662.864 ops/s
Iteration  26: 3803015.248 ops/s
Iteration  27: 3795347.030 ops/s
Iteration  28: 3799504.741 ops/s
Iteration  29: 3790818.088 ops/s
Iteration  30: 3784340.053 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_isEmpty":
  3782358.251 ±(99.9%) 19584.075 ops/s [Average]
  (min, avg, max) = (3712842.730, 3782358.251, 3826662.864), stdev = 29312.523
  CI (99.9%): [3762774.176, 3801942.326] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_isEmpty  thrpt   30  3782358.251 ± 19584.075  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681167.783 ops/s
# Warmup Iteration   2: 688848.157 ops/s
# Warmup Iteration   3: 888108.217 ops/s
# Warmup Iteration   4: 901677.856 ops/s
# Warmup Iteration   5: 897274.236 ops/s
# Warmup Iteration   6: 893482.049 ops/s
# Warmup Iteration   7: 903832.935 ops/s
# Warmup Iteration   8: 898189.381 ops/s
# Warmup Iteration   9: 904135.145 ops/s
# Warmup Iteration  10: 902451.395 ops/s
# Warmup Iteration  11: 894353.161 ops/s
# Warmup Iteration  12: 783821.834 ops/s
# Warmup Iteration  13: 869127.282 ops/s
# Warmup Iteration  14: 899641.704 ops/s
# Warmup Iteration  15: 897730.974 ops/s
# Warmup Iteration  16: 894711.744 ops/s
# Warmup Iteration  17: 934744.494 ops/s
# Warmup Iteration  18: 953798.935 ops/s
# Warmup Iteration  19: 947392.130 ops/s
# Warmup Iteration  20: 951676.997 ops/s
# Warmup Iteration  21: 949979.089 ops/s
# Warmup Iteration  22: 951875.332 ops/s
# Warmup Iteration  23: 942799.451 ops/s
# Warmup Iteration  24: 950737.184 ops/s
# Warmup Iteration  25: 947363.268 ops/s
# Warmup Iteration  26: 952689.313 ops/s
# Warmup Iteration  27: 951184.483 ops/s
# Warmup Iteration  28: 954745.890 ops/s
# Warmup Iteration  29: 936589.362 ops/s
# Warmup Iteration  30: 953461.091 ops/s
Iteration   1: 935279.724 ops/s
Iteration   2: 941348.290 ops/s
Iteration   3: 946005.163 ops/s
Iteration   4: 954856.230 ops/s
Iteration   5: 949780.251 ops/s
Iteration   6: 949586.484 ops/s
Iteration   7: 949071.264 ops/s
Iteration   8: 949958.539 ops/s
Iteration   9: 936405.353 ops/s
Iteration  10: 953377.223 ops/s
Iteration  11: 955025.595 ops/s
Iteration  12: 952831.492 ops/s
Iteration  13: 956677.354 ops/s
Iteration  14: 949311.577 ops/s
Iteration  15: 954524.275 ops/s
Iteration  16: 951176.799 ops/s
Iteration  17: 952374.649 ops/s
Iteration  18: 945262.106 ops/s
Iteration  19: 949253.191 ops/s
Iteration  20: 953122.406 ops/s
Iteration  21: 947590.082 ops/s
Iteration  22: 952056.732 ops/s
Iteration  23: 948038.045 ops/s
Iteration  24: 954416.511 ops/s
Iteration  25: 946573.772 ops/s
Iteration  26: 953672.247 ops/s
Iteration  27: 950692.256 ops/s
Iteration  28: 935288.264 ops/s
Iteration  29: 931028.761 ops/s
Iteration  30: 947220.371 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws":
  948393.500 ±(99.9%) 4355.929 ops/s [Average]
  (min, avg, max) = (931028.761, 948393.500, 956677.354), stdev = 6519.750
  CI (99.9%): [944037.571, 952749.429] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_iterator_throws  thrpt   30  948393.500 ± 4355.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 753501.252 ops/s
# Warmup Iteration   2: 766919.104 ops/s
# Warmup Iteration   3: 1006533.761 ops/s
# Warmup Iteration   4: 1020438.410 ops/s
# Warmup Iteration   5: 1018459.165 ops/s
# Warmup Iteration   6: 1018885.641 ops/s
# Warmup Iteration   7: 1019425.153 ops/s
# Warmup Iteration   8: 1021346.860 ops/s
# Warmup Iteration   9: 1023226.129 ops/s
# Warmup Iteration  10: 1011621.048 ops/s
# Warmup Iteration  11: 1015079.627 ops/s
# Warmup Iteration  12: 861014.528 ops/s
# Warmup Iteration  13: 1021535.846 ops/s
# Warmup Iteration  14: 1017543.508 ops/s
# Warmup Iteration  15: 1023039.335 ops/s
# Warmup Iteration  16: 1020991.478 ops/s
# Warmup Iteration  17: 1079005.836 ops/s
# Warmup Iteration  18: 1081906.624 ops/s
# Warmup Iteration  19: 1084281.898 ops/s
# Warmup Iteration  20: 1076747.834 ops/s
# Warmup Iteration  21: 1078098.900 ops/s
# Warmup Iteration  22: 1085185.187 ops/s
# Warmup Iteration  23: 1077812.494 ops/s
# Warmup Iteration  24: 1083610.123 ops/s
# Warmup Iteration  25: 1086067.284 ops/s
# Warmup Iteration  26: 1081848.227 ops/s
# Warmup Iteration  27: 1083605.881 ops/s
# Warmup Iteration  28: 1080399.706 ops/s
# Warmup Iteration  29: 1083064.867 ops/s
# Warmup Iteration  30: 1081060.014 ops/s
Iteration   1: 1063632.261 ops/s
Iteration   2: 1081006.900 ops/s
Iteration   3: 1067402.849 ops/s
Iteration   4: 1082277.014 ops/s
Iteration   5: 1083156.169 ops/s
Iteration   6: 1065222.505 ops/s
Iteration   7: 1079076.281 ops/s
Iteration   8: 1082406.734 ops/s
Iteration   9: 1081145.692 ops/s
Iteration  10: 1078292.131 ops/s
Iteration  11: 1080897.110 ops/s
Iteration  12: 1081723.798 ops/s
Iteration  13: 1085194.877 ops/s
Iteration  14: 1077040.019 ops/s
Iteration  15: 1082660.394 ops/s
Iteration  16: 1087881.087 ops/s
Iteration  17: 1079869.060 ops/s
Iteration  18: 1082578.235 ops/s
Iteration  19: 1081735.959 ops/s
Iteration  20: 1073209.318 ops/s
Iteration  21: 1085717.966 ops/s
Iteration  22: 1065276.583 ops/s
Iteration  23: 1059813.254 ops/s
Iteration  24: 1077081.676 ops/s
Iteration  25: 1085726.324 ops/s
Iteration  26: 1078313.927 ops/s
Iteration  27: 1069430.779 ops/s
Iteration  28: 1084031.396 ops/s
Iteration  29: 1078011.514 ops/s
Iteration  30: 1082944.208 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws_emptyList":
  1078091.867 ±(99.9%) 4914.290 ops/s [Average]
  (min, avg, max) = (1059813.254, 1078091.867, 1087881.087), stdev = 7355.478
  CI (99.9%): [1073177.578, 1083006.157] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1078091.867 ± 4914.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 675331.460 ops/s
# Warmup Iteration   2: 677623.452 ops/s
# Warmup Iteration   3: 861164.618 ops/s
# Warmup Iteration   4: 875216.270 ops/s
# Warmup Iteration   5: 876785.352 ops/s
# Warmup Iteration   6: 883047.815 ops/s
# Warmup Iteration   7: 884164.291 ops/s
# Warmup Iteration   8: 882311.108 ops/s
# Warmup Iteration   9: 887402.313 ops/s
# Warmup Iteration  10: 889417.065 ops/s
# Warmup Iteration  11: 883512.196 ops/s
# Warmup Iteration  12: 815441.691 ops/s
# Warmup Iteration  13: 802833.405 ops/s
# Warmup Iteration  14: 877602.226 ops/s
# Warmup Iteration  15: 888006.449 ops/s
# Warmup Iteration  16: 886791.541 ops/s
# Warmup Iteration  17: 944775.811 ops/s
# Warmup Iteration  18: 931158.730 ops/s
# Warmup Iteration  19: 943645.968 ops/s
# Warmup Iteration  20: 944294.236 ops/s
# Warmup Iteration  21: 939063.188 ops/s
# Warmup Iteration  22: 931879.496 ops/s
# Warmup Iteration  23: 943817.265 ops/s
# Warmup Iteration  24: 938593.293 ops/s
# Warmup Iteration  25: 943669.543 ops/s
# Warmup Iteration  26: 946039.338 ops/s
# Warmup Iteration  27: 940959.704 ops/s
# Warmup Iteration  28: 944687.538 ops/s
# Warmup Iteration  29: 943428.734 ops/s
# Warmup Iteration  30: 936919.844 ops/s
Iteration   1: 947181.921 ops/s
Iteration   2: 943550.731 ops/s
Iteration   3: 944934.149 ops/s
Iteration   4: 936953.106 ops/s
Iteration   5: 941254.206 ops/s
Iteration   6: 938406.605 ops/s
Iteration   7: 949482.138 ops/s
Iteration   8: 939624.730 ops/s
Iteration   9: 943372.453 ops/s
Iteration  10: 937595.695 ops/s
Iteration  11: 944423.994 ops/s
Iteration  12: 933909.677 ops/s
Iteration  13: 943138.628 ops/s
Iteration  14: 935493.414 ops/s
Iteration  15: 938331.263 ops/s
Iteration  16: 944462.824 ops/s
Iteration  17: 930765.357 ops/s
Iteration  18: 939148.771 ops/s
Iteration  19: 943483.981 ops/s
Iteration  20: 942508.472 ops/s
Iteration  21: 940658.871 ops/s
Iteration  22: 941453.647 ops/s
Iteration  23: 939919.237 ops/s
Iteration  24: 941325.257 ops/s
Iteration  25: 939156.569 ops/s
Iteration  26: 936561.773 ops/s
Iteration  27: 943620.091 ops/s
Iteration  28: 939492.957 ops/s
Iteration  29: 938994.277 ops/s
Iteration  30: 940891.029 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  940669.861 ±(99.9%) 2607.274 ops/s [Average]
  (min, avg, max) = (930765.357, 940669.861, 949482.138), stdev = 3902.445
  CI (99.9%): [938062.587, 943277.135] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  940669.861 ± 2607.274  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710441.137 ops/s
# Warmup Iteration   2: 728378.663 ops/s
# Warmup Iteration   3: 983181.557 ops/s
# Warmup Iteration   4: 980916.140 ops/s
# Warmup Iteration   5: 981173.808 ops/s
# Warmup Iteration   6: 978874.421 ops/s
# Warmup Iteration   7: 978850.960 ops/s
# Warmup Iteration   8: 971433.501 ops/s
# Warmup Iteration   9: 985560.915 ops/s
# Warmup Iteration  10: 976492.202 ops/s
# Warmup Iteration  11: 881620.540 ops/s
# Warmup Iteration  12: 921315.441 ops/s
# Warmup Iteration  13: 983915.355 ops/s
# Warmup Iteration  14: 984465.421 ops/s
# Warmup Iteration  15: 984960.276 ops/s
# Warmup Iteration  16: 983025.096 ops/s
# Warmup Iteration  17: 1048411.231 ops/s
# Warmup Iteration  18: 1046249.975 ops/s
# Warmup Iteration  19: 1045503.579 ops/s
# Warmup Iteration  20: 1047252.602 ops/s
# Warmup Iteration  21: 1050499.773 ops/s
# Warmup Iteration  22: 1043072.537 ops/s
# Warmup Iteration  23: 1048541.319 ops/s
# Warmup Iteration  24: 1046823.576 ops/s
# Warmup Iteration  25: 1048646.864 ops/s
# Warmup Iteration  26: 1047592.491 ops/s
# Warmup Iteration  27: 1046526.316 ops/s
# Warmup Iteration  28: 1039903.652 ops/s
# Warmup Iteration  29: 1038025.482 ops/s
# Warmup Iteration  30: 1046145.056 ops/s
Iteration   1: 1046310.063 ops/s
Iteration   2: 1042950.815 ops/s
Iteration   3: 1030131.903 ops/s
Iteration   4: 1035285.763 ops/s
Iteration   5: 1048345.932 ops/s
Iteration   6: 1045914.799 ops/s
Iteration   7: 1045480.178 ops/s
Iteration   8: 1047254.823 ops/s
Iteration   9: 1046899.856 ops/s
Iteration  10: 1040102.921 ops/s
Iteration  11: 1016839.955 ops/s
Iteration  12: 1053356.581 ops/s
Iteration  13: 1042691.393 ops/s
Iteration  14: 1044758.373 ops/s
Iteration  15: 1036962.824 ops/s
Iteration  16: 1045838.460 ops/s
Iteration  17: 1047192.834 ops/s
Iteration  18: 1045215.958 ops/s
Iteration  19: 1039308.717 ops/s
Iteration  20: 1051981.414 ops/s
Iteration  21: 1038794.987 ops/s
Iteration  22: 1046466.479 ops/s
Iteration  23: 1049153.427 ops/s
Iteration  24: 1033302.697 ops/s
Iteration  25: 1051663.912 ops/s
Iteration  26: 1050833.401 ops/s
Iteration  27: 1048054.976 ops/s
Iteration  28: 1050955.927 ops/s
Iteration  29: 1040138.044 ops/s
Iteration  30: 1047426.858 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1043653.809 ±(99.9%) 5083.517 ops/s [Average]
  (min, avg, max) = (1016839.955, 1043653.809, 1053356.581), stdev = 7608.770
  CI (99.9%): [1038570.292, 1048737.326] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1043653.809 ± 5083.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 722887.417 ops/s
# Warmup Iteration   2: 746498.124 ops/s
# Warmup Iteration   3: 999698.800 ops/s
# Warmup Iteration   4: 1001264.012 ops/s
# Warmup Iteration   5: 996501.715 ops/s
# Warmup Iteration   6: 994090.017 ops/s
# Warmup Iteration   7: 1000650.017 ops/s
# Warmup Iteration   8: 999979.330 ops/s
# Warmup Iteration   9: 994484.703 ops/s
# Warmup Iteration  10: 1002563.993 ops/s
# Warmup Iteration  11: 844330.782 ops/s
# Warmup Iteration  12: 985269.118 ops/s
# Warmup Iteration  13: 995019.609 ops/s
# Warmup Iteration  14: 995457.239 ops/s
# Warmup Iteration  15: 997171.288 ops/s
# Warmup Iteration  16: 987612.425 ops/s
# Warmup Iteration  17: 1058406.776 ops/s
# Warmup Iteration  18: 1053588.897 ops/s
# Warmup Iteration  19: 1055309.217 ops/s
# Warmup Iteration  20: 1047703.481 ops/s
# Warmup Iteration  21: 1050679.164 ops/s
# Warmup Iteration  22: 1044164.387 ops/s
# Warmup Iteration  23: 1056965.626 ops/s
# Warmup Iteration  24: 1062859.982 ops/s
# Warmup Iteration  25: 1059445.564 ops/s
# Warmup Iteration  26: 1055330.490 ops/s
# Warmup Iteration  27: 1061130.386 ops/s
# Warmup Iteration  28: 1054307.785 ops/s
# Warmup Iteration  29: 1030084.638 ops/s
# Warmup Iteration  30: 1048471.405 ops/s
Iteration   1: 1059984.837 ops/s
Iteration   2: 1047660.041 ops/s
Iteration   3: 1061399.969 ops/s
Iteration   4: 1060866.856 ops/s
Iteration   5: 1061987.790 ops/s
Iteration   6: 1057625.427 ops/s
Iteration   7: 1058648.294 ops/s
Iteration   8: 1059686.811 ops/s
Iteration   9: 1057339.743 ops/s
Iteration  10: 1058926.386 ops/s
Iteration  11: 1036438.525 ops/s
Iteration  12: 1055835.028 ops/s
Iteration  13: 1022822.796 ops/s
Iteration  14: 1052705.270 ops/s
Iteration  15: 1068237.081 ops/s
Iteration  16: 1061828.030 ops/s
Iteration  17: 1055681.018 ops/s
Iteration  18: 1062744.906 ops/s
Iteration  19: 1063558.358 ops/s
Iteration  20: 1061405.410 ops/s
Iteration  21: 1061356.434 ops/s
Iteration  22: 1062497.860 ops/s
Iteration  23: 1057919.521 ops/s
Iteration  24: 1059064.951 ops/s
Iteration  25: 1052647.717 ops/s
Iteration  26: 1059757.999 ops/s
Iteration  27: 1063192.535 ops/s
Iteration  28: 1058867.075 ops/s
Iteration  29: 1059404.586 ops/s
Iteration  30: 1059725.941 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1057327.240 ±(99.9%) 5765.490 ops/s [Average]
  (min, avg, max) = (1022822.796, 1057327.240, 1068237.081), stdev = 8629.515
  CI (99.9%): [1051561.749, 1063092.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1057327.240 ± 5765.490  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4890775.007 ops/s
# Warmup Iteration   2: 10615742.774 ops/s
# Warmup Iteration   3: 10014546.442 ops/s
# Warmup Iteration   4: 9433737.259 ops/s
# Warmup Iteration   5: 10717341.071 ops/s
# Warmup Iteration   6: 10701270.488 ops/s
# Warmup Iteration   7: 10647664.031 ops/s
# Warmup Iteration   8: 10579484.700 ops/s
# Warmup Iteration   9: 10712909.305 ops/s
# Warmup Iteration  10: 10606810.110 ops/s
# Warmup Iteration  11: 10728267.676 ops/s
# Warmup Iteration  12: 10730097.485 ops/s
# Warmup Iteration  13: 10668221.875 ops/s
# Warmup Iteration  14: 10697956.354 ops/s
# Warmup Iteration  15: 10673519.188 ops/s
# Warmup Iteration  16: 10716934.609 ops/s
# Warmup Iteration  17: 10698159.303 ops/s
# Warmup Iteration  18: 10680441.666 ops/s
# Warmup Iteration  19: 10484186.077 ops/s
# Warmup Iteration  20: 10703476.861 ops/s
# Warmup Iteration  21: 10667655.767 ops/s
# Warmup Iteration  22: 10656193.916 ops/s
# Warmup Iteration  23: 10576902.708 ops/s
# Warmup Iteration  24: 10731831.845 ops/s
# Warmup Iteration  25: 10614415.047 ops/s
# Warmup Iteration  26: 10662780.916 ops/s
# Warmup Iteration  27: 10636113.957 ops/s
# Warmup Iteration  28: 10677858.038 ops/s
# Warmup Iteration  29: 10584253.667 ops/s
# Warmup Iteration  30: 10691544.293 ops/s
Iteration   1: 10621800.090 ops/s
Iteration   2: 10461799.528 ops/s
Iteration   3: 10700676.288 ops/s
Iteration   4: 10423646.427 ops/s
Iteration   5: 10697184.112 ops/s
Iteration   6: 10752602.265 ops/s
Iteration   7: 10645195.015 ops/s
Iteration   8: 10654488.171 ops/s
Iteration   9: 10705991.006 ops/s
Iteration  10: 10696589.170 ops/s
Iteration  11: 10697795.943 ops/s
Iteration  12: 10706611.935 ops/s
Iteration  13: 10683859.369 ops/s
Iteration  14: 10715891.889 ops/s
Iteration  15: 10740060.917 ops/s
Iteration  16: 10730142.609 ops/s
Iteration  17: 10704011.140 ops/s
Iteration  18: 10656327.227 ops/s
Iteration  19: 10615383.243 ops/s
Iteration  20: 10702583.842 ops/s
Iteration  21: 10709369.487 ops/s
Iteration  22: 10515070.216 ops/s
Iteration  23: 10622991.437 ops/s
Iteration  24: 10711679.154 ops/s
Iteration  25: 10604011.095 ops/s
Iteration  26: 10694575.881 ops/s
Iteration  27: 10557742.884 ops/s
Iteration  28: 10738215.450 ops/s
Iteration  29: 10745952.521 ops/s
Iteration  30: 10664029.240 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_lastIndexOf":
  10662542.585 ±(99.9%) 54348.188 ops/s [Average]
  (min, avg, max) = (10423646.427, 10662542.585, 10752602.265), stdev = 81345.816
  CI (99.9%): [10608194.397, 10716890.773] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  10662542.585 ± 54348.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 512326.410 ops/s
# Warmup Iteration   2: 1125475.176 ops/s
# Warmup Iteration   3: 1045695.326 ops/s
# Warmup Iteration   4: 1018937.370 ops/s
# Warmup Iteration   5: 1126445.781 ops/s
# Warmup Iteration   6: 1134538.141 ops/s
# Warmup Iteration   7: 1124795.343 ops/s
# Warmup Iteration   8: 1136738.445 ops/s
# Warmup Iteration   9: 1127179.148 ops/s
# Warmup Iteration  10: 1128757.183 ops/s
# Warmup Iteration  11: 1131109.288 ops/s
# Warmup Iteration  12: 1120695.035 ops/s
# Warmup Iteration  13: 1097355.149 ops/s
# Warmup Iteration  14: 1112575.107 ops/s
# Warmup Iteration  15: 1127301.200 ops/s
# Warmup Iteration  16: 1117401.519 ops/s
# Warmup Iteration  17: 1120073.875 ops/s
# Warmup Iteration  18: 1134260.147 ops/s
# Warmup Iteration  19: 1127750.857 ops/s
# Warmup Iteration  20: 1132728.262 ops/s
# Warmup Iteration  21: 1128173.336 ops/s
# Warmup Iteration  22: 1133950.335 ops/s
# Warmup Iteration  23: 1133714.530 ops/s
# Warmup Iteration  24: 1139138.652 ops/s
# Warmup Iteration  25: 1119358.334 ops/s
# Warmup Iteration  26: 1142414.825 ops/s
# Warmup Iteration  27: 1133800.244 ops/s
# Warmup Iteration  28: 1135349.433 ops/s
# Warmup Iteration  29: 1127529.001 ops/s
# Warmup Iteration  30: 1115805.723 ops/s
Iteration   1: 1128021.242 ops/s
Iteration   2: 1134592.041 ops/s
Iteration   3: 1126802.712 ops/s
Iteration   4: 1137678.985 ops/s
Iteration   5: 1138223.776 ops/s
Iteration   6: 1143385.004 ops/s
Iteration   7: 1135125.691 ops/s
Iteration   8: 1130072.595 ops/s
Iteration   9: 1139630.307 ops/s
Iteration  10: 1132625.761 ops/s
Iteration  11: 1132383.447 ops/s
Iteration  12: 1130234.630 ops/s
Iteration  13: 1133244.076 ops/s
Iteration  14: 1088017.411 ops/s
Iteration  15: 1145650.656 ops/s
Iteration  16: 1128571.788 ops/s
Iteration  17: 1130635.373 ops/s
Iteration  18: 1139884.028 ops/s
Iteration  19: 1136262.658 ops/s
Iteration  20: 1114626.793 ops/s
Iteration  21: 1145013.539 ops/s
Iteration  22: 1135134.000 ops/s
Iteration  23: 1138480.923 ops/s
Iteration  24: 1126604.773 ops/s
Iteration  25: 1130411.113 ops/s
Iteration  26: 1129578.662 ops/s
Iteration  27: 1145257.324 ops/s
Iteration  28: 1130169.521 ops/s
Iteration  29: 1136006.724 ops/s
Iteration  30: 1136853.229 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_makeString":
  1132639.293 ±(99.9%) 7136.494 ops/s [Average]
  (min, avg, max) = (1088017.411, 1132639.293, 1145650.656), stdev = 10681.569
  CI (99.9%): [1125502.799, 1139775.786] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_makeString  thrpt   30  1132639.293 ± 7136.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8657947.488 ops/s
# Warmup Iteration   2: 14624290.597 ops/s
# Warmup Iteration   3: 16693733.751 ops/s
# Warmup Iteration   4: 16607891.175 ops/s
# Warmup Iteration   5: 16564271.463 ops/s
# Warmup Iteration   6: 16550475.680 ops/s
# Warmup Iteration   7: 16655166.838 ops/s
# Warmup Iteration   8: 16622940.064 ops/s
# Warmup Iteration   9: 16689172.060 ops/s
# Warmup Iteration  10: 16517701.769 ops/s
# Warmup Iteration  11: 16652370.480 ops/s
# Warmup Iteration  12: 16716874.571 ops/s
# Warmup Iteration  13: 16500523.013 ops/s
# Warmup Iteration  14: 16567577.792 ops/s
# Warmup Iteration  15: 16359306.338 ops/s
# Warmup Iteration  16: 16653077.649 ops/s
# Warmup Iteration  17: 16667989.259 ops/s
# Warmup Iteration  18: 16738521.165 ops/s
# Warmup Iteration  19: 16585533.408 ops/s
# Warmup Iteration  20: 16688772.431 ops/s
# Warmup Iteration  21: 16389401.017 ops/s
# Warmup Iteration  22: 16578835.767 ops/s
# Warmup Iteration  23: 16739397.319 ops/s
# Warmup Iteration  24: 16437775.946 ops/s
# Warmup Iteration  25: 16692533.695 ops/s
# Warmup Iteration  26: 16743251.025 ops/s
# Warmup Iteration  27: 16676966.600 ops/s
# Warmup Iteration  28: 16526296.376 ops/s
# Warmup Iteration  29: 16510749.733 ops/s
# Warmup Iteration  30: 16636405.452 ops/s
Iteration   1: 16657529.705 ops/s
Iteration   2: 16718025.850 ops/s
Iteration   3: 16785875.683 ops/s
Iteration   4: 16792872.484 ops/s
Iteration   5: 16715034.583 ops/s
Iteration   6: 16670033.384 ops/s
Iteration   7: 16606899.554 ops/s
Iteration   8: 16675029.839 ops/s
Iteration   9: 16631573.515 ops/s
Iteration  10: 16699503.378 ops/s
Iteration  11: 16632720.865 ops/s
Iteration  12: 16613138.897 ops/s
Iteration  13: 16460832.420 ops/s
Iteration  14: 16646493.272 ops/s
Iteration  15: 16747886.319 ops/s
Iteration  16: 16640830.708 ops/s
Iteration  17: 16603542.992 ops/s
Iteration  18: 16678750.933 ops/s
Iteration  19: 16325201.255 ops/s
Iteration  20: 16664005.777 ops/s
Iteration  21: 16764211.402 ops/s
Iteration  22: 16480256.381 ops/s
Iteration  23: 16682878.597 ops/s
Iteration  24: 16593420.898 ops/s
Iteration  25: 16735131.823 ops/s
Iteration  26: 16358992.192 ops/s
Iteration  27: 16458629.715 ops/s
Iteration  28: 16759520.555 ops/s
Iteration  29: 16611253.299 ops/s
Iteration  30: 16517124.156 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_newCollection":
  16630906.681 ±(99.9%) 78873.764 ops/s [Average]
  (min, avg, max) = (16325201.255, 16630906.681, 16792872.484), stdev = 118054.546
  CI (99.9%): [16552032.917, 16709780.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_newCollection  thrpt   30  16630906.681 ± 78873.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5210962.723 ops/s
# Warmup Iteration   2: 8594493.502 ops/s
# Warmup Iteration   3: 10384825.255 ops/s
# Warmup Iteration   4: 10404485.871 ops/s
# Warmup Iteration   5: 10358740.332 ops/s
# Warmup Iteration   6: 10287389.378 ops/s
# Warmup Iteration   7: 10367288.917 ops/s
# Warmup Iteration   8: 10347758.503 ops/s
# Warmup Iteration   9: 10389885.616 ops/s
# Warmup Iteration  10: 10275718.524 ops/s
# Warmup Iteration  11: 10387939.483 ops/s
# Warmup Iteration  12: 10417852.064 ops/s
# Warmup Iteration  13: 10315872.123 ops/s
# Warmup Iteration  14: 10291849.642 ops/s
# Warmup Iteration  15: 10374502.945 ops/s
# Warmup Iteration  16: 10357347.649 ops/s
# Warmup Iteration  17: 10421646.547 ops/s
# Warmup Iteration  18: 10418200.481 ops/s
# Warmup Iteration  19: 10359348.554 ops/s
# Warmup Iteration  20: 10224735.821 ops/s
# Warmup Iteration  21: 10237369.944 ops/s
# Warmup Iteration  22: 10311452.978 ops/s
# Warmup Iteration  23: 10377795.120 ops/s
# Warmup Iteration  24: 10359104.692 ops/s
# Warmup Iteration  25: 10360340.510 ops/s
# Warmup Iteration  26: 10299210.929 ops/s
# Warmup Iteration  27: 10312231.319 ops/s
# Warmup Iteration  28: 10413868.491 ops/s
# Warmup Iteration  29: 10386308.705 ops/s
# Warmup Iteration  30: 10301931.764 ops/s
Iteration   1: 10275489.048 ops/s
Iteration   2: 10253102.101 ops/s
Iteration   3: 10353959.468 ops/s
Iteration   4: 10348732.372 ops/s
Iteration   5: 10391746.174 ops/s
Iteration   6: 10443870.866 ops/s
Iteration   7: 10313963.931 ops/s
Iteration   8: 10348903.990 ops/s
Iteration   9: 10449282.710 ops/s
Iteration  10: 10382123.728 ops/s
Iteration  11: 10324703.291 ops/s
Iteration  12: 10309790.349 ops/s
Iteration  13: 10336879.059 ops/s
Iteration  14: 10428302.240 ops/s
Iteration  15: 10409813.024 ops/s
Iteration  16: 10434980.105 ops/s
Iteration  17: 10493534.325 ops/s
Iteration  18: 10414416.669 ops/s
Iteration  19: 10345341.479 ops/s
Iteration  20: 10259931.270 ops/s
Iteration  21: 10423721.357 ops/s
Iteration  22: 10313943.499 ops/s
Iteration  23: 10302522.181 ops/s
Iteration  24: 10235064.691 ops/s
Iteration  25: 10368184.178 ops/s
Iteration  26: 10363523.131 ops/s
Iteration  27: 10439005.878 ops/s
Iteration  28: 10343844.381 ops/s
Iteration  29: 10333510.911 ops/s
Iteration  30: 10392186.343 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_newCollectionWith":
  10361145.758 ±(99.9%) 42788.028 ops/s [Average]
  (min, avg, max) = (10235064.691, 10361145.758, 10493534.325), stdev = 64043.110
  CI (99.9%): [10318357.731, 10403933.786] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_newCollectionWith  thrpt   30  10361145.758 ± 42788.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_newWithNValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_newWithNValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6740107.783 ops/s
# Warmup Iteration   2: 11251535.820 ops/s
# Warmup Iteration   3: 13132437.879 ops/s
# Warmup Iteration   4: 13062470.684 ops/s
# Warmup Iteration   5: 12975890.171 ops/s
# Warmup Iteration   6: 12919148.158 ops/s
# Warmup Iteration   7: 12995569.846 ops/s
# Warmup Iteration   8: 13001227.341 ops/s
# Warmup Iteration   9: 12990807.441 ops/s
# Warmup Iteration  10: 13123748.916 ops/s
# Warmup Iteration  11: 13079256.004 ops/s
# Warmup Iteration  12: 13041845.880 ops/s
# Warmup Iteration  13: 13043817.134 ops/s
# Warmup Iteration  14: 13127282.111 ops/s
# Warmup Iteration  15: 12949716.882 ops/s
# Warmup Iteration  16: 13133705.112 ops/s
# Warmup Iteration  17: 13152649.019 ops/s
# Warmup Iteration  18: 13053916.163 ops/s
# Warmup Iteration  19: 13122470.407 ops/s
# Warmup Iteration  20: 13124873.574 ops/s
# Warmup Iteration  21: 13128861.589 ops/s
# Warmup Iteration  22: 13189294.063 ops/s
# Warmup Iteration  23: 13133141.521 ops/s
# Warmup Iteration  24: 13112461.661 ops/s
# Warmup Iteration  25: 12995809.215 ops/s
# Warmup Iteration  26: 13140240.426 ops/s
# Warmup Iteration  27: 13088534.850 ops/s
# Warmup Iteration  28: 13112740.144 ops/s
# Warmup Iteration  29: 13122847.714 ops/s
# Warmup Iteration  30: 13129018.009 ops/s
Iteration   1: 13148279.269 ops/s
Iteration   2: 13198664.742 ops/s
Iteration   3: 13100602.371 ops/s
Iteration   4: 13092412.189 ops/s
Iteration   5: 13077747.677 ops/s
Iteration   6: 13196532.610 ops/s
Iteration   7: 12895414.033 ops/s
Iteration   8: 13088207.677 ops/s
Iteration   9: 12994399.808 ops/s
Iteration  10: 13067085.540 ops/s
Iteration  11: 12976457.900 ops/s
Iteration  12: 12856275.159 ops/s
Iteration  13: 12979031.045 ops/s
Iteration  14: 13019582.778 ops/s
Iteration  15: 13104993.344 ops/s
Iteration  16: 13074533.245 ops/s
Iteration  17: 13058981.080 ops/s
Iteration  18: 13078277.710 ops/s
Iteration  19: 12905192.294 ops/s
Iteration  20: 13108828.965 ops/s
Iteration  21: 13051263.962 ops/s
Iteration  22: 13097233.786 ops/s
Iteration  23: 13087700.854 ops/s
Iteration  24: 13178927.225 ops/s
Iteration  25: 13172004.212 ops/s
Iteration  26: 13161620.967 ops/s
Iteration  27: 12974369.187 ops/s
Iteration  28: 12934098.487 ops/s
Iteration  29: 12941638.092 ops/s
Iteration  30: 13141349.376 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_newWithNValues":
  13058723.519 ±(99.9%) 61972.510 ops/s [Average]
  (min, avg, max) = (12856275.159, 13058723.519, 13198664.742), stdev = 92757.542
  CI (99.9%): [12996751.010, 13120696.029] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_newWithNValues  thrpt   30  13058723.519 ± 61972.510  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_newWithNValues_throws_negative_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_newWithNValues_throws_negative_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 744581.106 ops/s
# Warmup Iteration   2: 752349.963 ops/s
# Warmup Iteration   3: 979923.545 ops/s
# Warmup Iteration   4: 979638.911 ops/s
# Warmup Iteration   5: 970085.554 ops/s
# Warmup Iteration   6: 977274.316 ops/s
# Warmup Iteration   7: 983308.246 ops/s
# Warmup Iteration   8: 983017.221 ops/s
# Warmup Iteration   9: 988307.278 ops/s
# Warmup Iteration  10: 974779.981 ops/s
# Warmup Iteration  11: 978733.976 ops/s
# Warmup Iteration  12: 828183.394 ops/s
# Warmup Iteration  13: 980158.524 ops/s
# Warmup Iteration  14: 978762.600 ops/s
# Warmup Iteration  15: 984878.034 ops/s
# Warmup Iteration  16: 969517.364 ops/s
# Warmup Iteration  17: 1043538.036 ops/s
# Warmup Iteration  18: 1037940.394 ops/s
# Warmup Iteration  19: 1042631.368 ops/s
# Warmup Iteration  20: 1044801.363 ops/s
# Warmup Iteration  21: 1040459.973 ops/s
# Warmup Iteration  22: 1037471.431 ops/s
# Warmup Iteration  23: 1039021.997 ops/s
# Warmup Iteration  24: 1040979.468 ops/s
# Warmup Iteration  25: 1042122.867 ops/s
# Warmup Iteration  26: 1040860.423 ops/s
# Warmup Iteration  27: 1044831.837 ops/s
# Warmup Iteration  28: 1036920.636 ops/s
# Warmup Iteration  29: 1037713.931 ops/s
# Warmup Iteration  30: 1037510.576 ops/s
Iteration   1: 1049015.409 ops/s
Iteration   2: 1026011.320 ops/s
Iteration   3: 1041082.619 ops/s
Iteration   4: 1044047.418 ops/s
Iteration   5: 1031767.670 ops/s
Iteration   6: 1041054.293 ops/s
Iteration   7: 1036168.977 ops/s
Iteration   8: 1039123.221 ops/s
Iteration   9: 1039574.160 ops/s
Iteration  10: 1038254.593 ops/s
Iteration  11: 1042774.791 ops/s
Iteration  12: 1042054.668 ops/s
Iteration  13: 1038352.550 ops/s
Iteration  14: 1038089.077 ops/s
Iteration  15: 1020988.598 ops/s
Iteration  16: 1043575.333 ops/s
Iteration  17: 1028394.200 ops/s
Iteration  18: 1036313.847 ops/s
Iteration  19: 1040454.566 ops/s
Iteration  20: 1041468.407 ops/s
Iteration  21: 1028155.786 ops/s
Iteration  22: 1036286.542 ops/s
Iteration  23: 1020995.565 ops/s
Iteration  24: 1043140.424 ops/s
Iteration  25: 1040345.145 ops/s
Iteration  26: 1036244.360 ops/s
Iteration  27: 1033498.751 ops/s
Iteration  28: 1047126.411 ops/s
Iteration  29: 1038627.820 ops/s
Iteration  30: 1027229.113 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_newWithNValues_throws_negative_size":
  1037007.188 ±(99.9%) 4730.574 ops/s [Average]
  (min, avg, max) = (1020988.598, 1037007.188, 1049015.409), stdev = 7080.501
  CI (99.9%): [1032276.613, 1041737.762] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_newWithNValues_throws_negative_size  thrpt   30  1037007.188 ± 4730.574  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5169855.507 ops/s
# Warmup Iteration   2: 8855873.686 ops/s
# Warmup Iteration   3: 10031569.271 ops/s
# Warmup Iteration   4: 10266562.631 ops/s
# Warmup Iteration   5: 10136024.394 ops/s
# Warmup Iteration   6: 10226692.943 ops/s
# Warmup Iteration   7: 10112710.169 ops/s
# Warmup Iteration   8: 10219482.030 ops/s
# Warmup Iteration   9: 10253439.574 ops/s
# Warmup Iteration  10: 10235344.127 ops/s
# Warmup Iteration  11: 10174244.145 ops/s
# Warmup Iteration  12: 10230531.101 ops/s
# Warmup Iteration  13: 10148095.404 ops/s
# Warmup Iteration  14: 10225390.569 ops/s
# Warmup Iteration  15: 10253407.906 ops/s
# Warmup Iteration  16: 10221985.178 ops/s
# Warmup Iteration  17: 10276949.377 ops/s
# Warmup Iteration  18: 10115611.400 ops/s
# Warmup Iteration  19: 10210032.961 ops/s
# Warmup Iteration  20: 10231089.726 ops/s
# Warmup Iteration  21: 10184042.316 ops/s
# Warmup Iteration  22: 10185877.758 ops/s
# Warmup Iteration  23: 10236488.797 ops/s
# Warmup Iteration  24: 10242464.271 ops/s
# Warmup Iteration  25: 10211418.037 ops/s
# Warmup Iteration  26: 10163612.023 ops/s
# Warmup Iteration  27: 10252192.091 ops/s
# Warmup Iteration  28: 10204304.330 ops/s
# Warmup Iteration  29: 10212620.643 ops/s
# Warmup Iteration  30: 10227225.614 ops/s
Iteration   1: 10294244.998 ops/s
Iteration   2: 10244338.719 ops/s
Iteration   3: 10280087.284 ops/s
Iteration   4: 10266422.780 ops/s
Iteration   5: 10315246.656 ops/s
Iteration   6: 10188703.499 ops/s
Iteration   7: 10216693.811 ops/s
Iteration   8: 10249889.740 ops/s
Iteration   9: 10298186.595 ops/s
Iteration  10: 10275381.387 ops/s
Iteration  11: 10254570.891 ops/s
Iteration  12: 10227252.514 ops/s
Iteration  13: 10292666.207 ops/s
Iteration  14: 10228949.826 ops/s
Iteration  15: 10058816.292 ops/s
Iteration  16: 10238292.997 ops/s
Iteration  17: 10275389.684 ops/s
Iteration  18: 10262601.153 ops/s
Iteration  19: 10229061.694 ops/s
Iteration  20: 10276391.120 ops/s
Iteration  21: 10145455.726 ops/s
Iteration  22: 10233026.127 ops/s
Iteration  23: 10206095.441 ops/s
Iteration  24: 10170998.710 ops/s
Iteration  25: 10299788.030 ops/s
Iteration  26: 10163195.317 ops/s
Iteration  27: 10199152.687 ops/s
Iteration  28: 10244103.008 ops/s
Iteration  29: 10279247.550 ops/s
Iteration  30: 10234546.198 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_noneSatisfy":
  10238293.221 ±(99.9%) 36316.708 ops/s [Average]
  (min, avg, max) = (10058816.292, 10238293.221, 10315246.656), stdev = 54357.143
  CI (99.9%): [10201976.513, 10274609.930] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  10238293.221 ± 36316.708  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4117998.437 ops/s
# Warmup Iteration   2: 9406165.436 ops/s
# Warmup Iteration   3: 9360037.952 ops/s
# Warmup Iteration   4: 7662773.609 ops/s
# Warmup Iteration   5: 9313667.337 ops/s
# Warmup Iteration   6: 9191124.323 ops/s
# Warmup Iteration   7: 9346505.244 ops/s
# Warmup Iteration   8: 9375757.471 ops/s
# Warmup Iteration   9: 9377125.572 ops/s
# Warmup Iteration  10: 9297595.067 ops/s
# Warmup Iteration  11: 9223896.101 ops/s
# Warmup Iteration  12: 9396842.080 ops/s
# Warmup Iteration  13: 9369761.405 ops/s
# Warmup Iteration  14: 9409624.161 ops/s
# Warmup Iteration  15: 9350576.395 ops/s
# Warmup Iteration  16: 9376783.272 ops/s
# Warmup Iteration  17: 9355299.123 ops/s
# Warmup Iteration  18: 9370712.243 ops/s
# Warmup Iteration  19: 9369090.071 ops/s
# Warmup Iteration  20: 9311237.015 ops/s
# Warmup Iteration  21: 9383770.014 ops/s
# Warmup Iteration  22: 9208233.628 ops/s
# Warmup Iteration  23: 9360070.059 ops/s
# Warmup Iteration  24: 9280547.694 ops/s
# Warmup Iteration  25: 9390133.208 ops/s
# Warmup Iteration  26: 9377073.862 ops/s
# Warmup Iteration  27: 9365118.179 ops/s
# Warmup Iteration  28: 9366762.160 ops/s
# Warmup Iteration  29: 9386485.065 ops/s
# Warmup Iteration  30: 9358243.057 ops/s
Iteration   1: 9339298.295 ops/s
Iteration   2: 9378866.523 ops/s
Iteration   3: 9385645.439 ops/s
Iteration   4: 9361395.557 ops/s
Iteration   5: 9385027.477 ops/s
Iteration   6: 9344393.323 ops/s
Iteration   7: 9340765.029 ops/s
Iteration   8: 9363202.812 ops/s
Iteration   9: 9195514.998 ops/s
Iteration  10: 9342229.078 ops/s
Iteration  11: 9348942.351 ops/s
Iteration  12: 9416132.894 ops/s
Iteration  13: 9337429.447 ops/s
Iteration  14: 9370893.536 ops/s
Iteration  15: 9411602.112 ops/s
Iteration  16: 9382784.504 ops/s
Iteration  17: 9335078.131 ops/s
Iteration  18: 9354219.270 ops/s
Iteration  19: 9385411.748 ops/s
Iteration  20: 9239108.823 ops/s
Iteration  21: 9373810.283 ops/s
Iteration  22: 9371348.415 ops/s
Iteration  23: 9373265.074 ops/s
Iteration  24: 9354726.439 ops/s
Iteration  25: 9414445.382 ops/s
Iteration  26: 9351164.110 ops/s
Iteration  27: 9352288.023 ops/s
Iteration  28: 9209011.364 ops/s
Iteration  29: 9359486.520 ops/s
Iteration  30: 9417623.899 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_notEmpty":
  9353170.362 ±(99.9%) 35398.406 ops/s [Average]
  (min, avg, max) = (9195514.998, 9353170.362, 9417623.899), stdev = 52982.671
  CI (99.9%): [9317771.956, 9388568.768] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_notEmpty  thrpt   30  9353170.362 ± 35398.406  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4060051.378 ops/s
# Warmup Iteration   2: 8363946.749 ops/s
# Warmup Iteration   3: 6990525.570 ops/s
# Warmup Iteration   4: 8284459.924 ops/s
# Warmup Iteration   5: 8344273.056 ops/s
# Warmup Iteration   6: 8279009.455 ops/s
# Warmup Iteration   7: 8273789.435 ops/s
# Warmup Iteration   8: 8270266.250 ops/s
# Warmup Iteration   9: 8272221.242 ops/s
# Warmup Iteration  10: 8174634.560 ops/s
# Warmup Iteration  11: 8271478.893 ops/s
# Warmup Iteration  12: 8292204.952 ops/s
# Warmup Iteration  13: 8260832.888 ops/s
# Warmup Iteration  14: 8260173.479 ops/s
# Warmup Iteration  15: 8185279.968 ops/s
# Warmup Iteration  16: 8258754.924 ops/s
# Warmup Iteration  17: 8291188.763 ops/s
# Warmup Iteration  18: 8294525.296 ops/s
# Warmup Iteration  19: 8316091.523 ops/s
# Warmup Iteration  20: 8319288.274 ops/s
# Warmup Iteration  21: 8299551.130 ops/s
# Warmup Iteration  22: 8238203.405 ops/s
# Warmup Iteration  23: 8318606.777 ops/s
# Warmup Iteration  24: 8281855.767 ops/s
# Warmup Iteration  25: 8257132.928 ops/s
# Warmup Iteration  26: 8287969.453 ops/s
# Warmup Iteration  27: 8272207.437 ops/s
# Warmup Iteration  28: 8314467.208 ops/s
# Warmup Iteration  29: 8308837.352 ops/s
# Warmup Iteration  30: 8290525.967 ops/s
Iteration   1: 8325842.536 ops/s
Iteration   2: 8278726.815 ops/s
Iteration   3: 8288602.973 ops/s
Iteration   4: 8336228.971 ops/s
Iteration   5: 8191521.559 ops/s
Iteration   6: 8200582.986 ops/s
Iteration   7: 8284509.457 ops/s
Iteration   8: 8291685.890 ops/s
Iteration   9: 8269454.520 ops/s
Iteration  10: 8314756.126 ops/s
Iteration  11: 8294359.431 ops/s
Iteration  12: 8278828.858 ops/s
Iteration  13: 8252105.358 ops/s
Iteration  14: 8299099.139 ops/s
Iteration  15: 8325719.026 ops/s
Iteration  16: 8309765.651 ops/s
Iteration  17: 8346899.058 ops/s
Iteration  18: 8290777.527 ops/s
Iteration  19: 8180817.575 ops/s
Iteration  20: 8223488.621 ops/s
Iteration  21: 8258272.212 ops/s
Iteration  22: 8285135.900 ops/s
Iteration  23: 8292894.720 ops/s
Iteration  24: 8227128.406 ops/s
Iteration  25: 8313757.509 ops/s
Iteration  26: 8263374.843 ops/s
Iteration  27: 8245299.269 ops/s
Iteration  28: 8242909.822 ops/s
Iteration  29: 8293928.516 ops/s
Iteration  30: 8243281.626 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reduce":
  8274991.830 ±(99.9%) 28057.776 ops/s [Average]
  (min, avg, max) = (8180817.575, 8274991.830, 8346899.058), stdev = 41995.562
  CI (99.9%): [8246934.054, 8303049.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_reduce  thrpt   30  8274991.830 ± 28057.776  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3575258.524 ops/s
# Warmup Iteration   2: 7534835.096 ops/s
# Warmup Iteration   3: 6436825.584 ops/s
# Warmup Iteration   4: 7566700.637 ops/s
# Warmup Iteration   5: 7482737.472 ops/s
# Warmup Iteration   6: 7491967.320 ops/s
# Warmup Iteration   7: 7569677.983 ops/s
# Warmup Iteration   8: 7556578.935 ops/s
# Warmup Iteration   9: 7561122.318 ops/s
# Warmup Iteration  10: 7524417.536 ops/s
# Warmup Iteration  11: 7556818.070 ops/s
# Warmup Iteration  12: 7603058.357 ops/s
# Warmup Iteration  13: 7585674.198 ops/s
# Warmup Iteration  14: 7554861.443 ops/s
# Warmup Iteration  15: 7583125.931 ops/s
# Warmup Iteration  16: 7561607.580 ops/s
# Warmup Iteration  17: 7523318.586 ops/s
# Warmup Iteration  18: 7574006.659 ops/s
# Warmup Iteration  19: 7527580.053 ops/s
# Warmup Iteration  20: 7550408.050 ops/s
# Warmup Iteration  21: 7537256.876 ops/s
# Warmup Iteration  22: 7495007.270 ops/s
# Warmup Iteration  23: 7568868.970 ops/s
# Warmup Iteration  24: 7446067.190 ops/s
# Warmup Iteration  25: 7564216.084 ops/s
# Warmup Iteration  26: 7471873.037 ops/s
# Warmup Iteration  27: 7507969.583 ops/s
# Warmup Iteration  28: 7550612.521 ops/s
# Warmup Iteration  29: 7531644.487 ops/s
# Warmup Iteration  30: 7535719.294 ops/s
Iteration   1: 7537983.660 ops/s
Iteration   2: 7523232.272 ops/s
Iteration   3: 7594956.411 ops/s
Iteration   4: 7568111.302 ops/s
Iteration   5: 7492088.582 ops/s
Iteration   6: 7419771.455 ops/s
Iteration   7: 7579017.341 ops/s
Iteration   8: 7584469.171 ops/s
Iteration   9: 7423308.037 ops/s
Iteration  10: 7580136.136 ops/s
Iteration  11: 7475519.497 ops/s
Iteration  12: 7556119.200 ops/s
Iteration  13: 7560262.045 ops/s
Iteration  14: 7563757.987 ops/s
Iteration  15: 7445248.090 ops/s
Iteration  16: 7580584.194 ops/s
Iteration  17: 7541189.020 ops/s
Iteration  18: 7530163.025 ops/s
Iteration  19: 7572700.394 ops/s
Iteration  20: 7551481.256 ops/s
Iteration  21: 7280295.339 ops/s
Iteration  22: 7554809.681 ops/s
Iteration  23: 7579044.683 ops/s
Iteration  24: 7525017.331 ops/s
Iteration  25: 7548155.926 ops/s
Iteration  26: 7558354.900 ops/s
Iteration  27: 7522512.984 ops/s
Iteration  28: 7565751.534 ops/s
Iteration  29: 7552045.375 ops/s
Iteration  30: 7409178.761 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reduceIfEmpty":
  7525842.186 ±(99.9%) 46242.287 ops/s [Average]
  (min, avg, max) = (7280295.339, 7525842.186, 7594956.411), stdev = 69213.283
  CI (99.9%): [7479599.899, 7572084.473] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  7525842.186 ± 46242.287  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 746602.664 ops/s
# Warmup Iteration   2: 763499.195 ops/s
# Warmup Iteration   3: 1023047.259 ops/s
# Warmup Iteration   4: 1030886.265 ops/s
# Warmup Iteration   5: 1028557.967 ops/s
# Warmup Iteration   6: 1028881.099 ops/s
# Warmup Iteration   7: 1026940.117 ops/s
# Warmup Iteration   8: 1009784.476 ops/s
# Warmup Iteration   9: 1019938.693 ops/s
# Warmup Iteration  10: 1015123.335 ops/s
# Warmup Iteration  11: 920203.293 ops/s
# Warmup Iteration  12: 964579.039 ops/s
# Warmup Iteration  13: 1014070.860 ops/s
# Warmup Iteration  14: 1030686.513 ops/s
# Warmup Iteration  15: 1022998.038 ops/s
# Warmup Iteration  16: 1014874.549 ops/s
# Warmup Iteration  17: 1081148.529 ops/s
# Warmup Iteration  18: 1090224.246 ops/s
# Warmup Iteration  19: 1089033.876 ops/s
# Warmup Iteration  20: 1088370.985 ops/s
# Warmup Iteration  21: 1089808.817 ops/s
# Warmup Iteration  22: 1087689.574 ops/s
# Warmup Iteration  23: 1078882.470 ops/s
# Warmup Iteration  24: 1089361.906 ops/s
# Warmup Iteration  25: 1086434.080 ops/s
# Warmup Iteration  26: 1087714.286 ops/s
# Warmup Iteration  27: 1084815.567 ops/s
# Warmup Iteration  28: 1089887.705 ops/s
# Warmup Iteration  29: 1084664.198 ops/s
# Warmup Iteration  30: 1090989.658 ops/s
Iteration   1: 1084278.807 ops/s
Iteration   2: 1090225.654 ops/s
Iteration   3: 1084061.499 ops/s
Iteration   4: 1086608.336 ops/s
Iteration   5: 1089918.620 ops/s
Iteration   6: 1082860.337 ops/s
Iteration   7: 1079573.140 ops/s
Iteration   8: 1083878.307 ops/s
Iteration   9: 1082287.235 ops/s
Iteration  10: 1090607.659 ops/s
Iteration  11: 1076111.918 ops/s
Iteration  12: 1090296.379 ops/s
Iteration  13: 1087180.426 ops/s
Iteration  14: 1089972.066 ops/s
Iteration  15: 1089896.967 ops/s
Iteration  16: 1069560.685 ops/s
Iteration  17: 1082128.616 ops/s
Iteration  18: 1093179.602 ops/s
Iteration  19: 1092101.244 ops/s
Iteration  20: 1085828.238 ops/s
Iteration  21: 1088819.010 ops/s
Iteration  22: 1083356.188 ops/s
Iteration  23: 1088132.651 ops/s
Iteration  24: 1086812.448 ops/s
Iteration  25: 1080984.625 ops/s
Iteration  26: 1085008.388 ops/s
Iteration  27: 1089813.242 ops/s
Iteration  28: 1070128.684 ops/s
Iteration  29: 1084506.288 ops/s
Iteration  30: 1070609.274 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1084624.218 ±(99.9%) 4204.803 ops/s [Average]
  (min, avg, max) = (1069560.685, 1084624.218, 1093179.602), stdev = 6293.551
  CI (99.9%): [1080419.415, 1088829.021] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1084624.218 ± 4204.803  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3019625.391 ops/s
# Warmup Iteration   2: 6625829.752 ops/s
# Warmup Iteration   3: 5823917.610 ops/s
# Warmup Iteration   4: 6926239.063 ops/s
# Warmup Iteration   5: 6908630.055 ops/s
# Warmup Iteration   6: 6948982.004 ops/s
# Warmup Iteration   7: 6971851.261 ops/s
# Warmup Iteration   8: 6916970.034 ops/s
# Warmup Iteration   9: 6924505.363 ops/s
# Warmup Iteration  10: 6940675.305 ops/s
# Warmup Iteration  11: 6898821.266 ops/s
# Warmup Iteration  12: 6871590.568 ops/s
# Warmup Iteration  13: 6897876.108 ops/s
# Warmup Iteration  14: 6928689.556 ops/s
# Warmup Iteration  15: 6960464.071 ops/s
# Warmup Iteration  16: 6928210.321 ops/s
# Warmup Iteration  17: 6861453.919 ops/s
# Warmup Iteration  18: 6766502.787 ops/s
# Warmup Iteration  19: 6894056.651 ops/s
# Warmup Iteration  20: 6931479.514 ops/s
# Warmup Iteration  21: 6943299.641 ops/s
# Warmup Iteration  22: 6916611.319 ops/s
# Warmup Iteration  23: 6912742.317 ops/s
# Warmup Iteration  24: 6928423.930 ops/s
# Warmup Iteration  25: 6917304.873 ops/s
# Warmup Iteration  26: 6925186.458 ops/s
# Warmup Iteration  27: 6885959.047 ops/s
# Warmup Iteration  28: 6883575.837 ops/s
# Warmup Iteration  29: 6886591.175 ops/s
# Warmup Iteration  30: 6917456.629 ops/s
Iteration   1: 6924637.244 ops/s
Iteration   2: 6927171.209 ops/s
Iteration   3: 6918524.431 ops/s
Iteration   4: 6895865.430 ops/s
Iteration   5: 6911836.940 ops/s
Iteration   6: 6787265.135 ops/s
Iteration   7: 6928354.080 ops/s
Iteration   8: 6924755.444 ops/s
Iteration   9: 6887659.941 ops/s
Iteration  10: 6888981.207 ops/s
Iteration  11: 6865707.673 ops/s
Iteration  12: 6906672.580 ops/s
Iteration  13: 6934213.320 ops/s
Iteration  14: 6931327.475 ops/s
Iteration  15: 6890695.084 ops/s
Iteration  16: 6943973.611 ops/s
Iteration  17: 6934833.808 ops/s
Iteration  18: 6923408.812 ops/s
Iteration  19: 6911243.389 ops/s
Iteration  20: 6926567.754 ops/s
Iteration  21: 6882936.356 ops/s
Iteration  22: 6953546.227 ops/s
Iteration  23: 6927151.341 ops/s
Iteration  24: 6911372.571 ops/s
Iteration  25: 6933286.225 ops/s
Iteration  26: 6950617.230 ops/s
Iteration  27: 6875396.132 ops/s
Iteration  28: 6904420.956 ops/s
Iteration  29: 6945707.574 ops/s
Iteration  30: 6928732.807 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reject":
  6912562.066 ±(99.9%) 21749.368 ops/s [Average]
  (min, avg, max) = (6787265.135, 6912562.066, 6953546.227), stdev = 32553.432
  CI (99.9%): [6890812.698, 6934311.434] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_reject  thrpt   30  6912562.066 ± 21749.368  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 924543.873 ops/s
# Warmup Iteration   2: 2071894.226 ops/s
# Warmup Iteration   3: 2047438.210 ops/s
# Warmup Iteration   4: 1710541.263 ops/s
# Warmup Iteration   5: 2054183.822 ops/s
# Warmup Iteration   6: 2048194.181 ops/s
# Warmup Iteration   7: 2044176.909 ops/s
# Warmup Iteration   8: 2064340.237 ops/s
# Warmup Iteration   9: 2051670.223 ops/s
# Warmup Iteration  10: 2058348.944 ops/s
# Warmup Iteration  11: 2056095.676 ops/s
# Warmup Iteration  12: 2033529.180 ops/s
# Warmup Iteration  13: 2052942.000 ops/s
# Warmup Iteration  14: 2048671.100 ops/s
# Warmup Iteration  15: 2052902.157 ops/s
# Warmup Iteration  16: 2060519.508 ops/s
# Warmup Iteration  17: 2063028.737 ops/s
# Warmup Iteration  18: 2047952.068 ops/s
# Warmup Iteration  19: 2057654.885 ops/s
# Warmup Iteration  20: 2034342.408 ops/s
# Warmup Iteration  21: 2064913.159 ops/s
# Warmup Iteration  22: 2065061.452 ops/s
# Warmup Iteration  23: 2065893.327 ops/s
# Warmup Iteration  24: 2041516.456 ops/s
# Warmup Iteration  25: 2045199.495 ops/s
# Warmup Iteration  26: 2065128.827 ops/s
# Warmup Iteration  27: 2064916.109 ops/s
# Warmup Iteration  28: 2051869.222 ops/s
# Warmup Iteration  29: 2059991.764 ops/s
# Warmup Iteration  30: 2055186.313 ops/s
Iteration   1: 2061480.070 ops/s
Iteration   2: 2044004.292 ops/s
Iteration   3: 2059728.812 ops/s
Iteration   4: 2065034.185 ops/s
Iteration   5: 2059735.559 ops/s
Iteration   6: 2063911.751 ops/s
Iteration   7: 2060794.710 ops/s
Iteration   8: 2069302.071 ops/s
Iteration   9: 2005300.196 ops/s
Iteration  10: 2057831.695 ops/s
Iteration  11: 2057118.213 ops/s
Iteration  12: 2060921.120 ops/s
Iteration  13: 2061361.046 ops/s
Iteration  14: 2057179.073 ops/s
Iteration  15: 2060427.244 ops/s
Iteration  16: 2069248.873 ops/s
Iteration  17: 2065877.933 ops/s
Iteration  18: 2058403.160 ops/s
Iteration  19: 2061652.687 ops/s
Iteration  20: 2063476.676 ops/s
Iteration  21: 2062361.104 ops/s
Iteration  22: 2013403.544 ops/s
Iteration  23: 2059700.927 ops/s
Iteration  24: 2061776.666 ops/s
Iteration  25: 2022362.223 ops/s
Iteration  26: 2067300.366 ops/s
Iteration  27: 2002952.209 ops/s
Iteration  28: 2056171.002 ops/s
Iteration  29: 2063910.843 ops/s
Iteration  30: 2070036.491 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_remove":
  2054758.825 ±(99.9%) 12250.711 ops/s [Average]
  (min, avg, max) = (2002952.209, 2054758.825, 2070036.491), stdev = 18336.290
  CI (99.9%): [2042508.113, 2067009.536] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_remove  thrpt   30  2054758.825 ± 12250.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 643257.720 ops/s
# Warmup Iteration   2: 1500120.718 ops/s
# Warmup Iteration   3: 1507237.390 ops/s
# Warmup Iteration   4: 1244070.884 ops/s
# Warmup Iteration   5: 1504455.268 ops/s
# Warmup Iteration   6: 1509939.898 ops/s
# Warmup Iteration   7: 1499465.630 ops/s
# Warmup Iteration   8: 1507400.425 ops/s
# Warmup Iteration   9: 1514033.840 ops/s
# Warmup Iteration  10: 1505187.399 ops/s
# Warmup Iteration  11: 1496766.333 ops/s
# Warmup Iteration  12: 1498518.345 ops/s
# Warmup Iteration  13: 1511250.002 ops/s
# Warmup Iteration  14: 1509387.596 ops/s
# Warmup Iteration  15: 1495547.382 ops/s
# Warmup Iteration  16: 1515051.809 ops/s
# Warmup Iteration  17: 1492370.833 ops/s
# Warmup Iteration  18: 1501218.585 ops/s
# Warmup Iteration  19: 1497162.231 ops/s
# Warmup Iteration  20: 1504169.187 ops/s
# Warmup Iteration  21: 1481336.032 ops/s
# Warmup Iteration  22: 1502511.473 ops/s
# Warmup Iteration  23: 1508720.117 ops/s
# Warmup Iteration  24: 1514672.050 ops/s
# Warmup Iteration  25: 1507003.440 ops/s
# Warmup Iteration  26: 1502511.107 ops/s
# Warmup Iteration  27: 1501923.805 ops/s
# Warmup Iteration  28: 1501620.365 ops/s
# Warmup Iteration  29: 1499306.466 ops/s
# Warmup Iteration  30: 1508224.367 ops/s
Iteration   1: 1504119.710 ops/s
Iteration   2: 1505394.941 ops/s
Iteration   3: 1507594.132 ops/s
Iteration   4: 1496256.294 ops/s
Iteration   5: 1507007.597 ops/s
Iteration   6: 1504697.595 ops/s
Iteration   7: 1508960.448 ops/s
Iteration   8: 1499850.250 ops/s
Iteration   9: 1510443.323 ops/s
Iteration  10: 1502907.859 ops/s
Iteration  11: 1506336.447 ops/s
Iteration  12: 1501224.689 ops/s
Iteration  13: 1503641.753 ops/s
Iteration  14: 1502397.800 ops/s
Iteration  15: 1511219.983 ops/s
Iteration  16: 1500484.402 ops/s
Iteration  17: 1504617.668 ops/s
Iteration  18: 1508991.464 ops/s
Iteration  19: 1506906.209 ops/s
Iteration  20: 1510629.567 ops/s
Iteration  21: 1507853.340 ops/s
Iteration  22: 1504129.942 ops/s
Iteration  23: 1508060.725 ops/s
Iteration  24: 1510068.008 ops/s
Iteration  25: 1507932.314 ops/s
Iteration  26: 1507515.552 ops/s
Iteration  27: 1495078.381 ops/s
Iteration  28: 1503554.117 ops/s
Iteration  29: 1508927.907 ops/s
Iteration  30: 1508502.548 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAll":
  1505510.166 ±(99.9%) 2714.963 ops/s [Average]
  (min, avg, max) = (1495078.381, 1505510.166, 1511219.983), stdev = 4063.630
  CI (99.9%): [1502795.202, 1508225.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_removeAll  thrpt   30  1505510.166 ± 2714.963  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 459786.563 ops/s
# Warmup Iteration   2: 1042797.604 ops/s
# Warmup Iteration   3: 1062876.881 ops/s
# Warmup Iteration   4: 881846.809 ops/s
# Warmup Iteration   5: 1065586.525 ops/s
# Warmup Iteration   6: 1052231.500 ops/s
# Warmup Iteration   7: 1066169.590 ops/s
# Warmup Iteration   8: 1067137.326 ops/s
# Warmup Iteration   9: 1061199.003 ops/s
# Warmup Iteration  10: 1052913.694 ops/s
# Warmup Iteration  11: 1063715.227 ops/s
# Warmup Iteration  12: 1058085.724 ops/s
# Warmup Iteration  13: 1058036.910 ops/s
# Warmup Iteration  14: 1066290.840 ops/s
# Warmup Iteration  15: 1064232.405 ops/s
# Warmup Iteration  16: 1062392.433 ops/s
# Warmup Iteration  17: 1063901.792 ops/s
# Warmup Iteration  18: 1064420.527 ops/s
# Warmup Iteration  19: 1067286.241 ops/s
# Warmup Iteration  20: 1069539.674 ops/s
# Warmup Iteration  21: 1065884.196 ops/s
# Warmup Iteration  22: 1061619.929 ops/s
# Warmup Iteration  23: 1068082.840 ops/s
# Warmup Iteration  24: 1067839.363 ops/s
# Warmup Iteration  25: 1064778.423 ops/s
# Warmup Iteration  26: 1062251.968 ops/s
# Warmup Iteration  27: 1065594.565 ops/s
# Warmup Iteration  28: 1068034.048 ops/s
# Warmup Iteration  29: 1068403.480 ops/s
# Warmup Iteration  30: 1059695.560 ops/s
Iteration   1: 1062332.216 ops/s
Iteration   2: 1051406.087 ops/s
Iteration   3: 1063486.162 ops/s
Iteration   4: 1067340.814 ops/s
Iteration   5: 1064638.448 ops/s
Iteration   6: 1070390.879 ops/s
Iteration   7: 1065575.192 ops/s
Iteration   8: 1049470.430 ops/s
Iteration   9: 1061473.570 ops/s
Iteration  10: 1066959.097 ops/s
Iteration  11: 1066591.307 ops/s
Iteration  12: 1071012.148 ops/s
Iteration  13: 1062327.035 ops/s
Iteration  14: 1066062.328 ops/s
Iteration  15: 1068702.796 ops/s
Iteration  16: 1062778.048 ops/s
Iteration  17: 1069034.772 ops/s
Iteration  18: 1070575.029 ops/s
Iteration  19: 1064730.571 ops/s
Iteration  20: 1068349.544 ops/s
Iteration  21: 1047916.992 ops/s
Iteration  22: 1069630.587 ops/s
Iteration  23: 1060343.419 ops/s
Iteration  24: 1069151.184 ops/s
Iteration  25: 1065385.239 ops/s
Iteration  26: 1049008.296 ops/s
Iteration  27: 1064537.855 ops/s
Iteration  28: 1062810.626 ops/s
Iteration  29: 1061355.337 ops/s
Iteration  30: 1047986.240 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAll_iterable":
  1063045.408 ±(99.9%) 4662.146 ops/s [Average]
  (min, avg, max) = (1047916.992, 1063045.408, 1071012.148), stdev = 6978.081
  CI (99.9%): [1058383.262, 1067707.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  1063045.408 ± 4662.146  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7203015.872 ops/s
# Warmup Iteration   2: 14476162.071 ops/s
# Warmup Iteration   3: 12763858.658 ops/s
# Warmup Iteration   4: 14748464.074 ops/s
# Warmup Iteration   5: 14863529.928 ops/s
# Warmup Iteration   6: 14884793.916 ops/s
# Warmup Iteration   7: 14795035.400 ops/s
# Warmup Iteration   8: 14807430.306 ops/s
# Warmup Iteration   9: 14800987.098 ops/s
# Warmup Iteration  10: 14842411.570 ops/s
# Warmup Iteration  11: 14709206.822 ops/s
# Warmup Iteration  12: 14871281.318 ops/s
# Warmup Iteration  13: 14828526.669 ops/s
# Warmup Iteration  14: 14797455.249 ops/s
# Warmup Iteration  15: 14922953.324 ops/s
# Warmup Iteration  16: 14810948.225 ops/s
# Warmup Iteration  17: 14595238.636 ops/s
# Warmup Iteration  18: 14709667.860 ops/s
# Warmup Iteration  19: 14787583.341 ops/s
# Warmup Iteration  20: 14745683.402 ops/s
# Warmup Iteration  21: 14885018.535 ops/s
# Warmup Iteration  22: 14810315.345 ops/s
# Warmup Iteration  23: 14872665.853 ops/s
# Warmup Iteration  24: 14821066.646 ops/s
# Warmup Iteration  25: 14713556.868 ops/s
# Warmup Iteration  26: 14864264.384 ops/s
# Warmup Iteration  27: 14866168.348 ops/s
# Warmup Iteration  28: 14813974.499 ops/s
# Warmup Iteration  29: 14740175.119 ops/s
# Warmup Iteration  30: 14721061.678 ops/s
Iteration   1: 14985409.432 ops/s
Iteration   2: 14788556.913 ops/s
Iteration   3: 14826873.879 ops/s
Iteration   4: 14847571.122 ops/s
Iteration   5: 14710875.151 ops/s
Iteration   6: 14796332.750 ops/s
Iteration   7: 14823312.360 ops/s
Iteration   8: 14909477.277 ops/s
Iteration   9: 14842151.059 ops/s
Iteration  10: 14857741.903 ops/s
Iteration  11: 14512885.652 ops/s
Iteration  12: 14808190.091 ops/s
Iteration  13: 14604855.146 ops/s
Iteration  14: 14820993.562 ops/s
Iteration  15: 14809979.291 ops/s
Iteration  16: 14781302.810 ops/s
Iteration  17: 14782810.231 ops/s
Iteration  18: 14835967.514 ops/s
Iteration  19: 14734522.261 ops/s
Iteration  20: 14915803.495 ops/s
Iteration  21: 14835700.676 ops/s
Iteration  22: 14928759.153 ops/s
Iteration  23: 14811002.874 ops/s
Iteration  24: 14969630.407 ops/s
Iteration  25: 14917058.388 ops/s
Iteration  26: 14881833.295 ops/s
Iteration  27: 14623295.861 ops/s
Iteration  28: 14933042.960 ops/s
Iteration  29: 14829479.437 ops/s
Iteration  30: 14837616.735 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAtIndex":
  14818767.723 ±(99.9%) 69259.144 ops/s [Average]
  (min, avg, max) = (14512885.652, 14818767.723, 14985409.432), stdev = 103663.834
  CI (99.9%): [14749508.579, 14888026.867] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  14818767.723 ± 69259.144  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAtIndex_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAtIndex_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707486.808 ops/s
# Warmup Iteration   2: 712608.385 ops/s
# Warmup Iteration   3: 949239.937 ops/s
# Warmup Iteration   4: 959577.697 ops/s
# Warmup Iteration   5: 944734.390 ops/s
# Warmup Iteration   6: 960106.952 ops/s
# Warmup Iteration   7: 962148.578 ops/s
# Warmup Iteration   8: 966438.027 ops/s
# Warmup Iteration   9: 958966.728 ops/s
# Warmup Iteration  10: 948476.976 ops/s
# Warmup Iteration  11: 945696.905 ops/s
# Warmup Iteration  12: 817770.574 ops/s
# Warmup Iteration  13: 948993.113 ops/s
# Warmup Iteration  14: 956651.383 ops/s
# Warmup Iteration  15: 956466.988 ops/s
# Warmup Iteration  16: 959185.071 ops/s
# Warmup Iteration  17: 1008551.545 ops/s
# Warmup Iteration  18: 1009676.933 ops/s
# Warmup Iteration  19: 1012164.780 ops/s
# Warmup Iteration  20: 1011058.168 ops/s
# Warmup Iteration  21: 1012240.716 ops/s
# Warmup Iteration  22: 995117.553 ops/s
# Warmup Iteration  23: 1007043.778 ops/s
# Warmup Iteration  24: 1009221.088 ops/s
# Warmup Iteration  25: 999792.150 ops/s
# Warmup Iteration  26: 1002653.329 ops/s
# Warmup Iteration  27: 997039.841 ops/s
# Warmup Iteration  28: 1009128.361 ops/s
# Warmup Iteration  29: 1005681.182 ops/s
# Warmup Iteration  30: 1012616.023 ops/s
Iteration   1: 1010077.437 ops/s
Iteration   2: 1007814.300 ops/s
Iteration   3: 1008134.163 ops/s
Iteration   4: 1011030.056 ops/s
Iteration   5: 1007983.445 ops/s
Iteration   6: 1000814.051 ops/s
Iteration   7: 1017626.943 ops/s
Iteration   8: 1011158.367 ops/s
Iteration   9: 1009284.347 ops/s
Iteration  10: 1003142.205 ops/s
Iteration  11: 1011436.694 ops/s
Iteration  12: 1009784.180 ops/s
Iteration  13: 1012385.512 ops/s
Iteration  14: 1010802.499 ops/s
Iteration  15: 1010186.309 ops/s
Iteration  16: 1008313.628 ops/s
Iteration  17: 1005649.717 ops/s
Iteration  18: 1011698.773 ops/s
Iteration  19: 1013690.520 ops/s
Iteration  20: 1015053.076 ops/s
Iteration  21: 1014566.580 ops/s
Iteration  22: 1007640.032 ops/s
Iteration  23: 1014477.300 ops/s
Iteration  24: 1014076.994 ops/s
Iteration  25: 1009401.757 ops/s
Iteration  26: 1009149.272 ops/s
Iteration  27: 1011147.741 ops/s
Iteration  28: 997983.676 ops/s
Iteration  29: 1012063.783 ops/s
Iteration  30: 1016006.787 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAtIndex_throws_index_greater_than_size":
  1010086.005 ±(99.9%) 2848.421 ops/s [Average]
  (min, avg, max) = (997983.676, 1010086.005, 1017626.943), stdev = 4263.383
  CI (99.9%): [1007237.584, 1012934.426] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_removeAtIndex_throws_index_greater_than_size  thrpt   30  1010086.005 ± 2848.421  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAtIndex_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAtIndex_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 695540.270 ops/s
# Warmup Iteration   2: 710127.245 ops/s
# Warmup Iteration   3: 947751.764 ops/s
# Warmup Iteration   4: 939499.079 ops/s
# Warmup Iteration   5: 943759.929 ops/s
# Warmup Iteration   6: 945076.149 ops/s
# Warmup Iteration   7: 935564.646 ops/s
# Warmup Iteration   8: 943258.902 ops/s
# Warmup Iteration   9: 933059.367 ops/s
# Warmup Iteration  10: 943639.430 ops/s
# Warmup Iteration  11: 861723.217 ops/s
# Warmup Iteration  12: 870505.569 ops/s
# Warmup Iteration  13: 944024.981 ops/s
# Warmup Iteration  14: 938799.682 ops/s
# Warmup Iteration  15: 944769.308 ops/s
# Warmup Iteration  16: 945167.536 ops/s
# Warmup Iteration  17: 992403.346 ops/s
# Warmup Iteration  18: 999590.989 ops/s
# Warmup Iteration  19: 997750.105 ops/s
# Warmup Iteration  20: 1001352.953 ops/s
# Warmup Iteration  21: 991109.215 ops/s
# Warmup Iteration  22: 993568.292 ops/s
# Warmup Iteration  23: 993179.191 ops/s
# Warmup Iteration  24: 987347.067 ops/s
# Warmup Iteration  25: 1000361.961 ops/s
# Warmup Iteration  26: 1000463.353 ops/s
# Warmup Iteration  27: 996691.982 ops/s
# Warmup Iteration  28: 987466.052 ops/s
# Warmup Iteration  29: 988540.737 ops/s
# Warmup Iteration  30: 996089.142 ops/s
Iteration   1: 993258.902 ops/s
Iteration   2: 1001371.451 ops/s
Iteration   3: 1001502.288 ops/s
Iteration   4: 982399.771 ops/s
Iteration   5: 997047.503 ops/s
Iteration   6: 1004747.342 ops/s
Iteration   7: 998648.586 ops/s
Iteration   8: 994677.344 ops/s
Iteration   9: 975737.907 ops/s
Iteration  10: 1002148.737 ops/s
Iteration  11: 990973.003 ops/s
Iteration  12: 1004610.709 ops/s
Iteration  13: 998470.058 ops/s
Iteration  14: 999349.577 ops/s
Iteration  15: 1000143.009 ops/s
Iteration  16: 996904.229 ops/s
Iteration  17: 998486.674 ops/s
Iteration  18: 1001098.745 ops/s
Iteration  19: 1000086.474 ops/s
Iteration  20: 989742.044 ops/s
Iteration  21: 1003318.535 ops/s
Iteration  22: 1001374.804 ops/s
Iteration  23: 996596.204 ops/s
Iteration  24: 1003715.650 ops/s
Iteration  25: 1000669.242 ops/s
Iteration  26: 999992.134 ops/s
Iteration  27: 1002975.162 ops/s
Iteration  28: 1001542.915 ops/s
Iteration  29: 998324.432 ops/s
Iteration  30: 978711.731 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeAtIndex_throws_index_negative":
  997287.505 ±(99.9%) 4841.913 ops/s [Average]
  (min, avg, max) = (975737.907, 997287.505, 1004747.342), stdev = 7247.149
  CI (99.9%): [992445.592, 1002129.419] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_removeAtIndex_throws_index_negative  thrpt   30  997287.505 ± 4841.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5406524.480 ops/s
# Warmup Iteration   2: 10941641.714 ops/s
# Warmup Iteration   3: 9400554.026 ops/s
# Warmup Iteration   4: 11155934.426 ops/s
# Warmup Iteration   5: 11154431.029 ops/s
# Warmup Iteration   6: 11125744.188 ops/s
# Warmup Iteration   7: 11125577.892 ops/s
# Warmup Iteration   8: 11043101.462 ops/s
# Warmup Iteration   9: 11118497.581 ops/s
# Warmup Iteration  10: 11167194.152 ops/s
# Warmup Iteration  11: 11037534.311 ops/s
# Warmup Iteration  12: 11013271.261 ops/s
# Warmup Iteration  13: 11081817.321 ops/s
# Warmup Iteration  14: 10988532.805 ops/s
# Warmup Iteration  15: 11150606.754 ops/s
# Warmup Iteration  16: 11009704.597 ops/s
# Warmup Iteration  17: 11051839.532 ops/s
# Warmup Iteration  18: 11004945.232 ops/s
# Warmup Iteration  19: 11089606.697 ops/s
# Warmup Iteration  20: 11061501.765 ops/s
# Warmup Iteration  21: 11076909.282 ops/s
# Warmup Iteration  22: 11137255.828 ops/s
# Warmup Iteration  23: 11149503.680 ops/s
# Warmup Iteration  24: 11124475.512 ops/s
# Warmup Iteration  25: 11055210.001 ops/s
# Warmup Iteration  26: 11178019.768 ops/s
# Warmup Iteration  27: 11102161.197 ops/s
# Warmup Iteration  28: 11040932.383 ops/s
# Warmup Iteration  29: 11099459.837 ops/s
# Warmup Iteration  30: 11132678.205 ops/s
Iteration   1: 10988686.475 ops/s
Iteration   2: 11139210.851 ops/s
Iteration   3: 11171522.375 ops/s
Iteration   4: 10951345.510 ops/s
Iteration   5: 11163802.239 ops/s
Iteration   6: 10963358.325 ops/s
Iteration   7: 11155221.946 ops/s
Iteration   8: 11104367.166 ops/s
Iteration   9: 10942942.764 ops/s
Iteration  10: 11159524.084 ops/s
Iteration  11: 11057189.678 ops/s
Iteration  12: 11078261.082 ops/s
Iteration  13: 11148302.641 ops/s
Iteration  14: 11150507.313 ops/s
Iteration  15: 11076544.024 ops/s
Iteration  16: 11134203.192 ops/s
Iteration  17: 11100687.018 ops/s
Iteration  18: 11169905.791 ops/s
Iteration  19: 11157824.845 ops/s
Iteration  20: 11092167.763 ops/s
Iteration  21: 11179578.372 ops/s
Iteration  22: 10938518.863 ops/s
Iteration  23: 11129648.143 ops/s
Iteration  24: 11132430.146 ops/s
Iteration  25: 11157706.575 ops/s
Iteration  26: 11117428.492 ops/s
Iteration  27: 11152728.504 ops/s
Iteration  28: 11029162.261 ops/s
Iteration  29: 11092094.826 ops/s
Iteration  30: 11138794.550 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeIf":
  11099122.194 ±(99.9%) 49576.529 ops/s [Average]
  (min, avg, max) = (10938518.863, 11099122.194, 11179578.372), stdev = 74203.821
  CI (99.9%): [11049545.665, 11148698.723] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_removeIf  thrpt   30  11099122.194 ± 49576.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeIfWithStatefulPredicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeIfWithStatefulPredicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4577042.594 ops/s
# Warmup Iteration   2: 9350484.850 ops/s
# Warmup Iteration   3: 9524396.228 ops/s
# Warmup Iteration   4: 7950805.106 ops/s
# Warmup Iteration   5: 9423152.594 ops/s
# Warmup Iteration   6: 9382348.708 ops/s
# Warmup Iteration   7: 9334643.502 ops/s
# Warmup Iteration   8: 9496505.065 ops/s
# Warmup Iteration   9: 9419875.710 ops/s
# Warmup Iteration  10: 9551614.278 ops/s
# Warmup Iteration  11: 9545621.447 ops/s
# Warmup Iteration  12: 9516934.219 ops/s
# Warmup Iteration  13: 9478245.033 ops/s
# Warmup Iteration  14: 9517170.031 ops/s
# Warmup Iteration  15: 9508996.066 ops/s
# Warmup Iteration  16: 9544325.142 ops/s
# Warmup Iteration  17: 9514472.117 ops/s
# Warmup Iteration  18: 9480499.545 ops/s
# Warmup Iteration  19: 9523652.646 ops/s
# Warmup Iteration  20: 9499224.418 ops/s
# Warmup Iteration  21: 9498567.581 ops/s
# Warmup Iteration  22: 9532243.417 ops/s
# Warmup Iteration  23: 9485732.402 ops/s
# Warmup Iteration  24: 9492967.417 ops/s
# Warmup Iteration  25: 9550552.513 ops/s
# Warmup Iteration  26: 9502912.822 ops/s
# Warmup Iteration  27: 9408872.294 ops/s
# Warmup Iteration  28: 9501384.325 ops/s
# Warmup Iteration  29: 9393045.816 ops/s
# Warmup Iteration  30: 9466485.002 ops/s
Iteration   1: 9566293.702 ops/s
Iteration   2: 9520469.098 ops/s
Iteration   3: 9446165.920 ops/s
Iteration   4: 9545808.572 ops/s
Iteration   5: 9418883.740 ops/s
Iteration   6: 9522263.328 ops/s
Iteration   7: 9504541.487 ops/s
Iteration   8: 9330618.581 ops/s
Iteration   9: 9580294.588 ops/s
Iteration  10: 9577829.427 ops/s
Iteration  11: 9490979.216 ops/s
Iteration  12: 9526883.127 ops/s
Iteration  13: 9557631.881 ops/s
Iteration  14: 9512475.299 ops/s
Iteration  15: 9471403.041 ops/s
Iteration  16: 9514545.015 ops/s
Iteration  17: 9413057.480 ops/s
Iteration  18: 9548919.649 ops/s
Iteration  19: 9586734.296 ops/s
Iteration  20: 9519467.184 ops/s
Iteration  21: 9559690.693 ops/s
Iteration  22: 9511872.099 ops/s
Iteration  23: 9598835.719 ops/s
Iteration  24: 9550715.711 ops/s
Iteration  25: 9545960.886 ops/s
Iteration  26: 9532735.435 ops/s
Iteration  27: 9512460.957 ops/s
Iteration  28: 9423762.364 ops/s
Iteration  29: 9495797.604 ops/s
Iteration  30: 9517971.488 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_removeIfWithStatefulPredicate":
  9513502.253 ±(99.9%) 39493.546 ops/s [Average]
  (min, avg, max) = (9330618.581, 9513502.253, 9598835.719), stdev = 59112.085
  CI (99.9%): [9474008.707, 9552995.799] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_removeIfWithStatefulPredicate  thrpt   30  9513502.253 ± 39493.546  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 273892.530 ops/s
# Warmup Iteration   2: 617024.465 ops/s
# Warmup Iteration   3: 623141.037 ops/s
# Warmup Iteration   4: 528231.766 ops/s
# Warmup Iteration   5: 614217.441 ops/s
# Warmup Iteration   6: 627590.363 ops/s
# Warmup Iteration   7: 627234.615 ops/s
# Warmup Iteration   8: 624360.025 ops/s
# Warmup Iteration   9: 628150.672 ops/s
# Warmup Iteration  10: 626426.783 ops/s
# Warmup Iteration  11: 626873.180 ops/s
# Warmup Iteration  12: 627934.422 ops/s
# Warmup Iteration  13: 626924.263 ops/s
# Warmup Iteration  14: 624930.735 ops/s
# Warmup Iteration  15: 621385.091 ops/s
# Warmup Iteration  16: 623413.189 ops/s
# Warmup Iteration  17: 626824.875 ops/s
# Warmup Iteration  18: 627971.835 ops/s
# Warmup Iteration  19: 627739.164 ops/s
# Warmup Iteration  20: 619927.356 ops/s
# Warmup Iteration  21: 622441.435 ops/s
# Warmup Iteration  22: 620220.937 ops/s
# Warmup Iteration  23: 619914.538 ops/s
# Warmup Iteration  24: 625165.799 ops/s
# Warmup Iteration  25: 627710.288 ops/s
# Warmup Iteration  26: 626180.705 ops/s
# Warmup Iteration  27: 626401.664 ops/s
# Warmup Iteration  28: 625219.651 ops/s
# Warmup Iteration  29: 626457.689 ops/s
# Warmup Iteration  30: 626001.711 ops/s
Iteration   1: 626792.050 ops/s
Iteration   2: 628057.745 ops/s
Iteration   3: 626604.015 ops/s
Iteration   4: 626974.035 ops/s
Iteration   5: 627647.931 ops/s
Iteration   6: 614128.818 ops/s
Iteration   7: 623371.618 ops/s
Iteration   8: 627089.669 ops/s
Iteration   9: 625481.254 ops/s
Iteration  10: 614289.073 ops/s
Iteration  11: 626622.386 ops/s
Iteration  12: 631910.550 ops/s
Iteration  13: 625279.786 ops/s
Iteration  14: 627454.011 ops/s
Iteration  15: 625065.881 ops/s
Iteration  16: 626420.145 ops/s
Iteration  17: 624427.787 ops/s
Iteration  18: 629522.685 ops/s
Iteration  19: 627459.504 ops/s
Iteration  20: 623666.415 ops/s
Iteration  21: 626502.655 ops/s
Iteration  22: 625352.430 ops/s
Iteration  23: 615664.709 ops/s
Iteration  24: 629133.593 ops/s
Iteration  25: 625325.970 ops/s
Iteration  26: 627982.095 ops/s
Iteration  27: 629675.698 ops/s
Iteration  28: 628728.523 ops/s
Iteration  29: 616950.213 ops/s
Iteration  30: 627907.384 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_retainAll":
  625382.954 ±(99.9%) 2971.232 ops/s [Average]
  (min, avg, max) = (614128.818, 625382.954, 631910.550), stdev = 4447.200
  CI (99.9%): [622411.723, 628354.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_retainAll  thrpt   30  625382.954 ± 2971.232  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 630074.686 ops/s
# Warmup Iteration   2: 1382257.666 ops/s
# Warmup Iteration   3: 1149123.728 ops/s
# Warmup Iteration   4: 1363802.208 ops/s
# Warmup Iteration   5: 1369780.036 ops/s
# Warmup Iteration   6: 1373633.486 ops/s
# Warmup Iteration   7: 1374877.725 ops/s
# Warmup Iteration   8: 1370283.354 ops/s
# Warmup Iteration   9: 1359749.619 ops/s
# Warmup Iteration  10: 1373379.895 ops/s
# Warmup Iteration  11: 1376604.311 ops/s
# Warmup Iteration  12: 1365756.057 ops/s
# Warmup Iteration  13: 1374628.859 ops/s
# Warmup Iteration  14: 1379101.217 ops/s
# Warmup Iteration  15: 1368197.339 ops/s
# Warmup Iteration  16: 1365841.390 ops/s
# Warmup Iteration  17: 1379666.079 ops/s
# Warmup Iteration  18: 1375154.917 ops/s
# Warmup Iteration  19: 1371085.643 ops/s
# Warmup Iteration  20: 1371580.773 ops/s
# Warmup Iteration  21: 1375442.845 ops/s
# Warmup Iteration  22: 1367417.704 ops/s
# Warmup Iteration  23: 1377043.576 ops/s
# Warmup Iteration  24: 1380297.732 ops/s
# Warmup Iteration  25: 1373949.229 ops/s
# Warmup Iteration  26: 1371300.365 ops/s
# Warmup Iteration  27: 1383547.628 ops/s
# Warmup Iteration  28: 1374869.243 ops/s
# Warmup Iteration  29: 1378117.941 ops/s
# Warmup Iteration  30: 1372456.641 ops/s
Iteration   1: 1376509.206 ops/s
Iteration   2: 1368919.763 ops/s
Iteration   3: 1356441.080 ops/s
Iteration   4: 1379785.090 ops/s
Iteration   5: 1380467.476 ops/s
Iteration   6: 1366671.542 ops/s
Iteration   7: 1383809.925 ops/s
Iteration   8: 1376793.420 ops/s
Iteration   9: 1373326.044 ops/s
Iteration  10: 1384218.905 ops/s
Iteration  11: 1376271.006 ops/s
Iteration  12: 1376447.478 ops/s
Iteration  13: 1365291.551 ops/s
Iteration  14: 1366548.905 ops/s
Iteration  15: 1303986.268 ops/s
Iteration  16: 1359591.971 ops/s
Iteration  17: 1377071.861 ops/s
Iteration  18: 1368199.565 ops/s
Iteration  19: 1379313.267 ops/s
Iteration  20: 1357597.772 ops/s
Iteration  21: 1380149.803 ops/s
Iteration  22: 1379628.761 ops/s
Iteration  23: 1384257.401 ops/s
Iteration  24: 1374294.906 ops/s
Iteration  25: 1369724.972 ops/s
Iteration  26: 1374533.988 ops/s
Iteration  27: 1348113.821 ops/s
Iteration  28: 1369384.912 ops/s
Iteration  29: 1374324.820 ops/s
Iteration  30: 1372033.942 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_retainAll_iterable":
  1370123.647 ±(99.9%) 10161.748 ops/s [Average]
  (min, avg, max) = (1303986.268, 1370123.647, 1384257.401), stdev = 15209.627
  CI (99.9%): [1359961.900, 1380285.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1370123.647 ± 10161.748  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3656994.140 ops/s
# Warmup Iteration   2: 7718333.637 ops/s
# Warmup Iteration   3: 6593834.647 ops/s
# Warmup Iteration   4: 7904261.960 ops/s
# Warmup Iteration   5: 7833361.636 ops/s
# Warmup Iteration   6: 7849875.601 ops/s
# Warmup Iteration   7: 7890260.299 ops/s
# Warmup Iteration   8: 7866541.342 ops/s
# Warmup Iteration   9: 7883710.752 ops/s
# Warmup Iteration  10: 7889967.178 ops/s
# Warmup Iteration  11: 7822050.647 ops/s
# Warmup Iteration  12: 7873947.594 ops/s
# Warmup Iteration  13: 7851562.731 ops/s
# Warmup Iteration  14: 7886222.312 ops/s
# Warmup Iteration  15: 7800015.737 ops/s
# Warmup Iteration  16: 7881696.189 ops/s
# Warmup Iteration  17: 7899445.826 ops/s
# Warmup Iteration  18: 7884619.889 ops/s
# Warmup Iteration  19: 7869201.440 ops/s
# Warmup Iteration  20: 7878084.051 ops/s
# Warmup Iteration  21: 7872546.546 ops/s
# Warmup Iteration  22: 7787362.798 ops/s
# Warmup Iteration  23: 7880644.991 ops/s
# Warmup Iteration  24: 7819368.186 ops/s
# Warmup Iteration  25: 7770936.648 ops/s
# Warmup Iteration  26: 7797129.179 ops/s
# Warmup Iteration  27: 7867692.406 ops/s
# Warmup Iteration  28: 7902388.699 ops/s
# Warmup Iteration  29: 7845321.957 ops/s
# Warmup Iteration  30: 7869499.026 ops/s
Iteration   1: 7889775.608 ops/s
Iteration   2: 7887903.040 ops/s
Iteration   3: 7931269.404 ops/s
Iteration   4: 7802941.307 ops/s
Iteration   5: 7741415.770 ops/s
Iteration   6: 7866067.986 ops/s
Iteration   7: 7894690.568 ops/s
Iteration   8: 7893666.244 ops/s
Iteration   9: 7896904.025 ops/s
Iteration  10: 7885997.363 ops/s
Iteration  11: 7888697.167 ops/s
Iteration  12: 7881067.890 ops/s
Iteration  13: 7874314.381 ops/s
Iteration  14: 7681681.953 ops/s
Iteration  15: 7923876.372 ops/s
Iteration  16: 7785691.477 ops/s
Iteration  17: 7823230.037 ops/s
Iteration  18: 7888847.348 ops/s
Iteration  19: 7876673.234 ops/s
Iteration  20: 7888489.929 ops/s
Iteration  21: 7877604.839 ops/s
Iteration  22: 7858803.123 ops/s
Iteration  23: 7835260.210 ops/s
Iteration  24: 7888985.984 ops/s
Iteration  25: 7918204.648 ops/s
Iteration  26: 7740276.053 ops/s
Iteration  27: 7891234.293 ops/s
Iteration  28: 7858641.467 ops/s
Iteration  29: 7743962.261 ops/s
Iteration  30: 7890320.049 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_reverseThis":
  7856883.134 ±(99.9%) 40993.173 ops/s [Average]
  (min, avg, max) = (7681681.953, 7856883.134, 7931269.404), stdev = 61356.656
  CI (99.9%): [7815889.962, 7897876.307] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_reverseThis  thrpt   30  7856883.134 ± 40993.173  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2862068.263 ops/s
# Warmup Iteration   2: 6535114.884 ops/s
# Warmup Iteration   3: 5273889.802 ops/s
# Warmup Iteration   4: 6355824.290 ops/s
# Warmup Iteration   5: 6344170.454 ops/s
# Warmup Iteration   6: 6351143.550 ops/s
# Warmup Iteration   7: 6361743.486 ops/s
# Warmup Iteration   8: 6299102.010 ops/s
# Warmup Iteration   9: 6294319.870 ops/s
# Warmup Iteration  10: 6327779.759 ops/s
# Warmup Iteration  11: 6349413.809 ops/s
# Warmup Iteration  12: 6298081.643 ops/s
# Warmup Iteration  13: 6332667.276 ops/s
# Warmup Iteration  14: 6320744.595 ops/s
# Warmup Iteration  15: 6338346.937 ops/s
# Warmup Iteration  16: 6362027.998 ops/s
# Warmup Iteration  17: 6340574.169 ops/s
# Warmup Iteration  18: 6327509.240 ops/s
# Warmup Iteration  19: 6306471.150 ops/s
# Warmup Iteration  20: 6288080.091 ops/s
# Warmup Iteration  21: 6349724.304 ops/s
# Warmup Iteration  22: 6359841.159 ops/s
# Warmup Iteration  23: 6322910.957 ops/s
# Warmup Iteration  24: 6365817.816 ops/s
# Warmup Iteration  25: 6347237.408 ops/s
# Warmup Iteration  26: 6325352.529 ops/s
# Warmup Iteration  27: 6317905.042 ops/s
# Warmup Iteration  28: 6330978.060 ops/s
# Warmup Iteration  29: 6356131.247 ops/s
# Warmup Iteration  30: 6358923.382 ops/s
Iteration   1: 6372940.902 ops/s
Iteration   2: 6345183.871 ops/s
Iteration   3: 6315295.559 ops/s
Iteration   4: 6348505.103 ops/s
Iteration   5: 6358132.538 ops/s
Iteration   6: 6332733.658 ops/s
Iteration   7: 6350322.820 ops/s
Iteration   8: 6370249.838 ops/s
Iteration   9: 6329972.661 ops/s
Iteration  10: 6342270.419 ops/s
Iteration  11: 6352039.931 ops/s
Iteration  12: 6314422.377 ops/s
Iteration  13: 6330645.366 ops/s
Iteration  14: 6323350.517 ops/s
Iteration  15: 6331124.113 ops/s
Iteration  16: 6337265.026 ops/s
Iteration  17: 6358838.480 ops/s
Iteration  18: 6324960.651 ops/s
Iteration  19: 6331132.217 ops/s
Iteration  20: 6332929.147 ops/s
Iteration  21: 6300424.748 ops/s
Iteration  22: 6332618.909 ops/s
Iteration  23: 6336637.345 ops/s
Iteration  24: 6312249.089 ops/s
Iteration  25: 6310882.284 ops/s
Iteration  26: 6349629.167 ops/s
Iteration  27: 6329980.185 ops/s
Iteration  28: 6356406.137 ops/s
Iteration  29: 6232155.091 ops/s
Iteration  30: 6316004.619 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_select":
  6332643.425 ±(99.9%) 17350.690 ops/s [Average]
  (min, avg, max) = (6232155.091, 6332643.425, 6372940.902), stdev = 25969.698
  CI (99.9%): [6315292.736, 6349994.115] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_select  thrpt   30  6332643.425 ± 17350.690  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7857194.795 ops/s
# Warmup Iteration   2: 14892304.074 ops/s
# Warmup Iteration   3: 12954111.616 ops/s
# Warmup Iteration   4: 14877166.496 ops/s
# Warmup Iteration   5: 14870753.908 ops/s
# Warmup Iteration   6: 14935583.830 ops/s
# Warmup Iteration   7: 15095885.992 ops/s
# Warmup Iteration   8: 14956740.770 ops/s
# Warmup Iteration   9: 15051776.720 ops/s
# Warmup Iteration  10: 15091841.742 ops/s
# Warmup Iteration  11: 15102395.802 ops/s
# Warmup Iteration  12: 14925161.760 ops/s
# Warmup Iteration  13: 14927326.355 ops/s
# Warmup Iteration  14: 14970177.833 ops/s
# Warmup Iteration  15: 14835937.375 ops/s
# Warmup Iteration  16: 14996624.083 ops/s
# Warmup Iteration  17: 15051054.446 ops/s
# Warmup Iteration  18: 14985533.260 ops/s
# Warmup Iteration  19: 14776242.648 ops/s
# Warmup Iteration  20: 14986803.951 ops/s
# Warmup Iteration  21: 15055195.700 ops/s
# Warmup Iteration  22: 14936454.521 ops/s
# Warmup Iteration  23: 14916026.759 ops/s
# Warmup Iteration  24: 14924116.826 ops/s
# Warmup Iteration  25: 14969043.745 ops/s
# Warmup Iteration  26: 14913318.133 ops/s
# Warmup Iteration  27: 15055529.289 ops/s
# Warmup Iteration  28: 14951186.640 ops/s
# Warmup Iteration  29: 14821911.573 ops/s
# Warmup Iteration  30: 15048966.286 ops/s
Iteration   1: 15108453.727 ops/s
Iteration   2: 15071062.336 ops/s
Iteration   3: 15034156.970 ops/s
Iteration   4: 15013311.839 ops/s
Iteration   5: 15003393.455 ops/s
Iteration   6: 14836660.976 ops/s
Iteration   7: 15148679.324 ops/s
Iteration   8: 14954796.114 ops/s
Iteration   9: 14716861.023 ops/s
Iteration  10: 14999198.861 ops/s
Iteration  11: 15023276.435 ops/s
Iteration  12: 15034355.555 ops/s
Iteration  13: 14957054.870 ops/s
Iteration  14: 15132189.443 ops/s
Iteration  15: 15026510.988 ops/s
Iteration  16: 15084069.465 ops/s
Iteration  17: 15115745.821 ops/s
Iteration  18: 15093029.389 ops/s
Iteration  19: 14981969.950 ops/s
Iteration  20: 15074219.037 ops/s
Iteration  21: 15034307.264 ops/s
Iteration  22: 14748515.097 ops/s
Iteration  23: 15096218.501 ops/s
Iteration  24: 15096273.298 ops/s
Iteration  25: 14940506.652 ops/s
Iteration  26: 14967320.164 ops/s
Iteration  27: 15098479.733 ops/s
Iteration  28: 14984206.962 ops/s
Iteration  29: 15045708.438 ops/s
Iteration  30: 15090555.610 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_set":
  15017036.243 ±(99.9%) 68511.352 ops/s [Average]
  (min, avg, max) = (14716861.023, 15017036.243, 15148679.324), stdev = 102544.574
  CI (99.9%): [14948524.892, 15085547.595] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_set  thrpt   30  15017036.243 ± 68511.352  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_set_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_set_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712537.572 ops/s
# Warmup Iteration   2: 721740.877 ops/s
# Warmup Iteration   3: 947807.662 ops/s
# Warmup Iteration   4: 951579.716 ops/s
# Warmup Iteration   5: 951184.767 ops/s
# Warmup Iteration   6: 954432.056 ops/s
# Warmup Iteration   7: 948161.571 ops/s
# Warmup Iteration   8: 949290.038 ops/s
# Warmup Iteration   9: 943890.501 ops/s
# Warmup Iteration  10: 953160.647 ops/s
# Warmup Iteration  11: 950581.136 ops/s
# Warmup Iteration  12: 799083.516 ops/s
# Warmup Iteration  13: 948169.096 ops/s
# Warmup Iteration  14: 949791.842 ops/s
# Warmup Iteration  15: 951022.944 ops/s
# Warmup Iteration  16: 946189.798 ops/s
# Warmup Iteration  17: 1005504.782 ops/s
# Warmup Iteration  18: 1003218.087 ops/s
# Warmup Iteration  19: 994799.000 ops/s
# Warmup Iteration  20: 986738.389 ops/s
# Warmup Iteration  21: 1006906.015 ops/s
# Warmup Iteration  22: 1004824.712 ops/s
# Warmup Iteration  23: 1003898.882 ops/s
# Warmup Iteration  24: 1004455.761 ops/s
# Warmup Iteration  25: 1006663.228 ops/s
# Warmup Iteration  26: 1004811.232 ops/s
# Warmup Iteration  27: 1007209.969 ops/s
# Warmup Iteration  28: 998723.227 ops/s
# Warmup Iteration  29: 1007272.033 ops/s
# Warmup Iteration  30: 999802.458 ops/s
Iteration   1: 1004955.147 ops/s
Iteration   2: 1009732.728 ops/s
Iteration   3: 1011070.873 ops/s
Iteration   4: 991078.650 ops/s
Iteration   5: 1006087.491 ops/s
Iteration   6: 1011332.792 ops/s
Iteration   7: 1008400.814 ops/s
Iteration   8: 1009407.742 ops/s
Iteration   9: 1010928.544 ops/s
Iteration  10: 1011608.304 ops/s
Iteration  11: 1004849.458 ops/s
Iteration  12: 1006973.214 ops/s
Iteration  13: 1005678.705 ops/s
Iteration  14: 993636.084 ops/s
Iteration  15: 1009329.880 ops/s
Iteration  16: 994045.334 ops/s
Iteration  17: 1006122.802 ops/s
Iteration  18: 1001746.322 ops/s
Iteration  19: 1007407.444 ops/s
Iteration  20: 1005718.779 ops/s
Iteration  21: 1006165.466 ops/s
Iteration  22: 1002991.581 ops/s
Iteration  23: 1006304.793 ops/s
Iteration  24: 1006654.139 ops/s
Iteration  25: 1006719.940 ops/s
Iteration  26: 998111.464 ops/s
Iteration  27: 1007676.940 ops/s
Iteration  28: 1005149.322 ops/s
Iteration  29: 1008429.589 ops/s
Iteration  30: 1005882.603 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_set_throws_index_greater_than_size":
  1005473.231 ±(99.9%) 3437.839 ops/s [Average]
  (min, avg, max) = (991078.650, 1005473.231, 1011608.304), stdev = 5145.596
  CI (99.9%): [1002035.393, 1008911.070] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_set_throws_index_greater_than_size  thrpt   30  1005473.231 ± 3437.839  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2054393.424 ops/s
# Warmup Iteration   2: 3621306.086 ops/s
# Warmup Iteration   3: 4234334.978 ops/s
# Warmup Iteration   4: 4311021.725 ops/s
# Warmup Iteration   5: 4311513.116 ops/s
# Warmup Iteration   6: 4271837.922 ops/s
# Warmup Iteration   7: 4266893.155 ops/s
# Warmup Iteration   8: 4256356.767 ops/s
# Warmup Iteration   9: 4268961.007 ops/s
# Warmup Iteration  10: 4335090.475 ops/s
# Warmup Iteration  11: 4302215.054 ops/s
# Warmup Iteration  12: 4317840.110 ops/s
# Warmup Iteration  13: 4325249.625 ops/s
# Warmup Iteration  14: 4315589.805 ops/s
# Warmup Iteration  15: 4313352.275 ops/s
# Warmup Iteration  16: 4318473.672 ops/s
# Warmup Iteration  17: 4280633.800 ops/s
# Warmup Iteration  18: 4318216.677 ops/s
# Warmup Iteration  19: 4321132.094 ops/s
# Warmup Iteration  20: 4286815.207 ops/s
# Warmup Iteration  21: 4315619.791 ops/s
# Warmup Iteration  22: 4308684.718 ops/s
# Warmup Iteration  23: 4307484.312 ops/s
# Warmup Iteration  24: 4325299.302 ops/s
# Warmup Iteration  25: 4269075.310 ops/s
# Warmup Iteration  26: 4256344.977 ops/s
# Warmup Iteration  27: 4299277.867 ops/s
# Warmup Iteration  28: 4308525.457 ops/s
# Warmup Iteration  29: 4327943.513 ops/s
# Warmup Iteration  30: 4315384.391 ops/s
Iteration   1: 4329637.990 ops/s
Iteration   2: 4315960.464 ops/s
Iteration   3: 4254214.396 ops/s
Iteration   4: 4317689.292 ops/s
Iteration   5: 4267050.875 ops/s
Iteration   6: 4319531.342 ops/s
Iteration   7: 4291491.356 ops/s
Iteration   8: 4262547.865 ops/s
Iteration   9: 4265276.829 ops/s
Iteration  10: 4318500.358 ops/s
Iteration  11: 4221996.392 ops/s
Iteration  12: 4253864.622 ops/s
Iteration  13: 4358218.389 ops/s
Iteration  14: 4342658.741 ops/s
Iteration  15: 4290322.103 ops/s
Iteration  16: 4249813.405 ops/s
Iteration  17: 4294044.145 ops/s
Iteration  18: 4313349.390 ops/s
Iteration  19: 4320575.708 ops/s
Iteration  20: 4342140.544 ops/s
Iteration  21: 4305646.025 ops/s
Iteration  22: 4318172.555 ops/s
Iteration  23: 4351286.660 ops/s
Iteration  24: 4345885.746 ops/s
Iteration  25: 4323906.804 ops/s
Iteration  26: 4304033.581 ops/s
Iteration  27: 4326417.358 ops/s
Iteration  28: 4230966.316 ops/s
Iteration  29: 4315646.668 ops/s
Iteration  30: 4260464.964 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_size":
  4300377.029 ±(99.9%) 24636.528 ops/s [Average]
  (min, avg, max) = (4221996.392, 4300377.029, 4358218.389), stdev = 36874.798
  CI (99.9%): [4275740.502, 4325013.557] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_size  thrpt   30  4300377.029 ± 24636.528  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 739576.178 ops/s
# Warmup Iteration   2: 760838.966 ops/s
# Warmup Iteration   3: 1007303.255 ops/s
# Warmup Iteration   4: 1002294.297 ops/s
# Warmup Iteration   5: 998978.094 ops/s
# Warmup Iteration   6: 1006730.344 ops/s
# Warmup Iteration   7: 1007801.140 ops/s
# Warmup Iteration   8: 1006646.877 ops/s
# Warmup Iteration   9: 1001935.513 ops/s
# Warmup Iteration  10: 999847.035 ops/s
# Warmup Iteration  11: 997204.745 ops/s
# Warmup Iteration  12: 837018.833 ops/s
# Warmup Iteration  13: 1008063.368 ops/s
# Warmup Iteration  14: 997167.388 ops/s
# Warmup Iteration  15: 1010101.120 ops/s
# Warmup Iteration  16: 1004910.841 ops/s
# Warmup Iteration  17: 1063994.238 ops/s
# Warmup Iteration  18: 1063441.181 ops/s
# Warmup Iteration  19: 1065818.880 ops/s
# Warmup Iteration  20: 1061013.637 ops/s
# Warmup Iteration  21: 1069335.766 ops/s
# Warmup Iteration  22: 1062313.137 ops/s
# Warmup Iteration  23: 1063150.558 ops/s
# Warmup Iteration  24: 1048323.338 ops/s
# Warmup Iteration  25: 1062104.904 ops/s
# Warmup Iteration  26: 1064229.204 ops/s
# Warmup Iteration  27: 1068583.322 ops/s
# Warmup Iteration  28: 1051910.059 ops/s
# Warmup Iteration  29: 1068364.189 ops/s
# Warmup Iteration  30: 1066675.767 ops/s
Iteration   1: 1069512.126 ops/s
Iteration   2: 1052867.920 ops/s
Iteration   3: 1071695.568 ops/s
Iteration   4: 1054618.838 ops/s
Iteration   5: 1074486.465 ops/s
Iteration   6: 1065113.319 ops/s
Iteration   7: 1061178.363 ops/s
Iteration   8: 1061272.628 ops/s
Iteration   9: 1060212.966 ops/s
Iteration  10: 1057192.688 ops/s
Iteration  11: 1061238.599 ops/s
Iteration  12: 1058477.993 ops/s
Iteration  13: 1054828.382 ops/s
Iteration  14: 1059471.783 ops/s
Iteration  15: 1039415.185 ops/s
Iteration  16: 1069151.696 ops/s
Iteration  17: 1051531.301 ops/s
Iteration  18: 1069727.099 ops/s
Iteration  19: 1071753.419 ops/s
Iteration  20: 1063453.130 ops/s
Iteration  21: 1066211.958 ops/s
Iteration  22: 1074940.907 ops/s
Iteration  23: 1062170.977 ops/s
Iteration  24: 1060210.881 ops/s
Iteration  25: 1052596.163 ops/s
Iteration  26: 1048418.356 ops/s
Iteration  27: 1050178.616 ops/s
Iteration  28: 1068588.816 ops/s
Iteration  29: 1067813.218 ops/s
Iteration  30: 1069489.965 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_subList":
  1061593.977 ±(99.9%) 5698.147 ops/s [Average]
  (min, avg, max) = (1039415.185, 1061593.977, 1074940.907), stdev = 8528.719
  CI (99.9%): [1055895.830, 1067292.125] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_subList  thrpt   30  1061593.977 ± 5698.147  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8390809.640 ops/s
# Warmup Iteration   2: 14906724.900 ops/s
# Warmup Iteration   3: 15270089.356 ops/s
# Warmup Iteration   4: 16086047.798 ops/s
# Warmup Iteration   5: 16214114.375 ops/s
# Warmup Iteration   6: 16195797.569 ops/s
# Warmup Iteration   7: 16269265.840 ops/s
# Warmup Iteration   8: 16255046.430 ops/s
# Warmup Iteration   9: 16253464.160 ops/s
# Warmup Iteration  10: 16049034.839 ops/s
# Warmup Iteration  11: 16222101.982 ops/s
# Warmup Iteration  12: 16298822.974 ops/s
# Warmup Iteration  13: 15985579.494 ops/s
# Warmup Iteration  14: 16286444.110 ops/s
# Warmup Iteration  15: 16180653.825 ops/s
# Warmup Iteration  16: 16248122.097 ops/s
# Warmup Iteration  17: 16300618.876 ops/s
# Warmup Iteration  18: 16159134.242 ops/s
# Warmup Iteration  19: 16193087.009 ops/s
# Warmup Iteration  20: 16151139.982 ops/s
# Warmup Iteration  21: 16283935.636 ops/s
# Warmup Iteration  22: 16275999.425 ops/s
# Warmup Iteration  23: 16268288.551 ops/s
# Warmup Iteration  24: 16138579.101 ops/s
# Warmup Iteration  25: 16214791.693 ops/s
# Warmup Iteration  26: 16246946.194 ops/s
# Warmup Iteration  27: 16287207.595 ops/s
# Warmup Iteration  28: 16263066.974 ops/s
# Warmup Iteration  29: 16226796.272 ops/s
# Warmup Iteration  30: 16264421.946 ops/s
Iteration   1: 16321516.962 ops/s
Iteration   2: 16341703.429 ops/s
Iteration   3: 15718419.804 ops/s
Iteration   4: 16262964.320 ops/s
Iteration   5: 16180092.824 ops/s
Iteration   6: 16212879.263 ops/s
Iteration   7: 16266803.455 ops/s
Iteration   8: 16125433.127 ops/s
Iteration   9: 16186773.191 ops/s
Iteration  10: 16272756.514 ops/s
Iteration  11: 15985791.273 ops/s
Iteration  12: 16141056.994 ops/s
Iteration  13: 16299685.109 ops/s
Iteration  14: 16298481.143 ops/s
Iteration  15: 16278335.580 ops/s
Iteration  16: 16343158.424 ops/s
Iteration  17: 16306423.176 ops/s
Iteration  18: 16232329.662 ops/s
Iteration  19: 16157726.281 ops/s
Iteration  20: 16231098.699 ops/s
Iteration  21: 16329861.915 ops/s
Iteration  22: 16189118.558 ops/s
Iteration  23: 16244187.296 ops/s
Iteration  24: 16296122.842 ops/s
Iteration  25: 16258879.292 ops/s
Iteration  26: 16352799.665 ops/s
Iteration  27: 16238860.465 ops/s
Iteration  28: 16245546.232 ops/s
Iteration  29: 16337621.023 ops/s
Iteration  30: 16335696.082 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_tap":
  16233070.753 ±(99.9%) 84204.863 ops/s [Average]
  (min, avg, max) = (15718419.804, 16233070.753, 16352799.665), stdev = 126033.884
  CI (99.9%): [16148865.891, 16317275.616] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_tap  thrpt   30  16233070.753 ± 84204.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_testBooleanArrayListWithInitialCapacity$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_testBooleanArrayListWithInitialCapacity

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3337140.310 ops/s
# Warmup Iteration   2: 6850483.257 ops/s
# Warmup Iteration   3: 5762057.404 ops/s
# Warmup Iteration   4: 6886560.573 ops/s
# Warmup Iteration   5: 6948123.113 ops/s
# Warmup Iteration   6: 6950156.588 ops/s
# Warmup Iteration   7: 6845216.621 ops/s
# Warmup Iteration   8: 6927315.944 ops/s
# Warmup Iteration   9: 6872570.861 ops/s
# Warmup Iteration  10: 6899939.624 ops/s
# Warmup Iteration  11: 6861621.261 ops/s
# Warmup Iteration  12: 6927014.423 ops/s
# Warmup Iteration  13: 6923668.299 ops/s
# Warmup Iteration  14: 6956898.152 ops/s
# Warmup Iteration  15: 6943094.593 ops/s
# Warmup Iteration  16: 6915303.895 ops/s
# Warmup Iteration  17: 6876688.745 ops/s
# Warmup Iteration  18: 6871458.681 ops/s
# Warmup Iteration  19: 6915099.902 ops/s
# Warmup Iteration  20: 6850693.938 ops/s
# Warmup Iteration  21: 6898590.793 ops/s
# Warmup Iteration  22: 6853543.433 ops/s
# Warmup Iteration  23: 6815518.299 ops/s
# Warmup Iteration  24: 6855175.738 ops/s
# Warmup Iteration  25: 6876460.560 ops/s
# Warmup Iteration  26: 6851920.353 ops/s
# Warmup Iteration  27: 6868331.561 ops/s
# Warmup Iteration  28: 6879931.499 ops/s
# Warmup Iteration  29: 6906650.134 ops/s
# Warmup Iteration  30: 6885603.591 ops/s
Iteration   1: 6895544.849 ops/s
Iteration   2: 6851834.159 ops/s
Iteration   3: 6907822.464 ops/s
Iteration   4: 6883082.348 ops/s
Iteration   5: 6887169.083 ops/s
Iteration   6: 6902161.290 ops/s
Iteration   7: 6865936.937 ops/s
Iteration   8: 6899817.594 ops/s
Iteration   9: 6925356.888 ops/s
Iteration  10: 6874434.982 ops/s
Iteration  11: 6836687.555 ops/s
Iteration  12: 6877180.644 ops/s
Iteration  13: 6905683.121 ops/s
Iteration  14: 6895829.682 ops/s
Iteration  15: 6869071.078 ops/s
Iteration  16: 6885650.384 ops/s
Iteration  17: 6839404.605 ops/s
Iteration  18: 6830660.600 ops/s
Iteration  19: 6911745.929 ops/s
Iteration  20: 6934263.823 ops/s
Iteration  21: 6844262.011 ops/s
Iteration  22: 6858400.469 ops/s
Iteration  23: 6847800.747 ops/s
Iteration  24: 6908183.068 ops/s
Iteration  25: 6820535.815 ops/s
Iteration  26: 6923172.828 ops/s
Iteration  27: 6899139.869 ops/s
Iteration  28: 6897777.055 ops/s
Iteration  29: 6776957.575 ops/s
Iteration  30: 6871454.967 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_testBooleanArrayListWithInitialCapacity":
  6877567.414 ±(99.9%) 23601.899 ops/s [Average]
  (min, avg, max) = (6776957.575, 6877567.414, 6934263.823), stdev = 35326.214
  CI (99.9%): [6853965.515, 6901169.313] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_testBooleanArrayListWithInitialCapacity  thrpt   30  6877567.414 ± 23601.899  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31675.820 ops/s
# Warmup Iteration   2: 54772.918 ops/s
# Warmup Iteration   3: 63817.377 ops/s
# Warmup Iteration   4: 63032.892 ops/s
# Warmup Iteration   5: 61443.493 ops/s
# Warmup Iteration   6: 54812.523 ops/s
# Warmup Iteration   7: 62724.270 ops/s
# Warmup Iteration   8: 62466.602 ops/s
# Warmup Iteration   9: 62996.480 ops/s
# Warmup Iteration  10: 63118.479 ops/s
# Warmup Iteration  11: 62272.785 ops/s
# Warmup Iteration  12: 62993.081 ops/s
# Warmup Iteration  13: 63014.370 ops/s
# Warmup Iteration  14: 63001.107 ops/s
# Warmup Iteration  15: 63024.168 ops/s
# Warmup Iteration  16: 63181.548 ops/s
# Warmup Iteration  17: 63044.761 ops/s
# Warmup Iteration  18: 62547.728 ops/s
# Warmup Iteration  19: 62919.597 ops/s
# Warmup Iteration  20: 62568.118 ops/s
# Warmup Iteration  21: 62612.488 ops/s
# Warmup Iteration  22: 61834.516 ops/s
# Warmup Iteration  23: 62947.085 ops/s
# Warmup Iteration  24: 62538.616 ops/s
# Warmup Iteration  25: 62971.426 ops/s
# Warmup Iteration  26: 62853.814 ops/s
# Warmup Iteration  27: 62505.336 ops/s
# Warmup Iteration  28: 62888.889 ops/s
# Warmup Iteration  29: 63048.052 ops/s
# Warmup Iteration  30: 62074.230 ops/s
Iteration   1: 62947.282 ops/s
Iteration   2: 62829.200 ops/s
Iteration   3: 62734.884 ops/s
Iteration   4: 62995.397 ops/s
Iteration   5: 62917.344 ops/s
Iteration   6: 62403.958 ops/s
Iteration   7: 62839.327 ops/s
Iteration   8: 63179.863 ops/s
Iteration   9: 62819.174 ops/s
Iteration  10: 62831.537 ops/s
Iteration  11: 62830.407 ops/s
Iteration  12: 62915.145 ops/s
Iteration  13: 61493.888 ops/s
Iteration  14: 63166.188 ops/s
Iteration  15: 61576.377 ops/s
Iteration  16: 61548.656 ops/s
Iteration  17: 62164.532 ops/s
Iteration  18: 62296.864 ops/s
Iteration  19: 62639.046 ops/s
Iteration  20: 62218.790 ops/s
Iteration  21: 61396.925 ops/s
Iteration  22: 62590.957 ops/s
Iteration  23: 62876.767 ops/s
Iteration  24: 62679.176 ops/s
Iteration  25: 62516.555 ops/s
Iteration  26: 62242.039 ops/s
Iteration  27: 62273.683 ops/s
Iteration  28: 62385.222 ops/s
Iteration  29: 63001.253 ops/s
Iteration  30: 62364.493 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_testEquals":
  62522.498 ±(99.9%) 330.914 ops/s [Average]
  (min, avg, max) = (61396.925, 62522.498, 63179.863), stdev = 495.297
  CI (99.9%): [62191.583, 62853.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt      Score     Error  Units
BooleanArrayListTest._Benchmark.benchmark_testEquals  thrpt   30  62522.498 ± 330.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6821571.600 ops/s
# Warmup Iteration   2: 11783572.684 ops/s
# Warmup Iteration   3: 13513506.888 ops/s
# Warmup Iteration   4: 13732920.118 ops/s
# Warmup Iteration   5: 13711039.515 ops/s
# Warmup Iteration   6: 13681401.231 ops/s
# Warmup Iteration   7: 13757696.331 ops/s
# Warmup Iteration   8: 13596325.173 ops/s
# Warmup Iteration   9: 13538371.937 ops/s
# Warmup Iteration  10: 13714907.375 ops/s
# Warmup Iteration  11: 13718154.040 ops/s
# Warmup Iteration  12: 13756339.974 ops/s
# Warmup Iteration  13: 13606905.590 ops/s
# Warmup Iteration  14: 13701591.553 ops/s
# Warmup Iteration  15: 13666826.426 ops/s
# Warmup Iteration  16: 13685837.097 ops/s
# Warmup Iteration  17: 13685625.520 ops/s
# Warmup Iteration  18: 13671089.866 ops/s
# Warmup Iteration  19: 13753590.996 ops/s
# Warmup Iteration  20: 13656869.191 ops/s
# Warmup Iteration  21: 13634364.828 ops/s
# Warmup Iteration  22: 13725803.096 ops/s
# Warmup Iteration  23: 13764806.622 ops/s
# Warmup Iteration  24: 13749088.552 ops/s
# Warmup Iteration  25: 13630697.634 ops/s
# Warmup Iteration  26: 13742015.758 ops/s
# Warmup Iteration  27: 13685417.561 ops/s
# Warmup Iteration  28: 13660097.219 ops/s
# Warmup Iteration  29: 13708034.116 ops/s
# Warmup Iteration  30: 13594705.774 ops/s
Iteration   1: 13754697.200 ops/s
Iteration   2: 13787264.428 ops/s
Iteration   3: 13769806.723 ops/s
Iteration   4: 13742848.756 ops/s
Iteration   5: 13672218.841 ops/s
Iteration   6: 13692071.279 ops/s
Iteration   7: 13604967.220 ops/s
Iteration   8: 13608712.602 ops/s
Iteration   9: 13755016.058 ops/s
Iteration  10: 13814127.222 ops/s
Iteration  11: 13780025.624 ops/s
Iteration  12: 13672988.345 ops/s
Iteration  13: 13674753.142 ops/s
Iteration  14: 13856816.726 ops/s
Iteration  15: 13575246.270 ops/s
Iteration  16: 13788011.961 ops/s
Iteration  17: 13717965.745 ops/s
Iteration  18: 13672871.244 ops/s
Iteration  19: 13760480.445 ops/s
Iteration  20: 13761695.053 ops/s
Iteration  21: 13788141.312 ops/s
Iteration  22: 13830700.153 ops/s
Iteration  23: 13570396.464 ops/s
Iteration  24: 13671361.713 ops/s
Iteration  25: 13802549.153 ops/s
Iteration  26: 13641223.273 ops/s
Iteration  27: 13770442.378 ops/s
Iteration  28: 13775300.761 ops/s
Iteration  29: 13496267.580 ops/s
Iteration  30: 13411907.179 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_testHashCode":
  13707362.495 ±(99.9%) 68597.339 ops/s [Average]
  (min, avg, max) = (13411907.179, 13707362.495, 13856816.726), stdev = 102673.275
  CI (99.9%): [13638765.157, 13775959.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_testHashCode  thrpt   30  13707362.495 ± 68597.339  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1514529.545 ops/s
# Warmup Iteration   2: 3220976.110 ops/s
# Warmup Iteration   3: 2708966.540 ops/s
# Warmup Iteration   4: 3267785.565 ops/s
# Warmup Iteration   5: 3241738.451 ops/s
# Warmup Iteration   6: 3264976.223 ops/s
# Warmup Iteration   7: 3280925.312 ops/s
# Warmup Iteration   8: 3256392.648 ops/s
# Warmup Iteration   9: 3279557.870 ops/s
# Warmup Iteration  10: 3252972.914 ops/s
# Warmup Iteration  11: 3262885.912 ops/s
# Warmup Iteration  12: 3262637.148 ops/s
# Warmup Iteration  13: 3243632.740 ops/s
# Warmup Iteration  14: 3260765.564 ops/s
# Warmup Iteration  15: 3226327.282 ops/s
# Warmup Iteration  16: 3263366.145 ops/s
# Warmup Iteration  17: 3269194.310 ops/s
# Warmup Iteration  18: 3256578.112 ops/s
# Warmup Iteration  19: 3243405.914 ops/s
# Warmup Iteration  20: 3282126.690 ops/s
# Warmup Iteration  21: 3251848.482 ops/s
# Warmup Iteration  22: 3258199.736 ops/s
# Warmup Iteration  23: 3249732.472 ops/s
# Warmup Iteration  24: 3264792.234 ops/s
# Warmup Iteration  25: 3261629.158 ops/s
# Warmup Iteration  26: 3236687.138 ops/s
# Warmup Iteration  27: 3268654.039 ops/s
# Warmup Iteration  28: 3247594.167 ops/s
# Warmup Iteration  29: 3259666.054 ops/s
# Warmup Iteration  30: 3268566.098 ops/s
Iteration   1: 3214456.635 ops/s
Iteration   2: 3256580.165 ops/s
Iteration   3: 3260822.951 ops/s
Iteration   4: 3269673.021 ops/s
Iteration   5: 3249339.935 ops/s
Iteration   6: 3206753.202 ops/s
Iteration   7: 3249281.652 ops/s
Iteration   8: 3277737.302 ops/s
Iteration   9: 3265326.717 ops/s
Iteration  10: 3259929.914 ops/s
Iteration  11: 3276387.379 ops/s
Iteration  12: 3220180.936 ops/s
Iteration  13: 3266844.451 ops/s
Iteration  14: 3267376.712 ops/s
Iteration  15: 3254091.258 ops/s
Iteration  16: 3266211.120 ops/s
Iteration  17: 3272585.714 ops/s
Iteration  18: 3244191.059 ops/s
Iteration  19: 3269241.588 ops/s
Iteration  20: 3203762.246 ops/s
Iteration  21: 3276548.068 ops/s
Iteration  22: 3263649.255 ops/s
Iteration  23: 3246528.969 ops/s
Iteration  24: 3205939.281 ops/s
Iteration  25: 3279582.640 ops/s
Iteration  26: 3265457.123 ops/s
Iteration  27: 3267245.047 ops/s
Iteration  28: 3237528.080 ops/s
Iteration  29: 3290189.025 ops/s
Iteration  30: 3217151.205 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_testToString":
  3253353.088 ±(99.9%) 16202.786 ops/s [Average]
  (min, avg, max) = (3203762.246, 3253353.088, 3290189.025), stdev = 24251.569
  CI (99.9%): [3237150.302, 3269555.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_testToString  thrpt   30  3253353.088 ± 16202.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4942981.078 ops/s
# Warmup Iteration   2: 8379395.000 ops/s
# Warmup Iteration   3: 9843388.651 ops/s
# Warmup Iteration   4: 9797007.798 ops/s
# Warmup Iteration   5: 9849304.382 ops/s
# Warmup Iteration   6: 9876707.736 ops/s
# Warmup Iteration   7: 9909305.620 ops/s
# Warmup Iteration   8: 9863088.093 ops/s
# Warmup Iteration   9: 9841369.996 ops/s
# Warmup Iteration  10: 9808147.518 ops/s
# Warmup Iteration  11: 9782614.905 ops/s
# Warmup Iteration  12: 9831343.290 ops/s
# Warmup Iteration  13: 9843359.926 ops/s
# Warmup Iteration  14: 9859318.488 ops/s
# Warmup Iteration  15: 9885171.591 ops/s
# Warmup Iteration  16: 9834256.124 ops/s
# Warmup Iteration  17: 9869784.384 ops/s
# Warmup Iteration  18: 9800252.957 ops/s
# Warmup Iteration  19: 9902876.594 ops/s
# Warmup Iteration  20: 9685642.767 ops/s
# Warmup Iteration  21: 9850062.211 ops/s
# Warmup Iteration  22: 9777959.756 ops/s
# Warmup Iteration  23: 9804855.290 ops/s
# Warmup Iteration  24: 9899277.418 ops/s
# Warmup Iteration  25: 9885598.706 ops/s
# Warmup Iteration  26: 9955612.503 ops/s
# Warmup Iteration  27: 9859133.018 ops/s
# Warmup Iteration  28: 9818451.716 ops/s
# Warmup Iteration  29: 9893862.371 ops/s
# Warmup Iteration  30: 9881590.511 ops/s
Iteration   1: 9886384.256 ops/s
Iteration   2: 9826151.559 ops/s
Iteration   3: 9805239.180 ops/s
Iteration   4: 9776303.223 ops/s
Iteration   5: 9904588.941 ops/s
Iteration   6: 9851767.831 ops/s
Iteration   7: 9846253.825 ops/s
Iteration   8: 9895516.596 ops/s
Iteration   9: 9849303.476 ops/s
Iteration  10: 9769271.700 ops/s
Iteration  11: 9877790.356 ops/s
Iteration  12: 9887177.172 ops/s
Iteration  13: 9747224.691 ops/s
Iteration  14: 9916581.030 ops/s
Iteration  15: 9865947.777 ops/s
Iteration  16: 9880403.101 ops/s
Iteration  17: 9832933.944 ops/s
Iteration  18: 9894645.225 ops/s
Iteration  19: 9886014.185 ops/s
Iteration  20: 9747540.907 ops/s
Iteration  21: 9911299.714 ops/s
Iteration  22: 9923947.160 ops/s
Iteration  23: 9839941.190 ops/s
Iteration  24: 9831011.176 ops/s
Iteration  25: 9888515.124 ops/s
Iteration  26: 9872259.740 ops/s
Iteration  27: 9885122.019 ops/s
Iteration  28: 9855813.495 ops/s
Iteration  29: 9900917.744 ops/s
Iteration  30: 9906934.558 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toArray":
  9858760.030 ±(99.9%) 32774.855 ops/s [Average]
  (min, avg, max) = (9747224.691, 9858760.030, 9923947.160), stdev = 49055.863
  CI (99.9%): [9825985.175, 9891534.885] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_toArray  thrpt   30  9858760.030 ± 32774.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1404091.669 ops/s
# Warmup Iteration   2: 5607275.168 ops/s
# Warmup Iteration   3: 5633621.640 ops/s
# Warmup Iteration   4: 4681349.722 ops/s
# Warmup Iteration   5: 5631869.551 ops/s
# Warmup Iteration   6: 5666407.144 ops/s
# Warmup Iteration   7: 5665207.763 ops/s
# Warmup Iteration   8: 5663380.474 ops/s
# Warmup Iteration   9: 5692423.161 ops/s
# Warmup Iteration  10: 5689004.344 ops/s
# Warmup Iteration  11: 5658181.814 ops/s
# Warmup Iteration  12: 5650747.244 ops/s
# Warmup Iteration  13: 5672940.848 ops/s
# Warmup Iteration  14: 5689800.446 ops/s
# Warmup Iteration  15: 5589563.527 ops/s
# Warmup Iteration  16: 5645526.603 ops/s
# Warmup Iteration  17: 5675423.308 ops/s
# Warmup Iteration  18: 5652159.089 ops/s
# Warmup Iteration  19: 5583273.321 ops/s
# Warmup Iteration  20: 5663362.579 ops/s
# Warmup Iteration  21: 5646960.760 ops/s
# Warmup Iteration  22: 5680864.251 ops/s
# Warmup Iteration  23: 5666667.325 ops/s
# Warmup Iteration  24: 5692424.946 ops/s
# Warmup Iteration  25: 5710724.566 ops/s
# Warmup Iteration  26: 5627754.500 ops/s
# Warmup Iteration  27: 5663022.500 ops/s
# Warmup Iteration  28: 5666830.509 ops/s
# Warmup Iteration  29: 5643893.801 ops/s
# Warmup Iteration  30: 5645692.061 ops/s
Iteration   1: 5676597.136 ops/s
Iteration   2: 5675239.571 ops/s
Iteration   3: 5683458.494 ops/s
Iteration   4: 5694235.226 ops/s
Iteration   5: 5680770.037 ops/s
Iteration   6: 5674299.728 ops/s
Iteration   7: 5686107.962 ops/s
Iteration   8: 5663378.045 ops/s
Iteration   9: 5694300.415 ops/s
Iteration  10: 5620970.005 ops/s
Iteration  11: 5603761.942 ops/s
Iteration  12: 5630477.589 ops/s
Iteration  13: 5704880.493 ops/s
Iteration  14: 5646409.014 ops/s
Iteration  15: 5672324.684 ops/s
Iteration  16: 5735189.143 ops/s
Iteration  17: 5677176.090 ops/s
Iteration  18: 5667890.153 ops/s
Iteration  19: 5672536.956 ops/s
Iteration  20: 5642752.138 ops/s
Iteration  21: 5687178.814 ops/s
Iteration  22: 5711137.450 ops/s
Iteration  23: 5662613.048 ops/s
Iteration  24: 5688451.831 ops/s
Iteration  25: 5711718.221 ops/s
Iteration  26: 5682796.207 ops/s
Iteration  27: 5681771.196 ops/s
Iteration  28: 5676977.929 ops/s
Iteration  29: 5701374.193 ops/s
Iteration  30: 5679961.226 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toBag":
  5676224.498 ±(99.9%) 18170.114 ops/s [Average]
  (min, avg, max) = (5603761.942, 5676224.498, 5735189.143), stdev = 27196.173
  CI (99.9%): [5658054.384, 5694394.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_toBag  thrpt   30  5676224.498 ± 18170.114  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8292066.090 ops/s
# Warmup Iteration   2: 14854985.569 ops/s
# Warmup Iteration   3: 14477476.864 ops/s
# Warmup Iteration   4: 15676081.622 ops/s
# Warmup Iteration   5: 15762480.244 ops/s
# Warmup Iteration   6: 15777314.447 ops/s
# Warmup Iteration   7: 15714629.213 ops/s
# Warmup Iteration   8: 15716848.410 ops/s
# Warmup Iteration   9: 15722617.195 ops/s
# Warmup Iteration  10: 15490390.830 ops/s
# Warmup Iteration  11: 15633571.847 ops/s
# Warmup Iteration  12: 15727101.205 ops/s
# Warmup Iteration  13: 15782096.073 ops/s
# Warmup Iteration  14: 15714664.624 ops/s
# Warmup Iteration  15: 15609118.354 ops/s
# Warmup Iteration  16: 15732316.290 ops/s
# Warmup Iteration  17: 15737900.402 ops/s
# Warmup Iteration  18: 15622938.977 ops/s
# Warmup Iteration  19: 15715652.991 ops/s
# Warmup Iteration  20: 15687714.212 ops/s
# Warmup Iteration  21: 15546879.221 ops/s
# Warmup Iteration  22: 15672062.317 ops/s
# Warmup Iteration  23: 15766596.430 ops/s
# Warmup Iteration  24: 15779783.770 ops/s
# Warmup Iteration  25: 15656809.874 ops/s
# Warmup Iteration  26: 15758341.142 ops/s
# Warmup Iteration  27: 15768113.085 ops/s
# Warmup Iteration  28: 15675092.144 ops/s
# Warmup Iteration  29: 15709860.964 ops/s
# Warmup Iteration  30: 15462644.208 ops/s
Iteration   1: 15733086.137 ops/s
Iteration   2: 15786034.177 ops/s
Iteration   3: 15583109.873 ops/s
Iteration   4: 15658558.957 ops/s
Iteration   5: 15799055.780 ops/s
Iteration   6: 15787372.922 ops/s
Iteration   7: 15648700.202 ops/s
Iteration   8: 15802417.112 ops/s
Iteration   9: 15703217.104 ops/s
Iteration  10: 15588901.383 ops/s
Iteration  11: 15639312.678 ops/s
Iteration  12: 15759415.749 ops/s
Iteration  13: 15761133.780 ops/s
Iteration  14: 15716858.758 ops/s
Iteration  15: 15467454.179 ops/s
Iteration  16: 15694091.924 ops/s
Iteration  17: 15825026.050 ops/s
Iteration  18: 15718752.178 ops/s
Iteration  19: 15781962.014 ops/s
Iteration  20: 15774325.248 ops/s
Iteration  21: 15787289.522 ops/s
Iteration  22: 15779372.501 ops/s
Iteration  23: 15774826.307 ops/s
Iteration  24: 15678316.023 ops/s
Iteration  25: 15719952.545 ops/s
Iteration  26: 15634718.764 ops/s
Iteration  27: 15723200.348 ops/s
Iteration  28: 15843004.487 ops/s
Iteration  29: 15650925.194 ops/s
Iteration  30: 15810739.762 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toImmutable":
  15721037.722 ±(99.9%) 56500.996 ops/s [Average]
  (min, avg, max) = (15467454.179, 15721037.722, 15843004.487), stdev = 84568.038
  CI (99.9%): [15664536.725, 15777538.718] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_toImmutable  thrpt   30  15721037.722 ± 56500.996  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2785094.822 ops/s
# Warmup Iteration   2: 4880259.388 ops/s
# Warmup Iteration   3: 5833270.109 ops/s
# Warmup Iteration   4: 5816201.532 ops/s
# Warmup Iteration   5: 5791338.578 ops/s
# Warmup Iteration   6: 5818826.490 ops/s
# Warmup Iteration   7: 5823478.652 ops/s
# Warmup Iteration   8: 5717929.913 ops/s
# Warmup Iteration   9: 5833434.369 ops/s
# Warmup Iteration  10: 5840749.985 ops/s
# Warmup Iteration  11: 5780848.625 ops/s
# Warmup Iteration  12: 5797515.753 ops/s
# Warmup Iteration  13: 5848584.363 ops/s
# Warmup Iteration  14: 5764719.553 ops/s
# Warmup Iteration  15: 5828723.981 ops/s
# Warmup Iteration  16: 5858013.890 ops/s
# Warmup Iteration  17: 5860453.252 ops/s
# Warmup Iteration  18: 5845216.649 ops/s
# Warmup Iteration  19: 5841535.620 ops/s
# Warmup Iteration  20: 5847051.126 ops/s
# Warmup Iteration  21: 5821411.947 ops/s
# Warmup Iteration  22: 5839497.276 ops/s
# Warmup Iteration  23: 5815484.159 ops/s
# Warmup Iteration  24: 5827403.802 ops/s
# Warmup Iteration  25: 5832290.410 ops/s
# Warmup Iteration  26: 5793358.796 ops/s
# Warmup Iteration  27: 5835979.648 ops/s
# Warmup Iteration  28: 5796370.252 ops/s
# Warmup Iteration  29: 5839127.365 ops/s
# Warmup Iteration  30: 5832360.753 ops/s
Iteration   1: 5841994.306 ops/s
Iteration   2: 5800432.606 ops/s
Iteration   3: 5846727.294 ops/s
Iteration   4: 5800559.531 ops/s
Iteration   5: 5860141.658 ops/s
Iteration   6: 5881517.290 ops/s
Iteration   7: 5834766.804 ops/s
Iteration   8: 5852929.922 ops/s
Iteration   9: 5806453.661 ops/s
Iteration  10: 5840986.296 ops/s
Iteration  11: 5875148.412 ops/s
Iteration  12: 5847122.373 ops/s
Iteration  13: 5853019.162 ops/s
Iteration  14: 5816412.458 ops/s
Iteration  15: 5853165.341 ops/s
Iteration  16: 5863409.776 ops/s
Iteration  17: 5853311.250 ops/s
Iteration  18: 5855618.853 ops/s
Iteration  19: 5859345.434 ops/s
Iteration  20: 5809393.197 ops/s
Iteration  21: 5816951.576 ops/s
Iteration  22: 5792690.289 ops/s
Iteration  23: 5851874.361 ops/s
Iteration  24: 5849310.120 ops/s
Iteration  25: 5821670.905 ops/s
Iteration  26: 5755243.070 ops/s
Iteration  27: 5875510.608 ops/s
Iteration  28: 5813703.069 ops/s
Iteration  29: 5847620.298 ops/s
Iteration  30: 5805320.459 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toList":
  5836078.346 ±(99.9%) 19361.703 ops/s [Average]
  (min, avg, max) = (5755243.070, 5836078.346, 5881517.290), stdev = 28979.688
  CI (99.9%): [5816716.642, 5855440.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_toList  thrpt   30  5836078.346 ± 19361.703  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2262071.943 ops/s
# Warmup Iteration   2: 5532302.347 ops/s
# Warmup Iteration   3: 4466937.704 ops/s
# Warmup Iteration   4: 5495222.727 ops/s
# Warmup Iteration   5: 5474503.922 ops/s
# Warmup Iteration   6: 5494148.520 ops/s
# Warmup Iteration   7: 5488225.233 ops/s
# Warmup Iteration   8: 5506415.489 ops/s
# Warmup Iteration   9: 5495220.027 ops/s
# Warmup Iteration  10: 5460344.615 ops/s
# Warmup Iteration  11: 5495977.627 ops/s
# Warmup Iteration  12: 5502857.169 ops/s
# Warmup Iteration  13: 5504941.313 ops/s
# Warmup Iteration  14: 5502285.473 ops/s
# Warmup Iteration  15: 5427510.937 ops/s
# Warmup Iteration  16: 5425106.123 ops/s
# Warmup Iteration  17: 5477024.028 ops/s
# Warmup Iteration  18: 5495138.700 ops/s
# Warmup Iteration  19: 5516644.221 ops/s
# Warmup Iteration  20: 5507999.021 ops/s
# Warmup Iteration  21: 5512700.206 ops/s
# Warmup Iteration  22: 5496574.815 ops/s
# Warmup Iteration  23: 5517221.865 ops/s
# Warmup Iteration  24: 5410442.124 ops/s
# Warmup Iteration  25: 5492554.921 ops/s
# Warmup Iteration  26: 5442781.591 ops/s
# Warmup Iteration  27: 5473010.587 ops/s
# Warmup Iteration  28: 5482461.175 ops/s
# Warmup Iteration  29: 5505969.276 ops/s
# Warmup Iteration  30: 5406175.579 ops/s
Iteration   1: 5480361.286 ops/s
Iteration   2: 5525347.912 ops/s
Iteration   3: 5502745.092 ops/s
Iteration   4: 5411087.534 ops/s
Iteration   5: 5400332.169 ops/s
Iteration   6: 5525264.445 ops/s
Iteration   7: 5482508.623 ops/s
Iteration   8: 5478051.979 ops/s
Iteration   9: 5499894.456 ops/s
Iteration  10: 5513390.848 ops/s
Iteration  11: 5522279.158 ops/s
Iteration  12: 5520498.373 ops/s
Iteration  13: 5488728.409 ops/s
Iteration  14: 5432499.927 ops/s
Iteration  15: 5451579.006 ops/s
Iteration  16: 5465095.645 ops/s
Iteration  17: 5530357.079 ops/s
Iteration  18: 5525810.930 ops/s
Iteration  19: 5505988.973 ops/s
Iteration  20: 5497998.978 ops/s
Iteration  21: 5526066.422 ops/s
Iteration  22: 5503757.520 ops/s
Iteration  23: 5485955.330 ops/s
Iteration  24: 5402052.767 ops/s
Iteration  25: 5445796.262 ops/s
Iteration  26: 5479473.643 ops/s
Iteration  27: 5494180.120 ops/s
Iteration  28: 5413287.440 ops/s
Iteration  29: 5460757.108 ops/s
Iteration  30: 5503416.588 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toReversed":
  5482485.467 ±(99.9%) 26323.000 ops/s [Average]
  (min, avg, max) = (5400332.169, 5482485.467, 5530357.079), stdev = 39399.030
  CI (99.9%): [5456162.468, 5508808.467] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_toReversed  thrpt   30  5482485.467 ± 26323.000  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7451898.246 ops/s
# Warmup Iteration   2: 13609997.011 ops/s
# Warmup Iteration   3: 13286151.335 ops/s
# Warmup Iteration   4: 14607888.717 ops/s
# Warmup Iteration   5: 14546606.568 ops/s
# Warmup Iteration   6: 14276143.453 ops/s
# Warmup Iteration   7: 14444677.045 ops/s
# Warmup Iteration   8: 14278498.644 ops/s
# Warmup Iteration   9: 14503020.971 ops/s
# Warmup Iteration  10: 14586369.019 ops/s
# Warmup Iteration  11: 14593557.489 ops/s
# Warmup Iteration  12: 14508993.071 ops/s
# Warmup Iteration  13: 14553656.565 ops/s
# Warmup Iteration  14: 14484517.974 ops/s
# Warmup Iteration  15: 14565322.731 ops/s
# Warmup Iteration  16: 14610268.664 ops/s
# Warmup Iteration  17: 14547238.062 ops/s
# Warmup Iteration  18: 14573542.946 ops/s
# Warmup Iteration  19: 14521968.688 ops/s
# Warmup Iteration  20: 14594984.765 ops/s
# Warmup Iteration  21: 14618596.262 ops/s
# Warmup Iteration  22: 14618819.888 ops/s
# Warmup Iteration  23: 14429669.777 ops/s
# Warmup Iteration  24: 14444059.875 ops/s
# Warmup Iteration  25: 14649746.636 ops/s
# Warmup Iteration  26: 14550359.177 ops/s
# Warmup Iteration  27: 14564754.033 ops/s
# Warmup Iteration  28: 14622732.861 ops/s
# Warmup Iteration  29: 14664114.782 ops/s
# Warmup Iteration  30: 14584689.857 ops/s
Iteration   1: 14447693.753 ops/s
Iteration   2: 14552092.107 ops/s
Iteration   3: 14501102.438 ops/s
Iteration   4: 14554488.338 ops/s
Iteration   5: 14568389.899 ops/s
Iteration   6: 14355934.299 ops/s
Iteration   7: 14667482.364 ops/s
Iteration   8: 14602023.587 ops/s
Iteration   9: 14599895.373 ops/s
Iteration  10: 14461896.537 ops/s
Iteration  11: 14499810.265 ops/s
Iteration  12: 14663867.022 ops/s
Iteration  13: 14537984.823 ops/s
Iteration  14: 14631924.911 ops/s
Iteration  15: 14586708.406 ops/s
Iteration  16: 14642834.103 ops/s
Iteration  17: 14583930.487 ops/s
Iteration  18: 14596385.657 ops/s
Iteration  19: 14606984.466 ops/s
Iteration  20: 14649445.377 ops/s
Iteration  21: 14545120.512 ops/s
Iteration  22: 14546300.622 ops/s
Iteration  23: 14621956.860 ops/s
Iteration  24: 14634797.597 ops/s
Iteration  25: 14594204.484 ops/s
Iteration  26: 14578802.780 ops/s
Iteration  27: 14595364.016 ops/s
Iteration  28: 14509702.718 ops/s
Iteration  29: 14607021.204 ops/s
Iteration  30: 14461125.260 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_toSet":
  14566842.342 ±(99.9%) 47712.732 ops/s [Average]
  (min, avg, max) = (14355934.299, 14566842.342, 14667482.364), stdev = 71414.177
  CI (99.9%): [14519129.610, 14614555.075] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_toSet  thrpt   30  14566842.342 ± 47712.732  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 849816.324 ops/s
# Warmup Iteration   2: 1939297.255 ops/s
# Warmup Iteration   3: 1601039.004 ops/s
# Warmup Iteration   4: 1939010.345 ops/s
# Warmup Iteration   5: 1948806.940 ops/s
# Warmup Iteration   6: 1947563.366 ops/s
# Warmup Iteration   7: 1955499.383 ops/s
# Warmup Iteration   8: 1946617.239 ops/s
# Warmup Iteration   9: 1944401.900 ops/s
# Warmup Iteration  10: 1945605.851 ops/s
# Warmup Iteration  11: 1935588.697 ops/s
# Warmup Iteration  12: 1939407.178 ops/s
# Warmup Iteration  13: 1948553.520 ops/s
# Warmup Iteration  14: 1952281.437 ops/s
# Warmup Iteration  15: 1942026.049 ops/s
# Warmup Iteration  16: 1951357.853 ops/s
# Warmup Iteration  17: 1948831.471 ops/s
# Warmup Iteration  18: 1948533.776 ops/s
# Warmup Iteration  19: 1948577.450 ops/s
# Warmup Iteration  20: 1924852.480 ops/s
# Warmup Iteration  21: 1944258.001 ops/s
# Warmup Iteration  22: 1952159.545 ops/s
# Warmup Iteration  23: 1945128.926 ops/s
# Warmup Iteration  24: 1952308.737 ops/s
# Warmup Iteration  25: 1956394.777 ops/s
# Warmup Iteration  26: 1956728.933 ops/s
# Warmup Iteration  27: 1939419.174 ops/s
# Warmup Iteration  28: 1923541.832 ops/s
# Warmup Iteration  29: 1933151.349 ops/s
# Warmup Iteration  30: 1945669.964 ops/s
Iteration   1: 1893223.805 ops/s
Iteration   2: 1955616.609 ops/s
Iteration   3: 1952129.470 ops/s
Iteration   4: 1914008.057 ops/s
Iteration   5: 1945882.678 ops/s
Iteration   6: 1946843.923 ops/s
Iteration   7: 1957056.023 ops/s
Iteration   8: 1944484.001 ops/s
Iteration   9: 1946812.984 ops/s
Iteration  10: 1945634.027 ops/s
Iteration  11: 1954813.503 ops/s
Iteration  12: 1945410.871 ops/s
Iteration  13: 1947264.065 ops/s
Iteration  14: 1918965.097 ops/s
Iteration  15: 1953923.197 ops/s
Iteration  16: 1952244.464 ops/s
Iteration  17: 1957605.676 ops/s
Iteration  18: 1956515.996 ops/s
Iteration  19: 1953956.621 ops/s
Iteration  20: 1939986.430 ops/s
Iteration  21: 1927589.418 ops/s
Iteration  22: 1930426.284 ops/s
Iteration  23: 1952923.428 ops/s
Iteration  24: 1944959.045 ops/s
Iteration  25: 1941730.871 ops/s
Iteration  26: 1948850.638 ops/s
Iteration  27: 1954849.931 ops/s
Iteration  28: 1952081.808 ops/s
Iteration  29: 1941583.907 ops/s
Iteration  30: 1952719.078 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_with":
  1944336.397 ±(99.9%) 9670.528 ops/s [Average]
  (min, avg, max) = (1893223.805, 1944336.397, 1957605.676), stdev = 14474.392
  CI (99.9%): [1934665.869, 1954006.925] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_with  thrpt   30  1944336.397 ± 9670.528  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1389716.332 ops/s
# Warmup Iteration   2: 3263744.617 ops/s
# Warmup Iteration   3: 2747082.639 ops/s
# Warmup Iteration   4: 3300429.290 ops/s
# Warmup Iteration   5: 3328109.303 ops/s
# Warmup Iteration   6: 3345736.156 ops/s
# Warmup Iteration   7: 3332095.488 ops/s
# Warmup Iteration   8: 3300210.708 ops/s
# Warmup Iteration   9: 3307560.187 ops/s
# Warmup Iteration  10: 3295743.029 ops/s
# Warmup Iteration  11: 3331927.700 ops/s
# Warmup Iteration  12: 3319985.653 ops/s
# Warmup Iteration  13: 3320843.944 ops/s
# Warmup Iteration  14: 3334795.189 ops/s
# Warmup Iteration  15: 3309679.873 ops/s
# Warmup Iteration  16: 3320578.365 ops/s
# Warmup Iteration  17: 3325064.215 ops/s
# Warmup Iteration  18: 3335265.209 ops/s
# Warmup Iteration  19: 3319131.159 ops/s
# Warmup Iteration  20: 3334066.068 ops/s
# Warmup Iteration  21: 3296289.452 ops/s
# Warmup Iteration  22: 3342295.868 ops/s
# Warmup Iteration  23: 3283837.041 ops/s
# Warmup Iteration  24: 3347353.963 ops/s
# Warmup Iteration  25: 3304617.366 ops/s
# Warmup Iteration  26: 3297296.853 ops/s
# Warmup Iteration  27: 3321587.323 ops/s
# Warmup Iteration  28: 3342637.847 ops/s
# Warmup Iteration  29: 3314530.945 ops/s
# Warmup Iteration  30: 3307938.504 ops/s
Iteration   1: 3332432.217 ops/s
Iteration   2: 3315216.098 ops/s
Iteration   3: 3321124.800 ops/s
Iteration   4: 3329413.228 ops/s
Iteration   5: 3310067.089 ops/s
Iteration   6: 3316676.331 ops/s
Iteration   7: 3331188.781 ops/s
Iteration   8: 3339679.506 ops/s
Iteration   9: 3322323.006 ops/s
Iteration  10: 3340640.540 ops/s
Iteration  11: 3325501.508 ops/s
Iteration  12: 3343474.238 ops/s
Iteration  13: 3266761.386 ops/s
Iteration  14: 3328397.175 ops/s
Iteration  15: 3352638.011 ops/s
Iteration  16: 3312980.286 ops/s
Iteration  17: 3343119.844 ops/s
Iteration  18: 3343545.467 ops/s
Iteration  19: 3327803.979 ops/s
Iteration  20: 3345004.897 ops/s
Iteration  21: 3328017.602 ops/s
Iteration  22: 3287377.142 ops/s
Iteration  23: 3340997.477 ops/s
Iteration  24: 3333865.031 ops/s
Iteration  25: 3338711.077 ops/s
Iteration  26: 3308106.435 ops/s
Iteration  27: 3307105.083 ops/s
Iteration  28: 3330996.622 ops/s
Iteration  29: 3291743.935 ops/s
Iteration  30: 3348553.188 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_withAll":
  3325448.733 ±(99.9%) 12988.496 ops/s [Average]
  (min, avg, max) = (3266761.386, 3325448.733, 3352638.011), stdev = 19440.571
  CI (99.9%): [3312460.236, 3338437.229] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_withAll  thrpt   30  3325448.733 ± 12988.496  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1062063.478 ops/s
# Warmup Iteration   2: 2292636.600 ops/s
# Warmup Iteration   3: 2345538.905 ops/s
# Warmup Iteration   4: 2256375.686 ops/s
# Warmup Iteration   5: 2038892.549 ops/s
# Warmup Iteration   6: 2350179.851 ops/s
# Warmup Iteration   7: 2337957.813 ops/s
# Warmup Iteration   8: 2360637.326 ops/s
# Warmup Iteration   9: 2352186.556 ops/s
# Warmup Iteration  10: 2359450.182 ops/s
# Warmup Iteration  11: 2359831.394 ops/s
# Warmup Iteration  12: 2359713.535 ops/s
# Warmup Iteration  13: 2356672.772 ops/s
# Warmup Iteration  14: 2349183.791 ops/s
# Warmup Iteration  15: 2361828.173 ops/s
# Warmup Iteration  16: 2359684.375 ops/s
# Warmup Iteration  17: 2358574.956 ops/s
# Warmup Iteration  18: 2359301.397 ops/s
# Warmup Iteration  19: 2359753.957 ops/s
# Warmup Iteration  20: 2362592.934 ops/s
# Warmup Iteration  21: 2355006.150 ops/s
# Warmup Iteration  22: 2363552.139 ops/s
# Warmup Iteration  23: 2361812.494 ops/s
# Warmup Iteration  24: 2361608.071 ops/s
# Warmup Iteration  25: 2318715.914 ops/s
# Warmup Iteration  26: 2339036.884 ops/s
# Warmup Iteration  27: 2333767.088 ops/s
# Warmup Iteration  28: 2357052.455 ops/s
# Warmup Iteration  29: 2356437.554 ops/s
# Warmup Iteration  30: 2344819.060 ops/s
Iteration   1: 2360224.672 ops/s
Iteration   2: 2357693.865 ops/s
Iteration   3: 2353286.920 ops/s
Iteration   4: 2353685.133 ops/s
Iteration   5: 2374907.284 ops/s
Iteration   6: 2341324.746 ops/s
Iteration   7: 2353710.619 ops/s
Iteration   8: 2357788.596 ops/s
Iteration   9: 2338424.324 ops/s
Iteration  10: 2328253.093 ops/s
Iteration  11: 2307012.796 ops/s
Iteration  12: 2331959.852 ops/s
Iteration  13: 2327114.029 ops/s
Iteration  14: 2355593.991 ops/s
Iteration  15: 2358753.772 ops/s
Iteration  16: 2349784.025 ops/s
Iteration  17: 2353057.827 ops/s
Iteration  18: 2360493.921 ops/s
Iteration  19: 2352935.761 ops/s
Iteration  20: 2364600.994 ops/s
Iteration  21: 2363199.185 ops/s
Iteration  22: 2365808.862 ops/s
Iteration  23: 2363223.023 ops/s
Iteration  24: 2316347.606 ops/s
Iteration  25: 2354207.237 ops/s
Iteration  26: 2349643.806 ops/s
Iteration  27: 2354679.589 ops/s
Iteration  28: 2351756.678 ops/s
Iteration  29: 2359137.624 ops/s
Iteration  30: 2360218.244 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_without":
  2350627.603 ±(99.9%) 10126.241 ops/s [Average]
  (min, avg, max) = (2307012.796, 2350627.603, 2374907.284), stdev = 15156.482
  CI (99.9%): [2340501.362, 2360753.843] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
BooleanArrayListTest._Benchmark.benchmark_without  thrpt   30  2350627.603 ± 10126.241  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1135868.483 ops/s
# Warmup Iteration   2: 2616468.494 ops/s
# Warmup Iteration   3: 2598521.318 ops/s
# Warmup Iteration   4: 2190579.624 ops/s
# Warmup Iteration   5: 2615292.101 ops/s
# Warmup Iteration   6: 2624360.648 ops/s
# Warmup Iteration   7: 2633374.728 ops/s
# Warmup Iteration   8: 2635422.544 ops/s
# Warmup Iteration   9: 2639816.581 ops/s
# Warmup Iteration  10: 2635280.360 ops/s
# Warmup Iteration  11: 2606818.788 ops/s
# Warmup Iteration  12: 2637438.029 ops/s
# Warmup Iteration  13: 2619924.548 ops/s
# Warmup Iteration  14: 2614074.897 ops/s
# Warmup Iteration  15: 2624284.383 ops/s
# Warmup Iteration  16: 2640467.107 ops/s
# Warmup Iteration  17: 2632497.272 ops/s
# Warmup Iteration  18: 2636680.333 ops/s
# Warmup Iteration  19: 2648194.650 ops/s
# Warmup Iteration  20: 2623540.734 ops/s
# Warmup Iteration  21: 2622487.290 ops/s
# Warmup Iteration  22: 2636970.185 ops/s
# Warmup Iteration  23: 2633972.348 ops/s
# Warmup Iteration  24: 2636352.321 ops/s
# Warmup Iteration  25: 2634094.018 ops/s
# Warmup Iteration  26: 2612187.037 ops/s
# Warmup Iteration  27: 2635621.126 ops/s
# Warmup Iteration  28: 2625582.985 ops/s
# Warmup Iteration  29: 2627488.234 ops/s
# Warmup Iteration  30: 2619351.139 ops/s
Iteration   1: 2652563.568 ops/s
Iteration   2: 2638740.593 ops/s
Iteration   3: 2631785.985 ops/s
Iteration   4: 2651923.215 ops/s
Iteration   5: 2628038.786 ops/s
Iteration   6: 2629345.828 ops/s
Iteration   7: 2635653.591 ops/s
Iteration   8: 2637744.903 ops/s
Iteration   9: 2642317.788 ops/s
Iteration  10: 2608742.786 ops/s
Iteration  11: 2637481.071 ops/s
Iteration  12: 2645599.506 ops/s
Iteration  13: 2611492.359 ops/s
Iteration  14: 2646882.253 ops/s
Iteration  15: 2626445.350 ops/s
Iteration  16: 2640239.774 ops/s
Iteration  17: 2628817.904 ops/s
Iteration  18: 2622606.940 ops/s
Iteration  19: 2637763.386 ops/s
Iteration  20: 2631223.805 ops/s
Iteration  21: 2631095.834 ops/s
Iteration  22: 2623291.670 ops/s
Iteration  23: 2629305.705 ops/s
Iteration  24: 2614351.130 ops/s
Iteration  25: 2639874.912 ops/s
Iteration  26: 2638320.796 ops/s
Iteration  27: 2633644.516 ops/s
Iteration  28: 2599965.797 ops/s
Iteration  29: 2645527.318 ops/s
Iteration  30: 2631233.126 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayListTest._Benchmark.benchmark_withoutAll":
  2632400.673 ±(99.9%) 8205.869 ops/s [Average]
  (min, avg, max) = (2599965.797, 2632400.673, 2652563.568), stdev = 12282.159
  CI (99.9%): [2624194.805, 2640606.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
BooleanArrayListTest._Benchmark.benchmark_withoutAll  thrpt   30  2632400.673 ± 8205.869  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3536764.956 ops/s
# Warmup Iteration   2: 6241950.628 ops/s
# Warmup Iteration   3: 7172801.718 ops/s
# Warmup Iteration   4: 7233863.006 ops/s
# Warmup Iteration   5: 7315022.996 ops/s
# Warmup Iteration   6: 7286915.361 ops/s
# Warmup Iteration   7: 7299862.762 ops/s
# Warmup Iteration   8: 7233431.261 ops/s
# Warmup Iteration   9: 7304556.556 ops/s
# Warmup Iteration  10: 7199392.454 ops/s
# Warmup Iteration  11: 7302226.906 ops/s
# Warmup Iteration  12: 7316637.866 ops/s
# Warmup Iteration  13: 7272817.651 ops/s
# Warmup Iteration  14: 7289516.808 ops/s
# Warmup Iteration  15: 7209991.403 ops/s
# Warmup Iteration  16: 7343084.067 ops/s
# Warmup Iteration  17: 7226660.922 ops/s
# Warmup Iteration  18: 7319569.578 ops/s
# Warmup Iteration  19: 7307360.771 ops/s
# Warmup Iteration  20: 7214250.059 ops/s
# Warmup Iteration  21: 7277995.823 ops/s
# Warmup Iteration  22: 7293953.733 ops/s
# Warmup Iteration  23: 7316666.391 ops/s
# Warmup Iteration  24: 7308030.625 ops/s
# Warmup Iteration  25: 7248811.473 ops/s
# Warmup Iteration  26: 7261945.773 ops/s
# Warmup Iteration  27: 7292040.494 ops/s
# Warmup Iteration  28: 7232779.392 ops/s
# Warmup Iteration  29: 7333787.620 ops/s
# Warmup Iteration  30: 7337951.836 ops/s
Iteration   1: 7316863.124 ops/s
Iteration   2: 7330277.509 ops/s
Iteration   3: 7329225.265 ops/s
Iteration   4: 7274994.984 ops/s
Iteration   5: 7312229.622 ops/s
Iteration   6: 7360410.754 ops/s
Iteration   7: 7317367.785 ops/s
Iteration   8: 7318676.997 ops/s
Iteration   9: 7294006.156 ops/s
Iteration  10: 7178751.735 ops/s
Iteration  11: 7237709.414 ops/s
Iteration  12: 7318629.124 ops/s
Iteration  13: 7259227.944 ops/s
Iteration  14: 7348800.748 ops/s
Iteration  15: 7302722.015 ops/s
Iteration  16: 7340952.893 ops/s
Iteration  17: 7352173.558 ops/s
Iteration  18: 7257074.063 ops/s
Iteration  19: 7301137.831 ops/s
Iteration  20: 7284154.138 ops/s
Iteration  21: 7305684.128 ops/s
Iteration  22: 7312105.081 ops/s
Iteration  23: 7319629.461 ops/s
Iteration  24: 7278835.640 ops/s
Iteration  25: 7319890.631 ops/s
Iteration  26: 7339567.609 ops/s
Iteration  27: 7271472.413 ops/s
Iteration  28: 7203605.839 ops/s
Iteration  29: 7295568.049 ops/s
Iteration  30: 7314866.451 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_allSatisfy":
  7299887.032 ±(99.9%) 27730.489 ops/s [Average]
  (min, avg, max) = (7178751.735, 7299887.032, 7360410.754), stdev = 41505.694
  CI (99.9%): [7272156.543, 7327617.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_allSatisfy  thrpt   30  7299887.032 ± 27730.489  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4001032.390 ops/s
# Warmup Iteration   2: 6981548.211 ops/s
# Warmup Iteration   3: 8298715.434 ops/s
# Warmup Iteration   4: 8196938.160 ops/s
# Warmup Iteration   5: 8165518.650 ops/s
# Warmup Iteration   6: 8262422.402 ops/s
# Warmup Iteration   7: 8306236.300 ops/s
# Warmup Iteration   8: 8289830.457 ops/s
# Warmup Iteration   9: 8233091.863 ops/s
# Warmup Iteration  10: 8163165.672 ops/s
# Warmup Iteration  11: 8299004.099 ops/s
# Warmup Iteration  12: 8307222.546 ops/s
# Warmup Iteration  13: 8260034.372 ops/s
# Warmup Iteration  14: 8156433.068 ops/s
# Warmup Iteration  15: 8274539.493 ops/s
# Warmup Iteration  16: 8281017.580 ops/s
# Warmup Iteration  17: 8236433.067 ops/s
# Warmup Iteration  18: 8201949.304 ops/s
# Warmup Iteration  19: 8233810.218 ops/s
# Warmup Iteration  20: 8257667.225 ops/s
# Warmup Iteration  21: 8287528.368 ops/s
# Warmup Iteration  22: 8224888.826 ops/s
# Warmup Iteration  23: 8218082.935 ops/s
# Warmup Iteration  24: 8219471.620 ops/s
# Warmup Iteration  25: 8280279.635 ops/s
# Warmup Iteration  26: 8217364.530 ops/s
# Warmup Iteration  27: 8246320.482 ops/s
# Warmup Iteration  28: 8233122.109 ops/s
# Warmup Iteration  29: 8264302.311 ops/s
# Warmup Iteration  30: 8265091.799 ops/s
Iteration   1: 8262486.810 ops/s
Iteration   2: 8285320.493 ops/s
Iteration   3: 8200125.625 ops/s
Iteration   4: 8254992.309 ops/s
Iteration   5: 8248155.412 ops/s
Iteration   6: 8315834.618 ops/s
Iteration   7: 8314522.092 ops/s
Iteration   8: 8071563.404 ops/s
Iteration   9: 8294085.931 ops/s
Iteration  10: 8252335.571 ops/s
Iteration  11: 8174559.589 ops/s
Iteration  12: 8290982.263 ops/s
Iteration  13: 8147281.560 ops/s
Iteration  14: 8235045.271 ops/s
Iteration  15: 8239070.468 ops/s
Iteration  16: 8235592.701 ops/s
Iteration  17: 8258724.920 ops/s
Iteration  18: 8276059.321 ops/s
Iteration  19: 8289736.273 ops/s
Iteration  20: 8302806.076 ops/s
Iteration  21: 8245606.792 ops/s
Iteration  22: 8245397.468 ops/s
Iteration  23: 8248322.003 ops/s
Iteration  24: 8337339.989 ops/s
Iteration  25: 8225699.183 ops/s
Iteration  26: 8297281.721 ops/s
Iteration  27: 8321477.597 ops/s
Iteration  28: 8275780.909 ops/s
Iteration  29: 8270691.919 ops/s
Iteration  30: 8324361.396 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_anySatisfy":
  8258041.323 ±(99.9%) 37238.166 ops/s [Average]
  (min, avg, max) = (8071563.404, 8258041.323, 8337339.989), stdev = 55736.338
  CI (99.9%): [8220803.157, 8295279.489] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_anySatisfy  thrpt   30  8258041.323 ± 37238.166  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1017122.159 ops/s
# Warmup Iteration   2: 2216376.401 ops/s
# Warmup Iteration   3: 2367935.958 ops/s
# Warmup Iteration   4: 1974128.797 ops/s
# Warmup Iteration   5: 2339453.166 ops/s
# Warmup Iteration   6: 2363648.298 ops/s
# Warmup Iteration   7: 2364458.912 ops/s
# Warmup Iteration   8: 2338058.837 ops/s
# Warmup Iteration   9: 2373987.789 ops/s
# Warmup Iteration  10: 2376310.804 ops/s
# Warmup Iteration  11: 2362127.201 ops/s
# Warmup Iteration  12: 2361565.722 ops/s
# Warmup Iteration  13: 2357211.955 ops/s
# Warmup Iteration  14: 2360352.855 ops/s
# Warmup Iteration  15: 2370604.238 ops/s
# Warmup Iteration  16: 2364636.508 ops/s
# Warmup Iteration  17: 2357967.387 ops/s
# Warmup Iteration  18: 2325166.860 ops/s
# Warmup Iteration  19: 2357017.830 ops/s
# Warmup Iteration  20: 2357578.246 ops/s
# Warmup Iteration  21: 2347394.769 ops/s
# Warmup Iteration  22: 2333999.913 ops/s
# Warmup Iteration  23: 2369196.342 ops/s
# Warmup Iteration  24: 2355168.942 ops/s
# Warmup Iteration  25: 2344293.880 ops/s
# Warmup Iteration  26: 2346049.875 ops/s
# Warmup Iteration  27: 2372846.760 ops/s
# Warmup Iteration  28: 2357899.138 ops/s
# Warmup Iteration  29: 2348984.696 ops/s
# Warmup Iteration  30: 2352326.765 ops/s
Iteration   1: 2346080.607 ops/s
Iteration   2: 2386831.218 ops/s
Iteration   3: 2359813.723 ops/s
Iteration   4: 2345744.762 ops/s
Iteration   5: 2362016.795 ops/s
Iteration   6: 2361542.941 ops/s
Iteration   7: 2345086.363 ops/s
Iteration   8: 2357611.895 ops/s
Iteration   9: 2360691.003 ops/s
Iteration  10: 2364011.971 ops/s
Iteration  11: 2364622.698 ops/s
Iteration  12: 2376627.302 ops/s
Iteration  13: 2360940.887 ops/s
Iteration  14: 2335185.683 ops/s
Iteration  15: 2366784.783 ops/s
Iteration  16: 2322470.114 ops/s
Iteration  17: 2371675.874 ops/s
Iteration  18: 2354405.513 ops/s
Iteration  19: 2380537.735 ops/s
Iteration  20: 2360077.677 ops/s
Iteration  21: 2376936.266 ops/s
Iteration  22: 2360170.096 ops/s
Iteration  23: 2373719.616 ops/s
Iteration  24: 2349037.348 ops/s
Iteration  25: 2371299.775 ops/s
Iteration  26: 2340312.502 ops/s
Iteration  27: 2351626.221 ops/s
Iteration  28: 2334067.951 ops/s
Iteration  29: 2370014.685 ops/s
Iteration  30: 2306680.539 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_appendString":
  2357220.818 ±(99.9%) 11698.503 ops/s [Average]
  (min, avg, max) = (2306680.539, 2357220.818, 2386831.218), stdev = 17509.769
  CI (99.9%): [2345522.315, 2368919.321] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_appendString  thrpt   30  2357220.818 ± 11698.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6039453.657 ops/s
# Warmup Iteration   2: 8643051.547 ops/s
# Warmup Iteration   3: 9915671.290 ops/s
# Warmup Iteration   4: 9863906.614 ops/s
# Warmup Iteration   5: 8726780.454 ops/s
# Warmup Iteration   6: 9260892.461 ops/s
# Warmup Iteration   7: 9919336.809 ops/s
# Warmup Iteration   8: 9902521.563 ops/s
# Warmup Iteration   9: 9931499.826 ops/s
# Warmup Iteration  10: 9904455.056 ops/s
# Warmup Iteration  11: 9932261.504 ops/s
# Warmup Iteration  12: 9961060.513 ops/s
# Warmup Iteration  13: 9911344.908 ops/s
# Warmup Iteration  14: 9925177.614 ops/s
# Warmup Iteration  15: 9854663.380 ops/s
# Warmup Iteration  16: 9906639.575 ops/s
# Warmup Iteration  17: 9932957.430 ops/s
# Warmup Iteration  18: 9927607.934 ops/s
# Warmup Iteration  19: 9929173.507 ops/s
# Warmup Iteration  20: 9921161.776 ops/s
# Warmup Iteration  21: 9909458.620 ops/s
# Warmup Iteration  22: 9859162.708 ops/s
# Warmup Iteration  23: 9848152.738 ops/s
# Warmup Iteration  24: 9887942.487 ops/s
# Warmup Iteration  25: 9951624.355 ops/s
# Warmup Iteration  26: 9927376.002 ops/s
# Warmup Iteration  27: 9918357.463 ops/s
# Warmup Iteration  28: 9958540.495 ops/s
# Warmup Iteration  29: 9816513.310 ops/s
# Warmup Iteration  30: 9905527.411 ops/s
Iteration   1: 9903444.965 ops/s
Iteration   2: 9918206.447 ops/s
Iteration   3: 9920528.480 ops/s
Iteration   4: 9941085.300 ops/s
Iteration   5: 9953520.860 ops/s
Iteration   6: 9914702.919 ops/s
Iteration   7: 9902870.340 ops/s
Iteration   8: 9905168.079 ops/s
Iteration   9: 9941230.577 ops/s
Iteration  10: 9874015.308 ops/s
Iteration  11: 9983687.289 ops/s
Iteration  12: 9895658.994 ops/s
Iteration  13: 9733518.156 ops/s
Iteration  14: 9837253.721 ops/s
Iteration  15: 9923680.335 ops/s
Iteration  16: 9974708.555 ops/s
Iteration  17: 9932524.973 ops/s
Iteration  18: 9987177.865 ops/s
Iteration  19: 9956425.092 ops/s
Iteration  20: 9789616.303 ops/s
Iteration  21: 9948117.629 ops/s
Iteration  22: 9811019.942 ops/s
Iteration  23: 9873801.685 ops/s
Iteration  24: 9879951.042 ops/s
Iteration  25: 9906885.560 ops/s
Iteration  26: 9961065.376 ops/s
Iteration  27: 9728571.063 ops/s
Iteration  28: 9841515.348 ops/s
Iteration  29: 9923065.274 ops/s
Iteration  30: 9927442.439 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_asLazy":
  9899681.997 ±(99.9%) 44034.571 ops/s [Average]
  (min, avg, max) = (9728571.063, 9899681.997, 9987177.865), stdev = 65908.879
  CI (99.9%): [9855647.426, 9943716.569] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_asLazy  thrpt   30  9899681.997 ± 44034.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 640880.926 ops/s
# Warmup Iteration   2: 679698.637 ops/s
# Warmup Iteration   3: 912183.007 ops/s
# Warmup Iteration   4: 914816.590 ops/s
# Warmup Iteration   5: 917401.925 ops/s
# Warmup Iteration   6: 918281.964 ops/s
# Warmup Iteration   7: 914591.530 ops/s
# Warmup Iteration   8: 913193.547 ops/s
# Warmup Iteration   9: 919833.583 ops/s
# Warmup Iteration  10: 918281.650 ops/s
# Warmup Iteration  11: 762142.112 ops/s
# Warmup Iteration  12: 915588.802 ops/s
# Warmup Iteration  13: 915277.874 ops/s
# Warmup Iteration  14: 912833.434 ops/s
# Warmup Iteration  15: 914510.398 ops/s
# Warmup Iteration  16: 916791.869 ops/s
# Warmup Iteration  17: 968726.014 ops/s
# Warmup Iteration  18: 969477.858 ops/s
# Warmup Iteration  19: 969524.543 ops/s
# Warmup Iteration  20: 973302.463 ops/s
# Warmup Iteration  21: 963929.310 ops/s
# Warmup Iteration  22: 966862.793 ops/s
# Warmup Iteration  23: 973613.014 ops/s
# Warmup Iteration  24: 962259.468 ops/s
# Warmup Iteration  25: 972004.004 ops/s
# Warmup Iteration  26: 969860.361 ops/s
# Warmup Iteration  27: 967242.405 ops/s
# Warmup Iteration  28: 965611.198 ops/s
# Warmup Iteration  29: 968576.986 ops/s
# Warmup Iteration  30: 966815.747 ops/s
Iteration   1: 969914.552 ops/s
Iteration   2: 961667.567 ops/s
Iteration   3: 969369.761 ops/s
Iteration   4: 966238.901 ops/s
Iteration   5: 969224.181 ops/s
Iteration   6: 968290.799 ops/s
Iteration   7: 954479.218 ops/s
Iteration   8: 966692.007 ops/s
Iteration   9: 969252.912 ops/s
Iteration  10: 971143.853 ops/s
Iteration  11: 970931.803 ops/s
Iteration  12: 967543.498 ops/s
Iteration  13: 973455.706 ops/s
Iteration  14: 957290.358 ops/s
Iteration  15: 965999.620 ops/s
Iteration  16: 970476.293 ops/s
Iteration  17: 967909.915 ops/s
Iteration  18: 971065.913 ops/s
Iteration  19: 970770.697 ops/s
Iteration  20: 959275.345 ops/s
Iteration  21: 950678.261 ops/s
Iteration  22: 973440.284 ops/s
Iteration  23: 974739.370 ops/s
Iteration  24: 970305.501 ops/s
Iteration  25: 974506.838 ops/s
Iteration  26: 972067.719 ops/s
Iteration  27: 976029.843 ops/s
Iteration  28: 962646.036 ops/s
Iteration  29: 954095.264 ops/s
Iteration  30: 963427.856 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_booleanIterator":
  967097.662 ±(99.9%) 4342.516 ops/s [Average]
  (min, avg, max) = (950678.261, 967097.662, 976029.843), stdev = 6499.674
  CI (99.9%): [962755.146, 971440.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_booleanIterator  thrpt   30  967097.662 ± 4342.516  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1065365.335 ops/s
# Warmup Iteration   2: 2589533.776 ops/s
# Warmup Iteration   3: 2254789.624 ops/s
# Warmup Iteration   4: 2542580.899 ops/s
# Warmup Iteration   5: 2615827.772 ops/s
# Warmup Iteration   6: 2628426.417 ops/s
# Warmup Iteration   7: 2624858.611 ops/s
# Warmup Iteration   8: 2578990.225 ops/s
# Warmup Iteration   9: 2602862.269 ops/s
# Warmup Iteration  10: 2634635.873 ops/s
# Warmup Iteration  11: 2637304.609 ops/s
# Warmup Iteration  12: 2634639.824 ops/s
# Warmup Iteration  13: 2609175.589 ops/s
# Warmup Iteration  14: 2628626.827 ops/s
# Warmup Iteration  15: 2631859.721 ops/s
# Warmup Iteration  16: 2619251.022 ops/s
# Warmup Iteration  17: 2602534.854 ops/s
# Warmup Iteration  18: 2614761.710 ops/s
# Warmup Iteration  19: 2592117.514 ops/s
# Warmup Iteration  20: 2626318.374 ops/s
# Warmup Iteration  21: 2628449.051 ops/s
# Warmup Iteration  22: 2615145.588 ops/s
# Warmup Iteration  23: 2622212.558 ops/s
# Warmup Iteration  24: 2620138.550 ops/s
# Warmup Iteration  25: 2623353.836 ops/s
# Warmup Iteration  26: 2631363.224 ops/s
# Warmup Iteration  27: 2617837.507 ops/s
# Warmup Iteration  28: 2615809.147 ops/s
# Warmup Iteration  29: 2628017.475 ops/s
# Warmup Iteration  30: 2629061.467 ops/s
Iteration   1: 2625130.966 ops/s
Iteration   2: 2620851.772 ops/s
Iteration   3: 2614255.957 ops/s
Iteration   4: 2631144.800 ops/s
Iteration   5: 2615716.078 ops/s
Iteration   6: 2583562.240 ops/s
Iteration   7: 2614431.465 ops/s
Iteration   8: 2630639.886 ops/s
Iteration   9: 2626061.076 ops/s
Iteration  10: 2622993.543 ops/s
Iteration  11: 2627241.237 ops/s
Iteration  12: 2623136.852 ops/s
Iteration  13: 2628260.739 ops/s
Iteration  14: 2625363.387 ops/s
Iteration  15: 2622026.223 ops/s
Iteration  16: 2638634.924 ops/s
Iteration  17: 2630542.873 ops/s
Iteration  18: 2641247.409 ops/s
Iteration  19: 2636877.285 ops/s
Iteration  20: 2627823.803 ops/s
Iteration  21: 2632203.979 ops/s
Iteration  22: 2626317.223 ops/s
Iteration  23: 2616844.467 ops/s
Iteration  24: 2613161.035 ops/s
Iteration  25: 2632435.993 ops/s
Iteration  26: 2635926.962 ops/s
Iteration  27: 2610301.886 ops/s
Iteration  28: 2600494.700 ops/s
Iteration  29: 2627758.329 ops/s
Iteration  30: 2591630.480 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_collect":
  2622433.919 ±(99.9%) 8733.400 ops/s [Average]
  (min, avg, max) = (2583562.240, 2622433.919, 2641247.409), stdev = 13071.743
  CI (99.9%): [2613700.519, 2631167.319] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_collect  thrpt   30  2622433.919 ± 8733.400  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6283593.235 ops/s
# Warmup Iteration   2: 10605567.789 ops/s
# Warmup Iteration   3: 12735328.024 ops/s
# Warmup Iteration   4: 12684313.366 ops/s
# Warmup Iteration   5: 12705038.100 ops/s
# Warmup Iteration   6: 12679846.145 ops/s
# Warmup Iteration   7: 12692786.696 ops/s
# Warmup Iteration   8: 12667356.774 ops/s
# Warmup Iteration   9: 12692824.538 ops/s
# Warmup Iteration  10: 12539371.257 ops/s
# Warmup Iteration  11: 12650540.342 ops/s
# Warmup Iteration  12: 12566933.537 ops/s
# Warmup Iteration  13: 12578699.270 ops/s
# Warmup Iteration  14: 12644761.698 ops/s
# Warmup Iteration  15: 12694490.470 ops/s
# Warmup Iteration  16: 12544984.041 ops/s
# Warmup Iteration  17: 12610763.071 ops/s
# Warmup Iteration  18: 12609350.884 ops/s
# Warmup Iteration  19: 12640431.921 ops/s
# Warmup Iteration  20: 12712473.472 ops/s
# Warmup Iteration  21: 12566712.549 ops/s
# Warmup Iteration  22: 12682156.820 ops/s
# Warmup Iteration  23: 12629289.860 ops/s
# Warmup Iteration  24: 12670056.995 ops/s
# Warmup Iteration  25: 12722164.935 ops/s
# Warmup Iteration  26: 12749891.543 ops/s
# Warmup Iteration  27: 12738745.339 ops/s
# Warmup Iteration  28: 12474818.268 ops/s
# Warmup Iteration  29: 12720289.159 ops/s
# Warmup Iteration  30: 12715767.330 ops/s
Iteration   1: 12764891.594 ops/s
Iteration   2: 12531730.182 ops/s
Iteration   3: 12707247.463 ops/s
Iteration   4: 12716557.011 ops/s
Iteration   5: 12840744.178 ops/s
Iteration   6: 12752809.628 ops/s
Iteration   7: 12663475.490 ops/s
Iteration   8: 12612799.322 ops/s
Iteration   9: 12738982.833 ops/s
Iteration  10: 12716741.839 ops/s
Iteration  11: 12723411.699 ops/s
Iteration  12: 12688745.845 ops/s
Iteration  13: 12720298.691 ops/s
Iteration  14: 12735874.095 ops/s
Iteration  15: 12708974.048 ops/s
Iteration  16: 12605239.136 ops/s
Iteration  17: 12630073.095 ops/s
Iteration  18: 12659704.471 ops/s
Iteration  19: 12791046.683 ops/s
Iteration  20: 12801504.782 ops/s
Iteration  21: 12673304.314 ops/s
Iteration  22: 12670090.639 ops/s
Iteration  23: 12634485.233 ops/s
Iteration  24: 12558449.147 ops/s
Iteration  25: 12697960.831 ops/s
Iteration  26: 12764273.631 ops/s
Iteration  27: 12675289.882 ops/s
Iteration  28: 12758895.255 ops/s
Iteration  29: 12676623.657 ops/s
Iteration  30: 12601783.535 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_contains":
  12694066.940 ±(99.9%) 47407.877 ops/s [Average]
  (min, avg, max) = (12531730.182, 12694066.940, 12840744.178), stdev = 70957.883
  CI (99.9%): [12646659.064, 12741474.817] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_contains  thrpt   30  12694066.940 ± 47407.877  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3866318.613 ops/s
# Warmup Iteration   2: 6665017.269 ops/s
# Warmup Iteration   3: 7934510.771 ops/s
# Warmup Iteration   4: 7980069.152 ops/s
# Warmup Iteration   5: 7959853.497 ops/s
# Warmup Iteration   6: 7924961.220 ops/s
# Warmup Iteration   7: 7964896.372 ops/s
# Warmup Iteration   8: 7913727.625 ops/s
# Warmup Iteration   9: 7962224.171 ops/s
# Warmup Iteration  10: 7969319.581 ops/s
# Warmup Iteration  11: 7986641.022 ops/s
# Warmup Iteration  12: 7938055.691 ops/s
# Warmup Iteration  13: 7997056.372 ops/s
# Warmup Iteration  14: 7953981.709 ops/s
# Warmup Iteration  15: 7958576.742 ops/s
# Warmup Iteration  16: 7938955.365 ops/s
# Warmup Iteration  17: 7903686.398 ops/s
# Warmup Iteration  18: 7944508.703 ops/s
# Warmup Iteration  19: 7902052.155 ops/s
# Warmup Iteration  20: 8001891.244 ops/s
# Warmup Iteration  21: 7914565.891 ops/s
# Warmup Iteration  22: 7938462.893 ops/s
# Warmup Iteration  23: 7870928.458 ops/s
# Warmup Iteration  24: 7985651.249 ops/s
# Warmup Iteration  25: 7934116.492 ops/s
# Warmup Iteration  26: 7978696.275 ops/s
# Warmup Iteration  27: 7953875.757 ops/s
# Warmup Iteration  28: 7936196.292 ops/s
# Warmup Iteration  29: 7997670.111 ops/s
# Warmup Iteration  30: 7940440.212 ops/s
Iteration   1: 7972619.562 ops/s
Iteration   2: 7997163.541 ops/s
Iteration   3: 7944178.198 ops/s
Iteration   4: 7992014.365 ops/s
Iteration   5: 7817808.654 ops/s
Iteration   6: 7990750.759 ops/s
Iteration   7: 7909652.025 ops/s
Iteration   8: 7893737.947 ops/s
Iteration   9: 7948983.414 ops/s
Iteration  10: 7990188.322 ops/s
Iteration  11: 7879711.331 ops/s
Iteration  12: 7878581.617 ops/s
Iteration  13: 7928236.061 ops/s
Iteration  14: 7991448.621 ops/s
Iteration  15: 7957921.826 ops/s
Iteration  16: 7940450.281 ops/s
Iteration  17: 7786576.379 ops/s
Iteration  18: 7963602.037 ops/s
Iteration  19: 7891875.291 ops/s
Iteration  20: 7779020.432 ops/s
Iteration  21: 7948798.479 ops/s
Iteration  22: 7917037.088 ops/s
Iteration  23: 7957013.997 ops/s
Iteration  24: 7993904.182 ops/s
Iteration  25: 7827517.731 ops/s
Iteration  26: 7980942.478 ops/s
Iteration  27: 7822836.403 ops/s
Iteration  28: 7952451.447 ops/s
Iteration  29: 7962642.982 ops/s
Iteration  30: 7940970.334 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAllArray":
  7925287.859 ±(99.9%) 42814.752 ops/s [Average]
  (min, avg, max) = (7779020.432, 7925287.859, 7997163.541), stdev = 64083.109
  CI (99.9%): [7882473.108, 7968102.611] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAllArray  thrpt   30  7925287.859 ± 42814.752  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 645396.995 ops/s
# Warmup Iteration   2: 1437742.834 ops/s
# Warmup Iteration   3: 1475883.726 ops/s
# Warmup Iteration   4: 1777126.162 ops/s
# Warmup Iteration   5: 1780350.353 ops/s
# Warmup Iteration   6: 1776751.872 ops/s
# Warmup Iteration   7: 1784144.623 ops/s
# Warmup Iteration   8: 1785319.400 ops/s
# Warmup Iteration   9: 1772991.225 ops/s
# Warmup Iteration  10: 1769126.208 ops/s
# Warmup Iteration  11: 1778182.199 ops/s
# Warmup Iteration  12: 1774670.343 ops/s
# Warmup Iteration  13: 1772200.071 ops/s
# Warmup Iteration  14: 1788651.961 ops/s
# Warmup Iteration  15: 1777135.219 ops/s
# Warmup Iteration  16: 1777813.659 ops/s
# Warmup Iteration  17: 1764536.352 ops/s
# Warmup Iteration  18: 1779538.181 ops/s
# Warmup Iteration  19: 1782711.647 ops/s
# Warmup Iteration  20: 1771911.248 ops/s
# Warmup Iteration  21: 1782382.296 ops/s
# Warmup Iteration  22: 1783673.959 ops/s
# Warmup Iteration  23: 1761105.246 ops/s
# Warmup Iteration  24: 1788170.021 ops/s
# Warmup Iteration  25: 1788978.230 ops/s
# Warmup Iteration  26: 1767359.782 ops/s
# Warmup Iteration  27: 1777556.954 ops/s
# Warmup Iteration  28: 1784111.698 ops/s
# Warmup Iteration  29: 1788093.179 ops/s
# Warmup Iteration  30: 1780467.183 ops/s
Iteration   1: 1748283.660 ops/s
Iteration   2: 1780858.304 ops/s
Iteration   3: 1750142.031 ops/s
Iteration   4: 1796106.746 ops/s
Iteration   5: 1783850.869 ops/s
Iteration   6: 1785687.826 ops/s
Iteration   7: 1784569.423 ops/s
Iteration   8: 1784272.738 ops/s
Iteration   9: 1779422.554 ops/s
Iteration  10: 1788276.598 ops/s
Iteration  11: 1744571.962 ops/s
Iteration  12: 1789610.287 ops/s
Iteration  13: 1758695.602 ops/s
Iteration  14: 1784170.856 ops/s
Iteration  15: 1776489.637 ops/s
Iteration  16: 1746726.489 ops/s
Iteration  17: 1781888.436 ops/s
Iteration  18: 1770463.290 ops/s
Iteration  19: 1757877.975 ops/s
Iteration  20: 1788566.790 ops/s
Iteration  21: 1779533.550 ops/s
Iteration  22: 1777812.123 ops/s
Iteration  23: 1786090.884 ops/s
Iteration  24: 1792131.069 ops/s
Iteration  25: 1772314.523 ops/s
Iteration  26: 1777584.722 ops/s
Iteration  27: 1784595.312 ops/s
Iteration  28: 1793048.759 ops/s
Iteration  29: 1791228.860 ops/s
Iteration  30: 1744055.933 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAllIterable":
  1775964.260 ±(99.9%) 10587.993 ops/s [Average]
  (min, avg, max) = (1744055.933, 1775964.260, 1796106.746), stdev = 15847.611
  CI (99.9%): [1765376.267, 1786552.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAllIterable  thrpt   30  1775964.260 ± 10587.993  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6040274.615 ops/s
# Warmup Iteration   2: 10582911.360 ops/s
# Warmup Iteration   3: 11936533.944 ops/s
# Warmup Iteration   4: 12349012.404 ops/s
# Warmup Iteration   5: 12272104.814 ops/s
# Warmup Iteration   6: 12234872.445 ops/s
# Warmup Iteration   7: 12335193.539 ops/s
# Warmup Iteration   8: 12324708.476 ops/s
# Warmup Iteration   9: 12273163.844 ops/s
# Warmup Iteration  10: 12337645.458 ops/s
# Warmup Iteration  11: 12358970.571 ops/s
# Warmup Iteration  12: 12196096.925 ops/s
# Warmup Iteration  13: 12344496.652 ops/s
# Warmup Iteration  14: 12100971.550 ops/s
# Warmup Iteration  15: 12310915.094 ops/s
# Warmup Iteration  16: 12255186.140 ops/s
# Warmup Iteration  17: 12124611.178 ops/s
# Warmup Iteration  18: 12355599.774 ops/s
# Warmup Iteration  19: 12313236.017 ops/s
# Warmup Iteration  20: 12352447.539 ops/s
# Warmup Iteration  21: 12356860.743 ops/s
# Warmup Iteration  22: 12347852.419 ops/s
# Warmup Iteration  23: 12373418.641 ops/s
# Warmup Iteration  24: 12329576.351 ops/s
# Warmup Iteration  25: 12267689.858 ops/s
# Warmup Iteration  26: 12400895.168 ops/s
# Warmup Iteration  27: 12390674.523 ops/s
# Warmup Iteration  28: 12226177.839 ops/s
# Warmup Iteration  29: 12329741.568 ops/s
# Warmup Iteration  30: 12248234.444 ops/s
Iteration   1: 12377490.602 ops/s
Iteration   2: 12342332.965 ops/s
Iteration   3: 12351923.774 ops/s
Iteration   4: 12356766.633 ops/s
Iteration   5: 12356867.938 ops/s
Iteration   6: 12343271.185 ops/s
Iteration   7: 12395909.282 ops/s
Iteration   8: 12105438.603 ops/s
Iteration   9: 12308017.859 ops/s
Iteration  10: 12405833.855 ops/s
Iteration  11: 12170963.571 ops/s
Iteration  12: 12320480.226 ops/s
Iteration  13: 12002356.794 ops/s
Iteration  14: 12274558.508 ops/s
Iteration  15: 12356753.563 ops/s
Iteration  16: 12396852.038 ops/s
Iteration  17: 12302809.881 ops/s
Iteration  18: 12364745.216 ops/s
Iteration  19: 12288388.152 ops/s
Iteration  20: 12269879.187 ops/s
Iteration  21: 12141312.460 ops/s
Iteration  22: 12321932.898 ops/s
Iteration  23: 12183296.707 ops/s
Iteration  24: 12400873.853 ops/s
Iteration  25: 12378758.720 ops/s
Iteration  26: 12330689.036 ops/s
Iteration  27: 12117603.985 ops/s
Iteration  28: 12037486.299 ops/s
Iteration  29: 12347655.912 ops/s
Iteration  30: 12360974.117 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAnyArray":
  12290407.461 ±(99.9%) 74780.113 ops/s [Average]
  (min, avg, max) = (12002356.794, 12290407.461, 12405833.855), stdev = 111927.362
  CI (99.9%): [12215627.347, 12365187.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAnyArray  thrpt   30  12290407.461 ± 74780.113  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724845.936 ops/s
# Warmup Iteration   2: 973055.680 ops/s
# Warmup Iteration   3: 1217752.814 ops/s
# Warmup Iteration   4: 1220521.433 ops/s
# Warmup Iteration   5: 1216123.257 ops/s
# Warmup Iteration   6: 1223951.427 ops/s
# Warmup Iteration   7: 1221143.152 ops/s
# Warmup Iteration   8: 1013395.232 ops/s
# Warmup Iteration   9: 1211569.738 ops/s
# Warmup Iteration  10: 1220878.991 ops/s
# Warmup Iteration  11: 1224155.355 ops/s
# Warmup Iteration  12: 1221561.942 ops/s
# Warmup Iteration  13: 1215031.627 ops/s
# Warmup Iteration  14: 1219147.125 ops/s
# Warmup Iteration  15: 1223599.844 ops/s
# Warmup Iteration  16: 1218682.588 ops/s
# Warmup Iteration  17: 1200651.204 ops/s
# Warmup Iteration  18: 1204392.834 ops/s
# Warmup Iteration  19: 1219899.160 ops/s
# Warmup Iteration  20: 1221760.951 ops/s
# Warmup Iteration  21: 1223500.491 ops/s
# Warmup Iteration  22: 1217565.422 ops/s
# Warmup Iteration  23: 1216665.726 ops/s
# Warmup Iteration  24: 1207829.136 ops/s
# Warmup Iteration  25: 1216891.961 ops/s
# Warmup Iteration  26: 1224433.303 ops/s
# Warmup Iteration  27: 1213227.021 ops/s
# Warmup Iteration  28: 1221206.306 ops/s
# Warmup Iteration  29: 1200666.419 ops/s
# Warmup Iteration  30: 1209418.311 ops/s
Iteration   1: 1221859.044 ops/s
Iteration   2: 1224051.175 ops/s
Iteration   3: 1219154.490 ops/s
Iteration   4: 1220444.051 ops/s
Iteration   5: 1210952.681 ops/s
Iteration   6: 1215800.571 ops/s
Iteration   7: 1222297.851 ops/s
Iteration   8: 1213842.543 ops/s
Iteration   9: 1200616.614 ops/s
Iteration  10: 1219979.799 ops/s
Iteration  11: 1224299.509 ops/s
Iteration  12: 1223075.974 ops/s
Iteration  13: 1215712.714 ops/s
Iteration  14: 1195466.370 ops/s
Iteration  15: 1212116.741 ops/s
Iteration  16: 1221477.090 ops/s
Iteration  17: 1223092.194 ops/s
Iteration  18: 1195656.797 ops/s
Iteration  19: 1215972.590 ops/s
Iteration  20: 1172368.959 ops/s
Iteration  21: 1221043.150 ops/s
Iteration  22: 1224237.861 ops/s
Iteration  23: 1216835.720 ops/s
Iteration  24: 1216641.092 ops/s
Iteration  25: 1220836.027 ops/s
Iteration  26: 1220443.035 ops/s
Iteration  27: 1222410.831 ops/s
Iteration  28: 1223770.159 ops/s
Iteration  29: 1221015.075 ops/s
Iteration  30: 1222038.200 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAnyIterable":
  1215916.964 ±(99.9%) 7551.843 ops/s [Average]
  (min, avg, max) = (1172368.959, 1215916.964, 1224299.509), stdev = 11303.245
  CI (99.9%): [1208365.120, 1223468.807] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1215916.964 ± 7551.843  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6150144.149 ops/s
# Warmup Iteration   2: 10609577.831 ops/s
# Warmup Iteration   3: 12415061.779 ops/s
# Warmup Iteration   4: 12614777.021 ops/s
# Warmup Iteration   5: 12671132.717 ops/s
# Warmup Iteration   6: 12619230.856 ops/s
# Warmup Iteration   7: 12690439.990 ops/s
# Warmup Iteration   8: 12593671.769 ops/s
# Warmup Iteration   9: 12617543.077 ops/s
# Warmup Iteration  10: 12579201.926 ops/s
# Warmup Iteration  11: 12616560.760 ops/s
# Warmup Iteration  12: 12699338.360 ops/s
# Warmup Iteration  13: 12648265.598 ops/s
# Warmup Iteration  14: 12636832.181 ops/s
# Warmup Iteration  15: 12598089.520 ops/s
# Warmup Iteration  16: 12546308.029 ops/s
# Warmup Iteration  17: 12668929.245 ops/s
# Warmup Iteration  18: 12497899.200 ops/s
# Warmup Iteration  19: 12687159.596 ops/s
# Warmup Iteration  20: 12555236.136 ops/s
# Warmup Iteration  21: 12675258.498 ops/s
# Warmup Iteration  22: 12575721.409 ops/s
# Warmup Iteration  23: 12602743.094 ops/s
# Warmup Iteration  24: 12550715.739 ops/s
# Warmup Iteration  25: 12676704.202 ops/s
# Warmup Iteration  26: 12689303.657 ops/s
# Warmup Iteration  27: 12476276.856 ops/s
# Warmup Iteration  28: 12688878.115 ops/s
# Warmup Iteration  29: 12654242.304 ops/s
# Warmup Iteration  30: 12681206.175 ops/s
Iteration   1: 12719075.801 ops/s
Iteration   2: 12670054.999 ops/s
Iteration   3: 12091224.164 ops/s
Iteration   4: 12592194.200 ops/s
Iteration   5: 12605615.208 ops/s
Iteration   6: 12639431.761 ops/s
Iteration   7: 12602410.512 ops/s
Iteration   8: 12482444.173 ops/s
Iteration   9: 12617581.039 ops/s
Iteration  10: 12703033.317 ops/s
Iteration  11: 12644726.395 ops/s
Iteration  12: 12511295.474 ops/s
Iteration  13: 12648088.694 ops/s
Iteration  14: 12610728.842 ops/s
Iteration  15: 12507809.175 ops/s
Iteration  16: 12745245.027 ops/s
Iteration  17: 12632202.763 ops/s
Iteration  18: 12605670.476 ops/s
Iteration  19: 12655244.505 ops/s
Iteration  20: 12524818.051 ops/s
Iteration  21: 12704586.784 ops/s
Iteration  22: 12467653.261 ops/s
Iteration  23: 12611776.675 ops/s
Iteration  24: 12687435.506 ops/s
Iteration  25: 12758092.789 ops/s
Iteration  26: 12710728.081 ops/s
Iteration  27: 12670795.222 ops/s
Iteration  28: 12633901.213 ops/s
Iteration  29: 12502504.212 ops/s
Iteration  30: 12611899.274 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsNoneArray":
  12605608.920 ±(99.9%) 82702.310 ops/s [Average]
  (min, avg, max) = (12091224.164, 12605608.920, 12758092.789), stdev = 123784.934
  CI (99.9%): [12522906.610, 12688311.230] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_containsNoneArray  thrpt   30  12605608.920 ± 82702.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 674442.436 ops/s
# Warmup Iteration   2: 886915.905 ops/s
# Warmup Iteration   3: 1113403.508 ops/s
# Warmup Iteration   4: 1117497.888 ops/s
# Warmup Iteration   5: 1101185.959 ops/s
# Warmup Iteration   6: 1122090.197 ops/s
# Warmup Iteration   7: 1110795.665 ops/s
# Warmup Iteration   8: 921461.573 ops/s
# Warmup Iteration   9: 1119273.625 ops/s
# Warmup Iteration  10: 1108092.077 ops/s
# Warmup Iteration  11: 1118184.983 ops/s
# Warmup Iteration  12: 1115454.699 ops/s
# Warmup Iteration  13: 1118651.962 ops/s
# Warmup Iteration  14: 1118093.933 ops/s
# Warmup Iteration  15: 1106881.016 ops/s
# Warmup Iteration  16: 1114836.839 ops/s
# Warmup Iteration  17: 1117680.277 ops/s
# Warmup Iteration  18: 1114460.323 ops/s
# Warmup Iteration  19: 1105424.558 ops/s
# Warmup Iteration  20: 1115493.304 ops/s
# Warmup Iteration  21: 1117127.349 ops/s
# Warmup Iteration  22: 1116592.904 ops/s
# Warmup Iteration  23: 1119170.892 ops/s
# Warmup Iteration  24: 1118275.934 ops/s
# Warmup Iteration  25: 1111186.122 ops/s
# Warmup Iteration  26: 1100433.899 ops/s
# Warmup Iteration  27: 1101950.758 ops/s
# Warmup Iteration  28: 1121339.932 ops/s
# Warmup Iteration  29: 1117983.740 ops/s
# Warmup Iteration  30: 1117387.545 ops/s
Iteration   1: 1111006.299 ops/s
Iteration   2: 1108265.206 ops/s
Iteration   3: 1116414.485 ops/s
Iteration   4: 1121159.947 ops/s
Iteration   5: 1100585.511 ops/s
Iteration   6: 1118394.209 ops/s
Iteration   7: 1108627.101 ops/s
Iteration   8: 1114267.524 ops/s
Iteration   9: 1096324.553 ops/s
Iteration  10: 1119544.928 ops/s
Iteration  11: 1114298.845 ops/s
Iteration  12: 1118964.790 ops/s
Iteration  13: 1113812.898 ops/s
Iteration  14: 1117962.191 ops/s
Iteration  15: 1112459.749 ops/s
Iteration  16: 1119146.877 ops/s
Iteration  17: 1108006.848 ops/s
Iteration  18: 1116117.263 ops/s
Iteration  19: 1115027.063 ops/s
Iteration  20: 1113107.144 ops/s
Iteration  21: 1110454.846 ops/s
Iteration  22: 1116525.126 ops/s
Iteration  23: 1115085.150 ops/s
Iteration  24: 1101972.865 ops/s
Iteration  25: 1112449.972 ops/s
Iteration  26: 1101153.147 ops/s
Iteration  27: 1115450.690 ops/s
Iteration  28: 1116585.850 ops/s
Iteration  29: 1117525.258 ops/s
Iteration  30: 1108166.231 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_containsNoneIterable":
  1112628.752 ±(99.9%) 4138.949 ops/s [Average]
  (min, avg, max) = (1096324.553, 1112628.752, 1121159.947), stdev = 6194.985
  CI (99.9%): [1108489.803, 1116767.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1112628.752 ± 4138.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2331550.760 ops/s
# Warmup Iteration   2: 5143965.564 ops/s
# Warmup Iteration   3: 5111513.493 ops/s
# Warmup Iteration   4: 4273972.213 ops/s
# Warmup Iteration   5: 5147623.126 ops/s
# Warmup Iteration   6: 5127889.558 ops/s
# Warmup Iteration   7: 5187801.330 ops/s
# Warmup Iteration   8: 5119278.244 ops/s
# Warmup Iteration   9: 5174786.469 ops/s
# Warmup Iteration  10: 5137449.977 ops/s
# Warmup Iteration  11: 5125080.749 ops/s
# Warmup Iteration  12: 5159150.842 ops/s
# Warmup Iteration  13: 5112240.113 ops/s
# Warmup Iteration  14: 5169469.193 ops/s
# Warmup Iteration  15: 5164456.458 ops/s
# Warmup Iteration  16: 5152920.731 ops/s
# Warmup Iteration  17: 5176765.592 ops/s
# Warmup Iteration  18: 5099087.254 ops/s
# Warmup Iteration  19: 5161023.251 ops/s
# Warmup Iteration  20: 5171985.118 ops/s
# Warmup Iteration  21: 5127162.787 ops/s
# Warmup Iteration  22: 5161817.316 ops/s
# Warmup Iteration  23: 5169131.946 ops/s
# Warmup Iteration  24: 5159953.493 ops/s
# Warmup Iteration  25: 5080905.521 ops/s
# Warmup Iteration  26: 5160028.987 ops/s
# Warmup Iteration  27: 5149635.518 ops/s
# Warmup Iteration  28: 5163127.267 ops/s
# Warmup Iteration  29: 5159343.706 ops/s
# Warmup Iteration  30: 5124982.560 ops/s
Iteration   1: 5159819.590 ops/s
Iteration   2: 5164138.186 ops/s
Iteration   3: 5172108.106 ops/s
Iteration   4: 5050603.759 ops/s
Iteration   5: 5047985.412 ops/s
Iteration   6: 5160071.849 ops/s
Iteration   7: 5168432.572 ops/s
Iteration   8: 5167547.410 ops/s
Iteration   9: 5152373.969 ops/s
Iteration  10: 5150973.004 ops/s
Iteration  11: 5052601.353 ops/s
Iteration  12: 5160818.039 ops/s
Iteration  13: 5091230.379 ops/s
Iteration  14: 5169180.396 ops/s
Iteration  15: 5171292.343 ops/s
Iteration  16: 5117505.022 ops/s
Iteration  17: 5168579.582 ops/s
Iteration  18: 5077906.693 ops/s
Iteration  19: 5055733.214 ops/s
Iteration  20: 5162042.826 ops/s
Iteration  21: 5178829.728 ops/s
Iteration  22: 5111708.245 ops/s
Iteration  23: 5121685.476 ops/s
Iteration  24: 5152367.830 ops/s
Iteration  25: 5126286.255 ops/s
Iteration  26: 5177503.693 ops/s
Iteration  27: 5159394.981 ops/s
Iteration  28: 5147812.235 ops/s
Iteration  29: 5131138.181 ops/s
Iteration  30: 5170085.757 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_count":
  5136591.869 ±(99.9%) 28077.818 ops/s [Average]
  (min, avg, max) = (5047985.412, 5136591.869, 5178829.728), stdev = 42025.560
  CI (99.9%): [5108514.051, 5164669.688] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_count  thrpt   30  5136591.869 ± 28077.818  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3288307.251 ops/s
# Warmup Iteration   2: 7395151.051 ops/s
# Warmup Iteration   3: 7347887.329 ops/s
# Warmup Iteration   4: 6118008.175 ops/s
# Warmup Iteration   5: 7340271.189 ops/s
# Warmup Iteration   6: 7399324.883 ops/s
# Warmup Iteration   7: 7303433.317 ops/s
# Warmup Iteration   8: 7387625.660 ops/s
# Warmup Iteration   9: 7379310.645 ops/s
# Warmup Iteration  10: 7364422.952 ops/s
# Warmup Iteration  11: 7345173.595 ops/s
# Warmup Iteration  12: 7360216.760 ops/s
# Warmup Iteration  13: 7299161.448 ops/s
# Warmup Iteration  14: 7357601.729 ops/s
# Warmup Iteration  15: 7315352.793 ops/s
# Warmup Iteration  16: 7306973.306 ops/s
# Warmup Iteration  17: 7304852.532 ops/s
# Warmup Iteration  18: 7364422.937 ops/s
# Warmup Iteration  19: 7328753.187 ops/s
# Warmup Iteration  20: 7392015.917 ops/s
# Warmup Iteration  21: 7332995.936 ops/s
# Warmup Iteration  22: 7395862.327 ops/s
# Warmup Iteration  23: 7383765.458 ops/s
# Warmup Iteration  24: 7333977.238 ops/s
# Warmup Iteration  25: 7394097.937 ops/s
# Warmup Iteration  26: 7333225.601 ops/s
# Warmup Iteration  27: 7309343.211 ops/s
# Warmup Iteration  28: 7353553.896 ops/s
# Warmup Iteration  29: 7371908.520 ops/s
# Warmup Iteration  30: 7373066.855 ops/s
Iteration   1: 7350861.553 ops/s
Iteration   2: 7363255.385 ops/s
Iteration   3: 7396476.968 ops/s
Iteration   4: 7315811.965 ops/s
Iteration   5: 7385408.780 ops/s
Iteration   6: 7406599.620 ops/s
Iteration   7: 7411993.178 ops/s
Iteration   8: 7277027.148 ops/s
Iteration   9: 7418226.284 ops/s
Iteration  10: 7372593.740 ops/s
Iteration  11: 7362976.861 ops/s
Iteration  12: 7337690.684 ops/s
Iteration  13: 7410858.358 ops/s
Iteration  14: 7366294.948 ops/s
Iteration  15: 7392875.327 ops/s
Iteration  16: 7373163.258 ops/s
Iteration  17: 7444174.170 ops/s
Iteration  18: 7403663.938 ops/s
Iteration  19: 7388372.659 ops/s
Iteration  20: 7363639.468 ops/s
Iteration  21: 7382354.040 ops/s
Iteration  22: 7389916.570 ops/s
Iteration  23: 7372731.295 ops/s
Iteration  24: 7288315.587 ops/s
Iteration  25: 7210273.729 ops/s
Iteration  26: 7358383.286 ops/s
Iteration  27: 7369625.475 ops/s
Iteration  28: 7397527.307 ops/s
Iteration  29: 7345218.800 ops/s
Iteration  30: 7346865.705 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_detectIfNone":
  7366772.536 ±(99.9%) 31179.681 ops/s [Average]
  (min, avg, max) = (7210273.729, 7366772.536, 7444174.170), stdev = 46668.282
  CI (99.9%): [7335592.856, 7397952.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_detectIfNone  thrpt   30  7366772.536 ± 31179.681  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4488536.922 ops/s
# Warmup Iteration   2: 9295451.991 ops/s
# Warmup Iteration   3: 8040873.751 ops/s
# Warmup Iteration   4: 9636586.968 ops/s
# Warmup Iteration   5: 9631034.439 ops/s
# Warmup Iteration   6: 9639511.201 ops/s
# Warmup Iteration   7: 9759715.191 ops/s
# Warmup Iteration   8: 9714850.339 ops/s
# Warmup Iteration   9: 9719878.599 ops/s
# Warmup Iteration  10: 9743576.094 ops/s
# Warmup Iteration  11: 9764987.971 ops/s
# Warmup Iteration  12: 9715749.840 ops/s
# Warmup Iteration  13: 9713200.385 ops/s
# Warmup Iteration  14: 9686154.716 ops/s
# Warmup Iteration  15: 9745131.300 ops/s
# Warmup Iteration  16: 9644421.787 ops/s
# Warmup Iteration  17: 9717630.338 ops/s
# Warmup Iteration  18: 9756542.485 ops/s
# Warmup Iteration  19: 9677077.879 ops/s
# Warmup Iteration  20: 9702337.405 ops/s
# Warmup Iteration  21: 9716143.642 ops/s
# Warmup Iteration  22: 9670878.700 ops/s
# Warmup Iteration  23: 9723365.236 ops/s
# Warmup Iteration  24: 9786201.871 ops/s
# Warmup Iteration  25: 9758571.665 ops/s
# Warmup Iteration  26: 9779097.596 ops/s
# Warmup Iteration  27: 9576160.774 ops/s
# Warmup Iteration  28: 9780428.111 ops/s
# Warmup Iteration  29: 9726053.442 ops/s
# Warmup Iteration  30: 9716442.179 ops/s
Iteration   1: 9805407.979 ops/s
Iteration   2: 9793946.585 ops/s
Iteration   3: 9795000.906 ops/s
Iteration   4: 9765099.847 ops/s
Iteration   5: 9708105.388 ops/s
Iteration   6: 9582014.712 ops/s
Iteration   7: 9749609.993 ops/s
Iteration   8: 9780324.046 ops/s
Iteration   9: 9753687.441 ops/s
Iteration  10: 9818585.760 ops/s
Iteration  11: 9687034.975 ops/s
Iteration  12: 9651915.937 ops/s
Iteration  13: 9729285.971 ops/s
Iteration  14: 9727313.617 ops/s
Iteration  15: 9659389.844 ops/s
Iteration  16: 9779710.683 ops/s
Iteration  17: 9703952.336 ops/s
Iteration  18: 9753394.802 ops/s
Iteration  19: 9647025.231 ops/s
Iteration  20: 9760816.113 ops/s
Iteration  21: 9757482.492 ops/s
Iteration  22: 9687373.183 ops/s
Iteration  23: 9759298.198 ops/s
Iteration  24: 9829986.941 ops/s
Iteration  25: 9741097.467 ops/s
Iteration  26: 9794097.042 ops/s
Iteration  27: 9759629.975 ops/s
Iteration  28: 9740969.791 ops/s
Iteration  29: 9709436.580 ops/s
Iteration  30: 9781943.130 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_forEach":
  9740431.232 ±(99.9%) 37614.524 ops/s [Average]
  (min, avg, max) = (9582014.712, 9740431.232, 9829986.941), stdev = 56299.652
  CI (99.9%): [9702816.708, 9778045.756] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_forEach  thrpt   30  9740431.232 ± 37614.524  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18451607.136 ops/s
# Warmup Iteration   2: 36438559.795 ops/s
# Warmup Iteration   3: 30976805.068 ops/s
# Warmup Iteration   4: 35866949.260 ops/s
# Warmup Iteration   5: 35957323.818 ops/s
# Warmup Iteration   6: 35703477.621 ops/s
# Warmup Iteration   7: 35730177.018 ops/s
# Warmup Iteration   8: 35708874.752 ops/s
# Warmup Iteration   9: 36123384.692 ops/s
# Warmup Iteration  10: 35987994.476 ops/s
# Warmup Iteration  11: 35795023.570 ops/s
# Warmup Iteration  12: 35935832.308 ops/s
# Warmup Iteration  13: 36021903.551 ops/s
# Warmup Iteration  14: 36126476.537 ops/s
# Warmup Iteration  15: 35910454.205 ops/s
# Warmup Iteration  16: 35486862.767 ops/s
# Warmup Iteration  17: 35952301.195 ops/s
# Warmup Iteration  18: 35938584.714 ops/s
# Warmup Iteration  19: 36081415.359 ops/s
# Warmup Iteration  20: 36011791.936 ops/s
# Warmup Iteration  21: 35820804.180 ops/s
# Warmup Iteration  22: 35986443.569 ops/s
# Warmup Iteration  23: 35691310.794 ops/s
# Warmup Iteration  24: 36054806.212 ops/s
# Warmup Iteration  25: 35958680.160 ops/s
# Warmup Iteration  26: 35974977.022 ops/s
# Warmup Iteration  27: 35644454.810 ops/s
# Warmup Iteration  28: 35876719.625 ops/s
# Warmup Iteration  29: 35844983.999 ops/s
# Warmup Iteration  30: 35569071.022 ops/s
Iteration   1: 36072515.037 ops/s
Iteration   2: 35823199.913 ops/s
Iteration   3: 36086541.590 ops/s
Iteration   4: 36274253.754 ops/s
Iteration   5: 35920178.498 ops/s
Iteration   6: 36090930.971 ops/s
Iteration   7: 36124712.111 ops/s
Iteration   8: 35915906.748 ops/s
Iteration   9: 36286022.372 ops/s
Iteration  10: 36194040.798 ops/s
Iteration  11: 36161409.222 ops/s
Iteration  12: 36011719.345 ops/s
Iteration  13: 35858114.116 ops/s
Iteration  14: 35972939.970 ops/s
Iteration  15: 35850291.787 ops/s
Iteration  16: 36278671.976 ops/s
Iteration  17: 35682424.931 ops/s
Iteration  18: 36104829.541 ops/s
Iteration  19: 36075897.746 ops/s
Iteration  20: 36105388.777 ops/s
Iteration  21: 35324589.705 ops/s
Iteration  22: 35904126.289 ops/s
Iteration  23: 35990471.746 ops/s
Iteration  24: 36272159.792 ops/s
Iteration  25: 36083004.320 ops/s
Iteration  26: 36093207.749 ops/s
Iteration  27: 35748931.876 ops/s
Iteration  28: 36129278.679 ops/s
Iteration  29: 36205740.126 ops/s
Iteration  30: 36108035.599 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_injectInto":
  36024984.503 ±(99.9%) 137142.211 ops/s [Average]
  (min, avg, max) = (35324589.705, 36024984.503, 36286022.372), stdev = 205268.021
  CI (99.9%): [35887842.292, 36162126.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_injectInto  thrpt   30  36024984.503 ± 137142.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1202015.040 ops/s
# Warmup Iteration   2: 2339959.249 ops/s
# Warmup Iteration   3: 2422165.687 ops/s
# Warmup Iteration   4: 2855207.292 ops/s
# Warmup Iteration   5: 2871043.418 ops/s
# Warmup Iteration   6: 2864085.552 ops/s
# Warmup Iteration   7: 2845171.873 ops/s
# Warmup Iteration   8: 2847246.415 ops/s
# Warmup Iteration   9: 2835901.363 ops/s
# Warmup Iteration  10: 2880218.776 ops/s
# Warmup Iteration  11: 2868488.729 ops/s
# Warmup Iteration  12: 2854135.795 ops/s
# Warmup Iteration  13: 2850443.075 ops/s
# Warmup Iteration  14: 2861339.277 ops/s
# Warmup Iteration  15: 2863037.171 ops/s
# Warmup Iteration  16: 2859931.273 ops/s
# Warmup Iteration  17: 2859736.057 ops/s
# Warmup Iteration  18: 2846733.149 ops/s
# Warmup Iteration  19: 2827331.966 ops/s
# Warmup Iteration  20: 2861266.442 ops/s
# Warmup Iteration  21: 2863334.642 ops/s
# Warmup Iteration  22: 2841010.383 ops/s
# Warmup Iteration  23: 2868128.701 ops/s
# Warmup Iteration  24: 2869737.534 ops/s
# Warmup Iteration  25: 2866586.052 ops/s
# Warmup Iteration  26: 2843992.641 ops/s
# Warmup Iteration  27: 2875662.346 ops/s
# Warmup Iteration  28: 2876285.352 ops/s
# Warmup Iteration  29: 2879754.671 ops/s
# Warmup Iteration  30: 2868474.094 ops/s
Iteration   1: 2859178.519 ops/s
Iteration   2: 2820215.036 ops/s
Iteration   3: 2833126.508 ops/s
Iteration   4: 2862118.590 ops/s
Iteration   5: 2852136.031 ops/s
Iteration   6: 2869838.459 ops/s
Iteration   7: 2832997.793 ops/s
Iteration   8: 2857592.153 ops/s
Iteration   9: 2867135.527 ops/s
Iteration  10: 2865847.430 ops/s
Iteration  11: 2867786.213 ops/s
Iteration  12: 2863661.232 ops/s
Iteration  13: 2862632.233 ops/s
Iteration  14: 2880875.450 ops/s
Iteration  15: 2878486.969 ops/s
Iteration  16: 2878808.448 ops/s
Iteration  17: 2776549.842 ops/s
Iteration  18: 2872486.561 ops/s
Iteration  19: 2833775.753 ops/s
Iteration  20: 2869595.268 ops/s
Iteration  21: 2860350.293 ops/s
Iteration  22: 2874440.978 ops/s
Iteration  23: 2863375.771 ops/s
Iteration  24: 2886289.762 ops/s
Iteration  25: 2880094.089 ops/s
Iteration  26: 2881235.867 ops/s
Iteration  27: 2883983.965 ops/s
Iteration  28: 2887158.785 ops/s
Iteration  29: 2834851.419 ops/s
Iteration  30: 2866690.783 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_isEmpty":
  2860777.191 ±(99.9%) 15761.010 ops/s [Average]
  (min, avg, max) = (2776549.842, 2860777.191, 2887158.785), stdev = 23590.339
  CI (99.9%): [2845016.181, 2876538.201] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_isEmpty  thrpt   30  2860777.191 ± 15761.010  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703706.419 ops/s
# Warmup Iteration   2: 713184.254 ops/s
# Warmup Iteration   3: 871218.750 ops/s
# Warmup Iteration   4: 920304.859 ops/s
# Warmup Iteration   5: 923752.782 ops/s
# Warmup Iteration   6: 920476.745 ops/s
# Warmup Iteration   7: 917870.584 ops/s
# Warmup Iteration   8: 921287.946 ops/s
# Warmup Iteration   9: 918137.504 ops/s
# Warmup Iteration  10: 915662.040 ops/s
# Warmup Iteration  11: 915481.109 ops/s
# Warmup Iteration  12: 914203.691 ops/s
# Warmup Iteration  13: 788602.364 ops/s
# Warmup Iteration  14: 893433.789 ops/s
# Warmup Iteration  15: 913447.357 ops/s
# Warmup Iteration  16: 920024.127 ops/s
# Warmup Iteration  17: 968172.207 ops/s
# Warmup Iteration  18: 965203.432 ops/s
# Warmup Iteration  19: 966191.408 ops/s
# Warmup Iteration  20: 967470.589 ops/s
# Warmup Iteration  21: 958410.396 ops/s
# Warmup Iteration  22: 957570.667 ops/s
# Warmup Iteration  23: 968327.109 ops/s
# Warmup Iteration  24: 970101.536 ops/s
# Warmup Iteration  25: 965801.949 ops/s
# Warmup Iteration  26: 968050.079 ops/s
# Warmup Iteration  27: 968692.368 ops/s
# Warmup Iteration  28: 968945.944 ops/s
# Warmup Iteration  29: 968808.439 ops/s
# Warmup Iteration  30: 959799.845 ops/s
Iteration   1: 964256.706 ops/s
Iteration   2: 969123.704 ops/s
Iteration   3: 953730.328 ops/s
Iteration   4: 969511.973 ops/s
Iteration   5: 970743.696 ops/s
Iteration   6: 963098.371 ops/s
Iteration   7: 964124.795 ops/s
Iteration   8: 968083.778 ops/s
Iteration   9: 966255.308 ops/s
Iteration  10: 968008.636 ops/s
Iteration  11: 960938.985 ops/s
Iteration  12: 951955.041 ops/s
Iteration  13: 961295.966 ops/s
Iteration  14: 966418.512 ops/s
Iteration  15: 965066.552 ops/s
Iteration  16: 972411.157 ops/s
Iteration  17: 967523.708 ops/s
Iteration  18: 963480.294 ops/s
Iteration  19: 960892.074 ops/s
Iteration  20: 966068.373 ops/s
Iteration  21: 969848.145 ops/s
Iteration  22: 969468.448 ops/s
Iteration  23: 954863.323 ops/s
Iteration  24: 960288.612 ops/s
Iteration  25: 965414.109 ops/s
Iteration  26: 967245.866 ops/s
Iteration  27: 967427.981 ops/s
Iteration  28: 966638.322 ops/s
Iteration  29: 964078.639 ops/s
Iteration  30: 966467.131 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_iterator_throws":
  964824.284 ±(99.9%) 3260.681 ops/s [Average]
  (min, avg, max) = (951955.041, 964824.284, 972411.157), stdev = 4880.435
  CI (99.9%): [961563.603, 968084.966] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_iterator_throws  thrpt   30  964824.284 ± 3260.681  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 765710.251 ops/s
# Warmup Iteration   2: 778371.511 ops/s
# Warmup Iteration   3: 981287.657 ops/s
# Warmup Iteration   4: 1027562.865 ops/s
# Warmup Iteration   5: 1021266.661 ops/s
# Warmup Iteration   6: 1026756.867 ops/s
# Warmup Iteration   7: 1025935.404 ops/s
# Warmup Iteration   8: 1011087.264 ops/s
# Warmup Iteration   9: 1019992.890 ops/s
# Warmup Iteration  10: 1025871.252 ops/s
# Warmup Iteration  11: 1022906.251 ops/s
# Warmup Iteration  12: 960867.090 ops/s
# Warmup Iteration  13: 917470.727 ops/s
# Warmup Iteration  14: 1027370.833 ops/s
# Warmup Iteration  15: 1017162.833 ops/s
# Warmup Iteration  16: 1027308.472 ops/s
# Warmup Iteration  17: 1093447.213 ops/s
# Warmup Iteration  18: 1087727.586 ops/s
# Warmup Iteration  19: 1085930.118 ops/s
# Warmup Iteration  20: 1088930.922 ops/s
# Warmup Iteration  21: 1085601.443 ops/s
# Warmup Iteration  22: 1089508.162 ops/s
# Warmup Iteration  23: 1085716.061 ops/s
# Warmup Iteration  24: 1083905.861 ops/s
# Warmup Iteration  25: 1069584.890 ops/s
# Warmup Iteration  26: 1079072.908 ops/s
# Warmup Iteration  27: 1086750.676 ops/s
# Warmup Iteration  28: 1083050.691 ops/s
# Warmup Iteration  29: 1082866.969 ops/s
# Warmup Iteration  30: 1092564.178 ops/s
Iteration   1: 1089965.711 ops/s
Iteration   2: 1068510.517 ops/s
Iteration   3: 1087282.968 ops/s
Iteration   4: 1091169.034 ops/s
Iteration   5: 1091575.781 ops/s
Iteration   6: 1068306.325 ops/s
Iteration   7: 1084505.717 ops/s
Iteration   8: 1084381.378 ops/s
Iteration   9: 1087361.657 ops/s
Iteration  10: 1091942.215 ops/s
Iteration  11: 1086842.568 ops/s
Iteration  12: 1086586.843 ops/s
Iteration  13: 1094091.606 ops/s
Iteration  14: 1081998.925 ops/s
Iteration  15: 1088865.448 ops/s
Iteration  16: 1082115.163 ops/s
Iteration  17: 1091332.437 ops/s
Iteration  18: 1088125.865 ops/s
Iteration  19: 1091106.735 ops/s
Iteration  20: 1074977.254 ops/s
Iteration  21: 1092202.934 ops/s
Iteration  22: 1079781.959 ops/s
Iteration  23: 1085017.926 ops/s
Iteration  24: 1091251.253 ops/s
Iteration  25: 1071096.498 ops/s
Iteration  26: 1069176.066 ops/s
Iteration  27: 1070738.529 ops/s
Iteration  28: 1072643.996 ops/s
Iteration  29: 1088519.097 ops/s
Iteration  30: 1093907.770 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_iterator_throws_emptyList":
  1084179.339 ±(99.9%) 5567.884 ops/s [Average]
  (min, avg, max) = (1068306.325, 1084179.339, 1094091.606), stdev = 8333.748
  CI (99.9%): [1078611.455, 1089747.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1084179.339 ± 5567.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 744158.499 ops/s
# Warmup Iteration   2: 770202.033 ops/s
# Warmup Iteration   3: 1011909.566 ops/s
# Warmup Iteration   4: 1018372.698 ops/s
# Warmup Iteration   5: 1023216.417 ops/s
# Warmup Iteration   6: 1021564.303 ops/s
# Warmup Iteration   7: 1025532.986 ops/s
# Warmup Iteration   8: 1024173.004 ops/s
# Warmup Iteration   9: 1024123.787 ops/s
# Warmup Iteration  10: 1026928.174 ops/s
# Warmup Iteration  11: 1022171.376 ops/s
# Warmup Iteration  12: 858175.314 ops/s
# Warmup Iteration  13: 1021032.375 ops/s
# Warmup Iteration  14: 1021666.818 ops/s
# Warmup Iteration  15: 1024997.331 ops/s
# Warmup Iteration  16: 1023210.591 ops/s
# Warmup Iteration  17: 1091005.057 ops/s
# Warmup Iteration  18: 1087248.247 ops/s
# Warmup Iteration  19: 1086163.921 ops/s
# Warmup Iteration  20: 1089214.827 ops/s
# Warmup Iteration  21: 1086318.373 ops/s
# Warmup Iteration  22: 1085566.627 ops/s
# Warmup Iteration  23: 1090056.024 ops/s
# Warmup Iteration  24: 1090312.079 ops/s
# Warmup Iteration  25: 1058920.783 ops/s
# Warmup Iteration  26: 1089918.298 ops/s
# Warmup Iteration  27: 1084918.342 ops/s
# Warmup Iteration  28: 1085010.715 ops/s
# Warmup Iteration  29: 1078346.777 ops/s
# Warmup Iteration  30: 1075527.880 ops/s
Iteration   1: 1090670.673 ops/s
Iteration   2: 1075815.112 ops/s
Iteration   3: 1065482.804 ops/s
Iteration   4: 1091949.475 ops/s
Iteration   5: 1087414.208 ops/s
Iteration   6: 1087781.250 ops/s
Iteration   7: 1078037.242 ops/s
Iteration   8: 1094461.802 ops/s
Iteration   9: 1088701.181 ops/s
Iteration  10: 1082848.069 ops/s
Iteration  11: 1087221.448 ops/s
Iteration  12: 1092880.622 ops/s
Iteration  13: 1071995.913 ops/s
Iteration  14: 1090331.311 ops/s
Iteration  15: 1088260.684 ops/s
Iteration  16: 1092004.787 ops/s
Iteration  17: 1087509.329 ops/s
Iteration  18: 1090412.198 ops/s
Iteration  19: 1087811.181 ops/s
Iteration  20: 1090528.966 ops/s
Iteration  21: 1085304.711 ops/s
Iteration  22: 1099814.834 ops/s
Iteration  23: 1086936.083 ops/s
Iteration  24: 1088781.063 ops/s
Iteration  25: 1083392.488 ops/s
Iteration  26: 1085717.162 ops/s
Iteration  27: 1090061.706 ops/s
Iteration  28: 1092577.897 ops/s
Iteration  29: 1078712.524 ops/s
Iteration  30: 1091501.900 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  1086830.621 ±(99.9%) 4673.489 ops/s [Average]
  (min, avg, max) = (1065482.804, 1086830.621, 1099814.834), stdev = 6995.059
  CI (99.9%): [1082157.132, 1091504.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score      Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  1086830.621 ± 4673.489  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1095724.164 ops/s
# Warmup Iteration   2: 2288800.468 ops/s
# Warmup Iteration   3: 2087374.283 ops/s
# Warmup Iteration   4: 2122080.402 ops/s
# Warmup Iteration   5: 2273534.674 ops/s
# Warmup Iteration   6: 2305953.276 ops/s
# Warmup Iteration   7: 2291001.878 ops/s
# Warmup Iteration   8: 2266726.535 ops/s
# Warmup Iteration   9: 2294124.544 ops/s
# Warmup Iteration  10: 2303278.853 ops/s
# Warmup Iteration  11: 2265825.760 ops/s
# Warmup Iteration  12: 2307583.072 ops/s
# Warmup Iteration  13: 2257856.242 ops/s
# Warmup Iteration  14: 2292936.925 ops/s
# Warmup Iteration  15: 2303542.056 ops/s
# Warmup Iteration  16: 2297257.120 ops/s
# Warmup Iteration  17: 2281740.395 ops/s
# Warmup Iteration  18: 2267454.125 ops/s
# Warmup Iteration  19: 2261294.920 ops/s
# Warmup Iteration  20: 2272014.196 ops/s
# Warmup Iteration  21: 2292821.184 ops/s
# Warmup Iteration  22: 2291694.791 ops/s
# Warmup Iteration  23: 2288188.357 ops/s
# Warmup Iteration  24: 2289785.109 ops/s
# Warmup Iteration  25: 2304605.037 ops/s
# Warmup Iteration  26: 2314773.954 ops/s
# Warmup Iteration  27: 2269972.317 ops/s
# Warmup Iteration  28: 2304896.116 ops/s
# Warmup Iteration  29: 2292776.040 ops/s
# Warmup Iteration  30: 2306337.406 ops/s
Iteration   1: 2260861.287 ops/s
Iteration   2: 2295328.362 ops/s
Iteration   3: 2282317.704 ops/s
Iteration   4: 2231164.257 ops/s
Iteration   5: 2293880.985 ops/s
Iteration   6: 2290386.725 ops/s
Iteration   7: 2301971.770 ops/s
Iteration   8: 2278289.659 ops/s
Iteration   9: 2292895.174 ops/s
Iteration  10: 2264586.468 ops/s
Iteration  11: 2289805.308 ops/s
Iteration  12: 2285071.867 ops/s
Iteration  13: 2301820.885 ops/s
Iteration  14: 2263165.069 ops/s
Iteration  15: 2308636.119 ops/s
Iteration  16: 2292681.130 ops/s
Iteration  17: 2272160.012 ops/s
Iteration  18: 2295654.935 ops/s
Iteration  19: 2259173.690 ops/s
Iteration  20: 2231518.230 ops/s
Iteration  21: 2304850.913 ops/s
Iteration  22: 2294603.418 ops/s
Iteration  23: 2303740.953 ops/s
Iteration  24: 2279039.164 ops/s
Iteration  25: 2280331.289 ops/s
Iteration  26: 2267038.300 ops/s
Iteration  27: 2266023.258 ops/s
Iteration  28: 2298652.171 ops/s
Iteration  29: 2281877.715 ops/s
Iteration  30: 2320246.197 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_makeString":
  2282925.767 ±(99.9%) 13930.691 ops/s [Average]
  (min, avg, max) = (2231164.257, 2282925.767, 2320246.197), stdev = 20850.804
  CI (99.9%): [2268995.076, 2296856.458] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_makeString  thrpt   30  2282925.767 ± 13930.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 167065823.934 ops/s
# Warmup Iteration   2: 299397880.377 ops/s
# Warmup Iteration   3: 267460302.706 ops/s
# Warmup Iteration   4: 306028144.222 ops/s
# Warmup Iteration   5: 309468244.518 ops/s
# Warmup Iteration   6: 309465739.898 ops/s
# Warmup Iteration   7: 306593843.884 ops/s
# Warmup Iteration   8: 308201514.139 ops/s
# Warmup Iteration   9: 305699457.580 ops/s
# Warmup Iteration  10: 308805992.322 ops/s
# Warmup Iteration  11: 308028974.896 ops/s
# Warmup Iteration  12: 307987928.469 ops/s
# Warmup Iteration  13: 305690244.993 ops/s
# Warmup Iteration  14: 306584551.237 ops/s
# Warmup Iteration  15: 306865561.833 ops/s
# Warmup Iteration  16: 307542440.365 ops/s
# Warmup Iteration  17: 309653638.203 ops/s
# Warmup Iteration  18: 305233155.079 ops/s
# Warmup Iteration  19: 307827037.589 ops/s
# Warmup Iteration  20: 307151880.919 ops/s
# Warmup Iteration  21: 307828678.433 ops/s
# Warmup Iteration  22: 308686017.902 ops/s
# Warmup Iteration  23: 308033373.189 ops/s
# Warmup Iteration  24: 306284438.440 ops/s
# Warmup Iteration  25: 307662284.626 ops/s
# Warmup Iteration  26: 308446723.246 ops/s
# Warmup Iteration  27: 307609442.135 ops/s
# Warmup Iteration  28: 305133281.095 ops/s
# Warmup Iteration  29: 307243188.167 ops/s
# Warmup Iteration  30: 307703978.657 ops/s
Iteration   1: 309531600.585 ops/s
Iteration   2: 302970565.612 ops/s
Iteration   3: 308781495.546 ops/s
Iteration   4: 299616098.116 ops/s
Iteration   5: 305451117.843 ops/s
Iteration   6: 307759558.082 ops/s
Iteration   7: 307760150.148 ops/s
Iteration   8: 306618168.242 ops/s
Iteration   9: 305179138.579 ops/s
Iteration  10: 308572256.227 ops/s
Iteration  11: 307716249.565 ops/s
Iteration  12: 309129243.100 ops/s
Iteration  13: 307233684.495 ops/s
Iteration  14: 305080312.636 ops/s
Iteration  15: 307322015.523 ops/s
Iteration  16: 309134915.672 ops/s
Iteration  17: 306501009.109 ops/s
Iteration  18: 307898271.239 ops/s
Iteration  19: 303511059.548 ops/s
Iteration  20: 309915503.813 ops/s
Iteration  21: 309106368.381 ops/s
Iteration  22: 308509965.116 ops/s
Iteration  23: 306992280.463 ops/s
Iteration  24: 308213942.477 ops/s
Iteration  25: 308615705.873 ops/s
Iteration  26: 308271953.017 ops/s
Iteration  27: 308448238.397 ops/s
Iteration  28: 306878856.647 ops/s
Iteration  29: 308975947.522 ops/s
Iteration  30: 306322829.647 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_newCollection":
  307200616.707 ±(99.9%) 1482005.561 ops/s [Average]
  (min, avg, max) = (299616098.116, 307200616.707, 309915503.813), stdev = 2218196.324
  CI (99.9%): [305718611.146, 308682622.269] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt          Score         Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_newCollection  thrpt   30  307200616.707 ± 1482005.561  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4410131.963 ops/s
# Warmup Iteration   2: 7666967.630 ops/s
# Warmup Iteration   3: 9159427.303 ops/s
# Warmup Iteration   4: 9165995.391 ops/s
# Warmup Iteration   5: 9157587.183 ops/s
# Warmup Iteration   6: 9046768.720 ops/s
# Warmup Iteration   7: 9114458.024 ops/s
# Warmup Iteration   8: 9083327.934 ops/s
# Warmup Iteration   9: 9176718.303 ops/s
# Warmup Iteration  10: 9145546.991 ops/s
# Warmup Iteration  11: 9106304.176 ops/s
# Warmup Iteration  12: 9121651.513 ops/s
# Warmup Iteration  13: 9175363.869 ops/s
# Warmup Iteration  14: 9147808.476 ops/s
# Warmup Iteration  15: 9084885.697 ops/s
# Warmup Iteration  16: 9175762.501 ops/s
# Warmup Iteration  17: 9178525.009 ops/s
# Warmup Iteration  18: 9123040.623 ops/s
# Warmup Iteration  19: 9136650.926 ops/s
# Warmup Iteration  20: 9120088.830 ops/s
# Warmup Iteration  21: 9160993.603 ops/s
# Warmup Iteration  22: 9059780.650 ops/s
# Warmup Iteration  23: 9103927.203 ops/s
# Warmup Iteration  24: 9095310.229 ops/s
# Warmup Iteration  25: 9157556.488 ops/s
# Warmup Iteration  26: 9159386.315 ops/s
# Warmup Iteration  27: 9185878.214 ops/s
# Warmup Iteration  28: 9076858.407 ops/s
# Warmup Iteration  29: 9121413.870 ops/s
# Warmup Iteration  30: 9113676.610 ops/s
Iteration   1: 9092321.808 ops/s
Iteration   2: 9053543.213 ops/s
Iteration   3: 9099618.909 ops/s
Iteration   4: 9176486.409 ops/s
Iteration   5: 9151137.813 ops/s
Iteration   6: 9186303.201 ops/s
Iteration   7: 9061274.440 ops/s
Iteration   8: 9021062.082 ops/s
Iteration   9: 9193645.628 ops/s
Iteration  10: 9129601.536 ops/s
Iteration  11: 9182085.798 ops/s
Iteration  12: 9196006.189 ops/s
Iteration  13: 9148910.728 ops/s
Iteration  14: 9184845.003 ops/s
Iteration  15: 9184249.323 ops/s
Iteration  16: 8978057.395 ops/s
Iteration  17: 9094677.297 ops/s
Iteration  18: 9170233.293 ops/s
Iteration  19: 9150078.965 ops/s
Iteration  20: 9180932.420 ops/s
Iteration  21: 9214167.227 ops/s
Iteration  22: 9187724.914 ops/s
Iteration  23: 9116360.987 ops/s
Iteration  24: 9058850.469 ops/s
Iteration  25: 9027306.262 ops/s
Iteration  26: 9065126.640 ops/s
Iteration  27: 9184146.401 ops/s
Iteration  28: 9084356.036 ops/s
Iteration  29: 9120083.178 ops/s
Iteration  30: 9163513.124 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_newCollectionWith":
  9128556.890 ±(99.9%) 41802.809 ops/s [Average]
  (min, avg, max) = (8978057.395, 9128556.890, 9214167.227), stdev = 62568.481
  CI (99.9%): [9086754.081, 9170359.699] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_newCollectionWith  thrpt   30  9128556.890 ± 41802.809  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3646856.193 ops/s
# Warmup Iteration   2: 6376375.481 ops/s
# Warmup Iteration   3: 7536106.731 ops/s
# Warmup Iteration   4: 7578357.928 ops/s
# Warmup Iteration   5: 7639176.287 ops/s
# Warmup Iteration   6: 7624737.458 ops/s
# Warmup Iteration   7: 7600698.995 ops/s
# Warmup Iteration   8: 7561589.355 ops/s
# Warmup Iteration   9: 7605110.544 ops/s
# Warmup Iteration  10: 7543093.228 ops/s
# Warmup Iteration  11: 7628487.096 ops/s
# Warmup Iteration  12: 7600076.407 ops/s
# Warmup Iteration  13: 7582859.853 ops/s
# Warmup Iteration  14: 7596055.435 ops/s
# Warmup Iteration  15: 7594098.079 ops/s
# Warmup Iteration  16: 7617936.863 ops/s
# Warmup Iteration  17: 7542757.991 ops/s
# Warmup Iteration  18: 7601330.243 ops/s
# Warmup Iteration  19: 7615018.656 ops/s
# Warmup Iteration  20: 7626012.863 ops/s
# Warmup Iteration  21: 7598823.546 ops/s
# Warmup Iteration  22: 7561083.725 ops/s
# Warmup Iteration  23: 7611243.384 ops/s
# Warmup Iteration  24: 7601908.772 ops/s
# Warmup Iteration  25: 7590312.392 ops/s
# Warmup Iteration  26: 7531262.004 ops/s
# Warmup Iteration  27: 7578049.646 ops/s
# Warmup Iteration  28: 7598487.127 ops/s
# Warmup Iteration  29: 7607844.849 ops/s
# Warmup Iteration  30: 7597067.332 ops/s
Iteration   1: 7529509.621 ops/s
Iteration   2: 7592885.024 ops/s
Iteration   3: 7581736.835 ops/s
Iteration   4: 7591454.857 ops/s
Iteration   5: 7595666.195 ops/s
Iteration   6: 7598457.175 ops/s
Iteration   7: 7575066.541 ops/s
Iteration   8: 7570014.144 ops/s
Iteration   9: 7581827.080 ops/s
Iteration  10: 7549768.871 ops/s
Iteration  11: 7611822.895 ops/s
Iteration  12: 7596317.616 ops/s
Iteration  13: 7603615.875 ops/s
Iteration  14: 7548246.600 ops/s
Iteration  15: 7611672.500 ops/s
Iteration  16: 7637171.011 ops/s
Iteration  17: 7634774.613 ops/s
Iteration  18: 7638440.269 ops/s
Iteration  19: 7592707.408 ops/s
Iteration  20: 7616271.330 ops/s
Iteration  21: 7607840.097 ops/s
Iteration  22: 7634787.811 ops/s
Iteration  23: 7546384.944 ops/s
Iteration  24: 7595463.619 ops/s
Iteration  25: 7614806.341 ops/s
Iteration  26: 7474924.790 ops/s
Iteration  27: 7633476.638 ops/s
Iteration  28: 7461083.715 ops/s
Iteration  29: 7632076.248 ops/s
Iteration  30: 7629763.944 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_noneSatisfy":
  7589601.153 ±(99.9%) 29439.893 ops/s [Average]
  (min, avg, max) = (7461083.715, 7589601.153, 7638440.269), stdev = 44064.249
  CI (99.9%): [7560161.260, 7619041.046] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_noneSatisfy  thrpt   30  7589601.153 ± 29439.893  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7363581.210 ops/s
# Warmup Iteration   2: 11495385.227 ops/s
# Warmup Iteration   3: 13992614.460 ops/s
# Warmup Iteration   4: 14055321.485 ops/s
# Warmup Iteration   5: 14087791.259 ops/s
# Warmup Iteration   6: 14054269.839 ops/s
# Warmup Iteration   7: 14090976.497 ops/s
# Warmup Iteration   8: 13924842.053 ops/s
# Warmup Iteration   9: 13998049.492 ops/s
# Warmup Iteration  10: 13895502.768 ops/s
# Warmup Iteration  11: 13918734.361 ops/s
# Warmup Iteration  12: 13860727.807 ops/s
# Warmup Iteration  13: 13966401.895 ops/s
# Warmup Iteration  14: 14042866.481 ops/s
# Warmup Iteration  15: 14032778.289 ops/s
# Warmup Iteration  16: 14065524.442 ops/s
# Warmup Iteration  17: 13816717.649 ops/s
# Warmup Iteration  18: 14027154.210 ops/s
# Warmup Iteration  19: 14102376.478 ops/s
# Warmup Iteration  20: 14067774.485 ops/s
# Warmup Iteration  21: 14088083.715 ops/s
# Warmup Iteration  22: 13982995.354 ops/s
# Warmup Iteration  23: 14050100.118 ops/s
# Warmup Iteration  24: 14093920.322 ops/s
# Warmup Iteration  25: 14099746.773 ops/s
# Warmup Iteration  26: 13999679.050 ops/s
# Warmup Iteration  27: 13838177.330 ops/s
# Warmup Iteration  28: 14000721.912 ops/s
# Warmup Iteration  29: 13985117.363 ops/s
# Warmup Iteration  30: 14036604.885 ops/s
Iteration   1: 14069113.213 ops/s
Iteration   2: 14127730.864 ops/s
Iteration   3: 13949056.510 ops/s
Iteration   4: 13813602.543 ops/s
Iteration   5: 14068566.320 ops/s
Iteration   6: 14080688.683 ops/s
Iteration   7: 14046458.886 ops/s
Iteration   8: 14047921.799 ops/s
Iteration   9: 14074485.471 ops/s
Iteration  10: 13759556.161 ops/s
Iteration  11: 14026738.086 ops/s
Iteration  12: 14009097.998 ops/s
Iteration  13: 14006425.044 ops/s
Iteration  14: 14009325.731 ops/s
Iteration  15: 14028161.526 ops/s
Iteration  16: 14048216.928 ops/s
Iteration  17: 13962176.760 ops/s
Iteration  18: 13833831.084 ops/s
Iteration  19: 13987743.287 ops/s
Iteration  20: 14079921.192 ops/s
Iteration  21: 14068864.022 ops/s
Iteration  22: 13926901.424 ops/s
Iteration  23: 14041210.867 ops/s
Iteration  24: 14022814.061 ops/s
Iteration  25: 14023460.230 ops/s
Iteration  26: 14011165.704 ops/s
Iteration  27: 14067973.006 ops/s
Iteration  28: 13983905.067 ops/s
Iteration  29: 14112326.207 ops/s
Iteration  30: 14005985.555 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_notEmpty":
  14009780.808 ±(99.9%) 56135.403 ops/s [Average]
  (min, avg, max) = (13759556.161, 14009780.808, 14127730.864), stdev = 84020.835
  CI (99.9%): [13953645.404, 14065916.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_notEmpty  thrpt   30  14009780.808 ± 56135.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_null_iterable_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_null_iterable_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 834728.755 ops/s
# Warmup Iteration   2: 841806.795 ops/s
# Warmup Iteration   3: 958383.934 ops/s
# Warmup Iteration   4: 1054691.412 ops/s
# Warmup Iteration   5: 1045308.121 ops/s
# Warmup Iteration   6: 1049264.713 ops/s
# Warmup Iteration   7: 1052842.228 ops/s
# Warmup Iteration   8: 1053884.488 ops/s
# Warmup Iteration   9: 1047837.304 ops/s
# Warmup Iteration  10: 1045475.819 ops/s
# Warmup Iteration  11: 1051702.905 ops/s
# Warmup Iteration  12: 1050237.678 ops/s
# Warmup Iteration  13: 1048903.007 ops/s
# Warmup Iteration  14: 983404.695 ops/s
# Warmup Iteration  15: 937300.807 ops/s
# Warmup Iteration  16: 1046772.155 ops/s
# Warmup Iteration  17: 1111909.488 ops/s
# Warmup Iteration  18: 1115637.204 ops/s
# Warmup Iteration  19: 1109438.440 ops/s
# Warmup Iteration  20: 1116338.523 ops/s
# Warmup Iteration  21: 1110458.080 ops/s
# Warmup Iteration  22: 1117537.571 ops/s
# Warmup Iteration  23: 1117663.450 ops/s
# Warmup Iteration  24: 1105183.923 ops/s
# Warmup Iteration  25: 1105475.705 ops/s
# Warmup Iteration  26: 1116283.497 ops/s
# Warmup Iteration  27: 1117017.659 ops/s
# Warmup Iteration  28: 1113647.812 ops/s
# Warmup Iteration  29: 1109872.400 ops/s
# Warmup Iteration  30: 1115632.394 ops/s
Iteration   1: 1111398.257 ops/s
Iteration   2: 1112804.985 ops/s
Iteration   3: 1118453.749 ops/s
Iteration   4: 1107705.394 ops/s
Iteration   5: 1119252.780 ops/s
Iteration   6: 1109113.581 ops/s
Iteration   7: 1109527.042 ops/s
Iteration   8: 1097731.715 ops/s
Iteration   9: 1114893.895 ops/s
Iteration  10: 1107104.816 ops/s
Iteration  11: 1112704.481 ops/s
Iteration  12: 1116030.912 ops/s
Iteration  13: 1102306.236 ops/s
Iteration  14: 1113554.882 ops/s
Iteration  15: 1109754.718 ops/s
Iteration  16: 1117212.997 ops/s
Iteration  17: 1112786.821 ops/s
Iteration  18: 1115372.534 ops/s
Iteration  19: 1110454.189 ops/s
Iteration  20: 1108729.672 ops/s
Iteration  21: 1117128.619 ops/s
Iteration  22: 1115532.026 ops/s
Iteration  23: 1116138.514 ops/s
Iteration  24: 1104998.271 ops/s
Iteration  25: 1120213.462 ops/s
Iteration  26: 1114144.713 ops/s
Iteration  27: 1108498.325 ops/s
Iteration  28: 1117370.029 ops/s
Iteration  29: 1119060.296 ops/s
Iteration  30: 1114919.235 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_null_iterable_throws":
  1112496.572 ±(99.9%) 3516.906 ops/s [Average]
  (min, avg, max) = (1097731.715, 1112496.572, 1120213.462), stdev = 5263.939
  CI (99.9%): [1108979.666, 1116013.477] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_null_iterable_throws  thrpt   30  1112496.572 ± 3516.906  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3093794.008 ops/s
# Warmup Iteration   2: 6306483.875 ops/s
# Warmup Iteration   3: 5319633.482 ops/s
# Warmup Iteration   4: 6372613.906 ops/s
# Warmup Iteration   5: 6351289.366 ops/s
# Warmup Iteration   6: 6311978.168 ops/s
# Warmup Iteration   7: 6375478.285 ops/s
# Warmup Iteration   8: 6363692.203 ops/s
# Warmup Iteration   9: 6354071.084 ops/s
# Warmup Iteration  10: 6382443.283 ops/s
# Warmup Iteration  11: 6316786.935 ops/s
# Warmup Iteration  12: 6369458.226 ops/s
# Warmup Iteration  13: 6343708.826 ops/s
# Warmup Iteration  14: 6362151.186 ops/s
# Warmup Iteration  15: 6330979.570 ops/s
# Warmup Iteration  16: 6353504.939 ops/s
# Warmup Iteration  17: 6338896.152 ops/s
# Warmup Iteration  18: 6352740.273 ops/s
# Warmup Iteration  19: 6350144.612 ops/s
# Warmup Iteration  20: 6367800.788 ops/s
# Warmup Iteration  21: 6367283.517 ops/s
# Warmup Iteration  22: 6371489.000 ops/s
# Warmup Iteration  23: 6341118.282 ops/s
# Warmup Iteration  24: 6353803.888 ops/s
# Warmup Iteration  25: 6344501.625 ops/s
# Warmup Iteration  26: 6352084.673 ops/s
# Warmup Iteration  27: 6303539.990 ops/s
# Warmup Iteration  28: 6348923.558 ops/s
# Warmup Iteration  29: 6328009.722 ops/s
# Warmup Iteration  30: 6286187.620 ops/s
Iteration   1: 6336946.209 ops/s
Iteration   2: 6350983.309 ops/s
Iteration   3: 6388489.005 ops/s
Iteration   4: 6198015.463 ops/s
Iteration   5: 6371120.912 ops/s
Iteration   6: 6304222.439 ops/s
Iteration   7: 6334893.636 ops/s
Iteration   8: 6335340.967 ops/s
Iteration   9: 6361046.947 ops/s
Iteration  10: 6371139.826 ops/s
Iteration  11: 6347236.163 ops/s
Iteration  12: 6345929.679 ops/s
Iteration  13: 6313328.585 ops/s
Iteration  14: 6274927.033 ops/s
Iteration  15: 6383392.341 ops/s
Iteration  16: 6343094.948 ops/s
Iteration  17: 6397794.480 ops/s
Iteration  18: 6331415.456 ops/s
Iteration  19: 6346856.814 ops/s
Iteration  20: 6364315.266 ops/s
Iteration  21: 6374083.987 ops/s
Iteration  22: 6369424.544 ops/s
Iteration  23: 6356452.485 ops/s
Iteration  24: 6341464.369 ops/s
Iteration  25: 6267326.644 ops/s
Iteration  26: 6374673.774 ops/s
Iteration  27: 6286466.088 ops/s
Iteration  28: 6329540.561 ops/s
Iteration  29: 6377507.510 ops/s
Iteration  30: 6380226.138 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_reduce":
  6341921.853 ±(99.9%) 28291.603 ops/s [Average]
  (min, avg, max) = (6198015.463, 6341921.853, 6397794.480), stdev = 42345.543
  CI (99.9%): [6313630.250, 6370213.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_reduce  thrpt   30  6341921.853 ± 28291.603  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2763173.166 ops/s
# Warmup Iteration   2: 5683324.026 ops/s
# Warmup Iteration   3: 4901032.668 ops/s
# Warmup Iteration   4: 5861277.798 ops/s
# Warmup Iteration   5: 5825104.852 ops/s
# Warmup Iteration   6: 5820584.261 ops/s
# Warmup Iteration   7: 5857230.554 ops/s
# Warmup Iteration   8: 5840159.624 ops/s
# Warmup Iteration   9: 5819972.159 ops/s
# Warmup Iteration  10: 5814620.258 ops/s
# Warmup Iteration  11: 5835456.114 ops/s
# Warmup Iteration  12: 5738156.860 ops/s
# Warmup Iteration  13: 5829945.650 ops/s
# Warmup Iteration  14: 5809200.397 ops/s
# Warmup Iteration  15: 5844632.130 ops/s
# Warmup Iteration  16: 5849541.693 ops/s
# Warmup Iteration  17: 5838368.646 ops/s
# Warmup Iteration  18: 5787328.602 ops/s
# Warmup Iteration  19: 5838130.736 ops/s
# Warmup Iteration  20: 5832540.927 ops/s
# Warmup Iteration  21: 5816352.543 ops/s
# Warmup Iteration  22: 5815949.157 ops/s
# Warmup Iteration  23: 5851864.105 ops/s
# Warmup Iteration  24: 5858609.841 ops/s
# Warmup Iteration  25: 5835065.951 ops/s
# Warmup Iteration  26: 5792044.918 ops/s
# Warmup Iteration  27: 5838326.461 ops/s
# Warmup Iteration  28: 5825385.984 ops/s
# Warmup Iteration  29: 5826893.631 ops/s
# Warmup Iteration  30: 5850189.542 ops/s
Iteration   1: 5842616.623 ops/s
Iteration   2: 5824883.373 ops/s
Iteration   3: 5842983.121 ops/s
Iteration   4: 5870788.455 ops/s
Iteration   5: 5820824.998 ops/s
Iteration   6: 5838486.245 ops/s
Iteration   7: 5852891.612 ops/s
Iteration   8: 5897325.396 ops/s
Iteration   9: 5776463.319 ops/s
Iteration  10: 5873497.856 ops/s
Iteration  11: 5820242.956 ops/s
Iteration  12: 5839249.884 ops/s
Iteration  13: 5707443.664 ops/s
Iteration  14: 5847945.598 ops/s
Iteration  15: 5805026.090 ops/s
Iteration  16: 5857663.674 ops/s
Iteration  17: 5864545.933 ops/s
Iteration  18: 5854028.170 ops/s
Iteration  19: 5864177.625 ops/s
Iteration  20: 5862363.452 ops/s
Iteration  21: 5776301.378 ops/s
Iteration  22: 5866368.360 ops/s
Iteration  23: 5866937.361 ops/s
Iteration  24: 5865120.551 ops/s
Iteration  25: 5830797.589 ops/s
Iteration  26: 5824091.003 ops/s
Iteration  27: 5868893.354 ops/s
Iteration  28: 5714473.510 ops/s
Iteration  29: 5845057.629 ops/s
Iteration  30: 5803251.389 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_reduceIfEmpty":
  5834158.006 ±(99.9%) 29098.331 ops/s [Average]
  (min, avg, max) = (5707443.664, 5834158.006, 5897325.396), stdev = 43553.015
  CI (99.9%): [5805059.675, 5863256.337] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  5834158.006 ± 29098.331  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 742978.459 ops/s
# Warmup Iteration   2: 758438.481 ops/s
# Warmup Iteration   3: 965186.343 ops/s
# Warmup Iteration   4: 993678.450 ops/s
# Warmup Iteration   5: 998567.000 ops/s
# Warmup Iteration   6: 991395.975 ops/s
# Warmup Iteration   7: 998666.541 ops/s
# Warmup Iteration   8: 995658.523 ops/s
# Warmup Iteration   9: 991049.029 ops/s
# Warmup Iteration  10: 988792.036 ops/s
# Warmup Iteration  11: 999490.352 ops/s
# Warmup Iteration  12: 904599.684 ops/s
# Warmup Iteration  13: 920847.529 ops/s
# Warmup Iteration  14: 987991.719 ops/s
# Warmup Iteration  15: 994906.390 ops/s
# Warmup Iteration  16: 989109.151 ops/s
# Warmup Iteration  17: 1049869.353 ops/s
# Warmup Iteration  18: 1048094.237 ops/s
# Warmup Iteration  19: 1049857.153 ops/s
# Warmup Iteration  20: 1050145.197 ops/s
# Warmup Iteration  21: 1053129.679 ops/s
# Warmup Iteration  22: 1049168.083 ops/s
# Warmup Iteration  23: 1048521.304 ops/s
# Warmup Iteration  24: 1049696.069 ops/s
# Warmup Iteration  25: 1043021.643 ops/s
# Warmup Iteration  26: 1053279.481 ops/s
# Warmup Iteration  27: 1049537.275 ops/s
# Warmup Iteration  28: 1043604.430 ops/s
# Warmup Iteration  29: 1039175.605 ops/s
# Warmup Iteration  30: 1052677.079 ops/s
Iteration   1: 1050405.649 ops/s
Iteration   2: 1045812.282 ops/s
Iteration   3: 1045410.123 ops/s
Iteration   4: 1055572.726 ops/s
Iteration   5: 1052486.467 ops/s
Iteration   6: 1053802.057 ops/s
Iteration   7: 1036786.201 ops/s
Iteration   8: 1051556.197 ops/s
Iteration   9: 1048848.699 ops/s
Iteration  10: 1056279.020 ops/s
Iteration  11: 1055608.469 ops/s
Iteration  12: 1047090.517 ops/s
Iteration  13: 1031544.156 ops/s
Iteration  14: 1053601.846 ops/s
Iteration  15: 1048641.985 ops/s
Iteration  16: 1051900.263 ops/s
Iteration  17: 1054941.094 ops/s
Iteration  18: 1048550.129 ops/s
Iteration  19: 1060216.508 ops/s
Iteration  20: 1056422.523 ops/s
Iteration  21: 1041016.615 ops/s
Iteration  22: 1047114.141 ops/s
Iteration  23: 1053119.799 ops/s
Iteration  24: 1050484.321 ops/s
Iteration  25: 1055736.685 ops/s
Iteration  26: 1047969.461 ops/s
Iteration  27: 1053102.266 ops/s
Iteration  28: 1056001.911 ops/s
Iteration  29: 1047401.838 ops/s
Iteration  30: 1052935.013 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1050345.299 ±(99.9%) 4063.619 ops/s [Average]
  (min, avg, max) = (1031544.156, 1050345.299, 1060216.508), stdev = 6082.233
  CI (99.9%): [1046281.680, 1054408.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1050345.299 ± 4063.619  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2148519.424 ops/s
# Warmup Iteration   2: 4657807.496 ops/s
# Warmup Iteration   3: 4609201.195 ops/s
# Warmup Iteration   4: 5504849.175 ops/s
# Warmup Iteration   5: 5544013.132 ops/s
# Warmup Iteration   6: 5514543.909 ops/s
# Warmup Iteration   7: 5516353.746 ops/s
# Warmup Iteration   8: 5522903.907 ops/s
# Warmup Iteration   9: 5511387.488 ops/s
# Warmup Iteration  10: 5512041.021 ops/s
# Warmup Iteration  11: 5538967.039 ops/s
# Warmup Iteration  12: 5528077.250 ops/s
# Warmup Iteration  13: 5524959.847 ops/s
# Warmup Iteration  14: 5480139.894 ops/s
# Warmup Iteration  15: 5474947.614 ops/s
# Warmup Iteration  16: 5527644.812 ops/s
# Warmup Iteration  17: 5490972.166 ops/s
# Warmup Iteration  18: 5514560.481 ops/s
# Warmup Iteration  19: 5506431.031 ops/s
# Warmup Iteration  20: 5515589.862 ops/s
# Warmup Iteration  21: 5510052.413 ops/s
# Warmup Iteration  22: 5546898.469 ops/s
# Warmup Iteration  23: 5508824.537 ops/s
# Warmup Iteration  24: 5524209.140 ops/s
# Warmup Iteration  25: 5435688.676 ops/s
# Warmup Iteration  26: 5493912.723 ops/s
# Warmup Iteration  27: 5524682.052 ops/s
# Warmup Iteration  28: 5476850.829 ops/s
# Warmup Iteration  29: 5523104.580 ops/s
# Warmup Iteration  30: 5527825.579 ops/s
Iteration   1: 5363538.966 ops/s
Iteration   2: 5521030.239 ops/s
Iteration   3: 5522463.510 ops/s
Iteration   4: 5519143.771 ops/s
Iteration   5: 5509005.169 ops/s
Iteration   6: 5519442.001 ops/s
Iteration   7: 5500720.642 ops/s
Iteration   8: 5536965.097 ops/s
Iteration   9: 5562316.047 ops/s
Iteration  10: 5516985.696 ops/s
Iteration  11: 5566577.794 ops/s
Iteration  12: 5543929.765 ops/s
Iteration  13: 5547853.977 ops/s
Iteration  14: 5528618.070 ops/s
Iteration  15: 5475877.566 ops/s
Iteration  16: 5424948.491 ops/s
Iteration  17: 5453634.678 ops/s
Iteration  18: 5496146.118 ops/s
Iteration  19: 5519854.251 ops/s
Iteration  20: 5514933.991 ops/s
Iteration  21: 5443284.066 ops/s
Iteration  22: 5529204.447 ops/s
Iteration  23: 5534275.015 ops/s
Iteration  24: 5508879.991 ops/s
Iteration  25: 5501262.991 ops/s
Iteration  26: 5493522.718 ops/s
Iteration  27: 5512141.292 ops/s
Iteration  28: 5529774.047 ops/s
Iteration  29: 5526435.394 ops/s
Iteration  30: 5423393.553 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_reject":
  5504871.978 ±(99.9%) 29530.870 ops/s [Average]
  (min, avg, max) = (5363538.966, 5504871.978, 5566577.794), stdev = 44200.419
  CI (99.9%): [5475341.108, 5534402.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_reject  thrpt   30  5504871.978 ± 29530.870  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2153784.561 ops/s
# Warmup Iteration   2: 4593776.053 ops/s
# Warmup Iteration   3: 4485256.392 ops/s
# Warmup Iteration   4: 5391168.310 ops/s
# Warmup Iteration   5: 5313283.517 ops/s
# Warmup Iteration   6: 5387527.442 ops/s
# Warmup Iteration   7: 5351033.115 ops/s
# Warmup Iteration   8: 5306165.351 ops/s
# Warmup Iteration   9: 5397519.722 ops/s
# Warmup Iteration  10: 5356047.323 ops/s
# Warmup Iteration  11: 5336851.838 ops/s
# Warmup Iteration  12: 5390658.964 ops/s
# Warmup Iteration  13: 5402563.366 ops/s
# Warmup Iteration  14: 5359103.841 ops/s
# Warmup Iteration  15: 5396446.110 ops/s
# Warmup Iteration  16: 5353937.869 ops/s
# Warmup Iteration  17: 5382494.435 ops/s
# Warmup Iteration  18: 5387791.372 ops/s
# Warmup Iteration  19: 5390790.404 ops/s
# Warmup Iteration  20: 5394681.809 ops/s
# Warmup Iteration  21: 5339705.248 ops/s
# Warmup Iteration  22: 5297253.305 ops/s
# Warmup Iteration  23: 5336089.365 ops/s
# Warmup Iteration  24: 5378648.565 ops/s
# Warmup Iteration  25: 5370290.368 ops/s
# Warmup Iteration  26: 5344310.255 ops/s
# Warmup Iteration  27: 5349008.239 ops/s
# Warmup Iteration  28: 5357439.708 ops/s
# Warmup Iteration  29: 5397067.173 ops/s
# Warmup Iteration  30: 5399080.022 ops/s
Iteration   1: 5285918.093 ops/s
Iteration   2: 5361501.138 ops/s
Iteration   3: 5389314.800 ops/s
Iteration   4: 5379325.641 ops/s
Iteration   5: 5387187.912 ops/s
Iteration   6: 5387327.651 ops/s
Iteration   7: 5390793.391 ops/s
Iteration   8: 5325268.033 ops/s
Iteration   9: 5376786.001 ops/s
Iteration  10: 5373421.987 ops/s
Iteration  11: 5418024.305 ops/s
Iteration  12: 5391245.083 ops/s
Iteration  13: 5310487.958 ops/s
Iteration  14: 5393476.189 ops/s
Iteration  15: 5363921.338 ops/s
Iteration  16: 5306463.151 ops/s
Iteration  17: 5382437.348 ops/s
Iteration  18: 5369145.140 ops/s
Iteration  19: 5375726.304 ops/s
Iteration  20: 5368434.469 ops/s
Iteration  21: 5398046.533 ops/s
Iteration  22: 5398333.137 ops/s
Iteration  23: 5365025.968 ops/s
Iteration  24: 5374674.044 ops/s
Iteration  25: 5389322.995 ops/s
Iteration  26: 5389441.086 ops/s
Iteration  27: 5399101.414 ops/s
Iteration  28: 5373385.560 ops/s
Iteration  29: 5357745.381 ops/s
Iteration  30: 5417077.322 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_select":
  5373278.646 ±(99.9%) 20421.275 ops/s [Average]
  (min, avg, max) = (5285918.093, 5373278.646, 5418024.305), stdev = 30565.605
  CI (99.9%): [5352857.371, 5393699.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_select  thrpt   30  5373278.646 ± 20421.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4444448.113 ops/s
# Warmup Iteration   2: 7411032.330 ops/s
# Warmup Iteration   3: 8785197.115 ops/s
# Warmup Iteration   4: 8769649.700 ops/s
# Warmup Iteration   5: 8673229.119 ops/s
# Warmup Iteration   6: 8819230.232 ops/s
# Warmup Iteration   7: 8811878.577 ops/s
# Warmup Iteration   8: 8753257.843 ops/s
# Warmup Iteration   9: 8772551.010 ops/s
# Warmup Iteration  10: 8691206.919 ops/s
# Warmup Iteration  11: 8675706.120 ops/s
# Warmup Iteration  12: 8732802.852 ops/s
# Warmup Iteration  13: 8775767.713 ops/s
# Warmup Iteration  14: 8705942.845 ops/s
# Warmup Iteration  15: 8796421.166 ops/s
# Warmup Iteration  16: 8756999.775 ops/s
# Warmup Iteration  17: 8802894.660 ops/s
# Warmup Iteration  18: 8725350.979 ops/s
# Warmup Iteration  19: 8800980.840 ops/s
# Warmup Iteration  20: 8768565.403 ops/s
# Warmup Iteration  21: 8797757.880 ops/s
# Warmup Iteration  22: 8827781.134 ops/s
# Warmup Iteration  23: 8737155.034 ops/s
# Warmup Iteration  24: 8769034.448 ops/s
# Warmup Iteration  25: 8771837.616 ops/s
# Warmup Iteration  26: 8833628.600 ops/s
# Warmup Iteration  27: 8769613.518 ops/s
# Warmup Iteration  28: 8711154.484 ops/s
# Warmup Iteration  29: 8603826.403 ops/s
# Warmup Iteration  30: 8783169.114 ops/s
Iteration   1: 8752316.128 ops/s
Iteration   2: 8766999.878 ops/s
Iteration   3: 8813419.445 ops/s
Iteration   4: 8693736.034 ops/s
Iteration   5: 8760986.729 ops/s
Iteration   6: 8767023.307 ops/s
Iteration   7: 8796303.044 ops/s
Iteration   8: 8830961.534 ops/s
Iteration   9: 8825532.590 ops/s
Iteration  10: 8772268.149 ops/s
Iteration  11: 8816913.253 ops/s
Iteration  12: 8744267.206 ops/s
Iteration  13: 8713218.191 ops/s
Iteration  14: 8781476.054 ops/s
Iteration  15: 8818854.884 ops/s
Iteration  16: 8679989.897 ops/s
Iteration  17: 8805372.659 ops/s
Iteration  18: 8778117.044 ops/s
Iteration  19: 8754607.570 ops/s
Iteration  20: 8636846.529 ops/s
Iteration  21: 8712303.520 ops/s
Iteration  22: 8666920.531 ops/s
Iteration  23: 8729426.048 ops/s
Iteration  24: 8767928.295 ops/s
Iteration  25: 8615122.310 ops/s
Iteration  26: 8816463.058 ops/s
Iteration  27: 8740051.883 ops/s
Iteration  28: 8761559.429 ops/s
Iteration  29: 8804456.045 ops/s
Iteration  30: 8854616.167 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_size":
  8759268.580 ±(99.9%) 39078.233 ops/s [Average]
  (min, avg, max) = (8615122.310, 8759268.580, 8854616.167), stdev = 58490.465
  CI (99.9%): [8720190.347, 8798346.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_size  thrpt   30  8759268.580 ± 39078.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163109490.342 ops/s
# Warmup Iteration   2: 301298139.687 ops/s
# Warmup Iteration   3: 265539193.844 ops/s
# Warmup Iteration   4: 309242409.177 ops/s
# Warmup Iteration   5: 307269509.568 ops/s
# Warmup Iteration   6: 309467318.485 ops/s
# Warmup Iteration   7: 309544358.114 ops/s
# Warmup Iteration   8: 307688753.616 ops/s
# Warmup Iteration   9: 308704858.218 ops/s
# Warmup Iteration  10: 306986083.339 ops/s
# Warmup Iteration  11: 310181161.570 ops/s
# Warmup Iteration  12: 308299471.066 ops/s
# Warmup Iteration  13: 306837343.269 ops/s
# Warmup Iteration  14: 309092448.217 ops/s
# Warmup Iteration  15: 308717424.262 ops/s
# Warmup Iteration  16: 304525192.816 ops/s
# Warmup Iteration  17: 310195309.026 ops/s
# Warmup Iteration  18: 309402782.315 ops/s
# Warmup Iteration  19: 308334378.675 ops/s
# Warmup Iteration  20: 307666004.451 ops/s
# Warmup Iteration  21: 308624450.595 ops/s
# Warmup Iteration  22: 309359780.274 ops/s
# Warmup Iteration  23: 309784941.240 ops/s
# Warmup Iteration  24: 309321878.310 ops/s
# Warmup Iteration  25: 310088511.516 ops/s
# Warmup Iteration  26: 309473817.975 ops/s
# Warmup Iteration  27: 307435911.882 ops/s
# Warmup Iteration  28: 308877782.234 ops/s
# Warmup Iteration  29: 308873298.545 ops/s
# Warmup Iteration  30: 309270486.493 ops/s
Iteration   1: 310547524.897 ops/s
Iteration   2: 305646942.780 ops/s
Iteration   3: 308345735.383 ops/s
Iteration   4: 309518627.118 ops/s
Iteration   5: 303234999.837 ops/s
Iteration   6: 309096409.938 ops/s
Iteration   7: 307777167.612 ops/s
Iteration   8: 309646999.304 ops/s
Iteration   9: 308505428.087 ops/s
Iteration  10: 309044073.681 ops/s
Iteration  11: 308114918.518 ops/s
Iteration  12: 308466916.679 ops/s
Iteration  13: 306537650.859 ops/s
Iteration  14: 305923609.772 ops/s
Iteration  15: 308711617.548 ops/s
Iteration  16: 310103883.319 ops/s
Iteration  17: 309491991.571 ops/s
Iteration  18: 305764033.685 ops/s
Iteration  19: 307844622.214 ops/s
Iteration  20: 309403958.154 ops/s
Iteration  21: 306509901.793 ops/s
Iteration  22: 306437882.115 ops/s
Iteration  23: 307587187.312 ops/s
Iteration  24: 308119963.183 ops/s
Iteration  25: 308057169.884 ops/s
Iteration  26: 297753127.920 ops/s
Iteration  27: 308992673.898 ops/s
Iteration  28: 304505966.991 ops/s
Iteration  29: 309018740.904 ops/s
Iteration  30: 306527545.823 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_testEquals":
  307507909.026 ±(99.9%) 1675041.553 ops/s [Average]
  (min, avg, max) = (297753127.920, 307507909.026, 310547524.897), stdev = 2507123.531
  CI (99.9%): [305832867.473, 309182950.579] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score         Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_testEquals  thrpt   30  307507909.026 ± 1675041.553  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163555852.469 ops/s
# Warmup Iteration   2: 301035552.996 ops/s
# Warmup Iteration   3: 264240749.075 ops/s
# Warmup Iteration   4: 310595931.937 ops/s
# Warmup Iteration   5: 309954334.656 ops/s
# Warmup Iteration   6: 305140753.550 ops/s
# Warmup Iteration   7: 310526784.528 ops/s
# Warmup Iteration   8: 309667428.560 ops/s
# Warmup Iteration   9: 309751274.881 ops/s
# Warmup Iteration  10: 311168667.312 ops/s
# Warmup Iteration  11: 306950114.679 ops/s
# Warmup Iteration  12: 309286471.656 ops/s
# Warmup Iteration  13: 309549247.952 ops/s
# Warmup Iteration  14: 307925184.076 ops/s
# Warmup Iteration  15: 309867029.831 ops/s
# Warmup Iteration  16: 308413495.850 ops/s
# Warmup Iteration  17: 303978224.810 ops/s
# Warmup Iteration  18: 308640462.816 ops/s
# Warmup Iteration  19: 309133563.511 ops/s
# Warmup Iteration  20: 309213377.806 ops/s
# Warmup Iteration  21: 308502963.774 ops/s
# Warmup Iteration  22: 309472507.018 ops/s
# Warmup Iteration  23: 308477895.392 ops/s
# Warmup Iteration  24: 308548766.011 ops/s
# Warmup Iteration  25: 309699588.625 ops/s
# Warmup Iteration  26: 305630428.747 ops/s
# Warmup Iteration  27: 304324210.454 ops/s
# Warmup Iteration  28: 308735251.861 ops/s
# Warmup Iteration  29: 308621240.593 ops/s
# Warmup Iteration  30: 308465567.110 ops/s
Iteration   1: 308148364.908 ops/s
Iteration   2: 307805058.374 ops/s
Iteration   3: 310503059.777 ops/s
Iteration   4: 309028877.416 ops/s
Iteration   5: 309257374.529 ops/s
Iteration   6: 309911202.600 ops/s
Iteration   7: 307677550.895 ops/s
Iteration   8: 309815623.698 ops/s
Iteration   9: 307986263.206 ops/s
Iteration  10: 306067676.280 ops/s
Iteration  11: 305066345.301 ops/s
Iteration  12: 309564386.134 ops/s
Iteration  13: 307421625.238 ops/s
Iteration  14: 310009217.435 ops/s
Iteration  15: 309906653.621 ops/s
Iteration  16: 310297981.172 ops/s
Iteration  17: 308302063.095 ops/s
Iteration  18: 303885942.929 ops/s
Iteration  19: 309029950.485 ops/s
Iteration  20: 306187715.907 ops/s
Iteration  21: 305796749.952 ops/s
Iteration  22: 306673754.352 ops/s
Iteration  23: 310460860.779 ops/s
Iteration  24: 309607389.014 ops/s
Iteration  25: 309860020.093 ops/s
Iteration  26: 309610780.757 ops/s
Iteration  27: 308262059.607 ops/s
Iteration  28: 308981577.493 ops/s
Iteration  29: 307327555.348 ops/s
Iteration  30: 310776124.581 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_testHashCode":
  308440993.499 ±(99.9%) 1177767.228 ops/s [Average]
  (min, avg, max) = (303885942.929, 308440993.499, 310776124.581), stdev = 1762826.675
  CI (99.9%): [307263226.271, 309618760.728] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score         Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_testHashCode  thrpt   30  308440993.499 ± 1177767.228  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2704493.648 ops/s
# Warmup Iteration   2: 5694939.893 ops/s
# Warmup Iteration   3: 4853490.911 ops/s
# Warmup Iteration   4: 5861021.436 ops/s
# Warmup Iteration   5: 5905602.007 ops/s
# Warmup Iteration   6: 5896282.843 ops/s
# Warmup Iteration   7: 5939223.361 ops/s
# Warmup Iteration   8: 5838735.645 ops/s
# Warmup Iteration   9: 5879357.821 ops/s
# Warmup Iteration  10: 5858166.698 ops/s
# Warmup Iteration  11: 5957186.438 ops/s
# Warmup Iteration  12: 5965453.015 ops/s
# Warmup Iteration  13: 5922933.166 ops/s
# Warmup Iteration  14: 5956463.367 ops/s
# Warmup Iteration  15: 5873956.658 ops/s
# Warmup Iteration  16: 5849443.667 ops/s
# Warmup Iteration  17: 5917120.494 ops/s
# Warmup Iteration  18: 5859855.335 ops/s
# Warmup Iteration  19: 5914631.944 ops/s
# Warmup Iteration  20: 5993400.283 ops/s
# Warmup Iteration  21: 5967190.338 ops/s
# Warmup Iteration  22: 5887509.987 ops/s
# Warmup Iteration  23: 5896288.679 ops/s
# Warmup Iteration  24: 5945152.104 ops/s
# Warmup Iteration  25: 5901824.206 ops/s
# Warmup Iteration  26: 5940275.540 ops/s
# Warmup Iteration  27: 5917947.784 ops/s
# Warmup Iteration  28: 5942700.165 ops/s
# Warmup Iteration  29: 5927899.012 ops/s
# Warmup Iteration  30: 5973338.685 ops/s
Iteration   1: 5890627.580 ops/s
Iteration   2: 5945018.989 ops/s
Iteration   3: 5929006.125 ops/s
Iteration   4: 5779144.341 ops/s
Iteration   5: 5957335.969 ops/s
Iteration   6: 5963302.209 ops/s
Iteration   7: 5869880.778 ops/s
Iteration   8: 5925462.719 ops/s
Iteration   9: 5884434.591 ops/s
Iteration  10: 5906022.449 ops/s
Iteration  11: 5959304.688 ops/s
Iteration  12: 5972319.392 ops/s
Iteration  13: 5927543.856 ops/s
Iteration  14: 5809475.534 ops/s
Iteration  15: 5928577.855 ops/s
Iteration  16: 5882467.294 ops/s
Iteration  17: 5928361.939 ops/s
Iteration  18: 5804475.340 ops/s
Iteration  19: 5935953.304 ops/s
Iteration  20: 5894365.281 ops/s
Iteration  21: 5936324.033 ops/s
Iteration  22: 5911871.824 ops/s
Iteration  23: 5871888.688 ops/s
Iteration  24: 5880467.183 ops/s
Iteration  25: 5908027.246 ops/s
Iteration  26: 5855666.363 ops/s
Iteration  27: 5908769.789 ops/s
Iteration  28: 5931005.604 ops/s
Iteration  29: 5974857.375 ops/s
Iteration  30: 5901936.582 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_testToString":
  5905796.497 ±(99.9%) 32130.002 ops/s [Average]
  (min, avg, max) = (5779144.341, 5905796.497, 5974857.375), stdev = 48090.678
  CI (99.9%): [5873666.495, 5937926.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_testToString  thrpt   30  5905796.497 ± 32130.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3050870.170 ops/s
# Warmup Iteration   2: 7410597.709 ops/s
# Warmup Iteration   3: 5950531.664 ops/s
# Warmup Iteration   4: 7353829.107 ops/s
# Warmup Iteration   5: 7394414.266 ops/s
# Warmup Iteration   6: 7390261.945 ops/s
# Warmup Iteration   7: 7309439.956 ops/s
# Warmup Iteration   8: 7398945.351 ops/s
# Warmup Iteration   9: 7367904.942 ops/s
# Warmup Iteration  10: 7281139.983 ops/s
# Warmup Iteration  11: 7308930.413 ops/s
# Warmup Iteration  12: 7363206.253 ops/s
# Warmup Iteration  13: 7336823.512 ops/s
# Warmup Iteration  14: 7221232.148 ops/s
# Warmup Iteration  15: 7317436.575 ops/s
# Warmup Iteration  16: 7344279.569 ops/s
# Warmup Iteration  17: 7348700.579 ops/s
# Warmup Iteration  18: 7315954.236 ops/s
# Warmup Iteration  19: 7325482.857 ops/s
# Warmup Iteration  20: 7380171.164 ops/s
# Warmup Iteration  21: 7329939.036 ops/s
# Warmup Iteration  22: 7340719.521 ops/s
# Warmup Iteration  23: 7349616.496 ops/s
# Warmup Iteration  24: 7332555.705 ops/s
# Warmup Iteration  25: 7375395.128 ops/s
# Warmup Iteration  26: 7361533.381 ops/s
# Warmup Iteration  27: 7328275.123 ops/s
# Warmup Iteration  28: 7367374.593 ops/s
# Warmup Iteration  29: 7311389.067 ops/s
# Warmup Iteration  30: 7295311.358 ops/s
Iteration   1: 7341559.001 ops/s
Iteration   2: 7265324.812 ops/s
Iteration   3: 7382639.107 ops/s
Iteration   4: 7308742.182 ops/s
Iteration   5: 7377899.682 ops/s
Iteration   6: 7386733.475 ops/s
Iteration   7: 7301325.647 ops/s
Iteration   8: 7200344.824 ops/s
Iteration   9: 7385380.916 ops/s
Iteration  10: 7352455.219 ops/s
Iteration  11: 7353428.642 ops/s
Iteration  12: 7371690.753 ops/s
Iteration  13: 7381868.981 ops/s
Iteration  14: 7389319.604 ops/s
Iteration  15: 7345197.966 ops/s
Iteration  16: 7166669.368 ops/s
Iteration  17: 7369935.994 ops/s
Iteration  18: 7305439.614 ops/s
Iteration  19: 7240311.035 ops/s
Iteration  20: 7383753.994 ops/s
Iteration  21: 7364321.399 ops/s
Iteration  22: 7336368.893 ops/s
Iteration  23: 7408514.383 ops/s
Iteration  24: 7327855.443 ops/s
Iteration  25: 7365057.892 ops/s
Iteration  26: 7332470.762 ops/s
Iteration  27: 7364883.551 ops/s
Iteration  28: 7384190.641 ops/s
Iteration  29: 7289103.691 ops/s
Iteration  30: 7360650.935 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_toArray":
  7338114.614 ±(99.9%) 38481.284 ops/s [Average]
  (min, avg, max) = (7166669.368, 7338114.614, 7408514.383), stdev = 57596.979
  CI (99.9%): [7299633.329, 7376595.898] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_toArray  thrpt   30  7338114.614 ± 38481.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1617462.959 ops/s
# Warmup Iteration   2: 5330396.230 ops/s
# Warmup Iteration   3: 5464059.505 ops/s
# Warmup Iteration   4: 4482491.754 ops/s
# Warmup Iteration   5: 5424328.693 ops/s
# Warmup Iteration   6: 5443369.061 ops/s
# Warmup Iteration   7: 5446545.551 ops/s
# Warmup Iteration   8: 5441594.743 ops/s
# Warmup Iteration   9: 5393641.984 ops/s
# Warmup Iteration  10: 5450128.908 ops/s
# Warmup Iteration  11: 5443995.016 ops/s
# Warmup Iteration  12: 5455620.818 ops/s
# Warmup Iteration  13: 5448236.760 ops/s
# Warmup Iteration  14: 5443716.039 ops/s
# Warmup Iteration  15: 5435140.443 ops/s
# Warmup Iteration  16: 5391893.207 ops/s
# Warmup Iteration  17: 5487701.404 ops/s
# Warmup Iteration  18: 5465291.242 ops/s
# Warmup Iteration  19: 5495418.251 ops/s
# Warmup Iteration  20: 5470032.627 ops/s
# Warmup Iteration  21: 5412038.471 ops/s
# Warmup Iteration  22: 5477480.148 ops/s
# Warmup Iteration  23: 5501165.639 ops/s
# Warmup Iteration  24: 5482825.846 ops/s
# Warmup Iteration  25: 5496814.488 ops/s
# Warmup Iteration  26: 5482732.250 ops/s
# Warmup Iteration  27: 5473264.598 ops/s
# Warmup Iteration  28: 5503512.087 ops/s
# Warmup Iteration  29: 5490166.508 ops/s
# Warmup Iteration  30: 5476814.208 ops/s
Iteration   1: 5488770.904 ops/s
Iteration   2: 5485228.977 ops/s
Iteration   3: 5469165.734 ops/s
Iteration   4: 5506794.342 ops/s
Iteration   5: 5380352.858 ops/s
Iteration   6: 5501740.817 ops/s
Iteration   7: 5490419.692 ops/s
Iteration   8: 5496825.202 ops/s
Iteration   9: 5492148.774 ops/s
Iteration  10: 5496806.992 ops/s
Iteration  11: 5503102.513 ops/s
Iteration  12: 5435278.317 ops/s
Iteration  13: 5502704.062 ops/s
Iteration  14: 5473889.303 ops/s
Iteration  15: 5491117.415 ops/s
Iteration  16: 5492506.081 ops/s
Iteration  17: 5479743.307 ops/s
Iteration  18: 5494197.346 ops/s
Iteration  19: 5494049.084 ops/s
Iteration  20: 5501998.290 ops/s
Iteration  21: 5489078.503 ops/s
Iteration  22: 5508669.272 ops/s
Iteration  23: 5421447.186 ops/s
Iteration  24: 5461589.479 ops/s
Iteration  25: 5483845.561 ops/s
Iteration  26: 5477541.547 ops/s
Iteration  27: 5419316.254 ops/s
Iteration  28: 5480597.650 ops/s
Iteration  29: 5395328.396 ops/s
Iteration  30: 5520857.005 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_toBag":
  5477837.029 ±(99.9%) 22703.193 ops/s [Average]
  (min, avg, max) = (5380352.858, 5477837.029, 5520857.005), stdev = 33981.073
  CI (99.9%): [5455133.836, 5500540.222] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_toBag  thrpt   30  5477837.029 ± 22703.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1528911.029 ops/s
# Warmup Iteration   2: 3576836.959 ops/s
# Warmup Iteration   3: 3251861.451 ops/s
# Warmup Iteration   4: 3661913.096 ops/s
# Warmup Iteration   5: 3816016.363 ops/s
# Warmup Iteration   6: 3821008.469 ops/s
# Warmup Iteration   7: 3826170.381 ops/s
# Warmup Iteration   8: 3828425.413 ops/s
# Warmup Iteration   9: 3835093.981 ops/s
# Warmup Iteration  10: 3813290.941 ops/s
# Warmup Iteration  11: 3833142.803 ops/s
# Warmup Iteration  12: 3815001.503 ops/s
# Warmup Iteration  13: 3805446.096 ops/s
# Warmup Iteration  14: 3825903.518 ops/s
# Warmup Iteration  15: 3784615.209 ops/s
# Warmup Iteration  16: 3813597.672 ops/s
# Warmup Iteration  17: 3816903.343 ops/s
# Warmup Iteration  18: 3832459.236 ops/s
# Warmup Iteration  19: 3827255.800 ops/s
# Warmup Iteration  20: 3823133.599 ops/s
# Warmup Iteration  21: 3825062.518 ops/s
# Warmup Iteration  22: 3814858.832 ops/s
# Warmup Iteration  23: 3804035.497 ops/s
# Warmup Iteration  24: 3835707.800 ops/s
# Warmup Iteration  25: 3833331.943 ops/s
# Warmup Iteration  26: 3815452.629 ops/s
# Warmup Iteration  27: 3811257.009 ops/s
# Warmup Iteration  28: 3816326.704 ops/s
# Warmup Iteration  29: 3787163.047 ops/s
# Warmup Iteration  30: 3806354.071 ops/s
Iteration   1: 3820500.119 ops/s
Iteration   2: 3811005.809 ops/s
Iteration   3: 3822271.974 ops/s
Iteration   4: 3798226.625 ops/s
Iteration   5: 3828137.484 ops/s
Iteration   6: 3816896.684 ops/s
Iteration   7: 3827579.157 ops/s
Iteration   8: 3813008.814 ops/s
Iteration   9: 3821362.036 ops/s
Iteration  10: 3836677.905 ops/s
Iteration  11: 3838293.834 ops/s
Iteration  12: 3773699.284 ops/s
Iteration  13: 3827592.194 ops/s
Iteration  14: 3809448.431 ops/s
Iteration  15: 3822238.570 ops/s
Iteration  16: 3830334.419 ops/s
Iteration  17: 3827818.465 ops/s
Iteration  18: 3830659.377 ops/s
Iteration  19: 3817065.577 ops/s
Iteration  20: 3834374.349 ops/s
Iteration  21: 3802093.744 ops/s
Iteration  22: 3815301.473 ops/s
Iteration  23: 3771970.208 ops/s
Iteration  24: 3806134.569 ops/s
Iteration  25: 3823811.156 ops/s
Iteration  26: 3808016.883 ops/s
Iteration  27: 3830148.959 ops/s
Iteration  28: 3827902.906 ops/s
Iteration  29: 3816720.404 ops/s
Iteration  30: 3811662.089 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_toList":
  3817365.116 ±(99.9%) 10533.992 ops/s [Average]
  (min, avg, max) = (3771970.208, 3817365.116, 3838293.834), stdev = 15766.785
  CI (99.9%): [3806831.124, 3827899.109] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_toList  thrpt   30  3817365.116 ± 10533.992  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2731110.582 ops/s
# Warmup Iteration   2: 6251745.559 ops/s
# Warmup Iteration   3: 6636559.332 ops/s
# Warmup Iteration   4: 5435257.303 ops/s
# Warmup Iteration   5: 6459523.437 ops/s
# Warmup Iteration   6: 6656327.206 ops/s
# Warmup Iteration   7: 6668936.759 ops/s
# Warmup Iteration   8: 6599740.437 ops/s
# Warmup Iteration   9: 6651477.463 ops/s
# Warmup Iteration  10: 6667368.174 ops/s
# Warmup Iteration  11: 6614478.923 ops/s
# Warmup Iteration  12: 6655517.875 ops/s
# Warmup Iteration  13: 6652812.199 ops/s
# Warmup Iteration  14: 6639946.480 ops/s
# Warmup Iteration  15: 6610414.923 ops/s
# Warmup Iteration  16: 6647214.568 ops/s
# Warmup Iteration  17: 6653383.751 ops/s
# Warmup Iteration  18: 6660789.378 ops/s
# Warmup Iteration  19: 6641751.588 ops/s
# Warmup Iteration  20: 6646218.989 ops/s
# Warmup Iteration  21: 6655006.807 ops/s
# Warmup Iteration  22: 6669319.373 ops/s
# Warmup Iteration  23: 6651913.802 ops/s
# Warmup Iteration  24: 6653301.437 ops/s
# Warmup Iteration  25: 6649131.151 ops/s
# Warmup Iteration  26: 6671430.965 ops/s
# Warmup Iteration  27: 6678360.185 ops/s
# Warmup Iteration  28: 6671192.436 ops/s
# Warmup Iteration  29: 6633297.716 ops/s
# Warmup Iteration  30: 6650631.681 ops/s
Iteration   1: 6651522.051 ops/s
Iteration   2: 6700086.136 ops/s
Iteration   3: 6614926.280 ops/s
Iteration   4: 6691269.114 ops/s
Iteration   5: 6656247.871 ops/s
Iteration   6: 6643530.546 ops/s
Iteration   7: 6646460.172 ops/s
Iteration   8: 6639989.889 ops/s
Iteration   9: 6653644.668 ops/s
Iteration  10: 6656182.445 ops/s
Iteration  11: 6654481.325 ops/s
Iteration  12: 6623448.680 ops/s
Iteration  13: 6682784.163 ops/s
Iteration  14: 6577315.130 ops/s
Iteration  15: 6677706.389 ops/s
Iteration  16: 6656435.830 ops/s
Iteration  17: 6690710.609 ops/s
Iteration  18: 6641846.155 ops/s
Iteration  19: 6652145.892 ops/s
Iteration  20: 6676905.697 ops/s
Iteration  21: 6634996.409 ops/s
Iteration  22: 6668040.321 ops/s
Iteration  23: 6662437.388 ops/s
Iteration  24: 6608176.241 ops/s
Iteration  25: 6605903.018 ops/s
Iteration  26: 6634063.685 ops/s
Iteration  27: 6667838.470 ops/s
Iteration  28: 6661217.022 ops/s
Iteration  29: 6628135.414 ops/s
Iteration  30: 6670505.316 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanIterableTest._Benchmark.benchmark_toSet":
  6650965.077 ±(99.9%) 18402.444 ops/s [Average]
  (min, avg, max) = (6577315.130, 6650965.077, 6700086.136), stdev = 27543.914
  CI (99.9%): [6632562.633, 6669367.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBooleanIterableTest._Benchmark.benchmark_toSet  thrpt   30  6650965.077 ± 18402.444  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 914441.208 ops/s
# Warmup Iteration   2: 1532566.332 ops/s
# Warmup Iteration   3: 4455961.560 ops/s
# Warmup Iteration   4: 3746479.230 ops/s
# Warmup Iteration   5: 4376495.118 ops/s
# Warmup Iteration   6: 4474184.517 ops/s
# Warmup Iteration   7: 4485678.427 ops/s
# Warmup Iteration   8: 4493832.963 ops/s
# Warmup Iteration   9: 4434886.392 ops/s
# Warmup Iteration  10: 4480097.204 ops/s
# Warmup Iteration  11: 4468464.679 ops/s
# Warmup Iteration  12: 4466715.405 ops/s
# Warmup Iteration  13: 4479254.927 ops/s
# Warmup Iteration  14: 4497892.201 ops/s
# Warmup Iteration  15: 4500305.244 ops/s
# Warmup Iteration  16: 4471732.101 ops/s
# Warmup Iteration  17: 4425734.540 ops/s
# Warmup Iteration  18: 4482117.544 ops/s
# Warmup Iteration  19: 4463606.688 ops/s
# Warmup Iteration  20: 4487007.606 ops/s
# Warmup Iteration  21: 4489963.455 ops/s
# Warmup Iteration  22: 4495007.579 ops/s
# Warmup Iteration  23: 4436847.975 ops/s
# Warmup Iteration  24: 4467163.052 ops/s
# Warmup Iteration  25: 4481045.094 ops/s
# Warmup Iteration  26: 4483260.537 ops/s
# Warmup Iteration  27: 4492847.396 ops/s
# Warmup Iteration  28: 4473458.110 ops/s
# Warmup Iteration  29: 4500581.121 ops/s
# Warmup Iteration  30: 4475811.019 ops/s
Iteration   1: 4472990.828 ops/s
Iteration   2: 4393909.936 ops/s
Iteration   3: 4409038.294 ops/s
Iteration   4: 4509382.906 ops/s
Iteration   5: 4494815.914 ops/s
Iteration   6: 4504432.342 ops/s
Iteration   7: 4483390.248 ops/s
Iteration   8: 4497519.709 ops/s
Iteration   9: 4494537.001 ops/s
Iteration  10: 4494182.154 ops/s
Iteration  11: 4490608.882 ops/s
Iteration  12: 4494970.549 ops/s
Iteration  13: 4479269.922 ops/s
Iteration  14: 4498452.338 ops/s
Iteration  15: 4482754.657 ops/s
Iteration  16: 4420836.033 ops/s
Iteration  17: 4490735.407 ops/s
Iteration  18: 4489075.696 ops/s
Iteration  19: 4481468.287 ops/s
Iteration  20: 4510746.924 ops/s
Iteration  21: 4468559.721 ops/s
Iteration  22: 4505332.332 ops/s
Iteration  23: 4492977.640 ops/s
Iteration  24: 4480539.375 ops/s
Iteration  25: 4491247.917 ops/s
Iteration  26: 4495666.035 ops/s
Iteration  27: 4483476.391 ops/s
Iteration  28: 4390674.055 ops/s
Iteration  29: 4494860.354 ops/s
Iteration  30: 4511685.655 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_add":
  4480271.250 ±(99.9%) 21760.937 ops/s [Average]
  (min, avg, max) = (4390674.055, 4480271.250, 4511685.655), stdev = 32570.749
  CI (99.9%): [4458510.313, 4502032.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_add  thrpt   30  4480271.250 ± 21760.937  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696592.748 ops/s
# Warmup Iteration   2: 840746.513 ops/s
# Warmup Iteration   3: 2870330.872 ops/s
# Warmup Iteration   4: 2873423.572 ops/s
# Warmup Iteration   5: 2838838.281 ops/s
# Warmup Iteration   6: 2413051.699 ops/s
# Warmup Iteration   7: 2873061.592 ops/s
# Warmup Iteration   8: 2863098.495 ops/s
# Warmup Iteration   9: 2857118.006 ops/s
# Warmup Iteration  10: 2882016.874 ops/s
# Warmup Iteration  11: 2859636.894 ops/s
# Warmup Iteration  12: 2879520.779 ops/s
# Warmup Iteration  13: 2866806.207 ops/s
# Warmup Iteration  14: 2850689.291 ops/s
# Warmup Iteration  15: 2871938.387 ops/s
# Warmup Iteration  16: 2879071.153 ops/s
# Warmup Iteration  17: 2864281.663 ops/s
# Warmup Iteration  18: 2881482.620 ops/s
# Warmup Iteration  19: 2885846.231 ops/s
# Warmup Iteration  20: 2877443.168 ops/s
# Warmup Iteration  21: 2865578.766 ops/s
# Warmup Iteration  22: 2871488.908 ops/s
# Warmup Iteration  23: 2852568.344 ops/s
# Warmup Iteration  24: 2870433.255 ops/s
# Warmup Iteration  25: 2839997.340 ops/s
# Warmup Iteration  26: 2869239.206 ops/s
# Warmup Iteration  27: 2849168.439 ops/s
# Warmup Iteration  28: 2848132.857 ops/s
# Warmup Iteration  29: 2841430.099 ops/s
# Warmup Iteration  30: 2848244.774 ops/s
Iteration   1: 2872148.549 ops/s
Iteration   2: 2859191.931 ops/s
Iteration   3: 2863812.223 ops/s
Iteration   4: 2852964.438 ops/s
Iteration   5: 2789482.900 ops/s
Iteration   6: 2883205.393 ops/s
Iteration   7: 2865063.803 ops/s
Iteration   8: 2873333.181 ops/s
Iteration   9: 2885183.232 ops/s
Iteration  10: 2875112.965 ops/s
Iteration  11: 2877710.732 ops/s
Iteration  12: 2871629.272 ops/s
Iteration  13: 2862087.877 ops/s
Iteration  14: 2890489.513 ops/s
Iteration  15: 2865313.086 ops/s
Iteration  16: 2856244.154 ops/s
Iteration  17: 2874223.367 ops/s
Iteration  18: 2881462.900 ops/s
Iteration  19: 2841750.965 ops/s
Iteration  20: 2882850.389 ops/s
Iteration  21: 2871994.554 ops/s
Iteration  22: 2873932.887 ops/s
Iteration  23: 2873087.244 ops/s
Iteration  24: 2877533.014 ops/s
Iteration  25: 2880215.869 ops/s
Iteration  26: 2871290.733 ops/s
Iteration  27: 2886159.236 ops/s
Iteration  28: 2826679.345 ops/s
Iteration  29: 2861481.031 ops/s
Iteration  30: 2865060.677 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAllArray":
  2867023.182 ±(99.9%) 13262.963 ops/s [Average]
  (min, avg, max) = (2789482.900, 2867023.182, 2890489.513), stdev = 19851.380
  CI (99.9%): [2853760.219, 2880286.145] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_addAllArray  thrpt   30  2867023.182 ± 13262.963  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 463804.630 ops/s
# Warmup Iteration   2: 705755.442 ops/s
# Warmup Iteration   3: 1686973.196 ops/s
# Warmup Iteration   4: 1683916.521 ops/s
# Warmup Iteration   5: 1407377.913 ops/s
# Warmup Iteration   6: 1686603.058 ops/s
# Warmup Iteration   7: 1694809.223 ops/s
# Warmup Iteration   8: 1687197.720 ops/s
# Warmup Iteration   9: 1676128.143 ops/s
# Warmup Iteration  10: 1680572.661 ops/s
# Warmup Iteration  11: 1689094.457 ops/s
# Warmup Iteration  12: 1685409.799 ops/s
# Warmup Iteration  13: 1690340.665 ops/s
# Warmup Iteration  14: 1684288.180 ops/s
# Warmup Iteration  15: 1687864.992 ops/s
# Warmup Iteration  16: 1683322.616 ops/s
# Warmup Iteration  17: 1680800.294 ops/s
# Warmup Iteration  18: 1685266.488 ops/s
# Warmup Iteration  19: 1682396.067 ops/s
# Warmup Iteration  20: 1677244.888 ops/s
# Warmup Iteration  21: 1693786.864 ops/s
# Warmup Iteration  22: 1687497.984 ops/s
# Warmup Iteration  23: 1689386.450 ops/s
# Warmup Iteration  24: 1654749.983 ops/s
# Warmup Iteration  25: 1685737.473 ops/s
# Warmup Iteration  26: 1668537.648 ops/s
# Warmup Iteration  27: 1691020.707 ops/s
# Warmup Iteration  28: 1683186.806 ops/s
# Warmup Iteration  29: 1693808.612 ops/s
# Warmup Iteration  30: 1688998.666 ops/s
Iteration   1: 1663436.481 ops/s
Iteration   2: 1687325.878 ops/s
Iteration   3: 1690466.014 ops/s
Iteration   4: 1691090.530 ops/s
Iteration   5: 1689548.059 ops/s
Iteration   6: 1685686.607 ops/s
Iteration   7: 1694720.314 ops/s
Iteration   8: 1695344.388 ops/s
Iteration   9: 1686784.516 ops/s
Iteration  10: 1688834.219 ops/s
Iteration  11: 1695440.300 ops/s
Iteration  12: 1690385.356 ops/s
Iteration  13: 1665316.755 ops/s
Iteration  14: 1691907.028 ops/s
Iteration  15: 1693574.842 ops/s
Iteration  16: 1641549.673 ops/s
Iteration  17: 1687777.688 ops/s
Iteration  18: 1692161.675 ops/s
Iteration  19: 1697641.778 ops/s
Iteration  20: 1685803.406 ops/s
Iteration  21: 1684010.441 ops/s
Iteration  22: 1695522.677 ops/s
Iteration  23: 1693310.699 ops/s
Iteration  24: 1665249.370 ops/s
Iteration  25: 1657392.579 ops/s
Iteration  26: 1695837.529 ops/s
Iteration  27: 1670628.682 ops/s
Iteration  28: 1686237.242 ops/s
Iteration  29: 1697825.968 ops/s
Iteration  30: 1693057.693 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAllIterable":
  1685128.946 ±(99.9%) 9133.311 ops/s [Average]
  (min, avg, max) = (1641549.673, 1685128.946, 1697825.968), stdev = 13670.310
  CI (99.9%): [1675995.636, 1694262.257] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_addAllIterable  thrpt   30  1685128.946 ± 9133.311  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 723718.455 ops/s
# Warmup Iteration   2: 733340.055 ops/s
# Warmup Iteration   3: 975854.428 ops/s
# Warmup Iteration   4: 984192.736 ops/s
# Warmup Iteration   5: 978255.642 ops/s
# Warmup Iteration   6: 987643.652 ops/s
# Warmup Iteration   7: 983665.841 ops/s
# Warmup Iteration   8: 987597.529 ops/s
# Warmup Iteration   9: 988572.484 ops/s
# Warmup Iteration  10: 985765.715 ops/s
# Warmup Iteration  11: 957705.380 ops/s
# Warmup Iteration  12: 857090.211 ops/s
# Warmup Iteration  13: 985830.302 ops/s
# Warmup Iteration  14: 986463.712 ops/s
# Warmup Iteration  15: 975135.346 ops/s
# Warmup Iteration  16: 979518.750 ops/s
# Warmup Iteration  17: 1039701.348 ops/s
# Warmup Iteration  18: 1039314.431 ops/s
# Warmup Iteration  19: 1046880.325 ops/s
# Warmup Iteration  20: 1045557.579 ops/s
# Warmup Iteration  21: 1046688.393 ops/s
# Warmup Iteration  22: 1042000.096 ops/s
# Warmup Iteration  23: 1044909.970 ops/s
# Warmup Iteration  24: 1042675.392 ops/s
# Warmup Iteration  25: 1043441.336 ops/s
# Warmup Iteration  26: 1034018.480 ops/s
# Warmup Iteration  27: 1046126.932 ops/s
# Warmup Iteration  28: 1042196.226 ops/s
# Warmup Iteration  29: 1037501.049 ops/s
# Warmup Iteration  30: 1044673.066 ops/s
Iteration   1: 1039519.899 ops/s
Iteration   2: 1044619.568 ops/s
Iteration   3: 1031219.968 ops/s
Iteration   4: 1036963.033 ops/s
Iteration   5: 1046993.763 ops/s
Iteration   6: 1044920.902 ops/s
Iteration   7: 1046711.160 ops/s
Iteration   8: 1032315.033 ops/s
Iteration   9: 1050415.322 ops/s
Iteration  10: 1042314.489 ops/s
Iteration  11: 1042864.730 ops/s
Iteration  12: 1044787.249 ops/s
Iteration  13: 1043614.357 ops/s
Iteration  14: 1041314.070 ops/s
Iteration  15: 1048475.841 ops/s
Iteration  16: 1045335.697 ops/s
Iteration  17: 1044472.733 ops/s
Iteration  18: 1040936.221 ops/s
Iteration  19: 1046073.621 ops/s
Iteration  20: 1041251.099 ops/s
Iteration  21: 1041077.270 ops/s
Iteration  22: 1044615.824 ops/s
Iteration  23: 1040584.932 ops/s
Iteration  24: 1047291.855 ops/s
Iteration  25: 1047729.993 ops/s
Iteration  26: 1049245.081 ops/s
Iteration  27: 1030306.883 ops/s
Iteration  28: 1044381.365 ops/s
Iteration  29: 1045725.901 ops/s
Iteration  30: 1017748.628 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size":
  1042127.550 ±(99.9%) 4526.226 ops/s [Average]
  (min, avg, max) = (1017748.628, 1042127.550, 1050415.322), stdev = 6774.643
  CI (99.9%): [1037601.323, 1046653.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size  thrpt   30  1042127.550 ± 4526.226  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size_empty_list$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size_empty_list

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 728889.546 ops/s
# Warmup Iteration   2: 743126.028 ops/s
# Warmup Iteration   3: 956269.909 ops/s
# Warmup Iteration   4: 977513.963 ops/s
# Warmup Iteration   5: 972919.171 ops/s
# Warmup Iteration   6: 974803.865 ops/s
# Warmup Iteration   7: 972339.290 ops/s
# Warmup Iteration   8: 976481.418 ops/s
# Warmup Iteration   9: 971251.413 ops/s
# Warmup Iteration  10: 971322.597 ops/s
# Warmup Iteration  11: 977448.804 ops/s
# Warmup Iteration  12: 852618.845 ops/s
# Warmup Iteration  13: 948280.647 ops/s
# Warmup Iteration  14: 975447.331 ops/s
# Warmup Iteration  15: 976369.574 ops/s
# Warmup Iteration  16: 975574.941 ops/s
# Warmup Iteration  17: 1040023.331 ops/s
# Warmup Iteration  18: 1040821.520 ops/s
# Warmup Iteration  19: 1038070.242 ops/s
# Warmup Iteration  20: 1016550.744 ops/s
# Warmup Iteration  21: 1037678.600 ops/s
# Warmup Iteration  22: 1019179.134 ops/s
# Warmup Iteration  23: 1030289.480 ops/s
# Warmup Iteration  24: 1038233.339 ops/s
# Warmup Iteration  25: 1039254.058 ops/s
# Warmup Iteration  26: 1034392.598 ops/s
# Warmup Iteration  27: 1040028.737 ops/s
# Warmup Iteration  28: 1039726.633 ops/s
# Warmup Iteration  29: 1035588.151 ops/s
# Warmup Iteration  30: 1030864.090 ops/s
Iteration   1: 1033161.172 ops/s
Iteration   2: 1031612.203 ops/s
Iteration   3: 1031841.979 ops/s
Iteration   4: 1024969.226 ops/s
Iteration   5: 1014310.218 ops/s
Iteration   6: 1021637.648 ops/s
Iteration   7: 1039777.391 ops/s
Iteration   8: 1022461.843 ops/s
Iteration   9: 1032668.379 ops/s
Iteration  10: 1041867.893 ops/s
Iteration  11: 1037192.110 ops/s
Iteration  12: 1027829.935 ops/s
Iteration  13: 1031781.079 ops/s
Iteration  14: 1037141.694 ops/s
Iteration  15: 1028127.856 ops/s
Iteration  16: 1036839.711 ops/s
Iteration  17: 1038335.908 ops/s
Iteration  18: 1040205.451 ops/s
Iteration  19: 1033580.105 ops/s
Iteration  20: 1033252.227 ops/s
Iteration  21: 1034825.219 ops/s
Iteration  22: 1034619.301 ops/s
Iteration  23: 1023471.695 ops/s
Iteration  24: 1036940.766 ops/s
Iteration  25: 1038844.555 ops/s
Iteration  26: 1041150.727 ops/s
Iteration  27: 1038985.550 ops/s
Iteration  28: 1033853.655 ops/s
Iteration  29: 1031912.203 ops/s
Iteration  30: 1039309.267 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size_empty_list":
  1033083.566 ±(99.9%) 4393.999 ops/s [Average]
  (min, avg, max) = (1014310.218, 1033083.566, 1041867.893), stdev = 6576.731
  CI (99.9%): [1028689.567, 1037477.564] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size_empty_list  thrpt   30  1033083.566 ± 4393.999  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAll_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAll_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 655673.232 ops/s
# Warmup Iteration   2: 671038.665 ops/s
# Warmup Iteration   3: 843100.110 ops/s
# Warmup Iteration   4: 882815.388 ops/s
# Warmup Iteration   5: 879707.031 ops/s
# Warmup Iteration   6: 881410.472 ops/s
# Warmup Iteration   7: 882660.107 ops/s
# Warmup Iteration   8: 874292.098 ops/s
# Warmup Iteration   9: 875674.760 ops/s
# Warmup Iteration  10: 878659.013 ops/s
# Warmup Iteration  11: 881702.073 ops/s
# Warmup Iteration  12: 879777.848 ops/s
# Warmup Iteration  13: 735523.450 ops/s
# Warmup Iteration  14: 884183.373 ops/s
# Warmup Iteration  15: 882578.334 ops/s
# Warmup Iteration  16: 884092.138 ops/s
# Warmup Iteration  17: 932330.030 ops/s
# Warmup Iteration  18: 926943.738 ops/s
# Warmup Iteration  19: 933840.060 ops/s
# Warmup Iteration  20: 930047.498 ops/s
# Warmup Iteration  21: 934486.696 ops/s
# Warmup Iteration  22: 932161.555 ops/s
# Warmup Iteration  23: 936025.984 ops/s
# Warmup Iteration  24: 920648.109 ops/s
# Warmup Iteration  25: 938067.289 ops/s
# Warmup Iteration  26: 932564.782 ops/s
# Warmup Iteration  27: 927384.691 ops/s
# Warmup Iteration  28: 932229.901 ops/s
# Warmup Iteration  29: 928720.447 ops/s
# Warmup Iteration  30: 930227.165 ops/s
Iteration   1: 918343.356 ops/s
Iteration   2: 934429.364 ops/s
Iteration   3: 932918.189 ops/s
Iteration   4: 938582.331 ops/s
Iteration   5: 937834.440 ops/s
Iteration   6: 936869.728 ops/s
Iteration   7: 939000.807 ops/s
Iteration   8: 935214.788 ops/s
Iteration   9: 933850.893 ops/s
Iteration  10: 923975.269 ops/s
Iteration  11: 929340.580 ops/s
Iteration  12: 934916.426 ops/s
Iteration  13: 934216.087 ops/s
Iteration  14: 934863.374 ops/s
Iteration  15: 925040.936 ops/s
Iteration  16: 928528.104 ops/s
Iteration  17: 941095.704 ops/s
Iteration  18: 939984.451 ops/s
Iteration  19: 930513.165 ops/s
Iteration  20: 943850.236 ops/s
Iteration  21: 930510.695 ops/s
Iteration  22: 937218.839 ops/s
Iteration  23: 934845.531 ops/s
Iteration  24: 922002.254 ops/s
Iteration  25: 938820.275 ops/s
Iteration  26: 942695.325 ops/s
Iteration  27: 940933.782 ops/s
Iteration  28: 932960.090 ops/s
Iteration  29: 939170.283 ops/s
Iteration  30: 938449.423 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAll_throws_index_negative":
  934365.824 ±(99.9%) 4122.321 ops/s [Average]
  (min, avg, max) = (918343.356, 934365.824, 943850.236), stdev = 6170.097
  CI (99.9%): [930243.503, 938488.145] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_addAll_throws_index_negative  thrpt   30  934365.824 ± 4122.321  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1320938.433 ops/s
# Warmup Iteration   2: 2165333.279 ops/s
# Warmup Iteration   3: 5903769.093 ops/s
# Warmup Iteration   4: 5034089.900 ops/s
# Warmup Iteration   5: 5738701.173 ops/s
# Warmup Iteration   6: 5894542.746 ops/s
# Warmup Iteration   7: 5886468.094 ops/s
# Warmup Iteration   8: 5809343.922 ops/s
# Warmup Iteration   9: 5937060.604 ops/s
# Warmup Iteration  10: 5842593.264 ops/s
# Warmup Iteration  11: 5905465.643 ops/s
# Warmup Iteration  12: 5908204.816 ops/s
# Warmup Iteration  13: 5858442.960 ops/s
# Warmup Iteration  14: 5894865.827 ops/s
# Warmup Iteration  15: 5900907.797 ops/s
# Warmup Iteration  16: 5895060.772 ops/s
# Warmup Iteration  17: 5901455.078 ops/s
# Warmup Iteration  18: 5901250.287 ops/s
# Warmup Iteration  19: 5849018.417 ops/s
# Warmup Iteration  20: 5860722.410 ops/s
# Warmup Iteration  21: 5905940.750 ops/s
# Warmup Iteration  22: 5935188.457 ops/s
# Warmup Iteration  23: 5903263.444 ops/s
# Warmup Iteration  24: 5788734.026 ops/s
# Warmup Iteration  25: 5924203.405 ops/s
# Warmup Iteration  26: 5904039.295 ops/s
# Warmup Iteration  27: 5906427.309 ops/s
# Warmup Iteration  28: 5919841.746 ops/s
# Warmup Iteration  29: 5897440.668 ops/s
# Warmup Iteration  30: 5911685.611 ops/s
Iteration   1: 5919359.957 ops/s
Iteration   2: 5932987.196 ops/s
Iteration   3: 5887376.022 ops/s
Iteration   4: 5902304.422 ops/s
Iteration   5: 5812523.484 ops/s
Iteration   6: 5901924.472 ops/s
Iteration   7: 5828219.957 ops/s
Iteration   8: 5870305.298 ops/s
Iteration   9: 5891522.249 ops/s
Iteration  10: 5808248.869 ops/s
Iteration  11: 5916059.787 ops/s
Iteration  12: 5916631.418 ops/s
Iteration  13: 5919609.786 ops/s
Iteration  14: 5920464.735 ops/s
Iteration  15: 5918741.575 ops/s
Iteration  16: 5875995.049 ops/s
Iteration  17: 5916087.801 ops/s
Iteration  18: 5926642.109 ops/s
Iteration  19: 5907478.624 ops/s
Iteration  20: 5917748.284 ops/s
Iteration  21: 5819941.684 ops/s
Iteration  22: 5841370.431 ops/s
Iteration  23: 5880630.879 ops/s
Iteration  24: 5938424.774 ops/s
Iteration  25: 5930890.990 ops/s
Iteration  26: 5891473.424 ops/s
Iteration  27: 5909357.961 ops/s
Iteration  28: 5912738.946 ops/s
Iteration  29: 5822285.206 ops/s
Iteration  30: 5897422.777 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAtIndex":
  5891158.939 ±(99.9%) 26050.546 ops/s [Average]
  (min, avg, max) = (5808248.869, 5891158.939, 5938424.774), stdev = 38991.234
  CI (99.9%): [5865108.392, 5917209.485] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_addAtIndex  thrpt   30  5891158.939 ± 26050.546  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 736961.571 ops/s
# Warmup Iteration   2: 748146.062 ops/s
# Warmup Iteration   3: 975711.179 ops/s
# Warmup Iteration   4: 980865.746 ops/s
# Warmup Iteration   5: 979995.700 ops/s
# Warmup Iteration   6: 985424.673 ops/s
# Warmup Iteration   7: 989180.504 ops/s
# Warmup Iteration   8: 981910.720 ops/s
# Warmup Iteration   9: 988301.164 ops/s
# Warmup Iteration  10: 989146.513 ops/s
# Warmup Iteration  11: 990334.560 ops/s
# Warmup Iteration  12: 827637.640 ops/s
# Warmup Iteration  13: 986278.204 ops/s
# Warmup Iteration  14: 989471.396 ops/s
# Warmup Iteration  15: 990274.672 ops/s
# Warmup Iteration  16: 983726.719 ops/s
# Warmup Iteration  17: 1043325.847 ops/s
# Warmup Iteration  18: 1046073.968 ops/s
# Warmup Iteration  19: 1050489.756 ops/s
# Warmup Iteration  20: 1049221.272 ops/s
# Warmup Iteration  21: 1049601.520 ops/s
# Warmup Iteration  22: 1044886.041 ops/s
# Warmup Iteration  23: 1041775.774 ops/s
# Warmup Iteration  24: 1045323.807 ops/s
# Warmup Iteration  25: 1033167.093 ops/s
# Warmup Iteration  26: 1047946.553 ops/s
# Warmup Iteration  27: 1038435.764 ops/s
# Warmup Iteration  28: 1051009.388 ops/s
# Warmup Iteration  29: 1048802.520 ops/s
# Warmup Iteration  30: 1050265.177 ops/s
Iteration   1: 1047172.722 ops/s
Iteration   2: 1046095.576 ops/s
Iteration   3: 1050026.809 ops/s
Iteration   4: 1036776.380 ops/s
Iteration   5: 1052728.351 ops/s
Iteration   6: 1046147.695 ops/s
Iteration   7: 1033510.477 ops/s
Iteration   8: 1050070.136 ops/s
Iteration   9: 1050901.292 ops/s
Iteration  10: 1040434.457 ops/s
Iteration  11: 1050529.826 ops/s
Iteration  12: 1048552.999 ops/s
Iteration  13: 1047441.820 ops/s
Iteration  14: 1054875.452 ops/s
Iteration  15: 1047543.202 ops/s
Iteration  16: 1047682.111 ops/s
Iteration  17: 1052448.110 ops/s
Iteration  18: 1032354.000 ops/s
Iteration  19: 1046012.072 ops/s
Iteration  20: 1042995.275 ops/s
Iteration  21: 1052270.521 ops/s
Iteration  22: 1045623.087 ops/s
Iteration  23: 1052861.422 ops/s
Iteration  24: 1048365.805 ops/s
Iteration  25: 1048511.826 ops/s
Iteration  26: 1054366.685 ops/s
Iteration  27: 1043338.299 ops/s
Iteration  28: 1046703.560 ops/s
Iteration  29: 1028310.144 ops/s
Iteration  30: 1053868.289 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_greater_than_size":
  1046617.280 ±(99.9%) 4412.403 ops/s [Average]
  (min, avg, max) = (1028310.144, 1046617.280, 1054875.452), stdev = 6604.277
  CI (99.9%): [1042204.877, 1051029.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_greater_than_size  thrpt   30  1046617.280 ± 4412.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 718393.833 ops/s
# Warmup Iteration   2: 733428.043 ops/s
# Warmup Iteration   3: 978184.162 ops/s
# Warmup Iteration   4: 981905.790 ops/s
# Warmup Iteration   5: 980547.999 ops/s
# Warmup Iteration   6: 971129.866 ops/s
# Warmup Iteration   7: 968881.959 ops/s
# Warmup Iteration   8: 981097.539 ops/s
# Warmup Iteration   9: 977401.619 ops/s
# Warmup Iteration  10: 965994.235 ops/s
# Warmup Iteration  11: 942645.191 ops/s
# Warmup Iteration  12: 862392.668 ops/s
# Warmup Iteration  13: 980112.803 ops/s
# Warmup Iteration  14: 976319.850 ops/s
# Warmup Iteration  15: 983717.441 ops/s
# Warmup Iteration  16: 979235.025 ops/s
# Warmup Iteration  17: 1042779.774 ops/s
# Warmup Iteration  18: 1035198.730 ops/s
# Warmup Iteration  19: 1037675.402 ops/s
# Warmup Iteration  20: 1039578.085 ops/s
# Warmup Iteration  21: 1043679.018 ops/s
# Warmup Iteration  22: 1038516.995 ops/s
# Warmup Iteration  23: 1040052.483 ops/s
# Warmup Iteration  24: 1035949.656 ops/s
# Warmup Iteration  25: 1039971.327 ops/s
# Warmup Iteration  26: 1041034.381 ops/s
# Warmup Iteration  27: 1041549.378 ops/s
# Warmup Iteration  28: 1031375.030 ops/s
# Warmup Iteration  29: 1038108.146 ops/s
# Warmup Iteration  30: 1037226.598 ops/s
Iteration   1: 1042786.691 ops/s
Iteration   2: 1039222.329 ops/s
Iteration   3: 1026422.379 ops/s
Iteration   4: 1050705.279 ops/s
Iteration   5: 1039669.452 ops/s
Iteration   6: 1038597.290 ops/s
Iteration   7: 1048498.188 ops/s
Iteration   8: 1040074.458 ops/s
Iteration   9: 1045969.084 ops/s
Iteration  10: 1044522.481 ops/s
Iteration  11: 1041903.020 ops/s
Iteration  12: 1041137.867 ops/s
Iteration  13: 1035566.024 ops/s
Iteration  14: 1051330.229 ops/s
Iteration  15: 1040849.118 ops/s
Iteration  16: 1037058.369 ops/s
Iteration  17: 1036021.568 ops/s
Iteration  18: 1041829.667 ops/s
Iteration  19: 1037107.835 ops/s
Iteration  20: 1040971.801 ops/s
Iteration  21: 1034425.066 ops/s
Iteration  22: 1037990.090 ops/s
Iteration  23: 1037679.538 ops/s
Iteration  24: 1045969.064 ops/s
Iteration  25: 1049537.091 ops/s
Iteration  26: 1047867.756 ops/s
Iteration  27: 1044689.676 ops/s
Iteration  28: 1024808.762 ops/s
Iteration  29: 1041805.390 ops/s
Iteration  30: 1045925.469 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_negative":
  1041031.368 ±(99.9%) 4145.970 ops/s [Average]
  (min, avg, max) = (1024808.762, 1041031.368, 1051330.229), stdev = 6205.493
  CI (99.9%): [1036885.398, 1045177.338] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_negative  thrpt   30  1041031.368 ± 4145.970  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3371302.282 ops/s
# Warmup Iteration   2: 6269553.383 ops/s
# Warmup Iteration   3: 6399257.554 ops/s
# Warmup Iteration   4: 6882879.429 ops/s
# Warmup Iteration   5: 6818804.562 ops/s
# Warmup Iteration   6: 6903853.508 ops/s
# Warmup Iteration   7: 6881122.442 ops/s
# Warmup Iteration   8: 6895234.889 ops/s
# Warmup Iteration   9: 6791140.212 ops/s
# Warmup Iteration  10: 6867712.639 ops/s
# Warmup Iteration  11: 6912177.130 ops/s
# Warmup Iteration  12: 6849875.429 ops/s
# Warmup Iteration  13: 6887924.724 ops/s
# Warmup Iteration  14: 6886633.829 ops/s
# Warmup Iteration  15: 6851594.328 ops/s
# Warmup Iteration  16: 6873967.507 ops/s
# Warmup Iteration  17: 6876485.362 ops/s
# Warmup Iteration  18: 6905967.561 ops/s
# Warmup Iteration  19: 6869669.070 ops/s
# Warmup Iteration  20: 6913099.216 ops/s
# Warmup Iteration  21: 6882689.399 ops/s
# Warmup Iteration  22: 6902467.033 ops/s
# Warmup Iteration  23: 6873271.945 ops/s
# Warmup Iteration  24: 6889901.521 ops/s
# Warmup Iteration  25: 6826890.529 ops/s
# Warmup Iteration  26: 6865609.190 ops/s
# Warmup Iteration  27: 6821573.448 ops/s
# Warmup Iteration  28: 6857723.733 ops/s
# Warmup Iteration  29: 6875527.080 ops/s
# Warmup Iteration  30: 6810138.898 ops/s
Iteration   1: 6883755.354 ops/s
Iteration   2: 6820270.042 ops/s
Iteration   3: 6887211.728 ops/s
Iteration   4: 6866641.581 ops/s
Iteration   5: 6876718.205 ops/s
Iteration   6: 6848487.929 ops/s
Iteration   7: 6737463.060 ops/s
Iteration   8: 6834334.876 ops/s
Iteration   9: 6816696.265 ops/s
Iteration  10: 6857623.926 ops/s
Iteration  11: 6867354.686 ops/s
Iteration  12: 6867498.886 ops/s
Iteration  13: 6861822.532 ops/s
Iteration  14: 6784560.861 ops/s
Iteration  15: 6886430.964 ops/s
Iteration  16: 6882218.146 ops/s
Iteration  17: 6870759.559 ops/s
Iteration  18: 6909718.831 ops/s
Iteration  19: 6847138.788 ops/s
Iteration  20: 6920670.371 ops/s
Iteration  21: 6932541.634 ops/s
Iteration  22: 6813903.606 ops/s
Iteration  23: 6911174.023 ops/s
Iteration  24: 6916459.812 ops/s
Iteration  25: 6859586.258 ops/s
Iteration  26: 6906117.809 ops/s
Iteration  27: 6903405.877 ops/s
Iteration  28: 6906793.411 ops/s
Iteration  29: 6918807.621 ops/s
Iteration  30: 6861715.145 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_allSatisfy":
  6868596.060 ±(99.9%) 29086.438 ops/s [Average]
  (min, avg, max) = (6737463.060, 6868596.060, 6932541.634), stdev = 43535.215
  CI (99.9%): [6839509.621, 6897682.498] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_allSatisfy  thrpt   30  6868596.060 ± 29086.438  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3781683.051 ops/s
# Warmup Iteration   2: 6646687.709 ops/s
# Warmup Iteration   3: 7663058.035 ops/s
# Warmup Iteration   4: 7734091.745 ops/s
# Warmup Iteration   5: 7731888.536 ops/s
# Warmup Iteration   6: 7679374.360 ops/s
# Warmup Iteration   7: 7722579.960 ops/s
# Warmup Iteration   8: 7758189.009 ops/s
# Warmup Iteration   9: 7726521.822 ops/s
# Warmup Iteration  10: 7733798.590 ops/s
# Warmup Iteration  11: 7728486.618 ops/s
# Warmup Iteration  12: 7685261.397 ops/s
# Warmup Iteration  13: 7679743.385 ops/s
# Warmup Iteration  14: 7677064.906 ops/s
# Warmup Iteration  15: 7717777.732 ops/s
# Warmup Iteration  16: 7687525.953 ops/s
# Warmup Iteration  17: 7735292.629 ops/s
# Warmup Iteration  18: 7695202.067 ops/s
# Warmup Iteration  19: 7660102.735 ops/s
# Warmup Iteration  20: 7673611.347 ops/s
# Warmup Iteration  21: 7715836.800 ops/s
# Warmup Iteration  22: 7652435.510 ops/s
# Warmup Iteration  23: 7571751.151 ops/s
# Warmup Iteration  24: 7695343.774 ops/s
# Warmup Iteration  25: 7657563.192 ops/s
# Warmup Iteration  26: 7702486.909 ops/s
# Warmup Iteration  27: 7641887.138 ops/s
# Warmup Iteration  28: 7656282.305 ops/s
# Warmup Iteration  29: 7588388.281 ops/s
# Warmup Iteration  30: 7686331.550 ops/s
Iteration   1: 7645324.107 ops/s
Iteration   2: 7545418.570 ops/s
Iteration   3: 7665905.161 ops/s
Iteration   4: 7596382.637 ops/s
Iteration   5: 7690146.426 ops/s
Iteration   6: 7535658.475 ops/s
Iteration   7: 7705764.977 ops/s
Iteration   8: 7700260.478 ops/s
Iteration   9: 7703283.394 ops/s
Iteration  10: 7693225.839 ops/s
Iteration  11: 7715519.650 ops/s
Iteration  12: 7693601.953 ops/s
Iteration  13: 7723249.564 ops/s
Iteration  14: 7666122.187 ops/s
Iteration  15: 7652097.445 ops/s
Iteration  16: 7743055.349 ops/s
Iteration  17: 7716463.334 ops/s
Iteration  18: 7685456.219 ops/s
Iteration  19: 7681224.534 ops/s
Iteration  20: 7724599.291 ops/s
Iteration  21: 7564556.377 ops/s
Iteration  22: 7670797.401 ops/s
Iteration  23: 7564291.110 ops/s
Iteration  24: 7557294.028 ops/s
Iteration  25: 7722176.180 ops/s
Iteration  26: 7644013.440 ops/s
Iteration  27: 7677379.232 ops/s
Iteration  28: 7708414.800 ops/s
Iteration  29: 7755010.488 ops/s
Iteration  30: 7736108.923 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_anySatisfy":
  7669426.719 ±(99.9%) 41522.919 ops/s [Average]
  (min, avg, max) = (7535658.475, 7669426.719, 7755010.488), stdev = 62149.555
  CI (99.9%): [7627903.800, 7710949.638] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_anySatisfy  thrpt   30  7669426.719 ± 41522.919  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 484110.566 ops/s
# Warmup Iteration   2: 1083536.534 ops/s
# Warmup Iteration   3: 1087557.612 ops/s
# Warmup Iteration   4: 899593.949 ops/s
# Warmup Iteration   5: 1073354.679 ops/s
# Warmup Iteration   6: 1079165.134 ops/s
# Warmup Iteration   7: 1084444.173 ops/s
# Warmup Iteration   8: 1083644.772 ops/s
# Warmup Iteration   9: 1078837.889 ops/s
# Warmup Iteration  10: 1076367.014 ops/s
# Warmup Iteration  11: 1077715.149 ops/s
# Warmup Iteration  12: 1082002.163 ops/s
# Warmup Iteration  13: 1078967.648 ops/s
# Warmup Iteration  14: 1081190.165 ops/s
# Warmup Iteration  15: 1095256.514 ops/s
# Warmup Iteration  16: 1086171.041 ops/s
# Warmup Iteration  17: 1078777.405 ops/s
# Warmup Iteration  18: 1088936.900 ops/s
# Warmup Iteration  19: 1092465.595 ops/s
# Warmup Iteration  20: 1080645.216 ops/s
# Warmup Iteration  21: 1087099.963 ops/s
# Warmup Iteration  22: 1080578.242 ops/s
# Warmup Iteration  23: 1086653.474 ops/s
# Warmup Iteration  24: 1085931.143 ops/s
# Warmup Iteration  25: 1092119.452 ops/s
# Warmup Iteration  26: 1093373.976 ops/s
# Warmup Iteration  27: 1089489.074 ops/s
# Warmup Iteration  28: 1083220.314 ops/s
# Warmup Iteration  29: 1086890.195 ops/s
# Warmup Iteration  30: 1081442.609 ops/s
Iteration   1: 1087636.806 ops/s
Iteration   2: 1085007.549 ops/s
Iteration   3: 1094625.761 ops/s
Iteration   4: 1052534.072 ops/s
Iteration   5: 1097944.233 ops/s
Iteration   6: 1075526.268 ops/s
Iteration   7: 1092555.242 ops/s
Iteration   8: 1080079.735 ops/s
Iteration   9: 1093721.400 ops/s
Iteration  10: 1073550.818 ops/s
Iteration  11: 1094227.920 ops/s
Iteration  12: 1063794.946 ops/s
Iteration  13: 1077660.578 ops/s
Iteration  14: 1086252.238 ops/s
Iteration  15: 1097074.713 ops/s
Iteration  16: 1093719.698 ops/s
Iteration  17: 1095234.324 ops/s
Iteration  18: 1087821.819 ops/s
Iteration  19: 1083036.941 ops/s
Iteration  20: 1077304.963 ops/s
Iteration  21: 1085975.060 ops/s
Iteration  22: 1087284.889 ops/s
Iteration  23: 1093690.028 ops/s
Iteration  24: 1089911.060 ops/s
Iteration  25: 1092440.989 ops/s
Iteration  26: 1088981.613 ops/s
Iteration  27: 1066510.129 ops/s
Iteration  28: 1072350.659 ops/s
Iteration  29: 1084980.337 ops/s
Iteration  30: 1086676.596 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_appendString":
  1084603.713 ±(99.9%) 7196.056 ops/s [Average]
  (min, avg, max) = (1052534.072, 1084603.713, 1097944.233), stdev = 10770.719
  CI (99.9%): [1077407.657, 1091799.769] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_appendString  thrpt   30  1084603.713 ± 7196.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3249644.548 ops/s
# Warmup Iteration   2: 4823660.717 ops/s
# Warmup Iteration   3: 8339803.018 ops/s
# Warmup Iteration   4: 8260937.185 ops/s
# Warmup Iteration   5: 7890420.403 ops/s
# Warmup Iteration   6: 7457394.136 ops/s
# Warmup Iteration   7: 8399067.242 ops/s
# Warmup Iteration   8: 8415934.564 ops/s
# Warmup Iteration   9: 8355062.478 ops/s
# Warmup Iteration  10: 8366970.556 ops/s
# Warmup Iteration  11: 8387591.323 ops/s
# Warmup Iteration  12: 8415642.986 ops/s
# Warmup Iteration  13: 8424532.396 ops/s
# Warmup Iteration  14: 8383781.314 ops/s
# Warmup Iteration  15: 8379980.898 ops/s
# Warmup Iteration  16: 8426654.176 ops/s
# Warmup Iteration  17: 8411837.867 ops/s
# Warmup Iteration  18: 8350725.126 ops/s
# Warmup Iteration  19: 8411482.208 ops/s
# Warmup Iteration  20: 8360327.155 ops/s
# Warmup Iteration  21: 8286314.707 ops/s
# Warmup Iteration  22: 8405291.744 ops/s
# Warmup Iteration  23: 8395664.917 ops/s
# Warmup Iteration  24: 8425149.644 ops/s
# Warmup Iteration  25: 8361417.193 ops/s
# Warmup Iteration  26: 8452948.481 ops/s
# Warmup Iteration  27: 8421653.300 ops/s
# Warmup Iteration  28: 8393007.708 ops/s
# Warmup Iteration  29: 8362393.138 ops/s
# Warmup Iteration  30: 8399582.552 ops/s
Iteration   1: 8454029.150 ops/s
Iteration   2: 8476457.698 ops/s
Iteration   3: 8404878.554 ops/s
Iteration   4: 8402647.958 ops/s
Iteration   5: 8420632.151 ops/s
Iteration   6: 8450222.780 ops/s
Iteration   7: 8384544.609 ops/s
Iteration   8: 8439399.011 ops/s
Iteration   9: 8349149.702 ops/s
Iteration  10: 8401813.874 ops/s
Iteration  11: 8372315.535 ops/s
Iteration  12: 8149092.306 ops/s
Iteration  13: 8412145.714 ops/s
Iteration  14: 8425386.607 ops/s
Iteration  15: 8429527.785 ops/s
Iteration  16: 8419549.895 ops/s
Iteration  17: 8402921.273 ops/s
Iteration  18: 8431862.094 ops/s
Iteration  19: 8421390.464 ops/s
Iteration  20: 8419662.341 ops/s
Iteration  21: 8419703.872 ops/s
Iteration  22: 8403795.309 ops/s
Iteration  23: 8381410.715 ops/s
Iteration  24: 8401608.886 ops/s
Iteration  25: 8448824.132 ops/s
Iteration  26: 8378184.073 ops/s
Iteration  27: 8400363.566 ops/s
Iteration  28: 8445553.936 ops/s
Iteration  29: 8396432.727 ops/s
Iteration  30: 8343987.939 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_asLazy":
  8402916.488 ±(99.9%) 37700.332 ops/s [Average]
  (min, avg, max) = (8149092.306, 8402916.488, 8476457.698), stdev = 56428.087
  CI (99.9%): [8365216.156, 8440616.821] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_asLazy  thrpt   30  8402916.488 ± 37700.332  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1233110.170 ops/s
# Warmup Iteration   2: 2112999.094 ops/s
# Warmup Iteration   3: 5062576.717 ops/s
# Warmup Iteration   4: 4225971.919 ops/s
# Warmup Iteration   5: 5020515.276 ops/s
# Warmup Iteration   6: 5079352.558 ops/s
# Warmup Iteration   7: 5064152.442 ops/s
# Warmup Iteration   8: 5010888.107 ops/s
# Warmup Iteration   9: 5060694.596 ops/s
# Warmup Iteration  10: 5018973.784 ops/s
# Warmup Iteration  11: 5061426.653 ops/s
# Warmup Iteration  12: 4989311.085 ops/s
# Warmup Iteration  13: 5025587.330 ops/s
# Warmup Iteration  14: 5073227.785 ops/s
# Warmup Iteration  15: 5058595.190 ops/s
# Warmup Iteration  16: 5028147.623 ops/s
# Warmup Iteration  17: 5041765.744 ops/s
# Warmup Iteration  18: 5025518.463 ops/s
# Warmup Iteration  19: 4999946.917 ops/s
# Warmup Iteration  20: 4976746.072 ops/s
# Warmup Iteration  21: 5030233.164 ops/s
# Warmup Iteration  22: 5062621.599 ops/s
# Warmup Iteration  23: 5042150.741 ops/s
# Warmup Iteration  24: 5024191.762 ops/s
# Warmup Iteration  25: 5046112.773 ops/s
# Warmup Iteration  26: 5048694.539 ops/s
# Warmup Iteration  27: 5068934.315 ops/s
# Warmup Iteration  28: 5037673.039 ops/s
# Warmup Iteration  29: 5076570.479 ops/s
# Warmup Iteration  30: 5032036.342 ops/s
Iteration   1: 5068718.706 ops/s
Iteration   2: 5046551.372 ops/s
Iteration   3: 5049587.356 ops/s
Iteration   4: 5042208.270 ops/s
Iteration   5: 5074235.578 ops/s
Iteration   6: 4980558.396 ops/s
Iteration   7: 5045033.315 ops/s
Iteration   8: 5082653.840 ops/s
Iteration   9: 4985378.299 ops/s
Iteration  10: 5090906.597 ops/s
Iteration  11: 5052198.741 ops/s
Iteration  12: 5074098.318 ops/s
Iteration  13: 5050153.446 ops/s
Iteration  14: 5039308.993 ops/s
Iteration  15: 5066359.841 ops/s
Iteration  16: 4968902.651 ops/s
Iteration  17: 5071569.899 ops/s
Iteration  18: 5074341.495 ops/s
Iteration  19: 5045357.858 ops/s
Iteration  20: 4977803.059 ops/s
Iteration  21: 5058922.770 ops/s
Iteration  22: 5072577.870 ops/s
Iteration  23: 5015278.174 ops/s
Iteration  24: 4952667.638 ops/s
Iteration  25: 5042399.633 ops/s
Iteration  26: 5047133.007 ops/s
Iteration  27: 4952251.743 ops/s
Iteration  28: 5069467.265 ops/s
Iteration  29: 5068942.463 ops/s
Iteration  30: 4965240.112 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_asSynchronized":
  5037693.557 ±(99.9%) 27984.060 ops/s [Average]
  (min, avg, max) = (4952251.743, 5037693.557, 5090906.597), stdev = 41885.227
  CI (99.9%): [5009709.497, 5065677.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_asSynchronized  thrpt   30  5037693.557 ± 27984.060  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1255851.101 ops/s
# Warmup Iteration   2: 2632901.543 ops/s
# Warmup Iteration   3: 4968713.869 ops/s
# Warmup Iteration   4: 4168804.919 ops/s
# Warmup Iteration   5: 4975114.615 ops/s
# Warmup Iteration   6: 4926335.897 ops/s
# Warmup Iteration   7: 4970306.426 ops/s
# Warmup Iteration   8: 4974743.495 ops/s
# Warmup Iteration   9: 4968728.748 ops/s
# Warmup Iteration  10: 4978941.612 ops/s
# Warmup Iteration  11: 4951175.292 ops/s
# Warmup Iteration  12: 4952290.322 ops/s
# Warmup Iteration  13: 4978436.095 ops/s
# Warmup Iteration  14: 4986383.637 ops/s
# Warmup Iteration  15: 4956853.940 ops/s
# Warmup Iteration  16: 4899423.538 ops/s
# Warmup Iteration  17: 4961372.531 ops/s
# Warmup Iteration  18: 4969342.557 ops/s
# Warmup Iteration  19: 4984839.037 ops/s
# Warmup Iteration  20: 4978575.003 ops/s
# Warmup Iteration  21: 4973937.523 ops/s
# Warmup Iteration  22: 4953922.450 ops/s
# Warmup Iteration  23: 4977130.156 ops/s
# Warmup Iteration  24: 4941539.713 ops/s
# Warmup Iteration  25: 4940777.845 ops/s
# Warmup Iteration  26: 5005700.437 ops/s
# Warmup Iteration  27: 4975936.192 ops/s
# Warmup Iteration  28: 4984414.636 ops/s
# Warmup Iteration  29: 4990064.251 ops/s
# Warmup Iteration  30: 4939093.704 ops/s
Iteration   1: 4986127.681 ops/s
Iteration   2: 4977470.642 ops/s
Iteration   3: 4913007.106 ops/s
Iteration   4: 4985612.409 ops/s
Iteration   5: 4992478.441 ops/s
Iteration   6: 4983906.994 ops/s
Iteration   7: 5005482.507 ops/s
Iteration   8: 5012409.586 ops/s
Iteration   9: 4907326.807 ops/s
Iteration  10: 4964020.262 ops/s
Iteration  11: 4910753.127 ops/s
Iteration  12: 4987134.697 ops/s
Iteration  13: 4985013.607 ops/s
Iteration  14: 4979445.324 ops/s
Iteration  15: 4980195.007 ops/s
Iteration  16: 5001515.882 ops/s
Iteration  17: 5007645.558 ops/s
Iteration  18: 4985321.643 ops/s
Iteration  19: 4989384.737 ops/s
Iteration  20: 4910222.508 ops/s
Iteration  21: 4976480.255 ops/s
Iteration  22: 5008791.551 ops/s
Iteration  23: 5005566.263 ops/s
Iteration  24: 4918558.090 ops/s
Iteration  25: 5014349.900 ops/s
Iteration  26: 4985765.902 ops/s
Iteration  27: 4965991.703 ops/s
Iteration  28: 4914601.426 ops/s
Iteration  29: 4893886.586 ops/s
Iteration  30: 4986322.997 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_asUnmodifiable":
  4971159.640 ±(99.9%) 24539.369 ops/s [Average]
  (min, avg, max) = (4893886.586, 4971159.640, 5014349.900), stdev = 36729.375
  CI (99.9%): [4946620.271, 4995699.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  4971159.640 ± 24539.369  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16384860.352 ops/s
# Warmup Iteration   2: 30594056.702 ops/s
# Warmup Iteration   3: 27939078.409 ops/s
# Warmup Iteration   4: 31665050.170 ops/s
# Warmup Iteration   5: 31927392.419 ops/s
# Warmup Iteration   6: 31898878.605 ops/s
# Warmup Iteration   7: 31548281.370 ops/s
# Warmup Iteration   8: 31751654.536 ops/s
# Warmup Iteration   9: 31762462.237 ops/s
# Warmup Iteration  10: 31964580.938 ops/s
# Warmup Iteration  11: 31893282.547 ops/s
# Warmup Iteration  12: 32039224.852 ops/s
# Warmup Iteration  13: 31961427.206 ops/s
# Warmup Iteration  14: 31789343.920 ops/s
# Warmup Iteration  15: 31747612.122 ops/s
# Warmup Iteration  16: 31697931.910 ops/s
# Warmup Iteration  17: 31905073.788 ops/s
# Warmup Iteration  18: 31831927.688 ops/s
# Warmup Iteration  19: 32064895.038 ops/s
# Warmup Iteration  20: 31396254.515 ops/s
# Warmup Iteration  21: 31909280.987 ops/s
# Warmup Iteration  22: 31989396.018 ops/s
# Warmup Iteration  23: 31896789.301 ops/s
# Warmup Iteration  24: 31949738.415 ops/s
# Warmup Iteration  25: 31893276.147 ops/s
# Warmup Iteration  26: 32053013.290 ops/s
# Warmup Iteration  27: 31789072.502 ops/s
# Warmup Iteration  28: 31837500.909 ops/s
# Warmup Iteration  29: 31814815.131 ops/s
# Warmup Iteration  30: 31790125.699 ops/s
Iteration   1: 32064824.776 ops/s
Iteration   2: 31851605.622 ops/s
Iteration   3: 31579178.921 ops/s
Iteration   4: 31882968.668 ops/s
Iteration   5: 31726275.009 ops/s
Iteration   6: 31965161.830 ops/s
Iteration   7: 32199771.841 ops/s
Iteration   8: 31971874.012 ops/s
Iteration   9: 31744356.793 ops/s
Iteration  10: 31689965.692 ops/s
Iteration  11: 32019096.186 ops/s
Iteration  12: 32029937.415 ops/s
Iteration  13: 31260720.358 ops/s
Iteration  14: 32060720.991 ops/s
Iteration  15: 32132494.707 ops/s
Iteration  16: 31283423.985 ops/s
Iteration  17: 31228264.105 ops/s
Iteration  18: 31918977.035 ops/s
Iteration  19: 32040910.085 ops/s
Iteration  20: 32054838.586 ops/s
Iteration  21: 31915152.270 ops/s
Iteration  22: 31841410.003 ops/s
Iteration  23: 31972072.199 ops/s
Iteration  24: 32072015.627 ops/s
Iteration  25: 31847536.502 ops/s
Iteration  26: 31894486.018 ops/s
Iteration  27: 30487070.007 ops/s
Iteration  28: 31574123.207 ops/s
Iteration  29: 31816144.775 ops/s
Iteration  30: 31939741.042 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_booleanIterator":
  31802170.609 ±(99.9%) 235104.069 ops/s [Average]
  (min, avg, max) = (30487070.007, 31802170.609, 32199771.841), stdev = 351892.730
  CI (99.9%): [31567066.540, 32037274.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_booleanIterator  thrpt   30  31802170.609 ± 235104.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 536556.480 ops/s
# Warmup Iteration   2: 715614.616 ops/s
# Warmup Iteration   3: 859552.892 ops/s
# Warmup Iteration   4: 859909.018 ops/s
# Warmup Iteration   5: 859564.004 ops/s
# Warmup Iteration   6: 854404.115 ops/s
# Warmup Iteration   7: 860240.691 ops/s
# Warmup Iteration   8: 721735.970 ops/s
# Warmup Iteration   9: 859495.626 ops/s
# Warmup Iteration  10: 858801.138 ops/s
# Warmup Iteration  11: 853684.327 ops/s
# Warmup Iteration  12: 862704.360 ops/s
# Warmup Iteration  13: 858202.401 ops/s
# Warmup Iteration  14: 841977.874 ops/s
# Warmup Iteration  15: 859828.657 ops/s
# Warmup Iteration  16: 858912.183 ops/s
# Warmup Iteration  17: 904989.964 ops/s
# Warmup Iteration  18: 914930.004 ops/s
# Warmup Iteration  19: 908316.275 ops/s
# Warmup Iteration  20: 907856.675 ops/s
# Warmup Iteration  21: 898478.420 ops/s
# Warmup Iteration  22: 908230.564 ops/s
# Warmup Iteration  23: 906738.070 ops/s
# Warmup Iteration  24: 909908.074 ops/s
# Warmup Iteration  25: 906409.653 ops/s
# Warmup Iteration  26: 909200.952 ops/s
# Warmup Iteration  27: 904436.030 ops/s
# Warmup Iteration  28: 905479.215 ops/s
# Warmup Iteration  29: 906036.696 ops/s
# Warmup Iteration  30: 903646.364 ops/s
Iteration   1: 905977.843 ops/s
Iteration   2: 912968.856 ops/s
Iteration   3: 894428.028 ops/s
Iteration   4: 896775.668 ops/s
Iteration   5: 910263.552 ops/s
Iteration   6: 910636.683 ops/s
Iteration   7: 911197.292 ops/s
Iteration   8: 906274.034 ops/s
Iteration   9: 913422.183 ops/s
Iteration  10: 904081.958 ops/s
Iteration  11: 894223.161 ops/s
Iteration  12: 896423.522 ops/s
Iteration  13: 907045.799 ops/s
Iteration  14: 910581.070 ops/s
Iteration  15: 909816.205 ops/s
Iteration  16: 903260.066 ops/s
Iteration  17: 907939.112 ops/s
Iteration  18: 908647.306 ops/s
Iteration  19: 888936.793 ops/s
Iteration  20: 899273.779 ops/s
Iteration  21: 903813.971 ops/s
Iteration  22: 908899.922 ops/s
Iteration  23: 911804.748 ops/s
Iteration  24: 901806.452 ops/s
Iteration  25: 906620.199 ops/s
Iteration  26: 910952.000 ops/s
Iteration  27: 896521.494 ops/s
Iteration  28: 912274.244 ops/s
Iteration  29: 906287.489 ops/s
Iteration  30: 908132.757 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_booleanIterator_with_remove":
  905309.540 ±(99.9%) 4340.032 ops/s [Average]
  (min, avg, max) = (888936.793, 905309.540, 913422.183), stdev = 6495.957
  CI (99.9%): [900969.507, 909649.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  905309.540 ± 4340.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 130219.128 ops/s
# Warmup Iteration   2: 214312.598 ops/s
# Warmup Iteration   3: 252468.678 ops/s
# Warmup Iteration   4: 254068.831 ops/s
# Warmup Iteration   5: 253214.275 ops/s
# Warmup Iteration   6: 235345.405 ops/s
# Warmup Iteration   7: 231327.483 ops/s
# Warmup Iteration   8: 254130.736 ops/s
# Warmup Iteration   9: 254965.831 ops/s
# Warmup Iteration  10: 253379.342 ops/s
# Warmup Iteration  11: 253970.983 ops/s
# Warmup Iteration  12: 255225.518 ops/s
# Warmup Iteration  13: 251291.061 ops/s
# Warmup Iteration  14: 254095.469 ops/s
# Warmup Iteration  15: 255281.308 ops/s
# Warmup Iteration  16: 254330.546 ops/s
# Warmup Iteration  17: 263795.822 ops/s
# Warmup Iteration  18: 260991.591 ops/s
# Warmup Iteration  19: 263706.137 ops/s
# Warmup Iteration  20: 262346.368 ops/s
# Warmup Iteration  21: 259508.304 ops/s
# Warmup Iteration  22: 264040.223 ops/s
# Warmup Iteration  23: 260960.614 ops/s
# Warmup Iteration  24: 264021.105 ops/s
# Warmup Iteration  25: 263718.237 ops/s
# Warmup Iteration  26: 263928.516 ops/s
# Warmup Iteration  27: 264156.553 ops/s
# Warmup Iteration  28: 264090.042 ops/s
# Warmup Iteration  29: 261681.257 ops/s
# Warmup Iteration  30: 263734.013 ops/s
Iteration   1: 263990.833 ops/s
Iteration   2: 265118.116 ops/s
Iteration   3: 264174.351 ops/s
Iteration   4: 262967.089 ops/s
Iteration   5: 264249.054 ops/s
Iteration   6: 264277.582 ops/s
Iteration   7: 264552.788 ops/s
Iteration   8: 264862.891 ops/s
Iteration   9: 259642.532 ops/s
Iteration  10: 263872.290 ops/s
Iteration  11: 264735.731 ops/s
Iteration  12: 262665.560 ops/s
Iteration  13: 259767.275 ops/s
Iteration  14: 263588.885 ops/s
Iteration  15: 263121.273 ops/s
Iteration  16: 264968.442 ops/s
Iteration  17: 264264.495 ops/s
Iteration  18: 263859.114 ops/s
Iteration  19: 264181.227 ops/s
Iteration  20: 260192.171 ops/s
Iteration  21: 262749.441 ops/s
Iteration  22: 264715.890 ops/s
Iteration  23: 264906.144 ops/s
Iteration  24: 259780.461 ops/s
Iteration  25: 263176.779 ops/s
Iteration  26: 264004.970 ops/s
Iteration  27: 264922.016 ops/s
Iteration  28: 262691.838 ops/s
Iteration  29: 263660.952 ops/s
Iteration  30: 257601.493 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_chunk":
  263242.056 ±(99.9%) 1283.598 ops/s [Average]
  (min, avg, max) = (257601.493, 263242.056, 265118.116), stdev = 1921.229
  CI (99.9%): [261958.458, 264525.654] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_chunk  thrpt   30  263242.056 ± 1283.598  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 441459.297 ops/s
# Warmup Iteration   2: 904866.123 ops/s
# Warmup Iteration   3: 2214502.125 ops/s
# Warmup Iteration   4: 1858867.004 ops/s
# Warmup Iteration   5: 2227864.021 ops/s
# Warmup Iteration   6: 2205282.883 ops/s
# Warmup Iteration   7: 2224627.871 ops/s
# Warmup Iteration   8: 2217717.942 ops/s
# Warmup Iteration   9: 2209226.402 ops/s
# Warmup Iteration  10: 2215306.494 ops/s
# Warmup Iteration  11: 2224925.660 ops/s
# Warmup Iteration  12: 2221749.133 ops/s
# Warmup Iteration  13: 2181835.681 ops/s
# Warmup Iteration  14: 2226040.702 ops/s
# Warmup Iteration  15: 2214933.842 ops/s
# Warmup Iteration  16: 2227399.814 ops/s
# Warmup Iteration  17: 2222213.228 ops/s
# Warmup Iteration  18: 2207433.513 ops/s
# Warmup Iteration  19: 2224681.161 ops/s
# Warmup Iteration  20: 2236033.243 ops/s
# Warmup Iteration  21: 2222142.789 ops/s
# Warmup Iteration  22: 2210979.186 ops/s
# Warmup Iteration  23: 2220021.885 ops/s
# Warmup Iteration  24: 2223102.752 ops/s
# Warmup Iteration  25: 2224846.956 ops/s
# Warmup Iteration  26: 2218170.465 ops/s
# Warmup Iteration  27: 2210691.387 ops/s
# Warmup Iteration  28: 2226783.192 ops/s
# Warmup Iteration  29: 2223227.289 ops/s
# Warmup Iteration  30: 2235010.104 ops/s
Iteration   1: 2236957.869 ops/s
Iteration   2: 2198953.637 ops/s
Iteration   3: 2229190.179 ops/s
Iteration   4: 2231713.081 ops/s
Iteration   5: 2235733.432 ops/s
Iteration   6: 2196280.845 ops/s
Iteration   7: 2227458.049 ops/s
Iteration   8: 2211629.315 ops/s
Iteration   9: 2237324.878 ops/s
Iteration  10: 2212822.749 ops/s
Iteration  11: 2219193.980 ops/s
Iteration  12: 2208945.519 ops/s
Iteration  13: 2225635.241 ops/s
Iteration  14: 2233519.985 ops/s
Iteration  15: 2228251.677 ops/s
Iteration  16: 2234204.427 ops/s
Iteration  17: 2237895.291 ops/s
Iteration  18: 2233192.601 ops/s
Iteration  19: 2219155.178 ops/s
Iteration  20: 2183983.200 ops/s
Iteration  21: 2178864.816 ops/s
Iteration  22: 2235964.814 ops/s
Iteration  23: 2224979.783 ops/s
Iteration  24: 2232223.386 ops/s
Iteration  25: 2191904.095 ops/s
Iteration  26: 2238303.262 ops/s
Iteration  27: 2206746.348 ops/s
Iteration  28: 2222397.203 ops/s
Iteration  29: 2186748.905 ops/s
Iteration  30: 2214032.791 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_clear":
  2219140.218 ±(99.9%) 11890.352 ops/s [Average]
  (min, avg, max) = (2178864.816, 2219140.218, 2238303.262), stdev = 17796.920
  CI (99.9%): [2207249.866, 2231030.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_clear  thrpt   30  2219140.218 ± 11890.352  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1009323.676 ops/s
# Warmup Iteration   2: 2461994.513 ops/s
# Warmup Iteration   3: 2317666.534 ops/s
# Warmup Iteration   4: 2211520.724 ops/s
# Warmup Iteration   5: 2490675.324 ops/s
# Warmup Iteration   6: 2498474.192 ops/s
# Warmup Iteration   7: 2500160.535 ops/s
# Warmup Iteration   8: 2490895.531 ops/s
# Warmup Iteration   9: 2495728.614 ops/s
# Warmup Iteration  10: 2496470.818 ops/s
# Warmup Iteration  11: 2466149.633 ops/s
# Warmup Iteration  12: 2493461.375 ops/s
# Warmup Iteration  13: 2482978.564 ops/s
# Warmup Iteration  14: 2488025.508 ops/s
# Warmup Iteration  15: 2478732.388 ops/s
# Warmup Iteration  16: 2487742.568 ops/s
# Warmup Iteration  17: 2500506.477 ops/s
# Warmup Iteration  18: 2505162.697 ops/s
# Warmup Iteration  19: 2466534.327 ops/s
# Warmup Iteration  20: 2483351.900 ops/s
# Warmup Iteration  21: 2445709.660 ops/s
# Warmup Iteration  22: 2475786.875 ops/s
# Warmup Iteration  23: 2496021.515 ops/s
# Warmup Iteration  24: 2491941.370 ops/s
# Warmup Iteration  25: 2499622.601 ops/s
# Warmup Iteration  26: 2476072.182 ops/s
# Warmup Iteration  27: 2430525.681 ops/s
# Warmup Iteration  28: 2456145.937 ops/s
# Warmup Iteration  29: 2474379.416 ops/s
# Warmup Iteration  30: 2489892.917 ops/s
Iteration   1: 2501995.859 ops/s
Iteration   2: 2443159.793 ops/s
Iteration   3: 2498175.204 ops/s
Iteration   4: 2503116.956 ops/s
Iteration   5: 2498884.799 ops/s
Iteration   6: 2485593.943 ops/s
Iteration   7: 2484748.050 ops/s
Iteration   8: 2502597.732 ops/s
Iteration   9: 2496861.363 ops/s
Iteration  10: 2493565.967 ops/s
Iteration  11: 2420607.829 ops/s
Iteration  12: 2495091.871 ops/s
Iteration  13: 2493589.701 ops/s
Iteration  14: 2498041.993 ops/s
Iteration  15: 2501884.770 ops/s
Iteration  16: 2491805.739 ops/s
Iteration  17: 2491485.176 ops/s
Iteration  18: 2508893.294 ops/s
Iteration  19: 2445472.194 ops/s
Iteration  20: 2474615.057 ops/s
Iteration  21: 2488257.373 ops/s
Iteration  22: 2504558.655 ops/s
Iteration  23: 2491244.804 ops/s
Iteration  24: 2462267.674 ops/s
Iteration  25: 2491295.803 ops/s
Iteration  26: 2490815.009 ops/s
Iteration  27: 2492917.570 ops/s
Iteration  28: 2500967.183 ops/s
Iteration  29: 2465797.682 ops/s
Iteration  30: 2477805.624 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_collect":
  2486537.156 ±(99.9%) 13621.547 ops/s [Average]
  (min, avg, max) = (2420607.829, 2486537.156, 2508893.294), stdev = 20388.091
  CI (99.9%): [2472915.609, 2500158.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_collect  thrpt   30  2486537.156 ± 13621.547  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2130799.914 ops/s
# Warmup Iteration   2: 5244218.756 ops/s
# Warmup Iteration   3: 4624514.164 ops/s
# Warmup Iteration   4: 5584256.029 ops/s
# Warmup Iteration   5: 5648496.359 ops/s
# Warmup Iteration   6: 5668236.898 ops/s
# Warmup Iteration   7: 5659864.529 ops/s
# Warmup Iteration   8: 5645289.351 ops/s
# Warmup Iteration   9: 5666142.987 ops/s
# Warmup Iteration  10: 5600761.259 ops/s
# Warmup Iteration  11: 5597987.765 ops/s
# Warmup Iteration  12: 5632291.180 ops/s
# Warmup Iteration  13: 5660330.895 ops/s
# Warmup Iteration  14: 5651061.876 ops/s
# Warmup Iteration  15: 5638736.098 ops/s
# Warmup Iteration  16: 5589822.683 ops/s
# Warmup Iteration  17: 5661600.622 ops/s
# Warmup Iteration  18: 5648693.714 ops/s
# Warmup Iteration  19: 5654469.813 ops/s
# Warmup Iteration  20: 5639462.759 ops/s
# Warmup Iteration  21: 5577865.688 ops/s
# Warmup Iteration  22: 5624659.491 ops/s
# Warmup Iteration  23: 5662631.197 ops/s
# Warmup Iteration  24: 5645803.113 ops/s
# Warmup Iteration  25: 5596670.115 ops/s
# Warmup Iteration  26: 5590374.761 ops/s
# Warmup Iteration  27: 5641535.520 ops/s
# Warmup Iteration  28: 5628534.692 ops/s
# Warmup Iteration  29: 5644103.146 ops/s
# Warmup Iteration  30: 5656109.649 ops/s
Iteration   1: 5672670.445 ops/s
Iteration   2: 5546778.022 ops/s
Iteration   3: 5617805.924 ops/s
Iteration   4: 5637746.471 ops/s
Iteration   5: 5648872.944 ops/s
Iteration   6: 5632649.629 ops/s
Iteration   7: 5628920.073 ops/s
Iteration   8: 5640642.803 ops/s
Iteration   9: 5660130.953 ops/s
Iteration  10: 5616970.091 ops/s
Iteration  11: 5565793.924 ops/s
Iteration  12: 5612174.844 ops/s
Iteration  13: 5638277.880 ops/s
Iteration  14: 5614654.870 ops/s
Iteration  15: 5608855.936 ops/s
Iteration  16: 5652024.513 ops/s
Iteration  17: 5604324.725 ops/s
Iteration  18: 5620510.690 ops/s
Iteration  19: 5630650.755 ops/s
Iteration  20: 5547043.458 ops/s
Iteration  21: 5658019.017 ops/s
Iteration  22: 5569713.656 ops/s
Iteration  23: 5658478.878 ops/s
Iteration  24: 5639976.433 ops/s
Iteration  25: 5634958.695 ops/s
Iteration  26: 5620525.657 ops/s
Iteration  27: 5626241.008 ops/s
Iteration  28: 5630465.763 ops/s
Iteration  29: 5616988.015 ops/s
Iteration  30: 5559768.587 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_collectWithIndex":
  5620421.155 ±(99.9%) 22063.555 ops/s [Average]
  (min, avg, max) = (5546778.022, 5620421.155, 5672670.445), stdev = 33023.693
  CI (99.9%): [5598357.600, 5642484.710] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  5620421.155 ± 22063.555  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6087713.769 ops/s
# Warmup Iteration   2: 10532228.499 ops/s
# Warmup Iteration   3: 11284165.097 ops/s
# Warmup Iteration   4: 11961007.173 ops/s
# Warmup Iteration   5: 11875586.106 ops/s
# Warmup Iteration   6: 12047459.439 ops/s
# Warmup Iteration   7: 11863870.262 ops/s
# Warmup Iteration   8: 11933481.454 ops/s
# Warmup Iteration   9: 12047740.790 ops/s
# Warmup Iteration  10: 11957339.443 ops/s
# Warmup Iteration  11: 11993331.909 ops/s
# Warmup Iteration  12: 11964808.489 ops/s
# Warmup Iteration  13: 12026695.462 ops/s
# Warmup Iteration  14: 12073779.466 ops/s
# Warmup Iteration  15: 12008952.170 ops/s
# Warmup Iteration  16: 12052170.490 ops/s
# Warmup Iteration  17: 12068585.776 ops/s
# Warmup Iteration  18: 12045218.726 ops/s
# Warmup Iteration  19: 12070592.878 ops/s
# Warmup Iteration  20: 11956862.618 ops/s
# Warmup Iteration  21: 12042289.393 ops/s
# Warmup Iteration  22: 11955610.956 ops/s
# Warmup Iteration  23: 12129893.308 ops/s
# Warmup Iteration  24: 11954031.769 ops/s
# Warmup Iteration  25: 12079335.779 ops/s
# Warmup Iteration  26: 12025012.093 ops/s
# Warmup Iteration  27: 12087939.898 ops/s
# Warmup Iteration  28: 11992518.897 ops/s
# Warmup Iteration  29: 12049801.815 ops/s
# Warmup Iteration  30: 11891868.590 ops/s
Iteration   1: 11911187.477 ops/s
Iteration   2: 11767029.450 ops/s
Iteration   3: 12033698.334 ops/s
Iteration   4: 12104437.215 ops/s
Iteration   5: 12070919.831 ops/s
Iteration   6: 12138460.020 ops/s
Iteration   7: 12048991.388 ops/s
Iteration   8: 11852328.450 ops/s
Iteration   9: 12052868.034 ops/s
Iteration  10: 12012558.848 ops/s
Iteration  11: 11996500.804 ops/s
Iteration  12: 12101675.586 ops/s
Iteration  13: 12033247.662 ops/s
Iteration  14: 12008968.409 ops/s
Iteration  15: 11831490.174 ops/s
Iteration  16: 12062049.204 ops/s
Iteration  17: 11898820.052 ops/s
Iteration  18: 11828499.502 ops/s
Iteration  19: 12066089.920 ops/s
Iteration  20: 11998626.082 ops/s
Iteration  21: 11782811.433 ops/s
Iteration  22: 12038998.640 ops/s
Iteration  23: 12062964.761 ops/s
Iteration  24: 12004251.644 ops/s
Iteration  25: 11965892.955 ops/s
Iteration  26: 12009100.922 ops/s
Iteration  27: 12048809.388 ops/s
Iteration  28: 12098598.487 ops/s
Iteration  29: 12020072.540 ops/s
Iteration  30: 12061960.250 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_contains":
  11997063.582 ±(99.9%) 66043.773 ops/s [Average]
  (min, avg, max) = (11767029.450, 11997063.582, 12138460.020), stdev = 98851.217
  CI (99.9%): [11931019.809, 12063107.355] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_contains  thrpt   30  11997063.582 ± 66043.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2833423.817 ops/s
# Warmup Iteration   2: 5380180.302 ops/s
# Warmup Iteration   3: 5825849.258 ops/s
# Warmup Iteration   4: 6078655.508 ops/s
# Warmup Iteration   5: 5996919.467 ops/s
# Warmup Iteration   6: 6026817.383 ops/s
# Warmup Iteration   7: 6071486.014 ops/s
# Warmup Iteration   8: 6050006.361 ops/s
# Warmup Iteration   9: 6034552.811 ops/s
# Warmup Iteration  10: 6092854.640 ops/s
# Warmup Iteration  11: 6018688.104 ops/s
# Warmup Iteration  12: 6093349.807 ops/s
# Warmup Iteration  13: 6076695.494 ops/s
# Warmup Iteration  14: 6036243.679 ops/s
# Warmup Iteration  15: 6083690.189 ops/s
# Warmup Iteration  16: 6091655.548 ops/s
# Warmup Iteration  17: 6069459.974 ops/s
# Warmup Iteration  18: 6071801.728 ops/s
# Warmup Iteration  19: 6068979.206 ops/s
# Warmup Iteration  20: 6063481.348 ops/s
# Warmup Iteration  21: 5989187.472 ops/s
# Warmup Iteration  22: 6052320.272 ops/s
# Warmup Iteration  23: 6009779.632 ops/s
# Warmup Iteration  24: 6017122.397 ops/s
# Warmup Iteration  25: 6073871.490 ops/s
# Warmup Iteration  26: 6031870.963 ops/s
# Warmup Iteration  27: 6038116.250 ops/s
# Warmup Iteration  28: 6003229.160 ops/s
# Warmup Iteration  29: 6082201.390 ops/s
# Warmup Iteration  30: 6072442.869 ops/s
Iteration   1: 6039870.132 ops/s
Iteration   2: 6018701.532 ops/s
Iteration   3: 6088787.841 ops/s
Iteration   4: 6066325.272 ops/s
Iteration   5: 6085019.418 ops/s
Iteration   6: 6011847.631 ops/s
Iteration   7: 6089794.345 ops/s
Iteration   8: 6087419.862 ops/s
Iteration   9: 6065684.160 ops/s
Iteration  10: 6086514.894 ops/s
Iteration  11: 6021565.112 ops/s
Iteration  12: 6078224.641 ops/s
Iteration  13: 6091381.376 ops/s
Iteration  14: 5990295.921 ops/s
Iteration  15: 6074768.327 ops/s
Iteration  16: 5990554.449 ops/s
Iteration  17: 6060460.825 ops/s
Iteration  18: 6045973.306 ops/s
Iteration  19: 6018526.058 ops/s
Iteration  20: 6067584.288 ops/s
Iteration  21: 6083662.274 ops/s
Iteration  22: 6076943.698 ops/s
Iteration  23: 6055619.325 ops/s
Iteration  24: 6038074.112 ops/s
Iteration  25: 6072026.796 ops/s
Iteration  26: 5973667.442 ops/s
Iteration  27: 6073348.921 ops/s
Iteration  28: 6075228.198 ops/s
Iteration  29: 6037142.308 ops/s
Iteration  30: 6024870.925 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsAllArray":
  6052996.113 ±(99.9%) 22403.039 ops/s [Average]
  (min, avg, max) = (5973667.442, 6052996.113, 6091381.376), stdev = 33531.816
  CI (99.9%): [6030593.074, 6075399.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_containsAllArray  thrpt   30  6052996.113 ± 22403.039  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 508857.003 ops/s
# Warmup Iteration   2: 1161636.744 ops/s
# Warmup Iteration   3: 1233557.724 ops/s
# Warmup Iteration   4: 1467543.790 ops/s
# Warmup Iteration   5: 1464997.444 ops/s
# Warmup Iteration   6: 1475895.286 ops/s
# Warmup Iteration   7: 1472158.554 ops/s
# Warmup Iteration   8: 1473583.469 ops/s
# Warmup Iteration   9: 1471818.895 ops/s
# Warmup Iteration  10: 1468706.667 ops/s
# Warmup Iteration  11: 1466265.873 ops/s
# Warmup Iteration  12: 1474367.307 ops/s
# Warmup Iteration  13: 1470466.385 ops/s
# Warmup Iteration  14: 1471697.089 ops/s
# Warmup Iteration  15: 1472886.336 ops/s
# Warmup Iteration  16: 1464326.171 ops/s
# Warmup Iteration  17: 1468810.237 ops/s
# Warmup Iteration  18: 1455311.519 ops/s
# Warmup Iteration  19: 1467748.286 ops/s
# Warmup Iteration  20: 1470735.748 ops/s
# Warmup Iteration  21: 1469572.137 ops/s
# Warmup Iteration  22: 1478054.429 ops/s
# Warmup Iteration  23: 1472979.132 ops/s
# Warmup Iteration  24: 1468968.491 ops/s
# Warmup Iteration  25: 1473757.610 ops/s
# Warmup Iteration  26: 1468770.351 ops/s
# Warmup Iteration  27: 1472379.811 ops/s
# Warmup Iteration  28: 1465877.655 ops/s
# Warmup Iteration  29: 1471393.711 ops/s
# Warmup Iteration  30: 1464272.666 ops/s
Iteration   1: 1466454.895 ops/s
Iteration   2: 1466773.282 ops/s
Iteration   3: 1469505.160 ops/s
Iteration   4: 1461819.631 ops/s
Iteration   5: 1479856.497 ops/s
Iteration   6: 1469041.198 ops/s
Iteration   7: 1472049.555 ops/s
Iteration   8: 1458252.258 ops/s
Iteration   9: 1469225.327 ops/s
Iteration  10: 1445666.647 ops/s
Iteration  11: 1474037.361 ops/s
Iteration  12: 1482232.058 ops/s
Iteration  13: 1475274.039 ops/s
Iteration  14: 1473766.676 ops/s
Iteration  15: 1473012.498 ops/s
Iteration  16: 1482418.944 ops/s
Iteration  17: 1470256.170 ops/s
Iteration  18: 1481572.204 ops/s
Iteration  19: 1444679.461 ops/s
Iteration  20: 1478739.683 ops/s
Iteration  21: 1468163.955 ops/s
Iteration  22: 1474059.059 ops/s
Iteration  23: 1475732.539 ops/s
Iteration  24: 1475470.239 ops/s
Iteration  25: 1474375.684 ops/s
Iteration  26: 1455319.537 ops/s
Iteration  27: 1477710.865 ops/s
Iteration  28: 1475260.931 ops/s
Iteration  29: 1433227.631 ops/s
Iteration  30: 1468497.248 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsAllIterable":
  1469081.708 ±(99.9%) 7727.453 ops/s [Average]
  (min, avg, max) = (1433227.631, 1469081.708, 1482418.944), stdev = 11566.089
  CI (99.9%): [1461354.255, 1476809.161] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  1469081.708 ± 7727.453  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5816612.329 ops/s
# Warmup Iteration   2: 10662220.161 ops/s
# Warmup Iteration   3: 11204027.136 ops/s
# Warmup Iteration   4: 11928618.787 ops/s
# Warmup Iteration   5: 11919631.092 ops/s
# Warmup Iteration   6: 11980198.372 ops/s
# Warmup Iteration   7: 11976789.908 ops/s
# Warmup Iteration   8: 11874247.388 ops/s
# Warmup Iteration   9: 11984200.514 ops/s
# Warmup Iteration  10: 11891201.483 ops/s
# Warmup Iteration  11: 11947763.730 ops/s
# Warmup Iteration  12: 11915267.837 ops/s
# Warmup Iteration  13: 11851983.442 ops/s
# Warmup Iteration  14: 12036279.575 ops/s
# Warmup Iteration  15: 11973950.198 ops/s
# Warmup Iteration  16: 11837436.273 ops/s
# Warmup Iteration  17: 11750686.904 ops/s
# Warmup Iteration  18: 11990068.465 ops/s
# Warmup Iteration  19: 12004379.547 ops/s
# Warmup Iteration  20: 11997754.165 ops/s
# Warmup Iteration  21: 12022313.746 ops/s
# Warmup Iteration  22: 12009519.415 ops/s
# Warmup Iteration  23: 12008267.256 ops/s
# Warmup Iteration  24: 11970240.560 ops/s
# Warmup Iteration  25: 11932437.595 ops/s
# Warmup Iteration  26: 11674387.135 ops/s
# Warmup Iteration  27: 11971963.419 ops/s
# Warmup Iteration  28: 11921198.086 ops/s
# Warmup Iteration  29: 11983225.034 ops/s
# Warmup Iteration  30: 11982079.805 ops/s
Iteration   1: 11682846.116 ops/s
Iteration   2: 11978426.395 ops/s
Iteration   3: 11994599.631 ops/s
Iteration   4: 11849894.191 ops/s
Iteration   5: 12026916.395 ops/s
Iteration   6: 12004506.214 ops/s
Iteration   7: 12020715.393 ops/s
Iteration   8: 11873816.907 ops/s
Iteration   9: 12012902.902 ops/s
Iteration  10: 11880285.480 ops/s
Iteration  11: 11743066.946 ops/s
Iteration  12: 12070868.438 ops/s
Iteration  13: 11969450.939 ops/s
Iteration  14: 12018015.384 ops/s
Iteration  15: 12017712.966 ops/s
Iteration  16: 11999037.901 ops/s
Iteration  17: 12044758.770 ops/s
Iteration  18: 11862018.777 ops/s
Iteration  19: 11926286.557 ops/s
Iteration  20: 11959085.587 ops/s
Iteration  21: 11966798.007 ops/s
Iteration  22: 11983221.801 ops/s
Iteration  23: 11895803.079 ops/s
Iteration  24: 11911916.038 ops/s
Iteration  25: 11934090.955 ops/s
Iteration  26: 11828467.794 ops/s
Iteration  27: 11962430.551 ops/s
Iteration  28: 11989301.885 ops/s
Iteration  29: 11763395.054 ops/s
Iteration  30: 11956739.926 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsAnyArray":
  11937579.233 ±(99.9%) 62307.782 ops/s [Average]
  (min, avg, max) = (11682846.116, 11937579.233, 12070868.438), stdev = 93259.362
  CI (99.9%): [11875271.451, 11999887.015] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_containsAnyArray  thrpt   30  11937579.233 ± 62307.782  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 726732.618 ops/s
# Warmup Iteration   2: 969153.703 ops/s
# Warmup Iteration   3: 1204129.839 ops/s
# Warmup Iteration   4: 1207997.181 ops/s
# Warmup Iteration   5: 1210901.738 ops/s
# Warmup Iteration   6: 1206982.571 ops/s
# Warmup Iteration   7: 1204409.872 ops/s
# Warmup Iteration   8: 993405.937 ops/s
# Warmup Iteration   9: 1211104.843 ops/s
# Warmup Iteration  10: 1209496.199 ops/s
# Warmup Iteration  11: 1209894.838 ops/s
# Warmup Iteration  12: 1202534.711 ops/s
# Warmup Iteration  13: 1214690.237 ops/s
# Warmup Iteration  14: 1194453.564 ops/s
# Warmup Iteration  15: 1212305.488 ops/s
# Warmup Iteration  16: 1205309.741 ops/s
# Warmup Iteration  17: 1211190.372 ops/s
# Warmup Iteration  18: 1204553.608 ops/s
# Warmup Iteration  19: 1201434.486 ops/s
# Warmup Iteration  20: 1211349.880 ops/s
# Warmup Iteration  21: 1213426.427 ops/s
# Warmup Iteration  22: 1204979.240 ops/s
# Warmup Iteration  23: 1208490.828 ops/s
# Warmup Iteration  24: 1206201.622 ops/s
# Warmup Iteration  25: 1205218.080 ops/s
# Warmup Iteration  26: 1206435.779 ops/s
# Warmup Iteration  27: 1206430.340 ops/s
# Warmup Iteration  28: 1206256.498 ops/s
# Warmup Iteration  29: 1212167.436 ops/s
# Warmup Iteration  30: 1209433.370 ops/s
Iteration   1: 1204670.417 ops/s
Iteration   2: 1211105.546 ops/s
Iteration   3: 1209398.726 ops/s
Iteration   4: 1209783.903 ops/s
Iteration   5: 1201181.375 ops/s
Iteration   6: 1203147.437 ops/s
Iteration   7: 1212162.706 ops/s
Iteration   8: 1213005.534 ops/s
Iteration   9: 1213113.465 ops/s
Iteration  10: 1174235.813 ops/s
Iteration  11: 1206267.143 ops/s
Iteration  12: 1214032.379 ops/s
Iteration  13: 1212146.363 ops/s
Iteration  14: 1212734.424 ops/s
Iteration  15: 1212919.784 ops/s
Iteration  16: 1190837.724 ops/s
Iteration  17: 1209427.381 ops/s
Iteration  18: 1217161.517 ops/s
Iteration  19: 1213665.417 ops/s
Iteration  20: 1186145.581 ops/s
Iteration  21: 1209622.201 ops/s
Iteration  22: 1215450.957 ops/s
Iteration  23: 1209674.252 ops/s
Iteration  24: 1214803.750 ops/s
Iteration  25: 1193382.104 ops/s
Iteration  26: 1196419.567 ops/s
Iteration  27: 1218886.942 ops/s
Iteration  28: 1208958.051 ops/s
Iteration  29: 1215468.293 ops/s
Iteration  30: 1209623.754 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsAnyIterable":
  1207314.417 ±(99.9%) 6700.314 ops/s [Average]
  (min, avg, max) = (1174235.813, 1207314.417, 1218886.942), stdev = 10028.715
  CI (99.9%): [1200614.103, 1214014.731] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1207314.417 ± 6700.314  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6224250.023 ops/s
# Warmup Iteration   2: 10512745.557 ops/s
# Warmup Iteration   3: 12454984.648 ops/s
# Warmup Iteration   4: 12484135.563 ops/s
# Warmup Iteration   5: 12486041.041 ops/s
# Warmup Iteration   6: 12479966.960 ops/s
# Warmup Iteration   7: 12579441.847 ops/s
# Warmup Iteration   8: 12383415.282 ops/s
# Warmup Iteration   9: 12565734.393 ops/s
# Warmup Iteration  10: 12482028.146 ops/s
# Warmup Iteration  11: 12372840.931 ops/s
# Warmup Iteration  12: 12530829.418 ops/s
# Warmup Iteration  13: 12292045.813 ops/s
# Warmup Iteration  14: 12522041.138 ops/s
# Warmup Iteration  15: 12613417.465 ops/s
# Warmup Iteration  16: 12634910.181 ops/s
# Warmup Iteration  17: 12597331.966 ops/s
# Warmup Iteration  18: 12588225.085 ops/s
# Warmup Iteration  19: 12506458.917 ops/s
# Warmup Iteration  20: 12584256.618 ops/s
# Warmup Iteration  21: 12668642.780 ops/s
# Warmup Iteration  22: 12555576.759 ops/s
# Warmup Iteration  23: 12559044.573 ops/s
# Warmup Iteration  24: 12558047.892 ops/s
# Warmup Iteration  25: 12531137.864 ops/s
# Warmup Iteration  26: 12493975.947 ops/s
# Warmup Iteration  27: 12496876.591 ops/s
# Warmup Iteration  28: 12600534.986 ops/s
# Warmup Iteration  29: 12520787.496 ops/s
# Warmup Iteration  30: 12581377.580 ops/s
Iteration   1: 12600818.876 ops/s
Iteration   2: 12539905.452 ops/s
Iteration   3: 12650057.690 ops/s
Iteration   4: 12562950.392 ops/s
Iteration   5: 12566020.497 ops/s
Iteration   6: 12386032.911 ops/s
Iteration   7: 12593901.116 ops/s
Iteration   8: 12395659.411 ops/s
Iteration   9: 12386141.398 ops/s
Iteration  10: 12363761.751 ops/s
Iteration  11: 12567543.098 ops/s
Iteration  12: 12589734.892 ops/s
Iteration  13: 12547404.489 ops/s
Iteration  14: 12554991.382 ops/s
Iteration  15: 12548521.673 ops/s
Iteration  16: 12481801.859 ops/s
Iteration  17: 12621330.164 ops/s
Iteration  18: 12584845.915 ops/s
Iteration  19: 12564688.264 ops/s
Iteration  20: 12660194.927 ops/s
Iteration  21: 12553753.549 ops/s
Iteration  22: 12597052.180 ops/s
Iteration  23: 12452845.478 ops/s
Iteration  24: 12686735.896 ops/s
Iteration  25: 12586013.719 ops/s
Iteration  26: 12628475.232 ops/s
Iteration  27: 12444767.761 ops/s
Iteration  28: 12517357.576 ops/s
Iteration  29: 12296327.564 ops/s
Iteration  30: 12513583.241 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsNoneArray":
  12534773.945 ±(99.9%) 63407.019 ops/s [Average]
  (min, avg, max) = (12296327.564, 12534773.945, 12686735.896), stdev = 94904.648
  CI (99.9%): [12471366.926, 12598180.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_containsNoneArray  thrpt   30  12534773.945 ± 63407.019  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 676989.741 ops/s
# Warmup Iteration   2: 887548.868 ops/s
# Warmup Iteration   3: 1110006.724 ops/s
# Warmup Iteration   4: 1111237.660 ops/s
# Warmup Iteration   5: 1112466.278 ops/s
# Warmup Iteration   6: 1112873.605 ops/s
# Warmup Iteration   7: 1115118.638 ops/s
# Warmup Iteration   8: 919276.599 ops/s
# Warmup Iteration   9: 1104444.405 ops/s
# Warmup Iteration  10: 1116928.692 ops/s
# Warmup Iteration  11: 1117511.071 ops/s
# Warmup Iteration  12: 1104060.366 ops/s
# Warmup Iteration  13: 1116629.762 ops/s
# Warmup Iteration  14: 1119075.902 ops/s
# Warmup Iteration  15: 1116361.507 ops/s
# Warmup Iteration  16: 1114238.776 ops/s
# Warmup Iteration  17: 1115984.371 ops/s
# Warmup Iteration  18: 1118523.008 ops/s
# Warmup Iteration  19: 1101933.297 ops/s
# Warmup Iteration  20: 1116219.304 ops/s
# Warmup Iteration  21: 1118279.320 ops/s
# Warmup Iteration  22: 1102836.848 ops/s
# Warmup Iteration  23: 1107310.811 ops/s
# Warmup Iteration  24: 1118332.809 ops/s
# Warmup Iteration  25: 1107580.388 ops/s
# Warmup Iteration  26: 1102270.912 ops/s
# Warmup Iteration  27: 1117200.985 ops/s
# Warmup Iteration  28: 1117057.254 ops/s
# Warmup Iteration  29: 1113506.646 ops/s
# Warmup Iteration  30: 1118101.266 ops/s
Iteration   1: 1105844.453 ops/s
Iteration   2: 1113931.728 ops/s
Iteration   3: 1119499.747 ops/s
Iteration   4: 1114787.427 ops/s
Iteration   5: 1115427.281 ops/s
Iteration   6: 1119113.613 ops/s
Iteration   7: 1116441.048 ops/s
Iteration   8: 1114970.180 ops/s
Iteration   9: 1116837.188 ops/s
Iteration  10: 1117649.649 ops/s
Iteration  11: 1116022.684 ops/s
Iteration  12: 1111366.303 ops/s
Iteration  13: 1116072.476 ops/s
Iteration  14: 1108360.960 ops/s
Iteration  15: 1113815.524 ops/s
Iteration  16: 1120125.865 ops/s
Iteration  17: 1120145.585 ops/s
Iteration  18: 1117276.147 ops/s
Iteration  19: 1097330.892 ops/s
Iteration  20: 1108629.673 ops/s
Iteration  21: 1105866.622 ops/s
Iteration  22: 1118173.292 ops/s
Iteration  23: 1098995.060 ops/s
Iteration  24: 1116510.186 ops/s
Iteration  25: 1112920.296 ops/s
Iteration  26: 1115080.427 ops/s
Iteration  27: 1122114.711 ops/s
Iteration  28: 1116193.779 ops/s
Iteration  29: 1119504.114 ops/s
Iteration  30: 1117562.869 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_containsNoneIterable":
  1114218.993 ±(99.9%) 3968.709 ops/s [Average]
  (min, avg, max) = (1097330.892, 1114218.993, 1122114.711), stdev = 5940.178
  CI (99.9%): [1110250.283, 1118187.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1114218.993 ± 3968.709  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1921123.482 ops/s
# Warmup Iteration   2: 4594673.901 ops/s
# Warmup Iteration   3: 5003492.306 ops/s
# Warmup Iteration   4: 4737072.078 ops/s
# Warmup Iteration   5: 4451626.959 ops/s
# Warmup Iteration   6: 5003880.411 ops/s
# Warmup Iteration   7: 5008046.335 ops/s
# Warmup Iteration   8: 5005621.603 ops/s
# Warmup Iteration   9: 5019975.449 ops/s
# Warmup Iteration  10: 4965013.343 ops/s
# Warmup Iteration  11: 5005658.124 ops/s
# Warmup Iteration  12: 5006952.643 ops/s
# Warmup Iteration  13: 4942004.644 ops/s
# Warmup Iteration  14: 5004759.049 ops/s
# Warmup Iteration  15: 5002833.653 ops/s
# Warmup Iteration  16: 4968140.272 ops/s
# Warmup Iteration  17: 5029057.556 ops/s
# Warmup Iteration  18: 4984030.175 ops/s
# Warmup Iteration  19: 5013059.047 ops/s
# Warmup Iteration  20: 5019144.715 ops/s
# Warmup Iteration  21: 5029725.710 ops/s
# Warmup Iteration  22: 5031714.946 ops/s
# Warmup Iteration  23: 5013178.138 ops/s
# Warmup Iteration  24: 4986128.902 ops/s
# Warmup Iteration  25: 4979245.765 ops/s
# Warmup Iteration  26: 4928391.139 ops/s
# Warmup Iteration  27: 4982722.614 ops/s
# Warmup Iteration  28: 4981869.418 ops/s
# Warmup Iteration  29: 5028980.001 ops/s
# Warmup Iteration  30: 5024728.710 ops/s
Iteration   1: 5019919.044 ops/s
Iteration   2: 5039067.054 ops/s
Iteration   3: 4928193.770 ops/s
Iteration   4: 5020467.978 ops/s
Iteration   5: 4938086.915 ops/s
Iteration   6: 5000224.758 ops/s
Iteration   7: 5002208.358 ops/s
Iteration   8: 5034487.323 ops/s
Iteration   9: 5069234.587 ops/s
Iteration  10: 5042742.347 ops/s
Iteration  11: 4963988.387 ops/s
Iteration  12: 5002233.610 ops/s
Iteration  13: 5011063.561 ops/s
Iteration  14: 5000760.862 ops/s
Iteration  15: 5001727.304 ops/s
Iteration  16: 5000033.718 ops/s
Iteration  17: 5024808.120 ops/s
Iteration  18: 4949507.164 ops/s
Iteration  19: 4975068.282 ops/s
Iteration  20: 5013672.935 ops/s
Iteration  21: 5019141.033 ops/s
Iteration  22: 5007693.491 ops/s
Iteration  23: 5032200.723 ops/s
Iteration  24: 4954521.792 ops/s
Iteration  25: 4940816.015 ops/s
Iteration  26: 5020886.630 ops/s
Iteration  27: 5003746.846 ops/s
Iteration  28: 5018966.598 ops/s
Iteration  29: 4949272.544 ops/s
Iteration  30: 4894181.915 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_count":
  4995964.122 ±(99.9%) 26514.278 ops/s [Average]
  (min, avg, max) = (4894181.915, 4995964.122, 5069234.587), stdev = 39685.326
  CI (99.9%): [4969449.844, 5022478.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_count  thrpt   30  4995964.122 ± 26514.278  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3236736.151 ops/s
# Warmup Iteration   2: 6837613.821 ops/s
# Warmup Iteration   3: 6914360.528 ops/s
# Warmup Iteration   4: 5768709.375 ops/s
# Warmup Iteration   5: 6915856.818 ops/s
# Warmup Iteration   6: 6899273.057 ops/s
# Warmup Iteration   7: 6899722.201 ops/s
# Warmup Iteration   8: 6900393.801 ops/s
# Warmup Iteration   9: 6932558.517 ops/s
# Warmup Iteration  10: 6875802.323 ops/s
# Warmup Iteration  11: 6914744.142 ops/s
# Warmup Iteration  12: 6924732.715 ops/s
# Warmup Iteration  13: 6911115.912 ops/s
# Warmup Iteration  14: 6923195.988 ops/s
# Warmup Iteration  15: 6926185.976 ops/s
# Warmup Iteration  16: 6892002.819 ops/s
# Warmup Iteration  17: 6807298.982 ops/s
# Warmup Iteration  18: 6830578.194 ops/s
# Warmup Iteration  19: 6940258.828 ops/s
# Warmup Iteration  20: 6909119.888 ops/s
# Warmup Iteration  21: 6920552.042 ops/s
# Warmup Iteration  22: 6914959.849 ops/s
# Warmup Iteration  23: 6917179.116 ops/s
# Warmup Iteration  24: 6873973.993 ops/s
# Warmup Iteration  25: 6870454.396 ops/s
# Warmup Iteration  26: 6892519.766 ops/s
# Warmup Iteration  27: 6906545.705 ops/s
# Warmup Iteration  28: 6908475.932 ops/s
# Warmup Iteration  29: 6906390.821 ops/s
# Warmup Iteration  30: 6907795.155 ops/s
Iteration   1: 6891321.625 ops/s
Iteration   2: 6817533.039 ops/s
Iteration   3: 6864341.264 ops/s
Iteration   4: 6919996.591 ops/s
Iteration   5: 6907821.732 ops/s
Iteration   6: 6907235.218 ops/s
Iteration   7: 6900546.603 ops/s
Iteration   8: 6928695.542 ops/s
Iteration   9: 6912241.464 ops/s
Iteration  10: 6881163.052 ops/s
Iteration  11: 6918272.285 ops/s
Iteration  12: 6919070.309 ops/s
Iteration  13: 6909374.030 ops/s
Iteration  14: 6914238.133 ops/s
Iteration  15: 6908139.260 ops/s
Iteration  16: 6929143.410 ops/s
Iteration  17: 6920924.037 ops/s
Iteration  18: 6911892.431 ops/s
Iteration  19: 6934665.746 ops/s
Iteration  20: 6924968.349 ops/s
Iteration  21: 6918659.232 ops/s
Iteration  22: 6924533.377 ops/s
Iteration  23: 6891513.246 ops/s
Iteration  24: 6932485.395 ops/s
Iteration  25: 6851683.841 ops/s
Iteration  26: 6923811.199 ops/s
Iteration  27: 6940225.134 ops/s
Iteration  28: 6895621.074 ops/s
Iteration  29: 6818199.159 ops/s
Iteration  30: 6896565.901 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_detectIfNone":
  6903829.389 ±(99.9%) 20452.695 ops/s [Average]
  (min, avg, max) = (6817533.039, 6903829.389, 6940225.134), stdev = 30612.633
  CI (99.9%): [6883376.695, 6924282.084] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_detectIfNone  thrpt   30  6903829.389 ± 20452.695  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2295069.028 ops/s
# Warmup Iteration   2: 4829822.507 ops/s
# Warmup Iteration   3: 4461221.689 ops/s
# Warmup Iteration   4: 5288975.685 ops/s
# Warmup Iteration   5: 5271049.309 ops/s
# Warmup Iteration   6: 5327799.466 ops/s
# Warmup Iteration   7: 5292651.628 ops/s
# Warmup Iteration   8: 5330005.744 ops/s
# Warmup Iteration   9: 5283635.689 ops/s
# Warmup Iteration  10: 5308993.696 ops/s
# Warmup Iteration  11: 5310519.478 ops/s
# Warmup Iteration  12: 5297808.856 ops/s
# Warmup Iteration  13: 5315261.410 ops/s
# Warmup Iteration  14: 5288576.023 ops/s
# Warmup Iteration  15: 5277042.568 ops/s
# Warmup Iteration  16: 5263216.395 ops/s
# Warmup Iteration  17: 5281480.779 ops/s
# Warmup Iteration  18: 5288330.965 ops/s
# Warmup Iteration  19: 5255116.047 ops/s
# Warmup Iteration  20: 5255721.617 ops/s
# Warmup Iteration  21: 5288375.542 ops/s
# Warmup Iteration  22: 5294431.571 ops/s
# Warmup Iteration  23: 5297626.800 ops/s
# Warmup Iteration  24: 5272349.067 ops/s
# Warmup Iteration  25: 5280097.186 ops/s
# Warmup Iteration  26: 5229106.065 ops/s
# Warmup Iteration  27: 5274970.457 ops/s
# Warmup Iteration  28: 5280924.099 ops/s
# Warmup Iteration  29: 5255840.355 ops/s
# Warmup Iteration  30: 5304373.175 ops/s
Iteration   1: 5189777.754 ops/s
Iteration   2: 5271136.526 ops/s
Iteration   3: 5286225.560 ops/s
Iteration   4: 5298466.014 ops/s
Iteration   5: 5141891.342 ops/s
Iteration   6: 5277971.908 ops/s
Iteration   7: 5305275.162 ops/s
Iteration   8: 5314661.694 ops/s
Iteration   9: 5119479.421 ops/s
Iteration  10: 5292578.784 ops/s
Iteration  11: 5259568.848 ops/s
Iteration  12: 5176332.956 ops/s
Iteration  13: 5287912.894 ops/s
Iteration  14: 5313658.249 ops/s
Iteration  15: 5296596.811 ops/s
Iteration  16: 5255862.262 ops/s
Iteration  17: 5262372.383 ops/s
Iteration  18: 5294024.231 ops/s
Iteration  19: 5274435.838 ops/s
Iteration  20: 5311104.331 ops/s
Iteration  21: 5283901.586 ops/s
Iteration  22: 5325367.954 ops/s
Iteration  23: 5299816.101 ops/s
Iteration  24: 5273100.702 ops/s
Iteration  25: 5305253.750 ops/s
Iteration  26: 5297909.064 ops/s
Iteration  27: 5263733.325 ops/s
Iteration  28: 5304163.127 ops/s
Iteration  29: 5292395.631 ops/s
Iteration  30: 5210844.221 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_distinct":
  5269527.281 ±(99.9%) 34232.192 ops/s [Average]
  (min, avg, max) = (5119479.421, 5269527.281, 5325367.954), stdev = 51237.137
  CI (99.9%): [5235295.089, 5303759.473] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_distinct  thrpt   30  5269527.281 ± 34232.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2117175.167 ops/s
# Warmup Iteration   2: 4632771.967 ops/s
# Warmup Iteration   3: 3920235.211 ops/s
# Warmup Iteration   4: 4643079.863 ops/s
# Warmup Iteration   5: 4634630.858 ops/s
# Warmup Iteration   6: 4674922.031 ops/s
# Warmup Iteration   7: 4627996.567 ops/s
# Warmup Iteration   8: 4640624.519 ops/s
# Warmup Iteration   9: 4663755.838 ops/s
# Warmup Iteration  10: 4669260.414 ops/s
# Warmup Iteration  11: 4671893.794 ops/s
# Warmup Iteration  12: 4655080.083 ops/s
# Warmup Iteration  13: 4599316.388 ops/s
# Warmup Iteration  14: 4655475.578 ops/s
# Warmup Iteration  15: 4662541.985 ops/s
# Warmup Iteration  16: 4673478.548 ops/s
# Warmup Iteration  17: 4601662.232 ops/s
# Warmup Iteration  18: 4648984.518 ops/s
# Warmup Iteration  19: 4676068.208 ops/s
# Warmup Iteration  20: 4622591.130 ops/s
# Warmup Iteration  21: 4653577.833 ops/s
# Warmup Iteration  22: 4688626.399 ops/s
# Warmup Iteration  23: 4669318.420 ops/s
# Warmup Iteration  24: 4684620.928 ops/s
# Warmup Iteration  25: 4686332.858 ops/s
# Warmup Iteration  26: 4671770.769 ops/s
# Warmup Iteration  27: 4665673.824 ops/s
# Warmup Iteration  28: 4667635.382 ops/s
# Warmup Iteration  29: 4656958.610 ops/s
# Warmup Iteration  30: 4661747.881 ops/s
Iteration   1: 4643828.631 ops/s
Iteration   2: 4693682.736 ops/s
Iteration   3: 4674845.208 ops/s
Iteration   4: 4668188.325 ops/s
Iteration   5: 4684039.502 ops/s
Iteration   6: 4607357.071 ops/s
Iteration   7: 4618919.474 ops/s
Iteration   8: 4681055.597 ops/s
Iteration   9: 4674026.547 ops/s
Iteration  10: 4671570.122 ops/s
Iteration  11: 4660036.083 ops/s
Iteration  12: 4655239.332 ops/s
Iteration  13: 4671221.337 ops/s
Iteration  14: 4676897.321 ops/s
Iteration  15: 4653944.188 ops/s
Iteration  16: 4691162.260 ops/s
Iteration  17: 4666752.837 ops/s
Iteration  18: 4656975.855 ops/s
Iteration  19: 4558066.598 ops/s
Iteration  20: 4612220.736 ops/s
Iteration  21: 4674304.558 ops/s
Iteration  22: 4697779.006 ops/s
Iteration  23: 4641574.991 ops/s
Iteration  24: 4649438.744 ops/s
Iteration  25: 4663154.732 ops/s
Iteration  26: 4582405.594 ops/s
Iteration  27: 4668344.473 ops/s
Iteration  28: 4652741.469 ops/s
Iteration  29: 4636623.128 ops/s
Iteration  30: 4663566.943 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_forEach":
  4654998.780 ±(99.9%) 21384.284 ops/s [Average]
  (min, avg, max) = (4558066.598, 4654998.780, 4697779.006), stdev = 32006.993
  CI (99.9%): [4633614.495, 4676383.064] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_forEach  thrpt   30  4654998.780 ± 21384.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2591991.125 ops/s
# Warmup Iteration   2: 5385714.888 ops/s
# Warmup Iteration   3: 4586971.028 ops/s
# Warmup Iteration   4: 5460417.015 ops/s
# Warmup Iteration   5: 5400626.730 ops/s
# Warmup Iteration   6: 5441165.448 ops/s
# Warmup Iteration   7: 5463080.206 ops/s
# Warmup Iteration   8: 5483010.268 ops/s
# Warmup Iteration   9: 5471090.428 ops/s
# Warmup Iteration  10: 5428317.263 ops/s
# Warmup Iteration  11: 5436796.993 ops/s
# Warmup Iteration  12: 5447902.154 ops/s
# Warmup Iteration  13: 5455553.350 ops/s
# Warmup Iteration  14: 5446131.546 ops/s
# Warmup Iteration  15: 5479033.614 ops/s
# Warmup Iteration  16: 5424082.104 ops/s
# Warmup Iteration  17: 5442586.230 ops/s
# Warmup Iteration  18: 5407647.015 ops/s
# Warmup Iteration  19: 5428417.186 ops/s
# Warmup Iteration  20: 5492923.558 ops/s
# Warmup Iteration  21: 5466512.212 ops/s
# Warmup Iteration  22: 5442015.044 ops/s
# Warmup Iteration  23: 5435205.701 ops/s
# Warmup Iteration  24: 5417485.192 ops/s
# Warmup Iteration  25: 5463117.510 ops/s
# Warmup Iteration  26: 5451526.708 ops/s
# Warmup Iteration  27: 5475268.952 ops/s
# Warmup Iteration  28: 5368700.604 ops/s
# Warmup Iteration  29: 5492487.559 ops/s
# Warmup Iteration  30: 5479925.681 ops/s
Iteration   1: 5472634.140 ops/s
Iteration   2: 5440383.036 ops/s
Iteration   3: 5432863.887 ops/s
Iteration   4: 5514588.084 ops/s
Iteration   5: 5427871.734 ops/s
Iteration   6: 5472463.237 ops/s
Iteration   7: 5466618.481 ops/s
Iteration   8: 5464384.977 ops/s
Iteration   9: 5424179.589 ops/s
Iteration  10: 5470439.668 ops/s
Iteration  11: 5459312.363 ops/s
Iteration  12: 5485493.423 ops/s
Iteration  13: 5497308.597 ops/s
Iteration  14: 5469869.846 ops/s
Iteration  15: 5429986.611 ops/s
Iteration  16: 5486631.901 ops/s
Iteration  17: 5503851.071 ops/s
Iteration  18: 5481527.657 ops/s
Iteration  19: 5447200.927 ops/s
Iteration  20: 5460976.363 ops/s
Iteration  21: 5463780.201 ops/s
Iteration  22: 5425562.345 ops/s
Iteration  23: 5377694.123 ops/s
Iteration  24: 5500058.787 ops/s
Iteration  25: 5474054.783 ops/s
Iteration  26: 5462069.758 ops/s
Iteration  27: 5471135.290 ops/s
Iteration  28: 5456695.105 ops/s
Iteration  29: 5491059.519 ops/s
Iteration  30: 5460263.525 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_forEachWithIndex":
  5463031.968 ±(99.9%) 19143.582 ops/s [Average]
  (min, avg, max) = (5377694.123, 5463031.968, 5514588.084), stdev = 28653.215
  CI (99.9%): [5443888.385, 5482175.550] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  5463031.968 ± 19143.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12088487.628 ops/s
# Warmup Iteration   2: 27080451.756 ops/s
# Warmup Iteration   3: 22338484.667 ops/s
# Warmup Iteration   4: 27201894.369 ops/s
# Warmup Iteration   5: 27183865.932 ops/s
# Warmup Iteration   6: 27073213.692 ops/s
# Warmup Iteration   7: 26824421.684 ops/s
# Warmup Iteration   8: 27118993.433 ops/s
# Warmup Iteration   9: 27037329.824 ops/s
# Warmup Iteration  10: 27189671.572 ops/s
# Warmup Iteration  11: 26908740.263 ops/s
# Warmup Iteration  12: 27180694.755 ops/s
# Warmup Iteration  13: 27138331.976 ops/s
# Warmup Iteration  14: 27082643.048 ops/s
# Warmup Iteration  15: 27125336.297 ops/s
# Warmup Iteration  16: 26949377.439 ops/s
# Warmup Iteration  17: 26852975.924 ops/s
# Warmup Iteration  18: 27064175.767 ops/s
# Warmup Iteration  19: 27096345.427 ops/s
# Warmup Iteration  20: 26864873.117 ops/s
# Warmup Iteration  21: 26909604.245 ops/s
# Warmup Iteration  22: 26982078.066 ops/s
# Warmup Iteration  23: 27175390.589 ops/s
# Warmup Iteration  24: 27129428.389 ops/s
# Warmup Iteration  25: 26949058.715 ops/s
# Warmup Iteration  26: 27099834.991 ops/s
# Warmup Iteration  27: 27014138.386 ops/s
# Warmup Iteration  28: 27135368.994 ops/s
# Warmup Iteration  29: 27092873.311 ops/s
# Warmup Iteration  30: 27225877.355 ops/s
Iteration   1: 27108516.617 ops/s
Iteration   2: 27207887.780 ops/s
Iteration   3: 26570559.808 ops/s
Iteration   4: 26495928.990 ops/s
Iteration   5: 27290245.939 ops/s
Iteration   6: 27192275.497 ops/s
Iteration   7: 27098808.289 ops/s
Iteration   8: 27082937.204 ops/s
Iteration   9: 27150744.412 ops/s
Iteration  10: 27197130.045 ops/s
Iteration  11: 26735210.085 ops/s
Iteration  12: 27253302.486 ops/s
Iteration  13: 26769512.472 ops/s
Iteration  14: 27095687.870 ops/s
Iteration  15: 27112929.705 ops/s
Iteration  16: 27041459.088 ops/s
Iteration  17: 27093093.327 ops/s
Iteration  18: 27150300.230 ops/s
Iteration  19: 27085071.493 ops/s
Iteration  20: 27175412.017 ops/s
Iteration  21: 27016269.309 ops/s
Iteration  22: 27146494.128 ops/s
Iteration  23: 27145216.977 ops/s
Iteration  24: 27030378.611 ops/s
Iteration  25: 26991317.805 ops/s
Iteration  26: 27103735.746 ops/s
Iteration  27: 26837269.216 ops/s
Iteration  28: 27108078.513 ops/s
Iteration  29: 26949306.319 ops/s
Iteration  30: 27083775.272 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_get":
  27043961.842 ±(99.9%) 125150.816 ops/s [Average]
  (min, avg, max) = (26495928.990, 27043961.842, 27290245.939), stdev = 187319.864
  CI (99.9%): [26918811.026, 27169112.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_get  thrpt   30  27043961.842 ± 125150.816  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11912449.883 ops/s
# Warmup Iteration   2: 20966709.585 ops/s
# Warmup Iteration   3: 21614652.238 ops/s
# Warmup Iteration   4: 23284444.552 ops/s
# Warmup Iteration   5: 23214197.957 ops/s
# Warmup Iteration   6: 23273360.019 ops/s
# Warmup Iteration   7: 23145297.880 ops/s
# Warmup Iteration   8: 23115586.363 ops/s
# Warmup Iteration   9: 23077854.058 ops/s
# Warmup Iteration  10: 23353586.953 ops/s
# Warmup Iteration  11: 23264341.505 ops/s
# Warmup Iteration  12: 23162840.811 ops/s
# Warmup Iteration  13: 23283844.162 ops/s
# Warmup Iteration  14: 23313735.506 ops/s
# Warmup Iteration  15: 23281058.750 ops/s
# Warmup Iteration  16: 23160895.873 ops/s
# Warmup Iteration  17: 23276829.959 ops/s
# Warmup Iteration  18: 23271938.163 ops/s
# Warmup Iteration  19: 23289945.651 ops/s
# Warmup Iteration  20: 23345162.751 ops/s
# Warmup Iteration  21: 23261214.166 ops/s
# Warmup Iteration  22: 23400669.218 ops/s
# Warmup Iteration  23: 23300243.804 ops/s
# Warmup Iteration  24: 23077229.869 ops/s
# Warmup Iteration  25: 23185966.845 ops/s
# Warmup Iteration  26: 23283701.416 ops/s
# Warmup Iteration  27: 23354660.071 ops/s
# Warmup Iteration  28: 22958336.848 ops/s
# Warmup Iteration  29: 23282998.767 ops/s
# Warmup Iteration  30: 23138081.567 ops/s
Iteration   1: 23350550.012 ops/s
Iteration   2: 23435294.079 ops/s
Iteration   3: 23423623.102 ops/s
Iteration   4: 22991573.141 ops/s
Iteration   5: 23340826.121 ops/s
Iteration   6: 23191376.766 ops/s
Iteration   7: 23261836.064 ops/s
Iteration   8: 23392552.587 ops/s
Iteration   9: 23216326.332 ops/s
Iteration  10: 23189435.982 ops/s
Iteration  11: 23182620.977 ops/s
Iteration  12: 23331669.406 ops/s
Iteration  13: 23375677.507 ops/s
Iteration  14: 23472281.161 ops/s
Iteration  15: 23269783.172 ops/s
Iteration  16: 23358505.991 ops/s
Iteration  17: 23380754.873 ops/s
Iteration  18: 23313682.161 ops/s
Iteration  19: 22870299.665 ops/s
Iteration  20: 23311486.955 ops/s
Iteration  21: 23259293.687 ops/s
Iteration  22: 23283964.157 ops/s
Iteration  23: 23322910.569 ops/s
Iteration  24: 23431319.729 ops/s
Iteration  25: 23299919.096 ops/s
Iteration  26: 23338130.841 ops/s
Iteration  27: 23174911.652 ops/s
Iteration  28: 23153495.459 ops/s
Iteration  29: 23218408.978 ops/s
Iteration  30: 23321737.536 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_getFirst":
  23282141.592 ±(99.9%) 85578.326 ops/s [Average]
  (min, avg, max) = (22870299.665, 23282141.592, 23472281.161), stdev = 128089.620
  CI (99.9%): [23196563.265, 23367719.918] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_getFirst  thrpt   30  23282141.592 ± 85578.326  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_getFirst_emptyList_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_getFirst_emptyList_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 726794.581 ops/s
# Warmup Iteration   2: 737717.608 ops/s
# Warmup Iteration   3: 944796.088 ops/s
# Warmup Iteration   4: 971561.970 ops/s
# Warmup Iteration   5: 971836.423 ops/s
# Warmup Iteration   6: 971793.778 ops/s
# Warmup Iteration   7: 960799.209 ops/s
# Warmup Iteration   8: 963641.462 ops/s
# Warmup Iteration   9: 969868.204 ops/s
# Warmup Iteration  10: 962667.869 ops/s
# Warmup Iteration  11: 969941.866 ops/s
# Warmup Iteration  12: 863165.607 ops/s
# Warmup Iteration  13: 919254.963 ops/s
# Warmup Iteration  14: 969948.366 ops/s
# Warmup Iteration  15: 960271.444 ops/s
# Warmup Iteration  16: 961788.333 ops/s
# Warmup Iteration  17: 1014836.610 ops/s
# Warmup Iteration  18: 1025690.088 ops/s
# Warmup Iteration  19: 1024059.171 ops/s
# Warmup Iteration  20: 1021169.579 ops/s
# Warmup Iteration  21: 1020517.706 ops/s
# Warmup Iteration  22: 1019233.092 ops/s
# Warmup Iteration  23: 1020791.022 ops/s
# Warmup Iteration  24: 1025662.602 ops/s
# Warmup Iteration  25: 1018074.839 ops/s
# Warmup Iteration  26: 1026819.929 ops/s
# Warmup Iteration  27: 1014130.345 ops/s
# Warmup Iteration  28: 1025567.136 ops/s
# Warmup Iteration  29: 1024389.046 ops/s
# Warmup Iteration  30: 1026420.930 ops/s
Iteration   1: 1027030.006 ops/s
Iteration   2: 1030541.061 ops/s
Iteration   3: 1029463.979 ops/s
Iteration   4: 1023712.401 ops/s
Iteration   5: 1021320.092 ops/s
Iteration   6: 1024633.222 ops/s
Iteration   7: 1022358.254 ops/s
Iteration   8: 1019273.736 ops/s
Iteration   9: 1023314.303 ops/s
Iteration  10: 1027423.363 ops/s
Iteration  11: 1016559.667 ops/s
Iteration  12: 1020675.646 ops/s
Iteration  13: 1007267.376 ops/s
Iteration  14: 1008446.679 ops/s
Iteration  15: 1023937.438 ops/s
Iteration  16: 1024017.747 ops/s
Iteration  17: 1027221.268 ops/s
Iteration  18: 1022444.700 ops/s
Iteration  19: 1020724.394 ops/s
Iteration  20: 1023961.491 ops/s
Iteration  21: 1021006.671 ops/s
Iteration  22: 980017.512 ops/s
Iteration  23: 1020867.805 ops/s
Iteration  24: 1021521.503 ops/s
Iteration  25: 1022298.701 ops/s
Iteration  26: 1025648.965 ops/s
Iteration  27: 1030339.323 ops/s
Iteration  28: 1012627.430 ops/s
Iteration  29: 1025246.096 ops/s
Iteration  30: 1024688.317 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_getFirst_emptyList_throws":
  1020952.972 ±(99.9%) 6321.911 ops/s [Average]
  (min, avg, max) = (980017.512, 1020952.972, 1030541.061), stdev = 9462.340
  CI (99.9%): [1014631.060, 1027274.883] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_getFirst_emptyList_throws  thrpt   30  1020952.972 ± 6321.911  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8112306.486 ops/s
# Warmup Iteration   2: 13759967.973 ops/s
# Warmup Iteration   3: 14990467.394 ops/s
# Warmup Iteration   4: 15447141.885 ops/s
# Warmup Iteration   5: 15462010.835 ops/s
# Warmup Iteration   6: 15568850.205 ops/s
# Warmup Iteration   7: 15552090.974 ops/s
# Warmup Iteration   8: 15662934.293 ops/s
# Warmup Iteration   9: 15605359.809 ops/s
# Warmup Iteration  10: 15615741.785 ops/s
# Warmup Iteration  11: 15682307.164 ops/s
# Warmup Iteration  12: 15389590.333 ops/s
# Warmup Iteration  13: 15669339.056 ops/s
# Warmup Iteration  14: 15546909.057 ops/s
# Warmup Iteration  15: 15586797.604 ops/s
# Warmup Iteration  16: 15569944.284 ops/s
# Warmup Iteration  17: 15606131.329 ops/s
# Warmup Iteration  18: 15628788.883 ops/s
# Warmup Iteration  19: 15598275.771 ops/s
# Warmup Iteration  20: 15624334.790 ops/s
# Warmup Iteration  21: 15577126.233 ops/s
# Warmup Iteration  22: 15477423.265 ops/s
# Warmup Iteration  23: 15684429.678 ops/s
# Warmup Iteration  24: 15359333.103 ops/s
# Warmup Iteration  25: 15571894.638 ops/s
# Warmup Iteration  26: 15584631.175 ops/s
# Warmup Iteration  27: 15407539.267 ops/s
# Warmup Iteration  28: 15414828.990 ops/s
# Warmup Iteration  29: 15512436.184 ops/s
# Warmup Iteration  30: 15559503.083 ops/s
Iteration   1: 15656360.433 ops/s
Iteration   2: 15620826.181 ops/s
Iteration   3: 15644574.974 ops/s
Iteration   4: 15580043.133 ops/s
Iteration   5: 15714044.248 ops/s
Iteration   6: 15655474.045 ops/s
Iteration   7: 15415508.415 ops/s
Iteration   8: 15589375.669 ops/s
Iteration   9: 15587132.859 ops/s
Iteration  10: 15635190.878 ops/s
Iteration  11: 15678599.020 ops/s
Iteration  12: 15607016.841 ops/s
Iteration  13: 15617808.080 ops/s
Iteration  14: 15551500.162 ops/s
Iteration  15: 15678200.526 ops/s
Iteration  16: 15403530.594 ops/s
Iteration  17: 15471712.461 ops/s
Iteration  18: 15676480.402 ops/s
Iteration  19: 15646515.784 ops/s
Iteration  20: 15692197.577 ops/s
Iteration  21: 15693846.885 ops/s
Iteration  22: 15617523.216 ops/s
Iteration  23: 15606523.200 ops/s
Iteration  24: 15607327.857 ops/s
Iteration  25: 15617702.474 ops/s
Iteration  26: 15671062.147 ops/s
Iteration  27: 15472802.029 ops/s
Iteration  28: 15749990.561 ops/s
Iteration  29: 15493748.153 ops/s
Iteration  30: 15611470.817 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_getLast":
  15608802.987 ±(99.9%) 56386.674 ops/s [Average]
  (min, avg, max) = (15403530.594, 15608802.987, 15749990.561), stdev = 84396.926
  CI (99.9%): [15552416.313, 15665189.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_getLast  thrpt   30  15608802.987 ± 56386.674  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_getLast_emptyList_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_getLast_emptyList_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 722485.289 ops/s
# Warmup Iteration   2: 738899.964 ops/s
# Warmup Iteration   3: 949021.045 ops/s
# Warmup Iteration   4: 968382.306 ops/s
# Warmup Iteration   5: 969753.628 ops/s
# Warmup Iteration   6: 966997.674 ops/s
# Warmup Iteration   7: 969936.296 ops/s
# Warmup Iteration   8: 963399.769 ops/s
# Warmup Iteration   9: 964795.997 ops/s
# Warmup Iteration  10: 958028.210 ops/s
# Warmup Iteration  11: 964855.641 ops/s
# Warmup Iteration  12: 866345.073 ops/s
# Warmup Iteration  13: 913813.020 ops/s
# Warmup Iteration  14: 951536.001 ops/s
# Warmup Iteration  15: 965299.249 ops/s
# Warmup Iteration  16: 968366.115 ops/s
# Warmup Iteration  17: 1030879.195 ops/s
# Warmup Iteration  18: 1023063.525 ops/s
# Warmup Iteration  19: 1029459.818 ops/s
# Warmup Iteration  20: 1008633.841 ops/s
# Warmup Iteration  21: 1025458.428 ops/s
# Warmup Iteration  22: 1031350.274 ops/s
# Warmup Iteration  23: 1034814.732 ops/s
# Warmup Iteration  24: 1032250.106 ops/s
# Warmup Iteration  25: 1027324.231 ops/s
# Warmup Iteration  26: 1029891.434 ops/s
# Warmup Iteration  27: 1030306.386 ops/s
# Warmup Iteration  28: 1024861.831 ops/s
# Warmup Iteration  29: 1031547.901 ops/s
# Warmup Iteration  30: 1024596.922 ops/s
Iteration   1: 1030727.483 ops/s
Iteration   2: 1014093.372 ops/s
Iteration   3: 1029494.972 ops/s
Iteration   4: 1016829.129 ops/s
Iteration   5: 1026557.706 ops/s
Iteration   6: 1030729.172 ops/s
Iteration   7: 1008242.789 ops/s
Iteration   8: 1032279.898 ops/s
Iteration   9: 1024832.830 ops/s
Iteration  10: 1026943.900 ops/s
Iteration  11: 1034370.513 ops/s
Iteration  12: 1037737.536 ops/s
Iteration  13: 1028528.323 ops/s
Iteration  14: 1036595.744 ops/s
Iteration  15: 1030616.886 ops/s
Iteration  16: 1011877.315 ops/s
Iteration  17: 997616.052 ops/s
Iteration  18: 1026435.163 ops/s
Iteration  19: 1035190.032 ops/s
Iteration  20: 1034376.714 ops/s
Iteration  21: 1027701.753 ops/s
Iteration  22: 1028838.265 ops/s
Iteration  23: 1022431.427 ops/s
Iteration  24: 1025114.245 ops/s
Iteration  25: 1027273.272 ops/s
Iteration  26: 1034420.787 ops/s
Iteration  27: 1017453.195 ops/s
Iteration  28: 1027724.158 ops/s
Iteration  29: 1029320.587 ops/s
Iteration  30: 1022368.705 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_getLast_emptyList_throws":
  1025890.731 ±(99.9%) 6007.543 ops/s [Average]
  (min, avg, max) = (997616.052, 1025890.731, 1037737.536), stdev = 8991.808
  CI (99.9%): [1019883.188, 1031898.274] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_getLast_emptyList_throws  thrpt   30  1025890.731 ± 6007.543  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_get_throws_empty_list$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_get_throws_empty_list

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 721518.897 ops/s
# Warmup Iteration   2: 745737.521 ops/s
# Warmup Iteration   3: 965340.688 ops/s
# Warmup Iteration   4: 985019.702 ops/s
# Warmup Iteration   5: 989606.655 ops/s
# Warmup Iteration   6: 981942.277 ops/s
# Warmup Iteration   7: 987734.640 ops/s
# Warmup Iteration   8: 981687.335 ops/s
# Warmup Iteration   9: 981277.985 ops/s
# Warmup Iteration  10: 975966.365 ops/s
# Warmup Iteration  11: 990013.625 ops/s
# Warmup Iteration  12: 838254.837 ops/s
# Warmup Iteration  13: 959029.340 ops/s
# Warmup Iteration  14: 979641.425 ops/s
# Warmup Iteration  15: 981121.121 ops/s
# Warmup Iteration  16: 987894.005 ops/s
# Warmup Iteration  17: 1039731.353 ops/s
# Warmup Iteration  18: 1045865.619 ops/s
# Warmup Iteration  19: 1046914.049 ops/s
# Warmup Iteration  20: 1043369.341 ops/s
# Warmup Iteration  21: 1039877.267 ops/s
# Warmup Iteration  22: 1035900.598 ops/s
# Warmup Iteration  23: 1043789.654 ops/s
# Warmup Iteration  24: 1042359.232 ops/s
# Warmup Iteration  25: 1041185.396 ops/s
# Warmup Iteration  26: 1042862.792 ops/s
# Warmup Iteration  27: 1032581.538 ops/s
# Warmup Iteration  28: 1038217.891 ops/s
# Warmup Iteration  29: 1042997.464 ops/s
# Warmup Iteration  30: 1042138.902 ops/s
Iteration   1: 1047509.016 ops/s
Iteration   2: 1044094.173 ops/s
Iteration   3: 1047414.219 ops/s
Iteration   4: 1034466.227 ops/s
Iteration   5: 1036504.493 ops/s
Iteration   6: 1048701.449 ops/s
Iteration   7: 1036574.818 ops/s
Iteration   8: 1042928.689 ops/s
Iteration   9: 1045388.792 ops/s
Iteration  10: 1042141.947 ops/s
Iteration  11: 1042975.859 ops/s
Iteration  12: 1044302.837 ops/s
Iteration  13: 1044333.578 ops/s
Iteration  14: 1037633.673 ops/s
Iteration  15: 1041861.525 ops/s
Iteration  16: 1039090.123 ops/s
Iteration  17: 1042130.760 ops/s
Iteration  18: 1041909.677 ops/s
Iteration  19: 1041294.785 ops/s
Iteration  20: 1041381.274 ops/s
Iteration  21: 1042661.336 ops/s
Iteration  22: 1027255.958 ops/s
Iteration  23: 1044982.014 ops/s
Iteration  24: 1043393.893 ops/s
Iteration  25: 1043943.229 ops/s
Iteration  26: 1038257.646 ops/s
Iteration  27: 1045542.582 ops/s
Iteration  28: 1040392.927 ops/s
Iteration  29: 1046110.375 ops/s
Iteration  30: 1046775.592 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_get_throws_empty_list":
  1042065.116 ±(99.9%) 2985.369 ops/s [Average]
  (min, avg, max) = (1027255.958, 1042065.116, 1048701.449), stdev = 4468.359
  CI (99.9%): [1039079.747, 1045050.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_get_throws_empty_list  thrpt   30  1042065.116 ± 2985.369  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_get_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_get_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 722250.613 ops/s
# Warmup Iteration   2: 722686.586 ops/s
# Warmup Iteration   3: 970900.015 ops/s
# Warmup Iteration   4: 977860.322 ops/s
# Warmup Iteration   5: 970193.697 ops/s
# Warmup Iteration   6: 978167.954 ops/s
# Warmup Iteration   7: 978788.188 ops/s
# Warmup Iteration   8: 966080.157 ops/s
# Warmup Iteration   9: 978245.698 ops/s
# Warmup Iteration  10: 982778.985 ops/s
# Warmup Iteration  11: 969218.474 ops/s
# Warmup Iteration  12: 822064.998 ops/s
# Warmup Iteration  13: 979004.588 ops/s
# Warmup Iteration  14: 969362.387 ops/s
# Warmup Iteration  15: 979029.132 ops/s
# Warmup Iteration  16: 973054.953 ops/s
# Warmup Iteration  17: 1042261.242 ops/s
# Warmup Iteration  18: 1040206.353 ops/s
# Warmup Iteration  19: 1034705.045 ops/s
# Warmup Iteration  20: 1039412.147 ops/s
# Warmup Iteration  21: 1043802.862 ops/s
# Warmup Iteration  22: 1043986.791 ops/s
# Warmup Iteration  23: 1040493.742 ops/s
# Warmup Iteration  24: 1043605.257 ops/s
# Warmup Iteration  25: 1040325.815 ops/s
# Warmup Iteration  26: 1024310.003 ops/s
# Warmup Iteration  27: 1043120.754 ops/s
# Warmup Iteration  28: 1042000.620 ops/s
# Warmup Iteration  29: 1029806.495 ops/s
# Warmup Iteration  30: 1029431.543 ops/s
Iteration   1: 1044347.726 ops/s
Iteration   2: 1033085.025 ops/s
Iteration   3: 1038214.377 ops/s
Iteration   4: 1038465.656 ops/s
Iteration   5: 1044949.987 ops/s
Iteration   6: 1035665.364 ops/s
Iteration   7: 1038253.696 ops/s
Iteration   8: 1043739.913 ops/s
Iteration   9: 1038163.773 ops/s
Iteration  10: 1026558.026 ops/s
Iteration  11: 1038481.064 ops/s
Iteration  12: 1043141.814 ops/s
Iteration  13: 1045184.172 ops/s
Iteration  14: 1039914.821 ops/s
Iteration  15: 1040972.287 ops/s
Iteration  16: 1026844.143 ops/s
Iteration  17: 1040896.698 ops/s
Iteration  18: 1040225.423 ops/s
Iteration  19: 1036971.797 ops/s
Iteration  20: 1040110.486 ops/s
Iteration  21: 1022525.960 ops/s
Iteration  22: 1043155.230 ops/s
Iteration  23: 1027334.847 ops/s
Iteration  24: 1039804.575 ops/s
Iteration  25: 1036931.980 ops/s
Iteration  26: 1037662.027 ops/s
Iteration  27: 1038707.146 ops/s
Iteration  28: 1036213.317 ops/s
Iteration  29: 1038505.168 ops/s
Iteration  30: 1041205.562 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_get_throws_index_greater_than_size":
  1037874.402 ±(99.9%) 3751.914 ops/s [Average]
  (min, avg, max) = (1022525.960, 1037874.402, 1045184.172), stdev = 5615.688
  CI (99.9%): [1034122.488, 1041626.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_get_throws_index_greater_than_size  thrpt   30  1037874.402 ± 3751.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_get_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_get_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724695.266 ops/s
# Warmup Iteration   2: 737409.631 ops/s
# Warmup Iteration   3: 976446.252 ops/s
# Warmup Iteration   4: 983496.950 ops/s
# Warmup Iteration   5: 983696.737 ops/s
# Warmup Iteration   6: 981235.896 ops/s
# Warmup Iteration   7: 988858.964 ops/s
# Warmup Iteration   8: 983035.931 ops/s
# Warmup Iteration   9: 990750.265 ops/s
# Warmup Iteration  10: 976392.057 ops/s
# Warmup Iteration  11: 959907.283 ops/s
# Warmup Iteration  12: 852831.099 ops/s
# Warmup Iteration  13: 984872.868 ops/s
# Warmup Iteration  14: 975937.670 ops/s
# Warmup Iteration  15: 971477.097 ops/s
# Warmup Iteration  16: 986190.083 ops/s
# Warmup Iteration  17: 1048211.695 ops/s
# Warmup Iteration  18: 1045514.941 ops/s
# Warmup Iteration  19: 1042146.642 ops/s
# Warmup Iteration  20: 1043699.402 ops/s
# Warmup Iteration  21: 1044269.721 ops/s
# Warmup Iteration  22: 1042281.569 ops/s
# Warmup Iteration  23: 1038336.165 ops/s
# Warmup Iteration  24: 1047684.929 ops/s
# Warmup Iteration  25: 1044875.250 ops/s
# Warmup Iteration  26: 1033979.508 ops/s
# Warmup Iteration  27: 1036369.611 ops/s
# Warmup Iteration  28: 1045947.161 ops/s
# Warmup Iteration  29: 1043719.343 ops/s
# Warmup Iteration  30: 1024932.730 ops/s
Iteration   1: 1046359.383 ops/s
Iteration   2: 1040865.977 ops/s
Iteration   3: 1046170.794 ops/s
Iteration   4: 1040137.092 ops/s
Iteration   5: 1045985.098 ops/s
Iteration   6: 1038948.213 ops/s
Iteration   7: 1033735.546 ops/s
Iteration   8: 1042134.015 ops/s
Iteration   9: 1042914.145 ops/s
Iteration  10: 1044158.171 ops/s
Iteration  11: 1038487.782 ops/s
Iteration  12: 1043456.637 ops/s
Iteration  13: 1028667.829 ops/s
Iteration  14: 1041826.613 ops/s
Iteration  15: 1048580.808 ops/s
Iteration  16: 1044256.867 ops/s
Iteration  17: 1045252.172 ops/s
Iteration  18: 1046030.198 ops/s
Iteration  19: 1026703.346 ops/s
Iteration  20: 1046631.830 ops/s
Iteration  21: 1044758.656 ops/s
Iteration  22: 1044220.634 ops/s
Iteration  23: 1042301.579 ops/s
Iteration  24: 1040458.265 ops/s
Iteration  25: 1043469.304 ops/s
Iteration  26: 1044818.618 ops/s
Iteration  27: 1046738.374 ops/s
Iteration  28: 1051796.772 ops/s
Iteration  29: 1043704.970 ops/s
Iteration  30: 1032654.963 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_get_throws_index_negative":
  1042207.488 ±(99.9%) 3712.741 ops/s [Average]
  (min, avg, max) = (1026703.346, 1042207.488, 1051796.772), stdev = 5557.056
  CI (99.9%): [1038494.748, 1045920.229] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_get_throws_index_negative  thrpt   30  1042207.488 ± 3712.741  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8608570.292 ops/s
# Warmup Iteration   2: 13999310.035 ops/s
# Warmup Iteration   3: 16162802.844 ops/s
# Warmup Iteration   4: 16330264.918 ops/s
# Warmup Iteration   5: 16354987.191 ops/s
# Warmup Iteration   6: 16325578.733 ops/s
# Warmup Iteration   7: 16322692.239 ops/s
# Warmup Iteration   8: 16245652.596 ops/s
# Warmup Iteration   9: 16375832.239 ops/s
# Warmup Iteration  10: 16396259.210 ops/s
# Warmup Iteration  11: 16325265.895 ops/s
# Warmup Iteration  12: 16334805.279 ops/s
# Warmup Iteration  13: 16233185.036 ops/s
# Warmup Iteration  14: 16378138.806 ops/s
# Warmup Iteration  15: 16421636.426 ops/s
# Warmup Iteration  16: 16280157.091 ops/s
# Warmup Iteration  17: 16401354.607 ops/s
# Warmup Iteration  18: 16225071.560 ops/s
# Warmup Iteration  19: 16323725.552 ops/s
# Warmup Iteration  20: 16324611.699 ops/s
# Warmup Iteration  21: 16331539.839 ops/s
# Warmup Iteration  22: 16374425.601 ops/s
# Warmup Iteration  23: 16263297.657 ops/s
# Warmup Iteration  24: 16292335.020 ops/s
# Warmup Iteration  25: 16275545.283 ops/s
# Warmup Iteration  26: 16433744.295 ops/s
# Warmup Iteration  27: 16301376.288 ops/s
# Warmup Iteration  28: 16397447.119 ops/s
# Warmup Iteration  29: 16367063.394 ops/s
# Warmup Iteration  30: 16319996.968 ops/s
Iteration   1: 16348540.963 ops/s
Iteration   2: 16443142.780 ops/s
Iteration   3: 16131588.796 ops/s
Iteration   4: 16447417.235 ops/s
Iteration   5: 16370938.246 ops/s
Iteration   6: 16429438.774 ops/s
Iteration   7: 16187422.034 ops/s
Iteration   8: 16220562.659 ops/s
Iteration   9: 15941045.271 ops/s
Iteration  10: 16412172.066 ops/s
Iteration  11: 16189181.476 ops/s
Iteration  12: 16104844.064 ops/s
Iteration  13: 16366289.477 ops/s
Iteration  14: 16376216.764 ops/s
Iteration  15: 16344189.778 ops/s
Iteration  16: 16361492.923 ops/s
Iteration  17: 16393598.878 ops/s
Iteration  18: 16345336.997 ops/s
Iteration  19: 16332918.485 ops/s
Iteration  20: 16358859.515 ops/s
Iteration  21: 16116055.754 ops/s
Iteration  22: 16097606.008 ops/s
Iteration  23: 16371184.460 ops/s
Iteration  24: 16430701.885 ops/s
Iteration  25: 16450977.794 ops/s
Iteration  26: 16358462.693 ops/s
Iteration  27: 16218124.049 ops/s
Iteration  28: 16308652.137 ops/s
Iteration  29: 16439406.983 ops/s
Iteration  30: 16480172.181 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_indexOf":
  16312551.371 ±(99.9%) 88940.326 ops/s [Average]
  (min, avg, max) = (15941045.271, 16312551.371, 16480172.181), stdev = 133121.703
  CI (99.9%): [16223611.045, 16401491.697] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_indexOf  thrpt   30  16312551.371 ± 88940.326  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10556041.170 ops/s
# Warmup Iteration   2: 23732675.951 ops/s
# Warmup Iteration   3: 22006284.428 ops/s
# Warmup Iteration   4: 23024757.248 ops/s
# Warmup Iteration   5: 24763925.295 ops/s
# Warmup Iteration   6: 24557294.852 ops/s
# Warmup Iteration   7: 24519432.885 ops/s
# Warmup Iteration   8: 24723677.208 ops/s
# Warmup Iteration   9: 24785601.101 ops/s
# Warmup Iteration  10: 24685228.041 ops/s
# Warmup Iteration  11: 24800843.215 ops/s
# Warmup Iteration  12: 24821570.578 ops/s
# Warmup Iteration  13: 24685052.663 ops/s
# Warmup Iteration  14: 24403143.149 ops/s
# Warmup Iteration  15: 24653623.949 ops/s
# Warmup Iteration  16: 24709256.745 ops/s
# Warmup Iteration  17: 24615329.681 ops/s
# Warmup Iteration  18: 24613668.447 ops/s
# Warmup Iteration  19: 24523616.779 ops/s
# Warmup Iteration  20: 24787596.038 ops/s
# Warmup Iteration  21: 24734298.389 ops/s
# Warmup Iteration  22: 24733078.157 ops/s
# Warmup Iteration  23: 24726500.456 ops/s
# Warmup Iteration  24: 24641406.411 ops/s
# Warmup Iteration  25: 24785900.147 ops/s
# Warmup Iteration  26: 24615071.522 ops/s
# Warmup Iteration  27: 24754816.437 ops/s
# Warmup Iteration  28: 24696512.792 ops/s
# Warmup Iteration  29: 24739863.313 ops/s
# Warmup Iteration  30: 24606409.265 ops/s
Iteration   1: 24459005.120 ops/s
Iteration   2: 24824063.287 ops/s
Iteration   3: 24789788.355 ops/s
Iteration   4: 24722067.516 ops/s
Iteration   5: 24746720.082 ops/s
Iteration   6: 24603634.530 ops/s
Iteration   7: 24855572.433 ops/s
Iteration   8: 24818970.978 ops/s
Iteration   9: 24694948.450 ops/s
Iteration  10: 24770645.554 ops/s
Iteration  11: 24735077.122 ops/s
Iteration  12: 24706130.429 ops/s
Iteration  13: 24188733.394 ops/s
Iteration  14: 24686343.161 ops/s
Iteration  15: 24750515.202 ops/s
Iteration  16: 24779701.056 ops/s
Iteration  17: 24637004.241 ops/s
Iteration  18: 24733461.578 ops/s
Iteration  19: 24329150.564 ops/s
Iteration  20: 24662407.729 ops/s
Iteration  21: 24655495.022 ops/s
Iteration  22: 24656441.650 ops/s
Iteration  23: 24684303.866 ops/s
Iteration  24: 24787633.455 ops/s
Iteration  25: 24691636.667 ops/s
Iteration  26: 24849666.708 ops/s
Iteration  27: 24781499.330 ops/s
Iteration  28: 24408624.469 ops/s
Iteration  29: 24487614.217 ops/s
Iteration  30: 24803916.029 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_injectInto":
  24676692.406 ±(99.9%) 105131.761 ops/s [Average]
  (min, avg, max) = (24188733.394, 24676692.406, 24855572.433), stdev = 157356.282
  CI (99.9%): [24571560.645, 24781824.167] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_injectInto  thrpt   30  24676692.406 ± 105131.761  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_injectIntoWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_injectIntoWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10267196.233 ops/s
# Warmup Iteration   2: 33180995.550 ops/s
# Warmup Iteration   3: 28434642.063 ops/s
# Warmup Iteration   4: 33888073.601 ops/s
# Warmup Iteration   5: 33934731.457 ops/s
# Warmup Iteration   6: 33905603.109 ops/s
# Warmup Iteration   7: 33765684.514 ops/s
# Warmup Iteration   8: 33918068.948 ops/s
# Warmup Iteration   9: 33829914.613 ops/s
# Warmup Iteration  10: 33773324.338 ops/s
# Warmup Iteration  11: 33921618.964 ops/s
# Warmup Iteration  12: 33876186.806 ops/s
# Warmup Iteration  13: 34053896.248 ops/s
# Warmup Iteration  14: 33688518.971 ops/s
# Warmup Iteration  15: 34050141.861 ops/s
# Warmup Iteration  16: 33924154.311 ops/s
# Warmup Iteration  17: 33743074.520 ops/s
# Warmup Iteration  18: 33628199.815 ops/s
# Warmup Iteration  19: 33845301.319 ops/s
# Warmup Iteration  20: 34018951.375 ops/s
# Warmup Iteration  21: 33727373.511 ops/s
# Warmup Iteration  22: 33786262.593 ops/s
# Warmup Iteration  23: 33381164.612 ops/s
# Warmup Iteration  24: 33761048.347 ops/s
# Warmup Iteration  25: 33837267.753 ops/s
# Warmup Iteration  26: 34024438.765 ops/s
# Warmup Iteration  27: 33538930.235 ops/s
# Warmup Iteration  28: 33827743.236 ops/s
# Warmup Iteration  29: 33847487.796 ops/s
# Warmup Iteration  30: 33945099.347 ops/s
Iteration   1: 33876161.694 ops/s
Iteration   2: 33980948.296 ops/s
Iteration   3: 33840895.990 ops/s
Iteration   4: 33947616.810 ops/s
Iteration   5: 34012021.407 ops/s
Iteration   6: 33775718.199 ops/s
Iteration   7: 33903889.934 ops/s
Iteration   8: 33972862.687 ops/s
Iteration   9: 33949174.076 ops/s
Iteration  10: 33896005.177 ops/s
Iteration  11: 34001538.492 ops/s
Iteration  12: 33493515.848 ops/s
Iteration  13: 33966032.263 ops/s
Iteration  14: 34079009.480 ops/s
Iteration  15: 33853617.667 ops/s
Iteration  16: 33368594.630 ops/s
Iteration  17: 33945442.431 ops/s
Iteration  18: 33917118.609 ops/s
Iteration  19: 33821798.529 ops/s
Iteration  20: 33809632.971 ops/s
Iteration  21: 33932537.376 ops/s
Iteration  22: 33834989.012 ops/s
Iteration  23: 33977064.014 ops/s
Iteration  24: 33941325.890 ops/s
Iteration  25: 33741458.696 ops/s
Iteration  26: 33886063.159 ops/s
Iteration  27: 33866906.944 ops/s
Iteration  28: 34006804.558 ops/s
Iteration  29: 33917959.266 ops/s
Iteration  30: 33828677.986 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_injectIntoWithIndex":
  33878179.403 ±(99.9%) 96392.564 ops/s [Average]
  (min, avg, max) = (33368594.630, 33878179.403, 34079009.480), stdev = 144275.862
  CI (99.9%): [33781786.839, 33974571.967] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_injectIntoWithIndex  thrpt   30  33878179.403 ± 96392.564  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1241430.295 ops/s
# Warmup Iteration   2: 2413838.402 ops/s
# Warmup Iteration   3: 2612448.808 ops/s
# Warmup Iteration   4: 3050387.293 ops/s
# Warmup Iteration   5: 3025843.964 ops/s
# Warmup Iteration   6: 3020621.434 ops/s
# Warmup Iteration   7: 3009973.035 ops/s
# Warmup Iteration   8: 3031755.414 ops/s
# Warmup Iteration   9: 3041325.236 ops/s
# Warmup Iteration  10: 3040283.724 ops/s
# Warmup Iteration  11: 3016582.754 ops/s
# Warmup Iteration  12: 3055159.697 ops/s
# Warmup Iteration  13: 3029158.626 ops/s
# Warmup Iteration  14: 3047640.240 ops/s
# Warmup Iteration  15: 3041910.252 ops/s
# Warmup Iteration  16: 3053067.348 ops/s
# Warmup Iteration  17: 3012046.955 ops/s
# Warmup Iteration  18: 3022727.555 ops/s
# Warmup Iteration  19: 3028263.216 ops/s
# Warmup Iteration  20: 3034153.826 ops/s
# Warmup Iteration  21: 3032634.989 ops/s
# Warmup Iteration  22: 3042186.221 ops/s
# Warmup Iteration  23: 3024228.021 ops/s
# Warmup Iteration  24: 3049055.672 ops/s
# Warmup Iteration  25: 3017731.904 ops/s
# Warmup Iteration  26: 3027090.313 ops/s
# Warmup Iteration  27: 3049313.978 ops/s
# Warmup Iteration  28: 3044504.524 ops/s
# Warmup Iteration  29: 3042183.105 ops/s
# Warmup Iteration  30: 3026975.988 ops/s
Iteration   1: 3065423.551 ops/s
Iteration   2: 3022137.171 ops/s
Iteration   3: 3036201.528 ops/s
Iteration   4: 3038248.326 ops/s
Iteration   5: 3034732.843 ops/s
Iteration   6: 3041752.025 ops/s
Iteration   7: 3054200.170 ops/s
Iteration   8: 3065875.967 ops/s
Iteration   9: 3012307.193 ops/s
Iteration  10: 3051360.398 ops/s
Iteration  11: 3043588.654 ops/s
Iteration  12: 2995283.664 ops/s
Iteration  13: 3059732.038 ops/s
Iteration  14: 3041241.299 ops/s
Iteration  15: 3045856.750 ops/s
Iteration  16: 3018269.414 ops/s
Iteration  17: 3005878.598 ops/s
Iteration  18: 3010155.869 ops/s
Iteration  19: 2962378.673 ops/s
Iteration  20: 2998930.141 ops/s
Iteration  21: 3038420.544 ops/s
Iteration  22: 3015824.548 ops/s
Iteration  23: 3015012.532 ops/s
Iteration  24: 3049544.985 ops/s
Iteration  25: 2965065.714 ops/s
Iteration  26: 3038056.934 ops/s
Iteration  27: 3008336.264 ops/s
Iteration  28: 3011354.200 ops/s
Iteration  29: 3043087.893 ops/s
Iteration  30: 3023602.913 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_isEmpty":
  3027062.027 ±(99.9%) 17306.435 ops/s [Average]
  (min, avg, max) = (2962378.673, 3027062.027, 3065875.967), stdev = 25903.459
  CI (99.9%): [3009755.592, 3044368.461] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_isEmpty  thrpt   30  3027062.027 ± 17306.435  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 694426.387 ops/s
# Warmup Iteration   2: 713376.039 ops/s
# Warmup Iteration   3: 868224.966 ops/s
# Warmup Iteration   4: 910332.472 ops/s
# Warmup Iteration   5: 916087.787 ops/s
# Warmup Iteration   6: 915622.896 ops/s
# Warmup Iteration   7: 916360.865 ops/s
# Warmup Iteration   8: 917860.710 ops/s
# Warmup Iteration   9: 915905.011 ops/s
# Warmup Iteration  10: 915001.938 ops/s
# Warmup Iteration  11: 920116.159 ops/s
# Warmup Iteration  12: 914804.853 ops/s
# Warmup Iteration  13: 794707.063 ops/s
# Warmup Iteration  14: 876722.780 ops/s
# Warmup Iteration  15: 919082.843 ops/s
# Warmup Iteration  16: 916904.052 ops/s
# Warmup Iteration  17: 969938.763 ops/s
# Warmup Iteration  18: 970758.009 ops/s
# Warmup Iteration  19: 973592.046 ops/s
# Warmup Iteration  20: 969816.799 ops/s
# Warmup Iteration  21: 966255.332 ops/s
# Warmup Iteration  22: 969563.021 ops/s
# Warmup Iteration  23: 973217.853 ops/s
# Warmup Iteration  24: 964095.007 ops/s
# Warmup Iteration  25: 972384.546 ops/s
# Warmup Iteration  26: 961249.958 ops/s
# Warmup Iteration  27: 965485.920 ops/s
# Warmup Iteration  28: 965058.585 ops/s
# Warmup Iteration  29: 961311.437 ops/s
# Warmup Iteration  30: 968334.376 ops/s
Iteration   1: 971145.066 ops/s
Iteration   2: 961590.438 ops/s
Iteration   3: 938843.073 ops/s
Iteration   4: 973917.275 ops/s
Iteration   5: 968473.740 ops/s
Iteration   6: 969751.060 ops/s
Iteration   7: 970193.015 ops/s
Iteration   8: 965594.204 ops/s
Iteration   9: 967046.854 ops/s
Iteration  10: 969799.708 ops/s
Iteration  11: 973242.095 ops/s
Iteration  12: 969373.842 ops/s
Iteration  13: 954843.202 ops/s
Iteration  14: 969043.778 ops/s
Iteration  15: 962046.857 ops/s
Iteration  16: 977934.826 ops/s
Iteration  17: 968097.711 ops/s
Iteration  18: 966908.194 ops/s
Iteration  19: 966789.180 ops/s
Iteration  20: 975446.707 ops/s
Iteration  21: 973216.984 ops/s
Iteration  22: 953565.358 ops/s
Iteration  23: 970078.028 ops/s
Iteration  24: 973857.120 ops/s
Iteration  25: 968101.026 ops/s
Iteration  26: 966003.324 ops/s
Iteration  27: 977181.078 ops/s
Iteration  28: 969986.981 ops/s
Iteration  29: 969388.242 ops/s
Iteration  30: 975338.793 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws":
  967893.259 ±(99.9%) 5222.330 ops/s [Average]
  (min, avg, max) = (938843.073, 967893.259, 977934.826), stdev = 7816.538
  CI (99.9%): [962670.929, 973115.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws  thrpt   30  967893.259 ± 5222.330  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 758726.544 ops/s
# Warmup Iteration   2: 774731.694 ops/s
# Warmup Iteration   3: 975371.544 ops/s
# Warmup Iteration   4: 1002990.804 ops/s
# Warmup Iteration   5: 1010008.620 ops/s
# Warmup Iteration   6: 997635.296 ops/s
# Warmup Iteration   7: 1005769.524 ops/s
# Warmup Iteration   8: 999039.886 ops/s
# Warmup Iteration   9: 1002926.414 ops/s
# Warmup Iteration  10: 997286.266 ops/s
# Warmup Iteration  11: 1002377.649 ops/s
# Warmup Iteration  12: 980066.404 ops/s
# Warmup Iteration  13: 855884.753 ops/s
# Warmup Iteration  14: 998745.253 ops/s
# Warmup Iteration  15: 995254.463 ops/s
# Warmup Iteration  16: 1004572.118 ops/s
# Warmup Iteration  17: 1057689.590 ops/s
# Warmup Iteration  18: 1065551.872 ops/s
# Warmup Iteration  19: 1052881.491 ops/s
# Warmup Iteration  20: 1057159.936 ops/s
# Warmup Iteration  21: 1046886.033 ops/s
# Warmup Iteration  22: 1063518.002 ops/s
# Warmup Iteration  23: 1068762.928 ops/s
# Warmup Iteration  24: 1063110.728 ops/s
# Warmup Iteration  25: 1055147.945 ops/s
# Warmup Iteration  26: 1054031.269 ops/s
# Warmup Iteration  27: 1061855.209 ops/s
# Warmup Iteration  28: 1061617.084 ops/s
# Warmup Iteration  29: 1063279.528 ops/s
# Warmup Iteration  30: 1052930.658 ops/s
Iteration   1: 1058425.839 ops/s
Iteration   2: 1067227.043 ops/s
Iteration   3: 1054914.229 ops/s
Iteration   4: 1067322.755 ops/s
Iteration   5: 1063841.002 ops/s
Iteration   6: 1068855.601 ops/s
Iteration   7: 1064832.959 ops/s
Iteration   8: 1066688.819 ops/s
Iteration   9: 1064251.739 ops/s
Iteration  10: 1064779.055 ops/s
Iteration  11: 1057207.305 ops/s
Iteration  12: 1064137.205 ops/s
Iteration  13: 1063116.980 ops/s
Iteration  14: 1059656.774 ops/s
Iteration  15: 1052549.110 ops/s
Iteration  16: 1059543.452 ops/s
Iteration  17: 1063168.528 ops/s
Iteration  18: 1065259.598 ops/s
Iteration  19: 1060931.585 ops/s
Iteration  20: 1044412.905 ops/s
Iteration  21: 1060281.441 ops/s
Iteration  22: 1063819.777 ops/s
Iteration  23: 1061468.951 ops/s
Iteration  24: 1043032.128 ops/s
Iteration  25: 1046949.663 ops/s
Iteration  26: 1060610.140 ops/s
Iteration  27: 1062128.450 ops/s
Iteration  28: 1063078.941 ops/s
Iteration  29: 1066963.237 ops/s
Iteration  30: 1064260.456 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_emptyList":
  1060790.522 ±(99.9%) 4378.838 ops/s [Average]
  (min, avg, max) = (1043032.128, 1060790.522, 1068855.601), stdev = 6554.039
  CI (99.9%): [1056411.684, 1065169.360] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1060790.522 ± 4378.838  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700530.328 ops/s
# Warmup Iteration   2: 705081.639 ops/s
# Warmup Iteration   3: 860162.917 ops/s
# Warmup Iteration   4: 899618.087 ops/s
# Warmup Iteration   5: 907300.779 ops/s
# Warmup Iteration   6: 905174.545 ops/s
# Warmup Iteration   7: 909831.892 ops/s
# Warmup Iteration   8: 908215.067 ops/s
# Warmup Iteration   9: 911907.127 ops/s
# Warmup Iteration  10: 909135.984 ops/s
# Warmup Iteration  11: 910997.554 ops/s
# Warmup Iteration  12: 909279.428 ops/s
# Warmup Iteration  13: 814540.848 ops/s
# Warmup Iteration  14: 847295.308 ops/s
# Warmup Iteration  15: 905248.527 ops/s
# Warmup Iteration  16: 910401.183 ops/s
# Warmup Iteration  17: 962731.017 ops/s
# Warmup Iteration  18: 959762.337 ops/s
# Warmup Iteration  19: 956270.097 ops/s
# Warmup Iteration  20: 961974.602 ops/s
# Warmup Iteration  21: 956997.911 ops/s
# Warmup Iteration  22: 931522.220 ops/s
# Warmup Iteration  23: 962435.177 ops/s
# Warmup Iteration  24: 963883.219 ops/s
# Warmup Iteration  25: 962302.592 ops/s
# Warmup Iteration  26: 963498.340 ops/s
# Warmup Iteration  27: 961349.262 ops/s
# Warmup Iteration  28: 955383.811 ops/s
# Warmup Iteration  29: 957774.457 ops/s
# Warmup Iteration  30: 960066.919 ops/s
Iteration   1: 959826.839 ops/s
Iteration   2: 965485.077 ops/s
Iteration   3: 958545.107 ops/s
Iteration   4: 957864.630 ops/s
Iteration   5: 959938.901 ops/s
Iteration   6: 962112.491 ops/s
Iteration   7: 961964.277 ops/s
Iteration   8: 961671.406 ops/s
Iteration   9: 960708.016 ops/s
Iteration  10: 957805.791 ops/s
Iteration  11: 960238.518 ops/s
Iteration  12: 961941.766 ops/s
Iteration  13: 952403.448 ops/s
Iteration  14: 963368.457 ops/s
Iteration  15: 962507.529 ops/s
Iteration  16: 961109.727 ops/s
Iteration  17: 963753.776 ops/s
Iteration  18: 958021.800 ops/s
Iteration  19: 953449.242 ops/s
Iteration  20: 963595.646 ops/s
Iteration  21: 965077.678 ops/s
Iteration  22: 960441.317 ops/s
Iteration  23: 961431.257 ops/s
Iteration  24: 964077.343 ops/s
Iteration  25: 945107.053 ops/s
Iteration  26: 948472.002 ops/s
Iteration  27: 962849.978 ops/s
Iteration  28: 955878.834 ops/s
Iteration  29: 954476.759 ops/s
Iteration  30: 964403.115 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  959617.593 ±(99.9%) 3229.114 ops/s [Average]
  (min, avg, max) = (945107.053, 959617.593, 965485.077), stdev = 4833.186
  CI (99.9%): [956388.479, 962846.707] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  959617.593 ± 3229.114  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 734277.631 ops/s
# Warmup Iteration   2: 754571.199 ops/s
# Warmup Iteration   3: 960467.588 ops/s
# Warmup Iteration   4: 980297.149 ops/s
# Warmup Iteration   5: 986158.314 ops/s
# Warmup Iteration   6: 987972.396 ops/s
# Warmup Iteration   7: 986815.943 ops/s
# Warmup Iteration   8: 985371.462 ops/s
# Warmup Iteration   9: 980493.794 ops/s
# Warmup Iteration  10: 984810.621 ops/s
# Warmup Iteration  11: 984673.148 ops/s
# Warmup Iteration  12: 883799.604 ops/s
# Warmup Iteration  13: 914747.515 ops/s
# Warmup Iteration  14: 987665.351 ops/s
# Warmup Iteration  15: 972591.908 ops/s
# Warmup Iteration  16: 986013.767 ops/s
# Warmup Iteration  17: 1025488.003 ops/s
# Warmup Iteration  18: 1039267.097 ops/s
# Warmup Iteration  19: 1047029.130 ops/s
# Warmup Iteration  20: 1042604.218 ops/s
# Warmup Iteration  21: 1036084.115 ops/s
# Warmup Iteration  22: 1044262.194 ops/s
# Warmup Iteration  23: 1035520.990 ops/s
# Warmup Iteration  24: 1035140.581 ops/s
# Warmup Iteration  25: 1043876.226 ops/s
# Warmup Iteration  26: 1041382.387 ops/s
# Warmup Iteration  27: 1044211.828 ops/s
# Warmup Iteration  28: 1041653.074 ops/s
# Warmup Iteration  29: 1040756.063 ops/s
# Warmup Iteration  30: 1048465.442 ops/s
Iteration   1: 1045253.403 ops/s
Iteration   2: 1042886.856 ops/s
Iteration   3: 1040037.639 ops/s
Iteration   4: 1038063.739 ops/s
Iteration   5: 1042396.206 ops/s
Iteration   6: 1045082.602 ops/s
Iteration   7: 1041879.497 ops/s
Iteration   8: 1030789.082 ops/s
Iteration   9: 1047098.578 ops/s
Iteration  10: 1043310.876 ops/s
Iteration  11: 1028865.829 ops/s
Iteration  12: 1039974.953 ops/s
Iteration  13: 1039438.630 ops/s
Iteration  14: 1047205.493 ops/s
Iteration  15: 1035095.252 ops/s
Iteration  16: 1046499.925 ops/s
Iteration  17: 1037602.720 ops/s
Iteration  18: 1044071.824 ops/s
Iteration  19: 1017141.787 ops/s
Iteration  20: 1041701.994 ops/s
Iteration  21: 1046404.691 ops/s
Iteration  22: 1044281.539 ops/s
Iteration  23: 1044999.887 ops/s
Iteration  24: 1044937.828 ops/s
Iteration  25: 1025235.770 ops/s
Iteration  26: 1042767.196 ops/s
Iteration  27: 1040440.490 ops/s
Iteration  28: 1035902.781 ops/s
Iteration  29: 1022786.084 ops/s
Iteration  30: 1044160.321 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1039543.782 ±(99.9%) 5069.939 ops/s [Average]
  (min, avg, max) = (1017141.787, 1039543.782, 1047205.493), stdev = 7588.446
  CI (99.9%): [1034473.843, 1044613.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1039543.782 ± 5069.939  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 752578.506 ops/s
# Warmup Iteration   2: 761970.692 ops/s
# Warmup Iteration   3: 992501.246 ops/s
# Warmup Iteration   4: 1010170.279 ops/s
# Warmup Iteration   5: 1007137.946 ops/s
# Warmup Iteration   6: 999455.101 ops/s
# Warmup Iteration   7: 1003926.827 ops/s
# Warmup Iteration   8: 1007720.314 ops/s
# Warmup Iteration   9: 1002381.902 ops/s
# Warmup Iteration  10: 1010664.198 ops/s
# Warmup Iteration  11: 1007707.890 ops/s
# Warmup Iteration  12: 847086.313 ops/s
# Warmup Iteration  13: 997534.792 ops/s
# Warmup Iteration  14: 1007838.584 ops/s
# Warmup Iteration  15: 989799.798 ops/s
# Warmup Iteration  16: 1003809.685 ops/s
# Warmup Iteration  17: 1073086.148 ops/s
# Warmup Iteration  18: 1072576.628 ops/s
# Warmup Iteration  19: 1073131.695 ops/s
# Warmup Iteration  20: 1070705.069 ops/s
# Warmup Iteration  21: 1066358.072 ops/s
# Warmup Iteration  22: 1074286.494 ops/s
# Warmup Iteration  23: 1068929.155 ops/s
# Warmup Iteration  24: 1079759.177 ops/s
# Warmup Iteration  25: 1068406.862 ops/s
# Warmup Iteration  26: 1070891.832 ops/s
# Warmup Iteration  27: 1074152.597 ops/s
# Warmup Iteration  28: 1071879.489 ops/s
# Warmup Iteration  29: 1075164.186 ops/s
# Warmup Iteration  30: 1058762.798 ops/s
Iteration   1: 1069452.791 ops/s
Iteration   2: 1069683.741 ops/s
Iteration   3: 1059946.208 ops/s
Iteration   4: 1070495.432 ops/s
Iteration   5: 1070129.979 ops/s
Iteration   6: 1080902.803 ops/s
Iteration   7: 1072818.145 ops/s
Iteration   8: 1056520.727 ops/s
Iteration   9: 1070344.535 ops/s
Iteration  10: 1076342.186 ops/s
Iteration  11: 1062861.935 ops/s
Iteration  12: 1076515.494 ops/s
Iteration  13: 1078725.736 ops/s
Iteration  14: 1059381.976 ops/s
Iteration  15: 1081452.788 ops/s
Iteration  16: 1053438.972 ops/s
Iteration  17: 1074928.855 ops/s
Iteration  18: 1072725.056 ops/s
Iteration  19: 1064772.722 ops/s
Iteration  20: 1076392.953 ops/s
Iteration  21: 1060831.143 ops/s
Iteration  22: 1079014.583 ops/s
Iteration  23: 1077275.244 ops/s
Iteration  24: 1073199.959 ops/s
Iteration  25: 1071281.428 ops/s
Iteration  26: 1073858.335 ops/s
Iteration  27: 1075840.453 ops/s
Iteration  28: 1079652.917 ops/s
Iteration  29: 1076210.376 ops/s
Iteration  30: 1080570.452 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1071518.931 ±(99.9%) 5102.734 ops/s [Average]
  (min, avg, max) = (1053438.972, 1071518.931, 1081452.788), stdev = 7637.533
  CI (99.9%): [1066416.196, 1076621.665] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1071518.931 ± 5102.734  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8534374.067 ops/s
# Warmup Iteration   2: 14037217.903 ops/s
# Warmup Iteration   3: 16400826.958 ops/s
# Warmup Iteration   4: 16773668.516 ops/s
# Warmup Iteration   5: 16860472.337 ops/s
# Warmup Iteration   6: 16838484.169 ops/s
# Warmup Iteration   7: 16935163.839 ops/s
# Warmup Iteration   8: 16846420.636 ops/s
# Warmup Iteration   9: 16615675.528 ops/s
# Warmup Iteration  10: 16820780.942 ops/s
# Warmup Iteration  11: 16814672.302 ops/s
# Warmup Iteration  12: 16857180.645 ops/s
# Warmup Iteration  13: 16738613.169 ops/s
# Warmup Iteration  14: 16937019.530 ops/s
# Warmup Iteration  15: 16865749.980 ops/s
# Warmup Iteration  16: 16586712.202 ops/s
# Warmup Iteration  17: 16674141.095 ops/s
# Warmup Iteration  18: 16740643.111 ops/s
# Warmup Iteration  19: 16822897.427 ops/s
# Warmup Iteration  20: 16798247.755 ops/s
# Warmup Iteration  21: 16752252.788 ops/s
# Warmup Iteration  22: 16726751.691 ops/s
# Warmup Iteration  23: 16841891.629 ops/s
# Warmup Iteration  24: 16814992.691 ops/s
# Warmup Iteration  25: 16737555.986 ops/s
# Warmup Iteration  26: 16740098.469 ops/s
# Warmup Iteration  27: 16816527.383 ops/s
# Warmup Iteration  28: 16703322.636 ops/s
# Warmup Iteration  29: 16799215.813 ops/s
# Warmup Iteration  30: 16906109.008 ops/s
Iteration   1: 16808962.134 ops/s
Iteration   2: 16956202.985 ops/s
Iteration   3: 16903707.555 ops/s
Iteration   4: 16874053.816 ops/s
Iteration   5: 16827174.599 ops/s
Iteration   6: 16830158.017 ops/s
Iteration   7: 16816393.219 ops/s
Iteration   8: 16718074.591 ops/s
Iteration   9: 16903799.093 ops/s
Iteration  10: 16929468.218 ops/s
Iteration  11: 16849035.532 ops/s
Iteration  12: 16724141.503 ops/s
Iteration  13: 16750468.845 ops/s
Iteration  14: 16891727.208 ops/s
Iteration  15: 16843608.597 ops/s
Iteration  16: 16548931.249 ops/s
Iteration  17: 16917307.810 ops/s
Iteration  18: 16779056.672 ops/s
Iteration  19: 16954354.823 ops/s
Iteration  20: 16862903.498 ops/s
Iteration  21: 16931576.971 ops/s
Iteration  22: 16897253.702 ops/s
Iteration  23: 16711479.231 ops/s
Iteration  24: 16834781.233 ops/s
Iteration  25: 16938133.352 ops/s
Iteration  26: 16991954.593 ops/s
Iteration  27: 16912673.446 ops/s
Iteration  28: 16602326.821 ops/s
Iteration  29: 16937347.269 ops/s
Iteration  30: 16904917.275 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_lastIndexOf":
  16845065.795 ±(99.9%) 69663.281 ops/s [Average]
  (min, avg, max) = (16548931.249, 16845065.795, 16991954.593), stdev = 104268.728
  CI (99.9%): [16775402.514, 16914729.077] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  16845065.795 ± 69663.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 433064.865 ops/s
# Warmup Iteration   2: 983544.946 ops/s
# Warmup Iteration   3: 974203.175 ops/s
# Warmup Iteration   4: 821988.015 ops/s
# Warmup Iteration   5: 981571.376 ops/s
# Warmup Iteration   6: 980302.339 ops/s
# Warmup Iteration   7: 983508.447 ops/s
# Warmup Iteration   8: 985130.557 ops/s
# Warmup Iteration   9: 979147.099 ops/s
# Warmup Iteration  10: 983415.604 ops/s
# Warmup Iteration  11: 989279.359 ops/s
# Warmup Iteration  12: 983156.595 ops/s
# Warmup Iteration  13: 986344.636 ops/s
# Warmup Iteration  14: 981312.152 ops/s
# Warmup Iteration  15: 970141.040 ops/s
# Warmup Iteration  16: 986617.283 ops/s
# Warmup Iteration  17: 981687.547 ops/s
# Warmup Iteration  18: 981860.611 ops/s
# Warmup Iteration  19: 985418.459 ops/s
# Warmup Iteration  20: 979742.188 ops/s
# Warmup Iteration  21: 982626.369 ops/s
# Warmup Iteration  22: 992609.644 ops/s
# Warmup Iteration  23: 974517.637 ops/s
# Warmup Iteration  24: 987783.459 ops/s
# Warmup Iteration  25: 986392.449 ops/s
# Warmup Iteration  26: 982156.084 ops/s
# Warmup Iteration  27: 983813.753 ops/s
# Warmup Iteration  28: 985083.153 ops/s
# Warmup Iteration  29: 979505.965 ops/s
# Warmup Iteration  30: 984623.835 ops/s
Iteration   1: 986363.582 ops/s
Iteration   2: 980517.241 ops/s
Iteration   3: 983518.406 ops/s
Iteration   4: 978116.426 ops/s
Iteration   5: 975605.888 ops/s
Iteration   6: 981511.961 ops/s
Iteration   7: 983485.209 ops/s
Iteration   8: 981517.116 ops/s
Iteration   9: 980289.289 ops/s
Iteration  10: 972184.525 ops/s
Iteration  11: 984760.688 ops/s
Iteration  12: 985333.166 ops/s
Iteration  13: 980462.880 ops/s
Iteration  14: 985880.410 ops/s
Iteration  15: 982652.182 ops/s
Iteration  16: 984198.635 ops/s
Iteration  17: 983506.116 ops/s
Iteration  18: 982415.689 ops/s
Iteration  19: 970672.682 ops/s
Iteration  20: 968588.661 ops/s
Iteration  21: 978696.846 ops/s
Iteration  22: 987452.010 ops/s
Iteration  23: 988307.099 ops/s
Iteration  24: 952201.174 ops/s
Iteration  25: 987454.837 ops/s
Iteration  26: 983633.449 ops/s
Iteration  27: 980398.876 ops/s
Iteration  28: 987094.325 ops/s
Iteration  29: 988499.693 ops/s
Iteration  30: 986458.980 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_makeString":
  981059.268 ±(99.9%) 4960.115 ops/s [Average]
  (min, avg, max) = (952201.174, 981059.268, 988499.693), stdev = 7424.068
  CI (99.9%): [976099.153, 986019.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_makeString  thrpt   30  981059.268 ± 4960.115  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2782458.928 ops/s
# Warmup Iteration   2: 6323794.163 ops/s
# Warmup Iteration   3: 10438873.600 ops/s
# Warmup Iteration   4: 9541240.039 ops/s
# Warmup Iteration   5: 10708973.915 ops/s
# Warmup Iteration   6: 10725559.232 ops/s
# Warmup Iteration   7: 10778216.268 ops/s
# Warmup Iteration   8: 10843075.920 ops/s
# Warmup Iteration   9: 10829184.829 ops/s
# Warmup Iteration  10: 10833070.409 ops/s
# Warmup Iteration  11: 10809332.025 ops/s
# Warmup Iteration  12: 10617259.097 ops/s
# Warmup Iteration  13: 10813352.827 ops/s
# Warmup Iteration  14: 10861493.687 ops/s
# Warmup Iteration  15: 10776475.633 ops/s
# Warmup Iteration  16: 10837333.487 ops/s
# Warmup Iteration  17: 10769668.606 ops/s
# Warmup Iteration  18: 10679604.540 ops/s
# Warmup Iteration  19: 10691027.582 ops/s
# Warmup Iteration  20: 10750815.618 ops/s
# Warmup Iteration  21: 10737689.166 ops/s
# Warmup Iteration  22: 10799528.499 ops/s
# Warmup Iteration  23: 10723141.180 ops/s
# Warmup Iteration  24: 10828014.380 ops/s
# Warmup Iteration  25: 10740977.372 ops/s
# Warmup Iteration  26: 10856303.586 ops/s
# Warmup Iteration  27: 10819586.706 ops/s
# Warmup Iteration  28: 10765023.975 ops/s
# Warmup Iteration  29: 10807104.323 ops/s
# Warmup Iteration  30: 10809240.625 ops/s
Iteration   1: 10671600.946 ops/s
Iteration   2: 10795287.944 ops/s
Iteration   3: 10858077.374 ops/s
Iteration   4: 10833587.290 ops/s
Iteration   5: 10812454.780 ops/s
Iteration   6: 10754714.987 ops/s
Iteration   7: 10821172.111 ops/s
Iteration   8: 10803406.476 ops/s
Iteration   9: 10752929.194 ops/s
Iteration  10: 10727308.456 ops/s
Iteration  11: 10853123.349 ops/s
Iteration  12: 10805669.313 ops/s
Iteration  13: 10823891.181 ops/s
Iteration  14: 10784019.176 ops/s
Iteration  15: 10779886.896 ops/s
Iteration  16: 10835748.639 ops/s
Iteration  17: 10797361.139 ops/s
Iteration  18: 10813178.038 ops/s
Iteration  19: 10769492.158 ops/s
Iteration  20: 10752228.536 ops/s
Iteration  21: 10812763.341 ops/s
Iteration  22: 10738212.491 ops/s
Iteration  23: 10827583.806 ops/s
Iteration  24: 10794906.398 ops/s
Iteration  25: 10753739.454 ops/s
Iteration  26: 10620498.390 ops/s
Iteration  27: 10789650.608 ops/s
Iteration  28: 10838416.016 ops/s
Iteration  29: 10852982.654 ops/s
Iteration  30: 10777984.039 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_newCollection":
  10788395.839 ±(99.9%) 35067.920 ops/s [Average]
  (min, avg, max) = (10620498.390, 10788395.839, 10858077.374), stdev = 52488.016
  CI (99.9%): [10753327.919, 10823463.760] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_newCollection  thrpt   30  10788395.839 ± 35067.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2484506.626 ops/s
# Warmup Iteration   2: 5599723.117 ops/s
# Warmup Iteration   3: 7068905.785 ops/s
# Warmup Iteration   4: 8366135.299 ops/s
# Warmup Iteration   5: 8315107.551 ops/s
# Warmup Iteration   6: 8364668.463 ops/s
# Warmup Iteration   7: 8328915.929 ops/s
# Warmup Iteration   8: 8385721.035 ops/s
# Warmup Iteration   9: 8358678.906 ops/s
# Warmup Iteration  10: 8308829.471 ops/s
# Warmup Iteration  11: 8398157.511 ops/s
# Warmup Iteration  12: 8317836.274 ops/s
# Warmup Iteration  13: 8375363.893 ops/s
# Warmup Iteration  14: 8343503.545 ops/s
# Warmup Iteration  15: 8407599.688 ops/s
# Warmup Iteration  16: 8401330.396 ops/s
# Warmup Iteration  17: 8321866.015 ops/s
# Warmup Iteration  18: 8411801.029 ops/s
# Warmup Iteration  19: 8306921.760 ops/s
# Warmup Iteration  20: 8370255.729 ops/s
# Warmup Iteration  21: 8387085.609 ops/s
# Warmup Iteration  22: 8366243.137 ops/s
# Warmup Iteration  23: 8357238.916 ops/s
# Warmup Iteration  24: 8359296.761 ops/s
# Warmup Iteration  25: 8405271.997 ops/s
# Warmup Iteration  26: 8370373.618 ops/s
# Warmup Iteration  27: 8383134.286 ops/s
# Warmup Iteration  28: 8292831.076 ops/s
# Warmup Iteration  29: 8286692.603 ops/s
# Warmup Iteration  30: 8384126.934 ops/s
Iteration   1: 8388062.817 ops/s
Iteration   2: 8444855.318 ops/s
Iteration   3: 8443270.944 ops/s
Iteration   4: 8375727.133 ops/s
Iteration   5: 8236339.019 ops/s
Iteration   6: 8377310.690 ops/s
Iteration   7: 8377825.340 ops/s
Iteration   8: 8345859.252 ops/s
Iteration   9: 8344823.991 ops/s
Iteration  10: 8354617.398 ops/s
Iteration  11: 8397016.772 ops/s
Iteration  12: 8372399.133 ops/s
Iteration  13: 8355752.492 ops/s
Iteration  14: 8388960.879 ops/s
Iteration  15: 8344975.602 ops/s
Iteration  16: 8420324.663 ops/s
Iteration  17: 8263582.304 ops/s
Iteration  18: 8408914.378 ops/s
Iteration  19: 8402031.810 ops/s
Iteration  20: 8389789.547 ops/s
Iteration  21: 8423335.837 ops/s
Iteration  22: 8347459.006 ops/s
Iteration  23: 8405897.744 ops/s
Iteration  24: 8313273.708 ops/s
Iteration  25: 8454952.215 ops/s
Iteration  26: 8383002.533 ops/s
Iteration  27: 8417911.617 ops/s
Iteration  28: 8351139.268 ops/s
Iteration  29: 8332558.715 ops/s
Iteration  30: 8362294.532 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_newCollectionWith":
  8374142.155 ±(99.9%) 32428.556 ops/s [Average]
  (min, avg, max) = (8236339.019, 8374142.155, 8454952.215), stdev = 48537.539
  CI (99.9%): [8341713.599, 8406570.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_newCollectionWith  thrpt   30  8374142.155 ± 32428.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_newWithNValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_newWithNValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5487527.615 ops/s
# Warmup Iteration   2: 9220655.705 ops/s
# Warmup Iteration   3: 10967368.306 ops/s
# Warmup Iteration   4: 10979995.214 ops/s
# Warmup Iteration   5: 10981881.735 ops/s
# Warmup Iteration   6: 10918390.964 ops/s
# Warmup Iteration   7: 10979352.834 ops/s
# Warmup Iteration   8: 10890233.071 ops/s
# Warmup Iteration   9: 10986714.012 ops/s
# Warmup Iteration  10: 11045934.763 ops/s
# Warmup Iteration  11: 11036132.453 ops/s
# Warmup Iteration  12: 10999456.479 ops/s
# Warmup Iteration  13: 10948155.119 ops/s
# Warmup Iteration  14: 10921118.610 ops/s
# Warmup Iteration  15: 10925953.006 ops/s
# Warmup Iteration  16: 11002896.143 ops/s
# Warmup Iteration  17: 10884760.405 ops/s
# Warmup Iteration  18: 10973342.561 ops/s
# Warmup Iteration  19: 10968952.759 ops/s
# Warmup Iteration  20: 10910470.479 ops/s
# Warmup Iteration  21: 10880333.602 ops/s
# Warmup Iteration  22: 10958284.929 ops/s
# Warmup Iteration  23: 10963654.283 ops/s
# Warmup Iteration  24: 11009475.183 ops/s
# Warmup Iteration  25: 10969160.346 ops/s
# Warmup Iteration  26: 10972864.407 ops/s
# Warmup Iteration  27: 11035138.300 ops/s
# Warmup Iteration  28: 10988648.988 ops/s
# Warmup Iteration  29: 11012796.490 ops/s
# Warmup Iteration  30: 10957358.329 ops/s
Iteration   1: 11002281.311 ops/s
Iteration   2: 10976182.668 ops/s
Iteration   3: 11027352.130 ops/s
Iteration   4: 11022961.230 ops/s
Iteration   5: 11064262.292 ops/s
Iteration   6: 10994982.919 ops/s
Iteration   7: 10992739.697 ops/s
Iteration   8: 10889623.286 ops/s
Iteration   9: 10965887.704 ops/s
Iteration  10: 10824007.842 ops/s
Iteration  11: 11035753.967 ops/s
Iteration  12: 11054534.313 ops/s
Iteration  13: 11059361.155 ops/s
Iteration  14: 10995166.429 ops/s
Iteration  15: 10954650.603 ops/s
Iteration  16: 11015540.383 ops/s
Iteration  17: 11024380.701 ops/s
Iteration  18: 10935589.495 ops/s
Iteration  19: 10996771.733 ops/s
Iteration  20: 10949063.506 ops/s
Iteration  21: 11032684.435 ops/s
Iteration  22: 10970815.421 ops/s
Iteration  23: 11065428.184 ops/s
Iteration  24: 10979399.660 ops/s
Iteration  25: 11040110.933 ops/s
Iteration  26: 11067233.769 ops/s
Iteration  27: 11036730.477 ops/s
Iteration  28: 10977915.594 ops/s
Iteration  29: 11039810.504 ops/s
Iteration  30: 11100162.597 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_newWithNValues":
  11003046.165 ±(99.9%) 37987.385 ops/s [Average]
  (min, avg, max) = (10824007.842, 11003046.165, 11100162.597), stdev = 56857.734
  CI (99.9%): [10965058.779, 11041033.550] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_newWithNValues  thrpt   30  11003046.165 ± 37987.385  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_newWithNValues_throws_negative_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_newWithNValues_throws_negative_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 790936.149 ops/s
# Warmup Iteration   2: 792222.686 ops/s
# Warmup Iteration   3: 971392.097 ops/s
# Warmup Iteration   4: 1013404.003 ops/s
# Warmup Iteration   5: 1017458.682 ops/s
# Warmup Iteration   6: 1017456.877 ops/s
# Warmup Iteration   7: 1019535.696 ops/s
# Warmup Iteration   8: 999460.167 ops/s
# Warmup Iteration   9: 1009345.810 ops/s
# Warmup Iteration  10: 1018019.761 ops/s
# Warmup Iteration  11: 1012318.621 ops/s
# Warmup Iteration  12: 1008671.666 ops/s
# Warmup Iteration  13: 917073.579 ops/s
# Warmup Iteration  14: 958303.516 ops/s
# Warmup Iteration  15: 1018168.091 ops/s
# Warmup Iteration  16: 1018139.677 ops/s
# Warmup Iteration  17: 1066475.488 ops/s
# Warmup Iteration  18: 1066058.879 ops/s
# Warmup Iteration  19: 1073238.232 ops/s
# Warmup Iteration  20: 1065861.255 ops/s
# Warmup Iteration  21: 1051682.202 ops/s
# Warmup Iteration  22: 1064919.682 ops/s
# Warmup Iteration  23: 1062524.922 ops/s
# Warmup Iteration  24: 1069948.698 ops/s
# Warmup Iteration  25: 1066168.204 ops/s
# Warmup Iteration  26: 1075421.172 ops/s
# Warmup Iteration  27: 1070599.888 ops/s
# Warmup Iteration  28: 1072400.816 ops/s
# Warmup Iteration  29: 1073159.931 ops/s
# Warmup Iteration  30: 1063210.289 ops/s
Iteration   1: 1078307.301 ops/s
Iteration   2: 1052970.697 ops/s
Iteration   3: 1079783.615 ops/s
Iteration   4: 1077715.061 ops/s
Iteration   5: 1073567.050 ops/s
Iteration   6: 1079678.186 ops/s
Iteration   7: 1072596.444 ops/s
Iteration   8: 1073067.284 ops/s
Iteration   9: 1071909.653 ops/s
Iteration  10: 1068440.798 ops/s
Iteration  11: 1073969.474 ops/s
Iteration  12: 1076290.116 ops/s
Iteration  13: 1069050.225 ops/s
Iteration  14: 1076976.505 ops/s
Iteration  15: 1071295.967 ops/s
Iteration  16: 1077717.577 ops/s
Iteration  17: 1073427.692 ops/s
Iteration  18: 1072774.389 ops/s
Iteration  19: 1072839.320 ops/s
Iteration  20: 1071253.149 ops/s
Iteration  21: 1032145.864 ops/s
Iteration  22: 1075544.691 ops/s
Iteration  23: 1073726.691 ops/s
Iteration  24: 1070937.996 ops/s
Iteration  25: 1070388.968 ops/s
Iteration  26: 1066837.539 ops/s
Iteration  27: 1074606.462 ops/s
Iteration  28: 1077367.360 ops/s
Iteration  29: 1072527.290 ops/s
Iteration  30: 1066827.119 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_newWithNValues_throws_negative_size":
  1071484.683 ±(99.9%) 6017.502 ops/s [Average]
  (min, avg, max) = (1032145.864, 1071484.683, 1079783.615), stdev = 9006.715
  CI (99.9%): [1065467.180, 1077502.185] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_newWithNValues_throws_negative_size  thrpt   30  1071484.683 ± 6017.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1758366.305 ops/s
# Warmup Iteration   2: 7158529.138 ops/s
# Warmup Iteration   3: 6059203.944 ops/s
# Warmup Iteration   4: 7166742.787 ops/s
# Warmup Iteration   5: 7128250.112 ops/s
# Warmup Iteration   6: 7177690.520 ops/s
# Warmup Iteration   7: 7145152.582 ops/s
# Warmup Iteration   8: 7140840.088 ops/s
# Warmup Iteration   9: 7099093.660 ops/s
# Warmup Iteration  10: 7151647.122 ops/s
# Warmup Iteration  11: 7183582.901 ops/s
# Warmup Iteration  12: 7119380.671 ops/s
# Warmup Iteration  13: 7186955.122 ops/s
# Warmup Iteration  14: 7110360.713 ops/s
# Warmup Iteration  15: 7139241.550 ops/s
# Warmup Iteration  16: 7114576.904 ops/s
# Warmup Iteration  17: 7173584.472 ops/s
# Warmup Iteration  18: 7119076.972 ops/s
# Warmup Iteration  19: 7104736.767 ops/s
# Warmup Iteration  20: 7093920.158 ops/s
# Warmup Iteration  21: 7152577.114 ops/s
# Warmup Iteration  22: 7141344.281 ops/s
# Warmup Iteration  23: 7159654.482 ops/s
# Warmup Iteration  24: 7175278.713 ops/s
# Warmup Iteration  25: 7103628.583 ops/s
# Warmup Iteration  26: 7065394.710 ops/s
# Warmup Iteration  27: 7168895.935 ops/s
# Warmup Iteration  28: 7141942.245 ops/s
# Warmup Iteration  29: 7169094.885 ops/s
# Warmup Iteration  30: 7170190.527 ops/s
Iteration   1: 7109053.688 ops/s
Iteration   2: 7194011.803 ops/s
Iteration   3: 7202576.743 ops/s
Iteration   4: 7175183.124 ops/s
Iteration   5: 7158073.669 ops/s
Iteration   6: 7003711.070 ops/s
Iteration   7: 7085071.657 ops/s
Iteration   8: 7166957.357 ops/s
Iteration   9: 7173571.052 ops/s
Iteration  10: 7165203.569 ops/s
Iteration  11: 7152975.698 ops/s
Iteration  12: 7156731.450 ops/s
Iteration  13: 7165839.607 ops/s
Iteration  14: 7140306.143 ops/s
Iteration  15: 7030852.172 ops/s
Iteration  16: 7191939.582 ops/s
Iteration  17: 7176948.626 ops/s
Iteration  18: 7146371.865 ops/s
Iteration  19: 7137870.947 ops/s
Iteration  20: 7152234.422 ops/s
Iteration  21: 7080803.145 ops/s
Iteration  22: 7145511.945 ops/s
Iteration  23: 7094007.348 ops/s
Iteration  24: 7136122.797 ops/s
Iteration  25: 7163949.240 ops/s
Iteration  26: 7159846.809 ops/s
Iteration  27: 7166304.418 ops/s
Iteration  28: 7167663.073 ops/s
Iteration  29: 7157937.615 ops/s
Iteration  30: 7155975.871 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_noneSatisfy":
  7143786.884 ±(99.9%) 30125.053 ops/s [Average]
  (min, avg, max) = (7003711.070, 7143786.884, 7202576.743), stdev = 45089.764
  CI (99.9%): [7113661.831, 7173911.936] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  7143786.884 ± 30125.053  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7503960.323 ops/s
# Warmup Iteration   2: 11728285.158 ops/s
# Warmup Iteration   3: 14150095.494 ops/s
# Warmup Iteration   4: 14159845.145 ops/s
# Warmup Iteration   5: 14146423.808 ops/s
# Warmup Iteration   6: 14197507.214 ops/s
# Warmup Iteration   7: 14120009.428 ops/s
# Warmup Iteration   8: 14091761.005 ops/s
# Warmup Iteration   9: 14137934.411 ops/s
# Warmup Iteration  10: 14168584.316 ops/s
# Warmup Iteration  11: 14071501.107 ops/s
# Warmup Iteration  12: 14069311.801 ops/s
# Warmup Iteration  13: 14081946.119 ops/s
# Warmup Iteration  14: 14151835.884 ops/s
# Warmup Iteration  15: 14158493.656 ops/s
# Warmup Iteration  16: 14028286.779 ops/s
# Warmup Iteration  17: 14158489.483 ops/s
# Warmup Iteration  18: 14111982.403 ops/s
# Warmup Iteration  19: 14143831.178 ops/s
# Warmup Iteration  20: 14173955.852 ops/s
# Warmup Iteration  21: 14108355.753 ops/s
# Warmup Iteration  22: 13884078.238 ops/s
# Warmup Iteration  23: 14145303.614 ops/s
# Warmup Iteration  24: 14055777.146 ops/s
# Warmup Iteration  25: 14037554.012 ops/s
# Warmup Iteration  26: 14083186.546 ops/s
# Warmup Iteration  27: 14175899.578 ops/s
# Warmup Iteration  28: 14125514.485 ops/s
# Warmup Iteration  29: 14116039.128 ops/s
# Warmup Iteration  30: 14157611.702 ops/s
Iteration   1: 14203816.164 ops/s
Iteration   2: 13994242.179 ops/s
Iteration   3: 14040140.899 ops/s
Iteration   4: 13977338.137 ops/s
Iteration   5: 14061300.916 ops/s
Iteration   6: 14157441.214 ops/s
Iteration   7: 14197563.068 ops/s
Iteration   8: 14165248.977 ops/s
Iteration   9: 14012167.164 ops/s
Iteration  10: 13987932.540 ops/s
Iteration  11: 14153137.556 ops/s
Iteration  12: 14242744.710 ops/s
Iteration  13: 14165724.406 ops/s
Iteration  14: 14047454.146 ops/s
Iteration  15: 14173679.698 ops/s
Iteration  16: 14161399.669 ops/s
Iteration  17: 14035396.564 ops/s
Iteration  18: 14082610.307 ops/s
Iteration  19: 14173371.033 ops/s
Iteration  20: 14136968.422 ops/s
Iteration  21: 14140763.168 ops/s
Iteration  22: 13902226.554 ops/s
Iteration  23: 14001056.814 ops/s
Iteration  24: 13756467.950 ops/s
Iteration  25: 14004064.720 ops/s
Iteration  26: 14042846.855 ops/s
Iteration  27: 14133080.974 ops/s
Iteration  28: 14091938.285 ops/s
Iteration  29: 14191467.814 ops/s
Iteration  30: 14057379.915 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_notEmpty":
  14083032.361 ±(99.9%) 69509.720 ops/s [Average]
  (min, avg, max) = (13756467.950, 14083032.361, 14242744.710), stdev = 104038.884
  CI (99.9%): [14013522.641, 14152542.080] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_notEmpty  thrpt   30  14083032.361 ± 69509.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3327188.530 ops/s
# Warmup Iteration   2: 6734151.149 ops/s
# Warmup Iteration   3: 5699430.470 ops/s
# Warmup Iteration   4: 6819267.826 ops/s
# Warmup Iteration   5: 6706141.211 ops/s
# Warmup Iteration   6: 6830287.887 ops/s
# Warmup Iteration   7: 6819236.251 ops/s
# Warmup Iteration   8: 6804814.072 ops/s
# Warmup Iteration   9: 6817212.834 ops/s
# Warmup Iteration  10: 6780962.736 ops/s
# Warmup Iteration  11: 6819424.821 ops/s
# Warmup Iteration  12: 6779570.557 ops/s
# Warmup Iteration  13: 6748052.343 ops/s
# Warmup Iteration  14: 6809905.704 ops/s
# Warmup Iteration  15: 6782054.071 ops/s
# Warmup Iteration  16: 6793607.597 ops/s
# Warmup Iteration  17: 6735173.288 ops/s
# Warmup Iteration  18: 6798322.182 ops/s
# Warmup Iteration  19: 6721927.363 ops/s
# Warmup Iteration  20: 6784297.900 ops/s
# Warmup Iteration  21: 6811190.565 ops/s
# Warmup Iteration  22: 6807662.514 ops/s
# Warmup Iteration  23: 6775813.489 ops/s
# Warmup Iteration  24: 6802842.987 ops/s
# Warmup Iteration  25: 6791151.349 ops/s
# Warmup Iteration  26: 6772840.016 ops/s
# Warmup Iteration  27: 6717416.882 ops/s
# Warmup Iteration  28: 6781078.086 ops/s
# Warmup Iteration  29: 6716052.035 ops/s
# Warmup Iteration  30: 6718476.553 ops/s
Iteration   1: 6754588.787 ops/s
Iteration   2: 6709607.891 ops/s
Iteration   3: 6772094.020 ops/s
Iteration   4: 6816040.440 ops/s
Iteration   5: 6745499.030 ops/s
Iteration   6: 6803967.510 ops/s
Iteration   7: 6808094.109 ops/s
Iteration   8: 6790276.909 ops/s
Iteration   9: 6817868.843 ops/s
Iteration  10: 6795072.259 ops/s
Iteration  11: 6796945.941 ops/s
Iteration  12: 6677385.943 ops/s
Iteration  13: 6722184.205 ops/s
Iteration  14: 6822986.696 ops/s
Iteration  15: 6776652.553 ops/s
Iteration  16: 6699058.016 ops/s
Iteration  17: 6832542.789 ops/s
Iteration  18: 6812190.380 ops/s
Iteration  19: 6774009.636 ops/s
Iteration  20: 6793176.862 ops/s
Iteration  21: 6819306.901 ops/s
Iteration  22: 6793439.689 ops/s
Iteration  23: 6747271.753 ops/s
Iteration  24: 6798565.109 ops/s
Iteration  25: 6799410.050 ops/s
Iteration  26: 6785481.611 ops/s
Iteration  27: 6797162.906 ops/s
Iteration  28: 6812132.405 ops/s
Iteration  29: 6759848.164 ops/s
Iteration  30: 6768762.275 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reduce":
  6780054.123 ±(99.9%) 25806.598 ops/s [Average]
  (min, avg, max) = (6677385.943, 6780054.123, 6832542.789), stdev = 38626.104
  CI (99.9%): [6754247.525, 6805860.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_reduce  thrpt   30  6780054.123 ± 25806.598  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2756688.354 ops/s
# Warmup Iteration   2: 5750026.561 ops/s
# Warmup Iteration   3: 4925065.406 ops/s
# Warmup Iteration   4: 5754078.823 ops/s
# Warmup Iteration   5: 5863512.108 ops/s
# Warmup Iteration   6: 5849171.004 ops/s
# Warmup Iteration   7: 5867458.589 ops/s
# Warmup Iteration   8: 5821013.597 ops/s
# Warmup Iteration   9: 5851246.710 ops/s
# Warmup Iteration  10: 5861963.252 ops/s
# Warmup Iteration  11: 5833431.220 ops/s
# Warmup Iteration  12: 5868047.675 ops/s
# Warmup Iteration  13: 5868907.113 ops/s
# Warmup Iteration  14: 5790368.680 ops/s
# Warmup Iteration  15: 5730076.634 ops/s
# Warmup Iteration  16: 5861486.627 ops/s
# Warmup Iteration  17: 5856556.043 ops/s
# Warmup Iteration  18: 5832704.724 ops/s
# Warmup Iteration  19: 5797843.580 ops/s
# Warmup Iteration  20: 5854020.676 ops/s
# Warmup Iteration  21: 5867385.620 ops/s
# Warmup Iteration  22: 5874290.523 ops/s
# Warmup Iteration  23: 5889861.782 ops/s
# Warmup Iteration  24: 5836475.465 ops/s
# Warmup Iteration  25: 5878830.631 ops/s
# Warmup Iteration  26: 5853301.866 ops/s
# Warmup Iteration  27: 5805481.007 ops/s
# Warmup Iteration  28: 5824287.442 ops/s
# Warmup Iteration  29: 5850752.167 ops/s
# Warmup Iteration  30: 5818995.456 ops/s
Iteration   1: 5878891.901 ops/s
Iteration   2: 5808566.112 ops/s
Iteration   3: 5755398.326 ops/s
Iteration   4: 5845896.495 ops/s
Iteration   5: 5853291.397 ops/s
Iteration   6: 5822476.693 ops/s
Iteration   7: 5819148.676 ops/s
Iteration   8: 5881092.408 ops/s
Iteration   9: 5875162.415 ops/s
Iteration  10: 5805120.425 ops/s
Iteration  11: 5839167.303 ops/s
Iteration  12: 5844212.338 ops/s
Iteration  13: 5863031.843 ops/s
Iteration  14: 5847110.669 ops/s
Iteration  15: 5819749.381 ops/s
Iteration  16: 5857560.472 ops/s
Iteration  17: 5862728.693 ops/s
Iteration  18: 5837067.877 ops/s
Iteration  19: 5848106.759 ops/s
Iteration  20: 5847976.779 ops/s
Iteration  21: 5849087.510 ops/s
Iteration  22: 5883134.308 ops/s
Iteration  23: 5858063.483 ops/s
Iteration  24: 5875285.605 ops/s
Iteration  25: 5772983.425 ops/s
Iteration  26: 5885507.516 ops/s
Iteration  27: 5827527.092 ops/s
Iteration  28: 5842333.072 ops/s
Iteration  29: 5868324.425 ops/s
Iteration  30: 5846080.046 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reduceIfEmpty":
  5844002.781 ±(99.9%) 20507.112 ops/s [Average]
  (min, avg, max) = (5755398.326, 5844002.781, 5885507.516), stdev = 30694.082
  CI (99.9%): [5823495.670, 5864509.893] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  5844002.781 ± 20507.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 731100.027 ops/s
# Warmup Iteration   2: 750839.566 ops/s
# Warmup Iteration   3: 974371.284 ops/s
# Warmup Iteration   4: 991459.002 ops/s
# Warmup Iteration   5: 1002101.298 ops/s
# Warmup Iteration   6: 993670.467 ops/s
# Warmup Iteration   7: 998484.583 ops/s
# Warmup Iteration   8: 1000349.933 ops/s
# Warmup Iteration   9: 989484.689 ops/s
# Warmup Iteration  10: 998715.869 ops/s
# Warmup Iteration  11: 999713.291 ops/s
# Warmup Iteration  12: 907866.919 ops/s
# Warmup Iteration  13: 920064.286 ops/s
# Warmup Iteration  14: 994009.240 ops/s
# Warmup Iteration  15: 999139.296 ops/s
# Warmup Iteration  16: 1000251.008 ops/s
# Warmup Iteration  17: 1045583.487 ops/s
# Warmup Iteration  18: 1049559.736 ops/s
# Warmup Iteration  19: 1056138.177 ops/s
# Warmup Iteration  20: 1047820.204 ops/s
# Warmup Iteration  21: 1056441.109 ops/s
# Warmup Iteration  22: 1052422.591 ops/s
# Warmup Iteration  23: 1048595.337 ops/s
# Warmup Iteration  24: 1057756.746 ops/s
# Warmup Iteration  25: 1056017.543 ops/s
# Warmup Iteration  26: 1052078.082 ops/s
# Warmup Iteration  27: 1057393.415 ops/s
# Warmup Iteration  28: 1058924.872 ops/s
# Warmup Iteration  29: 1046183.182 ops/s
# Warmup Iteration  30: 1055105.332 ops/s
Iteration   1: 1056965.723 ops/s
Iteration   2: 1047535.669 ops/s
Iteration   3: 1050539.530 ops/s
Iteration   4: 1053235.776 ops/s
Iteration   5: 1057060.910 ops/s
Iteration   6: 1055051.729 ops/s
Iteration   7: 1057131.069 ops/s
Iteration   8: 1061110.485 ops/s
Iteration   9: 1060093.516 ops/s
Iteration  10: 1055055.493 ops/s
Iteration  11: 1055776.783 ops/s
Iteration  12: 1054095.800 ops/s
Iteration  13: 1051655.709 ops/s
Iteration  14: 1053818.120 ops/s
Iteration  15: 1049694.543 ops/s
Iteration  16: 1050262.952 ops/s
Iteration  17: 1053636.701 ops/s
Iteration  18: 1057178.499 ops/s
Iteration  19: 1057270.651 ops/s
Iteration  20: 1031345.623 ops/s
Iteration  21: 1052491.001 ops/s
Iteration  22: 1054608.158 ops/s
Iteration  23: 1049687.892 ops/s
Iteration  24: 1049712.373 ops/s
Iteration  25: 1055469.793 ops/s
Iteration  26: 1054070.801 ops/s
Iteration  27: 1054750.859 ops/s
Iteration  28: 1061122.169 ops/s
Iteration  29: 1057629.626 ops/s
Iteration  30: 1050399.841 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1053615.260 ±(99.9%) 3643.279 ops/s [Average]
  (min, avg, max) = (1031345.623, 1053615.260, 1061122.169), stdev = 5453.088
  CI (99.9%): [1049971.981, 1057258.538] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1053615.260 ± 3643.279  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2131652.961 ops/s
# Warmup Iteration   2: 4574533.626 ops/s
# Warmup Iteration   3: 4351001.729 ops/s
# Warmup Iteration   4: 5083626.824 ops/s
# Warmup Iteration   5: 5218851.243 ops/s
# Warmup Iteration   6: 5202481.857 ops/s
# Warmup Iteration   7: 5237187.661 ops/s
# Warmup Iteration   8: 5225599.088 ops/s
# Warmup Iteration   9: 5216298.197 ops/s
# Warmup Iteration  10: 5218622.670 ops/s
# Warmup Iteration  11: 5227744.599 ops/s
# Warmup Iteration  12: 5221040.650 ops/s
# Warmup Iteration  13: 5228152.974 ops/s
# Warmup Iteration  14: 5210769.360 ops/s
# Warmup Iteration  15: 5218896.220 ops/s
# Warmup Iteration  16: 5255811.841 ops/s
# Warmup Iteration  17: 5187334.654 ops/s
# Warmup Iteration  18: 5251817.358 ops/s
# Warmup Iteration  19: 5231417.147 ops/s
# Warmup Iteration  20: 5230506.134 ops/s
# Warmup Iteration  21: 5158642.785 ops/s
# Warmup Iteration  22: 5214064.516 ops/s
# Warmup Iteration  23: 5239506.755 ops/s
# Warmup Iteration  24: 5236616.439 ops/s
# Warmup Iteration  25: 5209222.991 ops/s
# Warmup Iteration  26: 5220633.793 ops/s
# Warmup Iteration  27: 5246190.729 ops/s
# Warmup Iteration  28: 5236184.681 ops/s
# Warmup Iteration  29: 5246934.128 ops/s
# Warmup Iteration  30: 5186650.926 ops/s
Iteration   1: 5222156.660 ops/s
Iteration   2: 5202872.767 ops/s
Iteration   3: 5195873.955 ops/s
Iteration   4: 5239881.328 ops/s
Iteration   5: 5211877.425 ops/s
Iteration   6: 5266901.473 ops/s
Iteration   7: 5245864.413 ops/s
Iteration   8: 5207080.964 ops/s
Iteration   9: 5268620.133 ops/s
Iteration  10: 5217238.471 ops/s
Iteration  11: 5206844.249 ops/s
Iteration  12: 5255831.715 ops/s
Iteration  13: 5246017.574 ops/s
Iteration  14: 5203738.219 ops/s
Iteration  15: 5227972.329 ops/s
Iteration  16: 5236837.711 ops/s
Iteration  17: 5246555.048 ops/s
Iteration  18: 5235229.180 ops/s
Iteration  19: 5230030.715 ops/s
Iteration  20: 5247858.309 ops/s
Iteration  21: 5234600.432 ops/s
Iteration  22: 5224113.967 ops/s
Iteration  23: 5258994.920 ops/s
Iteration  24: 5233957.529 ops/s
Iteration  25: 5256398.817 ops/s
Iteration  26: 5242809.938 ops/s
Iteration  27: 5134470.454 ops/s
Iteration  28: 5281412.929 ops/s
Iteration  29: 5249100.006 ops/s
Iteration  30: 5244538.767 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reject":
  5232522.680 ±(99.9%) 18786.657 ops/s [Average]
  (min, avg, max) = (5134470.454, 5232522.680, 5281412.929), stdev = 28118.985
  CI (99.9%): [5213736.023, 5251309.336] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_reject  thrpt   30  5232522.680 ± 18786.657  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 553870.269 ops/s
# Warmup Iteration   2: 1006302.091 ops/s
# Warmup Iteration   3: 2351247.175 ops/s
# Warmup Iteration   4: 1959584.605 ops/s
# Warmup Iteration   5: 2355599.606 ops/s
# Warmup Iteration   6: 2338145.487 ops/s
# Warmup Iteration   7: 2339066.991 ops/s
# Warmup Iteration   8: 2356228.033 ops/s
# Warmup Iteration   9: 2352795.811 ops/s
# Warmup Iteration  10: 2351034.050 ops/s
# Warmup Iteration  11: 2321495.949 ops/s
# Warmup Iteration  12: 2362922.884 ops/s
# Warmup Iteration  13: 2332884.438 ops/s
# Warmup Iteration  14: 2352734.825 ops/s
# Warmup Iteration  15: 2338372.647 ops/s
# Warmup Iteration  16: 2348459.877 ops/s
# Warmup Iteration  17: 2347743.459 ops/s
# Warmup Iteration  18: 2349176.428 ops/s
# Warmup Iteration  19: 2305776.490 ops/s
# Warmup Iteration  20: 2334476.418 ops/s
# Warmup Iteration  21: 2314808.597 ops/s
# Warmup Iteration  22: 2349731.480 ops/s
# Warmup Iteration  23: 2342351.602 ops/s
# Warmup Iteration  24: 2355159.671 ops/s
# Warmup Iteration  25: 2325572.594 ops/s
# Warmup Iteration  26: 2323987.514 ops/s
# Warmup Iteration  27: 2348437.686 ops/s
# Warmup Iteration  28: 2334006.650 ops/s
# Warmup Iteration  29: 2344672.139 ops/s
# Warmup Iteration  30: 2327026.910 ops/s
Iteration   1: 2315773.860 ops/s
Iteration   2: 2340767.147 ops/s
Iteration   3: 2341854.123 ops/s
Iteration   4: 2348477.145 ops/s
Iteration   5: 2364137.075 ops/s
Iteration   6: 2344897.172 ops/s
Iteration   7: 2337142.399 ops/s
Iteration   8: 2343691.191 ops/s
Iteration   9: 2351125.321 ops/s
Iteration  10: 2359912.863 ops/s
Iteration  11: 2358005.527 ops/s
Iteration  12: 2356746.545 ops/s
Iteration  13: 2312445.382 ops/s
Iteration  14: 2355711.607 ops/s
Iteration  15: 2362205.343 ops/s
Iteration  16: 2313296.480 ops/s
Iteration  17: 2348263.856 ops/s
Iteration  18: 2342876.197 ops/s
Iteration  19: 2351376.389 ops/s
Iteration  20: 2346873.263 ops/s
Iteration  21: 2334451.963 ops/s
Iteration  22: 2317095.324 ops/s
Iteration  23: 2313906.863 ops/s
Iteration  24: 2356773.200 ops/s
Iteration  25: 2331674.530 ops/s
Iteration  26: 2286537.446 ops/s
Iteration  27: 2348790.894 ops/s
Iteration  28: 2356361.339 ops/s
Iteration  29: 2350831.098 ops/s
Iteration  30: 2353089.242 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_remove":
  2341503.026 ±(99.9%) 12339.740 ops/s [Average]
  (min, avg, max) = (2286537.446, 2341503.026, 2364137.075), stdev = 18469.544
  CI (99.9%): [2329163.286, 2353842.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_remove  thrpt   30  2341503.026 ± 12339.740  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 456076.713 ops/s
# Warmup Iteration   2: 932351.773 ops/s
# Warmup Iteration   3: 1814707.130 ops/s
# Warmup Iteration   4: 1550188.760 ops/s
# Warmup Iteration   5: 1855580.745 ops/s
# Warmup Iteration   6: 1838706.892 ops/s
# Warmup Iteration   7: 1855570.027 ops/s
# Warmup Iteration   8: 1856557.960 ops/s
# Warmup Iteration   9: 1847196.364 ops/s
# Warmup Iteration  10: 1844003.188 ops/s
# Warmup Iteration  11: 1845578.827 ops/s
# Warmup Iteration  12: 1830644.693 ops/s
# Warmup Iteration  13: 1849455.238 ops/s
# Warmup Iteration  14: 1849222.371 ops/s
# Warmup Iteration  15: 1856336.712 ops/s
# Warmup Iteration  16: 1852260.387 ops/s
# Warmup Iteration  17: 1836480.187 ops/s
# Warmup Iteration  18: 1859957.096 ops/s
# Warmup Iteration  19: 1855339.068 ops/s
# Warmup Iteration  20: 1855511.934 ops/s
# Warmup Iteration  21: 1843689.530 ops/s
# Warmup Iteration  22: 1847311.447 ops/s
# Warmup Iteration  23: 1862317.837 ops/s
# Warmup Iteration  24: 1850120.180 ops/s
# Warmup Iteration  25: 1846901.134 ops/s
# Warmup Iteration  26: 1858197.446 ops/s
# Warmup Iteration  27: 1853390.344 ops/s
# Warmup Iteration  28: 1847570.457 ops/s
# Warmup Iteration  29: 1847817.067 ops/s
# Warmup Iteration  30: 1846659.715 ops/s
Iteration   1: 1853881.834 ops/s
Iteration   2: 1845466.220 ops/s
Iteration   3: 1851335.166 ops/s
Iteration   4: 1855309.778 ops/s
Iteration   5: 1822808.861 ops/s
Iteration   6: 1846388.552 ops/s
Iteration   7: 1848604.984 ops/s
Iteration   8: 1856670.903 ops/s
Iteration   9: 1794881.351 ops/s
Iteration  10: 1862758.839 ops/s
Iteration  11: 1849244.354 ops/s
Iteration  12: 1854918.841 ops/s
Iteration  13: 1855780.018 ops/s
Iteration  14: 1867430.408 ops/s
Iteration  15: 1864668.759 ops/s
Iteration  16: 1823163.370 ops/s
Iteration  17: 1818850.065 ops/s
Iteration  18: 1856845.146 ops/s
Iteration  19: 1857139.978 ops/s
Iteration  20: 1826971.716 ops/s
Iteration  21: 1831416.528 ops/s
Iteration  22: 1865458.578 ops/s
Iteration  23: 1822892.183 ops/s
Iteration  24: 1836229.310 ops/s
Iteration  25: 1845294.592 ops/s
Iteration  26: 1854133.451 ops/s
Iteration  27: 1857519.348 ops/s
Iteration  28: 1844461.470 ops/s
Iteration  29: 1856274.243 ops/s
Iteration  30: 1861347.511 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAll":
  1846271.545 ±(99.9%) 11335.156 ops/s [Average]
  (min, avg, max) = (1794881.351, 1846271.545, 1867430.408), stdev = 16965.929
  CI (99.9%): [1834936.389, 1857606.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_removeAll  thrpt   30  1846271.545 ± 11335.156  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 381092.239 ops/s
# Warmup Iteration   2: 738080.826 ops/s
# Warmup Iteration   3: 1031174.742 ops/s
# Warmup Iteration   4: 978905.826 ops/s
# Warmup Iteration   5: 916987.091 ops/s
# Warmup Iteration   6: 1034405.947 ops/s
# Warmup Iteration   7: 1019120.083 ops/s
# Warmup Iteration   8: 1034621.379 ops/s
# Warmup Iteration   9: 1033754.995 ops/s
# Warmup Iteration  10: 1036550.528 ops/s
# Warmup Iteration  11: 1030783.004 ops/s
# Warmup Iteration  12: 1027995.809 ops/s
# Warmup Iteration  13: 1026031.640 ops/s
# Warmup Iteration  14: 1033932.807 ops/s
# Warmup Iteration  15: 1034315.636 ops/s
# Warmup Iteration  16: 1033145.044 ops/s
# Warmup Iteration  17: 1030134.362 ops/s
# Warmup Iteration  18: 1029101.319 ops/s
# Warmup Iteration  19: 1038836.588 ops/s
# Warmup Iteration  20: 1030059.520 ops/s
# Warmup Iteration  21: 1030763.326 ops/s
# Warmup Iteration  22: 1036566.279 ops/s
# Warmup Iteration  23: 1029882.343 ops/s
# Warmup Iteration  24: 1024460.693 ops/s
# Warmup Iteration  25: 1025871.679 ops/s
# Warmup Iteration  26: 1034856.091 ops/s
# Warmup Iteration  27: 1027872.413 ops/s
# Warmup Iteration  28: 1033705.380 ops/s
# Warmup Iteration  29: 1035711.240 ops/s
# Warmup Iteration  30: 1033689.802 ops/s
Iteration   1: 1034997.156 ops/s
Iteration   2: 1034889.369 ops/s
Iteration   3: 1030283.694 ops/s
Iteration   4: 1034094.861 ops/s
Iteration   5: 1033428.673 ops/s
Iteration   6: 1040339.005 ops/s
Iteration   7: 1032878.448 ops/s
Iteration   8: 1018875.907 ops/s
Iteration   9: 1019592.219 ops/s
Iteration  10: 1039835.789 ops/s
Iteration  11: 1024282.119 ops/s
Iteration  12: 1033861.947 ops/s
Iteration  13: 1033107.495 ops/s
Iteration  14: 1028971.951 ops/s
Iteration  15: 1033213.635 ops/s
Iteration  16: 1033880.228 ops/s
Iteration  17: 1033012.764 ops/s
Iteration  18: 1039700.553 ops/s
Iteration  19: 1023368.505 ops/s
Iteration  20: 1036332.339 ops/s
Iteration  21: 1036444.716 ops/s
Iteration  22: 1038613.825 ops/s
Iteration  23: 1032606.851 ops/s
Iteration  24: 1036128.045 ops/s
Iteration  25: 1027805.025 ops/s
Iteration  26: 1037862.422 ops/s
Iteration  27: 1033164.043 ops/s
Iteration  28: 1035111.867 ops/s
Iteration  29: 1038995.656 ops/s
Iteration  30: 1038638.705 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAll_iterable":
  1033143.927 ±(99.9%) 3751.437 ops/s [Average]
  (min, avg, max) = (1018875.907, 1033143.927, 1040339.005), stdev = 5614.975
  CI (99.9%): [1029392.490, 1036895.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  1033143.927 ± 3751.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2148390.101 ops/s
# Warmup Iteration   2: 3821381.031 ops/s
# Warmup Iteration   3: 9651035.893 ops/s
# Warmup Iteration   4: 8060507.007 ops/s
# Warmup Iteration   5: 9665513.798 ops/s
# Warmup Iteration   6: 9634820.674 ops/s
# Warmup Iteration   7: 9584572.609 ops/s
# Warmup Iteration   8: 9688244.698 ops/s
# Warmup Iteration   9: 9667027.519 ops/s
# Warmup Iteration  10: 9654846.191 ops/s
# Warmup Iteration  11: 9647657.186 ops/s
# Warmup Iteration  12: 9711485.343 ops/s
# Warmup Iteration  13: 9669505.873 ops/s
# Warmup Iteration  14: 9528660.980 ops/s
# Warmup Iteration  15: 9591041.642 ops/s
# Warmup Iteration  16: 9662399.480 ops/s
# Warmup Iteration  17: 9669587.176 ops/s
# Warmup Iteration  18: 9667138.877 ops/s
# Warmup Iteration  19: 9674843.299 ops/s
# Warmup Iteration  20: 9610478.211 ops/s
# Warmup Iteration  21: 9598619.845 ops/s
# Warmup Iteration  22: 9635924.690 ops/s
# Warmup Iteration  23: 9639965.987 ops/s
# Warmup Iteration  24: 9674620.289 ops/s
# Warmup Iteration  25: 9679213.097 ops/s
# Warmup Iteration  26: 9552467.022 ops/s
# Warmup Iteration  27: 9577217.765 ops/s
# Warmup Iteration  28: 9649413.468 ops/s
# Warmup Iteration  29: 9645606.502 ops/s
# Warmup Iteration  30: 9650920.855 ops/s
Iteration   1: 9668410.102 ops/s
Iteration   2: 9580186.944 ops/s
Iteration   3: 9709661.073 ops/s
Iteration   4: 9665136.625 ops/s
Iteration   5: 9679609.060 ops/s
Iteration   6: 9685982.123 ops/s
Iteration   7: 9692352.095 ops/s
Iteration   8: 9613501.795 ops/s
Iteration   9: 9678809.024 ops/s
Iteration  10: 9634519.759 ops/s
Iteration  11: 9661636.344 ops/s
Iteration  12: 9610257.266 ops/s
Iteration  13: 9644228.721 ops/s
Iteration  14: 9696042.259 ops/s
Iteration  15: 9572547.846 ops/s
Iteration  16: 9626008.506 ops/s
Iteration  17: 9671637.858 ops/s
Iteration  18: 9402555.506 ops/s
Iteration  19: 9666007.336 ops/s
Iteration  20: 9665965.457 ops/s
Iteration  21: 9566983.656 ops/s
Iteration  22: 9623844.712 ops/s
Iteration  23: 9677591.137 ops/s
Iteration  24: 9666978.689 ops/s
Iteration  25: 9638919.343 ops/s
Iteration  26: 9706291.642 ops/s
Iteration  27: 9665439.041 ops/s
Iteration  28: 9694083.118 ops/s
Iteration  29: 9672109.076 ops/s
Iteration  30: 9614968.318 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAtIndex":
  9645075.481 ±(99.9%) 39837.545 ops/s [Average]
  (min, avg, max) = (9402555.506, 9645075.481, 9709661.073), stdev = 59626.967
  CI (99.9%): [9605237.936, 9684913.026] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  9645075.481 ± 39837.545  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 723618.537 ops/s
# Warmup Iteration   2: 738382.024 ops/s
# Warmup Iteration   3: 964195.461 ops/s
# Warmup Iteration   4: 980788.816 ops/s
# Warmup Iteration   5: 981894.179 ops/s
# Warmup Iteration   6: 979348.919 ops/s
# Warmup Iteration   7: 979398.425 ops/s
# Warmup Iteration   8: 976841.595 ops/s
# Warmup Iteration   9: 981901.686 ops/s
# Warmup Iteration  10: 979224.059 ops/s
# Warmup Iteration  11: 985472.742 ops/s
# Warmup Iteration  12: 841197.718 ops/s
# Warmup Iteration  13: 961799.802 ops/s
# Warmup Iteration  14: 977537.084 ops/s
# Warmup Iteration  15: 979433.583 ops/s
# Warmup Iteration  16: 986771.680 ops/s
# Warmup Iteration  17: 1038615.487 ops/s
# Warmup Iteration  18: 1041693.170 ops/s
# Warmup Iteration  19: 1041620.502 ops/s
# Warmup Iteration  20: 1036579.499 ops/s
# Warmup Iteration  21: 1035901.395 ops/s
# Warmup Iteration  22: 1042126.172 ops/s
# Warmup Iteration  23: 1019377.703 ops/s
# Warmup Iteration  24: 1046173.333 ops/s
# Warmup Iteration  25: 1039562.785 ops/s
# Warmup Iteration  26: 1045909.777 ops/s
# Warmup Iteration  27: 1043737.793 ops/s
# Warmup Iteration  28: 1044790.945 ops/s
# Warmup Iteration  29: 1040011.854 ops/s
# Warmup Iteration  30: 1032590.107 ops/s
Iteration   1: 1044360.021 ops/s
Iteration   2: 1047342.524 ops/s
Iteration   3: 1044630.232 ops/s
Iteration   4: 1035910.949 ops/s
Iteration   5: 1047623.624 ops/s
Iteration   6: 1042977.747 ops/s
Iteration   7: 1044225.136 ops/s
Iteration   8: 1038629.690 ops/s
Iteration   9: 1045095.921 ops/s
Iteration  10: 1045138.539 ops/s
Iteration  11: 1042378.173 ops/s
Iteration  12: 1049954.046 ops/s
Iteration  13: 1040333.476 ops/s
Iteration  14: 1039315.652 ops/s
Iteration  15: 1047753.778 ops/s
Iteration  16: 1032675.359 ops/s
Iteration  17: 1041629.475 ops/s
Iteration  18: 1024515.282 ops/s
Iteration  19: 1044047.084 ops/s
Iteration  20: 1043770.592 ops/s
Iteration  21: 1043808.124 ops/s
Iteration  22: 1037573.346 ops/s
Iteration  23: 1025394.250 ops/s
Iteration  24: 1028042.505 ops/s
Iteration  25: 1044897.710 ops/s
Iteration  26: 1044730.475 ops/s
Iteration  27: 1041807.130 ops/s
Iteration  28: 1038874.766 ops/s
Iteration  29: 1046714.064 ops/s
Iteration  30: 1051759.343 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_greater_than_size":
  1041530.300 ±(99.9%) 4443.885 ops/s [Average]
  (min, avg, max) = (1024515.282, 1041530.300, 1051759.343), stdev = 6651.398
  CI (99.9%): [1037086.416, 1045974.185] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_greater_than_size  thrpt   30  1041530.300 ± 4443.885  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 714717.087 ops/s
# Warmup Iteration   2: 725012.188 ops/s
# Warmup Iteration   3: 965191.816 ops/s
# Warmup Iteration   4: 963191.693 ops/s
# Warmup Iteration   5: 982936.962 ops/s
# Warmup Iteration   6: 984264.616 ops/s
# Warmup Iteration   7: 961512.192 ops/s
# Warmup Iteration   8: 979598.680 ops/s
# Warmup Iteration   9: 979527.364 ops/s
# Warmup Iteration  10: 976312.399 ops/s
# Warmup Iteration  11: 977819.013 ops/s
# Warmup Iteration  12: 818802.380 ops/s
# Warmup Iteration  13: 982020.605 ops/s
# Warmup Iteration  14: 983912.710 ops/s
# Warmup Iteration  15: 981130.480 ops/s
# Warmup Iteration  16: 977762.173 ops/s
# Warmup Iteration  17: 1032854.146 ops/s
# Warmup Iteration  18: 1035496.782 ops/s
# Warmup Iteration  19: 1038819.262 ops/s
# Warmup Iteration  20: 1035235.115 ops/s
# Warmup Iteration  21: 1035977.545 ops/s
# Warmup Iteration  22: 1033900.681 ops/s
# Warmup Iteration  23: 1029794.480 ops/s
# Warmup Iteration  24: 1036406.884 ops/s
# Warmup Iteration  25: 1035895.064 ops/s
# Warmup Iteration  26: 1039787.264 ops/s
# Warmup Iteration  27: 1040282.336 ops/s
# Warmup Iteration  28: 1040684.117 ops/s
# Warmup Iteration  29: 1036979.865 ops/s
# Warmup Iteration  30: 1034925.153 ops/s
Iteration   1: 1030226.181 ops/s
Iteration   2: 1030001.354 ops/s
Iteration   3: 1035271.454 ops/s
Iteration   4: 1034096.967 ops/s
Iteration   5: 1037070.234 ops/s
Iteration   6: 1037060.177 ops/s
Iteration   7: 1040450.676 ops/s
Iteration   8: 1037428.136 ops/s
Iteration   9: 1035042.789 ops/s
Iteration  10: 1034723.489 ops/s
Iteration  11: 1037622.493 ops/s
Iteration  12: 1038480.676 ops/s
Iteration  13: 1041835.513 ops/s
Iteration  14: 1023337.701 ops/s
Iteration  15: 1038287.073 ops/s
Iteration  16: 1041158.263 ops/s
Iteration  17: 1024056.720 ops/s
Iteration  18: 1040853.831 ops/s
Iteration  19: 1038605.601 ops/s
Iteration  20: 1034450.727 ops/s
Iteration  21: 1026530.446 ops/s
Iteration  22: 1032382.500 ops/s
Iteration  23: 1037727.607 ops/s
Iteration  24: 1043444.466 ops/s
Iteration  25: 1035507.134 ops/s
Iteration  26: 1038681.319 ops/s
Iteration  27: 1038490.407 ops/s
Iteration  28: 1033775.965 ops/s
Iteration  29: 1035995.831 ops/s
Iteration  30: 1031178.925 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_negative":
  1035459.155 ±(99.9%) 3293.583 ops/s [Average]
  (min, avg, max) = (1023337.701, 1035459.155, 1043444.466), stdev = 4929.680
  CI (99.9%): [1032165.572, 1038752.738] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_negative  thrpt   30  1035459.155 ± 3293.583  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1892757.219 ops/s
# Warmup Iteration   2: 3646983.610 ops/s
# Warmup Iteration   3: 6235768.837 ops/s
# Warmup Iteration   4: 5236114.835 ops/s
# Warmup Iteration   5: 6277989.335 ops/s
# Warmup Iteration   6: 6268844.056 ops/s
# Warmup Iteration   7: 6201423.625 ops/s
# Warmup Iteration   8: 6245564.923 ops/s
# Warmup Iteration   9: 6180389.469 ops/s
# Warmup Iteration  10: 6268650.255 ops/s
# Warmup Iteration  11: 6268041.587 ops/s
# Warmup Iteration  12: 6256835.333 ops/s
# Warmup Iteration  13: 6240444.442 ops/s
# Warmup Iteration  14: 6220696.593 ops/s
# Warmup Iteration  15: 6280482.723 ops/s
# Warmup Iteration  16: 6246614.857 ops/s
# Warmup Iteration  17: 6220841.659 ops/s
# Warmup Iteration  18: 6249844.774 ops/s
# Warmup Iteration  19: 6265836.735 ops/s
# Warmup Iteration  20: 6253448.925 ops/s
# Warmup Iteration  21: 6254633.950 ops/s
# Warmup Iteration  22: 6220587.876 ops/s
# Warmup Iteration  23: 6279726.544 ops/s
# Warmup Iteration  24: 6265744.107 ops/s
# Warmup Iteration  25: 6240972.054 ops/s
# Warmup Iteration  26: 6261488.723 ops/s
# Warmup Iteration  27: 6253054.764 ops/s
# Warmup Iteration  28: 6257745.439 ops/s
# Warmup Iteration  29: 6212529.786 ops/s
# Warmup Iteration  30: 6301509.360 ops/s
Iteration   1: 6256252.382 ops/s
Iteration   2: 6263454.825 ops/s
Iteration   3: 6178439.813 ops/s
Iteration   4: 6282342.813 ops/s
Iteration   5: 6287474.762 ops/s
Iteration   6: 6278395.363 ops/s
Iteration   7: 6246277.045 ops/s
Iteration   8: 6254209.993 ops/s
Iteration   9: 6289295.252 ops/s
Iteration  10: 6194432.112 ops/s
Iteration  11: 6226855.952 ops/s
Iteration  12: 6284003.783 ops/s
Iteration  13: 6253537.518 ops/s
Iteration  14: 6242109.676 ops/s
Iteration  15: 6201731.183 ops/s
Iteration  16: 6244567.689 ops/s
Iteration  17: 6181316.423 ops/s
Iteration  18: 6298705.046 ops/s
Iteration  19: 6223297.381 ops/s
Iteration  20: 6256853.026 ops/s
Iteration  21: 6275994.600 ops/s
Iteration  22: 6272683.183 ops/s
Iteration  23: 6271610.077 ops/s
Iteration  24: 6233274.369 ops/s
Iteration  25: 6250464.191 ops/s
Iteration  26: 6297157.597 ops/s
Iteration  27: 6303489.647 ops/s
Iteration  28: 6255355.007 ops/s
Iteration  29: 6301716.465 ops/s
Iteration  30: 6262958.548 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_removeIf":
  6255608.524 ±(99.9%) 22939.220 ops/s [Average]
  (min, avg, max) = (6178439.813, 6255608.524, 6303489.647), stdev = 34334.346
  CI (99.9%): [6232669.305, 6278547.744] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_removeIf  thrpt   30  6255608.524 ± 22939.220  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 245768.269 ops/s
# Warmup Iteration   2: 492096.947 ops/s
# Warmup Iteration   3: 620193.590 ops/s
# Warmup Iteration   4: 586935.871 ops/s
# Warmup Iteration   5: 546573.935 ops/s
# Warmup Iteration   6: 621215.233 ops/s
# Warmup Iteration   7: 627121.103 ops/s
# Warmup Iteration   8: 625799.074 ops/s
# Warmup Iteration   9: 624986.712 ops/s
# Warmup Iteration  10: 614069.835 ops/s
# Warmup Iteration  11: 624166.891 ops/s
# Warmup Iteration  12: 623335.514 ops/s
# Warmup Iteration  13: 627030.676 ops/s
# Warmup Iteration  14: 624222.725 ops/s
# Warmup Iteration  15: 618333.380 ops/s
# Warmup Iteration  16: 625289.859 ops/s
# Warmup Iteration  17: 625974.966 ops/s
# Warmup Iteration  18: 625475.424 ops/s
# Warmup Iteration  19: 626154.488 ops/s
# Warmup Iteration  20: 623825.085 ops/s
# Warmup Iteration  21: 620342.828 ops/s
# Warmup Iteration  22: 625463.157 ops/s
# Warmup Iteration  23: 621113.094 ops/s
# Warmup Iteration  24: 627707.135 ops/s
# Warmup Iteration  25: 621200.609 ops/s
# Warmup Iteration  26: 627148.178 ops/s
# Warmup Iteration  27: 625394.846 ops/s
# Warmup Iteration  28: 617997.863 ops/s
# Warmup Iteration  29: 625122.369 ops/s
# Warmup Iteration  30: 627012.110 ops/s
Iteration   1: 626157.713 ops/s
Iteration   2: 620623.507 ops/s
Iteration   3: 614962.243 ops/s
Iteration   4: 625569.361 ops/s
Iteration   5: 627294.490 ops/s
Iteration   6: 626684.614 ops/s
Iteration   7: 624510.715 ops/s
Iteration   8: 627392.230 ops/s
Iteration   9: 627224.937 ops/s
Iteration  10: 619407.252 ops/s
Iteration  11: 627901.935 ops/s
Iteration  12: 623721.970 ops/s
Iteration  13: 625712.866 ops/s
Iteration  14: 625738.112 ops/s
Iteration  15: 617717.923 ops/s
Iteration  16: 621413.130 ops/s
Iteration  17: 622908.366 ops/s
Iteration  18: 624585.356 ops/s
Iteration  19: 628504.906 ops/s
Iteration  20: 624161.216 ops/s
Iteration  21: 625741.427 ops/s
Iteration  22: 614461.897 ops/s
Iteration  23: 626161.735 ops/s
Iteration  24: 623483.352 ops/s
Iteration  25: 625750.267 ops/s
Iteration  26: 616726.622 ops/s
Iteration  27: 627602.964 ops/s
Iteration  28: 624472.637 ops/s
Iteration  29: 624555.341 ops/s
Iteration  30: 627043.837 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_retainAll":
  623939.764 ±(99.9%) 2567.806 ops/s [Average]
  (min, avg, max) = (614461.897, 623939.764, 628504.906), stdev = 3843.372
  CI (99.9%): [621371.958, 626507.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_retainAll  thrpt   30  623939.764 ± 2567.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 379150.825 ops/s
# Warmup Iteration   2: 884471.329 ops/s
# Warmup Iteration   3: 1295146.384 ops/s
# Warmup Iteration   4: 1076036.248 ops/s
# Warmup Iteration   5: 1295564.014 ops/s
# Warmup Iteration   6: 1290920.419 ops/s
# Warmup Iteration   7: 1301390.461 ops/s
# Warmup Iteration   8: 1294414.463 ops/s
# Warmup Iteration   9: 1290210.321 ops/s
# Warmup Iteration  10: 1290440.032 ops/s
# Warmup Iteration  11: 1297818.455 ops/s
# Warmup Iteration  12: 1285026.771 ops/s
# Warmup Iteration  13: 1290916.528 ops/s
# Warmup Iteration  14: 1293444.587 ops/s
# Warmup Iteration  15: 1293825.729 ops/s
# Warmup Iteration  16: 1296229.741 ops/s
# Warmup Iteration  17: 1295715.456 ops/s
# Warmup Iteration  18: 1282473.200 ops/s
# Warmup Iteration  19: 1291842.086 ops/s
# Warmup Iteration  20: 1292992.465 ops/s
# Warmup Iteration  21: 1300493.220 ops/s
# Warmup Iteration  22: 1300103.554 ops/s
# Warmup Iteration  23: 1301491.675 ops/s
# Warmup Iteration  24: 1288827.390 ops/s
# Warmup Iteration  25: 1295296.281 ops/s
# Warmup Iteration  26: 1301502.754 ops/s
# Warmup Iteration  27: 1278477.806 ops/s
# Warmup Iteration  28: 1296532.759 ops/s
# Warmup Iteration  29: 1285382.889 ops/s
# Warmup Iteration  30: 1294798.111 ops/s
Iteration   1: 1291471.328 ops/s
Iteration   2: 1296871.607 ops/s
Iteration   3: 1275779.452 ops/s
Iteration   4: 1300042.462 ops/s
Iteration   5: 1291902.586 ops/s
Iteration   6: 1290865.967 ops/s
Iteration   7: 1299215.891 ops/s
Iteration   8: 1304268.311 ops/s
Iteration   9: 1296056.129 ops/s
Iteration  10: 1294126.005 ops/s
Iteration  11: 1297558.602 ops/s
Iteration  12: 1298946.844 ops/s
Iteration  13: 1300738.808 ops/s
Iteration  14: 1273940.659 ops/s
Iteration  15: 1299347.894 ops/s
Iteration  16: 1292235.399 ops/s
Iteration  17: 1295335.724 ops/s
Iteration  18: 1297965.298 ops/s
Iteration  19: 1296511.757 ops/s
Iteration  20: 1288332.704 ops/s
Iteration  21: 1301998.788 ops/s
Iteration  22: 1299095.116 ops/s
Iteration  23: 1296991.807 ops/s
Iteration  24: 1299669.524 ops/s
Iteration  25: 1279874.290 ops/s
Iteration  26: 1293934.330 ops/s
Iteration  27: 1301618.242 ops/s
Iteration  28: 1299946.226 ops/s
Iteration  29: 1285407.133 ops/s
Iteration  30: 1287639.414 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_retainAll_iterable":
  1294256.277 ±(99.9%) 5029.038 ops/s [Average]
  (min, avg, max) = (1273940.659, 1294256.277, 1304268.311), stdev = 7527.227
  CI (99.9%): [1289227.239, 1299285.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1294256.277 ± 5029.038  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1434235.202 ops/s
# Warmup Iteration   2: 3043917.249 ops/s
# Warmup Iteration   3: 5361309.342 ops/s
# Warmup Iteration   4: 4478028.084 ops/s
# Warmup Iteration   5: 5386439.920 ops/s
# Warmup Iteration   6: 5367409.204 ops/s
# Warmup Iteration   7: 5388523.393 ops/s
# Warmup Iteration   8: 5383299.583 ops/s
# Warmup Iteration   9: 5382780.950 ops/s
# Warmup Iteration  10: 5368032.877 ops/s
# Warmup Iteration  11: 5360599.666 ops/s
# Warmup Iteration  12: 5363503.553 ops/s
# Warmup Iteration  13: 5386230.572 ops/s
# Warmup Iteration  14: 5387256.031 ops/s
# Warmup Iteration  15: 5368273.862 ops/s
# Warmup Iteration  16: 5387121.090 ops/s
# Warmup Iteration  17: 5366849.322 ops/s
# Warmup Iteration  18: 5391075.845 ops/s
# Warmup Iteration  19: 5395753.324 ops/s
# Warmup Iteration  20: 5363411.985 ops/s
# Warmup Iteration  21: 5387578.208 ops/s
# Warmup Iteration  22: 5392852.380 ops/s
# Warmup Iteration  23: 5337958.054 ops/s
# Warmup Iteration  24: 5402723.120 ops/s
# Warmup Iteration  25: 5352773.066 ops/s
# Warmup Iteration  26: 5367114.564 ops/s
# Warmup Iteration  27: 5390073.419 ops/s
# Warmup Iteration  28: 5358243.004 ops/s
# Warmup Iteration  29: 5405135.299 ops/s
# Warmup Iteration  30: 5361294.146 ops/s
Iteration   1: 5363300.661 ops/s
Iteration   2: 5408882.053 ops/s
Iteration   3: 5394539.073 ops/s
Iteration   4: 5296287.301 ops/s
Iteration   5: 5368567.035 ops/s
Iteration   6: 5396419.729 ops/s
Iteration   7: 5392420.084 ops/s
Iteration   8: 5285131.886 ops/s
Iteration   9: 5358304.125 ops/s
Iteration  10: 5391111.146 ops/s
Iteration  11: 5383787.259 ops/s
Iteration  12: 5332057.246 ops/s
Iteration  13: 5373507.447 ops/s
Iteration  14: 5361787.915 ops/s
Iteration  15: 5380286.014 ops/s
Iteration  16: 5377874.357 ops/s
Iteration  17: 5358263.667 ops/s
Iteration  18: 5364519.016 ops/s
Iteration  19: 5382554.716 ops/s
Iteration  20: 5377874.960 ops/s
Iteration  21: 5395260.179 ops/s
Iteration  22: 5366986.497 ops/s
Iteration  23: 5385919.111 ops/s
Iteration  24: 5333368.975 ops/s
Iteration  25: 5354094.827 ops/s
Iteration  26: 5385477.348 ops/s
Iteration  27: 5385711.921 ops/s
Iteration  28: 5392606.492 ops/s
Iteration  29: 5328637.274 ops/s
Iteration  30: 5366168.255 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_reverseThis":
  5368056.886 ±(99.9%) 19200.127 ops/s [Average]
  (min, avg, max) = (5285131.886, 5368056.886, 5408882.053), stdev = 28737.848
  CI (99.9%): [5348856.759, 5387257.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_reverseThis  thrpt   30  5368056.886 ± 19200.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2093131.028 ops/s
# Warmup Iteration   2: 4602771.014 ops/s
# Warmup Iteration   3: 4467505.232 ops/s
# Warmup Iteration   4: 5379738.065 ops/s
# Warmup Iteration   5: 5388821.930 ops/s
# Warmup Iteration   6: 5380659.893 ops/s
# Warmup Iteration   7: 5384800.269 ops/s
# Warmup Iteration   8: 5373930.396 ops/s
# Warmup Iteration   9: 5403733.621 ops/s
# Warmup Iteration  10: 5360353.305 ops/s
# Warmup Iteration  11: 5396828.164 ops/s
# Warmup Iteration  12: 5308402.184 ops/s
# Warmup Iteration  13: 5394557.419 ops/s
# Warmup Iteration  14: 5382797.419 ops/s
# Warmup Iteration  15: 5306214.887 ops/s
# Warmup Iteration  16: 5312456.593 ops/s
# Warmup Iteration  17: 5335795.112 ops/s
# Warmup Iteration  18: 5386235.629 ops/s
# Warmup Iteration  19: 5316936.861 ops/s
# Warmup Iteration  20: 5402942.625 ops/s
# Warmup Iteration  21: 5378348.056 ops/s
# Warmup Iteration  22: 5376467.015 ops/s
# Warmup Iteration  23: 5376088.231 ops/s
# Warmup Iteration  24: 5391307.833 ops/s
# Warmup Iteration  25: 5360770.987 ops/s
# Warmup Iteration  26: 5367275.519 ops/s
# Warmup Iteration  27: 5333800.598 ops/s
# Warmup Iteration  28: 5309125.044 ops/s
# Warmup Iteration  29: 5361705.173 ops/s
# Warmup Iteration  30: 5345679.603 ops/s
Iteration   1: 5362644.652 ops/s
Iteration   2: 5346072.831 ops/s
Iteration   3: 5362602.640 ops/s
Iteration   4: 5351355.531 ops/s
Iteration   5: 5368944.011 ops/s
Iteration   6: 5378256.884 ops/s
Iteration   7: 5358948.351 ops/s
Iteration   8: 5328151.199 ops/s
Iteration   9: 5395412.853 ops/s
Iteration  10: 5366782.318 ops/s
Iteration  11: 5293624.153 ops/s
Iteration  12: 5367777.906 ops/s
Iteration  13: 5356026.473 ops/s
Iteration  14: 5381922.740 ops/s
Iteration  15: 5369289.704 ops/s
Iteration  16: 5391663.396 ops/s
Iteration  17: 5270010.745 ops/s
Iteration  18: 5361738.867 ops/s
Iteration  19: 5344736.277 ops/s
Iteration  20: 5357028.843 ops/s
Iteration  21: 5343809.190 ops/s
Iteration  22: 5397771.139 ops/s
Iteration  23: 5383820.996 ops/s
Iteration  24: 5390177.118 ops/s
Iteration  25: 5401834.365 ops/s
Iteration  26: 5373912.720 ops/s
Iteration  27: 5379139.329 ops/s
Iteration  28: 5397527.944 ops/s
Iteration  29: 5378188.107 ops/s
Iteration  30: 5385707.881 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_select":
  5364829.306 ±(99.9%) 19452.172 ops/s [Average]
  (min, avg, max) = (5270010.745, 5364829.306, 5401834.365), stdev = 29115.098
  CI (99.9%): [5345377.133, 5384281.478] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_select  thrpt   30  5364829.306 ± 19452.172  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2124902.635 ops/s
# Warmup Iteration   2: 3597655.292 ops/s
# Warmup Iteration   3: 10831258.649 ops/s
# Warmup Iteration   4: 9067644.022 ops/s
# Warmup Iteration   5: 10750120.629 ops/s
# Warmup Iteration   6: 10783883.562 ops/s
# Warmup Iteration   7: 10876962.277 ops/s
# Warmup Iteration   8: 10697898.036 ops/s
# Warmup Iteration   9: 10755161.332 ops/s
# Warmup Iteration  10: 10881805.665 ops/s
# Warmup Iteration  11: 10899209.968 ops/s
# Warmup Iteration  12: 10885357.498 ops/s
# Warmup Iteration  13: 10925394.342 ops/s
# Warmup Iteration  14: 10666093.571 ops/s
# Warmup Iteration  15: 10907765.328 ops/s
# Warmup Iteration  16: 10881882.352 ops/s
# Warmup Iteration  17: 10887342.094 ops/s
# Warmup Iteration  18: 10868146.089 ops/s
# Warmup Iteration  19: 10793921.546 ops/s
# Warmup Iteration  20: 10763045.882 ops/s
# Warmup Iteration  21: 10898410.538 ops/s
# Warmup Iteration  22: 10883290.604 ops/s
# Warmup Iteration  23: 10869078.176 ops/s
# Warmup Iteration  24: 10858849.489 ops/s
# Warmup Iteration  25: 10807157.737 ops/s
# Warmup Iteration  26: 10568349.768 ops/s
# Warmup Iteration  27: 10828290.485 ops/s
# Warmup Iteration  28: 10783512.913 ops/s
# Warmup Iteration  29: 10890320.361 ops/s
# Warmup Iteration  30: 10816695.353 ops/s
Iteration   1: 10833104.686 ops/s
Iteration   2: 10740264.345 ops/s
Iteration   3: 10880164.716 ops/s
Iteration   4: 10884816.854 ops/s
Iteration   5: 10792048.868 ops/s
Iteration   6: 10843961.576 ops/s
Iteration   7: 10803835.211 ops/s
Iteration   8: 10903698.309 ops/s
Iteration   9: 10676583.308 ops/s
Iteration  10: 10888524.576 ops/s
Iteration  11: 10857913.447 ops/s
Iteration  12: 10913379.336 ops/s
Iteration  13: 10894695.292 ops/s
Iteration  14: 10836590.493 ops/s
Iteration  15: 10809404.871 ops/s
Iteration  16: 10877857.608 ops/s
Iteration  17: 10878455.605 ops/s
Iteration  18: 10765301.588 ops/s
Iteration  19: 10868496.572 ops/s
Iteration  20: 10773246.773 ops/s
Iteration  21: 10911317.510 ops/s
Iteration  22: 10746489.321 ops/s
Iteration  23: 10903690.396 ops/s
Iteration  24: 10901885.029 ops/s
Iteration  25: 10839164.901 ops/s
Iteration  26: 10913776.433 ops/s
Iteration  27: 10726243.474 ops/s
Iteration  28: 10908714.781 ops/s
Iteration  29: 10879234.667 ops/s
Iteration  30: 10907160.563 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_set":
  10845334.037 ±(99.9%) 43649.191 ops/s [Average]
  (min, avg, max) = (10676583.308, 10845334.037, 10913776.433), stdev = 65332.060
  CI (99.9%): [10801684.846, 10888983.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_set  thrpt   30  10845334.037 ± 43649.191  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_set_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_set_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 734520.680 ops/s
# Warmup Iteration   2: 743660.835 ops/s
# Warmup Iteration   3: 968092.988 ops/s
# Warmup Iteration   4: 972367.778 ops/s
# Warmup Iteration   5: 978413.282 ops/s
# Warmup Iteration   6: 974917.625 ops/s
# Warmup Iteration   7: 978919.842 ops/s
# Warmup Iteration   8: 974839.113 ops/s
# Warmup Iteration   9: 978247.256 ops/s
# Warmup Iteration  10: 975662.348 ops/s
# Warmup Iteration  11: 972011.787 ops/s
# Warmup Iteration  12: 845356.480 ops/s
# Warmup Iteration  13: 952583.876 ops/s
# Warmup Iteration  14: 979419.738 ops/s
# Warmup Iteration  15: 978815.628 ops/s
# Warmup Iteration  16: 980752.562 ops/s
# Warmup Iteration  17: 1034670.488 ops/s
# Warmup Iteration  18: 1039972.755 ops/s
# Warmup Iteration  19: 1022273.373 ops/s
# Warmup Iteration  20: 1037111.096 ops/s
# Warmup Iteration  21: 1030109.079 ops/s
# Warmup Iteration  22: 1036365.983 ops/s
# Warmup Iteration  23: 1025813.312 ops/s
# Warmup Iteration  24: 1032949.604 ops/s
# Warmup Iteration  25: 1028598.299 ops/s
# Warmup Iteration  26: 1035876.074 ops/s
# Warmup Iteration  27: 1030921.255 ops/s
# Warmup Iteration  28: 1038657.454 ops/s
# Warmup Iteration  29: 1036875.063 ops/s
# Warmup Iteration  30: 1034912.167 ops/s
Iteration   1: 1032794.816 ops/s
Iteration   2: 1030007.673 ops/s
Iteration   3: 1035512.314 ops/s
Iteration   4: 1010785.541 ops/s
Iteration   5: 1027667.883 ops/s
Iteration   6: 1037142.623 ops/s
Iteration   7: 1035982.859 ops/s
Iteration   8: 1037851.643 ops/s
Iteration   9: 1019071.867 ops/s
Iteration  10: 1036006.894 ops/s
Iteration  11: 1016101.589 ops/s
Iteration  12: 1040447.926 ops/s
Iteration  13: 1032818.243 ops/s
Iteration  14: 1026371.819 ops/s
Iteration  15: 1035879.497 ops/s
Iteration  16: 1034160.823 ops/s
Iteration  17: 1039368.128 ops/s
Iteration  18: 1034987.748 ops/s
Iteration  19: 1039851.906 ops/s
Iteration  20: 1038078.223 ops/s
Iteration  21: 1035768.149 ops/s
Iteration  22: 1036386.432 ops/s
Iteration  23: 1031543.037 ops/s
Iteration  24: 1038049.936 ops/s
Iteration  25: 1034355.698 ops/s
Iteration  26: 1032211.047 ops/s
Iteration  27: 1035810.919 ops/s
Iteration  28: 1034451.968 ops/s
Iteration  29: 1030445.296 ops/s
Iteration  30: 1037261.827 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_set_throws_index_greater_than_size":
  1032905.811 ±(99.9%) 4617.794 ops/s [Average]
  (min, avg, max) = (1010785.541, 1032905.811, 1040447.926), stdev = 6911.698
  CI (99.9%): [1028288.016, 1037523.605] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_set_throws_index_greater_than_size  thrpt   30  1032905.811 ± 4617.794  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3462063.562 ops/s
# Warmup Iteration   2: 5784497.332 ops/s
# Warmup Iteration   3: 6906899.780 ops/s
# Warmup Iteration   4: 6902409.546 ops/s
# Warmup Iteration   5: 6868805.986 ops/s
# Warmup Iteration   6: 6922212.047 ops/s
# Warmup Iteration   7: 6896816.514 ops/s
# Warmup Iteration   8: 6890265.645 ops/s
# Warmup Iteration   9: 6869578.048 ops/s
# Warmup Iteration  10: 6916400.156 ops/s
# Warmup Iteration  11: 6870455.084 ops/s
# Warmup Iteration  12: 6910714.097 ops/s
# Warmup Iteration  13: 6936566.063 ops/s
# Warmup Iteration  14: 6893009.325 ops/s
# Warmup Iteration  15: 6884643.045 ops/s
# Warmup Iteration  16: 6923708.798 ops/s
# Warmup Iteration  17: 6921894.407 ops/s
# Warmup Iteration  18: 6900239.420 ops/s
# Warmup Iteration  19: 6812871.166 ops/s
# Warmup Iteration  20: 6889840.450 ops/s
# Warmup Iteration  21: 6863389.454 ops/s
# Warmup Iteration  22: 6887915.195 ops/s
# Warmup Iteration  23: 6888031.325 ops/s
# Warmup Iteration  24: 6839781.575 ops/s
# Warmup Iteration  25: 6921973.620 ops/s
# Warmup Iteration  26: 6859717.920 ops/s
# Warmup Iteration  27: 6939351.208 ops/s
# Warmup Iteration  28: 6925160.760 ops/s
# Warmup Iteration  29: 6886998.165 ops/s
# Warmup Iteration  30: 6933906.458 ops/s
Iteration   1: 6886545.755 ops/s
Iteration   2: 6836768.790 ops/s
Iteration   3: 6927092.642 ops/s
Iteration   4: 6932386.246 ops/s
Iteration   5: 6852659.037 ops/s
Iteration   6: 6867529.490 ops/s
Iteration   7: 6876198.801 ops/s
Iteration   8: 6926776.028 ops/s
Iteration   9: 6785143.999 ops/s
Iteration  10: 6880701.826 ops/s
Iteration  11: 6885527.435 ops/s
Iteration  12: 6860489.946 ops/s
Iteration  13: 6890409.658 ops/s
Iteration  14: 6901377.236 ops/s
Iteration  15: 6912705.230 ops/s
Iteration  16: 6884530.998 ops/s
Iteration  17: 6916104.740 ops/s
Iteration  18: 6891136.857 ops/s
Iteration  19: 6948625.702 ops/s
Iteration  20: 6843774.137 ops/s
Iteration  21: 6813009.582 ops/s
Iteration  22: 6894860.752 ops/s
Iteration  23: 6884574.970 ops/s
Iteration  24: 6873293.049 ops/s
Iteration  25: 6856373.127 ops/s
Iteration  26: 6861300.453 ops/s
Iteration  27: 6902693.858 ops/s
Iteration  28: 6852901.046 ops/s
Iteration  29: 6859560.222 ops/s
Iteration  30: 6763329.837 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_size":
  6875612.715 ±(99.9%) 27428.721 ops/s [Average]
  (min, avg, max) = (6763329.837, 6875612.715, 6948625.702), stdev = 41054.022
  CI (99.9%): [6848183.994, 6903041.436] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_size  thrpt   30  6875612.715 ± 27428.721  ops/s
----------------------------------------
